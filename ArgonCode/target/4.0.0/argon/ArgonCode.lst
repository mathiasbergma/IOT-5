
c:/Users/mathi/Desktop/IOT/ElecPrice/ArgonCode/target/4.0.0/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009c90  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bdcb0  000bdcb0  0000dcb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bdcd4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000210  2003d2c0  000bdcd8  0001d2c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001320  2003d4d0  2003d4d0  0002d4d0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bdee8  000bdee8  0001dee8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bdf10  000bdf10  0001df10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016a196  00000000  00000000  0001df14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019dde  00000000  00000000  001880aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00044d90  00000000  00000000  001a1e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003818  00000000  00000000  001e6c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c300  00000000  00000000  001ea430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042ad9  00000000  00000000  001f6730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00053912  00000000  00000000  00239209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e599  00000000  00000000  0028cb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a898  00000000  00000000  003cb0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fd3c 	bl	baaae <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fd5e 	bl	baafe <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d2c0 	.word	0x2003d2c0
   b404c:	000bdcd8 	.word	0x000bdcd8
   b4050:	2003d4d0 	.word	0x2003d4d0
   b4054:	2003d4d0 	.word	0x2003d4d0
   b4058:	2003e7f0 	.word	0x2003e7f0

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fdd1 	bl	b8c08 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bdc7c 	.word	0x000bdc7c
   b4080:	000bdca4 	.word	0x000bdca4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bb4a 	b.w	b471c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fcdb 	bl	b4a44 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 bd71 	b.w	b8b78 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bc1d 	b.w	b68d4 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bc1b 	b.w	b68d4 <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 bc21 	b.w	b68e4 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 bc1f 	b.w	b68e4 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z8callbackPcPhj>:
void callback(char *topic, byte *payload, unsigned int length)
{
#ifdef STATEDEBUG
    digitalWrite(state, LOW);
#endif
    state = GET_DATA;
   b40b8:	4b01      	ldr	r3, [pc, #4]	; (b40c0 <_Z8callbackPcPhj+0x8>)
   b40ba:	2201      	movs	r2, #1
   b40bc:	701a      	strb	r2, [r3, #0]
#ifdef STATEDEBUG
    digitalWrite(state, HIGH);
#endif
}
   b40be:	4770      	bx	lr
   b40c0:	2003d75c 	.word	0x2003d75c

000b40c4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context){
   b40c4:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40c6:	4b04      	ldr	r3, [pc, #16]	; (b40d8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40c8:	2201      	movs	r2, #1
   b40ca:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40cc:	f002 f8f4 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40d0:	4b02      	ldr	r3, [pc, #8]	; (b40dc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40d2:	6018      	str	r0, [r3, #0]
}
   b40d4:	bd08      	pop	{r3, pc}
   b40d6:	bf00      	nop
   b40d8:	2003d4e8 	.word	0x2003d4e8
   b40dc:	2003d6e8 	.word	0x2003d6e8

000b40e0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b40e0:	6943      	ldr	r3, [r0, #20]
   b40e2:	b113      	cbz	r3, b40ea <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40e4:	6983      	ldr	r3, [r0, #24]
   b40e6:	300c      	adds	r0, #12
   b40e8:	4718      	bx	r3
            callback();
        }
    }
   b40ea:	4770      	bx	lr

000b40ec <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b40ec:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b40ee:	2100      	movs	r1, #0
   b40f0:	4604      	mov	r4, r0
   b40f2:	4608      	mov	r0, r1
   b40f4:	f002 f982 	bl	b63fc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b40f8:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b40fa:	4620      	mov	r0, r4
   b40fc:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b40fe:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4100:	f002 f994 	bl	b642c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4104:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4106:	b10c      	cbz	r4, b410c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4108:	2301      	movs	r3, #1
   b410a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b410c:	2100      	movs	r1, #0
   b410e:	2001      	movs	r0, #1
   b4110:	f002 f974 	bl	b63fc <os_thread_scheduling>
            }
        }
        if (t) {
   b4114:	b12c      	cbz	r4, b4122 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4116:	6823      	ldr	r3, [r4, #0]
   b4118:	4620      	mov	r0, r4
   b411a:	689b      	ldr	r3, [r3, #8]
   b411c:	4798      	blx	r3
            t->running = false;
   b411e:	2300      	movs	r3, #0
   b4120:	7123      	strb	r3, [r4, #4]
        }
    }
   b4122:	b002      	add	sp, #8
   b4124:	bd10      	pop	{r4, pc}

000b4126 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4126:	2a01      	cmp	r2, #1
   b4128:	d102      	bne.n	b4130 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b412a:	6001      	str	r1, [r0, #0]
      }
   b412c:	2000      	movs	r0, #0
   b412e:	4770      	bx	lr
	  switch (__op)
   b4130:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4132:	bf04      	itt	eq
   b4134:	680b      	ldreq	r3, [r1, #0]
   b4136:	6003      	streq	r3, [r0, #0]
	      break;
   b4138:	e7f8      	b.n	b412c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b413a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b413a:	6803      	ldr	r3, [r0, #0]
   b413c:	4718      	bx	r3

000b413e <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b503      	push	{r0, r1, lr}
   b4142:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4144:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4146:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b414a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b414c:	f004 fbb3 	bl	b88b6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4150:	b002      	add	sp, #8
   b4152:	f85d eb04 	ldr.w	lr, [sp], #4
   b4156:	b003      	add	sp, #12
   b4158:	4770      	bx	lr
   b415a:	0000      	movs	r0, r0
   b415c:	0000      	movs	r0, r0
	...

000b4160 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b4160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b4164:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b4166:	4608      	mov	r0, r1
{
   b4168:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b416a:	f006 fd3e 	bl	babea <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b416e:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b4170:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b4172:	a801      	add	r0, sp, #4
   b4174:	f006 fd13 	bl	bab9e <strcpy>

    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b4178:	4941      	ldr	r1, [pc, #260]	; (b4280 <_Z9myHandlerPKcS0_+0x120>)
   b417a:	4d42      	ldr	r5, [pc, #264]	; (b4284 <_Z9myHandlerPKcS0_+0x124>)
   b417c:	a801      	add	r0, sp, #4
   b417e:	f007 fb9d 	bl	bb8bc <strtok>
   b4182:	f006 fc6c 	bl	baa5e <atoi>
   b4186:	4621      	mov	r1, r4
   b4188:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b418c:	f006 fcee 	bl	bab6c <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b4190:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4194:	d240      	bcs.n	b4218 <_Z9myHandlerPKcS0_+0xb8>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b4196:	f005 f8fd 	bl	b9394 <_Z16_fetch_usbserialv>
   b419a:	462a      	mov	r2, r5
   b419c:	493a      	ldr	r1, [pc, #232]	; (b4288 <_Z9myHandlerPKcS0_+0x128>)
            {
                cost_tomorrow[i] = (atof(token) / 1000)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000)+transport.medium;
   b419e:	4f3b      	ldr	r7, [pc, #236]	; (b428c <_Z9myHandlerPKcS0_+0x12c>)
        Serial.printf("%s\n", temp);
   b41a0:	f7ff ffcd 	bl	b413e <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b41a4:	4628      	mov	r0, r5
   b41a6:	493a      	ldr	r1, [pc, #232]	; (b4290 <_Z9myHandlerPKcS0_+0x130>)
   b41a8:	4d3a      	ldr	r5, [pc, #232]	; (b4294 <_Z9myHandlerPKcS0_+0x134>)
   b41aa:	f007 fb87 	bl	bb8bc <strtok>
        for (int i = 0; i < range; i++)
   b41ae:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000)+transport.medium;
   b41b0:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b41b2:	f8df a0ec 	ldr.w	sl, [pc, #236]	; b42a0 <_Z9myHandlerPKcS0_+0x140>
   b41b6:	f8da 3000 	ldr.w	r3, [sl]
   b41ba:	42a3      	cmp	r3, r4
   b41bc:	dd29      	ble.n	b4212 <_Z9myHandlerPKcS0_+0xb2>
            sscanf(token, "%*d-%*d-%*dT%d:%*d:%*d", &cost_hour[i]);
   b41be:	462a      	mov	r2, r5
   b41c0:	4935      	ldr	r1, [pc, #212]	; (b4298 <_Z9myHandlerPKcS0_+0x138>)
   b41c2:	f8df 90e0 	ldr.w	r9, [pc, #224]	; b42a4 <_Z9myHandlerPKcS0_+0x144>
   b41c6:	f002 fba5 	bl	b6914 <sscanf>
            token = strtok(NULL, ",!");
   b41ca:	4931      	ldr	r1, [pc, #196]	; (b4290 <_Z9myHandlerPKcS0_+0x130>)
   b41cc:	2000      	movs	r0, #0
   b41ce:	f007 fb75 	bl	bb8bc <strtok>
            if (cost_hour[i] >= 0 && cost_hour[i] < 7)
   b41d2:	682b      	ldr	r3, [r5, #0]
   b41d4:	2b06      	cmp	r3, #6
   b41d6:	f105 0504 	add.w	r5, r5, #4
   b41da:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   b41de:	d81e      	bhi.n	b421e <_Z9myHandlerPKcS0_+0xbe>
                 cost_tomorrow[i] = (atof(token) / 1000)+transport.low;
   b41e0:	f006 fc3a 	bl	baa58 <atof>
   b41e4:	f8d9 3000 	ldr.w	r3, [r9]
   b41e8:	4632      	mov	r2, r6
   b41ea:	ec51 0b10 	vmov	r0, r1, d0
   b41ee:	4498      	add	r8, r3
   b41f0:	463b      	mov	r3, r7
   b41f2:	f006 fa49 	bl	ba688 <__aeabi_ddiv>
   b41f6:	a31c      	add	r3, pc, #112	; (adr r3, b4268 <_Z9myHandlerPKcS0_+0x108>)
   b41f8:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000)+transport.medium;
   b41fc:	f005 ff64 	bl	ba0c8 <__adddf3>
   b4200:	e9c8 0100 	strd	r0, r1, [r8]
            }

            if ((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 24.
   b4204:	4922      	ldr	r1, [pc, #136]	; (b4290 <_Z9myHandlerPKcS0_+0x130>)
   b4206:	2000      	movs	r0, #0
   b4208:	f007 fb58 	bl	bb8bc <strtok>
   b420c:	bb40      	cbnz	r0, b4260 <_Z9myHandlerPKcS0_+0x100>
            {
                range = i; // Update range, such that the rest of program flow is aware of size
   b420e:	f8ca 4000 	str.w	r4, [sl]
            }
        }
#ifdef STATEDEBUG
        digitalWrite(state, LOW);
#endif
        state = CALCULATE;
   b4212:	4b22      	ldr	r3, [pc, #136]	; (b429c <_Z9myHandlerPKcS0_+0x13c>)
   b4214:	2202      	movs	r2, #2
   b4216:	701a      	strb	r2, [r3, #0]
#ifdef STATEDEBUG
        digitalWrite(state, HIGH);
#endif
    }
   b4218:	b004      	add	sp, #16
   b421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if (cost_hour[i] > 16 && cost_hour[i] < 22)
   b421e:	3b11      	subs	r3, #17
   b4220:	2b04      	cmp	r3, #4
   b4222:	d80e      	bhi.n	b4242 <_Z9myHandlerPKcS0_+0xe2>
                cost_tomorrow[i] = (atof(token) / 1000)+transport.high;
   b4224:	f006 fc18 	bl	baa58 <atof>
   b4228:	f8d9 3000 	ldr.w	r3, [r9]
   b422c:	4632      	mov	r2, r6
   b422e:	ec51 0b10 	vmov	r0, r1, d0
   b4232:	4498      	add	r8, r3
   b4234:	463b      	mov	r3, r7
   b4236:	f006 fa27 	bl	ba688 <__aeabi_ddiv>
   b423a:	a30d      	add	r3, pc, #52	; (adr r3, b4270 <_Z9myHandlerPKcS0_+0x110>)
   b423c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4240:	e7dc      	b.n	b41fc <_Z9myHandlerPKcS0_+0x9c>
                cost_tomorrow[i] = (atof(token) / 1000)+transport.medium;
   b4242:	f006 fc09 	bl	baa58 <atof>
   b4246:	f8d9 3000 	ldr.w	r3, [r9]
   b424a:	4632      	mov	r2, r6
   b424c:	ec51 0b10 	vmov	r0, r1, d0
   b4250:	4498      	add	r8, r3
   b4252:	463b      	mov	r3, r7
   b4254:	f006 fa18 	bl	ba688 <__aeabi_ddiv>
   b4258:	a307      	add	r3, pc, #28	; (adr r3, b4278 <_Z9myHandlerPKcS0_+0x118>)
   b425a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b425e:	e7cd      	b.n	b41fc <_Z9myHandlerPKcS0_+0x9c>
        for (int i = 0; i < range; i++)
   b4260:	3401      	adds	r4, #1
   b4262:	e7a6      	b.n	b41b2 <_Z9myHandlerPKcS0_+0x52>
   b4264:	f3af 8000 	nop.w
   b4268:	ebedfa44 	.word	0xebedfa44
   b426c:	3fcb39c0 	.word	0x3fcb39c0
   b4270:	2d0e5604 	.word	0x2d0e5604
   b4274:	3ffe9db2 	.word	0x3ffe9db2
   b4278:	42c3c9ef 	.word	0x42c3c9ef
   b427c:	3fe469ad 	.word	0x3fe469ad
   b4280:	000bccb8 	.word	0x000bccb8
   b4284:	2003d75d 	.word	0x2003d75d
   b4288:	000bccc0 	.word	0x000bccc0
   b428c:	408f4000 	.word	0x408f4000
   b4290:	000bccc4 	.word	0x000bccc4
   b4294:	2003d678 	.word	0x2003d678
   b4298:	000bccc7 	.word	0x000bccc7
   b429c:	2003d75c 	.word	0x2003d75c
   b42a0:	2003d2e0 	.word	0x2003d2e0
   b42a4:	2003d6dc 	.word	0x2003d6dc

000b42a8 <_Z13handle_sensorv>:
{
   b42a8:	b570      	push	{r4, r5, r6, lr}
    if ((delta = current_reading - last_read) > 100)
   b42aa:	4e0b      	ldr	r6, [pc, #44]	; (b42d8 <_Z13handle_sensorv+0x30>)
   b42ac:	f002 f804 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
   b42b0:	6835      	ldr	r5, [r6, #0]
   b42b2:	1b45      	subs	r5, r0, r5
   b42b4:	2d64      	cmp	r5, #100	; 0x64
   b42b6:	4604      	mov	r4, r0
   b42b8:	d90d      	bls.n	b42d6 <_Z13handle_sensorv+0x2e>
        Serial.printf("In interrupt\n");
   b42ba:	f005 f86b 	bl	b9394 <_Z16_fetch_usbserialv>
   b42be:	4907      	ldr	r1, [pc, #28]	; (b42dc <_Z13handle_sensorv+0x34>)
   b42c0:	f7ff ff3d 	bl	b413e <_ZN5Print6printfEPKcz>
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b42c4:	4b06      	ldr	r3, [pc, #24]	; (b42e0 <_Z13handle_sensorv+0x38>)
   b42c6:	fbb3 f5f5 	udiv	r5, r3, r5
   b42ca:	4b06      	ldr	r3, [pc, #24]	; (b42e4 <_Z13handle_sensorv+0x3c>)
        last_read = current_reading;
   b42cc:	6034      	str	r4, [r6, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b42ce:	601d      	str	r5, [r3, #0]
        state = TRANSMIT_SENSOR;
   b42d0:	4b05      	ldr	r3, [pc, #20]	; (b42e8 <_Z13handle_sensorv+0x40>)
   b42d2:	2204      	movs	r2, #4
   b42d4:	701a      	strb	r2, [r3, #0]
}
   b42d6:	bd70      	pop	{r4, r5, r6, pc}
   b42d8:	2003d594 	.word	0x2003d594
   b42dc:	000bccde 	.word	0x000bccde
   b42e0:	0036ee80 	.word	0x0036ee80
   b42e4:	2003d5fc 	.word	0x2003d5fc
   b42e8:	2003d75c 	.word	0x2003d75c

000b42ec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b42ec:	b510      	push	{r4, lr}
      if (_M_manager)
   b42ee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b42f0:	4604      	mov	r4, r0
      if (_M_manager)
   b42f2:	b113      	cbz	r3, b42fa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b42f4:	2203      	movs	r2, #3
   b42f6:	4601      	mov	r1, r0
   b42f8:	4798      	blx	r3
    }
   b42fa:	4620      	mov	r0, r4
   b42fc:	bd10      	pop	{r4, pc}
	...

000b4300 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4300:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4302:	4b13      	ldr	r3, [pc, #76]	; (b4350 <_ZN5TimerD1Ev+0x50>)
   b4304:	6003      	str	r3, [r0, #0]
   b4306:	4604      	mov	r4, r0
        if (handle) {
   b4308:	6880      	ldr	r0, [r0, #8]
   b430a:	b1c8      	cbz	r0, b4340 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b430c:	2500      	movs	r5, #0
   b430e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4312:	e9cd 3500 	strd	r3, r5, [sp]
   b4316:	2102      	movs	r1, #2
   b4318:	462b      	mov	r3, r5
   b431a:	462a      	mov	r2, r5
   b431c:	f002 f88e 	bl	b643c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4320:	68a0      	ldr	r0, [r4, #8]
   b4322:	4629      	mov	r1, r5
   b4324:	f002 f8c2 	bl	b64ac <os_timer_set_id>
            while (running) {
   b4328:	7923      	ldrb	r3, [r4, #4]
   b432a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b432e:	b113      	cbz	r3, b4336 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4330:	f002 f85c 	bl	b63ec <os_thread_yield>
            while (running) {
   b4334:	e7f8      	b.n	b4328 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4336:	68a0      	ldr	r0, [r4, #8]
   b4338:	4629      	mov	r1, r5
   b433a:	f002 f86f 	bl	b641c <os_timer_destroy>
            handle = nullptr;
   b433e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4340:	f104 000c 	add.w	r0, r4, #12
   b4344:	f7ff ffd2 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
    }
   b4348:	4620      	mov	r0, r4
   b434a:	b003      	add	sp, #12
   b434c:	bd30      	pop	{r4, r5, pc}
   b434e:	bf00      	nop
   b4350:	000bd124 	.word	0x000bd124

000b4354 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4354:	b510      	push	{r4, lr}
   b4356:	4604      	mov	r4, r0
    }
   b4358:	f7ff ffd2 	bl	b4300 <_ZN5TimerD1Ev>
   b435c:	4620      	mov	r0, r4
   b435e:	211c      	movs	r1, #28
   b4360:	f7ff fe9f 	bl	b40a2 <_ZdlPvj>
   b4364:	4620      	mov	r0, r4
   b4366:	bd10      	pop	{r4, pc}

000b4368 <_Z8calc_lowPA2_iPdPii>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int * cost_hour, int size)
{
   b4368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b436c:	ed2d 8b02 	vpush	{d8}
   b4370:	b09d      	sub	sp, #116	; 0x74
   b4372:	e9cd 3202 	strd	r3, r2, [sp, #8]
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value
   b4376:	4f50      	ldr	r7, [pc, #320]	; (b44b8 <_Z8calc_lowPA2_iPdPii+0x150>)
{
   b4378:	4605      	mov	r5, r0
   b437a:	468b      	mov	fp, r1
   b437c:	468a      	mov	sl, r1

    for (int i = 0; i < size; i++)
   b437e:	2400      	movs	r4, #0
    double last_small = 100; // Assign any absurdly high value
   b4380:	2600      	movs	r6, #0
    double last_big = 0;
   b4382:	f04f 0800 	mov.w	r8, #0
   b4386:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < size; i++)
   b438a:	9b02      	ldr	r3, [sp, #8]
   b438c:	429c      	cmp	r4, r3
   b438e:	da17      	bge.n	b43c0 <_Z8calc_lowPA2_iPdPii+0x58>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4390:	ecba 7b02 	vldmia	sl!, {d7}
   b4394:	4642      	mov	r2, r8
   b4396:	ec51 0b17 	vmov	r0, r1, d7
   b439a:	464b      	mov	r3, r9
   b439c:	ed8d 7b00 	vstr	d7, [sp]
   b43a0:	f006 fad8 	bl	ba954 <__aeabi_dcmpgt>
   b43a4:	b108      	cbz	r0, b43aa <_Z8calc_lowPA2_iPdPii+0x42>
        {
            last_big = cost[i];
   b43a6:	e9dd 8900 	ldrd	r8, r9, [sp]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b43aa:	e9dd 0100 	ldrd	r0, r1, [sp]
   b43ae:	4632      	mov	r2, r6
   b43b0:	463b      	mov	r3, r7
   b43b2:	f006 fab1 	bl	ba918 <__aeabi_dcmplt>
   b43b6:	b108      	cbz	r0, b43bc <_Z8calc_lowPA2_iPdPii+0x54>
        {
            last_small = cost[i];
   b43b8:	e9dd 6700 	ldrd	r6, r7, [sp]
    for (int i = 0; i < size; i++)
   b43bc:	3401      	adds	r4, #1
   b43be:	e7e4      	b.n	b438a <_Z8calc_lowPA2_iPdPii+0x22>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b43c0:	4632      	mov	r2, r6
   b43c2:	463b      	mov	r3, r7
   b43c4:	4640      	mov	r0, r8
   b43c6:	4649      	mov	r1, r9
   b43c8:	f005 fe7c 	bl	ba0c4 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b43cc:	a338      	add	r3, pc, #224	; (adr r3, b44b0 <_Z8calc_lowPA2_iPdPii+0x148>)
   b43ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43d2:	f006 f82f 	bl	ba434 <__aeabi_dmul>
   b43d6:	4632      	mov	r2, r6
   b43d8:	463b      	mov	r3, r7
   b43da:	f005 fe75 	bl	ba0c8 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= size; i++)
   b43de:	f04f 0a00 	mov.w	sl, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b43e2:	ec41 0b18 	vmov	d8, r0, r1
    int idx = 0;
   b43e6:	4654      	mov	r4, sl
    for (int i = 0; i <= size; i++)
   b43e8:	9b02      	ldr	r3, [sp, #8]
   b43ea:	459a      	cmp	sl, r3
   b43ec:	dc12      	bgt.n	b4414 <_Z8calc_lowPA2_iPdPii+0xac>
    {
        
        if (cost[i] < small_offset)
   b43ee:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   b43f2:	ec53 2b18 	vmov	r2, r3, d8
   b43f6:	f006 fa8f 	bl	ba918 <__aeabi_dcmplt>
   b43fa:	b140      	cbz	r0, b440e <_Z8calc_lowPA2_iPdPii+0xa6>
        {
            low_range_hour[idx] = cost_hour[i];
   b43fc:	9a03      	ldr	r2, [sp, #12]
   b43fe:	ab1c      	add	r3, sp, #112	; 0x70
   b4400:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b4404:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
   b4408:	f843 2c60 	str.w	r2, [r3, #-96]
            
            idx++;
   b440c:	3401      	adds	r4, #1
    for (int i = 0; i <= size; i++)
   b440e:	f10a 0a01 	add.w	sl, sl, #1
   b4412:	e7e9      	b.n	b43e8 <_Z8calc_lowPA2_iPdPii+0x80>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b4414:	f004 ffbe 	bl	b9394 <_Z16_fetch_usbserialv>
   b4418:	4928      	ldr	r1, [pc, #160]	; (b44bc <_Z8calc_lowPA2_iPdPii+0x154>)
   b441a:	4642      	mov	r2, r8
   b441c:	464b      	mov	r3, r9
   b441e:	f7ff fe8e 	bl	b413e <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b4422:	f004 ffb7 	bl	b9394 <_Z16_fetch_usbserialv>
   b4426:	4926      	ldr	r1, [pc, #152]	; (b44c0 <_Z8calc_lowPA2_iPdPii+0x158>)
   b4428:	4632      	mov	r2, r6
   b442a:	463b      	mov	r3, r7
   b442c:	f7ff fe87 	bl	b413e <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4430:	f004 ffb0 	bl	b9394 <_Z16_fetch_usbserialv>
   b4434:	4923      	ldr	r1, [pc, #140]	; (b44c4 <_Z8calc_lowPA2_iPdPii+0x15c>)
   b4436:	f7ff fe82 	bl	b413e <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b443a:	b36c      	cbz	r4, b4498 <_Z8calc_lowPA2_iPdPii+0x130>
    int i = 0;
   b443c:	2300      	movs	r3, #0
    int cnt = 0;
   b443e:	461e      	mov	r6, r3
   b4440:	1d2f      	adds	r7, r5, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b4442:	aa1c      	add	r2, sp, #112	; 0x70
   b4444:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4448:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b444c:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
   b4450:	aa04      	add	r2, sp, #16
   b4452:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4456:	6802      	ldr	r2, [r0, #0]
   b4458:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b445c:	3901      	subs	r1, #1
   b445e:	428a      	cmp	r2, r1
   b4460:	f103 0301 	add.w	r3, r3, #1
   b4464:	d0f7      	beq.n	b4456 <_Z8calc_lowPA2_iPdPii+0xee>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b4466:	3201      	adds	r2, #1
        while (i <= idx)
   b4468:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b446a:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
            
            cnt++;
   b446e:	f106 0201 	add.w	r2, r6, #1
        while (i <= idx)
   b4472:	dd0f      	ble.n	b4494 <_Z8calc_lowPA2_iPdPii+0x12c>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b4474:	f8df 8054 	ldr.w	r8, [pc, #84]	; b44cc <_Z8calc_lowPA2_iPdPii+0x164>
    for (int z = 0; z < cnt; z++)
   b4478:	2400      	movs	r4, #0
   b447a:	42b4      	cmp	r4, r6
   b447c:	d00c      	beq.n	b4498 <_Z8calc_lowPA2_iPdPii+0x130>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b447e:	f004 ff89 	bl	b9394 <_Z16_fetch_usbserialv>
   b4482:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b4486:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b448a:	4641      	mov	r1, r8
   b448c:	f7ff fe57 	bl	b413e <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b4490:	3401      	adds	r4, #1
   b4492:	e7f2      	b.n	b447a <_Z8calc_lowPA2_iPdPii+0x112>
            cnt++;
   b4494:	4616      	mov	r6, r2
   b4496:	e7d4      	b.n	b4442 <_Z8calc_lowPA2_iPdPii+0xda>

    // Calculations are done - set state
    #ifdef STATEDEBUG
            digitalWrite(state, LOW);
    #endif
    state = TRANSMIT_PRICE;
   b4498:	4b0b      	ldr	r3, [pc, #44]	; (b44c8 <_Z8calc_lowPA2_iPdPii+0x160>)
   b449a:	2203      	movs	r2, #3
    #ifdef STATEDEBUG
            digitalWrite(state, HIGH);
    #endif

    return cnt;
}
   b449c:	4620      	mov	r0, r4
    state = TRANSMIT_PRICE;
   b449e:	701a      	strb	r2, [r3, #0]
}
   b44a0:	b01d      	add	sp, #116	; 0x74
   b44a2:	ecbd 8b02 	vpop	{d8}
   b44a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b44aa:	bf00      	nop
   b44ac:	f3af 8000 	nop.w
   b44b0:	33333333 	.word	0x33333333
   b44b4:	3fd33333 	.word	0x3fd33333
   b44b8:	40590000 	.word	0x40590000
   b44bc:	000bccec 	.word	0x000bccec
   b44c0:	000bcd0a 	.word	0x000bcd0a
   b44c4:	000bcd27 	.word	0x000bcd27
   b44c8:	2003d75c 	.word	0x2003d75c
   b44cc:	000bcd65 	.word	0x000bcd65

000b44d0 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b44d0:	b570      	push	{r4, r5, r6, lr}
   b44d2:	b090      	sub	sp, #64	; 0x40
    //BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
    BLE.on();
   b44d4:	f003 fafc 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44d8:	f003 fb44 	bl	b7b64 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b44dc:	f003 faf8 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44e0:	4a3d      	ldr	r2, [pc, #244]	; (b45d8 <_Z9ble_setupv+0x108>)
   b44e2:	4c3e      	ldr	r4, [pc, #248]	; (b45dc <_Z9ble_setupv+0x10c>)
   b44e4:	4601      	mov	r1, r0
   b44e6:	a80b      	add	r0, sp, #44	; 0x2c
   b44e8:	f004 f876 	bl	b85d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ec:	a80b      	add	r0, sp, #44	; 0x2c
   b44ee:	f003 fbf0 	bl	b7cd2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b44f2:	f003 faed 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44f6:	4a3a      	ldr	r2, [pc, #232]	; (b45e0 <_Z9ble_setupv+0x110>)
   b44f8:	4601      	mov	r1, r0
   b44fa:	a80b      	add	r0, sp, #44	; 0x2c
   b44fc:	f004 f86c 	bl	b85d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4500:	a80b      	add	r0, sp, #44	; 0x2c
   b4502:	f003 fbe6 	bl	b7cd2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4506:	f003 fae3 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b450a:	4a36      	ldr	r2, [pc, #216]	; (b45e4 <_Z9ble_setupv+0x114>)
   b450c:	4601      	mov	r1, r0
   b450e:	a80b      	add	r0, sp, #44	; 0x2c
   b4510:	f004 f862 	bl	b85d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4514:	a80b      	add	r0, sp, #44	; 0x2c
   b4516:	f003 fbdc 	bl	b7cd2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b451a:	f003 fad9 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b451e:	4a32      	ldr	r2, [pc, #200]	; (b45e8 <_Z9ble_setupv+0x118>)
   b4520:	4601      	mov	r1, r0
   b4522:	a80b      	add	r0, sp, #44	; 0x2c
   b4524:	f004 f858 	bl	b85d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4528:	a80b      	add	r0, sp, #44	; 0x2c
   b452a:	f003 fbd2 	bl	b7cd2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b452e:	f003 facf 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4532:	4a2e      	ldr	r2, [pc, #184]	; (b45ec <_Z9ble_setupv+0x11c>)
   b4534:	4601      	mov	r1, r0
   b4536:	a80b      	add	r0, sp, #44	; 0x2c
   b4538:	f004 f84e 	bl	b85d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b453c:	a80b      	add	r0, sp, #44	; 0x2c
   b453e:	f003 fbc8 	bl	b7cd2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b4542:	f003 fac5 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4546:	4a2a      	ldr	r2, [pc, #168]	; (b45f0 <_Z9ble_setupv+0x120>)
   b4548:	4601      	mov	r1, r0
   b454a:	a80b      	add	r0, sp, #44	; 0x2c
   b454c:	f004 f844 	bl	b85d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4550:	a80b      	add	r0, sp, #44	; 0x2c
   b4552:	f003 fbbe 	bl	b7cd2 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b4556:	a803      	add	r0, sp, #12
   b4558:	f003 fcf1 	bl	b7f3e <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b455c:	4b25      	ldr	r3, [pc, #148]	; (b45f4 <_Z9ble_setupv+0x124>)
   b455e:	a803      	add	r0, sp, #12
   b4560:	6819      	ldr	r1, [r3, #0]
   b4562:	f003 fcff 	bl	b7f64 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b4566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4568:	ad06      	add	r5, sp, #24
   b456a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b456c:	ad06      	add	r5, sp, #24
   b456e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4570:	6826      	ldr	r6, [r4, #0]
   b4572:	ac0b      	add	r4, sp, #44	; 0x2c
   b4574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4576:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4578:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b457a:	f003 f8ab 	bl	b76d4 <_ZNK8particle7BleUuid4typeEv>
   b457e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4580:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4582:	bb0c      	cbnz	r4, b45c8 <_Z9ble_setupv+0xf8>
            uint16_t uuid16 = tempUUID.shorted();
   b4584:	f003 f8c2 	bl	b770c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4588:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b458a:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b458e:	2302      	movs	r3, #2
   b4590:	f10d 020a 	add.w	r2, sp, #10
   b4594:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4596:	a803      	add	r0, sp, #12
   b4598:	f003 fcc6 	bl	b7f28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b459c:	f003 fa98 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45a0:	2200      	movs	r2, #0
   b45a2:	a903      	add	r1, sp, #12
   b45a4:	f003 fb28 	bl	b7bf8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b45a8:	f004 fef4 	bl	b9394 <_Z16_fetch_usbserialv>
   b45ac:	4912      	ldr	r1, [pc, #72]	; (b45f8 <_Z9ble_setupv+0x128>)
   b45ae:	f004 f95a 	bl	b8866 <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b45b2:	f003 fa8d 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45b6:	4911      	ldr	r1, [pc, #68]	; (b45fc <_Z9ble_setupv+0x12c>)
   b45b8:	2200      	movs	r2, #0
   b45ba:	f003 ff0f 	bl	b83dc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b45be:	9803      	ldr	r0, [sp, #12]
   b45c0:	f002 f990 	bl	b68e4 <free>

}
   b45c4:	b010      	add	sp, #64	; 0x40
   b45c6:	bd70      	pop	{r4, r5, r6, pc}
   b45c8:	f003 f8a2 	bl	b7710 <_ZNK8particle7BleUuid8rawBytesEv>
   b45cc:	2300      	movs	r3, #0
   b45ce:	9300      	str	r3, [sp, #0]
   b45d0:	4602      	mov	r2, r0
   b45d2:	2310      	movs	r3, #16
   b45d4:	2107      	movs	r1, #7
   b45d6:	e7de      	b.n	b4596 <_Z9ble_setupv+0xc6>
   b45d8:	2003d4ec 	.word	0x2003d4ec
   b45dc:	2003d518 	.word	0x2003d518
   b45e0:	2003d4e0 	.word	0x2003d4e0
   b45e4:	2003d4d0 	.word	0x2003d4d0
   b45e8:	2003d4d8 	.word	0x2003d4d8
   b45ec:	2003d4f4 	.word	0x2003d4f4
   b45f0:	2003d4fc 	.word	0x2003d4fc
   b45f4:	2003d2d4 	.word	0x2003d2d4
   b45f8:	000bcd73 	.word	0x000bcd73
   b45fc:	000b40c5 	.word	0x000b40c5

000b4600 <_Z11init_memoryv>:
{
   b4600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cost_yesterday = (double *) malloc(MAX_RANGE * sizeof(double));
   b4604:	20c0      	movs	r0, #192	; 0xc0
   b4606:	f002 f965 	bl	b68d4 <malloc>
   b460a:	f8df 808c 	ldr.w	r8, [pc, #140]	; b4698 <_Z11init_memoryv+0x98>
    cost_today  = (double *) malloc(MAX_RANGE * sizeof(double));
   b460e:	4f1c      	ldr	r7, [pc, #112]	; (b4680 <_Z11init_memoryv+0x80>)
    cost_yesterday = (double *) malloc(MAX_RANGE * sizeof(double));
   b4610:	f8c8 0000 	str.w	r0, [r8]
    cost_today  = (double *) malloc(MAX_RANGE * sizeof(double));
   b4614:	20c0      	movs	r0, #192	; 0xc0
   b4616:	f002 f95d 	bl	b68d4 <malloc>
   b461a:	6038      	str	r0, [r7, #0]
    cost_tomorrow = (double *) malloc(MAX_RANGE * sizeof(double));
   b461c:	20c0      	movs	r0, #192	; 0xc0
   b461e:	f002 f959 	bl	b68d4 <malloc>
   b4622:	4e18      	ldr	r6, [pc, #96]	; (b4684 <_Z11init_memoryv+0x84>)
    wh_today = (int *) malloc(MAX_RANGE * sizeof(int));
   b4624:	4d18      	ldr	r5, [pc, #96]	; (b4688 <_Z11init_memoryv+0x88>)
    cost_tomorrow = (double *) malloc(MAX_RANGE * sizeof(double));
   b4626:	6030      	str	r0, [r6, #0]
    wh_today = (int *) malloc(MAX_RANGE * sizeof(int));
   b4628:	2060      	movs	r0, #96	; 0x60
   b462a:	f002 f953 	bl	b68d4 <malloc>
   b462e:	6028      	str	r0, [r5, #0]
    wh_yesterday = (int *) malloc(MAX_RANGE * sizeof(int));
   b4630:	2060      	movs	r0, #96	; 0x60
   b4632:	f002 f94f 	bl	b68d4 <malloc>
   b4636:	4c15      	ldr	r4, [pc, #84]	; (b468c <_Z11init_memoryv+0x8c>)
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b4638:	22c0      	movs	r2, #192	; 0xc0
    wh_yesterday = (int *) malloc(MAX_RANGE * sizeof(int));
   b463a:	6020      	str	r0, [r4, #0]
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b463c:	2100      	movs	r1, #0
   b463e:	f8d8 0000 	ldr.w	r0, [r8]
   b4642:	f006 fa5c 	bl	baafe <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b4646:	22c0      	movs	r2, #192	; 0xc0
   b4648:	2100      	movs	r1, #0
   b464a:	6838      	ldr	r0, [r7, #0]
   b464c:	f006 fa57 	bl	baafe <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4650:	22c0      	movs	r2, #192	; 0xc0
   b4652:	2100      	movs	r1, #0
   b4654:	6830      	ldr	r0, [r6, #0]
   b4656:	f006 fa52 	bl	baafe <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b465a:	2260      	movs	r2, #96	; 0x60
   b465c:	2100      	movs	r1, #0
   b465e:	6828      	ldr	r0, [r5, #0]
   b4660:	f006 fa4d 	bl	baafe <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4664:	2260      	movs	r2, #96	; 0x60
   b4666:	2100      	movs	r1, #0
   b4668:	6820      	ldr	r0, [r4, #0]
   b466a:	f006 fa48 	bl	baafe <memset>
   fd_today = open("/sd/prices_today.txt", O_RDWR | O_CREAT);
   b466e:	4808      	ldr	r0, [pc, #32]	; (b4690 <_Z11init_memoryv+0x90>)
   b4670:	f240 2102 	movw	r1, #514	; 0x202
   b4674:	f007 fa0a 	bl	bba8c <open>
   b4678:	4b06      	ldr	r3, [pc, #24]	; (b4694 <_Z11init_memoryv+0x94>)
   b467a:	6018      	str	r0, [r3, #0]
}
   b467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4680:	2003d6d8 	.word	0x2003d6d8
   b4684:	2003d6dc 	.word	0x2003d6dc
   b4688:	2003e1cc 	.word	0x2003e1cc
   b468c:	2003e1d0 	.word	0x2003e1d0
   b4690:	000bcd97 	.word	0x000bcd97
   b4694:	2003d6e4 	.word	0x2003d6e4
   b4698:	2003d6e0 	.word	0x2003d6e0

000b469c <_Z13rotate_pricesv>:
{
   b469c:	b530      	push	{r4, r5, lr}
    cost_yesterday = cost_today;
   b469e:	4b0a      	ldr	r3, [pc, #40]	; (b46c8 <_Z13rotate_pricesv+0x2c>)
    double *temp = cost_yesterday;
   b46a0:	4a0a      	ldr	r2, [pc, #40]	; (b46cc <_Z13rotate_pricesv+0x30>)
    cost_yesterday = cost_today;
   b46a2:	6819      	ldr	r1, [r3, #0]
    double *temp = cost_yesterday;
   b46a4:	6810      	ldr	r0, [r2, #0]
    cost_yesterday = cost_today;
   b46a6:	6011      	str	r1, [r2, #0]
    cost_today = cost_tomorrow;
   b46a8:	4909      	ldr	r1, [pc, #36]	; (b46d0 <_Z13rotate_pricesv+0x34>)
   b46aa:	680a      	ldr	r2, [r1, #0]
   b46ac:	601a      	str	r2, [r3, #0]
    cost_tomorrow = temp;
   b46ae:	6008      	str	r0, [r1, #0]
   b46b0:	2300      	movs	r3, #0
        cost_tomorrow[i] = 0;
   b46b2:	2400      	movs	r4, #0
   b46b4:	2500      	movs	r5, #0
   b46b6:	680a      	ldr	r2, [r1, #0]
   b46b8:	441a      	add	r2, r3
    for (int i = 0; i < MAX_RANGE; i++)
   b46ba:	3308      	adds	r3, #8
   b46bc:	2bc0      	cmp	r3, #192	; 0xc0
        cost_tomorrow[i] = 0;
   b46be:	e9c2 4500 	strd	r4, r5, [r2]
    for (int i = 0; i < MAX_RANGE; i++)
   b46c2:	d1f8      	bne.n	b46b6 <_Z13rotate_pricesv+0x1a>
}
   b46c4:	bd30      	pop	{r4, r5, pc}
   b46c6:	bf00      	nop
   b46c8:	2003d6d8 	.word	0x2003d6d8
   b46cc:	2003d6e0 	.word	0x2003d6e0
   b46d0:	2003d6dc 	.word	0x2003d6dc

000b46d4 <_Z9init_GPIOv>:
{
   b46d4:	b508      	push	{r3, lr}
    pinMode(SENSOR_READ, OUTPUT);
   b46d6:	2101      	movs	r1, #1
   b46d8:	2000      	movs	r0, #0
   b46da:	f005 fb4b 	bl	b9d74 <pinMode>
    pinMode(GET_DATA, OUTPUT);
   b46de:	2101      	movs	r1, #1
   b46e0:	4608      	mov	r0, r1
   b46e2:	f005 fb47 	bl	b9d74 <pinMode>
    pinMode(CALCULATE, OUTPUT);
   b46e6:	2101      	movs	r1, #1
   b46e8:	2002      	movs	r0, #2
   b46ea:	f005 fb43 	bl	b9d74 <pinMode>
    pinMode(TRANSMIT_PRICE, OUTPUT);
   b46ee:	2101      	movs	r1, #1
   b46f0:	2003      	movs	r0, #3
   b46f2:	f005 fb3f 	bl	b9d74 <pinMode>
    pinMode(TRANSMIT_SENSOR, OUTPUT);
   b46f6:	2101      	movs	r1, #1
   b46f8:	2004      	movs	r0, #4
   b46fa:	f005 fb3b 	bl	b9d74 <pinMode>
    pinMode(SLEEP_STATE, OUTPUT);
   b46fe:	2101      	movs	r1, #1
   b4700:	2005      	movs	r0, #5
   b4702:	f005 fb37 	bl	b9d74 <pinMode>
    pinMode(AWAITING_DATA, OUTPUT);
   b4706:	2101      	movs	r1, #1
   b4708:	2006      	movs	r0, #6
   b470a:	f005 fb33 	bl	b9d74 <pinMode>
}
   b470e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pinMode(STARTUP, OUTPUT);
   b4712:	2101      	movs	r1, #1
   b4714:	200a      	movs	r0, #10
   b4716:	f005 bb2d 	b.w	b9d74 <pinMode>
	...

000b471c <setup>:
{
   b471c:	b570      	push	{r4, r5, r6, lr}
    state = STARTUP;
   b471e:	4d3d      	ldr	r5, [pc, #244]	; (b4814 <setup+0xf8>)
{
   b4720:	b090      	sub	sp, #64	; 0x40
    init_GPIO();
   b4722:	f7ff ffd7 	bl	b46d4 <_Z9init_GPIOv>
    ble_setup();
   b4726:	f7ff fed3 	bl	b44d0 <_Z9ble_setupv>
    init_memory();
   b472a:	f7ff ff69 	bl	b4600 <_Z11init_memoryv>
    state = STARTUP;
   b472e:	230a      	movs	r3, #10
   b4730:	702b      	strb	r3, [r5, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4732:	f002 f8a7 	bl	b6884 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4736:	b910      	cbnz	r0, b473e <setup+0x22>
            spark_process();
   b4738:	f002 f89c 	bl	b6874 <spark_process>
        while (_while() && !_condition()) {
   b473c:	e7f9      	b.n	b4732 <setup+0x16>
   b473e:	f002 f8a1 	bl	b6884 <spark_cloud_flag_connected>
    state = GET_DATA;
   b4742:	2601      	movs	r6, #1
    Time.zone(1);
   b4744:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4748:	2400      	movs	r4, #0
    state = GET_DATA;
   b474a:	702e      	strb	r6, [r5, #0]
    Time.zone(1);
   b474c:	f004 f93a 	bl	b89c4 <_ZN9TimeClass4zoneEf>
    Time.beginDST();
   b4750:	f004 f958 	bl	b8a04 <_ZN9TimeClass8beginDSTEv>
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b4754:	2103      	movs	r1, #3
   b4756:	2008      	movs	r0, #8
   b4758:	f005 fb0c 	bl	b9d74 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b475c:	f04f 33ff 	mov.w	r3, #4294967295
   b4760:	492d      	ldr	r1, [pc, #180]	; (b4818 <setup+0xfc>)
   b4762:	9400      	str	r4, [sp, #0]
   b4764:	4632      	mov	r2, r6
   b4766:	2008      	movs	r0, #8
   b4768:	f004 fe3c 	bl	b93e4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    IPAddress IP = resolver.search("homeassistant.local");
   b476c:	4a2b      	ldr	r2, [pc, #172]	; (b481c <setup+0x100>)
   b476e:	492c      	ldr	r1, [pc, #176]	; (b4820 <setup+0x104>)
   b4770:	a80a      	add	r0, sp, #40	; 0x28
   b4772:	f001 fcbf 	bl	b60f4 <_ZN12mDNSResolver8Resolver6searchEPKc>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b4776:	a90a      	add	r1, sp, #40	; 0x28
   b4778:	a806      	add	r0, sp, #24
   b477a:	f002 fde3 	bl	b7344 <_ZN6StringC1ERK9Printable>
    client.setBroker(IP.toString(), PORT);
   b477e:	9906      	ldr	r1, [sp, #24]
   b4780:	4828      	ldr	r0, [pc, #160]	; (b4824 <setup+0x108>)
   b4782:	f240 725b 	movw	r2, #1883	; 0x75b
   b4786:	f000 fcf8 	bl	b517a <_ZN4MQTT9setBrokerEPKct>
   b478a:	a806      	add	r0, sp, #24
   b478c:	f002 fd12 	bl	b71b4 <_ZN6StringD1Ev>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4790:	4623      	mov	r3, r4
   b4792:	4622      	mov	r2, r4
   b4794:	e9cd 4400 	strd	r4, r4, [sp]
   b4798:	4923      	ldr	r1, [pc, #140]	; (b4828 <setup+0x10c>)
   b479a:	4824      	ldr	r0, [pc, #144]	; (b482c <setup+0x110>)
   b479c:	f002 f882 	bl	b68a4 <spark_subscribe>
        return _variable(name, std::forward<ArgsT>(args)...);
   b47a0:	782b      	ldrb	r3, [r5, #0]
   b47a2:	9306      	str	r3, [sp, #24]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b47a4:	2202      	movs	r2, #2
   b47a6:	4623      	mov	r3, r4
   b47a8:	a906      	add	r1, sp, #24
   b47aa:	4821      	ldr	r0, [pc, #132]	; (b4830 <setup+0x114>)
   b47ac:	f002 f85a 	bl	b6864 <spark_variable>
    Serial.printf("Return value: %d", client.connect("client_" + String(Time.now()), "mqtt", "mqtt"));
   b47b0:	f004 fdf0 	bl	b9394 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b47b4:	491f      	ldr	r1, [pc, #124]	; (b4834 <setup+0x118>)
   b47b6:	4604      	mov	r4, r0
   b47b8:	a806      	add	r0, sp, #24
   b47ba:	f002 fd46 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
   b47be:	f004 f94a 	bl	b8a56 <_ZN9TimeClass3nowEv>
   b47c2:	220a      	movs	r2, #10
   b47c4:	4601      	mov	r1, r0
   b47c6:	a802      	add	r0, sp, #8
   b47c8:	f002 fd65 	bl	b7296 <_ZN6StringC1Elh>
   b47cc:	a902      	add	r1, sp, #8
   b47ce:	a806      	add	r0, sp, #24
   b47d0:	f002 fdab 	bl	b732a <_ZplRK15StringSumHelperRK6String>
   b47d4:	4b18      	ldr	r3, [pc, #96]	; (b4838 <setup+0x11c>)
   b47d6:	6801      	ldr	r1, [r0, #0]
   b47d8:	4812      	ldr	r0, [pc, #72]	; (b4824 <setup+0x108>)
   b47da:	461a      	mov	r2, r3
   b47dc:	f000 fdc4 	bl	b5368 <_ZN4MQTT7connectEPKcS1_S1_>
   b47e0:	4916      	ldr	r1, [pc, #88]	; (b483c <setup+0x120>)
   b47e2:	4602      	mov	r2, r0
   b47e4:	4620      	mov	r0, r4
   b47e6:	f7ff fcaa 	bl	b413e <_ZN5Print6printfEPKcz>
   b47ea:	a802      	add	r0, sp, #8
   b47ec:	f002 fce2 	bl	b71b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b47f0:	a806      	add	r0, sp, #24
   b47f2:	f002 fcdf 	bl	b71b4 <_ZN6StringD1Ev>
    if (client.isConnected())
   b47f6:	480b      	ldr	r0, [pc, #44]	; (b4824 <setup+0x108>)
   b47f8:	f000 fcb1 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b47fc:	b140      	cbz	r0, b4810 <setup+0xf4>
        client.publish("power/get", "hello world");
   b47fe:	4910      	ldr	r1, [pc, #64]	; (b4840 <setup+0x124>)
   b4800:	4a10      	ldr	r2, [pc, #64]	; (b4844 <setup+0x128>)
   b4802:	4808      	ldr	r0, [pc, #32]	; (b4824 <setup+0x108>)
   b4804:	f000 fe3b 	bl	b547e <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b4808:	490f      	ldr	r1, [pc, #60]	; (b4848 <setup+0x12c>)
   b480a:	4806      	ldr	r0, [pc, #24]	; (b4824 <setup+0x108>)
   b480c:	f000 ffdb 	bl	b57c6 <_ZN4MQTT9subscribeEPKc>
}
   b4810:	b010      	add	sp, #64	; 0x40
   b4812:	bd70      	pop	{r4, r5, r6, pc}
   b4814:	2003d75c 	.word	0x2003d75c
   b4818:	000b42a9 	.word	0x000b42a9
   b481c:	000bcdac 	.word	0x000bcdac
   b4820:	2003d6ec 	.word	0x2003d6ec
   b4824:	2003d600 	.word	0x2003d600
   b4828:	000b4161 	.word	0x000b4161
   b482c:	000bcdf8 	.word	0x000bcdf8
   b4830:	000bcdc0 	.word	0x000bcdc0
   b4834:	000bce19 	.word	0x000bce19
   b4838:	000bcdc6 	.word	0x000bcdc6
   b483c:	000bcdcb 	.word	0x000bcdcb
   b4840:	000bcde8 	.word	0x000bcde8
   b4844:	000bcddc 	.word	0x000bcddc
   b4848:	000bcdf2 	.word	0x000bcdf2

000b484c <_Z10check_mqttv>:


/** @brief Reconnects MQTT client if disconnected
 */
void check_mqtt(void)
{
   b484c:	b500      	push	{lr}
    if (client.isConnected())
   b484e:	481b      	ldr	r0, [pc, #108]	; (b48bc <_Z10check_mqttv+0x70>)
{
   b4850:	b089      	sub	sp, #36	; 0x24
    if (client.isConnected())
   b4852:	f000 fc84 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b4856:	b128      	cbz	r0, b4864 <_Z10check_mqttv+0x18>
    {
        client.loop();
   b4858:	4818      	ldr	r0, [pc, #96]	; (b48bc <_Z10check_mqttv+0x70>)
        if (client.isConnected())
        {
            Serial.printf("Client reconnected\n");
        }
    }
}
   b485a:	b009      	add	sp, #36	; 0x24
   b485c:	f85d eb04 	ldr.w	lr, [sp], #4
        client.loop();
   b4860:	f000 be69 	b.w	b5536 <_ZN4MQTT4loopEv>
        Serial.printf("Client disconnected\n");
   b4864:	f004 fd96 	bl	b9394 <_Z16_fetch_usbserialv>
   b4868:	4915      	ldr	r1, [pc, #84]	; (b48c0 <_Z10check_mqttv+0x74>)
   b486a:	f7ff fc68 	bl	b413e <_ZN5Print6printfEPKcz>
	StringSumHelper(const char *p) : String(p) {}
   b486e:	4915      	ldr	r1, [pc, #84]	; (b48c4 <_Z10check_mqttv+0x78>)
   b4870:	4668      	mov	r0, sp
   b4872:	f002 fcea 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
        client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b4876:	f004 f8ee 	bl	b8a56 <_ZN9TimeClass3nowEv>
   b487a:	220a      	movs	r2, #10
   b487c:	4601      	mov	r1, r0
   b487e:	a804      	add	r0, sp, #16
   b4880:	f002 fd09 	bl	b7296 <_ZN6StringC1Elh>
   b4884:	a904      	add	r1, sp, #16
   b4886:	4668      	mov	r0, sp
   b4888:	f002 fd4f 	bl	b732a <_ZplRK15StringSumHelperRK6String>
   b488c:	4b0e      	ldr	r3, [pc, #56]	; (b48c8 <_Z10check_mqttv+0x7c>)
   b488e:	6801      	ldr	r1, [r0, #0]
   b4890:	480a      	ldr	r0, [pc, #40]	; (b48bc <_Z10check_mqttv+0x70>)
   b4892:	461a      	mov	r2, r3
   b4894:	f000 fd68 	bl	b5368 <_ZN4MQTT7connectEPKcS1_S1_>
   b4898:	a804      	add	r0, sp, #16
   b489a:	f002 fc8b 	bl	b71b4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b489e:	4668      	mov	r0, sp
   b48a0:	f002 fc88 	bl	b71b4 <_ZN6StringD1Ev>
        if (client.isConnected())
   b48a4:	4805      	ldr	r0, [pc, #20]	; (b48bc <_Z10check_mqttv+0x70>)
   b48a6:	f000 fc5a 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b48aa:	b120      	cbz	r0, b48b6 <_Z10check_mqttv+0x6a>
            Serial.printf("Client reconnected\n");
   b48ac:	f004 fd72 	bl	b9394 <_Z16_fetch_usbserialv>
   b48b0:	4906      	ldr	r1, [pc, #24]	; (b48cc <_Z10check_mqttv+0x80>)
   b48b2:	f7ff fc44 	bl	b413e <_ZN5Print6printfEPKcz>
}
   b48b6:	b009      	add	sp, #36	; 0x24
   b48b8:	f85d fb04 	ldr.w	pc, [sp], #4
   b48bc:	2003d600 	.word	0x2003d600
   b48c0:	000bcdff 	.word	0x000bcdff
   b48c4:	000bce14 	.word	0x000bce14
   b48c8:	000bcdc6 	.word	0x000bcdc6
   b48cc:	000bce21 	.word	0x000bce21

000b48d0 <_Z10check_timev>:
#ifdef STATEDEBUG
    digitalWrite(state, HIGH);
#endif
}
void check_time(void)
{
   b48d0:	b508      	push	{r3, lr}
    int currentHour = Time.hour();
   b48d2:	f004 f8d1 	bl	b8a78 <_ZN9TimeClass4hourEv>
    if ((currentHour == PULL_TIME_1) && currentHour != oneShotGuard)
   b48d6:	280d      	cmp	r0, #13
   b48d8:	d108      	bne.n	b48ec <_Z10check_timev+0x1c>
   b48da:	4b09      	ldr	r3, [pc, #36]	; (b4900 <_Z10check_timev+0x30>)
   b48dc:	681a      	ldr	r2, [r3, #0]
   b48de:	2a0d      	cmp	r2, #13
   b48e0:	d003      	beq.n	b48ea <_Z10check_timev+0x1a>
    {
        oneShotGuard = currentHour;
   b48e2:	6018      	str	r0, [r3, #0]
#ifdef STATEDEBUG
        digitalWrite(state, LOW);
#endif
        state = GET_DATA;
   b48e4:	4b07      	ldr	r3, [pc, #28]	; (b4904 <_Z10check_timev+0x34>)
   b48e6:	2201      	movs	r2, #1
    }
    if ((currentHour == PULL_TIME_2) && currentHour != oneShotGuard2)
    {
        oneShotGuard2 = currentHour;

        state = ROTATE;
   b48e8:	701a      	strb	r2, [r3, #0]
    }
   b48ea:	bd08      	pop	{r3, pc}
    if ((currentHour == PULL_TIME_2) && currentHour != oneShotGuard2)
   b48ec:	2800      	cmp	r0, #0
   b48ee:	d1fc      	bne.n	b48ea <_Z10check_timev+0x1a>
   b48f0:	4b05      	ldr	r3, [pc, #20]	; (b4908 <_Z10check_timev+0x38>)
   b48f2:	681a      	ldr	r2, [r3, #0]
   b48f4:	2a00      	cmp	r2, #0
   b48f6:	d0f8      	beq.n	b48ea <_Z10check_timev+0x1a>
        oneShotGuard2 = currentHour;
   b48f8:	6018      	str	r0, [r3, #0]
        state = ROTATE;
   b48fa:	220b      	movs	r2, #11
   b48fc:	4b01      	ldr	r3, [pc, #4]	; (b4904 <_Z10check_timev+0x34>)
   b48fe:	e7f3      	b.n	b48e8 <_Z10check_timev+0x18>
   b4900:	2003d2d8 	.word	0x2003d2d8
   b4904:	2003d75c 	.word	0x2003d75c
   b4908:	2003d2dc 	.word	0x2003d2dc

000b490c <_Z14timer_callbackv>:
    check_time();
   b490c:	f7ff bfe0 	b.w	b48d0 <_Z10check_timev>

000b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4910:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4912:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4914:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4916:	b17c      	cbz	r4, b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4918:	6863      	ldr	r3, [r4, #4]
   b491a:	3b01      	subs	r3, #1
   b491c:	6063      	str	r3, [r4, #4]
   b491e:	b95b      	cbnz	r3, b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4920:	6823      	ldr	r3, [r4, #0]
   b4922:	4620      	mov	r0, r4
   b4924:	689b      	ldr	r3, [r3, #8]
   b4926:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4928:	68a3      	ldr	r3, [r4, #8]
   b492a:	3b01      	subs	r3, #1
   b492c:	60a3      	str	r3, [r4, #8]
   b492e:	b91b      	cbnz	r3, b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4930:	6823      	ldr	r3, [r4, #0]
   b4932:	4620      	mov	r0, r4
   b4934:	68db      	ldr	r3, [r3, #12]
   b4936:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4938:	4628      	mov	r0, r5
   b493a:	bd38      	pop	{r3, r4, r5, pc}

000b493c <_Z8get_datai>:
{
   b493c:	b530      	push	{r4, r5, lr}
    temp[0] = 0;
   b493e:	4b13      	ldr	r3, [pc, #76]	; (b498c <_Z8get_datai+0x50>)
   b4940:	2500      	movs	r5, #0
{
   b4942:	b08d      	sub	sp, #52	; 0x34
    temp[0] = 0;
   b4944:	701d      	strb	r5, [r3, #0]
{
   b4946:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 1, 0);
   b4948:	f004 f8c2 	bl	b8ad0 <_ZN9TimeClass4yearEv>
   b494c:	9005      	str	r0, [sp, #20]
   b494e:	f004 f8b7 	bl	b8ac0 <_ZN9TimeClass5monthEv>
   b4952:	1c61      	adds	r1, r4, #1
   b4954:	e9cd 4100 	strd	r4, r1, [sp]
   b4958:	9a05      	ldr	r2, [sp, #20]
   b495a:	490d      	ldr	r1, [pc, #52]	; (b4990 <_Z8get_datai+0x54>)
   b495c:	9502      	str	r5, [sp, #8]
   b495e:	4603      	mov	r3, r0
   b4960:	a808      	add	r0, sp, #32
   b4962:	f002 fd09 	bl	b7378 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4966:	4b0b      	ldr	r3, [pc, #44]	; (b4994 <_Z8get_datai+0x58>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4968:	9a08      	ldr	r2, [sp, #32]
   b496a:	781b      	ldrb	r3, [r3, #0]
   b496c:	490a      	ldr	r1, [pc, #40]	; (b4998 <_Z8get_datai+0x5c>)
   b496e:	f88d 3000 	strb.w	r3, [sp]
   b4972:	a806      	add	r0, sp, #24
   b4974:	233c      	movs	r3, #60	; 0x3c
   b4976:	f004 faa5 	bl	b8ec4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b497a:	a807      	add	r0, sp, #28
   b497c:	f7ff ffc8 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4980:	a808      	add	r0, sp, #32
   b4982:	f002 fc17 	bl	b71b4 <_ZN6StringD1Ev>
}
   b4986:	b00d      	add	sp, #52	; 0x34
   b4988:	bd30      	pop	{r4, r5, pc}
   b498a:	bf00      	nop
   b498c:	2003d75d 	.word	0x2003d75d
   b4990:	000bce35 	.word	0x000bce35
   b4994:	2003d590 	.word	0x2003d590
   b4998:	000bce88 	.word	0x000bce88

000b499c <_Z15transmit_pricesPA2_ii>:
{
   b499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b49a0:	b08a      	sub	sp, #40	; 0x28
   b49a2:	4605      	mov	r5, r0
   b49a4:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b49a6:	f004 fcf5 	bl	b9394 <_Z16_fetch_usbserialv>
   b49aa:	491e      	ldr	r1, [pc, #120]	; (b4a24 <_Z15transmit_pricesPA2_ii+0x88>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b49ac:	4f1e      	ldr	r7, [pc, #120]	; (b4a28 <_Z15transmit_pricesPA2_ii+0x8c>)
    Serial.printf("In work\n");
   b49ae:	f7ff fbc6 	bl	b413e <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b49b2:	491e      	ldr	r1, [pc, #120]	; (b4a2c <_Z15transmit_pricesPA2_ii+0x90>)
   b49b4:	a802      	add	r0, sp, #8
   b49b6:	f002 fc48 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b49ba:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b49bc:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b49c0:	42b4      	cmp	r4, r6
   b49c2:	da10      	bge.n	b49e6 <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b49c4:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b49c8:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b49cc:	4639      	mov	r1, r7
   b49ce:	a806      	add	r0, sp, #24
   b49d0:	f002 fcd2 	bl	b7378 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b49d4:	a906      	add	r1, sp, #24
   b49d6:	a802      	add	r0, sp, #8
   b49d8:	f002 fc87 	bl	b72ea <_ZN6String6concatERKS_>
   b49dc:	a806      	add	r0, sp, #24
   b49de:	f002 fbe9 	bl	b71b4 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b49e2:	3401      	adds	r4, #1
   b49e4:	e7ec      	b.n	b49c0 <_Z15transmit_pricesPA2_ii+0x24>
   b49e6:	4b12      	ldr	r3, [pc, #72]	; (b4a30 <_Z15transmit_pricesPA2_ii+0x94>)
   b49e8:	9a02      	ldr	r2, [sp, #8]
   b49ea:	781b      	ldrb	r3, [r3, #0]
   b49ec:	4911      	ldr	r1, [pc, #68]	; (b4a34 <_Z15transmit_pricesPA2_ii+0x98>)
   b49ee:	f88d 3000 	strb.w	r3, [sp]
   b49f2:	a806      	add	r0, sp, #24
   b49f4:	233c      	movs	r3, #60	; 0x3c
   b49f6:	f004 fa65 	bl	b8ec4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b49fa:	a807      	add	r0, sp, #28
   b49fc:	f7ff ff88 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    client.publish("prices", data);
   b4a00:	9a02      	ldr	r2, [sp, #8]
   b4a02:	490d      	ldr	r1, [pc, #52]	; (b4a38 <_Z15transmit_pricesPA2_ii+0x9c>)
   b4a04:	480d      	ldr	r0, [pc, #52]	; (b4a3c <_Z15transmit_pricesPA2_ii+0xa0>)
   b4a06:	f000 fd3a 	bl	b547e <_ZN4MQTT7publishEPKcS1_>
    client.loop();
   b4a0a:	480c      	ldr	r0, [pc, #48]	; (b4a3c <_Z15transmit_pricesPA2_ii+0xa0>)
   b4a0c:	f000 fd93 	bl	b5536 <_ZN4MQTT4loopEv>
    state = SLEEP_STATE;
   b4a10:	4b0b      	ldr	r3, [pc, #44]	; (b4a40 <_Z15transmit_pricesPA2_ii+0xa4>)
   b4a12:	2205      	movs	r2, #5
    String data = "Cheap(ish) hours of the day: ";
   b4a14:	a802      	add	r0, sp, #8
    state = SLEEP_STATE;
   b4a16:	701a      	strb	r2, [r3, #0]
    String data = "Cheap(ish) hours of the day: ";
   b4a18:	f002 fbcc 	bl	b71b4 <_ZN6StringD1Ev>
}
   b4a1c:	b00a      	add	sp, #40	; 0x28
   b4a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4a22:	bf00      	nop
   b4a24:	000bce91 	.word	0x000bce91
   b4a28:	000bceb8 	.word	0x000bceb8
   b4a2c:	000bce9a 	.word	0x000bce9a
   b4a30:	2003d590 	.word	0x2003d590
   b4a34:	000bcec7 	.word	0x000bcec7
   b4a38:	000bcdf8 	.word	0x000bcdf8
   b4a3c:	2003d600 	.word	0x2003d600
   b4a40:	2003d75c 	.word	0x2003d75c

000b4a44 <loop>:
{
   b4a44:	b570      	push	{r4, r5, r6, lr}
    if (state == GET_DATA)
   b4a46:	4c48      	ldr	r4, [pc, #288]	; (b4b68 <loop+0x124>)
{
   b4a48:	b0c4      	sub	sp, #272	; 0x110
    check_mqtt();
   b4a4a:	f7ff feff 	bl	b484c <_Z10check_mqttv>
    if (state == GET_DATA)
   b4a4e:	7823      	ldrb	r3, [r4, #0]
   b4a50:	2b01      	cmp	r3, #1
   b4a52:	d105      	bne.n	b4a60 <loop+0x1c>
        state = AWAITING_DATA;
   b4a54:	2306      	movs	r3, #6
   b4a56:	7023      	strb	r3, [r4, #0]
        get_data(Time.day());
   b4a58:	f004 f826 	bl	b8aa8 <_ZN9TimeClass3dayEv>
   b4a5c:	f7ff ff6e 	bl	b493c <_Z8get_datai>
    if (state == CALCULATE)
   b4a60:	7823      	ldrb	r3, [r4, #0]
   b4a62:	2b02      	cmp	r3, #2
   b4a64:	d11f      	bne.n	b4aa6 <loop+0x62>
        cnt = calc_low(start_stop, cost_today, cost_hour, range);
   b4a66:	4b41      	ldr	r3, [pc, #260]	; (b4b6c <loop+0x128>)
   b4a68:	4941      	ldr	r1, [pc, #260]	; (b4b70 <loop+0x12c>)
   b4a6a:	4a42      	ldr	r2, [pc, #264]	; (b4b74 <loop+0x130>)
   b4a6c:	6809      	ldr	r1, [r1, #0]
   b4a6e:	681b      	ldr	r3, [r3, #0]
   b4a70:	4841      	ldr	r0, [pc, #260]	; (b4b78 <loop+0x134>)
   b4a72:	f7ff fc79 	bl	b4368 <_Z8calc_lowPA2_iPdPii>
   b4a76:	4b41      	ldr	r3, [pc, #260]	; (b4b7c <loop+0x138>)
   b4a78:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b4a7a:	f004 fc8b 	bl	b9394 <_Z16_fetch_usbserialv>
   b4a7e:	4605      	mov	r5, r0
   b4a80:	f003 fffa 	bl	b8a78 <_ZN9TimeClass4hourEv>
   b4a84:	4606      	mov	r6, r0
   b4a86:	f004 f803 	bl	b8a90 <_ZN9TimeClass6minuteEv>
   b4a8a:	493d      	ldr	r1, [pc, #244]	; (b4b80 <loop+0x13c>)
   b4a8c:	4603      	mov	r3, r0
   b4a8e:	1cb2      	adds	r2, r6, #2
   b4a90:	4628      	mov	r0, r5
   b4a92:	f7ff fb54 	bl	b413e <_ZN5Print6printfEPKcz>
        state = TRANSMIT_PRICE;
   b4a96:	2303      	movs	r3, #3
   b4a98:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b4a9a:	4b38      	ldr	r3, [pc, #224]	; (b4b7c <loop+0x138>)
   b4a9c:	4836      	ldr	r0, [pc, #216]	; (b4b78 <loop+0x134>)
   b4a9e:	6819      	ldr	r1, [r3, #0]
   b4aa0:	f7ff ff7c 	bl	b499c <_Z15transmit_pricesPA2_ii>
   b4aa4:	e001      	b.n	b4aaa <loop+0x66>
    if (state == TRANSMIT_PRICE)
   b4aa6:	2b03      	cmp	r3, #3
   b4aa8:	d0f7      	beq.n	b4a9a <loop+0x56>
    if (state == TRANSMIT_SENSOR) // Did we receive a request for updated values
   b4aaa:	7823      	ldrb	r3, [r4, #0]
   b4aac:	2b04      	cmp	r3, #4
   b4aae:	d155      	bne.n	b4b5c <loop+0x118>
        sprintf(values, "%d", calc_power);
   b4ab0:	4d34      	ldr	r5, [pc, #208]	; (b4b84 <loop+0x140>)
        Serial.printf("Received power/get\n");
   b4ab2:	f004 fc6f 	bl	b9394 <_Z16_fetch_usbserialv>
   b4ab6:	4934      	ldr	r1, [pc, #208]	; (b4b88 <loop+0x144>)
   b4ab8:	f7ff fb41 	bl	b413e <_ZN5Print6printfEPKcz>
        sprintf(values, "%d", calc_power);
   b4abc:	682a      	ldr	r2, [r5, #0]
   b4abe:	4933      	ldr	r1, [pc, #204]	; (b4b8c <loop+0x148>)
   b4ac0:	4668      	mov	r0, sp
   b4ac2:	f001 ff1f 	bl	b6904 <sprintf>
        client.publish("power", values);
   b4ac6:	4932      	ldr	r1, [pc, #200]	; (b4b90 <loop+0x14c>)
   b4ac8:	4832      	ldr	r0, [pc, #200]	; (b4b94 <loop+0x150>)
   b4aca:	466a      	mov	r2, sp
   b4acc:	f000 fcd7 	bl	b547e <_ZN4MQTT7publishEPKcS1_>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4ad0:	682a      	ldr	r2, [r5, #0]
   b4ad2:	4931      	ldr	r1, [pc, #196]	; (b4b98 <loop+0x154>)
   b4ad4:	a804      	add	r0, sp, #16
   b4ad6:	f001 ff15 	bl	b6904 <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4ada:	4830      	ldr	r0, [pc, #192]	; (b4b9c <loop+0x158>)
   b4adc:	2300      	movs	r3, #0
   b4ade:	22ff      	movs	r2, #255	; 0xff
   b4ae0:	a904      	add	r1, sp, #16
   b4ae2:	f002 fed3 	bl	b788c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        state = SLEEP_STATE;
   b4ae6:	2305      	movs	r3, #5
   b4ae8:	7023      	strb	r3, [r4, #0]
    if(NewBLEConnection & ((millis()-last_connect)>1400)){
   b4aea:	4c2d      	ldr	r4, [pc, #180]	; (b4ba0 <loop+0x15c>)
   b4aec:	7825      	ldrb	r5, [r4, #0]
   b4aee:	f001 fbe3 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
   b4af2:	4b2c      	ldr	r3, [pc, #176]	; (b4ba4 <loop+0x160>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	1ac0      	subs	r0, r0, r3
   b4af8:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   b4afc:	d92c      	bls.n	b4b58 <loop+0x114>
   b4afe:	b35d      	cbz	r5, b4b58 <loop+0x114>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4b00:	4b20      	ldr	r3, [pc, #128]	; (b4b84 <loop+0x140>)
   b4b02:	4925      	ldr	r1, [pc, #148]	; (b4b98 <loop+0x154>)
   b4b04:	681a      	ldr	r2, [r3, #0]
   b4b06:	a804      	add	r0, sp, #16
   b4b08:	f001 fefc 	bl	b6904 <sprintf>
   b4b0c:	2300      	movs	r3, #0
   b4b0e:	22ff      	movs	r2, #255	; 0xff
   b4b10:	a904      	add	r1, sp, #16
   b4b12:	4822      	ldr	r0, [pc, #136]	; (b4b9c <loop+0x158>)
   b4b14:	f002 feba 	bl	b788c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue("{\"pricesyesterday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,24]}");
   b4b18:	4923      	ldr	r1, [pc, #140]	; (b4ba8 <loop+0x164>)
   b4b1a:	4824      	ldr	r0, [pc, #144]	; (b4bac <loop+0x168>)
   b4b1c:	2200      	movs	r2, #0
   b4b1e:	f002 ff15 	bl	b794c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue("{\"pricestoday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,24]}");  // string mKr/kwhr
   b4b22:	4923      	ldr	r1, [pc, #140]	; (b4bb0 <loop+0x16c>)
   b4b24:	4823      	ldr	r0, [pc, #140]	; (b4bb4 <loop+0x170>)
   b4b26:	2200      	movs	r2, #0
   b4b28:	f002 ff10 	bl	b794c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue("{\"pricestomorrow\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}"); // string mKr/kwhr
   b4b2c:	4922      	ldr	r1, [pc, #136]	; (b4bb8 <loop+0x174>)
   b4b2e:	4823      	ldr	r0, [pc, #140]	; (b4bbc <loop+0x178>)
   b4b30:	2200      	movs	r2, #0
   b4b32:	f002 ff0b 	bl	b794c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue("{\"WHr_yesterday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b4b36:	4922      	ldr	r1, [pc, #136]	; (b4bc0 <loop+0x17c>)
   b4b38:	4822      	ldr	r0, [pc, #136]	; (b4bc4 <loop+0x180>)
   b4b3a:	2200      	movs	r2, #0
   b4b3c:	f002 ff06 	bl	b794c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue("{\"WHr_today\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}"); // Whr used in the corrisponding hour
   b4b40:	4921      	ldr	r1, [pc, #132]	; (b4bc8 <loop+0x184>)
   b4b42:	4822      	ldr	r0, [pc, #136]	; (b4bcc <loop+0x188>)
   b4b44:	2200      	movs	r2, #0
   b4b46:	f002 ff01 	bl	b794c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b4b4a:	2300      	movs	r3, #0
   b4b4c:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected");
   b4b4e:	f004 fc21 	bl	b9394 <_Z16_fetch_usbserialv>
   b4b52:	491f      	ldr	r1, [pc, #124]	; (b4bd0 <loop+0x18c>)
   b4b54:	f7ff faf3 	bl	b413e <_ZN5Print6printfEPKcz>
}
   b4b58:	b044      	add	sp, #272	; 0x110
   b4b5a:	bd70      	pop	{r4, r5, r6, pc}
    if (state == ROTATE)
   b4b5c:	2b0b      	cmp	r3, #11
   b4b5e:	d1c4      	bne.n	b4aea <loop+0xa6>
        rotate_prices();
   b4b60:	f7ff fd9c 	bl	b469c <_Z13rotate_pricesv>
   b4b64:	e7bf      	b.n	b4ae6 <loop+0xa2>
   b4b66:	bf00      	nop
   b4b68:	2003d75c 	.word	0x2003d75c
   b4b6c:	2003d2e0 	.word	0x2003d2e0
   b4b70:	2003d6d8 	.word	0x2003d6d8
   b4b74:	2003d678 	.word	0x2003d678
   b4b78:	2003d598 	.word	0x2003d598
   b4b7c:	2003d5f8 	.word	0x2003d5f8
   b4b80:	000bced7 	.word	0x000bced7
   b4b84:	2003d5fc 	.word	0x2003d5fc
   b4b88:	000bcef1 	.word	0x000bcef1
   b4b8c:	000bcdd9 	.word	0x000bcdd9
   b4b90:	000bcf05 	.word	0x000bcf05
   b4b94:	2003d600 	.word	0x2003d600
   b4b98:	000bcf0b 	.word	0x000bcf0b
   b4b9c:	2003d4ec 	.word	0x2003d4ec
   b4ba0:	2003d4e8 	.word	0x2003d4e8
   b4ba4:	2003d6e8 	.word	0x2003d6e8
   b4ba8:	000bcf17 	.word	0x000bcf17
   b4bac:	2003d4e0 	.word	0x2003d4e0
   b4bb0:	000bcf6f 	.word	0x000bcf6f
   b4bb4:	2003d4d0 	.word	0x2003d4d0
   b4bb8:	000bcfc3 	.word	0x000bcfc3
   b4bbc:	2003d4d8 	.word	0x2003d4d8
   b4bc0:	000bd017 	.word	0x000bd017
   b4bc4:	2003d4fc 	.word	0x2003d4fc
   b4bc8:	000bd06a 	.word	0x000bd06a
   b4bcc:	2003d4f4 	.word	0x2003d4f4
   b4bd0:	000bd0b9 	.word	0x000bd0b9

000b4bd4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4bd4:	b082      	sub	sp, #8
   b4bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4bd8:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b4bda:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4bdc:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b4bde:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4be0:	e9c0 3300 	strd	r3, r3, [r0]
   b4be4:	4606      	mov	r6, r0
   b4be6:	4694      	mov	ip, r2
   b4be8:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4bec:	ac04      	add	r4, sp, #16
   b4bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4bf0:	682b      	ldr	r3, [r5, #0]
   b4bf2:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b4bf4:	ad1a      	add	r5, sp, #104	; 0x68
   b4bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4bf8:	ac09      	add	r4, sp, #36	; 0x24
   b4bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4bfc:	682b      	ldr	r3, [r5, #0]
   b4bfe:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4c00:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4c02:	9302      	str	r3, [sp, #8]
   b4c04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b4c06:	9301      	str	r3, [sp, #4]
   b4c08:	ab09      	add	r3, sp, #36	; 0x24
   b4c0a:	9300      	str	r3, [sp, #0]
   b4c0c:	4630      	mov	r0, r6
   b4c0e:	ab04      	add	r3, sp, #16
   b4c10:	4662      	mov	r2, ip
   b4c12:	4639      	mov	r1, r7
   b4c14:	f003 fb88 	bl	b8328 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4c18:	4630      	mov	r0, r6
   b4c1a:	b00f      	add	sp, #60	; 0x3c
   b4c1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4c20:	b002      	add	sp, #8
   b4c22:	4770      	bx	lr

000b4c24 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii>:
   b4c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b4c28:	4b86      	ldr	r3, [pc, #536]	; (b4e44 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x220>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b4c2a:	4d87      	ldr	r5, [pc, #540]	; (b4e48 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x224>)
const BleUuid wattcharacteristicUuid(watt_c);
   b4c2c:	f8df b2a8 	ldr.w	fp, [pc, #680]	; b4ed8 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2b4>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b4c30:	f8df a2a8 	ldr.w	sl, [pc, #680]	; b4edc <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2b8>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b4c34:	f8df 92a8 	ldr.w	r9, [pc, #680]	; b4ee0 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2bc>
   b4c38:	f04f 0801 	mov.w	r8, #1
   b4c3c:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b4c40:	4b82      	ldr	r3, [pc, #520]	; (b4e4c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x228>)
   b4c42:	b093      	sub	sp, #76	; 0x4c
   b4c44:	6819      	ldr	r1, [r3, #0]
   b4c46:	4628      	mov	r0, r5
   b4c48:	f002 fde2 	bl	b7810 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b4c4c:	4b80      	ldr	r3, [pc, #512]	; (b4e50 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x22c>)
   b4c4e:	4658      	mov	r0, fp
   b4c50:	6819      	ldr	r1, [r3, #0]
   b4c52:	f002 fddd 	bl	b7810 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b4c56:	4b7f      	ldr	r3, [pc, #508]	; (b4e54 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x230>)
   b4c58:	4650      	mov	r0, sl
   b4c5a:	6819      	ldr	r1, [r3, #0]
   b4c5c:	f002 fdd8 	bl	b7810 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b4c60:	4b7d      	ldr	r3, [pc, #500]	; (b4e58 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x234>)
   b4c62:	4648      	mov	r0, r9
   b4c64:	6819      	ldr	r1, [r3, #0]
   b4c66:	f002 fdd3 	bl	b7810 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b4c6a:	4b7c      	ldr	r3, [pc, #496]	; (b4e5c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x238>)
   b4c6c:	487c      	ldr	r0, [pc, #496]	; (b4e60 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x23c>)
   b4c6e:	6819      	ldr	r1, [r3, #0]
   b4c70:	f002 fdce 	bl	b7810 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b4c74:	4b7b      	ldr	r3, [pc, #492]	; (b4e64 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x240>)
   b4c76:	487c      	ldr	r0, [pc, #496]	; (b4e68 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x244>)
   b4c78:	6819      	ldr	r1, [r3, #0]
   b4c7a:	f002 fdc9 	bl	b7810 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b4c7e:	4b7b      	ldr	r3, [pc, #492]	; (b4e6c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x248>)
   b4c80:	487b      	ldr	r0, [pc, #492]	; (b4e70 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x24c>)
   b4c82:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4c84:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b4c86:	f002 fdc3 	bl	b7810 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4c8a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4c8e:	462e      	mov	r6, r5
   b4c90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4c92:	2710      	movs	r7, #16
   b4c94:	eb0d 0c07 	add.w	ip, sp, r7
   b4c98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4c9c:	6833      	ldr	r3, [r6, #0]
   b4c9e:	f8cc 3000 	str.w	r3, [ip]
   b4ca2:	f10b 0304 	add.w	r3, fp, #4
   b4ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4ca8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4cac:	f8db 3000 	ldr.w	r3, [fp]
   b4cb0:	4970      	ldr	r1, [pc, #448]	; (b4e74 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x250>)
   b4cb2:	4871      	ldr	r0, [pc, #452]	; (b4e78 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x254>)
   b4cb4:	463a      	mov	r2, r7
   b4cb6:	f7ff ff8d 	bl	b4bd4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b4cba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4cbe:	46ae      	mov	lr, r5
   b4cc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4cc4:	eb0d 0c07 	add.w	ip, sp, r7
   b4cc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4ccc:	6833      	ldr	r3, [r6, #0]
   b4cce:	f8cc 3000 	str.w	r3, [ip]
   b4cd2:	f10a 0304 	add.w	r3, sl, #4
   b4cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4cd8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4cdc:	f8da 3000 	ldr.w	r3, [sl]
   b4ce0:	4966      	ldr	r1, [pc, #408]	; (b4e7c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x258>)
   b4ce2:	4867      	ldr	r0, [pc, #412]	; (b4e80 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x25c>)
   b4ce4:	463a      	mov	r2, r7
   b4ce6:	f7ff ff75 	bl	b4bd4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4cea:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4cee:	46ae      	mov	lr, r5
   b4cf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4cf4:	eb0d 0c07 	add.w	ip, sp, r7
   b4cf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4cfc:	6833      	ldr	r3, [r6, #0]
   b4cfe:	f8cc 3000 	str.w	r3, [ip]
   b4d02:	f109 0304 	add.w	r3, r9, #4
   b4d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4d08:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4d0c:	f8d9 3000 	ldr.w	r3, [r9]
   b4d10:	495c      	ldr	r1, [pc, #368]	; (b4e84 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x260>)
   b4d12:	485d      	ldr	r0, [pc, #372]	; (b4e88 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x264>)
   b4d14:	463a      	mov	r2, r7
   b4d16:	f7ff ff5d 	bl	b4bd4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b4d1a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4d1e:	46ae      	mov	lr, r5
   b4d20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4d24:	eb0d 0c07 	add.w	ip, sp, r7
   b4d28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4d2c:	6833      	ldr	r3, [r6, #0]
   b4d2e:	f8cc 3000 	str.w	r3, [ip]
   b4d32:	4b4b      	ldr	r3, [pc, #300]	; (b4e60 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x23c>)
   b4d34:	3304      	adds	r3, #4
   b4d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4d38:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4d3c:	4b48      	ldr	r3, [pc, #288]	; (b4e60 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x23c>)
   b4d3e:	4953      	ldr	r1, [pc, #332]	; (b4e8c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x268>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	4853      	ldr	r0, [pc, #332]	; (b4e90 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x26c>)
   b4d44:	463a      	mov	r2, r7
   b4d46:	f7ff ff45 	bl	b4bd4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b4d4a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4d4e:	46ae      	mov	lr, r5
   b4d50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4d54:	eb0d 0c07 	add.w	ip, sp, r7
   b4d58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4d5c:	6833      	ldr	r3, [r6, #0]
   b4d5e:	f8cc 3000 	str.w	r3, [ip]
   b4d62:	4b41      	ldr	r3, [pc, #260]	; (b4e68 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x244>)
   b4d64:	3304      	adds	r3, #4
   b4d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4d68:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4d6c:	4b3e      	ldr	r3, [pc, #248]	; (b4e68 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x244>)
   b4d6e:	4949      	ldr	r1, [pc, #292]	; (b4e94 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x270>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	4849      	ldr	r0, [pc, #292]	; (b4e98 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x274>)
   b4d74:	463a      	mov	r2, r7
   b4d76:	f7ff ff2d 	bl	b4bd4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b4d7a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d80:	eb0d 0c07 	add.w	ip, sp, r7
   b4d84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4d88:	4d39      	ldr	r5, [pc, #228]	; (b4e70 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x24c>)
   b4d8a:	6833      	ldr	r3, [r6, #0]
   b4d8c:	f8cc 3000 	str.w	r3, [ip]
   b4d90:	1d2b      	adds	r3, r5, #4
   b4d92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4d94:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4d98:	463a      	mov	r2, r7
   b4d9a:	682b      	ldr	r3, [r5, #0]
   b4d9c:	493f      	ldr	r1, [pc, #252]	; (b4e9c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x278>)
   b4d9e:	4840      	ldr	r0, [pc, #256]	; (b4ea0 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x27c>)
   b4da0:	f7ff ff18 	bl	b4bd4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4da4:	4b3f      	ldr	r3, [pc, #252]	; (b4ea4 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x280>)
   b4da6:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4da8:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4daa:	4b3f      	ldr	r3, [pc, #252]	; (b4ea8 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x284>)
   b4dac:	4a3f      	ldr	r2, [pc, #252]	; (b4eac <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x288>)
   b4dae:	601a      	str	r2, [r3, #0]
   b4db0:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4db4:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4db8:	ae0c      	add	r6, sp, #48	; 0x30
   b4dba:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4dc2:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4dc6:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4dca:	e882 0003 	stmia.w	r2, {r0, r1}
   b4dce:	4a38      	ldr	r2, [pc, #224]	; (b4eb0 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x28c>)
   b4dd0:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4dd2:	699a      	ldr	r2, [r3, #24]
   b4dd4:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b4dd6:	4a37      	ldr	r2, [pc, #220]	; (b4eb4 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x290>)
   b4dd8:	711c      	strb	r4, [r3, #4]
   b4dda:	609c      	str	r4, [r3, #8]
   b4ddc:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4dde:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4de2:	4a35      	ldr	r2, [pc, #212]	; (b4eb8 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x294>)
      __a = _GLIBCXX_MOVE(__b);
   b4de4:	9410      	str	r4, [sp, #64]	; 0x40
   b4de6:	f103 0008 	add.w	r0, r3, #8
   b4dea:	e9cd 4400 	strd	r4, r4, [sp]
   b4dee:	f001 fb0d 	bl	b640c <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b4df2:	4628      	mov	r0, r5
   b4df4:	f7ff fa7a 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
MQTT client("192.168.110.6", PORT, 512, 30, callback);
   b4df8:	4b30      	ldr	r3, [pc, #192]	; (b4ebc <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x298>)
   b4dfa:	9301      	str	r3, [sp, #4]
   b4dfc:	231e      	movs	r3, #30
   b4dfe:	9300      	str	r3, [sp, #0]
   b4e00:	492f      	ldr	r1, [pc, #188]	; (b4ec0 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x29c>)
   b4e02:	9402      	str	r4, [sp, #8]
   b4e04:	f44f 7300 	mov.w	r3, #512	; 0x200
   b4e08:	f240 725b 	movw	r2, #1883	; 0x75b
   b4e0c:	482d      	ldr	r0, [pc, #180]	; (b4ec4 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2a0>)
   b4e0e:	f000 f8ad 	bl	b4f6c <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b4e12:	4b2d      	ldr	r3, [pc, #180]	; (b4ec8 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2a4>)
UDP udp;
   b4e14:	492d      	ldr	r1, [pc, #180]	; (b4ecc <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2a8>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   b4e16:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b4e18:	1d1a      	adds	r2, r3, #4
   b4e1a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4e1c:	4a2c      	ldr	r2, [pc, #176]	; (b4ed0 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2ac>)
   b4e1e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4e20:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4e24:	f883 8014 	strb.w	r8, [r3, #20]
   b4e28:	4608      	mov	r0, r1
   b4e2a:	f002 f8f7 	bl	b701c <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b4e2e:	4927      	ldr	r1, [pc, #156]	; (b4ecc <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2a8>)
   b4e30:	4828      	ldr	r0, [pc, #160]	; (b4ed4 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x2b0>)
   b4e32:	f001 f897 	bl	b5f64 <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b4e36:	4621      	mov	r1, r4
   b4e38:	4640      	mov	r0, r8
   b4e3a:	b013      	add	sp, #76	; 0x4c
   b4e3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b4e40:	f001 bc7c 	b.w	b673c <system_thread_set_state>
   b4e44:	2003d590 	.word	0x2003d590
   b4e48:	2003d518 	.word	0x2003d518
   b4e4c:	2003d2e4 	.word	0x2003d2e4
   b4e50:	2003d2e8 	.word	0x2003d2e8
   b4e54:	2003d2c8 	.word	0x2003d2c8
   b4e58:	2003d2c0 	.word	0x2003d2c0
   b4e5c:	2003d2c4 	.word	0x2003d2c4
   b4e60:	2003d554 	.word	0x2003d554
   b4e64:	2003d2cc 	.word	0x2003d2cc
   b4e68:	2003d540 	.word	0x2003d540
   b4e6c:	2003d2d0 	.word	0x2003d2d0
   b4e70:	2003d57c 	.word	0x2003d57c
   b4e74:	000bd0c7 	.word	0x000bd0c7
   b4e78:	2003d4ec 	.word	0x2003d4ec
   b4e7c:	000bd0d0 	.word	0x000bd0d0
   b4e80:	2003d4e0 	.word	0x2003d4e0
   b4e84:	000bd0de 	.word	0x000bd0de
   b4e88:	2003d4d0 	.word	0x2003d4d0
   b4e8c:	000bd0e8 	.word	0x000bd0e8
   b4e90:	2003d4d8 	.word	0x2003d4d8
   b4e94:	000bd0f5 	.word	0x000bd0f5
   b4e98:	2003d4f4 	.word	0x2003d4f4
   b4e9c:	000bd0ff 	.word	0x000bd0ff
   b4ea0:	2003d4fc 	.word	0x2003d4fc
   b4ea4:	000b490d 	.word	0x000b490d
   b4ea8:	2003e164 	.word	0x2003e164
   b4eac:	000bd124 	.word	0x000bd124
   b4eb0:	000b4127 	.word	0x000b4127
   b4eb4:	000b413b 	.word	0x000b413b
   b4eb8:	000b40ed 	.word	0x000b40ed
   b4ebc:	000b40b9 	.word	0x000b40b9
   b4ec0:	000bd10d 	.word	0x000bd10d
   b4ec4:	2003d600 	.word	0x2003d600
   b4ec8:	2003d660 	.word	0x2003d660
   b4ecc:	2003e180 	.word	0x2003e180
   b4ed0:	00030010 	.word	0x00030010
   b4ed4:	2003d6ec 	.word	0x2003d6ec
   b4ed8:	2003d504 	.word	0x2003d504
   b4edc:	2003d568 	.word	0x2003d568
   b4ee0:	2003d52c 	.word	0x2003d52c

000b4ee4 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4ee4:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4ee8:	b510      	push	{r4, lr}
   b4eea:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4eec:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4eee:	b113      	cbz	r3, b4ef6 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4ef0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4ef2:	f001 fab3 	bl	b645c <os_mutex_lock>
#endif
#endif
#endif
        }
   b4ef6:	4620      	mov	r0, r4
   b4ef8:	bd10      	pop	{r4, pc}

000b4efa <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b4efa:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4efc:	6803      	ldr	r3, [r0, #0]
   b4efe:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4f02:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4f04:	b112      	cbz	r2, b4f0c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b4f06:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4f08:	f001 fab0 	bl	b646c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4f0c:	4620      	mov	r0, r4
   b4f0e:	bd10      	pop	{r4, pc}

000b4f10 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f12:	461f      	mov	r7, r3
   b4f14:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4f18:	4604      	mov	r4, r0
   b4f1a:	460d      	mov	r5, r1
   b4f1c:	4616      	mov	r6, r2
    if (thread) {
   b4f1e:	b12b      	cbz	r3, b4f2c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4f20:	2301      	movs	r3, #1
   b4f22:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4f26:	3058      	adds	r0, #88	; 0x58
   b4f28:	f001 fa90 	bl	b644c <os_mutex_create>
    }
    this->callback = callback;
   b4f2c:	9b08      	ldr	r3, [sp, #32]
   b4f2e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4f30:	2300      	movs	r3, #0
   b4f32:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4f34:	b106      	cbz	r6, b4f38 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b4f36:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4f38:	b125      	cbz	r5, b4f44 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b4f3a:	4629      	mov	r1, r5
   b4f3c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4f40:	f002 f997 	bl	b7272 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4f44:	9b06      	ldr	r3, [sp, #24]
   b4f46:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4f48:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b4f4a:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b4f4c:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4f50:	2bff      	cmp	r3, #255	; 0xff
   b4f52:	bfb8      	it	lt
   b4f54:	23ff      	movlt	r3, #255	; 0xff
   b4f56:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b4f5a:	b108      	cbz	r0, b4f60 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b4f5c:	f7ff f89f 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4f60:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4f64:	f7ff f899 	bl	b409a <_Znaj>
   b4f68:	61e0      	str	r0, [r4, #28]
}
   b4f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f6c <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b4f6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4f70:	4604      	mov	r4, r0
            bool thread) {
   b4f72:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b4f74:	4617      	mov	r7, r2
   b4f76:	4698      	mov	r8, r3
   b4f78:	460e      	mov	r6, r1
            bool thread) {
   b4f7a:	f004 fdb9 	bl	b9af0 <_ZN9TCPClientC1Ev>
   b4f7e:	490d      	ldr	r1, [pc, #52]	; (b4fb4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b4f80:	61e5      	str	r5, [r4, #28]
   b4f82:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4f86:	f002 f960 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4f8a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b4f8e:	9303      	str	r3, [sp, #12]
   b4f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b4f92:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4f94:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b4f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4f9a:	9300      	str	r3, [sp, #0]
   b4f9c:	4620      	mov	r0, r4
            bool thread) {
   b4f9e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4fa2:	463b      	mov	r3, r7
   b4fa4:	462a      	mov	r2, r5
   b4fa6:	4631      	mov	r1, r6
   b4fa8:	f7ff ffb2 	bl	b4f10 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4fac:	4620      	mov	r0, r4
   b4fae:	b004      	add	sp, #16
   b4fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4fb4:	000bcd64 	.word	0x000bcd64

000b4fb8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4fb8:	b510      	push	{r4, lr}
   b4fba:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4fbc:	4620      	mov	r0, r4
   b4fbe:	f004 fcf3 	bl	b99a8 <_ZN9TCPClient9availableEv>
   b4fc2:	2800      	cmp	r0, #0
   b4fc4:	d0fa      	beq.n	b4fbc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b4fc6:	4620      	mov	r0, r4
   b4fc8:	f004 fafc 	bl	b95c4 <_ZN9TCPClient4readEv>
}
   b4fcc:	b2c0      	uxtb	r0, r0
   b4fce:	bd10      	pop	{r4, pc}

000b4fd0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4fd4:	4605      	mov	r5, r0
   b4fd6:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4fd8:	f7ff ffee 	bl	b4fb8 <_ZN4MQTT8readByteEv>
   b4fdc:	69eb      	ldr	r3, [r5, #28]
   b4fde:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4fe0:	69eb      	ldr	r3, [r5, #28]
   b4fe2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b4fe6:	f04f 0901 	mov.w	r9, #1
   b4fea:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4fee:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4ff0:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4ff2:	4628      	mov	r0, r5
   b4ff4:	f7ff ffe0 	bl	b4fb8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4ff8:	4626      	mov	r6, r4
   b4ffa:	69eb      	ldr	r3, [r5, #28]
   b4ffc:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4ffe:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b5002:	fb13 f309 	smulbb	r3, r3, r9
   b5006:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5008:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b500a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b500c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b500e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5010:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5014:	d4ed      	bmi.n	b4ff2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5016:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5018:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b501c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5020:	d11e      	bne.n	b5060 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b5022:	4628      	mov	r0, r5
   b5024:	f7ff ffc8 	bl	b4fb8 <_ZN4MQTT8readByteEv>
   b5028:	69eb      	ldr	r3, [r5, #28]
   b502a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b502c:	4628      	mov	r0, r5
   b502e:	f7ff ffc3 	bl	b4fb8 <_ZN4MQTT8readByteEv>
   b5032:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b5034:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b5036:	b2b6      	uxth	r6, r6
   b5038:	69eb      	ldr	r3, [r5, #28]
   b503a:	b2a4      	uxth	r4, r4
   b503c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b503e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5040:	b2b6      	uxth	r6, r6
   b5042:	42be      	cmp	r6, r7
   b5044:	d20e      	bcs.n	b5064 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b5046:	4628      	mov	r0, r5
   b5048:	f7ff ffb6 	bl	b4fb8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b504c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5050:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b5052:	bf84      	itt	hi
   b5054:	69eb      	ldrhi	r3, [r5, #28]
   b5056:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5058:	3401      	adds	r4, #1
   b505a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b505c:	3601      	adds	r6, #1
   b505e:	e7ef      	b.n	b5040 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5060:	2600      	movs	r6, #0
   b5062:	e7ed      	b.n	b5040 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5064:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5068:	42a3      	cmp	r3, r4
   b506a:	bf2c      	ite	cs
   b506c:	4620      	movcs	r0, r4
   b506e:	2000      	movcc	r0, #0
   b5070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5074 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5074:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5078:	4615      	mov	r5, r2
   b507a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b507c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b507e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5080:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5082:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5084:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5086:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b508a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b508e:	f103 0401 	add.w	r4, r3, #1
   b5092:	4403      	add	r3, r0
            digit |= 0x80;
   b5094:	bf88      	it	hi
   b5096:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b509a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b509e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b50a2:	b2e4      	uxtb	r4, r4
   b50a4:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b50a8:	d81e      	bhi.n	b50e8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b50aa:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b50ae:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b50b2:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b50b4:	4622      	mov	r2, r4
   b50b6:	a901      	add	r1, sp, #4
   b50b8:	4428      	add	r0, r5
    buf[4-llen] = header;
   b50ba:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b50be:	f005 fcf6 	bl	baaae <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b50c2:	1c72      	adds	r2, r6, #1
   b50c4:	4422      	add	r2, r4
   b50c6:	4641      	mov	r1, r8
   b50c8:	4638      	mov	r0, r7
   b50ca:	f004 fa66 	bl	b959a <_ZN9TCPClient5writeEPKhj>
   b50ce:	4605      	mov	r5, r0
   b50d0:	f001 f8f2 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b50d4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b50d6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b50d8:	4432      	add	r2, r6
   b50da:	b2a8      	uxth	r0, r5
}
   b50dc:	1a13      	subs	r3, r2, r0
   b50de:	4258      	negs	r0, r3
   b50e0:	4158      	adcs	r0, r3
   b50e2:	b002      	add	sp, #8
   b50e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b50e8:	4623      	mov	r3, r4
   b50ea:	e7ca      	b.n	b5082 <_ZN4MQTT5writeEhPht+0xe>

000b50ec <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b50ec:	b513      	push	{r0, r1, r4, lr}
   b50ee:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b50f0:	4601      	mov	r1, r0
   b50f2:	a801      	add	r0, sp, #4
   b50f4:	f7ff fef6 	bl	b4ee4 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b50f8:	69e3      	ldr	r3, [r4, #28]
   b50fa:	22e0      	movs	r2, #224	; 0xe0
   b50fc:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b50fe:	69e3      	ldr	r3, [r4, #28]
   b5100:	2200      	movs	r2, #0
   b5102:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b5104:	69e1      	ldr	r1, [r4, #28]
   b5106:	2202      	movs	r2, #2
   b5108:	4620      	mov	r0, r4
   b510a:	f004 fa46 	bl	b959a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b510e:	4620      	mov	r0, r4
   b5110:	f004 fca4 	bl	b9a5c <_ZN9TCPClient4stopEv>
   b5114:	f001 f8d0 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b5118:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b511c:	a801      	add	r0, sp, #4
   b511e:	f7ff feec 	bl	b4efa <_ZN4MQTT11MutexLockerD1Ev>
}
   b5122:	b002      	add	sp, #8
   b5124:	bd10      	pop	{r4, pc}

000b5126 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5126:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5128:	b5f0      	push	{r4, r5, r6, r7, lr}
   b512a:	4605      	mov	r5, r0
    pos += 2;
   b512c:	b298      	uxth	r0, r3
   b512e:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5130:	5cce      	ldrb	r6, [r1, r3]
   b5132:	b29c      	uxth	r4, r3
   b5134:	b156      	cbz	r6, b514c <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5136:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b513a:	4584      	cmp	ip, r0
   b513c:	f103 0701 	add.w	r7, r3, #1
   b5140:	d904      	bls.n	b514c <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5142:	1c44      	adds	r4, r0, #1
   b5144:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5146:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b5148:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b514a:	e7f1      	b.n	b5130 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b514c:	b299      	uxth	r1, r3
   b514e:	1a41      	subs	r1, r0, r1
   b5150:	440a      	add	r2, r1
   b5152:	0a21      	lsrs	r1, r4, #8
   b5154:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b5158:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b515c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b515e <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b515e:	b538      	push	{r3, r4, r5, lr}
   b5160:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5162:	f004 fb43 	bl	b97ec <_ZN9TCPClient9connectedEv>
   b5166:	2800      	cmp	r0, #0
   b5168:	bf14      	ite	ne
   b516a:	2501      	movne	r5, #1
   b516c:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b516e:	d102      	bne.n	b5176 <_ZN4MQTT11isConnectedEv+0x18>
   b5170:	4620      	mov	r0, r4
   b5172:	f004 fc73 	bl	b9a5c <_ZN9TCPClient4stopEv>
    return rc;
}
   b5176:	4628      	mov	r0, r5
   b5178:	bd38      	pop	{r3, r4, r5, pc}

000b517a <_ZN4MQTT9setBrokerEPKct>:
void MQTT::setBroker(const char* domain, uint16_t port) {
   b517a:	b570      	push	{r4, r5, r6, lr}
   b517c:	4604      	mov	r4, r0
   b517e:	460e      	mov	r6, r1
   b5180:	4615      	mov	r5, r2
    if(isConnected()) {
   b5182:	f7ff ffec 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b5186:	b110      	cbz	r0, b518e <_ZN4MQTT9setBrokerEPKct+0x14>
        disconnect();
   b5188:	4620      	mov	r0, r4
   b518a:	f7ff ffaf 	bl	b50ec <_ZN4MQTT10disconnectEv>
    this->domain = domain;
   b518e:	4631      	mov	r1, r6
   b5190:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5194:	f002 f86d 	bl	b7272 <_ZN6StringaSEPKc>
    this->ip = NULL;
   b5198:	2300      	movs	r3, #0
   b519a:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   b519c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
}
   b51a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b51a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b51a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b51a8:	b088      	sub	sp, #32
   b51aa:	4604      	mov	r4, r0
   b51ac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b51b0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b51b4:	4689      	mov	r9, r1
   b51b6:	4617      	mov	r7, r2
   b51b8:	461e      	mov	r6, r3
    if (!isConnected()) {
   b51ba:	f7ff ffd0 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b51be:	4605      	mov	r5, r0
   b51c0:	2800      	cmp	r0, #0
   b51c2:	f040 80cd 	bne.w	b5360 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b51c6:	4621      	mov	r1, r4
   b51c8:	a801      	add	r0, sp, #4
   b51ca:	f7ff fe8b 	bl	b4ee4 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b51ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b51d0:	2900      	cmp	r1, #0
   b51d2:	f040 8088 	bne.w	b52e6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b51d6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b51da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b51dc:	462b      	mov	r3, r5
   b51de:	4620      	mov	r0, r4
   b51e0:	f004 fa86 	bl	b96f0 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b51e4:	2800      	cmp	r0, #0
   b51e6:	d07a      	beq.n	b52de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b51e8:	2301      	movs	r3, #1
   b51ea:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b51ec:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b51f0:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b51f2:	2b04      	cmp	r3, #4
   b51f4:	4b5b      	ldr	r3, [pc, #364]	; (b5364 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b51f6:	f040 8081 	bne.w	b52fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b51fa:	6818      	ldr	r0, [r3, #0]
   b51fc:	8899      	ldrh	r1, [r3, #4]
   b51fe:	799b      	ldrb	r3, [r3, #6]
   b5200:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5204:	f88d 300e 	strb.w	r3, [sp, #14]
   b5208:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b520a:	f8c2 0005 	str.w	r0, [r2, #5]
   b520e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5212:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5216:	f8a2 1009 	strh.w	r1, [r2, #9]
   b521a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b521c:	230c      	movs	r3, #12
            if (willTopic) {
   b521e:	f1b8 0f00 	cmp.w	r8, #0
   b5222:	f000 8081 	beq.w	b5328 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5226:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b522a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b522e:	0140      	lsls	r0, r0, #5
   b5230:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5234:	f040 0006 	orr.w	r0, r0, #6
   b5238:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b523a:	f1ba 0f00 	cmp.w	sl, #0
   b523e:	d101      	bne.n	b5244 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5240:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5244:	b11f      	cbz	r7, b524e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5246:	2e00      	cmp	r6, #0
   b5248:	d170      	bne.n	b532c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b524a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b524e:	69e2      	ldr	r2, [r4, #28]
   b5250:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b5252:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5254:	69e1      	ldr	r1, [r4, #28]
   b5256:	1c58      	adds	r0, r3, #1
   b5258:	1212      	asrs	r2, r2, #8
   b525a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b525c:	1c9a      	adds	r2, r3, #2
   b525e:	69e1      	ldr	r1, [r4, #28]
   b5260:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5262:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5264:	3303      	adds	r3, #3
   b5266:	69e2      	ldr	r2, [r4, #28]
   b5268:	4649      	mov	r1, r9
   b526a:	4620      	mov	r0, r4
   b526c:	f7ff ff5b 	bl	b5126 <_ZN4MQTT11writeStringEPKcPht>
   b5270:	4603      	mov	r3, r0
            if (willTopic) {
   b5272:	f1b8 0f00 	cmp.w	r8, #0
   b5276:	d00b      	beq.n	b5290 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5278:	69e2      	ldr	r2, [r4, #28]
   b527a:	4641      	mov	r1, r8
   b527c:	4620      	mov	r0, r4
   b527e:	f7ff ff52 	bl	b5126 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b5282:	69e2      	ldr	r2, [r4, #28]
   b5284:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b5286:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b5288:	4620      	mov	r0, r4
   b528a:	f7ff ff4c 	bl	b5126 <_ZN4MQTT11writeStringEPKcPht>
   b528e:	4603      	mov	r3, r0
            if(user != NULL) {
   b5290:	b167      	cbz	r7, b52ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5292:	69e2      	ldr	r2, [r4, #28]
   b5294:	4639      	mov	r1, r7
   b5296:	4620      	mov	r0, r4
   b5298:	f7ff ff45 	bl	b5126 <_ZN4MQTT11writeStringEPKcPht>
   b529c:	4603      	mov	r3, r0
                if(pass != NULL) {
   b529e:	b12e      	cbz	r6, b52ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b52a0:	69e2      	ldr	r2, [r4, #28]
   b52a2:	4631      	mov	r1, r6
   b52a4:	4620      	mov	r0, r4
   b52a6:	f7ff ff3e 	bl	b5126 <_ZN4MQTT11writeStringEPKcPht>
   b52aa:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b52ac:	3b05      	subs	r3, #5
   b52ae:	69e2      	ldr	r2, [r4, #28]
   b52b0:	b29b      	uxth	r3, r3
   b52b2:	2110      	movs	r1, #16
   b52b4:	4620      	mov	r0, r4
   b52b6:	f7ff fedd 	bl	b5074 <_ZN4MQTT5writeEhPht>
   b52ba:	f000 fffd 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b52be:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b52c2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b52c6:	4620      	mov	r0, r4
   b52c8:	f004 fb6e 	bl	b99a8 <_ZN9TCPClient9availableEv>
   b52cc:	bb88      	cbnz	r0, b5332 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b52ce:	f000 fff3 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b52d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b52d4:	1ac0      	subs	r0, r0, r3
   b52d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b52d8:	4373      	muls	r3, r6
   b52da:	4298      	cmp	r0, r3
   b52dc:	d9f3      	bls.n	b52c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b52de:	4620      	mov	r0, r4
   b52e0:	f004 fbbc 	bl	b9a5c <_ZN9TCPClient4stopEv>
   b52e4:	e035      	b.n	b5352 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b52e6:	a802      	add	r0, sp, #8
   b52e8:	f003 ffea 	bl	b92c0 <_ZN9IPAddressC1EPKh>
   b52ec:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b52f0:	462b      	mov	r3, r5
   b52f2:	a902      	add	r1, sp, #8
   b52f4:	4620      	mov	r0, r4
   b52f6:	f004 fadb 	bl	b98b0 <_ZN9TCPClient7connectE9IPAddresstm>
    virtual ~IPAddress() {}
   b52fa:	e773      	b.n	b51e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b52fc:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5300:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5304:	7bdb      	ldrb	r3, [r3, #15]
   b5306:	f10d 0c08 	add.w	ip, sp, #8
   b530a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b530e:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5312:	ab02      	add	r3, sp, #8
   b5314:	cb03      	ldmia	r3!, {r0, r1}
   b5316:	f8c2 0005 	str.w	r0, [r2, #5]
   b531a:	f8c2 1009 	str.w	r1, [r2, #9]
   b531e:	f89c 3000 	ldrb.w	r3, [ip]
   b5322:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5324:	230e      	movs	r3, #14
   b5326:	e77a      	b.n	b521e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5328:	2002      	movs	r0, #2
   b532a:	e786      	b.n	b523a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b532c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5330:	e78d      	b.n	b524e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5332:	a902      	add	r1, sp, #8
   b5334:	4620      	mov	r0, r4
   b5336:	f7ff fe4b 	bl	b4fd0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b533a:	2804      	cmp	r0, #4
   b533c:	d1cf      	bne.n	b52de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b533e:	69e3      	ldr	r3, [r4, #28]
   b5340:	78de      	ldrb	r6, [r3, #3]
   b5342:	2e00      	cmp	r6, #0
   b5344:	d1cb      	bne.n	b52de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b5346:	f000 ffb7 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b534a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b534c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b534e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b5352:	a801      	add	r0, sp, #4
   b5354:	f7ff fdd1 	bl	b4efa <_ZN4MQTT11MutexLockerD1Ev>
}
   b5358:	4628      	mov	r0, r5
   b535a:	b008      	add	sp, #32
   b535c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5360:	2500      	movs	r5, #0
   b5362:	e7f9      	b.n	b5358 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b5364:	000bd23b 	.word	0x000bd23b

000b5368 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b5368:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b536a:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b536e:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b5370:	2401      	movs	r4, #1
   b5372:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b5376:	2400      	movs	r4, #0
   b5378:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b537c:	e9cd 4400 	strd	r4, r4, [sp]
   b5380:	f7ff ff10 	bl	b51a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b5384:	b006      	add	sp, #24
   b5386:	bd10      	pop	{r4, pc}

000b5388 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b538c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b5390:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5394:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b5398:	4604      	mov	r4, r0
   b539a:	468b      	mov	fp, r1
   b539c:	4616      	mov	r6, r2
   b539e:	461f      	mov	r7, r3
    if (isConnected()) {
   b53a0:	f7ff fedd 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b53a4:	4682      	mov	sl, r0
   b53a6:	2800      	cmp	r0, #0
   b53a8:	d051      	beq.n	b544e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b53aa:	4621      	mov	r1, r4
   b53ac:	a801      	add	r0, sp, #4
   b53ae:	f7ff fd99 	bl	b4ee4 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b53b2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b53b6:	69e0      	ldr	r0, [r4, #28]
   b53b8:	2100      	movs	r1, #0
   b53ba:	f005 fba0 	bl	baafe <memset>
        length = writeString(topic, buffer, length);
   b53be:	2305      	movs	r3, #5
   b53c0:	69e2      	ldr	r2, [r4, #28]
   b53c2:	4659      	mov	r1, fp
   b53c4:	4620      	mov	r0, r4
   b53c6:	f7ff feae 	bl	b5126 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b53ca:	1e6b      	subs	r3, r5, #1
   b53cc:	2b01      	cmp	r3, #1
   b53ce:	d815      	bhi.n	b53fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b53d0:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b53d2:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b53d4:	3101      	adds	r1, #1
   b53d6:	b289      	uxth	r1, r1
   b53d8:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b53da:	0a09      	lsrs	r1, r1, #8
   b53dc:	5419      	strb	r1, [r3, r0]
   b53de:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b53e0:	69e3      	ldr	r3, [r4, #28]
   b53e2:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b53e4:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b53e6:	3002      	adds	r0, #2
   b53e8:	5499      	strb	r1, [r3, r2]
   b53ea:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b53ec:	f1b8 0f00 	cmp.w	r8, #0
   b53f0:	d004      	beq.n	b53fc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b53f2:	8c23      	ldrh	r3, [r4, #32]
   b53f4:	1c5a      	adds	r2, r3, #1
   b53f6:	8422      	strh	r2, [r4, #32]
   b53f8:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b53fc:	2100      	movs	r1, #0
   b53fe:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5400:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b5402:	69e2      	ldr	r2, [r4, #28]
   b5404:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5406:	d90a      	bls.n	b541e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5408:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b540c:	459c      	cmp	ip, r3
   b540e:	d906      	bls.n	b541e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5410:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5414:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5418:	3101      	adds	r1, #1
   b541a:	b289      	uxth	r1, r1
   b541c:	e7ef      	b.n	b53fe <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b541e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b5422:	2900      	cmp	r1, #0
   b5424:	bf0c      	ite	eq
   b5426:	2130      	moveq	r1, #48	; 0x30
   b5428:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b542a:	f1b9 0f00 	cmp.w	r9, #0
   b542e:	d001      	beq.n	b5434 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5430:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b5434:	2d02      	cmp	r5, #2
   b5436:	d10e      	bne.n	b5456 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b5438:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b543c:	3b05      	subs	r3, #5
   b543e:	b29b      	uxth	r3, r3
   b5440:	4620      	mov	r0, r4
   b5442:	f7ff fe17 	bl	b5074 <_ZN4MQTT5writeEhPht>
   b5446:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b5448:	a801      	add	r0, sp, #4
   b544a:	f7ff fd56 	bl	b4efa <_ZN4MQTT11MutexLockerD1Ev>
}
   b544e:	4650      	mov	r0, sl
   b5450:	b003      	add	sp, #12
   b5452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b5456:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b5458:	bf08      	it	eq
   b545a:	f041 0102 	orreq.w	r1, r1, #2
   b545e:	e7ed      	b.n	b543c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b5460 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b5460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b5462:	9c08      	ldr	r4, [sp, #32]
   b5464:	9403      	str	r4, [sp, #12]
   b5466:	2400      	movs	r4, #0
   b5468:	9402      	str	r4, [sp, #8]
   b546a:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b546e:	9401      	str	r4, [sp, #4]
   b5470:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b5474:	9400      	str	r4, [sp, #0]
   b5476:	f7ff ff87 	bl	b5388 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b547a:	b004      	add	sp, #16
   b547c:	bd10      	pop	{r4, pc}

000b547e <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b547e:	b530      	push	{r4, r5, lr}
   b5480:	b087      	sub	sp, #28
   b5482:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5484:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b5486:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5488:	9204      	str	r2, [sp, #16]
   b548a:	f005 fbae 	bl	babea <strlen>
   b548e:	2500      	movs	r5, #0
   b5490:	4603      	mov	r3, r0
   b5492:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5496:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b549a:	9500      	str	r5, [sp, #0]
   b549c:	4620      	mov	r0, r4
   b549e:	f7ff ffdf 	bl	b5460 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b54a2:	b007      	add	sp, #28
   b54a4:	bd30      	pop	{r4, r5, pc}

000b54a6 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b54a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b54a8:	4604      	mov	r4, r0
   b54aa:	460e      	mov	r6, r1
    if (isConnected()) {
   b54ac:	f7ff fe57 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b54b0:	4605      	mov	r5, r0
   b54b2:	b1c8      	cbz	r0, b54e8 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b54b4:	4621      	mov	r1, r4
   b54b6:	a801      	add	r0, sp, #4
   b54b8:	f7ff fd14 	bl	b4ee4 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b54bc:	69e3      	ldr	r3, [r4, #28]
   b54be:	2262      	movs	r2, #98	; 0x62
   b54c0:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b54c2:	69e3      	ldr	r3, [r4, #28]
   b54c4:	2202      	movs	r2, #2
   b54c6:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b54c8:	69e3      	ldr	r3, [r4, #28]
   b54ca:	0a32      	lsrs	r2, r6, #8
   b54cc:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b54ce:	69e3      	ldr	r3, [r4, #28]
   b54d0:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b54d2:	69e1      	ldr	r1, [r4, #28]
   b54d4:	2204      	movs	r2, #4
   b54d6:	4620      	mov	r0, r4
   b54d8:	f004 f85f 	bl	b959a <_ZN9TCPClient5writeEPKhj>
   b54dc:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b54de:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b54e0:	bf18      	it	ne
   b54e2:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b54e4:	f7ff fd09 	bl	b4efa <_ZN4MQTT11MutexLockerD1Ev>
}
   b54e8:	4628      	mov	r0, r5
   b54ea:	b002      	add	sp, #8
   b54ec:	bd70      	pop	{r4, r5, r6, pc}

000b54ee <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b54ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b54f0:	4604      	mov	r4, r0
   b54f2:	460e      	mov	r6, r1
    if (isConnected()) {
   b54f4:	f7ff fe33 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b54f8:	4605      	mov	r5, r0
   b54fa:	b1c8      	cbz	r0, b5530 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b54fc:	4621      	mov	r1, r4
   b54fe:	a801      	add	r0, sp, #4
   b5500:	f7ff fcf0 	bl	b4ee4 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5504:	69e3      	ldr	r3, [r4, #28]
   b5506:	2272      	movs	r2, #114	; 0x72
   b5508:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b550a:	69e3      	ldr	r3, [r4, #28]
   b550c:	2202      	movs	r2, #2
   b550e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5510:	69e3      	ldr	r3, [r4, #28]
   b5512:	0a32      	lsrs	r2, r6, #8
   b5514:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5516:	69e3      	ldr	r3, [r4, #28]
   b5518:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b551a:	69e1      	ldr	r1, [r4, #28]
   b551c:	2204      	movs	r2, #4
   b551e:	4620      	mov	r0, r4
   b5520:	f004 f83b 	bl	b959a <_ZN9TCPClient5writeEPKhj>
   b5524:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5526:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5528:	bf18      	it	ne
   b552a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b552c:	f7ff fce5 	bl	b4efa <_ZN4MQTT11MutexLockerD1Ev>
}
   b5530:	4628      	mov	r0, r5
   b5532:	b002      	add	sp, #8
   b5534:	bd70      	pop	{r4, r5, r6, pc}

000b5536 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b553a:	ed2d 8b02 	vpush	{d8}
   b553e:	b087      	sub	sp, #28
   b5540:	af00      	add	r7, sp, #0
   b5542:	4604      	mov	r4, r0
    if (isConnected()) {
   b5544:	f7ff fe0b 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b5548:	4681      	mov	r9, r0
   b554a:	b1f8      	cbz	r0, b558c <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b554c:	4621      	mov	r1, r4
   b554e:	f107 0014 	add.w	r0, r7, #20
   b5552:	f7ff fcc7 	bl	b4ee4 <_ZN4MQTT11MutexLockerC1EPS_>
   b5556:	f000 feaf 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b555a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b555c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5560:	4353      	muls	r3, r2
   b5562:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5564:	1a82      	subs	r2, r0, r2
   b5566:	429a      	cmp	r2, r3
   b5568:	4606      	mov	r6, r0
   b556a:	d803      	bhi.n	b5574 <_ZN4MQTT4loopEv+0x3e>
   b556c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b556e:	1a82      	subs	r2, r0, r2
   b5570:	4293      	cmp	r3, r2
   b5572:	d221      	bcs.n	b55b8 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5574:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5578:	b17b      	cbz	r3, b559a <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b557a:	4620      	mov	r0, r4
   b557c:	f004 fa6e 	bl	b9a5c <_ZN9TCPClient4stopEv>
                return false;
   b5580:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5584:	f107 0014 	add.w	r0, r7, #20
   b5588:	f7ff fcb7 	bl	b4efa <_ZN4MQTT11MutexLockerD1Ev>
}
   b558c:	4648      	mov	r0, r9
   b558e:	371c      	adds	r7, #28
   b5590:	46bd      	mov	sp, r7
   b5592:	ecbd 8b02 	vpop	{d8}
   b5596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b559a:	69e2      	ldr	r2, [r4, #28]
   b559c:	21c0      	movs	r1, #192	; 0xc0
   b559e:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b55a0:	69e2      	ldr	r2, [r4, #28]
   b55a2:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b55a4:	69e1      	ldr	r1, [r4, #28]
   b55a6:	2202      	movs	r2, #2
   b55a8:	4620      	mov	r0, r4
   b55aa:	f003 fff6 	bl	b959a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b55ae:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b55b2:	2301      	movs	r3, #1
   b55b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b55b8:	4620      	mov	r0, r4
   b55ba:	f004 f9f5 	bl	b99a8 <_ZN9TCPClient9availableEv>
   b55be:	2800      	cmp	r0, #0
   b55c0:	d0e0      	beq.n	b5584 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b55c2:	f107 0113 	add.w	r1, r7, #19
   b55c6:	4620      	mov	r0, r4
   b55c8:	f7ff fd02 	bl	b4fd0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b55cc:	4683      	mov	fp, r0
   b55ce:	2800      	cmp	r0, #0
   b55d0:	d0d8      	beq.n	b5584 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b55d2:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b55d4:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b55d6:	7819      	ldrb	r1, [r3, #0]
   b55d8:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b55dc:	2a30      	cmp	r2, #48	; 0x30
   b55de:	d17f      	bne.n	b56e0 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b55e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b55e4:	f1ba 0f00 	cmp.w	sl, #0
   b55e8:	d0cc      	beq.n	b5584 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b55ea:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b55ee:	466a      	mov	r2, sp
   b55f0:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b55f4:	eb03 020c 	add.w	r2, r3, ip
   b55f8:	7851      	ldrb	r1, [r2, #1]
   b55fa:	7895      	ldrb	r5, [r2, #2]
   b55fc:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5600:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5602:	f105 0208 	add.w	r2, r5, #8
   b5606:	4669      	mov	r1, sp
   b5608:	08d2      	lsrs	r2, r2, #3
   b560a:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b560e:	4695      	mov	sp, r2
   b5610:	f10c 0203 	add.w	r2, ip, #3
   b5614:	60fa      	str	r2, [r7, #12]
   b5616:	eb03 0e02 	add.w	lr, r3, r2
   b561a:	eb0d 0205 	add.w	r2, sp, r5
   b561e:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5620:	f8c7 d008 	str.w	sp, [r7, #8]
   b5624:	607a      	str	r2, [r7, #4]
   b5626:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b562a:	428a      	cmp	r2, r1
   b562c:	d006      	beq.n	b563c <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b562e:	460a      	mov	r2, r1
   b5630:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5634:	f802 8b01 	strb.w	r8, [r2], #1
   b5638:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b563a:	e7f4      	b.n	b5626 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b563c:	2200      	movs	r2, #0
   b563e:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5640:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5644:	68f9      	ldr	r1, [r7, #12]
   b5646:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b564a:	ebab 020c 	sub.w	r2, fp, ip
   b564e:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5650:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5654:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5658:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b565a:	d125      	bne.n	b56a8 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b565c:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5660:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5662:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5664:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5668:	f10c 0105 	add.w	r1, ip, #5
   b566c:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b566e:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5670:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5674:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5676:	69e3      	ldr	r3, [r4, #28]
   b5678:	2240      	movs	r2, #64	; 0x40
   b567a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b567c:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b567e:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5682:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5686:	69e3      	ldr	r3, [r4, #28]
   b5688:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b568c:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b568e:	69e3      	ldr	r3, [r4, #28]
   b5690:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5694:	69e1      	ldr	r1, [r4, #28]
   b5696:	2204      	movs	r2, #4
   b5698:	4620      	mov	r0, r4
   b569a:	f003 ff7e 	bl	b959a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b569e:	6266      	str	r6, [r4, #36]	; 0x24
   b56a0:	ee18 3a10 	vmov	r3, s16
   b56a4:	469d      	mov	sp, r3
   b56a6:	e76d      	b.n	b5584 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b56a8:	f1b8 0f04 	cmp.w	r8, #4
   b56ac:	d115      	bne.n	b56da <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b56ae:	f813 e001 	ldrb.w	lr, [r3, r1]
   b56b2:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b56b4:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b56b6:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b56ba:	f10c 0105 	add.w	r1, ip, #5
   b56be:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b56c0:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b56c2:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b56c6:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b56c8:	69e3      	ldr	r3, [r4, #28]
   b56ca:	2250      	movs	r2, #80	; 0x50
   b56cc:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b56ce:	69e3      	ldr	r3, [r4, #28]
   b56d0:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b56d2:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b56d6:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b56d8:	e7d5      	b.n	b5686 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b56da:	4419      	add	r1, r3
   b56dc:	47d0      	blx	sl
   b56de:	e7df      	b.n	b56a0 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b56e0:	2a50      	cmp	r2, #80	; 0x50
   b56e2:	d108      	bne.n	b56f6 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b56e4:	789a      	ldrb	r2, [r3, #2]
   b56e6:	78d9      	ldrb	r1, [r3, #3]
   b56e8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b56ec:	b289      	uxth	r1, r1
   b56ee:	4620      	mov	r0, r4
   b56f0:	f7ff fed9 	bl	b54a6 <_ZN4MQTT14publishReleaseEt>
   b56f4:	e746      	b.n	b5584 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b56f6:	2a40      	cmp	r2, #64	; 0x40
   b56f8:	d112      	bne.n	b5720 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b56fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b56fc:	2a00      	cmp	r2, #0
   b56fe:	f43f af41 	beq.w	b5584 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5702:	f1bb 0f04 	cmp.w	fp, #4
   b5706:	f47f af3d 	bne.w	b5584 <_ZN4MQTT4loopEv+0x4e>
   b570a:	f011 0f06 	tst.w	r1, #6
   b570e:	f47f af39 	bne.w	b5584 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5712:	7899      	ldrb	r1, [r3, #2]
   b5714:	78d8      	ldrb	r0, [r3, #3]
   b5716:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b571a:	b280      	uxth	r0, r0
   b571c:	4790      	blx	r2
   b571e:	e731      	b.n	b5584 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5720:	2a60      	cmp	r2, #96	; 0x60
   b5722:	d108      	bne.n	b5736 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5724:	789a      	ldrb	r2, [r3, #2]
   b5726:	78d9      	ldrb	r1, [r3, #3]
   b5728:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b572c:	b289      	uxth	r1, r1
   b572e:	4620      	mov	r0, r4
   b5730:	f7ff fedd 	bl	b54ee <_ZN4MQTT15publishCompleteEt>
   b5734:	e726      	b.n	b5584 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5736:	2a70      	cmp	r2, #112	; 0x70
   b5738:	d0df      	beq.n	b56fa <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b573a:	2a90      	cmp	r2, #144	; 0x90
   b573c:	f43f af22 	beq.w	b5584 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5740:	2ac0      	cmp	r2, #192	; 0xc0
   b5742:	d10a      	bne.n	b575a <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5744:	22d0      	movs	r2, #208	; 0xd0
   b5746:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5748:	69e3      	ldr	r3, [r4, #28]
   b574a:	2200      	movs	r2, #0
   b574c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b574e:	69e1      	ldr	r1, [r4, #28]
   b5750:	2202      	movs	r2, #2
   b5752:	4620      	mov	r0, r4
   b5754:	f003 ff21 	bl	b959a <_ZN9TCPClient5writeEPKhj>
   b5758:	e714      	b.n	b5584 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b575a:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b575c:	bf04      	itt	eq
   b575e:	2300      	moveq	r3, #0
   b5760:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5764:	e70e      	b.n	b5584 <_ZN4MQTT4loopEv+0x4e>

000b5766 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5768:	4604      	mov	r4, r0
   b576a:	460f      	mov	r7, r1
   b576c:	4616      	mov	r6, r2
    if (isConnected()) {
   b576e:	f7ff fcf6 	bl	b515e <_ZN4MQTT11isConnectedEv>
   b5772:	4605      	mov	r5, r0
   b5774:	b310      	cbz	r0, b57bc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5776:	4621      	mov	r1, r4
   b5778:	a801      	add	r0, sp, #4
   b577a:	f7ff fbb3 	bl	b4ee4 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b577e:	8c23      	ldrh	r3, [r4, #32]
   b5780:	3301      	adds	r3, #1
   b5782:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5784:	b1eb      	cbz	r3, b57c2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5786:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5788:	8c23      	ldrh	r3, [r4, #32]
   b578a:	69e2      	ldr	r2, [r4, #28]
   b578c:	0a1b      	lsrs	r3, r3, #8
   b578e:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5790:	69e3      	ldr	r3, [r4, #28]
   b5792:	8c22      	ldrh	r2, [r4, #32]
   b5794:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5796:	69e2      	ldr	r2, [r4, #28]
   b5798:	2307      	movs	r3, #7
   b579a:	4639      	mov	r1, r7
   b579c:	4620      	mov	r0, r4
   b579e:	f7ff fcc2 	bl	b5126 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b57a2:	69e3      	ldr	r3, [r4, #28]
   b57a4:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b57a6:	3804      	subs	r0, #4
   b57a8:	b283      	uxth	r3, r0
   b57aa:	69e2      	ldr	r2, [r4, #28]
   b57ac:	2182      	movs	r1, #130	; 0x82
   b57ae:	4620      	mov	r0, r4
   b57b0:	f7ff fc60 	bl	b5074 <_ZN4MQTT5writeEhPht>
   b57b4:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b57b6:	a801      	add	r0, sp, #4
   b57b8:	f7ff fb9f 	bl	b4efa <_ZN4MQTT11MutexLockerD1Ev>
}
   b57bc:	4628      	mov	r0, r5
   b57be:	b003      	add	sp, #12
   b57c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b57c2:	2301      	movs	r3, #1
   b57c4:	e7df      	b.n	b5786 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b57c6 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b57c6:	2200      	movs	r2, #0
   b57c8:	f7ff bfcd 	b.w	b5766 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b57cc <_ZN12mDNSResolver5QueryC1EPKc>:
#include "Query.h"

namespace mDNSResolver {
  Query::Query(const char* name) {
    this->name = name;
   b57cc:	6001      	str	r1, [r0, #0]
  }
   b57ce:	4770      	bx	lr

000b57d0 <_ZN12mDNSResolver5QueryD1Ev>:

  Query::~Query() {}
   b57d0:	4770      	bx	lr

000b57d2 <_ZN12mDNSResolver5Query12buildDNSNameEPhj>:
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
    buffer[bufferIndex++] = qclass & 0xFF;
  }

  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
    int wordstart = 0, wordend = 0;
   b57d2:	2300      	movs	r3, #0
  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
   b57d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int wordstart = 0, wordend = 0;
   b57d6:	461c      	mov	r4, r3

    do {
      if(this->name[wordend] == '.' || this->name[wordend] == '\0') {
   b57d8:	6805      	ldr	r5, [r0, #0]
   b57da:	5ced      	ldrb	r5, [r5, r3]
   b57dc:	2d2e      	cmp	r5, #46	; 0x2e
   b57de:	d000      	beq.n	b57e2 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x10>
   b57e0:	b9bd      	cbnz	r5, b5812 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x40>
        const int wordlen = wordend - wordstart;
   b57e2:	1b1d      	subs	r5, r3, r4
        buffer[bufferIndex++] = (unsigned char)wordlen;
   b57e4:	548d      	strb	r5, [r1, r2]
   b57e6:	f102 0c01 	add.w	ip, r2, #1

        for(int i = wordstart; i < wordend; i++) {
   b57ea:	4626      	mov	r6, r4
   b57ec:	440a      	add	r2, r1
   b57ee:	42b3      	cmp	r3, r6
          buffer[bufferIndex++] = this->name[i];
   b57f0:	6807      	ldr	r7, [r0, #0]
        for(int i = wordstart; i < wordend; i++) {
   b57f2:	dd04      	ble.n	b57fe <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x2c>
          buffer[bufferIndex++] = this->name[i];
   b57f4:	5dbf      	ldrb	r7, [r7, r6]
   b57f6:	f802 7f01 	strb.w	r7, [r2, #1]!
        for(int i = wordstart; i < wordend; i++) {
   b57fa:	3601      	adds	r6, #1
   b57fc:	e7f7      	b.n	b57ee <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x1c>
   b57fe:	429c      	cmp	r4, r3
   b5800:	bfc8      	it	gt
   b5802:	2500      	movgt	r5, #0
        }

        if(this->name[wordend] == '.') {
   b5804:	5cfc      	ldrb	r4, [r7, r3]
   b5806:	2c2e      	cmp	r4, #46	; 0x2e
          wordend++;
   b5808:	bf08      	it	eq
   b580a:	3301      	addeq	r3, #1
   b580c:	eb05 020c 	add.w	r2, r5, ip
        if(this->name[wordend] == '.') {
   b5810:	461c      	mov	r4, r3
        }
        wordstart = wordend;
      }

      wordend++;
    } while(this->name[wordstart] != '\0');
   b5812:	6805      	ldr	r5, [r0, #0]
   b5814:	5d2d      	ldrb	r5, [r5, r4]
      wordend++;
   b5816:	3301      	adds	r3, #1
    } while(this->name[wordstart] != '\0');
   b5818:	2d00      	cmp	r5, #0
   b581a:	d1dd      	bne.n	b57d8 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x6>

    return bufferIndex;
  }
   b581c:	4610      	mov	r0, r2
   b581e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5820 <_ZN12mDNSResolver5Query14assemblePacketEPhi>:
  void Query::assemblePacket(unsigned char *buffer, int bufferLength) {
   b5820:	b538      	push	{r3, r4, r5, lr}
   b5822:	460b      	mov	r3, r1
   b5824:	4605      	mov	r5, r0
      buffer[i] = 0;
   b5826:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   b582a:	4618      	mov	r0, r3
   b582c:	2100      	movs	r1, #0
   b582e:	f005 f966 	bl	baafe <memset>
    buffer[5] = 0x01;
   b5832:	2401      	movs	r4, #1
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b5834:	4601      	mov	r1, r0
    buffer[5] = 0x01;
   b5836:	7144      	strb	r4, [r0, #5]
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b5838:	220c      	movs	r2, #12
   b583a:	4628      	mov	r0, r5
   b583c:	f7ff ffc9 	bl	b57d2 <_ZN12mDNSResolver5Query12buildDNSNameEPhj>
    buffer[bufferIndex++] = '\0';
   b5840:	2300      	movs	r3, #0
   b5842:	540b      	strb	r3, [r1, r0]
    buffer[bufferIndex++] = (qtype & 0xFF00) >> 8;
   b5844:	4401      	add	r1, r0
   b5846:	704b      	strb	r3, [r1, #1]
    buffer[bufferIndex++] = qtype & 0xFF;
   b5848:	708c      	strb	r4, [r1, #2]
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
   b584a:	70cb      	strb	r3, [r1, #3]
    buffer[bufferIndex++] = qclass & 0xFF;
   b584c:	710c      	strb	r4, [r1, #4]
  }
   b584e:	bd38      	pop	{r3, r4, r5, pc}

000b5850 <_ZN12mDNSResolver5Query10sendPacketER3UDP>:
  void Query::sendPacket(UDP& socket) {
   b5850:	b5b0      	push	{r4, r5, r7, lr}
   b5852:	b082      	sub	sp, #8
   b5854:	4605      	mov	r5, r0
   b5856:	af00      	add	r7, sp, #0
    int bufferLength = strlen(this->name) + 18;
   b5858:	6800      	ldr	r0, [r0, #0]
  void Query::sendPacket(UDP& socket) {
   b585a:	460c      	mov	r4, r1
    int bufferLength = strlen(this->name) + 18;
   b585c:	f005 f9c5 	bl	babea <strlen>
    unsigned char buffer[bufferLength];
   b5860:	f100 0319 	add.w	r3, r0, #25
   b5864:	f023 0307 	bic.w	r3, r3, #7
   b5868:	ebad 0d03 	sub.w	sp, sp, r3
    int bufferLength = strlen(this->name) + 18;
   b586c:	f100 0212 	add.w	r2, r0, #18
    assemblePacket(buffer, bufferLength);
   b5870:	4669      	mov	r1, sp
   b5872:	4628      	mov	r0, r5
   b5874:	607a      	str	r2, [r7, #4]
   b5876:	f7ff ffd3 	bl	b5820 <_ZN12mDNSResolver5Query14assemblePacketEPhi>
    socket.write(buffer, bufferLength);
   b587a:	6823      	ldr	r3, [r4, #0]
   b587c:	687a      	ldr	r2, [r7, #4]
   b587e:	68db      	ldr	r3, [r3, #12]
   b5880:	4669      	mov	r1, sp
   b5882:	4620      	mov	r0, r4
   b5884:	4798      	blx	r3
	socket.endPacket();
   b5886:	6823      	ldr	r3, [r4, #0]
   b5888:	4620      	mov	r0, r4
   b588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b588c:	4798      	blx	r3
  }
   b588e:	3708      	adds	r7, #8
   b5890:	46bd      	mov	sp, r7
   b5892:	bdb0      	pop	{r4, r5, r7, pc}

000b5894 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>:
    resolveCnames(cache);

    return answerResult;
  }

  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b5894:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5896:	b089      	sub	sp, #36	; 0x24
   b5898:	461c      	mov	r4, r3
   b589a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if(dataLen == 4) {
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b589c:	6816      	ldr	r6, [r2, #0]
    if(dataLen == 4) {
   b589e:	2b04      	cmp	r3, #4
  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b58a0:	4615      	mov	r5, r2
    if(dataLen == 4) {
   b58a2:	d11f      	bne.n	b58e4 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x50>
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b58a4:	1c72      	adds	r2, r6, #1
   b58a6:	602a      	str	r2, [r5, #0]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b58a8:	1cb3      	adds	r3, r6, #2
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b58aa:	5d81      	ldrb	r1, [r0, r6]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b58ac:	602b      	str	r3, [r5, #0]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b58ae:	1cf7      	adds	r7, r6, #3
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b58b0:	5c82      	ldrb	r2, [r0, r2]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b58b2:	602f      	str	r7, [r5, #0]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b58b4:	3604      	adds	r6, #4
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b58b6:	5cc3      	ldrb	r3, [r0, r3]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b58b8:	602e      	str	r6, [r5, #0]

      response.resolved = true;
   b58ba:	2501      	movs	r5, #1
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b58bc:	5dc0      	ldrb	r0, [r0, r7]
      response.resolved = true;
   b58be:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
      response.ttl = ttl;
   b58c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b58c4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
      response.ipAddress = IPAddress(a, b, c, d);
   b58c8:	9000      	str	r0, [sp, #0]
class IPAddress : public Printable {
   b58ca:	ad03      	add	r5, sp, #12
   b58cc:	a802      	add	r0, sp, #8
   b58ce:	f003 fceb 	bl	b92a8 <_ZN9IPAddressC1Ehhhh>
   b58d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b58d4:	f504 7486 	add.w	r4, r4, #268	; 0x10c
   b58d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b58da:	682b      	ldr	r3, [r5, #0]
   b58dc:	7023      	strb	r3, [r4, #0]
    } else {
      (*offset) += dataLen;
    }

    return E_MDNS_OK;
  }
   b58de:	2020      	movs	r0, #32
   b58e0:	b009      	add	sp, #36	; 0x24
   b58e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*offset) += dataLen;
   b58e4:	4433      	add	r3, r6
   b58e6:	6013      	str	r3, [r2, #0]
   b58e8:	e7f9      	b.n	b58de <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x4a>

000b58ea <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>:

    free(assembled);
    return E_MDNS_OK;
  }

  MDNS_RESULT Answer::parseName(char** name, const char* mapped, unsigned int len) {
   b58ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned int namePointer = 0;
    unsigned int mapPointer = 0;
   b58ee:	2500      	movs	r5, #0
    unsigned int namePointer = 0;
   b58f0:	462b      	mov	r3, r5

      if(labelLength > 0x3f) {
        return E_MDNS_INVALID_LABEL_LENGTH;
      }

      if(namePointer + labelLength > len - 1) {
   b58f2:	f102 3eff 	add.w	lr, r2, #4294967295
        return E_MDNS_PACKET_ERROR;
      }

      if(namePointer != 0) {
        (*name)[namePointer++] = '.';
   b58f6:	f04f 082e 	mov.w	r8, #46	; 0x2e
    while(mapPointer < len) {
   b58fa:	4295      	cmp	r5, r2
   b58fc:	d21d      	bcs.n	b593a <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x50>
      int labelLength = mapped[mapPointer++];
   b58fe:	5d4c      	ldrb	r4, [r1, r5]
      if(labelLength > 0x3f) {
   b5900:	2c3f      	cmp	r4, #63	; 0x3f
      int labelLength = mapped[mapPointer++];
   b5902:	eb01 0705 	add.w	r7, r1, r5
      if(labelLength > 0x3f) {
   b5906:	dc20      	bgt.n	b594a <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x60>
      if(namePointer + labelLength > len - 1) {
   b5908:	18e6      	adds	r6, r4, r3
   b590a:	4576      	cmp	r6, lr
   b590c:	d81f      	bhi.n	b594e <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x64>
      if(namePointer != 0) {
   b590e:	b11b      	cbz	r3, b5918 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x2e>
        (*name)[namePointer++] = '.';
   b5910:	6806      	ldr	r6, [r0, #0]
   b5912:	f806 8003 	strb.w	r8, [r6, r3]
   b5916:	3301      	adds	r3, #1
   b5918:	46ba      	mov	sl, r7
   b591a:	2600      	movs	r6, #0
      }

      for(int i = 0; i < labelLength; i++) {
   b591c:	42a6      	cmp	r6, r4
   b591e:	eb06 0c03 	add.w	ip, r6, r3
   b5922:	db03      	blt.n	b592c <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x42>
   b5924:	4423      	add	r3, r4
   b5926:	3401      	adds	r4, #1
   b5928:	4425      	add	r5, r4
   b592a:	e7e6      	b.n	b58fa <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x10>
        (*name)[namePointer++] = mapped[mapPointer++];
   b592c:	6807      	ldr	r7, [r0, #0]
   b592e:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
   b5932:	f807 900c 	strb.w	r9, [r7, ip]
      for(int i = 0; i < labelLength; i++) {
   b5936:	3601      	adds	r6, #1
   b5938:	e7f0      	b.n	b591c <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x32>
      }
    }

    (*name)[len - 1] = '\0';
   b593a:	6803      	ldr	r3, [r0, #0]
   b593c:	441a      	add	r2, r3
   b593e:	2300      	movs	r3, #0
   b5940:	f802 3c01 	strb.w	r3, [r2, #-1]

    return E_MDNS_OK;
   b5944:	2020      	movs	r0, #32
  }
   b5946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return E_MDNS_INVALID_LABEL_LENGTH;
   b594a:	2026      	movs	r0, #38	; 0x26
   b594c:	e7fb      	b.n	b5946 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>
        return E_MDNS_PACKET_ERROR;
   b594e:	2023      	movs	r0, #35	; 0x23
   b5950:	e7f9      	b.n	b5946 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>

000b5952 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name, unsigned int maxlen) {
   b5952:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5956:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    unsigned int index = 0;
   b5958:	2500      	movs	r5, #0
    unsigned int nameLength = 0;

    while(index < maxlen) {
   b595a:	42a5      	cmp	r5, r4
   b595c:	d025      	beq.n	b59aa <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b595e:	6816      	ldr	r6, [r2, #0]
   b5960:	f810 8006 	ldrb.w	r8, [r0, r6]
   b5964:	f008 0cc0 	and.w	ip, r8, #192	; 0xc0
   b5968:	f1bc 0fc0 	cmp.w	ip, #192	; 0xc0
   b596c:	eb00 0e06 	add.w	lr, r0, r6
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5970:	f106 0701 	add.w	r7, r6, #1
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b5974:	d120      	bne.n	b59b8 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x66>
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5976:	6017      	str	r7, [r2, #0]
   b5978:	f89e 4000 	ldrb.w	r4, [lr]
   b597c:	3602      	adds	r6, #2
   b597e:	6016      	str	r6, [r2, #0]
   b5980:	5dc2      	ldrb	r2, [r0, r7]
   b5982:	0224      	lsls	r4, r4, #8
   b5984:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
   b5988:	4414      	add	r4, r2
        if(pointerOffset > len) {
   b598a:	428c      	cmp	r4, r1
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b598c:	9402      	str	r4, [sp, #8]
        if(pointerOffset > len) {
   b598e:	d80e      	bhi.n	b59ae <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x5c>
          // Points to somewhere beyond the packet
          return -1 * E_MDNS_POINTER_OVERFLOW;
        }

        char *namePointer = *name + nameLength;
   b5990:	681b      	ldr	r3, [r3, #0]
   b5992:	442b      	add	r3, r5
   b5994:	9303      	str	r3, [sp, #12]
        int pointerLen = assembleName(buffer, len, &pointerOffset, &namePointer, MDNS_MAX_NAME_LEN - nameLength);
   b5996:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
   b599a:	9300      	str	r3, [sp, #0]
   b599c:	aa02      	add	r2, sp, #8
   b599e:	ab03      	add	r3, sp, #12
   b59a0:	f7ff ffd7 	bl	b5952 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>

        if(pointerLen < 0) {
   b59a4:	2800      	cmp	r0, #0
   b59a6:	db04      	blt.n	b59b2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return pointerLen;
        }

        nameLength += pointerLen;
   b59a8:	1944      	adds	r4, r0, r5
        (*name)[nameLength++] = buffer[(*offset)++];
      }
      index++;
    }

    return nameLength;
   b59aa:	4620      	mov	r0, r4
   b59ac:	e001      	b.n	b59b2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return -1 * E_MDNS_POINTER_OVERFLOW;
   b59ae:	f06f 0021 	mvn.w	r0, #33	; 0x21
  }
   b59b2:	b004      	add	sp, #16
   b59b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (*name)[nameLength++] = buffer[(*offset)++];
   b59b8:	f105 0c01 	add.w	ip, r5, #1
   b59bc:	6017      	str	r7, [r2, #0]
      } else if(buffer[*offset] == '\0') {
   b59be:	f1b8 0f00 	cmp.w	r8, #0
   b59c2:	d105      	bne.n	b59d0 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x7e>
        (*name)[nameLength++] = buffer[(*offset)++];
   b59c4:	681b      	ldr	r3, [r3, #0]
   b59c6:	f89e 2000 	ldrb.w	r2, [lr]
   b59ca:	555a      	strb	r2, [r3, r5]
   b59cc:	4664      	mov	r4, ip
        break;
   b59ce:	e7ec      	b.n	b59aa <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
        (*name)[nameLength++] = buffer[(*offset)++];
   b59d0:	5d87      	ldrb	r7, [r0, r6]
   b59d2:	681e      	ldr	r6, [r3, #0]
   b59d4:	5577      	strb	r7, [r6, r5]
        (*name)[nameLength++] = buffer[(*offset)++];
   b59d6:	4665      	mov	r5, ip
    while(index < maxlen) {
   b59d8:	e7bf      	b.n	b595a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x8>

000b59da <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name) {
   b59da:	b513      	push	{r0, r1, r4, lr}
    return assembleName(buffer, len, offset, name, MDNS_MAX_NAME_LEN);
   b59dc:	24ff      	movs	r4, #255	; 0xff
   b59de:	9400      	str	r4, [sp, #0]
   b59e0:	f7ff ffb7 	bl	b5952 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
  }
   b59e4:	b002      	add	sp, #8
   b59e6:	bd10      	pop	{r4, pc}

000b59e8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>:
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b59e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b59ec:	4605      	mov	r5, r0
   b59ee:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b59f2:	20ff      	movs	r0, #255	; 0xff
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b59f4:	4688      	mov	r8, r1
   b59f6:	4614      	mov	r4, r2
   b59f8:	461e      	mov	r6, r3
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b59fa:	f000 ff6b 	bl	b68d4 <malloc>
   b59fe:	9004      	str	r0, [sp, #16]
    if(assembled == NULL) {
   b5a00:	b1b8      	cbz	r0, b5a32 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4a>
    int nameLen = Answer::assembleName(buffer, len, offset, &assembled);
   b5a02:	ab04      	add	r3, sp, #16
   b5a04:	4622      	mov	r2, r4
   b5a06:	4641      	mov	r1, r8
   b5a08:	4628      	mov	r0, r5
   b5a0a:	f7ff ffe6 	bl	b59da <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>
    if(nameLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b5a0e:	f110 0f22 	cmn.w	r0, #34	; 0x22
   b5a12:	d107      	bne.n	b5a24 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x3c>
        free(assembled);
   b5a14:	9804      	ldr	r0, [sp, #16]
   b5a16:	f000 ff65 	bl	b68e4 <free>
        return -1 * dataLen;
   b5a1a:	2022      	movs	r0, #34	; 0x22
  }
   b5a1c:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   b5a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    char *name = (char *)malloc(sizeof(char) * nameLen);
   b5a24:	f000 ff56 	bl	b68d4 <malloc>
   b5a28:	9005      	str	r0, [sp, #20]
    if(name == NULL) {
   b5a2a:	b920      	cbnz	r0, b5a36 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4e>
      free(assembled);
   b5a2c:	9804      	ldr	r0, [sp, #16]
   b5a2e:	f000 ff59 	bl	b68e4 <free>
      return E_MDNS_OUT_OF_MEMORY;
   b5a32:	2027      	movs	r0, #39	; 0x27
   b5a34:	e7f2      	b.n	b5a1c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    parseName(&name, assembled, strlen(assembled));
   b5a36:	9904      	ldr	r1, [sp, #16]
   b5a38:	9103      	str	r1, [sp, #12]
   b5a3a:	4608      	mov	r0, r1
   b5a3c:	f005 f8d5 	bl	babea <strlen>
   b5a40:	9903      	ldr	r1, [sp, #12]
   b5a42:	4602      	mov	r2, r0
   b5a44:	a805      	add	r0, sp, #20
   b5a46:	f7ff ff50 	bl	b58ea <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
    int cacheIndex = cache.search(name);
   b5a4a:	9905      	ldr	r1, [sp, #20]
   b5a4c:	4630      	mov	r0, r6
   b5a4e:	f000 f987 	bl	b5d60 <_ZN12mDNSResolver5Cache6searchEPKc>
   b5a52:	4607      	mov	r7, r0
    free(name);
   b5a54:	9805      	ldr	r0, [sp, #20]
   b5a56:	f000 ff45 	bl	b68e4 <free>
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5a5a:	6822      	ldr	r2, [r4, #0]
   b5a5c:	1c53      	adds	r3, r2, #1
   b5a5e:	6023      	str	r3, [r4, #0]
   b5a60:	1c91      	adds	r1, r2, #2
   b5a62:	5ca8      	ldrb	r0, [r5, r2]
   b5a64:	6021      	str	r1, [r4, #0]
   b5a66:	5ce9      	ldrb	r1, [r5, r3]
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5a68:	1d53      	adds	r3, r2, #5
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5a6a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5a6e:	18a8      	adds	r0, r5, r2
   b5a70:	6023      	str	r3, [r4, #0]
   b5a72:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5a76:	1d90      	adds	r0, r2, #6
   b5a78:	6020      	str	r0, [r4, #0]
   b5a7a:	5ceb      	ldrb	r3, [r5, r3]
   b5a7c:	041b      	lsls	r3, r3, #16
   b5a7e:	eb03 630c 	add.w	r3, r3, ip, lsl #24
   b5a82:	f102 0c07 	add.w	ip, r2, #7
   b5a86:	f8c4 c000 	str.w	ip, [r4]
   b5a8a:	5c28      	ldrb	r0, [r5, r0]
   b5a8c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
   b5a90:	f102 0008 	add.w	r0, r2, #8
   b5a94:	6020      	str	r0, [r4, #0]
   b5a96:	f815 900c 	ldrb.w	r9, [r5, ip]
   b5a9a:	4499      	add	r9, r3
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5a9c:	f102 0309 	add.w	r3, r2, #9
   b5aa0:	6023      	str	r3, [r4, #0]
   b5aa2:	320a      	adds	r2, #10
   b5aa4:	5c28      	ldrb	r0, [r5, r0]
   b5aa6:	6022      	str	r2, [r4, #0]
   b5aa8:	f815 a003 	ldrb.w	sl, [r5, r3]
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b5aac:	2901      	cmp	r1, #1
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5aae:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b5ab2:	d112      	bne.n	b5ada <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xf2>
   b5ab4:	1c78      	adds	r0, r7, #1
   b5ab6:	d077      	beq.n	b5ba8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      resolveAName(buffer, len, offset, cache[cacheIndex], ttl, dataLen);
   b5ab8:	4639      	mov	r1, r7
   b5aba:	4630      	mov	r0, r6
   b5abc:	f000 f94b 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5ac0:	e9cd 9a00 	strd	r9, sl, [sp]
   b5ac4:	4603      	mov	r3, r0
   b5ac6:	4622      	mov	r2, r4
   b5ac8:	4641      	mov	r1, r8
   b5aca:	4628      	mov	r0, r5
   b5acc:	f7ff fee2 	bl	b5894 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>
    free(assembled);
   b5ad0:	9804      	ldr	r0, [sp, #16]
   b5ad2:	f000 ff07 	bl	b68e4 <free>
    return E_MDNS_OK;
   b5ad6:	2020      	movs	r0, #32
   b5ad8:	e7a0      	b.n	b5a1c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    } else if(type == MDNS_CNAME_RECORD && cacheIndex != -1) {
   b5ada:	2905      	cmp	r1, #5
   b5adc:	d164      	bne.n	b5ba8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
   b5ade:	1c79      	adds	r1, r7, #1
   b5ae0:	d062      	beq.n	b5ba8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      cache[cacheIndex].resolved = false;
   b5ae2:	4639      	mov	r1, r7
   b5ae4:	4630      	mov	r0, r6
   b5ae6:	f000 f936 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5aea:	2300      	movs	r3, #0
   b5aec:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
      cache[cacheIndex].ttl = ttl;
   b5af0:	4639      	mov	r1, r7
   b5af2:	4630      	mov	r0, r6
   b5af4:	f000 f92f 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5af8:	f8c0 9100 	str.w	r9, [r0, #256]	; 0x100
      unsigned int dataOffset = (*offset);
   b5afc:	6823      	ldr	r3, [r4, #0]
   b5afe:	9306      	str	r3, [sp, #24]
      (*offset) += dataLen;
   b5b00:	4453      	add	r3, sl
   b5b02:	6023      	str	r3, [r4, #0]
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b5b04:	4628      	mov	r0, r5
   b5b06:	f8cd a000 	str.w	sl, [sp]
   b5b0a:	ab04      	add	r3, sp, #16
   b5b0c:	aa06      	add	r2, sp, #24
   b5b0e:	4641      	mov	r1, r8
   b5b10:	f7ff ff1f 	bl	b5952 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b5b14:	f110 0f22 	cmn.w	r0, #34	; 0x22
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b5b18:	4605      	mov	r5, r0
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b5b1a:	f43f af7b 	beq.w	b5a14 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x2c>
      Response r;
   b5b1e:	ac08      	add	r4, sp, #32
   b5b20:	4620      	mov	r0, r4
   b5b22:	f000 f9e1 	bl	b5ee8 <_ZN12mDNSResolver8ResponseC1Ev>
      parseName(&responseName, assembled, dataLen - 1);
   b5b26:	9904      	ldr	r1, [sp, #16]
      char* responseName = &*r.name;
   b5b28:	9407      	str	r4, [sp, #28]
      parseName(&responseName, assembled, dataLen - 1);
   b5b2a:	1e6a      	subs	r2, r5, #1
   b5b2c:	a807      	add	r0, sp, #28
   b5b2e:	f7ff fedc 	bl	b58ea <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
      int cnameIndex = cache.search(r);
   b5b32:	4621      	mov	r1, r4
   b5b34:	4630      	mov	r0, r6
   b5b36:	f000 f92b 	bl	b5d90 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      if(cnameIndex == -1) {
   b5b3a:	1c43      	adds	r3, r0, #1
   b5b3c:	d125      	bne.n	b5b8a <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1a2>
#include "Constants.h"
#include "Particle.h"
// #include <mDNSResolver/IPAddress.h>

namespace mDNSResolver {
  class Response {
   b5b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
   b5b42:	4621      	mov	r1, r4
   b5b44:	a851      	add	r0, sp, #324	; 0x144
   b5b46:	f004 ffb2 	bl	baaae <memcpy>
   b5b4a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   b5b4e:	9391      	str	r3, [sp, #580]	; 0x244
   b5b50:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   b5b54:	f88d 3248 	strb.w	r3, [sp, #584]	; 0x248
   b5b58:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   b5b5c:	4b14      	ldr	r3, [pc, #80]	; (b5bb0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c8>)
   b5b5e:	9393      	str	r3, [sp, #588]	; 0x24c
   b5b60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5b64:	ad94      	add	r5, sp, #592	; 0x250
   b5b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5b68:	f8dc 3000 	ldr.w	r3, [ip]
   b5b6c:	702b      	strb	r3, [r5, #0]
        cache.insert(r);
   b5b6e:	a951      	add	r1, sp, #324	; 0x144
   b5b70:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   b5b74:	9399      	str	r3, [sp, #612]	; 0x264
   b5b76:	4630      	mov	r0, r6
   b5b78:	f000 f957 	bl	b5e2a <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b5b7c:	a851      	add	r0, sp, #324	; 0x144
   b5b7e:	f000 f9e7 	bl	b5f50 <_ZN12mDNSResolver8ResponseD1Ev>
        cnameIndex = cache.search(r);
   b5b82:	4621      	mov	r1, r4
   b5b84:	4630      	mov	r0, r6
   b5b86:	f000 f903 	bl	b5d90 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b5b8a:	4601      	mov	r1, r0
   b5b8c:	4630      	mov	r0, r6
   b5b8e:	f000 f8e2 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5b92:	4639      	mov	r1, r7
   b5b94:	4605      	mov	r5, r0
   b5b96:	4630      	mov	r0, r6
   b5b98:	f000 f8dd 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5b9c:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
      Response r;
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	f000 f9d5 	bl	b5f50 <_ZN12mDNSResolver8ResponseD1Ev>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b5ba6:	e793      	b.n	b5ad0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
      (*offset) += dataLen;
   b5ba8:	4452      	add	r2, sl
   b5baa:	6022      	str	r2, [r4, #0]
   b5bac:	e790      	b.n	b5ad0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
   b5bae:	bf00      	nop
   b5bb0:	000bd55c 	.word	0x000bd55c

000b5bb4 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>:

  // Work out how many bytes are dedicated to questions. Since we aren't answering questions, they can be skipped
  // buffer: The mDNS packet we are parsing
  // len: Length of the packet
  // offset: the byte we are up to in the parsing process
  MDNS_RESULT Answer::skipQuestions(unsigned char* buffer, unsigned int len, unsigned int* offset) {
   b5bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int questionCount = (buffer[4] << 8) + buffer[5];
   b5bb6:	7903      	ldrb	r3, [r0, #4]
   b5bb8:	7946      	ldrb	r6, [r0, #5]
   b5bba:	eb06 2603 	add.w	r6, r6, r3, lsl #8

    *offset += 12;
   b5bbe:	6813      	ldr	r3, [r2, #0]
   b5bc0:	330c      	adds	r3, #12
   b5bc2:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b5bc4:	2500      	movs	r5, #0
   b5bc6:	42ae      	cmp	r6, r5
   b5bc8:	d016      	beq.n	b5bf8 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x44>

      while(buffer[*offset] != '\0') {
   b5bca:	6813      	ldr	r3, [r2, #0]
   b5bcc:	5cc4      	ldrb	r4, [r0, r3]
   b5bce:	b12c      	cbz	r4, b5bdc <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x28>
        // If it's a pointer, add two to the counter
        if((buffer[*offset] & 0xc0) == 0xc0) {
   b5bd0:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   b5bd4:	2fc0      	cmp	r7, #192	; 0xc0
   b5bd6:	d106      	bne.n	b5be6 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x32>
          (*offset) += 2;
   b5bd8:	3302      	adds	r3, #2
   b5bda:	6013      	str	r3, [r2, #0]
            return E_MDNS_PACKET_ERROR;
          }
        }
      }

      (*offset) += 5; // 2 bytes for the qtypes and 2 bytes qclass + plus one to land us on the next bit
   b5bdc:	6813      	ldr	r3, [r2, #0]
   b5bde:	3305      	adds	r3, #5
   b5be0:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b5be2:	3501      	adds	r5, #1
   b5be4:	e7ef      	b.n	b5bc6 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x12>
          if(labelLength > 0x3f) {
   b5be6:	2c3f      	cmp	r4, #63	; 0x3f
   b5be8:	d80c      	bhi.n	b5c04 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x50>
          (*offset) += 1; // Increment to move to the next byte
   b5bea:	3301      	adds	r3, #1
          (*offset) += labelLength;
   b5bec:	4423      	add	r3, r4
          if(*offset > len) {
   b5bee:	428b      	cmp	r3, r1
          (*offset) += labelLength;
   b5bf0:	6013      	str	r3, [r2, #0]
          if(*offset > len) {
   b5bf2:	d9ea      	bls.n	b5bca <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x16>
    }

    if(*offset > len + 1) {
      return E_MDNS_PACKET_ERROR;
   b5bf4:	2023      	movs	r0, #35	; 0x23
    }

    return E_MDNS_OK;
  }
   b5bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*offset > len + 1) {
   b5bf8:	6813      	ldr	r3, [r2, #0]
   b5bfa:	3101      	adds	r1, #1
   b5bfc:	428b      	cmp	r3, r1
   b5bfe:	d8f9      	bhi.n	b5bf4 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x40>
    return E_MDNS_OK;
   b5c00:	2020      	movs	r0, #32
   b5c02:	e7f8      	b.n	b5bf6 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>
            return E_MDNS_INVALID_LABEL_LENGTH;
   b5c04:	2026      	movs	r0, #38	; 0x26
   b5c06:	e7f6      	b.n	b5bf6 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>

000b5c08 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>:

  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b5c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for(int i = 0; i < cache.length(); i++) {
   b5c0c:	2400      	movs	r4, #0
  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b5c0e:	4605      	mov	r5, r0
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
        cache[i].ipAddress = cache[i].cname->ipAddress;
        cache[i].resolved = true;
   b5c10:	f04f 0801 	mov.w	r8, #1
        cache[i].cname = NULL;
   b5c14:	46a1      	mov	r9, r4
    for(int i = 0; i < cache.length(); i++) {
   b5c16:	4628      	mov	r0, r5
   b5c18:	f000 f8bc 	bl	b5d94 <_ZN12mDNSResolver5Cache6lengthEv>
   b5c1c:	42a0      	cmp	r0, r4
   b5c1e:	dd2f      	ble.n	b5c80 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x78>
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
   b5c20:	4621      	mov	r1, r4
   b5c22:	4628      	mov	r0, r5
   b5c24:	f000 f897 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5c28:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b5c2c:	b333      	cbz	r3, b5c7c <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
   b5c2e:	4621      	mov	r1, r4
   b5c30:	4628      	mov	r0, r5
   b5c32:	f000 f890 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5c36:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b5c3a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
   b5c3e:	b1eb      	cbz	r3, b5c7c <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
        cache[i].ipAddress = cache[i].cname->ipAddress;
   b5c40:	4621      	mov	r1, r4
   b5c42:	4628      	mov	r0, r5
   b5c44:	f000 f887 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5c48:	4621      	mov	r1, r4
   b5c4a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   b5c4e:	4628      	mov	r0, r5
   b5c50:	f000 f881 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5c54:	f507 7786 	add.w	r7, r7, #268	; 0x10c
   b5c58:	f500 7686 	add.w	r6, r0, #268	; 0x10c
   b5c5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5c5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5c60:	683b      	ldr	r3, [r7, #0]
   b5c62:	7033      	strb	r3, [r6, #0]
        cache[i].resolved = true;
   b5c64:	4621      	mov	r1, r4
   b5c66:	4628      	mov	r0, r5
   b5c68:	f000 f875 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
        cache[i].cname = NULL;
   b5c6c:	4621      	mov	r1, r4
        cache[i].resolved = true;
   b5c6e:	f880 8104 	strb.w	r8, [r0, #260]	; 0x104
        cache[i].cname = NULL;
   b5c72:	4628      	mov	r0, r5
   b5c74:	f000 f86f 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b5c78:	f8c0 9120 	str.w	r9, [r0, #288]	; 0x120
    for(int i = 0; i < cache.length(); i++) {
   b5c7c:	3401      	adds	r4, #1
   b5c7e:	e7ca      	b.n	b5c16 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0xe>
      }
    }
    return E_MDNS_OK;
  }
   b5c80:	2020      	movs	r0, #32
   b5c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5c86 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>:
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b5c86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5c8a:	4691      	mov	r9, r2
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b5c8c:	f990 2002 	ldrsb.w	r2, [r0, #2]
   b5c90:	7883      	ldrb	r3, [r0, #2]
   b5c92:	2a00      	cmp	r2, #0
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b5c94:	4606      	mov	r6, r0
   b5c96:	4688      	mov	r8, r1
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b5c98:	da28      	bge.n	b5cec <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    if(buffer[2] & 0b00000010) {
   b5c9a:	079b      	lsls	r3, r3, #30
   b5c9c:	d422      	bmi.n	b5ce4 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x5e>
    if (buffer[3] & 0b00001111) {
   b5c9e:	78c5      	ldrb	r5, [r0, #3]
   b5ca0:	f015 050f 	ands.w	r5, r5, #15
   b5ca4:	d120      	bne.n	b5ce8 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x62>
    unsigned int answerCount = (buffer[6] << 8) + buffer[7];
   b5ca6:	7983      	ldrb	r3, [r0, #6]
   b5ca8:	79c7      	ldrb	r7, [r0, #7]
    if(answerCount == 0) {
   b5caa:	eb17 2703 	adds.w	r7, r7, r3, lsl #8
   b5cae:	d01d      	beq.n	b5cec <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b5cb0:	aa01      	add	r2, sp, #4
    unsigned int offset = 0;
   b5cb2:	9501      	str	r5, [sp, #4]
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b5cb4:	f7ff ff7e 	bl	b5bb4 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>
    if(questionResult != E_MDNS_OK) {
   b5cb8:	2820      	cmp	r0, #32
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b5cba:	4604      	mov	r4, r0
    if(questionResult != E_MDNS_OK) {
   b5cbc:	d10e      	bne.n	b5cdc <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      answerResult = resolve(buffer, len, &offset, cache);
   b5cbe:	464b      	mov	r3, r9
   b5cc0:	aa01      	add	r2, sp, #4
   b5cc2:	4641      	mov	r1, r8
   b5cc4:	4630      	mov	r0, r6
   b5cc6:	f7ff fe8f 	bl	b59e8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>
      if(answerResult != E_MDNS_OK) {
   b5cca:	2820      	cmp	r0, #32
      answerResult = resolve(buffer, len, &offset, cache);
   b5ccc:	4604      	mov	r4, r0
      if(answerResult != E_MDNS_OK) {
   b5cce:	d105      	bne.n	b5cdc <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
    for(int i = 0; i < answerCount; i++) {
   b5cd0:	3501      	adds	r5, #1
   b5cd2:	42af      	cmp	r7, r5
   b5cd4:	d1f3      	bne.n	b5cbe <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x38>
    resolveCnames(cache);
   b5cd6:	4648      	mov	r0, r9
   b5cd8:	f7ff ff96 	bl	b5c08 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>
  }
   b5cdc:	4620      	mov	r0, r4
   b5cde:	b003      	add	sp, #12
   b5ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return E_MDNS_TRUNCATED;
   b5ce4:	2425      	movs	r4, #37	; 0x25
   b5ce6:	e7f9      	b.n	b5cdc <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_PACKET_ERROR;
   b5ce8:	2423      	movs	r4, #35	; 0x23
   b5cea:	e7f7      	b.n	b5cdc <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_OK;
   b5cec:	2420      	movs	r4, #32
   b5cee:	e7f5      	b.n	b5cdc <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>

000b5cf0 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>:
   b5cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5cf2:	1e4a      	subs	r2, r1, #1
   b5cf4:	460d      	mov	r5, r1
   b5cf6:	4604      	mov	r4, r0
   b5cf8:	4603      	mov	r3, r0
   b5cfa:	f500 7180 	add.w	r1, r0, #256	; 0x100
   b5cfe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   b5d02:	f803 0b01 	strb.w	r0, [r3], #1
   b5d06:	428b      	cmp	r3, r1
   b5d08:	d1f9      	bne.n	b5cfe <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0+0xe>
   b5d0a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b5d0e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   b5d12:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   b5d16:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   b5d1a:	f505 7786 	add.w	r7, r5, #268	; 0x10c
   b5d1e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5d20:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   b5d24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5d26:	683b      	ldr	r3, [r7, #0]
   b5d28:	7033      	strb	r3, [r6, #0]
   b5d2a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   b5d2e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   b5d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5d34 <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b5d34:	b570      	push	{r4, r5, r6, lr}
   b5d36:	4604      	mov	r4, r0
   b5d38:	4605      	mov	r5, r0
   b5d3a:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5d3e:	4628      	mov	r0, r5
   b5d40:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b5d44:	f000 f8d0 	bl	b5ee8 <_ZN12mDNSResolver8ResponseC1Ev>
   b5d48:	42ae      	cmp	r6, r5
   b5d4a:	d1f8      	bne.n	b5d3e <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b5d4c:	2300      	movs	r3, #0
   b5d4e:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5d52:	4620      	mov	r0, r4
   b5d54:	bd70      	pop	{r4, r5, r6, pc}

000b5d56 <_ZN12mDNSResolver5CacheixEi>:
  Cache::~Cache() {
  }

  Response& Cache::operator[] (const int index) {
    return this->list[index];
  }
   b5d56:	f44f 7392 	mov.w	r3, #292	; 0x124
   b5d5a:	fb03 0001 	mla	r0, r3, r1, r0
   b5d5e:	4770      	bx	lr

000b5d60 <_ZN12mDNSResolver5Cache6searchEPKc>:

  int Cache::search(Response& response) {
    return search(response.name);
  }

  int Cache::search(const char* name) {
   b5d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < this->size; i++) {
   b5d64:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
  int Cache::search(const char* name) {
   b5d68:	4605      	mov	r5, r0
   b5d6a:	4688      	mov	r8, r1
    for(int i = 0; i < this->size; i++) {
   b5d6c:	2400      	movs	r4, #0
      if(strcmp(this->list[i].name, name) == 0) {
   b5d6e:	f44f 7792 	mov.w	r7, #292	; 0x124
    for(int i = 0; i < this->size; i++) {
   b5d72:	42a6      	cmp	r6, r4
   b5d74:	dd07      	ble.n	b5d86 <_ZN12mDNSResolver5Cache6searchEPKc+0x26>
      if(strcmp(this->list[i].name, name) == 0) {
   b5d76:	4641      	mov	r1, r8
   b5d78:	fb07 5004 	mla	r0, r7, r4, r5
   b5d7c:	f004 ff05 	bl	bab8a <strcmp>
   b5d80:	b118      	cbz	r0, b5d8a <_ZN12mDNSResolver5Cache6searchEPKc+0x2a>
    for(int i = 0; i < this->size; i++) {
   b5d82:	3401      	adds	r4, #1
   b5d84:	e7f5      	b.n	b5d72 <_ZN12mDNSResolver5Cache6searchEPKc+0x12>
        return i;
      }
    }
    return -1;
   b5d86:	f04f 34ff 	mov.w	r4, #4294967295
  }
   b5d8a:	4620      	mov	r0, r4
   b5d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5d90 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>:
    return search(response.name);
   b5d90:	f7ff bfe6 	b.w	b5d60 <_ZN12mDNSResolver5Cache6searchEPKc>

000b5d94 <_ZN12mDNSResolver5Cache6lengthEv>:
    }
  }

  int Cache::length() {
    return this->size;
  }
   b5d94:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
   b5d98:	4770      	bx	lr

000b5d9a <_ZN12mDNSResolver5Cache6oldestEv>:

  int Cache::oldest() {
   b5d9a:	b570      	push	{r4, r5, r6, lr}
    if(this->size == 0) {
   b5d9c:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
   b5da0:	b1a4      	cbz	r4, b5dcc <_ZN12mDNSResolver5Cache6oldestEv+0x32>
      return -1;
    }

    unsigned long oldestTTL = this->list[0].ttl;
   b5da2:	f8d0 5100 	ldr.w	r5, [r0, #256]	; 0x100
    unsigned int oldestIndex = 0;

    for(int i = 1; i < this->size; i++) {
   b5da6:	2101      	movs	r1, #1
    unsigned int oldestIndex = 0;
   b5da8:	2200      	movs	r2, #0
      if(this->list[i].ttl < oldestTTL) {
   b5daa:	f500 7380 	add.w	r3, r0, #256	; 0x100
   b5dae:	f44f 7692 	mov.w	r6, #292	; 0x124
    for(int i = 1; i < this->size; i++) {
   b5db2:	428c      	cmp	r4, r1
   b5db4:	dd08      	ble.n	b5dc8 <_ZN12mDNSResolver5Cache6oldestEv+0x2e>
      if(this->list[i].ttl < oldestTTL) {
   b5db6:	fb06 f001 	mul.w	r0, r6, r1
   b5dba:	5818      	ldr	r0, [r3, r0]
   b5dbc:	42a8      	cmp	r0, r5
        oldestTTL = this->list[i].ttl;
        oldestIndex = i;
   b5dbe:	bf3c      	itt	cc
   b5dc0:	460a      	movcc	r2, r1
      if(this->list[i].ttl < oldestTTL) {
   b5dc2:	4605      	movcc	r5, r0
    for(int i = 1; i < this->size; i++) {
   b5dc4:	3101      	adds	r1, #1
   b5dc6:	e7f4      	b.n	b5db2 <_ZN12mDNSResolver5Cache6oldestEv+0x18>
      }
    }

    return oldestIndex;
   b5dc8:	4610      	mov	r0, r2
  }
   b5dca:	bd70      	pop	{r4, r5, r6, pc}
      return -1;
   b5dcc:	f04f 30ff 	mov.w	r0, #4294967295
   b5dd0:	e7fb      	b.n	b5dca <_ZN12mDNSResolver5Cache6oldestEv+0x30>

000b5dd2 <_ZN12mDNSResolver5Cache11removeCnameEi>:

  void Cache::removeCname(int index) {
    Response *response = &this->list[index];
   b5dd2:	f44f 7392 	mov.w	r3, #292	; 0x124
   b5dd6:	fb03 0101 	mla	r1, r3, r1, r0
    return this->size;
   b5dda:	f8d0 2490 	ldr.w	r2, [r0, #1168]	; 0x490

    for(int i = 0; i < length(); i++) {
   b5dde:	2300      	movs	r3, #0
  void Cache::removeCname(int index) {
   b5de0:	b530      	push	{r4, r5, lr}
      if(this->list[i].cname == response) {
        this->list[i].cname = NULL;
   b5de2:	461c      	mov	r4, r3
    for(int i = 0; i < length(); i++) {
   b5de4:	4293      	cmp	r3, r2
   b5de6:	da09      	bge.n	b5dfc <_ZN12mDNSResolver5Cache11removeCnameEi+0x2a>
      if(this->list[i].cname == response) {
   b5de8:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   b5dec:	428d      	cmp	r5, r1
        this->list[i].cname = NULL;
   b5dee:	bf08      	it	eq
   b5df0:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
    for(int i = 0; i < length(); i++) {
   b5df4:	3301      	adds	r3, #1
   b5df6:	f500 7092 	add.w	r0, r0, #292	; 0x124
   b5dfa:	e7f3      	b.n	b5de4 <_ZN12mDNSResolver5Cache11removeCnameEi+0x12>
      }
    }
  }
   b5dfc:	bd30      	pop	{r4, r5, pc}

000b5dfe <_ZN12mDNSResolver5Cache6removeEi>:

  void Cache::remove(int index) {
   b5dfe:	b538      	push	{r3, r4, r5, lr}
   b5e00:	4604      	mov	r4, r0
   b5e02:	460d      	mov	r5, r1
    removeCname(index);
   b5e04:	f7ff ffe5 	bl	b5dd2 <_ZN12mDNSResolver5Cache11removeCnameEi>
    this->list[index] = this->list[this->size - 1];
   b5e08:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
   b5e0c:	f44f 7092 	mov.w	r0, #292	; 0x124
   b5e10:	3901      	subs	r1, #1
   b5e12:	fb00 4101 	mla	r1, r0, r1, r4
   b5e16:	fb00 4005 	mla	r0, r0, r5, r4
   b5e1a:	f7ff ff69 	bl	b5cf0 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size -= 1;
   b5e1e:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5e22:	3b01      	subs	r3, #1
   b5e24:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5e28:	bd38      	pop	{r3, r4, r5, pc}

000b5e2a <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>:
  void Cache::insert(Response response) {
   b5e2a:	b538      	push	{r3, r4, r5, lr}
   b5e2c:	4604      	mov	r4, r0
   b5e2e:	460d      	mov	r5, r1
    return search(response.name);
   b5e30:	f7ff ff96 	bl	b5d60 <_ZN12mDNSResolver5Cache6searchEPKc>
    if(existing != -1) {
   b5e34:	1c43      	adds	r3, r0, #1
   b5e36:	d008      	beq.n	b5e4a <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x20>
      this->list[existing] = response;
   b5e38:	f44f 7392 	mov.w	r3, #292	; 0x124
   b5e3c:	4629      	mov	r1, r5
   b5e3e:	fb03 4000 	mla	r0, r3, r0, r4
  }
   b5e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      this->list[existing] = response;
   b5e46:	f7ff bf53 	b.w	b5cf0 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    if(this->size == MDNS_RESOLVER_MAX_CACHE) {
   b5e4a:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5e4e:	2b04      	cmp	r3, #4
   b5e50:	d106      	bne.n	b5e60 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x36>
      int i = oldest();
   b5e52:	4620      	mov	r0, r4
   b5e54:	f7ff ffa1 	bl	b5d9a <_ZN12mDNSResolver5Cache6oldestEv>
   b5e58:	4601      	mov	r1, r0
      remove(i);
   b5e5a:	4620      	mov	r0, r4
   b5e5c:	f7ff ffcf 	bl	b5dfe <_ZN12mDNSResolver5Cache6removeEi>
    this->list[this->size] = response;
   b5e60:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5e64:	f44f 7092 	mov.w	r0, #292	; 0x124
   b5e68:	fb00 4003 	mla	r0, r0, r3, r4
   b5e6c:	4629      	mov	r1, r5
   b5e6e:	f7ff ff3f 	bl	b5cf0 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size += 1;
   b5e72:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5e76:	3301      	adds	r3, #1
   b5e78:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5e7c:	bd38      	pop	{r3, r4, r5, pc}

000b5e7e <_ZN12mDNSResolver5Cache6expireEv>:
  void Cache::expire() {
   b5e7e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5e82:	466e      	mov	r6, sp
   b5e84:	4604      	mov	r4, r0
   b5e86:	4605      	mov	r5, r0
   b5e88:	46b0      	mov	r8, r6
    for(int i = 0; i < this->size; i++) {
   b5e8a:	2700      	movs	r7, #0
   b5e8c:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5e90:	42bb      	cmp	r3, r7
   b5e92:	dd0a      	ble.n	b5eaa <_ZN12mDNSResolver5Cache6expireEv+0x2c>
      this->list[i].decrementTTL();
   b5e94:	4628      	mov	r0, r5
   b5e96:	f000 f85c 	bl	b5f52 <_ZN12mDNSResolver8Response12decrementTTLEv>
      ttls[i] = this->list[i].ttl;
   b5e9a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b5e9e:	f848 3b04 	str.w	r3, [r8], #4
    for(int i = 0; i < this->size; i++) {
   b5ea2:	3701      	adds	r7, #1
   b5ea4:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b5ea8:	e7f0      	b.n	b5e8c <_ZN12mDNSResolver5Cache6expireEv+0xe>
    for(int i = 0; i < this->size; i++) {
   b5eaa:	2500      	movs	r5, #0
   b5eac:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5eb0:	42ab      	cmp	r3, r5
   b5eb2:	dd08      	ble.n	b5ec6 <_ZN12mDNSResolver5Cache6expireEv+0x48>
      if(ttls[i] == 0) {
   b5eb4:	f856 3b04 	ldr.w	r3, [r6], #4
   b5eb8:	b91b      	cbnz	r3, b5ec2 <_ZN12mDNSResolver5Cache6expireEv+0x44>
        remove(i);
   b5eba:	4629      	mov	r1, r5
   b5ebc:	4620      	mov	r0, r4
   b5ebe:	f7ff ff9e 	bl	b5dfe <_ZN12mDNSResolver5Cache6removeEi>
    for(int i = 0; i < this->size; i++) {
   b5ec2:	3501      	adds	r5, #1
   b5ec4:	e7f2      	b.n	b5eac <_ZN12mDNSResolver5Cache6expireEv+0x2e>
  }
   b5ec6:	b004      	add	sp, #16
   b5ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5ecc <_ZN9IPAddressaSImEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5ecc:	b530      	push	{r4, r5, lr}
   b5ece:	b087      	sub	sp, #28
   b5ed0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5ed2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5ed4:	4668      	mov	r0, sp
   b5ed6:	f003 f9bb 	bl	b9250 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b5eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5edc:	3404      	adds	r4, #4
   b5ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ee0:	682b      	ldr	r3, [r5, #0]
   b5ee2:	7023      	strb	r3, [r4, #0]
    }
   b5ee4:	b007      	add	sp, #28
   b5ee6:	bd30      	pop	{r4, r5, pc}

000b5ee8 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b5ee8:	b538      	push	{r3, r4, r5, lr}
   b5eea:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b5eee:	4604      	mov	r4, r0
   b5ef0:	4628      	mov	r0, r5
   b5ef2:	f003 f98d 	bl	b9210 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b5ef6:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b5ef8:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b5efa:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b5efc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b5f00:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b5f04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b5f08:	f04f 31ff 	mov.w	r1, #4294967295
   b5f0c:	f7ff ffde 	bl	b5ecc <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b5f10:	4620      	mov	r0, r4
   b5f12:	bd38      	pop	{r3, r4, r5, pc}

000b5f14 <_ZN12mDNSResolver8ResponseC1EPKcm>:
    this->resolved = false;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
  }

  Response::Response(const char* name, unsigned long ttl) {
   b5f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5f16:	f500 7684 	add.w	r6, r0, #264	; 0x108
   b5f1a:	4604      	mov	r4, r0
   b5f1c:	4630      	mov	r0, r6
   b5f1e:	4615      	mov	r5, r2
   b5f20:	9101      	str	r1, [sp, #4]
   b5f22:	f003 f975 	bl	b9210 <_ZN9IPAddressC1Ev>
    strncpy(this->name, name, MDNS_MAX_NAME_LEN + 1);
   b5f26:	9901      	ldr	r1, [sp, #4]
   b5f28:	f44f 7280 	mov.w	r2, #256	; 0x100
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	f004 fe78 	bl	bac22 <strncpy>
    this->name[MDNS_MAX_NAME_LEN + 1] = '\0';
    this->ttl = ttl;
    this->resolved = false;
   b5f32:	2300      	movs	r3, #0
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b5f34:	4630      	mov	r0, r6
    this->ttl = ttl;
   b5f36:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    this->resolved = false;
   b5f3a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->cname = NULL;
   b5f3e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b5f42:	f04f 31ff 	mov.w	r1, #4294967295
   b5f46:	f7ff ffc1 	bl	b5ecc <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	b002      	add	sp, #8
   b5f4e:	bd70      	pop	{r4, r5, r6, pc}

000b5f50 <_ZN12mDNSResolver8ResponseD1Ev>:

  Response::~Response() {
  }
   b5f50:	4770      	bx	lr

000b5f52 <_ZN12mDNSResolver8Response12decrementTTLEv>:

  void Response::decrementTTL() {
    if(this->ttl > 0) {
   b5f52:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5f56:	2b00      	cmp	r3, #0
      this->ttl--;
   b5f58:	bfc4      	itt	gt
   b5f5a:	f103 33ff 	addgt.w	r3, r3, #4294967295
   b5f5e:	f8c0 3100 	strgt.w	r3, [r0, #256]	; 0x100
    }
  }
   b5f62:	4770      	bx	lr

000b5f64 <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b5f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f66:	4604      	mov	r4, r0
   b5f68:	3004      	adds	r0, #4
   b5f6a:	460d      	mov	r5, r1
   b5f6c:	f001 f856 	bl	b701c <_ZN3UDPC1Ev>
   b5f70:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5f74:	f003 f94c 	bl	b9210 <_ZN9IPAddressC1Ev>
    timeout = 0;
   b5f78:	2300      	movs	r3, #0
   b5f7a:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b5f7c:	686b      	ldr	r3, [r5, #4]
   b5f7e:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b5f80:	68ab      	ldr	r3, [r5, #8]
   b5f82:	60e3      	str	r3, [r4, #12]
   b5f84:	68eb      	ldr	r3, [r5, #12]
   b5f86:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b5f88:	696b      	ldr	r3, [r5, #20]
   b5f8a:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b5f8c:	f105 0720 	add.w	r7, r5, #32
   b5f90:	8b2b      	ldrh	r3, [r5, #24]
   b5f92:	83a3      	strh	r3, [r4, #28]
   b5f94:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5f96:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b5f9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5f9c:	683b      	ldr	r3, [r7, #0]
   b5f9e:	7033      	strb	r3, [r6, #0]
   b5fa0:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b5fa2:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b5fa4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b5fa6:	6423      	str	r3, [r4, #64]	; 0x40
   b5fa8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b5faa:	6463      	str	r3, [r4, #68]	; 0x44
   b5fac:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b5fae:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b5fb0:	64a3      	str	r3, [r4, #72]	; 0x48
   b5fb2:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b5fb6:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b5fb8:	4620      	mov	r0, r4
   b5fba:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b5fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5fc0 <_ZN12mDNSResolver8Resolver5queryEPKc>:
	init = false;
	// Serial.println("Search return 2");
    return INADDR_NONE;
  }

  void Resolver::query(const char* name) {
   b5fc0:	b510      	push	{r4, lr}
   b5fc2:	b08a      	sub	sp, #40	; 0x28
   b5fc4:	4604      	mov	r4, r0
	  // Serial.println("Query");
    Query query(name);
   b5fc6:	a803      	add	r0, sp, #12
   b5fc8:	f7ff fc00 	bl	b57cc <_ZN12mDNSResolver5QueryC1EPKc>
    udp.beginPacket(MDNS_BROADCAST_IP, MDNS_PORT);		//Peet
   b5fcc:	23fb      	movs	r3, #251	; 0xfb
   b5fce:	9300      	str	r3, [sp, #0]
   b5fd0:	2300      	movs	r3, #0
   b5fd2:	461a      	mov	r2, r3
   b5fd4:	3404      	adds	r4, #4
   b5fd6:	21e0      	movs	r1, #224	; 0xe0
   b5fd8:	a804      	add	r0, sp, #16
   b5fda:	f003 f965 	bl	b92a8 <_ZN9IPAddressC1Ehhhh>
   b5fde:	f241 42e9 	movw	r2, #5353	; 0x14e9
   b5fe2:	a904      	add	r1, sp, #16
   b5fe4:	4620      	mov	r0, r4
   b5fe6:	f001 f867 	bl	b70b8 <_ZN3UDP11beginPacketE9IPAddresst>
    query.sendPacket(udp);
   b5fea:	4621      	mov	r1, r4
   b5fec:	a803      	add	r0, sp, #12
   b5fee:	f7ff fc2f 	bl	b5850 <_ZN12mDNSResolver5Query10sendPacketER3UDP>
    udp.endPacket();
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	f000 fd7c 	bl	b6af0 <_ZN3UDP9endPacketEv>
    Query query(name);
   b5ff8:	a803      	add	r0, sp, #12
   b5ffa:	f7ff fbe9 	bl	b57d0 <_ZN12mDNSResolver5QueryD1Ev>
  }
   b5ffe:	b00a      	add	sp, #40	; 0x28
   b6000:	bd10      	pop	{r4, pc}
	...

000b6004 <_ZN12mDNSResolver8Resolver4readEv>:
      free(buffer);
    }
	// Serial.println("mDNS2");
  }

  MDNS_RESULT Resolver::read() {
   b6004:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6006:	4605      	mov	r5, r0
   b6008:	b089      	sub	sp, #36	; 0x24
    cache.expire();
   b600a:	482d      	ldr	r0, [pc, #180]	; (b60c0 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b600c:	f7ff ff37 	bl	b5e7e <_ZN12mDNSResolver5Cache6expireEv>

    if(!init) {
   b6010:	f895 4068 	ldrb.w	r4, [r5, #104]	; 0x68
      init = true;
	  Serial.println("Begin Multicast");
	  udp.begin(5353);
   b6014:	1d2f      	adds	r7, r5, #4
    if(!init) {
   b6016:	bb54      	cbnz	r4, b606e <_ZN12mDNSResolver8Resolver4readEv+0x6a>
      init = true;
   b6018:	2301      	movs	r3, #1
   b601a:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	  Serial.println("Begin Multicast");
   b601e:	f003 f9b9 	bl	b9394 <_Z16_fetch_usbserialv>
   b6022:	4928      	ldr	r1, [pc, #160]	; (b60c4 <_ZN12mDNSResolver8Resolver4readEv+0xc0>)
   b6024:	f002 fc1f 	bl	b8866 <_ZN5Print7printlnEPKc>
	  udp.begin(5353);
   b6028:	4622      	mov	r2, r4
   b602a:	f241 41e9 	movw	r1, #5353	; 0x14e9
   b602e:	4638      	mov	r0, r7
   b6030:	f000 fdb8 	bl	b6ba4 <_ZN3UDP5beginEtm>
      Serial.println(udp.joinMulticast(MDNS_BROADCAST_IP));	  //Peet
   b6034:	f003 f9ae 	bl	b9394 <_Z16_fetch_usbserialv>
   b6038:	23fb      	movs	r3, #251	; 0xfb
   b603a:	4622      	mov	r2, r4
   b603c:	9300      	str	r3, [sp, #0]
   b603e:	21e0      	movs	r1, #224	; 0xe0
   b6040:	4623      	mov	r3, r4
   b6042:	4606      	mov	r6, r0
   b6044:	a802      	add	r0, sp, #8
   b6046:	f003 f92f 	bl	b92a8 <_ZN9IPAddressC1Ehhhh>
   b604a:	a902      	add	r1, sp, #8
   b604c:	4638      	mov	r0, r7
   b604e:	f001 f887 	bl	b7160 <_ZN3UDP13joinMulticastERK9IPAddress>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b6052:	1e04      	subs	r4, r0, #0
   b6054:	da1d      	bge.n	b6092 <_ZN12mDNSResolver8Resolver4readEv+0x8e>
            t = print('-');
   b6056:	212d      	movs	r1, #45	; 0x2d
   b6058:	4630      	mov	r0, r6
   b605a:	f002 fbf5 	bl	b8848 <_ZN5Print5printEc>
            val = -n;
   b605e:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6060:	220a      	movs	r2, #10
   b6062:	4630      	mov	r0, r6
   b6064:	f002 fc09 	bl	b887a <_ZN5Print11printNumberEmh>
        n += println();
   b6068:	4630      	mov	r0, r6
   b606a:	f002 fbf0 	bl	b884e <_ZN5Print7printlnEv>
    }

    unsigned int len = udp.parsePacket();
   b606e:	2100      	movs	r1, #0
   b6070:	4638      	mov	r0, r7
   b6072:	f001 f838 	bl	b70e6 <_ZN3UDP11parsePacketEm>

    if(len > 0) {
   b6076:	4606      	mov	r6, r0
   b6078:	b300      	cbz	r0, b60bc <_ZN12mDNSResolver8Resolver4readEv+0xb8>
      unsigned char *buffer = (unsigned char *)malloc(sizeof(unsigned char) * len);
   b607a:	f000 fc2b 	bl	b68d4 <malloc>

      if(buffer == NULL) {
   b607e:	4604      	mov	r4, r0
   b6080:	b948      	cbnz	r0, b6096 <_ZN12mDNSResolver8Resolver4readEv+0x92>
        // Out of memory - the packet is probably too big to parse. Probably.
        // Silently bombing out, possibly isn't great, but it'll do for the moment.
		Serial.println("Out of memory");
   b6082:	f003 f987 	bl	b9394 <_Z16_fetch_usbserialv>
   b6086:	4910      	ldr	r1, [pc, #64]	; (b60c8 <_ZN12mDNSResolver8Resolver4readEv+0xc4>)
   b6088:	f002 fbed 	bl	b8866 <_ZN5Print7printlnEPKc>
        return E_MDNS_OUT_OF_MEMORY;
   b608c:	2027      	movs	r0, #39	; 0x27
      return lastResult;
    }
	// Serial.println("Read return 2");
	// init = false;
    return E_MDNS_OK;
  }
   b608e:	b009      	add	sp, #36	; 0x24
   b6090:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b6092:	4621      	mov	r1, r4
   b6094:	e7e4      	b.n	b6060 <_ZN12mDNSResolver8Resolver4readEv+0x5c>
      udp.read(buffer, len);
   b6096:	4601      	mov	r1, r0
   b6098:	4632      	mov	r2, r6
   b609a:	4638      	mov	r0, r7
   b609c:	f000 fdf1 	bl	b6c82 <_ZN3UDP4readEPhj>
	  udp.flush();
   b60a0:	4638      	mov	r0, r7
   b60a2:	f000 fd6d 	bl	b6b80 <_ZN3UDP5flushEv>
      lastResult = Answer::process(buffer, len, cache);
   b60a6:	4a06      	ldr	r2, [pc, #24]	; (b60c0 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b60a8:	4631      	mov	r1, r6
   b60aa:	4620      	mov	r0, r4
   b60ac:	f7ff fdeb 	bl	b5c86 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>
   b60b0:	6028      	str	r0, [r5, #0]
      free(buffer);
   b60b2:	4620      	mov	r0, r4
   b60b4:	f000 fc16 	bl	b68e4 <free>
      return lastResult;
   b60b8:	6828      	ldr	r0, [r5, #0]
   b60ba:	e7e8      	b.n	b608e <_ZN12mDNSResolver8Resolver4readEv+0x8a>
    return E_MDNS_OK;
   b60bc:	2020      	movs	r0, #32
   b60be:	e7e6      	b.n	b608e <_ZN12mDNSResolver8Resolver4readEv+0x8a>
   b60c0:	2003e1d4 	.word	0x2003e1d4
   b60c4:	000bd24b 	.word	0x000bd24b
   b60c8:	000bd25b 	.word	0x000bd25b

000b60cc <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>:

  bool Resolver::isMDNSName(const char* name) {
   b60cc:	b510      	push	{r4, lr}
    int len = strlen(name);
   b60ce:	4608      	mov	r0, r1
  bool Resolver::isMDNSName(const char* name) {
   b60d0:	460c      	mov	r4, r1
    int len = strlen(name);
   b60d2:	f004 fd8a 	bl	babea <strlen>
    int tldLen = strlen(MDNS_TLD);
	
	// Serial.println("LOll");
    if(len < tldLen) {
   b60d6:	2805      	cmp	r0, #5
   b60d8:	d908      	bls.n	b60ec <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x20>
      return false;
    }
	// Serial.println("LOLO");
    return strcmp(name + len - tldLen, MDNS_TLD) == 0;
   b60da:	3806      	subs	r0, #6
   b60dc:	4904      	ldr	r1, [pc, #16]	; (b60f0 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x24>)
   b60de:	4420      	add	r0, r4
   b60e0:	f004 fd53 	bl	bab8a <strcmp>
   b60e4:	fab0 f080 	clz	r0, r0
   b60e8:	0940      	lsrs	r0, r0, #5
  }
   b60ea:	bd10      	pop	{r4, pc}
      return false;
   b60ec:	2000      	movs	r0, #0
   b60ee:	e7fc      	b.n	b60ea <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x1e>
   b60f0:	000bcdb9 	.word	0x000bcdb9

000b60f4 <_ZN12mDNSResolver8Resolver6searchEPKc>:
  IPAddress Resolver::search(const char* name) {
   b60f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b60f8:	460c      	mov	r4, r1
   b60fa:	b0cd      	sub	sp, #308	; 0x134
   b60fc:	4606      	mov	r6, r0
    if(!isMDNSName(name)) {
   b60fe:	4611      	mov	r1, r2
   b6100:	4620      	mov	r0, r4
  IPAddress Resolver::search(const char* name) {
   b6102:	4615      	mov	r5, r2
    if(!isMDNSName(name)) {
   b6104:	f7ff ffe2 	bl	b60cc <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>
   b6108:	b950      	cbnz	r0, b6120 <_ZN12mDNSResolver8Resolver6searchEPKc+0x2c>
	Serial.println("not valid");
   b610a:	f003 f943 	bl	b9394 <_Z16_fetch_usbserialv>
   b610e:	4938      	ldr	r1, [pc, #224]	; (b61f0 <_ZN12mDNSResolver8Resolver6searchEPKc+0xfc>)
   b6110:	f002 fba9 	bl	b8866 <_ZN5Print7printlnEPKc>
    return INADDR_NONE;
   b6114:	f04f 31ff 	mov.w	r1, #4294967295
   b6118:	4630      	mov	r0, r6
   b611a:	f003 f899 	bl	b9250 <_ZN9IPAddressC1Em>
   b611e:	e04d      	b.n	b61bc <_ZN12mDNSResolver8Resolver6searchEPKc+0xc8>
    cache.expire();
   b6120:	4834      	ldr	r0, [pc, #208]	; (b61f4 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
      int index = cache.search(name);
   b6122:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b61f4 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>
    cache.expire();
   b6126:	f7ff feaa 	bl	b5e7e <_ZN12mDNSResolver5Cache6expireEv>
    int attempts = 0;
   b612a:	f04f 0800 	mov.w	r8, #0
      int index = cache.search(name);
   b612e:	4629      	mov	r1, r5
   b6130:	4648      	mov	r0, r9
   b6132:	f7ff fe15 	bl	b5d60 <_ZN12mDNSResolver5Cache6searchEPKc>
      if(index == -1) {
   b6136:	1c43      	adds	r3, r0, #1
      int index = cache.search(name);
   b6138:	4607      	mov	r7, r0
      if(index == -1) {
   b613a:	d11e      	bne.n	b617a <_ZN12mDNSResolver8Resolver6searchEPKc+0x86>
        cache.insert(Response(name, 5));			//ttl = 5
   b613c:	2205      	movs	r2, #5
   b613e:	4629      	mov	r1, r5
   b6140:	a803      	add	r0, sp, #12
   b6142:	f7ff fee7 	bl	b5f14 <_ZN12mDNSResolver8ResponseC1EPKcm>
   b6146:	4648      	mov	r0, r9
   b6148:	a903      	add	r1, sp, #12
   b614a:	f7ff fe6e 	bl	b5e2a <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b614e:	a803      	add	r0, sp, #12
   b6150:	f7ff fefe 	bl	b5f50 <_ZN12mDNSResolver8ResponseD1Ev>
    while(attempts < MDNS_ATTEMPTS) {
   b6154:	f1b8 0f05 	cmp.w	r8, #5
   b6158:	d1e9      	bne.n	b612e <_ZN12mDNSResolver8Resolver6searchEPKc+0x3a>
	udp.leaveMulticast(MDNS_BROADCAST_IP);
   b615a:	23fb      	movs	r3, #251	; 0xfb
   b615c:	9300      	str	r3, [sp, #0]
   b615e:	2300      	movs	r3, #0
   b6160:	461a      	mov	r2, r3
   b6162:	21e0      	movs	r1, #224	; 0xe0
   b6164:	a803      	add	r0, sp, #12
   b6166:	f003 f89f 	bl	b92a8 <_ZN9IPAddressC1Ehhhh>
   b616a:	a903      	add	r1, sp, #12
   b616c:	1d20      	adds	r0, r4, #4
   b616e:	f001 f808 	bl	b7182 <_ZN3UDP14leaveMulticastERK9IPAddress>
	init = false;
   b6172:	2300      	movs	r3, #0
   b6174:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b6178:	e7cc      	b.n	b6114 <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
      } else if(cache[index].resolved) {
   b617a:	4601      	mov	r1, r0
   b617c:	4648      	mov	r0, r9
   b617e:	f7ff fdea 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b6182:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   b6186:	b1eb      	cbz	r3, b61c4 <_ZN12mDNSResolver8Resolver6searchEPKc+0xd0>
		  udp.leaveMulticast(MDNS_BROADCAST_IP);
   b6188:	23fb      	movs	r3, #251	; 0xfb
   b618a:	9300      	str	r3, [sp, #0]
   b618c:	2300      	movs	r3, #0
   b618e:	461a      	mov	r2, r3
   b6190:	21e0      	movs	r1, #224	; 0xe0
   b6192:	a803      	add	r0, sp, #12
   b6194:	f003 f888 	bl	b92a8 <_ZN9IPAddressC1Ehhhh>
   b6198:	a903      	add	r1, sp, #12
   b619a:	1d20      	adds	r0, r4, #4
   b619c:	f000 fff1 	bl	b7182 <_ZN3UDP14leaveMulticastERK9IPAddress>
        return cache[index].ipAddress;
   b61a0:	4639      	mov	r1, r7
   b61a2:	4814      	ldr	r0, [pc, #80]	; (b61f4 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
   b61a4:	f7ff fdd7 	bl	b5d56 <_ZN12mDNSResolver5CacheixEi>
   b61a8:	4634      	mov	r4, r6
   b61aa:	4b13      	ldr	r3, [pc, #76]	; (b61f8 <_ZN12mDNSResolver8Resolver6searchEPKc+0x104>)
   b61ac:	f844 3b04 	str.w	r3, [r4], #4
   b61b0:	f500 7586 	add.w	r5, r0, #268	; 0x10c
   b61b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61b8:	682b      	ldr	r3, [r5, #0]
   b61ba:	7023      	strb	r3, [r4, #0]
  }
   b61bc:	4630      	mov	r0, r6
   b61be:	b04d      	add	sp, #308	; 0x134
   b61c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b61c4:	f000 f878 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
      if(now - timeout > MDNS_RETRY) {
   b61c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b61ca:	1ac3      	subs	r3, r0, r3
   b61cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b61d0:	4607      	mov	r7, r0
   b61d2:	dd06      	ble.n	b61e2 <_ZN12mDNSResolver8Resolver6searchEPKc+0xee>
        query(name);
   b61d4:	4629      	mov	r1, r5
   b61d6:	4620      	mov	r0, r4
   b61d8:	f7ff fef2 	bl	b5fc0 <_ZN12mDNSResolver8Resolver5queryEPKc>
        attempts++;
   b61dc:	f108 0801 	add.w	r8, r8, #1
        timeout = now;
   b61e0:	66e7      	str	r7, [r4, #108]	; 0x6c
      MDNS_RESULT result = read();
   b61e2:	4620      	mov	r0, r4
   b61e4:	f7ff ff0e 	bl	b6004 <_ZN12mDNSResolver8Resolver4readEv>
      if(result != E_MDNS_OK) {
   b61e8:	2820      	cmp	r0, #32
   b61ea:	d0b3      	beq.n	b6154 <_ZN12mDNSResolver8Resolver6searchEPKc+0x60>
   b61ec:	e792      	b.n	b6114 <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
   b61ee:	bf00      	nop
   b61f0:	000bd269 	.word	0x000bd269
   b61f4:	2003e1d4 	.word	0x2003e1d4
   b61f8:	000bd55c 	.word	0x000bd55c

000b61fc <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b61fc:	4801      	ldr	r0, [pc, #4]	; (b6204 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b61fe:	f7ff bd99 	b.w	b5d34 <_ZN12mDNSResolver5CacheC1Ev>
   b6202:	bf00      	nop
   b6204:	2003e1d4 	.word	0x2003e1d4

000b6208 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <netdb_freeaddrinfo+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	689b      	ldr	r3, [r3, #8]
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	00030268 	.word	0x00030268

000b6218 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <netdb_getaddrinfo+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	68db      	ldr	r3, [r3, #12]
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	00030268 	.word	0x00030268

000b6228 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <HAL_Pin_Mode+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	689b      	ldr	r3, [r3, #8]
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	0003022c 	.word	0x0003022c

000b6238 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <HAL_Interrupts_Attach+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	699b      	ldr	r3, [r3, #24]
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	0003022c 	.word	0x0003022c

000b6248 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <HAL_Interrupts_Detach+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	69db      	ldr	r3, [r3, #28]
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	0003022c 	.word	0x0003022c

000b6258 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <if_index_to_name+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	695b      	ldr	r3, [r3, #20]
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	0003026c 	.word	0x0003026c

000b6268 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <if_get_by_index+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	699b      	ldr	r3, [r3, #24]
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	0003026c 	.word	0x0003026c

000b6278 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <if_get_addrs+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	0003026c 	.word	0x0003026c

000b6288 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <if_free_if_addrs+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	0003026c 	.word	0x0003026c

000b6298 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <HAL_RNG_GetRandomNumber+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	685b      	ldr	r3, [r3, #4]
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	00030218 	.word	0x00030218

000b62a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <HAL_Delay_Microseconds+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	68db      	ldr	r3, [r3, #12]
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	00030218 	.word	0x00030218

000b62b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	695b      	ldr	r3, [r3, #20]
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	00030218 	.word	0x00030218

000b62c8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <hal_rtc_time_is_valid+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	00030218 	.word	0x00030218

000b62d8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <hal_rtc_get_time+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	00030218 	.word	0x00030218

000b62e8 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <_open+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	681b      	ldr	r3, [r3, #0]
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	00030284 	.word	0x00030284

000b62f8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <hal_ble_stack_init+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	689b      	ldr	r3, [r3, #8]
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	00030278 	.word	0x00030278

000b6308 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <hal_ble_gap_set_advertising_data+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	00030278 	.word	0x00030278

000b6318 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <hal_ble_gap_set_scan_response_data+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	00030278 	.word	0x00030278

000b6328 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <hal_ble_gap_start_advertising+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	00030278 	.word	0x00030278

000b6338 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6338:	b508      	push	{r3, lr}
   b633a:	4b03      	ldr	r3, [pc, #12]	; (b6348 <hal_ble_gap_disconnect+0x10>)
   b633c:	681b      	ldr	r3, [r3, #0]
   b633e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6342:	9301      	str	r3, [sp, #4]
   b6344:	bd08      	pop	{r3, pc}
   b6346:	0000      	.short	0x0000
   b6348:	00030278 	.word	0x00030278

000b634c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b634c:	b508      	push	{r3, lr}
   b634e:	4b03      	ldr	r3, [pc, #12]	; (b635c <hal_ble_gatt_server_add_service+0x10>)
   b6350:	681b      	ldr	r3, [r3, #0]
   b6352:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6356:	9301      	str	r3, [sp, #4]
   b6358:	bd08      	pop	{r3, pc}
   b635a:	0000      	.short	0x0000
   b635c:	00030278 	.word	0x00030278

000b6360 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b03      	ldr	r3, [pc, #12]	; (b6370 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b636a:	9301      	str	r3, [sp, #4]
   b636c:	bd08      	pop	{r3, pc}
   b636e:	0000      	.short	0x0000
   b6370:	00030278 	.word	0x00030278

000b6374 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b03      	ldr	r3, [pc, #12]	; (b6384 <hal_ble_gatt_client_write_with_response+0x10>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b637e:	9301      	str	r3, [sp, #4]
   b6380:	bd08      	pop	{r3, pc}
   b6382:	0000      	.short	0x0000
   b6384:	00030278 	.word	0x00030278

000b6388 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6388:	b508      	push	{r3, lr}
   b638a:	4b03      	ldr	r3, [pc, #12]	; (b6398 <hal_ble_gatt_client_write_without_response+0x10>)
   b638c:	681b      	ldr	r3, [r3, #0]
   b638e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6392:	9301      	str	r3, [sp, #4]
   b6394:	bd08      	pop	{r3, pc}
   b6396:	0000      	.short	0x0000
   b6398:	00030278 	.word	0x00030278

000b639c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b639c:	b508      	push	{r3, lr}
   b639e:	4b03      	ldr	r3, [pc, #12]	; (b63ac <hal_ble_gatt_server_add_characteristic+0x10>)
   b63a0:	681b      	ldr	r3, [r3, #0]
   b63a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b63a6:	9301      	str	r3, [sp, #4]
   b63a8:	bd08      	pop	{r3, pc}
   b63aa:	0000      	.short	0x0000
   b63ac:	00030278 	.word	0x00030278

000b63b0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b63b0:	b508      	push	{r3, lr}
   b63b2:	4b03      	ldr	r3, [pc, #12]	; (b63c0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b63b4:	681b      	ldr	r3, [r3, #0]
   b63b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b63ba:	9301      	str	r3, [sp, #4]
   b63bc:	bd08      	pop	{r3, pc}
   b63be:	0000      	.short	0x0000
   b63c0:	00030278 	.word	0x00030278

000b63c4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b03      	ldr	r3, [pc, #12]	; (b63d4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b63ce:	9301      	str	r3, [sp, #4]
   b63d0:	bd08      	pop	{r3, pc}
   b63d2:	0000      	.short	0x0000
   b63d4:	00030278 	.word	0x00030278

000b63d8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b63d8:	b508      	push	{r3, lr}
   b63da:	4b03      	ldr	r3, [pc, #12]	; (b63e8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b63dc:	681b      	ldr	r3, [r3, #0]
   b63de:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b63e2:	9301      	str	r3, [sp, #4]
   b63e4:	bd08      	pop	{r3, pc}
   b63e6:	0000      	.short	0x0000
   b63e8:	00030278 	.word	0x00030278

000b63ec <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b63ec:	b508      	push	{r3, lr}
   b63ee:	4b02      	ldr	r3, [pc, #8]	; (b63f8 <os_thread_yield+0xc>)
   b63f0:	681b      	ldr	r3, [r3, #0]
   b63f2:	68db      	ldr	r3, [r3, #12]
   b63f4:	9301      	str	r3, [sp, #4]
   b63f6:	bd08      	pop	{r3, pc}
   b63f8:	00030248 	.word	0x00030248

000b63fc <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b63fc:	b508      	push	{r3, lr}
   b63fe:	4b02      	ldr	r3, [pc, #8]	; (b6408 <os_thread_scheduling+0xc>)
   b6400:	681b      	ldr	r3, [r3, #0]
   b6402:	69db      	ldr	r3, [r3, #28]
   b6404:	9301      	str	r3, [sp, #4]
   b6406:	bd08      	pop	{r3, pc}
   b6408:	00030248 	.word	0x00030248

000b640c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b640c:	b508      	push	{r3, lr}
   b640e:	4b02      	ldr	r3, [pc, #8]	; (b6418 <os_timer_create+0xc>)
   b6410:	681b      	ldr	r3, [r3, #0]
   b6412:	6a1b      	ldr	r3, [r3, #32]
   b6414:	9301      	str	r3, [sp, #4]
   b6416:	bd08      	pop	{r3, pc}
   b6418:	00030248 	.word	0x00030248

000b641c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b641c:	b508      	push	{r3, lr}
   b641e:	4b02      	ldr	r3, [pc, #8]	; (b6428 <os_timer_destroy+0xc>)
   b6420:	681b      	ldr	r3, [r3, #0]
   b6422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6424:	9301      	str	r3, [sp, #4]
   b6426:	bd08      	pop	{r3, pc}
   b6428:	00030248 	.word	0x00030248

000b642c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b642c:	b508      	push	{r3, lr}
   b642e:	4b02      	ldr	r3, [pc, #8]	; (b6438 <os_timer_get_id+0xc>)
   b6430:	681b      	ldr	r3, [r3, #0]
   b6432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6434:	9301      	str	r3, [sp, #4]
   b6436:	bd08      	pop	{r3, pc}
   b6438:	00030248 	.word	0x00030248

000b643c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b643c:	b508      	push	{r3, lr}
   b643e:	4b02      	ldr	r3, [pc, #8]	; (b6448 <os_timer_change+0xc>)
   b6440:	681b      	ldr	r3, [r3, #0]
   b6442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6444:	9301      	str	r3, [sp, #4]
   b6446:	bd08      	pop	{r3, pc}
   b6448:	00030248 	.word	0x00030248

000b644c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b644c:	b508      	push	{r3, lr}
   b644e:	4b02      	ldr	r3, [pc, #8]	; (b6458 <os_mutex_create+0xc>)
   b6450:	681b      	ldr	r3, [r3, #0]
   b6452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6454:	9301      	str	r3, [sp, #4]
   b6456:	bd08      	pop	{r3, pc}
   b6458:	00030248 	.word	0x00030248

000b645c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b645c:	b508      	push	{r3, lr}
   b645e:	4b02      	ldr	r3, [pc, #8]	; (b6468 <os_mutex_lock+0xc>)
   b6460:	681b      	ldr	r3, [r3, #0]
   b6462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6464:	9301      	str	r3, [sp, #4]
   b6466:	bd08      	pop	{r3, pc}
   b6468:	00030248 	.word	0x00030248

000b646c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b646c:	b508      	push	{r3, lr}
   b646e:	4b02      	ldr	r3, [pc, #8]	; (b6478 <os_mutex_unlock+0xc>)
   b6470:	681b      	ldr	r3, [r3, #0]
   b6472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6474:	9301      	str	r3, [sp, #4]
   b6476:	bd08      	pop	{r3, pc}
   b6478:	00030248 	.word	0x00030248

000b647c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b647c:	b508      	push	{r3, lr}
   b647e:	4b02      	ldr	r3, [pc, #8]	; (b6488 <os_mutex_recursive_create+0xc>)
   b6480:	681b      	ldr	r3, [r3, #0]
   b6482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6484:	9301      	str	r3, [sp, #4]
   b6486:	bd08      	pop	{r3, pc}
   b6488:	00030248 	.word	0x00030248

000b648c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b648c:	b508      	push	{r3, lr}
   b648e:	4b02      	ldr	r3, [pc, #8]	; (b6498 <os_mutex_recursive_lock+0xc>)
   b6490:	681b      	ldr	r3, [r3, #0]
   b6492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6494:	9301      	str	r3, [sp, #4]
   b6496:	bd08      	pop	{r3, pc}
   b6498:	00030248 	.word	0x00030248

000b649c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b649c:	b508      	push	{r3, lr}
   b649e:	4b02      	ldr	r3, [pc, #8]	; (b64a8 <os_mutex_recursive_unlock+0xc>)
   b64a0:	681b      	ldr	r3, [r3, #0]
   b64a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b64a4:	9301      	str	r3, [sp, #4]
   b64a6:	bd08      	pop	{r3, pc}
   b64a8:	00030248 	.word	0x00030248

000b64ac <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b64ac:	b508      	push	{r3, lr}
   b64ae:	4b02      	ldr	r3, [pc, #8]	; (b64b8 <os_timer_set_id+0xc>)
   b64b0:	681b      	ldr	r3, [r3, #0]
   b64b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b64b4:	9301      	str	r3, [sp, #4]
   b64b6:	bd08      	pop	{r3, pc}
   b64b8:	00030248 	.word	0x00030248

000b64bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b64bc:	b508      	push	{r3, lr}
   b64be:	4b02      	ldr	r3, [pc, #8]	; (b64c8 <inet_inet_ntop+0xc>)
   b64c0:	681b      	ldr	r3, [r3, #0]
   b64c2:	695b      	ldr	r3, [r3, #20]
   b64c4:	9301      	str	r3, [sp, #4]
   b64c6:	bd08      	pop	{r3, pc}
   b64c8:	00030264 	.word	0x00030264

000b64cc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b64cc:	b508      	push	{r3, lr}
   b64ce:	4b02      	ldr	r3, [pc, #8]	; (b64d8 <inet_htonl+0xc>)
   b64d0:	681b      	ldr	r3, [r3, #0]
   b64d2:	6a1b      	ldr	r3, [r3, #32]
   b64d4:	9301      	str	r3, [sp, #4]
   b64d6:	bd08      	pop	{r3, pc}
   b64d8:	00030264 	.word	0x00030264

000b64dc <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b64dc:	b508      	push	{r3, lr}
   b64de:	4b02      	ldr	r3, [pc, #8]	; (b64e8 <inet_ntohs+0xc>)
   b64e0:	681b      	ldr	r3, [r3, #0]
   b64e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b64e4:	9301      	str	r3, [sp, #4]
   b64e6:	bd08      	pop	{r3, pc}
   b64e8:	00030264 	.word	0x00030264

000b64ec <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b64ec:	b508      	push	{r3, lr}
   b64ee:	4b02      	ldr	r3, [pc, #8]	; (b64f8 <inet_htons+0xc>)
   b64f0:	681b      	ldr	r3, [r3, #0]
   b64f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64f4:	9301      	str	r3, [sp, #4]
   b64f6:	bd08      	pop	{r3, pc}
   b64f8:	00030264 	.word	0x00030264

000b64fc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b64fc:	b508      	push	{r3, lr}
   b64fe:	4b02      	ldr	r3, [pc, #8]	; (b6508 <hal_usart_write+0xc>)
   b6500:	681b      	ldr	r3, [r3, #0]
   b6502:	68db      	ldr	r3, [r3, #12]
   b6504:	9301      	str	r3, [sp, #4]
   b6506:	bd08      	pop	{r3, pc}
   b6508:	0003023c 	.word	0x0003023c

000b650c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b650c:	b508      	push	{r3, lr}
   b650e:	4b02      	ldr	r3, [pc, #8]	; (b6518 <hal_usart_available+0xc>)
   b6510:	681b      	ldr	r3, [r3, #0]
   b6512:	691b      	ldr	r3, [r3, #16]
   b6514:	9301      	str	r3, [sp, #4]
   b6516:	bd08      	pop	{r3, pc}
   b6518:	0003023c 	.word	0x0003023c

000b651c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b651c:	b508      	push	{r3, lr}
   b651e:	4b02      	ldr	r3, [pc, #8]	; (b6528 <hal_usart_read+0xc>)
   b6520:	681b      	ldr	r3, [r3, #0]
   b6522:	695b      	ldr	r3, [r3, #20]
   b6524:	9301      	str	r3, [sp, #4]
   b6526:	bd08      	pop	{r3, pc}
   b6528:	0003023c 	.word	0x0003023c

000b652c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b652c:	b508      	push	{r3, lr}
   b652e:	4b02      	ldr	r3, [pc, #8]	; (b6538 <hal_usart_peek+0xc>)
   b6530:	681b      	ldr	r3, [r3, #0]
   b6532:	699b      	ldr	r3, [r3, #24]
   b6534:	9301      	str	r3, [sp, #4]
   b6536:	bd08      	pop	{r3, pc}
   b6538:	0003023c 	.word	0x0003023c

000b653c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b653c:	b508      	push	{r3, lr}
   b653e:	4b02      	ldr	r3, [pc, #8]	; (b6548 <hal_usart_flush+0xc>)
   b6540:	681b      	ldr	r3, [r3, #0]
   b6542:	69db      	ldr	r3, [r3, #28]
   b6544:	9301      	str	r3, [sp, #4]
   b6546:	bd08      	pop	{r3, pc}
   b6548:	0003023c 	.word	0x0003023c

000b654c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b654c:	b508      	push	{r3, lr}
   b654e:	4b02      	ldr	r3, [pc, #8]	; (b6558 <hal_usart_is_enabled+0xc>)
   b6550:	681b      	ldr	r3, [r3, #0]
   b6552:	6a1b      	ldr	r3, [r3, #32]
   b6554:	9301      	str	r3, [sp, #4]
   b6556:	bd08      	pop	{r3, pc}
   b6558:	0003023c 	.word	0x0003023c

000b655c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b655c:	b508      	push	{r3, lr}
   b655e:	4b02      	ldr	r3, [pc, #8]	; (b6568 <hal_usart_available_data_for_write+0xc>)
   b6560:	681b      	ldr	r3, [r3, #0]
   b6562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6564:	9301      	str	r3, [sp, #4]
   b6566:	bd08      	pop	{r3, pc}
   b6568:	0003023c 	.word	0x0003023c

000b656c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b656c:	b508      	push	{r3, lr}
   b656e:	4b02      	ldr	r3, [pc, #8]	; (b6578 <hal_usart_init_ex+0xc>)
   b6570:	681b      	ldr	r3, [r3, #0]
   b6572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6574:	9301      	str	r3, [sp, #4]
   b6576:	bd08      	pop	{r3, pc}
   b6578:	0003023c 	.word	0x0003023c

000b657c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b657c:	b508      	push	{r3, lr}
   b657e:	4b02      	ldr	r3, [pc, #8]	; (b6588 <hal_i2c_write+0xc>)
   b6580:	681b      	ldr	r3, [r3, #0]
   b6582:	6a1b      	ldr	r3, [r3, #32]
   b6584:	9301      	str	r3, [sp, #4]
   b6586:	bd08      	pop	{r3, pc}
   b6588:	00030228 	.word	0x00030228

000b658c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b658c:	b508      	push	{r3, lr}
   b658e:	4b02      	ldr	r3, [pc, #8]	; (b6598 <hal_i2c_available+0xc>)
   b6590:	681b      	ldr	r3, [r3, #0]
   b6592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6594:	9301      	str	r3, [sp, #4]
   b6596:	bd08      	pop	{r3, pc}
   b6598:	00030228 	.word	0x00030228

000b659c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b659c:	b508      	push	{r3, lr}
   b659e:	4b02      	ldr	r3, [pc, #8]	; (b65a8 <hal_i2c_read+0xc>)
   b65a0:	681b      	ldr	r3, [r3, #0]
   b65a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b65a4:	9301      	str	r3, [sp, #4]
   b65a6:	bd08      	pop	{r3, pc}
   b65a8:	00030228 	.word	0x00030228

000b65ac <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b65ac:	b508      	push	{r3, lr}
   b65ae:	4b02      	ldr	r3, [pc, #8]	; (b65b8 <hal_i2c_peek+0xc>)
   b65b0:	681b      	ldr	r3, [r3, #0]
   b65b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b65b4:	9301      	str	r3, [sp, #4]
   b65b6:	bd08      	pop	{r3, pc}
   b65b8:	00030228 	.word	0x00030228

000b65bc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b65bc:	b508      	push	{r3, lr}
   b65be:	4b02      	ldr	r3, [pc, #8]	; (b65c8 <hal_i2c_flush+0xc>)
   b65c0:	681b      	ldr	r3, [r3, #0]
   b65c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65c4:	9301      	str	r3, [sp, #4]
   b65c6:	bd08      	pop	{r3, pc}
   b65c8:	00030228 	.word	0x00030228

000b65cc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b65cc:	b508      	push	{r3, lr}
   b65ce:	4b02      	ldr	r3, [pc, #8]	; (b65d8 <hal_i2c_is_enabled+0xc>)
   b65d0:	681b      	ldr	r3, [r3, #0]
   b65d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b65d4:	9301      	str	r3, [sp, #4]
   b65d6:	bd08      	pop	{r3, pc}
   b65d8:	00030228 	.word	0x00030228

000b65dc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b65dc:	b508      	push	{r3, lr}
   b65de:	4b02      	ldr	r3, [pc, #8]	; (b65e8 <hal_i2c_init+0xc>)
   b65e0:	681b      	ldr	r3, [r3, #0]
   b65e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65e4:	9301      	str	r3, [sp, #4]
   b65e6:	bd08      	pop	{r3, pc}
   b65e8:	00030228 	.word	0x00030228

000b65ec <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b65ec:	b508      	push	{r3, lr}
   b65ee:	4b02      	ldr	r3, [pc, #8]	; (b65f8 <sock_bind+0xc>)
   b65f0:	681b      	ldr	r3, [r3, #0]
   b65f2:	685b      	ldr	r3, [r3, #4]
   b65f4:	9301      	str	r3, [sp, #4]
   b65f6:	bd08      	pop	{r3, pc}
   b65f8:	00030238 	.word	0x00030238

000b65fc <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b65fc:	b508      	push	{r3, lr}
   b65fe:	4b02      	ldr	r3, [pc, #8]	; (b6608 <sock_setsockopt+0xc>)
   b6600:	681b      	ldr	r3, [r3, #0]
   b6602:	699b      	ldr	r3, [r3, #24]
   b6604:	9301      	str	r3, [sp, #4]
   b6606:	bd08      	pop	{r3, pc}
   b6608:	00030238 	.word	0x00030238

000b660c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b660c:	b508      	push	{r3, lr}
   b660e:	4b02      	ldr	r3, [pc, #8]	; (b6618 <sock_close+0xc>)
   b6610:	681b      	ldr	r3, [r3, #0]
   b6612:	69db      	ldr	r3, [r3, #28]
   b6614:	9301      	str	r3, [sp, #4]
   b6616:	bd08      	pop	{r3, pc}
   b6618:	00030238 	.word	0x00030238

000b661c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b661c:	b508      	push	{r3, lr}
   b661e:	4b02      	ldr	r3, [pc, #8]	; (b6628 <sock_connect+0xc>)
   b6620:	681b      	ldr	r3, [r3, #0]
   b6622:	6a1b      	ldr	r3, [r3, #32]
   b6624:	9301      	str	r3, [sp, #4]
   b6626:	bd08      	pop	{r3, pc}
   b6628:	00030238 	.word	0x00030238

000b662c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b662c:	b508      	push	{r3, lr}
   b662e:	4b02      	ldr	r3, [pc, #8]	; (b6638 <sock_recv+0xc>)
   b6630:	681b      	ldr	r3, [r3, #0]
   b6632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6634:	9301      	str	r3, [sp, #4]
   b6636:	bd08      	pop	{r3, pc}
   b6638:	00030238 	.word	0x00030238

000b663c <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b663c:	b508      	push	{r3, lr}
   b663e:	4b02      	ldr	r3, [pc, #8]	; (b6648 <sock_recvfrom+0xc>)
   b6640:	681b      	ldr	r3, [r3, #0]
   b6642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6644:	9301      	str	r3, [sp, #4]
   b6646:	bd08      	pop	{r3, pc}
   b6648:	00030238 	.word	0x00030238

000b664c <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b664c:	b508      	push	{r3, lr}
   b664e:	4b02      	ldr	r3, [pc, #8]	; (b6658 <sock_send+0xc>)
   b6650:	681b      	ldr	r3, [r3, #0]
   b6652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6654:	9301      	str	r3, [sp, #4]
   b6656:	bd08      	pop	{r3, pc}
   b6658:	00030238 	.word	0x00030238

000b665c <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b665c:	b508      	push	{r3, lr}
   b665e:	4b02      	ldr	r3, [pc, #8]	; (b6668 <sock_sendto+0xc>)
   b6660:	681b      	ldr	r3, [r3, #0]
   b6662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6664:	9301      	str	r3, [sp, #4]
   b6666:	bd08      	pop	{r3, pc}
   b6668:	00030238 	.word	0x00030238

000b666c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b666c:	b508      	push	{r3, lr}
   b666e:	4b02      	ldr	r3, [pc, #8]	; (b6678 <sock_socket+0xc>)
   b6670:	681b      	ldr	r3, [r3, #0]
   b6672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6674:	9301      	str	r3, [sp, #4]
   b6676:	bd08      	pop	{r3, pc}
   b6678:	00030238 	.word	0x00030238

000b667c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b667c:	b508      	push	{r3, lr}
   b667e:	4b02      	ldr	r3, [pc, #8]	; (b6688 <hal_spi_init+0xc>)
   b6680:	681b      	ldr	r3, [r3, #0]
   b6682:	69db      	ldr	r3, [r3, #28]
   b6684:	9301      	str	r3, [sp, #4]
   b6686:	bd08      	pop	{r3, pc}
   b6688:	00030230 	.word	0x00030230

000b668c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b668c:	b508      	push	{r3, lr}
   b668e:	4b02      	ldr	r3, [pc, #8]	; (b6698 <hal_spi_is_enabled+0xc>)
   b6690:	681b      	ldr	r3, [r3, #0]
   b6692:	6a1b      	ldr	r3, [r3, #32]
   b6694:	9301      	str	r3, [sp, #4]
   b6696:	bd08      	pop	{r3, pc}
   b6698:	00030230 	.word	0x00030230

000b669c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b669c:	b508      	push	{r3, lr}
   b669e:	4b02      	ldr	r3, [pc, #8]	; (b66a8 <HAL_USB_USART_Init+0xc>)
   b66a0:	681b      	ldr	r3, [r3, #0]
   b66a2:	681b      	ldr	r3, [r3, #0]
   b66a4:	9301      	str	r3, [sp, #4]
   b66a6:	bd08      	pop	{r3, pc}
   b66a8:	0003024c 	.word	0x0003024c

000b66ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b66ac:	b508      	push	{r3, lr}
   b66ae:	4b02      	ldr	r3, [pc, #8]	; (b66b8 <HAL_USB_USART_Available_Data+0xc>)
   b66b0:	681b      	ldr	r3, [r3, #0]
   b66b2:	691b      	ldr	r3, [r3, #16]
   b66b4:	9301      	str	r3, [sp, #4]
   b66b6:	bd08      	pop	{r3, pc}
   b66b8:	0003024c 	.word	0x0003024c

000b66bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b66bc:	b508      	push	{r3, lr}
   b66be:	4b02      	ldr	r3, [pc, #8]	; (b66c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b66c0:	681b      	ldr	r3, [r3, #0]
   b66c2:	695b      	ldr	r3, [r3, #20]
   b66c4:	9301      	str	r3, [sp, #4]
   b66c6:	bd08      	pop	{r3, pc}
   b66c8:	0003024c 	.word	0x0003024c

000b66cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b66cc:	b508      	push	{r3, lr}
   b66ce:	4b02      	ldr	r3, [pc, #8]	; (b66d8 <HAL_USB_USART_Receive_Data+0xc>)
   b66d0:	681b      	ldr	r3, [r3, #0]
   b66d2:	699b      	ldr	r3, [r3, #24]
   b66d4:	9301      	str	r3, [sp, #4]
   b66d6:	bd08      	pop	{r3, pc}
   b66d8:	0003024c 	.word	0x0003024c

000b66dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b66dc:	b508      	push	{r3, lr}
   b66de:	4b02      	ldr	r3, [pc, #8]	; (b66e8 <HAL_USB_USART_Send_Data+0xc>)
   b66e0:	681b      	ldr	r3, [r3, #0]
   b66e2:	69db      	ldr	r3, [r3, #28]
   b66e4:	9301      	str	r3, [sp, #4]
   b66e6:	bd08      	pop	{r3, pc}
   b66e8:	0003024c 	.word	0x0003024c

000b66ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b66ec:	b508      	push	{r3, lr}
   b66ee:	4b02      	ldr	r3, [pc, #8]	; (b66f8 <HAL_USB_USART_Flush_Data+0xc>)
   b66f0:	681b      	ldr	r3, [r3, #0]
   b66f2:	6a1b      	ldr	r3, [r3, #32]
   b66f4:	9301      	str	r3, [sp, #4]
   b66f6:	bd08      	pop	{r3, pc}
   b66f8:	0003024c 	.word	0x0003024c

000b66fc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b66fc:	b508      	push	{r3, lr}
   b66fe:	4b02      	ldr	r3, [pc, #8]	; (b6708 <panic_+0xc>)
   b6700:	681b      	ldr	r3, [r3, #0]
   b6702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6704:	9301      	str	r3, [sp, #4]
   b6706:	bd08      	pop	{r3, pc}
   b6708:	00030260 	.word	0x00030260

000b670c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b670c:	b508      	push	{r3, lr}
   b670e:	4b02      	ldr	r3, [pc, #8]	; (b6718 <log_message+0xc>)
   b6710:	681b      	ldr	r3, [r3, #0]
   b6712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6714:	9301      	str	r3, [sp, #4]
   b6716:	bd08      	pop	{r3, pc}
   b6718:	00030260 	.word	0x00030260

000b671c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b671c:	b508      	push	{r3, lr}
   b671e:	4b02      	ldr	r3, [pc, #8]	; (b6728 <system_mode+0xc>)
   b6720:	681b      	ldr	r3, [r3, #0]
   b6722:	681b      	ldr	r3, [r3, #0]
   b6724:	9301      	str	r3, [sp, #4]
   b6726:	bd08      	pop	{r3, pc}
   b6728:	00030220 	.word	0x00030220

000b672c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b672c:	b508      	push	{r3, lr}
   b672e:	4b02      	ldr	r3, [pc, #8]	; (b6738 <set_system_mode+0xc>)
   b6730:	681b      	ldr	r3, [r3, #0]
   b6732:	685b      	ldr	r3, [r3, #4]
   b6734:	9301      	str	r3, [sp, #4]
   b6736:	bd08      	pop	{r3, pc}
   b6738:	00030220 	.word	0x00030220

000b673c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b673c:	b508      	push	{r3, lr}
   b673e:	4b02      	ldr	r3, [pc, #8]	; (b6748 <system_thread_set_state+0xc>)
   b6740:	681b      	ldr	r3, [r3, #0]
   b6742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6744:	9301      	str	r3, [sp, #4]
   b6746:	bd08      	pop	{r3, pc}
   b6748:	00030220 	.word	0x00030220

000b674c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b674c:	b508      	push	{r3, lr}
   b674e:	4b02      	ldr	r3, [pc, #8]	; (b6758 <application_thread_current+0xc>)
   b6750:	681b      	ldr	r3, [r3, #0]
   b6752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6754:	9301      	str	r3, [sp, #4]
   b6756:	bd08      	pop	{r3, pc}
   b6758:	00030220 	.word	0x00030220

000b675c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b675c:	b508      	push	{r3, lr}
   b675e:	4b02      	ldr	r3, [pc, #8]	; (b6768 <application_thread_invoke+0xc>)
   b6760:	681b      	ldr	r3, [r3, #0]
   b6762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6764:	9301      	str	r3, [sp, #4]
   b6766:	bd08      	pop	{r3, pc}
   b6768:	00030220 	.word	0x00030220

000b676c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b676c:	b508      	push	{r3, lr}
   b676e:	4b02      	ldr	r3, [pc, #8]	; (b6778 <system_thread_get_state+0xc>)
   b6770:	681b      	ldr	r3, [r3, #0]
   b6772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6774:	9301      	str	r3, [sp, #4]
   b6776:	bd08      	pop	{r3, pc}
   b6778:	00030220 	.word	0x00030220

000b677c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b677c:	b508      	push	{r3, lr}
   b677e:	4b03      	ldr	r3, [pc, #12]	; (b678c <system_ctrl_set_app_request_handler+0x10>)
   b6780:	681b      	ldr	r3, [r3, #0]
   b6782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6786:	9301      	str	r3, [sp, #4]
   b6788:	bd08      	pop	{r3, pc}
   b678a:	0000      	.short	0x0000
   b678c:	00030220 	.word	0x00030220

000b6790 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b03      	ldr	r3, [pc, #12]	; (b67a0 <system_ctrl_set_result+0x10>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b679a:	9301      	str	r3, [sp, #4]
   b679c:	bd08      	pop	{r3, pc}
   b679e:	0000      	.short	0x0000
   b67a0:	00030220 	.word	0x00030220

000b67a4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b67a4:	b508      	push	{r3, lr}
   b67a6:	4b02      	ldr	r3, [pc, #8]	; (b67b0 <network_connect+0xc>)
   b67a8:	681b      	ldr	r3, [r3, #0]
   b67aa:	685b      	ldr	r3, [r3, #4]
   b67ac:	9301      	str	r3, [sp, #4]
   b67ae:	bd08      	pop	{r3, pc}
   b67b0:	00030240 	.word	0x00030240

000b67b4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b67b4:	b508      	push	{r3, lr}
   b67b6:	4b02      	ldr	r3, [pc, #8]	; (b67c0 <network_connecting+0xc>)
   b67b8:	681b      	ldr	r3, [r3, #0]
   b67ba:	689b      	ldr	r3, [r3, #8]
   b67bc:	9301      	str	r3, [sp, #4]
   b67be:	bd08      	pop	{r3, pc}
   b67c0:	00030240 	.word	0x00030240

000b67c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b67c4:	b508      	push	{r3, lr}
   b67c6:	4b02      	ldr	r3, [pc, #8]	; (b67d0 <network_disconnect+0xc>)
   b67c8:	681b      	ldr	r3, [r3, #0]
   b67ca:	68db      	ldr	r3, [r3, #12]
   b67cc:	9301      	str	r3, [sp, #4]
   b67ce:	bd08      	pop	{r3, pc}
   b67d0:	00030240 	.word	0x00030240

000b67d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b67d4:	b508      	push	{r3, lr}
   b67d6:	4b02      	ldr	r3, [pc, #8]	; (b67e0 <network_ready+0xc>)
   b67d8:	681b      	ldr	r3, [r3, #0]
   b67da:	691b      	ldr	r3, [r3, #16]
   b67dc:	9301      	str	r3, [sp, #4]
   b67de:	bd08      	pop	{r3, pc}
   b67e0:	00030240 	.word	0x00030240

000b67e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b67e4:	b508      	push	{r3, lr}
   b67e6:	4b02      	ldr	r3, [pc, #8]	; (b67f0 <network_on+0xc>)
   b67e8:	681b      	ldr	r3, [r3, #0]
   b67ea:	695b      	ldr	r3, [r3, #20]
   b67ec:	9301      	str	r3, [sp, #4]
   b67ee:	bd08      	pop	{r3, pc}
   b67f0:	00030240 	.word	0x00030240

000b67f4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b67f4:	b508      	push	{r3, lr}
   b67f6:	4b02      	ldr	r3, [pc, #8]	; (b6800 <network_off+0xc>)
   b67f8:	681b      	ldr	r3, [r3, #0]
   b67fa:	699b      	ldr	r3, [r3, #24]
   b67fc:	9301      	str	r3, [sp, #4]
   b67fe:	bd08      	pop	{r3, pc}
   b6800:	00030240 	.word	0x00030240

000b6804 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6804:	b508      	push	{r3, lr}
   b6806:	4b02      	ldr	r3, [pc, #8]	; (b6810 <network_listen+0xc>)
   b6808:	681b      	ldr	r3, [r3, #0]
   b680a:	69db      	ldr	r3, [r3, #28]
   b680c:	9301      	str	r3, [sp, #4]
   b680e:	bd08      	pop	{r3, pc}
   b6810:	00030240 	.word	0x00030240

000b6814 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6814:	b508      	push	{r3, lr}
   b6816:	4b02      	ldr	r3, [pc, #8]	; (b6820 <network_listening+0xc>)
   b6818:	681b      	ldr	r3, [r3, #0]
   b681a:	6a1b      	ldr	r3, [r3, #32]
   b681c:	9301      	str	r3, [sp, #4]
   b681e:	bd08      	pop	{r3, pc}
   b6820:	00030240 	.word	0x00030240

000b6824 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6824:	b508      	push	{r3, lr}
   b6826:	4b02      	ldr	r3, [pc, #8]	; (b6830 <network_set_listen_timeout+0xc>)
   b6828:	681b      	ldr	r3, [r3, #0]
   b682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b682c:	9301      	str	r3, [sp, #4]
   b682e:	bd08      	pop	{r3, pc}
   b6830:	00030240 	.word	0x00030240

000b6834 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6834:	b508      	push	{r3, lr}
   b6836:	4b02      	ldr	r3, [pc, #8]	; (b6840 <network_get_listen_timeout+0xc>)
   b6838:	681b      	ldr	r3, [r3, #0]
   b683a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b683c:	9301      	str	r3, [sp, #4]
   b683e:	bd08      	pop	{r3, pc}
   b6840:	00030240 	.word	0x00030240

000b6844 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6844:	b508      	push	{r3, lr}
   b6846:	4b02      	ldr	r3, [pc, #8]	; (b6850 <network_is_on+0xc>)
   b6848:	681b      	ldr	r3, [r3, #0]
   b684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b684c:	9301      	str	r3, [sp, #4]
   b684e:	bd08      	pop	{r3, pc}
   b6850:	00030240 	.word	0x00030240

000b6854 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6854:	b508      	push	{r3, lr}
   b6856:	4b02      	ldr	r3, [pc, #8]	; (b6860 <network_is_off+0xc>)
   b6858:	681b      	ldr	r3, [r3, #0]
   b685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b685c:	9301      	str	r3, [sp, #4]
   b685e:	bd08      	pop	{r3, pc}
   b6860:	00030240 	.word	0x00030240

000b6864 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b6864:	b508      	push	{r3, lr}
   b6866:	4b02      	ldr	r3, [pc, #8]	; (b6870 <spark_variable+0xc>)
   b6868:	681b      	ldr	r3, [r3, #0]
   b686a:	681b      	ldr	r3, [r3, #0]
   b686c:	9301      	str	r3, [sp, #4]
   b686e:	bd08      	pop	{r3, pc}
   b6870:	00030244 	.word	0x00030244

000b6874 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6874:	b508      	push	{r3, lr}
   b6876:	4b02      	ldr	r3, [pc, #8]	; (b6880 <spark_process+0xc>)
   b6878:	681b      	ldr	r3, [r3, #0]
   b687a:	689b      	ldr	r3, [r3, #8]
   b687c:	9301      	str	r3, [sp, #4]
   b687e:	bd08      	pop	{r3, pc}
   b6880:	00030244 	.word	0x00030244

000b6884 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6884:	b508      	push	{r3, lr}
   b6886:	4b02      	ldr	r3, [pc, #8]	; (b6890 <spark_cloud_flag_connected+0xc>)
   b6888:	681b      	ldr	r3, [r3, #0]
   b688a:	695b      	ldr	r3, [r3, #20]
   b688c:	9301      	str	r3, [sp, #4]
   b688e:	bd08      	pop	{r3, pc}
   b6890:	00030244 	.word	0x00030244

000b6894 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6894:	b508      	push	{r3, lr}
   b6896:	4b02      	ldr	r3, [pc, #8]	; (b68a0 <spark_send_event+0xc>)
   b6898:	681b      	ldr	r3, [r3, #0]
   b689a:	6a1b      	ldr	r3, [r3, #32]
   b689c:	9301      	str	r3, [sp, #4]
   b689e:	bd08      	pop	{r3, pc}
   b68a0:	00030244 	.word	0x00030244

000b68a4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b68a4:	b508      	push	{r3, lr}
   b68a6:	4b02      	ldr	r3, [pc, #8]	; (b68b0 <spark_subscribe+0xc>)
   b68a8:	681b      	ldr	r3, [r3, #0]
   b68aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b68ac:	9301      	str	r3, [sp, #4]
   b68ae:	bd08      	pop	{r3, pc}
   b68b0:	00030244 	.word	0x00030244

000b68b4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b68b4:	b508      	push	{r3, lr}
   b68b6:	4b02      	ldr	r3, [pc, #8]	; (b68c0 <spark_sync_time_pending+0xc>)
   b68b8:	681b      	ldr	r3, [r3, #0]
   b68ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b68bc:	9301      	str	r3, [sp, #4]
   b68be:	bd08      	pop	{r3, pc}
   b68c0:	00030244 	.word	0x00030244

000b68c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b68c4:	b508      	push	{r3, lr}
   b68c6:	4b02      	ldr	r3, [pc, #8]	; (b68d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b68c8:	681b      	ldr	r3, [r3, #0]
   b68ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b68cc:	9301      	str	r3, [sp, #4]
   b68ce:	bd08      	pop	{r3, pc}
   b68d0:	00030244 	.word	0x00030244

000b68d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b68d4:	b508      	push	{r3, lr}
   b68d6:	4b02      	ldr	r3, [pc, #8]	; (b68e0 <malloc+0xc>)
   b68d8:	681b      	ldr	r3, [r3, #0]
   b68da:	681b      	ldr	r3, [r3, #0]
   b68dc:	9301      	str	r3, [sp, #4]
   b68de:	bd08      	pop	{r3, pc}
   b68e0:	0003021c 	.word	0x0003021c

000b68e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b68e4:	b508      	push	{r3, lr}
   b68e6:	4b02      	ldr	r3, [pc, #8]	; (b68f0 <free+0xc>)
   b68e8:	681b      	ldr	r3, [r3, #0]
   b68ea:	685b      	ldr	r3, [r3, #4]
   b68ec:	9301      	str	r3, [sp, #4]
   b68ee:	bd08      	pop	{r3, pc}
   b68f0:	0003021c 	.word	0x0003021c

000b68f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b68f4:	b508      	push	{r3, lr}
   b68f6:	4b02      	ldr	r3, [pc, #8]	; (b6900 <realloc+0xc>)
   b68f8:	681b      	ldr	r3, [r3, #0]
   b68fa:	689b      	ldr	r3, [r3, #8]
   b68fc:	9301      	str	r3, [sp, #4]
   b68fe:	bd08      	pop	{r3, pc}
   b6900:	0003021c 	.word	0x0003021c

000b6904 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6904:	b508      	push	{r3, lr}
   b6906:	4b02      	ldr	r3, [pc, #8]	; (b6910 <sprintf+0xc>)
   b6908:	681b      	ldr	r3, [r3, #0]
   b690a:	68db      	ldr	r3, [r3, #12]
   b690c:	9301      	str	r3, [sp, #4]
   b690e:	bd08      	pop	{r3, pc}
   b6910:	0003021c 	.word	0x0003021c

000b6914 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6914:	b508      	push	{r3, lr}
   b6916:	4b02      	ldr	r3, [pc, #8]	; (b6920 <sscanf+0xc>)
   b6918:	681b      	ldr	r3, [r3, #0]
   b691a:	695b      	ldr	r3, [r3, #20]
   b691c:	9301      	str	r3, [sp, #4]
   b691e:	bd08      	pop	{r3, pc}
   b6920:	0003021c 	.word	0x0003021c

000b6924 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6924:	b508      	push	{r3, lr}
   b6926:	4b02      	ldr	r3, [pc, #8]	; (b6930 <vsnprintf+0xc>)
   b6928:	681b      	ldr	r3, [r3, #0]
   b692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b692c:	9301      	str	r3, [sp, #4]
   b692e:	bd08      	pop	{r3, pc}
   b6930:	0003021c 	.word	0x0003021c

000b6934 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6934:	b508      	push	{r3, lr}
   b6936:	4b02      	ldr	r3, [pc, #8]	; (b6940 <abort+0xc>)
   b6938:	681b      	ldr	r3, [r3, #0]
   b693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b693c:	9301      	str	r3, [sp, #4]
   b693e:	bd08      	pop	{r3, pc}
   b6940:	0003021c 	.word	0x0003021c

000b6944 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6944:	b508      	push	{r3, lr}
   b6946:	4b02      	ldr	r3, [pc, #8]	; (b6950 <_malloc_r+0xc>)
   b6948:	681b      	ldr	r3, [r3, #0]
   b694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b694c:	9301      	str	r3, [sp, #4]
   b694e:	bd08      	pop	{r3, pc}
   b6950:	0003021c 	.word	0x0003021c

000b6954 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6954:	b508      	push	{r3, lr}
   b6956:	4b02      	ldr	r3, [pc, #8]	; (b6960 <__errno+0xc>)
   b6958:	681b      	ldr	r3, [r3, #0]
   b695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b695c:	9301      	str	r3, [sp, #4]
   b695e:	bd08      	pop	{r3, pc}
   b6960:	0003021c 	.word	0x0003021c

000b6964 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6964:	b508      	push	{r3, lr}
   b6966:	4b02      	ldr	r3, [pc, #8]	; (b6970 <__assert_func+0xc>)
   b6968:	681b      	ldr	r3, [r3, #0]
   b696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b696c:	9301      	str	r3, [sp, #4]
   b696e:	bd08      	pop	{r3, pc}
   b6970:	0003021c 	.word	0x0003021c

000b6974 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6974:	b508      	push	{r3, lr}
   b6976:	4b02      	ldr	r3, [pc, #8]	; (b6980 <newlib_impure_ptr_callback+0xc>)
   b6978:	681b      	ldr	r3, [r3, #0]
   b697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b697c:	9301      	str	r3, [sp, #4]
   b697e:	bd08      	pop	{r3, pc}
   b6980:	0003021c 	.word	0x0003021c

000b6984 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6984:	b508      	push	{r3, lr}
   b6986:	4b02      	ldr	r3, [pc, #8]	; (b6990 <localtime_r+0xc>)
   b6988:	681b      	ldr	r3, [r3, #0]
   b698a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b698c:	9301      	str	r3, [sp, #4]
   b698e:	bd08      	pop	{r3, pc}
   b6990:	0003021c 	.word	0x0003021c

000b6994 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6994:	2200      	movs	r2, #0
   b6996:	6840      	ldr	r0, [r0, #4]
   b6998:	4611      	mov	r1, r2
   b699a:	f7ff bf3b 	b.w	b6814 <network_listening>

000b699e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b699e:	2200      	movs	r2, #0
   b69a0:	6840      	ldr	r0, [r0, #4]
   b69a2:	4611      	mov	r1, r2
   b69a4:	f7ff bf46 	b.w	b6834 <network_get_listen_timeout>

000b69a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b69a8:	6840      	ldr	r0, [r0, #4]
   b69aa:	2200      	movs	r2, #0
   b69ac:	f7ff bf3a 	b.w	b6824 <network_set_listen_timeout>

000b69b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b69b0:	6840      	ldr	r0, [r0, #4]
   b69b2:	2200      	movs	r2, #0
   b69b4:	f081 0101 	eor.w	r1, r1, #1
   b69b8:	f7ff bf24 	b.w	b6804 <network_listen>

000b69bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b69bc:	2300      	movs	r3, #0
   b69be:	6840      	ldr	r0, [r0, #4]
   b69c0:	461a      	mov	r2, r3
   b69c2:	4619      	mov	r1, r3
   b69c4:	f7ff bf16 	b.w	b67f4 <network_off>

000b69c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b69c8:	2300      	movs	r3, #0
   b69ca:	6840      	ldr	r0, [r0, #4]
   b69cc:	461a      	mov	r2, r3
   b69ce:	4619      	mov	r1, r3
   b69d0:	f7ff bf08 	b.w	b67e4 <network_on>

000b69d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b69d4:	2200      	movs	r2, #0
   b69d6:	6840      	ldr	r0, [r0, #4]
   b69d8:	4611      	mov	r1, r2
   b69da:	f7ff befb 	b.w	b67d4 <network_ready>

000b69de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b69de:	2200      	movs	r2, #0
   b69e0:	6840      	ldr	r0, [r0, #4]
   b69e2:	4611      	mov	r1, r2
   b69e4:	f7ff bee6 	b.w	b67b4 <network_connecting>

000b69e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b69e8:	6840      	ldr	r0, [r0, #4]
   b69ea:	2200      	movs	r2, #0
   b69ec:	2102      	movs	r1, #2
   b69ee:	f7ff bee9 	b.w	b67c4 <network_disconnect>

000b69f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b69f2:	2300      	movs	r3, #0
   b69f4:	6840      	ldr	r0, [r0, #4]
   b69f6:	461a      	mov	r2, r3
   b69f8:	f7ff bed4 	b.w	b67a4 <network_connect>

000b69fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b69fc:	4b02      	ldr	r3, [pc, #8]	; (b6a08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b69fe:	2203      	movs	r2, #3
   b6a00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6a02:	4a02      	ldr	r2, [pc, #8]	; (b6a0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6a04:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6a06:	4770      	bx	lr
   b6a08:	2003e668 	.word	0x2003e668
   b6a0c:	000bd27c 	.word	0x000bd27c

000b6a10 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6a10:	b510      	push	{r4, lr}
   b6a12:	4604      	mov	r4, r0
   b6a14:	4608      	mov	r0, r1
{
    _spi = spi;
   b6a16:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6a18:	f7ff fe30 	bl	b667c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6a1c:	2300      	movs	r3, #0
   b6a1e:	6063      	str	r3, [r4, #4]
}
   b6a20:	4620      	mov	r0, r4
   b6a22:	bd10      	pop	{r4, pc}

000b6a24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6a24:	4b05      	ldr	r3, [pc, #20]	; (b6a3c <_GLOBAL__sub_I_System+0x18>)
   b6a26:	2202      	movs	r2, #2
   b6a28:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6a2a:	4b05      	ldr	r3, [pc, #20]	; (b6a40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6a2c:	4a05      	ldr	r2, [pc, #20]	; (b6a44 <_GLOBAL__sub_I_System+0x20>)
   b6a2e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6a30:	2000      	movs	r0, #0
   b6a32:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6a36:	f7ff be79 	b.w	b672c <set_system_mode>
   b6a3a:	bf00      	nop
   b6a3c:	2003e67c 	.word	0x2003e67c
   b6a40:	2003e670 	.word	0x2003e670
   b6a44:	ffff0000 	.word	0xffff0000

000b6a48 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b6a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b6a4c:	1e93      	subs	r3, r2, #2
{
   b6a4e:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b6a50:	2b22      	cmp	r3, #34	; 0x22
   b6a52:	f04f 0300 	mov.w	r3, #0
{
   b6a56:	460d      	mov	r5, r1
   b6a58:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b6a5a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b6a5e:	d927      	bls.n	b6ab0 <ltoa+0x68>

      if (10 == base && N < 0L)
   b6a60:	2800      	cmp	r0, #0
   b6a62:	da2a      	bge.n	b6aba <ltoa+0x72>
      {
            *head++ = '-';
   b6a64:	462e      	mov	r6, r5
   b6a66:	232d      	movs	r3, #45	; 0x2d
   b6a68:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b6a6c:	4240      	negs	r0, r0
   b6a6e:	240a      	movs	r4, #10
      *tail-- = '\0';
   b6a70:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b6a74:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b6a78:	4622      	mov	r2, r4
   b6a7a:	4601      	mov	r1, r0
   b6a7c:	a801      	add	r0, sp, #4
   b6a7e:	f003 fff2 	bl	baa66 <ldiv>
   b6a82:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b6a84:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b6a86:	2b09      	cmp	r3, #9
   b6a88:	bfcc      	ite	gt
   b6a8a:	2237      	movgt	r2, #55	; 0x37
   b6a8c:	2230      	movle	r2, #48	; 0x30
   b6a8e:	fa52 f383 	uxtab	r3, r2, r3
   b6a92:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b6a96:	f108 0801 	add.w	r8, r8, #1
   b6a9a:	2800      	cmp	r0, #0
   b6a9c:	d1ec      	bne.n	b6a78 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b6a9e:	4642      	mov	r2, r8
   b6aa0:	1c79      	adds	r1, r7, #1
   b6aa2:	4630      	mov	r0, r6
   b6aa4:	f004 f803 	bl	baaae <memcpy>
      return str;
}
   b6aa8:	4628      	mov	r0, r5
   b6aaa:	b00c      	add	sp, #48	; 0x30
   b6aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b6ab0:	2a0a      	cmp	r2, #10
   b6ab2:	d0d5      	beq.n	b6a60 <ltoa+0x18>
      if (uarg)
   b6ab4:	b118      	cbz	r0, b6abe <ltoa+0x76>
   b6ab6:	462e      	mov	r6, r5
   b6ab8:	e7da      	b.n	b6a70 <ltoa+0x28>
   b6aba:	240a      	movs	r4, #10
   b6abc:	e7fa      	b.n	b6ab4 <ltoa+0x6c>
      else  *tail-- = '0';
   b6abe:	2330      	movs	r3, #48	; 0x30
   b6ac0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b6ac4:	462e      	mov	r6, r5
   b6ac6:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b6aca:	f04f 0802 	mov.w	r8, #2
   b6ace:	e7e6      	b.n	b6a9e <ltoa+0x56>

000b6ad0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b6ad0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b6ad2:	6804      	ldr	r4, [r0, #0]
   b6ad4:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b6ad6:	46a4      	mov	ip, r4
    }
   b6ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b6adc:	4760      	bx	ip

000b6ade <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b6ade:	6803      	ldr	r3, [r0, #0]
   b6ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6ae2:	4718      	bx	r3

000b6ae4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b6ae4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b6ae6:	4770      	bx	lr

000b6ae8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b6ae8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b6aea:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b6aec:	1a10      	subs	r0, r2, r0
   b6aee:	4770      	bx	lr

000b6af0 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b6af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6af2:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b6af4:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6af6:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6af8:	4b0c      	ldr	r3, [pc, #48]	; (b6b2c <_ZN3UDP9endPacketEv+0x3c>)
   b6afa:	9302      	str	r3, [sp, #8]
   b6afc:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b6b00:	4604      	mov	r4, r0
   b6b02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6b04:	ad03      	add	r5, sp, #12
   b6b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6b08:	6833      	ldr	r3, [r6, #0]
   b6b0a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6b0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b6b0e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b6b10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b6b12:	9300      	str	r3, [sp, #0]
   b6b14:	4620      	mov	r0, r4
   b6b16:	ab02      	add	r3, sp, #8
   b6b18:	47b8      	blx	r7
    flush(); // wait for send to complete
   b6b1a:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b6b1c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b6b1e:	69db      	ldr	r3, [r3, #28]
   b6b20:	4620      	mov	r0, r4
   b6b22:	4798      	blx	r3
    return result;
}
   b6b24:	4628      	mov	r0, r5
   b6b26:	b009      	add	sp, #36	; 0x24
   b6b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6b2a:	bf00      	nop
   b6b2c:	000bd55c 	.word	0x000bd55c

000b6b30 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b6b30:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b6b32:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b6b34:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b6b38:	68db      	ldr	r3, [r3, #12]
   b6b3a:	2201      	movs	r2, #1
   b6b3c:	f10d 0107 	add.w	r1, sp, #7
   b6b40:	4798      	blx	r3
}
   b6b42:	b003      	add	sp, #12
   b6b44:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b48 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b6b48:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b6b4a:	6803      	ldr	r3, [r0, #0]
   b6b4c:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b6b4e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b6b50:	4798      	blx	r3
   b6b52:	b128      	cbz	r0, b6b60 <_ZN3UDP4readEv+0x18>
   b6b54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b6b56:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6b58:	1c59      	adds	r1, r3, #1
   b6b5a:	86e1      	strh	r1, [r4, #54]	; 0x36
   b6b5c:	5cd0      	ldrb	r0, [r2, r3]
}
   b6b5e:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b6b60:	f04f 30ff 	mov.w	r0, #4294967295
   b6b64:	e7fb      	b.n	b6b5e <_ZN3UDP4readEv+0x16>

000b6b66 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b6b66:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b6b68:	6803      	ldr	r3, [r0, #0]
   b6b6a:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b6b6c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b6b6e:	4798      	blx	r3
   b6b70:	b118      	cbz	r0, b6b7a <_ZN3UDP4peekEv+0x14>
   b6b72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b6b74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6b76:	5cd0      	ldrb	r0, [r2, r3]
}
   b6b78:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b6b7a:	f04f 30ff 	mov.w	r0, #4294967295
   b6b7e:	e7fb      	b.n	b6b78 <_ZN3UDP4peekEv+0x12>

000b6b80 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b6b80:	4770      	bx	lr

000b6b82 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b6b82:	b410      	push	{r4}
   b6b84:	4603      	mov	r3, r0
   b6b86:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b6b88:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b6b8a:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b6b8c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b6b8e:	6803      	ldr	r3, [r0, #0]
   b6b90:	1a52      	subs	r2, r2, r1
   b6b92:	68db      	ldr	r3, [r3, #12]
   b6b94:	4421      	add	r1, r4
}
   b6b96:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b6b9a:	4718      	bx	r3

000b6b9c <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b6b9c:	f1a0 0010 	sub.w	r0, r0, #16
   b6ba0:	f7ff bfef 	b.w	b6b82 <_ZNK3UDP7printToER5Print>

000b6ba4 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b6ba4:	b570      	push	{r4, r5, r6, lr}
    stop();
   b6ba6:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b6ba8:	b08c      	sub	sp, #48	; 0x30
    stop();
   b6baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b6bac:	4604      	mov	r4, r0
   b6bae:	460e      	mov	r6, r1
   b6bb0:	4615      	mov	r5, r2
    stop();
   b6bb2:	4798      	blx	r3
    const int one = 1;
   b6bb4:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b6bb6:	221c      	movs	r2, #28
   b6bb8:	2100      	movs	r1, #0
   b6bba:	a805      	add	r0, sp, #20
    const int one = 1;
   b6bbc:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b6bbe:	f003 ff9e 	bl	baafe <memset>
    saddr.sin6_len = sizeof(saddr);
   b6bc2:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b6bc6:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b6bc8:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b6bcc:	f7ff fc8e 	bl	b64ec <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b6bd0:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b6bd2:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b6bd6:	2102      	movs	r1, #2
   b6bd8:	200a      	movs	r0, #10
   b6bda:	f7ff fd47 	bl	b666c <sock_socket>
    if (_sock < 0) {
   b6bde:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b6be0:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b6be2:	db25      	blt.n	b6c30 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b6be4:	2204      	movs	r2, #4
   b6be6:	9200      	str	r2, [sp, #0]
   b6be8:	ab02      	add	r3, sp, #8
   b6bea:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6bee:	f7ff fd05 	bl	b65fc <sock_setsockopt>
   b6bf2:	b9e8      	cbnz	r0, b6c30 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b6bf4:	b195      	cbz	r5, b6c1c <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b6bf6:	9003      	str	r0, [sp, #12]
   b6bf8:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b6bfc:	a903      	add	r1, sp, #12
   b6bfe:	b2e8      	uxtb	r0, r5
   b6c00:	f7ff fb2a 	bl	b6258 <if_index_to_name>
   b6c04:	b9a0      	cbnz	r0, b6c30 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b6c06:	2306      	movs	r3, #6
   b6c08:	9300      	str	r3, [sp, #0]
   b6c0a:	6960      	ldr	r0, [r4, #20]
   b6c0c:	ab03      	add	r3, sp, #12
   b6c0e:	f241 020b 	movw	r2, #4107	; 0x100b
   b6c12:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6c16:	f7ff fcf1 	bl	b65fc <sock_setsockopt>
   b6c1a:	b948      	cbnz	r0, b6c30 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b6c1c:	6960      	ldr	r0, [r4, #20]
   b6c1e:	221c      	movs	r2, #28
   b6c20:	a905      	add	r1, sp, #20
   b6c22:	f7ff fce3 	bl	b65ec <sock_bind>
   b6c26:	b918      	cbnz	r0, b6c30 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b6c28:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b6c2a:	2001      	movs	r0, #1
}
   b6c2c:	b00c      	add	sp, #48	; 0x30
   b6c2e:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b6c30:	6823      	ldr	r3, [r4, #0]
   b6c32:	4620      	mov	r0, r4
   b6c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6c36:	4798      	blx	r3
   b6c38:	2000      	movs	r0, #0
   b6c3a:	e7f7      	b.n	b6c2c <_ZN3UDP5beginEtm+0x88>

000b6c3c <_ZN3UDP4stopEv>:
void UDP::stop() {
   b6c3c:	b510      	push	{r4, lr}
   b6c3e:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b6c40:	6940      	ldr	r0, [r0, #20]
   b6c42:	2800      	cmp	r0, #0
   b6c44:	db01      	blt.n	b6c4a <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b6c46:	f7ff fce1 	bl	b660c <sock_close>
    _sock = -1;
   b6c4a:	f04f 33ff 	mov.w	r3, #4294967295
   b6c4e:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b6c50:	2300      	movs	r3, #0
   b6c52:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b6c54:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b6c56:	bd10      	pop	{r4, pc}

000b6c58 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b6c58:	b570      	push	{r4, r5, r6, lr}
   b6c5a:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b6c5c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b6c5e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b6c60:	b168      	cbz	r0, b6c7e <_ZN3UDP5writeEPKhj+0x26>
   b6c62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b6c64:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b6c66:	4294      	cmp	r4, r2
   b6c68:	bf28      	it	cs
   b6c6a:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b6c6c:	4622      	mov	r2, r4
   b6c6e:	4430      	add	r0, r6
   b6c70:	f003 ff1d 	bl	baaae <memcpy>
    _offset += size;
   b6c74:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b6c76:	4423      	add	r3, r4
   b6c78:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b6c7a:	4620      	mov	r0, r4
   b6c7c:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b6c7e:	4604      	mov	r4, r0
   b6c80:	e7f1      	b.n	b6c66 <_ZN3UDP5writeEPKhj+0xe>

000b6c82 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b6c82:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b6c84:	6803      	ldr	r3, [r0, #0]
   b6c86:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b6c88:	4604      	mov	r4, r0
   b6c8a:	460f      	mov	r7, r1
   b6c8c:	4616      	mov	r6, r2
    if (available()) {
   b6c8e:	4798      	blx	r3
   b6c90:	b190      	cbz	r0, b6cb8 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b6c92:	6823      	ldr	r3, [r4, #0]
   b6c94:	4620      	mov	r0, r4
   b6c96:	691b      	ldr	r3, [r3, #16]
   b6c98:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b6c9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b6c9c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b6c9e:	4286      	cmp	r6, r0
   b6ca0:	bfa8      	it	ge
   b6ca2:	4606      	movge	r6, r0
   b6ca4:	4419      	add	r1, r3
   b6ca6:	4632      	mov	r2, r6
   b6ca8:	4638      	mov	r0, r7
   b6caa:	f003 ff00 	bl	baaae <memcpy>
        _offset += read;
   b6cae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b6cb0:	4433      	add	r3, r6
   b6cb2:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b6cb4:	4630      	mov	r0, r6
   b6cb6:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b6cb8:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b6cbc:	e7fa      	b.n	b6cb4 <_ZN3UDP4readEPhj+0x32>

000b6cbe <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b6cbe:	b530      	push	{r4, r5, lr}
   b6cc0:	b087      	sub	sp, #28
   b6cc2:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6cc4:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6cc6:	4668      	mov	r0, sp
   b6cc8:	f002 fafa 	bl	b92c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cce:	3404      	adds	r4, #4
   b6cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cd2:	682b      	ldr	r3, [r5, #0]
   b6cd4:	7023      	strb	r3, [r4, #0]
    }
   b6cd6:	b007      	add	sp, #28
   b6cd8:	bd30      	pop	{r4, r5, pc}
	...

000b6cdc <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b6cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6cde:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b6ce0:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b6ce2:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b6ce4:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b6ce6:	4a0a      	ldr	r2, [pc, #40]	; (b6d10 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b6ce8:	9202      	str	r2, [sp, #8]
   b6cea:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b6cec:	468c      	mov	ip, r1
   b6cee:	4606      	mov	r6, r0
   b6cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6cf2:	ad03      	add	r5, sp, #12
   b6cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6cf6:	6823      	ldr	r3, [r4, #0]
   b6cf8:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b6cfa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b6cfe:	9300      	str	r3, [sp, #0]
   b6d00:	4672      	mov	r2, lr
   b6d02:	ab02      	add	r3, sp, #8
   b6d04:	4661      	mov	r1, ip
   b6d06:	4630      	mov	r0, r6
   b6d08:	47b8      	blx	r7
    }
   b6d0a:	b009      	add	sp, #36	; 0x24
   b6d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6d0e:	bf00      	nop
   b6d10:	000bd55c 	.word	0x000bd55c

000b6d14 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b6d14:	b570      	push	{r4, r5, r6, lr}
   b6d16:	4604      	mov	r4, r0
   b6d18:	4b05      	ldr	r3, [pc, #20]	; (b6d30 <_ZN3UDP8remoteIPEv+0x1c>)
   b6d1a:	f844 3b04 	str.w	r3, [r4], #4
   b6d1e:	f101 0520 	add.w	r5, r1, #32
   b6d22:	4606      	mov	r6, r0
   b6d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d28:	682b      	ldr	r3, [r5, #0]
   b6d2a:	7023      	strb	r3, [r4, #0]
   b6d2c:	4630      	mov	r0, r6
   b6d2e:	bd70      	pop	{r4, r5, r6, pc}
   b6d30:	000bd55c 	.word	0x000bd55c

000b6d34 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b6d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b6d36:	7843      	ldrb	r3, [r0, #1]
   b6d38:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b6d3a:	b08d      	sub	sp, #52	; 0x34
   b6d3c:	4605      	mov	r5, r0
   b6d3e:	460c      	mov	r4, r1
   b6d40:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b6d42:	d104      	bne.n	b6d4e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6d44:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6d46:	4620      	mov	r0, r4
   b6d48:	f7ff ffb9 	bl	b6cbe <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b6d4c:	e022      	b.n	b6d94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b6d4e:	2b0a      	cmp	r3, #10
   b6d50:	d125      	bne.n	b6d9e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b6d52:	2211      	movs	r2, #17
   b6d54:	2100      	movs	r1, #0
   b6d56:	a801      	add	r0, sp, #4
   b6d58:	f003 fed1 	bl	baafe <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6d5c:	68ab      	ldr	r3, [r5, #8]
   b6d5e:	b303      	cbz	r3, b6da2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6d60:	f105 0308 	add.w	r3, r5, #8
   b6d64:	ae01      	add	r6, sp, #4
   b6d66:	f105 0c18 	add.w	ip, r5, #24
   b6d6a:	6818      	ldr	r0, [r3, #0]
   b6d6c:	6859      	ldr	r1, [r3, #4]
   b6d6e:	4632      	mov	r2, r6
   b6d70:	c203      	stmia	r2!, {r0, r1}
   b6d72:	3308      	adds	r3, #8
   b6d74:	4563      	cmp	r3, ip
   b6d76:	4616      	mov	r6, r2
   b6d78:	d1f7      	bne.n	b6d6a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b6d7a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6d7c:	a901      	add	r1, sp, #4
   b6d7e:	a806      	add	r0, sp, #24
   b6d80:	ae07      	add	r6, sp, #28
            a.v = 6;
   b6d82:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6d86:	f002 fa51 	bl	b922c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6d8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6d8c:	3404      	adds	r4, #4
   b6d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d90:	6833      	ldr	r3, [r6, #0]
   b6d92:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b6d94:	b11f      	cbz	r7, b6d9e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b6d96:	8868      	ldrh	r0, [r5, #2]
   b6d98:	f7ff fba0 	bl	b64dc <inet_ntohs>
   b6d9c:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b6d9e:	b00d      	add	sp, #52	; 0x34
   b6da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6da2:	68eb      	ldr	r3, [r5, #12]
   b6da4:	2b00      	cmp	r3, #0
   b6da6:	d1db      	bne.n	b6d60 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b6da8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6dac:	692e      	ldr	r6, [r5, #16]
   b6dae:	f7ff fb8d 	bl	b64cc <inet_htonl>
   b6db2:	4286      	cmp	r6, r0
   b6db4:	d1d4      	bne.n	b6d60 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b6db6:	f105 0114 	add.w	r1, r5, #20
   b6dba:	e7c4      	b.n	b6d46 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b6dbc <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b6dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6dc0:	4617      	mov	r7, r2
   b6dc2:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b6dc4:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b6dc6:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6dc8:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b6dca:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6dcc:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b6dce:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b6dd0:	f7ff fa22 	bl	b6218 <netdb_getaddrinfo>
   b6dd4:	1e04      	subs	r4, r0, #0
   b6dd6:	db20      	blt.n	b6e1a <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b6dd8:	9b01      	ldr	r3, [sp, #4]
   b6dda:	b32b      	cbz	r3, b6e28 <_ZN3UDP11beginPacketEPKct+0x6c>
   b6ddc:	695b      	ldr	r3, [r3, #20]
   b6dde:	b31b      	cbz	r3, b6e28 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b6de0:	a802      	add	r0, sp, #8
   b6de2:	f002 fa15 	bl	b9210 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6de6:	9b01      	ldr	r3, [sp, #4]
   b6de8:	2200      	movs	r2, #0
   b6dea:	6958      	ldr	r0, [r3, #20]
   b6dec:	a902      	add	r1, sp, #8
   b6dee:	f7ff ffa1 	bl	b6d34 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b6df2:	a802      	add	r0, sp, #8
   b6df4:	f002 fa34 	bl	b9260 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6df8:	b1b0      	cbz	r0, b6e28 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b6dfa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6dfc:	ad03      	add	r5, sp, #12
   b6dfe:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b6e02:	4b0b      	ldr	r3, [pc, #44]	; (b6e30 <_ZN3UDP11beginPacketEPKct+0x74>)
   b6e04:	9308      	str	r3, [sp, #32]
   b6e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e08:	ac09      	add	r4, sp, #36	; 0x24
   b6e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6e0c:	682b      	ldr	r3, [r5, #0]
   b6e0e:	7023      	strb	r3, [r4, #0]
   b6e10:	463a      	mov	r2, r7
   b6e12:	a908      	add	r1, sp, #32
   b6e14:	4630      	mov	r0, r6
   b6e16:	47c0      	blx	r8
   b6e18:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b6e1a:	9801      	ldr	r0, [sp, #4]
   b6e1c:	f7ff f9f4 	bl	b6208 <netdb_freeaddrinfo>
}
   b6e20:	4620      	mov	r0, r4
   b6e22:	b00e      	add	sp, #56	; 0x38
   b6e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b6e28:	f04f 34ff 	mov.w	r4, #4294967295
   b6e2c:	e7f5      	b.n	b6e1a <_ZN3UDP11beginPacketEPKct+0x5e>
   b6e2e:	bf00      	nop
   b6e30:	000bd55c 	.word	0x000bd55c

000b6e34 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b6e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b6e38:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b6e3c:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b6e40:	b090      	sub	sp, #64	; 0x40
   b6e42:	4605      	mov	r5, r0
   b6e44:	460e      	mov	r6, r1
   b6e46:	4690      	mov	r8, r2
   b6e48:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b6e4a:	db3c      	blt.n	b6ec6 <_ZN3UDP13receivePacketEPhjm+0x92>
   b6e4c:	2900      	cmp	r1, #0
   b6e4e:	d03a      	beq.n	b6ec6 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b6e50:	f04f 0a1c 	mov.w	sl, #28
   b6e54:	af09      	add	r7, sp, #36	; 0x24
   b6e56:	4652      	mov	r2, sl
   b6e58:	2100      	movs	r1, #0
   b6e5a:	4638      	mov	r0, r7
   b6e5c:	f003 fe4f 	bl	baafe <memset>
        socklen_t slen = sizeof(saddr);
   b6e60:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b6e64:	b1dc      	cbz	r4, b6e9e <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b6e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e6a:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b6e6e:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b6e72:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b6e74:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6e76:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b6e78:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b6e7c:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6e7e:	9300      	str	r3, [sp, #0]
   b6e80:	f241 0206 	movw	r2, #4102	; 0x1006
   b6e84:	446b      	add	r3, sp
   b6e86:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6e8a:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b6e8c:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6e8e:	f7ff fbb5 	bl	b65fc <sock_setsockopt>
            if (ret) {
   b6e92:	4604      	mov	r4, r0
   b6e94:	b120      	cbz	r0, b6ea0 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b6e96:	4620      	mov	r0, r4
   b6e98:	b010      	add	sp, #64	; 0x40
   b6e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b6e9e:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b6ea0:	ab03      	add	r3, sp, #12
   b6ea2:	e9cd 7300 	strd	r7, r3, [sp]
   b6ea6:	6968      	ldr	r0, [r5, #20]
   b6ea8:	4623      	mov	r3, r4
   b6eaa:	4642      	mov	r2, r8
   b6eac:	4631      	mov	r1, r6
   b6eae:	f7ff fbc5 	bl	b663c <sock_recvfrom>
        if (ret >= 0) {
   b6eb2:	1e04      	subs	r4, r0, #0
   b6eb4:	dbef      	blt.n	b6e96 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b6eb6:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b6eba:	f105 011c 	add.w	r1, r5, #28
   b6ebe:	4638      	mov	r0, r7
   b6ec0:	f7ff ff38 	bl	b6d34 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b6ec4:	e7e7      	b.n	b6e96 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b6ec6:	f04f 34ff 	mov.w	r4, #4294967295
   b6eca:	e7e4      	b.n	b6e96 <_ZN3UDP13receivePacketEPhjm+0x62>

000b6ecc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b6ecc:	b538      	push	{r3, r4, r5, lr}
   b6ece:	4605      	mov	r5, r0
   b6ed0:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6ed2:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b6ed4:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b6ed6:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b6ed8:	d110      	bne.n	b6efc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b6eda:	f640 231c 	movw	r3, #2588	; 0xa1c
   b6ede:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b6ee0:	f7ff fb04 	bl	b64ec <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b6ee4:	3408      	adds	r4, #8
   b6ee6:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b6ee8:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b6eec:	3514      	adds	r5, #20
   b6eee:	f853 2b04 	ldr.w	r2, [r3], #4
   b6ef2:	f844 2b04 	str.w	r2, [r4], #4
   b6ef6:	42ab      	cmp	r3, r5
   b6ef8:	d1f9      	bne.n	b6eee <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b6efa:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b6efc:	2b04      	cmp	r3, #4
   b6efe:	d1fc      	bne.n	b6efa <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b6f00:	f44f 7304 	mov.w	r3, #528	; 0x210
   b6f04:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b6f06:	f7ff faf1 	bl	b64ec <inet_htons>
   b6f0a:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b6f0c:	6868      	ldr	r0, [r5, #4]
   b6f0e:	f7ff fadd 	bl	b64cc <inet_htonl>
   b6f12:	6060      	str	r0, [r4, #4]
}
   b6f14:	e7f1      	b.n	b6efa <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b6f16 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b6f16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f1a:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b6f1c:	af03      	add	r7, sp, #12
   b6f1e:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b6f22:	4698      	mov	r8, r3
   b6f24:	4604      	mov	r4, r0
   b6f26:	460d      	mov	r5, r1
   b6f28:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b6f2a:	2100      	movs	r1, #0
   b6f2c:	464a      	mov	r2, r9
   b6f2e:	4638      	mov	r0, r7
   b6f30:	f003 fde5 	bl	baafe <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b6f34:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b6f38:	463a      	mov	r2, r7
   b6f3a:	4640      	mov	r0, r8
   b6f3c:	f7ff ffc6 	bl	b6ecc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b6f40:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b6f44:	b153      	cbz	r3, b6f5c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b6f46:	e9cd 7900 	strd	r7, r9, [sp]
   b6f4a:	6960      	ldr	r0, [r4, #20]
   b6f4c:	2300      	movs	r3, #0
   b6f4e:	4632      	mov	r2, r6
   b6f50:	4629      	mov	r1, r5
   b6f52:	f7ff fb83 	bl	b665c <sock_sendto>
}
   b6f56:	b00b      	add	sp, #44	; 0x2c
   b6f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b6f5c:	f04f 30ff 	mov.w	r0, #4294967295
   b6f60:	e7f9      	b.n	b6f56 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>

000b6f62 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>:
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b6f62:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6f64:	b091      	sub	sp, #68	; 0x44
   b6f66:	460c      	mov	r4, r1
   b6f68:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   b6f6a:	2100      	movs	r1, #0
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b6f6c:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   b6f6e:	a809      	add	r0, sp, #36	; 0x24
   b6f70:	221c      	movs	r2, #28
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b6f72:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   b6f74:	f003 fdc3 	bl	baafe <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   b6f78:	aa09      	add	r2, sp, #36	; 0x24
   b6f7a:	2100      	movs	r1, #0
   b6f7c:	4620      	mov	r0, r4
   b6f7e:	f7ff ffa5 	bl	b6ecc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   b6f82:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b6f86:	2b02      	cmp	r3, #2
   b6f88:	d12d      	bne.n	b6fe6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x84>
        struct ip_mreq mreq = {};
   b6f8a:	2300      	movs	r3, #0
   b6f8c:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   b6f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6f90:	9304      	str	r3, [sp, #16]
        if (ifindex != 0) {
   b6f92:	b1bd      	cbz	r5, b6fc4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
            if (!if_get_by_index(ifindex, &iface)) {
   b6f94:	a902      	add	r1, sp, #8
   b6f96:	4628      	mov	r0, r5
   b6f98:	f7ff f966 	bl	b6268 <if_get_by_index>
   b6f9c:	b990      	cbnz	r0, b6fc4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
                struct if_addrs* addrs = nullptr;
   b6f9e:	9003      	str	r0, [sp, #12]
                if (!if_get_addrs(iface, &addrs)) {
   b6fa0:	a903      	add	r1, sp, #12
   b6fa2:	9802      	ldr	r0, [sp, #8]
   b6fa4:	f7ff f968 	bl	b6278 <if_get_addrs>
   b6fa8:	b948      	cbnz	r0, b6fbe <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b6faa:	9b03      	ldr	r3, [sp, #12]
   b6fac:	b13b      	cbz	r3, b6fbe <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                        auto ifaddr = a->if_addr->addr;
   b6fae:	68da      	ldr	r2, [r3, #12]
   b6fb0:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   b6fb2:	7851      	ldrb	r1, [r2, #1]
   b6fb4:	2902      	cmp	r1, #2
   b6fb6:	d114      	bne.n	b6fe2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   b6fb8:	6852      	ldr	r2, [r2, #4]
   b6fba:	b192      	cbz	r2, b6fe2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   b6fbc:	9205      	str	r2, [sp, #20]
                SCOPE_GUARD({
   b6fbe:	9803      	ldr	r0, [sp, #12]
   b6fc0:	f7ff f962 	bl	b6288 <if_free_if_addrs>
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   b6fc4:	2f00      	cmp	r7, #0
   b6fc6:	f04f 0308 	mov.w	r3, #8
   b6fca:	9300      	str	r3, [sp, #0]
   b6fcc:	bf18      	it	ne
   b6fce:	2203      	movne	r2, #3
   b6fd0:	ab04      	add	r3, sp, #16
   b6fd2:	bf08      	it	eq
   b6fd4:	2204      	moveq	r2, #4
   b6fd6:	2100      	movs	r1, #0
   b6fd8:	4630      	mov	r0, r6
   b6fda:	f7ff fb0f 	bl	b65fc <sock_setsockopt>
}
   b6fde:	b011      	add	sp, #68	; 0x44
   b6fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b6fe2:	681b      	ldr	r3, [r3, #0]
   b6fe4:	e7e2      	b.n	b6fac <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x4a>
    } else if (s.ss_family == AF_INET6) {
   b6fe6:	2b0a      	cmp	r3, #10
   b6fe8:	d115      	bne.n	b7016 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0xb4>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   b6fea:	ab0b      	add	r3, sp, #44	; 0x2c
   b6fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b6fee:	ac04      	add	r4, sp, #16
   b6ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b6ff4:	2f00      	cmp	r7, #0
   b6ff6:	f04f 0314 	mov.w	r3, #20
   b6ffa:	9300      	str	r3, [sp, #0]
   b6ffc:	bf18      	it	ne
   b6ffe:	220c      	movne	r2, #12
   b7000:	4623      	mov	r3, r4
   b7002:	bf08      	it	eq
   b7004:	220d      	moveq	r2, #13
   b7006:	2129      	movs	r1, #41	; 0x29
   b7008:	4630      	mov	r0, r6
        mreq.ipv6mr_interface = ifindex;
   b700a:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b700c:	f7ff faf6 	bl	b65fc <sock_setsockopt>
   b7010:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7014:	e7e3      	b.n	b6fde <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>
    return -1;
   b7016:	f04f 30ff 	mov.w	r0, #4294967295
   b701a:	e7e0      	b.n	b6fde <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>

000b701c <_ZN3UDPC1Ev>:
UDP::UDP()
   b701c:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b701e:	2500      	movs	r5, #0
   b7020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7024:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b7028:	4b0b      	ldr	r3, [pc, #44]	; (b7058 <_ZN3UDPC1Ev+0x3c>)
   b702a:	f103 0208 	add.w	r2, r3, #8
   b702e:	336c      	adds	r3, #108	; 0x6c
   b7030:	6103      	str	r3, [r0, #16]
   b7032:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b7036:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b7038:	6002      	str	r2, [r0, #0]
   b703a:	6143      	str	r3, [r0, #20]
   b703c:	301c      	adds	r0, #28
   b703e:	f002 f8e7 	bl	b9210 <_ZN9IPAddressC1Ev>
   b7042:	f44f 7300 	mov.w	r3, #512	; 0x200
   b7046:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b704a:	86e5      	strh	r5, [r4, #54]	; 0x36
   b704c:	8725      	strh	r5, [r4, #56]	; 0x38
   b704e:	63e5      	str	r5, [r4, #60]	; 0x3c
   b7050:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b7054:	4620      	mov	r0, r4
   b7056:	bd38      	pop	{r3, r4, r5, pc}
   b7058:	000bd2b0 	.word	0x000bd2b0

000b705c <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b705c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b705e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b7062:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b7064:	b123      	cbz	r3, b7070 <_ZN3UDP13releaseBufferEv+0x14>
   b7066:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7068:	b110      	cbz	r0, b7070 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b706a:	2101      	movs	r1, #1
   b706c:	f7fd f819 	bl	b40a2 <_ZdlPvj>
    _buffer = NULL;
   b7070:	2300      	movs	r3, #0
   b7072:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b7074:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b7078:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b707a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b707c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b707e:	bd10      	pop	{r4, pc}

000b7080 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b7080:	b570      	push	{r4, r5, r6, lr}
   b7082:	4604      	mov	r4, r0
   b7084:	4616      	mov	r6, r2
   b7086:	460d      	mov	r5, r1
    releaseBuffer();
   b7088:	f7ff ffe8 	bl	b705c <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b708c:	2300      	movs	r3, #0
    _buffer = buffer;
   b708e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b7090:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b7092:	b12e      	cbz	r6, b70a0 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b7094:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b7096:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b7098:	3800      	subs	r0, #0
   b709a:	bf18      	it	ne
   b709c:	2001      	movne	r0, #1
   b709e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b70a0:	2d00      	cmp	r5, #0
   b70a2:	d0f8      	beq.n	b7096 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b70a4:	4628      	mov	r0, r5
   b70a6:	f7fc fff8 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b70aa:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b70ac:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b70ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b70b2:	2800      	cmp	r0, #0
   b70b4:	d0ef      	beq.n	b7096 <_ZN3UDP9setBufferEjPh+0x16>
   b70b6:	e7ed      	b.n	b7094 <_ZN3UDP9setBufferEjPh+0x14>

000b70b8 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b70b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b70ba:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b70bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b70be:	4605      	mov	r5, r0
   b70c0:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b70c2:	b91a      	cbnz	r2, b70cc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b70c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b70c6:	b109      	cbz	r1, b70cc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b70c8:	f7ff ffda 	bl	b7080 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b70cc:	3404      	adds	r4, #4
   b70ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b70d0:	f105 0620 	add.w	r6, r5, #32
   b70d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b70d6:	6823      	ldr	r3, [r4, #0]
   b70d8:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b70da:	2300      	movs	r3, #0
}
   b70dc:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b70de:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b70e0:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b70e2:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b70e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70e6 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b70e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b70e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b70ea:	4604      	mov	r4, r0
   b70ec:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b70ee:	b92a      	cbnz	r2, b70fc <_ZN3UDP11parsePacketEm+0x16>
   b70f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b70f2:	b119      	cbz	r1, b70fc <_ZN3UDP11parsePacketEm+0x16>
   b70f4:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b70f6:	f7ff ffc3 	bl	b7080 <_ZN3UDP9setBufferEjPh>
   b70fa:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b70fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b70fe:	2200      	movs	r2, #0
   b7100:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b7102:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b7104:	b141      	cbz	r1, b7118 <_ZN3UDP11parsePacketEm+0x32>
   b7106:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b7108:	b132      	cbz	r2, b7118 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b710a:	6820      	ldr	r0, [r4, #0]
   b710c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b710e:	4620      	mov	r0, r4
   b7110:	47a8      	blx	r5
        if (result > 0) {
   b7112:	2800      	cmp	r0, #0
            _total = result;
   b7114:	bfc8      	it	gt
   b7116:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b7118:	6823      	ldr	r3, [r4, #0]
   b711a:	691b      	ldr	r3, [r3, #16]
   b711c:	4620      	mov	r0, r4
}
   b711e:	b003      	add	sp, #12
   b7120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b7124:	4718      	bx	r3
	...

000b7128 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b7128:	b510      	push	{r4, lr}
   b712a:	4b07      	ldr	r3, [pc, #28]	; (b7148 <_ZN3UDPD1Ev+0x20>)
   b712c:	f103 0208 	add.w	r2, r3, #8
   b7130:	336c      	adds	r3, #108	; 0x6c
   b7132:	4604      	mov	r4, r0
   b7134:	6002      	str	r2, [r0, #0]
   b7136:	6103      	str	r3, [r0, #16]
   b7138:	f7ff fd80 	bl	b6c3c <_ZN3UDP4stopEv>
   b713c:	4620      	mov	r0, r4
   b713e:	f7ff ff8d 	bl	b705c <_ZN3UDP13releaseBufferEv>
   b7142:	4620      	mov	r0, r4
   b7144:	bd10      	pop	{r4, pc}
   b7146:	bf00      	nop
   b7148:	000bd2b0 	.word	0x000bd2b0

000b714c <_ZN3UDPD0Ev>:
   b714c:	b510      	push	{r4, lr}
   b714e:	4604      	mov	r4, r0
   b7150:	f7ff ffea 	bl	b7128 <_ZN3UDPD1Ev>
   b7154:	4620      	mov	r0, r4
   b7156:	214c      	movs	r1, #76	; 0x4c
   b7158:	f7fc ffa3 	bl	b40a2 <_ZdlPvj>
   b715c:	4620      	mov	r0, r4
   b715e:	bd10      	pop	{r4, pc}

000b7160 <_ZN3UDP13joinMulticastERK9IPAddress>:

int UDP::joinMulticast(const IPAddress& ip) {
   b7160:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b7162:	6944      	ldr	r4, [r0, #20]
   b7164:	2c00      	cmp	r4, #0
   b7166:	db07      	blt.n	b7178 <_ZN3UDP13joinMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b7168:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b716c:	2301      	movs	r3, #1
   b716e:	4620      	mov	r0, r4
}
   b7170:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b7174:	f7ff bef5 	b.w	b6f62 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b7178:	f04f 30ff 	mov.w	r0, #4294967295
   b717c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7180:	4770      	bx	lr

000b7182 <_ZN3UDP14leaveMulticastERK9IPAddress>:

int UDP::leaveMulticast(const IPAddress& ip) {
   b7182:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b7184:	6944      	ldr	r4, [r0, #20]
   b7186:	2c00      	cmp	r4, #0
   b7188:	db07      	blt.n	b719a <_ZN3UDP14leaveMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b718a:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b718e:	2300      	movs	r3, #0
   b7190:	4620      	mov	r0, r4
}
   b7192:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b7196:	f7ff bee4 	b.w	b6f62 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b719a:	f04f 30ff 	mov.w	r0, #4294967295
   b719e:	f85d 4b04 	ldr.w	r4, [sp], #4
   b71a2:	4770      	bx	lr

000b71a4 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b71a4:	4770      	bx	lr

000b71a6 <_ZN21StringPrintableHelperD0Ev>:
   b71a6:	b510      	push	{r4, lr}
   b71a8:	210c      	movs	r1, #12
   b71aa:	4604      	mov	r4, r0
   b71ac:	f7fc ff79 	bl	b40a2 <_ZdlPvj>
   b71b0:	4620      	mov	r0, r4
   b71b2:	bd10      	pop	{r4, pc}

000b71b4 <_ZN6StringD1Ev>:
String::~String()
   b71b4:	b510      	push	{r4, lr}
   b71b6:	4604      	mov	r4, r0
	free(buffer);
   b71b8:	6800      	ldr	r0, [r0, #0]
   b71ba:	f7ff fb93 	bl	b68e4 <free>
}
   b71be:	4620      	mov	r0, r4
   b71c0:	bd10      	pop	{r4, pc}

000b71c2 <_ZN6String10invalidateEv>:
{
   b71c2:	b510      	push	{r4, lr}
   b71c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b71c6:	6800      	ldr	r0, [r0, #0]
   b71c8:	b108      	cbz	r0, b71ce <_ZN6String10invalidateEv+0xc>
   b71ca:	f7ff fb8b 	bl	b68e4 <free>
	buffer = NULL;
   b71ce:	2300      	movs	r3, #0
	capacity = len = 0;
   b71d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b71d4:	6023      	str	r3, [r4, #0]
}
   b71d6:	bd10      	pop	{r4, pc}

000b71d8 <_ZN6String12changeBufferEj>:
{
   b71d8:	b538      	push	{r3, r4, r5, lr}
   b71da:	4604      	mov	r4, r0
   b71dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b71de:	6800      	ldr	r0, [r0, #0]
   b71e0:	3101      	adds	r1, #1
   b71e2:	f7ff fb87 	bl	b68f4 <realloc>
	if (newbuffer) {
   b71e6:	b110      	cbz	r0, b71ee <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b71e8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b71ec:	2001      	movs	r0, #1
}
   b71ee:	bd38      	pop	{r3, r4, r5, pc}

000b71f0 <_ZN6String7reserveEj>:
{
   b71f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b71f2:	6803      	ldr	r3, [r0, #0]
{
   b71f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b71f6:	b123      	cbz	r3, b7202 <_ZN6String7reserveEj+0x12>
   b71f8:	6843      	ldr	r3, [r0, #4]
   b71fa:	428b      	cmp	r3, r1
   b71fc:	d301      	bcc.n	b7202 <_ZN6String7reserveEj+0x12>
   b71fe:	2001      	movs	r0, #1
}
   b7200:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7202:	4620      	mov	r0, r4
   b7204:	f7ff ffe8 	bl	b71d8 <_ZN6String12changeBufferEj>
   b7208:	2800      	cmp	r0, #0
   b720a:	d0f9      	beq.n	b7200 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b720c:	68a3      	ldr	r3, [r4, #8]
   b720e:	2b00      	cmp	r3, #0
   b7210:	d1f5      	bne.n	b71fe <_ZN6String7reserveEj+0xe>
   b7212:	6822      	ldr	r2, [r4, #0]
   b7214:	7013      	strb	r3, [r2, #0]
   b7216:	e7f2      	b.n	b71fe <_ZN6String7reserveEj+0xe>

000b7218 <_ZN6String4copyEPKcj>:
{
   b7218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b721a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b721c:	4611      	mov	r1, r2
   b721e:	9201      	str	r2, [sp, #4]
{
   b7220:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7222:	f7ff ffe5 	bl	b71f0 <_ZN6String7reserveEj>
   b7226:	9a01      	ldr	r2, [sp, #4]
   b7228:	b928      	cbnz	r0, b7236 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b722a:	4620      	mov	r0, r4
   b722c:	f7ff ffc9 	bl	b71c2 <_ZN6String10invalidateEv>
}
   b7230:	4620      	mov	r0, r4
   b7232:	b003      	add	sp, #12
   b7234:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7236:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7238:	4629      	mov	r1, r5
   b723a:	6820      	ldr	r0, [r4, #0]
   b723c:	f003 fc37 	bl	baaae <memcpy>
	buffer[len] = 0;
   b7240:	6822      	ldr	r2, [r4, #0]
   b7242:	68a3      	ldr	r3, [r4, #8]
   b7244:	2100      	movs	r1, #0
   b7246:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7248:	e7f2      	b.n	b7230 <_ZN6String4copyEPKcj+0x18>

000b724a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b724a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b724c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b724e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7252:	4604      	mov	r4, r0
	len = 0;
   b7254:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7256:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7258:	b141      	cbz	r1, b726c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b725a:	4608      	mov	r0, r1
   b725c:	9101      	str	r1, [sp, #4]
   b725e:	f003 fcc4 	bl	babea <strlen>
   b7262:	9901      	ldr	r1, [sp, #4]
   b7264:	4602      	mov	r2, r0
   b7266:	4620      	mov	r0, r4
   b7268:	f7ff ffd6 	bl	b7218 <_ZN6String4copyEPKcj>
}
   b726c:	4620      	mov	r0, r4
   b726e:	b002      	add	sp, #8
   b7270:	bd10      	pop	{r4, pc}

000b7272 <_ZN6StringaSEPKc>:
{
   b7272:	b513      	push	{r0, r1, r4, lr}
   b7274:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7276:	b159      	cbz	r1, b7290 <_ZN6StringaSEPKc+0x1e>
   b7278:	4608      	mov	r0, r1
   b727a:	9101      	str	r1, [sp, #4]
   b727c:	f003 fcb5 	bl	babea <strlen>
   b7280:	9901      	ldr	r1, [sp, #4]
   b7282:	4602      	mov	r2, r0
   b7284:	4620      	mov	r0, r4
   b7286:	f7ff ffc7 	bl	b7218 <_ZN6String4copyEPKcj>
}
   b728a:	4620      	mov	r0, r4
   b728c:	b002      	add	sp, #8
   b728e:	bd10      	pop	{r4, pc}
	else invalidate();
   b7290:	f7ff ff97 	bl	b71c2 <_ZN6String10invalidateEv>
   b7294:	e7f9      	b.n	b728a <_ZN6StringaSEPKc+0x18>

000b7296 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b7296:	b510      	push	{r4, lr}
   b7298:	4604      	mov	r4, r0
   b729a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b729c:	2300      	movs	r3, #0
	capacity = 0;
   b729e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b72a2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b72a4:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b72a6:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b72a8:	a901      	add	r1, sp, #4
   b72aa:	f7ff fbcd 	bl	b6a48 <ltoa>
	*this = buf;
   b72ae:	a901      	add	r1, sp, #4
   b72b0:	4620      	mov	r0, r4
   b72b2:	f7ff ffde 	bl	b7272 <_ZN6StringaSEPKc>
}
   b72b6:	4620      	mov	r0, r4
   b72b8:	b00a      	add	sp, #40	; 0x28
   b72ba:	bd10      	pop	{r4, pc}

000b72bc <_ZN6String6concatEPKcj>:
{
   b72bc:	b570      	push	{r4, r5, r6, lr}
   b72be:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b72c0:	460e      	mov	r6, r1
   b72c2:	b909      	cbnz	r1, b72c8 <_ZN6String6concatEPKcj+0xc>
   b72c4:	2000      	movs	r0, #0
}
   b72c6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b72c8:	b16a      	cbz	r2, b72e6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b72ca:	6884      	ldr	r4, [r0, #8]
   b72cc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b72ce:	4621      	mov	r1, r4
   b72d0:	f7ff ff8e 	bl	b71f0 <_ZN6String7reserveEj>
   b72d4:	2800      	cmp	r0, #0
   b72d6:	d0f5      	beq.n	b72c4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b72d8:	6828      	ldr	r0, [r5, #0]
   b72da:	68ab      	ldr	r3, [r5, #8]
   b72dc:	4631      	mov	r1, r6
   b72de:	4418      	add	r0, r3
   b72e0:	f003 fc5d 	bl	bab9e <strcpy>
	len = newlen;
   b72e4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b72e6:	2001      	movs	r0, #1
   b72e8:	e7ed      	b.n	b72c6 <_ZN6String6concatEPKcj+0xa>

000b72ea <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b72ea:	688a      	ldr	r2, [r1, #8]
   b72ec:	6809      	ldr	r1, [r1, #0]
   b72ee:	f7ff bfe5 	b.w	b72bc <_ZN6String6concatEPKcj>

000b72f2 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b72f2:	b538      	push	{r3, r4, r5, lr}
   b72f4:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b72f6:	6880      	ldr	r0, [r0, #8]
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b72f8:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b72fa:	f7ff ffdf 	bl	b72bc <_ZN6String6concatEPKcj>
   b72fe:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b7300:	6898      	ldr	r0, [r3, #8]
    }
   b7302:	1b40      	subs	r0, r0, r5
   b7304:	bd38      	pop	{r3, r4, r5, pc}

000b7306 <_ZN6String6concatEc>:
{
   b7306:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b7308:	2300      	movs	r3, #0
	buf[0] = c;
   b730a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b730e:	2201      	movs	r2, #1
   b7310:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b7312:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7316:	f7ff ffd1 	bl	b72bc <_ZN6String6concatEPKcj>
}
   b731a:	b003      	add	sp, #12
   b731c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7320 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b7320:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b7322:	6880      	ldr	r0, [r0, #8]
   b7324:	f7ff ffef 	bl	b7306 <_ZN6String6concatEc>
    }
   b7328:	bd08      	pop	{r3, pc}

000b732a <_ZplRK15StringSumHelperRK6String>:
{
   b732a:	b510      	push	{r4, lr}
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b732c:	688a      	ldr	r2, [r1, #8]
   b732e:	6809      	ldr	r1, [r1, #0]
{
   b7330:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7332:	f7ff ffc3 	bl	b72bc <_ZN6String6concatEPKcj>
   b7336:	b910      	cbnz	r0, b733e <_ZplRK15StringSumHelperRK6String+0x14>
   b7338:	4620      	mov	r0, r4
   b733a:	f7ff ff42 	bl	b71c2 <_ZN6String10invalidateEv>
}
   b733e:	4620      	mov	r0, r4
   b7340:	bd10      	pop	{r4, pc}
	...

000b7344 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b7344:	b530      	push	{r4, r5, lr}
   b7346:	b085      	sub	sp, #20
	buffer = NULL;
   b7348:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b734a:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b734c:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b734e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7352:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7354:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b7356:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b7358:	4b06      	ldr	r3, [pc, #24]	; (b7374 <_ZN6StringC1ERK9Printable+0x30>)
   b735a:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b735c:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b735e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b7360:	f7ff ff46 	bl	b71f0 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b7364:	682b      	ldr	r3, [r5, #0]
   b7366:	a901      	add	r1, sp, #4
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	4628      	mov	r0, r5
   b736c:	4798      	blx	r3
}
   b736e:	4620      	mov	r0, r4
   b7370:	b005      	add	sp, #20
   b7372:	bd30      	pop	{r4, r5, pc}
   b7374:	000bd328 	.word	0x000bd328

000b7378 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
   b7378:	b40e      	push	{r1, r2, r3}
   b737a:	b570      	push	{r4, r5, r6, lr}
   b737c:	b087      	sub	sp, #28
   b737e:	ad0b      	add	r5, sp, #44	; 0x2c
   b7380:	4604      	mov	r4, r0
   b7382:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7386:	9201      	str	r2, [sp, #4]
   b7388:	462b      	mov	r3, r5
   b738a:	2105      	movs	r1, #5
   b738c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b738e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7390:	f7ff fac8 	bl	b6924 <vsnprintf>
    va_end(marker);

    String result;
   b7394:	490b      	ldr	r1, [pc, #44]	; (b73c4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7396:	4606      	mov	r6, r0
    String result;
   b7398:	4620      	mov	r0, r4
   b739a:	f7ff ff56 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b739e:	4631      	mov	r1, r6
   b73a0:	4620      	mov	r0, r4
   b73a2:	f7ff ff25 	bl	b71f0 <_ZN6String7reserveEj>
    if (result.buffer) {
   b73a6:	6820      	ldr	r0, [r4, #0]
   b73a8:	b130      	cbz	r0, b73b8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b73aa:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b73ac:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b73ae:	462b      	mov	r3, r5
   b73b0:	1c71      	adds	r1, r6, #1
   b73b2:	f7ff fab7 	bl	b6924 <vsnprintf>
        va_end(marker);
        result.len = n;
   b73b6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b73b8:	4620      	mov	r0, r4
   b73ba:	b007      	add	sp, #28
   b73bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b73c0:	b003      	add	sp, #12
   b73c2:	4770      	bx	lr
   b73c4:	000bcd64 	.word	0x000bcd64

000b73c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b73c8:	4770      	bx	lr

000b73ca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b73ca:	4770      	bx	lr

000b73cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b73cc:	4770      	bx	lr

000b73ce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b73ce:	4770      	bx	lr

000b73d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b73d0:	4b06      	ldr	r3, [pc, #24]	; (b73ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b73d2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b73d4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b73d6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b73da:	d005      	beq.n	b73e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b73dc:	4608      	mov	r0, r1
   b73de:	f002 fd5b 	bl	b9e98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b73e2:	2800      	cmp	r0, #0
   b73e4:	bf08      	it	eq
   b73e6:	2400      	moveq	r4, #0
      }
   b73e8:	4620      	mov	r0, r4
   b73ea:	bd10      	pop	{r4, pc}
   b73ec:	000bd4d8 	.word	0x000bd4d8

000b73f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b73f0:	4b06      	ldr	r3, [pc, #24]	; (b740c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b73f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b73f4:	b510      	push	{r4, lr}
   b73f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b73fa:	d005      	beq.n	b7408 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b73fc:	4608      	mov	r0, r1
   b73fe:	f002 fd4b 	bl	b9e98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7402:	2800      	cmp	r0, #0
   b7404:	bf08      	it	eq
   b7406:	2400      	moveq	r4, #0
      }
   b7408:	4620      	mov	r0, r4
   b740a:	bd10      	pop	{r4, pc}
   b740c:	000bd4d8 	.word	0x000bd4d8

000b7410 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7410:	4b06      	ldr	r3, [pc, #24]	; (b742c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7412:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7414:	b510      	push	{r4, lr}
   b7416:	f100 040c 	add.w	r4, r0, #12
	    ||
   b741a:	d005      	beq.n	b7428 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b741c:	4608      	mov	r0, r1
   b741e:	f002 fd3b 	bl	b9e98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7422:	2800      	cmp	r0, #0
   b7424:	bf08      	it	eq
   b7426:	2400      	moveq	r4, #0
      }
   b7428:	4620      	mov	r0, r4
   b742a:	bd10      	pop	{r4, pc}
   b742c:	000bd4d8 	.word	0x000bd4d8

000b7430 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7430:	b510      	push	{r4, lr}
   b7432:	2168      	movs	r1, #104	; 0x68
   b7434:	4604      	mov	r4, r0
   b7436:	f7fc fe34 	bl	b40a2 <_ZdlPvj>
   b743a:	4620      	mov	r0, r4
   b743c:	bd10      	pop	{r4, pc}

000b743e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b743e:	b510      	push	{r4, lr}
   b7440:	2128      	movs	r1, #40	; 0x28
   b7442:	4604      	mov	r4, r0
   b7444:	f7fc fe2d 	bl	b40a2 <_ZdlPvj>
   b7448:	4620      	mov	r0, r4
   b744a:	bd10      	pop	{r4, pc}

000b744c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b744c:	b510      	push	{r4, lr}
   b744e:	2130      	movs	r1, #48	; 0x30
   b7450:	4604      	mov	r4, r0
   b7452:	f7fc fe26 	bl	b40a2 <_ZdlPvj>
   b7456:	4620      	mov	r0, r4
   b7458:	bd10      	pop	{r4, pc}

000b745a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b745a:	2168      	movs	r1, #104	; 0x68
   b745c:	f7fc be21 	b.w	b40a2 <_ZdlPvj>

000b7460 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7460:	2128      	movs	r1, #40	; 0x28
   b7462:	f7fc be1e 	b.w	b40a2 <_ZdlPvj>

000b7466 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7466:	2130      	movs	r1, #48	; 0x30
   b7468:	f7fc be1b 	b.w	b40a2 <_ZdlPvj>

000b746c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b746c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b746e:	2500      	movs	r5, #0
   b7470:	1cec      	adds	r4, r5, #3
   b7472:	428c      	cmp	r4, r1
   b7474:	d80d      	bhi.n	b7492 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7476:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7478:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b747a:	5d87      	ldrb	r7, [r0, r6]
   b747c:	4297      	cmp	r7, r2
   b747e:	d105      	bne.n	b748c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7480:	4426      	add	r6, r4
   b7482:	42b1      	cmp	r1, r6
   b7484:	d305      	bcc.n	b7492 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7486:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7488:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b748c:	3401      	adds	r4, #1
   b748e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7490:	e7ee      	b.n	b7470 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7492:	2000      	movs	r0, #0
   b7494:	e7f9      	b.n	b748a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7498 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7498:	4a02      	ldr	r2, [pc, #8]	; (b74a4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b749a:	4903      	ldr	r1, [pc, #12]	; (b74a8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b749c:	200a      	movs	r0, #10
   b749e:	f7ff b92d 	b.w	b66fc <panic_>
   b74a2:	bf00      	nop
   b74a4:	000b62a9 	.word	0x000b62a9
   b74a8:	000bd338 	.word	0x000bd338

000b74ac <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b74ac:	4603      	mov	r3, r0
   b74ae:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b74b0:	681b      	ldr	r3, [r3, #0]
   b74b2:	e9d3 2100 	ldrd	r2, r1, [r3]
   b74b6:	4710      	bx	r2

000b74b8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b74b8:	b430      	push	{r4, r5}
   b74ba:	460d      	mov	r5, r1
   b74bc:	4611      	mov	r1, r2
   b74be:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b74c0:	6803      	ldr	r3, [r0, #0]
   b74c2:	6809      	ldr	r1, [r1, #0]
   b74c4:	6828      	ldr	r0, [r5, #0]
   b74c6:	e9d3 4300 	ldrd	r4, r3, [r3]
   b74ca:	46a4      	mov	ip, r4
      }
   b74cc:	bc30      	pop	{r4, r5}
   b74ce:	4760      	bx	ip

000b74d0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b74d0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b74d2:	b538      	push	{r3, r4, r5, lr}
   b74d4:	4604      	mov	r4, r0
	switch (__op)
   b74d6:	d102      	bne.n	b74de <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b74d8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b74da:	6023      	str	r3, [r4, #0]
	}
   b74dc:	e003      	b.n	b74e6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b74de:	2a02      	cmp	r2, #2
   b74e0:	d003      	beq.n	b74ea <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b74e2:	2a03      	cmp	r2, #3
   b74e4:	d00d      	beq.n	b7502 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b74e6:	2000      	movs	r0, #0
   b74e8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b74ea:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b74ec:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b74ee:	f7fc fdd2 	bl	b4096 <_Znwj>
   b74f2:	4603      	mov	r3, r0
   b74f4:	2800      	cmp	r0, #0
   b74f6:	d0f0      	beq.n	b74da <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b74f8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b74fc:	e883 0003 	stmia.w	r3, {r0, r1}
   b7500:	e7eb      	b.n	b74da <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7502:	6800      	ldr	r0, [r0, #0]
   b7504:	2800      	cmp	r0, #0
   b7506:	d0ee      	beq.n	b74e6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b7508:	2108      	movs	r1, #8
   b750a:	f7fc fdca 	bl	b40a2 <_ZdlPvj>
   b750e:	e7ea      	b.n	b74e6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b7510 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7510:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7512:	b538      	push	{r3, r4, r5, lr}
   b7514:	4604      	mov	r4, r0
	switch (__op)
   b7516:	d102      	bne.n	b751e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7518:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b751a:	6023      	str	r3, [r4, #0]
	}
   b751c:	e003      	b.n	b7526 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b751e:	2a02      	cmp	r2, #2
   b7520:	d003      	beq.n	b752a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7522:	2a03      	cmp	r2, #3
   b7524:	d00d      	beq.n	b7542 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7526:	2000      	movs	r0, #0
   b7528:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b752a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b752c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b752e:	f7fc fdb2 	bl	b4096 <_Znwj>
   b7532:	4603      	mov	r3, r0
   b7534:	2800      	cmp	r0, #0
   b7536:	d0f0      	beq.n	b751a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7538:	e895 0003 	ldmia.w	r5, {r0, r1}
   b753c:	e883 0003 	stmia.w	r3, {r0, r1}
   b7540:	e7eb      	b.n	b751a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7542:	6800      	ldr	r0, [r0, #0]
   b7544:	2800      	cmp	r0, #0
   b7546:	d0ee      	beq.n	b7526 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7548:	2108      	movs	r1, #8
   b754a:	f7fc fdaa 	bl	b40a2 <_ZdlPvj>
   b754e:	e7ea      	b.n	b7526 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7550 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7550:	b510      	push	{r4, lr}
   b7552:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7554:	3058      	adds	r0, #88	; 0x58
   b7556:	f7fc fec9 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b755a:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b755e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7562:	f7ff be27 	b.w	b71b4 <_ZN6StringD1Ev>

000b7566 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7566:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7568:	6843      	ldr	r3, [r0, #4]
   b756a:	3b01      	subs	r3, #1
    {
   b756c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b756e:	6043      	str	r3, [r0, #4]
   b7570:	b963      	cbnz	r3, b758c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7572:	6803      	ldr	r3, [r0, #0]
   b7574:	689b      	ldr	r3, [r3, #8]
   b7576:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7578:	68a3      	ldr	r3, [r4, #8]
   b757a:	3b01      	subs	r3, #1
   b757c:	60a3      	str	r3, [r4, #8]
   b757e:	b92b      	cbnz	r3, b758c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7580:	6823      	ldr	r3, [r4, #0]
   b7582:	4620      	mov	r0, r4
   b7584:	68db      	ldr	r3, [r3, #12]
    }
   b7586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b758a:	4718      	bx	r3
    }
   b758c:	bd10      	pop	{r4, pc}

000b758e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b758e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7592:	b2da      	uxtb	r2, r3
   b7594:	2a09      	cmp	r2, #9
   b7596:	d801      	bhi.n	b759c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7598:	4618      	mov	r0, r3
   b759a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b759c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b75a0:	2b05      	cmp	r3, #5
   b75a2:	d801      	bhi.n	b75a8 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b75a4:	3857      	subs	r0, #87	; 0x57
   b75a6:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b75a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b75ac:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b75ae:	bf94      	ite	ls
   b75b0:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b75b2:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b75b6:	4770      	bx	lr

000b75b8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b75b8:	b510      	push	{r4, lr}
            locked_(false) {
   b75ba:	2300      	movs	r3, #0
   b75bc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b75be:	4b04      	ldr	r3, [pc, #16]	; (b75d0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b75c0:	4604      	mov	r4, r0
   b75c2:	6818      	ldr	r0, [r3, #0]
   b75c4:	f7fe ff62 	bl	b648c <os_mutex_recursive_lock>
        locked_ = true;
   b75c8:	2301      	movs	r3, #1
   b75ca:	7023      	strb	r3, [r4, #0]
    }
   b75cc:	4620      	mov	r0, r4
   b75ce:	bd10      	pop	{r4, pc}
   b75d0:	2003e688 	.word	0x2003e688

000b75d4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b75d4:	b510      	push	{r4, lr}
        if (locked_) {
   b75d6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b75d8:	4604      	mov	r4, r0
        if (locked_) {
   b75da:	b11b      	cbz	r3, b75e4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b75dc:	4b02      	ldr	r3, [pc, #8]	; (b75e8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b75de:	6818      	ldr	r0, [r3, #0]
   b75e0:	f7fe ff5c 	bl	b649c <os_mutex_recursive_unlock>
    }
   b75e4:	4620      	mov	r0, r4
   b75e6:	bd10      	pop	{r4, pc}
   b75e8:	2003e688 	.word	0x2003e688

000b75ec <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b75ec:	b082      	sub	sp, #8
   b75ee:	4603      	mov	r3, r0
    address_ = addr;
   b75f0:	6808      	ldr	r0, [r1, #0]
   b75f2:	6849      	ldr	r1, [r1, #4]
   b75f4:	466a      	mov	r2, sp
   b75f6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b75f8:	466a      	mov	r2, sp
   b75fa:	ca03      	ldmia	r2!, {r0, r1}
   b75fc:	6018      	str	r0, [r3, #0]
}
   b75fe:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7600:	6059      	str	r1, [r3, #4]
}
   b7602:	b002      	add	sp, #8
   b7604:	4770      	bx	lr

000b7606 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7606:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7608:	7982      	ldrb	r2, [r0, #6]
   b760a:	798b      	ldrb	r3, [r1, #6]
   b760c:	429a      	cmp	r2, r3
   b760e:	d106      	bne.n	b761e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7610:	2206      	movs	r2, #6
   b7612:	f003 fa3c 	bl	baa8e <memcmp>
   b7616:	fab0 f080 	clz	r0, r0
   b761a:	0940      	lsrs	r0, r0, #5
}
   b761c:	bd08      	pop	{r3, pc}
    return false;
   b761e:	2000      	movs	r0, #0
   b7620:	e7fc      	b.n	b761c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7622 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7622:	f04f 33ff 	mov.w	r3, #4294967295
   b7626:	6003      	str	r3, [r0, #0]
   b7628:	8083      	strh	r3, [r0, #4]
}
   b762a:	2000      	movs	r0, #0
   b762c:	4770      	bx	lr

000b762e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b762e:	b508      	push	{r3, lr}
   b7630:	4602      	mov	r2, r0
        : address_{} {
   b7632:	2100      	movs	r1, #0
   b7634:	6001      	str	r1, [r0, #0]
   b7636:	6041      	str	r1, [r0, #4]
    clear();
   b7638:	f7ff fff3 	bl	b7622 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b763c:	7191      	strb	r1, [r2, #6]
}
   b763e:	4610      	mov	r0, r2
   b7640:	bd08      	pop	{r3, pc}
	...

000b7644 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7644:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7646:	2301      	movs	r3, #1
   b7648:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b764a:	4b05      	ldr	r3, [pc, #20]	; (b7660 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b764c:	4602      	mov	r2, r0
   b764e:	f103 0110 	add.w	r1, r3, #16
   b7652:	f853 4b04 	ldr.w	r4, [r3], #4
   b7656:	f842 4b04 	str.w	r4, [r2], #4
   b765a:	428b      	cmp	r3, r1
   b765c:	d1f9      	bne.n	b7652 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b765e:	bd10      	pop	{r4, pc}
   b7660:	000bd4e6 	.word	0x000bd4e6

000b7664 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7664:	b510      	push	{r4, lr}
    if (uuid128) {
   b7666:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7668:	4604      	mov	r4, r0
    if (uuid128) {
   b766a:	b1b1      	cbz	r1, b769a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b766c:	2a01      	cmp	r2, #1
   b766e:	f101 0210 	add.w	r2, r1, #16
   b7672:	d10a      	bne.n	b768a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7674:	4601      	mov	r1, r0
   b7676:	f853 0b04 	ldr.w	r0, [r3], #4
   b767a:	f841 0b04 	str.w	r0, [r1], #4
   b767e:	4293      	cmp	r3, r2
   b7680:	d1f9      	bne.n	b7676 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7682:	2301      	movs	r3, #1
   b7684:	6123      	str	r3, [r4, #16]
}
   b7686:	4620      	mov	r0, r4
   b7688:	bd10      	pop	{r4, pc}
   b768a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b768c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7690:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7694:	429a      	cmp	r2, r3
   b7696:	d1f9      	bne.n	b768c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7698:	e7f3      	b.n	b7682 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b769a:	2210      	movs	r2, #16
   b769c:	f003 fa2f 	bl	baafe <memset>
   b76a0:	e7f1      	b.n	b7686 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b76a2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b76a2:	b538      	push	{r3, r4, r5, lr}
   b76a4:	4604      	mov	r4, r0
   b76a6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b76a8:	461a      	mov	r2, r3
   b76aa:	f7ff ffdb 	bl	b7664 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b76ae:	81a5      	strh	r5, [r4, #12]
}
   b76b0:	4620      	mov	r0, r4
   b76b2:	bd38      	pop	{r3, r4, r5, pc}

000b76b4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b76b4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b76b6:	6902      	ldr	r2, [r0, #16]
   b76b8:	b922      	cbnz	r2, b76c4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b76ba:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b76bc:	3800      	subs	r0, #0
   b76be:	bf18      	it	ne
   b76c0:	2001      	movne	r0, #1
}
   b76c2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b76c4:	4902      	ldr	r1, [pc, #8]	; (b76d0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b76c6:	2210      	movs	r2, #16
   b76c8:	f003 f9e1 	bl	baa8e <memcmp>
   b76cc:	e7f6      	b.n	b76bc <_ZNK8particle7BleUuid7isValidEv+0x8>
   b76ce:	bf00      	nop
   b76d0:	000bd506 	.word	0x000bd506

000b76d4 <_ZNK8particle7BleUuid4typeEv>:
}
   b76d4:	6900      	ldr	r0, [r0, #16]
   b76d6:	4770      	bx	lr

000b76d8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b76d8:	b538      	push	{r3, r4, r5, lr}
   b76da:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b76dc:	2214      	movs	r2, #20
   b76de:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b76e0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b76e2:	f003 fa0c 	bl	baafe <memset>
    if (type_ == BleUuidType::SHORT) {
   b76e6:	6923      	ldr	r3, [r4, #16]
   b76e8:	b91b      	cbnz	r3, b76f2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b76ea:	89a3      	ldrh	r3, [r4, #12]
   b76ec:	802b      	strh	r3, [r5, #0]
}
   b76ee:	4628      	mov	r0, r5
   b76f0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b76f2:	2301      	movs	r3, #1
   b76f4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b76f6:	4621      	mov	r1, r4
   b76f8:	462b      	mov	r3, r5
   b76fa:	f104 0210 	add.w	r2, r4, #16
   b76fe:	f851 0b04 	ldr.w	r0, [r1], #4
   b7702:	f843 0b04 	str.w	r0, [r3], #4
   b7706:	4291      	cmp	r1, r2
   b7708:	d1f9      	bne.n	b76fe <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b770a:	e7f0      	b.n	b76ee <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b770c <_ZNK8particle7BleUuid7shortedEv>:
}
   b770c:	8980      	ldrh	r0, [r0, #12]
   b770e:	4770      	bx	lr

000b7710 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7710:	4770      	bx	lr

000b7712 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7712:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7714:	6902      	ldr	r2, [r0, #16]
   b7716:	690b      	ldr	r3, [r1, #16]
   b7718:	429a      	cmp	r2, r3
   b771a:	d106      	bne.n	b772a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b771c:	2210      	movs	r2, #16
   b771e:	f003 f9b6 	bl	baa8e <memcmp>
   b7722:	fab0 f080 	clz	r0, r0
   b7726:	0940      	lsrs	r0, r0, #5
}
   b7728:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b772a:	2000      	movs	r0, #0
   b772c:	e7fc      	b.n	b7728 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7730 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7730:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7732:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7736:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7738:	4b34      	ldr	r3, [pc, #208]	; (b780c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b773a:	460c      	mov	r4, r1
   b773c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b773e:	4602      	mov	r2, r0
   b7740:	f103 0110 	add.w	r1, r3, #16
   b7744:	f853 0b04 	ldr.w	r0, [r3], #4
   b7748:	f842 0b04 	str.w	r0, [r2], #4
   b774c:	428b      	cmp	r3, r1
   b774e:	d1f9      	bne.n	b7744 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7750:	b344      	cbz	r4, b77a4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7752:	2124      	movs	r1, #36	; 0x24
   b7754:	4620      	mov	r0, r4
   b7756:	f003 fa77 	bl	bac48 <strnlen>
   b775a:	2804      	cmp	r0, #4
   b775c:	f04f 0500 	mov.w	r5, #0
   b7760:	d123      	bne.n	b77aa <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7762:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7766:	af01      	add	r7, sp, #4
   b7768:	1ca5      	adds	r5, r4, #2
   b776a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b776c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7770:	f7ff ff0d 	bl	b758e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7774:	f1b0 0800 	subs.w	r8, r0, #0
   b7778:	db12      	blt.n	b77a0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b777a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b777e:	f7ff ff06 	bl	b758e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7782:	2800      	cmp	r0, #0
   b7784:	db0c      	blt.n	b77a0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7786:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7788:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b778c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b778e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7792:	d1eb      	bne.n	b776c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7794:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7798:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b779a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b779e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b77a0:	2300      	movs	r3, #0
   b77a2:	6133      	str	r3, [r6, #16]
}
   b77a4:	b002      	add	sp, #8
   b77a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b77aa:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b77ae:	2124      	movs	r1, #36	; 0x24
   b77b0:	4620      	mov	r0, r4
   b77b2:	f003 fa49 	bl	bac48 <strnlen>
   b77b6:	42a8      	cmp	r0, r5
   b77b8:	d807      	bhi.n	b77ca <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b77ba:	4642      	mov	r2, r8
   b77bc:	2100      	movs	r1, #0
   b77be:	4630      	mov	r0, r6
}
   b77c0:	b002      	add	sp, #8
   b77c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b77c6:	f003 b99a 	b.w	baafe <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b77ca:	f1b8 0f00 	cmp.w	r8, #0
   b77ce:	d0e9      	beq.n	b77a4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b77d0:	5d60      	ldrb	r0, [r4, r5]
   b77d2:	f7ff fedc 	bl	b758e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b77d6:	0603      	lsls	r3, r0, #24
   b77d8:	d415      	bmi.n	b7806 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b77da:	0100      	lsls	r0, r0, #4
   b77dc:	f108 38ff 	add.w	r8, r8, #4294967295
   b77e0:	b2c7      	uxtb	r7, r0
   b77e2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b77e6:	2124      	movs	r1, #36	; 0x24
   b77e8:	4620      	mov	r0, r4
   b77ea:	f003 fa2d 	bl	bac48 <strnlen>
   b77ee:	3501      	adds	r5, #1
   b77f0:	42a8      	cmp	r0, r5
   b77f2:	d908      	bls.n	b7806 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b77f4:	5d60      	ldrb	r0, [r4, r5]
   b77f6:	f7ff feca 	bl	b758e <_ZN8particle11hexToNibbleEc>
   b77fa:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b77fc:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b77fe:	bfa4      	itt	ge
   b7800:	4338      	orrge	r0, r7
   b7802:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7806:	3501      	adds	r5, #1
   b7808:	e7d1      	b.n	b77ae <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b780a:	bf00      	nop
   b780c:	000bd4e6 	.word	0x000bd4e6

000b7810 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7810:	b513      	push	{r0, r1, r4, lr}
   b7812:	4604      	mov	r4, r0
   b7814:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7816:	f7ff ff15 	bl	b7644 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b781a:	4620      	mov	r0, r4
   b781c:	9901      	ldr	r1, [sp, #4]
   b781e:	f7ff ff87 	bl	b7730 <_ZN8particle7BleUuid9constructEPKc>
}
   b7822:	4620      	mov	r0, r4
   b7824:	b002      	add	sp, #8
   b7826:	bd10      	pop	{r4, pc}

000b7828 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7828:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b782a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b782e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7830:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7832:	8043      	strh	r3, [r0, #2]
   b7834:	220e      	movs	r2, #14
   b7836:	4629      	mov	r1, r5
   b7838:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b783a:	7105      	strb	r5, [r0, #4]
   b783c:	3006      	adds	r0, #6
   b783e:	f003 f95e 	bl	baafe <memset>
   b7842:	f104 0014 	add.w	r0, r4, #20
   b7846:	f7ff fefd 	bl	b7644 <_ZN8particle7BleUuidC1Ev>
   b784a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b784e:	f7ff fef9 	bl	b7644 <_ZN8particle7BleUuidC1Ev>
   b7852:	4904      	ldr	r1, [pc, #16]	; (b7864 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7854:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7858:	f7ff fcf7 	bl	b724a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b785c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b785e:	4620      	mov	r0, r4
   b7860:	bd38      	pop	{r3, r4, r5, pc}
   b7862:	bf00      	nop
   b7864:	000bcd64 	.word	0x000bcd64

000b7868 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7868:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b786a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b786e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7872:	4293      	cmp	r3, r2
   b7874:	4618      	mov	r0, r3
   b7876:	d006      	beq.n	b7886 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7878:	6804      	ldr	r4, [r0, #0]
   b787a:	8824      	ldrh	r4, [r4, #0]
   b787c:	428c      	cmp	r4, r1
   b787e:	f103 0308 	add.w	r3, r3, #8
   b7882:	d1f6      	bne.n	b7872 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7884:	bd10      	pop	{r4, pc}
        return nullptr;
   b7886:	2000      	movs	r0, #0
   b7888:	e7fc      	b.n	b7884 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b788c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b788c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b788e:	4606      	mov	r6, r0
   b7890:	b085      	sub	sp, #20
   b7892:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7894:	460d      	mov	r5, r1
   b7896:	2900      	cmp	r1, #0
   b7898:	d050      	beq.n	b793c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b789a:	2a00      	cmp	r2, #0
   b789c:	d04e      	beq.n	b793c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b789e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b78a0:	7823      	ldrb	r3, [r4, #0]
   b78a2:	2af4      	cmp	r2, #244	; 0xf4
   b78a4:	bf28      	it	cs
   b78a6:	22f4      	movcs	r2, #244	; 0xf4
   b78a8:	b343      	cbz	r3, b78fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b78aa:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b78ac:	0798      	lsls	r0, r3, #30
   b78ae:	d509      	bpl.n	b78c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b78b0:	89a0      	ldrh	r0, [r4, #12]
   b78b2:	9203      	str	r2, [sp, #12]
   b78b4:	2300      	movs	r3, #0
   b78b6:	f7fe fd53 	bl	b6360 <hal_ble_gatt_server_set_characteristic_value>
   b78ba:	2800      	cmp	r0, #0
   b78bc:	9a03      	ldr	r2, [sp, #12]
   b78be:	da03      	bge.n	b78c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b78c0:	b005      	add	sp, #20
   b78c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b78c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b78c8:	6834      	ldr	r4, [r6, #0]
   b78ca:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b78cc:	06d9      	lsls	r1, r3, #27
   b78ce:	d509      	bpl.n	b78e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b78d0:	2f01      	cmp	r7, #1
   b78d2:	d007      	beq.n	b78e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b78d4:	89a0      	ldrh	r0, [r4, #12]
   b78d6:	2300      	movs	r3, #0
   b78d8:	4629      	mov	r1, r5
}
   b78da:	b005      	add	sp, #20
   b78dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b78e0:	f7fe bd70 	b.w	b63c4 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b78e4:	069b      	lsls	r3, r3, #26
   b78e6:	d5eb      	bpl.n	b78c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b78e8:	2f02      	cmp	r7, #2
   b78ea:	d0e9      	beq.n	b78c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b78ec:	89a0      	ldrh	r0, [r4, #12]
   b78ee:	2300      	movs	r3, #0
   b78f0:	4629      	mov	r1, r5
}
   b78f2:	b005      	add	sp, #20
   b78f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b78f8:	f7fe bd6e 	b.w	b63d8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b78fc:	8860      	ldrh	r0, [r4, #2]
   b78fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7902:	4288      	cmp	r0, r1
   b7904:	d01c      	beq.n	b7940 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7906:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7908:	074e      	lsls	r6, r1, #29
   b790a:	d501      	bpl.n	b7910 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b790c:	2f01      	cmp	r7, #1
   b790e:	d104      	bne.n	b791a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7910:	070b      	lsls	r3, r1, #28
   b7912:	d409      	bmi.n	b7928 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7914:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7918:	e7d2      	b.n	b78c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b791a:	89a1      	ldrh	r1, [r4, #12]
   b791c:	9300      	str	r3, [sp, #0]
   b791e:	4613      	mov	r3, r2
   b7920:	462a      	mov	r2, r5
   b7922:	f7fe fd31 	bl	b6388 <hal_ble_gatt_client_write_without_response>
   b7926:	e7cb      	b.n	b78c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7928:	2f02      	cmp	r7, #2
   b792a:	d0f3      	beq.n	b7914 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b792c:	2300      	movs	r3, #0
   b792e:	89a1      	ldrh	r1, [r4, #12]
   b7930:	9300      	str	r3, [sp, #0]
   b7932:	4613      	mov	r3, r2
   b7934:	462a      	mov	r2, r5
   b7936:	f7fe fd1d 	bl	b6374 <hal_ble_gatt_client_write_with_response>
   b793a:	e7c1      	b.n	b78c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b793c:	4802      	ldr	r0, [pc, #8]	; (b7948 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b793e:	e7bf      	b.n	b78c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7940:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7944:	e7bc      	b.n	b78c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7946:	bf00      	nop
   b7948:	fffffef2 	.word	0xfffffef2

000b794c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b794c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b794e:	460c      	mov	r4, r1
   b7950:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7952:	21f4      	movs	r1, #244	; 0xf4
   b7954:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7956:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7958:	f003 f976 	bl	bac48 <strnlen>
   b795c:	9b01      	ldr	r3, [sp, #4]
   b795e:	4602      	mov	r2, r0
   b7960:	4621      	mov	r1, r4
   b7962:	4628      	mov	r0, r5
}
   b7964:	b003      	add	sp, #12
   b7966:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b796a:	f7ff bf8f 	b.w	b788c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b7970 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7974:	2600      	movs	r6, #0
   b7976:	6006      	str	r6, [r0, #0]
   b7978:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b797a:	2028      	movs	r0, #40	; 0x28
   b797c:	460c      	mov	r4, r1
   b797e:	f7fc fb8a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7982:	1e05      	subs	r5, r0, #0
   b7984:	f105 080c 	add.w	r8, r5, #12
   b7988:	d00f      	beq.n	b79aa <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b798a:	2301      	movs	r3, #1
   b798c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7990:	4b08      	ldr	r3, [pc, #32]	; (b79b4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7992:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7994:	4640      	mov	r0, r8
   b7996:	f7ff fe55 	bl	b7644 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b799a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b799c:	622e      	str	r6, [r5, #32]
   b799e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b79a2:	4646      	mov	r6, r8
   b79a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b79a6:	6823      	ldr	r3, [r4, #0]
   b79a8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b79aa:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b79ae:	4638      	mov	r0, r7
   b79b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b79b4:	000bd4a8 	.word	0x000bd4a8

000b79b8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b79b8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b79ba:	2500      	movs	r5, #0
   b79bc:	6005      	str	r5, [r0, #0]
   b79be:	4606      	mov	r6, r0
   b79c0:	2030      	movs	r0, #48	; 0x30
   b79c2:	f7fc fb68 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b79c6:	4604      	mov	r4, r0
   b79c8:	b188      	cbz	r0, b79ee <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b79ca:	2301      	movs	r3, #1
   b79cc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b79d0:	4b09      	ldr	r3, [pc, #36]	; (b79f8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b79d2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b79d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b79d8:	8183      	strh	r3, [r0, #12]
   b79da:	300e      	adds	r0, #14
   b79dc:	f7ff fe27 	bl	b762e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b79e0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b79e4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b79e8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b79ec:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b79ee:	6074      	str	r4, [r6, #4]
   b79f0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b79f2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b79f4:	4630      	mov	r0, r6
   b79f6:	bd70      	pop	{r4, r5, r6, pc}
   b79f8:	000bd4c4 	.word	0x000bd4c4

000b79fc <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b79fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b79fe:	460d      	mov	r5, r1
   b7a00:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7a02:	a801      	add	r0, sp, #4
   b7a04:	f7ff fdd8 	bl	b75b8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7a08:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7a0a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7a0e:	6023      	str	r3, [r4, #0]
   b7a10:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7a14:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7a16:	a801      	add	r0, sp, #4
   b7a18:	f7ff fddc 	bl	b75d4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7a1c:	4620      	mov	r0, r4
   b7a1e:	b003      	add	sp, #12
   b7a20:	bd30      	pop	{r4, r5, pc}

000b7a22 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7a22:	b530      	push	{r4, r5, lr}
   b7a24:	4605      	mov	r5, r0
   b7a26:	b087      	sub	sp, #28
   b7a28:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7a2a:	a801      	add	r0, sp, #4
   b7a2c:	f7ff fdc4 	bl	b75b8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7a30:	682a      	ldr	r2, [r5, #0]
   b7a32:	6823      	ldr	r3, [r4, #0]
   b7a34:	8812      	ldrh	r2, [r2, #0]
   b7a36:	881b      	ldrh	r3, [r3, #0]
   b7a38:	429a      	cmp	r2, r3
   b7a3a:	d10d      	bne.n	b7a58 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7a3c:	4629      	mov	r1, r5
   b7a3e:	a802      	add	r0, sp, #8
   b7a40:	f7ff ffdc 	bl	b79fc <_ZNK8particle13BlePeerDevice7addressEv>
   b7a44:	4621      	mov	r1, r4
   b7a46:	a804      	add	r0, sp, #16
   b7a48:	f7ff ffd8 	bl	b79fc <_ZNK8particle13BlePeerDevice7addressEv>
   b7a4c:	a904      	add	r1, sp, #16
   b7a4e:	a802      	add	r0, sp, #8
   b7a50:	f7ff fdd9 	bl	b7606 <_ZNK8particle10BleAddresseqERKS0_>
   b7a54:	4604      	mov	r4, r0
   b7a56:	b900      	cbnz	r0, b7a5a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7a58:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7a5a:	a801      	add	r0, sp, #4
   b7a5c:	f7ff fdba 	bl	b75d4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7a60:	4620      	mov	r0, r4
   b7a62:	b007      	add	sp, #28
   b7a64:	bd30      	pop	{r4, r5, pc}
	...

000b7a68 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7a68:	b510      	push	{r4, lr}
   b7a6a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7a6c:	2064      	movs	r0, #100	; 0x64
   b7a6e:	f7fc fb12 	bl	b4096 <_Znwj>
   b7a72:	b168      	cbz	r0, b7a90 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7a74:	2300      	movs	r3, #0
   b7a76:	e9c0 3300 	strd	r3, r3, [r0]
   b7a7a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7a82:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7a86:	6203      	str	r3, [r0, #32]
   b7a88:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7a8a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7a8c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7a8e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7a90:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7a92:	b920      	cbnz	r0, b7a9e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7a94:	4a0a      	ldr	r2, [pc, #40]	; (b7ac0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7a96:	490b      	ldr	r1, [pc, #44]	; (b7ac4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7a98:	200a      	movs	r0, #10
   b7a9a:	f7fe fe2f 	bl	b66fc <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7a9e:	2000      	movs	r0, #0
   b7aa0:	f7fe fc2a 	bl	b62f8 <hal_ble_stack_init>
   b7aa4:	b120      	cbz	r0, b7ab0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7aa6:	4a06      	ldr	r2, [pc, #24]	; (b7ac0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7aa8:	4907      	ldr	r1, [pc, #28]	; (b7ac8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7aaa:	200a      	movs	r0, #10
   b7aac:	f7fe fe26 	bl	b66fc <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7ab0:	6821      	ldr	r1, [r4, #0]
   b7ab2:	4806      	ldr	r0, [pc, #24]	; (b7acc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7ab4:	2200      	movs	r2, #0
   b7ab6:	f7fe fc7b 	bl	b63b0 <hal_ble_set_callback_on_periph_link_events>
}
   b7aba:	4620      	mov	r0, r4
   b7abc:	bd10      	pop	{r4, pc}
   b7abe:	bf00      	nop
   b7ac0:	000b62a9 	.word	0x000b62a9
   b7ac4:	000bd338 	.word	0x000bd338
   b7ac8:	000bd376 	.word	0x000bd376
   b7acc:	000b8095 	.word	0x000b8095

000b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7ad0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7ad2:	4c0a      	ldr	r4, [pc, #40]	; (b7afc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7ad4:	7823      	ldrb	r3, [r4, #0]
   b7ad6:	f3bf 8f5b 	dmb	ish
   b7ada:	07db      	lsls	r3, r3, #31
   b7adc:	d40c      	bmi.n	b7af8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7ade:	4620      	mov	r0, r4
   b7ae0:	f7fc fae1 	bl	b40a6 <__cxa_guard_acquire>
   b7ae4:	b140      	cbz	r0, b7af8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7ae6:	4806      	ldr	r0, [pc, #24]	; (b7b00 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7ae8:	f7ff ffbe 	bl	b7a68 <_ZN8particle14BleLocalDeviceC1Ev>
   b7aec:	4620      	mov	r0, r4
   b7aee:	f7fc fadf 	bl	b40b0 <__cxa_guard_release>
   b7af2:	4804      	ldr	r0, [pc, #16]	; (b7b04 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7af4:	f002 ffaa 	bl	baa4c <atexit>
    return instance;
}
   b7af8:	4801      	ldr	r0, [pc, #4]	; (b7b00 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7afa:	bd10      	pop	{r4, pc}
   b7afc:	2003e680 	.word	0x2003e680
   b7b00:	2003e68c 	.word	0x2003e68c
   b7b04:	000b7d3d 	.word	0x000b7d3d

000b7b08 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7b08:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7b0a:	6803      	ldr	r3, [r0, #0]
   b7b0c:	3b09      	subs	r3, #9
   b7b0e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7b10:	b08d      	sub	sp, #52	; 0x34
   b7b12:	4604      	mov	r4, r0
   b7b14:	460d      	mov	r5, r1
    switch (event->type) {
   b7b16:	d811      	bhi.n	b7b3c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7b18:	f7ff ffda 	bl	b7ad0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7b1c:	88a1      	ldrh	r1, [r4, #4]
   b7b1e:	6800      	ldr	r0, [r0, #0]
   b7b20:	f7ff fea2 	bl	b7868 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7b24:	4603      	mov	r3, r0
   b7b26:	b958      	cbnz	r0, b7b40 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7b28:	2220      	movs	r2, #32
   b7b2a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7b2e:	4a0b      	ldr	r2, [pc, #44]	; (b7b5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7b30:	9200      	str	r2, [sp, #0]
   b7b32:	490b      	ldr	r1, [pc, #44]	; (b7b60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7b34:	aa04      	add	r2, sp, #16
   b7b36:	2032      	movs	r0, #50	; 0x32
   b7b38:	f7fe fde8 	bl	b670c <log_message>
}
   b7b3c:	b00d      	add	sp, #52	; 0x34
   b7b3e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7b40:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7b42:	2a00      	cmp	r2, #0
   b7b44:	d0fa      	beq.n	b7b3c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7b46:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7b4a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7b4e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7b52:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7b54:	aa04      	add	r2, sp, #16
   b7b56:	a903      	add	r1, sp, #12
   b7b58:	47a0      	blx	r4
}
   b7b5a:	e7ef      	b.n	b7b3c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7b5c:	000bd3b8 	.word	0x000bd3b8
   b7b60:	000bd34f 	.word	0x000bd34f

000b7b64 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7b64:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7b66:	2000      	movs	r0, #0
   b7b68:	f7fe fbc6 	bl	b62f8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7b6c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7b70:	bd08      	pop	{r3, pc}

000b7b72 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b7b72:	b919      	cbnz	r1, b7b7c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7b74:	460a      	mov	r2, r1
   b7b76:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7b78:	f7fe bbc6 	b.w	b6308 <hal_ble_gap_set_advertising_data>
   b7b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b80:	2200      	movs	r2, #0
   b7b82:	e7f9      	b.n	b7b78 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b7b84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7b84:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7b86:	1e14      	subs	r4, r2, #0
   b7b88:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7b8a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7b8c:	db02      	blt.n	b7b94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b7b8e:	1862      	adds	r2, r4, r1
   b7b90:	429a      	cmp	r2, r3
   b7b92:	dd00      	ble.n	b7b96 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7b94:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7b96:	682a      	ldr	r2, [r5, #0]
   b7b98:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7b9a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7b9c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b9e:	1a52      	subs	r2, r2, r1
   b7ba0:	f002 ff93 	bl	baaca <memmove>
    size_ -= n;
   b7ba4:	686a      	ldr	r2, [r5, #4]
   b7ba6:	1b12      	subs	r2, r2, r4
   b7ba8:	606a      	str	r2, [r5, #4]
}
   b7baa:	bd38      	pop	{r3, r4, r5, pc}

000b7bac <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b7bae:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7bb0:	4604      	mov	r4, r0
   b7bb2:	460d      	mov	r5, r1
   b7bb4:	ab01      	add	r3, sp, #4
   b7bb6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7bba:	f7ff fc57 	bl	b746c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b7bbe:	4602      	mov	r2, r0
   b7bc0:	b138      	cbz	r0, b7bd2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7bc2:	9901      	ldr	r1, [sp, #4]
   b7bc4:	4620      	mov	r0, r4
   b7bc6:	f7ff ffdd 	bl	b7b84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7bca:	4629      	mov	r1, r5
   b7bcc:	4620      	mov	r0, r4
   b7bce:	f7ff ffed 	bl	b7bac <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7bd2:	b003      	add	sp, #12
   b7bd4:	bd30      	pop	{r4, r5, pc}

000b7bd6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7bd6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7bd8:	460c      	mov	r4, r1
   b7bda:	b929      	cbnz	r1, b7be8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7bdc:	460a      	mov	r2, r1
   b7bde:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7be4:	f7fe bb98 	b.w	b6318 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7be8:	2101      	movs	r1, #1
   b7bea:	4620      	mov	r0, r4
   b7bec:	f7ff ffde 	bl	b7bac <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7bf0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7bf4:	2200      	movs	r2, #0
   b7bf6:	e7f3      	b.n	b7be0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7bf8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7bf8:	b538      	push	{r3, r4, r5, lr}
   b7bfa:	4604      	mov	r4, r0
   b7bfc:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7bfe:	f7ff ffb8 	bl	b7b72 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7c02:	2800      	cmp	r0, #0
   b7c04:	db0a      	blt.n	b7c1c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7c06:	4629      	mov	r1, r5
   b7c08:	4620      	mov	r0, r4
   b7c0a:	f7ff ffe4 	bl	b7bd6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7c0e:	2800      	cmp	r0, #0
   b7c10:	db04      	blt.n	b7c1c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7c16:	2000      	movs	r0, #0
   b7c18:	f7fe bb86 	b.w	b6328 <hal_ble_gap_start_advertising>
}
   b7c1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7c20 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7c20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7c22:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7c24:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7c26:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7c28:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7c2a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7c2c:	f7fc fa33 	bl	b4096 <_Znwj>
   b7c30:	b118      	cbz	r0, b7c3a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7c32:	682b      	ldr	r3, [r5, #0]
   b7c34:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7c36:	686b      	ldr	r3, [r5, #4]
   b7c38:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7c3a:	4b03      	ldr	r3, [pc, #12]	; (b7c48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7c3c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7c3e:	4b03      	ldr	r3, [pc, #12]	; (b7c4c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7c40:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7c42:	60a3      	str	r3, [r4, #8]
      }
   b7c44:	4620      	mov	r0, r4
   b7c46:	bd38      	pop	{r3, r4, r5, pc}
   b7c48:	000b74b9 	.word	0x000b74b9
   b7c4c:	000b7511 	.word	0x000b7511

000b7c50 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7c50:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7c52:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7c54:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7c56:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7c58:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7c5a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7c5c:	f7fc fa1b 	bl	b4096 <_Znwj>
   b7c60:	b118      	cbz	r0, b7c6a <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b7c62:	682b      	ldr	r3, [r5, #0]
   b7c64:	6003      	str	r3, [r0, #0]
   b7c66:	686b      	ldr	r3, [r5, #4]
   b7c68:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7c6a:	4b03      	ldr	r3, [pc, #12]	; (b7c78 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b7c6c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7c6e:	4b03      	ldr	r3, [pc, #12]	; (b7c7c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7c70:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7c72:	60a3      	str	r3, [r4, #8]
      }
   b7c74:	4620      	mov	r0, r4
   b7c76:	bd38      	pop	{r3, r4, r5, pc}
   b7c78:	000b74ad 	.word	0x000b74ad
   b7c7c:	000b74d1 	.word	0x000b74d1

000b7c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7c80:	680b      	ldr	r3, [r1, #0]
   b7c82:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7c84:	b113      	cbz	r3, b7c8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7c86:	685a      	ldr	r2, [r3, #4]
   b7c88:	3201      	adds	r2, #1
   b7c8a:	605a      	str	r2, [r3, #4]
      }
   b7c8c:	4770      	bx	lr

000b7c8e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b7c8e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7c90:	f851 3b04 	ldr.w	r3, [r1], #4
   b7c94:	4604      	mov	r4, r0
   b7c96:	f840 3b04 	str.w	r3, [r0], #4
   b7c9a:	f7ff fff1 	bl	b7c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b7c9e:	6823      	ldr	r3, [r4, #0]
   b7ca0:	b90b      	cbnz	r3, b7ca6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b7ca2:	f7ff fbf9 	bl	b7498 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7ca6:	4620      	mov	r0, r4
   b7ca8:	bd10      	pop	{r4, pc}

000b7caa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7caa:	b510      	push	{r4, lr}
   b7cac:	f851 3b04 	ldr.w	r3, [r1], #4
   b7cb0:	4604      	mov	r4, r0
   b7cb2:	f840 3b04 	str.w	r3, [r0], #4
   b7cb6:	f7ff ffe3 	bl	b7c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7cba:	4620      	mov	r0, r4
   b7cbc:	bd10      	pop	{r4, pc}

000b7cbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7cbe:	b510      	push	{r4, lr}
   b7cc0:	f851 3b04 	ldr.w	r3, [r1], #4
   b7cc4:	4604      	mov	r4, r0
   b7cc6:	f840 3b04 	str.w	r3, [r0], #4
   b7cca:	f7ff ffd9 	bl	b7c80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7cce:	4620      	mov	r0, r4
   b7cd0:	bd10      	pop	{r4, pc}

000b7cd2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7cd2:	b510      	push	{r4, lr}
   b7cd4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7cd6:	3004      	adds	r0, #4
   b7cd8:	f7fc fe1a 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7cdc:	4620      	mov	r0, r4
   b7cde:	bd10      	pop	{r4, pc}

000b7ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7ce0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7ce2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7ce6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7ce8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7cec:	42ae      	cmp	r6, r5
   b7cee:	d004      	beq.n	b7cfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7cf0:	1d28      	adds	r0, r5, #4
   b7cf2:	f7fc fe0d 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7cf6:	3508      	adds	r5, #8
   b7cf8:	e7f8      	b.n	b7cec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7cfa:	6820      	ldr	r0, [r4, #0]
   b7cfc:	f7fe fdf2 	bl	b68e4 <free>
}
   b7d00:	4620      	mov	r0, r4
   b7d02:	bd70      	pop	{r4, r5, r6, pc}

000b7d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7d04:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7d06:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7d0a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7d0c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7d10:	42ae      	cmp	r6, r5
   b7d12:	d004      	beq.n	b7d1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7d14:	1d28      	adds	r0, r5, #4
   b7d16:	f7fc fdfb 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d1a:	3508      	adds	r5, #8
   b7d1c:	e7f8      	b.n	b7d10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7d1e:	6820      	ldr	r0, [r4, #0]
   b7d20:	f7fe fde0 	bl	b68e4 <free>
}
   b7d24:	4620      	mov	r0, r4
   b7d26:	bd70      	pop	{r4, r5, r6, pc}

000b7d28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7d28:	b510      	push	{r4, lr}
   b7d2a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7d2c:	3024      	adds	r0, #36	; 0x24
   b7d2e:	f7ff ffe9 	bl	b7d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7d32:	f104 0018 	add.w	r0, r4, #24
   b7d36:	f7ff ffd3 	bl	b7ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7d3a:	bd10      	pop	{r4, pc}

000b7d3c <__tcf_0>:
    static BleLocalDevice instance;
   b7d3c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7d3e:	4b17      	ldr	r3, [pc, #92]	; (b7d9c <__tcf_0+0x60>)
   b7d40:	681c      	ldr	r4, [r3, #0]
   b7d42:	b354      	cbz	r4, b7d9a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7d44:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7d48:	f7fc fad0 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
   b7d4c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7d50:	f7fc facc 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
   b7d54:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7d58:	f7fc fac8 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
   b7d5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7d60:	f7fc fac4 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7d64:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7d68:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7d6c:	42ae      	cmp	r6, r5
   b7d6e:	d004      	beq.n	b7d7a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7d70:	1d28      	adds	r0, r5, #4
   b7d72:	f7fc fdcd 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d76:	3508      	adds	r5, #8
   b7d78:	e7f8      	b.n	b7d6c <__tcf_0+0x30>
    ::free(ptr);
   b7d7a:	69a0      	ldr	r0, [r4, #24]
   b7d7c:	f7fe fdb2 	bl	b68e4 <free>
    ~BleLocalDeviceImpl() = default;
   b7d80:	f104 000c 	add.w	r0, r4, #12
   b7d84:	f7ff ffbe 	bl	b7d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7d88:	4620      	mov	r0, r4
   b7d8a:	f7ff ffa9 	bl	b7ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7d8e:	4620      	mov	r0, r4
   b7d90:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b7d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7d96:	f7fc b984 	b.w	b40a2 <_ZdlPvj>
   b7d9a:	bd70      	pop	{r4, r5, r6, pc}
   b7d9c:	2003e68c 	.word	0x2003e68c

000b7da0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b7da0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b7da2:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7da4:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7da8:	e9c1 3300 	strd	r3, r3, [r1]
   b7dac:	6803      	ldr	r3, [r0, #0]
   b7dae:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7db0:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7db2:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7db4:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7db6:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7db8:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7dba:	f7fc fda9 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7dbe:	b002      	add	sp, #8
   b7dc0:	bd10      	pop	{r4, pc}

000b7dc2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7dc2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7dc4:	b510      	push	{r4, lr}
      if (_M_empty())
   b7dc6:	b90a      	cbnz	r2, b7dcc <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7dc8:	f002 f862 	bl	b9e90 <_ZSt25__throw_bad_function_callv>
    }
   b7dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7dd0:	68c3      	ldr	r3, [r0, #12]
   b7dd2:	4718      	bx	r3

000b7dd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7dd4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7dd6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7dd8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7dda:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7ddc:	dd03      	ble.n	b7de6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7dde:	f7fe fd89 	bl	b68f4 <realloc>
            if (!d) {
   b7de2:	b918      	cbnz	r0, b7dec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7de4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7de6:	f7fe fd7d 	bl	b68e4 <free>
        T* d = nullptr;
   b7dea:	2000      	movs	r0, #0
        data_ = d;
   b7dec:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7dee:	60a5      	str	r5, [r4, #8]
        return true;
   b7df0:	2001      	movs	r0, #1
   b7df2:	e7f7      	b.n	b7de4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7df4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7df4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7df6:	6883      	ldr	r3, [r0, #8]
   b7df8:	428b      	cmp	r3, r1
   b7dfa:	da02      	bge.n	b7e02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7dfc:	f7ff ffea 	bl	b7dd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7e00:	bd08      	pop	{r3, pc}
    return true;
   b7e02:	2001      	movs	r0, #1
   b7e04:	e7fc      	b.n	b7e00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7e06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7e0a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7e0c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7e0e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7e10:	4419      	add	r1, r3
   b7e12:	6883      	ldr	r3, [r0, #8]
   b7e14:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7e16:	4604      	mov	r4, r0
   b7e18:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7e1a:	dc12      	bgt.n	b7e42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7e1c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7e1e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7e20:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7e22:	1bd2      	subs	r2, r2, r7
   b7e24:	4631      	mov	r1, r6
   b7e26:	1970      	adds	r0, r6, r5
   b7e28:	f002 fe4f 	bl	baaca <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7e2c:	462a      	mov	r2, r5
   b7e2e:	4641      	mov	r1, r8
   b7e30:	4630      	mov	r0, r6
   b7e32:	f002 fe3c 	bl	baaae <memcpy>
    size_ += n;
   b7e36:	6863      	ldr	r3, [r4, #4]
   b7e38:	442b      	add	r3, r5
   b7e3a:	6063      	str	r3, [r4, #4]
    return true;
   b7e3c:	2001      	movs	r0, #1
}
   b7e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7e42:	f7ff ffc7 	bl	b7dd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7e46:	2800      	cmp	r0, #0
   b7e48:	d1e8      	bne.n	b7e1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7e4a:	e7f8      	b.n	b7e3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7e4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e4e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e50:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7e54:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7e56:	4604      	mov	r4, r0
   b7e58:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e5a:	da0b      	bge.n	b7e74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7e5c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7e5e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7e60:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7e62:	1b52      	subs	r2, r2, r5
   b7e64:	1c48      	adds	r0, r1, #1
   b7e66:	f002 fe30 	bl	baaca <memmove>
    new(p) T(std::move(value));
   b7e6a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7e6c:	6863      	ldr	r3, [r4, #4]
   b7e6e:	3301      	adds	r3, #1
   b7e70:	6063      	str	r3, [r4, #4]
}
   b7e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7e74:	3101      	adds	r1, #1
   b7e76:	f7ff ffad 	bl	b7dd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7e7a:	2800      	cmp	r0, #0
   b7e7c:	d1ee      	bne.n	b7e5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7e7e:	e7f8      	b.n	b7e72 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7e80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7e80:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7e82:	6841      	ldr	r1, [r0, #4]
   b7e84:	f7ff bfe2 	b.w	b7e4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7e88 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7e8c:	4604      	mov	r4, r0
   b7e8e:	461d      	mov	r5, r3
   b7e90:	460f      	mov	r7, r1
   b7e92:	ab01      	add	r3, sp, #4
   b7e94:	4690      	mov	r8, r2
   b7e96:	460a      	mov	r2, r1
   b7e98:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7e9c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7ea0:	f7ff fae4 	bl	b746c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7ea4:	1cae      	adds	r6, r5, #2
   b7ea6:	6863      	ldr	r3, [r4, #4]
   b7ea8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7eaa:	f1b9 0f00 	cmp.w	r9, #0
   b7eae:	d126      	bne.n	b7efe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7eb0:	b328      	cbz	r0, b7efe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7eb2:	4433      	add	r3, r6
   b7eb4:	1a1b      	subs	r3, r3, r0
   b7eb6:	2bff      	cmp	r3, #255	; 0xff
   b7eb8:	d809      	bhi.n	b7ece <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7eba:	9901      	ldr	r1, [sp, #4]
   b7ebc:	4620      	mov	r0, r4
   b7ebe:	f7ff fe61 	bl	b7b84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7ec2:	6861      	ldr	r1, [r4, #4]
   b7ec4:	4620      	mov	r0, r4
   b7ec6:	4431      	add	r1, r6
   b7ec8:	f7ff ff94 	bl	b7df4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7ecc:	b918      	cbnz	r0, b7ed6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7ece:	6860      	ldr	r0, [r4, #4]
}
   b7ed0:	b003      	add	sp, #12
   b7ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7ed6:	1c6a      	adds	r2, r5, #1
   b7ed8:	9901      	ldr	r1, [sp, #4]
   b7eda:	b2d2      	uxtb	r2, r2
   b7edc:	4620      	mov	r0, r4
   b7ede:	f7ff ffb5 	bl	b7e4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7ee2:	9901      	ldr	r1, [sp, #4]
   b7ee4:	463a      	mov	r2, r7
   b7ee6:	3101      	adds	r1, #1
   b7ee8:	4620      	mov	r0, r4
   b7eea:	f7ff ffaf 	bl	b7e4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7eee:	9901      	ldr	r1, [sp, #4]
   b7ef0:	462b      	mov	r3, r5
   b7ef2:	4642      	mov	r2, r8
   b7ef4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7ef6:	4620      	mov	r0, r4
   b7ef8:	f7ff ff85 	bl	b7e06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7efc:	e7e7      	b.n	b7ece <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7efe:	18f1      	adds	r1, r6, r3
   b7f00:	29ff      	cmp	r1, #255	; 0xff
   b7f02:	d8e4      	bhi.n	b7ece <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7f04:	4620      	mov	r0, r4
   b7f06:	f7ff ff75 	bl	b7df4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7f0a:	2800      	cmp	r0, #0
   b7f0c:	d0df      	beq.n	b7ece <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7f0e:	1c69      	adds	r1, r5, #1
   b7f10:	b2c9      	uxtb	r1, r1
   b7f12:	4620      	mov	r0, r4
   b7f14:	f7ff ffb4 	bl	b7e80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7f18:	4639      	mov	r1, r7
   b7f1a:	4620      	mov	r0, r4
   b7f1c:	f7ff ffb0 	bl	b7e80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7f20:	6861      	ldr	r1, [r4, #4]
   b7f22:	462b      	mov	r3, r5
   b7f24:	4642      	mov	r2, r8
   b7f26:	e7e6      	b.n	b7ef6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7f28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7f28:	b430      	push	{r4, r5}
   b7f2a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7f2e:	b11a      	cbz	r2, b7f38 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7f30:	9502      	str	r5, [sp, #8]
}
   b7f32:	bc30      	pop	{r4, r5}
   b7f34:	f7ff bfa8 	b.w	b7e88 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7f38:	6840      	ldr	r0, [r0, #4]
}
   b7f3a:	bc30      	pop	{r4, r5}
   b7f3c:	4770      	bx	lr

000b7f3e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7f3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7f40:	2300      	movs	r3, #0
   b7f42:	e9c0 3300 	strd	r3, r3, [r0]
   b7f46:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7f48:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7f4a:	9300      	str	r3, [sp, #0]
   b7f4c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7f4e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7f52:	4619      	mov	r1, r3
   b7f54:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7f58:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7f5a:	f7ff ffe5 	bl	b7f28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7f5e:	4620      	mov	r0, r4
   b7f60:	b004      	add	sp, #16
   b7f62:	bd10      	pop	{r4, pc}

000b7f64 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7f66:	460a      	mov	r2, r1
   b7f68:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b7f6a:	2114      	movs	r1, #20
   b7f6c:	4610      	mov	r0, r2
   b7f6e:	9203      	str	r2, [sp, #12]
   b7f70:	f002 fe6a 	bl	bac48 <strnlen>
   b7f74:	2100      	movs	r1, #0
   b7f76:	4603      	mov	r3, r0
   b7f78:	9100      	str	r1, [sp, #0]
   b7f7a:	9a03      	ldr	r2, [sp, #12]
   b7f7c:	2109      	movs	r1, #9
   b7f7e:	4620      	mov	r0, r4
   b7f80:	f7ff ffd2 	bl	b7f28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7f84:	b004      	add	sp, #16
   b7f86:	bd10      	pop	{r4, pc}

000b7f88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7f88:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f8c:	4604      	mov	r4, r0
   b7f8e:	460d      	mov	r5, r1
   b7f90:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7f92:	d914      	bls.n	b7fbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7f94:	4290      	cmp	r0, r2
   b7f96:	d213      	bcs.n	b7fc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7f98:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7f9c:	1a75      	subs	r5, r6, r1
   b7f9e:	f1a1 0708 	sub.w	r7, r1, #8
   b7fa2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7fa4:	42b7      	cmp	r7, r6
   b7fa6:	d018      	beq.n	b7fda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7fa8:	b11c      	cbz	r4, b7fb2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7faa:	4631      	mov	r1, r6
   b7fac:	4620      	mov	r0, r4
   b7fae:	f7ff fe86 	bl	b7cbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7fb2:	1d30      	adds	r0, r6, #4
   b7fb4:	f7fc fcac 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7fb8:	3e08      	subs	r6, #8
   b7fba:	3c08      	subs	r4, #8
   b7fbc:	e7f2      	b.n	b7fa4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7fbe:	d00c      	beq.n	b7fda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7fc0:	42b5      	cmp	r5, r6
   b7fc2:	d00a      	beq.n	b7fda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7fc4:	b11c      	cbz	r4, b7fce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7fc6:	4629      	mov	r1, r5
   b7fc8:	4620      	mov	r0, r4
   b7fca:	f7ff fe78 	bl	b7cbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7fce:	1d28      	adds	r0, r5, #4
   b7fd0:	f7fc fc9e 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7fd4:	3508      	adds	r5, #8
   b7fd6:	3408      	adds	r4, #8
   b7fd8:	e7f2      	b.n	b7fc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7fdc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7fde:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7fe0:	6846      	ldr	r6, [r0, #4]
   b7fe2:	4668      	mov	r0, sp
   b7fe4:	f7ff fe6b 	bl	b7cbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7fe8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7fec:	429f      	cmp	r7, r3
   b7fee:	db12      	blt.n	b8016 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7ff0:	3701      	adds	r7, #1
        if (n > 0) {
   b7ff2:	2f00      	cmp	r7, #0
   b7ff4:	dd29      	ble.n	b804a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7ff6:	00f8      	lsls	r0, r7, #3
   b7ff8:	f7fe fc6c 	bl	b68d4 <malloc>
            if (!d) {
   b7ffc:	4605      	mov	r5, r0
   b7ffe:	b1f0      	cbz	r0, b803e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8000:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8004:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8008:	f7ff ffbe 	bl	b7f88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b800c:	6820      	ldr	r0, [r4, #0]
   b800e:	f7fe fc69 	bl	b68e4 <free>
        data_ = d;
   b8012:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8014:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8016:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8018:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b801a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b801e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8022:	4631      	mov	r1, r6
   b8024:	f106 0008 	add.w	r0, r6, #8
   b8028:	f7ff ffae 	bl	b7f88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b802c:	b11e      	cbz	r6, b8036 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b802e:	4669      	mov	r1, sp
   b8030:	4630      	mov	r0, r6
   b8032:	f7ff fe44 	bl	b7cbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8036:	6863      	ldr	r3, [r4, #4]
   b8038:	3301      	adds	r3, #1
   b803a:	6063      	str	r3, [r4, #4]
    return true;
   b803c:	2501      	movs	r5, #1
   b803e:	a801      	add	r0, sp, #4
   b8040:	f7fc fc66 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8044:	4628      	mov	r0, r5
   b8046:	b003      	add	sp, #12
   b8048:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b804a:	2500      	movs	r5, #0
   b804c:	e7de      	b.n	b800c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b804e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b804e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8050:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8054:	4605      	mov	r5, r0
   b8056:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8058:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b805c:	42a6      	cmp	r6, r4
   b805e:	d005      	beq.n	b806c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8060:	4639      	mov	r1, r7
   b8062:	4620      	mov	r0, r4
   b8064:	f7ff fcdd 	bl	b7a22 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8068:	b108      	cbz	r0, b806e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b806a:	b914      	cbnz	r4, b8072 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b806c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b806e:	3408      	adds	r4, #8
   b8070:	e7f4      	b.n	b805c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8072:	1d20      	adds	r0, r4, #4
   b8074:	f7fc fc4c 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8078:	e9d5 3200 	ldrd	r3, r2, [r5]
   b807c:	f104 0108 	add.w	r1, r4, #8
   b8080:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8084:	4620      	mov	r0, r4
   b8086:	f7ff ff7f 	bl	b7f88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b808a:	686b      	ldr	r3, [r5, #4]
   b808c:	3b01      	subs	r3, #1
   b808e:	606b      	str	r3, [r5, #4]
    return true;
   b8090:	e7ec      	b.n	b806c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8094 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8098:	4605      	mov	r5, r0
   b809a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b809c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b809e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b80a0:	f7ff fa8a 	bl	b75b8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b80a4:	682e      	ldr	r6, [r5, #0]
   b80a6:	1ef3      	subs	r3, r6, #3
   b80a8:	2b0d      	cmp	r3, #13
   b80aa:	d83c      	bhi.n	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b80ac:	e8df f013 	tbh	[pc, r3, lsl #1]
   b80b0:	0053000e 	.word	0x0053000e
   b80b4:	00d1003b 	.word	0x00d1003b
   b80b8:	003b003b 	.word	0x003b003b
   b80bc:	003b003b 	.word	0x003b003b
   b80c0:	009b003b 	.word	0x009b003b
   b80c4:	009b009b 	.word	0x009b009b
   b80c8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b80cc:	a804      	add	r0, sp, #16
   b80ce:	f7ff fc73 	bl	b79b8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b80d2:	9b04      	ldr	r3, [sp, #16]
   b80d4:	89aa      	ldrh	r2, [r5, #12]
   b80d6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b80d8:	6869      	ldr	r1, [r5, #4]
   b80da:	9804      	ldr	r0, [sp, #16]
   b80dc:	3108      	adds	r1, #8
   b80de:	3002      	adds	r0, #2
   b80e0:	f7ff fa84 	bl	b75ec <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b80e4:	a904      	add	r1, sp, #16
   b80e6:	a806      	add	r0, sp, #24
   b80e8:	f7ff fde9 	bl	b7cbe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b80ec:	a906      	add	r1, sp, #24
   b80ee:	f104 0018 	add.w	r0, r4, #24
   b80f2:	f7ff ff73 	bl	b7fdc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b80f6:	4605      	mov	r5, r0
   b80f8:	a807      	add	r0, sp, #28
   b80fa:	f7fc fc09 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b80fe:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8100:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8102:	b9b5      	cbnz	r5, b8132 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8104:	4b5d      	ldr	r3, [pc, #372]	; (b827c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8106:	495e      	ldr	r1, [pc, #376]	; (b8280 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8108:	9300      	str	r3, [sp, #0]
   b810a:	2032      	movs	r0, #50	; 0x32
   b810c:	462b      	mov	r3, r5
   b810e:	aa06      	add	r2, sp, #24
   b8110:	9507      	str	r5, [sp, #28]
   b8112:	f7fe fafb 	bl	b670c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8116:	9b04      	ldr	r3, [sp, #16]
   b8118:	4629      	mov	r1, r5
   b811a:	8818      	ldrh	r0, [r3, #0]
   b811c:	f7fe f90c 	bl	b6338 <hal_ble_gap_disconnect>
   b8120:	a805      	add	r0, sp, #20
   b8122:	f7fc fbf5 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8126:	a803      	add	r0, sp, #12
   b8128:	f7ff fa54 	bl	b75d4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b812c:	b00e      	add	sp, #56	; 0x38
   b812e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8132:	4a54      	ldr	r2, [pc, #336]	; (b8284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8134:	9200      	str	r2, [sp, #0]
   b8136:	2300      	movs	r3, #0
   b8138:	4951      	ldr	r1, [pc, #324]	; (b8280 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b813a:	9307      	str	r3, [sp, #28]
   b813c:	aa06      	add	r2, sp, #24
   b813e:	2001      	movs	r0, #1
   b8140:	f7fe fae4 	bl	b670c <log_message>
                if (impl->connectedCallback_) {
   b8144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8146:	2b00      	cmp	r3, #0
   b8148:	d0ea      	beq.n	b8120 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b814a:	a904      	add	r1, sp, #16
   b814c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8150:	f7ff fe37 	bl	b7dc2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8154:	e7e4      	b.n	b8120 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8156:	89a9      	ldrh	r1, [r5, #12]
   b8158:	4620      	mov	r0, r4
   b815a:	f7ff fb85 	bl	b7868 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b815e:	4606      	mov	r6, r0
   b8160:	2800      	cmp	r0, #0
   b8162:	d0e0      	beq.n	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8164:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b8166:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b816a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b816e:	8029      	strh	r1, [r5, #0]
   b8170:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8174:	429a      	cmp	r2, r3
   b8176:	d003      	beq.n	b8180 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8178:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b817c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b817e:	e7f9      	b.n	b8174 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8180:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8184:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8188:	45b8      	cmp	r8, r7
   b818a:	d004      	beq.n	b8196 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b818c:	1d38      	adds	r0, r7, #4
   b818e:	f7fc fbbf 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8192:	3708      	adds	r7, #8
   b8194:	e7f8      	b.n	b8188 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8196:	2300      	movs	r3, #0
   b8198:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b819a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b819e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b81a2:	45b8      	cmp	r8, r7
   b81a4:	d004      	beq.n	b81b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b81a6:	1d38      	adds	r0, r7, #4
   b81a8:	f7fc fbb2 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81ac:	3708      	adds	r7, #8
   b81ae:	e7f8      	b.n	b81a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b81b0:	2300      	movs	r3, #0
   b81b2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b81b4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b81b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b81b8:	b123      	cbz	r3, b81c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b81ba:	4631      	mov	r1, r6
   b81bc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b81c0:	f7ff fdff 	bl	b7dc2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b81c4:	2300      	movs	r3, #0
   b81c6:	2220      	movs	r2, #32
   b81c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b81cc:	4a2e      	ldr	r2, [pc, #184]	; (b8288 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b81ce:	9200      	str	r2, [sp, #0]
   b81d0:	492b      	ldr	r1, [pc, #172]	; (b8280 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b81d2:	aa06      	add	r2, sp, #24
   b81d4:	2001      	movs	r0, #1
   b81d6:	f7fe fa99 	bl	b670c <log_message>
                    impl->peers_.removeOne(*peer);
   b81da:	4631      	mov	r1, r6
   b81dc:	f104 0018 	add.w	r0, r4, #24
   b81e0:	f7ff ff35 	bl	b804e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b81e4:	e79f      	b.n	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b81e6:	89a9      	ldrh	r1, [r5, #12]
   b81e8:	4620      	mov	r0, r4
   b81ea:	f7ff fb3d 	bl	b7868 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b81ee:	2800      	cmp	r0, #0
   b81f0:	d099      	beq.n	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b81f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b81f4:	2b00      	cmp	r3, #0
   b81f6:	d096      	beq.n	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b81f8:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b81fa:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b81fc:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8200:	d001      	beq.n	b8206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8202:	2e10      	cmp	r6, #16
   b8204:	d117      	bne.n	b8236 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8206:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8208:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b820a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b820c:	2506      	movs	r5, #6
                        };
   b820e:	f88d 3015 	strb.w	r3, [sp, #21]
   b8212:	9104      	str	r1, [sp, #16]
   b8214:	f88d 2014 	strb.w	r2, [sp, #20]
   b8218:	9006      	str	r0, [sp, #24]
   b821a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b821e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8220:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8224:	9508      	str	r5, [sp, #32]
   b8226:	e883 0003 	stmia.w	r3, {r0, r1}
   b822a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b822c:	a906      	add	r1, sp, #24
   b822e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8232:	4798      	blx	r3
   b8234:	e777      	b.n	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8236:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8238:	bf01      	itttt	eq
   b823a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b823c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b823e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8242:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8244:	bf0f      	iteee	eq
   b8246:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b824a:	461a      	movne	r2, r3
   b824c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b824e:	461d      	movne	r5, r3
   b8250:	e7dd      	b.n	b820e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8252:	89a9      	ldrh	r1, [r5, #12]
   b8254:	4620      	mov	r0, r4
   b8256:	f7ff fb07 	bl	b7868 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b825a:	4601      	mov	r1, r0
   b825c:	2800      	cmp	r0, #0
   b825e:	f43f af62 	beq.w	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8262:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8264:	2b00      	cmp	r3, #0
   b8266:	f43f af5e 	beq.w	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b826a:	686b      	ldr	r3, [r5, #4]
   b826c:	9306      	str	r3, [sp, #24]
   b826e:	aa06      	add	r2, sp, #24
   b8270:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8272:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8276:	4798      	blx	r3
   b8278:	e755      	b.n	b8126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b827a:	bf00      	nop
   b827c:	000bd3d0 	.word	0x000bd3d0
   b8280:	000bd34f 	.word	0x000bd34f
   b8284:	000bd3f6 	.word	0x000bd3f6
   b8288:	000bd413 	.word	0x000bd413

000b828c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b828c:	b513      	push	{r0, r1, r4, lr}
   b828e:	460b      	mov	r3, r1
   b8290:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8292:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8296:	466c      	mov	r4, sp
   b8298:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b829c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b82a0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b82a4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b82a8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b82ac:	b002      	add	sp, #8
   b82ae:	bd10      	pop	{r4, pc}

000b82b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b82b0:	b538      	push	{r3, r4, r5, lr}
   b82b2:	4605      	mov	r5, r0
   b82b4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b82b6:	f7ff ffe9 	bl	b828c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b82ba:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b82bc:	68a2      	ldr	r2, [r4, #8]
   b82be:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b82c0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b82c2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b82c4:	68e2      	ldr	r2, [r4, #12]
   b82c6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b82c8:	60e3      	str	r3, [r4, #12]
      }
   b82ca:	bd38      	pop	{r3, r4, r5, pc}

000b82cc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b82cc:	b570      	push	{r4, r5, r6, lr}
   b82ce:	4604      	mov	r4, r0
   b82d0:	b08c      	sub	sp, #48	; 0x30
   b82d2:	460e      	mov	r6, r1
   b82d4:	9201      	str	r2, [sp, #4]
   b82d6:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b82d8:	f7ff faa6 	bl	b7828 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b82dc:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b82de:	9901      	ldr	r1, [sp, #4]
   b82e0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b82e4:	f7fe ffc5 	bl	b7272 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b82e8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b82ec:	b1cd      	cbz	r5, b8322 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b82ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b82f0:	9502      	str	r5, [sp, #8]
   b82f2:	a902      	add	r1, sp, #8
   b82f4:	a804      	add	r0, sp, #16
   b82f6:	9303      	str	r3, [sp, #12]
   b82f8:	f7ff fc92 	bl	b7c20 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b82fc:	2300      	movs	r3, #0
	__x.swap(*this);
   b82fe:	a908      	add	r1, sp, #32
   b8300:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8302:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8304:	f7ff ffd4 	bl	b82b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8308:	4631      	mov	r1, r6
   b830a:	a808      	add	r0, sp, #32
   b830c:	f7ff ffd0 	bl	b82b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8310:	a808      	add	r0, sp, #32
   b8312:	f7fb ffeb 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
   b8316:	a804      	add	r0, sp, #16
   b8318:	f7fb ffe8 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
    }
   b831c:	4620      	mov	r0, r4
   b831e:	b00c      	add	sp, #48	; 0x30
   b8320:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8322:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8324:	e7ea      	b.n	b82fc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8328 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b832c:	b087      	sub	sp, #28
   b832e:	461d      	mov	r5, r3
   b8330:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8334:	4680      	mov	r8, r0
   b8336:	468b      	mov	fp, r1
   b8338:	4692      	mov	sl, r2
   b833a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b833c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b833e:	2200      	movs	r2, #0
   b8340:	2068      	movs	r0, #104	; 0x68
   b8342:	9102      	str	r1, [sp, #8]
   b8344:	9204      	str	r2, [sp, #16]
   b8346:	f7fb fea6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b834a:	1e06      	subs	r6, r0, #0
   b834c:	f106 090c 	add.w	r9, r6, #12
   b8350:	d018      	beq.n	b8384 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8352:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8354:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8356:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b835a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b835c:	4a15      	ldr	r2, [pc, #84]	; (b83b4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b835e:	f847 2b20 	str.w	r2, [r7], #32
   b8362:	9b03      	ldr	r3, [sp, #12]
   b8364:	9100      	str	r1, [sp, #0]
   b8366:	465a      	mov	r2, fp
   b8368:	4651      	mov	r1, sl
   b836a:	4648      	mov	r0, r9
   b836c:	f7ff ffae 	bl	b82cc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8372:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8374:	682b      	ldr	r3, [r5, #0]
   b8376:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b837a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b837e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8380:	6823      	ldr	r3, [r4, #0]
   b8382:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8384:	a904      	add	r1, sp, #16
   b8386:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8388:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b838c:	f7ff fd08 	bl	b7da0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8390:	a805      	add	r0, sp, #20
   b8392:	f7fc fabd 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8396:	f8d8 3000 	ldr.w	r3, [r8]
   b839a:	b93b      	cbnz	r3, b83ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b839c:	4a06      	ldr	r2, [pc, #24]	; (b83b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b839e:	4907      	ldr	r1, [pc, #28]	; (b83bc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b83a0:	200a      	movs	r0, #10
}
   b83a2:	b007      	add	sp, #28
   b83a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b83a8:	f7fe b9a8 	b.w	b66fc <panic_>
}
   b83ac:	b007      	add	sp, #28
   b83ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b83b2:	bf00      	nop
   b83b4:	000bd48c 	.word	0x000bd48c
   b83b8:	000b62a9 	.word	0x000b62a9
   b83bc:	000bd338 	.word	0x000bd338

000b83c0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b83c0:	b538      	push	{r3, r4, r5, lr}
   b83c2:	4605      	mov	r5, r0
   b83c4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b83c6:	f7ff ff61 	bl	b828c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b83ca:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b83cc:	68a2      	ldr	r2, [r4, #8]
   b83ce:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b83d0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b83d2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b83d4:	68e2      	ldr	r2, [r4, #12]
   b83d6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b83d8:	60e3      	str	r3, [r4, #12]
      }
   b83da:	bd38      	pop	{r3, r4, r5, pc}

000b83dc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b83dc:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b83de:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b83e0:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b83e2:	3424      	adds	r4, #36	; 0x24
   b83e4:	b1b9      	cbz	r1, b8416 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b83e6:	e9cd 1200 	strd	r1, r2, [sp]
   b83ea:	a802      	add	r0, sp, #8
   b83ec:	4669      	mov	r1, sp
   b83ee:	f7ff fc2f 	bl	b7c50 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b83f2:	2300      	movs	r3, #0
	__x.swap(*this);
   b83f4:	a906      	add	r1, sp, #24
   b83f6:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b83f8:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b83fa:	f7ff ffe1 	bl	b83c0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b83fe:	4621      	mov	r1, r4
   b8400:	a806      	add	r0, sp, #24
   b8402:	f7ff ffdd 	bl	b83c0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b8406:	a806      	add	r0, sp, #24
   b8408:	f7fb ff70 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
   b840c:	a802      	add	r0, sp, #8
   b840e:	f7fb ff6d 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
}
   b8412:	b00a      	add	sp, #40	; 0x28
   b8414:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8416:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b8418:	e7eb      	b.n	b83f2 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b841a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b841a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b841e:	4604      	mov	r4, r0
   b8420:	460d      	mov	r5, r1
   b8422:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8424:	d914      	bls.n	b8450 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8426:	4290      	cmp	r0, r2
   b8428:	d213      	bcs.n	b8452 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b842a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b842e:	1a75      	subs	r5, r6, r1
   b8430:	f1a1 0708 	sub.w	r7, r1, #8
   b8434:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8436:	42b7      	cmp	r7, r6
   b8438:	d018      	beq.n	b846c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b843a:	b11c      	cbz	r4, b8444 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b843c:	4631      	mov	r1, r6
   b843e:	4620      	mov	r0, r4
   b8440:	f7ff fc33 	bl	b7caa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8444:	1d30      	adds	r0, r6, #4
   b8446:	f7fc fa63 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b844a:	3e08      	subs	r6, #8
   b844c:	3c08      	subs	r4, #8
   b844e:	e7f2      	b.n	b8436 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8450:	d00c      	beq.n	b846c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8452:	42b5      	cmp	r5, r6
   b8454:	d00a      	beq.n	b846c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8456:	b11c      	cbz	r4, b8460 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8458:	4629      	mov	r1, r5
   b845a:	4620      	mov	r0, r4
   b845c:	f7ff fc25 	bl	b7caa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8460:	1d28      	adds	r0, r5, #4
   b8462:	f7fc fa55 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8466:	3508      	adds	r5, #8
   b8468:	3408      	adds	r4, #8
   b846a:	e7f2      	b.n	b8452 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b846c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b846e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b846e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8470:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8472:	4605      	mov	r5, r0
        if (n > 0) {
   b8474:	dd11      	ble.n	b849a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8476:	00f0      	lsls	r0, r6, #3
   b8478:	f7fe fa2c 	bl	b68d4 <malloc>
            if (!d) {
   b847c:	4604      	mov	r4, r0
   b847e:	b158      	cbz	r0, b8498 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8480:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8484:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8488:	f7ff ffc7 	bl	b841a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b848c:	6828      	ldr	r0, [r5, #0]
   b848e:	f7fe fa29 	bl	b68e4 <free>
        data_ = d;
   b8492:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8494:	60ae      	str	r6, [r5, #8]
        return true;
   b8496:	2001      	movs	r0, #1
    }
   b8498:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b849a:	2400      	movs	r4, #0
   b849c:	e7f6      	b.n	b848c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b849e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b849e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b84a0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b84a2:	6845      	ldr	r5, [r0, #4]
   b84a4:	4668      	mov	r0, sp
   b84a6:	f7ff fc00 	bl	b7caa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b84aa:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b84ae:	4299      	cmp	r1, r3
   b84b0:	da10      	bge.n	b84d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b84b2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b84b4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b84b6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b84ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b84be:	4629      	mov	r1, r5
   b84c0:	f105 0008 	add.w	r0, r5, #8
   b84c4:	f7ff ffa9 	bl	b841a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b84c8:	b98d      	cbnz	r5, b84ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b84ca:	6863      	ldr	r3, [r4, #4]
   b84cc:	3301      	adds	r3, #1
   b84ce:	6063      	str	r3, [r4, #4]
    return true;
   b84d0:	2601      	movs	r6, #1
   b84d2:	e006      	b.n	b84e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b84d4:	3101      	adds	r1, #1
   b84d6:	4620      	mov	r0, r4
   b84d8:	f7ff ffc9 	bl	b846e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b84dc:	4606      	mov	r6, r0
   b84de:	2800      	cmp	r0, #0
   b84e0:	d1e7      	bne.n	b84b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b84e2:	a801      	add	r0, sp, #4
   b84e4:	f7fc fa14 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b84e8:	4630      	mov	r0, r6
   b84ea:	b002      	add	sp, #8
   b84ec:	bd70      	pop	{r4, r5, r6, pc}
   b84ee:	4669      	mov	r1, sp
   b84f0:	4628      	mov	r0, r5
   b84f2:	f7ff fbda 	bl	b7caa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b84f6:	e7e8      	b.n	b84ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b84f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b84f8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b84fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b84fc:	4604      	mov	r4, r0
   b84fe:	460d      	mov	r5, r1
   b8500:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8502:	d914      	bls.n	b852e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8504:	4290      	cmp	r0, r2
   b8506:	d213      	bcs.n	b8530 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8508:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b850c:	1a75      	subs	r5, r6, r1
   b850e:	f1a1 0708 	sub.w	r7, r1, #8
   b8512:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8514:	42b7      	cmp	r7, r6
   b8516:	d018      	beq.n	b854a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8518:	b11c      	cbz	r4, b8522 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b851a:	4631      	mov	r1, r6
   b851c:	4620      	mov	r0, r4
   b851e:	f7ff fbb6 	bl	b7c8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8522:	1d30      	adds	r0, r6, #4
   b8524:	f7fc f9f4 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8528:	3e08      	subs	r6, #8
   b852a:	3c08      	subs	r4, #8
   b852c:	e7f2      	b.n	b8514 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b852e:	d00c      	beq.n	b854a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8530:	42b5      	cmp	r5, r6
   b8532:	d00a      	beq.n	b854a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8534:	b11c      	cbz	r4, b853e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8536:	4629      	mov	r1, r5
   b8538:	4620      	mov	r0, r4
   b853a:	f7ff fba8 	bl	b7c8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b853e:	1d28      	adds	r0, r5, #4
   b8540:	f7fc f9e6 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8544:	3508      	adds	r5, #8
   b8546:	3408      	adds	r4, #8
   b8548:	e7f2      	b.n	b8530 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b854a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b854c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b854c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b854e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8550:	4605      	mov	r5, r0
        if (n > 0) {
   b8552:	dd11      	ble.n	b8578 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8554:	00f0      	lsls	r0, r6, #3
   b8556:	f7fe f9bd 	bl	b68d4 <malloc>
            if (!d) {
   b855a:	4604      	mov	r4, r0
   b855c:	b158      	cbz	r0, b8576 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b855e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8562:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8566:	f7ff ffc7 	bl	b84f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b856a:	6828      	ldr	r0, [r5, #0]
   b856c:	f7fe f9ba 	bl	b68e4 <free>
        data_ = d;
   b8570:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8572:	60ae      	str	r6, [r5, #8]
        return true;
   b8574:	2001      	movs	r0, #1
    }
   b8576:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8578:	2400      	movs	r4, #0
   b857a:	e7f6      	b.n	b856a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b857c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b857c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b857e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8580:	6845      	ldr	r5, [r0, #4]
   b8582:	4668      	mov	r0, sp
   b8584:	f7ff fb83 	bl	b7c8e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8588:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b858c:	4299      	cmp	r1, r3
   b858e:	da10      	bge.n	b85b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8590:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8592:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8594:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8598:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b859c:	4629      	mov	r1, r5
   b859e:	f105 0008 	add.w	r0, r5, #8
   b85a2:	f7ff ffa9 	bl	b84f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b85a6:	b98d      	cbnz	r5, b85cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b85a8:	6863      	ldr	r3, [r4, #4]
   b85aa:	3301      	adds	r3, #1
   b85ac:	6063      	str	r3, [r4, #4]
    return true;
   b85ae:	2601      	movs	r6, #1
   b85b0:	e006      	b.n	b85c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b85b2:	3101      	adds	r1, #1
   b85b4:	4620      	mov	r0, r4
   b85b6:	f7ff ffc9 	bl	b854c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b85ba:	4606      	mov	r6, r0
   b85bc:	2800      	cmp	r0, #0
   b85be:	d1e7      	bne.n	b8590 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b85c0:	a801      	add	r0, sp, #4
   b85c2:	f7fc f9a5 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b85c6:	4630      	mov	r0, r6
   b85c8:	b002      	add	sp, #8
   b85ca:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b85cc:	4669      	mov	r1, sp
   b85ce:	4628      	mov	r0, r5
   b85d0:	f7ff fb5d 	bl	b7c8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b85d4:	e7e8      	b.n	b85a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b85d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b85d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85dc:	4617      	mov	r7, r2
   b85de:	b0a1      	sub	sp, #132	; 0x84
   b85e0:	4680      	mov	r8, r0
    WiringBleLock lk;
   b85e2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b85e4:	460e      	mov	r6, r1
    WiringBleLock lk;
   b85e6:	f7fe ffe7 	bl	b75b8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b85ea:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b85ec:	7923      	ldrb	r3, [r4, #4]
   b85ee:	b953      	cbnz	r3, b8606 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b85f0:	4639      	mov	r1, r7
   b85f2:	4640      	mov	r0, r8
   b85f4:	f7ff fb4b 	bl	b7c8e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b85f8:	a80a      	add	r0, sp, #40	; 0x28
   b85fa:	f7fe ffeb 	bl	b75d4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b85fe:	4640      	mov	r0, r8
   b8600:	b021      	add	sp, #132	; 0x84
   b8602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8606:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8608:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b860c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8610:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8612:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8616:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b861a:	9b03      	ldr	r3, [sp, #12]
   b861c:	429d      	cmp	r5, r3
   b861e:	d021      	beq.n	b8664 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8620:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8624:	4658      	mov	r0, fp
   b8626:	f109 0114 	add.w	r1, r9, #20
   b862a:	f7ff f872 	bl	b7712 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b862e:	b1b8      	cbz	r0, b8660 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8630:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8634:	4650      	mov	r0, sl
   b8636:	f7ff f86c 	bl	b7712 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b863a:	b188      	cbz	r0, b8660 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b863c:	6823      	ldr	r3, [r4, #0]
   b863e:	f8d9 2000 	ldr.w	r2, [r9]
   b8642:	4053      	eors	r3, r2
   b8644:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8648:	d10a      	bne.n	b8660 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b864a:	2220      	movs	r2, #32
   b864c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8650:	4a5e      	ldr	r2, [pc, #376]	; (b87cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8652:	9200      	str	r2, [sp, #0]
   b8654:	aa15      	add	r2, sp, #84	; 0x54
   b8656:	495e      	ldr	r1, [pc, #376]	; (b87d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8658:	2032      	movs	r0, #50	; 0x32
   b865a:	f7fe f857 	bl	b670c <log_message>
   b865e:	e7c7      	b.n	b85f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8660:	3508      	adds	r5, #8
   b8662:	e7da      	b.n	b861a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8664:	4650      	mov	r0, sl
   b8666:	f7ff f825 	bl	b76b4 <_ZNK8particle7BleUuid7isValidEv>
   b866a:	b960      	cbnz	r0, b8686 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b866c:	4959      	ldr	r1, [pc, #356]	; (b87d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b866e:	2201      	movs	r2, #1
   b8670:	a815      	add	r0, sp, #84	; 0x54
   b8672:	ad15      	add	r5, sp, #84	; 0x54
   b8674:	f7fe fff6 	bl	b7664 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b867a:	46d4      	mov	ip, sl
   b867c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8680:	682b      	ldr	r3, [r5, #0]
   b8682:	f8cc 3000 	str.w	r3, [ip]
   b8686:	6833      	ldr	r3, [r6, #0]
   b8688:	e9d3 5300 	ldrd	r5, r3, [r3]
   b868c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8690:	455d      	cmp	r5, fp
   b8692:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8694:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8696:	d06e      	beq.n	b8776 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8698:	f855 0b08 	ldr.w	r0, [r5], #8
   b869c:	f7ff f839 	bl	b7712 <_ZNK8particle7BleUuideqERKS0_>
   b86a0:	2800      	cmp	r0, #0
   b86a2:	d0f5      	beq.n	b8690 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b86a4:	f104 0a14 	add.w	sl, r4, #20
   b86a8:	4650      	mov	r0, sl
   b86aa:	f7ff f803 	bl	b76b4 <_ZNK8particle7BleUuid7isValidEv>
   b86ae:	b988      	cbnz	r0, b86d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b86b0:	4b49      	ldr	r3, [pc, #292]	; (b87d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b86b2:	4948      	ldr	r1, [pc, #288]	; (b87d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b86b4:	881a      	ldrh	r2, [r3, #0]
   b86b6:	3201      	adds	r2, #1
   b86b8:	b292      	uxth	r2, r2
   b86ba:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b86bc:	a815      	add	r0, sp, #84	; 0x54
   b86be:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b86c0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b86c2:	f7fe ffee 	bl	b76a2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b86c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b86c8:	46d4      	mov	ip, sl
   b86ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b86ce:	682b      	ldr	r3, [r5, #0]
   b86d0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b86d4:	4b41      	ldr	r3, [pc, #260]	; (b87dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b86d6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b86d8:	2228      	movs	r2, #40	; 0x28
   b86da:	2100      	movs	r1, #0
   b86dc:	a816      	add	r0, sp, #88	; 0x58
   b86de:	f002 fa0e 	bl	baafe <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b86e2:	4651      	mov	r1, sl
   b86e4:	a804      	add	r0, sp, #16
   b86e6:	f7fe fff7 	bl	b76d8 <_ZN8particle7BleUuid7halUUIDEv>
   b86ea:	ab04      	add	r3, sp, #16
   b86ec:	aa18      	add	r2, sp, #96	; 0x60
   b86ee:	f10d 0c20 	add.w	ip, sp, #32
   b86f2:	6818      	ldr	r0, [r3, #0]
   b86f4:	6859      	ldr	r1, [r3, #4]
   b86f6:	4615      	mov	r5, r2
   b86f8:	c503      	stmia	r5!, {r0, r1}
   b86fa:	3308      	adds	r3, #8
   b86fc:	4563      	cmp	r3, ip
   b86fe:	462a      	mov	r2, r5
   b8700:	d1f7      	bne.n	b86f2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8702:	6818      	ldr	r0, [r3, #0]
   b8704:	6028      	str	r0, [r5, #0]
    return value_;
   b8706:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8708:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b870c:	f8d9 3000 	ldr.w	r3, [r9]
   b8710:	8a9b      	ldrh	r3, [r3, #20]
   b8712:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8716:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8718:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b871a:	4b31      	ldr	r3, [pc, #196]	; (b87e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b871c:	2200      	movs	r2, #0
   b871e:	1da1      	adds	r1, r4, #6
   b8720:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8722:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8726:	f7fd fe39 	bl	b639c <hal_ble_gatt_server_add_characteristic>
   b872a:	2800      	cmp	r0, #0
   b872c:	f47f af60 	bne.w	b85f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8730:	2301      	movs	r3, #1
   b8732:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8734:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8736:	4639      	mov	r1, r7
        return characteristics_;
   b8738:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b873a:	a80d      	add	r0, sp, #52	; 0x34
   b873c:	f7ff faa7 	bl	b7c8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8740:	4620      	mov	r0, r4
   b8742:	a90d      	add	r1, sp, #52	; 0x34
   b8744:	f7ff ff1a 	bl	b857c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8748:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b874a:	a80e      	add	r0, sp, #56	; 0x38
   b874c:	f7fc f8e0 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8750:	2c00      	cmp	r4, #0
   b8752:	f47f af4d 	bne.w	b85f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8756:	2320      	movs	r3, #32
   b8758:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b875c:	4b21      	ldr	r3, [pc, #132]	; (b87e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b875e:	9300      	str	r3, [sp, #0]
   b8760:	aa0d      	add	r2, sp, #52	; 0x34
   b8762:	4623      	mov	r3, r4
   b8764:	e777      	b.n	b8656 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8766:	4639      	mov	r1, r7
   b8768:	4640      	mov	r0, r8
   b876a:	f7ff fa90 	bl	b7c8e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b876e:	a80c      	add	r0, sp, #48	; 0x30
   b8770:	f7fc f8ce 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8774:	e740      	b.n	b85f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8776:	a80b      	add	r0, sp, #44	; 0x2c
   b8778:	f7ff f8fa 	bl	b7970 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b877c:	4651      	mov	r1, sl
   b877e:	a815      	add	r0, sp, #84	; 0x54
   b8780:	f7fe ffaa 	bl	b76d8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8786:	2300      	movs	r3, #0
   b8788:	3214      	adds	r2, #20
   b878a:	a915      	add	r1, sp, #84	; 0x54
   b878c:	2001      	movs	r0, #1
   b878e:	f7fd fddd 	bl	b634c <hal_ble_gatt_server_add_service>
   b8792:	2800      	cmp	r0, #0
   b8794:	d1e7      	bne.n	b8766 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8796:	6835      	ldr	r5, [r6, #0]
   b8798:	a90b      	add	r1, sp, #44	; 0x2c
   b879a:	a80d      	add	r0, sp, #52	; 0x34
   b879c:	f7ff fa85 	bl	b7caa <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b87a0:	4628      	mov	r0, r5
   b87a2:	a90d      	add	r1, sp, #52	; 0x34
   b87a4:	f7ff fe7b 	bl	b849e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b87a8:	4605      	mov	r5, r0
   b87aa:	a80e      	add	r0, sp, #56	; 0x38
   b87ac:	f7fc f8b0 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b87b0:	2d00      	cmp	r5, #0
   b87b2:	d0d8      	beq.n	b8766 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b87b4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b87b6:	6853      	ldr	r3, [r2, #4]
   b87b8:	6812      	ldr	r2, [r2, #0]
   b87ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b87be:	3b01      	subs	r3, #1
   b87c0:	a80c      	add	r0, sp, #48	; 0x30
   b87c2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b87c6:	f7fc f8a3 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b87ca:	e76b      	b.n	b86a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b87cc:	000bd432 	.word	0x000bd432
   b87d0:	000bd34f 	.word	0x000bd34f
   b87d4:	000bd4f6 	.word	0x000bd4f6
   b87d8:	2003e684 	.word	0x2003e684
   b87dc:	002c0003 	.word	0x002c0003
   b87e0:	000b7b09 	.word	0x000b7b09
   b87e4:	000bd45d 	.word	0x000bd45d

000b87e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b87e8:	4802      	ldr	r0, [pc, #8]	; (b87f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b87ea:	2300      	movs	r3, #0
   b87ec:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b87ee:	f7fd be45 	b.w	b647c <os_mutex_recursive_create>
   b87f2:	bf00      	nop
   b87f4:	2003e688 	.word	0x2003e688

000b87f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b87f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87fa:	4606      	mov	r6, r0
   b87fc:	460d      	mov	r5, r1
  size_t n = 0;
   b87fe:	188f      	adds	r7, r1, r2
   b8800:	2400      	movs	r4, #0
  while (size--) {
   b8802:	42bd      	cmp	r5, r7
   b8804:	d00c      	beq.n	b8820 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8806:	6833      	ldr	r3, [r6, #0]
   b8808:	f815 1b01 	ldrb.w	r1, [r5], #1
   b880c:	689b      	ldr	r3, [r3, #8]
   b880e:	4630      	mov	r0, r6
   b8810:	4798      	blx	r3
     if (chunk>=0)
   b8812:	1e03      	subs	r3, r0, #0
   b8814:	db01      	blt.n	b881a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8816:	441c      	add	r4, r3
  while (size--) {
   b8818:	e7f3      	b.n	b8802 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b881a:	2c00      	cmp	r4, #0
   b881c:	bf08      	it	eq
   b881e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8820:	4620      	mov	r0, r4
   b8822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8824 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8824:	b513      	push	{r0, r1, r4, lr}
   b8826:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8828:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b882a:	b159      	cbz	r1, b8844 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b882c:	9101      	str	r1, [sp, #4]
   b882e:	f002 f9dc 	bl	babea <strlen>
   b8832:	6823      	ldr	r3, [r4, #0]
   b8834:	9901      	ldr	r1, [sp, #4]
   b8836:	68db      	ldr	r3, [r3, #12]
   b8838:	4602      	mov	r2, r0
   b883a:	4620      	mov	r0, r4
    }
   b883c:	b002      	add	sp, #8
   b883e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8842:	4718      	bx	r3
    }
   b8844:	b002      	add	sp, #8
   b8846:	bd10      	pop	{r4, pc}

000b8848 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8848:	6803      	ldr	r3, [r0, #0]
   b884a:	689b      	ldr	r3, [r3, #8]
   b884c:	4718      	bx	r3

000b884e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b884e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8850:	210d      	movs	r1, #13
{
   b8852:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8854:	f7ff fff8 	bl	b8848 <_ZN5Print5printEc>
  n += print('\n');
   b8858:	210a      	movs	r1, #10
  size_t n = print('\r');
   b885a:	4604      	mov	r4, r0
  n += print('\n');
   b885c:	4628      	mov	r0, r5
   b885e:	f7ff fff3 	bl	b8848 <_ZN5Print5printEc>
  return n;
}
   b8862:	4420      	add	r0, r4
   b8864:	bd38      	pop	{r3, r4, r5, pc}

000b8866 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8866:	b538      	push	{r3, r4, r5, lr}
   b8868:	4605      	mov	r5, r0
  return write(str);
   b886a:	f7ff ffdb 	bl	b8824 <_ZN5Print5writeEPKc>
   b886e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8870:	4628      	mov	r0, r5
   b8872:	f7ff ffec 	bl	b884e <_ZN5Print7printlnEv>
  return n;
}
   b8876:	4420      	add	r0, r4
   b8878:	bd38      	pop	{r3, r4, r5, pc}

000b887a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b887a:	b530      	push	{r4, r5, lr}
   b887c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b887e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8880:	2a01      	cmp	r2, #1
  *str = '\0';
   b8882:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8886:	bf98      	it	ls
   b8888:	220a      	movls	r2, #10
   b888a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b888c:	460d      	mov	r5, r1
   b888e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8892:	fb01 5312 	mls	r3, r1, r2, r5
   b8896:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b889a:	2b09      	cmp	r3, #9
   b889c:	bf94      	ite	ls
   b889e:	3330      	addls	r3, #48	; 0x30
   b88a0:	3337      	addhi	r3, #55	; 0x37
   b88a2:	b2db      	uxtb	r3, r3
  } while(n);
   b88a4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b88a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b88aa:	d9ef      	bls.n	b888c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b88ac:	4621      	mov	r1, r4
   b88ae:	f7ff ffb9 	bl	b8824 <_ZN5Print5writeEPKc>
}
   b88b2:	b00b      	add	sp, #44	; 0x2c
   b88b4:	bd30      	pop	{r4, r5, pc}

000b88b6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b88b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88ba:	b086      	sub	sp, #24
   b88bc:	af00      	add	r7, sp, #0
   b88be:	4605      	mov	r5, r0
   b88c0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b88c2:	1d38      	adds	r0, r7, #4
   b88c4:	2114      	movs	r1, #20
{
   b88c6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b88c8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b88ca:	f7fe f82b 	bl	b6924 <vsnprintf>

    if (n<bufsize)
   b88ce:	2813      	cmp	r0, #19
   b88d0:	d80e      	bhi.n	b88f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b88d2:	1d39      	adds	r1, r7, #4
   b88d4:	4628      	mov	r0, r5
   b88d6:	f7ff ffa5 	bl	b8824 <_ZN5Print5writeEPKc>
   b88da:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b88dc:	b11e      	cbz	r6, b88e6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b88de:	4628      	mov	r0, r5
   b88e0:	f7ff ffb5 	bl	b884e <_ZN5Print7printlnEv>
   b88e4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b88e6:	4620      	mov	r0, r4
   b88e8:	3718      	adds	r7, #24
   b88ea:	46bd      	mov	sp, r7
   b88ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b88f0:	f100 0308 	add.w	r3, r0, #8
   b88f4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b88f8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b88fa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b88fe:	4622      	mov	r2, r4
   b8900:	1c41      	adds	r1, r0, #1
   b8902:	683b      	ldr	r3, [r7, #0]
   b8904:	4668      	mov	r0, sp
   b8906:	f7fe f80d 	bl	b6924 <vsnprintf>
  return write(str);
   b890a:	4669      	mov	r1, sp
   b890c:	4628      	mov	r0, r5
   b890e:	f7ff ff89 	bl	b8824 <_ZN5Print5writeEPKc>
   b8912:	4604      	mov	r4, r0
   b8914:	46c5      	mov	sp, r8
   b8916:	e7e1      	b.n	b88dc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8918 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8918:	4b01      	ldr	r3, [pc, #4]	; (b8920 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b891a:	4a02      	ldr	r2, [pc, #8]	; (b8924 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b891c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b891e:	4770      	bx	lr
   b8920:	2003e690 	.word	0x2003e690
   b8924:	000bd516 	.word	0x000bd516

000b8928 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b892c:	4a15      	ldr	r2, [pc, #84]	; (b8984 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b892e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b8990 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b8932:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8936:	1980      	adds	r0, r0, r6
   b8938:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b893c:	4b12      	ldr	r3, [pc, #72]	; (b8988 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b893e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b8942:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8946:	1986      	adds	r6, r0, r6
   b8948:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b894c:	42bb      	cmp	r3, r7
   b894e:	bf08      	it	eq
   b8950:	42b2      	cmpeq	r2, r6
{
   b8952:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8954:	d013      	beq.n	b897e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8956:	a903      	add	r1, sp, #12
   b8958:	4668      	mov	r0, sp
   b895a:	e9cd 6700 	strd	r6, r7, [sp]
   b895e:	f7fe f811 	bl	b6984 <localtime_r>
	calendar_time.tm_year += 1900;
   b8962:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8964:	4d09      	ldr	r5, [pc, #36]	; (b898c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8966:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b896a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b896c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b896e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8976:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b897a:	6823      	ldr	r3, [r4, #0]
   b897c:	602b      	str	r3, [r5, #0]
    }
}
   b897e:	b00c      	add	sp, #48	; 0x30
   b8980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8984:	2003e6c8 	.word	0x2003e6c8
   b8988:	2003e6c0 	.word	0x2003e6c0
   b898c:	2003e698 	.word	0x2003e698
   b8990:	2003e6d0 	.word	0x2003e6d0

000b8994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8994:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8996:	2000      	movs	r0, #0
   b8998:	f7fd ff8c 	bl	b68b4 <spark_sync_time_pending>
   b899c:	b128      	cbz	r0, b89aa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b899e:	f7fd ff71 	bl	b6884 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b89a2:	f080 0001 	eor.w	r0, r0, #1
   b89a6:	b2c0      	uxtb	r0, r0
    }
   b89a8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b89aa:	2001      	movs	r0, #1
   b89ac:	e7fc      	b.n	b89a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b89b0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b89b0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b89b2:	f7ff ffb9 	bl	b8928 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b89b6:	4b02      	ldr	r3, [pc, #8]	; (b89c0 <_ZN9TimeClass5monthEx+0x10>)
   b89b8:	6918      	ldr	r0, [r3, #16]
}
   b89ba:	3001      	adds	r0, #1
   b89bc:	bd08      	pop	{r3, pc}
   b89be:	bf00      	nop
   b89c0:	2003e698 	.word	0x2003e698

000b89c4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b89c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b89c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b89cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b89d0:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b89d2:	d411      	bmi.n	b89f8 <_ZN9TimeClass4zoneEf+0x34>
   b89d4:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b89d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b89dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b89e0:	dc0a      	bgt.n	b89f8 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b89e2:	eddf 7a06 	vldr	s15, [pc, #24]	; b89fc <_ZN9TimeClass4zoneEf+0x38>
   b89e6:	ee60 7a27 	vmul.f32	s15, s0, s15
   b89ea:	ee17 0a90 	vmov	r0, s15
   b89ee:	f001 ffdb 	bl	ba9a8 <__aeabi_f2lz>
   b89f2:	4b03      	ldr	r3, [pc, #12]	; (b8a00 <_ZN9TimeClass4zoneEf+0x3c>)
   b89f4:	e9c3 0100 	strd	r0, r1, [r3]
}
   b89f8:	bd08      	pop	{r3, pc}
   b89fa:	bf00      	nop
   b89fc:	45610000 	.word	0x45610000
   b8a00:	2003e6c8 	.word	0x2003e6c8

000b8a04 <_ZN9TimeClass8beginDSTEv>:
    dst_cache = offset * 3600;
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   b8a04:	4b03      	ldr	r3, [pc, #12]	; (b8a14 <_ZN9TimeClass8beginDSTEv+0x10>)
   b8a06:	e9d3 0100 	ldrd	r0, r1, [r3]
   b8a0a:	4b03      	ldr	r3, [pc, #12]	; (b8a18 <_ZN9TimeClass8beginDSTEv+0x14>)
   b8a0c:	e9c3 0100 	strd	r0, r1, [r3]
}
   b8a10:	4770      	bx	lr
   b8a12:	bf00      	nop
   b8a14:	2003d2f0 	.word	0x2003d2f0
   b8a18:	2003e6c0 	.word	0x2003e6c0

000b8a1c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8a1c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8a1e:	2000      	movs	r0, #0
   b8a20:	f7fd fc52 	bl	b62c8 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8a24:	4604      	mov	r4, r0
   b8a26:	b9a0      	cbnz	r0, b8a52 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8a28:	f7fd fe78 	bl	b671c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8a2c:	2801      	cmp	r0, #1
   b8a2e:	d110      	bne.n	b8a52 <_ZN9TimeClass7isValidEv+0x36>
   b8a30:	4620      	mov	r0, r4
   b8a32:	f7fd fe9b 	bl	b676c <system_thread_get_state>
   b8a36:	b960      	cbnz	r0, b8a52 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8a38:	f7ff ffac 	bl	b8994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8a3c:	b910      	cbnz	r0, b8a44 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8a3e:	f7fd ff19 	bl	b6874 <spark_process>
        while (_while() && !_condition()) {
   b8a42:	e7f9      	b.n	b8a38 <_ZN9TimeClass7isValidEv+0x1c>
   b8a44:	f7ff ffa6 	bl	b8994 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8a4c:	2000      	movs	r0, #0
   b8a4e:	f7fd bc3b 	b.w	b62c8 <hal_rtc_time_is_valid>
}
   b8a52:	4620      	mov	r0, r4
   b8a54:	bd10      	pop	{r4, pc}

000b8a56 <_ZN9TimeClass3nowEv>:
{
   b8a56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8a58:	f7ff ffe0 	bl	b8a1c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8a5c:	2210      	movs	r2, #16
   b8a5e:	2100      	movs	r1, #0
   b8a60:	4668      	mov	r0, sp
   b8a62:	f002 f84c 	bl	baafe <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8a66:	2100      	movs	r1, #0
   b8a68:	4668      	mov	r0, sp
   b8a6a:	f7fd fc35 	bl	b62d8 <hal_rtc_get_time>
}
   b8a6e:	9800      	ldr	r0, [sp, #0]
   b8a70:	b005      	add	sp, #20
   b8a72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8a78 <_ZN9TimeClass4hourEv>:
{
   b8a78:	b508      	push	{r3, lr}
	return hour(now());
   b8a7a:	f7ff ffec 	bl	b8a56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8a7e:	17c1      	asrs	r1, r0, #31
   b8a80:	f7ff ff52 	bl	b8928 <_ZL22Refresh_UnixTime_Cachex>
}
   b8a84:	4b01      	ldr	r3, [pc, #4]	; (b8a8c <_ZN9TimeClass4hourEv+0x14>)
   b8a86:	6898      	ldr	r0, [r3, #8]
   b8a88:	bd08      	pop	{r3, pc}
   b8a8a:	bf00      	nop
   b8a8c:	2003e698 	.word	0x2003e698

000b8a90 <_ZN9TimeClass6minuteEv>:
{
   b8a90:	b508      	push	{r3, lr}
	return minute(now());
   b8a92:	f7ff ffe0 	bl	b8a56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8a96:	17c1      	asrs	r1, r0, #31
   b8a98:	f7ff ff46 	bl	b8928 <_ZL22Refresh_UnixTime_Cachex>
}
   b8a9c:	4b01      	ldr	r3, [pc, #4]	; (b8aa4 <_ZN9TimeClass6minuteEv+0x14>)
   b8a9e:	6858      	ldr	r0, [r3, #4]
   b8aa0:	bd08      	pop	{r3, pc}
   b8aa2:	bf00      	nop
   b8aa4:	2003e698 	.word	0x2003e698

000b8aa8 <_ZN9TimeClass3dayEv>:
{
   b8aa8:	b508      	push	{r3, lr}
	return day(now());
   b8aaa:	f7ff ffd4 	bl	b8a56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8aae:	17c1      	asrs	r1, r0, #31
   b8ab0:	f7ff ff3a 	bl	b8928 <_ZL22Refresh_UnixTime_Cachex>
}
   b8ab4:	4b01      	ldr	r3, [pc, #4]	; (b8abc <_ZN9TimeClass3dayEv+0x14>)
   b8ab6:	68d8      	ldr	r0, [r3, #12]
   b8ab8:	bd08      	pop	{r3, pc}
   b8aba:	bf00      	nop
   b8abc:	2003e698 	.word	0x2003e698

000b8ac0 <_ZN9TimeClass5monthEv>:
{
   b8ac0:	b508      	push	{r3, lr}
	return month(now());
   b8ac2:	f7ff ffc8 	bl	b8a56 <_ZN9TimeClass3nowEv>
}
   b8ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b8aca:	17c1      	asrs	r1, r0, #31
   b8acc:	f7ff bf70 	b.w	b89b0 <_ZN9TimeClass5monthEx>

000b8ad0 <_ZN9TimeClass4yearEv>:
{
   b8ad0:	b508      	push	{r3, lr}
	return year(now());
   b8ad2:	f7ff ffc0 	bl	b8a56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8ad6:	17c1      	asrs	r1, r0, #31
   b8ad8:	f7ff ff26 	bl	b8928 <_ZL22Refresh_UnixTime_Cachex>
}
   b8adc:	4b01      	ldr	r3, [pc, #4]	; (b8ae4 <_ZN9TimeClass4yearEv+0x14>)
   b8ade:	6958      	ldr	r0, [r3, #20]
   b8ae0:	bd08      	pop	{r3, pc}
   b8ae2:	bf00      	nop
   b8ae4:	2003e698 	.word	0x2003e698

000b8ae8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8ae8:	4b02      	ldr	r3, [pc, #8]	; (b8af4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8aea:	681a      	ldr	r2, [r3, #0]
   b8aec:	4b02      	ldr	r3, [pc, #8]	; (b8af8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8aee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8af0:	4770      	bx	lr
   b8af2:	bf00      	nop
   b8af4:	2003d2ec 	.word	0x2003d2ec
   b8af8:	2003e694 	.word	0x2003e694

000b8afc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8afc:	b510      	push	{r4, lr}
   b8afe:	4b04      	ldr	r3, [pc, #16]	; (b8b10 <_ZN9TCPClientD1Ev+0x14>)
   b8b00:	6003      	str	r3, [r0, #0]
   b8b02:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8b04:	6980      	ldr	r0, [r0, #24]
   b8b06:	b108      	cbz	r0, b8b0c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b8b08:	f7fe fd2d 	bl	b7566 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b8b0c:	4620      	mov	r0, r4
   b8b0e:	bd10      	pop	{r4, pc}
   b8b10:	000bd62c 	.word	0x000bd62c

000b8b14 <_ZN9TCPClientD0Ev>:
   b8b14:	b510      	push	{r4, lr}
   b8b16:	4604      	mov	r4, r0
   b8b18:	f7ff fff0 	bl	b8afc <_ZN9TCPClientD1Ev>
   b8b1c:	4620      	mov	r0, r4
   b8b1e:	211c      	movs	r1, #28
   b8b20:	f7fb fabf 	bl	b40a2 <_ZdlPvj>
   b8b24:	4620      	mov	r0, r4
   b8b26:	bd10      	pop	{r4, pc}

000b8b28 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8b28:	4b01      	ldr	r3, [pc, #4]	; (b8b30 <_GLOBAL__sub_I_RGB+0x8>)
   b8b2a:	2200      	movs	r2, #0
   b8b2c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8b2e:	4770      	bx	lr
   b8b30:	2003e6d8 	.word	0x2003e6d8

000b8b34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8b34:	4b01      	ldr	r3, [pc, #4]	; (b8b3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8b36:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8b38:	4770      	bx	lr
   b8b3a:	bf00      	nop
   b8b3c:	2003d2f8 	.word	0x2003d2f8

000b8b40 <serialEventRun>:
{
   b8b40:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8b42:	4b0b      	ldr	r3, [pc, #44]	; (b8b70 <serialEventRun+0x30>)
   b8b44:	b143      	cbz	r3, b8b58 <serialEventRun+0x18>
   b8b46:	f000 fc25 	bl	b9394 <_Z16_fetch_usbserialv>
   b8b4a:	6803      	ldr	r3, [r0, #0]
   b8b4c:	691b      	ldr	r3, [r3, #16]
   b8b4e:	4798      	blx	r3
   b8b50:	2800      	cmp	r0, #0
   b8b52:	dd01      	ble.n	b8b58 <serialEventRun+0x18>
        serialEvent();
   b8b54:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8b58:	4b06      	ldr	r3, [pc, #24]	; (b8b74 <serialEventRun+0x34>)
   b8b5a:	b143      	cbz	r3, b8b6e <serialEventRun+0x2e>
   b8b5c:	f001 f936 	bl	b9dcc <_Z22__fetch_global_Serial1v>
   b8b60:	6803      	ldr	r3, [r0, #0]
   b8b62:	691b      	ldr	r3, [r3, #16]
   b8b64:	4798      	blx	r3
   b8b66:	2800      	cmp	r0, #0
   b8b68:	dd01      	ble.n	b8b6e <serialEventRun+0x2e>
        serialEvent1();
   b8b6a:	f3af 8000 	nop.w
}
   b8b6e:	bd08      	pop	{r3, pc}
	...

000b8b78 <_post_loop>:
{
   b8b78:	b508      	push	{r3, lr}
	serialEventRun();
   b8b7a:	f7ff ffe1 	bl	b8b40 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8b7e:	f7fd fb9b 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8b82:	4b01      	ldr	r3, [pc, #4]	; (b8b88 <_post_loop+0x10>)
   b8b84:	6018      	str	r0, [r3, #0]
}
   b8b86:	bd08      	pop	{r3, pc}
   b8b88:	2003e73c 	.word	0x2003e73c

000b8b8c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8b8c:	4805      	ldr	r0, [pc, #20]	; (b8ba4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8b8e:	4a06      	ldr	r2, [pc, #24]	; (b8ba8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8b90:	4906      	ldr	r1, [pc, #24]	; (b8bac <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8b92:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8b94:	1a12      	subs	r2, r2, r0
   b8b96:	f001 ff8a 	bl	baaae <memcpy>
    __backup_sram_signature = signature;
   b8b9a:	4b05      	ldr	r3, [pc, #20]	; (b8bb0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8b9c:	4a05      	ldr	r2, [pc, #20]	; (b8bb4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8b9e:	601a      	str	r2, [r3, #0]
}
   b8ba0:	bd08      	pop	{r3, pc}
   b8ba2:	bf00      	nop
   b8ba4:	2003f400 	.word	0x2003f400
   b8ba8:	2003f404 	.word	0x2003f404
   b8bac:	000bdcd4 	.word	0x000bdcd4
   b8bb0:	2003f400 	.word	0x2003f400
   b8bb4:	9a271c1e 	.word	0x9a271c1e

000b8bb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8bb8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8bba:	2300      	movs	r3, #0
   b8bbc:	9300      	str	r3, [sp, #0]
   b8bbe:	461a      	mov	r2, r3
   b8bc0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8bc4:	f7fd fde4 	bl	b6790 <system_ctrl_set_result>
}
   b8bc8:	b003      	add	sp, #12
   b8bca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8bd0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8bd0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8bd2:	8843      	ldrh	r3, [r0, #2]
   b8bd4:	2b0a      	cmp	r3, #10
   b8bd6:	d008      	beq.n	b8bea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8bd8:	2b50      	cmp	r3, #80	; 0x50
   b8bda:	d10b      	bne.n	b8bf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8bdc:	4b09      	ldr	r3, [pc, #36]	; (b8c04 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8bde:	681b      	ldr	r3, [r3, #0]
   b8be0:	b14b      	cbz	r3, b8bf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8be2:	b003      	add	sp, #12
   b8be4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8be8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8bea:	f7ff ffe5 	bl	b8bb8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8bee:	b003      	add	sp, #12
   b8bf0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8bf4:	2300      	movs	r3, #0
   b8bf6:	9300      	str	r3, [sp, #0]
   b8bf8:	461a      	mov	r2, r3
   b8bfa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8bfe:	f7fd fdc7 	bl	b6790 <system_ctrl_set_result>
}
   b8c02:	e7f4      	b.n	b8bee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8c04:	2003e6ec 	.word	0x2003e6ec

000b8c08 <module_user_init_hook>:
{
   b8c08:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8c0a:	4812      	ldr	r0, [pc, #72]	; (b8c54 <module_user_init_hook+0x4c>)
   b8c0c:	2100      	movs	r1, #0
   b8c0e:	f7fd feb1 	bl	b6974 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8c12:	4b11      	ldr	r3, [pc, #68]	; (b8c58 <module_user_init_hook+0x50>)
   b8c14:	681a      	ldr	r2, [r3, #0]
   b8c16:	4b11      	ldr	r3, [pc, #68]	; (b8c5c <module_user_init_hook+0x54>)
   b8c18:	429a      	cmp	r2, r3
   b8c1a:	4b11      	ldr	r3, [pc, #68]	; (b8c60 <module_user_init_hook+0x58>)
   b8c1c:	bf0c      	ite	eq
   b8c1e:	2201      	moveq	r2, #1
   b8c20:	2200      	movne	r2, #0
   b8c22:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8c24:	d001      	beq.n	b8c2a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8c26:	f7ff ffb1 	bl	b8b8c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8c2a:	f7fd fb35 	bl	b6298 <HAL_RNG_GetRandomNumber>
   b8c2e:	4604      	mov	r4, r0
    srand(seed);
   b8c30:	f001 ff6e 	bl	bab10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8c34:	4b0b      	ldr	r3, [pc, #44]	; (b8c64 <module_user_init_hook+0x5c>)
   b8c36:	b113      	cbz	r3, b8c3e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8c38:	4620      	mov	r0, r4
   b8c3a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8c3e:	2100      	movs	r1, #0
   b8c40:	4808      	ldr	r0, [pc, #32]	; (b8c64 <module_user_init_hook+0x5c>)
   b8c42:	f7fd fe3f 	bl	b68c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8c4a:	4807      	ldr	r0, [pc, #28]	; (b8c68 <module_user_init_hook+0x60>)
   b8c4c:	2100      	movs	r1, #0
   b8c4e:	f7fd bd95 	b.w	b677c <system_ctrl_set_app_request_handler>
   b8c52:	bf00      	nop
   b8c54:	000b8b35 	.word	0x000b8b35
   b8c58:	2003f400 	.word	0x2003f400
   b8c5c:	9a271c1e 	.word	0x9a271c1e
   b8c60:	2003e6e8 	.word	0x2003e6e8
   b8c64:	00000000 	.word	0x00000000
   b8c68:	000b8bd1 	.word	0x000b8bd1

000b8c6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8c6c:	4770      	bx	lr

000b8c6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b8c6e:	2000      	movs	r0, #0
   b8c70:	4770      	bx	lr

000b8c72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8c72:	b510      	push	{r4, lr}
   b8c74:	2110      	movs	r1, #16
   b8c76:	4604      	mov	r4, r0
   b8c78:	f7fb fa13 	bl	b40a2 <_ZdlPvj>
   b8c7c:	4620      	mov	r0, r4
   b8c7e:	bd10      	pop	{r4, pc}

000b8c80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b8c80:	b508      	push	{r3, lr}
      { delete this; }
   b8c82:	f7ff fff6 	bl	b8c72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b8c86:	bd08      	pop	{r3, pc}

000b8c88 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b8c88:	b530      	push	{r4, r5, lr}
        type_(type) {
   b8c8a:	2200      	movs	r2, #0
   b8c8c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b8c90:	6002      	str	r2, [r0, #0]
   b8c92:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8c94:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c96:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8c98:	680c      	ldr	r4, [r1, #0]
   b8c9a:	8085      	strh	r5, [r0, #4]
   b8c9c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c9e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b8ca0:	bd30      	pop	{r4, r5, pc}

000b8ca2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b8ca2:	b510      	push	{r4, lr}
   b8ca4:	4604      	mov	r4, r0
    free((void*)msg_);
   b8ca6:	6800      	ldr	r0, [r0, #0]
   b8ca8:	f7fd fe1c 	bl	b68e4 <free>
}
   b8cac:	4620      	mov	r0, r4
   b8cae:	bd10      	pop	{r4, pc}

000b8cb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8cb0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b8cb2:	68c4      	ldr	r4, [r0, #12]
   b8cb4:	b1f4      	cbz	r4, b8cf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b8cb6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b8cb8:	2b02      	cmp	r3, #2
   b8cba:	d103      	bne.n	b8cc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b8cbc:	f104 000c 	add.w	r0, r4, #12
   b8cc0:	f7ff ffef 	bl	b8ca2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b8cc4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b8cc6:	b135      	cbz	r5, b8cd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b8cc8:	4628      	mov	r0, r5
   b8cca:	f7fb fb0f 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
   b8cce:	2110      	movs	r1, #16
   b8cd0:	4628      	mov	r0, r5
   b8cd2:	f7fb f9e6 	bl	b40a2 <_ZdlPvj>
   b8cd6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b8cd8:	b135      	cbz	r5, b8ce8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b8cda:	4628      	mov	r0, r5
   b8cdc:	f7fb fb06 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
   b8ce0:	2110      	movs	r1, #16
   b8ce2:	4628      	mov	r0, r5
   b8ce4:	f7fb f9dd 	bl	b40a2 <_ZdlPvj>
   b8ce8:	4620      	mov	r0, r4
   b8cea:	2114      	movs	r1, #20
   b8cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8cf0:	f7fb b9d7 	b.w	b40a2 <_ZdlPvj>
   b8cf4:	bd38      	pop	{r3, r4, r5, pc}

000b8cf6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8cf6:	680b      	ldr	r3, [r1, #0]
   b8cf8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8cfa:	684b      	ldr	r3, [r1, #4]
   b8cfc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8cfe:	b113      	cbz	r3, b8d06 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b8d00:	685a      	ldr	r2, [r3, #4]
   b8d02:	3201      	adds	r2, #1
   b8d04:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8d06:	4770      	bx	lr

000b8d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b8d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8d0a:	4604      	mov	r4, r0
   b8d0c:	4668      	mov	r0, sp
   b8d0e:	460d      	mov	r5, r1
   b8d10:	f7ff fff1 	bl	b8cf6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8d14:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8d16:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8d18:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b8d1a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8d1c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8d1e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b8d20:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b8d22:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8d24:	f7fb fdf4 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b8d28:	b135      	cbz	r5, b8d38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b8d2a:	1d28      	adds	r0, r5, #4
   b8d2c:	f7fb fdf0 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8d30:	2108      	movs	r1, #8
   b8d32:	4628      	mov	r0, r5
   b8d34:	f7fb f9b5 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b8d38:	4620      	mov	r0, r4
   b8d3a:	b003      	add	sp, #12
   b8d3c:	bd30      	pop	{r4, r5, pc}

000b8d3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b8d3e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8d40:	b510      	push	{r4, lr}
      if (_M_empty())
   b8d42:	b90a      	cbnz	r2, b8d48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b8d44:	f001 f8a4 	bl	b9e90 <_ZSt25__throw_bad_function_callv>
    }
   b8d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8d4c:	68c3      	ldr	r3, [r0, #12]
   b8d4e:	4718      	bx	r3

000b8d50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8d50:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8d52:	6800      	ldr	r0, [r0, #0]
   b8d54:	f100 0110 	add.w	r1, r0, #16
   b8d58:	f7ff fff1 	bl	b8d3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8d5c:	bd08      	pop	{r3, pc}

000b8d5e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b8d5e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8d60:	b510      	push	{r4, lr}
      if (_M_empty())
   b8d62:	b90a      	cbnz	r2, b8d68 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8d64:	f001 f894 	bl	b9e90 <_ZSt25__throw_bad_function_callv>
    }
   b8d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8d6c:	68c3      	ldr	r3, [r0, #12]
   b8d6e:	4718      	bx	r3

000b8d70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8d70:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8d72:	6800      	ldr	r0, [r0, #0]
   b8d74:	f100 0110 	add.w	r1, r0, #16
   b8d78:	f7ff fff1 	bl	b8d5e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8d7c:	bd08      	pop	{r3, pc}
	...

000b8d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8d80:	b538      	push	{r3, r4, r5, lr}
   b8d82:	2300      	movs	r3, #0
   b8d84:	4604      	mov	r4, r0
   b8d86:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8d88:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b8d8a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8d8c:	f7fb f983 	bl	b4096 <_Znwj>
   b8d90:	b128      	cbz	r0, b8d9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8d92:	2301      	movs	r3, #1
   b8d94:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8d98:	4b02      	ldr	r3, [pc, #8]	; (b8da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b8d9a:	6003      	str	r3, [r0, #0]
   b8d9c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8d9e:	6020      	str	r0, [r4, #0]
	}
   b8da0:	4620      	mov	r0, r4
   b8da2:	bd38      	pop	{r3, r4, r5, pc}
   b8da4:	000bd540 	.word	0x000bd540

000b8da8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8da8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8daa:	2300      	movs	r3, #0
   b8dac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8dae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8db0:	4604      	mov	r4, r0
   b8db2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8db4:	b12b      	cbz	r3, b8dc2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8db6:	2202      	movs	r2, #2
   b8db8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8dba:	68eb      	ldr	r3, [r5, #12]
   b8dbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8dbe:	68ab      	ldr	r3, [r5, #8]
   b8dc0:	60a3      	str	r3, [r4, #8]
    }
   b8dc2:	4620      	mov	r0, r4
   b8dc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8dca:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b8dcc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b8dce:	4668      	mov	r0, sp
   b8dd0:	f7ff ff5a 	bl	b8c88 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8dd4:	f04f 0302 	mov.w	r3, #2
   b8dd8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b8ddc:	2a00      	cmp	r2, #0
   b8dde:	d103      	bne.n	b8de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b8de0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8de4:	2900      	cmp	r1, #0
   b8de6:	d1f7      	bne.n	b8dd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8de8:	d125      	bne.n	b8e36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b8dea:	f104 050c 	add.w	r5, r4, #12
   b8dee:	4669      	mov	r1, sp
   b8df0:	4628      	mov	r0, r5
   b8df2:	f7ff ff49 	bl	b8c88 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b8df6:	f3bf 8f5b 	dmb	ish
   b8dfa:	2301      	movs	r3, #1
   b8dfc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8dfe:	2000      	movs	r0, #0
   b8e00:	f104 0308 	add.w	r3, r4, #8
   b8e04:	f3bf 8f5b 	dmb	ish
   b8e08:	e853 6f00 	ldrex	r6, [r3]
   b8e0c:	e843 0200 	strex	r2, r0, [r3]
   b8e10:	2a00      	cmp	r2, #0
   b8e12:	d1f9      	bne.n	b8e08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8e14:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8e18:	b16e      	cbz	r6, b8e36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b8e1a:	f7fd fc97 	bl	b674c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8e1e:	b178      	cbz	r0, b8e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8e20:	4629      	mov	r1, r5
   b8e22:	4630      	mov	r0, r6
   b8e24:	f7ff ff8b 	bl	b8d3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b8e28:	4630      	mov	r0, r6
   b8e2a:	f7fb fa5f 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8e2e:	2110      	movs	r1, #16
   b8e30:	4630      	mov	r0, r6
   b8e32:	f7fb f936 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b8e36:	4668      	mov	r0, sp
   b8e38:	f7ff ff33 	bl	b8ca2 <_ZN8particle5ErrorD1Ev>
    }
   b8e3c:	b009      	add	sp, #36	; 0x24
   b8e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8e40:	4631      	mov	r1, r6
   b8e42:	a802      	add	r0, sp, #8
   b8e44:	f7ff ffb0 	bl	b8da8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8e48:	68e0      	ldr	r0, [r4, #12]
   b8e4a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8e4e:	b108      	cbz	r0, b8e54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b8e50:	f001 feae 	bl	babb0 <strdup>
        type_(type) {
   b8e54:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8e56:	2010      	movs	r0, #16
   b8e58:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8e5c:	f7fb f91b 	bl	b4096 <_Znwj>
   b8e60:	4605      	mov	r5, r0
   b8e62:	b1e8      	cbz	r0, b8ea0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8e64:	2700      	movs	r7, #0
   b8e66:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e68:	2018      	movs	r0, #24
   b8e6a:	f7fb f914 	bl	b4096 <_Znwj>
   b8e6e:	4604      	mov	r4, r0
   b8e70:	b188      	cbz	r0, b8e96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b8e72:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8e74:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8e76:	a802      	add	r0, sp, #8
   b8e78:	f7ff fa08 	bl	b828c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e7c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8e7e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e80:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e82:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8e84:	9204      	str	r2, [sp, #16]
   b8e86:	a906      	add	r1, sp, #24
   b8e88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e8a:	60e3      	str	r3, [r4, #12]
   b8e8c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8e90:	9205      	str	r2, [sp, #20]
   b8e92:	f7ff fef9 	bl	b8c88 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8e96:	4b08      	ldr	r3, [pc, #32]	; (b8eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8e98:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8e9a:	4b08      	ldr	r3, [pc, #32]	; (b8ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e9c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8e9e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8ea0:	a806      	add	r0, sp, #24
   b8ea2:	f7ff fefe 	bl	b8ca2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8ea6:	a802      	add	r0, sp, #8
   b8ea8:	f7fb fa20 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8eac:	2200      	movs	r2, #0
   b8eae:	4629      	mov	r1, r5
   b8eb0:	4803      	ldr	r0, [pc, #12]	; (b8ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b8eb2:	f7fd fc53 	bl	b675c <application_thread_invoke>
   b8eb6:	e7b7      	b.n	b8e28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8eb8:	000b8d51 	.word	0x000b8d51
   b8ebc:	000b8fd5 	.word	0x000b8fd5
   b8ec0:	000b94dd 	.word	0x000b94dd

000b8ec4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ec8:	b08b      	sub	sp, #44	; 0x2c
   b8eca:	4605      	mov	r5, r0
   b8ecc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8ed0:	460f      	mov	r7, r1
   b8ed2:	4690      	mov	r8, r2
   b8ed4:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8ed6:	f7fd fcd5 	bl	b6884 <spark_cloud_flag_connected>
   b8eda:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b8edc:	4683      	mov	fp, r0
   b8ede:	bb38      	cbnz	r0, b8f30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8ee0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8ee4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8ee6:	a905      	add	r1, sp, #20
   b8ee8:	4630      	mov	r0, r6
   b8eea:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8eee:	f7ff fecb 	bl	b8c88 <_ZN8particle5ErrorC1EOS0_>
   b8ef2:	2014      	movs	r0, #20
   b8ef4:	f7fb f8cf 	bl	b4096 <_Znwj>
   b8ef8:	4604      	mov	r4, r0
   b8efa:	b148      	cbz	r0, b8f10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b8efc:	2302      	movs	r3, #2
   b8efe:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8f00:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8f02:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8f06:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8f08:	4631      	mov	r1, r6
   b8f0a:	300c      	adds	r0, #12
   b8f0c:	f7ff febc 	bl	b8c88 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8f10:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8f12:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8f14:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8f18:	f7ff ff32 	bl	b8d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8f1c:	4630      	mov	r0, r6
   b8f1e:	f7ff fec0 	bl	b8ca2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8f22:	a805      	add	r0, sp, #20
   b8f24:	f7ff febd 	bl	b8ca2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8f28:	4628      	mov	r0, r5
   b8f2a:	b00b      	add	sp, #44	; 0x2c
   b8f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8f30:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8f32:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8f34:	2014      	movs	r0, #20
   b8f36:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b8f3a:	9307      	str	r3, [sp, #28]
   b8f3c:	f7fb f8ab 	bl	b4096 <_Znwj>
   b8f40:	4601      	mov	r1, r0
   b8f42:	b118      	cbz	r0, b8f4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8f48:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8f4a:	7044      	strb	r4, [r0, #1]
   b8f4c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8f4e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8f50:	f7ff ff16 	bl	b8d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8f54:	4b1e      	ldr	r3, [pc, #120]	; (b8fd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8f56:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8f58:	2008      	movs	r0, #8
   b8f5a:	f7fb f89c 	bl	b4096 <_Znwj>
   b8f5e:	4604      	mov	r4, r0
   b8f60:	b110      	cbz	r0, b8f68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b8f62:	a903      	add	r1, sp, #12
   b8f64:	f7ff fec7 	bl	b8cf6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8f68:	9600      	str	r6, [sp, #0]
   b8f6a:	fa5f f38a 	uxtb.w	r3, sl
   b8f6e:	464a      	mov	r2, r9
   b8f70:	4641      	mov	r1, r8
   b8f72:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8f74:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8f76:	f7fd fc8d 	bl	b6894 <spark_send_event>
   b8f7a:	b9b8      	cbnz	r0, b8fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8f7c:	9b03      	ldr	r3, [sp, #12]
   b8f7e:	785b      	ldrb	r3, [r3, #1]
   b8f80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8f84:	b993      	cbnz	r3, b8fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8f86:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8f8a:	a905      	add	r1, sp, #20
   b8f8c:	a803      	add	r0, sp, #12
   b8f8e:	9205      	str	r2, [sp, #20]
   b8f90:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8f94:	f7ff ff18 	bl	b8dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8f98:	a805      	add	r0, sp, #20
   b8f9a:	f7ff fe82 	bl	b8ca2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b8f9e:	a805      	add	r0, sp, #20
   b8fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8fa2:	f7ff feb1 	bl	b8d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8fa6:	a806      	add	r0, sp, #24
   b8fa8:	f7fb fcb2 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8fac:	a903      	add	r1, sp, #12
   b8fae:	a805      	add	r0, sp, #20
   b8fb0:	f7ff fea1 	bl	b8cf6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8fb4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8fb6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8fb8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b8fba:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8fbc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8fbe:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8fc0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8fc2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8fc4:	f7fb fca4 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8fc8:	a804      	add	r0, sp, #16
   b8fca:	f7fb fca1 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b8fce:	e7ab      	b.n	b8f28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8fd0:	000b9051 	.word	0x000b9051

000b8fd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8fd4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8fd8:	4605      	mov	r5, r0
	switch (__op)
   b8fda:	d103      	bne.n	b8fe4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8fdc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8fde:	6003      	str	r3, [r0, #0]
      }
   b8fe0:	2000      	movs	r0, #0
   b8fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8fe4:	2a02      	cmp	r2, #2
   b8fe6:	d010      	beq.n	b900a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8fe8:	2a03      	cmp	r2, #3
   b8fea:	d1f9      	bne.n	b8fe0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8fec:	6804      	ldr	r4, [r0, #0]
   b8fee:	2c00      	cmp	r4, #0
   b8ff0:	d0f6      	beq.n	b8fe0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8ff2:	f104 0010 	add.w	r0, r4, #16
   b8ff6:	f7ff fe54 	bl	b8ca2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8ffa:	4620      	mov	r0, r4
   b8ffc:	f7fb f976 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9000:	2118      	movs	r1, #24
   b9002:	4620      	mov	r0, r4
   b9004:	f7fb f84d 	bl	b40a2 <_ZdlPvj>
   b9008:	e7ea      	b.n	b8fe0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b900a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b900c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b900e:	f7fb f842 	bl	b4096 <_Znwj>
   b9012:	4604      	mov	r4, r0
   b9014:	b150      	cbz	r0, b902c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b9016:	4631      	mov	r1, r6
   b9018:	f7ff fec6 	bl	b8da8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b901c:	6930      	ldr	r0, [r6, #16]
   b901e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9022:	b108      	cbz	r0, b9028 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b9024:	f001 fdc4 	bl	babb0 <strdup>
        type_(type) {
   b9028:	6120      	str	r0, [r4, #16]
   b902a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b902c:	602c      	str	r4, [r5, #0]
	}
   b902e:	e7d7      	b.n	b8fe0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b9030 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b9030:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9032:	2300      	movs	r3, #0
   b9034:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b9036:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9038:	4604      	mov	r4, r0
   b903a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b903c:	b12b      	cbz	r3, b904a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b903e:	2202      	movs	r2, #2
   b9040:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9042:	68eb      	ldr	r3, [r5, #12]
   b9044:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9046:	68ab      	ldr	r3, [r5, #8]
   b9048:	60a3      	str	r3, [r4, #8]
    }
   b904a:	4620      	mov	r0, r4
   b904c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9050 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b9050:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9052:	b089      	sub	sp, #36	; 0x24
   b9054:	4604      	mov	r4, r0
   b9056:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b9058:	a801      	add	r0, sp, #4
   b905a:	4611      	mov	r1, r2
   b905c:	f7ff fe54 	bl	b8d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b9060:	b1a4      	cbz	r4, b908c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b9062:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9064:	b11d      	cbz	r5, b906e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b9066:	4628      	mov	r0, r5
   b9068:	f001 fda2 	bl	babb0 <strdup>
   b906c:	4605      	mov	r5, r0
   b906e:	a801      	add	r0, sp, #4
   b9070:	a903      	add	r1, sp, #12
        type_(type) {
   b9072:	9503      	str	r5, [sp, #12]
   b9074:	f8ad 4010 	strh.w	r4, [sp, #16]
   b9078:	f7ff fea6 	bl	b8dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b907c:	a803      	add	r0, sp, #12
   b907e:	f7ff fe10 	bl	b8ca2 <_ZN8particle5ErrorD1Ev>
   b9082:	a802      	add	r0, sp, #8
   b9084:	f7fb fc44 	bl	b4910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9088:	b009      	add	sp, #36	; 0x24
   b908a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b908c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b908e:	2301      	movs	r3, #1
   b9090:	e8d5 2f4f 	ldrexb	r2, [r5]
   b9094:	2a00      	cmp	r2, #0
   b9096:	d103      	bne.n	b90a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b9098:	e8c5 3f41 	strexb	r1, r3, [r5]
   b909c:	2900      	cmp	r1, #0
   b909e:	d1f7      	bne.n	b9090 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b90a0:	d1ef      	bne.n	b9082 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b90a2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b90a4:	f3bf 8f5b 	dmb	ish
   b90a8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b90aa:	1d2b      	adds	r3, r5, #4
   b90ac:	f3bf 8f5b 	dmb	ish
   b90b0:	e853 6f00 	ldrex	r6, [r3]
   b90b4:	e843 4200 	strex	r2, r4, [r3]
   b90b8:	2a00      	cmp	r2, #0
   b90ba:	d1f9      	bne.n	b90b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b90bc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b90c0:	2e00      	cmp	r6, #0
   b90c2:	d0de      	beq.n	b9082 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b90c4:	4620      	mov	r0, r4
   b90c6:	f7fd fb41 	bl	b674c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b90ca:	4607      	mov	r7, r0
   b90cc:	b160      	cbz	r0, b90e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b90ce:	f105 010c 	add.w	r1, r5, #12
   b90d2:	4630      	mov	r0, r6
   b90d4:	f7ff fe43 	bl	b8d5e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b90d8:	4630      	mov	r0, r6
   b90da:	f7fb f907 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b90de:	2110      	movs	r1, #16
   b90e0:	4630      	mov	r0, r6
   b90e2:	f7fa ffde 	bl	b40a2 <_ZdlPvj>
   b90e6:	e7cc      	b.n	b9082 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b90e8:	4631      	mov	r1, r6
   b90ea:	a803      	add	r0, sp, #12
   b90ec:	f7ff ffa0 	bl	b9030 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b90f0:	7b2b      	ldrb	r3, [r5, #12]
   b90f2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b90f6:	2010      	movs	r0, #16
   b90f8:	f7fa ffcd 	bl	b4096 <_Znwj>
   b90fc:	4605      	mov	r5, r0
   b90fe:	b1d0      	cbz	r0, b9136 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b9100:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9102:	2014      	movs	r0, #20
   b9104:	f7fa ffc7 	bl	b4096 <_Znwj>
   b9108:	4604      	mov	r4, r0
   b910a:	b178      	cbz	r0, b912c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b910c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b910e:	4601      	mov	r1, r0
   b9110:	a803      	add	r0, sp, #12
   b9112:	f7ff f8bb 	bl	b828c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9116:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9118:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b911a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b911c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b911e:	9205      	str	r2, [sp, #20]
   b9120:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9122:	60e3      	str	r3, [r4, #12]
   b9124:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b9128:	9206      	str	r2, [sp, #24]
   b912a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b912c:	4b06      	ldr	r3, [pc, #24]	; (b9148 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b912e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9130:	4b06      	ldr	r3, [pc, #24]	; (b914c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9132:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9134:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b9136:	a803      	add	r0, sp, #12
   b9138:	f7fb f8d8 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b913c:	2200      	movs	r2, #0
   b913e:	4629      	mov	r1, r5
   b9140:	4803      	ldr	r0, [pc, #12]	; (b9150 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b9142:	f7fd fb0b 	bl	b675c <application_thread_invoke>
   b9146:	e7c7      	b.n	b90d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b9148:	000b8d71 	.word	0x000b8d71
   b914c:	000b9155 	.word	0x000b9155
   b9150:	000b94dd 	.word	0x000b94dd

000b9154 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b9154:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9156:	b570      	push	{r4, r5, r6, lr}
   b9158:	4604      	mov	r4, r0
	switch (__op)
   b915a:	d103      	bne.n	b9164 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b915c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b915e:	6003      	str	r3, [r0, #0]
      }
   b9160:	2000      	movs	r0, #0
   b9162:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b9164:	2a02      	cmp	r2, #2
   b9166:	d00c      	beq.n	b9182 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b9168:	2a03      	cmp	r2, #3
   b916a:	d1f9      	bne.n	b9160 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b916c:	6804      	ldr	r4, [r0, #0]
   b916e:	2c00      	cmp	r4, #0
   b9170:	d0f6      	beq.n	b9160 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b9172:	4620      	mov	r0, r4
   b9174:	f7fb f8ba 	bl	b42ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9178:	2114      	movs	r1, #20
   b917a:	4620      	mov	r0, r4
   b917c:	f7fa ff91 	bl	b40a2 <_ZdlPvj>
   b9180:	e7ee      	b.n	b9160 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b9182:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b9184:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9186:	f7fa ff86 	bl	b4096 <_Znwj>
   b918a:	4605      	mov	r5, r0
   b918c:	b120      	cbz	r0, b9198 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b918e:	4631      	mov	r1, r6
   b9190:	f7ff ff4e 	bl	b9030 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b9194:	7c33      	ldrb	r3, [r6, #16]
   b9196:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b9198:	6025      	str	r5, [r4, #0]
	}
   b919a:	e7e1      	b.n	b9160 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b919c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b919c:	4770      	bx	lr

000b919e <_ZN9IPAddressD0Ev>:
   b919e:	b510      	push	{r4, lr}
   b91a0:	2118      	movs	r1, #24
   b91a2:	4604      	mov	r4, r0
   b91a4:	f7fa ff7d 	bl	b40a2 <_ZdlPvj>
   b91a8:	4620      	mov	r0, r4
   b91aa:	bd10      	pop	{r4, pc}

000b91ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b91ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b91ae:	7d03      	ldrb	r3, [r0, #20]
   b91b0:	2b06      	cmp	r3, #6
{
   b91b2:	b08d      	sub	sp, #52	; 0x34
   b91b4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b91b6:	f100 0704 	add.w	r7, r0, #4
   b91ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b91be:	d012      	beq.n	b91e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b91c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b91c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b91c8:	220a      	movs	r2, #10
   b91ca:	4630      	mov	r0, r6
   b91cc:	f7ff fb55 	bl	b887a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b91d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b91d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b91d4:	d019      	beq.n	b920a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b91d6:	2c00      	cmp	r4, #0
   b91d8:	d0f4      	beq.n	b91c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b91da:	212e      	movs	r1, #46	; 0x2e
   b91dc:	4630      	mov	r0, r6
   b91de:	f7ff fb33 	bl	b8848 <_ZN5Print5printEc>
   b91e2:	4404      	add	r4, r0
   b91e4:	e7ee      	b.n	b91c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b91e6:	232f      	movs	r3, #47	; 0x2f
   b91e8:	466a      	mov	r2, sp
   b91ea:	4639      	mov	r1, r7
   b91ec:	200a      	movs	r0, #10
		buf[0] = 0;
   b91ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b91f2:	f7fd f963 	bl	b64bc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b91f6:	4668      	mov	r0, sp
   b91f8:	f001 fcf7 	bl	babea <strlen>
   b91fc:	6833      	ldr	r3, [r6, #0]
   b91fe:	4602      	mov	r2, r0
   b9200:	68db      	ldr	r3, [r3, #12]
   b9202:	4669      	mov	r1, sp
   b9204:	4630      	mov	r0, r6
   b9206:	4798      	blx	r3
   b9208:	4604      	mov	r4, r0
    }
    return n;
}
   b920a:	4620      	mov	r0, r4
   b920c:	b00d      	add	sp, #52	; 0x34
   b920e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9210 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9210:	b510      	push	{r4, lr}
   b9212:	4b05      	ldr	r3, [pc, #20]	; (b9228 <_ZN9IPAddressC1Ev+0x18>)
   b9214:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b9216:	2211      	movs	r2, #17
   b9218:	f840 3b04 	str.w	r3, [r0], #4
   b921c:	2100      	movs	r1, #0
   b921e:	f001 fc6e 	bl	baafe <memset>
}
   b9222:	4620      	mov	r0, r4
   b9224:	bd10      	pop	{r4, pc}
   b9226:	bf00      	nop
   b9228:	000bd55c 	.word	0x000bd55c

000b922c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b922c:	4603      	mov	r3, r0
   b922e:	4a07      	ldr	r2, [pc, #28]	; (b924c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9230:	b510      	push	{r4, lr}
   b9232:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9236:	f101 0210 	add.w	r2, r1, #16
   b923a:	f851 4b04 	ldr.w	r4, [r1], #4
   b923e:	f843 4b04 	str.w	r4, [r3], #4
   b9242:	4291      	cmp	r1, r2
   b9244:	d1f9      	bne.n	b923a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9246:	780a      	ldrb	r2, [r1, #0]
   b9248:	701a      	strb	r2, [r3, #0]
}
   b924a:	bd10      	pop	{r4, pc}
   b924c:	000bd55c 	.word	0x000bd55c

000b9250 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b9250:	4a02      	ldr	r2, [pc, #8]	; (b925c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b9252:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b9256:	2204      	movs	r2, #4
   b9258:	7502      	strb	r2, [r0, #20]
}
   b925a:	4770      	bx	lr
   b925c:	000bd55c 	.word	0x000bd55c

000b9260 <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b9260:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b9262:	2b04      	cmp	r3, #4
   b9264:	d104      	bne.n	b9270 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b9266:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9268:	3800      	subs	r0, #0
   b926a:	bf18      	it	ne
   b926c:	2001      	movne	r0, #1
   b926e:	4770      	bx	lr
    } else if (version() == 6) {
   b9270:	2b06      	cmp	r3, #6
   b9272:	d107      	bne.n	b9284 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9274:	6843      	ldr	r3, [r0, #4]
   b9276:	b93b      	cbnz	r3, b9288 <_ZNK9IPAddresscvbEv+0x28>
   b9278:	6883      	ldr	r3, [r0, #8]
   b927a:	b92b      	cbnz	r3, b9288 <_ZNK9IPAddresscvbEv+0x28>
   b927c:	68c3      	ldr	r3, [r0, #12]
   b927e:	b91b      	cbnz	r3, b9288 <_ZNK9IPAddresscvbEv+0x28>
   b9280:	6900      	ldr	r0, [r0, #16]
   b9282:	e7f1      	b.n	b9268 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b9284:	2000      	movs	r0, #0
   b9286:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9288:	2001      	movs	r0, #1
}
   b928a:	4770      	bx	lr

000b928c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b928c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b928e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9292:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9296:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b929a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b929e:	2304      	movs	r3, #4
   b92a0:	6041      	str	r1, [r0, #4]
   b92a2:	7503      	strb	r3, [r0, #20]
}
   b92a4:	bd10      	pop	{r4, pc}
	...

000b92a8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b92a8:	b513      	push	{r0, r1, r4, lr}
   b92aa:	4c04      	ldr	r4, [pc, #16]	; (b92bc <_ZN9IPAddressC1Ehhhh+0x14>)
   b92ac:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b92ae:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b92b2:	9400      	str	r4, [sp, #0]
   b92b4:	f7ff ffea 	bl	b928c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b92b8:	b002      	add	sp, #8
   b92ba:	bd10      	pop	{r4, pc}
   b92bc:	000bd55c 	.word	0x000bd55c

000b92c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b92c0:	b507      	push	{r0, r1, r2, lr}
   b92c2:	4b06      	ldr	r3, [pc, #24]	; (b92dc <_ZN9IPAddressC1EPKh+0x1c>)
   b92c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b92c6:	78cb      	ldrb	r3, [r1, #3]
   b92c8:	9300      	str	r3, [sp, #0]
   b92ca:	788b      	ldrb	r3, [r1, #2]
   b92cc:	784a      	ldrb	r2, [r1, #1]
   b92ce:	7809      	ldrb	r1, [r1, #0]
   b92d0:	f7ff ffdc 	bl	b928c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b92d4:	b003      	add	sp, #12
   b92d6:	f85d fb04 	ldr.w	pc, [sp], #4
   b92da:	bf00      	nop
   b92dc:	000bd55c 	.word	0x000bd55c

000b92e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b92e0:	7441      	strb	r1, [r0, #17]
}
   b92e2:	4770      	bx	lr

000b92e4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b92e4:	4770      	bx	lr

000b92e6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b92e6:	4770      	bx	lr

000b92e8 <_ZN9USBSerial4readEv>:
{
   b92e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b92ea:	2100      	movs	r1, #0
   b92ec:	7c00      	ldrb	r0, [r0, #16]
   b92ee:	f7fd f9ed 	bl	b66cc <HAL_USB_USART_Receive_Data>
}
   b92f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b92f6:	bd08      	pop	{r3, pc}

000b92f8 <_ZN9USBSerial4peekEv>:
{
   b92f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b92fa:	2101      	movs	r1, #1
   b92fc:	7c00      	ldrb	r0, [r0, #16]
   b92fe:	f7fd f9e5 	bl	b66cc <HAL_USB_USART_Receive_Data>
}
   b9302:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9306:	bd08      	pop	{r3, pc}

000b9308 <_ZN9USBSerial17availableForWriteEv>:
{
   b9308:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b930a:	7c00      	ldrb	r0, [r0, #16]
   b930c:	f7fd f9d6 	bl	b66bc <HAL_USB_USART_Available_Data_For_Write>
}
   b9310:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9314:	bd08      	pop	{r3, pc}

000b9316 <_ZN9USBSerial9availableEv>:
{
   b9316:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9318:	7c00      	ldrb	r0, [r0, #16]
   b931a:	f7fd f9c7 	bl	b66ac <HAL_USB_USART_Available_Data>
}
   b931e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9322:	bd08      	pop	{r3, pc}

000b9324 <_ZN9USBSerial5writeEh>:
{
   b9324:	b513      	push	{r0, r1, r4, lr}
   b9326:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9328:	7c00      	ldrb	r0, [r0, #16]
{
   b932a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b932c:	f7fd f9c6 	bl	b66bc <HAL_USB_USART_Available_Data_For_Write>
   b9330:	2800      	cmp	r0, #0
   b9332:	9901      	ldr	r1, [sp, #4]
   b9334:	dc01      	bgt.n	b933a <_ZN9USBSerial5writeEh+0x16>
   b9336:	7c60      	ldrb	r0, [r4, #17]
   b9338:	b120      	cbz	r0, b9344 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b933a:	7c20      	ldrb	r0, [r4, #16]
   b933c:	f7fd f9ce 	bl	b66dc <HAL_USB_USART_Send_Data>
   b9340:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9344:	b002      	add	sp, #8
   b9346:	bd10      	pop	{r4, pc}

000b9348 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9348:	7c00      	ldrb	r0, [r0, #16]
   b934a:	f7fd b9cf 	b.w	b66ec <HAL_USB_USART_Flush_Data>

000b934e <_ZN9USBSerialD0Ev>:
   b934e:	b510      	push	{r4, lr}
   b9350:	2114      	movs	r1, #20
   b9352:	4604      	mov	r4, r0
   b9354:	f7fa fea5 	bl	b40a2 <_ZdlPvj>
   b9358:	4620      	mov	r0, r4
   b935a:	bd10      	pop	{r4, pc}

000b935c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b935c:	b510      	push	{r4, lr}
   b935e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9362:	4604      	mov	r4, r0
   b9364:	4608      	mov	r0, r1
   b9366:	2100      	movs	r1, #0
   b9368:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b936c:	4b04      	ldr	r3, [pc, #16]	; (b9380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b936e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9370:	2301      	movs	r3, #1
  _serial = serial;
   b9372:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9374:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9376:	4611      	mov	r1, r2
   b9378:	f7fd f990 	bl	b669c <HAL_USB_USART_Init>
}
   b937c:	4620      	mov	r0, r4
   b937e:	bd10      	pop	{r4, pc}
   b9380:	000bd570 	.word	0x000bd570

000b9384 <_Z19acquireSerialBufferv>:
{
   b9384:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9386:	2214      	movs	r2, #20
{
   b9388:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b938a:	2100      	movs	r1, #0
   b938c:	f001 fbb7 	bl	baafe <memset>
}
   b9390:	4620      	mov	r0, r4
   b9392:	bd10      	pop	{r4, pc}

000b9394 <_Z16_fetch_usbserialv>:
{
   b9394:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9396:	4c0f      	ldr	r4, [pc, #60]	; (b93d4 <_Z16_fetch_usbserialv+0x40>)
{
   b9398:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b939a:	a803      	add	r0, sp, #12
   b939c:	f7ff fff2 	bl	b9384 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b93a0:	7821      	ldrb	r1, [r4, #0]
   b93a2:	f3bf 8f5b 	dmb	ish
   b93a6:	f011 0101 	ands.w	r1, r1, #1
   b93aa:	d10f      	bne.n	b93cc <_Z16_fetch_usbserialv+0x38>
   b93ac:	4620      	mov	r0, r4
   b93ae:	9101      	str	r1, [sp, #4]
   b93b0:	f7fa fe79 	bl	b40a6 <__cxa_guard_acquire>
   b93b4:	9901      	ldr	r1, [sp, #4]
   b93b6:	b148      	cbz	r0, b93cc <_Z16_fetch_usbserialv+0x38>
   b93b8:	aa03      	add	r2, sp, #12
   b93ba:	4807      	ldr	r0, [pc, #28]	; (b93d8 <_Z16_fetch_usbserialv+0x44>)
   b93bc:	f7ff ffce 	bl	b935c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b93c0:	4620      	mov	r0, r4
   b93c2:	f7fa fe75 	bl	b40b0 <__cxa_guard_release>
   b93c6:	4805      	ldr	r0, [pc, #20]	; (b93dc <_Z16_fetch_usbserialv+0x48>)
   b93c8:	f001 fb40 	bl	baa4c <atexit>
	return _usbserial;
}
   b93cc:	4802      	ldr	r0, [pc, #8]	; (b93d8 <_Z16_fetch_usbserialv+0x44>)
   b93ce:	b008      	add	sp, #32
   b93d0:	bd10      	pop	{r4, pc}
   b93d2:	bf00      	nop
   b93d4:	2003e6f0 	.word	0x2003e6f0
   b93d8:	2003e6f4 	.word	0x2003e6f4
   b93dc:	000b92e5 	.word	0x000b92e5

000b93e0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b93e0:	4700      	bx	r0
	...

000b93e4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b93e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b93e8:	2400      	movs	r4, #0
{
   b93ea:	461d      	mov	r5, r3
   b93ec:	460f      	mov	r7, r1
   b93ee:	4690      	mov	r8, r2
   b93f0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b93f2:	f7fc ff29 	bl	b6248 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b93f6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b93f8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b93fc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9400:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9404:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9408:	bfa2      	ittt	ge
   b940a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b940e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9412:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9414:	4907      	ldr	r1, [pc, #28]	; (b9434 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9416:	9400      	str	r4, [sp, #0]
   b9418:	4643      	mov	r3, r8
   b941a:	463a      	mov	r2, r7
   b941c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b941e:	bfa8      	it	ge
   b9420:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9424:	f7fc ff08 	bl	b6238 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9428:	fab0 f080 	clz	r0, r0
   b942c:	0940      	lsrs	r0, r0, #5
   b942e:	b004      	add	sp, #16
   b9430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9434:	000b93e1 	.word	0x000b93e1

000b9438 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9438:	4770      	bx	lr

000b943a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b943a:	7441      	strb	r1, [r0, #17]
}
   b943c:	4770      	bx	lr

000b943e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b943e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9440:	7c00      	ldrb	r0, [r0, #16]
   b9442:	f7fd f88b 	bl	b655c <hal_usart_available_data_for_write>
}
   b9446:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b944a:	bd08      	pop	{r3, pc}

000b944c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b944c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b944e:	7c00      	ldrb	r0, [r0, #16]
   b9450:	f7fd f85c 	bl	b650c <hal_usart_available>
}
   b9454:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9458:	bd08      	pop	{r3, pc}

000b945a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b945a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b945c:	7c00      	ldrb	r0, [r0, #16]
   b945e:	f7fd f865 	bl	b652c <hal_usart_peek>
}
   b9462:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9466:	bd08      	pop	{r3, pc}

000b9468 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9468:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b946a:	7c00      	ldrb	r0, [r0, #16]
   b946c:	f7fd f856 	bl	b651c <hal_usart_read>
}
   b9470:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9474:	bd08      	pop	{r3, pc}

000b9476 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9476:	7c00      	ldrb	r0, [r0, #16]
   b9478:	f7fd b860 	b.w	b653c <hal_usart_flush>

000b947c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b947c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b947e:	7c45      	ldrb	r5, [r0, #17]
{
   b9480:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9482:	b12d      	cbz	r5, b9490 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9484:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9486:	b003      	add	sp, #12
   b9488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b948c:	f7fd b836 	b.w	b64fc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9490:	7c00      	ldrb	r0, [r0, #16]
   b9492:	9101      	str	r1, [sp, #4]
   b9494:	f7fd f862 	bl	b655c <hal_usart_available_data_for_write>
   b9498:	2800      	cmp	r0, #0
   b949a:	9901      	ldr	r1, [sp, #4]
   b949c:	dcf2      	bgt.n	b9484 <_ZN11USARTSerial5writeEh+0x8>
}
   b949e:	4628      	mov	r0, r5
   b94a0:	b003      	add	sp, #12
   b94a2:	bd30      	pop	{r4, r5, pc}

000b94a4 <_ZN11USARTSerialD0Ev>:
   b94a4:	b510      	push	{r4, lr}
   b94a6:	2114      	movs	r1, #20
   b94a8:	4604      	mov	r4, r0
   b94aa:	f7fa fdfa 	bl	b40a2 <_ZdlPvj>
   b94ae:	4620      	mov	r0, r4
   b94b0:	bd10      	pop	{r4, pc}
	...

000b94b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b94b4:	b510      	push	{r4, lr}
   b94b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b94ba:	4604      	mov	r4, r0
   b94bc:	4608      	mov	r0, r1
   b94be:	4611      	mov	r1, r2
   b94c0:	2200      	movs	r2, #0
   b94c2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b94c6:	4b04      	ldr	r3, [pc, #16]	; (b94d8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b94c8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b94ca:	2301      	movs	r3, #1
  _serial = serial;
   b94cc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b94ce:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b94d0:	f7fd f84c 	bl	b656c <hal_usart_init_ex>
}
   b94d4:	4620      	mov	r0, r4
   b94d6:	bd10      	pop	{r4, pc}
   b94d8:	000bd5a0 	.word	0x000bd5a0

000b94dc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b94dc:	b510      	push	{r4, lr}
      if (_M_empty())
   b94de:	6883      	ldr	r3, [r0, #8]
   b94e0:	4604      	mov	r4, r0
   b94e2:	b90b      	cbnz	r3, b94e8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b94e4:	f000 fcd4 	bl	b9e90 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b94e8:	68c3      	ldr	r3, [r0, #12]
   b94ea:	4798      	blx	r3
      if (_M_manager)
   b94ec:	68a3      	ldr	r3, [r4, #8]
   b94ee:	b11b      	cbz	r3, b94f8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b94f0:	2203      	movs	r2, #3
   b94f2:	4621      	mov	r1, r4
   b94f4:	4620      	mov	r0, r4
   b94f6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b94f8:	4620      	mov	r0, r4
   b94fa:	2110      	movs	r1, #16
}
   b94fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9500:	f7fa bdcf 	b.w	b40a2 <_ZdlPvj>

000b9504 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9504:	4770      	bx	lr

000b9506 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9508:	4606      	mov	r6, r0
   b950a:	4615      	mov	r5, r2
   b950c:	460c      	mov	r4, r1
   b950e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9510:	42bc      	cmp	r4, r7
   b9512:	d006      	beq.n	b9522 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9514:	6833      	ldr	r3, [r6, #0]
   b9516:	f814 1b01 	ldrb.w	r1, [r4], #1
   b951a:	689b      	ldr	r3, [r3, #8]
   b951c:	4630      	mov	r0, r6
   b951e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9520:	e7f6      	b.n	b9510 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9522:	4628      	mov	r0, r5
   b9524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9526 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9526:	7c00      	ldrb	r0, [r0, #16]
   b9528:	2200      	movs	r2, #0
   b952a:	f7fd b827 	b.w	b657c <hal_i2c_write>

000b952e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b952e:	7c00      	ldrb	r0, [r0, #16]
   b9530:	2100      	movs	r1, #0
   b9532:	f7fd b82b 	b.w	b658c <hal_i2c_available>

000b9536 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9536:	7c00      	ldrb	r0, [r0, #16]
   b9538:	2100      	movs	r1, #0
   b953a:	f7fd b82f 	b.w	b659c <hal_i2c_read>

000b953e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b953e:	7c00      	ldrb	r0, [r0, #16]
   b9540:	2100      	movs	r1, #0
   b9542:	f7fd b833 	b.w	b65ac <hal_i2c_peek>

000b9546 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9546:	7c00      	ldrb	r0, [r0, #16]
   b9548:	2100      	movs	r1, #0
   b954a:	f7fd b837 	b.w	b65bc <hal_i2c_flush>

000b954e <_ZN7TwoWireD0Ev>:
   b954e:	b510      	push	{r4, lr}
   b9550:	2114      	movs	r1, #20
   b9552:	4604      	mov	r4, r0
   b9554:	f7fa fda5 	bl	b40a2 <_ZdlPvj>
   b9558:	4620      	mov	r0, r4
   b955a:	bd10      	pop	{r4, pc}

000b955c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b955c:	b510      	push	{r4, lr}
   b955e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9562:	4604      	mov	r4, r0
   b9564:	4608      	mov	r0, r1
   b9566:	2100      	movs	r1, #0
   b9568:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b956c:	4b03      	ldr	r3, [pc, #12]	; (b957c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b956e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9570:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9572:	4611      	mov	r1, r2
   b9574:	f7fd f832 	bl	b65dc <hal_i2c_init>
}
   b9578:	4620      	mov	r0, r4
   b957a:	bd10      	pop	{r4, pc}
   b957c:	000bd5d0 	.word	0x000bd5d0

000b9580 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9580:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9582:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9584:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9588:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b958a:	2201      	movs	r2, #1
   b958c:	f04f 33ff 	mov.w	r3, #4294967295
   b9590:	f10d 0107 	add.w	r1, sp, #7
   b9594:	47a0      	blx	r4
}
   b9596:	b002      	add	sp, #8
   b9598:	bd10      	pop	{r4, pc}

000b959a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b959a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b959c:	6803      	ldr	r3, [r0, #0]
   b959e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b95a0:	f04f 33ff 	mov.w	r3, #4294967295
   b95a4:	46a4      	mov	ip, r4
}
   b95a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b95aa:	4760      	bx	ip

000b95ac <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b95ac:	b513      	push	{r0, r1, r4, lr}
   b95ae:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b95b0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b95b2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b95b6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b95b8:	f10d 0107 	add.w	r1, sp, #7
   b95bc:	2201      	movs	r2, #1
   b95be:	47a0      	blx	r4
}
   b95c0:	b002      	add	sp, #8
   b95c2:	bd10      	pop	{r4, pc}

000b95c4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b95c4:	b510      	push	{r4, lr}
   b95c6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b95c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b95cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b95d0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b95d2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b95d4:	d008      	beq.n	b95e8 <_ZN9TCPClient4readEv+0x24>
   b95d6:	6963      	ldr	r3, [r4, #20]
   b95d8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b95dc:	1c51      	adds	r1, r2, #1
   b95de:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b95e2:	4413      	add	r3, r2
   b95e4:	7918      	ldrb	r0, [r3, #4]
}
   b95e6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b95e8:	6803      	ldr	r3, [r0, #0]
   b95ea:	691b      	ldr	r3, [r3, #16]
   b95ec:	4798      	blx	r3
   b95ee:	2800      	cmp	r0, #0
   b95f0:	d1f1      	bne.n	b95d6 <_ZN9TCPClient4readEv+0x12>
   b95f2:	f04f 30ff 	mov.w	r0, #4294967295
   b95f6:	e7f6      	b.n	b95e6 <_ZN9TCPClient4readEv+0x22>

000b95f8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b95f8:	4770      	bx	lr

000b95fa <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b95fa:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b95fc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b95fe:	43c0      	mvns	r0, r0
   b9600:	0fc0      	lsrs	r0, r0, #31
   b9602:	4770      	bx	lr

000b9604 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9604:	4770      	bx	lr
	...

000b9608 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9608:	4b06      	ldr	r3, [pc, #24]	; (b9624 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b960a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b960c:	b510      	push	{r4, lr}
   b960e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9612:	d005      	beq.n	b9620 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9614:	4608      	mov	r0, r1
   b9616:	f000 fc3f 	bl	b9e98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b961a:	2800      	cmp	r0, #0
   b961c:	bf08      	it	eq
   b961e:	2400      	moveq	r4, #0
      }
   b9620:	4620      	mov	r0, r4
   b9622:	bd10      	pop	{r4, pc}
   b9624:	000bd4d8 	.word	0x000bd4d8

000b9628 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9628:	b510      	push	{r4, lr}
   b962a:	21ac      	movs	r1, #172	; 0xac
   b962c:	4604      	mov	r4, r0
   b962e:	f7fa fd38 	bl	b40a2 <_ZdlPvj>
   b9632:	4620      	mov	r0, r4
   b9634:	bd10      	pop	{r4, pc}

000b9636 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9636:	21ac      	movs	r1, #172	; 0xac
   b9638:	f7fa bd33 	b.w	b40a2 <_ZdlPvj>

000b963c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9640:	f04f 0800 	mov.w	r8, #0
   b9644:	b086      	sub	sp, #24
   b9646:	461c      	mov	r4, r3
   b9648:	f8c0 8004 	str.w	r8, [r0, #4]
   b964c:	4605      	mov	r5, r0
   b964e:	460e      	mov	r6, r1
   b9650:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9652:	4641      	mov	r1, r8
   b9654:	2210      	movs	r2, #16
   b9656:	a802      	add	r0, sp, #8
   b9658:	f001 fa51 	bl	baafe <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b965c:	1c63      	adds	r3, r4, #1
   b965e:	d009      	beq.n	b9674 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9664:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9668:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b966c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9670:	435c      	muls	r4, r3
   b9672:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9674:	6968      	ldr	r0, [r5, #20]
   b9676:	2310      	movs	r3, #16
   b9678:	9300      	str	r3, [sp, #0]
   b967a:	6800      	ldr	r0, [r0, #0]
   b967c:	ab02      	add	r3, sp, #8
   b967e:	f241 0205 	movw	r2, #4101	; 0x1005
   b9682:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9686:	f7fc ffb9 	bl	b65fc <sock_setsockopt>
    if (ret < 0) {
   b968a:	2800      	cmp	r0, #0
   b968c:	da07      	bge.n	b969e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b968e:	f7fd f961 	bl	b6954 <__errno>
   b9692:	6803      	ldr	r3, [r0, #0]
   b9694:	606b      	str	r3, [r5, #4]
        return 0;
   b9696:	2000      	movs	r0, #0
}
   b9698:	b006      	add	sp, #24
   b969a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b969e:	6968      	ldr	r0, [r5, #20]
   b96a0:	2300      	movs	r3, #0
   b96a2:	6800      	ldr	r0, [r0, #0]
   b96a4:	463a      	mov	r2, r7
   b96a6:	4631      	mov	r1, r6
   b96a8:	f7fc ffd0 	bl	b664c <sock_send>
    if (ret < 0) {
   b96ac:	1e03      	subs	r3, r0, #0
   b96ae:	dbee      	blt.n	b968e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b96b0:	4618      	mov	r0, r3
   b96b2:	e7f1      	b.n	b9698 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b96b4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b96b4:	b530      	push	{r4, r5, lr}
   b96b6:	b087      	sub	sp, #28
   b96b8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b96ba:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b96bc:	4668      	mov	r0, sp
   b96be:	f7ff fdff 	bl	b92c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b96c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b96c4:	3404      	adds	r4, #4
   b96c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b96c8:	682b      	ldr	r3, [r5, #0]
   b96ca:	7023      	strb	r3, [r4, #0]
    }
   b96cc:	b007      	add	sp, #28
   b96ce:	bd30      	pop	{r4, r5, pc}

000b96d0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b96d0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b96d2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b96d4:	4b05      	ldr	r3, [pc, #20]	; (b96ec <_ZN9TCPClient8remoteIPEv+0x1c>)
   b96d6:	4604      	mov	r4, r0
   b96d8:	358c      	adds	r5, #140	; 0x8c
   b96da:	f844 3b04 	str.w	r3, [r4], #4
   b96de:	4606      	mov	r6, r0
   b96e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b96e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b96e4:	682b      	ldr	r3, [r5, #0]
   b96e6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b96e8:	4630      	mov	r0, r6
   b96ea:	bd70      	pop	{r4, r5, r6, pc}
   b96ec:	000bd55c 	.word	0x000bd55c

000b96f0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b96f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b96f4:	4698      	mov	r8, r3
    stop();
   b96f6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b96f8:	b093      	sub	sp, #76	; 0x4c
   b96fa:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b96fc:	2400      	movs	r4, #0
    stop();
   b96fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9700:	4606      	mov	r6, r0
   b9702:	4617      	mov	r7, r2
    stop();
   b9704:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9706:	4628      	mov	r0, r5
   b9708:	466b      	mov	r3, sp
   b970a:	4622      	mov	r2, r4
   b970c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b970e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9710:	f7fc fd82 	bl	b6218 <netdb_getaddrinfo>
   b9714:	4605      	mov	r5, r0
   b9716:	2800      	cmp	r0, #0
   b9718:	d163      	bne.n	b97e2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b971a:	9b00      	ldr	r3, [sp, #0]
   b971c:	2b00      	cmp	r3, #0
   b971e:	d04b      	beq.n	b97b8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9720:	695b      	ldr	r3, [r3, #20]
   b9722:	2b00      	cmp	r3, #0
   b9724:	d048      	beq.n	b97b8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9726:	a806      	add	r0, sp, #24
   b9728:	f7ff fd72 	bl	b9210 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b972c:	9b00      	ldr	r3, [sp, #0]
   b972e:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   b9730:	7863      	ldrb	r3, [r4, #1]
   b9732:	2b02      	cmp	r3, #2
   b9734:	d104      	bne.n	b9740 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9736:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   b9738:	a806      	add	r0, sp, #24
   b973a:	f7ff ffbb 	bl	b96b4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        if (port) {
   b973e:	e026      	b.n	b978e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9740:	2b0a      	cmp	r3, #10
   b9742:	d124      	bne.n	b978e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9744:	2211      	movs	r2, #17
   b9746:	4629      	mov	r1, r5
   b9748:	a801      	add	r0, sp, #4
   b974a:	f001 f9d8 	bl	baafe <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b974e:	68a3      	ldr	r3, [r4, #8]
   b9750:	2b00      	cmp	r3, #0
   b9752:	d038      	beq.n	b97c6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9754:	f104 0308 	add.w	r3, r4, #8
   b9758:	f10d 0c04 	add.w	ip, sp, #4
   b975c:	3418      	adds	r4, #24
   b975e:	6818      	ldr	r0, [r3, #0]
   b9760:	6859      	ldr	r1, [r3, #4]
   b9762:	4662      	mov	r2, ip
   b9764:	c203      	stmia	r2!, {r0, r1}
   b9766:	3308      	adds	r3, #8
   b9768:	42a3      	cmp	r3, r4
   b976a:	4694      	mov	ip, r2
   b976c:	d1f7      	bne.n	b975e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b976e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9770:	a901      	add	r1, sp, #4
   b9772:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9774:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9778:	f7ff fd58 	bl	b922c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b977c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9780:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9784:	ac07      	add	r4, sp, #28
   b9786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9788:	f8dc 3000 	ldr.w	r3, [ip]
   b978c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b978e:	a806      	add	r0, sp, #24
   b9790:	f7ff fd66 	bl	b9260 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9794:	b180      	cbz	r0, b97b8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9796:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9798:	ad07      	add	r5, sp, #28
   b979a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b979e:	4b12      	ldr	r3, [pc, #72]	; (b97e8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b97a0:	930c      	str	r3, [sp, #48]	; 0x30
   b97a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b97a4:	ac0d      	add	r4, sp, #52	; 0x34
   b97a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b97a8:	682b      	ldr	r3, [r5, #0]
   b97aa:	7023      	strb	r3, [r4, #0]
   b97ac:	463a      	mov	r2, r7
   b97ae:	4643      	mov	r3, r8
   b97b0:	a90c      	add	r1, sp, #48	; 0x30
   b97b2:	4630      	mov	r0, r6
   b97b4:	47c8      	blx	r9
   b97b6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b97b8:	9800      	ldr	r0, [sp, #0]
   b97ba:	f7fc fd25 	bl	b6208 <netdb_freeaddrinfo>
}
   b97be:	4628      	mov	r0, r5
   b97c0:	b013      	add	sp, #76	; 0x4c
   b97c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b97c6:	68e3      	ldr	r3, [r4, #12]
   b97c8:	2b00      	cmp	r3, #0
   b97ca:	d1c3      	bne.n	b9754 <_ZN9TCPClient7connectEPKctm+0x64>
   b97cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b97d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b97d4:	f7fc fe7a 	bl	b64cc <inet_htonl>
   b97d8:	4581      	cmp	r9, r0
   b97da:	d1bb      	bne.n	b9754 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b97dc:	f104 0114 	add.w	r1, r4, #20
   b97e0:	e7aa      	b.n	b9738 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b97e2:	4625      	mov	r5, r4
   b97e4:	e7e8      	b.n	b97b8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b97e6:	bf00      	nop
   b97e8:	000bd55c 	.word	0x000bd55c

000b97ec <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b97ec:	b538      	push	{r3, r4, r5, lr}
   b97ee:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b97f0:	681a      	ldr	r2, [r3, #0]
   b97f2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b97f4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b97f6:	da10      	bge.n	b981a <_ZN9TCPClient9connectedEv+0x2e>
   b97f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b97fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9800:	429a      	cmp	r2, r3
   b9802:	d10a      	bne.n	b981a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9804:	6803      	ldr	r3, [r0, #0]
   b9806:	691b      	ldr	r3, [r3, #16]
   b9808:	4798      	blx	r3
        if (!rv) {
   b980a:	4604      	mov	r4, r0
   b980c:	b928      	cbnz	r0, b981a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b980e:	682b      	ldr	r3, [r5, #0]
   b9810:	4628      	mov	r0, r5
   b9812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9814:	4798      	blx	r3
        rv = available();
   b9816:	4620      	mov	r0, r4
}
   b9818:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b981a:	2001      	movs	r0, #1
   b981c:	e7fc      	b.n	b9818 <_ZN9TCPClient9connectedEv+0x2c>

000b981e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b981e:	b510      	push	{r4, lr}
   b9820:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9822:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9826:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b982a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b982c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b982e:	d005      	beq.n	b983c <_ZN9TCPClient4peekEv+0x1e>
   b9830:	6963      	ldr	r3, [r4, #20]
   b9832:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9836:	4413      	add	r3, r2
   b9838:	7918      	ldrb	r0, [r3, #4]
}
   b983a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b983c:	6803      	ldr	r3, [r0, #0]
   b983e:	691b      	ldr	r3, [r3, #16]
   b9840:	4798      	blx	r3
   b9842:	2800      	cmp	r0, #0
   b9844:	d1f4      	bne.n	b9830 <_ZN9TCPClient4peekEv+0x12>
   b9846:	f04f 30ff 	mov.w	r0, #4294967295
   b984a:	e7f6      	b.n	b983a <_ZN9TCPClient4peekEv+0x1c>

000b984c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b984e:	6943      	ldr	r3, [r0, #20]
   b9850:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9852:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9856:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b985a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b985c:	4605      	mov	r5, r0
   b985e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9860:	d016      	beq.n	b9890 <_ZN9TCPClient4readEPhj+0x44>
   b9862:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9864:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9868:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b986c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b986e:	42bc      	cmp	r4, r7
   b9870:	bf28      	it	cs
   b9872:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9874:	3304      	adds	r3, #4
   b9876:	4622      	mov	r2, r4
   b9878:	4419      	add	r1, r3
   b987a:	4630      	mov	r0, r6
   b987c:	f001 f917 	bl	baaae <memcpy>
   b9880:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9882:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9886:	4423      	add	r3, r4
   b9888:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b988c:	4620      	mov	r0, r4
   b988e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9890:	6803      	ldr	r3, [r0, #0]
   b9892:	691b      	ldr	r3, [r3, #16]
   b9894:	4798      	blx	r3
   b9896:	2800      	cmp	r0, #0
   b9898:	d1e3      	bne.n	b9862 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b989a:	f04f 34ff 	mov.w	r4, #4294967295
   b989e:	e7f5      	b.n	b988c <_ZN9TCPClient4readEPhj+0x40>

000b98a0 <_ZN9TCPClient12flush_bufferEv>:
   b98a0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b98a2:	2300      	movs	r3, #0
   b98a4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b98a8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b98aa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b98ae:	4770      	bx	lr

000b98b0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b98b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b98b4:	461f      	mov	r7, r3
    stop();
   b98b6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b98b8:	460c      	mov	r4, r1
    stop();
   b98ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b98bc:	b08a      	sub	sp, #40	; 0x28
   b98be:	4605      	mov	r5, r0
   b98c0:	4616      	mov	r6, r2
    stop();
   b98c2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b98c4:	7d23      	ldrb	r3, [r4, #20]
   b98c6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b98ca:	2b04      	cmp	r3, #4
   b98cc:	bf0c      	ite	eq
   b98ce:	2002      	moveq	r0, #2
   b98d0:	200a      	movne	r0, #10
   b98d2:	2206      	movs	r2, #6
   b98d4:	2101      	movs	r1, #1
   b98d6:	f7fc fec9 	bl	b666c <sock_socket>
   b98da:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b98de:	696b      	ldr	r3, [r5, #20]
   b98e0:	681b      	ldr	r3, [r3, #0]
   b98e2:	2b00      	cmp	r3, #0
   b98e4:	da08      	bge.n	b98f8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b98e6:	682b      	ldr	r3, [r5, #0]
   b98e8:	4628      	mov	r0, r5
   b98ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b98ec:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b98ee:	4798      	blx	r3
}
   b98f0:	4620      	mov	r0, r4
   b98f2:	b00a      	add	sp, #40	; 0x28
   b98f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b98f8:	4628      	mov	r0, r5
   b98fa:	f7ff ffd1 	bl	b98a0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b98fe:	b1b7      	cbz	r7, b992e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9900:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9902:	a903      	add	r1, sp, #12
   b9904:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9906:	9303      	str	r3, [sp, #12]
   b9908:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b990c:	f7fc fca4 	bl	b6258 <if_index_to_name>
   b9910:	2800      	cmp	r0, #0
   b9912:	d1e8      	bne.n	b98e6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9914:	6968      	ldr	r0, [r5, #20]
   b9916:	2306      	movs	r3, #6
   b9918:	9300      	str	r3, [sp, #0]
   b991a:	6800      	ldr	r0, [r0, #0]
   b991c:	ab03      	add	r3, sp, #12
   b991e:	f241 020b 	movw	r2, #4107	; 0x100b
   b9922:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9926:	f7fc fe69 	bl	b65fc <sock_setsockopt>
   b992a:	2800      	cmp	r0, #0
   b992c:	d1db      	bne.n	b98e6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b992e:	221c      	movs	r2, #28
   b9930:	2100      	movs	r1, #0
   b9932:	a803      	add	r0, sp, #12
   b9934:	f001 f8e3 	bl	baafe <memset>
    if (ip.version() == 4) {
   b9938:	7d23      	ldrb	r3, [r4, #20]
   b993a:	2b04      	cmp	r3, #4
   b993c:	d11d      	bne.n	b997a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b993e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9942:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9944:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9948:	f7fc fdd0 	bl	b64ec <inet_htons>
   b994c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9950:	6860      	ldr	r0, [r4, #4]
   b9952:	f7fc fdbb 	bl	b64cc <inet_htonl>
   b9956:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9958:	696b      	ldr	r3, [r5, #20]
   b995a:	221c      	movs	r2, #28
   b995c:	6818      	ldr	r0, [r3, #0]
   b995e:	a903      	add	r1, sp, #12
   b9960:	f7fc fe5c 	bl	b661c <sock_connect>
   b9964:	2800      	cmp	r0, #0
   b9966:	d1be      	bne.n	b98e6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9968:	3404      	adds	r4, #4
   b996a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b996c:	696d      	ldr	r5, [r5, #20]
   b996e:	358c      	adds	r5, #140	; 0x8c
   b9970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9972:	6823      	ldr	r3, [r4, #0]
   b9974:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9976:	2401      	movs	r4, #1
   b9978:	e7ba      	b.n	b98f0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b997a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b997e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9980:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9984:	f7fc fdb2 	bl	b64ec <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9988:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b998a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b998e:	1d23      	adds	r3, r4, #4
   b9990:	f104 0714 	add.w	r7, r4, #20
   b9994:	6818      	ldr	r0, [r3, #0]
   b9996:	6859      	ldr	r1, [r3, #4]
   b9998:	4632      	mov	r2, r6
   b999a:	c203      	stmia	r2!, {r0, r1}
   b999c:	3308      	adds	r3, #8
   b999e:	42bb      	cmp	r3, r7
   b99a0:	4616      	mov	r6, r2
   b99a2:	d1f7      	bne.n	b9994 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b99a4:	e7d8      	b.n	b9958 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b99a8 <_ZN9TCPClient9availableEv>:
{
   b99a8:	b530      	push	{r4, r5, lr}
   b99aa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b99ac:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b99b0:	b08b      	sub	sp, #44	; 0x2c
   b99b2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b99b4:	b12b      	cbz	r3, b99c2 <_ZN9TCPClient9availableEv+0x1a>
   b99b6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b99ba:	429a      	cmp	r2, r3
   b99bc:	d101      	bne.n	b99c2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b99be:	f7ff ff6f 	bl	b98a0 <_ZN9TCPClient12flush_bufferEv>
   b99c2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b99c4:	6808      	ldr	r0, [r1, #0]
   b99c6:	2800      	cmp	r0, #0
   b99c8:	db18      	blt.n	b99fc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b99ca:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b99ce:	2d7f      	cmp	r5, #127	; 0x7f
   b99d0:	d814      	bhi.n	b99fc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b99d2:	3104      	adds	r1, #4
   b99d4:	2308      	movs	r3, #8
   b99d6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b99da:	4429      	add	r1, r5
   b99dc:	f7fc fe26 	bl	b662c <sock_recv>
            if (ret > 0) {
   b99e0:	2800      	cmp	r0, #0
   b99e2:	dd13      	ble.n	b9a0c <_ZN9TCPClient9availableEv+0x64>
   b99e4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b99e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b99ea:	b90a      	cbnz	r2, b99f0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b99ec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b99f0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b99f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b99f6:	4410      	add	r0, r2
   b99f8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b99fc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b99fe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9a02:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9a06:	1ac0      	subs	r0, r0, r3
   b9a08:	b00b      	add	sp, #44	; 0x2c
   b9a0a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9a0c:	f7fc ffa2 	bl	b6954 <__errno>
   b9a10:	6803      	ldr	r3, [r0, #0]
   b9a12:	2b0b      	cmp	r3, #11
   b9a14:	d0f2      	beq.n	b99fc <_ZN9TCPClient9availableEv+0x54>
   b9a16:	f7fc ff9d 	bl	b6954 <__errno>
   b9a1a:	6803      	ldr	r3, [r0, #0]
   b9a1c:	2b0b      	cmp	r3, #11
   b9a1e:	d0ed      	beq.n	b99fc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9a20:	2320      	movs	r3, #32
   b9a22:	2500      	movs	r5, #0
   b9a24:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9a28:	f7fc ff94 	bl	b6954 <__errno>
   b9a2c:	6803      	ldr	r3, [r0, #0]
   b9a2e:	9301      	str	r3, [sp, #4]
   b9a30:	4b08      	ldr	r3, [pc, #32]	; (b9a54 <_ZN9TCPClient9availableEv+0xac>)
   b9a32:	4909      	ldr	r1, [pc, #36]	; (b9a58 <_ZN9TCPClient9availableEv+0xb0>)
   b9a34:	9300      	str	r3, [sp, #0]
   b9a36:	aa02      	add	r2, sp, #8
   b9a38:	462b      	mov	r3, r5
   b9a3a:	2032      	movs	r0, #50	; 0x32
   b9a3c:	f7fc fe66 	bl	b670c <log_message>
                    sock_close(d_->sock);
   b9a40:	6963      	ldr	r3, [r4, #20]
   b9a42:	6818      	ldr	r0, [r3, #0]
   b9a44:	f7fc fde2 	bl	b660c <sock_close>
   b9a48:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9a4a:	f04f 32ff 	mov.w	r2, #4294967295
   b9a4e:	601a      	str	r2, [r3, #0]
   b9a50:	e7d4      	b.n	b99fc <_ZN9TCPClient9availableEv+0x54>
   b9a52:	bf00      	nop
   b9a54:	000bd5f7 	.word	0x000bd5f7
   b9a58:	000bd5f0 	.word	0x000bd5f0

000b9a5c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9a5c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9a5e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9a60:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9a62:	6818      	ldr	r0, [r3, #0]
   b9a64:	2800      	cmp	r0, #0
   b9a66:	db01      	blt.n	b9a6c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9a68:	f7fc fdd0 	bl	b660c <sock_close>
   b9a6c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9a6e:	f04f 32ff 	mov.w	r2, #4294967295
   b9a72:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9a74:	6960      	ldr	r0, [r4, #20]
   b9a76:	2211      	movs	r2, #17
   b9a78:	2100      	movs	r1, #0
   b9a7a:	308c      	adds	r0, #140	; 0x8c
   b9a7c:	f001 f83f 	bl	baafe <memset>
    flush_buffer();
   b9a80:	4620      	mov	r0, r4
}
   b9a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9a86:	f7ff bf0b 	b.w	b98a0 <_ZN9TCPClient12flush_bufferEv>

000b9a8a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9a8a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9a8c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9a8e:	4604      	mov	r4, r0
          total(0) {
   b9a90:	6001      	str	r1, [r0, #0]
   b9a92:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9a96:	3088      	adds	r0, #136	; 0x88
   b9a98:	f7ff fbba 	bl	b9210 <_ZN9IPAddressC1Ev>
}
   b9a9c:	4620      	mov	r0, r4
   b9a9e:	bd10      	pop	{r4, pc}

000b9aa0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9aa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9aa2:	2300      	movs	r3, #0
   b9aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9aa8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9aac:	4a0e      	ldr	r2, [pc, #56]	; (b9ae8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9aae:	6103      	str	r3, [r0, #16]
   b9ab0:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9ab2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9ab4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9ab6:	20ac      	movs	r0, #172	; 0xac
   b9ab8:	9101      	str	r1, [sp, #4]
   b9aba:	f7fa faec 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9abe:	1e05      	subs	r5, r0, #0
   b9ac0:	f105 060c 	add.w	r6, r5, #12
   b9ac4:	d008      	beq.n	b9ad8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9ac6:	2301      	movs	r3, #1
   b9ac8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9acc:	4b07      	ldr	r3, [pc, #28]	; (b9aec <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9ace:	9901      	ldr	r1, [sp, #4]
   b9ad0:	602b      	str	r3, [r5, #0]
   b9ad2:	4630      	mov	r0, r6
   b9ad4:	f7ff ffd9 	bl	b9a8a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9ad8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9ada:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9ade:	f7ff fedf 	bl	b98a0 <_ZN9TCPClient12flush_bufferEv>
}
   b9ae2:	b002      	add	sp, #8
   b9ae4:	bd70      	pop	{r4, r5, r6, pc}
   b9ae6:	bf00      	nop
   b9ae8:	000bd62c 	.word	0x000bd62c
   b9aec:	000bd610 	.word	0x000bd610

000b9af0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9af0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9af2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b9af6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9af8:	f7ff ffd2 	bl	b9aa0 <_ZN9TCPClientC1Ei>
}
   b9afc:	4620      	mov	r0, r4
   b9afe:	bd10      	pop	{r4, pc}

000b9b00 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9b00:	b510      	push	{r4, lr}
   b9b02:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9b04:	6800      	ldr	r0, [r0, #0]
   b9b06:	2800      	cmp	r0, #0
   b9b08:	db01      	blt.n	b9b0e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9b0a:	f7fc fd7f 	bl	b660c <sock_close>
    }
}
   b9b0e:	4620      	mov	r0, r4
   b9b10:	bd10      	pop	{r4, pc}

000b9b12 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9b12:	300c      	adds	r0, #12
   b9b14:	f7ff bff4 	b.w	b9b00 <_ZN9TCPClient4DataD1Ev>

000b9b18 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9b18:	2200      	movs	r2, #0
   b9b1a:	6840      	ldr	r0, [r0, #4]
   b9b1c:	4611      	mov	r1, r2
   b9b1e:	f7fc be59 	b.w	b67d4 <network_ready>

000b9b22 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9b22:	2200      	movs	r2, #0
   b9b24:	6840      	ldr	r0, [r0, #4]
   b9b26:	4611      	mov	r1, r2
   b9b28:	f7fc be74 	b.w	b6814 <network_listening>

000b9b2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9b2c:	2200      	movs	r2, #0
   b9b2e:	6840      	ldr	r0, [r0, #4]
   b9b30:	4611      	mov	r1, r2
   b9b32:	f7fc be7f 	b.w	b6834 <network_get_listen_timeout>

000b9b36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9b36:	6840      	ldr	r0, [r0, #4]
   b9b38:	2200      	movs	r2, #0
   b9b3a:	f7fc be73 	b.w	b6824 <network_set_listen_timeout>

000b9b3e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9b3e:	6840      	ldr	r0, [r0, #4]
   b9b40:	2200      	movs	r2, #0
   b9b42:	f081 0101 	eor.w	r1, r1, #1
   b9b46:	f7fc be5d 	b.w	b6804 <network_listen>

000b9b4a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9b4a:	2300      	movs	r3, #0
   b9b4c:	6840      	ldr	r0, [r0, #4]
   b9b4e:	461a      	mov	r2, r3
   b9b50:	4619      	mov	r1, r3
   b9b52:	f7fc be4f 	b.w	b67f4 <network_off>

000b9b56 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9b56:	2300      	movs	r3, #0
   b9b58:	6840      	ldr	r0, [r0, #4]
   b9b5a:	461a      	mov	r2, r3
   b9b5c:	4619      	mov	r1, r3
   b9b5e:	f7fc be41 	b.w	b67e4 <network_on>

000b9b62 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9b62:	2200      	movs	r2, #0
   b9b64:	6840      	ldr	r0, [r0, #4]
   b9b66:	4611      	mov	r1, r2
   b9b68:	f7fc be24 	b.w	b67b4 <network_connecting>

000b9b6c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9b6c:	6840      	ldr	r0, [r0, #4]
   b9b6e:	2200      	movs	r2, #0
   b9b70:	2102      	movs	r1, #2
   b9b72:	f7fc be27 	b.w	b67c4 <network_disconnect>

000b9b76 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9b76:	2300      	movs	r3, #0
   b9b78:	6840      	ldr	r0, [r0, #4]
   b9b7a:	461a      	mov	r2, r3
   b9b7c:	f7fc be12 	b.w	b67a4 <network_connect>

000b9b80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9b80:	4b02      	ldr	r3, [pc, #8]	; (b9b8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9b82:	2204      	movs	r2, #4
   b9b84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9b86:	4a02      	ldr	r2, [pc, #8]	; (b9b90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9b88:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9b8a:	4770      	bx	lr
   b9b8c:	2003e708 	.word	0x2003e708
   b9b90:	000bd678 	.word	0x000bd678

000b9b94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9b94:	2300      	movs	r3, #0
   b9b96:	6840      	ldr	r0, [r0, #4]
   b9b98:	461a      	mov	r2, r3
   b9b9a:	f7fc be03 	b.w	b67a4 <network_connect>

000b9b9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9b9e:	6840      	ldr	r0, [r0, #4]
   b9ba0:	2200      	movs	r2, #0
   b9ba2:	2102      	movs	r1, #2
   b9ba4:	f7fc be0e 	b.w	b67c4 <network_disconnect>

000b9ba8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9ba8:	2200      	movs	r2, #0
   b9baa:	6840      	ldr	r0, [r0, #4]
   b9bac:	4611      	mov	r1, r2
   b9bae:	f7fc be01 	b.w	b67b4 <network_connecting>

000b9bb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9bb2:	2200      	movs	r2, #0
   b9bb4:	6840      	ldr	r0, [r0, #4]
   b9bb6:	4611      	mov	r1, r2
   b9bb8:	f7fc be0c 	b.w	b67d4 <network_ready>

000b9bbc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9bbc:	2300      	movs	r3, #0
   b9bbe:	6840      	ldr	r0, [r0, #4]
   b9bc0:	461a      	mov	r2, r3
   b9bc2:	4619      	mov	r1, r3
   b9bc4:	f7fc be0e 	b.w	b67e4 <network_on>

000b9bc8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9bc8:	2300      	movs	r3, #0
   b9bca:	6840      	ldr	r0, [r0, #4]
   b9bcc:	461a      	mov	r2, r3
   b9bce:	4619      	mov	r1, r3
   b9bd0:	f7fc be10 	b.w	b67f4 <network_off>

000b9bd4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9bd4:	6840      	ldr	r0, [r0, #4]
   b9bd6:	2100      	movs	r1, #0
   b9bd8:	f7fc be34 	b.w	b6844 <network_is_on>

000b9bdc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9bdc:	6840      	ldr	r0, [r0, #4]
   b9bde:	2100      	movs	r1, #0
   b9be0:	f7fc be38 	b.w	b6854 <network_is_off>

000b9be4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9be4:	6840      	ldr	r0, [r0, #4]
   b9be6:	2200      	movs	r2, #0
   b9be8:	f081 0101 	eor.w	r1, r1, #1
   b9bec:	f7fc be0a 	b.w	b6804 <network_listen>

000b9bf0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9bf0:	6840      	ldr	r0, [r0, #4]
   b9bf2:	2200      	movs	r2, #0
   b9bf4:	f7fc be16 	b.w	b6824 <network_set_listen_timeout>

000b9bf8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9bf8:	2200      	movs	r2, #0
   b9bfa:	6840      	ldr	r0, [r0, #4]
   b9bfc:	4611      	mov	r1, r2
   b9bfe:	f7fc be19 	b.w	b6834 <network_get_listen_timeout>

000b9c02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9c02:	2200      	movs	r2, #0
   b9c04:	6840      	ldr	r0, [r0, #4]
   b9c06:	4611      	mov	r1, r2
   b9c08:	f7fc be04 	b.w	b6814 <network_listening>

000b9c0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9c10:	b095      	sub	sp, #84	; 0x54
   b9c12:	4614      	mov	r4, r2
   b9c14:	460d      	mov	r5, r1
   b9c16:	4607      	mov	r7, r0
    IPAddress addr;
   b9c18:	f7ff fafa 	bl	b9210 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9c1c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9c1e:	221c      	movs	r2, #28
   b9c20:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9c22:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9c24:	f000 ff6b 	bl	baafe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9c28:	2340      	movs	r3, #64	; 0x40
   b9c2a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9c2c:	4620      	mov	r0, r4
   b9c2e:	466b      	mov	r3, sp
   b9c30:	aa0c      	add	r2, sp, #48	; 0x30
   b9c32:	2100      	movs	r1, #0
   b9c34:	f7fc faf0 	bl	b6218 <netdb_getaddrinfo>
    if (!r) {
   b9c38:	4604      	mov	r4, r0
   b9c3a:	2800      	cmp	r0, #0
   b9c3c:	d14b      	bne.n	b9cd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9c3e:	4602      	mov	r2, r0
   b9c40:	2101      	movs	r1, #1
   b9c42:	6868      	ldr	r0, [r5, #4]
   b9c44:	f7fc fdc6 	bl	b67d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c48:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9c4a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c4c:	4622      	mov	r2, r4
   b9c4e:	6868      	ldr	r0, [r5, #4]
   b9c50:	f7fc fdc0 	bl	b67d4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c54:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9c56:	4681      	mov	r9, r0
        bool ok = false;
   b9c58:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c5a:	2e00      	cmp	r6, #0
   b9c5c:	d03b      	beq.n	b9cd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9c5e:	2900      	cmp	r1, #0
   b9c60:	d139      	bne.n	b9cd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9c62:	6873      	ldr	r3, [r6, #4]
   b9c64:	2b02      	cmp	r3, #2
   b9c66:	d003      	beq.n	b9c70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9c68:	2b0a      	cmp	r3, #10
   b9c6a:	d011      	beq.n	b9c90 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9c6c:	69f6      	ldr	r6, [r6, #28]
   b9c6e:	e7f4      	b.n	b9c5a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9c70:	f1b8 0f00 	cmp.w	r8, #0
   b9c74:	d0fa      	beq.n	b9c6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9c76:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9c78:	a806      	add	r0, sp, #24
   b9c7a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9c7c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9c7e:	f7ff fb1f 	bl	b92c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9c84:	1d3c      	adds	r4, r7, #4
   b9c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9c88:	682b      	ldr	r3, [r5, #0]
   b9c8a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9c8c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9c8e:	e7ed      	b.n	b9c6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9c90:	f1b9 0f00 	cmp.w	r9, #0
   b9c94:	d0ea      	beq.n	b9c6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9c96:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9c98:	2210      	movs	r2, #16
   b9c9a:	a801      	add	r0, sp, #4
   b9c9c:	f000 ff2f 	bl	baafe <memset>
                    a.v = 6;
   b9ca0:	2306      	movs	r3, #6
   b9ca2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9ca6:	ad01      	add	r5, sp, #4
   b9ca8:	f104 0308 	add.w	r3, r4, #8
   b9cac:	3418      	adds	r4, #24
   b9cae:	6818      	ldr	r0, [r3, #0]
   b9cb0:	6859      	ldr	r1, [r3, #4]
   b9cb2:	462a      	mov	r2, r5
   b9cb4:	c203      	stmia	r2!, {r0, r1}
   b9cb6:	3308      	adds	r3, #8
   b9cb8:	42a3      	cmp	r3, r4
   b9cba:	4615      	mov	r5, r2
   b9cbc:	d1f7      	bne.n	b9cae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9cbe:	a901      	add	r1, sp, #4
   b9cc0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9cc2:	ad07      	add	r5, sp, #28
   b9cc4:	f7ff fab2 	bl	b922c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9cca:	1d3c      	adds	r4, r7, #4
   b9ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9cce:	682b      	ldr	r3, [r5, #0]
   b9cd0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9cd2:	4649      	mov	r1, r9
   b9cd4:	e7ca      	b.n	b9c6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9cd6:	9800      	ldr	r0, [sp, #0]
   b9cd8:	f7fc fa96 	bl	b6208 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9cdc:	4638      	mov	r0, r7
   b9cde:	b015      	add	sp, #84	; 0x54
   b9ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9ce4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9ce4:	4b02      	ldr	r3, [pc, #8]	; (b9cf0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9ce6:	4a03      	ldr	r2, [pc, #12]	; (b9cf4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9ce8:	601a      	str	r2, [r3, #0]
   b9cea:	2200      	movs	r2, #0
   b9cec:	605a      	str	r2, [r3, #4]

} // spark
   b9cee:	4770      	bx	lr
   b9cf0:	2003e710 	.word	0x2003e710
   b9cf4:	000bd6b4 	.word	0x000bd6b4

000b9cf8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9cf8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9cfa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9cfc:	d902      	bls.n	b9d04 <pinAvailable+0xc>
    return false;
   b9cfe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9d00:	b002      	add	sp, #8
   b9d02:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9d04:	f1a0 030b 	sub.w	r3, r0, #11
   b9d08:	2b02      	cmp	r3, #2
   b9d0a:	d81a      	bhi.n	b9d42 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9d0c:	4c17      	ldr	r4, [pc, #92]	; (b9d6c <pinAvailable+0x74>)
   b9d0e:	7821      	ldrb	r1, [r4, #0]
   b9d10:	f3bf 8f5b 	dmb	ish
   b9d14:	f011 0101 	ands.w	r1, r1, #1
   b9d18:	d10b      	bne.n	b9d32 <pinAvailable+0x3a>
   b9d1a:	4620      	mov	r0, r4
   b9d1c:	9101      	str	r1, [sp, #4]
   b9d1e:	f7fa f9c2 	bl	b40a6 <__cxa_guard_acquire>
   b9d22:	9901      	ldr	r1, [sp, #4]
   b9d24:	b128      	cbz	r0, b9d32 <pinAvailable+0x3a>
   b9d26:	4812      	ldr	r0, [pc, #72]	; (b9d70 <pinAvailable+0x78>)
   b9d28:	f7fc fe72 	bl	b6a10 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9d2c:	4620      	mov	r0, r4
   b9d2e:	f7fa f9bf 	bl	b40b0 <__cxa_guard_release>
   b9d32:	4b0f      	ldr	r3, [pc, #60]	; (b9d70 <pinAvailable+0x78>)
   b9d34:	7818      	ldrb	r0, [r3, #0]
   b9d36:	f7fc fca9 	bl	b668c <hal_spi_is_enabled>
   b9d3a:	2800      	cmp	r0, #0
   b9d3c:	d1df      	bne.n	b9cfe <pinAvailable+0x6>
  return true; // 'pin' is available
   b9d3e:	2001      	movs	r0, #1
   b9d40:	e7de      	b.n	b9d00 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9d42:	2801      	cmp	r0, #1
   b9d44:	d809      	bhi.n	b9d5a <pinAvailable+0x62>
   b9d46:	f000 f87d 	bl	b9e44 <_Z19__fetch_global_Wirev>
   b9d4a:	2100      	movs	r1, #0
   b9d4c:	7c00      	ldrb	r0, [r0, #16]
   b9d4e:	f7fc fc3d 	bl	b65cc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9d52:	f080 0001 	eor.w	r0, r0, #1
   b9d56:	b2c0      	uxtb	r0, r0
   b9d58:	e7d2      	b.n	b9d00 <pinAvailable+0x8>
   b9d5a:	3809      	subs	r0, #9
   b9d5c:	2801      	cmp	r0, #1
   b9d5e:	d8ee      	bhi.n	b9d3e <pinAvailable+0x46>
   b9d60:	f000 f834 	bl	b9dcc <_Z22__fetch_global_Serial1v>
   b9d64:	7c00      	ldrb	r0, [r0, #16]
   b9d66:	f7fc fbf1 	bl	b654c <hal_usart_is_enabled>
   b9d6a:	e7f2      	b.n	b9d52 <pinAvailable+0x5a>
   b9d6c:	2003e718 	.word	0x2003e718
   b9d70:	2003e71c 	.word	0x2003e71c

000b9d74 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9d74:	2823      	cmp	r0, #35	; 0x23
{
   b9d76:	b538      	push	{r3, r4, r5, lr}
   b9d78:	4604      	mov	r4, r0
   b9d7a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9d7c:	d80a      	bhi.n	b9d94 <pinMode+0x20>
   b9d7e:	29ff      	cmp	r1, #255	; 0xff
   b9d80:	d008      	beq.n	b9d94 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9d82:	f7ff ffb9 	bl	b9cf8 <pinAvailable>
   b9d86:	b128      	cbz	r0, b9d94 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9d88:	4629      	mov	r1, r5
   b9d8a:	4620      	mov	r0, r4
}
   b9d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9d90:	f7fc ba4a 	b.w	b6228 <HAL_Pin_Mode>
}
   b9d94:	bd38      	pop	{r3, r4, r5, pc}

000b9d96 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9d96:	4770      	bx	lr

000b9d98 <_Z20acquireSerial1Bufferv>:
{
   b9d98:	b538      	push	{r3, r4, r5, lr}
   b9d9a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9d9c:	2514      	movs	r5, #20
   b9d9e:	462a      	mov	r2, r5
   b9da0:	2100      	movs	r1, #0
   b9da2:	f000 feac 	bl	baafe <memset>
   b9da6:	8025      	strh	r5, [r4, #0]
   b9da8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9daa:	4907      	ldr	r1, [pc, #28]	; (b9dc8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9dac:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9dae:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9db0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9db2:	f000 f86b 	bl	b9e8c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9db6:	4904      	ldr	r1, [pc, #16]	; (b9dc8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9db8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9dba:	4628      	mov	r0, r5
   b9dbc:	f000 f866 	bl	b9e8c <_ZnajRKSt9nothrow_t>
    };
   b9dc0:	60e0      	str	r0, [r4, #12]
}
   b9dc2:	4620      	mov	r0, r4
   b9dc4:	bd38      	pop	{r3, r4, r5, pc}
   b9dc6:	bf00      	nop
   b9dc8:	000bd6e8 	.word	0x000bd6e8

000b9dcc <_Z22__fetch_global_Serial1v>:
{
   b9dcc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9dce:	4d0e      	ldr	r5, [pc, #56]	; (b9e08 <_Z22__fetch_global_Serial1v+0x3c>)
   b9dd0:	7829      	ldrb	r1, [r5, #0]
   b9dd2:	f3bf 8f5b 	dmb	ish
   b9dd6:	f011 0401 	ands.w	r4, r1, #1
{
   b9dda:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9ddc:	d111      	bne.n	b9e02 <_Z22__fetch_global_Serial1v+0x36>
   b9dde:	4628      	mov	r0, r5
   b9de0:	f7fa f961 	bl	b40a6 <__cxa_guard_acquire>
   b9de4:	b168      	cbz	r0, b9e02 <_Z22__fetch_global_Serial1v+0x36>
   b9de6:	a801      	add	r0, sp, #4
   b9de8:	f7ff ffd6 	bl	b9d98 <_Z20acquireSerial1Bufferv>
   b9dec:	aa01      	add	r2, sp, #4
   b9dee:	4621      	mov	r1, r4
   b9df0:	4806      	ldr	r0, [pc, #24]	; (b9e0c <_Z22__fetch_global_Serial1v+0x40>)
   b9df2:	f7ff fb5f 	bl	b94b4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9df6:	4628      	mov	r0, r5
   b9df8:	f7fa f95a 	bl	b40b0 <__cxa_guard_release>
   b9dfc:	4804      	ldr	r0, [pc, #16]	; (b9e10 <_Z22__fetch_global_Serial1v+0x44>)
   b9dfe:	f000 fe25 	bl	baa4c <atexit>
    return serial1;
}
   b9e02:	4802      	ldr	r0, [pc, #8]	; (b9e0c <_Z22__fetch_global_Serial1v+0x40>)
   b9e04:	b007      	add	sp, #28
   b9e06:	bd30      	pop	{r4, r5, pc}
   b9e08:	2003e724 	.word	0x2003e724
   b9e0c:	2003e728 	.word	0x2003e728
   b9e10:	000b9d97 	.word	0x000b9d97

000b9e14 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9e14:	4770      	bx	lr
	...

000b9e18 <_Z17acquireWireBufferv>:
{
   b9e18:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9e1a:	2520      	movs	r5, #32
   b9e1c:	2314      	movs	r3, #20
{
   b9e1e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9e20:	6003      	str	r3, [r0, #0]
   b9e22:	6085      	str	r5, [r0, #8]
   b9e24:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9e26:	4906      	ldr	r1, [pc, #24]	; (b9e40 <_Z17acquireWireBufferv+0x28>)
   b9e28:	4628      	mov	r0, r5
   b9e2a:	f000 f82f 	bl	b9e8c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9e2e:	4904      	ldr	r1, [pc, #16]	; (b9e40 <_Z17acquireWireBufferv+0x28>)
	};
   b9e30:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9e32:	4628      	mov	r0, r5
   b9e34:	f000 f82a 	bl	b9e8c <_ZnajRKSt9nothrow_t>
	};
   b9e38:	60e0      	str	r0, [r4, #12]
}
   b9e3a:	4620      	mov	r0, r4
   b9e3c:	bd38      	pop	{r3, r4, r5, pc}
   b9e3e:	bf00      	nop
   b9e40:	000bd6e8 	.word	0x000bd6e8

000b9e44 <_Z19__fetch_global_Wirev>:
{
   b9e44:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9e46:	4d0e      	ldr	r5, [pc, #56]	; (b9e80 <_Z19__fetch_global_Wirev+0x3c>)
   b9e48:	7829      	ldrb	r1, [r5, #0]
   b9e4a:	f3bf 8f5b 	dmb	ish
   b9e4e:	f011 0401 	ands.w	r4, r1, #1
{
   b9e52:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9e54:	d111      	bne.n	b9e7a <_Z19__fetch_global_Wirev+0x36>
   b9e56:	4628      	mov	r0, r5
   b9e58:	f7fa f925 	bl	b40a6 <__cxa_guard_acquire>
   b9e5c:	b168      	cbz	r0, b9e7a <_Z19__fetch_global_Wirev+0x36>
   b9e5e:	a801      	add	r0, sp, #4
   b9e60:	f7ff ffda 	bl	b9e18 <_Z17acquireWireBufferv>
   b9e64:	aa01      	add	r2, sp, #4
   b9e66:	4621      	mov	r1, r4
   b9e68:	4806      	ldr	r0, [pc, #24]	; (b9e84 <_Z19__fetch_global_Wirev+0x40>)
   b9e6a:	f7ff fb77 	bl	b955c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9e6e:	4628      	mov	r0, r5
   b9e70:	f7fa f91e 	bl	b40b0 <__cxa_guard_release>
   b9e74:	4804      	ldr	r0, [pc, #16]	; (b9e88 <_Z19__fetch_global_Wirev+0x44>)
   b9e76:	f000 fde9 	bl	baa4c <atexit>
	return wire;
}
   b9e7a:	4802      	ldr	r0, [pc, #8]	; (b9e84 <_Z19__fetch_global_Wirev+0x40>)
   b9e7c:	b007      	add	sp, #28
   b9e7e:	bd30      	pop	{r4, r5, pc}
   b9e80:	2003e740 	.word	0x2003e740
   b9e84:	2003e744 	.word	0x2003e744
   b9e88:	000b9e15 	.word	0x000b9e15

000b9e8c <_ZnajRKSt9nothrow_t>:
   b9e8c:	f7fa b905 	b.w	b409a <_Znaj>

000b9e90 <_ZSt25__throw_bad_function_callv>:
   b9e90:	b508      	push	{r3, lr}
   b9e92:	f7fc fd4f 	bl	b6934 <abort>
	...

000b9e98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9e98:	4901      	ldr	r1, [pc, #4]	; (b9ea0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9e9a:	f000 b8f9 	b.w	ba090 <_ZNKSt9type_infoeqERKS_>
   b9e9e:	bf00      	nop
   b9ea0:	000bd704 	.word	0x000bd704

000b9ea4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9ea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9ea6:	2400      	movs	r4, #0
   b9ea8:	2310      	movs	r3, #16
   b9eaa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9eae:	6803      	ldr	r3, [r0, #0]
   b9eb0:	4615      	mov	r5, r2
   b9eb2:	699e      	ldr	r6, [r3, #24]
   b9eb4:	6812      	ldr	r2, [r2, #0]
   b9eb6:	466b      	mov	r3, sp
   b9eb8:	e9cd 4400 	strd	r4, r4, [sp]
   b9ebc:	47b0      	blx	r6
   b9ebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9ec2:	f003 0306 	and.w	r3, r3, #6
   b9ec6:	2b06      	cmp	r3, #6
   b9ec8:	bf03      	ittte	eq
   b9eca:	9b00      	ldreq	r3, [sp, #0]
   b9ecc:	602b      	streq	r3, [r5, #0]
   b9ece:	2001      	moveq	r0, #1
   b9ed0:	4620      	movne	r0, r4
   b9ed2:	b004      	add	sp, #16
   b9ed4:	bd70      	pop	{r4, r5, r6, pc}

000b9ed6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9ed6:	9800      	ldr	r0, [sp, #0]
   b9ed8:	4290      	cmp	r0, r2
   b9eda:	bf14      	ite	ne
   b9edc:	2001      	movne	r0, #1
   b9ede:	2006      	moveq	r0, #6
   b9ee0:	4770      	bx	lr
	...

000b9ee4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9ee4:	b510      	push	{r4, lr}
   b9ee6:	4b03      	ldr	r3, [pc, #12]	; (b9ef4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9ee8:	6003      	str	r3, [r0, #0]
   b9eea:	4604      	mov	r4, r0
   b9eec:	f000 f8cd 	bl	ba08a <_ZNSt9type_infoD1Ev>
   b9ef0:	4620      	mov	r0, r4
   b9ef2:	bd10      	pop	{r4, pc}
   b9ef4:	000bd744 	.word	0x000bd744

000b9ef8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9ef8:	b510      	push	{r4, lr}
   b9efa:	4604      	mov	r4, r0
   b9efc:	f7ff fff2 	bl	b9ee4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9f00:	4620      	mov	r0, r4
   b9f02:	2108      	movs	r1, #8
   b9f04:	f7fa f8cd 	bl	b40a2 <_ZdlPvj>
   b9f08:	4620      	mov	r0, r4
   b9f0a:	bd10      	pop	{r4, pc}

000b9f0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9f10:	461f      	mov	r7, r3
   b9f12:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9f16:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9f1a:	4598      	cmp	r8, r3
   b9f1c:	4606      	mov	r6, r0
   b9f1e:	4615      	mov	r5, r2
   b9f20:	d107      	bne.n	b9f32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9f22:	9907      	ldr	r1, [sp, #28]
   b9f24:	f000 f8b4 	bl	ba090 <_ZNKSt9type_infoeqERKS_>
   b9f28:	b118      	cbz	r0, b9f32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9f2a:	7165      	strb	r5, [r4, #5]
   b9f2c:	2000      	movs	r0, #0
   b9f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9f32:	4639      	mov	r1, r7
   b9f34:	4630      	mov	r0, r6
   b9f36:	f000 f8ab 	bl	ba090 <_ZNKSt9type_infoeqERKS_>
   b9f3a:	2800      	cmp	r0, #0
   b9f3c:	d0f6      	beq.n	b9f2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9f3e:	2301      	movs	r3, #1
   b9f40:	f8c4 8000 	str.w	r8, [r4]
   b9f44:	7125      	strb	r5, [r4, #4]
   b9f46:	71a3      	strb	r3, [r4, #6]
   b9f48:	e7f0      	b.n	b9f2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9f4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9f4a:	b538      	push	{r3, r4, r5, lr}
   b9f4c:	4615      	mov	r5, r2
   b9f4e:	461c      	mov	r4, r3
   b9f50:	f000 f89e 	bl	ba090 <_ZNKSt9type_infoeqERKS_>
   b9f54:	b120      	cbz	r0, b9f60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9f56:	2308      	movs	r3, #8
   b9f58:	60e3      	str	r3, [r4, #12]
   b9f5a:	2306      	movs	r3, #6
   b9f5c:	6025      	str	r5, [r4, #0]
   b9f5e:	7123      	strb	r3, [r4, #4]
   b9f60:	bd38      	pop	{r3, r4, r5, pc}

000b9f62 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9f64:	4605      	mov	r5, r0
   b9f66:	460c      	mov	r4, r1
   b9f68:	9201      	str	r2, [sp, #4]
   b9f6a:	461e      	mov	r6, r3
   b9f6c:	f000 f890 	bl	ba090 <_ZNKSt9type_infoeqERKS_>
   b9f70:	b950      	cbnz	r0, b9f88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9f72:	2e03      	cmp	r6, #3
   b9f74:	d808      	bhi.n	b9f88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9f76:	6823      	ldr	r3, [r4, #0]
   b9f78:	9a01      	ldr	r2, [sp, #4]
   b9f7a:	695b      	ldr	r3, [r3, #20]
   b9f7c:	4629      	mov	r1, r5
   b9f7e:	4620      	mov	r0, r4
   b9f80:	b002      	add	sp, #8
   b9f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9f86:	4718      	bx	r3
   b9f88:	b002      	add	sp, #8
   b9f8a:	bd70      	pop	{r4, r5, r6, pc}

000b9f8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9f8c:	b510      	push	{r4, lr}
   b9f8e:	4b03      	ldr	r3, [pc, #12]	; (b9f9c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9f90:	6003      	str	r3, [r0, #0]
   b9f92:	4604      	mov	r4, r0
   b9f94:	f7ff ffa6 	bl	b9ee4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9f98:	4620      	mov	r0, r4
   b9f9a:	bd10      	pop	{r4, pc}
   b9f9c:	000bd7a4 	.word	0x000bd7a4

000b9fa0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9fa0:	b510      	push	{r4, lr}
   b9fa2:	4604      	mov	r4, r0
   b9fa4:	f7ff fff2 	bl	b9f8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9fa8:	4620      	mov	r0, r4
   b9faa:	210c      	movs	r1, #12
   b9fac:	f7fa f879 	bl	b40a2 <_ZdlPvj>
   b9fb0:	4620      	mov	r0, r4
   b9fb2:	bd10      	pop	{r4, pc}

000b9fb4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9fb6:	9f08      	ldr	r7, [sp, #32]
   b9fb8:	4297      	cmp	r7, r2
   b9fba:	4605      	mov	r5, r0
   b9fbc:	460e      	mov	r6, r1
   b9fbe:	4614      	mov	r4, r2
   b9fc0:	d00a      	beq.n	b9fd8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9fc2:	68a8      	ldr	r0, [r5, #8]
   b9fc4:	6802      	ldr	r2, [r0, #0]
   b9fc6:	9708      	str	r7, [sp, #32]
   b9fc8:	6a15      	ldr	r5, [r2, #32]
   b9fca:	4631      	mov	r1, r6
   b9fcc:	4622      	mov	r2, r4
   b9fce:	46ac      	mov	ip, r5
   b9fd0:	b003      	add	sp, #12
   b9fd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9fd6:	4760      	bx	ip
   b9fd8:	4619      	mov	r1, r3
   b9fda:	9301      	str	r3, [sp, #4]
   b9fdc:	f000 f858 	bl	ba090 <_ZNKSt9type_infoeqERKS_>
   b9fe0:	9b01      	ldr	r3, [sp, #4]
   b9fe2:	2800      	cmp	r0, #0
   b9fe4:	d0ed      	beq.n	b9fc2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9fe6:	2006      	movs	r0, #6
   b9fe8:	b003      	add	sp, #12
   b9fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9fec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9fec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ff0:	460d      	mov	r5, r1
   b9ff2:	4619      	mov	r1, r3
   b9ff4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9ff8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9ffc:	4681      	mov	r9, r0
   b9ffe:	4617      	mov	r7, r2
   ba000:	4698      	mov	r8, r3
   ba002:	f000 f845 	bl	ba090 <_ZNKSt9type_infoeqERKS_>
   ba006:	b190      	cbz	r0, ba02e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba008:	2d00      	cmp	r5, #0
   ba00a:	6034      	str	r4, [r6, #0]
   ba00c:	7137      	strb	r7, [r6, #4]
   ba00e:	db09      	blt.n	ba024 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba010:	1961      	adds	r1, r4, r5
   ba012:	458a      	cmp	sl, r1
   ba014:	bf0c      	ite	eq
   ba016:	2106      	moveq	r1, #6
   ba018:	2101      	movne	r1, #1
   ba01a:	71b1      	strb	r1, [r6, #6]
   ba01c:	2000      	movs	r0, #0
   ba01e:	b001      	add	sp, #4
   ba020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba024:	3502      	adds	r5, #2
   ba026:	d1f9      	bne.n	ba01c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba028:	2301      	movs	r3, #1
   ba02a:	71b3      	strb	r3, [r6, #6]
   ba02c:	e7f6      	b.n	ba01c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba02e:	4554      	cmp	r4, sl
   ba030:	d106      	bne.n	ba040 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba032:	4659      	mov	r1, fp
   ba034:	4648      	mov	r0, r9
   ba036:	f000 f82b 	bl	ba090 <_ZNKSt9type_infoeqERKS_>
   ba03a:	b108      	cbz	r0, ba040 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba03c:	7177      	strb	r7, [r6, #5]
   ba03e:	e7ed      	b.n	ba01c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba040:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba044:	6803      	ldr	r3, [r0, #0]
   ba046:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba04a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba04e:	69dc      	ldr	r4, [r3, #28]
   ba050:	463a      	mov	r2, r7
   ba052:	4643      	mov	r3, r8
   ba054:	4629      	mov	r1, r5
   ba056:	46a4      	mov	ip, r4
   ba058:	b001      	add	sp, #4
   ba05a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba05e:	4760      	bx	ip

000ba060 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba064:	4607      	mov	r7, r0
   ba066:	460c      	mov	r4, r1
   ba068:	4615      	mov	r5, r2
   ba06a:	461e      	mov	r6, r3
   ba06c:	f7ff ff6d 	bl	b9f4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba070:	b948      	cbnz	r0, ba086 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba072:	68b8      	ldr	r0, [r7, #8]
   ba074:	6803      	ldr	r3, [r0, #0]
   ba076:	699f      	ldr	r7, [r3, #24]
   ba078:	462a      	mov	r2, r5
   ba07a:	4633      	mov	r3, r6
   ba07c:	4621      	mov	r1, r4
   ba07e:	46bc      	mov	ip, r7
   ba080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba084:	4760      	bx	ip
   ba086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba08a <_ZNSt9type_infoD1Ev>:
   ba08a:	4770      	bx	lr

000ba08c <_ZNKSt9type_info14__is_pointer_pEv>:
   ba08c:	2000      	movs	r0, #0
   ba08e:	4770      	bx	lr

000ba090 <_ZNKSt9type_infoeqERKS_>:
   ba090:	4281      	cmp	r1, r0
   ba092:	b508      	push	{r3, lr}
   ba094:	d00e      	beq.n	ba0b4 <_ZNKSt9type_infoeqERKS_+0x24>
   ba096:	6840      	ldr	r0, [r0, #4]
   ba098:	7803      	ldrb	r3, [r0, #0]
   ba09a:	2b2a      	cmp	r3, #42	; 0x2a
   ba09c:	d00c      	beq.n	ba0b8 <_ZNKSt9type_infoeqERKS_+0x28>
   ba09e:	6849      	ldr	r1, [r1, #4]
   ba0a0:	780b      	ldrb	r3, [r1, #0]
   ba0a2:	2b2a      	cmp	r3, #42	; 0x2a
   ba0a4:	bf08      	it	eq
   ba0a6:	3101      	addeq	r1, #1
   ba0a8:	f000 fd6f 	bl	bab8a <strcmp>
   ba0ac:	fab0 f080 	clz	r0, r0
   ba0b0:	0940      	lsrs	r0, r0, #5
   ba0b2:	bd08      	pop	{r3, pc}
   ba0b4:	2001      	movs	r0, #1
   ba0b6:	e7fc      	b.n	ba0b2 <_ZNKSt9type_infoeqERKS_+0x22>
   ba0b8:	2000      	movs	r0, #0
   ba0ba:	e7fa      	b.n	ba0b2 <_ZNKSt9type_infoeqERKS_+0x22>

000ba0bc <__aeabi_drsub>:
   ba0bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba0c0:	e002      	b.n	ba0c8 <__adddf3>
   ba0c2:	bf00      	nop

000ba0c4 <__aeabi_dsub>:
   ba0c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba0c8 <__adddf3>:
   ba0c8:	b530      	push	{r4, r5, lr}
   ba0ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba0ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba0d2:	ea94 0f05 	teq	r4, r5
   ba0d6:	bf08      	it	eq
   ba0d8:	ea90 0f02 	teqeq	r0, r2
   ba0dc:	bf1f      	itttt	ne
   ba0de:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba0e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba0e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba0ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba0ee:	f000 80e2 	beq.w	ba2b6 <__adddf3+0x1ee>
   ba0f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba0f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba0fa:	bfb8      	it	lt
   ba0fc:	426d      	neglt	r5, r5
   ba0fe:	dd0c      	ble.n	ba11a <__adddf3+0x52>
   ba100:	442c      	add	r4, r5
   ba102:	ea80 0202 	eor.w	r2, r0, r2
   ba106:	ea81 0303 	eor.w	r3, r1, r3
   ba10a:	ea82 0000 	eor.w	r0, r2, r0
   ba10e:	ea83 0101 	eor.w	r1, r3, r1
   ba112:	ea80 0202 	eor.w	r2, r0, r2
   ba116:	ea81 0303 	eor.w	r3, r1, r3
   ba11a:	2d36      	cmp	r5, #54	; 0x36
   ba11c:	bf88      	it	hi
   ba11e:	bd30      	pophi	{r4, r5, pc}
   ba120:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba124:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba128:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba12c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba130:	d002      	beq.n	ba138 <__adddf3+0x70>
   ba132:	4240      	negs	r0, r0
   ba134:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba138:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba13c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba140:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba144:	d002      	beq.n	ba14c <__adddf3+0x84>
   ba146:	4252      	negs	r2, r2
   ba148:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba14c:	ea94 0f05 	teq	r4, r5
   ba150:	f000 80a7 	beq.w	ba2a2 <__adddf3+0x1da>
   ba154:	f1a4 0401 	sub.w	r4, r4, #1
   ba158:	f1d5 0e20 	rsbs	lr, r5, #32
   ba15c:	db0d      	blt.n	ba17a <__adddf3+0xb2>
   ba15e:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba162:	fa22 f205 	lsr.w	r2, r2, r5
   ba166:	1880      	adds	r0, r0, r2
   ba168:	f141 0100 	adc.w	r1, r1, #0
   ba16c:	fa03 f20e 	lsl.w	r2, r3, lr
   ba170:	1880      	adds	r0, r0, r2
   ba172:	fa43 f305 	asr.w	r3, r3, r5
   ba176:	4159      	adcs	r1, r3
   ba178:	e00e      	b.n	ba198 <__adddf3+0xd0>
   ba17a:	f1a5 0520 	sub.w	r5, r5, #32
   ba17e:	f10e 0e20 	add.w	lr, lr, #32
   ba182:	2a01      	cmp	r2, #1
   ba184:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba188:	bf28      	it	cs
   ba18a:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba18e:	fa43 f305 	asr.w	r3, r3, r5
   ba192:	18c0      	adds	r0, r0, r3
   ba194:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba198:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba19c:	d507      	bpl.n	ba1ae <__adddf3+0xe6>
   ba19e:	f04f 0e00 	mov.w	lr, #0
   ba1a2:	f1dc 0c00 	rsbs	ip, ip, #0
   ba1a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba1aa:	eb6e 0101 	sbc.w	r1, lr, r1
   ba1ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba1b2:	d31b      	bcc.n	ba1ec <__adddf3+0x124>
   ba1b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba1b8:	d30c      	bcc.n	ba1d4 <__adddf3+0x10c>
   ba1ba:	0849      	lsrs	r1, r1, #1
   ba1bc:	ea5f 0030 	movs.w	r0, r0, rrx
   ba1c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba1c4:	f104 0401 	add.w	r4, r4, #1
   ba1c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba1cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba1d0:	f080 809a 	bcs.w	ba308 <__adddf3+0x240>
   ba1d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba1d8:	bf08      	it	eq
   ba1da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba1de:	f150 0000 	adcs.w	r0, r0, #0
   ba1e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba1e6:	ea41 0105 	orr.w	r1, r1, r5
   ba1ea:	bd30      	pop	{r4, r5, pc}
   ba1ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba1f0:	4140      	adcs	r0, r0
   ba1f2:	eb41 0101 	adc.w	r1, r1, r1
   ba1f6:	3c01      	subs	r4, #1
   ba1f8:	bf28      	it	cs
   ba1fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba1fe:	d2e9      	bcs.n	ba1d4 <__adddf3+0x10c>
   ba200:	f091 0f00 	teq	r1, #0
   ba204:	bf04      	itt	eq
   ba206:	4601      	moveq	r1, r0
   ba208:	2000      	moveq	r0, #0
   ba20a:	fab1 f381 	clz	r3, r1
   ba20e:	bf08      	it	eq
   ba210:	3320      	addeq	r3, #32
   ba212:	f1a3 030b 	sub.w	r3, r3, #11
   ba216:	f1b3 0220 	subs.w	r2, r3, #32
   ba21a:	da0c      	bge.n	ba236 <__adddf3+0x16e>
   ba21c:	320c      	adds	r2, #12
   ba21e:	dd08      	ble.n	ba232 <__adddf3+0x16a>
   ba220:	f102 0c14 	add.w	ip, r2, #20
   ba224:	f1c2 020c 	rsb	r2, r2, #12
   ba228:	fa01 f00c 	lsl.w	r0, r1, ip
   ba22c:	fa21 f102 	lsr.w	r1, r1, r2
   ba230:	e00c      	b.n	ba24c <__adddf3+0x184>
   ba232:	f102 0214 	add.w	r2, r2, #20
   ba236:	bfd8      	it	le
   ba238:	f1c2 0c20 	rsble	ip, r2, #32
   ba23c:	fa01 f102 	lsl.w	r1, r1, r2
   ba240:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba244:	bfdc      	itt	le
   ba246:	ea41 010c 	orrle.w	r1, r1, ip
   ba24a:	4090      	lslle	r0, r2
   ba24c:	1ae4      	subs	r4, r4, r3
   ba24e:	bfa2      	ittt	ge
   ba250:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba254:	4329      	orrge	r1, r5
   ba256:	bd30      	popge	{r4, r5, pc}
   ba258:	ea6f 0404 	mvn.w	r4, r4
   ba25c:	3c1f      	subs	r4, #31
   ba25e:	da1c      	bge.n	ba29a <__adddf3+0x1d2>
   ba260:	340c      	adds	r4, #12
   ba262:	dc0e      	bgt.n	ba282 <__adddf3+0x1ba>
   ba264:	f104 0414 	add.w	r4, r4, #20
   ba268:	f1c4 0220 	rsb	r2, r4, #32
   ba26c:	fa20 f004 	lsr.w	r0, r0, r4
   ba270:	fa01 f302 	lsl.w	r3, r1, r2
   ba274:	ea40 0003 	orr.w	r0, r0, r3
   ba278:	fa21 f304 	lsr.w	r3, r1, r4
   ba27c:	ea45 0103 	orr.w	r1, r5, r3
   ba280:	bd30      	pop	{r4, r5, pc}
   ba282:	f1c4 040c 	rsb	r4, r4, #12
   ba286:	f1c4 0220 	rsb	r2, r4, #32
   ba28a:	fa20 f002 	lsr.w	r0, r0, r2
   ba28e:	fa01 f304 	lsl.w	r3, r1, r4
   ba292:	ea40 0003 	orr.w	r0, r0, r3
   ba296:	4629      	mov	r1, r5
   ba298:	bd30      	pop	{r4, r5, pc}
   ba29a:	fa21 f004 	lsr.w	r0, r1, r4
   ba29e:	4629      	mov	r1, r5
   ba2a0:	bd30      	pop	{r4, r5, pc}
   ba2a2:	f094 0f00 	teq	r4, #0
   ba2a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba2aa:	bf06      	itte	eq
   ba2ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba2b0:	3401      	addeq	r4, #1
   ba2b2:	3d01      	subne	r5, #1
   ba2b4:	e74e      	b.n	ba154 <__adddf3+0x8c>
   ba2b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba2ba:	bf18      	it	ne
   ba2bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba2c0:	d029      	beq.n	ba316 <__adddf3+0x24e>
   ba2c2:	ea94 0f05 	teq	r4, r5
   ba2c6:	bf08      	it	eq
   ba2c8:	ea90 0f02 	teqeq	r0, r2
   ba2cc:	d005      	beq.n	ba2da <__adddf3+0x212>
   ba2ce:	ea54 0c00 	orrs.w	ip, r4, r0
   ba2d2:	bf04      	itt	eq
   ba2d4:	4619      	moveq	r1, r3
   ba2d6:	4610      	moveq	r0, r2
   ba2d8:	bd30      	pop	{r4, r5, pc}
   ba2da:	ea91 0f03 	teq	r1, r3
   ba2de:	bf1e      	ittt	ne
   ba2e0:	2100      	movne	r1, #0
   ba2e2:	2000      	movne	r0, #0
   ba2e4:	bd30      	popne	{r4, r5, pc}
   ba2e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba2ea:	d105      	bne.n	ba2f8 <__adddf3+0x230>
   ba2ec:	0040      	lsls	r0, r0, #1
   ba2ee:	4149      	adcs	r1, r1
   ba2f0:	bf28      	it	cs
   ba2f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba2f6:	bd30      	pop	{r4, r5, pc}
   ba2f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba2fc:	bf3c      	itt	cc
   ba2fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba302:	bd30      	popcc	{r4, r5, pc}
   ba304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba308:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba30c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba310:	f04f 0000 	mov.w	r0, #0
   ba314:	bd30      	pop	{r4, r5, pc}
   ba316:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba31a:	bf1a      	itte	ne
   ba31c:	4619      	movne	r1, r3
   ba31e:	4610      	movne	r0, r2
   ba320:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba324:	bf1c      	itt	ne
   ba326:	460b      	movne	r3, r1
   ba328:	4602      	movne	r2, r0
   ba32a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba32e:	bf06      	itte	eq
   ba330:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba334:	ea91 0f03 	teqeq	r1, r3
   ba338:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba33c:	bd30      	pop	{r4, r5, pc}
   ba33e:	bf00      	nop

000ba340 <__aeabi_ui2d>:
   ba340:	f090 0f00 	teq	r0, #0
   ba344:	bf04      	itt	eq
   ba346:	2100      	moveq	r1, #0
   ba348:	4770      	bxeq	lr
   ba34a:	b530      	push	{r4, r5, lr}
   ba34c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba350:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba354:	f04f 0500 	mov.w	r5, #0
   ba358:	f04f 0100 	mov.w	r1, #0
   ba35c:	e750      	b.n	ba200 <__adddf3+0x138>
   ba35e:	bf00      	nop

000ba360 <__aeabi_i2d>:
   ba360:	f090 0f00 	teq	r0, #0
   ba364:	bf04      	itt	eq
   ba366:	2100      	moveq	r1, #0
   ba368:	4770      	bxeq	lr
   ba36a:	b530      	push	{r4, r5, lr}
   ba36c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba370:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba374:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba378:	bf48      	it	mi
   ba37a:	4240      	negmi	r0, r0
   ba37c:	f04f 0100 	mov.w	r1, #0
   ba380:	e73e      	b.n	ba200 <__adddf3+0x138>
   ba382:	bf00      	nop

000ba384 <__aeabi_f2d>:
   ba384:	0042      	lsls	r2, r0, #1
   ba386:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba38a:	ea4f 0131 	mov.w	r1, r1, rrx
   ba38e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba392:	bf1f      	itttt	ne
   ba394:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba398:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba39c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba3a0:	4770      	bxne	lr
   ba3a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba3a6:	bf08      	it	eq
   ba3a8:	4770      	bxeq	lr
   ba3aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba3ae:	bf04      	itt	eq
   ba3b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba3b4:	4770      	bxeq	lr
   ba3b6:	b530      	push	{r4, r5, lr}
   ba3b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba3bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba3c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba3c4:	e71c      	b.n	ba200 <__adddf3+0x138>
   ba3c6:	bf00      	nop

000ba3c8 <__aeabi_ul2d>:
   ba3c8:	ea50 0201 	orrs.w	r2, r0, r1
   ba3cc:	bf08      	it	eq
   ba3ce:	4770      	bxeq	lr
   ba3d0:	b530      	push	{r4, r5, lr}
   ba3d2:	f04f 0500 	mov.w	r5, #0
   ba3d6:	e00a      	b.n	ba3ee <__aeabi_l2d+0x16>

000ba3d8 <__aeabi_l2d>:
   ba3d8:	ea50 0201 	orrs.w	r2, r0, r1
   ba3dc:	bf08      	it	eq
   ba3de:	4770      	bxeq	lr
   ba3e0:	b530      	push	{r4, r5, lr}
   ba3e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba3e6:	d502      	bpl.n	ba3ee <__aeabi_l2d+0x16>
   ba3e8:	4240      	negs	r0, r0
   ba3ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba3ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba3f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba3f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba3fa:	f43f aed8 	beq.w	ba1ae <__adddf3+0xe6>
   ba3fe:	f04f 0203 	mov.w	r2, #3
   ba402:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba406:	bf18      	it	ne
   ba408:	3203      	addne	r2, #3
   ba40a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba40e:	bf18      	it	ne
   ba410:	3203      	addne	r2, #3
   ba412:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba416:	f1c2 0320 	rsb	r3, r2, #32
   ba41a:	fa00 fc03 	lsl.w	ip, r0, r3
   ba41e:	fa20 f002 	lsr.w	r0, r0, r2
   ba422:	fa01 fe03 	lsl.w	lr, r1, r3
   ba426:	ea40 000e 	orr.w	r0, r0, lr
   ba42a:	fa21 f102 	lsr.w	r1, r1, r2
   ba42e:	4414      	add	r4, r2
   ba430:	e6bd      	b.n	ba1ae <__adddf3+0xe6>
   ba432:	bf00      	nop

000ba434 <__aeabi_dmul>:
   ba434:	b570      	push	{r4, r5, r6, lr}
   ba436:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba43a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba43e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba442:	bf1d      	ittte	ne
   ba444:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba448:	ea94 0f0c 	teqne	r4, ip
   ba44c:	ea95 0f0c 	teqne	r5, ip
   ba450:	f000 f8de 	bleq	ba610 <__aeabi_dmul+0x1dc>
   ba454:	442c      	add	r4, r5
   ba456:	ea81 0603 	eor.w	r6, r1, r3
   ba45a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba45e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba462:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba466:	bf18      	it	ne
   ba468:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba46c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba474:	d038      	beq.n	ba4e8 <__aeabi_dmul+0xb4>
   ba476:	fba0 ce02 	umull	ip, lr, r0, r2
   ba47a:	f04f 0500 	mov.w	r5, #0
   ba47e:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba482:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba486:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba48a:	f04f 0600 	mov.w	r6, #0
   ba48e:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba492:	f09c 0f00 	teq	ip, #0
   ba496:	bf18      	it	ne
   ba498:	f04e 0e01 	orrne.w	lr, lr, #1
   ba49c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba4a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba4a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba4a8:	d204      	bcs.n	ba4b4 <__aeabi_dmul+0x80>
   ba4aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba4ae:	416d      	adcs	r5, r5
   ba4b0:	eb46 0606 	adc.w	r6, r6, r6
   ba4b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba4b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba4bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba4c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba4c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba4c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba4cc:	bf88      	it	hi
   ba4ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba4d2:	d81e      	bhi.n	ba512 <__aeabi_dmul+0xde>
   ba4d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba4d8:	bf08      	it	eq
   ba4da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba4de:	f150 0000 	adcs.w	r0, r0, #0
   ba4e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba4e6:	bd70      	pop	{r4, r5, r6, pc}
   ba4e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba4ec:	ea46 0101 	orr.w	r1, r6, r1
   ba4f0:	ea40 0002 	orr.w	r0, r0, r2
   ba4f4:	ea81 0103 	eor.w	r1, r1, r3
   ba4f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba4fc:	bfc2      	ittt	gt
   ba4fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba502:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba506:	bd70      	popgt	{r4, r5, r6, pc}
   ba508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba50c:	f04f 0e00 	mov.w	lr, #0
   ba510:	3c01      	subs	r4, #1
   ba512:	f300 80ab 	bgt.w	ba66c <__aeabi_dmul+0x238>
   ba516:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba51a:	bfde      	ittt	le
   ba51c:	2000      	movle	r0, #0
   ba51e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba522:	bd70      	pople	{r4, r5, r6, pc}
   ba524:	f1c4 0400 	rsb	r4, r4, #0
   ba528:	3c20      	subs	r4, #32
   ba52a:	da35      	bge.n	ba598 <__aeabi_dmul+0x164>
   ba52c:	340c      	adds	r4, #12
   ba52e:	dc1b      	bgt.n	ba568 <__aeabi_dmul+0x134>
   ba530:	f104 0414 	add.w	r4, r4, #20
   ba534:	f1c4 0520 	rsb	r5, r4, #32
   ba538:	fa00 f305 	lsl.w	r3, r0, r5
   ba53c:	fa20 f004 	lsr.w	r0, r0, r4
   ba540:	fa01 f205 	lsl.w	r2, r1, r5
   ba544:	ea40 0002 	orr.w	r0, r0, r2
   ba548:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba54c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba550:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba554:	fa21 f604 	lsr.w	r6, r1, r4
   ba558:	eb42 0106 	adc.w	r1, r2, r6
   ba55c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba560:	bf08      	it	eq
   ba562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba566:	bd70      	pop	{r4, r5, r6, pc}
   ba568:	f1c4 040c 	rsb	r4, r4, #12
   ba56c:	f1c4 0520 	rsb	r5, r4, #32
   ba570:	fa00 f304 	lsl.w	r3, r0, r4
   ba574:	fa20 f005 	lsr.w	r0, r0, r5
   ba578:	fa01 f204 	lsl.w	r2, r1, r4
   ba57c:	ea40 0002 	orr.w	r0, r0, r2
   ba580:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba588:	f141 0100 	adc.w	r1, r1, #0
   ba58c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba590:	bf08      	it	eq
   ba592:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba596:	bd70      	pop	{r4, r5, r6, pc}
   ba598:	f1c4 0520 	rsb	r5, r4, #32
   ba59c:	fa00 f205 	lsl.w	r2, r0, r5
   ba5a0:	ea4e 0e02 	orr.w	lr, lr, r2
   ba5a4:	fa20 f304 	lsr.w	r3, r0, r4
   ba5a8:	fa01 f205 	lsl.w	r2, r1, r5
   ba5ac:	ea43 0302 	orr.w	r3, r3, r2
   ba5b0:	fa21 f004 	lsr.w	r0, r1, r4
   ba5b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba5b8:	fa21 f204 	lsr.w	r2, r1, r4
   ba5bc:	ea20 0002 	bic.w	r0, r0, r2
   ba5c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba5c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba5c8:	bf08      	it	eq
   ba5ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba5ce:	bd70      	pop	{r4, r5, r6, pc}
   ba5d0:	f094 0f00 	teq	r4, #0
   ba5d4:	d10f      	bne.n	ba5f6 <__aeabi_dmul+0x1c2>
   ba5d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba5da:	0040      	lsls	r0, r0, #1
   ba5dc:	eb41 0101 	adc.w	r1, r1, r1
   ba5e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba5e4:	bf08      	it	eq
   ba5e6:	3c01      	subeq	r4, #1
   ba5e8:	d0f7      	beq.n	ba5da <__aeabi_dmul+0x1a6>
   ba5ea:	ea41 0106 	orr.w	r1, r1, r6
   ba5ee:	f095 0f00 	teq	r5, #0
   ba5f2:	bf18      	it	ne
   ba5f4:	4770      	bxne	lr
   ba5f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba5fa:	0052      	lsls	r2, r2, #1
   ba5fc:	eb43 0303 	adc.w	r3, r3, r3
   ba600:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba604:	bf08      	it	eq
   ba606:	3d01      	subeq	r5, #1
   ba608:	d0f7      	beq.n	ba5fa <__aeabi_dmul+0x1c6>
   ba60a:	ea43 0306 	orr.w	r3, r3, r6
   ba60e:	4770      	bx	lr
   ba610:	ea94 0f0c 	teq	r4, ip
   ba614:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba618:	bf18      	it	ne
   ba61a:	ea95 0f0c 	teqne	r5, ip
   ba61e:	d00c      	beq.n	ba63a <__aeabi_dmul+0x206>
   ba620:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba624:	bf18      	it	ne
   ba626:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba62a:	d1d1      	bne.n	ba5d0 <__aeabi_dmul+0x19c>
   ba62c:	ea81 0103 	eor.w	r1, r1, r3
   ba630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba634:	f04f 0000 	mov.w	r0, #0
   ba638:	bd70      	pop	{r4, r5, r6, pc}
   ba63a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba63e:	bf06      	itte	eq
   ba640:	4610      	moveq	r0, r2
   ba642:	4619      	moveq	r1, r3
   ba644:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba648:	d019      	beq.n	ba67e <__aeabi_dmul+0x24a>
   ba64a:	ea94 0f0c 	teq	r4, ip
   ba64e:	d102      	bne.n	ba656 <__aeabi_dmul+0x222>
   ba650:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba654:	d113      	bne.n	ba67e <__aeabi_dmul+0x24a>
   ba656:	ea95 0f0c 	teq	r5, ip
   ba65a:	d105      	bne.n	ba668 <__aeabi_dmul+0x234>
   ba65c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba660:	bf1c      	itt	ne
   ba662:	4610      	movne	r0, r2
   ba664:	4619      	movne	r1, r3
   ba666:	d10a      	bne.n	ba67e <__aeabi_dmul+0x24a>
   ba668:	ea81 0103 	eor.w	r1, r1, r3
   ba66c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba670:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba678:	f04f 0000 	mov.w	r0, #0
   ba67c:	bd70      	pop	{r4, r5, r6, pc}
   ba67e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba682:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba686:	bd70      	pop	{r4, r5, r6, pc}

000ba688 <__aeabi_ddiv>:
   ba688:	b570      	push	{r4, r5, r6, lr}
   ba68a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba68e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba692:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba696:	bf1d      	ittte	ne
   ba698:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba69c:	ea94 0f0c 	teqne	r4, ip
   ba6a0:	ea95 0f0c 	teqne	r5, ip
   ba6a4:	f000 f8a7 	bleq	ba7f6 <__aeabi_ddiv+0x16e>
   ba6a8:	eba4 0405 	sub.w	r4, r4, r5
   ba6ac:	ea81 0e03 	eor.w	lr, r1, r3
   ba6b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba6b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba6b8:	f000 8088 	beq.w	ba7cc <__aeabi_ddiv+0x144>
   ba6bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba6c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba6c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba6c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba6cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba6d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba6d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba6d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba6dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba6e0:	429d      	cmp	r5, r3
   ba6e2:	bf08      	it	eq
   ba6e4:	4296      	cmpeq	r6, r2
   ba6e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba6ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba6ee:	d202      	bcs.n	ba6f6 <__aeabi_ddiv+0x6e>
   ba6f0:	085b      	lsrs	r3, r3, #1
   ba6f2:	ea4f 0232 	mov.w	r2, r2, rrx
   ba6f6:	1ab6      	subs	r6, r6, r2
   ba6f8:	eb65 0503 	sbc.w	r5, r5, r3
   ba6fc:	085b      	lsrs	r3, r3, #1
   ba6fe:	ea4f 0232 	mov.w	r2, r2, rrx
   ba702:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba706:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba70a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba70e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba712:	bf22      	ittt	cs
   ba714:	1ab6      	subcs	r6, r6, r2
   ba716:	4675      	movcs	r5, lr
   ba718:	ea40 000c 	orrcs.w	r0, r0, ip
   ba71c:	085b      	lsrs	r3, r3, #1
   ba71e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba722:	ebb6 0e02 	subs.w	lr, r6, r2
   ba726:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba72a:	bf22      	ittt	cs
   ba72c:	1ab6      	subcs	r6, r6, r2
   ba72e:	4675      	movcs	r5, lr
   ba730:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   ba734:	085b      	lsrs	r3, r3, #1
   ba736:	ea4f 0232 	mov.w	r2, r2, rrx
   ba73a:	ebb6 0e02 	subs.w	lr, r6, r2
   ba73e:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba742:	bf22      	ittt	cs
   ba744:	1ab6      	subcs	r6, r6, r2
   ba746:	4675      	movcs	r5, lr
   ba748:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   ba74c:	085b      	lsrs	r3, r3, #1
   ba74e:	ea4f 0232 	mov.w	r2, r2, rrx
   ba752:	ebb6 0e02 	subs.w	lr, r6, r2
   ba756:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba75a:	bf22      	ittt	cs
   ba75c:	1ab6      	subcs	r6, r6, r2
   ba75e:	4675      	movcs	r5, lr
   ba760:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ba764:	ea55 0e06 	orrs.w	lr, r5, r6
   ba768:	d018      	beq.n	ba79c <__aeabi_ddiv+0x114>
   ba76a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ba76e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ba772:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ba776:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ba77a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ba77e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ba782:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ba786:	d1c0      	bne.n	ba70a <__aeabi_ddiv+0x82>
   ba788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba78c:	d10b      	bne.n	ba7a6 <__aeabi_ddiv+0x11e>
   ba78e:	ea41 0100 	orr.w	r1, r1, r0
   ba792:	f04f 0000 	mov.w	r0, #0
   ba796:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ba79a:	e7b6      	b.n	ba70a <__aeabi_ddiv+0x82>
   ba79c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba7a0:	bf04      	itt	eq
   ba7a2:	4301      	orreq	r1, r0
   ba7a4:	2000      	moveq	r0, #0
   ba7a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba7aa:	bf88      	it	hi
   ba7ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba7b0:	f63f aeaf 	bhi.w	ba512 <__aeabi_dmul+0xde>
   ba7b4:	ebb5 0c03 	subs.w	ip, r5, r3
   ba7b8:	bf04      	itt	eq
   ba7ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   ba7be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba7c2:	f150 0000 	adcs.w	r0, r0, #0
   ba7c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba7ca:	bd70      	pop	{r4, r5, r6, pc}
   ba7cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ba7d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ba7d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ba7d8:	bfc2      	ittt	gt
   ba7da:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba7de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba7e2:	bd70      	popgt	{r4, r5, r6, pc}
   ba7e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba7e8:	f04f 0e00 	mov.w	lr, #0
   ba7ec:	3c01      	subs	r4, #1
   ba7ee:	e690      	b.n	ba512 <__aeabi_dmul+0xde>
   ba7f0:	ea45 0e06 	orr.w	lr, r5, r6
   ba7f4:	e68d      	b.n	ba512 <__aeabi_dmul+0xde>
   ba7f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba7fa:	ea94 0f0c 	teq	r4, ip
   ba7fe:	bf08      	it	eq
   ba800:	ea95 0f0c 	teqeq	r5, ip
   ba804:	f43f af3b 	beq.w	ba67e <__aeabi_dmul+0x24a>
   ba808:	ea94 0f0c 	teq	r4, ip
   ba80c:	d10a      	bne.n	ba824 <__aeabi_ddiv+0x19c>
   ba80e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba812:	f47f af34 	bne.w	ba67e <__aeabi_dmul+0x24a>
   ba816:	ea95 0f0c 	teq	r5, ip
   ba81a:	f47f af25 	bne.w	ba668 <__aeabi_dmul+0x234>
   ba81e:	4610      	mov	r0, r2
   ba820:	4619      	mov	r1, r3
   ba822:	e72c      	b.n	ba67e <__aeabi_dmul+0x24a>
   ba824:	ea95 0f0c 	teq	r5, ip
   ba828:	d106      	bne.n	ba838 <__aeabi_ddiv+0x1b0>
   ba82a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba82e:	f43f aefd 	beq.w	ba62c <__aeabi_dmul+0x1f8>
   ba832:	4610      	mov	r0, r2
   ba834:	4619      	mov	r1, r3
   ba836:	e722      	b.n	ba67e <__aeabi_dmul+0x24a>
   ba838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba83c:	bf18      	it	ne
   ba83e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba842:	f47f aec5 	bne.w	ba5d0 <__aeabi_dmul+0x19c>
   ba846:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba84a:	f47f af0d 	bne.w	ba668 <__aeabi_dmul+0x234>
   ba84e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba852:	f47f aeeb 	bne.w	ba62c <__aeabi_dmul+0x1f8>
   ba856:	e712      	b.n	ba67e <__aeabi_dmul+0x24a>

000ba858 <__gedf2>:
   ba858:	f04f 3cff 	mov.w	ip, #4294967295
   ba85c:	e006      	b.n	ba86c <__cmpdf2+0x4>
   ba85e:	bf00      	nop

000ba860 <__ledf2>:
   ba860:	f04f 0c01 	mov.w	ip, #1
   ba864:	e002      	b.n	ba86c <__cmpdf2+0x4>
   ba866:	bf00      	nop

000ba868 <__cmpdf2>:
   ba868:	f04f 0c01 	mov.w	ip, #1
   ba86c:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba870:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba87c:	bf18      	it	ne
   ba87e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba882:	d01b      	beq.n	ba8bc <__cmpdf2+0x54>
   ba884:	b001      	add	sp, #4
   ba886:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba88a:	bf0c      	ite	eq
   ba88c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba890:	ea91 0f03 	teqne	r1, r3
   ba894:	bf02      	ittt	eq
   ba896:	ea90 0f02 	teqeq	r0, r2
   ba89a:	2000      	moveq	r0, #0
   ba89c:	4770      	bxeq	lr
   ba89e:	f110 0f00 	cmn.w	r0, #0
   ba8a2:	ea91 0f03 	teq	r1, r3
   ba8a6:	bf58      	it	pl
   ba8a8:	4299      	cmppl	r1, r3
   ba8aa:	bf08      	it	eq
   ba8ac:	4290      	cmpeq	r0, r2
   ba8ae:	bf2c      	ite	cs
   ba8b0:	17d8      	asrcs	r0, r3, #31
   ba8b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba8b6:	f040 0001 	orr.w	r0, r0, #1
   ba8ba:	4770      	bx	lr
   ba8bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba8c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba8c4:	d102      	bne.n	ba8cc <__cmpdf2+0x64>
   ba8c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba8ca:	d107      	bne.n	ba8dc <__cmpdf2+0x74>
   ba8cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba8d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba8d4:	d1d6      	bne.n	ba884 <__cmpdf2+0x1c>
   ba8d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba8da:	d0d3      	beq.n	ba884 <__cmpdf2+0x1c>
   ba8dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba8e0:	4770      	bx	lr
   ba8e2:	bf00      	nop

000ba8e4 <__aeabi_cdrcmple>:
   ba8e4:	4684      	mov	ip, r0
   ba8e6:	4610      	mov	r0, r2
   ba8e8:	4662      	mov	r2, ip
   ba8ea:	468c      	mov	ip, r1
   ba8ec:	4619      	mov	r1, r3
   ba8ee:	4663      	mov	r3, ip
   ba8f0:	e000      	b.n	ba8f4 <__aeabi_cdcmpeq>
   ba8f2:	bf00      	nop

000ba8f4 <__aeabi_cdcmpeq>:
   ba8f4:	b501      	push	{r0, lr}
   ba8f6:	f7ff ffb7 	bl	ba868 <__cmpdf2>
   ba8fa:	2800      	cmp	r0, #0
   ba8fc:	bf48      	it	mi
   ba8fe:	f110 0f00 	cmnmi.w	r0, #0
   ba902:	bd01      	pop	{r0, pc}

000ba904 <__aeabi_dcmpeq>:
   ba904:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba908:	f7ff fff4 	bl	ba8f4 <__aeabi_cdcmpeq>
   ba90c:	bf0c      	ite	eq
   ba90e:	2001      	moveq	r0, #1
   ba910:	2000      	movne	r0, #0
   ba912:	f85d fb08 	ldr.w	pc, [sp], #8
   ba916:	bf00      	nop

000ba918 <__aeabi_dcmplt>:
   ba918:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba91c:	f7ff ffea 	bl	ba8f4 <__aeabi_cdcmpeq>
   ba920:	bf34      	ite	cc
   ba922:	2001      	movcc	r0, #1
   ba924:	2000      	movcs	r0, #0
   ba926:	f85d fb08 	ldr.w	pc, [sp], #8
   ba92a:	bf00      	nop

000ba92c <__aeabi_dcmple>:
   ba92c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba930:	f7ff ffe0 	bl	ba8f4 <__aeabi_cdcmpeq>
   ba934:	bf94      	ite	ls
   ba936:	2001      	movls	r0, #1
   ba938:	2000      	movhi	r0, #0
   ba93a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba93e:	bf00      	nop

000ba940 <__aeabi_dcmpge>:
   ba940:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba944:	f7ff ffce 	bl	ba8e4 <__aeabi_cdrcmple>
   ba948:	bf94      	ite	ls
   ba94a:	2001      	movls	r0, #1
   ba94c:	2000      	movhi	r0, #0
   ba94e:	f85d fb08 	ldr.w	pc, [sp], #8
   ba952:	bf00      	nop

000ba954 <__aeabi_dcmpgt>:
   ba954:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba958:	f7ff ffc4 	bl	ba8e4 <__aeabi_cdrcmple>
   ba95c:	bf34      	ite	cc
   ba95e:	2001      	movcc	r0, #1
   ba960:	2000      	movcs	r0, #0
   ba962:	f85d fb08 	ldr.w	pc, [sp], #8
   ba966:	bf00      	nop

000ba968 <__aeabi_d2uiz>:
   ba968:	004a      	lsls	r2, r1, #1
   ba96a:	d211      	bcs.n	ba990 <__aeabi_d2uiz+0x28>
   ba96c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba970:	d211      	bcs.n	ba996 <__aeabi_d2uiz+0x2e>
   ba972:	d50d      	bpl.n	ba990 <__aeabi_d2uiz+0x28>
   ba974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba97c:	d40e      	bmi.n	ba99c <__aeabi_d2uiz+0x34>
   ba97e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba98a:	fa23 f002 	lsr.w	r0, r3, r2
   ba98e:	4770      	bx	lr
   ba990:	f04f 0000 	mov.w	r0, #0
   ba994:	4770      	bx	lr
   ba996:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba99a:	d102      	bne.n	ba9a2 <__aeabi_d2uiz+0x3a>
   ba99c:	f04f 30ff 	mov.w	r0, #4294967295
   ba9a0:	4770      	bx	lr
   ba9a2:	f04f 0000 	mov.w	r0, #0
   ba9a6:	4770      	bx	lr

000ba9a8 <__aeabi_f2lz>:
   ba9a8:	ee07 0a90 	vmov	s15, r0
   ba9ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba9b4:	d401      	bmi.n	ba9ba <__aeabi_f2lz+0x12>
   ba9b6:	f000 b80b 	b.w	ba9d0 <__aeabi_f2ulz>
   ba9ba:	eef1 7a67 	vneg.f32	s15, s15
   ba9be:	b508      	push	{r3, lr}
   ba9c0:	ee17 0a90 	vmov	r0, s15
   ba9c4:	f000 f804 	bl	ba9d0 <__aeabi_f2ulz>
   ba9c8:	4240      	negs	r0, r0
   ba9ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba9ce:	bd08      	pop	{r3, pc}

000ba9d0 <__aeabi_f2ulz>:
   ba9d0:	b5d0      	push	{r4, r6, r7, lr}
   ba9d2:	f7ff fcd7 	bl	ba384 <__aeabi_f2d>
   ba9d6:	4b0c      	ldr	r3, [pc, #48]	; (baa08 <__aeabi_f2ulz+0x38>)
   ba9d8:	2200      	movs	r2, #0
   ba9da:	4606      	mov	r6, r0
   ba9dc:	460f      	mov	r7, r1
   ba9de:	f7ff fd29 	bl	ba434 <__aeabi_dmul>
   ba9e2:	f7ff ffc1 	bl	ba968 <__aeabi_d2uiz>
   ba9e6:	4604      	mov	r4, r0
   ba9e8:	f7ff fcaa 	bl	ba340 <__aeabi_ui2d>
   ba9ec:	4b07      	ldr	r3, [pc, #28]	; (baa0c <__aeabi_f2ulz+0x3c>)
   ba9ee:	2200      	movs	r2, #0
   ba9f0:	f7ff fd20 	bl	ba434 <__aeabi_dmul>
   ba9f4:	4602      	mov	r2, r0
   ba9f6:	460b      	mov	r3, r1
   ba9f8:	4630      	mov	r0, r6
   ba9fa:	4639      	mov	r1, r7
   ba9fc:	f7ff fb62 	bl	ba0c4 <__aeabi_dsub>
   baa00:	f7ff ffb2 	bl	ba968 <__aeabi_d2uiz>
   baa04:	4621      	mov	r1, r4
   baa06:	bdd0      	pop	{r4, r6, r7, pc}
   baa08:	3df00000 	.word	0x3df00000
   baa0c:	41f00000 	.word	0x41f00000

000baa10 <__aeabi_d2ulz>:
   baa10:	b5d0      	push	{r4, r6, r7, lr}
   baa12:	4b0c      	ldr	r3, [pc, #48]	; (baa44 <__aeabi_d2ulz+0x34>)
   baa14:	2200      	movs	r2, #0
   baa16:	4606      	mov	r6, r0
   baa18:	460f      	mov	r7, r1
   baa1a:	f7ff fd0b 	bl	ba434 <__aeabi_dmul>
   baa1e:	f7ff ffa3 	bl	ba968 <__aeabi_d2uiz>
   baa22:	4604      	mov	r4, r0
   baa24:	f7ff fc8c 	bl	ba340 <__aeabi_ui2d>
   baa28:	4b07      	ldr	r3, [pc, #28]	; (baa48 <__aeabi_d2ulz+0x38>)
   baa2a:	2200      	movs	r2, #0
   baa2c:	f7ff fd02 	bl	ba434 <__aeabi_dmul>
   baa30:	4602      	mov	r2, r0
   baa32:	460b      	mov	r3, r1
   baa34:	4630      	mov	r0, r6
   baa36:	4639      	mov	r1, r7
   baa38:	f7ff fb44 	bl	ba0c4 <__aeabi_dsub>
   baa3c:	f7ff ff94 	bl	ba968 <__aeabi_d2uiz>
   baa40:	4621      	mov	r1, r4
   baa42:	bdd0      	pop	{r4, r6, r7, pc}
   baa44:	3df00000 	.word	0x3df00000
   baa48:	41f00000 	.word	0x41f00000

000baa4c <atexit>:
   baa4c:	2300      	movs	r3, #0
   baa4e:	4601      	mov	r1, r0
   baa50:	461a      	mov	r2, r3
   baa52:	4618      	mov	r0, r3
   baa54:	f001 b82e 	b.w	bbab4 <__register_exitproc>

000baa58 <atof>:
   baa58:	2100      	movs	r1, #0
   baa5a:	f000 bf23 	b.w	bb8a4 <strtod>

000baa5e <atoi>:
   baa5e:	220a      	movs	r2, #10
   baa60:	2100      	movs	r1, #0
   baa62:	f001 b809 	b.w	bba78 <strtol>

000baa66 <ldiv>:
   baa66:	2900      	cmp	r1, #0
   baa68:	b510      	push	{r4, lr}
   baa6a:	fb91 f4f2 	sdiv	r4, r1, r2
   baa6e:	fb02 1314 	mls	r3, r2, r4, r1
   baa72:	db06      	blt.n	baa82 <ldiv+0x1c>
   baa74:	2b00      	cmp	r3, #0
   baa76:	da01      	bge.n	baa7c <ldiv+0x16>
   baa78:	3401      	adds	r4, #1
   baa7a:	1a9b      	subs	r3, r3, r2
   baa7c:	e9c0 4300 	strd	r4, r3, [r0]
   baa80:	bd10      	pop	{r4, pc}
   baa82:	2b00      	cmp	r3, #0
   baa84:	bfc4      	itt	gt
   baa86:	f104 34ff 	addgt.w	r4, r4, #4294967295
   baa8a:	189b      	addgt	r3, r3, r2
   baa8c:	e7f6      	b.n	baa7c <ldiv+0x16>

000baa8e <memcmp>:
   baa8e:	b510      	push	{r4, lr}
   baa90:	3901      	subs	r1, #1
   baa92:	4402      	add	r2, r0
   baa94:	4290      	cmp	r0, r2
   baa96:	d101      	bne.n	baa9c <memcmp+0xe>
   baa98:	2000      	movs	r0, #0
   baa9a:	e005      	b.n	baaa8 <memcmp+0x1a>
   baa9c:	7803      	ldrb	r3, [r0, #0]
   baa9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   baaa2:	42a3      	cmp	r3, r4
   baaa4:	d001      	beq.n	baaaa <memcmp+0x1c>
   baaa6:	1b18      	subs	r0, r3, r4
   baaa8:	bd10      	pop	{r4, pc}
   baaaa:	3001      	adds	r0, #1
   baaac:	e7f2      	b.n	baa94 <memcmp+0x6>

000baaae <memcpy>:
   baaae:	440a      	add	r2, r1
   baab0:	4291      	cmp	r1, r2
   baab2:	f100 33ff 	add.w	r3, r0, #4294967295
   baab6:	d100      	bne.n	baaba <memcpy+0xc>
   baab8:	4770      	bx	lr
   baaba:	b510      	push	{r4, lr}
   baabc:	f811 4b01 	ldrb.w	r4, [r1], #1
   baac0:	f803 4f01 	strb.w	r4, [r3, #1]!
   baac4:	4291      	cmp	r1, r2
   baac6:	d1f9      	bne.n	baabc <memcpy+0xe>
   baac8:	bd10      	pop	{r4, pc}

000baaca <memmove>:
   baaca:	4288      	cmp	r0, r1
   baacc:	b510      	push	{r4, lr}
   baace:	eb01 0402 	add.w	r4, r1, r2
   baad2:	d902      	bls.n	baada <memmove+0x10>
   baad4:	4284      	cmp	r4, r0
   baad6:	4623      	mov	r3, r4
   baad8:	d807      	bhi.n	baaea <memmove+0x20>
   baada:	1e43      	subs	r3, r0, #1
   baadc:	42a1      	cmp	r1, r4
   baade:	d008      	beq.n	baaf2 <memmove+0x28>
   baae0:	f811 2b01 	ldrb.w	r2, [r1], #1
   baae4:	f803 2f01 	strb.w	r2, [r3, #1]!
   baae8:	e7f8      	b.n	baadc <memmove+0x12>
   baaea:	4402      	add	r2, r0
   baaec:	4601      	mov	r1, r0
   baaee:	428a      	cmp	r2, r1
   baaf0:	d100      	bne.n	baaf4 <memmove+0x2a>
   baaf2:	bd10      	pop	{r4, pc}
   baaf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   baaf8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   baafc:	e7f7      	b.n	baaee <memmove+0x24>

000baafe <memset>:
   baafe:	4402      	add	r2, r0
   bab00:	4603      	mov	r3, r0
   bab02:	4293      	cmp	r3, r2
   bab04:	d100      	bne.n	bab08 <memset+0xa>
   bab06:	4770      	bx	lr
   bab08:	f803 1b01 	strb.w	r1, [r3], #1
   bab0c:	e7f9      	b.n	bab02 <memset+0x4>
	...

000bab10 <srand>:
   bab10:	b538      	push	{r3, r4, r5, lr}
   bab12:	4b10      	ldr	r3, [pc, #64]	; (bab54 <srand+0x44>)
   bab14:	681d      	ldr	r5, [r3, #0]
   bab16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bab18:	4604      	mov	r4, r0
   bab1a:	b9b3      	cbnz	r3, bab4a <srand+0x3a>
   bab1c:	2018      	movs	r0, #24
   bab1e:	f7fb fed9 	bl	b68d4 <malloc>
   bab22:	4602      	mov	r2, r0
   bab24:	63a8      	str	r0, [r5, #56]	; 0x38
   bab26:	b920      	cbnz	r0, bab32 <srand+0x22>
   bab28:	4b0b      	ldr	r3, [pc, #44]	; (bab58 <srand+0x48>)
   bab2a:	480c      	ldr	r0, [pc, #48]	; (bab5c <srand+0x4c>)
   bab2c:	2142      	movs	r1, #66	; 0x42
   bab2e:	f7fb ff19 	bl	b6964 <__assert_func>
   bab32:	490b      	ldr	r1, [pc, #44]	; (bab60 <srand+0x50>)
   bab34:	4b0b      	ldr	r3, [pc, #44]	; (bab64 <srand+0x54>)
   bab36:	e9c0 1300 	strd	r1, r3, [r0]
   bab3a:	4b0b      	ldr	r3, [pc, #44]	; (bab68 <srand+0x58>)
   bab3c:	6083      	str	r3, [r0, #8]
   bab3e:	230b      	movs	r3, #11
   bab40:	8183      	strh	r3, [r0, #12]
   bab42:	2100      	movs	r1, #0
   bab44:	2001      	movs	r0, #1
   bab46:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bab4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bab4c:	2200      	movs	r2, #0
   bab4e:	611c      	str	r4, [r3, #16]
   bab50:	615a      	str	r2, [r3, #20]
   bab52:	bd38      	pop	{r3, r4, r5, pc}
   bab54:	2003d2f8 	.word	0x2003d2f8
   bab58:	000bd7dd 	.word	0x000bd7dd
   bab5c:	000bd7f4 	.word	0x000bd7f4
   bab60:	abcd330e 	.word	0xabcd330e
   bab64:	e66d1234 	.word	0xe66d1234
   bab68:	0005deec 	.word	0x0005deec

000bab6c <strcat>:
   bab6c:	b510      	push	{r4, lr}
   bab6e:	4602      	mov	r2, r0
   bab70:	7814      	ldrb	r4, [r2, #0]
   bab72:	4613      	mov	r3, r2
   bab74:	3201      	adds	r2, #1
   bab76:	2c00      	cmp	r4, #0
   bab78:	d1fa      	bne.n	bab70 <strcat+0x4>
   bab7a:	3b01      	subs	r3, #1
   bab7c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bab80:	f803 2f01 	strb.w	r2, [r3, #1]!
   bab84:	2a00      	cmp	r2, #0
   bab86:	d1f9      	bne.n	bab7c <strcat+0x10>
   bab88:	bd10      	pop	{r4, pc}

000bab8a <strcmp>:
   bab8a:	f810 2b01 	ldrb.w	r2, [r0], #1
   bab8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   bab92:	2a01      	cmp	r2, #1
   bab94:	bf28      	it	cs
   bab96:	429a      	cmpcs	r2, r3
   bab98:	d0f7      	beq.n	bab8a <strcmp>
   bab9a:	1ad0      	subs	r0, r2, r3
   bab9c:	4770      	bx	lr

000bab9e <strcpy>:
   bab9e:	4603      	mov	r3, r0
   baba0:	f811 2b01 	ldrb.w	r2, [r1], #1
   baba4:	f803 2b01 	strb.w	r2, [r3], #1
   baba8:	2a00      	cmp	r2, #0
   babaa:	d1f9      	bne.n	baba0 <strcpy+0x2>
   babac:	4770      	bx	lr
	...

000babb0 <strdup>:
   babb0:	4b02      	ldr	r3, [pc, #8]	; (babbc <strdup+0xc>)
   babb2:	4601      	mov	r1, r0
   babb4:	6818      	ldr	r0, [r3, #0]
   babb6:	f000 b803 	b.w	babc0 <_strdup_r>
   babba:	bf00      	nop
   babbc:	2003d2f8 	.word	0x2003d2f8

000babc0 <_strdup_r>:
   babc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   babc2:	4604      	mov	r4, r0
   babc4:	4608      	mov	r0, r1
   babc6:	460d      	mov	r5, r1
   babc8:	f000 f80f 	bl	babea <strlen>
   babcc:	1c42      	adds	r2, r0, #1
   babce:	4611      	mov	r1, r2
   babd0:	4620      	mov	r0, r4
   babd2:	9201      	str	r2, [sp, #4]
   babd4:	f7fb feb6 	bl	b6944 <_malloc_r>
   babd8:	4604      	mov	r4, r0
   babda:	b118      	cbz	r0, babe4 <_strdup_r+0x24>
   babdc:	9a01      	ldr	r2, [sp, #4]
   babde:	4629      	mov	r1, r5
   babe0:	f7ff ff65 	bl	baaae <memcpy>
   babe4:	4620      	mov	r0, r4
   babe6:	b003      	add	sp, #12
   babe8:	bd30      	pop	{r4, r5, pc}

000babea <strlen>:
   babea:	4603      	mov	r3, r0
   babec:	f813 2b01 	ldrb.w	r2, [r3], #1
   babf0:	2a00      	cmp	r2, #0
   babf2:	d1fb      	bne.n	babec <strlen+0x2>
   babf4:	1a18      	subs	r0, r3, r0
   babf6:	3801      	subs	r0, #1
   babf8:	4770      	bx	lr

000babfa <strncmp>:
   babfa:	b510      	push	{r4, lr}
   babfc:	b17a      	cbz	r2, bac1e <strncmp+0x24>
   babfe:	4603      	mov	r3, r0
   bac00:	3901      	subs	r1, #1
   bac02:	1884      	adds	r4, r0, r2
   bac04:	f813 0b01 	ldrb.w	r0, [r3], #1
   bac08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bac0c:	4290      	cmp	r0, r2
   bac0e:	d101      	bne.n	bac14 <strncmp+0x1a>
   bac10:	42a3      	cmp	r3, r4
   bac12:	d101      	bne.n	bac18 <strncmp+0x1e>
   bac14:	1a80      	subs	r0, r0, r2
   bac16:	bd10      	pop	{r4, pc}
   bac18:	2800      	cmp	r0, #0
   bac1a:	d1f3      	bne.n	bac04 <strncmp+0xa>
   bac1c:	e7fa      	b.n	bac14 <strncmp+0x1a>
   bac1e:	4610      	mov	r0, r2
   bac20:	e7f9      	b.n	bac16 <strncmp+0x1c>

000bac22 <strncpy>:
   bac22:	b510      	push	{r4, lr}
   bac24:	3901      	subs	r1, #1
   bac26:	4603      	mov	r3, r0
   bac28:	b132      	cbz	r2, bac38 <strncpy+0x16>
   bac2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bac2e:	f803 4b01 	strb.w	r4, [r3], #1
   bac32:	3a01      	subs	r2, #1
   bac34:	2c00      	cmp	r4, #0
   bac36:	d1f7      	bne.n	bac28 <strncpy+0x6>
   bac38:	441a      	add	r2, r3
   bac3a:	2100      	movs	r1, #0
   bac3c:	4293      	cmp	r3, r2
   bac3e:	d100      	bne.n	bac42 <strncpy+0x20>
   bac40:	bd10      	pop	{r4, pc}
   bac42:	f803 1b01 	strb.w	r1, [r3], #1
   bac46:	e7f9      	b.n	bac3c <strncpy+0x1a>

000bac48 <strnlen>:
   bac48:	b510      	push	{r4, lr}
   bac4a:	4602      	mov	r2, r0
   bac4c:	4401      	add	r1, r0
   bac4e:	428a      	cmp	r2, r1
   bac50:	4613      	mov	r3, r2
   bac52:	d003      	beq.n	bac5c <strnlen+0x14>
   bac54:	781c      	ldrb	r4, [r3, #0]
   bac56:	3201      	adds	r2, #1
   bac58:	2c00      	cmp	r4, #0
   bac5a:	d1f8      	bne.n	bac4e <strnlen+0x6>
   bac5c:	1a18      	subs	r0, r3, r0
   bac5e:	bd10      	pop	{r4, pc}

000bac60 <sulp>:
   bac60:	b570      	push	{r4, r5, r6, lr}
   bac62:	4604      	mov	r4, r0
   bac64:	460d      	mov	r5, r1
   bac66:	ec45 4b10 	vmov	d0, r4, r5
   bac6a:	4616      	mov	r6, r2
   bac6c:	f001 fe7c 	bl	bc968 <__ulp>
   bac70:	ec51 0b10 	vmov	r0, r1, d0
   bac74:	b17e      	cbz	r6, bac96 <sulp+0x36>
   bac76:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bac7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bac7e:	2b00      	cmp	r3, #0
   bac80:	dd09      	ble.n	bac96 <sulp+0x36>
   bac82:	051b      	lsls	r3, r3, #20
   bac84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bac88:	2400      	movs	r4, #0
   bac8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bac8e:	4622      	mov	r2, r4
   bac90:	462b      	mov	r3, r5
   bac92:	f7ff fbcf 	bl	ba434 <__aeabi_dmul>
   bac96:	bd70      	pop	{r4, r5, r6, pc}

000bac98 <_strtod_l>:
   bac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac9c:	ed2d 8b02 	vpush	{d8}
   baca0:	b09d      	sub	sp, #116	; 0x74
   baca2:	461f      	mov	r7, r3
   baca4:	2300      	movs	r3, #0
   baca6:	9318      	str	r3, [sp, #96]	; 0x60
   baca8:	4ba2      	ldr	r3, [pc, #648]	; (baf34 <_strtod_l+0x29c>)
   bacaa:	9213      	str	r2, [sp, #76]	; 0x4c
   bacac:	681b      	ldr	r3, [r3, #0]
   bacae:	9305      	str	r3, [sp, #20]
   bacb0:	4604      	mov	r4, r0
   bacb2:	4618      	mov	r0, r3
   bacb4:	4688      	mov	r8, r1
   bacb6:	f7ff ff98 	bl	babea <strlen>
   bacba:	f04f 0a00 	mov.w	sl, #0
   bacbe:	4605      	mov	r5, r0
   bacc0:	f04f 0b00 	mov.w	fp, #0
   bacc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bacc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bacca:	781a      	ldrb	r2, [r3, #0]
   baccc:	2a2b      	cmp	r2, #43	; 0x2b
   bacce:	d04e      	beq.n	bad6e <_strtod_l+0xd6>
   bacd0:	d83b      	bhi.n	bad4a <_strtod_l+0xb2>
   bacd2:	2a0d      	cmp	r2, #13
   bacd4:	d834      	bhi.n	bad40 <_strtod_l+0xa8>
   bacd6:	2a08      	cmp	r2, #8
   bacd8:	d834      	bhi.n	bad44 <_strtod_l+0xac>
   bacda:	2a00      	cmp	r2, #0
   bacdc:	d03e      	beq.n	bad5c <_strtod_l+0xc4>
   bacde:	2300      	movs	r3, #0
   bace0:	930a      	str	r3, [sp, #40]	; 0x28
   bace2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bace4:	7833      	ldrb	r3, [r6, #0]
   bace6:	2b30      	cmp	r3, #48	; 0x30
   bace8:	f040 80b0 	bne.w	bae4c <_strtod_l+0x1b4>
   bacec:	7873      	ldrb	r3, [r6, #1]
   bacee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bacf2:	2b58      	cmp	r3, #88	; 0x58
   bacf4:	d168      	bne.n	badc8 <_strtod_l+0x130>
   bacf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bacf8:	9301      	str	r3, [sp, #4]
   bacfa:	ab18      	add	r3, sp, #96	; 0x60
   bacfc:	9702      	str	r7, [sp, #8]
   bacfe:	9300      	str	r3, [sp, #0]
   bad00:	4a8d      	ldr	r2, [pc, #564]	; (baf38 <_strtod_l+0x2a0>)
   bad02:	ab19      	add	r3, sp, #100	; 0x64
   bad04:	a917      	add	r1, sp, #92	; 0x5c
   bad06:	4620      	mov	r0, r4
   bad08:	f000 ff9e 	bl	bbc48 <__gethex>
   bad0c:	f010 0707 	ands.w	r7, r0, #7
   bad10:	4605      	mov	r5, r0
   bad12:	d005      	beq.n	bad20 <_strtod_l+0x88>
   bad14:	2f06      	cmp	r7, #6
   bad16:	d12c      	bne.n	bad72 <_strtod_l+0xda>
   bad18:	3601      	adds	r6, #1
   bad1a:	2300      	movs	r3, #0
   bad1c:	9617      	str	r6, [sp, #92]	; 0x5c
   bad1e:	930a      	str	r3, [sp, #40]	; 0x28
   bad20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bad22:	2b00      	cmp	r3, #0
   bad24:	f040 8590 	bne.w	bb848 <_strtod_l+0xbb0>
   bad28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bad2a:	b1eb      	cbz	r3, bad68 <_strtod_l+0xd0>
   bad2c:	4652      	mov	r2, sl
   bad2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bad32:	ec43 2b10 	vmov	d0, r2, r3
   bad36:	b01d      	add	sp, #116	; 0x74
   bad38:	ecbd 8b02 	vpop	{d8}
   bad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bad40:	2a20      	cmp	r2, #32
   bad42:	d1cc      	bne.n	bacde <_strtod_l+0x46>
   bad44:	3301      	adds	r3, #1
   bad46:	9317      	str	r3, [sp, #92]	; 0x5c
   bad48:	e7be      	b.n	bacc8 <_strtod_l+0x30>
   bad4a:	2a2d      	cmp	r2, #45	; 0x2d
   bad4c:	d1c7      	bne.n	bacde <_strtod_l+0x46>
   bad4e:	2201      	movs	r2, #1
   bad50:	920a      	str	r2, [sp, #40]	; 0x28
   bad52:	1c5a      	adds	r2, r3, #1
   bad54:	9217      	str	r2, [sp, #92]	; 0x5c
   bad56:	785b      	ldrb	r3, [r3, #1]
   bad58:	2b00      	cmp	r3, #0
   bad5a:	d1c2      	bne.n	bace2 <_strtod_l+0x4a>
   bad5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bad5e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bad62:	2b00      	cmp	r3, #0
   bad64:	f040 856e 	bne.w	bb844 <_strtod_l+0xbac>
   bad68:	4652      	mov	r2, sl
   bad6a:	465b      	mov	r3, fp
   bad6c:	e7e1      	b.n	bad32 <_strtod_l+0x9a>
   bad6e:	2200      	movs	r2, #0
   bad70:	e7ee      	b.n	bad50 <_strtod_l+0xb8>
   bad72:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bad74:	b13a      	cbz	r2, bad86 <_strtod_l+0xee>
   bad76:	2135      	movs	r1, #53	; 0x35
   bad78:	a81a      	add	r0, sp, #104	; 0x68
   bad7a:	f001 ff00 	bl	bcb7e <__copybits>
   bad7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bad80:	4620      	mov	r0, r4
   bad82:	f001 fabf 	bl	bc304 <_Bfree>
   bad86:	3f01      	subs	r7, #1
   bad88:	2f04      	cmp	r7, #4
   bad8a:	d806      	bhi.n	bad9a <_strtod_l+0x102>
   bad8c:	e8df f007 	tbb	[pc, r7]
   bad90:	1714030a 	.word	0x1714030a
   bad94:	0a          	.byte	0x0a
   bad95:	00          	.byte	0x00
   bad96:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bad9a:	0728      	lsls	r0, r5, #28
   bad9c:	d5c0      	bpl.n	bad20 <_strtod_l+0x88>
   bad9e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bada2:	e7bd      	b.n	bad20 <_strtod_l+0x88>
   bada4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bada8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   badaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   badae:	f202 4233 	addw	r2, r2, #1075	; 0x433
   badb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   badb6:	e7f0      	b.n	bad9a <_strtod_l+0x102>
   badb8:	f8df b180 	ldr.w	fp, [pc, #384]	; baf3c <_strtod_l+0x2a4>
   badbc:	e7ed      	b.n	bad9a <_strtod_l+0x102>
   badbe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   badc2:	f04f 3aff 	mov.w	sl, #4294967295
   badc6:	e7e8      	b.n	bad9a <_strtod_l+0x102>
   badc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   badca:	1c5a      	adds	r2, r3, #1
   badcc:	9217      	str	r2, [sp, #92]	; 0x5c
   badce:	785b      	ldrb	r3, [r3, #1]
   badd0:	2b30      	cmp	r3, #48	; 0x30
   badd2:	d0f9      	beq.n	badc8 <_strtod_l+0x130>
   badd4:	2b00      	cmp	r3, #0
   badd6:	d0a3      	beq.n	bad20 <_strtod_l+0x88>
   badd8:	2301      	movs	r3, #1
   badda:	f04f 0900 	mov.w	r9, #0
   badde:	9304      	str	r3, [sp, #16]
   bade0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bade2:	9308      	str	r3, [sp, #32]
   bade4:	f8cd 901c 	str.w	r9, [sp, #28]
   bade8:	464f      	mov	r7, r9
   badea:	220a      	movs	r2, #10
   badec:	9817      	ldr	r0, [sp, #92]	; 0x5c
   badee:	7806      	ldrb	r6, [r0, #0]
   badf0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   badf4:	b2d9      	uxtb	r1, r3
   badf6:	2909      	cmp	r1, #9
   badf8:	d92a      	bls.n	bae50 <_strtod_l+0x1b8>
   badfa:	9905      	ldr	r1, [sp, #20]
   badfc:	462a      	mov	r2, r5
   badfe:	f7ff fefc 	bl	babfa <strncmp>
   bae02:	b398      	cbz	r0, bae6c <_strtod_l+0x1d4>
   bae04:	2000      	movs	r0, #0
   bae06:	4632      	mov	r2, r6
   bae08:	463d      	mov	r5, r7
   bae0a:	9005      	str	r0, [sp, #20]
   bae0c:	4603      	mov	r3, r0
   bae0e:	2a65      	cmp	r2, #101	; 0x65
   bae10:	d001      	beq.n	bae16 <_strtod_l+0x17e>
   bae12:	2a45      	cmp	r2, #69	; 0x45
   bae14:	d118      	bne.n	bae48 <_strtod_l+0x1b0>
   bae16:	b91d      	cbnz	r5, bae20 <_strtod_l+0x188>
   bae18:	9a04      	ldr	r2, [sp, #16]
   bae1a:	4302      	orrs	r2, r0
   bae1c:	d09e      	beq.n	bad5c <_strtod_l+0xc4>
   bae1e:	2500      	movs	r5, #0
   bae20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bae24:	f108 0201 	add.w	r2, r8, #1
   bae28:	9217      	str	r2, [sp, #92]	; 0x5c
   bae2a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bae2e:	2a2b      	cmp	r2, #43	; 0x2b
   bae30:	d075      	beq.n	baf1e <_strtod_l+0x286>
   bae32:	2a2d      	cmp	r2, #45	; 0x2d
   bae34:	d07b      	beq.n	baf2e <_strtod_l+0x296>
   bae36:	f04f 0c00 	mov.w	ip, #0
   bae3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bae3e:	2909      	cmp	r1, #9
   bae40:	f240 8082 	bls.w	baf48 <_strtod_l+0x2b0>
   bae44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bae48:	2600      	movs	r6, #0
   bae4a:	e09d      	b.n	baf88 <_strtod_l+0x2f0>
   bae4c:	2300      	movs	r3, #0
   bae4e:	e7c4      	b.n	badda <_strtod_l+0x142>
   bae50:	2f08      	cmp	r7, #8
   bae52:	bfd8      	it	le
   bae54:	9907      	ldrle	r1, [sp, #28]
   bae56:	f100 0001 	add.w	r0, r0, #1
   bae5a:	bfda      	itte	le
   bae5c:	fb02 3301 	mlale	r3, r2, r1, r3
   bae60:	9307      	strle	r3, [sp, #28]
   bae62:	fb02 3909 	mlagt	r9, r2, r9, r3
   bae66:	3701      	adds	r7, #1
   bae68:	9017      	str	r0, [sp, #92]	; 0x5c
   bae6a:	e7bf      	b.n	badec <_strtod_l+0x154>
   bae6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae6e:	195a      	adds	r2, r3, r5
   bae70:	9217      	str	r2, [sp, #92]	; 0x5c
   bae72:	5d5a      	ldrb	r2, [r3, r5]
   bae74:	2f00      	cmp	r7, #0
   bae76:	d037      	beq.n	baee8 <_strtod_l+0x250>
   bae78:	9005      	str	r0, [sp, #20]
   bae7a:	463d      	mov	r5, r7
   bae7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bae80:	2b09      	cmp	r3, #9
   bae82:	d912      	bls.n	baeaa <_strtod_l+0x212>
   bae84:	2301      	movs	r3, #1
   bae86:	e7c2      	b.n	bae0e <_strtod_l+0x176>
   bae88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae8a:	1c5a      	adds	r2, r3, #1
   bae8c:	9217      	str	r2, [sp, #92]	; 0x5c
   bae8e:	785a      	ldrb	r2, [r3, #1]
   bae90:	3001      	adds	r0, #1
   bae92:	2a30      	cmp	r2, #48	; 0x30
   bae94:	d0f8      	beq.n	bae88 <_strtod_l+0x1f0>
   bae96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bae9a:	2b08      	cmp	r3, #8
   bae9c:	f200 84d9 	bhi.w	bb852 <_strtod_l+0xbba>
   baea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baea2:	9005      	str	r0, [sp, #20]
   baea4:	2000      	movs	r0, #0
   baea6:	9308      	str	r3, [sp, #32]
   baea8:	4605      	mov	r5, r0
   baeaa:	3a30      	subs	r2, #48	; 0x30
   baeac:	f100 0301 	add.w	r3, r0, #1
   baeb0:	d014      	beq.n	baedc <_strtod_l+0x244>
   baeb2:	9905      	ldr	r1, [sp, #20]
   baeb4:	4419      	add	r1, r3
   baeb6:	9105      	str	r1, [sp, #20]
   baeb8:	462b      	mov	r3, r5
   baeba:	eb00 0e05 	add.w	lr, r0, r5
   baebe:	210a      	movs	r1, #10
   baec0:	4573      	cmp	r3, lr
   baec2:	d113      	bne.n	baeec <_strtod_l+0x254>
   baec4:	182b      	adds	r3, r5, r0
   baec6:	2b08      	cmp	r3, #8
   baec8:	f105 0501 	add.w	r5, r5, #1
   baecc:	4405      	add	r5, r0
   baece:	dc1c      	bgt.n	baf0a <_strtod_l+0x272>
   baed0:	9907      	ldr	r1, [sp, #28]
   baed2:	230a      	movs	r3, #10
   baed4:	fb03 2301 	mla	r3, r3, r1, r2
   baed8:	9307      	str	r3, [sp, #28]
   baeda:	2300      	movs	r3, #0
   baedc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   baede:	1c51      	adds	r1, r2, #1
   baee0:	9117      	str	r1, [sp, #92]	; 0x5c
   baee2:	7852      	ldrb	r2, [r2, #1]
   baee4:	4618      	mov	r0, r3
   baee6:	e7c9      	b.n	bae7c <_strtod_l+0x1e4>
   baee8:	4638      	mov	r0, r7
   baeea:	e7d2      	b.n	bae92 <_strtod_l+0x1fa>
   baeec:	2b08      	cmp	r3, #8
   baeee:	dc04      	bgt.n	baefa <_strtod_l+0x262>
   baef0:	9e07      	ldr	r6, [sp, #28]
   baef2:	434e      	muls	r6, r1
   baef4:	9607      	str	r6, [sp, #28]
   baef6:	3301      	adds	r3, #1
   baef8:	e7e2      	b.n	baec0 <_strtod_l+0x228>
   baefa:	f103 0c01 	add.w	ip, r3, #1
   baefe:	f1bc 0f10 	cmp.w	ip, #16
   baf02:	bfd8      	it	le
   baf04:	fb01 f909 	mulle.w	r9, r1, r9
   baf08:	e7f5      	b.n	baef6 <_strtod_l+0x25e>
   baf0a:	2d10      	cmp	r5, #16
   baf0c:	bfdc      	itt	le
   baf0e:	230a      	movle	r3, #10
   baf10:	fb03 2909 	mlale	r9, r3, r9, r2
   baf14:	e7e1      	b.n	baeda <_strtod_l+0x242>
   baf16:	2300      	movs	r3, #0
   baf18:	9305      	str	r3, [sp, #20]
   baf1a:	2301      	movs	r3, #1
   baf1c:	e77c      	b.n	bae18 <_strtod_l+0x180>
   baf1e:	f04f 0c00 	mov.w	ip, #0
   baf22:	f108 0202 	add.w	r2, r8, #2
   baf26:	9217      	str	r2, [sp, #92]	; 0x5c
   baf28:	f898 2002 	ldrb.w	r2, [r8, #2]
   baf2c:	e785      	b.n	bae3a <_strtod_l+0x1a2>
   baf2e:	f04f 0c01 	mov.w	ip, #1
   baf32:	e7f6      	b.n	baf22 <_strtod_l+0x28a>
   baf34:	000bdae8 	.word	0x000bdae8
   baf38:	000bd880 	.word	0x000bd880
   baf3c:	7ff00000 	.word	0x7ff00000
   baf40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   baf42:	1c51      	adds	r1, r2, #1
   baf44:	9117      	str	r1, [sp, #92]	; 0x5c
   baf46:	7852      	ldrb	r2, [r2, #1]
   baf48:	2a30      	cmp	r2, #48	; 0x30
   baf4a:	d0f9      	beq.n	baf40 <_strtod_l+0x2a8>
   baf4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   baf50:	2908      	cmp	r1, #8
   baf52:	f63f af79 	bhi.w	bae48 <_strtod_l+0x1b0>
   baf56:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   baf5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   baf5c:	9206      	str	r2, [sp, #24]
   baf5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   baf60:	1c51      	adds	r1, r2, #1
   baf62:	9117      	str	r1, [sp, #92]	; 0x5c
   baf64:	7852      	ldrb	r2, [r2, #1]
   baf66:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   baf6a:	2e09      	cmp	r6, #9
   baf6c:	d937      	bls.n	bafde <_strtod_l+0x346>
   baf6e:	9e06      	ldr	r6, [sp, #24]
   baf70:	1b89      	subs	r1, r1, r6
   baf72:	2908      	cmp	r1, #8
   baf74:	f644 661f 	movw	r6, #19999	; 0x4e1f
   baf78:	dc02      	bgt.n	baf80 <_strtod_l+0x2e8>
   baf7a:	4576      	cmp	r6, lr
   baf7c:	bfa8      	it	ge
   baf7e:	4676      	movge	r6, lr
   baf80:	f1bc 0f00 	cmp.w	ip, #0
   baf84:	d000      	beq.n	baf88 <_strtod_l+0x2f0>
   baf86:	4276      	negs	r6, r6
   baf88:	2d00      	cmp	r5, #0
   baf8a:	d14d      	bne.n	bb028 <_strtod_l+0x390>
   baf8c:	9904      	ldr	r1, [sp, #16]
   baf8e:	4301      	orrs	r1, r0
   baf90:	f47f aec6 	bne.w	bad20 <_strtod_l+0x88>
   baf94:	2b00      	cmp	r3, #0
   baf96:	f47f aee1 	bne.w	bad5c <_strtod_l+0xc4>
   baf9a:	2a69      	cmp	r2, #105	; 0x69
   baf9c:	d027      	beq.n	bafee <_strtod_l+0x356>
   baf9e:	dc24      	bgt.n	bafea <_strtod_l+0x352>
   bafa0:	2a49      	cmp	r2, #73	; 0x49
   bafa2:	d024      	beq.n	bafee <_strtod_l+0x356>
   bafa4:	2a4e      	cmp	r2, #78	; 0x4e
   bafa6:	f47f aed9 	bne.w	bad5c <_strtod_l+0xc4>
   bafaa:	499f      	ldr	r1, [pc, #636]	; (bb228 <_strtod_l+0x590>)
   bafac:	a817      	add	r0, sp, #92	; 0x5c
   bafae:	f001 f8a3 	bl	bc0f8 <__match>
   bafb2:	2800      	cmp	r0, #0
   bafb4:	f43f aed2 	beq.w	bad5c <_strtod_l+0xc4>
   bafb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bafba:	781b      	ldrb	r3, [r3, #0]
   bafbc:	2b28      	cmp	r3, #40	; 0x28
   bafbe:	d12d      	bne.n	bb01c <_strtod_l+0x384>
   bafc0:	499a      	ldr	r1, [pc, #616]	; (bb22c <_strtod_l+0x594>)
   bafc2:	aa1a      	add	r2, sp, #104	; 0x68
   bafc4:	a817      	add	r0, sp, #92	; 0x5c
   bafc6:	f001 f8ab 	bl	bc120 <__hexnan>
   bafca:	2805      	cmp	r0, #5
   bafcc:	d126      	bne.n	bb01c <_strtod_l+0x384>
   bafce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bafd0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bafd4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bafd8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bafdc:	e6a0      	b.n	bad20 <_strtod_l+0x88>
   bafde:	210a      	movs	r1, #10
   bafe0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bafe4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bafe8:	e7b9      	b.n	baf5e <_strtod_l+0x2c6>
   bafea:	2a6e      	cmp	r2, #110	; 0x6e
   bafec:	e7db      	b.n	bafa6 <_strtod_l+0x30e>
   bafee:	4990      	ldr	r1, [pc, #576]	; (bb230 <_strtod_l+0x598>)
   baff0:	a817      	add	r0, sp, #92	; 0x5c
   baff2:	f001 f881 	bl	bc0f8 <__match>
   baff6:	2800      	cmp	r0, #0
   baff8:	f43f aeb0 	beq.w	bad5c <_strtod_l+0xc4>
   baffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baffe:	498d      	ldr	r1, [pc, #564]	; (bb234 <_strtod_l+0x59c>)
   bb000:	3b01      	subs	r3, #1
   bb002:	a817      	add	r0, sp, #92	; 0x5c
   bb004:	9317      	str	r3, [sp, #92]	; 0x5c
   bb006:	f001 f877 	bl	bc0f8 <__match>
   bb00a:	b910      	cbnz	r0, bb012 <_strtod_l+0x37a>
   bb00c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb00e:	3301      	adds	r3, #1
   bb010:	9317      	str	r3, [sp, #92]	; 0x5c
   bb012:	f8df b230 	ldr.w	fp, [pc, #560]	; bb244 <_strtod_l+0x5ac>
   bb016:	f04f 0a00 	mov.w	sl, #0
   bb01a:	e681      	b.n	bad20 <_strtod_l+0x88>
   bb01c:	4886      	ldr	r0, [pc, #536]	; (bb238 <_strtod_l+0x5a0>)
   bb01e:	f001 fe13 	bl	bcc48 <nan>
   bb022:	ec5b ab10 	vmov	sl, fp, d0
   bb026:	e67b      	b.n	bad20 <_strtod_l+0x88>
   bb028:	9b05      	ldr	r3, [sp, #20]
   bb02a:	9807      	ldr	r0, [sp, #28]
   bb02c:	1af3      	subs	r3, r6, r3
   bb02e:	2f00      	cmp	r7, #0
   bb030:	bf08      	it	eq
   bb032:	462f      	moveq	r7, r5
   bb034:	2d10      	cmp	r5, #16
   bb036:	9306      	str	r3, [sp, #24]
   bb038:	46a8      	mov	r8, r5
   bb03a:	bfa8      	it	ge
   bb03c:	f04f 0810 	movge.w	r8, #16
   bb040:	f7ff f97e 	bl	ba340 <__aeabi_ui2d>
   bb044:	2d09      	cmp	r5, #9
   bb046:	4682      	mov	sl, r0
   bb048:	468b      	mov	fp, r1
   bb04a:	dd13      	ble.n	bb074 <_strtod_l+0x3dc>
   bb04c:	4b7b      	ldr	r3, [pc, #492]	; (bb23c <_strtod_l+0x5a4>)
   bb04e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb052:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb056:	f7ff f9ed 	bl	ba434 <__aeabi_dmul>
   bb05a:	4682      	mov	sl, r0
   bb05c:	4648      	mov	r0, r9
   bb05e:	468b      	mov	fp, r1
   bb060:	f7ff f96e 	bl	ba340 <__aeabi_ui2d>
   bb064:	4602      	mov	r2, r0
   bb066:	460b      	mov	r3, r1
   bb068:	4650      	mov	r0, sl
   bb06a:	4659      	mov	r1, fp
   bb06c:	f7ff f82c 	bl	ba0c8 <__adddf3>
   bb070:	4682      	mov	sl, r0
   bb072:	468b      	mov	fp, r1
   bb074:	2d0f      	cmp	r5, #15
   bb076:	dc38      	bgt.n	bb0ea <_strtod_l+0x452>
   bb078:	9b06      	ldr	r3, [sp, #24]
   bb07a:	2b00      	cmp	r3, #0
   bb07c:	f43f ae50 	beq.w	bad20 <_strtod_l+0x88>
   bb080:	dd24      	ble.n	bb0cc <_strtod_l+0x434>
   bb082:	2b16      	cmp	r3, #22
   bb084:	dc0b      	bgt.n	bb09e <_strtod_l+0x406>
   bb086:	496d      	ldr	r1, [pc, #436]	; (bb23c <_strtod_l+0x5a4>)
   bb088:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb08c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb090:	4652      	mov	r2, sl
   bb092:	465b      	mov	r3, fp
   bb094:	f7ff f9ce 	bl	ba434 <__aeabi_dmul>
   bb098:	4682      	mov	sl, r0
   bb09a:	468b      	mov	fp, r1
   bb09c:	e640      	b.n	bad20 <_strtod_l+0x88>
   bb09e:	9a06      	ldr	r2, [sp, #24]
   bb0a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb0a4:	4293      	cmp	r3, r2
   bb0a6:	db20      	blt.n	bb0ea <_strtod_l+0x452>
   bb0a8:	4c64      	ldr	r4, [pc, #400]	; (bb23c <_strtod_l+0x5a4>)
   bb0aa:	f1c5 050f 	rsb	r5, r5, #15
   bb0ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb0b2:	4652      	mov	r2, sl
   bb0b4:	465b      	mov	r3, fp
   bb0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb0ba:	f7ff f9bb 	bl	ba434 <__aeabi_dmul>
   bb0be:	9b06      	ldr	r3, [sp, #24]
   bb0c0:	1b5d      	subs	r5, r3, r5
   bb0c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb0c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb0ca:	e7e3      	b.n	bb094 <_strtod_l+0x3fc>
   bb0cc:	9b06      	ldr	r3, [sp, #24]
   bb0ce:	3316      	adds	r3, #22
   bb0d0:	db0b      	blt.n	bb0ea <_strtod_l+0x452>
   bb0d2:	9b05      	ldr	r3, [sp, #20]
   bb0d4:	1b9e      	subs	r6, r3, r6
   bb0d6:	4b59      	ldr	r3, [pc, #356]	; (bb23c <_strtod_l+0x5a4>)
   bb0d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb0dc:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb0e0:	4650      	mov	r0, sl
   bb0e2:	4659      	mov	r1, fp
   bb0e4:	f7ff fad0 	bl	ba688 <__aeabi_ddiv>
   bb0e8:	e7d6      	b.n	bb098 <_strtod_l+0x400>
   bb0ea:	9b06      	ldr	r3, [sp, #24]
   bb0ec:	eba5 0808 	sub.w	r8, r5, r8
   bb0f0:	4498      	add	r8, r3
   bb0f2:	f1b8 0f00 	cmp.w	r8, #0
   bb0f6:	dd74      	ble.n	bb1e2 <_strtod_l+0x54a>
   bb0f8:	f018 030f 	ands.w	r3, r8, #15
   bb0fc:	d00a      	beq.n	bb114 <_strtod_l+0x47c>
   bb0fe:	494f      	ldr	r1, [pc, #316]	; (bb23c <_strtod_l+0x5a4>)
   bb100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb104:	4652      	mov	r2, sl
   bb106:	465b      	mov	r3, fp
   bb108:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb10c:	f7ff f992 	bl	ba434 <__aeabi_dmul>
   bb110:	4682      	mov	sl, r0
   bb112:	468b      	mov	fp, r1
   bb114:	f038 080f 	bics.w	r8, r8, #15
   bb118:	d04f      	beq.n	bb1ba <_strtod_l+0x522>
   bb11a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb11e:	dd22      	ble.n	bb166 <_strtod_l+0x4ce>
   bb120:	2500      	movs	r5, #0
   bb122:	462e      	mov	r6, r5
   bb124:	9507      	str	r5, [sp, #28]
   bb126:	9505      	str	r5, [sp, #20]
   bb128:	2322      	movs	r3, #34	; 0x22
   bb12a:	f8df b118 	ldr.w	fp, [pc, #280]	; bb244 <_strtod_l+0x5ac>
   bb12e:	6023      	str	r3, [r4, #0]
   bb130:	f04f 0a00 	mov.w	sl, #0
   bb134:	9b07      	ldr	r3, [sp, #28]
   bb136:	2b00      	cmp	r3, #0
   bb138:	f43f adf2 	beq.w	bad20 <_strtod_l+0x88>
   bb13c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb13e:	4620      	mov	r0, r4
   bb140:	f001 f8e0 	bl	bc304 <_Bfree>
   bb144:	9905      	ldr	r1, [sp, #20]
   bb146:	4620      	mov	r0, r4
   bb148:	f001 f8dc 	bl	bc304 <_Bfree>
   bb14c:	4631      	mov	r1, r6
   bb14e:	4620      	mov	r0, r4
   bb150:	f001 f8d8 	bl	bc304 <_Bfree>
   bb154:	9907      	ldr	r1, [sp, #28]
   bb156:	4620      	mov	r0, r4
   bb158:	f001 f8d4 	bl	bc304 <_Bfree>
   bb15c:	4629      	mov	r1, r5
   bb15e:	4620      	mov	r0, r4
   bb160:	f001 f8d0 	bl	bc304 <_Bfree>
   bb164:	e5dc      	b.n	bad20 <_strtod_l+0x88>
   bb166:	4b36      	ldr	r3, [pc, #216]	; (bb240 <_strtod_l+0x5a8>)
   bb168:	9304      	str	r3, [sp, #16]
   bb16a:	2300      	movs	r3, #0
   bb16c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb170:	4650      	mov	r0, sl
   bb172:	4659      	mov	r1, fp
   bb174:	4699      	mov	r9, r3
   bb176:	f1b8 0f01 	cmp.w	r8, #1
   bb17a:	dc21      	bgt.n	bb1c0 <_strtod_l+0x528>
   bb17c:	b10b      	cbz	r3, bb182 <_strtod_l+0x4ea>
   bb17e:	4682      	mov	sl, r0
   bb180:	468b      	mov	fp, r1
   bb182:	4b2f      	ldr	r3, [pc, #188]	; (bb240 <_strtod_l+0x5a8>)
   bb184:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb188:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb18c:	4652      	mov	r2, sl
   bb18e:	465b      	mov	r3, fp
   bb190:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb194:	f7ff f94e 	bl	ba434 <__aeabi_dmul>
   bb198:	4b2a      	ldr	r3, [pc, #168]	; (bb244 <_strtod_l+0x5ac>)
   bb19a:	460a      	mov	r2, r1
   bb19c:	400b      	ands	r3, r1
   bb19e:	492a      	ldr	r1, [pc, #168]	; (bb248 <_strtod_l+0x5b0>)
   bb1a0:	428b      	cmp	r3, r1
   bb1a2:	4682      	mov	sl, r0
   bb1a4:	d8bc      	bhi.n	bb120 <_strtod_l+0x488>
   bb1a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb1aa:	428b      	cmp	r3, r1
   bb1ac:	bf86      	itte	hi
   bb1ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb24c <_strtod_l+0x5b4>
   bb1b2:	f04f 3aff 	movhi.w	sl, #4294967295
   bb1b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb1ba:	2300      	movs	r3, #0
   bb1bc:	9304      	str	r3, [sp, #16]
   bb1be:	e084      	b.n	bb2ca <_strtod_l+0x632>
   bb1c0:	f018 0f01 	tst.w	r8, #1
   bb1c4:	d005      	beq.n	bb1d2 <_strtod_l+0x53a>
   bb1c6:	9b04      	ldr	r3, [sp, #16]
   bb1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb1cc:	f7ff f932 	bl	ba434 <__aeabi_dmul>
   bb1d0:	2301      	movs	r3, #1
   bb1d2:	9a04      	ldr	r2, [sp, #16]
   bb1d4:	3208      	adds	r2, #8
   bb1d6:	f109 0901 	add.w	r9, r9, #1
   bb1da:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb1de:	9204      	str	r2, [sp, #16]
   bb1e0:	e7c9      	b.n	bb176 <_strtod_l+0x4de>
   bb1e2:	d0ea      	beq.n	bb1ba <_strtod_l+0x522>
   bb1e4:	f1c8 0800 	rsb	r8, r8, #0
   bb1e8:	f018 020f 	ands.w	r2, r8, #15
   bb1ec:	d00a      	beq.n	bb204 <_strtod_l+0x56c>
   bb1ee:	4b13      	ldr	r3, [pc, #76]	; (bb23c <_strtod_l+0x5a4>)
   bb1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb1f4:	4650      	mov	r0, sl
   bb1f6:	4659      	mov	r1, fp
   bb1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb1fc:	f7ff fa44 	bl	ba688 <__aeabi_ddiv>
   bb200:	4682      	mov	sl, r0
   bb202:	468b      	mov	fp, r1
   bb204:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb208:	d0d7      	beq.n	bb1ba <_strtod_l+0x522>
   bb20a:	f1b8 0f1f 	cmp.w	r8, #31
   bb20e:	dd1f      	ble.n	bb250 <_strtod_l+0x5b8>
   bb210:	2500      	movs	r5, #0
   bb212:	462e      	mov	r6, r5
   bb214:	9507      	str	r5, [sp, #28]
   bb216:	9505      	str	r5, [sp, #20]
   bb218:	2322      	movs	r3, #34	; 0x22
   bb21a:	f04f 0a00 	mov.w	sl, #0
   bb21e:	f04f 0b00 	mov.w	fp, #0
   bb222:	6023      	str	r3, [r4, #0]
   bb224:	e786      	b.n	bb134 <_strtod_l+0x49c>
   bb226:	bf00      	nop
   bb228:	000bd87a 	.word	0x000bd87a
   bb22c:	000bd894 	.word	0x000bd894
   bb230:	000bd871 	.word	0x000bd871
   bb234:	000bd874 	.word	0x000bd874
   bb238:	000bcd64 	.word	0x000bcd64
   bb23c:	000bdba8 	.word	0x000bdba8
   bb240:	000bdb80 	.word	0x000bdb80
   bb244:	7ff00000 	.word	0x7ff00000
   bb248:	7ca00000 	.word	0x7ca00000
   bb24c:	7fefffff 	.word	0x7fefffff
   bb250:	f018 0310 	ands.w	r3, r8, #16
   bb254:	bf18      	it	ne
   bb256:	236a      	movne	r3, #106	; 0x6a
   bb258:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bb608 <_strtod_l+0x970>
   bb25c:	9304      	str	r3, [sp, #16]
   bb25e:	4650      	mov	r0, sl
   bb260:	4659      	mov	r1, fp
   bb262:	2300      	movs	r3, #0
   bb264:	f018 0f01 	tst.w	r8, #1
   bb268:	d004      	beq.n	bb274 <_strtod_l+0x5dc>
   bb26a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb26e:	f7ff f8e1 	bl	ba434 <__aeabi_dmul>
   bb272:	2301      	movs	r3, #1
   bb274:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb278:	f109 0908 	add.w	r9, r9, #8
   bb27c:	d1f2      	bne.n	bb264 <_strtod_l+0x5cc>
   bb27e:	b10b      	cbz	r3, bb284 <_strtod_l+0x5ec>
   bb280:	4682      	mov	sl, r0
   bb282:	468b      	mov	fp, r1
   bb284:	9b04      	ldr	r3, [sp, #16]
   bb286:	b1c3      	cbz	r3, bb2ba <_strtod_l+0x622>
   bb288:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb28c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb290:	2b00      	cmp	r3, #0
   bb292:	4659      	mov	r1, fp
   bb294:	dd11      	ble.n	bb2ba <_strtod_l+0x622>
   bb296:	2b1f      	cmp	r3, #31
   bb298:	f340 8124 	ble.w	bb4e4 <_strtod_l+0x84c>
   bb29c:	2b34      	cmp	r3, #52	; 0x34
   bb29e:	bfde      	ittt	le
   bb2a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb2a4:	f04f 33ff 	movle.w	r3, #4294967295
   bb2a8:	fa03 f202 	lslle.w	r2, r3, r2
   bb2ac:	f04f 0a00 	mov.w	sl, #0
   bb2b0:	bfcc      	ite	gt
   bb2b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb2b6:	ea02 0b01 	andle.w	fp, r2, r1
   bb2ba:	2200      	movs	r2, #0
   bb2bc:	2300      	movs	r3, #0
   bb2be:	4650      	mov	r0, sl
   bb2c0:	4659      	mov	r1, fp
   bb2c2:	f7ff fb1f 	bl	ba904 <__aeabi_dcmpeq>
   bb2c6:	2800      	cmp	r0, #0
   bb2c8:	d1a2      	bne.n	bb210 <_strtod_l+0x578>
   bb2ca:	9b07      	ldr	r3, [sp, #28]
   bb2cc:	9300      	str	r3, [sp, #0]
   bb2ce:	9908      	ldr	r1, [sp, #32]
   bb2d0:	462b      	mov	r3, r5
   bb2d2:	463a      	mov	r2, r7
   bb2d4:	4620      	mov	r0, r4
   bb2d6:	f001 f87d 	bl	bc3d4 <__s2b>
   bb2da:	9007      	str	r0, [sp, #28]
   bb2dc:	2800      	cmp	r0, #0
   bb2de:	f43f af1f 	beq.w	bb120 <_strtod_l+0x488>
   bb2e2:	9b05      	ldr	r3, [sp, #20]
   bb2e4:	1b9e      	subs	r6, r3, r6
   bb2e6:	9b06      	ldr	r3, [sp, #24]
   bb2e8:	2b00      	cmp	r3, #0
   bb2ea:	bfb4      	ite	lt
   bb2ec:	4633      	movlt	r3, r6
   bb2ee:	2300      	movge	r3, #0
   bb2f0:	930c      	str	r3, [sp, #48]	; 0x30
   bb2f2:	9b06      	ldr	r3, [sp, #24]
   bb2f4:	2500      	movs	r5, #0
   bb2f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb2fa:	9312      	str	r3, [sp, #72]	; 0x48
   bb2fc:	462e      	mov	r6, r5
   bb2fe:	9b07      	ldr	r3, [sp, #28]
   bb300:	4620      	mov	r0, r4
   bb302:	6859      	ldr	r1, [r3, #4]
   bb304:	f000 ffbe 	bl	bc284 <_Balloc>
   bb308:	9005      	str	r0, [sp, #20]
   bb30a:	2800      	cmp	r0, #0
   bb30c:	f43f af0c 	beq.w	bb128 <_strtod_l+0x490>
   bb310:	9b07      	ldr	r3, [sp, #28]
   bb312:	691a      	ldr	r2, [r3, #16]
   bb314:	3202      	adds	r2, #2
   bb316:	f103 010c 	add.w	r1, r3, #12
   bb31a:	0092      	lsls	r2, r2, #2
   bb31c:	300c      	adds	r0, #12
   bb31e:	f7ff fbc6 	bl	baaae <memcpy>
   bb322:	ec4b ab10 	vmov	d0, sl, fp
   bb326:	aa1a      	add	r2, sp, #104	; 0x68
   bb328:	a919      	add	r1, sp, #100	; 0x64
   bb32a:	4620      	mov	r0, r4
   bb32c:	f001 fb98 	bl	bca60 <__d2b>
   bb330:	ec4b ab18 	vmov	d8, sl, fp
   bb334:	9018      	str	r0, [sp, #96]	; 0x60
   bb336:	2800      	cmp	r0, #0
   bb338:	f43f aef6 	beq.w	bb128 <_strtod_l+0x490>
   bb33c:	2101      	movs	r1, #1
   bb33e:	4620      	mov	r0, r4
   bb340:	f001 f8e2 	bl	bc508 <__i2b>
   bb344:	4606      	mov	r6, r0
   bb346:	2800      	cmp	r0, #0
   bb348:	f43f aeee 	beq.w	bb128 <_strtod_l+0x490>
   bb34c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb34e:	9904      	ldr	r1, [sp, #16]
   bb350:	2b00      	cmp	r3, #0
   bb352:	bfab      	itete	ge
   bb354:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb356:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb358:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb35a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb35e:	bfac      	ite	ge
   bb360:	eb03 0902 	addge.w	r9, r3, r2
   bb364:	1ad7      	sublt	r7, r2, r3
   bb366:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb368:	eba3 0801 	sub.w	r8, r3, r1
   bb36c:	4490      	add	r8, r2
   bb36e:	4ba1      	ldr	r3, [pc, #644]	; (bb5f4 <_strtod_l+0x95c>)
   bb370:	f108 38ff 	add.w	r8, r8, #4294967295
   bb374:	4598      	cmp	r8, r3
   bb376:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb37a:	f280 80c7 	bge.w	bb50c <_strtod_l+0x874>
   bb37e:	eba3 0308 	sub.w	r3, r3, r8
   bb382:	2b1f      	cmp	r3, #31
   bb384:	eba2 0203 	sub.w	r2, r2, r3
   bb388:	f04f 0101 	mov.w	r1, #1
   bb38c:	f300 80b1 	bgt.w	bb4f2 <_strtod_l+0x85a>
   bb390:	fa01 f303 	lsl.w	r3, r1, r3
   bb394:	930d      	str	r3, [sp, #52]	; 0x34
   bb396:	2300      	movs	r3, #0
   bb398:	9308      	str	r3, [sp, #32]
   bb39a:	eb09 0802 	add.w	r8, r9, r2
   bb39e:	9b04      	ldr	r3, [sp, #16]
   bb3a0:	45c1      	cmp	r9, r8
   bb3a2:	4417      	add	r7, r2
   bb3a4:	441f      	add	r7, r3
   bb3a6:	464b      	mov	r3, r9
   bb3a8:	bfa8      	it	ge
   bb3aa:	4643      	movge	r3, r8
   bb3ac:	42bb      	cmp	r3, r7
   bb3ae:	bfa8      	it	ge
   bb3b0:	463b      	movge	r3, r7
   bb3b2:	2b00      	cmp	r3, #0
   bb3b4:	bfc2      	ittt	gt
   bb3b6:	eba8 0803 	subgt.w	r8, r8, r3
   bb3ba:	1aff      	subgt	r7, r7, r3
   bb3bc:	eba9 0903 	subgt.w	r9, r9, r3
   bb3c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb3c2:	2b00      	cmp	r3, #0
   bb3c4:	dd17      	ble.n	bb3f6 <_strtod_l+0x75e>
   bb3c6:	4631      	mov	r1, r6
   bb3c8:	461a      	mov	r2, r3
   bb3ca:	4620      	mov	r0, r4
   bb3cc:	f001 f95c 	bl	bc688 <__pow5mult>
   bb3d0:	4606      	mov	r6, r0
   bb3d2:	2800      	cmp	r0, #0
   bb3d4:	f43f aea8 	beq.w	bb128 <_strtod_l+0x490>
   bb3d8:	4601      	mov	r1, r0
   bb3da:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb3dc:	4620      	mov	r0, r4
   bb3de:	f001 f8a9 	bl	bc534 <__multiply>
   bb3e2:	900b      	str	r0, [sp, #44]	; 0x2c
   bb3e4:	2800      	cmp	r0, #0
   bb3e6:	f43f ae9f 	beq.w	bb128 <_strtod_l+0x490>
   bb3ea:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb3ec:	4620      	mov	r0, r4
   bb3ee:	f000 ff89 	bl	bc304 <_Bfree>
   bb3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb3f4:	9318      	str	r3, [sp, #96]	; 0x60
   bb3f6:	f1b8 0f00 	cmp.w	r8, #0
   bb3fa:	f300 808c 	bgt.w	bb516 <_strtod_l+0x87e>
   bb3fe:	9b06      	ldr	r3, [sp, #24]
   bb400:	2b00      	cmp	r3, #0
   bb402:	dd08      	ble.n	bb416 <_strtod_l+0x77e>
   bb404:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb406:	9905      	ldr	r1, [sp, #20]
   bb408:	4620      	mov	r0, r4
   bb40a:	f001 f93d 	bl	bc688 <__pow5mult>
   bb40e:	9005      	str	r0, [sp, #20]
   bb410:	2800      	cmp	r0, #0
   bb412:	f43f ae89 	beq.w	bb128 <_strtod_l+0x490>
   bb416:	2f00      	cmp	r7, #0
   bb418:	dd08      	ble.n	bb42c <_strtod_l+0x794>
   bb41a:	9905      	ldr	r1, [sp, #20]
   bb41c:	463a      	mov	r2, r7
   bb41e:	4620      	mov	r0, r4
   bb420:	f001 f98c 	bl	bc73c <__lshift>
   bb424:	9005      	str	r0, [sp, #20]
   bb426:	2800      	cmp	r0, #0
   bb428:	f43f ae7e 	beq.w	bb128 <_strtod_l+0x490>
   bb42c:	f1b9 0f00 	cmp.w	r9, #0
   bb430:	dd08      	ble.n	bb444 <_strtod_l+0x7ac>
   bb432:	4631      	mov	r1, r6
   bb434:	464a      	mov	r2, r9
   bb436:	4620      	mov	r0, r4
   bb438:	f001 f980 	bl	bc73c <__lshift>
   bb43c:	4606      	mov	r6, r0
   bb43e:	2800      	cmp	r0, #0
   bb440:	f43f ae72 	beq.w	bb128 <_strtod_l+0x490>
   bb444:	9a05      	ldr	r2, [sp, #20]
   bb446:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb448:	4620      	mov	r0, r4
   bb44a:	f001 fa03 	bl	bc854 <__mdiff>
   bb44e:	4605      	mov	r5, r0
   bb450:	2800      	cmp	r0, #0
   bb452:	f43f ae69 	beq.w	bb128 <_strtod_l+0x490>
   bb456:	68c3      	ldr	r3, [r0, #12]
   bb458:	930b      	str	r3, [sp, #44]	; 0x2c
   bb45a:	2300      	movs	r3, #0
   bb45c:	60c3      	str	r3, [r0, #12]
   bb45e:	4631      	mov	r1, r6
   bb460:	f001 f9dc 	bl	bc81c <__mcmp>
   bb464:	2800      	cmp	r0, #0
   bb466:	da60      	bge.n	bb52a <_strtod_l+0x892>
   bb468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb46a:	ea53 030a 	orrs.w	r3, r3, sl
   bb46e:	f040 8082 	bne.w	bb576 <_strtod_l+0x8de>
   bb472:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb476:	2b00      	cmp	r3, #0
   bb478:	d17d      	bne.n	bb576 <_strtod_l+0x8de>
   bb47a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb47e:	0d1b      	lsrs	r3, r3, #20
   bb480:	051b      	lsls	r3, r3, #20
   bb482:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bb486:	d976      	bls.n	bb576 <_strtod_l+0x8de>
   bb488:	696b      	ldr	r3, [r5, #20]
   bb48a:	b913      	cbnz	r3, bb492 <_strtod_l+0x7fa>
   bb48c:	692b      	ldr	r3, [r5, #16]
   bb48e:	2b01      	cmp	r3, #1
   bb490:	dd71      	ble.n	bb576 <_strtod_l+0x8de>
   bb492:	4629      	mov	r1, r5
   bb494:	2201      	movs	r2, #1
   bb496:	4620      	mov	r0, r4
   bb498:	f001 f950 	bl	bc73c <__lshift>
   bb49c:	4631      	mov	r1, r6
   bb49e:	4605      	mov	r5, r0
   bb4a0:	f001 f9bc 	bl	bc81c <__mcmp>
   bb4a4:	2800      	cmp	r0, #0
   bb4a6:	dd66      	ble.n	bb576 <_strtod_l+0x8de>
   bb4a8:	9904      	ldr	r1, [sp, #16]
   bb4aa:	4a53      	ldr	r2, [pc, #332]	; (bb5f8 <_strtod_l+0x960>)
   bb4ac:	465b      	mov	r3, fp
   bb4ae:	2900      	cmp	r1, #0
   bb4b0:	f000 8081 	beq.w	bb5b6 <_strtod_l+0x91e>
   bb4b4:	ea02 010b 	and.w	r1, r2, fp
   bb4b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bb4bc:	dc7b      	bgt.n	bb5b6 <_strtod_l+0x91e>
   bb4be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bb4c2:	f77f aea9 	ble.w	bb218 <_strtod_l+0x580>
   bb4c6:	4b4d      	ldr	r3, [pc, #308]	; (bb5fc <_strtod_l+0x964>)
   bb4c8:	4650      	mov	r0, sl
   bb4ca:	4659      	mov	r1, fp
   bb4cc:	2200      	movs	r2, #0
   bb4ce:	f7fe ffb1 	bl	ba434 <__aeabi_dmul>
   bb4d2:	460b      	mov	r3, r1
   bb4d4:	4303      	orrs	r3, r0
   bb4d6:	bf08      	it	eq
   bb4d8:	2322      	moveq	r3, #34	; 0x22
   bb4da:	4682      	mov	sl, r0
   bb4dc:	468b      	mov	fp, r1
   bb4de:	bf08      	it	eq
   bb4e0:	6023      	streq	r3, [r4, #0]
   bb4e2:	e62b      	b.n	bb13c <_strtod_l+0x4a4>
   bb4e4:	f04f 32ff 	mov.w	r2, #4294967295
   bb4e8:	fa02 f303 	lsl.w	r3, r2, r3
   bb4ec:	ea03 0a0a 	and.w	sl, r3, sl
   bb4f0:	e6e3      	b.n	bb2ba <_strtod_l+0x622>
   bb4f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bb4f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bb4fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bb4fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bb502:	fa01 f308 	lsl.w	r3, r1, r8
   bb506:	9308      	str	r3, [sp, #32]
   bb508:	910d      	str	r1, [sp, #52]	; 0x34
   bb50a:	e746      	b.n	bb39a <_strtod_l+0x702>
   bb50c:	2300      	movs	r3, #0
   bb50e:	9308      	str	r3, [sp, #32]
   bb510:	2301      	movs	r3, #1
   bb512:	930d      	str	r3, [sp, #52]	; 0x34
   bb514:	e741      	b.n	bb39a <_strtod_l+0x702>
   bb516:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb518:	4642      	mov	r2, r8
   bb51a:	4620      	mov	r0, r4
   bb51c:	f001 f90e 	bl	bc73c <__lshift>
   bb520:	9018      	str	r0, [sp, #96]	; 0x60
   bb522:	2800      	cmp	r0, #0
   bb524:	f47f af6b 	bne.w	bb3fe <_strtod_l+0x766>
   bb528:	e5fe      	b.n	bb128 <_strtod_l+0x490>
   bb52a:	465f      	mov	r7, fp
   bb52c:	d16e      	bne.n	bb60c <_strtod_l+0x974>
   bb52e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb530:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb534:	b342      	cbz	r2, bb588 <_strtod_l+0x8f0>
   bb536:	4a32      	ldr	r2, [pc, #200]	; (bb600 <_strtod_l+0x968>)
   bb538:	4293      	cmp	r3, r2
   bb53a:	d128      	bne.n	bb58e <_strtod_l+0x8f6>
   bb53c:	9b04      	ldr	r3, [sp, #16]
   bb53e:	4651      	mov	r1, sl
   bb540:	b1eb      	cbz	r3, bb57e <_strtod_l+0x8e6>
   bb542:	4b2d      	ldr	r3, [pc, #180]	; (bb5f8 <_strtod_l+0x960>)
   bb544:	403b      	ands	r3, r7
   bb546:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb54a:	f04f 32ff 	mov.w	r2, #4294967295
   bb54e:	d819      	bhi.n	bb584 <_strtod_l+0x8ec>
   bb550:	0d1b      	lsrs	r3, r3, #20
   bb552:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb556:	fa02 f303 	lsl.w	r3, r2, r3
   bb55a:	4299      	cmp	r1, r3
   bb55c:	d117      	bne.n	bb58e <_strtod_l+0x8f6>
   bb55e:	4b29      	ldr	r3, [pc, #164]	; (bb604 <_strtod_l+0x96c>)
   bb560:	429f      	cmp	r7, r3
   bb562:	d102      	bne.n	bb56a <_strtod_l+0x8d2>
   bb564:	3101      	adds	r1, #1
   bb566:	f43f addf 	beq.w	bb128 <_strtod_l+0x490>
   bb56a:	4b23      	ldr	r3, [pc, #140]	; (bb5f8 <_strtod_l+0x960>)
   bb56c:	403b      	ands	r3, r7
   bb56e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bb572:	f04f 0a00 	mov.w	sl, #0
   bb576:	9b04      	ldr	r3, [sp, #16]
   bb578:	2b00      	cmp	r3, #0
   bb57a:	d1a4      	bne.n	bb4c6 <_strtod_l+0x82e>
   bb57c:	e5de      	b.n	bb13c <_strtod_l+0x4a4>
   bb57e:	f04f 33ff 	mov.w	r3, #4294967295
   bb582:	e7ea      	b.n	bb55a <_strtod_l+0x8c2>
   bb584:	4613      	mov	r3, r2
   bb586:	e7e8      	b.n	bb55a <_strtod_l+0x8c2>
   bb588:	ea53 030a 	orrs.w	r3, r3, sl
   bb58c:	d08c      	beq.n	bb4a8 <_strtod_l+0x810>
   bb58e:	9b08      	ldr	r3, [sp, #32]
   bb590:	b1db      	cbz	r3, bb5ca <_strtod_l+0x932>
   bb592:	423b      	tst	r3, r7
   bb594:	d0ef      	beq.n	bb576 <_strtod_l+0x8de>
   bb596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb598:	9a04      	ldr	r2, [sp, #16]
   bb59a:	4650      	mov	r0, sl
   bb59c:	4659      	mov	r1, fp
   bb59e:	b1c3      	cbz	r3, bb5d2 <_strtod_l+0x93a>
   bb5a0:	f7ff fb5e 	bl	bac60 <sulp>
   bb5a4:	4602      	mov	r2, r0
   bb5a6:	460b      	mov	r3, r1
   bb5a8:	ec51 0b18 	vmov	r0, r1, d8
   bb5ac:	f7fe fd8c 	bl	ba0c8 <__adddf3>
   bb5b0:	4682      	mov	sl, r0
   bb5b2:	468b      	mov	fp, r1
   bb5b4:	e7df      	b.n	bb576 <_strtod_l+0x8de>
   bb5b6:	4013      	ands	r3, r2
   bb5b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bb5bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bb5c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bb5c4:	f04f 3aff 	mov.w	sl, #4294967295
   bb5c8:	e7d5      	b.n	bb576 <_strtod_l+0x8de>
   bb5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb5cc:	ea13 0f0a 	tst.w	r3, sl
   bb5d0:	e7e0      	b.n	bb594 <_strtod_l+0x8fc>
   bb5d2:	f7ff fb45 	bl	bac60 <sulp>
   bb5d6:	4602      	mov	r2, r0
   bb5d8:	460b      	mov	r3, r1
   bb5da:	ec51 0b18 	vmov	r0, r1, d8
   bb5de:	f7fe fd71 	bl	ba0c4 <__aeabi_dsub>
   bb5e2:	2200      	movs	r2, #0
   bb5e4:	2300      	movs	r3, #0
   bb5e6:	4682      	mov	sl, r0
   bb5e8:	468b      	mov	fp, r1
   bb5ea:	f7ff f98b 	bl	ba904 <__aeabi_dcmpeq>
   bb5ee:	2800      	cmp	r0, #0
   bb5f0:	d0c1      	beq.n	bb576 <_strtod_l+0x8de>
   bb5f2:	e611      	b.n	bb218 <_strtod_l+0x580>
   bb5f4:	fffffc02 	.word	0xfffffc02
   bb5f8:	7ff00000 	.word	0x7ff00000
   bb5fc:	39500000 	.word	0x39500000
   bb600:	000fffff 	.word	0x000fffff
   bb604:	7fefffff 	.word	0x7fefffff
   bb608:	000bd8a8 	.word	0x000bd8a8
   bb60c:	4631      	mov	r1, r6
   bb60e:	4628      	mov	r0, r5
   bb610:	f001 fa82 	bl	bcb18 <__ratio>
   bb614:	ec59 8b10 	vmov	r8, r9, d0
   bb618:	ee10 0a10 	vmov	r0, s0
   bb61c:	2200      	movs	r2, #0
   bb61e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb622:	4649      	mov	r1, r9
   bb624:	f7ff f982 	bl	ba92c <__aeabi_dcmple>
   bb628:	2800      	cmp	r0, #0
   bb62a:	d07a      	beq.n	bb722 <_strtod_l+0xa8a>
   bb62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb62e:	2b00      	cmp	r3, #0
   bb630:	d04a      	beq.n	bb6c8 <_strtod_l+0xa30>
   bb632:	4b95      	ldr	r3, [pc, #596]	; (bb888 <_strtod_l+0xbf0>)
   bb634:	2200      	movs	r2, #0
   bb636:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb63a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb888 <_strtod_l+0xbf0>
   bb63e:	f04f 0800 	mov.w	r8, #0
   bb642:	4b92      	ldr	r3, [pc, #584]	; (bb88c <_strtod_l+0xbf4>)
   bb644:	403b      	ands	r3, r7
   bb646:	930d      	str	r3, [sp, #52]	; 0x34
   bb648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb64a:	4b91      	ldr	r3, [pc, #580]	; (bb890 <_strtod_l+0xbf8>)
   bb64c:	429a      	cmp	r2, r3
   bb64e:	f040 80b0 	bne.w	bb7b2 <_strtod_l+0xb1a>
   bb652:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb656:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bb65a:	ec4b ab10 	vmov	d0, sl, fp
   bb65e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb662:	f001 f981 	bl	bc968 <__ulp>
   bb666:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb66a:	ec53 2b10 	vmov	r2, r3, d0
   bb66e:	f7fe fee1 	bl	ba434 <__aeabi_dmul>
   bb672:	4652      	mov	r2, sl
   bb674:	465b      	mov	r3, fp
   bb676:	f7fe fd27 	bl	ba0c8 <__adddf3>
   bb67a:	460b      	mov	r3, r1
   bb67c:	4983      	ldr	r1, [pc, #524]	; (bb88c <_strtod_l+0xbf4>)
   bb67e:	4a85      	ldr	r2, [pc, #532]	; (bb894 <_strtod_l+0xbfc>)
   bb680:	4019      	ands	r1, r3
   bb682:	4291      	cmp	r1, r2
   bb684:	4682      	mov	sl, r0
   bb686:	d960      	bls.n	bb74a <_strtod_l+0xab2>
   bb688:	ee18 3a90 	vmov	r3, s17
   bb68c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bb690:	4293      	cmp	r3, r2
   bb692:	d104      	bne.n	bb69e <_strtod_l+0xa06>
   bb694:	ee18 3a10 	vmov	r3, s16
   bb698:	3301      	adds	r3, #1
   bb69a:	f43f ad45 	beq.w	bb128 <_strtod_l+0x490>
   bb69e:	f8df b200 	ldr.w	fp, [pc, #512]	; bb8a0 <_strtod_l+0xc08>
   bb6a2:	f04f 3aff 	mov.w	sl, #4294967295
   bb6a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb6a8:	4620      	mov	r0, r4
   bb6aa:	f000 fe2b 	bl	bc304 <_Bfree>
   bb6ae:	9905      	ldr	r1, [sp, #20]
   bb6b0:	4620      	mov	r0, r4
   bb6b2:	f000 fe27 	bl	bc304 <_Bfree>
   bb6b6:	4631      	mov	r1, r6
   bb6b8:	4620      	mov	r0, r4
   bb6ba:	f000 fe23 	bl	bc304 <_Bfree>
   bb6be:	4629      	mov	r1, r5
   bb6c0:	4620      	mov	r0, r4
   bb6c2:	f000 fe1f 	bl	bc304 <_Bfree>
   bb6c6:	e61a      	b.n	bb2fe <_strtod_l+0x666>
   bb6c8:	f1ba 0f00 	cmp.w	sl, #0
   bb6cc:	d11b      	bne.n	bb706 <_strtod_l+0xa6e>
   bb6ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb6d2:	b9f3      	cbnz	r3, bb712 <_strtod_l+0xa7a>
   bb6d4:	4b6c      	ldr	r3, [pc, #432]	; (bb888 <_strtod_l+0xbf0>)
   bb6d6:	2200      	movs	r2, #0
   bb6d8:	4640      	mov	r0, r8
   bb6da:	4649      	mov	r1, r9
   bb6dc:	f7ff f91c 	bl	ba918 <__aeabi_dcmplt>
   bb6e0:	b9d0      	cbnz	r0, bb718 <_strtod_l+0xa80>
   bb6e2:	4640      	mov	r0, r8
   bb6e4:	4649      	mov	r1, r9
   bb6e6:	4b6c      	ldr	r3, [pc, #432]	; (bb898 <_strtod_l+0xc00>)
   bb6e8:	2200      	movs	r2, #0
   bb6ea:	f7fe fea3 	bl	ba434 <__aeabi_dmul>
   bb6ee:	4680      	mov	r8, r0
   bb6f0:	4689      	mov	r9, r1
   bb6f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bb6f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bb6fa:	9315      	str	r3, [sp, #84]	; 0x54
   bb6fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bb700:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb704:	e79d      	b.n	bb642 <_strtod_l+0x9aa>
   bb706:	f1ba 0f01 	cmp.w	sl, #1
   bb70a:	d102      	bne.n	bb712 <_strtod_l+0xa7a>
   bb70c:	2f00      	cmp	r7, #0
   bb70e:	f43f ad83 	beq.w	bb218 <_strtod_l+0x580>
   bb712:	4b62      	ldr	r3, [pc, #392]	; (bb89c <_strtod_l+0xc04>)
   bb714:	2200      	movs	r2, #0
   bb716:	e78e      	b.n	bb636 <_strtod_l+0x99e>
   bb718:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb898 <_strtod_l+0xc00>
   bb71c:	f04f 0800 	mov.w	r8, #0
   bb720:	e7e7      	b.n	bb6f2 <_strtod_l+0xa5a>
   bb722:	4b5d      	ldr	r3, [pc, #372]	; (bb898 <_strtod_l+0xc00>)
   bb724:	4640      	mov	r0, r8
   bb726:	4649      	mov	r1, r9
   bb728:	2200      	movs	r2, #0
   bb72a:	f7fe fe83 	bl	ba434 <__aeabi_dmul>
   bb72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb730:	4680      	mov	r8, r0
   bb732:	4689      	mov	r9, r1
   bb734:	b933      	cbnz	r3, bb744 <_strtod_l+0xaac>
   bb736:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb73a:	900e      	str	r0, [sp, #56]	; 0x38
   bb73c:	930f      	str	r3, [sp, #60]	; 0x3c
   bb73e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bb742:	e7dd      	b.n	bb700 <_strtod_l+0xa68>
   bb744:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bb748:	e7f9      	b.n	bb73e <_strtod_l+0xaa6>
   bb74a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bb74e:	9b04      	ldr	r3, [sp, #16]
   bb750:	2b00      	cmp	r3, #0
   bb752:	d1a8      	bne.n	bb6a6 <_strtod_l+0xa0e>
   bb754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb75a:	0d1b      	lsrs	r3, r3, #20
   bb75c:	051b      	lsls	r3, r3, #20
   bb75e:	429a      	cmp	r2, r3
   bb760:	d1a1      	bne.n	bb6a6 <_strtod_l+0xa0e>
   bb762:	4640      	mov	r0, r8
   bb764:	4649      	mov	r1, r9
   bb766:	f001 fa85 	bl	bcc74 <__aeabi_d2lz>
   bb76a:	f7fe fe35 	bl	ba3d8 <__aeabi_l2d>
   bb76e:	4602      	mov	r2, r0
   bb770:	460b      	mov	r3, r1
   bb772:	4640      	mov	r0, r8
   bb774:	4649      	mov	r1, r9
   bb776:	f7fe fca5 	bl	ba0c4 <__aeabi_dsub>
   bb77a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb780:	ea43 030a 	orr.w	r3, r3, sl
   bb784:	4313      	orrs	r3, r2
   bb786:	4680      	mov	r8, r0
   bb788:	4689      	mov	r9, r1
   bb78a:	d055      	beq.n	bb838 <_strtod_l+0xba0>
   bb78c:	a336      	add	r3, pc, #216	; (adr r3, bb868 <_strtod_l+0xbd0>)
   bb78e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb792:	f7ff f8c1 	bl	ba918 <__aeabi_dcmplt>
   bb796:	2800      	cmp	r0, #0
   bb798:	f47f acd0 	bne.w	bb13c <_strtod_l+0x4a4>
   bb79c:	a334      	add	r3, pc, #208	; (adr r3, bb870 <_strtod_l+0xbd8>)
   bb79e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb7a2:	4640      	mov	r0, r8
   bb7a4:	4649      	mov	r1, r9
   bb7a6:	f7ff f8d5 	bl	ba954 <__aeabi_dcmpgt>
   bb7aa:	2800      	cmp	r0, #0
   bb7ac:	f43f af7b 	beq.w	bb6a6 <_strtod_l+0xa0e>
   bb7b0:	e4c4      	b.n	bb13c <_strtod_l+0x4a4>
   bb7b2:	9b04      	ldr	r3, [sp, #16]
   bb7b4:	b333      	cbz	r3, bb804 <_strtod_l+0xb6c>
   bb7b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb7b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb7bc:	d822      	bhi.n	bb804 <_strtod_l+0xb6c>
   bb7be:	a32e      	add	r3, pc, #184	; (adr r3, bb878 <_strtod_l+0xbe0>)
   bb7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb7c4:	4640      	mov	r0, r8
   bb7c6:	4649      	mov	r1, r9
   bb7c8:	f7ff f8b0 	bl	ba92c <__aeabi_dcmple>
   bb7cc:	b1a0      	cbz	r0, bb7f8 <_strtod_l+0xb60>
   bb7ce:	4649      	mov	r1, r9
   bb7d0:	4640      	mov	r0, r8
   bb7d2:	f7ff f8c9 	bl	ba968 <__aeabi_d2uiz>
   bb7d6:	2801      	cmp	r0, #1
   bb7d8:	bf38      	it	cc
   bb7da:	2001      	movcc	r0, #1
   bb7dc:	f7fe fdb0 	bl	ba340 <__aeabi_ui2d>
   bb7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb7e2:	4680      	mov	r8, r0
   bb7e4:	4689      	mov	r9, r1
   bb7e6:	bb23      	cbnz	r3, bb832 <_strtod_l+0xb9a>
   bb7e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb7ec:	9010      	str	r0, [sp, #64]	; 0x40
   bb7ee:	9311      	str	r3, [sp, #68]	; 0x44
   bb7f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb7f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb7fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb7fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb800:	1a9b      	subs	r3, r3, r2
   bb802:	9309      	str	r3, [sp, #36]	; 0x24
   bb804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb808:	eeb0 0a48 	vmov.f32	s0, s16
   bb80c:	eef0 0a68 	vmov.f32	s1, s17
   bb810:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb814:	f001 f8a8 	bl	bc968 <__ulp>
   bb818:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb81c:	ec53 2b10 	vmov	r2, r3, d0
   bb820:	f7fe fe08 	bl	ba434 <__aeabi_dmul>
   bb824:	ec53 2b18 	vmov	r2, r3, d8
   bb828:	f7fe fc4e 	bl	ba0c8 <__adddf3>
   bb82c:	4682      	mov	sl, r0
   bb82e:	468b      	mov	fp, r1
   bb830:	e78d      	b.n	bb74e <_strtod_l+0xab6>
   bb832:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb836:	e7db      	b.n	bb7f0 <_strtod_l+0xb58>
   bb838:	a311      	add	r3, pc, #68	; (adr r3, bb880 <_strtod_l+0xbe8>)
   bb83a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb83e:	f7ff f86b 	bl	ba918 <__aeabi_dcmplt>
   bb842:	e7b2      	b.n	bb7aa <_strtod_l+0xb12>
   bb844:	2300      	movs	r3, #0
   bb846:	930a      	str	r3, [sp, #40]	; 0x28
   bb848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb84a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb84c:	6013      	str	r3, [r2, #0]
   bb84e:	f7ff ba6b 	b.w	bad28 <_strtod_l+0x90>
   bb852:	2a65      	cmp	r2, #101	; 0x65
   bb854:	f43f ab5f 	beq.w	baf16 <_strtod_l+0x27e>
   bb858:	2a45      	cmp	r2, #69	; 0x45
   bb85a:	f43f ab5c 	beq.w	baf16 <_strtod_l+0x27e>
   bb85e:	2301      	movs	r3, #1
   bb860:	f7ff bb94 	b.w	baf8c <_strtod_l+0x2f4>
   bb864:	f3af 8000 	nop.w
   bb868:	94a03595 	.word	0x94a03595
   bb86c:	3fdfffff 	.word	0x3fdfffff
   bb870:	35afe535 	.word	0x35afe535
   bb874:	3fe00000 	.word	0x3fe00000
   bb878:	ffc00000 	.word	0xffc00000
   bb87c:	41dfffff 	.word	0x41dfffff
   bb880:	94a03595 	.word	0x94a03595
   bb884:	3fcfffff 	.word	0x3fcfffff
   bb888:	3ff00000 	.word	0x3ff00000
   bb88c:	7ff00000 	.word	0x7ff00000
   bb890:	7fe00000 	.word	0x7fe00000
   bb894:	7c9fffff 	.word	0x7c9fffff
   bb898:	3fe00000 	.word	0x3fe00000
   bb89c:	bff00000 	.word	0xbff00000
   bb8a0:	7fefffff 	.word	0x7fefffff

000bb8a4 <strtod>:
   bb8a4:	460a      	mov	r2, r1
   bb8a6:	4601      	mov	r1, r0
   bb8a8:	4802      	ldr	r0, [pc, #8]	; (bb8b4 <strtod+0x10>)
   bb8aa:	4b03      	ldr	r3, [pc, #12]	; (bb8b8 <strtod+0x14>)
   bb8ac:	6800      	ldr	r0, [r0, #0]
   bb8ae:	f7ff b9f3 	b.w	bac98 <_strtod_l>
   bb8b2:	bf00      	nop
   bb8b4:	2003d2f8 	.word	0x2003d2f8
   bb8b8:	2003d364 	.word	0x2003d364

000bb8bc <strtok>:
   bb8bc:	4b16      	ldr	r3, [pc, #88]	; (bb918 <strtok+0x5c>)
   bb8be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb8c0:	681e      	ldr	r6, [r3, #0]
   bb8c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bb8c4:	4605      	mov	r5, r0
   bb8c6:	b9fc      	cbnz	r4, bb908 <strtok+0x4c>
   bb8c8:	2050      	movs	r0, #80	; 0x50
   bb8ca:	9101      	str	r1, [sp, #4]
   bb8cc:	f7fb f802 	bl	b68d4 <malloc>
   bb8d0:	9901      	ldr	r1, [sp, #4]
   bb8d2:	65b0      	str	r0, [r6, #88]	; 0x58
   bb8d4:	4602      	mov	r2, r0
   bb8d6:	b920      	cbnz	r0, bb8e2 <strtok+0x26>
   bb8d8:	4b10      	ldr	r3, [pc, #64]	; (bb91c <strtok+0x60>)
   bb8da:	4811      	ldr	r0, [pc, #68]	; (bb920 <strtok+0x64>)
   bb8dc:	2157      	movs	r1, #87	; 0x57
   bb8de:	f7fb f841 	bl	b6964 <__assert_func>
   bb8e2:	e9c0 4400 	strd	r4, r4, [r0]
   bb8e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bb8ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bb8ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bb8f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bb8f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bb8fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bb8fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bb902:	6184      	str	r4, [r0, #24]
   bb904:	7704      	strb	r4, [r0, #28]
   bb906:	6244      	str	r4, [r0, #36]	; 0x24
   bb908:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bb90a:	2301      	movs	r3, #1
   bb90c:	4628      	mov	r0, r5
   bb90e:	b002      	add	sp, #8
   bb910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb914:	f000 b806 	b.w	bb924 <__strtok_r>
   bb918:	2003d2f8 	.word	0x2003d2f8
   bb91c:	000bd7dd 	.word	0x000bd7dd
   bb920:	000bd8d0 	.word	0x000bd8d0

000bb924 <__strtok_r>:
   bb924:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb926:	b908      	cbnz	r0, bb92c <__strtok_r+0x8>
   bb928:	6810      	ldr	r0, [r2, #0]
   bb92a:	b188      	cbz	r0, bb950 <__strtok_r+0x2c>
   bb92c:	4604      	mov	r4, r0
   bb92e:	4620      	mov	r0, r4
   bb930:	f814 5b01 	ldrb.w	r5, [r4], #1
   bb934:	460f      	mov	r7, r1
   bb936:	f817 6b01 	ldrb.w	r6, [r7], #1
   bb93a:	b91e      	cbnz	r6, bb944 <__strtok_r+0x20>
   bb93c:	b965      	cbnz	r5, bb958 <__strtok_r+0x34>
   bb93e:	6015      	str	r5, [r2, #0]
   bb940:	4628      	mov	r0, r5
   bb942:	e005      	b.n	bb950 <__strtok_r+0x2c>
   bb944:	42b5      	cmp	r5, r6
   bb946:	d1f6      	bne.n	bb936 <__strtok_r+0x12>
   bb948:	2b00      	cmp	r3, #0
   bb94a:	d1f0      	bne.n	bb92e <__strtok_r+0xa>
   bb94c:	6014      	str	r4, [r2, #0]
   bb94e:	7003      	strb	r3, [r0, #0]
   bb950:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb952:	461c      	mov	r4, r3
   bb954:	e00c      	b.n	bb970 <__strtok_r+0x4c>
   bb956:	b915      	cbnz	r5, bb95e <__strtok_r+0x3a>
   bb958:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb95c:	460e      	mov	r6, r1
   bb95e:	f816 5b01 	ldrb.w	r5, [r6], #1
   bb962:	42ab      	cmp	r3, r5
   bb964:	d1f7      	bne.n	bb956 <__strtok_r+0x32>
   bb966:	2b00      	cmp	r3, #0
   bb968:	d0f3      	beq.n	bb952 <__strtok_r+0x2e>
   bb96a:	2300      	movs	r3, #0
   bb96c:	f804 3c01 	strb.w	r3, [r4, #-1]
   bb970:	6014      	str	r4, [r2, #0]
   bb972:	e7ed      	b.n	bb950 <__strtok_r+0x2c>

000bb974 <_strtol_l.constprop.0>:
   bb974:	2b01      	cmp	r3, #1
   bb976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb97a:	d001      	beq.n	bb980 <_strtol_l.constprop.0+0xc>
   bb97c:	2b24      	cmp	r3, #36	; 0x24
   bb97e:	d906      	bls.n	bb98e <_strtol_l.constprop.0+0x1a>
   bb980:	f7fa ffe8 	bl	b6954 <__errno>
   bb984:	2316      	movs	r3, #22
   bb986:	6003      	str	r3, [r0, #0]
   bb988:	2000      	movs	r0, #0
   bb98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb98e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bba74 <_strtol_l.constprop.0+0x100>
   bb992:	460d      	mov	r5, r1
   bb994:	462e      	mov	r6, r5
   bb996:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb99a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb99e:	f017 0708 	ands.w	r7, r7, #8
   bb9a2:	d1f7      	bne.n	bb994 <_strtol_l.constprop.0+0x20>
   bb9a4:	2c2d      	cmp	r4, #45	; 0x2d
   bb9a6:	d132      	bne.n	bba0e <_strtol_l.constprop.0+0x9a>
   bb9a8:	782c      	ldrb	r4, [r5, #0]
   bb9aa:	2701      	movs	r7, #1
   bb9ac:	1cb5      	adds	r5, r6, #2
   bb9ae:	2b00      	cmp	r3, #0
   bb9b0:	d05b      	beq.n	bba6a <_strtol_l.constprop.0+0xf6>
   bb9b2:	2b10      	cmp	r3, #16
   bb9b4:	d109      	bne.n	bb9ca <_strtol_l.constprop.0+0x56>
   bb9b6:	2c30      	cmp	r4, #48	; 0x30
   bb9b8:	d107      	bne.n	bb9ca <_strtol_l.constprop.0+0x56>
   bb9ba:	782c      	ldrb	r4, [r5, #0]
   bb9bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb9c0:	2c58      	cmp	r4, #88	; 0x58
   bb9c2:	d14d      	bne.n	bba60 <_strtol_l.constprop.0+0xec>
   bb9c4:	786c      	ldrb	r4, [r5, #1]
   bb9c6:	2310      	movs	r3, #16
   bb9c8:	3502      	adds	r5, #2
   bb9ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb9ce:	f108 38ff 	add.w	r8, r8, #4294967295
   bb9d2:	f04f 0c00 	mov.w	ip, #0
   bb9d6:	fbb8 f9f3 	udiv	r9, r8, r3
   bb9da:	4666      	mov	r6, ip
   bb9dc:	fb03 8a19 	mls	sl, r3, r9, r8
   bb9e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb9e4:	f1be 0f09 	cmp.w	lr, #9
   bb9e8:	d816      	bhi.n	bba18 <_strtol_l.constprop.0+0xa4>
   bb9ea:	4674      	mov	r4, lr
   bb9ec:	42a3      	cmp	r3, r4
   bb9ee:	dd24      	ble.n	bba3a <_strtol_l.constprop.0+0xc6>
   bb9f0:	f1bc 0f00 	cmp.w	ip, #0
   bb9f4:	db1e      	blt.n	bba34 <_strtol_l.constprop.0+0xc0>
   bb9f6:	45b1      	cmp	r9, r6
   bb9f8:	d31c      	bcc.n	bba34 <_strtol_l.constprop.0+0xc0>
   bb9fa:	d101      	bne.n	bba00 <_strtol_l.constprop.0+0x8c>
   bb9fc:	45a2      	cmp	sl, r4
   bb9fe:	db19      	blt.n	bba34 <_strtol_l.constprop.0+0xc0>
   bba00:	fb06 4603 	mla	r6, r6, r3, r4
   bba04:	f04f 0c01 	mov.w	ip, #1
   bba08:	f815 4b01 	ldrb.w	r4, [r5], #1
   bba0c:	e7e8      	b.n	bb9e0 <_strtol_l.constprop.0+0x6c>
   bba0e:	2c2b      	cmp	r4, #43	; 0x2b
   bba10:	bf04      	itt	eq
   bba12:	782c      	ldrbeq	r4, [r5, #0]
   bba14:	1cb5      	addeq	r5, r6, #2
   bba16:	e7ca      	b.n	bb9ae <_strtol_l.constprop.0+0x3a>
   bba18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bba1c:	f1be 0f19 	cmp.w	lr, #25
   bba20:	d801      	bhi.n	bba26 <_strtol_l.constprop.0+0xb2>
   bba22:	3c37      	subs	r4, #55	; 0x37
   bba24:	e7e2      	b.n	bb9ec <_strtol_l.constprop.0+0x78>
   bba26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bba2a:	f1be 0f19 	cmp.w	lr, #25
   bba2e:	d804      	bhi.n	bba3a <_strtol_l.constprop.0+0xc6>
   bba30:	3c57      	subs	r4, #87	; 0x57
   bba32:	e7db      	b.n	bb9ec <_strtol_l.constprop.0+0x78>
   bba34:	f04f 3cff 	mov.w	ip, #4294967295
   bba38:	e7e6      	b.n	bba08 <_strtol_l.constprop.0+0x94>
   bba3a:	f1bc 0f00 	cmp.w	ip, #0
   bba3e:	da05      	bge.n	bba4c <_strtol_l.constprop.0+0xd8>
   bba40:	2322      	movs	r3, #34	; 0x22
   bba42:	6003      	str	r3, [r0, #0]
   bba44:	4646      	mov	r6, r8
   bba46:	b942      	cbnz	r2, bba5a <_strtol_l.constprop.0+0xe6>
   bba48:	4630      	mov	r0, r6
   bba4a:	e79e      	b.n	bb98a <_strtol_l.constprop.0+0x16>
   bba4c:	b107      	cbz	r7, bba50 <_strtol_l.constprop.0+0xdc>
   bba4e:	4276      	negs	r6, r6
   bba50:	2a00      	cmp	r2, #0
   bba52:	d0f9      	beq.n	bba48 <_strtol_l.constprop.0+0xd4>
   bba54:	f1bc 0f00 	cmp.w	ip, #0
   bba58:	d000      	beq.n	bba5c <_strtol_l.constprop.0+0xe8>
   bba5a:	1e69      	subs	r1, r5, #1
   bba5c:	6011      	str	r1, [r2, #0]
   bba5e:	e7f3      	b.n	bba48 <_strtol_l.constprop.0+0xd4>
   bba60:	2430      	movs	r4, #48	; 0x30
   bba62:	2b00      	cmp	r3, #0
   bba64:	d1b1      	bne.n	bb9ca <_strtol_l.constprop.0+0x56>
   bba66:	2308      	movs	r3, #8
   bba68:	e7af      	b.n	bb9ca <_strtol_l.constprop.0+0x56>
   bba6a:	2c30      	cmp	r4, #48	; 0x30
   bba6c:	d0a5      	beq.n	bb9ba <_strtol_l.constprop.0+0x46>
   bba6e:	230a      	movs	r3, #10
   bba70:	e7ab      	b.n	bb9ca <_strtol_l.constprop.0+0x56>
   bba72:	bf00      	nop
   bba74:	000bd950 	.word	0x000bd950

000bba78 <strtol>:
   bba78:	4613      	mov	r3, r2
   bba7a:	460a      	mov	r2, r1
   bba7c:	4601      	mov	r1, r0
   bba7e:	4802      	ldr	r0, [pc, #8]	; (bba88 <strtol+0x10>)
   bba80:	6800      	ldr	r0, [r0, #0]
   bba82:	f7ff bf77 	b.w	bb974 <_strtol_l.constprop.0>
   bba86:	bf00      	nop
   bba88:	2003d2f8 	.word	0x2003d2f8

000bba8c <open>:
   bba8c:	b40e      	push	{r1, r2, r3}
   bba8e:	b503      	push	{r0, r1, lr}
   bba90:	ab03      	add	r3, sp, #12
   bba92:	4601      	mov	r1, r0
   bba94:	4806      	ldr	r0, [pc, #24]	; (bbab0 <open+0x24>)
   bba96:	f853 2b04 	ldr.w	r2, [r3], #4
   bba9a:	9301      	str	r3, [sp, #4]
   bba9c:	6800      	ldr	r0, [r0, #0]
   bba9e:	9b04      	ldr	r3, [sp, #16]
   bbaa0:	f001 f8c0 	bl	bcc24 <_open_r>
   bbaa4:	b002      	add	sp, #8
   bbaa6:	f85d eb04 	ldr.w	lr, [sp], #4
   bbaaa:	b003      	add	sp, #12
   bbaac:	4770      	bx	lr
   bbaae:	bf00      	nop
   bbab0:	2003d2f8 	.word	0x2003d2f8

000bbab4 <__register_exitproc>:
   bbab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbab8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbb74 <__register_exitproc+0xc0>
   bbabc:	4606      	mov	r6, r0
   bbabe:	f8d8 0000 	ldr.w	r0, [r8]
   bbac2:	461f      	mov	r7, r3
   bbac4:	460d      	mov	r5, r1
   bbac6:	4691      	mov	r9, r2
   bbac8:	f000 fbc6 	bl	bc258 <__retarget_lock_acquire_recursive>
   bbacc:	4b25      	ldr	r3, [pc, #148]	; (bbb64 <__register_exitproc+0xb0>)
   bbace:	681c      	ldr	r4, [r3, #0]
   bbad0:	b934      	cbnz	r4, bbae0 <__register_exitproc+0x2c>
   bbad2:	4c25      	ldr	r4, [pc, #148]	; (bbb68 <__register_exitproc+0xb4>)
   bbad4:	601c      	str	r4, [r3, #0]
   bbad6:	4b25      	ldr	r3, [pc, #148]	; (bbb6c <__register_exitproc+0xb8>)
   bbad8:	b113      	cbz	r3, bbae0 <__register_exitproc+0x2c>
   bbada:	681b      	ldr	r3, [r3, #0]
   bbadc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbae0:	6863      	ldr	r3, [r4, #4]
   bbae2:	2b1f      	cmp	r3, #31
   bbae4:	dd07      	ble.n	bbaf6 <__register_exitproc+0x42>
   bbae6:	f8d8 0000 	ldr.w	r0, [r8]
   bbaea:	f000 fbb7 	bl	bc25c <__retarget_lock_release_recursive>
   bbaee:	f04f 30ff 	mov.w	r0, #4294967295
   bbaf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbaf6:	b34e      	cbz	r6, bbb4c <__register_exitproc+0x98>
   bbaf8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbafc:	b988      	cbnz	r0, bbb22 <__register_exitproc+0x6e>
   bbafe:	4b1c      	ldr	r3, [pc, #112]	; (bbb70 <__register_exitproc+0xbc>)
   bbb00:	b923      	cbnz	r3, bbb0c <__register_exitproc+0x58>
   bbb02:	f8d8 0000 	ldr.w	r0, [r8]
   bbb06:	f000 fba8 	bl	bc25a <__retarget_lock_release>
   bbb0a:	e7f0      	b.n	bbaee <__register_exitproc+0x3a>
   bbb0c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbb10:	f7fa fee0 	bl	b68d4 <malloc>
   bbb14:	2800      	cmp	r0, #0
   bbb16:	d0f4      	beq.n	bbb02 <__register_exitproc+0x4e>
   bbb18:	2300      	movs	r3, #0
   bbb1a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbb1e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbb22:	6863      	ldr	r3, [r4, #4]
   bbb24:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbb28:	2201      	movs	r2, #1
   bbb2a:	409a      	lsls	r2, r3
   bbb2c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbb30:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbb34:	4313      	orrs	r3, r2
   bbb36:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbb3a:	2e02      	cmp	r6, #2
   bbb3c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbb40:	bf02      	ittt	eq
   bbb42:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbb46:	4313      	orreq	r3, r2
   bbb48:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbb4c:	6863      	ldr	r3, [r4, #4]
   bbb4e:	f8d8 0000 	ldr.w	r0, [r8]
   bbb52:	1c5a      	adds	r2, r3, #1
   bbb54:	3302      	adds	r3, #2
   bbb56:	6062      	str	r2, [r4, #4]
   bbb58:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbb5c:	f000 fb7e 	bl	bc25c <__retarget_lock_release_recursive>
   bbb60:	2000      	movs	r0, #0
   bbb62:	e7c6      	b.n	bbaf2 <__register_exitproc+0x3e>
   bbb64:	2003e7e4 	.word	0x2003e7e4
   bbb68:	2003e758 	.word	0x2003e758
   bbb6c:	00000000 	.word	0x00000000
   bbb70:	000b68d5 	.word	0x000b68d5
   bbb74:	2003d35c 	.word	0x2003d35c

000bbb78 <rshift>:
   bbb78:	6903      	ldr	r3, [r0, #16]
   bbb7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bbb7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbb82:	ea4f 1261 	mov.w	r2, r1, asr #5
   bbb86:	f100 0414 	add.w	r4, r0, #20
   bbb8a:	dd45      	ble.n	bbc18 <rshift+0xa0>
   bbb8c:	f011 011f 	ands.w	r1, r1, #31
   bbb90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bbb94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bbb98:	d10c      	bne.n	bbbb4 <rshift+0x3c>
   bbb9a:	f100 0710 	add.w	r7, r0, #16
   bbb9e:	4629      	mov	r1, r5
   bbba0:	42b1      	cmp	r1, r6
   bbba2:	d334      	bcc.n	bbc0e <rshift+0x96>
   bbba4:	1a9b      	subs	r3, r3, r2
   bbba6:	009b      	lsls	r3, r3, #2
   bbba8:	1eea      	subs	r2, r5, #3
   bbbaa:	4296      	cmp	r6, r2
   bbbac:	bf38      	it	cc
   bbbae:	2300      	movcc	r3, #0
   bbbb0:	4423      	add	r3, r4
   bbbb2:	e015      	b.n	bbbe0 <rshift+0x68>
   bbbb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bbbb8:	f1c1 0820 	rsb	r8, r1, #32
   bbbbc:	40cf      	lsrs	r7, r1
   bbbbe:	f105 0e04 	add.w	lr, r5, #4
   bbbc2:	46a1      	mov	r9, r4
   bbbc4:	4576      	cmp	r6, lr
   bbbc6:	46f4      	mov	ip, lr
   bbbc8:	d815      	bhi.n	bbbf6 <rshift+0x7e>
   bbbca:	1a9a      	subs	r2, r3, r2
   bbbcc:	0092      	lsls	r2, r2, #2
   bbbce:	3a04      	subs	r2, #4
   bbbd0:	3501      	adds	r5, #1
   bbbd2:	42ae      	cmp	r6, r5
   bbbd4:	bf38      	it	cc
   bbbd6:	2200      	movcc	r2, #0
   bbbd8:	18a3      	adds	r3, r4, r2
   bbbda:	50a7      	str	r7, [r4, r2]
   bbbdc:	b107      	cbz	r7, bbbe0 <rshift+0x68>
   bbbde:	3304      	adds	r3, #4
   bbbe0:	1b1a      	subs	r2, r3, r4
   bbbe2:	42a3      	cmp	r3, r4
   bbbe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bbbe8:	bf08      	it	eq
   bbbea:	2300      	moveq	r3, #0
   bbbec:	6102      	str	r2, [r0, #16]
   bbbee:	bf08      	it	eq
   bbbf0:	6143      	streq	r3, [r0, #20]
   bbbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbbf6:	f8dc c000 	ldr.w	ip, [ip]
   bbbfa:	fa0c fc08 	lsl.w	ip, ip, r8
   bbbfe:	ea4c 0707 	orr.w	r7, ip, r7
   bbc02:	f849 7b04 	str.w	r7, [r9], #4
   bbc06:	f85e 7b04 	ldr.w	r7, [lr], #4
   bbc0a:	40cf      	lsrs	r7, r1
   bbc0c:	e7da      	b.n	bbbc4 <rshift+0x4c>
   bbc0e:	f851 cb04 	ldr.w	ip, [r1], #4
   bbc12:	f847 cf04 	str.w	ip, [r7, #4]!
   bbc16:	e7c3      	b.n	bbba0 <rshift+0x28>
   bbc18:	4623      	mov	r3, r4
   bbc1a:	e7e1      	b.n	bbbe0 <rshift+0x68>

000bbc1c <__hexdig_fun>:
   bbc1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bbc20:	2b09      	cmp	r3, #9
   bbc22:	d802      	bhi.n	bbc2a <__hexdig_fun+0xe>
   bbc24:	3820      	subs	r0, #32
   bbc26:	b2c0      	uxtb	r0, r0
   bbc28:	4770      	bx	lr
   bbc2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bbc2e:	2b05      	cmp	r3, #5
   bbc30:	d801      	bhi.n	bbc36 <__hexdig_fun+0x1a>
   bbc32:	3847      	subs	r0, #71	; 0x47
   bbc34:	e7f7      	b.n	bbc26 <__hexdig_fun+0xa>
   bbc36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bbc3a:	2b05      	cmp	r3, #5
   bbc3c:	d801      	bhi.n	bbc42 <__hexdig_fun+0x26>
   bbc3e:	3827      	subs	r0, #39	; 0x27
   bbc40:	e7f1      	b.n	bbc26 <__hexdig_fun+0xa>
   bbc42:	2000      	movs	r0, #0
   bbc44:	4770      	bx	lr
	...

000bbc48 <__gethex>:
   bbc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbc4c:	ed2d 8b02 	vpush	{d8}
   bbc50:	b089      	sub	sp, #36	; 0x24
   bbc52:	ee08 0a10 	vmov	s16, r0
   bbc56:	9304      	str	r3, [sp, #16]
   bbc58:	4bb4      	ldr	r3, [pc, #720]	; (bbf2c <__gethex+0x2e4>)
   bbc5a:	681b      	ldr	r3, [r3, #0]
   bbc5c:	9301      	str	r3, [sp, #4]
   bbc5e:	4618      	mov	r0, r3
   bbc60:	468b      	mov	fp, r1
   bbc62:	4690      	mov	r8, r2
   bbc64:	f7fe ffc1 	bl	babea <strlen>
   bbc68:	9b01      	ldr	r3, [sp, #4]
   bbc6a:	f8db 2000 	ldr.w	r2, [fp]
   bbc6e:	4403      	add	r3, r0
   bbc70:	4682      	mov	sl, r0
   bbc72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bbc76:	9305      	str	r3, [sp, #20]
   bbc78:	1c93      	adds	r3, r2, #2
   bbc7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bbc7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bbc82:	32fe      	adds	r2, #254	; 0xfe
   bbc84:	18d1      	adds	r1, r2, r3
   bbc86:	461f      	mov	r7, r3
   bbc88:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbc8c:	9100      	str	r1, [sp, #0]
   bbc8e:	2830      	cmp	r0, #48	; 0x30
   bbc90:	d0f8      	beq.n	bbc84 <__gethex+0x3c>
   bbc92:	f7ff ffc3 	bl	bbc1c <__hexdig_fun>
   bbc96:	4604      	mov	r4, r0
   bbc98:	2800      	cmp	r0, #0
   bbc9a:	d13a      	bne.n	bbd12 <__gethex+0xca>
   bbc9c:	9901      	ldr	r1, [sp, #4]
   bbc9e:	4652      	mov	r2, sl
   bbca0:	4638      	mov	r0, r7
   bbca2:	f7fe ffaa 	bl	babfa <strncmp>
   bbca6:	4605      	mov	r5, r0
   bbca8:	2800      	cmp	r0, #0
   bbcaa:	d168      	bne.n	bbd7e <__gethex+0x136>
   bbcac:	f817 000a 	ldrb.w	r0, [r7, sl]
   bbcb0:	eb07 060a 	add.w	r6, r7, sl
   bbcb4:	f7ff ffb2 	bl	bbc1c <__hexdig_fun>
   bbcb8:	2800      	cmp	r0, #0
   bbcba:	d062      	beq.n	bbd82 <__gethex+0x13a>
   bbcbc:	4633      	mov	r3, r6
   bbcbe:	7818      	ldrb	r0, [r3, #0]
   bbcc0:	2830      	cmp	r0, #48	; 0x30
   bbcc2:	461f      	mov	r7, r3
   bbcc4:	f103 0301 	add.w	r3, r3, #1
   bbcc8:	d0f9      	beq.n	bbcbe <__gethex+0x76>
   bbcca:	f7ff ffa7 	bl	bbc1c <__hexdig_fun>
   bbcce:	2301      	movs	r3, #1
   bbcd0:	fab0 f480 	clz	r4, r0
   bbcd4:	0964      	lsrs	r4, r4, #5
   bbcd6:	4635      	mov	r5, r6
   bbcd8:	9300      	str	r3, [sp, #0]
   bbcda:	463a      	mov	r2, r7
   bbcdc:	4616      	mov	r6, r2
   bbcde:	3201      	adds	r2, #1
   bbce0:	7830      	ldrb	r0, [r6, #0]
   bbce2:	f7ff ff9b 	bl	bbc1c <__hexdig_fun>
   bbce6:	2800      	cmp	r0, #0
   bbce8:	d1f8      	bne.n	bbcdc <__gethex+0x94>
   bbcea:	9901      	ldr	r1, [sp, #4]
   bbcec:	4652      	mov	r2, sl
   bbcee:	4630      	mov	r0, r6
   bbcf0:	f7fe ff83 	bl	babfa <strncmp>
   bbcf4:	b980      	cbnz	r0, bbd18 <__gethex+0xd0>
   bbcf6:	b94d      	cbnz	r5, bbd0c <__gethex+0xc4>
   bbcf8:	eb06 050a 	add.w	r5, r6, sl
   bbcfc:	462a      	mov	r2, r5
   bbcfe:	4616      	mov	r6, r2
   bbd00:	3201      	adds	r2, #1
   bbd02:	7830      	ldrb	r0, [r6, #0]
   bbd04:	f7ff ff8a 	bl	bbc1c <__hexdig_fun>
   bbd08:	2800      	cmp	r0, #0
   bbd0a:	d1f8      	bne.n	bbcfe <__gethex+0xb6>
   bbd0c:	1bad      	subs	r5, r5, r6
   bbd0e:	00ad      	lsls	r5, r5, #2
   bbd10:	e004      	b.n	bbd1c <__gethex+0xd4>
   bbd12:	2400      	movs	r4, #0
   bbd14:	4625      	mov	r5, r4
   bbd16:	e7e0      	b.n	bbcda <__gethex+0x92>
   bbd18:	2d00      	cmp	r5, #0
   bbd1a:	d1f7      	bne.n	bbd0c <__gethex+0xc4>
   bbd1c:	7833      	ldrb	r3, [r6, #0]
   bbd1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bbd22:	2b50      	cmp	r3, #80	; 0x50
   bbd24:	d13b      	bne.n	bbd9e <__gethex+0x156>
   bbd26:	7873      	ldrb	r3, [r6, #1]
   bbd28:	2b2b      	cmp	r3, #43	; 0x2b
   bbd2a:	d02c      	beq.n	bbd86 <__gethex+0x13e>
   bbd2c:	2b2d      	cmp	r3, #45	; 0x2d
   bbd2e:	d02e      	beq.n	bbd8e <__gethex+0x146>
   bbd30:	1c71      	adds	r1, r6, #1
   bbd32:	f04f 0900 	mov.w	r9, #0
   bbd36:	7808      	ldrb	r0, [r1, #0]
   bbd38:	f7ff ff70 	bl	bbc1c <__hexdig_fun>
   bbd3c:	1e43      	subs	r3, r0, #1
   bbd3e:	b2db      	uxtb	r3, r3
   bbd40:	2b18      	cmp	r3, #24
   bbd42:	d82c      	bhi.n	bbd9e <__gethex+0x156>
   bbd44:	f1a0 0210 	sub.w	r2, r0, #16
   bbd48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bbd4c:	f7ff ff66 	bl	bbc1c <__hexdig_fun>
   bbd50:	1e43      	subs	r3, r0, #1
   bbd52:	b2db      	uxtb	r3, r3
   bbd54:	2b18      	cmp	r3, #24
   bbd56:	d91d      	bls.n	bbd94 <__gethex+0x14c>
   bbd58:	f1b9 0f00 	cmp.w	r9, #0
   bbd5c:	d000      	beq.n	bbd60 <__gethex+0x118>
   bbd5e:	4252      	negs	r2, r2
   bbd60:	4415      	add	r5, r2
   bbd62:	f8cb 1000 	str.w	r1, [fp]
   bbd66:	b1e4      	cbz	r4, bbda2 <__gethex+0x15a>
   bbd68:	9b00      	ldr	r3, [sp, #0]
   bbd6a:	2b00      	cmp	r3, #0
   bbd6c:	bf14      	ite	ne
   bbd6e:	2700      	movne	r7, #0
   bbd70:	2706      	moveq	r7, #6
   bbd72:	4638      	mov	r0, r7
   bbd74:	b009      	add	sp, #36	; 0x24
   bbd76:	ecbd 8b02 	vpop	{d8}
   bbd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbd7e:	463e      	mov	r6, r7
   bbd80:	4625      	mov	r5, r4
   bbd82:	2401      	movs	r4, #1
   bbd84:	e7ca      	b.n	bbd1c <__gethex+0xd4>
   bbd86:	f04f 0900 	mov.w	r9, #0
   bbd8a:	1cb1      	adds	r1, r6, #2
   bbd8c:	e7d3      	b.n	bbd36 <__gethex+0xee>
   bbd8e:	f04f 0901 	mov.w	r9, #1
   bbd92:	e7fa      	b.n	bbd8a <__gethex+0x142>
   bbd94:	230a      	movs	r3, #10
   bbd96:	fb03 0202 	mla	r2, r3, r2, r0
   bbd9a:	3a10      	subs	r2, #16
   bbd9c:	e7d4      	b.n	bbd48 <__gethex+0x100>
   bbd9e:	4631      	mov	r1, r6
   bbda0:	e7df      	b.n	bbd62 <__gethex+0x11a>
   bbda2:	1bf3      	subs	r3, r6, r7
   bbda4:	3b01      	subs	r3, #1
   bbda6:	4621      	mov	r1, r4
   bbda8:	2b07      	cmp	r3, #7
   bbdaa:	dc0b      	bgt.n	bbdc4 <__gethex+0x17c>
   bbdac:	ee18 0a10 	vmov	r0, s16
   bbdb0:	f000 fa68 	bl	bc284 <_Balloc>
   bbdb4:	4604      	mov	r4, r0
   bbdb6:	b940      	cbnz	r0, bbdca <__gethex+0x182>
   bbdb8:	4b5d      	ldr	r3, [pc, #372]	; (bbf30 <__gethex+0x2e8>)
   bbdba:	4602      	mov	r2, r0
   bbdbc:	21de      	movs	r1, #222	; 0xde
   bbdbe:	485d      	ldr	r0, [pc, #372]	; (bbf34 <__gethex+0x2ec>)
   bbdc0:	f7fa fdd0 	bl	b6964 <__assert_func>
   bbdc4:	3101      	adds	r1, #1
   bbdc6:	105b      	asrs	r3, r3, #1
   bbdc8:	e7ee      	b.n	bbda8 <__gethex+0x160>
   bbdca:	f100 0914 	add.w	r9, r0, #20
   bbdce:	f04f 0b00 	mov.w	fp, #0
   bbdd2:	f1ca 0301 	rsb	r3, sl, #1
   bbdd6:	f8cd 9008 	str.w	r9, [sp, #8]
   bbdda:	f8cd b000 	str.w	fp, [sp]
   bbdde:	9306      	str	r3, [sp, #24]
   bbde0:	42b7      	cmp	r7, r6
   bbde2:	d340      	bcc.n	bbe66 <__gethex+0x21e>
   bbde4:	9802      	ldr	r0, [sp, #8]
   bbde6:	9b00      	ldr	r3, [sp, #0]
   bbde8:	f840 3b04 	str.w	r3, [r0], #4
   bbdec:	eba0 0009 	sub.w	r0, r0, r9
   bbdf0:	1080      	asrs	r0, r0, #2
   bbdf2:	0146      	lsls	r6, r0, #5
   bbdf4:	6120      	str	r0, [r4, #16]
   bbdf6:	4618      	mov	r0, r3
   bbdf8:	f000 fb36 	bl	bc468 <__hi0bits>
   bbdfc:	1a30      	subs	r0, r6, r0
   bbdfe:	f8d8 6000 	ldr.w	r6, [r8]
   bbe02:	42b0      	cmp	r0, r6
   bbe04:	dd63      	ble.n	bbece <__gethex+0x286>
   bbe06:	1b87      	subs	r7, r0, r6
   bbe08:	4639      	mov	r1, r7
   bbe0a:	4620      	mov	r0, r4
   bbe0c:	f000 feda 	bl	bcbc4 <__any_on>
   bbe10:	4682      	mov	sl, r0
   bbe12:	b1a8      	cbz	r0, bbe40 <__gethex+0x1f8>
   bbe14:	1e7b      	subs	r3, r7, #1
   bbe16:	1159      	asrs	r1, r3, #5
   bbe18:	f003 021f 	and.w	r2, r3, #31
   bbe1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bbe20:	f04f 0a01 	mov.w	sl, #1
   bbe24:	fa0a f202 	lsl.w	r2, sl, r2
   bbe28:	420a      	tst	r2, r1
   bbe2a:	d009      	beq.n	bbe40 <__gethex+0x1f8>
   bbe2c:	4553      	cmp	r3, sl
   bbe2e:	dd05      	ble.n	bbe3c <__gethex+0x1f4>
   bbe30:	1eb9      	subs	r1, r7, #2
   bbe32:	4620      	mov	r0, r4
   bbe34:	f000 fec6 	bl	bcbc4 <__any_on>
   bbe38:	2800      	cmp	r0, #0
   bbe3a:	d145      	bne.n	bbec8 <__gethex+0x280>
   bbe3c:	f04f 0a02 	mov.w	sl, #2
   bbe40:	4639      	mov	r1, r7
   bbe42:	4620      	mov	r0, r4
   bbe44:	f7ff fe98 	bl	bbb78 <rshift>
   bbe48:	443d      	add	r5, r7
   bbe4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bbe4e:	42ab      	cmp	r3, r5
   bbe50:	da4c      	bge.n	bbeec <__gethex+0x2a4>
   bbe52:	ee18 0a10 	vmov	r0, s16
   bbe56:	4621      	mov	r1, r4
   bbe58:	f000 fa54 	bl	bc304 <_Bfree>
   bbe5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bbe5e:	2300      	movs	r3, #0
   bbe60:	6013      	str	r3, [r2, #0]
   bbe62:	27a3      	movs	r7, #163	; 0xa3
   bbe64:	e785      	b.n	bbd72 <__gethex+0x12a>
   bbe66:	1e73      	subs	r3, r6, #1
   bbe68:	9a05      	ldr	r2, [sp, #20]
   bbe6a:	9303      	str	r3, [sp, #12]
   bbe6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bbe70:	4293      	cmp	r3, r2
   bbe72:	d019      	beq.n	bbea8 <__gethex+0x260>
   bbe74:	f1bb 0f20 	cmp.w	fp, #32
   bbe78:	d107      	bne.n	bbe8a <__gethex+0x242>
   bbe7a:	9b02      	ldr	r3, [sp, #8]
   bbe7c:	9a00      	ldr	r2, [sp, #0]
   bbe7e:	f843 2b04 	str.w	r2, [r3], #4
   bbe82:	9302      	str	r3, [sp, #8]
   bbe84:	2300      	movs	r3, #0
   bbe86:	9300      	str	r3, [sp, #0]
   bbe88:	469b      	mov	fp, r3
   bbe8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bbe8e:	f7ff fec5 	bl	bbc1c <__hexdig_fun>
   bbe92:	9b00      	ldr	r3, [sp, #0]
   bbe94:	f000 000f 	and.w	r0, r0, #15
   bbe98:	fa00 f00b 	lsl.w	r0, r0, fp
   bbe9c:	4303      	orrs	r3, r0
   bbe9e:	9300      	str	r3, [sp, #0]
   bbea0:	f10b 0b04 	add.w	fp, fp, #4
   bbea4:	9b03      	ldr	r3, [sp, #12]
   bbea6:	e00d      	b.n	bbec4 <__gethex+0x27c>
   bbea8:	9b03      	ldr	r3, [sp, #12]
   bbeaa:	9a06      	ldr	r2, [sp, #24]
   bbeac:	4413      	add	r3, r2
   bbeae:	42bb      	cmp	r3, r7
   bbeb0:	d3e0      	bcc.n	bbe74 <__gethex+0x22c>
   bbeb2:	4618      	mov	r0, r3
   bbeb4:	9901      	ldr	r1, [sp, #4]
   bbeb6:	9307      	str	r3, [sp, #28]
   bbeb8:	4652      	mov	r2, sl
   bbeba:	f7fe fe9e 	bl	babfa <strncmp>
   bbebe:	9b07      	ldr	r3, [sp, #28]
   bbec0:	2800      	cmp	r0, #0
   bbec2:	d1d7      	bne.n	bbe74 <__gethex+0x22c>
   bbec4:	461e      	mov	r6, r3
   bbec6:	e78b      	b.n	bbde0 <__gethex+0x198>
   bbec8:	f04f 0a03 	mov.w	sl, #3
   bbecc:	e7b8      	b.n	bbe40 <__gethex+0x1f8>
   bbece:	da0a      	bge.n	bbee6 <__gethex+0x29e>
   bbed0:	1a37      	subs	r7, r6, r0
   bbed2:	4621      	mov	r1, r4
   bbed4:	ee18 0a10 	vmov	r0, s16
   bbed8:	463a      	mov	r2, r7
   bbeda:	f000 fc2f 	bl	bc73c <__lshift>
   bbede:	1bed      	subs	r5, r5, r7
   bbee0:	4604      	mov	r4, r0
   bbee2:	f100 0914 	add.w	r9, r0, #20
   bbee6:	f04f 0a00 	mov.w	sl, #0
   bbeea:	e7ae      	b.n	bbe4a <__gethex+0x202>
   bbeec:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bbef0:	42a8      	cmp	r0, r5
   bbef2:	dd72      	ble.n	bbfda <__gethex+0x392>
   bbef4:	1b45      	subs	r5, r0, r5
   bbef6:	42ae      	cmp	r6, r5
   bbef8:	dc36      	bgt.n	bbf68 <__gethex+0x320>
   bbefa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbefe:	2b02      	cmp	r3, #2
   bbf00:	d02a      	beq.n	bbf58 <__gethex+0x310>
   bbf02:	2b03      	cmp	r3, #3
   bbf04:	d02c      	beq.n	bbf60 <__gethex+0x318>
   bbf06:	2b01      	cmp	r3, #1
   bbf08:	d11c      	bne.n	bbf44 <__gethex+0x2fc>
   bbf0a:	42ae      	cmp	r6, r5
   bbf0c:	d11a      	bne.n	bbf44 <__gethex+0x2fc>
   bbf0e:	2e01      	cmp	r6, #1
   bbf10:	d112      	bne.n	bbf38 <__gethex+0x2f0>
   bbf12:	9a04      	ldr	r2, [sp, #16]
   bbf14:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bbf18:	6013      	str	r3, [r2, #0]
   bbf1a:	2301      	movs	r3, #1
   bbf1c:	6123      	str	r3, [r4, #16]
   bbf1e:	f8c9 3000 	str.w	r3, [r9]
   bbf22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbf24:	2762      	movs	r7, #98	; 0x62
   bbf26:	601c      	str	r4, [r3, #0]
   bbf28:	e723      	b.n	bbd72 <__gethex+0x12a>
   bbf2a:	bf00      	nop
   bbf2c:	000bdae8 	.word	0x000bdae8
   bbf30:	000bda50 	.word	0x000bda50
   bbf34:	000bda61 	.word	0x000bda61
   bbf38:	1e71      	subs	r1, r6, #1
   bbf3a:	4620      	mov	r0, r4
   bbf3c:	f000 fe42 	bl	bcbc4 <__any_on>
   bbf40:	2800      	cmp	r0, #0
   bbf42:	d1e6      	bne.n	bbf12 <__gethex+0x2ca>
   bbf44:	ee18 0a10 	vmov	r0, s16
   bbf48:	4621      	mov	r1, r4
   bbf4a:	f000 f9db 	bl	bc304 <_Bfree>
   bbf4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bbf50:	2300      	movs	r3, #0
   bbf52:	6013      	str	r3, [r2, #0]
   bbf54:	2750      	movs	r7, #80	; 0x50
   bbf56:	e70c      	b.n	bbd72 <__gethex+0x12a>
   bbf58:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbf5a:	2b00      	cmp	r3, #0
   bbf5c:	d1f2      	bne.n	bbf44 <__gethex+0x2fc>
   bbf5e:	e7d8      	b.n	bbf12 <__gethex+0x2ca>
   bbf60:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbf62:	2b00      	cmp	r3, #0
   bbf64:	d1d5      	bne.n	bbf12 <__gethex+0x2ca>
   bbf66:	e7ed      	b.n	bbf44 <__gethex+0x2fc>
   bbf68:	1e6f      	subs	r7, r5, #1
   bbf6a:	f1ba 0f00 	cmp.w	sl, #0
   bbf6e:	d131      	bne.n	bbfd4 <__gethex+0x38c>
   bbf70:	b127      	cbz	r7, bbf7c <__gethex+0x334>
   bbf72:	4639      	mov	r1, r7
   bbf74:	4620      	mov	r0, r4
   bbf76:	f000 fe25 	bl	bcbc4 <__any_on>
   bbf7a:	4682      	mov	sl, r0
   bbf7c:	117b      	asrs	r3, r7, #5
   bbf7e:	2101      	movs	r1, #1
   bbf80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bbf84:	f007 071f 	and.w	r7, r7, #31
   bbf88:	fa01 f707 	lsl.w	r7, r1, r7
   bbf8c:	421f      	tst	r7, r3
   bbf8e:	4629      	mov	r1, r5
   bbf90:	4620      	mov	r0, r4
   bbf92:	bf18      	it	ne
   bbf94:	f04a 0a02 	orrne.w	sl, sl, #2
   bbf98:	1b76      	subs	r6, r6, r5
   bbf9a:	f7ff fded 	bl	bbb78 <rshift>
   bbf9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bbfa2:	2702      	movs	r7, #2
   bbfa4:	f1ba 0f00 	cmp.w	sl, #0
   bbfa8:	d048      	beq.n	bc03c <__gethex+0x3f4>
   bbfaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbfae:	2b02      	cmp	r3, #2
   bbfb0:	d015      	beq.n	bbfde <__gethex+0x396>
   bbfb2:	2b03      	cmp	r3, #3
   bbfb4:	d017      	beq.n	bbfe6 <__gethex+0x39e>
   bbfb6:	2b01      	cmp	r3, #1
   bbfb8:	d109      	bne.n	bbfce <__gethex+0x386>
   bbfba:	f01a 0f02 	tst.w	sl, #2
   bbfbe:	d006      	beq.n	bbfce <__gethex+0x386>
   bbfc0:	f8d9 0000 	ldr.w	r0, [r9]
   bbfc4:	ea4a 0a00 	orr.w	sl, sl, r0
   bbfc8:	f01a 0f01 	tst.w	sl, #1
   bbfcc:	d10e      	bne.n	bbfec <__gethex+0x3a4>
   bbfce:	f047 0710 	orr.w	r7, r7, #16
   bbfd2:	e033      	b.n	bc03c <__gethex+0x3f4>
   bbfd4:	f04f 0a01 	mov.w	sl, #1
   bbfd8:	e7d0      	b.n	bbf7c <__gethex+0x334>
   bbfda:	2701      	movs	r7, #1
   bbfdc:	e7e2      	b.n	bbfa4 <__gethex+0x35c>
   bbfde:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbfe0:	f1c3 0301 	rsb	r3, r3, #1
   bbfe4:	9315      	str	r3, [sp, #84]	; 0x54
   bbfe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbfe8:	2b00      	cmp	r3, #0
   bbfea:	d0f0      	beq.n	bbfce <__gethex+0x386>
   bbfec:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bbff0:	f104 0314 	add.w	r3, r4, #20
   bbff4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bbff8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bbffc:	f04f 0c00 	mov.w	ip, #0
   bc000:	4618      	mov	r0, r3
   bc002:	f853 2b04 	ldr.w	r2, [r3], #4
   bc006:	f1b2 3fff 	cmp.w	r2, #4294967295
   bc00a:	d01c      	beq.n	bc046 <__gethex+0x3fe>
   bc00c:	3201      	adds	r2, #1
   bc00e:	6002      	str	r2, [r0, #0]
   bc010:	2f02      	cmp	r7, #2
   bc012:	f104 0314 	add.w	r3, r4, #20
   bc016:	d13f      	bne.n	bc098 <__gethex+0x450>
   bc018:	f8d8 2000 	ldr.w	r2, [r8]
   bc01c:	3a01      	subs	r2, #1
   bc01e:	42b2      	cmp	r2, r6
   bc020:	d10a      	bne.n	bc038 <__gethex+0x3f0>
   bc022:	1171      	asrs	r1, r6, #5
   bc024:	2201      	movs	r2, #1
   bc026:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc02a:	f006 061f 	and.w	r6, r6, #31
   bc02e:	fa02 f606 	lsl.w	r6, r2, r6
   bc032:	421e      	tst	r6, r3
   bc034:	bf18      	it	ne
   bc036:	4617      	movne	r7, r2
   bc038:	f047 0720 	orr.w	r7, r7, #32
   bc03c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc03e:	601c      	str	r4, [r3, #0]
   bc040:	9b04      	ldr	r3, [sp, #16]
   bc042:	601d      	str	r5, [r3, #0]
   bc044:	e695      	b.n	bbd72 <__gethex+0x12a>
   bc046:	4299      	cmp	r1, r3
   bc048:	f843 cc04 	str.w	ip, [r3, #-4]
   bc04c:	d8d8      	bhi.n	bc000 <__gethex+0x3b8>
   bc04e:	68a3      	ldr	r3, [r4, #8]
   bc050:	459b      	cmp	fp, r3
   bc052:	db19      	blt.n	bc088 <__gethex+0x440>
   bc054:	6861      	ldr	r1, [r4, #4]
   bc056:	ee18 0a10 	vmov	r0, s16
   bc05a:	3101      	adds	r1, #1
   bc05c:	f000 f912 	bl	bc284 <_Balloc>
   bc060:	4681      	mov	r9, r0
   bc062:	b918      	cbnz	r0, bc06c <__gethex+0x424>
   bc064:	4b1a      	ldr	r3, [pc, #104]	; (bc0d0 <__gethex+0x488>)
   bc066:	4602      	mov	r2, r0
   bc068:	2184      	movs	r1, #132	; 0x84
   bc06a:	e6a8      	b.n	bbdbe <__gethex+0x176>
   bc06c:	6922      	ldr	r2, [r4, #16]
   bc06e:	3202      	adds	r2, #2
   bc070:	f104 010c 	add.w	r1, r4, #12
   bc074:	0092      	lsls	r2, r2, #2
   bc076:	300c      	adds	r0, #12
   bc078:	f7fe fd19 	bl	baaae <memcpy>
   bc07c:	4621      	mov	r1, r4
   bc07e:	ee18 0a10 	vmov	r0, s16
   bc082:	f000 f93f 	bl	bc304 <_Bfree>
   bc086:	464c      	mov	r4, r9
   bc088:	6923      	ldr	r3, [r4, #16]
   bc08a:	1c5a      	adds	r2, r3, #1
   bc08c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc090:	6122      	str	r2, [r4, #16]
   bc092:	2201      	movs	r2, #1
   bc094:	615a      	str	r2, [r3, #20]
   bc096:	e7bb      	b.n	bc010 <__gethex+0x3c8>
   bc098:	6922      	ldr	r2, [r4, #16]
   bc09a:	455a      	cmp	r2, fp
   bc09c:	dd0b      	ble.n	bc0b6 <__gethex+0x46e>
   bc09e:	2101      	movs	r1, #1
   bc0a0:	4620      	mov	r0, r4
   bc0a2:	f7ff fd69 	bl	bbb78 <rshift>
   bc0a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc0aa:	3501      	adds	r5, #1
   bc0ac:	42ab      	cmp	r3, r5
   bc0ae:	f6ff aed0 	blt.w	bbe52 <__gethex+0x20a>
   bc0b2:	2701      	movs	r7, #1
   bc0b4:	e7c0      	b.n	bc038 <__gethex+0x3f0>
   bc0b6:	f016 061f 	ands.w	r6, r6, #31
   bc0ba:	d0fa      	beq.n	bc0b2 <__gethex+0x46a>
   bc0bc:	4453      	add	r3, sl
   bc0be:	f1c6 0620 	rsb	r6, r6, #32
   bc0c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc0c6:	f000 f9cf 	bl	bc468 <__hi0bits>
   bc0ca:	42b0      	cmp	r0, r6
   bc0cc:	dbe7      	blt.n	bc09e <__gethex+0x456>
   bc0ce:	e7f0      	b.n	bc0b2 <__gethex+0x46a>
   bc0d0:	000bda50 	.word	0x000bda50

000bc0d4 <L_shift>:
   bc0d4:	f1c2 0208 	rsb	r2, r2, #8
   bc0d8:	0092      	lsls	r2, r2, #2
   bc0da:	b570      	push	{r4, r5, r6, lr}
   bc0dc:	f1c2 0620 	rsb	r6, r2, #32
   bc0e0:	6843      	ldr	r3, [r0, #4]
   bc0e2:	6804      	ldr	r4, [r0, #0]
   bc0e4:	fa03 f506 	lsl.w	r5, r3, r6
   bc0e8:	432c      	orrs	r4, r5
   bc0ea:	40d3      	lsrs	r3, r2
   bc0ec:	6004      	str	r4, [r0, #0]
   bc0ee:	f840 3f04 	str.w	r3, [r0, #4]!
   bc0f2:	4288      	cmp	r0, r1
   bc0f4:	d3f4      	bcc.n	bc0e0 <L_shift+0xc>
   bc0f6:	bd70      	pop	{r4, r5, r6, pc}

000bc0f8 <__match>:
   bc0f8:	b530      	push	{r4, r5, lr}
   bc0fa:	6803      	ldr	r3, [r0, #0]
   bc0fc:	3301      	adds	r3, #1
   bc0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc102:	b914      	cbnz	r4, bc10a <__match+0x12>
   bc104:	6003      	str	r3, [r0, #0]
   bc106:	2001      	movs	r0, #1
   bc108:	bd30      	pop	{r4, r5, pc}
   bc10a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc10e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc112:	2d19      	cmp	r5, #25
   bc114:	bf98      	it	ls
   bc116:	3220      	addls	r2, #32
   bc118:	42a2      	cmp	r2, r4
   bc11a:	d0f0      	beq.n	bc0fe <__match+0x6>
   bc11c:	2000      	movs	r0, #0
   bc11e:	e7f3      	b.n	bc108 <__match+0x10>

000bc120 <__hexnan>:
   bc120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc124:	680b      	ldr	r3, [r1, #0]
   bc126:	115e      	asrs	r6, r3, #5
   bc128:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc12c:	f013 031f 	ands.w	r3, r3, #31
   bc130:	b087      	sub	sp, #28
   bc132:	bf18      	it	ne
   bc134:	3604      	addne	r6, #4
   bc136:	2500      	movs	r5, #0
   bc138:	1f37      	subs	r7, r6, #4
   bc13a:	4690      	mov	r8, r2
   bc13c:	6802      	ldr	r2, [r0, #0]
   bc13e:	9301      	str	r3, [sp, #4]
   bc140:	4682      	mov	sl, r0
   bc142:	f846 5c04 	str.w	r5, [r6, #-4]
   bc146:	46b9      	mov	r9, r7
   bc148:	463c      	mov	r4, r7
   bc14a:	9502      	str	r5, [sp, #8]
   bc14c:	46ab      	mov	fp, r5
   bc14e:	7851      	ldrb	r1, [r2, #1]
   bc150:	1c53      	adds	r3, r2, #1
   bc152:	9303      	str	r3, [sp, #12]
   bc154:	b341      	cbz	r1, bc1a8 <__hexnan+0x88>
   bc156:	4608      	mov	r0, r1
   bc158:	9205      	str	r2, [sp, #20]
   bc15a:	9104      	str	r1, [sp, #16]
   bc15c:	f7ff fd5e 	bl	bbc1c <__hexdig_fun>
   bc160:	2800      	cmp	r0, #0
   bc162:	d14f      	bne.n	bc204 <__hexnan+0xe4>
   bc164:	9904      	ldr	r1, [sp, #16]
   bc166:	9a05      	ldr	r2, [sp, #20]
   bc168:	2920      	cmp	r1, #32
   bc16a:	d818      	bhi.n	bc19e <__hexnan+0x7e>
   bc16c:	9b02      	ldr	r3, [sp, #8]
   bc16e:	459b      	cmp	fp, r3
   bc170:	dd13      	ble.n	bc19a <__hexnan+0x7a>
   bc172:	454c      	cmp	r4, r9
   bc174:	d206      	bcs.n	bc184 <__hexnan+0x64>
   bc176:	2d07      	cmp	r5, #7
   bc178:	dc04      	bgt.n	bc184 <__hexnan+0x64>
   bc17a:	462a      	mov	r2, r5
   bc17c:	4649      	mov	r1, r9
   bc17e:	4620      	mov	r0, r4
   bc180:	f7ff ffa8 	bl	bc0d4 <L_shift>
   bc184:	4544      	cmp	r4, r8
   bc186:	d950      	bls.n	bc22a <__hexnan+0x10a>
   bc188:	2300      	movs	r3, #0
   bc18a:	f1a4 0904 	sub.w	r9, r4, #4
   bc18e:	f844 3c04 	str.w	r3, [r4, #-4]
   bc192:	f8cd b008 	str.w	fp, [sp, #8]
   bc196:	464c      	mov	r4, r9
   bc198:	461d      	mov	r5, r3
   bc19a:	9a03      	ldr	r2, [sp, #12]
   bc19c:	e7d7      	b.n	bc14e <__hexnan+0x2e>
   bc19e:	2929      	cmp	r1, #41	; 0x29
   bc1a0:	d156      	bne.n	bc250 <__hexnan+0x130>
   bc1a2:	3202      	adds	r2, #2
   bc1a4:	f8ca 2000 	str.w	r2, [sl]
   bc1a8:	f1bb 0f00 	cmp.w	fp, #0
   bc1ac:	d050      	beq.n	bc250 <__hexnan+0x130>
   bc1ae:	454c      	cmp	r4, r9
   bc1b0:	d206      	bcs.n	bc1c0 <__hexnan+0xa0>
   bc1b2:	2d07      	cmp	r5, #7
   bc1b4:	dc04      	bgt.n	bc1c0 <__hexnan+0xa0>
   bc1b6:	462a      	mov	r2, r5
   bc1b8:	4649      	mov	r1, r9
   bc1ba:	4620      	mov	r0, r4
   bc1bc:	f7ff ff8a 	bl	bc0d4 <L_shift>
   bc1c0:	4544      	cmp	r4, r8
   bc1c2:	d934      	bls.n	bc22e <__hexnan+0x10e>
   bc1c4:	f1a8 0204 	sub.w	r2, r8, #4
   bc1c8:	4623      	mov	r3, r4
   bc1ca:	f853 1b04 	ldr.w	r1, [r3], #4
   bc1ce:	f842 1f04 	str.w	r1, [r2, #4]!
   bc1d2:	429f      	cmp	r7, r3
   bc1d4:	d2f9      	bcs.n	bc1ca <__hexnan+0xaa>
   bc1d6:	1b3b      	subs	r3, r7, r4
   bc1d8:	f023 0303 	bic.w	r3, r3, #3
   bc1dc:	3304      	adds	r3, #4
   bc1de:	3401      	adds	r4, #1
   bc1e0:	3e03      	subs	r6, #3
   bc1e2:	42b4      	cmp	r4, r6
   bc1e4:	bf88      	it	hi
   bc1e6:	2304      	movhi	r3, #4
   bc1e8:	4443      	add	r3, r8
   bc1ea:	2200      	movs	r2, #0
   bc1ec:	f843 2b04 	str.w	r2, [r3], #4
   bc1f0:	429f      	cmp	r7, r3
   bc1f2:	d2fb      	bcs.n	bc1ec <__hexnan+0xcc>
   bc1f4:	683b      	ldr	r3, [r7, #0]
   bc1f6:	b91b      	cbnz	r3, bc200 <__hexnan+0xe0>
   bc1f8:	4547      	cmp	r7, r8
   bc1fa:	d127      	bne.n	bc24c <__hexnan+0x12c>
   bc1fc:	2301      	movs	r3, #1
   bc1fe:	603b      	str	r3, [r7, #0]
   bc200:	2005      	movs	r0, #5
   bc202:	e026      	b.n	bc252 <__hexnan+0x132>
   bc204:	3501      	adds	r5, #1
   bc206:	2d08      	cmp	r5, #8
   bc208:	f10b 0b01 	add.w	fp, fp, #1
   bc20c:	dd06      	ble.n	bc21c <__hexnan+0xfc>
   bc20e:	4544      	cmp	r4, r8
   bc210:	d9c3      	bls.n	bc19a <__hexnan+0x7a>
   bc212:	2300      	movs	r3, #0
   bc214:	f844 3c04 	str.w	r3, [r4, #-4]
   bc218:	2501      	movs	r5, #1
   bc21a:	3c04      	subs	r4, #4
   bc21c:	6822      	ldr	r2, [r4, #0]
   bc21e:	f000 000f 	and.w	r0, r0, #15
   bc222:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc226:	6022      	str	r2, [r4, #0]
   bc228:	e7b7      	b.n	bc19a <__hexnan+0x7a>
   bc22a:	2508      	movs	r5, #8
   bc22c:	e7b5      	b.n	bc19a <__hexnan+0x7a>
   bc22e:	9b01      	ldr	r3, [sp, #4]
   bc230:	2b00      	cmp	r3, #0
   bc232:	d0df      	beq.n	bc1f4 <__hexnan+0xd4>
   bc234:	f04f 32ff 	mov.w	r2, #4294967295
   bc238:	f1c3 0320 	rsb	r3, r3, #32
   bc23c:	fa22 f303 	lsr.w	r3, r2, r3
   bc240:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc244:	401a      	ands	r2, r3
   bc246:	f846 2c04 	str.w	r2, [r6, #-4]
   bc24a:	e7d3      	b.n	bc1f4 <__hexnan+0xd4>
   bc24c:	3f04      	subs	r7, #4
   bc24e:	e7d1      	b.n	bc1f4 <__hexnan+0xd4>
   bc250:	2004      	movs	r0, #4
   bc252:	b007      	add	sp, #28
   bc254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc258 <__retarget_lock_acquire_recursive>:
   bc258:	4770      	bx	lr

000bc25a <__retarget_lock_release>:
   bc25a:	4770      	bx	lr

000bc25c <__retarget_lock_release_recursive>:
   bc25c:	4770      	bx	lr

000bc25e <__ascii_mbtowc>:
   bc25e:	b082      	sub	sp, #8
   bc260:	b901      	cbnz	r1, bc264 <__ascii_mbtowc+0x6>
   bc262:	a901      	add	r1, sp, #4
   bc264:	b142      	cbz	r2, bc278 <__ascii_mbtowc+0x1a>
   bc266:	b14b      	cbz	r3, bc27c <__ascii_mbtowc+0x1e>
   bc268:	7813      	ldrb	r3, [r2, #0]
   bc26a:	600b      	str	r3, [r1, #0]
   bc26c:	7812      	ldrb	r2, [r2, #0]
   bc26e:	1e10      	subs	r0, r2, #0
   bc270:	bf18      	it	ne
   bc272:	2001      	movne	r0, #1
   bc274:	b002      	add	sp, #8
   bc276:	4770      	bx	lr
   bc278:	4610      	mov	r0, r2
   bc27a:	e7fb      	b.n	bc274 <__ascii_mbtowc+0x16>
   bc27c:	f06f 0001 	mvn.w	r0, #1
   bc280:	e7f8      	b.n	bc274 <__ascii_mbtowc+0x16>
	...

000bc284 <_Balloc>:
   bc284:	b570      	push	{r4, r5, r6, lr}
   bc286:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc288:	4604      	mov	r4, r0
   bc28a:	460d      	mov	r5, r1
   bc28c:	b976      	cbnz	r6, bc2ac <_Balloc+0x28>
   bc28e:	2010      	movs	r0, #16
   bc290:	f7fa fb20 	bl	b68d4 <malloc>
   bc294:	4602      	mov	r2, r0
   bc296:	6260      	str	r0, [r4, #36]	; 0x24
   bc298:	b920      	cbnz	r0, bc2a4 <_Balloc+0x20>
   bc29a:	4b18      	ldr	r3, [pc, #96]	; (bc2fc <_Balloc+0x78>)
   bc29c:	4818      	ldr	r0, [pc, #96]	; (bc300 <_Balloc+0x7c>)
   bc29e:	2166      	movs	r1, #102	; 0x66
   bc2a0:	f7fa fb60 	bl	b6964 <__assert_func>
   bc2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc2a8:	6006      	str	r6, [r0, #0]
   bc2aa:	60c6      	str	r6, [r0, #12]
   bc2ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc2ae:	68f3      	ldr	r3, [r6, #12]
   bc2b0:	b183      	cbz	r3, bc2d4 <_Balloc+0x50>
   bc2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc2b4:	68db      	ldr	r3, [r3, #12]
   bc2b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc2ba:	b9b8      	cbnz	r0, bc2ec <_Balloc+0x68>
   bc2bc:	2101      	movs	r1, #1
   bc2be:	fa01 f605 	lsl.w	r6, r1, r5
   bc2c2:	1d72      	adds	r2, r6, #5
   bc2c4:	0092      	lsls	r2, r2, #2
   bc2c6:	4620      	mov	r0, r4
   bc2c8:	f000 fc9d 	bl	bcc06 <_calloc_r>
   bc2cc:	b160      	cbz	r0, bc2e8 <_Balloc+0x64>
   bc2ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc2d2:	e00e      	b.n	bc2f2 <_Balloc+0x6e>
   bc2d4:	2221      	movs	r2, #33	; 0x21
   bc2d6:	2104      	movs	r1, #4
   bc2d8:	4620      	mov	r0, r4
   bc2da:	f000 fc94 	bl	bcc06 <_calloc_r>
   bc2de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc2e0:	60f0      	str	r0, [r6, #12]
   bc2e2:	68db      	ldr	r3, [r3, #12]
   bc2e4:	2b00      	cmp	r3, #0
   bc2e6:	d1e4      	bne.n	bc2b2 <_Balloc+0x2e>
   bc2e8:	2000      	movs	r0, #0
   bc2ea:	bd70      	pop	{r4, r5, r6, pc}
   bc2ec:	6802      	ldr	r2, [r0, #0]
   bc2ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc2f2:	2300      	movs	r3, #0
   bc2f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc2f8:	e7f7      	b.n	bc2ea <_Balloc+0x66>
   bc2fa:	bf00      	nop
   bc2fc:	000bd7dd 	.word	0x000bd7dd
   bc300:	000bdafc 	.word	0x000bdafc

000bc304 <_Bfree>:
   bc304:	b570      	push	{r4, r5, r6, lr}
   bc306:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc308:	4605      	mov	r5, r0
   bc30a:	460c      	mov	r4, r1
   bc30c:	b976      	cbnz	r6, bc32c <_Bfree+0x28>
   bc30e:	2010      	movs	r0, #16
   bc310:	f7fa fae0 	bl	b68d4 <malloc>
   bc314:	4602      	mov	r2, r0
   bc316:	6268      	str	r0, [r5, #36]	; 0x24
   bc318:	b920      	cbnz	r0, bc324 <_Bfree+0x20>
   bc31a:	4b09      	ldr	r3, [pc, #36]	; (bc340 <_Bfree+0x3c>)
   bc31c:	4809      	ldr	r0, [pc, #36]	; (bc344 <_Bfree+0x40>)
   bc31e:	218a      	movs	r1, #138	; 0x8a
   bc320:	f7fa fb20 	bl	b6964 <__assert_func>
   bc324:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc328:	6006      	str	r6, [r0, #0]
   bc32a:	60c6      	str	r6, [r0, #12]
   bc32c:	b13c      	cbz	r4, bc33e <_Bfree+0x3a>
   bc32e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc330:	6862      	ldr	r2, [r4, #4]
   bc332:	68db      	ldr	r3, [r3, #12]
   bc334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc338:	6021      	str	r1, [r4, #0]
   bc33a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc33e:	bd70      	pop	{r4, r5, r6, pc}
   bc340:	000bd7dd 	.word	0x000bd7dd
   bc344:	000bdafc 	.word	0x000bdafc

000bc348 <__multadd>:
   bc348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc34c:	690d      	ldr	r5, [r1, #16]
   bc34e:	4607      	mov	r7, r0
   bc350:	460c      	mov	r4, r1
   bc352:	461e      	mov	r6, r3
   bc354:	f101 0c14 	add.w	ip, r1, #20
   bc358:	2000      	movs	r0, #0
   bc35a:	f8dc 3000 	ldr.w	r3, [ip]
   bc35e:	b299      	uxth	r1, r3
   bc360:	fb02 6101 	mla	r1, r2, r1, r6
   bc364:	0c1e      	lsrs	r6, r3, #16
   bc366:	0c0b      	lsrs	r3, r1, #16
   bc368:	fb02 3306 	mla	r3, r2, r6, r3
   bc36c:	b289      	uxth	r1, r1
   bc36e:	3001      	adds	r0, #1
   bc370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc374:	4285      	cmp	r5, r0
   bc376:	f84c 1b04 	str.w	r1, [ip], #4
   bc37a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc37e:	dcec      	bgt.n	bc35a <__multadd+0x12>
   bc380:	b30e      	cbz	r6, bc3c6 <__multadd+0x7e>
   bc382:	68a3      	ldr	r3, [r4, #8]
   bc384:	42ab      	cmp	r3, r5
   bc386:	dc19      	bgt.n	bc3bc <__multadd+0x74>
   bc388:	6861      	ldr	r1, [r4, #4]
   bc38a:	4638      	mov	r0, r7
   bc38c:	3101      	adds	r1, #1
   bc38e:	f7ff ff79 	bl	bc284 <_Balloc>
   bc392:	4680      	mov	r8, r0
   bc394:	b928      	cbnz	r0, bc3a2 <__multadd+0x5a>
   bc396:	4602      	mov	r2, r0
   bc398:	4b0c      	ldr	r3, [pc, #48]	; (bc3cc <__multadd+0x84>)
   bc39a:	480d      	ldr	r0, [pc, #52]	; (bc3d0 <__multadd+0x88>)
   bc39c:	21b5      	movs	r1, #181	; 0xb5
   bc39e:	f7fa fae1 	bl	b6964 <__assert_func>
   bc3a2:	6922      	ldr	r2, [r4, #16]
   bc3a4:	3202      	adds	r2, #2
   bc3a6:	f104 010c 	add.w	r1, r4, #12
   bc3aa:	0092      	lsls	r2, r2, #2
   bc3ac:	300c      	adds	r0, #12
   bc3ae:	f7fe fb7e 	bl	baaae <memcpy>
   bc3b2:	4621      	mov	r1, r4
   bc3b4:	4638      	mov	r0, r7
   bc3b6:	f7ff ffa5 	bl	bc304 <_Bfree>
   bc3ba:	4644      	mov	r4, r8
   bc3bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc3c0:	3501      	adds	r5, #1
   bc3c2:	615e      	str	r6, [r3, #20]
   bc3c4:	6125      	str	r5, [r4, #16]
   bc3c6:	4620      	mov	r0, r4
   bc3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc3cc:	000bda50 	.word	0x000bda50
   bc3d0:	000bdafc 	.word	0x000bdafc

000bc3d4 <__s2b>:
   bc3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc3d8:	460c      	mov	r4, r1
   bc3da:	4615      	mov	r5, r2
   bc3dc:	461f      	mov	r7, r3
   bc3de:	2209      	movs	r2, #9
   bc3e0:	3308      	adds	r3, #8
   bc3e2:	4606      	mov	r6, r0
   bc3e4:	fb93 f3f2 	sdiv	r3, r3, r2
   bc3e8:	2100      	movs	r1, #0
   bc3ea:	2201      	movs	r2, #1
   bc3ec:	429a      	cmp	r2, r3
   bc3ee:	db09      	blt.n	bc404 <__s2b+0x30>
   bc3f0:	4630      	mov	r0, r6
   bc3f2:	f7ff ff47 	bl	bc284 <_Balloc>
   bc3f6:	b940      	cbnz	r0, bc40a <__s2b+0x36>
   bc3f8:	4602      	mov	r2, r0
   bc3fa:	4b19      	ldr	r3, [pc, #100]	; (bc460 <__s2b+0x8c>)
   bc3fc:	4819      	ldr	r0, [pc, #100]	; (bc464 <__s2b+0x90>)
   bc3fe:	21ce      	movs	r1, #206	; 0xce
   bc400:	f7fa fab0 	bl	b6964 <__assert_func>
   bc404:	0052      	lsls	r2, r2, #1
   bc406:	3101      	adds	r1, #1
   bc408:	e7f0      	b.n	bc3ec <__s2b+0x18>
   bc40a:	9b08      	ldr	r3, [sp, #32]
   bc40c:	6143      	str	r3, [r0, #20]
   bc40e:	2d09      	cmp	r5, #9
   bc410:	f04f 0301 	mov.w	r3, #1
   bc414:	6103      	str	r3, [r0, #16]
   bc416:	dd16      	ble.n	bc446 <__s2b+0x72>
   bc418:	f104 0909 	add.w	r9, r4, #9
   bc41c:	46c8      	mov	r8, r9
   bc41e:	442c      	add	r4, r5
   bc420:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc424:	4601      	mov	r1, r0
   bc426:	3b30      	subs	r3, #48	; 0x30
   bc428:	220a      	movs	r2, #10
   bc42a:	4630      	mov	r0, r6
   bc42c:	f7ff ff8c 	bl	bc348 <__multadd>
   bc430:	45a0      	cmp	r8, r4
   bc432:	d1f5      	bne.n	bc420 <__s2b+0x4c>
   bc434:	f1a5 0408 	sub.w	r4, r5, #8
   bc438:	444c      	add	r4, r9
   bc43a:	1b2d      	subs	r5, r5, r4
   bc43c:	1963      	adds	r3, r4, r5
   bc43e:	42bb      	cmp	r3, r7
   bc440:	db04      	blt.n	bc44c <__s2b+0x78>
   bc442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc446:	340a      	adds	r4, #10
   bc448:	2509      	movs	r5, #9
   bc44a:	e7f6      	b.n	bc43a <__s2b+0x66>
   bc44c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc450:	4601      	mov	r1, r0
   bc452:	3b30      	subs	r3, #48	; 0x30
   bc454:	220a      	movs	r2, #10
   bc456:	4630      	mov	r0, r6
   bc458:	f7ff ff76 	bl	bc348 <__multadd>
   bc45c:	e7ee      	b.n	bc43c <__s2b+0x68>
   bc45e:	bf00      	nop
   bc460:	000bda50 	.word	0x000bda50
   bc464:	000bdafc 	.word	0x000bdafc

000bc468 <__hi0bits>:
   bc468:	0c03      	lsrs	r3, r0, #16
   bc46a:	041b      	lsls	r3, r3, #16
   bc46c:	b9d3      	cbnz	r3, bc4a4 <__hi0bits+0x3c>
   bc46e:	0400      	lsls	r0, r0, #16
   bc470:	2310      	movs	r3, #16
   bc472:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bc476:	bf04      	itt	eq
   bc478:	0200      	lsleq	r0, r0, #8
   bc47a:	3308      	addeq	r3, #8
   bc47c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bc480:	bf04      	itt	eq
   bc482:	0100      	lsleq	r0, r0, #4
   bc484:	3304      	addeq	r3, #4
   bc486:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bc48a:	bf04      	itt	eq
   bc48c:	0080      	lsleq	r0, r0, #2
   bc48e:	3302      	addeq	r3, #2
   bc490:	2800      	cmp	r0, #0
   bc492:	db05      	blt.n	bc4a0 <__hi0bits+0x38>
   bc494:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bc498:	f103 0301 	add.w	r3, r3, #1
   bc49c:	bf08      	it	eq
   bc49e:	2320      	moveq	r3, #32
   bc4a0:	4618      	mov	r0, r3
   bc4a2:	4770      	bx	lr
   bc4a4:	2300      	movs	r3, #0
   bc4a6:	e7e4      	b.n	bc472 <__hi0bits+0xa>

000bc4a8 <__lo0bits>:
   bc4a8:	6803      	ldr	r3, [r0, #0]
   bc4aa:	f013 0207 	ands.w	r2, r3, #7
   bc4ae:	4601      	mov	r1, r0
   bc4b0:	d00b      	beq.n	bc4ca <__lo0bits+0x22>
   bc4b2:	07da      	lsls	r2, r3, #31
   bc4b4:	d423      	bmi.n	bc4fe <__lo0bits+0x56>
   bc4b6:	0798      	lsls	r0, r3, #30
   bc4b8:	bf49      	itett	mi
   bc4ba:	085b      	lsrmi	r3, r3, #1
   bc4bc:	089b      	lsrpl	r3, r3, #2
   bc4be:	2001      	movmi	r0, #1
   bc4c0:	600b      	strmi	r3, [r1, #0]
   bc4c2:	bf5c      	itt	pl
   bc4c4:	600b      	strpl	r3, [r1, #0]
   bc4c6:	2002      	movpl	r0, #2
   bc4c8:	4770      	bx	lr
   bc4ca:	b298      	uxth	r0, r3
   bc4cc:	b9a8      	cbnz	r0, bc4fa <__lo0bits+0x52>
   bc4ce:	0c1b      	lsrs	r3, r3, #16
   bc4d0:	2010      	movs	r0, #16
   bc4d2:	b2da      	uxtb	r2, r3
   bc4d4:	b90a      	cbnz	r2, bc4da <__lo0bits+0x32>
   bc4d6:	3008      	adds	r0, #8
   bc4d8:	0a1b      	lsrs	r3, r3, #8
   bc4da:	071a      	lsls	r2, r3, #28
   bc4dc:	bf04      	itt	eq
   bc4de:	091b      	lsreq	r3, r3, #4
   bc4e0:	3004      	addeq	r0, #4
   bc4e2:	079a      	lsls	r2, r3, #30
   bc4e4:	bf04      	itt	eq
   bc4e6:	089b      	lsreq	r3, r3, #2
   bc4e8:	3002      	addeq	r0, #2
   bc4ea:	07da      	lsls	r2, r3, #31
   bc4ec:	d403      	bmi.n	bc4f6 <__lo0bits+0x4e>
   bc4ee:	085b      	lsrs	r3, r3, #1
   bc4f0:	f100 0001 	add.w	r0, r0, #1
   bc4f4:	d005      	beq.n	bc502 <__lo0bits+0x5a>
   bc4f6:	600b      	str	r3, [r1, #0]
   bc4f8:	4770      	bx	lr
   bc4fa:	4610      	mov	r0, r2
   bc4fc:	e7e9      	b.n	bc4d2 <__lo0bits+0x2a>
   bc4fe:	2000      	movs	r0, #0
   bc500:	4770      	bx	lr
   bc502:	2020      	movs	r0, #32
   bc504:	4770      	bx	lr
	...

000bc508 <__i2b>:
   bc508:	b510      	push	{r4, lr}
   bc50a:	460c      	mov	r4, r1
   bc50c:	2101      	movs	r1, #1
   bc50e:	f7ff feb9 	bl	bc284 <_Balloc>
   bc512:	4602      	mov	r2, r0
   bc514:	b928      	cbnz	r0, bc522 <__i2b+0x1a>
   bc516:	4b05      	ldr	r3, [pc, #20]	; (bc52c <__i2b+0x24>)
   bc518:	4805      	ldr	r0, [pc, #20]	; (bc530 <__i2b+0x28>)
   bc51a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bc51e:	f7fa fa21 	bl	b6964 <__assert_func>
   bc522:	2301      	movs	r3, #1
   bc524:	6144      	str	r4, [r0, #20]
   bc526:	6103      	str	r3, [r0, #16]
   bc528:	bd10      	pop	{r4, pc}
   bc52a:	bf00      	nop
   bc52c:	000bda50 	.word	0x000bda50
   bc530:	000bdafc 	.word	0x000bdafc

000bc534 <__multiply>:
   bc534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc538:	4691      	mov	r9, r2
   bc53a:	690a      	ldr	r2, [r1, #16]
   bc53c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc540:	429a      	cmp	r2, r3
   bc542:	bfb8      	it	lt
   bc544:	460b      	movlt	r3, r1
   bc546:	460c      	mov	r4, r1
   bc548:	bfbc      	itt	lt
   bc54a:	464c      	movlt	r4, r9
   bc54c:	4699      	movlt	r9, r3
   bc54e:	6927      	ldr	r7, [r4, #16]
   bc550:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bc554:	68a3      	ldr	r3, [r4, #8]
   bc556:	6861      	ldr	r1, [r4, #4]
   bc558:	eb07 060a 	add.w	r6, r7, sl
   bc55c:	42b3      	cmp	r3, r6
   bc55e:	b085      	sub	sp, #20
   bc560:	bfb8      	it	lt
   bc562:	3101      	addlt	r1, #1
   bc564:	f7ff fe8e 	bl	bc284 <_Balloc>
   bc568:	b930      	cbnz	r0, bc578 <__multiply+0x44>
   bc56a:	4602      	mov	r2, r0
   bc56c:	4b44      	ldr	r3, [pc, #272]	; (bc680 <__multiply+0x14c>)
   bc56e:	4845      	ldr	r0, [pc, #276]	; (bc684 <__multiply+0x150>)
   bc570:	f240 115d 	movw	r1, #349	; 0x15d
   bc574:	f7fa f9f6 	bl	b6964 <__assert_func>
   bc578:	f100 0514 	add.w	r5, r0, #20
   bc57c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bc580:	462b      	mov	r3, r5
   bc582:	2200      	movs	r2, #0
   bc584:	4543      	cmp	r3, r8
   bc586:	d321      	bcc.n	bc5cc <__multiply+0x98>
   bc588:	f104 0314 	add.w	r3, r4, #20
   bc58c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bc590:	f109 0314 	add.w	r3, r9, #20
   bc594:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bc598:	9202      	str	r2, [sp, #8]
   bc59a:	1b3a      	subs	r2, r7, r4
   bc59c:	3a15      	subs	r2, #21
   bc59e:	f022 0203 	bic.w	r2, r2, #3
   bc5a2:	3204      	adds	r2, #4
   bc5a4:	f104 0115 	add.w	r1, r4, #21
   bc5a8:	428f      	cmp	r7, r1
   bc5aa:	bf38      	it	cc
   bc5ac:	2204      	movcc	r2, #4
   bc5ae:	9201      	str	r2, [sp, #4]
   bc5b0:	9a02      	ldr	r2, [sp, #8]
   bc5b2:	9303      	str	r3, [sp, #12]
   bc5b4:	429a      	cmp	r2, r3
   bc5b6:	d80c      	bhi.n	bc5d2 <__multiply+0x9e>
   bc5b8:	2e00      	cmp	r6, #0
   bc5ba:	dd03      	ble.n	bc5c4 <__multiply+0x90>
   bc5bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bc5c0:	2b00      	cmp	r3, #0
   bc5c2:	d05a      	beq.n	bc67a <__multiply+0x146>
   bc5c4:	6106      	str	r6, [r0, #16]
   bc5c6:	b005      	add	sp, #20
   bc5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc5cc:	f843 2b04 	str.w	r2, [r3], #4
   bc5d0:	e7d8      	b.n	bc584 <__multiply+0x50>
   bc5d2:	f8b3 a000 	ldrh.w	sl, [r3]
   bc5d6:	f1ba 0f00 	cmp.w	sl, #0
   bc5da:	d024      	beq.n	bc626 <__multiply+0xf2>
   bc5dc:	f104 0e14 	add.w	lr, r4, #20
   bc5e0:	46a9      	mov	r9, r5
   bc5e2:	f04f 0c00 	mov.w	ip, #0
   bc5e6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bc5ea:	f8d9 1000 	ldr.w	r1, [r9]
   bc5ee:	fa1f fb82 	uxth.w	fp, r2
   bc5f2:	b289      	uxth	r1, r1
   bc5f4:	fb0a 110b 	mla	r1, sl, fp, r1
   bc5f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bc5fc:	f8d9 2000 	ldr.w	r2, [r9]
   bc600:	4461      	add	r1, ip
   bc602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc606:	fb0a c20b 	mla	r2, sl, fp, ip
   bc60a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bc60e:	b289      	uxth	r1, r1
   bc610:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bc614:	4577      	cmp	r7, lr
   bc616:	f849 1b04 	str.w	r1, [r9], #4
   bc61a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc61e:	d8e2      	bhi.n	bc5e6 <__multiply+0xb2>
   bc620:	9a01      	ldr	r2, [sp, #4]
   bc622:	f845 c002 	str.w	ip, [r5, r2]
   bc626:	9a03      	ldr	r2, [sp, #12]
   bc628:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bc62c:	3304      	adds	r3, #4
   bc62e:	f1b9 0f00 	cmp.w	r9, #0
   bc632:	d020      	beq.n	bc676 <__multiply+0x142>
   bc634:	6829      	ldr	r1, [r5, #0]
   bc636:	f104 0c14 	add.w	ip, r4, #20
   bc63a:	46ae      	mov	lr, r5
   bc63c:	f04f 0a00 	mov.w	sl, #0
   bc640:	f8bc b000 	ldrh.w	fp, [ip]
   bc644:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bc648:	fb09 220b 	mla	r2, r9, fp, r2
   bc64c:	4492      	add	sl, r2
   bc64e:	b289      	uxth	r1, r1
   bc650:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bc654:	f84e 1b04 	str.w	r1, [lr], #4
   bc658:	f85c 2b04 	ldr.w	r2, [ip], #4
   bc65c:	f8be 1000 	ldrh.w	r1, [lr]
   bc660:	0c12      	lsrs	r2, r2, #16
   bc662:	fb09 1102 	mla	r1, r9, r2, r1
   bc666:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bc66a:	4567      	cmp	r7, ip
   bc66c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bc670:	d8e6      	bhi.n	bc640 <__multiply+0x10c>
   bc672:	9a01      	ldr	r2, [sp, #4]
   bc674:	50a9      	str	r1, [r5, r2]
   bc676:	3504      	adds	r5, #4
   bc678:	e79a      	b.n	bc5b0 <__multiply+0x7c>
   bc67a:	3e01      	subs	r6, #1
   bc67c:	e79c      	b.n	bc5b8 <__multiply+0x84>
   bc67e:	bf00      	nop
   bc680:	000bda50 	.word	0x000bda50
   bc684:	000bdafc 	.word	0x000bdafc

000bc688 <__pow5mult>:
   bc688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc68c:	4615      	mov	r5, r2
   bc68e:	f012 0203 	ands.w	r2, r2, #3
   bc692:	4606      	mov	r6, r0
   bc694:	460f      	mov	r7, r1
   bc696:	d007      	beq.n	bc6a8 <__pow5mult+0x20>
   bc698:	4c25      	ldr	r4, [pc, #148]	; (bc730 <__pow5mult+0xa8>)
   bc69a:	3a01      	subs	r2, #1
   bc69c:	2300      	movs	r3, #0
   bc69e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bc6a2:	f7ff fe51 	bl	bc348 <__multadd>
   bc6a6:	4607      	mov	r7, r0
   bc6a8:	10ad      	asrs	r5, r5, #2
   bc6aa:	d03d      	beq.n	bc728 <__pow5mult+0xa0>
   bc6ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc6ae:	b97c      	cbnz	r4, bc6d0 <__pow5mult+0x48>
   bc6b0:	2010      	movs	r0, #16
   bc6b2:	f7fa f90f 	bl	b68d4 <malloc>
   bc6b6:	4602      	mov	r2, r0
   bc6b8:	6270      	str	r0, [r6, #36]	; 0x24
   bc6ba:	b928      	cbnz	r0, bc6c8 <__pow5mult+0x40>
   bc6bc:	4b1d      	ldr	r3, [pc, #116]	; (bc734 <__pow5mult+0xac>)
   bc6be:	481e      	ldr	r0, [pc, #120]	; (bc738 <__pow5mult+0xb0>)
   bc6c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bc6c4:	f7fa f94e 	bl	b6964 <__assert_func>
   bc6c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc6cc:	6004      	str	r4, [r0, #0]
   bc6ce:	60c4      	str	r4, [r0, #12]
   bc6d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bc6d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bc6d8:	b94c      	cbnz	r4, bc6ee <__pow5mult+0x66>
   bc6da:	f240 2171 	movw	r1, #625	; 0x271
   bc6de:	4630      	mov	r0, r6
   bc6e0:	f7ff ff12 	bl	bc508 <__i2b>
   bc6e4:	2300      	movs	r3, #0
   bc6e6:	f8c8 0008 	str.w	r0, [r8, #8]
   bc6ea:	4604      	mov	r4, r0
   bc6ec:	6003      	str	r3, [r0, #0]
   bc6ee:	f04f 0900 	mov.w	r9, #0
   bc6f2:	07eb      	lsls	r3, r5, #31
   bc6f4:	d50a      	bpl.n	bc70c <__pow5mult+0x84>
   bc6f6:	4639      	mov	r1, r7
   bc6f8:	4622      	mov	r2, r4
   bc6fa:	4630      	mov	r0, r6
   bc6fc:	f7ff ff1a 	bl	bc534 <__multiply>
   bc700:	4639      	mov	r1, r7
   bc702:	4680      	mov	r8, r0
   bc704:	4630      	mov	r0, r6
   bc706:	f7ff fdfd 	bl	bc304 <_Bfree>
   bc70a:	4647      	mov	r7, r8
   bc70c:	106d      	asrs	r5, r5, #1
   bc70e:	d00b      	beq.n	bc728 <__pow5mult+0xa0>
   bc710:	6820      	ldr	r0, [r4, #0]
   bc712:	b938      	cbnz	r0, bc724 <__pow5mult+0x9c>
   bc714:	4622      	mov	r2, r4
   bc716:	4621      	mov	r1, r4
   bc718:	4630      	mov	r0, r6
   bc71a:	f7ff ff0b 	bl	bc534 <__multiply>
   bc71e:	6020      	str	r0, [r4, #0]
   bc720:	f8c0 9000 	str.w	r9, [r0]
   bc724:	4604      	mov	r4, r0
   bc726:	e7e4      	b.n	bc6f2 <__pow5mult+0x6a>
   bc728:	4638      	mov	r0, r7
   bc72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc72e:	bf00      	nop
   bc730:	000bdc70 	.word	0x000bdc70
   bc734:	000bd7dd 	.word	0x000bd7dd
   bc738:	000bdafc 	.word	0x000bdafc

000bc73c <__lshift>:
   bc73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc740:	460c      	mov	r4, r1
   bc742:	6849      	ldr	r1, [r1, #4]
   bc744:	6923      	ldr	r3, [r4, #16]
   bc746:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bc74a:	68a3      	ldr	r3, [r4, #8]
   bc74c:	4607      	mov	r7, r0
   bc74e:	4691      	mov	r9, r2
   bc750:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bc754:	f108 0601 	add.w	r6, r8, #1
   bc758:	42b3      	cmp	r3, r6
   bc75a:	db0b      	blt.n	bc774 <__lshift+0x38>
   bc75c:	4638      	mov	r0, r7
   bc75e:	f7ff fd91 	bl	bc284 <_Balloc>
   bc762:	4605      	mov	r5, r0
   bc764:	b948      	cbnz	r0, bc77a <__lshift+0x3e>
   bc766:	4602      	mov	r2, r0
   bc768:	4b2a      	ldr	r3, [pc, #168]	; (bc814 <__lshift+0xd8>)
   bc76a:	482b      	ldr	r0, [pc, #172]	; (bc818 <__lshift+0xdc>)
   bc76c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bc770:	f7fa f8f8 	bl	b6964 <__assert_func>
   bc774:	3101      	adds	r1, #1
   bc776:	005b      	lsls	r3, r3, #1
   bc778:	e7ee      	b.n	bc758 <__lshift+0x1c>
   bc77a:	2300      	movs	r3, #0
   bc77c:	f100 0114 	add.w	r1, r0, #20
   bc780:	f100 0210 	add.w	r2, r0, #16
   bc784:	4618      	mov	r0, r3
   bc786:	4553      	cmp	r3, sl
   bc788:	db37      	blt.n	bc7fa <__lshift+0xbe>
   bc78a:	6920      	ldr	r0, [r4, #16]
   bc78c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bc790:	f104 0314 	add.w	r3, r4, #20
   bc794:	f019 091f 	ands.w	r9, r9, #31
   bc798:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bc79c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bc7a0:	d02f      	beq.n	bc802 <__lshift+0xc6>
   bc7a2:	f1c9 0e20 	rsb	lr, r9, #32
   bc7a6:	468a      	mov	sl, r1
   bc7a8:	f04f 0c00 	mov.w	ip, #0
   bc7ac:	681a      	ldr	r2, [r3, #0]
   bc7ae:	fa02 f209 	lsl.w	r2, r2, r9
   bc7b2:	ea42 020c 	orr.w	r2, r2, ip
   bc7b6:	f84a 2b04 	str.w	r2, [sl], #4
   bc7ba:	f853 2b04 	ldr.w	r2, [r3], #4
   bc7be:	4298      	cmp	r0, r3
   bc7c0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc7c4:	d8f2      	bhi.n	bc7ac <__lshift+0x70>
   bc7c6:	1b03      	subs	r3, r0, r4
   bc7c8:	3b15      	subs	r3, #21
   bc7ca:	f023 0303 	bic.w	r3, r3, #3
   bc7ce:	3304      	adds	r3, #4
   bc7d0:	f104 0215 	add.w	r2, r4, #21
   bc7d4:	4290      	cmp	r0, r2
   bc7d6:	bf38      	it	cc
   bc7d8:	2304      	movcc	r3, #4
   bc7da:	f841 c003 	str.w	ip, [r1, r3]
   bc7de:	f1bc 0f00 	cmp.w	ip, #0
   bc7e2:	d001      	beq.n	bc7e8 <__lshift+0xac>
   bc7e4:	f108 0602 	add.w	r6, r8, #2
   bc7e8:	3e01      	subs	r6, #1
   bc7ea:	4638      	mov	r0, r7
   bc7ec:	612e      	str	r6, [r5, #16]
   bc7ee:	4621      	mov	r1, r4
   bc7f0:	f7ff fd88 	bl	bc304 <_Bfree>
   bc7f4:	4628      	mov	r0, r5
   bc7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc7fa:	f842 0f04 	str.w	r0, [r2, #4]!
   bc7fe:	3301      	adds	r3, #1
   bc800:	e7c1      	b.n	bc786 <__lshift+0x4a>
   bc802:	3904      	subs	r1, #4
   bc804:	f853 2b04 	ldr.w	r2, [r3], #4
   bc808:	f841 2f04 	str.w	r2, [r1, #4]!
   bc80c:	4298      	cmp	r0, r3
   bc80e:	d8f9      	bhi.n	bc804 <__lshift+0xc8>
   bc810:	e7ea      	b.n	bc7e8 <__lshift+0xac>
   bc812:	bf00      	nop
   bc814:	000bda50 	.word	0x000bda50
   bc818:	000bdafc 	.word	0x000bdafc

000bc81c <__mcmp>:
   bc81c:	b530      	push	{r4, r5, lr}
   bc81e:	6902      	ldr	r2, [r0, #16]
   bc820:	690c      	ldr	r4, [r1, #16]
   bc822:	1b12      	subs	r2, r2, r4
   bc824:	d10e      	bne.n	bc844 <__mcmp+0x28>
   bc826:	f100 0314 	add.w	r3, r0, #20
   bc82a:	3114      	adds	r1, #20
   bc82c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bc830:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bc834:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bc838:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bc83c:	42a5      	cmp	r5, r4
   bc83e:	d003      	beq.n	bc848 <__mcmp+0x2c>
   bc840:	d305      	bcc.n	bc84e <__mcmp+0x32>
   bc842:	2201      	movs	r2, #1
   bc844:	4610      	mov	r0, r2
   bc846:	bd30      	pop	{r4, r5, pc}
   bc848:	4283      	cmp	r3, r0
   bc84a:	d3f3      	bcc.n	bc834 <__mcmp+0x18>
   bc84c:	e7fa      	b.n	bc844 <__mcmp+0x28>
   bc84e:	f04f 32ff 	mov.w	r2, #4294967295
   bc852:	e7f7      	b.n	bc844 <__mcmp+0x28>

000bc854 <__mdiff>:
   bc854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc858:	460c      	mov	r4, r1
   bc85a:	4606      	mov	r6, r0
   bc85c:	4611      	mov	r1, r2
   bc85e:	4620      	mov	r0, r4
   bc860:	4690      	mov	r8, r2
   bc862:	f7ff ffdb 	bl	bc81c <__mcmp>
   bc866:	1e05      	subs	r5, r0, #0
   bc868:	d110      	bne.n	bc88c <__mdiff+0x38>
   bc86a:	4629      	mov	r1, r5
   bc86c:	4630      	mov	r0, r6
   bc86e:	f7ff fd09 	bl	bc284 <_Balloc>
   bc872:	b930      	cbnz	r0, bc882 <__mdiff+0x2e>
   bc874:	4b3a      	ldr	r3, [pc, #232]	; (bc960 <__mdiff+0x10c>)
   bc876:	4602      	mov	r2, r0
   bc878:	f240 2132 	movw	r1, #562	; 0x232
   bc87c:	4839      	ldr	r0, [pc, #228]	; (bc964 <__mdiff+0x110>)
   bc87e:	f7fa f871 	bl	b6964 <__assert_func>
   bc882:	2301      	movs	r3, #1
   bc884:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc88c:	bfa4      	itt	ge
   bc88e:	4643      	movge	r3, r8
   bc890:	46a0      	movge	r8, r4
   bc892:	4630      	mov	r0, r6
   bc894:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc898:	bfa6      	itte	ge
   bc89a:	461c      	movge	r4, r3
   bc89c:	2500      	movge	r5, #0
   bc89e:	2501      	movlt	r5, #1
   bc8a0:	f7ff fcf0 	bl	bc284 <_Balloc>
   bc8a4:	b920      	cbnz	r0, bc8b0 <__mdiff+0x5c>
   bc8a6:	4b2e      	ldr	r3, [pc, #184]	; (bc960 <__mdiff+0x10c>)
   bc8a8:	4602      	mov	r2, r0
   bc8aa:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc8ae:	e7e5      	b.n	bc87c <__mdiff+0x28>
   bc8b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc8b4:	6926      	ldr	r6, [r4, #16]
   bc8b6:	60c5      	str	r5, [r0, #12]
   bc8b8:	f104 0914 	add.w	r9, r4, #20
   bc8bc:	f108 0514 	add.w	r5, r8, #20
   bc8c0:	f100 0e14 	add.w	lr, r0, #20
   bc8c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc8c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc8cc:	f108 0210 	add.w	r2, r8, #16
   bc8d0:	46f2      	mov	sl, lr
   bc8d2:	2100      	movs	r1, #0
   bc8d4:	f859 3b04 	ldr.w	r3, [r9], #4
   bc8d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc8dc:	fa1f f883 	uxth.w	r8, r3
   bc8e0:	fa11 f18b 	uxtah	r1, r1, fp
   bc8e4:	0c1b      	lsrs	r3, r3, #16
   bc8e6:	eba1 0808 	sub.w	r8, r1, r8
   bc8ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc8ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc8f2:	fa1f f888 	uxth.w	r8, r8
   bc8f6:	1419      	asrs	r1, r3, #16
   bc8f8:	454e      	cmp	r6, r9
   bc8fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc8fe:	f84a 3b04 	str.w	r3, [sl], #4
   bc902:	d8e7      	bhi.n	bc8d4 <__mdiff+0x80>
   bc904:	1b33      	subs	r3, r6, r4
   bc906:	3b15      	subs	r3, #21
   bc908:	f023 0303 	bic.w	r3, r3, #3
   bc90c:	3304      	adds	r3, #4
   bc90e:	3415      	adds	r4, #21
   bc910:	42a6      	cmp	r6, r4
   bc912:	bf38      	it	cc
   bc914:	2304      	movcc	r3, #4
   bc916:	441d      	add	r5, r3
   bc918:	4473      	add	r3, lr
   bc91a:	469e      	mov	lr, r3
   bc91c:	462e      	mov	r6, r5
   bc91e:	4566      	cmp	r6, ip
   bc920:	d30e      	bcc.n	bc940 <__mdiff+0xec>
   bc922:	f10c 0203 	add.w	r2, ip, #3
   bc926:	1b52      	subs	r2, r2, r5
   bc928:	f022 0203 	bic.w	r2, r2, #3
   bc92c:	3d03      	subs	r5, #3
   bc92e:	45ac      	cmp	ip, r5
   bc930:	bf38      	it	cc
   bc932:	2200      	movcc	r2, #0
   bc934:	441a      	add	r2, r3
   bc936:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc93a:	b17b      	cbz	r3, bc95c <__mdiff+0x108>
   bc93c:	6107      	str	r7, [r0, #16]
   bc93e:	e7a3      	b.n	bc888 <__mdiff+0x34>
   bc940:	f856 8b04 	ldr.w	r8, [r6], #4
   bc944:	fa11 f288 	uxtah	r2, r1, r8
   bc948:	1414      	asrs	r4, r2, #16
   bc94a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc94e:	b292      	uxth	r2, r2
   bc950:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc954:	f84e 2b04 	str.w	r2, [lr], #4
   bc958:	1421      	asrs	r1, r4, #16
   bc95a:	e7e0      	b.n	bc91e <__mdiff+0xca>
   bc95c:	3f01      	subs	r7, #1
   bc95e:	e7ea      	b.n	bc936 <__mdiff+0xe2>
   bc960:	000bda50 	.word	0x000bda50
   bc964:	000bdafc 	.word	0x000bdafc

000bc968 <__ulp>:
   bc968:	b082      	sub	sp, #8
   bc96a:	ed8d 0b00 	vstr	d0, [sp]
   bc96e:	9b01      	ldr	r3, [sp, #4]
   bc970:	4912      	ldr	r1, [pc, #72]	; (bc9bc <__ulp+0x54>)
   bc972:	4019      	ands	r1, r3
   bc974:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc978:	2900      	cmp	r1, #0
   bc97a:	dd05      	ble.n	bc988 <__ulp+0x20>
   bc97c:	2200      	movs	r2, #0
   bc97e:	460b      	mov	r3, r1
   bc980:	ec43 2b10 	vmov	d0, r2, r3
   bc984:	b002      	add	sp, #8
   bc986:	4770      	bx	lr
   bc988:	4249      	negs	r1, r1
   bc98a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc98e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc992:	f04f 0200 	mov.w	r2, #0
   bc996:	f04f 0300 	mov.w	r3, #0
   bc99a:	da04      	bge.n	bc9a6 <__ulp+0x3e>
   bc99c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc9a0:	fa41 f300 	asr.w	r3, r1, r0
   bc9a4:	e7ec      	b.n	bc980 <__ulp+0x18>
   bc9a6:	f1a0 0114 	sub.w	r1, r0, #20
   bc9aa:	291e      	cmp	r1, #30
   bc9ac:	bfda      	itte	le
   bc9ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc9b2:	fa20 f101 	lsrle.w	r1, r0, r1
   bc9b6:	2101      	movgt	r1, #1
   bc9b8:	460a      	mov	r2, r1
   bc9ba:	e7e1      	b.n	bc980 <__ulp+0x18>
   bc9bc:	7ff00000 	.word	0x7ff00000

000bc9c0 <__b2d>:
   bc9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc9c2:	6905      	ldr	r5, [r0, #16]
   bc9c4:	f100 0714 	add.w	r7, r0, #20
   bc9c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc9cc:	1f2e      	subs	r6, r5, #4
   bc9ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc9d2:	4620      	mov	r0, r4
   bc9d4:	f7ff fd48 	bl	bc468 <__hi0bits>
   bc9d8:	f1c0 0320 	rsb	r3, r0, #32
   bc9dc:	280a      	cmp	r0, #10
   bc9de:	f8df c07c 	ldr.w	ip, [pc, #124]	; bca5c <__b2d+0x9c>
   bc9e2:	600b      	str	r3, [r1, #0]
   bc9e4:	dc14      	bgt.n	bca10 <__b2d+0x50>
   bc9e6:	f1c0 0e0b 	rsb	lr, r0, #11
   bc9ea:	fa24 f10e 	lsr.w	r1, r4, lr
   bc9ee:	42b7      	cmp	r7, r6
   bc9f0:	ea41 030c 	orr.w	r3, r1, ip
   bc9f4:	bf34      	ite	cc
   bc9f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc9fa:	2100      	movcs	r1, #0
   bc9fc:	3015      	adds	r0, #21
   bc9fe:	fa04 f000 	lsl.w	r0, r4, r0
   bca02:	fa21 f10e 	lsr.w	r1, r1, lr
   bca06:	ea40 0201 	orr.w	r2, r0, r1
   bca0a:	ec43 2b10 	vmov	d0, r2, r3
   bca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bca10:	42b7      	cmp	r7, r6
   bca12:	bf3a      	itte	cc
   bca14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bca18:	f1a5 0608 	subcc.w	r6, r5, #8
   bca1c:	2100      	movcs	r1, #0
   bca1e:	380b      	subs	r0, #11
   bca20:	d017      	beq.n	bca52 <__b2d+0x92>
   bca22:	f1c0 0c20 	rsb	ip, r0, #32
   bca26:	fa04 f500 	lsl.w	r5, r4, r0
   bca2a:	42be      	cmp	r6, r7
   bca2c:	fa21 f40c 	lsr.w	r4, r1, ip
   bca30:	ea45 0504 	orr.w	r5, r5, r4
   bca34:	bf8c      	ite	hi
   bca36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bca3a:	2400      	movls	r4, #0
   bca3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bca40:	fa01 f000 	lsl.w	r0, r1, r0
   bca44:	fa24 f40c 	lsr.w	r4, r4, ip
   bca48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bca4c:	ea40 0204 	orr.w	r2, r0, r4
   bca50:	e7db      	b.n	bca0a <__b2d+0x4a>
   bca52:	ea44 030c 	orr.w	r3, r4, ip
   bca56:	460a      	mov	r2, r1
   bca58:	e7d7      	b.n	bca0a <__b2d+0x4a>
   bca5a:	bf00      	nop
   bca5c:	3ff00000 	.word	0x3ff00000

000bca60 <__d2b>:
   bca60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bca64:	4689      	mov	r9, r1
   bca66:	2101      	movs	r1, #1
   bca68:	ec57 6b10 	vmov	r6, r7, d0
   bca6c:	4690      	mov	r8, r2
   bca6e:	f7ff fc09 	bl	bc284 <_Balloc>
   bca72:	4604      	mov	r4, r0
   bca74:	b930      	cbnz	r0, bca84 <__d2b+0x24>
   bca76:	4602      	mov	r2, r0
   bca78:	4b25      	ldr	r3, [pc, #148]	; (bcb10 <__d2b+0xb0>)
   bca7a:	4826      	ldr	r0, [pc, #152]	; (bcb14 <__d2b+0xb4>)
   bca7c:	f240 310a 	movw	r1, #778	; 0x30a
   bca80:	f7f9 ff70 	bl	b6964 <__assert_func>
   bca84:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bca88:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bca8c:	bb35      	cbnz	r5, bcadc <__d2b+0x7c>
   bca8e:	2e00      	cmp	r6, #0
   bca90:	9301      	str	r3, [sp, #4]
   bca92:	d028      	beq.n	bcae6 <__d2b+0x86>
   bca94:	4668      	mov	r0, sp
   bca96:	9600      	str	r6, [sp, #0]
   bca98:	f7ff fd06 	bl	bc4a8 <__lo0bits>
   bca9c:	9900      	ldr	r1, [sp, #0]
   bca9e:	b300      	cbz	r0, bcae2 <__d2b+0x82>
   bcaa0:	9a01      	ldr	r2, [sp, #4]
   bcaa2:	f1c0 0320 	rsb	r3, r0, #32
   bcaa6:	fa02 f303 	lsl.w	r3, r2, r3
   bcaaa:	430b      	orrs	r3, r1
   bcaac:	40c2      	lsrs	r2, r0
   bcaae:	6163      	str	r3, [r4, #20]
   bcab0:	9201      	str	r2, [sp, #4]
   bcab2:	9b01      	ldr	r3, [sp, #4]
   bcab4:	61a3      	str	r3, [r4, #24]
   bcab6:	2b00      	cmp	r3, #0
   bcab8:	bf14      	ite	ne
   bcaba:	2202      	movne	r2, #2
   bcabc:	2201      	moveq	r2, #1
   bcabe:	6122      	str	r2, [r4, #16]
   bcac0:	b1d5      	cbz	r5, bcaf8 <__d2b+0x98>
   bcac2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bcac6:	4405      	add	r5, r0
   bcac8:	f8c9 5000 	str.w	r5, [r9]
   bcacc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bcad0:	f8c8 0000 	str.w	r0, [r8]
   bcad4:	4620      	mov	r0, r4
   bcad6:	b003      	add	sp, #12
   bcad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcadc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bcae0:	e7d5      	b.n	bca8e <__d2b+0x2e>
   bcae2:	6161      	str	r1, [r4, #20]
   bcae4:	e7e5      	b.n	bcab2 <__d2b+0x52>
   bcae6:	a801      	add	r0, sp, #4
   bcae8:	f7ff fcde 	bl	bc4a8 <__lo0bits>
   bcaec:	9b01      	ldr	r3, [sp, #4]
   bcaee:	6163      	str	r3, [r4, #20]
   bcaf0:	2201      	movs	r2, #1
   bcaf2:	6122      	str	r2, [r4, #16]
   bcaf4:	3020      	adds	r0, #32
   bcaf6:	e7e3      	b.n	bcac0 <__d2b+0x60>
   bcaf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bcafc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bcb00:	f8c9 0000 	str.w	r0, [r9]
   bcb04:	6918      	ldr	r0, [r3, #16]
   bcb06:	f7ff fcaf 	bl	bc468 <__hi0bits>
   bcb0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bcb0e:	e7df      	b.n	bcad0 <__d2b+0x70>
   bcb10:	000bda50 	.word	0x000bda50
   bcb14:	000bdafc 	.word	0x000bdafc

000bcb18 <__ratio>:
   bcb18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcb1c:	4688      	mov	r8, r1
   bcb1e:	4669      	mov	r1, sp
   bcb20:	4681      	mov	r9, r0
   bcb22:	f7ff ff4d 	bl	bc9c0 <__b2d>
   bcb26:	a901      	add	r1, sp, #4
   bcb28:	4640      	mov	r0, r8
   bcb2a:	ec55 4b10 	vmov	r4, r5, d0
   bcb2e:	f7ff ff47 	bl	bc9c0 <__b2d>
   bcb32:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcb36:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bcb3a:	eba3 0c02 	sub.w	ip, r3, r2
   bcb3e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bcb42:	1a9b      	subs	r3, r3, r2
   bcb44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bcb48:	ec51 0b10 	vmov	r0, r1, d0
   bcb4c:	2b00      	cmp	r3, #0
   bcb4e:	bfd6      	itet	le
   bcb50:	460a      	movle	r2, r1
   bcb52:	462a      	movgt	r2, r5
   bcb54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bcb58:	468b      	mov	fp, r1
   bcb5a:	462f      	mov	r7, r5
   bcb5c:	bfd4      	ite	le
   bcb5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bcb62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bcb66:	4620      	mov	r0, r4
   bcb68:	ee10 2a10 	vmov	r2, s0
   bcb6c:	465b      	mov	r3, fp
   bcb6e:	4639      	mov	r1, r7
   bcb70:	f7fd fd8a 	bl	ba688 <__aeabi_ddiv>
   bcb74:	ec41 0b10 	vmov	d0, r0, r1
   bcb78:	b003      	add	sp, #12
   bcb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcb7e <__copybits>:
   bcb7e:	3901      	subs	r1, #1
   bcb80:	b570      	push	{r4, r5, r6, lr}
   bcb82:	1149      	asrs	r1, r1, #5
   bcb84:	6914      	ldr	r4, [r2, #16]
   bcb86:	3101      	adds	r1, #1
   bcb88:	f102 0314 	add.w	r3, r2, #20
   bcb8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bcb90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bcb94:	1f05      	subs	r5, r0, #4
   bcb96:	42a3      	cmp	r3, r4
   bcb98:	d30c      	bcc.n	bcbb4 <__copybits+0x36>
   bcb9a:	1aa3      	subs	r3, r4, r2
   bcb9c:	3b11      	subs	r3, #17
   bcb9e:	f023 0303 	bic.w	r3, r3, #3
   bcba2:	3211      	adds	r2, #17
   bcba4:	42a2      	cmp	r2, r4
   bcba6:	bf88      	it	hi
   bcba8:	2300      	movhi	r3, #0
   bcbaa:	4418      	add	r0, r3
   bcbac:	2300      	movs	r3, #0
   bcbae:	4288      	cmp	r0, r1
   bcbb0:	d305      	bcc.n	bcbbe <__copybits+0x40>
   bcbb2:	bd70      	pop	{r4, r5, r6, pc}
   bcbb4:	f853 6b04 	ldr.w	r6, [r3], #4
   bcbb8:	f845 6f04 	str.w	r6, [r5, #4]!
   bcbbc:	e7eb      	b.n	bcb96 <__copybits+0x18>
   bcbbe:	f840 3b04 	str.w	r3, [r0], #4
   bcbc2:	e7f4      	b.n	bcbae <__copybits+0x30>

000bcbc4 <__any_on>:
   bcbc4:	f100 0214 	add.w	r2, r0, #20
   bcbc8:	6900      	ldr	r0, [r0, #16]
   bcbca:	114b      	asrs	r3, r1, #5
   bcbcc:	4298      	cmp	r0, r3
   bcbce:	b510      	push	{r4, lr}
   bcbd0:	db11      	blt.n	bcbf6 <__any_on+0x32>
   bcbd2:	dd0a      	ble.n	bcbea <__any_on+0x26>
   bcbd4:	f011 011f 	ands.w	r1, r1, #31
   bcbd8:	d007      	beq.n	bcbea <__any_on+0x26>
   bcbda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bcbde:	fa24 f001 	lsr.w	r0, r4, r1
   bcbe2:	fa00 f101 	lsl.w	r1, r0, r1
   bcbe6:	428c      	cmp	r4, r1
   bcbe8:	d10b      	bne.n	bcc02 <__any_on+0x3e>
   bcbea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bcbee:	4293      	cmp	r3, r2
   bcbf0:	d803      	bhi.n	bcbfa <__any_on+0x36>
   bcbf2:	2000      	movs	r0, #0
   bcbf4:	bd10      	pop	{r4, pc}
   bcbf6:	4603      	mov	r3, r0
   bcbf8:	e7f7      	b.n	bcbea <__any_on+0x26>
   bcbfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bcbfe:	2900      	cmp	r1, #0
   bcc00:	d0f5      	beq.n	bcbee <__any_on+0x2a>
   bcc02:	2001      	movs	r0, #1
   bcc04:	e7f6      	b.n	bcbf4 <__any_on+0x30>

000bcc06 <_calloc_r>:
   bcc06:	b513      	push	{r0, r1, r4, lr}
   bcc08:	434a      	muls	r2, r1
   bcc0a:	4611      	mov	r1, r2
   bcc0c:	9201      	str	r2, [sp, #4]
   bcc0e:	f7f9 fe99 	bl	b6944 <_malloc_r>
   bcc12:	4604      	mov	r4, r0
   bcc14:	b118      	cbz	r0, bcc1e <_calloc_r+0x18>
   bcc16:	9a01      	ldr	r2, [sp, #4]
   bcc18:	2100      	movs	r1, #0
   bcc1a:	f7fd ff70 	bl	baafe <memset>
   bcc1e:	4620      	mov	r0, r4
   bcc20:	b002      	add	sp, #8
   bcc22:	bd10      	pop	{r4, pc}

000bcc24 <_open_r>:
   bcc24:	b538      	push	{r3, r4, r5, lr}
   bcc26:	4d07      	ldr	r5, [pc, #28]	; (bcc44 <_open_r+0x20>)
   bcc28:	4604      	mov	r4, r0
   bcc2a:	4608      	mov	r0, r1
   bcc2c:	4611      	mov	r1, r2
   bcc2e:	2200      	movs	r2, #0
   bcc30:	602a      	str	r2, [r5, #0]
   bcc32:	461a      	mov	r2, r3
   bcc34:	f7f9 fb58 	bl	b62e8 <_open>
   bcc38:	1c43      	adds	r3, r0, #1
   bcc3a:	d102      	bne.n	bcc42 <_open_r+0x1e>
   bcc3c:	682b      	ldr	r3, [r5, #0]
   bcc3e:	b103      	cbz	r3, bcc42 <_open_r+0x1e>
   bcc40:	6023      	str	r3, [r4, #0]
   bcc42:	bd38      	pop	{r3, r4, r5, pc}
   bcc44:	2003e7ec 	.word	0x2003e7ec

000bcc48 <nan>:
   bcc48:	ed9f 0b01 	vldr	d0, [pc, #4]	; bcc50 <nan+0x8>
   bcc4c:	4770      	bx	lr
   bcc4e:	bf00      	nop
   bcc50:	00000000 	.word	0x00000000
   bcc54:	7ff80000 	.word	0x7ff80000

000bcc58 <__ascii_wctomb>:
   bcc58:	b149      	cbz	r1, bcc6e <__ascii_wctomb+0x16>
   bcc5a:	2aff      	cmp	r2, #255	; 0xff
   bcc5c:	bf85      	ittet	hi
   bcc5e:	238a      	movhi	r3, #138	; 0x8a
   bcc60:	6003      	strhi	r3, [r0, #0]
   bcc62:	700a      	strbls	r2, [r1, #0]
   bcc64:	f04f 30ff 	movhi.w	r0, #4294967295
   bcc68:	bf98      	it	ls
   bcc6a:	2001      	movls	r0, #1
   bcc6c:	4770      	bx	lr
   bcc6e:	4608      	mov	r0, r1
   bcc70:	4770      	bx	lr
	...

000bcc74 <__aeabi_d2lz>:
   bcc74:	b538      	push	{r3, r4, r5, lr}
   bcc76:	2200      	movs	r2, #0
   bcc78:	2300      	movs	r3, #0
   bcc7a:	4604      	mov	r4, r0
   bcc7c:	460d      	mov	r5, r1
   bcc7e:	f7fd fe4b 	bl	ba918 <__aeabi_dcmplt>
   bcc82:	b928      	cbnz	r0, bcc90 <__aeabi_d2lz+0x1c>
   bcc84:	4620      	mov	r0, r4
   bcc86:	4629      	mov	r1, r5
   bcc88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bcc8c:	f7fd bec0 	b.w	baa10 <__aeabi_d2ulz>
   bcc90:	4620      	mov	r0, r4
   bcc92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bcc96:	f7fd febb 	bl	baa10 <__aeabi_d2ulz>
   bcc9a:	4240      	negs	r0, r0
   bcc9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcca0:	bd38      	pop	{r3, r4, r5, pc}
   bcca2:	bf00      	nop

000bcca4 <dynalib_user>:
   bcca4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bccb4:	0000 0000 7270 6369 7365 002f 7325 000a     ....prices/.%s..
   bccc4:	212c 2500 642a 252d 642a 252d 642a 2554     ,!.%*d-%*d-%*dT%
   bccd4:	3a64 2a25 3a64 2a25 0064 6e49 6920 746e     d:%*d:%*d.In int
   bcce4:	7265 7572 7470 000a 6948 6867 7365 2074     errupt..Highest 
   bccf4:	7270 6369 2065 666f 7420 6568 6420 7961     price of the day
   bcd04:	203a 6625 000a 6f4c 6577 7473 7020 6972     : %f..Lowest pri
   bcd14:	6563 6f20 2066 6874 2065 6164 3a79 2520     ce of the day: %
   bcd24:	0a66 4800 756f 7372 6f20 2066 6874 2065     f..Hours of the 
   bcd34:	6164 2079 6877 7265 2065 6c65 6365 7274     day where electr
   bcd44:	6369 7469 2079 7369 7720 7469 6968 206e     icity is within 
   bcd54:	6361 6563 7470 6465 7220 6e61 6567 0a3a     accepted range:.
   bcd64:	2500 3230 2064 6f74 2520 3230 0a64 5700     .%02d to %02d..W
   bcd74:	6961 6974 676e 6620 726f 4220 454c 6c63     aiting for BLEcl
   bcd84:	6569 746e 6320 6e6f 656e 7463 6f69 2e6e     ient connection.
   bcd94:	2e2e 2f00 6473 702f 6972 6563 5f73 6f74     .../sd/prices_to
   bcda4:	6164 2e79 7874 0074 6f68 656d 7361 6973     day.txt.homeassi
   bcdb4:	7473 6e61 2e74 6f6c 6163 006c 7453 7461     stant.local.Stat
   bcdc4:	0065 716d 7474 5200 7465 7275 206e 6176     e.mqtt.Return va
   bcdd4:	756c 3a65 2520 0064 6568 6c6c 206f 6f77     lue: %d.hello wo
   bcde4:	6c72 0064 6f70 6577 2f72 6567 0074 6f70     rld.power/get.po
   bcdf4:	6577 2f72 7270 6369 7365 4300 696c 6e65     wer/prices.Clien
   bce04:	2074 6964 6373 6e6f 656e 7463 6465 000a     t disconnected..
   bce14:	7073 7261 636b 696c 6e65 5f74 4300 696c     sparkclient_.Cli
   bce24:	6e65 2074 6572 6f63 6e6e 6365 6574 0a64     ent reconnected.
   bce34:	7b00 2220 6579 7261 3a22 2220 6425 2c22     .{ "year": "%d",
   bce44:	2220 6f6d 746e 2268 223a 3025 6432 2c22      "month":"%02d",
   bce54:	2220 6164 2279 203a 2522 3230 2264 202c      "day": "%02d", 
   bce64:	6422 7961 745f 6f77 3a22 2220 3025 6432     "day_two": "%02d
   bce74:	2c22 2220 6f68 7275 3a22 2220 3025 6432     ", "hour": "%02d
   bce84:	2022 007d 6c65 7270 7369 7265 4900 206e     " }.elpriser.In 
   bce94:	6f77 6b72 000a 6843 6165 2870 7369 2968     work..Cheap(ish)
   bcea4:	6820 756f 7372 6f20 2066 6874 2065 6164      hours of the da
   bceb4:	3a79 0020 3025 6432 7420 206f 3025 6432     y: .%02d to %02d
   bcec4:	202c 4c00 776f 7020 6972 6563 6820 756f     , .Low price hou
   bced4:	7372 4300 7275 6572 746e 4820 3a48 4d4d     rs.Current HH:MM
   bcee4:	203a 3025 6432 253a 3230 0a64 5200 6365     : %02d:%02d..Rec
   bcef4:	6965 6576 2064 6f70 6577 2f72 6567 0a74     eived power/get.
   bcf04:	7000 776f 7265 7b00 7722 7461 2274 253a     .power.{"watt":%
   bcf14:	7d64 7b00 7022 6972 6563 7973 7365 6574     d}.{"pricesyeste
   bcf24:	6472 7961 3a22 315b 322c 332c 342c 352c     rday":[1,2,3,4,5
   bcf34:	362c 372c 382c 392c 312c 2c30 3131 312c     ,6,7,8,9,10,11,1
   bcf44:	2c32 3331 312c 2c34 3531 312c 2c36 3731     2,13,14,15,16,17
   bcf54:	312c 2c38 3931 322c 2c30 3132 322c 2c32     ,18,19,20,21,22,
   bcf64:	3332 322c 2c34 3432 7d5d 7b00 7022 6972     23,24,24]}.{"pri
   bcf74:	6563 7473 646f 7961 3a22 315b 322c 332c     cestoday":[1,2,3
   bcf84:	342c 352c 362c 372c 382c 392c 312c 2c30     ,4,5,6,7,8,9,10,
   bcf94:	3131 312c 2c32 3331 312c 2c34 3531 312c     11,12,13,14,15,1
   bcfa4:	2c36 3731 312c 2c38 3931 322c 2c30 3132     6,17,18,19,20,21
   bcfb4:	322c 2c32 3332 322c 2c34 3432 7d5d 7b00     ,22,23,24,24]}.{
   bcfc4:	7022 6972 6563 7473 6d6f 726f 6f72 2277     "pricestomorrow"
   bcfd4:	5b3a 2c31 2c32 2c33 2c34 2c35 2c36 2c37     :[1,2,3,4,5,6,7,
   bcfe4:	2c38 2c39 3031 312c 2c31 3231 312c 2c33     8,9,10,11,12,13,
   bcff4:	3431 312c 2c35 3631 312c 2c37 3831 312c     14,15,16,17,18,1
   bd004:	2c39 3032 322c 2c31 3232 322c 2c33 3432     9,20,21,22,23,24
   bd014:	7d5d 7b00 5722 7248 795f 7365 6574 6472     ]}.{"WHr_yesterd
   bd024:	7961 3a22 315b 322c 332c 342c 352c 362c     ay":[1,2,3,4,5,6
   bd034:	372c 382c 392c 312c 2c30 3131 312c 2c32     ,7,8,9,10,11,12,
   bd044:	3331 312c 2c34 3531 312c 2c36 3731 312c     13,14,15,16,17,1
   bd054:	2c38 3931 322c 2c30 3132 322c 2c32 3332     8,19,20,21,22,23
   bd064:	322c 5d34 007d 227b 4857 5f72 6f74 6164     ,24]}.{"WHr_toda
   bd074:	2279 5b3a 2c31 2c32 2c33 2c34 2c35 2c36     y":[1,2,3,4,5,6,
   bd084:	2c37 2c38 2c39 3031 312c 2c31 3231 312c     7,8,9,10,11,12,1
   bd094:	2c33 3431 312c 2c35 3631 312c 2c37 3831     3,14,15,16,17,18
   bd0a4:	312c 2c39 3032 322c 2c31 3232 322c 2c33     ,19,20,21,22,23,
   bd0b4:	3432 7d5d 6200 656c 635f 6e6f 656e 7463     24]}.ble_connect
   bd0c4:	6465 5700 7461 2074 6f6e 0077 4b44 204b     ed.Watt now.DKK 
   bd0d4:	6559 7473 7265 6164 0079 4b44 204b 6f54     Yesterday.DKK To
   bd0e4:	6164 0079 4b44 204b 6f54 6f6d 7272 776f     day.DKK Tomorrow
   bd0f4:	5700 7268 5420 646f 7961 5700 7268 5920     .Whr Today.Whr Y
   bd104:	7365 6574 6472 7961 3100 3239 312e 3836     esterday.192.168
   bd114:	312e 3031 362e 0000                         .110.6..

000bd11c <_ZTV5Timer>:
	...
   bd124:	4301 000b 4355 000b 40e1 000b 3462 3532     .C..UC...@..b425
   bd134:	3430 3530 662d 3462 2d62 3734 3634 622d     0405-fb4b-4746-b
   bd144:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bd154:	6200 3234 3035 3034 2d34 6266 6234 342d     .b4250404-fb4b-4
   bd164:	3437 2d36 3262 3062 392d 6633 6530 3136     746-b2b0-93f0e61
   bd174:	3231 6332 0036 3462 3532 3430 3330 662d     122c6.b4250403-f
   bd184:	3462 2d62 3734 3634 622d 6232 2d30 3339     b4b-4746-b2b0-93
   bd194:	3066 3665 3131 3232 3663 6200 3234 3035     f0e61122c6.b4250
   bd1a4:	3034 2d32 6266 6234 342d 3437 2d36 3262     402-fb4b-4746-b2
   bd1b4:	3062 392d 6633 6530 3136 3231 6332 0036     b0-93f0e61122c6.
   bd1c4:	3462 3532 3430 3630 662d 3462 2d62 3734     b4250406-fb4b-47
   bd1d4:	3634 622d 6232 2d30 3339 3066 3665 3131     46-b2b0-93f0e611
   bd1e4:	3232 3663 6200 3234 3035 3034 2d31 6266     22c6.b4250401-fb
   bd1f4:	6234 342d 3437 2d36 3262 3062 392d 6633     4b-4746-b2b0-93f
   bd204:	6530 3136 3231 6332 0036 6633 6131 3531     0e61122c6.3f1a15
   bd214:	3639 652d 3765 2d66 3234 6462 382d 6434     96-ee7f-42bd-84d
   bd224:	2d31 3162 3261 3439 3866 6532 6663 4100     1-b1a294f82ecf.A
   bd234:	6772 6e6f 4d50 0000 4d04 5451 0454 0600     rgonPM...MQTT...
   bd244:	514d 7349 7064 4203 6765 6e69 4d20 6c75     MQIsdp.Begin Mul
   bd254:	6974 6163 7473 4f00 7475 6f20 2066 656d     ticast.Out of me
   bd264:	6f6d 7972 6e00 746f 7620 6c61 6469 0000     mory.not valid..

000bd274 <_ZTVN5spark13EthernetClassE>:
	...
   bd27c:	69f3 000b 69e9 000b 69df 000b 69d5 000b     .i...i...i...i..
   bd28c:	69c9 000b 69bd 000b 9bd5 000b 9bdd 000b     .i...i..........
   bd29c:	69b1 000b 69a9 000b 699f 000b 6995 000b     .i...i...i...i..
   bd2ac:	9c0d 000b                                   ....

000bd2b0 <_ZTV3UDP>:
	...
   bd2b8:	7129 000b 714d 000b 6b31 000b 6c59 000b     )q..Mq..1k..Yl..
   bd2c8:	6ae9 000b 6b49 000b 6b67 000b 6b81 000b     .j..Ik..gk...k..
   bd2d8:	6ba5 000b 6c3d 000b 6f17 000b 6cdd 000b     .k..=l...o...l..
   bd2e8:	6e35 000b 6ad1 000b 70b9 000b 6dbd 000b     5n...j...p...m..
   bd2f8:	6af1 000b 70e7 000b 6c83 000b 6adf 000b     .j...p...l...j..
   bd308:	6d15 000b 6ae5 000b 6b83 000b fff0 ffff     .m...j...k......
   bd318:	0000 0000 6b9d 000b                         .....k..

000bd320 <_ZTV21StringPrintableHelper>:
	...
   bd328:	71a5 000b 71a7 000b 7321 000b 72f3 000b     .q...q..!s...r..
   bd338:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   bd348:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   bd358:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   bd368:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   bd378:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   bd388:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   bd398:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   bd3a8:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   bd3b8:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   bd3c8:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   bd3d8:	206f 7061 6570 646e 7020 6565 2072 6543     o append peer Ce
   bd3e8:	746e 6172 206c 6564 6976 6563 002e 6f43     ntral device..Co
   bd3f8:	6e6e 6365 6574 2064 7962 4320 6e65 7274     nnected by Centr
   bd408:	6c61 6420 7665 6369 2e65 4400 7369 6f63     al device..Disco
   bd418:	6e6e 6365 6574 2064 7962 7220 6d65 746f     nnected by remot
   bd428:	2065 6564 6976 6563 002e 7544 6c70 6369     e device..Duplic
   bd438:	7461 6465 6320 6168 6172 7463 7265 7369     ated characteris
   bd448:	6974 2063 6163 6e6e 746f 6220 2065 6461     tic cannot be ad
   bd458:	6564 2e64 4600 6961 656c 2064 6f74 6120     ded..Failed to a
   bd468:	7070 6e65 2064 6f6c 6163 206c 6863 7261     ppend local char
   bd478:	6361 6574 6972 7473 6369 002e               acteristic..

000bd484 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd48c:	73cf 000b 7431 000b 7551 000b 745b 000b     .s..1t..Qu..[t..
   bd49c:	73d1 000b                                   .s..

000bd4a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd4a8:	73cb 000b 743f 000b 73cd 000b 7461 000b     .s..?t...s..at..
   bd4b8:	73f1 000b                                   .s..

000bd4bc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd4c4:	73c9 000b 744d 000b 7d29 000b 7467 000b     .s..Mt..)}..gt..
   bd4d4:	7411 000b                                   .t..

000bd4d8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd4e4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd4f6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd4f6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd506 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd506:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bd516:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bd526:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bd538 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd540:	8c6d 000b 8c73 000b 8cb1 000b 8c81 000b     m...s...........
   bd550:	8c6f 000b                                   o...

000bd554 <_ZTV9IPAddress>:
	...
   bd55c:	91ad 000b 919d 000b 919f 000b               ............

000bd568 <_ZTV9USBSerial>:
	...
   bd570:	92e7 000b 934f 000b 9325 000b 87f9 000b     ....O...%.......
   bd580:	9317 000b 92e9 000b 92f9 000b 9349 000b     ............I...
   bd590:	9309 000b 92e1 000b                         ........

000bd598 <_ZTV11USARTSerial>:
	...
   bd5a0:	9439 000b 94a5 000b 947d 000b 87f9 000b     9.......}.......
   bd5b0:	944d 000b 9469 000b 945b 000b 9477 000b     M...i...[...w...
   bd5c0:	943b 000b 943f 000b                         ;...?...

000bd5c8 <_ZTV7TwoWire>:
	...
   bd5d0:	9505 000b 954f 000b 9527 000b 9507 000b     ....O...'.......
   bd5e0:	952f 000b 9537 000b 953f 000b 9547 000b     /...7...?...G...
   bd5f0:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bd600:	2072 203d 6425 0000                         r = %d..

000bd608 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd610:	9605 000b 9629 000b 9b13 000b 9637 000b     ....).......7...
   bd620:	9609 000b                                   ....

000bd624 <_ZTV9TCPClient>:
	...
   bd62c:	8afd 000b 8b15 000b 9581 000b 959b 000b     ................
   bd63c:	99a9 000b 95c5 000b 981f 000b 95f9 000b     ................
   bd64c:	98b1 000b 96f1 000b 984d 000b 9a5d 000b     ........M...]...
   bd65c:	97ed 000b 95fb 000b 95ad 000b 963d 000b     ............=...
   bd66c:	96d1 000b                                   ....

000bd670 <_ZTVN5spark9WiFiClassE>:
	...
   bd678:	9b77 000b 9b6d 000b 9b63 000b 9b19 000b     w...m...c.......
   bd688:	9b57 000b 9b4b 000b 9bd5 000b 9bdd 000b     W...K...........
   bd698:	9b3f 000b 9b37 000b 9b2d 000b 9b23 000b     ?...7...-...#...
   bd6a8:	9c0d 000b                                   ....

000bd6ac <_ZTVN5spark12NetworkClassE>:
	...
   bd6b4:	9b95 000b 9b9f 000b 9ba9 000b 9bb3 000b     ................
   bd6c4:	9bbd 000b 9bc9 000b 9bd5 000b 9bdd 000b     ................
   bd6d4:	9be5 000b 9bf1 000b 9bf9 000b 9c03 000b     ................
   bd6e4:	9c0d 000b                                   ....

000bd6e8 <_ZSt7nothrow>:
	...

000bd6e9 <_ZTSSt19_Sp_make_shared_tag>:
   bd6e9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd6f9:	6572 5f64 6174 0067 0000                     red_tag....

000bd704 <_ZTISt19_Sp_make_shared_tag>:
   bd704:	d744 000b d6e9 000b                         D.......

000bd70c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd70c:	d7a4 000b d718 000b d7c8 000b               ............

000bd718 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd718:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd728:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd738:	0045 0000                                   E...

000bd73c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd73c:	0000 0000 d70c 000b 9ee5 000b 9ef9 000b     ................
   bd74c:	a08d 000b a08d 000b 9f63 000b 9ea5 000b     ........c.......
   bd75c:	9f4b 000b 9f0d 000b 9ed7 000b               K...........

000bd768 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd768:	d7a4 000b d774 000b d70c 000b               ....t.......

000bd774 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd774:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd784:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd794:	666e 456f 0000 0000                         nfoE....

000bd79c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd79c:	0000 0000 d768 000b 9f8d 000b 9fa1 000b     ....h...........
   bd7ac:	a08d 000b a08d 000b 9f63 000b 9ea5 000b     ........c.......
   bd7bc:	a061 000b 9fed 000b 9fb5 000b               a...........

000bd7c8 <_ZTISt9type_info>:
   bd7c8:	d744 000b d7d0 000b                         D.......

000bd7d0 <_ZTSSt9type_info>:
   bd7d0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bd7e0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bd7f0:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bd800:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd810:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd820:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd830:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd840:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd850:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd860:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bd870:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bd880 <fpi.1>:
   bd880:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd890:	0000 0000                                   ....

000bd894 <fpinan.0>:
   bd894:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bd8a4:	0000 0000                                   ....

000bd8a8 <tinytens>:
   bd8a8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd8b8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd8c8:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bd8d8:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd8e8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd8f8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd908:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd918:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd928:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd938:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bd948:	7472 6b6f 632e                               rtok.c.

000bd94f <_ctype_>:
   bd94f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd95f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd96f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd97f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd98f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd99f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd9af:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd9bf:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd9cf:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bda4f:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bda5f:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bda6f:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bda7f:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bda8f:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bda9f:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bdaaf:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bdabf:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bdacf:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bdadf:	6874 7865 632e 0000                          thex.c...

000bdae8 <_C_numeric_locale>:
   bdae8:	cd95 000b cd64 000b d360 2003 0043 4f50     ....d...`.. C.PO
   bdaf8:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bdb08:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bdb18:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bdb28:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bdb38:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bdb48:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bdb58:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bdb68:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bdb78:	0063 0000 0000 0000                         c.......

000bdb80 <__mprec_bigtens>:
   bdb80:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bdb90:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bdba0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bdba8 <__mprec_tens>:
   bdba8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bdbb8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bdbc8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bdbd8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bdbe8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bdbf8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bdc08:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bdc18:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bdc28:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bdc38:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bdc48:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bdc58:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bdc68:	9db4 79d9 7843 44ea                         ...yCx.D

000bdc70 <p05.0>:
   bdc70:	0005 0000 0019 0000 007d 0000               ........}...

000bdc7c <link_const_variable_data_end>:
   bdc7c:	000b4c25 	.word	0x000b4c25
   bdc80:	000b61fd 	.word	0x000b61fd
   bdc84:	000b69fd 	.word	0x000b69fd
   bdc88:	000b6a25 	.word	0x000b6a25
   bdc8c:	000b87e9 	.word	0x000b87e9
   bdc90:	000b8919 	.word	0x000b8919
   bdc94:	000b8ae9 	.word	0x000b8ae9
   bdc98:	000b8b29 	.word	0x000b8b29
   bdc9c:	000b9b81 	.word	0x000b9b81
   bdca0:	000b9ce5 	.word	0x000b9ce5

000bdca4 <link_constructors_end>:
	...
