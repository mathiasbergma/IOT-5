
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/4.0.0/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000084c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc4e0  000bc4e0  0000c4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bc504  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000020c  2003d8f0  000bc508  0001d8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000cf4  2003db00  2003db00  0002db00  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bc714  000bc714  0002c714  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bc73c  000bc73c  0002c73c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00141fca  00000000  00000000  0002c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001604f  00000000  00000000  0016e70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003db48  00000000  00000000  00184759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003530  00000000  00000000  001c22a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b578  00000000  00000000  001c57d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d867  00000000  00000000  001d0d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004832b  00000000  00000000  0020e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a1de  00000000  00000000  002568db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009d4c  00000000  00000000  00390abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 f9f2 	bl	b941a <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fa14 	bl	b946a <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d8f0 	.word	0x2003d8f0
   b404c:	000bc508 	.word	0x000bc508
   b4050:	2003dafc 	.word	0x2003dafc
   b4054:	2003db00 	.word	0x2003db00
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f003 fd73 	bl	b7b4c <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bc4b4 	.word	0x000bc4b4
   b4080:	000bc4dc 	.word	0x000bc4dc

000b4084 <module_user_setup>:
   b4084:	f000 bd06 	b.w	b4a94 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f000 fdfd 	bl	b4c88 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f003 bd13 	b.w	b7abc <_post_loop>

000b4096 <_Znwj>:
   b4096:	f001 bc69 	b.w	b596c <malloc>

000b409a <_Znaj>:
   b409a:	f001 bc67 	b.w	b596c <malloc>

000b409e <_ZdlPvj>:
   b409e:	f001 bc6d 	b.w	b597c <free>

000b40a2 <__cxa_guard_acquire>:
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
}
/**
 * @brief    Sets a flag when a new BLE connection is established
 */
void BLEOnConnectcallback(const BlePeerDevice &peer, void *context)
{
   b40b4:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40b6:	4b04      	ldr	r3, [pc, #16]	; (b40c8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40b8:	2201      	movs	r2, #1
   b40ba:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40bc:	f001 f978 	bl	b53b0 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40c0:	4b02      	ldr	r3, [pc, #8]	; (b40cc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40c2:	6018      	str	r0, [r3, #0]
}
   b40c4:	bd08      	pop	{r3, pc}
   b40c6:	bf00      	nop
   b40c8:	2003db1d 	.word	0x2003db1d
   b40cc:	2003dca8 	.word	0x2003dca8

000b40d0 <_Z13handle_sensorv>:
/**
 * @brief    IRQ handler for the KW sensor. This function is called every time the KW sensor detects a pulse.
 */
void handle_sensor(void)
{
   b40d0:	b508      	push	{r3, lr}
   b40d2:	f001 f96d 	bl	b53b0 <HAL_Timer_Get_Milli_Seconds>
    static unsigned long last_read = 0;
    unsigned long current_reading = millis();
    unsigned long delta = current_reading - last_read;
   b40d6:	490c      	ldr	r1, [pc, #48]	; (b4108 <_Z13handle_sensorv+0x38>)
   b40d8:	680b      	ldr	r3, [r1, #0]
   b40da:	1ac3      	subs	r3, r0, r3

    // Check if we have a valid reading. I.e. at least 100 ms since last reading, which is equal to 36kW
    if (delta > 100)
   b40dc:	2b64      	cmp	r3, #100	; 0x64
   b40de:	d911      	bls.n	b4104 <_Z13handle_sensorv+0x34>
    {
        // We have a valid reading
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40e0:	4a0a      	ldr	r2, [pc, #40]	; (b410c <_Z13handle_sensorv+0x3c>)
   b40e2:	fbb2 f3f3 	udiv	r3, r2, r3
   b40e6:	4a0a      	ldr	r2, [pc, #40]	; (b4110 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b40e8:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40ea:	6013      	str	r3, [r2, #0]

        // One flash from sensor equals 1 Whr - Add to total
        wh_today[currentHour] += 1;
   b40ec:	4b09      	ldr	r3, [pc, #36]	; (b4114 <_Z13handle_sensorv+0x44>)
   b40ee:	7819      	ldrb	r1, [r3, #0]
   b40f0:	4b09      	ldr	r3, [pc, #36]	; (b4118 <_Z13handle_sensorv+0x48>)
   b40f2:	681a      	ldr	r2, [r3, #0]
   b40f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b40f8:	3301      	adds	r3, #1
   b40fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update flag - Transmit sensor values
        TRANSMIT_SENSOR = true;
   b40fe:	4b07      	ldr	r3, [pc, #28]	; (b411c <_Z13handle_sensorv+0x4c>)
   b4100:	2201      	movs	r2, #1
   b4102:	701a      	strb	r2, [r3, #0]
    }
}
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	2003dbcc 	.word	0x2003dbcc
   b410c:	0036ee80 	.word	0x0036ee80
   b4110:	2003dc34 	.word	0x2003dc34
   b4114:	2003dca4 	.word	0x2003dca4
   b4118:	2003e1b8 	.word	0x2003e1b8
   b411c:	2003db22 	.word	0x2003db22

000b4120 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4120:	6943      	ldr	r3, [r0, #20]
   b4122:	b113      	cbz	r3, b412a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4124:	6983      	ldr	r3, [r0, #24]
   b4126:	300c      	adds	r0, #12
   b4128:	4718      	bx	r3
            callback();
        }
    }
   b412a:	4770      	bx	lr

000b412c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b412c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b412e:	2100      	movs	r1, #0
   b4130:	4604      	mov	r4, r0
   b4132:	4608      	mov	r0, r1
   b4134:	f001 f9de 	bl	b54f4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4138:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b413a:	4620      	mov	r0, r4
   b413c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b413e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4140:	f001 f9f0 	bl	b5524 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4144:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4146:	b10c      	cbz	r4, b414c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4148:	2301      	movs	r3, #1
   b414a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b414c:	2100      	movs	r1, #0
   b414e:	2001      	movs	r0, #1
   b4150:	f001 f9d0 	bl	b54f4 <os_thread_scheduling>
            }
        }
        if (t) {
   b4154:	b12c      	cbz	r4, b4162 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4156:	6823      	ldr	r3, [r4, #0]
   b4158:	4620      	mov	r0, r4
   b415a:	689b      	ldr	r3, [r3, #8]
   b415c:	4798      	blx	r3
            t->running = false;
   b415e:	2300      	movs	r3, #0
   b4160:	7123      	strb	r3, [r4, #4]
        }
    }
   b4162:	b002      	add	sp, #8
   b4164:	bd10      	pop	{r4, pc}

000b4166 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4166:	2a01      	cmp	r2, #1
   b4168:	d102      	bne.n	b4170 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416a:	6001      	str	r1, [r0, #0]
      }
   b416c:	2000      	movs	r0, #0
   b416e:	4770      	bx	lr
	  switch (__op)
   b4170:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4172:	bf04      	itt	eq
   b4174:	680b      	ldreq	r3, [r1, #0]
   b4176:	6003      	streq	r3, [r0, #0]
	      break;
   b4178:	e7f8      	b.n	b416c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417a:	6803      	ldr	r3, [r0, #0]
   b417c:	4718      	bx	r3

000b417e <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b417e:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4180:	6880      	ldr	r0, [r0, #8]
   b4182:	b130      	cbz	r0, b4192 <_ZN5Timer4stopEj.isra.0+0x14>
   b4184:	2300      	movs	r3, #0
   b4186:	e9cd 1300 	strd	r1, r3, [sp]
   b418a:	461a      	mov	r2, r3
   b418c:	2102      	movs	r1, #2
   b418e:	f001 f9d1 	bl	b5534 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4192:	b003      	add	sp, #12
   b4194:	f85d fb04 	ldr.w	pc, [sp], #4

000b4198 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b4198:	b530      	push	{r4, r5, lr}
   b419a:	4605      	mov	r5, r0
   b419c:	b085      	sub	sp, #20
   b419e:	460c      	mov	r4, r1
        stop(fromISR);
   b41a0:	4611      	mov	r1, r2
   b41a2:	9203      	str	r2, [sp, #12]
   b41a4:	f7ff ffeb 	bl	b417e <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41a8:	68a8      	ldr	r0, [r5, #8]
   b41aa:	b130      	cbz	r0, b41ba <_ZN5Timer6_startEjb.isra.0+0x22>
   b41ac:	2300      	movs	r3, #0
   b41ae:	e9cd 4300 	strd	r4, r3, [sp]
   b41b2:	9a03      	ldr	r2, [sp, #12]
   b41b4:	4619      	mov	r1, r3
   b41b6:	f001 f9bd 	bl	b5534 <os_timer_change>
    }
   b41ba:	b005      	add	sp, #20
   b41bc:	bd30      	pop	{r4, r5, pc}
	...

000b41c0 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b41c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b41c4:	f003 fc00 	bl	b79c8 <_ZN9TimeClass4hourEv>
   b41c8:	4f26      	ldr	r7, [pc, #152]	; (b4264 <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b41ca:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4268 <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b41ce:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b41d0:	f003 fc06 	bl	b79e0 <_ZN9TimeClass6minuteEv>
   b41d4:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b41d6:	f003 fc0f 	bl	b79f8 <_ZN9TimeClass6secondEv>
   b41da:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b41dc:	f003 fc18 	bl	b7a10 <_ZN9TimeClass3dayEv>
    timer.stop();
   b41e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b41e4:	4604      	mov	r4, r0
    timer.stop();
   b41e6:	4640      	mov	r0, r8
   b41e8:	f7ff ffc9 	bl	b417e <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b41ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b41f0:	b178      	cbz	r0, b4212 <_Z10check_timev+0x52>
   b41f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b41f6:	b2ed      	uxtb	r5, r5
   b41f8:	2200      	movs	r2, #0
   b41fa:	e9cd 1200 	strd	r1, r2, [sp]
   b41fe:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4202:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4206:	43ed      	mvns	r5, r5
   b4208:	fb01 5303 	mla	r3, r1, r3, r5
   b420c:	2103      	movs	r1, #3
   b420e:	f001 f991 	bl	b5534 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4212:	4815      	ldr	r0, [pc, #84]	; (b4268 <_Z10check_timev+0xa8>)
   b4214:	2200      	movs	r2, #0
   b4216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b421a:	f7ff ffbd 	bl	b4198 <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b421e:	783b      	ldrb	r3, [r7, #0]
   b4220:	2b0d      	cmp	r3, #13
   b4222:	d114      	bne.n	b424e <_Z10check_timev+0x8e>
   b4224:	4a11      	ldr	r2, [pc, #68]	; (b426c <_Z10check_timev+0xac>)
   b4226:	6811      	ldr	r1, [r2, #0]
   b4228:	b2e4      	uxtb	r4, r4
   b422a:	42a1      	cmp	r1, r4
   b422c:	d003      	beq.n	b4236 <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b422e:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4230:	4a0f      	ldr	r2, [pc, #60]	; (b4270 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b4232:	2101      	movs	r1, #1
   b4234:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4236:	b93e      	cbnz	r6, b4248 <_Z10check_timev+0x88>
   b4238:	4a0e      	ldr	r2, [pc, #56]	; (b4274 <_Z10check_timev+0xb4>)
   b423a:	6811      	ldr	r1, [r2, #0]
   b423c:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b423e:	bf1f      	itttt	ne
   b4240:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4242:	4b0d      	ldrne	r3, [pc, #52]	; (b4278 <_Z10check_timev+0xb8>)
   b4244:	2201      	movne	r2, #1
   b4246:	701a      	strbne	r2, [r3, #0]
    }
   b4248:	b002      	add	sp, #8
   b424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b424e:	2b00      	cmp	r3, #0
   b4250:	d1f1      	bne.n	b4236 <_Z10check_timev+0x76>
   b4252:	4a0a      	ldr	r2, [pc, #40]	; (b427c <_Z10check_timev+0xbc>)
   b4254:	6811      	ldr	r1, [r2, #0]
   b4256:	b2e4      	uxtb	r4, r4
   b4258:	42a1      	cmp	r1, r4
   b425a:	d0ec      	beq.n	b4236 <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b425c:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b425e:	4a08      	ldr	r2, [pc, #32]	; (b4280 <_Z10check_timev+0xc0>)
   b4260:	e7e7      	b.n	b4232 <_Z10check_timev+0x72>
   b4262:	bf00      	nop
   b4264:	2003dca4 	.word	0x2003dca4
   b4268:	2003e150 	.word	0x2003e150
   b426c:	2003d908 	.word	0x2003d908
   b4270:	2003db1c 	.word	0x2003db1c
   b4274:	2003d910 	.word	0x2003d910
   b4278:	2003db23 	.word	0x2003db23
   b427c:	2003d90c 	.word	0x2003d90c
   b4280:	2003db1e 	.word	0x2003db1e

000b4284 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4284:	b40e      	push	{r1, r2, r3}
   b4286:	b503      	push	{r0, r1, lr}
   b4288:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b428a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b428c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4290:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4292:	f003 fac4 	bl	b781e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4296:	b002      	add	sp, #8
   b4298:	f85d eb04 	ldr.w	lr, [sp], #4
   b429c:	b003      	add	sp, #12
   b429e:	4770      	bx	lr

000b42a0 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b42a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b42a4:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b42a6:	4608      	mov	r0, r1
{
   b42a8:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b42aa:	f005 f954 	bl	b9556 <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b42ae:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b42b0:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b42b2:	a801      	add	r0, sp, #4
   b42b4:	f005 f929 	bl	b950a <strcpy>
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42b8:	493f      	ldr	r1, [pc, #252]	; (b43b8 <_Z9myHandlerPKcS0_+0x118>)
   b42ba:	4d40      	ldr	r5, [pc, #256]	; (b43bc <_Z9myHandlerPKcS0_+0x11c>)
   b42bc:	a801      	add	r0, sp, #4
   b42be:	f005 ffa1 	bl	ba204 <strtok>
   b42c2:	f005 f896 	bl	b93f2 <atoi>
   b42c6:	4621      	mov	r1, r4
   b42c8:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b42cc:	f005 f904 	bl	b94d8 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b42d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b42d4:	d25f      	bcs.n	b4396 <_Z9myHandlerPKcS0_+0xf6>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b42d6:	f003 fff3 	bl	b82c0 <_Z16_fetch_usbserialv>
   b42da:	462a      	mov	r2, r5
   b42dc:	4938      	ldr	r1, [pc, #224]	; (b43c0 <_Z9myHandlerPKcS0_+0x120>)
   b42de:	4e39      	ldr	r6, [pc, #228]	; (b43c4 <_Z9myHandlerPKcS0_+0x124>)
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b42e0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b43d8 <_Z9myHandlerPKcS0_+0x138>
        Serial.printf("%s\n", temp);
   b42e4:	f7ff ffce 	bl	b4284 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b42e8:	4628      	mov	r0, r5
   b42ea:	4937      	ldr	r1, [pc, #220]	; (b43c8 <_Z9myHandlerPKcS0_+0x128>)
   b42ec:	f005 ff8a 	bl	ba204 <strtok>
        for (int i = 0; i < range; i++)
   b42f0:	2500      	movs	r5, #0
        token = strtok(temp, ",!");
   b42f2:	4604      	mov	r4, r0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b42f4:	f04f 0800 	mov.w	r8, #0
        for (int i = 0; i < range; i++)
   b42f8:	4b34      	ldr	r3, [pc, #208]	; (b43cc <_Z9myHandlerPKcS0_+0x12c>)
   b42fa:	681b      	ldr	r3, [r3, #0]
   b42fc:	42ab      	cmp	r3, r5
   b42fe:	dd47      	ble.n	b4390 <_Z9myHandlerPKcS0_+0xf0>
            sscanf(token, "%*d-%*d-%*dT%d:%*d:%*d", &cost_hour[i]);
   b4300:	4632      	mov	r2, r6
   b4302:	4933      	ldr	r1, [pc, #204]	; (b43d0 <_Z9myHandlerPKcS0_+0x130>)
   b4304:	f8df a0d4 	ldr.w	sl, [pc, #212]	; b43dc <_Z9myHandlerPKcS0_+0x13c>
   b4308:	4620      	mov	r0, r4
   b430a:	f001 fb4f 	bl	b59ac <sscanf>
            token = strtok(NULL, ",!");
   b430e:	492e      	ldr	r1, [pc, #184]	; (b43c8 <_Z9myHandlerPKcS0_+0x128>)
   b4310:	2000      	movs	r0, #0
   b4312:	f005 ff77 	bl	ba204 <strtok>
            if (cost_hour[i] >= 0 && cost_hour[i] < 7)
   b4316:	6833      	ldr	r3, [r6, #0]
   b4318:	2b06      	cmp	r3, #6
            token = strtok(NULL, ",!");
   b431a:	4604      	mov	r4, r0
            if (cost_hour[i] >= 0 && cost_hour[i] < 7)
   b431c:	f106 0604 	add.w	r6, r6, #4
   b4320:	ea4f 07c5 	mov.w	r7, r5, lsl #3
   b4324:	d813      	bhi.n	b434e <_Z9myHandlerPKcS0_+0xae>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b4326:	f005 f861 	bl	b93ec <atof>
   b432a:	f8da 3000 	ldr.w	r3, [sl]
   b432e:	4642      	mov	r2, r8
   b4330:	ec51 0b10 	vmov	r0, r1, d0
   b4334:	441f      	add	r7, r3
   b4336:	464b      	mov	r3, r9
   b4338:	f004 fe70 	bl	b901c <__aeabi_ddiv>
   b433c:	a318      	add	r3, pc, #96	; (adr r3, b43a0 <_Z9myHandlerPKcS0_+0x100>)
   b433e:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4342:	f004 fb8b 	bl	b8a5c <__adddf3>
        for (int i = 0; i < range; i++)
   b4346:	3501      	adds	r5, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4348:	e9c7 0100 	strd	r0, r1, [r7]
        for (int i = 0; i < range; i++)
   b434c:	e7d4      	b.n	b42f8 <_Z9myHandlerPKcS0_+0x58>
            else if (cost_hour[i] > 16 && cost_hour[i] < 22)
   b434e:	3b11      	subs	r3, #17
   b4350:	2b04      	cmp	r3, #4
   b4352:	d80e      	bhi.n	b4372 <_Z9myHandlerPKcS0_+0xd2>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4354:	f005 f84a 	bl	b93ec <atof>
   b4358:	f8da 3000 	ldr.w	r3, [sl]
   b435c:	4642      	mov	r2, r8
   b435e:	ec51 0b10 	vmov	r0, r1, d0
   b4362:	441f      	add	r7, r3
   b4364:	464b      	mov	r3, r9
   b4366:	f004 fe59 	bl	b901c <__aeabi_ddiv>
   b436a:	a30f      	add	r3, pc, #60	; (adr r3, b43a8 <_Z9myHandlerPKcS0_+0x108>)
   b436c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4370:	e7e7      	b.n	b4342 <_Z9myHandlerPKcS0_+0xa2>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4372:	f005 f83b 	bl	b93ec <atof>
   b4376:	f8da 3000 	ldr.w	r3, [sl]
   b437a:	4642      	mov	r2, r8
   b437c:	ec51 0b10 	vmov	r0, r1, d0
   b4380:	441f      	add	r7, r3
   b4382:	464b      	mov	r3, r9
   b4384:	f004 fe4a 	bl	b901c <__aeabi_ddiv>
   b4388:	a309      	add	r3, pc, #36	; (adr r3, b43b0 <_Z9myHandlerPKcS0_+0x110>)
   b438a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b438e:	e7d8      	b.n	b4342 <_Z9myHandlerPKcS0_+0xa2>
            }

        }
        CALCULATE = true;
   b4390:	4b10      	ldr	r3, [pc, #64]	; (b43d4 <_Z9myHandlerPKcS0_+0x134>)
   b4392:	2201      	movs	r2, #1
   b4394:	701a      	strb	r2, [r3, #0]
    }
   b4396:	b004      	add	sp, #16
   b4398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b439c:	f3af 8000 	nop.w
   b43a0:	ebedfa44 	.word	0xebedfa44
   b43a4:	3fcb39c0 	.word	0x3fcb39c0
   b43a8:	2d0e5604 	.word	0x2d0e5604
   b43ac:	3ffe9db2 	.word	0x3ffe9db2
   b43b0:	42c3c9ef 	.word	0x42c3c9ef
   b43b4:	3fe469ad 	.word	0x3fe469ad
   b43b8:	000bb5b8 	.word	0x000bb5b8
   b43bc:	2003dd4c 	.word	0x2003dd4c
   b43c0:	000bb5c0 	.word	0x000bb5c0
   b43c4:	2003dc38 	.word	0x2003dc38
   b43c8:	000bb5c4 	.word	0x000bb5c4
   b43cc:	2003d914 	.word	0x2003d914
   b43d0:	000bb5c7 	.word	0x000bb5c7
   b43d4:	2003db01 	.word	0x2003db01
   b43d8:	408f4000 	.word	0x408f4000
   b43dc:	2003dc9c 	.word	0x2003dc9c

000b43e0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43e0:	b510      	push	{r4, lr}
      if (_M_manager)
   b43e2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43e4:	4604      	mov	r4, r0
      if (_M_manager)
   b43e6:	b113      	cbz	r3, b43ee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43e8:	2203      	movs	r2, #3
   b43ea:	4601      	mov	r1, r0
   b43ec:	4798      	blx	r3
    }
   b43ee:	4620      	mov	r0, r4
   b43f0:	bd10      	pop	{r4, pc}
	...

000b43f4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43f4:	b538      	push	{r3, r4, r5, lr}
   b43f6:	4b0f      	ldr	r3, [pc, #60]	; (b4434 <_ZN5TimerD1Ev+0x40>)
   b43f8:	6003      	str	r3, [r0, #0]
        if (handle) {
   b43fa:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b43fc:	4604      	mov	r4, r0
        if (handle) {
   b43fe:	b19b      	cbz	r3, b4428 <_ZN5TimerD1Ev+0x34>
            stop();
   b4400:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4404:	f7ff febb 	bl	b417e <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4408:	68a0      	ldr	r0, [r4, #8]
   b440a:	2100      	movs	r1, #0
   b440c:	f001 f8b2 	bl	b5574 <os_timer_set_id>
            while (running) {
   b4410:	7923      	ldrb	r3, [r4, #4]
   b4412:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4416:	b113      	cbz	r3, b441e <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4418:	f001 f864 	bl	b54e4 <os_thread_yield>
            while (running) {
   b441c:	e7f8      	b.n	b4410 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b441e:	68a0      	ldr	r0, [r4, #8]
   b4420:	4629      	mov	r1, r5
   b4422:	f001 f877 	bl	b5514 <os_timer_destroy>
            handle = nullptr;
   b4426:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4428:	f104 000c 	add.w	r0, r4, #12
   b442c:	f7ff ffd8 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
    }
   b4430:	4620      	mov	r0, r4
   b4432:	bd38      	pop	{r3, r4, r5, pc}
   b4434:	000bba28 	.word	0x000bba28

000b4438 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4438:	b510      	push	{r4, lr}
   b443a:	4604      	mov	r4, r0
    }
   b443c:	f7ff ffda 	bl	b43f4 <_ZN5TimerD1Ev>
   b4440:	4620      	mov	r0, r4
   b4442:	211c      	movs	r1, #28
   b4444:	f7ff fe2b 	bl	b409e <_ZdlPvj>
   b4448:	4620      	mov	r0, r4
   b444a:	bd10      	pop	{r4, pc}

000b444c <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b444c:	b570      	push	{r4, r5, r6, lr}
   b444e:	b090      	sub	sp, #64	; 0x40
    //BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
    BLE.on();
   b4450:	f002 faf2 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4454:	f002 fb3a 	bl	b6acc <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4458:	f002 faee 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b445c:	4a3d      	ldr	r2, [pc, #244]	; (b4554 <_Z9ble_setupv+0x108>)
   b445e:	4c3e      	ldr	r4, [pc, #248]	; (b4558 <_Z9ble_setupv+0x10c>)
   b4460:	4601      	mov	r1, r0
   b4462:	a80b      	add	r0, sp, #44	; 0x2c
   b4464:	f003 f86c 	bl	b7540 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4468:	a80b      	add	r0, sp, #44	; 0x2c
   b446a:	f002 fbe6 	bl	b6c3a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b446e:	f002 fae3 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4472:	4a3a      	ldr	r2, [pc, #232]	; (b455c <_Z9ble_setupv+0x110>)
   b4474:	4601      	mov	r1, r0
   b4476:	a80b      	add	r0, sp, #44	; 0x2c
   b4478:	f003 f862 	bl	b7540 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b447c:	a80b      	add	r0, sp, #44	; 0x2c
   b447e:	f002 fbdc 	bl	b6c3a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4482:	f002 fad9 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4486:	4a36      	ldr	r2, [pc, #216]	; (b4560 <_Z9ble_setupv+0x114>)
   b4488:	4601      	mov	r1, r0
   b448a:	a80b      	add	r0, sp, #44	; 0x2c
   b448c:	f003 f858 	bl	b7540 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4490:	a80b      	add	r0, sp, #44	; 0x2c
   b4492:	f002 fbd2 	bl	b6c3a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4496:	f002 facf 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b449a:	4a32      	ldr	r2, [pc, #200]	; (b4564 <_Z9ble_setupv+0x118>)
   b449c:	4601      	mov	r1, r0
   b449e:	a80b      	add	r0, sp, #44	; 0x2c
   b44a0:	f003 f84e 	bl	b7540 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44a4:	a80b      	add	r0, sp, #44	; 0x2c
   b44a6:	f002 fbc8 	bl	b6c3a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b44aa:	f002 fac5 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44ae:	4a2e      	ldr	r2, [pc, #184]	; (b4568 <_Z9ble_setupv+0x11c>)
   b44b0:	4601      	mov	r1, r0
   b44b2:	a80b      	add	r0, sp, #44	; 0x2c
   b44b4:	f003 f844 	bl	b7540 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44b8:	a80b      	add	r0, sp, #44	; 0x2c
   b44ba:	f002 fbbe 	bl	b6c3a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b44be:	f002 fabb 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44c2:	4a2a      	ldr	r2, [pc, #168]	; (b456c <_Z9ble_setupv+0x120>)
   b44c4:	4601      	mov	r1, r0
   b44c6:	a80b      	add	r0, sp, #44	; 0x2c
   b44c8:	f003 f83a 	bl	b7540 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44cc:	a80b      	add	r0, sp, #44	; 0x2c
   b44ce:	f002 fbb4 	bl	b6c3a <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b44d2:	a803      	add	r0, sp, #12
   b44d4:	f002 fce7 	bl	b6ea6 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b44d8:	4b25      	ldr	r3, [pc, #148]	; (b4570 <_Z9ble_setupv+0x124>)
   b44da:	a803      	add	r0, sp, #12
   b44dc:	6819      	ldr	r1, [r3, #0]
   b44de:	f002 fcf5 	bl	b6ecc <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b44e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44e4:	ad06      	add	r5, sp, #24
   b44e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b44e8:	ad06      	add	r5, sp, #24
   b44ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b44ec:	6826      	ldr	r6, [r4, #0]
   b44ee:	ac0b      	add	r4, sp, #44	; 0x2c
   b44f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44f2:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b44f4:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44f6:	f002 f8ad 	bl	b6654 <_ZNK8particle7BleUuid4typeEv>
   b44fa:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b44fc:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44fe:	bb0c      	cbnz	r4, b4544 <_Z9ble_setupv+0xf8>
            uint16_t uuid16 = tempUUID.shorted();
   b4500:	f002 f8c4 	bl	b668c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4504:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4506:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b450a:	2302      	movs	r3, #2
   b450c:	f10d 020a 	add.w	r2, sp, #10
   b4510:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4512:	a803      	add	r0, sp, #12
   b4514:	f002 fcbc 	bl	b6e90 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4518:	f002 fa8e 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b451c:	2200      	movs	r2, #0
   b451e:	a903      	add	r1, sp, #12
   b4520:	f002 fb1e 	bl	b6b60 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4524:	f003 fecc 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4528:	4912      	ldr	r1, [pc, #72]	; (b4574 <_Z9ble_setupv+0x128>)
   b452a:	f003 f950 	bl	b77ce <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b452e:	f002 fa83 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4532:	4911      	ldr	r1, [pc, #68]	; (b4578 <_Z9ble_setupv+0x12c>)
   b4534:	2200      	movs	r2, #0
   b4536:	f002 ff05 	bl	b7344 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b453a:	9803      	ldr	r0, [sp, #12]
   b453c:	f001 fa1e 	bl	b597c <free>

}
   b4540:	b010      	add	sp, #64	; 0x40
   b4542:	bd70      	pop	{r4, r5, r6, pc}
   b4544:	f002 f8a4 	bl	b6690 <_ZNK8particle7BleUuid8rawBytesEv>
   b4548:	2300      	movs	r3, #0
   b454a:	9300      	str	r3, [sp, #0]
   b454c:	4602      	mov	r2, r0
   b454e:	2310      	movs	r3, #16
   b4550:	2107      	movs	r1, #7
   b4552:	e7de      	b.n	b4512 <_Z9ble_setupv+0xc6>
   b4554:	2003db24 	.word	0x2003db24
   b4558:	2003db50 	.word	0x2003db50
   b455c:	2003db14 	.word	0x2003db14
   b4560:	2003db04 	.word	0x2003db04
   b4564:	2003db0c 	.word	0x2003db0c
   b4568:	2003db2c 	.word	0x2003db2c
   b456c:	2003db34 	.word	0x2003db34
   b4570:	2003d904 	.word	0x2003d904
   b4574:	000bb5de 	.word	0x000bb5de
   b4578:	000b40b5 	.word	0x000b40b5
   b457c:	00000000 	.word	0x00000000

000b4580 <_Z8calc_lowPA2_iPdPii>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int * cost_hour, int size)
{
   b4580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4584:	ed2d 8b02 	vpush	{d8}
   b4588:	b09d      	sub	sp, #116	; 0x74
   b458a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value
   b458e:	4f50      	ldr	r7, [pc, #320]	; (b46d0 <_Z8calc_lowPA2_iPdPii+0x150>)
{
   b4590:	4605      	mov	r5, r0
   b4592:	468b      	mov	fp, r1
   b4594:	468a      	mov	sl, r1

    for (int i = 0; i < size; i++)
   b4596:	2400      	movs	r4, #0
    double last_small = 100; // Assign any absurdly high value
   b4598:	2600      	movs	r6, #0
    double last_big = 0;
   b459a:	f04f 0800 	mov.w	r8, #0
   b459e:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < size; i++)
   b45a2:	9b02      	ldr	r3, [sp, #8]
   b45a4:	429c      	cmp	r4, r3
   b45a6:	da17      	bge.n	b45d8 <_Z8calc_lowPA2_iPdPii+0x58>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b45a8:	ecba 7b02 	vldmia	sl!, {d7}
   b45ac:	4642      	mov	r2, r8
   b45ae:	ec51 0b17 	vmov	r0, r1, d7
   b45b2:	464b      	mov	r3, r9
   b45b4:	ed8d 7b00 	vstr	d7, [sp]
   b45b8:	f004 fe96 	bl	b92e8 <__aeabi_dcmpgt>
   b45bc:	b108      	cbz	r0, b45c2 <_Z8calc_lowPA2_iPdPii+0x42>
        {
            last_big = cost[i];
   b45be:	e9dd 8900 	ldrd	r8, r9, [sp]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b45c2:	e9dd 0100 	ldrd	r0, r1, [sp]
   b45c6:	4632      	mov	r2, r6
   b45c8:	463b      	mov	r3, r7
   b45ca:	f004 fe6f 	bl	b92ac <__aeabi_dcmplt>
   b45ce:	b108      	cbz	r0, b45d4 <_Z8calc_lowPA2_iPdPii+0x54>
        {
            last_small = cost[i];
   b45d0:	e9dd 6700 	ldrd	r6, r7, [sp]
    for (int i = 0; i < size; i++)
   b45d4:	3401      	adds	r4, #1
   b45d6:	e7e4      	b.n	b45a2 <_Z8calc_lowPA2_iPdPii+0x22>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b45d8:	4632      	mov	r2, r6
   b45da:	463b      	mov	r3, r7
   b45dc:	4640      	mov	r0, r8
   b45de:	4649      	mov	r1, r9
   b45e0:	f004 fa3a 	bl	b8a58 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b45e4:	a338      	add	r3, pc, #224	; (adr r3, b46c8 <_Z8calc_lowPA2_iPdPii+0x148>)
   b45e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b45ea:	f004 fbed 	bl	b8dc8 <__aeabi_dmul>
   b45ee:	4632      	mov	r2, r6
   b45f0:	463b      	mov	r3, r7
   b45f2:	f004 fa33 	bl	b8a5c <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= size; i++)
   b45f6:	f04f 0a00 	mov.w	sl, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b45fa:	ec41 0b18 	vmov	d8, r0, r1
    int idx = 0;
   b45fe:	4654      	mov	r4, sl
    for (int i = 0; i <= size; i++)
   b4600:	9b02      	ldr	r3, [sp, #8]
   b4602:	459a      	cmp	sl, r3
   b4604:	dc12      	bgt.n	b462c <_Z8calc_lowPA2_iPdPii+0xac>
    {
        
        if (cost[i] < small_offset)
   b4606:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   b460a:	ec53 2b18 	vmov	r2, r3, d8
   b460e:	f004 fe4d 	bl	b92ac <__aeabi_dcmplt>
   b4612:	b140      	cbz	r0, b4626 <_Z8calc_lowPA2_iPdPii+0xa6>
        {
            low_range_hour[idx] = cost_hour[i];
   b4614:	9a03      	ldr	r2, [sp, #12]
   b4616:	ab1c      	add	r3, sp, #112	; 0x70
   b4618:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b461c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
   b4620:	f843 2c60 	str.w	r2, [r3, #-96]
            
            idx++;
   b4624:	3401      	adds	r4, #1
    for (int i = 0; i <= size; i++)
   b4626:	f10a 0a01 	add.w	sl, sl, #1
   b462a:	e7e9      	b.n	b4600 <_Z8calc_lowPA2_iPdPii+0x80>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b462c:	f003 fe48 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4630:	4928      	ldr	r1, [pc, #160]	; (b46d4 <_Z8calc_lowPA2_iPdPii+0x154>)
   b4632:	4642      	mov	r2, r8
   b4634:	464b      	mov	r3, r9
   b4636:	f7ff fe25 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b463a:	f003 fe41 	bl	b82c0 <_Z16_fetch_usbserialv>
   b463e:	4926      	ldr	r1, [pc, #152]	; (b46d8 <_Z8calc_lowPA2_iPdPii+0x158>)
   b4640:	4632      	mov	r2, r6
   b4642:	463b      	mov	r3, r7
   b4644:	f7ff fe1e 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4648:	f003 fe3a 	bl	b82c0 <_Z16_fetch_usbserialv>
   b464c:	4923      	ldr	r1, [pc, #140]	; (b46dc <_Z8calc_lowPA2_iPdPii+0x15c>)
   b464e:	f7ff fe19 	bl	b4284 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b4652:	b36c      	cbz	r4, b46b0 <_Z8calc_lowPA2_iPdPii+0x130>
    int i = 0;
   b4654:	2300      	movs	r3, #0
    int cnt = 0;
   b4656:	461e      	mov	r6, r3
   b4658:	1d2f      	adds	r7, r5, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b465a:	aa1c      	add	r2, sp, #112	; 0x70
   b465c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4660:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b4664:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
   b4668:	aa04      	add	r2, sp, #16
   b466a:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b466e:	6802      	ldr	r2, [r0, #0]
   b4670:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b4674:	3901      	subs	r1, #1
   b4676:	428a      	cmp	r2, r1
   b4678:	f103 0301 	add.w	r3, r3, #1
   b467c:	d0f7      	beq.n	b466e <_Z8calc_lowPA2_iPdPii+0xee>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b467e:	3201      	adds	r2, #1
        while (i <= idx)
   b4680:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b4682:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
            
            cnt++;
   b4686:	f106 0201 	add.w	r2, r6, #1
        while (i <= idx)
   b468a:	dd0f      	ble.n	b46ac <_Z8calc_lowPA2_iPdPii+0x12c>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b468c:	f8df 8054 	ldr.w	r8, [pc, #84]	; b46e4 <_Z8calc_lowPA2_iPdPii+0x164>
    for (int z = 0; z < cnt; z++)
   b4690:	2400      	movs	r4, #0
   b4692:	42b4      	cmp	r4, r6
   b4694:	d00c      	beq.n	b46b0 <_Z8calc_lowPA2_iPdPii+0x130>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b4696:	f003 fe13 	bl	b82c0 <_Z16_fetch_usbserialv>
   b469a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b469e:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b46a2:	4641      	mov	r1, r8
   b46a4:	f7ff fdee 	bl	b4284 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b46a8:	3401      	adds	r4, #1
   b46aa:	e7f2      	b.n	b4692 <_Z8calc_lowPA2_iPdPii+0x112>
            cnt++;
   b46ac:	4616      	mov	r6, r2
   b46ae:	e7d4      	b.n	b465a <_Z8calc_lowPA2_iPdPii+0xda>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b46b0:	4b0b      	ldr	r3, [pc, #44]	; (b46e0 <_Z8calc_lowPA2_iPdPii+0x160>)
   b46b2:	2201      	movs	r2, #1

    return cnt;
}
   b46b4:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b46b6:	701a      	strb	r2, [r3, #0]
}
   b46b8:	b01d      	add	sp, #116	; 0x74
   b46ba:	ecbd 8b02 	vpop	{d8}
   b46be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46c2:	bf00      	nop
   b46c4:	f3af 8000 	nop.w
   b46c8:	33333333 	.word	0x33333333
   b46cc:	3fd33333 	.word	0x3fd33333
   b46d0:	40590000 	.word	0x40590000
   b46d4:	000bb602 	.word	0x000bb602
   b46d8:	000bb620 	.word	0x000bb620
   b46dc:	000bb63d 	.word	0x000bb63d
   b46e0:	2003db21 	.word	0x2003db21
   b46e4:	000bb67b 	.word	0x000bb67b

000b46e8 <_Z18hourly_JSON_updatev>:
extern String wh_yesterday_Json;
extern String pricestoday_Json;
extern String pricesyesterday_Json;

void hourly_JSON_update()
{
   b46e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b46ea:	4913      	ldr	r1, [pc, #76]	; (b4738 <_Z18hourly_JSON_updatev+0x50>)
   b46ec:	4813      	ldr	r0, [pc, #76]	; (b473c <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b46ee:	4e14      	ldr	r6, [pc, #80]	; (b4740 <_Z18hourly_JSON_updatev+0x58>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b46f0:	4d12      	ldr	r5, [pc, #72]	; (b473c <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b46f2:	4f14      	ldr	r7, [pc, #80]	; (b4744 <_Z18hourly_JSON_updatev+0x5c>)
{
   b46f4:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b46f6:	f001 fdc1 	bl	b627c <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b46fa:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b46fc:	6833      	ldr	r3, [r6, #0]
   b46fe:	220a      	movs	r2, #10
   b4700:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4704:	4668      	mov	r0, sp
   b4706:	f001 fdcb 	bl	b62a0 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b470a:	4669      	mov	r1, sp
   b470c:	4628      	mov	r0, r5
   b470e:	f001 fdf1 	bl	b62f4 <_ZN6String6concatERKS_>
   b4712:	4668      	mov	r0, sp
   b4714:	f001 fd2e 	bl	b6174 <_ZN6StringD1Ev>
        if (i < 23)
   b4718:	2c17      	cmp	r4, #23
   b471a:	d003      	beq.n	b4724 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b471c:	4639      	mov	r1, r7
   b471e:	4628      	mov	r0, r5
   b4720:	f001 fdec 	bl	b62fc <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b4724:	3401      	adds	r4, #1
   b4726:	2c18      	cmp	r4, #24
   b4728:	d1e8      	bne.n	b46fc <_Z18hourly_JSON_updatev+0x14>
   b472a:	4907      	ldr	r1, [pc, #28]	; (b4748 <_Z18hourly_JSON_updatev+0x60>)
   b472c:	4803      	ldr	r0, [pc, #12]	; (b473c <_Z18hourly_JSON_updatev+0x54>)
        {
            wh_today_Json += ",";
        }
    }
    wh_today_Json += "]}";
}
   b472e:	b005      	add	sp, #20
   b4730:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4734:	f001 bde2 	b.w	b62fc <_ZN6String6concatEPKc>
   b4738:	000bb689 	.word	0x000bb689
   b473c:	2003e1bc 	.word	0x2003e1bc
   b4740:	2003e1b8 	.word	0x2003e1b8
   b4744:	000bb698 	.word	0x000bb698
   b4748:	000bb69a 	.word	0x000bb69a

000b474c <_Z11update_JSONv>:
void update_JSON()
{
   b474c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b474e:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4750:	4972      	ldr	r1, [pc, #456]	; (b491c <_Z11update_JSONv+0x1d0>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b4752:	4e73      	ldr	r6, [pc, #460]	; (b4920 <_Z11update_JSONv+0x1d4>)
   b4754:	4f73      	ldr	r7, [pc, #460]	; (b4924 <_Z11update_JSONv+0x1d8>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4756:	4d74      	ldr	r5, [pc, #464]	; (b4928 <_Z11update_JSONv+0x1dc>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4758:	4668      	mov	r0, sp
   b475a:	f001 fde1 	bl	b6320 <_ZN6String6formatEPKcz>
   b475e:	4669      	mov	r1, sp
   b4760:	4871      	ldr	r0, [pc, #452]	; (b4928 <_Z11update_JSONv+0x1dc>)
   b4762:	f001 fd83 	bl	b626c <_ZN6StringaSEOS_>
   b4766:	4668      	mov	r0, sp
   b4768:	f001 fd04 	bl	b6174 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b476c:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b476e:	6833      	ldr	r3, [r6, #0]
   b4770:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4774:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4778:	4639      	mov	r1, r7
   b477a:	4668      	mov	r0, sp
   b477c:	f001 fdd0 	bl	b6320 <_ZN6String6formatEPKcz>
   b4780:	4669      	mov	r1, sp
   b4782:	4628      	mov	r0, r5
   b4784:	f001 fdb6 	bl	b62f4 <_ZN6String6concatERKS_>
   b4788:	4668      	mov	r0, sp
   b478a:	f001 fcf3 	bl	b6174 <_ZN6StringD1Ev>
        if (i < 23)
   b478e:	2c17      	cmp	r4, #23
   b4790:	d00a      	beq.n	b47a8 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b4792:	4966      	ldr	r1, [pc, #408]	; (b492c <_Z11update_JSONv+0x1e0>)
   b4794:	4668      	mov	r0, sp
   b4796:	f001 fdc3 	bl	b6320 <_ZN6String6formatEPKcz>
   b479a:	4669      	mov	r1, sp
   b479c:	4628      	mov	r0, r5
   b479e:	f001 fda9 	bl	b62f4 <_ZN6String6concatERKS_>
   b47a2:	4668      	mov	r0, sp
   b47a4:	f001 fce6 	bl	b6174 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47a8:	3401      	adds	r4, #1
   b47aa:	2c18      	cmp	r4, #24
   b47ac:	d1df      	bne.n	b476e <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b47ae:	4960      	ldr	r1, [pc, #384]	; (b4930 <_Z11update_JSONv+0x1e4>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b47b0:	4e60      	ldr	r6, [pc, #384]	; (b4934 <_Z11update_JSONv+0x1e8>)
   b47b2:	4f5c      	ldr	r7, [pc, #368]	; (b4924 <_Z11update_JSONv+0x1d8>)
   b47b4:	4d60      	ldr	r5, [pc, #384]	; (b4938 <_Z11update_JSONv+0x1ec>)
    pricesyesterday_Json += String::format("]}");
   b47b6:	4668      	mov	r0, sp
   b47b8:	f001 fdb2 	bl	b6320 <_ZN6String6formatEPKcz>
   b47bc:	4669      	mov	r1, sp
   b47be:	485a      	ldr	r0, [pc, #360]	; (b4928 <_Z11update_JSONv+0x1dc>)
   b47c0:	f001 fd98 	bl	b62f4 <_ZN6String6concatERKS_>
   b47c4:	4668      	mov	r0, sp
   b47c6:	f001 fcd5 	bl	b6174 <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b47ca:	495c      	ldr	r1, [pc, #368]	; (b493c <_Z11update_JSONv+0x1f0>)
   b47cc:	4668      	mov	r0, sp
   b47ce:	f001 fda7 	bl	b6320 <_ZN6String6formatEPKcz>
   b47d2:	4669      	mov	r1, sp
   b47d4:	4858      	ldr	r0, [pc, #352]	; (b4938 <_Z11update_JSONv+0x1ec>)
   b47d6:	f001 fd49 	bl	b626c <_ZN6StringaSEOS_>
   b47da:	4668      	mov	r0, sp
   b47dc:	f001 fcca 	bl	b6174 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47e0:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b47e2:	6833      	ldr	r3, [r6, #0]
   b47e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b47e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47ec:	4639      	mov	r1, r7
   b47ee:	4668      	mov	r0, sp
   b47f0:	f001 fd96 	bl	b6320 <_ZN6String6formatEPKcz>
   b47f4:	4669      	mov	r1, sp
   b47f6:	4628      	mov	r0, r5
   b47f8:	f001 fd7c 	bl	b62f4 <_ZN6String6concatERKS_>
   b47fc:	4668      	mov	r0, sp
   b47fe:	f001 fcb9 	bl	b6174 <_ZN6StringD1Ev>
        if (i < 23)
   b4802:	2c17      	cmp	r4, #23
   b4804:	d00a      	beq.n	b481c <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b4806:	4949      	ldr	r1, [pc, #292]	; (b492c <_Z11update_JSONv+0x1e0>)
   b4808:	4668      	mov	r0, sp
   b480a:	f001 fd89 	bl	b6320 <_ZN6String6formatEPKcz>
   b480e:	4669      	mov	r1, sp
   b4810:	4628      	mov	r0, r5
   b4812:	f001 fd6f 	bl	b62f4 <_ZN6String6concatERKS_>
   b4816:	4668      	mov	r0, sp
   b4818:	f001 fcac 	bl	b6174 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b481c:	3401      	adds	r4, #1
   b481e:	2c18      	cmp	r4, #24
   b4820:	d1df      	bne.n	b47e2 <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b4822:	4943      	ldr	r1, [pc, #268]	; (b4930 <_Z11update_JSONv+0x1e4>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b4824:	4e46      	ldr	r6, [pc, #280]	; (b4940 <_Z11update_JSONv+0x1f4>)
   b4826:	4f47      	ldr	r7, [pc, #284]	; (b4944 <_Z11update_JSONv+0x1f8>)
   b4828:	4d47      	ldr	r5, [pc, #284]	; (b4948 <_Z11update_JSONv+0x1fc>)
    pricestoday_Json += String::format("]}");
   b482a:	4668      	mov	r0, sp
   b482c:	f001 fd78 	bl	b6320 <_ZN6String6formatEPKcz>
   b4830:	4669      	mov	r1, sp
   b4832:	4841      	ldr	r0, [pc, #260]	; (b4938 <_Z11update_JSONv+0x1ec>)
   b4834:	f001 fd5e 	bl	b62f4 <_ZN6String6concatERKS_>
   b4838:	4668      	mov	r0, sp
   b483a:	f001 fc9b 	bl	b6174 <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b483e:	4943      	ldr	r1, [pc, #268]	; (b494c <_Z11update_JSONv+0x200>)
   b4840:	4668      	mov	r0, sp
   b4842:	f001 fd6d 	bl	b6320 <_ZN6String6formatEPKcz>
   b4846:	4669      	mov	r1, sp
   b4848:	483f      	ldr	r0, [pc, #252]	; (b4948 <_Z11update_JSONv+0x1fc>)
   b484a:	f001 fd0f 	bl	b626c <_ZN6StringaSEOS_>
   b484e:	4668      	mov	r0, sp
   b4850:	f001 fc90 	bl	b6174 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4854:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b4856:	6833      	ldr	r3, [r6, #0]
   b4858:	4639      	mov	r1, r7
   b485a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b485e:	4668      	mov	r0, sp
   b4860:	f001 fd5e 	bl	b6320 <_ZN6String6formatEPKcz>
   b4864:	4669      	mov	r1, sp
   b4866:	4628      	mov	r0, r5
   b4868:	f001 fd44 	bl	b62f4 <_ZN6String6concatERKS_>
   b486c:	4668      	mov	r0, sp
   b486e:	f001 fc81 	bl	b6174 <_ZN6StringD1Ev>
        if (i < 23)
   b4872:	2c17      	cmp	r4, #23
   b4874:	d00a      	beq.n	b488c <_Z11update_JSONv+0x140>
        {
            wh_yesterday_Json += String::format(",");
   b4876:	492d      	ldr	r1, [pc, #180]	; (b492c <_Z11update_JSONv+0x1e0>)
   b4878:	4668      	mov	r0, sp
   b487a:	f001 fd51 	bl	b6320 <_ZN6String6formatEPKcz>
   b487e:	4669      	mov	r1, sp
   b4880:	4628      	mov	r0, r5
   b4882:	f001 fd37 	bl	b62f4 <_ZN6String6concatERKS_>
   b4886:	4668      	mov	r0, sp
   b4888:	f001 fc74 	bl	b6174 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b488c:	3401      	adds	r4, #1
   b488e:	2c18      	cmp	r4, #24
   b4890:	d1e1      	bne.n	b4856 <_Z11update_JSONv+0x10a>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b4892:	4927      	ldr	r1, [pc, #156]	; (b4930 <_Z11update_JSONv+0x1e4>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b4894:	4e2e      	ldr	r6, [pc, #184]	; (b4950 <_Z11update_JSONv+0x204>)
   b4896:	4f2b      	ldr	r7, [pc, #172]	; (b4944 <_Z11update_JSONv+0x1f8>)
   b4898:	4d2e      	ldr	r5, [pc, #184]	; (b4954 <_Z11update_JSONv+0x208>)
    wh_yesterday_Json += String::format("]}");
   b489a:	4668      	mov	r0, sp
   b489c:	f001 fd40 	bl	b6320 <_ZN6String6formatEPKcz>
   b48a0:	4669      	mov	r1, sp
   b48a2:	4829      	ldr	r0, [pc, #164]	; (b4948 <_Z11update_JSONv+0x1fc>)
   b48a4:	f001 fd26 	bl	b62f4 <_ZN6String6concatERKS_>
   b48a8:	4668      	mov	r0, sp
   b48aa:	f001 fc63 	bl	b6174 <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b48ae:	492a      	ldr	r1, [pc, #168]	; (b4958 <_Z11update_JSONv+0x20c>)
   b48b0:	4668      	mov	r0, sp
   b48b2:	f001 fd35 	bl	b6320 <_ZN6String6formatEPKcz>
   b48b6:	4669      	mov	r1, sp
   b48b8:	4826      	ldr	r0, [pc, #152]	; (b4954 <_Z11update_JSONv+0x208>)
   b48ba:	f001 fcd7 	bl	b626c <_ZN6StringaSEOS_>
   b48be:	4668      	mov	r0, sp
   b48c0:	f001 fc58 	bl	b6174 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48c4:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b48c6:	6833      	ldr	r3, [r6, #0]
   b48c8:	4639      	mov	r1, r7
   b48ca:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b48ce:	4668      	mov	r0, sp
   b48d0:	f001 fd26 	bl	b6320 <_ZN6String6formatEPKcz>
   b48d4:	4669      	mov	r1, sp
   b48d6:	4628      	mov	r0, r5
   b48d8:	f001 fd0c 	bl	b62f4 <_ZN6String6concatERKS_>
   b48dc:	4668      	mov	r0, sp
   b48de:	f001 fc49 	bl	b6174 <_ZN6StringD1Ev>
        if (i < 23)
   b48e2:	2c17      	cmp	r4, #23
   b48e4:	d00a      	beq.n	b48fc <_Z11update_JSONv+0x1b0>
        {
            wh_today_Json += String::format(",");
   b48e6:	4911      	ldr	r1, [pc, #68]	; (b492c <_Z11update_JSONv+0x1e0>)
   b48e8:	4668      	mov	r0, sp
   b48ea:	f001 fd19 	bl	b6320 <_ZN6String6formatEPKcz>
   b48ee:	4669      	mov	r1, sp
   b48f0:	4628      	mov	r0, r5
   b48f2:	f001 fcff 	bl	b62f4 <_ZN6String6concatERKS_>
   b48f6:	4668      	mov	r0, sp
   b48f8:	f001 fc3c 	bl	b6174 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48fc:	3401      	adds	r4, #1
   b48fe:	2c18      	cmp	r4, #24
   b4900:	d1e1      	bne.n	b48c6 <_Z11update_JSONv+0x17a>
        }
    }
    wh_today_Json += String::format("]}");
   b4902:	4668      	mov	r0, sp
   b4904:	490a      	ldr	r1, [pc, #40]	; (b4930 <_Z11update_JSONv+0x1e4>)
   b4906:	f001 fd0b 	bl	b6320 <_ZN6String6formatEPKcz>
   b490a:	4669      	mov	r1, sp
   b490c:	4811      	ldr	r0, [pc, #68]	; (b4954 <_Z11update_JSONv+0x208>)
   b490e:	f001 fcf1 	bl	b62f4 <_ZN6String6concatERKS_>
   b4912:	4668      	mov	r0, sp
   b4914:	f001 fc2e 	bl	b6174 <_ZN6StringD1Ev>

   b4918:	b005      	add	sp, #20
   b491a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b491c:	000bb69d 	.word	0x000bb69d
   b4920:	2003dca0 	.word	0x2003dca0
   b4924:	000bb6b2 	.word	0x000bb6b2
   b4928:	2003dccc 	.word	0x2003dccc
   b492c:	000bb698 	.word	0x000bb698
   b4930:	000bb69a 	.word	0x000bb69a
   b4934:	2003dc98 	.word	0x2003dc98
   b4938:	2003dcac 	.word	0x2003dcac
   b493c:	000bb6b8 	.word	0x000bb6b8
   b4940:	2003e1cc 	.word	0x2003e1cc
   b4944:	000bb6dc 	.word	0x000bb6dc
   b4948:	2003e1d0 	.word	0x2003e1d0
   b494c:	000bb6c9 	.word	0x000bb6c9
   b4950:	2003e1b8 	.word	0x2003e1b8
   b4954:	2003e1bc 	.word	0x2003e1bc
   b4958:	000bb6df 	.word	0x000bb6df

000b495c <_Z11init_memoryv>:
{
   b495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Serial.printf("before %lu\n", System.freeMemory());
   b4960:	f003 fcae 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4964:	4604      	mov	r4, r0
   b4966:	f001 f8a9 	bl	b5abc <_ZN11SystemClass10freeMemoryEv>
   b496a:	493c      	ldr	r1, [pc, #240]	; (b4a5c <_Z11init_memoryv+0x100>)
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b496c:	4d3c      	ldr	r5, [pc, #240]	; (b4a60 <_Z11init_memoryv+0x104>)
    Serial.printf("before %lu\n", System.freeMemory());
   b496e:	4602      	mov	r2, r0
   b4970:	4620      	mov	r0, r4
   b4972:	f7ff fc87 	bl	b4284 <_ZN5Print6printfEPKcz>
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b4976:	20c0      	movs	r0, #192	; 0xc0
   b4978:	f000 fff8 	bl	b596c <malloc>
   b497c:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b497e:	b928      	cbnz	r0, b498c <_Z11init_memoryv+0x30>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b4980:	f003 fc9e 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4984:	4937      	ldr	r1, [pc, #220]	; (b4a64 <_Z11init_memoryv+0x108>)
   b4986:	f7ff fc7d 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b498a:	e7fe      	b.n	b498a <_Z11init_memoryv+0x2e>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b498c:	20c0      	movs	r0, #192	; 0xc0
   b498e:	f000 ffed 	bl	b596c <malloc>
   b4992:	4c35      	ldr	r4, [pc, #212]	; (b4a68 <_Z11init_memoryv+0x10c>)
   b4994:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b4996:	b928      	cbnz	r0, b49a4 <_Z11init_memoryv+0x48>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b4998:	f003 fc92 	bl	b82c0 <_Z16_fetch_usbserialv>
   b499c:	4933      	ldr	r1, [pc, #204]	; (b4a6c <_Z11init_memoryv+0x110>)
   b499e:	f7ff fc71 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b49a2:	e7fe      	b.n	b49a2 <_Z11init_memoryv+0x46>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b49a4:	20c0      	movs	r0, #192	; 0xc0
   b49a6:	f000 ffe1 	bl	b596c <malloc>
   b49aa:	4e31      	ldr	r6, [pc, #196]	; (b4a70 <_Z11init_memoryv+0x114>)
   b49ac:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b49ae:	b928      	cbnz	r0, b49bc <_Z11init_memoryv+0x60>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b49b0:	f003 fc86 	bl	b82c0 <_Z16_fetch_usbserialv>
   b49b4:	492f      	ldr	r1, [pc, #188]	; (b4a74 <_Z11init_memoryv+0x118>)
   b49b6:	f7ff fc65 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b49ba:	e7fe      	b.n	b49ba <_Z11init_memoryv+0x5e>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b49bc:	f003 fc80 	bl	b82c0 <_Z16_fetch_usbserialv>
   b49c0:	492d      	ldr	r1, [pc, #180]	; (b4a78 <_Z11init_memoryv+0x11c>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b49c2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b4a8c <_Z11init_memoryv+0x130>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b49c6:	f44f 7210 	mov.w	r2, #576	; 0x240
   b49ca:	f7ff fc5b 	bl	b4284 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b49ce:	2060      	movs	r0, #96	; 0x60
   b49d0:	f000 ffcc 	bl	b596c <malloc>
   b49d4:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b49d8:	b928      	cbnz	r0, b49e6 <_Z11init_memoryv+0x8a>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b49da:	f003 fc71 	bl	b82c0 <_Z16_fetch_usbserialv>
   b49de:	4927      	ldr	r1, [pc, #156]	; (b4a7c <_Z11init_memoryv+0x120>)
   b49e0:	f7ff fc50 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b49e4:	e7fe      	b.n	b49e4 <_Z11init_memoryv+0x88>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b49e6:	2060      	movs	r0, #96	; 0x60
   b49e8:	f000 ffc0 	bl	b596c <malloc>
   b49ec:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b4a90 <_Z11init_memoryv+0x134>
   b49f0:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b49f4:	b928      	cbnz	r0, b4a02 <_Z11init_memoryv+0xa6>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b49f6:	f003 fc63 	bl	b82c0 <_Z16_fetch_usbserialv>
   b49fa:	4921      	ldr	r1, [pc, #132]	; (b4a80 <_Z11init_memoryv+0x124>)
   b49fc:	f7ff fc42 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4a00:	e7fe      	b.n	b4a00 <_Z11init_memoryv+0xa4>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b4a02:	f003 fc5d 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4a06:	491f      	ldr	r1, [pc, #124]	; (b4a84 <_Z11init_memoryv+0x128>)
   b4a08:	22c0      	movs	r2, #192	; 0xc0
   b4a0a:	f7ff fc3b 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b4a0e:	f003 fc57 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4a12:	4607      	mov	r7, r0
   b4a14:	f001 f852 	bl	b5abc <_ZN11SystemClass10freeMemoryEv>
   b4a18:	491b      	ldr	r1, [pc, #108]	; (b4a88 <_Z11init_memoryv+0x12c>)
   b4a1a:	4602      	mov	r2, r0
   b4a1c:	4638      	mov	r0, r7
   b4a1e:	f7ff fc31 	bl	b4284 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b4a22:	6828      	ldr	r0, [r5, #0]
   b4a24:	22c0      	movs	r2, #192	; 0xc0
   b4a26:	2100      	movs	r1, #0
   b4a28:	f004 fd1f 	bl	b946a <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b4a2c:	6820      	ldr	r0, [r4, #0]
   b4a2e:	22c0      	movs	r2, #192	; 0xc0
   b4a30:	2100      	movs	r1, #0
   b4a32:	f004 fd1a 	bl	b946a <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4a36:	6830      	ldr	r0, [r6, #0]
   b4a38:	22c0      	movs	r2, #192	; 0xc0
   b4a3a:	2100      	movs	r1, #0
   b4a3c:	f004 fd15 	bl	b946a <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4a40:	f8d8 0000 	ldr.w	r0, [r8]
   b4a44:	2260      	movs	r2, #96	; 0x60
   b4a46:	2100      	movs	r1, #0
   b4a48:	f004 fd0f 	bl	b946a <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4a4c:	f8d9 0000 	ldr.w	r0, [r9]
   b4a50:	2260      	movs	r2, #96	; 0x60
}
   b4a52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4a56:	2100      	movs	r1, #0
   b4a58:	f004 bd07 	b.w	b946a <memset>
   b4a5c:	000bb6ee 	.word	0x000bb6ee
   b4a60:	2003dca0 	.word	0x2003dca0
   b4a64:	000bb6fa 	.word	0x000bb6fa
   b4a68:	2003dc98 	.word	0x2003dc98
   b4a6c:	000bb728 	.word	0x000bb728
   b4a70:	2003dc9c 	.word	0x2003dc9c
   b4a74:	000bb752 	.word	0x000bb752
   b4a78:	000bb77f 	.word	0x000bb77f
   b4a7c:	000bb7b1 	.word	0x000bb7b1
   b4a80:	000bb7d9 	.word	0x000bb7d9
   b4a84:	000bb805 	.word	0x000bb805
   b4a88:	000bb830 	.word	0x000bb830
   b4a8c:	2003e1b8 	.word	0x2003e1b8
   b4a90:	2003e1cc 	.word	0x2003e1cc

000b4a94 <setup>:
{
   b4a94:	b530      	push	{r4, r5, lr}
    STARTUP = true;
   b4a96:	4b20      	ldr	r3, [pc, #128]	; (b4b18 <setup+0x84>)
   b4a98:	2201      	movs	r2, #1
{
   b4a9a:	b085      	sub	sp, #20
    STARTUP = true;
   b4a9c:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4a9e:	f000 ff3d 	bl	b591c <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4aa2:	b910      	cbnz	r0, b4aaa <setup+0x16>
            spark_process();
   b4aa4:	f000 ff32 	bl	b590c <spark_process>
        while (_while() && !_condition()) {
   b4aa8:	e7f9      	b.n	b4a9e <setup+0xa>
   b4aaa:	f000 ff37 	bl	b591c <spark_cloud_flag_connected>
    ble_setup();
   b4aae:	f7ff fccd 	bl	b444c <_Z9ble_setupv>
    init_memory();
   b4ab2:	f7ff ff53 	bl	b495c <_Z11init_memoryv>
    Time.zone(1);
   b4ab6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b4aba:	f002 ff37 	bl	b792c <_ZN9TimeClass4zoneEf>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4abe:	2400      	movs	r4, #0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b4ac0:	2103      	movs	r1, #3
   b4ac2:	2008      	movs	r0, #8
   b4ac4:	f003 fe20 	bl	b8708 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4ac8:	4914      	ldr	r1, [pc, #80]	; (b4b1c <setup+0x88>)
   b4aca:	9400      	str	r4, [sp, #0]
   b4acc:	f04f 33ff 	mov.w	r3, #4294967295
   b4ad0:	2201      	movs	r2, #1
   b4ad2:	2008      	movs	r0, #8
   b4ad4:	f003 fc1c 	bl	b8310 <_Z15attachInterrupttPFvvE13InterruptModeah>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4ad8:	4623      	mov	r3, r4
   b4ada:	4622      	mov	r2, r4
   b4adc:	4910      	ldr	r1, [pc, #64]	; (b4b20 <setup+0x8c>)
   b4ade:	4811      	ldr	r0, [pc, #68]	; (b4b24 <setup+0x90>)
   b4ae0:	e9cd 4400 	strd	r4, r4, [sp]
   b4ae4:	f000 ff2a 	bl	b593c <spark_subscribe>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4ae8:	f003 fbea 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4aec:	4605      	mov	r5, r0
   b4aee:	f002 ff6b 	bl	b79c8 <_ZN9TimeClass4hourEv>
   b4af2:	9003      	str	r0, [sp, #12]
   b4af4:	f002 ff74 	bl	b79e0 <_ZN9TimeClass6minuteEv>
   b4af8:	9a03      	ldr	r2, [sp, #12]
   b4afa:	490b      	ldr	r1, [pc, #44]	; (b4b28 <setup+0x94>)
   b4afc:	4603      	mov	r3, r0
   b4afe:	4628      	mov	r0, r5
   b4b00:	f7ff fbc0 	bl	b4284 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4b04:	4809      	ldr	r0, [pc, #36]	; (b4b2c <setup+0x98>)
   b4b06:	4622      	mov	r2, r4
   b4b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
}
   b4b0c:	b005      	add	sp, #20
   b4b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4b12:	f7ff bb41 	b.w	b4198 <_ZN5Timer6_startEjb.isra.0>
   b4b16:	bf00      	nop
   b4b18:	2003db20 	.word	0x2003db20
   b4b1c:	000b40d1 	.word	0x000b40d1
   b4b20:	000b42a1 	.word	0x000b42a1
   b4b24:	000bb83b 	.word	0x000bb83b
   b4b28:	000bb842 	.word	0x000bb842
   b4b2c:	2003e150 	.word	0x2003e150

000b4b30 <_Z13rotate_pricesv>:
{
   b4b30:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b4b32:	4a0c      	ldr	r2, [pc, #48]	; (b4b64 <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b4b34:	4b0c      	ldr	r3, [pc, #48]	; (b4b68 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b4b36:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b4b38:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b4b3a:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b4b3c:	4b0b      	ldr	r3, [pc, #44]	; (b4b6c <_Z13rotate_pricesv+0x3c>)
   b4b3e:	6819      	ldr	r1, [r3, #0]
   b4b40:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4b42:	22c0      	movs	r2, #192	; 0xc0
   b4b44:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b4b46:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4b48:	f004 fc8f 	bl	b946a <memset>
    int *temp2 = wh_yesterday;
   b4b4c:	4a08      	ldr	r2, [pc, #32]	; (b4b70 <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b4b4e:	4b09      	ldr	r3, [pc, #36]	; (b4b74 <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b4b50:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b4b52:	6819      	ldr	r1, [r3, #0]
   b4b54:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b4b56:	6018      	str	r0, [r3, #0]
}
   b4b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4b5c:	2260      	movs	r2, #96	; 0x60
   b4b5e:	2100      	movs	r1, #0
   b4b60:	f004 bc83 	b.w	b946a <memset>
   b4b64:	2003dc98 	.word	0x2003dc98
   b4b68:	2003dca0 	.word	0x2003dca0
   b4b6c:	2003dc9c 	.word	0x2003dc9c
   b4b70:	2003e1cc 	.word	0x2003e1cc
   b4b74:	2003e1b8 	.word	0x2003e1b8

000b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4b78:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4b7a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4b7c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4b7e:	b17c      	cbz	r4, b4ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4b80:	6863      	ldr	r3, [r4, #4]
   b4b82:	3b01      	subs	r3, #1
   b4b84:	6063      	str	r3, [r4, #4]
   b4b86:	b95b      	cbnz	r3, b4ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4b88:	6823      	ldr	r3, [r4, #0]
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	689b      	ldr	r3, [r3, #8]
   b4b8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b90:	68a3      	ldr	r3, [r4, #8]
   b4b92:	3b01      	subs	r3, #1
   b4b94:	60a3      	str	r3, [r4, #8]
   b4b96:	b91b      	cbnz	r3, b4ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4b98:	6823      	ldr	r3, [r4, #0]
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	68db      	ldr	r3, [r3, #12]
   b4b9e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4ba0:	4628      	mov	r0, r5
   b4ba2:	bd38      	pop	{r3, r4, r5, pc}

000b4ba4 <_Z8get_datai>:
{
   b4ba4:	b530      	push	{r4, r5, lr}
    temp[0] = 0;
   b4ba6:	4b13      	ldr	r3, [pc, #76]	; (b4bf4 <_Z8get_datai+0x50>)
   b4ba8:	2500      	movs	r5, #0
{
   b4baa:	b08d      	sub	sp, #52	; 0x34
    temp[0] = 0;
   b4bac:	701d      	strb	r5, [r3, #0]
{
   b4bae:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 1, 0);
   b4bb0:	f002 ff42 	bl	b7a38 <_ZN9TimeClass4yearEv>
   b4bb4:	9005      	str	r0, [sp, #20]
   b4bb6:	f002 ff37 	bl	b7a28 <_ZN9TimeClass5monthEv>
   b4bba:	1c61      	adds	r1, r4, #1
   b4bbc:	e9cd 4100 	strd	r4, r1, [sp]
   b4bc0:	9a05      	ldr	r2, [sp, #20]
   b4bc2:	490d      	ldr	r1, [pc, #52]	; (b4bf8 <_Z8get_datai+0x54>)
   b4bc4:	9502      	str	r5, [sp, #8]
   b4bc6:	4603      	mov	r3, r0
   b4bc8:	a808      	add	r0, sp, #32
   b4bca:	f001 fba9 	bl	b6320 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4bce:	4b0b      	ldr	r3, [pc, #44]	; (b4bfc <_Z8get_datai+0x58>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4bd0:	9a08      	ldr	r2, [sp, #32]
   b4bd2:	781b      	ldrb	r3, [r3, #0]
   b4bd4:	490a      	ldr	r1, [pc, #40]	; (b4c00 <_Z8get_datai+0x5c>)
   b4bd6:	f88d 3000 	strb.w	r3, [sp]
   b4bda:	a806      	add	r0, sp, #24
   b4bdc:	233c      	movs	r3, #60	; 0x3c
   b4bde:	f003 f913 	bl	b7e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4be2:	a807      	add	r0, sp, #28
   b4be4:	f7ff ffc8 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4be8:	a808      	add	r0, sp, #32
   b4bea:	f001 fac3 	bl	b6174 <_ZN6StringD1Ev>
}
   b4bee:	b00d      	add	sp, #52	; 0x34
   b4bf0:	bd30      	pop	{r4, r5, pc}
   b4bf2:	bf00      	nop
   b4bf4:	2003dd4c 	.word	0x2003dd4c
   b4bf8:	000bb85c 	.word	0x000bb85c
   b4bfc:	2003dbc8 	.word	0x2003dbc8
   b4c00:	000bb8af 	.word	0x000bb8af

000b4c04 <_Z15transmit_pricesPA2_ii>:
{
   b4c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c08:	b08a      	sub	sp, #40	; 0x28
   b4c0a:	4605      	mov	r5, r0
   b4c0c:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b4c0e:	f003 fb57 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4c12:	4918      	ldr	r1, [pc, #96]	; (b4c74 <_Z15transmit_pricesPA2_ii+0x70>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4c14:	4f18      	ldr	r7, [pc, #96]	; (b4c78 <_Z15transmit_pricesPA2_ii+0x74>)
    Serial.printf("In work\n");
   b4c16:	f7ff fb35 	bl	b4284 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b4c1a:	4918      	ldr	r1, [pc, #96]	; (b4c7c <_Z15transmit_pricesPA2_ii+0x78>)
   b4c1c:	a802      	add	r0, sp, #8
   b4c1e:	f001 faf4 	bl	b620a <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4c22:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4c24:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b4c28:	42b4      	cmp	r4, r6
   b4c2a:	da10      	bge.n	b4c4e <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4c2c:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4c30:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4c34:	4639      	mov	r1, r7
   b4c36:	a806      	add	r0, sp, #24
   b4c38:	f001 fb72 	bl	b6320 <_ZN6String6formatEPKcz>
   b4c3c:	a906      	add	r1, sp, #24
   b4c3e:	a802      	add	r0, sp, #8
   b4c40:	f001 fb58 	bl	b62f4 <_ZN6String6concatERKS_>
   b4c44:	a806      	add	r0, sp, #24
   b4c46:	f001 fa95 	bl	b6174 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b4c4a:	3401      	adds	r4, #1
   b4c4c:	e7ec      	b.n	b4c28 <_Z15transmit_pricesPA2_ii+0x24>
   b4c4e:	4b0c      	ldr	r3, [pc, #48]	; (b4c80 <_Z15transmit_pricesPA2_ii+0x7c>)
   b4c50:	9a02      	ldr	r2, [sp, #8]
   b4c52:	781b      	ldrb	r3, [r3, #0]
   b4c54:	490b      	ldr	r1, [pc, #44]	; (b4c84 <_Z15transmit_pricesPA2_ii+0x80>)
   b4c56:	f88d 3000 	strb.w	r3, [sp]
   b4c5a:	a806      	add	r0, sp, #24
   b4c5c:	233c      	movs	r3, #60	; 0x3c
   b4c5e:	f003 f8d3 	bl	b7e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4c62:	a807      	add	r0, sp, #28
   b4c64:	f7ff ff88 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String data = "Cheap(ish) hours of the day: ";
   b4c68:	a802      	add	r0, sp, #8
   b4c6a:	f001 fa83 	bl	b6174 <_ZN6StringD1Ev>
}
   b4c6e:	b00a      	add	sp, #40	; 0x28
   b4c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4c74:	000bb8b8 	.word	0x000bb8b8
   b4c78:	000bb8df 	.word	0x000bb8df
   b4c7c:	000bb8c1 	.word	0x000bb8c1
   b4c80:	2003dbc8 	.word	0x2003dbc8
   b4c84:	000bb8ee 	.word	0x000bb8ee

000b4c88 <loop>:
{
   b4c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (STARTUP)
   b4c8a:	4e86      	ldr	r6, [pc, #536]	; (b4ea4 <loop+0x21c>)
   b4c8c:	4c86      	ldr	r4, [pc, #536]	; (b4ea8 <loop+0x220>)
   b4c8e:	7833      	ldrb	r3, [r6, #0]
{
   b4c90:	b0c3      	sub	sp, #268	; 0x10c
    if (STARTUP)
   b4c92:	2b00      	cmp	r3, #0
   b4c94:	d054      	beq.n	b4d40 <loop+0xb8>
        Serial.printf("Getting price data for yesterday\n");
   b4c96:	f003 fb13 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4c9a:	4984      	ldr	r1, [pc, #528]	; (b4eac <loop+0x224>)
            Serial.printf("Count1=: %d\n", count);
   b4c9c:	4f84      	ldr	r7, [pc, #528]	; (b4eb0 <loop+0x228>)
        Serial.printf("Getting price data for yesterday\n");
   b4c9e:	f7ff faf1 	bl	b4284 <_ZN5Print6printfEPKcz>
        get_data(Time.day() - 1);
   b4ca2:	f002 feb5 	bl	b7a10 <_ZN9TimeClass3dayEv>
   b4ca6:	3801      	subs	r0, #1
   b4ca8:	f7ff ff7c 	bl	b4ba4 <_Z8get_datai>
         int count=0;
   b4cac:	2500      	movs	r5, #0
        while (!CALCULATE)
   b4cae:	7823      	ldrb	r3, [r4, #0]
   b4cb0:	b95b      	cbnz	r3, b4cca <loop+0x42>
            delay(1000);
   b4cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4cb6:	f002 fed5 	bl	b7a64 <delay>
            Serial.printf("Count1=: %d\n", count);
   b4cba:	f003 fb01 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4cbe:	462a      	mov	r2, r5
   b4cc0:	4639      	mov	r1, r7
   b4cc2:	f7ff fadf 	bl	b4284 <_ZN5Print6printfEPKcz>
            count++;
   b4cc6:	3501      	adds	r5, #1
        while (!CALCULATE)
   b4cc8:	e7f1      	b.n	b4cae <loop+0x26>
       delay(5000);
   b4cca:	f241 3088 	movw	r0, #5000	; 0x1388
        CALCULATE = false;
   b4cce:	2500      	movs	r5, #0
   b4cd0:	7025      	strb	r5, [r4, #0]
       delay(5000);
   b4cd2:	f002 fec7 	bl	b7a64 <delay>
        rotate_prices();
   b4cd6:	f7ff ff2b 	bl	b4b30 <_Z13rotate_pricesv>
        Serial.printf("Getting price data for today\n");
   b4cda:	f003 faf1 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4cde:	4975      	ldr	r1, [pc, #468]	; (b4eb4 <loop+0x22c>)
            Serial.printf("Count2=: %d\n", count);
   b4ce0:	4f75      	ldr	r7, [pc, #468]	; (b4eb8 <loop+0x230>)
        Serial.printf("Getting price data for today\n");
   b4ce2:	f7ff facf 	bl	b4284 <_ZN5Print6printfEPKcz>
        get_data(Time.day());
   b4ce6:	f002 fe93 	bl	b7a10 <_ZN9TimeClass3dayEv>
   b4cea:	f7ff ff5b 	bl	b4ba4 <_Z8get_datai>
        while (!CALCULATE)
   b4cee:	7823      	ldrb	r3, [r4, #0]
   b4cf0:	b95b      	cbnz	r3, b4d0a <loop+0x82>
            delay(1000);
   b4cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4cf6:	f002 feb5 	bl	b7a64 <delay>
            Serial.printf("Count2=: %d\n", count);
   b4cfa:	f003 fae1 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4cfe:	462a      	mov	r2, r5
   b4d00:	4639      	mov	r1, r7
   b4d02:	f7ff fabf 	bl	b4284 <_ZN5Print6printfEPKcz>
            count++;
   b4d06:	3501      	adds	r5, #1
        while (!CALCULATE)
   b4d08:	e7f1      	b.n	b4cee <loop+0x66>
        rotate_prices();
   b4d0a:	f7ff ff11 	bl	b4b30 <_Z13rotate_pricesv>
        delay(5000);
   b4d0e:	f241 3088 	movw	r0, #5000	; 0x1388
   b4d12:	f002 fea7 	bl	b7a64 <delay>
        if (Time.hour() > PULL_TIME_1)
   b4d16:	f002 fe57 	bl	b79c8 <_ZN9TimeClass4hourEv>
   b4d1a:	280d      	cmp	r0, #13
   b4d1c:	dd4a      	ble.n	b4db4 <loop+0x12c>
            Serial.printf("Getting price data for tomorrow\n");
   b4d1e:	f003 facf 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4d22:	4966      	ldr	r1, [pc, #408]	; (b4ebc <loop+0x234>)
   b4d24:	f7ff faae 	bl	b4284 <_ZN5Print6printfEPKcz>
            get_data(Time.day() + 1);
   b4d28:	f002 fe72 	bl	b7a10 <_ZN9TimeClass3dayEv>
   b4d2c:	3001      	adds	r0, #1
   b4d2e:	f7ff ff39 	bl	b4ba4 <_Z8get_datai>
            AWAITING_DATA = true;
   b4d32:	4b63      	ldr	r3, [pc, #396]	; (b4ec0 <loop+0x238>)
   b4d34:	2201      	movs	r2, #1
   b4d36:	701a      	strb	r2, [r3, #0]
            CALCULATE = false;
   b4d38:	2300      	movs	r3, #0
            CALCULATE = true;
   b4d3a:	7023      	strb	r3, [r4, #0]
        STARTUP = false;
   b4d3c:	2300      	movs	r3, #0
   b4d3e:	7033      	strb	r3, [r6, #0]
    if (GET_DATA)
   b4d40:	4d60      	ldr	r5, [pc, #384]	; (b4ec4 <loop+0x23c>)
   b4d42:	782b      	ldrb	r3, [r5, #0]
   b4d44:	b14b      	cbz	r3, b4d5a <loop+0xd2>
        AWAITING_DATA = true;
   b4d46:	4b5e      	ldr	r3, [pc, #376]	; (b4ec0 <loop+0x238>)
   b4d48:	2201      	movs	r2, #1
   b4d4a:	701a      	strb	r2, [r3, #0]
        get_data(Time.day() + 1);
   b4d4c:	f002 fe60 	bl	b7a10 <_ZN9TimeClass3dayEv>
   b4d50:	3001      	adds	r0, #1
   b4d52:	f7ff ff27 	bl	b4ba4 <_Z8get_datai>
        GET_DATA = false;
   b4d56:	2300      	movs	r3, #0
   b4d58:	702b      	strb	r3, [r5, #0]
    if (CALCULATE)
   b4d5a:	7823      	ldrb	r3, [r4, #0]
   b4d5c:	4d5a      	ldr	r5, [pc, #360]	; (b4ec8 <loop+0x240>)
   b4d5e:	2b00      	cmp	r3, #0
   b4d60:	d030      	beq.n	b4dc4 <loop+0x13c>
        update_JSON();
   b4d62:	f7ff fcf3 	bl	b474c <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, cost_hour, range);
   b4d66:	4b59      	ldr	r3, [pc, #356]	; (b4ecc <loop+0x244>)
   b4d68:	4959      	ldr	r1, [pc, #356]	; (b4ed0 <loop+0x248>)
   b4d6a:	4a5a      	ldr	r2, [pc, #360]	; (b4ed4 <loop+0x24c>)
   b4d6c:	6809      	ldr	r1, [r1, #0]
   b4d6e:	681b      	ldr	r3, [r3, #0]
   b4d70:	4859      	ldr	r0, [pc, #356]	; (b4ed8 <loop+0x250>)
   b4d72:	f7ff fc05 	bl	b4580 <_Z8calc_lowPA2_iPdPii>
   b4d76:	4b59      	ldr	r3, [pc, #356]	; (b4edc <loop+0x254>)
   b4d78:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4d7a:	f003 faa1 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4d7e:	4606      	mov	r6, r0
   b4d80:	f002 fe22 	bl	b79c8 <_ZN9TimeClass4hourEv>
   b4d84:	9001      	str	r0, [sp, #4]
   b4d86:	f002 fe2b 	bl	b79e0 <_ZN9TimeClass6minuteEv>
   b4d8a:	9a01      	ldr	r2, [sp, #4]
   b4d8c:	4954      	ldr	r1, [pc, #336]	; (b4ee0 <loop+0x258>)
   b4d8e:	4603      	mov	r3, r0
   b4d90:	4630      	mov	r0, r6
   b4d92:	f7ff fa77 	bl	b4284 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b4d96:	2301      	movs	r3, #1
   b4d98:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b4d9a:	2300      	movs	r3, #0
   b4d9c:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b4d9e:	4b4f      	ldr	r3, [pc, #316]	; (b4edc <loop+0x254>)
   b4da0:	484d      	ldr	r0, [pc, #308]	; (b4ed8 <loop+0x250>)
   b4da2:	6819      	ldr	r1, [r3, #0]
   b4da4:	f7ff ff2e 	bl	b4c04 <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b4da8:	4b4e      	ldr	r3, [pc, #312]	; (b4ee4 <loop+0x25c>)
   b4daa:	2201      	movs	r2, #1
   b4dac:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b4dae:	2300      	movs	r3, #0
   b4db0:	702b      	strb	r3, [r5, #0]
   b4db2:	e00a      	b.n	b4dca <loop+0x142>
            Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b4db4:	f003 fa84 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4db8:	494b      	ldr	r1, [pc, #300]	; (b4ee8 <loop+0x260>)
   b4dba:	220d      	movs	r2, #13
   b4dbc:	f7ff fa62 	bl	b4284 <_ZN5Print6printfEPKcz>
            CALCULATE = true;
   b4dc0:	2301      	movs	r3, #1
   b4dc2:	e7ba      	b.n	b4d3a <loop+0xb2>
    if (TRANSMIT_PRICE)
   b4dc4:	782b      	ldrb	r3, [r5, #0]
   b4dc6:	2b00      	cmp	r3, #0
   b4dc8:	d1e9      	bne.n	b4d9e <loop+0x116>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b4dca:	4c48      	ldr	r4, [pc, #288]	; (b4eec <loop+0x264>)
   b4dcc:	7823      	ldrb	r3, [r4, #0]
   b4dce:	b1db      	cbz	r3, b4e08 <loop+0x180>
        Serial.printf("Received power/get\n");
   b4dd0:	f003 fa76 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4dd4:	4946      	ldr	r1, [pc, #280]	; (b4ef0 <loop+0x268>)
   b4dd6:	f7ff fa55 	bl	b4284 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b4dda:	4b46      	ldr	r3, [pc, #280]	; (b4ef4 <loop+0x26c>)
   b4ddc:	681d      	ldr	r5, [r3, #0]
   b4dde:	f002 fdf3 	bl	b79c8 <_ZN9TimeClass4hourEv>
   b4de2:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4de6:	4944      	ldr	r1, [pc, #272]	; (b4ef8 <loop+0x270>)
        wh_today[Time.hour()] += 1;
   b4de8:	3301      	adds	r3, #1
   b4dea:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4dee:	4b43      	ldr	r3, [pc, #268]	; (b4efc <loop+0x274>)
   b4df0:	a802      	add	r0, sp, #8
   b4df2:	681a      	ldr	r2, [r3, #0]
   b4df4:	f000 fdd2 	bl	b599c <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4df8:	2300      	movs	r3, #0
   b4dfa:	4841      	ldr	r0, [pc, #260]	; (b4f00 <loop+0x278>)
   b4dfc:	22ff      	movs	r2, #255	; 0xff
   b4dfe:	a902      	add	r1, sp, #8
   b4e00:	f001 fd04 	bl	b680c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        TRANSMIT_SENSOR = false;
   b4e04:	2300      	movs	r3, #0
   b4e06:	7023      	strb	r3, [r4, #0]
    if (ROTATE)
   b4e08:	4c3e      	ldr	r4, [pc, #248]	; (b4f04 <loop+0x27c>)
   b4e0a:	7823      	ldrb	r3, [r4, #0]
   b4e0c:	b11b      	cbz	r3, b4e16 <loop+0x18e>
        rotate_prices();
   b4e0e:	f7ff fe8f 	bl	b4b30 <_Z13rotate_pricesv>
        ROTATE = false;
   b4e12:	2300      	movs	r3, #0
   b4e14:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b4e16:	4c3c      	ldr	r4, [pc, #240]	; (b4f08 <loop+0x280>)
   b4e18:	7823      	ldrb	r3, [r4, #0]
   b4e1a:	b11b      	cbz	r3, b4e24 <loop+0x19c>
        hourly_JSON_update();
   b4e1c:	f7ff fc64 	bl	b46e8 <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b4e20:	2300      	movs	r3, #0
   b4e22:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 1400))
   b4e24:	4c39      	ldr	r4, [pc, #228]	; (b4f0c <loop+0x284>)
   b4e26:	7825      	ldrb	r5, [r4, #0]
   b4e28:	f000 fac2 	bl	b53b0 <HAL_Timer_Get_Milli_Seconds>
   b4e2c:	4b38      	ldr	r3, [pc, #224]	; (b4f10 <loop+0x288>)
   b4e2e:	681b      	ldr	r3, [r3, #0]
   b4e30:	1ac0      	subs	r0, r0, r3
   b4e32:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   b4e36:	d92e      	bls.n	b4e96 <loop+0x20e>
   b4e38:	b36d      	cbz	r5, b4e96 <loop+0x20e>
        update_JSON();
   b4e3a:	f7ff fc87 	bl	b474c <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4e3e:	4b2f      	ldr	r3, [pc, #188]	; (b4efc <loop+0x274>)
   b4e40:	492d      	ldr	r1, [pc, #180]	; (b4ef8 <loop+0x270>)
   b4e42:	681a      	ldr	r2, [r3, #0]
   b4e44:	a802      	add	r0, sp, #8
   b4e46:	f000 fda9 	bl	b599c <sprintf>
   b4e4a:	2300      	movs	r3, #0
   b4e4c:	22ff      	movs	r2, #255	; 0xff
   b4e4e:	a902      	add	r1, sp, #8
   b4e50:	482b      	ldr	r0, [pc, #172]	; (b4f00 <loop+0x278>)
   b4e52:	f001 fcdb 	bl	b680c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b4e56:	492f      	ldr	r1, [pc, #188]	; (b4f14 <loop+0x28c>)
   b4e58:	482f      	ldr	r0, [pc, #188]	; (b4f18 <loop+0x290>)
   b4e5a:	2200      	movs	r2, #0
   b4e5c:	f001 fd36 	bl	b68cc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b4e60:	492e      	ldr	r1, [pc, #184]	; (b4f1c <loop+0x294>)
   b4e62:	482f      	ldr	r0, [pc, #188]	; (b4f20 <loop+0x298>)
   b4e64:	2200      	movs	r2, #0
   b4e66:	f001 fd31 	bl	b68cc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b4e6a:	492e      	ldr	r1, [pc, #184]	; (b4f24 <loop+0x29c>)
   b4e6c:	482e      	ldr	r0, [pc, #184]	; (b4f28 <loop+0x2a0>)
   b4e6e:	2200      	movs	r2, #0
   b4e70:	f001 fd2c 	bl	b68cc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b4e74:	492d      	ldr	r1, [pc, #180]	; (b4f2c <loop+0x2a4>)
   b4e76:	482e      	ldr	r0, [pc, #184]	; (b4f30 <loop+0x2a8>)
   b4e78:	2200      	movs	r2, #0
   b4e7a:	f001 fd27 	bl	b68cc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b4e7e:	492d      	ldr	r1, [pc, #180]	; (b4f34 <loop+0x2ac>)
   b4e80:	482d      	ldr	r0, [pc, #180]	; (b4f38 <loop+0x2b0>)
   b4e82:	2200      	movs	r2, #0
   b4e84:	f001 fd22 	bl	b68cc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b4e88:	2300      	movs	r3, #0
   b4e8a:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b4e8c:	f003 fa18 	bl	b82c0 <_Z16_fetch_usbserialv>
   b4e90:	492a      	ldr	r1, [pc, #168]	; (b4f3c <loop+0x2b4>)
   b4e92:	f7ff f9f7 	bl	b4284 <_ZN5Print6printfEPKcz>
    delay(1000);
   b4e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b4e9a:	b043      	add	sp, #268	; 0x10c
   b4e9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    delay(1000);
   b4ea0:	f002 bde0 	b.w	b7a64 <delay>
   b4ea4:	2003db20 	.word	0x2003db20
   b4ea8:	2003db01 	.word	0x2003db01
   b4eac:	000bb8fe 	.word	0x000bb8fe
   b4eb0:	000bb920 	.word	0x000bb920
   b4eb4:	000bb92d 	.word	0x000bb92d
   b4eb8:	000bb94b 	.word	0x000bb94b
   b4ebc:	000bb958 	.word	0x000bb958
   b4ec0:	2003db00 	.word	0x2003db00
   b4ec4:	2003db1c 	.word	0x2003db1c
   b4ec8:	2003db21 	.word	0x2003db21
   b4ecc:	2003d914 	.word	0x2003d914
   b4ed0:	2003dc98 	.word	0x2003dc98
   b4ed4:	2003dc38 	.word	0x2003dc38
   b4ed8:	2003dbd0 	.word	0x2003dbd0
   b4edc:	2003dc30 	.word	0x2003dc30
   b4ee0:	000bb842 	.word	0x000bb842
   b4ee4:	2003db1f 	.word	0x2003db1f
   b4ee8:	000bb979 	.word	0x000bb979
   b4eec:	2003db22 	.word	0x2003db22
   b4ef0:	000bb9aa 	.word	0x000bb9aa
   b4ef4:	2003e1b8 	.word	0x2003e1b8
   b4ef8:	000bb9be 	.word	0x000bb9be
   b4efc:	2003dc34 	.word	0x2003dc34
   b4f00:	2003db24 	.word	0x2003db24
   b4f04:	2003db1e 	.word	0x2003db1e
   b4f08:	2003db23 	.word	0x2003db23
   b4f0c:	2003db1d 	.word	0x2003db1d
   b4f10:	2003dca8 	.word	0x2003dca8
   b4f14:	2003dccc 	.word	0x2003dccc
   b4f18:	2003db14 	.word	0x2003db14
   b4f1c:	2003dcac 	.word	0x2003dcac
   b4f20:	2003db04 	.word	0x2003db04
   b4f24:	2003dcbc 	.word	0x2003dcbc
   b4f28:	2003db0c 	.word	0x2003db0c
   b4f2c:	2003e1d0 	.word	0x2003e1d0
   b4f30:	2003db34 	.word	0x2003db34
   b4f34:	2003e1bc 	.word	0x2003e1bc
   b4f38:	2003db2c 	.word	0x2003db2c
   b4f3c:	000bb9ca 	.word	0x000bb9ca

000b4f40 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4f40:	b082      	sub	sp, #8
   b4f42:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f44:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b4f46:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4f48:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b4f4a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4f4c:	e9c0 3300 	strd	r3, r3, [r0]
   b4f50:	4606      	mov	r6, r0
   b4f52:	4694      	mov	ip, r2
   b4f54:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f58:	ac04      	add	r4, sp, #16
   b4f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f5c:	682b      	ldr	r3, [r5, #0]
   b4f5e:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b4f60:	ad1a      	add	r5, sp, #104	; 0x68
   b4f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f64:	ac09      	add	r4, sp, #36	; 0x24
   b4f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f68:	682b      	ldr	r3, [r5, #0]
   b4f6a:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4f6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4f6e:	9302      	str	r3, [sp, #8]
   b4f70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b4f72:	9301      	str	r3, [sp, #4]
   b4f74:	ab09      	add	r3, sp, #36	; 0x24
   b4f76:	9300      	str	r3, [sp, #0]
   b4f78:	4630      	mov	r0, r6
   b4f7a:	ab04      	add	r3, sp, #16
   b4f7c:	4662      	mov	r2, ip
   b4f7e:	4639      	mov	r1, r7
   b4f80:	f002 f986 	bl	b7290 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4f84:	4630      	mov	r0, r6
   b4f86:	b00f      	add	sp, #60	; 0x3c
   b4f88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4f8c:	b002      	add	sp, #8
   b4f8e:	4770      	bx	lr

000b4f90 <_GLOBAL__sub_I_argonName>:
   b4f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b4f94:	4b87      	ldr	r3, [pc, #540]	; (b51b4 <_GLOBAL__sub_I_argonName+0x224>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b4f96:	4d88      	ldr	r5, [pc, #544]	; (b51b8 <_GLOBAL__sub_I_argonName+0x228>)
const BleUuid wattcharacteristicUuid(watt_c);
   b4f98:	f8df b2b4 	ldr.w	fp, [pc, #692]	; b5250 <_GLOBAL__sub_I_argonName+0x2c0>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b4f9c:	f8df a2b4 	ldr.w	sl, [pc, #692]	; b5254 <_GLOBAL__sub_I_argonName+0x2c4>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b4fa0:	f8df 92b4 	ldr.w	r9, [pc, #692]	; b5258 <_GLOBAL__sub_I_argonName+0x2c8>
   b4fa4:	f04f 0801 	mov.w	r8, #1
   b4fa8:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b4fac:	4b83      	ldr	r3, [pc, #524]	; (b51bc <_GLOBAL__sub_I_argonName+0x22c>)
   b4fae:	b093      	sub	sp, #76	; 0x4c
   b4fb0:	6819      	ldr	r1, [r3, #0]
   b4fb2:	4628      	mov	r0, r5
   b4fb4:	f001 fbec 	bl	b6790 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b4fb8:	4b81      	ldr	r3, [pc, #516]	; (b51c0 <_GLOBAL__sub_I_argonName+0x230>)
   b4fba:	4658      	mov	r0, fp
   b4fbc:	6819      	ldr	r1, [r3, #0]
   b4fbe:	f001 fbe7 	bl	b6790 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b4fc2:	4b80      	ldr	r3, [pc, #512]	; (b51c4 <_GLOBAL__sub_I_argonName+0x234>)
   b4fc4:	4650      	mov	r0, sl
   b4fc6:	6819      	ldr	r1, [r3, #0]
   b4fc8:	f001 fbe2 	bl	b6790 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b4fcc:	4b7e      	ldr	r3, [pc, #504]	; (b51c8 <_GLOBAL__sub_I_argonName+0x238>)
   b4fce:	4648      	mov	r0, r9
   b4fd0:	6819      	ldr	r1, [r3, #0]
   b4fd2:	f001 fbdd 	bl	b6790 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b4fd6:	4b7d      	ldr	r3, [pc, #500]	; (b51cc <_GLOBAL__sub_I_argonName+0x23c>)
   b4fd8:	487d      	ldr	r0, [pc, #500]	; (b51d0 <_GLOBAL__sub_I_argonName+0x240>)
   b4fda:	6819      	ldr	r1, [r3, #0]
   b4fdc:	f001 fbd8 	bl	b6790 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b4fe0:	4b7c      	ldr	r3, [pc, #496]	; (b51d4 <_GLOBAL__sub_I_argonName+0x244>)
   b4fe2:	487d      	ldr	r0, [pc, #500]	; (b51d8 <_GLOBAL__sub_I_argonName+0x248>)
   b4fe4:	6819      	ldr	r1, [r3, #0]
   b4fe6:	f001 fbd3 	bl	b6790 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b4fea:	4b7c      	ldr	r3, [pc, #496]	; (b51dc <_GLOBAL__sub_I_argonName+0x24c>)
   b4fec:	487c      	ldr	r0, [pc, #496]	; (b51e0 <_GLOBAL__sub_I_argonName+0x250>)
   b4fee:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4ff0:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b4ff2:	f001 fbcd 	bl	b6790 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4ff6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4ffa:	462e      	mov	r6, r5
   b4ffc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4ffe:	2710      	movs	r7, #16
   b5000:	eb0d 0c07 	add.w	ip, sp, r7
   b5004:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5008:	6833      	ldr	r3, [r6, #0]
   b500a:	f8cc 3000 	str.w	r3, [ip]
   b500e:	f10b 0304 	add.w	r3, fp, #4
   b5012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5014:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5018:	f8db 3000 	ldr.w	r3, [fp]
   b501c:	4971      	ldr	r1, [pc, #452]	; (b51e4 <_GLOBAL__sub_I_argonName+0x254>)
   b501e:	4872      	ldr	r0, [pc, #456]	; (b51e8 <_GLOBAL__sub_I_argonName+0x258>)
   b5020:	463a      	mov	r2, r7
   b5022:	f7ff ff8d 	bl	b4f40 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b5026:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b502a:	46ae      	mov	lr, r5
   b502c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5030:	eb0d 0c07 	add.w	ip, sp, r7
   b5034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5038:	6833      	ldr	r3, [r6, #0]
   b503a:	f8cc 3000 	str.w	r3, [ip]
   b503e:	f10a 0304 	add.w	r3, sl, #4
   b5042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5044:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5048:	f8da 3000 	ldr.w	r3, [sl]
   b504c:	4967      	ldr	r1, [pc, #412]	; (b51ec <_GLOBAL__sub_I_argonName+0x25c>)
   b504e:	4868      	ldr	r0, [pc, #416]	; (b51f0 <_GLOBAL__sub_I_argonName+0x260>)
   b5050:	463a      	mov	r2, r7
   b5052:	f7ff ff75 	bl	b4f40 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b5056:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b505a:	46ae      	mov	lr, r5
   b505c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5060:	eb0d 0c07 	add.w	ip, sp, r7
   b5064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5068:	6833      	ldr	r3, [r6, #0]
   b506a:	f8cc 3000 	str.w	r3, [ip]
   b506e:	f109 0304 	add.w	r3, r9, #4
   b5072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5074:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5078:	f8d9 3000 	ldr.w	r3, [r9]
   b507c:	495d      	ldr	r1, [pc, #372]	; (b51f4 <_GLOBAL__sub_I_argonName+0x264>)
   b507e:	485e      	ldr	r0, [pc, #376]	; (b51f8 <_GLOBAL__sub_I_argonName+0x268>)
   b5080:	463a      	mov	r2, r7
   b5082:	f7ff ff5d 	bl	b4f40 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b5086:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b508a:	46ae      	mov	lr, r5
   b508c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5090:	eb0d 0c07 	add.w	ip, sp, r7
   b5094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5098:	6833      	ldr	r3, [r6, #0]
   b509a:	f8cc 3000 	str.w	r3, [ip]
   b509e:	4b4c      	ldr	r3, [pc, #304]	; (b51d0 <_GLOBAL__sub_I_argonName+0x240>)
   b50a0:	3304      	adds	r3, #4
   b50a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b50a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b50a8:	4b49      	ldr	r3, [pc, #292]	; (b51d0 <_GLOBAL__sub_I_argonName+0x240>)
   b50aa:	4954      	ldr	r1, [pc, #336]	; (b51fc <_GLOBAL__sub_I_argonName+0x26c>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	4854      	ldr	r0, [pc, #336]	; (b5200 <_GLOBAL__sub_I_argonName+0x270>)
   b50b0:	463a      	mov	r2, r7
   b50b2:	f7ff ff45 	bl	b4f40 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b50b6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b50ba:	46ae      	mov	lr, r5
   b50bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b50c0:	eb0d 0c07 	add.w	ip, sp, r7
   b50c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b50c8:	6833      	ldr	r3, [r6, #0]
   b50ca:	f8cc 3000 	str.w	r3, [ip]
   b50ce:	4b42      	ldr	r3, [pc, #264]	; (b51d8 <_GLOBAL__sub_I_argonName+0x248>)
   b50d0:	3304      	adds	r3, #4
   b50d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b50d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b50d8:	4b3f      	ldr	r3, [pc, #252]	; (b51d8 <_GLOBAL__sub_I_argonName+0x248>)
   b50da:	494a      	ldr	r1, [pc, #296]	; (b5204 <_GLOBAL__sub_I_argonName+0x274>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	484a      	ldr	r0, [pc, #296]	; (b5208 <_GLOBAL__sub_I_argonName+0x278>)
   b50e0:	463a      	mov	r2, r7
   b50e2:	f7ff ff2d 	bl	b4f40 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b50e6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b50ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50ec:	eb0d 0c07 	add.w	ip, sp, r7
   b50f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b50f4:	4d3a      	ldr	r5, [pc, #232]	; (b51e0 <_GLOBAL__sub_I_argonName+0x250>)
   b50f6:	6833      	ldr	r3, [r6, #0]
   b50f8:	f8cc 3000 	str.w	r3, [ip]
   b50fc:	1d2b      	adds	r3, r5, #4
   b50fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5100:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5104:	463a      	mov	r2, r7
   b5106:	682b      	ldr	r3, [r5, #0]
   b5108:	4940      	ldr	r1, [pc, #256]	; (b520c <_GLOBAL__sub_I_argonName+0x27c>)
   b510a:	4841      	ldr	r0, [pc, #260]	; (b5210 <_GLOBAL__sub_I_argonName+0x280>)
   b510c:	f7ff ff18 	bl	b4f40 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
uint8_t currentHour = Time.hour();
   b5110:	f002 fc5a 	bl	b79c8 <_ZN9TimeClass4hourEv>
   b5114:	4b3f      	ldr	r3, [pc, #252]	; (b5214 <_GLOBAL__sub_I_argonName+0x284>)
String pricestoday_Json;
   b5116:	4940      	ldr	r1, [pc, #256]	; (b5218 <_GLOBAL__sub_I_argonName+0x288>)
uint8_t currentHour = Time.hour();
   b5118:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b511a:	4840      	ldr	r0, [pc, #256]	; (b521c <_GLOBAL__sub_I_argonName+0x28c>)
   b511c:	f001 f875 	bl	b620a <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b5120:	493d      	ldr	r1, [pc, #244]	; (b5218 <_GLOBAL__sub_I_argonName+0x288>)
   b5122:	483f      	ldr	r0, [pc, #252]	; (b5220 <_GLOBAL__sub_I_argonName+0x290>)
   b5124:	f001 f871 	bl	b620a <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b5128:	493b      	ldr	r1, [pc, #236]	; (b5218 <_GLOBAL__sub_I_argonName+0x288>)
   b512a:	483e      	ldr	r0, [pc, #248]	; (b5224 <_GLOBAL__sub_I_argonName+0x294>)
   b512c:	f001 f86d 	bl	b620a <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b5130:	4939      	ldr	r1, [pc, #228]	; (b5218 <_GLOBAL__sub_I_argonName+0x288>)
   b5132:	483d      	ldr	r0, [pc, #244]	; (b5228 <_GLOBAL__sub_I_argonName+0x298>)
   b5134:	f001 f869 	bl	b620a <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b5138:	4937      	ldr	r1, [pc, #220]	; (b5218 <_GLOBAL__sub_I_argonName+0x288>)
   b513a:	483c      	ldr	r0, [pc, #240]	; (b522c <_GLOBAL__sub_I_argonName+0x29c>)
   b513c:	f001 f865 	bl	b620a <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5140:	4b3b      	ldr	r3, [pc, #236]	; (b5230 <_GLOBAL__sub_I_argonName+0x2a0>)
   b5142:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5144:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5146:	4b3b      	ldr	r3, [pc, #236]	; (b5234 <_GLOBAL__sub_I_argonName+0x2a4>)
   b5148:	4a3b      	ldr	r2, [pc, #236]	; (b5238 <_GLOBAL__sub_I_argonName+0x2a8>)
   b514a:	601a      	str	r2, [r3, #0]
   b514c:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5150:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5154:	ae0c      	add	r6, sp, #48	; 0x30
   b5156:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b515a:	e892 0003 	ldmia.w	r2, {r0, r1}
   b515e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5162:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5166:	e882 0003 	stmia.w	r2, {r0, r1}
   b516a:	4a34      	ldr	r2, [pc, #208]	; (b523c <_GLOBAL__sub_I_argonName+0x2ac>)
   b516c:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b516e:	699a      	ldr	r2, [r3, #24]
   b5170:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b5172:	4a33      	ldr	r2, [pc, #204]	; (b5240 <_GLOBAL__sub_I_argonName+0x2b0>)
   b5174:	619a      	str	r2, [r3, #24]
   b5176:	711c      	strb	r4, [r3, #4]
   b5178:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b517a:	4a32      	ldr	r2, [pc, #200]	; (b5244 <_GLOBAL__sub_I_argonName+0x2b4>)
      __a = _GLIBCXX_MOVE(__b);
   b517c:	9410      	str	r4, [sp, #64]	; 0x40
   b517e:	f103 0008 	add.w	r0, r3, #8
   b5182:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5186:	e9cd 8400 	strd	r8, r4, [sp]
   b518a:	f000 f9bb 	bl	b5504 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b518e:	4628      	mov	r0, r5
   b5190:	f7ff f926 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
UDP udp;
   b5194:	492c      	ldr	r1, [pc, #176]	; (b5248 <_GLOBAL__sub_I_argonName+0x2b8>)
   b5196:	4608      	mov	r0, r1
   b5198:	f000 ff4a 	bl	b6030 <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b519c:	492a      	ldr	r1, [pc, #168]	; (b5248 <_GLOBAL__sub_I_argonName+0x2b8>)
   b519e:	482b      	ldr	r0, [pc, #172]	; (b524c <_GLOBAL__sub_I_argonName+0x2bc>)
   b51a0:	f000 f891 	bl	b52c6 <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b51a4:	4621      	mov	r1, r4
   b51a6:	4640      	mov	r0, r8
   b51a8:	b013      	add	sp, #76	; 0x4c
   b51aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b51ae:	f000 bb19 	b.w	b57e4 <system_thread_set_state>
   b51b2:	bf00      	nop
   b51b4:	2003dbc8 	.word	0x2003dbc8
   b51b8:	2003db50 	.word	0x2003db50
   b51bc:	2003d918 	.word	0x2003d918
   b51c0:	2003d91c 	.word	0x2003d91c
   b51c4:	2003d8f8 	.word	0x2003d8f8
   b51c8:	2003d8f0 	.word	0x2003d8f0
   b51cc:	2003d8f4 	.word	0x2003d8f4
   b51d0:	2003db8c 	.word	0x2003db8c
   b51d4:	2003d8fc 	.word	0x2003d8fc
   b51d8:	2003db78 	.word	0x2003db78
   b51dc:	2003d900 	.word	0x2003d900
   b51e0:	2003dbb4 	.word	0x2003dbb4
   b51e4:	000bb9d9 	.word	0x000bb9d9
   b51e8:	2003db24 	.word	0x2003db24
   b51ec:	000bb9e2 	.word	0x000bb9e2
   b51f0:	2003db14 	.word	0x2003db14
   b51f4:	000bb9f0 	.word	0x000bb9f0
   b51f8:	2003db04 	.word	0x2003db04
   b51fc:	000bb9fa 	.word	0x000bb9fa
   b5200:	2003db0c 	.word	0x2003db0c
   b5204:	000bba07 	.word	0x000bba07
   b5208:	2003db2c 	.word	0x2003db2c
   b520c:	000bba11 	.word	0x000bba11
   b5210:	2003db34 	.word	0x2003db34
   b5214:	2003dca4 	.word	0x2003dca4
   b5218:	000bb9a9 	.word	0x000bb9a9
   b521c:	2003dcac 	.word	0x2003dcac
   b5220:	2003dcbc 	.word	0x2003dcbc
   b5224:	2003dccc 	.word	0x2003dccc
   b5228:	2003e1bc 	.word	0x2003e1bc
   b522c:	2003e1d0 	.word	0x2003e1d0
   b5230:	000b41c1 	.word	0x000b41c1
   b5234:	2003e150 	.word	0x2003e150
   b5238:	000bba28 	.word	0x000bba28
   b523c:	000b4167 	.word	0x000b4167
   b5240:	000b417b 	.word	0x000b417b
   b5244:	000b412d 	.word	0x000b412d
   b5248:	2003e16c 	.word	0x2003e16c
   b524c:	2003dcdc 	.word	0x2003dcdc
   b5250:	2003db3c 	.word	0x2003db3c
   b5254:	2003dba0 	.word	0x2003dba0
   b5258:	2003db64 	.word	0x2003db64

000b525c <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b525c:	b570      	push	{r4, r5, r6, lr}
   b525e:	4604      	mov	r4, r0
   b5260:	4605      	mov	r5, r0
   b5262:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5266:	4628      	mov	r0, r5
   b5268:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b526c:	f000 f815 	bl	b529a <_ZN12mDNSResolver8ResponseC1Ev>
   b5270:	42ae      	cmp	r6, r5
   b5272:	d1f8      	bne.n	b5266 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b5274:	2300      	movs	r3, #0
   b5276:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b527a:	4620      	mov	r0, r4
   b527c:	bd70      	pop	{r4, r5, r6, pc}

000b527e <_ZN9IPAddressaSImEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b527e:	b530      	push	{r4, r5, lr}
   b5280:	b087      	sub	sp, #28
   b5282:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5284:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5286:	4668      	mov	r0, sp
   b5288:	f002 ff84 	bl	b8194 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b528c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b528e:	3404      	adds	r4, #4
   b5290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5292:	682b      	ldr	r3, [r5, #0]
   b5294:	7023      	strb	r3, [r4, #0]
    }
   b5296:	b007      	add	sp, #28
   b5298:	bd30      	pop	{r4, r5, pc}

000b529a <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b529a:	b538      	push	{r3, r4, r5, lr}
   b529c:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b52a0:	4604      	mov	r4, r0
   b52a2:	4628      	mov	r0, r5
   b52a4:	f002 ff56 	bl	b8154 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b52a8:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b52aa:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b52ac:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b52ae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b52b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b52b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b52ba:	f04f 31ff 	mov.w	r1, #4294967295
   b52be:	f7ff ffde 	bl	b527e <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b52c2:	4620      	mov	r0, r4
   b52c4:	bd38      	pop	{r3, r4, r5, pc}

000b52c6 <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b52c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b52c8:	4604      	mov	r4, r0
   b52ca:	3004      	adds	r0, #4
   b52cc:	460d      	mov	r5, r1
   b52ce:	f000 feaf 	bl	b6030 <_ZN3UDPC1Ev>
   b52d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b52d6:	f002 ff3d 	bl	b8154 <_ZN9IPAddressC1Ev>
    timeout = 0;
   b52da:	2300      	movs	r3, #0
   b52dc:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b52de:	686b      	ldr	r3, [r5, #4]
   b52e0:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b52e2:	68ab      	ldr	r3, [r5, #8]
   b52e4:	60e3      	str	r3, [r4, #12]
   b52e6:	68eb      	ldr	r3, [r5, #12]
   b52e8:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b52ea:	696b      	ldr	r3, [r5, #20]
   b52ec:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b52ee:	f105 0720 	add.w	r7, r5, #32
   b52f2:	8b2b      	ldrh	r3, [r5, #24]
   b52f4:	83a3      	strh	r3, [r4, #28]
   b52f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b52f8:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b52fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b52fe:	683b      	ldr	r3, [r7, #0]
   b5300:	7033      	strb	r3, [r6, #0]
   b5302:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b5304:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b5306:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b5308:	6423      	str	r3, [r4, #64]	; 0x40
   b530a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b530c:	6463      	str	r3, [r4, #68]	; 0x44
   b530e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b5310:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b5312:	64a3      	str	r3, [r4, #72]	; 0x48
   b5314:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b5318:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b531a:	4620      	mov	r0, r4
   b531c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b5320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5324 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b5324:	4801      	ldr	r0, [pc, #4]	; (b532c <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b5326:	f7ff bf99 	b.w	b525c <_ZN12mDNSResolver5CacheC1Ev>
   b532a:	bf00      	nop
   b532c:	2003e1e0 	.word	0x2003e1e0

000b5330 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b02      	ldr	r3, [pc, #8]	; (b533c <netdb_freeaddrinfo+0xc>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	689b      	ldr	r3, [r3, #8]
   b5338:	9301      	str	r3, [sp, #4]
   b533a:	bd08      	pop	{r3, pc}
   b533c:	00030268 	.word	0x00030268

000b5340 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5340:	b508      	push	{r3, lr}
   b5342:	4b02      	ldr	r3, [pc, #8]	; (b534c <netdb_getaddrinfo+0xc>)
   b5344:	681b      	ldr	r3, [r3, #0]
   b5346:	68db      	ldr	r3, [r3, #12]
   b5348:	9301      	str	r3, [sp, #4]
   b534a:	bd08      	pop	{r3, pc}
   b534c:	00030268 	.word	0x00030268

000b5350 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <HAL_Pin_Mode+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	689b      	ldr	r3, [r3, #8]
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	0003022c 	.word	0x0003022c

000b5360 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <HAL_Interrupts_Attach+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	699b      	ldr	r3, [r3, #24]
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	0003022c 	.word	0x0003022c

000b5370 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <HAL_Interrupts_Detach+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	69db      	ldr	r3, [r3, #28]
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	0003022c 	.word	0x0003022c

000b5380 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <if_index_to_name+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	695b      	ldr	r3, [r3, #20]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	0003026c 	.word	0x0003026c

000b5390 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <HAL_RNG_GetRandomNumber+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	685b      	ldr	r3, [r3, #4]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030218 	.word	0x00030218

000b53a0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <HAL_Delay_Microseconds+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	68db      	ldr	r3, [r3, #12]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030218 	.word	0x00030218

000b53b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	695b      	ldr	r3, [r3, #20]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030218 	.word	0x00030218

000b53c0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <hal_rtc_time_is_valid+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	00030218 	.word	0x00030218

000b53d0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <hal_rtc_get_time+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	00030218 	.word	0x00030218

000b53e0 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <HAL_Core_Runtime_Info+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030234 	.word	0x00030234

000b53f0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <hal_ble_stack_init+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	689b      	ldr	r3, [r3, #8]
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030278 	.word	0x00030278

000b5400 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <hal_ble_gap_set_advertising_data+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030278 	.word	0x00030278

000b5410 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <hal_ble_gap_set_scan_response_data+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030278 	.word	0x00030278

000b5420 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <hal_ble_gap_start_advertising+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030278 	.word	0x00030278

000b5430 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b03      	ldr	r3, [pc, #12]	; (b5440 <hal_ble_gap_disconnect+0x10>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b543a:	9301      	str	r3, [sp, #4]
   b543c:	bd08      	pop	{r3, pc}
   b543e:	0000      	.short	0x0000
   b5440:	00030278 	.word	0x00030278

000b5444 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b03      	ldr	r3, [pc, #12]	; (b5454 <hal_ble_gatt_server_add_service+0x10>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b544e:	9301      	str	r3, [sp, #4]
   b5450:	bd08      	pop	{r3, pc}
   b5452:	0000      	.short	0x0000
   b5454:	00030278 	.word	0x00030278

000b5458 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5458:	b508      	push	{r3, lr}
   b545a:	4b03      	ldr	r3, [pc, #12]	; (b5468 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b545c:	681b      	ldr	r3, [r3, #0]
   b545e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b5462:	9301      	str	r3, [sp, #4]
   b5464:	bd08      	pop	{r3, pc}
   b5466:	0000      	.short	0x0000
   b5468:	00030278 	.word	0x00030278

000b546c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b546c:	b508      	push	{r3, lr}
   b546e:	4b03      	ldr	r3, [pc, #12]	; (b547c <hal_ble_gatt_client_write_with_response+0x10>)
   b5470:	681b      	ldr	r3, [r3, #0]
   b5472:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5476:	9301      	str	r3, [sp, #4]
   b5478:	bd08      	pop	{r3, pc}
   b547a:	0000      	.short	0x0000
   b547c:	00030278 	.word	0x00030278

000b5480 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b03      	ldr	r3, [pc, #12]	; (b5490 <hal_ble_gatt_client_write_without_response+0x10>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b548a:	9301      	str	r3, [sp, #4]
   b548c:	bd08      	pop	{r3, pc}
   b548e:	0000      	.short	0x0000
   b5490:	00030278 	.word	0x00030278

000b5494 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b03      	ldr	r3, [pc, #12]	; (b54a4 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b549e:	9301      	str	r3, [sp, #4]
   b54a0:	bd08      	pop	{r3, pc}
   b54a2:	0000      	.short	0x0000
   b54a4:	00030278 	.word	0x00030278

000b54a8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b54a8:	b508      	push	{r3, lr}
   b54aa:	4b03      	ldr	r3, [pc, #12]	; (b54b8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b54ac:	681b      	ldr	r3, [r3, #0]
   b54ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b54b2:	9301      	str	r3, [sp, #4]
   b54b4:	bd08      	pop	{r3, pc}
   b54b6:	0000      	.short	0x0000
   b54b8:	00030278 	.word	0x00030278

000b54bc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b54bc:	b508      	push	{r3, lr}
   b54be:	4b03      	ldr	r3, [pc, #12]	; (b54cc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b54c0:	681b      	ldr	r3, [r3, #0]
   b54c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b54c6:	9301      	str	r3, [sp, #4]
   b54c8:	bd08      	pop	{r3, pc}
   b54ca:	0000      	.short	0x0000
   b54cc:	00030278 	.word	0x00030278

000b54d0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b03      	ldr	r3, [pc, #12]	; (b54e0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b54da:	9301      	str	r3, [sp, #4]
   b54dc:	bd08      	pop	{r3, pc}
   b54de:	0000      	.short	0x0000
   b54e0:	00030278 	.word	0x00030278

000b54e4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <os_thread_yield+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	68db      	ldr	r3, [r3, #12]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	00030248 	.word	0x00030248

000b54f4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <os_thread_scheduling+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	69db      	ldr	r3, [r3, #28]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	00030248 	.word	0x00030248

000b5504 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <os_timer_create+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	6a1b      	ldr	r3, [r3, #32]
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	00030248 	.word	0x00030248

000b5514 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <os_timer_destroy+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	00030248 	.word	0x00030248

000b5524 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <os_timer_get_id+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	00030248 	.word	0x00030248

000b5534 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <os_timer_change+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	00030248 	.word	0x00030248

000b5544 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <os_mutex_recursive_create+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	00030248 	.word	0x00030248

000b5554 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <os_mutex_recursive_lock+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	00030248 	.word	0x00030248

000b5564 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <os_mutex_recursive_unlock+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	00030248 	.word	0x00030248

000b5574 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <os_timer_set_id+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	00030248 	.word	0x00030248

000b5584 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <inet_inet_ntop+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	695b      	ldr	r3, [r3, #20]
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	00030264 	.word	0x00030264

000b5594 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <inet_htonl+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	6a1b      	ldr	r3, [r3, #32]
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	00030264 	.word	0x00030264

000b55a4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <inet_ntohs+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	00030264 	.word	0x00030264

000b55b4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b02      	ldr	r3, [pc, #8]	; (b55c0 <inet_htons+0xc>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	00030264 	.word	0x00030264

000b55c4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b55c4:	b508      	push	{r3, lr}
   b55c6:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <hal_usart_write+0xc>)
   b55c8:	681b      	ldr	r3, [r3, #0]
   b55ca:	68db      	ldr	r3, [r3, #12]
   b55cc:	9301      	str	r3, [sp, #4]
   b55ce:	bd08      	pop	{r3, pc}
   b55d0:	0003023c 	.word	0x0003023c

000b55d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <hal_usart_available+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	691b      	ldr	r3, [r3, #16]
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	0003023c 	.word	0x0003023c

000b55e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <hal_usart_read+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	695b      	ldr	r3, [r3, #20]
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	0003023c 	.word	0x0003023c

000b55f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <hal_usart_peek+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	699b      	ldr	r3, [r3, #24]
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	0003023c 	.word	0x0003023c

000b5604 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <hal_usart_flush+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	69db      	ldr	r3, [r3, #28]
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	0003023c 	.word	0x0003023c

000b5614 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b02      	ldr	r3, [pc, #8]	; (b5620 <hal_usart_is_enabled+0xc>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	6a1b      	ldr	r3, [r3, #32]
   b561c:	9301      	str	r3, [sp, #4]
   b561e:	bd08      	pop	{r3, pc}
   b5620:	0003023c 	.word	0x0003023c

000b5624 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5624:	b508      	push	{r3, lr}
   b5626:	4b02      	ldr	r3, [pc, #8]	; (b5630 <hal_usart_available_data_for_write+0xc>)
   b5628:	681b      	ldr	r3, [r3, #0]
   b562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b562c:	9301      	str	r3, [sp, #4]
   b562e:	bd08      	pop	{r3, pc}
   b5630:	0003023c 	.word	0x0003023c

000b5634 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b02      	ldr	r3, [pc, #8]	; (b5640 <hal_usart_init_ex+0xc>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	bd08      	pop	{r3, pc}
   b5640:	0003023c 	.word	0x0003023c

000b5644 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5644:	b508      	push	{r3, lr}
   b5646:	4b02      	ldr	r3, [pc, #8]	; (b5650 <hal_i2c_write+0xc>)
   b5648:	681b      	ldr	r3, [r3, #0]
   b564a:	6a1b      	ldr	r3, [r3, #32]
   b564c:	9301      	str	r3, [sp, #4]
   b564e:	bd08      	pop	{r3, pc}
   b5650:	00030228 	.word	0x00030228

000b5654 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <hal_i2c_available+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	00030228 	.word	0x00030228

000b5664 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <hal_i2c_read+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	00030228 	.word	0x00030228

000b5674 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <hal_i2c_peek+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	00030228 	.word	0x00030228

000b5684 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <hal_i2c_flush+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	00030228 	.word	0x00030228

000b5694 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b02      	ldr	r3, [pc, #8]	; (b56a0 <hal_i2c_is_enabled+0xc>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	bd08      	pop	{r3, pc}
   b56a0:	00030228 	.word	0x00030228

000b56a4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b56a4:	b508      	push	{r3, lr}
   b56a6:	4b02      	ldr	r3, [pc, #8]	; (b56b0 <hal_i2c_init+0xc>)
   b56a8:	681b      	ldr	r3, [r3, #0]
   b56aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56ac:	9301      	str	r3, [sp, #4]
   b56ae:	bd08      	pop	{r3, pc}
   b56b0:	00030228 	.word	0x00030228

000b56b4 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <sock_bind+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	685b      	ldr	r3, [r3, #4]
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	00030238 	.word	0x00030238

000b56c4 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <sock_setsockopt+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	699b      	ldr	r3, [r3, #24]
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	00030238 	.word	0x00030238

000b56d4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <sock_close+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	69db      	ldr	r3, [r3, #28]
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	00030238 	.word	0x00030238

000b56e4 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <sock_recvfrom+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	00030238 	.word	0x00030238

000b56f4 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <sock_sendto+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	00030238 	.word	0x00030238

000b5704 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <sock_socket+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	00030238 	.word	0x00030238

000b5714 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <hal_spi_init+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	69db      	ldr	r3, [r3, #28]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	00030230 	.word	0x00030230

000b5724 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <hal_spi_is_enabled+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	6a1b      	ldr	r3, [r3, #32]
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	00030230 	.word	0x00030230

000b5734 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <HAL_USB_USART_Init+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	681b      	ldr	r3, [r3, #0]
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	0003024c 	.word	0x0003024c

000b5744 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <HAL_USB_USART_Available_Data+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	691b      	ldr	r3, [r3, #16]
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	0003024c 	.word	0x0003024c

000b5754 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	695b      	ldr	r3, [r3, #20]
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	0003024c 	.word	0x0003024c

000b5764 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <HAL_USB_USART_Receive_Data+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	699b      	ldr	r3, [r3, #24]
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	0003024c 	.word	0x0003024c

000b5774 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <HAL_USB_USART_Send_Data+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	69db      	ldr	r3, [r3, #28]
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	0003024c 	.word	0x0003024c

000b5784 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <HAL_USB_USART_Flush_Data+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	6a1b      	ldr	r3, [r3, #32]
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	0003024c 	.word	0x0003024c

000b5794 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <panic_+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	00030260 	.word	0x00030260

000b57a4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <log_message+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	00030260 	.word	0x00030260

000b57b4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <system_mode+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	681b      	ldr	r3, [r3, #0]
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	00030220 	.word	0x00030220

000b57c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <set_system_mode+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	685b      	ldr	r3, [r3, #4]
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	00030220 	.word	0x00030220

000b57d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b02      	ldr	r3, [pc, #8]	; (b57e0 <system_delay_ms+0xc>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	695b      	ldr	r3, [r3, #20]
   b57dc:	9301      	str	r3, [sp, #4]
   b57de:	bd08      	pop	{r3, pc}
   b57e0:	00030220 	.word	0x00030220

000b57e4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b57e4:	b508      	push	{r3, lr}
   b57e6:	4b02      	ldr	r3, [pc, #8]	; (b57f0 <system_thread_set_state+0xc>)
   b57e8:	681b      	ldr	r3, [r3, #0]
   b57ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57ec:	9301      	str	r3, [sp, #4]
   b57ee:	bd08      	pop	{r3, pc}
   b57f0:	00030220 	.word	0x00030220

000b57f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b57f4:	b508      	push	{r3, lr}
   b57f6:	4b02      	ldr	r3, [pc, #8]	; (b5800 <application_thread_current+0xc>)
   b57f8:	681b      	ldr	r3, [r3, #0]
   b57fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b57fc:	9301      	str	r3, [sp, #4]
   b57fe:	bd08      	pop	{r3, pc}
   b5800:	00030220 	.word	0x00030220

000b5804 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5804:	b508      	push	{r3, lr}
   b5806:	4b02      	ldr	r3, [pc, #8]	; (b5810 <application_thread_invoke+0xc>)
   b5808:	681b      	ldr	r3, [r3, #0]
   b580a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b580c:	9301      	str	r3, [sp, #4]
   b580e:	bd08      	pop	{r3, pc}
   b5810:	00030220 	.word	0x00030220

000b5814 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b02      	ldr	r3, [pc, #8]	; (b5820 <system_thread_get_state+0xc>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b581c:	9301      	str	r3, [sp, #4]
   b581e:	bd08      	pop	{r3, pc}
   b5820:	00030220 	.word	0x00030220

000b5824 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5824:	b508      	push	{r3, lr}
   b5826:	4b03      	ldr	r3, [pc, #12]	; (b5834 <system_ctrl_set_app_request_handler+0x10>)
   b5828:	681b      	ldr	r3, [r3, #0]
   b582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b582e:	9301      	str	r3, [sp, #4]
   b5830:	bd08      	pop	{r3, pc}
   b5832:	0000      	.short	0x0000
   b5834:	00030220 	.word	0x00030220

000b5838 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b03      	ldr	r3, [pc, #12]	; (b5848 <system_ctrl_set_result+0x10>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5842:	9301      	str	r3, [sp, #4]
   b5844:	bd08      	pop	{r3, pc}
   b5846:	0000      	.short	0x0000
   b5848:	00030220 	.word	0x00030220

000b584c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b584c:	b508      	push	{r3, lr}
   b584e:	4b02      	ldr	r3, [pc, #8]	; (b5858 <network_connect+0xc>)
   b5850:	681b      	ldr	r3, [r3, #0]
   b5852:	685b      	ldr	r3, [r3, #4]
   b5854:	9301      	str	r3, [sp, #4]
   b5856:	bd08      	pop	{r3, pc}
   b5858:	00030240 	.word	0x00030240

000b585c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b585c:	b508      	push	{r3, lr}
   b585e:	4b02      	ldr	r3, [pc, #8]	; (b5868 <network_connecting+0xc>)
   b5860:	681b      	ldr	r3, [r3, #0]
   b5862:	689b      	ldr	r3, [r3, #8]
   b5864:	9301      	str	r3, [sp, #4]
   b5866:	bd08      	pop	{r3, pc}
   b5868:	00030240 	.word	0x00030240

000b586c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b586c:	b508      	push	{r3, lr}
   b586e:	4b02      	ldr	r3, [pc, #8]	; (b5878 <network_disconnect+0xc>)
   b5870:	681b      	ldr	r3, [r3, #0]
   b5872:	68db      	ldr	r3, [r3, #12]
   b5874:	9301      	str	r3, [sp, #4]
   b5876:	bd08      	pop	{r3, pc}
   b5878:	00030240 	.word	0x00030240

000b587c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b587c:	b508      	push	{r3, lr}
   b587e:	4b02      	ldr	r3, [pc, #8]	; (b5888 <network_ready+0xc>)
   b5880:	681b      	ldr	r3, [r3, #0]
   b5882:	691b      	ldr	r3, [r3, #16]
   b5884:	9301      	str	r3, [sp, #4]
   b5886:	bd08      	pop	{r3, pc}
   b5888:	00030240 	.word	0x00030240

000b588c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b588c:	b508      	push	{r3, lr}
   b588e:	4b02      	ldr	r3, [pc, #8]	; (b5898 <network_on+0xc>)
   b5890:	681b      	ldr	r3, [r3, #0]
   b5892:	695b      	ldr	r3, [r3, #20]
   b5894:	9301      	str	r3, [sp, #4]
   b5896:	bd08      	pop	{r3, pc}
   b5898:	00030240 	.word	0x00030240

000b589c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b589c:	b508      	push	{r3, lr}
   b589e:	4b02      	ldr	r3, [pc, #8]	; (b58a8 <network_off+0xc>)
   b58a0:	681b      	ldr	r3, [r3, #0]
   b58a2:	699b      	ldr	r3, [r3, #24]
   b58a4:	9301      	str	r3, [sp, #4]
   b58a6:	bd08      	pop	{r3, pc}
   b58a8:	00030240 	.word	0x00030240

000b58ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b58ac:	b508      	push	{r3, lr}
   b58ae:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <network_listen+0xc>)
   b58b0:	681b      	ldr	r3, [r3, #0]
   b58b2:	69db      	ldr	r3, [r3, #28]
   b58b4:	9301      	str	r3, [sp, #4]
   b58b6:	bd08      	pop	{r3, pc}
   b58b8:	00030240 	.word	0x00030240

000b58bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b58bc:	b508      	push	{r3, lr}
   b58be:	4b02      	ldr	r3, [pc, #8]	; (b58c8 <network_listening+0xc>)
   b58c0:	681b      	ldr	r3, [r3, #0]
   b58c2:	6a1b      	ldr	r3, [r3, #32]
   b58c4:	9301      	str	r3, [sp, #4]
   b58c6:	bd08      	pop	{r3, pc}
   b58c8:	00030240 	.word	0x00030240

000b58cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b58cc:	b508      	push	{r3, lr}
   b58ce:	4b02      	ldr	r3, [pc, #8]	; (b58d8 <network_set_listen_timeout+0xc>)
   b58d0:	681b      	ldr	r3, [r3, #0]
   b58d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b58d4:	9301      	str	r3, [sp, #4]
   b58d6:	bd08      	pop	{r3, pc}
   b58d8:	00030240 	.word	0x00030240

000b58dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b58dc:	b508      	push	{r3, lr}
   b58de:	4b02      	ldr	r3, [pc, #8]	; (b58e8 <network_get_listen_timeout+0xc>)
   b58e0:	681b      	ldr	r3, [r3, #0]
   b58e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b58e4:	9301      	str	r3, [sp, #4]
   b58e6:	bd08      	pop	{r3, pc}
   b58e8:	00030240 	.word	0x00030240

000b58ec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b58ec:	b508      	push	{r3, lr}
   b58ee:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <network_is_on+0xc>)
   b58f0:	681b      	ldr	r3, [r3, #0]
   b58f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	bd08      	pop	{r3, pc}
   b58f8:	00030240 	.word	0x00030240

000b58fc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b58fc:	b508      	push	{r3, lr}
   b58fe:	4b02      	ldr	r3, [pc, #8]	; (b5908 <network_is_off+0xc>)
   b5900:	681b      	ldr	r3, [r3, #0]
   b5902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	bd08      	pop	{r3, pc}
   b5908:	00030240 	.word	0x00030240

000b590c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b590c:	b508      	push	{r3, lr}
   b590e:	4b02      	ldr	r3, [pc, #8]	; (b5918 <spark_process+0xc>)
   b5910:	681b      	ldr	r3, [r3, #0]
   b5912:	689b      	ldr	r3, [r3, #8]
   b5914:	9301      	str	r3, [sp, #4]
   b5916:	bd08      	pop	{r3, pc}
   b5918:	00030244 	.word	0x00030244

000b591c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b591c:	b508      	push	{r3, lr}
   b591e:	4b02      	ldr	r3, [pc, #8]	; (b5928 <spark_cloud_flag_connected+0xc>)
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	695b      	ldr	r3, [r3, #20]
   b5924:	9301      	str	r3, [sp, #4]
   b5926:	bd08      	pop	{r3, pc}
   b5928:	00030244 	.word	0x00030244

000b592c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b592c:	b508      	push	{r3, lr}
   b592e:	4b02      	ldr	r3, [pc, #8]	; (b5938 <spark_send_event+0xc>)
   b5930:	681b      	ldr	r3, [r3, #0]
   b5932:	6a1b      	ldr	r3, [r3, #32]
   b5934:	9301      	str	r3, [sp, #4]
   b5936:	bd08      	pop	{r3, pc}
   b5938:	00030244 	.word	0x00030244

000b593c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b593c:	b508      	push	{r3, lr}
   b593e:	4b02      	ldr	r3, [pc, #8]	; (b5948 <spark_subscribe+0xc>)
   b5940:	681b      	ldr	r3, [r3, #0]
   b5942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5944:	9301      	str	r3, [sp, #4]
   b5946:	bd08      	pop	{r3, pc}
   b5948:	00030244 	.word	0x00030244

000b594c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b594c:	b508      	push	{r3, lr}
   b594e:	4b02      	ldr	r3, [pc, #8]	; (b5958 <spark_sync_time_pending+0xc>)
   b5950:	681b      	ldr	r3, [r3, #0]
   b5952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5954:	9301      	str	r3, [sp, #4]
   b5956:	bd08      	pop	{r3, pc}
   b5958:	00030244 	.word	0x00030244

000b595c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b595c:	b508      	push	{r3, lr}
   b595e:	4b02      	ldr	r3, [pc, #8]	; (b5968 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5960:	681b      	ldr	r3, [r3, #0]
   b5962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5964:	9301      	str	r3, [sp, #4]
   b5966:	bd08      	pop	{r3, pc}
   b5968:	00030244 	.word	0x00030244

000b596c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b596c:	b508      	push	{r3, lr}
   b596e:	4b02      	ldr	r3, [pc, #8]	; (b5978 <malloc+0xc>)
   b5970:	681b      	ldr	r3, [r3, #0]
   b5972:	681b      	ldr	r3, [r3, #0]
   b5974:	9301      	str	r3, [sp, #4]
   b5976:	bd08      	pop	{r3, pc}
   b5978:	0003021c 	.word	0x0003021c

000b597c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b597c:	b508      	push	{r3, lr}
   b597e:	4b02      	ldr	r3, [pc, #8]	; (b5988 <free+0xc>)
   b5980:	681b      	ldr	r3, [r3, #0]
   b5982:	685b      	ldr	r3, [r3, #4]
   b5984:	9301      	str	r3, [sp, #4]
   b5986:	bd08      	pop	{r3, pc}
   b5988:	0003021c 	.word	0x0003021c

000b598c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b598c:	b508      	push	{r3, lr}
   b598e:	4b02      	ldr	r3, [pc, #8]	; (b5998 <realloc+0xc>)
   b5990:	681b      	ldr	r3, [r3, #0]
   b5992:	689b      	ldr	r3, [r3, #8]
   b5994:	9301      	str	r3, [sp, #4]
   b5996:	bd08      	pop	{r3, pc}
   b5998:	0003021c 	.word	0x0003021c

000b599c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b599c:	b508      	push	{r3, lr}
   b599e:	4b02      	ldr	r3, [pc, #8]	; (b59a8 <sprintf+0xc>)
   b59a0:	681b      	ldr	r3, [r3, #0]
   b59a2:	68db      	ldr	r3, [r3, #12]
   b59a4:	9301      	str	r3, [sp, #4]
   b59a6:	bd08      	pop	{r3, pc}
   b59a8:	0003021c 	.word	0x0003021c

000b59ac <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b59ac:	b508      	push	{r3, lr}
   b59ae:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <sscanf+0xc>)
   b59b0:	681b      	ldr	r3, [r3, #0]
   b59b2:	695b      	ldr	r3, [r3, #20]
   b59b4:	9301      	str	r3, [sp, #4]
   b59b6:	bd08      	pop	{r3, pc}
   b59b8:	0003021c 	.word	0x0003021c

000b59bc <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b59bc:	b508      	push	{r3, lr}
   b59be:	4b02      	ldr	r3, [pc, #8]	; (b59c8 <vsnprintf+0xc>)
   b59c0:	681b      	ldr	r3, [r3, #0]
   b59c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b59c4:	9301      	str	r3, [sp, #4]
   b59c6:	bd08      	pop	{r3, pc}
   b59c8:	0003021c 	.word	0x0003021c

000b59cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b59cc:	b508      	push	{r3, lr}
   b59ce:	4b02      	ldr	r3, [pc, #8]	; (b59d8 <abort+0xc>)
   b59d0:	681b      	ldr	r3, [r3, #0]
   b59d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59d4:	9301      	str	r3, [sp, #4]
   b59d6:	bd08      	pop	{r3, pc}
   b59d8:	0003021c 	.word	0x0003021c

000b59dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b59dc:	b508      	push	{r3, lr}
   b59de:	4b02      	ldr	r3, [pc, #8]	; (b59e8 <_malloc_r+0xc>)
   b59e0:	681b      	ldr	r3, [r3, #0]
   b59e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b59e4:	9301      	str	r3, [sp, #4]
   b59e6:	bd08      	pop	{r3, pc}
   b59e8:	0003021c 	.word	0x0003021c

000b59ec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b59ec:	b508      	push	{r3, lr}
   b59ee:	4b02      	ldr	r3, [pc, #8]	; (b59f8 <__errno+0xc>)
   b59f0:	681b      	ldr	r3, [r3, #0]
   b59f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b59f4:	9301      	str	r3, [sp, #4]
   b59f6:	bd08      	pop	{r3, pc}
   b59f8:	0003021c 	.word	0x0003021c

000b59fc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b59fc:	b508      	push	{r3, lr}
   b59fe:	4b02      	ldr	r3, [pc, #8]	; (b5a08 <__assert_func+0xc>)
   b5a00:	681b      	ldr	r3, [r3, #0]
   b5a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a04:	9301      	str	r3, [sp, #4]
   b5a06:	bd08      	pop	{r3, pc}
   b5a08:	0003021c 	.word	0x0003021c

000b5a0c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5a0c:	b508      	push	{r3, lr}
   b5a0e:	4b02      	ldr	r3, [pc, #8]	; (b5a18 <newlib_impure_ptr_callback+0xc>)
   b5a10:	681b      	ldr	r3, [r3, #0]
   b5a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a14:	9301      	str	r3, [sp, #4]
   b5a16:	bd08      	pop	{r3, pc}
   b5a18:	0003021c 	.word	0x0003021c

000b5a1c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5a1c:	b508      	push	{r3, lr}
   b5a1e:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <localtime_r+0xc>)
   b5a20:	681b      	ldr	r3, [r3, #0]
   b5a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5a24:	9301      	str	r3, [sp, #4]
   b5a26:	bd08      	pop	{r3, pc}
   b5a28:	0003021c 	.word	0x0003021c

000b5a2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5a2c:	2200      	movs	r2, #0
   b5a2e:	6840      	ldr	r0, [r0, #4]
   b5a30:	4611      	mov	r1, r2
   b5a32:	f7ff bf43 	b.w	b58bc <network_listening>

000b5a36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5a36:	2200      	movs	r2, #0
   b5a38:	6840      	ldr	r0, [r0, #4]
   b5a3a:	4611      	mov	r1, r2
   b5a3c:	f7ff bf4e 	b.w	b58dc <network_get_listen_timeout>

000b5a40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5a40:	6840      	ldr	r0, [r0, #4]
   b5a42:	2200      	movs	r2, #0
   b5a44:	f7ff bf42 	b.w	b58cc <network_set_listen_timeout>

000b5a48 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a48:	6840      	ldr	r0, [r0, #4]
   b5a4a:	2200      	movs	r2, #0
   b5a4c:	f081 0101 	eor.w	r1, r1, #1
   b5a50:	f7ff bf2c 	b.w	b58ac <network_listen>

000b5a54 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5a54:	2300      	movs	r3, #0
   b5a56:	6840      	ldr	r0, [r0, #4]
   b5a58:	461a      	mov	r2, r3
   b5a5a:	4619      	mov	r1, r3
   b5a5c:	f7ff bf1e 	b.w	b589c <network_off>

000b5a60 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5a60:	2300      	movs	r3, #0
   b5a62:	6840      	ldr	r0, [r0, #4]
   b5a64:	461a      	mov	r2, r3
   b5a66:	4619      	mov	r1, r3
   b5a68:	f7ff bf10 	b.w	b588c <network_on>

000b5a6c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5a6c:	2200      	movs	r2, #0
   b5a6e:	6840      	ldr	r0, [r0, #4]
   b5a70:	4611      	mov	r1, r2
   b5a72:	f7ff bf03 	b.w	b587c <network_ready>

000b5a76 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5a76:	2200      	movs	r2, #0
   b5a78:	6840      	ldr	r0, [r0, #4]
   b5a7a:	4611      	mov	r1, r2
   b5a7c:	f7ff beee 	b.w	b585c <network_connecting>

000b5a80 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5a80:	6840      	ldr	r0, [r0, #4]
   b5a82:	2200      	movs	r2, #0
   b5a84:	2102      	movs	r1, #2
   b5a86:	f7ff bef1 	b.w	b586c <network_disconnect>

000b5a8a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a8a:	2300      	movs	r3, #0
   b5a8c:	6840      	ldr	r0, [r0, #4]
   b5a8e:	461a      	mov	r2, r3
   b5a90:	f7ff bedc 	b.w	b584c <network_connect>

000b5a94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5a94:	4b02      	ldr	r3, [pc, #8]	; (b5aa0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5a96:	2203      	movs	r2, #3
   b5a98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5a9a:	4a02      	ldr	r2, [pc, #8]	; (b5aa4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5a9c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5a9e:	4770      	bx	lr
   b5aa0:	2003e674 	.word	0x2003e674
   b5aa4:	000bbb48 	.word	0x000bbb48

000b5aa8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5aa8:	b510      	push	{r4, lr}
   b5aaa:	4604      	mov	r4, r0
   b5aac:	4608      	mov	r0, r1
{
    _spi = spi;
   b5aae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5ab0:	f7ff fe30 	bl	b5714 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5ab4:	2300      	movs	r3, #0
   b5ab6:	6063      	str	r3, [r4, #4]
}
   b5ab8:	4620      	mov	r0, r4
   b5aba:	bd10      	pop	{r4, pc}

000b5abc <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b5abc:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b5abe:	2420      	movs	r4, #32
{
   b5ac0:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b5ac2:	4622      	mov	r2, r4
   b5ac4:	2100      	movs	r1, #0
   b5ac6:	4668      	mov	r0, sp
   b5ac8:	f003 fccf 	bl	b946a <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b5acc:	2100      	movs	r1, #0
   b5ace:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b5ad0:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b5ad4:	f7ff fc84 	bl	b53e0 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b5ad8:	9801      	ldr	r0, [sp, #4]
   b5ada:	b008      	add	sp, #32
   b5adc:	bd10      	pop	{r4, pc}
	...

000b5ae0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5ae0:	4b05      	ldr	r3, [pc, #20]	; (b5af8 <_GLOBAL__sub_I_System+0x18>)
   b5ae2:	2202      	movs	r2, #2
   b5ae4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5ae6:	4b05      	ldr	r3, [pc, #20]	; (b5afc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5ae8:	4a05      	ldr	r2, [pc, #20]	; (b5b00 <_GLOBAL__sub_I_System+0x20>)
   b5aea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5aec:	2000      	movs	r0, #0
   b5aee:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5af2:	f7ff be67 	b.w	b57c4 <set_system_mode>
   b5af6:	bf00      	nop
   b5af8:	2003e688 	.word	0x2003e688
   b5afc:	2003e67c 	.word	0x2003e67c
   b5b00:	ffff0000 	.word	0xffff0000

000b5b04 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5b04:	b510      	push	{r4, lr}
   b5b06:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5b08:	f003 fd25 	bl	b9556 <strlen>
   b5b0c:	3801      	subs	r0, #1
   b5b0e:	1823      	adds	r3, r4, r0
   b5b10:	4620      	mov	r0, r4
	while(i<j){
   b5b12:	4283      	cmp	r3, r0
   b5b14:	d906      	bls.n	b5b24 <_Z11str_reversePc+0x20>
		c = *i;
   b5b16:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5b18:	7819      	ldrb	r1, [r3, #0]
   b5b1a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5b1e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5b22:	e7f6      	b.n	b5b12 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5b24:	bd10      	pop	{r4, pc}

000b5b26 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5b26:	b570      	push	{r4, r5, r6, lr}
   b5b28:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5b2a:	1e91      	subs	r1, r2, #2
   b5b2c:	2922      	cmp	r1, #34	; 0x22
   b5b2e:	d81d      	bhi.n	b5b6c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5b30:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5b32:	b930      	cbnz	r0, b5b42 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5b34:	4423      	add	r3, r4
            *ptr++ = '0';
   b5b36:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5b38:	429d      	cmp	r5, r3
   b5b3a:	d210      	bcs.n	b5b5e <ultoa+0x38>
            *ptr++ = '0';
   b5b3c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5b40:	e7fa      	b.n	b5b38 <ultoa+0x12>
            result.quot = a/radix;
   b5b42:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5b46:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5b4a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5b4c:	2809      	cmp	r0, #9
                *ptr += '0';
   b5b4e:	bf94      	ite	ls
   b5b50:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5b52:	3157      	addhi	r1, #87	; 0x57
   b5b54:	b2c9      	uxtb	r1, r1
   b5b56:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5b5a:	4630      	mov	r0, r6
	while(a){
   b5b5c:	e7e9      	b.n	b5b32 <ultoa+0xc>

	*ptr = '\0';
   b5b5e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5b60:	4620      	mov	r0, r4
	*ptr = '\0';
   b5b62:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5b64:	f7ff ffce 	bl	b5b04 <_Z11str_reversePc>
	return buffer;
   b5b68:	4620      	mov	r0, r4
}
   b5b6a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5b6c:	2000      	movs	r0, #0
   b5b6e:	e7fc      	b.n	b5b6a <ultoa+0x44>

000b5b70 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5b70:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5b72:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5b74:	460c      	mov	r4, r1
   b5b76:	4615      	mov	r5, r2
	if(a<0){
   b5b78:	da0e      	bge.n	b5b98 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5b7e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5b82:	bf14      	ite	ne
   b5b84:	4258      	negne	r0, r3
   b5b86:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5b88:	2301      	movs	r3, #1
		*buffer = '-';
   b5b8a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5b8c:	462a      	mov	r2, r5
   b5b8e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5b90:	f7ff ffc9 	bl	b5b26 <ultoa>
	}
	return buffer;
}
   b5b94:	4620      	mov	r0, r4
   b5b96:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5b98:	2301      	movs	r3, #1
   b5b9a:	e7f9      	b.n	b5b90 <itoa+0x20>

000b5b9c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b5b9c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b5b9e:	6804      	ldr	r4, [r0, #0]
   b5ba0:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b5ba2:	46a4      	mov	ip, r4
    }
   b5ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b5ba8:	4760      	bx	ip

000b5baa <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b5baa:	6803      	ldr	r3, [r0, #0]
   b5bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5bae:	4718      	bx	r3

000b5bb0 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b5bb0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b5bb2:	4770      	bx	lr

000b5bb4 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b5bb4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b5bb6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b5bb8:	1a10      	subs	r0, r2, r0
   b5bba:	4770      	bx	lr

000b5bbc <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b5bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5bbe:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b5bc0:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5bc2:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5bc4:	4b0c      	ldr	r3, [pc, #48]	; (b5bf8 <_ZN3UDP9endPacketEv+0x3c>)
   b5bc6:	9302      	str	r3, [sp, #8]
   b5bc8:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b5bcc:	4604      	mov	r4, r0
   b5bce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5bd0:	ad03      	add	r5, sp, #12
   b5bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5bd4:	6833      	ldr	r3, [r6, #0]
   b5bd6:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5bd8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b5bda:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b5bdc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5bde:	9300      	str	r3, [sp, #0]
   b5be0:	4620      	mov	r0, r4
   b5be2:	ab02      	add	r3, sp, #8
   b5be4:	47b8      	blx	r7
    flush(); // wait for send to complete
   b5be6:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5be8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b5bea:	69db      	ldr	r3, [r3, #28]
   b5bec:	4620      	mov	r0, r4
   b5bee:	4798      	blx	r3
    return result;
}
   b5bf0:	4628      	mov	r0, r5
   b5bf2:	b009      	add	sp, #36	; 0x24
   b5bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5bf6:	bf00      	nop
   b5bf8:	000bbe10 	.word	0x000bbe10

000b5bfc <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b5bfc:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b5bfe:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b5c00:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b5c04:	68db      	ldr	r3, [r3, #12]
   b5c06:	2201      	movs	r2, #1
   b5c08:	f10d 0107 	add.w	r1, sp, #7
   b5c0c:	4798      	blx	r3
}
   b5c0e:	b003      	add	sp, #12
   b5c10:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c14 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b5c14:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b5c16:	6803      	ldr	r3, [r0, #0]
   b5c18:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b5c1a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b5c1c:	4798      	blx	r3
   b5c1e:	b128      	cbz	r0, b5c2c <_ZN3UDP4readEv+0x18>
   b5c20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5c22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b5c24:	1c59      	adds	r1, r3, #1
   b5c26:	86e1      	strh	r1, [r4, #54]	; 0x36
   b5c28:	5cd0      	ldrb	r0, [r2, r3]
}
   b5c2a:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b5c2c:	f04f 30ff 	mov.w	r0, #4294967295
   b5c30:	e7fb      	b.n	b5c2a <_ZN3UDP4readEv+0x16>

000b5c32 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b5c32:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b5c34:	6803      	ldr	r3, [r0, #0]
   b5c36:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b5c38:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b5c3a:	4798      	blx	r3
   b5c3c:	b118      	cbz	r0, b5c46 <_ZN3UDP4peekEv+0x14>
   b5c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5c40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b5c42:	5cd0      	ldrb	r0, [r2, r3]
}
   b5c44:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b5c46:	f04f 30ff 	mov.w	r0, #4294967295
   b5c4a:	e7fb      	b.n	b5c44 <_ZN3UDP4peekEv+0x12>

000b5c4c <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b5c4c:	4770      	bx	lr

000b5c4e <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b5c4e:	b410      	push	{r4}
   b5c50:	4603      	mov	r3, r0
   b5c52:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b5c54:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b5c56:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b5c58:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b5c5a:	6803      	ldr	r3, [r0, #0]
   b5c5c:	1a52      	subs	r2, r2, r1
   b5c5e:	68db      	ldr	r3, [r3, #12]
   b5c60:	4421      	add	r1, r4
}
   b5c62:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b5c66:	4718      	bx	r3

000b5c68 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b5c68:	f1a0 0010 	sub.w	r0, r0, #16
   b5c6c:	f7ff bfef 	b.w	b5c4e <_ZNK3UDP7printToER5Print>

000b5c70 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5c70:	b570      	push	{r4, r5, r6, lr}
    stop();
   b5c72:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5c74:	b08c      	sub	sp, #48	; 0x30
    stop();
   b5c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5c78:	4604      	mov	r4, r0
   b5c7a:	460e      	mov	r6, r1
   b5c7c:	4615      	mov	r5, r2
    stop();
   b5c7e:	4798      	blx	r3
    const int one = 1;
   b5c80:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b5c82:	221c      	movs	r2, #28
   b5c84:	2100      	movs	r1, #0
   b5c86:	a805      	add	r0, sp, #20
    const int one = 1;
   b5c88:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b5c8a:	f003 fbee 	bl	b946a <memset>
    saddr.sin6_len = sizeof(saddr);
   b5c8e:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b5c92:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b5c94:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b5c98:	f7ff fc8c 	bl	b55b4 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5c9c:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b5c9e:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5ca2:	2102      	movs	r1, #2
   b5ca4:	200a      	movs	r0, #10
   b5ca6:	f7ff fd2d 	bl	b5704 <sock_socket>
    if (_sock < 0) {
   b5caa:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5cac:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b5cae:	db25      	blt.n	b5cfc <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b5cb0:	2204      	movs	r2, #4
   b5cb2:	9200      	str	r2, [sp, #0]
   b5cb4:	ab02      	add	r3, sp, #8
   b5cb6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5cba:	f7ff fd03 	bl	b56c4 <sock_setsockopt>
   b5cbe:	b9e8      	cbnz	r0, b5cfc <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b5cc0:	b195      	cbz	r5, b5ce8 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b5cc2:	9003      	str	r0, [sp, #12]
   b5cc4:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b5cc8:	a903      	add	r1, sp, #12
   b5cca:	b2e8      	uxtb	r0, r5
   b5ccc:	f7ff fb58 	bl	b5380 <if_index_to_name>
   b5cd0:	b9a0      	cbnz	r0, b5cfc <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b5cd2:	2306      	movs	r3, #6
   b5cd4:	9300      	str	r3, [sp, #0]
   b5cd6:	6960      	ldr	r0, [r4, #20]
   b5cd8:	ab03      	add	r3, sp, #12
   b5cda:	f241 020b 	movw	r2, #4107	; 0x100b
   b5cde:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5ce2:	f7ff fcef 	bl	b56c4 <sock_setsockopt>
   b5ce6:	b948      	cbnz	r0, b5cfc <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b5ce8:	6960      	ldr	r0, [r4, #20]
   b5cea:	221c      	movs	r2, #28
   b5cec:	a905      	add	r1, sp, #20
   b5cee:	f7ff fce1 	bl	b56b4 <sock_bind>
   b5cf2:	b918      	cbnz	r0, b5cfc <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b5cf4:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b5cf6:	2001      	movs	r0, #1
}
   b5cf8:	b00c      	add	sp, #48	; 0x30
   b5cfa:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b5cfc:	6823      	ldr	r3, [r4, #0]
   b5cfe:	4620      	mov	r0, r4
   b5d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d02:	4798      	blx	r3
   b5d04:	2000      	movs	r0, #0
   b5d06:	e7f7      	b.n	b5cf8 <_ZN3UDP5beginEtm+0x88>

000b5d08 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b5d08:	b510      	push	{r4, lr}
   b5d0a:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b5d0c:	6940      	ldr	r0, [r0, #20]
   b5d0e:	2800      	cmp	r0, #0
   b5d10:	db01      	blt.n	b5d16 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b5d12:	f7ff fcdf 	bl	b56d4 <sock_close>
    _sock = -1;
   b5d16:	f04f 33ff 	mov.w	r3, #4294967295
   b5d1a:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b5d1c:	2300      	movs	r3, #0
   b5d1e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b5d20:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b5d22:	bd10      	pop	{r4, pc}

000b5d24 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b5d24:	b570      	push	{r4, r5, r6, lr}
   b5d26:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b5d28:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b5d2a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b5d2c:	b168      	cbz	r0, b5d4a <_ZN3UDP5writeEPKhj+0x26>
   b5d2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b5d30:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b5d32:	4294      	cmp	r4, r2
   b5d34:	bf28      	it	cs
   b5d36:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b5d38:	4622      	mov	r2, r4
   b5d3a:	4430      	add	r0, r6
   b5d3c:	f003 fb6d 	bl	b941a <memcpy>
    _offset += size;
   b5d40:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b5d42:	4423      	add	r3, r4
   b5d44:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b5d46:	4620      	mov	r0, r4
   b5d48:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b5d4a:	4604      	mov	r4, r0
   b5d4c:	e7f1      	b.n	b5d32 <_ZN3UDP5writeEPKhj+0xe>

000b5d4e <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b5d4e:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b5d50:	6803      	ldr	r3, [r0, #0]
   b5d52:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b5d54:	4604      	mov	r4, r0
   b5d56:	460f      	mov	r7, r1
   b5d58:	4616      	mov	r6, r2
    if (available()) {
   b5d5a:	4798      	blx	r3
   b5d5c:	b190      	cbz	r0, b5d84 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b5d5e:	6823      	ldr	r3, [r4, #0]
   b5d60:	4620      	mov	r0, r4
   b5d62:	691b      	ldr	r3, [r3, #16]
   b5d64:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b5d66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5d68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5d6a:	4286      	cmp	r6, r0
   b5d6c:	bfa8      	it	ge
   b5d6e:	4606      	movge	r6, r0
   b5d70:	4419      	add	r1, r3
   b5d72:	4632      	mov	r2, r6
   b5d74:	4638      	mov	r0, r7
   b5d76:	f003 fb50 	bl	b941a <memcpy>
        _offset += read;
   b5d7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5d7c:	4433      	add	r3, r6
   b5d7e:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b5d80:	4630      	mov	r0, r6
   b5d82:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b5d84:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b5d88:	e7fa      	b.n	b5d80 <_ZN3UDP4readEPhj+0x32>

000b5d8a <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b5d8a:	b530      	push	{r4, r5, lr}
   b5d8c:	b087      	sub	sp, #28
   b5d8e:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5d90:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5d92:	4668      	mov	r0, sp
   b5d94:	f002 fa2a 	bl	b81ec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d9a:	3404      	adds	r4, #4
   b5d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d9e:	682b      	ldr	r3, [r5, #0]
   b5da0:	7023      	strb	r3, [r4, #0]
    }
   b5da2:	b007      	add	sp, #28
   b5da4:	bd30      	pop	{r4, r5, pc}
	...

000b5da8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5daa:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5dac:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5dae:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5db0:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b5db2:	4a0a      	ldr	r2, [pc, #40]	; (b5ddc <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b5db4:	9202      	str	r2, [sp, #8]
   b5db6:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5db8:	468c      	mov	ip, r1
   b5dba:	4606      	mov	r6, r0
   b5dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5dbe:	ad03      	add	r5, sp, #12
   b5dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5dc2:	6823      	ldr	r3, [r4, #0]
   b5dc4:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5dc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b5dca:	9300      	str	r3, [sp, #0]
   b5dcc:	4672      	mov	r2, lr
   b5dce:	ab02      	add	r3, sp, #8
   b5dd0:	4661      	mov	r1, ip
   b5dd2:	4630      	mov	r0, r6
   b5dd4:	47b8      	blx	r7
    }
   b5dd6:	b009      	add	sp, #36	; 0x24
   b5dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5dda:	bf00      	nop
   b5ddc:	000bbe10 	.word	0x000bbe10

000b5de0 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b5de0:	b570      	push	{r4, r5, r6, lr}
   b5de2:	4604      	mov	r4, r0
   b5de4:	4b05      	ldr	r3, [pc, #20]	; (b5dfc <_ZN3UDP8remoteIPEv+0x1c>)
   b5de6:	f844 3b04 	str.w	r3, [r4], #4
   b5dea:	f101 0520 	add.w	r5, r1, #32
   b5dee:	4606      	mov	r6, r0
   b5df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5df4:	682b      	ldr	r3, [r5, #0]
   b5df6:	7023      	strb	r3, [r4, #0]
   b5df8:	4630      	mov	r0, r6
   b5dfa:	bd70      	pop	{r4, r5, r6, pc}
   b5dfc:	000bbe10 	.word	0x000bbe10

000b5e00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b5e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b5e02:	7843      	ldrb	r3, [r0, #1]
   b5e04:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b5e06:	b08d      	sub	sp, #52	; 0x34
   b5e08:	4605      	mov	r5, r0
   b5e0a:	460c      	mov	r4, r1
   b5e0c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b5e0e:	d104      	bne.n	b5e1a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5e10:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5e12:	4620      	mov	r0, r4
   b5e14:	f7ff ffb9 	bl	b5d8a <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b5e18:	e022      	b.n	b5e60 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b5e1a:	2b0a      	cmp	r3, #10
   b5e1c:	d125      	bne.n	b5e6a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b5e1e:	2211      	movs	r2, #17
   b5e20:	2100      	movs	r1, #0
   b5e22:	a801      	add	r0, sp, #4
   b5e24:	f003 fb21 	bl	b946a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5e28:	68ab      	ldr	r3, [r5, #8]
   b5e2a:	b303      	cbz	r3, b5e6e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5e2c:	f105 0308 	add.w	r3, r5, #8
   b5e30:	ae01      	add	r6, sp, #4
   b5e32:	f105 0c18 	add.w	ip, r5, #24
   b5e36:	6818      	ldr	r0, [r3, #0]
   b5e38:	6859      	ldr	r1, [r3, #4]
   b5e3a:	4632      	mov	r2, r6
   b5e3c:	c203      	stmia	r2!, {r0, r1}
   b5e3e:	3308      	adds	r3, #8
   b5e40:	4563      	cmp	r3, ip
   b5e42:	4616      	mov	r6, r2
   b5e44:	d1f7      	bne.n	b5e36 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b5e46:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5e48:	a901      	add	r1, sp, #4
   b5e4a:	a806      	add	r0, sp, #24
   b5e4c:	ae07      	add	r6, sp, #28
            a.v = 6;
   b5e4e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5e52:	f002 f98d 	bl	b8170 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5e56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5e58:	3404      	adds	r4, #4
   b5e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e5c:	6833      	ldr	r3, [r6, #0]
   b5e5e:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b5e60:	b11f      	cbz	r7, b5e6a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b5e62:	8868      	ldrh	r0, [r5, #2]
   b5e64:	f7ff fb9e 	bl	b55a4 <inet_ntohs>
   b5e68:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b5e6a:	b00d      	add	sp, #52	; 0x34
   b5e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5e6e:	68eb      	ldr	r3, [r5, #12]
   b5e70:	2b00      	cmp	r3, #0
   b5e72:	d1db      	bne.n	b5e2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b5e74:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5e78:	692e      	ldr	r6, [r5, #16]
   b5e7a:	f7ff fb8b 	bl	b5594 <inet_htonl>
   b5e7e:	4286      	cmp	r6, r0
   b5e80:	d1d4      	bne.n	b5e2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b5e82:	f105 0114 	add.w	r1, r5, #20
   b5e86:	e7c4      	b.n	b5e12 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b5e88 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b5e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e8c:	4617      	mov	r7, r2
   b5e8e:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b5e90:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b5e92:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5e94:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b5e96:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5e98:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b5e9a:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5e9c:	f7ff fa50 	bl	b5340 <netdb_getaddrinfo>
   b5ea0:	1e04      	subs	r4, r0, #0
   b5ea2:	db20      	blt.n	b5ee6 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b5ea4:	9b01      	ldr	r3, [sp, #4]
   b5ea6:	b32b      	cbz	r3, b5ef4 <_ZN3UDP11beginPacketEPKct+0x6c>
   b5ea8:	695b      	ldr	r3, [r3, #20]
   b5eaa:	b31b      	cbz	r3, b5ef4 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b5eac:	a802      	add	r0, sp, #8
   b5eae:	f002 f951 	bl	b8154 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5eb2:	9b01      	ldr	r3, [sp, #4]
   b5eb4:	2200      	movs	r2, #0
   b5eb6:	6958      	ldr	r0, [r3, #20]
   b5eb8:	a902      	add	r1, sp, #8
   b5eba:	f7ff ffa1 	bl	b5e00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b5ebe:	a802      	add	r0, sp, #8
   b5ec0:	f002 f970 	bl	b81a4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5ec4:	b1b0      	cbz	r0, b5ef4 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b5ec6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5ec8:	ad03      	add	r5, sp, #12
   b5eca:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b5ece:	4b0b      	ldr	r3, [pc, #44]	; (b5efc <_ZN3UDP11beginPacketEPKct+0x74>)
   b5ed0:	9308      	str	r3, [sp, #32]
   b5ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ed4:	ac09      	add	r4, sp, #36	; 0x24
   b5ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ed8:	682b      	ldr	r3, [r5, #0]
   b5eda:	7023      	strb	r3, [r4, #0]
   b5edc:	463a      	mov	r2, r7
   b5ede:	a908      	add	r1, sp, #32
   b5ee0:	4630      	mov	r0, r6
   b5ee2:	47c0      	blx	r8
   b5ee4:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b5ee6:	9801      	ldr	r0, [sp, #4]
   b5ee8:	f7ff fa22 	bl	b5330 <netdb_freeaddrinfo>
}
   b5eec:	4620      	mov	r0, r4
   b5eee:	b00e      	add	sp, #56	; 0x38
   b5ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b5ef4:	f04f 34ff 	mov.w	r4, #4294967295
   b5ef8:	e7f5      	b.n	b5ee6 <_ZN3UDP11beginPacketEPKct+0x5e>
   b5efa:	bf00      	nop
   b5efc:	000bbe10 	.word	0x000bbe10

000b5f00 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b5f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b5f04:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b5f08:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b5f0c:	b090      	sub	sp, #64	; 0x40
   b5f0e:	4605      	mov	r5, r0
   b5f10:	460e      	mov	r6, r1
   b5f12:	4690      	mov	r8, r2
   b5f14:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b5f16:	db3c      	blt.n	b5f92 <_ZN3UDP13receivePacketEPhjm+0x92>
   b5f18:	2900      	cmp	r1, #0
   b5f1a:	d03a      	beq.n	b5f92 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b5f1c:	f04f 0a1c 	mov.w	sl, #28
   b5f20:	af09      	add	r7, sp, #36	; 0x24
   b5f22:	4652      	mov	r2, sl
   b5f24:	2100      	movs	r1, #0
   b5f26:	4638      	mov	r0, r7
   b5f28:	f003 fa9f 	bl	b946a <memset>
        socklen_t slen = sizeof(saddr);
   b5f2c:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b5f30:	b1dc      	cbz	r4, b5f6a <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b5f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f36:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b5f3a:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b5f3e:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b5f40:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b5f42:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b5f44:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b5f48:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b5f4a:	9300      	str	r3, [sp, #0]
   b5f4c:	f241 0206 	movw	r2, #4102	; 0x1006
   b5f50:	446b      	add	r3, sp
   b5f52:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5f56:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b5f58:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b5f5a:	f7ff fbb3 	bl	b56c4 <sock_setsockopt>
            if (ret) {
   b5f5e:	4604      	mov	r4, r0
   b5f60:	b120      	cbz	r0, b5f6c <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b5f62:	4620      	mov	r0, r4
   b5f64:	b010      	add	sp, #64	; 0x40
   b5f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b5f6a:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b5f6c:	ab03      	add	r3, sp, #12
   b5f6e:	e9cd 7300 	strd	r7, r3, [sp]
   b5f72:	6968      	ldr	r0, [r5, #20]
   b5f74:	4623      	mov	r3, r4
   b5f76:	4642      	mov	r2, r8
   b5f78:	4631      	mov	r1, r6
   b5f7a:	f7ff fbb3 	bl	b56e4 <sock_recvfrom>
        if (ret >= 0) {
   b5f7e:	1e04      	subs	r4, r0, #0
   b5f80:	dbef      	blt.n	b5f62 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b5f82:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b5f86:	f105 011c 	add.w	r1, r5, #28
   b5f8a:	4638      	mov	r0, r7
   b5f8c:	f7ff ff38 	bl	b5e00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b5f90:	e7e7      	b.n	b5f62 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b5f92:	f04f 34ff 	mov.w	r4, #4294967295
   b5f96:	e7e4      	b.n	b5f62 <_ZN3UDP13receivePacketEPhjm+0x62>

000b5f98 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b5f98:	b538      	push	{r3, r4, r5, lr}
   b5f9a:	4605      	mov	r5, r0
   b5f9c:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5f9e:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b5fa0:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b5fa2:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b5fa4:	d110      	bne.n	b5fc8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b5fa6:	f640 231c 	movw	r3, #2588	; 0xa1c
   b5faa:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b5fac:	f7ff fb02 	bl	b55b4 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b5fb0:	3408      	adds	r4, #8
   b5fb2:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b5fb4:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b5fb8:	3514      	adds	r5, #20
   b5fba:	f853 2b04 	ldr.w	r2, [r3], #4
   b5fbe:	f844 2b04 	str.w	r2, [r4], #4
   b5fc2:	42ab      	cmp	r3, r5
   b5fc4:	d1f9      	bne.n	b5fba <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b5fc6:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b5fc8:	2b04      	cmp	r3, #4
   b5fca:	d1fc      	bne.n	b5fc6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b5fcc:	f44f 7304 	mov.w	r3, #528	; 0x210
   b5fd0:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b5fd2:	f7ff faef 	bl	b55b4 <inet_htons>
   b5fd6:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b5fd8:	6868      	ldr	r0, [r5, #4]
   b5fda:	f7ff fadb 	bl	b5594 <inet_htonl>
   b5fde:	6060      	str	r0, [r4, #4]
}
   b5fe0:	e7f1      	b.n	b5fc6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b5fe2 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b5fe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5fe6:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b5fe8:	af03      	add	r7, sp, #12
   b5fea:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b5fee:	4698      	mov	r8, r3
   b5ff0:	4604      	mov	r4, r0
   b5ff2:	460d      	mov	r5, r1
   b5ff4:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b5ff6:	2100      	movs	r1, #0
   b5ff8:	464a      	mov	r2, r9
   b5ffa:	4638      	mov	r0, r7
   b5ffc:	f003 fa35 	bl	b946a <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b6000:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b6004:	463a      	mov	r2, r7
   b6006:	4640      	mov	r0, r8
   b6008:	f7ff ffc6 	bl	b5f98 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b600c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b6010:	b153      	cbz	r3, b6028 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b6012:	e9cd 7900 	strd	r7, r9, [sp]
   b6016:	6960      	ldr	r0, [r4, #20]
   b6018:	2300      	movs	r3, #0
   b601a:	4632      	mov	r2, r6
   b601c:	4629      	mov	r1, r5
   b601e:	f7ff fb69 	bl	b56f4 <sock_sendto>
}
   b6022:	b00b      	add	sp, #44	; 0x2c
   b6024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b6028:	f04f 30ff 	mov.w	r0, #4294967295
   b602c:	e7f9      	b.n	b6022 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b6030 <_ZN3UDPC1Ev>:
UDP::UDP()
   b6030:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6032:	2500      	movs	r5, #0
   b6034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6038:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b603c:	4b0b      	ldr	r3, [pc, #44]	; (b606c <_ZN3UDPC1Ev+0x3c>)
   b603e:	f103 0208 	add.w	r2, r3, #8
   b6042:	336c      	adds	r3, #108	; 0x6c
   b6044:	6103      	str	r3, [r0, #16]
   b6046:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b604a:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b604c:	6002      	str	r2, [r0, #0]
   b604e:	6143      	str	r3, [r0, #20]
   b6050:	301c      	adds	r0, #28
   b6052:	f002 f87f 	bl	b8154 <_ZN9IPAddressC1Ev>
   b6056:	f44f 7300 	mov.w	r3, #512	; 0x200
   b605a:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b605e:	86e5      	strh	r5, [r4, #54]	; 0x36
   b6060:	8725      	strh	r5, [r4, #56]	; 0x38
   b6062:	63e5      	str	r5, [r4, #60]	; 0x3c
   b6064:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b6068:	4620      	mov	r0, r4
   b606a:	bd38      	pop	{r3, r4, r5, pc}
   b606c:	000bbb7c 	.word	0x000bbb7c

000b6070 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b6070:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b6072:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b6076:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b6078:	b123      	cbz	r3, b6084 <_ZN3UDP13releaseBufferEv+0x14>
   b607a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b607c:	b110      	cbz	r0, b6084 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b607e:	2101      	movs	r1, #1
   b6080:	f7fe f80d 	bl	b409e <_ZdlPvj>
    _buffer = NULL;
   b6084:	2300      	movs	r3, #0
   b6086:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b6088:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b608c:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b608e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b6090:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b6092:	bd10      	pop	{r4, pc}

000b6094 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b6094:	b570      	push	{r4, r5, r6, lr}
   b6096:	4604      	mov	r4, r0
   b6098:	4616      	mov	r6, r2
   b609a:	460d      	mov	r5, r1
    releaseBuffer();
   b609c:	f7ff ffe8 	bl	b6070 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b60a0:	2300      	movs	r3, #0
    _buffer = buffer;
   b60a2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b60a4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b60a6:	b12e      	cbz	r6, b60b4 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b60a8:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b60aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b60ac:	3800      	subs	r0, #0
   b60ae:	bf18      	it	ne
   b60b0:	2001      	movne	r0, #1
   b60b2:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b60b4:	2d00      	cmp	r5, #0
   b60b6:	d0f8      	beq.n	b60aa <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b60b8:	4628      	mov	r0, r5
   b60ba:	f7fd ffee 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b60be:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b60c0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b60c2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b60c6:	2800      	cmp	r0, #0
   b60c8:	d0ef      	beq.n	b60aa <_ZN3UDP9setBufferEjPh+0x16>
   b60ca:	e7ed      	b.n	b60a8 <_ZN3UDP9setBufferEjPh+0x14>

000b60cc <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b60cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60ce:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b60d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b60d2:	4605      	mov	r5, r0
   b60d4:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b60d6:	b91a      	cbnz	r2, b60e0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b60d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b60da:	b109      	cbz	r1, b60e0 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b60dc:	f7ff ffda 	bl	b6094 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b60e0:	3404      	adds	r4, #4
   b60e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b60e4:	f105 0620 	add.w	r6, r5, #32
   b60e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b60ea:	6823      	ldr	r3, [r4, #0]
   b60ec:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b60ee:	2300      	movs	r3, #0
}
   b60f0:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b60f2:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b60f4:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b60f6:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b60f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b60fa <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b60fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b60fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b60fe:	4604      	mov	r4, r0
   b6100:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b6102:	b92a      	cbnz	r2, b6110 <_ZN3UDP11parsePacketEm+0x16>
   b6104:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b6106:	b119      	cbz	r1, b6110 <_ZN3UDP11parsePacketEm+0x16>
   b6108:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b610a:	f7ff ffc3 	bl	b6094 <_ZN3UDP9setBufferEjPh>
   b610e:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b6110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b6112:	2200      	movs	r2, #0
   b6114:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b6116:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b6118:	b141      	cbz	r1, b612c <_ZN3UDP11parsePacketEm+0x32>
   b611a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b611c:	b132      	cbz	r2, b612c <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b611e:	6820      	ldr	r0, [r4, #0]
   b6120:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b6122:	4620      	mov	r0, r4
   b6124:	47a8      	blx	r5
        if (result > 0) {
   b6126:	2800      	cmp	r0, #0
            _total = result;
   b6128:	bfc8      	it	gt
   b612a:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b612c:	6823      	ldr	r3, [r4, #0]
   b612e:	691b      	ldr	r3, [r3, #16]
   b6130:	4620      	mov	r0, r4
}
   b6132:	b003      	add	sp, #12
   b6134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b6138:	4718      	bx	r3
	...

000b613c <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b613c:	b510      	push	{r4, lr}
   b613e:	4b07      	ldr	r3, [pc, #28]	; (b615c <_ZN3UDPD1Ev+0x20>)
   b6140:	f103 0208 	add.w	r2, r3, #8
   b6144:	336c      	adds	r3, #108	; 0x6c
   b6146:	4604      	mov	r4, r0
   b6148:	6002      	str	r2, [r0, #0]
   b614a:	6103      	str	r3, [r0, #16]
   b614c:	f7ff fddc 	bl	b5d08 <_ZN3UDP4stopEv>
   b6150:	4620      	mov	r0, r4
   b6152:	f7ff ff8d 	bl	b6070 <_ZN3UDP13releaseBufferEv>
   b6156:	4620      	mov	r0, r4
   b6158:	bd10      	pop	{r4, pc}
   b615a:	bf00      	nop
   b615c:	000bbb7c 	.word	0x000bbb7c

000b6160 <_ZN3UDPD0Ev>:
   b6160:	b510      	push	{r4, lr}
   b6162:	4604      	mov	r4, r0
   b6164:	f7ff ffea 	bl	b613c <_ZN3UDPD1Ev>
   b6168:	4620      	mov	r0, r4
   b616a:	214c      	movs	r1, #76	; 0x4c
   b616c:	f7fd ff97 	bl	b409e <_ZdlPvj>
   b6170:	4620      	mov	r0, r4
   b6172:	bd10      	pop	{r4, pc}

000b6174 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6174:	b510      	push	{r4, lr}
   b6176:	4604      	mov	r4, r0
{
	free(buffer);
   b6178:	6800      	ldr	r0, [r0, #0]
   b617a:	f7ff fbff 	bl	b597c <free>
}
   b617e:	4620      	mov	r0, r4
   b6180:	bd10      	pop	{r4, pc}

000b6182 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6182:	b510      	push	{r4, lr}
   b6184:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6186:	6800      	ldr	r0, [r0, #0]
   b6188:	b108      	cbz	r0, b618e <_ZN6String10invalidateEv+0xc>
   b618a:	f7ff fbf7 	bl	b597c <free>
	buffer = NULL;
   b618e:	2300      	movs	r3, #0
	capacity = len = 0;
   b6190:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6194:	6023      	str	r3, [r4, #0]
}
   b6196:	bd10      	pop	{r4, pc}

000b6198 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6198:	b538      	push	{r3, r4, r5, lr}
   b619a:	4604      	mov	r4, r0
   b619c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b619e:	6800      	ldr	r0, [r0, #0]
   b61a0:	3101      	adds	r1, #1
   b61a2:	f7ff fbf3 	bl	b598c <realloc>
	if (newbuffer) {
   b61a6:	b110      	cbz	r0, b61ae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b61a8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b61ac:	2001      	movs	r0, #1
	}
	return 0;
}
   b61ae:	bd38      	pop	{r3, r4, r5, pc}

000b61b0 <_ZN6String7reserveEj>:
{
   b61b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b61b2:	6803      	ldr	r3, [r0, #0]
{
   b61b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b61b6:	b123      	cbz	r3, b61c2 <_ZN6String7reserveEj+0x12>
   b61b8:	6843      	ldr	r3, [r0, #4]
   b61ba:	428b      	cmp	r3, r1
   b61bc:	d301      	bcc.n	b61c2 <_ZN6String7reserveEj+0x12>
   b61be:	2001      	movs	r0, #1
}
   b61c0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b61c2:	4620      	mov	r0, r4
   b61c4:	f7ff ffe8 	bl	b6198 <_ZN6String12changeBufferEj>
   b61c8:	2800      	cmp	r0, #0
   b61ca:	d0f9      	beq.n	b61c0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b61cc:	68a3      	ldr	r3, [r4, #8]
   b61ce:	2b00      	cmp	r3, #0
   b61d0:	d1f5      	bne.n	b61be <_ZN6String7reserveEj+0xe>
   b61d2:	6822      	ldr	r2, [r4, #0]
   b61d4:	7013      	strb	r3, [r2, #0]
   b61d6:	e7f2      	b.n	b61be <_ZN6String7reserveEj+0xe>

000b61d8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b61d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b61da:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b61dc:	4611      	mov	r1, r2
   b61de:	9201      	str	r2, [sp, #4]
{
   b61e0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b61e2:	f7ff ffe5 	bl	b61b0 <_ZN6String7reserveEj>
   b61e6:	9a01      	ldr	r2, [sp, #4]
   b61e8:	b928      	cbnz	r0, b61f6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b61ea:	4620      	mov	r0, r4
   b61ec:	f7ff ffc9 	bl	b6182 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b61f0:	4620      	mov	r0, r4
   b61f2:	b003      	add	sp, #12
   b61f4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b61f6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b61f8:	4629      	mov	r1, r5
   b61fa:	6820      	ldr	r0, [r4, #0]
   b61fc:	f003 f90d 	bl	b941a <memcpy>
	buffer[len] = 0;
   b6200:	6822      	ldr	r2, [r4, #0]
   b6202:	68a3      	ldr	r3, [r4, #8]
   b6204:	2100      	movs	r1, #0
   b6206:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6208:	e7f2      	b.n	b61f0 <_ZN6String4copyEPKcj+0x18>

000b620a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b620a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b620c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b620e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6212:	4604      	mov	r4, r0
	len = 0;
   b6214:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6216:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6218:	b141      	cbz	r1, b622c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b621a:	4608      	mov	r0, r1
   b621c:	9101      	str	r1, [sp, #4]
   b621e:	f003 f99a 	bl	b9556 <strlen>
   b6222:	9901      	ldr	r1, [sp, #4]
   b6224:	4602      	mov	r2, r0
   b6226:	4620      	mov	r0, r4
   b6228:	f7ff ffd6 	bl	b61d8 <_ZN6String4copyEPKcj>
}
   b622c:	4620      	mov	r0, r4
   b622e:	b002      	add	sp, #8
   b6230:	bd10      	pop	{r4, pc}

000b6232 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6232:	b538      	push	{r3, r4, r5, lr}
   b6234:	4605      	mov	r5, r0
	if (buffer) {
   b6236:	6800      	ldr	r0, [r0, #0]
{
   b6238:	460c      	mov	r4, r1
	if (buffer) {
   b623a:	b168      	cbz	r0, b6258 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b623c:	686a      	ldr	r2, [r5, #4]
   b623e:	688b      	ldr	r3, [r1, #8]
   b6240:	429a      	cmp	r2, r3
   b6242:	d307      	bcc.n	b6254 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6244:	6809      	ldr	r1, [r1, #0]
   b6246:	f003 f960 	bl	b950a <strcpy>
			len = rhs.len;
   b624a:	68a3      	ldr	r3, [r4, #8]
   b624c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b624e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6250:	60a3      	str	r3, [r4, #8]
}
   b6252:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6254:	f7ff fb92 	bl	b597c <free>
	buffer = rhs.buffer;
   b6258:	6823      	ldr	r3, [r4, #0]
   b625a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b625c:	6863      	ldr	r3, [r4, #4]
   b625e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6260:	68a3      	ldr	r3, [r4, #8]
   b6262:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6264:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6266:	e9c4 3300 	strd	r3, r3, [r4]
   b626a:	e7f1      	b.n	b6250 <_ZN6String4moveERS_+0x1e>

000b626c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b626c:	4288      	cmp	r0, r1
{
   b626e:	b510      	push	{r4, lr}
   b6270:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b6272:	d001      	beq.n	b6278 <_ZN6StringaSEOS_+0xc>
   b6274:	f7ff ffdd 	bl	b6232 <_ZN6String4moveERS_>
	return *this;
}
   b6278:	4620      	mov	r0, r4
   b627a:	bd10      	pop	{r4, pc}

000b627c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b627c:	b513      	push	{r0, r1, r4, lr}
   b627e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6280:	b159      	cbz	r1, b629a <_ZN6StringaSEPKc+0x1e>
   b6282:	4608      	mov	r0, r1
   b6284:	9101      	str	r1, [sp, #4]
   b6286:	f003 f966 	bl	b9556 <strlen>
   b628a:	9901      	ldr	r1, [sp, #4]
   b628c:	4602      	mov	r2, r0
   b628e:	4620      	mov	r0, r4
   b6290:	f7ff ffa2 	bl	b61d8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6294:	4620      	mov	r0, r4
   b6296:	b002      	add	sp, #8
   b6298:	bd10      	pop	{r4, pc}
	else invalidate();
   b629a:	f7ff ff72 	bl	b6182 <_ZN6String10invalidateEv>
   b629e:	e7f9      	b.n	b6294 <_ZN6StringaSEPKc+0x18>

000b62a0 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b62a0:	b510      	push	{r4, lr}
   b62a2:	4604      	mov	r4, r0
   b62a4:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b62a6:	2300      	movs	r3, #0
	capacity = 0;
   b62a8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b62ac:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b62ae:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b62b0:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b62b2:	a901      	add	r1, sp, #4
   b62b4:	f7ff fc5c 	bl	b5b70 <itoa>
	*this = buf;
   b62b8:	a901      	add	r1, sp, #4
   b62ba:	4620      	mov	r0, r4
   b62bc:	f7ff ffde 	bl	b627c <_ZN6StringaSEPKc>
}
   b62c0:	4620      	mov	r0, r4
   b62c2:	b00a      	add	sp, #40	; 0x28
   b62c4:	bd10      	pop	{r4, pc}

000b62c6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b62c6:	b570      	push	{r4, r5, r6, lr}
   b62c8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b62ca:	460e      	mov	r6, r1
   b62cc:	b909      	cbnz	r1, b62d2 <_ZN6String6concatEPKcj+0xc>
   b62ce:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b62d0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b62d2:	b16a      	cbz	r2, b62f0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b62d4:	6884      	ldr	r4, [r0, #8]
   b62d6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b62d8:	4621      	mov	r1, r4
   b62da:	f7ff ff69 	bl	b61b0 <_ZN6String7reserveEj>
   b62de:	2800      	cmp	r0, #0
   b62e0:	d0f5      	beq.n	b62ce <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b62e2:	6828      	ldr	r0, [r5, #0]
   b62e4:	68ab      	ldr	r3, [r5, #8]
   b62e6:	4631      	mov	r1, r6
   b62e8:	4418      	add	r0, r3
   b62ea:	f003 f90e 	bl	b950a <strcpy>
	len = newlen;
   b62ee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b62f0:	2001      	movs	r0, #1
   b62f2:	e7ed      	b.n	b62d0 <_ZN6String6concatEPKcj+0xa>

000b62f4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b62f4:	688a      	ldr	r2, [r1, #8]
   b62f6:	6809      	ldr	r1, [r1, #0]
   b62f8:	f7ff bfe5 	b.w	b62c6 <_ZN6String6concatEPKcj>

000b62fc <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b62fc:	b513      	push	{r0, r1, r4, lr}
   b62fe:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b6300:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6302:	b151      	cbz	r1, b631a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6304:	9101      	str	r1, [sp, #4]
   b6306:	f003 f926 	bl	b9556 <strlen>
   b630a:	9901      	ldr	r1, [sp, #4]
   b630c:	4602      	mov	r2, r0
   b630e:	4620      	mov	r0, r4
}
   b6310:	b002      	add	sp, #8
   b6312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6316:	f7ff bfd6 	b.w	b62c6 <_ZN6String6concatEPKcj>
}
   b631a:	b002      	add	sp, #8
   b631c:	bd10      	pop	{r4, pc}
	...

000b6320 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6320:	b40e      	push	{r1, r2, r3}
   b6322:	b570      	push	{r4, r5, r6, lr}
   b6324:	b087      	sub	sp, #28
   b6326:	ad0b      	add	r5, sp, #44	; 0x2c
   b6328:	4604      	mov	r4, r0
   b632a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b632e:	9201      	str	r2, [sp, #4]
   b6330:	462b      	mov	r3, r5
   b6332:	2105      	movs	r1, #5
   b6334:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6336:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6338:	f7ff fb40 	bl	b59bc <vsnprintf>
    va_end(marker);

    String result;
   b633c:	490b      	ldr	r1, [pc, #44]	; (b636c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b633e:	4606      	mov	r6, r0
    String result;
   b6340:	4620      	mov	r0, r4
   b6342:	f7ff ff62 	bl	b620a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b6346:	4631      	mov	r1, r6
   b6348:	4620      	mov	r0, r4
   b634a:	f7ff ff31 	bl	b61b0 <_ZN6String7reserveEj>
    if (result.buffer) {
   b634e:	6820      	ldr	r0, [r4, #0]
   b6350:	b130      	cbz	r0, b6360 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6352:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b6354:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6356:	462b      	mov	r3, r5
   b6358:	1c71      	adds	r1, r6, #1
   b635a:	f7ff fb2f 	bl	b59bc <vsnprintf>
        va_end(marker);
        result.len = n;
   b635e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6360:	4620      	mov	r0, r4
   b6362:	b007      	add	sp, #28
   b6364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6368:	b003      	add	sp, #12
   b636a:	4770      	bx	lr
   b636c:	000bb9a9 	.word	0x000bb9a9

000b6370 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6370:	4770      	bx	lr

000b6372 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6372:	4770      	bx	lr

000b6374 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6374:	4770      	bx	lr

000b6376 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6376:	4770      	bx	lr

000b6378 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6378:	4b06      	ldr	r3, [pc, #24]	; (b6394 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b637a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b637c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b637e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6382:	d005      	beq.n	b6390 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6384:	4608      	mov	r0, r1
   b6386:	f002 fa51 	bl	b882c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b638a:	2800      	cmp	r0, #0
   b638c:	bf08      	it	eq
   b638e:	2400      	moveq	r4, #0
      }
   b6390:	4620      	mov	r0, r4
   b6392:	bd10      	pop	{r4, pc}
   b6394:	000bbd8c 	.word	0x000bbd8c

000b6398 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6398:	4b06      	ldr	r3, [pc, #24]	; (b63b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b639a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b639c:	b510      	push	{r4, lr}
   b639e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b63a2:	d005      	beq.n	b63b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b63a4:	4608      	mov	r0, r1
   b63a6:	f002 fa41 	bl	b882c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b63aa:	2800      	cmp	r0, #0
   b63ac:	bf08      	it	eq
   b63ae:	2400      	moveq	r4, #0
      }
   b63b0:	4620      	mov	r0, r4
   b63b2:	bd10      	pop	{r4, pc}
   b63b4:	000bbd8c 	.word	0x000bbd8c

000b63b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b63b8:	4b06      	ldr	r3, [pc, #24]	; (b63d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b63ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b63bc:	b510      	push	{r4, lr}
   b63be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b63c2:	d005      	beq.n	b63d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b63c4:	4608      	mov	r0, r1
   b63c6:	f002 fa31 	bl	b882c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b63ca:	2800      	cmp	r0, #0
   b63cc:	bf08      	it	eq
   b63ce:	2400      	moveq	r4, #0
      }
   b63d0:	4620      	mov	r0, r4
   b63d2:	bd10      	pop	{r4, pc}
   b63d4:	000bbd8c 	.word	0x000bbd8c

000b63d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b63d8:	b510      	push	{r4, lr}
   b63da:	2168      	movs	r1, #104	; 0x68
   b63dc:	4604      	mov	r4, r0
   b63de:	f7fd fe5e 	bl	b409e <_ZdlPvj>
   b63e2:	4620      	mov	r0, r4
   b63e4:	bd10      	pop	{r4, pc}

000b63e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b63e6:	b510      	push	{r4, lr}
   b63e8:	2128      	movs	r1, #40	; 0x28
   b63ea:	4604      	mov	r4, r0
   b63ec:	f7fd fe57 	bl	b409e <_ZdlPvj>
   b63f0:	4620      	mov	r0, r4
   b63f2:	bd10      	pop	{r4, pc}

000b63f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b63f4:	b510      	push	{r4, lr}
   b63f6:	2130      	movs	r1, #48	; 0x30
   b63f8:	4604      	mov	r4, r0
   b63fa:	f7fd fe50 	bl	b409e <_ZdlPvj>
   b63fe:	4620      	mov	r0, r4
   b6400:	bd10      	pop	{r4, pc}

000b6402 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6402:	2168      	movs	r1, #104	; 0x68
   b6404:	f7fd be4b 	b.w	b409e <_ZdlPvj>

000b6408 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6408:	2128      	movs	r1, #40	; 0x28
   b640a:	f7fd be48 	b.w	b409e <_ZdlPvj>

000b640e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b640e:	2130      	movs	r1, #48	; 0x30
   b6410:	f7fd be45 	b.w	b409e <_ZdlPvj>

000b6414 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6414:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6416:	2500      	movs	r5, #0
   b6418:	1cec      	adds	r4, r5, #3
   b641a:	428c      	cmp	r4, r1
   b641c:	d80d      	bhi.n	b643a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b641e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6420:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6422:	5d87      	ldrb	r7, [r0, r6]
   b6424:	4297      	cmp	r7, r2
   b6426:	d105      	bne.n	b6434 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6428:	4426      	add	r6, r4
   b642a:	42b1      	cmp	r1, r6
   b642c:	d305      	bcc.n	b643a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b642e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6430:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6432:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6434:	3401      	adds	r4, #1
   b6436:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6438:	e7ee      	b.n	b6418 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b643a:	2000      	movs	r0, #0
   b643c:	e7f9      	b.n	b6432 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6440 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6440:	4a02      	ldr	r2, [pc, #8]	; (b644c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6442:	4903      	ldr	r1, [pc, #12]	; (b6450 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6444:	200a      	movs	r0, #10
   b6446:	f7ff b9a5 	b.w	b5794 <panic_>
   b644a:	bf00      	nop
   b644c:	000b53a1 	.word	0x000b53a1
   b6450:	000bbbec 	.word	0x000bbbec

000b6454 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6454:	4603      	mov	r3, r0
   b6456:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	e9d3 2100 	ldrd	r2, r1, [r3]
   b645e:	4710      	bx	r2

000b6460 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6460:	b430      	push	{r4, r5}
   b6462:	460d      	mov	r5, r1
   b6464:	4611      	mov	r1, r2
   b6466:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6468:	6803      	ldr	r3, [r0, #0]
   b646a:	6809      	ldr	r1, [r1, #0]
   b646c:	6828      	ldr	r0, [r5, #0]
   b646e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6472:	46a4      	mov	ip, r4
      }
   b6474:	bc30      	pop	{r4, r5}
   b6476:	4760      	bx	ip

000b6478 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6478:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b647a:	b538      	push	{r3, r4, r5, lr}
   b647c:	4604      	mov	r4, r0
	switch (__op)
   b647e:	d102      	bne.n	b6486 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6480:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6482:	6023      	str	r3, [r4, #0]
	}
   b6484:	e003      	b.n	b648e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6486:	2a02      	cmp	r2, #2
   b6488:	d003      	beq.n	b6492 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b648a:	2a03      	cmp	r2, #3
   b648c:	d00d      	beq.n	b64aa <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b648e:	2000      	movs	r0, #0
   b6490:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6492:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6494:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6496:	f7fd fdfe 	bl	b4096 <_Znwj>
   b649a:	4603      	mov	r3, r0
   b649c:	2800      	cmp	r0, #0
   b649e:	d0f0      	beq.n	b6482 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b64a0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b64a4:	e883 0003 	stmia.w	r3, {r0, r1}
   b64a8:	e7eb      	b.n	b6482 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b64aa:	6800      	ldr	r0, [r0, #0]
   b64ac:	2800      	cmp	r0, #0
   b64ae:	d0ee      	beq.n	b648e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b64b0:	2108      	movs	r1, #8
   b64b2:	f7fd fdf4 	bl	b409e <_ZdlPvj>
   b64b6:	e7ea      	b.n	b648e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b64b8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b64b8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b64ba:	b538      	push	{r3, r4, r5, lr}
   b64bc:	4604      	mov	r4, r0
	switch (__op)
   b64be:	d102      	bne.n	b64c6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b64c0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b64c2:	6023      	str	r3, [r4, #0]
	}
   b64c4:	e003      	b.n	b64ce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b64c6:	2a02      	cmp	r2, #2
   b64c8:	d003      	beq.n	b64d2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b64ca:	2a03      	cmp	r2, #3
   b64cc:	d00d      	beq.n	b64ea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b64ce:	2000      	movs	r0, #0
   b64d0:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b64d2:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b64d4:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b64d6:	f7fd fdde 	bl	b4096 <_Znwj>
   b64da:	4603      	mov	r3, r0
   b64dc:	2800      	cmp	r0, #0
   b64de:	d0f0      	beq.n	b64c2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b64e0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b64e4:	e883 0003 	stmia.w	r3, {r0, r1}
   b64e8:	e7eb      	b.n	b64c2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b64ea:	6800      	ldr	r0, [r0, #0]
   b64ec:	2800      	cmp	r0, #0
   b64ee:	d0ee      	beq.n	b64ce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b64f0:	2108      	movs	r1, #8
   b64f2:	f7fd fdd4 	bl	b409e <_ZdlPvj>
   b64f6:	e7ea      	b.n	b64ce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b64f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b64f8:	b510      	push	{r4, lr}
   b64fa:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b64fc:	3058      	adds	r0, #88	; 0x58
   b64fe:	f7fd ff6f 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6502:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b650a:	f7ff be33 	b.w	b6174 <_ZN6StringD1Ev>

000b650e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b650e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6512:	b2da      	uxtb	r2, r3
   b6514:	2a09      	cmp	r2, #9
   b6516:	d801      	bhi.n	b651c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6518:	4618      	mov	r0, r3
   b651a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b651c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6520:	2b05      	cmp	r3, #5
   b6522:	d801      	bhi.n	b6528 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6524:	3857      	subs	r0, #87	; 0x57
   b6526:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6528:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b652c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b652e:	bf94      	ite	ls
   b6530:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6532:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b6536:	4770      	bx	lr

000b6538 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6538:	b510      	push	{r4, lr}
            locked_(false) {
   b653a:	2300      	movs	r3, #0
   b653c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b653e:	4b04      	ldr	r3, [pc, #16]	; (b6550 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6540:	4604      	mov	r4, r0
   b6542:	6818      	ldr	r0, [r3, #0]
   b6544:	f7ff f806 	bl	b5554 <os_mutex_recursive_lock>
        locked_ = true;
   b6548:	2301      	movs	r3, #1
   b654a:	7023      	strb	r3, [r4, #0]
    }
   b654c:	4620      	mov	r0, r4
   b654e:	bd10      	pop	{r4, pc}
   b6550:	2003e694 	.word	0x2003e694

000b6554 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6554:	b510      	push	{r4, lr}
        if (locked_) {
   b6556:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6558:	4604      	mov	r4, r0
        if (locked_) {
   b655a:	b11b      	cbz	r3, b6564 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b655c:	4b02      	ldr	r3, [pc, #8]	; (b6568 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b655e:	6818      	ldr	r0, [r3, #0]
   b6560:	f7ff f800 	bl	b5564 <os_mutex_recursive_unlock>
    }
   b6564:	4620      	mov	r0, r4
   b6566:	bd10      	pop	{r4, pc}
   b6568:	2003e694 	.word	0x2003e694

000b656c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b656c:	b082      	sub	sp, #8
   b656e:	4603      	mov	r3, r0
    address_ = addr;
   b6570:	6808      	ldr	r0, [r1, #0]
   b6572:	6849      	ldr	r1, [r1, #4]
   b6574:	466a      	mov	r2, sp
   b6576:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6578:	466a      	mov	r2, sp
   b657a:	ca03      	ldmia	r2!, {r0, r1}
   b657c:	6018      	str	r0, [r3, #0]
}
   b657e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6580:	6059      	str	r1, [r3, #4]
}
   b6582:	b002      	add	sp, #8
   b6584:	4770      	bx	lr

000b6586 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6586:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6588:	7982      	ldrb	r2, [r0, #6]
   b658a:	798b      	ldrb	r3, [r1, #6]
   b658c:	429a      	cmp	r2, r3
   b658e:	d106      	bne.n	b659e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6590:	2206      	movs	r2, #6
   b6592:	f002 ff32 	bl	b93fa <memcmp>
   b6596:	fab0 f080 	clz	r0, r0
   b659a:	0940      	lsrs	r0, r0, #5
}
   b659c:	bd08      	pop	{r3, pc}
    return false;
   b659e:	2000      	movs	r0, #0
   b65a0:	e7fc      	b.n	b659c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b65a2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b65a2:	f04f 33ff 	mov.w	r3, #4294967295
   b65a6:	6003      	str	r3, [r0, #0]
   b65a8:	8083      	strh	r3, [r0, #4]
}
   b65aa:	2000      	movs	r0, #0
   b65ac:	4770      	bx	lr

000b65ae <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b65ae:	b508      	push	{r3, lr}
   b65b0:	4602      	mov	r2, r0
        : address_{} {
   b65b2:	2100      	movs	r1, #0
   b65b4:	6001      	str	r1, [r0, #0]
   b65b6:	6041      	str	r1, [r0, #4]
    clear();
   b65b8:	f7ff fff3 	bl	b65a2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b65bc:	7191      	strb	r1, [r2, #6]
}
   b65be:	4610      	mov	r0, r2
   b65c0:	bd08      	pop	{r3, pc}
	...

000b65c4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b65c4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b65c6:	2301      	movs	r3, #1
   b65c8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b65ca:	4b05      	ldr	r3, [pc, #20]	; (b65e0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b65cc:	4602      	mov	r2, r0
   b65ce:	f103 0110 	add.w	r1, r3, #16
   b65d2:	f853 4b04 	ldr.w	r4, [r3], #4
   b65d6:	f842 4b04 	str.w	r4, [r2], #4
   b65da:	428b      	cmp	r3, r1
   b65dc:	d1f9      	bne.n	b65d2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b65de:	bd10      	pop	{r4, pc}
   b65e0:	000bbd9a 	.word	0x000bbd9a

000b65e4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b65e4:	b510      	push	{r4, lr}
    if (uuid128) {
   b65e6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b65e8:	4604      	mov	r4, r0
    if (uuid128) {
   b65ea:	b1b1      	cbz	r1, b661a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b65ec:	2a01      	cmp	r2, #1
   b65ee:	f101 0210 	add.w	r2, r1, #16
   b65f2:	d10a      	bne.n	b660a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b65f4:	4601      	mov	r1, r0
   b65f6:	f853 0b04 	ldr.w	r0, [r3], #4
   b65fa:	f841 0b04 	str.w	r0, [r1], #4
   b65fe:	4293      	cmp	r3, r2
   b6600:	d1f9      	bne.n	b65f6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6602:	2301      	movs	r3, #1
   b6604:	6123      	str	r3, [r4, #16]
}
   b6606:	4620      	mov	r0, r4
   b6608:	bd10      	pop	{r4, pc}
   b660a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b660c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6610:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6614:	429a      	cmp	r2, r3
   b6616:	d1f9      	bne.n	b660c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6618:	e7f3      	b.n	b6602 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b661a:	2210      	movs	r2, #16
   b661c:	f002 ff25 	bl	b946a <memset>
   b6620:	e7f1      	b.n	b6606 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6622 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6622:	b538      	push	{r3, r4, r5, lr}
   b6624:	4604      	mov	r4, r0
   b6626:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6628:	461a      	mov	r2, r3
   b662a:	f7ff ffdb 	bl	b65e4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b662e:	81a5      	strh	r5, [r4, #12]
}
   b6630:	4620      	mov	r0, r4
   b6632:	bd38      	pop	{r3, r4, r5, pc}

000b6634 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6634:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6636:	6902      	ldr	r2, [r0, #16]
   b6638:	b922      	cbnz	r2, b6644 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b663a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b663c:	3800      	subs	r0, #0
   b663e:	bf18      	it	ne
   b6640:	2001      	movne	r0, #1
}
   b6642:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6644:	4902      	ldr	r1, [pc, #8]	; (b6650 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6646:	2210      	movs	r2, #16
   b6648:	f002 fed7 	bl	b93fa <memcmp>
   b664c:	e7f6      	b.n	b663c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b664e:	bf00      	nop
   b6650:	000bbdba 	.word	0x000bbdba

000b6654 <_ZNK8particle7BleUuid4typeEv>:
}
   b6654:	6900      	ldr	r0, [r0, #16]
   b6656:	4770      	bx	lr

000b6658 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6658:	b538      	push	{r3, r4, r5, lr}
   b665a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b665c:	2214      	movs	r2, #20
   b665e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6660:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6662:	f002 ff02 	bl	b946a <memset>
    if (type_ == BleUuidType::SHORT) {
   b6666:	6923      	ldr	r3, [r4, #16]
   b6668:	b91b      	cbnz	r3, b6672 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b666a:	89a3      	ldrh	r3, [r4, #12]
   b666c:	802b      	strh	r3, [r5, #0]
}
   b666e:	4628      	mov	r0, r5
   b6670:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6672:	2301      	movs	r3, #1
   b6674:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6676:	4621      	mov	r1, r4
   b6678:	462b      	mov	r3, r5
   b667a:	f104 0210 	add.w	r2, r4, #16
   b667e:	f851 0b04 	ldr.w	r0, [r1], #4
   b6682:	f843 0b04 	str.w	r0, [r3], #4
   b6686:	4291      	cmp	r1, r2
   b6688:	d1f9      	bne.n	b667e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b668a:	e7f0      	b.n	b666e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b668c <_ZNK8particle7BleUuid7shortedEv>:
}
   b668c:	8980      	ldrh	r0, [r0, #12]
   b668e:	4770      	bx	lr

000b6690 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6690:	4770      	bx	lr

000b6692 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6692:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6694:	6902      	ldr	r2, [r0, #16]
   b6696:	690b      	ldr	r3, [r1, #16]
   b6698:	429a      	cmp	r2, r3
   b669a:	d106      	bne.n	b66aa <_ZNK8particle7BleUuideqERKS0_+0x18>
   b669c:	2210      	movs	r2, #16
   b669e:	f002 feac 	bl	b93fa <memcmp>
   b66a2:	fab0 f080 	clz	r0, r0
   b66a6:	0940      	lsrs	r0, r0, #5
}
   b66a8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b66aa:	2000      	movs	r0, #0
   b66ac:	e7fc      	b.n	b66a8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b66b0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b66b0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b66b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b66b6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b66b8:	4b34      	ldr	r3, [pc, #208]	; (b678c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b66ba:	460c      	mov	r4, r1
   b66bc:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b66be:	4602      	mov	r2, r0
   b66c0:	f103 0110 	add.w	r1, r3, #16
   b66c4:	f853 0b04 	ldr.w	r0, [r3], #4
   b66c8:	f842 0b04 	str.w	r0, [r2], #4
   b66cc:	428b      	cmp	r3, r1
   b66ce:	d1f9      	bne.n	b66c4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b66d0:	b344      	cbz	r4, b6724 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b66d2:	2124      	movs	r1, #36	; 0x24
   b66d4:	4620      	mov	r0, r4
   b66d6:	f002 ff5a 	bl	b958e <strnlen>
   b66da:	2804      	cmp	r0, #4
   b66dc:	f04f 0500 	mov.w	r5, #0
   b66e0:	d123      	bne.n	b672a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b66e2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b66e6:	af01      	add	r7, sp, #4
   b66e8:	1ca5      	adds	r5, r4, #2
   b66ea:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b66ec:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b66f0:	f7ff ff0d 	bl	b650e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b66f4:	f1b0 0800 	subs.w	r8, r0, #0
   b66f8:	db12      	blt.n	b6720 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b66fa:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b66fe:	f7ff ff06 	bl	b650e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6702:	2800      	cmp	r0, #0
   b6704:	db0c      	blt.n	b6720 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6706:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6708:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b670c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b670e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6712:	d1eb      	bne.n	b66ec <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6714:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6718:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b671a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b671e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6720:	2300      	movs	r3, #0
   b6722:	6133      	str	r3, [r6, #16]
}
   b6724:	b002      	add	sp, #8
   b6726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b672a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b672e:	2124      	movs	r1, #36	; 0x24
   b6730:	4620      	mov	r0, r4
   b6732:	f002 ff2c 	bl	b958e <strnlen>
   b6736:	42a8      	cmp	r0, r5
   b6738:	d807      	bhi.n	b674a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b673a:	4642      	mov	r2, r8
   b673c:	2100      	movs	r1, #0
   b673e:	4630      	mov	r0, r6
}
   b6740:	b002      	add	sp, #8
   b6742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6746:	f002 be90 	b.w	b946a <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b674a:	f1b8 0f00 	cmp.w	r8, #0
   b674e:	d0e9      	beq.n	b6724 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6750:	5d60      	ldrb	r0, [r4, r5]
   b6752:	f7ff fedc 	bl	b650e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6756:	0603      	lsls	r3, r0, #24
   b6758:	d415      	bmi.n	b6786 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b675a:	0100      	lsls	r0, r0, #4
   b675c:	f108 38ff 	add.w	r8, r8, #4294967295
   b6760:	b2c7      	uxtb	r7, r0
   b6762:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6766:	2124      	movs	r1, #36	; 0x24
   b6768:	4620      	mov	r0, r4
   b676a:	f002 ff10 	bl	b958e <strnlen>
   b676e:	3501      	adds	r5, #1
   b6770:	42a8      	cmp	r0, r5
   b6772:	d908      	bls.n	b6786 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6774:	5d60      	ldrb	r0, [r4, r5]
   b6776:	f7ff feca 	bl	b650e <_ZN8particle11hexToNibbleEc>
   b677a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b677c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b677e:	bfa4      	itt	ge
   b6780:	4338      	orrge	r0, r7
   b6782:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6786:	3501      	adds	r5, #1
   b6788:	e7d1      	b.n	b672e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b678a:	bf00      	nop
   b678c:	000bbd9a 	.word	0x000bbd9a

000b6790 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6790:	b513      	push	{r0, r1, r4, lr}
   b6792:	4604      	mov	r4, r0
   b6794:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6796:	f7ff ff15 	bl	b65c4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b679a:	4620      	mov	r0, r4
   b679c:	9901      	ldr	r1, [sp, #4]
   b679e:	f7ff ff87 	bl	b66b0 <_ZN8particle7BleUuid9constructEPKc>
}
   b67a2:	4620      	mov	r0, r4
   b67a4:	b002      	add	sp, #8
   b67a6:	bd10      	pop	{r4, pc}

000b67a8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b67a8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b67aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b67ae:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b67b0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b67b2:	8043      	strh	r3, [r0, #2]
   b67b4:	220e      	movs	r2, #14
   b67b6:	4629      	mov	r1, r5
   b67b8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b67ba:	7105      	strb	r5, [r0, #4]
   b67bc:	3006      	adds	r0, #6
   b67be:	f002 fe54 	bl	b946a <memset>
   b67c2:	f104 0014 	add.w	r0, r4, #20
   b67c6:	f7ff fefd 	bl	b65c4 <_ZN8particle7BleUuidC1Ev>
   b67ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b67ce:	f7ff fef9 	bl	b65c4 <_ZN8particle7BleUuidC1Ev>
   b67d2:	4904      	ldr	r1, [pc, #16]	; (b67e4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b67d4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b67d8:	f7ff fd17 	bl	b620a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b67dc:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b67de:	4620      	mov	r0, r4
   b67e0:	bd38      	pop	{r3, r4, r5, pc}
   b67e2:	bf00      	nop
   b67e4:	000bb9a9 	.word	0x000bb9a9

000b67e8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b67e8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b67ea:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b67ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b67f2:	4293      	cmp	r3, r2
   b67f4:	4618      	mov	r0, r3
   b67f6:	d006      	beq.n	b6806 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b67f8:	6804      	ldr	r4, [r0, #0]
   b67fa:	8824      	ldrh	r4, [r4, #0]
   b67fc:	428c      	cmp	r4, r1
   b67fe:	f103 0308 	add.w	r3, r3, #8
   b6802:	d1f6      	bne.n	b67f2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6804:	bd10      	pop	{r4, pc}
        return nullptr;
   b6806:	2000      	movs	r0, #0
   b6808:	e7fc      	b.n	b6804 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b680c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b680c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b680e:	4606      	mov	r6, r0
   b6810:	b085      	sub	sp, #20
   b6812:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6814:	460d      	mov	r5, r1
   b6816:	2900      	cmp	r1, #0
   b6818:	d050      	beq.n	b68bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b681a:	2a00      	cmp	r2, #0
   b681c:	d04e      	beq.n	b68bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b681e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6820:	7823      	ldrb	r3, [r4, #0]
   b6822:	2af4      	cmp	r2, #244	; 0xf4
   b6824:	bf28      	it	cs
   b6826:	22f4      	movcs	r2, #244	; 0xf4
   b6828:	b343      	cbz	r3, b687c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b682a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b682c:	0798      	lsls	r0, r3, #30
   b682e:	d509      	bpl.n	b6844 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6830:	89a0      	ldrh	r0, [r4, #12]
   b6832:	9203      	str	r2, [sp, #12]
   b6834:	2300      	movs	r3, #0
   b6836:	f7fe fe0f 	bl	b5458 <hal_ble_gatt_server_set_characteristic_value>
   b683a:	2800      	cmp	r0, #0
   b683c:	9a03      	ldr	r2, [sp, #12]
   b683e:	da03      	bge.n	b6848 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6840:	b005      	add	sp, #20
   b6842:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6844:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6848:	6834      	ldr	r4, [r6, #0]
   b684a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b684c:	06d9      	lsls	r1, r3, #27
   b684e:	d509      	bpl.n	b6864 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6850:	2f01      	cmp	r7, #1
   b6852:	d007      	beq.n	b6864 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6854:	89a0      	ldrh	r0, [r4, #12]
   b6856:	2300      	movs	r3, #0
   b6858:	4629      	mov	r1, r5
}
   b685a:	b005      	add	sp, #20
   b685c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6860:	f7fe be2c 	b.w	b54bc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6864:	069b      	lsls	r3, r3, #26
   b6866:	d5eb      	bpl.n	b6840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6868:	2f02      	cmp	r7, #2
   b686a:	d0e9      	beq.n	b6840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b686c:	89a0      	ldrh	r0, [r4, #12]
   b686e:	2300      	movs	r3, #0
   b6870:	4629      	mov	r1, r5
}
   b6872:	b005      	add	sp, #20
   b6874:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6878:	f7fe be2a 	b.w	b54d0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b687c:	8860      	ldrh	r0, [r4, #2]
   b687e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6882:	4288      	cmp	r0, r1
   b6884:	d01c      	beq.n	b68c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6886:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6888:	074e      	lsls	r6, r1, #29
   b688a:	d501      	bpl.n	b6890 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b688c:	2f01      	cmp	r7, #1
   b688e:	d104      	bne.n	b689a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6890:	070b      	lsls	r3, r1, #28
   b6892:	d409      	bmi.n	b68a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6894:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6898:	e7d2      	b.n	b6840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b689a:	89a1      	ldrh	r1, [r4, #12]
   b689c:	9300      	str	r3, [sp, #0]
   b689e:	4613      	mov	r3, r2
   b68a0:	462a      	mov	r2, r5
   b68a2:	f7fe fded 	bl	b5480 <hal_ble_gatt_client_write_without_response>
   b68a6:	e7cb      	b.n	b6840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b68a8:	2f02      	cmp	r7, #2
   b68aa:	d0f3      	beq.n	b6894 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b68ac:	2300      	movs	r3, #0
   b68ae:	89a1      	ldrh	r1, [r4, #12]
   b68b0:	9300      	str	r3, [sp, #0]
   b68b2:	4613      	mov	r3, r2
   b68b4:	462a      	mov	r2, r5
   b68b6:	f7fe fdd9 	bl	b546c <hal_ble_gatt_client_write_with_response>
   b68ba:	e7c1      	b.n	b6840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b68bc:	4802      	ldr	r0, [pc, #8]	; (b68c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b68be:	e7bf      	b.n	b6840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b68c0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b68c4:	e7bc      	b.n	b6840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b68c6:	bf00      	nop
   b68c8:	fffffef2 	.word	0xfffffef2

000b68cc <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b68cc:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b68ce:	688a      	ldr	r2, [r1, #8]
   b68d0:	6809      	ldr	r1, [r1, #0]
   b68d2:	f7ff bf9b 	b.w	b680c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b68d8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b68d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b68dc:	2600      	movs	r6, #0
   b68de:	6006      	str	r6, [r0, #0]
   b68e0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b68e2:	2028      	movs	r0, #40	; 0x28
   b68e4:	460c      	mov	r4, r1
   b68e6:	f7fd fbd6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b68ea:	1e05      	subs	r5, r0, #0
   b68ec:	f105 080c 	add.w	r8, r5, #12
   b68f0:	d00f      	beq.n	b6912 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b68f2:	2301      	movs	r3, #1
   b68f4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b68f8:	4b08      	ldr	r3, [pc, #32]	; (b691c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b68fa:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b68fc:	4640      	mov	r0, r8
   b68fe:	f7ff fe61 	bl	b65c4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6904:	622e      	str	r6, [r5, #32]
   b6906:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b690a:	4646      	mov	r6, r8
   b690c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b690e:	6823      	ldr	r3, [r4, #0]
   b6910:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6912:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6916:	4638      	mov	r0, r7
   b6918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b691c:	000bbd5c 	.word	0x000bbd5c

000b6920 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6920:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6922:	2500      	movs	r5, #0
   b6924:	6005      	str	r5, [r0, #0]
   b6926:	4606      	mov	r6, r0
   b6928:	2030      	movs	r0, #48	; 0x30
   b692a:	f7fd fbb4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b692e:	4604      	mov	r4, r0
   b6930:	b188      	cbz	r0, b6956 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6932:	2301      	movs	r3, #1
   b6934:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6938:	4b09      	ldr	r3, [pc, #36]	; (b6960 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b693a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b693c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6940:	8183      	strh	r3, [r0, #12]
   b6942:	300e      	adds	r0, #14
   b6944:	f7ff fe33 	bl	b65ae <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6948:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b694c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6950:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6954:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6956:	6074      	str	r4, [r6, #4]
   b6958:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b695a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b695c:	4630      	mov	r0, r6
   b695e:	bd70      	pop	{r4, r5, r6, pc}
   b6960:	000bbd78 	.word	0x000bbd78

000b6964 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6964:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6966:	460d      	mov	r5, r1
   b6968:	4604      	mov	r4, r0
    WiringBleLock lk;
   b696a:	a801      	add	r0, sp, #4
   b696c:	f7ff fde4 	bl	b6538 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6970:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6972:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6976:	6023      	str	r3, [r4, #0]
   b6978:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b697c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b697e:	a801      	add	r0, sp, #4
   b6980:	f7ff fde8 	bl	b6554 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6984:	4620      	mov	r0, r4
   b6986:	b003      	add	sp, #12
   b6988:	bd30      	pop	{r4, r5, pc}

000b698a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b698a:	b530      	push	{r4, r5, lr}
   b698c:	4605      	mov	r5, r0
   b698e:	b087      	sub	sp, #28
   b6990:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6992:	a801      	add	r0, sp, #4
   b6994:	f7ff fdd0 	bl	b6538 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6998:	682a      	ldr	r2, [r5, #0]
   b699a:	6823      	ldr	r3, [r4, #0]
   b699c:	8812      	ldrh	r2, [r2, #0]
   b699e:	881b      	ldrh	r3, [r3, #0]
   b69a0:	429a      	cmp	r2, r3
   b69a2:	d10d      	bne.n	b69c0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b69a4:	4629      	mov	r1, r5
   b69a6:	a802      	add	r0, sp, #8
   b69a8:	f7ff ffdc 	bl	b6964 <_ZNK8particle13BlePeerDevice7addressEv>
   b69ac:	4621      	mov	r1, r4
   b69ae:	a804      	add	r0, sp, #16
   b69b0:	f7ff ffd8 	bl	b6964 <_ZNK8particle13BlePeerDevice7addressEv>
   b69b4:	a904      	add	r1, sp, #16
   b69b6:	a802      	add	r0, sp, #8
   b69b8:	f7ff fde5 	bl	b6586 <_ZNK8particle10BleAddresseqERKS0_>
   b69bc:	4604      	mov	r4, r0
   b69be:	b900      	cbnz	r0, b69c2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b69c0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b69c2:	a801      	add	r0, sp, #4
   b69c4:	f7ff fdc6 	bl	b6554 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b69c8:	4620      	mov	r0, r4
   b69ca:	b007      	add	sp, #28
   b69cc:	bd30      	pop	{r4, r5, pc}
	...

000b69d0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b69d0:	b510      	push	{r4, lr}
   b69d2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b69d4:	2064      	movs	r0, #100	; 0x64
   b69d6:	f7fd fb5e 	bl	b4096 <_Znwj>
   b69da:	b168      	cbz	r0, b69f8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b69dc:	2300      	movs	r3, #0
   b69de:	e9c0 3300 	strd	r3, r3, [r0]
   b69e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b69e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b69ea:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b69ee:	6203      	str	r3, [r0, #32]
   b69f0:	62c3      	str	r3, [r0, #44]	; 0x2c
   b69f2:	63c3      	str	r3, [r0, #60]	; 0x3c
   b69f4:	64c3      	str	r3, [r0, #76]	; 0x4c
   b69f6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b69f8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b69fa:	b920      	cbnz	r0, b6a06 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b69fc:	4a0a      	ldr	r2, [pc, #40]	; (b6a28 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b69fe:	490b      	ldr	r1, [pc, #44]	; (b6a2c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6a00:	200a      	movs	r0, #10
   b6a02:	f7fe fec7 	bl	b5794 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6a06:	2000      	movs	r0, #0
   b6a08:	f7fe fcf2 	bl	b53f0 <hal_ble_stack_init>
   b6a0c:	b120      	cbz	r0, b6a18 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6a0e:	4a06      	ldr	r2, [pc, #24]	; (b6a28 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6a10:	4907      	ldr	r1, [pc, #28]	; (b6a30 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6a12:	200a      	movs	r0, #10
   b6a14:	f7fe febe 	bl	b5794 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6a18:	6821      	ldr	r1, [r4, #0]
   b6a1a:	4806      	ldr	r0, [pc, #24]	; (b6a34 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6a1c:	2200      	movs	r2, #0
   b6a1e:	f7fe fd43 	bl	b54a8 <hal_ble_set_callback_on_periph_link_events>
}
   b6a22:	4620      	mov	r0, r4
   b6a24:	bd10      	pop	{r4, pc}
   b6a26:	bf00      	nop
   b6a28:	000b53a1 	.word	0x000b53a1
   b6a2c:	000bbbec 	.word	0x000bbbec
   b6a30:	000bbc2a 	.word	0x000bbc2a
   b6a34:	000b6ffd 	.word	0x000b6ffd

000b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6a38:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6a3a:	4c0a      	ldr	r4, [pc, #40]	; (b6a64 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6a3c:	7823      	ldrb	r3, [r4, #0]
   b6a3e:	f3bf 8f5b 	dmb	ish
   b6a42:	07db      	lsls	r3, r3, #31
   b6a44:	d40c      	bmi.n	b6a60 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6a46:	4620      	mov	r0, r4
   b6a48:	f7fd fb2b 	bl	b40a2 <__cxa_guard_acquire>
   b6a4c:	b140      	cbz	r0, b6a60 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6a4e:	4806      	ldr	r0, [pc, #24]	; (b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6a50:	f7ff ffbe 	bl	b69d0 <_ZN8particle14BleLocalDeviceC1Ev>
   b6a54:	4620      	mov	r0, r4
   b6a56:	f7fd fb29 	bl	b40ac <__cxa_guard_release>
   b6a5a:	4804      	ldr	r0, [pc, #16]	; (b6a6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6a5c:	f002 fcc0 	bl	b93e0 <atexit>
    return instance;
}
   b6a60:	4801      	ldr	r0, [pc, #4]	; (b6a68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6a62:	bd10      	pop	{r4, pc}
   b6a64:	2003e68c 	.word	0x2003e68c
   b6a68:	2003e698 	.word	0x2003e698
   b6a6c:	000b6ca5 	.word	0x000b6ca5

000b6a70 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6a70:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6a72:	6803      	ldr	r3, [r0, #0]
   b6a74:	3b09      	subs	r3, #9
   b6a76:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6a78:	b08d      	sub	sp, #52	; 0x34
   b6a7a:	4604      	mov	r4, r0
   b6a7c:	460d      	mov	r5, r1
    switch (event->type) {
   b6a7e:	d811      	bhi.n	b6aa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6a80:	f7ff ffda 	bl	b6a38 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6a84:	88a1      	ldrh	r1, [r4, #4]
   b6a86:	6800      	ldr	r0, [r0, #0]
   b6a88:	f7ff feae 	bl	b67e8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6a8c:	4603      	mov	r3, r0
   b6a8e:	b958      	cbnz	r0, b6aa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6a90:	2220      	movs	r2, #32
   b6a92:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6a96:	4a0b      	ldr	r2, [pc, #44]	; (b6ac4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6a98:	9200      	str	r2, [sp, #0]
   b6a9a:	490b      	ldr	r1, [pc, #44]	; (b6ac8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6a9c:	aa04      	add	r2, sp, #16
   b6a9e:	2032      	movs	r0, #50	; 0x32
   b6aa0:	f7fe fe80 	bl	b57a4 <log_message>
}
   b6aa4:	b00d      	add	sp, #52	; 0x34
   b6aa6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6aa8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6aaa:	2a00      	cmp	r2, #0
   b6aac:	d0fa      	beq.n	b6aa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6aae:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6ab2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6ab6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6aba:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6abc:	aa04      	add	r2, sp, #16
   b6abe:	a903      	add	r1, sp, #12
   b6ac0:	47a0      	blx	r4
}
   b6ac2:	e7ef      	b.n	b6aa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6ac4:	000bbc6c 	.word	0x000bbc6c
   b6ac8:	000bbc03 	.word	0x000bbc03

000b6acc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6acc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6ace:	2000      	movs	r0, #0
   b6ad0:	f7fe fc8e 	bl	b53f0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6ad4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6ad8:	bd08      	pop	{r3, pc}

000b6ada <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6ada:	b919      	cbnz	r1, b6ae4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6adc:	460a      	mov	r2, r1
   b6ade:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6ae0:	f7fe bc8e 	b.w	b5400 <hal_ble_gap_set_advertising_data>
   b6ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6ae8:	2200      	movs	r2, #0
   b6aea:	e7f9      	b.n	b6ae0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6aec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6aec:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6aee:	1e14      	subs	r4, r2, #0
   b6af0:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6af2:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6af4:	db02      	blt.n	b6afc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6af6:	1862      	adds	r2, r4, r1
   b6af8:	429a      	cmp	r2, r3
   b6afa:	dd00      	ble.n	b6afe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6afc:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6afe:	682a      	ldr	r2, [r5, #0]
   b6b00:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6b02:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6b04:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6b06:	1a52      	subs	r2, r2, r1
   b6b08:	f002 fc95 	bl	b9436 <memmove>
    size_ -= n;
   b6b0c:	686a      	ldr	r2, [r5, #4]
   b6b0e:	1b12      	subs	r2, r2, r4
   b6b10:	606a      	str	r2, [r5, #4]
}
   b6b12:	bd38      	pop	{r3, r4, r5, pc}

000b6b14 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6b16:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6b18:	4604      	mov	r4, r0
   b6b1a:	460d      	mov	r5, r1
   b6b1c:	ab01      	add	r3, sp, #4
   b6b1e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6b22:	f7ff fc77 	bl	b6414 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6b26:	4602      	mov	r2, r0
   b6b28:	b138      	cbz	r0, b6b3a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6b2a:	9901      	ldr	r1, [sp, #4]
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	f7ff ffdd 	bl	b6aec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6b32:	4629      	mov	r1, r5
   b6b34:	4620      	mov	r0, r4
   b6b36:	f7ff ffed 	bl	b6b14 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6b3a:	b003      	add	sp, #12
   b6b3c:	bd30      	pop	{r4, r5, pc}

000b6b3e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6b3e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6b40:	460c      	mov	r4, r1
   b6b42:	b929      	cbnz	r1, b6b50 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6b44:	460a      	mov	r2, r1
   b6b46:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b6b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6b4c:	f7fe bc60 	b.w	b5410 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6b50:	2101      	movs	r1, #1
   b6b52:	4620      	mov	r0, r4
   b6b54:	f7ff ffde 	bl	b6b14 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6b58:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6b5c:	2200      	movs	r2, #0
   b6b5e:	e7f3      	b.n	b6b48 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6b60 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6b60:	b538      	push	{r3, r4, r5, lr}
   b6b62:	4604      	mov	r4, r0
   b6b64:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6b66:	f7ff ffb8 	bl	b6ada <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6b6a:	2800      	cmp	r0, #0
   b6b6c:	db0a      	blt.n	b6b84 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6b6e:	4629      	mov	r1, r5
   b6b70:	4620      	mov	r0, r4
   b6b72:	f7ff ffe4 	bl	b6b3e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6b76:	2800      	cmp	r0, #0
   b6b78:	db04      	blt.n	b6b84 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b6b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6b7e:	2000      	movs	r0, #0
   b6b80:	f7fe bc4e 	b.w	b5420 <hal_ble_gap_start_advertising>
}
   b6b84:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6b88 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6b88:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6b8a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6b8c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6b8e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b90:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6b92:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b94:	f7fd fa7f 	bl	b4096 <_Znwj>
   b6b98:	b118      	cbz	r0, b6ba2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6b9a:	682b      	ldr	r3, [r5, #0]
   b6b9c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6b9e:	686b      	ldr	r3, [r5, #4]
   b6ba0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6ba2:	4b03      	ldr	r3, [pc, #12]	; (b6bb0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6ba4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6ba6:	4b03      	ldr	r3, [pc, #12]	; (b6bb4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ba8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6baa:	60a3      	str	r3, [r4, #8]
      }
   b6bac:	4620      	mov	r0, r4
   b6bae:	bd38      	pop	{r3, r4, r5, pc}
   b6bb0:	000b6461 	.word	0x000b6461
   b6bb4:	000b64b9 	.word	0x000b64b9

000b6bb8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6bb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6bba:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6bbc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6bbe:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bc0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6bc2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bc4:	f7fd fa67 	bl	b4096 <_Znwj>
   b6bc8:	b118      	cbz	r0, b6bd2 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b6bca:	682b      	ldr	r3, [r5, #0]
   b6bcc:	6003      	str	r3, [r0, #0]
   b6bce:	686b      	ldr	r3, [r5, #4]
   b6bd0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6bd2:	4b03      	ldr	r3, [pc, #12]	; (b6be0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b6bd4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6bd6:	4b03      	ldr	r3, [pc, #12]	; (b6be4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bd8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6bda:	60a3      	str	r3, [r4, #8]
      }
   b6bdc:	4620      	mov	r0, r4
   b6bde:	bd38      	pop	{r3, r4, r5, pc}
   b6be0:	000b6455 	.word	0x000b6455
   b6be4:	000b6479 	.word	0x000b6479

000b6be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6be8:	680b      	ldr	r3, [r1, #0]
   b6bea:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6bec:	b113      	cbz	r3, b6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6bee:	685a      	ldr	r2, [r3, #4]
   b6bf0:	3201      	adds	r2, #1
   b6bf2:	605a      	str	r2, [r3, #4]
      }
   b6bf4:	4770      	bx	lr

000b6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6bf6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6bf8:	f851 3b04 	ldr.w	r3, [r1], #4
   b6bfc:	4604      	mov	r4, r0
   b6bfe:	f840 3b04 	str.w	r3, [r0], #4
   b6c02:	f7ff fff1 	bl	b6be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6c06:	6823      	ldr	r3, [r4, #0]
   b6c08:	b90b      	cbnz	r3, b6c0e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6c0a:	f7ff fc19 	bl	b6440 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6c0e:	4620      	mov	r0, r4
   b6c10:	bd10      	pop	{r4, pc}

000b6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6c12:	b510      	push	{r4, lr}
   b6c14:	f851 3b04 	ldr.w	r3, [r1], #4
   b6c18:	4604      	mov	r4, r0
   b6c1a:	f840 3b04 	str.w	r3, [r0], #4
   b6c1e:	f7ff ffe3 	bl	b6be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6c22:	4620      	mov	r0, r4
   b6c24:	bd10      	pop	{r4, pc}

000b6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6c26:	b510      	push	{r4, lr}
   b6c28:	f851 3b04 	ldr.w	r3, [r1], #4
   b6c2c:	4604      	mov	r4, r0
   b6c2e:	f840 3b04 	str.w	r3, [r0], #4
   b6c32:	f7ff ffd9 	bl	b6be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6c36:	4620      	mov	r0, r4
   b6c38:	bd10      	pop	{r4, pc}

000b6c3a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6c3a:	b510      	push	{r4, lr}
   b6c3c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6c3e:	3004      	adds	r0, #4
   b6c40:	f7fd ff9a 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6c44:	4620      	mov	r0, r4
   b6c46:	bd10      	pop	{r4, pc}

000b6c48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6c4a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c4e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6c50:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6c54:	42ae      	cmp	r6, r5
   b6c56:	d004      	beq.n	b6c62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6c58:	1d28      	adds	r0, r5, #4
   b6c5a:	f7fd ff8d 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c5e:	3508      	adds	r5, #8
   b6c60:	e7f8      	b.n	b6c54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6c62:	6820      	ldr	r0, [r4, #0]
   b6c64:	f7fe fe8a 	bl	b597c <free>
}
   b6c68:	4620      	mov	r0, r4
   b6c6a:	bd70      	pop	{r4, r5, r6, pc}

000b6c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c6c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6c6e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6c72:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6c74:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6c78:	42ae      	cmp	r6, r5
   b6c7a:	d004      	beq.n	b6c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6c7c:	1d28      	adds	r0, r5, #4
   b6c7e:	f7fd ff7b 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c82:	3508      	adds	r5, #8
   b6c84:	e7f8      	b.n	b6c78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6c86:	6820      	ldr	r0, [r4, #0]
   b6c88:	f7fe fe78 	bl	b597c <free>
}
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	bd70      	pop	{r4, r5, r6, pc}

000b6c90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6c90:	b510      	push	{r4, lr}
   b6c92:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6c94:	3024      	adds	r0, #36	; 0x24
   b6c96:	f7ff ffe9 	bl	b6c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6c9a:	f104 0018 	add.w	r0, r4, #24
   b6c9e:	f7ff ffd3 	bl	b6c48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6ca2:	bd10      	pop	{r4, pc}

000b6ca4 <__tcf_0>:
    static BleLocalDevice instance;
   b6ca4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6ca6:	4b17      	ldr	r3, [pc, #92]	; (b6d04 <__tcf_0+0x60>)
   b6ca8:	681c      	ldr	r4, [r3, #0]
   b6caa:	b354      	cbz	r4, b6d02 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6cac:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6cb0:	f7fd fb96 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
   b6cb4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6cb8:	f7fd fb92 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
   b6cbc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6cc0:	f7fd fb8e 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
   b6cc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6cc8:	f7fd fb8a 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6ccc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6cd0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6cd4:	42ae      	cmp	r6, r5
   b6cd6:	d004      	beq.n	b6ce2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6cd8:	1d28      	adds	r0, r5, #4
   b6cda:	f7fd ff4d 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6cde:	3508      	adds	r5, #8
   b6ce0:	e7f8      	b.n	b6cd4 <__tcf_0+0x30>
    ::free(ptr);
   b6ce2:	69a0      	ldr	r0, [r4, #24]
   b6ce4:	f7fe fe4a 	bl	b597c <free>
    ~BleLocalDeviceImpl() = default;
   b6ce8:	f104 000c 	add.w	r0, r4, #12
   b6cec:	f7ff ffbe 	bl	b6c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6cf0:	4620      	mov	r0, r4
   b6cf2:	f7ff ffa9 	bl	b6c48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6cf6:	4620      	mov	r0, r4
   b6cf8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6cfe:	f7fd b9ce 	b.w	b409e <_ZdlPvj>
   b6d02:	bd70      	pop	{r4, r5, r6, pc}
   b6d04:	2003e698 	.word	0x2003e698

000b6d08 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6d08:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6d0a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6d0c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6d10:	e9c1 3300 	strd	r3, r3, [r1]
   b6d14:	6803      	ldr	r3, [r0, #0]
   b6d16:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d18:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6d1a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6d1c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6d1e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6d20:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6d22:	f7fd ff29 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6d26:	b002      	add	sp, #8
   b6d28:	bd10      	pop	{r4, pc}

000b6d2a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6d2a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6d2c:	b510      	push	{r4, lr}
      if (_M_empty())
   b6d2e:	b90a      	cbnz	r2, b6d34 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6d30:	f001 fd78 	bl	b8824 <_ZSt25__throw_bad_function_callv>
    }
   b6d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6d38:	68c3      	ldr	r3, [r0, #12]
   b6d3a:	4718      	bx	r3

000b6d3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6d3c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6d3e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6d40:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6d42:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6d44:	dd03      	ble.n	b6d4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6d46:	f7fe fe21 	bl	b598c <realloc>
            if (!d) {
   b6d4a:	b918      	cbnz	r0, b6d54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6d4c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6d4e:	f7fe fe15 	bl	b597c <free>
        T* d = nullptr;
   b6d52:	2000      	movs	r0, #0
        data_ = d;
   b6d54:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6d56:	60a5      	str	r5, [r4, #8]
        return true;
   b6d58:	2001      	movs	r0, #1
   b6d5a:	e7f7      	b.n	b6d4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6d5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6d5c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6d5e:	6883      	ldr	r3, [r0, #8]
   b6d60:	428b      	cmp	r3, r1
   b6d62:	da02      	bge.n	b6d6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6d64:	f7ff ffea 	bl	b6d3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6d68:	bd08      	pop	{r3, pc}
    return true;
   b6d6a:	2001      	movs	r0, #1
   b6d6c:	e7fc      	b.n	b6d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6d6e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d72:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6d74:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6d76:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6d78:	4419      	add	r1, r3
   b6d7a:	6883      	ldr	r3, [r0, #8]
   b6d7c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6d7e:	4604      	mov	r4, r0
   b6d80:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6d82:	dc12      	bgt.n	b6daa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6d84:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6d86:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6d88:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6d8a:	1bd2      	subs	r2, r2, r7
   b6d8c:	4631      	mov	r1, r6
   b6d8e:	1970      	adds	r0, r6, r5
   b6d90:	f002 fb51 	bl	b9436 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6d94:	462a      	mov	r2, r5
   b6d96:	4641      	mov	r1, r8
   b6d98:	4630      	mov	r0, r6
   b6d9a:	f002 fb3e 	bl	b941a <memcpy>
    size_ += n;
   b6d9e:	6863      	ldr	r3, [r4, #4]
   b6da0:	442b      	add	r3, r5
   b6da2:	6063      	str	r3, [r4, #4]
    return true;
   b6da4:	2001      	movs	r0, #1
}
   b6da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6daa:	f7ff ffc7 	bl	b6d3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6dae:	2800      	cmp	r0, #0
   b6db0:	d1e8      	bne.n	b6d84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6db2:	e7f8      	b.n	b6da6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6db4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6db6:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6db8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6dbc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6dbe:	4604      	mov	r4, r0
   b6dc0:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6dc2:	da0b      	bge.n	b6ddc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6dc4:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6dc6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6dc8:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6dca:	1b52      	subs	r2, r2, r5
   b6dcc:	1c48      	adds	r0, r1, #1
   b6dce:	f002 fb32 	bl	b9436 <memmove>
    new(p) T(std::move(value));
   b6dd2:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6dd4:	6863      	ldr	r3, [r4, #4]
   b6dd6:	3301      	adds	r3, #1
   b6dd8:	6063      	str	r3, [r4, #4]
}
   b6dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6ddc:	3101      	adds	r1, #1
   b6dde:	f7ff ffad 	bl	b6d3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6de2:	2800      	cmp	r0, #0
   b6de4:	d1ee      	bne.n	b6dc4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6de6:	e7f8      	b.n	b6dda <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6de8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6de8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6dea:	6841      	ldr	r1, [r0, #4]
   b6dec:	f7ff bfe2 	b.w	b6db4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6df0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6df4:	4604      	mov	r4, r0
   b6df6:	461d      	mov	r5, r3
   b6df8:	460f      	mov	r7, r1
   b6dfa:	ab01      	add	r3, sp, #4
   b6dfc:	4690      	mov	r8, r2
   b6dfe:	460a      	mov	r2, r1
   b6e00:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6e04:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6e08:	f7ff fb04 	bl	b6414 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6e0c:	1cae      	adds	r6, r5, #2
   b6e0e:	6863      	ldr	r3, [r4, #4]
   b6e10:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6e12:	f1b9 0f00 	cmp.w	r9, #0
   b6e16:	d126      	bne.n	b6e66 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6e18:	b328      	cbz	r0, b6e66 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6e1a:	4433      	add	r3, r6
   b6e1c:	1a1b      	subs	r3, r3, r0
   b6e1e:	2bff      	cmp	r3, #255	; 0xff
   b6e20:	d809      	bhi.n	b6e36 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6e22:	9901      	ldr	r1, [sp, #4]
   b6e24:	4620      	mov	r0, r4
   b6e26:	f7ff fe61 	bl	b6aec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6e2a:	6861      	ldr	r1, [r4, #4]
   b6e2c:	4620      	mov	r0, r4
   b6e2e:	4431      	add	r1, r6
   b6e30:	f7ff ff94 	bl	b6d5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6e34:	b918      	cbnz	r0, b6e3e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6e36:	6860      	ldr	r0, [r4, #4]
}
   b6e38:	b003      	add	sp, #12
   b6e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6e3e:	1c6a      	adds	r2, r5, #1
   b6e40:	9901      	ldr	r1, [sp, #4]
   b6e42:	b2d2      	uxtb	r2, r2
   b6e44:	4620      	mov	r0, r4
   b6e46:	f7ff ffb5 	bl	b6db4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b6e4a:	9901      	ldr	r1, [sp, #4]
   b6e4c:	463a      	mov	r2, r7
   b6e4e:	3101      	adds	r1, #1
   b6e50:	4620      	mov	r0, r4
   b6e52:	f7ff ffaf 	bl	b6db4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b6e56:	9901      	ldr	r1, [sp, #4]
   b6e58:	462b      	mov	r3, r5
   b6e5a:	4642      	mov	r2, r8
   b6e5c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b6e5e:	4620      	mov	r0, r4
   b6e60:	f7ff ff85 	bl	b6d6e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6e64:	e7e7      	b.n	b6e36 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6e66:	18f1      	adds	r1, r6, r3
   b6e68:	29ff      	cmp	r1, #255	; 0xff
   b6e6a:	d8e4      	bhi.n	b6e36 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6e6c:	4620      	mov	r0, r4
   b6e6e:	f7ff ff75 	bl	b6d5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6e72:	2800      	cmp	r0, #0
   b6e74:	d0df      	beq.n	b6e36 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6e76:	1c69      	adds	r1, r5, #1
   b6e78:	b2c9      	uxtb	r1, r1
   b6e7a:	4620      	mov	r0, r4
   b6e7c:	f7ff ffb4 	bl	b6de8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6e80:	4639      	mov	r1, r7
   b6e82:	4620      	mov	r0, r4
   b6e84:	f7ff ffb0 	bl	b6de8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6e88:	6861      	ldr	r1, [r4, #4]
   b6e8a:	462b      	mov	r3, r5
   b6e8c:	4642      	mov	r2, r8
   b6e8e:	e7e6      	b.n	b6e5e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b6e90 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6e90:	b430      	push	{r4, r5}
   b6e92:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6e96:	b11a      	cbz	r2, b6ea0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6e98:	9502      	str	r5, [sp, #8]
}
   b6e9a:	bc30      	pop	{r4, r5}
   b6e9c:	f7ff bfa8 	b.w	b6df0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b6ea0:	6840      	ldr	r0, [r0, #4]
}
   b6ea2:	bc30      	pop	{r4, r5}
   b6ea4:	4770      	bx	lr

000b6ea6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6ea6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b6ea8:	2300      	movs	r3, #0
   b6eaa:	e9c0 3300 	strd	r3, r3, [r0]
   b6eae:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6eb0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6eb2:	9300      	str	r3, [sp, #0]
   b6eb4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6eb6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6eba:	4619      	mov	r1, r3
   b6ebc:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b6ec0:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6ec2:	f7ff ffe5 	bl	b6e90 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6ec6:	4620      	mov	r0, r4
   b6ec8:	b004      	add	sp, #16
   b6eca:	bd10      	pop	{r4, pc}

000b6ecc <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b6ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6ece:	460a      	mov	r2, r1
   b6ed0:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b6ed2:	2114      	movs	r1, #20
   b6ed4:	4610      	mov	r0, r2
   b6ed6:	9203      	str	r2, [sp, #12]
   b6ed8:	f002 fb59 	bl	b958e <strnlen>
   b6edc:	2100      	movs	r1, #0
   b6ede:	4603      	mov	r3, r0
   b6ee0:	9100      	str	r1, [sp, #0]
   b6ee2:	9a03      	ldr	r2, [sp, #12]
   b6ee4:	2109      	movs	r1, #9
   b6ee6:	4620      	mov	r0, r4
   b6ee8:	f7ff ffd2 	bl	b6e90 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6eec:	b004      	add	sp, #16
   b6eee:	bd10      	pop	{r4, pc}

000b6ef0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6ef0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ef4:	4604      	mov	r4, r0
   b6ef6:	460d      	mov	r5, r1
   b6ef8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6efa:	d914      	bls.n	b6f26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6efc:	4290      	cmp	r0, r2
   b6efe:	d213      	bcs.n	b6f28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6f00:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6f04:	1a75      	subs	r5, r6, r1
   b6f06:	f1a1 0708 	sub.w	r7, r1, #8
   b6f0a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6f0c:	42b7      	cmp	r7, r6
   b6f0e:	d018      	beq.n	b6f42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6f10:	b11c      	cbz	r4, b6f1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6f12:	4631      	mov	r1, r6
   b6f14:	4620      	mov	r0, r4
   b6f16:	f7ff fe86 	bl	b6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6f1a:	1d30      	adds	r0, r6, #4
   b6f1c:	f7fd fe2c 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6f20:	3e08      	subs	r6, #8
   b6f22:	3c08      	subs	r4, #8
   b6f24:	e7f2      	b.n	b6f0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6f26:	d00c      	beq.n	b6f42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6f28:	42b5      	cmp	r5, r6
   b6f2a:	d00a      	beq.n	b6f42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6f2c:	b11c      	cbz	r4, b6f36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6f2e:	4629      	mov	r1, r5
   b6f30:	4620      	mov	r0, r4
   b6f32:	f7ff fe78 	bl	b6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6f36:	1d28      	adds	r0, r5, #4
   b6f38:	f7fd fe1e 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6f3c:	3508      	adds	r5, #8
   b6f3e:	3408      	adds	r4, #8
   b6f40:	e7f2      	b.n	b6f28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6f46:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6f48:	6846      	ldr	r6, [r0, #4]
   b6f4a:	4668      	mov	r0, sp
   b6f4c:	f7ff fe6b 	bl	b6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f50:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6f54:	429f      	cmp	r7, r3
   b6f56:	db12      	blt.n	b6f7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6f58:	3701      	adds	r7, #1
        if (n > 0) {
   b6f5a:	2f00      	cmp	r7, #0
   b6f5c:	dd29      	ble.n	b6fb2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b6f5e:	00f8      	lsls	r0, r7, #3
   b6f60:	f7fe fd04 	bl	b596c <malloc>
            if (!d) {
   b6f64:	4605      	mov	r5, r0
   b6f66:	b1f0      	cbz	r0, b6fa6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6f68:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6f6c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6f70:	f7ff ffbe 	bl	b6ef0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6f74:	6820      	ldr	r0, [r4, #0]
   b6f76:	f7fe fd01 	bl	b597c <free>
        data_ = d;
   b6f7a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6f7c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6f7e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6f80:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f82:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b6f86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6f8a:	4631      	mov	r1, r6
   b6f8c:	f106 0008 	add.w	r0, r6, #8
   b6f90:	f7ff ffae 	bl	b6ef0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6f94:	b11e      	cbz	r6, b6f9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6f96:	4669      	mov	r1, sp
   b6f98:	4630      	mov	r0, r6
   b6f9a:	f7ff fe44 	bl	b6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b6f9e:	6863      	ldr	r3, [r4, #4]
   b6fa0:	3301      	adds	r3, #1
   b6fa2:	6063      	str	r3, [r4, #4]
    return true;
   b6fa4:	2501      	movs	r5, #1
   b6fa6:	a801      	add	r0, sp, #4
   b6fa8:	f7fd fde6 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6fac:	4628      	mov	r0, r5
   b6fae:	b003      	add	sp, #12
   b6fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6fb2:	2500      	movs	r5, #0
   b6fb4:	e7de      	b.n	b6f74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b6fb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6fb8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6fbc:	4605      	mov	r5, r0
   b6fbe:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6fc0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6fc4:	42a6      	cmp	r6, r4
   b6fc6:	d005      	beq.n	b6fd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6fc8:	4639      	mov	r1, r7
   b6fca:	4620      	mov	r0, r4
   b6fcc:	f7ff fcdd 	bl	b698a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6fd0:	b108      	cbz	r0, b6fd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6fd2:	b914      	cbnz	r4, b6fda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6fd6:	3408      	adds	r4, #8
   b6fd8:	e7f4      	b.n	b6fc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6fda:	1d20      	adds	r0, r4, #4
   b6fdc:	f7fd fdcc 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6fe0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6fe4:	f104 0108 	add.w	r1, r4, #8
   b6fe8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6fec:	4620      	mov	r0, r4
   b6fee:	f7ff ff7f 	bl	b6ef0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b6ff2:	686b      	ldr	r3, [r5, #4]
   b6ff4:	3b01      	subs	r3, #1
   b6ff6:	606b      	str	r3, [r5, #4]
    return true;
   b6ff8:	e7ec      	b.n	b6fd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b6ffc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7000:	4605      	mov	r5, r0
   b7002:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7004:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7006:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7008:	f7ff fa96 	bl	b6538 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b700c:	682e      	ldr	r6, [r5, #0]
   b700e:	1ef3      	subs	r3, r6, #3
   b7010:	2b0d      	cmp	r3, #13
   b7012:	d83c      	bhi.n	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7014:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7018:	0053000e 	.word	0x0053000e
   b701c:	00d1003b 	.word	0x00d1003b
   b7020:	003b003b 	.word	0x003b003b
   b7024:	003b003b 	.word	0x003b003b
   b7028:	009b003b 	.word	0x009b003b
   b702c:	009b009b 	.word	0x009b009b
   b7030:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7034:	a804      	add	r0, sp, #16
   b7036:	f7ff fc73 	bl	b6920 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b703a:	9b04      	ldr	r3, [sp, #16]
   b703c:	89aa      	ldrh	r2, [r5, #12]
   b703e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7040:	6869      	ldr	r1, [r5, #4]
   b7042:	9804      	ldr	r0, [sp, #16]
   b7044:	3108      	adds	r1, #8
   b7046:	3002      	adds	r0, #2
   b7048:	f7ff fa90 	bl	b656c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b704c:	a904      	add	r1, sp, #16
   b704e:	a806      	add	r0, sp, #24
   b7050:	f7ff fde9 	bl	b6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7054:	a906      	add	r1, sp, #24
   b7056:	f104 0018 	add.w	r0, r4, #24
   b705a:	f7ff ff73 	bl	b6f44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b705e:	4605      	mov	r5, r0
   b7060:	a807      	add	r0, sp, #28
   b7062:	f7fd fd89 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7066:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7068:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b706a:	b9b5      	cbnz	r5, b709a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b706c:	4b5d      	ldr	r3, [pc, #372]	; (b71e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b706e:	495e      	ldr	r1, [pc, #376]	; (b71e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7070:	9300      	str	r3, [sp, #0]
   b7072:	2032      	movs	r0, #50	; 0x32
   b7074:	462b      	mov	r3, r5
   b7076:	aa06      	add	r2, sp, #24
   b7078:	9507      	str	r5, [sp, #28]
   b707a:	f7fe fb93 	bl	b57a4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b707e:	9b04      	ldr	r3, [sp, #16]
   b7080:	4629      	mov	r1, r5
   b7082:	8818      	ldrh	r0, [r3, #0]
   b7084:	f7fe f9d4 	bl	b5430 <hal_ble_gap_disconnect>
   b7088:	a805      	add	r0, sp, #20
   b708a:	f7fd fd75 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b708e:	a803      	add	r0, sp, #12
   b7090:	f7ff fa60 	bl	b6554 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7094:	b00e      	add	sp, #56	; 0x38
   b7096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b709a:	4a54      	ldr	r2, [pc, #336]	; (b71ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b709c:	9200      	str	r2, [sp, #0]
   b709e:	2300      	movs	r3, #0
   b70a0:	4951      	ldr	r1, [pc, #324]	; (b71e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b70a2:	9307      	str	r3, [sp, #28]
   b70a4:	aa06      	add	r2, sp, #24
   b70a6:	2001      	movs	r0, #1
   b70a8:	f7fe fb7c 	bl	b57a4 <log_message>
                if (impl->connectedCallback_) {
   b70ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b70ae:	2b00      	cmp	r3, #0
   b70b0:	d0ea      	beq.n	b7088 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b70b2:	a904      	add	r1, sp, #16
   b70b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b70b8:	f7ff fe37 	bl	b6d2a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b70bc:	e7e4      	b.n	b7088 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b70be:	89a9      	ldrh	r1, [r5, #12]
   b70c0:	4620      	mov	r0, r4
   b70c2:	f7ff fb91 	bl	b67e8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b70c6:	4606      	mov	r6, r0
   b70c8:	2800      	cmp	r0, #0
   b70ca:	d0e0      	beq.n	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b70cc:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b70ce:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b70d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b70d6:	8029      	strh	r1, [r5, #0]
   b70d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b70dc:	429a      	cmp	r2, r3
   b70de:	d003      	beq.n	b70e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b70e0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b70e4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b70e6:	e7f9      	b.n	b70dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b70e8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b70ec:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b70f0:	45b8      	cmp	r8, r7
   b70f2:	d004      	beq.n	b70fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b70f4:	1d38      	adds	r0, r7, #4
   b70f6:	f7fd fd3f 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b70fa:	3708      	adds	r7, #8
   b70fc:	e7f8      	b.n	b70f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b70fe:	2300      	movs	r3, #0
   b7100:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7102:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7106:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b710a:	45b8      	cmp	r8, r7
   b710c:	d004      	beq.n	b7118 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b710e:	1d38      	adds	r0, r7, #4
   b7110:	f7fd fd32 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7114:	3708      	adds	r7, #8
   b7116:	e7f8      	b.n	b710a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7118:	2300      	movs	r3, #0
   b711a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b711c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b711e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7120:	b123      	cbz	r3, b712c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7122:	4631      	mov	r1, r6
   b7124:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7128:	f7ff fdff 	bl	b6d2a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b712c:	2300      	movs	r3, #0
   b712e:	2220      	movs	r2, #32
   b7130:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7134:	4a2e      	ldr	r2, [pc, #184]	; (b71f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7136:	9200      	str	r2, [sp, #0]
   b7138:	492b      	ldr	r1, [pc, #172]	; (b71e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b713a:	aa06      	add	r2, sp, #24
   b713c:	2001      	movs	r0, #1
   b713e:	f7fe fb31 	bl	b57a4 <log_message>
                    impl->peers_.removeOne(*peer);
   b7142:	4631      	mov	r1, r6
   b7144:	f104 0018 	add.w	r0, r4, #24
   b7148:	f7ff ff35 	bl	b6fb6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b714c:	e79f      	b.n	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b714e:	89a9      	ldrh	r1, [r5, #12]
   b7150:	4620      	mov	r0, r4
   b7152:	f7ff fb49 	bl	b67e8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7156:	2800      	cmp	r0, #0
   b7158:	d099      	beq.n	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b715a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b715c:	2b00      	cmp	r3, #0
   b715e:	d096      	beq.n	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7160:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7162:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7164:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7168:	d001      	beq.n	b716e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b716a:	2e10      	cmp	r6, #16
   b716c:	d117      	bne.n	b719e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b716e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7170:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7172:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7174:	2506      	movs	r5, #6
                        };
   b7176:	f88d 3015 	strb.w	r3, [sp, #21]
   b717a:	9104      	str	r1, [sp, #16]
   b717c:	f88d 2014 	strb.w	r2, [sp, #20]
   b7180:	9006      	str	r0, [sp, #24]
   b7182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7186:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7188:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b718c:	9508      	str	r5, [sp, #32]
   b718e:	e883 0003 	stmia.w	r3, {r0, r1}
   b7192:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7194:	a906      	add	r1, sp, #24
   b7196:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b719a:	4798      	blx	r3
   b719c:	e777      	b.n	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b719e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b71a0:	bf01      	itttt	eq
   b71a2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b71a4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b71a6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b71aa:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b71ac:	bf0f      	iteee	eq
   b71ae:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b71b2:	461a      	movne	r2, r3
   b71b4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b71b6:	461d      	movne	r5, r3
   b71b8:	e7dd      	b.n	b7176 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b71ba:	89a9      	ldrh	r1, [r5, #12]
   b71bc:	4620      	mov	r0, r4
   b71be:	f7ff fb13 	bl	b67e8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b71c2:	4601      	mov	r1, r0
   b71c4:	2800      	cmp	r0, #0
   b71c6:	f43f af62 	beq.w	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b71ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b71cc:	2b00      	cmp	r3, #0
   b71ce:	f43f af5e 	beq.w	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b71d2:	686b      	ldr	r3, [r5, #4]
   b71d4:	9306      	str	r3, [sp, #24]
   b71d6:	aa06      	add	r2, sp, #24
   b71d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71da:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b71de:	4798      	blx	r3
   b71e0:	e755      	b.n	b708e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b71e2:	bf00      	nop
   b71e4:	000bbc84 	.word	0x000bbc84
   b71e8:	000bbc03 	.word	0x000bbc03
   b71ec:	000bbcaa 	.word	0x000bbcaa
   b71f0:	000bbcc7 	.word	0x000bbcc7

000b71f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b71f4:	b513      	push	{r0, r1, r4, lr}
   b71f6:	460b      	mov	r3, r1
   b71f8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b71fa:	e9d0 0100 	ldrd	r0, r1, [r0]
   b71fe:	466c      	mov	r4, sp
   b7200:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7204:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7208:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b720c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7210:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7214:	b002      	add	sp, #8
   b7216:	bd10      	pop	{r4, pc}

000b7218 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7218:	b538      	push	{r3, r4, r5, lr}
   b721a:	4605      	mov	r5, r0
   b721c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b721e:	f7ff ffe9 	bl	b71f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7222:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7224:	68a2      	ldr	r2, [r4, #8]
   b7226:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7228:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b722a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b722c:	68e2      	ldr	r2, [r4, #12]
   b722e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7230:	60e3      	str	r3, [r4, #12]
      }
   b7232:	bd38      	pop	{r3, r4, r5, pc}

000b7234 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7234:	b570      	push	{r4, r5, r6, lr}
   b7236:	4604      	mov	r4, r0
   b7238:	b08c      	sub	sp, #48	; 0x30
   b723a:	460e      	mov	r6, r1
   b723c:	9201      	str	r2, [sp, #4]
   b723e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7240:	f7ff fab2 	bl	b67a8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7244:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7246:	9901      	ldr	r1, [sp, #4]
   b7248:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b724c:	f7ff f816 	bl	b627c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7250:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7254:	b1cd      	cbz	r5, b728a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7256:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7258:	9502      	str	r5, [sp, #8]
   b725a:	a902      	add	r1, sp, #8
   b725c:	a804      	add	r0, sp, #16
   b725e:	9303      	str	r3, [sp, #12]
   b7260:	f7ff fc92 	bl	b6b88 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7264:	2300      	movs	r3, #0
	__x.swap(*this);
   b7266:	a908      	add	r1, sp, #32
   b7268:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b726a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b726c:	f7ff ffd4 	bl	b7218 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7270:	4631      	mov	r1, r6
   b7272:	a808      	add	r0, sp, #32
   b7274:	f7ff ffd0 	bl	b7218 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7278:	a808      	add	r0, sp, #32
   b727a:	f7fd f8b1 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
   b727e:	a804      	add	r0, sp, #16
   b7280:	f7fd f8ae 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
    }
   b7284:	4620      	mov	r0, r4
   b7286:	b00c      	add	sp, #48	; 0x30
   b7288:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b728a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b728c:	e7ea      	b.n	b7264 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7290 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7294:	b087      	sub	sp, #28
   b7296:	461d      	mov	r5, r3
   b7298:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b729c:	4680      	mov	r8, r0
   b729e:	468b      	mov	fp, r1
   b72a0:	4692      	mov	sl, r2
   b72a2:	9912      	ldr	r1, [sp, #72]	; 0x48
   b72a4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b72a6:	2200      	movs	r2, #0
   b72a8:	2068      	movs	r0, #104	; 0x68
   b72aa:	9102      	str	r1, [sp, #8]
   b72ac:	9204      	str	r2, [sp, #16]
   b72ae:	f7fc fef2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b72b2:	1e06      	subs	r6, r0, #0
   b72b4:	f106 090c 	add.w	r9, r6, #12
   b72b8:	d018      	beq.n	b72ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b72ba:	2201      	movs	r2, #1
	: _M_impl(__a)
   b72bc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b72be:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b72c2:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b72c4:	4a15      	ldr	r2, [pc, #84]	; (b731c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b72c6:	f847 2b20 	str.w	r2, [r7], #32
   b72ca:	9b03      	ldr	r3, [sp, #12]
   b72cc:	9100      	str	r1, [sp, #0]
   b72ce:	465a      	mov	r2, fp
   b72d0:	4651      	mov	r1, sl
   b72d2:	4648      	mov	r0, r9
   b72d4:	f7ff ffae 	bl	b7234 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b72d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b72dc:	682b      	ldr	r3, [r5, #0]
   b72de:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b72e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b72e2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b72e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b72e8:	6823      	ldr	r3, [r4, #0]
   b72ea:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b72ec:	a904      	add	r1, sp, #16
   b72ee:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b72f0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b72f4:	f7ff fd08 	bl	b6d08 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b72f8:	a805      	add	r0, sp, #20
   b72fa:	f7fd fc3d 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b72fe:	f8d8 3000 	ldr.w	r3, [r8]
   b7302:	b93b      	cbnz	r3, b7314 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7304:	4a06      	ldr	r2, [pc, #24]	; (b7320 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7306:	4907      	ldr	r1, [pc, #28]	; (b7324 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7308:	200a      	movs	r0, #10
}
   b730a:	b007      	add	sp, #28
   b730c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7310:	f7fe ba40 	b.w	b5794 <panic_>
}
   b7314:	b007      	add	sp, #28
   b7316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b731a:	bf00      	nop
   b731c:	000bbd40 	.word	0x000bbd40
   b7320:	000b53a1 	.word	0x000b53a1
   b7324:	000bbbec 	.word	0x000bbbec

000b7328 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7328:	b538      	push	{r3, r4, r5, lr}
   b732a:	4605      	mov	r5, r0
   b732c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b732e:	f7ff ff61 	bl	b71f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7332:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7334:	68a2      	ldr	r2, [r4, #8]
   b7336:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7338:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b733a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b733c:	68e2      	ldr	r2, [r4, #12]
   b733e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7340:	60e3      	str	r3, [r4, #12]
      }
   b7342:	bd38      	pop	{r3, r4, r5, pc}

000b7344 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7344:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7346:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7348:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b734a:	3424      	adds	r4, #36	; 0x24
   b734c:	b1b9      	cbz	r1, b737e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b734e:	e9cd 1200 	strd	r1, r2, [sp]
   b7352:	a802      	add	r0, sp, #8
   b7354:	4669      	mov	r1, sp
   b7356:	f7ff fc2f 	bl	b6bb8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b735a:	2300      	movs	r3, #0
	__x.swap(*this);
   b735c:	a906      	add	r1, sp, #24
   b735e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7360:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7362:	f7ff ffe1 	bl	b7328 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7366:	4621      	mov	r1, r4
   b7368:	a806      	add	r0, sp, #24
   b736a:	f7ff ffdd 	bl	b7328 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b736e:	a806      	add	r0, sp, #24
   b7370:	f7fd f836 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
   b7374:	a802      	add	r0, sp, #8
   b7376:	f7fd f833 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
}
   b737a:	b00a      	add	sp, #40	; 0x28
   b737c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b737e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7380:	e7eb      	b.n	b735a <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7382 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7382:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7386:	4604      	mov	r4, r0
   b7388:	460d      	mov	r5, r1
   b738a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b738c:	d914      	bls.n	b73b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b738e:	4290      	cmp	r0, r2
   b7390:	d213      	bcs.n	b73ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7392:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7396:	1a75      	subs	r5, r6, r1
   b7398:	f1a1 0708 	sub.w	r7, r1, #8
   b739c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b739e:	42b7      	cmp	r7, r6
   b73a0:	d018      	beq.n	b73d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b73a2:	b11c      	cbz	r4, b73ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b73a4:	4631      	mov	r1, r6
   b73a6:	4620      	mov	r0, r4
   b73a8:	f7ff fc33 	bl	b6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b73ac:	1d30      	adds	r0, r6, #4
   b73ae:	f7fd fbe3 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b73b2:	3e08      	subs	r6, #8
   b73b4:	3c08      	subs	r4, #8
   b73b6:	e7f2      	b.n	b739e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b73b8:	d00c      	beq.n	b73d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b73ba:	42b5      	cmp	r5, r6
   b73bc:	d00a      	beq.n	b73d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b73be:	b11c      	cbz	r4, b73c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b73c0:	4629      	mov	r1, r5
   b73c2:	4620      	mov	r0, r4
   b73c4:	f7ff fc25 	bl	b6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b73c8:	1d28      	adds	r0, r5, #4
   b73ca:	f7fd fbd5 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b73ce:	3508      	adds	r5, #8
   b73d0:	3408      	adds	r4, #8
   b73d2:	e7f2      	b.n	b73ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b73d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b73d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b73d6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b73d8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b73da:	4605      	mov	r5, r0
        if (n > 0) {
   b73dc:	dd11      	ble.n	b7402 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b73de:	00f0      	lsls	r0, r6, #3
   b73e0:	f7fe fac4 	bl	b596c <malloc>
            if (!d) {
   b73e4:	4604      	mov	r4, r0
   b73e6:	b158      	cbz	r0, b7400 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b73e8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b73ec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b73f0:	f7ff ffc7 	bl	b7382 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b73f4:	6828      	ldr	r0, [r5, #0]
   b73f6:	f7fe fac1 	bl	b597c <free>
        data_ = d;
   b73fa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b73fc:	60ae      	str	r6, [r5, #8]
        return true;
   b73fe:	2001      	movs	r0, #1
    }
   b7400:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7402:	2400      	movs	r4, #0
   b7404:	e7f6      	b.n	b73f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7406 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7406:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7408:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b740a:	6845      	ldr	r5, [r0, #4]
   b740c:	4668      	mov	r0, sp
   b740e:	f7ff fc00 	bl	b6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7412:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7416:	4299      	cmp	r1, r3
   b7418:	da10      	bge.n	b743c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b741a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b741c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b741e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7422:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7426:	4629      	mov	r1, r5
   b7428:	f105 0008 	add.w	r0, r5, #8
   b742c:	f7ff ffa9 	bl	b7382 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7430:	b98d      	cbnz	r5, b7456 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7432:	6863      	ldr	r3, [r4, #4]
   b7434:	3301      	adds	r3, #1
   b7436:	6063      	str	r3, [r4, #4]
    return true;
   b7438:	2601      	movs	r6, #1
   b743a:	e006      	b.n	b744a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b743c:	3101      	adds	r1, #1
   b743e:	4620      	mov	r0, r4
   b7440:	f7ff ffc9 	bl	b73d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7444:	4606      	mov	r6, r0
   b7446:	2800      	cmp	r0, #0
   b7448:	d1e7      	bne.n	b741a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b744a:	a801      	add	r0, sp, #4
   b744c:	f7fd fb94 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7450:	4630      	mov	r0, r6
   b7452:	b002      	add	sp, #8
   b7454:	bd70      	pop	{r4, r5, r6, pc}
   b7456:	4669      	mov	r1, sp
   b7458:	4628      	mov	r0, r5
   b745a:	f7ff fbda 	bl	b6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b745e:	e7e8      	b.n	b7432 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7460 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7460:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7464:	4604      	mov	r4, r0
   b7466:	460d      	mov	r5, r1
   b7468:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b746a:	d914      	bls.n	b7496 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b746c:	4290      	cmp	r0, r2
   b746e:	d213      	bcs.n	b7498 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7470:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7474:	1a75      	subs	r5, r6, r1
   b7476:	f1a1 0708 	sub.w	r7, r1, #8
   b747a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b747c:	42b7      	cmp	r7, r6
   b747e:	d018      	beq.n	b74b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7480:	b11c      	cbz	r4, b748a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7482:	4631      	mov	r1, r6
   b7484:	4620      	mov	r0, r4
   b7486:	f7ff fbb6 	bl	b6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b748a:	1d30      	adds	r0, r6, #4
   b748c:	f7fd fb74 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7490:	3e08      	subs	r6, #8
   b7492:	3c08      	subs	r4, #8
   b7494:	e7f2      	b.n	b747c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7496:	d00c      	beq.n	b74b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7498:	42b5      	cmp	r5, r6
   b749a:	d00a      	beq.n	b74b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b749c:	b11c      	cbz	r4, b74a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b749e:	4629      	mov	r1, r5
   b74a0:	4620      	mov	r0, r4
   b74a2:	f7ff fba8 	bl	b6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b74a6:	1d28      	adds	r0, r5, #4
   b74a8:	f7fd fb66 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b74ac:	3508      	adds	r5, #8
   b74ae:	3408      	adds	r4, #8
   b74b0:	e7f2      	b.n	b7498 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b74b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b74b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b74b4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b74b6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b74b8:	4605      	mov	r5, r0
        if (n > 0) {
   b74ba:	dd11      	ble.n	b74e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b74bc:	00f0      	lsls	r0, r6, #3
   b74be:	f7fe fa55 	bl	b596c <malloc>
            if (!d) {
   b74c2:	4604      	mov	r4, r0
   b74c4:	b158      	cbz	r0, b74de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b74c6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b74ca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b74ce:	f7ff ffc7 	bl	b7460 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b74d2:	6828      	ldr	r0, [r5, #0]
   b74d4:	f7fe fa52 	bl	b597c <free>
        data_ = d;
   b74d8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b74da:	60ae      	str	r6, [r5, #8]
        return true;
   b74dc:	2001      	movs	r0, #1
    }
   b74de:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b74e0:	2400      	movs	r4, #0
   b74e2:	e7f6      	b.n	b74d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b74e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b74e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b74e6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b74e8:	6845      	ldr	r5, [r0, #4]
   b74ea:	4668      	mov	r0, sp
   b74ec:	f7ff fb83 	bl	b6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74f0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b74f4:	4299      	cmp	r1, r3
   b74f6:	da10      	bge.n	b751a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b74f8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b74fa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b74fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7500:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7504:	4629      	mov	r1, r5
   b7506:	f105 0008 	add.w	r0, r5, #8
   b750a:	f7ff ffa9 	bl	b7460 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b750e:	b98d      	cbnz	r5, b7534 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7510:	6863      	ldr	r3, [r4, #4]
   b7512:	3301      	adds	r3, #1
   b7514:	6063      	str	r3, [r4, #4]
    return true;
   b7516:	2601      	movs	r6, #1
   b7518:	e006      	b.n	b7528 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b751a:	3101      	adds	r1, #1
   b751c:	4620      	mov	r0, r4
   b751e:	f7ff ffc9 	bl	b74b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7522:	4606      	mov	r6, r0
   b7524:	2800      	cmp	r0, #0
   b7526:	d1e7      	bne.n	b74f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7528:	a801      	add	r0, sp, #4
   b752a:	f7fd fb25 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b752e:	4630      	mov	r0, r6
   b7530:	b002      	add	sp, #8
   b7532:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7534:	4669      	mov	r1, sp
   b7536:	4628      	mov	r0, r5
   b7538:	f7ff fb5d 	bl	b6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b753c:	e7e8      	b.n	b7510 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b7540 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7544:	4617      	mov	r7, r2
   b7546:	b0a1      	sub	sp, #132	; 0x84
   b7548:	4680      	mov	r8, r0
    WiringBleLock lk;
   b754a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b754c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b754e:	f7fe fff3 	bl	b6538 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7552:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7554:	7923      	ldrb	r3, [r4, #4]
   b7556:	b953      	cbnz	r3, b756e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7558:	4639      	mov	r1, r7
   b755a:	4640      	mov	r0, r8
   b755c:	f7ff fb4b 	bl	b6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7560:	a80a      	add	r0, sp, #40	; 0x28
   b7562:	f7fe fff7 	bl	b6554 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7566:	4640      	mov	r0, r8
   b7568:	b021      	add	sp, #132	; 0x84
   b756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b756e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7570:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7574:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7578:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b757a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b757e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7582:	9b03      	ldr	r3, [sp, #12]
   b7584:	429d      	cmp	r5, r3
   b7586:	d021      	beq.n	b75cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7588:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b758c:	4658      	mov	r0, fp
   b758e:	f109 0114 	add.w	r1, r9, #20
   b7592:	f7ff f87e 	bl	b6692 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7596:	b1b8      	cbz	r0, b75c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7598:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b759c:	4650      	mov	r0, sl
   b759e:	f7ff f878 	bl	b6692 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b75a2:	b188      	cbz	r0, b75c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b75a4:	6823      	ldr	r3, [r4, #0]
   b75a6:	f8d9 2000 	ldr.w	r2, [r9]
   b75aa:	4053      	eors	r3, r2
   b75ac:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b75b0:	d10a      	bne.n	b75c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b75b2:	2220      	movs	r2, #32
   b75b4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b75b8:	4a5e      	ldr	r2, [pc, #376]	; (b7734 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b75ba:	9200      	str	r2, [sp, #0]
   b75bc:	aa15      	add	r2, sp, #84	; 0x54
   b75be:	495e      	ldr	r1, [pc, #376]	; (b7738 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b75c0:	2032      	movs	r0, #50	; 0x32
   b75c2:	f7fe f8ef 	bl	b57a4 <log_message>
   b75c6:	e7c7      	b.n	b7558 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b75c8:	3508      	adds	r5, #8
   b75ca:	e7da      	b.n	b7582 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b75cc:	4650      	mov	r0, sl
   b75ce:	f7ff f831 	bl	b6634 <_ZNK8particle7BleUuid7isValidEv>
   b75d2:	b960      	cbnz	r0, b75ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b75d4:	4959      	ldr	r1, [pc, #356]	; (b773c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b75d6:	2201      	movs	r2, #1
   b75d8:	a815      	add	r0, sp, #84	; 0x54
   b75da:	ad15      	add	r5, sp, #84	; 0x54
   b75dc:	f7ff f802 	bl	b65e4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b75e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75e2:	46d4      	mov	ip, sl
   b75e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b75e8:	682b      	ldr	r3, [r5, #0]
   b75ea:	f8cc 3000 	str.w	r3, [ip]
   b75ee:	6833      	ldr	r3, [r6, #0]
   b75f0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b75f4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b75f8:	455d      	cmp	r5, fp
   b75fa:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b75fc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b75fe:	d06e      	beq.n	b76de <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7600:	f855 0b08 	ldr.w	r0, [r5], #8
   b7604:	f7ff f845 	bl	b6692 <_ZNK8particle7BleUuideqERKS0_>
   b7608:	2800      	cmp	r0, #0
   b760a:	d0f5      	beq.n	b75f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b760c:	f104 0a14 	add.w	sl, r4, #20
   b7610:	4650      	mov	r0, sl
   b7612:	f7ff f80f 	bl	b6634 <_ZNK8particle7BleUuid7isValidEv>
   b7616:	b988      	cbnz	r0, b763c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7618:	4b49      	ldr	r3, [pc, #292]	; (b7740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b761a:	4948      	ldr	r1, [pc, #288]	; (b773c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b761c:	881a      	ldrh	r2, [r3, #0]
   b761e:	3201      	adds	r2, #1
   b7620:	b292      	uxth	r2, r2
   b7622:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7624:	a815      	add	r0, sp, #84	; 0x54
   b7626:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7628:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b762a:	f7fe fffa 	bl	b6622 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b762e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7630:	46d4      	mov	ip, sl
   b7632:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7636:	682b      	ldr	r3, [r5, #0]
   b7638:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b763c:	4b41      	ldr	r3, [pc, #260]	; (b7744 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b763e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7640:	2228      	movs	r2, #40	; 0x28
   b7642:	2100      	movs	r1, #0
   b7644:	a816      	add	r0, sp, #88	; 0x58
   b7646:	f001 ff10 	bl	b946a <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b764a:	4651      	mov	r1, sl
   b764c:	a804      	add	r0, sp, #16
   b764e:	f7ff f803 	bl	b6658 <_ZN8particle7BleUuid7halUUIDEv>
   b7652:	ab04      	add	r3, sp, #16
   b7654:	aa18      	add	r2, sp, #96	; 0x60
   b7656:	f10d 0c20 	add.w	ip, sp, #32
   b765a:	6818      	ldr	r0, [r3, #0]
   b765c:	6859      	ldr	r1, [r3, #4]
   b765e:	4615      	mov	r5, r2
   b7660:	c503      	stmia	r5!, {r0, r1}
   b7662:	3308      	adds	r3, #8
   b7664:	4563      	cmp	r3, ip
   b7666:	462a      	mov	r2, r5
   b7668:	d1f7      	bne.n	b765a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b766a:	6818      	ldr	r0, [r3, #0]
   b766c:	6028      	str	r0, [r5, #0]
    return value_;
   b766e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7670:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7674:	f8d9 3000 	ldr.w	r3, [r9]
   b7678:	8a9b      	ldrh	r3, [r3, #20]
   b767a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b767e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7680:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7682:	4b31      	ldr	r3, [pc, #196]	; (b7748 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7684:	2200      	movs	r2, #0
   b7686:	1da1      	adds	r1, r4, #6
   b7688:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b768a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b768e:	f7fd ff01 	bl	b5494 <hal_ble_gatt_server_add_characteristic>
   b7692:	2800      	cmp	r0, #0
   b7694:	f47f af60 	bne.w	b7558 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7698:	2301      	movs	r3, #1
   b769a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b769c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b769e:	4639      	mov	r1, r7
        return characteristics_;
   b76a0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b76a2:	a80d      	add	r0, sp, #52	; 0x34
   b76a4:	f7ff faa7 	bl	b6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b76a8:	4620      	mov	r0, r4
   b76aa:	a90d      	add	r1, sp, #52	; 0x34
   b76ac:	f7ff ff1a 	bl	b74e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b76b0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b76b2:	a80e      	add	r0, sp, #56	; 0x38
   b76b4:	f7fd fa60 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b76b8:	2c00      	cmp	r4, #0
   b76ba:	f47f af4d 	bne.w	b7558 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b76be:	2320      	movs	r3, #32
   b76c0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b76c4:	4b21      	ldr	r3, [pc, #132]	; (b774c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b76c6:	9300      	str	r3, [sp, #0]
   b76c8:	aa0d      	add	r2, sp, #52	; 0x34
   b76ca:	4623      	mov	r3, r4
   b76cc:	e777      	b.n	b75be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b76ce:	4639      	mov	r1, r7
   b76d0:	4640      	mov	r0, r8
   b76d2:	f7ff fa90 	bl	b6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b76d6:	a80c      	add	r0, sp, #48	; 0x30
   b76d8:	f7fd fa4e 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b76dc:	e740      	b.n	b7560 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b76de:	a80b      	add	r0, sp, #44	; 0x2c
   b76e0:	f7ff f8fa 	bl	b68d8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b76e4:	4651      	mov	r1, sl
   b76e6:	a815      	add	r0, sp, #84	; 0x54
   b76e8:	f7fe ffb6 	bl	b6658 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b76ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b76ee:	2300      	movs	r3, #0
   b76f0:	3214      	adds	r2, #20
   b76f2:	a915      	add	r1, sp, #84	; 0x54
   b76f4:	2001      	movs	r0, #1
   b76f6:	f7fd fea5 	bl	b5444 <hal_ble_gatt_server_add_service>
   b76fa:	2800      	cmp	r0, #0
   b76fc:	d1e7      	bne.n	b76ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b76fe:	6835      	ldr	r5, [r6, #0]
   b7700:	a90b      	add	r1, sp, #44	; 0x2c
   b7702:	a80d      	add	r0, sp, #52	; 0x34
   b7704:	f7ff fa85 	bl	b6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7708:	4628      	mov	r0, r5
   b770a:	a90d      	add	r1, sp, #52	; 0x34
   b770c:	f7ff fe7b 	bl	b7406 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7710:	4605      	mov	r5, r0
   b7712:	a80e      	add	r0, sp, #56	; 0x38
   b7714:	f7fd fa30 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7718:	2d00      	cmp	r5, #0
   b771a:	d0d8      	beq.n	b76ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b771c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b771e:	6853      	ldr	r3, [r2, #4]
   b7720:	6812      	ldr	r2, [r2, #0]
   b7722:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7726:	3b01      	subs	r3, #1
   b7728:	a80c      	add	r0, sp, #48	; 0x30
   b772a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b772e:	f7fd fa23 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7732:	e76b      	b.n	b760c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7734:	000bbce6 	.word	0x000bbce6
   b7738:	000bbc03 	.word	0x000bbc03
   b773c:	000bbdaa 	.word	0x000bbdaa
   b7740:	2003e690 	.word	0x2003e690
   b7744:	002c0003 	.word	0x002c0003
   b7748:	000b6a71 	.word	0x000b6a71
   b774c:	000bbd11 	.word	0x000bbd11

000b7750 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7750:	4802      	ldr	r0, [pc, #8]	; (b775c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7752:	2300      	movs	r3, #0
   b7754:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7756:	f7fd bef5 	b.w	b5544 <os_mutex_recursive_create>
   b775a:	bf00      	nop
   b775c:	2003e694 	.word	0x2003e694

000b7760 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7762:	4606      	mov	r6, r0
   b7764:	460d      	mov	r5, r1
  size_t n = 0;
   b7766:	188f      	adds	r7, r1, r2
   b7768:	2400      	movs	r4, #0
  while (size--) {
   b776a:	42bd      	cmp	r5, r7
   b776c:	d00c      	beq.n	b7788 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b776e:	6833      	ldr	r3, [r6, #0]
   b7770:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7774:	689b      	ldr	r3, [r3, #8]
   b7776:	4630      	mov	r0, r6
   b7778:	4798      	blx	r3
     if (chunk>=0)
   b777a:	1e03      	subs	r3, r0, #0
   b777c:	db01      	blt.n	b7782 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b777e:	441c      	add	r4, r3
  while (size--) {
   b7780:	e7f3      	b.n	b776a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7782:	2c00      	cmp	r4, #0
   b7784:	bf08      	it	eq
   b7786:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7788:	4620      	mov	r0, r4
   b778a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b778c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b778c:	b513      	push	{r0, r1, r4, lr}
   b778e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7790:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7792:	b159      	cbz	r1, b77ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7794:	9101      	str	r1, [sp, #4]
   b7796:	f001 fede 	bl	b9556 <strlen>
   b779a:	6823      	ldr	r3, [r4, #0]
   b779c:	9901      	ldr	r1, [sp, #4]
   b779e:	68db      	ldr	r3, [r3, #12]
   b77a0:	4602      	mov	r2, r0
   b77a2:	4620      	mov	r0, r4
    }
   b77a4:	b002      	add	sp, #8
   b77a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b77aa:	4718      	bx	r3
    }
   b77ac:	b002      	add	sp, #8
   b77ae:	bd10      	pop	{r4, pc}

000b77b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b77b0:	6803      	ldr	r3, [r0, #0]
   b77b2:	689b      	ldr	r3, [r3, #8]
   b77b4:	4718      	bx	r3

000b77b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b77b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b77b8:	210d      	movs	r1, #13
{
   b77ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   b77bc:	f7ff fff8 	bl	b77b0 <_ZN5Print5printEc>
  n += print('\n');
   b77c0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b77c2:	4604      	mov	r4, r0
  n += print('\n');
   b77c4:	4628      	mov	r0, r5
   b77c6:	f7ff fff3 	bl	b77b0 <_ZN5Print5printEc>
  return n;
}
   b77ca:	4420      	add	r0, r4
   b77cc:	bd38      	pop	{r3, r4, r5, pc}

000b77ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b77ce:	b538      	push	{r3, r4, r5, lr}
   b77d0:	4605      	mov	r5, r0
  return write(str);
   b77d2:	f7ff ffdb 	bl	b778c <_ZN5Print5writeEPKc>
   b77d6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b77d8:	4628      	mov	r0, r5
   b77da:	f7ff ffec 	bl	b77b6 <_ZN5Print7printlnEv>
  return n;
}
   b77de:	4420      	add	r0, r4
   b77e0:	bd38      	pop	{r3, r4, r5, pc}

000b77e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b77e2:	b530      	push	{r4, r5, lr}
   b77e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b77e6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b77e8:	2a01      	cmp	r2, #1
  *str = '\0';
   b77ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b77ee:	bf98      	it	ls
   b77f0:	220a      	movls	r2, #10
   b77f2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b77f4:	460d      	mov	r5, r1
   b77f6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b77fa:	fb01 5312 	mls	r3, r1, r2, r5
   b77fe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7802:	2b09      	cmp	r3, #9
   b7804:	bf94      	ite	ls
   b7806:	3330      	addls	r3, #48	; 0x30
   b7808:	3337      	addhi	r3, #55	; 0x37
   b780a:	b2db      	uxtb	r3, r3
  } while(n);
   b780c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b780e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7812:	d9ef      	bls.n	b77f4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7814:	4621      	mov	r1, r4
   b7816:	f7ff ffb9 	bl	b778c <_ZN5Print5writeEPKc>
}
   b781a:	b00b      	add	sp, #44	; 0x2c
   b781c:	bd30      	pop	{r4, r5, pc}

000b781e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b781e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7822:	b086      	sub	sp, #24
   b7824:	af00      	add	r7, sp, #0
   b7826:	4605      	mov	r5, r0
   b7828:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b782a:	1d38      	adds	r0, r7, #4
   b782c:	2114      	movs	r1, #20
{
   b782e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7830:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7832:	f7fe f8c3 	bl	b59bc <vsnprintf>

    if (n<bufsize)
   b7836:	2813      	cmp	r0, #19
   b7838:	d80e      	bhi.n	b7858 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b783a:	1d39      	adds	r1, r7, #4
   b783c:	4628      	mov	r0, r5
   b783e:	f7ff ffa5 	bl	b778c <_ZN5Print5writeEPKc>
   b7842:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7844:	b11e      	cbz	r6, b784e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7846:	4628      	mov	r0, r5
   b7848:	f7ff ffb5 	bl	b77b6 <_ZN5Print7printlnEv>
   b784c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b784e:	4620      	mov	r0, r4
   b7850:	3718      	adds	r7, #24
   b7852:	46bd      	mov	sp, r7
   b7854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7858:	f100 0308 	add.w	r3, r0, #8
   b785c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7860:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7862:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7866:	4622      	mov	r2, r4
   b7868:	1c41      	adds	r1, r0, #1
   b786a:	683b      	ldr	r3, [r7, #0]
   b786c:	4668      	mov	r0, sp
   b786e:	f7fe f8a5 	bl	b59bc <vsnprintf>
  return write(str);
   b7872:	4669      	mov	r1, sp
   b7874:	4628      	mov	r0, r5
   b7876:	f7ff ff89 	bl	b778c <_ZN5Print5writeEPKc>
   b787a:	4604      	mov	r4, r0
   b787c:	46c5      	mov	sp, r8
   b787e:	e7e1      	b.n	b7844 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7880 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7880:	4b01      	ldr	r3, [pc, #4]	; (b7888 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7882:	4a02      	ldr	r2, [pc, #8]	; (b788c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7884:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7886:	4770      	bx	lr
   b7888:	2003e69c 	.word	0x2003e69c
   b788c:	000bbdca 	.word	0x000bbdca

000b7890 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7894:	4a15      	ldr	r2, [pc, #84]	; (b78ec <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7896:	f8df 8060 	ldr.w	r8, [pc, #96]	; b78f8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b789a:	e9d2 6300 	ldrd	r6, r3, [r2]
   b789e:	1980      	adds	r0, r0, r6
   b78a0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b78a4:	4b12      	ldr	r3, [pc, #72]	; (b78f0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b78a6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b78aa:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b78ae:	1986      	adds	r6, r0, r6
   b78b0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b78b4:	42bb      	cmp	r3, r7
   b78b6:	bf08      	it	eq
   b78b8:	42b2      	cmpeq	r2, r6
{
   b78ba:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b78bc:	d013      	beq.n	b78e6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b78be:	a903      	add	r1, sp, #12
   b78c0:	4668      	mov	r0, sp
   b78c2:	e9cd 6700 	strd	r6, r7, [sp]
   b78c6:	f7fe f8a9 	bl	b5a1c <localtime_r>
	calendar_time.tm_year += 1900;
   b78ca:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b78cc:	4d09      	ldr	r5, [pc, #36]	; (b78f4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b78ce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b78d2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b78d4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b78d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b78d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b78da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b78dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b78de:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b78e2:	6823      	ldr	r3, [r4, #0]
   b78e4:	602b      	str	r3, [r5, #0]
    }
}
   b78e6:	b00c      	add	sp, #48	; 0x30
   b78e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b78ec:	2003e6d0 	.word	0x2003e6d0
   b78f0:	2003e6c8 	.word	0x2003e6c8
   b78f4:	2003e6a4 	.word	0x2003e6a4
   b78f8:	2003e6d8 	.word	0x2003e6d8

000b78fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b78fc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b78fe:	2000      	movs	r0, #0
   b7900:	f7fe f824 	bl	b594c <spark_sync_time_pending>
   b7904:	b128      	cbz	r0, b7912 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7906:	f7fe f809 	bl	b591c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b790a:	f080 0001 	eor.w	r0, r0, #1
   b790e:	b2c0      	uxtb	r0, r0
    }
   b7910:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7912:	2001      	movs	r0, #1
   b7914:	e7fc      	b.n	b7910 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b7918 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b7918:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b791a:	f7ff ffb9 	bl	b7890 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b791e:	4b02      	ldr	r3, [pc, #8]	; (b7928 <_ZN9TimeClass5monthEx+0x10>)
   b7920:	6918      	ldr	r0, [r3, #16]
}
   b7922:	3001      	adds	r0, #1
   b7924:	bd08      	pop	{r3, pc}
   b7926:	bf00      	nop
   b7928:	2003e6a4 	.word	0x2003e6a4

000b792c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b792c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b7930:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b7938:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b793a:	d411      	bmi.n	b7960 <_ZN9TimeClass4zoneEf+0x34>
   b793c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b7940:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7948:	dc0a      	bgt.n	b7960 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b794a:	eddf 7a06 	vldr	s15, [pc, #24]	; b7964 <_ZN9TimeClass4zoneEf+0x38>
   b794e:	ee60 7a27 	vmul.f32	s15, s0, s15
   b7952:	ee17 0a90 	vmov	r0, s15
   b7956:	f001 fcf1 	bl	b933c <__aeabi_f2lz>
   b795a:	4b03      	ldr	r3, [pc, #12]	; (b7968 <_ZN9TimeClass4zoneEf+0x3c>)
   b795c:	e9c3 0100 	strd	r0, r1, [r3]
}
   b7960:	bd08      	pop	{r3, pc}
   b7962:	bf00      	nop
   b7964:	45610000 	.word	0x45610000
   b7968:	2003e6d0 	.word	0x2003e6d0

000b796c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b796c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b796e:	2000      	movs	r0, #0
   b7970:	f7fd fd26 	bl	b53c0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7974:	4604      	mov	r4, r0
   b7976:	b9a0      	cbnz	r0, b79a2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7978:	f7fd ff1c 	bl	b57b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b797c:	2801      	cmp	r0, #1
   b797e:	d110      	bne.n	b79a2 <_ZN9TimeClass7isValidEv+0x36>
   b7980:	4620      	mov	r0, r4
   b7982:	f7fd ff47 	bl	b5814 <system_thread_get_state>
   b7986:	b960      	cbnz	r0, b79a2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7988:	f7ff ffb8 	bl	b78fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b798c:	b910      	cbnz	r0, b7994 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b798e:	f7fd ffbd 	bl	b590c <spark_process>
        while (_while() && !_condition()) {
   b7992:	e7f9      	b.n	b7988 <_ZN9TimeClass7isValidEv+0x1c>
   b7994:	f7ff ffb2 	bl	b78fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b799c:	2000      	movs	r0, #0
   b799e:	f7fd bd0f 	b.w	b53c0 <hal_rtc_time_is_valid>
}
   b79a2:	4620      	mov	r0, r4
   b79a4:	bd10      	pop	{r4, pc}

000b79a6 <_ZN9TimeClass3nowEv>:
{
   b79a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b79a8:	f7ff ffe0 	bl	b796c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b79ac:	2210      	movs	r2, #16
   b79ae:	2100      	movs	r1, #0
   b79b0:	4668      	mov	r0, sp
   b79b2:	f001 fd5a 	bl	b946a <memset>
    hal_rtc_get_time(&tv, nullptr);
   b79b6:	2100      	movs	r1, #0
   b79b8:	4668      	mov	r0, sp
   b79ba:	f7fd fd09 	bl	b53d0 <hal_rtc_get_time>
}
   b79be:	9800      	ldr	r0, [sp, #0]
   b79c0:	b005      	add	sp, #20
   b79c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b79c8 <_ZN9TimeClass4hourEv>:
{
   b79c8:	b508      	push	{r3, lr}
	return hour(now());
   b79ca:	f7ff ffec 	bl	b79a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b79ce:	17c1      	asrs	r1, r0, #31
   b79d0:	f7ff ff5e 	bl	b7890 <_ZL22Refresh_UnixTime_Cachex>
}
   b79d4:	4b01      	ldr	r3, [pc, #4]	; (b79dc <_ZN9TimeClass4hourEv+0x14>)
   b79d6:	6898      	ldr	r0, [r3, #8]
   b79d8:	bd08      	pop	{r3, pc}
   b79da:	bf00      	nop
   b79dc:	2003e6a4 	.word	0x2003e6a4

000b79e0 <_ZN9TimeClass6minuteEv>:
{
   b79e0:	b508      	push	{r3, lr}
	return minute(now());
   b79e2:	f7ff ffe0 	bl	b79a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b79e6:	17c1      	asrs	r1, r0, #31
   b79e8:	f7ff ff52 	bl	b7890 <_ZL22Refresh_UnixTime_Cachex>
}
   b79ec:	4b01      	ldr	r3, [pc, #4]	; (b79f4 <_ZN9TimeClass6minuteEv+0x14>)
   b79ee:	6858      	ldr	r0, [r3, #4]
   b79f0:	bd08      	pop	{r3, pc}
   b79f2:	bf00      	nop
   b79f4:	2003e6a4 	.word	0x2003e6a4

000b79f8 <_ZN9TimeClass6secondEv>:
{
   b79f8:	b508      	push	{r3, lr}
	return second(now());
   b79fa:	f7ff ffd4 	bl	b79a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b79fe:	17c1      	asrs	r1, r0, #31
   b7a00:	f7ff ff46 	bl	b7890 <_ZL22Refresh_UnixTime_Cachex>
}
   b7a04:	4b01      	ldr	r3, [pc, #4]	; (b7a0c <_ZN9TimeClass6secondEv+0x14>)
   b7a06:	6818      	ldr	r0, [r3, #0]
   b7a08:	bd08      	pop	{r3, pc}
   b7a0a:	bf00      	nop
   b7a0c:	2003e6a4 	.word	0x2003e6a4

000b7a10 <_ZN9TimeClass3dayEv>:
{
   b7a10:	b508      	push	{r3, lr}
	return day(now());
   b7a12:	f7ff ffc8 	bl	b79a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7a16:	17c1      	asrs	r1, r0, #31
   b7a18:	f7ff ff3a 	bl	b7890 <_ZL22Refresh_UnixTime_Cachex>
}
   b7a1c:	4b01      	ldr	r3, [pc, #4]	; (b7a24 <_ZN9TimeClass3dayEv+0x14>)
   b7a1e:	68d8      	ldr	r0, [r3, #12]
   b7a20:	bd08      	pop	{r3, pc}
   b7a22:	bf00      	nop
   b7a24:	2003e6a4 	.word	0x2003e6a4

000b7a28 <_ZN9TimeClass5monthEv>:
{
   b7a28:	b508      	push	{r3, lr}
	return month(now());
   b7a2a:	f7ff ffbc 	bl	b79a6 <_ZN9TimeClass3nowEv>
}
   b7a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b7a32:	17c1      	asrs	r1, r0, #31
   b7a34:	f7ff bf70 	b.w	b7918 <_ZN9TimeClass5monthEx>

000b7a38 <_ZN9TimeClass4yearEv>:
{
   b7a38:	b508      	push	{r3, lr}
	return year(now());
   b7a3a:	f7ff ffb4 	bl	b79a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7a3e:	17c1      	asrs	r1, r0, #31
   b7a40:	f7ff ff26 	bl	b7890 <_ZL22Refresh_UnixTime_Cachex>
}
   b7a44:	4b01      	ldr	r3, [pc, #4]	; (b7a4c <_ZN9TimeClass4yearEv+0x14>)
   b7a46:	6958      	ldr	r0, [r3, #20]
   b7a48:	bd08      	pop	{r3, pc}
   b7a4a:	bf00      	nop
   b7a4c:	2003e6a4 	.word	0x2003e6a4

000b7a50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7a50:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7a52:	681a      	ldr	r2, [r3, #0]
   b7a54:	4b02      	ldr	r3, [pc, #8]	; (b7a60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7a56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7a58:	4770      	bx	lr
   b7a5a:	bf00      	nop
   b7a5c:	2003d920 	.word	0x2003d920
   b7a60:	2003e6a0 	.word	0x2003e6a0

000b7a64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7a64:	2100      	movs	r1, #0
   b7a66:	f7fd beb5 	b.w	b57d4 <system_delay_ms>
	...

000b7a6c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7a6c:	4b01      	ldr	r3, [pc, #4]	; (b7a74 <_GLOBAL__sub_I_RGB+0x8>)
   b7a6e:	2200      	movs	r2, #0
   b7a70:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7a72:	4770      	bx	lr
   b7a74:	2003e6e0 	.word	0x2003e6e0

000b7a78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7a78:	4b01      	ldr	r3, [pc, #4]	; (b7a80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7a7a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7a7c:	4770      	bx	lr
   b7a7e:	bf00      	nop
   b7a80:	2003d924 	.word	0x2003d924

000b7a84 <serialEventRun>:
{
   b7a84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7a86:	4b0b      	ldr	r3, [pc, #44]	; (b7ab4 <serialEventRun+0x30>)
   b7a88:	b143      	cbz	r3, b7a9c <serialEventRun+0x18>
   b7a8a:	f000 fc19 	bl	b82c0 <_Z16_fetch_usbserialv>
   b7a8e:	6803      	ldr	r3, [r0, #0]
   b7a90:	691b      	ldr	r3, [r3, #16]
   b7a92:	4798      	blx	r3
   b7a94:	2800      	cmp	r0, #0
   b7a96:	dd01      	ble.n	b7a9c <serialEventRun+0x18>
        serialEvent();
   b7a98:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7a9c:	4b06      	ldr	r3, [pc, #24]	; (b7ab8 <serialEventRun+0x34>)
   b7a9e:	b143      	cbz	r3, b7ab2 <serialEventRun+0x2e>
   b7aa0:	f000 fe5e 	bl	b8760 <_Z22__fetch_global_Serial1v>
   b7aa4:	6803      	ldr	r3, [r0, #0]
   b7aa6:	691b      	ldr	r3, [r3, #16]
   b7aa8:	4798      	blx	r3
   b7aaa:	2800      	cmp	r0, #0
   b7aac:	dd01      	ble.n	b7ab2 <serialEventRun+0x2e>
        serialEvent1();
   b7aae:	f3af 8000 	nop.w
}
   b7ab2:	bd08      	pop	{r3, pc}
	...

000b7abc <_post_loop>:
{
   b7abc:	b508      	push	{r3, lr}
	serialEventRun();
   b7abe:	f7ff ffe1 	bl	b7a84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7ac2:	f7fd fc75 	bl	b53b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7ac6:	4b01      	ldr	r3, [pc, #4]	; (b7acc <_post_loop+0x10>)
   b7ac8:	6018      	str	r0, [r3, #0]
}
   b7aca:	bd08      	pop	{r3, pc}
   b7acc:	2003e744 	.word	0x2003e744

000b7ad0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7ad0:	4805      	ldr	r0, [pc, #20]	; (b7ae8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7ad2:	4a06      	ldr	r2, [pc, #24]	; (b7aec <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7ad4:	4906      	ldr	r1, [pc, #24]	; (b7af0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7ad6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7ad8:	1a12      	subs	r2, r2, r0
   b7ada:	f001 fc9e 	bl	b941a <memcpy>
    __backup_sram_signature = signature;
   b7ade:	4b05      	ldr	r3, [pc, #20]	; (b7af4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7ae0:	4a05      	ldr	r2, [pc, #20]	; (b7af8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7ae2:	601a      	str	r2, [r3, #0]
}
   b7ae4:	bd08      	pop	{r3, pc}
   b7ae6:	bf00      	nop
   b7ae8:	2003f400 	.word	0x2003f400
   b7aec:	2003f404 	.word	0x2003f404
   b7af0:	000bc504 	.word	0x000bc504
   b7af4:	2003f400 	.word	0x2003f400
   b7af8:	9a271c1e 	.word	0x9a271c1e

000b7afc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7afc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7afe:	2300      	movs	r3, #0
   b7b00:	9300      	str	r3, [sp, #0]
   b7b02:	461a      	mov	r2, r3
   b7b04:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7b08:	f7fd fe96 	bl	b5838 <system_ctrl_set_result>
}
   b7b0c:	b003      	add	sp, #12
   b7b0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b14 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7b14:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7b16:	8843      	ldrh	r3, [r0, #2]
   b7b18:	2b0a      	cmp	r3, #10
   b7b1a:	d008      	beq.n	b7b2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7b1c:	2b50      	cmp	r3, #80	; 0x50
   b7b1e:	d10b      	bne.n	b7b38 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7b20:	4b09      	ldr	r3, [pc, #36]	; (b7b48 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7b22:	681b      	ldr	r3, [r3, #0]
   b7b24:	b14b      	cbz	r3, b7b3a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7b26:	b003      	add	sp, #12
   b7b28:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7b2c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7b2e:	f7ff ffe5 	bl	b7afc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7b32:	b003      	add	sp, #12
   b7b34:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7b38:	2300      	movs	r3, #0
   b7b3a:	9300      	str	r3, [sp, #0]
   b7b3c:	461a      	mov	r2, r3
   b7b3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7b42:	f7fd fe79 	bl	b5838 <system_ctrl_set_result>
}
   b7b46:	e7f4      	b.n	b7b32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7b48:	2003e6f4 	.word	0x2003e6f4

000b7b4c <module_user_init_hook>:
{
   b7b4c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7b4e:	4812      	ldr	r0, [pc, #72]	; (b7b98 <module_user_init_hook+0x4c>)
   b7b50:	2100      	movs	r1, #0
   b7b52:	f7fd ff5b 	bl	b5a0c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7b56:	4b11      	ldr	r3, [pc, #68]	; (b7b9c <module_user_init_hook+0x50>)
   b7b58:	681a      	ldr	r2, [r3, #0]
   b7b5a:	4b11      	ldr	r3, [pc, #68]	; (b7ba0 <module_user_init_hook+0x54>)
   b7b5c:	429a      	cmp	r2, r3
   b7b5e:	4b11      	ldr	r3, [pc, #68]	; (b7ba4 <module_user_init_hook+0x58>)
   b7b60:	bf0c      	ite	eq
   b7b62:	2201      	moveq	r2, #1
   b7b64:	2200      	movne	r2, #0
   b7b66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7b68:	d001      	beq.n	b7b6e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7b6a:	f7ff ffb1 	bl	b7ad0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7b6e:	f7fd fc0f 	bl	b5390 <HAL_RNG_GetRandomNumber>
   b7b72:	4604      	mov	r4, r0
    srand(seed);
   b7b74:	f001 fc82 	bl	b947c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7b78:	4b0b      	ldr	r3, [pc, #44]	; (b7ba8 <module_user_init_hook+0x5c>)
   b7b7a:	b113      	cbz	r3, b7b82 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7b82:	2100      	movs	r1, #0
   b7b84:	4808      	ldr	r0, [pc, #32]	; (b7ba8 <module_user_init_hook+0x5c>)
   b7b86:	f7fd fee9 	bl	b595c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7b8e:	4807      	ldr	r0, [pc, #28]	; (b7bac <module_user_init_hook+0x60>)
   b7b90:	2100      	movs	r1, #0
   b7b92:	f7fd be47 	b.w	b5824 <system_ctrl_set_app_request_handler>
   b7b96:	bf00      	nop
   b7b98:	000b7a79 	.word	0x000b7a79
   b7b9c:	2003f400 	.word	0x2003f400
   b7ba0:	9a271c1e 	.word	0x9a271c1e
   b7ba4:	2003e6f0 	.word	0x2003e6f0
   b7ba8:	00000000 	.word	0x00000000
   b7bac:	000b7b15 	.word	0x000b7b15

000b7bb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7bb0:	4770      	bx	lr

000b7bb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7bb2:	2000      	movs	r0, #0
   b7bb4:	4770      	bx	lr

000b7bb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7bb6:	b510      	push	{r4, lr}
   b7bb8:	2110      	movs	r1, #16
   b7bba:	4604      	mov	r4, r0
   b7bbc:	f7fc fa6f 	bl	b409e <_ZdlPvj>
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	bd10      	pop	{r4, pc}

000b7bc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7bc4:	b508      	push	{r3, lr}
      { delete this; }
   b7bc6:	f7ff fff6 	bl	b7bb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7bca:	bd08      	pop	{r3, pc}

000b7bcc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7bcc:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7bce:	2200      	movs	r2, #0
   b7bd0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7bd4:	6002      	str	r2, [r0, #0]
   b7bd6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7bd8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7bda:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7bdc:	680c      	ldr	r4, [r1, #0]
   b7bde:	8085      	strh	r5, [r0, #4]
   b7be0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7be2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7be4:	bd30      	pop	{r4, r5, pc}

000b7be6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7be6:	b510      	push	{r4, lr}
   b7be8:	4604      	mov	r4, r0
    free((void*)msg_);
   b7bea:	6800      	ldr	r0, [r0, #0]
   b7bec:	f7fd fec6 	bl	b597c <free>
}
   b7bf0:	4620      	mov	r0, r4
   b7bf2:	bd10      	pop	{r4, pc}

000b7bf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7bf4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7bf6:	68c4      	ldr	r4, [r0, #12]
   b7bf8:	b1f4      	cbz	r4, b7c38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7bfa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7bfc:	2b02      	cmp	r3, #2
   b7bfe:	d103      	bne.n	b7c08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7c00:	f104 000c 	add.w	r0, r4, #12
   b7c04:	f7ff ffef 	bl	b7be6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7c08:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7c0a:	b135      	cbz	r5, b7c1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7c0c:	4628      	mov	r0, r5
   b7c0e:	f7fc fbe7 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
   b7c12:	2110      	movs	r1, #16
   b7c14:	4628      	mov	r0, r5
   b7c16:	f7fc fa42 	bl	b409e <_ZdlPvj>
   b7c1a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7c1c:	b135      	cbz	r5, b7c2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7c1e:	4628      	mov	r0, r5
   b7c20:	f7fc fbde 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
   b7c24:	2110      	movs	r1, #16
   b7c26:	4628      	mov	r0, r5
   b7c28:	f7fc fa39 	bl	b409e <_ZdlPvj>
   b7c2c:	4620      	mov	r0, r4
   b7c2e:	2114      	movs	r1, #20
   b7c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7c34:	f7fc ba33 	b.w	b409e <_ZdlPvj>
   b7c38:	bd38      	pop	{r3, r4, r5, pc}

000b7c3a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7c3a:	680b      	ldr	r3, [r1, #0]
   b7c3c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7c3e:	684b      	ldr	r3, [r1, #4]
   b7c40:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7c42:	b113      	cbz	r3, b7c4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7c44:	685a      	ldr	r2, [r3, #4]
   b7c46:	3201      	adds	r2, #1
   b7c48:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7c4a:	4770      	bx	lr

000b7c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c4e:	4604      	mov	r4, r0
   b7c50:	4668      	mov	r0, sp
   b7c52:	460d      	mov	r5, r1
   b7c54:	f7ff fff1 	bl	b7c3a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7c58:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7c5a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7c5c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7c5e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7c60:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7c62:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7c64:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b7c66:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7c68:	f7fc ff86 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7c6c:	b135      	cbz	r5, b7c7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7c6e:	1d28      	adds	r0, r5, #4
   b7c70:	f7fc ff82 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c74:	2108      	movs	r1, #8
   b7c76:	4628      	mov	r0, r5
   b7c78:	f7fc fa11 	bl	b409e <_ZdlPvj>
        return p;
    }
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	b003      	add	sp, #12
   b7c80:	bd30      	pop	{r4, r5, pc}

000b7c82 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b7c82:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7c84:	b510      	push	{r4, lr}
      if (_M_empty())
   b7c86:	b90a      	cbnz	r2, b7c8c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7c88:	f000 fdcc 	bl	b8824 <_ZSt25__throw_bad_function_callv>
    }
   b7c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7c90:	68c3      	ldr	r3, [r0, #12]
   b7c92:	4718      	bx	r3

000b7c94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7c94:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7c96:	6800      	ldr	r0, [r0, #0]
   b7c98:	f100 0110 	add.w	r1, r0, #16
   b7c9c:	f7ff fff1 	bl	b7c82 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7ca0:	bd08      	pop	{r3, pc}

000b7ca2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7ca2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7ca4:	b510      	push	{r4, lr}
      if (_M_empty())
   b7ca6:	b90a      	cbnz	r2, b7cac <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7ca8:	f000 fdbc 	bl	b8824 <_ZSt25__throw_bad_function_callv>
    }
   b7cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7cb0:	68c3      	ldr	r3, [r0, #12]
   b7cb2:	4718      	bx	r3

000b7cb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7cb4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7cb6:	6800      	ldr	r0, [r0, #0]
   b7cb8:	f100 0110 	add.w	r1, r0, #16
   b7cbc:	f7ff fff1 	bl	b7ca2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7cc0:	bd08      	pop	{r3, pc}
	...

000b7cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7cc4:	b538      	push	{r3, r4, r5, lr}
   b7cc6:	2300      	movs	r3, #0
   b7cc8:	4604      	mov	r4, r0
   b7cca:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7ccc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7cce:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7cd0:	f7fc f9e1 	bl	b4096 <_Znwj>
   b7cd4:	b128      	cbz	r0, b7ce2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7cd6:	2301      	movs	r3, #1
   b7cd8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7cdc:	4b02      	ldr	r3, [pc, #8]	; (b7ce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7cde:	6003      	str	r3, [r0, #0]
   b7ce0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7ce2:	6020      	str	r0, [r4, #0]
	}
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	bd38      	pop	{r3, r4, r5, pc}
   b7ce8:	000bbdf4 	.word	0x000bbdf4

000b7cec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7cec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7cee:	2300      	movs	r3, #0
   b7cf0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7cf2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7cf4:	4604      	mov	r4, r0
   b7cf6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7cf8:	b12b      	cbz	r3, b7d06 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7cfa:	2202      	movs	r2, #2
   b7cfc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7cfe:	68eb      	ldr	r3, [r5, #12]
   b7d00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7d02:	68ab      	ldr	r3, [r5, #8]
   b7d04:	60a3      	str	r3, [r4, #8]
    }
   b7d06:	4620      	mov	r0, r4
   b7d08:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7d0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7d0e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b7d10:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b7d12:	4668      	mov	r0, sp
   b7d14:	f7ff ff5a 	bl	b7bcc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7d18:	f04f 0302 	mov.w	r3, #2
   b7d1c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7d20:	2a00      	cmp	r2, #0
   b7d22:	d103      	bne.n	b7d2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b7d24:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7d28:	2900      	cmp	r1, #0
   b7d2a:	d1f7      	bne.n	b7d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7d2c:	d125      	bne.n	b7d7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7d2e:	f104 050c 	add.w	r5, r4, #12
   b7d32:	4669      	mov	r1, sp
   b7d34:	4628      	mov	r0, r5
   b7d36:	f7ff ff49 	bl	b7bcc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7d3a:	f3bf 8f5b 	dmb	ish
   b7d3e:	2301      	movs	r3, #1
   b7d40:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7d42:	2000      	movs	r0, #0
   b7d44:	f104 0308 	add.w	r3, r4, #8
   b7d48:	f3bf 8f5b 	dmb	ish
   b7d4c:	e853 6f00 	ldrex	r6, [r3]
   b7d50:	e843 0200 	strex	r2, r0, [r3]
   b7d54:	2a00      	cmp	r2, #0
   b7d56:	d1f9      	bne.n	b7d4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7d58:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7d5c:	b16e      	cbz	r6, b7d7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7d5e:	f7fd fd49 	bl	b57f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7d62:	b178      	cbz	r0, b7d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7d64:	4629      	mov	r1, r5
   b7d66:	4630      	mov	r0, r6
   b7d68:	f7ff ff8b 	bl	b7c82 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7d6c:	4630      	mov	r0, r6
   b7d6e:	f7fc fb37 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7d72:	2110      	movs	r1, #16
   b7d74:	4630      	mov	r0, r6
   b7d76:	f7fc f992 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b7d7a:	4668      	mov	r0, sp
   b7d7c:	f7ff ff33 	bl	b7be6 <_ZN8particle5ErrorD1Ev>
    }
   b7d80:	b009      	add	sp, #36	; 0x24
   b7d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7d84:	4631      	mov	r1, r6
   b7d86:	a802      	add	r0, sp, #8
   b7d88:	f7ff ffb0 	bl	b7cec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7d8c:	68e0      	ldr	r0, [r4, #12]
   b7d8e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7d92:	b108      	cbz	r0, b7d98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7d94:	f001 fbc2 	bl	b951c <strdup>
        type_(type) {
   b7d98:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7d9a:	2010      	movs	r0, #16
   b7d9c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7da0:	f7fc f979 	bl	b4096 <_Znwj>
   b7da4:	4605      	mov	r5, r0
   b7da6:	b1e8      	cbz	r0, b7de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7da8:	2700      	movs	r7, #0
   b7daa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7dac:	2018      	movs	r0, #24
   b7dae:	f7fc f972 	bl	b4096 <_Znwj>
   b7db2:	4604      	mov	r4, r0
   b7db4:	b188      	cbz	r0, b7dda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7db6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7db8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7dba:	a802      	add	r0, sp, #8
   b7dbc:	f7ff fa1a 	bl	b71f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dc0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7dc2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7dc4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dc6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7dc8:	9204      	str	r2, [sp, #16]
   b7dca:	a906      	add	r1, sp, #24
   b7dcc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7dce:	60e3      	str	r3, [r4, #12]
   b7dd0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7dd4:	9205      	str	r2, [sp, #20]
   b7dd6:	f7ff fef9 	bl	b7bcc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7dda:	4b08      	ldr	r3, [pc, #32]	; (b7dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7ddc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7dde:	4b08      	ldr	r3, [pc, #32]	; (b7e00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7de0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7de2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7de4:	a806      	add	r0, sp, #24
   b7de6:	f7ff fefe 	bl	b7be6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7dea:	a802      	add	r0, sp, #8
   b7dec:	f7fc faf8 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7df0:	2200      	movs	r2, #0
   b7df2:	4629      	mov	r1, r5
   b7df4:	4803      	ldr	r0, [pc, #12]	; (b7e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b7df6:	f7fd fd05 	bl	b5804 <application_thread_invoke>
   b7dfa:	e7b7      	b.n	b7d6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b7dfc:	000b7c95 	.word	0x000b7c95
   b7e00:	000b7f19 	.word	0x000b7f19
   b7e04:	000b8409 	.word	0x000b8409

000b7e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e0c:	b08b      	sub	sp, #44	; 0x2c
   b7e0e:	4605      	mov	r5, r0
   b7e10:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b7e14:	460f      	mov	r7, r1
   b7e16:	4690      	mov	r8, r2
   b7e18:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7e1a:	f7fd fd7f 	bl	b591c <spark_cloud_flag_connected>
   b7e1e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7e20:	4683      	mov	fp, r0
   b7e22:	bb38      	cbnz	r0, b7e74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b7e24:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7e28:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7e2a:	a905      	add	r1, sp, #20
   b7e2c:	4630      	mov	r0, r6
   b7e2e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7e32:	f7ff fecb 	bl	b7bcc <_ZN8particle5ErrorC1EOS0_>
   b7e36:	2014      	movs	r0, #20
   b7e38:	f7fc f92d 	bl	b4096 <_Znwj>
   b7e3c:	4604      	mov	r4, r0
   b7e3e:	b148      	cbz	r0, b7e54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7e40:	2302      	movs	r3, #2
   b7e42:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7e44:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7e46:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7e4a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b7e4c:	4631      	mov	r1, r6
   b7e4e:	300c      	adds	r0, #12
   b7e50:	f7ff febc 	bl	b7bcc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7e54:	4628      	mov	r0, r5
	: __shared_count(__p)
   b7e56:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7e58:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7e5c:	f7ff ff32 	bl	b7cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7e60:	4630      	mov	r0, r6
   b7e62:	f7ff fec0 	bl	b7be6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b7e66:	a805      	add	r0, sp, #20
   b7e68:	f7ff febd 	bl	b7be6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b7e6c:	4628      	mov	r0, r5
   b7e6e:	b00b      	add	sp, #44	; 0x2c
   b7e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b7e74:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b7e76:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7e78:	2014      	movs	r0, #20
   b7e7a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b7e7e:	9307      	str	r3, [sp, #28]
   b7e80:	f7fc f909 	bl	b4096 <_Znwj>
   b7e84:	4601      	mov	r1, r0
   b7e86:	b118      	cbz	r0, b7e90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7e8c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7e8e:	7044      	strb	r4, [r0, #1]
   b7e90:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7e92:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b7e94:	f7ff ff16 	bl	b7cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b7e98:	4b1e      	ldr	r3, [pc, #120]	; (b7f14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b7e9a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b7e9c:	2008      	movs	r0, #8
   b7e9e:	f7fc f8fa 	bl	b4096 <_Znwj>
   b7ea2:	4604      	mov	r4, r0
   b7ea4:	b110      	cbz	r0, b7eac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b7ea6:	a903      	add	r1, sp, #12
   b7ea8:	f7ff fec7 	bl	b7c3a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7eac:	9600      	str	r6, [sp, #0]
   b7eae:	fa5f f38a 	uxtb.w	r3, sl
   b7eb2:	464a      	mov	r2, r9
   b7eb4:	4641      	mov	r1, r8
   b7eb6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b7eb8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7eba:	f7fd fd37 	bl	b592c <spark_send_event>
   b7ebe:	b9b8      	cbnz	r0, b7ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7ec0:	9b03      	ldr	r3, [sp, #12]
   b7ec2:	785b      	ldrb	r3, [r3, #1]
   b7ec4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b7ec8:	b993      	cbnz	r3, b7ef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b7eca:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b7ece:	a905      	add	r1, sp, #20
   b7ed0:	a803      	add	r0, sp, #12
   b7ed2:	9205      	str	r2, [sp, #20]
   b7ed4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7ed8:	f7ff ff18 	bl	b7d0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7edc:	a805      	add	r0, sp, #20
   b7ede:	f7ff fe82 	bl	b7be6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b7ee2:	a805      	add	r0, sp, #20
   b7ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7ee6:	f7ff feb1 	bl	b7c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b7eea:	a806      	add	r0, sp, #24
   b7eec:	f7fc fe44 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ef0:	a903      	add	r1, sp, #12
   b7ef2:	a805      	add	r0, sp, #20
   b7ef4:	f7ff fea1 	bl	b7c3a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7ef8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7efa:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7efc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b7efe:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b7f00:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7f02:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b7f04:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b7f06:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b7f08:	f7fc fe36 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7f0c:	a804      	add	r0, sp, #16
   b7f0e:	f7fc fe33 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b7f12:	e7ab      	b.n	b7e6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b7f14:	000b7f95 	.word	0x000b7f95

000b7f18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b7f18:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f1c:	4605      	mov	r5, r0
	switch (__op)
   b7f1e:	d103      	bne.n	b7f28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7f20:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7f22:	6003      	str	r3, [r0, #0]
      }
   b7f24:	2000      	movs	r0, #0
   b7f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b7f28:	2a02      	cmp	r2, #2
   b7f2a:	d010      	beq.n	b7f4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b7f2c:	2a03      	cmp	r2, #3
   b7f2e:	d1f9      	bne.n	b7f24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7f30:	6804      	ldr	r4, [r0, #0]
   b7f32:	2c00      	cmp	r4, #0
   b7f34:	d0f6      	beq.n	b7f24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b7f36:	f104 0010 	add.w	r0, r4, #16
   b7f3a:	f7ff fe54 	bl	b7be6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7f3e:	4620      	mov	r0, r4
   b7f40:	f7fc fa4e 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7f44:	2118      	movs	r1, #24
   b7f46:	4620      	mov	r0, r4
   b7f48:	f7fc f8a9 	bl	b409e <_ZdlPvj>
   b7f4c:	e7ea      	b.n	b7f24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b7f4e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b7f50:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7f52:	f7fc f8a0 	bl	b4096 <_Znwj>
   b7f56:	4604      	mov	r4, r0
   b7f58:	b150      	cbz	r0, b7f70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b7f5a:	4631      	mov	r1, r6
   b7f5c:	f7ff fec6 	bl	b7cec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7f60:	6930      	ldr	r0, [r6, #16]
   b7f62:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7f66:	b108      	cbz	r0, b7f6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b7f68:	f001 fad8 	bl	b951c <strdup>
        type_(type) {
   b7f6c:	6120      	str	r0, [r4, #16]
   b7f6e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b7f70:	602c      	str	r4, [r5, #0]
	}
   b7f72:	e7d7      	b.n	b7f24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b7f74 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b7f74:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7f76:	2300      	movs	r3, #0
   b7f78:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7f7a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7f7c:	4604      	mov	r4, r0
   b7f7e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7f80:	b12b      	cbz	r3, b7f8e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7f82:	2202      	movs	r2, #2
   b7f84:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7f86:	68eb      	ldr	r3, [r5, #12]
   b7f88:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7f8a:	68ab      	ldr	r3, [r5, #8]
   b7f8c:	60a3      	str	r3, [r4, #8]
    }
   b7f8e:	4620      	mov	r0, r4
   b7f90:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7f94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b7f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f96:	b089      	sub	sp, #36	; 0x24
   b7f98:	4604      	mov	r4, r0
   b7f9a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b7f9c:	a801      	add	r0, sp, #4
   b7f9e:	4611      	mov	r1, r2
   b7fa0:	f7ff fe54 	bl	b7c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b7fa4:	b1a4      	cbz	r4, b7fd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b7fa6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7fa8:	b11d      	cbz	r5, b7fb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b7faa:	4628      	mov	r0, r5
   b7fac:	f001 fab6 	bl	b951c <strdup>
   b7fb0:	4605      	mov	r5, r0
   b7fb2:	a801      	add	r0, sp, #4
   b7fb4:	a903      	add	r1, sp, #12
        type_(type) {
   b7fb6:	9503      	str	r5, [sp, #12]
   b7fb8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b7fbc:	f7ff fea6 	bl	b7d0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7fc0:	a803      	add	r0, sp, #12
   b7fc2:	f7ff fe10 	bl	b7be6 <_ZN8particle5ErrorD1Ev>
   b7fc6:	a802      	add	r0, sp, #8
   b7fc8:	f7fc fdd6 	bl	b4b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7fcc:	b009      	add	sp, #36	; 0x24
   b7fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b7fd0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7fd2:	2301      	movs	r3, #1
   b7fd4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b7fd8:	2a00      	cmp	r2, #0
   b7fda:	d103      	bne.n	b7fe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b7fdc:	e8c5 3f41 	strexb	r1, r3, [r5]
   b7fe0:	2900      	cmp	r1, #0
   b7fe2:	d1f7      	bne.n	b7fd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b7fe4:	d1ef      	bne.n	b7fc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b7fe6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b7fe8:	f3bf 8f5b 	dmb	ish
   b7fec:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7fee:	1d2b      	adds	r3, r5, #4
   b7ff0:	f3bf 8f5b 	dmb	ish
   b7ff4:	e853 6f00 	ldrex	r6, [r3]
   b7ff8:	e843 4200 	strex	r2, r4, [r3]
   b7ffc:	2a00      	cmp	r2, #0
   b7ffe:	d1f9      	bne.n	b7ff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8000:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8004:	2e00      	cmp	r6, #0
   b8006:	d0de      	beq.n	b7fc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8008:	4620      	mov	r0, r4
   b800a:	f7fd fbf3 	bl	b57f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b800e:	4607      	mov	r7, r0
   b8010:	b160      	cbz	r0, b802c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8012:	f105 010c 	add.w	r1, r5, #12
   b8016:	4630      	mov	r0, r6
   b8018:	f7ff fe43 	bl	b7ca2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b801c:	4630      	mov	r0, r6
   b801e:	f7fc f9df 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8022:	2110      	movs	r1, #16
   b8024:	4630      	mov	r0, r6
   b8026:	f7fc f83a 	bl	b409e <_ZdlPvj>
   b802a:	e7cc      	b.n	b7fc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b802c:	4631      	mov	r1, r6
   b802e:	a803      	add	r0, sp, #12
   b8030:	f7ff ffa0 	bl	b7f74 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8034:	7b2b      	ldrb	r3, [r5, #12]
   b8036:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b803a:	2010      	movs	r0, #16
   b803c:	f7fc f82b 	bl	b4096 <_Znwj>
   b8040:	4605      	mov	r5, r0
   b8042:	b1d0      	cbz	r0, b807a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8044:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8046:	2014      	movs	r0, #20
   b8048:	f7fc f825 	bl	b4096 <_Znwj>
   b804c:	4604      	mov	r4, r0
   b804e:	b178      	cbz	r0, b8070 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b8050:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8052:	4601      	mov	r1, r0
   b8054:	a803      	add	r0, sp, #12
   b8056:	f7ff f8cd 	bl	b71f4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b805a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b805c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b805e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8060:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8062:	9205      	str	r2, [sp, #20]
   b8064:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8066:	60e3      	str	r3, [r4, #12]
   b8068:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b806c:	9206      	str	r2, [sp, #24]
   b806e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8070:	4b06      	ldr	r3, [pc, #24]	; (b808c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b8072:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8074:	4b06      	ldr	r3, [pc, #24]	; (b8090 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8076:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8078:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b807a:	a803      	add	r0, sp, #12
   b807c:	f7fc f9b0 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8080:	2200      	movs	r2, #0
   b8082:	4629      	mov	r1, r5
   b8084:	4803      	ldr	r0, [pc, #12]	; (b8094 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b8086:	f7fd fbbd 	bl	b5804 <application_thread_invoke>
   b808a:	e7c7      	b.n	b801c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b808c:	000b7cb5 	.word	0x000b7cb5
   b8090:	000b8099 	.word	0x000b8099
   b8094:	000b8409 	.word	0x000b8409

000b8098 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8098:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b809a:	b570      	push	{r4, r5, r6, lr}
   b809c:	4604      	mov	r4, r0
	switch (__op)
   b809e:	d103      	bne.n	b80a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b80a0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b80a2:	6003      	str	r3, [r0, #0]
      }
   b80a4:	2000      	movs	r0, #0
   b80a6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b80a8:	2a02      	cmp	r2, #2
   b80aa:	d00c      	beq.n	b80c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b80ac:	2a03      	cmp	r2, #3
   b80ae:	d1f9      	bne.n	b80a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b80b0:	6804      	ldr	r4, [r0, #0]
   b80b2:	2c00      	cmp	r4, #0
   b80b4:	d0f6      	beq.n	b80a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b80b6:	4620      	mov	r0, r4
   b80b8:	f7fc f992 	bl	b43e0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b80bc:	2114      	movs	r1, #20
   b80be:	4620      	mov	r0, r4
   b80c0:	f7fb ffed 	bl	b409e <_ZdlPvj>
   b80c4:	e7ee      	b.n	b80a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b80c6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b80c8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b80ca:	f7fb ffe4 	bl	b4096 <_Znwj>
   b80ce:	4605      	mov	r5, r0
   b80d0:	b120      	cbz	r0, b80dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b80d2:	4631      	mov	r1, r6
   b80d4:	f7ff ff4e 	bl	b7f74 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b80d8:	7c33      	ldrb	r3, [r6, #16]
   b80da:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b80dc:	6025      	str	r5, [r4, #0]
	}
   b80de:	e7e1      	b.n	b80a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b80e0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b80e0:	4770      	bx	lr

000b80e2 <_ZN9IPAddressD0Ev>:
   b80e2:	b510      	push	{r4, lr}
   b80e4:	2118      	movs	r1, #24
   b80e6:	4604      	mov	r4, r0
   b80e8:	f7fb ffd9 	bl	b409e <_ZdlPvj>
   b80ec:	4620      	mov	r0, r4
   b80ee:	bd10      	pop	{r4, pc}

000b80f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b80f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b80f2:	7d03      	ldrb	r3, [r0, #20]
   b80f4:	2b06      	cmp	r3, #6
{
   b80f6:	b08d      	sub	sp, #52	; 0x34
   b80f8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b80fa:	f100 0704 	add.w	r7, r0, #4
   b80fe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8102:	d012      	beq.n	b812a <_ZNK9IPAddress7printToER5Print+0x3a>
   b8104:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8108:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b810c:	220a      	movs	r2, #10
   b810e:	4630      	mov	r0, r6
   b8110:	f7ff fb67 	bl	b77e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8114:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8116:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8118:	d019      	beq.n	b814e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b811a:	2c00      	cmp	r4, #0
   b811c:	d0f4      	beq.n	b8108 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b811e:	212e      	movs	r1, #46	; 0x2e
   b8120:	4630      	mov	r0, r6
   b8122:	f7ff fb45 	bl	b77b0 <_ZN5Print5printEc>
   b8126:	4404      	add	r4, r0
   b8128:	e7ee      	b.n	b8108 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b812a:	232f      	movs	r3, #47	; 0x2f
   b812c:	466a      	mov	r2, sp
   b812e:	4639      	mov	r1, r7
   b8130:	200a      	movs	r0, #10
		buf[0] = 0;
   b8132:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8136:	f7fd fa25 	bl	b5584 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b813a:	4668      	mov	r0, sp
   b813c:	f001 fa0b 	bl	b9556 <strlen>
   b8140:	6833      	ldr	r3, [r6, #0]
   b8142:	4602      	mov	r2, r0
   b8144:	68db      	ldr	r3, [r3, #12]
   b8146:	4669      	mov	r1, sp
   b8148:	4630      	mov	r0, r6
   b814a:	4798      	blx	r3
   b814c:	4604      	mov	r4, r0
    }
    return n;
}
   b814e:	4620      	mov	r0, r4
   b8150:	b00d      	add	sp, #52	; 0x34
   b8152:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8154 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8154:	b510      	push	{r4, lr}
   b8156:	4b05      	ldr	r3, [pc, #20]	; (b816c <_ZN9IPAddressC1Ev+0x18>)
   b8158:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b815a:	2211      	movs	r2, #17
   b815c:	f840 3b04 	str.w	r3, [r0], #4
   b8160:	2100      	movs	r1, #0
   b8162:	f001 f982 	bl	b946a <memset>
}
   b8166:	4620      	mov	r0, r4
   b8168:	bd10      	pop	{r4, pc}
   b816a:	bf00      	nop
   b816c:	000bbe10 	.word	0x000bbe10

000b8170 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8170:	4603      	mov	r3, r0
   b8172:	4a07      	ldr	r2, [pc, #28]	; (b8190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8174:	b510      	push	{r4, lr}
   b8176:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b817a:	f101 0210 	add.w	r2, r1, #16
   b817e:	f851 4b04 	ldr.w	r4, [r1], #4
   b8182:	f843 4b04 	str.w	r4, [r3], #4
   b8186:	4291      	cmp	r1, r2
   b8188:	d1f9      	bne.n	b817e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b818a:	780a      	ldrb	r2, [r1, #0]
   b818c:	701a      	strb	r2, [r3, #0]
}
   b818e:	bd10      	pop	{r4, pc}
   b8190:	000bbe10 	.word	0x000bbe10

000b8194 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b8194:	4a02      	ldr	r2, [pc, #8]	; (b81a0 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b8196:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b819a:	2204      	movs	r2, #4
   b819c:	7502      	strb	r2, [r0, #20]
}
   b819e:	4770      	bx	lr
   b81a0:	000bbe10 	.word	0x000bbe10

000b81a4 <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b81a4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b81a6:	2b04      	cmp	r3, #4
   b81a8:	d104      	bne.n	b81b4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b81aa:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81ac:	3800      	subs	r0, #0
   b81ae:	bf18      	it	ne
   b81b0:	2001      	movne	r0, #1
   b81b2:	4770      	bx	lr
    } else if (version() == 6) {
   b81b4:	2b06      	cmp	r3, #6
   b81b6:	d107      	bne.n	b81c8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81b8:	6843      	ldr	r3, [r0, #4]
   b81ba:	b93b      	cbnz	r3, b81cc <_ZNK9IPAddresscvbEv+0x28>
   b81bc:	6883      	ldr	r3, [r0, #8]
   b81be:	b92b      	cbnz	r3, b81cc <_ZNK9IPAddresscvbEv+0x28>
   b81c0:	68c3      	ldr	r3, [r0, #12]
   b81c2:	b91b      	cbnz	r3, b81cc <_ZNK9IPAddresscvbEv+0x28>
   b81c4:	6900      	ldr	r0, [r0, #16]
   b81c6:	e7f1      	b.n	b81ac <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b81c8:	2000      	movs	r0, #0
   b81ca:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b81cc:	2001      	movs	r0, #1
}
   b81ce:	4770      	bx	lr

000b81d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b81d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b81d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b81d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b81da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b81de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b81e2:	2304      	movs	r3, #4
   b81e4:	6041      	str	r1, [r0, #4]
   b81e6:	7503      	strb	r3, [r0, #20]
}
   b81e8:	bd10      	pop	{r4, pc}
	...

000b81ec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b81ec:	b507      	push	{r0, r1, r2, lr}
   b81ee:	4b06      	ldr	r3, [pc, #24]	; (b8208 <_ZN9IPAddressC1EPKh+0x1c>)
   b81f0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b81f2:	78cb      	ldrb	r3, [r1, #3]
   b81f4:	9300      	str	r3, [sp, #0]
   b81f6:	788b      	ldrb	r3, [r1, #2]
   b81f8:	784a      	ldrb	r2, [r1, #1]
   b81fa:	7809      	ldrb	r1, [r1, #0]
   b81fc:	f7ff ffe8 	bl	b81d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8200:	b003      	add	sp, #12
   b8202:	f85d fb04 	ldr.w	pc, [sp], #4
   b8206:	bf00      	nop
   b8208:	000bbe10 	.word	0x000bbe10

000b820c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b820c:	7441      	strb	r1, [r0, #17]
}
   b820e:	4770      	bx	lr

000b8210 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8210:	4770      	bx	lr

000b8212 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8212:	4770      	bx	lr

000b8214 <_ZN9USBSerial4readEv>:
{
   b8214:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8216:	2100      	movs	r1, #0
   b8218:	7c00      	ldrb	r0, [r0, #16]
   b821a:	f7fd faa3 	bl	b5764 <HAL_USB_USART_Receive_Data>
}
   b821e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8222:	bd08      	pop	{r3, pc}

000b8224 <_ZN9USBSerial4peekEv>:
{
   b8224:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8226:	2101      	movs	r1, #1
   b8228:	7c00      	ldrb	r0, [r0, #16]
   b822a:	f7fd fa9b 	bl	b5764 <HAL_USB_USART_Receive_Data>
}
   b822e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8232:	bd08      	pop	{r3, pc}

000b8234 <_ZN9USBSerial17availableForWriteEv>:
{
   b8234:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8236:	7c00      	ldrb	r0, [r0, #16]
   b8238:	f7fd fa8c 	bl	b5754 <HAL_USB_USART_Available_Data_For_Write>
}
   b823c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8240:	bd08      	pop	{r3, pc}

000b8242 <_ZN9USBSerial9availableEv>:
{
   b8242:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8244:	7c00      	ldrb	r0, [r0, #16]
   b8246:	f7fd fa7d 	bl	b5744 <HAL_USB_USART_Available_Data>
}
   b824a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b824e:	bd08      	pop	{r3, pc}

000b8250 <_ZN9USBSerial5writeEh>:
{
   b8250:	b513      	push	{r0, r1, r4, lr}
   b8252:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8254:	7c00      	ldrb	r0, [r0, #16]
{
   b8256:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8258:	f7fd fa7c 	bl	b5754 <HAL_USB_USART_Available_Data_For_Write>
   b825c:	2800      	cmp	r0, #0
   b825e:	9901      	ldr	r1, [sp, #4]
   b8260:	dc01      	bgt.n	b8266 <_ZN9USBSerial5writeEh+0x16>
   b8262:	7c60      	ldrb	r0, [r4, #17]
   b8264:	b120      	cbz	r0, b8270 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8266:	7c20      	ldrb	r0, [r4, #16]
   b8268:	f7fd fa84 	bl	b5774 <HAL_USB_USART_Send_Data>
   b826c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8270:	b002      	add	sp, #8
   b8272:	bd10      	pop	{r4, pc}

000b8274 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8274:	7c00      	ldrb	r0, [r0, #16]
   b8276:	f7fd ba85 	b.w	b5784 <HAL_USB_USART_Flush_Data>

000b827a <_ZN9USBSerialD0Ev>:
   b827a:	b510      	push	{r4, lr}
   b827c:	2114      	movs	r1, #20
   b827e:	4604      	mov	r4, r0
   b8280:	f7fb ff0d 	bl	b409e <_ZdlPvj>
   b8284:	4620      	mov	r0, r4
   b8286:	bd10      	pop	{r4, pc}

000b8288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8288:	b510      	push	{r4, lr}
   b828a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b828e:	4604      	mov	r4, r0
   b8290:	4608      	mov	r0, r1
   b8292:	2100      	movs	r1, #0
   b8294:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8298:	4b04      	ldr	r3, [pc, #16]	; (b82ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b829a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b829c:	2301      	movs	r3, #1
  _serial = serial;
   b829e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b82a0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b82a2:	4611      	mov	r1, r2
   b82a4:	f7fd fa46 	bl	b5734 <HAL_USB_USART_Init>
}
   b82a8:	4620      	mov	r0, r4
   b82aa:	bd10      	pop	{r4, pc}
   b82ac:	000bbe24 	.word	0x000bbe24

000b82b0 <_Z19acquireSerialBufferv>:
{
   b82b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b82b2:	2214      	movs	r2, #20
{
   b82b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b82b6:	2100      	movs	r1, #0
   b82b8:	f001 f8d7 	bl	b946a <memset>
}
   b82bc:	4620      	mov	r0, r4
   b82be:	bd10      	pop	{r4, pc}

000b82c0 <_Z16_fetch_usbserialv>:
{
   b82c0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b82c2:	4c0f      	ldr	r4, [pc, #60]	; (b8300 <_Z16_fetch_usbserialv+0x40>)
{
   b82c4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b82c6:	a803      	add	r0, sp, #12
   b82c8:	f7ff fff2 	bl	b82b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b82cc:	7821      	ldrb	r1, [r4, #0]
   b82ce:	f3bf 8f5b 	dmb	ish
   b82d2:	f011 0101 	ands.w	r1, r1, #1
   b82d6:	d10f      	bne.n	b82f8 <_Z16_fetch_usbserialv+0x38>
   b82d8:	4620      	mov	r0, r4
   b82da:	9101      	str	r1, [sp, #4]
   b82dc:	f7fb fee1 	bl	b40a2 <__cxa_guard_acquire>
   b82e0:	9901      	ldr	r1, [sp, #4]
   b82e2:	b148      	cbz	r0, b82f8 <_Z16_fetch_usbserialv+0x38>
   b82e4:	aa03      	add	r2, sp, #12
   b82e6:	4807      	ldr	r0, [pc, #28]	; (b8304 <_Z16_fetch_usbserialv+0x44>)
   b82e8:	f7ff ffce 	bl	b8288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b82ec:	4620      	mov	r0, r4
   b82ee:	f7fb fedd 	bl	b40ac <__cxa_guard_release>
   b82f2:	4805      	ldr	r0, [pc, #20]	; (b8308 <_Z16_fetch_usbserialv+0x48>)
   b82f4:	f001 f874 	bl	b93e0 <atexit>
	return _usbserial;
}
   b82f8:	4802      	ldr	r0, [pc, #8]	; (b8304 <_Z16_fetch_usbserialv+0x44>)
   b82fa:	b008      	add	sp, #32
   b82fc:	bd10      	pop	{r4, pc}
   b82fe:	bf00      	nop
   b8300:	2003e6f8 	.word	0x2003e6f8
   b8304:	2003e6fc 	.word	0x2003e6fc
   b8308:	000b8211 	.word	0x000b8211

000b830c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b830c:	4700      	bx	r0
	...

000b8310 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8310:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b8314:	2400      	movs	r4, #0
{
   b8316:	461d      	mov	r5, r3
   b8318:	460f      	mov	r7, r1
   b831a:	4690      	mov	r8, r2
   b831c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b831e:	f7fd f827 	bl	b5370 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b8322:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8324:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b8328:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b832c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b8330:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8334:	bfa2      	ittt	ge
   b8336:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b833a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b833e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8340:	4907      	ldr	r1, [pc, #28]	; (b8360 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8342:	9400      	str	r4, [sp, #0]
   b8344:	4643      	mov	r3, r8
   b8346:	463a      	mov	r2, r7
   b8348:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b834a:	bfa8      	it	ge
   b834c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8350:	f7fd f806 	bl	b5360 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b8354:	fab0 f080 	clz	r0, r0
   b8358:	0940      	lsrs	r0, r0, #5
   b835a:	b004      	add	sp, #16
   b835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8360:	000b830d 	.word	0x000b830d

000b8364 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8364:	4770      	bx	lr

000b8366 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8366:	7441      	strb	r1, [r0, #17]
}
   b8368:	4770      	bx	lr

000b836a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b836a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b836c:	7c00      	ldrb	r0, [r0, #16]
   b836e:	f7fd f959 	bl	b5624 <hal_usart_available_data_for_write>
}
   b8372:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8376:	bd08      	pop	{r3, pc}

000b8378 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8378:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b837a:	7c00      	ldrb	r0, [r0, #16]
   b837c:	f7fd f92a 	bl	b55d4 <hal_usart_available>
}
   b8380:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8384:	bd08      	pop	{r3, pc}

000b8386 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8386:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8388:	7c00      	ldrb	r0, [r0, #16]
   b838a:	f7fd f933 	bl	b55f4 <hal_usart_peek>
}
   b838e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8392:	bd08      	pop	{r3, pc}

000b8394 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8394:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8396:	7c00      	ldrb	r0, [r0, #16]
   b8398:	f7fd f924 	bl	b55e4 <hal_usart_read>
}
   b839c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b83a0:	bd08      	pop	{r3, pc}

000b83a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b83a2:	7c00      	ldrb	r0, [r0, #16]
   b83a4:	f7fd b92e 	b.w	b5604 <hal_usart_flush>

000b83a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b83a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83aa:	7c45      	ldrb	r5, [r0, #17]
{
   b83ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83ae:	b12d      	cbz	r5, b83bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b83b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b83b2:	b003      	add	sp, #12
   b83b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b83b8:	f7fd b904 	b.w	b55c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b83bc:	7c00      	ldrb	r0, [r0, #16]
   b83be:	9101      	str	r1, [sp, #4]
   b83c0:	f7fd f930 	bl	b5624 <hal_usart_available_data_for_write>
   b83c4:	2800      	cmp	r0, #0
   b83c6:	9901      	ldr	r1, [sp, #4]
   b83c8:	dcf2      	bgt.n	b83b0 <_ZN11USARTSerial5writeEh+0x8>
}
   b83ca:	4628      	mov	r0, r5
   b83cc:	b003      	add	sp, #12
   b83ce:	bd30      	pop	{r4, r5, pc}

000b83d0 <_ZN11USARTSerialD0Ev>:
   b83d0:	b510      	push	{r4, lr}
   b83d2:	2114      	movs	r1, #20
   b83d4:	4604      	mov	r4, r0
   b83d6:	f7fb fe62 	bl	b409e <_ZdlPvj>
   b83da:	4620      	mov	r0, r4
   b83dc:	bd10      	pop	{r4, pc}
	...

000b83e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b83e0:	b510      	push	{r4, lr}
   b83e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b83e6:	4604      	mov	r4, r0
   b83e8:	4608      	mov	r0, r1
   b83ea:	4611      	mov	r1, r2
   b83ec:	2200      	movs	r2, #0
   b83ee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b83f2:	4b04      	ldr	r3, [pc, #16]	; (b8404 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b83f4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b83f6:	2301      	movs	r3, #1
  _serial = serial;
   b83f8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b83fa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b83fc:	f7fd f91a 	bl	b5634 <hal_usart_init_ex>
}
   b8400:	4620      	mov	r0, r4
   b8402:	bd10      	pop	{r4, pc}
   b8404:	000bbe54 	.word	0x000bbe54

000b8408 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8408:	b510      	push	{r4, lr}
      if (_M_empty())
   b840a:	6883      	ldr	r3, [r0, #8]
   b840c:	4604      	mov	r4, r0
   b840e:	b90b      	cbnz	r3, b8414 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8410:	f000 fa08 	bl	b8824 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8414:	68c3      	ldr	r3, [r0, #12]
   b8416:	4798      	blx	r3
      if (_M_manager)
   b8418:	68a3      	ldr	r3, [r4, #8]
   b841a:	b11b      	cbz	r3, b8424 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b841c:	2203      	movs	r2, #3
   b841e:	4621      	mov	r1, r4
   b8420:	4620      	mov	r0, r4
   b8422:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8424:	4620      	mov	r0, r4
   b8426:	2110      	movs	r1, #16
}
   b8428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b842c:	f7fb be37 	b.w	b409e <_ZdlPvj>

000b8430 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8430:	4770      	bx	lr

000b8432 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8434:	4606      	mov	r6, r0
   b8436:	4615      	mov	r5, r2
   b8438:	460c      	mov	r4, r1
   b843a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b843c:	42bc      	cmp	r4, r7
   b843e:	d006      	beq.n	b844e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8440:	6833      	ldr	r3, [r6, #0]
   b8442:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8446:	689b      	ldr	r3, [r3, #8]
   b8448:	4630      	mov	r0, r6
   b844a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b844c:	e7f6      	b.n	b843c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b844e:	4628      	mov	r0, r5
   b8450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8452 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8452:	7c00      	ldrb	r0, [r0, #16]
   b8454:	2200      	movs	r2, #0
   b8456:	f7fd b8f5 	b.w	b5644 <hal_i2c_write>

000b845a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b845a:	7c00      	ldrb	r0, [r0, #16]
   b845c:	2100      	movs	r1, #0
   b845e:	f7fd b8f9 	b.w	b5654 <hal_i2c_available>

000b8462 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8462:	7c00      	ldrb	r0, [r0, #16]
   b8464:	2100      	movs	r1, #0
   b8466:	f7fd b8fd 	b.w	b5664 <hal_i2c_read>

000b846a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b846a:	7c00      	ldrb	r0, [r0, #16]
   b846c:	2100      	movs	r1, #0
   b846e:	f7fd b901 	b.w	b5674 <hal_i2c_peek>

000b8472 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8472:	7c00      	ldrb	r0, [r0, #16]
   b8474:	2100      	movs	r1, #0
   b8476:	f7fd b905 	b.w	b5684 <hal_i2c_flush>

000b847a <_ZN7TwoWireD0Ev>:
   b847a:	b510      	push	{r4, lr}
   b847c:	2114      	movs	r1, #20
   b847e:	4604      	mov	r4, r0
   b8480:	f7fb fe0d 	bl	b409e <_ZdlPvj>
   b8484:	4620      	mov	r0, r4
   b8486:	bd10      	pop	{r4, pc}

000b8488 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8488:	b510      	push	{r4, lr}
   b848a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b848e:	4604      	mov	r4, r0
   b8490:	4608      	mov	r0, r1
   b8492:	2100      	movs	r1, #0
   b8494:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8498:	4b03      	ldr	r3, [pc, #12]	; (b84a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b849a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b849c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b849e:	4611      	mov	r1, r2
   b84a0:	f7fd f900 	bl	b56a4 <hal_i2c_init>
}
   b84a4:	4620      	mov	r0, r4
   b84a6:	bd10      	pop	{r4, pc}
   b84a8:	000bbe84 	.word	0x000bbe84

000b84ac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b84ac:	2200      	movs	r2, #0
   b84ae:	6840      	ldr	r0, [r0, #4]
   b84b0:	4611      	mov	r1, r2
   b84b2:	f7fd b9e3 	b.w	b587c <network_ready>

000b84b6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b84b6:	2200      	movs	r2, #0
   b84b8:	6840      	ldr	r0, [r0, #4]
   b84ba:	4611      	mov	r1, r2
   b84bc:	f7fd b9fe 	b.w	b58bc <network_listening>

000b84c0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b84c0:	2200      	movs	r2, #0
   b84c2:	6840      	ldr	r0, [r0, #4]
   b84c4:	4611      	mov	r1, r2
   b84c6:	f7fd ba09 	b.w	b58dc <network_get_listen_timeout>

000b84ca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b84ca:	6840      	ldr	r0, [r0, #4]
   b84cc:	2200      	movs	r2, #0
   b84ce:	f7fd b9fd 	b.w	b58cc <network_set_listen_timeout>

000b84d2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b84d2:	6840      	ldr	r0, [r0, #4]
   b84d4:	2200      	movs	r2, #0
   b84d6:	f081 0101 	eor.w	r1, r1, #1
   b84da:	f7fd b9e7 	b.w	b58ac <network_listen>

000b84de <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b84de:	2300      	movs	r3, #0
   b84e0:	6840      	ldr	r0, [r0, #4]
   b84e2:	461a      	mov	r2, r3
   b84e4:	4619      	mov	r1, r3
   b84e6:	f7fd b9d9 	b.w	b589c <network_off>

000b84ea <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b84ea:	2300      	movs	r3, #0
   b84ec:	6840      	ldr	r0, [r0, #4]
   b84ee:	461a      	mov	r2, r3
   b84f0:	4619      	mov	r1, r3
   b84f2:	f7fd b9cb 	b.w	b588c <network_on>

000b84f6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b84f6:	2200      	movs	r2, #0
   b84f8:	6840      	ldr	r0, [r0, #4]
   b84fa:	4611      	mov	r1, r2
   b84fc:	f7fd b9ae 	b.w	b585c <network_connecting>

000b8500 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8500:	6840      	ldr	r0, [r0, #4]
   b8502:	2200      	movs	r2, #0
   b8504:	2102      	movs	r1, #2
   b8506:	f7fd b9b1 	b.w	b586c <network_disconnect>

000b850a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b850a:	2300      	movs	r3, #0
   b850c:	6840      	ldr	r0, [r0, #4]
   b850e:	461a      	mov	r2, r3
   b8510:	f7fd b99c 	b.w	b584c <network_connect>

000b8514 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8514:	4b02      	ldr	r3, [pc, #8]	; (b8520 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8516:	2204      	movs	r2, #4
   b8518:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b851a:	4a02      	ldr	r2, [pc, #8]	; (b8524 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b851c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b851e:	4770      	bx	lr
   b8520:	2003e710 	.word	0x2003e710
   b8524:	000bbeac 	.word	0x000bbeac

000b8528 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8528:	2300      	movs	r3, #0
   b852a:	6840      	ldr	r0, [r0, #4]
   b852c:	461a      	mov	r2, r3
   b852e:	f7fd b98d 	b.w	b584c <network_connect>

000b8532 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8532:	6840      	ldr	r0, [r0, #4]
   b8534:	2200      	movs	r2, #0
   b8536:	2102      	movs	r1, #2
   b8538:	f7fd b998 	b.w	b586c <network_disconnect>

000b853c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b853c:	2200      	movs	r2, #0
   b853e:	6840      	ldr	r0, [r0, #4]
   b8540:	4611      	mov	r1, r2
   b8542:	f7fd b98b 	b.w	b585c <network_connecting>

000b8546 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8546:	2200      	movs	r2, #0
   b8548:	6840      	ldr	r0, [r0, #4]
   b854a:	4611      	mov	r1, r2
   b854c:	f7fd b996 	b.w	b587c <network_ready>

000b8550 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8550:	2300      	movs	r3, #0
   b8552:	6840      	ldr	r0, [r0, #4]
   b8554:	461a      	mov	r2, r3
   b8556:	4619      	mov	r1, r3
   b8558:	f7fd b998 	b.w	b588c <network_on>

000b855c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b855c:	2300      	movs	r3, #0
   b855e:	6840      	ldr	r0, [r0, #4]
   b8560:	461a      	mov	r2, r3
   b8562:	4619      	mov	r1, r3
   b8564:	f7fd b99a 	b.w	b589c <network_off>

000b8568 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8568:	6840      	ldr	r0, [r0, #4]
   b856a:	2100      	movs	r1, #0
   b856c:	f7fd b9be 	b.w	b58ec <network_is_on>

000b8570 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8570:	6840      	ldr	r0, [r0, #4]
   b8572:	2100      	movs	r1, #0
   b8574:	f7fd b9c2 	b.w	b58fc <network_is_off>

000b8578 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8578:	6840      	ldr	r0, [r0, #4]
   b857a:	2200      	movs	r2, #0
   b857c:	f081 0101 	eor.w	r1, r1, #1
   b8580:	f7fd b994 	b.w	b58ac <network_listen>

000b8584 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8584:	6840      	ldr	r0, [r0, #4]
   b8586:	2200      	movs	r2, #0
   b8588:	f7fd b9a0 	b.w	b58cc <network_set_listen_timeout>

000b858c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b858c:	2200      	movs	r2, #0
   b858e:	6840      	ldr	r0, [r0, #4]
   b8590:	4611      	mov	r1, r2
   b8592:	f7fd b9a3 	b.w	b58dc <network_get_listen_timeout>

000b8596 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8596:	2200      	movs	r2, #0
   b8598:	6840      	ldr	r0, [r0, #4]
   b859a:	4611      	mov	r1, r2
   b859c:	f7fd b98e 	b.w	b58bc <network_listening>

000b85a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b85a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b85a4:	b095      	sub	sp, #84	; 0x54
   b85a6:	4614      	mov	r4, r2
   b85a8:	460d      	mov	r5, r1
   b85aa:	4607      	mov	r7, r0
    IPAddress addr;
   b85ac:	f7ff fdd2 	bl	b8154 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b85b0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b85b2:	221c      	movs	r2, #28
   b85b4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b85b6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b85b8:	f000 ff57 	bl	b946a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b85bc:	2340      	movs	r3, #64	; 0x40
   b85be:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b85c0:	4620      	mov	r0, r4
   b85c2:	466b      	mov	r3, sp
   b85c4:	aa0c      	add	r2, sp, #48	; 0x30
   b85c6:	2100      	movs	r1, #0
   b85c8:	f7fc feba 	bl	b5340 <netdb_getaddrinfo>
    if (!r) {
   b85cc:	4604      	mov	r4, r0
   b85ce:	2800      	cmp	r0, #0
   b85d0:	d14b      	bne.n	b866a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b85d2:	4602      	mov	r2, r0
   b85d4:	2101      	movs	r1, #1
   b85d6:	6868      	ldr	r0, [r5, #4]
   b85d8:	f7fd f950 	bl	b587c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b85dc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b85de:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b85e0:	4622      	mov	r2, r4
   b85e2:	6868      	ldr	r0, [r5, #4]
   b85e4:	f7fd f94a 	bl	b587c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b85e8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b85ea:	4681      	mov	r9, r0
        bool ok = false;
   b85ec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b85ee:	2e00      	cmp	r6, #0
   b85f0:	d03b      	beq.n	b866a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b85f2:	2900      	cmp	r1, #0
   b85f4:	d139      	bne.n	b866a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b85f6:	6873      	ldr	r3, [r6, #4]
   b85f8:	2b02      	cmp	r3, #2
   b85fa:	d003      	beq.n	b8604 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b85fc:	2b0a      	cmp	r3, #10
   b85fe:	d011      	beq.n	b8624 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8600:	69f6      	ldr	r6, [r6, #28]
   b8602:	e7f4      	b.n	b85ee <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8604:	f1b8 0f00 	cmp.w	r8, #0
   b8608:	d0fa      	beq.n	b8600 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b860a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b860c:	a806      	add	r0, sp, #24
   b860e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8610:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8612:	f7ff fdeb 	bl	b81ec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8618:	1d3c      	adds	r4, r7, #4
   b861a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b861c:	682b      	ldr	r3, [r5, #0]
   b861e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8620:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8622:	e7ed      	b.n	b8600 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8624:	f1b9 0f00 	cmp.w	r9, #0
   b8628:	d0ea      	beq.n	b8600 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b862a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b862c:	2210      	movs	r2, #16
   b862e:	a801      	add	r0, sp, #4
   b8630:	f000 ff1b 	bl	b946a <memset>
                    a.v = 6;
   b8634:	2306      	movs	r3, #6
   b8636:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b863a:	ad01      	add	r5, sp, #4
   b863c:	f104 0308 	add.w	r3, r4, #8
   b8640:	3418      	adds	r4, #24
   b8642:	6818      	ldr	r0, [r3, #0]
   b8644:	6859      	ldr	r1, [r3, #4]
   b8646:	462a      	mov	r2, r5
   b8648:	c203      	stmia	r2!, {r0, r1}
   b864a:	3308      	adds	r3, #8
   b864c:	42a3      	cmp	r3, r4
   b864e:	4615      	mov	r5, r2
   b8650:	d1f7      	bne.n	b8642 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8652:	a901      	add	r1, sp, #4
   b8654:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8656:	ad07      	add	r5, sp, #28
   b8658:	f7ff fd8a 	bl	b8170 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b865c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b865e:	1d3c      	adds	r4, r7, #4
   b8660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8662:	682b      	ldr	r3, [r5, #0]
   b8664:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8666:	4649      	mov	r1, r9
   b8668:	e7ca      	b.n	b8600 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b866a:	9800      	ldr	r0, [sp, #0]
   b866c:	f7fc fe60 	bl	b5330 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8670:	4638      	mov	r0, r7
   b8672:	b015      	add	sp, #84	; 0x54
   b8674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8678 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8678:	4b02      	ldr	r3, [pc, #8]	; (b8684 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b867a:	4a03      	ldr	r2, [pc, #12]	; (b8688 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b867c:	601a      	str	r2, [r3, #0]
   b867e:	2200      	movs	r2, #0
   b8680:	605a      	str	r2, [r3, #4]

} // spark
   b8682:	4770      	bx	lr
   b8684:	2003e718 	.word	0x2003e718
   b8688:	000bbee8 	.word	0x000bbee8

000b868c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b868c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b868e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8690:	d902      	bls.n	b8698 <pinAvailable+0xc>
    return false;
   b8692:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8694:	b002      	add	sp, #8
   b8696:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8698:	f1a0 030b 	sub.w	r3, r0, #11
   b869c:	2b02      	cmp	r3, #2
   b869e:	d81a      	bhi.n	b86d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b86a0:	4c17      	ldr	r4, [pc, #92]	; (b8700 <pinAvailable+0x74>)
   b86a2:	7821      	ldrb	r1, [r4, #0]
   b86a4:	f3bf 8f5b 	dmb	ish
   b86a8:	f011 0101 	ands.w	r1, r1, #1
   b86ac:	d10b      	bne.n	b86c6 <pinAvailable+0x3a>
   b86ae:	4620      	mov	r0, r4
   b86b0:	9101      	str	r1, [sp, #4]
   b86b2:	f7fb fcf6 	bl	b40a2 <__cxa_guard_acquire>
   b86b6:	9901      	ldr	r1, [sp, #4]
   b86b8:	b128      	cbz	r0, b86c6 <pinAvailable+0x3a>
   b86ba:	4812      	ldr	r0, [pc, #72]	; (b8704 <pinAvailable+0x78>)
   b86bc:	f7fd f9f4 	bl	b5aa8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b86c0:	4620      	mov	r0, r4
   b86c2:	f7fb fcf3 	bl	b40ac <__cxa_guard_release>
   b86c6:	4b0f      	ldr	r3, [pc, #60]	; (b8704 <pinAvailable+0x78>)
   b86c8:	7818      	ldrb	r0, [r3, #0]
   b86ca:	f7fd f82b 	bl	b5724 <hal_spi_is_enabled>
   b86ce:	2800      	cmp	r0, #0
   b86d0:	d1df      	bne.n	b8692 <pinAvailable+0x6>
  return true; // 'pin' is available
   b86d2:	2001      	movs	r0, #1
   b86d4:	e7de      	b.n	b8694 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b86d6:	2801      	cmp	r0, #1
   b86d8:	d809      	bhi.n	b86ee <pinAvailable+0x62>
   b86da:	f000 f87d 	bl	b87d8 <_Z19__fetch_global_Wirev>
   b86de:	2100      	movs	r1, #0
   b86e0:	7c00      	ldrb	r0, [r0, #16]
   b86e2:	f7fc ffd7 	bl	b5694 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b86e6:	f080 0001 	eor.w	r0, r0, #1
   b86ea:	b2c0      	uxtb	r0, r0
   b86ec:	e7d2      	b.n	b8694 <pinAvailable+0x8>
   b86ee:	3809      	subs	r0, #9
   b86f0:	2801      	cmp	r0, #1
   b86f2:	d8ee      	bhi.n	b86d2 <pinAvailable+0x46>
   b86f4:	f000 f834 	bl	b8760 <_Z22__fetch_global_Serial1v>
   b86f8:	7c00      	ldrb	r0, [r0, #16]
   b86fa:	f7fc ff8b 	bl	b5614 <hal_usart_is_enabled>
   b86fe:	e7f2      	b.n	b86e6 <pinAvailable+0x5a>
   b8700:	2003e720 	.word	0x2003e720
   b8704:	2003e724 	.word	0x2003e724

000b8708 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8708:	2823      	cmp	r0, #35	; 0x23
{
   b870a:	b538      	push	{r3, r4, r5, lr}
   b870c:	4604      	mov	r4, r0
   b870e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8710:	d80a      	bhi.n	b8728 <pinMode+0x20>
   b8712:	29ff      	cmp	r1, #255	; 0xff
   b8714:	d008      	beq.n	b8728 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8716:	f7ff ffb9 	bl	b868c <pinAvailable>
   b871a:	b128      	cbz	r0, b8728 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b871c:	4629      	mov	r1, r5
   b871e:	4620      	mov	r0, r4
}
   b8720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8724:	f7fc be14 	b.w	b5350 <HAL_Pin_Mode>
}
   b8728:	bd38      	pop	{r3, r4, r5, pc}

000b872a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b872a:	4770      	bx	lr

000b872c <_Z20acquireSerial1Bufferv>:
{
   b872c:	b538      	push	{r3, r4, r5, lr}
   b872e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8730:	2514      	movs	r5, #20
   b8732:	462a      	mov	r2, r5
   b8734:	2100      	movs	r1, #0
   b8736:	f000 fe98 	bl	b946a <memset>
   b873a:	8025      	strh	r5, [r4, #0]
   b873c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b873e:	4907      	ldr	r1, [pc, #28]	; (b875c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8740:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8742:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8744:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8746:	f000 f86b 	bl	b8820 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b874a:	4904      	ldr	r1, [pc, #16]	; (b875c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b874c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b874e:	4628      	mov	r0, r5
   b8750:	f000 f866 	bl	b8820 <_ZnajRKSt9nothrow_t>
    };
   b8754:	60e0      	str	r0, [r4, #12]
}
   b8756:	4620      	mov	r0, r4
   b8758:	bd38      	pop	{r3, r4, r5, pc}
   b875a:	bf00      	nop
   b875c:	000bbf1c 	.word	0x000bbf1c

000b8760 <_Z22__fetch_global_Serial1v>:
{
   b8760:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8762:	4d0e      	ldr	r5, [pc, #56]	; (b879c <_Z22__fetch_global_Serial1v+0x3c>)
   b8764:	7829      	ldrb	r1, [r5, #0]
   b8766:	f3bf 8f5b 	dmb	ish
   b876a:	f011 0401 	ands.w	r4, r1, #1
{
   b876e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8770:	d111      	bne.n	b8796 <_Z22__fetch_global_Serial1v+0x36>
   b8772:	4628      	mov	r0, r5
   b8774:	f7fb fc95 	bl	b40a2 <__cxa_guard_acquire>
   b8778:	b168      	cbz	r0, b8796 <_Z22__fetch_global_Serial1v+0x36>
   b877a:	a801      	add	r0, sp, #4
   b877c:	f7ff ffd6 	bl	b872c <_Z20acquireSerial1Bufferv>
   b8780:	aa01      	add	r2, sp, #4
   b8782:	4621      	mov	r1, r4
   b8784:	4806      	ldr	r0, [pc, #24]	; (b87a0 <_Z22__fetch_global_Serial1v+0x40>)
   b8786:	f7ff fe2b 	bl	b83e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b878a:	4628      	mov	r0, r5
   b878c:	f7fb fc8e 	bl	b40ac <__cxa_guard_release>
   b8790:	4804      	ldr	r0, [pc, #16]	; (b87a4 <_Z22__fetch_global_Serial1v+0x44>)
   b8792:	f000 fe25 	bl	b93e0 <atexit>
    return serial1;
}
   b8796:	4802      	ldr	r0, [pc, #8]	; (b87a0 <_Z22__fetch_global_Serial1v+0x40>)
   b8798:	b007      	add	sp, #28
   b879a:	bd30      	pop	{r4, r5, pc}
   b879c:	2003e72c 	.word	0x2003e72c
   b87a0:	2003e730 	.word	0x2003e730
   b87a4:	000b872b 	.word	0x000b872b

000b87a8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b87a8:	4770      	bx	lr
	...

000b87ac <_Z17acquireWireBufferv>:
{
   b87ac:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b87ae:	2520      	movs	r5, #32
   b87b0:	2314      	movs	r3, #20
{
   b87b2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b87b4:	6003      	str	r3, [r0, #0]
   b87b6:	6085      	str	r5, [r0, #8]
   b87b8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b87ba:	4906      	ldr	r1, [pc, #24]	; (b87d4 <_Z17acquireWireBufferv+0x28>)
   b87bc:	4628      	mov	r0, r5
   b87be:	f000 f82f 	bl	b8820 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b87c2:	4904      	ldr	r1, [pc, #16]	; (b87d4 <_Z17acquireWireBufferv+0x28>)
	};
   b87c4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b87c6:	4628      	mov	r0, r5
   b87c8:	f000 f82a 	bl	b8820 <_ZnajRKSt9nothrow_t>
	};
   b87cc:	60e0      	str	r0, [r4, #12]
}
   b87ce:	4620      	mov	r0, r4
   b87d0:	bd38      	pop	{r3, r4, r5, pc}
   b87d2:	bf00      	nop
   b87d4:	000bbf1c 	.word	0x000bbf1c

000b87d8 <_Z19__fetch_global_Wirev>:
{
   b87d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b87da:	4d0e      	ldr	r5, [pc, #56]	; (b8814 <_Z19__fetch_global_Wirev+0x3c>)
   b87dc:	7829      	ldrb	r1, [r5, #0]
   b87de:	f3bf 8f5b 	dmb	ish
   b87e2:	f011 0401 	ands.w	r4, r1, #1
{
   b87e6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b87e8:	d111      	bne.n	b880e <_Z19__fetch_global_Wirev+0x36>
   b87ea:	4628      	mov	r0, r5
   b87ec:	f7fb fc59 	bl	b40a2 <__cxa_guard_acquire>
   b87f0:	b168      	cbz	r0, b880e <_Z19__fetch_global_Wirev+0x36>
   b87f2:	a801      	add	r0, sp, #4
   b87f4:	f7ff ffda 	bl	b87ac <_Z17acquireWireBufferv>
   b87f8:	aa01      	add	r2, sp, #4
   b87fa:	4621      	mov	r1, r4
   b87fc:	4806      	ldr	r0, [pc, #24]	; (b8818 <_Z19__fetch_global_Wirev+0x40>)
   b87fe:	f7ff fe43 	bl	b8488 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8802:	4628      	mov	r0, r5
   b8804:	f7fb fc52 	bl	b40ac <__cxa_guard_release>
   b8808:	4804      	ldr	r0, [pc, #16]	; (b881c <_Z19__fetch_global_Wirev+0x44>)
   b880a:	f000 fde9 	bl	b93e0 <atexit>
	return wire;
}
   b880e:	4802      	ldr	r0, [pc, #8]	; (b8818 <_Z19__fetch_global_Wirev+0x40>)
   b8810:	b007      	add	sp, #28
   b8812:	bd30      	pop	{r4, r5, pc}
   b8814:	2003e748 	.word	0x2003e748
   b8818:	2003e74c 	.word	0x2003e74c
   b881c:	000b87a9 	.word	0x000b87a9

000b8820 <_ZnajRKSt9nothrow_t>:
   b8820:	f7fb bc3b 	b.w	b409a <_Znaj>

000b8824 <_ZSt25__throw_bad_function_callv>:
   b8824:	b508      	push	{r3, lr}
   b8826:	f7fd f8d1 	bl	b59cc <abort>
	...

000b882c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b882c:	4901      	ldr	r1, [pc, #4]	; (b8834 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b882e:	f000 b8f9 	b.w	b8a24 <_ZNKSt9type_infoeqERKS_>
   b8832:	bf00      	nop
   b8834:	000bbf38 	.word	0x000bbf38

000b8838 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b883a:	2400      	movs	r4, #0
   b883c:	2310      	movs	r3, #16
   b883e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8842:	6803      	ldr	r3, [r0, #0]
   b8844:	4615      	mov	r5, r2
   b8846:	699e      	ldr	r6, [r3, #24]
   b8848:	6812      	ldr	r2, [r2, #0]
   b884a:	466b      	mov	r3, sp
   b884c:	e9cd 4400 	strd	r4, r4, [sp]
   b8850:	47b0      	blx	r6
   b8852:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8856:	f003 0306 	and.w	r3, r3, #6
   b885a:	2b06      	cmp	r3, #6
   b885c:	bf03      	ittte	eq
   b885e:	9b00      	ldreq	r3, [sp, #0]
   b8860:	602b      	streq	r3, [r5, #0]
   b8862:	2001      	moveq	r0, #1
   b8864:	4620      	movne	r0, r4
   b8866:	b004      	add	sp, #16
   b8868:	bd70      	pop	{r4, r5, r6, pc}

000b886a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b886a:	9800      	ldr	r0, [sp, #0]
   b886c:	4290      	cmp	r0, r2
   b886e:	bf14      	ite	ne
   b8870:	2001      	movne	r0, #1
   b8872:	2006      	moveq	r0, #6
   b8874:	4770      	bx	lr
	...

000b8878 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8878:	b510      	push	{r4, lr}
   b887a:	4b03      	ldr	r3, [pc, #12]	; (b8888 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b887c:	6003      	str	r3, [r0, #0]
   b887e:	4604      	mov	r4, r0
   b8880:	f000 f8cd 	bl	b8a1e <_ZNSt9type_infoD1Ev>
   b8884:	4620      	mov	r0, r4
   b8886:	bd10      	pop	{r4, pc}
   b8888:	000bbf78 	.word	0x000bbf78

000b888c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b888c:	b510      	push	{r4, lr}
   b888e:	4604      	mov	r4, r0
   b8890:	f7ff fff2 	bl	b8878 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8894:	4620      	mov	r0, r4
   b8896:	2108      	movs	r1, #8
   b8898:	f7fb fc01 	bl	b409e <_ZdlPvj>
   b889c:	4620      	mov	r0, r4
   b889e:	bd10      	pop	{r4, pc}

000b88a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b88a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88a4:	461f      	mov	r7, r3
   b88a6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b88aa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b88ae:	4598      	cmp	r8, r3
   b88b0:	4606      	mov	r6, r0
   b88b2:	4615      	mov	r5, r2
   b88b4:	d107      	bne.n	b88c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b88b6:	9907      	ldr	r1, [sp, #28]
   b88b8:	f000 f8b4 	bl	b8a24 <_ZNKSt9type_infoeqERKS_>
   b88bc:	b118      	cbz	r0, b88c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b88be:	7165      	strb	r5, [r4, #5]
   b88c0:	2000      	movs	r0, #0
   b88c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b88c6:	4639      	mov	r1, r7
   b88c8:	4630      	mov	r0, r6
   b88ca:	f000 f8ab 	bl	b8a24 <_ZNKSt9type_infoeqERKS_>
   b88ce:	2800      	cmp	r0, #0
   b88d0:	d0f6      	beq.n	b88c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b88d2:	2301      	movs	r3, #1
   b88d4:	f8c4 8000 	str.w	r8, [r4]
   b88d8:	7125      	strb	r5, [r4, #4]
   b88da:	71a3      	strb	r3, [r4, #6]
   b88dc:	e7f0      	b.n	b88c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b88de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b88de:	b538      	push	{r3, r4, r5, lr}
   b88e0:	4615      	mov	r5, r2
   b88e2:	461c      	mov	r4, r3
   b88e4:	f000 f89e 	bl	b8a24 <_ZNKSt9type_infoeqERKS_>
   b88e8:	b120      	cbz	r0, b88f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b88ea:	2308      	movs	r3, #8
   b88ec:	60e3      	str	r3, [r4, #12]
   b88ee:	2306      	movs	r3, #6
   b88f0:	6025      	str	r5, [r4, #0]
   b88f2:	7123      	strb	r3, [r4, #4]
   b88f4:	bd38      	pop	{r3, r4, r5, pc}

000b88f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b88f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b88f8:	4605      	mov	r5, r0
   b88fa:	460c      	mov	r4, r1
   b88fc:	9201      	str	r2, [sp, #4]
   b88fe:	461e      	mov	r6, r3
   b8900:	f000 f890 	bl	b8a24 <_ZNKSt9type_infoeqERKS_>
   b8904:	b950      	cbnz	r0, b891c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8906:	2e03      	cmp	r6, #3
   b8908:	d808      	bhi.n	b891c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b890a:	6823      	ldr	r3, [r4, #0]
   b890c:	9a01      	ldr	r2, [sp, #4]
   b890e:	695b      	ldr	r3, [r3, #20]
   b8910:	4629      	mov	r1, r5
   b8912:	4620      	mov	r0, r4
   b8914:	b002      	add	sp, #8
   b8916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b891a:	4718      	bx	r3
   b891c:	b002      	add	sp, #8
   b891e:	bd70      	pop	{r4, r5, r6, pc}

000b8920 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8920:	b510      	push	{r4, lr}
   b8922:	4b03      	ldr	r3, [pc, #12]	; (b8930 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8924:	6003      	str	r3, [r0, #0]
   b8926:	4604      	mov	r4, r0
   b8928:	f7ff ffa6 	bl	b8878 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b892c:	4620      	mov	r0, r4
   b892e:	bd10      	pop	{r4, pc}
   b8930:	000bbfd8 	.word	0x000bbfd8

000b8934 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8934:	b510      	push	{r4, lr}
   b8936:	4604      	mov	r4, r0
   b8938:	f7ff fff2 	bl	b8920 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b893c:	4620      	mov	r0, r4
   b893e:	210c      	movs	r1, #12
   b8940:	f7fb fbad 	bl	b409e <_ZdlPvj>
   b8944:	4620      	mov	r0, r4
   b8946:	bd10      	pop	{r4, pc}

000b8948 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b894a:	9f08      	ldr	r7, [sp, #32]
   b894c:	4297      	cmp	r7, r2
   b894e:	4605      	mov	r5, r0
   b8950:	460e      	mov	r6, r1
   b8952:	4614      	mov	r4, r2
   b8954:	d00a      	beq.n	b896c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8956:	68a8      	ldr	r0, [r5, #8]
   b8958:	6802      	ldr	r2, [r0, #0]
   b895a:	9708      	str	r7, [sp, #32]
   b895c:	6a15      	ldr	r5, [r2, #32]
   b895e:	4631      	mov	r1, r6
   b8960:	4622      	mov	r2, r4
   b8962:	46ac      	mov	ip, r5
   b8964:	b003      	add	sp, #12
   b8966:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b896a:	4760      	bx	ip
   b896c:	4619      	mov	r1, r3
   b896e:	9301      	str	r3, [sp, #4]
   b8970:	f000 f858 	bl	b8a24 <_ZNKSt9type_infoeqERKS_>
   b8974:	9b01      	ldr	r3, [sp, #4]
   b8976:	2800      	cmp	r0, #0
   b8978:	d0ed      	beq.n	b8956 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b897a:	2006      	movs	r0, #6
   b897c:	b003      	add	sp, #12
   b897e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8980 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8980:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8984:	460d      	mov	r5, r1
   b8986:	4619      	mov	r1, r3
   b8988:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b898c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8990:	4681      	mov	r9, r0
   b8992:	4617      	mov	r7, r2
   b8994:	4698      	mov	r8, r3
   b8996:	f000 f845 	bl	b8a24 <_ZNKSt9type_infoeqERKS_>
   b899a:	b190      	cbz	r0, b89c2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b899c:	2d00      	cmp	r5, #0
   b899e:	6034      	str	r4, [r6, #0]
   b89a0:	7137      	strb	r7, [r6, #4]
   b89a2:	db09      	blt.n	b89b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b89a4:	1961      	adds	r1, r4, r5
   b89a6:	458a      	cmp	sl, r1
   b89a8:	bf0c      	ite	eq
   b89aa:	2106      	moveq	r1, #6
   b89ac:	2101      	movne	r1, #1
   b89ae:	71b1      	strb	r1, [r6, #6]
   b89b0:	2000      	movs	r0, #0
   b89b2:	b001      	add	sp, #4
   b89b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b89b8:	3502      	adds	r5, #2
   b89ba:	d1f9      	bne.n	b89b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b89bc:	2301      	movs	r3, #1
   b89be:	71b3      	strb	r3, [r6, #6]
   b89c0:	e7f6      	b.n	b89b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b89c2:	4554      	cmp	r4, sl
   b89c4:	d106      	bne.n	b89d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b89c6:	4659      	mov	r1, fp
   b89c8:	4648      	mov	r0, r9
   b89ca:	f000 f82b 	bl	b8a24 <_ZNKSt9type_infoeqERKS_>
   b89ce:	b108      	cbz	r0, b89d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b89d0:	7177      	strb	r7, [r6, #5]
   b89d2:	e7ed      	b.n	b89b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b89d4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b89d8:	6803      	ldr	r3, [r0, #0]
   b89da:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b89de:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b89e2:	69dc      	ldr	r4, [r3, #28]
   b89e4:	463a      	mov	r2, r7
   b89e6:	4643      	mov	r3, r8
   b89e8:	4629      	mov	r1, r5
   b89ea:	46a4      	mov	ip, r4
   b89ec:	b001      	add	sp, #4
   b89ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b89f2:	4760      	bx	ip

000b89f4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b89f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b89f8:	4607      	mov	r7, r0
   b89fa:	460c      	mov	r4, r1
   b89fc:	4615      	mov	r5, r2
   b89fe:	461e      	mov	r6, r3
   b8a00:	f7ff ff6d 	bl	b88de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8a04:	b948      	cbnz	r0, b8a1a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8a06:	68b8      	ldr	r0, [r7, #8]
   b8a08:	6803      	ldr	r3, [r0, #0]
   b8a0a:	699f      	ldr	r7, [r3, #24]
   b8a0c:	462a      	mov	r2, r5
   b8a0e:	4633      	mov	r3, r6
   b8a10:	4621      	mov	r1, r4
   b8a12:	46bc      	mov	ip, r7
   b8a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8a18:	4760      	bx	ip
   b8a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8a1e <_ZNSt9type_infoD1Ev>:
   b8a1e:	4770      	bx	lr

000b8a20 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8a20:	2000      	movs	r0, #0
   b8a22:	4770      	bx	lr

000b8a24 <_ZNKSt9type_infoeqERKS_>:
   b8a24:	4281      	cmp	r1, r0
   b8a26:	b508      	push	{r3, lr}
   b8a28:	d00e      	beq.n	b8a48 <_ZNKSt9type_infoeqERKS_+0x24>
   b8a2a:	6840      	ldr	r0, [r0, #4]
   b8a2c:	7803      	ldrb	r3, [r0, #0]
   b8a2e:	2b2a      	cmp	r3, #42	; 0x2a
   b8a30:	d00c      	beq.n	b8a4c <_ZNKSt9type_infoeqERKS_+0x28>
   b8a32:	6849      	ldr	r1, [r1, #4]
   b8a34:	780b      	ldrb	r3, [r1, #0]
   b8a36:	2b2a      	cmp	r3, #42	; 0x2a
   b8a38:	bf08      	it	eq
   b8a3a:	3101      	addeq	r1, #1
   b8a3c:	f000 fd5b 	bl	b94f6 <strcmp>
   b8a40:	fab0 f080 	clz	r0, r0
   b8a44:	0940      	lsrs	r0, r0, #5
   b8a46:	bd08      	pop	{r3, pc}
   b8a48:	2001      	movs	r0, #1
   b8a4a:	e7fc      	b.n	b8a46 <_ZNKSt9type_infoeqERKS_+0x22>
   b8a4c:	2000      	movs	r0, #0
   b8a4e:	e7fa      	b.n	b8a46 <_ZNKSt9type_infoeqERKS_+0x22>

000b8a50 <__aeabi_drsub>:
   b8a50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8a54:	e002      	b.n	b8a5c <__adddf3>
   b8a56:	bf00      	nop

000b8a58 <__aeabi_dsub>:
   b8a58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8a5c <__adddf3>:
   b8a5c:	b530      	push	{r4, r5, lr}
   b8a5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8a62:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8a66:	ea94 0f05 	teq	r4, r5
   b8a6a:	bf08      	it	eq
   b8a6c:	ea90 0f02 	teqeq	r0, r2
   b8a70:	bf1f      	itttt	ne
   b8a72:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8a76:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8a7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8a7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8a82:	f000 80e2 	beq.w	b8c4a <__adddf3+0x1ee>
   b8a86:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8a8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8a8e:	bfb8      	it	lt
   b8a90:	426d      	neglt	r5, r5
   b8a92:	dd0c      	ble.n	b8aae <__adddf3+0x52>
   b8a94:	442c      	add	r4, r5
   b8a96:	ea80 0202 	eor.w	r2, r0, r2
   b8a9a:	ea81 0303 	eor.w	r3, r1, r3
   b8a9e:	ea82 0000 	eor.w	r0, r2, r0
   b8aa2:	ea83 0101 	eor.w	r1, r3, r1
   b8aa6:	ea80 0202 	eor.w	r2, r0, r2
   b8aaa:	ea81 0303 	eor.w	r3, r1, r3
   b8aae:	2d36      	cmp	r5, #54	; 0x36
   b8ab0:	bf88      	it	hi
   b8ab2:	bd30      	pophi	{r4, r5, pc}
   b8ab4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8ab8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8abc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8ac0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8ac4:	d002      	beq.n	b8acc <__adddf3+0x70>
   b8ac6:	4240      	negs	r0, r0
   b8ac8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8acc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8ad0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8ad4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8ad8:	d002      	beq.n	b8ae0 <__adddf3+0x84>
   b8ada:	4252      	negs	r2, r2
   b8adc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8ae0:	ea94 0f05 	teq	r4, r5
   b8ae4:	f000 80a7 	beq.w	b8c36 <__adddf3+0x1da>
   b8ae8:	f1a4 0401 	sub.w	r4, r4, #1
   b8aec:	f1d5 0e20 	rsbs	lr, r5, #32
   b8af0:	db0d      	blt.n	b8b0e <__adddf3+0xb2>
   b8af2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8af6:	fa22 f205 	lsr.w	r2, r2, r5
   b8afa:	1880      	adds	r0, r0, r2
   b8afc:	f141 0100 	adc.w	r1, r1, #0
   b8b00:	fa03 f20e 	lsl.w	r2, r3, lr
   b8b04:	1880      	adds	r0, r0, r2
   b8b06:	fa43 f305 	asr.w	r3, r3, r5
   b8b0a:	4159      	adcs	r1, r3
   b8b0c:	e00e      	b.n	b8b2c <__adddf3+0xd0>
   b8b0e:	f1a5 0520 	sub.w	r5, r5, #32
   b8b12:	f10e 0e20 	add.w	lr, lr, #32
   b8b16:	2a01      	cmp	r2, #1
   b8b18:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8b1c:	bf28      	it	cs
   b8b1e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8b22:	fa43 f305 	asr.w	r3, r3, r5
   b8b26:	18c0      	adds	r0, r0, r3
   b8b28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8b2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8b30:	d507      	bpl.n	b8b42 <__adddf3+0xe6>
   b8b32:	f04f 0e00 	mov.w	lr, #0
   b8b36:	f1dc 0c00 	rsbs	ip, ip, #0
   b8b3a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8b3e:	eb6e 0101 	sbc.w	r1, lr, r1
   b8b42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8b46:	d31b      	bcc.n	b8b80 <__adddf3+0x124>
   b8b48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8b4c:	d30c      	bcc.n	b8b68 <__adddf3+0x10c>
   b8b4e:	0849      	lsrs	r1, r1, #1
   b8b50:	ea5f 0030 	movs.w	r0, r0, rrx
   b8b54:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8b58:	f104 0401 	add.w	r4, r4, #1
   b8b5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8b60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8b64:	f080 809a 	bcs.w	b8c9c <__adddf3+0x240>
   b8b68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8b6c:	bf08      	it	eq
   b8b6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8b72:	f150 0000 	adcs.w	r0, r0, #0
   b8b76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8b7a:	ea41 0105 	orr.w	r1, r1, r5
   b8b7e:	bd30      	pop	{r4, r5, pc}
   b8b80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8b84:	4140      	adcs	r0, r0
   b8b86:	eb41 0101 	adc.w	r1, r1, r1
   b8b8a:	3c01      	subs	r4, #1
   b8b8c:	bf28      	it	cs
   b8b8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8b92:	d2e9      	bcs.n	b8b68 <__adddf3+0x10c>
   b8b94:	f091 0f00 	teq	r1, #0
   b8b98:	bf04      	itt	eq
   b8b9a:	4601      	moveq	r1, r0
   b8b9c:	2000      	moveq	r0, #0
   b8b9e:	fab1 f381 	clz	r3, r1
   b8ba2:	bf08      	it	eq
   b8ba4:	3320      	addeq	r3, #32
   b8ba6:	f1a3 030b 	sub.w	r3, r3, #11
   b8baa:	f1b3 0220 	subs.w	r2, r3, #32
   b8bae:	da0c      	bge.n	b8bca <__adddf3+0x16e>
   b8bb0:	320c      	adds	r2, #12
   b8bb2:	dd08      	ble.n	b8bc6 <__adddf3+0x16a>
   b8bb4:	f102 0c14 	add.w	ip, r2, #20
   b8bb8:	f1c2 020c 	rsb	r2, r2, #12
   b8bbc:	fa01 f00c 	lsl.w	r0, r1, ip
   b8bc0:	fa21 f102 	lsr.w	r1, r1, r2
   b8bc4:	e00c      	b.n	b8be0 <__adddf3+0x184>
   b8bc6:	f102 0214 	add.w	r2, r2, #20
   b8bca:	bfd8      	it	le
   b8bcc:	f1c2 0c20 	rsble	ip, r2, #32
   b8bd0:	fa01 f102 	lsl.w	r1, r1, r2
   b8bd4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8bd8:	bfdc      	itt	le
   b8bda:	ea41 010c 	orrle.w	r1, r1, ip
   b8bde:	4090      	lslle	r0, r2
   b8be0:	1ae4      	subs	r4, r4, r3
   b8be2:	bfa2      	ittt	ge
   b8be4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8be8:	4329      	orrge	r1, r5
   b8bea:	bd30      	popge	{r4, r5, pc}
   b8bec:	ea6f 0404 	mvn.w	r4, r4
   b8bf0:	3c1f      	subs	r4, #31
   b8bf2:	da1c      	bge.n	b8c2e <__adddf3+0x1d2>
   b8bf4:	340c      	adds	r4, #12
   b8bf6:	dc0e      	bgt.n	b8c16 <__adddf3+0x1ba>
   b8bf8:	f104 0414 	add.w	r4, r4, #20
   b8bfc:	f1c4 0220 	rsb	r2, r4, #32
   b8c00:	fa20 f004 	lsr.w	r0, r0, r4
   b8c04:	fa01 f302 	lsl.w	r3, r1, r2
   b8c08:	ea40 0003 	orr.w	r0, r0, r3
   b8c0c:	fa21 f304 	lsr.w	r3, r1, r4
   b8c10:	ea45 0103 	orr.w	r1, r5, r3
   b8c14:	bd30      	pop	{r4, r5, pc}
   b8c16:	f1c4 040c 	rsb	r4, r4, #12
   b8c1a:	f1c4 0220 	rsb	r2, r4, #32
   b8c1e:	fa20 f002 	lsr.w	r0, r0, r2
   b8c22:	fa01 f304 	lsl.w	r3, r1, r4
   b8c26:	ea40 0003 	orr.w	r0, r0, r3
   b8c2a:	4629      	mov	r1, r5
   b8c2c:	bd30      	pop	{r4, r5, pc}
   b8c2e:	fa21 f004 	lsr.w	r0, r1, r4
   b8c32:	4629      	mov	r1, r5
   b8c34:	bd30      	pop	{r4, r5, pc}
   b8c36:	f094 0f00 	teq	r4, #0
   b8c3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8c3e:	bf06      	itte	eq
   b8c40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8c44:	3401      	addeq	r4, #1
   b8c46:	3d01      	subne	r5, #1
   b8c48:	e74e      	b.n	b8ae8 <__adddf3+0x8c>
   b8c4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8c4e:	bf18      	it	ne
   b8c50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8c54:	d029      	beq.n	b8caa <__adddf3+0x24e>
   b8c56:	ea94 0f05 	teq	r4, r5
   b8c5a:	bf08      	it	eq
   b8c5c:	ea90 0f02 	teqeq	r0, r2
   b8c60:	d005      	beq.n	b8c6e <__adddf3+0x212>
   b8c62:	ea54 0c00 	orrs.w	ip, r4, r0
   b8c66:	bf04      	itt	eq
   b8c68:	4619      	moveq	r1, r3
   b8c6a:	4610      	moveq	r0, r2
   b8c6c:	bd30      	pop	{r4, r5, pc}
   b8c6e:	ea91 0f03 	teq	r1, r3
   b8c72:	bf1e      	ittt	ne
   b8c74:	2100      	movne	r1, #0
   b8c76:	2000      	movne	r0, #0
   b8c78:	bd30      	popne	{r4, r5, pc}
   b8c7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8c7e:	d105      	bne.n	b8c8c <__adddf3+0x230>
   b8c80:	0040      	lsls	r0, r0, #1
   b8c82:	4149      	adcs	r1, r1
   b8c84:	bf28      	it	cs
   b8c86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8c8a:	bd30      	pop	{r4, r5, pc}
   b8c8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8c90:	bf3c      	itt	cc
   b8c92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8c96:	bd30      	popcc	{r4, r5, pc}
   b8c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8c9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8ca0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8ca4:	f04f 0000 	mov.w	r0, #0
   b8ca8:	bd30      	pop	{r4, r5, pc}
   b8caa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8cae:	bf1a      	itte	ne
   b8cb0:	4619      	movne	r1, r3
   b8cb2:	4610      	movne	r0, r2
   b8cb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8cb8:	bf1c      	itt	ne
   b8cba:	460b      	movne	r3, r1
   b8cbc:	4602      	movne	r2, r0
   b8cbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8cc2:	bf06      	itte	eq
   b8cc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8cc8:	ea91 0f03 	teqeq	r1, r3
   b8ccc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8cd0:	bd30      	pop	{r4, r5, pc}
   b8cd2:	bf00      	nop

000b8cd4 <__aeabi_ui2d>:
   b8cd4:	f090 0f00 	teq	r0, #0
   b8cd8:	bf04      	itt	eq
   b8cda:	2100      	moveq	r1, #0
   b8cdc:	4770      	bxeq	lr
   b8cde:	b530      	push	{r4, r5, lr}
   b8ce0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8ce4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8ce8:	f04f 0500 	mov.w	r5, #0
   b8cec:	f04f 0100 	mov.w	r1, #0
   b8cf0:	e750      	b.n	b8b94 <__adddf3+0x138>
   b8cf2:	bf00      	nop

000b8cf4 <__aeabi_i2d>:
   b8cf4:	f090 0f00 	teq	r0, #0
   b8cf8:	bf04      	itt	eq
   b8cfa:	2100      	moveq	r1, #0
   b8cfc:	4770      	bxeq	lr
   b8cfe:	b530      	push	{r4, r5, lr}
   b8d00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8d04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8d08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8d0c:	bf48      	it	mi
   b8d0e:	4240      	negmi	r0, r0
   b8d10:	f04f 0100 	mov.w	r1, #0
   b8d14:	e73e      	b.n	b8b94 <__adddf3+0x138>
   b8d16:	bf00      	nop

000b8d18 <__aeabi_f2d>:
   b8d18:	0042      	lsls	r2, r0, #1
   b8d1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8d1e:	ea4f 0131 	mov.w	r1, r1, rrx
   b8d22:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8d26:	bf1f      	itttt	ne
   b8d28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8d2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8d30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8d34:	4770      	bxne	lr
   b8d36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8d3a:	bf08      	it	eq
   b8d3c:	4770      	bxeq	lr
   b8d3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8d42:	bf04      	itt	eq
   b8d44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8d48:	4770      	bxeq	lr
   b8d4a:	b530      	push	{r4, r5, lr}
   b8d4c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8d50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8d54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8d58:	e71c      	b.n	b8b94 <__adddf3+0x138>
   b8d5a:	bf00      	nop

000b8d5c <__aeabi_ul2d>:
   b8d5c:	ea50 0201 	orrs.w	r2, r0, r1
   b8d60:	bf08      	it	eq
   b8d62:	4770      	bxeq	lr
   b8d64:	b530      	push	{r4, r5, lr}
   b8d66:	f04f 0500 	mov.w	r5, #0
   b8d6a:	e00a      	b.n	b8d82 <__aeabi_l2d+0x16>

000b8d6c <__aeabi_l2d>:
   b8d6c:	ea50 0201 	orrs.w	r2, r0, r1
   b8d70:	bf08      	it	eq
   b8d72:	4770      	bxeq	lr
   b8d74:	b530      	push	{r4, r5, lr}
   b8d76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8d7a:	d502      	bpl.n	b8d82 <__aeabi_l2d+0x16>
   b8d7c:	4240      	negs	r0, r0
   b8d7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8d82:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8d86:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8d8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8d8e:	f43f aed8 	beq.w	b8b42 <__adddf3+0xe6>
   b8d92:	f04f 0203 	mov.w	r2, #3
   b8d96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8d9a:	bf18      	it	ne
   b8d9c:	3203      	addne	r2, #3
   b8d9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8da2:	bf18      	it	ne
   b8da4:	3203      	addne	r2, #3
   b8da6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8daa:	f1c2 0320 	rsb	r3, r2, #32
   b8dae:	fa00 fc03 	lsl.w	ip, r0, r3
   b8db2:	fa20 f002 	lsr.w	r0, r0, r2
   b8db6:	fa01 fe03 	lsl.w	lr, r1, r3
   b8dba:	ea40 000e 	orr.w	r0, r0, lr
   b8dbe:	fa21 f102 	lsr.w	r1, r1, r2
   b8dc2:	4414      	add	r4, r2
   b8dc4:	e6bd      	b.n	b8b42 <__adddf3+0xe6>
   b8dc6:	bf00      	nop

000b8dc8 <__aeabi_dmul>:
   b8dc8:	b570      	push	{r4, r5, r6, lr}
   b8dca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8dce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8dd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8dd6:	bf1d      	ittte	ne
   b8dd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8ddc:	ea94 0f0c 	teqne	r4, ip
   b8de0:	ea95 0f0c 	teqne	r5, ip
   b8de4:	f000 f8de 	bleq	b8fa4 <__aeabi_dmul+0x1dc>
   b8de8:	442c      	add	r4, r5
   b8dea:	ea81 0603 	eor.w	r6, r1, r3
   b8dee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8df2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8df6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8dfa:	bf18      	it	ne
   b8dfc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8e00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8e08:	d038      	beq.n	b8e7c <__aeabi_dmul+0xb4>
   b8e0a:	fba0 ce02 	umull	ip, lr, r0, r2
   b8e0e:	f04f 0500 	mov.w	r5, #0
   b8e12:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8e16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8e1a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b8e1e:	f04f 0600 	mov.w	r6, #0
   b8e22:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8e26:	f09c 0f00 	teq	ip, #0
   b8e2a:	bf18      	it	ne
   b8e2c:	f04e 0e01 	orrne.w	lr, lr, #1
   b8e30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8e34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8e38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8e3c:	d204      	bcs.n	b8e48 <__aeabi_dmul+0x80>
   b8e3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8e42:	416d      	adcs	r5, r5
   b8e44:	eb46 0606 	adc.w	r6, r6, r6
   b8e48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8e4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8e50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8e54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8e58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8e5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8e60:	bf88      	it	hi
   b8e62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8e66:	d81e      	bhi.n	b8ea6 <__aeabi_dmul+0xde>
   b8e68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8e6c:	bf08      	it	eq
   b8e6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8e72:	f150 0000 	adcs.w	r0, r0, #0
   b8e76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8e7a:	bd70      	pop	{r4, r5, r6, pc}
   b8e7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8e80:	ea46 0101 	orr.w	r1, r6, r1
   b8e84:	ea40 0002 	orr.w	r0, r0, r2
   b8e88:	ea81 0103 	eor.w	r1, r1, r3
   b8e8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8e90:	bfc2      	ittt	gt
   b8e92:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8e96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8e9a:	bd70      	popgt	{r4, r5, r6, pc}
   b8e9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8ea0:	f04f 0e00 	mov.w	lr, #0
   b8ea4:	3c01      	subs	r4, #1
   b8ea6:	f300 80ab 	bgt.w	b9000 <__aeabi_dmul+0x238>
   b8eaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8eae:	bfde      	ittt	le
   b8eb0:	2000      	movle	r0, #0
   b8eb2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8eb6:	bd70      	pople	{r4, r5, r6, pc}
   b8eb8:	f1c4 0400 	rsb	r4, r4, #0
   b8ebc:	3c20      	subs	r4, #32
   b8ebe:	da35      	bge.n	b8f2c <__aeabi_dmul+0x164>
   b8ec0:	340c      	adds	r4, #12
   b8ec2:	dc1b      	bgt.n	b8efc <__aeabi_dmul+0x134>
   b8ec4:	f104 0414 	add.w	r4, r4, #20
   b8ec8:	f1c4 0520 	rsb	r5, r4, #32
   b8ecc:	fa00 f305 	lsl.w	r3, r0, r5
   b8ed0:	fa20 f004 	lsr.w	r0, r0, r4
   b8ed4:	fa01 f205 	lsl.w	r2, r1, r5
   b8ed8:	ea40 0002 	orr.w	r0, r0, r2
   b8edc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8ee0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8ee4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8ee8:	fa21 f604 	lsr.w	r6, r1, r4
   b8eec:	eb42 0106 	adc.w	r1, r2, r6
   b8ef0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8ef4:	bf08      	it	eq
   b8ef6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8efa:	bd70      	pop	{r4, r5, r6, pc}
   b8efc:	f1c4 040c 	rsb	r4, r4, #12
   b8f00:	f1c4 0520 	rsb	r5, r4, #32
   b8f04:	fa00 f304 	lsl.w	r3, r0, r4
   b8f08:	fa20 f005 	lsr.w	r0, r0, r5
   b8f0c:	fa01 f204 	lsl.w	r2, r1, r4
   b8f10:	ea40 0002 	orr.w	r0, r0, r2
   b8f14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8f18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8f1c:	f141 0100 	adc.w	r1, r1, #0
   b8f20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8f24:	bf08      	it	eq
   b8f26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8f2a:	bd70      	pop	{r4, r5, r6, pc}
   b8f2c:	f1c4 0520 	rsb	r5, r4, #32
   b8f30:	fa00 f205 	lsl.w	r2, r0, r5
   b8f34:	ea4e 0e02 	orr.w	lr, lr, r2
   b8f38:	fa20 f304 	lsr.w	r3, r0, r4
   b8f3c:	fa01 f205 	lsl.w	r2, r1, r5
   b8f40:	ea43 0302 	orr.w	r3, r3, r2
   b8f44:	fa21 f004 	lsr.w	r0, r1, r4
   b8f48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8f4c:	fa21 f204 	lsr.w	r2, r1, r4
   b8f50:	ea20 0002 	bic.w	r0, r0, r2
   b8f54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8f58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8f5c:	bf08      	it	eq
   b8f5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8f62:	bd70      	pop	{r4, r5, r6, pc}
   b8f64:	f094 0f00 	teq	r4, #0
   b8f68:	d10f      	bne.n	b8f8a <__aeabi_dmul+0x1c2>
   b8f6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8f6e:	0040      	lsls	r0, r0, #1
   b8f70:	eb41 0101 	adc.w	r1, r1, r1
   b8f74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8f78:	bf08      	it	eq
   b8f7a:	3c01      	subeq	r4, #1
   b8f7c:	d0f7      	beq.n	b8f6e <__aeabi_dmul+0x1a6>
   b8f7e:	ea41 0106 	orr.w	r1, r1, r6
   b8f82:	f095 0f00 	teq	r5, #0
   b8f86:	bf18      	it	ne
   b8f88:	4770      	bxne	lr
   b8f8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8f8e:	0052      	lsls	r2, r2, #1
   b8f90:	eb43 0303 	adc.w	r3, r3, r3
   b8f94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8f98:	bf08      	it	eq
   b8f9a:	3d01      	subeq	r5, #1
   b8f9c:	d0f7      	beq.n	b8f8e <__aeabi_dmul+0x1c6>
   b8f9e:	ea43 0306 	orr.w	r3, r3, r6
   b8fa2:	4770      	bx	lr
   b8fa4:	ea94 0f0c 	teq	r4, ip
   b8fa8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8fac:	bf18      	it	ne
   b8fae:	ea95 0f0c 	teqne	r5, ip
   b8fb2:	d00c      	beq.n	b8fce <__aeabi_dmul+0x206>
   b8fb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8fb8:	bf18      	it	ne
   b8fba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8fbe:	d1d1      	bne.n	b8f64 <__aeabi_dmul+0x19c>
   b8fc0:	ea81 0103 	eor.w	r1, r1, r3
   b8fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8fc8:	f04f 0000 	mov.w	r0, #0
   b8fcc:	bd70      	pop	{r4, r5, r6, pc}
   b8fce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8fd2:	bf06      	itte	eq
   b8fd4:	4610      	moveq	r0, r2
   b8fd6:	4619      	moveq	r1, r3
   b8fd8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8fdc:	d019      	beq.n	b9012 <__aeabi_dmul+0x24a>
   b8fde:	ea94 0f0c 	teq	r4, ip
   b8fe2:	d102      	bne.n	b8fea <__aeabi_dmul+0x222>
   b8fe4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8fe8:	d113      	bne.n	b9012 <__aeabi_dmul+0x24a>
   b8fea:	ea95 0f0c 	teq	r5, ip
   b8fee:	d105      	bne.n	b8ffc <__aeabi_dmul+0x234>
   b8ff0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8ff4:	bf1c      	itt	ne
   b8ff6:	4610      	movne	r0, r2
   b8ff8:	4619      	movne	r1, r3
   b8ffa:	d10a      	bne.n	b9012 <__aeabi_dmul+0x24a>
   b8ffc:	ea81 0103 	eor.w	r1, r1, r3
   b9000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9004:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9008:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b900c:	f04f 0000 	mov.w	r0, #0
   b9010:	bd70      	pop	{r4, r5, r6, pc}
   b9012:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9016:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b901a:	bd70      	pop	{r4, r5, r6, pc}

000b901c <__aeabi_ddiv>:
   b901c:	b570      	push	{r4, r5, r6, lr}
   b901e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9022:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9026:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b902a:	bf1d      	ittte	ne
   b902c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9030:	ea94 0f0c 	teqne	r4, ip
   b9034:	ea95 0f0c 	teqne	r5, ip
   b9038:	f000 f8a7 	bleq	b918a <__aeabi_ddiv+0x16e>
   b903c:	eba4 0405 	sub.w	r4, r4, r5
   b9040:	ea81 0e03 	eor.w	lr, r1, r3
   b9044:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9048:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b904c:	f000 8088 	beq.w	b9160 <__aeabi_ddiv+0x144>
   b9050:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9054:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9058:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b905c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9060:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9064:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9068:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b906c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9070:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9074:	429d      	cmp	r5, r3
   b9076:	bf08      	it	eq
   b9078:	4296      	cmpeq	r6, r2
   b907a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b907e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9082:	d202      	bcs.n	b908a <__aeabi_ddiv+0x6e>
   b9084:	085b      	lsrs	r3, r3, #1
   b9086:	ea4f 0232 	mov.w	r2, r2, rrx
   b908a:	1ab6      	subs	r6, r6, r2
   b908c:	eb65 0503 	sbc.w	r5, r5, r3
   b9090:	085b      	lsrs	r3, r3, #1
   b9092:	ea4f 0232 	mov.w	r2, r2, rrx
   b9096:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b909a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b909e:	ebb6 0e02 	subs.w	lr, r6, r2
   b90a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b90a6:	bf22      	ittt	cs
   b90a8:	1ab6      	subcs	r6, r6, r2
   b90aa:	4675      	movcs	r5, lr
   b90ac:	ea40 000c 	orrcs.w	r0, r0, ip
   b90b0:	085b      	lsrs	r3, r3, #1
   b90b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b90b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b90ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b90be:	bf22      	ittt	cs
   b90c0:	1ab6      	subcs	r6, r6, r2
   b90c2:	4675      	movcs	r5, lr
   b90c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b90c8:	085b      	lsrs	r3, r3, #1
   b90ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b90ce:	ebb6 0e02 	subs.w	lr, r6, r2
   b90d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b90d6:	bf22      	ittt	cs
   b90d8:	1ab6      	subcs	r6, r6, r2
   b90da:	4675      	movcs	r5, lr
   b90dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b90e0:	085b      	lsrs	r3, r3, #1
   b90e2:	ea4f 0232 	mov.w	r2, r2, rrx
   b90e6:	ebb6 0e02 	subs.w	lr, r6, r2
   b90ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b90ee:	bf22      	ittt	cs
   b90f0:	1ab6      	subcs	r6, r6, r2
   b90f2:	4675      	movcs	r5, lr
   b90f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b90f8:	ea55 0e06 	orrs.w	lr, r5, r6
   b90fc:	d018      	beq.n	b9130 <__aeabi_ddiv+0x114>
   b90fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9102:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9106:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b910a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b910e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9112:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9116:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b911a:	d1c0      	bne.n	b909e <__aeabi_ddiv+0x82>
   b911c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9120:	d10b      	bne.n	b913a <__aeabi_ddiv+0x11e>
   b9122:	ea41 0100 	orr.w	r1, r1, r0
   b9126:	f04f 0000 	mov.w	r0, #0
   b912a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b912e:	e7b6      	b.n	b909e <__aeabi_ddiv+0x82>
   b9130:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9134:	bf04      	itt	eq
   b9136:	4301      	orreq	r1, r0
   b9138:	2000      	moveq	r0, #0
   b913a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b913e:	bf88      	it	hi
   b9140:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9144:	f63f aeaf 	bhi.w	b8ea6 <__aeabi_dmul+0xde>
   b9148:	ebb5 0c03 	subs.w	ip, r5, r3
   b914c:	bf04      	itt	eq
   b914e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9152:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9156:	f150 0000 	adcs.w	r0, r0, #0
   b915a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b915e:	bd70      	pop	{r4, r5, r6, pc}
   b9160:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9164:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9168:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b916c:	bfc2      	ittt	gt
   b916e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9172:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9176:	bd70      	popgt	{r4, r5, r6, pc}
   b9178:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b917c:	f04f 0e00 	mov.w	lr, #0
   b9180:	3c01      	subs	r4, #1
   b9182:	e690      	b.n	b8ea6 <__aeabi_dmul+0xde>
   b9184:	ea45 0e06 	orr.w	lr, r5, r6
   b9188:	e68d      	b.n	b8ea6 <__aeabi_dmul+0xde>
   b918a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b918e:	ea94 0f0c 	teq	r4, ip
   b9192:	bf08      	it	eq
   b9194:	ea95 0f0c 	teqeq	r5, ip
   b9198:	f43f af3b 	beq.w	b9012 <__aeabi_dmul+0x24a>
   b919c:	ea94 0f0c 	teq	r4, ip
   b91a0:	d10a      	bne.n	b91b8 <__aeabi_ddiv+0x19c>
   b91a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b91a6:	f47f af34 	bne.w	b9012 <__aeabi_dmul+0x24a>
   b91aa:	ea95 0f0c 	teq	r5, ip
   b91ae:	f47f af25 	bne.w	b8ffc <__aeabi_dmul+0x234>
   b91b2:	4610      	mov	r0, r2
   b91b4:	4619      	mov	r1, r3
   b91b6:	e72c      	b.n	b9012 <__aeabi_dmul+0x24a>
   b91b8:	ea95 0f0c 	teq	r5, ip
   b91bc:	d106      	bne.n	b91cc <__aeabi_ddiv+0x1b0>
   b91be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b91c2:	f43f aefd 	beq.w	b8fc0 <__aeabi_dmul+0x1f8>
   b91c6:	4610      	mov	r0, r2
   b91c8:	4619      	mov	r1, r3
   b91ca:	e722      	b.n	b9012 <__aeabi_dmul+0x24a>
   b91cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b91d0:	bf18      	it	ne
   b91d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b91d6:	f47f aec5 	bne.w	b8f64 <__aeabi_dmul+0x19c>
   b91da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b91de:	f47f af0d 	bne.w	b8ffc <__aeabi_dmul+0x234>
   b91e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b91e6:	f47f aeeb 	bne.w	b8fc0 <__aeabi_dmul+0x1f8>
   b91ea:	e712      	b.n	b9012 <__aeabi_dmul+0x24a>

000b91ec <__gedf2>:
   b91ec:	f04f 3cff 	mov.w	ip, #4294967295
   b91f0:	e006      	b.n	b9200 <__cmpdf2+0x4>
   b91f2:	bf00      	nop

000b91f4 <__ledf2>:
   b91f4:	f04f 0c01 	mov.w	ip, #1
   b91f8:	e002      	b.n	b9200 <__cmpdf2+0x4>
   b91fa:	bf00      	nop

000b91fc <__cmpdf2>:
   b91fc:	f04f 0c01 	mov.w	ip, #1
   b9200:	f84d cd04 	str.w	ip, [sp, #-4]!
   b9204:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b920c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9210:	bf18      	it	ne
   b9212:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b9216:	d01b      	beq.n	b9250 <__cmpdf2+0x54>
   b9218:	b001      	add	sp, #4
   b921a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b921e:	bf0c      	ite	eq
   b9220:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b9224:	ea91 0f03 	teqne	r1, r3
   b9228:	bf02      	ittt	eq
   b922a:	ea90 0f02 	teqeq	r0, r2
   b922e:	2000      	moveq	r0, #0
   b9230:	4770      	bxeq	lr
   b9232:	f110 0f00 	cmn.w	r0, #0
   b9236:	ea91 0f03 	teq	r1, r3
   b923a:	bf58      	it	pl
   b923c:	4299      	cmppl	r1, r3
   b923e:	bf08      	it	eq
   b9240:	4290      	cmpeq	r0, r2
   b9242:	bf2c      	ite	cs
   b9244:	17d8      	asrcs	r0, r3, #31
   b9246:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b924a:	f040 0001 	orr.w	r0, r0, #1
   b924e:	4770      	bx	lr
   b9250:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9258:	d102      	bne.n	b9260 <__cmpdf2+0x64>
   b925a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b925e:	d107      	bne.n	b9270 <__cmpdf2+0x74>
   b9260:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9264:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9268:	d1d6      	bne.n	b9218 <__cmpdf2+0x1c>
   b926a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b926e:	d0d3      	beq.n	b9218 <__cmpdf2+0x1c>
   b9270:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9274:	4770      	bx	lr
   b9276:	bf00      	nop

000b9278 <__aeabi_cdrcmple>:
   b9278:	4684      	mov	ip, r0
   b927a:	4610      	mov	r0, r2
   b927c:	4662      	mov	r2, ip
   b927e:	468c      	mov	ip, r1
   b9280:	4619      	mov	r1, r3
   b9282:	4663      	mov	r3, ip
   b9284:	e000      	b.n	b9288 <__aeabi_cdcmpeq>
   b9286:	bf00      	nop

000b9288 <__aeabi_cdcmpeq>:
   b9288:	b501      	push	{r0, lr}
   b928a:	f7ff ffb7 	bl	b91fc <__cmpdf2>
   b928e:	2800      	cmp	r0, #0
   b9290:	bf48      	it	mi
   b9292:	f110 0f00 	cmnmi.w	r0, #0
   b9296:	bd01      	pop	{r0, pc}

000b9298 <__aeabi_dcmpeq>:
   b9298:	f84d ed08 	str.w	lr, [sp, #-8]!
   b929c:	f7ff fff4 	bl	b9288 <__aeabi_cdcmpeq>
   b92a0:	bf0c      	ite	eq
   b92a2:	2001      	moveq	r0, #1
   b92a4:	2000      	movne	r0, #0
   b92a6:	f85d fb08 	ldr.w	pc, [sp], #8
   b92aa:	bf00      	nop

000b92ac <__aeabi_dcmplt>:
   b92ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   b92b0:	f7ff ffea 	bl	b9288 <__aeabi_cdcmpeq>
   b92b4:	bf34      	ite	cc
   b92b6:	2001      	movcc	r0, #1
   b92b8:	2000      	movcs	r0, #0
   b92ba:	f85d fb08 	ldr.w	pc, [sp], #8
   b92be:	bf00      	nop

000b92c0 <__aeabi_dcmple>:
   b92c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b92c4:	f7ff ffe0 	bl	b9288 <__aeabi_cdcmpeq>
   b92c8:	bf94      	ite	ls
   b92ca:	2001      	movls	r0, #1
   b92cc:	2000      	movhi	r0, #0
   b92ce:	f85d fb08 	ldr.w	pc, [sp], #8
   b92d2:	bf00      	nop

000b92d4 <__aeabi_dcmpge>:
   b92d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b92d8:	f7ff ffce 	bl	b9278 <__aeabi_cdrcmple>
   b92dc:	bf94      	ite	ls
   b92de:	2001      	movls	r0, #1
   b92e0:	2000      	movhi	r0, #0
   b92e2:	f85d fb08 	ldr.w	pc, [sp], #8
   b92e6:	bf00      	nop

000b92e8 <__aeabi_dcmpgt>:
   b92e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b92ec:	f7ff ffc4 	bl	b9278 <__aeabi_cdrcmple>
   b92f0:	bf34      	ite	cc
   b92f2:	2001      	movcc	r0, #1
   b92f4:	2000      	movcs	r0, #0
   b92f6:	f85d fb08 	ldr.w	pc, [sp], #8
   b92fa:	bf00      	nop

000b92fc <__aeabi_d2uiz>:
   b92fc:	004a      	lsls	r2, r1, #1
   b92fe:	d211      	bcs.n	b9324 <__aeabi_d2uiz+0x28>
   b9300:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b9304:	d211      	bcs.n	b932a <__aeabi_d2uiz+0x2e>
   b9306:	d50d      	bpl.n	b9324 <__aeabi_d2uiz+0x28>
   b9308:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b930c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9310:	d40e      	bmi.n	b9330 <__aeabi_d2uiz+0x34>
   b9312:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b931a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b931e:	fa23 f002 	lsr.w	r0, r3, r2
   b9322:	4770      	bx	lr
   b9324:	f04f 0000 	mov.w	r0, #0
   b9328:	4770      	bx	lr
   b932a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b932e:	d102      	bne.n	b9336 <__aeabi_d2uiz+0x3a>
   b9330:	f04f 30ff 	mov.w	r0, #4294967295
   b9334:	4770      	bx	lr
   b9336:	f04f 0000 	mov.w	r0, #0
   b933a:	4770      	bx	lr

000b933c <__aeabi_f2lz>:
   b933c:	ee07 0a90 	vmov	s15, r0
   b9340:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b9344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9348:	d401      	bmi.n	b934e <__aeabi_f2lz+0x12>
   b934a:	f000 b80b 	b.w	b9364 <__aeabi_f2ulz>
   b934e:	eef1 7a67 	vneg.f32	s15, s15
   b9352:	b508      	push	{r3, lr}
   b9354:	ee17 0a90 	vmov	r0, s15
   b9358:	f000 f804 	bl	b9364 <__aeabi_f2ulz>
   b935c:	4240      	negs	r0, r0
   b935e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9362:	bd08      	pop	{r3, pc}

000b9364 <__aeabi_f2ulz>:
   b9364:	b5d0      	push	{r4, r6, r7, lr}
   b9366:	f7ff fcd7 	bl	b8d18 <__aeabi_f2d>
   b936a:	4b0c      	ldr	r3, [pc, #48]	; (b939c <__aeabi_f2ulz+0x38>)
   b936c:	2200      	movs	r2, #0
   b936e:	4606      	mov	r6, r0
   b9370:	460f      	mov	r7, r1
   b9372:	f7ff fd29 	bl	b8dc8 <__aeabi_dmul>
   b9376:	f7ff ffc1 	bl	b92fc <__aeabi_d2uiz>
   b937a:	4604      	mov	r4, r0
   b937c:	f7ff fcaa 	bl	b8cd4 <__aeabi_ui2d>
   b9380:	4b07      	ldr	r3, [pc, #28]	; (b93a0 <__aeabi_f2ulz+0x3c>)
   b9382:	2200      	movs	r2, #0
   b9384:	f7ff fd20 	bl	b8dc8 <__aeabi_dmul>
   b9388:	4602      	mov	r2, r0
   b938a:	460b      	mov	r3, r1
   b938c:	4630      	mov	r0, r6
   b938e:	4639      	mov	r1, r7
   b9390:	f7ff fb62 	bl	b8a58 <__aeabi_dsub>
   b9394:	f7ff ffb2 	bl	b92fc <__aeabi_d2uiz>
   b9398:	4621      	mov	r1, r4
   b939a:	bdd0      	pop	{r4, r6, r7, pc}
   b939c:	3df00000 	.word	0x3df00000
   b93a0:	41f00000 	.word	0x41f00000

000b93a4 <__aeabi_d2ulz>:
   b93a4:	b5d0      	push	{r4, r6, r7, lr}
   b93a6:	4b0c      	ldr	r3, [pc, #48]	; (b93d8 <__aeabi_d2ulz+0x34>)
   b93a8:	2200      	movs	r2, #0
   b93aa:	4606      	mov	r6, r0
   b93ac:	460f      	mov	r7, r1
   b93ae:	f7ff fd0b 	bl	b8dc8 <__aeabi_dmul>
   b93b2:	f7ff ffa3 	bl	b92fc <__aeabi_d2uiz>
   b93b6:	4604      	mov	r4, r0
   b93b8:	f7ff fc8c 	bl	b8cd4 <__aeabi_ui2d>
   b93bc:	4b07      	ldr	r3, [pc, #28]	; (b93dc <__aeabi_d2ulz+0x38>)
   b93be:	2200      	movs	r2, #0
   b93c0:	f7ff fd02 	bl	b8dc8 <__aeabi_dmul>
   b93c4:	4602      	mov	r2, r0
   b93c6:	460b      	mov	r3, r1
   b93c8:	4630      	mov	r0, r6
   b93ca:	4639      	mov	r1, r7
   b93cc:	f7ff fb44 	bl	b8a58 <__aeabi_dsub>
   b93d0:	f7ff ff94 	bl	b92fc <__aeabi_d2uiz>
   b93d4:	4621      	mov	r1, r4
   b93d6:	bdd0      	pop	{r4, r6, r7, pc}
   b93d8:	3df00000 	.word	0x3df00000
   b93dc:	41f00000 	.word	0x41f00000

000b93e0 <atexit>:
   b93e0:	2300      	movs	r3, #0
   b93e2:	4601      	mov	r1, r0
   b93e4:	461a      	mov	r2, r3
   b93e6:	4618      	mov	r0, r3
   b93e8:	f000 bff4 	b.w	ba3d4 <__register_exitproc>

000b93ec <atof>:
   b93ec:	2100      	movs	r1, #0
   b93ee:	f000 befd 	b.w	ba1ec <strtod>

000b93f2 <atoi>:
   b93f2:	220a      	movs	r2, #10
   b93f4:	2100      	movs	r1, #0
   b93f6:	f000 bfe3 	b.w	ba3c0 <strtol>

000b93fa <memcmp>:
   b93fa:	b510      	push	{r4, lr}
   b93fc:	3901      	subs	r1, #1
   b93fe:	4402      	add	r2, r0
   b9400:	4290      	cmp	r0, r2
   b9402:	d101      	bne.n	b9408 <memcmp+0xe>
   b9404:	2000      	movs	r0, #0
   b9406:	e005      	b.n	b9414 <memcmp+0x1a>
   b9408:	7803      	ldrb	r3, [r0, #0]
   b940a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b940e:	42a3      	cmp	r3, r4
   b9410:	d001      	beq.n	b9416 <memcmp+0x1c>
   b9412:	1b18      	subs	r0, r3, r4
   b9414:	bd10      	pop	{r4, pc}
   b9416:	3001      	adds	r0, #1
   b9418:	e7f2      	b.n	b9400 <memcmp+0x6>

000b941a <memcpy>:
   b941a:	440a      	add	r2, r1
   b941c:	4291      	cmp	r1, r2
   b941e:	f100 33ff 	add.w	r3, r0, #4294967295
   b9422:	d100      	bne.n	b9426 <memcpy+0xc>
   b9424:	4770      	bx	lr
   b9426:	b510      	push	{r4, lr}
   b9428:	f811 4b01 	ldrb.w	r4, [r1], #1
   b942c:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9430:	4291      	cmp	r1, r2
   b9432:	d1f9      	bne.n	b9428 <memcpy+0xe>
   b9434:	bd10      	pop	{r4, pc}

000b9436 <memmove>:
   b9436:	4288      	cmp	r0, r1
   b9438:	b510      	push	{r4, lr}
   b943a:	eb01 0402 	add.w	r4, r1, r2
   b943e:	d902      	bls.n	b9446 <memmove+0x10>
   b9440:	4284      	cmp	r4, r0
   b9442:	4623      	mov	r3, r4
   b9444:	d807      	bhi.n	b9456 <memmove+0x20>
   b9446:	1e43      	subs	r3, r0, #1
   b9448:	42a1      	cmp	r1, r4
   b944a:	d008      	beq.n	b945e <memmove+0x28>
   b944c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9450:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9454:	e7f8      	b.n	b9448 <memmove+0x12>
   b9456:	4402      	add	r2, r0
   b9458:	4601      	mov	r1, r0
   b945a:	428a      	cmp	r2, r1
   b945c:	d100      	bne.n	b9460 <memmove+0x2a>
   b945e:	bd10      	pop	{r4, pc}
   b9460:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9464:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9468:	e7f7      	b.n	b945a <memmove+0x24>

000b946a <memset>:
   b946a:	4402      	add	r2, r0
   b946c:	4603      	mov	r3, r0
   b946e:	4293      	cmp	r3, r2
   b9470:	d100      	bne.n	b9474 <memset+0xa>
   b9472:	4770      	bx	lr
   b9474:	f803 1b01 	strb.w	r1, [r3], #1
   b9478:	e7f9      	b.n	b946e <memset+0x4>
	...

000b947c <srand>:
   b947c:	b538      	push	{r3, r4, r5, lr}
   b947e:	4b10      	ldr	r3, [pc, #64]	; (b94c0 <srand+0x44>)
   b9480:	681d      	ldr	r5, [r3, #0]
   b9482:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9484:	4604      	mov	r4, r0
   b9486:	b9b3      	cbnz	r3, b94b6 <srand+0x3a>
   b9488:	2018      	movs	r0, #24
   b948a:	f7fc fa6f 	bl	b596c <malloc>
   b948e:	4602      	mov	r2, r0
   b9490:	63a8      	str	r0, [r5, #56]	; 0x38
   b9492:	b920      	cbnz	r0, b949e <srand+0x22>
   b9494:	4b0b      	ldr	r3, [pc, #44]	; (b94c4 <srand+0x48>)
   b9496:	480c      	ldr	r0, [pc, #48]	; (b94c8 <srand+0x4c>)
   b9498:	2142      	movs	r1, #66	; 0x42
   b949a:	f7fc faaf 	bl	b59fc <__assert_func>
   b949e:	490b      	ldr	r1, [pc, #44]	; (b94cc <srand+0x50>)
   b94a0:	4b0b      	ldr	r3, [pc, #44]	; (b94d0 <srand+0x54>)
   b94a2:	e9c0 1300 	strd	r1, r3, [r0]
   b94a6:	4b0b      	ldr	r3, [pc, #44]	; (b94d4 <srand+0x58>)
   b94a8:	6083      	str	r3, [r0, #8]
   b94aa:	230b      	movs	r3, #11
   b94ac:	8183      	strh	r3, [r0, #12]
   b94ae:	2100      	movs	r1, #0
   b94b0:	2001      	movs	r0, #1
   b94b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b94b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b94b8:	2200      	movs	r2, #0
   b94ba:	611c      	str	r4, [r3, #16]
   b94bc:	615a      	str	r2, [r3, #20]
   b94be:	bd38      	pop	{r3, r4, r5, pc}
   b94c0:	2003d924 	.word	0x2003d924
   b94c4:	000bc011 	.word	0x000bc011
   b94c8:	000bc028 	.word	0x000bc028
   b94cc:	abcd330e 	.word	0xabcd330e
   b94d0:	e66d1234 	.word	0xe66d1234
   b94d4:	0005deec 	.word	0x0005deec

000b94d8 <strcat>:
   b94d8:	b510      	push	{r4, lr}
   b94da:	4602      	mov	r2, r0
   b94dc:	7814      	ldrb	r4, [r2, #0]
   b94de:	4613      	mov	r3, r2
   b94e0:	3201      	adds	r2, #1
   b94e2:	2c00      	cmp	r4, #0
   b94e4:	d1fa      	bne.n	b94dc <strcat+0x4>
   b94e6:	3b01      	subs	r3, #1
   b94e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b94ec:	f803 2f01 	strb.w	r2, [r3, #1]!
   b94f0:	2a00      	cmp	r2, #0
   b94f2:	d1f9      	bne.n	b94e8 <strcat+0x10>
   b94f4:	bd10      	pop	{r4, pc}

000b94f6 <strcmp>:
   b94f6:	f810 2b01 	ldrb.w	r2, [r0], #1
   b94fa:	f811 3b01 	ldrb.w	r3, [r1], #1
   b94fe:	2a01      	cmp	r2, #1
   b9500:	bf28      	it	cs
   b9502:	429a      	cmpcs	r2, r3
   b9504:	d0f7      	beq.n	b94f6 <strcmp>
   b9506:	1ad0      	subs	r0, r2, r3
   b9508:	4770      	bx	lr

000b950a <strcpy>:
   b950a:	4603      	mov	r3, r0
   b950c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9510:	f803 2b01 	strb.w	r2, [r3], #1
   b9514:	2a00      	cmp	r2, #0
   b9516:	d1f9      	bne.n	b950c <strcpy+0x2>
   b9518:	4770      	bx	lr
	...

000b951c <strdup>:
   b951c:	4b02      	ldr	r3, [pc, #8]	; (b9528 <strdup+0xc>)
   b951e:	4601      	mov	r1, r0
   b9520:	6818      	ldr	r0, [r3, #0]
   b9522:	f000 b803 	b.w	b952c <_strdup_r>
   b9526:	bf00      	nop
   b9528:	2003d924 	.word	0x2003d924

000b952c <_strdup_r>:
   b952c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b952e:	4604      	mov	r4, r0
   b9530:	4608      	mov	r0, r1
   b9532:	460d      	mov	r5, r1
   b9534:	f000 f80f 	bl	b9556 <strlen>
   b9538:	1c42      	adds	r2, r0, #1
   b953a:	4611      	mov	r1, r2
   b953c:	4620      	mov	r0, r4
   b953e:	9201      	str	r2, [sp, #4]
   b9540:	f7fc fa4c 	bl	b59dc <_malloc_r>
   b9544:	4604      	mov	r4, r0
   b9546:	b118      	cbz	r0, b9550 <_strdup_r+0x24>
   b9548:	9a01      	ldr	r2, [sp, #4]
   b954a:	4629      	mov	r1, r5
   b954c:	f7ff ff65 	bl	b941a <memcpy>
   b9550:	4620      	mov	r0, r4
   b9552:	b003      	add	sp, #12
   b9554:	bd30      	pop	{r4, r5, pc}

000b9556 <strlen>:
   b9556:	4603      	mov	r3, r0
   b9558:	f813 2b01 	ldrb.w	r2, [r3], #1
   b955c:	2a00      	cmp	r2, #0
   b955e:	d1fb      	bne.n	b9558 <strlen+0x2>
   b9560:	1a18      	subs	r0, r3, r0
   b9562:	3801      	subs	r0, #1
   b9564:	4770      	bx	lr

000b9566 <strncmp>:
   b9566:	b510      	push	{r4, lr}
   b9568:	b17a      	cbz	r2, b958a <strncmp+0x24>
   b956a:	4603      	mov	r3, r0
   b956c:	3901      	subs	r1, #1
   b956e:	1884      	adds	r4, r0, r2
   b9570:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9574:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9578:	4290      	cmp	r0, r2
   b957a:	d101      	bne.n	b9580 <strncmp+0x1a>
   b957c:	42a3      	cmp	r3, r4
   b957e:	d101      	bne.n	b9584 <strncmp+0x1e>
   b9580:	1a80      	subs	r0, r0, r2
   b9582:	bd10      	pop	{r4, pc}
   b9584:	2800      	cmp	r0, #0
   b9586:	d1f3      	bne.n	b9570 <strncmp+0xa>
   b9588:	e7fa      	b.n	b9580 <strncmp+0x1a>
   b958a:	4610      	mov	r0, r2
   b958c:	e7f9      	b.n	b9582 <strncmp+0x1c>

000b958e <strnlen>:
   b958e:	b510      	push	{r4, lr}
   b9590:	4602      	mov	r2, r0
   b9592:	4401      	add	r1, r0
   b9594:	428a      	cmp	r2, r1
   b9596:	4613      	mov	r3, r2
   b9598:	d003      	beq.n	b95a2 <strnlen+0x14>
   b959a:	781c      	ldrb	r4, [r3, #0]
   b959c:	3201      	adds	r2, #1
   b959e:	2c00      	cmp	r4, #0
   b95a0:	d1f8      	bne.n	b9594 <strnlen+0x6>
   b95a2:	1a18      	subs	r0, r3, r0
   b95a4:	bd10      	pop	{r4, pc}

000b95a6 <sulp>:
   b95a6:	b570      	push	{r4, r5, r6, lr}
   b95a8:	4604      	mov	r4, r0
   b95aa:	460d      	mov	r5, r1
   b95ac:	ec45 4b10 	vmov	d0, r4, r5
   b95b0:	4616      	mov	r6, r2
   b95b2:	f001 fe69 	bl	bb288 <__ulp>
   b95b6:	ec51 0b10 	vmov	r0, r1, d0
   b95ba:	b17e      	cbz	r6, b95dc <sulp+0x36>
   b95bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b95c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b95c4:	2b00      	cmp	r3, #0
   b95c6:	dd09      	ble.n	b95dc <sulp+0x36>
   b95c8:	051b      	lsls	r3, r3, #20
   b95ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b95ce:	2400      	movs	r4, #0
   b95d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b95d4:	4622      	mov	r2, r4
   b95d6:	462b      	mov	r3, r5
   b95d8:	f7ff fbf6 	bl	b8dc8 <__aeabi_dmul>
   b95dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b95e0 <_strtod_l>:
   b95e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95e4:	ed2d 8b02 	vpush	{d8}
   b95e8:	b09d      	sub	sp, #116	; 0x74
   b95ea:	461f      	mov	r7, r3
   b95ec:	2300      	movs	r3, #0
   b95ee:	9318      	str	r3, [sp, #96]	; 0x60
   b95f0:	4ba2      	ldr	r3, [pc, #648]	; (b987c <_strtod_l+0x29c>)
   b95f2:	9213      	str	r2, [sp, #76]	; 0x4c
   b95f4:	681b      	ldr	r3, [r3, #0]
   b95f6:	9305      	str	r3, [sp, #20]
   b95f8:	4604      	mov	r4, r0
   b95fa:	4618      	mov	r0, r3
   b95fc:	4688      	mov	r8, r1
   b95fe:	f7ff ffaa 	bl	b9556 <strlen>
   b9602:	f04f 0a00 	mov.w	sl, #0
   b9606:	4605      	mov	r5, r0
   b9608:	f04f 0b00 	mov.w	fp, #0
   b960c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9612:	781a      	ldrb	r2, [r3, #0]
   b9614:	2a2b      	cmp	r2, #43	; 0x2b
   b9616:	d04e      	beq.n	b96b6 <_strtod_l+0xd6>
   b9618:	d83b      	bhi.n	b9692 <_strtod_l+0xb2>
   b961a:	2a0d      	cmp	r2, #13
   b961c:	d834      	bhi.n	b9688 <_strtod_l+0xa8>
   b961e:	2a08      	cmp	r2, #8
   b9620:	d834      	bhi.n	b968c <_strtod_l+0xac>
   b9622:	2a00      	cmp	r2, #0
   b9624:	d03e      	beq.n	b96a4 <_strtod_l+0xc4>
   b9626:	2300      	movs	r3, #0
   b9628:	930a      	str	r3, [sp, #40]	; 0x28
   b962a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b962c:	7833      	ldrb	r3, [r6, #0]
   b962e:	2b30      	cmp	r3, #48	; 0x30
   b9630:	f040 80b0 	bne.w	b9794 <_strtod_l+0x1b4>
   b9634:	7873      	ldrb	r3, [r6, #1]
   b9636:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b963a:	2b58      	cmp	r3, #88	; 0x58
   b963c:	d168      	bne.n	b9710 <_strtod_l+0x130>
   b963e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9640:	9301      	str	r3, [sp, #4]
   b9642:	ab18      	add	r3, sp, #96	; 0x60
   b9644:	9702      	str	r7, [sp, #8]
   b9646:	9300      	str	r3, [sp, #0]
   b9648:	4a8d      	ldr	r2, [pc, #564]	; (b9880 <_strtod_l+0x2a0>)
   b964a:	ab19      	add	r3, sp, #100	; 0x64
   b964c:	a917      	add	r1, sp, #92	; 0x5c
   b964e:	4620      	mov	r0, r4
   b9650:	f000 ff8a 	bl	ba568 <__gethex>
   b9654:	f010 0707 	ands.w	r7, r0, #7
   b9658:	4605      	mov	r5, r0
   b965a:	d005      	beq.n	b9668 <_strtod_l+0x88>
   b965c:	2f06      	cmp	r7, #6
   b965e:	d12c      	bne.n	b96ba <_strtod_l+0xda>
   b9660:	3601      	adds	r6, #1
   b9662:	2300      	movs	r3, #0
   b9664:	9617      	str	r6, [sp, #92]	; 0x5c
   b9666:	930a      	str	r3, [sp, #40]	; 0x28
   b9668:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b966a:	2b00      	cmp	r3, #0
   b966c:	f040 8590 	bne.w	ba190 <_strtod_l+0xbb0>
   b9670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9672:	b1eb      	cbz	r3, b96b0 <_strtod_l+0xd0>
   b9674:	4652      	mov	r2, sl
   b9676:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b967a:	ec43 2b10 	vmov	d0, r2, r3
   b967e:	b01d      	add	sp, #116	; 0x74
   b9680:	ecbd 8b02 	vpop	{d8}
   b9684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9688:	2a20      	cmp	r2, #32
   b968a:	d1cc      	bne.n	b9626 <_strtod_l+0x46>
   b968c:	3301      	adds	r3, #1
   b968e:	9317      	str	r3, [sp, #92]	; 0x5c
   b9690:	e7be      	b.n	b9610 <_strtod_l+0x30>
   b9692:	2a2d      	cmp	r2, #45	; 0x2d
   b9694:	d1c7      	bne.n	b9626 <_strtod_l+0x46>
   b9696:	2201      	movs	r2, #1
   b9698:	920a      	str	r2, [sp, #40]	; 0x28
   b969a:	1c5a      	adds	r2, r3, #1
   b969c:	9217      	str	r2, [sp, #92]	; 0x5c
   b969e:	785b      	ldrb	r3, [r3, #1]
   b96a0:	2b00      	cmp	r3, #0
   b96a2:	d1c2      	bne.n	b962a <_strtod_l+0x4a>
   b96a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b96a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b96aa:	2b00      	cmp	r3, #0
   b96ac:	f040 856e 	bne.w	ba18c <_strtod_l+0xbac>
   b96b0:	4652      	mov	r2, sl
   b96b2:	465b      	mov	r3, fp
   b96b4:	e7e1      	b.n	b967a <_strtod_l+0x9a>
   b96b6:	2200      	movs	r2, #0
   b96b8:	e7ee      	b.n	b9698 <_strtod_l+0xb8>
   b96ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b96bc:	b13a      	cbz	r2, b96ce <_strtod_l+0xee>
   b96be:	2135      	movs	r1, #53	; 0x35
   b96c0:	a81a      	add	r0, sp, #104	; 0x68
   b96c2:	f001 feec 	bl	bb49e <__copybits>
   b96c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b96c8:	4620      	mov	r0, r4
   b96ca:	f001 faab 	bl	bac24 <_Bfree>
   b96ce:	3f01      	subs	r7, #1
   b96d0:	2f04      	cmp	r7, #4
   b96d2:	d806      	bhi.n	b96e2 <_strtod_l+0x102>
   b96d4:	e8df f007 	tbb	[pc, r7]
   b96d8:	1714030a 	.word	0x1714030a
   b96dc:	0a          	.byte	0x0a
   b96dd:	00          	.byte	0x00
   b96de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b96e2:	0728      	lsls	r0, r5, #28
   b96e4:	d5c0      	bpl.n	b9668 <_strtod_l+0x88>
   b96e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b96ea:	e7bd      	b.n	b9668 <_strtod_l+0x88>
   b96ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b96f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b96f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b96f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b96fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b96fe:	e7f0      	b.n	b96e2 <_strtod_l+0x102>
   b9700:	f8df b180 	ldr.w	fp, [pc, #384]	; b9884 <_strtod_l+0x2a4>
   b9704:	e7ed      	b.n	b96e2 <_strtod_l+0x102>
   b9706:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b970a:	f04f 3aff 	mov.w	sl, #4294967295
   b970e:	e7e8      	b.n	b96e2 <_strtod_l+0x102>
   b9710:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9712:	1c5a      	adds	r2, r3, #1
   b9714:	9217      	str	r2, [sp, #92]	; 0x5c
   b9716:	785b      	ldrb	r3, [r3, #1]
   b9718:	2b30      	cmp	r3, #48	; 0x30
   b971a:	d0f9      	beq.n	b9710 <_strtod_l+0x130>
   b971c:	2b00      	cmp	r3, #0
   b971e:	d0a3      	beq.n	b9668 <_strtod_l+0x88>
   b9720:	2301      	movs	r3, #1
   b9722:	f04f 0900 	mov.w	r9, #0
   b9726:	9304      	str	r3, [sp, #16]
   b9728:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b972a:	9308      	str	r3, [sp, #32]
   b972c:	f8cd 901c 	str.w	r9, [sp, #28]
   b9730:	464f      	mov	r7, r9
   b9732:	220a      	movs	r2, #10
   b9734:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b9736:	7806      	ldrb	r6, [r0, #0]
   b9738:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b973c:	b2d9      	uxtb	r1, r3
   b973e:	2909      	cmp	r1, #9
   b9740:	d92a      	bls.n	b9798 <_strtod_l+0x1b8>
   b9742:	9905      	ldr	r1, [sp, #20]
   b9744:	462a      	mov	r2, r5
   b9746:	f7ff ff0e 	bl	b9566 <strncmp>
   b974a:	b398      	cbz	r0, b97b4 <_strtod_l+0x1d4>
   b974c:	2000      	movs	r0, #0
   b974e:	4632      	mov	r2, r6
   b9750:	463d      	mov	r5, r7
   b9752:	9005      	str	r0, [sp, #20]
   b9754:	4603      	mov	r3, r0
   b9756:	2a65      	cmp	r2, #101	; 0x65
   b9758:	d001      	beq.n	b975e <_strtod_l+0x17e>
   b975a:	2a45      	cmp	r2, #69	; 0x45
   b975c:	d118      	bne.n	b9790 <_strtod_l+0x1b0>
   b975e:	b91d      	cbnz	r5, b9768 <_strtod_l+0x188>
   b9760:	9a04      	ldr	r2, [sp, #16]
   b9762:	4302      	orrs	r2, r0
   b9764:	d09e      	beq.n	b96a4 <_strtod_l+0xc4>
   b9766:	2500      	movs	r5, #0
   b9768:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b976c:	f108 0201 	add.w	r2, r8, #1
   b9770:	9217      	str	r2, [sp, #92]	; 0x5c
   b9772:	f898 2001 	ldrb.w	r2, [r8, #1]
   b9776:	2a2b      	cmp	r2, #43	; 0x2b
   b9778:	d075      	beq.n	b9866 <_strtod_l+0x286>
   b977a:	2a2d      	cmp	r2, #45	; 0x2d
   b977c:	d07b      	beq.n	b9876 <_strtod_l+0x296>
   b977e:	f04f 0c00 	mov.w	ip, #0
   b9782:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b9786:	2909      	cmp	r1, #9
   b9788:	f240 8082 	bls.w	b9890 <_strtod_l+0x2b0>
   b978c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9790:	2600      	movs	r6, #0
   b9792:	e09d      	b.n	b98d0 <_strtod_l+0x2f0>
   b9794:	2300      	movs	r3, #0
   b9796:	e7c4      	b.n	b9722 <_strtod_l+0x142>
   b9798:	2f08      	cmp	r7, #8
   b979a:	bfd8      	it	le
   b979c:	9907      	ldrle	r1, [sp, #28]
   b979e:	f100 0001 	add.w	r0, r0, #1
   b97a2:	bfda      	itte	le
   b97a4:	fb02 3301 	mlale	r3, r2, r1, r3
   b97a8:	9307      	strle	r3, [sp, #28]
   b97aa:	fb02 3909 	mlagt	r9, r2, r9, r3
   b97ae:	3701      	adds	r7, #1
   b97b0:	9017      	str	r0, [sp, #92]	; 0x5c
   b97b2:	e7bf      	b.n	b9734 <_strtod_l+0x154>
   b97b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b97b6:	195a      	adds	r2, r3, r5
   b97b8:	9217      	str	r2, [sp, #92]	; 0x5c
   b97ba:	5d5a      	ldrb	r2, [r3, r5]
   b97bc:	2f00      	cmp	r7, #0
   b97be:	d037      	beq.n	b9830 <_strtod_l+0x250>
   b97c0:	9005      	str	r0, [sp, #20]
   b97c2:	463d      	mov	r5, r7
   b97c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b97c8:	2b09      	cmp	r3, #9
   b97ca:	d912      	bls.n	b97f2 <_strtod_l+0x212>
   b97cc:	2301      	movs	r3, #1
   b97ce:	e7c2      	b.n	b9756 <_strtod_l+0x176>
   b97d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b97d2:	1c5a      	adds	r2, r3, #1
   b97d4:	9217      	str	r2, [sp, #92]	; 0x5c
   b97d6:	785a      	ldrb	r2, [r3, #1]
   b97d8:	3001      	adds	r0, #1
   b97da:	2a30      	cmp	r2, #48	; 0x30
   b97dc:	d0f8      	beq.n	b97d0 <_strtod_l+0x1f0>
   b97de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b97e2:	2b08      	cmp	r3, #8
   b97e4:	f200 84d9 	bhi.w	ba19a <_strtod_l+0xbba>
   b97e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b97ea:	9005      	str	r0, [sp, #20]
   b97ec:	2000      	movs	r0, #0
   b97ee:	9308      	str	r3, [sp, #32]
   b97f0:	4605      	mov	r5, r0
   b97f2:	3a30      	subs	r2, #48	; 0x30
   b97f4:	f100 0301 	add.w	r3, r0, #1
   b97f8:	d014      	beq.n	b9824 <_strtod_l+0x244>
   b97fa:	9905      	ldr	r1, [sp, #20]
   b97fc:	4419      	add	r1, r3
   b97fe:	9105      	str	r1, [sp, #20]
   b9800:	462b      	mov	r3, r5
   b9802:	eb00 0e05 	add.w	lr, r0, r5
   b9806:	210a      	movs	r1, #10
   b9808:	4573      	cmp	r3, lr
   b980a:	d113      	bne.n	b9834 <_strtod_l+0x254>
   b980c:	182b      	adds	r3, r5, r0
   b980e:	2b08      	cmp	r3, #8
   b9810:	f105 0501 	add.w	r5, r5, #1
   b9814:	4405      	add	r5, r0
   b9816:	dc1c      	bgt.n	b9852 <_strtod_l+0x272>
   b9818:	9907      	ldr	r1, [sp, #28]
   b981a:	230a      	movs	r3, #10
   b981c:	fb03 2301 	mla	r3, r3, r1, r2
   b9820:	9307      	str	r3, [sp, #28]
   b9822:	2300      	movs	r3, #0
   b9824:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9826:	1c51      	adds	r1, r2, #1
   b9828:	9117      	str	r1, [sp, #92]	; 0x5c
   b982a:	7852      	ldrb	r2, [r2, #1]
   b982c:	4618      	mov	r0, r3
   b982e:	e7c9      	b.n	b97c4 <_strtod_l+0x1e4>
   b9830:	4638      	mov	r0, r7
   b9832:	e7d2      	b.n	b97da <_strtod_l+0x1fa>
   b9834:	2b08      	cmp	r3, #8
   b9836:	dc04      	bgt.n	b9842 <_strtod_l+0x262>
   b9838:	9e07      	ldr	r6, [sp, #28]
   b983a:	434e      	muls	r6, r1
   b983c:	9607      	str	r6, [sp, #28]
   b983e:	3301      	adds	r3, #1
   b9840:	e7e2      	b.n	b9808 <_strtod_l+0x228>
   b9842:	f103 0c01 	add.w	ip, r3, #1
   b9846:	f1bc 0f10 	cmp.w	ip, #16
   b984a:	bfd8      	it	le
   b984c:	fb01 f909 	mulle.w	r9, r1, r9
   b9850:	e7f5      	b.n	b983e <_strtod_l+0x25e>
   b9852:	2d10      	cmp	r5, #16
   b9854:	bfdc      	itt	le
   b9856:	230a      	movle	r3, #10
   b9858:	fb03 2909 	mlale	r9, r3, r9, r2
   b985c:	e7e1      	b.n	b9822 <_strtod_l+0x242>
   b985e:	2300      	movs	r3, #0
   b9860:	9305      	str	r3, [sp, #20]
   b9862:	2301      	movs	r3, #1
   b9864:	e77c      	b.n	b9760 <_strtod_l+0x180>
   b9866:	f04f 0c00 	mov.w	ip, #0
   b986a:	f108 0202 	add.w	r2, r8, #2
   b986e:	9217      	str	r2, [sp, #92]	; 0x5c
   b9870:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9874:	e785      	b.n	b9782 <_strtod_l+0x1a2>
   b9876:	f04f 0c01 	mov.w	ip, #1
   b987a:	e7f6      	b.n	b986a <_strtod_l+0x28a>
   b987c:	000bc320 	.word	0x000bc320
   b9880:	000bc0b4 	.word	0x000bc0b4
   b9884:	7ff00000 	.word	0x7ff00000
   b9888:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b988a:	1c51      	adds	r1, r2, #1
   b988c:	9117      	str	r1, [sp, #92]	; 0x5c
   b988e:	7852      	ldrb	r2, [r2, #1]
   b9890:	2a30      	cmp	r2, #48	; 0x30
   b9892:	d0f9      	beq.n	b9888 <_strtod_l+0x2a8>
   b9894:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9898:	2908      	cmp	r1, #8
   b989a:	f63f af79 	bhi.w	b9790 <_strtod_l+0x1b0>
   b989e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b98a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b98a4:	9206      	str	r2, [sp, #24]
   b98a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b98a8:	1c51      	adds	r1, r2, #1
   b98aa:	9117      	str	r1, [sp, #92]	; 0x5c
   b98ac:	7852      	ldrb	r2, [r2, #1]
   b98ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b98b2:	2e09      	cmp	r6, #9
   b98b4:	d937      	bls.n	b9926 <_strtod_l+0x346>
   b98b6:	9e06      	ldr	r6, [sp, #24]
   b98b8:	1b89      	subs	r1, r1, r6
   b98ba:	2908      	cmp	r1, #8
   b98bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b98c0:	dc02      	bgt.n	b98c8 <_strtod_l+0x2e8>
   b98c2:	4576      	cmp	r6, lr
   b98c4:	bfa8      	it	ge
   b98c6:	4676      	movge	r6, lr
   b98c8:	f1bc 0f00 	cmp.w	ip, #0
   b98cc:	d000      	beq.n	b98d0 <_strtod_l+0x2f0>
   b98ce:	4276      	negs	r6, r6
   b98d0:	2d00      	cmp	r5, #0
   b98d2:	d14d      	bne.n	b9970 <_strtod_l+0x390>
   b98d4:	9904      	ldr	r1, [sp, #16]
   b98d6:	4301      	orrs	r1, r0
   b98d8:	f47f aec6 	bne.w	b9668 <_strtod_l+0x88>
   b98dc:	2b00      	cmp	r3, #0
   b98de:	f47f aee1 	bne.w	b96a4 <_strtod_l+0xc4>
   b98e2:	2a69      	cmp	r2, #105	; 0x69
   b98e4:	d027      	beq.n	b9936 <_strtod_l+0x356>
   b98e6:	dc24      	bgt.n	b9932 <_strtod_l+0x352>
   b98e8:	2a49      	cmp	r2, #73	; 0x49
   b98ea:	d024      	beq.n	b9936 <_strtod_l+0x356>
   b98ec:	2a4e      	cmp	r2, #78	; 0x4e
   b98ee:	f47f aed9 	bne.w	b96a4 <_strtod_l+0xc4>
   b98f2:	499f      	ldr	r1, [pc, #636]	; (b9b70 <_strtod_l+0x590>)
   b98f4:	a817      	add	r0, sp, #92	; 0x5c
   b98f6:	f001 f88f 	bl	baa18 <__match>
   b98fa:	2800      	cmp	r0, #0
   b98fc:	f43f aed2 	beq.w	b96a4 <_strtod_l+0xc4>
   b9900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9902:	781b      	ldrb	r3, [r3, #0]
   b9904:	2b28      	cmp	r3, #40	; 0x28
   b9906:	d12d      	bne.n	b9964 <_strtod_l+0x384>
   b9908:	499a      	ldr	r1, [pc, #616]	; (b9b74 <_strtod_l+0x594>)
   b990a:	aa1a      	add	r2, sp, #104	; 0x68
   b990c:	a817      	add	r0, sp, #92	; 0x5c
   b990e:	f001 f897 	bl	baa40 <__hexnan>
   b9912:	2805      	cmp	r0, #5
   b9914:	d126      	bne.n	b9964 <_strtod_l+0x384>
   b9916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9918:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b991c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9920:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9924:	e6a0      	b.n	b9668 <_strtod_l+0x88>
   b9926:	210a      	movs	r1, #10
   b9928:	fb01 2e0e 	mla	lr, r1, lr, r2
   b992c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9930:	e7b9      	b.n	b98a6 <_strtod_l+0x2c6>
   b9932:	2a6e      	cmp	r2, #110	; 0x6e
   b9934:	e7db      	b.n	b98ee <_strtod_l+0x30e>
   b9936:	4990      	ldr	r1, [pc, #576]	; (b9b78 <_strtod_l+0x598>)
   b9938:	a817      	add	r0, sp, #92	; 0x5c
   b993a:	f001 f86d 	bl	baa18 <__match>
   b993e:	2800      	cmp	r0, #0
   b9940:	f43f aeb0 	beq.w	b96a4 <_strtod_l+0xc4>
   b9944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9946:	498d      	ldr	r1, [pc, #564]	; (b9b7c <_strtod_l+0x59c>)
   b9948:	3b01      	subs	r3, #1
   b994a:	a817      	add	r0, sp, #92	; 0x5c
   b994c:	9317      	str	r3, [sp, #92]	; 0x5c
   b994e:	f001 f863 	bl	baa18 <__match>
   b9952:	b910      	cbnz	r0, b995a <_strtod_l+0x37a>
   b9954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9956:	3301      	adds	r3, #1
   b9958:	9317      	str	r3, [sp, #92]	; 0x5c
   b995a:	f8df b230 	ldr.w	fp, [pc, #560]	; b9b8c <_strtod_l+0x5ac>
   b995e:	f04f 0a00 	mov.w	sl, #0
   b9962:	e681      	b.n	b9668 <_strtod_l+0x88>
   b9964:	4886      	ldr	r0, [pc, #536]	; (b9b80 <_strtod_l+0x5a0>)
   b9966:	f001 fdef 	bl	bb548 <nan>
   b996a:	ec5b ab10 	vmov	sl, fp, d0
   b996e:	e67b      	b.n	b9668 <_strtod_l+0x88>
   b9970:	9b05      	ldr	r3, [sp, #20]
   b9972:	9807      	ldr	r0, [sp, #28]
   b9974:	1af3      	subs	r3, r6, r3
   b9976:	2f00      	cmp	r7, #0
   b9978:	bf08      	it	eq
   b997a:	462f      	moveq	r7, r5
   b997c:	2d10      	cmp	r5, #16
   b997e:	9306      	str	r3, [sp, #24]
   b9980:	46a8      	mov	r8, r5
   b9982:	bfa8      	it	ge
   b9984:	f04f 0810 	movge.w	r8, #16
   b9988:	f7ff f9a4 	bl	b8cd4 <__aeabi_ui2d>
   b998c:	2d09      	cmp	r5, #9
   b998e:	4682      	mov	sl, r0
   b9990:	468b      	mov	fp, r1
   b9992:	dd13      	ble.n	b99bc <_strtod_l+0x3dc>
   b9994:	4b7b      	ldr	r3, [pc, #492]	; (b9b84 <_strtod_l+0x5a4>)
   b9996:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b999a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b999e:	f7ff fa13 	bl	b8dc8 <__aeabi_dmul>
   b99a2:	4682      	mov	sl, r0
   b99a4:	4648      	mov	r0, r9
   b99a6:	468b      	mov	fp, r1
   b99a8:	f7ff f994 	bl	b8cd4 <__aeabi_ui2d>
   b99ac:	4602      	mov	r2, r0
   b99ae:	460b      	mov	r3, r1
   b99b0:	4650      	mov	r0, sl
   b99b2:	4659      	mov	r1, fp
   b99b4:	f7ff f852 	bl	b8a5c <__adddf3>
   b99b8:	4682      	mov	sl, r0
   b99ba:	468b      	mov	fp, r1
   b99bc:	2d0f      	cmp	r5, #15
   b99be:	dc38      	bgt.n	b9a32 <_strtod_l+0x452>
   b99c0:	9b06      	ldr	r3, [sp, #24]
   b99c2:	2b00      	cmp	r3, #0
   b99c4:	f43f ae50 	beq.w	b9668 <_strtod_l+0x88>
   b99c8:	dd24      	ble.n	b9a14 <_strtod_l+0x434>
   b99ca:	2b16      	cmp	r3, #22
   b99cc:	dc0b      	bgt.n	b99e6 <_strtod_l+0x406>
   b99ce:	496d      	ldr	r1, [pc, #436]	; (b9b84 <_strtod_l+0x5a4>)
   b99d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b99d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b99d8:	4652      	mov	r2, sl
   b99da:	465b      	mov	r3, fp
   b99dc:	f7ff f9f4 	bl	b8dc8 <__aeabi_dmul>
   b99e0:	4682      	mov	sl, r0
   b99e2:	468b      	mov	fp, r1
   b99e4:	e640      	b.n	b9668 <_strtod_l+0x88>
   b99e6:	9a06      	ldr	r2, [sp, #24]
   b99e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b99ec:	4293      	cmp	r3, r2
   b99ee:	db20      	blt.n	b9a32 <_strtod_l+0x452>
   b99f0:	4c64      	ldr	r4, [pc, #400]	; (b9b84 <_strtod_l+0x5a4>)
   b99f2:	f1c5 050f 	rsb	r5, r5, #15
   b99f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b99fa:	4652      	mov	r2, sl
   b99fc:	465b      	mov	r3, fp
   b99fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9a02:	f7ff f9e1 	bl	b8dc8 <__aeabi_dmul>
   b9a06:	9b06      	ldr	r3, [sp, #24]
   b9a08:	1b5d      	subs	r5, r3, r5
   b9a0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9a0e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9a12:	e7e3      	b.n	b99dc <_strtod_l+0x3fc>
   b9a14:	9b06      	ldr	r3, [sp, #24]
   b9a16:	3316      	adds	r3, #22
   b9a18:	db0b      	blt.n	b9a32 <_strtod_l+0x452>
   b9a1a:	9b05      	ldr	r3, [sp, #20]
   b9a1c:	1b9e      	subs	r6, r3, r6
   b9a1e:	4b59      	ldr	r3, [pc, #356]	; (b9b84 <_strtod_l+0x5a4>)
   b9a20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9a24:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9a28:	4650      	mov	r0, sl
   b9a2a:	4659      	mov	r1, fp
   b9a2c:	f7ff faf6 	bl	b901c <__aeabi_ddiv>
   b9a30:	e7d6      	b.n	b99e0 <_strtod_l+0x400>
   b9a32:	9b06      	ldr	r3, [sp, #24]
   b9a34:	eba5 0808 	sub.w	r8, r5, r8
   b9a38:	4498      	add	r8, r3
   b9a3a:	f1b8 0f00 	cmp.w	r8, #0
   b9a3e:	dd74      	ble.n	b9b2a <_strtod_l+0x54a>
   b9a40:	f018 030f 	ands.w	r3, r8, #15
   b9a44:	d00a      	beq.n	b9a5c <_strtod_l+0x47c>
   b9a46:	494f      	ldr	r1, [pc, #316]	; (b9b84 <_strtod_l+0x5a4>)
   b9a48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9a4c:	4652      	mov	r2, sl
   b9a4e:	465b      	mov	r3, fp
   b9a50:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9a54:	f7ff f9b8 	bl	b8dc8 <__aeabi_dmul>
   b9a58:	4682      	mov	sl, r0
   b9a5a:	468b      	mov	fp, r1
   b9a5c:	f038 080f 	bics.w	r8, r8, #15
   b9a60:	d04f      	beq.n	b9b02 <_strtod_l+0x522>
   b9a62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9a66:	dd22      	ble.n	b9aae <_strtod_l+0x4ce>
   b9a68:	2500      	movs	r5, #0
   b9a6a:	462e      	mov	r6, r5
   b9a6c:	9507      	str	r5, [sp, #28]
   b9a6e:	9505      	str	r5, [sp, #20]
   b9a70:	2322      	movs	r3, #34	; 0x22
   b9a72:	f8df b118 	ldr.w	fp, [pc, #280]	; b9b8c <_strtod_l+0x5ac>
   b9a76:	6023      	str	r3, [r4, #0]
   b9a78:	f04f 0a00 	mov.w	sl, #0
   b9a7c:	9b07      	ldr	r3, [sp, #28]
   b9a7e:	2b00      	cmp	r3, #0
   b9a80:	f43f adf2 	beq.w	b9668 <_strtod_l+0x88>
   b9a84:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9a86:	4620      	mov	r0, r4
   b9a88:	f001 f8cc 	bl	bac24 <_Bfree>
   b9a8c:	9905      	ldr	r1, [sp, #20]
   b9a8e:	4620      	mov	r0, r4
   b9a90:	f001 f8c8 	bl	bac24 <_Bfree>
   b9a94:	4631      	mov	r1, r6
   b9a96:	4620      	mov	r0, r4
   b9a98:	f001 f8c4 	bl	bac24 <_Bfree>
   b9a9c:	9907      	ldr	r1, [sp, #28]
   b9a9e:	4620      	mov	r0, r4
   b9aa0:	f001 f8c0 	bl	bac24 <_Bfree>
   b9aa4:	4629      	mov	r1, r5
   b9aa6:	4620      	mov	r0, r4
   b9aa8:	f001 f8bc 	bl	bac24 <_Bfree>
   b9aac:	e5dc      	b.n	b9668 <_strtod_l+0x88>
   b9aae:	4b36      	ldr	r3, [pc, #216]	; (b9b88 <_strtod_l+0x5a8>)
   b9ab0:	9304      	str	r3, [sp, #16]
   b9ab2:	2300      	movs	r3, #0
   b9ab4:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9ab8:	4650      	mov	r0, sl
   b9aba:	4659      	mov	r1, fp
   b9abc:	4699      	mov	r9, r3
   b9abe:	f1b8 0f01 	cmp.w	r8, #1
   b9ac2:	dc21      	bgt.n	b9b08 <_strtod_l+0x528>
   b9ac4:	b10b      	cbz	r3, b9aca <_strtod_l+0x4ea>
   b9ac6:	4682      	mov	sl, r0
   b9ac8:	468b      	mov	fp, r1
   b9aca:	4b2f      	ldr	r3, [pc, #188]	; (b9b88 <_strtod_l+0x5a8>)
   b9acc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9ad0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9ad4:	4652      	mov	r2, sl
   b9ad6:	465b      	mov	r3, fp
   b9ad8:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9adc:	f7ff f974 	bl	b8dc8 <__aeabi_dmul>
   b9ae0:	4b2a      	ldr	r3, [pc, #168]	; (b9b8c <_strtod_l+0x5ac>)
   b9ae2:	460a      	mov	r2, r1
   b9ae4:	400b      	ands	r3, r1
   b9ae6:	492a      	ldr	r1, [pc, #168]	; (b9b90 <_strtod_l+0x5b0>)
   b9ae8:	428b      	cmp	r3, r1
   b9aea:	4682      	mov	sl, r0
   b9aec:	d8bc      	bhi.n	b9a68 <_strtod_l+0x488>
   b9aee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9af2:	428b      	cmp	r3, r1
   b9af4:	bf86      	itte	hi
   b9af6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9b94 <_strtod_l+0x5b4>
   b9afa:	f04f 3aff 	movhi.w	sl, #4294967295
   b9afe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9b02:	2300      	movs	r3, #0
   b9b04:	9304      	str	r3, [sp, #16]
   b9b06:	e084      	b.n	b9c12 <_strtod_l+0x632>
   b9b08:	f018 0f01 	tst.w	r8, #1
   b9b0c:	d005      	beq.n	b9b1a <_strtod_l+0x53a>
   b9b0e:	9b04      	ldr	r3, [sp, #16]
   b9b10:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b14:	f7ff f958 	bl	b8dc8 <__aeabi_dmul>
   b9b18:	2301      	movs	r3, #1
   b9b1a:	9a04      	ldr	r2, [sp, #16]
   b9b1c:	3208      	adds	r2, #8
   b9b1e:	f109 0901 	add.w	r9, r9, #1
   b9b22:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9b26:	9204      	str	r2, [sp, #16]
   b9b28:	e7c9      	b.n	b9abe <_strtod_l+0x4de>
   b9b2a:	d0ea      	beq.n	b9b02 <_strtod_l+0x522>
   b9b2c:	f1c8 0800 	rsb	r8, r8, #0
   b9b30:	f018 020f 	ands.w	r2, r8, #15
   b9b34:	d00a      	beq.n	b9b4c <_strtod_l+0x56c>
   b9b36:	4b13      	ldr	r3, [pc, #76]	; (b9b84 <_strtod_l+0x5a4>)
   b9b38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9b3c:	4650      	mov	r0, sl
   b9b3e:	4659      	mov	r1, fp
   b9b40:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b44:	f7ff fa6a 	bl	b901c <__aeabi_ddiv>
   b9b48:	4682      	mov	sl, r0
   b9b4a:	468b      	mov	fp, r1
   b9b4c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9b50:	d0d7      	beq.n	b9b02 <_strtod_l+0x522>
   b9b52:	f1b8 0f1f 	cmp.w	r8, #31
   b9b56:	dd1f      	ble.n	b9b98 <_strtod_l+0x5b8>
   b9b58:	2500      	movs	r5, #0
   b9b5a:	462e      	mov	r6, r5
   b9b5c:	9507      	str	r5, [sp, #28]
   b9b5e:	9505      	str	r5, [sp, #20]
   b9b60:	2322      	movs	r3, #34	; 0x22
   b9b62:	f04f 0a00 	mov.w	sl, #0
   b9b66:	f04f 0b00 	mov.w	fp, #0
   b9b6a:	6023      	str	r3, [r4, #0]
   b9b6c:	e786      	b.n	b9a7c <_strtod_l+0x49c>
   b9b6e:	bf00      	nop
   b9b70:	000bc0ae 	.word	0x000bc0ae
   b9b74:	000bc0c8 	.word	0x000bc0c8
   b9b78:	000bc0a5 	.word	0x000bc0a5
   b9b7c:	000bc0a8 	.word	0x000bc0a8
   b9b80:	000bb9a9 	.word	0x000bb9a9
   b9b84:	000bc3e0 	.word	0x000bc3e0
   b9b88:	000bc3b8 	.word	0x000bc3b8
   b9b8c:	7ff00000 	.word	0x7ff00000
   b9b90:	7ca00000 	.word	0x7ca00000
   b9b94:	7fefffff 	.word	0x7fefffff
   b9b98:	f018 0310 	ands.w	r3, r8, #16
   b9b9c:	bf18      	it	ne
   b9b9e:	236a      	movne	r3, #106	; 0x6a
   b9ba0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9f50 <_strtod_l+0x970>
   b9ba4:	9304      	str	r3, [sp, #16]
   b9ba6:	4650      	mov	r0, sl
   b9ba8:	4659      	mov	r1, fp
   b9baa:	2300      	movs	r3, #0
   b9bac:	f018 0f01 	tst.w	r8, #1
   b9bb0:	d004      	beq.n	b9bbc <_strtod_l+0x5dc>
   b9bb2:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9bb6:	f7ff f907 	bl	b8dc8 <__aeabi_dmul>
   b9bba:	2301      	movs	r3, #1
   b9bbc:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9bc0:	f109 0908 	add.w	r9, r9, #8
   b9bc4:	d1f2      	bne.n	b9bac <_strtod_l+0x5cc>
   b9bc6:	b10b      	cbz	r3, b9bcc <_strtod_l+0x5ec>
   b9bc8:	4682      	mov	sl, r0
   b9bca:	468b      	mov	fp, r1
   b9bcc:	9b04      	ldr	r3, [sp, #16]
   b9bce:	b1c3      	cbz	r3, b9c02 <_strtod_l+0x622>
   b9bd0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9bd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9bd8:	2b00      	cmp	r3, #0
   b9bda:	4659      	mov	r1, fp
   b9bdc:	dd11      	ble.n	b9c02 <_strtod_l+0x622>
   b9bde:	2b1f      	cmp	r3, #31
   b9be0:	f340 8124 	ble.w	b9e2c <_strtod_l+0x84c>
   b9be4:	2b34      	cmp	r3, #52	; 0x34
   b9be6:	bfde      	ittt	le
   b9be8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9bec:	f04f 33ff 	movle.w	r3, #4294967295
   b9bf0:	fa03 f202 	lslle.w	r2, r3, r2
   b9bf4:	f04f 0a00 	mov.w	sl, #0
   b9bf8:	bfcc      	ite	gt
   b9bfa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9bfe:	ea02 0b01 	andle.w	fp, r2, r1
   b9c02:	2200      	movs	r2, #0
   b9c04:	2300      	movs	r3, #0
   b9c06:	4650      	mov	r0, sl
   b9c08:	4659      	mov	r1, fp
   b9c0a:	f7ff fb45 	bl	b9298 <__aeabi_dcmpeq>
   b9c0e:	2800      	cmp	r0, #0
   b9c10:	d1a2      	bne.n	b9b58 <_strtod_l+0x578>
   b9c12:	9b07      	ldr	r3, [sp, #28]
   b9c14:	9300      	str	r3, [sp, #0]
   b9c16:	9908      	ldr	r1, [sp, #32]
   b9c18:	462b      	mov	r3, r5
   b9c1a:	463a      	mov	r2, r7
   b9c1c:	4620      	mov	r0, r4
   b9c1e:	f001 f869 	bl	bacf4 <__s2b>
   b9c22:	9007      	str	r0, [sp, #28]
   b9c24:	2800      	cmp	r0, #0
   b9c26:	f43f af1f 	beq.w	b9a68 <_strtod_l+0x488>
   b9c2a:	9b05      	ldr	r3, [sp, #20]
   b9c2c:	1b9e      	subs	r6, r3, r6
   b9c2e:	9b06      	ldr	r3, [sp, #24]
   b9c30:	2b00      	cmp	r3, #0
   b9c32:	bfb4      	ite	lt
   b9c34:	4633      	movlt	r3, r6
   b9c36:	2300      	movge	r3, #0
   b9c38:	930c      	str	r3, [sp, #48]	; 0x30
   b9c3a:	9b06      	ldr	r3, [sp, #24]
   b9c3c:	2500      	movs	r5, #0
   b9c3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9c42:	9312      	str	r3, [sp, #72]	; 0x48
   b9c44:	462e      	mov	r6, r5
   b9c46:	9b07      	ldr	r3, [sp, #28]
   b9c48:	4620      	mov	r0, r4
   b9c4a:	6859      	ldr	r1, [r3, #4]
   b9c4c:	f000 ffaa 	bl	baba4 <_Balloc>
   b9c50:	9005      	str	r0, [sp, #20]
   b9c52:	2800      	cmp	r0, #0
   b9c54:	f43f af0c 	beq.w	b9a70 <_strtod_l+0x490>
   b9c58:	9b07      	ldr	r3, [sp, #28]
   b9c5a:	691a      	ldr	r2, [r3, #16]
   b9c5c:	3202      	adds	r2, #2
   b9c5e:	f103 010c 	add.w	r1, r3, #12
   b9c62:	0092      	lsls	r2, r2, #2
   b9c64:	300c      	adds	r0, #12
   b9c66:	f7ff fbd8 	bl	b941a <memcpy>
   b9c6a:	ec4b ab10 	vmov	d0, sl, fp
   b9c6e:	aa1a      	add	r2, sp, #104	; 0x68
   b9c70:	a919      	add	r1, sp, #100	; 0x64
   b9c72:	4620      	mov	r0, r4
   b9c74:	f001 fb84 	bl	bb380 <__d2b>
   b9c78:	ec4b ab18 	vmov	d8, sl, fp
   b9c7c:	9018      	str	r0, [sp, #96]	; 0x60
   b9c7e:	2800      	cmp	r0, #0
   b9c80:	f43f aef6 	beq.w	b9a70 <_strtod_l+0x490>
   b9c84:	2101      	movs	r1, #1
   b9c86:	4620      	mov	r0, r4
   b9c88:	f001 f8ce 	bl	bae28 <__i2b>
   b9c8c:	4606      	mov	r6, r0
   b9c8e:	2800      	cmp	r0, #0
   b9c90:	f43f aeee 	beq.w	b9a70 <_strtod_l+0x490>
   b9c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9c96:	9904      	ldr	r1, [sp, #16]
   b9c98:	2b00      	cmp	r3, #0
   b9c9a:	bfab      	itete	ge
   b9c9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9c9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9ca0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9ca2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9ca6:	bfac      	ite	ge
   b9ca8:	eb03 0902 	addge.w	r9, r3, r2
   b9cac:	1ad7      	sublt	r7, r2, r3
   b9cae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9cb0:	eba3 0801 	sub.w	r8, r3, r1
   b9cb4:	4490      	add	r8, r2
   b9cb6:	4ba1      	ldr	r3, [pc, #644]	; (b9f3c <_strtod_l+0x95c>)
   b9cb8:	f108 38ff 	add.w	r8, r8, #4294967295
   b9cbc:	4598      	cmp	r8, r3
   b9cbe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9cc2:	f280 80c7 	bge.w	b9e54 <_strtod_l+0x874>
   b9cc6:	eba3 0308 	sub.w	r3, r3, r8
   b9cca:	2b1f      	cmp	r3, #31
   b9ccc:	eba2 0203 	sub.w	r2, r2, r3
   b9cd0:	f04f 0101 	mov.w	r1, #1
   b9cd4:	f300 80b1 	bgt.w	b9e3a <_strtod_l+0x85a>
   b9cd8:	fa01 f303 	lsl.w	r3, r1, r3
   b9cdc:	930d      	str	r3, [sp, #52]	; 0x34
   b9cde:	2300      	movs	r3, #0
   b9ce0:	9308      	str	r3, [sp, #32]
   b9ce2:	eb09 0802 	add.w	r8, r9, r2
   b9ce6:	9b04      	ldr	r3, [sp, #16]
   b9ce8:	45c1      	cmp	r9, r8
   b9cea:	4417      	add	r7, r2
   b9cec:	441f      	add	r7, r3
   b9cee:	464b      	mov	r3, r9
   b9cf0:	bfa8      	it	ge
   b9cf2:	4643      	movge	r3, r8
   b9cf4:	42bb      	cmp	r3, r7
   b9cf6:	bfa8      	it	ge
   b9cf8:	463b      	movge	r3, r7
   b9cfa:	2b00      	cmp	r3, #0
   b9cfc:	bfc2      	ittt	gt
   b9cfe:	eba8 0803 	subgt.w	r8, r8, r3
   b9d02:	1aff      	subgt	r7, r7, r3
   b9d04:	eba9 0903 	subgt.w	r9, r9, r3
   b9d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9d0a:	2b00      	cmp	r3, #0
   b9d0c:	dd17      	ble.n	b9d3e <_strtod_l+0x75e>
   b9d0e:	4631      	mov	r1, r6
   b9d10:	461a      	mov	r2, r3
   b9d12:	4620      	mov	r0, r4
   b9d14:	f001 f948 	bl	bafa8 <__pow5mult>
   b9d18:	4606      	mov	r6, r0
   b9d1a:	2800      	cmp	r0, #0
   b9d1c:	f43f aea8 	beq.w	b9a70 <_strtod_l+0x490>
   b9d20:	4601      	mov	r1, r0
   b9d22:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9d24:	4620      	mov	r0, r4
   b9d26:	f001 f895 	bl	bae54 <__multiply>
   b9d2a:	900b      	str	r0, [sp, #44]	; 0x2c
   b9d2c:	2800      	cmp	r0, #0
   b9d2e:	f43f ae9f 	beq.w	b9a70 <_strtod_l+0x490>
   b9d32:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d34:	4620      	mov	r0, r4
   b9d36:	f000 ff75 	bl	bac24 <_Bfree>
   b9d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9d3c:	9318      	str	r3, [sp, #96]	; 0x60
   b9d3e:	f1b8 0f00 	cmp.w	r8, #0
   b9d42:	f300 808c 	bgt.w	b9e5e <_strtod_l+0x87e>
   b9d46:	9b06      	ldr	r3, [sp, #24]
   b9d48:	2b00      	cmp	r3, #0
   b9d4a:	dd08      	ble.n	b9d5e <_strtod_l+0x77e>
   b9d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9d4e:	9905      	ldr	r1, [sp, #20]
   b9d50:	4620      	mov	r0, r4
   b9d52:	f001 f929 	bl	bafa8 <__pow5mult>
   b9d56:	9005      	str	r0, [sp, #20]
   b9d58:	2800      	cmp	r0, #0
   b9d5a:	f43f ae89 	beq.w	b9a70 <_strtod_l+0x490>
   b9d5e:	2f00      	cmp	r7, #0
   b9d60:	dd08      	ble.n	b9d74 <_strtod_l+0x794>
   b9d62:	9905      	ldr	r1, [sp, #20]
   b9d64:	463a      	mov	r2, r7
   b9d66:	4620      	mov	r0, r4
   b9d68:	f001 f978 	bl	bb05c <__lshift>
   b9d6c:	9005      	str	r0, [sp, #20]
   b9d6e:	2800      	cmp	r0, #0
   b9d70:	f43f ae7e 	beq.w	b9a70 <_strtod_l+0x490>
   b9d74:	f1b9 0f00 	cmp.w	r9, #0
   b9d78:	dd08      	ble.n	b9d8c <_strtod_l+0x7ac>
   b9d7a:	4631      	mov	r1, r6
   b9d7c:	464a      	mov	r2, r9
   b9d7e:	4620      	mov	r0, r4
   b9d80:	f001 f96c 	bl	bb05c <__lshift>
   b9d84:	4606      	mov	r6, r0
   b9d86:	2800      	cmp	r0, #0
   b9d88:	f43f ae72 	beq.w	b9a70 <_strtod_l+0x490>
   b9d8c:	9a05      	ldr	r2, [sp, #20]
   b9d8e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d90:	4620      	mov	r0, r4
   b9d92:	f001 f9ef 	bl	bb174 <__mdiff>
   b9d96:	4605      	mov	r5, r0
   b9d98:	2800      	cmp	r0, #0
   b9d9a:	f43f ae69 	beq.w	b9a70 <_strtod_l+0x490>
   b9d9e:	68c3      	ldr	r3, [r0, #12]
   b9da0:	930b      	str	r3, [sp, #44]	; 0x2c
   b9da2:	2300      	movs	r3, #0
   b9da4:	60c3      	str	r3, [r0, #12]
   b9da6:	4631      	mov	r1, r6
   b9da8:	f001 f9c8 	bl	bb13c <__mcmp>
   b9dac:	2800      	cmp	r0, #0
   b9dae:	da60      	bge.n	b9e72 <_strtod_l+0x892>
   b9db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9db2:	ea53 030a 	orrs.w	r3, r3, sl
   b9db6:	f040 8082 	bne.w	b9ebe <_strtod_l+0x8de>
   b9dba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9dbe:	2b00      	cmp	r3, #0
   b9dc0:	d17d      	bne.n	b9ebe <_strtod_l+0x8de>
   b9dc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9dc6:	0d1b      	lsrs	r3, r3, #20
   b9dc8:	051b      	lsls	r3, r3, #20
   b9dca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9dce:	d976      	bls.n	b9ebe <_strtod_l+0x8de>
   b9dd0:	696b      	ldr	r3, [r5, #20]
   b9dd2:	b913      	cbnz	r3, b9dda <_strtod_l+0x7fa>
   b9dd4:	692b      	ldr	r3, [r5, #16]
   b9dd6:	2b01      	cmp	r3, #1
   b9dd8:	dd71      	ble.n	b9ebe <_strtod_l+0x8de>
   b9dda:	4629      	mov	r1, r5
   b9ddc:	2201      	movs	r2, #1
   b9dde:	4620      	mov	r0, r4
   b9de0:	f001 f93c 	bl	bb05c <__lshift>
   b9de4:	4631      	mov	r1, r6
   b9de6:	4605      	mov	r5, r0
   b9de8:	f001 f9a8 	bl	bb13c <__mcmp>
   b9dec:	2800      	cmp	r0, #0
   b9dee:	dd66      	ble.n	b9ebe <_strtod_l+0x8de>
   b9df0:	9904      	ldr	r1, [sp, #16]
   b9df2:	4a53      	ldr	r2, [pc, #332]	; (b9f40 <_strtod_l+0x960>)
   b9df4:	465b      	mov	r3, fp
   b9df6:	2900      	cmp	r1, #0
   b9df8:	f000 8081 	beq.w	b9efe <_strtod_l+0x91e>
   b9dfc:	ea02 010b 	and.w	r1, r2, fp
   b9e00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b9e04:	dc7b      	bgt.n	b9efe <_strtod_l+0x91e>
   b9e06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b9e0a:	f77f aea9 	ble.w	b9b60 <_strtod_l+0x580>
   b9e0e:	4b4d      	ldr	r3, [pc, #308]	; (b9f44 <_strtod_l+0x964>)
   b9e10:	4650      	mov	r0, sl
   b9e12:	4659      	mov	r1, fp
   b9e14:	2200      	movs	r2, #0
   b9e16:	f7fe ffd7 	bl	b8dc8 <__aeabi_dmul>
   b9e1a:	460b      	mov	r3, r1
   b9e1c:	4303      	orrs	r3, r0
   b9e1e:	bf08      	it	eq
   b9e20:	2322      	moveq	r3, #34	; 0x22
   b9e22:	4682      	mov	sl, r0
   b9e24:	468b      	mov	fp, r1
   b9e26:	bf08      	it	eq
   b9e28:	6023      	streq	r3, [r4, #0]
   b9e2a:	e62b      	b.n	b9a84 <_strtod_l+0x4a4>
   b9e2c:	f04f 32ff 	mov.w	r2, #4294967295
   b9e30:	fa02 f303 	lsl.w	r3, r2, r3
   b9e34:	ea03 0a0a 	and.w	sl, r3, sl
   b9e38:	e6e3      	b.n	b9c02 <_strtod_l+0x622>
   b9e3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b9e3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b9e42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b9e46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b9e4a:	fa01 f308 	lsl.w	r3, r1, r8
   b9e4e:	9308      	str	r3, [sp, #32]
   b9e50:	910d      	str	r1, [sp, #52]	; 0x34
   b9e52:	e746      	b.n	b9ce2 <_strtod_l+0x702>
   b9e54:	2300      	movs	r3, #0
   b9e56:	9308      	str	r3, [sp, #32]
   b9e58:	2301      	movs	r3, #1
   b9e5a:	930d      	str	r3, [sp, #52]	; 0x34
   b9e5c:	e741      	b.n	b9ce2 <_strtod_l+0x702>
   b9e5e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9e60:	4642      	mov	r2, r8
   b9e62:	4620      	mov	r0, r4
   b9e64:	f001 f8fa 	bl	bb05c <__lshift>
   b9e68:	9018      	str	r0, [sp, #96]	; 0x60
   b9e6a:	2800      	cmp	r0, #0
   b9e6c:	f47f af6b 	bne.w	b9d46 <_strtod_l+0x766>
   b9e70:	e5fe      	b.n	b9a70 <_strtod_l+0x490>
   b9e72:	465f      	mov	r7, fp
   b9e74:	d16e      	bne.n	b9f54 <_strtod_l+0x974>
   b9e76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9e78:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9e7c:	b342      	cbz	r2, b9ed0 <_strtod_l+0x8f0>
   b9e7e:	4a32      	ldr	r2, [pc, #200]	; (b9f48 <_strtod_l+0x968>)
   b9e80:	4293      	cmp	r3, r2
   b9e82:	d128      	bne.n	b9ed6 <_strtod_l+0x8f6>
   b9e84:	9b04      	ldr	r3, [sp, #16]
   b9e86:	4651      	mov	r1, sl
   b9e88:	b1eb      	cbz	r3, b9ec6 <_strtod_l+0x8e6>
   b9e8a:	4b2d      	ldr	r3, [pc, #180]	; (b9f40 <_strtod_l+0x960>)
   b9e8c:	403b      	ands	r3, r7
   b9e8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9e92:	f04f 32ff 	mov.w	r2, #4294967295
   b9e96:	d819      	bhi.n	b9ecc <_strtod_l+0x8ec>
   b9e98:	0d1b      	lsrs	r3, r3, #20
   b9e9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9e9e:	fa02 f303 	lsl.w	r3, r2, r3
   b9ea2:	4299      	cmp	r1, r3
   b9ea4:	d117      	bne.n	b9ed6 <_strtod_l+0x8f6>
   b9ea6:	4b29      	ldr	r3, [pc, #164]	; (b9f4c <_strtod_l+0x96c>)
   b9ea8:	429f      	cmp	r7, r3
   b9eaa:	d102      	bne.n	b9eb2 <_strtod_l+0x8d2>
   b9eac:	3101      	adds	r1, #1
   b9eae:	f43f addf 	beq.w	b9a70 <_strtod_l+0x490>
   b9eb2:	4b23      	ldr	r3, [pc, #140]	; (b9f40 <_strtod_l+0x960>)
   b9eb4:	403b      	ands	r3, r7
   b9eb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9eba:	f04f 0a00 	mov.w	sl, #0
   b9ebe:	9b04      	ldr	r3, [sp, #16]
   b9ec0:	2b00      	cmp	r3, #0
   b9ec2:	d1a4      	bne.n	b9e0e <_strtod_l+0x82e>
   b9ec4:	e5de      	b.n	b9a84 <_strtod_l+0x4a4>
   b9ec6:	f04f 33ff 	mov.w	r3, #4294967295
   b9eca:	e7ea      	b.n	b9ea2 <_strtod_l+0x8c2>
   b9ecc:	4613      	mov	r3, r2
   b9ece:	e7e8      	b.n	b9ea2 <_strtod_l+0x8c2>
   b9ed0:	ea53 030a 	orrs.w	r3, r3, sl
   b9ed4:	d08c      	beq.n	b9df0 <_strtod_l+0x810>
   b9ed6:	9b08      	ldr	r3, [sp, #32]
   b9ed8:	b1db      	cbz	r3, b9f12 <_strtod_l+0x932>
   b9eda:	423b      	tst	r3, r7
   b9edc:	d0ef      	beq.n	b9ebe <_strtod_l+0x8de>
   b9ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9ee0:	9a04      	ldr	r2, [sp, #16]
   b9ee2:	4650      	mov	r0, sl
   b9ee4:	4659      	mov	r1, fp
   b9ee6:	b1c3      	cbz	r3, b9f1a <_strtod_l+0x93a>
   b9ee8:	f7ff fb5d 	bl	b95a6 <sulp>
   b9eec:	4602      	mov	r2, r0
   b9eee:	460b      	mov	r3, r1
   b9ef0:	ec51 0b18 	vmov	r0, r1, d8
   b9ef4:	f7fe fdb2 	bl	b8a5c <__adddf3>
   b9ef8:	4682      	mov	sl, r0
   b9efa:	468b      	mov	fp, r1
   b9efc:	e7df      	b.n	b9ebe <_strtod_l+0x8de>
   b9efe:	4013      	ands	r3, r2
   b9f00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9f04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9f08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9f0c:	f04f 3aff 	mov.w	sl, #4294967295
   b9f10:	e7d5      	b.n	b9ebe <_strtod_l+0x8de>
   b9f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9f14:	ea13 0f0a 	tst.w	r3, sl
   b9f18:	e7e0      	b.n	b9edc <_strtod_l+0x8fc>
   b9f1a:	f7ff fb44 	bl	b95a6 <sulp>
   b9f1e:	4602      	mov	r2, r0
   b9f20:	460b      	mov	r3, r1
   b9f22:	ec51 0b18 	vmov	r0, r1, d8
   b9f26:	f7fe fd97 	bl	b8a58 <__aeabi_dsub>
   b9f2a:	2200      	movs	r2, #0
   b9f2c:	2300      	movs	r3, #0
   b9f2e:	4682      	mov	sl, r0
   b9f30:	468b      	mov	fp, r1
   b9f32:	f7ff f9b1 	bl	b9298 <__aeabi_dcmpeq>
   b9f36:	2800      	cmp	r0, #0
   b9f38:	d0c1      	beq.n	b9ebe <_strtod_l+0x8de>
   b9f3a:	e611      	b.n	b9b60 <_strtod_l+0x580>
   b9f3c:	fffffc02 	.word	0xfffffc02
   b9f40:	7ff00000 	.word	0x7ff00000
   b9f44:	39500000 	.word	0x39500000
   b9f48:	000fffff 	.word	0x000fffff
   b9f4c:	7fefffff 	.word	0x7fefffff
   b9f50:	000bc0e0 	.word	0x000bc0e0
   b9f54:	4631      	mov	r1, r6
   b9f56:	4628      	mov	r0, r5
   b9f58:	f001 fa6e 	bl	bb438 <__ratio>
   b9f5c:	ec59 8b10 	vmov	r8, r9, d0
   b9f60:	ee10 0a10 	vmov	r0, s0
   b9f64:	2200      	movs	r2, #0
   b9f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9f6a:	4649      	mov	r1, r9
   b9f6c:	f7ff f9a8 	bl	b92c0 <__aeabi_dcmple>
   b9f70:	2800      	cmp	r0, #0
   b9f72:	d07a      	beq.n	ba06a <_strtod_l+0xa8a>
   b9f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9f76:	2b00      	cmp	r3, #0
   b9f78:	d04a      	beq.n	ba010 <_strtod_l+0xa30>
   b9f7a:	4b95      	ldr	r3, [pc, #596]	; (ba1d0 <_strtod_l+0xbf0>)
   b9f7c:	2200      	movs	r2, #0
   b9f7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9f82:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba1d0 <_strtod_l+0xbf0>
   b9f86:	f04f 0800 	mov.w	r8, #0
   b9f8a:	4b92      	ldr	r3, [pc, #584]	; (ba1d4 <_strtod_l+0xbf4>)
   b9f8c:	403b      	ands	r3, r7
   b9f8e:	930d      	str	r3, [sp, #52]	; 0x34
   b9f90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9f92:	4b91      	ldr	r3, [pc, #580]	; (ba1d8 <_strtod_l+0xbf8>)
   b9f94:	429a      	cmp	r2, r3
   b9f96:	f040 80b0 	bne.w	ba0fa <_strtod_l+0xb1a>
   b9f9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9f9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9fa2:	ec4b ab10 	vmov	d0, sl, fp
   b9fa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9faa:	f001 f96d 	bl	bb288 <__ulp>
   b9fae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9fb2:	ec53 2b10 	vmov	r2, r3, d0
   b9fb6:	f7fe ff07 	bl	b8dc8 <__aeabi_dmul>
   b9fba:	4652      	mov	r2, sl
   b9fbc:	465b      	mov	r3, fp
   b9fbe:	f7fe fd4d 	bl	b8a5c <__adddf3>
   b9fc2:	460b      	mov	r3, r1
   b9fc4:	4983      	ldr	r1, [pc, #524]	; (ba1d4 <_strtod_l+0xbf4>)
   b9fc6:	4a85      	ldr	r2, [pc, #532]	; (ba1dc <_strtod_l+0xbfc>)
   b9fc8:	4019      	ands	r1, r3
   b9fca:	4291      	cmp	r1, r2
   b9fcc:	4682      	mov	sl, r0
   b9fce:	d960      	bls.n	ba092 <_strtod_l+0xab2>
   b9fd0:	ee18 3a90 	vmov	r3, s17
   b9fd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9fd8:	4293      	cmp	r3, r2
   b9fda:	d104      	bne.n	b9fe6 <_strtod_l+0xa06>
   b9fdc:	ee18 3a10 	vmov	r3, s16
   b9fe0:	3301      	adds	r3, #1
   b9fe2:	f43f ad45 	beq.w	b9a70 <_strtod_l+0x490>
   b9fe6:	f8df b200 	ldr.w	fp, [pc, #512]	; ba1e8 <_strtod_l+0xc08>
   b9fea:	f04f 3aff 	mov.w	sl, #4294967295
   b9fee:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9ff0:	4620      	mov	r0, r4
   b9ff2:	f000 fe17 	bl	bac24 <_Bfree>
   b9ff6:	9905      	ldr	r1, [sp, #20]
   b9ff8:	4620      	mov	r0, r4
   b9ffa:	f000 fe13 	bl	bac24 <_Bfree>
   b9ffe:	4631      	mov	r1, r6
   ba000:	4620      	mov	r0, r4
   ba002:	f000 fe0f 	bl	bac24 <_Bfree>
   ba006:	4629      	mov	r1, r5
   ba008:	4620      	mov	r0, r4
   ba00a:	f000 fe0b 	bl	bac24 <_Bfree>
   ba00e:	e61a      	b.n	b9c46 <_strtod_l+0x666>
   ba010:	f1ba 0f00 	cmp.w	sl, #0
   ba014:	d11b      	bne.n	ba04e <_strtod_l+0xa6e>
   ba016:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba01a:	b9f3      	cbnz	r3, ba05a <_strtod_l+0xa7a>
   ba01c:	4b6c      	ldr	r3, [pc, #432]	; (ba1d0 <_strtod_l+0xbf0>)
   ba01e:	2200      	movs	r2, #0
   ba020:	4640      	mov	r0, r8
   ba022:	4649      	mov	r1, r9
   ba024:	f7ff f942 	bl	b92ac <__aeabi_dcmplt>
   ba028:	b9d0      	cbnz	r0, ba060 <_strtod_l+0xa80>
   ba02a:	4640      	mov	r0, r8
   ba02c:	4649      	mov	r1, r9
   ba02e:	4b6c      	ldr	r3, [pc, #432]	; (ba1e0 <_strtod_l+0xc00>)
   ba030:	2200      	movs	r2, #0
   ba032:	f7fe fec9 	bl	b8dc8 <__aeabi_dmul>
   ba036:	4680      	mov	r8, r0
   ba038:	4689      	mov	r9, r1
   ba03a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ba03e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   ba042:	9315      	str	r3, [sp, #84]	; 0x54
   ba044:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ba048:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba04c:	e79d      	b.n	b9f8a <_strtod_l+0x9aa>
   ba04e:	f1ba 0f01 	cmp.w	sl, #1
   ba052:	d102      	bne.n	ba05a <_strtod_l+0xa7a>
   ba054:	2f00      	cmp	r7, #0
   ba056:	f43f ad83 	beq.w	b9b60 <_strtod_l+0x580>
   ba05a:	4b62      	ldr	r3, [pc, #392]	; (ba1e4 <_strtod_l+0xc04>)
   ba05c:	2200      	movs	r2, #0
   ba05e:	e78e      	b.n	b9f7e <_strtod_l+0x99e>
   ba060:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba1e0 <_strtod_l+0xc00>
   ba064:	f04f 0800 	mov.w	r8, #0
   ba068:	e7e7      	b.n	ba03a <_strtod_l+0xa5a>
   ba06a:	4b5d      	ldr	r3, [pc, #372]	; (ba1e0 <_strtod_l+0xc00>)
   ba06c:	4640      	mov	r0, r8
   ba06e:	4649      	mov	r1, r9
   ba070:	2200      	movs	r2, #0
   ba072:	f7fe fea9 	bl	b8dc8 <__aeabi_dmul>
   ba076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba078:	4680      	mov	r8, r0
   ba07a:	4689      	mov	r9, r1
   ba07c:	b933      	cbnz	r3, ba08c <_strtod_l+0xaac>
   ba07e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba082:	900e      	str	r0, [sp, #56]	; 0x38
   ba084:	930f      	str	r3, [sp, #60]	; 0x3c
   ba086:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   ba08a:	e7dd      	b.n	ba048 <_strtod_l+0xa68>
   ba08c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   ba090:	e7f9      	b.n	ba086 <_strtod_l+0xaa6>
   ba092:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ba096:	9b04      	ldr	r3, [sp, #16]
   ba098:	2b00      	cmp	r3, #0
   ba09a:	d1a8      	bne.n	b9fee <_strtod_l+0xa0e>
   ba09c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba0a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba0a2:	0d1b      	lsrs	r3, r3, #20
   ba0a4:	051b      	lsls	r3, r3, #20
   ba0a6:	429a      	cmp	r2, r3
   ba0a8:	d1a1      	bne.n	b9fee <_strtod_l+0xa0e>
   ba0aa:	4640      	mov	r0, r8
   ba0ac:	4649      	mov	r1, r9
   ba0ae:	f001 fa61 	bl	bb574 <__aeabi_d2lz>
   ba0b2:	f7fe fe5b 	bl	b8d6c <__aeabi_l2d>
   ba0b6:	4602      	mov	r2, r0
   ba0b8:	460b      	mov	r3, r1
   ba0ba:	4640      	mov	r0, r8
   ba0bc:	4649      	mov	r1, r9
   ba0be:	f7fe fccb 	bl	b8a58 <__aeabi_dsub>
   ba0c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba0c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba0c8:	ea43 030a 	orr.w	r3, r3, sl
   ba0cc:	4313      	orrs	r3, r2
   ba0ce:	4680      	mov	r8, r0
   ba0d0:	4689      	mov	r9, r1
   ba0d2:	d055      	beq.n	ba180 <_strtod_l+0xba0>
   ba0d4:	a336      	add	r3, pc, #216	; (adr r3, ba1b0 <_strtod_l+0xbd0>)
   ba0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0da:	f7ff f8e7 	bl	b92ac <__aeabi_dcmplt>
   ba0de:	2800      	cmp	r0, #0
   ba0e0:	f47f acd0 	bne.w	b9a84 <_strtod_l+0x4a4>
   ba0e4:	a334      	add	r3, pc, #208	; (adr r3, ba1b8 <_strtod_l+0xbd8>)
   ba0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba0ea:	4640      	mov	r0, r8
   ba0ec:	4649      	mov	r1, r9
   ba0ee:	f7ff f8fb 	bl	b92e8 <__aeabi_dcmpgt>
   ba0f2:	2800      	cmp	r0, #0
   ba0f4:	f43f af7b 	beq.w	b9fee <_strtod_l+0xa0e>
   ba0f8:	e4c4      	b.n	b9a84 <_strtod_l+0x4a4>
   ba0fa:	9b04      	ldr	r3, [sp, #16]
   ba0fc:	b333      	cbz	r3, ba14c <_strtod_l+0xb6c>
   ba0fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba100:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba104:	d822      	bhi.n	ba14c <_strtod_l+0xb6c>
   ba106:	a32e      	add	r3, pc, #184	; (adr r3, ba1c0 <_strtod_l+0xbe0>)
   ba108:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba10c:	4640      	mov	r0, r8
   ba10e:	4649      	mov	r1, r9
   ba110:	f7ff f8d6 	bl	b92c0 <__aeabi_dcmple>
   ba114:	b1a0      	cbz	r0, ba140 <_strtod_l+0xb60>
   ba116:	4649      	mov	r1, r9
   ba118:	4640      	mov	r0, r8
   ba11a:	f7ff f8ef 	bl	b92fc <__aeabi_d2uiz>
   ba11e:	2801      	cmp	r0, #1
   ba120:	bf38      	it	cc
   ba122:	2001      	movcc	r0, #1
   ba124:	f7fe fdd6 	bl	b8cd4 <__aeabi_ui2d>
   ba128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba12a:	4680      	mov	r8, r0
   ba12c:	4689      	mov	r9, r1
   ba12e:	bb23      	cbnz	r3, ba17a <_strtod_l+0xb9a>
   ba130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba134:	9010      	str	r0, [sp, #64]	; 0x40
   ba136:	9311      	str	r3, [sp, #68]	; 0x44
   ba138:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba13c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba140:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba144:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba148:	1a9b      	subs	r3, r3, r2
   ba14a:	9309      	str	r3, [sp, #36]	; 0x24
   ba14c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba150:	eeb0 0a48 	vmov.f32	s0, s16
   ba154:	eef0 0a68 	vmov.f32	s1, s17
   ba158:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba15c:	f001 f894 	bl	bb288 <__ulp>
   ba160:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba164:	ec53 2b10 	vmov	r2, r3, d0
   ba168:	f7fe fe2e 	bl	b8dc8 <__aeabi_dmul>
   ba16c:	ec53 2b18 	vmov	r2, r3, d8
   ba170:	f7fe fc74 	bl	b8a5c <__adddf3>
   ba174:	4682      	mov	sl, r0
   ba176:	468b      	mov	fp, r1
   ba178:	e78d      	b.n	ba096 <_strtod_l+0xab6>
   ba17a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba17e:	e7db      	b.n	ba138 <_strtod_l+0xb58>
   ba180:	a311      	add	r3, pc, #68	; (adr r3, ba1c8 <_strtod_l+0xbe8>)
   ba182:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba186:	f7ff f891 	bl	b92ac <__aeabi_dcmplt>
   ba18a:	e7b2      	b.n	ba0f2 <_strtod_l+0xb12>
   ba18c:	2300      	movs	r3, #0
   ba18e:	930a      	str	r3, [sp, #40]	; 0x28
   ba190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba194:	6013      	str	r3, [r2, #0]
   ba196:	f7ff ba6b 	b.w	b9670 <_strtod_l+0x90>
   ba19a:	2a65      	cmp	r2, #101	; 0x65
   ba19c:	f43f ab5f 	beq.w	b985e <_strtod_l+0x27e>
   ba1a0:	2a45      	cmp	r2, #69	; 0x45
   ba1a2:	f43f ab5c 	beq.w	b985e <_strtod_l+0x27e>
   ba1a6:	2301      	movs	r3, #1
   ba1a8:	f7ff bb94 	b.w	b98d4 <_strtod_l+0x2f4>
   ba1ac:	f3af 8000 	nop.w
   ba1b0:	94a03595 	.word	0x94a03595
   ba1b4:	3fdfffff 	.word	0x3fdfffff
   ba1b8:	35afe535 	.word	0x35afe535
   ba1bc:	3fe00000 	.word	0x3fe00000
   ba1c0:	ffc00000 	.word	0xffc00000
   ba1c4:	41dfffff 	.word	0x41dfffff
   ba1c8:	94a03595 	.word	0x94a03595
   ba1cc:	3fcfffff 	.word	0x3fcfffff
   ba1d0:	3ff00000 	.word	0x3ff00000
   ba1d4:	7ff00000 	.word	0x7ff00000
   ba1d8:	7fe00000 	.word	0x7fe00000
   ba1dc:	7c9fffff 	.word	0x7c9fffff
   ba1e0:	3fe00000 	.word	0x3fe00000
   ba1e4:	bff00000 	.word	0xbff00000
   ba1e8:	7fefffff 	.word	0x7fefffff

000ba1ec <strtod>:
   ba1ec:	460a      	mov	r2, r1
   ba1ee:	4601      	mov	r1, r0
   ba1f0:	4802      	ldr	r0, [pc, #8]	; (ba1fc <strtod+0x10>)
   ba1f2:	4b03      	ldr	r3, [pc, #12]	; (ba200 <strtod+0x14>)
   ba1f4:	6800      	ldr	r0, [r0, #0]
   ba1f6:	f7ff b9f3 	b.w	b95e0 <_strtod_l>
   ba1fa:	bf00      	nop
   ba1fc:	2003d924 	.word	0x2003d924
   ba200:	2003d990 	.word	0x2003d990

000ba204 <strtok>:
   ba204:	4b16      	ldr	r3, [pc, #88]	; (ba260 <strtok+0x5c>)
   ba206:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba208:	681e      	ldr	r6, [r3, #0]
   ba20a:	6db4      	ldr	r4, [r6, #88]	; 0x58
   ba20c:	4605      	mov	r5, r0
   ba20e:	b9fc      	cbnz	r4, ba250 <strtok+0x4c>
   ba210:	2050      	movs	r0, #80	; 0x50
   ba212:	9101      	str	r1, [sp, #4]
   ba214:	f7fb fbaa 	bl	b596c <malloc>
   ba218:	9901      	ldr	r1, [sp, #4]
   ba21a:	65b0      	str	r0, [r6, #88]	; 0x58
   ba21c:	4602      	mov	r2, r0
   ba21e:	b920      	cbnz	r0, ba22a <strtok+0x26>
   ba220:	4b10      	ldr	r3, [pc, #64]	; (ba264 <strtok+0x60>)
   ba222:	4811      	ldr	r0, [pc, #68]	; (ba268 <strtok+0x64>)
   ba224:	2157      	movs	r1, #87	; 0x57
   ba226:	f7fb fbe9 	bl	b59fc <__assert_func>
   ba22a:	e9c0 4400 	strd	r4, r4, [r0]
   ba22e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   ba232:	e9c0 4404 	strd	r4, r4, [r0, #16]
   ba236:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   ba23a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   ba23e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   ba242:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   ba246:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   ba24a:	6184      	str	r4, [r0, #24]
   ba24c:	7704      	strb	r4, [r0, #28]
   ba24e:	6244      	str	r4, [r0, #36]	; 0x24
   ba250:	6db2      	ldr	r2, [r6, #88]	; 0x58
   ba252:	2301      	movs	r3, #1
   ba254:	4628      	mov	r0, r5
   ba256:	b002      	add	sp, #8
   ba258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba25c:	f000 b806 	b.w	ba26c <__strtok_r>
   ba260:	2003d924 	.word	0x2003d924
   ba264:	000bc011 	.word	0x000bc011
   ba268:	000bc108 	.word	0x000bc108

000ba26c <__strtok_r>:
   ba26c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba26e:	b908      	cbnz	r0, ba274 <__strtok_r+0x8>
   ba270:	6810      	ldr	r0, [r2, #0]
   ba272:	b188      	cbz	r0, ba298 <__strtok_r+0x2c>
   ba274:	4604      	mov	r4, r0
   ba276:	4620      	mov	r0, r4
   ba278:	f814 5b01 	ldrb.w	r5, [r4], #1
   ba27c:	460f      	mov	r7, r1
   ba27e:	f817 6b01 	ldrb.w	r6, [r7], #1
   ba282:	b91e      	cbnz	r6, ba28c <__strtok_r+0x20>
   ba284:	b965      	cbnz	r5, ba2a0 <__strtok_r+0x34>
   ba286:	6015      	str	r5, [r2, #0]
   ba288:	4628      	mov	r0, r5
   ba28a:	e005      	b.n	ba298 <__strtok_r+0x2c>
   ba28c:	42b5      	cmp	r5, r6
   ba28e:	d1f6      	bne.n	ba27e <__strtok_r+0x12>
   ba290:	2b00      	cmp	r3, #0
   ba292:	d1f0      	bne.n	ba276 <__strtok_r+0xa>
   ba294:	6014      	str	r4, [r2, #0]
   ba296:	7003      	strb	r3, [r0, #0]
   ba298:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba29a:	461c      	mov	r4, r3
   ba29c:	e00c      	b.n	ba2b8 <__strtok_r+0x4c>
   ba29e:	b915      	cbnz	r5, ba2a6 <__strtok_r+0x3a>
   ba2a0:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba2a4:	460e      	mov	r6, r1
   ba2a6:	f816 5b01 	ldrb.w	r5, [r6], #1
   ba2aa:	42ab      	cmp	r3, r5
   ba2ac:	d1f7      	bne.n	ba29e <__strtok_r+0x32>
   ba2ae:	2b00      	cmp	r3, #0
   ba2b0:	d0f3      	beq.n	ba29a <__strtok_r+0x2e>
   ba2b2:	2300      	movs	r3, #0
   ba2b4:	f804 3c01 	strb.w	r3, [r4, #-1]
   ba2b8:	6014      	str	r4, [r2, #0]
   ba2ba:	e7ed      	b.n	ba298 <__strtok_r+0x2c>

000ba2bc <_strtol_l.constprop.0>:
   ba2bc:	2b01      	cmp	r3, #1
   ba2be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba2c2:	d001      	beq.n	ba2c8 <_strtol_l.constprop.0+0xc>
   ba2c4:	2b24      	cmp	r3, #36	; 0x24
   ba2c6:	d906      	bls.n	ba2d6 <_strtol_l.constprop.0+0x1a>
   ba2c8:	f7fb fb90 	bl	b59ec <__errno>
   ba2cc:	2316      	movs	r3, #22
   ba2ce:	6003      	str	r3, [r0, #0]
   ba2d0:	2000      	movs	r0, #0
   ba2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba2d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba3bc <_strtol_l.constprop.0+0x100>
   ba2da:	460d      	mov	r5, r1
   ba2dc:	462e      	mov	r6, r5
   ba2de:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba2e2:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba2e6:	f017 0708 	ands.w	r7, r7, #8
   ba2ea:	d1f7      	bne.n	ba2dc <_strtol_l.constprop.0+0x20>
   ba2ec:	2c2d      	cmp	r4, #45	; 0x2d
   ba2ee:	d132      	bne.n	ba356 <_strtol_l.constprop.0+0x9a>
   ba2f0:	782c      	ldrb	r4, [r5, #0]
   ba2f2:	2701      	movs	r7, #1
   ba2f4:	1cb5      	adds	r5, r6, #2
   ba2f6:	2b00      	cmp	r3, #0
   ba2f8:	d05b      	beq.n	ba3b2 <_strtol_l.constprop.0+0xf6>
   ba2fa:	2b10      	cmp	r3, #16
   ba2fc:	d109      	bne.n	ba312 <_strtol_l.constprop.0+0x56>
   ba2fe:	2c30      	cmp	r4, #48	; 0x30
   ba300:	d107      	bne.n	ba312 <_strtol_l.constprop.0+0x56>
   ba302:	782c      	ldrb	r4, [r5, #0]
   ba304:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba308:	2c58      	cmp	r4, #88	; 0x58
   ba30a:	d14d      	bne.n	ba3a8 <_strtol_l.constprop.0+0xec>
   ba30c:	786c      	ldrb	r4, [r5, #1]
   ba30e:	2310      	movs	r3, #16
   ba310:	3502      	adds	r5, #2
   ba312:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba316:	f108 38ff 	add.w	r8, r8, #4294967295
   ba31a:	f04f 0c00 	mov.w	ip, #0
   ba31e:	fbb8 f9f3 	udiv	r9, r8, r3
   ba322:	4666      	mov	r6, ip
   ba324:	fb03 8a19 	mls	sl, r3, r9, r8
   ba328:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba32c:	f1be 0f09 	cmp.w	lr, #9
   ba330:	d816      	bhi.n	ba360 <_strtol_l.constprop.0+0xa4>
   ba332:	4674      	mov	r4, lr
   ba334:	42a3      	cmp	r3, r4
   ba336:	dd24      	ble.n	ba382 <_strtol_l.constprop.0+0xc6>
   ba338:	f1bc 0f00 	cmp.w	ip, #0
   ba33c:	db1e      	blt.n	ba37c <_strtol_l.constprop.0+0xc0>
   ba33e:	45b1      	cmp	r9, r6
   ba340:	d31c      	bcc.n	ba37c <_strtol_l.constprop.0+0xc0>
   ba342:	d101      	bne.n	ba348 <_strtol_l.constprop.0+0x8c>
   ba344:	45a2      	cmp	sl, r4
   ba346:	db19      	blt.n	ba37c <_strtol_l.constprop.0+0xc0>
   ba348:	fb06 4603 	mla	r6, r6, r3, r4
   ba34c:	f04f 0c01 	mov.w	ip, #1
   ba350:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba354:	e7e8      	b.n	ba328 <_strtol_l.constprop.0+0x6c>
   ba356:	2c2b      	cmp	r4, #43	; 0x2b
   ba358:	bf04      	itt	eq
   ba35a:	782c      	ldrbeq	r4, [r5, #0]
   ba35c:	1cb5      	addeq	r5, r6, #2
   ba35e:	e7ca      	b.n	ba2f6 <_strtol_l.constprop.0+0x3a>
   ba360:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba364:	f1be 0f19 	cmp.w	lr, #25
   ba368:	d801      	bhi.n	ba36e <_strtol_l.constprop.0+0xb2>
   ba36a:	3c37      	subs	r4, #55	; 0x37
   ba36c:	e7e2      	b.n	ba334 <_strtol_l.constprop.0+0x78>
   ba36e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba372:	f1be 0f19 	cmp.w	lr, #25
   ba376:	d804      	bhi.n	ba382 <_strtol_l.constprop.0+0xc6>
   ba378:	3c57      	subs	r4, #87	; 0x57
   ba37a:	e7db      	b.n	ba334 <_strtol_l.constprop.0+0x78>
   ba37c:	f04f 3cff 	mov.w	ip, #4294967295
   ba380:	e7e6      	b.n	ba350 <_strtol_l.constprop.0+0x94>
   ba382:	f1bc 0f00 	cmp.w	ip, #0
   ba386:	da05      	bge.n	ba394 <_strtol_l.constprop.0+0xd8>
   ba388:	2322      	movs	r3, #34	; 0x22
   ba38a:	6003      	str	r3, [r0, #0]
   ba38c:	4646      	mov	r6, r8
   ba38e:	b942      	cbnz	r2, ba3a2 <_strtol_l.constprop.0+0xe6>
   ba390:	4630      	mov	r0, r6
   ba392:	e79e      	b.n	ba2d2 <_strtol_l.constprop.0+0x16>
   ba394:	b107      	cbz	r7, ba398 <_strtol_l.constprop.0+0xdc>
   ba396:	4276      	negs	r6, r6
   ba398:	2a00      	cmp	r2, #0
   ba39a:	d0f9      	beq.n	ba390 <_strtol_l.constprop.0+0xd4>
   ba39c:	f1bc 0f00 	cmp.w	ip, #0
   ba3a0:	d000      	beq.n	ba3a4 <_strtol_l.constprop.0+0xe8>
   ba3a2:	1e69      	subs	r1, r5, #1
   ba3a4:	6011      	str	r1, [r2, #0]
   ba3a6:	e7f3      	b.n	ba390 <_strtol_l.constprop.0+0xd4>
   ba3a8:	2430      	movs	r4, #48	; 0x30
   ba3aa:	2b00      	cmp	r3, #0
   ba3ac:	d1b1      	bne.n	ba312 <_strtol_l.constprop.0+0x56>
   ba3ae:	2308      	movs	r3, #8
   ba3b0:	e7af      	b.n	ba312 <_strtol_l.constprop.0+0x56>
   ba3b2:	2c30      	cmp	r4, #48	; 0x30
   ba3b4:	d0a5      	beq.n	ba302 <_strtol_l.constprop.0+0x46>
   ba3b6:	230a      	movs	r3, #10
   ba3b8:	e7ab      	b.n	ba312 <_strtol_l.constprop.0+0x56>
   ba3ba:	bf00      	nop
   ba3bc:	000bc188 	.word	0x000bc188

000ba3c0 <strtol>:
   ba3c0:	4613      	mov	r3, r2
   ba3c2:	460a      	mov	r2, r1
   ba3c4:	4601      	mov	r1, r0
   ba3c6:	4802      	ldr	r0, [pc, #8]	; (ba3d0 <strtol+0x10>)
   ba3c8:	6800      	ldr	r0, [r0, #0]
   ba3ca:	f7ff bf77 	b.w	ba2bc <_strtol_l.constprop.0>
   ba3ce:	bf00      	nop
   ba3d0:	2003d924 	.word	0x2003d924

000ba3d4 <__register_exitproc>:
   ba3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba3d8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba494 <__register_exitproc+0xc0>
   ba3dc:	4606      	mov	r6, r0
   ba3de:	f8d8 0000 	ldr.w	r0, [r8]
   ba3e2:	461f      	mov	r7, r3
   ba3e4:	460d      	mov	r5, r1
   ba3e6:	4691      	mov	r9, r2
   ba3e8:	f000 fbc6 	bl	bab78 <__retarget_lock_acquire_recursive>
   ba3ec:	4b25      	ldr	r3, [pc, #148]	; (ba484 <__register_exitproc+0xb0>)
   ba3ee:	681c      	ldr	r4, [r3, #0]
   ba3f0:	b934      	cbnz	r4, ba400 <__register_exitproc+0x2c>
   ba3f2:	4c25      	ldr	r4, [pc, #148]	; (ba488 <__register_exitproc+0xb4>)
   ba3f4:	601c      	str	r4, [r3, #0]
   ba3f6:	4b25      	ldr	r3, [pc, #148]	; (ba48c <__register_exitproc+0xb8>)
   ba3f8:	b113      	cbz	r3, ba400 <__register_exitproc+0x2c>
   ba3fa:	681b      	ldr	r3, [r3, #0]
   ba3fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba400:	6863      	ldr	r3, [r4, #4]
   ba402:	2b1f      	cmp	r3, #31
   ba404:	dd07      	ble.n	ba416 <__register_exitproc+0x42>
   ba406:	f8d8 0000 	ldr.w	r0, [r8]
   ba40a:	f000 fbb7 	bl	bab7c <__retarget_lock_release_recursive>
   ba40e:	f04f 30ff 	mov.w	r0, #4294967295
   ba412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba416:	b34e      	cbz	r6, ba46c <__register_exitproc+0x98>
   ba418:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba41c:	b988      	cbnz	r0, ba442 <__register_exitproc+0x6e>
   ba41e:	4b1c      	ldr	r3, [pc, #112]	; (ba490 <__register_exitproc+0xbc>)
   ba420:	b923      	cbnz	r3, ba42c <__register_exitproc+0x58>
   ba422:	f8d8 0000 	ldr.w	r0, [r8]
   ba426:	f000 fba8 	bl	bab7a <__retarget_lock_release>
   ba42a:	e7f0      	b.n	ba40e <__register_exitproc+0x3a>
   ba42c:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba430:	f7fb fa9c 	bl	b596c <malloc>
   ba434:	2800      	cmp	r0, #0
   ba436:	d0f4      	beq.n	ba422 <__register_exitproc+0x4e>
   ba438:	2300      	movs	r3, #0
   ba43a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba43e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba442:	6863      	ldr	r3, [r4, #4]
   ba444:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba448:	2201      	movs	r2, #1
   ba44a:	409a      	lsls	r2, r3
   ba44c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba450:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba454:	4313      	orrs	r3, r2
   ba456:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba45a:	2e02      	cmp	r6, #2
   ba45c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba460:	bf02      	ittt	eq
   ba462:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba466:	4313      	orreq	r3, r2
   ba468:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba46c:	6863      	ldr	r3, [r4, #4]
   ba46e:	f8d8 0000 	ldr.w	r0, [r8]
   ba472:	1c5a      	adds	r2, r3, #1
   ba474:	3302      	adds	r3, #2
   ba476:	6062      	str	r2, [r4, #4]
   ba478:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba47c:	f000 fb7e 	bl	bab7c <__retarget_lock_release_recursive>
   ba480:	2000      	movs	r0, #0
   ba482:	e7c6      	b.n	ba412 <__register_exitproc+0x3e>
   ba484:	2003e7ec 	.word	0x2003e7ec
   ba488:	2003e760 	.word	0x2003e760
   ba48c:	00000000 	.word	0x00000000
   ba490:	000b596d 	.word	0x000b596d
   ba494:	2003d988 	.word	0x2003d988

000ba498 <rshift>:
   ba498:	6903      	ldr	r3, [r0, #16]
   ba49a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba49e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba4a2:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba4a6:	f100 0414 	add.w	r4, r0, #20
   ba4aa:	dd45      	ble.n	ba538 <rshift+0xa0>
   ba4ac:	f011 011f 	ands.w	r1, r1, #31
   ba4b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba4b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba4b8:	d10c      	bne.n	ba4d4 <rshift+0x3c>
   ba4ba:	f100 0710 	add.w	r7, r0, #16
   ba4be:	4629      	mov	r1, r5
   ba4c0:	42b1      	cmp	r1, r6
   ba4c2:	d334      	bcc.n	ba52e <rshift+0x96>
   ba4c4:	1a9b      	subs	r3, r3, r2
   ba4c6:	009b      	lsls	r3, r3, #2
   ba4c8:	1eea      	subs	r2, r5, #3
   ba4ca:	4296      	cmp	r6, r2
   ba4cc:	bf38      	it	cc
   ba4ce:	2300      	movcc	r3, #0
   ba4d0:	4423      	add	r3, r4
   ba4d2:	e015      	b.n	ba500 <rshift+0x68>
   ba4d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba4d8:	f1c1 0820 	rsb	r8, r1, #32
   ba4dc:	40cf      	lsrs	r7, r1
   ba4de:	f105 0e04 	add.w	lr, r5, #4
   ba4e2:	46a1      	mov	r9, r4
   ba4e4:	4576      	cmp	r6, lr
   ba4e6:	46f4      	mov	ip, lr
   ba4e8:	d815      	bhi.n	ba516 <rshift+0x7e>
   ba4ea:	1a9a      	subs	r2, r3, r2
   ba4ec:	0092      	lsls	r2, r2, #2
   ba4ee:	3a04      	subs	r2, #4
   ba4f0:	3501      	adds	r5, #1
   ba4f2:	42ae      	cmp	r6, r5
   ba4f4:	bf38      	it	cc
   ba4f6:	2200      	movcc	r2, #0
   ba4f8:	18a3      	adds	r3, r4, r2
   ba4fa:	50a7      	str	r7, [r4, r2]
   ba4fc:	b107      	cbz	r7, ba500 <rshift+0x68>
   ba4fe:	3304      	adds	r3, #4
   ba500:	1b1a      	subs	r2, r3, r4
   ba502:	42a3      	cmp	r3, r4
   ba504:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba508:	bf08      	it	eq
   ba50a:	2300      	moveq	r3, #0
   ba50c:	6102      	str	r2, [r0, #16]
   ba50e:	bf08      	it	eq
   ba510:	6143      	streq	r3, [r0, #20]
   ba512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba516:	f8dc c000 	ldr.w	ip, [ip]
   ba51a:	fa0c fc08 	lsl.w	ip, ip, r8
   ba51e:	ea4c 0707 	orr.w	r7, ip, r7
   ba522:	f849 7b04 	str.w	r7, [r9], #4
   ba526:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba52a:	40cf      	lsrs	r7, r1
   ba52c:	e7da      	b.n	ba4e4 <rshift+0x4c>
   ba52e:	f851 cb04 	ldr.w	ip, [r1], #4
   ba532:	f847 cf04 	str.w	ip, [r7, #4]!
   ba536:	e7c3      	b.n	ba4c0 <rshift+0x28>
   ba538:	4623      	mov	r3, r4
   ba53a:	e7e1      	b.n	ba500 <rshift+0x68>

000ba53c <__hexdig_fun>:
   ba53c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba540:	2b09      	cmp	r3, #9
   ba542:	d802      	bhi.n	ba54a <__hexdig_fun+0xe>
   ba544:	3820      	subs	r0, #32
   ba546:	b2c0      	uxtb	r0, r0
   ba548:	4770      	bx	lr
   ba54a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba54e:	2b05      	cmp	r3, #5
   ba550:	d801      	bhi.n	ba556 <__hexdig_fun+0x1a>
   ba552:	3847      	subs	r0, #71	; 0x47
   ba554:	e7f7      	b.n	ba546 <__hexdig_fun+0xa>
   ba556:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba55a:	2b05      	cmp	r3, #5
   ba55c:	d801      	bhi.n	ba562 <__hexdig_fun+0x26>
   ba55e:	3827      	subs	r0, #39	; 0x27
   ba560:	e7f1      	b.n	ba546 <__hexdig_fun+0xa>
   ba562:	2000      	movs	r0, #0
   ba564:	4770      	bx	lr
	...

000ba568 <__gethex>:
   ba568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba56c:	ed2d 8b02 	vpush	{d8}
   ba570:	b089      	sub	sp, #36	; 0x24
   ba572:	ee08 0a10 	vmov	s16, r0
   ba576:	9304      	str	r3, [sp, #16]
   ba578:	4bb4      	ldr	r3, [pc, #720]	; (ba84c <__gethex+0x2e4>)
   ba57a:	681b      	ldr	r3, [r3, #0]
   ba57c:	9301      	str	r3, [sp, #4]
   ba57e:	4618      	mov	r0, r3
   ba580:	468b      	mov	fp, r1
   ba582:	4690      	mov	r8, r2
   ba584:	f7fe ffe7 	bl	b9556 <strlen>
   ba588:	9b01      	ldr	r3, [sp, #4]
   ba58a:	f8db 2000 	ldr.w	r2, [fp]
   ba58e:	4403      	add	r3, r0
   ba590:	4682      	mov	sl, r0
   ba592:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba596:	9305      	str	r3, [sp, #20]
   ba598:	1c93      	adds	r3, r2, #2
   ba59a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba59e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba5a2:	32fe      	adds	r2, #254	; 0xfe
   ba5a4:	18d1      	adds	r1, r2, r3
   ba5a6:	461f      	mov	r7, r3
   ba5a8:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba5ac:	9100      	str	r1, [sp, #0]
   ba5ae:	2830      	cmp	r0, #48	; 0x30
   ba5b0:	d0f8      	beq.n	ba5a4 <__gethex+0x3c>
   ba5b2:	f7ff ffc3 	bl	ba53c <__hexdig_fun>
   ba5b6:	4604      	mov	r4, r0
   ba5b8:	2800      	cmp	r0, #0
   ba5ba:	d13a      	bne.n	ba632 <__gethex+0xca>
   ba5bc:	9901      	ldr	r1, [sp, #4]
   ba5be:	4652      	mov	r2, sl
   ba5c0:	4638      	mov	r0, r7
   ba5c2:	f7fe ffd0 	bl	b9566 <strncmp>
   ba5c6:	4605      	mov	r5, r0
   ba5c8:	2800      	cmp	r0, #0
   ba5ca:	d168      	bne.n	ba69e <__gethex+0x136>
   ba5cc:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba5d0:	eb07 060a 	add.w	r6, r7, sl
   ba5d4:	f7ff ffb2 	bl	ba53c <__hexdig_fun>
   ba5d8:	2800      	cmp	r0, #0
   ba5da:	d062      	beq.n	ba6a2 <__gethex+0x13a>
   ba5dc:	4633      	mov	r3, r6
   ba5de:	7818      	ldrb	r0, [r3, #0]
   ba5e0:	2830      	cmp	r0, #48	; 0x30
   ba5e2:	461f      	mov	r7, r3
   ba5e4:	f103 0301 	add.w	r3, r3, #1
   ba5e8:	d0f9      	beq.n	ba5de <__gethex+0x76>
   ba5ea:	f7ff ffa7 	bl	ba53c <__hexdig_fun>
   ba5ee:	2301      	movs	r3, #1
   ba5f0:	fab0 f480 	clz	r4, r0
   ba5f4:	0964      	lsrs	r4, r4, #5
   ba5f6:	4635      	mov	r5, r6
   ba5f8:	9300      	str	r3, [sp, #0]
   ba5fa:	463a      	mov	r2, r7
   ba5fc:	4616      	mov	r6, r2
   ba5fe:	3201      	adds	r2, #1
   ba600:	7830      	ldrb	r0, [r6, #0]
   ba602:	f7ff ff9b 	bl	ba53c <__hexdig_fun>
   ba606:	2800      	cmp	r0, #0
   ba608:	d1f8      	bne.n	ba5fc <__gethex+0x94>
   ba60a:	9901      	ldr	r1, [sp, #4]
   ba60c:	4652      	mov	r2, sl
   ba60e:	4630      	mov	r0, r6
   ba610:	f7fe ffa9 	bl	b9566 <strncmp>
   ba614:	b980      	cbnz	r0, ba638 <__gethex+0xd0>
   ba616:	b94d      	cbnz	r5, ba62c <__gethex+0xc4>
   ba618:	eb06 050a 	add.w	r5, r6, sl
   ba61c:	462a      	mov	r2, r5
   ba61e:	4616      	mov	r6, r2
   ba620:	3201      	adds	r2, #1
   ba622:	7830      	ldrb	r0, [r6, #0]
   ba624:	f7ff ff8a 	bl	ba53c <__hexdig_fun>
   ba628:	2800      	cmp	r0, #0
   ba62a:	d1f8      	bne.n	ba61e <__gethex+0xb6>
   ba62c:	1bad      	subs	r5, r5, r6
   ba62e:	00ad      	lsls	r5, r5, #2
   ba630:	e004      	b.n	ba63c <__gethex+0xd4>
   ba632:	2400      	movs	r4, #0
   ba634:	4625      	mov	r5, r4
   ba636:	e7e0      	b.n	ba5fa <__gethex+0x92>
   ba638:	2d00      	cmp	r5, #0
   ba63a:	d1f7      	bne.n	ba62c <__gethex+0xc4>
   ba63c:	7833      	ldrb	r3, [r6, #0]
   ba63e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba642:	2b50      	cmp	r3, #80	; 0x50
   ba644:	d13b      	bne.n	ba6be <__gethex+0x156>
   ba646:	7873      	ldrb	r3, [r6, #1]
   ba648:	2b2b      	cmp	r3, #43	; 0x2b
   ba64a:	d02c      	beq.n	ba6a6 <__gethex+0x13e>
   ba64c:	2b2d      	cmp	r3, #45	; 0x2d
   ba64e:	d02e      	beq.n	ba6ae <__gethex+0x146>
   ba650:	1c71      	adds	r1, r6, #1
   ba652:	f04f 0900 	mov.w	r9, #0
   ba656:	7808      	ldrb	r0, [r1, #0]
   ba658:	f7ff ff70 	bl	ba53c <__hexdig_fun>
   ba65c:	1e43      	subs	r3, r0, #1
   ba65e:	b2db      	uxtb	r3, r3
   ba660:	2b18      	cmp	r3, #24
   ba662:	d82c      	bhi.n	ba6be <__gethex+0x156>
   ba664:	f1a0 0210 	sub.w	r2, r0, #16
   ba668:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba66c:	f7ff ff66 	bl	ba53c <__hexdig_fun>
   ba670:	1e43      	subs	r3, r0, #1
   ba672:	b2db      	uxtb	r3, r3
   ba674:	2b18      	cmp	r3, #24
   ba676:	d91d      	bls.n	ba6b4 <__gethex+0x14c>
   ba678:	f1b9 0f00 	cmp.w	r9, #0
   ba67c:	d000      	beq.n	ba680 <__gethex+0x118>
   ba67e:	4252      	negs	r2, r2
   ba680:	4415      	add	r5, r2
   ba682:	f8cb 1000 	str.w	r1, [fp]
   ba686:	b1e4      	cbz	r4, ba6c2 <__gethex+0x15a>
   ba688:	9b00      	ldr	r3, [sp, #0]
   ba68a:	2b00      	cmp	r3, #0
   ba68c:	bf14      	ite	ne
   ba68e:	2700      	movne	r7, #0
   ba690:	2706      	moveq	r7, #6
   ba692:	4638      	mov	r0, r7
   ba694:	b009      	add	sp, #36	; 0x24
   ba696:	ecbd 8b02 	vpop	{d8}
   ba69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba69e:	463e      	mov	r6, r7
   ba6a0:	4625      	mov	r5, r4
   ba6a2:	2401      	movs	r4, #1
   ba6a4:	e7ca      	b.n	ba63c <__gethex+0xd4>
   ba6a6:	f04f 0900 	mov.w	r9, #0
   ba6aa:	1cb1      	adds	r1, r6, #2
   ba6ac:	e7d3      	b.n	ba656 <__gethex+0xee>
   ba6ae:	f04f 0901 	mov.w	r9, #1
   ba6b2:	e7fa      	b.n	ba6aa <__gethex+0x142>
   ba6b4:	230a      	movs	r3, #10
   ba6b6:	fb03 0202 	mla	r2, r3, r2, r0
   ba6ba:	3a10      	subs	r2, #16
   ba6bc:	e7d4      	b.n	ba668 <__gethex+0x100>
   ba6be:	4631      	mov	r1, r6
   ba6c0:	e7df      	b.n	ba682 <__gethex+0x11a>
   ba6c2:	1bf3      	subs	r3, r6, r7
   ba6c4:	3b01      	subs	r3, #1
   ba6c6:	4621      	mov	r1, r4
   ba6c8:	2b07      	cmp	r3, #7
   ba6ca:	dc0b      	bgt.n	ba6e4 <__gethex+0x17c>
   ba6cc:	ee18 0a10 	vmov	r0, s16
   ba6d0:	f000 fa68 	bl	baba4 <_Balloc>
   ba6d4:	4604      	mov	r4, r0
   ba6d6:	b940      	cbnz	r0, ba6ea <__gethex+0x182>
   ba6d8:	4b5d      	ldr	r3, [pc, #372]	; (ba850 <__gethex+0x2e8>)
   ba6da:	4602      	mov	r2, r0
   ba6dc:	21de      	movs	r1, #222	; 0xde
   ba6de:	485d      	ldr	r0, [pc, #372]	; (ba854 <__gethex+0x2ec>)
   ba6e0:	f7fb f98c 	bl	b59fc <__assert_func>
   ba6e4:	3101      	adds	r1, #1
   ba6e6:	105b      	asrs	r3, r3, #1
   ba6e8:	e7ee      	b.n	ba6c8 <__gethex+0x160>
   ba6ea:	f100 0914 	add.w	r9, r0, #20
   ba6ee:	f04f 0b00 	mov.w	fp, #0
   ba6f2:	f1ca 0301 	rsb	r3, sl, #1
   ba6f6:	f8cd 9008 	str.w	r9, [sp, #8]
   ba6fa:	f8cd b000 	str.w	fp, [sp]
   ba6fe:	9306      	str	r3, [sp, #24]
   ba700:	42b7      	cmp	r7, r6
   ba702:	d340      	bcc.n	ba786 <__gethex+0x21e>
   ba704:	9802      	ldr	r0, [sp, #8]
   ba706:	9b00      	ldr	r3, [sp, #0]
   ba708:	f840 3b04 	str.w	r3, [r0], #4
   ba70c:	eba0 0009 	sub.w	r0, r0, r9
   ba710:	1080      	asrs	r0, r0, #2
   ba712:	0146      	lsls	r6, r0, #5
   ba714:	6120      	str	r0, [r4, #16]
   ba716:	4618      	mov	r0, r3
   ba718:	f000 fb36 	bl	bad88 <__hi0bits>
   ba71c:	1a30      	subs	r0, r6, r0
   ba71e:	f8d8 6000 	ldr.w	r6, [r8]
   ba722:	42b0      	cmp	r0, r6
   ba724:	dd63      	ble.n	ba7ee <__gethex+0x286>
   ba726:	1b87      	subs	r7, r0, r6
   ba728:	4639      	mov	r1, r7
   ba72a:	4620      	mov	r0, r4
   ba72c:	f000 feda 	bl	bb4e4 <__any_on>
   ba730:	4682      	mov	sl, r0
   ba732:	b1a8      	cbz	r0, ba760 <__gethex+0x1f8>
   ba734:	1e7b      	subs	r3, r7, #1
   ba736:	1159      	asrs	r1, r3, #5
   ba738:	f003 021f 	and.w	r2, r3, #31
   ba73c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba740:	f04f 0a01 	mov.w	sl, #1
   ba744:	fa0a f202 	lsl.w	r2, sl, r2
   ba748:	420a      	tst	r2, r1
   ba74a:	d009      	beq.n	ba760 <__gethex+0x1f8>
   ba74c:	4553      	cmp	r3, sl
   ba74e:	dd05      	ble.n	ba75c <__gethex+0x1f4>
   ba750:	1eb9      	subs	r1, r7, #2
   ba752:	4620      	mov	r0, r4
   ba754:	f000 fec6 	bl	bb4e4 <__any_on>
   ba758:	2800      	cmp	r0, #0
   ba75a:	d145      	bne.n	ba7e8 <__gethex+0x280>
   ba75c:	f04f 0a02 	mov.w	sl, #2
   ba760:	4639      	mov	r1, r7
   ba762:	4620      	mov	r0, r4
   ba764:	f7ff fe98 	bl	ba498 <rshift>
   ba768:	443d      	add	r5, r7
   ba76a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba76e:	42ab      	cmp	r3, r5
   ba770:	da4c      	bge.n	ba80c <__gethex+0x2a4>
   ba772:	ee18 0a10 	vmov	r0, s16
   ba776:	4621      	mov	r1, r4
   ba778:	f000 fa54 	bl	bac24 <_Bfree>
   ba77c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba77e:	2300      	movs	r3, #0
   ba780:	6013      	str	r3, [r2, #0]
   ba782:	27a3      	movs	r7, #163	; 0xa3
   ba784:	e785      	b.n	ba692 <__gethex+0x12a>
   ba786:	1e73      	subs	r3, r6, #1
   ba788:	9a05      	ldr	r2, [sp, #20]
   ba78a:	9303      	str	r3, [sp, #12]
   ba78c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba790:	4293      	cmp	r3, r2
   ba792:	d019      	beq.n	ba7c8 <__gethex+0x260>
   ba794:	f1bb 0f20 	cmp.w	fp, #32
   ba798:	d107      	bne.n	ba7aa <__gethex+0x242>
   ba79a:	9b02      	ldr	r3, [sp, #8]
   ba79c:	9a00      	ldr	r2, [sp, #0]
   ba79e:	f843 2b04 	str.w	r2, [r3], #4
   ba7a2:	9302      	str	r3, [sp, #8]
   ba7a4:	2300      	movs	r3, #0
   ba7a6:	9300      	str	r3, [sp, #0]
   ba7a8:	469b      	mov	fp, r3
   ba7aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba7ae:	f7ff fec5 	bl	ba53c <__hexdig_fun>
   ba7b2:	9b00      	ldr	r3, [sp, #0]
   ba7b4:	f000 000f 	and.w	r0, r0, #15
   ba7b8:	fa00 f00b 	lsl.w	r0, r0, fp
   ba7bc:	4303      	orrs	r3, r0
   ba7be:	9300      	str	r3, [sp, #0]
   ba7c0:	f10b 0b04 	add.w	fp, fp, #4
   ba7c4:	9b03      	ldr	r3, [sp, #12]
   ba7c6:	e00d      	b.n	ba7e4 <__gethex+0x27c>
   ba7c8:	9b03      	ldr	r3, [sp, #12]
   ba7ca:	9a06      	ldr	r2, [sp, #24]
   ba7cc:	4413      	add	r3, r2
   ba7ce:	42bb      	cmp	r3, r7
   ba7d0:	d3e0      	bcc.n	ba794 <__gethex+0x22c>
   ba7d2:	4618      	mov	r0, r3
   ba7d4:	9901      	ldr	r1, [sp, #4]
   ba7d6:	9307      	str	r3, [sp, #28]
   ba7d8:	4652      	mov	r2, sl
   ba7da:	f7fe fec4 	bl	b9566 <strncmp>
   ba7de:	9b07      	ldr	r3, [sp, #28]
   ba7e0:	2800      	cmp	r0, #0
   ba7e2:	d1d7      	bne.n	ba794 <__gethex+0x22c>
   ba7e4:	461e      	mov	r6, r3
   ba7e6:	e78b      	b.n	ba700 <__gethex+0x198>
   ba7e8:	f04f 0a03 	mov.w	sl, #3
   ba7ec:	e7b8      	b.n	ba760 <__gethex+0x1f8>
   ba7ee:	da0a      	bge.n	ba806 <__gethex+0x29e>
   ba7f0:	1a37      	subs	r7, r6, r0
   ba7f2:	4621      	mov	r1, r4
   ba7f4:	ee18 0a10 	vmov	r0, s16
   ba7f8:	463a      	mov	r2, r7
   ba7fa:	f000 fc2f 	bl	bb05c <__lshift>
   ba7fe:	1bed      	subs	r5, r5, r7
   ba800:	4604      	mov	r4, r0
   ba802:	f100 0914 	add.w	r9, r0, #20
   ba806:	f04f 0a00 	mov.w	sl, #0
   ba80a:	e7ae      	b.n	ba76a <__gethex+0x202>
   ba80c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba810:	42a8      	cmp	r0, r5
   ba812:	dd72      	ble.n	ba8fa <__gethex+0x392>
   ba814:	1b45      	subs	r5, r0, r5
   ba816:	42ae      	cmp	r6, r5
   ba818:	dc36      	bgt.n	ba888 <__gethex+0x320>
   ba81a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba81e:	2b02      	cmp	r3, #2
   ba820:	d02a      	beq.n	ba878 <__gethex+0x310>
   ba822:	2b03      	cmp	r3, #3
   ba824:	d02c      	beq.n	ba880 <__gethex+0x318>
   ba826:	2b01      	cmp	r3, #1
   ba828:	d11c      	bne.n	ba864 <__gethex+0x2fc>
   ba82a:	42ae      	cmp	r6, r5
   ba82c:	d11a      	bne.n	ba864 <__gethex+0x2fc>
   ba82e:	2e01      	cmp	r6, #1
   ba830:	d112      	bne.n	ba858 <__gethex+0x2f0>
   ba832:	9a04      	ldr	r2, [sp, #16]
   ba834:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba838:	6013      	str	r3, [r2, #0]
   ba83a:	2301      	movs	r3, #1
   ba83c:	6123      	str	r3, [r4, #16]
   ba83e:	f8c9 3000 	str.w	r3, [r9]
   ba842:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba844:	2762      	movs	r7, #98	; 0x62
   ba846:	601c      	str	r4, [r3, #0]
   ba848:	e723      	b.n	ba692 <__gethex+0x12a>
   ba84a:	bf00      	nop
   ba84c:	000bc320 	.word	0x000bc320
   ba850:	000bc288 	.word	0x000bc288
   ba854:	000bc299 	.word	0x000bc299
   ba858:	1e71      	subs	r1, r6, #1
   ba85a:	4620      	mov	r0, r4
   ba85c:	f000 fe42 	bl	bb4e4 <__any_on>
   ba860:	2800      	cmp	r0, #0
   ba862:	d1e6      	bne.n	ba832 <__gethex+0x2ca>
   ba864:	ee18 0a10 	vmov	r0, s16
   ba868:	4621      	mov	r1, r4
   ba86a:	f000 f9db 	bl	bac24 <_Bfree>
   ba86e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba870:	2300      	movs	r3, #0
   ba872:	6013      	str	r3, [r2, #0]
   ba874:	2750      	movs	r7, #80	; 0x50
   ba876:	e70c      	b.n	ba692 <__gethex+0x12a>
   ba878:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba87a:	2b00      	cmp	r3, #0
   ba87c:	d1f2      	bne.n	ba864 <__gethex+0x2fc>
   ba87e:	e7d8      	b.n	ba832 <__gethex+0x2ca>
   ba880:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba882:	2b00      	cmp	r3, #0
   ba884:	d1d5      	bne.n	ba832 <__gethex+0x2ca>
   ba886:	e7ed      	b.n	ba864 <__gethex+0x2fc>
   ba888:	1e6f      	subs	r7, r5, #1
   ba88a:	f1ba 0f00 	cmp.w	sl, #0
   ba88e:	d131      	bne.n	ba8f4 <__gethex+0x38c>
   ba890:	b127      	cbz	r7, ba89c <__gethex+0x334>
   ba892:	4639      	mov	r1, r7
   ba894:	4620      	mov	r0, r4
   ba896:	f000 fe25 	bl	bb4e4 <__any_on>
   ba89a:	4682      	mov	sl, r0
   ba89c:	117b      	asrs	r3, r7, #5
   ba89e:	2101      	movs	r1, #1
   ba8a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba8a4:	f007 071f 	and.w	r7, r7, #31
   ba8a8:	fa01 f707 	lsl.w	r7, r1, r7
   ba8ac:	421f      	tst	r7, r3
   ba8ae:	4629      	mov	r1, r5
   ba8b0:	4620      	mov	r0, r4
   ba8b2:	bf18      	it	ne
   ba8b4:	f04a 0a02 	orrne.w	sl, sl, #2
   ba8b8:	1b76      	subs	r6, r6, r5
   ba8ba:	f7ff fded 	bl	ba498 <rshift>
   ba8be:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba8c2:	2702      	movs	r7, #2
   ba8c4:	f1ba 0f00 	cmp.w	sl, #0
   ba8c8:	d048      	beq.n	ba95c <__gethex+0x3f4>
   ba8ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba8ce:	2b02      	cmp	r3, #2
   ba8d0:	d015      	beq.n	ba8fe <__gethex+0x396>
   ba8d2:	2b03      	cmp	r3, #3
   ba8d4:	d017      	beq.n	ba906 <__gethex+0x39e>
   ba8d6:	2b01      	cmp	r3, #1
   ba8d8:	d109      	bne.n	ba8ee <__gethex+0x386>
   ba8da:	f01a 0f02 	tst.w	sl, #2
   ba8de:	d006      	beq.n	ba8ee <__gethex+0x386>
   ba8e0:	f8d9 0000 	ldr.w	r0, [r9]
   ba8e4:	ea4a 0a00 	orr.w	sl, sl, r0
   ba8e8:	f01a 0f01 	tst.w	sl, #1
   ba8ec:	d10e      	bne.n	ba90c <__gethex+0x3a4>
   ba8ee:	f047 0710 	orr.w	r7, r7, #16
   ba8f2:	e033      	b.n	ba95c <__gethex+0x3f4>
   ba8f4:	f04f 0a01 	mov.w	sl, #1
   ba8f8:	e7d0      	b.n	ba89c <__gethex+0x334>
   ba8fa:	2701      	movs	r7, #1
   ba8fc:	e7e2      	b.n	ba8c4 <__gethex+0x35c>
   ba8fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba900:	f1c3 0301 	rsb	r3, r3, #1
   ba904:	9315      	str	r3, [sp, #84]	; 0x54
   ba906:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba908:	2b00      	cmp	r3, #0
   ba90a:	d0f0      	beq.n	ba8ee <__gethex+0x386>
   ba90c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba910:	f104 0314 	add.w	r3, r4, #20
   ba914:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba918:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba91c:	f04f 0c00 	mov.w	ip, #0
   ba920:	4618      	mov	r0, r3
   ba922:	f853 2b04 	ldr.w	r2, [r3], #4
   ba926:	f1b2 3fff 	cmp.w	r2, #4294967295
   ba92a:	d01c      	beq.n	ba966 <__gethex+0x3fe>
   ba92c:	3201      	adds	r2, #1
   ba92e:	6002      	str	r2, [r0, #0]
   ba930:	2f02      	cmp	r7, #2
   ba932:	f104 0314 	add.w	r3, r4, #20
   ba936:	d13f      	bne.n	ba9b8 <__gethex+0x450>
   ba938:	f8d8 2000 	ldr.w	r2, [r8]
   ba93c:	3a01      	subs	r2, #1
   ba93e:	42b2      	cmp	r2, r6
   ba940:	d10a      	bne.n	ba958 <__gethex+0x3f0>
   ba942:	1171      	asrs	r1, r6, #5
   ba944:	2201      	movs	r2, #1
   ba946:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba94a:	f006 061f 	and.w	r6, r6, #31
   ba94e:	fa02 f606 	lsl.w	r6, r2, r6
   ba952:	421e      	tst	r6, r3
   ba954:	bf18      	it	ne
   ba956:	4617      	movne	r7, r2
   ba958:	f047 0720 	orr.w	r7, r7, #32
   ba95c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba95e:	601c      	str	r4, [r3, #0]
   ba960:	9b04      	ldr	r3, [sp, #16]
   ba962:	601d      	str	r5, [r3, #0]
   ba964:	e695      	b.n	ba692 <__gethex+0x12a>
   ba966:	4299      	cmp	r1, r3
   ba968:	f843 cc04 	str.w	ip, [r3, #-4]
   ba96c:	d8d8      	bhi.n	ba920 <__gethex+0x3b8>
   ba96e:	68a3      	ldr	r3, [r4, #8]
   ba970:	459b      	cmp	fp, r3
   ba972:	db19      	blt.n	ba9a8 <__gethex+0x440>
   ba974:	6861      	ldr	r1, [r4, #4]
   ba976:	ee18 0a10 	vmov	r0, s16
   ba97a:	3101      	adds	r1, #1
   ba97c:	f000 f912 	bl	baba4 <_Balloc>
   ba980:	4681      	mov	r9, r0
   ba982:	b918      	cbnz	r0, ba98c <__gethex+0x424>
   ba984:	4b1a      	ldr	r3, [pc, #104]	; (ba9f0 <__gethex+0x488>)
   ba986:	4602      	mov	r2, r0
   ba988:	2184      	movs	r1, #132	; 0x84
   ba98a:	e6a8      	b.n	ba6de <__gethex+0x176>
   ba98c:	6922      	ldr	r2, [r4, #16]
   ba98e:	3202      	adds	r2, #2
   ba990:	f104 010c 	add.w	r1, r4, #12
   ba994:	0092      	lsls	r2, r2, #2
   ba996:	300c      	adds	r0, #12
   ba998:	f7fe fd3f 	bl	b941a <memcpy>
   ba99c:	4621      	mov	r1, r4
   ba99e:	ee18 0a10 	vmov	r0, s16
   ba9a2:	f000 f93f 	bl	bac24 <_Bfree>
   ba9a6:	464c      	mov	r4, r9
   ba9a8:	6923      	ldr	r3, [r4, #16]
   ba9aa:	1c5a      	adds	r2, r3, #1
   ba9ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba9b0:	6122      	str	r2, [r4, #16]
   ba9b2:	2201      	movs	r2, #1
   ba9b4:	615a      	str	r2, [r3, #20]
   ba9b6:	e7bb      	b.n	ba930 <__gethex+0x3c8>
   ba9b8:	6922      	ldr	r2, [r4, #16]
   ba9ba:	455a      	cmp	r2, fp
   ba9bc:	dd0b      	ble.n	ba9d6 <__gethex+0x46e>
   ba9be:	2101      	movs	r1, #1
   ba9c0:	4620      	mov	r0, r4
   ba9c2:	f7ff fd69 	bl	ba498 <rshift>
   ba9c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba9ca:	3501      	adds	r5, #1
   ba9cc:	42ab      	cmp	r3, r5
   ba9ce:	f6ff aed0 	blt.w	ba772 <__gethex+0x20a>
   ba9d2:	2701      	movs	r7, #1
   ba9d4:	e7c0      	b.n	ba958 <__gethex+0x3f0>
   ba9d6:	f016 061f 	ands.w	r6, r6, #31
   ba9da:	d0fa      	beq.n	ba9d2 <__gethex+0x46a>
   ba9dc:	4453      	add	r3, sl
   ba9de:	f1c6 0620 	rsb	r6, r6, #32
   ba9e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba9e6:	f000 f9cf 	bl	bad88 <__hi0bits>
   ba9ea:	42b0      	cmp	r0, r6
   ba9ec:	dbe7      	blt.n	ba9be <__gethex+0x456>
   ba9ee:	e7f0      	b.n	ba9d2 <__gethex+0x46a>
   ba9f0:	000bc288 	.word	0x000bc288

000ba9f4 <L_shift>:
   ba9f4:	f1c2 0208 	rsb	r2, r2, #8
   ba9f8:	0092      	lsls	r2, r2, #2
   ba9fa:	b570      	push	{r4, r5, r6, lr}
   ba9fc:	f1c2 0620 	rsb	r6, r2, #32
   baa00:	6843      	ldr	r3, [r0, #4]
   baa02:	6804      	ldr	r4, [r0, #0]
   baa04:	fa03 f506 	lsl.w	r5, r3, r6
   baa08:	432c      	orrs	r4, r5
   baa0a:	40d3      	lsrs	r3, r2
   baa0c:	6004      	str	r4, [r0, #0]
   baa0e:	f840 3f04 	str.w	r3, [r0, #4]!
   baa12:	4288      	cmp	r0, r1
   baa14:	d3f4      	bcc.n	baa00 <L_shift+0xc>
   baa16:	bd70      	pop	{r4, r5, r6, pc}

000baa18 <__match>:
   baa18:	b530      	push	{r4, r5, lr}
   baa1a:	6803      	ldr	r3, [r0, #0]
   baa1c:	3301      	adds	r3, #1
   baa1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   baa22:	b914      	cbnz	r4, baa2a <__match+0x12>
   baa24:	6003      	str	r3, [r0, #0]
   baa26:	2001      	movs	r0, #1
   baa28:	bd30      	pop	{r4, r5, pc}
   baa2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   baa2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   baa32:	2d19      	cmp	r5, #25
   baa34:	bf98      	it	ls
   baa36:	3220      	addls	r2, #32
   baa38:	42a2      	cmp	r2, r4
   baa3a:	d0f0      	beq.n	baa1e <__match+0x6>
   baa3c:	2000      	movs	r0, #0
   baa3e:	e7f3      	b.n	baa28 <__match+0x10>

000baa40 <__hexnan>:
   baa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa44:	680b      	ldr	r3, [r1, #0]
   baa46:	115e      	asrs	r6, r3, #5
   baa48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   baa4c:	f013 031f 	ands.w	r3, r3, #31
   baa50:	b087      	sub	sp, #28
   baa52:	bf18      	it	ne
   baa54:	3604      	addne	r6, #4
   baa56:	2500      	movs	r5, #0
   baa58:	1f37      	subs	r7, r6, #4
   baa5a:	4690      	mov	r8, r2
   baa5c:	6802      	ldr	r2, [r0, #0]
   baa5e:	9301      	str	r3, [sp, #4]
   baa60:	4682      	mov	sl, r0
   baa62:	f846 5c04 	str.w	r5, [r6, #-4]
   baa66:	46b9      	mov	r9, r7
   baa68:	463c      	mov	r4, r7
   baa6a:	9502      	str	r5, [sp, #8]
   baa6c:	46ab      	mov	fp, r5
   baa6e:	7851      	ldrb	r1, [r2, #1]
   baa70:	1c53      	adds	r3, r2, #1
   baa72:	9303      	str	r3, [sp, #12]
   baa74:	b341      	cbz	r1, baac8 <__hexnan+0x88>
   baa76:	4608      	mov	r0, r1
   baa78:	9205      	str	r2, [sp, #20]
   baa7a:	9104      	str	r1, [sp, #16]
   baa7c:	f7ff fd5e 	bl	ba53c <__hexdig_fun>
   baa80:	2800      	cmp	r0, #0
   baa82:	d14f      	bne.n	bab24 <__hexnan+0xe4>
   baa84:	9904      	ldr	r1, [sp, #16]
   baa86:	9a05      	ldr	r2, [sp, #20]
   baa88:	2920      	cmp	r1, #32
   baa8a:	d818      	bhi.n	baabe <__hexnan+0x7e>
   baa8c:	9b02      	ldr	r3, [sp, #8]
   baa8e:	459b      	cmp	fp, r3
   baa90:	dd13      	ble.n	baaba <__hexnan+0x7a>
   baa92:	454c      	cmp	r4, r9
   baa94:	d206      	bcs.n	baaa4 <__hexnan+0x64>
   baa96:	2d07      	cmp	r5, #7
   baa98:	dc04      	bgt.n	baaa4 <__hexnan+0x64>
   baa9a:	462a      	mov	r2, r5
   baa9c:	4649      	mov	r1, r9
   baa9e:	4620      	mov	r0, r4
   baaa0:	f7ff ffa8 	bl	ba9f4 <L_shift>
   baaa4:	4544      	cmp	r4, r8
   baaa6:	d950      	bls.n	bab4a <__hexnan+0x10a>
   baaa8:	2300      	movs	r3, #0
   baaaa:	f1a4 0904 	sub.w	r9, r4, #4
   baaae:	f844 3c04 	str.w	r3, [r4, #-4]
   baab2:	f8cd b008 	str.w	fp, [sp, #8]
   baab6:	464c      	mov	r4, r9
   baab8:	461d      	mov	r5, r3
   baaba:	9a03      	ldr	r2, [sp, #12]
   baabc:	e7d7      	b.n	baa6e <__hexnan+0x2e>
   baabe:	2929      	cmp	r1, #41	; 0x29
   baac0:	d156      	bne.n	bab70 <__hexnan+0x130>
   baac2:	3202      	adds	r2, #2
   baac4:	f8ca 2000 	str.w	r2, [sl]
   baac8:	f1bb 0f00 	cmp.w	fp, #0
   baacc:	d050      	beq.n	bab70 <__hexnan+0x130>
   baace:	454c      	cmp	r4, r9
   baad0:	d206      	bcs.n	baae0 <__hexnan+0xa0>
   baad2:	2d07      	cmp	r5, #7
   baad4:	dc04      	bgt.n	baae0 <__hexnan+0xa0>
   baad6:	462a      	mov	r2, r5
   baad8:	4649      	mov	r1, r9
   baada:	4620      	mov	r0, r4
   baadc:	f7ff ff8a 	bl	ba9f4 <L_shift>
   baae0:	4544      	cmp	r4, r8
   baae2:	d934      	bls.n	bab4e <__hexnan+0x10e>
   baae4:	f1a8 0204 	sub.w	r2, r8, #4
   baae8:	4623      	mov	r3, r4
   baaea:	f853 1b04 	ldr.w	r1, [r3], #4
   baaee:	f842 1f04 	str.w	r1, [r2, #4]!
   baaf2:	429f      	cmp	r7, r3
   baaf4:	d2f9      	bcs.n	baaea <__hexnan+0xaa>
   baaf6:	1b3b      	subs	r3, r7, r4
   baaf8:	f023 0303 	bic.w	r3, r3, #3
   baafc:	3304      	adds	r3, #4
   baafe:	3401      	adds	r4, #1
   bab00:	3e03      	subs	r6, #3
   bab02:	42b4      	cmp	r4, r6
   bab04:	bf88      	it	hi
   bab06:	2304      	movhi	r3, #4
   bab08:	4443      	add	r3, r8
   bab0a:	2200      	movs	r2, #0
   bab0c:	f843 2b04 	str.w	r2, [r3], #4
   bab10:	429f      	cmp	r7, r3
   bab12:	d2fb      	bcs.n	bab0c <__hexnan+0xcc>
   bab14:	683b      	ldr	r3, [r7, #0]
   bab16:	b91b      	cbnz	r3, bab20 <__hexnan+0xe0>
   bab18:	4547      	cmp	r7, r8
   bab1a:	d127      	bne.n	bab6c <__hexnan+0x12c>
   bab1c:	2301      	movs	r3, #1
   bab1e:	603b      	str	r3, [r7, #0]
   bab20:	2005      	movs	r0, #5
   bab22:	e026      	b.n	bab72 <__hexnan+0x132>
   bab24:	3501      	adds	r5, #1
   bab26:	2d08      	cmp	r5, #8
   bab28:	f10b 0b01 	add.w	fp, fp, #1
   bab2c:	dd06      	ble.n	bab3c <__hexnan+0xfc>
   bab2e:	4544      	cmp	r4, r8
   bab30:	d9c3      	bls.n	baaba <__hexnan+0x7a>
   bab32:	2300      	movs	r3, #0
   bab34:	f844 3c04 	str.w	r3, [r4, #-4]
   bab38:	2501      	movs	r5, #1
   bab3a:	3c04      	subs	r4, #4
   bab3c:	6822      	ldr	r2, [r4, #0]
   bab3e:	f000 000f 	and.w	r0, r0, #15
   bab42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bab46:	6022      	str	r2, [r4, #0]
   bab48:	e7b7      	b.n	baaba <__hexnan+0x7a>
   bab4a:	2508      	movs	r5, #8
   bab4c:	e7b5      	b.n	baaba <__hexnan+0x7a>
   bab4e:	9b01      	ldr	r3, [sp, #4]
   bab50:	2b00      	cmp	r3, #0
   bab52:	d0df      	beq.n	bab14 <__hexnan+0xd4>
   bab54:	f04f 32ff 	mov.w	r2, #4294967295
   bab58:	f1c3 0320 	rsb	r3, r3, #32
   bab5c:	fa22 f303 	lsr.w	r3, r2, r3
   bab60:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bab64:	401a      	ands	r2, r3
   bab66:	f846 2c04 	str.w	r2, [r6, #-4]
   bab6a:	e7d3      	b.n	bab14 <__hexnan+0xd4>
   bab6c:	3f04      	subs	r7, #4
   bab6e:	e7d1      	b.n	bab14 <__hexnan+0xd4>
   bab70:	2004      	movs	r0, #4
   bab72:	b007      	add	sp, #28
   bab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bab78 <__retarget_lock_acquire_recursive>:
   bab78:	4770      	bx	lr

000bab7a <__retarget_lock_release>:
   bab7a:	4770      	bx	lr

000bab7c <__retarget_lock_release_recursive>:
   bab7c:	4770      	bx	lr

000bab7e <__ascii_mbtowc>:
   bab7e:	b082      	sub	sp, #8
   bab80:	b901      	cbnz	r1, bab84 <__ascii_mbtowc+0x6>
   bab82:	a901      	add	r1, sp, #4
   bab84:	b142      	cbz	r2, bab98 <__ascii_mbtowc+0x1a>
   bab86:	b14b      	cbz	r3, bab9c <__ascii_mbtowc+0x1e>
   bab88:	7813      	ldrb	r3, [r2, #0]
   bab8a:	600b      	str	r3, [r1, #0]
   bab8c:	7812      	ldrb	r2, [r2, #0]
   bab8e:	1e10      	subs	r0, r2, #0
   bab90:	bf18      	it	ne
   bab92:	2001      	movne	r0, #1
   bab94:	b002      	add	sp, #8
   bab96:	4770      	bx	lr
   bab98:	4610      	mov	r0, r2
   bab9a:	e7fb      	b.n	bab94 <__ascii_mbtowc+0x16>
   bab9c:	f06f 0001 	mvn.w	r0, #1
   baba0:	e7f8      	b.n	bab94 <__ascii_mbtowc+0x16>
	...

000baba4 <_Balloc>:
   baba4:	b570      	push	{r4, r5, r6, lr}
   baba6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   baba8:	4604      	mov	r4, r0
   babaa:	460d      	mov	r5, r1
   babac:	b976      	cbnz	r6, babcc <_Balloc+0x28>
   babae:	2010      	movs	r0, #16
   babb0:	f7fa fedc 	bl	b596c <malloc>
   babb4:	4602      	mov	r2, r0
   babb6:	6260      	str	r0, [r4, #36]	; 0x24
   babb8:	b920      	cbnz	r0, babc4 <_Balloc+0x20>
   babba:	4b18      	ldr	r3, [pc, #96]	; (bac1c <_Balloc+0x78>)
   babbc:	4818      	ldr	r0, [pc, #96]	; (bac20 <_Balloc+0x7c>)
   babbe:	2166      	movs	r1, #102	; 0x66
   babc0:	f7fa ff1c 	bl	b59fc <__assert_func>
   babc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   babc8:	6006      	str	r6, [r0, #0]
   babca:	60c6      	str	r6, [r0, #12]
   babcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   babce:	68f3      	ldr	r3, [r6, #12]
   babd0:	b183      	cbz	r3, babf4 <_Balloc+0x50>
   babd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   babd4:	68db      	ldr	r3, [r3, #12]
   babd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   babda:	b9b8      	cbnz	r0, bac0c <_Balloc+0x68>
   babdc:	2101      	movs	r1, #1
   babde:	fa01 f605 	lsl.w	r6, r1, r5
   babe2:	1d72      	adds	r2, r6, #5
   babe4:	0092      	lsls	r2, r2, #2
   babe6:	4620      	mov	r0, r4
   babe8:	f000 fc9d 	bl	bb526 <_calloc_r>
   babec:	b160      	cbz	r0, bac08 <_Balloc+0x64>
   babee:	e9c0 5601 	strd	r5, r6, [r0, #4]
   babf2:	e00e      	b.n	bac12 <_Balloc+0x6e>
   babf4:	2221      	movs	r2, #33	; 0x21
   babf6:	2104      	movs	r1, #4
   babf8:	4620      	mov	r0, r4
   babfa:	f000 fc94 	bl	bb526 <_calloc_r>
   babfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bac00:	60f0      	str	r0, [r6, #12]
   bac02:	68db      	ldr	r3, [r3, #12]
   bac04:	2b00      	cmp	r3, #0
   bac06:	d1e4      	bne.n	babd2 <_Balloc+0x2e>
   bac08:	2000      	movs	r0, #0
   bac0a:	bd70      	pop	{r4, r5, r6, pc}
   bac0c:	6802      	ldr	r2, [r0, #0]
   bac0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bac12:	2300      	movs	r3, #0
   bac14:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bac18:	e7f7      	b.n	bac0a <_Balloc+0x66>
   bac1a:	bf00      	nop
   bac1c:	000bc011 	.word	0x000bc011
   bac20:	000bc334 	.word	0x000bc334

000bac24 <_Bfree>:
   bac24:	b570      	push	{r4, r5, r6, lr}
   bac26:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bac28:	4605      	mov	r5, r0
   bac2a:	460c      	mov	r4, r1
   bac2c:	b976      	cbnz	r6, bac4c <_Bfree+0x28>
   bac2e:	2010      	movs	r0, #16
   bac30:	f7fa fe9c 	bl	b596c <malloc>
   bac34:	4602      	mov	r2, r0
   bac36:	6268      	str	r0, [r5, #36]	; 0x24
   bac38:	b920      	cbnz	r0, bac44 <_Bfree+0x20>
   bac3a:	4b09      	ldr	r3, [pc, #36]	; (bac60 <_Bfree+0x3c>)
   bac3c:	4809      	ldr	r0, [pc, #36]	; (bac64 <_Bfree+0x40>)
   bac3e:	218a      	movs	r1, #138	; 0x8a
   bac40:	f7fa fedc 	bl	b59fc <__assert_func>
   bac44:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bac48:	6006      	str	r6, [r0, #0]
   bac4a:	60c6      	str	r6, [r0, #12]
   bac4c:	b13c      	cbz	r4, bac5e <_Bfree+0x3a>
   bac4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bac50:	6862      	ldr	r2, [r4, #4]
   bac52:	68db      	ldr	r3, [r3, #12]
   bac54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bac58:	6021      	str	r1, [r4, #0]
   bac5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bac5e:	bd70      	pop	{r4, r5, r6, pc}
   bac60:	000bc011 	.word	0x000bc011
   bac64:	000bc334 	.word	0x000bc334

000bac68 <__multadd>:
   bac68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bac6c:	690d      	ldr	r5, [r1, #16]
   bac6e:	4607      	mov	r7, r0
   bac70:	460c      	mov	r4, r1
   bac72:	461e      	mov	r6, r3
   bac74:	f101 0c14 	add.w	ip, r1, #20
   bac78:	2000      	movs	r0, #0
   bac7a:	f8dc 3000 	ldr.w	r3, [ip]
   bac7e:	b299      	uxth	r1, r3
   bac80:	fb02 6101 	mla	r1, r2, r1, r6
   bac84:	0c1e      	lsrs	r6, r3, #16
   bac86:	0c0b      	lsrs	r3, r1, #16
   bac88:	fb02 3306 	mla	r3, r2, r6, r3
   bac8c:	b289      	uxth	r1, r1
   bac8e:	3001      	adds	r0, #1
   bac90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bac94:	4285      	cmp	r5, r0
   bac96:	f84c 1b04 	str.w	r1, [ip], #4
   bac9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bac9e:	dcec      	bgt.n	bac7a <__multadd+0x12>
   baca0:	b30e      	cbz	r6, bace6 <__multadd+0x7e>
   baca2:	68a3      	ldr	r3, [r4, #8]
   baca4:	42ab      	cmp	r3, r5
   baca6:	dc19      	bgt.n	bacdc <__multadd+0x74>
   baca8:	6861      	ldr	r1, [r4, #4]
   bacaa:	4638      	mov	r0, r7
   bacac:	3101      	adds	r1, #1
   bacae:	f7ff ff79 	bl	baba4 <_Balloc>
   bacb2:	4680      	mov	r8, r0
   bacb4:	b928      	cbnz	r0, bacc2 <__multadd+0x5a>
   bacb6:	4602      	mov	r2, r0
   bacb8:	4b0c      	ldr	r3, [pc, #48]	; (bacec <__multadd+0x84>)
   bacba:	480d      	ldr	r0, [pc, #52]	; (bacf0 <__multadd+0x88>)
   bacbc:	21b5      	movs	r1, #181	; 0xb5
   bacbe:	f7fa fe9d 	bl	b59fc <__assert_func>
   bacc2:	6922      	ldr	r2, [r4, #16]
   bacc4:	3202      	adds	r2, #2
   bacc6:	f104 010c 	add.w	r1, r4, #12
   bacca:	0092      	lsls	r2, r2, #2
   baccc:	300c      	adds	r0, #12
   bacce:	f7fe fba4 	bl	b941a <memcpy>
   bacd2:	4621      	mov	r1, r4
   bacd4:	4638      	mov	r0, r7
   bacd6:	f7ff ffa5 	bl	bac24 <_Bfree>
   bacda:	4644      	mov	r4, r8
   bacdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bace0:	3501      	adds	r5, #1
   bace2:	615e      	str	r6, [r3, #20]
   bace4:	6125      	str	r5, [r4, #16]
   bace6:	4620      	mov	r0, r4
   bace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bacec:	000bc288 	.word	0x000bc288
   bacf0:	000bc334 	.word	0x000bc334

000bacf4 <__s2b>:
   bacf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bacf8:	460c      	mov	r4, r1
   bacfa:	4615      	mov	r5, r2
   bacfc:	461f      	mov	r7, r3
   bacfe:	2209      	movs	r2, #9
   bad00:	3308      	adds	r3, #8
   bad02:	4606      	mov	r6, r0
   bad04:	fb93 f3f2 	sdiv	r3, r3, r2
   bad08:	2100      	movs	r1, #0
   bad0a:	2201      	movs	r2, #1
   bad0c:	429a      	cmp	r2, r3
   bad0e:	db09      	blt.n	bad24 <__s2b+0x30>
   bad10:	4630      	mov	r0, r6
   bad12:	f7ff ff47 	bl	baba4 <_Balloc>
   bad16:	b940      	cbnz	r0, bad2a <__s2b+0x36>
   bad18:	4602      	mov	r2, r0
   bad1a:	4b19      	ldr	r3, [pc, #100]	; (bad80 <__s2b+0x8c>)
   bad1c:	4819      	ldr	r0, [pc, #100]	; (bad84 <__s2b+0x90>)
   bad1e:	21ce      	movs	r1, #206	; 0xce
   bad20:	f7fa fe6c 	bl	b59fc <__assert_func>
   bad24:	0052      	lsls	r2, r2, #1
   bad26:	3101      	adds	r1, #1
   bad28:	e7f0      	b.n	bad0c <__s2b+0x18>
   bad2a:	9b08      	ldr	r3, [sp, #32]
   bad2c:	6143      	str	r3, [r0, #20]
   bad2e:	2d09      	cmp	r5, #9
   bad30:	f04f 0301 	mov.w	r3, #1
   bad34:	6103      	str	r3, [r0, #16]
   bad36:	dd16      	ble.n	bad66 <__s2b+0x72>
   bad38:	f104 0909 	add.w	r9, r4, #9
   bad3c:	46c8      	mov	r8, r9
   bad3e:	442c      	add	r4, r5
   bad40:	f818 3b01 	ldrb.w	r3, [r8], #1
   bad44:	4601      	mov	r1, r0
   bad46:	3b30      	subs	r3, #48	; 0x30
   bad48:	220a      	movs	r2, #10
   bad4a:	4630      	mov	r0, r6
   bad4c:	f7ff ff8c 	bl	bac68 <__multadd>
   bad50:	45a0      	cmp	r8, r4
   bad52:	d1f5      	bne.n	bad40 <__s2b+0x4c>
   bad54:	f1a5 0408 	sub.w	r4, r5, #8
   bad58:	444c      	add	r4, r9
   bad5a:	1b2d      	subs	r5, r5, r4
   bad5c:	1963      	adds	r3, r4, r5
   bad5e:	42bb      	cmp	r3, r7
   bad60:	db04      	blt.n	bad6c <__s2b+0x78>
   bad62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bad66:	340a      	adds	r4, #10
   bad68:	2509      	movs	r5, #9
   bad6a:	e7f6      	b.n	bad5a <__s2b+0x66>
   bad6c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bad70:	4601      	mov	r1, r0
   bad72:	3b30      	subs	r3, #48	; 0x30
   bad74:	220a      	movs	r2, #10
   bad76:	4630      	mov	r0, r6
   bad78:	f7ff ff76 	bl	bac68 <__multadd>
   bad7c:	e7ee      	b.n	bad5c <__s2b+0x68>
   bad7e:	bf00      	nop
   bad80:	000bc288 	.word	0x000bc288
   bad84:	000bc334 	.word	0x000bc334

000bad88 <__hi0bits>:
   bad88:	0c03      	lsrs	r3, r0, #16
   bad8a:	041b      	lsls	r3, r3, #16
   bad8c:	b9d3      	cbnz	r3, badc4 <__hi0bits+0x3c>
   bad8e:	0400      	lsls	r0, r0, #16
   bad90:	2310      	movs	r3, #16
   bad92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bad96:	bf04      	itt	eq
   bad98:	0200      	lsleq	r0, r0, #8
   bad9a:	3308      	addeq	r3, #8
   bad9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bada0:	bf04      	itt	eq
   bada2:	0100      	lsleq	r0, r0, #4
   bada4:	3304      	addeq	r3, #4
   bada6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   badaa:	bf04      	itt	eq
   badac:	0080      	lsleq	r0, r0, #2
   badae:	3302      	addeq	r3, #2
   badb0:	2800      	cmp	r0, #0
   badb2:	db05      	blt.n	badc0 <__hi0bits+0x38>
   badb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   badb8:	f103 0301 	add.w	r3, r3, #1
   badbc:	bf08      	it	eq
   badbe:	2320      	moveq	r3, #32
   badc0:	4618      	mov	r0, r3
   badc2:	4770      	bx	lr
   badc4:	2300      	movs	r3, #0
   badc6:	e7e4      	b.n	bad92 <__hi0bits+0xa>

000badc8 <__lo0bits>:
   badc8:	6803      	ldr	r3, [r0, #0]
   badca:	f013 0207 	ands.w	r2, r3, #7
   badce:	4601      	mov	r1, r0
   badd0:	d00b      	beq.n	badea <__lo0bits+0x22>
   badd2:	07da      	lsls	r2, r3, #31
   badd4:	d423      	bmi.n	bae1e <__lo0bits+0x56>
   badd6:	0798      	lsls	r0, r3, #30
   badd8:	bf49      	itett	mi
   badda:	085b      	lsrmi	r3, r3, #1
   baddc:	089b      	lsrpl	r3, r3, #2
   badde:	2001      	movmi	r0, #1
   bade0:	600b      	strmi	r3, [r1, #0]
   bade2:	bf5c      	itt	pl
   bade4:	600b      	strpl	r3, [r1, #0]
   bade6:	2002      	movpl	r0, #2
   bade8:	4770      	bx	lr
   badea:	b298      	uxth	r0, r3
   badec:	b9a8      	cbnz	r0, bae1a <__lo0bits+0x52>
   badee:	0c1b      	lsrs	r3, r3, #16
   badf0:	2010      	movs	r0, #16
   badf2:	b2da      	uxtb	r2, r3
   badf4:	b90a      	cbnz	r2, badfa <__lo0bits+0x32>
   badf6:	3008      	adds	r0, #8
   badf8:	0a1b      	lsrs	r3, r3, #8
   badfa:	071a      	lsls	r2, r3, #28
   badfc:	bf04      	itt	eq
   badfe:	091b      	lsreq	r3, r3, #4
   bae00:	3004      	addeq	r0, #4
   bae02:	079a      	lsls	r2, r3, #30
   bae04:	bf04      	itt	eq
   bae06:	089b      	lsreq	r3, r3, #2
   bae08:	3002      	addeq	r0, #2
   bae0a:	07da      	lsls	r2, r3, #31
   bae0c:	d403      	bmi.n	bae16 <__lo0bits+0x4e>
   bae0e:	085b      	lsrs	r3, r3, #1
   bae10:	f100 0001 	add.w	r0, r0, #1
   bae14:	d005      	beq.n	bae22 <__lo0bits+0x5a>
   bae16:	600b      	str	r3, [r1, #0]
   bae18:	4770      	bx	lr
   bae1a:	4610      	mov	r0, r2
   bae1c:	e7e9      	b.n	badf2 <__lo0bits+0x2a>
   bae1e:	2000      	movs	r0, #0
   bae20:	4770      	bx	lr
   bae22:	2020      	movs	r0, #32
   bae24:	4770      	bx	lr
	...

000bae28 <__i2b>:
   bae28:	b510      	push	{r4, lr}
   bae2a:	460c      	mov	r4, r1
   bae2c:	2101      	movs	r1, #1
   bae2e:	f7ff feb9 	bl	baba4 <_Balloc>
   bae32:	4602      	mov	r2, r0
   bae34:	b928      	cbnz	r0, bae42 <__i2b+0x1a>
   bae36:	4b05      	ldr	r3, [pc, #20]	; (bae4c <__i2b+0x24>)
   bae38:	4805      	ldr	r0, [pc, #20]	; (bae50 <__i2b+0x28>)
   bae3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bae3e:	f7fa fddd 	bl	b59fc <__assert_func>
   bae42:	2301      	movs	r3, #1
   bae44:	6144      	str	r4, [r0, #20]
   bae46:	6103      	str	r3, [r0, #16]
   bae48:	bd10      	pop	{r4, pc}
   bae4a:	bf00      	nop
   bae4c:	000bc288 	.word	0x000bc288
   bae50:	000bc334 	.word	0x000bc334

000bae54 <__multiply>:
   bae54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bae58:	4691      	mov	r9, r2
   bae5a:	690a      	ldr	r2, [r1, #16]
   bae5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bae60:	429a      	cmp	r2, r3
   bae62:	bfb8      	it	lt
   bae64:	460b      	movlt	r3, r1
   bae66:	460c      	mov	r4, r1
   bae68:	bfbc      	itt	lt
   bae6a:	464c      	movlt	r4, r9
   bae6c:	4699      	movlt	r9, r3
   bae6e:	6927      	ldr	r7, [r4, #16]
   bae70:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bae74:	68a3      	ldr	r3, [r4, #8]
   bae76:	6861      	ldr	r1, [r4, #4]
   bae78:	eb07 060a 	add.w	r6, r7, sl
   bae7c:	42b3      	cmp	r3, r6
   bae7e:	b085      	sub	sp, #20
   bae80:	bfb8      	it	lt
   bae82:	3101      	addlt	r1, #1
   bae84:	f7ff fe8e 	bl	baba4 <_Balloc>
   bae88:	b930      	cbnz	r0, bae98 <__multiply+0x44>
   bae8a:	4602      	mov	r2, r0
   bae8c:	4b44      	ldr	r3, [pc, #272]	; (bafa0 <__multiply+0x14c>)
   bae8e:	4845      	ldr	r0, [pc, #276]	; (bafa4 <__multiply+0x150>)
   bae90:	f240 115d 	movw	r1, #349	; 0x15d
   bae94:	f7fa fdb2 	bl	b59fc <__assert_func>
   bae98:	f100 0514 	add.w	r5, r0, #20
   bae9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   baea0:	462b      	mov	r3, r5
   baea2:	2200      	movs	r2, #0
   baea4:	4543      	cmp	r3, r8
   baea6:	d321      	bcc.n	baeec <__multiply+0x98>
   baea8:	f104 0314 	add.w	r3, r4, #20
   baeac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   baeb0:	f109 0314 	add.w	r3, r9, #20
   baeb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   baeb8:	9202      	str	r2, [sp, #8]
   baeba:	1b3a      	subs	r2, r7, r4
   baebc:	3a15      	subs	r2, #21
   baebe:	f022 0203 	bic.w	r2, r2, #3
   baec2:	3204      	adds	r2, #4
   baec4:	f104 0115 	add.w	r1, r4, #21
   baec8:	428f      	cmp	r7, r1
   baeca:	bf38      	it	cc
   baecc:	2204      	movcc	r2, #4
   baece:	9201      	str	r2, [sp, #4]
   baed0:	9a02      	ldr	r2, [sp, #8]
   baed2:	9303      	str	r3, [sp, #12]
   baed4:	429a      	cmp	r2, r3
   baed6:	d80c      	bhi.n	baef2 <__multiply+0x9e>
   baed8:	2e00      	cmp	r6, #0
   baeda:	dd03      	ble.n	baee4 <__multiply+0x90>
   baedc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   baee0:	2b00      	cmp	r3, #0
   baee2:	d05a      	beq.n	baf9a <__multiply+0x146>
   baee4:	6106      	str	r6, [r0, #16]
   baee6:	b005      	add	sp, #20
   baee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   baeec:	f843 2b04 	str.w	r2, [r3], #4
   baef0:	e7d8      	b.n	baea4 <__multiply+0x50>
   baef2:	f8b3 a000 	ldrh.w	sl, [r3]
   baef6:	f1ba 0f00 	cmp.w	sl, #0
   baefa:	d024      	beq.n	baf46 <__multiply+0xf2>
   baefc:	f104 0e14 	add.w	lr, r4, #20
   baf00:	46a9      	mov	r9, r5
   baf02:	f04f 0c00 	mov.w	ip, #0
   baf06:	f85e 2b04 	ldr.w	r2, [lr], #4
   baf0a:	f8d9 1000 	ldr.w	r1, [r9]
   baf0e:	fa1f fb82 	uxth.w	fp, r2
   baf12:	b289      	uxth	r1, r1
   baf14:	fb0a 110b 	mla	r1, sl, fp, r1
   baf18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   baf1c:	f8d9 2000 	ldr.w	r2, [r9]
   baf20:	4461      	add	r1, ip
   baf22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baf26:	fb0a c20b 	mla	r2, sl, fp, ip
   baf2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   baf2e:	b289      	uxth	r1, r1
   baf30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   baf34:	4577      	cmp	r7, lr
   baf36:	f849 1b04 	str.w	r1, [r9], #4
   baf3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baf3e:	d8e2      	bhi.n	baf06 <__multiply+0xb2>
   baf40:	9a01      	ldr	r2, [sp, #4]
   baf42:	f845 c002 	str.w	ip, [r5, r2]
   baf46:	9a03      	ldr	r2, [sp, #12]
   baf48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   baf4c:	3304      	adds	r3, #4
   baf4e:	f1b9 0f00 	cmp.w	r9, #0
   baf52:	d020      	beq.n	baf96 <__multiply+0x142>
   baf54:	6829      	ldr	r1, [r5, #0]
   baf56:	f104 0c14 	add.w	ip, r4, #20
   baf5a:	46ae      	mov	lr, r5
   baf5c:	f04f 0a00 	mov.w	sl, #0
   baf60:	f8bc b000 	ldrh.w	fp, [ip]
   baf64:	f8be 2002 	ldrh.w	r2, [lr, #2]
   baf68:	fb09 220b 	mla	r2, r9, fp, r2
   baf6c:	4492      	add	sl, r2
   baf6e:	b289      	uxth	r1, r1
   baf70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   baf74:	f84e 1b04 	str.w	r1, [lr], #4
   baf78:	f85c 2b04 	ldr.w	r2, [ip], #4
   baf7c:	f8be 1000 	ldrh.w	r1, [lr]
   baf80:	0c12      	lsrs	r2, r2, #16
   baf82:	fb09 1102 	mla	r1, r9, r2, r1
   baf86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   baf8a:	4567      	cmp	r7, ip
   baf8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   baf90:	d8e6      	bhi.n	baf60 <__multiply+0x10c>
   baf92:	9a01      	ldr	r2, [sp, #4]
   baf94:	50a9      	str	r1, [r5, r2]
   baf96:	3504      	adds	r5, #4
   baf98:	e79a      	b.n	baed0 <__multiply+0x7c>
   baf9a:	3e01      	subs	r6, #1
   baf9c:	e79c      	b.n	baed8 <__multiply+0x84>
   baf9e:	bf00      	nop
   bafa0:	000bc288 	.word	0x000bc288
   bafa4:	000bc334 	.word	0x000bc334

000bafa8 <__pow5mult>:
   bafa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bafac:	4615      	mov	r5, r2
   bafae:	f012 0203 	ands.w	r2, r2, #3
   bafb2:	4606      	mov	r6, r0
   bafb4:	460f      	mov	r7, r1
   bafb6:	d007      	beq.n	bafc8 <__pow5mult+0x20>
   bafb8:	4c25      	ldr	r4, [pc, #148]	; (bb050 <__pow5mult+0xa8>)
   bafba:	3a01      	subs	r2, #1
   bafbc:	2300      	movs	r3, #0
   bafbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bafc2:	f7ff fe51 	bl	bac68 <__multadd>
   bafc6:	4607      	mov	r7, r0
   bafc8:	10ad      	asrs	r5, r5, #2
   bafca:	d03d      	beq.n	bb048 <__pow5mult+0xa0>
   bafcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bafce:	b97c      	cbnz	r4, baff0 <__pow5mult+0x48>
   bafd0:	2010      	movs	r0, #16
   bafd2:	f7fa fccb 	bl	b596c <malloc>
   bafd6:	4602      	mov	r2, r0
   bafd8:	6270      	str	r0, [r6, #36]	; 0x24
   bafda:	b928      	cbnz	r0, bafe8 <__pow5mult+0x40>
   bafdc:	4b1d      	ldr	r3, [pc, #116]	; (bb054 <__pow5mult+0xac>)
   bafde:	481e      	ldr	r0, [pc, #120]	; (bb058 <__pow5mult+0xb0>)
   bafe0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bafe4:	f7fa fd0a 	bl	b59fc <__assert_func>
   bafe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bafec:	6004      	str	r4, [r0, #0]
   bafee:	60c4      	str	r4, [r0, #12]
   baff0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   baff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   baff8:	b94c      	cbnz	r4, bb00e <__pow5mult+0x66>
   baffa:	f240 2171 	movw	r1, #625	; 0x271
   baffe:	4630      	mov	r0, r6
   bb000:	f7ff ff12 	bl	bae28 <__i2b>
   bb004:	2300      	movs	r3, #0
   bb006:	f8c8 0008 	str.w	r0, [r8, #8]
   bb00a:	4604      	mov	r4, r0
   bb00c:	6003      	str	r3, [r0, #0]
   bb00e:	f04f 0900 	mov.w	r9, #0
   bb012:	07eb      	lsls	r3, r5, #31
   bb014:	d50a      	bpl.n	bb02c <__pow5mult+0x84>
   bb016:	4639      	mov	r1, r7
   bb018:	4622      	mov	r2, r4
   bb01a:	4630      	mov	r0, r6
   bb01c:	f7ff ff1a 	bl	bae54 <__multiply>
   bb020:	4639      	mov	r1, r7
   bb022:	4680      	mov	r8, r0
   bb024:	4630      	mov	r0, r6
   bb026:	f7ff fdfd 	bl	bac24 <_Bfree>
   bb02a:	4647      	mov	r7, r8
   bb02c:	106d      	asrs	r5, r5, #1
   bb02e:	d00b      	beq.n	bb048 <__pow5mult+0xa0>
   bb030:	6820      	ldr	r0, [r4, #0]
   bb032:	b938      	cbnz	r0, bb044 <__pow5mult+0x9c>
   bb034:	4622      	mov	r2, r4
   bb036:	4621      	mov	r1, r4
   bb038:	4630      	mov	r0, r6
   bb03a:	f7ff ff0b 	bl	bae54 <__multiply>
   bb03e:	6020      	str	r0, [r4, #0]
   bb040:	f8c0 9000 	str.w	r9, [r0]
   bb044:	4604      	mov	r4, r0
   bb046:	e7e4      	b.n	bb012 <__pow5mult+0x6a>
   bb048:	4638      	mov	r0, r7
   bb04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb04e:	bf00      	nop
   bb050:	000bc4a8 	.word	0x000bc4a8
   bb054:	000bc011 	.word	0x000bc011
   bb058:	000bc334 	.word	0x000bc334

000bb05c <__lshift>:
   bb05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb060:	460c      	mov	r4, r1
   bb062:	6849      	ldr	r1, [r1, #4]
   bb064:	6923      	ldr	r3, [r4, #16]
   bb066:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb06a:	68a3      	ldr	r3, [r4, #8]
   bb06c:	4607      	mov	r7, r0
   bb06e:	4691      	mov	r9, r2
   bb070:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb074:	f108 0601 	add.w	r6, r8, #1
   bb078:	42b3      	cmp	r3, r6
   bb07a:	db0b      	blt.n	bb094 <__lshift+0x38>
   bb07c:	4638      	mov	r0, r7
   bb07e:	f7ff fd91 	bl	baba4 <_Balloc>
   bb082:	4605      	mov	r5, r0
   bb084:	b948      	cbnz	r0, bb09a <__lshift+0x3e>
   bb086:	4602      	mov	r2, r0
   bb088:	4b2a      	ldr	r3, [pc, #168]	; (bb134 <__lshift+0xd8>)
   bb08a:	482b      	ldr	r0, [pc, #172]	; (bb138 <__lshift+0xdc>)
   bb08c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bb090:	f7fa fcb4 	bl	b59fc <__assert_func>
   bb094:	3101      	adds	r1, #1
   bb096:	005b      	lsls	r3, r3, #1
   bb098:	e7ee      	b.n	bb078 <__lshift+0x1c>
   bb09a:	2300      	movs	r3, #0
   bb09c:	f100 0114 	add.w	r1, r0, #20
   bb0a0:	f100 0210 	add.w	r2, r0, #16
   bb0a4:	4618      	mov	r0, r3
   bb0a6:	4553      	cmp	r3, sl
   bb0a8:	db37      	blt.n	bb11a <__lshift+0xbe>
   bb0aa:	6920      	ldr	r0, [r4, #16]
   bb0ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bb0b0:	f104 0314 	add.w	r3, r4, #20
   bb0b4:	f019 091f 	ands.w	r9, r9, #31
   bb0b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bb0bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bb0c0:	d02f      	beq.n	bb122 <__lshift+0xc6>
   bb0c2:	f1c9 0e20 	rsb	lr, r9, #32
   bb0c6:	468a      	mov	sl, r1
   bb0c8:	f04f 0c00 	mov.w	ip, #0
   bb0cc:	681a      	ldr	r2, [r3, #0]
   bb0ce:	fa02 f209 	lsl.w	r2, r2, r9
   bb0d2:	ea42 020c 	orr.w	r2, r2, ip
   bb0d6:	f84a 2b04 	str.w	r2, [sl], #4
   bb0da:	f853 2b04 	ldr.w	r2, [r3], #4
   bb0de:	4298      	cmp	r0, r3
   bb0e0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb0e4:	d8f2      	bhi.n	bb0cc <__lshift+0x70>
   bb0e6:	1b03      	subs	r3, r0, r4
   bb0e8:	3b15      	subs	r3, #21
   bb0ea:	f023 0303 	bic.w	r3, r3, #3
   bb0ee:	3304      	adds	r3, #4
   bb0f0:	f104 0215 	add.w	r2, r4, #21
   bb0f4:	4290      	cmp	r0, r2
   bb0f6:	bf38      	it	cc
   bb0f8:	2304      	movcc	r3, #4
   bb0fa:	f841 c003 	str.w	ip, [r1, r3]
   bb0fe:	f1bc 0f00 	cmp.w	ip, #0
   bb102:	d001      	beq.n	bb108 <__lshift+0xac>
   bb104:	f108 0602 	add.w	r6, r8, #2
   bb108:	3e01      	subs	r6, #1
   bb10a:	4638      	mov	r0, r7
   bb10c:	612e      	str	r6, [r5, #16]
   bb10e:	4621      	mov	r1, r4
   bb110:	f7ff fd88 	bl	bac24 <_Bfree>
   bb114:	4628      	mov	r0, r5
   bb116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb11a:	f842 0f04 	str.w	r0, [r2, #4]!
   bb11e:	3301      	adds	r3, #1
   bb120:	e7c1      	b.n	bb0a6 <__lshift+0x4a>
   bb122:	3904      	subs	r1, #4
   bb124:	f853 2b04 	ldr.w	r2, [r3], #4
   bb128:	f841 2f04 	str.w	r2, [r1, #4]!
   bb12c:	4298      	cmp	r0, r3
   bb12e:	d8f9      	bhi.n	bb124 <__lshift+0xc8>
   bb130:	e7ea      	b.n	bb108 <__lshift+0xac>
   bb132:	bf00      	nop
   bb134:	000bc288 	.word	0x000bc288
   bb138:	000bc334 	.word	0x000bc334

000bb13c <__mcmp>:
   bb13c:	b530      	push	{r4, r5, lr}
   bb13e:	6902      	ldr	r2, [r0, #16]
   bb140:	690c      	ldr	r4, [r1, #16]
   bb142:	1b12      	subs	r2, r2, r4
   bb144:	d10e      	bne.n	bb164 <__mcmp+0x28>
   bb146:	f100 0314 	add.w	r3, r0, #20
   bb14a:	3114      	adds	r1, #20
   bb14c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb150:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb154:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb158:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb15c:	42a5      	cmp	r5, r4
   bb15e:	d003      	beq.n	bb168 <__mcmp+0x2c>
   bb160:	d305      	bcc.n	bb16e <__mcmp+0x32>
   bb162:	2201      	movs	r2, #1
   bb164:	4610      	mov	r0, r2
   bb166:	bd30      	pop	{r4, r5, pc}
   bb168:	4283      	cmp	r3, r0
   bb16a:	d3f3      	bcc.n	bb154 <__mcmp+0x18>
   bb16c:	e7fa      	b.n	bb164 <__mcmp+0x28>
   bb16e:	f04f 32ff 	mov.w	r2, #4294967295
   bb172:	e7f7      	b.n	bb164 <__mcmp+0x28>

000bb174 <__mdiff>:
   bb174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb178:	460c      	mov	r4, r1
   bb17a:	4606      	mov	r6, r0
   bb17c:	4611      	mov	r1, r2
   bb17e:	4620      	mov	r0, r4
   bb180:	4690      	mov	r8, r2
   bb182:	f7ff ffdb 	bl	bb13c <__mcmp>
   bb186:	1e05      	subs	r5, r0, #0
   bb188:	d110      	bne.n	bb1ac <__mdiff+0x38>
   bb18a:	4629      	mov	r1, r5
   bb18c:	4630      	mov	r0, r6
   bb18e:	f7ff fd09 	bl	baba4 <_Balloc>
   bb192:	b930      	cbnz	r0, bb1a2 <__mdiff+0x2e>
   bb194:	4b3a      	ldr	r3, [pc, #232]	; (bb280 <__mdiff+0x10c>)
   bb196:	4602      	mov	r2, r0
   bb198:	f240 2132 	movw	r1, #562	; 0x232
   bb19c:	4839      	ldr	r0, [pc, #228]	; (bb284 <__mdiff+0x110>)
   bb19e:	f7fa fc2d 	bl	b59fc <__assert_func>
   bb1a2:	2301      	movs	r3, #1
   bb1a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb1a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb1ac:	bfa4      	itt	ge
   bb1ae:	4643      	movge	r3, r8
   bb1b0:	46a0      	movge	r8, r4
   bb1b2:	4630      	mov	r0, r6
   bb1b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb1b8:	bfa6      	itte	ge
   bb1ba:	461c      	movge	r4, r3
   bb1bc:	2500      	movge	r5, #0
   bb1be:	2501      	movlt	r5, #1
   bb1c0:	f7ff fcf0 	bl	baba4 <_Balloc>
   bb1c4:	b920      	cbnz	r0, bb1d0 <__mdiff+0x5c>
   bb1c6:	4b2e      	ldr	r3, [pc, #184]	; (bb280 <__mdiff+0x10c>)
   bb1c8:	4602      	mov	r2, r0
   bb1ca:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb1ce:	e7e5      	b.n	bb19c <__mdiff+0x28>
   bb1d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb1d4:	6926      	ldr	r6, [r4, #16]
   bb1d6:	60c5      	str	r5, [r0, #12]
   bb1d8:	f104 0914 	add.w	r9, r4, #20
   bb1dc:	f108 0514 	add.w	r5, r8, #20
   bb1e0:	f100 0e14 	add.w	lr, r0, #20
   bb1e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb1e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb1ec:	f108 0210 	add.w	r2, r8, #16
   bb1f0:	46f2      	mov	sl, lr
   bb1f2:	2100      	movs	r1, #0
   bb1f4:	f859 3b04 	ldr.w	r3, [r9], #4
   bb1f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb1fc:	fa1f f883 	uxth.w	r8, r3
   bb200:	fa11 f18b 	uxtah	r1, r1, fp
   bb204:	0c1b      	lsrs	r3, r3, #16
   bb206:	eba1 0808 	sub.w	r8, r1, r8
   bb20a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb20e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb212:	fa1f f888 	uxth.w	r8, r8
   bb216:	1419      	asrs	r1, r3, #16
   bb218:	454e      	cmp	r6, r9
   bb21a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb21e:	f84a 3b04 	str.w	r3, [sl], #4
   bb222:	d8e7      	bhi.n	bb1f4 <__mdiff+0x80>
   bb224:	1b33      	subs	r3, r6, r4
   bb226:	3b15      	subs	r3, #21
   bb228:	f023 0303 	bic.w	r3, r3, #3
   bb22c:	3304      	adds	r3, #4
   bb22e:	3415      	adds	r4, #21
   bb230:	42a6      	cmp	r6, r4
   bb232:	bf38      	it	cc
   bb234:	2304      	movcc	r3, #4
   bb236:	441d      	add	r5, r3
   bb238:	4473      	add	r3, lr
   bb23a:	469e      	mov	lr, r3
   bb23c:	462e      	mov	r6, r5
   bb23e:	4566      	cmp	r6, ip
   bb240:	d30e      	bcc.n	bb260 <__mdiff+0xec>
   bb242:	f10c 0203 	add.w	r2, ip, #3
   bb246:	1b52      	subs	r2, r2, r5
   bb248:	f022 0203 	bic.w	r2, r2, #3
   bb24c:	3d03      	subs	r5, #3
   bb24e:	45ac      	cmp	ip, r5
   bb250:	bf38      	it	cc
   bb252:	2200      	movcc	r2, #0
   bb254:	441a      	add	r2, r3
   bb256:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb25a:	b17b      	cbz	r3, bb27c <__mdiff+0x108>
   bb25c:	6107      	str	r7, [r0, #16]
   bb25e:	e7a3      	b.n	bb1a8 <__mdiff+0x34>
   bb260:	f856 8b04 	ldr.w	r8, [r6], #4
   bb264:	fa11 f288 	uxtah	r2, r1, r8
   bb268:	1414      	asrs	r4, r2, #16
   bb26a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb26e:	b292      	uxth	r2, r2
   bb270:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb274:	f84e 2b04 	str.w	r2, [lr], #4
   bb278:	1421      	asrs	r1, r4, #16
   bb27a:	e7e0      	b.n	bb23e <__mdiff+0xca>
   bb27c:	3f01      	subs	r7, #1
   bb27e:	e7ea      	b.n	bb256 <__mdiff+0xe2>
   bb280:	000bc288 	.word	0x000bc288
   bb284:	000bc334 	.word	0x000bc334

000bb288 <__ulp>:
   bb288:	b082      	sub	sp, #8
   bb28a:	ed8d 0b00 	vstr	d0, [sp]
   bb28e:	9b01      	ldr	r3, [sp, #4]
   bb290:	4912      	ldr	r1, [pc, #72]	; (bb2dc <__ulp+0x54>)
   bb292:	4019      	ands	r1, r3
   bb294:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb298:	2900      	cmp	r1, #0
   bb29a:	dd05      	ble.n	bb2a8 <__ulp+0x20>
   bb29c:	2200      	movs	r2, #0
   bb29e:	460b      	mov	r3, r1
   bb2a0:	ec43 2b10 	vmov	d0, r2, r3
   bb2a4:	b002      	add	sp, #8
   bb2a6:	4770      	bx	lr
   bb2a8:	4249      	negs	r1, r1
   bb2aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb2ae:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb2b2:	f04f 0200 	mov.w	r2, #0
   bb2b6:	f04f 0300 	mov.w	r3, #0
   bb2ba:	da04      	bge.n	bb2c6 <__ulp+0x3e>
   bb2bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb2c0:	fa41 f300 	asr.w	r3, r1, r0
   bb2c4:	e7ec      	b.n	bb2a0 <__ulp+0x18>
   bb2c6:	f1a0 0114 	sub.w	r1, r0, #20
   bb2ca:	291e      	cmp	r1, #30
   bb2cc:	bfda      	itte	le
   bb2ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb2d2:	fa20 f101 	lsrle.w	r1, r0, r1
   bb2d6:	2101      	movgt	r1, #1
   bb2d8:	460a      	mov	r2, r1
   bb2da:	e7e1      	b.n	bb2a0 <__ulp+0x18>
   bb2dc:	7ff00000 	.word	0x7ff00000

000bb2e0 <__b2d>:
   bb2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb2e2:	6905      	ldr	r5, [r0, #16]
   bb2e4:	f100 0714 	add.w	r7, r0, #20
   bb2e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb2ec:	1f2e      	subs	r6, r5, #4
   bb2ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb2f2:	4620      	mov	r0, r4
   bb2f4:	f7ff fd48 	bl	bad88 <__hi0bits>
   bb2f8:	f1c0 0320 	rsb	r3, r0, #32
   bb2fc:	280a      	cmp	r0, #10
   bb2fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb37c <__b2d+0x9c>
   bb302:	600b      	str	r3, [r1, #0]
   bb304:	dc14      	bgt.n	bb330 <__b2d+0x50>
   bb306:	f1c0 0e0b 	rsb	lr, r0, #11
   bb30a:	fa24 f10e 	lsr.w	r1, r4, lr
   bb30e:	42b7      	cmp	r7, r6
   bb310:	ea41 030c 	orr.w	r3, r1, ip
   bb314:	bf34      	ite	cc
   bb316:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb31a:	2100      	movcs	r1, #0
   bb31c:	3015      	adds	r0, #21
   bb31e:	fa04 f000 	lsl.w	r0, r4, r0
   bb322:	fa21 f10e 	lsr.w	r1, r1, lr
   bb326:	ea40 0201 	orr.w	r2, r0, r1
   bb32a:	ec43 2b10 	vmov	d0, r2, r3
   bb32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb330:	42b7      	cmp	r7, r6
   bb332:	bf3a      	itte	cc
   bb334:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb338:	f1a5 0608 	subcc.w	r6, r5, #8
   bb33c:	2100      	movcs	r1, #0
   bb33e:	380b      	subs	r0, #11
   bb340:	d017      	beq.n	bb372 <__b2d+0x92>
   bb342:	f1c0 0c20 	rsb	ip, r0, #32
   bb346:	fa04 f500 	lsl.w	r5, r4, r0
   bb34a:	42be      	cmp	r6, r7
   bb34c:	fa21 f40c 	lsr.w	r4, r1, ip
   bb350:	ea45 0504 	orr.w	r5, r5, r4
   bb354:	bf8c      	ite	hi
   bb356:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb35a:	2400      	movls	r4, #0
   bb35c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb360:	fa01 f000 	lsl.w	r0, r1, r0
   bb364:	fa24 f40c 	lsr.w	r4, r4, ip
   bb368:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb36c:	ea40 0204 	orr.w	r2, r0, r4
   bb370:	e7db      	b.n	bb32a <__b2d+0x4a>
   bb372:	ea44 030c 	orr.w	r3, r4, ip
   bb376:	460a      	mov	r2, r1
   bb378:	e7d7      	b.n	bb32a <__b2d+0x4a>
   bb37a:	bf00      	nop
   bb37c:	3ff00000 	.word	0x3ff00000

000bb380 <__d2b>:
   bb380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb384:	4689      	mov	r9, r1
   bb386:	2101      	movs	r1, #1
   bb388:	ec57 6b10 	vmov	r6, r7, d0
   bb38c:	4690      	mov	r8, r2
   bb38e:	f7ff fc09 	bl	baba4 <_Balloc>
   bb392:	4604      	mov	r4, r0
   bb394:	b930      	cbnz	r0, bb3a4 <__d2b+0x24>
   bb396:	4602      	mov	r2, r0
   bb398:	4b25      	ldr	r3, [pc, #148]	; (bb430 <__d2b+0xb0>)
   bb39a:	4826      	ldr	r0, [pc, #152]	; (bb434 <__d2b+0xb4>)
   bb39c:	f240 310a 	movw	r1, #778	; 0x30a
   bb3a0:	f7fa fb2c 	bl	b59fc <__assert_func>
   bb3a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb3a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb3ac:	bb35      	cbnz	r5, bb3fc <__d2b+0x7c>
   bb3ae:	2e00      	cmp	r6, #0
   bb3b0:	9301      	str	r3, [sp, #4]
   bb3b2:	d028      	beq.n	bb406 <__d2b+0x86>
   bb3b4:	4668      	mov	r0, sp
   bb3b6:	9600      	str	r6, [sp, #0]
   bb3b8:	f7ff fd06 	bl	badc8 <__lo0bits>
   bb3bc:	9900      	ldr	r1, [sp, #0]
   bb3be:	b300      	cbz	r0, bb402 <__d2b+0x82>
   bb3c0:	9a01      	ldr	r2, [sp, #4]
   bb3c2:	f1c0 0320 	rsb	r3, r0, #32
   bb3c6:	fa02 f303 	lsl.w	r3, r2, r3
   bb3ca:	430b      	orrs	r3, r1
   bb3cc:	40c2      	lsrs	r2, r0
   bb3ce:	6163      	str	r3, [r4, #20]
   bb3d0:	9201      	str	r2, [sp, #4]
   bb3d2:	9b01      	ldr	r3, [sp, #4]
   bb3d4:	61a3      	str	r3, [r4, #24]
   bb3d6:	2b00      	cmp	r3, #0
   bb3d8:	bf14      	ite	ne
   bb3da:	2202      	movne	r2, #2
   bb3dc:	2201      	moveq	r2, #1
   bb3de:	6122      	str	r2, [r4, #16]
   bb3e0:	b1d5      	cbz	r5, bb418 <__d2b+0x98>
   bb3e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb3e6:	4405      	add	r5, r0
   bb3e8:	f8c9 5000 	str.w	r5, [r9]
   bb3ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb3f0:	f8c8 0000 	str.w	r0, [r8]
   bb3f4:	4620      	mov	r0, r4
   bb3f6:	b003      	add	sp, #12
   bb3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb3fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb400:	e7d5      	b.n	bb3ae <__d2b+0x2e>
   bb402:	6161      	str	r1, [r4, #20]
   bb404:	e7e5      	b.n	bb3d2 <__d2b+0x52>
   bb406:	a801      	add	r0, sp, #4
   bb408:	f7ff fcde 	bl	badc8 <__lo0bits>
   bb40c:	9b01      	ldr	r3, [sp, #4]
   bb40e:	6163      	str	r3, [r4, #20]
   bb410:	2201      	movs	r2, #1
   bb412:	6122      	str	r2, [r4, #16]
   bb414:	3020      	adds	r0, #32
   bb416:	e7e3      	b.n	bb3e0 <__d2b+0x60>
   bb418:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb41c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb420:	f8c9 0000 	str.w	r0, [r9]
   bb424:	6918      	ldr	r0, [r3, #16]
   bb426:	f7ff fcaf 	bl	bad88 <__hi0bits>
   bb42a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb42e:	e7df      	b.n	bb3f0 <__d2b+0x70>
   bb430:	000bc288 	.word	0x000bc288
   bb434:	000bc334 	.word	0x000bc334

000bb438 <__ratio>:
   bb438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb43c:	4688      	mov	r8, r1
   bb43e:	4669      	mov	r1, sp
   bb440:	4681      	mov	r9, r0
   bb442:	f7ff ff4d 	bl	bb2e0 <__b2d>
   bb446:	a901      	add	r1, sp, #4
   bb448:	4640      	mov	r0, r8
   bb44a:	ec55 4b10 	vmov	r4, r5, d0
   bb44e:	f7ff ff47 	bl	bb2e0 <__b2d>
   bb452:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb456:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb45a:	eba3 0c02 	sub.w	ip, r3, r2
   bb45e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb462:	1a9b      	subs	r3, r3, r2
   bb464:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb468:	ec51 0b10 	vmov	r0, r1, d0
   bb46c:	2b00      	cmp	r3, #0
   bb46e:	bfd6      	itet	le
   bb470:	460a      	movle	r2, r1
   bb472:	462a      	movgt	r2, r5
   bb474:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb478:	468b      	mov	fp, r1
   bb47a:	462f      	mov	r7, r5
   bb47c:	bfd4      	ite	le
   bb47e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb482:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb486:	4620      	mov	r0, r4
   bb488:	ee10 2a10 	vmov	r2, s0
   bb48c:	465b      	mov	r3, fp
   bb48e:	4639      	mov	r1, r7
   bb490:	f7fd fdc4 	bl	b901c <__aeabi_ddiv>
   bb494:	ec41 0b10 	vmov	d0, r0, r1
   bb498:	b003      	add	sp, #12
   bb49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb49e <__copybits>:
   bb49e:	3901      	subs	r1, #1
   bb4a0:	b570      	push	{r4, r5, r6, lr}
   bb4a2:	1149      	asrs	r1, r1, #5
   bb4a4:	6914      	ldr	r4, [r2, #16]
   bb4a6:	3101      	adds	r1, #1
   bb4a8:	f102 0314 	add.w	r3, r2, #20
   bb4ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb4b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb4b4:	1f05      	subs	r5, r0, #4
   bb4b6:	42a3      	cmp	r3, r4
   bb4b8:	d30c      	bcc.n	bb4d4 <__copybits+0x36>
   bb4ba:	1aa3      	subs	r3, r4, r2
   bb4bc:	3b11      	subs	r3, #17
   bb4be:	f023 0303 	bic.w	r3, r3, #3
   bb4c2:	3211      	adds	r2, #17
   bb4c4:	42a2      	cmp	r2, r4
   bb4c6:	bf88      	it	hi
   bb4c8:	2300      	movhi	r3, #0
   bb4ca:	4418      	add	r0, r3
   bb4cc:	2300      	movs	r3, #0
   bb4ce:	4288      	cmp	r0, r1
   bb4d0:	d305      	bcc.n	bb4de <__copybits+0x40>
   bb4d2:	bd70      	pop	{r4, r5, r6, pc}
   bb4d4:	f853 6b04 	ldr.w	r6, [r3], #4
   bb4d8:	f845 6f04 	str.w	r6, [r5, #4]!
   bb4dc:	e7eb      	b.n	bb4b6 <__copybits+0x18>
   bb4de:	f840 3b04 	str.w	r3, [r0], #4
   bb4e2:	e7f4      	b.n	bb4ce <__copybits+0x30>

000bb4e4 <__any_on>:
   bb4e4:	f100 0214 	add.w	r2, r0, #20
   bb4e8:	6900      	ldr	r0, [r0, #16]
   bb4ea:	114b      	asrs	r3, r1, #5
   bb4ec:	4298      	cmp	r0, r3
   bb4ee:	b510      	push	{r4, lr}
   bb4f0:	db11      	blt.n	bb516 <__any_on+0x32>
   bb4f2:	dd0a      	ble.n	bb50a <__any_on+0x26>
   bb4f4:	f011 011f 	ands.w	r1, r1, #31
   bb4f8:	d007      	beq.n	bb50a <__any_on+0x26>
   bb4fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb4fe:	fa24 f001 	lsr.w	r0, r4, r1
   bb502:	fa00 f101 	lsl.w	r1, r0, r1
   bb506:	428c      	cmp	r4, r1
   bb508:	d10b      	bne.n	bb522 <__any_on+0x3e>
   bb50a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb50e:	4293      	cmp	r3, r2
   bb510:	d803      	bhi.n	bb51a <__any_on+0x36>
   bb512:	2000      	movs	r0, #0
   bb514:	bd10      	pop	{r4, pc}
   bb516:	4603      	mov	r3, r0
   bb518:	e7f7      	b.n	bb50a <__any_on+0x26>
   bb51a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb51e:	2900      	cmp	r1, #0
   bb520:	d0f5      	beq.n	bb50e <__any_on+0x2a>
   bb522:	2001      	movs	r0, #1
   bb524:	e7f6      	b.n	bb514 <__any_on+0x30>

000bb526 <_calloc_r>:
   bb526:	b513      	push	{r0, r1, r4, lr}
   bb528:	434a      	muls	r2, r1
   bb52a:	4611      	mov	r1, r2
   bb52c:	9201      	str	r2, [sp, #4]
   bb52e:	f7fa fa55 	bl	b59dc <_malloc_r>
   bb532:	4604      	mov	r4, r0
   bb534:	b118      	cbz	r0, bb53e <_calloc_r+0x18>
   bb536:	9a01      	ldr	r2, [sp, #4]
   bb538:	2100      	movs	r1, #0
   bb53a:	f7fd ff96 	bl	b946a <memset>
   bb53e:	4620      	mov	r0, r4
   bb540:	b002      	add	sp, #8
   bb542:	bd10      	pop	{r4, pc}
   bb544:	0000      	movs	r0, r0
	...

000bb548 <nan>:
   bb548:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb550 <nan+0x8>
   bb54c:	4770      	bx	lr
   bb54e:	bf00      	nop
   bb550:	00000000 	.word	0x00000000
   bb554:	7ff80000 	.word	0x7ff80000

000bb558 <__ascii_wctomb>:
   bb558:	b149      	cbz	r1, bb56e <__ascii_wctomb+0x16>
   bb55a:	2aff      	cmp	r2, #255	; 0xff
   bb55c:	bf85      	ittet	hi
   bb55e:	238a      	movhi	r3, #138	; 0x8a
   bb560:	6003      	strhi	r3, [r0, #0]
   bb562:	700a      	strbls	r2, [r1, #0]
   bb564:	f04f 30ff 	movhi.w	r0, #4294967295
   bb568:	bf98      	it	ls
   bb56a:	2001      	movls	r0, #1
   bb56c:	4770      	bx	lr
   bb56e:	4608      	mov	r0, r1
   bb570:	4770      	bx	lr
	...

000bb574 <__aeabi_d2lz>:
   bb574:	b538      	push	{r3, r4, r5, lr}
   bb576:	2200      	movs	r2, #0
   bb578:	2300      	movs	r3, #0
   bb57a:	4604      	mov	r4, r0
   bb57c:	460d      	mov	r5, r1
   bb57e:	f7fd fe95 	bl	b92ac <__aeabi_dcmplt>
   bb582:	b928      	cbnz	r0, bb590 <__aeabi_d2lz+0x1c>
   bb584:	4620      	mov	r0, r4
   bb586:	4629      	mov	r1, r5
   bb588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb58c:	f7fd bf0a 	b.w	b93a4 <__aeabi_d2ulz>
   bb590:	4620      	mov	r0, r4
   bb592:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bb596:	f7fd ff05 	bl	b93a4 <__aeabi_d2ulz>
   bb59a:	4240      	negs	r0, r0
   bb59c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb5a0:	bd38      	pop	{r3, r4, r5, pc}
   bb5a2:	bf00      	nop

000bb5a4 <dynalib_user>:
   bb5a4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bb5b4:	0000 0000 7270 6369 7365 002f 7325 000a     ....prices/.%s..
   bb5c4:	212c 2500 642a 252d 642a 252d 642a 2554     ,!.%*d-%*d-%*dT%
   bb5d4:	3a64 2a25 3a64 2a25 0064 6157 7469 6e69     d:%*d:%*d.Waitin
   bb5e4:	2067 6f66 2072 4c42 6345 696c 6e65 2074     g for BLEclient 
   bb5f4:	6f63 6e6e 6365 6974 6e6f 2e2e 002e 6948     connection....Hi
   bb604:	6867 7365 2074 7270 6369 2065 666f 7420     ghest price of t
   bb614:	6568 6420 7961 203a 6625 000a 6f4c 6577     he day: %f..Lowe
   bb624:	7473 7020 6972 6563 6f20 2066 6874 2065     st price of the 
   bb634:	6164 3a79 2520 0a66 4800 756f 7372 6f20     day: %f..Hours o
   bb644:	2066 6874 2065 6164 2079 6877 7265 2065     f the day where 
   bb654:	6c65 6365 7274 6369 7469 2079 7369 7720     electricity is w
   bb664:	7469 6968 206e 6361 6563 7470 6465 7220     ithin accepted r
   bb674:	6e61 6567 0a3a 2500 3230 2064 6f74 2520     ange:..%02d to %
   bb684:	3230 0a64 7b00 5722 7268 745f 646f 7961     02d..{"Whr_today
   bb694:	3a22 005b 002c 7d5d 7b00 7022 6972 6563     ":[.,.]}.{"price
   bb6a4:	7973 7365 6574 6472 7961 3a22 005b 2e25     syesterday":[.%.
   bb6b4:	6c32 0066 227b 7270 6369 7365 6f74 6164     2lf.{"pricestoda
   bb6c4:	2279 5b3a 7b00 5722 7248 795f 7365 6574     y":[.{"WHr_yeste
   bb6d4:	6472 7961 3a22 005b 6425 7b00 5722 7248     rday":[.%d.{"WHr
   bb6e4:	745f 646f 7961 3a22 005b 6562 6f66 6572     _today":[.before
   bb6f4:	2520 756c 000a 6146 6c69 6465 7420 206f      %lu..Failed to 
   bb704:	6c61 6f6c 6163 6574 6d20 6d65 726f 2079     allocate memory 
   bb714:	6f66 2072 6f63 7473 795f 7365 6574 6472     for cost_yesterd
   bb724:	7961 000a 6146 6c69 6465 7420 206f 6c61     ay..Failed to al
   bb734:	6f6c 6163 6574 6d20 6d65 726f 2079 6f66     locate memory fo
   bb744:	2072 6f63 7473 745f 646f 7961 000a 6146     r cost_today..Fa
   bb754:	6c69 6465 7420 206f 6c61 6f6c 6163 6574     iled to allocate
   bb764:	6d20 6d65 726f 2079 6f66 2072 6f63 7473      memory for cost
   bb774:	745f 6d6f 726f 6f72 0a77 4d00 6d65 726f     _tomorrow..Memor
   bb784:	2079 6c61 6f6c 6163 6574 2064 6f66 2072     y allocated for 
   bb794:	7270 6369 7365 203a 6425 6220 7479 7365     prices: %d bytes
   bb7a4:	6f20 2066 6f64 6275 656c 0a73 4600 6961      of doubles..Fai
   bb7b4:	656c 2064 6f74 6120 6c6c 636f 7461 2065     led to allocate 
   bb7c4:	656d 6f6d 7972 6620 726f 7720 5f68 6f74     memory for wh_to
   bb7d4:	6164 0a79 4600 6961 656c 2064 6f74 6120     day..Failed to a
   bb7e4:	6c6c 636f 7461 2065 656d 6f6d 7972 6620     llocate memory f
   bb7f4:	726f 7720 5f68 6579 7473 7265 6164 0a79     or wh_yesterday.
   bb804:	4d00 6d65 726f 2079 6c61 6f6c 6163 6574     .Memory allocate
   bb814:	2064 6f66 2072 6877 203a 6425 6220 7479     d for wh: %d byt
   bb824:	7365 6f20 2066 6e69 7374 000a 6641 6574     es of ints..Afte
   bb834:	2072 6c25 0a75 7000 6972 6563 0073 7543     r %lu..prices.Cu
   bb844:	7272 6e65 2074 4848 4d3a 3a4d 2520 3230     rrent HH:MM: %02
   bb854:	3a64 3025 6432 000a 207b 7922 6165 2272     d:%02d..{ "year"
   bb864:	203a 2522 2264 202c 6d22 6e6f 6874 3a22     : "%d", "month":
   bb874:	2522 3230 2264 202c 6422 7961 3a22 2220     "%02d", "day": "
   bb884:	3025 6432 2c22 2220 6164 5f79 7774 226f     %02d", "day_two"
   bb894:	203a 2522 3230 2264 202c 6822 756f 2272     : "%02d", "hour"
   bb8a4:	203a 2522 3230 2264 7d20 6500 706c 6972     : "%02d" }.elpri
   bb8b4:	6573 0072 6e49 7720 726f 0a6b 4300 6568     ser.In work..Che
   bb8c4:	7061 6928 6873 2029 6f68 7275 2073 666f     ap(ish) hours of
   bb8d4:	7420 6568 6420 7961 203a 2500 3230 2064      the day: .%02d 
   bb8e4:	6f74 2520 3230 2c64 0020 6f4c 2077 7270     to %02d, .Low pr
   bb8f4:	6369 2065 6f68 7275 0073 6547 7474 6e69     ice hours.Gettin
   bb904:	2067 7270 6369 2065 6164 6174 6620 726f     g price data for
   bb914:	7920 7365 6574 6472 7961 000a 6f43 6e75      yesterday..Coun
   bb924:	3174 3a3d 2520 0a64 4700 7465 6974 676e     t1=: %d..Getting
   bb934:	7020 6972 6563 6420 7461 2061 6f66 2072      price data for 
   bb944:	6f74 6164 0a79 4300 756f 746e 3d32 203a     today..Count2=: 
   bb954:	6425 000a 6547 7474 6e69 2067 7270 6369     %d..Getting pric
   bb964:	2065 6164 6174 6620 726f 7420 6d6f 726f     e data for tomor
   bb974:	6f72 0a77 5400 6568 7020 6972 6563 2073     row..The prices 
   bb984:	6f66 2072 6f74 6f6d 7272 766f 7720 6c69     for tomorrov wil
   bb994:	206c 6562 7020 6c75 656c 2064 7461 2520     l be pulled at %
   bb9a4:	3a64 3030 000a 6552 6563 7669 6465 7020     d:00..Received p
   bb9b4:	776f 7265 672f 7465 000a 227b 6177 7474     ower/get..{"watt
   bb9c4:	3a22 6425 007d 6c62 5f65 6f63 6e6e 6365     ":%d}.ble_connec
   bb9d4:	6574 0a64 5700 7461 2074 6f6e 0077 4b44     ted..Watt now.DK
   bb9e4:	204b 6559 7473 7265 6164 0079 4b44 204b     K Yesterday.DKK 
   bb9f4:	6f54 6164 0079 4b44 204b 6f54 6f6d 7272     Today.DKK Tomorr
   bba04:	776f 5700 7268 5420 646f 7961 5700 7268     ow.Whr Today.Whr
   bba14:	5920 7365 6574 6472 7961 0000                Yesterday..

000bba20 <_ZTV5Timer>:
	...
   bba28:	43f5 000b 4439 000b 4121 000b 3462 3532     .C..9D..!A..b425
   bba38:	3430 3530 662d 3462 2d62 3734 3634 622d     0405-fb4b-4746-b
   bba48:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bba58:	6200 3234 3035 3034 2d34 6266 6234 342d     .b4250404-fb4b-4
   bba68:	3437 2d36 3262 3062 392d 6633 6530 3136     746-b2b0-93f0e61
   bba78:	3231 6332 0036 3462 3532 3430 3330 662d     122c6.b4250403-f
   bba88:	3462 2d62 3734 3634 622d 6232 2d30 3339     b4b-4746-b2b0-93
   bba98:	3066 3665 3131 3232 3663 6200 3234 3035     f0e61122c6.b4250
   bbaa8:	3034 2d32 6266 6234 342d 3437 2d36 3262     402-fb4b-4746-b2
   bbab8:	3062 392d 6633 6530 3136 3231 6332 0036     b0-93f0e61122c6.
   bbac8:	3462 3532 3430 3630 662d 3462 2d62 3734     b4250406-fb4b-47
   bbad8:	3634 622d 6232 2d30 3339 3066 3665 3131     46-b2b0-93f0e611
   bbae8:	3232 3663 6200 3234 3035 3034 2d31 6266     22c6.b4250401-fb
   bbaf8:	6234 342d 3437 2d36 3262 3062 392d 6633     4b-4746-b2b0-93f
   bbb08:	6530 3136 3231 6332 0036 6633 6131 3531     0e61122c6.3f1a15
   bbb18:	3639 652d 3765 2d66 3234 6462 382d 6434     96-ee7f-42bd-84d
   bbb28:	2d31 3162 3261 3439 3866 6532 6663 4100     1-b1a294f82ecf.A
   bbb38:	6772 6e6f 4d50 0000                         rgonPM..

000bbb40 <_ZTVN5spark13EthernetClassE>:
	...
   bbb48:	5a8b 000b 5a81 000b 5a77 000b 5a6d 000b     .Z...Z..wZ..mZ..
   bbb58:	5a61 000b 5a55 000b 8569 000b 8571 000b     aZ..UZ..i...q...
   bbb68:	5a49 000b 5a41 000b 5a37 000b 5a2d 000b     IZ..AZ..7Z..-Z..
   bbb78:	85a1 000b                                   ....

000bbb7c <_ZTV3UDP>:
	...
   bbb84:	613d 000b 6161 000b 5bfd 000b 5d25 000b     =a..aa...[..%]..
   bbb94:	5bb5 000b 5c15 000b 5c33 000b 5c4d 000b     .[...\..3\..M\..
   bbba4:	5c71 000b 5d09 000b 5fe3 000b 5da9 000b     q\...]..._...]..
   bbbb4:	5f01 000b 5b9d 000b 60cd 000b 5e89 000b     ._...[...`...^..
   bbbc4:	5bbd 000b 60fb 000b 5d4f 000b 5bab 000b     .[...`..O]...[..
   bbbd4:	5de1 000b 5bb1 000b 5c4f 000b fff0 ffff     .]...[..O\......
   bbbe4:	0000 0000 5c69 000b 7341 6573 7472 6f69     ....i\..Assertio
   bbbf4:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bbc04:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bbc14:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bbc24:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bbc34:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bbc44:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bbc54:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bbc64:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bbc74:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bbc84:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bbc94:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bbca4:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bbcb4:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bbcc4:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bbcd4:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bbce4:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bbcf4:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bbd04:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bbd14:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bbd24:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bbd34:	6369 002e                                   ic..

000bbd38 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbd40:	6377 000b 63d9 000b 64f9 000b 6403 000b     wc...c...d...d..
   bbd50:	6379 000b                                   yc..

000bbd54 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbd5c:	6373 000b 63e7 000b 6375 000b 6409 000b     sc...c..uc...d..
   bbd6c:	6399 000b                                   .c..

000bbd70 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbd78:	6371 000b 63f5 000b 6c91 000b 640f 000b     qc...c...l...d..
   bbd88:	63b9 000b                                   .c..

000bbd8c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bbd98:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bbdaa <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bbdaa:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bbdba <_ZN8particle7BleUuid9BASE_UUIDE>:
   bbdba:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bbdca:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bbdda:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bbdec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbdf4:	7bb1 000b 7bb7 000b 7bf5 000b 7bc5 000b     .{...{...{...{..
   bbe04:	7bb3 000b                                   .{..

000bbe08 <_ZTV9IPAddress>:
	...
   bbe10:	80f1 000b 80e1 000b 80e3 000b               ............

000bbe1c <_ZTV9USBSerial>:
	...
   bbe24:	8213 000b 827b 000b 8251 000b 7761 000b     ....{...Q...aw..
   bbe34:	8243 000b 8215 000b 8225 000b 8275 000b     C.......%...u...
   bbe44:	8235 000b 820d 000b                         5.......

000bbe4c <_ZTV11USARTSerial>:
	...
   bbe54:	8365 000b 83d1 000b 83a9 000b 7761 000b     e...........aw..
   bbe64:	8379 000b 8395 000b 8387 000b 83a3 000b     y...............
   bbe74:	8367 000b 836b 000b                         g...k...

000bbe7c <_ZTV7TwoWire>:
	...
   bbe84:	8431 000b 847b 000b 8453 000b 8433 000b     1...{...S...3...
   bbe94:	845b 000b 8463 000b 846b 000b 8473 000b     [...c...k...s...

000bbea4 <_ZTVN5spark9WiFiClassE>:
	...
   bbeac:	850b 000b 8501 000b 84f7 000b 84ad 000b     ................
   bbebc:	84eb 000b 84df 000b 8569 000b 8571 000b     ........i...q...
   bbecc:	84d3 000b 84cb 000b 84c1 000b 84b7 000b     ................
   bbedc:	85a1 000b                                   ....

000bbee0 <_ZTVN5spark12NetworkClassE>:
	...
   bbee8:	8529 000b 8533 000b 853d 000b 8547 000b     )...3...=...G...
   bbef8:	8551 000b 855d 000b 8569 000b 8571 000b     Q...]...i...q...
   bbf08:	8579 000b 8585 000b 858d 000b 8597 000b     y...............
   bbf18:	85a1 000b                                   ....

000bbf1c <_ZSt7nothrow>:
	...

000bbf1d <_ZTSSt19_Sp_make_shared_tag>:
   bbf1d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bbf2d:	6572 5f64 6174 0067 0000                     red_tag....

000bbf38 <_ZTISt19_Sp_make_shared_tag>:
   bbf38:	bf78 000b bf1d 000b                         x.......

000bbf40 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bbf40:	bfd8 000b bf4c 000b bffc 000b               ....L.......

000bbf4c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bbf4c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bbf5c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bbf6c:	0045 0000                                   E...

000bbf70 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bbf70:	0000 0000 bf40 000b 8879 000b 888d 000b     ....@...y.......
   bbf80:	8a21 000b 8a21 000b 88f7 000b 8839 000b     !...!.......9...
   bbf90:	88df 000b 88a1 000b 886b 000b               ........k...

000bbf9c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bbf9c:	bfd8 000b bfa8 000b bf40 000b               ........@...

000bbfa8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bbfa8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bbfb8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bbfc8:	666e 456f 0000 0000                         nfoE....

000bbfd0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bbfd0:	0000 0000 bf9c 000b 8921 000b 8935 000b     ........!...5...
   bbfe0:	8a21 000b 8a21 000b 88f7 000b 8839 000b     !...!.......9...
   bbff0:	89f5 000b 8981 000b 8949 000b               ........I...

000bbffc <_ZTISt9type_info>:
   bbffc:	bf78 000b c004 000b                         x.......

000bc004 <_ZTSSt9type_info>:
   bc004:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bc014:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bc024:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bc034:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bc044:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bc054:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bc064:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bc074:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bc084:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bc094:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bc0a4:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bc0b4 <fpi.1>:
   bc0b4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bc0c4:	0000 0000                                   ....

000bc0c8 <fpinan.0>:
   bc0c8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bc0e0 <tinytens>:
   bc0e0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bc0f0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bc100:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bc110:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bc120:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bc130:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bc140:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bc150:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bc160:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bc170:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bc180:	7472 6b6f 632e                               rtok.c.

000bc187 <_ctype_>:
   bc187:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bc197:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bc1a7:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bc1b7:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bc1c7:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bc1d7:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bc1e7:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bc1f7:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bc207:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bc287:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bc297:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bc2a7:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bc2b7:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bc2c7:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bc2d7:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bc2e7:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bc2f7:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bc307:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bc317:	6874 7865 632e 0000                          thex.c...

000bc320 <_C_numeric_locale>:
   bc320:	b600 000b b9a9 000b d98c 2003 0043 4f50     ........... C.PO
   bc330:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bc340:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bc350:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bc360:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bc370:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bc380:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bc390:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bc3a0:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bc3b0:	0063 0000 0000 0000                         c.......

000bc3b8 <__mprec_bigtens>:
   bc3b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bc3c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bc3d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bc3e0 <__mprec_tens>:
   bc3e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bc3f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bc400:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bc410:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bc420:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bc430:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bc440:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bc450:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bc460:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bc470:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bc480:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bc490:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bc4a0:	9db4 79d9 7843 44ea                         ...yCx.D

000bc4a8 <p05.0>:
   bc4a8:	0005 0000 0019 0000 007d 0000               ........}...

000bc4b4 <link_const_variable_data_end>:
   bc4b4:	000b4f91 	.word	0x000b4f91
   bc4b8:	000b5325 	.word	0x000b5325
   bc4bc:	000b5a95 	.word	0x000b5a95
   bc4c0:	000b5ae1 	.word	0x000b5ae1
   bc4c4:	000b7751 	.word	0x000b7751
   bc4c8:	000b7881 	.word	0x000b7881
   bc4cc:	000b7a51 	.word	0x000b7a51
   bc4d0:	000b7a6d 	.word	0x000b7a6d
   bc4d4:	000b8515 	.word	0x000b8515
   bc4d8:	000b8679 	.word	0x000b8679

000bc4dc <link_constructors_end>:
   bc4dc:	00000000 	.word	0x00000000
