
<<<<<<< HEAD
c:/Users/mathi/Desktop/IOT/ElecPrice/ArgonCode/target/4.0.1/argon/ArgonCode.elf:     file format elf32-littlearm
=======
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/4.0.1/argon/ArgonCode.elf:     file format elf32-littlearm
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  2 .text         0000a550  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be570  000be570  0000e570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be594  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000208  2003d8f4  000be598  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000cf4  2003db00  2003db00  0002db00  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000be7a0  000be7a0  0001e7a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be7c8  000be7c8  0001e7c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00172d79  00000000  00000000  0001e7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001a579  00000000  00000000  00191545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004546c  00000000  00000000  001ababe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003a18  00000000  00000000  001f0f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c4b8  00000000  00000000  001f4942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00043cc6  00000000  00000000  00200dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005613a  00000000  00000000  00244ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f7e5  00000000  00000000  0029abfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ac20  00000000  00000000  003da3e0  2**2
=======
  2 .text         000087c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bc7e0  000bc7e0  0000c7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bc804  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000208  2003d954  000bc808  0001d954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000c94  2003db60  2003db60  0002db60  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bca10  000bca10  0002ca10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bca38  000bca38  0002ca38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00144622  00000000  00000000  0002ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015fbb  00000000  00000000  0017105e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003db45  00000000  00000000  00187019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003668  00000000  00000000  001c4b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b610  00000000  00000000  001c81c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d93c  00000000  00000000  001d37d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00048882  00000000  00000000  00211112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b08c  00000000  00000000  00259994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009fbc  00000000  00000000  00394a20  2**2
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
<<<<<<< HEAD
   b4032:	f007 f97a 	bl	bb32a <memcpy>
=======
   b4032:	f005 fb7e 	bl	b9732 <memcpy>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
<<<<<<< HEAD
   b403e:	f007 f99c 	bl	bb37a <memset>
=======
   b403e:	f005 fba0 	bl	b9782 <memset>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
<<<<<<< HEAD
   b4048:	2003d8f4 	.word	0x2003d8f4
   b404c:	000be598 	.word	0x000be598
   b4050:	2003dafc 	.word	0x2003dafc
   b4054:	2003db00 	.word	0x2003db00
=======
   b4048:	2003d954 	.word	0x2003d954
   b404c:	000bc808 	.word	0x000bc808
   b4050:	2003db5c 	.word	0x2003db5c
   b4054:	2003db60 	.word	0x2003db60
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
<<<<<<< HEAD
   b4062:	f005 f93f 	bl	b92e4 <module_user_init_hook>
=======
   b4062:	f003 fe2f 	bl	b7cc4 <module_user_init_hook>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
<<<<<<< HEAD
   b407c:	000be544 	.word	0x000be544
   b4080:	000be56c 	.word	0x000be56c
=======
   b407c:	000bc7ac 	.word	0x000bc7ac
   b4080:	000bc7d4 	.word	0x000bc7d4
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
<<<<<<< HEAD
   b4084:	f000 bd3a 	b.w	b4afc <setup>
=======
   b4084:	f000 bd92 	b.w	b4bac <setup>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
<<<<<<< HEAD
   b408a:	f000 fed5 	bl	b4e38 <loop>
=======
   b408a:	f000 fe85 	bl	b4d98 <loop>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
<<<<<<< HEAD
   b4092:	f005 b8df 	b.w	b9254 <_post_loop>
=======
   b4092:	f003 bdcf 	b.w	b7c34 <_post_loop>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
<<<<<<< HEAD
   b4096:	f002 bef5 	b.w	b6e84 <malloc>

000b409a <_Znaj>:
   b409a:	f002 bef3 	b.w	b6e84 <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 bef9 	b.w	b6e94 <free>

000b40a2 <_ZdlPvj>:
=======
   b4096:	f001 bd0f 	b.w	b5ab8 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bd0d 	b.w	b5ab8 <malloc>

000b409e <_ZdlPvj>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
<<<<<<< HEAD
   b40a2:	f002 bef7 	b.w	b6e94 <free>

000b40a6 <__cxa_guard_acquire>:
=======
   b409e:	f001 bd13 	b.w	b5ac8 <free>

000b40a2 <__cxa_guard_acquire>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
<<<<<<< HEAD
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z8callbackPcPhj>:
    }
}

void callback(char *topic, byte *payload, unsigned int length)
{
    GET_DATA = true;    
   b40b8:	4b01      	ldr	r3, [pc, #4]	; (b40c0 <_Z8callbackPcPhj+0x8>)
   b40ba:	2201      	movs	r2, #1
   b40bc:	701a      	strb	r2, [r3, #0]
}
   b40be:	4770      	bx	lr
   b40c0:	2003db1c 	.word	0x2003db1c

000b40c4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
{
   b40c4:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40c6:	4b04      	ldr	r3, [pc, #16]	; (b40d8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40c8:	2201      	movs	r2, #1
   b40ca:	701a      	strb	r2, [r3, #0]
=======
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
}
/**
 * @brief    Sets a flag when a new BLE connection is established
 */
void BLEOnConnectcallback(const BlePeerDevice &peer, void *context)
{
   b40b4:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40b6:	4b04      	ldr	r3, [pc, #16]	; (b40c8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40b8:	2201      	movs	r2, #1
   b40ba:	701a      	strb	r2, [r3, #0]
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
<<<<<<< HEAD
   b40cc:	f002 fbc4 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40d0:	4b02      	ldr	r3, [pc, #8]	; (b40dc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40d2:	6018      	str	r0, [r3, #0]
}
   b40d4:	bd08      	pop	{r3, pc}
   b40d6:	bf00      	nop
   b40d8:	2003db1d 	.word	0x2003db1d
   b40dc:	2003dca8 	.word	0x2003dca8

000b40e0 <_Z13handle_sensorv>:
{
   b40e0:	b508      	push	{r3, lr}
   b40e2:	f002 fbb9 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta = current_reading - last_read;
   b40e6:	490c      	ldr	r1, [pc, #48]	; (b4118 <_Z13handle_sensorv+0x38>)
   b40e8:	680b      	ldr	r3, [r1, #0]
   b40ea:	1ac3      	subs	r3, r0, r3
    if (delta > 100)
   b40ec:	2b64      	cmp	r3, #100	; 0x64
   b40ee:	d911      	bls.n	b4114 <_Z13handle_sensorv+0x34>
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40f0:	4a0a      	ldr	r2, [pc, #40]	; (b411c <_Z13handle_sensorv+0x3c>)
   b40f2:	fbb2 f3f3 	udiv	r3, r2, r3
   b40f6:	4a0a      	ldr	r2, [pc, #40]	; (b4120 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b40f8:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40fa:	6013      	str	r3, [r2, #0]
        wh_today[currentHour] += 1;
   b40fc:	4b09      	ldr	r3, [pc, #36]	; (b4124 <_Z13handle_sensorv+0x44>)
   b40fe:	7819      	ldrb	r1, [r3, #0]
   b4100:	4b09      	ldr	r3, [pc, #36]	; (b4128 <_Z13handle_sensorv+0x48>)
   b4102:	681a      	ldr	r2, [r3, #0]
   b4104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b4108:	3301      	adds	r3, #1
   b410a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        TRANSMIT_SENSOR = true;
   b410e:	4b07      	ldr	r3, [pc, #28]	; (b412c <_Z13handle_sensorv+0x4c>)
   b4110:	2201      	movs	r2, #1
   b4112:	701a      	strb	r2, [r3, #0]
}
   b4114:	bd08      	pop	{r3, pc}
   b4116:	bf00      	nop
   b4118:	2003dbcc 	.word	0x2003dbcc
   b411c:	0036ee80 	.word	0x0036ee80
   b4120:	2003dc34 	.word	0x2003dc34
   b4124:	2003dca4 	.word	0x2003dca4
   b4128:	2003e1b8 	.word	0x2003e1b8
   b412c:	2003db22 	.word	0x2003db22

000b4130 <_ZN5Timer7timeoutEv>:
=======
   b40bc:	f001 fa0e 	bl	b54dc <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40c0:	4b02      	ldr	r3, [pc, #8]	; (b40cc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40c2:	6018      	str	r0, [r3, #0]
}
   b40c4:	bd08      	pop	{r3, pc}
   b40c6:	bf00      	nop
   b40c8:	2003db7d 	.word	0x2003db7d
   b40cc:	2003dca8 	.word	0x2003dca8

000b40d0 <_Z13handle_sensorv>:
/**
 * @brief    IRQ handler for the KW sensor. This function is called every time the KW sensor detects a pulse.
 */
void handle_sensor(void)
{
   b40d0:	b508      	push	{r3, lr}
   b40d2:	f001 fa03 	bl	b54dc <HAL_Timer_Get_Milli_Seconds>
    static unsigned long last_read = 0;
    unsigned long current_reading = millis();
    unsigned long delta = current_reading - last_read;
   b40d6:	490c      	ldr	r1, [pc, #48]	; (b4108 <_Z13handle_sensorv+0x38>)
   b40d8:	680b      	ldr	r3, [r1, #0]
   b40da:	1ac3      	subs	r3, r0, r3

    // Check if we have a valid reading. I.e. at least 100 ms since last reading, which is equal to 36kW
    if (delta > 100)
   b40dc:	2b64      	cmp	r3, #100	; 0x64
   b40de:	d911      	bls.n	b4104 <_Z13handle_sensorv+0x34>
    {
        // We have a valid reading
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40e0:	4a0a      	ldr	r2, [pc, #40]	; (b410c <_Z13handle_sensorv+0x3c>)
   b40e2:	fbb2 f3f3 	udiv	r3, r2, r3
   b40e6:	4a0a      	ldr	r2, [pc, #40]	; (b4110 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b40e8:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40ea:	6013      	str	r3, [r2, #0]

        // One flash from sensor equals 1 Whr - Add to total
        wh_today[currentHour] += 1;
   b40ec:	4b09      	ldr	r3, [pc, #36]	; (b4114 <_Z13handle_sensorv+0x44>)
   b40ee:	7819      	ldrb	r1, [r3, #0]
   b40f0:	4b09      	ldr	r3, [pc, #36]	; (b4118 <_Z13handle_sensorv+0x48>)
   b40f2:	681a      	ldr	r2, [r3, #0]
   b40f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b40f8:	3301      	adds	r3, #1
   b40fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update flag - Transmit sensor values
        TRANSMIT_SENSOR = true;
   b40fe:	4b07      	ldr	r3, [pc, #28]	; (b411c <_Z13handle_sensorv+0x4c>)
   b4100:	2201      	movs	r2, #1
   b4102:	701a      	strb	r2, [r3, #0]
    }
}
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	2003dc2c 	.word	0x2003dc2c
   b410c:	0036ee80 	.word	0x0036ee80
   b4110:	2003dc94 	.word	0x2003dc94
   b4114:	2003dca4 	.word	0x2003dca4
   b4118:	2003e1b8 	.word	0x2003e1b8
   b411c:	2003db82 	.word	0x2003db82

000b4120 <_ZN5Timer7timeoutEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
<<<<<<< HEAD
   b4130:	6943      	ldr	r3, [r0, #20]
   b4132:	b113      	cbz	r3, b413a <_ZN5Timer7timeoutEv+0xa>
=======
   b4120:	6943      	ldr	r3, [r0, #20]
   b4122:	b113      	cbz	r3, b412a <_ZN5Timer7timeoutEv+0xa>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
<<<<<<< HEAD
   b4134:	6983      	ldr	r3, [r0, #24]
   b4136:	300c      	adds	r0, #12
   b4138:	4718      	bx	r3
            callback();
        }
    }
   b413a:	4770      	bx	lr

000b413c <_ZN5Timer12invoke_timerEPv>:
=======
   b4124:	6983      	ldr	r3, [r0, #24]
   b4126:	300c      	adds	r0, #12
   b4128:	4718      	bx	r3
            callback();
        }
    }
   b412a:	4770      	bx	lr

000b412c <_ZN5Timer12invoke_timerEPv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
<<<<<<< HEAD
   b413c:	b513      	push	{r0, r1, r4, lr}
=======
   b412c:	b513      	push	{r0, r1, r4, lr}
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
<<<<<<< HEAD
   b413e:	2100      	movs	r1, #0
   b4140:	4604      	mov	r4, r0
   b4142:	4608      	mov	r0, r1
   b4144:	f002 fc2a 	bl	b699c <os_thread_scheduling>
=======
   b412e:	2100      	movs	r1, #0
   b4130:	4604      	mov	r4, r0
   b4132:	4608      	mov	r0, r1
   b4134:	f001 fa7c 	bl	b5630 <os_thread_scheduling>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
<<<<<<< HEAD
   b4148:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b414a:	4620      	mov	r0, r4
   b414c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b414e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4150:	f002 fc3c 	bl	b69cc <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4154:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4156:	b10c      	cbz	r4, b415c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4158:	2301      	movs	r3, #1
   b415a:	7123      	strb	r3, [r4, #4]
=======
   b4138:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b413a:	4620      	mov	r0, r4
   b413c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b413e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4140:	f001 fa8e 	bl	b5660 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4144:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4146:	b10c      	cbz	r4, b414c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4148:	2301      	movs	r3, #1
   b414a:	7123      	strb	r3, [r4, #4]
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
<<<<<<< HEAD
   b415c:	2100      	movs	r1, #0
   b415e:	2001      	movs	r0, #1
   b4160:	f002 fc1c 	bl	b699c <os_thread_scheduling>
            }
        }
        if (t) {
   b4164:	b12c      	cbz	r4, b4172 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4166:	6823      	ldr	r3, [r4, #0]
   b4168:	4620      	mov	r0, r4
   b416a:	689b      	ldr	r3, [r3, #8]
   b416c:	4798      	blx	r3
            t->running = false;
   b416e:	2300      	movs	r3, #0
   b4170:	7123      	strb	r3, [r4, #4]
        }
    }
   b4172:	b002      	add	sp, #8
   b4174:	bd10      	pop	{r4, pc}

000b4176 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4176:	2a01      	cmp	r2, #1
   b4178:	d102      	bne.n	b4180 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b417a:	6001      	str	r1, [r0, #0]
      }
   b417c:	2000      	movs	r0, #0
   b417e:	4770      	bx	lr
	  switch (__op)
   b4180:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4182:	bf04      	itt	eq
   b4184:	680b      	ldreq	r3, [r1, #0]
   b4186:	6003      	streq	r3, [r0, #0]
	      break;
   b4188:	e7f8      	b.n	b417c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b418a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
=======
   b414c:	2100      	movs	r1, #0
   b414e:	2001      	movs	r0, #1
   b4150:	f001 fa6e 	bl	b5630 <os_thread_scheduling>
            }
        }
        if (t) {
   b4154:	b12c      	cbz	r4, b4162 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4156:	6823      	ldr	r3, [r4, #0]
   b4158:	4620      	mov	r0, r4
   b415a:	689b      	ldr	r3, [r3, #8]
   b415c:	4798      	blx	r3
            t->running = false;
   b415e:	2300      	movs	r3, #0
   b4160:	7123      	strb	r3, [r4, #4]
        }
    }
   b4162:	b002      	add	sp, #8
   b4164:	bd10      	pop	{r4, pc}

000b4166 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4166:	2a01      	cmp	r2, #1
   b4168:	d102      	bne.n	b4170 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416a:	6001      	str	r1, [r0, #0]
      }
   b416c:	2000      	movs	r0, #0
   b416e:	4770      	bx	lr
	  switch (__op)
   b4170:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4172:	bf04      	itt	eq
   b4174:	680b      	ldreq	r3, [r1, #0]
   b4176:	6003      	streq	r3, [r0, #0]
	      break;
   b4178:	e7f8      	b.n	b416c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
<<<<<<< HEAD
   b418a:	6803      	ldr	r3, [r0, #0]
   b418c:	4718      	bx	r3

000b418e <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b418e:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4190:	6880      	ldr	r0, [r0, #8]
   b4192:	b130      	cbz	r0, b41a2 <_ZN5Timer4stopEj.isra.0+0x14>
   b4194:	2300      	movs	r3, #0
   b4196:	e9cd 1300 	strd	r1, r3, [sp]
   b419a:	461a      	mov	r2, r3
   b419c:	2102      	movs	r1, #2
   b419e:	f002 fc1d 	bl	b69dc <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b41a2:	b003      	add	sp, #12
   b41a4:	f85d fb04 	ldr.w	pc, [sp], #4

000b41a8 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b41a8:	b530      	push	{r4, r5, lr}
   b41aa:	4605      	mov	r5, r0
   b41ac:	b085      	sub	sp, #20
   b41ae:	460c      	mov	r4, r1
        stop(fromISR);
   b41b0:	4611      	mov	r1, r2
   b41b2:	9203      	str	r2, [sp, #12]
   b41b4:	f7ff ffeb 	bl	b418e <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41b8:	68a8      	ldr	r0, [r5, #8]
   b41ba:	b130      	cbz	r0, b41ca <_ZN5Timer6_startEjb.isra.0+0x22>
   b41bc:	2300      	movs	r3, #0
   b41be:	e9cd 4300 	strd	r4, r3, [sp]
   b41c2:	9a03      	ldr	r2, [sp, #12]
   b41c4:	4619      	mov	r1, r3
   b41c6:	f002 fc09 	bl	b69dc <os_timer_change>
    }
   b41ca:	b005      	add	sp, #20
   b41cc:	bd30      	pop	{r4, r5, pc}
	...

000b41d0 <_Z10check_timev>:
=======
   b417a:	6803      	ldr	r3, [r0, #0]
   b417c:	4718      	bx	r3

000b417e <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b417e:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4180:	6880      	ldr	r0, [r0, #8]
   b4182:	b130      	cbz	r0, b4192 <_ZN5Timer4stopEj.isra.0+0x14>
   b4184:	2300      	movs	r3, #0
   b4186:	e9cd 1300 	strd	r1, r3, [sp]
   b418a:	461a      	mov	r2, r3
   b418c:	2102      	movs	r1, #2
   b418e:	f001 fa6f 	bl	b5670 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4192:	b003      	add	sp, #12
   b4194:	f85d fb04 	ldr.w	pc, [sp], #4

000b4198 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b4198:	b530      	push	{r4, r5, lr}
   b419a:	4605      	mov	r5, r0
   b419c:	b085      	sub	sp, #20
   b419e:	460c      	mov	r4, r1
        stop(fromISR);
   b41a0:	4611      	mov	r1, r2
   b41a2:	9203      	str	r2, [sp, #12]
   b41a4:	f7ff ffeb 	bl	b417e <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41a8:	68a8      	ldr	r0, [r5, #8]
   b41aa:	b130      	cbz	r0, b41ba <_ZN5Timer6_startEjb.isra.0+0x22>
   b41ac:	2300      	movs	r3, #0
   b41ae:	e9cd 4300 	strd	r4, r3, [sp]
   b41b2:	9a03      	ldr	r2, [sp, #12]
   b41b4:	4619      	mov	r1, r3
   b41b6:	f001 fa5b 	bl	b5670 <os_timer_change>
    }
   b41ba:	b005      	add	sp, #20
   b41bc:	bd30      	pop	{r4, r5, pc}
	...

000b41c0 <_Z10check_timev>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
<<<<<<< HEAD
   b41d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b41d4:	f004 ffae 	bl	b9134 <_ZN9TimeClass4hourEv>
   b41d8:	4f26      	ldr	r7, [pc, #152]	; (b4274 <_Z10check_timev+0xa4>)
=======
   b41c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b41c4:	f003 fcbc 	bl	b7b40 <_ZN9TimeClass4hourEv>
   b41c8:	4f26      	ldr	r7, [pc, #152]	; (b4264 <_Z10check_timev+0xa4>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
<<<<<<< HEAD
   b41da:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4278 <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b41de:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b41e0:	f004 ffb4 	bl	b914c <_ZN9TimeClass6minuteEv>
   b41e4:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b41e6:	f004 ffbd 	bl	b9164 <_ZN9TimeClass6secondEv>
   b41ea:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b41ec:	f004 ffc6 	bl	b917c <_ZN9TimeClass3dayEv>
    timer.stop();
   b41f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b41f4:	4604      	mov	r4, r0
    timer.stop();
   b41f6:	4640      	mov	r0, r8
   b41f8:	f7ff ffc9 	bl	b418e <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b41fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b4200:	b178      	cbz	r0, b4222 <_Z10check_timev+0x52>
   b4202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b4206:	b2ed      	uxtb	r5, r5
   b4208:	2200      	movs	r2, #0
   b420a:	e9cd 1200 	strd	r1, r2, [sp]
   b420e:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4212:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4216:	43ed      	mvns	r5, r5
   b4218:	fb01 5303 	mla	r3, r1, r3, r5
   b421c:	2103      	movs	r1, #3
   b421e:	f002 fbdd 	bl	b69dc <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4222:	4815      	ldr	r0, [pc, #84]	; (b4278 <_Z10check_timev+0xa8>)
   b4224:	2200      	movs	r2, #0
   b4226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b422a:	f7ff ffbd 	bl	b41a8 <_ZN5Timer6_startEjb.isra.0>
=======
   b41ca:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4268 <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b41ce:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b41d0:	f003 fcc2 	bl	b7b58 <_ZN9TimeClass6minuteEv>
   b41d4:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b41d6:	f003 fccb 	bl	b7b70 <_ZN9TimeClass6secondEv>
   b41da:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b41dc:	f003 fcd4 	bl	b7b88 <_ZN9TimeClass3dayEv>
    timer.stop();
   b41e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b41e4:	4604      	mov	r4, r0
    timer.stop();
   b41e6:	4640      	mov	r0, r8
   b41e8:	f7ff ffc9 	bl	b417e <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b41ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b41f0:	b178      	cbz	r0, b4212 <_Z10check_timev+0x52>
   b41f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b41f6:	b2ed      	uxtb	r5, r5
   b41f8:	2200      	movs	r2, #0
   b41fa:	e9cd 1200 	strd	r1, r2, [sp]
   b41fe:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4202:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4206:	43ed      	mvns	r5, r5
   b4208:	fb01 5303 	mla	r3, r1, r3, r5
   b420c:	2103      	movs	r1, #3
   b420e:	f001 fa2f 	bl	b5670 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4212:	4815      	ldr	r0, [pc, #84]	; (b4268 <_Z10check_timev+0xa8>)
   b4214:	2200      	movs	r2, #0
   b4216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b421a:	f7ff ffbd 	bl	b4198 <_ZN5Timer6_startEjb.isra.0>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
<<<<<<< HEAD
   b422e:	783b      	ldrb	r3, [r7, #0]
   b4230:	2b0d      	cmp	r3, #13
   b4232:	d114      	bne.n	b425e <_Z10check_timev+0x8e>
   b4234:	4a11      	ldr	r2, [pc, #68]	; (b427c <_Z10check_timev+0xac>)
   b4236:	6811      	ldr	r1, [r2, #0]
   b4238:	b2e4      	uxtb	r4, r4
   b423a:	42a1      	cmp	r1, r4
   b423c:	d003      	beq.n	b4246 <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b423e:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4240:	4a0f      	ldr	r2, [pc, #60]	; (b4280 <_Z10check_timev+0xb0>)
=======
   b421e:	783b      	ldrb	r3, [r7, #0]
   b4220:	2b0d      	cmp	r3, #13
   b4222:	d114      	bne.n	b424e <_Z10check_timev+0x8e>
   b4224:	4a11      	ldr	r2, [pc, #68]	; (b426c <_Z10check_timev+0xac>)
   b4226:	6811      	ldr	r1, [r2, #0]
   b4228:	b2e4      	uxtb	r4, r4
   b422a:	42a1      	cmp	r1, r4
   b422c:	d003      	beq.n	b4236 <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b422e:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4230:	4a0f      	ldr	r2, [pc, #60]	; (b4270 <_Z10check_timev+0xb0>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
<<<<<<< HEAD
   b4242:	2101      	movs	r1, #1
   b4244:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4246:	b93e      	cbnz	r6, b4258 <_Z10check_timev+0x88>
   b4248:	4a0e      	ldr	r2, [pc, #56]	; (b4284 <_Z10check_timev+0xb4>)
   b424a:	6811      	ldr	r1, [r2, #0]
   b424c:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b424e:	bf1f      	itttt	ne
   b4250:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4252:	4b0d      	ldrne	r3, [pc, #52]	; (b4288 <_Z10check_timev+0xb8>)
   b4254:	2201      	movne	r2, #1
   b4256:	701a      	strbne	r2, [r3, #0]
    }
   b4258:	b002      	add	sp, #8
   b425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b425e:	2b00      	cmp	r3, #0
   b4260:	d1f1      	bne.n	b4246 <_Z10check_timev+0x76>
   b4262:	4a0a      	ldr	r2, [pc, #40]	; (b428c <_Z10check_timev+0xbc>)
   b4264:	6811      	ldr	r1, [r2, #0]
   b4266:	b2e4      	uxtb	r4, r4
   b4268:	42a1      	cmp	r1, r4
   b426a:	d0ec      	beq.n	b4246 <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b426c:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b426e:	4a08      	ldr	r2, [pc, #32]	; (b4290 <_Z10check_timev+0xc0>)
   b4270:	e7e7      	b.n	b4242 <_Z10check_timev+0x72>
   b4272:	bf00      	nop
   b4274:	2003dca4 	.word	0x2003dca4
   b4278:	2003e150 	.word	0x2003e150
   b427c:	2003d90c 	.word	0x2003d90c
   b4280:	2003db1c 	.word	0x2003db1c
   b4284:	2003d914 	.word	0x2003d914
   b4288:	2003db23 	.word	0x2003db23
   b428c:	2003d910 	.word	0x2003d910
   b4290:	2003db1e 	.word	0x2003db1e

000b4294 <_ZN5Print6printfEPKcz>:
=======
   b4232:	2101      	movs	r1, #1
   b4234:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4236:	b93e      	cbnz	r6, b4248 <_Z10check_timev+0x88>
   b4238:	4a0e      	ldr	r2, [pc, #56]	; (b4274 <_Z10check_timev+0xb4>)
   b423a:	6811      	ldr	r1, [r2, #0]
   b423c:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b423e:	bf1f      	itttt	ne
   b4240:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4242:	4b0d      	ldrne	r3, [pc, #52]	; (b4278 <_Z10check_timev+0xb8>)
   b4244:	2201      	movne	r2, #1
   b4246:	701a      	strbne	r2, [r3, #0]
    }
   b4248:	b002      	add	sp, #8
   b424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b424e:	2b00      	cmp	r3, #0
   b4250:	d1f1      	bne.n	b4236 <_Z10check_timev+0x76>
   b4252:	4a0a      	ldr	r2, [pc, #40]	; (b427c <_Z10check_timev+0xbc>)
   b4254:	6811      	ldr	r1, [r2, #0]
   b4256:	b2e4      	uxtb	r4, r4
   b4258:	42a1      	cmp	r1, r4
   b425a:	d0ec      	beq.n	b4236 <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b425c:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b425e:	4a08      	ldr	r2, [pc, #32]	; (b4280 <_Z10check_timev+0xc0>)
   b4260:	e7e7      	b.n	b4232 <_Z10check_timev+0x72>
   b4262:	bf00      	nop
   b4264:	2003dca4 	.word	0x2003dca4
   b4268:	2003e150 	.word	0x2003e150
   b426c:	2003d96c 	.word	0x2003d96c
   b4270:	2003db7c 	.word	0x2003db7c
   b4274:	2003d974 	.word	0x2003d974
   b4278:	2003db83 	.word	0x2003db83
   b427c:	2003d970 	.word	0x2003d970
   b4280:	2003db7e 	.word	0x2003db7e

000b4284 <_ZN5Print6printfEPKcz>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
<<<<<<< HEAD
   b4294:	b40e      	push	{r1, r2, r3}
   b4296:	b503      	push	{r0, r1, lr}
   b4298:	ab03      	add	r3, sp, #12
=======
   b4284:	b40e      	push	{r1, r2, r3}
   b4286:	b503      	push	{r0, r1, lr}
   b4288:	ab03      	add	r3, sp, #12
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
<<<<<<< HEAD
   b429a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b429c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42a0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42a2:	f004 fe72 	bl	b8f8a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42a6:	b002      	add	sp, #8
   b42a8:	f85d eb04 	ldr.w	lr, [sp], #4
   b42ac:	b003      	add	sp, #12
   b42ae:	4770      	bx	lr

000b42b0 <_Z9myHandlerPKcS0_>:
=======
   b428a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b428c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4290:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4292:	f003 fb80 	bl	b7996 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4296:	b002      	add	sp, #8
   b4298:	f85d eb04 	ldr.w	lr, [sp], #4
   b429c:	b003      	add	sp, #12
   b429e:	4770      	bx	lr

000b42a0 <_Z9myHandlerPKcS0_>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
<<<<<<< HEAD
   b42b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b42b4:	4605      	mov	r5, r0
=======
   b42a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b42a4:	4605      	mov	r5, r0
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
<<<<<<< HEAD
   b42b6:	4608      	mov	r0, r1
{
   b42b8:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b42ba:	f007 f8d4 	bl	bb466 <strlen>
=======
   b42a6:	4608      	mov	r0, r1
{
   b42a8:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b42aa:	f005 fae0 	bl	b986e <strlen>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
<<<<<<< HEAD
   b42be:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b42c0:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b42c2:	a801      	add	r0, sp, #4
   b42c4:	f007 f8a9 	bl	bb41a <strcpy>
=======
   b42ae:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b42b0:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b42b2:	a801      	add	r0, sp, #4
   b42b4:	f005 fab5 	bl	b9822 <strcpy>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
<<<<<<< HEAD
   b42c8:	4939      	ldr	r1, [pc, #228]	; (b43b0 <_Z9myHandlerPKcS0_+0x100>)
   b42ca:	4d3a      	ldr	r5, [pc, #232]	; (b43b4 <_Z9myHandlerPKcS0_+0x104>)
   b42cc:	a801      	add	r0, sp, #4
   b42ce:	f007 ff35 	bl	bc13c <strtok>
   b42d2:	f007 f802 	bl	bb2da <atoi>
   b42d6:	4621      	mov	r1, r4
   b42d8:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b42dc:	f007 f884 	bl	bb3e8 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b42e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b42e4:	d218      	bcs.n	b4318 <_Z9myHandlerPKcS0_+0x68>
=======
   b42b8:	4939      	ldr	r1, [pc, #228]	; (b43a0 <_Z9myHandlerPKcS0_+0x100>)
   b42ba:	4d3a      	ldr	r5, [pc, #232]	; (b43a4 <_Z9myHandlerPKcS0_+0x104>)
   b42bc:	a801      	add	r0, sp, #4
   b42be:	f006 f92d 	bl	ba51c <strtok>
   b42c2:	f005 fa22 	bl	b970a <atoi>
   b42c6:	4621      	mov	r1, r4
   b42c8:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b42cc:	f005 fa90 	bl	b97f0 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b42d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b42d4:	d232      	bcs.n	b433c <_Z9myHandlerPKcS0_+0x9c>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
<<<<<<< HEAD
   b42e6:	f005 fbc3 	bl	b9a70 <_Z16_fetch_usbserialv>
   b42ea:	4933      	ldr	r1, [pc, #204]	; (b43b8 <_Z9myHandlerPKcS0_+0x108>)
=======
   b42d6:	f004 f8af 	bl	b8438 <_Z16_fetch_usbserialv>
   b42da:	4933      	ldr	r1, [pc, #204]	; (b43a8 <_Z9myHandlerPKcS0_+0x108>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
<<<<<<< HEAD
   b42ec:	4f33      	ldr	r7, [pc, #204]	; (b43bc <_Z9myHandlerPKcS0_+0x10c>)
        Serial.printf("%s\n", temp);
   b42ee:	462a      	mov	r2, r5
   b42f0:	f7ff ffd0 	bl	b4294 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b42f4:	4932      	ldr	r1, [pc, #200]	; (b43c0 <_Z9myHandlerPKcS0_+0x110>)
   b42f6:	4628      	mov	r0, r5
   b42f8:	f007 ff20 	bl	bc13c <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b42fc:	f20f 0998 	addw	r9, pc, #152	; 0x98
   b4300:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b4304:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4306:	2600      	movs	r6, #0
            token = strtok(NULL, ",!");
   b4308:	492d      	ldr	r1, [pc, #180]	; (b43c0 <_Z9myHandlerPKcS0_+0x110>)
   b430a:	2000      	movs	r0, #0
   b430c:	f007 ff16 	bl	bc13c <strtok>
            if (token == NULL)
   b4310:	b928      	cbnz	r0, b431e <_Z9myHandlerPKcS0_+0x6e>
            }

        }
        CALCULATE = true;
   b4312:	4b2c      	ldr	r3, [pc, #176]	; (b43c4 <_Z9myHandlerPKcS0_+0x114>)
   b4314:	2201      	movs	r2, #1
   b4316:	701a      	strb	r2, [r3, #0]
    }
   b4318:	b004      	add	sp, #16
   b431a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i >= 0 && i < 7)
   b431e:	2c06      	cmp	r4, #6
   b4320:	f8df a0a4 	ldr.w	sl, [pc, #164]	; b43c8 <_Z9myHandlerPKcS0_+0x118>
   b4324:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b4328:	dc15      	bgt.n	b4356 <_Z9myHandlerPKcS0_+0xa6>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b432a:	f006 ffd3 	bl	bb2d4 <atof>
   b432e:	f8da 3000 	ldr.w	r3, [sl]
   b4332:	4632      	mov	r2, r6
   b4334:	ec51 0b10 	vmov	r0, r1, d0
   b4338:	441d      	add	r5, r3
   b433a:	463b      	mov	r3, r7
   b433c:	f006 fde2 	bl	baf04 <__aeabi_ddiv>
   b4340:	a317      	add	r3, pc, #92	; (adr r3, b43a0 <_Z9myHandlerPKcS0_+0xf0>)
   b4342:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4346:	f006 fafd 	bl	ba944 <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b434a:	3401      	adds	r4, #1
   b434c:	2c18      	cmp	r4, #24
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b434e:	e9c5 0100 	strd	r0, r1, [r5]
        for (int i = 0; i < MAX_RANGE; i++)
   b4352:	d1d9      	bne.n	b4308 <_Z9myHandlerPKcS0_+0x58>
   b4354:	e7dd      	b.n	b4312 <_Z9myHandlerPKcS0_+0x62>
            else if (i > 16 && i < 22)
   b4356:	f1a4 0311 	sub.w	r3, r4, #17
   b435a:	2b04      	cmp	r3, #4
   b435c:	d80d      	bhi.n	b437a <_Z9myHandlerPKcS0_+0xca>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b435e:	f006 ffb9 	bl	bb2d4 <atof>
   b4362:	f8da 3000 	ldr.w	r3, [sl]
   b4366:	4632      	mov	r2, r6
   b4368:	ec51 0b10 	vmov	r0, r1, d0
   b436c:	441d      	add	r5, r3
   b436e:	463b      	mov	r3, r7
   b4370:	f006 fdc8 	bl	baf04 <__aeabi_ddiv>
   b4374:	4642      	mov	r2, r8
   b4376:	464b      	mov	r3, r9
   b4378:	e7e5      	b.n	b4346 <_Z9myHandlerPKcS0_+0x96>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b437a:	f006 ffab 	bl	bb2d4 <atof>
   b437e:	f8da 3000 	ldr.w	r3, [sl]
   b4382:	4632      	mov	r2, r6
   b4384:	ec51 0b10 	vmov	r0, r1, d0
   b4388:	441d      	add	r5, r3
   b438a:	463b      	mov	r3, r7
   b438c:	f006 fdba 	bl	baf04 <__aeabi_ddiv>
   b4390:	a305      	add	r3, pc, #20	; (adr r3, b43a8 <_Z9myHandlerPKcS0_+0xf8>)
   b4392:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4396:	e7d6      	b.n	b4346 <_Z9myHandlerPKcS0_+0x96>
   b4398:	2d0e5604 	.word	0x2d0e5604
   b439c:	3ffe9db2 	.word	0x3ffe9db2
   b43a0:	ebedfa44 	.word	0xebedfa44
   b43a4:	3fcb39c0 	.word	0x3fcb39c0
   b43a8:	42c3c9ef 	.word	0x42c3c9ef
   b43ac:	3fe469ad 	.word	0x3fe469ad
   b43b0:	000bd4f0 	.word	0x000bd4f0
   b43b4:	2003dd4c 	.word	0x2003dd4c
   b43b8:	000bd4f8 	.word	0x000bd4f8
   b43bc:	408f4000 	.word	0x408f4000
   b43c0:	000bd4fc 	.word	0x000bd4fc
   b43c4:	2003db01 	.word	0x2003db01
   b43c8:	2003dc9c 	.word	0x2003dc9c

000b43cc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43cc:	b40e      	push	{r1, r2, r3}
   b43ce:	b503      	push	{r0, r1, lr}
   b43d0:	ab03      	add	r3, sp, #12
=======
   b42dc:	4f33      	ldr	r7, [pc, #204]	; (b43ac <_Z9myHandlerPKcS0_+0x10c>)
        Serial.printf("%s\n", temp);
   b42de:	462a      	mov	r2, r5
   b42e0:	f7ff ffd0 	bl	b4284 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b42e4:	4932      	ldr	r1, [pc, #200]	; (b43b0 <_Z9myHandlerPKcS0_+0x110>)
   b42e6:	4628      	mov	r0, r5
   b42e8:	f006 f918 	bl	ba51c <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b42ec:	f20f 0998 	addw	r9, pc, #152	; 0x98
   b42f0:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b42f4:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b42f6:	2600      	movs	r6, #0
            if (i >= 0 && i < 7)
   b42f8:	2c06      	cmp	r4, #6
   b42fa:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b43b8 <_Z9myHandlerPKcS0_+0x118>
   b42fe:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b4302:	dc1e      	bgt.n	b4342 <_Z9myHandlerPKcS0_+0xa2>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b4304:	f005 f9fe 	bl	b9704 <atof>
   b4308:	f8da 3000 	ldr.w	r3, [sl]
   b430c:	4632      	mov	r2, r6
   b430e:	ec51 0b10 	vmov	r0, r1, d0
   b4312:	441d      	add	r5, r3
   b4314:	463b      	mov	r3, r7
   b4316:	f005 f80d 	bl	b9334 <__aeabi_ddiv>
   b431a:	a31d      	add	r3, pc, #116	; (adr r3, b4390 <_Z9myHandlerPKcS0_+0xf0>)
   b431c:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4320:	f004 fd28 	bl	b8d74 <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b4324:	3401      	adds	r4, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4326:	e9c5 0100 	strd	r0, r1, [r5]
            }
            token = strtok(NULL, ",!");
   b432a:	4921      	ldr	r1, [pc, #132]	; (b43b0 <_Z9myHandlerPKcS0_+0x110>)
   b432c:	2000      	movs	r0, #0
   b432e:	f006 f8f5 	bl	ba51c <strtok>
        for (int i = 0; i < MAX_RANGE; i++)
   b4332:	2c18      	cmp	r4, #24
   b4334:	d1e0      	bne.n	b42f8 <_Z9myHandlerPKcS0_+0x58>

        }
        CALCULATE = true;
   b4336:	4b1f      	ldr	r3, [pc, #124]	; (b43b4 <_Z9myHandlerPKcS0_+0x114>)
   b4338:	2201      	movs	r2, #1
   b433a:	701a      	strb	r2, [r3, #0]
    }
   b433c:	b004      	add	sp, #16
   b433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if (i > 16 && i < 22)
   b4342:	f1a4 0311 	sub.w	r3, r4, #17
   b4346:	2b04      	cmp	r3, #4
   b4348:	d80d      	bhi.n	b4366 <_Z9myHandlerPKcS0_+0xc6>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b434a:	f005 f9db 	bl	b9704 <atof>
   b434e:	f8da 3000 	ldr.w	r3, [sl]
   b4352:	4632      	mov	r2, r6
   b4354:	ec51 0b10 	vmov	r0, r1, d0
   b4358:	441d      	add	r5, r3
   b435a:	463b      	mov	r3, r7
   b435c:	f004 ffea 	bl	b9334 <__aeabi_ddiv>
   b4360:	4642      	mov	r2, r8
   b4362:	464b      	mov	r3, r9
   b4364:	e7dc      	b.n	b4320 <_Z9myHandlerPKcS0_+0x80>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4366:	f005 f9cd 	bl	b9704 <atof>
   b436a:	f8da 3000 	ldr.w	r3, [sl]
   b436e:	4632      	mov	r2, r6
   b4370:	ec51 0b10 	vmov	r0, r1, d0
   b4374:	441d      	add	r5, r3
   b4376:	463b      	mov	r3, r7
   b4378:	f004 ffdc 	bl	b9334 <__aeabi_ddiv>
   b437c:	a306      	add	r3, pc, #24	; (adr r3, b4398 <_Z9myHandlerPKcS0_+0xf8>)
   b437e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4382:	e7cd      	b.n	b4320 <_Z9myHandlerPKcS0_+0x80>
   b4384:	f3af 8000 	nop.w
   b4388:	2d0e5604 	.word	0x2d0e5604
   b438c:	3ffe9db2 	.word	0x3ffe9db2
   b4390:	ebedfa44 	.word	0xebedfa44
   b4394:	3fcb39c0 	.word	0x3fcb39c0
   b4398:	42c3c9ef 	.word	0x42c3c9ef
   b439c:	3fe469ad 	.word	0x3fe469ad
   b43a0:	000bb8d0 	.word	0x000bb8d0
   b43a4:	2003dd4c 	.word	0x2003dd4c
   b43a8:	000bb8d8 	.word	0x000bb8d8
   b43ac:	408f4000 	.word	0x408f4000
   b43b0:	000bb8dc 	.word	0x000bb8dc
   b43b4:	2003db61 	.word	0x2003db61
   b43b8:	2003dc9c 	.word	0x2003dc9c

000b43bc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43bc:	b40e      	push	{r1, r2, r3}
   b43be:	b503      	push	{r0, r1, lr}
   b43c0:	ab03      	add	r3, sp, #12
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
<<<<<<< HEAD
   b43d2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43da:	f004 fdd6 	bl	b8f8a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43de:	b002      	add	sp, #8
   b43e0:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e4:	b003      	add	sp, #12
   b43e6:	4770      	bx	lr

000b43e8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43e8:	b510      	push	{r4, lr}
      if (_M_manager)
   b43ea:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43ec:	4604      	mov	r4, r0
      if (_M_manager)
   b43ee:	b113      	cbz	r3, b43f6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43f0:	2203      	movs	r2, #3
   b43f2:	4601      	mov	r1, r0
   b43f4:	4798      	blx	r3
    }
   b43f6:	4620      	mov	r0, r4
   b43f8:	bd10      	pop	{r4, pc}
	...

000b43fc <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43fc:	b538      	push	{r3, r4, r5, lr}
   b43fe:	4b0f      	ldr	r3, [pc, #60]	; (b443c <_ZN5TimerD1Ev+0x40>)
   b4400:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4402:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4404:	4604      	mov	r4, r0
        if (handle) {
   b4406:	b19b      	cbz	r3, b4430 <_ZN5TimerD1Ev+0x34>
            stop();
   b4408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b440c:	f7ff febf 	bl	b418e <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4410:	68a0      	ldr	r0, [r4, #8]
   b4412:	2100      	movs	r1, #0
   b4414:	f002 fb1a 	bl	b6a4c <os_timer_set_id>
            while (running) {
   b4418:	7923      	ldrb	r3, [r4, #4]
   b441a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b441e:	b113      	cbz	r3, b4426 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4420:	f002 fab4 	bl	b698c <os_thread_yield>
            while (running) {
   b4424:	e7f8      	b.n	b4418 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b4426:	68a0      	ldr	r0, [r4, #8]
   b4428:	4629      	mov	r1, r5
   b442a:	f002 fac7 	bl	b69bc <os_timer_destroy>
            handle = nullptr;
   b442e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4430:	f104 000c 	add.w	r0, r4, #12
   b4434:	f7ff ffd8 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
    }
   b4438:	4620      	mov	r0, r4
   b443a:	bd38      	pop	{r3, r4, r5, pc}
   b443c:	000bd9c4 	.word	0x000bd9c4

000b4440 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4440:	b510      	push	{r4, lr}
   b4442:	4604      	mov	r4, r0
    }
   b4444:	f7ff ffda 	bl	b43fc <_ZN5TimerD1Ev>
   b4448:	4620      	mov	r0, r4
   b444a:	211c      	movs	r1, #28
   b444c:	f7ff fe29 	bl	b40a2 <_ZdlPvj>
   b4450:	4620      	mov	r0, r4
   b4452:	bd10      	pop	{r4, pc}

000b4454 <_Z9ble_setupv>:
=======
   b43c2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43c4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43c8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43ca:	f003 fae4 	bl	b7996 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43ce:	b002      	add	sp, #8
   b43d0:	f85d eb04 	ldr.w	lr, [sp], #4
   b43d4:	b003      	add	sp, #12
   b43d6:	4770      	bx	lr

000b43d8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43d8:	b510      	push	{r4, lr}
      if (_M_manager)
   b43da:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43dc:	4604      	mov	r4, r0
      if (_M_manager)
   b43de:	b113      	cbz	r3, b43e6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43e0:	2203      	movs	r2, #3
   b43e2:	4601      	mov	r1, r0
   b43e4:	4798      	blx	r3
    }
   b43e6:	4620      	mov	r0, r4
   b43e8:	bd10      	pop	{r4, pc}
	...

000b43ec <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43ec:	b538      	push	{r3, r4, r5, lr}
   b43ee:	4b0f      	ldr	r3, [pc, #60]	; (b442c <_ZN5TimerD1Ev+0x40>)
   b43f0:	6003      	str	r3, [r0, #0]
        if (handle) {
   b43f2:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b43f4:	4604      	mov	r4, r0
        if (handle) {
   b43f6:	b19b      	cbz	r3, b4420 <_ZN5TimerD1Ev+0x34>
            stop();
   b43f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b43fc:	f7ff febf 	bl	b417e <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4400:	68a0      	ldr	r0, [r4, #8]
   b4402:	2100      	movs	r1, #0
   b4404:	f001 f954 	bl	b56b0 <os_timer_set_id>
            while (running) {
   b4408:	7923      	ldrb	r3, [r4, #4]
   b440a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b440e:	b113      	cbz	r3, b4416 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4410:	f001 f906 	bl	b5620 <os_thread_yield>
            while (running) {
   b4414:	e7f8      	b.n	b4408 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b4416:	68a0      	ldr	r0, [r4, #8]
   b4418:	4629      	mov	r1, r5
   b441a:	f001 f919 	bl	b5650 <os_timer_destroy>
            handle = nullptr;
   b441e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4420:	f104 000c 	add.w	r0, r4, #12
   b4424:	f7ff ffd8 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
    }
   b4428:	4620      	mov	r0, r4
   b442a:	bd38      	pop	{r3, r4, r5, pc}
   b442c:	000bbcfc 	.word	0x000bbcfc

000b4430 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4430:	b510      	push	{r4, lr}
   b4432:	4604      	mov	r4, r0
    }
   b4434:	f7ff ffda 	bl	b43ec <_ZN5TimerD1Ev>
   b4438:	4620      	mov	r0, r4
   b443a:	211c      	movs	r1, #28
   b443c:	f7ff fe2f 	bl	b409e <_ZdlPvj>
   b4440:	4620      	mov	r0, r4
   b4442:	bd10      	pop	{r4, pc}

000b4444 <_Z9ble_setupv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
<<<<<<< HEAD
   b4454:	b570      	push	{r4, r5, r6, lr}
   b4456:	b090      	sub	sp, #64	; 0x40
    //BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
    BLE.on();
   b4458:	f003 fea4 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b445c:	f003 feec 	bl	b8238 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b4460:	f003 fea0 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4464:	4a3d      	ldr	r2, [pc, #244]	; (b455c <_Z9ble_setupv+0x108>)
   b4466:	4c3e      	ldr	r4, [pc, #248]	; (b4560 <_Z9ble_setupv+0x10c>)
   b4468:	4601      	mov	r1, r0
   b446a:	a80b      	add	r0, sp, #44	; 0x2c
   b446c:	f004 fc1e 	bl	b8cac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4470:	a80b      	add	r0, sp, #44	; 0x2c
   b4472:	f003 ff98 	bl	b83a6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4476:	f003 fe95 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b447a:	4a3a      	ldr	r2, [pc, #232]	; (b4564 <_Z9ble_setupv+0x110>)
   b447c:	4601      	mov	r1, r0
   b447e:	a80b      	add	r0, sp, #44	; 0x2c
   b4480:	f004 fc14 	bl	b8cac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4484:	a80b      	add	r0, sp, #44	; 0x2c
   b4486:	f003 ff8e 	bl	b83a6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b448a:	f003 fe8b 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b448e:	4a36      	ldr	r2, [pc, #216]	; (b4568 <_Z9ble_setupv+0x114>)
   b4490:	4601      	mov	r1, r0
   b4492:	a80b      	add	r0, sp, #44	; 0x2c
   b4494:	f004 fc0a 	bl	b8cac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4498:	a80b      	add	r0, sp, #44	; 0x2c
   b449a:	f003 ff84 	bl	b83a6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b449e:	f003 fe81 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44a2:	4a32      	ldr	r2, [pc, #200]	; (b456c <_Z9ble_setupv+0x118>)
   b44a4:	4601      	mov	r1, r0
   b44a6:	a80b      	add	r0, sp, #44	; 0x2c
   b44a8:	f004 fc00 	bl	b8cac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ac:	a80b      	add	r0, sp, #44	; 0x2c
   b44ae:	f003 ff7a 	bl	b83a6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b44b2:	f003 fe77 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44b6:	4a2e      	ldr	r2, [pc, #184]	; (b4570 <_Z9ble_setupv+0x11c>)
   b44b8:	4601      	mov	r1, r0
   b44ba:	a80b      	add	r0, sp, #44	; 0x2c
   b44bc:	f004 fbf6 	bl	b8cac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44c0:	a80b      	add	r0, sp, #44	; 0x2c
   b44c2:	f003 ff70 	bl	b83a6 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b44c6:	f003 fe6d 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44ca:	4a2a      	ldr	r2, [pc, #168]	; (b4574 <_Z9ble_setupv+0x120>)
   b44cc:	4601      	mov	r1, r0
   b44ce:	a80b      	add	r0, sp, #44	; 0x2c
   b44d0:	f004 fbec 	bl	b8cac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44d4:	a80b      	add	r0, sp, #44	; 0x2c
   b44d6:	f003 ff66 	bl	b83a6 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b44da:	a803      	add	r0, sp, #12
   b44dc:	f004 f899 	bl	b8612 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b44e0:	4b25      	ldr	r3, [pc, #148]	; (b4578 <_Z9ble_setupv+0x124>)
   b44e2:	a803      	add	r0, sp, #12
   b44e4:	6819      	ldr	r1, [r3, #0]
   b44e6:	f004 f8a7 	bl	b8638 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b44ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44ec:	ad06      	add	r5, sp, #24
   b44ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
=======
   b4444:	b570      	push	{r4, r5, r6, lr}
   b4446:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b4448:	f002 fbae 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b444c:	2102      	movs	r1, #2
   b444e:	f002 fbfc 	bl	b6c4a <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4452:	f002 fba9 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4456:	f002 fbf1 	bl	b6c3c <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b445a:	f002 fba5 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b445e:	4a3e      	ldr	r2, [pc, #248]	; (b4558 <_Z9ble_setupv+0x114>)
   b4460:	4c3e      	ldr	r4, [pc, #248]	; (b455c <_Z9ble_setupv+0x118>)
   b4462:	4601      	mov	r1, r0
   b4464:	a80b      	add	r0, sp, #44	; 0x2c
   b4466:	f003 f927 	bl	b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b446a:	a80b      	add	r0, sp, #44	; 0x2c
   b446c:	f002 fca1 	bl	b6db2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4470:	f002 fb9a 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4474:	4a3a      	ldr	r2, [pc, #232]	; (b4560 <_Z9ble_setupv+0x11c>)
   b4476:	4601      	mov	r1, r0
   b4478:	a80b      	add	r0, sp, #44	; 0x2c
   b447a:	f003 f91d 	bl	b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b447e:	a80b      	add	r0, sp, #44	; 0x2c
   b4480:	f002 fc97 	bl	b6db2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4484:	f002 fb90 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4488:	4a36      	ldr	r2, [pc, #216]	; (b4564 <_Z9ble_setupv+0x120>)
   b448a:	4601      	mov	r1, r0
   b448c:	a80b      	add	r0, sp, #44	; 0x2c
   b448e:	f003 f913 	bl	b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4492:	a80b      	add	r0, sp, #44	; 0x2c
   b4494:	f002 fc8d 	bl	b6db2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b4498:	f002 fb86 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b449c:	4a32      	ldr	r2, [pc, #200]	; (b4568 <_Z9ble_setupv+0x124>)
   b449e:	4601      	mov	r1, r0
   b44a0:	a80b      	add	r0, sp, #44	; 0x2c
   b44a2:	f003 f909 	bl	b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44a6:	a80b      	add	r0, sp, #44	; 0x2c
   b44a8:	f002 fc83 	bl	b6db2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b44ac:	f002 fb7c 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44b0:	4a2e      	ldr	r2, [pc, #184]	; (b456c <_Z9ble_setupv+0x128>)
   b44b2:	4601      	mov	r1, r0
   b44b4:	a80b      	add	r0, sp, #44	; 0x2c
   b44b6:	f003 f8ff 	bl	b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ba:	a80b      	add	r0, sp, #44	; 0x2c
   b44bc:	f002 fc79 	bl	b6db2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b44c0:	f002 fb72 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44c4:	4a2a      	ldr	r2, [pc, #168]	; (b4570 <_Z9ble_setupv+0x12c>)
   b44c6:	4601      	mov	r1, r0
   b44c8:	a80b      	add	r0, sp, #44	; 0x2c
   b44ca:	f003 f8f5 	bl	b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ce:	a80b      	add	r0, sp, #44	; 0x2c
   b44d0:	f002 fc6f 	bl	b6db2 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b44d4:	a803      	add	r0, sp, #12
   b44d6:	f002 fda2 	bl	b701e <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b44da:	4b26      	ldr	r3, [pc, #152]	; (b4574 <_Z9ble_setupv+0x130>)
   b44dc:	a803      	add	r0, sp, #12
   b44de:	6819      	ldr	r1, [r3, #0]
   b44e0:	f002 fdb0 	bl	b7044 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b44e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44e6:	ad06      	add	r5, sp, #24
   b44e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
<<<<<<< HEAD
   b44f0:	ad06      	add	r5, sp, #24
   b44f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b44f4:	6826      	ldr	r6, [r4, #0]
   b44f6:	ac0b      	add	r4, sp, #44	; 0x2c
   b44f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44fa:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b44fc:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44fe:	f003 fc5f 	bl	b7dc0 <_ZNK8particle7BleUuid4typeEv>
   b4502:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4504:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4506:	bb0c      	cbnz	r4, b454c <_Z9ble_setupv+0xf8>
            uint16_t uuid16 = tempUUID.shorted();
   b4508:	f003 fc76 	bl	b7df8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b450c:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b450e:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4512:	2302      	movs	r3, #2
   b4514:	f10d 020a 	add.w	r2, sp, #10
   b4518:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b451a:	a803      	add	r0, sp, #12
   b451c:	f004 f86e 	bl	b85fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b4520:	f003 fe40 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4524:	2200      	movs	r2, #0
   b4526:	a903      	add	r1, sp, #12
   b4528:	f003 fed0 	bl	b82cc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b452c:	f005 faa0 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4530:	4912      	ldr	r1, [pc, #72]	; (b457c <_Z9ble_setupv+0x128>)
   b4532:	f004 fd02 	bl	b8f3a <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4536:	f003 fe35 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b453a:	4911      	ldr	r1, [pc, #68]	; (b4580 <_Z9ble_setupv+0x12c>)
   b453c:	2200      	movs	r2, #0
   b453e:	f004 fab7 	bl	b8ab0 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
=======
   b44ea:	ad06      	add	r5, sp, #24
   b44ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b44ee:	6826      	ldr	r6, [r4, #0]
   b44f0:	ac0b      	add	r4, sp, #44	; 0x2c
   b44f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44f4:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b44f6:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b44f8:	f002 f964 	bl	b67c4 <_ZNK8particle7BleUuid4typeEv>
   b44fc:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b44fe:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4500:	bb0c      	cbnz	r4, b4546 <_Z9ble_setupv+0x102>
            uint16_t uuid16 = tempUUID.shorted();
   b4502:	f002 f97b 	bl	b67fc <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4506:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4508:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b450c:	2302      	movs	r3, #2
   b450e:	f10d 020a 	add.w	r2, sp, #10
   b4512:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4514:	a803      	add	r0, sp, #12
   b4516:	f002 fd77 	bl	b7008 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b451a:	f002 fb45 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b451e:	2200      	movs	r2, #0
   b4520:	a903      	add	r1, sp, #12
   b4522:	f002 fbd9 	bl	b6cd8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b4526:	f003 ff87 	bl	b8438 <_Z16_fetch_usbserialv>
   b452a:	4913      	ldr	r1, [pc, #76]	; (b4578 <_Z9ble_setupv+0x134>)
   b452c:	f003 fa0b 	bl	b7946 <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4530:	f002 fb3a 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4534:	4911      	ldr	r1, [pc, #68]	; (b457c <_Z9ble_setupv+0x138>)
   b4536:	2200      	movs	r2, #0
   b4538:	f002 ffc0 	bl	b74bc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
<<<<<<< HEAD
   b4542:	9803      	ldr	r0, [sp, #12]
   b4544:	f002 fca6 	bl	b6e94 <free>

}
   b4548:	b010      	add	sp, #64	; 0x40
   b454a:	bd70      	pop	{r4, r5, r6, pc}
   b454c:	f003 fc56 	bl	b7dfc <_ZNK8particle7BleUuid8rawBytesEv>
   b4550:	2300      	movs	r3, #0
   b4552:	9300      	str	r3, [sp, #0]
   b4554:	4602      	mov	r2, r0
   b4556:	2310      	movs	r3, #16
   b4558:	2107      	movs	r1, #7
   b455a:	e7de      	b.n	b451a <_Z9ble_setupv+0xc6>
   b455c:	2003db24 	.word	0x2003db24
   b4560:	2003db50 	.word	0x2003db50
   b4564:	2003db14 	.word	0x2003db14
   b4568:	2003db04 	.word	0x2003db04
   b456c:	2003db0c 	.word	0x2003db0c
   b4570:	2003db2c 	.word	0x2003db2c
   b4574:	2003db34 	.word	0x2003db34
   b4578:	2003d908 	.word	0x2003d908
   b457c:	000bd4ff 	.word	0x000bd4ff
   b4580:	000b40c5 	.word	0x000b40c5
   b4584:	00000000 	.word	0x00000000

000b4588 <_Z8calc_lowPA2_iPdi>:
=======
   b453c:	9803      	ldr	r0, [sp, #12]
   b453e:	f001 fac3 	bl	b5ac8 <free>

}
   b4542:	b010      	add	sp, #64	; 0x40
   b4544:	bd70      	pop	{r4, r5, r6, pc}
   b4546:	f002 f95b 	bl	b6800 <_ZNK8particle7BleUuid8rawBytesEv>
   b454a:	2300      	movs	r3, #0
   b454c:	9300      	str	r3, [sp, #0]
   b454e:	4602      	mov	r2, r0
   b4550:	2310      	movs	r3, #16
   b4552:	2107      	movs	r1, #7
   b4554:	e7de      	b.n	b4514 <_Z9ble_setupv+0xd0>
   b4556:	bf00      	nop
   b4558:	2003db84 	.word	0x2003db84
   b455c:	2003dbb0 	.word	0x2003dbb0
   b4560:	2003db74 	.word	0x2003db74
   b4564:	2003db64 	.word	0x2003db64
   b4568:	2003db6c 	.word	0x2003db6c
   b456c:	2003db8c 	.word	0x2003db8c
   b4570:	2003db94 	.word	0x2003db94
   b4574:	2003d968 	.word	0x2003d968
   b4578:	000bb8df 	.word	0x000bb8df
   b457c:	000b40b5 	.word	0x000b40b5

000b4580 <_Z8calc_lowPA2_iPdi>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int size)
{
<<<<<<< HEAD
   b4588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b458c:	ed2d 8b02 	vpush	{d8}
   b4590:	b09d      	sub	sp, #116	; 0x74
=======
   b4580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4584:	ed2d 8b02 	vpush	{d8}
   b4588:	b09d      	sub	sp, #116	; 0x74
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0.0;
    double last_small = 1000.0; // Assign any absurdly high value
<<<<<<< HEAD
   b4592:	4f4f      	ldr	r7, [pc, #316]	; (b46d0 <_Z8calc_lowPA2_iPdi+0x148>)
{
   b4594:	9203      	str	r2, [sp, #12]
   b4596:	4605      	mov	r5, r0
   b4598:	468b      	mov	fp, r1
   b459a:	468a      	mov	sl, r1

    for (int i = 0; i < size; i++)
   b459c:	2400      	movs	r4, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b459e:	2600      	movs	r6, #0
    double last_big = 0.0;
   b45a0:	f04f 0800 	mov.w	r8, #0
   b45a4:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < size; i++)
   b45a8:	9b03      	ldr	r3, [sp, #12]
   b45aa:	429c      	cmp	r4, r3
   b45ac:	da17      	bge.n	b45de <_Z8calc_lowPA2_iPdi+0x56>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b45ae:	ecba 7b02 	vldmia	sl!, {d7}
   b45b2:	4642      	mov	r2, r8
   b45b4:	ec51 0b17 	vmov	r0, r1, d7
   b45b8:	464b      	mov	r3, r9
   b45ba:	ed8d 7b00 	vstr	d7, [sp]
   b45be:	f006 fe07 	bl	bb1d0 <__aeabi_dcmpgt>
   b45c2:	b108      	cbz	r0, b45c8 <_Z8calc_lowPA2_iPdi+0x40>
        {
            last_big = cost[i];
   b45c4:	e9dd 8900 	ldrd	r8, r9, [sp]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b45c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   b45cc:	4632      	mov	r2, r6
   b45ce:	463b      	mov	r3, r7
   b45d0:	f006 fde0 	bl	bb194 <__aeabi_dcmplt>
   b45d4:	b108      	cbz	r0, b45da <_Z8calc_lowPA2_iPdi+0x52>
        {
            last_small = cost[i];
   b45d6:	e9dd 6700 	ldrd	r6, r7, [sp]
    for (int i = 0; i < size; i++)
   b45da:	3401      	adds	r4, #1
   b45dc:	e7e4      	b.n	b45a8 <_Z8calc_lowPA2_iPdi+0x20>
=======
   b458a:	4f4f      	ldr	r7, [pc, #316]	; (b46c8 <_Z8calc_lowPA2_iPdi+0x148>)
{
   b458c:	9203      	str	r2, [sp, #12]
   b458e:	4605      	mov	r5, r0
   b4590:	468b      	mov	fp, r1
   b4592:	468a      	mov	sl, r1

    for (int i = 0; i < size; i++)
   b4594:	2400      	movs	r4, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b4596:	2600      	movs	r6, #0
    double last_big = 0.0;
   b4598:	f04f 0800 	mov.w	r8, #0
   b459c:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < size; i++)
   b45a0:	9b03      	ldr	r3, [sp, #12]
   b45a2:	429c      	cmp	r4, r3
   b45a4:	da17      	bge.n	b45d6 <_Z8calc_lowPA2_iPdi+0x56>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b45a6:	ecba 7b02 	vldmia	sl!, {d7}
   b45aa:	4642      	mov	r2, r8
   b45ac:	ec51 0b17 	vmov	r0, r1, d7
   b45b0:	464b      	mov	r3, r9
   b45b2:	ed8d 7b00 	vstr	d7, [sp]
   b45b6:	f005 f823 	bl	b9600 <__aeabi_dcmpgt>
   b45ba:	b108      	cbz	r0, b45c0 <_Z8calc_lowPA2_iPdi+0x40>
        {
            last_big = cost[i];
   b45bc:	e9dd 8900 	ldrd	r8, r9, [sp]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b45c0:	e9dd 0100 	ldrd	r0, r1, [sp]
   b45c4:	4632      	mov	r2, r6
   b45c6:	463b      	mov	r3, r7
   b45c8:	f004 fffc 	bl	b95c4 <__aeabi_dcmplt>
   b45cc:	b108      	cbz	r0, b45d2 <_Z8calc_lowPA2_iPdi+0x52>
        {
            last_small = cost[i];
   b45ce:	e9dd 6700 	ldrd	r6, r7, [sp]
    for (int i = 0; i < size; i++)
   b45d2:	3401      	adds	r4, #1
   b45d4:	e7e4      	b.n	b45a0 <_Z8calc_lowPA2_iPdi+0x20>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
        }
    }
    // Calculate delta
    delta = last_big - last_small;
<<<<<<< HEAD
   b45de:	4632      	mov	r2, r6
   b45e0:	463b      	mov	r3, r7
   b45e2:	4640      	mov	r0, r8
   b45e4:	4649      	mov	r1, r9
   b45e6:	f006 f9ab 	bl	ba940 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b45ea:	a337      	add	r3, pc, #220	; (adr r3, b46c8 <_Z8calc_lowPA2_iPdi+0x140>)
   b45ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b45f0:	f006 fb5e 	bl	bacb0 <__aeabi_dmul>
   b45f4:	4632      	mov	r2, r6
   b45f6:	463b      	mov	r3, r7
   b45f8:	f006 f9a4 	bl	ba944 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= size; i++)
   b45fc:	f04f 0a00 	mov.w	sl, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4600:	ec41 0b18 	vmov	d8, r0, r1
    int idx = 0;
   b4604:	4654      	mov	r4, sl
    for (int i = 0; i <= size; i++)
   b4606:	9b03      	ldr	r3, [sp, #12]
   b4608:	459a      	cmp	sl, r3
   b460a:	dc0f      	bgt.n	b462c <_Z8calc_lowPA2_iPdi+0xa4>
    {
        
        if (cost[i] < small_offset)
   b460c:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   b4610:	ec53 2b18 	vmov	r2, r3, d8
   b4614:	f006 fdbe 	bl	bb194 <__aeabi_dcmplt>
   b4618:	b128      	cbz	r0, b4626 <_Z8calc_lowPA2_iPdi+0x9e>
        {
            low_range_hour[idx] = i;
   b461a:	ab1c      	add	r3, sp, #112	; 0x70
   b461c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
            
            idx++;
   b4620:	3401      	adds	r4, #1
            low_range_hour[idx] = i;
   b4622:	f843 ac60 	str.w	sl, [r3, #-96]
    for (int i = 0; i <= size; i++)
   b4626:	f10a 0a01 	add.w	sl, sl, #1
   b462a:	e7ec      	b.n	b4606 <_Z8calc_lowPA2_iPdi+0x7e>
=======
   b45d6:	4632      	mov	r2, r6
   b45d8:	463b      	mov	r3, r7
   b45da:	4640      	mov	r0, r8
   b45dc:	4649      	mov	r1, r9
   b45de:	f004 fbc7 	bl	b8d70 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b45e2:	a337      	add	r3, pc, #220	; (adr r3, b46c0 <_Z8calc_lowPA2_iPdi+0x140>)
   b45e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b45e8:	f004 fd7a 	bl	b90e0 <__aeabi_dmul>
   b45ec:	4632      	mov	r2, r6
   b45ee:	463b      	mov	r3, r7
   b45f0:	f004 fbc0 	bl	b8d74 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= size; i++)
   b45f4:	f04f 0a00 	mov.w	sl, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b45f8:	ec41 0b18 	vmov	d8, r0, r1
    int idx = 0;
   b45fc:	4654      	mov	r4, sl
    for (int i = 0; i <= size; i++)
   b45fe:	9b03      	ldr	r3, [sp, #12]
   b4600:	459a      	cmp	sl, r3
   b4602:	dc0f      	bgt.n	b4624 <_Z8calc_lowPA2_iPdi+0xa4>
    {
        
        if (cost[i] < small_offset)
   b4604:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   b4608:	ec53 2b18 	vmov	r2, r3, d8
   b460c:	f004 ffda 	bl	b95c4 <__aeabi_dcmplt>
   b4610:	b128      	cbz	r0, b461e <_Z8calc_lowPA2_iPdi+0x9e>
        {
            low_range_hour[idx] = i;
   b4612:	ab1c      	add	r3, sp, #112	; 0x70
   b4614:	eb03 0384 	add.w	r3, r3, r4, lsl #2
            
            idx++;
   b4618:	3401      	adds	r4, #1
            low_range_hour[idx] = i;
   b461a:	f843 ac60 	str.w	sl, [r3, #-96]
    for (int i = 0; i <= size; i++)
   b461e:	f10a 0a01 	add.w	sl, sl, #1
   b4622:	e7ec      	b.n	b45fe <_Z8calc_lowPA2_iPdi+0x7e>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
<<<<<<< HEAD
   b462c:	f005 fa20 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4630:	4928      	ldr	r1, [pc, #160]	; (b46d4 <_Z8calc_lowPA2_iPdi+0x14c>)
   b4632:	4642      	mov	r2, r8
   b4634:	464b      	mov	r3, r9
   b4636:	f7ff fe2d 	bl	b4294 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b463a:	f005 fa19 	bl	b9a70 <_Z16_fetch_usbserialv>
   b463e:	4926      	ldr	r1, [pc, #152]	; (b46d8 <_Z8calc_lowPA2_iPdi+0x150>)
   b4640:	4632      	mov	r2, r6
   b4642:	463b      	mov	r3, r7
   b4644:	f7ff fe26 	bl	b4294 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4648:	f005 fa12 	bl	b9a70 <_Z16_fetch_usbserialv>
   b464c:	4923      	ldr	r1, [pc, #140]	; (b46dc <_Z8calc_lowPA2_iPdi+0x154>)
   b464e:	f7ff fe21 	bl	b4294 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b4652:	b36c      	cbz	r4, b46b0 <_Z8calc_lowPA2_iPdi+0x128>
    int i = 0;
   b4654:	2300      	movs	r3, #0
    int cnt = 0;
   b4656:	461e      	mov	r6, r3
   b4658:	1d2f      	adds	r7, r5, #4
=======
   b4624:	f003 ff08 	bl	b8438 <_Z16_fetch_usbserialv>
   b4628:	4928      	ldr	r1, [pc, #160]	; (b46cc <_Z8calc_lowPA2_iPdi+0x14c>)
   b462a:	4642      	mov	r2, r8
   b462c:	464b      	mov	r3, r9
   b462e:	f7ff fe29 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b4632:	f003 ff01 	bl	b8438 <_Z16_fetch_usbserialv>
   b4636:	4926      	ldr	r1, [pc, #152]	; (b46d0 <_Z8calc_lowPA2_iPdi+0x150>)
   b4638:	4632      	mov	r2, r6
   b463a:	463b      	mov	r3, r7
   b463c:	f7ff fe22 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4640:	f003 fefa 	bl	b8438 <_Z16_fetch_usbserialv>
   b4644:	4923      	ldr	r1, [pc, #140]	; (b46d4 <_Z8calc_lowPA2_iPdi+0x154>)
   b4646:	f7ff fe1d 	bl	b4284 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b464a:	b36c      	cbz	r4, b46a8 <_Z8calc_lowPA2_iPdi+0x128>
    int i = 0;
   b464c:	2300      	movs	r3, #0
    int cnt = 0;
   b464e:	461e      	mov	r6, r3
   b4650:	1d2f      	adds	r7, r5, #4
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
<<<<<<< HEAD
   b465a:	aa1c      	add	r2, sp, #112	; 0x70
   b465c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4660:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b4664:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
   b4668:	aa04      	add	r2, sp, #16
   b466a:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b466e:	6802      	ldr	r2, [r0, #0]
   b4670:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b4674:	3901      	subs	r1, #1
   b4676:	428a      	cmp	r2, r1
   b4678:	f103 0301 	add.w	r3, r3, #1
   b467c:	d0f7      	beq.n	b466e <_Z8calc_lowPA2_iPdi+0xe6>
=======
   b4652:	aa1c      	add	r2, sp, #112	; 0x70
   b4654:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4658:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b465c:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
   b4660:	aa04      	add	r2, sp, #16
   b4662:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4666:	6802      	ldr	r2, [r0, #0]
   b4668:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b466c:	3901      	subs	r1, #1
   b466e:	428a      	cmp	r2, r1
   b4670:	f103 0301 	add.w	r3, r3, #1
   b4674:	d0f7      	beq.n	b4666 <_Z8calc_lowPA2_iPdi+0xe6>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
<<<<<<< HEAD
   b467e:	3201      	adds	r2, #1
        while (i <= idx)
   b4680:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b4682:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
            
            cnt++;
   b4686:	f106 0201 	add.w	r2, r6, #1
        while (i <= idx)
   b468a:	dd0f      	ble.n	b46ac <_Z8calc_lowPA2_iPdi+0x124>
=======
   b4676:	3201      	adds	r2, #1
        while (i <= idx)
   b4678:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b467a:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
            
            cnt++;
   b467e:	f106 0201 	add.w	r2, r6, #1
        while (i <= idx)
   b4682:	dd0f      	ble.n	b46a4 <_Z8calc_lowPA2_iPdi+0x124>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
<<<<<<< HEAD
   b468c:	f8df 8054 	ldr.w	r8, [pc, #84]	; b46e4 <_Z8calc_lowPA2_iPdi+0x15c>
    for (int z = 0; z < cnt; z++)
   b4690:	2400      	movs	r4, #0
   b4692:	42b4      	cmp	r4, r6
   b4694:	d00c      	beq.n	b46b0 <_Z8calc_lowPA2_iPdi+0x128>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b4696:	f005 f9eb 	bl	b9a70 <_Z16_fetch_usbserialv>
   b469a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b469e:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b46a2:	4641      	mov	r1, r8
   b46a4:	f7ff fdf6 	bl	b4294 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b46a8:	3401      	adds	r4, #1
   b46aa:	e7f2      	b.n	b4692 <_Z8calc_lowPA2_iPdi+0x10a>
            cnt++;
   b46ac:	4616      	mov	r6, r2
   b46ae:	e7d4      	b.n	b465a <_Z8calc_lowPA2_iPdi+0xd2>
=======
   b4684:	f8df 8054 	ldr.w	r8, [pc, #84]	; b46dc <_Z8calc_lowPA2_iPdi+0x15c>
    for (int z = 0; z < cnt; z++)
   b4688:	2400      	movs	r4, #0
   b468a:	42b4      	cmp	r4, r6
   b468c:	d00c      	beq.n	b46a8 <_Z8calc_lowPA2_iPdi+0x128>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b468e:	f003 fed3 	bl	b8438 <_Z16_fetch_usbserialv>
   b4692:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b4696:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b469a:	4641      	mov	r1, r8
   b469c:	f7ff fdf2 	bl	b4284 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b46a0:	3401      	adds	r4, #1
   b46a2:	e7f2      	b.n	b468a <_Z8calc_lowPA2_iPdi+0x10a>
            cnt++;
   b46a4:	4616      	mov	r6, r2
   b46a6:	e7d4      	b.n	b4652 <_Z8calc_lowPA2_iPdi+0xd2>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
<<<<<<< HEAD
   b46b0:	4b0b      	ldr	r3, [pc, #44]	; (b46e0 <_Z8calc_lowPA2_iPdi+0x158>)
   b46b2:	2201      	movs	r2, #1

    return cnt;
}
   b46b4:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b46b6:	701a      	strb	r2, [r3, #0]
}
   b46b8:	b01d      	add	sp, #116	; 0x74
   b46ba:	ecbd 8b02 	vpop	{d8}
   b46be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46c2:	bf00      	nop
   b46c4:	f3af 8000 	nop.w
   b46c8:	33333333 	.word	0x33333333
   b46cc:	3fd33333 	.word	0x3fd33333
   b46d0:	408f4000 	.word	0x408f4000
   b46d4:	000bd523 	.word	0x000bd523
   b46d8:	000bd541 	.word	0x000bd541
   b46dc:	000bd55e 	.word	0x000bd55e
   b46e0:	2003db21 	.word	0x2003db21
   b46e4:	000bd59c 	.word	0x000bd59c

000b46e8 <_Z18hourly_JSON_updatev>:
=======
   b46a8:	4b0b      	ldr	r3, [pc, #44]	; (b46d8 <_Z8calc_lowPA2_iPdi+0x158>)
   b46aa:	2201      	movs	r2, #1

    return cnt;
}
   b46ac:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b46ae:	701a      	strb	r2, [r3, #0]
}
   b46b0:	b01d      	add	sp, #116	; 0x74
   b46b2:	ecbd 8b02 	vpop	{d8}
   b46b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46ba:	bf00      	nop
   b46bc:	f3af 8000 	nop.w
   b46c0:	33333333 	.word	0x33333333
   b46c4:	3fd33333 	.word	0x3fd33333
   b46c8:	408f4000 	.word	0x408f4000
   b46cc:	000bb903 	.word	0x000bb903
   b46d0:	000bb921 	.word	0x000bb921
   b46d4:	000bb93e 	.word	0x000bb93e
   b46d8:	2003db81 	.word	0x2003db81
   b46dc:	000bb97c 	.word	0x000bb97c

000b46e0 <_Z18hourly_JSON_updatev>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
extern String pricestoday_Json;
extern String pricesyesterday_Json;
extern String pricestomorrow_Json;

void hourly_JSON_update()
{
<<<<<<< HEAD
   b46e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b46ea:	4913      	ldr	r1, [pc, #76]	; (b4738 <_Z18hourly_JSON_updatev+0x50>)
   b46ec:	4813      	ldr	r0, [pc, #76]	; (b473c <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b46ee:	4e14      	ldr	r6, [pc, #80]	; (b4740 <_Z18hourly_JSON_updatev+0x58>)
=======
   b46e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b46e2:	4913      	ldr	r1, [pc, #76]	; (b4730 <_Z18hourly_JSON_updatev+0x50>)
   b46e4:	4813      	ldr	r0, [pc, #76]	; (b4734 <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b46e6:	4e14      	ldr	r6, [pc, #80]	; (b4738 <_Z18hourly_JSON_updatev+0x58>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
<<<<<<< HEAD
   b46f0:	4d12      	ldr	r5, [pc, #72]	; (b473c <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b46f2:	4f14      	ldr	r7, [pc, #80]	; (b4744 <_Z18hourly_JSON_updatev+0x5c>)
{
   b46f4:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b46f6:	f003 f90f 	bl	b7918 <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b46fa:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b46fc:	6833      	ldr	r3, [r6, #0]
   b46fe:	220a      	movs	r2, #10
   b4700:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4704:	4668      	mov	r0, sp
   b4706:	f003 f919 	bl	b793c <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b470a:	4669      	mov	r1, sp
   b470c:	4628      	mov	r0, r5
   b470e:	f003 f952 	bl	b79b6 <_ZN6String6concatERKS_>
   b4712:	4668      	mov	r0, sp
   b4714:	f003 f87c 	bl	b7810 <_ZN6StringD1Ev>
        if (i < 23)
   b4718:	2c17      	cmp	r4, #23
   b471a:	d003      	beq.n	b4724 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b471c:	4639      	mov	r1, r7
   b471e:	4628      	mov	r0, r5
   b4720:	f003 f957 	bl	b79d2 <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b4724:	3401      	adds	r4, #1
   b4726:	2c18      	cmp	r4, #24
   b4728:	d1e8      	bne.n	b46fc <_Z18hourly_JSON_updatev+0x14>
   b472a:	4907      	ldr	r1, [pc, #28]	; (b4748 <_Z18hourly_JSON_updatev+0x60>)
   b472c:	4803      	ldr	r0, [pc, #12]	; (b473c <_Z18hourly_JSON_updatev+0x54>)
=======
   b46e8:	4d12      	ldr	r5, [pc, #72]	; (b4734 <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b46ea:	4f14      	ldr	r7, [pc, #80]	; (b473c <_Z18hourly_JSON_updatev+0x5c>)
{
   b46ec:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b46ee:	f001 fe7d 	bl	b63ec <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b46f2:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b46f4:	6833      	ldr	r3, [r6, #0]
   b46f6:	220a      	movs	r2, #10
   b46f8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b46fc:	4668      	mov	r0, sp
   b46fe:	f001 fe87 	bl	b6410 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4702:	4669      	mov	r1, sp
   b4704:	4628      	mov	r0, r5
   b4706:	f001 fead 	bl	b6464 <_ZN6String6concatERKS_>
   b470a:	4668      	mov	r0, sp
   b470c:	f001 fdd0 	bl	b62b0 <_ZN6StringD1Ev>
        if (i < 23)
   b4710:	2c17      	cmp	r4, #23
   b4712:	d003      	beq.n	b471c <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b4714:	4639      	mov	r1, r7
   b4716:	4628      	mov	r0, r5
   b4718:	f001 fea8 	bl	b646c <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b471c:	3401      	adds	r4, #1
   b471e:	2c18      	cmp	r4, #24
   b4720:	d1e8      	bne.n	b46f4 <_Z18hourly_JSON_updatev+0x14>
   b4722:	4907      	ldr	r1, [pc, #28]	; (b4740 <_Z18hourly_JSON_updatev+0x60>)
   b4724:	4803      	ldr	r0, [pc, #12]	; (b4734 <_Z18hourly_JSON_updatev+0x54>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
        {
            wh_today_Json += ",";
        }
    }
    wh_today_Json += "]}";
}
<<<<<<< HEAD
   b472e:	b005      	add	sp, #20
   b4730:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4734:	f003 b94d 	b.w	b79d2 <_ZN6String6concatEPKc>
   b4738:	000bd5aa 	.word	0x000bd5aa
   b473c:	2003e1bc 	.word	0x2003e1bc
   b4740:	2003e1b8 	.word	0x2003e1b8
   b4744:	000bd5b9 	.word	0x000bd5b9
   b4748:	000bd5bb 	.word	0x000bd5bb

000b474c <_Z11update_JSONv>:
void update_JSON()
{
   b474c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b474e:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4750:	498f      	ldr	r1, [pc, #572]	; (b4990 <_Z11update_JSONv+0x244>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b4752:	4e90      	ldr	r6, [pc, #576]	; (b4994 <_Z11update_JSONv+0x248>)
   b4754:	4f90      	ldr	r7, [pc, #576]	; (b4998 <_Z11update_JSONv+0x24c>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4756:	4d91      	ldr	r5, [pc, #580]	; (b499c <_Z11update_JSONv+0x250>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4758:	4668      	mov	r0, sp
   b475a:	f003 f983 	bl	b7a64 <_ZN6String6formatEPKcz>
   b475e:	4669      	mov	r1, sp
   b4760:	488e      	ldr	r0, [pc, #568]	; (b499c <_Z11update_JSONv+0x250>)
   b4762:	f003 f8d1 	bl	b7908 <_ZN6StringaSEOS_>
   b4766:	4668      	mov	r0, sp
   b4768:	f003 f852 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b476c:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b476e:	6833      	ldr	r3, [r6, #0]
   b4770:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4774:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4778:	4639      	mov	r1, r7
   b477a:	4668      	mov	r0, sp
   b477c:	f003 f972 	bl	b7a64 <_ZN6String6formatEPKcz>
   b4780:	4669      	mov	r1, sp
   b4782:	4628      	mov	r0, r5
   b4784:	f003 f917 	bl	b79b6 <_ZN6String6concatERKS_>
   b4788:	4668      	mov	r0, sp
   b478a:	f003 f841 	bl	b7810 <_ZN6StringD1Ev>
        if (i < 23)
   b478e:	2c17      	cmp	r4, #23
   b4790:	d00a      	beq.n	b47a8 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b4792:	4983      	ldr	r1, [pc, #524]	; (b49a0 <_Z11update_JSONv+0x254>)
   b4794:	4668      	mov	r0, sp
   b4796:	f003 f965 	bl	b7a64 <_ZN6String6formatEPKcz>
   b479a:	4669      	mov	r1, sp
   b479c:	4628      	mov	r0, r5
   b479e:	f003 f90a 	bl	b79b6 <_ZN6String6concatERKS_>
   b47a2:	4668      	mov	r0, sp
   b47a4:	f003 f834 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47a8:	3401      	adds	r4, #1
   b47aa:	2c18      	cmp	r4, #24
   b47ac:	d1df      	bne.n	b476e <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b47ae:	497d      	ldr	r1, [pc, #500]	; (b49a4 <_Z11update_JSONv+0x258>)
=======
   b4726:	b005      	add	sp, #20
   b4728:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b472c:	f001 be9e 	b.w	b646c <_ZN6String6concatEPKc>
   b4730:	000bb98a 	.word	0x000bb98a
   b4734:	2003e1bc 	.word	0x2003e1bc
   b4738:	2003e1b8 	.word	0x2003e1b8
   b473c:	000bb999 	.word	0x000bb999
   b4740:	000bb99b 	.word	0x000bb99b

000b4744 <_Z11update_JSONv>:
void update_JSON()
{
   b4744:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4746:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4748:	498f      	ldr	r1, [pc, #572]	; (b4988 <_Z11update_JSONv+0x244>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b474a:	4e90      	ldr	r6, [pc, #576]	; (b498c <_Z11update_JSONv+0x248>)
   b474c:	4f90      	ldr	r7, [pc, #576]	; (b4990 <_Z11update_JSONv+0x24c>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b474e:	4d91      	ldr	r5, [pc, #580]	; (b4994 <_Z11update_JSONv+0x250>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4750:	4668      	mov	r0, sp
   b4752:	f001 fe9d 	bl	b6490 <_ZN6String6formatEPKcz>
   b4756:	4669      	mov	r1, sp
   b4758:	488e      	ldr	r0, [pc, #568]	; (b4994 <_Z11update_JSONv+0x250>)
   b475a:	f001 fe3f 	bl	b63dc <_ZN6StringaSEOS_>
   b475e:	4668      	mov	r0, sp
   b4760:	f001 fda6 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4764:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b4766:	6833      	ldr	r3, [r6, #0]
   b4768:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b476c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4770:	4639      	mov	r1, r7
   b4772:	4668      	mov	r0, sp
   b4774:	f001 fe8c 	bl	b6490 <_ZN6String6formatEPKcz>
   b4778:	4669      	mov	r1, sp
   b477a:	4628      	mov	r0, r5
   b477c:	f001 fe72 	bl	b6464 <_ZN6String6concatERKS_>
   b4780:	4668      	mov	r0, sp
   b4782:	f001 fd95 	bl	b62b0 <_ZN6StringD1Ev>
        if (i < 23)
   b4786:	2c17      	cmp	r4, #23
   b4788:	d00a      	beq.n	b47a0 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b478a:	4983      	ldr	r1, [pc, #524]	; (b4998 <_Z11update_JSONv+0x254>)
   b478c:	4668      	mov	r0, sp
   b478e:	f001 fe7f 	bl	b6490 <_ZN6String6formatEPKcz>
   b4792:	4669      	mov	r1, sp
   b4794:	4628      	mov	r0, r5
   b4796:	f001 fe65 	bl	b6464 <_ZN6String6concatERKS_>
   b479a:	4668      	mov	r0, sp
   b479c:	f001 fd88 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47a0:	3401      	adds	r4, #1
   b47a2:	2c18      	cmp	r4, #24
   b47a4:	d1df      	bne.n	b4766 <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b47a6:	497d      	ldr	r1, [pc, #500]	; (b499c <_Z11update_JSONv+0x258>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
<<<<<<< HEAD
   b47b0:	4e7d      	ldr	r6, [pc, #500]	; (b49a8 <_Z11update_JSONv+0x25c>)
   b47b2:	4f79      	ldr	r7, [pc, #484]	; (b4998 <_Z11update_JSONv+0x24c>)
   b47b4:	4d7d      	ldr	r5, [pc, #500]	; (b49ac <_Z11update_JSONv+0x260>)
    pricesyesterday_Json += String::format("]}");
   b47b6:	4668      	mov	r0, sp
   b47b8:	f003 f954 	bl	b7a64 <_ZN6String6formatEPKcz>
   b47bc:	4669      	mov	r1, sp
   b47be:	4877      	ldr	r0, [pc, #476]	; (b499c <_Z11update_JSONv+0x250>)
   b47c0:	f003 f8f9 	bl	b79b6 <_ZN6String6concatERKS_>
   b47c4:	4668      	mov	r0, sp
   b47c6:	f003 f823 	bl	b7810 <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b47ca:	4979      	ldr	r1, [pc, #484]	; (b49b0 <_Z11update_JSONv+0x264>)
   b47cc:	4668      	mov	r0, sp
   b47ce:	f003 f949 	bl	b7a64 <_ZN6String6formatEPKcz>
   b47d2:	4669      	mov	r1, sp
   b47d4:	4875      	ldr	r0, [pc, #468]	; (b49ac <_Z11update_JSONv+0x260>)
   b47d6:	f003 f897 	bl	b7908 <_ZN6StringaSEOS_>
   b47da:	4668      	mov	r0, sp
   b47dc:	f003 f818 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47e0:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b47e2:	6833      	ldr	r3, [r6, #0]
   b47e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b47e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47ec:	4639      	mov	r1, r7
   b47ee:	4668      	mov	r0, sp
   b47f0:	f003 f938 	bl	b7a64 <_ZN6String6formatEPKcz>
   b47f4:	4669      	mov	r1, sp
   b47f6:	4628      	mov	r0, r5
   b47f8:	f003 f8dd 	bl	b79b6 <_ZN6String6concatERKS_>
   b47fc:	4668      	mov	r0, sp
   b47fe:	f003 f807 	bl	b7810 <_ZN6StringD1Ev>
        if (i < 23)
   b4802:	2c17      	cmp	r4, #23
   b4804:	d00a      	beq.n	b481c <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b4806:	4966      	ldr	r1, [pc, #408]	; (b49a0 <_Z11update_JSONv+0x254>)
   b4808:	4668      	mov	r0, sp
   b480a:	f003 f92b 	bl	b7a64 <_ZN6String6formatEPKcz>
   b480e:	4669      	mov	r1, sp
   b4810:	4628      	mov	r0, r5
   b4812:	f003 f8d0 	bl	b79b6 <_ZN6String6concatERKS_>
   b4816:	4668      	mov	r0, sp
   b4818:	f002 fffa 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b481c:	3401      	adds	r4, #1
   b481e:	2c18      	cmp	r4, #24
   b4820:	d1df      	bne.n	b47e2 <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b4822:	4960      	ldr	r1, [pc, #384]	; (b49a4 <_Z11update_JSONv+0x258>)
=======
   b47a8:	4e7d      	ldr	r6, [pc, #500]	; (b49a0 <_Z11update_JSONv+0x25c>)
   b47aa:	4f79      	ldr	r7, [pc, #484]	; (b4990 <_Z11update_JSONv+0x24c>)
   b47ac:	4d7d      	ldr	r5, [pc, #500]	; (b49a4 <_Z11update_JSONv+0x260>)
    pricesyesterday_Json += String::format("]}");
   b47ae:	4668      	mov	r0, sp
   b47b0:	f001 fe6e 	bl	b6490 <_ZN6String6formatEPKcz>
   b47b4:	4669      	mov	r1, sp
   b47b6:	4877      	ldr	r0, [pc, #476]	; (b4994 <_Z11update_JSONv+0x250>)
   b47b8:	f001 fe54 	bl	b6464 <_ZN6String6concatERKS_>
   b47bc:	4668      	mov	r0, sp
   b47be:	f001 fd77 	bl	b62b0 <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b47c2:	4979      	ldr	r1, [pc, #484]	; (b49a8 <_Z11update_JSONv+0x264>)
   b47c4:	4668      	mov	r0, sp
   b47c6:	f001 fe63 	bl	b6490 <_ZN6String6formatEPKcz>
   b47ca:	4669      	mov	r1, sp
   b47cc:	4875      	ldr	r0, [pc, #468]	; (b49a4 <_Z11update_JSONv+0x260>)
   b47ce:	f001 fe05 	bl	b63dc <_ZN6StringaSEOS_>
   b47d2:	4668      	mov	r0, sp
   b47d4:	f001 fd6c 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47d8:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b47da:	6833      	ldr	r3, [r6, #0]
   b47dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b47e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47e4:	4639      	mov	r1, r7
   b47e6:	4668      	mov	r0, sp
   b47e8:	f001 fe52 	bl	b6490 <_ZN6String6formatEPKcz>
   b47ec:	4669      	mov	r1, sp
   b47ee:	4628      	mov	r0, r5
   b47f0:	f001 fe38 	bl	b6464 <_ZN6String6concatERKS_>
   b47f4:	4668      	mov	r0, sp
   b47f6:	f001 fd5b 	bl	b62b0 <_ZN6StringD1Ev>
        if (i < 23)
   b47fa:	2c17      	cmp	r4, #23
   b47fc:	d00a      	beq.n	b4814 <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b47fe:	4966      	ldr	r1, [pc, #408]	; (b4998 <_Z11update_JSONv+0x254>)
   b4800:	4668      	mov	r0, sp
   b4802:	f001 fe45 	bl	b6490 <_ZN6String6formatEPKcz>
   b4806:	4669      	mov	r1, sp
   b4808:	4628      	mov	r0, r5
   b480a:	f001 fe2b 	bl	b6464 <_ZN6String6concatERKS_>
   b480e:	4668      	mov	r0, sp
   b4810:	f001 fd4e 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4814:	3401      	adds	r4, #1
   b4816:	2c18      	cmp	r4, #24
   b4818:	d1df      	bne.n	b47da <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b481a:	4960      	ldr	r1, [pc, #384]	; (b499c <_Z11update_JSONv+0x258>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

     // Updating prices today JSON string
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
<<<<<<< HEAD
   b4824:	4e63      	ldr	r6, [pc, #396]	; (b49b4 <_Z11update_JSONv+0x268>)
   b4826:	4f5c      	ldr	r7, [pc, #368]	; (b4998 <_Z11update_JSONv+0x24c>)
   b4828:	4d63      	ldr	r5, [pc, #396]	; (b49b8 <_Z11update_JSONv+0x26c>)
    pricestoday_Json += String::format("]}");
   b482a:	4668      	mov	r0, sp
   b482c:	f003 f91a 	bl	b7a64 <_ZN6String6formatEPKcz>
   b4830:	4669      	mov	r1, sp
   b4832:	485e      	ldr	r0, [pc, #376]	; (b49ac <_Z11update_JSONv+0x260>)
   b4834:	f003 f8bf 	bl	b79b6 <_ZN6String6concatERKS_>
   b4838:	4668      	mov	r0, sp
   b483a:	f002 ffe9 	bl	b7810 <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b483e:	495f      	ldr	r1, [pc, #380]	; (b49bc <_Z11update_JSONv+0x270>)
   b4840:	4668      	mov	r0, sp
   b4842:	f003 f90f 	bl	b7a64 <_ZN6String6formatEPKcz>
   b4846:	4669      	mov	r1, sp
   b4848:	485b      	ldr	r0, [pc, #364]	; (b49b8 <_Z11update_JSONv+0x26c>)
   b484a:	f003 f85d 	bl	b7908 <_ZN6StringaSEOS_>
   b484e:	4668      	mov	r0, sp
   b4850:	f002 ffde 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4854:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b4856:	6833      	ldr	r3, [r6, #0]
   b4858:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b485c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4860:	4639      	mov	r1, r7
   b4862:	4668      	mov	r0, sp
   b4864:	f003 f8fe 	bl	b7a64 <_ZN6String6formatEPKcz>
   b4868:	4669      	mov	r1, sp
   b486a:	4628      	mov	r0, r5
   b486c:	f003 f8a3 	bl	b79b6 <_ZN6String6concatERKS_>
   b4870:	4668      	mov	r0, sp
   b4872:	f002 ffcd 	bl	b7810 <_ZN6StringD1Ev>
        if (i < 23)
   b4876:	2c17      	cmp	r4, #23
   b4878:	d00a      	beq.n	b4890 <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b487a:	4949      	ldr	r1, [pc, #292]	; (b49a0 <_Z11update_JSONv+0x254>)
   b487c:	4668      	mov	r0, sp
   b487e:	f003 f8f1 	bl	b7a64 <_ZN6String6formatEPKcz>
   b4882:	4669      	mov	r1, sp
   b4884:	4628      	mov	r0, r5
   b4886:	f003 f896 	bl	b79b6 <_ZN6String6concatERKS_>
   b488a:	4668      	mov	r0, sp
   b488c:	f002 ffc0 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4890:	3401      	adds	r4, #1
   b4892:	2c18      	cmp	r4, #24
   b4894:	d1df      	bne.n	b4856 <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b4896:	4943      	ldr	r1, [pc, #268]	; (b49a4 <_Z11update_JSONv+0x258>)
=======
   b481c:	4e63      	ldr	r6, [pc, #396]	; (b49ac <_Z11update_JSONv+0x268>)
   b481e:	4f5c      	ldr	r7, [pc, #368]	; (b4990 <_Z11update_JSONv+0x24c>)
   b4820:	4d63      	ldr	r5, [pc, #396]	; (b49b0 <_Z11update_JSONv+0x26c>)
    pricestoday_Json += String::format("]}");
   b4822:	4668      	mov	r0, sp
   b4824:	f001 fe34 	bl	b6490 <_ZN6String6formatEPKcz>
   b4828:	4669      	mov	r1, sp
   b482a:	485e      	ldr	r0, [pc, #376]	; (b49a4 <_Z11update_JSONv+0x260>)
   b482c:	f001 fe1a 	bl	b6464 <_ZN6String6concatERKS_>
   b4830:	4668      	mov	r0, sp
   b4832:	f001 fd3d 	bl	b62b0 <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b4836:	495f      	ldr	r1, [pc, #380]	; (b49b4 <_Z11update_JSONv+0x270>)
   b4838:	4668      	mov	r0, sp
   b483a:	f001 fe29 	bl	b6490 <_ZN6String6formatEPKcz>
   b483e:	4669      	mov	r1, sp
   b4840:	485b      	ldr	r0, [pc, #364]	; (b49b0 <_Z11update_JSONv+0x26c>)
   b4842:	f001 fdcb 	bl	b63dc <_ZN6StringaSEOS_>
   b4846:	4668      	mov	r0, sp
   b4848:	f001 fd32 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b484c:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b484e:	6833      	ldr	r3, [r6, #0]
   b4850:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4854:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4858:	4639      	mov	r1, r7
   b485a:	4668      	mov	r0, sp
   b485c:	f001 fe18 	bl	b6490 <_ZN6String6formatEPKcz>
   b4860:	4669      	mov	r1, sp
   b4862:	4628      	mov	r0, r5
   b4864:	f001 fdfe 	bl	b6464 <_ZN6String6concatERKS_>
   b4868:	4668      	mov	r0, sp
   b486a:	f001 fd21 	bl	b62b0 <_ZN6StringD1Ev>
        if (i < 23)
   b486e:	2c17      	cmp	r4, #23
   b4870:	d00a      	beq.n	b4888 <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b4872:	4949      	ldr	r1, [pc, #292]	; (b4998 <_Z11update_JSONv+0x254>)
   b4874:	4668      	mov	r0, sp
   b4876:	f001 fe0b 	bl	b6490 <_ZN6String6formatEPKcz>
   b487a:	4669      	mov	r1, sp
   b487c:	4628      	mov	r0, r5
   b487e:	f001 fdf1 	bl	b6464 <_ZN6String6concatERKS_>
   b4882:	4668      	mov	r0, sp
   b4884:	f001 fd14 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4888:	3401      	adds	r4, #1
   b488a:	2c18      	cmp	r4, #24
   b488c:	d1df      	bne.n	b484e <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b488e:	4943      	ldr	r1, [pc, #268]	; (b499c <_Z11update_JSONv+0x258>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
<<<<<<< HEAD
   b4898:	4e49      	ldr	r6, [pc, #292]	; (b49c0 <_Z11update_JSONv+0x274>)
   b489a:	4f4a      	ldr	r7, [pc, #296]	; (b49c4 <_Z11update_JSONv+0x278>)
   b489c:	4d4a      	ldr	r5, [pc, #296]	; (b49c8 <_Z11update_JSONv+0x27c>)
    pricestomorrow_Json += String::format("]}");
   b489e:	4668      	mov	r0, sp
   b48a0:	f003 f8e0 	bl	b7a64 <_ZN6String6formatEPKcz>
   b48a4:	4669      	mov	r1, sp
   b48a6:	4844      	ldr	r0, [pc, #272]	; (b49b8 <_Z11update_JSONv+0x26c>)
   b48a8:	f003 f885 	bl	b79b6 <_ZN6String6concatERKS_>
   b48ac:	4668      	mov	r0, sp
   b48ae:	f002 ffaf 	bl	b7810 <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b48b2:	4946      	ldr	r1, [pc, #280]	; (b49cc <_Z11update_JSONv+0x280>)
   b48b4:	4668      	mov	r0, sp
   b48b6:	f003 f8d5 	bl	b7a64 <_ZN6String6formatEPKcz>
   b48ba:	4669      	mov	r1, sp
   b48bc:	4842      	ldr	r0, [pc, #264]	; (b49c8 <_Z11update_JSONv+0x27c>)
   b48be:	f003 f823 	bl	b7908 <_ZN6StringaSEOS_>
   b48c2:	4668      	mov	r0, sp
   b48c4:	f002 ffa4 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48c8:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b48ca:	6833      	ldr	r3, [r6, #0]
   b48cc:	4639      	mov	r1, r7
   b48ce:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b48d2:	4668      	mov	r0, sp
   b48d4:	f003 f8c6 	bl	b7a64 <_ZN6String6formatEPKcz>
   b48d8:	4669      	mov	r1, sp
   b48da:	4628      	mov	r0, r5
   b48dc:	f003 f86b 	bl	b79b6 <_ZN6String6concatERKS_>
   b48e0:	4668      	mov	r0, sp
   b48e2:	f002 ff95 	bl	b7810 <_ZN6StringD1Ev>
        if (i < 23)
   b48e6:	2c17      	cmp	r4, #23
   b48e8:	d00a      	beq.n	b4900 <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b48ea:	492d      	ldr	r1, [pc, #180]	; (b49a0 <_Z11update_JSONv+0x254>)
   b48ec:	4668      	mov	r0, sp
   b48ee:	f003 f8b9 	bl	b7a64 <_ZN6String6formatEPKcz>
   b48f2:	4669      	mov	r1, sp
   b48f4:	4628      	mov	r0, r5
   b48f6:	f003 f85e 	bl	b79b6 <_ZN6String6concatERKS_>
   b48fa:	4668      	mov	r0, sp
   b48fc:	f002 ff88 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4900:	3401      	adds	r4, #1
   b4902:	2c18      	cmp	r4, #24
   b4904:	d1e1      	bne.n	b48ca <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b4906:	4927      	ldr	r1, [pc, #156]	; (b49a4 <_Z11update_JSONv+0x258>)
=======
   b4890:	4e49      	ldr	r6, [pc, #292]	; (b49b8 <_Z11update_JSONv+0x274>)
   b4892:	4f4a      	ldr	r7, [pc, #296]	; (b49bc <_Z11update_JSONv+0x278>)
   b4894:	4d4a      	ldr	r5, [pc, #296]	; (b49c0 <_Z11update_JSONv+0x27c>)
    pricestomorrow_Json += String::format("]}");
   b4896:	4668      	mov	r0, sp
   b4898:	f001 fdfa 	bl	b6490 <_ZN6String6formatEPKcz>
   b489c:	4669      	mov	r1, sp
   b489e:	4844      	ldr	r0, [pc, #272]	; (b49b0 <_Z11update_JSONv+0x26c>)
   b48a0:	f001 fde0 	bl	b6464 <_ZN6String6concatERKS_>
   b48a4:	4668      	mov	r0, sp
   b48a6:	f001 fd03 	bl	b62b0 <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b48aa:	4946      	ldr	r1, [pc, #280]	; (b49c4 <_Z11update_JSONv+0x280>)
   b48ac:	4668      	mov	r0, sp
   b48ae:	f001 fdef 	bl	b6490 <_ZN6String6formatEPKcz>
   b48b2:	4669      	mov	r1, sp
   b48b4:	4842      	ldr	r0, [pc, #264]	; (b49c0 <_Z11update_JSONv+0x27c>)
   b48b6:	f001 fd91 	bl	b63dc <_ZN6StringaSEOS_>
   b48ba:	4668      	mov	r0, sp
   b48bc:	f001 fcf8 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48c0:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b48c2:	6833      	ldr	r3, [r6, #0]
   b48c4:	4639      	mov	r1, r7
   b48c6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b48ca:	4668      	mov	r0, sp
   b48cc:	f001 fde0 	bl	b6490 <_ZN6String6formatEPKcz>
   b48d0:	4669      	mov	r1, sp
   b48d2:	4628      	mov	r0, r5
   b48d4:	f001 fdc6 	bl	b6464 <_ZN6String6concatERKS_>
   b48d8:	4668      	mov	r0, sp
   b48da:	f001 fce9 	bl	b62b0 <_ZN6StringD1Ev>
        if (i < 23)
   b48de:	2c17      	cmp	r4, #23
   b48e0:	d00a      	beq.n	b48f8 <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b48e2:	492d      	ldr	r1, [pc, #180]	; (b4998 <_Z11update_JSONv+0x254>)
   b48e4:	4668      	mov	r0, sp
   b48e6:	f001 fdd3 	bl	b6490 <_ZN6String6formatEPKcz>
   b48ea:	4669      	mov	r1, sp
   b48ec:	4628      	mov	r0, r5
   b48ee:	f001 fdb9 	bl	b6464 <_ZN6String6concatERKS_>
   b48f2:	4668      	mov	r0, sp
   b48f4:	f001 fcdc 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48f8:	3401      	adds	r4, #1
   b48fa:	2c18      	cmp	r4, #24
   b48fc:	d1e1      	bne.n	b48c2 <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b48fe:	4927      	ldr	r1, [pc, #156]	; (b499c <_Z11update_JSONv+0x258>)
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
<<<<<<< HEAD
   b4908:	4e31      	ldr	r6, [pc, #196]	; (b49d0 <_Z11update_JSONv+0x284>)
   b490a:	4f2e      	ldr	r7, [pc, #184]	; (b49c4 <_Z11update_JSONv+0x278>)
   b490c:	4d31      	ldr	r5, [pc, #196]	; (b49d4 <_Z11update_JSONv+0x288>)
    wh_yesterday_Json += String::format("]}");
   b490e:	4668      	mov	r0, sp
   b4910:	f003 f8a8 	bl	b7a64 <_ZN6String6formatEPKcz>
   b4914:	4669      	mov	r1, sp
   b4916:	482c      	ldr	r0, [pc, #176]	; (b49c8 <_Z11update_JSONv+0x27c>)
   b4918:	f003 f84d 	bl	b79b6 <_ZN6String6concatERKS_>
   b491c:	4668      	mov	r0, sp
   b491e:	f002 ff77 	bl	b7810 <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b4922:	492d      	ldr	r1, [pc, #180]	; (b49d8 <_Z11update_JSONv+0x28c>)
   b4924:	4668      	mov	r0, sp
   b4926:	f003 f89d 	bl	b7a64 <_ZN6String6formatEPKcz>
   b492a:	4669      	mov	r1, sp
   b492c:	4829      	ldr	r0, [pc, #164]	; (b49d4 <_Z11update_JSONv+0x288>)
   b492e:	f002 ffeb 	bl	b7908 <_ZN6StringaSEOS_>
   b4932:	4668      	mov	r0, sp
   b4934:	f002 ff6c 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4938:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b493a:	6833      	ldr	r3, [r6, #0]
   b493c:	4639      	mov	r1, r7
   b493e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b4942:	4668      	mov	r0, sp
   b4944:	f003 f88e 	bl	b7a64 <_ZN6String6formatEPKcz>
   b4948:	4669      	mov	r1, sp
   b494a:	4628      	mov	r0, r5
   b494c:	f003 f833 	bl	b79b6 <_ZN6String6concatERKS_>
   b4950:	4668      	mov	r0, sp
   b4952:	f002 ff5d 	bl	b7810 <_ZN6StringD1Ev>
        if (i < 23)
   b4956:	2c17      	cmp	r4, #23
   b4958:	d00a      	beq.n	b4970 <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b495a:	4911      	ldr	r1, [pc, #68]	; (b49a0 <_Z11update_JSONv+0x254>)
   b495c:	4668      	mov	r0, sp
   b495e:	f003 f881 	bl	b7a64 <_ZN6String6formatEPKcz>
   b4962:	4669      	mov	r1, sp
   b4964:	4628      	mov	r0, r5
   b4966:	f003 f826 	bl	b79b6 <_ZN6String6concatERKS_>
   b496a:	4668      	mov	r0, sp
   b496c:	f002 ff50 	bl	b7810 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4970:	3401      	adds	r4, #1
   b4972:	2c18      	cmp	r4, #24
   b4974:	d1e1      	bne.n	b493a <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b4976:	4668      	mov	r0, sp
   b4978:	490a      	ldr	r1, [pc, #40]	; (b49a4 <_Z11update_JSONv+0x258>)
   b497a:	f003 f873 	bl	b7a64 <_ZN6String6formatEPKcz>
   b497e:	4669      	mov	r1, sp
   b4980:	4814      	ldr	r0, [pc, #80]	; (b49d4 <_Z11update_JSONv+0x288>)
   b4982:	f003 f818 	bl	b79b6 <_ZN6String6concatERKS_>
   b4986:	4668      	mov	r0, sp
   b4988:	f002 ff42 	bl	b7810 <_ZN6StringD1Ev>

   b498c:	b005      	add	sp, #20
   b498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4990:	000bd5be 	.word	0x000bd5be
   b4994:	2003dca0 	.word	0x2003dca0
   b4998:	000bd5d3 	.word	0x000bd5d3
   b499c:	2003dccc 	.word	0x2003dccc
   b49a0:	000bd5b9 	.word	0x000bd5b9
   b49a4:	000bd5bb 	.word	0x000bd5bb
   b49a8:	2003dc98 	.word	0x2003dc98
   b49ac:	2003dcac 	.word	0x2003dcac
   b49b0:	000bd5d9 	.word	0x000bd5d9
   b49b4:	2003dc9c 	.word	0x2003dc9c
   b49b8:	2003dcbc 	.word	0x2003dcbc
   b49bc:	000bd5ea 	.word	0x000bd5ea
   b49c0:	2003e1cc 	.word	0x2003e1cc
   b49c4:	000bd788 	.word	0x000bd788
   b49c8:	2003e1d0 	.word	0x2003e1d0
   b49cc:	000bd5fe 	.word	0x000bd5fe
   b49d0:	2003e1b8 	.word	0x2003e1b8
   b49d4:	2003e1bc 	.word	0x2003e1bc
   b49d8:	000bd611 	.word	0x000bd611

000b49dc <_Z11init_memoryv>:
{
   b49dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b49e0:	20c0      	movs	r0, #192	; 0xc0
   b49e2:	f002 fa4f 	bl	b6e84 <malloc>
   b49e6:	4d38      	ldr	r5, [pc, #224]	; (b4ac8 <_Z11init_memoryv+0xec>)
   b49e8:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b49ea:	b928      	cbnz	r0, b49f8 <_Z11init_memoryv+0x1c>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b49ec:	f005 f840 	bl	b9a70 <_Z16_fetch_usbserialv>
   b49f0:	4936      	ldr	r1, [pc, #216]	; (b4acc <_Z11init_memoryv+0xf0>)
   b49f2:	f7ff fc4f 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b49f6:	e7fe      	b.n	b49f6 <_Z11init_memoryv+0x1a>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b49f8:	20c0      	movs	r0, #192	; 0xc0
   b49fa:	f002 fa43 	bl	b6e84 <malloc>
   b49fe:	4c34      	ldr	r4, [pc, #208]	; (b4ad0 <_Z11init_memoryv+0xf4>)
   b4a00:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b4a02:	b928      	cbnz	r0, b4a10 <_Z11init_memoryv+0x34>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b4a04:	f005 f834 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4a08:	4932      	ldr	r1, [pc, #200]	; (b4ad4 <_Z11init_memoryv+0xf8>)
   b4a0a:	f7ff fc43 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b4a0e:	e7fe      	b.n	b4a0e <_Z11init_memoryv+0x32>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b4a10:	20c0      	movs	r0, #192	; 0xc0
   b4a12:	f002 fa37 	bl	b6e84 <malloc>
   b4a16:	4e30      	ldr	r6, [pc, #192]	; (b4ad8 <_Z11init_memoryv+0xfc>)
   b4a18:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b4a1a:	b928      	cbnz	r0, b4a28 <_Z11init_memoryv+0x4c>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b4a1c:	f005 f828 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4a20:	492e      	ldr	r1, [pc, #184]	; (b4adc <_Z11init_memoryv+0x100>)
   b4a22:	f7ff fc37 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b4a26:	e7fe      	b.n	b4a26 <_Z11init_memoryv+0x4a>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4a28:	f005 f822 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4a2c:	492c      	ldr	r1, [pc, #176]	; (b4ae0 <_Z11init_memoryv+0x104>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4a2e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b4af4 <_Z11init_memoryv+0x118>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4a32:	f44f 7210 	mov.w	r2, #576	; 0x240
   b4a36:	f7ff fc2d 	bl	b4294 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4a3a:	2060      	movs	r0, #96	; 0x60
   b4a3c:	f002 fa22 	bl	b6e84 <malloc>
   b4a40:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b4a44:	b928      	cbnz	r0, b4a52 <_Z11init_memoryv+0x76>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b4a46:	f005 f813 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4a4a:	4926      	ldr	r1, [pc, #152]	; (b4ae4 <_Z11init_memoryv+0x108>)
   b4a4c:	f7ff fc22 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b4a50:	e7fe      	b.n	b4a50 <_Z11init_memoryv+0x74>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b4a52:	2060      	movs	r0, #96	; 0x60
   b4a54:	f002 fa16 	bl	b6e84 <malloc>
   b4a58:	f8df 909c 	ldr.w	r9, [pc, #156]	; b4af8 <_Z11init_memoryv+0x11c>
   b4a5c:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b4a60:	b928      	cbnz	r0, b4a6e <_Z11init_memoryv+0x92>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b4a62:	f005 f805 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4a66:	4920      	ldr	r1, [pc, #128]	; (b4ae8 <_Z11init_memoryv+0x10c>)
   b4a68:	f7ff fc14 	bl	b4294 <_ZN5Print6printfEPKcz>
        while (1)
   b4a6c:	e7fe      	b.n	b4a6c <_Z11init_memoryv+0x90>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b4a6e:	f004 ffff 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4a72:	491e      	ldr	r1, [pc, #120]	; (b4aec <_Z11init_memoryv+0x110>)
   b4a74:	22c0      	movs	r2, #192	; 0xc0
   b4a76:	f7ff fc0d 	bl	b4294 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b4a7a:	f004 fff9 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4a7e:	4607      	mov	r7, r0
   b4a80:	f002 faa0 	bl	b6fc4 <_ZN11SystemClass10freeMemoryEv>
   b4a84:	491a      	ldr	r1, [pc, #104]	; (b4af0 <_Z11init_memoryv+0x114>)
   b4a86:	4602      	mov	r2, r0
   b4a88:	4638      	mov	r0, r7
   b4a8a:	f7ff fc03 	bl	b4294 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b4a8e:	6828      	ldr	r0, [r5, #0]
   b4a90:	22c0      	movs	r2, #192	; 0xc0
   b4a92:	2100      	movs	r1, #0
   b4a94:	f006 fc71 	bl	bb37a <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b4a98:	6820      	ldr	r0, [r4, #0]
   b4a9a:	22c0      	movs	r2, #192	; 0xc0
   b4a9c:	2100      	movs	r1, #0
   b4a9e:	f006 fc6c 	bl	bb37a <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4aa2:	6830      	ldr	r0, [r6, #0]
   b4aa4:	22c0      	movs	r2, #192	; 0xc0
   b4aa6:	2100      	movs	r1, #0
   b4aa8:	f006 fc67 	bl	bb37a <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4aac:	f8d8 0000 	ldr.w	r0, [r8]
   b4ab0:	2260      	movs	r2, #96	; 0x60
   b4ab2:	2100      	movs	r1, #0
   b4ab4:	f006 fc61 	bl	bb37a <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4ab8:	f8d9 0000 	ldr.w	r0, [r9]
   b4abc:	2260      	movs	r2, #96	; 0x60
}
   b4abe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4ac2:	2100      	movs	r1, #0
   b4ac4:	f006 bc59 	b.w	bb37a <memset>
   b4ac8:	2003dca0 	.word	0x2003dca0
   b4acc:	000bd620 	.word	0x000bd620
   b4ad0:	2003dc98 	.word	0x2003dc98
   b4ad4:	000bd64e 	.word	0x000bd64e
   b4ad8:	2003dc9c 	.word	0x2003dc9c
   b4adc:	000bd678 	.word	0x000bd678
   b4ae0:	000bd6a5 	.word	0x000bd6a5
   b4ae4:	000bd6d7 	.word	0x000bd6d7
   b4ae8:	000bd6ff 	.word	0x000bd6ff
   b4aec:	000bd72b 	.word	0x000bd72b
   b4af0:	000bd756 	.word	0x000bd756
   b4af4:	2003e1b8 	.word	0x2003e1b8
   b4af8:	2003e1cc 	.word	0x2003e1cc

000b4afc <setup>:
{
   b4afc:	b510      	push	{r4, lr}
    STARTUP = true;
   b4afe:	4b43      	ldr	r3, [pc, #268]	; (b4c0c <setup+0x110>)
   b4b00:	2201      	movs	r2, #1
{
   b4b02:	b092      	sub	sp, #72	; 0x48
    STARTUP = true;
   b4b04:	701a      	strb	r2, [r3, #0]
=======
   b4900:	4e31      	ldr	r6, [pc, #196]	; (b49c8 <_Z11update_JSONv+0x284>)
   b4902:	4f2e      	ldr	r7, [pc, #184]	; (b49bc <_Z11update_JSONv+0x278>)
   b4904:	4d31      	ldr	r5, [pc, #196]	; (b49cc <_Z11update_JSONv+0x288>)
    wh_yesterday_Json += String::format("]}");
   b4906:	4668      	mov	r0, sp
   b4908:	f001 fdc2 	bl	b6490 <_ZN6String6formatEPKcz>
   b490c:	4669      	mov	r1, sp
   b490e:	482c      	ldr	r0, [pc, #176]	; (b49c0 <_Z11update_JSONv+0x27c>)
   b4910:	f001 fda8 	bl	b6464 <_ZN6String6concatERKS_>
   b4914:	4668      	mov	r0, sp
   b4916:	f001 fccb 	bl	b62b0 <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b491a:	492d      	ldr	r1, [pc, #180]	; (b49d0 <_Z11update_JSONv+0x28c>)
   b491c:	4668      	mov	r0, sp
   b491e:	f001 fdb7 	bl	b6490 <_ZN6String6formatEPKcz>
   b4922:	4669      	mov	r1, sp
   b4924:	4829      	ldr	r0, [pc, #164]	; (b49cc <_Z11update_JSONv+0x288>)
   b4926:	f001 fd59 	bl	b63dc <_ZN6StringaSEOS_>
   b492a:	4668      	mov	r0, sp
   b492c:	f001 fcc0 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4930:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b4932:	6833      	ldr	r3, [r6, #0]
   b4934:	4639      	mov	r1, r7
   b4936:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b493a:	4668      	mov	r0, sp
   b493c:	f001 fda8 	bl	b6490 <_ZN6String6formatEPKcz>
   b4940:	4669      	mov	r1, sp
   b4942:	4628      	mov	r0, r5
   b4944:	f001 fd8e 	bl	b6464 <_ZN6String6concatERKS_>
   b4948:	4668      	mov	r0, sp
   b494a:	f001 fcb1 	bl	b62b0 <_ZN6StringD1Ev>
        if (i < 23)
   b494e:	2c17      	cmp	r4, #23
   b4950:	d00a      	beq.n	b4968 <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b4952:	4911      	ldr	r1, [pc, #68]	; (b4998 <_Z11update_JSONv+0x254>)
   b4954:	4668      	mov	r0, sp
   b4956:	f001 fd9b 	bl	b6490 <_ZN6String6formatEPKcz>
   b495a:	4669      	mov	r1, sp
   b495c:	4628      	mov	r0, r5
   b495e:	f001 fd81 	bl	b6464 <_ZN6String6concatERKS_>
   b4962:	4668      	mov	r0, sp
   b4964:	f001 fca4 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4968:	3401      	adds	r4, #1
   b496a:	2c18      	cmp	r4, #24
   b496c:	d1e1      	bne.n	b4932 <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b496e:	4668      	mov	r0, sp
   b4970:	490a      	ldr	r1, [pc, #40]	; (b499c <_Z11update_JSONv+0x258>)
   b4972:	f001 fd8d 	bl	b6490 <_ZN6String6formatEPKcz>
   b4976:	4669      	mov	r1, sp
   b4978:	4814      	ldr	r0, [pc, #80]	; (b49cc <_Z11update_JSONv+0x288>)
   b497a:	f001 fd73 	bl	b6464 <_ZN6String6concatERKS_>
   b497e:	4668      	mov	r0, sp
   b4980:	f001 fc96 	bl	b62b0 <_ZN6StringD1Ev>

}
   b4984:	b005      	add	sp, #20
   b4986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4988:	000bb99e 	.word	0x000bb99e
   b498c:	2003dca0 	.word	0x2003dca0
   b4990:	000bb9b3 	.word	0x000bb9b3
   b4994:	2003dccc 	.word	0x2003dccc
   b4998:	000bb999 	.word	0x000bb999
   b499c:	000bb99b 	.word	0x000bb99b
   b49a0:	2003dc98 	.word	0x2003dc98
   b49a4:	2003dcac 	.word	0x2003dcac
   b49a8:	000bb9b9 	.word	0x000bb9b9
   b49ac:	2003dc9c 	.word	0x2003dc9c
   b49b0:	2003dcbc 	.word	0x2003dcbc
   b49b4:	000bb9ca 	.word	0x000bb9ca
   b49b8:	2003e1cc 	.word	0x2003e1cc
   b49bc:	000bbbf1 	.word	0x000bbbf1
   b49c0:	2003e1d0 	.word	0x2003e1d0
   b49c4:	000bb9de 	.word	0x000bb9de
   b49c8:	2003e1b8 	.word	0x2003e1b8
   b49cc:	2003e1bc 	.word	0x2003e1bc
   b49d0:	000bb9f1 	.word	0x000bb9f1

000b49d4 <_Z21update_Whr_Today_JSONv>:
String update_Whr_Today_JSON()
{
   b49d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
   b49d8:	4920      	ldr	r1, [pc, #128]	; (b4a5c <_Z21update_Whr_Today_JSONv+0x88>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b49da:	4f21      	ldr	r7, [pc, #132]	; (b4a60 <_Z21update_Whr_Today_JSONv+0x8c>)
   b49dc:	f8df 8090 	ldr.w	r8, [pc, #144]	; b4a70 <_Z21update_Whr_Today_JSONv+0x9c>
   b49e0:	4e20      	ldr	r6, [pc, #128]	; (b4a64 <_Z21update_Whr_Today_JSONv+0x90>)
{
   b49e2:	4605      	mov	r5, r0
    wh_today_Json = String::format("{\"WHr_today\":[");
   b49e4:	4668      	mov	r0, sp
   b49e6:	f001 fd53 	bl	b6490 <_ZN6String6formatEPKcz>
   b49ea:	4669      	mov	r1, sp
   b49ec:	481d      	ldr	r0, [pc, #116]	; (b4a64 <_Z21update_Whr_Today_JSONv+0x90>)
   b49ee:	f001 fcf5 	bl	b63dc <_ZN6StringaSEOS_>
   b49f2:	4668      	mov	r0, sp
   b49f4:	f001 fc5c 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b49f8:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b49fa:	683b      	ldr	r3, [r7, #0]
   b49fc:	4641      	mov	r1, r8
   b49fe:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b4a02:	4668      	mov	r0, sp
   b4a04:	f001 fd44 	bl	b6490 <_ZN6String6formatEPKcz>
   b4a08:	4669      	mov	r1, sp
   b4a0a:	4630      	mov	r0, r6
   b4a0c:	f001 fd2a 	bl	b6464 <_ZN6String6concatERKS_>
   b4a10:	4668      	mov	r0, sp
   b4a12:	f001 fc4d 	bl	b62b0 <_ZN6StringD1Ev>
        if (i < 23)
   b4a16:	2c17      	cmp	r4, #23
   b4a18:	d00a      	beq.n	b4a30 <_Z21update_Whr_Today_JSONv+0x5c>
        {
            wh_today_Json += String::format(",");
   b4a1a:	4913      	ldr	r1, [pc, #76]	; (b4a68 <_Z21update_Whr_Today_JSONv+0x94>)
   b4a1c:	4668      	mov	r0, sp
   b4a1e:	f001 fd37 	bl	b6490 <_ZN6String6formatEPKcz>
   b4a22:	4669      	mov	r1, sp
   b4a24:	4630      	mov	r0, r6
   b4a26:	f001 fd1d 	bl	b6464 <_ZN6String6concatERKS_>
   b4a2a:	4668      	mov	r0, sp
   b4a2c:	f001 fc40 	bl	b62b0 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4a30:	3401      	adds	r4, #1
   b4a32:	2c18      	cmp	r4, #24
   b4a34:	d1e1      	bne.n	b49fa <_Z21update_Whr_Today_JSONv+0x26>
        }
    }
    wh_today_Json += String::format("]}");
   b4a36:	4668      	mov	r0, sp
   b4a38:	490c      	ldr	r1, [pc, #48]	; (b4a6c <_Z21update_Whr_Today_JSONv+0x98>)
   b4a3a:	f001 fd29 	bl	b6490 <_ZN6String6formatEPKcz>
   b4a3e:	4669      	mov	r1, sp
   b4a40:	4808      	ldr	r0, [pc, #32]	; (b4a64 <_Z21update_Whr_Today_JSONv+0x90>)
   b4a42:	f001 fd0f 	bl	b6464 <_ZN6String6concatERKS_>
   b4a46:	4668      	mov	r0, sp
   b4a48:	f001 fc32 	bl	b62b0 <_ZN6StringD1Ev>

    return wh_today_Json;
   b4a4c:	4905      	ldr	r1, [pc, #20]	; (b4a64 <_Z21update_Whr_Today_JSONv+0x90>)
   b4a4e:	4628      	mov	r0, r5
   b4a50:	f001 fcb9 	bl	b63c6 <_ZN6StringC1ERKS_>
   b4a54:	4628      	mov	r0, r5
   b4a56:	b004      	add	sp, #16
   b4a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4a5c:	000bb9f1 	.word	0x000bb9f1
   b4a60:	2003e1b8 	.word	0x2003e1b8
   b4a64:	2003e1bc 	.word	0x2003e1bc
   b4a68:	000bb999 	.word	0x000bb999
   b4a6c:	000bb99b 	.word	0x000bb99b
   b4a70:	000bbbf1 	.word	0x000bbbf1

000b4a74 <_Z11init_memoryv>:
{
   b4a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    Serial.printf("before %lu\n", System.freeMemory());
   b4a78:	f003 fcde 	bl	b8438 <_Z16_fetch_usbserialv>
   b4a7c:	4604      	mov	r4, r0
   b4a7e:	f001 f8bb 	bl	b5bf8 <_ZN11SystemClass10freeMemoryEv>
   b4a82:	493c      	ldr	r1, [pc, #240]	; (b4b74 <_Z11init_memoryv+0x100>)
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b4a84:	4d3c      	ldr	r5, [pc, #240]	; (b4b78 <_Z11init_memoryv+0x104>)
    Serial.printf("before %lu\n", System.freeMemory());
   b4a86:	4602      	mov	r2, r0
   b4a88:	4620      	mov	r0, r4
   b4a8a:	f7ff fbfb 	bl	b4284 <_ZN5Print6printfEPKcz>
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b4a8e:	20c0      	movs	r0, #192	; 0xc0
   b4a90:	f001 f812 	bl	b5ab8 <malloc>
   b4a94:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b4a96:	b928      	cbnz	r0, b4aa4 <_Z11init_memoryv+0x30>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b4a98:	f003 fcce 	bl	b8438 <_Z16_fetch_usbserialv>
   b4a9c:	4937      	ldr	r1, [pc, #220]	; (b4b7c <_Z11init_memoryv+0x108>)
   b4a9e:	f7ff fbf1 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4aa2:	e7fe      	b.n	b4aa2 <_Z11init_memoryv+0x2e>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b4aa4:	20c0      	movs	r0, #192	; 0xc0
   b4aa6:	f001 f807 	bl	b5ab8 <malloc>
   b4aaa:	4c35      	ldr	r4, [pc, #212]	; (b4b80 <_Z11init_memoryv+0x10c>)
   b4aac:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b4aae:	b928      	cbnz	r0, b4abc <_Z11init_memoryv+0x48>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b4ab0:	f003 fcc2 	bl	b8438 <_Z16_fetch_usbserialv>
   b4ab4:	4933      	ldr	r1, [pc, #204]	; (b4b84 <_Z11init_memoryv+0x110>)
   b4ab6:	f7ff fbe5 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4aba:	e7fe      	b.n	b4aba <_Z11init_memoryv+0x46>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b4abc:	20c0      	movs	r0, #192	; 0xc0
   b4abe:	f000 fffb 	bl	b5ab8 <malloc>
   b4ac2:	4e31      	ldr	r6, [pc, #196]	; (b4b88 <_Z11init_memoryv+0x114>)
   b4ac4:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b4ac6:	b928      	cbnz	r0, b4ad4 <_Z11init_memoryv+0x60>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b4ac8:	f003 fcb6 	bl	b8438 <_Z16_fetch_usbserialv>
   b4acc:	492f      	ldr	r1, [pc, #188]	; (b4b8c <_Z11init_memoryv+0x118>)
   b4ace:	f7ff fbd9 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4ad2:	e7fe      	b.n	b4ad2 <_Z11init_memoryv+0x5e>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4ad4:	f003 fcb0 	bl	b8438 <_Z16_fetch_usbserialv>
   b4ad8:	492d      	ldr	r1, [pc, #180]	; (b4b90 <_Z11init_memoryv+0x11c>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4ada:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b4ba4 <_Z11init_memoryv+0x130>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4ade:	f44f 7210 	mov.w	r2, #576	; 0x240
   b4ae2:	f7ff fbcf 	bl	b4284 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4ae6:	2060      	movs	r0, #96	; 0x60
   b4ae8:	f000 ffe6 	bl	b5ab8 <malloc>
   b4aec:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b4af0:	b928      	cbnz	r0, b4afe <_Z11init_memoryv+0x8a>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b4af2:	f003 fca1 	bl	b8438 <_Z16_fetch_usbserialv>
   b4af6:	4927      	ldr	r1, [pc, #156]	; (b4b94 <_Z11init_memoryv+0x120>)
   b4af8:	f7ff fbc4 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4afc:	e7fe      	b.n	b4afc <_Z11init_memoryv+0x88>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b4afe:	2060      	movs	r0, #96	; 0x60
   b4b00:	f000 ffda 	bl	b5ab8 <malloc>
   b4b04:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b4ba8 <_Z11init_memoryv+0x134>
   b4b08:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b4b0c:	b928      	cbnz	r0, b4b1a <_Z11init_memoryv+0xa6>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b4b0e:	f003 fc93 	bl	b8438 <_Z16_fetch_usbserialv>
   b4b12:	4921      	ldr	r1, [pc, #132]	; (b4b98 <_Z11init_memoryv+0x124>)
   b4b14:	f7ff fbb6 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4b18:	e7fe      	b.n	b4b18 <_Z11init_memoryv+0xa4>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b4b1a:	f003 fc8d 	bl	b8438 <_Z16_fetch_usbserialv>
   b4b1e:	491f      	ldr	r1, [pc, #124]	; (b4b9c <_Z11init_memoryv+0x128>)
   b4b20:	22c0      	movs	r2, #192	; 0xc0
   b4b22:	f7ff fbaf 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b4b26:	f003 fc87 	bl	b8438 <_Z16_fetch_usbserialv>
   b4b2a:	4607      	mov	r7, r0
   b4b2c:	f001 f864 	bl	b5bf8 <_ZN11SystemClass10freeMemoryEv>
   b4b30:	491b      	ldr	r1, [pc, #108]	; (b4ba0 <_Z11init_memoryv+0x12c>)
   b4b32:	4602      	mov	r2, r0
   b4b34:	4638      	mov	r0, r7
   b4b36:	f7ff fba5 	bl	b4284 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b4b3a:	6828      	ldr	r0, [r5, #0]
   b4b3c:	22c0      	movs	r2, #192	; 0xc0
   b4b3e:	2100      	movs	r1, #0
   b4b40:	f004 fe1f 	bl	b9782 <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b4b44:	6820      	ldr	r0, [r4, #0]
   b4b46:	22c0      	movs	r2, #192	; 0xc0
   b4b48:	2100      	movs	r1, #0
   b4b4a:	f004 fe1a 	bl	b9782 <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4b4e:	6830      	ldr	r0, [r6, #0]
   b4b50:	22c0      	movs	r2, #192	; 0xc0
   b4b52:	2100      	movs	r1, #0
   b4b54:	f004 fe15 	bl	b9782 <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4b58:	f8d8 0000 	ldr.w	r0, [r8]
   b4b5c:	2260      	movs	r2, #96	; 0x60
   b4b5e:	2100      	movs	r1, #0
   b4b60:	f004 fe0f 	bl	b9782 <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4b64:	f8d9 0000 	ldr.w	r0, [r9]
   b4b68:	2260      	movs	r2, #96	; 0x60
}
   b4b6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4b6e:	2100      	movs	r1, #0
   b4b70:	f004 be07 	b.w	b9782 <memset>
   b4b74:	000bba00 	.word	0x000bba00
   b4b78:	2003dca0 	.word	0x2003dca0
   b4b7c:	000bba0c 	.word	0x000bba0c
   b4b80:	2003dc98 	.word	0x2003dc98
   b4b84:	000bba3a 	.word	0x000bba3a
   b4b88:	2003dc9c 	.word	0x2003dc9c
   b4b8c:	000bba64 	.word	0x000bba64
   b4b90:	000bba91 	.word	0x000bba91
   b4b94:	000bbac3 	.word	0x000bbac3
   b4b98:	000bbaeb 	.word	0x000bbaeb
   b4b9c:	000bbb17 	.word	0x000bbb17
   b4ba0:	000bbb42 	.word	0x000bbb42
   b4ba4:	2003e1b8 	.word	0x2003e1b8
   b4ba8:	2003e1cc 	.word	0x2003e1cc

000b4bac <setup>:
{
   b4bac:	b530      	push	{r4, r5, lr}
    STARTUP = true;
   b4bae:	4b20      	ldr	r3, [pc, #128]	; (b4c30 <setup+0x84>)
   b4bb0:	2201      	movs	r2, #1
{
   b4bb2:	b085      	sub	sp, #20
    STARTUP = true;
   b4bb4:	701a      	strb	r2, [r3, #0]
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
<<<<<<< HEAD
   b4b06:	f002 f995 	bl	b6e34 <spark_cloud_flag_connected>
=======
   b4bb6:	f000 ff57 	bl	b5a68 <spark_cloud_flag_connected>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
<<<<<<< HEAD
   b4b0a:	b910      	cbnz	r0, b4b12 <setup+0x16>
            spark_process();
   b4b0c:	f002 f98a 	bl	b6e24 <spark_process>
        while (_while() && !_condition()) {
   b4b10:	e7f9      	b.n	b4b06 <setup+0xa>
   b4b12:	f002 f98f 	bl	b6e34 <spark_cloud_flag_connected>
    ble_setup();
   b4b16:	f7ff fc9d 	bl	b4454 <_Z9ble_setupv>
    init_memory();
   b4b1a:	f7ff ff5f 	bl	b49dc <_Z11init_memoryv>
    Time.zone(1);
   b4b1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b4b22:	f004 fab9 	bl	b9098 <_ZN9TimeClass4zoneEf>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, FALLING);
   b4b26:	2400      	movs	r4, #0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b4b28:	2103      	movs	r1, #3
   b4b2a:	2008      	movs	r0, #8
   b4b2c:	f005 fd5c 	bl	ba5e8 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, FALLING);
   b4b30:	f04f 33ff 	mov.w	r3, #4294967295
   b4b34:	4936      	ldr	r1, [pc, #216]	; (b4c10 <setup+0x114>)
   b4b36:	9400      	str	r4, [sp, #0]
   b4b38:	2202      	movs	r2, #2
   b4b3a:	2008      	movs	r0, #8
   b4b3c:	f004 ffc0 	bl	b9ac0 <_Z15attachInterrupttPFvvE13InterruptModeah>
    IPAddress IP = resolver.search("homeassistant.local");
   b4b40:	4a34      	ldr	r2, [pc, #208]	; (b4c14 <setup+0x118>)
   b4b42:	4935      	ldr	r1, [pc, #212]	; (b4c18 <setup+0x11c>)
   b4b44:	a80c      	add	r0, sp, #48	; 0x30
   b4b46:	f001 fda5 	bl	b6694 <_ZN12mDNSResolver8Resolver6searchEPKc>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b4b4a:	a90c      	add	r1, sp, #48	; 0x30
   b4b4c:	a808      	add	r0, sp, #32
   b4b4e:	f002 ff6f 	bl	b7a30 <_ZN6StringC1ERK9Printable>
    client.setBroker(IP.toString(), PORT);
   b4b52:	9908      	ldr	r1, [sp, #32]
   b4b54:	4831      	ldr	r0, [pc, #196]	; (b4c1c <setup+0x120>)
   b4b56:	f240 725b 	movw	r2, #1883	; 0x75b
   b4b5a:	f000 fdde 	bl	b571a <_ZN4MQTT9setBrokerEPKct>
   b4b5e:	a808      	add	r0, sp, #32
   b4b60:	f002 fe56 	bl	b7810 <_ZN6StringD1Ev>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4b64:	4623      	mov	r3, r4
   b4b66:	4622      	mov	r2, r4
   b4b68:	492d      	ldr	r1, [pc, #180]	; (b4c20 <setup+0x124>)
   b4b6a:	482e      	ldr	r0, [pc, #184]	; (b4c24 <setup+0x128>)
   b4b6c:	e9cd 4400 	strd	r4, r4, [sp]
   b4b70:	f002 f970 	bl	b6e54 <spark_subscribe>
    Serial.printf("Return value: %d", client.connect("client_" + String(Time.now()), "mqtt", "mqtt"));
   b4b74:	f004 ff7c 	bl	b9a70 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4b78:	492b      	ldr	r1, [pc, #172]	; (b4c28 <setup+0x12c>)
   b4b7a:	4604      	mov	r4, r0
   b4b7c:	a808      	add	r0, sp, #32
   b4b7e:	f002 fe92 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b82:	f004 fac6 	bl	b9112 <_ZN9TimeClass3nowEv>
   b4b86:	220a      	movs	r2, #10
   b4b88:	4601      	mov	r1, r0
   b4b8a:	a804      	add	r0, sp, #16
   b4b8c:	f002 fee9 	bl	b7962 <_ZN6StringC1Elh>
   b4b90:	a904      	add	r1, sp, #16
   b4b92:	a808      	add	r0, sp, #32
   b4b94:	f002 ff40 	bl	b7a18 <_ZplRK15StringSumHelperRK6String>
   b4b98:	4b24      	ldr	r3, [pc, #144]	; (b4c2c <setup+0x130>)
   b4b9a:	6801      	ldr	r1, [r0, #0]
   b4b9c:	481f      	ldr	r0, [pc, #124]	; (b4c1c <setup+0x120>)
   b4b9e:	461a      	mov	r2, r3
   b4ba0:	f000 feb2 	bl	b5908 <_ZN4MQTT7connectEPKcS1_S1_>
   b4ba4:	4922      	ldr	r1, [pc, #136]	; (b4c30 <setup+0x134>)
   b4ba6:	4602      	mov	r2, r0
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f7ff fb73 	bl	b4294 <_ZN5Print6printfEPKcz>
   b4bae:	a804      	add	r0, sp, #16
   b4bb0:	f002 fe2e 	bl	b7810 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4bb4:	a808      	add	r0, sp, #32
   b4bb6:	f002 fe2b 	bl	b7810 <_ZN6StringD1Ev>
    if (client.isConnected())
   b4bba:	4818      	ldr	r0, [pc, #96]	; (b4c1c <setup+0x120>)
   b4bbc:	f000 fd9f 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b4bc0:	b168      	cbz	r0, b4bde <setup+0xe2>
        Serial.printf("Connected to MQTT broker\n");
   b4bc2:	f004 ff55 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4bc6:	491b      	ldr	r1, [pc, #108]	; (b4c34 <setup+0x138>)
   b4bc8:	f7ff fb64 	bl	b4294 <_ZN5Print6printfEPKcz>
        client.publish("power/get", "hello world");
   b4bcc:	491a      	ldr	r1, [pc, #104]	; (b4c38 <setup+0x13c>)
   b4bce:	4a1b      	ldr	r2, [pc, #108]	; (b4c3c <setup+0x140>)
   b4bd0:	4812      	ldr	r0, [pc, #72]	; (b4c1c <setup+0x120>)
   b4bd2:	f000 ff24 	bl	b5a1e <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b4bd6:	491a      	ldr	r1, [pc, #104]	; (b4c40 <setup+0x144>)
   b4bd8:	4810      	ldr	r0, [pc, #64]	; (b4c1c <setup+0x120>)
   b4bda:	f001 f8c4 	bl	b5d66 <_ZN4MQTT9subscribeEPKc>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4bde:	f004 ff47 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4be2:	4604      	mov	r4, r0
   b4be4:	f004 faa6 	bl	b9134 <_ZN9TimeClass4hourEv>
   b4be8:	9003      	str	r0, [sp, #12]
   b4bea:	f004 faaf 	bl	b914c <_ZN9TimeClass6minuteEv>
   b4bee:	9a03      	ldr	r2, [sp, #12]
   b4bf0:	4914      	ldr	r1, [pc, #80]	; (b4c44 <setup+0x148>)
   b4bf2:	4603      	mov	r3, r0
   b4bf4:	4620      	mov	r0, r4
   b4bf6:	f7ff fb4d 	bl	b4294 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4bfa:	4813      	ldr	r0, [pc, #76]	; (b4c48 <setup+0x14c>)
   b4bfc:	2200      	movs	r2, #0
   b4bfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4c02:	f7ff fad1 	bl	b41a8 <_ZN5Timer6_startEjb.isra.0>
}
   b4c06:	b012      	add	sp, #72	; 0x48
   b4c08:	bd10      	pop	{r4, pc}
   b4c0a:	bf00      	nop
   b4c0c:	2003db20 	.word	0x2003db20
   b4c10:	000b40e1 	.word	0x000b40e1
   b4c14:	000bd761 	.word	0x000bd761
   b4c18:	2003dcdc 	.word	0x2003dcdc
   b4c1c:	2003dc38 	.word	0x2003dc38
   b4c20:	000b42b1 	.word	0x000b42b1
   b4c24:	000bd7c1 	.word	0x000bd7c1
   b4c28:	000bd7fc 	.word	0x000bd7fc
   b4c2c:	000bd775 	.word	0x000bd775
   b4c30:	000bd77a 	.word	0x000bd77a
   b4c34:	000bd78b 	.word	0x000bd78b
   b4c38:	000bd7b1 	.word	0x000bd7b1
   b4c3c:	000bd7a5 	.word	0x000bd7a5
   b4c40:	000bd7bb 	.word	0x000bd7bb
   b4c44:	000bd7c8 	.word	0x000bd7c8
   b4c48:	2003e150 	.word	0x2003e150

000b4c4c <_Z13rotate_pricesv>:
{
   b4c4c:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b4c4e:	4a0c      	ldr	r2, [pc, #48]	; (b4c80 <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b4c50:	4b0c      	ldr	r3, [pc, #48]	; (b4c84 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b4c52:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b4c54:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b4c56:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b4c58:	4b0b      	ldr	r3, [pc, #44]	; (b4c88 <_Z13rotate_pricesv+0x3c>)
   b4c5a:	6819      	ldr	r1, [r3, #0]
   b4c5c:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4c5e:	22c0      	movs	r2, #192	; 0xc0
   b4c60:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b4c62:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4c64:	f006 fb89 	bl	bb37a <memset>
    int *temp2 = wh_yesterday;
   b4c68:	4a08      	ldr	r2, [pc, #32]	; (b4c8c <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b4c6a:	4b09      	ldr	r3, [pc, #36]	; (b4c90 <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b4c6c:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b4c6e:	6819      	ldr	r1, [r3, #0]
   b4c70:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b4c72:	6018      	str	r0, [r3, #0]
}
   b4c74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4c78:	2260      	movs	r2, #96	; 0x60
   b4c7a:	2100      	movs	r1, #0
   b4c7c:	f006 bb7d 	b.w	bb37a <memset>
   b4c80:	2003dc98 	.word	0x2003dc98
   b4c84:	2003dca0 	.word	0x2003dca0
   b4c88:	2003dc9c 	.word	0x2003dc9c
   b4c8c:	2003e1cc 	.word	0x2003e1cc
   b4c90:	2003e1b8 	.word	0x2003e1b8

000b4c94 <_Z10check_mqttv>:
{
   b4c94:	b500      	push	{lr}
    if (client.isConnected())
   b4c96:	481b      	ldr	r0, [pc, #108]	; (b4d04 <_Z10check_mqttv+0x70>)
{
   b4c98:	b089      	sub	sp, #36	; 0x24
    if (client.isConnected())
   b4c9a:	f000 fd30 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b4c9e:	b128      	cbz	r0, b4cac <_Z10check_mqttv+0x18>
        client.loop();
   b4ca0:	4818      	ldr	r0, [pc, #96]	; (b4d04 <_Z10check_mqttv+0x70>)
}
   b4ca2:	b009      	add	sp, #36	; 0x24
   b4ca4:	f85d eb04 	ldr.w	lr, [sp], #4
        client.loop();
   b4ca8:	f000 bf15 	b.w	b5ad6 <_ZN4MQTT4loopEv>
        Serial.printf("Client disconnected\n");
   b4cac:	f004 fee0 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4cb0:	4915      	ldr	r1, [pc, #84]	; (b4d08 <_Z10check_mqttv+0x74>)
   b4cb2:	f7ff faef 	bl	b4294 <_ZN5Print6printfEPKcz>
	StringSumHelper(const char *p) : String(p) {}
   b4cb6:	4915      	ldr	r1, [pc, #84]	; (b4d0c <_Z10check_mqttv+0x78>)
   b4cb8:	4668      	mov	r0, sp
   b4cba:	f002 fdf4 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
        client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b4cbe:	f004 fa28 	bl	b9112 <_ZN9TimeClass3nowEv>
   b4cc2:	220a      	movs	r2, #10
   b4cc4:	4601      	mov	r1, r0
   b4cc6:	a804      	add	r0, sp, #16
   b4cc8:	f002 fe4b 	bl	b7962 <_ZN6StringC1Elh>
   b4ccc:	a904      	add	r1, sp, #16
   b4cce:	4668      	mov	r0, sp
   b4cd0:	f002 fea2 	bl	b7a18 <_ZplRK15StringSumHelperRK6String>
   b4cd4:	4b0e      	ldr	r3, [pc, #56]	; (b4d10 <_Z10check_mqttv+0x7c>)
   b4cd6:	6801      	ldr	r1, [r0, #0]
   b4cd8:	480a      	ldr	r0, [pc, #40]	; (b4d04 <_Z10check_mqttv+0x70>)
   b4cda:	461a      	mov	r2, r3
   b4cdc:	f000 fe14 	bl	b5908 <_ZN4MQTT7connectEPKcS1_S1_>
   b4ce0:	a804      	add	r0, sp, #16
   b4ce2:	f002 fd95 	bl	b7810 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4ce6:	4668      	mov	r0, sp
   b4ce8:	f002 fd92 	bl	b7810 <_ZN6StringD1Ev>
        if (client.isConnected())
   b4cec:	4805      	ldr	r0, [pc, #20]	; (b4d04 <_Z10check_mqttv+0x70>)
   b4cee:	f000 fd06 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b4cf2:	b120      	cbz	r0, b4cfe <_Z10check_mqttv+0x6a>
            Serial.printf("Client reconnected\n");
   b4cf4:	f004 febc 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4cf8:	4906      	ldr	r1, [pc, #24]	; (b4d14 <_Z10check_mqttv+0x80>)
   b4cfa:	f7ff facb 	bl	b4294 <_ZN5Print6printfEPKcz>
}
   b4cfe:	b009      	add	sp, #36	; 0x24
   b4d00:	f85d fb04 	ldr.w	pc, [sp], #4
   b4d04:	2003dc38 	.word	0x2003dc38
   b4d08:	000bd7e2 	.word	0x000bd7e2
   b4d0c:	000bd7f7 	.word	0x000bd7f7
   b4d10:	000bd775 	.word	0x000bd775
   b4d14:	000bd804 	.word	0x000bd804

000b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
=======
   b4bba:	b910      	cbnz	r0, b4bc2 <setup+0x16>
            spark_process();
   b4bbc:	f000 ff4c 	bl	b5a58 <spark_process>
        while (_while() && !_condition()) {
   b4bc0:	e7f9      	b.n	b4bb6 <setup+0xa>
   b4bc2:	f000 ff51 	bl	b5a68 <spark_cloud_flag_connected>
    ble_setup();
   b4bc6:	f7ff fc3d 	bl	b4444 <_Z9ble_setupv>
    init_memory();
   b4bca:	f7ff ff53 	bl	b4a74 <_Z11init_memoryv>
    Time.zone(1);
   b4bce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b4bd2:	f002 ff67 	bl	b7aa4 <_ZN9TimeClass4zoneEf>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4bd6:	2400      	movs	r4, #0
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);           // Setup pinmode for LDR pin
   b4bd8:	2103      	movs	r1, #3
   b4bda:	2008      	movs	r0, #8
   b4bdc:	f003 ff1c 	bl	b8a18 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4be0:	4914      	ldr	r1, [pc, #80]	; (b4c34 <setup+0x88>)
   b4be2:	9400      	str	r4, [sp, #0]
   b4be4:	f04f 33ff 	mov.w	r3, #4294967295
   b4be8:	2201      	movs	r2, #1
   b4bea:	2008      	movs	r0, #8
   b4bec:	f003 fc4c 	bl	b8488 <_Z15attachInterrupttPFvvE13InterruptModeah>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4bf0:	4623      	mov	r3, r4
   b4bf2:	4622      	mov	r2, r4
   b4bf4:	4910      	ldr	r1, [pc, #64]	; (b4c38 <setup+0x8c>)
   b4bf6:	4811      	ldr	r0, [pc, #68]	; (b4c3c <setup+0x90>)
   b4bf8:	e9cd 4400 	strd	r4, r4, [sp]
   b4bfc:	f000 ff44 	bl	b5a88 <spark_subscribe>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4c00:	f003 fc1a 	bl	b8438 <_Z16_fetch_usbserialv>
   b4c04:	4605      	mov	r5, r0
   b4c06:	f002 ff9b 	bl	b7b40 <_ZN9TimeClass4hourEv>
   b4c0a:	9003      	str	r0, [sp, #12]
   b4c0c:	f002 ffa4 	bl	b7b58 <_ZN9TimeClass6minuteEv>
   b4c10:	9a03      	ldr	r2, [sp, #12]
   b4c12:	490b      	ldr	r1, [pc, #44]	; (b4c40 <setup+0x94>)
   b4c14:	4603      	mov	r3, r0
   b4c16:	4628      	mov	r0, r5
   b4c18:	f7ff fb34 	bl	b4284 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4c1c:	4809      	ldr	r0, [pc, #36]	; (b4c44 <setup+0x98>)
   b4c1e:	4622      	mov	r2, r4
   b4c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
}
   b4c24:	b005      	add	sp, #20
   b4c26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4c2a:	f7ff bab5 	b.w	b4198 <_ZN5Timer6_startEjb.isra.0>
   b4c2e:	bf00      	nop
   b4c30:	2003db80 	.word	0x2003db80
   b4c34:	000b40d1 	.word	0x000b40d1
   b4c38:	000b42a1 	.word	0x000b42a1
   b4c3c:	000bbb4d 	.word	0x000bbb4d
   b4c40:	000bbb54 	.word	0x000bbb54
   b4c44:	2003e150 	.word	0x2003e150

000b4c48 <_Z13rotate_pricesv>:
{
   b4c48:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b4c4a:	4a0c      	ldr	r2, [pc, #48]	; (b4c7c <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b4c4c:	4b0c      	ldr	r3, [pc, #48]	; (b4c80 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b4c4e:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b4c50:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b4c52:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b4c54:	4b0b      	ldr	r3, [pc, #44]	; (b4c84 <_Z13rotate_pricesv+0x3c>)
   b4c56:	6819      	ldr	r1, [r3, #0]
   b4c58:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4c5a:	22c0      	movs	r2, #192	; 0xc0
   b4c5c:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b4c5e:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4c60:	f004 fd8f 	bl	b9782 <memset>
    int *temp2 = wh_yesterday;
   b4c64:	4a08      	ldr	r2, [pc, #32]	; (b4c88 <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b4c66:	4b09      	ldr	r3, [pc, #36]	; (b4c8c <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b4c68:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b4c6a:	6819      	ldr	r1, [r3, #0]
   b4c6c:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b4c6e:	6018      	str	r0, [r3, #0]
}
   b4c70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4c74:	2260      	movs	r2, #96	; 0x60
   b4c76:	2100      	movs	r1, #0
   b4c78:	f004 bd83 	b.w	b9782 <memset>
   b4c7c:	2003dc98 	.word	0x2003dc98
   b4c80:	2003dca0 	.word	0x2003dca0
   b4c84:	2003dc9c 	.word	0x2003dc9c
   b4c88:	2003e1cc 	.word	0x2003e1cc
   b4c8c:	2003e1b8 	.word	0x2003e1b8

000b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
<<<<<<< HEAD
   b4d18:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4d1a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4d1c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4d1e:	b17c      	cbz	r4, b4d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4d20:	6863      	ldr	r3, [r4, #4]
   b4d22:	3b01      	subs	r3, #1
   b4d24:	6063      	str	r3, [r4, #4]
   b4d26:	b95b      	cbnz	r3, b4d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4d28:	6823      	ldr	r3, [r4, #0]
   b4d2a:	4620      	mov	r0, r4
   b4d2c:	689b      	ldr	r3, [r3, #8]
   b4d2e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d30:	68a3      	ldr	r3, [r4, #8]
   b4d32:	3b01      	subs	r3, #1
   b4d34:	60a3      	str	r3, [r4, #8]
   b4d36:	b91b      	cbnz	r3, b4d40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4d38:	6823      	ldr	r3, [r4, #0]
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	68db      	ldr	r3, [r3, #12]
   b4d3e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4d40:	4628      	mov	r0, r5
   b4d42:	bd38      	pop	{r3, r4, r5, pc}

000b4d44 <_Z8get_datai>:
{
   b4d44:	b510      	push	{r4, lr}
    temp[0] = 0;
   b4d46:	4b11      	ldr	r3, [pc, #68]	; (b4d8c <_Z8get_datai+0x48>)
   b4d48:	2200      	movs	r2, #0
{
   b4d4a:	b08a      	sub	sp, #40	; 0x28
    temp[0] = 0;
   b4d4c:	701a      	strb	r2, [r3, #0]
{
   b4d4e:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\"}", Time.year(), Time.month(), day);
   b4d50:	f004 fa28 	bl	b91a4 <_ZN9TimeClass4yearEv>
   b4d54:	9003      	str	r0, [sp, #12]
   b4d56:	f004 fa1d 	bl	b9194 <_ZN9TimeClass5monthEv>
   b4d5a:	9a03      	ldr	r2, [sp, #12]
   b4d5c:	490c      	ldr	r1, [pc, #48]	; (b4d90 <_Z8get_datai+0x4c>)
   b4d5e:	9400      	str	r4, [sp, #0]
   b4d60:	4603      	mov	r3, r0
   b4d62:	a806      	add	r0, sp, #24
   b4d64:	f002 fe7e 	bl	b7a64 <_ZN6String6formatEPKcz>
=======
   b4c90:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4c92:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4c94:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4c96:	b17c      	cbz	r4, b4cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4c98:	6863      	ldr	r3, [r4, #4]
   b4c9a:	3b01      	subs	r3, #1
   b4c9c:	6063      	str	r3, [r4, #4]
   b4c9e:	b95b      	cbnz	r3, b4cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4ca0:	6823      	ldr	r3, [r4, #0]
   b4ca2:	4620      	mov	r0, r4
   b4ca4:	689b      	ldr	r3, [r3, #8]
   b4ca6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ca8:	68a3      	ldr	r3, [r4, #8]
   b4caa:	3b01      	subs	r3, #1
   b4cac:	60a3      	str	r3, [r4, #8]
   b4cae:	b91b      	cbnz	r3, b4cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4cb0:	6823      	ldr	r3, [r4, #0]
   b4cb2:	4620      	mov	r0, r4
   b4cb4:	68db      	ldr	r3, [r3, #12]
   b4cb6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4cb8:	4628      	mov	r0, r5
   b4cba:	bd38      	pop	{r3, r4, r5, pc}

000b4cbc <_Z8get_datai>:
{
   b4cbc:	b510      	push	{r4, lr}
    temp[0] = 0;
   b4cbe:	4b11      	ldr	r3, [pc, #68]	; (b4d04 <_Z8get_datai+0x48>)
   b4cc0:	2200      	movs	r2, #0
{
   b4cc2:	b08a      	sub	sp, #40	; 0x28
    temp[0] = 0;
   b4cc4:	701a      	strb	r2, [r3, #0]
{
   b4cc6:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\"}", Time.year(), Time.month(), day);
   b4cc8:	f002 ff72 	bl	b7bb0 <_ZN9TimeClass4yearEv>
   b4ccc:	9003      	str	r0, [sp, #12]
   b4cce:	f002 ff67 	bl	b7ba0 <_ZN9TimeClass5monthEv>
   b4cd2:	9a03      	ldr	r2, [sp, #12]
   b4cd4:	490c      	ldr	r1, [pc, #48]	; (b4d08 <_Z8get_datai+0x4c>)
   b4cd6:	9400      	str	r4, [sp, #0]
   b4cd8:	4603      	mov	r3, r0
   b4cda:	a806      	add	r0, sp, #24
   b4cdc:	f001 fbd8 	bl	b6490 <_ZN6String6formatEPKcz>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
<<<<<<< HEAD
   b4d68:	4b0a      	ldr	r3, [pc, #40]	; (b4d94 <_Z8get_datai+0x50>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4d6a:	9a06      	ldr	r2, [sp, #24]
   b4d6c:	781b      	ldrb	r3, [r3, #0]
   b4d6e:	490a      	ldr	r1, [pc, #40]	; (b4d98 <_Z8get_datai+0x54>)
   b4d70:	f88d 3000 	strb.w	r3, [sp]
   b4d74:	a804      	add	r0, sp, #16
   b4d76:	233c      	movs	r3, #60	; 0x3c
   b4d78:	f004 fc12 	bl	b95a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
=======
   b4ce0:	4b0a      	ldr	r3, [pc, #40]	; (b4d0c <_Z8get_datai+0x50>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4ce2:	9a06      	ldr	r2, [sp, #24]
   b4ce4:	781b      	ldrb	r3, [r3, #0]
   b4ce6:	490a      	ldr	r1, [pc, #40]	; (b4d10 <_Z8get_datai+0x54>)
   b4ce8:	f88d 3000 	strb.w	r3, [sp]
   b4cec:	a804      	add	r0, sp, #16
   b4cee:	233c      	movs	r3, #60	; 0x3c
   b4cf0:	f003 f946 	bl	b7f80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
<<<<<<< HEAD
   b4d7c:	a805      	add	r0, sp, #20
   b4d7e:	f7ff ffcb 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4d82:	a806      	add	r0, sp, #24
   b4d84:	f002 fd44 	bl	b7810 <_ZN6StringD1Ev>
}
   b4d88:	b00a      	add	sp, #40	; 0x28
   b4d8a:	bd10      	pop	{r4, pc}
   b4d8c:	2003dd4c 	.word	0x2003dd4c
   b4d90:	000bd818 	.word	0x000bd818
   b4d94:	2003dbc8 	.word	0x2003dbc8
   b4d98:	000bd847 	.word	0x000bd847

000b4d9c <_Z15transmit_pricesPA2_ii>:
{
   b4d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4da0:	b08a      	sub	sp, #40	; 0x28
   b4da2:	4605      	mov	r5, r0
   b4da4:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b4da6:	f004 fe63 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4daa:	491c      	ldr	r1, [pc, #112]	; (b4e1c <_Z15transmit_pricesPA2_ii+0x80>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4dac:	4f1c      	ldr	r7, [pc, #112]	; (b4e20 <_Z15transmit_pricesPA2_ii+0x84>)
    Serial.printf("In work\n");
   b4dae:	f7ff fa71 	bl	b4294 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b4db2:	491c      	ldr	r1, [pc, #112]	; (b4e24 <_Z15transmit_pricesPA2_ii+0x88>)
   b4db4:	a802      	add	r0, sp, #8
   b4db6:	f002 fd76 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4dba:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4dbc:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b4dc0:	42b4      	cmp	r4, r6
   b4dc2:	da10      	bge.n	b4de6 <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4dc4:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4dc8:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4dcc:	4639      	mov	r1, r7
   b4dce:	a806      	add	r0, sp, #24
   b4dd0:	f002 fe48 	bl	b7a64 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4dd4:	a906      	add	r1, sp, #24
   b4dd6:	a802      	add	r0, sp, #8
   b4dd8:	f002 fded 	bl	b79b6 <_ZN6String6concatERKS_>
   b4ddc:	a806      	add	r0, sp, #24
   b4dde:	f002 fd17 	bl	b7810 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b4de2:	3401      	adds	r4, #1
   b4de4:	e7ec      	b.n	b4dc0 <_Z15transmit_pricesPA2_ii+0x24>
   b4de6:	4b10      	ldr	r3, [pc, #64]	; (b4e28 <_Z15transmit_pricesPA2_ii+0x8c>)
   b4de8:	9a02      	ldr	r2, [sp, #8]
   b4dea:	781b      	ldrb	r3, [r3, #0]
   b4dec:	490f      	ldr	r1, [pc, #60]	; (b4e2c <_Z15transmit_pricesPA2_ii+0x90>)
   b4dee:	f88d 3000 	strb.w	r3, [sp]
   b4df2:	a806      	add	r0, sp, #24
   b4df4:	233c      	movs	r3, #60	; 0x3c
   b4df6:	f004 fbd3 	bl	b95a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4dfa:	a807      	add	r0, sp, #28
   b4dfc:	f7ff ff8c 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    client.publish("prices", data);
   b4e00:	9a02      	ldr	r2, [sp, #8]
   b4e02:	490b      	ldr	r1, [pc, #44]	; (b4e30 <_Z15transmit_pricesPA2_ii+0x94>)
   b4e04:	480b      	ldr	r0, [pc, #44]	; (b4e34 <_Z15transmit_pricesPA2_ii+0x98>)
   b4e06:	f000 fe0a 	bl	b5a1e <_ZN4MQTT7publishEPKcS1_>
    client.loop();
   b4e0a:	480a      	ldr	r0, [pc, #40]	; (b4e34 <_Z15transmit_pricesPA2_ii+0x98>)
   b4e0c:	f000 fe63 	bl	b5ad6 <_ZN4MQTT4loopEv>
    String data = "Cheap(ish) hours of the day: ";
   b4e10:	a802      	add	r0, sp, #8
   b4e12:	f002 fcfd 	bl	b7810 <_ZN6StringD1Ev>
}
   b4e16:	b00a      	add	sp, #40	; 0x28
   b4e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4e1c:	000bd850 	.word	0x000bd850
   b4e20:	000bd877 	.word	0x000bd877
   b4e24:	000bd859 	.word	0x000bd859
   b4e28:	2003dbc8 	.word	0x2003dbc8
   b4e2c:	000bd886 	.word	0x000bd886
   b4e30:	000bd7c1 	.word	0x000bd7c1
   b4e34:	2003dc38 	.word	0x2003dc38

000b4e38 <loop>:
{
   b4e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (STARTUP)
   b4e3a:	4e98      	ldr	r6, [pc, #608]	; (b509c <loop+0x264>)
   b4e3c:	4c98      	ldr	r4, [pc, #608]	; (b50a0 <loop+0x268>)
   b4e3e:	7833      	ldrb	r3, [r6, #0]
{
   b4e40:	b0c7      	sub	sp, #284	; 0x11c
    if (STARTUP)
   b4e42:	2b00      	cmp	r3, #0
   b4e44:	d059      	beq.n	b4efa <loop+0xc2>
        Serial.printlnf("RSSI=%d", (int8_t) WiFi.RSSI());
   b4e46:	f004 fe13 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4e4a:	4996      	ldr	r1, [pc, #600]	; (b50a4 <loop+0x26c>)
            Serial.printf("Count1=: %d\n", count);
   b4e4c:	4f96      	ldr	r7, [pc, #600]	; (b50a8 <loop+0x270>)
        Serial.printlnf("RSSI=%d", (int8_t) WiFi.RSSI());
   b4e4e:	4605      	mov	r5, r0
   b4e50:	a806      	add	r0, sp, #24
   b4e52:	f005 fa9d 	bl	ba390 <_ZN5spark9WiFiClass4RSSIEv>
   b4e56:	a806      	add	r0, sp, #24
   b4e58:	f005 fa76 	bl	ba348 <_ZNK10WiFiSignalcvaEv>
   b4e5c:	4993      	ldr	r1, [pc, #588]	; (b50ac <loop+0x274>)
   b4e5e:	4602      	mov	r2, r0
   b4e60:	4628      	mov	r0, r5
   b4e62:	f7ff fab3 	bl	b43cc <_ZN5Print8printlnfEPKcz>
        Serial.printf("Getting price data for yesterday\n");
   b4e66:	f004 fe03 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4e6a:	4991      	ldr	r1, [pc, #580]	; (b50b0 <loop+0x278>)
   b4e6c:	f7ff fa12 	bl	b4294 <_ZN5Print6printfEPKcz>
        get_data(Time.day() - 1);
   b4e70:	f004 f984 	bl	b917c <_ZN9TimeClass3dayEv>
   b4e74:	3801      	subs	r0, #1
   b4e76:	f7ff ff65 	bl	b4d44 <_Z8get_datai>
         int count=0;
   b4e7a:	2500      	movs	r5, #0
        while (!CALCULATE)
   b4e7c:	7823      	ldrb	r3, [r4, #0]
   b4e7e:	b95b      	cbnz	r3, b4e98 <loop+0x60>
            delay(1000);
   b4e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4e84:	f004 f9a4 	bl	b91d0 <delay>
            Serial.printf("Count1=: %d\n", count);
   b4e88:	f004 fdf2 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4e8c:	462a      	mov	r2, r5
   b4e8e:	4639      	mov	r1, r7
   b4e90:	f7ff fa00 	bl	b4294 <_ZN5Print6printfEPKcz>
            count++;
   b4e94:	3501      	adds	r5, #1
        while (!CALCULATE)
   b4e96:	e7f1      	b.n	b4e7c <loop+0x44>
       delay(5000);
   b4e98:	f241 3088 	movw	r0, #5000	; 0x1388
        CALCULATE = false;
   b4e9c:	2500      	movs	r5, #0
   b4e9e:	7025      	strb	r5, [r4, #0]
       delay(5000);
   b4ea0:	f004 f996 	bl	b91d0 <delay>
        rotate_prices();
   b4ea4:	f7ff fed2 	bl	b4c4c <_Z13rotate_pricesv>
        Serial.printf("Getting price data for today\n");
   b4ea8:	f004 fde2 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4eac:	4981      	ldr	r1, [pc, #516]	; (b50b4 <loop+0x27c>)
            Serial.printf("Count2=: %d\n", count);
   b4eae:	4f82      	ldr	r7, [pc, #520]	; (b50b8 <loop+0x280>)
        Serial.printf("Getting price data for today\n");
   b4eb0:	f7ff f9f0 	bl	b4294 <_ZN5Print6printfEPKcz>
        get_data(Time.day());
   b4eb4:	f004 f962 	bl	b917c <_ZN9TimeClass3dayEv>
   b4eb8:	f7ff ff44 	bl	b4d44 <_Z8get_datai>
        while (!CALCULATE)
   b4ebc:	7823      	ldrb	r3, [r4, #0]
   b4ebe:	b95b      	cbnz	r3, b4ed8 <loop+0xa0>
            delay(1000);
   b4ec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4ec4:	f004 f984 	bl	b91d0 <delay>
            Serial.printf("Count2=: %d\n", count);
   b4ec8:	f004 fdd2 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4ecc:	462a      	mov	r2, r5
   b4ece:	4639      	mov	r1, r7
   b4ed0:	f7ff f9e0 	bl	b4294 <_ZN5Print6printfEPKcz>
            count++;
   b4ed4:	3501      	adds	r5, #1
        while (!CALCULATE)
   b4ed6:	e7f1      	b.n	b4ebc <loop+0x84>
        rotate_prices();
   b4ed8:	f7ff feb8 	bl	b4c4c <_Z13rotate_pricesv>
        delay(5000);
   b4edc:	f241 3088 	movw	r0, #5000	; 0x1388
   b4ee0:	f004 f976 	bl	b91d0 <delay>
        if (Time.hour() >= PULL_TIME_1)
   b4ee4:	f004 f926 	bl	b9134 <_ZN9TimeClass4hourEv>
   b4ee8:	280c      	cmp	r0, #12
   b4eea:	dd3f      	ble.n	b4f6c <loop+0x134>
            CALCULATE = false;
   b4eec:	2300      	movs	r3, #0
   b4eee:	7023      	strb	r3, [r4, #0]
            GET_DATA = true;
   b4ef0:	4b72      	ldr	r3, [pc, #456]	; (b50bc <loop+0x284>)
   b4ef2:	2201      	movs	r2, #1
   b4ef4:	701a      	strb	r2, [r3, #0]
        STARTUP = false;
   b4ef6:	2300      	movs	r3, #0
   b4ef8:	7033      	strb	r3, [r6, #0]
    if (GET_DATA)
   b4efa:	4d70      	ldr	r5, [pc, #448]	; (b50bc <loop+0x284>)
    check_mqtt();
   b4efc:	f7ff feca 	bl	b4c94 <_Z10check_mqttv>
    if (GET_DATA)
   b4f00:	782b      	ldrb	r3, [r5, #0]
   b4f02:	b14b      	cbz	r3, b4f18 <loop+0xe0>
        AWAITING_DATA = true;
   b4f04:	4b6e      	ldr	r3, [pc, #440]	; (b50c0 <loop+0x288>)
   b4f06:	2201      	movs	r2, #1
   b4f08:	701a      	strb	r2, [r3, #0]
        get_data(Time.day() + 1);
   b4f0a:	f004 f937 	bl	b917c <_ZN9TimeClass3dayEv>
   b4f0e:	3001      	adds	r0, #1
   b4f10:	f7ff ff18 	bl	b4d44 <_Z8get_datai>
        GET_DATA = false;
   b4f14:	2300      	movs	r3, #0
   b4f16:	702b      	strb	r3, [r5, #0]
    if (CALCULATE)
   b4f18:	7823      	ldrb	r3, [r4, #0]
   b4f1a:	4d6a      	ldr	r5, [pc, #424]	; (b50c4 <loop+0x28c>)
   b4f1c:	b37b      	cbz	r3, b4f7e <loop+0x146>
        update_JSON();
   b4f1e:	f7ff fc15 	bl	b474c <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b4f22:	4b69      	ldr	r3, [pc, #420]	; (b50c8 <loop+0x290>)
   b4f24:	4869      	ldr	r0, [pc, #420]	; (b50cc <loop+0x294>)
   b4f26:	6819      	ldr	r1, [r3, #0]
   b4f28:	2218      	movs	r2, #24
   b4f2a:	f7ff fb2d 	bl	b4588 <_Z8calc_lowPA2_iPdi>
   b4f2e:	4b68      	ldr	r3, [pc, #416]	; (b50d0 <loop+0x298>)
   b4f30:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4f32:	f004 fd9d 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4f36:	4606      	mov	r6, r0
   b4f38:	f004 f8fc 	bl	b9134 <_ZN9TimeClass4hourEv>
   b4f3c:	9001      	str	r0, [sp, #4]
   b4f3e:	f004 f905 	bl	b914c <_ZN9TimeClass6minuteEv>
   b4f42:	9a01      	ldr	r2, [sp, #4]
   b4f44:	4963      	ldr	r1, [pc, #396]	; (b50d4 <loop+0x29c>)
   b4f46:	4603      	mov	r3, r0
   b4f48:	4630      	mov	r0, r6
   b4f4a:	f7ff f9a3 	bl	b4294 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b4f4e:	2301      	movs	r3, #1
   b4f50:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b4f52:	2300      	movs	r3, #0
   b4f54:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b4f56:	4b5e      	ldr	r3, [pc, #376]	; (b50d0 <loop+0x298>)
   b4f58:	485c      	ldr	r0, [pc, #368]	; (b50cc <loop+0x294>)
   b4f5a:	6819      	ldr	r1, [r3, #0]
   b4f5c:	f7ff ff1e 	bl	b4d9c <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b4f60:	4b5d      	ldr	r3, [pc, #372]	; (b50d8 <loop+0x2a0>)
   b4f62:	2201      	movs	r2, #1
   b4f64:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b4f66:	2300      	movs	r3, #0
   b4f68:	702b      	strb	r3, [r5, #0]
   b4f6a:	e00b      	b.n	b4f84 <loop+0x14c>
            Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b4f6c:	f004 fd80 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4f70:	495a      	ldr	r1, [pc, #360]	; (b50dc <loop+0x2a4>)
   b4f72:	220d      	movs	r2, #13
   b4f74:	f7ff f98e 	bl	b4294 <_ZN5Print6printfEPKcz>
            CALCULATE = true;
   b4f78:	2301      	movs	r3, #1
   b4f7a:	7023      	strb	r3, [r4, #0]
   b4f7c:	e7bb      	b.n	b4ef6 <loop+0xbe>
    if (TRANSMIT_PRICE)
   b4f7e:	782b      	ldrb	r3, [r5, #0]
   b4f80:	2b00      	cmp	r3, #0
   b4f82:	d1e8      	bne.n	b4f56 <loop+0x11e>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b4f84:	4d56      	ldr	r5, [pc, #344]	; (b50e0 <loop+0x2a8>)
   b4f86:	782b      	ldrb	r3, [r5, #0]
   b4f88:	b32b      	cbz	r3, b4fd6 <loop+0x19e>
        Serial.printf("Received power/get\n");
   b4f8a:	f004 fd71 	bl	b9a70 <_Z16_fetch_usbserialv>
   b4f8e:	4955      	ldr	r1, [pc, #340]	; (b50e4 <loop+0x2ac>)
   b4f90:	f7ff f980 	bl	b4294 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b4f94:	4b54      	ldr	r3, [pc, #336]	; (b50e8 <loop+0x2b0>)
   b4f96:	681e      	ldr	r6, [r3, #0]
   b4f98:	f004 f8cc 	bl	b9134 <_ZN9TimeClass4hourEv>
   b4f9c:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(values, "%d", calc_power);
   b4fa0:	4952      	ldr	r1, [pc, #328]	; (b50ec <loop+0x2b4>)
        wh_today[Time.hour()] += 1;
   b4fa2:	3301      	adds	r3, #1
   b4fa4:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(values, "%d", calc_power);
   b4fa8:	4e51      	ldr	r6, [pc, #324]	; (b50f0 <loop+0x2b8>)
   b4faa:	a802      	add	r0, sp, #8
   b4fac:	6832      	ldr	r2, [r6, #0]
   b4fae:	f001 ff81 	bl	b6eb4 <sprintf>
        client.publish("power", values);
   b4fb2:	4950      	ldr	r1, [pc, #320]	; (b50f4 <loop+0x2bc>)
   b4fb4:	4850      	ldr	r0, [pc, #320]	; (b50f8 <loop+0x2c0>)
   b4fb6:	aa02      	add	r2, sp, #8
   b4fb8:	f000 fd31 	bl	b5a1e <_ZN4MQTT7publishEPKcS1_>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4fbc:	6832      	ldr	r2, [r6, #0]
   b4fbe:	494f      	ldr	r1, [pc, #316]	; (b50fc <loop+0x2c4>)
   b4fc0:	a806      	add	r0, sp, #24
   b4fc2:	f001 ff77 	bl	b6eb4 <sprintf>
=======
   b4cf4:	a805      	add	r0, sp, #20
   b4cf6:	f7ff ffcb 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4cfa:	a806      	add	r0, sp, #24
   b4cfc:	f001 fad8 	bl	b62b0 <_ZN6StringD1Ev>
}
   b4d00:	b00a      	add	sp, #40	; 0x28
   b4d02:	bd10      	pop	{r4, pc}
   b4d04:	2003dd4c 	.word	0x2003dd4c
   b4d08:	000bbb6e 	.word	0x000bbb6e
   b4d0c:	2003dc28 	.word	0x2003dc28
   b4d10:	000bbb9d 	.word	0x000bbb9d

000b4d14 <_Z15transmit_pricesPA2_ii>:
{
   b4d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4d18:	b08a      	sub	sp, #40	; 0x28
   b4d1a:	4605      	mov	r5, r0
   b4d1c:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b4d1e:	f003 fb8b 	bl	b8438 <_Z16_fetch_usbserialv>
   b4d22:	4918      	ldr	r1, [pc, #96]	; (b4d84 <_Z15transmit_pricesPA2_ii+0x70>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4d24:	4f18      	ldr	r7, [pc, #96]	; (b4d88 <_Z15transmit_pricesPA2_ii+0x74>)
    Serial.printf("In work\n");
   b4d26:	f7ff faad 	bl	b4284 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b4d2a:	4918      	ldr	r1, [pc, #96]	; (b4d8c <_Z15transmit_pricesPA2_ii+0x78>)
   b4d2c:	a802      	add	r0, sp, #8
   b4d2e:	f001 fb0a 	bl	b6346 <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4d32:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4d34:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b4d38:	42b4      	cmp	r4, r6
   b4d3a:	da10      	bge.n	b4d5e <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4d3c:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4d40:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4d44:	4639      	mov	r1, r7
   b4d46:	a806      	add	r0, sp, #24
   b4d48:	f001 fba2 	bl	b6490 <_ZN6String6formatEPKcz>
   b4d4c:	a906      	add	r1, sp, #24
   b4d4e:	a802      	add	r0, sp, #8
   b4d50:	f001 fb88 	bl	b6464 <_ZN6String6concatERKS_>
   b4d54:	a806      	add	r0, sp, #24
   b4d56:	f001 faab 	bl	b62b0 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b4d5a:	3401      	adds	r4, #1
   b4d5c:	e7ec      	b.n	b4d38 <_Z15transmit_pricesPA2_ii+0x24>
   b4d5e:	4b0c      	ldr	r3, [pc, #48]	; (b4d90 <_Z15transmit_pricesPA2_ii+0x7c>)
   b4d60:	9a02      	ldr	r2, [sp, #8]
   b4d62:	781b      	ldrb	r3, [r3, #0]
   b4d64:	490b      	ldr	r1, [pc, #44]	; (b4d94 <_Z15transmit_pricesPA2_ii+0x80>)
   b4d66:	f88d 3000 	strb.w	r3, [sp]
   b4d6a:	a806      	add	r0, sp, #24
   b4d6c:	233c      	movs	r3, #60	; 0x3c
   b4d6e:	f003 f907 	bl	b7f80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4d72:	a807      	add	r0, sp, #28
   b4d74:	f7ff ff8c 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String data = "Cheap(ish) hours of the day: ";
   b4d78:	a802      	add	r0, sp, #8
   b4d7a:	f001 fa99 	bl	b62b0 <_ZN6StringD1Ev>
}
   b4d7e:	b00a      	add	sp, #40	; 0x28
   b4d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4d84:	000bbba6 	.word	0x000bbba6
   b4d88:	000bbbcd 	.word	0x000bbbcd
   b4d8c:	000bbbaf 	.word	0x000bbbaf
   b4d90:	2003dc28 	.word	0x2003dc28
   b4d94:	000bbbdc 	.word	0x000bbbdc

000b4d98 <loop>:
{
   b4d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (STARTUP)
   b4d9a:	4e8e      	ldr	r6, [pc, #568]	; (b4fd4 <loop+0x23c>)
   b4d9c:	4c8e      	ldr	r4, [pc, #568]	; (b4fd8 <loop+0x240>)
   b4d9e:	7833      	ldrb	r3, [r6, #0]
{
   b4da0:	b0c7      	sub	sp, #284	; 0x11c
    if (STARTUP)
   b4da2:	2b00      	cmp	r3, #0
   b4da4:	d059      	beq.n	b4e5a <loop+0xc2>
        Serial.printlnf("RSSI=%d", (int8_t) WiFi.RSSI());
   b4da6:	f003 fb47 	bl	b8438 <_Z16_fetch_usbserialv>
   b4daa:	498c      	ldr	r1, [pc, #560]	; (b4fdc <loop+0x244>)
            Serial.printf("Count1=: %d\n", count);
   b4dac:	4f8c      	ldr	r7, [pc, #560]	; (b4fe0 <loop+0x248>)
        Serial.printlnf("RSSI=%d", (int8_t) WiFi.RSSI());
   b4dae:	4605      	mov	r5, r0
   b4db0:	a806      	add	r0, sp, #24
   b4db2:	f003 fd05 	bl	b87c0 <_ZN5spark9WiFiClass4RSSIEv>
   b4db6:	a806      	add	r0, sp, #24
   b4db8:	f003 fcde 	bl	b8778 <_ZNK10WiFiSignalcvaEv>
   b4dbc:	4989      	ldr	r1, [pc, #548]	; (b4fe4 <loop+0x24c>)
   b4dbe:	4602      	mov	r2, r0
   b4dc0:	4628      	mov	r0, r5
   b4dc2:	f7ff fafb 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        Serial.printf("Getting price data for yesterday\n");
   b4dc6:	f003 fb37 	bl	b8438 <_Z16_fetch_usbserialv>
   b4dca:	4987      	ldr	r1, [pc, #540]	; (b4fe8 <loop+0x250>)
   b4dcc:	f7ff fa5a 	bl	b4284 <_ZN5Print6printfEPKcz>
        get_data(Time.day() - 1);
   b4dd0:	f002 feda 	bl	b7b88 <_ZN9TimeClass3dayEv>
   b4dd4:	3801      	subs	r0, #1
   b4dd6:	f7ff ff71 	bl	b4cbc <_Z8get_datai>
         int count=0;
   b4dda:	2500      	movs	r5, #0
        while (!CALCULATE)
   b4ddc:	7823      	ldrb	r3, [r4, #0]
   b4dde:	b95b      	cbnz	r3, b4df8 <loop+0x60>
            delay(1000);
   b4de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4de4:	f002 fefa 	bl	b7bdc <delay>
            Serial.printf("Count1=: %d\n", count);
   b4de8:	f003 fb26 	bl	b8438 <_Z16_fetch_usbserialv>
   b4dec:	462a      	mov	r2, r5
   b4dee:	4639      	mov	r1, r7
   b4df0:	f7ff fa48 	bl	b4284 <_ZN5Print6printfEPKcz>
            count++;
   b4df4:	3501      	adds	r5, #1
        while (!CALCULATE)
   b4df6:	e7f1      	b.n	b4ddc <loop+0x44>
       delay(5000);
   b4df8:	f241 3088 	movw	r0, #5000	; 0x1388
        CALCULATE = false;
   b4dfc:	2500      	movs	r5, #0
   b4dfe:	7025      	strb	r5, [r4, #0]
       delay(5000);
   b4e00:	f002 feec 	bl	b7bdc <delay>
        rotate_prices();
   b4e04:	f7ff ff20 	bl	b4c48 <_Z13rotate_pricesv>
        Serial.printf("Getting price data for today\n");
   b4e08:	f003 fb16 	bl	b8438 <_Z16_fetch_usbserialv>
   b4e0c:	4977      	ldr	r1, [pc, #476]	; (b4fec <loop+0x254>)
            Serial.printf("Count2=: %d\n", count);
   b4e0e:	4f78      	ldr	r7, [pc, #480]	; (b4ff0 <loop+0x258>)
        Serial.printf("Getting price data for today\n");
   b4e10:	f7ff fa38 	bl	b4284 <_ZN5Print6printfEPKcz>
        get_data(Time.day());
   b4e14:	f002 feb8 	bl	b7b88 <_ZN9TimeClass3dayEv>
   b4e18:	f7ff ff50 	bl	b4cbc <_Z8get_datai>
        while (!CALCULATE)
   b4e1c:	7823      	ldrb	r3, [r4, #0]
   b4e1e:	b95b      	cbnz	r3, b4e38 <loop+0xa0>
            delay(1000);
   b4e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4e24:	f002 feda 	bl	b7bdc <delay>
            Serial.printf("Count2=: %d\n", count);
   b4e28:	f003 fb06 	bl	b8438 <_Z16_fetch_usbserialv>
   b4e2c:	462a      	mov	r2, r5
   b4e2e:	4639      	mov	r1, r7
   b4e30:	f7ff fa28 	bl	b4284 <_ZN5Print6printfEPKcz>
            count++;
   b4e34:	3501      	adds	r5, #1
        while (!CALCULATE)
   b4e36:	e7f1      	b.n	b4e1c <loop+0x84>
        rotate_prices();
   b4e38:	f7ff ff06 	bl	b4c48 <_Z13rotate_pricesv>
        delay(5000);
   b4e3c:	f241 3088 	movw	r0, #5000	; 0x1388
   b4e40:	f002 fecc 	bl	b7bdc <delay>
        if (Time.hour() >= PULL_TIME_1)
   b4e44:	f002 fe7c 	bl	b7b40 <_ZN9TimeClass4hourEv>
   b4e48:	280c      	cmp	r0, #12
   b4e4a:	dd3d      	ble.n	b4ec8 <loop+0x130>
            CALCULATE = false;
   b4e4c:	2300      	movs	r3, #0
   b4e4e:	7023      	strb	r3, [r4, #0]
            GET_DATA = true;
   b4e50:	4b68      	ldr	r3, [pc, #416]	; (b4ff4 <loop+0x25c>)
   b4e52:	2201      	movs	r2, #1
   b4e54:	701a      	strb	r2, [r3, #0]
        STARTUP = false;
   b4e56:	2300      	movs	r3, #0
   b4e58:	7033      	strb	r3, [r6, #0]
    if (GET_DATA)
   b4e5a:	4d66      	ldr	r5, [pc, #408]	; (b4ff4 <loop+0x25c>)
   b4e5c:	782b      	ldrb	r3, [r5, #0]
   b4e5e:	b14b      	cbz	r3, b4e74 <loop+0xdc>
        AWAITING_DATA = true;
   b4e60:	4b65      	ldr	r3, [pc, #404]	; (b4ff8 <loop+0x260>)
   b4e62:	2201      	movs	r2, #1
   b4e64:	701a      	strb	r2, [r3, #0]
        get_data(Time.day() + 1);
   b4e66:	f002 fe8f 	bl	b7b88 <_ZN9TimeClass3dayEv>
   b4e6a:	3001      	adds	r0, #1
   b4e6c:	f7ff ff26 	bl	b4cbc <_Z8get_datai>
        GET_DATA = false;
   b4e70:	2300      	movs	r3, #0
   b4e72:	702b      	strb	r3, [r5, #0]
    if (CALCULATE)
   b4e74:	7823      	ldrb	r3, [r4, #0]
   b4e76:	4d61      	ldr	r5, [pc, #388]	; (b4ffc <loop+0x264>)
   b4e78:	b37b      	cbz	r3, b4eda <loop+0x142>
        update_JSON();
   b4e7a:	f7ff fc63 	bl	b4744 <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b4e7e:	4b60      	ldr	r3, [pc, #384]	; (b5000 <loop+0x268>)
   b4e80:	4860      	ldr	r0, [pc, #384]	; (b5004 <loop+0x26c>)
   b4e82:	6819      	ldr	r1, [r3, #0]
   b4e84:	2218      	movs	r2, #24
   b4e86:	f7ff fb7b 	bl	b4580 <_Z8calc_lowPA2_iPdi>
   b4e8a:	4b5f      	ldr	r3, [pc, #380]	; (b5008 <loop+0x270>)
   b4e8c:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4e8e:	f003 fad3 	bl	b8438 <_Z16_fetch_usbserialv>
   b4e92:	4606      	mov	r6, r0
   b4e94:	f002 fe54 	bl	b7b40 <_ZN9TimeClass4hourEv>
   b4e98:	9001      	str	r0, [sp, #4]
   b4e9a:	f002 fe5d 	bl	b7b58 <_ZN9TimeClass6minuteEv>
   b4e9e:	9a01      	ldr	r2, [sp, #4]
   b4ea0:	495a      	ldr	r1, [pc, #360]	; (b500c <loop+0x274>)
   b4ea2:	4603      	mov	r3, r0
   b4ea4:	4630      	mov	r0, r6
   b4ea6:	f7ff f9ed 	bl	b4284 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b4eaa:	2301      	movs	r3, #1
   b4eac:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b4eae:	2300      	movs	r3, #0
   b4eb0:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b4eb2:	4b55      	ldr	r3, [pc, #340]	; (b5008 <loop+0x270>)
   b4eb4:	4853      	ldr	r0, [pc, #332]	; (b5004 <loop+0x26c>)
   b4eb6:	6819      	ldr	r1, [r3, #0]
   b4eb8:	f7ff ff2c 	bl	b4d14 <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b4ebc:	4b54      	ldr	r3, [pc, #336]	; (b5010 <loop+0x278>)
   b4ebe:	2201      	movs	r2, #1
   b4ec0:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b4ec2:	2300      	movs	r3, #0
   b4ec4:	702b      	strb	r3, [r5, #0]
   b4ec6:	e00b      	b.n	b4ee0 <loop+0x148>
            Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b4ec8:	f003 fab6 	bl	b8438 <_Z16_fetch_usbserialv>
   b4ecc:	4951      	ldr	r1, [pc, #324]	; (b5014 <loop+0x27c>)
   b4ece:	220d      	movs	r2, #13
   b4ed0:	f7ff f9d8 	bl	b4284 <_ZN5Print6printfEPKcz>
            CALCULATE = true;
   b4ed4:	2301      	movs	r3, #1
   b4ed6:	7023      	strb	r3, [r4, #0]
   b4ed8:	e7bd      	b.n	b4e56 <loop+0xbe>
    if (TRANSMIT_PRICE)
   b4eda:	782b      	ldrb	r3, [r5, #0]
   b4edc:	2b00      	cmp	r3, #0
   b4ede:	d1e8      	bne.n	b4eb2 <loop+0x11a>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b4ee0:	4d4d      	ldr	r5, [pc, #308]	; (b5018 <loop+0x280>)
   b4ee2:	782b      	ldrb	r3, [r5, #0]
   b4ee4:	b333      	cbz	r3, b4f34 <loop+0x19c>
        Serial.printf("Received power/get\n");
   b4ee6:	f003 faa7 	bl	b8438 <_Z16_fetch_usbserialv>
   b4eea:	494c      	ldr	r1, [pc, #304]	; (b501c <loop+0x284>)
   b4eec:	f7ff f9ca 	bl	b4284 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b4ef0:	4b4b      	ldr	r3, [pc, #300]	; (b5020 <loop+0x288>)
   b4ef2:	681e      	ldr	r6, [r3, #0]
   b4ef4:	f002 fe24 	bl	b7b40 <_ZN9TimeClass4hourEv>
   b4ef8:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4efc:	4949      	ldr	r1, [pc, #292]	; (b5024 <loop+0x28c>)
        wh_today[Time.hour()] += 1;
   b4efe:	3301      	adds	r3, #1
   b4f00:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4f04:	4b48      	ldr	r3, [pc, #288]	; (b5028 <loop+0x290>)
   b4f06:	a806      	add	r0, sp, #24
   b4f08:	681a      	ldr	r2, [r3, #0]
   b4f0a:	f000 fded 	bl	b5ae8 <sprintf>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
<<<<<<< HEAD
   b4fc6:	2300      	movs	r3, #0
   b4fc8:	484d      	ldr	r0, [pc, #308]	; (b5100 <loop+0x2c8>)
   b4fca:	22ff      	movs	r2, #255	; 0xff
   b4fcc:	a906      	add	r1, sp, #24
   b4fce:	f002 ffd3 	bl	b7f78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        TRANSMIT_SENSOR = false;
   b4fd2:	2300      	movs	r3, #0
   b4fd4:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b4fd6:	4d4b      	ldr	r5, [pc, #300]	; (b5104 <loop+0x2cc>)
   b4fd8:	782b      	ldrb	r3, [r5, #0]
   b4fda:	b12b      	cbz	r3, b4fe8 <loop+0x1b0>
        rotate_prices();
   b4fdc:	f7ff fe36 	bl	b4c4c <_Z13rotate_pricesv>
        ROTATE = false;
   b4fe0:	2300      	movs	r3, #0
   b4fe2:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b4fe4:	2301      	movs	r3, #1
   b4fe6:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b4fe8:	4c47      	ldr	r4, [pc, #284]	; (b5108 <loop+0x2d0>)
   b4fea:	7823      	ldrb	r3, [r4, #0]
   b4fec:	b1ab      	cbz	r3, b501a <loop+0x1e2>
        sprintf(buffer, "%d", wh_today[Time.hour() - 1]);
   b4fee:	4b3e      	ldr	r3, [pc, #248]	; (b50e8 <loop+0x2b0>)
   b4ff0:	681d      	ldr	r5, [r3, #0]
   b4ff2:	f004 f89f 	bl	b9134 <_ZN9TimeClass4hourEv>
   b4ff6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   b4ffa:	3801      	subs	r0, #1
   b4ffc:	493b      	ldr	r1, [pc, #236]	; (b50ec <loop+0x2b4>)
   b4ffe:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
   b5002:	a806      	add	r0, sp, #24
   b5004:	f001 ff56 	bl	b6eb4 <sprintf>
        client.publish("watthour", buffer);
   b5008:	4940      	ldr	r1, [pc, #256]	; (b510c <loop+0x2d4>)
   b500a:	483b      	ldr	r0, [pc, #236]	; (b50f8 <loop+0x2c0>)
   b500c:	aa06      	add	r2, sp, #24
   b500e:	f000 fd06 	bl	b5a1e <_ZN4MQTT7publishEPKcS1_>
        hourly_JSON_update();
   b5012:	f7ff fb69 	bl	b46e8 <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b5016:	2300      	movs	r3, #0
   b5018:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 1400))
   b501a:	4c3d      	ldr	r4, [pc, #244]	; (b5110 <loop+0x2d8>)
   b501c:	7825      	ldrb	r5, [r4, #0]
   b501e:	f001 fc1b 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
   b5022:	4b3c      	ldr	r3, [pc, #240]	; (b5114 <loop+0x2dc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	1ac0      	subs	r0, r0, r3
   b5028:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   b502c:	d92e      	bls.n	b508c <loop+0x254>
   b502e:	b36d      	cbz	r5, b508c <loop+0x254>
        update_JSON();
   b5030:	f7ff fb8c 	bl	b474c <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b5034:	4b2e      	ldr	r3, [pc, #184]	; (b50f0 <loop+0x2b8>)
   b5036:	4931      	ldr	r1, [pc, #196]	; (b50fc <loop+0x2c4>)
   b5038:	681a      	ldr	r2, [r3, #0]
   b503a:	a806      	add	r0, sp, #24
   b503c:	f001 ff3a 	bl	b6eb4 <sprintf>
   b5040:	2300      	movs	r3, #0
   b5042:	22ff      	movs	r2, #255	; 0xff
   b5044:	a906      	add	r1, sp, #24
   b5046:	482e      	ldr	r0, [pc, #184]	; (b5100 <loop+0x2c8>)
   b5048:	f002 ff96 	bl	b7f78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b504c:	4932      	ldr	r1, [pc, #200]	; (b5118 <loop+0x2e0>)
   b504e:	4833      	ldr	r0, [pc, #204]	; (b511c <loop+0x2e4>)
   b5050:	2200      	movs	r2, #0
   b5052:	f002 fff1 	bl	b8038 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b5056:	4932      	ldr	r1, [pc, #200]	; (b5120 <loop+0x2e8>)
   b5058:	4832      	ldr	r0, [pc, #200]	; (b5124 <loop+0x2ec>)
   b505a:	2200      	movs	r2, #0
   b505c:	f002 ffec 	bl	b8038 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b5060:	4931      	ldr	r1, [pc, #196]	; (b5128 <loop+0x2f0>)
   b5062:	4832      	ldr	r0, [pc, #200]	; (b512c <loop+0x2f4>)
   b5064:	2200      	movs	r2, #0
   b5066:	f002 ffe7 	bl	b8038 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b506a:	4931      	ldr	r1, [pc, #196]	; (b5130 <loop+0x2f8>)
   b506c:	4831      	ldr	r0, [pc, #196]	; (b5134 <loop+0x2fc>)
   b506e:	2200      	movs	r2, #0
   b5070:	f002 ffe2 	bl	b8038 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b5074:	4930      	ldr	r1, [pc, #192]	; (b5138 <loop+0x300>)
   b5076:	4831      	ldr	r0, [pc, #196]	; (b513c <loop+0x304>)
   b5078:	2200      	movs	r2, #0
   b507a:	f002 ffdd 	bl	b8038 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b507e:	2300      	movs	r3, #0
   b5080:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b5082:	f004 fcf5 	bl	b9a70 <_Z16_fetch_usbserialv>
   b5086:	492e      	ldr	r1, [pc, #184]	; (b5140 <loop+0x308>)
   b5088:	f7ff f904 	bl	b4294 <_ZN5Print6printfEPKcz>
    delay(1000);
   b508c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b5090:	b047      	add	sp, #284	; 0x11c
   b5092:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    delay(1000);
   b5096:	f004 b89b 	b.w	b91d0 <delay>
   b509a:	bf00      	nop
   b509c:	2003db20 	.word	0x2003db20
   b50a0:	2003db01 	.word	0x2003db01
   b50a4:	2003e710 	.word	0x2003e710
   b50a8:	000bd8c0 	.word	0x000bd8c0
   b50ac:	000bd896 	.word	0x000bd896
   b50b0:	000bd89e 	.word	0x000bd89e
   b50b4:	000bd8cd 	.word	0x000bd8cd
   b50b8:	000bd8eb 	.word	0x000bd8eb
   b50bc:	2003db1c 	.word	0x2003db1c
   b50c0:	2003db00 	.word	0x2003db00
   b50c4:	2003db21 	.word	0x2003db21
   b50c8:	2003dc98 	.word	0x2003dc98
   b50cc:	2003dbd0 	.word	0x2003dbd0
   b50d0:	2003dc30 	.word	0x2003dc30
   b50d4:	000bd7c8 	.word	0x000bd7c8
   b50d8:	2003db1f 	.word	0x2003db1f
   b50dc:	000bd8f8 	.word	0x000bd8f8
   b50e0:	2003db22 	.word	0x2003db22
   b50e4:	000bd929 	.word	0x000bd929
   b50e8:	2003e1b8 	.word	0x2003e1b8
   b50ec:	000bd788 	.word	0x000bd788
   b50f0:	2003dc34 	.word	0x2003dc34
   b50f4:	000bd93d 	.word	0x000bd93d
   b50f8:	2003dc38 	.word	0x2003dc38
   b50fc:	000bd943 	.word	0x000bd943
   b5100:	2003db24 	.word	0x2003db24
   b5104:	2003db1e 	.word	0x2003db1e
   b5108:	2003db23 	.word	0x2003db23
   b510c:	000bd94f 	.word	0x000bd94f
   b5110:	2003db1d 	.word	0x2003db1d
   b5114:	2003dca8 	.word	0x2003dca8
   b5118:	2003dccc 	.word	0x2003dccc
   b511c:	2003db14 	.word	0x2003db14
   b5120:	2003dcac 	.word	0x2003dcac
   b5124:	2003db04 	.word	0x2003db04
   b5128:	2003dcbc 	.word	0x2003dcbc
   b512c:	2003db0c 	.word	0x2003db0c
   b5130:	2003e1d0 	.word	0x2003e1d0
   b5134:	2003db34 	.word	0x2003db34
   b5138:	2003e1bc 	.word	0x2003e1bc
   b513c:	2003db2c 	.word	0x2003db2c
   b5140:	000bd958 	.word	0x000bd958

000b5144 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5144:	b082      	sub	sp, #8
   b5146:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5148:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b514a:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b514c:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b514e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5150:	e9c0 3300 	strd	r3, r3, [r0]
   b5154:	4606      	mov	r6, r0
   b5156:	4694      	mov	ip, r2
   b5158:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b515a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b515c:	ac04      	add	r4, sp, #16
   b515e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5160:	682b      	ldr	r3, [r5, #0]
   b5162:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b5164:	ad1a      	add	r5, sp, #104	; 0x68
   b5166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5168:	ac09      	add	r4, sp, #36	; 0x24
   b516a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b516c:	682b      	ldr	r3, [r5, #0]
   b516e:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5170:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b5172:	9302      	str	r3, [sp, #8]
   b5174:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b5176:	9301      	str	r3, [sp, #4]
   b5178:	ab09      	add	r3, sp, #36	; 0x24
   b517a:	9300      	str	r3, [sp, #0]
   b517c:	4630      	mov	r0, r6
   b517e:	ab04      	add	r3, sp, #16
   b5180:	4662      	mov	r2, ip
   b5182:	4639      	mov	r1, r7
   b5184:	f003 fc3a 	bl	b89fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5188:	4630      	mov	r0, r6
   b518a:	b00f      	add	sp, #60	; 0x3c
   b518c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5190:	b002      	add	sp, #8
   b5192:	4770      	bx	lr

000b5194 <_GLOBAL__sub_I_argonName>:
   b5194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b5198:	4b8d      	ldr	r3, [pc, #564]	; (b53d0 <_GLOBAL__sub_I_argonName+0x23c>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b519a:	4d8e      	ldr	r5, [pc, #568]	; (b53d4 <_GLOBAL__sub_I_argonName+0x240>)
const BleUuid wattcharacteristicUuid(watt_c);
   b519c:	f8df b2d8 	ldr.w	fp, [pc, #728]	; b5478 <_GLOBAL__sub_I_argonName+0x2e4>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b51a0:	f8df a2d8 	ldr.w	sl, [pc, #728]	; b547c <_GLOBAL__sub_I_argonName+0x2e8>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b51a4:	f8df 92d8 	ldr.w	r9, [pc, #728]	; b5480 <_GLOBAL__sub_I_argonName+0x2ec>
   b51a8:	f04f 0801 	mov.w	r8, #1
   b51ac:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b51b0:	4b89      	ldr	r3, [pc, #548]	; (b53d8 <_GLOBAL__sub_I_argonName+0x244>)
   b51b2:	b093      	sub	sp, #76	; 0x4c
   b51b4:	6819      	ldr	r1, [r3, #0]
   b51b6:	4628      	mov	r0, r5
   b51b8:	f002 fea0 	bl	b7efc <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b51bc:	4b87      	ldr	r3, [pc, #540]	; (b53dc <_GLOBAL__sub_I_argonName+0x248>)
   b51be:	4658      	mov	r0, fp
   b51c0:	6819      	ldr	r1, [r3, #0]
   b51c2:	f002 fe9b 	bl	b7efc <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b51c6:	4b86      	ldr	r3, [pc, #536]	; (b53e0 <_GLOBAL__sub_I_argonName+0x24c>)
   b51c8:	4650      	mov	r0, sl
   b51ca:	6819      	ldr	r1, [r3, #0]
   b51cc:	f002 fe96 	bl	b7efc <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b51d0:	4b84      	ldr	r3, [pc, #528]	; (b53e4 <_GLOBAL__sub_I_argonName+0x250>)
   b51d2:	4648      	mov	r0, r9
   b51d4:	6819      	ldr	r1, [r3, #0]
   b51d6:	f002 fe91 	bl	b7efc <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b51da:	4b83      	ldr	r3, [pc, #524]	; (b53e8 <_GLOBAL__sub_I_argonName+0x254>)
   b51dc:	4883      	ldr	r0, [pc, #524]	; (b53ec <_GLOBAL__sub_I_argonName+0x258>)
   b51de:	6819      	ldr	r1, [r3, #0]
   b51e0:	f002 fe8c 	bl	b7efc <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b51e4:	4b82      	ldr	r3, [pc, #520]	; (b53f0 <_GLOBAL__sub_I_argonName+0x25c>)
   b51e6:	4883      	ldr	r0, [pc, #524]	; (b53f4 <_GLOBAL__sub_I_argonName+0x260>)
   b51e8:	6819      	ldr	r1, [r3, #0]
   b51ea:	f002 fe87 	bl	b7efc <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b51ee:	4b82      	ldr	r3, [pc, #520]	; (b53f8 <_GLOBAL__sub_I_argonName+0x264>)
   b51f0:	4882      	ldr	r0, [pc, #520]	; (b53fc <_GLOBAL__sub_I_argonName+0x268>)
   b51f2:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b51f4:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b51f6:	f002 fe81 	bl	b7efc <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b51fa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b51fe:	462e      	mov	r6, r5
   b5200:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
=======
   b4f0e:	2300      	movs	r3, #0
   b4f10:	22ff      	movs	r2, #255	; 0xff
   b4f12:	a906      	add	r1, sp, #24
   b4f14:	4845      	ldr	r0, [pc, #276]	; (b502c <loop+0x294>)
   b4f16:	f001 fd31 	bl	b697c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(update_Whr_Today_JSON());
   b4f1a:	a802      	add	r0, sp, #8
   b4f1c:	f7ff fd5a 	bl	b49d4 <_Z21update_Whr_Today_JSONv>
   b4f20:	2200      	movs	r2, #0
   b4f22:	a902      	add	r1, sp, #8
   b4f24:	4842      	ldr	r0, [pc, #264]	; (b5030 <loop+0x298>)
   b4f26:	f001 fd89 	bl	b6a3c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
   b4f2a:	a802      	add	r0, sp, #8
   b4f2c:	f001 f9c0 	bl	b62b0 <_ZN6StringD1Ev>
        TRANSMIT_SENSOR = false;
   b4f30:	2300      	movs	r3, #0
   b4f32:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b4f34:	4d3f      	ldr	r5, [pc, #252]	; (b5034 <loop+0x29c>)
   b4f36:	782b      	ldrb	r3, [r5, #0]
   b4f38:	b12b      	cbz	r3, b4f46 <loop+0x1ae>
        rotate_prices();
   b4f3a:	f7ff fe85 	bl	b4c48 <_Z13rotate_pricesv>
        ROTATE = false;
   b4f3e:	2300      	movs	r3, #0
   b4f40:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b4f42:	2301      	movs	r3, #1
   b4f44:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b4f46:	4c3c      	ldr	r4, [pc, #240]	; (b5038 <loop+0x2a0>)
   b4f48:	7823      	ldrb	r3, [r4, #0]
   b4f4a:	b11b      	cbz	r3, b4f54 <loop+0x1bc>
        hourly_JSON_update();
   b4f4c:	f7ff fbc8 	bl	b46e0 <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b4f50:	2300      	movs	r3, #0
   b4f52:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 1400))
   b4f54:	4c39      	ldr	r4, [pc, #228]	; (b503c <loop+0x2a4>)
   b4f56:	7825      	ldrb	r5, [r4, #0]
   b4f58:	f000 fac0 	bl	b54dc <HAL_Timer_Get_Milli_Seconds>
   b4f5c:	4b38      	ldr	r3, [pc, #224]	; (b5040 <loop+0x2a8>)
   b4f5e:	681b      	ldr	r3, [r3, #0]
   b4f60:	1ac0      	subs	r0, r0, r3
   b4f62:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   b4f66:	d92e      	bls.n	b4fc6 <loop+0x22e>
   b4f68:	b36d      	cbz	r5, b4fc6 <loop+0x22e>
        update_JSON();
   b4f6a:	f7ff fbeb 	bl	b4744 <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b4f6e:	4b2e      	ldr	r3, [pc, #184]	; (b5028 <loop+0x290>)
   b4f70:	492c      	ldr	r1, [pc, #176]	; (b5024 <loop+0x28c>)
   b4f72:	681a      	ldr	r2, [r3, #0]
   b4f74:	a806      	add	r0, sp, #24
   b4f76:	f000 fdb7 	bl	b5ae8 <sprintf>
   b4f7a:	2300      	movs	r3, #0
   b4f7c:	22ff      	movs	r2, #255	; 0xff
   b4f7e:	a906      	add	r1, sp, #24
   b4f80:	482a      	ldr	r0, [pc, #168]	; (b502c <loop+0x294>)
   b4f82:	f001 fcfb 	bl	b697c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b4f86:	492f      	ldr	r1, [pc, #188]	; (b5044 <loop+0x2ac>)
   b4f88:	482f      	ldr	r0, [pc, #188]	; (b5048 <loop+0x2b0>)
   b4f8a:	2200      	movs	r2, #0
   b4f8c:	f001 fd56 	bl	b6a3c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b4f90:	492e      	ldr	r1, [pc, #184]	; (b504c <loop+0x2b4>)
   b4f92:	482f      	ldr	r0, [pc, #188]	; (b5050 <loop+0x2b8>)
   b4f94:	2200      	movs	r2, #0
   b4f96:	f001 fd51 	bl	b6a3c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b4f9a:	492e      	ldr	r1, [pc, #184]	; (b5054 <loop+0x2bc>)
   b4f9c:	482e      	ldr	r0, [pc, #184]	; (b5058 <loop+0x2c0>)
   b4f9e:	2200      	movs	r2, #0
   b4fa0:	f001 fd4c 	bl	b6a3c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b4fa4:	492d      	ldr	r1, [pc, #180]	; (b505c <loop+0x2c4>)
   b4fa6:	482e      	ldr	r0, [pc, #184]	; (b5060 <loop+0x2c8>)
   b4fa8:	2200      	movs	r2, #0
   b4faa:	f001 fd47 	bl	b6a3c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b4fae:	492d      	ldr	r1, [pc, #180]	; (b5064 <loop+0x2cc>)
   b4fb0:	481f      	ldr	r0, [pc, #124]	; (b5030 <loop+0x298>)
   b4fb2:	2200      	movs	r2, #0
   b4fb4:	f001 fd42 	bl	b6a3c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b4fb8:	2300      	movs	r3, #0
   b4fba:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b4fbc:	f003 fa3c 	bl	b8438 <_Z16_fetch_usbserialv>
   b4fc0:	4929      	ldr	r1, [pc, #164]	; (b5068 <loop+0x2d0>)
   b4fc2:	f7ff f95f 	bl	b4284 <_ZN5Print6printfEPKcz>
    delay(1000);
   b4fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b4fca:	b047      	add	sp, #284	; 0x11c
   b4fcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    delay(1000);
   b4fd0:	f002 be04 	b.w	b7bdc <delay>
   b4fd4:	2003db80 	.word	0x2003db80
   b4fd8:	2003db61 	.word	0x2003db61
   b4fdc:	2003e710 	.word	0x2003e710
   b4fe0:	000bbc16 	.word	0x000bbc16
   b4fe4:	000bbbec 	.word	0x000bbbec
   b4fe8:	000bbbf4 	.word	0x000bbbf4
   b4fec:	000bbc23 	.word	0x000bbc23
   b4ff0:	000bbc41 	.word	0x000bbc41
   b4ff4:	2003db7c 	.word	0x2003db7c
   b4ff8:	2003db60 	.word	0x2003db60
   b4ffc:	2003db81 	.word	0x2003db81
   b5000:	2003dc98 	.word	0x2003dc98
   b5004:	2003dc30 	.word	0x2003dc30
   b5008:	2003dc90 	.word	0x2003dc90
   b500c:	000bbb54 	.word	0x000bbb54
   b5010:	2003db7f 	.word	0x2003db7f
   b5014:	000bbc4e 	.word	0x000bbc4e
   b5018:	2003db82 	.word	0x2003db82
   b501c:	000bbc7f 	.word	0x000bbc7f
   b5020:	2003e1b8 	.word	0x2003e1b8
   b5024:	000bbc93 	.word	0x000bbc93
   b5028:	2003dc94 	.word	0x2003dc94
   b502c:	2003db84 	.word	0x2003db84
   b5030:	2003db8c 	.word	0x2003db8c
   b5034:	2003db7e 	.word	0x2003db7e
   b5038:	2003db83 	.word	0x2003db83
   b503c:	2003db7d 	.word	0x2003db7d
   b5040:	2003dca8 	.word	0x2003dca8
   b5044:	2003dccc 	.word	0x2003dccc
   b5048:	2003db74 	.word	0x2003db74
   b504c:	2003dcac 	.word	0x2003dcac
   b5050:	2003db64 	.word	0x2003db64
   b5054:	2003dcbc 	.word	0x2003dcbc
   b5058:	2003db6c 	.word	0x2003db6c
   b505c:	2003e1d0 	.word	0x2003e1d0
   b5060:	2003db94 	.word	0x2003db94
   b5064:	2003e1bc 	.word	0x2003e1bc
   b5068:	000bbc9f 	.word	0x000bbc9f

000b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b506c:	b082      	sub	sp, #8
   b506e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5070:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b5072:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5074:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b5076:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5078:	e9c0 3300 	strd	r3, r3, [r0]
   b507c:	4606      	mov	r6, r0
   b507e:	4694      	mov	ip, r2
   b5080:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b5082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5084:	ac04      	add	r4, sp, #16
   b5086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5088:	682b      	ldr	r3, [r5, #0]
   b508a:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b508c:	ad1a      	add	r5, sp, #104	; 0x68
   b508e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5090:	ac09      	add	r4, sp, #36	; 0x24
   b5092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5094:	682b      	ldr	r3, [r5, #0]
   b5096:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5098:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b509a:	9302      	str	r3, [sp, #8]
   b509c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b509e:	9301      	str	r3, [sp, #4]
   b50a0:	ab09      	add	r3, sp, #36	; 0x24
   b50a2:	9300      	str	r3, [sp, #0]
   b50a4:	4630      	mov	r0, r6
   b50a6:	ab04      	add	r3, sp, #16
   b50a8:	4662      	mov	r2, ip
   b50aa:	4639      	mov	r1, r7
   b50ac:	f002 f9ac 	bl	b7408 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b50b0:	4630      	mov	r0, r6
   b50b2:	b00f      	add	sp, #60	; 0x3c
   b50b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b50b8:	b002      	add	sp, #8
   b50ba:	4770      	bx	lr

000b50bc <_GLOBAL__sub_I_argonName>:
   b50bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b50c0:	4b87      	ldr	r3, [pc, #540]	; (b52e0 <_GLOBAL__sub_I_argonName+0x224>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b50c2:	4d88      	ldr	r5, [pc, #544]	; (b52e4 <_GLOBAL__sub_I_argonName+0x228>)
const BleUuid wattcharacteristicUuid(watt_c);
   b50c4:	f8df b2b4 	ldr.w	fp, [pc, #692]	; b537c <_GLOBAL__sub_I_argonName+0x2c0>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b50c8:	f8df a2b4 	ldr.w	sl, [pc, #692]	; b5380 <_GLOBAL__sub_I_argonName+0x2c4>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b50cc:	f8df 92b4 	ldr.w	r9, [pc, #692]	; b5384 <_GLOBAL__sub_I_argonName+0x2c8>
   b50d0:	f04f 0801 	mov.w	r8, #1
   b50d4:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b50d8:	4b83      	ldr	r3, [pc, #524]	; (b52e8 <_GLOBAL__sub_I_argonName+0x22c>)
   b50da:	b093      	sub	sp, #76	; 0x4c
   b50dc:	6819      	ldr	r1, [r3, #0]
   b50de:	4628      	mov	r0, r5
   b50e0:	f001 fc0e 	bl	b6900 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b50e4:	4b81      	ldr	r3, [pc, #516]	; (b52ec <_GLOBAL__sub_I_argonName+0x230>)
   b50e6:	4658      	mov	r0, fp
   b50e8:	6819      	ldr	r1, [r3, #0]
   b50ea:	f001 fc09 	bl	b6900 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b50ee:	4b80      	ldr	r3, [pc, #512]	; (b52f0 <_GLOBAL__sub_I_argonName+0x234>)
   b50f0:	4650      	mov	r0, sl
   b50f2:	6819      	ldr	r1, [r3, #0]
   b50f4:	f001 fc04 	bl	b6900 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b50f8:	4b7e      	ldr	r3, [pc, #504]	; (b52f4 <_GLOBAL__sub_I_argonName+0x238>)
   b50fa:	4648      	mov	r0, r9
   b50fc:	6819      	ldr	r1, [r3, #0]
   b50fe:	f001 fbff 	bl	b6900 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b5102:	4b7d      	ldr	r3, [pc, #500]	; (b52f8 <_GLOBAL__sub_I_argonName+0x23c>)
   b5104:	487d      	ldr	r0, [pc, #500]	; (b52fc <_GLOBAL__sub_I_argonName+0x240>)
   b5106:	6819      	ldr	r1, [r3, #0]
   b5108:	f001 fbfa 	bl	b6900 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b510c:	4b7c      	ldr	r3, [pc, #496]	; (b5300 <_GLOBAL__sub_I_argonName+0x244>)
   b510e:	487d      	ldr	r0, [pc, #500]	; (b5304 <_GLOBAL__sub_I_argonName+0x248>)
   b5110:	6819      	ldr	r1, [r3, #0]
   b5112:	f001 fbf5 	bl	b6900 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b5116:	4b7c      	ldr	r3, [pc, #496]	; (b5308 <_GLOBAL__sub_I_argonName+0x24c>)
   b5118:	487c      	ldr	r0, [pc, #496]	; (b530c <_GLOBAL__sub_I_argonName+0x250>)
   b511a:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b511c:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b511e:	f001 fbef 	bl	b6900 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5122:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5126:	462e      	mov	r6, r5
   b5128:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
<<<<<<< HEAD
   b5202:	2710      	movs	r7, #16
   b5204:	eb0d 0c07 	add.w	ip, sp, r7
   b5208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b520c:	6833      	ldr	r3, [r6, #0]
   b520e:	f8cc 3000 	str.w	r3, [ip]
   b5212:	f10b 0304 	add.w	r3, fp, #4
   b5216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5218:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b521c:	f8db 3000 	ldr.w	r3, [fp]
   b5220:	4977      	ldr	r1, [pc, #476]	; (b5400 <_GLOBAL__sub_I_argonName+0x26c>)
   b5222:	4878      	ldr	r0, [pc, #480]	; (b5404 <_GLOBAL__sub_I_argonName+0x270>)
   b5224:	463a      	mov	r2, r7
   b5226:	f7ff ff8d 	bl	b5144 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b522a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b522e:	46ae      	mov	lr, r5
   b5230:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5234:	eb0d 0c07 	add.w	ip, sp, r7
   b5238:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b523c:	6833      	ldr	r3, [r6, #0]
   b523e:	f8cc 3000 	str.w	r3, [ip]
   b5242:	f10a 0304 	add.w	r3, sl, #4
   b5246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5248:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b524c:	f8da 3000 	ldr.w	r3, [sl]
   b5250:	496d      	ldr	r1, [pc, #436]	; (b5408 <_GLOBAL__sub_I_argonName+0x274>)
   b5252:	486e      	ldr	r0, [pc, #440]	; (b540c <_GLOBAL__sub_I_argonName+0x278>)
   b5254:	463a      	mov	r2, r7
   b5256:	f7ff ff75 	bl	b5144 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b525a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b525e:	46ae      	mov	lr, r5
   b5260:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5264:	eb0d 0c07 	add.w	ip, sp, r7
   b5268:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b526c:	6833      	ldr	r3, [r6, #0]
   b526e:	f8cc 3000 	str.w	r3, [ip]
   b5272:	f109 0304 	add.w	r3, r9, #4
   b5276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5278:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b527c:	f8d9 3000 	ldr.w	r3, [r9]
   b5280:	4963      	ldr	r1, [pc, #396]	; (b5410 <_GLOBAL__sub_I_argonName+0x27c>)
   b5282:	4864      	ldr	r0, [pc, #400]	; (b5414 <_GLOBAL__sub_I_argonName+0x280>)
   b5284:	463a      	mov	r2, r7
   b5286:	f7ff ff5d 	bl	b5144 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b528a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b528e:	46ae      	mov	lr, r5
   b5290:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5294:	eb0d 0c07 	add.w	ip, sp, r7
   b5298:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b529c:	6833      	ldr	r3, [r6, #0]
   b529e:	f8cc 3000 	str.w	r3, [ip]
   b52a2:	4b52      	ldr	r3, [pc, #328]	; (b53ec <_GLOBAL__sub_I_argonName+0x258>)
   b52a4:	3304      	adds	r3, #4
   b52a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b52ac:	4b4f      	ldr	r3, [pc, #316]	; (b53ec <_GLOBAL__sub_I_argonName+0x258>)
   b52ae:	495a      	ldr	r1, [pc, #360]	; (b5418 <_GLOBAL__sub_I_argonName+0x284>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	485a      	ldr	r0, [pc, #360]	; (b541c <_GLOBAL__sub_I_argonName+0x288>)
   b52b4:	463a      	mov	r2, r7
   b52b6:	f7ff ff45 	bl	b5144 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b52ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b52be:	46ae      	mov	lr, r5
   b52c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b52c4:	eb0d 0c07 	add.w	ip, sp, r7
   b52c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b52cc:	6833      	ldr	r3, [r6, #0]
   b52ce:	f8cc 3000 	str.w	r3, [ip]
   b52d2:	4b48      	ldr	r3, [pc, #288]	; (b53f4 <_GLOBAL__sub_I_argonName+0x260>)
   b52d4:	3304      	adds	r3, #4
   b52d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b52dc:	4b45      	ldr	r3, [pc, #276]	; (b53f4 <_GLOBAL__sub_I_argonName+0x260>)
   b52de:	4950      	ldr	r1, [pc, #320]	; (b5420 <_GLOBAL__sub_I_argonName+0x28c>)
   b52e0:	681b      	ldr	r3, [r3, #0]
   b52e2:	4850      	ldr	r0, [pc, #320]	; (b5424 <_GLOBAL__sub_I_argonName+0x290>)
   b52e4:	463a      	mov	r2, r7
   b52e6:	f7ff ff2d 	bl	b5144 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b52ea:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b52ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52f0:	eb0d 0c07 	add.w	ip, sp, r7
   b52f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b52f8:	4d40      	ldr	r5, [pc, #256]	; (b53fc <_GLOBAL__sub_I_argonName+0x268>)
   b52fa:	6833      	ldr	r3, [r6, #0]
   b52fc:	f8cc 3000 	str.w	r3, [ip]
   b5300:	1d2b      	adds	r3, r5, #4
   b5302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5304:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5308:	463a      	mov	r2, r7
   b530a:	682b      	ldr	r3, [r5, #0]
   b530c:	4946      	ldr	r1, [pc, #280]	; (b5428 <_GLOBAL__sub_I_argonName+0x294>)
   b530e:	4847      	ldr	r0, [pc, #284]	; (b542c <_GLOBAL__sub_I_argonName+0x298>)
   b5310:	f7ff ff18 	bl	b5144 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
uint8_t currentHour = Time.hour();
   b5314:	f003 ff0e 	bl	b9134 <_ZN9TimeClass4hourEv>
   b5318:	4b45      	ldr	r3, [pc, #276]	; (b5430 <_GLOBAL__sub_I_argonName+0x29c>)
String pricestoday_Json;
   b531a:	4946      	ldr	r1, [pc, #280]	; (b5434 <_GLOBAL__sub_I_argonName+0x2a0>)
uint8_t currentHour = Time.hour();
   b531c:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b531e:	4846      	ldr	r0, [pc, #280]	; (b5438 <_GLOBAL__sub_I_argonName+0x2a4>)
   b5320:	f002 fac1 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b5324:	4943      	ldr	r1, [pc, #268]	; (b5434 <_GLOBAL__sub_I_argonName+0x2a0>)
   b5326:	4845      	ldr	r0, [pc, #276]	; (b543c <_GLOBAL__sub_I_argonName+0x2a8>)
   b5328:	f002 fabd 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b532c:	4941      	ldr	r1, [pc, #260]	; (b5434 <_GLOBAL__sub_I_argonName+0x2a0>)
   b532e:	4844      	ldr	r0, [pc, #272]	; (b5440 <_GLOBAL__sub_I_argonName+0x2ac>)
   b5330:	f002 fab9 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b5334:	493f      	ldr	r1, [pc, #252]	; (b5434 <_GLOBAL__sub_I_argonName+0x2a0>)
   b5336:	4843      	ldr	r0, [pc, #268]	; (b5444 <_GLOBAL__sub_I_argonName+0x2b0>)
   b5338:	f002 fab5 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b533c:	493d      	ldr	r1, [pc, #244]	; (b5434 <_GLOBAL__sub_I_argonName+0x2a0>)
   b533e:	4842      	ldr	r0, [pc, #264]	; (b5448 <_GLOBAL__sub_I_argonName+0x2b4>)
   b5340:	f002 fab1 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5344:	4b41      	ldr	r3, [pc, #260]	; (b544c <_GLOBAL__sub_I_argonName+0x2b8>)
   b5346:	930e      	str	r3, [sp, #56]	; 0x38
=======
   b512a:	2710      	movs	r7, #16
   b512c:	eb0d 0c07 	add.w	ip, sp, r7
   b5130:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5134:	6833      	ldr	r3, [r6, #0]
   b5136:	f8cc 3000 	str.w	r3, [ip]
   b513a:	f10b 0304 	add.w	r3, fp, #4
   b513e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5140:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5144:	f8db 3000 	ldr.w	r3, [fp]
   b5148:	4971      	ldr	r1, [pc, #452]	; (b5310 <_GLOBAL__sub_I_argonName+0x254>)
   b514a:	4872      	ldr	r0, [pc, #456]	; (b5314 <_GLOBAL__sub_I_argonName+0x258>)
   b514c:	463a      	mov	r2, r7
   b514e:	f7ff ff8d 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b5152:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5156:	46ae      	mov	lr, r5
   b5158:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b515c:	eb0d 0c07 	add.w	ip, sp, r7
   b5160:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5164:	6833      	ldr	r3, [r6, #0]
   b5166:	f8cc 3000 	str.w	r3, [ip]
   b516a:	f10a 0304 	add.w	r3, sl, #4
   b516e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5170:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5174:	f8da 3000 	ldr.w	r3, [sl]
   b5178:	4967      	ldr	r1, [pc, #412]	; (b5318 <_GLOBAL__sub_I_argonName+0x25c>)
   b517a:	4868      	ldr	r0, [pc, #416]	; (b531c <_GLOBAL__sub_I_argonName+0x260>)
   b517c:	463a      	mov	r2, r7
   b517e:	f7ff ff75 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b5182:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5186:	46ae      	mov	lr, r5
   b5188:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b518c:	eb0d 0c07 	add.w	ip, sp, r7
   b5190:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5194:	6833      	ldr	r3, [r6, #0]
   b5196:	f8cc 3000 	str.w	r3, [ip]
   b519a:	f109 0304 	add.w	r3, r9, #4
   b519e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b51a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b51a4:	f8d9 3000 	ldr.w	r3, [r9]
   b51a8:	495d      	ldr	r1, [pc, #372]	; (b5320 <_GLOBAL__sub_I_argonName+0x264>)
   b51aa:	485e      	ldr	r0, [pc, #376]	; (b5324 <_GLOBAL__sub_I_argonName+0x268>)
   b51ac:	463a      	mov	r2, r7
   b51ae:	f7ff ff5d 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b51b2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b51b6:	46ae      	mov	lr, r5
   b51b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b51bc:	eb0d 0c07 	add.w	ip, sp, r7
   b51c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b51c4:	6833      	ldr	r3, [r6, #0]
   b51c6:	f8cc 3000 	str.w	r3, [ip]
   b51ca:	4b4c      	ldr	r3, [pc, #304]	; (b52fc <_GLOBAL__sub_I_argonName+0x240>)
   b51cc:	3304      	adds	r3, #4
   b51ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b51d0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b51d4:	4b49      	ldr	r3, [pc, #292]	; (b52fc <_GLOBAL__sub_I_argonName+0x240>)
   b51d6:	4954      	ldr	r1, [pc, #336]	; (b5328 <_GLOBAL__sub_I_argonName+0x26c>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	4854      	ldr	r0, [pc, #336]	; (b532c <_GLOBAL__sub_I_argonName+0x270>)
   b51dc:	463a      	mov	r2, r7
   b51de:	f7ff ff45 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b51e2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b51e6:	46ae      	mov	lr, r5
   b51e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b51ec:	eb0d 0c07 	add.w	ip, sp, r7
   b51f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b51f4:	6833      	ldr	r3, [r6, #0]
   b51f6:	f8cc 3000 	str.w	r3, [ip]
   b51fa:	4b42      	ldr	r3, [pc, #264]	; (b5304 <_GLOBAL__sub_I_argonName+0x248>)
   b51fc:	3304      	adds	r3, #4
   b51fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5200:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5204:	4b3f      	ldr	r3, [pc, #252]	; (b5304 <_GLOBAL__sub_I_argonName+0x248>)
   b5206:	494a      	ldr	r1, [pc, #296]	; (b5330 <_GLOBAL__sub_I_argonName+0x274>)
   b5208:	681b      	ldr	r3, [r3, #0]
   b520a:	484a      	ldr	r0, [pc, #296]	; (b5334 <_GLOBAL__sub_I_argonName+0x278>)
   b520c:	463a      	mov	r2, r7
   b520e:	f7ff ff2d 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b5212:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5218:	eb0d 0c07 	add.w	ip, sp, r7
   b521c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5220:	4d3a      	ldr	r5, [pc, #232]	; (b530c <_GLOBAL__sub_I_argonName+0x250>)
   b5222:	6833      	ldr	r3, [r6, #0]
   b5224:	f8cc 3000 	str.w	r3, [ip]
   b5228:	1d2b      	adds	r3, r5, #4
   b522a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b522c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5230:	463a      	mov	r2, r7
   b5232:	682b      	ldr	r3, [r5, #0]
   b5234:	4940      	ldr	r1, [pc, #256]	; (b5338 <_GLOBAL__sub_I_argonName+0x27c>)
   b5236:	4841      	ldr	r0, [pc, #260]	; (b533c <_GLOBAL__sub_I_argonName+0x280>)
   b5238:	f7ff ff18 	bl	b506c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
uint8_t currentHour = Time.hour();
   b523c:	f002 fc80 	bl	b7b40 <_ZN9TimeClass4hourEv>
   b5240:	4b3f      	ldr	r3, [pc, #252]	; (b5340 <_GLOBAL__sub_I_argonName+0x284>)
String pricestoday_Json;
   b5242:	4940      	ldr	r1, [pc, #256]	; (b5344 <_GLOBAL__sub_I_argonName+0x288>)
uint8_t currentHour = Time.hour();
   b5244:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b5246:	4840      	ldr	r0, [pc, #256]	; (b5348 <_GLOBAL__sub_I_argonName+0x28c>)
   b5248:	f001 f87d 	bl	b6346 <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b524c:	493d      	ldr	r1, [pc, #244]	; (b5344 <_GLOBAL__sub_I_argonName+0x288>)
   b524e:	483f      	ldr	r0, [pc, #252]	; (b534c <_GLOBAL__sub_I_argonName+0x290>)
   b5250:	f001 f879 	bl	b6346 <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b5254:	493b      	ldr	r1, [pc, #236]	; (b5344 <_GLOBAL__sub_I_argonName+0x288>)
   b5256:	483e      	ldr	r0, [pc, #248]	; (b5350 <_GLOBAL__sub_I_argonName+0x294>)
   b5258:	f001 f875 	bl	b6346 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b525c:	4939      	ldr	r1, [pc, #228]	; (b5344 <_GLOBAL__sub_I_argonName+0x288>)
   b525e:	483d      	ldr	r0, [pc, #244]	; (b5354 <_GLOBAL__sub_I_argonName+0x298>)
   b5260:	f001 f871 	bl	b6346 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b5264:	4937      	ldr	r1, [pc, #220]	; (b5344 <_GLOBAL__sub_I_argonName+0x288>)
   b5266:	483c      	ldr	r0, [pc, #240]	; (b5358 <_GLOBAL__sub_I_argonName+0x29c>)
   b5268:	f001 f86d 	bl	b6346 <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b526c:	4b3b      	ldr	r3, [pc, #236]	; (b535c <_GLOBAL__sub_I_argonName+0x2a0>)
   b526e:	930e      	str	r3, [sp, #56]	; 0x38
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
<<<<<<< HEAD
   b5348:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b534a:	4b41      	ldr	r3, [pc, #260]	; (b5450 <_GLOBAL__sub_I_argonName+0x2bc>)
   b534c:	4a41      	ldr	r2, [pc, #260]	; (b5454 <_GLOBAL__sub_I_argonName+0x2c0>)
   b534e:	601a      	str	r2, [r3, #0]
   b5350:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5354:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5358:	ae0c      	add	r6, sp, #48	; 0x30
   b535a:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b535e:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5362:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5366:	e896 0003 	ldmia.w	r6, {r0, r1}
   b536a:	e882 0003 	stmia.w	r2, {r0, r1}
   b536e:	4a3a      	ldr	r2, [pc, #232]	; (b5458 <_GLOBAL__sub_I_argonName+0x2c4>)
   b5370:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5372:	699a      	ldr	r2, [r3, #24]
   b5374:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b5376:	4a39      	ldr	r2, [pc, #228]	; (b545c <_GLOBAL__sub_I_argonName+0x2c8>)
   b5378:	711c      	strb	r4, [r3, #4]
   b537a:	609c      	str	r4, [r3, #8]
   b537c:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b537e:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5382:	4a37      	ldr	r2, [pc, #220]	; (b5460 <_GLOBAL__sub_I_argonName+0x2cc>)
      __a = _GLIBCXX_MOVE(__b);
   b5384:	9410      	str	r4, [sp, #64]	; 0x40
   b5386:	f103 0008 	add.w	r0, r3, #8
   b538a:	e9cd 8400 	strd	r8, r4, [sp]
   b538e:	f001 fb0d 	bl	b69ac <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5392:	4628      	mov	r0, r5
   b5394:	f7ff f828 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
MQTT client("192.168.110.6", PORT, 512, 30, callback);
   b5398:	4b32      	ldr	r3, [pc, #200]	; (b5464 <_GLOBAL__sub_I_argonName+0x2d0>)
   b539a:	9301      	str	r3, [sp, #4]
   b539c:	231e      	movs	r3, #30
   b539e:	f240 725b 	movw	r2, #1883	; 0x75b
   b53a2:	9300      	str	r3, [sp, #0]
   b53a4:	4930      	ldr	r1, [pc, #192]	; (b5468 <_GLOBAL__sub_I_argonName+0x2d4>)
   b53a6:	9402      	str	r4, [sp, #8]
   b53a8:	f44f 7300 	mov.w	r3, #512	; 0x200
   b53ac:	482f      	ldr	r0, [pc, #188]	; (b546c <_GLOBAL__sub_I_argonName+0x2d8>)
   b53ae:	f000 f8ad 	bl	b550c <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
UDP udp;
   b53b2:	492f      	ldr	r1, [pc, #188]	; (b5470 <_GLOBAL__sub_I_argonName+0x2dc>)
   b53b4:	4608      	mov	r0, r1
   b53b6:	f002 f95f 	bl	b7678 <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b53ba:	492d      	ldr	r1, [pc, #180]	; (b5470 <_GLOBAL__sub_I_argonName+0x2dc>)
   b53bc:	482d      	ldr	r0, [pc, #180]	; (b5474 <_GLOBAL__sub_I_argonName+0x2e0>)
   b53be:	f001 f8a1 	bl	b6504 <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b53c2:	4621      	mov	r1, r4
   b53c4:	4640      	mov	r0, r8
   b53c6:	b013      	add	sp, #76	; 0x4c
   b53c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b53cc:	f001 bc96 	b.w	b6cfc <system_thread_set_state>
   b53d0:	2003dbc8 	.word	0x2003dbc8
   b53d4:	2003db50 	.word	0x2003db50
   b53d8:	2003d918 	.word	0x2003d918
   b53dc:	2003d91c 	.word	0x2003d91c
   b53e0:	2003d8fc 	.word	0x2003d8fc
   b53e4:	2003d8f4 	.word	0x2003d8f4
   b53e8:	2003d8f8 	.word	0x2003d8f8
   b53ec:	2003db8c 	.word	0x2003db8c
   b53f0:	2003d900 	.word	0x2003d900
   b53f4:	2003db78 	.word	0x2003db78
   b53f8:	2003d904 	.word	0x2003d904
   b53fc:	2003dbb4 	.word	0x2003dbb4
   b5400:	000bd967 	.word	0x000bd967
   b5404:	2003db24 	.word	0x2003db24
   b5408:	000bd970 	.word	0x000bd970
   b540c:	2003db14 	.word	0x2003db14
   b5410:	000bd97e 	.word	0x000bd97e
   b5414:	2003db04 	.word	0x2003db04
   b5418:	000bd988 	.word	0x000bd988
   b541c:	2003db0c 	.word	0x2003db0c
   b5420:	000bd995 	.word	0x000bd995
   b5424:	2003db2c 	.word	0x2003db2c
   b5428:	000bd99f 	.word	0x000bd99f
   b542c:	2003db34 	.word	0x2003db34
   b5430:	2003dca4 	.word	0x2003dca4
   b5434:	000bd928 	.word	0x000bd928
   b5438:	2003dcac 	.word	0x2003dcac
   b543c:	2003dcbc 	.word	0x2003dcbc
   b5440:	2003dccc 	.word	0x2003dccc
   b5444:	2003e1bc 	.word	0x2003e1bc
   b5448:	2003e1d0 	.word	0x2003e1d0
   b544c:	000b41d1 	.word	0x000b41d1
   b5450:	2003e150 	.word	0x2003e150
   b5454:	000bd9c4 	.word	0x000bd9c4
   b5458:	000b4177 	.word	0x000b4177
   b545c:	000b418b 	.word	0x000b418b
   b5460:	000b413d 	.word	0x000b413d
   b5464:	000b40b9 	.word	0x000b40b9
   b5468:	000bd9ad 	.word	0x000bd9ad
   b546c:	2003dc38 	.word	0x2003dc38
   b5470:	2003e16c 	.word	0x2003e16c
   b5474:	2003dcdc 	.word	0x2003dcdc
   b5478:	2003db3c 	.word	0x2003db3c
   b547c:	2003dba0 	.word	0x2003dba0
   b5480:	2003db64 	.word	0x2003db64

000b5484 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5484:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5488:	b510      	push	{r4, lr}
   b548a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b548c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b548e:	b113      	cbz	r3, b5496 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5490:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5492:	f001 fab3 	bl	b69fc <os_mutex_lock>
#endif
#endif
#endif
        }
   b5496:	4620      	mov	r0, r4
   b5498:	bd10      	pop	{r4, pc}

000b549a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b549a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b549c:	6803      	ldr	r3, [r0, #0]
   b549e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b54a2:	4604      	mov	r4, r0
            if (mqtt->thread)
   b54a4:	b112      	cbz	r2, b54ac <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b54a6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b54a8:	f001 fab0 	bl	b6a0c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b54ac:	4620      	mov	r0, r4
   b54ae:	bd10      	pop	{r4, pc}

000b54b0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b54b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54b2:	461f      	mov	r7, r3
   b54b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b54b8:	4604      	mov	r4, r0
   b54ba:	460d      	mov	r5, r1
   b54bc:	4616      	mov	r6, r2
    if (thread) {
   b54be:	b12b      	cbz	r3, b54cc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b54c0:	2301      	movs	r3, #1
   b54c2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b54c6:	3058      	adds	r0, #88	; 0x58
   b54c8:	f001 fa90 	bl	b69ec <os_mutex_create>
    }
    this->callback = callback;
   b54cc:	9b08      	ldr	r3, [sp, #32]
   b54ce:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b54d0:	2300      	movs	r3, #0
   b54d2:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b54d4:	b106      	cbz	r6, b54d8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b54d6:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b54d8:	b125      	cbz	r5, b54e4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b54da:	4629      	mov	r1, r5
   b54dc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b54e0:	f002 fa1a 	bl	b7918 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b54e4:	9b06      	ldr	r3, [sp, #24]
   b54e6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b54e8:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b54ea:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b54ec:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b54f0:	2bff      	cmp	r3, #255	; 0xff
   b54f2:	bfb8      	it	lt
   b54f4:	23ff      	movlt	r3, #255	; 0xff
   b54f6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b54fa:	b108      	cbz	r0, b5500 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b54fc:	f7fe fdcf 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5500:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5504:	f7fe fdc9 	bl	b409a <_Znaj>
   b5508:	61e0      	str	r0, [r4, #28]
}
   b550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b550c <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b550c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5510:	4604      	mov	r4, r0
            bool thread) {
   b5512:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b5514:	4617      	mov	r7, r2
   b5516:	4698      	mov	r8, r3
   b5518:	460e      	mov	r6, r1
            bool thread) {
   b551a:	f004 fe63 	bl	ba1e4 <_ZN9TCPClientC1Ev>
   b551e:	490d      	ldr	r1, [pc, #52]	; (b5554 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b5520:	61e5      	str	r5, [r4, #28]
   b5522:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5526:	f002 f9be 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b552a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b552e:	9303      	str	r3, [sp, #12]
   b5530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b5532:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5534:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b5538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b553a:	9300      	str	r3, [sp, #0]
   b553c:	4620      	mov	r0, r4
            bool thread) {
   b553e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5542:	463b      	mov	r3, r7
   b5544:	462a      	mov	r2, r5
   b5546:	4631      	mov	r1, r6
   b5548:	f7ff ffb2 	bl	b54b0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b554c:	4620      	mov	r0, r4
   b554e:	b004      	add	sp, #16
   b5550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5554:	000bd928 	.word	0x000bd928

000b5558 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5558:	b510      	push	{r4, lr}
   b555a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b555c:	4620      	mov	r0, r4
   b555e:	f004 fd9d 	bl	ba09c <_ZN9TCPClient9availableEv>
   b5562:	2800      	cmp	r0, #0
   b5564:	d0fa      	beq.n	b555c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5566:	4620      	mov	r0, r4
   b5568:	f004 fba6 	bl	b9cb8 <_ZN9TCPClient4readEv>
}
   b556c:	b2c0      	uxtb	r0, r0
   b556e:	bd10      	pop	{r4, pc}

000b5570 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5574:	4605      	mov	r5, r0
   b5576:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5578:	f7ff ffee 	bl	b5558 <_ZN4MQTT8readByteEv>
   b557c:	69eb      	ldr	r3, [r5, #28]
   b557e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5580:	69eb      	ldr	r3, [r5, #28]
   b5582:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5586:	f04f 0901 	mov.w	r9, #1
   b558a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b558e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5590:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5592:	4628      	mov	r0, r5
   b5594:	f7ff ffe0 	bl	b5558 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5598:	4626      	mov	r6, r4
   b559a:	69eb      	ldr	r3, [r5, #28]
   b559c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b559e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b55a2:	fb13 f309 	smulbb	r3, r3, r9
   b55a6:	441f      	add	r7, r3
        buffer[len++] = digit;
   b55a8:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b55aa:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b55ac:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b55ae:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b55b0:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b55b4:	d4ed      	bmi.n	b5592 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b55b6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b55b8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b55bc:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b55c0:	d11e      	bne.n	b5600 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b55c2:	4628      	mov	r0, r5
   b55c4:	f7ff ffc8 	bl	b5558 <_ZN4MQTT8readByteEv>
   b55c8:	69eb      	ldr	r3, [r5, #28]
   b55ca:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b55cc:	4628      	mov	r0, r5
   b55ce:	f7ff ffc3 	bl	b5558 <_ZN4MQTT8readByteEv>
   b55d2:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b55d4:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b55d6:	b2b6      	uxth	r6, r6
   b55d8:	69eb      	ldr	r3, [r5, #28]
   b55da:	b2a4      	uxth	r4, r4
   b55dc:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b55de:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b55e0:	b2b6      	uxth	r6, r6
   b55e2:	42be      	cmp	r6, r7
   b55e4:	d20e      	bcs.n	b5604 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b55e6:	4628      	mov	r0, r5
   b55e8:	f7ff ffb6 	bl	b5558 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b55ec:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b55f0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b55f2:	bf84      	itt	hi
   b55f4:	69eb      	ldrhi	r3, [r5, #28]
   b55f6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b55f8:	3401      	adds	r4, #1
   b55fa:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b55fc:	3601      	adds	r6, #1
   b55fe:	e7ef      	b.n	b55e0 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5600:	2600      	movs	r6, #0
   b5602:	e7ed      	b.n	b55e0 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5604:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5608:	42a3      	cmp	r3, r4
   b560a:	bf2c      	ite	cs
   b560c:	4620      	movcs	r0, r4
   b560e:	2000      	movcc	r0, #0
   b5610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5614 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5618:	4615      	mov	r5, r2
   b561a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b561c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b561e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5620:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5622:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5624:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5626:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b562a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b562e:	f103 0401 	add.w	r4, r3, #1
   b5632:	4403      	add	r3, r0
            digit |= 0x80;
   b5634:	bf88      	it	hi
   b5636:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b563a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b563e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b5642:	b2e4      	uxtb	r4, r4
   b5644:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5648:	d81e      	bhi.n	b5688 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b564a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b564e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b5652:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5654:	4622      	mov	r2, r4
   b5656:	a901      	add	r1, sp, #4
   b5658:	4428      	add	r0, r5
    buf[4-llen] = header;
   b565a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b565e:	f005 fe64 	bl	bb32a <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b5662:	1c72      	adds	r2, r6, #1
   b5664:	4422      	add	r2, r4
   b5666:	4641      	mov	r1, r8
   b5668:	4638      	mov	r0, r7
   b566a:	f004 fb10 	bl	b9c8e <_ZN9TCPClient5writeEPKhj>
   b566e:	4605      	mov	r5, r0
   b5670:	f001 f8f2 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5674:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b5676:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5678:	4432      	add	r2, r6
   b567a:	b2a8      	uxth	r0, r5
}
   b567c:	1a13      	subs	r3, r2, r0
   b567e:	4258      	negs	r0, r3
   b5680:	4158      	adcs	r0, r3
   b5682:	b002      	add	sp, #8
   b5684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5688:	4623      	mov	r3, r4
   b568a:	e7ca      	b.n	b5622 <_ZN4MQTT5writeEhPht+0xe>

000b568c <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b568c:	b513      	push	{r0, r1, r4, lr}
   b568e:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b5690:	4601      	mov	r1, r0
   b5692:	a801      	add	r0, sp, #4
   b5694:	f7ff fef6 	bl	b5484 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b5698:	69e3      	ldr	r3, [r4, #28]
   b569a:	22e0      	movs	r2, #224	; 0xe0
   b569c:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b569e:	69e3      	ldr	r3, [r4, #28]
   b56a0:	2200      	movs	r2, #0
   b56a2:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b56a4:	69e1      	ldr	r1, [r4, #28]
   b56a6:	2202      	movs	r2, #2
   b56a8:	4620      	mov	r0, r4
   b56aa:	f004 faf0 	bl	b9c8e <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b56ae:	4620      	mov	r0, r4
   b56b0:	f004 fd4e 	bl	ba150 <_ZN9TCPClient4stopEv>
   b56b4:	f001 f8d0 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b56b8:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b56bc:	a801      	add	r0, sp, #4
   b56be:	f7ff feec 	bl	b549a <_ZN4MQTT11MutexLockerD1Ev>
}
   b56c2:	b002      	add	sp, #8
   b56c4:	bd10      	pop	{r4, pc}

000b56c6 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b56c6:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b56c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b56ca:	4605      	mov	r5, r0
    pos += 2;
   b56cc:	b298      	uxth	r0, r3
   b56ce:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b56d0:	5cce      	ldrb	r6, [r1, r3]
   b56d2:	b29c      	uxth	r4, r3
   b56d4:	b156      	cbz	r6, b56ec <_ZN4MQTT11writeStringEPKcPht+0x26>
   b56d6:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b56da:	4584      	cmp	ip, r0
   b56dc:	f103 0701 	add.w	r7, r3, #1
   b56e0:	d904      	bls.n	b56ec <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b56e2:	1c44      	adds	r4, r0, #1
   b56e4:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b56e6:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b56e8:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b56ea:	e7f1      	b.n	b56d0 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b56ec:	b299      	uxth	r1, r3
   b56ee:	1a41      	subs	r1, r0, r1
   b56f0:	440a      	add	r2, r1
   b56f2:	0a21      	lsrs	r1, r4, #8
   b56f4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b56f8:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b56fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b56fe <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b56fe:	b538      	push	{r3, r4, r5, lr}
   b5700:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5702:	f004 fbed 	bl	b9ee0 <_ZN9TCPClient9connectedEv>
   b5706:	2800      	cmp	r0, #0
   b5708:	bf14      	ite	ne
   b570a:	2501      	movne	r5, #1
   b570c:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b570e:	d102      	bne.n	b5716 <_ZN4MQTT11isConnectedEv+0x18>
   b5710:	4620      	mov	r0, r4
   b5712:	f004 fd1d 	bl	ba150 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5716:	4628      	mov	r0, r5
   b5718:	bd38      	pop	{r3, r4, r5, pc}

000b571a <_ZN4MQTT9setBrokerEPKct>:
void MQTT::setBroker(const char* domain, uint16_t port) {
   b571a:	b570      	push	{r4, r5, r6, lr}
   b571c:	4604      	mov	r4, r0
   b571e:	460e      	mov	r6, r1
   b5720:	4615      	mov	r5, r2
    if(isConnected()) {
   b5722:	f7ff ffec 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b5726:	b110      	cbz	r0, b572e <_ZN4MQTT9setBrokerEPKct+0x14>
        disconnect();
   b5728:	4620      	mov	r0, r4
   b572a:	f7ff ffaf 	bl	b568c <_ZN4MQTT10disconnectEv>
    this->domain = domain;
   b572e:	4631      	mov	r1, r6
   b5730:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5734:	f002 f8f0 	bl	b7918 <_ZN6StringaSEPKc>
    this->ip = NULL;
   b5738:	2300      	movs	r3, #0
   b573a:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   b573c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
}
   b5740:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5744 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b5744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5748:	b088      	sub	sp, #32
   b574a:	4604      	mov	r4, r0
   b574c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5750:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5754:	4689      	mov	r9, r1
   b5756:	4617      	mov	r7, r2
   b5758:	461e      	mov	r6, r3
    if (!isConnected()) {
   b575a:	f7ff ffd0 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b575e:	4605      	mov	r5, r0
   b5760:	2800      	cmp	r0, #0
   b5762:	f040 80cd 	bne.w	b5900 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b5766:	4621      	mov	r1, r4
   b5768:	a801      	add	r0, sp, #4
   b576a:	f7ff fe8b 	bl	b5484 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b576e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5770:	2900      	cmp	r1, #0
   b5772:	f040 8088 	bne.w	b5886 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b5776:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b577a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b577c:	462b      	mov	r3, r5
   b577e:	4620      	mov	r0, r4
   b5780:	f004 fb30 	bl	b9de4 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5784:	2800      	cmp	r0, #0
   b5786:	d07a      	beq.n	b587e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5788:	2301      	movs	r3, #1
   b578a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b578c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5790:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b5792:	2b04      	cmp	r3, #4
   b5794:	4b5b      	ldr	r3, [pc, #364]	; (b5904 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b5796:	f040 8081 	bne.w	b589c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b579a:	6818      	ldr	r0, [r3, #0]
   b579c:	8899      	ldrh	r1, [r3, #4]
   b579e:	799b      	ldrb	r3, [r3, #6]
   b57a0:	f8ad 100c 	strh.w	r1, [sp, #12]
   b57a4:	f88d 300e 	strb.w	r3, [sp, #14]
   b57a8:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b57aa:	f8c2 0005 	str.w	r0, [r2, #5]
   b57ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b57b2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b57b6:	f8a2 1009 	strh.w	r1, [r2, #9]
   b57ba:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b57bc:	230c      	movs	r3, #12
            if (willTopic) {
   b57be:	f1b8 0f00 	cmp.w	r8, #0
   b57c2:	f000 8081 	beq.w	b58c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b57c6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b57ca:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b57ce:	0140      	lsls	r0, r0, #5
   b57d0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b57d4:	f040 0006 	orr.w	r0, r0, #6
   b57d8:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b57da:	f1ba 0f00 	cmp.w	sl, #0
   b57de:	d101      	bne.n	b57e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b57e0:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b57e4:	b11f      	cbz	r7, b57ee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b57e6:	2e00      	cmp	r6, #0
   b57e8:	d170      	bne.n	b58cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b57ea:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b57ee:	69e2      	ldr	r2, [r4, #28]
   b57f0:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b57f2:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b57f4:	69e1      	ldr	r1, [r4, #28]
   b57f6:	1c58      	adds	r0, r3, #1
   b57f8:	1212      	asrs	r2, r2, #8
   b57fa:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b57fc:	1c9a      	adds	r2, r3, #2
   b57fe:	69e1      	ldr	r1, [r4, #28]
   b5800:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5802:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5804:	3303      	adds	r3, #3
   b5806:	69e2      	ldr	r2, [r4, #28]
   b5808:	4649      	mov	r1, r9
   b580a:	4620      	mov	r0, r4
   b580c:	f7ff ff5b 	bl	b56c6 <_ZN4MQTT11writeStringEPKcPht>
   b5810:	4603      	mov	r3, r0
            if (willTopic) {
   b5812:	f1b8 0f00 	cmp.w	r8, #0
   b5816:	d00b      	beq.n	b5830 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5818:	69e2      	ldr	r2, [r4, #28]
   b581a:	4641      	mov	r1, r8
   b581c:	4620      	mov	r0, r4
   b581e:	f7ff ff52 	bl	b56c6 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b5822:	69e2      	ldr	r2, [r4, #28]
   b5824:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b5826:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b5828:	4620      	mov	r0, r4
   b582a:	f7ff ff4c 	bl	b56c6 <_ZN4MQTT11writeStringEPKcPht>
   b582e:	4603      	mov	r3, r0
            if(user != NULL) {
   b5830:	b167      	cbz	r7, b584c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5832:	69e2      	ldr	r2, [r4, #28]
   b5834:	4639      	mov	r1, r7
   b5836:	4620      	mov	r0, r4
   b5838:	f7ff ff45 	bl	b56c6 <_ZN4MQTT11writeStringEPKcPht>
   b583c:	4603      	mov	r3, r0
                if(pass != NULL) {
   b583e:	b12e      	cbz	r6, b584c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5840:	69e2      	ldr	r2, [r4, #28]
   b5842:	4631      	mov	r1, r6
   b5844:	4620      	mov	r0, r4
   b5846:	f7ff ff3e 	bl	b56c6 <_ZN4MQTT11writeStringEPKcPht>
   b584a:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b584c:	3b05      	subs	r3, #5
   b584e:	69e2      	ldr	r2, [r4, #28]
   b5850:	b29b      	uxth	r3, r3
   b5852:	2110      	movs	r1, #16
   b5854:	4620      	mov	r0, r4
   b5856:	f7ff fedd 	bl	b5614 <_ZN4MQTT5writeEhPht>
   b585a:	f000 fffd 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b585e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5862:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5866:	4620      	mov	r0, r4
   b5868:	f004 fc18 	bl	ba09c <_ZN9TCPClient9availableEv>
   b586c:	bb88      	cbnz	r0, b58d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b586e:	f000 fff3 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5874:	1ac0      	subs	r0, r0, r3
   b5876:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5878:	4373      	muls	r3, r6
   b587a:	4298      	cmp	r0, r3
   b587c:	d9f3      	bls.n	b5866 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b587e:	4620      	mov	r0, r4
   b5880:	f004 fc66 	bl	ba150 <_ZN9TCPClient4stopEv>
   b5884:	e035      	b.n	b58f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5886:	a802      	add	r0, sp, #8
   b5888:	f004 f888 	bl	b999c <_ZN9IPAddressC1EPKh>
   b588c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5890:	462b      	mov	r3, r5
   b5892:	a902      	add	r1, sp, #8
   b5894:	4620      	mov	r0, r4
   b5896:	f004 fb85 	bl	b9fa4 <_ZN9TCPClient7connectE9IPAddresstm>
    virtual ~IPAddress() {}
   b589a:	e773      	b.n	b5784 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b589c:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b58a0:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b58a4:	7bdb      	ldrb	r3, [r3, #15]
   b58a6:	f10d 0c08 	add.w	ip, sp, #8
   b58aa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b58ae:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b58b2:	ab02      	add	r3, sp, #8
   b58b4:	cb03      	ldmia	r3!, {r0, r1}
   b58b6:	f8c2 0005 	str.w	r0, [r2, #5]
   b58ba:	f8c2 1009 	str.w	r1, [r2, #9]
   b58be:	f89c 3000 	ldrb.w	r3, [ip]
   b58c2:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b58c4:	230e      	movs	r3, #14
   b58c6:	e77a      	b.n	b57be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b58c8:	2002      	movs	r0, #2
   b58ca:	e786      	b.n	b57da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b58cc:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b58d0:	e78d      	b.n	b57ee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b58d2:	a902      	add	r1, sp, #8
   b58d4:	4620      	mov	r0, r4
   b58d6:	f7ff fe4b 	bl	b5570 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b58da:	2804      	cmp	r0, #4
   b58dc:	d1cf      	bne.n	b587e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b58de:	69e3      	ldr	r3, [r4, #28]
   b58e0:	78de      	ldrb	r6, [r3, #3]
   b58e2:	2e00      	cmp	r6, #0
   b58e4:	d1cb      	bne.n	b587e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b58e6:	f000 ffb7 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b58ea:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b58ec:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b58ee:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b58f2:	a801      	add	r0, sp, #4
   b58f4:	f7ff fdd1 	bl	b549a <_ZN4MQTT11MutexLockerD1Ev>
}
   b58f8:	4628      	mov	r0, r5
   b58fa:	b008      	add	sp, #32
   b58fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5900:	2500      	movs	r5, #0
   b5902:	e7f9      	b.n	b58f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b5904:	000bdadb 	.word	0x000bdadb

000b5908 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b5908:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b590a:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b590e:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b5910:	2401      	movs	r4, #1
   b5912:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b5916:	2400      	movs	r4, #0
   b5918:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b591c:	e9cd 4400 	strd	r4, r4, [sp]
   b5920:	f7ff ff10 	bl	b5744 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b5924:	b006      	add	sp, #24
   b5926:	bd10      	pop	{r4, pc}

000b5928 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b592c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b5930:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5934:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b5938:	4604      	mov	r4, r0
   b593a:	468b      	mov	fp, r1
   b593c:	4616      	mov	r6, r2
   b593e:	461f      	mov	r7, r3
    if (isConnected()) {
   b5940:	f7ff fedd 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b5944:	4682      	mov	sl, r0
   b5946:	2800      	cmp	r0, #0
   b5948:	d051      	beq.n	b59ee <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b594a:	4621      	mov	r1, r4
   b594c:	a801      	add	r0, sp, #4
   b594e:	f7ff fd99 	bl	b5484 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b5952:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b5956:	69e0      	ldr	r0, [r4, #28]
   b5958:	2100      	movs	r1, #0
   b595a:	f005 fd0e 	bl	bb37a <memset>
        length = writeString(topic, buffer, length);
   b595e:	2305      	movs	r3, #5
   b5960:	69e2      	ldr	r2, [r4, #28]
   b5962:	4659      	mov	r1, fp
   b5964:	4620      	mov	r0, r4
   b5966:	f7ff feae 	bl	b56c6 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b596a:	1e6b      	subs	r3, r5, #1
   b596c:	2b01      	cmp	r3, #1
   b596e:	d815      	bhi.n	b599c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5970:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5972:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5974:	3101      	adds	r1, #1
   b5976:	b289      	uxth	r1, r1
   b5978:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b597a:	0a09      	lsrs	r1, r1, #8
   b597c:	5419      	strb	r1, [r3, r0]
   b597e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5980:	69e3      	ldr	r3, [r4, #28]
   b5982:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5984:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5986:	3002      	adds	r0, #2
   b5988:	5499      	strb	r1, [r3, r2]
   b598a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b598c:	f1b8 0f00 	cmp.w	r8, #0
   b5990:	d004      	beq.n	b599c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b5992:	8c23      	ldrh	r3, [r4, #32]
   b5994:	1c5a      	adds	r2, r3, #1
   b5996:	8422      	strh	r2, [r4, #32]
   b5998:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b599c:	2100      	movs	r1, #0
   b599e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b59a0:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b59a2:	69e2      	ldr	r2, [r4, #28]
   b59a4:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b59a6:	d90a      	bls.n	b59be <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b59a8:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b59ac:	459c      	cmp	ip, r3
   b59ae:	d906      	bls.n	b59be <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b59b0:	f816 c001 	ldrb.w	ip, [r6, r1]
   b59b4:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b59b8:	3101      	adds	r1, #1
   b59ba:	b289      	uxth	r1, r1
   b59bc:	e7ef      	b.n	b599e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b59be:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b59c2:	2900      	cmp	r1, #0
   b59c4:	bf0c      	ite	eq
   b59c6:	2130      	moveq	r1, #48	; 0x30
   b59c8:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b59ca:	f1b9 0f00 	cmp.w	r9, #0
   b59ce:	d001      	beq.n	b59d4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b59d0:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b59d4:	2d02      	cmp	r5, #2
   b59d6:	d10e      	bne.n	b59f6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b59d8:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b59dc:	3b05      	subs	r3, #5
   b59de:	b29b      	uxth	r3, r3
   b59e0:	4620      	mov	r0, r4
   b59e2:	f7ff fe17 	bl	b5614 <_ZN4MQTT5writeEhPht>
   b59e6:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b59e8:	a801      	add	r0, sp, #4
   b59ea:	f7ff fd56 	bl	b549a <_ZN4MQTT11MutexLockerD1Ev>
}
   b59ee:	4650      	mov	r0, sl
   b59f0:	b003      	add	sp, #12
   b59f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b59f6:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b59f8:	bf08      	it	eq
   b59fa:	f041 0102 	orreq.w	r1, r1, #2
   b59fe:	e7ed      	b.n	b59dc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b5a00 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b5a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b5a02:	9c08      	ldr	r4, [sp, #32]
   b5a04:	9403      	str	r4, [sp, #12]
   b5a06:	2400      	movs	r4, #0
   b5a08:	9402      	str	r4, [sp, #8]
   b5a0a:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b5a0e:	9401      	str	r4, [sp, #4]
   b5a10:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b5a14:	9400      	str	r4, [sp, #0]
   b5a16:	f7ff ff87 	bl	b5928 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b5a1a:	b004      	add	sp, #16
   b5a1c:	bd10      	pop	{r4, pc}

000b5a1e <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b5a1e:	b530      	push	{r4, r5, lr}
   b5a20:	b087      	sub	sp, #28
   b5a22:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5a24:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b5a26:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5a28:	9204      	str	r2, [sp, #16]
   b5a2a:	f005 fd1c 	bl	bb466 <strlen>
   b5a2e:	2500      	movs	r5, #0
   b5a30:	4603      	mov	r3, r0
   b5a32:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5a36:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b5a3a:	9500      	str	r5, [sp, #0]
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	f7ff ffdf 	bl	b5a00 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b5a42:	b007      	add	sp, #28
   b5a44:	bd30      	pop	{r4, r5, pc}

000b5a46 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b5a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a48:	4604      	mov	r4, r0
   b5a4a:	460e      	mov	r6, r1
    if (isConnected()) {
   b5a4c:	f7ff fe57 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b5a50:	4605      	mov	r5, r0
   b5a52:	b1c8      	cbz	r0, b5a88 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5a54:	4621      	mov	r1, r4
   b5a56:	a801      	add	r0, sp, #4
   b5a58:	f7ff fd14 	bl	b5484 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5a5c:	69e3      	ldr	r3, [r4, #28]
   b5a5e:	2262      	movs	r2, #98	; 0x62
   b5a60:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a62:	69e3      	ldr	r3, [r4, #28]
   b5a64:	2202      	movs	r2, #2
   b5a66:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a68:	69e3      	ldr	r3, [r4, #28]
   b5a6a:	0a32      	lsrs	r2, r6, #8
   b5a6c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a6e:	69e3      	ldr	r3, [r4, #28]
   b5a70:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a72:	69e1      	ldr	r1, [r4, #28]
   b5a74:	2204      	movs	r2, #4
   b5a76:	4620      	mov	r0, r4
   b5a78:	f004 f909 	bl	b9c8e <_ZN9TCPClient5writeEPKhj>
   b5a7c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a7e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a80:	bf18      	it	ne
   b5a82:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a84:	f7ff fd09 	bl	b549a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a88:	4628      	mov	r0, r5
   b5a8a:	b002      	add	sp, #8
   b5a8c:	bd70      	pop	{r4, r5, r6, pc}

000b5a8e <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a90:	4604      	mov	r4, r0
   b5a92:	460e      	mov	r6, r1
    if (isConnected()) {
   b5a94:	f7ff fe33 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b5a98:	4605      	mov	r5, r0
   b5a9a:	b1c8      	cbz	r0, b5ad0 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5a9c:	4621      	mov	r1, r4
   b5a9e:	a801      	add	r0, sp, #4
   b5aa0:	f7ff fcf0 	bl	b5484 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5aa4:	69e3      	ldr	r3, [r4, #28]
   b5aa6:	2272      	movs	r2, #114	; 0x72
   b5aa8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5aaa:	69e3      	ldr	r3, [r4, #28]
   b5aac:	2202      	movs	r2, #2
   b5aae:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5ab0:	69e3      	ldr	r3, [r4, #28]
   b5ab2:	0a32      	lsrs	r2, r6, #8
   b5ab4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5ab6:	69e3      	ldr	r3, [r4, #28]
   b5ab8:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5aba:	69e1      	ldr	r1, [r4, #28]
   b5abc:	2204      	movs	r2, #4
   b5abe:	4620      	mov	r0, r4
   b5ac0:	f004 f8e5 	bl	b9c8e <_ZN9TCPClient5writeEPKhj>
   b5ac4:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5ac6:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5ac8:	bf18      	it	ne
   b5aca:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5acc:	f7ff fce5 	bl	b549a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5ad0:	4628      	mov	r0, r5
   b5ad2:	b002      	add	sp, #8
   b5ad4:	bd70      	pop	{r4, r5, r6, pc}

000b5ad6 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5ad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ada:	ed2d 8b02 	vpush	{d8}
   b5ade:	b087      	sub	sp, #28
   b5ae0:	af00      	add	r7, sp, #0
   b5ae2:	4604      	mov	r4, r0
    if (isConnected()) {
   b5ae4:	f7ff fe0b 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b5ae8:	4681      	mov	r9, r0
   b5aea:	b1f8      	cbz	r0, b5b2c <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5aec:	4621      	mov	r1, r4
   b5aee:	f107 0014 	add.w	r0, r7, #20
   b5af2:	f7ff fcc7 	bl	b5484 <_ZN4MQTT11MutexLockerC1EPS_>
   b5af6:	f000 feaf 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5afa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5b00:	4353      	muls	r3, r2
   b5b02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5b04:	1a82      	subs	r2, r0, r2
   b5b06:	429a      	cmp	r2, r3
   b5b08:	4606      	mov	r6, r0
   b5b0a:	d803      	bhi.n	b5b14 <_ZN4MQTT4loopEv+0x3e>
   b5b0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5b0e:	1a82      	subs	r2, r0, r2
   b5b10:	4293      	cmp	r3, r2
   b5b12:	d221      	bcs.n	b5b58 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5b14:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5b18:	b17b      	cbz	r3, b5b3a <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5b1a:	4620      	mov	r0, r4
   b5b1c:	f004 fb18 	bl	ba150 <_ZN9TCPClient4stopEv>
                return false;
   b5b20:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5b24:	f107 0014 	add.w	r0, r7, #20
   b5b28:	f7ff fcb7 	bl	b549a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5b2c:	4648      	mov	r0, r9
   b5b2e:	371c      	adds	r7, #28
   b5b30:	46bd      	mov	sp, r7
   b5b32:	ecbd 8b02 	vpop	{d8}
   b5b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5b3a:	69e2      	ldr	r2, [r4, #28]
   b5b3c:	21c0      	movs	r1, #192	; 0xc0
   b5b3e:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5b40:	69e2      	ldr	r2, [r4, #28]
   b5b42:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5b44:	69e1      	ldr	r1, [r4, #28]
   b5b46:	2202      	movs	r2, #2
   b5b48:	4620      	mov	r0, r4
   b5b4a:	f004 f8a0 	bl	b9c8e <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5b4e:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5b52:	2301      	movs	r3, #1
   b5b54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5b58:	4620      	mov	r0, r4
   b5b5a:	f004 fa9f 	bl	ba09c <_ZN9TCPClient9availableEv>
   b5b5e:	2800      	cmp	r0, #0
   b5b60:	d0e0      	beq.n	b5b24 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5b62:	f107 0113 	add.w	r1, r7, #19
   b5b66:	4620      	mov	r0, r4
   b5b68:	f7ff fd02 	bl	b5570 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5b6c:	4683      	mov	fp, r0
   b5b6e:	2800      	cmp	r0, #0
   b5b70:	d0d8      	beq.n	b5b24 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5b72:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5b74:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5b76:	7819      	ldrb	r1, [r3, #0]
   b5b78:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5b7c:	2a30      	cmp	r2, #48	; 0x30
   b5b7e:	d17f      	bne.n	b5c80 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5b80:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5b84:	f1ba 0f00 	cmp.w	sl, #0
   b5b88:	d0cc      	beq.n	b5b24 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b8a:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5b8e:	466a      	mov	r2, sp
   b5b90:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b94:	eb03 020c 	add.w	r2, r3, ip
   b5b98:	7851      	ldrb	r1, [r2, #1]
   b5b9a:	7895      	ldrb	r5, [r2, #2]
   b5b9c:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5ba0:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5ba2:	f105 0208 	add.w	r2, r5, #8
   b5ba6:	4669      	mov	r1, sp
   b5ba8:	08d2      	lsrs	r2, r2, #3
   b5baa:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5bae:	4695      	mov	sp, r2
   b5bb0:	f10c 0203 	add.w	r2, ip, #3
   b5bb4:	60fa      	str	r2, [r7, #12]
   b5bb6:	eb03 0e02 	add.w	lr, r3, r2
   b5bba:	eb0d 0205 	add.w	r2, sp, r5
   b5bbe:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5bc0:	f8c7 d008 	str.w	sp, [r7, #8]
   b5bc4:	607a      	str	r2, [r7, #4]
   b5bc6:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5bca:	428a      	cmp	r2, r1
   b5bcc:	d006      	beq.n	b5bdc <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5bce:	460a      	mov	r2, r1
   b5bd0:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5bd4:	f802 8b01 	strb.w	r8, [r2], #1
   b5bd8:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5bda:	e7f4      	b.n	b5bc6 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5bdc:	2200      	movs	r2, #0
   b5bde:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5be0:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5be4:	68f9      	ldr	r1, [r7, #12]
   b5be6:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5bea:	ebab 020c 	sub.w	r2, fp, ip
   b5bee:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5bf0:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5bf4:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bf8:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5bfa:	d125      	bne.n	b5c48 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bfc:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5c00:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5c02:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5c04:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5c08:	f10c 0105 	add.w	r1, ip, #5
   b5c0c:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5c0e:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5c10:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5c14:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5c16:	69e3      	ldr	r3, [r4, #28]
   b5c18:	2240      	movs	r2, #64	; 0x40
   b5c1a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5c1c:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5c1e:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5c22:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5c26:	69e3      	ldr	r3, [r4, #28]
   b5c28:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5c2c:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5c2e:	69e3      	ldr	r3, [r4, #28]
   b5c30:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5c34:	69e1      	ldr	r1, [r4, #28]
   b5c36:	2204      	movs	r2, #4
   b5c38:	4620      	mov	r0, r4
   b5c3a:	f004 f828 	bl	b9c8e <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5c3e:	6266      	str	r6, [r4, #36]	; 0x24
   b5c40:	ee18 3a10 	vmov	r3, s16
   b5c44:	469d      	mov	sp, r3
   b5c46:	e76d      	b.n	b5b24 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5c48:	f1b8 0f04 	cmp.w	r8, #4
   b5c4c:	d115      	bne.n	b5c7a <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c4e:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5c52:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c54:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c56:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5c5a:	f10c 0105 	add.w	r1, ip, #5
   b5c5e:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c60:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c62:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c66:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5c68:	69e3      	ldr	r3, [r4, #28]
   b5c6a:	2250      	movs	r2, #80	; 0x50
   b5c6c:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5c6e:	69e3      	ldr	r3, [r4, #28]
   b5c70:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c72:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5c76:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5c78:	e7d5      	b.n	b5c26 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5c7a:	4419      	add	r1, r3
   b5c7c:	47d0      	blx	sl
   b5c7e:	e7df      	b.n	b5c40 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5c80:	2a50      	cmp	r2, #80	; 0x50
   b5c82:	d108      	bne.n	b5c96 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5c84:	789a      	ldrb	r2, [r3, #2]
   b5c86:	78d9      	ldrb	r1, [r3, #3]
   b5c88:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5c8c:	b289      	uxth	r1, r1
   b5c8e:	4620      	mov	r0, r4
   b5c90:	f7ff fed9 	bl	b5a46 <_ZN4MQTT14publishReleaseEt>
   b5c94:	e746      	b.n	b5b24 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5c96:	2a40      	cmp	r2, #64	; 0x40
   b5c98:	d112      	bne.n	b5cc0 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5c9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5c9c:	2a00      	cmp	r2, #0
   b5c9e:	f43f af41 	beq.w	b5b24 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5ca2:	f1bb 0f04 	cmp.w	fp, #4
   b5ca6:	f47f af3d 	bne.w	b5b24 <_ZN4MQTT4loopEv+0x4e>
   b5caa:	f011 0f06 	tst.w	r1, #6
   b5cae:	f47f af39 	bne.w	b5b24 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5cb2:	7899      	ldrb	r1, [r3, #2]
   b5cb4:	78d8      	ldrb	r0, [r3, #3]
   b5cb6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5cba:	b280      	uxth	r0, r0
   b5cbc:	4790      	blx	r2
   b5cbe:	e731      	b.n	b5b24 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5cc0:	2a60      	cmp	r2, #96	; 0x60
   b5cc2:	d108      	bne.n	b5cd6 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5cc4:	789a      	ldrb	r2, [r3, #2]
   b5cc6:	78d9      	ldrb	r1, [r3, #3]
   b5cc8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5ccc:	b289      	uxth	r1, r1
   b5cce:	4620      	mov	r0, r4
   b5cd0:	f7ff fedd 	bl	b5a8e <_ZN4MQTT15publishCompleteEt>
   b5cd4:	e726      	b.n	b5b24 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5cd6:	2a70      	cmp	r2, #112	; 0x70
   b5cd8:	d0df      	beq.n	b5c9a <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5cda:	2a90      	cmp	r2, #144	; 0x90
   b5cdc:	f43f af22 	beq.w	b5b24 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5ce0:	2ac0      	cmp	r2, #192	; 0xc0
   b5ce2:	d10a      	bne.n	b5cfa <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5ce4:	22d0      	movs	r2, #208	; 0xd0
   b5ce6:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5ce8:	69e3      	ldr	r3, [r4, #28]
   b5cea:	2200      	movs	r2, #0
   b5cec:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5cee:	69e1      	ldr	r1, [r4, #28]
   b5cf0:	2202      	movs	r2, #2
   b5cf2:	4620      	mov	r0, r4
   b5cf4:	f003 ffcb 	bl	b9c8e <_ZN9TCPClient5writeEPKhj>
   b5cf8:	e714      	b.n	b5b24 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5cfa:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5cfc:	bf04      	itt	eq
   b5cfe:	2300      	moveq	r3, #0
   b5d00:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5d04:	e70e      	b.n	b5b24 <_ZN4MQTT4loopEv+0x4e>

000b5d06 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5d08:	4604      	mov	r4, r0
   b5d0a:	460f      	mov	r7, r1
   b5d0c:	4616      	mov	r6, r2
    if (isConnected()) {
   b5d0e:	f7ff fcf6 	bl	b56fe <_ZN4MQTT11isConnectedEv>
   b5d12:	4605      	mov	r5, r0
   b5d14:	b310      	cbz	r0, b5d5c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5d16:	4621      	mov	r1, r4
   b5d18:	a801      	add	r0, sp, #4
   b5d1a:	f7ff fbb3 	bl	b5484 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5d1e:	8c23      	ldrh	r3, [r4, #32]
   b5d20:	3301      	adds	r3, #1
   b5d22:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5d24:	b1eb      	cbz	r3, b5d62 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5d26:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5d28:	8c23      	ldrh	r3, [r4, #32]
   b5d2a:	69e2      	ldr	r2, [r4, #28]
   b5d2c:	0a1b      	lsrs	r3, r3, #8
   b5d2e:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5d30:	69e3      	ldr	r3, [r4, #28]
   b5d32:	8c22      	ldrh	r2, [r4, #32]
   b5d34:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5d36:	69e2      	ldr	r2, [r4, #28]
   b5d38:	2307      	movs	r3, #7
   b5d3a:	4639      	mov	r1, r7
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	f7ff fcc2 	bl	b56c6 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5d42:	69e3      	ldr	r3, [r4, #28]
   b5d44:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5d46:	3804      	subs	r0, #4
   b5d48:	b283      	uxth	r3, r0
   b5d4a:	69e2      	ldr	r2, [r4, #28]
   b5d4c:	2182      	movs	r1, #130	; 0x82
   b5d4e:	4620      	mov	r0, r4
   b5d50:	f7ff fc60 	bl	b5614 <_ZN4MQTT5writeEhPht>
   b5d54:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5d56:	a801      	add	r0, sp, #4
   b5d58:	f7ff fb9f 	bl	b549a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5d5c:	4628      	mov	r0, r5
   b5d5e:	b003      	add	sp, #12
   b5d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5d62:	2301      	movs	r3, #1
   b5d64:	e7df      	b.n	b5d26 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5d66 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5d66:	2200      	movs	r2, #0
   b5d68:	f7ff bfcd 	b.w	b5d06 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5d6c <_ZN12mDNSResolver5QueryC1EPKc>:
#include "Query.h"

namespace mDNSResolver {
  Query::Query(const char* name) {
    this->name = name;
   b5d6c:	6001      	str	r1, [r0, #0]
  }
   b5d6e:	4770      	bx	lr

000b5d70 <_ZN12mDNSResolver5QueryD1Ev>:

  Query::~Query() {}
   b5d70:	4770      	bx	lr

000b5d72 <_ZN12mDNSResolver5Query12buildDNSNameEPhj>:
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
    buffer[bufferIndex++] = qclass & 0xFF;
  }

  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
    int wordstart = 0, wordend = 0;
   b5d72:	2300      	movs	r3, #0
  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
   b5d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    int wordstart = 0, wordend = 0;
   b5d76:	461c      	mov	r4, r3

    do {
      if(this->name[wordend] == '.' || this->name[wordend] == '\0') {
   b5d78:	6805      	ldr	r5, [r0, #0]
   b5d7a:	5ced      	ldrb	r5, [r5, r3]
   b5d7c:	2d2e      	cmp	r5, #46	; 0x2e
   b5d7e:	d000      	beq.n	b5d82 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x10>
   b5d80:	b9bd      	cbnz	r5, b5db2 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x40>
        const int wordlen = wordend - wordstart;
   b5d82:	1b1d      	subs	r5, r3, r4
        buffer[bufferIndex++] = (unsigned char)wordlen;
   b5d84:	548d      	strb	r5, [r1, r2]
   b5d86:	f102 0c01 	add.w	ip, r2, #1

        for(int i = wordstart; i < wordend; i++) {
   b5d8a:	4626      	mov	r6, r4
   b5d8c:	440a      	add	r2, r1
   b5d8e:	42b3      	cmp	r3, r6
          buffer[bufferIndex++] = this->name[i];
   b5d90:	6807      	ldr	r7, [r0, #0]
        for(int i = wordstart; i < wordend; i++) {
   b5d92:	dd04      	ble.n	b5d9e <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x2c>
          buffer[bufferIndex++] = this->name[i];
   b5d94:	5dbf      	ldrb	r7, [r7, r6]
   b5d96:	f802 7f01 	strb.w	r7, [r2, #1]!
        for(int i = wordstart; i < wordend; i++) {
   b5d9a:	3601      	adds	r6, #1
   b5d9c:	e7f7      	b.n	b5d8e <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x1c>
   b5d9e:	429c      	cmp	r4, r3
   b5da0:	bfc8      	it	gt
   b5da2:	2500      	movgt	r5, #0
        }

        if(this->name[wordend] == '.') {
   b5da4:	5cfc      	ldrb	r4, [r7, r3]
   b5da6:	2c2e      	cmp	r4, #46	; 0x2e
          wordend++;
   b5da8:	bf08      	it	eq
   b5daa:	3301      	addeq	r3, #1
   b5dac:	eb05 020c 	add.w	r2, r5, ip
        if(this->name[wordend] == '.') {
   b5db0:	461c      	mov	r4, r3
        }
        wordstart = wordend;
      }

      wordend++;
    } while(this->name[wordstart] != '\0');
   b5db2:	6805      	ldr	r5, [r0, #0]
   b5db4:	5d2d      	ldrb	r5, [r5, r4]
      wordend++;
   b5db6:	3301      	adds	r3, #1
    } while(this->name[wordstart] != '\0');
   b5db8:	2d00      	cmp	r5, #0
   b5dba:	d1dd      	bne.n	b5d78 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x6>

    return bufferIndex;
  }
   b5dbc:	4610      	mov	r0, r2
   b5dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5dc0 <_ZN12mDNSResolver5Query14assemblePacketEPhi>:
  void Query::assemblePacket(unsigned char *buffer, int bufferLength) {
   b5dc0:	b538      	push	{r3, r4, r5, lr}
   b5dc2:	460b      	mov	r3, r1
   b5dc4:	4605      	mov	r5, r0
      buffer[i] = 0;
   b5dc6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   b5dca:	4618      	mov	r0, r3
   b5dcc:	2100      	movs	r1, #0
   b5dce:	f005 fad4 	bl	bb37a <memset>
    buffer[5] = 0x01;
   b5dd2:	2401      	movs	r4, #1
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b5dd4:	4601      	mov	r1, r0
    buffer[5] = 0x01;
   b5dd6:	7144      	strb	r4, [r0, #5]
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b5dd8:	220c      	movs	r2, #12
   b5dda:	4628      	mov	r0, r5
   b5ddc:	f7ff ffc9 	bl	b5d72 <_ZN12mDNSResolver5Query12buildDNSNameEPhj>
    buffer[bufferIndex++] = '\0';
   b5de0:	2300      	movs	r3, #0
   b5de2:	540b      	strb	r3, [r1, r0]
    buffer[bufferIndex++] = (qtype & 0xFF00) >> 8;
   b5de4:	4401      	add	r1, r0
   b5de6:	704b      	strb	r3, [r1, #1]
    buffer[bufferIndex++] = qtype & 0xFF;
   b5de8:	708c      	strb	r4, [r1, #2]
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
   b5dea:	70cb      	strb	r3, [r1, #3]
    buffer[bufferIndex++] = qclass & 0xFF;
   b5dec:	710c      	strb	r4, [r1, #4]
  }
   b5dee:	bd38      	pop	{r3, r4, r5, pc}

000b5df0 <_ZN12mDNSResolver5Query10sendPacketER3UDP>:
  void Query::sendPacket(UDP& socket) {
   b5df0:	b5b0      	push	{r4, r5, r7, lr}
   b5df2:	b082      	sub	sp, #8
   b5df4:	4605      	mov	r5, r0
   b5df6:	af00      	add	r7, sp, #0
    int bufferLength = strlen(this->name) + 18;
   b5df8:	6800      	ldr	r0, [r0, #0]
  void Query::sendPacket(UDP& socket) {
   b5dfa:	460c      	mov	r4, r1
    int bufferLength = strlen(this->name) + 18;
   b5dfc:	f005 fb33 	bl	bb466 <strlen>
    unsigned char buffer[bufferLength];
   b5e00:	f100 0319 	add.w	r3, r0, #25
   b5e04:	f023 0307 	bic.w	r3, r3, #7
   b5e08:	ebad 0d03 	sub.w	sp, sp, r3
    int bufferLength = strlen(this->name) + 18;
   b5e0c:	f100 0212 	add.w	r2, r0, #18
    assemblePacket(buffer, bufferLength);
   b5e10:	4669      	mov	r1, sp
   b5e12:	4628      	mov	r0, r5
   b5e14:	607a      	str	r2, [r7, #4]
   b5e16:	f7ff ffd3 	bl	b5dc0 <_ZN12mDNSResolver5Query14assemblePacketEPhi>
    socket.write(buffer, bufferLength);
   b5e1a:	6823      	ldr	r3, [r4, #0]
   b5e1c:	687a      	ldr	r2, [r7, #4]
   b5e1e:	68db      	ldr	r3, [r3, #12]
   b5e20:	4669      	mov	r1, sp
   b5e22:	4620      	mov	r0, r4
   b5e24:	4798      	blx	r3
	socket.endPacket();
   b5e26:	6823      	ldr	r3, [r4, #0]
   b5e28:	4620      	mov	r0, r4
   b5e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e2c:	4798      	blx	r3
  }
   b5e2e:	3708      	adds	r7, #8
   b5e30:	46bd      	mov	sp, r7
   b5e32:	bdb0      	pop	{r4, r5, r7, pc}

000b5e34 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>:
    resolveCnames(cache);

    return answerResult;
  }

  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b5e34:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e36:	b089      	sub	sp, #36	; 0x24
   b5e38:	461c      	mov	r4, r3
   b5e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if(dataLen == 4) {
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5e3c:	6816      	ldr	r6, [r2, #0]
    if(dataLen == 4) {
   b5e3e:	2b04      	cmp	r3, #4
  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b5e40:	4615      	mov	r5, r2
    if(dataLen == 4) {
   b5e42:	d11f      	bne.n	b5e84 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x50>
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5e44:	1c72      	adds	r2, r6, #1
   b5e46:	602a      	str	r2, [r5, #0]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5e48:	1cb3      	adds	r3, r6, #2
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5e4a:	5d81      	ldrb	r1, [r0, r6]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5e4c:	602b      	str	r3, [r5, #0]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5e4e:	1cf7      	adds	r7, r6, #3
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5e50:	5c82      	ldrb	r2, [r0, r2]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5e52:	602f      	str	r7, [r5, #0]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5e54:	3604      	adds	r6, #4
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5e56:	5cc3      	ldrb	r3, [r0, r3]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5e58:	602e      	str	r6, [r5, #0]

      response.resolved = true;
   b5e5a:	2501      	movs	r5, #1
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5e5c:	5dc0      	ldrb	r0, [r0, r7]
      response.resolved = true;
   b5e5e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
      response.ttl = ttl;
   b5e62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b5e64:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
      response.ipAddress = IPAddress(a, b, c, d);
   b5e68:	9000      	str	r0, [sp, #0]
class IPAddress : public Printable {
   b5e6a:	ad03      	add	r5, sp, #12
   b5e6c:	a802      	add	r0, sp, #8
   b5e6e:	f003 fd89 	bl	b9984 <_ZN9IPAddressC1Ehhhh>
   b5e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e74:	f504 7486 	add.w	r4, r4, #268	; 0x10c
   b5e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e7a:	682b      	ldr	r3, [r5, #0]
   b5e7c:	7023      	strb	r3, [r4, #0]
    } else {
      (*offset) += dataLen;
    }

    return E_MDNS_OK;
  }
   b5e7e:	2020      	movs	r0, #32
   b5e80:	b009      	add	sp, #36	; 0x24
   b5e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*offset) += dataLen;
   b5e84:	4433      	add	r3, r6
   b5e86:	6013      	str	r3, [r2, #0]
   b5e88:	e7f9      	b.n	b5e7e <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x4a>

000b5e8a <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>:

    free(assembled);
    return E_MDNS_OK;
  }

  MDNS_RESULT Answer::parseName(char** name, const char* mapped, unsigned int len) {
   b5e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned int namePointer = 0;
    unsigned int mapPointer = 0;
   b5e8e:	2500      	movs	r5, #0
    unsigned int namePointer = 0;
   b5e90:	462b      	mov	r3, r5

      if(labelLength > 0x3f) {
        return E_MDNS_INVALID_LABEL_LENGTH;
      }

      if(namePointer + labelLength > len - 1) {
   b5e92:	f102 3eff 	add.w	lr, r2, #4294967295
        return E_MDNS_PACKET_ERROR;
      }

      if(namePointer != 0) {
        (*name)[namePointer++] = '.';
   b5e96:	f04f 082e 	mov.w	r8, #46	; 0x2e
    while(mapPointer < len) {
   b5e9a:	4295      	cmp	r5, r2
   b5e9c:	d21d      	bcs.n	b5eda <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x50>
      int labelLength = mapped[mapPointer++];
   b5e9e:	5d4c      	ldrb	r4, [r1, r5]
      if(labelLength > 0x3f) {
   b5ea0:	2c3f      	cmp	r4, #63	; 0x3f
      int labelLength = mapped[mapPointer++];
   b5ea2:	eb01 0705 	add.w	r7, r1, r5
      if(labelLength > 0x3f) {
   b5ea6:	dc20      	bgt.n	b5eea <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x60>
      if(namePointer + labelLength > len - 1) {
   b5ea8:	18e6      	adds	r6, r4, r3
   b5eaa:	4576      	cmp	r6, lr
   b5eac:	d81f      	bhi.n	b5eee <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x64>
      if(namePointer != 0) {
   b5eae:	b11b      	cbz	r3, b5eb8 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x2e>
        (*name)[namePointer++] = '.';
   b5eb0:	6806      	ldr	r6, [r0, #0]
   b5eb2:	f806 8003 	strb.w	r8, [r6, r3]
   b5eb6:	3301      	adds	r3, #1
   b5eb8:	46ba      	mov	sl, r7
   b5eba:	2600      	movs	r6, #0
      }

      for(int i = 0; i < labelLength; i++) {
   b5ebc:	42a6      	cmp	r6, r4
   b5ebe:	eb06 0c03 	add.w	ip, r6, r3
   b5ec2:	db03      	blt.n	b5ecc <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x42>
   b5ec4:	4423      	add	r3, r4
   b5ec6:	3401      	adds	r4, #1
   b5ec8:	4425      	add	r5, r4
   b5eca:	e7e6      	b.n	b5e9a <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x10>
        (*name)[namePointer++] = mapped[mapPointer++];
   b5ecc:	6807      	ldr	r7, [r0, #0]
   b5ece:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
   b5ed2:	f807 900c 	strb.w	r9, [r7, ip]
      for(int i = 0; i < labelLength; i++) {
   b5ed6:	3601      	adds	r6, #1
   b5ed8:	e7f0      	b.n	b5ebc <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x32>
      }
    }

    (*name)[len - 1] = '\0';
   b5eda:	6803      	ldr	r3, [r0, #0]
   b5edc:	441a      	add	r2, r3
   b5ede:	2300      	movs	r3, #0
   b5ee0:	f802 3c01 	strb.w	r3, [r2, #-1]

    return E_MDNS_OK;
   b5ee4:	2020      	movs	r0, #32
  }
   b5ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return E_MDNS_INVALID_LABEL_LENGTH;
   b5eea:	2026      	movs	r0, #38	; 0x26
   b5eec:	e7fb      	b.n	b5ee6 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>
        return E_MDNS_PACKET_ERROR;
   b5eee:	2023      	movs	r0, #35	; 0x23
   b5ef0:	e7f9      	b.n	b5ee6 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>

000b5ef2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name, unsigned int maxlen) {
   b5ef2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5ef6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    unsigned int index = 0;
   b5ef8:	2500      	movs	r5, #0
    unsigned int nameLength = 0;

    while(index < maxlen) {
   b5efa:	42a5      	cmp	r5, r4
   b5efc:	d025      	beq.n	b5f4a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b5efe:	6816      	ldr	r6, [r2, #0]
   b5f00:	f810 8006 	ldrb.w	r8, [r0, r6]
   b5f04:	f008 0cc0 	and.w	ip, r8, #192	; 0xc0
   b5f08:	f1bc 0fc0 	cmp.w	ip, #192	; 0xc0
   b5f0c:	eb00 0e06 	add.w	lr, r0, r6
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5f10:	f106 0701 	add.w	r7, r6, #1
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b5f14:	d120      	bne.n	b5f58 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x66>
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5f16:	6017      	str	r7, [r2, #0]
   b5f18:	f89e 4000 	ldrb.w	r4, [lr]
   b5f1c:	3602      	adds	r6, #2
   b5f1e:	6016      	str	r6, [r2, #0]
   b5f20:	5dc2      	ldrb	r2, [r0, r7]
   b5f22:	0224      	lsls	r4, r4, #8
   b5f24:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
   b5f28:	4414      	add	r4, r2
        if(pointerOffset > len) {
   b5f2a:	428c      	cmp	r4, r1
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5f2c:	9402      	str	r4, [sp, #8]
        if(pointerOffset > len) {
   b5f2e:	d80e      	bhi.n	b5f4e <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x5c>
          // Points to somewhere beyond the packet
          return -1 * E_MDNS_POINTER_OVERFLOW;
        }

        char *namePointer = *name + nameLength;
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	442b      	add	r3, r5
   b5f34:	9303      	str	r3, [sp, #12]
        int pointerLen = assembleName(buffer, len, &pointerOffset, &namePointer, MDNS_MAX_NAME_LEN - nameLength);
   b5f36:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
   b5f3a:	9300      	str	r3, [sp, #0]
   b5f3c:	aa02      	add	r2, sp, #8
   b5f3e:	ab03      	add	r3, sp, #12
   b5f40:	f7ff ffd7 	bl	b5ef2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>

        if(pointerLen < 0) {
   b5f44:	2800      	cmp	r0, #0
   b5f46:	db04      	blt.n	b5f52 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return pointerLen;
        }

        nameLength += pointerLen;
   b5f48:	1944      	adds	r4, r0, r5
        (*name)[nameLength++] = buffer[(*offset)++];
      }
      index++;
    }

    return nameLength;
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	e001      	b.n	b5f52 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return -1 * E_MDNS_POINTER_OVERFLOW;
   b5f4e:	f06f 0021 	mvn.w	r0, #33	; 0x21
  }
   b5f52:	b004      	add	sp, #16
   b5f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (*name)[nameLength++] = buffer[(*offset)++];
   b5f58:	f105 0c01 	add.w	ip, r5, #1
   b5f5c:	6017      	str	r7, [r2, #0]
      } else if(buffer[*offset] == '\0') {
   b5f5e:	f1b8 0f00 	cmp.w	r8, #0
   b5f62:	d105      	bne.n	b5f70 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x7e>
        (*name)[nameLength++] = buffer[(*offset)++];
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	f89e 2000 	ldrb.w	r2, [lr]
   b5f6a:	555a      	strb	r2, [r3, r5]
   b5f6c:	4664      	mov	r4, ip
        break;
   b5f6e:	e7ec      	b.n	b5f4a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
        (*name)[nameLength++] = buffer[(*offset)++];
   b5f70:	5d87      	ldrb	r7, [r0, r6]
   b5f72:	681e      	ldr	r6, [r3, #0]
   b5f74:	5577      	strb	r7, [r6, r5]
        (*name)[nameLength++] = buffer[(*offset)++];
   b5f76:	4665      	mov	r5, ip
    while(index < maxlen) {
   b5f78:	e7bf      	b.n	b5efa <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x8>

000b5f7a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name) {
   b5f7a:	b513      	push	{r0, r1, r4, lr}
    return assembleName(buffer, len, offset, name, MDNS_MAX_NAME_LEN);
   b5f7c:	24ff      	movs	r4, #255	; 0xff
   b5f7e:	9400      	str	r4, [sp, #0]
   b5f80:	f7ff ffb7 	bl	b5ef2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
  }
   b5f84:	b002      	add	sp, #8
   b5f86:	bd10      	pop	{r4, pc}

000b5f88 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>:
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b5f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f8c:	4605      	mov	r5, r0
   b5f8e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b5f92:	20ff      	movs	r0, #255	; 0xff
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b5f94:	4688      	mov	r8, r1
   b5f96:	4614      	mov	r4, r2
   b5f98:	461e      	mov	r6, r3
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b5f9a:	f000 ff73 	bl	b6e84 <malloc>
   b5f9e:	9004      	str	r0, [sp, #16]
    if(assembled == NULL) {
   b5fa0:	b1b8      	cbz	r0, b5fd2 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4a>
    int nameLen = Answer::assembleName(buffer, len, offset, &assembled);
   b5fa2:	ab04      	add	r3, sp, #16
   b5fa4:	4622      	mov	r2, r4
   b5fa6:	4641      	mov	r1, r8
   b5fa8:	4628      	mov	r0, r5
   b5faa:	f7ff ffe6 	bl	b5f7a <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>
    if(nameLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b5fae:	f110 0f22 	cmn.w	r0, #34	; 0x22
   b5fb2:	d107      	bne.n	b5fc4 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x3c>
        free(assembled);
   b5fb4:	9804      	ldr	r0, [sp, #16]
   b5fb6:	f000 ff6d 	bl	b6e94 <free>
        return -1 * dataLen;
   b5fba:	2022      	movs	r0, #34	; 0x22
  }
   b5fbc:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   b5fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    char *name = (char *)malloc(sizeof(char) * nameLen);
   b5fc4:	f000 ff5e 	bl	b6e84 <malloc>
   b5fc8:	9005      	str	r0, [sp, #20]
    if(name == NULL) {
   b5fca:	b920      	cbnz	r0, b5fd6 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4e>
      free(assembled);
   b5fcc:	9804      	ldr	r0, [sp, #16]
   b5fce:	f000 ff61 	bl	b6e94 <free>
      return E_MDNS_OUT_OF_MEMORY;
   b5fd2:	2027      	movs	r0, #39	; 0x27
   b5fd4:	e7f2      	b.n	b5fbc <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    parseName(&name, assembled, strlen(assembled));
   b5fd6:	9904      	ldr	r1, [sp, #16]
   b5fd8:	9103      	str	r1, [sp, #12]
   b5fda:	4608      	mov	r0, r1
   b5fdc:	f005 fa43 	bl	bb466 <strlen>
   b5fe0:	9903      	ldr	r1, [sp, #12]
   b5fe2:	4602      	mov	r2, r0
   b5fe4:	a805      	add	r0, sp, #20
   b5fe6:	f7ff ff50 	bl	b5e8a <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
    int cacheIndex = cache.search(name);
   b5fea:	9905      	ldr	r1, [sp, #20]
   b5fec:	4630      	mov	r0, r6
   b5fee:	f000 f987 	bl	b6300 <_ZN12mDNSResolver5Cache6searchEPKc>
   b5ff2:	4607      	mov	r7, r0
    free(name);
   b5ff4:	9805      	ldr	r0, [sp, #20]
   b5ff6:	f000 ff4d 	bl	b6e94 <free>
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5ffa:	6822      	ldr	r2, [r4, #0]
   b5ffc:	1c53      	adds	r3, r2, #1
   b5ffe:	6023      	str	r3, [r4, #0]
   b6000:	1c91      	adds	r1, r2, #2
   b6002:	5ca8      	ldrb	r0, [r5, r2]
   b6004:	6021      	str	r1, [r4, #0]
   b6006:	5ce9      	ldrb	r1, [r5, r3]
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b6008:	1d53      	adds	r3, r2, #5
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b600a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b600e:	18a8      	adds	r0, r5, r2
   b6010:	6023      	str	r3, [r4, #0]
   b6012:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6016:	1d90      	adds	r0, r2, #6
   b6018:	6020      	str	r0, [r4, #0]
   b601a:	5ceb      	ldrb	r3, [r5, r3]
   b601c:	041b      	lsls	r3, r3, #16
   b601e:	eb03 630c 	add.w	r3, r3, ip, lsl #24
   b6022:	f102 0c07 	add.w	ip, r2, #7
   b6026:	f8c4 c000 	str.w	ip, [r4]
   b602a:	5c28      	ldrb	r0, [r5, r0]
   b602c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
   b6030:	f102 0008 	add.w	r0, r2, #8
   b6034:	6020      	str	r0, [r4, #0]
   b6036:	f815 900c 	ldrb.w	r9, [r5, ip]
   b603a:	4499      	add	r9, r3
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b603c:	f102 0309 	add.w	r3, r2, #9
   b6040:	6023      	str	r3, [r4, #0]
   b6042:	320a      	adds	r2, #10
   b6044:	5c28      	ldrb	r0, [r5, r0]
   b6046:	6022      	str	r2, [r4, #0]
   b6048:	f815 a003 	ldrb.w	sl, [r5, r3]
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b604c:	2901      	cmp	r1, #1
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b604e:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b6052:	d112      	bne.n	b607a <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xf2>
   b6054:	1c78      	adds	r0, r7, #1
   b6056:	d077      	beq.n	b6148 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      resolveAName(buffer, len, offset, cache[cacheIndex], ttl, dataLen);
   b6058:	4639      	mov	r1, r7
   b605a:	4630      	mov	r0, r6
   b605c:	f000 f94b 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b6060:	e9cd 9a00 	strd	r9, sl, [sp]
   b6064:	4603      	mov	r3, r0
   b6066:	4622      	mov	r2, r4
   b6068:	4641      	mov	r1, r8
   b606a:	4628      	mov	r0, r5
   b606c:	f7ff fee2 	bl	b5e34 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>
    free(assembled);
   b6070:	9804      	ldr	r0, [sp, #16]
   b6072:	f000 ff0f 	bl	b6e94 <free>
    return E_MDNS_OK;
   b6076:	2020      	movs	r0, #32
   b6078:	e7a0      	b.n	b5fbc <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    } else if(type == MDNS_CNAME_RECORD && cacheIndex != -1) {
   b607a:	2905      	cmp	r1, #5
   b607c:	d164      	bne.n	b6148 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
   b607e:	1c79      	adds	r1, r7, #1
   b6080:	d062      	beq.n	b6148 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      cache[cacheIndex].resolved = false;
   b6082:	4639      	mov	r1, r7
   b6084:	4630      	mov	r0, r6
   b6086:	f000 f936 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b608a:	2300      	movs	r3, #0
   b608c:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
      cache[cacheIndex].ttl = ttl;
   b6090:	4639      	mov	r1, r7
   b6092:	4630      	mov	r0, r6
   b6094:	f000 f92f 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b6098:	f8c0 9100 	str.w	r9, [r0, #256]	; 0x100
      unsigned int dataOffset = (*offset);
   b609c:	6823      	ldr	r3, [r4, #0]
   b609e:	9306      	str	r3, [sp, #24]
      (*offset) += dataLen;
   b60a0:	4453      	add	r3, sl
   b60a2:	6023      	str	r3, [r4, #0]
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b60a4:	4628      	mov	r0, r5
   b60a6:	f8cd a000 	str.w	sl, [sp]
   b60aa:	ab04      	add	r3, sp, #16
   b60ac:	aa06      	add	r2, sp, #24
   b60ae:	4641      	mov	r1, r8
   b60b0:	f7ff ff1f 	bl	b5ef2 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b60b4:	f110 0f22 	cmn.w	r0, #34	; 0x22
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b60b8:	4605      	mov	r5, r0
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b60ba:	f43f af7b 	beq.w	b5fb4 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x2c>
      Response r;
   b60be:	ac08      	add	r4, sp, #32
   b60c0:	4620      	mov	r0, r4
   b60c2:	f000 f9e1 	bl	b6488 <_ZN12mDNSResolver8ResponseC1Ev>
      parseName(&responseName, assembled, dataLen - 1);
   b60c6:	9904      	ldr	r1, [sp, #16]
      char* responseName = &*r.name;
   b60c8:	9407      	str	r4, [sp, #28]
      parseName(&responseName, assembled, dataLen - 1);
   b60ca:	1e6a      	subs	r2, r5, #1
   b60cc:	a807      	add	r0, sp, #28
   b60ce:	f7ff fedc 	bl	b5e8a <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
      int cnameIndex = cache.search(r);
   b60d2:	4621      	mov	r1, r4
   b60d4:	4630      	mov	r0, r6
   b60d6:	f000 f92b 	bl	b6330 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      if(cnameIndex == -1) {
   b60da:	1c43      	adds	r3, r0, #1
   b60dc:	d125      	bne.n	b612a <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1a2>
#include "Constants.h"
#include "Particle.h"
// #include <mDNSResolver/IPAddress.h>

namespace mDNSResolver {
  class Response {
   b60de:	f44f 7280 	mov.w	r2, #256	; 0x100
   b60e2:	4621      	mov	r1, r4
   b60e4:	a851      	add	r0, sp, #324	; 0x144
   b60e6:	f005 f920 	bl	bb32a <memcpy>
   b60ea:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   b60ee:	9391      	str	r3, [sp, #580]	; 0x244
   b60f0:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   b60f4:	f88d 3248 	strb.w	r3, [sp, #584]	; 0x248
   b60f8:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   b60fc:	4b14      	ldr	r3, [pc, #80]	; (b6150 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c8>)
   b60fe:	9393      	str	r3, [sp, #588]	; 0x24c
   b6100:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6104:	ad94      	add	r5, sp, #592	; 0x250
   b6106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6108:	f8dc 3000 	ldr.w	r3, [ip]
   b610c:	702b      	strb	r3, [r5, #0]
        cache.insert(r);
   b610e:	a951      	add	r1, sp, #324	; 0x144
   b6110:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   b6114:	9399      	str	r3, [sp, #612]	; 0x264
   b6116:	4630      	mov	r0, r6
   b6118:	f000 f957 	bl	b63ca <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b611c:	a851      	add	r0, sp, #324	; 0x144
   b611e:	f000 f9e7 	bl	b64f0 <_ZN12mDNSResolver8ResponseD1Ev>
        cnameIndex = cache.search(r);
   b6122:	4621      	mov	r1, r4
   b6124:	4630      	mov	r0, r6
   b6126:	f000 f903 	bl	b6330 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b612a:	4601      	mov	r1, r0
   b612c:	4630      	mov	r0, r6
   b612e:	f000 f8e2 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b6132:	4639      	mov	r1, r7
   b6134:	4605      	mov	r5, r0
   b6136:	4630      	mov	r0, r6
   b6138:	f000 f8dd 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b613c:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
      Response r;
   b6140:	4620      	mov	r0, r4
   b6142:	f000 f9d5 	bl	b64f0 <_ZN12mDNSResolver8ResponseD1Ev>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b6146:	e793      	b.n	b6070 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
      (*offset) += dataLen;
   b6148:	4452      	add	r2, sl
   b614a:	6022      	str	r2, [r4, #0]
   b614c:	e790      	b.n	b6070 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
   b614e:	bf00      	nop
   b6150:	000bddfc 	.word	0x000bddfc

000b6154 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>:

  // Work out how many bytes are dedicated to questions. Since we aren't answering questions, they can be skipped
  // buffer: The mDNS packet we are parsing
  // len: Length of the packet
  // offset: the byte we are up to in the parsing process
  MDNS_RESULT Answer::skipQuestions(unsigned char* buffer, unsigned int len, unsigned int* offset) {
   b6154:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int questionCount = (buffer[4] << 8) + buffer[5];
   b6156:	7903      	ldrb	r3, [r0, #4]
   b6158:	7946      	ldrb	r6, [r0, #5]
   b615a:	eb06 2603 	add.w	r6, r6, r3, lsl #8

    *offset += 12;
   b615e:	6813      	ldr	r3, [r2, #0]
   b6160:	330c      	adds	r3, #12
   b6162:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b6164:	2500      	movs	r5, #0
   b6166:	42ae      	cmp	r6, r5
   b6168:	d016      	beq.n	b6198 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x44>

      while(buffer[*offset] != '\0') {
   b616a:	6813      	ldr	r3, [r2, #0]
   b616c:	5cc4      	ldrb	r4, [r0, r3]
   b616e:	b12c      	cbz	r4, b617c <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x28>
        // If it's a pointer, add two to the counter
        if((buffer[*offset] & 0xc0) == 0xc0) {
   b6170:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   b6174:	2fc0      	cmp	r7, #192	; 0xc0
   b6176:	d106      	bne.n	b6186 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x32>
          (*offset) += 2;
   b6178:	3302      	adds	r3, #2
   b617a:	6013      	str	r3, [r2, #0]
            return E_MDNS_PACKET_ERROR;
          }
        }
      }

      (*offset) += 5; // 2 bytes for the qtypes and 2 bytes qclass + plus one to land us on the next bit
   b617c:	6813      	ldr	r3, [r2, #0]
   b617e:	3305      	adds	r3, #5
   b6180:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b6182:	3501      	adds	r5, #1
   b6184:	e7ef      	b.n	b6166 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x12>
          if(labelLength > 0x3f) {
   b6186:	2c3f      	cmp	r4, #63	; 0x3f
   b6188:	d80c      	bhi.n	b61a4 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x50>
          (*offset) += 1; // Increment to move to the next byte
   b618a:	3301      	adds	r3, #1
          (*offset) += labelLength;
   b618c:	4423      	add	r3, r4
          if(*offset > len) {
   b618e:	428b      	cmp	r3, r1
          (*offset) += labelLength;
   b6190:	6013      	str	r3, [r2, #0]
          if(*offset > len) {
   b6192:	d9ea      	bls.n	b616a <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x16>
    }

    if(*offset > len + 1) {
      return E_MDNS_PACKET_ERROR;
   b6194:	2023      	movs	r0, #35	; 0x23
    }

    return E_MDNS_OK;
  }
   b6196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*offset > len + 1) {
   b6198:	6813      	ldr	r3, [r2, #0]
   b619a:	3101      	adds	r1, #1
   b619c:	428b      	cmp	r3, r1
   b619e:	d8f9      	bhi.n	b6194 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x40>
    return E_MDNS_OK;
   b61a0:	2020      	movs	r0, #32
   b61a2:	e7f8      	b.n	b6196 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>
            return E_MDNS_INVALID_LABEL_LENGTH;
   b61a4:	2026      	movs	r0, #38	; 0x26
   b61a6:	e7f6      	b.n	b6196 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>

000b61a8 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>:

  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b61a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for(int i = 0; i < cache.length(); i++) {
   b61ac:	2400      	movs	r4, #0
  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b61ae:	4605      	mov	r5, r0
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
        cache[i].ipAddress = cache[i].cname->ipAddress;
        cache[i].resolved = true;
   b61b0:	f04f 0801 	mov.w	r8, #1
        cache[i].cname = NULL;
   b61b4:	46a1      	mov	r9, r4
    for(int i = 0; i < cache.length(); i++) {
   b61b6:	4628      	mov	r0, r5
   b61b8:	f000 f8bc 	bl	b6334 <_ZN12mDNSResolver5Cache6lengthEv>
   b61bc:	42a0      	cmp	r0, r4
   b61be:	dd2f      	ble.n	b6220 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x78>
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
   b61c0:	4621      	mov	r1, r4
   b61c2:	4628      	mov	r0, r5
   b61c4:	f000 f897 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b61c8:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b61cc:	b333      	cbz	r3, b621c <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
   b61ce:	4621      	mov	r1, r4
   b61d0:	4628      	mov	r0, r5
   b61d2:	f000 f890 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b61d6:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b61da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
   b61de:	b1eb      	cbz	r3, b621c <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
        cache[i].ipAddress = cache[i].cname->ipAddress;
   b61e0:	4621      	mov	r1, r4
   b61e2:	4628      	mov	r0, r5
   b61e4:	f000 f887 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b61e8:	4621      	mov	r1, r4
   b61ea:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   b61ee:	4628      	mov	r0, r5
   b61f0:	f000 f881 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b61f4:	f507 7786 	add.w	r7, r7, #268	; 0x10c
   b61f8:	f500 7686 	add.w	r6, r0, #268	; 0x10c
   b61fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b61fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6200:	683b      	ldr	r3, [r7, #0]
   b6202:	7033      	strb	r3, [r6, #0]
        cache[i].resolved = true;
   b6204:	4621      	mov	r1, r4
   b6206:	4628      	mov	r0, r5
   b6208:	f000 f875 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
        cache[i].cname = NULL;
   b620c:	4621      	mov	r1, r4
        cache[i].resolved = true;
   b620e:	f880 8104 	strb.w	r8, [r0, #260]	; 0x104
        cache[i].cname = NULL;
   b6212:	4628      	mov	r0, r5
   b6214:	f000 f86f 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b6218:	f8c0 9120 	str.w	r9, [r0, #288]	; 0x120
    for(int i = 0; i < cache.length(); i++) {
   b621c:	3401      	adds	r4, #1
   b621e:	e7ca      	b.n	b61b6 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0xe>
      }
    }
    return E_MDNS_OK;
  }
   b6220:	2020      	movs	r0, #32
   b6222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6226 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>:
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b6226:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b622a:	4691      	mov	r9, r2
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b622c:	f990 2002 	ldrsb.w	r2, [r0, #2]
   b6230:	7883      	ldrb	r3, [r0, #2]
   b6232:	2a00      	cmp	r2, #0
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b6234:	4606      	mov	r6, r0
   b6236:	4688      	mov	r8, r1
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b6238:	da28      	bge.n	b628c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    if(buffer[2] & 0b00000010) {
   b623a:	079b      	lsls	r3, r3, #30
   b623c:	d422      	bmi.n	b6284 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x5e>
    if (buffer[3] & 0b00001111) {
   b623e:	78c5      	ldrb	r5, [r0, #3]
   b6240:	f015 050f 	ands.w	r5, r5, #15
   b6244:	d120      	bne.n	b6288 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x62>
    unsigned int answerCount = (buffer[6] << 8) + buffer[7];
   b6246:	7983      	ldrb	r3, [r0, #6]
   b6248:	79c7      	ldrb	r7, [r0, #7]
    if(answerCount == 0) {
   b624a:	eb17 2703 	adds.w	r7, r7, r3, lsl #8
   b624e:	d01d      	beq.n	b628c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b6250:	aa01      	add	r2, sp, #4
    unsigned int offset = 0;
   b6252:	9501      	str	r5, [sp, #4]
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b6254:	f7ff ff7e 	bl	b6154 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>
    if(questionResult != E_MDNS_OK) {
   b6258:	2820      	cmp	r0, #32
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b625a:	4604      	mov	r4, r0
    if(questionResult != E_MDNS_OK) {
   b625c:	d10e      	bne.n	b627c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      answerResult = resolve(buffer, len, &offset, cache);
   b625e:	464b      	mov	r3, r9
   b6260:	aa01      	add	r2, sp, #4
   b6262:	4641      	mov	r1, r8
   b6264:	4630      	mov	r0, r6
   b6266:	f7ff fe8f 	bl	b5f88 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>
      if(answerResult != E_MDNS_OK) {
   b626a:	2820      	cmp	r0, #32
      answerResult = resolve(buffer, len, &offset, cache);
   b626c:	4604      	mov	r4, r0
      if(answerResult != E_MDNS_OK) {
   b626e:	d105      	bne.n	b627c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
    for(int i = 0; i < answerCount; i++) {
   b6270:	3501      	adds	r5, #1
   b6272:	42af      	cmp	r7, r5
   b6274:	d1f3      	bne.n	b625e <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x38>
    resolveCnames(cache);
   b6276:	4648      	mov	r0, r9
   b6278:	f7ff ff96 	bl	b61a8 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>
  }
   b627c:	4620      	mov	r0, r4
   b627e:	b003      	add	sp, #12
   b6280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return E_MDNS_TRUNCATED;
   b6284:	2425      	movs	r4, #37	; 0x25
   b6286:	e7f9      	b.n	b627c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_PACKET_ERROR;
   b6288:	2423      	movs	r4, #35	; 0x23
   b628a:	e7f7      	b.n	b627c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_OK;
   b628c:	2420      	movs	r4, #32
   b628e:	e7f5      	b.n	b627c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>

000b6290 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>:
   b6290:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6292:	1e4a      	subs	r2, r1, #1
   b6294:	460d      	mov	r5, r1
   b6296:	4604      	mov	r4, r0
   b6298:	4603      	mov	r3, r0
   b629a:	f500 7180 	add.w	r1, r0, #256	; 0x100
   b629e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   b62a2:	f803 0b01 	strb.w	r0, [r3], #1
   b62a6:	428b      	cmp	r3, r1
   b62a8:	d1f9      	bne.n	b629e <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0+0xe>
   b62aa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b62ae:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   b62b2:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   b62b6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   b62ba:	f505 7786 	add.w	r7, r5, #268	; 0x10c
   b62be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b62c0:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   b62c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b62c6:	683b      	ldr	r3, [r7, #0]
   b62c8:	7033      	strb	r3, [r6, #0]
   b62ca:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   b62ce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   b62d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b62d4 <_ZN12mDNSResolver5CacheC1Ev>:
=======
   b5270:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b5272:	4b3b      	ldr	r3, [pc, #236]	; (b5360 <_GLOBAL__sub_I_argonName+0x2a4>)
   b5274:	4a3b      	ldr	r2, [pc, #236]	; (b5364 <_GLOBAL__sub_I_argonName+0x2a8>)
   b5276:	601a      	str	r2, [r3, #0]
   b5278:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b527c:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5280:	ae0c      	add	r6, sp, #48	; 0x30
   b5282:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5286:	e892 0003 	ldmia.w	r2, {r0, r1}
   b528a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b528e:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5292:	e882 0003 	stmia.w	r2, {r0, r1}
   b5296:	4a34      	ldr	r2, [pc, #208]	; (b5368 <_GLOBAL__sub_I_argonName+0x2ac>)
   b5298:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b529a:	699a      	ldr	r2, [r3, #24]
   b529c:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b529e:	4a33      	ldr	r2, [pc, #204]	; (b536c <_GLOBAL__sub_I_argonName+0x2b0>)
   b52a0:	619a      	str	r2, [r3, #24]
   b52a2:	711c      	strb	r4, [r3, #4]
   b52a4:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b52a6:	4a32      	ldr	r2, [pc, #200]	; (b5370 <_GLOBAL__sub_I_argonName+0x2b4>)
      __a = _GLIBCXX_MOVE(__b);
   b52a8:	9410      	str	r4, [sp, #64]	; 0x40
   b52aa:	f103 0008 	add.w	r0, r3, #8
   b52ae:	f64e 2160 	movw	r1, #60000	; 0xea60
   b52b2:	e9cd 8400 	strd	r8, r4, [sp]
   b52b6:	f000 f9c3 	bl	b5640 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b52ba:	4628      	mov	r0, r5
   b52bc:	f7ff f88c 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
UDP udp;
   b52c0:	492c      	ldr	r1, [pc, #176]	; (b5374 <_GLOBAL__sub_I_argonName+0x2b8>)
   b52c2:	4608      	mov	r0, r1
   b52c4:	f000 ff52 	bl	b616c <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b52c8:	492a      	ldr	r1, [pc, #168]	; (b5374 <_GLOBAL__sub_I_argonName+0x2b8>)
   b52ca:	482b      	ldr	r0, [pc, #172]	; (b5378 <_GLOBAL__sub_I_argonName+0x2bc>)
   b52cc:	f000 f891 	bl	b53f2 <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b52d0:	4621      	mov	r1, r4
   b52d2:	4640      	mov	r0, r8
   b52d4:	b013      	add	sp, #76	; 0x4c
   b52d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b52da:	f000 bb29 	b.w	b5930 <system_thread_set_state>
   b52de:	bf00      	nop
   b52e0:	2003dc28 	.word	0x2003dc28
   b52e4:	2003dbb0 	.word	0x2003dbb0
   b52e8:	2003d978 	.word	0x2003d978
   b52ec:	2003d97c 	.word	0x2003d97c
   b52f0:	2003d95c 	.word	0x2003d95c
   b52f4:	2003d954 	.word	0x2003d954
   b52f8:	2003d958 	.word	0x2003d958
   b52fc:	2003dbec 	.word	0x2003dbec
   b5300:	2003d960 	.word	0x2003d960
   b5304:	2003dbd8 	.word	0x2003dbd8
   b5308:	2003d964 	.word	0x2003d964
   b530c:	2003dc14 	.word	0x2003dc14
   b5310:	000bbcae 	.word	0x000bbcae
   b5314:	2003db84 	.word	0x2003db84
   b5318:	000bbcb7 	.word	0x000bbcb7
   b531c:	2003db74 	.word	0x2003db74
   b5320:	000bbcc5 	.word	0x000bbcc5
   b5324:	2003db64 	.word	0x2003db64
   b5328:	000bbccf 	.word	0x000bbccf
   b532c:	2003db6c 	.word	0x2003db6c
   b5330:	000bbcdc 	.word	0x000bbcdc
   b5334:	2003db8c 	.word	0x2003db8c
   b5338:	000bbce6 	.word	0x000bbce6
   b533c:	2003db94 	.word	0x2003db94
   b5340:	2003dca4 	.word	0x2003dca4
   b5344:	000bbc7e 	.word	0x000bbc7e
   b5348:	2003dcac 	.word	0x2003dcac
   b534c:	2003dcbc 	.word	0x2003dcbc
   b5350:	2003dccc 	.word	0x2003dccc
   b5354:	2003e1bc 	.word	0x2003e1bc
   b5358:	2003e1d0 	.word	0x2003e1d0
   b535c:	000b41c1 	.word	0x000b41c1
   b5360:	2003e150 	.word	0x2003e150
   b5364:	000bbcfc 	.word	0x000bbcfc
   b5368:	000b4167 	.word	0x000b4167
   b536c:	000b417b 	.word	0x000b417b
   b5370:	000b412d 	.word	0x000b412d
   b5374:	2003e16c 	.word	0x2003e16c
   b5378:	2003dcdc 	.word	0x2003dcdc
   b537c:	2003db9c 	.word	0x2003db9c
   b5380:	2003dc00 	.word	0x2003dc00
   b5384:	2003dbc4 	.word	0x2003dbc4

000b5388 <_ZN12mDNSResolver5CacheC1Ev>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
<<<<<<< HEAD
   b62d4:	b570      	push	{r4, r5, r6, lr}
   b62d6:	4604      	mov	r4, r0
   b62d8:	4605      	mov	r5, r0
   b62da:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b62de:	4628      	mov	r0, r5
   b62e0:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b62e4:	f000 f8d0 	bl	b6488 <_ZN12mDNSResolver8ResponseC1Ev>
   b62e8:	42ae      	cmp	r6, r5
   b62ea:	d1f8      	bne.n	b62de <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b62ec:	2300      	movs	r3, #0
   b62ee:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b62f2:	4620      	mov	r0, r4
   b62f4:	bd70      	pop	{r4, r5, r6, pc}

000b62f6 <_ZN12mDNSResolver5CacheixEi>:
  Cache::~Cache() {
  }

  Response& Cache::operator[] (const int index) {
    return this->list[index];
  }
   b62f6:	f44f 7392 	mov.w	r3, #292	; 0x124
   b62fa:	fb03 0001 	mla	r0, r3, r1, r0
   b62fe:	4770      	bx	lr

000b6300 <_ZN12mDNSResolver5Cache6searchEPKc>:

  int Cache::search(Response& response) {
    return search(response.name);
  }

  int Cache::search(const char* name) {
   b6300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < this->size; i++) {
   b6304:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
  int Cache::search(const char* name) {
   b6308:	4605      	mov	r5, r0
   b630a:	4688      	mov	r8, r1
    for(int i = 0; i < this->size; i++) {
   b630c:	2400      	movs	r4, #0
      if(strcmp(this->list[i].name, name) == 0) {
   b630e:	f44f 7792 	mov.w	r7, #292	; 0x124
    for(int i = 0; i < this->size; i++) {
   b6312:	42a6      	cmp	r6, r4
   b6314:	dd07      	ble.n	b6326 <_ZN12mDNSResolver5Cache6searchEPKc+0x26>
      if(strcmp(this->list[i].name, name) == 0) {
   b6316:	4641      	mov	r1, r8
   b6318:	fb07 5004 	mla	r0, r7, r4, r5
   b631c:	f005 f873 	bl	bb406 <strcmp>
   b6320:	b118      	cbz	r0, b632a <_ZN12mDNSResolver5Cache6searchEPKc+0x2a>
    for(int i = 0; i < this->size; i++) {
   b6322:	3401      	adds	r4, #1
   b6324:	e7f5      	b.n	b6312 <_ZN12mDNSResolver5Cache6searchEPKc+0x12>
        return i;
      }
    }
    return -1;
   b6326:	f04f 34ff 	mov.w	r4, #4294967295
  }
   b632a:	4620      	mov	r0, r4
   b632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6330 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>:
    return search(response.name);
   b6330:	f7ff bfe6 	b.w	b6300 <_ZN12mDNSResolver5Cache6searchEPKc>

000b6334 <_ZN12mDNSResolver5Cache6lengthEv>:
    }
  }

  int Cache::length() {
    return this->size;
  }
   b6334:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
   b6338:	4770      	bx	lr

000b633a <_ZN12mDNSResolver5Cache6oldestEv>:

  int Cache::oldest() {
   b633a:	b570      	push	{r4, r5, r6, lr}
    if(this->size == 0) {
   b633c:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
   b6340:	b1a4      	cbz	r4, b636c <_ZN12mDNSResolver5Cache6oldestEv+0x32>
      return -1;
    }

    unsigned long oldestTTL = this->list[0].ttl;
   b6342:	f8d0 5100 	ldr.w	r5, [r0, #256]	; 0x100
    unsigned int oldestIndex = 0;

    for(int i = 1; i < this->size; i++) {
   b6346:	2101      	movs	r1, #1
    unsigned int oldestIndex = 0;
   b6348:	2200      	movs	r2, #0
      if(this->list[i].ttl < oldestTTL) {
   b634a:	f500 7380 	add.w	r3, r0, #256	; 0x100
   b634e:	f44f 7692 	mov.w	r6, #292	; 0x124
    for(int i = 1; i < this->size; i++) {
   b6352:	428c      	cmp	r4, r1
   b6354:	dd08      	ble.n	b6368 <_ZN12mDNSResolver5Cache6oldestEv+0x2e>
      if(this->list[i].ttl < oldestTTL) {
   b6356:	fb06 f001 	mul.w	r0, r6, r1
   b635a:	5818      	ldr	r0, [r3, r0]
   b635c:	42a8      	cmp	r0, r5
        oldestTTL = this->list[i].ttl;
        oldestIndex = i;
   b635e:	bf3c      	itt	cc
   b6360:	460a      	movcc	r2, r1
      if(this->list[i].ttl < oldestTTL) {
   b6362:	4605      	movcc	r5, r0
    for(int i = 1; i < this->size; i++) {
   b6364:	3101      	adds	r1, #1
   b6366:	e7f4      	b.n	b6352 <_ZN12mDNSResolver5Cache6oldestEv+0x18>
      }
    }

    return oldestIndex;
   b6368:	4610      	mov	r0, r2
  }
   b636a:	bd70      	pop	{r4, r5, r6, pc}
      return -1;
   b636c:	f04f 30ff 	mov.w	r0, #4294967295
   b6370:	e7fb      	b.n	b636a <_ZN12mDNSResolver5Cache6oldestEv+0x30>

000b6372 <_ZN12mDNSResolver5Cache11removeCnameEi>:

  void Cache::removeCname(int index) {
    Response *response = &this->list[index];
   b6372:	f44f 7392 	mov.w	r3, #292	; 0x124
   b6376:	fb03 0101 	mla	r1, r3, r1, r0
    return this->size;
   b637a:	f8d0 2490 	ldr.w	r2, [r0, #1168]	; 0x490

    for(int i = 0; i < length(); i++) {
   b637e:	2300      	movs	r3, #0
  void Cache::removeCname(int index) {
   b6380:	b530      	push	{r4, r5, lr}
      if(this->list[i].cname == response) {
        this->list[i].cname = NULL;
   b6382:	461c      	mov	r4, r3
    for(int i = 0; i < length(); i++) {
   b6384:	4293      	cmp	r3, r2
   b6386:	da09      	bge.n	b639c <_ZN12mDNSResolver5Cache11removeCnameEi+0x2a>
      if(this->list[i].cname == response) {
   b6388:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   b638c:	428d      	cmp	r5, r1
        this->list[i].cname = NULL;
   b638e:	bf08      	it	eq
   b6390:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
    for(int i = 0; i < length(); i++) {
   b6394:	3301      	adds	r3, #1
   b6396:	f500 7092 	add.w	r0, r0, #292	; 0x124
   b639a:	e7f3      	b.n	b6384 <_ZN12mDNSResolver5Cache11removeCnameEi+0x12>
      }
    }
  }
   b639c:	bd30      	pop	{r4, r5, pc}

000b639e <_ZN12mDNSResolver5Cache6removeEi>:

  void Cache::remove(int index) {
   b639e:	b538      	push	{r3, r4, r5, lr}
   b63a0:	4604      	mov	r4, r0
   b63a2:	460d      	mov	r5, r1
    removeCname(index);
   b63a4:	f7ff ffe5 	bl	b6372 <_ZN12mDNSResolver5Cache11removeCnameEi>
    this->list[index] = this->list[this->size - 1];
   b63a8:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
   b63ac:	f44f 7092 	mov.w	r0, #292	; 0x124
   b63b0:	3901      	subs	r1, #1
   b63b2:	fb00 4101 	mla	r1, r0, r1, r4
   b63b6:	fb00 4005 	mla	r0, r0, r5, r4
   b63ba:	f7ff ff69 	bl	b6290 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size -= 1;
   b63be:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b63c2:	3b01      	subs	r3, #1
   b63c4:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b63c8:	bd38      	pop	{r3, r4, r5, pc}

000b63ca <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>:
  void Cache::insert(Response response) {
   b63ca:	b538      	push	{r3, r4, r5, lr}
   b63cc:	4604      	mov	r4, r0
   b63ce:	460d      	mov	r5, r1
    return search(response.name);
   b63d0:	f7ff ff96 	bl	b6300 <_ZN12mDNSResolver5Cache6searchEPKc>
    if(existing != -1) {
   b63d4:	1c43      	adds	r3, r0, #1
   b63d6:	d008      	beq.n	b63ea <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x20>
      this->list[existing] = response;
   b63d8:	f44f 7392 	mov.w	r3, #292	; 0x124
   b63dc:	4629      	mov	r1, r5
   b63de:	fb03 4000 	mla	r0, r3, r0, r4
  }
   b63e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      this->list[existing] = response;
   b63e6:	f7ff bf53 	b.w	b6290 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    if(this->size == MDNS_RESOLVER_MAX_CACHE) {
   b63ea:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b63ee:	2b04      	cmp	r3, #4
   b63f0:	d106      	bne.n	b6400 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x36>
      int i = oldest();
   b63f2:	4620      	mov	r0, r4
   b63f4:	f7ff ffa1 	bl	b633a <_ZN12mDNSResolver5Cache6oldestEv>
   b63f8:	4601      	mov	r1, r0
      remove(i);
   b63fa:	4620      	mov	r0, r4
   b63fc:	f7ff ffcf 	bl	b639e <_ZN12mDNSResolver5Cache6removeEi>
    this->list[this->size] = response;
   b6400:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b6404:	f44f 7092 	mov.w	r0, #292	; 0x124
   b6408:	fb00 4003 	mla	r0, r0, r3, r4
   b640c:	4629      	mov	r1, r5
   b640e:	f7ff ff3f 	bl	b6290 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size += 1;
   b6412:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b6416:	3301      	adds	r3, #1
   b6418:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b641c:	bd38      	pop	{r3, r4, r5, pc}

000b641e <_ZN12mDNSResolver5Cache6expireEv>:
  void Cache::expire() {
   b641e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6422:	466e      	mov	r6, sp
   b6424:	4604      	mov	r4, r0
   b6426:	4605      	mov	r5, r0
   b6428:	46b0      	mov	r8, r6
    for(int i = 0; i < this->size; i++) {
   b642a:	2700      	movs	r7, #0
   b642c:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b6430:	42bb      	cmp	r3, r7
   b6432:	dd0a      	ble.n	b644a <_ZN12mDNSResolver5Cache6expireEv+0x2c>
      this->list[i].decrementTTL();
   b6434:	4628      	mov	r0, r5
   b6436:	f000 f85c 	bl	b64f2 <_ZN12mDNSResolver8Response12decrementTTLEv>
      ttls[i] = this->list[i].ttl;
   b643a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b643e:	f848 3b04 	str.w	r3, [r8], #4
    for(int i = 0; i < this->size; i++) {
   b6442:	3701      	adds	r7, #1
   b6444:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b6448:	e7f0      	b.n	b642c <_ZN12mDNSResolver5Cache6expireEv+0xe>
    for(int i = 0; i < this->size; i++) {
   b644a:	2500      	movs	r5, #0
   b644c:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b6450:	42ab      	cmp	r3, r5
   b6452:	dd08      	ble.n	b6466 <_ZN12mDNSResolver5Cache6expireEv+0x48>
      if(ttls[i] == 0) {
   b6454:	f856 3b04 	ldr.w	r3, [r6], #4
   b6458:	b91b      	cbnz	r3, b6462 <_ZN12mDNSResolver5Cache6expireEv+0x44>
        remove(i);
   b645a:	4629      	mov	r1, r5
   b645c:	4620      	mov	r0, r4
   b645e:	f7ff ff9e 	bl	b639e <_ZN12mDNSResolver5Cache6removeEi>
    for(int i = 0; i < this->size; i++) {
   b6462:	3501      	adds	r5, #1
   b6464:	e7f2      	b.n	b644c <_ZN12mDNSResolver5Cache6expireEv+0x2e>
  }
   b6466:	b004      	add	sp, #16
   b6468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b646c <_ZN9IPAddressaSImEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b646c:	b530      	push	{r4, r5, lr}
   b646e:	b087      	sub	sp, #28
   b6470:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6472:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6474:	4668      	mov	r0, sp
   b6476:	f003 fa59 	bl	b992c <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b647a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b647c:	3404      	adds	r4, #4
   b647e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6480:	682b      	ldr	r3, [r5, #0]
   b6482:	7023      	strb	r3, [r4, #0]
    }
   b6484:	b007      	add	sp, #28
   b6486:	bd30      	pop	{r4, r5, pc}

000b6488 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b6488:	b538      	push	{r3, r4, r5, lr}
   b648a:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b648e:	4604      	mov	r4, r0
   b6490:	4628      	mov	r0, r5
   b6492:	f003 fa2b 	bl	b98ec <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b6496:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b6498:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b649a:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b649c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b64a0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b64a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b64a8:	f04f 31ff 	mov.w	r1, #4294967295
   b64ac:	f7ff ffde 	bl	b646c <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b64b0:	4620      	mov	r0, r4
   b64b2:	bd38      	pop	{r3, r4, r5, pc}

000b64b4 <_ZN12mDNSResolver8ResponseC1EPKcm>:
    this->resolved = false;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
  }

  Response::Response(const char* name, unsigned long ttl) {
   b64b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b64b6:	f500 7684 	add.w	r6, r0, #264	; 0x108
   b64ba:	4604      	mov	r4, r0
   b64bc:	4630      	mov	r0, r6
   b64be:	4615      	mov	r5, r2
   b64c0:	9101      	str	r1, [sp, #4]
   b64c2:	f003 fa13 	bl	b98ec <_ZN9IPAddressC1Ev>
    strncpy(this->name, name, MDNS_MAX_NAME_LEN + 1);
   b64c6:	9901      	ldr	r1, [sp, #4]
   b64c8:	f44f 7280 	mov.w	r2, #256	; 0x100
   b64cc:	4620      	mov	r0, r4
   b64ce:	f004 ffe6 	bl	bb49e <strncpy>
    this->name[MDNS_MAX_NAME_LEN + 1] = '\0';
    this->ttl = ttl;
    this->resolved = false;
   b64d2:	2300      	movs	r3, #0
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b64d4:	4630      	mov	r0, r6
    this->ttl = ttl;
   b64d6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    this->resolved = false;
   b64da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->cname = NULL;
   b64de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b64e2:	f04f 31ff 	mov.w	r1, #4294967295
   b64e6:	f7ff ffc1 	bl	b646c <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b64ea:	4620      	mov	r0, r4
   b64ec:	b002      	add	sp, #8
   b64ee:	bd70      	pop	{r4, r5, r6, pc}

000b64f0 <_ZN12mDNSResolver8ResponseD1Ev>:

  Response::~Response() {
  }
   b64f0:	4770      	bx	lr

000b64f2 <_ZN12mDNSResolver8Response12decrementTTLEv>:

  void Response::decrementTTL() {
    if(this->ttl > 0) {
   b64f2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b64f6:	2b00      	cmp	r3, #0
      this->ttl--;
   b64f8:	bfc4      	itt	gt
   b64fa:	f103 33ff 	addgt.w	r3, r3, #4294967295
   b64fe:	f8c0 3100 	strgt.w	r3, [r0, #256]	; 0x100
    }
  }
   b6502:	4770      	bx	lr

000b6504 <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b6504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6506:	4604      	mov	r4, r0
   b6508:	3004      	adds	r0, #4
   b650a:	460d      	mov	r5, r1
   b650c:	f001 f8b4 	bl	b7678 <_ZN3UDPC1Ev>
   b6510:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b6514:	f003 f9ea 	bl	b98ec <_ZN9IPAddressC1Ev>
    timeout = 0;
   b6518:	2300      	movs	r3, #0
   b651a:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b651c:	686b      	ldr	r3, [r5, #4]
   b651e:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b6520:	68ab      	ldr	r3, [r5, #8]
   b6522:	60e3      	str	r3, [r4, #12]
   b6524:	68eb      	ldr	r3, [r5, #12]
   b6526:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b6528:	696b      	ldr	r3, [r5, #20]
   b652a:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b652c:	f105 0720 	add.w	r7, r5, #32
   b6530:	8b2b      	ldrh	r3, [r5, #24]
   b6532:	83a3      	strh	r3, [r4, #28]
   b6534:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b6536:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b653a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b653c:	683b      	ldr	r3, [r7, #0]
   b653e:	7033      	strb	r3, [r6, #0]
   b6540:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b6542:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b6544:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b6546:	6423      	str	r3, [r4, #64]	; 0x40
   b6548:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b654a:	6463      	str	r3, [r4, #68]	; 0x44
   b654c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b654e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b6550:	64a3      	str	r3, [r4, #72]	; 0x48
   b6552:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b6556:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b6558:	4620      	mov	r0, r4
   b655a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b655e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6560 <_ZN12mDNSResolver8Resolver5queryEPKc>:
	init = false;
	// Serial.println("Search return 2");
    return INADDR_NONE;
  }

  void Resolver::query(const char* name) {
   b6560:	b510      	push	{r4, lr}
   b6562:	b08a      	sub	sp, #40	; 0x28
   b6564:	4604      	mov	r4, r0
	  // Serial.println("Query");
    Query query(name);
   b6566:	a803      	add	r0, sp, #12
   b6568:	f7ff fc00 	bl	b5d6c <_ZN12mDNSResolver5QueryC1EPKc>
    udp.beginPacket(MDNS_BROADCAST_IP, MDNS_PORT);		//Peet
   b656c:	23fb      	movs	r3, #251	; 0xfb
   b656e:	9300      	str	r3, [sp, #0]
   b6570:	2300      	movs	r3, #0
   b6572:	461a      	mov	r2, r3
   b6574:	3404      	adds	r4, #4
   b6576:	21e0      	movs	r1, #224	; 0xe0
   b6578:	a804      	add	r0, sp, #16
   b657a:	f003 fa03 	bl	b9984 <_ZN9IPAddressC1Ehhhh>
   b657e:	f241 42e9 	movw	r2, #5353	; 0x14e9
   b6582:	a904      	add	r1, sp, #16
   b6584:	4620      	mov	r0, r4
   b6586:	f001 f8c5 	bl	b7714 <_ZN3UDP11beginPacketE9IPAddresst>
    query.sendPacket(udp);
   b658a:	4621      	mov	r1, r4
   b658c:	a803      	add	r0, sp, #12
   b658e:	f7ff fc2f 	bl	b5df0 <_ZN12mDNSResolver5Query10sendPacketER3UDP>
    udp.endPacket();
   b6592:	4620      	mov	r0, r4
   b6594:	f000 fdda 	bl	b714c <_ZN3UDP9endPacketEv>
    Query query(name);
   b6598:	a803      	add	r0, sp, #12
   b659a:	f7ff fbe9 	bl	b5d70 <_ZN12mDNSResolver5QueryD1Ev>
  }
   b659e:	b00a      	add	sp, #40	; 0x28
   b65a0:	bd10      	pop	{r4, pc}
	...

000b65a4 <_ZN12mDNSResolver8Resolver4readEv>:
      free(buffer);
    }
	// Serial.println("mDNS2");
  }

  MDNS_RESULT Resolver::read() {
   b65a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65a6:	4605      	mov	r5, r0
   b65a8:	b089      	sub	sp, #36	; 0x24
    cache.expire();
   b65aa:	482d      	ldr	r0, [pc, #180]	; (b6660 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b65ac:	f7ff ff37 	bl	b641e <_ZN12mDNSResolver5Cache6expireEv>

    if(!init) {
   b65b0:	f895 4068 	ldrb.w	r4, [r5, #104]	; 0x68
      init = true;
	  Serial.println("Begin Multicast");
	  udp.begin(5353);
   b65b4:	1d2f      	adds	r7, r5, #4
    if(!init) {
   b65b6:	bb54      	cbnz	r4, b660e <_ZN12mDNSResolver8Resolver4readEv+0x6a>
      init = true;
   b65b8:	2301      	movs	r3, #1
   b65ba:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	  Serial.println("Begin Multicast");
   b65be:	f003 fa57 	bl	b9a70 <_Z16_fetch_usbserialv>
   b65c2:	4928      	ldr	r1, [pc, #160]	; (b6664 <_ZN12mDNSResolver8Resolver4readEv+0xc0>)
   b65c4:	f002 fcb9 	bl	b8f3a <_ZN5Print7printlnEPKc>
	  udp.begin(5353);
   b65c8:	4622      	mov	r2, r4
   b65ca:	f241 41e9 	movw	r1, #5353	; 0x14e9
   b65ce:	4638      	mov	r0, r7
   b65d0:	f000 fe16 	bl	b7200 <_ZN3UDP5beginEtm>
      Serial.println(udp.joinMulticast(MDNS_BROADCAST_IP));	  //Peet
   b65d4:	f003 fa4c 	bl	b9a70 <_Z16_fetch_usbserialv>
   b65d8:	23fb      	movs	r3, #251	; 0xfb
   b65da:	4622      	mov	r2, r4
   b65dc:	9300      	str	r3, [sp, #0]
   b65de:	21e0      	movs	r1, #224	; 0xe0
   b65e0:	4623      	mov	r3, r4
   b65e2:	4606      	mov	r6, r0
   b65e4:	a802      	add	r0, sp, #8
   b65e6:	f003 f9cd 	bl	b9984 <_ZN9IPAddressC1Ehhhh>
   b65ea:	a902      	add	r1, sp, #8
   b65ec:	4638      	mov	r0, r7
   b65ee:	f001 f8e5 	bl	b77bc <_ZN3UDP13joinMulticastERK9IPAddress>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b65f2:	1e04      	subs	r4, r0, #0
   b65f4:	da1d      	bge.n	b6632 <_ZN12mDNSResolver8Resolver4readEv+0x8e>
            t = print('-');
   b65f6:	212d      	movs	r1, #45	; 0x2d
   b65f8:	4630      	mov	r0, r6
   b65fa:	f002 fc8f 	bl	b8f1c <_ZN5Print5printEc>
            val = -n;
   b65fe:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6600:	220a      	movs	r2, #10
   b6602:	4630      	mov	r0, r6
   b6604:	f002 fca3 	bl	b8f4e <_ZN5Print11printNumberEmh>
        n += println();
   b6608:	4630      	mov	r0, r6
   b660a:	f002 fc8a 	bl	b8f22 <_ZN5Print7printlnEv>
    }

    unsigned int len = udp.parsePacket();
   b660e:	2100      	movs	r1, #0
   b6610:	4638      	mov	r0, r7
   b6612:	f001 f896 	bl	b7742 <_ZN3UDP11parsePacketEm>

    if(len > 0) {
   b6616:	4606      	mov	r6, r0
   b6618:	b300      	cbz	r0, b665c <_ZN12mDNSResolver8Resolver4readEv+0xb8>
      unsigned char *buffer = (unsigned char *)malloc(sizeof(unsigned char) * len);
   b661a:	f000 fc33 	bl	b6e84 <malloc>

      if(buffer == NULL) {
   b661e:	4604      	mov	r4, r0
   b6620:	b948      	cbnz	r0, b6636 <_ZN12mDNSResolver8Resolver4readEv+0x92>
        // Out of memory - the packet is probably too big to parse. Probably.
        // Silently bombing out, possibly isn't great, but it'll do for the moment.
		Serial.println("Out of memory");
   b6622:	f003 fa25 	bl	b9a70 <_Z16_fetch_usbserialv>
   b6626:	4910      	ldr	r1, [pc, #64]	; (b6668 <_ZN12mDNSResolver8Resolver4readEv+0xc4>)
   b6628:	f002 fc87 	bl	b8f3a <_ZN5Print7printlnEPKc>
        return E_MDNS_OUT_OF_MEMORY;
   b662c:	2027      	movs	r0, #39	; 0x27
      return lastResult;
    }
	// Serial.println("Read return 2");
	// init = false;
    return E_MDNS_OK;
  }
   b662e:	b009      	add	sp, #36	; 0x24
   b6630:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b6632:	4621      	mov	r1, r4
   b6634:	e7e4      	b.n	b6600 <_ZN12mDNSResolver8Resolver4readEv+0x5c>
      udp.read(buffer, len);
   b6636:	4601      	mov	r1, r0
   b6638:	4632      	mov	r2, r6
   b663a:	4638      	mov	r0, r7
   b663c:	f000 fe4f 	bl	b72de <_ZN3UDP4readEPhj>
	  udp.flush();
   b6640:	4638      	mov	r0, r7
   b6642:	f000 fdcb 	bl	b71dc <_ZN3UDP5flushEv>
      lastResult = Answer::process(buffer, len, cache);
   b6646:	4a06      	ldr	r2, [pc, #24]	; (b6660 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b6648:	4631      	mov	r1, r6
   b664a:	4620      	mov	r0, r4
   b664c:	f7ff fdeb 	bl	b6226 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>
   b6650:	6028      	str	r0, [r5, #0]
      free(buffer);
   b6652:	4620      	mov	r0, r4
   b6654:	f000 fc1e 	bl	b6e94 <free>
      return lastResult;
   b6658:	6828      	ldr	r0, [r5, #0]
   b665a:	e7e8      	b.n	b662e <_ZN12mDNSResolver8Resolver4readEv+0x8a>
    return E_MDNS_OK;
   b665c:	2020      	movs	r0, #32
   b665e:	e7e6      	b.n	b662e <_ZN12mDNSResolver8Resolver4readEv+0x8a>
   b6660:	2003e1e0 	.word	0x2003e1e0
   b6664:	000bdaeb 	.word	0x000bdaeb
   b6668:	000bdafb 	.word	0x000bdafb

000b666c <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>:

  bool Resolver::isMDNSName(const char* name) {
   b666c:	b510      	push	{r4, lr}
    int len = strlen(name);
   b666e:	4608      	mov	r0, r1
  bool Resolver::isMDNSName(const char* name) {
   b6670:	460c      	mov	r4, r1
    int len = strlen(name);
   b6672:	f004 fef8 	bl	bb466 <strlen>
    int tldLen = strlen(MDNS_TLD);
	
	// Serial.println("LOll");
    if(len < tldLen) {
   b6676:	2805      	cmp	r0, #5
   b6678:	d908      	bls.n	b668c <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x20>
      return false;
    }
	// Serial.println("LOLO");
    return strcmp(name + len - tldLen, MDNS_TLD) == 0;
   b667a:	3806      	subs	r0, #6
   b667c:	4904      	ldr	r1, [pc, #16]	; (b6690 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x24>)
   b667e:	4420      	add	r0, r4
   b6680:	f004 fec1 	bl	bb406 <strcmp>
   b6684:	fab0 f080 	clz	r0, r0
   b6688:	0940      	lsrs	r0, r0, #5
  }
   b668a:	bd10      	pop	{r4, pc}
      return false;
   b668c:	2000      	movs	r0, #0
   b668e:	e7fc      	b.n	b668a <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x1e>
   b6690:	000bd76e 	.word	0x000bd76e

000b6694 <_ZN12mDNSResolver8Resolver6searchEPKc>:
  IPAddress Resolver::search(const char* name) {
   b6694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6698:	460c      	mov	r4, r1
   b669a:	b0cd      	sub	sp, #308	; 0x134
   b669c:	4606      	mov	r6, r0
    if(!isMDNSName(name)) {
   b669e:	4611      	mov	r1, r2
   b66a0:	4620      	mov	r0, r4
  IPAddress Resolver::search(const char* name) {
   b66a2:	4615      	mov	r5, r2
    if(!isMDNSName(name)) {
   b66a4:	f7ff ffe2 	bl	b666c <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>
   b66a8:	b950      	cbnz	r0, b66c0 <_ZN12mDNSResolver8Resolver6searchEPKc+0x2c>
	Serial.println("not valid");
   b66aa:	f003 f9e1 	bl	b9a70 <_Z16_fetch_usbserialv>
   b66ae:	4938      	ldr	r1, [pc, #224]	; (b6790 <_ZN12mDNSResolver8Resolver6searchEPKc+0xfc>)
   b66b0:	f002 fc43 	bl	b8f3a <_ZN5Print7printlnEPKc>
    return INADDR_NONE;
   b66b4:	f04f 31ff 	mov.w	r1, #4294967295
   b66b8:	4630      	mov	r0, r6
   b66ba:	f003 f937 	bl	b992c <_ZN9IPAddressC1Em>
   b66be:	e04d      	b.n	b675c <_ZN12mDNSResolver8Resolver6searchEPKc+0xc8>
    cache.expire();
   b66c0:	4834      	ldr	r0, [pc, #208]	; (b6794 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
      int index = cache.search(name);
   b66c2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b6794 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>
    cache.expire();
   b66c6:	f7ff feaa 	bl	b641e <_ZN12mDNSResolver5Cache6expireEv>
    int attempts = 0;
   b66ca:	f04f 0800 	mov.w	r8, #0
      int index = cache.search(name);
   b66ce:	4629      	mov	r1, r5
   b66d0:	4648      	mov	r0, r9
   b66d2:	f7ff fe15 	bl	b6300 <_ZN12mDNSResolver5Cache6searchEPKc>
      if(index == -1) {
   b66d6:	1c43      	adds	r3, r0, #1
      int index = cache.search(name);
   b66d8:	4607      	mov	r7, r0
      if(index == -1) {
   b66da:	d11e      	bne.n	b671a <_ZN12mDNSResolver8Resolver6searchEPKc+0x86>
        cache.insert(Response(name, 5));			//ttl = 5
   b66dc:	2205      	movs	r2, #5
   b66de:	4629      	mov	r1, r5
   b66e0:	a803      	add	r0, sp, #12
   b66e2:	f7ff fee7 	bl	b64b4 <_ZN12mDNSResolver8ResponseC1EPKcm>
   b66e6:	4648      	mov	r0, r9
   b66e8:	a903      	add	r1, sp, #12
   b66ea:	f7ff fe6e 	bl	b63ca <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b66ee:	a803      	add	r0, sp, #12
   b66f0:	f7ff fefe 	bl	b64f0 <_ZN12mDNSResolver8ResponseD1Ev>
    while(attempts < MDNS_ATTEMPTS) {
   b66f4:	f1b8 0f05 	cmp.w	r8, #5
   b66f8:	d1e9      	bne.n	b66ce <_ZN12mDNSResolver8Resolver6searchEPKc+0x3a>
	udp.leaveMulticast(MDNS_BROADCAST_IP);
   b66fa:	23fb      	movs	r3, #251	; 0xfb
   b66fc:	9300      	str	r3, [sp, #0]
   b66fe:	2300      	movs	r3, #0
   b6700:	461a      	mov	r2, r3
   b6702:	21e0      	movs	r1, #224	; 0xe0
   b6704:	a803      	add	r0, sp, #12
   b6706:	f003 f93d 	bl	b9984 <_ZN9IPAddressC1Ehhhh>
   b670a:	a903      	add	r1, sp, #12
   b670c:	1d20      	adds	r0, r4, #4
   b670e:	f001 f866 	bl	b77de <_ZN3UDP14leaveMulticastERK9IPAddress>
	init = false;
   b6712:	2300      	movs	r3, #0
   b6714:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b6718:	e7cc      	b.n	b66b4 <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
      } else if(cache[index].resolved) {
   b671a:	4601      	mov	r1, r0
   b671c:	4648      	mov	r0, r9
   b671e:	f7ff fdea 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b6722:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   b6726:	b1eb      	cbz	r3, b6764 <_ZN12mDNSResolver8Resolver6searchEPKc+0xd0>
		  udp.leaveMulticast(MDNS_BROADCAST_IP);
   b6728:	23fb      	movs	r3, #251	; 0xfb
   b672a:	9300      	str	r3, [sp, #0]
   b672c:	2300      	movs	r3, #0
   b672e:	461a      	mov	r2, r3
   b6730:	21e0      	movs	r1, #224	; 0xe0
   b6732:	a803      	add	r0, sp, #12
   b6734:	f003 f926 	bl	b9984 <_ZN9IPAddressC1Ehhhh>
   b6738:	a903      	add	r1, sp, #12
   b673a:	1d20      	adds	r0, r4, #4
   b673c:	f001 f84f 	bl	b77de <_ZN3UDP14leaveMulticastERK9IPAddress>
        return cache[index].ipAddress;
   b6740:	4639      	mov	r1, r7
   b6742:	4814      	ldr	r0, [pc, #80]	; (b6794 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
   b6744:	f7ff fdd7 	bl	b62f6 <_ZN12mDNSResolver5CacheixEi>
   b6748:	4634      	mov	r4, r6
   b674a:	4b13      	ldr	r3, [pc, #76]	; (b6798 <_ZN12mDNSResolver8Resolver6searchEPKc+0x104>)
   b674c:	f844 3b04 	str.w	r3, [r4], #4
   b6750:	f500 7586 	add.w	r5, r0, #268	; 0x10c
   b6754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6758:	682b      	ldr	r3, [r5, #0]
   b675a:	7023      	strb	r3, [r4, #0]
  }
   b675c:	4630      	mov	r0, r6
   b675e:	b04d      	add	sp, #308	; 0x134
   b6760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6764:	f000 f878 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
      if(now - timeout > MDNS_RETRY) {
   b6768:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b676a:	1ac3      	subs	r3, r0, r3
   b676c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b6770:	4607      	mov	r7, r0
   b6772:	dd06      	ble.n	b6782 <_ZN12mDNSResolver8Resolver6searchEPKc+0xee>
        query(name);
   b6774:	4629      	mov	r1, r5
   b6776:	4620      	mov	r0, r4
   b6778:	f7ff fef2 	bl	b6560 <_ZN12mDNSResolver8Resolver5queryEPKc>
        attempts++;
   b677c:	f108 0801 	add.w	r8, r8, #1
        timeout = now;
   b6780:	66e7      	str	r7, [r4, #108]	; 0x6c
      MDNS_RESULT result = read();
   b6782:	4620      	mov	r0, r4
   b6784:	f7ff ff0e 	bl	b65a4 <_ZN12mDNSResolver8Resolver4readEv>
      if(result != E_MDNS_OK) {
   b6788:	2820      	cmp	r0, #32
   b678a:	d0b3      	beq.n	b66f4 <_ZN12mDNSResolver8Resolver6searchEPKc+0x60>
   b678c:	e792      	b.n	b66b4 <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
   b678e:	bf00      	nop
   b6790:	000bdb09 	.word	0x000bdb09
   b6794:	2003e1e0 	.word	0x2003e1e0
   b6798:	000bddfc 	.word	0x000bddfc

000b679c <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b679c:	4801      	ldr	r0, [pc, #4]	; (b67a4 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b679e:	f7ff bd99 	b.w	b62d4 <_ZN12mDNSResolver5CacheC1Ev>
   b67a2:	bf00      	nop
   b67a4:	2003e1e0 	.word	0x2003e1e0

000b67a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b67a8:	b508      	push	{r3, lr}
   b67aa:	4b02      	ldr	r3, [pc, #8]	; (b67b4 <netdb_freeaddrinfo+0xc>)
   b67ac:	681b      	ldr	r3, [r3, #0]
   b67ae:	689b      	ldr	r3, [r3, #8]
   b67b0:	9301      	str	r3, [sp, #4]
   b67b2:	bd08      	pop	{r3, pc}
   b67b4:	00030268 	.word	0x00030268

000b67b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b67b8:	b508      	push	{r3, lr}
   b67ba:	4b02      	ldr	r3, [pc, #8]	; (b67c4 <netdb_getaddrinfo+0xc>)
   b67bc:	681b      	ldr	r3, [r3, #0]
   b67be:	68db      	ldr	r3, [r3, #12]
   b67c0:	9301      	str	r3, [sp, #4]
   b67c2:	bd08      	pop	{r3, pc}
   b67c4:	00030268 	.word	0x00030268

000b67c8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b67c8:	b508      	push	{r3, lr}
   b67ca:	4b02      	ldr	r3, [pc, #8]	; (b67d4 <HAL_Pin_Mode+0xc>)
   b67cc:	681b      	ldr	r3, [r3, #0]
   b67ce:	689b      	ldr	r3, [r3, #8]
   b67d0:	9301      	str	r3, [sp, #4]
   b67d2:	bd08      	pop	{r3, pc}
   b67d4:	0003022c 	.word	0x0003022c

000b67d8 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b67d8:	b508      	push	{r3, lr}
   b67da:	4b02      	ldr	r3, [pc, #8]	; (b67e4 <HAL_Interrupts_Attach+0xc>)
   b67dc:	681b      	ldr	r3, [r3, #0]
   b67de:	699b      	ldr	r3, [r3, #24]
   b67e0:	9301      	str	r3, [sp, #4]
   b67e2:	bd08      	pop	{r3, pc}
   b67e4:	0003022c 	.word	0x0003022c

000b67e8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b67e8:	b508      	push	{r3, lr}
   b67ea:	4b02      	ldr	r3, [pc, #8]	; (b67f4 <HAL_Interrupts_Detach+0xc>)
   b67ec:	681b      	ldr	r3, [r3, #0]
   b67ee:	69db      	ldr	r3, [r3, #28]
   b67f0:	9301      	str	r3, [sp, #4]
   b67f2:	bd08      	pop	{r3, pc}
   b67f4:	0003022c 	.word	0x0003022c

000b67f8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b67f8:	b508      	push	{r3, lr}
   b67fa:	4b02      	ldr	r3, [pc, #8]	; (b6804 <if_index_to_name+0xc>)
   b67fc:	681b      	ldr	r3, [r3, #0]
   b67fe:	695b      	ldr	r3, [r3, #20]
   b6800:	9301      	str	r3, [sp, #4]
   b6802:	bd08      	pop	{r3, pc}
   b6804:	0003026c 	.word	0x0003026c

000b6808 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   b6808:	b508      	push	{r3, lr}
   b680a:	4b02      	ldr	r3, [pc, #8]	; (b6814 <if_get_by_index+0xc>)
   b680c:	681b      	ldr	r3, [r3, #0]
   b680e:	699b      	ldr	r3, [r3, #24]
   b6810:	9301      	str	r3, [sp, #4]
   b6812:	bd08      	pop	{r3, pc}
   b6814:	0003026c 	.word	0x0003026c

000b6818 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   b6818:	b508      	push	{r3, lr}
   b681a:	4b02      	ldr	r3, [pc, #8]	; (b6824 <if_get_addrs+0xc>)
   b681c:	681b      	ldr	r3, [r3, #0]
   b681e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6820:	9301      	str	r3, [sp, #4]
   b6822:	bd08      	pop	{r3, pc}
   b6824:	0003026c 	.word	0x0003026c

000b6828 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   b6828:	b508      	push	{r3, lr}
   b682a:	4b02      	ldr	r3, [pc, #8]	; (b6834 <if_free_if_addrs+0xc>)
   b682c:	681b      	ldr	r3, [r3, #0]
   b682e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6830:	9301      	str	r3, [sp, #4]
   b6832:	bd08      	pop	{r3, pc}
   b6834:	0003026c 	.word	0x0003026c

000b6838 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6838:	b508      	push	{r3, lr}
   b683a:	4b02      	ldr	r3, [pc, #8]	; (b6844 <HAL_RNG_GetRandomNumber+0xc>)
   b683c:	681b      	ldr	r3, [r3, #0]
   b683e:	685b      	ldr	r3, [r3, #4]
   b6840:	9301      	str	r3, [sp, #4]
   b6842:	bd08      	pop	{r3, pc}
   b6844:	00030218 	.word	0x00030218

000b6848 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6848:	b508      	push	{r3, lr}
   b684a:	4b02      	ldr	r3, [pc, #8]	; (b6854 <HAL_Delay_Microseconds+0xc>)
   b684c:	681b      	ldr	r3, [r3, #0]
   b684e:	68db      	ldr	r3, [r3, #12]
   b6850:	9301      	str	r3, [sp, #4]
   b6852:	bd08      	pop	{r3, pc}
   b6854:	00030218 	.word	0x00030218

000b6858 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6858:	b508      	push	{r3, lr}
   b685a:	4b02      	ldr	r3, [pc, #8]	; (b6864 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b685c:	681b      	ldr	r3, [r3, #0]
   b685e:	695b      	ldr	r3, [r3, #20]
   b6860:	9301      	str	r3, [sp, #4]
   b6862:	bd08      	pop	{r3, pc}
   b6864:	00030218 	.word	0x00030218

000b6868 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6868:	b508      	push	{r3, lr}
   b686a:	4b02      	ldr	r3, [pc, #8]	; (b6874 <hal_rtc_time_is_valid+0xc>)
   b686c:	681b      	ldr	r3, [r3, #0]
   b686e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6870:	9301      	str	r3, [sp, #4]
   b6872:	bd08      	pop	{r3, pc}
   b6874:	00030218 	.word	0x00030218

000b6878 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6878:	b508      	push	{r3, lr}
   b687a:	4b02      	ldr	r3, [pc, #8]	; (b6884 <hal_rtc_get_time+0xc>)
   b687c:	681b      	ldr	r3, [r3, #0]
   b687e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6880:	9301      	str	r3, [sp, #4]
   b6882:	bd08      	pop	{r3, pc}
   b6884:	00030218 	.word	0x00030218

000b6888 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b6888:	b508      	push	{r3, lr}
   b688a:	4b02      	ldr	r3, [pc, #8]	; (b6894 <HAL_Core_Runtime_Info+0xc>)
   b688c:	681b      	ldr	r3, [r3, #0]
   b688e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6890:	9301      	str	r3, [sp, #4]
   b6892:	bd08      	pop	{r3, pc}
   b6894:	00030234 	.word	0x00030234

000b6898 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6898:	b508      	push	{r3, lr}
   b689a:	4b02      	ldr	r3, [pc, #8]	; (b68a4 <hal_ble_stack_init+0xc>)
   b689c:	681b      	ldr	r3, [r3, #0]
   b689e:	689b      	ldr	r3, [r3, #8]
   b68a0:	9301      	str	r3, [sp, #4]
   b68a2:	bd08      	pop	{r3, pc}
   b68a4:	00030278 	.word	0x00030278

000b68a8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b68a8:	b508      	push	{r3, lr}
   b68aa:	4b02      	ldr	r3, [pc, #8]	; (b68b4 <hal_ble_gap_set_advertising_data+0xc>)
   b68ac:	681b      	ldr	r3, [r3, #0]
   b68ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b68b0:	9301      	str	r3, [sp, #4]
   b68b2:	bd08      	pop	{r3, pc}
   b68b4:	00030278 	.word	0x00030278

000b68b8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b68b8:	b508      	push	{r3, lr}
   b68ba:	4b02      	ldr	r3, [pc, #8]	; (b68c4 <hal_ble_gap_set_scan_response_data+0xc>)
   b68bc:	681b      	ldr	r3, [r3, #0]
   b68be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b68c0:	9301      	str	r3, [sp, #4]
   b68c2:	bd08      	pop	{r3, pc}
   b68c4:	00030278 	.word	0x00030278

000b68c8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b68c8:	b508      	push	{r3, lr}
   b68ca:	4b02      	ldr	r3, [pc, #8]	; (b68d4 <hal_ble_gap_start_advertising+0xc>)
   b68cc:	681b      	ldr	r3, [r3, #0]
   b68ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b68d0:	9301      	str	r3, [sp, #4]
   b68d2:	bd08      	pop	{r3, pc}
   b68d4:	00030278 	.word	0x00030278

000b68d8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b68d8:	b508      	push	{r3, lr}
   b68da:	4b03      	ldr	r3, [pc, #12]	; (b68e8 <hal_ble_gap_disconnect+0x10>)
   b68dc:	681b      	ldr	r3, [r3, #0]
   b68de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b68e2:	9301      	str	r3, [sp, #4]
   b68e4:	bd08      	pop	{r3, pc}
   b68e6:	0000      	.short	0x0000
   b68e8:	00030278 	.word	0x00030278

000b68ec <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b68ec:	b508      	push	{r3, lr}
   b68ee:	4b03      	ldr	r3, [pc, #12]	; (b68fc <hal_ble_gatt_server_add_service+0x10>)
   b68f0:	681b      	ldr	r3, [r3, #0]
   b68f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b68f6:	9301      	str	r3, [sp, #4]
   b68f8:	bd08      	pop	{r3, pc}
   b68fa:	0000      	.short	0x0000
   b68fc:	00030278 	.word	0x00030278

000b6900 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6900:	b508      	push	{r3, lr}
   b6902:	4b03      	ldr	r3, [pc, #12]	; (b6910 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6904:	681b      	ldr	r3, [r3, #0]
   b6906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b690a:	9301      	str	r3, [sp, #4]
   b690c:	bd08      	pop	{r3, pc}
   b690e:	0000      	.short	0x0000
   b6910:	00030278 	.word	0x00030278

000b6914 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6914:	b508      	push	{r3, lr}
   b6916:	4b03      	ldr	r3, [pc, #12]	; (b6924 <hal_ble_gatt_client_write_with_response+0x10>)
   b6918:	681b      	ldr	r3, [r3, #0]
   b691a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b691e:	9301      	str	r3, [sp, #4]
   b6920:	bd08      	pop	{r3, pc}
   b6922:	0000      	.short	0x0000
   b6924:	00030278 	.word	0x00030278

000b6928 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6928:	b508      	push	{r3, lr}
   b692a:	4b03      	ldr	r3, [pc, #12]	; (b6938 <hal_ble_gatt_client_write_without_response+0x10>)
   b692c:	681b      	ldr	r3, [r3, #0]
   b692e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6932:	9301      	str	r3, [sp, #4]
   b6934:	bd08      	pop	{r3, pc}
   b6936:	0000      	.short	0x0000
   b6938:	00030278 	.word	0x00030278

000b693c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b693c:	b508      	push	{r3, lr}
   b693e:	4b03      	ldr	r3, [pc, #12]	; (b694c <hal_ble_gatt_server_add_characteristic+0x10>)
   b6940:	681b      	ldr	r3, [r3, #0]
   b6942:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b6946:	9301      	str	r3, [sp, #4]
   b6948:	bd08      	pop	{r3, pc}
   b694a:	0000      	.short	0x0000
   b694c:	00030278 	.word	0x00030278

000b6950 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b03      	ldr	r3, [pc, #12]	; (b6960 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b695a:	9301      	str	r3, [sp, #4]
   b695c:	bd08      	pop	{r3, pc}
   b695e:	0000      	.short	0x0000
   b6960:	00030278 	.word	0x00030278

000b6964 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6964:	b508      	push	{r3, lr}
   b6966:	4b03      	ldr	r3, [pc, #12]	; (b6974 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6968:	681b      	ldr	r3, [r3, #0]
   b696a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b696e:	9301      	str	r3, [sp, #4]
   b6970:	bd08      	pop	{r3, pc}
   b6972:	0000      	.short	0x0000
   b6974:	00030278 	.word	0x00030278

000b6978 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6978:	b508      	push	{r3, lr}
   b697a:	4b03      	ldr	r3, [pc, #12]	; (b6988 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b697c:	681b      	ldr	r3, [r3, #0]
   b697e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6982:	9301      	str	r3, [sp, #4]
   b6984:	bd08      	pop	{r3, pc}
   b6986:	0000      	.short	0x0000
   b6988:	00030278 	.word	0x00030278

000b698c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b698c:	b508      	push	{r3, lr}
   b698e:	4b02      	ldr	r3, [pc, #8]	; (b6998 <os_thread_yield+0xc>)
   b6990:	681b      	ldr	r3, [r3, #0]
   b6992:	68db      	ldr	r3, [r3, #12]
   b6994:	9301      	str	r3, [sp, #4]
   b6996:	bd08      	pop	{r3, pc}
   b6998:	00030248 	.word	0x00030248

000b699c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b699c:	b508      	push	{r3, lr}
   b699e:	4b02      	ldr	r3, [pc, #8]	; (b69a8 <os_thread_scheduling+0xc>)
   b69a0:	681b      	ldr	r3, [r3, #0]
   b69a2:	69db      	ldr	r3, [r3, #28]
   b69a4:	9301      	str	r3, [sp, #4]
   b69a6:	bd08      	pop	{r3, pc}
   b69a8:	00030248 	.word	0x00030248

000b69ac <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b69ac:	b508      	push	{r3, lr}
   b69ae:	4b02      	ldr	r3, [pc, #8]	; (b69b8 <os_timer_create+0xc>)
   b69b0:	681b      	ldr	r3, [r3, #0]
   b69b2:	6a1b      	ldr	r3, [r3, #32]
   b69b4:	9301      	str	r3, [sp, #4]
   b69b6:	bd08      	pop	{r3, pc}
   b69b8:	00030248 	.word	0x00030248

000b69bc <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b69bc:	b508      	push	{r3, lr}
   b69be:	4b02      	ldr	r3, [pc, #8]	; (b69c8 <os_timer_destroy+0xc>)
   b69c0:	681b      	ldr	r3, [r3, #0]
   b69c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b69c4:	9301      	str	r3, [sp, #4]
   b69c6:	bd08      	pop	{r3, pc}
   b69c8:	00030248 	.word	0x00030248

000b69cc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b69cc:	b508      	push	{r3, lr}
   b69ce:	4b02      	ldr	r3, [pc, #8]	; (b69d8 <os_timer_get_id+0xc>)
   b69d0:	681b      	ldr	r3, [r3, #0]
   b69d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b69d4:	9301      	str	r3, [sp, #4]
   b69d6:	bd08      	pop	{r3, pc}
   b69d8:	00030248 	.word	0x00030248

000b69dc <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b69dc:	b508      	push	{r3, lr}
   b69de:	4b02      	ldr	r3, [pc, #8]	; (b69e8 <os_timer_change+0xc>)
   b69e0:	681b      	ldr	r3, [r3, #0]
   b69e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b69e4:	9301      	str	r3, [sp, #4]
   b69e6:	bd08      	pop	{r3, pc}
   b69e8:	00030248 	.word	0x00030248

000b69ec <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b69ec:	b508      	push	{r3, lr}
   b69ee:	4b02      	ldr	r3, [pc, #8]	; (b69f8 <os_mutex_create+0xc>)
   b69f0:	681b      	ldr	r3, [r3, #0]
   b69f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b69f4:	9301      	str	r3, [sp, #4]
   b69f6:	bd08      	pop	{r3, pc}
   b69f8:	00030248 	.word	0x00030248

000b69fc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b69fc:	b508      	push	{r3, lr}
   b69fe:	4b02      	ldr	r3, [pc, #8]	; (b6a08 <os_mutex_lock+0xc>)
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6a04:	9301      	str	r3, [sp, #4]
   b6a06:	bd08      	pop	{r3, pc}
   b6a08:	00030248 	.word	0x00030248

000b6a0c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6a0c:	b508      	push	{r3, lr}
   b6a0e:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <os_mutex_unlock+0xc>)
   b6a10:	681b      	ldr	r3, [r3, #0]
   b6a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a14:	9301      	str	r3, [sp, #4]
   b6a16:	bd08      	pop	{r3, pc}
   b6a18:	00030248 	.word	0x00030248

000b6a1c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6a1c:	b508      	push	{r3, lr}
   b6a1e:	4b02      	ldr	r3, [pc, #8]	; (b6a28 <os_mutex_recursive_create+0xc>)
   b6a20:	681b      	ldr	r3, [r3, #0]
   b6a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a24:	9301      	str	r3, [sp, #4]
   b6a26:	bd08      	pop	{r3, pc}
   b6a28:	00030248 	.word	0x00030248

000b6a2c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6a2c:	b508      	push	{r3, lr}
   b6a2e:	4b02      	ldr	r3, [pc, #8]	; (b6a38 <os_mutex_recursive_lock+0xc>)
   b6a30:	681b      	ldr	r3, [r3, #0]
   b6a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6a34:	9301      	str	r3, [sp, #4]
   b6a36:	bd08      	pop	{r3, pc}
   b6a38:	00030248 	.word	0x00030248

000b6a3c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6a3c:	b508      	push	{r3, lr}
   b6a3e:	4b02      	ldr	r3, [pc, #8]	; (b6a48 <os_mutex_recursive_unlock+0xc>)
   b6a40:	681b      	ldr	r3, [r3, #0]
   b6a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6a44:	9301      	str	r3, [sp, #4]
   b6a46:	bd08      	pop	{r3, pc}
   b6a48:	00030248 	.word	0x00030248

000b6a4c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6a4c:	b508      	push	{r3, lr}
   b6a4e:	4b02      	ldr	r3, [pc, #8]	; (b6a58 <os_timer_set_id+0xc>)
   b6a50:	681b      	ldr	r3, [r3, #0]
   b6a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6a54:	9301      	str	r3, [sp, #4]
   b6a56:	bd08      	pop	{r3, pc}
   b6a58:	00030248 	.word	0x00030248

000b6a5c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6a5c:	b508      	push	{r3, lr}
   b6a5e:	4b02      	ldr	r3, [pc, #8]	; (b6a68 <inet_inet_ntop+0xc>)
   b6a60:	681b      	ldr	r3, [r3, #0]
   b6a62:	695b      	ldr	r3, [r3, #20]
   b6a64:	9301      	str	r3, [sp, #4]
   b6a66:	bd08      	pop	{r3, pc}
   b6a68:	00030264 	.word	0x00030264

000b6a6c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6a6c:	b508      	push	{r3, lr}
   b6a6e:	4b02      	ldr	r3, [pc, #8]	; (b6a78 <inet_htonl+0xc>)
   b6a70:	681b      	ldr	r3, [r3, #0]
   b6a72:	6a1b      	ldr	r3, [r3, #32]
   b6a74:	9301      	str	r3, [sp, #4]
   b6a76:	bd08      	pop	{r3, pc}
   b6a78:	00030264 	.word	0x00030264

000b6a7c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b6a7c:	b508      	push	{r3, lr}
   b6a7e:	4b02      	ldr	r3, [pc, #8]	; (b6a88 <inet_ntohs+0xc>)
   b6a80:	681b      	ldr	r3, [r3, #0]
   b6a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a84:	9301      	str	r3, [sp, #4]
   b6a86:	bd08      	pop	{r3, pc}
   b6a88:	00030264 	.word	0x00030264

000b6a8c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6a8c:	b508      	push	{r3, lr}
   b6a8e:	4b02      	ldr	r3, [pc, #8]	; (b6a98 <inet_htons+0xc>)
   b6a90:	681b      	ldr	r3, [r3, #0]
   b6a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a94:	9301      	str	r3, [sp, #4]
   b6a96:	bd08      	pop	{r3, pc}
   b6a98:	00030264 	.word	0x00030264

000b6a9c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6a9c:	b508      	push	{r3, lr}
   b6a9e:	4b02      	ldr	r3, [pc, #8]	; (b6aa8 <hal_usart_write+0xc>)
   b6aa0:	681b      	ldr	r3, [r3, #0]
   b6aa2:	68db      	ldr	r3, [r3, #12]
   b6aa4:	9301      	str	r3, [sp, #4]
   b6aa6:	bd08      	pop	{r3, pc}
   b6aa8:	0003023c 	.word	0x0003023c

000b6aac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6aac:	b508      	push	{r3, lr}
   b6aae:	4b02      	ldr	r3, [pc, #8]	; (b6ab8 <hal_usart_available+0xc>)
   b6ab0:	681b      	ldr	r3, [r3, #0]
   b6ab2:	691b      	ldr	r3, [r3, #16]
   b6ab4:	9301      	str	r3, [sp, #4]
   b6ab6:	bd08      	pop	{r3, pc}
   b6ab8:	0003023c 	.word	0x0003023c

000b6abc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6abc:	b508      	push	{r3, lr}
   b6abe:	4b02      	ldr	r3, [pc, #8]	; (b6ac8 <hal_usart_read+0xc>)
   b6ac0:	681b      	ldr	r3, [r3, #0]
   b6ac2:	695b      	ldr	r3, [r3, #20]
   b6ac4:	9301      	str	r3, [sp, #4]
   b6ac6:	bd08      	pop	{r3, pc}
   b6ac8:	0003023c 	.word	0x0003023c

000b6acc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6acc:	b508      	push	{r3, lr}
   b6ace:	4b02      	ldr	r3, [pc, #8]	; (b6ad8 <hal_usart_peek+0xc>)
   b6ad0:	681b      	ldr	r3, [r3, #0]
   b6ad2:	699b      	ldr	r3, [r3, #24]
   b6ad4:	9301      	str	r3, [sp, #4]
   b6ad6:	bd08      	pop	{r3, pc}
   b6ad8:	0003023c 	.word	0x0003023c

000b6adc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6adc:	b508      	push	{r3, lr}
   b6ade:	4b02      	ldr	r3, [pc, #8]	; (b6ae8 <hal_usart_flush+0xc>)
   b6ae0:	681b      	ldr	r3, [r3, #0]
   b6ae2:	69db      	ldr	r3, [r3, #28]
   b6ae4:	9301      	str	r3, [sp, #4]
   b6ae6:	bd08      	pop	{r3, pc}
   b6ae8:	0003023c 	.word	0x0003023c

000b6aec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6aec:	b508      	push	{r3, lr}
   b6aee:	4b02      	ldr	r3, [pc, #8]	; (b6af8 <hal_usart_is_enabled+0xc>)
   b6af0:	681b      	ldr	r3, [r3, #0]
   b6af2:	6a1b      	ldr	r3, [r3, #32]
   b6af4:	9301      	str	r3, [sp, #4]
   b6af6:	bd08      	pop	{r3, pc}
   b6af8:	0003023c 	.word	0x0003023c

000b6afc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6afc:	b508      	push	{r3, lr}
   b6afe:	4b02      	ldr	r3, [pc, #8]	; (b6b08 <hal_usart_available_data_for_write+0xc>)
   b6b00:	681b      	ldr	r3, [r3, #0]
   b6b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b04:	9301      	str	r3, [sp, #4]
   b6b06:	bd08      	pop	{r3, pc}
   b6b08:	0003023c 	.word	0x0003023c

000b6b0c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6b0c:	b508      	push	{r3, lr}
   b6b0e:	4b02      	ldr	r3, [pc, #8]	; (b6b18 <hal_usart_init_ex+0xc>)
   b6b10:	681b      	ldr	r3, [r3, #0]
   b6b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b14:	9301      	str	r3, [sp, #4]
   b6b16:	bd08      	pop	{r3, pc}
   b6b18:	0003023c 	.word	0x0003023c

000b6b1c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6b1c:	b508      	push	{r3, lr}
   b6b1e:	4b02      	ldr	r3, [pc, #8]	; (b6b28 <hal_i2c_write+0xc>)
   b6b20:	681b      	ldr	r3, [r3, #0]
   b6b22:	6a1b      	ldr	r3, [r3, #32]
   b6b24:	9301      	str	r3, [sp, #4]
   b6b26:	bd08      	pop	{r3, pc}
   b6b28:	00030228 	.word	0x00030228

000b6b2c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6b2c:	b508      	push	{r3, lr}
   b6b2e:	4b02      	ldr	r3, [pc, #8]	; (b6b38 <hal_i2c_available+0xc>)
   b6b30:	681b      	ldr	r3, [r3, #0]
   b6b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6b34:	9301      	str	r3, [sp, #4]
   b6b36:	bd08      	pop	{r3, pc}
   b6b38:	00030228 	.word	0x00030228

000b6b3c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6b3c:	b508      	push	{r3, lr}
   b6b3e:	4b02      	ldr	r3, [pc, #8]	; (b6b48 <hal_i2c_read+0xc>)
   b6b40:	681b      	ldr	r3, [r3, #0]
   b6b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b44:	9301      	str	r3, [sp, #4]
   b6b46:	bd08      	pop	{r3, pc}
   b6b48:	00030228 	.word	0x00030228

000b6b4c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6b4c:	b508      	push	{r3, lr}
   b6b4e:	4b02      	ldr	r3, [pc, #8]	; (b6b58 <hal_i2c_peek+0xc>)
   b6b50:	681b      	ldr	r3, [r3, #0]
   b6b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b54:	9301      	str	r3, [sp, #4]
   b6b56:	bd08      	pop	{r3, pc}
   b6b58:	00030228 	.word	0x00030228

000b6b5c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6b5c:	b508      	push	{r3, lr}
   b6b5e:	4b02      	ldr	r3, [pc, #8]	; (b6b68 <hal_i2c_flush+0xc>)
   b6b60:	681b      	ldr	r3, [r3, #0]
   b6b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b64:	9301      	str	r3, [sp, #4]
   b6b66:	bd08      	pop	{r3, pc}
   b6b68:	00030228 	.word	0x00030228

000b6b6c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6b6c:	b508      	push	{r3, lr}
   b6b6e:	4b02      	ldr	r3, [pc, #8]	; (b6b78 <hal_i2c_is_enabled+0xc>)
   b6b70:	681b      	ldr	r3, [r3, #0]
   b6b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b74:	9301      	str	r3, [sp, #4]
   b6b76:	bd08      	pop	{r3, pc}
   b6b78:	00030228 	.word	0x00030228

000b6b7c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6b7c:	b508      	push	{r3, lr}
   b6b7e:	4b02      	ldr	r3, [pc, #8]	; (b6b88 <hal_i2c_init+0xc>)
   b6b80:	681b      	ldr	r3, [r3, #0]
   b6b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b84:	9301      	str	r3, [sp, #4]
   b6b86:	bd08      	pop	{r3, pc}
   b6b88:	00030228 	.word	0x00030228

000b6b8c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b6b8c:	b508      	push	{r3, lr}
   b6b8e:	4b02      	ldr	r3, [pc, #8]	; (b6b98 <sock_bind+0xc>)
   b6b90:	681b      	ldr	r3, [r3, #0]
   b6b92:	685b      	ldr	r3, [r3, #4]
   b6b94:	9301      	str	r3, [sp, #4]
   b6b96:	bd08      	pop	{r3, pc}
   b6b98:	00030238 	.word	0x00030238

000b6b9c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6b9c:	b508      	push	{r3, lr}
   b6b9e:	4b02      	ldr	r3, [pc, #8]	; (b6ba8 <sock_setsockopt+0xc>)
   b6ba0:	681b      	ldr	r3, [r3, #0]
   b6ba2:	699b      	ldr	r3, [r3, #24]
   b6ba4:	9301      	str	r3, [sp, #4]
   b6ba6:	bd08      	pop	{r3, pc}
   b6ba8:	00030238 	.word	0x00030238

000b6bac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6bac:	b508      	push	{r3, lr}
   b6bae:	4b02      	ldr	r3, [pc, #8]	; (b6bb8 <sock_close+0xc>)
   b6bb0:	681b      	ldr	r3, [r3, #0]
   b6bb2:	69db      	ldr	r3, [r3, #28]
   b6bb4:	9301      	str	r3, [sp, #4]
   b6bb6:	bd08      	pop	{r3, pc}
   b6bb8:	00030238 	.word	0x00030238

000b6bbc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6bbc:	b508      	push	{r3, lr}
   b6bbe:	4b02      	ldr	r3, [pc, #8]	; (b6bc8 <sock_connect+0xc>)
   b6bc0:	681b      	ldr	r3, [r3, #0]
   b6bc2:	6a1b      	ldr	r3, [r3, #32]
   b6bc4:	9301      	str	r3, [sp, #4]
   b6bc6:	bd08      	pop	{r3, pc}
   b6bc8:	00030238 	.word	0x00030238

000b6bcc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6bcc:	b508      	push	{r3, lr}
   b6bce:	4b02      	ldr	r3, [pc, #8]	; (b6bd8 <sock_recv+0xc>)
   b6bd0:	681b      	ldr	r3, [r3, #0]
   b6bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6bd4:	9301      	str	r3, [sp, #4]
   b6bd6:	bd08      	pop	{r3, pc}
   b6bd8:	00030238 	.word	0x00030238

000b6bdc <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b6bdc:	b508      	push	{r3, lr}
   b6bde:	4b02      	ldr	r3, [pc, #8]	; (b6be8 <sock_recvfrom+0xc>)
   b6be0:	681b      	ldr	r3, [r3, #0]
   b6be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6be4:	9301      	str	r3, [sp, #4]
   b6be6:	bd08      	pop	{r3, pc}
   b6be8:	00030238 	.word	0x00030238

000b6bec <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6bec:	b508      	push	{r3, lr}
   b6bee:	4b02      	ldr	r3, [pc, #8]	; (b6bf8 <sock_send+0xc>)
   b6bf0:	681b      	ldr	r3, [r3, #0]
   b6bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6bf4:	9301      	str	r3, [sp, #4]
   b6bf6:	bd08      	pop	{r3, pc}
   b6bf8:	00030238 	.word	0x00030238

000b6bfc <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b6bfc:	b508      	push	{r3, lr}
   b6bfe:	4b02      	ldr	r3, [pc, #8]	; (b6c08 <sock_sendto+0xc>)
   b6c00:	681b      	ldr	r3, [r3, #0]
   b6c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c04:	9301      	str	r3, [sp, #4]
   b6c06:	bd08      	pop	{r3, pc}
   b6c08:	00030238 	.word	0x00030238

000b6c0c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6c0c:	b508      	push	{r3, lr}
   b6c0e:	4b02      	ldr	r3, [pc, #8]	; (b6c18 <sock_socket+0xc>)
   b6c10:	681b      	ldr	r3, [r3, #0]
   b6c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6c14:	9301      	str	r3, [sp, #4]
   b6c16:	bd08      	pop	{r3, pc}
   b6c18:	00030238 	.word	0x00030238

000b6c1c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6c1c:	b508      	push	{r3, lr}
   b6c1e:	4b02      	ldr	r3, [pc, #8]	; (b6c28 <hal_spi_init+0xc>)
   b6c20:	681b      	ldr	r3, [r3, #0]
   b6c22:	69db      	ldr	r3, [r3, #28]
   b6c24:	9301      	str	r3, [sp, #4]
   b6c26:	bd08      	pop	{r3, pc}
   b6c28:	00030230 	.word	0x00030230

000b6c2c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6c2c:	b508      	push	{r3, lr}
   b6c2e:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <hal_spi_is_enabled+0xc>)
   b6c30:	681b      	ldr	r3, [r3, #0]
   b6c32:	6a1b      	ldr	r3, [r3, #32]
   b6c34:	9301      	str	r3, [sp, #4]
   b6c36:	bd08      	pop	{r3, pc}
   b6c38:	00030230 	.word	0x00030230

000b6c3c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6c3c:	b508      	push	{r3, lr}
   b6c3e:	4b02      	ldr	r3, [pc, #8]	; (b6c48 <HAL_USB_USART_Init+0xc>)
   b6c40:	681b      	ldr	r3, [r3, #0]
   b6c42:	681b      	ldr	r3, [r3, #0]
   b6c44:	9301      	str	r3, [sp, #4]
   b6c46:	bd08      	pop	{r3, pc}
   b6c48:	0003024c 	.word	0x0003024c

000b6c4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6c4c:	b508      	push	{r3, lr}
   b6c4e:	4b02      	ldr	r3, [pc, #8]	; (b6c58 <HAL_USB_USART_Available_Data+0xc>)
   b6c50:	681b      	ldr	r3, [r3, #0]
   b6c52:	691b      	ldr	r3, [r3, #16]
   b6c54:	9301      	str	r3, [sp, #4]
   b6c56:	bd08      	pop	{r3, pc}
   b6c58:	0003024c 	.word	0x0003024c

000b6c5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6c5c:	b508      	push	{r3, lr}
   b6c5e:	4b02      	ldr	r3, [pc, #8]	; (b6c68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6c60:	681b      	ldr	r3, [r3, #0]
   b6c62:	695b      	ldr	r3, [r3, #20]
   b6c64:	9301      	str	r3, [sp, #4]
   b6c66:	bd08      	pop	{r3, pc}
   b6c68:	0003024c 	.word	0x0003024c

000b6c6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c6c:	b508      	push	{r3, lr}
   b6c6e:	4b02      	ldr	r3, [pc, #8]	; (b6c78 <HAL_USB_USART_Receive_Data+0xc>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	699b      	ldr	r3, [r3, #24]
   b6c74:	9301      	str	r3, [sp, #4]
   b6c76:	bd08      	pop	{r3, pc}
   b6c78:	0003024c 	.word	0x0003024c

000b6c7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c7c:	b508      	push	{r3, lr}
   b6c7e:	4b02      	ldr	r3, [pc, #8]	; (b6c88 <HAL_USB_USART_Send_Data+0xc>)
   b6c80:	681b      	ldr	r3, [r3, #0]
   b6c82:	69db      	ldr	r3, [r3, #28]
   b6c84:	9301      	str	r3, [sp, #4]
   b6c86:	bd08      	pop	{r3, pc}
   b6c88:	0003024c 	.word	0x0003024c

000b6c8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6c8c:	b508      	push	{r3, lr}
   b6c8e:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <HAL_USB_USART_Flush_Data+0xc>)
   b6c90:	681b      	ldr	r3, [r3, #0]
   b6c92:	6a1b      	ldr	r3, [r3, #32]
   b6c94:	9301      	str	r3, [sp, #4]
   b6c96:	bd08      	pop	{r3, pc}
   b6c98:	0003024c 	.word	0x0003024c

000b6c9c <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <wlan_connected_info+0xc>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b6ca4:	9301      	str	r3, [sp, #4]
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	00030274 	.word	0x00030274

000b6cac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6cac:	b508      	push	{r3, lr}
   b6cae:	4b02      	ldr	r3, [pc, #8]	; (b6cb8 <panic_+0xc>)
   b6cb0:	681b      	ldr	r3, [r3, #0]
   b6cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6cb4:	9301      	str	r3, [sp, #4]
   b6cb6:	bd08      	pop	{r3, pc}
   b6cb8:	00030260 	.word	0x00030260

000b6cbc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6cbc:	b508      	push	{r3, lr}
   b6cbe:	4b02      	ldr	r3, [pc, #8]	; (b6cc8 <log_message+0xc>)
   b6cc0:	681b      	ldr	r3, [r3, #0]
   b6cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6cc4:	9301      	str	r3, [sp, #4]
   b6cc6:	bd08      	pop	{r3, pc}
   b6cc8:	00030260 	.word	0x00030260

000b6ccc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6ccc:	b508      	push	{r3, lr}
   b6cce:	4b02      	ldr	r3, [pc, #8]	; (b6cd8 <system_mode+0xc>)
   b6cd0:	681b      	ldr	r3, [r3, #0]
   b6cd2:	681b      	ldr	r3, [r3, #0]
   b6cd4:	9301      	str	r3, [sp, #4]
   b6cd6:	bd08      	pop	{r3, pc}
   b6cd8:	00030220 	.word	0x00030220

000b6cdc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6cdc:	b508      	push	{r3, lr}
   b6cde:	4b02      	ldr	r3, [pc, #8]	; (b6ce8 <set_system_mode+0xc>)
   b6ce0:	681b      	ldr	r3, [r3, #0]
   b6ce2:	685b      	ldr	r3, [r3, #4]
   b6ce4:	9301      	str	r3, [sp, #4]
   b6ce6:	bd08      	pop	{r3, pc}
   b6ce8:	00030220 	.word	0x00030220

000b6cec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6cec:	b508      	push	{r3, lr}
   b6cee:	4b02      	ldr	r3, [pc, #8]	; (b6cf8 <system_delay_ms+0xc>)
   b6cf0:	681b      	ldr	r3, [r3, #0]
   b6cf2:	695b      	ldr	r3, [r3, #20]
   b6cf4:	9301      	str	r3, [sp, #4]
   b6cf6:	bd08      	pop	{r3, pc}
   b6cf8:	00030220 	.word	0x00030220

000b6cfc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6cfc:	b508      	push	{r3, lr}
   b6cfe:	4b02      	ldr	r3, [pc, #8]	; (b6d08 <system_thread_set_state+0xc>)
   b6d00:	681b      	ldr	r3, [r3, #0]
   b6d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d04:	9301      	str	r3, [sp, #4]
   b6d06:	bd08      	pop	{r3, pc}
   b6d08:	00030220 	.word	0x00030220

000b6d0c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6d0c:	b508      	push	{r3, lr}
   b6d0e:	4b02      	ldr	r3, [pc, #8]	; (b6d18 <application_thread_current+0xc>)
   b6d10:	681b      	ldr	r3, [r3, #0]
   b6d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6d14:	9301      	str	r3, [sp, #4]
   b6d16:	bd08      	pop	{r3, pc}
   b6d18:	00030220 	.word	0x00030220

000b6d1c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6d1c:	b508      	push	{r3, lr}
   b6d1e:	4b02      	ldr	r3, [pc, #8]	; (b6d28 <application_thread_invoke+0xc>)
   b6d20:	681b      	ldr	r3, [r3, #0]
   b6d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6d24:	9301      	str	r3, [sp, #4]
   b6d26:	bd08      	pop	{r3, pc}
   b6d28:	00030220 	.word	0x00030220

000b6d2c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6d2c:	b508      	push	{r3, lr}
   b6d2e:	4b02      	ldr	r3, [pc, #8]	; (b6d38 <system_thread_get_state+0xc>)
   b6d30:	681b      	ldr	r3, [r3, #0]
   b6d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6d34:	9301      	str	r3, [sp, #4]
   b6d36:	bd08      	pop	{r3, pc}
   b6d38:	00030220 	.word	0x00030220

000b6d3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6d3c:	b508      	push	{r3, lr}
   b6d3e:	4b03      	ldr	r3, [pc, #12]	; (b6d4c <system_ctrl_set_app_request_handler+0x10>)
   b6d40:	681b      	ldr	r3, [r3, #0]
   b6d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6d46:	9301      	str	r3, [sp, #4]
   b6d48:	bd08      	pop	{r3, pc}
   b6d4a:	0000      	.short	0x0000
   b6d4c:	00030220 	.word	0x00030220

000b6d50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6d50:	b508      	push	{r3, lr}
   b6d52:	4b03      	ldr	r3, [pc, #12]	; (b6d60 <system_ctrl_set_result+0x10>)
   b6d54:	681b      	ldr	r3, [r3, #0]
   b6d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6d5a:	9301      	str	r3, [sp, #4]
   b6d5c:	bd08      	pop	{r3, pc}
   b6d5e:	0000      	.short	0x0000
   b6d60:	00030220 	.word	0x00030220

000b6d64 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d64:	b508      	push	{r3, lr}
   b6d66:	4b02      	ldr	r3, [pc, #8]	; (b6d70 <network_connect+0xc>)
   b6d68:	681b      	ldr	r3, [r3, #0]
   b6d6a:	685b      	ldr	r3, [r3, #4]
   b6d6c:	9301      	str	r3, [sp, #4]
   b6d6e:	bd08      	pop	{r3, pc}
   b6d70:	00030240 	.word	0x00030240

000b6d74 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6d74:	b508      	push	{r3, lr}
   b6d76:	4b02      	ldr	r3, [pc, #8]	; (b6d80 <network_connecting+0xc>)
   b6d78:	681b      	ldr	r3, [r3, #0]
   b6d7a:	689b      	ldr	r3, [r3, #8]
   b6d7c:	9301      	str	r3, [sp, #4]
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	00030240 	.word	0x00030240

000b6d84 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6d84:	b508      	push	{r3, lr}
   b6d86:	4b02      	ldr	r3, [pc, #8]	; (b6d90 <network_disconnect+0xc>)
   b6d88:	681b      	ldr	r3, [r3, #0]
   b6d8a:	68db      	ldr	r3, [r3, #12]
   b6d8c:	9301      	str	r3, [sp, #4]
   b6d8e:	bd08      	pop	{r3, pc}
   b6d90:	00030240 	.word	0x00030240

000b6d94 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <network_ready+0xc>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	691b      	ldr	r3, [r3, #16]
   b6d9c:	9301      	str	r3, [sp, #4]
   b6d9e:	bd08      	pop	{r3, pc}
   b6da0:	00030240 	.word	0x00030240

000b6da4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b02      	ldr	r3, [pc, #8]	; (b6db0 <network_on+0xc>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	695b      	ldr	r3, [r3, #20]
   b6dac:	9301      	str	r3, [sp, #4]
   b6dae:	bd08      	pop	{r3, pc}
   b6db0:	00030240 	.word	0x00030240

000b6db4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6db4:	b508      	push	{r3, lr}
   b6db6:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <network_off+0xc>)
   b6db8:	681b      	ldr	r3, [r3, #0]
   b6dba:	699b      	ldr	r3, [r3, #24]
   b6dbc:	9301      	str	r3, [sp, #4]
   b6dbe:	bd08      	pop	{r3, pc}
   b6dc0:	00030240 	.word	0x00030240

000b6dc4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6dc4:	b508      	push	{r3, lr}
   b6dc6:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <network_listen+0xc>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	69db      	ldr	r3, [r3, #28]
   b6dcc:	9301      	str	r3, [sp, #4]
   b6dce:	bd08      	pop	{r3, pc}
   b6dd0:	00030240 	.word	0x00030240

000b6dd4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <network_listening+0xc>)
   b6dd8:	681b      	ldr	r3, [r3, #0]
   b6dda:	6a1b      	ldr	r3, [r3, #32]
   b6ddc:	9301      	str	r3, [sp, #4]
   b6dde:	bd08      	pop	{r3, pc}
   b6de0:	00030240 	.word	0x00030240

000b6de4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b02      	ldr	r3, [pc, #8]	; (b6df0 <network_set_listen_timeout+0xc>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	bd08      	pop	{r3, pc}
   b6df0:	00030240 	.word	0x00030240

000b6df4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <network_get_listen_timeout+0xc>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6dfc:	9301      	str	r3, [sp, #4]
   b6dfe:	bd08      	pop	{r3, pc}
   b6e00:	00030240 	.word	0x00030240

000b6e04 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6e04:	b508      	push	{r3, lr}
   b6e06:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <network_is_on+0xc>)
   b6e08:	681b      	ldr	r3, [r3, #0]
   b6e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e0c:	9301      	str	r3, [sp, #4]
   b6e0e:	bd08      	pop	{r3, pc}
   b6e10:	00030240 	.word	0x00030240

000b6e14 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6e14:	b508      	push	{r3, lr}
   b6e16:	4b02      	ldr	r3, [pc, #8]	; (b6e20 <network_is_off+0xc>)
   b6e18:	681b      	ldr	r3, [r3, #0]
   b6e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e1c:	9301      	str	r3, [sp, #4]
   b6e1e:	bd08      	pop	{r3, pc}
   b6e20:	00030240 	.word	0x00030240

000b6e24 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6e24:	b508      	push	{r3, lr}
   b6e26:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <spark_process+0xc>)
   b6e28:	681b      	ldr	r3, [r3, #0]
   b6e2a:	689b      	ldr	r3, [r3, #8]
   b6e2c:	9301      	str	r3, [sp, #4]
   b6e2e:	bd08      	pop	{r3, pc}
   b6e30:	00030244 	.word	0x00030244

000b6e34 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b02      	ldr	r3, [pc, #8]	; (b6e40 <spark_cloud_flag_connected+0xc>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	695b      	ldr	r3, [r3, #20]
   b6e3c:	9301      	str	r3, [sp, #4]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	00030244 	.word	0x00030244

000b6e44 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b02      	ldr	r3, [pc, #8]	; (b6e50 <spark_send_event+0xc>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	6a1b      	ldr	r3, [r3, #32]
   b6e4c:	9301      	str	r3, [sp, #4]
   b6e4e:	bd08      	pop	{r3, pc}
   b6e50:	00030244 	.word	0x00030244

000b6e54 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6e54:	b508      	push	{r3, lr}
   b6e56:	4b02      	ldr	r3, [pc, #8]	; (b6e60 <spark_subscribe+0xc>)
   b6e58:	681b      	ldr	r3, [r3, #0]
   b6e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	bd08      	pop	{r3, pc}
   b6e60:	00030244 	.word	0x00030244

000b6e64 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <spark_sync_time_pending+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	00030244 	.word	0x00030244

000b6e74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e7c:	9301      	str	r3, [sp, #4]
   b6e7e:	bd08      	pop	{r3, pc}
   b6e80:	00030244 	.word	0x00030244

000b6e84 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b02      	ldr	r3, [pc, #8]	; (b6e90 <malloc+0xc>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	681b      	ldr	r3, [r3, #0]
   b6e8c:	9301      	str	r3, [sp, #4]
   b6e8e:	bd08      	pop	{r3, pc}
   b6e90:	0003021c 	.word	0x0003021c

000b6e94 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b02      	ldr	r3, [pc, #8]	; (b6ea0 <free+0xc>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	685b      	ldr	r3, [r3, #4]
   b6e9c:	9301      	str	r3, [sp, #4]
   b6e9e:	bd08      	pop	{r3, pc}
   b6ea0:	0003021c 	.word	0x0003021c

000b6ea4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6ea4:	b508      	push	{r3, lr}
   b6ea6:	4b02      	ldr	r3, [pc, #8]	; (b6eb0 <realloc+0xc>)
   b6ea8:	681b      	ldr	r3, [r3, #0]
   b6eaa:	689b      	ldr	r3, [r3, #8]
   b6eac:	9301      	str	r3, [sp, #4]
   b6eae:	bd08      	pop	{r3, pc}
   b6eb0:	0003021c 	.word	0x0003021c

000b6eb4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6eb4:	b508      	push	{r3, lr}
   b6eb6:	4b02      	ldr	r3, [pc, #8]	; (b6ec0 <sprintf+0xc>)
   b6eb8:	681b      	ldr	r3, [r3, #0]
   b6eba:	68db      	ldr	r3, [r3, #12]
   b6ebc:	9301      	str	r3, [sp, #4]
   b6ebe:	bd08      	pop	{r3, pc}
   b6ec0:	0003021c 	.word	0x0003021c

000b6ec4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6ec4:	b508      	push	{r3, lr}
   b6ec6:	4b02      	ldr	r3, [pc, #8]	; (b6ed0 <vsnprintf+0xc>)
   b6ec8:	681b      	ldr	r3, [r3, #0]
   b6eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ecc:	9301      	str	r3, [sp, #4]
   b6ece:	bd08      	pop	{r3, pc}
   b6ed0:	0003021c 	.word	0x0003021c

000b6ed4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6ed4:	b508      	push	{r3, lr}
   b6ed6:	4b02      	ldr	r3, [pc, #8]	; (b6ee0 <abort+0xc>)
   b6ed8:	681b      	ldr	r3, [r3, #0]
   b6eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6edc:	9301      	str	r3, [sp, #4]
   b6ede:	bd08      	pop	{r3, pc}
   b6ee0:	0003021c 	.word	0x0003021c

000b6ee4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b02      	ldr	r3, [pc, #8]	; (b6ef0 <_malloc_r+0xc>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6eec:	9301      	str	r3, [sp, #4]
   b6eee:	bd08      	pop	{r3, pc}
   b6ef0:	0003021c 	.word	0x0003021c

000b6ef4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6ef4:	b508      	push	{r3, lr}
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <__errno+0xc>)
   b6ef8:	681b      	ldr	r3, [r3, #0]
   b6efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6efc:	9301      	str	r3, [sp, #4]
   b6efe:	bd08      	pop	{r3, pc}
   b6f00:	0003021c 	.word	0x0003021c

000b6f04 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6f04:	b508      	push	{r3, lr}
   b6f06:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <__assert_func+0xc>)
   b6f08:	681b      	ldr	r3, [r3, #0]
   b6f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f0c:	9301      	str	r3, [sp, #4]
   b6f0e:	bd08      	pop	{r3, pc}
   b6f10:	0003021c 	.word	0x0003021c

000b6f14 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b02      	ldr	r3, [pc, #8]	; (b6f20 <newlib_impure_ptr_callback+0xc>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f1c:	9301      	str	r3, [sp, #4]
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	0003021c 	.word	0x0003021c

000b6f24 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6f24:	b508      	push	{r3, lr}
   b6f26:	4b02      	ldr	r3, [pc, #8]	; (b6f30 <localtime_r+0xc>)
   b6f28:	681b      	ldr	r3, [r3, #0]
   b6f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6f2c:	9301      	str	r3, [sp, #4]
   b6f2e:	bd08      	pop	{r3, pc}
   b6f30:	0003021c 	.word	0x0003021c

000b6f34 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6f34:	2200      	movs	r2, #0
   b6f36:	6840      	ldr	r0, [r0, #4]
   b6f38:	4611      	mov	r1, r2
   b6f3a:	f7ff bf4b 	b.w	b6dd4 <network_listening>

000b6f3e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6f3e:	2200      	movs	r2, #0
   b6f40:	6840      	ldr	r0, [r0, #4]
   b6f42:	4611      	mov	r1, r2
   b6f44:	f7ff bf56 	b.w	b6df4 <network_get_listen_timeout>

000b6f48 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6f48:	6840      	ldr	r0, [r0, #4]
   b6f4a:	2200      	movs	r2, #0
   b6f4c:	f7ff bf4a 	b.w	b6de4 <network_set_listen_timeout>

000b6f50 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6f50:	6840      	ldr	r0, [r0, #4]
   b6f52:	2200      	movs	r2, #0
   b6f54:	f081 0101 	eor.w	r1, r1, #1
   b6f58:	f7ff bf34 	b.w	b6dc4 <network_listen>

000b6f5c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f5c:	2300      	movs	r3, #0
   b6f5e:	6840      	ldr	r0, [r0, #4]
   b6f60:	461a      	mov	r2, r3
   b6f62:	4619      	mov	r1, r3
   b6f64:	f7ff bf26 	b.w	b6db4 <network_off>

000b6f68 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6f68:	2300      	movs	r3, #0
   b6f6a:	6840      	ldr	r0, [r0, #4]
   b6f6c:	461a      	mov	r2, r3
   b6f6e:	4619      	mov	r1, r3
   b6f70:	f7ff bf18 	b.w	b6da4 <network_on>

000b6f74 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6f74:	2200      	movs	r2, #0
   b6f76:	6840      	ldr	r0, [r0, #4]
   b6f78:	4611      	mov	r1, r2
   b6f7a:	f7ff bf0b 	b.w	b6d94 <network_ready>

000b6f7e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6f7e:	2200      	movs	r2, #0
   b6f80:	6840      	ldr	r0, [r0, #4]
   b6f82:	4611      	mov	r1, r2
   b6f84:	f7ff bef6 	b.w	b6d74 <network_connecting>

000b6f88 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6f88:	6840      	ldr	r0, [r0, #4]
   b6f8a:	2200      	movs	r2, #0
   b6f8c:	2102      	movs	r1, #2
   b6f8e:	f7ff bef9 	b.w	b6d84 <network_disconnect>

000b6f92 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6f92:	2300      	movs	r3, #0
   b6f94:	6840      	ldr	r0, [r0, #4]
   b6f96:	461a      	mov	r2, r3
   b6f98:	f7ff bee4 	b.w	b6d64 <network_connect>

000b6f9c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6f9c:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6f9e:	2203      	movs	r2, #3
   b6fa0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6fa2:	4a02      	ldr	r2, [pc, #8]	; (b6fac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6fa4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6fa6:	4770      	bx	lr
   b6fa8:	2003e674 	.word	0x2003e674
   b6fac:	000bdb1c 	.word	0x000bdb1c

000b6fb0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6fb0:	b510      	push	{r4, lr}
   b6fb2:	4604      	mov	r4, r0
   b6fb4:	4608      	mov	r0, r1
{
    _spi = spi;
   b6fb6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6fb8:	f7ff fe30 	bl	b6c1c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6fbc:	2300      	movs	r3, #0
   b6fbe:	6063      	str	r3, [r4, #4]
}
   b6fc0:	4620      	mov	r0, r4
   b6fc2:	bd10      	pop	{r4, pc}

000b6fc4 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b6fc4:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b6fc6:	2420      	movs	r4, #32
{
   b6fc8:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b6fca:	4622      	mov	r2, r4
   b6fcc:	2100      	movs	r1, #0
   b6fce:	4668      	mov	r0, sp
   b6fd0:	f004 f9d3 	bl	bb37a <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b6fd4:	2100      	movs	r1, #0
   b6fd6:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b6fd8:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b6fdc:	f7ff fc54 	bl	b6888 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b6fe0:	9801      	ldr	r0, [sp, #4]
   b6fe2:	b008      	add	sp, #32
   b6fe4:	bd10      	pop	{r4, pc}
	...

000b6fe8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6fe8:	4b05      	ldr	r3, [pc, #20]	; (b7000 <_GLOBAL__sub_I_System+0x18>)
   b6fea:	2202      	movs	r2, #2
   b6fec:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6fee:	4b05      	ldr	r3, [pc, #20]	; (b7004 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6ff0:	4a05      	ldr	r2, [pc, #20]	; (b7008 <_GLOBAL__sub_I_System+0x20>)
   b6ff2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6ff4:	2000      	movs	r0, #0
   b6ff6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6ffa:	f7ff be6f 	b.w	b6cdc <set_system_mode>
   b6ffe:	bf00      	nop
   b7000:	2003e688 	.word	0x2003e688
   b7004:	2003e67c 	.word	0x2003e67c
   b7008:	ffff0000 	.word	0xffff0000

000b700c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b700c:	b510      	push	{r4, lr}
   b700e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7010:	f004 fa29 	bl	bb466 <strlen>
   b7014:	3801      	subs	r0, #1
   b7016:	1823      	adds	r3, r4, r0
   b7018:	4620      	mov	r0, r4
	while(i<j){
   b701a:	4283      	cmp	r3, r0
   b701c:	d906      	bls.n	b702c <_Z11str_reversePc+0x20>
		c = *i;
   b701e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7020:	7819      	ldrb	r1, [r3, #0]
   b7022:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7026:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b702a:	e7f6      	b.n	b701a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b702c:	bd10      	pop	{r4, pc}

000b702e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b702e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b7032:	1e93      	subs	r3, r2, #2
{
   b7034:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b7036:	2b22      	cmp	r3, #34	; 0x22
   b7038:	f04f 0300 	mov.w	r3, #0
{
   b703c:	460d      	mov	r5, r1
   b703e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b7040:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b7044:	d927      	bls.n	b7096 <ltoa+0x68>

      if (10 == base && N < 0L)
   b7046:	2800      	cmp	r0, #0
   b7048:	da2a      	bge.n	b70a0 <ltoa+0x72>
      {
            *head++ = '-';
   b704a:	462e      	mov	r6, r5
   b704c:	232d      	movs	r3, #45	; 0x2d
   b704e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b7052:	4240      	negs	r0, r0
   b7054:	240a      	movs	r4, #10
      *tail-- = '\0';
   b7056:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b705a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b705e:	4622      	mov	r2, r4
   b7060:	4601      	mov	r1, r0
   b7062:	a801      	add	r0, sp, #4
   b7064:	f004 f93d 	bl	bb2e2 <ldiv>
   b7068:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b706a:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b706c:	2b09      	cmp	r3, #9
   b706e:	bfcc      	ite	gt
   b7070:	2237      	movgt	r2, #55	; 0x37
   b7072:	2230      	movle	r2, #48	; 0x30
   b7074:	fa52 f383 	uxtab	r3, r2, r3
   b7078:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b707c:	f108 0801 	add.w	r8, r8, #1
   b7080:	2800      	cmp	r0, #0
   b7082:	d1ec      	bne.n	b705e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b7084:	4642      	mov	r2, r8
   b7086:	1c79      	adds	r1, r7, #1
   b7088:	4630      	mov	r0, r6
   b708a:	f004 f94e 	bl	bb32a <memcpy>
      return str;
}
   b708e:	4628      	mov	r0, r5
   b7090:	b00c      	add	sp, #48	; 0x30
   b7092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b7096:	2a0a      	cmp	r2, #10
   b7098:	d0d5      	beq.n	b7046 <ltoa+0x18>
      if (uarg)
   b709a:	b118      	cbz	r0, b70a4 <ltoa+0x76>
   b709c:	462e      	mov	r6, r5
   b709e:	e7da      	b.n	b7056 <ltoa+0x28>
   b70a0:	240a      	movs	r4, #10
   b70a2:	e7fa      	b.n	b709a <ltoa+0x6c>
      else  *tail-- = '0';
   b70a4:	2330      	movs	r3, #48	; 0x30
   b70a6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b70aa:	462e      	mov	r6, r5
   b70ac:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b70b0:	f04f 0802 	mov.w	r8, #2
   b70b4:	e7e6      	b.n	b7084 <ltoa+0x56>

000b70b6 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b70b6:	b570      	push	{r4, r5, r6, lr}
   b70b8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b70ba:	1e91      	subs	r1, r2, #2
   b70bc:	2922      	cmp	r1, #34	; 0x22
   b70be:	d81d      	bhi.n	b70fc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b70c0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b70c2:	b930      	cbnz	r0, b70d2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b70c4:	4423      	add	r3, r4
            *ptr++ = '0';
   b70c6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b70c8:	429d      	cmp	r5, r3
   b70ca:	d210      	bcs.n	b70ee <ultoa+0x38>
            *ptr++ = '0';
   b70cc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b70d0:	e7fa      	b.n	b70c8 <ultoa+0x12>
            result.quot = a/radix;
   b70d2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b70d6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b70da:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b70dc:	2809      	cmp	r0, #9
                *ptr += '0';
   b70de:	bf94      	ite	ls
   b70e0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b70e2:	3157      	addhi	r1, #87	; 0x57
   b70e4:	b2c9      	uxtb	r1, r1
   b70e6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b70ea:	4630      	mov	r0, r6
	while(a){
   b70ec:	e7e9      	b.n	b70c2 <ultoa+0xc>

	*ptr = '\0';
   b70ee:	2300      	movs	r3, #0
	str_reverse(buffer);
   b70f0:	4620      	mov	r0, r4
	*ptr = '\0';
   b70f2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b70f4:	f7ff ff8a 	bl	b700c <_Z11str_reversePc>
	return buffer;
   b70f8:	4620      	mov	r0, r4
}
   b70fa:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b70fc:	2000      	movs	r0, #0
   b70fe:	e7fc      	b.n	b70fa <ultoa+0x44>

000b7100 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7100:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7102:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7104:	460c      	mov	r4, r1
   b7106:	4615      	mov	r5, r2
	if(a<0){
   b7108:	da0e      	bge.n	b7128 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b710a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b710e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7112:	bf14      	ite	ne
   b7114:	4258      	negne	r0, r3
   b7116:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7118:	2301      	movs	r3, #1
		*buffer = '-';
   b711a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b711c:	462a      	mov	r2, r5
   b711e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7120:	f7ff ffc9 	bl	b70b6 <ultoa>
	}
	return buffer;
}
   b7124:	4620      	mov	r0, r4
   b7126:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7128:	2301      	movs	r3, #1
   b712a:	e7f9      	b.n	b7120 <itoa+0x20>

000b712c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b712c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b712e:	6804      	ldr	r4, [r0, #0]
   b7130:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b7132:	46a4      	mov	ip, r4
    }
   b7134:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b7138:	4760      	bx	ip

000b713a <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b713a:	6803      	ldr	r3, [r0, #0]
   b713c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b713e:	4718      	bx	r3

000b7140 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b7140:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b7142:	4770      	bx	lr

000b7144 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b7144:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b7146:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b7148:	1a10      	subs	r0, r2, r0
   b714a:	4770      	bx	lr

000b714c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b714c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b714e:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b7150:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7152:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7154:	4b0c      	ldr	r3, [pc, #48]	; (b7188 <_ZN3UDP9endPacketEv+0x3c>)
   b7156:	9302      	str	r3, [sp, #8]
   b7158:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b715c:	4604      	mov	r4, r0
   b715e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7160:	ad03      	add	r5, sp, #12
   b7162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7164:	6833      	ldr	r3, [r6, #0]
   b7166:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7168:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b716a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b716c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b716e:	9300      	str	r3, [sp, #0]
   b7170:	4620      	mov	r0, r4
   b7172:	ab02      	add	r3, sp, #8
   b7174:	47b8      	blx	r7
    flush(); // wait for send to complete
   b7176:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b7178:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b717a:	69db      	ldr	r3, [r3, #28]
   b717c:	4620      	mov	r0, r4
   b717e:	4798      	blx	r3
    return result;
}
   b7180:	4628      	mov	r0, r5
   b7182:	b009      	add	sp, #36	; 0x24
   b7184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7186:	bf00      	nop
   b7188:	000bddfc 	.word	0x000bddfc

000b718c <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b718c:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b718e:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b7190:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b7194:	68db      	ldr	r3, [r3, #12]
   b7196:	2201      	movs	r2, #1
   b7198:	f10d 0107 	add.w	r1, sp, #7
   b719c:	4798      	blx	r3
}
   b719e:	b003      	add	sp, #12
   b71a0:	f85d fb04 	ldr.w	pc, [sp], #4

000b71a4 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b71a4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b71a6:	6803      	ldr	r3, [r0, #0]
   b71a8:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b71aa:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b71ac:	4798      	blx	r3
   b71ae:	b128      	cbz	r0, b71bc <_ZN3UDP4readEv+0x18>
   b71b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b71b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b71b4:	1c59      	adds	r1, r3, #1
   b71b6:	86e1      	strh	r1, [r4, #54]	; 0x36
   b71b8:	5cd0      	ldrb	r0, [r2, r3]
}
   b71ba:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b71bc:	f04f 30ff 	mov.w	r0, #4294967295
   b71c0:	e7fb      	b.n	b71ba <_ZN3UDP4readEv+0x16>

000b71c2 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b71c2:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b71c4:	6803      	ldr	r3, [r0, #0]
   b71c6:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b71c8:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b71ca:	4798      	blx	r3
   b71cc:	b118      	cbz	r0, b71d6 <_ZN3UDP4peekEv+0x14>
   b71ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b71d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b71d2:	5cd0      	ldrb	r0, [r2, r3]
}
   b71d4:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b71d6:	f04f 30ff 	mov.w	r0, #4294967295
   b71da:	e7fb      	b.n	b71d4 <_ZN3UDP4peekEv+0x12>

000b71dc <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b71dc:	4770      	bx	lr

000b71de <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b71de:	b410      	push	{r4}
   b71e0:	4603      	mov	r3, r0
   b71e2:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b71e4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b71e6:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b71e8:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b71ea:	6803      	ldr	r3, [r0, #0]
   b71ec:	1a52      	subs	r2, r2, r1
   b71ee:	68db      	ldr	r3, [r3, #12]
   b71f0:	4421      	add	r1, r4
}
   b71f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b71f6:	4718      	bx	r3

000b71f8 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b71f8:	f1a0 0010 	sub.w	r0, r0, #16
   b71fc:	f7ff bfef 	b.w	b71de <_ZNK3UDP7printToER5Print>

000b7200 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b7200:	b570      	push	{r4, r5, r6, lr}
    stop();
   b7202:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b7204:	b08c      	sub	sp, #48	; 0x30
    stop();
   b7206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b7208:	4604      	mov	r4, r0
   b720a:	460e      	mov	r6, r1
   b720c:	4615      	mov	r5, r2
    stop();
   b720e:	4798      	blx	r3
    const int one = 1;
   b7210:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b7212:	221c      	movs	r2, #28
   b7214:	2100      	movs	r1, #0
   b7216:	a805      	add	r0, sp, #20
    const int one = 1;
   b7218:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b721a:	f004 f8ae 	bl	bb37a <memset>
    saddr.sin6_len = sizeof(saddr);
   b721e:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b7222:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b7224:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b7228:	f7ff fc30 	bl	b6a8c <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b722c:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b722e:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b7232:	2102      	movs	r1, #2
   b7234:	200a      	movs	r0, #10
   b7236:	f7ff fce9 	bl	b6c0c <sock_socket>
    if (_sock < 0) {
   b723a:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b723c:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b723e:	db25      	blt.n	b728c <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b7240:	2204      	movs	r2, #4
   b7242:	9200      	str	r2, [sp, #0]
   b7244:	ab02      	add	r3, sp, #8
   b7246:	f640 71ff 	movw	r1, #4095	; 0xfff
   b724a:	f7ff fca7 	bl	b6b9c <sock_setsockopt>
   b724e:	b9e8      	cbnz	r0, b728c <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b7250:	b195      	cbz	r5, b7278 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b7252:	9003      	str	r0, [sp, #12]
   b7254:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b7258:	a903      	add	r1, sp, #12
   b725a:	b2e8      	uxtb	r0, r5
   b725c:	f7ff facc 	bl	b67f8 <if_index_to_name>
   b7260:	b9a0      	cbnz	r0, b728c <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b7262:	2306      	movs	r3, #6
   b7264:	9300      	str	r3, [sp, #0]
   b7266:	6960      	ldr	r0, [r4, #20]
   b7268:	ab03      	add	r3, sp, #12
   b726a:	f241 020b 	movw	r2, #4107	; 0x100b
   b726e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7272:	f7ff fc93 	bl	b6b9c <sock_setsockopt>
   b7276:	b948      	cbnz	r0, b728c <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b7278:	6960      	ldr	r0, [r4, #20]
   b727a:	221c      	movs	r2, #28
   b727c:	a905      	add	r1, sp, #20
   b727e:	f7ff fc85 	bl	b6b8c <sock_bind>
   b7282:	b918      	cbnz	r0, b728c <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b7284:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b7286:	2001      	movs	r0, #1
}
   b7288:	b00c      	add	sp, #48	; 0x30
   b728a:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b728c:	6823      	ldr	r3, [r4, #0]
   b728e:	4620      	mov	r0, r4
   b7290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7292:	4798      	blx	r3
   b7294:	2000      	movs	r0, #0
   b7296:	e7f7      	b.n	b7288 <_ZN3UDP5beginEtm+0x88>

000b7298 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b7298:	b510      	push	{r4, lr}
   b729a:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b729c:	6940      	ldr	r0, [r0, #20]
   b729e:	2800      	cmp	r0, #0
   b72a0:	db01      	blt.n	b72a6 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b72a2:	f7ff fc83 	bl	b6bac <sock_close>
    _sock = -1;
   b72a6:	f04f 33ff 	mov.w	r3, #4294967295
   b72aa:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b72ac:	2300      	movs	r3, #0
   b72ae:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b72b0:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b72b2:	bd10      	pop	{r4, pc}

000b72b4 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b72b4:	b570      	push	{r4, r5, r6, lr}
   b72b6:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b72b8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b72ba:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b72bc:	b168      	cbz	r0, b72da <_ZN3UDP5writeEPKhj+0x26>
   b72be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b72c0:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b72c2:	4294      	cmp	r4, r2
   b72c4:	bf28      	it	cs
   b72c6:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b72c8:	4622      	mov	r2, r4
   b72ca:	4430      	add	r0, r6
   b72cc:	f004 f82d 	bl	bb32a <memcpy>
    _offset += size;
   b72d0:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b72d2:	4423      	add	r3, r4
   b72d4:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b72d6:	4620      	mov	r0, r4
   b72d8:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b72da:	4604      	mov	r4, r0
   b72dc:	e7f1      	b.n	b72c2 <_ZN3UDP5writeEPKhj+0xe>

000b72de <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b72de:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b72e0:	6803      	ldr	r3, [r0, #0]
   b72e2:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b72e4:	4604      	mov	r4, r0
   b72e6:	460f      	mov	r7, r1
   b72e8:	4616      	mov	r6, r2
    if (available()) {
   b72ea:	4798      	blx	r3
   b72ec:	b190      	cbz	r0, b7314 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b72ee:	6823      	ldr	r3, [r4, #0]
   b72f0:	4620      	mov	r0, r4
   b72f2:	691b      	ldr	r3, [r3, #16]
   b72f4:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b72f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b72f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b72fa:	4286      	cmp	r6, r0
   b72fc:	bfa8      	it	ge
   b72fe:	4606      	movge	r6, r0
   b7300:	4419      	add	r1, r3
   b7302:	4632      	mov	r2, r6
   b7304:	4638      	mov	r0, r7
   b7306:	f004 f810 	bl	bb32a <memcpy>
        _offset += read;
   b730a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b730c:	4433      	add	r3, r6
   b730e:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b7310:	4630      	mov	r0, r6
   b7312:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b7314:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b7318:	e7fa      	b.n	b7310 <_ZN3UDP4readEPhj+0x32>

000b731a <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
=======
   b5388:	b570      	push	{r4, r5, r6, lr}
   b538a:	4604      	mov	r4, r0
   b538c:	4605      	mov	r5, r0
   b538e:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5392:	4628      	mov	r0, r5
   b5394:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b5398:	f000 f815 	bl	b53c6 <_ZN12mDNSResolver8ResponseC1Ev>
   b539c:	42ae      	cmp	r6, r5
   b539e:	d1f8      	bne.n	b5392 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b53a0:	2300      	movs	r3, #0
   b53a2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b53a6:	4620      	mov	r0, r4
   b53a8:	bd70      	pop	{r4, r5, r6, pc}

000b53aa <_ZN9IPAddressaSImEERS_T_.isra.0>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
<<<<<<< HEAD
   b731a:	b530      	push	{r4, r5, lr}
   b731c:	b087      	sub	sp, #28
   b731e:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7320:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7322:	4668      	mov	r0, sp
   b7324:	f002 fb3a 	bl	b999c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b732a:	3404      	adds	r4, #4
   b732c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b732e:	682b      	ldr	r3, [r5, #0]
   b7330:	7023      	strb	r3, [r4, #0]
    }
   b7332:	b007      	add	sp, #28
   b7334:	bd30      	pop	{r4, r5, pc}
	...

000b7338 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b7338:	b5f0      	push	{r4, r5, r6, r7, lr}
   b733a:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b733c:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b733e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b7340:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b7342:	4a0a      	ldr	r2, [pc, #40]	; (b736c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b7344:	9202      	str	r2, [sp, #8]
   b7346:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b7348:	468c      	mov	ip, r1
   b734a:	4606      	mov	r6, r0
   b734c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b734e:	ad03      	add	r5, sp, #12
   b7350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7352:	6823      	ldr	r3, [r4, #0]
   b7354:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b7356:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b735a:	9300      	str	r3, [sp, #0]
   b735c:	4672      	mov	r2, lr
   b735e:	ab02      	add	r3, sp, #8
   b7360:	4661      	mov	r1, ip
   b7362:	4630      	mov	r0, r6
   b7364:	47b8      	blx	r7
    }
   b7366:	b009      	add	sp, #36	; 0x24
   b7368:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b736a:	bf00      	nop
   b736c:	000bddfc 	.word	0x000bddfc

000b7370 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b7370:	b570      	push	{r4, r5, r6, lr}
   b7372:	4604      	mov	r4, r0
   b7374:	4b05      	ldr	r3, [pc, #20]	; (b738c <_ZN3UDP8remoteIPEv+0x1c>)
   b7376:	f844 3b04 	str.w	r3, [r4], #4
   b737a:	f101 0520 	add.w	r5, r1, #32
   b737e:	4606      	mov	r6, r0
   b7380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7384:	682b      	ldr	r3, [r5, #0]
   b7386:	7023      	strb	r3, [r4, #0]
   b7388:	4630      	mov	r0, r6
   b738a:	bd70      	pop	{r4, r5, r6, pc}
   b738c:	000bddfc 	.word	0x000bddfc

000b7390 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b7390:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b7392:	7843      	ldrb	r3, [r0, #1]
   b7394:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b7396:	b08d      	sub	sp, #52	; 0x34
   b7398:	4605      	mov	r5, r0
   b739a:	460c      	mov	r4, r1
   b739c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b739e:	d104      	bne.n	b73aa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b73a0:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b73a2:	4620      	mov	r0, r4
   b73a4:	f7ff ffb9 	bl	b731a <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b73a8:	e022      	b.n	b73f0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b73aa:	2b0a      	cmp	r3, #10
   b73ac:	d125      	bne.n	b73fa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b73ae:	2211      	movs	r2, #17
   b73b0:	2100      	movs	r1, #0
   b73b2:	a801      	add	r0, sp, #4
   b73b4:	f003 ffe1 	bl	bb37a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b73b8:	68ab      	ldr	r3, [r5, #8]
   b73ba:	b303      	cbz	r3, b73fe <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b73bc:	f105 0308 	add.w	r3, r5, #8
   b73c0:	ae01      	add	r6, sp, #4
   b73c2:	f105 0c18 	add.w	ip, r5, #24
   b73c6:	6818      	ldr	r0, [r3, #0]
   b73c8:	6859      	ldr	r1, [r3, #4]
   b73ca:	4632      	mov	r2, r6
   b73cc:	c203      	stmia	r2!, {r0, r1}
   b73ce:	3308      	adds	r3, #8
   b73d0:	4563      	cmp	r3, ip
   b73d2:	4616      	mov	r6, r2
   b73d4:	d1f7      	bne.n	b73c6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b73d6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b73d8:	a901      	add	r1, sp, #4
   b73da:	a806      	add	r0, sp, #24
   b73dc:	ae07      	add	r6, sp, #28
            a.v = 6;
   b73de:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b73e2:	f002 fa91 	bl	b9908 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b73e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b73e8:	3404      	adds	r4, #4
   b73ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b73ec:	6833      	ldr	r3, [r6, #0]
   b73ee:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b73f0:	b11f      	cbz	r7, b73fa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b73f2:	8868      	ldrh	r0, [r5, #2]
   b73f4:	f7ff fb42 	bl	b6a7c <inet_ntohs>
   b73f8:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b73fa:	b00d      	add	sp, #52	; 0x34
   b73fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b73fe:	68eb      	ldr	r3, [r5, #12]
   b7400:	2b00      	cmp	r3, #0
   b7402:	d1db      	bne.n	b73bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b7404:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7408:	692e      	ldr	r6, [r5, #16]
   b740a:	f7ff fb2f 	bl	b6a6c <inet_htonl>
   b740e:	4286      	cmp	r6, r0
   b7410:	d1d4      	bne.n	b73bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b7412:	f105 0114 	add.w	r1, r5, #20
   b7416:	e7c4      	b.n	b73a2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b7418 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b7418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b741c:	4617      	mov	r7, r2
   b741e:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b7420:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b7422:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b7424:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b7426:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b7428:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b742a:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b742c:	f7ff f9c4 	bl	b67b8 <netdb_getaddrinfo>
   b7430:	1e04      	subs	r4, r0, #0
   b7432:	db20      	blt.n	b7476 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b7434:	9b01      	ldr	r3, [sp, #4]
   b7436:	b32b      	cbz	r3, b7484 <_ZN3UDP11beginPacketEPKct+0x6c>
   b7438:	695b      	ldr	r3, [r3, #20]
   b743a:	b31b      	cbz	r3, b7484 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b743c:	a802      	add	r0, sp, #8
   b743e:	f002 fa55 	bl	b98ec <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7442:	9b01      	ldr	r3, [sp, #4]
   b7444:	2200      	movs	r2, #0
   b7446:	6958      	ldr	r0, [r3, #20]
   b7448:	a902      	add	r1, sp, #8
   b744a:	f7ff ffa1 	bl	b7390 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b744e:	a802      	add	r0, sp, #8
   b7450:	f002 fa74 	bl	b993c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7454:	b1b0      	cbz	r0, b7484 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b7456:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7458:	ad03      	add	r5, sp, #12
   b745a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b745e:	4b0b      	ldr	r3, [pc, #44]	; (b748c <_ZN3UDP11beginPacketEPKct+0x74>)
   b7460:	9308      	str	r3, [sp, #32]
   b7462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7464:	ac09      	add	r4, sp, #36	; 0x24
   b7466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7468:	682b      	ldr	r3, [r5, #0]
   b746a:	7023      	strb	r3, [r4, #0]
   b746c:	463a      	mov	r2, r7
   b746e:	a908      	add	r1, sp, #32
   b7470:	4630      	mov	r0, r6
   b7472:	47c0      	blx	r8
   b7474:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b7476:	9801      	ldr	r0, [sp, #4]
   b7478:	f7ff f996 	bl	b67a8 <netdb_freeaddrinfo>
}
   b747c:	4620      	mov	r0, r4
   b747e:	b00e      	add	sp, #56	; 0x38
   b7480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b7484:	f04f 34ff 	mov.w	r4, #4294967295
   b7488:	e7f5      	b.n	b7476 <_ZN3UDP11beginPacketEPKct+0x5e>
   b748a:	bf00      	nop
   b748c:	000bddfc 	.word	0x000bddfc

000b7490 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b7490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b7494:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b7498:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b749c:	b090      	sub	sp, #64	; 0x40
   b749e:	4605      	mov	r5, r0
   b74a0:	460e      	mov	r6, r1
   b74a2:	4690      	mov	r8, r2
   b74a4:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b74a6:	db3c      	blt.n	b7522 <_ZN3UDP13receivePacketEPhjm+0x92>
   b74a8:	2900      	cmp	r1, #0
   b74aa:	d03a      	beq.n	b7522 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b74ac:	f04f 0a1c 	mov.w	sl, #28
   b74b0:	af09      	add	r7, sp, #36	; 0x24
   b74b2:	4652      	mov	r2, sl
   b74b4:	2100      	movs	r1, #0
   b74b6:	4638      	mov	r0, r7
   b74b8:	f003 ff5f 	bl	bb37a <memset>
        socklen_t slen = sizeof(saddr);
   b74bc:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b74c0:	b1dc      	cbz	r4, b74fa <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b74c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b74c6:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b74ca:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b74ce:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b74d0:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b74d2:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b74d4:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b74d8:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b74da:	9300      	str	r3, [sp, #0]
   b74dc:	f241 0206 	movw	r2, #4102	; 0x1006
   b74e0:	446b      	add	r3, sp
   b74e2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b74e6:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b74e8:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b74ea:	f7ff fb57 	bl	b6b9c <sock_setsockopt>
            if (ret) {
   b74ee:	4604      	mov	r4, r0
   b74f0:	b120      	cbz	r0, b74fc <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b74f2:	4620      	mov	r0, r4
   b74f4:	b010      	add	sp, #64	; 0x40
   b74f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b74fa:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b74fc:	ab03      	add	r3, sp, #12
   b74fe:	e9cd 7300 	strd	r7, r3, [sp]
   b7502:	6968      	ldr	r0, [r5, #20]
   b7504:	4623      	mov	r3, r4
   b7506:	4642      	mov	r2, r8
   b7508:	4631      	mov	r1, r6
   b750a:	f7ff fb67 	bl	b6bdc <sock_recvfrom>
        if (ret >= 0) {
   b750e:	1e04      	subs	r4, r0, #0
   b7510:	dbef      	blt.n	b74f2 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b7512:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b7516:	f105 011c 	add.w	r1, r5, #28
   b751a:	4638      	mov	r0, r7
   b751c:	f7ff ff38 	bl	b7390 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b7520:	e7e7      	b.n	b74f2 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b7522:	f04f 34ff 	mov.w	r4, #4294967295
   b7526:	e7e4      	b.n	b74f2 <_ZN3UDP13receivePacketEPhjm+0x62>

000b7528 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b7528:	b538      	push	{r3, r4, r5, lr}
   b752a:	4605      	mov	r5, r0
   b752c:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b752e:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b7530:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b7532:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b7534:	d110      	bne.n	b7558 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b7536:	f640 231c 	movw	r3, #2588	; 0xa1c
   b753a:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b753c:	f7ff faa6 	bl	b6a8c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b7540:	3408      	adds	r4, #8
   b7542:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b7544:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b7548:	3514      	adds	r5, #20
   b754a:	f853 2b04 	ldr.w	r2, [r3], #4
   b754e:	f844 2b04 	str.w	r2, [r4], #4
   b7552:	42ab      	cmp	r3, r5
   b7554:	d1f9      	bne.n	b754a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b7556:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b7558:	2b04      	cmp	r3, #4
   b755a:	d1fc      	bne.n	b7556 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b755c:	f44f 7304 	mov.w	r3, #528	; 0x210
   b7560:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b7562:	f7ff fa93 	bl	b6a8c <inet_htons>
   b7566:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b7568:	6868      	ldr	r0, [r5, #4]
   b756a:	f7ff fa7f 	bl	b6a6c <inet_htonl>
   b756e:	6060      	str	r0, [r4, #4]
}
   b7570:	e7f1      	b.n	b7556 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b7572 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b7572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7576:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b7578:	af03      	add	r7, sp, #12
   b757a:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b757e:	4698      	mov	r8, r3
   b7580:	4604      	mov	r4, r0
   b7582:	460d      	mov	r5, r1
   b7584:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b7586:	2100      	movs	r1, #0
   b7588:	464a      	mov	r2, r9
   b758a:	4638      	mov	r0, r7
   b758c:	f003 fef5 	bl	bb37a <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b7590:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b7594:	463a      	mov	r2, r7
   b7596:	4640      	mov	r0, r8
   b7598:	f7ff ffc6 	bl	b7528 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b759c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b75a0:	b153      	cbz	r3, b75b8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b75a2:	e9cd 7900 	strd	r7, r9, [sp]
   b75a6:	6960      	ldr	r0, [r4, #20]
   b75a8:	2300      	movs	r3, #0
   b75aa:	4632      	mov	r2, r6
   b75ac:	4629      	mov	r1, r5
   b75ae:	f7ff fb25 	bl	b6bfc <sock_sendto>
}
   b75b2:	b00b      	add	sp, #44	; 0x2c
   b75b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b75b8:	f04f 30ff 	mov.w	r0, #4294967295
   b75bc:	e7f9      	b.n	b75b2 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>

000b75be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>:
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b75be:	b5f0      	push	{r4, r5, r6, r7, lr}
   b75c0:	b091      	sub	sp, #68	; 0x44
   b75c2:	460c      	mov	r4, r1
   b75c4:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   b75c6:	2100      	movs	r1, #0
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b75c8:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   b75ca:	a809      	add	r0, sp, #36	; 0x24
   b75cc:	221c      	movs	r2, #28
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b75ce:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   b75d0:	f003 fed3 	bl	bb37a <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   b75d4:	aa09      	add	r2, sp, #36	; 0x24
   b75d6:	2100      	movs	r1, #0
   b75d8:	4620      	mov	r0, r4
   b75da:	f7ff ffa5 	bl	b7528 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   b75de:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b75e2:	2b02      	cmp	r3, #2
   b75e4:	d12d      	bne.n	b7642 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x84>
        struct ip_mreq mreq = {};
   b75e6:	2300      	movs	r3, #0
   b75e8:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   b75ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b75ec:	9304      	str	r3, [sp, #16]
        if (ifindex != 0) {
   b75ee:	b1bd      	cbz	r5, b7620 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
            if (!if_get_by_index(ifindex, &iface)) {
   b75f0:	a902      	add	r1, sp, #8
   b75f2:	4628      	mov	r0, r5
   b75f4:	f7ff f908 	bl	b6808 <if_get_by_index>
   b75f8:	b990      	cbnz	r0, b7620 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
                struct if_addrs* addrs = nullptr;
   b75fa:	9003      	str	r0, [sp, #12]
                if (!if_get_addrs(iface, &addrs)) {
   b75fc:	a903      	add	r1, sp, #12
   b75fe:	9802      	ldr	r0, [sp, #8]
   b7600:	f7ff f90a 	bl	b6818 <if_get_addrs>
   b7604:	b948      	cbnz	r0, b761a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b7606:	9b03      	ldr	r3, [sp, #12]
   b7608:	b13b      	cbz	r3, b761a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                        auto ifaddr = a->if_addr->addr;
   b760a:	68da      	ldr	r2, [r3, #12]
   b760c:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   b760e:	7851      	ldrb	r1, [r2, #1]
   b7610:	2902      	cmp	r1, #2
   b7612:	d114      	bne.n	b763e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   b7614:	6852      	ldr	r2, [r2, #4]
   b7616:	b192      	cbz	r2, b763e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   b7618:	9205      	str	r2, [sp, #20]
                SCOPE_GUARD({
   b761a:	9803      	ldr	r0, [sp, #12]
   b761c:	f7ff f904 	bl	b6828 <if_free_if_addrs>
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   b7620:	2f00      	cmp	r7, #0
   b7622:	f04f 0308 	mov.w	r3, #8
   b7626:	9300      	str	r3, [sp, #0]
   b7628:	bf18      	it	ne
   b762a:	2203      	movne	r2, #3
   b762c:	ab04      	add	r3, sp, #16
   b762e:	bf08      	it	eq
   b7630:	2204      	moveq	r2, #4
   b7632:	2100      	movs	r1, #0
   b7634:	4630      	mov	r0, r6
   b7636:	f7ff fab1 	bl	b6b9c <sock_setsockopt>
}
   b763a:	b011      	add	sp, #68	; 0x44
   b763c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b763e:	681b      	ldr	r3, [r3, #0]
   b7640:	e7e2      	b.n	b7608 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x4a>
    } else if (s.ss_family == AF_INET6) {
   b7642:	2b0a      	cmp	r3, #10
   b7644:	d115      	bne.n	b7672 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0xb4>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   b7646:	ab0b      	add	r3, sp, #44	; 0x2c
   b7648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b764a:	ac04      	add	r4, sp, #16
   b764c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b7650:	2f00      	cmp	r7, #0
   b7652:	f04f 0314 	mov.w	r3, #20
   b7656:	9300      	str	r3, [sp, #0]
   b7658:	bf18      	it	ne
   b765a:	220c      	movne	r2, #12
   b765c:	4623      	mov	r3, r4
   b765e:	bf08      	it	eq
   b7660:	220d      	moveq	r2, #13
   b7662:	2129      	movs	r1, #41	; 0x29
   b7664:	4630      	mov	r0, r6
        mreq.ipv6mr_interface = ifindex;
   b7666:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b7668:	f7ff fa98 	bl	b6b9c <sock_setsockopt>
   b766c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7670:	e7e3      	b.n	b763a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>
    return -1;
   b7672:	f04f 30ff 	mov.w	r0, #4294967295
   b7676:	e7e0      	b.n	b763a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>

000b7678 <_ZN3UDPC1Ev>:
UDP::UDP()
   b7678:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b767a:	2500      	movs	r5, #0
   b767c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7680:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b7684:	4b0b      	ldr	r3, [pc, #44]	; (b76b4 <_ZN3UDPC1Ev+0x3c>)
   b7686:	f103 0208 	add.w	r2, r3, #8
   b768a:	336c      	adds	r3, #108	; 0x6c
   b768c:	6103      	str	r3, [r0, #16]
   b768e:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b7692:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b7694:	6002      	str	r2, [r0, #0]
   b7696:	6143      	str	r3, [r0, #20]
   b7698:	301c      	adds	r0, #28
   b769a:	f002 f927 	bl	b98ec <_ZN9IPAddressC1Ev>
   b769e:	f44f 7300 	mov.w	r3, #512	; 0x200
   b76a2:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b76a6:	86e5      	strh	r5, [r4, #54]	; 0x36
   b76a8:	8725      	strh	r5, [r4, #56]	; 0x38
   b76aa:	63e5      	str	r5, [r4, #60]	; 0x3c
   b76ac:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b76b0:	4620      	mov	r0, r4
   b76b2:	bd38      	pop	{r3, r4, r5, pc}
   b76b4:	000bdb50 	.word	0x000bdb50

000b76b8 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b76b8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b76ba:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b76be:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b76c0:	b123      	cbz	r3, b76cc <_ZN3UDP13releaseBufferEv+0x14>
   b76c2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b76c4:	b110      	cbz	r0, b76cc <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b76c6:	2101      	movs	r1, #1
   b76c8:	f7fc fceb 	bl	b40a2 <_ZdlPvj>
    _buffer = NULL;
   b76cc:	2300      	movs	r3, #0
   b76ce:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b76d0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b76d4:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b76d6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b76d8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b76da:	bd10      	pop	{r4, pc}

000b76dc <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b76dc:	b570      	push	{r4, r5, r6, lr}
   b76de:	4604      	mov	r4, r0
   b76e0:	4616      	mov	r6, r2
   b76e2:	460d      	mov	r5, r1
    releaseBuffer();
   b76e4:	f7ff ffe8 	bl	b76b8 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b76e8:	2300      	movs	r3, #0
    _buffer = buffer;
   b76ea:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b76ec:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b76ee:	b12e      	cbz	r6, b76fc <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b76f0:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b76f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b76f4:	3800      	subs	r0, #0
   b76f6:	bf18      	it	ne
   b76f8:	2001      	movne	r0, #1
   b76fa:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b76fc:	2d00      	cmp	r5, #0
   b76fe:	d0f8      	beq.n	b76f2 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b7700:	4628      	mov	r0, r5
   b7702:	f7fc fcca 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b7706:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b7708:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b770a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b770e:	2800      	cmp	r0, #0
   b7710:	d0ef      	beq.n	b76f2 <_ZN3UDP9setBufferEjPh+0x16>
   b7712:	e7ed      	b.n	b76f0 <_ZN3UDP9setBufferEjPh+0x14>

000b7714 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b7714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7716:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b7718:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b771a:	4605      	mov	r5, r0
   b771c:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b771e:	b91a      	cbnz	r2, b7728 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b7720:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b7722:	b109      	cbz	r1, b7728 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b7724:	f7ff ffda 	bl	b76dc <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b7728:	3404      	adds	r4, #4
   b772a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b772c:	f105 0620 	add.w	r6, r5, #32
   b7730:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7732:	6823      	ldr	r3, [r4, #0]
   b7734:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b7736:	2300      	movs	r3, #0
}
   b7738:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b773a:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b773c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b773e:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b7740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7742 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b7742:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b7744:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b7746:	4604      	mov	r4, r0
   b7748:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b774a:	b92a      	cbnz	r2, b7758 <_ZN3UDP11parsePacketEm+0x16>
   b774c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b774e:	b119      	cbz	r1, b7758 <_ZN3UDP11parsePacketEm+0x16>
   b7750:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b7752:	f7ff ffc3 	bl	b76dc <_ZN3UDP9setBufferEjPh>
   b7756:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b7758:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b775a:	2200      	movs	r2, #0
   b775c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b775e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b7760:	b141      	cbz	r1, b7774 <_ZN3UDP11parsePacketEm+0x32>
   b7762:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b7764:	b132      	cbz	r2, b7774 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b7766:	6820      	ldr	r0, [r4, #0]
   b7768:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b776a:	4620      	mov	r0, r4
   b776c:	47a8      	blx	r5
        if (result > 0) {
   b776e:	2800      	cmp	r0, #0
            _total = result;
   b7770:	bfc8      	it	gt
   b7772:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b7774:	6823      	ldr	r3, [r4, #0]
   b7776:	691b      	ldr	r3, [r3, #16]
   b7778:	4620      	mov	r0, r4
}
   b777a:	b003      	add	sp, #12
   b777c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b7780:	4718      	bx	r3
	...

000b7784 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b7784:	b510      	push	{r4, lr}
   b7786:	4b07      	ldr	r3, [pc, #28]	; (b77a4 <_ZN3UDPD1Ev+0x20>)
   b7788:	f103 0208 	add.w	r2, r3, #8
   b778c:	336c      	adds	r3, #108	; 0x6c
   b778e:	4604      	mov	r4, r0
   b7790:	6002      	str	r2, [r0, #0]
   b7792:	6103      	str	r3, [r0, #16]
   b7794:	f7ff fd80 	bl	b7298 <_ZN3UDP4stopEv>
   b7798:	4620      	mov	r0, r4
   b779a:	f7ff ff8d 	bl	b76b8 <_ZN3UDP13releaseBufferEv>
   b779e:	4620      	mov	r0, r4
   b77a0:	bd10      	pop	{r4, pc}
   b77a2:	bf00      	nop
   b77a4:	000bdb50 	.word	0x000bdb50

000b77a8 <_ZN3UDPD0Ev>:
   b77a8:	b510      	push	{r4, lr}
   b77aa:	4604      	mov	r4, r0
   b77ac:	f7ff ffea 	bl	b7784 <_ZN3UDPD1Ev>
   b77b0:	4620      	mov	r0, r4
   b77b2:	214c      	movs	r1, #76	; 0x4c
   b77b4:	f7fc fc75 	bl	b40a2 <_ZdlPvj>
   b77b8:	4620      	mov	r0, r4
   b77ba:	bd10      	pop	{r4, pc}

000b77bc <_ZN3UDP13joinMulticastERK9IPAddress>:

int UDP::joinMulticast(const IPAddress& ip) {
   b77bc:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b77be:	6944      	ldr	r4, [r0, #20]
   b77c0:	2c00      	cmp	r4, #0
   b77c2:	db07      	blt.n	b77d4 <_ZN3UDP13joinMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b77c4:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b77c8:	2301      	movs	r3, #1
   b77ca:	4620      	mov	r0, r4
}
   b77cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b77d0:	f7ff bef5 	b.w	b75be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b77d4:	f04f 30ff 	mov.w	r0, #4294967295
   b77d8:	f85d 4b04 	ldr.w	r4, [sp], #4
   b77dc:	4770      	bx	lr

000b77de <_ZN3UDP14leaveMulticastERK9IPAddress>:

int UDP::leaveMulticast(const IPAddress& ip) {
   b77de:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b77e0:	6944      	ldr	r4, [r0, #20]
   b77e2:	2c00      	cmp	r4, #0
   b77e4:	db07      	blt.n	b77f6 <_ZN3UDP14leaveMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b77e6:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b77ea:	2300      	movs	r3, #0
   b77ec:	4620      	mov	r0, r4
}
   b77ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b77f2:	f7ff bee4 	b.w	b75be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b77f6:	f04f 30ff 	mov.w	r0, #4294967295
   b77fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   b77fe:	4770      	bx	lr

000b7800 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b7800:	4770      	bx	lr

000b7802 <_ZN21StringPrintableHelperD0Ev>:
   b7802:	b510      	push	{r4, lr}
   b7804:	210c      	movs	r1, #12
   b7806:	4604      	mov	r4, r0
   b7808:	f7fc fc4b 	bl	b40a2 <_ZdlPvj>
   b780c:	4620      	mov	r0, r4
   b780e:	bd10      	pop	{r4, pc}

000b7810 <_ZN6StringD1Ev>:
String::~String()
   b7810:	b510      	push	{r4, lr}
   b7812:	4604      	mov	r4, r0
	free(buffer);
   b7814:	6800      	ldr	r0, [r0, #0]
   b7816:	f7ff fb3d 	bl	b6e94 <free>
}
   b781a:	4620      	mov	r0, r4
   b781c:	bd10      	pop	{r4, pc}

000b781e <_ZN6String10invalidateEv>:
{
   b781e:	b510      	push	{r4, lr}
   b7820:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7822:	6800      	ldr	r0, [r0, #0]
   b7824:	b108      	cbz	r0, b782a <_ZN6String10invalidateEv+0xc>
   b7826:	f7ff fb35 	bl	b6e94 <free>
	buffer = NULL;
   b782a:	2300      	movs	r3, #0
	capacity = len = 0;
   b782c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7830:	6023      	str	r3, [r4, #0]
}
   b7832:	bd10      	pop	{r4, pc}

000b7834 <_ZN6String12changeBufferEj>:
{
   b7834:	b538      	push	{r3, r4, r5, lr}
   b7836:	4604      	mov	r4, r0
   b7838:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b783a:	6800      	ldr	r0, [r0, #0]
   b783c:	3101      	adds	r1, #1
   b783e:	f7ff fb31 	bl	b6ea4 <realloc>
	if (newbuffer) {
   b7842:	b110      	cbz	r0, b784a <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b7844:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7848:	2001      	movs	r0, #1
}
   b784a:	bd38      	pop	{r3, r4, r5, pc}

000b784c <_ZN6String7reserveEj>:
{
   b784c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b784e:	6803      	ldr	r3, [r0, #0]
{
   b7850:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7852:	b123      	cbz	r3, b785e <_ZN6String7reserveEj+0x12>
   b7854:	6843      	ldr	r3, [r0, #4]
   b7856:	428b      	cmp	r3, r1
   b7858:	d301      	bcc.n	b785e <_ZN6String7reserveEj+0x12>
   b785a:	2001      	movs	r0, #1
}
   b785c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b785e:	4620      	mov	r0, r4
   b7860:	f7ff ffe8 	bl	b7834 <_ZN6String12changeBufferEj>
   b7864:	2800      	cmp	r0, #0
   b7866:	d0f9      	beq.n	b785c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7868:	68a3      	ldr	r3, [r4, #8]
   b786a:	2b00      	cmp	r3, #0
   b786c:	d1f5      	bne.n	b785a <_ZN6String7reserveEj+0xe>
   b786e:	6822      	ldr	r2, [r4, #0]
   b7870:	7013      	strb	r3, [r2, #0]
   b7872:	e7f2      	b.n	b785a <_ZN6String7reserveEj+0xe>

000b7874 <_ZN6String4copyEPKcj>:
{
   b7874:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7876:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7878:	4611      	mov	r1, r2
   b787a:	9201      	str	r2, [sp, #4]
{
   b787c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b787e:	f7ff ffe5 	bl	b784c <_ZN6String7reserveEj>
   b7882:	9a01      	ldr	r2, [sp, #4]
   b7884:	b928      	cbnz	r0, b7892 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7886:	4620      	mov	r0, r4
   b7888:	f7ff ffc9 	bl	b781e <_ZN6String10invalidateEv>
}
   b788c:	4620      	mov	r0, r4
   b788e:	b003      	add	sp, #12
   b7890:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7892:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7894:	4629      	mov	r1, r5
   b7896:	6820      	ldr	r0, [r4, #0]
   b7898:	f003 fd47 	bl	bb32a <memcpy>
	buffer[len] = 0;
   b789c:	6822      	ldr	r2, [r4, #0]
   b789e:	68a3      	ldr	r3, [r4, #8]
   b78a0:	2100      	movs	r1, #0
   b78a2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b78a4:	e7f2      	b.n	b788c <_ZN6String4copyEPKcj+0x18>

000b78a6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b78a6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b78a8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b78aa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b78ae:	4604      	mov	r4, r0
	len = 0;
   b78b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b78b2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b78b4:	b141      	cbz	r1, b78c8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b78b6:	4608      	mov	r0, r1
   b78b8:	9101      	str	r1, [sp, #4]
   b78ba:	f003 fdd4 	bl	bb466 <strlen>
   b78be:	9901      	ldr	r1, [sp, #4]
   b78c0:	4602      	mov	r2, r0
   b78c2:	4620      	mov	r0, r4
   b78c4:	f7ff ffd6 	bl	b7874 <_ZN6String4copyEPKcj>
}
   b78c8:	4620      	mov	r0, r4
   b78ca:	b002      	add	sp, #8
   b78cc:	bd10      	pop	{r4, pc}

000b78ce <_ZN6String4moveERS_>:
{
   b78ce:	b538      	push	{r3, r4, r5, lr}
   b78d0:	4605      	mov	r5, r0
	if (buffer) {
   b78d2:	6800      	ldr	r0, [r0, #0]
{
   b78d4:	460c      	mov	r4, r1
	if (buffer) {
   b78d6:	b168      	cbz	r0, b78f4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b78d8:	686a      	ldr	r2, [r5, #4]
   b78da:	688b      	ldr	r3, [r1, #8]
   b78dc:	429a      	cmp	r2, r3
   b78de:	d307      	bcc.n	b78f0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b78e0:	6809      	ldr	r1, [r1, #0]
   b78e2:	f003 fd9a 	bl	bb41a <strcpy>
			len = rhs.len;
   b78e6:	68a3      	ldr	r3, [r4, #8]
   b78e8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b78ea:	2300      	movs	r3, #0
	rhs.len = 0;
   b78ec:	60a3      	str	r3, [r4, #8]
}
   b78ee:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b78f0:	f7ff fad0 	bl	b6e94 <free>
	buffer = rhs.buffer;
   b78f4:	6823      	ldr	r3, [r4, #0]
   b78f6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b78f8:	6863      	ldr	r3, [r4, #4]
   b78fa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b78fc:	68a3      	ldr	r3, [r4, #8]
   b78fe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7900:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7902:	e9c4 3300 	strd	r3, r3, [r4]
   b7906:	e7f1      	b.n	b78ec <_ZN6String4moveERS_+0x1e>

000b7908 <_ZN6StringaSEOS_>:
	if (this != &rval) move(rval);
   b7908:	4288      	cmp	r0, r1
{
   b790a:	b510      	push	{r4, lr}
   b790c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b790e:	d001      	beq.n	b7914 <_ZN6StringaSEOS_+0xc>
   b7910:	f7ff ffdd 	bl	b78ce <_ZN6String4moveERS_>
}
   b7914:	4620      	mov	r0, r4
   b7916:	bd10      	pop	{r4, pc}

000b7918 <_ZN6StringaSEPKc>:
{
   b7918:	b513      	push	{r0, r1, r4, lr}
   b791a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b791c:	b159      	cbz	r1, b7936 <_ZN6StringaSEPKc+0x1e>
   b791e:	4608      	mov	r0, r1
   b7920:	9101      	str	r1, [sp, #4]
   b7922:	f003 fda0 	bl	bb466 <strlen>
   b7926:	9901      	ldr	r1, [sp, #4]
   b7928:	4602      	mov	r2, r0
   b792a:	4620      	mov	r0, r4
   b792c:	f7ff ffa2 	bl	b7874 <_ZN6String4copyEPKcj>
}
   b7930:	4620      	mov	r0, r4
   b7932:	b002      	add	sp, #8
   b7934:	bd10      	pop	{r4, pc}
	else invalidate();
   b7936:	f7ff ff72 	bl	b781e <_ZN6String10invalidateEv>
   b793a:	e7f9      	b.n	b7930 <_ZN6StringaSEPKc+0x18>

000b793c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b793c:	b510      	push	{r4, lr}
   b793e:	4604      	mov	r4, r0
   b7940:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7942:	2300      	movs	r3, #0
	capacity = 0;
   b7944:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7948:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b794a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b794c:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b794e:	a901      	add	r1, sp, #4
   b7950:	f7ff fbd6 	bl	b7100 <itoa>
	*this = buf;
   b7954:	a901      	add	r1, sp, #4
   b7956:	4620      	mov	r0, r4
   b7958:	f7ff ffde 	bl	b7918 <_ZN6StringaSEPKc>
}
   b795c:	4620      	mov	r0, r4
   b795e:	b00a      	add	sp, #40	; 0x28
   b7960:	bd10      	pop	{r4, pc}

000b7962 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b7962:	b510      	push	{r4, lr}
   b7964:	4604      	mov	r4, r0
   b7966:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7968:	2300      	movs	r3, #0
	capacity = 0;
   b796a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b796e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7970:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b7972:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b7974:	a901      	add	r1, sp, #4
   b7976:	f7ff fb5a 	bl	b702e <ltoa>
	*this = buf;
   b797a:	a901      	add	r1, sp, #4
   b797c:	4620      	mov	r0, r4
   b797e:	f7ff ffcb 	bl	b7918 <_ZN6StringaSEPKc>
}
   b7982:	4620      	mov	r0, r4
   b7984:	b00a      	add	sp, #40	; 0x28
   b7986:	bd10      	pop	{r4, pc}

000b7988 <_ZN6String6concatEPKcj>:
{
   b7988:	b570      	push	{r4, r5, r6, lr}
   b798a:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b798c:	460e      	mov	r6, r1
   b798e:	b909      	cbnz	r1, b7994 <_ZN6String6concatEPKcj+0xc>
   b7990:	2000      	movs	r0, #0
}
   b7992:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7994:	b16a      	cbz	r2, b79b2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7996:	6884      	ldr	r4, [r0, #8]
   b7998:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b799a:	4621      	mov	r1, r4
   b799c:	f7ff ff56 	bl	b784c <_ZN6String7reserveEj>
   b79a0:	2800      	cmp	r0, #0
   b79a2:	d0f5      	beq.n	b7990 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b79a4:	6828      	ldr	r0, [r5, #0]
   b79a6:	68ab      	ldr	r3, [r5, #8]
   b79a8:	4631      	mov	r1, r6
   b79aa:	4418      	add	r0, r3
   b79ac:	f003 fd35 	bl	bb41a <strcpy>
	len = newlen;
   b79b0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b79b2:	2001      	movs	r0, #1
   b79b4:	e7ed      	b.n	b7992 <_ZN6String6concatEPKcj+0xa>

000b79b6 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b79b6:	688a      	ldr	r2, [r1, #8]
   b79b8:	6809      	ldr	r1, [r1, #0]
   b79ba:	f7ff bfe5 	b.w	b7988 <_ZN6String6concatEPKcj>

000b79be <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b79be:	b538      	push	{r3, r4, r5, lr}
   b79c0:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b79c2:	6880      	ldr	r0, [r0, #8]
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b79c4:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b79c6:	f7ff ffdf 	bl	b7988 <_ZN6String6concatEPKcj>
   b79ca:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b79cc:	6898      	ldr	r0, [r3, #8]
    }
   b79ce:	1b40      	subs	r0, r0, r5
   b79d0:	bd38      	pop	{r3, r4, r5, pc}

000b79d2 <_ZN6String6concatEPKc>:
{
   b79d2:	b513      	push	{r0, r1, r4, lr}
   b79d4:	4604      	mov	r4, r0
}
   b79d6:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b79d8:	b151      	cbz	r1, b79f0 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b79da:	9101      	str	r1, [sp, #4]
   b79dc:	f003 fd43 	bl	bb466 <strlen>
   b79e0:	9901      	ldr	r1, [sp, #4]
   b79e2:	4602      	mov	r2, r0
   b79e4:	4620      	mov	r0, r4
}
   b79e6:	b002      	add	sp, #8
   b79e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b79ec:	f7ff bfcc 	b.w	b7988 <_ZN6String6concatEPKcj>
}
   b79f0:	b002      	add	sp, #8
   b79f2:	bd10      	pop	{r4, pc}

000b79f4 <_ZN6String6concatEc>:
{
   b79f4:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b79f6:	2300      	movs	r3, #0
	buf[0] = c;
   b79f8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b79fc:	2201      	movs	r2, #1
   b79fe:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b7a00:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7a04:	f7ff ffc0 	bl	b7988 <_ZN6String6concatEPKcj>
}
   b7a08:	b003      	add	sp, #12
   b7a0a:	f85d fb04 	ldr.w	pc, [sp], #4

000b7a0e <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b7a0e:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b7a10:	6880      	ldr	r0, [r0, #8]
   b7a12:	f7ff ffef 	bl	b79f4 <_ZN6String6concatEc>
    }
   b7a16:	bd08      	pop	{r3, pc}

000b7a18 <_ZplRK15StringSumHelperRK6String>:
{
   b7a18:	b510      	push	{r4, lr}
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7a1a:	688a      	ldr	r2, [r1, #8]
   b7a1c:	6809      	ldr	r1, [r1, #0]
{
   b7a1e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7a20:	f7ff ffb2 	bl	b7988 <_ZN6String6concatEPKcj>
   b7a24:	b910      	cbnz	r0, b7a2c <_ZplRK15StringSumHelperRK6String+0x14>
   b7a26:	4620      	mov	r0, r4
   b7a28:	f7ff fef9 	bl	b781e <_ZN6String10invalidateEv>
}
   b7a2c:	4620      	mov	r0, r4
   b7a2e:	bd10      	pop	{r4, pc}

000b7a30 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b7a30:	b530      	push	{r4, r5, lr}
   b7a32:	b085      	sub	sp, #20
	buffer = NULL;
   b7a34:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b7a36:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b7a38:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b7a3a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7a3e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7a40:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b7a42:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b7a44:	4b06      	ldr	r3, [pc, #24]	; (b7a60 <_ZN6StringC1ERK9Printable+0x30>)
   b7a46:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b7a48:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b7a4a:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b7a4c:	f7ff fefe 	bl	b784c <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b7a50:	682b      	ldr	r3, [r5, #0]
   b7a52:	a901      	add	r1, sp, #4
   b7a54:	681b      	ldr	r3, [r3, #0]
   b7a56:	4628      	mov	r0, r5
   b7a58:	4798      	blx	r3
}
   b7a5a:	4620      	mov	r0, r4
   b7a5c:	b005      	add	sp, #20
   b7a5e:	bd30      	pop	{r4, r5, pc}
   b7a60:	000bdbc8 	.word	0x000bdbc8

000b7a64 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
   b7a64:	b40e      	push	{r1, r2, r3}
   b7a66:	b570      	push	{r4, r5, r6, lr}
   b7a68:	b087      	sub	sp, #28
   b7a6a:	ad0b      	add	r5, sp, #44	; 0x2c
   b7a6c:	4604      	mov	r4, r0
   b7a6e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a72:	9201      	str	r2, [sp, #4]
   b7a74:	462b      	mov	r3, r5
   b7a76:	2105      	movs	r1, #5
   b7a78:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b7a7a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a7c:	f7ff fa22 	bl	b6ec4 <vsnprintf>
    va_end(marker);

    String result;
   b7a80:	490b      	ldr	r1, [pc, #44]	; (b7ab0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7a82:	4606      	mov	r6, r0
    String result;
   b7a84:	4620      	mov	r0, r4
   b7a86:	f7ff ff0e 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b7a8a:	4631      	mov	r1, r6
   b7a8c:	4620      	mov	r0, r4
   b7a8e:	f7ff fedd 	bl	b784c <_ZN6String7reserveEj>
    if (result.buffer) {
   b7a92:	6820      	ldr	r0, [r4, #0]
   b7a94:	b130      	cbz	r0, b7aa4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7a96:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b7a98:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b7a9a:	462b      	mov	r3, r5
   b7a9c:	1c71      	adds	r1, r6, #1
   b7a9e:	f7ff fa11 	bl	b6ec4 <vsnprintf>
        va_end(marker);
        result.len = n;
   b7aa2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b7aa4:	4620      	mov	r0, r4
   b7aa6:	b007      	add	sp, #28
   b7aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7aac:	b003      	add	sp, #12
   b7aae:	4770      	bx	lr
   b7ab0:	000bd928 	.word	0x000bd928

000b7ab4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7ab4:	4770      	bx	lr

000b7ab6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7ab6:	4770      	bx	lr

000b7ab8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7ab8:	4770      	bx	lr

000b7aba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7aba:	4770      	bx	lr

000b7abc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7abc:	4b06      	ldr	r3, [pc, #24]	; (b7ad8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7abe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7ac0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7ac2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7ac6:	d005      	beq.n	b7ad4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7ac8:	4608      	mov	r0, r1
   b7aca:	f002 fe23 	bl	ba714 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7ace:	2800      	cmp	r0, #0
   b7ad0:	bf08      	it	eq
   b7ad2:	2400      	moveq	r4, #0
      }
   b7ad4:	4620      	mov	r0, r4
   b7ad6:	bd10      	pop	{r4, pc}
   b7ad8:	000bdd78 	.word	0x000bdd78

000b7adc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7adc:	4b06      	ldr	r3, [pc, #24]	; (b7af8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7ade:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7ae0:	b510      	push	{r4, lr}
   b7ae2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7ae6:	d005      	beq.n	b7af4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7ae8:	4608      	mov	r0, r1
   b7aea:	f002 fe13 	bl	ba714 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7aee:	2800      	cmp	r0, #0
   b7af0:	bf08      	it	eq
   b7af2:	2400      	moveq	r4, #0
      }
   b7af4:	4620      	mov	r0, r4
   b7af6:	bd10      	pop	{r4, pc}
   b7af8:	000bdd78 	.word	0x000bdd78

000b7afc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7afc:	4b06      	ldr	r3, [pc, #24]	; (b7b18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7afe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7b00:	b510      	push	{r4, lr}
   b7b02:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7b06:	d005      	beq.n	b7b14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7b08:	4608      	mov	r0, r1
   b7b0a:	f002 fe03 	bl	ba714 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7b0e:	2800      	cmp	r0, #0
   b7b10:	bf08      	it	eq
   b7b12:	2400      	moveq	r4, #0
      }
   b7b14:	4620      	mov	r0, r4
   b7b16:	bd10      	pop	{r4, pc}
   b7b18:	000bdd78 	.word	0x000bdd78

000b7b1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7b1c:	b510      	push	{r4, lr}
   b7b1e:	2168      	movs	r1, #104	; 0x68
   b7b20:	4604      	mov	r4, r0
   b7b22:	f7fc fabe 	bl	b40a2 <_ZdlPvj>
   b7b26:	4620      	mov	r0, r4
   b7b28:	bd10      	pop	{r4, pc}

000b7b2a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7b2a:	b510      	push	{r4, lr}
   b7b2c:	2128      	movs	r1, #40	; 0x28
   b7b2e:	4604      	mov	r4, r0
   b7b30:	f7fc fab7 	bl	b40a2 <_ZdlPvj>
   b7b34:	4620      	mov	r0, r4
   b7b36:	bd10      	pop	{r4, pc}

000b7b38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7b38:	b510      	push	{r4, lr}
   b7b3a:	2130      	movs	r1, #48	; 0x30
   b7b3c:	4604      	mov	r4, r0
   b7b3e:	f7fc fab0 	bl	b40a2 <_ZdlPvj>
   b7b42:	4620      	mov	r0, r4
   b7b44:	bd10      	pop	{r4, pc}

000b7b46 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7b46:	2168      	movs	r1, #104	; 0x68
   b7b48:	f7fc baab 	b.w	b40a2 <_ZdlPvj>

000b7b4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7b4c:	2128      	movs	r1, #40	; 0x28
   b7b4e:	f7fc baa8 	b.w	b40a2 <_ZdlPvj>

000b7b52 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7b52:	2130      	movs	r1, #48	; 0x30
   b7b54:	f7fc baa5 	b.w	b40a2 <_ZdlPvj>

000b7b58 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7b5a:	2500      	movs	r5, #0
   b7b5c:	1cec      	adds	r4, r5, #3
   b7b5e:	428c      	cmp	r4, r1
   b7b60:	d80d      	bhi.n	b7b7e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7b62:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7b64:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7b66:	5d87      	ldrb	r7, [r0, r6]
   b7b68:	4297      	cmp	r7, r2
   b7b6a:	d105      	bne.n	b7b78 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7b6c:	4426      	add	r6, r4
   b7b6e:	42b1      	cmp	r1, r6
   b7b70:	d305      	bcc.n	b7b7e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7b72:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7b74:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7b78:	3401      	adds	r4, #1
   b7b7a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7b7c:	e7ee      	b.n	b7b5c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7b7e:	2000      	movs	r0, #0
   b7b80:	e7f9      	b.n	b7b76 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7b84 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7b84:	4a02      	ldr	r2, [pc, #8]	; (b7b90 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7b86:	4903      	ldr	r1, [pc, #12]	; (b7b94 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7b88:	200a      	movs	r0, #10
   b7b8a:	f7ff b88f 	b.w	b6cac <panic_>
   b7b8e:	bf00      	nop
   b7b90:	000b6849 	.word	0x000b6849
   b7b94:	000bdbd8 	.word	0x000bdbd8

000b7b98 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7b98:	4603      	mov	r3, r0
   b7b9a:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b7b9c:	681b      	ldr	r3, [r3, #0]
   b7b9e:	e9d3 2100 	ldrd	r2, r1, [r3]
   b7ba2:	4710      	bx	r2

000b7ba4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7ba4:	b430      	push	{r4, r5}
   b7ba6:	460d      	mov	r5, r1
   b7ba8:	4611      	mov	r1, r2
   b7baa:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7bac:	6803      	ldr	r3, [r0, #0]
   b7bae:	6809      	ldr	r1, [r1, #0]
   b7bb0:	6828      	ldr	r0, [r5, #0]
   b7bb2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7bb6:	46a4      	mov	ip, r4
      }
   b7bb8:	bc30      	pop	{r4, r5}
   b7bba:	4760      	bx	ip

000b7bbc <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b7bbc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7bbe:	b538      	push	{r3, r4, r5, lr}
   b7bc0:	4604      	mov	r4, r0
	switch (__op)
   b7bc2:	d102      	bne.n	b7bca <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7bc4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7bc6:	6023      	str	r3, [r4, #0]
	}
   b7bc8:	e003      	b.n	b7bd2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b7bca:	2a02      	cmp	r2, #2
   b7bcc:	d003      	beq.n	b7bd6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b7bce:	2a03      	cmp	r2, #3
   b7bd0:	d00d      	beq.n	b7bee <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b7bd2:	2000      	movs	r0, #0
   b7bd4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7bd6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7bd8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7bda:	f7fc fa5c 	bl	b4096 <_Znwj>
   b7bde:	4603      	mov	r3, r0
   b7be0:	2800      	cmp	r0, #0
   b7be2:	d0f0      	beq.n	b7bc6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b7be4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7be8:	e883 0003 	stmia.w	r3, {r0, r1}
   b7bec:	e7eb      	b.n	b7bc6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7bee:	6800      	ldr	r0, [r0, #0]
   b7bf0:	2800      	cmp	r0, #0
   b7bf2:	d0ee      	beq.n	b7bd2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b7bf4:	2108      	movs	r1, #8
   b7bf6:	f7fc fa54 	bl	b40a2 <_ZdlPvj>
   b7bfa:	e7ea      	b.n	b7bd2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b7bfc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7bfc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7bfe:	b538      	push	{r3, r4, r5, lr}
   b7c00:	4604      	mov	r4, r0
	switch (__op)
   b7c02:	d102      	bne.n	b7c0a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7c04:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7c06:	6023      	str	r3, [r4, #0]
	}
   b7c08:	e003      	b.n	b7c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7c0a:	2a02      	cmp	r2, #2
   b7c0c:	d003      	beq.n	b7c16 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7c0e:	2a03      	cmp	r2, #3
   b7c10:	d00d      	beq.n	b7c2e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7c12:	2000      	movs	r0, #0
   b7c14:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7c16:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7c18:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7c1a:	f7fc fa3c 	bl	b4096 <_Znwj>
   b7c1e:	4603      	mov	r3, r0
   b7c20:	2800      	cmp	r0, #0
   b7c22:	d0f0      	beq.n	b7c06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7c24:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7c28:	e883 0003 	stmia.w	r3, {r0, r1}
   b7c2c:	e7eb      	b.n	b7c06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7c2e:	6800      	ldr	r0, [r0, #0]
   b7c30:	2800      	cmp	r0, #0
   b7c32:	d0ee      	beq.n	b7c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7c34:	2108      	movs	r1, #8
   b7c36:	f7fc fa34 	bl	b40a2 <_ZdlPvj>
   b7c3a:	e7ea      	b.n	b7c12 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7c3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7c3c:	b510      	push	{r4, lr}
   b7c3e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b7c40:	3058      	adds	r0, #88	; 0x58
   b7c42:	f7fc fbd1 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7c46:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7c4e:	f7ff bddf 	b.w	b7810 <_ZN6StringD1Ev>

000b7c52 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7c52:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7c54:	6843      	ldr	r3, [r0, #4]
   b7c56:	3b01      	subs	r3, #1
    {
   b7c58:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7c5a:	6043      	str	r3, [r0, #4]
   b7c5c:	b963      	cbnz	r3, b7c78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7c5e:	6803      	ldr	r3, [r0, #0]
   b7c60:	689b      	ldr	r3, [r3, #8]
   b7c62:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7c64:	68a3      	ldr	r3, [r4, #8]
   b7c66:	3b01      	subs	r3, #1
   b7c68:	60a3      	str	r3, [r4, #8]
   b7c6a:	b92b      	cbnz	r3, b7c78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7c6c:	6823      	ldr	r3, [r4, #0]
   b7c6e:	4620      	mov	r0, r4
   b7c70:	68db      	ldr	r3, [r3, #12]
    }
   b7c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7c76:	4718      	bx	r3
    }
   b7c78:	bd10      	pop	{r4, pc}

000b7c7a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7c7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7c7e:	b2da      	uxtb	r2, r3
   b7c80:	2a09      	cmp	r2, #9
   b7c82:	d801      	bhi.n	b7c88 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7c84:	4618      	mov	r0, r3
   b7c86:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7c88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7c8c:	2b05      	cmp	r3, #5
   b7c8e:	d801      	bhi.n	b7c94 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7c90:	3857      	subs	r0, #87	; 0x57
   b7c92:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7c94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7c98:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7c9a:	bf94      	ite	ls
   b7c9c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7c9e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b7ca2:	4770      	bx	lr

000b7ca4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7ca4:	b510      	push	{r4, lr}
            locked_(false) {
   b7ca6:	2300      	movs	r3, #0
   b7ca8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7caa:	4b04      	ldr	r3, [pc, #16]	; (b7cbc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7cac:	4604      	mov	r4, r0
   b7cae:	6818      	ldr	r0, [r3, #0]
   b7cb0:	f7fe febc 	bl	b6a2c <os_mutex_recursive_lock>
        locked_ = true;
   b7cb4:	2301      	movs	r3, #1
   b7cb6:	7023      	strb	r3, [r4, #0]
    }
   b7cb8:	4620      	mov	r0, r4
   b7cba:	bd10      	pop	{r4, pc}
   b7cbc:	2003e694 	.word	0x2003e694

000b7cc0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7cc0:	b510      	push	{r4, lr}
        if (locked_) {
   b7cc2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7cc4:	4604      	mov	r4, r0
        if (locked_) {
   b7cc6:	b11b      	cbz	r3, b7cd0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7cc8:	4b02      	ldr	r3, [pc, #8]	; (b7cd4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7cca:	6818      	ldr	r0, [r3, #0]
   b7ccc:	f7fe feb6 	bl	b6a3c <os_mutex_recursive_unlock>
    }
   b7cd0:	4620      	mov	r0, r4
   b7cd2:	bd10      	pop	{r4, pc}
   b7cd4:	2003e694 	.word	0x2003e694

000b7cd8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7cd8:	b082      	sub	sp, #8
   b7cda:	4603      	mov	r3, r0
    address_ = addr;
   b7cdc:	6808      	ldr	r0, [r1, #0]
   b7cde:	6849      	ldr	r1, [r1, #4]
   b7ce0:	466a      	mov	r2, sp
   b7ce2:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7ce4:	466a      	mov	r2, sp
   b7ce6:	ca03      	ldmia	r2!, {r0, r1}
   b7ce8:	6018      	str	r0, [r3, #0]
}
   b7cea:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7cec:	6059      	str	r1, [r3, #4]
}
   b7cee:	b002      	add	sp, #8
   b7cf0:	4770      	bx	lr

000b7cf2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7cf2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7cf4:	7982      	ldrb	r2, [r0, #6]
   b7cf6:	798b      	ldrb	r3, [r1, #6]
   b7cf8:	429a      	cmp	r2, r3
   b7cfa:	d106      	bne.n	b7d0a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7cfc:	2206      	movs	r2, #6
   b7cfe:	f003 fb04 	bl	bb30a <memcmp>
   b7d02:	fab0 f080 	clz	r0, r0
   b7d06:	0940      	lsrs	r0, r0, #5
}
   b7d08:	bd08      	pop	{r3, pc}
    return false;
   b7d0a:	2000      	movs	r0, #0
   b7d0c:	e7fc      	b.n	b7d08 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7d0e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7d0e:	f04f 33ff 	mov.w	r3, #4294967295
   b7d12:	6003      	str	r3, [r0, #0]
   b7d14:	8083      	strh	r3, [r0, #4]
}
   b7d16:	2000      	movs	r0, #0
   b7d18:	4770      	bx	lr

000b7d1a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7d1a:	b508      	push	{r3, lr}
   b7d1c:	4602      	mov	r2, r0
        : address_{} {
   b7d1e:	2100      	movs	r1, #0
   b7d20:	6001      	str	r1, [r0, #0]
   b7d22:	6041      	str	r1, [r0, #4]
    clear();
   b7d24:	f7ff fff3 	bl	b7d0e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7d28:	7191      	strb	r1, [r2, #6]
}
   b7d2a:	4610      	mov	r0, r2
   b7d2c:	bd08      	pop	{r3, pc}
	...

000b7d30 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7d30:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7d32:	2301      	movs	r3, #1
   b7d34:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7d36:	4b05      	ldr	r3, [pc, #20]	; (b7d4c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7d38:	4602      	mov	r2, r0
   b7d3a:	f103 0110 	add.w	r1, r3, #16
   b7d3e:	f853 4b04 	ldr.w	r4, [r3], #4
   b7d42:	f842 4b04 	str.w	r4, [r2], #4
   b7d46:	428b      	cmp	r3, r1
   b7d48:	d1f9      	bne.n	b7d3e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7d4a:	bd10      	pop	{r4, pc}
   b7d4c:	000bdd86 	.word	0x000bdd86

000b7d50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7d50:	b510      	push	{r4, lr}
    if (uuid128) {
   b7d52:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7d54:	4604      	mov	r4, r0
    if (uuid128) {
   b7d56:	b1b1      	cbz	r1, b7d86 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7d58:	2a01      	cmp	r2, #1
   b7d5a:	f101 0210 	add.w	r2, r1, #16
   b7d5e:	d10a      	bne.n	b7d76 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7d60:	4601      	mov	r1, r0
   b7d62:	f853 0b04 	ldr.w	r0, [r3], #4
   b7d66:	f841 0b04 	str.w	r0, [r1], #4
   b7d6a:	4293      	cmp	r3, r2
   b7d6c:	d1f9      	bne.n	b7d62 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7d6e:	2301      	movs	r3, #1
   b7d70:	6123      	str	r3, [r4, #16]
}
   b7d72:	4620      	mov	r0, r4
   b7d74:	bd10      	pop	{r4, pc}
   b7d76:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7d78:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7d7c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7d80:	429a      	cmp	r2, r3
   b7d82:	d1f9      	bne.n	b7d78 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7d84:	e7f3      	b.n	b7d6e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7d86:	2210      	movs	r2, #16
   b7d88:	f003 faf7 	bl	bb37a <memset>
   b7d8c:	e7f1      	b.n	b7d72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7d8e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7d8e:	b538      	push	{r3, r4, r5, lr}
   b7d90:	4604      	mov	r4, r0
   b7d92:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7d94:	461a      	mov	r2, r3
   b7d96:	f7ff ffdb 	bl	b7d50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7d9a:	81a5      	strh	r5, [r4, #12]
}
   b7d9c:	4620      	mov	r0, r4
   b7d9e:	bd38      	pop	{r3, r4, r5, pc}

000b7da0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7da0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7da2:	6902      	ldr	r2, [r0, #16]
   b7da4:	b922      	cbnz	r2, b7db0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7da6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7da8:	3800      	subs	r0, #0
   b7daa:	bf18      	it	ne
   b7dac:	2001      	movne	r0, #1
}
   b7dae:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7db0:	4902      	ldr	r1, [pc, #8]	; (b7dbc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7db2:	2210      	movs	r2, #16
   b7db4:	f003 faa9 	bl	bb30a <memcmp>
   b7db8:	e7f6      	b.n	b7da8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7dba:	bf00      	nop
   b7dbc:	000bdda6 	.word	0x000bdda6

000b7dc0 <_ZNK8particle7BleUuid4typeEv>:
}
   b7dc0:	6900      	ldr	r0, [r0, #16]
   b7dc2:	4770      	bx	lr

000b7dc4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7dc4:	b538      	push	{r3, r4, r5, lr}
   b7dc6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7dc8:	2214      	movs	r2, #20
   b7dca:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7dcc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7dce:	f003 fad4 	bl	bb37a <memset>
    if (type_ == BleUuidType::SHORT) {
   b7dd2:	6923      	ldr	r3, [r4, #16]
   b7dd4:	b91b      	cbnz	r3, b7dde <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7dd6:	89a3      	ldrh	r3, [r4, #12]
   b7dd8:	802b      	strh	r3, [r5, #0]
}
   b7dda:	4628      	mov	r0, r5
   b7ddc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7dde:	2301      	movs	r3, #1
   b7de0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7de2:	4621      	mov	r1, r4
   b7de4:	462b      	mov	r3, r5
   b7de6:	f104 0210 	add.w	r2, r4, #16
   b7dea:	f851 0b04 	ldr.w	r0, [r1], #4
   b7dee:	f843 0b04 	str.w	r0, [r3], #4
   b7df2:	4291      	cmp	r1, r2
   b7df4:	d1f9      	bne.n	b7dea <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7df6:	e7f0      	b.n	b7dda <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7df8 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7df8:	8980      	ldrh	r0, [r0, #12]
   b7dfa:	4770      	bx	lr

000b7dfc <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7dfc:	4770      	bx	lr

000b7dfe <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7dfe:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7e00:	6902      	ldr	r2, [r0, #16]
   b7e02:	690b      	ldr	r3, [r1, #16]
   b7e04:	429a      	cmp	r2, r3
   b7e06:	d106      	bne.n	b7e16 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7e08:	2210      	movs	r2, #16
   b7e0a:	f003 fa7e 	bl	bb30a <memcmp>
   b7e0e:	fab0 f080 	clz	r0, r0
   b7e12:	0940      	lsrs	r0, r0, #5
}
   b7e14:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7e16:	2000      	movs	r0, #0
   b7e18:	e7fc      	b.n	b7e14 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7e1c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7e1c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7e1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7e22:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7e24:	4b34      	ldr	r3, [pc, #208]	; (b7ef8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7e26:	460c      	mov	r4, r1
   b7e28:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7e2a:	4602      	mov	r2, r0
   b7e2c:	f103 0110 	add.w	r1, r3, #16
   b7e30:	f853 0b04 	ldr.w	r0, [r3], #4
   b7e34:	f842 0b04 	str.w	r0, [r2], #4
   b7e38:	428b      	cmp	r3, r1
   b7e3a:	d1f9      	bne.n	b7e30 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7e3c:	b344      	cbz	r4, b7e90 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7e3e:	2124      	movs	r1, #36	; 0x24
   b7e40:	4620      	mov	r0, r4
   b7e42:	f003 fb3f 	bl	bb4c4 <strnlen>
   b7e46:	2804      	cmp	r0, #4
   b7e48:	f04f 0500 	mov.w	r5, #0
   b7e4c:	d123      	bne.n	b7e96 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7e4e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7e52:	af01      	add	r7, sp, #4
   b7e54:	1ca5      	adds	r5, r4, #2
   b7e56:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7e58:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7e5c:	f7ff ff0d 	bl	b7c7a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7e60:	f1b0 0800 	subs.w	r8, r0, #0
   b7e64:	db12      	blt.n	b7e8c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7e66:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7e6a:	f7ff ff06 	bl	b7c7a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7e6e:	2800      	cmp	r0, #0
   b7e70:	db0c      	blt.n	b7e8c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7e72:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7e74:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7e78:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7e7a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7e7e:	d1eb      	bne.n	b7e58 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7e80:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7e84:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7e86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7e8a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7e8c:	2300      	movs	r3, #0
   b7e8e:	6133      	str	r3, [r6, #16]
}
   b7e90:	b002      	add	sp, #8
   b7e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7e96:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7e9a:	2124      	movs	r1, #36	; 0x24
   b7e9c:	4620      	mov	r0, r4
   b7e9e:	f003 fb11 	bl	bb4c4 <strnlen>
   b7ea2:	42a8      	cmp	r0, r5
   b7ea4:	d807      	bhi.n	b7eb6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7ea6:	4642      	mov	r2, r8
   b7ea8:	2100      	movs	r1, #0
   b7eaa:	4630      	mov	r0, r6
}
   b7eac:	b002      	add	sp, #8
   b7eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7eb2:	f003 ba62 	b.w	bb37a <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7eb6:	f1b8 0f00 	cmp.w	r8, #0
   b7eba:	d0e9      	beq.n	b7e90 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7ebc:	5d60      	ldrb	r0, [r4, r5]
   b7ebe:	f7ff fedc 	bl	b7c7a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7ec2:	0603      	lsls	r3, r0, #24
   b7ec4:	d415      	bmi.n	b7ef2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7ec6:	0100      	lsls	r0, r0, #4
   b7ec8:	f108 38ff 	add.w	r8, r8, #4294967295
   b7ecc:	b2c7      	uxtb	r7, r0
   b7ece:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7ed2:	2124      	movs	r1, #36	; 0x24
   b7ed4:	4620      	mov	r0, r4
   b7ed6:	f003 faf5 	bl	bb4c4 <strnlen>
   b7eda:	3501      	adds	r5, #1
   b7edc:	42a8      	cmp	r0, r5
   b7ede:	d908      	bls.n	b7ef2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7ee0:	5d60      	ldrb	r0, [r4, r5]
   b7ee2:	f7ff feca 	bl	b7c7a <_ZN8particle11hexToNibbleEc>
   b7ee6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7ee8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7eea:	bfa4      	itt	ge
   b7eec:	4338      	orrge	r0, r7
   b7eee:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7ef2:	3501      	adds	r5, #1
   b7ef4:	e7d1      	b.n	b7e9a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7ef6:	bf00      	nop
   b7ef8:	000bdd86 	.word	0x000bdd86

000b7efc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7efc:	b513      	push	{r0, r1, r4, lr}
   b7efe:	4604      	mov	r4, r0
   b7f00:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7f02:	f7ff ff15 	bl	b7d30 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7f06:	4620      	mov	r0, r4
   b7f08:	9901      	ldr	r1, [sp, #4]
   b7f0a:	f7ff ff87 	bl	b7e1c <_ZN8particle7BleUuid9constructEPKc>
}
   b7f0e:	4620      	mov	r0, r4
   b7f10:	b002      	add	sp, #8
   b7f12:	bd10      	pop	{r4, pc}

000b7f14 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7f14:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7f1a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7f1c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7f1e:	8043      	strh	r3, [r0, #2]
   b7f20:	220e      	movs	r2, #14
   b7f22:	4629      	mov	r1, r5
   b7f24:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7f26:	7105      	strb	r5, [r0, #4]
   b7f28:	3006      	adds	r0, #6
   b7f2a:	f003 fa26 	bl	bb37a <memset>
   b7f2e:	f104 0014 	add.w	r0, r4, #20
   b7f32:	f7ff fefd 	bl	b7d30 <_ZN8particle7BleUuidC1Ev>
   b7f36:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7f3a:	f7ff fef9 	bl	b7d30 <_ZN8particle7BleUuidC1Ev>
   b7f3e:	4904      	ldr	r1, [pc, #16]	; (b7f50 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7f40:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7f44:	f7ff fcaf 	bl	b78a6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7f48:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7f4a:	4620      	mov	r0, r4
   b7f4c:	bd38      	pop	{r3, r4, r5, pc}
   b7f4e:	bf00      	nop
   b7f50:	000bd928 	.word	0x000bd928

000b7f54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7f54:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7f56:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7f5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7f5e:	4293      	cmp	r3, r2
   b7f60:	4618      	mov	r0, r3
   b7f62:	d006      	beq.n	b7f72 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7f64:	6804      	ldr	r4, [r0, #0]
   b7f66:	8824      	ldrh	r4, [r4, #0]
   b7f68:	428c      	cmp	r4, r1
   b7f6a:	f103 0308 	add.w	r3, r3, #8
   b7f6e:	d1f6      	bne.n	b7f5e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7f70:	bd10      	pop	{r4, pc}
        return nullptr;
   b7f72:	2000      	movs	r0, #0
   b7f74:	e7fc      	b.n	b7f70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7f78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7f7a:	4606      	mov	r6, r0
   b7f7c:	b085      	sub	sp, #20
   b7f7e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7f80:	460d      	mov	r5, r1
   b7f82:	2900      	cmp	r1, #0
   b7f84:	d050      	beq.n	b8028 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7f86:	2a00      	cmp	r2, #0
   b7f88:	d04e      	beq.n	b8028 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7f8a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7f8c:	7823      	ldrb	r3, [r4, #0]
   b7f8e:	2af4      	cmp	r2, #244	; 0xf4
   b7f90:	bf28      	it	cs
   b7f92:	22f4      	movcs	r2, #244	; 0xf4
   b7f94:	b343      	cbz	r3, b7fe8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7f96:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7f98:	0798      	lsls	r0, r3, #30
   b7f9a:	d509      	bpl.n	b7fb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7f9c:	89a0      	ldrh	r0, [r4, #12]
   b7f9e:	9203      	str	r2, [sp, #12]
   b7fa0:	2300      	movs	r3, #0
   b7fa2:	f7fe fcad 	bl	b6900 <hal_ble_gatt_server_set_characteristic_value>
   b7fa6:	2800      	cmp	r0, #0
   b7fa8:	9a03      	ldr	r2, [sp, #12]
   b7faa:	da03      	bge.n	b7fb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7fac:	b005      	add	sp, #20
   b7fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7fb0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7fb4:	6834      	ldr	r4, [r6, #0]
   b7fb6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7fb8:	06d9      	lsls	r1, r3, #27
   b7fba:	d509      	bpl.n	b7fd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7fbc:	2f01      	cmp	r7, #1
   b7fbe:	d007      	beq.n	b7fd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fc0:	89a0      	ldrh	r0, [r4, #12]
   b7fc2:	2300      	movs	r3, #0
   b7fc4:	4629      	mov	r1, r5
}
   b7fc6:	b005      	add	sp, #20
   b7fc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fcc:	f7fe bcca 	b.w	b6964 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7fd0:	069b      	lsls	r3, r3, #26
   b7fd2:	d5eb      	bpl.n	b7fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7fd4:	2f02      	cmp	r7, #2
   b7fd6:	d0e9      	beq.n	b7fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fd8:	89a0      	ldrh	r0, [r4, #12]
   b7fda:	2300      	movs	r3, #0
   b7fdc:	4629      	mov	r1, r5
}
   b7fde:	b005      	add	sp, #20
   b7fe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7fe4:	f7fe bcc8 	b.w	b6978 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7fe8:	8860      	ldrh	r0, [r4, #2]
   b7fea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7fee:	4288      	cmp	r0, r1
   b7ff0:	d01c      	beq.n	b802c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7ff2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7ff4:	074e      	lsls	r6, r1, #29
   b7ff6:	d501      	bpl.n	b7ffc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7ff8:	2f01      	cmp	r7, #1
   b7ffa:	d104      	bne.n	b8006 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7ffc:	070b      	lsls	r3, r1, #28
   b7ffe:	d409      	bmi.n	b8014 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b8000:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b8004:	e7d2      	b.n	b7fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8006:	89a1      	ldrh	r1, [r4, #12]
   b8008:	9300      	str	r3, [sp, #0]
   b800a:	4613      	mov	r3, r2
   b800c:	462a      	mov	r2, r5
   b800e:	f7fe fc8b 	bl	b6928 <hal_ble_gatt_client_write_without_response>
   b8012:	e7cb      	b.n	b7fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8014:	2f02      	cmp	r7, #2
   b8016:	d0f3      	beq.n	b8000 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8018:	2300      	movs	r3, #0
   b801a:	89a1      	ldrh	r1, [r4, #12]
   b801c:	9300      	str	r3, [sp, #0]
   b801e:	4613      	mov	r3, r2
   b8020:	462a      	mov	r2, r5
   b8022:	f7fe fc77 	bl	b6914 <hal_ble_gatt_client_write_with_response>
   b8026:	e7c1      	b.n	b7fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8028:	4802      	ldr	r0, [pc, #8]	; (b8034 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b802a:	e7bf      	b.n	b7fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b802c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8030:	e7bc      	b.n	b7fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b8032:	bf00      	nop
   b8034:	fffffef2 	.word	0xfffffef2

000b8038 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b8038:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b803a:	688a      	ldr	r2, [r1, #8]
   b803c:	6809      	ldr	r1, [r1, #0]
   b803e:	f7ff bf9b 	b.w	b7f78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b8044 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8048:	2600      	movs	r6, #0
   b804a:	6006      	str	r6, [r0, #0]
   b804c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b804e:	2028      	movs	r0, #40	; 0x28
   b8050:	460c      	mov	r4, r1
   b8052:	f7fc f820 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8056:	1e05      	subs	r5, r0, #0
   b8058:	f105 080c 	add.w	r8, r5, #12
   b805c:	d00f      	beq.n	b807e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b805e:	2301      	movs	r3, #1
   b8060:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8064:	4b08      	ldr	r3, [pc, #32]	; (b8088 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8066:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8068:	4640      	mov	r0, r8
   b806a:	f7ff fe61 	bl	b7d30 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b806e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8070:	622e      	str	r6, [r5, #32]
   b8072:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8076:	4646      	mov	r6, r8
   b8078:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b807a:	6823      	ldr	r3, [r4, #0]
   b807c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b807e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8082:	4638      	mov	r0, r7
   b8084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8088:	000bdd48 	.word	0x000bdd48

000b808c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b808c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b808e:	2500      	movs	r5, #0
   b8090:	6005      	str	r5, [r0, #0]
   b8092:	4606      	mov	r6, r0
   b8094:	2030      	movs	r0, #48	; 0x30
   b8096:	f7fb fffe 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b809a:	4604      	mov	r4, r0
   b809c:	b188      	cbz	r0, b80c2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b809e:	2301      	movs	r3, #1
   b80a0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b80a4:	4b09      	ldr	r3, [pc, #36]	; (b80cc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b80a6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b80a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b80ac:	8183      	strh	r3, [r0, #12]
   b80ae:	300e      	adds	r0, #14
   b80b0:	f7ff fe33 	bl	b7d1a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b80b4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b80b8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b80bc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b80c0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b80c2:	6074      	str	r4, [r6, #4]
   b80c4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b80c6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b80c8:	4630      	mov	r0, r6
   b80ca:	bd70      	pop	{r4, r5, r6, pc}
   b80cc:	000bdd64 	.word	0x000bdd64

000b80d0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b80d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80d2:	460d      	mov	r5, r1
   b80d4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b80d6:	a801      	add	r0, sp, #4
   b80d8:	f7ff fde4 	bl	b7ca4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b80dc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b80de:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b80e2:	6023      	str	r3, [r4, #0]
   b80e4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b80e8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b80ea:	a801      	add	r0, sp, #4
   b80ec:	f7ff fde8 	bl	b7cc0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b80f0:	4620      	mov	r0, r4
   b80f2:	b003      	add	sp, #12
   b80f4:	bd30      	pop	{r4, r5, pc}

000b80f6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b80f6:	b530      	push	{r4, r5, lr}
   b80f8:	4605      	mov	r5, r0
   b80fa:	b087      	sub	sp, #28
   b80fc:	460c      	mov	r4, r1
    WiringBleLock lk;
   b80fe:	a801      	add	r0, sp, #4
   b8100:	f7ff fdd0 	bl	b7ca4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8104:	682a      	ldr	r2, [r5, #0]
   b8106:	6823      	ldr	r3, [r4, #0]
   b8108:	8812      	ldrh	r2, [r2, #0]
   b810a:	881b      	ldrh	r3, [r3, #0]
   b810c:	429a      	cmp	r2, r3
   b810e:	d10d      	bne.n	b812c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8110:	4629      	mov	r1, r5
   b8112:	a802      	add	r0, sp, #8
   b8114:	f7ff ffdc 	bl	b80d0 <_ZNK8particle13BlePeerDevice7addressEv>
   b8118:	4621      	mov	r1, r4
   b811a:	a804      	add	r0, sp, #16
   b811c:	f7ff ffd8 	bl	b80d0 <_ZNK8particle13BlePeerDevice7addressEv>
   b8120:	a904      	add	r1, sp, #16
   b8122:	a802      	add	r0, sp, #8
   b8124:	f7ff fde5 	bl	b7cf2 <_ZNK8particle10BleAddresseqERKS0_>
   b8128:	4604      	mov	r4, r0
   b812a:	b900      	cbnz	r0, b812e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b812c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b812e:	a801      	add	r0, sp, #4
   b8130:	f7ff fdc6 	bl	b7cc0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8134:	4620      	mov	r0, r4
   b8136:	b007      	add	sp, #28
   b8138:	bd30      	pop	{r4, r5, pc}
	...

000b813c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b813c:	b510      	push	{r4, lr}
   b813e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8140:	2064      	movs	r0, #100	; 0x64
   b8142:	f7fb ffa8 	bl	b4096 <_Znwj>
   b8146:	b168      	cbz	r0, b8164 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8148:	2300      	movs	r3, #0
   b814a:	e9c0 3300 	strd	r3, r3, [r0]
   b814e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8152:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8156:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b815a:	6203      	str	r3, [r0, #32]
   b815c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b815e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8160:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8162:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8164:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8166:	b920      	cbnz	r0, b8172 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8168:	4a0a      	ldr	r2, [pc, #40]	; (b8194 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b816a:	490b      	ldr	r1, [pc, #44]	; (b8198 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b816c:	200a      	movs	r0, #10
   b816e:	f7fe fd9d 	bl	b6cac <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8172:	2000      	movs	r0, #0
   b8174:	f7fe fb90 	bl	b6898 <hal_ble_stack_init>
   b8178:	b120      	cbz	r0, b8184 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b817a:	4a06      	ldr	r2, [pc, #24]	; (b8194 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b817c:	4907      	ldr	r1, [pc, #28]	; (b819c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b817e:	200a      	movs	r0, #10
   b8180:	f7fe fd94 	bl	b6cac <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8184:	6821      	ldr	r1, [r4, #0]
   b8186:	4806      	ldr	r0, [pc, #24]	; (b81a0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8188:	2200      	movs	r2, #0
   b818a:	f7fe fbe1 	bl	b6950 <hal_ble_set_callback_on_periph_link_events>
}
   b818e:	4620      	mov	r0, r4
   b8190:	bd10      	pop	{r4, pc}
   b8192:	bf00      	nop
   b8194:	000b6849 	.word	0x000b6849
   b8198:	000bdbd8 	.word	0x000bdbd8
   b819c:	000bdc16 	.word	0x000bdc16
   b81a0:	000b8769 	.word	0x000b8769

000b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b81a4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b81a6:	4c0a      	ldr	r4, [pc, #40]	; (b81d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b81a8:	7823      	ldrb	r3, [r4, #0]
   b81aa:	f3bf 8f5b 	dmb	ish
   b81ae:	07db      	lsls	r3, r3, #31
   b81b0:	d40c      	bmi.n	b81cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b81b2:	4620      	mov	r0, r4
   b81b4:	f7fb ff77 	bl	b40a6 <__cxa_guard_acquire>
   b81b8:	b140      	cbz	r0, b81cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b81ba:	4806      	ldr	r0, [pc, #24]	; (b81d4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b81bc:	f7ff ffbe 	bl	b813c <_ZN8particle14BleLocalDeviceC1Ev>
   b81c0:	4620      	mov	r0, r4
   b81c2:	f7fb ff75 	bl	b40b0 <__cxa_guard_release>
   b81c6:	4804      	ldr	r0, [pc, #16]	; (b81d8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b81c8:	f003 f87e 	bl	bb2c8 <atexit>
    return instance;
}
   b81cc:	4801      	ldr	r0, [pc, #4]	; (b81d4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b81ce:	bd10      	pop	{r4, pc}
   b81d0:	2003e68c 	.word	0x2003e68c
   b81d4:	2003e698 	.word	0x2003e698
   b81d8:	000b8411 	.word	0x000b8411

000b81dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b81dc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b81de:	6803      	ldr	r3, [r0, #0]
   b81e0:	3b09      	subs	r3, #9
   b81e2:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b81e4:	b08d      	sub	sp, #52	; 0x34
   b81e6:	4604      	mov	r4, r0
   b81e8:	460d      	mov	r5, r1
    switch (event->type) {
   b81ea:	d811      	bhi.n	b8210 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b81ec:	f7ff ffda 	bl	b81a4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b81f0:	88a1      	ldrh	r1, [r4, #4]
   b81f2:	6800      	ldr	r0, [r0, #0]
   b81f4:	f7ff feae 	bl	b7f54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b81f8:	4603      	mov	r3, r0
   b81fa:	b958      	cbnz	r0, b8214 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b81fc:	2220      	movs	r2, #32
   b81fe:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b8202:	4a0b      	ldr	r2, [pc, #44]	; (b8230 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8204:	9200      	str	r2, [sp, #0]
   b8206:	490b      	ldr	r1, [pc, #44]	; (b8234 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8208:	aa04      	add	r2, sp, #16
   b820a:	2032      	movs	r0, #50	; 0x32
   b820c:	f7fe fd56 	bl	b6cbc <log_message>
}
   b8210:	b00d      	add	sp, #52	; 0x34
   b8212:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8214:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b8216:	2a00      	cmp	r2, #0
   b8218:	d0fa      	beq.n	b8210 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b821a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b821e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b8222:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8226:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8228:	aa04      	add	r2, sp, #16
   b822a:	a903      	add	r1, sp, #12
   b822c:	47a0      	blx	r4
}
   b822e:	e7ef      	b.n	b8210 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8230:	000bdc58 	.word	0x000bdc58
   b8234:	000bdbef 	.word	0x000bdbef

000b8238 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8238:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b823a:	2000      	movs	r0, #0
   b823c:	f7fe fb2c 	bl	b6898 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8240:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8244:	bd08      	pop	{r3, pc}

000b8246 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b8246:	b919      	cbnz	r1, b8250 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8248:	460a      	mov	r2, r1
   b824a:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b824c:	f7fe bb2c 	b.w	b68a8 <hal_ble_gap_set_advertising_data>
   b8250:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8254:	2200      	movs	r2, #0
   b8256:	e7f9      	b.n	b824c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8258 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8258:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b825a:	1e14      	subs	r4, r2, #0
   b825c:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b825e:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8260:	db02      	blt.n	b8268 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b8262:	1862      	adds	r2, r4, r1
   b8264:	429a      	cmp	r2, r3
   b8266:	dd00      	ble.n	b826a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8268:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b826a:	682a      	ldr	r2, [r5, #0]
   b826c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b826e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8270:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8272:	1a52      	subs	r2, r2, r1
   b8274:	f003 f867 	bl	bb346 <memmove>
    size_ -= n;
   b8278:	686a      	ldr	r2, [r5, #4]
   b827a:	1b12      	subs	r2, r2, r4
   b827c:	606a      	str	r2, [r5, #4]
}
   b827e:	bd38      	pop	{r3, r4, r5, pc}

000b8280 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8280:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b8282:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8284:	4604      	mov	r4, r0
   b8286:	460d      	mov	r5, r1
   b8288:	ab01      	add	r3, sp, #4
   b828a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b828e:	f7ff fc63 	bl	b7b58 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b8292:	4602      	mov	r2, r0
   b8294:	b138      	cbz	r0, b82a6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b8296:	9901      	ldr	r1, [sp, #4]
   b8298:	4620      	mov	r0, r4
   b829a:	f7ff ffdd 	bl	b8258 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b829e:	4629      	mov	r1, r5
   b82a0:	4620      	mov	r0, r4
   b82a2:	f7ff ffed 	bl	b8280 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b82a6:	b003      	add	sp, #12
   b82a8:	bd30      	pop	{r4, r5, pc}

000b82aa <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b82aa:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b82ac:	460c      	mov	r4, r1
   b82ae:	b929      	cbnz	r1, b82bc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b82b0:	460a      	mov	r2, r1
   b82b2:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b82b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b82b8:	f7fe bafe 	b.w	b68b8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b82bc:	2101      	movs	r1, #1
   b82be:	4620      	mov	r0, r4
   b82c0:	f7ff ffde 	bl	b8280 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b82c4:	e9d4 0100 	ldrd	r0, r1, [r4]
   b82c8:	2200      	movs	r2, #0
   b82ca:	e7f3      	b.n	b82b4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b82cc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b82cc:	b538      	push	{r3, r4, r5, lr}
   b82ce:	4604      	mov	r4, r0
   b82d0:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b82d2:	f7ff ffb8 	bl	b8246 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b82d6:	2800      	cmp	r0, #0
   b82d8:	db0a      	blt.n	b82f0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b82da:	4629      	mov	r1, r5
   b82dc:	4620      	mov	r0, r4
   b82de:	f7ff ffe4 	bl	b82aa <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b82e2:	2800      	cmp	r0, #0
   b82e4:	db04      	blt.n	b82f0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b82e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b82ea:	2000      	movs	r0, #0
   b82ec:	f7fe baec 	b.w	b68c8 <hal_ble_gap_start_advertising>
}
   b82f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b82f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b82f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b82f6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b82f8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b82fa:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b82fc:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b82fe:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8300:	f7fb fec9 	bl	b4096 <_Znwj>
   b8304:	b118      	cbz	r0, b830e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b8306:	682b      	ldr	r3, [r5, #0]
   b8308:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b830a:	686b      	ldr	r3, [r5, #4]
   b830c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b830e:	4b03      	ldr	r3, [pc, #12]	; (b831c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8310:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8312:	4b03      	ldr	r3, [pc, #12]	; (b8320 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8314:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8316:	60a3      	str	r3, [r4, #8]
      }
   b8318:	4620      	mov	r0, r4
   b831a:	bd38      	pop	{r3, r4, r5, pc}
   b831c:	000b7ba5 	.word	0x000b7ba5
   b8320:	000b7bfd 	.word	0x000b7bfd

000b8324 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8324:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8326:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8328:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b832a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b832c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b832e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8330:	f7fb feb1 	bl	b4096 <_Znwj>
   b8334:	b118      	cbz	r0, b833e <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b8336:	682b      	ldr	r3, [r5, #0]
   b8338:	6003      	str	r3, [r0, #0]
   b833a:	686b      	ldr	r3, [r5, #4]
   b833c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b833e:	4b03      	ldr	r3, [pc, #12]	; (b834c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b8340:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8342:	4b03      	ldr	r3, [pc, #12]	; (b8350 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8344:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8346:	60a3      	str	r3, [r4, #8]
      }
   b8348:	4620      	mov	r0, r4
   b834a:	bd38      	pop	{r3, r4, r5, pc}
   b834c:	000b7b99 	.word	0x000b7b99
   b8350:	000b7bbd 	.word	0x000b7bbd

000b8354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8354:	680b      	ldr	r3, [r1, #0]
   b8356:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8358:	b113      	cbz	r3, b8360 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b835a:	685a      	ldr	r2, [r3, #4]
   b835c:	3201      	adds	r2, #1
   b835e:	605a      	str	r2, [r3, #4]
      }
   b8360:	4770      	bx	lr

000b8362 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8362:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8364:	f851 3b04 	ldr.w	r3, [r1], #4
   b8368:	4604      	mov	r4, r0
   b836a:	f840 3b04 	str.w	r3, [r0], #4
   b836e:	f7ff fff1 	bl	b8354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8372:	6823      	ldr	r3, [r4, #0]
   b8374:	b90b      	cbnz	r3, b837a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8376:	f7ff fc05 	bl	b7b84 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b837a:	4620      	mov	r0, r4
   b837c:	bd10      	pop	{r4, pc}

000b837e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b837e:	b510      	push	{r4, lr}
   b8380:	f851 3b04 	ldr.w	r3, [r1], #4
   b8384:	4604      	mov	r4, r0
   b8386:	f840 3b04 	str.w	r3, [r0], #4
   b838a:	f7ff ffe3 	bl	b8354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b838e:	4620      	mov	r0, r4
   b8390:	bd10      	pop	{r4, pc}

000b8392 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8392:	b510      	push	{r4, lr}
   b8394:	f851 3b04 	ldr.w	r3, [r1], #4
   b8398:	4604      	mov	r4, r0
   b839a:	f840 3b04 	str.w	r3, [r0], #4
   b839e:	f7ff ffd9 	bl	b8354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b83a2:	4620      	mov	r0, r4
   b83a4:	bd10      	pop	{r4, pc}

000b83a6 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b83a6:	b510      	push	{r4, lr}
   b83a8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b83aa:	3004      	adds	r0, #4
   b83ac:	f7fc fcb4 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b83b0:	4620      	mov	r0, r4
   b83b2:	bd10      	pop	{r4, pc}

000b83b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b83b6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83ba:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b83bc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b83c0:	42ae      	cmp	r6, r5
   b83c2:	d004      	beq.n	b83ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b83c4:	1d28      	adds	r0, r5, #4
   b83c6:	f7fc fca7 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b83ca:	3508      	adds	r5, #8
   b83cc:	e7f8      	b.n	b83c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b83ce:	6820      	ldr	r0, [r4, #0]
   b83d0:	f7fe fd60 	bl	b6e94 <free>
}
   b83d4:	4620      	mov	r0, r4
   b83d6:	bd70      	pop	{r4, r5, r6, pc}

000b83d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b83da:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b83de:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b83e0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b83e4:	42ae      	cmp	r6, r5
   b83e6:	d004      	beq.n	b83f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b83e8:	1d28      	adds	r0, r5, #4
   b83ea:	f7fc fc95 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b83ee:	3508      	adds	r5, #8
   b83f0:	e7f8      	b.n	b83e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b83f2:	6820      	ldr	r0, [r4, #0]
   b83f4:	f7fe fd4e 	bl	b6e94 <free>
}
   b83f8:	4620      	mov	r0, r4
   b83fa:	bd70      	pop	{r4, r5, r6, pc}

000b83fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b83fc:	b510      	push	{r4, lr}
   b83fe:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8400:	3024      	adds	r0, #36	; 0x24
   b8402:	f7ff ffe9 	bl	b83d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8406:	f104 0018 	add.w	r0, r4, #24
   b840a:	f7ff ffd3 	bl	b83b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b840e:	bd10      	pop	{r4, pc}

000b8410 <__tcf_0>:
    static BleLocalDevice instance;
   b8410:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8412:	4b17      	ldr	r3, [pc, #92]	; (b8470 <__tcf_0+0x60>)
   b8414:	681c      	ldr	r4, [r3, #0]
   b8416:	b354      	cbz	r4, b846e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8418:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b841c:	f7fb ffe4 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
   b8420:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8424:	f7fb ffe0 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
   b8428:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b842c:	f7fb ffdc 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
   b8430:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8434:	f7fb ffd8 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8438:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b843c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8440:	42ae      	cmp	r6, r5
   b8442:	d004      	beq.n	b844e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8444:	1d28      	adds	r0, r5, #4
   b8446:	f7fc fc67 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b844a:	3508      	adds	r5, #8
   b844c:	e7f8      	b.n	b8440 <__tcf_0+0x30>
    ::free(ptr);
   b844e:	69a0      	ldr	r0, [r4, #24]
   b8450:	f7fe fd20 	bl	b6e94 <free>
    ~BleLocalDeviceImpl() = default;
   b8454:	f104 000c 	add.w	r0, r4, #12
   b8458:	f7ff ffbe 	bl	b83d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b845c:	4620      	mov	r0, r4
   b845e:	f7ff ffa9 	bl	b83b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8462:	4620      	mov	r0, r4
   b8464:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b846a:	f7fb be1a 	b.w	b40a2 <_ZdlPvj>
   b846e:	bd70      	pop	{r4, r5, r6, pc}
   b8470:	2003e698 	.word	0x2003e698

000b8474 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8474:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8476:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8478:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b847c:	e9c1 3300 	strd	r3, r3, [r1]
   b8480:	6803      	ldr	r3, [r0, #0]
   b8482:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8484:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8486:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8488:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b848a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b848c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b848e:	f7fc fc43 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8492:	b002      	add	sp, #8
   b8494:	bd10      	pop	{r4, pc}

000b8496 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8496:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8498:	b510      	push	{r4, lr}
      if (_M_empty())
   b849a:	b90a      	cbnz	r2, b84a0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b849c:	f002 f936 	bl	ba70c <_ZSt25__throw_bad_function_callv>
    }
   b84a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b84a4:	68c3      	ldr	r3, [r0, #12]
   b84a6:	4718      	bx	r3

000b84a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b84a8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b84aa:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b84ac:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b84ae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b84b0:	dd03      	ble.n	b84ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b84b2:	f7fe fcf7 	bl	b6ea4 <realloc>
            if (!d) {
   b84b6:	b918      	cbnz	r0, b84c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b84b8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b84ba:	f7fe fceb 	bl	b6e94 <free>
        T* d = nullptr;
   b84be:	2000      	movs	r0, #0
        data_ = d;
   b84c0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b84c2:	60a5      	str	r5, [r4, #8]
        return true;
   b84c4:	2001      	movs	r0, #1
   b84c6:	e7f7      	b.n	b84b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b84c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b84c8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b84ca:	6883      	ldr	r3, [r0, #8]
   b84cc:	428b      	cmp	r3, r1
   b84ce:	da02      	bge.n	b84d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b84d0:	f7ff ffea 	bl	b84a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b84d4:	bd08      	pop	{r3, pc}
    return true;
   b84d6:	2001      	movs	r0, #1
   b84d8:	e7fc      	b.n	b84d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b84da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b84da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b84de:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84e0:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b84e2:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84e4:	4419      	add	r1, r3
   b84e6:	6883      	ldr	r3, [r0, #8]
   b84e8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b84ea:	4604      	mov	r4, r0
   b84ec:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b84ee:	dc12      	bgt.n	b8516 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b84f0:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b84f2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b84f4:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b84f6:	1bd2      	subs	r2, r2, r7
   b84f8:	4631      	mov	r1, r6
   b84fa:	1970      	adds	r0, r6, r5
   b84fc:	f002 ff23 	bl	bb346 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8500:	462a      	mov	r2, r5
   b8502:	4641      	mov	r1, r8
   b8504:	4630      	mov	r0, r6
   b8506:	f002 ff10 	bl	bb32a <memcpy>
    size_ += n;
   b850a:	6863      	ldr	r3, [r4, #4]
   b850c:	442b      	add	r3, r5
   b850e:	6063      	str	r3, [r4, #4]
    return true;
   b8510:	2001      	movs	r0, #1
}
   b8512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8516:	f7ff ffc7 	bl	b84a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b851a:	2800      	cmp	r0, #0
   b851c:	d1e8      	bne.n	b84f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b851e:	e7f8      	b.n	b8512 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8522:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8524:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8528:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b852a:	4604      	mov	r4, r0
   b852c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b852e:	da0b      	bge.n	b8548 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8530:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8532:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8534:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8536:	1b52      	subs	r2, r2, r5
   b8538:	1c48      	adds	r0, r1, #1
   b853a:	f002 ff04 	bl	bb346 <memmove>
    new(p) T(std::move(value));
   b853e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8540:	6863      	ldr	r3, [r4, #4]
   b8542:	3301      	adds	r3, #1
   b8544:	6063      	str	r3, [r4, #4]
}
   b8546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8548:	3101      	adds	r1, #1
   b854a:	f7ff ffad 	bl	b84a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b854e:	2800      	cmp	r0, #0
   b8550:	d1ee      	bne.n	b8530 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8552:	e7f8      	b.n	b8546 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8554 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8554:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8556:	6841      	ldr	r1, [r0, #4]
   b8558:	f7ff bfe2 	b.w	b8520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b855c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b855c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8560:	4604      	mov	r4, r0
   b8562:	461d      	mov	r5, r3
   b8564:	460f      	mov	r7, r1
   b8566:	ab01      	add	r3, sp, #4
   b8568:	4690      	mov	r8, r2
   b856a:	460a      	mov	r2, r1
   b856c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8570:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8574:	f7ff faf0 	bl	b7b58 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8578:	1cae      	adds	r6, r5, #2
   b857a:	6863      	ldr	r3, [r4, #4]
   b857c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b857e:	f1b9 0f00 	cmp.w	r9, #0
   b8582:	d126      	bne.n	b85d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8584:	b328      	cbz	r0, b85d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8586:	4433      	add	r3, r6
   b8588:	1a1b      	subs	r3, r3, r0
   b858a:	2bff      	cmp	r3, #255	; 0xff
   b858c:	d809      	bhi.n	b85a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b858e:	9901      	ldr	r1, [sp, #4]
   b8590:	4620      	mov	r0, r4
   b8592:	f7ff fe61 	bl	b8258 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8596:	6861      	ldr	r1, [r4, #4]
   b8598:	4620      	mov	r0, r4
   b859a:	4431      	add	r1, r6
   b859c:	f7ff ff94 	bl	b84c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b85a0:	b918      	cbnz	r0, b85aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b85a2:	6860      	ldr	r0, [r4, #4]
}
   b85a4:	b003      	add	sp, #12
   b85a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b85aa:	1c6a      	adds	r2, r5, #1
   b85ac:	9901      	ldr	r1, [sp, #4]
   b85ae:	b2d2      	uxtb	r2, r2
   b85b0:	4620      	mov	r0, r4
   b85b2:	f7ff ffb5 	bl	b8520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b85b6:	9901      	ldr	r1, [sp, #4]
   b85b8:	463a      	mov	r2, r7
   b85ba:	3101      	adds	r1, #1
   b85bc:	4620      	mov	r0, r4
   b85be:	f7ff ffaf 	bl	b8520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b85c2:	9901      	ldr	r1, [sp, #4]
   b85c4:	462b      	mov	r3, r5
   b85c6:	4642      	mov	r2, r8
   b85c8:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b85ca:	4620      	mov	r0, r4
   b85cc:	f7ff ff85 	bl	b84da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b85d0:	e7e7      	b.n	b85a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b85d2:	18f1      	adds	r1, r6, r3
   b85d4:	29ff      	cmp	r1, #255	; 0xff
   b85d6:	d8e4      	bhi.n	b85a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b85d8:	4620      	mov	r0, r4
   b85da:	f7ff ff75 	bl	b84c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b85de:	2800      	cmp	r0, #0
   b85e0:	d0df      	beq.n	b85a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b85e2:	1c69      	adds	r1, r5, #1
   b85e4:	b2c9      	uxtb	r1, r1
   b85e6:	4620      	mov	r0, r4
   b85e8:	f7ff ffb4 	bl	b8554 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b85ec:	4639      	mov	r1, r7
   b85ee:	4620      	mov	r0, r4
   b85f0:	f7ff ffb0 	bl	b8554 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b85f4:	6861      	ldr	r1, [r4, #4]
   b85f6:	462b      	mov	r3, r5
   b85f8:	4642      	mov	r2, r8
   b85fa:	e7e6      	b.n	b85ca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b85fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b85fc:	b430      	push	{r4, r5}
   b85fe:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8602:	b11a      	cbz	r2, b860c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8604:	9502      	str	r5, [sp, #8]
}
   b8606:	bc30      	pop	{r4, r5}
   b8608:	f7ff bfa8 	b.w	b855c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b860c:	6840      	ldr	r0, [r0, #4]
}
   b860e:	bc30      	pop	{r4, r5}
   b8610:	4770      	bx	lr

000b8612 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8612:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8614:	2300      	movs	r3, #0
   b8616:	e9c0 3300 	strd	r3, r3, [r0]
   b861a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b861c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b861e:	9300      	str	r3, [sp, #0]
   b8620:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8622:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8626:	4619      	mov	r1, r3
   b8628:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b862c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b862e:	f7ff ffe5 	bl	b85fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8632:	4620      	mov	r0, r4
   b8634:	b004      	add	sp, #16
   b8636:	bd10      	pop	{r4, pc}

000b8638 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b8638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b863a:	460a      	mov	r2, r1
   b863c:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b863e:	2114      	movs	r1, #20
   b8640:	4610      	mov	r0, r2
   b8642:	9203      	str	r2, [sp, #12]
   b8644:	f002 ff3e 	bl	bb4c4 <strnlen>
   b8648:	2100      	movs	r1, #0
   b864a:	4603      	mov	r3, r0
   b864c:	9100      	str	r1, [sp, #0]
   b864e:	9a03      	ldr	r2, [sp, #12]
   b8650:	2109      	movs	r1, #9
   b8652:	4620      	mov	r0, r4
   b8654:	f7ff ffd2 	bl	b85fc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8658:	b004      	add	sp, #16
   b865a:	bd10      	pop	{r4, pc}

000b865c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b865c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b865e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8660:	4604      	mov	r4, r0
   b8662:	460d      	mov	r5, r1
   b8664:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8666:	d914      	bls.n	b8692 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8668:	4290      	cmp	r0, r2
   b866a:	d213      	bcs.n	b8694 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b866c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8670:	1a75      	subs	r5, r6, r1
   b8672:	f1a1 0708 	sub.w	r7, r1, #8
   b8676:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8678:	42b7      	cmp	r7, r6
   b867a:	d018      	beq.n	b86ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b867c:	b11c      	cbz	r4, b8686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b867e:	4631      	mov	r1, r6
   b8680:	4620      	mov	r0, r4
   b8682:	f7ff fe86 	bl	b8392 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8686:	1d30      	adds	r0, r6, #4
   b8688:	f7fc fb46 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b868c:	3e08      	subs	r6, #8
   b868e:	3c08      	subs	r4, #8
   b8690:	e7f2      	b.n	b8678 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8692:	d00c      	beq.n	b86ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8694:	42b5      	cmp	r5, r6
   b8696:	d00a      	beq.n	b86ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8698:	b11c      	cbz	r4, b86a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b869a:	4629      	mov	r1, r5
   b869c:	4620      	mov	r0, r4
   b869e:	f7ff fe78 	bl	b8392 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b86a2:	1d28      	adds	r0, r5, #4
   b86a4:	f7fc fb38 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b86a8:	3508      	adds	r5, #8
   b86aa:	3408      	adds	r4, #8
   b86ac:	e7f2      	b.n	b8694 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b86ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b86b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b86b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b86b2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b86b4:	6846      	ldr	r6, [r0, #4]
   b86b6:	4668      	mov	r0, sp
   b86b8:	f7ff fe6b 	bl	b8392 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b86bc:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b86c0:	429f      	cmp	r7, r3
   b86c2:	db12      	blt.n	b86ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b86c4:	3701      	adds	r7, #1
        if (n > 0) {
   b86c6:	2f00      	cmp	r7, #0
   b86c8:	dd29      	ble.n	b871e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b86ca:	00f8      	lsls	r0, r7, #3
   b86cc:	f7fe fbda 	bl	b6e84 <malloc>
            if (!d) {
   b86d0:	4605      	mov	r5, r0
   b86d2:	b1f0      	cbz	r0, b8712 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b86d4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b86d8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b86dc:	f7ff ffbe 	bl	b865c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b86e0:	6820      	ldr	r0, [r4, #0]
   b86e2:	f7fe fbd7 	bl	b6e94 <free>
        data_ = d;
   b86e6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b86e8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b86ea:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b86ec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b86ee:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b86f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b86f6:	4631      	mov	r1, r6
   b86f8:	f106 0008 	add.w	r0, r6, #8
   b86fc:	f7ff ffae 	bl	b865c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8700:	b11e      	cbz	r6, b870a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8702:	4669      	mov	r1, sp
   b8704:	4630      	mov	r0, r6
   b8706:	f7ff fe44 	bl	b8392 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b870a:	6863      	ldr	r3, [r4, #4]
   b870c:	3301      	adds	r3, #1
   b870e:	6063      	str	r3, [r4, #4]
    return true;
   b8710:	2501      	movs	r5, #1
   b8712:	a801      	add	r0, sp, #4
   b8714:	f7fc fb00 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8718:	4628      	mov	r0, r5
   b871a:	b003      	add	sp, #12
   b871c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b871e:	2500      	movs	r5, #0
   b8720:	e7de      	b.n	b86e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8722 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8724:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8728:	4605      	mov	r5, r0
   b872a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b872c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8730:	42a6      	cmp	r6, r4
   b8732:	d005      	beq.n	b8740 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8734:	4639      	mov	r1, r7
   b8736:	4620      	mov	r0, r4
   b8738:	f7ff fcdd 	bl	b80f6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b873c:	b108      	cbz	r0, b8742 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b873e:	b914      	cbnz	r4, b8746 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8742:	3408      	adds	r4, #8
   b8744:	e7f4      	b.n	b8730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8746:	1d20      	adds	r0, r4, #4
   b8748:	f7fc fae6 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b874c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8750:	f104 0108 	add.w	r1, r4, #8
   b8754:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8758:	4620      	mov	r0, r4
   b875a:	f7ff ff7f 	bl	b865c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b875e:	686b      	ldr	r3, [r5, #4]
   b8760:	3b01      	subs	r3, #1
   b8762:	606b      	str	r3, [r5, #4]
    return true;
   b8764:	e7ec      	b.n	b8740 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8768 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b876c:	4605      	mov	r5, r0
   b876e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8770:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8772:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8774:	f7ff fa96 	bl	b7ca4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8778:	682e      	ldr	r6, [r5, #0]
   b877a:	1ef3      	subs	r3, r6, #3
   b877c:	2b0d      	cmp	r3, #13
   b877e:	d83c      	bhi.n	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8780:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8784:	0053000e 	.word	0x0053000e
   b8788:	00d1003b 	.word	0x00d1003b
   b878c:	003b003b 	.word	0x003b003b
   b8790:	003b003b 	.word	0x003b003b
   b8794:	009b003b 	.word	0x009b003b
   b8798:	009b009b 	.word	0x009b009b
   b879c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b87a0:	a804      	add	r0, sp, #16
   b87a2:	f7ff fc73 	bl	b808c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b87a6:	9b04      	ldr	r3, [sp, #16]
   b87a8:	89aa      	ldrh	r2, [r5, #12]
   b87aa:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b87ac:	6869      	ldr	r1, [r5, #4]
   b87ae:	9804      	ldr	r0, [sp, #16]
   b87b0:	3108      	adds	r1, #8
   b87b2:	3002      	adds	r0, #2
   b87b4:	f7ff fa90 	bl	b7cd8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b87b8:	a904      	add	r1, sp, #16
   b87ba:	a806      	add	r0, sp, #24
   b87bc:	f7ff fde9 	bl	b8392 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b87c0:	a906      	add	r1, sp, #24
   b87c2:	f104 0018 	add.w	r0, r4, #24
   b87c6:	f7ff ff73 	bl	b86b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b87ca:	4605      	mov	r5, r0
   b87cc:	a807      	add	r0, sp, #28
   b87ce:	f7fc faa3 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b87d2:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b87d4:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b87d6:	b9b5      	cbnz	r5, b8806 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b87d8:	4b5d      	ldr	r3, [pc, #372]	; (b8950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b87da:	495e      	ldr	r1, [pc, #376]	; (b8954 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b87dc:	9300      	str	r3, [sp, #0]
   b87de:	2032      	movs	r0, #50	; 0x32
   b87e0:	462b      	mov	r3, r5
   b87e2:	aa06      	add	r2, sp, #24
   b87e4:	9507      	str	r5, [sp, #28]
   b87e6:	f7fe fa69 	bl	b6cbc <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b87ea:	9b04      	ldr	r3, [sp, #16]
   b87ec:	4629      	mov	r1, r5
   b87ee:	8818      	ldrh	r0, [r3, #0]
   b87f0:	f7fe f872 	bl	b68d8 <hal_ble_gap_disconnect>
   b87f4:	a805      	add	r0, sp, #20
   b87f6:	f7fc fa8f 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b87fa:	a803      	add	r0, sp, #12
   b87fc:	f7ff fa60 	bl	b7cc0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8800:	b00e      	add	sp, #56	; 0x38
   b8802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8806:	4a54      	ldr	r2, [pc, #336]	; (b8958 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8808:	9200      	str	r2, [sp, #0]
   b880a:	2300      	movs	r3, #0
   b880c:	4951      	ldr	r1, [pc, #324]	; (b8954 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b880e:	9307      	str	r3, [sp, #28]
   b8810:	aa06      	add	r2, sp, #24
   b8812:	2001      	movs	r0, #1
   b8814:	f7fe fa52 	bl	b6cbc <log_message>
                if (impl->connectedCallback_) {
   b8818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b881a:	2b00      	cmp	r3, #0
   b881c:	d0ea      	beq.n	b87f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b881e:	a904      	add	r1, sp, #16
   b8820:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8824:	f7ff fe37 	bl	b8496 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8828:	e7e4      	b.n	b87f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b882a:	89a9      	ldrh	r1, [r5, #12]
   b882c:	4620      	mov	r0, r4
   b882e:	f7ff fb91 	bl	b7f54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8832:	4606      	mov	r6, r0
   b8834:	2800      	cmp	r0, #0
   b8836:	d0e0      	beq.n	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8838:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b883a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b883e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8842:	8029      	strh	r1, [r5, #0]
   b8844:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8848:	429a      	cmp	r2, r3
   b884a:	d003      	beq.n	b8854 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b884c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8850:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8852:	e7f9      	b.n	b8848 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8854:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8858:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b885c:	45b8      	cmp	r8, r7
   b885e:	d004      	beq.n	b886a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8860:	1d38      	adds	r0, r7, #4
   b8862:	f7fc fa59 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8866:	3708      	adds	r7, #8
   b8868:	e7f8      	b.n	b885c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b886a:	2300      	movs	r3, #0
   b886c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b886e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8872:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8876:	45b8      	cmp	r8, r7
   b8878:	d004      	beq.n	b8884 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b887a:	1d38      	adds	r0, r7, #4
   b887c:	f7fc fa4c 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8880:	3708      	adds	r7, #8
   b8882:	e7f8      	b.n	b8876 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8884:	2300      	movs	r3, #0
   b8886:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8888:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b888a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b888c:	b123      	cbz	r3, b8898 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b888e:	4631      	mov	r1, r6
   b8890:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8894:	f7ff fdff 	bl	b8496 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8898:	2300      	movs	r3, #0
   b889a:	2220      	movs	r2, #32
   b889c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b88a0:	4a2e      	ldr	r2, [pc, #184]	; (b895c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b88a2:	9200      	str	r2, [sp, #0]
   b88a4:	492b      	ldr	r1, [pc, #172]	; (b8954 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b88a6:	aa06      	add	r2, sp, #24
   b88a8:	2001      	movs	r0, #1
   b88aa:	f7fe fa07 	bl	b6cbc <log_message>
                    impl->peers_.removeOne(*peer);
   b88ae:	4631      	mov	r1, r6
   b88b0:	f104 0018 	add.w	r0, r4, #24
   b88b4:	f7ff ff35 	bl	b8722 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b88b8:	e79f      	b.n	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b88ba:	89a9      	ldrh	r1, [r5, #12]
   b88bc:	4620      	mov	r0, r4
   b88be:	f7ff fb49 	bl	b7f54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b88c2:	2800      	cmp	r0, #0
   b88c4:	d099      	beq.n	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b88c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b88c8:	2b00      	cmp	r3, #0
   b88ca:	d096      	beq.n	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b88cc:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b88ce:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b88d0:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b88d4:	d001      	beq.n	b88da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b88d6:	2e10      	cmp	r6, #16
   b88d8:	d117      	bne.n	b890a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b88da:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b88dc:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b88de:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b88e0:	2506      	movs	r5, #6
                        };
   b88e2:	f88d 3015 	strb.w	r3, [sp, #21]
   b88e6:	9104      	str	r1, [sp, #16]
   b88e8:	f88d 2014 	strb.w	r2, [sp, #20]
   b88ec:	9006      	str	r0, [sp, #24]
   b88ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b88f2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b88f4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b88f8:	9508      	str	r5, [sp, #32]
   b88fa:	e883 0003 	stmia.w	r3, {r0, r1}
   b88fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8900:	a906      	add	r1, sp, #24
   b8902:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8906:	4798      	blx	r3
   b8908:	e777      	b.n	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b890a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b890c:	bf01      	itttt	eq
   b890e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8910:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8912:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8916:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8918:	bf0f      	iteee	eq
   b891a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b891e:	461a      	movne	r2, r3
   b8920:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8922:	461d      	movne	r5, r3
   b8924:	e7dd      	b.n	b88e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8926:	89a9      	ldrh	r1, [r5, #12]
   b8928:	4620      	mov	r0, r4
   b892a:	f7ff fb13 	bl	b7f54 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b892e:	4601      	mov	r1, r0
   b8930:	2800      	cmp	r0, #0
   b8932:	f43f af62 	beq.w	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8936:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8938:	2b00      	cmp	r3, #0
   b893a:	f43f af5e 	beq.w	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b893e:	686b      	ldr	r3, [r5, #4]
   b8940:	9306      	str	r3, [sp, #24]
   b8942:	aa06      	add	r2, sp, #24
   b8944:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8946:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b894a:	4798      	blx	r3
   b894c:	e755      	b.n	b87fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b894e:	bf00      	nop
   b8950:	000bdc70 	.word	0x000bdc70
   b8954:	000bdbef 	.word	0x000bdbef
   b8958:	000bdc96 	.word	0x000bdc96
   b895c:	000bdcb3 	.word	0x000bdcb3

000b8960 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8960:	b513      	push	{r0, r1, r4, lr}
   b8962:	460b      	mov	r3, r1
   b8964:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8966:	e9d0 0100 	ldrd	r0, r1, [r0]
   b896a:	466c      	mov	r4, sp
   b896c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8970:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8974:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8978:	e894 0003 	ldmia.w	r4, {r0, r1}
   b897c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8980:	b002      	add	sp, #8
   b8982:	bd10      	pop	{r4, pc}

000b8984 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8984:	b538      	push	{r3, r4, r5, lr}
   b8986:	4605      	mov	r5, r0
   b8988:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b898a:	f7ff ffe9 	bl	b8960 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b898e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8990:	68a2      	ldr	r2, [r4, #8]
   b8992:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8994:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8996:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8998:	68e2      	ldr	r2, [r4, #12]
   b899a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b899c:	60e3      	str	r3, [r4, #12]
      }
   b899e:	bd38      	pop	{r3, r4, r5, pc}

000b89a0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b89a0:	b570      	push	{r4, r5, r6, lr}
   b89a2:	4604      	mov	r4, r0
   b89a4:	b08c      	sub	sp, #48	; 0x30
   b89a6:	460e      	mov	r6, r1
   b89a8:	9201      	str	r2, [sp, #4]
   b89aa:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b89ac:	f7ff fab2 	bl	b7f14 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b89b0:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b89b2:	9901      	ldr	r1, [sp, #4]
   b89b4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b89b8:	f7fe ffae 	bl	b7918 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b89bc:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b89c0:	b1cd      	cbz	r5, b89f6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b89c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b89c4:	9502      	str	r5, [sp, #8]
   b89c6:	a902      	add	r1, sp, #8
   b89c8:	a804      	add	r0, sp, #16
   b89ca:	9303      	str	r3, [sp, #12]
   b89cc:	f7ff fc92 	bl	b82f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b89d0:	2300      	movs	r3, #0
	__x.swap(*this);
   b89d2:	a908      	add	r1, sp, #32
   b89d4:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b89d6:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b89d8:	f7ff ffd4 	bl	b8984 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b89dc:	4631      	mov	r1, r6
   b89de:	a808      	add	r0, sp, #32
   b89e0:	f7ff ffd0 	bl	b8984 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b89e4:	a808      	add	r0, sp, #32
   b89e6:	f7fb fcff 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
   b89ea:	a804      	add	r0, sp, #16
   b89ec:	f7fb fcfc 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
    }
   b89f0:	4620      	mov	r0, r4
   b89f2:	b00c      	add	sp, #48	; 0x30
   b89f4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b89f6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b89f8:	e7ea      	b.n	b89d0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b89fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b89fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a00:	b087      	sub	sp, #28
   b8a02:	461d      	mov	r5, r3
   b8a04:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8a08:	4680      	mov	r8, r0
   b8a0a:	468b      	mov	fp, r1
   b8a0c:	4692      	mov	sl, r2
   b8a0e:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8a10:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8a12:	2200      	movs	r2, #0
   b8a14:	2068      	movs	r0, #104	; 0x68
   b8a16:	9102      	str	r1, [sp, #8]
   b8a18:	9204      	str	r2, [sp, #16]
   b8a1a:	f7fb fb3c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8a1e:	1e06      	subs	r6, r0, #0
   b8a20:	f106 090c 	add.w	r9, r6, #12
   b8a24:	d018      	beq.n	b8a58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8a26:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8a28:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8a2a:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b8a2e:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8a30:	4a15      	ldr	r2, [pc, #84]	; (b8a88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8a32:	f847 2b20 	str.w	r2, [r7], #32
   b8a36:	9b03      	ldr	r3, [sp, #12]
   b8a38:	9100      	str	r1, [sp, #0]
   b8a3a:	465a      	mov	r2, fp
   b8a3c:	4651      	mov	r1, sl
   b8a3e:	4648      	mov	r0, r9
   b8a40:	f7ff ffae 	bl	b89a0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a46:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8a48:	682b      	ldr	r3, [r5, #0]
   b8a4a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8a4e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8a54:	6823      	ldr	r3, [r4, #0]
   b8a56:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8a58:	a904      	add	r1, sp, #16
   b8a5a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8a5c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8a60:	f7ff fd08 	bl	b8474 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8a64:	a805      	add	r0, sp, #20
   b8a66:	f7fc f957 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8a6a:	f8d8 3000 	ldr.w	r3, [r8]
   b8a6e:	b93b      	cbnz	r3, b8a80 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8a70:	4a06      	ldr	r2, [pc, #24]	; (b8a8c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8a72:	4907      	ldr	r1, [pc, #28]	; (b8a90 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8a74:	200a      	movs	r0, #10
}
   b8a76:	b007      	add	sp, #28
   b8a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8a7c:	f7fe b916 	b.w	b6cac <panic_>
}
   b8a80:	b007      	add	sp, #28
   b8a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a86:	bf00      	nop
   b8a88:	000bdd2c 	.word	0x000bdd2c
   b8a8c:	000b6849 	.word	0x000b6849
   b8a90:	000bdbd8 	.word	0x000bdbd8

000b8a94 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b8a94:	b538      	push	{r3, r4, r5, lr}
   b8a96:	4605      	mov	r5, r0
   b8a98:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8a9a:	f7ff ff61 	bl	b8960 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a9e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8aa0:	68a2      	ldr	r2, [r4, #8]
   b8aa2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8aa4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8aa6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8aa8:	68e2      	ldr	r2, [r4, #12]
   b8aaa:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8aac:	60e3      	str	r3, [r4, #12]
      }
   b8aae:	bd38      	pop	{r3, r4, r5, pc}

000b8ab0 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b8ab0:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b8ab2:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b8ab4:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b8ab6:	3424      	adds	r4, #36	; 0x24
   b8ab8:	b1b9      	cbz	r1, b8aea <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b8aba:	e9cd 1200 	strd	r1, r2, [sp]
   b8abe:	a802      	add	r0, sp, #8
   b8ac0:	4669      	mov	r1, sp
   b8ac2:	f7ff fc2f 	bl	b8324 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8ac6:	2300      	movs	r3, #0
	__x.swap(*this);
   b8ac8:	a906      	add	r1, sp, #24
   b8aca:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b8acc:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b8ace:	f7ff ffe1 	bl	b8a94 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b8ad2:	4621      	mov	r1, r4
   b8ad4:	a806      	add	r0, sp, #24
   b8ad6:	f7ff ffdd 	bl	b8a94 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b8ada:	a806      	add	r0, sp, #24
   b8adc:	f7fb fc84 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
   b8ae0:	a802      	add	r0, sp, #8
   b8ae2:	f7fb fc81 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
}
   b8ae6:	b00a      	add	sp, #40	; 0x28
   b8ae8:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8aea:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b8aec:	e7eb      	b.n	b8ac6 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b8aee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8aee:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8af2:	4604      	mov	r4, r0
   b8af4:	460d      	mov	r5, r1
   b8af6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8af8:	d914      	bls.n	b8b24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8afa:	4290      	cmp	r0, r2
   b8afc:	d213      	bcs.n	b8b26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8afe:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8b02:	1a75      	subs	r5, r6, r1
   b8b04:	f1a1 0708 	sub.w	r7, r1, #8
   b8b08:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8b0a:	42b7      	cmp	r7, r6
   b8b0c:	d018      	beq.n	b8b40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8b0e:	b11c      	cbz	r4, b8b18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8b10:	4631      	mov	r1, r6
   b8b12:	4620      	mov	r0, r4
   b8b14:	f7ff fc33 	bl	b837e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8b18:	1d30      	adds	r0, r6, #4
   b8b1a:	f7fc f8fd 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8b1e:	3e08      	subs	r6, #8
   b8b20:	3c08      	subs	r4, #8
   b8b22:	e7f2      	b.n	b8b0a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8b24:	d00c      	beq.n	b8b40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8b26:	42b5      	cmp	r5, r6
   b8b28:	d00a      	beq.n	b8b40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8b2a:	b11c      	cbz	r4, b8b34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8b2c:	4629      	mov	r1, r5
   b8b2e:	4620      	mov	r0, r4
   b8b30:	f7ff fc25 	bl	b837e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8b34:	1d28      	adds	r0, r5, #4
   b8b36:	f7fc f8ef 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8b3a:	3508      	adds	r5, #8
   b8b3c:	3408      	adds	r4, #8
   b8b3e:	e7f2      	b.n	b8b26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8b42:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8b44:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8b46:	4605      	mov	r5, r0
        if (n > 0) {
   b8b48:	dd11      	ble.n	b8b6e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8b4a:	00f0      	lsls	r0, r6, #3
   b8b4c:	f7fe f99a 	bl	b6e84 <malloc>
            if (!d) {
   b8b50:	4604      	mov	r4, r0
   b8b52:	b158      	cbz	r0, b8b6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8b54:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8b58:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8b5c:	f7ff ffc7 	bl	b8aee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8b60:	6828      	ldr	r0, [r5, #0]
   b8b62:	f7fe f997 	bl	b6e94 <free>
        data_ = d;
   b8b66:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8b68:	60ae      	str	r6, [r5, #8]
        return true;
   b8b6a:	2001      	movs	r0, #1
    }
   b8b6c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8b6e:	2400      	movs	r4, #0
   b8b70:	e7f6      	b.n	b8b60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8b72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8b74:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8b76:	6845      	ldr	r5, [r0, #4]
   b8b78:	4668      	mov	r0, sp
   b8b7a:	f7ff fc00 	bl	b837e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b7e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8b82:	4299      	cmp	r1, r3
   b8b84:	da10      	bge.n	b8ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8b86:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8b88:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8b8a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8b8e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8b92:	4629      	mov	r1, r5
   b8b94:	f105 0008 	add.w	r0, r5, #8
   b8b98:	f7ff ffa9 	bl	b8aee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8b9c:	b98d      	cbnz	r5, b8bc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8b9e:	6863      	ldr	r3, [r4, #4]
   b8ba0:	3301      	adds	r3, #1
   b8ba2:	6063      	str	r3, [r4, #4]
    return true;
   b8ba4:	2601      	movs	r6, #1
   b8ba6:	e006      	b.n	b8bb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ba8:	3101      	adds	r1, #1
   b8baa:	4620      	mov	r0, r4
   b8bac:	f7ff ffc9 	bl	b8b42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8bb0:	4606      	mov	r6, r0
   b8bb2:	2800      	cmp	r0, #0
   b8bb4:	d1e7      	bne.n	b8b86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8bb6:	a801      	add	r0, sp, #4
   b8bb8:	f7fc f8ae 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8bbc:	4630      	mov	r0, r6
   b8bbe:	b002      	add	sp, #8
   b8bc0:	bd70      	pop	{r4, r5, r6, pc}
   b8bc2:	4669      	mov	r1, sp
   b8bc4:	4628      	mov	r0, r5
   b8bc6:	f7ff fbda 	bl	b837e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8bca:	e7e8      	b.n	b8b9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8bcc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8bcc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8bd0:	4604      	mov	r4, r0
   b8bd2:	460d      	mov	r5, r1
   b8bd4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8bd6:	d914      	bls.n	b8c02 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8bd8:	4290      	cmp	r0, r2
   b8bda:	d213      	bcs.n	b8c04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8bdc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8be0:	1a75      	subs	r5, r6, r1
   b8be2:	f1a1 0708 	sub.w	r7, r1, #8
   b8be6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8be8:	42b7      	cmp	r7, r6
   b8bea:	d018      	beq.n	b8c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8bec:	b11c      	cbz	r4, b8bf6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8bee:	4631      	mov	r1, r6
   b8bf0:	4620      	mov	r0, r4
   b8bf2:	f7ff fbb6 	bl	b8362 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8bf6:	1d30      	adds	r0, r6, #4
   b8bf8:	f7fc f88e 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8bfc:	3e08      	subs	r6, #8
   b8bfe:	3c08      	subs	r4, #8
   b8c00:	e7f2      	b.n	b8be8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8c02:	d00c      	beq.n	b8c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8c04:	42b5      	cmp	r5, r6
   b8c06:	d00a      	beq.n	b8c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8c08:	b11c      	cbz	r4, b8c12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8c0a:	4629      	mov	r1, r5
   b8c0c:	4620      	mov	r0, r4
   b8c0e:	f7ff fba8 	bl	b8362 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c12:	1d28      	adds	r0, r5, #4
   b8c14:	f7fc f880 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8c18:	3508      	adds	r5, #8
   b8c1a:	3408      	adds	r4, #8
   b8c1c:	e7f2      	b.n	b8c04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8c20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8c20:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8c22:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8c24:	4605      	mov	r5, r0
        if (n > 0) {
   b8c26:	dd11      	ble.n	b8c4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8c28:	00f0      	lsls	r0, r6, #3
   b8c2a:	f7fe f92b 	bl	b6e84 <malloc>
            if (!d) {
   b8c2e:	4604      	mov	r4, r0
   b8c30:	b158      	cbz	r0, b8c4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8c32:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8c36:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8c3a:	f7ff ffc7 	bl	b8bcc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8c3e:	6828      	ldr	r0, [r5, #0]
   b8c40:	f7fe f928 	bl	b6e94 <free>
        data_ = d;
   b8c44:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8c46:	60ae      	str	r6, [r5, #8]
        return true;
   b8c48:	2001      	movs	r0, #1
    }
   b8c4a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8c4c:	2400      	movs	r4, #0
   b8c4e:	e7f6      	b.n	b8c3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8c50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8c50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c52:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8c54:	6845      	ldr	r5, [r0, #4]
   b8c56:	4668      	mov	r0, sp
   b8c58:	f7ff fb83 	bl	b8362 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c5c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8c60:	4299      	cmp	r1, r3
   b8c62:	da10      	bge.n	b8c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8c64:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8c66:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8c6c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c70:	4629      	mov	r1, r5
   b8c72:	f105 0008 	add.w	r0, r5, #8
   b8c76:	f7ff ffa9 	bl	b8bcc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8c7a:	b98d      	cbnz	r5, b8ca0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8c7c:	6863      	ldr	r3, [r4, #4]
   b8c7e:	3301      	adds	r3, #1
   b8c80:	6063      	str	r3, [r4, #4]
    return true;
   b8c82:	2601      	movs	r6, #1
   b8c84:	e006      	b.n	b8c94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c86:	3101      	adds	r1, #1
   b8c88:	4620      	mov	r0, r4
   b8c8a:	f7ff ffc9 	bl	b8c20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c8e:	4606      	mov	r6, r0
   b8c90:	2800      	cmp	r0, #0
   b8c92:	d1e7      	bne.n	b8c64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8c94:	a801      	add	r0, sp, #4
   b8c96:	f7fc f83f 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c9a:	4630      	mov	r0, r6
   b8c9c:	b002      	add	sp, #8
   b8c9e:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8ca0:	4669      	mov	r1, sp
   b8ca2:	4628      	mov	r0, r5
   b8ca4:	f7ff fb5d 	bl	b8362 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8ca8:	e7e8      	b.n	b8c7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b8cac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8cb0:	4617      	mov	r7, r2
   b8cb2:	b0a1      	sub	sp, #132	; 0x84
   b8cb4:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8cb6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8cb8:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8cba:	f7fe fff3 	bl	b7ca4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8cbe:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8cc0:	7923      	ldrb	r3, [r4, #4]
   b8cc2:	b953      	cbnz	r3, b8cda <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8cc4:	4639      	mov	r1, r7
   b8cc6:	4640      	mov	r0, r8
   b8cc8:	f7ff fb4b 	bl	b8362 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8ccc:	a80a      	add	r0, sp, #40	; 0x28
   b8cce:	f7fe fff7 	bl	b7cc0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8cd2:	4640      	mov	r0, r8
   b8cd4:	b021      	add	sp, #132	; 0x84
   b8cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8cda:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8cdc:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8ce0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8ce4:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8ce6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8cea:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8cee:	9b03      	ldr	r3, [sp, #12]
   b8cf0:	429d      	cmp	r5, r3
   b8cf2:	d021      	beq.n	b8d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8cf4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8cf8:	4658      	mov	r0, fp
   b8cfa:	f109 0114 	add.w	r1, r9, #20
   b8cfe:	f7ff f87e 	bl	b7dfe <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8d02:	b1b8      	cbz	r0, b8d34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8d04:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8d08:	4650      	mov	r0, sl
   b8d0a:	f7ff f878 	bl	b7dfe <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8d0e:	b188      	cbz	r0, b8d34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8d10:	6823      	ldr	r3, [r4, #0]
   b8d12:	f8d9 2000 	ldr.w	r2, [r9]
   b8d16:	4053      	eors	r3, r2
   b8d18:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8d1c:	d10a      	bne.n	b8d34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8d1e:	2220      	movs	r2, #32
   b8d20:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8d24:	4a5e      	ldr	r2, [pc, #376]	; (b8ea0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8d26:	9200      	str	r2, [sp, #0]
   b8d28:	aa15      	add	r2, sp, #84	; 0x54
   b8d2a:	495e      	ldr	r1, [pc, #376]	; (b8ea4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8d2c:	2032      	movs	r0, #50	; 0x32
   b8d2e:	f7fd ffc5 	bl	b6cbc <log_message>
   b8d32:	e7c7      	b.n	b8cc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8d34:	3508      	adds	r5, #8
   b8d36:	e7da      	b.n	b8cee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8d38:	4650      	mov	r0, sl
   b8d3a:	f7ff f831 	bl	b7da0 <_ZNK8particle7BleUuid7isValidEv>
   b8d3e:	b960      	cbnz	r0, b8d5a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8d40:	4959      	ldr	r1, [pc, #356]	; (b8ea8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8d42:	2201      	movs	r2, #1
   b8d44:	a815      	add	r0, sp, #84	; 0x54
   b8d46:	ad15      	add	r5, sp, #84	; 0x54
   b8d48:	f7ff f802 	bl	b7d50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d4e:	46d4      	mov	ip, sl
   b8d50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8d54:	682b      	ldr	r3, [r5, #0]
   b8d56:	f8cc 3000 	str.w	r3, [ip]
   b8d5a:	6833      	ldr	r3, [r6, #0]
   b8d5c:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8d60:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8d64:	455d      	cmp	r5, fp
   b8d66:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8d68:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8d6a:	d06e      	beq.n	b8e4a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8d6c:	f855 0b08 	ldr.w	r0, [r5], #8
   b8d70:	f7ff f845 	bl	b7dfe <_ZNK8particle7BleUuideqERKS0_>
   b8d74:	2800      	cmp	r0, #0
   b8d76:	d0f5      	beq.n	b8d64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8d78:	f104 0a14 	add.w	sl, r4, #20
   b8d7c:	4650      	mov	r0, sl
   b8d7e:	f7ff f80f 	bl	b7da0 <_ZNK8particle7BleUuid7isValidEv>
   b8d82:	b988      	cbnz	r0, b8da8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8d84:	4b49      	ldr	r3, [pc, #292]	; (b8eac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8d86:	4948      	ldr	r1, [pc, #288]	; (b8ea8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8d88:	881a      	ldrh	r2, [r3, #0]
   b8d8a:	3201      	adds	r2, #1
   b8d8c:	b292      	uxth	r2, r2
   b8d8e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8d90:	a815      	add	r0, sp, #84	; 0x54
   b8d92:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8d94:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8d96:	f7fe fffa 	bl	b7d8e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d9c:	46d4      	mov	ip, sl
   b8d9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8da2:	682b      	ldr	r3, [r5, #0]
   b8da4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8da8:	4b41      	ldr	r3, [pc, #260]	; (b8eb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8daa:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8dac:	2228      	movs	r2, #40	; 0x28
   b8dae:	2100      	movs	r1, #0
   b8db0:	a816      	add	r0, sp, #88	; 0x58
   b8db2:	f002 fae2 	bl	bb37a <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8db6:	4651      	mov	r1, sl
   b8db8:	a804      	add	r0, sp, #16
   b8dba:	f7ff f803 	bl	b7dc4 <_ZN8particle7BleUuid7halUUIDEv>
   b8dbe:	ab04      	add	r3, sp, #16
   b8dc0:	aa18      	add	r2, sp, #96	; 0x60
   b8dc2:	f10d 0c20 	add.w	ip, sp, #32
   b8dc6:	6818      	ldr	r0, [r3, #0]
   b8dc8:	6859      	ldr	r1, [r3, #4]
   b8dca:	4615      	mov	r5, r2
   b8dcc:	c503      	stmia	r5!, {r0, r1}
   b8dce:	3308      	adds	r3, #8
   b8dd0:	4563      	cmp	r3, ip
   b8dd2:	462a      	mov	r2, r5
   b8dd4:	d1f7      	bne.n	b8dc6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8dd6:	6818      	ldr	r0, [r3, #0]
   b8dd8:	6028      	str	r0, [r5, #0]
    return value_;
   b8dda:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8ddc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8de0:	f8d9 3000 	ldr.w	r3, [r9]
   b8de4:	8a9b      	ldrh	r3, [r3, #20]
   b8de6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8dea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8dec:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8dee:	4b31      	ldr	r3, [pc, #196]	; (b8eb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8df0:	2200      	movs	r2, #0
   b8df2:	1da1      	adds	r1, r4, #6
   b8df4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8df6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8dfa:	f7fd fd9f 	bl	b693c <hal_ble_gatt_server_add_characteristic>
   b8dfe:	2800      	cmp	r0, #0
   b8e00:	f47f af60 	bne.w	b8cc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8e04:	2301      	movs	r3, #1
   b8e06:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8e08:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8e0a:	4639      	mov	r1, r7
        return characteristics_;
   b8e0c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8e0e:	a80d      	add	r0, sp, #52	; 0x34
   b8e10:	f7ff faa7 	bl	b8362 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8e14:	4620      	mov	r0, r4
   b8e16:	a90d      	add	r1, sp, #52	; 0x34
   b8e18:	f7ff ff1a 	bl	b8c50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8e1c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8e1e:	a80e      	add	r0, sp, #56	; 0x38
   b8e20:	f7fb ff7a 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e24:	2c00      	cmp	r4, #0
   b8e26:	f47f af4d 	bne.w	b8cc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8e2a:	2320      	movs	r3, #32
   b8e2c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8e30:	4b21      	ldr	r3, [pc, #132]	; (b8eb8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8e32:	9300      	str	r3, [sp, #0]
   b8e34:	aa0d      	add	r2, sp, #52	; 0x34
   b8e36:	4623      	mov	r3, r4
   b8e38:	e777      	b.n	b8d2a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8e3a:	4639      	mov	r1, r7
   b8e3c:	4640      	mov	r0, r8
   b8e3e:	f7ff fa90 	bl	b8362 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8e42:	a80c      	add	r0, sp, #48	; 0x30
   b8e44:	f7fb ff68 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e48:	e740      	b.n	b8ccc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8e4a:	a80b      	add	r0, sp, #44	; 0x2c
   b8e4c:	f7ff f8fa 	bl	b8044 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8e50:	4651      	mov	r1, sl
   b8e52:	a815      	add	r0, sp, #84	; 0x54
   b8e54:	f7fe ffb6 	bl	b7dc4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e5a:	2300      	movs	r3, #0
   b8e5c:	3214      	adds	r2, #20
   b8e5e:	a915      	add	r1, sp, #84	; 0x54
   b8e60:	2001      	movs	r0, #1
   b8e62:	f7fd fd43 	bl	b68ec <hal_ble_gatt_server_add_service>
   b8e66:	2800      	cmp	r0, #0
   b8e68:	d1e7      	bne.n	b8e3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8e6a:	6835      	ldr	r5, [r6, #0]
   b8e6c:	a90b      	add	r1, sp, #44	; 0x2c
   b8e6e:	a80d      	add	r0, sp, #52	; 0x34
   b8e70:	f7ff fa85 	bl	b837e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8e74:	4628      	mov	r0, r5
   b8e76:	a90d      	add	r1, sp, #52	; 0x34
   b8e78:	f7ff fe7b 	bl	b8b72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8e7c:	4605      	mov	r5, r0
   b8e7e:	a80e      	add	r0, sp, #56	; 0x38
   b8e80:	f7fb ff4a 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e84:	2d00      	cmp	r5, #0
   b8e86:	d0d8      	beq.n	b8e3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8e88:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8e8a:	6853      	ldr	r3, [r2, #4]
   b8e8c:	6812      	ldr	r2, [r2, #0]
   b8e8e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8e92:	3b01      	subs	r3, #1
   b8e94:	a80c      	add	r0, sp, #48	; 0x30
   b8e96:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8e9a:	f7fb ff3d 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e9e:	e76b      	b.n	b8d78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8ea0:	000bdcd2 	.word	0x000bdcd2
   b8ea4:	000bdbef 	.word	0x000bdbef
   b8ea8:	000bdd96 	.word	0x000bdd96
   b8eac:	2003e690 	.word	0x2003e690
   b8eb0:	002c0003 	.word	0x002c0003
   b8eb4:	000b81dd 	.word	0x000b81dd
   b8eb8:	000bdcfd 	.word	0x000bdcfd

000b8ebc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8ebc:	4802      	ldr	r0, [pc, #8]	; (b8ec8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8ebe:	2300      	movs	r3, #0
   b8ec0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8ec2:	f7fd bdab 	b.w	b6a1c <os_mutex_recursive_create>
   b8ec6:	bf00      	nop
   b8ec8:	2003e694 	.word	0x2003e694

000b8ecc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ece:	4606      	mov	r6, r0
   b8ed0:	460d      	mov	r5, r1
  size_t n = 0;
   b8ed2:	188f      	adds	r7, r1, r2
   b8ed4:	2400      	movs	r4, #0
  while (size--) {
   b8ed6:	42bd      	cmp	r5, r7
   b8ed8:	d00c      	beq.n	b8ef4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8eda:	6833      	ldr	r3, [r6, #0]
   b8edc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8ee0:	689b      	ldr	r3, [r3, #8]
   b8ee2:	4630      	mov	r0, r6
   b8ee4:	4798      	blx	r3
     if (chunk>=0)
   b8ee6:	1e03      	subs	r3, r0, #0
   b8ee8:	db01      	blt.n	b8eee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8eea:	441c      	add	r4, r3
  while (size--) {
   b8eec:	e7f3      	b.n	b8ed6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8eee:	2c00      	cmp	r4, #0
   b8ef0:	bf08      	it	eq
   b8ef2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8ef4:	4620      	mov	r0, r4
   b8ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8ef8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b8ef8:	b513      	push	{r0, r1, r4, lr}
   b8efa:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8efc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8efe:	b159      	cbz	r1, b8f18 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8f00:	9101      	str	r1, [sp, #4]
   b8f02:	f002 fab0 	bl	bb466 <strlen>
   b8f06:	6823      	ldr	r3, [r4, #0]
   b8f08:	9901      	ldr	r1, [sp, #4]
   b8f0a:	68db      	ldr	r3, [r3, #12]
   b8f0c:	4602      	mov	r2, r0
   b8f0e:	4620      	mov	r0, r4
    }
   b8f10:	b002      	add	sp, #8
   b8f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8f16:	4718      	bx	r3
    }
   b8f18:	b002      	add	sp, #8
   b8f1a:	bd10      	pop	{r4, pc}

000b8f1c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b8f1c:	6803      	ldr	r3, [r0, #0]
   b8f1e:	689b      	ldr	r3, [r3, #8]
   b8f20:	4718      	bx	r3

000b8f22 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8f22:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8f24:	210d      	movs	r1, #13
{
   b8f26:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8f28:	f7ff fff8 	bl	b8f1c <_ZN5Print5printEc>
  n += print('\n');
   b8f2c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8f2e:	4604      	mov	r4, r0
  n += print('\n');
   b8f30:	4628      	mov	r0, r5
   b8f32:	f7ff fff3 	bl	b8f1c <_ZN5Print5printEc>
  return n;
}
   b8f36:	4420      	add	r0, r4
   b8f38:	bd38      	pop	{r3, r4, r5, pc}

000b8f3a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8f3a:	b538      	push	{r3, r4, r5, lr}
   b8f3c:	4605      	mov	r5, r0
  return write(str);
   b8f3e:	f7ff ffdb 	bl	b8ef8 <_ZN5Print5writeEPKc>
   b8f42:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8f44:	4628      	mov	r0, r5
   b8f46:	f7ff ffec 	bl	b8f22 <_ZN5Print7printlnEv>
  return n;
}
   b8f4a:	4420      	add	r0, r4
   b8f4c:	bd38      	pop	{r3, r4, r5, pc}

000b8f4e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8f4e:	b530      	push	{r4, r5, lr}
   b8f50:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8f52:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8f54:	2a01      	cmp	r2, #1
  *str = '\0';
   b8f56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8f5a:	bf98      	it	ls
   b8f5c:	220a      	movls	r2, #10
   b8f5e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8f60:	460d      	mov	r5, r1
   b8f62:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8f66:	fb01 5312 	mls	r3, r1, r2, r5
   b8f6a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8f6e:	2b09      	cmp	r3, #9
   b8f70:	bf94      	ite	ls
   b8f72:	3330      	addls	r3, #48	; 0x30
   b8f74:	3337      	addhi	r3, #55	; 0x37
   b8f76:	b2db      	uxtb	r3, r3
  } while(n);
   b8f78:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8f7a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8f7e:	d9ef      	bls.n	b8f60 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8f80:	4621      	mov	r1, r4
   b8f82:	f7ff ffb9 	bl	b8ef8 <_ZN5Print5writeEPKc>
}
   b8f86:	b00b      	add	sp, #44	; 0x2c
   b8f88:	bd30      	pop	{r4, r5, pc}

000b8f8a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f8e:	b086      	sub	sp, #24
   b8f90:	af00      	add	r7, sp, #0
   b8f92:	4605      	mov	r5, r0
   b8f94:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8f96:	1d38      	adds	r0, r7, #4
   b8f98:	2114      	movs	r1, #20
{
   b8f9a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8f9c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8f9e:	f7fd ff91 	bl	b6ec4 <vsnprintf>

    if (n<bufsize)
   b8fa2:	2813      	cmp	r0, #19
   b8fa4:	d80e      	bhi.n	b8fc4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8fa6:	1d39      	adds	r1, r7, #4
   b8fa8:	4628      	mov	r0, r5
   b8faa:	f7ff ffa5 	bl	b8ef8 <_ZN5Print5writeEPKc>
   b8fae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8fb0:	b11e      	cbz	r6, b8fba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8fb2:	4628      	mov	r0, r5
   b8fb4:	f7ff ffb5 	bl	b8f22 <_ZN5Print7printlnEv>
   b8fb8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8fba:	4620      	mov	r0, r4
   b8fbc:	3718      	adds	r7, #24
   b8fbe:	46bd      	mov	sp, r7
   b8fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8fc4:	f100 0308 	add.w	r3, r0, #8
   b8fc8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8fcc:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8fce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8fd2:	4622      	mov	r2, r4
   b8fd4:	1c41      	adds	r1, r0, #1
   b8fd6:	683b      	ldr	r3, [r7, #0]
   b8fd8:	4668      	mov	r0, sp
   b8fda:	f7fd ff73 	bl	b6ec4 <vsnprintf>
  return write(str);
   b8fde:	4669      	mov	r1, sp
   b8fe0:	4628      	mov	r0, r5
   b8fe2:	f7ff ff89 	bl	b8ef8 <_ZN5Print5writeEPKc>
   b8fe6:	4604      	mov	r4, r0
   b8fe8:	46c5      	mov	sp, r8
   b8fea:	e7e1      	b.n	b8fb0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8fec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8fec:	4b01      	ldr	r3, [pc, #4]	; (b8ff4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8fee:	4a02      	ldr	r2, [pc, #8]	; (b8ff8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8ff0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8ff2:	4770      	bx	lr
   b8ff4:	2003e69c 	.word	0x2003e69c
   b8ff8:	000bddb6 	.word	0x000bddb6

000b8ffc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b9000:	4a15      	ldr	r2, [pc, #84]	; (b9058 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b9002:	f8df 8060 	ldr.w	r8, [pc, #96]	; b9064 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b9006:	e9d2 6300 	ldrd	r6, r3, [r2]
   b900a:	1980      	adds	r0, r0, r6
   b900c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b9010:	4b12      	ldr	r3, [pc, #72]	; (b905c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b9012:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b9016:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b901a:	1986      	adds	r6, r0, r6
   b901c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b9020:	42bb      	cmp	r3, r7
   b9022:	bf08      	it	eq
   b9024:	42b2      	cmpeq	r2, r6
{
   b9026:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b9028:	d013      	beq.n	b9052 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b902a:	a903      	add	r1, sp, #12
   b902c:	4668      	mov	r0, sp
   b902e:	e9cd 6700 	strd	r6, r7, [sp]
   b9032:	f7fd ff77 	bl	b6f24 <localtime_r>
	calendar_time.tm_year += 1900;
   b9036:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9038:	4d09      	ldr	r5, [pc, #36]	; (b9060 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b903a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b903e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b9040:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b9042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b904a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b904e:	6823      	ldr	r3, [r4, #0]
   b9050:	602b      	str	r3, [r5, #0]
    }
}
   b9052:	b00c      	add	sp, #48	; 0x30
   b9054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9058:	2003e6d0 	.word	0x2003e6d0
   b905c:	2003e6c8 	.word	0x2003e6c8
   b9060:	2003e6a4 	.word	0x2003e6a4
   b9064:	2003e6d8 	.word	0x2003e6d8

000b9068 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b9068:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b906a:	2000      	movs	r0, #0
   b906c:	f7fd fefa 	bl	b6e64 <spark_sync_time_pending>
   b9070:	b128      	cbz	r0, b907e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9072:	f7fd fedf 	bl	b6e34 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b9076:	f080 0001 	eor.w	r0, r0, #1
   b907a:	b2c0      	uxtb	r0, r0
    }
   b907c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b907e:	2001      	movs	r0, #1
   b9080:	e7fc      	b.n	b907c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b9084 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b9084:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b9086:	f7ff ffb9 	bl	b8ffc <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b908a:	4b02      	ldr	r3, [pc, #8]	; (b9094 <_ZN9TimeClass5monthEx+0x10>)
   b908c:	6918      	ldr	r0, [r3, #16]
}
   b908e:	3001      	adds	r0, #1
   b9090:	bd08      	pop	{r3, pc}
   b9092:	bf00      	nop
   b9094:	2003e6a4 	.word	0x2003e6a4

000b9098 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b9098:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b909c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b90a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b90a4:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b90a6:	d411      	bmi.n	b90cc <_ZN9TimeClass4zoneEf+0x34>
   b90a8:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b90ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b90b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b90b4:	dc0a      	bgt.n	b90cc <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b90b6:	eddf 7a06 	vldr	s15, [pc, #24]	; b90d0 <_ZN9TimeClass4zoneEf+0x38>
   b90ba:	ee60 7a27 	vmul.f32	s15, s0, s15
   b90be:	ee17 0a90 	vmov	r0, s15
   b90c2:	f002 f8af 	bl	bb224 <__aeabi_f2lz>
   b90c6:	4b03      	ldr	r3, [pc, #12]	; (b90d4 <_ZN9TimeClass4zoneEf+0x3c>)
   b90c8:	e9c3 0100 	strd	r0, r1, [r3]
}
   b90cc:	bd08      	pop	{r3, pc}
   b90ce:	bf00      	nop
   b90d0:	45610000 	.word	0x45610000
   b90d4:	2003e6d0 	.word	0x2003e6d0

000b90d8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b90d8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b90da:	2000      	movs	r0, #0
   b90dc:	f7fd fbc4 	bl	b6868 <hal_rtc_time_is_valid>
    if (rtcstate)
   b90e0:	4604      	mov	r4, r0
   b90e2:	b9a0      	cbnz	r0, b910e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b90e4:	f7fd fdf2 	bl	b6ccc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b90e8:	2801      	cmp	r0, #1
   b90ea:	d110      	bne.n	b910e <_ZN9TimeClass7isValidEv+0x36>
   b90ec:	4620      	mov	r0, r4
   b90ee:	f7fd fe1d 	bl	b6d2c <system_thread_get_state>
   b90f2:	b960      	cbnz	r0, b910e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b90f4:	f7ff ffb8 	bl	b9068 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b90f8:	b910      	cbnz	r0, b9100 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b90fa:	f7fd fe93 	bl	b6e24 <spark_process>
        while (_while() && !_condition()) {
   b90fe:	e7f9      	b.n	b90f4 <_ZN9TimeClass7isValidEv+0x1c>
   b9100:	f7ff ffb2 	bl	b9068 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b9104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b9108:	2000      	movs	r0, #0
   b910a:	f7fd bbad 	b.w	b6868 <hal_rtc_time_is_valid>
}
   b910e:	4620      	mov	r0, r4
   b9110:	bd10      	pop	{r4, pc}

000b9112 <_ZN9TimeClass3nowEv>:
{
   b9112:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b9114:	f7ff ffe0 	bl	b90d8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b9118:	2210      	movs	r2, #16
   b911a:	2100      	movs	r1, #0
   b911c:	4668      	mov	r0, sp
   b911e:	f002 f92c 	bl	bb37a <memset>
    hal_rtc_get_time(&tv, nullptr);
   b9122:	2100      	movs	r1, #0
   b9124:	4668      	mov	r0, sp
   b9126:	f7fd fba7 	bl	b6878 <hal_rtc_get_time>
}
   b912a:	9800      	ldr	r0, [sp, #0]
   b912c:	b005      	add	sp, #20
   b912e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9134 <_ZN9TimeClass4hourEv>:
{
   b9134:	b508      	push	{r3, lr}
	return hour(now());
   b9136:	f7ff ffec 	bl	b9112 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b913a:	17c1      	asrs	r1, r0, #31
   b913c:	f7ff ff5e 	bl	b8ffc <_ZL22Refresh_UnixTime_Cachex>
}
   b9140:	4b01      	ldr	r3, [pc, #4]	; (b9148 <_ZN9TimeClass4hourEv+0x14>)
   b9142:	6898      	ldr	r0, [r3, #8]
   b9144:	bd08      	pop	{r3, pc}
   b9146:	bf00      	nop
   b9148:	2003e6a4 	.word	0x2003e6a4

000b914c <_ZN9TimeClass6minuteEv>:
{
   b914c:	b508      	push	{r3, lr}
	return minute(now());
   b914e:	f7ff ffe0 	bl	b9112 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9152:	17c1      	asrs	r1, r0, #31
   b9154:	f7ff ff52 	bl	b8ffc <_ZL22Refresh_UnixTime_Cachex>
}
   b9158:	4b01      	ldr	r3, [pc, #4]	; (b9160 <_ZN9TimeClass6minuteEv+0x14>)
   b915a:	6858      	ldr	r0, [r3, #4]
   b915c:	bd08      	pop	{r3, pc}
   b915e:	bf00      	nop
   b9160:	2003e6a4 	.word	0x2003e6a4

000b9164 <_ZN9TimeClass6secondEv>:
{
   b9164:	b508      	push	{r3, lr}
	return second(now());
   b9166:	f7ff ffd4 	bl	b9112 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b916a:	17c1      	asrs	r1, r0, #31
   b916c:	f7ff ff46 	bl	b8ffc <_ZL22Refresh_UnixTime_Cachex>
}
   b9170:	4b01      	ldr	r3, [pc, #4]	; (b9178 <_ZN9TimeClass6secondEv+0x14>)
   b9172:	6818      	ldr	r0, [r3, #0]
   b9174:	bd08      	pop	{r3, pc}
   b9176:	bf00      	nop
   b9178:	2003e6a4 	.word	0x2003e6a4

000b917c <_ZN9TimeClass3dayEv>:
{
   b917c:	b508      	push	{r3, lr}
	return day(now());
   b917e:	f7ff ffc8 	bl	b9112 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b9182:	17c1      	asrs	r1, r0, #31
   b9184:	f7ff ff3a 	bl	b8ffc <_ZL22Refresh_UnixTime_Cachex>
}
   b9188:	4b01      	ldr	r3, [pc, #4]	; (b9190 <_ZN9TimeClass3dayEv+0x14>)
   b918a:	68d8      	ldr	r0, [r3, #12]
   b918c:	bd08      	pop	{r3, pc}
   b918e:	bf00      	nop
   b9190:	2003e6a4 	.word	0x2003e6a4

000b9194 <_ZN9TimeClass5monthEv>:
{
   b9194:	b508      	push	{r3, lr}
	return month(now());
   b9196:	f7ff ffbc 	bl	b9112 <_ZN9TimeClass3nowEv>
}
   b919a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b919e:	17c1      	asrs	r1, r0, #31
   b91a0:	f7ff bf70 	b.w	b9084 <_ZN9TimeClass5monthEx>

000b91a4 <_ZN9TimeClass4yearEv>:
{
   b91a4:	b508      	push	{r3, lr}
	return year(now());
   b91a6:	f7ff ffb4 	bl	b9112 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b91aa:	17c1      	asrs	r1, r0, #31
   b91ac:	f7ff ff26 	bl	b8ffc <_ZL22Refresh_UnixTime_Cachex>
}
   b91b0:	4b01      	ldr	r3, [pc, #4]	; (b91b8 <_ZN9TimeClass4yearEv+0x14>)
   b91b2:	6958      	ldr	r0, [r3, #20]
   b91b4:	bd08      	pop	{r3, pc}
   b91b6:	bf00      	nop
   b91b8:	2003e6a4 	.word	0x2003e6a4

000b91bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b91bc:	4b02      	ldr	r3, [pc, #8]	; (b91c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b91be:	681a      	ldr	r2, [r3, #0]
   b91c0:	4b02      	ldr	r3, [pc, #8]	; (b91cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b91c2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b91c4:	4770      	bx	lr
   b91c6:	bf00      	nop
   b91c8:	2003d920 	.word	0x2003d920
   b91cc:	2003e6a0 	.word	0x2003e6a0

000b91d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b91d0:	2100      	movs	r1, #0
   b91d2:	f7fd bd8b 	b.w	b6cec <system_delay_ms>
	...

000b91d8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b91d8:	b510      	push	{r4, lr}
   b91da:	4b04      	ldr	r3, [pc, #16]	; (b91ec <_ZN9TCPClientD1Ev+0x14>)
   b91dc:	6003      	str	r3, [r0, #0]
   b91de:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b91e0:	6980      	ldr	r0, [r0, #24]
   b91e2:	b108      	cbz	r0, b91e8 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b91e4:	f7fe fd35 	bl	b7c52 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b91e8:	4620      	mov	r0, r4
   b91ea:	bd10      	pop	{r4, pc}
   b91ec:	000bdecc 	.word	0x000bdecc

000b91f0 <_ZN9TCPClientD0Ev>:
   b91f0:	b510      	push	{r4, lr}
   b91f2:	4604      	mov	r4, r0
   b91f4:	f7ff fff0 	bl	b91d8 <_ZN9TCPClientD1Ev>
   b91f8:	4620      	mov	r0, r4
   b91fa:	211c      	movs	r1, #28
   b91fc:	f7fa ff51 	bl	b40a2 <_ZdlPvj>
   b9200:	4620      	mov	r0, r4
   b9202:	bd10      	pop	{r4, pc}

000b9204 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9204:	4b01      	ldr	r3, [pc, #4]	; (b920c <_GLOBAL__sub_I_RGB+0x8>)
   b9206:	2200      	movs	r2, #0
   b9208:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b920a:	4770      	bx	lr
   b920c:	2003e6e0 	.word	0x2003e6e0

000b9210 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9210:	4b01      	ldr	r3, [pc, #4]	; (b9218 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9212:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9214:	4770      	bx	lr
   b9216:	bf00      	nop
   b9218:	2003d924 	.word	0x2003d924

000b921c <serialEventRun>:
{
   b921c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b921e:	4b0b      	ldr	r3, [pc, #44]	; (b924c <serialEventRun+0x30>)
   b9220:	b143      	cbz	r3, b9234 <serialEventRun+0x18>
   b9222:	f000 fc25 	bl	b9a70 <_Z16_fetch_usbserialv>
   b9226:	6803      	ldr	r3, [r0, #0]
   b9228:	691b      	ldr	r3, [r3, #16]
   b922a:	4798      	blx	r3
   b922c:	2800      	cmp	r0, #0
   b922e:	dd01      	ble.n	b9234 <serialEventRun+0x18>
        serialEvent();
   b9230:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9234:	4b06      	ldr	r3, [pc, #24]	; (b9250 <serialEventRun+0x34>)
   b9236:	b143      	cbz	r3, b924a <serialEventRun+0x2e>
   b9238:	f001 fa02 	bl	ba640 <_Z22__fetch_global_Serial1v>
   b923c:	6803      	ldr	r3, [r0, #0]
   b923e:	691b      	ldr	r3, [r3, #16]
   b9240:	4798      	blx	r3
   b9242:	2800      	cmp	r0, #0
   b9244:	dd01      	ble.n	b924a <serialEventRun+0x2e>
        serialEvent1();
   b9246:	f3af 8000 	nop.w
}
   b924a:	bd08      	pop	{r3, pc}
	...

000b9254 <_post_loop>:
{
   b9254:	b508      	push	{r3, lr}
	serialEventRun();
   b9256:	f7ff ffe1 	bl	b921c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b925a:	f7fd fafd 	bl	b6858 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b925e:	4b01      	ldr	r3, [pc, #4]	; (b9264 <_post_loop+0x10>)
   b9260:	6018      	str	r0, [r3, #0]
}
   b9262:	bd08      	pop	{r3, pc}
   b9264:	2003e744 	.word	0x2003e744

000b9268 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9268:	4805      	ldr	r0, [pc, #20]	; (b9280 <_Z33system_initialize_user_backup_ramv+0x18>)
   b926a:	4a06      	ldr	r2, [pc, #24]	; (b9284 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b926c:	4906      	ldr	r1, [pc, #24]	; (b9288 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b926e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9270:	1a12      	subs	r2, r2, r0
   b9272:	f002 f85a 	bl	bb32a <memcpy>
    __backup_sram_signature = signature;
   b9276:	4b05      	ldr	r3, [pc, #20]	; (b928c <_Z33system_initialize_user_backup_ramv+0x24>)
   b9278:	4a05      	ldr	r2, [pc, #20]	; (b9290 <_Z33system_initialize_user_backup_ramv+0x28>)
   b927a:	601a      	str	r2, [r3, #0]
}
   b927c:	bd08      	pop	{r3, pc}
   b927e:	bf00      	nop
   b9280:	2003f400 	.word	0x2003f400
   b9284:	2003f404 	.word	0x2003f404
   b9288:	000be594 	.word	0x000be594
   b928c:	2003f400 	.word	0x2003f400
   b9290:	9a271c1e 	.word	0x9a271c1e

000b9294 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9294:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9296:	2300      	movs	r3, #0
   b9298:	9300      	str	r3, [sp, #0]
   b929a:	461a      	mov	r2, r3
   b929c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b92a0:	f7fd fd56 	bl	b6d50 <system_ctrl_set_result>
}
   b92a4:	b003      	add	sp, #12
   b92a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b92ac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b92ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b92ae:	8843      	ldrh	r3, [r0, #2]
   b92b0:	2b0a      	cmp	r3, #10
   b92b2:	d008      	beq.n	b92c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b92b4:	2b50      	cmp	r3, #80	; 0x50
   b92b6:	d10b      	bne.n	b92d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b92b8:	4b09      	ldr	r3, [pc, #36]	; (b92e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b92ba:	681b      	ldr	r3, [r3, #0]
   b92bc:	b14b      	cbz	r3, b92d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b92be:	b003      	add	sp, #12
   b92c0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b92c4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b92c6:	f7ff ffe5 	bl	b9294 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b92ca:	b003      	add	sp, #12
   b92cc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b92d0:	2300      	movs	r3, #0
   b92d2:	9300      	str	r3, [sp, #0]
   b92d4:	461a      	mov	r2, r3
   b92d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b92da:	f7fd fd39 	bl	b6d50 <system_ctrl_set_result>
}
   b92de:	e7f4      	b.n	b92ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b92e0:	2003e6f4 	.word	0x2003e6f4

000b92e4 <module_user_init_hook>:
{
   b92e4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b92e6:	4812      	ldr	r0, [pc, #72]	; (b9330 <module_user_init_hook+0x4c>)
   b92e8:	2100      	movs	r1, #0
   b92ea:	f7fd fe13 	bl	b6f14 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b92ee:	4b11      	ldr	r3, [pc, #68]	; (b9334 <module_user_init_hook+0x50>)
   b92f0:	681a      	ldr	r2, [r3, #0]
   b92f2:	4b11      	ldr	r3, [pc, #68]	; (b9338 <module_user_init_hook+0x54>)
   b92f4:	429a      	cmp	r2, r3
   b92f6:	4b11      	ldr	r3, [pc, #68]	; (b933c <module_user_init_hook+0x58>)
   b92f8:	bf0c      	ite	eq
   b92fa:	2201      	moveq	r2, #1
   b92fc:	2200      	movne	r2, #0
   b92fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9300:	d001      	beq.n	b9306 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9302:	f7ff ffb1 	bl	b9268 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9306:	f7fd fa97 	bl	b6838 <HAL_RNG_GetRandomNumber>
   b930a:	4604      	mov	r4, r0
    srand(seed);
   b930c:	f002 f83e 	bl	bb38c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9310:	4b0b      	ldr	r3, [pc, #44]	; (b9340 <module_user_init_hook+0x5c>)
   b9312:	b113      	cbz	r3, b931a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9314:	4620      	mov	r0, r4
   b9316:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b931a:	2100      	movs	r1, #0
   b931c:	4808      	ldr	r0, [pc, #32]	; (b9340 <module_user_init_hook+0x5c>)
   b931e:	f7fd fda9 	bl	b6e74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9326:	4807      	ldr	r0, [pc, #28]	; (b9344 <module_user_init_hook+0x60>)
   b9328:	2100      	movs	r1, #0
   b932a:	f7fd bd07 	b.w	b6d3c <system_ctrl_set_app_request_handler>
   b932e:	bf00      	nop
   b9330:	000b9211 	.word	0x000b9211
   b9334:	2003f400 	.word	0x2003f400
   b9338:	9a271c1e 	.word	0x9a271c1e
   b933c:	2003e6f0 	.word	0x2003e6f0
   b9340:	00000000 	.word	0x00000000
   b9344:	000b92ad 	.word	0x000b92ad

000b9348 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9348:	4770      	bx	lr

000b934a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b934a:	2000      	movs	r0, #0
   b934c:	4770      	bx	lr

000b934e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b934e:	b510      	push	{r4, lr}
   b9350:	2110      	movs	r1, #16
   b9352:	4604      	mov	r4, r0
   b9354:	f7fa fea5 	bl	b40a2 <_ZdlPvj>
   b9358:	4620      	mov	r0, r4
   b935a:	bd10      	pop	{r4, pc}

000b935c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b935c:	b508      	push	{r3, lr}
      { delete this; }
   b935e:	f7ff fff6 	bl	b934e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b9362:	bd08      	pop	{r3, pc}

000b9364 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b9364:	b530      	push	{r4, r5, lr}
        type_(type) {
   b9366:	2200      	movs	r2, #0
   b9368:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b936c:	6002      	str	r2, [r0, #0]
   b936e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9370:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b9372:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9374:	680c      	ldr	r4, [r1, #0]
   b9376:	8085      	strh	r5, [r0, #4]
   b9378:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b937a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b937c:	bd30      	pop	{r4, r5, pc}

000b937e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b937e:	b510      	push	{r4, lr}
   b9380:	4604      	mov	r4, r0
    free((void*)msg_);
   b9382:	6800      	ldr	r0, [r0, #0]
   b9384:	f7fd fd86 	bl	b6e94 <free>
}
   b9388:	4620      	mov	r0, r4
   b938a:	bd10      	pop	{r4, pc}

000b938c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b938c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b938e:	68c4      	ldr	r4, [r0, #12]
   b9390:	b1f4      	cbz	r4, b93d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b9392:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b9394:	2b02      	cmp	r3, #2
   b9396:	d103      	bne.n	b93a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b9398:	f104 000c 	add.w	r0, r4, #12
   b939c:	f7ff ffef 	bl	b937e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b93a0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b93a2:	b135      	cbz	r5, b93b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b93a4:	4628      	mov	r0, r5
   b93a6:	f7fb f81f 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
   b93aa:	2110      	movs	r1, #16
   b93ac:	4628      	mov	r0, r5
   b93ae:	f7fa fe78 	bl	b40a2 <_ZdlPvj>
   b93b2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b93b4:	b135      	cbz	r5, b93c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b93b6:	4628      	mov	r0, r5
   b93b8:	f7fb f816 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
   b93bc:	2110      	movs	r1, #16
   b93be:	4628      	mov	r0, r5
   b93c0:	f7fa fe6f 	bl	b40a2 <_ZdlPvj>
   b93c4:	4620      	mov	r0, r4
   b93c6:	2114      	movs	r1, #20
   b93c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b93cc:	f7fa be69 	b.w	b40a2 <_ZdlPvj>
   b93d0:	bd38      	pop	{r3, r4, r5, pc}

000b93d2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b93d2:	680b      	ldr	r3, [r1, #0]
   b93d4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b93d6:	684b      	ldr	r3, [r1, #4]
   b93d8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b93da:	b113      	cbz	r3, b93e2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b93dc:	685a      	ldr	r2, [r3, #4]
   b93de:	3201      	adds	r2, #1
   b93e0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b93e2:	4770      	bx	lr

000b93e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b93e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b93e6:	4604      	mov	r4, r0
   b93e8:	4668      	mov	r0, sp
   b93ea:	460d      	mov	r5, r1
   b93ec:	f7ff fff1 	bl	b93d2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b93f0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b93f2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b93f4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b93f6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b93f8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b93fa:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b93fc:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b93fe:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b9400:	f7fb fc8a 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b9404:	b135      	cbz	r5, b9414 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b9406:	1d28      	adds	r0, r5, #4
   b9408:	f7fb fc86 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b940c:	2108      	movs	r1, #8
   b940e:	4628      	mov	r0, r5
   b9410:	f7fa fe47 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b9414:	4620      	mov	r0, r4
   b9416:	b003      	add	sp, #12
   b9418:	bd30      	pop	{r4, r5, pc}

000b941a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b941a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b941c:	b510      	push	{r4, lr}
      if (_M_empty())
   b941e:	b90a      	cbnz	r2, b9424 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b9420:	f001 f974 	bl	ba70c <_ZSt25__throw_bad_function_callv>
    }
   b9424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9428:	68c3      	ldr	r3, [r0, #12]
   b942a:	4718      	bx	r3

000b942c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b942c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b942e:	6800      	ldr	r0, [r0, #0]
   b9430:	f100 0110 	add.w	r1, r0, #16
   b9434:	f7ff fff1 	bl	b941a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b9438:	bd08      	pop	{r3, pc}

000b943a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b943a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b943c:	b510      	push	{r4, lr}
      if (_M_empty())
   b943e:	b90a      	cbnz	r2, b9444 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b9440:	f001 f964 	bl	ba70c <_ZSt25__throw_bad_function_callv>
    }
   b9444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9448:	68c3      	ldr	r3, [r0, #12]
   b944a:	4718      	bx	r3

000b944c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b944c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b944e:	6800      	ldr	r0, [r0, #0]
   b9450:	f100 0110 	add.w	r1, r0, #16
   b9454:	f7ff fff1 	bl	b943a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b9458:	bd08      	pop	{r3, pc}
	...

000b945c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b945c:	b538      	push	{r3, r4, r5, lr}
   b945e:	2300      	movs	r3, #0
   b9460:	4604      	mov	r4, r0
   b9462:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9464:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b9466:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9468:	f7fa fe15 	bl	b4096 <_Znwj>
   b946c:	b128      	cbz	r0, b947a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b946e:	2301      	movs	r3, #1
   b9470:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b9474:	4b02      	ldr	r3, [pc, #8]	; (b9480 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b9476:	6003      	str	r3, [r0, #0]
   b9478:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b947a:	6020      	str	r0, [r4, #0]
	}
   b947c:	4620      	mov	r0, r4
   b947e:	bd38      	pop	{r3, r4, r5, pc}
   b9480:	000bdde0 	.word	0x000bdde0

000b9484 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b9484:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9486:	2300      	movs	r3, #0
   b9488:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b948a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b948c:	4604      	mov	r4, r0
   b948e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9490:	b12b      	cbz	r3, b949e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9492:	2202      	movs	r2, #2
   b9494:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9496:	68eb      	ldr	r3, [r5, #12]
   b9498:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b949a:	68ab      	ldr	r3, [r5, #8]
   b949c:	60a3      	str	r3, [r4, #8]
    }
   b949e:	4620      	mov	r0, r4
   b94a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b94a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b94a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b94a6:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b94a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b94aa:	4668      	mov	r0, sp
   b94ac:	f7ff ff5a 	bl	b9364 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b94b0:	f04f 0302 	mov.w	r3, #2
   b94b4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b94b8:	2a00      	cmp	r2, #0
   b94ba:	d103      	bne.n	b94c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b94bc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b94c0:	2900      	cmp	r1, #0
   b94c2:	d1f7      	bne.n	b94b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b94c4:	d125      	bne.n	b9512 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b94c6:	f104 050c 	add.w	r5, r4, #12
   b94ca:	4669      	mov	r1, sp
   b94cc:	4628      	mov	r0, r5
   b94ce:	f7ff ff49 	bl	b9364 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b94d2:	f3bf 8f5b 	dmb	ish
   b94d6:	2301      	movs	r3, #1
   b94d8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b94da:	2000      	movs	r0, #0
   b94dc:	f104 0308 	add.w	r3, r4, #8
   b94e0:	f3bf 8f5b 	dmb	ish
   b94e4:	e853 6f00 	ldrex	r6, [r3]
   b94e8:	e843 0200 	strex	r2, r0, [r3]
   b94ec:	2a00      	cmp	r2, #0
   b94ee:	d1f9      	bne.n	b94e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b94f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b94f4:	b16e      	cbz	r6, b9512 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b94f6:	f7fd fc09 	bl	b6d0c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b94fa:	b178      	cbz	r0, b951c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b94fc:	4629      	mov	r1, r5
   b94fe:	4630      	mov	r0, r6
   b9500:	f7ff ff8b 	bl	b941a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b9504:	4630      	mov	r0, r6
   b9506:	f7fa ff6f 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b950a:	2110      	movs	r1, #16
   b950c:	4630      	mov	r0, r6
   b950e:	f7fa fdc8 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b9512:	4668      	mov	r0, sp
   b9514:	f7ff ff33 	bl	b937e <_ZN8particle5ErrorD1Ev>
    }
   b9518:	b009      	add	sp, #36	; 0x24
   b951a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b951c:	4631      	mov	r1, r6
   b951e:	a802      	add	r0, sp, #8
   b9520:	f7ff ffb0 	bl	b9484 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9524:	68e0      	ldr	r0, [r4, #12]
   b9526:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b952a:	b108      	cbz	r0, b9530 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b952c:	f001 ff7e 	bl	bb42c <strdup>
        type_(type) {
   b9530:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b9532:	2010      	movs	r0, #16
   b9534:	f8ad 501c 	strh.w	r5, [sp, #28]
   b9538:	f7fa fdad 	bl	b4096 <_Znwj>
   b953c:	4605      	mov	r5, r0
   b953e:	b1e8      	cbz	r0, b957c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b9540:	2700      	movs	r7, #0
   b9542:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9544:	2018      	movs	r0, #24
   b9546:	f7fa fda6 	bl	b4096 <_Znwj>
   b954a:	4604      	mov	r4, r0
   b954c:	b188      	cbz	r0, b9572 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b954e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b9550:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9552:	a802      	add	r0, sp, #8
   b9554:	f7ff fa04 	bl	b8960 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9558:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b955a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b955c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b955e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9560:	9204      	str	r2, [sp, #16]
   b9562:	a906      	add	r1, sp, #24
   b9564:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9566:	60e3      	str	r3, [r4, #12]
   b9568:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b956c:	9205      	str	r2, [sp, #20]
   b956e:	f7ff fef9 	bl	b9364 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b9572:	4b08      	ldr	r3, [pc, #32]	; (b9594 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b9574:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9576:	4b08      	ldr	r3, [pc, #32]	; (b9598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9578:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b957a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b957c:	a806      	add	r0, sp, #24
   b957e:	f7ff fefe 	bl	b937e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9582:	a802      	add	r0, sp, #8
   b9584:	f7fa ff30 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9588:	2200      	movs	r2, #0
   b958a:	4629      	mov	r1, r5
   b958c:	4803      	ldr	r0, [pc, #12]	; (b959c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b958e:	f7fd fbc5 	bl	b6d1c <application_thread_invoke>
   b9592:	e7b7      	b.n	b9504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b9594:	000b942d 	.word	0x000b942d
   b9598:	000b96b1 	.word	0x000b96b1
   b959c:	000b9bb9 	.word	0x000b9bb9

000b95a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b95a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b95a4:	b08b      	sub	sp, #44	; 0x2c
   b95a6:	4605      	mov	r5, r0
   b95a8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b95ac:	460f      	mov	r7, r1
   b95ae:	4690      	mov	r8, r2
   b95b0:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b95b2:	f7fd fc3f 	bl	b6e34 <spark_cloud_flag_connected>
   b95b6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b95b8:	4683      	mov	fp, r0
   b95ba:	bb38      	cbnz	r0, b960c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b95bc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b95c0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b95c2:	a905      	add	r1, sp, #20
   b95c4:	4630      	mov	r0, r6
   b95c6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b95ca:	f7ff fecb 	bl	b9364 <_ZN8particle5ErrorC1EOS0_>
   b95ce:	2014      	movs	r0, #20
   b95d0:	f7fa fd61 	bl	b4096 <_Znwj>
   b95d4:	4604      	mov	r4, r0
   b95d6:	b148      	cbz	r0, b95ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b95d8:	2302      	movs	r3, #2
   b95da:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b95dc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b95de:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b95e2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b95e4:	4631      	mov	r1, r6
   b95e6:	300c      	adds	r0, #12
   b95e8:	f7ff febc 	bl	b9364 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b95ec:	4628      	mov	r0, r5
	: __shared_count(__p)
   b95ee:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b95f0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b95f4:	f7ff ff32 	bl	b945c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b95f8:	4630      	mov	r0, r6
   b95fa:	f7ff fec0 	bl	b937e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b95fe:	a805      	add	r0, sp, #20
   b9600:	f7ff febd 	bl	b937e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b9604:	4628      	mov	r0, r5
   b9606:	b00b      	add	sp, #44	; 0x2c
   b9608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b960c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b960e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b9610:	2014      	movs	r0, #20
   b9612:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b9616:	9307      	str	r3, [sp, #28]
   b9618:	f7fa fd3d 	bl	b4096 <_Znwj>
   b961c:	4601      	mov	r1, r0
   b961e:	b118      	cbz	r0, b9628 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b9620:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9624:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9626:	7044      	strb	r4, [r0, #1]
   b9628:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b962a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b962c:	f7ff ff16 	bl	b945c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b9630:	4b1e      	ldr	r3, [pc, #120]	; (b96ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b9632:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b9634:	2008      	movs	r0, #8
   b9636:	f7fa fd2e 	bl	b4096 <_Znwj>
   b963a:	4604      	mov	r4, r0
   b963c:	b110      	cbz	r0, b9644 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b963e:	a903      	add	r1, sp, #12
   b9640:	f7ff fec7 	bl	b93d2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9644:	9600      	str	r6, [sp, #0]
   b9646:	fa5f f38a 	uxtb.w	r3, sl
   b964a:	464a      	mov	r2, r9
   b964c:	4641      	mov	r1, r8
   b964e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b9650:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9652:	f7fd fbf7 	bl	b6e44 <spark_send_event>
   b9656:	b9b8      	cbnz	r0, b9688 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b9658:	9b03      	ldr	r3, [sp, #12]
   b965a:	785b      	ldrb	r3, [r3, #1]
   b965c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b9660:	b993      	cbnz	r3, b9688 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b9662:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b9666:	a905      	add	r1, sp, #20
   b9668:	a803      	add	r0, sp, #12
   b966a:	9205      	str	r2, [sp, #20]
   b966c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b9670:	f7ff ff18 	bl	b94a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9674:	a805      	add	r0, sp, #20
   b9676:	f7ff fe82 	bl	b937e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b967a:	a805      	add	r0, sp, #20
   b967c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b967e:	f7ff feb1 	bl	b93e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b9682:	a806      	add	r0, sp, #24
   b9684:	f7fb fb48 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9688:	a903      	add	r1, sp, #12
   b968a:	a805      	add	r0, sp, #20
   b968c:	f7ff fea1 	bl	b93d2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9690:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9692:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9694:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b9696:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b9698:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b969a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b969c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b969e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b96a0:	f7fb fb3a 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b96a4:	a804      	add	r0, sp, #16
   b96a6:	f7fb fb37 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b96aa:	e7ab      	b.n	b9604 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b96ac:	000b972d 	.word	0x000b972d

000b96b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b96b0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b96b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b96b4:	4605      	mov	r5, r0
	switch (__op)
   b96b6:	d103      	bne.n	b96c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b96b8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b96ba:	6003      	str	r3, [r0, #0]
      }
   b96bc:	2000      	movs	r0, #0
   b96be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b96c0:	2a02      	cmp	r2, #2
   b96c2:	d010      	beq.n	b96e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b96c4:	2a03      	cmp	r2, #3
   b96c6:	d1f9      	bne.n	b96bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b96c8:	6804      	ldr	r4, [r0, #0]
   b96ca:	2c00      	cmp	r4, #0
   b96cc:	d0f6      	beq.n	b96bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b96ce:	f104 0010 	add.w	r0, r4, #16
   b96d2:	f7ff fe54 	bl	b937e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b96d6:	4620      	mov	r0, r4
   b96d8:	f7fa fe86 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b96dc:	2118      	movs	r1, #24
   b96de:	4620      	mov	r0, r4
   b96e0:	f7fa fcdf 	bl	b40a2 <_ZdlPvj>
   b96e4:	e7ea      	b.n	b96bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b96e6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b96e8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b96ea:	f7fa fcd4 	bl	b4096 <_Znwj>
   b96ee:	4604      	mov	r4, r0
   b96f0:	b150      	cbz	r0, b9708 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b96f2:	4631      	mov	r1, r6
   b96f4:	f7ff fec6 	bl	b9484 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b96f8:	6930      	ldr	r0, [r6, #16]
   b96fa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b96fe:	b108      	cbz	r0, b9704 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b9700:	f001 fe94 	bl	bb42c <strdup>
        type_(type) {
   b9704:	6120      	str	r0, [r4, #16]
   b9706:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b9708:	602c      	str	r4, [r5, #0]
	}
   b970a:	e7d7      	b.n	b96bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b970c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b970c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b970e:	2300      	movs	r3, #0
   b9710:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b9712:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9714:	4604      	mov	r4, r0
   b9716:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9718:	b12b      	cbz	r3, b9726 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b971a:	2202      	movs	r2, #2
   b971c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b971e:	68eb      	ldr	r3, [r5, #12]
   b9720:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9722:	68ab      	ldr	r3, [r5, #8]
   b9724:	60a3      	str	r3, [r4, #8]
    }
   b9726:	4620      	mov	r0, r4
   b9728:	bd38      	pop	{r3, r4, r5, pc}
	...

000b972c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b972c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b972e:	b089      	sub	sp, #36	; 0x24
   b9730:	4604      	mov	r4, r0
   b9732:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b9734:	a801      	add	r0, sp, #4
   b9736:	4611      	mov	r1, r2
   b9738:	f7ff fe54 	bl	b93e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b973c:	b1a4      	cbz	r4, b9768 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b973e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9740:	b11d      	cbz	r5, b974a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b9742:	4628      	mov	r0, r5
   b9744:	f001 fe72 	bl	bb42c <strdup>
   b9748:	4605      	mov	r5, r0
   b974a:	a801      	add	r0, sp, #4
   b974c:	a903      	add	r1, sp, #12
        type_(type) {
   b974e:	9503      	str	r5, [sp, #12]
   b9750:	f8ad 4010 	strh.w	r4, [sp, #16]
   b9754:	f7ff fea6 	bl	b94a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9758:	a803      	add	r0, sp, #12
   b975a:	f7ff fe10 	bl	b937e <_ZN8particle5ErrorD1Ev>
   b975e:	a802      	add	r0, sp, #8
   b9760:	f7fb fada 	bl	b4d18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9764:	b009      	add	sp, #36	; 0x24
   b9766:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b9768:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b976a:	2301      	movs	r3, #1
   b976c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b9770:	2a00      	cmp	r2, #0
   b9772:	d103      	bne.n	b977c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b9774:	e8c5 3f41 	strexb	r1, r3, [r5]
   b9778:	2900      	cmp	r1, #0
   b977a:	d1f7      	bne.n	b976c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b977c:	d1ef      	bne.n	b975e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b977e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b9780:	f3bf 8f5b 	dmb	ish
   b9784:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b9786:	1d2b      	adds	r3, r5, #4
   b9788:	f3bf 8f5b 	dmb	ish
   b978c:	e853 6f00 	ldrex	r6, [r3]
   b9790:	e843 4200 	strex	r2, r4, [r3]
   b9794:	2a00      	cmp	r2, #0
   b9796:	d1f9      	bne.n	b978c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b9798:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b979c:	2e00      	cmp	r6, #0
   b979e:	d0de      	beq.n	b975e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b97a0:	4620      	mov	r0, r4
   b97a2:	f7fd fab3 	bl	b6d0c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b97a6:	4607      	mov	r7, r0
   b97a8:	b160      	cbz	r0, b97c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b97aa:	f105 010c 	add.w	r1, r5, #12
   b97ae:	4630      	mov	r0, r6
   b97b0:	f7ff fe43 	bl	b943a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b97b4:	4630      	mov	r0, r6
   b97b6:	f7fa fe17 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b97ba:	2110      	movs	r1, #16
   b97bc:	4630      	mov	r0, r6
   b97be:	f7fa fc70 	bl	b40a2 <_ZdlPvj>
   b97c2:	e7cc      	b.n	b975e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b97c4:	4631      	mov	r1, r6
   b97c6:	a803      	add	r0, sp, #12
   b97c8:	f7ff ffa0 	bl	b970c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b97cc:	7b2b      	ldrb	r3, [r5, #12]
   b97ce:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b97d2:	2010      	movs	r0, #16
   b97d4:	f7fa fc5f 	bl	b4096 <_Znwj>
   b97d8:	4605      	mov	r5, r0
   b97da:	b1d0      	cbz	r0, b9812 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b97dc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b97de:	2014      	movs	r0, #20
   b97e0:	f7fa fc59 	bl	b4096 <_Znwj>
   b97e4:	4604      	mov	r4, r0
   b97e6:	b178      	cbz	r0, b9808 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b97e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b97ea:	4601      	mov	r1, r0
   b97ec:	a803      	add	r0, sp, #12
   b97ee:	f7ff f8b7 	bl	b8960 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b97f2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b97f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b97f6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b97f8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b97fa:	9205      	str	r2, [sp, #20]
   b97fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b97fe:	60e3      	str	r3, [r4, #12]
   b9800:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b9804:	9206      	str	r2, [sp, #24]
   b9806:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b9808:	4b06      	ldr	r3, [pc, #24]	; (b9824 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b980a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b980c:	4b06      	ldr	r3, [pc, #24]	; (b9828 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b980e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9810:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b9812:	a803      	add	r0, sp, #12
   b9814:	f7fa fde8 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9818:	2200      	movs	r2, #0
   b981a:	4629      	mov	r1, r5
   b981c:	4803      	ldr	r0, [pc, #12]	; (b982c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b981e:	f7fd fa7d 	bl	b6d1c <application_thread_invoke>
   b9822:	e7c7      	b.n	b97b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b9824:	000b944d 	.word	0x000b944d
   b9828:	000b9831 	.word	0x000b9831
   b982c:	000b9bb9 	.word	0x000b9bb9

000b9830 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b9830:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9832:	b570      	push	{r4, r5, r6, lr}
   b9834:	4604      	mov	r4, r0
	switch (__op)
   b9836:	d103      	bne.n	b9840 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b9838:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b983a:	6003      	str	r3, [r0, #0]
      }
   b983c:	2000      	movs	r0, #0
   b983e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b9840:	2a02      	cmp	r2, #2
   b9842:	d00c      	beq.n	b985e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b9844:	2a03      	cmp	r2, #3
   b9846:	d1f9      	bne.n	b983c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b9848:	6804      	ldr	r4, [r0, #0]
   b984a:	2c00      	cmp	r4, #0
   b984c:	d0f6      	beq.n	b983c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b984e:	4620      	mov	r0, r4
   b9850:	f7fa fdca 	bl	b43e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9854:	2114      	movs	r1, #20
   b9856:	4620      	mov	r0, r4
   b9858:	f7fa fc23 	bl	b40a2 <_ZdlPvj>
   b985c:	e7ee      	b.n	b983c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b985e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b9860:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9862:	f7fa fc18 	bl	b4096 <_Znwj>
   b9866:	4605      	mov	r5, r0
   b9868:	b120      	cbz	r0, b9874 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b986a:	4631      	mov	r1, r6
   b986c:	f7ff ff4e 	bl	b970c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b9870:	7c33      	ldrb	r3, [r6, #16]
   b9872:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b9874:	6025      	str	r5, [r4, #0]
	}
   b9876:	e7e1      	b.n	b983c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b9878 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b9878:	4770      	bx	lr

000b987a <_ZN9IPAddressD0Ev>:
   b987a:	b510      	push	{r4, lr}
   b987c:	2118      	movs	r1, #24
   b987e:	4604      	mov	r4, r0
   b9880:	f7fa fc0f 	bl	b40a2 <_ZdlPvj>
   b9884:	4620      	mov	r0, r4
   b9886:	bd10      	pop	{r4, pc}

000b9888 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9888:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b988a:	7d03      	ldrb	r3, [r0, #20]
   b988c:	2b06      	cmp	r3, #6
{
   b988e:	b08d      	sub	sp, #52	; 0x34
   b9890:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9892:	f100 0704 	add.w	r7, r0, #4
   b9896:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b989a:	d012      	beq.n	b98c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b989c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b98a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b98a4:	220a      	movs	r2, #10
   b98a6:	4630      	mov	r0, r6
   b98a8:	f7ff fb51 	bl	b8f4e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b98ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b98ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b98b0:	d019      	beq.n	b98e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b98b2:	2c00      	cmp	r4, #0
   b98b4:	d0f4      	beq.n	b98a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b98b6:	212e      	movs	r1, #46	; 0x2e
   b98b8:	4630      	mov	r0, r6
   b98ba:	f7ff fb2f 	bl	b8f1c <_ZN5Print5printEc>
   b98be:	4404      	add	r4, r0
   b98c0:	e7ee      	b.n	b98a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b98c2:	232f      	movs	r3, #47	; 0x2f
   b98c4:	466a      	mov	r2, sp
   b98c6:	4639      	mov	r1, r7
   b98c8:	200a      	movs	r0, #10
		buf[0] = 0;
   b98ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b98ce:	f7fd f8c5 	bl	b6a5c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b98d2:	4668      	mov	r0, sp
   b98d4:	f001 fdc7 	bl	bb466 <strlen>
   b98d8:	6833      	ldr	r3, [r6, #0]
   b98da:	4602      	mov	r2, r0
   b98dc:	68db      	ldr	r3, [r3, #12]
   b98de:	4669      	mov	r1, sp
   b98e0:	4630      	mov	r0, r6
   b98e2:	4798      	blx	r3
   b98e4:	4604      	mov	r4, r0
    }
    return n;
}
   b98e6:	4620      	mov	r0, r4
   b98e8:	b00d      	add	sp, #52	; 0x34
   b98ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b98ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b98ec:	b510      	push	{r4, lr}
   b98ee:	4b05      	ldr	r3, [pc, #20]	; (b9904 <_ZN9IPAddressC1Ev+0x18>)
   b98f0:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b98f2:	2211      	movs	r2, #17
   b98f4:	f840 3b04 	str.w	r3, [r0], #4
   b98f8:	2100      	movs	r1, #0
   b98fa:	f001 fd3e 	bl	bb37a <memset>
}
   b98fe:	4620      	mov	r0, r4
   b9900:	bd10      	pop	{r4, pc}
   b9902:	bf00      	nop
   b9904:	000bddfc 	.word	0x000bddfc

000b9908 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9908:	4603      	mov	r3, r0
   b990a:	4a07      	ldr	r2, [pc, #28]	; (b9928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b990c:	b510      	push	{r4, lr}
   b990e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b9912:	f101 0210 	add.w	r2, r1, #16
   b9916:	f851 4b04 	ldr.w	r4, [r1], #4
   b991a:	f843 4b04 	str.w	r4, [r3], #4
   b991e:	4291      	cmp	r1, r2
   b9920:	d1f9      	bne.n	b9916 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b9922:	780a      	ldrb	r2, [r1, #0]
   b9924:	701a      	strb	r2, [r3, #0]
}
   b9926:	bd10      	pop	{r4, pc}
   b9928:	000bddfc 	.word	0x000bddfc

000b992c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b992c:	4a02      	ldr	r2, [pc, #8]	; (b9938 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b992e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b9932:	2204      	movs	r2, #4
   b9934:	7502      	strb	r2, [r0, #20]
}
   b9936:	4770      	bx	lr
   b9938:	000bddfc 	.word	0x000bddfc

000b993c <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b993c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b993e:	2b04      	cmp	r3, #4
   b9940:	d104      	bne.n	b994c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b9942:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9944:	3800      	subs	r0, #0
   b9946:	bf18      	it	ne
   b9948:	2001      	movne	r0, #1
   b994a:	4770      	bx	lr
    } else if (version() == 6) {
   b994c:	2b06      	cmp	r3, #6
   b994e:	d107      	bne.n	b9960 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9950:	6843      	ldr	r3, [r0, #4]
   b9952:	b93b      	cbnz	r3, b9964 <_ZNK9IPAddresscvbEv+0x28>
   b9954:	6883      	ldr	r3, [r0, #8]
   b9956:	b92b      	cbnz	r3, b9964 <_ZNK9IPAddresscvbEv+0x28>
   b9958:	68c3      	ldr	r3, [r0, #12]
   b995a:	b91b      	cbnz	r3, b9964 <_ZNK9IPAddresscvbEv+0x28>
   b995c:	6900      	ldr	r0, [r0, #16]
   b995e:	e7f1      	b.n	b9944 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b9960:	2000      	movs	r0, #0
   b9962:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9964:	2001      	movs	r0, #1
}
   b9966:	4770      	bx	lr

000b9968 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9968:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b996a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b996e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9972:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9976:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b997a:	2304      	movs	r3, #4
   b997c:	6041      	str	r1, [r0, #4]
   b997e:	7503      	strb	r3, [r0, #20]
}
   b9980:	bd10      	pop	{r4, pc}
	...

000b9984 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b9984:	b513      	push	{r0, r1, r4, lr}
   b9986:	4c04      	ldr	r4, [pc, #16]	; (b9998 <_ZN9IPAddressC1Ehhhh+0x14>)
   b9988:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b998a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b998e:	9400      	str	r4, [sp, #0]
   b9990:	f7ff ffea 	bl	b9968 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9994:	b002      	add	sp, #8
   b9996:	bd10      	pop	{r4, pc}
   b9998:	000bddfc 	.word	0x000bddfc

000b999c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b999c:	b507      	push	{r0, r1, r2, lr}
   b999e:	4b06      	ldr	r3, [pc, #24]	; (b99b8 <_ZN9IPAddressC1EPKh+0x1c>)
   b99a0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b99a2:	78cb      	ldrb	r3, [r1, #3]
   b99a4:	9300      	str	r3, [sp, #0]
   b99a6:	788b      	ldrb	r3, [r1, #2]
   b99a8:	784a      	ldrb	r2, [r1, #1]
   b99aa:	7809      	ldrb	r1, [r1, #0]
   b99ac:	f7ff ffdc 	bl	b9968 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b99b0:	b003      	add	sp, #12
   b99b2:	f85d fb04 	ldr.w	pc, [sp], #4
   b99b6:	bf00      	nop
   b99b8:	000bddfc 	.word	0x000bddfc

000b99bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b99bc:	7441      	strb	r1, [r0, #17]
}
   b99be:	4770      	bx	lr

000b99c0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b99c0:	4770      	bx	lr

000b99c2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b99c2:	4770      	bx	lr

000b99c4 <_ZN9USBSerial4readEv>:
{
   b99c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b99c6:	2100      	movs	r1, #0
   b99c8:	7c00      	ldrb	r0, [r0, #16]
   b99ca:	f7fd f94f 	bl	b6c6c <HAL_USB_USART_Receive_Data>
}
   b99ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b99d2:	bd08      	pop	{r3, pc}

000b99d4 <_ZN9USBSerial4peekEv>:
{
   b99d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b99d6:	2101      	movs	r1, #1
   b99d8:	7c00      	ldrb	r0, [r0, #16]
   b99da:	f7fd f947 	bl	b6c6c <HAL_USB_USART_Receive_Data>
}
   b99de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b99e2:	bd08      	pop	{r3, pc}

000b99e4 <_ZN9USBSerial17availableForWriteEv>:
{
   b99e4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b99e6:	7c00      	ldrb	r0, [r0, #16]
   b99e8:	f7fd f938 	bl	b6c5c <HAL_USB_USART_Available_Data_For_Write>
}
   b99ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b99f0:	bd08      	pop	{r3, pc}

000b99f2 <_ZN9USBSerial9availableEv>:
{
   b99f2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b99f4:	7c00      	ldrb	r0, [r0, #16]
   b99f6:	f7fd f929 	bl	b6c4c <HAL_USB_USART_Available_Data>
}
   b99fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b99fe:	bd08      	pop	{r3, pc}

000b9a00 <_ZN9USBSerial5writeEh>:
{
   b9a00:	b513      	push	{r0, r1, r4, lr}
   b9a02:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9a04:	7c00      	ldrb	r0, [r0, #16]
{
   b9a06:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9a08:	f7fd f928 	bl	b6c5c <HAL_USB_USART_Available_Data_For_Write>
   b9a0c:	2800      	cmp	r0, #0
   b9a0e:	9901      	ldr	r1, [sp, #4]
   b9a10:	dc01      	bgt.n	b9a16 <_ZN9USBSerial5writeEh+0x16>
   b9a12:	7c60      	ldrb	r0, [r4, #17]
   b9a14:	b120      	cbz	r0, b9a20 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9a16:	7c20      	ldrb	r0, [r4, #16]
   b9a18:	f7fd f930 	bl	b6c7c <HAL_USB_USART_Send_Data>
   b9a1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9a20:	b002      	add	sp, #8
   b9a22:	bd10      	pop	{r4, pc}

000b9a24 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9a24:	7c00      	ldrb	r0, [r0, #16]
   b9a26:	f7fd b931 	b.w	b6c8c <HAL_USB_USART_Flush_Data>

000b9a2a <_ZN9USBSerialD0Ev>:
   b9a2a:	b510      	push	{r4, lr}
   b9a2c:	2114      	movs	r1, #20
   b9a2e:	4604      	mov	r4, r0
   b9a30:	f7fa fb37 	bl	b40a2 <_ZdlPvj>
   b9a34:	4620      	mov	r0, r4
   b9a36:	bd10      	pop	{r4, pc}

000b9a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9a38:	b510      	push	{r4, lr}
   b9a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9a3e:	4604      	mov	r4, r0
   b9a40:	4608      	mov	r0, r1
   b9a42:	2100      	movs	r1, #0
   b9a44:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9a48:	4b04      	ldr	r3, [pc, #16]	; (b9a5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9a4a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9a4c:	2301      	movs	r3, #1
  _serial = serial;
   b9a4e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9a50:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9a52:	4611      	mov	r1, r2
   b9a54:	f7fd f8f2 	bl	b6c3c <HAL_USB_USART_Init>
}
   b9a58:	4620      	mov	r0, r4
   b9a5a:	bd10      	pop	{r4, pc}
   b9a5c:	000bde10 	.word	0x000bde10

000b9a60 <_Z19acquireSerialBufferv>:
{
   b9a60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9a62:	2214      	movs	r2, #20
{
   b9a64:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9a66:	2100      	movs	r1, #0
   b9a68:	f001 fc87 	bl	bb37a <memset>
}
   b9a6c:	4620      	mov	r0, r4
   b9a6e:	bd10      	pop	{r4, pc}

000b9a70 <_Z16_fetch_usbserialv>:
{
   b9a70:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9a72:	4c0f      	ldr	r4, [pc, #60]	; (b9ab0 <_Z16_fetch_usbserialv+0x40>)
{
   b9a74:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9a76:	a803      	add	r0, sp, #12
   b9a78:	f7ff fff2 	bl	b9a60 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9a7c:	7821      	ldrb	r1, [r4, #0]
   b9a7e:	f3bf 8f5b 	dmb	ish
   b9a82:	f011 0101 	ands.w	r1, r1, #1
   b9a86:	d10f      	bne.n	b9aa8 <_Z16_fetch_usbserialv+0x38>
   b9a88:	4620      	mov	r0, r4
   b9a8a:	9101      	str	r1, [sp, #4]
   b9a8c:	f7fa fb0b 	bl	b40a6 <__cxa_guard_acquire>
   b9a90:	9901      	ldr	r1, [sp, #4]
   b9a92:	b148      	cbz	r0, b9aa8 <_Z16_fetch_usbserialv+0x38>
   b9a94:	aa03      	add	r2, sp, #12
   b9a96:	4807      	ldr	r0, [pc, #28]	; (b9ab4 <_Z16_fetch_usbserialv+0x44>)
   b9a98:	f7ff ffce 	bl	b9a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9a9c:	4620      	mov	r0, r4
   b9a9e:	f7fa fb07 	bl	b40b0 <__cxa_guard_release>
   b9aa2:	4805      	ldr	r0, [pc, #20]	; (b9ab8 <_Z16_fetch_usbserialv+0x48>)
   b9aa4:	f001 fc10 	bl	bb2c8 <atexit>
	return _usbserial;
}
   b9aa8:	4802      	ldr	r0, [pc, #8]	; (b9ab4 <_Z16_fetch_usbserialv+0x44>)
   b9aaa:	b008      	add	sp, #32
   b9aac:	bd10      	pop	{r4, pc}
   b9aae:	bf00      	nop
   b9ab0:	2003e6f8 	.word	0x2003e6f8
   b9ab4:	2003e6fc 	.word	0x2003e6fc
   b9ab8:	000b99c1 	.word	0x000b99c1

000b9abc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9abc:	4700      	bx	r0
	...

000b9ac0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9ac0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9ac4:	2400      	movs	r4, #0
{
   b9ac6:	461d      	mov	r5, r3
   b9ac8:	460f      	mov	r7, r1
   b9aca:	4690      	mov	r8, r2
   b9acc:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b9ace:	f7fc fe8b 	bl	b67e8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b9ad2:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9ad4:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b9ad8:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9adc:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9ae0:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9ae4:	bfa2      	ittt	ge
   b9ae6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b9aea:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9aee:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9af0:	4907      	ldr	r1, [pc, #28]	; (b9b10 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9af2:	9400      	str	r4, [sp, #0]
   b9af4:	4643      	mov	r3, r8
   b9af6:	463a      	mov	r2, r7
   b9af8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b9afa:	bfa8      	it	ge
   b9afc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9b00:	f7fc fe6a 	bl	b67d8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9b04:	fab0 f080 	clz	r0, r0
   b9b08:	0940      	lsrs	r0, r0, #5
   b9b0a:	b004      	add	sp, #16
   b9b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9b10:	000b9abd 	.word	0x000b9abd

000b9b14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9b14:	4770      	bx	lr

000b9b16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9b16:	7441      	strb	r1, [r0, #17]
}
   b9b18:	4770      	bx	lr

000b9b1a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9b1a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9b1c:	7c00      	ldrb	r0, [r0, #16]
   b9b1e:	f7fc ffed 	bl	b6afc <hal_usart_available_data_for_write>
}
   b9b22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9b26:	bd08      	pop	{r3, pc}

000b9b28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9b28:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9b2a:	7c00      	ldrb	r0, [r0, #16]
   b9b2c:	f7fc ffbe 	bl	b6aac <hal_usart_available>
}
   b9b30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9b34:	bd08      	pop	{r3, pc}

000b9b36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9b36:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9b38:	7c00      	ldrb	r0, [r0, #16]
   b9b3a:	f7fc ffc7 	bl	b6acc <hal_usart_peek>
}
   b9b3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b42:	bd08      	pop	{r3, pc}

000b9b44 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9b44:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9b46:	7c00      	ldrb	r0, [r0, #16]
   b9b48:	f7fc ffb8 	bl	b6abc <hal_usart_read>
}
   b9b4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b50:	bd08      	pop	{r3, pc}

000b9b52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9b52:	7c00      	ldrb	r0, [r0, #16]
   b9b54:	f7fc bfc2 	b.w	b6adc <hal_usart_flush>

000b9b58 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b5a:	7c45      	ldrb	r5, [r0, #17]
{
   b9b5c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b5e:	b12d      	cbz	r5, b9b6c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9b60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9b62:	b003      	add	sp, #12
   b9b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9b68:	f7fc bf98 	b.w	b6a9c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b6c:	7c00      	ldrb	r0, [r0, #16]
   b9b6e:	9101      	str	r1, [sp, #4]
   b9b70:	f7fc ffc4 	bl	b6afc <hal_usart_available_data_for_write>
   b9b74:	2800      	cmp	r0, #0
   b9b76:	9901      	ldr	r1, [sp, #4]
   b9b78:	dcf2      	bgt.n	b9b60 <_ZN11USARTSerial5writeEh+0x8>
}
   b9b7a:	4628      	mov	r0, r5
   b9b7c:	b003      	add	sp, #12
   b9b7e:	bd30      	pop	{r4, r5, pc}

000b9b80 <_ZN11USARTSerialD0Ev>:
   b9b80:	b510      	push	{r4, lr}
   b9b82:	2114      	movs	r1, #20
   b9b84:	4604      	mov	r4, r0
   b9b86:	f7fa fa8c 	bl	b40a2 <_ZdlPvj>
   b9b8a:	4620      	mov	r0, r4
   b9b8c:	bd10      	pop	{r4, pc}
	...

000b9b90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9b90:	b510      	push	{r4, lr}
   b9b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9b96:	4604      	mov	r4, r0
   b9b98:	4608      	mov	r0, r1
   b9b9a:	4611      	mov	r1, r2
   b9b9c:	2200      	movs	r2, #0
   b9b9e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9ba2:	4b04      	ldr	r3, [pc, #16]	; (b9bb4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9ba4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9ba6:	2301      	movs	r3, #1
  _serial = serial;
   b9ba8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9baa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9bac:	f7fc ffae 	bl	b6b0c <hal_usart_init_ex>
}
   b9bb0:	4620      	mov	r0, r4
   b9bb2:	bd10      	pop	{r4, pc}
   b9bb4:	000bde40 	.word	0x000bde40

000b9bb8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b9bb8:	b510      	push	{r4, lr}
      if (_M_empty())
   b9bba:	6883      	ldr	r3, [r0, #8]
   b9bbc:	4604      	mov	r4, r0
   b9bbe:	b90b      	cbnz	r3, b9bc4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9bc0:	f000 fda4 	bl	ba70c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9bc4:	68c3      	ldr	r3, [r0, #12]
   b9bc6:	4798      	blx	r3
      if (_M_manager)
   b9bc8:	68a3      	ldr	r3, [r4, #8]
   b9bca:	b11b      	cbz	r3, b9bd4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9bcc:	2203      	movs	r2, #3
   b9bce:	4621      	mov	r1, r4
   b9bd0:	4620      	mov	r0, r4
   b9bd2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b9bd4:	4620      	mov	r0, r4
   b9bd6:	2110      	movs	r1, #16
}
   b9bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9bdc:	f7fa ba61 	b.w	b40a2 <_ZdlPvj>

000b9be0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9be0:	4770      	bx	lr

000b9be2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9be4:	4606      	mov	r6, r0
   b9be6:	4615      	mov	r5, r2
   b9be8:	460c      	mov	r4, r1
   b9bea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9bec:	42bc      	cmp	r4, r7
   b9bee:	d006      	beq.n	b9bfe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9bf0:	6833      	ldr	r3, [r6, #0]
   b9bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9bf6:	689b      	ldr	r3, [r3, #8]
   b9bf8:	4630      	mov	r0, r6
   b9bfa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9bfc:	e7f6      	b.n	b9bec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9bfe:	4628      	mov	r0, r5
   b9c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c02 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9c02:	7c00      	ldrb	r0, [r0, #16]
   b9c04:	2200      	movs	r2, #0
   b9c06:	f7fc bf89 	b.w	b6b1c <hal_i2c_write>

000b9c0a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9c0a:	7c00      	ldrb	r0, [r0, #16]
   b9c0c:	2100      	movs	r1, #0
   b9c0e:	f7fc bf8d 	b.w	b6b2c <hal_i2c_available>

000b9c12 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9c12:	7c00      	ldrb	r0, [r0, #16]
   b9c14:	2100      	movs	r1, #0
   b9c16:	f7fc bf91 	b.w	b6b3c <hal_i2c_read>

000b9c1a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9c1a:	7c00      	ldrb	r0, [r0, #16]
   b9c1c:	2100      	movs	r1, #0
   b9c1e:	f7fc bf95 	b.w	b6b4c <hal_i2c_peek>

000b9c22 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9c22:	7c00      	ldrb	r0, [r0, #16]
   b9c24:	2100      	movs	r1, #0
   b9c26:	f7fc bf99 	b.w	b6b5c <hal_i2c_flush>

000b9c2a <_ZN7TwoWireD0Ev>:
   b9c2a:	b510      	push	{r4, lr}
   b9c2c:	2114      	movs	r1, #20
   b9c2e:	4604      	mov	r4, r0
   b9c30:	f7fa fa37 	bl	b40a2 <_ZdlPvj>
   b9c34:	4620      	mov	r0, r4
   b9c36:	bd10      	pop	{r4, pc}

000b9c38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9c38:	b538      	push	{r3, r4, r5, lr}
   b9c3a:	4604      	mov	r4, r0
   b9c3c:	4615      	mov	r5, r2
   b9c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9c42:	2200      	movs	r2, #0
   b9c44:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9c48:	4b09      	ldr	r3, [pc, #36]	; (b9c70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b9c4a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9c4c:	4608      	mov	r0, r1
   b9c4e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b9c50:	4629      	mov	r1, r5
   b9c52:	f7fc ff93 	bl	b6b7c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9c56:	30bf      	adds	r0, #191	; 0xbf
   b9c58:	d108      	bne.n	b9c6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b9c5a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b9c5c:	07db      	lsls	r3, r3, #31
   b9c5e:	d505      	bpl.n	b9c6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b9c60:	6868      	ldr	r0, [r5, #4]
   b9c62:	f7fd f917 	bl	b6e94 <free>
    free(conf.tx_buffer);
   b9c66:	68e8      	ldr	r0, [r5, #12]
   b9c68:	f7fd f914 	bl	b6e94 <free>
}
   b9c6c:	4620      	mov	r0, r4
   b9c6e:	bd38      	pop	{r3, r4, r5, pc}
   b9c70:	000bde70 	.word	0x000bde70

000b9c74 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9c74:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9c76:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9c78:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9c7c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9c7e:	2201      	movs	r2, #1
   b9c80:	f04f 33ff 	mov.w	r3, #4294967295
   b9c84:	f10d 0107 	add.w	r1, sp, #7
   b9c88:	47a0      	blx	r4
}
   b9c8a:	b002      	add	sp, #8
   b9c8c:	bd10      	pop	{r4, pc}

000b9c8e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9c8e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9c90:	6803      	ldr	r3, [r0, #0]
   b9c92:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9c94:	f04f 33ff 	mov.w	r3, #4294967295
   b9c98:	46a4      	mov	ip, r4
}
   b9c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9c9e:	4760      	bx	ip

000b9ca0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9ca0:	b513      	push	{r0, r1, r4, lr}
   b9ca2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9ca4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9ca6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9caa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9cac:	f10d 0107 	add.w	r1, sp, #7
   b9cb0:	2201      	movs	r2, #1
   b9cb2:	47a0      	blx	r4
}
   b9cb4:	b002      	add	sp, #8
   b9cb6:	bd10      	pop	{r4, pc}

000b9cb8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9cb8:	b510      	push	{r4, lr}
   b9cba:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9cbc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9cc0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9cc4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9cc6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9cc8:	d008      	beq.n	b9cdc <_ZN9TCPClient4readEv+0x24>
   b9cca:	6963      	ldr	r3, [r4, #20]
   b9ccc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9cd0:	1c51      	adds	r1, r2, #1
   b9cd2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9cd6:	4413      	add	r3, r2
   b9cd8:	7918      	ldrb	r0, [r3, #4]
}
   b9cda:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9cdc:	6803      	ldr	r3, [r0, #0]
   b9cde:	691b      	ldr	r3, [r3, #16]
   b9ce0:	4798      	blx	r3
   b9ce2:	2800      	cmp	r0, #0
   b9ce4:	d1f1      	bne.n	b9cca <_ZN9TCPClient4readEv+0x12>
   b9ce6:	f04f 30ff 	mov.w	r0, #4294967295
   b9cea:	e7f6      	b.n	b9cda <_ZN9TCPClient4readEv+0x22>

000b9cec <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9cec:	4770      	bx	lr

000b9cee <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9cee:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9cf0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9cf2:	43c0      	mvns	r0, r0
   b9cf4:	0fc0      	lsrs	r0, r0, #31
   b9cf6:	4770      	bx	lr

000b9cf8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9cf8:	4770      	bx	lr
	...

000b9cfc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9cfc:	4b06      	ldr	r3, [pc, #24]	; (b9d18 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9cfe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9d00:	b510      	push	{r4, lr}
   b9d02:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9d06:	d005      	beq.n	b9d14 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9d08:	4608      	mov	r0, r1
   b9d0a:	f000 fd03 	bl	ba714 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9d0e:	2800      	cmp	r0, #0
   b9d10:	bf08      	it	eq
   b9d12:	2400      	moveq	r4, #0
      }
   b9d14:	4620      	mov	r0, r4
   b9d16:	bd10      	pop	{r4, pc}
   b9d18:	000bdd78 	.word	0x000bdd78

000b9d1c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9d1c:	b510      	push	{r4, lr}
   b9d1e:	21ac      	movs	r1, #172	; 0xac
   b9d20:	4604      	mov	r4, r0
   b9d22:	f7fa f9be 	bl	b40a2 <_ZdlPvj>
   b9d26:	4620      	mov	r0, r4
   b9d28:	bd10      	pop	{r4, pc}

000b9d2a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9d2a:	21ac      	movs	r1, #172	; 0xac
   b9d2c:	f7fa b9b9 	b.w	b40a2 <_ZdlPvj>

000b9d30 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9d34:	f04f 0800 	mov.w	r8, #0
   b9d38:	b086      	sub	sp, #24
   b9d3a:	461c      	mov	r4, r3
   b9d3c:	f8c0 8004 	str.w	r8, [r0, #4]
   b9d40:	4605      	mov	r5, r0
   b9d42:	460e      	mov	r6, r1
   b9d44:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9d46:	4641      	mov	r1, r8
   b9d48:	2210      	movs	r2, #16
   b9d4a:	a802      	add	r0, sp, #8
   b9d4c:	f001 fb15 	bl	bb37a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9d50:	1c63      	adds	r3, r4, #1
   b9d52:	d009      	beq.n	b9d68 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d58:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9d5c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9d60:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9d64:	435c      	muls	r4, r3
   b9d66:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9d68:	6968      	ldr	r0, [r5, #20]
   b9d6a:	2310      	movs	r3, #16
   b9d6c:	9300      	str	r3, [sp, #0]
   b9d6e:	6800      	ldr	r0, [r0, #0]
   b9d70:	ab02      	add	r3, sp, #8
   b9d72:	f241 0205 	movw	r2, #4101	; 0x1005
   b9d76:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9d7a:	f7fc ff0f 	bl	b6b9c <sock_setsockopt>
    if (ret < 0) {
   b9d7e:	2800      	cmp	r0, #0
   b9d80:	da07      	bge.n	b9d92 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9d82:	f7fd f8b7 	bl	b6ef4 <__errno>
   b9d86:	6803      	ldr	r3, [r0, #0]
   b9d88:	606b      	str	r3, [r5, #4]
        return 0;
   b9d8a:	2000      	movs	r0, #0
}
   b9d8c:	b006      	add	sp, #24
   b9d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9d92:	6968      	ldr	r0, [r5, #20]
   b9d94:	2300      	movs	r3, #0
   b9d96:	6800      	ldr	r0, [r0, #0]
   b9d98:	463a      	mov	r2, r7
   b9d9a:	4631      	mov	r1, r6
   b9d9c:	f7fc ff26 	bl	b6bec <sock_send>
    if (ret < 0) {
   b9da0:	1e03      	subs	r3, r0, #0
   b9da2:	dbee      	blt.n	b9d82 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9da4:	4618      	mov	r0, r3
   b9da6:	e7f1      	b.n	b9d8c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9da8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9da8:	b530      	push	{r4, r5, lr}
   b9daa:	b087      	sub	sp, #28
   b9dac:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9dae:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9db0:	4668      	mov	r0, sp
   b9db2:	f7ff fdf3 	bl	b999c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9db8:	3404      	adds	r4, #4
   b9dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9dbc:	682b      	ldr	r3, [r5, #0]
   b9dbe:	7023      	strb	r3, [r4, #0]
    }
   b9dc0:	b007      	add	sp, #28
   b9dc2:	bd30      	pop	{r4, r5, pc}

000b9dc4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9dc4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9dc6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9dc8:	4b05      	ldr	r3, [pc, #20]	; (b9de0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9dca:	4604      	mov	r4, r0
   b9dcc:	358c      	adds	r5, #140	; 0x8c
   b9dce:	f844 3b04 	str.w	r3, [r4], #4
   b9dd2:	4606      	mov	r6, r0
   b9dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9dd8:	682b      	ldr	r3, [r5, #0]
   b9dda:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9ddc:	4630      	mov	r0, r6
   b9dde:	bd70      	pop	{r4, r5, r6, pc}
   b9de0:	000bddfc 	.word	0x000bddfc

000b9de4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9de8:	4698      	mov	r8, r3
    stop();
   b9dea:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9dec:	b093      	sub	sp, #76	; 0x4c
   b9dee:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9df0:	2400      	movs	r4, #0
    stop();
   b9df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9df4:	4606      	mov	r6, r0
   b9df6:	4617      	mov	r7, r2
    stop();
   b9df8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9dfa:	4628      	mov	r0, r5
   b9dfc:	466b      	mov	r3, sp
   b9dfe:	4622      	mov	r2, r4
   b9e00:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9e02:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9e04:	f7fc fcd8 	bl	b67b8 <netdb_getaddrinfo>
   b9e08:	4605      	mov	r5, r0
   b9e0a:	2800      	cmp	r0, #0
   b9e0c:	d163      	bne.n	b9ed6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9e0e:	9b00      	ldr	r3, [sp, #0]
   b9e10:	2b00      	cmp	r3, #0
   b9e12:	d04b      	beq.n	b9eac <_ZN9TCPClient7connectEPKctm+0xc8>
   b9e14:	695b      	ldr	r3, [r3, #20]
   b9e16:	2b00      	cmp	r3, #0
   b9e18:	d048      	beq.n	b9eac <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9e1a:	a806      	add	r0, sp, #24
   b9e1c:	f7ff fd66 	bl	b98ec <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9e20:	9b00      	ldr	r3, [sp, #0]
   b9e22:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   b9e24:	7863      	ldrb	r3, [r4, #1]
   b9e26:	2b02      	cmp	r3, #2
   b9e28:	d104      	bne.n	b9e34 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9e2a:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   b9e2c:	a806      	add	r0, sp, #24
   b9e2e:	f7ff ffbb 	bl	b9da8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        if (port) {
   b9e32:	e026      	b.n	b9e82 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9e34:	2b0a      	cmp	r3, #10
   b9e36:	d124      	bne.n	b9e82 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9e38:	2211      	movs	r2, #17
   b9e3a:	4629      	mov	r1, r5
   b9e3c:	a801      	add	r0, sp, #4
   b9e3e:	f001 fa9c 	bl	bb37a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9e42:	68a3      	ldr	r3, [r4, #8]
   b9e44:	2b00      	cmp	r3, #0
   b9e46:	d038      	beq.n	b9eba <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9e48:	f104 0308 	add.w	r3, r4, #8
   b9e4c:	f10d 0c04 	add.w	ip, sp, #4
   b9e50:	3418      	adds	r4, #24
   b9e52:	6818      	ldr	r0, [r3, #0]
   b9e54:	6859      	ldr	r1, [r3, #4]
   b9e56:	4662      	mov	r2, ip
   b9e58:	c203      	stmia	r2!, {r0, r1}
   b9e5a:	3308      	adds	r3, #8
   b9e5c:	42a3      	cmp	r3, r4
   b9e5e:	4694      	mov	ip, r2
   b9e60:	d1f7      	bne.n	b9e52 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9e62:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9e64:	a901      	add	r1, sp, #4
   b9e66:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9e68:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9e6c:	f7ff fd4c 	bl	b9908 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9e70:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9e74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9e78:	ac07      	add	r4, sp, #28
   b9e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e7c:	f8dc 3000 	ldr.w	r3, [ip]
   b9e80:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9e82:	a806      	add	r0, sp, #24
   b9e84:	f7ff fd5a 	bl	b993c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9e88:	b180      	cbz	r0, b9eac <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9e8a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9e8c:	ad07      	add	r5, sp, #28
   b9e8e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9e92:	4b12      	ldr	r3, [pc, #72]	; (b9edc <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9e94:	930c      	str	r3, [sp, #48]	; 0x30
   b9e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e98:	ac0d      	add	r4, sp, #52	; 0x34
   b9e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e9c:	682b      	ldr	r3, [r5, #0]
   b9e9e:	7023      	strb	r3, [r4, #0]
   b9ea0:	463a      	mov	r2, r7
   b9ea2:	4643      	mov	r3, r8
   b9ea4:	a90c      	add	r1, sp, #48	; 0x30
   b9ea6:	4630      	mov	r0, r6
   b9ea8:	47c8      	blx	r9
   b9eaa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9eac:	9800      	ldr	r0, [sp, #0]
   b9eae:	f7fc fc7b 	bl	b67a8 <netdb_freeaddrinfo>
}
   b9eb2:	4628      	mov	r0, r5
   b9eb4:	b013      	add	sp, #76	; 0x4c
   b9eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9eba:	68e3      	ldr	r3, [r4, #12]
   b9ebc:	2b00      	cmp	r3, #0
   b9ebe:	d1c3      	bne.n	b9e48 <_ZN9TCPClient7connectEPKctm+0x64>
   b9ec0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9ec4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9ec8:	f7fc fdd0 	bl	b6a6c <inet_htonl>
   b9ecc:	4581      	cmp	r9, r0
   b9ece:	d1bb      	bne.n	b9e48 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9ed0:	f104 0114 	add.w	r1, r4, #20
   b9ed4:	e7aa      	b.n	b9e2c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9ed6:	4625      	mov	r5, r4
   b9ed8:	e7e8      	b.n	b9eac <_ZN9TCPClient7connectEPKctm+0xc8>
   b9eda:	bf00      	nop
   b9edc:	000bddfc 	.word	0x000bddfc

000b9ee0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9ee0:	b538      	push	{r3, r4, r5, lr}
   b9ee2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9ee4:	681a      	ldr	r2, [r3, #0]
   b9ee6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9ee8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9eea:	da10      	bge.n	b9f0e <_ZN9TCPClient9connectedEv+0x2e>
   b9eec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ef0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9ef4:	429a      	cmp	r2, r3
   b9ef6:	d10a      	bne.n	b9f0e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9ef8:	6803      	ldr	r3, [r0, #0]
   b9efa:	691b      	ldr	r3, [r3, #16]
   b9efc:	4798      	blx	r3
        if (!rv) {
   b9efe:	4604      	mov	r4, r0
   b9f00:	b928      	cbnz	r0, b9f0e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9f02:	682b      	ldr	r3, [r5, #0]
   b9f04:	4628      	mov	r0, r5
   b9f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9f08:	4798      	blx	r3
        rv = available();
   b9f0a:	4620      	mov	r0, r4
}
   b9f0c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9f0e:	2001      	movs	r0, #1
   b9f10:	e7fc      	b.n	b9f0c <_ZN9TCPClient9connectedEv+0x2c>

000b9f12 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9f12:	b510      	push	{r4, lr}
   b9f14:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9f16:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9f1a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9f1e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9f20:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9f22:	d005      	beq.n	b9f30 <_ZN9TCPClient4peekEv+0x1e>
   b9f24:	6963      	ldr	r3, [r4, #20]
   b9f26:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9f2a:	4413      	add	r3, r2
   b9f2c:	7918      	ldrb	r0, [r3, #4]
}
   b9f2e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9f30:	6803      	ldr	r3, [r0, #0]
   b9f32:	691b      	ldr	r3, [r3, #16]
   b9f34:	4798      	blx	r3
   b9f36:	2800      	cmp	r0, #0
   b9f38:	d1f4      	bne.n	b9f24 <_ZN9TCPClient4peekEv+0x12>
   b9f3a:	f04f 30ff 	mov.w	r0, #4294967295
   b9f3e:	e7f6      	b.n	b9f2e <_ZN9TCPClient4peekEv+0x1c>

000b9f40 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f42:	6943      	ldr	r3, [r0, #20]
   b9f44:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9f46:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9f4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9f4e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9f50:	4605      	mov	r5, r0
   b9f52:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9f54:	d016      	beq.n	b9f84 <_ZN9TCPClient4readEPhj+0x44>
   b9f56:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9f58:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9f5c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9f60:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9f62:	42bc      	cmp	r4, r7
   b9f64:	bf28      	it	cs
   b9f66:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9f68:	3304      	adds	r3, #4
   b9f6a:	4622      	mov	r2, r4
   b9f6c:	4419      	add	r1, r3
   b9f6e:	4630      	mov	r0, r6
   b9f70:	f001 f9db 	bl	bb32a <memcpy>
   b9f74:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9f76:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9f7a:	4423      	add	r3, r4
   b9f7c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9f80:	4620      	mov	r0, r4
   b9f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9f84:	6803      	ldr	r3, [r0, #0]
   b9f86:	691b      	ldr	r3, [r3, #16]
   b9f88:	4798      	blx	r3
   b9f8a:	2800      	cmp	r0, #0
   b9f8c:	d1e3      	bne.n	b9f56 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9f8e:	f04f 34ff 	mov.w	r4, #4294967295
   b9f92:	e7f5      	b.n	b9f80 <_ZN9TCPClient4readEPhj+0x40>

000b9f94 <_ZN9TCPClient12flush_bufferEv>:
   b9f94:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9f96:	2300      	movs	r3, #0
   b9f98:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9f9c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9f9e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9fa2:	4770      	bx	lr

000b9fa4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9fa8:	461f      	mov	r7, r3
    stop();
   b9faa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9fac:	460c      	mov	r4, r1
    stop();
   b9fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9fb0:	b08a      	sub	sp, #40	; 0x28
   b9fb2:	4605      	mov	r5, r0
   b9fb4:	4616      	mov	r6, r2
    stop();
   b9fb6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9fb8:	7d23      	ldrb	r3, [r4, #20]
   b9fba:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9fbe:	2b04      	cmp	r3, #4
   b9fc0:	bf0c      	ite	eq
   b9fc2:	2002      	moveq	r0, #2
   b9fc4:	200a      	movne	r0, #10
   b9fc6:	2206      	movs	r2, #6
   b9fc8:	2101      	movs	r1, #1
   b9fca:	f7fc fe1f 	bl	b6c0c <sock_socket>
   b9fce:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9fd2:	696b      	ldr	r3, [r5, #20]
   b9fd4:	681b      	ldr	r3, [r3, #0]
   b9fd6:	2b00      	cmp	r3, #0
   b9fd8:	da08      	bge.n	b9fec <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9fda:	682b      	ldr	r3, [r5, #0]
   b9fdc:	4628      	mov	r0, r5
   b9fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9fe0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9fe2:	4798      	blx	r3
}
   b9fe4:	4620      	mov	r0, r4
   b9fe6:	b00a      	add	sp, #40	; 0x28
   b9fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9fec:	4628      	mov	r0, r5
   b9fee:	f7ff ffd1 	bl	b9f94 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9ff2:	b1b7      	cbz	r7, ba022 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9ff4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9ff6:	a903      	add	r1, sp, #12
   b9ff8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9ffa:	9303      	str	r3, [sp, #12]
   b9ffc:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   ba000:	f7fc fbfa 	bl	b67f8 <if_index_to_name>
   ba004:	2800      	cmp	r0, #0
   ba006:	d1e8      	bne.n	b9fda <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   ba008:	6968      	ldr	r0, [r5, #20]
   ba00a:	2306      	movs	r3, #6
   ba00c:	9300      	str	r3, [sp, #0]
   ba00e:	6800      	ldr	r0, [r0, #0]
   ba010:	ab03      	add	r3, sp, #12
   ba012:	f241 020b 	movw	r2, #4107	; 0x100b
   ba016:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba01a:	f7fc fdbf 	bl	b6b9c <sock_setsockopt>
   ba01e:	2800      	cmp	r0, #0
   ba020:	d1db      	bne.n	b9fda <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   ba022:	221c      	movs	r2, #28
   ba024:	2100      	movs	r1, #0
   ba026:	a803      	add	r0, sp, #12
   ba028:	f001 f9a7 	bl	bb37a <memset>
    if (ip.version() == 4) {
   ba02c:	7d23      	ldrb	r3, [r4, #20]
   ba02e:	2b04      	cmp	r3, #4
   ba030:	d11d      	bne.n	ba06e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   ba032:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   ba036:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   ba038:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   ba03c:	f7fc fd26 	bl	b6a8c <inet_htons>
   ba040:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   ba044:	6860      	ldr	r0, [r4, #4]
   ba046:	f7fc fd11 	bl	b6a6c <inet_htonl>
   ba04a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   ba04c:	696b      	ldr	r3, [r5, #20]
   ba04e:	221c      	movs	r2, #28
   ba050:	6818      	ldr	r0, [r3, #0]
   ba052:	a903      	add	r1, sp, #12
   ba054:	f7fc fdb2 	bl	b6bbc <sock_connect>
   ba058:	2800      	cmp	r0, #0
   ba05a:	d1be      	bne.n	b9fda <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   ba05c:	3404      	adds	r4, #4
   ba05e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba060:	696d      	ldr	r5, [r5, #20]
   ba062:	358c      	adds	r5, #140	; 0x8c
   ba064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba066:	6823      	ldr	r3, [r4, #0]
   ba068:	702b      	strb	r3, [r5, #0]
    return 1; // success
   ba06a:	2401      	movs	r4, #1
   ba06c:	e7ba      	b.n	b9fe4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   ba06e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   ba072:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   ba074:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   ba078:	f7fc fd08 	bl	b6a8c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba07c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   ba07e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba082:	1d23      	adds	r3, r4, #4
   ba084:	f104 0714 	add.w	r7, r4, #20
   ba088:	6818      	ldr	r0, [r3, #0]
   ba08a:	6859      	ldr	r1, [r3, #4]
   ba08c:	4632      	mov	r2, r6
   ba08e:	c203      	stmia	r2!, {r0, r1}
   ba090:	3308      	adds	r3, #8
   ba092:	42bb      	cmp	r3, r7
   ba094:	4616      	mov	r6, r2
   ba096:	d1f7      	bne.n	ba088 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   ba098:	e7d8      	b.n	ba04c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000ba09c <_ZN9TCPClient9availableEv>:
{
   ba09c:	b530      	push	{r4, r5, lr}
   ba09e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   ba0a0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   ba0a4:	b08b      	sub	sp, #44	; 0x2c
   ba0a6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   ba0a8:	b12b      	cbz	r3, ba0b6 <_ZN9TCPClient9availableEv+0x1a>
   ba0aa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   ba0ae:	429a      	cmp	r2, r3
   ba0b0:	d101      	bne.n	ba0b6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   ba0b2:	f7ff ff6f 	bl	b9f94 <_ZN9TCPClient12flush_bufferEv>
   ba0b6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   ba0b8:	6808      	ldr	r0, [r1, #0]
   ba0ba:	2800      	cmp	r0, #0
   ba0bc:	db18      	blt.n	ba0f0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   ba0be:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   ba0c2:	2d7f      	cmp	r5, #127	; 0x7f
   ba0c4:	d814      	bhi.n	ba0f0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   ba0c6:	3104      	adds	r1, #4
   ba0c8:	2308      	movs	r3, #8
   ba0ca:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   ba0ce:	4429      	add	r1, r5
   ba0d0:	f7fc fd7c 	bl	b6bcc <sock_recv>
            if (ret > 0) {
   ba0d4:	2800      	cmp	r0, #0
   ba0d6:	dd13      	ble.n	ba100 <_ZN9TCPClient9availableEv+0x64>
   ba0d8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   ba0da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba0de:	b90a      	cbnz	r2, ba0e4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   ba0e0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   ba0e4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   ba0e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba0ea:	4410      	add	r0, r2
   ba0ec:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   ba0f0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   ba0f2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   ba0f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   ba0fa:	1ac0      	subs	r0, r0, r3
   ba0fc:	b00b      	add	sp, #44	; 0x2c
   ba0fe:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   ba100:	f7fc fef8 	bl	b6ef4 <__errno>
   ba104:	6803      	ldr	r3, [r0, #0]
   ba106:	2b0b      	cmp	r3, #11
   ba108:	d0f2      	beq.n	ba0f0 <_ZN9TCPClient9availableEv+0x54>
   ba10a:	f7fc fef3 	bl	b6ef4 <__errno>
   ba10e:	6803      	ldr	r3, [r0, #0]
   ba110:	2b0b      	cmp	r3, #11
   ba112:	d0ed      	beq.n	ba0f0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   ba114:	2320      	movs	r3, #32
   ba116:	2500      	movs	r5, #0
   ba118:	e9cd 3502 	strd	r3, r5, [sp, #8]
   ba11c:	f7fc feea 	bl	b6ef4 <__errno>
   ba120:	6803      	ldr	r3, [r0, #0]
   ba122:	9301      	str	r3, [sp, #4]
   ba124:	4b08      	ldr	r3, [pc, #32]	; (ba148 <_ZN9TCPClient9availableEv+0xac>)
   ba126:	4909      	ldr	r1, [pc, #36]	; (ba14c <_ZN9TCPClient9availableEv+0xb0>)
   ba128:	9300      	str	r3, [sp, #0]
   ba12a:	aa02      	add	r2, sp, #8
   ba12c:	462b      	mov	r3, r5
   ba12e:	2032      	movs	r0, #50	; 0x32
   ba130:	f7fc fdc4 	bl	b6cbc <log_message>
                    sock_close(d_->sock);
   ba134:	6963      	ldr	r3, [r4, #20]
   ba136:	6818      	ldr	r0, [r3, #0]
   ba138:	f7fc fd38 	bl	b6bac <sock_close>
   ba13c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   ba13e:	f04f 32ff 	mov.w	r2, #4294967295
   ba142:	601a      	str	r2, [r3, #0]
   ba144:	e7d4      	b.n	ba0f0 <_ZN9TCPClient9availableEv+0x54>
   ba146:	bf00      	nop
   ba148:	000bde97 	.word	0x000bde97
   ba14c:	000bde90 	.word	0x000bde90

000ba150 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   ba150:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   ba152:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   ba154:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   ba156:	6818      	ldr	r0, [r3, #0]
   ba158:	2800      	cmp	r0, #0
   ba15a:	db01      	blt.n	ba160 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   ba15c:	f7fc fd26 	bl	b6bac <sock_close>
   ba160:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   ba162:	f04f 32ff 	mov.w	r2, #4294967295
   ba166:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   ba168:	6960      	ldr	r0, [r4, #20]
   ba16a:	2211      	movs	r2, #17
   ba16c:	2100      	movs	r1, #0
   ba16e:	308c      	adds	r0, #140	; 0x8c
   ba170:	f001 f903 	bl	bb37a <memset>
    flush_buffer();
   ba174:	4620      	mov	r0, r4
}
   ba176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   ba17a:	f7ff bf0b 	b.w	b9f94 <_ZN9TCPClient12flush_bufferEv>

000ba17e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   ba17e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   ba180:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   ba182:	4604      	mov	r4, r0
          total(0) {
   ba184:	6001      	str	r1, [r0, #0]
   ba186:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   ba18a:	3088      	adds	r0, #136	; 0x88
   ba18c:	f7ff fbae 	bl	b98ec <_ZN9IPAddressC1Ev>
}
   ba190:	4620      	mov	r0, r4
   ba192:	bd10      	pop	{r4, pc}

000ba194 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   ba194:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba196:	2300      	movs	r3, #0
   ba198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba19c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   ba1a0:	4a0e      	ldr	r2, [pc, #56]	; (ba1dc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   ba1a2:	6103      	str	r3, [r0, #16]
   ba1a4:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba1a6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   ba1a8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba1aa:	20ac      	movs	r0, #172	; 0xac
   ba1ac:	9101      	str	r1, [sp, #4]
   ba1ae:	f7f9 ff72 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba1b2:	1e05      	subs	r5, r0, #0
   ba1b4:	f105 060c 	add.w	r6, r5, #12
   ba1b8:	d008      	beq.n	ba1cc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   ba1ba:	2301      	movs	r3, #1
   ba1bc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   ba1c0:	4b07      	ldr	r3, [pc, #28]	; (ba1e0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba1c2:	9901      	ldr	r1, [sp, #4]
   ba1c4:	602b      	str	r3, [r5, #0]
   ba1c6:	4630      	mov	r0, r6
   ba1c8:	f7ff ffd9 	bl	ba17e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   ba1cc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   ba1ce:	e9c4 6505 	strd	r6, r5, [r4, #20]
   ba1d2:	f7ff fedf 	bl	b9f94 <_ZN9TCPClient12flush_bufferEv>
}
   ba1d6:	b002      	add	sp, #8
   ba1d8:	bd70      	pop	{r4, r5, r6, pc}
   ba1da:	bf00      	nop
   ba1dc:	000bdecc 	.word	0x000bdecc
   ba1e0:	000bdeb0 	.word	0x000bdeb0

000ba1e4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   ba1e4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   ba1e6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   ba1ea:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ba1ec:	f7ff ffd2 	bl	ba194 <_ZN9TCPClientC1Ei>
}
   ba1f0:	4620      	mov	r0, r4
   ba1f2:	bd10      	pop	{r4, pc}

000ba1f4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   ba1f4:	b510      	push	{r4, lr}
   ba1f6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ba1f8:	6800      	ldr	r0, [r0, #0]
   ba1fa:	2800      	cmp	r0, #0
   ba1fc:	db01      	blt.n	ba202 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ba1fe:	f7fc fcd5 	bl	b6bac <sock_close>
    }
}
   ba202:	4620      	mov	r0, r4
   ba204:	bd10      	pop	{r4, pc}

000ba206 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   ba206:	300c      	adds	r0, #12
   ba208:	f7ff bff4 	b.w	ba1f4 <_ZN9TCPClient4DataD1Ev>

000ba20c <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   ba20c:	4770      	bx	lr

000ba20e <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   ba20e:	2001      	movs	r0, #1
   ba210:	4770      	bx	lr

000ba212 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba212:	2200      	movs	r2, #0
   ba214:	6840      	ldr	r0, [r0, #4]
   ba216:	4611      	mov	r1, r2
   ba218:	f7fc bdbc 	b.w	b6d94 <network_ready>

000ba21c <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   ba21c:	b510      	push	{r4, lr}
   ba21e:	2124      	movs	r1, #36	; 0x24
   ba220:	4604      	mov	r4, r0
   ba222:	f7f9 ff3e 	bl	b40a2 <_ZdlPvj>
   ba226:	4620      	mov	r0, r4
   ba228:	bd10      	pop	{r4, pc}

000ba22a <_ZN5spark9WiFiClass9listeningEv>:
=======
   b53aa:	b530      	push	{r4, r5, lr}
   b53ac:	b087      	sub	sp, #28
   b53ae:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b53b0:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b53b2:	4668      	mov	r0, sp
   b53b4:	f002 ffaa 	bl	b830c <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b53b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53ba:	3404      	adds	r4, #4
   b53bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53be:	682b      	ldr	r3, [r5, #0]
   b53c0:	7023      	strb	r3, [r4, #0]
    }
   b53c2:	b007      	add	sp, #28
   b53c4:	bd30      	pop	{r4, r5, pc}

000b53c6 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b53c6:	b538      	push	{r3, r4, r5, lr}
   b53c8:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b53cc:	4604      	mov	r4, r0
   b53ce:	4628      	mov	r0, r5
   b53d0:	f002 ff7c 	bl	b82cc <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b53d4:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b53d6:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b53d8:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b53da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b53de:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b53e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b53e6:	f04f 31ff 	mov.w	r1, #4294967295
   b53ea:	f7ff ffde 	bl	b53aa <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b53ee:	4620      	mov	r0, r4
   b53f0:	bd38      	pop	{r3, r4, r5, pc}

000b53f2 <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b53f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53f4:	4604      	mov	r4, r0
   b53f6:	3004      	adds	r0, #4
   b53f8:	460d      	mov	r5, r1
   b53fa:	f000 feb7 	bl	b616c <_ZN3UDPC1Ev>
   b53fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5402:	f002 ff63 	bl	b82cc <_ZN9IPAddressC1Ev>
    timeout = 0;
   b5406:	2300      	movs	r3, #0
   b5408:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b540a:	686b      	ldr	r3, [r5, #4]
   b540c:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b540e:	68ab      	ldr	r3, [r5, #8]
   b5410:	60e3      	str	r3, [r4, #12]
   b5412:	68eb      	ldr	r3, [r5, #12]
   b5414:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b5416:	696b      	ldr	r3, [r5, #20]
   b5418:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b541a:	f105 0720 	add.w	r7, r5, #32
   b541e:	8b2b      	ldrh	r3, [r5, #24]
   b5420:	83a3      	strh	r3, [r4, #28]
   b5422:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5424:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b5428:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b542a:	683b      	ldr	r3, [r7, #0]
   b542c:	7033      	strb	r3, [r6, #0]
   b542e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b5430:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b5432:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b5434:	6423      	str	r3, [r4, #64]	; 0x40
   b5436:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b5438:	6463      	str	r3, [r4, #68]	; 0x44
   b543a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b543c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b543e:	64a3      	str	r3, [r4, #72]	; 0x48
   b5440:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b5444:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b5446:	4620      	mov	r0, r4
   b5448:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5450 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b5450:	4801      	ldr	r0, [pc, #4]	; (b5458 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b5452:	f7ff bf99 	b.w	b5388 <_ZN12mDNSResolver5CacheC1Ev>
   b5456:	bf00      	nop
   b5458:	2003e1e0 	.word	0x2003e1e0

000b545c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b545c:	b508      	push	{r3, lr}
   b545e:	4b02      	ldr	r3, [pc, #8]	; (b5468 <netdb_freeaddrinfo+0xc>)
   b5460:	681b      	ldr	r3, [r3, #0]
   b5462:	689b      	ldr	r3, [r3, #8]
   b5464:	9301      	str	r3, [sp, #4]
   b5466:	bd08      	pop	{r3, pc}
   b5468:	00030268 	.word	0x00030268

000b546c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b546c:	b508      	push	{r3, lr}
   b546e:	4b02      	ldr	r3, [pc, #8]	; (b5478 <netdb_getaddrinfo+0xc>)
   b5470:	681b      	ldr	r3, [r3, #0]
   b5472:	68db      	ldr	r3, [r3, #12]
   b5474:	9301      	str	r3, [sp, #4]
   b5476:	bd08      	pop	{r3, pc}
   b5478:	00030268 	.word	0x00030268

000b547c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b547c:	b508      	push	{r3, lr}
   b547e:	4b02      	ldr	r3, [pc, #8]	; (b5488 <HAL_Pin_Mode+0xc>)
   b5480:	681b      	ldr	r3, [r3, #0]
   b5482:	689b      	ldr	r3, [r3, #8]
   b5484:	9301      	str	r3, [sp, #4]
   b5486:	bd08      	pop	{r3, pc}
   b5488:	0003022c 	.word	0x0003022c

000b548c <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b548c:	b508      	push	{r3, lr}
   b548e:	4b02      	ldr	r3, [pc, #8]	; (b5498 <HAL_Interrupts_Attach+0xc>)
   b5490:	681b      	ldr	r3, [r3, #0]
   b5492:	699b      	ldr	r3, [r3, #24]
   b5494:	9301      	str	r3, [sp, #4]
   b5496:	bd08      	pop	{r3, pc}
   b5498:	0003022c 	.word	0x0003022c

000b549c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b549c:	b508      	push	{r3, lr}
   b549e:	4b02      	ldr	r3, [pc, #8]	; (b54a8 <HAL_Interrupts_Detach+0xc>)
   b54a0:	681b      	ldr	r3, [r3, #0]
   b54a2:	69db      	ldr	r3, [r3, #28]
   b54a4:	9301      	str	r3, [sp, #4]
   b54a6:	bd08      	pop	{r3, pc}
   b54a8:	0003022c 	.word	0x0003022c

000b54ac <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b54ac:	b508      	push	{r3, lr}
   b54ae:	4b02      	ldr	r3, [pc, #8]	; (b54b8 <if_index_to_name+0xc>)
   b54b0:	681b      	ldr	r3, [r3, #0]
   b54b2:	695b      	ldr	r3, [r3, #20]
   b54b4:	9301      	str	r3, [sp, #4]
   b54b6:	bd08      	pop	{r3, pc}
   b54b8:	0003026c 	.word	0x0003026c

000b54bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b54bc:	b508      	push	{r3, lr}
   b54be:	4b02      	ldr	r3, [pc, #8]	; (b54c8 <HAL_RNG_GetRandomNumber+0xc>)
   b54c0:	681b      	ldr	r3, [r3, #0]
   b54c2:	685b      	ldr	r3, [r3, #4]
   b54c4:	9301      	str	r3, [sp, #4]
   b54c6:	bd08      	pop	{r3, pc}
   b54c8:	00030218 	.word	0x00030218

000b54cc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b54cc:	b508      	push	{r3, lr}
   b54ce:	4b02      	ldr	r3, [pc, #8]	; (b54d8 <HAL_Delay_Microseconds+0xc>)
   b54d0:	681b      	ldr	r3, [r3, #0]
   b54d2:	68db      	ldr	r3, [r3, #12]
   b54d4:	9301      	str	r3, [sp, #4]
   b54d6:	bd08      	pop	{r3, pc}
   b54d8:	00030218 	.word	0x00030218

000b54dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b54dc:	b508      	push	{r3, lr}
   b54de:	4b02      	ldr	r3, [pc, #8]	; (b54e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b54e0:	681b      	ldr	r3, [r3, #0]
   b54e2:	695b      	ldr	r3, [r3, #20]
   b54e4:	9301      	str	r3, [sp, #4]
   b54e6:	bd08      	pop	{r3, pc}
   b54e8:	00030218 	.word	0x00030218

000b54ec <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b54ec:	b508      	push	{r3, lr}
   b54ee:	4b02      	ldr	r3, [pc, #8]	; (b54f8 <hal_rtc_time_is_valid+0xc>)
   b54f0:	681b      	ldr	r3, [r3, #0]
   b54f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b54f4:	9301      	str	r3, [sp, #4]
   b54f6:	bd08      	pop	{r3, pc}
   b54f8:	00030218 	.word	0x00030218

000b54fc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b54fc:	b508      	push	{r3, lr}
   b54fe:	4b02      	ldr	r3, [pc, #8]	; (b5508 <hal_rtc_get_time+0xc>)
   b5500:	681b      	ldr	r3, [r3, #0]
   b5502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5504:	9301      	str	r3, [sp, #4]
   b5506:	bd08      	pop	{r3, pc}
   b5508:	00030218 	.word	0x00030218

000b550c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b550c:	b508      	push	{r3, lr}
   b550e:	4b02      	ldr	r3, [pc, #8]	; (b5518 <HAL_Core_Runtime_Info+0xc>)
   b5510:	681b      	ldr	r3, [r3, #0]
   b5512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5514:	9301      	str	r3, [sp, #4]
   b5516:	bd08      	pop	{r3, pc}
   b5518:	00030234 	.word	0x00030234

000b551c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b551c:	b508      	push	{r3, lr}
   b551e:	4b02      	ldr	r3, [pc, #8]	; (b5528 <hal_ble_stack_init+0xc>)
   b5520:	681b      	ldr	r3, [r3, #0]
   b5522:	689b      	ldr	r3, [r3, #8]
   b5524:	9301      	str	r3, [sp, #4]
   b5526:	bd08      	pop	{r3, pc}
   b5528:	00030278 	.word	0x00030278

000b552c <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b552c:	b508      	push	{r3, lr}
   b552e:	4b02      	ldr	r3, [pc, #8]	; (b5538 <hal_ble_select_antenna+0xc>)
   b5530:	681b      	ldr	r3, [r3, #0]
   b5532:	691b      	ldr	r3, [r3, #16]
   b5534:	9301      	str	r3, [sp, #4]
   b5536:	bd08      	pop	{r3, pc}
   b5538:	00030278 	.word	0x00030278

000b553c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b553c:	b508      	push	{r3, lr}
   b553e:	4b02      	ldr	r3, [pc, #8]	; (b5548 <hal_ble_gap_set_advertising_data+0xc>)
   b5540:	681b      	ldr	r3, [r3, #0]
   b5542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5544:	9301      	str	r3, [sp, #4]
   b5546:	bd08      	pop	{r3, pc}
   b5548:	00030278 	.word	0x00030278

000b554c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b554c:	b508      	push	{r3, lr}
   b554e:	4b02      	ldr	r3, [pc, #8]	; (b5558 <hal_ble_gap_set_scan_response_data+0xc>)
   b5550:	681b      	ldr	r3, [r3, #0]
   b5552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5554:	9301      	str	r3, [sp, #4]
   b5556:	bd08      	pop	{r3, pc}
   b5558:	00030278 	.word	0x00030278

000b555c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b555c:	b508      	push	{r3, lr}
   b555e:	4b02      	ldr	r3, [pc, #8]	; (b5568 <hal_ble_gap_start_advertising+0xc>)
   b5560:	681b      	ldr	r3, [r3, #0]
   b5562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5564:	9301      	str	r3, [sp, #4]
   b5566:	bd08      	pop	{r3, pc}
   b5568:	00030278 	.word	0x00030278

000b556c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b556c:	b508      	push	{r3, lr}
   b556e:	4b03      	ldr	r3, [pc, #12]	; (b557c <hal_ble_gap_disconnect+0x10>)
   b5570:	681b      	ldr	r3, [r3, #0]
   b5572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5576:	9301      	str	r3, [sp, #4]
   b5578:	bd08      	pop	{r3, pc}
   b557a:	0000      	.short	0x0000
   b557c:	00030278 	.word	0x00030278

000b5580 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b03      	ldr	r3, [pc, #12]	; (b5590 <hal_ble_gatt_server_add_service+0x10>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b558a:	9301      	str	r3, [sp, #4]
   b558c:	bd08      	pop	{r3, pc}
   b558e:	0000      	.short	0x0000
   b5590:	00030278 	.word	0x00030278

000b5594 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b03      	ldr	r3, [pc, #12]	; (b55a4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b559e:	9301      	str	r3, [sp, #4]
   b55a0:	bd08      	pop	{r3, pc}
   b55a2:	0000      	.short	0x0000
   b55a4:	00030278 	.word	0x00030278

000b55a8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b55a8:	b508      	push	{r3, lr}
   b55aa:	4b03      	ldr	r3, [pc, #12]	; (b55b8 <hal_ble_gatt_client_write_with_response+0x10>)
   b55ac:	681b      	ldr	r3, [r3, #0]
   b55ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b55b2:	9301      	str	r3, [sp, #4]
   b55b4:	bd08      	pop	{r3, pc}
   b55b6:	0000      	.short	0x0000
   b55b8:	00030278 	.word	0x00030278

000b55bc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b55bc:	b508      	push	{r3, lr}
   b55be:	4b03      	ldr	r3, [pc, #12]	; (b55cc <hal_ble_gatt_client_write_without_response+0x10>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b55c6:	9301      	str	r3, [sp, #4]
   b55c8:	bd08      	pop	{r3, pc}
   b55ca:	0000      	.short	0x0000
   b55cc:	00030278 	.word	0x00030278

000b55d0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b03      	ldr	r3, [pc, #12]	; (b55e0 <hal_ble_gatt_server_add_characteristic+0x10>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b55da:	9301      	str	r3, [sp, #4]
   b55dc:	bd08      	pop	{r3, pc}
   b55de:	0000      	.short	0x0000
   b55e0:	00030278 	.word	0x00030278

000b55e4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b03      	ldr	r3, [pc, #12]	; (b55f4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b55ee:	9301      	str	r3, [sp, #4]
   b55f0:	bd08      	pop	{r3, pc}
   b55f2:	0000      	.short	0x0000
   b55f4:	00030278 	.word	0x00030278

000b55f8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b55f8:	b508      	push	{r3, lr}
   b55fa:	4b03      	ldr	r3, [pc, #12]	; (b5608 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b55fc:	681b      	ldr	r3, [r3, #0]
   b55fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b5602:	9301      	str	r3, [sp, #4]
   b5604:	bd08      	pop	{r3, pc}
   b5606:	0000      	.short	0x0000
   b5608:	00030278 	.word	0x00030278

000b560c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b560c:	b508      	push	{r3, lr}
   b560e:	4b03      	ldr	r3, [pc, #12]	; (b561c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b5616:	9301      	str	r3, [sp, #4]
   b5618:	bd08      	pop	{r3, pc}
   b561a:	0000      	.short	0x0000
   b561c:	00030278 	.word	0x00030278

000b5620 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <os_thread_yield+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	68db      	ldr	r3, [r3, #12]
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	00030248 	.word	0x00030248

000b5630 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <os_thread_scheduling+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	69db      	ldr	r3, [r3, #28]
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	00030248 	.word	0x00030248

000b5640 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <os_timer_create+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	6a1b      	ldr	r3, [r3, #32]
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	00030248 	.word	0x00030248

000b5650 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <os_timer_destroy+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030248 	.word	0x00030248

000b5660 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <os_timer_get_id+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	00030248 	.word	0x00030248

000b5670 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <os_timer_change+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	00030248 	.word	0x00030248

000b5680 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <os_mutex_recursive_create+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	00030248 	.word	0x00030248

000b5690 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <os_mutex_recursive_lock+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	00030248 	.word	0x00030248

000b56a0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <os_mutex_recursive_unlock+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	00030248 	.word	0x00030248

000b56b0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <os_timer_set_id+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	00030248 	.word	0x00030248

000b56c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <inet_inet_ntop+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	695b      	ldr	r3, [r3, #20]
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	00030264 	.word	0x00030264

000b56d0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <inet_htonl+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	6a1b      	ldr	r3, [r3, #32]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	00030264 	.word	0x00030264

000b56e0 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <inet_ntohs+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	00030264 	.word	0x00030264

000b56f0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <inet_htons+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	00030264 	.word	0x00030264

000b5700 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <hal_usart_write+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	68db      	ldr	r3, [r3, #12]
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	0003023c 	.word	0x0003023c

000b5710 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <hal_usart_available+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	691b      	ldr	r3, [r3, #16]
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	0003023c 	.word	0x0003023c

000b5720 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <hal_usart_read+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	695b      	ldr	r3, [r3, #20]
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	0003023c 	.word	0x0003023c

000b5730 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <hal_usart_peek+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	699b      	ldr	r3, [r3, #24]
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	0003023c 	.word	0x0003023c

000b5740 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <hal_usart_flush+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	69db      	ldr	r3, [r3, #28]
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	0003023c 	.word	0x0003023c

000b5750 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <hal_usart_is_enabled+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	6a1b      	ldr	r3, [r3, #32]
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	0003023c 	.word	0x0003023c

000b5760 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <hal_usart_available_data_for_write+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	0003023c 	.word	0x0003023c

000b5770 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <hal_usart_init_ex+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	0003023c 	.word	0x0003023c

000b5780 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <hal_i2c_write+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	6a1b      	ldr	r3, [r3, #32]
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	00030228 	.word	0x00030228

000b5790 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5790:	b508      	push	{r3, lr}
   b5792:	4b02      	ldr	r3, [pc, #8]	; (b579c <hal_i2c_available+0xc>)
   b5794:	681b      	ldr	r3, [r3, #0]
   b5796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5798:	9301      	str	r3, [sp, #4]
   b579a:	bd08      	pop	{r3, pc}
   b579c:	00030228 	.word	0x00030228

000b57a0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b57a0:	b508      	push	{r3, lr}
   b57a2:	4b02      	ldr	r3, [pc, #8]	; (b57ac <hal_i2c_read+0xc>)
   b57a4:	681b      	ldr	r3, [r3, #0]
   b57a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b57a8:	9301      	str	r3, [sp, #4]
   b57aa:	bd08      	pop	{r3, pc}
   b57ac:	00030228 	.word	0x00030228

000b57b0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b57b0:	b508      	push	{r3, lr}
   b57b2:	4b02      	ldr	r3, [pc, #8]	; (b57bc <hal_i2c_peek+0xc>)
   b57b4:	681b      	ldr	r3, [r3, #0]
   b57b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57b8:	9301      	str	r3, [sp, #4]
   b57ba:	bd08      	pop	{r3, pc}
   b57bc:	00030228 	.word	0x00030228

000b57c0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b57c0:	b508      	push	{r3, lr}
   b57c2:	4b02      	ldr	r3, [pc, #8]	; (b57cc <hal_i2c_flush+0xc>)
   b57c4:	681b      	ldr	r3, [r3, #0]
   b57c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57c8:	9301      	str	r3, [sp, #4]
   b57ca:	bd08      	pop	{r3, pc}
   b57cc:	00030228 	.word	0x00030228

000b57d0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b57d0:	b508      	push	{r3, lr}
   b57d2:	4b02      	ldr	r3, [pc, #8]	; (b57dc <hal_i2c_is_enabled+0xc>)
   b57d4:	681b      	ldr	r3, [r3, #0]
   b57d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b57d8:	9301      	str	r3, [sp, #4]
   b57da:	bd08      	pop	{r3, pc}
   b57dc:	00030228 	.word	0x00030228

000b57e0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b57e0:	b508      	push	{r3, lr}
   b57e2:	4b02      	ldr	r3, [pc, #8]	; (b57ec <hal_i2c_init+0xc>)
   b57e4:	681b      	ldr	r3, [r3, #0]
   b57e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57e8:	9301      	str	r3, [sp, #4]
   b57ea:	bd08      	pop	{r3, pc}
   b57ec:	00030228 	.word	0x00030228

000b57f0 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b57f0:	b508      	push	{r3, lr}
   b57f2:	4b02      	ldr	r3, [pc, #8]	; (b57fc <sock_bind+0xc>)
   b57f4:	681b      	ldr	r3, [r3, #0]
   b57f6:	685b      	ldr	r3, [r3, #4]
   b57f8:	9301      	str	r3, [sp, #4]
   b57fa:	bd08      	pop	{r3, pc}
   b57fc:	00030238 	.word	0x00030238

000b5800 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5800:	b508      	push	{r3, lr}
   b5802:	4b02      	ldr	r3, [pc, #8]	; (b580c <sock_setsockopt+0xc>)
   b5804:	681b      	ldr	r3, [r3, #0]
   b5806:	699b      	ldr	r3, [r3, #24]
   b5808:	9301      	str	r3, [sp, #4]
   b580a:	bd08      	pop	{r3, pc}
   b580c:	00030238 	.word	0x00030238

000b5810 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5810:	b508      	push	{r3, lr}
   b5812:	4b02      	ldr	r3, [pc, #8]	; (b581c <sock_close+0xc>)
   b5814:	681b      	ldr	r3, [r3, #0]
   b5816:	69db      	ldr	r3, [r3, #28]
   b5818:	9301      	str	r3, [sp, #4]
   b581a:	bd08      	pop	{r3, pc}
   b581c:	00030238 	.word	0x00030238

000b5820 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b5820:	b508      	push	{r3, lr}
   b5822:	4b02      	ldr	r3, [pc, #8]	; (b582c <sock_recvfrom+0xc>)
   b5824:	681b      	ldr	r3, [r3, #0]
   b5826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5828:	9301      	str	r3, [sp, #4]
   b582a:	bd08      	pop	{r3, pc}
   b582c:	00030238 	.word	0x00030238

000b5830 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b5830:	b508      	push	{r3, lr}
   b5832:	4b02      	ldr	r3, [pc, #8]	; (b583c <sock_sendto+0xc>)
   b5834:	681b      	ldr	r3, [r3, #0]
   b5836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5838:	9301      	str	r3, [sp, #4]
   b583a:	bd08      	pop	{r3, pc}
   b583c:	00030238 	.word	0x00030238

000b5840 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5840:	b508      	push	{r3, lr}
   b5842:	4b02      	ldr	r3, [pc, #8]	; (b584c <sock_socket+0xc>)
   b5844:	681b      	ldr	r3, [r3, #0]
   b5846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5848:	9301      	str	r3, [sp, #4]
   b584a:	bd08      	pop	{r3, pc}
   b584c:	00030238 	.word	0x00030238

000b5850 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5850:	b508      	push	{r3, lr}
   b5852:	4b02      	ldr	r3, [pc, #8]	; (b585c <hal_spi_init+0xc>)
   b5854:	681b      	ldr	r3, [r3, #0]
   b5856:	69db      	ldr	r3, [r3, #28]
   b5858:	9301      	str	r3, [sp, #4]
   b585a:	bd08      	pop	{r3, pc}
   b585c:	00030230 	.word	0x00030230

000b5860 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5860:	b508      	push	{r3, lr}
   b5862:	4b02      	ldr	r3, [pc, #8]	; (b586c <hal_spi_is_enabled+0xc>)
   b5864:	681b      	ldr	r3, [r3, #0]
   b5866:	6a1b      	ldr	r3, [r3, #32]
   b5868:	9301      	str	r3, [sp, #4]
   b586a:	bd08      	pop	{r3, pc}
   b586c:	00030230 	.word	0x00030230

000b5870 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5870:	b508      	push	{r3, lr}
   b5872:	4b02      	ldr	r3, [pc, #8]	; (b587c <HAL_USB_USART_Init+0xc>)
   b5874:	681b      	ldr	r3, [r3, #0]
   b5876:	681b      	ldr	r3, [r3, #0]
   b5878:	9301      	str	r3, [sp, #4]
   b587a:	bd08      	pop	{r3, pc}
   b587c:	0003024c 	.word	0x0003024c

000b5880 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5880:	b508      	push	{r3, lr}
   b5882:	4b02      	ldr	r3, [pc, #8]	; (b588c <HAL_USB_USART_Available_Data+0xc>)
   b5884:	681b      	ldr	r3, [r3, #0]
   b5886:	691b      	ldr	r3, [r3, #16]
   b5888:	9301      	str	r3, [sp, #4]
   b588a:	bd08      	pop	{r3, pc}
   b588c:	0003024c 	.word	0x0003024c

000b5890 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5890:	b508      	push	{r3, lr}
   b5892:	4b02      	ldr	r3, [pc, #8]	; (b589c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5894:	681b      	ldr	r3, [r3, #0]
   b5896:	695b      	ldr	r3, [r3, #20]
   b5898:	9301      	str	r3, [sp, #4]
   b589a:	bd08      	pop	{r3, pc}
   b589c:	0003024c 	.word	0x0003024c

000b58a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b58a0:	b508      	push	{r3, lr}
   b58a2:	4b02      	ldr	r3, [pc, #8]	; (b58ac <HAL_USB_USART_Receive_Data+0xc>)
   b58a4:	681b      	ldr	r3, [r3, #0]
   b58a6:	699b      	ldr	r3, [r3, #24]
   b58a8:	9301      	str	r3, [sp, #4]
   b58aa:	bd08      	pop	{r3, pc}
   b58ac:	0003024c 	.word	0x0003024c

000b58b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b58b0:	b508      	push	{r3, lr}
   b58b2:	4b02      	ldr	r3, [pc, #8]	; (b58bc <HAL_USB_USART_Send_Data+0xc>)
   b58b4:	681b      	ldr	r3, [r3, #0]
   b58b6:	69db      	ldr	r3, [r3, #28]
   b58b8:	9301      	str	r3, [sp, #4]
   b58ba:	bd08      	pop	{r3, pc}
   b58bc:	0003024c 	.word	0x0003024c

000b58c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b58c0:	b508      	push	{r3, lr}
   b58c2:	4b02      	ldr	r3, [pc, #8]	; (b58cc <HAL_USB_USART_Flush_Data+0xc>)
   b58c4:	681b      	ldr	r3, [r3, #0]
   b58c6:	6a1b      	ldr	r3, [r3, #32]
   b58c8:	9301      	str	r3, [sp, #4]
   b58ca:	bd08      	pop	{r3, pc}
   b58cc:	0003024c 	.word	0x0003024c

000b58d0 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b58d0:	b508      	push	{r3, lr}
   b58d2:	4b02      	ldr	r3, [pc, #8]	; (b58dc <wlan_connected_info+0xc>)
   b58d4:	681b      	ldr	r3, [r3, #0]
   b58d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b58d8:	9301      	str	r3, [sp, #4]
   b58da:	bd08      	pop	{r3, pc}
   b58dc:	00030274 	.word	0x00030274

000b58e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b58e0:	b508      	push	{r3, lr}
   b58e2:	4b02      	ldr	r3, [pc, #8]	; (b58ec <panic_+0xc>)
   b58e4:	681b      	ldr	r3, [r3, #0]
   b58e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b58e8:	9301      	str	r3, [sp, #4]
   b58ea:	bd08      	pop	{r3, pc}
   b58ec:	00030260 	.word	0x00030260

000b58f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b58f0:	b508      	push	{r3, lr}
   b58f2:	4b02      	ldr	r3, [pc, #8]	; (b58fc <log_message+0xc>)
   b58f4:	681b      	ldr	r3, [r3, #0]
   b58f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b58f8:	9301      	str	r3, [sp, #4]
   b58fa:	bd08      	pop	{r3, pc}
   b58fc:	00030260 	.word	0x00030260

000b5900 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5900:	b508      	push	{r3, lr}
   b5902:	4b02      	ldr	r3, [pc, #8]	; (b590c <system_mode+0xc>)
   b5904:	681b      	ldr	r3, [r3, #0]
   b5906:	681b      	ldr	r3, [r3, #0]
   b5908:	9301      	str	r3, [sp, #4]
   b590a:	bd08      	pop	{r3, pc}
   b590c:	00030220 	.word	0x00030220

000b5910 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5910:	b508      	push	{r3, lr}
   b5912:	4b02      	ldr	r3, [pc, #8]	; (b591c <set_system_mode+0xc>)
   b5914:	681b      	ldr	r3, [r3, #0]
   b5916:	685b      	ldr	r3, [r3, #4]
   b5918:	9301      	str	r3, [sp, #4]
   b591a:	bd08      	pop	{r3, pc}
   b591c:	00030220 	.word	0x00030220

000b5920 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5920:	b508      	push	{r3, lr}
   b5922:	4b02      	ldr	r3, [pc, #8]	; (b592c <system_delay_ms+0xc>)
   b5924:	681b      	ldr	r3, [r3, #0]
   b5926:	695b      	ldr	r3, [r3, #20]
   b5928:	9301      	str	r3, [sp, #4]
   b592a:	bd08      	pop	{r3, pc}
   b592c:	00030220 	.word	0x00030220

000b5930 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5930:	b508      	push	{r3, lr}
   b5932:	4b02      	ldr	r3, [pc, #8]	; (b593c <system_thread_set_state+0xc>)
   b5934:	681b      	ldr	r3, [r3, #0]
   b5936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5938:	9301      	str	r3, [sp, #4]
   b593a:	bd08      	pop	{r3, pc}
   b593c:	00030220 	.word	0x00030220

000b5940 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5940:	b508      	push	{r3, lr}
   b5942:	4b02      	ldr	r3, [pc, #8]	; (b594c <application_thread_current+0xc>)
   b5944:	681b      	ldr	r3, [r3, #0]
   b5946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5948:	9301      	str	r3, [sp, #4]
   b594a:	bd08      	pop	{r3, pc}
   b594c:	00030220 	.word	0x00030220

000b5950 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5950:	b508      	push	{r3, lr}
   b5952:	4b02      	ldr	r3, [pc, #8]	; (b595c <application_thread_invoke+0xc>)
   b5954:	681b      	ldr	r3, [r3, #0]
   b5956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5958:	9301      	str	r3, [sp, #4]
   b595a:	bd08      	pop	{r3, pc}
   b595c:	00030220 	.word	0x00030220

000b5960 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5960:	b508      	push	{r3, lr}
   b5962:	4b02      	ldr	r3, [pc, #8]	; (b596c <system_thread_get_state+0xc>)
   b5964:	681b      	ldr	r3, [r3, #0]
   b5966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5968:	9301      	str	r3, [sp, #4]
   b596a:	bd08      	pop	{r3, pc}
   b596c:	00030220 	.word	0x00030220

000b5970 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5970:	b508      	push	{r3, lr}
   b5972:	4b03      	ldr	r3, [pc, #12]	; (b5980 <system_ctrl_set_app_request_handler+0x10>)
   b5974:	681b      	ldr	r3, [r3, #0]
   b5976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b597a:	9301      	str	r3, [sp, #4]
   b597c:	bd08      	pop	{r3, pc}
   b597e:	0000      	.short	0x0000
   b5980:	00030220 	.word	0x00030220

000b5984 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5984:	b508      	push	{r3, lr}
   b5986:	4b03      	ldr	r3, [pc, #12]	; (b5994 <system_ctrl_set_result+0x10>)
   b5988:	681b      	ldr	r3, [r3, #0]
   b598a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b598e:	9301      	str	r3, [sp, #4]
   b5990:	bd08      	pop	{r3, pc}
   b5992:	0000      	.short	0x0000
   b5994:	00030220 	.word	0x00030220

000b5998 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b02      	ldr	r3, [pc, #8]	; (b59a4 <network_connect+0xc>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	685b      	ldr	r3, [r3, #4]
   b59a0:	9301      	str	r3, [sp, #4]
   b59a2:	bd08      	pop	{r3, pc}
   b59a4:	00030240 	.word	0x00030240

000b59a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b59a8:	b508      	push	{r3, lr}
   b59aa:	4b02      	ldr	r3, [pc, #8]	; (b59b4 <network_connecting+0xc>)
   b59ac:	681b      	ldr	r3, [r3, #0]
   b59ae:	689b      	ldr	r3, [r3, #8]
   b59b0:	9301      	str	r3, [sp, #4]
   b59b2:	bd08      	pop	{r3, pc}
   b59b4:	00030240 	.word	0x00030240

000b59b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b59b8:	b508      	push	{r3, lr}
   b59ba:	4b02      	ldr	r3, [pc, #8]	; (b59c4 <network_disconnect+0xc>)
   b59bc:	681b      	ldr	r3, [r3, #0]
   b59be:	68db      	ldr	r3, [r3, #12]
   b59c0:	9301      	str	r3, [sp, #4]
   b59c2:	bd08      	pop	{r3, pc}
   b59c4:	00030240 	.word	0x00030240

000b59c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b59c8:	b508      	push	{r3, lr}
   b59ca:	4b02      	ldr	r3, [pc, #8]	; (b59d4 <network_ready+0xc>)
   b59cc:	681b      	ldr	r3, [r3, #0]
   b59ce:	691b      	ldr	r3, [r3, #16]
   b59d0:	9301      	str	r3, [sp, #4]
   b59d2:	bd08      	pop	{r3, pc}
   b59d4:	00030240 	.word	0x00030240

000b59d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b59d8:	b508      	push	{r3, lr}
   b59da:	4b02      	ldr	r3, [pc, #8]	; (b59e4 <network_on+0xc>)
   b59dc:	681b      	ldr	r3, [r3, #0]
   b59de:	695b      	ldr	r3, [r3, #20]
   b59e0:	9301      	str	r3, [sp, #4]
   b59e2:	bd08      	pop	{r3, pc}
   b59e4:	00030240 	.word	0x00030240

000b59e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b59e8:	b508      	push	{r3, lr}
   b59ea:	4b02      	ldr	r3, [pc, #8]	; (b59f4 <network_off+0xc>)
   b59ec:	681b      	ldr	r3, [r3, #0]
   b59ee:	699b      	ldr	r3, [r3, #24]
   b59f0:	9301      	str	r3, [sp, #4]
   b59f2:	bd08      	pop	{r3, pc}
   b59f4:	00030240 	.word	0x00030240

000b59f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b59f8:	b508      	push	{r3, lr}
   b59fa:	4b02      	ldr	r3, [pc, #8]	; (b5a04 <network_listen+0xc>)
   b59fc:	681b      	ldr	r3, [r3, #0]
   b59fe:	69db      	ldr	r3, [r3, #28]
   b5a00:	9301      	str	r3, [sp, #4]
   b5a02:	bd08      	pop	{r3, pc}
   b5a04:	00030240 	.word	0x00030240

000b5a08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5a08:	b508      	push	{r3, lr}
   b5a0a:	4b02      	ldr	r3, [pc, #8]	; (b5a14 <network_listening+0xc>)
   b5a0c:	681b      	ldr	r3, [r3, #0]
   b5a0e:	6a1b      	ldr	r3, [r3, #32]
   b5a10:	9301      	str	r3, [sp, #4]
   b5a12:	bd08      	pop	{r3, pc}
   b5a14:	00030240 	.word	0x00030240

000b5a18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5a18:	b508      	push	{r3, lr}
   b5a1a:	4b02      	ldr	r3, [pc, #8]	; (b5a24 <network_set_listen_timeout+0xc>)
   b5a1c:	681b      	ldr	r3, [r3, #0]
   b5a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5a20:	9301      	str	r3, [sp, #4]
   b5a22:	bd08      	pop	{r3, pc}
   b5a24:	00030240 	.word	0x00030240

000b5a28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5a28:	b508      	push	{r3, lr}
   b5a2a:	4b02      	ldr	r3, [pc, #8]	; (b5a34 <network_get_listen_timeout+0xc>)
   b5a2c:	681b      	ldr	r3, [r3, #0]
   b5a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a30:	9301      	str	r3, [sp, #4]
   b5a32:	bd08      	pop	{r3, pc}
   b5a34:	00030240 	.word	0x00030240

000b5a38 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5a38:	b508      	push	{r3, lr}
   b5a3a:	4b02      	ldr	r3, [pc, #8]	; (b5a44 <network_is_on+0xc>)
   b5a3c:	681b      	ldr	r3, [r3, #0]
   b5a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a40:	9301      	str	r3, [sp, #4]
   b5a42:	bd08      	pop	{r3, pc}
   b5a44:	00030240 	.word	0x00030240

000b5a48 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5a48:	b508      	push	{r3, lr}
   b5a4a:	4b02      	ldr	r3, [pc, #8]	; (b5a54 <network_is_off+0xc>)
   b5a4c:	681b      	ldr	r3, [r3, #0]
   b5a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a50:	9301      	str	r3, [sp, #4]
   b5a52:	bd08      	pop	{r3, pc}
   b5a54:	00030240 	.word	0x00030240

000b5a58 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5a58:	b508      	push	{r3, lr}
   b5a5a:	4b02      	ldr	r3, [pc, #8]	; (b5a64 <spark_process+0xc>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
   b5a5e:	689b      	ldr	r3, [r3, #8]
   b5a60:	9301      	str	r3, [sp, #4]
   b5a62:	bd08      	pop	{r3, pc}
   b5a64:	00030244 	.word	0x00030244

000b5a68 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5a68:	b508      	push	{r3, lr}
   b5a6a:	4b02      	ldr	r3, [pc, #8]	; (b5a74 <spark_cloud_flag_connected+0xc>)
   b5a6c:	681b      	ldr	r3, [r3, #0]
   b5a6e:	695b      	ldr	r3, [r3, #20]
   b5a70:	9301      	str	r3, [sp, #4]
   b5a72:	bd08      	pop	{r3, pc}
   b5a74:	00030244 	.word	0x00030244

000b5a78 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5a78:	b508      	push	{r3, lr}
   b5a7a:	4b02      	ldr	r3, [pc, #8]	; (b5a84 <spark_send_event+0xc>)
   b5a7c:	681b      	ldr	r3, [r3, #0]
   b5a7e:	6a1b      	ldr	r3, [r3, #32]
   b5a80:	9301      	str	r3, [sp, #4]
   b5a82:	bd08      	pop	{r3, pc}
   b5a84:	00030244 	.word	0x00030244

000b5a88 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5a88:	b508      	push	{r3, lr}
   b5a8a:	4b02      	ldr	r3, [pc, #8]	; (b5a94 <spark_subscribe+0xc>)
   b5a8c:	681b      	ldr	r3, [r3, #0]
   b5a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5a90:	9301      	str	r3, [sp, #4]
   b5a92:	bd08      	pop	{r3, pc}
   b5a94:	00030244 	.word	0x00030244

000b5a98 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5a98:	b508      	push	{r3, lr}
   b5a9a:	4b02      	ldr	r3, [pc, #8]	; (b5aa4 <spark_sync_time_pending+0xc>)
   b5a9c:	681b      	ldr	r3, [r3, #0]
   b5a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5aa0:	9301      	str	r3, [sp, #4]
   b5aa2:	bd08      	pop	{r3, pc}
   b5aa4:	00030244 	.word	0x00030244

000b5aa8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5aa8:	b508      	push	{r3, lr}
   b5aaa:	4b02      	ldr	r3, [pc, #8]	; (b5ab4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5aac:	681b      	ldr	r3, [r3, #0]
   b5aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5ab0:	9301      	str	r3, [sp, #4]
   b5ab2:	bd08      	pop	{r3, pc}
   b5ab4:	00030244 	.word	0x00030244

000b5ab8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5ab8:	b508      	push	{r3, lr}
   b5aba:	4b02      	ldr	r3, [pc, #8]	; (b5ac4 <malloc+0xc>)
   b5abc:	681b      	ldr	r3, [r3, #0]
   b5abe:	681b      	ldr	r3, [r3, #0]
   b5ac0:	9301      	str	r3, [sp, #4]
   b5ac2:	bd08      	pop	{r3, pc}
   b5ac4:	0003021c 	.word	0x0003021c

000b5ac8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5ac8:	b508      	push	{r3, lr}
   b5aca:	4b02      	ldr	r3, [pc, #8]	; (b5ad4 <free+0xc>)
   b5acc:	681b      	ldr	r3, [r3, #0]
   b5ace:	685b      	ldr	r3, [r3, #4]
   b5ad0:	9301      	str	r3, [sp, #4]
   b5ad2:	bd08      	pop	{r3, pc}
   b5ad4:	0003021c 	.word	0x0003021c

000b5ad8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5ad8:	b508      	push	{r3, lr}
   b5ada:	4b02      	ldr	r3, [pc, #8]	; (b5ae4 <realloc+0xc>)
   b5adc:	681b      	ldr	r3, [r3, #0]
   b5ade:	689b      	ldr	r3, [r3, #8]
   b5ae0:	9301      	str	r3, [sp, #4]
   b5ae2:	bd08      	pop	{r3, pc}
   b5ae4:	0003021c 	.word	0x0003021c

000b5ae8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b5ae8:	b508      	push	{r3, lr}
   b5aea:	4b02      	ldr	r3, [pc, #8]	; (b5af4 <sprintf+0xc>)
   b5aec:	681b      	ldr	r3, [r3, #0]
   b5aee:	68db      	ldr	r3, [r3, #12]
   b5af0:	9301      	str	r3, [sp, #4]
   b5af2:	bd08      	pop	{r3, pc}
   b5af4:	0003021c 	.word	0x0003021c

000b5af8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5af8:	b508      	push	{r3, lr}
   b5afa:	4b02      	ldr	r3, [pc, #8]	; (b5b04 <vsnprintf+0xc>)
   b5afc:	681b      	ldr	r3, [r3, #0]
   b5afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5b00:	9301      	str	r3, [sp, #4]
   b5b02:	bd08      	pop	{r3, pc}
   b5b04:	0003021c 	.word	0x0003021c

000b5b08 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5b08:	b508      	push	{r3, lr}
   b5b0a:	4b02      	ldr	r3, [pc, #8]	; (b5b14 <abort+0xc>)
   b5b0c:	681b      	ldr	r3, [r3, #0]
   b5b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b10:	9301      	str	r3, [sp, #4]
   b5b12:	bd08      	pop	{r3, pc}
   b5b14:	0003021c 	.word	0x0003021c

000b5b18 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5b18:	b508      	push	{r3, lr}
   b5b1a:	4b02      	ldr	r3, [pc, #8]	; (b5b24 <_malloc_r+0xc>)
   b5b1c:	681b      	ldr	r3, [r3, #0]
   b5b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b20:	9301      	str	r3, [sp, #4]
   b5b22:	bd08      	pop	{r3, pc}
   b5b24:	0003021c 	.word	0x0003021c

000b5b28 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5b28:	b508      	push	{r3, lr}
   b5b2a:	4b02      	ldr	r3, [pc, #8]	; (b5b34 <__errno+0xc>)
   b5b2c:	681b      	ldr	r3, [r3, #0]
   b5b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5b30:	9301      	str	r3, [sp, #4]
   b5b32:	bd08      	pop	{r3, pc}
   b5b34:	0003021c 	.word	0x0003021c

000b5b38 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <__assert_func+0xc>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b40:	9301      	str	r3, [sp, #4]
   b5b42:	bd08      	pop	{r3, pc}
   b5b44:	0003021c 	.word	0x0003021c

000b5b48 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5b48:	b508      	push	{r3, lr}
   b5b4a:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <newlib_impure_ptr_callback+0xc>)
   b5b4c:	681b      	ldr	r3, [r3, #0]
   b5b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b50:	9301      	str	r3, [sp, #4]
   b5b52:	bd08      	pop	{r3, pc}
   b5b54:	0003021c 	.word	0x0003021c

000b5b58 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5b58:	b508      	push	{r3, lr}
   b5b5a:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <localtime_r+0xc>)
   b5b5c:	681b      	ldr	r3, [r3, #0]
   b5b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5b60:	9301      	str	r3, [sp, #4]
   b5b62:	bd08      	pop	{r3, pc}
   b5b64:	0003021c 	.word	0x0003021c

000b5b68 <_ZN5spark13EthernetClass9listeningEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
<<<<<<< HEAD
   ba22a:	2200      	movs	r2, #0
   ba22c:	6840      	ldr	r0, [r0, #4]
   ba22e:	4611      	mov	r1, r2
   ba230:	f7fc bdd0 	b.w	b6dd4 <network_listening>

000ba234 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba234:	2200      	movs	r2, #0
   ba236:	6840      	ldr	r0, [r0, #4]
   ba238:	4611      	mov	r1, r2
   ba23a:	f7fc bddb 	b.w	b6df4 <network_get_listen_timeout>

000ba23e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba23e:	6840      	ldr	r0, [r0, #4]
   ba240:	2200      	movs	r2, #0
   ba242:	f7fc bdcf 	b.w	b6de4 <network_set_listen_timeout>

000ba246 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba246:	6840      	ldr	r0, [r0, #4]
   ba248:	2200      	movs	r2, #0
   ba24a:	f081 0101 	eor.w	r1, r1, #1
   ba24e:	f7fc bdb9 	b.w	b6dc4 <network_listen>

000ba252 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba252:	2300      	movs	r3, #0
   ba254:	6840      	ldr	r0, [r0, #4]
   ba256:	461a      	mov	r2, r3
   ba258:	4619      	mov	r1, r3
   ba25a:	f7fc bdab 	b.w	b6db4 <network_off>

000ba25e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba25e:	2300      	movs	r3, #0
   ba260:	6840      	ldr	r0, [r0, #4]
   ba262:	461a      	mov	r2, r3
   ba264:	4619      	mov	r1, r3
   ba266:	f7fc bd9d 	b.w	b6da4 <network_on>

000ba26a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba26a:	2200      	movs	r2, #0
   ba26c:	6840      	ldr	r0, [r0, #4]
   ba26e:	4611      	mov	r1, r2
   ba270:	f7fc bd80 	b.w	b6d74 <network_connecting>

000ba274 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba274:	6840      	ldr	r0, [r0, #4]
   ba276:	2200      	movs	r2, #0
   ba278:	2102      	movs	r1, #2
   ba27a:	f7fc bd83 	b.w	b6d84 <network_disconnect>

000ba27e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba27e:	2300      	movs	r3, #0
   ba280:	6840      	ldr	r0, [r0, #4]
   ba282:	461a      	mov	r2, r3
   ba284:	f7fc bd6e 	b.w	b6d64 <network_connect>

000ba288 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   ba288:	8983      	ldrh	r3, [r0, #12]
   ba28a:	b17b      	cbz	r3, ba2ac <_ZNK10WiFiSignal11getStrengthEv+0x24>
   ba28c:	6943      	ldr	r3, [r0, #20]
   ba28e:	2b00      	cmp	r3, #0
   ba290:	db0c      	blt.n	ba2ac <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   ba292:	ee07 3a90 	vmov	s15, r3
   ba296:	ed9f 7a07 	vldr	s14, [pc, #28]	; ba2b4 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   ba29a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba29e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba2a2:	eddf 7a05 	vldr	s15, [pc, #20]	; ba2b8 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   ba2a6:	ee20 0a27 	vmul.f32	s0, s0, s15
   ba2aa:	4770      	bx	lr
    }
    return -1.0f;
   ba2ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   ba2b0:	4770      	bx	lr
   ba2b2:	bf00      	nop
   ba2b4:	477fff00 	.word	0x477fff00
   ba2b8:	42c80000 	.word	0x42c80000

000ba2bc <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   ba2bc:	8983      	ldrh	r3, [r0, #12]
   ba2be:	b163      	cbz	r3, ba2da <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   ba2c0:	6903      	ldr	r3, [r0, #16]
   ba2c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   ba2c6:	d008      	beq.n	ba2da <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   ba2c8:	ee07 3a90 	vmov	s15, r3
   ba2cc:	ed9f 7a04 	vldr	s14, [pc, #16]	; ba2e0 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   ba2d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba2d4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba2d8:	4770      	bx	lr
    }
    return 0.0f;
   ba2da:	ed9f 0a02 	vldr	s0, [pc, #8]	; ba2e4 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   ba2de:	4770      	bx	lr
   ba2e0:	42c80000 	.word	0x42c80000
   ba2e4:	00000000 	.word	0x00000000

000ba2e8 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   ba2e8:	8983      	ldrh	r3, [r0, #12]
   ba2ea:	b17b      	cbz	r3, ba30c <_ZNK10WiFiSignal10getQualityEv+0x24>
   ba2ec:	6a03      	ldr	r3, [r0, #32]
   ba2ee:	2b00      	cmp	r3, #0
   ba2f0:	db0c      	blt.n	ba30c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   ba2f2:	ee07 3a90 	vmov	s15, r3
   ba2f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; ba314 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   ba2fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba2fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba302:	eddf 7a05 	vldr	s15, [pc, #20]	; ba318 <_ZNK10WiFiSignal10getQualityEv+0x30>
   ba306:	ee20 0a27 	vmul.f32	s0, s0, s15
   ba30a:	4770      	bx	lr
    }
    return -1.0f;
   ba30c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   ba310:	4770      	bx	lr
   ba312:	bf00      	nop
   ba314:	477fff00 	.word	0x477fff00
   ba318:	42c80000 	.word	0x42c80000

000ba31c <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   ba31c:	8983      	ldrh	r3, [r0, #12]
   ba31e:	b163      	cbz	r3, ba33a <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   ba320:	6983      	ldr	r3, [r0, #24]
   ba322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   ba326:	d008      	beq.n	ba33a <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   ba328:	ee07 3a90 	vmov	s15, r3
   ba32c:	ed9f 7a04 	vldr	s14, [pc, #16]	; ba340 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   ba330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba334:	ee87 0a87 	vdiv.f32	s0, s15, s14
   ba338:	4770      	bx	lr
    }
    return 0.0f;
   ba33a:	ed9f 0a02 	vldr	s0, [pc, #8]	; ba344 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   ba33e:	4770      	bx	lr
   ba340:	42c80000 	.word	0x42c80000
   ba344:	00000000 	.word	0x00000000

000ba348 <_ZNK10WiFiSignalcvaEv>:
}
   ba348:	f990 0004 	ldrsb.w	r0, [r0, #4]
   ba34c:	4770      	bx	lr

000ba34e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   ba34e:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   ba350:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   ba352:	4606      	mov	r6, r0
    inf_ = inf;
   ba354:	f100 050c 	add.w	r5, r0, #12
   ba358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba35a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba35c:	e894 0003 	ldmia.w	r4, {r0, r1}
   ba360:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   ba364:	6933      	ldr	r3, [r6, #16]
   ba366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   ba36a:	bf0e      	itee	eq
   ba36c:	2302      	moveq	r3, #2
   ba36e:	2264      	movne	r2, #100	; 0x64
   ba370:	fb93 f3f2 	sdivne	r3, r3, r2
   ba374:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   ba376:	69b3      	ldr	r3, [r6, #24]
   ba378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   ba37c:	bf0c      	ite	eq
   ba37e:	2300      	moveq	r3, #0
   ba380:	2264      	movne	r2, #100	; 0x64
}
   ba382:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   ba386:	bf18      	it	ne
   ba388:	fb93 f3f2 	sdivne	r3, r3, r2
   ba38c:	60b3      	str	r3, [r6, #8]
}
   ba38e:	bd70      	pop	{r4, r5, r6, pc}

000ba390 <_ZN5spark9WiFiClass4RSSIEv>:
=======
   b5b68:	2200      	movs	r2, #0
   b5b6a:	6840      	ldr	r0, [r0, #4]
   b5b6c:	4611      	mov	r1, r2
   b5b6e:	f7ff bf4b 	b.w	b5a08 <network_listening>

000b5b72 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b72:	2200      	movs	r2, #0
   b5b74:	6840      	ldr	r0, [r0, #4]
   b5b76:	4611      	mov	r1, r2
   b5b78:	f7ff bf56 	b.w	b5a28 <network_get_listen_timeout>

000b5b7c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b7c:	6840      	ldr	r0, [r0, #4]
   b5b7e:	2200      	movs	r2, #0
   b5b80:	f7ff bf4a 	b.w	b5a18 <network_set_listen_timeout>

000b5b84 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5b84:	6840      	ldr	r0, [r0, #4]
   b5b86:	2200      	movs	r2, #0
   b5b88:	f081 0101 	eor.w	r1, r1, #1
   b5b8c:	f7ff bf34 	b.w	b59f8 <network_listen>

000b5b90 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5b90:	2300      	movs	r3, #0
   b5b92:	6840      	ldr	r0, [r0, #4]
   b5b94:	461a      	mov	r2, r3
   b5b96:	4619      	mov	r1, r3
   b5b98:	f7ff bf26 	b.w	b59e8 <network_off>

000b5b9c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5b9c:	2300      	movs	r3, #0
   b5b9e:	6840      	ldr	r0, [r0, #4]
   b5ba0:	461a      	mov	r2, r3
   b5ba2:	4619      	mov	r1, r3
   b5ba4:	f7ff bf18 	b.w	b59d8 <network_on>

000b5ba8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5ba8:	2200      	movs	r2, #0
   b5baa:	6840      	ldr	r0, [r0, #4]
   b5bac:	4611      	mov	r1, r2
   b5bae:	f7ff bf0b 	b.w	b59c8 <network_ready>

000b5bb2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5bb2:	2200      	movs	r2, #0
   b5bb4:	6840      	ldr	r0, [r0, #4]
   b5bb6:	4611      	mov	r1, r2
   b5bb8:	f7ff bef6 	b.w	b59a8 <network_connecting>

000b5bbc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5bbc:	6840      	ldr	r0, [r0, #4]
   b5bbe:	2200      	movs	r2, #0
   b5bc0:	2102      	movs	r1, #2
   b5bc2:	f7ff bef9 	b.w	b59b8 <network_disconnect>

000b5bc6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5bc6:	2300      	movs	r3, #0
   b5bc8:	6840      	ldr	r0, [r0, #4]
   b5bca:	461a      	mov	r2, r3
   b5bcc:	f7ff bee4 	b.w	b5998 <network_connect>

000b5bd0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5bd0:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5bd2:	2203      	movs	r2, #3
   b5bd4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5bd6:	4a02      	ldr	r2, [pc, #8]	; (b5be0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5bd8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5bda:	4770      	bx	lr
   b5bdc:	2003e674 	.word	0x2003e674
   b5be0:	000bbe1c 	.word	0x000bbe1c

000b5be4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5be4:	b510      	push	{r4, lr}
   b5be6:	4604      	mov	r4, r0
   b5be8:	4608      	mov	r0, r1
{
    _spi = spi;
   b5bea:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5bec:	f7ff fe30 	bl	b5850 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5bf0:	2300      	movs	r3, #0
   b5bf2:	6063      	str	r3, [r4, #4]
}
   b5bf4:	4620      	mov	r0, r4
   b5bf6:	bd10      	pop	{r4, pc}

000b5bf8 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b5bf8:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b5bfa:	2420      	movs	r4, #32
{
   b5bfc:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b5bfe:	4622      	mov	r2, r4
   b5c00:	2100      	movs	r1, #0
   b5c02:	4668      	mov	r0, sp
   b5c04:	f003 fdbd 	bl	b9782 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b5c08:	2100      	movs	r1, #0
   b5c0a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b5c0c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b5c10:	f7ff fc7c 	bl	b550c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b5c14:	9801      	ldr	r0, [sp, #4]
   b5c16:	b008      	add	sp, #32
   b5c18:	bd10      	pop	{r4, pc}
	...

000b5c1c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5c1c:	4b05      	ldr	r3, [pc, #20]	; (b5c34 <_GLOBAL__sub_I_System+0x18>)
   b5c1e:	2202      	movs	r2, #2
   b5c20:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5c22:	4b05      	ldr	r3, [pc, #20]	; (b5c38 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5c24:	4a05      	ldr	r2, [pc, #20]	; (b5c3c <_GLOBAL__sub_I_System+0x20>)
   b5c26:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5c28:	2000      	movs	r0, #0
   b5c2a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5c2e:	f7ff be6f 	b.w	b5910 <set_system_mode>
   b5c32:	bf00      	nop
   b5c34:	2003e688 	.word	0x2003e688
   b5c38:	2003e67c 	.word	0x2003e67c
   b5c3c:	ffff0000 	.word	0xffff0000

000b5c40 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5c40:	b510      	push	{r4, lr}
   b5c42:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5c44:	f003 fe13 	bl	b986e <strlen>
   b5c48:	3801      	subs	r0, #1
   b5c4a:	1823      	adds	r3, r4, r0
   b5c4c:	4620      	mov	r0, r4
	while(i<j){
   b5c4e:	4283      	cmp	r3, r0
   b5c50:	d906      	bls.n	b5c60 <_Z11str_reversePc+0x20>
		c = *i;
   b5c52:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5c54:	7819      	ldrb	r1, [r3, #0]
   b5c56:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5c5a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5c5e:	e7f6      	b.n	b5c4e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5c60:	bd10      	pop	{r4, pc}

000b5c62 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5c62:	b570      	push	{r4, r5, r6, lr}
   b5c64:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5c66:	1e91      	subs	r1, r2, #2
   b5c68:	2922      	cmp	r1, #34	; 0x22
   b5c6a:	d81d      	bhi.n	b5ca8 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5c6c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5c6e:	b930      	cbnz	r0, b5c7e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5c70:	4423      	add	r3, r4
            *ptr++ = '0';
   b5c72:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5c74:	429d      	cmp	r5, r3
   b5c76:	d210      	bcs.n	b5c9a <ultoa+0x38>
            *ptr++ = '0';
   b5c78:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5c7c:	e7fa      	b.n	b5c74 <ultoa+0x12>
            result.quot = a/radix;
   b5c7e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5c82:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5c86:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5c88:	2809      	cmp	r0, #9
                *ptr += '0';
   b5c8a:	bf94      	ite	ls
   b5c8c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5c8e:	3157      	addhi	r1, #87	; 0x57
   b5c90:	b2c9      	uxtb	r1, r1
   b5c92:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5c96:	4630      	mov	r0, r6
	while(a){
   b5c98:	e7e9      	b.n	b5c6e <ultoa+0xc>

	*ptr = '\0';
   b5c9a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5c9c:	4620      	mov	r0, r4
	*ptr = '\0';
   b5c9e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5ca0:	f7ff ffce 	bl	b5c40 <_Z11str_reversePc>
	return buffer;
   b5ca4:	4620      	mov	r0, r4
}
   b5ca6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5ca8:	2000      	movs	r0, #0
   b5caa:	e7fc      	b.n	b5ca6 <ultoa+0x44>

000b5cac <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5cac:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5cae:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5cb0:	460c      	mov	r4, r1
   b5cb2:	4615      	mov	r5, r2
	if(a<0){
   b5cb4:	da0e      	bge.n	b5cd4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5cba:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5cbe:	bf14      	ite	ne
   b5cc0:	4258      	negne	r0, r3
   b5cc2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5cc4:	2301      	movs	r3, #1
		*buffer = '-';
   b5cc6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5cc8:	462a      	mov	r2, r5
   b5cca:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5ccc:	f7ff ffc9 	bl	b5c62 <ultoa>
	}
	return buffer;
}
   b5cd0:	4620      	mov	r0, r4
   b5cd2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5cd4:	2301      	movs	r3, #1
   b5cd6:	e7f9      	b.n	b5ccc <itoa+0x20>

000b5cd8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b5cd8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b5cda:	6804      	ldr	r4, [r0, #0]
   b5cdc:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b5cde:	46a4      	mov	ip, r4
    }
   b5ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b5ce4:	4760      	bx	ip

000b5ce6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b5ce6:	6803      	ldr	r3, [r0, #0]
   b5ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5cea:	4718      	bx	r3

000b5cec <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b5cec:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b5cee:	4770      	bx	lr

000b5cf0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b5cf0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b5cf2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b5cf4:	1a10      	subs	r0, r2, r0
   b5cf6:	4770      	bx	lr

000b5cf8 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b5cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5cfa:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b5cfc:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5cfe:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5d00:	4b0c      	ldr	r3, [pc, #48]	; (b5d34 <_ZN3UDP9endPacketEv+0x3c>)
   b5d02:	9302      	str	r3, [sp, #8]
   b5d04:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b5d08:	4604      	mov	r4, r0
   b5d0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5d0c:	ad03      	add	r5, sp, #12
   b5d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5d10:	6833      	ldr	r3, [r6, #0]
   b5d12:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5d14:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b5d16:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b5d18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5d1a:	9300      	str	r3, [sp, #0]
   b5d1c:	4620      	mov	r0, r4
   b5d1e:	ab02      	add	r3, sp, #8
   b5d20:	47b8      	blx	r7
    flush(); // wait for send to complete
   b5d22:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b5d24:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b5d26:	69db      	ldr	r3, [r3, #28]
   b5d28:	4620      	mov	r0, r4
   b5d2a:	4798      	blx	r3
    return result;
}
   b5d2c:	4628      	mov	r0, r5
   b5d2e:	b009      	add	sp, #36	; 0x24
   b5d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5d32:	bf00      	nop
   b5d34:	000bc0e4 	.word	0x000bc0e4

000b5d38 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b5d38:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b5d3a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b5d3c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b5d40:	68db      	ldr	r3, [r3, #12]
   b5d42:	2201      	movs	r2, #1
   b5d44:	f10d 0107 	add.w	r1, sp, #7
   b5d48:	4798      	blx	r3
}
   b5d4a:	b003      	add	sp, #12
   b5d4c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d50 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b5d50:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b5d52:	6803      	ldr	r3, [r0, #0]
   b5d54:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b5d56:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b5d58:	4798      	blx	r3
   b5d5a:	b128      	cbz	r0, b5d68 <_ZN3UDP4readEv+0x18>
   b5d5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5d5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b5d60:	1c59      	adds	r1, r3, #1
   b5d62:	86e1      	strh	r1, [r4, #54]	; 0x36
   b5d64:	5cd0      	ldrb	r0, [r2, r3]
}
   b5d66:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b5d68:	f04f 30ff 	mov.w	r0, #4294967295
   b5d6c:	e7fb      	b.n	b5d66 <_ZN3UDP4readEv+0x16>

000b5d6e <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b5d6e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b5d70:	6803      	ldr	r3, [r0, #0]
   b5d72:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b5d74:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b5d76:	4798      	blx	r3
   b5d78:	b118      	cbz	r0, b5d82 <_ZN3UDP4peekEv+0x14>
   b5d7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5d7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b5d7e:	5cd0      	ldrb	r0, [r2, r3]
}
   b5d80:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b5d82:	f04f 30ff 	mov.w	r0, #4294967295
   b5d86:	e7fb      	b.n	b5d80 <_ZN3UDP4peekEv+0x12>

000b5d88 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b5d88:	4770      	bx	lr

000b5d8a <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b5d8a:	b410      	push	{r4}
   b5d8c:	4603      	mov	r3, r0
   b5d8e:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b5d90:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b5d92:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b5d94:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b5d96:	6803      	ldr	r3, [r0, #0]
   b5d98:	1a52      	subs	r2, r2, r1
   b5d9a:	68db      	ldr	r3, [r3, #12]
   b5d9c:	4421      	add	r1, r4
}
   b5d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b5da2:	4718      	bx	r3

000b5da4 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b5da4:	f1a0 0010 	sub.w	r0, r0, #16
   b5da8:	f7ff bfef 	b.w	b5d8a <_ZNK3UDP7printToER5Print>

000b5dac <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5dac:	b570      	push	{r4, r5, r6, lr}
    stop();
   b5dae:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5db0:	b08c      	sub	sp, #48	; 0x30
    stop();
   b5db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b5db4:	4604      	mov	r4, r0
   b5db6:	460e      	mov	r6, r1
   b5db8:	4615      	mov	r5, r2
    stop();
   b5dba:	4798      	blx	r3
    const int one = 1;
   b5dbc:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b5dbe:	221c      	movs	r2, #28
   b5dc0:	2100      	movs	r1, #0
   b5dc2:	a805      	add	r0, sp, #20
    const int one = 1;
   b5dc4:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b5dc6:	f003 fcdc 	bl	b9782 <memset>
    saddr.sin6_len = sizeof(saddr);
   b5dca:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b5dce:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b5dd0:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b5dd4:	f7ff fc8c 	bl	b56f0 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5dd8:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b5dda:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5dde:	2102      	movs	r1, #2
   b5de0:	200a      	movs	r0, #10
   b5de2:	f7ff fd2d 	bl	b5840 <sock_socket>
    if (_sock < 0) {
   b5de6:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b5de8:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b5dea:	db25      	blt.n	b5e38 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b5dec:	2204      	movs	r2, #4
   b5dee:	9200      	str	r2, [sp, #0]
   b5df0:	ab02      	add	r3, sp, #8
   b5df2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5df6:	f7ff fd03 	bl	b5800 <sock_setsockopt>
   b5dfa:	b9e8      	cbnz	r0, b5e38 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b5dfc:	b195      	cbz	r5, b5e24 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b5dfe:	9003      	str	r0, [sp, #12]
   b5e00:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b5e04:	a903      	add	r1, sp, #12
   b5e06:	b2e8      	uxtb	r0, r5
   b5e08:	f7ff fb50 	bl	b54ac <if_index_to_name>
   b5e0c:	b9a0      	cbnz	r0, b5e38 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b5e0e:	2306      	movs	r3, #6
   b5e10:	9300      	str	r3, [sp, #0]
   b5e12:	6960      	ldr	r0, [r4, #20]
   b5e14:	ab03      	add	r3, sp, #12
   b5e16:	f241 020b 	movw	r2, #4107	; 0x100b
   b5e1a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5e1e:	f7ff fcef 	bl	b5800 <sock_setsockopt>
   b5e22:	b948      	cbnz	r0, b5e38 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b5e24:	6960      	ldr	r0, [r4, #20]
   b5e26:	221c      	movs	r2, #28
   b5e28:	a905      	add	r1, sp, #20
   b5e2a:	f7ff fce1 	bl	b57f0 <sock_bind>
   b5e2e:	b918      	cbnz	r0, b5e38 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b5e30:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b5e32:	2001      	movs	r0, #1
}
   b5e34:	b00c      	add	sp, #48	; 0x30
   b5e36:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b5e38:	6823      	ldr	r3, [r4, #0]
   b5e3a:	4620      	mov	r0, r4
   b5e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e3e:	4798      	blx	r3
   b5e40:	2000      	movs	r0, #0
   b5e42:	e7f7      	b.n	b5e34 <_ZN3UDP5beginEtm+0x88>

000b5e44 <_ZN3UDP4stopEv>:
void UDP::stop() {
   b5e44:	b510      	push	{r4, lr}
   b5e46:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b5e48:	6940      	ldr	r0, [r0, #20]
   b5e4a:	2800      	cmp	r0, #0
   b5e4c:	db01      	blt.n	b5e52 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b5e4e:	f7ff fcdf 	bl	b5810 <sock_close>
    _sock = -1;
   b5e52:	f04f 33ff 	mov.w	r3, #4294967295
   b5e56:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b5e58:	2300      	movs	r3, #0
   b5e5a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b5e5c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b5e5e:	bd10      	pop	{r4, pc}

000b5e60 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b5e60:	b570      	push	{r4, r5, r6, lr}
   b5e62:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b5e64:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b5e66:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b5e68:	b168      	cbz	r0, b5e86 <_ZN3UDP5writeEPKhj+0x26>
   b5e6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b5e6c:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b5e6e:	4294      	cmp	r4, r2
   b5e70:	bf28      	it	cs
   b5e72:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b5e74:	4622      	mov	r2, r4
   b5e76:	4430      	add	r0, r6
   b5e78:	f003 fc5b 	bl	b9732 <memcpy>
    _offset += size;
   b5e7c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b5e7e:	4423      	add	r3, r4
   b5e80:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b5e82:	4620      	mov	r0, r4
   b5e84:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b5e86:	4604      	mov	r4, r0
   b5e88:	e7f1      	b.n	b5e6e <_ZN3UDP5writeEPKhj+0xe>

000b5e8a <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b5e8a:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b5e8c:	6803      	ldr	r3, [r0, #0]
   b5e8e:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b5e90:	4604      	mov	r4, r0
   b5e92:	460f      	mov	r7, r1
   b5e94:	4616      	mov	r6, r2
    if (available()) {
   b5e96:	4798      	blx	r3
   b5e98:	b190      	cbz	r0, b5ec0 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b5e9a:	6823      	ldr	r3, [r4, #0]
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	691b      	ldr	r3, [r3, #16]
   b5ea0:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b5ea2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5ea4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b5ea6:	4286      	cmp	r6, r0
   b5ea8:	bfa8      	it	ge
   b5eaa:	4606      	movge	r6, r0
   b5eac:	4419      	add	r1, r3
   b5eae:	4632      	mov	r2, r6
   b5eb0:	4638      	mov	r0, r7
   b5eb2:	f003 fc3e 	bl	b9732 <memcpy>
        _offset += read;
   b5eb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b5eb8:	4433      	add	r3, r6
   b5eba:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b5ebc:	4630      	mov	r0, r6
   b5ebe:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b5ec0:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b5ec4:	e7fa      	b.n	b5ebc <_ZN3UDP4readEPhj+0x32>

000b5ec6 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b5ec6:	b530      	push	{r4, r5, lr}
   b5ec8:	b087      	sub	sp, #28
   b5eca:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5ecc:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5ece:	4668      	mov	r0, sp
   b5ed0:	f002 fa48 	bl	b8364 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ed6:	3404      	adds	r4, #4
   b5ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5eda:	682b      	ldr	r3, [r5, #0]
   b5edc:	7023      	strb	r3, [r4, #0]
    }
   b5ede:	b007      	add	sp, #28
   b5ee0:	bd30      	pop	{r4, r5, pc}
	...

000b5ee4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ee6:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5ee8:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5eea:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5eec:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b5eee:	4a0a      	ldr	r2, [pc, #40]	; (b5f18 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b5ef0:	9202      	str	r2, [sp, #8]
   b5ef2:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b5ef4:	468c      	mov	ip, r1
   b5ef6:	4606      	mov	r6, r0
   b5ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5efa:	ad03      	add	r5, sp, #12
   b5efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5efe:	6823      	ldr	r3, [r4, #0]
   b5f00:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b5f02:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b5f06:	9300      	str	r3, [sp, #0]
   b5f08:	4672      	mov	r2, lr
   b5f0a:	ab02      	add	r3, sp, #8
   b5f0c:	4661      	mov	r1, ip
   b5f0e:	4630      	mov	r0, r6
   b5f10:	47b8      	blx	r7
    }
   b5f12:	b009      	add	sp, #36	; 0x24
   b5f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5f16:	bf00      	nop
   b5f18:	000bc0e4 	.word	0x000bc0e4

000b5f1c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b5f1c:	b570      	push	{r4, r5, r6, lr}
   b5f1e:	4604      	mov	r4, r0
   b5f20:	4b05      	ldr	r3, [pc, #20]	; (b5f38 <_ZN3UDP8remoteIPEv+0x1c>)
   b5f22:	f844 3b04 	str.w	r3, [r4], #4
   b5f26:	f101 0520 	add.w	r5, r1, #32
   b5f2a:	4606      	mov	r6, r0
   b5f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f30:	682b      	ldr	r3, [r5, #0]
   b5f32:	7023      	strb	r3, [r4, #0]
   b5f34:	4630      	mov	r0, r6
   b5f36:	bd70      	pop	{r4, r5, r6, pc}
   b5f38:	000bc0e4 	.word	0x000bc0e4

000b5f3c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b5f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b5f3e:	7843      	ldrb	r3, [r0, #1]
   b5f40:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b5f42:	b08d      	sub	sp, #52	; 0x34
   b5f44:	4605      	mov	r5, r0
   b5f46:	460c      	mov	r4, r1
   b5f48:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b5f4a:	d104      	bne.n	b5f56 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5f4c:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5f4e:	4620      	mov	r0, r4
   b5f50:	f7ff ffb9 	bl	b5ec6 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b5f54:	e022      	b.n	b5f9c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b5f56:	2b0a      	cmp	r3, #10
   b5f58:	d125      	bne.n	b5fa6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b5f5a:	2211      	movs	r2, #17
   b5f5c:	2100      	movs	r1, #0
   b5f5e:	a801      	add	r0, sp, #4
   b5f60:	f003 fc0f 	bl	b9782 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5f64:	68ab      	ldr	r3, [r5, #8]
   b5f66:	b303      	cbz	r3, b5faa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5f68:	f105 0308 	add.w	r3, r5, #8
   b5f6c:	ae01      	add	r6, sp, #4
   b5f6e:	f105 0c18 	add.w	ip, r5, #24
   b5f72:	6818      	ldr	r0, [r3, #0]
   b5f74:	6859      	ldr	r1, [r3, #4]
   b5f76:	4632      	mov	r2, r6
   b5f78:	c203      	stmia	r2!, {r0, r1}
   b5f7a:	3308      	adds	r3, #8
   b5f7c:	4563      	cmp	r3, ip
   b5f7e:	4616      	mov	r6, r2
   b5f80:	d1f7      	bne.n	b5f72 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b5f82:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5f84:	a901      	add	r1, sp, #4
   b5f86:	a806      	add	r0, sp, #24
   b5f88:	ae07      	add	r6, sp, #28
            a.v = 6;
   b5f8a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5f8e:	f002 f9ab 	bl	b82e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5f92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5f94:	3404      	adds	r4, #4
   b5f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f98:	6833      	ldr	r3, [r6, #0]
   b5f9a:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b5f9c:	b11f      	cbz	r7, b5fa6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b5f9e:	8868      	ldrh	r0, [r5, #2]
   b5fa0:	f7ff fb9e 	bl	b56e0 <inet_ntohs>
   b5fa4:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b5fa6:	b00d      	add	sp, #52	; 0x34
   b5fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5faa:	68eb      	ldr	r3, [r5, #12]
   b5fac:	2b00      	cmp	r3, #0
   b5fae:	d1db      	bne.n	b5f68 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b5fb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5fb4:	692e      	ldr	r6, [r5, #16]
   b5fb6:	f7ff fb8b 	bl	b56d0 <inet_htonl>
   b5fba:	4286      	cmp	r6, r0
   b5fbc:	d1d4      	bne.n	b5f68 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b5fbe:	f105 0114 	add.w	r1, r5, #20
   b5fc2:	e7c4      	b.n	b5f4e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b5fc4 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b5fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5fc8:	4617      	mov	r7, r2
   b5fca:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b5fcc:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b5fce:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5fd0:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b5fd2:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5fd4:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b5fd6:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b5fd8:	f7ff fa48 	bl	b546c <netdb_getaddrinfo>
   b5fdc:	1e04      	subs	r4, r0, #0
   b5fde:	db20      	blt.n	b6022 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b5fe0:	9b01      	ldr	r3, [sp, #4]
   b5fe2:	b32b      	cbz	r3, b6030 <_ZN3UDP11beginPacketEPKct+0x6c>
   b5fe4:	695b      	ldr	r3, [r3, #20]
   b5fe6:	b31b      	cbz	r3, b6030 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b5fe8:	a802      	add	r0, sp, #8
   b5fea:	f002 f96f 	bl	b82cc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5fee:	9b01      	ldr	r3, [sp, #4]
   b5ff0:	2200      	movs	r2, #0
   b5ff2:	6958      	ldr	r0, [r3, #20]
   b5ff4:	a902      	add	r1, sp, #8
   b5ff6:	f7ff ffa1 	bl	b5f3c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b5ffa:	a802      	add	r0, sp, #8
   b5ffc:	f002 f98e 	bl	b831c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6000:	b1b0      	cbz	r0, b6030 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b6002:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6004:	ad03      	add	r5, sp, #12
   b6006:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b600a:	4b0b      	ldr	r3, [pc, #44]	; (b6038 <_ZN3UDP11beginPacketEPKct+0x74>)
   b600c:	9308      	str	r3, [sp, #32]
   b600e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6010:	ac09      	add	r4, sp, #36	; 0x24
   b6012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6014:	682b      	ldr	r3, [r5, #0]
   b6016:	7023      	strb	r3, [r4, #0]
   b6018:	463a      	mov	r2, r7
   b601a:	a908      	add	r1, sp, #32
   b601c:	4630      	mov	r0, r6
   b601e:	47c0      	blx	r8
   b6020:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b6022:	9801      	ldr	r0, [sp, #4]
   b6024:	f7ff fa1a 	bl	b545c <netdb_freeaddrinfo>
}
   b6028:	4620      	mov	r0, r4
   b602a:	b00e      	add	sp, #56	; 0x38
   b602c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b6030:	f04f 34ff 	mov.w	r4, #4294967295
   b6034:	e7f5      	b.n	b6022 <_ZN3UDP11beginPacketEPKct+0x5e>
   b6036:	bf00      	nop
   b6038:	000bc0e4 	.word	0x000bc0e4

000b603c <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b603c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b6040:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b6044:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b6048:	b090      	sub	sp, #64	; 0x40
   b604a:	4605      	mov	r5, r0
   b604c:	460e      	mov	r6, r1
   b604e:	4690      	mov	r8, r2
   b6050:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b6052:	db3c      	blt.n	b60ce <_ZN3UDP13receivePacketEPhjm+0x92>
   b6054:	2900      	cmp	r1, #0
   b6056:	d03a      	beq.n	b60ce <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b6058:	f04f 0a1c 	mov.w	sl, #28
   b605c:	af09      	add	r7, sp, #36	; 0x24
   b605e:	4652      	mov	r2, sl
   b6060:	2100      	movs	r1, #0
   b6062:	4638      	mov	r0, r7
   b6064:	f003 fb8d 	bl	b9782 <memset>
        socklen_t slen = sizeof(saddr);
   b6068:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b606c:	b1dc      	cbz	r4, b60a6 <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b606e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6072:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b6076:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b607a:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b607c:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b607e:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b6080:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b6084:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6086:	9300      	str	r3, [sp, #0]
   b6088:	f241 0206 	movw	r2, #4102	; 0x1006
   b608c:	446b      	add	r3, sp
   b608e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6092:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b6094:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6096:	f7ff fbb3 	bl	b5800 <sock_setsockopt>
            if (ret) {
   b609a:	4604      	mov	r4, r0
   b609c:	b120      	cbz	r0, b60a8 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b609e:	4620      	mov	r0, r4
   b60a0:	b010      	add	sp, #64	; 0x40
   b60a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b60a6:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b60a8:	ab03      	add	r3, sp, #12
   b60aa:	e9cd 7300 	strd	r7, r3, [sp]
   b60ae:	6968      	ldr	r0, [r5, #20]
   b60b0:	4623      	mov	r3, r4
   b60b2:	4642      	mov	r2, r8
   b60b4:	4631      	mov	r1, r6
   b60b6:	f7ff fbb3 	bl	b5820 <sock_recvfrom>
        if (ret >= 0) {
   b60ba:	1e04      	subs	r4, r0, #0
   b60bc:	dbef      	blt.n	b609e <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b60be:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b60c2:	f105 011c 	add.w	r1, r5, #28
   b60c6:	4638      	mov	r0, r7
   b60c8:	f7ff ff38 	bl	b5f3c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b60cc:	e7e7      	b.n	b609e <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b60ce:	f04f 34ff 	mov.w	r4, #4294967295
   b60d2:	e7e4      	b.n	b609e <_ZN3UDP13receivePacketEPhjm+0x62>

000b60d4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b60d4:	b538      	push	{r3, r4, r5, lr}
   b60d6:	4605      	mov	r5, r0
   b60d8:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b60da:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b60dc:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b60de:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b60e0:	d110      	bne.n	b6104 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b60e2:	f640 231c 	movw	r3, #2588	; 0xa1c
   b60e6:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b60e8:	f7ff fb02 	bl	b56f0 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b60ec:	3408      	adds	r4, #8
   b60ee:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b60f0:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b60f4:	3514      	adds	r5, #20
   b60f6:	f853 2b04 	ldr.w	r2, [r3], #4
   b60fa:	f844 2b04 	str.w	r2, [r4], #4
   b60fe:	42ab      	cmp	r3, r5
   b6100:	d1f9      	bne.n	b60f6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b6102:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b6104:	2b04      	cmp	r3, #4
   b6106:	d1fc      	bne.n	b6102 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b6108:	f44f 7304 	mov.w	r3, #528	; 0x210
   b610c:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b610e:	f7ff faef 	bl	b56f0 <inet_htons>
   b6112:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b6114:	6868      	ldr	r0, [r5, #4]
   b6116:	f7ff fadb 	bl	b56d0 <inet_htonl>
   b611a:	6060      	str	r0, [r4, #4]
}
   b611c:	e7f1      	b.n	b6102 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b611e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b611e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6122:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b6124:	af03      	add	r7, sp, #12
   b6126:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b612a:	4698      	mov	r8, r3
   b612c:	4604      	mov	r4, r0
   b612e:	460d      	mov	r5, r1
   b6130:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b6132:	2100      	movs	r1, #0
   b6134:	464a      	mov	r2, r9
   b6136:	4638      	mov	r0, r7
   b6138:	f003 fb23 	bl	b9782 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b613c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b6140:	463a      	mov	r2, r7
   b6142:	4640      	mov	r0, r8
   b6144:	f7ff ffc6 	bl	b60d4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b6148:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b614c:	b153      	cbz	r3, b6164 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b614e:	e9cd 7900 	strd	r7, r9, [sp]
   b6152:	6960      	ldr	r0, [r4, #20]
   b6154:	2300      	movs	r3, #0
   b6156:	4632      	mov	r2, r6
   b6158:	4629      	mov	r1, r5
   b615a:	f7ff fb69 	bl	b5830 <sock_sendto>
}
   b615e:	b00b      	add	sp, #44	; 0x2c
   b6160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b6164:	f04f 30ff 	mov.w	r0, #4294967295
   b6168:	e7f9      	b.n	b615e <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000b616c <_ZN3UDPC1Ev>:
UDP::UDP()
   b616c:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b616e:	2500      	movs	r5, #0
   b6170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6174:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b6178:	4b0b      	ldr	r3, [pc, #44]	; (b61a8 <_ZN3UDPC1Ev+0x3c>)
   b617a:	f103 0208 	add.w	r2, r3, #8
   b617e:	336c      	adds	r3, #108	; 0x6c
   b6180:	6103      	str	r3, [r0, #16]
   b6182:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b6186:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b6188:	6002      	str	r2, [r0, #0]
   b618a:	6143      	str	r3, [r0, #20]
   b618c:	301c      	adds	r0, #28
   b618e:	f002 f89d 	bl	b82cc <_ZN9IPAddressC1Ev>
   b6192:	f44f 7300 	mov.w	r3, #512	; 0x200
   b6196:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b619a:	86e5      	strh	r5, [r4, #54]	; 0x36
   b619c:	8725      	strh	r5, [r4, #56]	; 0x38
   b619e:	63e5      	str	r5, [r4, #60]	; 0x3c
   b61a0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b61a4:	4620      	mov	r0, r4
   b61a6:	bd38      	pop	{r3, r4, r5, pc}
   b61a8:	000bbe50 	.word	0x000bbe50

000b61ac <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b61ac:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b61ae:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b61b2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b61b4:	b123      	cbz	r3, b61c0 <_ZN3UDP13releaseBufferEv+0x14>
   b61b6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b61b8:	b110      	cbz	r0, b61c0 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b61ba:	2101      	movs	r1, #1
   b61bc:	f7fd ff6f 	bl	b409e <_ZdlPvj>
    _buffer = NULL;
   b61c0:	2300      	movs	r3, #0
   b61c2:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b61c4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b61c8:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b61ca:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b61cc:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b61ce:	bd10      	pop	{r4, pc}

000b61d0 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b61d0:	b570      	push	{r4, r5, r6, lr}
   b61d2:	4604      	mov	r4, r0
   b61d4:	4616      	mov	r6, r2
   b61d6:	460d      	mov	r5, r1
    releaseBuffer();
   b61d8:	f7ff ffe8 	bl	b61ac <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b61dc:	2300      	movs	r3, #0
    _buffer = buffer;
   b61de:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b61e0:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b61e2:	b12e      	cbz	r6, b61f0 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b61e4:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b61e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b61e8:	3800      	subs	r0, #0
   b61ea:	bf18      	it	ne
   b61ec:	2001      	movne	r0, #1
   b61ee:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b61f0:	2d00      	cmp	r5, #0
   b61f2:	d0f8      	beq.n	b61e6 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b61f4:	4628      	mov	r0, r5
   b61f6:	f7fd ff50 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b61fa:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b61fc:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b61fe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b6202:	2800      	cmp	r0, #0
   b6204:	d0ef      	beq.n	b61e6 <_ZN3UDP9setBufferEjPh+0x16>
   b6206:	e7ed      	b.n	b61e4 <_ZN3UDP9setBufferEjPh+0x14>

000b6208 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b6208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b620a:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b620c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b620e:	4605      	mov	r5, r0
   b6210:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b6212:	b91a      	cbnz	r2, b621c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b6214:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b6216:	b109      	cbz	r1, b621c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b6218:	f7ff ffda 	bl	b61d0 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b621c:	3404      	adds	r4, #4
   b621e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6220:	f105 0620 	add.w	r6, r5, #32
   b6224:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6226:	6823      	ldr	r3, [r4, #0]
   b6228:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b622a:	2300      	movs	r3, #0
}
   b622c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b622e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b6230:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b6232:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b6234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6236 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b6236:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b6238:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b623a:	4604      	mov	r4, r0
   b623c:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b623e:	b92a      	cbnz	r2, b624c <_ZN3UDP11parsePacketEm+0x16>
   b6240:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b6242:	b119      	cbz	r1, b624c <_ZN3UDP11parsePacketEm+0x16>
   b6244:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b6246:	f7ff ffc3 	bl	b61d0 <_ZN3UDP9setBufferEjPh>
   b624a:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b624c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b624e:	2200      	movs	r2, #0
   b6250:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b6252:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b6254:	b141      	cbz	r1, b6268 <_ZN3UDP11parsePacketEm+0x32>
   b6256:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b6258:	b132      	cbz	r2, b6268 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b625a:	6820      	ldr	r0, [r4, #0]
   b625c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b625e:	4620      	mov	r0, r4
   b6260:	47a8      	blx	r5
        if (result > 0) {
   b6262:	2800      	cmp	r0, #0
            _total = result;
   b6264:	bfc8      	it	gt
   b6266:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b6268:	6823      	ldr	r3, [r4, #0]
   b626a:	691b      	ldr	r3, [r3, #16]
   b626c:	4620      	mov	r0, r4
}
   b626e:	b003      	add	sp, #12
   b6270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b6274:	4718      	bx	r3
	...

000b6278 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b6278:	b510      	push	{r4, lr}
   b627a:	4b07      	ldr	r3, [pc, #28]	; (b6298 <_ZN3UDPD1Ev+0x20>)
   b627c:	f103 0208 	add.w	r2, r3, #8
   b6280:	336c      	adds	r3, #108	; 0x6c
   b6282:	4604      	mov	r4, r0
   b6284:	6002      	str	r2, [r0, #0]
   b6286:	6103      	str	r3, [r0, #16]
   b6288:	f7ff fddc 	bl	b5e44 <_ZN3UDP4stopEv>
   b628c:	4620      	mov	r0, r4
   b628e:	f7ff ff8d 	bl	b61ac <_ZN3UDP13releaseBufferEv>
   b6292:	4620      	mov	r0, r4
   b6294:	bd10      	pop	{r4, pc}
   b6296:	bf00      	nop
   b6298:	000bbe50 	.word	0x000bbe50

000b629c <_ZN3UDPD0Ev>:
   b629c:	b510      	push	{r4, lr}
   b629e:	4604      	mov	r4, r0
   b62a0:	f7ff ffea 	bl	b6278 <_ZN3UDPD1Ev>
   b62a4:	4620      	mov	r0, r4
   b62a6:	214c      	movs	r1, #76	; 0x4c
   b62a8:	f7fd fef9 	bl	b409e <_ZdlPvj>
   b62ac:	4620      	mov	r0, r4
   b62ae:	bd10      	pop	{r4, pc}

000b62b0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b62b0:	b510      	push	{r4, lr}
   b62b2:	4604      	mov	r4, r0
{
	free(buffer);
   b62b4:	6800      	ldr	r0, [r0, #0]
   b62b6:	f7ff fc07 	bl	b5ac8 <free>
}
   b62ba:	4620      	mov	r0, r4
   b62bc:	bd10      	pop	{r4, pc}

000b62be <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b62be:	b510      	push	{r4, lr}
   b62c0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b62c2:	6800      	ldr	r0, [r0, #0]
   b62c4:	b108      	cbz	r0, b62ca <_ZN6String10invalidateEv+0xc>
   b62c6:	f7ff fbff 	bl	b5ac8 <free>
	buffer = NULL;
   b62ca:	2300      	movs	r3, #0
	capacity = len = 0;
   b62cc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b62d0:	6023      	str	r3, [r4, #0]
}
   b62d2:	bd10      	pop	{r4, pc}

000b62d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b62d4:	b538      	push	{r3, r4, r5, lr}
   b62d6:	4604      	mov	r4, r0
   b62d8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b62da:	6800      	ldr	r0, [r0, #0]
   b62dc:	3101      	adds	r1, #1
   b62de:	f7ff fbfb 	bl	b5ad8 <realloc>
	if (newbuffer) {
   b62e2:	b110      	cbz	r0, b62ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b62e4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b62e8:	2001      	movs	r0, #1
	}
	return 0;
}
   b62ea:	bd38      	pop	{r3, r4, r5, pc}

000b62ec <_ZN6String7reserveEj>:
{
   b62ec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b62ee:	6803      	ldr	r3, [r0, #0]
{
   b62f0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b62f2:	b123      	cbz	r3, b62fe <_ZN6String7reserveEj+0x12>
   b62f4:	6843      	ldr	r3, [r0, #4]
   b62f6:	428b      	cmp	r3, r1
   b62f8:	d301      	bcc.n	b62fe <_ZN6String7reserveEj+0x12>
   b62fa:	2001      	movs	r0, #1
}
   b62fc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b62fe:	4620      	mov	r0, r4
   b6300:	f7ff ffe8 	bl	b62d4 <_ZN6String12changeBufferEj>
   b6304:	2800      	cmp	r0, #0
   b6306:	d0f9      	beq.n	b62fc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6308:	68a3      	ldr	r3, [r4, #8]
   b630a:	2b00      	cmp	r3, #0
   b630c:	d1f5      	bne.n	b62fa <_ZN6String7reserveEj+0xe>
   b630e:	6822      	ldr	r2, [r4, #0]
   b6310:	7013      	strb	r3, [r2, #0]
   b6312:	e7f2      	b.n	b62fa <_ZN6String7reserveEj+0xe>

000b6314 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6314:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6316:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6318:	4611      	mov	r1, r2
   b631a:	9201      	str	r2, [sp, #4]
{
   b631c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b631e:	f7ff ffe5 	bl	b62ec <_ZN6String7reserveEj>
   b6322:	9a01      	ldr	r2, [sp, #4]
   b6324:	b928      	cbnz	r0, b6332 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6326:	4620      	mov	r0, r4
   b6328:	f7ff ffc9 	bl	b62be <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b632c:	4620      	mov	r0, r4
   b632e:	b003      	add	sp, #12
   b6330:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6332:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6334:	4629      	mov	r1, r5
   b6336:	6820      	ldr	r0, [r4, #0]
   b6338:	f003 f9fb 	bl	b9732 <memcpy>
	buffer[len] = 0;
   b633c:	6822      	ldr	r2, [r4, #0]
   b633e:	68a3      	ldr	r3, [r4, #8]
   b6340:	2100      	movs	r1, #0
   b6342:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6344:	e7f2      	b.n	b632c <_ZN6String4copyEPKcj+0x18>

000b6346 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6346:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6348:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b634a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b634e:	4604      	mov	r4, r0
	len = 0;
   b6350:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6352:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6354:	b141      	cbz	r1, b6368 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6356:	4608      	mov	r0, r1
   b6358:	9101      	str	r1, [sp, #4]
   b635a:	f003 fa88 	bl	b986e <strlen>
   b635e:	9901      	ldr	r1, [sp, #4]
   b6360:	4602      	mov	r2, r0
   b6362:	4620      	mov	r0, r4
   b6364:	f7ff ffd6 	bl	b6314 <_ZN6String4copyEPKcj>
}
   b6368:	4620      	mov	r0, r4
   b636a:	b002      	add	sp, #8
   b636c:	bd10      	pop	{r4, pc}

000b636e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b636e:	b538      	push	{r3, r4, r5, lr}
   b6370:	4605      	mov	r5, r0
	if (buffer) {
   b6372:	6800      	ldr	r0, [r0, #0]
{
   b6374:	460c      	mov	r4, r1
	if (buffer) {
   b6376:	b168      	cbz	r0, b6394 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6378:	686a      	ldr	r2, [r5, #4]
   b637a:	688b      	ldr	r3, [r1, #8]
   b637c:	429a      	cmp	r2, r3
   b637e:	d307      	bcc.n	b6390 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6380:	6809      	ldr	r1, [r1, #0]
   b6382:	f003 fa4e 	bl	b9822 <strcpy>
			len = rhs.len;
   b6386:	68a3      	ldr	r3, [r4, #8]
   b6388:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b638a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b638c:	60a3      	str	r3, [r4, #8]
}
   b638e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6390:	f7ff fb9a 	bl	b5ac8 <free>
	buffer = rhs.buffer;
   b6394:	6823      	ldr	r3, [r4, #0]
   b6396:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6398:	6863      	ldr	r3, [r4, #4]
   b639a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b639c:	68a3      	ldr	r3, [r4, #8]
   b639e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b63a0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b63a2:	e9c4 3300 	strd	r3, r3, [r4]
   b63a6:	e7f1      	b.n	b638c <_ZN6String4moveERS_+0x1e>

000b63a8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b63a8:	4288      	cmp	r0, r1
{
   b63aa:	b510      	push	{r4, lr}
   b63ac:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b63ae:	d005      	beq.n	b63bc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b63b0:	680b      	ldr	r3, [r1, #0]
   b63b2:	b12b      	cbz	r3, b63c0 <_ZN6StringaSERKS_+0x18>
   b63b4:	688a      	ldr	r2, [r1, #8]
   b63b6:	4619      	mov	r1, r3
   b63b8:	f7ff ffac 	bl	b6314 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b63bc:	4620      	mov	r0, r4
   b63be:	bd10      	pop	{r4, pc}
	else invalidate();
   b63c0:	f7ff ff7d 	bl	b62be <_ZN6String10invalidateEv>
   b63c4:	e7fa      	b.n	b63bc <_ZN6StringaSERKS_+0x14>

000b63c6 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b63c6:	b510      	push	{r4, lr}
	buffer = NULL;
   b63c8:	2300      	movs	r3, #0
String::String(const String &value)
   b63ca:	4604      	mov	r4, r0
	capacity = 0;
   b63cc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b63d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b63d2:	7303      	strb	r3, [r0, #12]
	*this = value;
   b63d4:	f7ff ffe8 	bl	b63a8 <_ZN6StringaSERKS_>
}
   b63d8:	4620      	mov	r0, r4
   b63da:	bd10      	pop	{r4, pc}

000b63dc <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b63dc:	4288      	cmp	r0, r1
{
   b63de:	b510      	push	{r4, lr}
   b63e0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b63e2:	d001      	beq.n	b63e8 <_ZN6StringaSEOS_+0xc>
   b63e4:	f7ff ffc3 	bl	b636e <_ZN6String4moveERS_>
	return *this;
}
   b63e8:	4620      	mov	r0, r4
   b63ea:	bd10      	pop	{r4, pc}

000b63ec <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b63ec:	b513      	push	{r0, r1, r4, lr}
   b63ee:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b63f0:	b159      	cbz	r1, b640a <_ZN6StringaSEPKc+0x1e>
   b63f2:	4608      	mov	r0, r1
   b63f4:	9101      	str	r1, [sp, #4]
   b63f6:	f003 fa3a 	bl	b986e <strlen>
   b63fa:	9901      	ldr	r1, [sp, #4]
   b63fc:	4602      	mov	r2, r0
   b63fe:	4620      	mov	r0, r4
   b6400:	f7ff ff88 	bl	b6314 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6404:	4620      	mov	r0, r4
   b6406:	b002      	add	sp, #8
   b6408:	bd10      	pop	{r4, pc}
	else invalidate();
   b640a:	f7ff ff58 	bl	b62be <_ZN6String10invalidateEv>
   b640e:	e7f9      	b.n	b6404 <_ZN6StringaSEPKc+0x18>

000b6410 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6410:	b510      	push	{r4, lr}
   b6412:	4604      	mov	r4, r0
   b6414:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6416:	2300      	movs	r3, #0
	capacity = 0;
   b6418:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b641c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b641e:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6420:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6422:	a901      	add	r1, sp, #4
   b6424:	f7ff fc42 	bl	b5cac <itoa>
	*this = buf;
   b6428:	a901      	add	r1, sp, #4
   b642a:	4620      	mov	r0, r4
   b642c:	f7ff ffde 	bl	b63ec <_ZN6StringaSEPKc>
}
   b6430:	4620      	mov	r0, r4
   b6432:	b00a      	add	sp, #40	; 0x28
   b6434:	bd10      	pop	{r4, pc}

000b6436 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6436:	b570      	push	{r4, r5, r6, lr}
   b6438:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b643a:	460e      	mov	r6, r1
   b643c:	b909      	cbnz	r1, b6442 <_ZN6String6concatEPKcj+0xc>
   b643e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6440:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6442:	b16a      	cbz	r2, b6460 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6444:	6884      	ldr	r4, [r0, #8]
   b6446:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6448:	4621      	mov	r1, r4
   b644a:	f7ff ff4f 	bl	b62ec <_ZN6String7reserveEj>
   b644e:	2800      	cmp	r0, #0
   b6450:	d0f5      	beq.n	b643e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6452:	6828      	ldr	r0, [r5, #0]
   b6454:	68ab      	ldr	r3, [r5, #8]
   b6456:	4631      	mov	r1, r6
   b6458:	4418      	add	r0, r3
   b645a:	f003 f9e2 	bl	b9822 <strcpy>
	len = newlen;
   b645e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6460:	2001      	movs	r0, #1
   b6462:	e7ed      	b.n	b6440 <_ZN6String6concatEPKcj+0xa>

000b6464 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b6464:	688a      	ldr	r2, [r1, #8]
   b6466:	6809      	ldr	r1, [r1, #0]
   b6468:	f7ff bfe5 	b.w	b6436 <_ZN6String6concatEPKcj>

000b646c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b646c:	b513      	push	{r0, r1, r4, lr}
   b646e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b6470:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6472:	b151      	cbz	r1, b648a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6474:	9101      	str	r1, [sp, #4]
   b6476:	f003 f9fa 	bl	b986e <strlen>
   b647a:	9901      	ldr	r1, [sp, #4]
   b647c:	4602      	mov	r2, r0
   b647e:	4620      	mov	r0, r4
}
   b6480:	b002      	add	sp, #8
   b6482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6486:	f7ff bfd6 	b.w	b6436 <_ZN6String6concatEPKcj>
}
   b648a:	b002      	add	sp, #8
   b648c:	bd10      	pop	{r4, pc}
	...

000b6490 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6490:	b40e      	push	{r1, r2, r3}
   b6492:	b570      	push	{r4, r5, r6, lr}
   b6494:	b087      	sub	sp, #28
   b6496:	ad0b      	add	r5, sp, #44	; 0x2c
   b6498:	4604      	mov	r4, r0
   b649a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b649e:	9201      	str	r2, [sp, #4]
   b64a0:	462b      	mov	r3, r5
   b64a2:	2105      	movs	r1, #5
   b64a4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b64a6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b64a8:	f7ff fb26 	bl	b5af8 <vsnprintf>
    va_end(marker);

    String result;
   b64ac:	490b      	ldr	r1, [pc, #44]	; (b64dc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b64ae:	4606      	mov	r6, r0
    String result;
   b64b0:	4620      	mov	r0, r4
   b64b2:	f7ff ff48 	bl	b6346 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b64b6:	4631      	mov	r1, r6
   b64b8:	4620      	mov	r0, r4
   b64ba:	f7ff ff17 	bl	b62ec <_ZN6String7reserveEj>
    if (result.buffer) {
   b64be:	6820      	ldr	r0, [r4, #0]
   b64c0:	b130      	cbz	r0, b64d0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b64c2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b64c4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b64c6:	462b      	mov	r3, r5
   b64c8:	1c71      	adds	r1, r6, #1
   b64ca:	f7ff fb15 	bl	b5af8 <vsnprintf>
        va_end(marker);
        result.len = n;
   b64ce:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b64d0:	4620      	mov	r0, r4
   b64d2:	b007      	add	sp, #28
   b64d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b64d8:	b003      	add	sp, #12
   b64da:	4770      	bx	lr
   b64dc:	000bbc7e 	.word	0x000bbc7e

000b64e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b64e0:	4770      	bx	lr

000b64e2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b64e2:	4770      	bx	lr

000b64e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b64e4:	4770      	bx	lr

000b64e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b64e6:	4770      	bx	lr

000b64e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b64e8:	4b06      	ldr	r3, [pc, #24]	; (b6504 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b64ea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b64ec:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b64ee:	f100 040c 	add.w	r4, r0, #12
	    ||
   b64f2:	d005      	beq.n	b6500 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b64f4:	4608      	mov	r0, r1
   b64f6:	f002 fb25 	bl	b8b44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b64fa:	2800      	cmp	r0, #0
   b64fc:	bf08      	it	eq
   b64fe:	2400      	moveq	r4, #0
      }
   b6500:	4620      	mov	r0, r4
   b6502:	bd10      	pop	{r4, pc}
   b6504:	000bc060 	.word	0x000bc060

000b6508 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6508:	4b06      	ldr	r3, [pc, #24]	; (b6524 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b650a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b650c:	b510      	push	{r4, lr}
   b650e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6512:	d005      	beq.n	b6520 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6514:	4608      	mov	r0, r1
   b6516:	f002 fb15 	bl	b8b44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b651a:	2800      	cmp	r0, #0
   b651c:	bf08      	it	eq
   b651e:	2400      	moveq	r4, #0
      }
   b6520:	4620      	mov	r0, r4
   b6522:	bd10      	pop	{r4, pc}
   b6524:	000bc060 	.word	0x000bc060

000b6528 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6528:	4b06      	ldr	r3, [pc, #24]	; (b6544 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b652a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b652c:	b510      	push	{r4, lr}
   b652e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6532:	d005      	beq.n	b6540 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6534:	4608      	mov	r0, r1
   b6536:	f002 fb05 	bl	b8b44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b653a:	2800      	cmp	r0, #0
   b653c:	bf08      	it	eq
   b653e:	2400      	moveq	r4, #0
      }
   b6540:	4620      	mov	r0, r4
   b6542:	bd10      	pop	{r4, pc}
   b6544:	000bc060 	.word	0x000bc060

000b6548 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6548:	b510      	push	{r4, lr}
   b654a:	2168      	movs	r1, #104	; 0x68
   b654c:	4604      	mov	r4, r0
   b654e:	f7fd fda6 	bl	b409e <_ZdlPvj>
   b6552:	4620      	mov	r0, r4
   b6554:	bd10      	pop	{r4, pc}

000b6556 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6556:	b510      	push	{r4, lr}
   b6558:	2128      	movs	r1, #40	; 0x28
   b655a:	4604      	mov	r4, r0
   b655c:	f7fd fd9f 	bl	b409e <_ZdlPvj>
   b6560:	4620      	mov	r0, r4
   b6562:	bd10      	pop	{r4, pc}

000b6564 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6564:	b510      	push	{r4, lr}
   b6566:	2130      	movs	r1, #48	; 0x30
   b6568:	4604      	mov	r4, r0
   b656a:	f7fd fd98 	bl	b409e <_ZdlPvj>
   b656e:	4620      	mov	r0, r4
   b6570:	bd10      	pop	{r4, pc}

000b6572 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6572:	2168      	movs	r1, #104	; 0x68
   b6574:	f7fd bd93 	b.w	b409e <_ZdlPvj>

000b6578 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6578:	2128      	movs	r1, #40	; 0x28
   b657a:	f7fd bd90 	b.w	b409e <_ZdlPvj>

000b657e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b657e:	2130      	movs	r1, #48	; 0x30
   b6580:	f7fd bd8d 	b.w	b409e <_ZdlPvj>

000b6584 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6584:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6586:	2500      	movs	r5, #0
   b6588:	1cec      	adds	r4, r5, #3
   b658a:	428c      	cmp	r4, r1
   b658c:	d80d      	bhi.n	b65aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b658e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6590:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6592:	5d87      	ldrb	r7, [r0, r6]
   b6594:	4297      	cmp	r7, r2
   b6596:	d105      	bne.n	b65a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6598:	4426      	add	r6, r4
   b659a:	42b1      	cmp	r1, r6
   b659c:	d305      	bcc.n	b65aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b659e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b65a0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b65a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b65a4:	3401      	adds	r4, #1
   b65a6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b65a8:	e7ee      	b.n	b6588 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b65aa:	2000      	movs	r0, #0
   b65ac:	e7f9      	b.n	b65a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b65b0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b65b0:	4a02      	ldr	r2, [pc, #8]	; (b65bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b65b2:	4903      	ldr	r1, [pc, #12]	; (b65c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b65b4:	200a      	movs	r0, #10
   b65b6:	f7ff b993 	b.w	b58e0 <panic_>
   b65ba:	bf00      	nop
   b65bc:	000b54cd 	.word	0x000b54cd
   b65c0:	000bbec0 	.word	0x000bbec0

000b65c4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b65c4:	4603      	mov	r3, r0
   b65c6:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	e9d3 2100 	ldrd	r2, r1, [r3]
   b65ce:	4710      	bx	r2

000b65d0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b65d0:	b430      	push	{r4, r5}
   b65d2:	460d      	mov	r5, r1
   b65d4:	4611      	mov	r1, r2
   b65d6:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b65d8:	6803      	ldr	r3, [r0, #0]
   b65da:	6809      	ldr	r1, [r1, #0]
   b65dc:	6828      	ldr	r0, [r5, #0]
   b65de:	e9d3 4300 	ldrd	r4, r3, [r3]
   b65e2:	46a4      	mov	ip, r4
      }
   b65e4:	bc30      	pop	{r4, r5}
   b65e6:	4760      	bx	ip

000b65e8 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b65e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b65ea:	b538      	push	{r3, r4, r5, lr}
   b65ec:	4604      	mov	r4, r0
	switch (__op)
   b65ee:	d102      	bne.n	b65f6 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b65f0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b65f2:	6023      	str	r3, [r4, #0]
	}
   b65f4:	e003      	b.n	b65fe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b65f6:	2a02      	cmp	r2, #2
   b65f8:	d003      	beq.n	b6602 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b65fa:	2a03      	cmp	r2, #3
   b65fc:	d00d      	beq.n	b661a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b65fe:	2000      	movs	r0, #0
   b6600:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6602:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6604:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6606:	f7fd fd46 	bl	b4096 <_Znwj>
   b660a:	4603      	mov	r3, r0
   b660c:	2800      	cmp	r0, #0
   b660e:	d0f0      	beq.n	b65f2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6610:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6614:	e883 0003 	stmia.w	r3, {r0, r1}
   b6618:	e7eb      	b.n	b65f2 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b661a:	6800      	ldr	r0, [r0, #0]
   b661c:	2800      	cmp	r0, #0
   b661e:	d0ee      	beq.n	b65fe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6620:	2108      	movs	r1, #8
   b6622:	f7fd fd3c 	bl	b409e <_ZdlPvj>
   b6626:	e7ea      	b.n	b65fe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6628 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6628:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b662a:	b538      	push	{r3, r4, r5, lr}
   b662c:	4604      	mov	r4, r0
	switch (__op)
   b662e:	d102      	bne.n	b6636 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6630:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6632:	6023      	str	r3, [r4, #0]
	}
   b6634:	e003      	b.n	b663e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6636:	2a02      	cmp	r2, #2
   b6638:	d003      	beq.n	b6642 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b663a:	2a03      	cmp	r2, #3
   b663c:	d00d      	beq.n	b665a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b663e:	2000      	movs	r0, #0
   b6640:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6642:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6644:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6646:	f7fd fd26 	bl	b4096 <_Znwj>
   b664a:	4603      	mov	r3, r0
   b664c:	2800      	cmp	r0, #0
   b664e:	d0f0      	beq.n	b6632 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6650:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6654:	e883 0003 	stmia.w	r3, {r0, r1}
   b6658:	e7eb      	b.n	b6632 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b665a:	6800      	ldr	r0, [r0, #0]
   b665c:	2800      	cmp	r0, #0
   b665e:	d0ee      	beq.n	b663e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6660:	2108      	movs	r1, #8
   b6662:	f7fd fd1c 	bl	b409e <_ZdlPvj>
   b6666:	e7ea      	b.n	b663e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6668 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6668:	b510      	push	{r4, lr}
   b666a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b666c:	3058      	adds	r0, #88	; 0x58
   b666e:	f7fd feb3 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6672:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b667a:	f7ff be19 	b.w	b62b0 <_ZN6StringD1Ev>

000b667e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b667e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6682:	b2da      	uxtb	r2, r3
   b6684:	2a09      	cmp	r2, #9
   b6686:	d801      	bhi.n	b668c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6688:	4618      	mov	r0, r3
   b668a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b668c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6690:	2b05      	cmp	r3, #5
   b6692:	d801      	bhi.n	b6698 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6694:	3857      	subs	r0, #87	; 0x57
   b6696:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6698:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b669c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b669e:	bf94      	ite	ls
   b66a0:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b66a2:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b66a6:	4770      	bx	lr

000b66a8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b66a8:	b510      	push	{r4, lr}
            locked_(false) {
   b66aa:	2300      	movs	r3, #0
   b66ac:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b66ae:	4b04      	ldr	r3, [pc, #16]	; (b66c0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b66b0:	4604      	mov	r4, r0
   b66b2:	6818      	ldr	r0, [r3, #0]
   b66b4:	f7fe ffec 	bl	b5690 <os_mutex_recursive_lock>
        locked_ = true;
   b66b8:	2301      	movs	r3, #1
   b66ba:	7023      	strb	r3, [r4, #0]
    }
   b66bc:	4620      	mov	r0, r4
   b66be:	bd10      	pop	{r4, pc}
   b66c0:	2003e694 	.word	0x2003e694

000b66c4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b66c4:	b510      	push	{r4, lr}
        if (locked_) {
   b66c6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b66c8:	4604      	mov	r4, r0
        if (locked_) {
   b66ca:	b11b      	cbz	r3, b66d4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b66cc:	4b02      	ldr	r3, [pc, #8]	; (b66d8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b66ce:	6818      	ldr	r0, [r3, #0]
   b66d0:	f7fe ffe6 	bl	b56a0 <os_mutex_recursive_unlock>
    }
   b66d4:	4620      	mov	r0, r4
   b66d6:	bd10      	pop	{r4, pc}
   b66d8:	2003e694 	.word	0x2003e694

000b66dc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b66dc:	b082      	sub	sp, #8
   b66de:	4603      	mov	r3, r0
    address_ = addr;
   b66e0:	6808      	ldr	r0, [r1, #0]
   b66e2:	6849      	ldr	r1, [r1, #4]
   b66e4:	466a      	mov	r2, sp
   b66e6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b66e8:	466a      	mov	r2, sp
   b66ea:	ca03      	ldmia	r2!, {r0, r1}
   b66ec:	6018      	str	r0, [r3, #0]
}
   b66ee:	4618      	mov	r0, r3
    address_ = addr.address_;
   b66f0:	6059      	str	r1, [r3, #4]
}
   b66f2:	b002      	add	sp, #8
   b66f4:	4770      	bx	lr

000b66f6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b66f6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b66f8:	7982      	ldrb	r2, [r0, #6]
   b66fa:	798b      	ldrb	r3, [r1, #6]
   b66fc:	429a      	cmp	r2, r3
   b66fe:	d106      	bne.n	b670e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6700:	2206      	movs	r2, #6
   b6702:	f003 f806 	bl	b9712 <memcmp>
   b6706:	fab0 f080 	clz	r0, r0
   b670a:	0940      	lsrs	r0, r0, #5
}
   b670c:	bd08      	pop	{r3, pc}
    return false;
   b670e:	2000      	movs	r0, #0
   b6710:	e7fc      	b.n	b670c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6712 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6712:	f04f 33ff 	mov.w	r3, #4294967295
   b6716:	6003      	str	r3, [r0, #0]
   b6718:	8083      	strh	r3, [r0, #4]
}
   b671a:	2000      	movs	r0, #0
   b671c:	4770      	bx	lr

000b671e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b671e:	b508      	push	{r3, lr}
   b6720:	4602      	mov	r2, r0
        : address_{} {
   b6722:	2100      	movs	r1, #0
   b6724:	6001      	str	r1, [r0, #0]
   b6726:	6041      	str	r1, [r0, #4]
    clear();
   b6728:	f7ff fff3 	bl	b6712 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b672c:	7191      	strb	r1, [r2, #6]
}
   b672e:	4610      	mov	r0, r2
   b6730:	bd08      	pop	{r3, pc}
	...

000b6734 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6734:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6736:	2301      	movs	r3, #1
   b6738:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b673a:	4b05      	ldr	r3, [pc, #20]	; (b6750 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b673c:	4602      	mov	r2, r0
   b673e:	f103 0110 	add.w	r1, r3, #16
   b6742:	f853 4b04 	ldr.w	r4, [r3], #4
   b6746:	f842 4b04 	str.w	r4, [r2], #4
   b674a:	428b      	cmp	r3, r1
   b674c:	d1f9      	bne.n	b6742 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b674e:	bd10      	pop	{r4, pc}
   b6750:	000bc06e 	.word	0x000bc06e

000b6754 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6754:	b510      	push	{r4, lr}
    if (uuid128) {
   b6756:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6758:	4604      	mov	r4, r0
    if (uuid128) {
   b675a:	b1b1      	cbz	r1, b678a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b675c:	2a01      	cmp	r2, #1
   b675e:	f101 0210 	add.w	r2, r1, #16
   b6762:	d10a      	bne.n	b677a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6764:	4601      	mov	r1, r0
   b6766:	f853 0b04 	ldr.w	r0, [r3], #4
   b676a:	f841 0b04 	str.w	r0, [r1], #4
   b676e:	4293      	cmp	r3, r2
   b6770:	d1f9      	bne.n	b6766 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6772:	2301      	movs	r3, #1
   b6774:	6123      	str	r3, [r4, #16]
}
   b6776:	4620      	mov	r0, r4
   b6778:	bd10      	pop	{r4, pc}
   b677a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b677c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6780:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6784:	429a      	cmp	r2, r3
   b6786:	d1f9      	bne.n	b677c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6788:	e7f3      	b.n	b6772 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b678a:	2210      	movs	r2, #16
   b678c:	f002 fff9 	bl	b9782 <memset>
   b6790:	e7f1      	b.n	b6776 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6792 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6792:	b538      	push	{r3, r4, r5, lr}
   b6794:	4604      	mov	r4, r0
   b6796:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6798:	461a      	mov	r2, r3
   b679a:	f7ff ffdb 	bl	b6754 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b679e:	81a5      	strh	r5, [r4, #12]
}
   b67a0:	4620      	mov	r0, r4
   b67a2:	bd38      	pop	{r3, r4, r5, pc}

000b67a4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b67a4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b67a6:	6902      	ldr	r2, [r0, #16]
   b67a8:	b922      	cbnz	r2, b67b4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b67aa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b67ac:	3800      	subs	r0, #0
   b67ae:	bf18      	it	ne
   b67b0:	2001      	movne	r0, #1
}
   b67b2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b67b4:	4902      	ldr	r1, [pc, #8]	; (b67c0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b67b6:	2210      	movs	r2, #16
   b67b8:	f002 ffab 	bl	b9712 <memcmp>
   b67bc:	e7f6      	b.n	b67ac <_ZNK8particle7BleUuid7isValidEv+0x8>
   b67be:	bf00      	nop
   b67c0:	000bc08e 	.word	0x000bc08e

000b67c4 <_ZNK8particle7BleUuid4typeEv>:
}
   b67c4:	6900      	ldr	r0, [r0, #16]
   b67c6:	4770      	bx	lr

000b67c8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b67c8:	b538      	push	{r3, r4, r5, lr}
   b67ca:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b67cc:	2214      	movs	r2, #20
   b67ce:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b67d0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b67d2:	f002 ffd6 	bl	b9782 <memset>
    if (type_ == BleUuidType::SHORT) {
   b67d6:	6923      	ldr	r3, [r4, #16]
   b67d8:	b91b      	cbnz	r3, b67e2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b67da:	89a3      	ldrh	r3, [r4, #12]
   b67dc:	802b      	strh	r3, [r5, #0]
}
   b67de:	4628      	mov	r0, r5
   b67e0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b67e2:	2301      	movs	r3, #1
   b67e4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b67e6:	4621      	mov	r1, r4
   b67e8:	462b      	mov	r3, r5
   b67ea:	f104 0210 	add.w	r2, r4, #16
   b67ee:	f851 0b04 	ldr.w	r0, [r1], #4
   b67f2:	f843 0b04 	str.w	r0, [r3], #4
   b67f6:	4291      	cmp	r1, r2
   b67f8:	d1f9      	bne.n	b67ee <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b67fa:	e7f0      	b.n	b67de <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b67fc <_ZNK8particle7BleUuid7shortedEv>:
}
   b67fc:	8980      	ldrh	r0, [r0, #12]
   b67fe:	4770      	bx	lr

000b6800 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6800:	4770      	bx	lr

000b6802 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6802:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6804:	6902      	ldr	r2, [r0, #16]
   b6806:	690b      	ldr	r3, [r1, #16]
   b6808:	429a      	cmp	r2, r3
   b680a:	d106      	bne.n	b681a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b680c:	2210      	movs	r2, #16
   b680e:	f002 ff80 	bl	b9712 <memcmp>
   b6812:	fab0 f080 	clz	r0, r0
   b6816:	0940      	lsrs	r0, r0, #5
}
   b6818:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b681a:	2000      	movs	r0, #0
   b681c:	e7fc      	b.n	b6818 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6820 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6820:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6822:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6826:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6828:	4b34      	ldr	r3, [pc, #208]	; (b68fc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b682a:	460c      	mov	r4, r1
   b682c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b682e:	4602      	mov	r2, r0
   b6830:	f103 0110 	add.w	r1, r3, #16
   b6834:	f853 0b04 	ldr.w	r0, [r3], #4
   b6838:	f842 0b04 	str.w	r0, [r2], #4
   b683c:	428b      	cmp	r3, r1
   b683e:	d1f9      	bne.n	b6834 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6840:	b344      	cbz	r4, b6894 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6842:	2124      	movs	r1, #36	; 0x24
   b6844:	4620      	mov	r0, r4
   b6846:	f003 f82e 	bl	b98a6 <strnlen>
   b684a:	2804      	cmp	r0, #4
   b684c:	f04f 0500 	mov.w	r5, #0
   b6850:	d123      	bne.n	b689a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6852:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6856:	af01      	add	r7, sp, #4
   b6858:	1ca5      	adds	r5, r4, #2
   b685a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b685c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6860:	f7ff ff0d 	bl	b667e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6864:	f1b0 0800 	subs.w	r8, r0, #0
   b6868:	db12      	blt.n	b6890 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b686a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b686e:	f7ff ff06 	bl	b667e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6872:	2800      	cmp	r0, #0
   b6874:	db0c      	blt.n	b6890 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6876:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6878:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b687c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b687e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6882:	d1eb      	bne.n	b685c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6884:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6888:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b688a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b688e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6890:	2300      	movs	r3, #0
   b6892:	6133      	str	r3, [r6, #16]
}
   b6894:	b002      	add	sp, #8
   b6896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b689a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b689e:	2124      	movs	r1, #36	; 0x24
   b68a0:	4620      	mov	r0, r4
   b68a2:	f003 f800 	bl	b98a6 <strnlen>
   b68a6:	42a8      	cmp	r0, r5
   b68a8:	d807      	bhi.n	b68ba <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b68aa:	4642      	mov	r2, r8
   b68ac:	2100      	movs	r1, #0
   b68ae:	4630      	mov	r0, r6
}
   b68b0:	b002      	add	sp, #8
   b68b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b68b6:	f002 bf64 	b.w	b9782 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b68ba:	f1b8 0f00 	cmp.w	r8, #0
   b68be:	d0e9      	beq.n	b6894 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b68c0:	5d60      	ldrb	r0, [r4, r5]
   b68c2:	f7ff fedc 	bl	b667e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b68c6:	0603      	lsls	r3, r0, #24
   b68c8:	d415      	bmi.n	b68f6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b68ca:	0100      	lsls	r0, r0, #4
   b68cc:	f108 38ff 	add.w	r8, r8, #4294967295
   b68d0:	b2c7      	uxtb	r7, r0
   b68d2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b68d6:	2124      	movs	r1, #36	; 0x24
   b68d8:	4620      	mov	r0, r4
   b68da:	f002 ffe4 	bl	b98a6 <strnlen>
   b68de:	3501      	adds	r5, #1
   b68e0:	42a8      	cmp	r0, r5
   b68e2:	d908      	bls.n	b68f6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b68e4:	5d60      	ldrb	r0, [r4, r5]
   b68e6:	f7ff feca 	bl	b667e <_ZN8particle11hexToNibbleEc>
   b68ea:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b68ec:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b68ee:	bfa4      	itt	ge
   b68f0:	4338      	orrge	r0, r7
   b68f2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b68f6:	3501      	adds	r5, #1
   b68f8:	e7d1      	b.n	b689e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b68fa:	bf00      	nop
   b68fc:	000bc06e 	.word	0x000bc06e

000b6900 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6900:	b513      	push	{r0, r1, r4, lr}
   b6902:	4604      	mov	r4, r0
   b6904:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6906:	f7ff ff15 	bl	b6734 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b690a:	4620      	mov	r0, r4
   b690c:	9901      	ldr	r1, [sp, #4]
   b690e:	f7ff ff87 	bl	b6820 <_ZN8particle7BleUuid9constructEPKc>
}
   b6912:	4620      	mov	r0, r4
   b6914:	b002      	add	sp, #8
   b6916:	bd10      	pop	{r4, pc}

000b6918 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6918:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b691a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b691e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6920:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6922:	8043      	strh	r3, [r0, #2]
   b6924:	220e      	movs	r2, #14
   b6926:	4629      	mov	r1, r5
   b6928:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b692a:	7105      	strb	r5, [r0, #4]
   b692c:	3006      	adds	r0, #6
   b692e:	f002 ff28 	bl	b9782 <memset>
   b6932:	f104 0014 	add.w	r0, r4, #20
   b6936:	f7ff fefd 	bl	b6734 <_ZN8particle7BleUuidC1Ev>
   b693a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b693e:	f7ff fef9 	bl	b6734 <_ZN8particle7BleUuidC1Ev>
   b6942:	4904      	ldr	r1, [pc, #16]	; (b6954 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6944:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6948:	f7ff fcfd 	bl	b6346 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b694c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b694e:	4620      	mov	r0, r4
   b6950:	bd38      	pop	{r3, r4, r5, pc}
   b6952:	bf00      	nop
   b6954:	000bbc7e 	.word	0x000bbc7e

000b6958 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6958:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b695a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b695e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6962:	4293      	cmp	r3, r2
   b6964:	4618      	mov	r0, r3
   b6966:	d006      	beq.n	b6976 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6968:	6804      	ldr	r4, [r0, #0]
   b696a:	8824      	ldrh	r4, [r4, #0]
   b696c:	428c      	cmp	r4, r1
   b696e:	f103 0308 	add.w	r3, r3, #8
   b6972:	d1f6      	bne.n	b6962 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6974:	bd10      	pop	{r4, pc}
        return nullptr;
   b6976:	2000      	movs	r0, #0
   b6978:	e7fc      	b.n	b6974 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b697c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b697c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b697e:	4606      	mov	r6, r0
   b6980:	b085      	sub	sp, #20
   b6982:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6984:	460d      	mov	r5, r1
   b6986:	2900      	cmp	r1, #0
   b6988:	d050      	beq.n	b6a2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b698a:	2a00      	cmp	r2, #0
   b698c:	d04e      	beq.n	b6a2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b698e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6990:	7823      	ldrb	r3, [r4, #0]
   b6992:	2af4      	cmp	r2, #244	; 0xf4
   b6994:	bf28      	it	cs
   b6996:	22f4      	movcs	r2, #244	; 0xf4
   b6998:	b343      	cbz	r3, b69ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b699a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b699c:	0798      	lsls	r0, r3, #30
   b699e:	d509      	bpl.n	b69b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b69a0:	89a0      	ldrh	r0, [r4, #12]
   b69a2:	9203      	str	r2, [sp, #12]
   b69a4:	2300      	movs	r3, #0
   b69a6:	f7fe fdf5 	bl	b5594 <hal_ble_gatt_server_set_characteristic_value>
   b69aa:	2800      	cmp	r0, #0
   b69ac:	9a03      	ldr	r2, [sp, #12]
   b69ae:	da03      	bge.n	b69b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b69b0:	b005      	add	sp, #20
   b69b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b69b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b69b8:	6834      	ldr	r4, [r6, #0]
   b69ba:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b69bc:	06d9      	lsls	r1, r3, #27
   b69be:	d509      	bpl.n	b69d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b69c0:	2f01      	cmp	r7, #1
   b69c2:	d007      	beq.n	b69d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b69c4:	89a0      	ldrh	r0, [r4, #12]
   b69c6:	2300      	movs	r3, #0
   b69c8:	4629      	mov	r1, r5
}
   b69ca:	b005      	add	sp, #20
   b69cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b69d0:	f7fe be12 	b.w	b55f8 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b69d4:	069b      	lsls	r3, r3, #26
   b69d6:	d5eb      	bpl.n	b69b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b69d8:	2f02      	cmp	r7, #2
   b69da:	d0e9      	beq.n	b69b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b69dc:	89a0      	ldrh	r0, [r4, #12]
   b69de:	2300      	movs	r3, #0
   b69e0:	4629      	mov	r1, r5
}
   b69e2:	b005      	add	sp, #20
   b69e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b69e8:	f7fe be10 	b.w	b560c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b69ec:	8860      	ldrh	r0, [r4, #2]
   b69ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b69f2:	4288      	cmp	r0, r1
   b69f4:	d01c      	beq.n	b6a30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b69f6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b69f8:	074e      	lsls	r6, r1, #29
   b69fa:	d501      	bpl.n	b6a00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b69fc:	2f01      	cmp	r7, #1
   b69fe:	d104      	bne.n	b6a0a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6a00:	070b      	lsls	r3, r1, #28
   b6a02:	d409      	bmi.n	b6a18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6a04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6a08:	e7d2      	b.n	b69b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a0a:	89a1      	ldrh	r1, [r4, #12]
   b6a0c:	9300      	str	r3, [sp, #0]
   b6a0e:	4613      	mov	r3, r2
   b6a10:	462a      	mov	r2, r5
   b6a12:	f7fe fdd3 	bl	b55bc <hal_ble_gatt_client_write_without_response>
   b6a16:	e7cb      	b.n	b69b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6a18:	2f02      	cmp	r7, #2
   b6a1a:	d0f3      	beq.n	b6a04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6a1c:	2300      	movs	r3, #0
   b6a1e:	89a1      	ldrh	r1, [r4, #12]
   b6a20:	9300      	str	r3, [sp, #0]
   b6a22:	4613      	mov	r3, r2
   b6a24:	462a      	mov	r2, r5
   b6a26:	f7fe fdbf 	bl	b55a8 <hal_ble_gatt_client_write_with_response>
   b6a2a:	e7c1      	b.n	b69b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6a2c:	4802      	ldr	r0, [pc, #8]	; (b6a38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6a2e:	e7bf      	b.n	b69b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6a30:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6a34:	e7bc      	b.n	b69b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6a36:	bf00      	nop
   b6a38:	fffffef2 	.word	0xfffffef2

000b6a3c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b6a3c:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b6a3e:	688a      	ldr	r2, [r1, #8]
   b6a40:	6809      	ldr	r1, [r1, #0]
   b6a42:	f7ff bf9b 	b.w	b697c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b6a48 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6a4c:	2600      	movs	r6, #0
   b6a4e:	6006      	str	r6, [r0, #0]
   b6a50:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6a52:	2028      	movs	r0, #40	; 0x28
   b6a54:	460c      	mov	r4, r1
   b6a56:	f7fd fb1e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6a5a:	1e05      	subs	r5, r0, #0
   b6a5c:	f105 080c 	add.w	r8, r5, #12
   b6a60:	d00f      	beq.n	b6a82 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6a62:	2301      	movs	r3, #1
   b6a64:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6a68:	4b08      	ldr	r3, [pc, #32]	; (b6a8c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6a6a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6a6c:	4640      	mov	r0, r8
   b6a6e:	f7ff fe61 	bl	b6734 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6a74:	622e      	str	r6, [r5, #32]
   b6a76:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6a7a:	4646      	mov	r6, r8
   b6a7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6a7e:	6823      	ldr	r3, [r4, #0]
   b6a80:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6a82:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6a86:	4638      	mov	r0, r7
   b6a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6a8c:	000bc030 	.word	0x000bc030

000b6a90 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6a90:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6a92:	2500      	movs	r5, #0
   b6a94:	6005      	str	r5, [r0, #0]
   b6a96:	4606      	mov	r6, r0
   b6a98:	2030      	movs	r0, #48	; 0x30
   b6a9a:	f7fd fafc 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6a9e:	4604      	mov	r4, r0
   b6aa0:	b188      	cbz	r0, b6ac6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6aa2:	2301      	movs	r3, #1
   b6aa4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6aa8:	4b09      	ldr	r3, [pc, #36]	; (b6ad0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6aaa:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6ab0:	8183      	strh	r3, [r0, #12]
   b6ab2:	300e      	adds	r0, #14
   b6ab4:	f7ff fe33 	bl	b671e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6ab8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6abc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6ac0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6ac4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6ac6:	6074      	str	r4, [r6, #4]
   b6ac8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6aca:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6acc:	4630      	mov	r0, r6
   b6ace:	bd70      	pop	{r4, r5, r6, pc}
   b6ad0:	000bc04c 	.word	0x000bc04c

000b6ad4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6ad6:	460d      	mov	r5, r1
   b6ad8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6ada:	a801      	add	r0, sp, #4
   b6adc:	f7ff fde4 	bl	b66a8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6ae0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6ae2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6ae6:	6023      	str	r3, [r4, #0]
   b6ae8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6aec:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6aee:	a801      	add	r0, sp, #4
   b6af0:	f7ff fde8 	bl	b66c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6af4:	4620      	mov	r0, r4
   b6af6:	b003      	add	sp, #12
   b6af8:	bd30      	pop	{r4, r5, pc}

000b6afa <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6afa:	b530      	push	{r4, r5, lr}
   b6afc:	4605      	mov	r5, r0
   b6afe:	b087      	sub	sp, #28
   b6b00:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6b02:	a801      	add	r0, sp, #4
   b6b04:	f7ff fdd0 	bl	b66a8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6b08:	682a      	ldr	r2, [r5, #0]
   b6b0a:	6823      	ldr	r3, [r4, #0]
   b6b0c:	8812      	ldrh	r2, [r2, #0]
   b6b0e:	881b      	ldrh	r3, [r3, #0]
   b6b10:	429a      	cmp	r2, r3
   b6b12:	d10d      	bne.n	b6b30 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6b14:	4629      	mov	r1, r5
   b6b16:	a802      	add	r0, sp, #8
   b6b18:	f7ff ffdc 	bl	b6ad4 <_ZNK8particle13BlePeerDevice7addressEv>
   b6b1c:	4621      	mov	r1, r4
   b6b1e:	a804      	add	r0, sp, #16
   b6b20:	f7ff ffd8 	bl	b6ad4 <_ZNK8particle13BlePeerDevice7addressEv>
   b6b24:	a904      	add	r1, sp, #16
   b6b26:	a802      	add	r0, sp, #8
   b6b28:	f7ff fde5 	bl	b66f6 <_ZNK8particle10BleAddresseqERKS0_>
   b6b2c:	4604      	mov	r4, r0
   b6b2e:	b900      	cbnz	r0, b6b32 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6b30:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6b32:	a801      	add	r0, sp, #4
   b6b34:	f7ff fdc6 	bl	b66c4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6b38:	4620      	mov	r0, r4
   b6b3a:	b007      	add	sp, #28
   b6b3c:	bd30      	pop	{r4, r5, pc}
	...

000b6b40 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6b40:	b510      	push	{r4, lr}
   b6b42:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6b44:	2064      	movs	r0, #100	; 0x64
   b6b46:	f7fd faa6 	bl	b4096 <_Znwj>
   b6b4a:	b168      	cbz	r0, b6b68 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6b4c:	2300      	movs	r3, #0
   b6b4e:	e9c0 3300 	strd	r3, r3, [r0]
   b6b52:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6b5a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6b5e:	6203      	str	r3, [r0, #32]
   b6b60:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6b62:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6b64:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6b66:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6b68:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6b6a:	b920      	cbnz	r0, b6b76 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6b6c:	4a0a      	ldr	r2, [pc, #40]	; (b6b98 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6b6e:	490b      	ldr	r1, [pc, #44]	; (b6b9c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6b70:	200a      	movs	r0, #10
   b6b72:	f7fe feb5 	bl	b58e0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6b76:	2000      	movs	r0, #0
   b6b78:	f7fe fcd0 	bl	b551c <hal_ble_stack_init>
   b6b7c:	b120      	cbz	r0, b6b88 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6b7e:	4a06      	ldr	r2, [pc, #24]	; (b6b98 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6b80:	4907      	ldr	r1, [pc, #28]	; (b6ba0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6b82:	200a      	movs	r0, #10
   b6b84:	f7fe feac 	bl	b58e0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6b88:	6821      	ldr	r1, [r4, #0]
   b6b8a:	4806      	ldr	r0, [pc, #24]	; (b6ba4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6b8c:	2200      	movs	r2, #0
   b6b8e:	f7fe fd29 	bl	b55e4 <hal_ble_set_callback_on_periph_link_events>
}
   b6b92:	4620      	mov	r0, r4
   b6b94:	bd10      	pop	{r4, pc}
   b6b96:	bf00      	nop
   b6b98:	000b54cd 	.word	0x000b54cd
   b6b9c:	000bbec0 	.word	0x000bbec0
   b6ba0:	000bbefe 	.word	0x000bbefe
   b6ba4:	000b7175 	.word	0x000b7175

000b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6ba8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6baa:	4c0a      	ldr	r4, [pc, #40]	; (b6bd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6bac:	7823      	ldrb	r3, [r4, #0]
   b6bae:	f3bf 8f5b 	dmb	ish
   b6bb2:	07db      	lsls	r3, r3, #31
   b6bb4:	d40c      	bmi.n	b6bd0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6bb6:	4620      	mov	r0, r4
   b6bb8:	f7fd fa73 	bl	b40a2 <__cxa_guard_acquire>
   b6bbc:	b140      	cbz	r0, b6bd0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6bbe:	4806      	ldr	r0, [pc, #24]	; (b6bd8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6bc0:	f7ff ffbe 	bl	b6b40 <_ZN8particle14BleLocalDeviceC1Ev>
   b6bc4:	4620      	mov	r0, r4
   b6bc6:	f7fd fa71 	bl	b40ac <__cxa_guard_release>
   b6bca:	4804      	ldr	r0, [pc, #16]	; (b6bdc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6bcc:	f002 fd94 	bl	b96f8 <atexit>
    return instance;
}
   b6bd0:	4801      	ldr	r0, [pc, #4]	; (b6bd8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6bd2:	bd10      	pop	{r4, pc}
   b6bd4:	2003e68c 	.word	0x2003e68c
   b6bd8:	2003e698 	.word	0x2003e698
   b6bdc:	000b6e1d 	.word	0x000b6e1d

000b6be0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6be0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6be2:	6803      	ldr	r3, [r0, #0]
   b6be4:	3b09      	subs	r3, #9
   b6be6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6be8:	b08d      	sub	sp, #52	; 0x34
   b6bea:	4604      	mov	r4, r0
   b6bec:	460d      	mov	r5, r1
    switch (event->type) {
   b6bee:	d811      	bhi.n	b6c14 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6bf0:	f7ff ffda 	bl	b6ba8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6bf4:	88a1      	ldrh	r1, [r4, #4]
   b6bf6:	6800      	ldr	r0, [r0, #0]
   b6bf8:	f7ff feae 	bl	b6958 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6bfc:	4603      	mov	r3, r0
   b6bfe:	b958      	cbnz	r0, b6c18 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6c00:	2220      	movs	r2, #32
   b6c02:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6c06:	4a0b      	ldr	r2, [pc, #44]	; (b6c34 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6c08:	9200      	str	r2, [sp, #0]
   b6c0a:	490b      	ldr	r1, [pc, #44]	; (b6c38 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6c0c:	aa04      	add	r2, sp, #16
   b6c0e:	2032      	movs	r0, #50	; 0x32
   b6c10:	f7fe fe6e 	bl	b58f0 <log_message>
}
   b6c14:	b00d      	add	sp, #52	; 0x34
   b6c16:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6c18:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6c1a:	2a00      	cmp	r2, #0
   b6c1c:	d0fa      	beq.n	b6c14 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6c1e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6c22:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6c26:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6c2a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6c2c:	aa04      	add	r2, sp, #16
   b6c2e:	a903      	add	r1, sp, #12
   b6c30:	47a0      	blx	r4
}
   b6c32:	e7ef      	b.n	b6c14 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6c34:	000bbf40 	.word	0x000bbf40
   b6c38:	000bbed7 	.word	0x000bbed7

000b6c3c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6c3c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6c3e:	2000      	movs	r0, #0
   b6c40:	f7fe fc6c 	bl	b551c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6c44:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6c48:	bd08      	pop	{r3, pc}

000b6c4a <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b6c4a:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b6c4c:	2100      	movs	r1, #0
   b6c4e:	f7fe bc6d 	b.w	b552c <hal_ble_select_antenna>

000b6c52 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6c52:	b919      	cbnz	r1, b6c5c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6c54:	460a      	mov	r2, r1
   b6c56:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6c58:	f7fe bc70 	b.w	b553c <hal_ble_gap_set_advertising_data>
   b6c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6c60:	2200      	movs	r2, #0
   b6c62:	e7f9      	b.n	b6c58 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6c64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6c64:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6c66:	1e14      	subs	r4, r2, #0
   b6c68:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6c6a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6c6c:	db02      	blt.n	b6c74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6c6e:	1862      	adds	r2, r4, r1
   b6c70:	429a      	cmp	r2, r3
   b6c72:	dd00      	ble.n	b6c76 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6c74:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6c76:	682a      	ldr	r2, [r5, #0]
   b6c78:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6c7a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6c7c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6c7e:	1a52      	subs	r2, r2, r1
   b6c80:	f002 fd65 	bl	b974e <memmove>
    size_ -= n;
   b6c84:	686a      	ldr	r2, [r5, #4]
   b6c86:	1b12      	subs	r2, r2, r4
   b6c88:	606a      	str	r2, [r5, #4]
}
   b6c8a:	bd38      	pop	{r3, r4, r5, pc}

000b6c8c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6c8e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6c90:	4604      	mov	r4, r0
   b6c92:	460d      	mov	r5, r1
   b6c94:	ab01      	add	r3, sp, #4
   b6c96:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6c9a:	f7ff fc73 	bl	b6584 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6c9e:	4602      	mov	r2, r0
   b6ca0:	b138      	cbz	r0, b6cb2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6ca2:	9901      	ldr	r1, [sp, #4]
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	f7ff ffdd 	bl	b6c64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6caa:	4629      	mov	r1, r5
   b6cac:	4620      	mov	r0, r4
   b6cae:	f7ff ffed 	bl	b6c8c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6cb2:	b003      	add	sp, #12
   b6cb4:	bd30      	pop	{r4, r5, pc}

000b6cb6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6cb6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6cb8:	460c      	mov	r4, r1
   b6cba:	b929      	cbnz	r1, b6cc8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6cbc:	460a      	mov	r2, r1
   b6cbe:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b6cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6cc4:	f7fe bc42 	b.w	b554c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6cc8:	2101      	movs	r1, #1
   b6cca:	4620      	mov	r0, r4
   b6ccc:	f7ff ffde 	bl	b6c8c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6cd0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6cd4:	2200      	movs	r2, #0
   b6cd6:	e7f3      	b.n	b6cc0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6cd8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6cd8:	b538      	push	{r3, r4, r5, lr}
   b6cda:	4604      	mov	r4, r0
   b6cdc:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6cde:	f7ff ffb8 	bl	b6c52 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6ce2:	2800      	cmp	r0, #0
   b6ce4:	db0a      	blt.n	b6cfc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6ce6:	4629      	mov	r1, r5
   b6ce8:	4620      	mov	r0, r4
   b6cea:	f7ff ffe4 	bl	b6cb6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6cee:	2800      	cmp	r0, #0
   b6cf0:	db04      	blt.n	b6cfc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b6cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6cf6:	2000      	movs	r0, #0
   b6cf8:	f7fe bc30 	b.w	b555c <hal_ble_gap_start_advertising>
}
   b6cfc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6d00 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6d00:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6d02:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6d04:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6d06:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d08:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6d0a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d0c:	f7fd f9c3 	bl	b4096 <_Znwj>
   b6d10:	b118      	cbz	r0, b6d1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6d12:	682b      	ldr	r3, [r5, #0]
   b6d14:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6d16:	686b      	ldr	r3, [r5, #4]
   b6d18:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6d1a:	4b03      	ldr	r3, [pc, #12]	; (b6d28 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6d1c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6d1e:	4b03      	ldr	r3, [pc, #12]	; (b6d2c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d20:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6d22:	60a3      	str	r3, [r4, #8]
      }
   b6d24:	4620      	mov	r0, r4
   b6d26:	bd38      	pop	{r3, r4, r5, pc}
   b6d28:	000b65d1 	.word	0x000b65d1
   b6d2c:	000b6629 	.word	0x000b6629

000b6d30 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6d30:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6d32:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6d34:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6d36:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d38:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6d3a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d3c:	f7fd f9ab 	bl	b4096 <_Znwj>
   b6d40:	b118      	cbz	r0, b6d4a <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b6d42:	682b      	ldr	r3, [r5, #0]
   b6d44:	6003      	str	r3, [r0, #0]
   b6d46:	686b      	ldr	r3, [r5, #4]
   b6d48:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6d4a:	4b03      	ldr	r3, [pc, #12]	; (b6d58 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b6d4c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6d4e:	4b03      	ldr	r3, [pc, #12]	; (b6d5c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6d50:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6d52:	60a3      	str	r3, [r4, #8]
      }
   b6d54:	4620      	mov	r0, r4
   b6d56:	bd38      	pop	{r3, r4, r5, pc}
   b6d58:	000b65c5 	.word	0x000b65c5
   b6d5c:	000b65e9 	.word	0x000b65e9

000b6d60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6d60:	680b      	ldr	r3, [r1, #0]
   b6d62:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6d64:	b113      	cbz	r3, b6d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6d66:	685a      	ldr	r2, [r3, #4]
   b6d68:	3201      	adds	r2, #1
   b6d6a:	605a      	str	r2, [r3, #4]
      }
   b6d6c:	4770      	bx	lr

000b6d6e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6d6e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6d70:	f851 3b04 	ldr.w	r3, [r1], #4
   b6d74:	4604      	mov	r4, r0
   b6d76:	f840 3b04 	str.w	r3, [r0], #4
   b6d7a:	f7ff fff1 	bl	b6d60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6d7e:	6823      	ldr	r3, [r4, #0]
   b6d80:	b90b      	cbnz	r3, b6d86 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6d82:	f7ff fc15 	bl	b65b0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6d86:	4620      	mov	r0, r4
   b6d88:	bd10      	pop	{r4, pc}

000b6d8a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6d8a:	b510      	push	{r4, lr}
   b6d8c:	f851 3b04 	ldr.w	r3, [r1], #4
   b6d90:	4604      	mov	r4, r0
   b6d92:	f840 3b04 	str.w	r3, [r0], #4
   b6d96:	f7ff ffe3 	bl	b6d60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6d9a:	4620      	mov	r0, r4
   b6d9c:	bd10      	pop	{r4, pc}

000b6d9e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6d9e:	b510      	push	{r4, lr}
   b6da0:	f851 3b04 	ldr.w	r3, [r1], #4
   b6da4:	4604      	mov	r4, r0
   b6da6:	f840 3b04 	str.w	r3, [r0], #4
   b6daa:	f7ff ffd9 	bl	b6d60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6dae:	4620      	mov	r0, r4
   b6db0:	bd10      	pop	{r4, pc}

000b6db2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6db2:	b510      	push	{r4, lr}
   b6db4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6db6:	3004      	adds	r0, #4
   b6db8:	f7fd ff6a 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	bd10      	pop	{r4, pc}

000b6dc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6dc0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6dc2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6dc6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6dc8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6dcc:	42ae      	cmp	r6, r5
   b6dce:	d004      	beq.n	b6dda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6dd0:	1d28      	adds	r0, r5, #4
   b6dd2:	f7fd ff5d 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6dd6:	3508      	adds	r5, #8
   b6dd8:	e7f8      	b.n	b6dcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6dda:	6820      	ldr	r0, [r4, #0]
   b6ddc:	f7fe fe74 	bl	b5ac8 <free>
}
   b6de0:	4620      	mov	r0, r4
   b6de2:	bd70      	pop	{r4, r5, r6, pc}

000b6de4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6de4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6de6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6dea:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6dec:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6df0:	42ae      	cmp	r6, r5
   b6df2:	d004      	beq.n	b6dfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6df4:	1d28      	adds	r0, r5, #4
   b6df6:	f7fd ff4b 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6dfa:	3508      	adds	r5, #8
   b6dfc:	e7f8      	b.n	b6df0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6dfe:	6820      	ldr	r0, [r4, #0]
   b6e00:	f7fe fe62 	bl	b5ac8 <free>
}
   b6e04:	4620      	mov	r0, r4
   b6e06:	bd70      	pop	{r4, r5, r6, pc}

000b6e08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6e08:	b510      	push	{r4, lr}
   b6e0a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6e0c:	3024      	adds	r0, #36	; 0x24
   b6e0e:	f7ff ffe9 	bl	b6de4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6e12:	f104 0018 	add.w	r0, r4, #24
   b6e16:	f7ff ffd3 	bl	b6dc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6e1a:	bd10      	pop	{r4, pc}

000b6e1c <__tcf_0>:
    static BleLocalDevice instance;
   b6e1c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6e1e:	4b17      	ldr	r3, [pc, #92]	; (b6e7c <__tcf_0+0x60>)
   b6e20:	681c      	ldr	r4, [r3, #0]
   b6e22:	b354      	cbz	r4, b6e7a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6e24:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6e28:	f7fd fad6 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
   b6e2c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6e30:	f7fd fad2 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
   b6e34:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6e38:	f7fd face 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
   b6e3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6e40:	f7fd faca 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6e44:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6e48:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6e4c:	42ae      	cmp	r6, r5
   b6e4e:	d004      	beq.n	b6e5a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6e50:	1d28      	adds	r0, r5, #4
   b6e52:	f7fd ff1d 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e56:	3508      	adds	r5, #8
   b6e58:	e7f8      	b.n	b6e4c <__tcf_0+0x30>
    ::free(ptr);
   b6e5a:	69a0      	ldr	r0, [r4, #24]
   b6e5c:	f7fe fe34 	bl	b5ac8 <free>
    ~BleLocalDeviceImpl() = default;
   b6e60:	f104 000c 	add.w	r0, r4, #12
   b6e64:	f7ff ffbe 	bl	b6de4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6e68:	4620      	mov	r0, r4
   b6e6a:	f7ff ffa9 	bl	b6dc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6e6e:	4620      	mov	r0, r4
   b6e70:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6e76:	f7fd b912 	b.w	b409e <_ZdlPvj>
   b6e7a:	bd70      	pop	{r4, r5, r6, pc}
   b6e7c:	2003e698 	.word	0x2003e698

000b6e80 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6e80:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6e82:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e84:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6e88:	e9c1 3300 	strd	r3, r3, [r1]
   b6e8c:	6803      	ldr	r3, [r0, #0]
   b6e8e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e90:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6e92:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6e94:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6e96:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6e98:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6e9a:	f7fd fef9 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6e9e:	b002      	add	sp, #8
   b6ea0:	bd10      	pop	{r4, pc}

000b6ea2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6ea2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6ea4:	b510      	push	{r4, lr}
      if (_M_empty())
   b6ea6:	b90a      	cbnz	r2, b6eac <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6ea8:	f001 fe48 	bl	b8b3c <_ZSt25__throw_bad_function_callv>
    }
   b6eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6eb0:	68c3      	ldr	r3, [r0, #12]
   b6eb2:	4718      	bx	r3

000b6eb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6eb4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6eb6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6eb8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6eba:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6ebc:	dd03      	ble.n	b6ec6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6ebe:	f7fe fe0b 	bl	b5ad8 <realloc>
            if (!d) {
   b6ec2:	b918      	cbnz	r0, b6ecc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6ec4:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6ec6:	f7fe fdff 	bl	b5ac8 <free>
        T* d = nullptr;
   b6eca:	2000      	movs	r0, #0
        data_ = d;
   b6ecc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6ece:	60a5      	str	r5, [r4, #8]
        return true;
   b6ed0:	2001      	movs	r0, #1
   b6ed2:	e7f7      	b.n	b6ec4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6ed4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6ed4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6ed6:	6883      	ldr	r3, [r0, #8]
   b6ed8:	428b      	cmp	r3, r1
   b6eda:	da02      	bge.n	b6ee2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6edc:	f7ff ffea 	bl	b6eb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6ee0:	bd08      	pop	{r3, pc}
    return true;
   b6ee2:	2001      	movs	r0, #1
   b6ee4:	e7fc      	b.n	b6ee0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6ee6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6eea:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6eec:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6eee:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ef0:	4419      	add	r1, r3
   b6ef2:	6883      	ldr	r3, [r0, #8]
   b6ef4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6ef6:	4604      	mov	r4, r0
   b6ef8:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6efa:	dc12      	bgt.n	b6f22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6efc:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6efe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f00:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f02:	1bd2      	subs	r2, r2, r7
   b6f04:	4631      	mov	r1, r6
   b6f06:	1970      	adds	r0, r6, r5
   b6f08:	f002 fc21 	bl	b974e <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6f0c:	462a      	mov	r2, r5
   b6f0e:	4641      	mov	r1, r8
   b6f10:	4630      	mov	r0, r6
   b6f12:	f002 fc0e 	bl	b9732 <memcpy>
    size_ += n;
   b6f16:	6863      	ldr	r3, [r4, #4]
   b6f18:	442b      	add	r3, r5
   b6f1a:	6063      	str	r3, [r4, #4]
    return true;
   b6f1c:	2001      	movs	r0, #1
}
   b6f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6f22:	f7ff ffc7 	bl	b6eb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6f26:	2800      	cmp	r0, #0
   b6f28:	d1e8      	bne.n	b6efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6f2a:	e7f8      	b.n	b6f1e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f2e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f30:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6f34:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6f36:	4604      	mov	r4, r0
   b6f38:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f3a:	da0b      	bge.n	b6f54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6f3c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f3e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6f40:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6f42:	1b52      	subs	r2, r2, r5
   b6f44:	1c48      	adds	r0, r1, #1
   b6f46:	f002 fc02 	bl	b974e <memmove>
    new(p) T(std::move(value));
   b6f4a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6f4c:	6863      	ldr	r3, [r4, #4]
   b6f4e:	3301      	adds	r3, #1
   b6f50:	6063      	str	r3, [r4, #4]
}
   b6f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6f54:	3101      	adds	r1, #1
   b6f56:	f7ff ffad 	bl	b6eb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6f5a:	2800      	cmp	r0, #0
   b6f5c:	d1ee      	bne.n	b6f3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6f5e:	e7f8      	b.n	b6f52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6f60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6f60:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6f62:	6841      	ldr	r1, [r0, #4]
   b6f64:	f7ff bfe2 	b.w	b6f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6f68 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6f68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6f6c:	4604      	mov	r4, r0
   b6f6e:	461d      	mov	r5, r3
   b6f70:	460f      	mov	r7, r1
   b6f72:	ab01      	add	r3, sp, #4
   b6f74:	4690      	mov	r8, r2
   b6f76:	460a      	mov	r2, r1
   b6f78:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6f7c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6f80:	f7ff fb00 	bl	b6584 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6f84:	1cae      	adds	r6, r5, #2
   b6f86:	6863      	ldr	r3, [r4, #4]
   b6f88:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6f8a:	f1b9 0f00 	cmp.w	r9, #0
   b6f8e:	d126      	bne.n	b6fde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6f90:	b328      	cbz	r0, b6fde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6f92:	4433      	add	r3, r6
   b6f94:	1a1b      	subs	r3, r3, r0
   b6f96:	2bff      	cmp	r3, #255	; 0xff
   b6f98:	d809      	bhi.n	b6fae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6f9a:	9901      	ldr	r1, [sp, #4]
   b6f9c:	4620      	mov	r0, r4
   b6f9e:	f7ff fe61 	bl	b6c64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6fa2:	6861      	ldr	r1, [r4, #4]
   b6fa4:	4620      	mov	r0, r4
   b6fa6:	4431      	add	r1, r6
   b6fa8:	f7ff ff94 	bl	b6ed4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6fac:	b918      	cbnz	r0, b6fb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6fae:	6860      	ldr	r0, [r4, #4]
}
   b6fb0:	b003      	add	sp, #12
   b6fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6fb6:	1c6a      	adds	r2, r5, #1
   b6fb8:	9901      	ldr	r1, [sp, #4]
   b6fba:	b2d2      	uxtb	r2, r2
   b6fbc:	4620      	mov	r0, r4
   b6fbe:	f7ff ffb5 	bl	b6f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b6fc2:	9901      	ldr	r1, [sp, #4]
   b6fc4:	463a      	mov	r2, r7
   b6fc6:	3101      	adds	r1, #1
   b6fc8:	4620      	mov	r0, r4
   b6fca:	f7ff ffaf 	bl	b6f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b6fce:	9901      	ldr	r1, [sp, #4]
   b6fd0:	462b      	mov	r3, r5
   b6fd2:	4642      	mov	r2, r8
   b6fd4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b6fd6:	4620      	mov	r0, r4
   b6fd8:	f7ff ff85 	bl	b6ee6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6fdc:	e7e7      	b.n	b6fae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6fde:	18f1      	adds	r1, r6, r3
   b6fe0:	29ff      	cmp	r1, #255	; 0xff
   b6fe2:	d8e4      	bhi.n	b6fae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6fe4:	4620      	mov	r0, r4
   b6fe6:	f7ff ff75 	bl	b6ed4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6fea:	2800      	cmp	r0, #0
   b6fec:	d0df      	beq.n	b6fae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6fee:	1c69      	adds	r1, r5, #1
   b6ff0:	b2c9      	uxtb	r1, r1
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	f7ff ffb4 	bl	b6f60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6ff8:	4639      	mov	r1, r7
   b6ffa:	4620      	mov	r0, r4
   b6ffc:	f7ff ffb0 	bl	b6f60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7000:	6861      	ldr	r1, [r4, #4]
   b7002:	462b      	mov	r3, r5
   b7004:	4642      	mov	r2, r8
   b7006:	e7e6      	b.n	b6fd6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7008 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7008:	b430      	push	{r4, r5}
   b700a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b700e:	b11a      	cbz	r2, b7018 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7010:	9502      	str	r5, [sp, #8]
}
   b7012:	bc30      	pop	{r4, r5}
   b7014:	f7ff bfa8 	b.w	b6f68 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7018:	6840      	ldr	r0, [r0, #4]
}
   b701a:	bc30      	pop	{r4, r5}
   b701c:	4770      	bx	lr

000b701e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b701e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7020:	2300      	movs	r3, #0
   b7022:	e9c0 3300 	strd	r3, r3, [r0]
   b7026:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7028:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b702a:	9300      	str	r3, [sp, #0]
   b702c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b702e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7032:	4619      	mov	r1, r3
   b7034:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7038:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b703a:	f7ff ffe5 	bl	b7008 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b703e:	4620      	mov	r0, r4
   b7040:	b004      	add	sp, #16
   b7042:	bd10      	pop	{r4, pc}

000b7044 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7046:	460a      	mov	r2, r1
   b7048:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b704a:	2114      	movs	r1, #20
   b704c:	4610      	mov	r0, r2
   b704e:	9203      	str	r2, [sp, #12]
   b7050:	f002 fc29 	bl	b98a6 <strnlen>
   b7054:	2100      	movs	r1, #0
   b7056:	4603      	mov	r3, r0
   b7058:	9100      	str	r1, [sp, #0]
   b705a:	9a03      	ldr	r2, [sp, #12]
   b705c:	2109      	movs	r1, #9
   b705e:	4620      	mov	r0, r4
   b7060:	f7ff ffd2 	bl	b7008 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7064:	b004      	add	sp, #16
   b7066:	bd10      	pop	{r4, pc}

000b7068 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7068:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b706a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b706c:	4604      	mov	r4, r0
   b706e:	460d      	mov	r5, r1
   b7070:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7072:	d914      	bls.n	b709e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7074:	4290      	cmp	r0, r2
   b7076:	d213      	bcs.n	b70a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7078:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b707c:	1a75      	subs	r5, r6, r1
   b707e:	f1a1 0708 	sub.w	r7, r1, #8
   b7082:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7084:	42b7      	cmp	r7, r6
   b7086:	d018      	beq.n	b70ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7088:	b11c      	cbz	r4, b7092 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b708a:	4631      	mov	r1, r6
   b708c:	4620      	mov	r0, r4
   b708e:	f7ff fe86 	bl	b6d9e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7092:	1d30      	adds	r0, r6, #4
   b7094:	f7fd fdfc 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7098:	3e08      	subs	r6, #8
   b709a:	3c08      	subs	r4, #8
   b709c:	e7f2      	b.n	b7084 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b709e:	d00c      	beq.n	b70ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b70a0:	42b5      	cmp	r5, r6
   b70a2:	d00a      	beq.n	b70ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b70a4:	b11c      	cbz	r4, b70ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b70a6:	4629      	mov	r1, r5
   b70a8:	4620      	mov	r0, r4
   b70aa:	f7ff fe78 	bl	b6d9e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b70ae:	1d28      	adds	r0, r5, #4
   b70b0:	f7fd fdee 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b70b4:	3508      	adds	r5, #8
   b70b6:	3408      	adds	r4, #8
   b70b8:	e7f2      	b.n	b70a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b70ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b70bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b70be:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b70c0:	6846      	ldr	r6, [r0, #4]
   b70c2:	4668      	mov	r0, sp
   b70c4:	f7ff fe6b 	bl	b6d9e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b70c8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b70cc:	429f      	cmp	r7, r3
   b70ce:	db12      	blt.n	b70f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b70d0:	3701      	adds	r7, #1
        if (n > 0) {
   b70d2:	2f00      	cmp	r7, #0
   b70d4:	dd29      	ble.n	b712a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b70d6:	00f8      	lsls	r0, r7, #3
   b70d8:	f7fe fcee 	bl	b5ab8 <malloc>
            if (!d) {
   b70dc:	4605      	mov	r5, r0
   b70de:	b1f0      	cbz	r0, b711e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b70e0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b70e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b70e8:	f7ff ffbe 	bl	b7068 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b70ec:	6820      	ldr	r0, [r4, #0]
   b70ee:	f7fe fceb 	bl	b5ac8 <free>
        data_ = d;
   b70f2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b70f4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b70f6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b70f8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b70fa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b70fe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7102:	4631      	mov	r1, r6
   b7104:	f106 0008 	add.w	r0, r6, #8
   b7108:	f7ff ffae 	bl	b7068 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b710c:	b11e      	cbz	r6, b7116 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b710e:	4669      	mov	r1, sp
   b7110:	4630      	mov	r0, r6
   b7112:	f7ff fe44 	bl	b6d9e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7116:	6863      	ldr	r3, [r4, #4]
   b7118:	3301      	adds	r3, #1
   b711a:	6063      	str	r3, [r4, #4]
    return true;
   b711c:	2501      	movs	r5, #1
   b711e:	a801      	add	r0, sp, #4
   b7120:	f7fd fdb6 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7124:	4628      	mov	r0, r5
   b7126:	b003      	add	sp, #12
   b7128:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b712a:	2500      	movs	r5, #0
   b712c:	e7de      	b.n	b70ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b712e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b712e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7130:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7134:	4605      	mov	r5, r0
   b7136:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7138:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b713c:	42a6      	cmp	r6, r4
   b713e:	d005      	beq.n	b714c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7140:	4639      	mov	r1, r7
   b7142:	4620      	mov	r0, r4
   b7144:	f7ff fcd9 	bl	b6afa <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7148:	b108      	cbz	r0, b714e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b714a:	b914      	cbnz	r4, b7152 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b714c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b714e:	3408      	adds	r4, #8
   b7150:	e7f4      	b.n	b713c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7152:	1d20      	adds	r0, r4, #4
   b7154:	f7fd fd9c 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7158:	e9d5 3200 	ldrd	r3, r2, [r5]
   b715c:	f104 0108 	add.w	r1, r4, #8
   b7160:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7164:	4620      	mov	r0, r4
   b7166:	f7ff ff7f 	bl	b7068 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b716a:	686b      	ldr	r3, [r5, #4]
   b716c:	3b01      	subs	r3, #1
   b716e:	606b      	str	r3, [r5, #4]
    return true;
   b7170:	e7ec      	b.n	b714c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7174 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7178:	4605      	mov	r5, r0
   b717a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b717c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b717e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7180:	f7ff fa92 	bl	b66a8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7184:	682e      	ldr	r6, [r5, #0]
   b7186:	1ef3      	subs	r3, r6, #3
   b7188:	2b0d      	cmp	r3, #13
   b718a:	d83c      	bhi.n	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b718c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7190:	0053000e 	.word	0x0053000e
   b7194:	00d1003b 	.word	0x00d1003b
   b7198:	003b003b 	.word	0x003b003b
   b719c:	003b003b 	.word	0x003b003b
   b71a0:	009b003b 	.word	0x009b003b
   b71a4:	009b009b 	.word	0x009b009b
   b71a8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b71ac:	a804      	add	r0, sp, #16
   b71ae:	f7ff fc6f 	bl	b6a90 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b71b2:	9b04      	ldr	r3, [sp, #16]
   b71b4:	89aa      	ldrh	r2, [r5, #12]
   b71b6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b71b8:	6869      	ldr	r1, [r5, #4]
   b71ba:	9804      	ldr	r0, [sp, #16]
   b71bc:	3108      	adds	r1, #8
   b71be:	3002      	adds	r0, #2
   b71c0:	f7ff fa8c 	bl	b66dc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b71c4:	a904      	add	r1, sp, #16
   b71c6:	a806      	add	r0, sp, #24
   b71c8:	f7ff fde9 	bl	b6d9e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b71cc:	a906      	add	r1, sp, #24
   b71ce:	f104 0018 	add.w	r0, r4, #24
   b71d2:	f7ff ff73 	bl	b70bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b71d6:	4605      	mov	r5, r0
   b71d8:	a807      	add	r0, sp, #28
   b71da:	f7fd fd59 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71de:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b71e0:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b71e2:	b9b5      	cbnz	r5, b7212 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b71e4:	4b5d      	ldr	r3, [pc, #372]	; (b735c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b71e6:	495e      	ldr	r1, [pc, #376]	; (b7360 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b71e8:	9300      	str	r3, [sp, #0]
   b71ea:	2032      	movs	r0, #50	; 0x32
   b71ec:	462b      	mov	r3, r5
   b71ee:	aa06      	add	r2, sp, #24
   b71f0:	9507      	str	r5, [sp, #28]
   b71f2:	f7fe fb7d 	bl	b58f0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b71f6:	9b04      	ldr	r3, [sp, #16]
   b71f8:	4629      	mov	r1, r5
   b71fa:	8818      	ldrh	r0, [r3, #0]
   b71fc:	f7fe f9b6 	bl	b556c <hal_ble_gap_disconnect>
   b7200:	a805      	add	r0, sp, #20
   b7202:	f7fd fd45 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7206:	a803      	add	r0, sp, #12
   b7208:	f7ff fa5c 	bl	b66c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b720c:	b00e      	add	sp, #56	; 0x38
   b720e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7212:	4a54      	ldr	r2, [pc, #336]	; (b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7214:	9200      	str	r2, [sp, #0]
   b7216:	2300      	movs	r3, #0
   b7218:	4951      	ldr	r1, [pc, #324]	; (b7360 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b721a:	9307      	str	r3, [sp, #28]
   b721c:	aa06      	add	r2, sp, #24
   b721e:	2001      	movs	r0, #1
   b7220:	f7fe fb66 	bl	b58f0 <log_message>
                if (impl->connectedCallback_) {
   b7224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7226:	2b00      	cmp	r3, #0
   b7228:	d0ea      	beq.n	b7200 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b722a:	a904      	add	r1, sp, #16
   b722c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7230:	f7ff fe37 	bl	b6ea2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7234:	e7e4      	b.n	b7200 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7236:	89a9      	ldrh	r1, [r5, #12]
   b7238:	4620      	mov	r0, r4
   b723a:	f7ff fb8d 	bl	b6958 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b723e:	4606      	mov	r6, r0
   b7240:	2800      	cmp	r0, #0
   b7242:	d0e0      	beq.n	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7244:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7246:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b724a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b724e:	8029      	strh	r1, [r5, #0]
   b7250:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7254:	429a      	cmp	r2, r3
   b7256:	d003      	beq.n	b7260 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7258:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b725c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b725e:	e7f9      	b.n	b7254 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b7260:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7264:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7268:	45b8      	cmp	r8, r7
   b726a:	d004      	beq.n	b7276 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b726c:	1d38      	adds	r0, r7, #4
   b726e:	f7fd fd0f 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7272:	3708      	adds	r7, #8
   b7274:	e7f8      	b.n	b7268 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7276:	2300      	movs	r3, #0
   b7278:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b727a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b727e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7282:	45b8      	cmp	r8, r7
   b7284:	d004      	beq.n	b7290 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7286:	1d38      	adds	r0, r7, #4
   b7288:	f7fd fd02 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b728c:	3708      	adds	r7, #8
   b728e:	e7f8      	b.n	b7282 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7290:	2300      	movs	r3, #0
   b7292:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7294:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7296:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7298:	b123      	cbz	r3, b72a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b729a:	4631      	mov	r1, r6
   b729c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b72a0:	f7ff fdff 	bl	b6ea2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b72a4:	2300      	movs	r3, #0
   b72a6:	2220      	movs	r2, #32
   b72a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b72ac:	4a2e      	ldr	r2, [pc, #184]	; (b7368 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b72ae:	9200      	str	r2, [sp, #0]
   b72b0:	492b      	ldr	r1, [pc, #172]	; (b7360 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b72b2:	aa06      	add	r2, sp, #24
   b72b4:	2001      	movs	r0, #1
   b72b6:	f7fe fb1b 	bl	b58f0 <log_message>
                    impl->peers_.removeOne(*peer);
   b72ba:	4631      	mov	r1, r6
   b72bc:	f104 0018 	add.w	r0, r4, #24
   b72c0:	f7ff ff35 	bl	b712e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b72c4:	e79f      	b.n	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b72c6:	89a9      	ldrh	r1, [r5, #12]
   b72c8:	4620      	mov	r0, r4
   b72ca:	f7ff fb45 	bl	b6958 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b72ce:	2800      	cmp	r0, #0
   b72d0:	d099      	beq.n	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b72d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b72d4:	2b00      	cmp	r3, #0
   b72d6:	d096      	beq.n	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b72d8:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b72da:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b72dc:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b72e0:	d001      	beq.n	b72e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b72e2:	2e10      	cmp	r6, #16
   b72e4:	d117      	bne.n	b7316 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b72e6:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b72e8:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b72ea:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b72ec:	2506      	movs	r5, #6
                        };
   b72ee:	f88d 3015 	strb.w	r3, [sp, #21]
   b72f2:	9104      	str	r1, [sp, #16]
   b72f4:	f88d 2014 	strb.w	r2, [sp, #20]
   b72f8:	9006      	str	r0, [sp, #24]
   b72fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b72fe:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7300:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7304:	9508      	str	r5, [sp, #32]
   b7306:	e883 0003 	stmia.w	r3, {r0, r1}
   b730a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b730c:	a906      	add	r1, sp, #24
   b730e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7312:	4798      	blx	r3
   b7314:	e777      	b.n	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7316:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7318:	bf01      	itttt	eq
   b731a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b731c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b731e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7322:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7324:	bf0f      	iteee	eq
   b7326:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b732a:	461a      	movne	r2, r3
   b732c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b732e:	461d      	movne	r5, r3
   b7330:	e7dd      	b.n	b72ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7332:	89a9      	ldrh	r1, [r5, #12]
   b7334:	4620      	mov	r0, r4
   b7336:	f7ff fb0f 	bl	b6958 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b733a:	4601      	mov	r1, r0
   b733c:	2800      	cmp	r0, #0
   b733e:	f43f af62 	beq.w	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7342:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7344:	2b00      	cmp	r3, #0
   b7346:	f43f af5e 	beq.w	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b734a:	686b      	ldr	r3, [r5, #4]
   b734c:	9306      	str	r3, [sp, #24]
   b734e:	aa06      	add	r2, sp, #24
   b7350:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7352:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7356:	4798      	blx	r3
   b7358:	e755      	b.n	b7206 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b735a:	bf00      	nop
   b735c:	000bbf58 	.word	0x000bbf58
   b7360:	000bbed7 	.word	0x000bbed7
   b7364:	000bbf7e 	.word	0x000bbf7e
   b7368:	000bbf9b 	.word	0x000bbf9b

000b736c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b736c:	b513      	push	{r0, r1, r4, lr}
   b736e:	460b      	mov	r3, r1
   b7370:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7372:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7376:	466c      	mov	r4, sp
   b7378:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b737c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7380:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7384:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7388:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b738c:	b002      	add	sp, #8
   b738e:	bd10      	pop	{r4, pc}

000b7390 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7390:	b538      	push	{r3, r4, r5, lr}
   b7392:	4605      	mov	r5, r0
   b7394:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7396:	f7ff ffe9 	bl	b736c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b739a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b739c:	68a2      	ldr	r2, [r4, #8]
   b739e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b73a0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b73a2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b73a4:	68e2      	ldr	r2, [r4, #12]
   b73a6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b73a8:	60e3      	str	r3, [r4, #12]
      }
   b73aa:	bd38      	pop	{r3, r4, r5, pc}

000b73ac <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b73ac:	b570      	push	{r4, r5, r6, lr}
   b73ae:	4604      	mov	r4, r0
   b73b0:	b08c      	sub	sp, #48	; 0x30
   b73b2:	460e      	mov	r6, r1
   b73b4:	9201      	str	r2, [sp, #4]
   b73b6:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b73b8:	f7ff faae 	bl	b6918 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b73bc:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b73be:	9901      	ldr	r1, [sp, #4]
   b73c0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b73c4:	f7ff f812 	bl	b63ec <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b73c8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b73cc:	b1cd      	cbz	r5, b7402 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b73ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b73d0:	9502      	str	r5, [sp, #8]
   b73d2:	a902      	add	r1, sp, #8
   b73d4:	a804      	add	r0, sp, #16
   b73d6:	9303      	str	r3, [sp, #12]
   b73d8:	f7ff fc92 	bl	b6d00 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b73dc:	2300      	movs	r3, #0
	__x.swap(*this);
   b73de:	a908      	add	r1, sp, #32
   b73e0:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b73e2:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b73e4:	f7ff ffd4 	bl	b7390 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b73e8:	4631      	mov	r1, r6
   b73ea:	a808      	add	r0, sp, #32
   b73ec:	f7ff ffd0 	bl	b7390 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b73f0:	a808      	add	r0, sp, #32
   b73f2:	f7fc fff1 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
   b73f6:	a804      	add	r0, sp, #16
   b73f8:	f7fc ffee 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
    }
   b73fc:	4620      	mov	r0, r4
   b73fe:	b00c      	add	sp, #48	; 0x30
   b7400:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7402:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7404:	e7ea      	b.n	b73dc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7408 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b740c:	b087      	sub	sp, #28
   b740e:	461d      	mov	r5, r3
   b7410:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7414:	4680      	mov	r8, r0
   b7416:	468b      	mov	fp, r1
   b7418:	4692      	mov	sl, r2
   b741a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b741c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b741e:	2200      	movs	r2, #0
   b7420:	2068      	movs	r0, #104	; 0x68
   b7422:	9102      	str	r1, [sp, #8]
   b7424:	9204      	str	r2, [sp, #16]
   b7426:	f7fc fe36 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b742a:	1e06      	subs	r6, r0, #0
   b742c:	f106 090c 	add.w	r9, r6, #12
   b7430:	d018      	beq.n	b7464 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7432:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7434:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7436:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b743a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b743c:	4a15      	ldr	r2, [pc, #84]	; (b7494 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b743e:	f847 2b20 	str.w	r2, [r7], #32
   b7442:	9b03      	ldr	r3, [sp, #12]
   b7444:	9100      	str	r1, [sp, #0]
   b7446:	465a      	mov	r2, fp
   b7448:	4651      	mov	r1, sl
   b744a:	4648      	mov	r0, r9
   b744c:	f7ff ffae 	bl	b73ac <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7452:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7454:	682b      	ldr	r3, [r5, #0]
   b7456:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b745a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b745e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7460:	6823      	ldr	r3, [r4, #0]
   b7462:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7464:	a904      	add	r1, sp, #16
   b7466:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7468:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b746c:	f7ff fd08 	bl	b6e80 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7470:	a805      	add	r0, sp, #20
   b7472:	f7fd fc0d 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7476:	f8d8 3000 	ldr.w	r3, [r8]
   b747a:	b93b      	cbnz	r3, b748c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b747c:	4a06      	ldr	r2, [pc, #24]	; (b7498 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b747e:	4907      	ldr	r1, [pc, #28]	; (b749c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7480:	200a      	movs	r0, #10
}
   b7482:	b007      	add	sp, #28
   b7484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7488:	f7fe ba2a 	b.w	b58e0 <panic_>
}
   b748c:	b007      	add	sp, #28
   b748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7492:	bf00      	nop
   b7494:	000bc014 	.word	0x000bc014
   b7498:	000b54cd 	.word	0x000b54cd
   b749c:	000bbec0 	.word	0x000bbec0

000b74a0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b74a0:	b538      	push	{r3, r4, r5, lr}
   b74a2:	4605      	mov	r5, r0
   b74a4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b74a6:	f7ff ff61 	bl	b736c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b74aa:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b74ac:	68a2      	ldr	r2, [r4, #8]
   b74ae:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b74b0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b74b2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b74b4:	68e2      	ldr	r2, [r4, #12]
   b74b6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b74b8:	60e3      	str	r3, [r4, #12]
      }
   b74ba:	bd38      	pop	{r3, r4, r5, pc}

000b74bc <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b74bc:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b74be:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b74c0:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b74c2:	3424      	adds	r4, #36	; 0x24
   b74c4:	b1b9      	cbz	r1, b74f6 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b74c6:	e9cd 1200 	strd	r1, r2, [sp]
   b74ca:	a802      	add	r0, sp, #8
   b74cc:	4669      	mov	r1, sp
   b74ce:	f7ff fc2f 	bl	b6d30 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b74d2:	2300      	movs	r3, #0
	__x.swap(*this);
   b74d4:	a906      	add	r1, sp, #24
   b74d6:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b74d8:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b74da:	f7ff ffe1 	bl	b74a0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b74de:	4621      	mov	r1, r4
   b74e0:	a806      	add	r0, sp, #24
   b74e2:	f7ff ffdd 	bl	b74a0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b74e6:	a806      	add	r0, sp, #24
   b74e8:	f7fc ff76 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
   b74ec:	a802      	add	r0, sp, #8
   b74ee:	f7fc ff73 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
}
   b74f2:	b00a      	add	sp, #40	; 0x28
   b74f4:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b74f6:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b74f8:	e7eb      	b.n	b74d2 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b74fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b74fa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b74fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b74fe:	4604      	mov	r4, r0
   b7500:	460d      	mov	r5, r1
   b7502:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7504:	d914      	bls.n	b7530 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7506:	4290      	cmp	r0, r2
   b7508:	d213      	bcs.n	b7532 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b750a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b750e:	1a75      	subs	r5, r6, r1
   b7510:	f1a1 0708 	sub.w	r7, r1, #8
   b7514:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7516:	42b7      	cmp	r7, r6
   b7518:	d018      	beq.n	b754c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b751a:	b11c      	cbz	r4, b7524 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b751c:	4631      	mov	r1, r6
   b751e:	4620      	mov	r0, r4
   b7520:	f7ff fc33 	bl	b6d8a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7524:	1d30      	adds	r0, r6, #4
   b7526:	f7fd fbb3 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b752a:	3e08      	subs	r6, #8
   b752c:	3c08      	subs	r4, #8
   b752e:	e7f2      	b.n	b7516 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7530:	d00c      	beq.n	b754c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7532:	42b5      	cmp	r5, r6
   b7534:	d00a      	beq.n	b754c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7536:	b11c      	cbz	r4, b7540 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7538:	4629      	mov	r1, r5
   b753a:	4620      	mov	r0, r4
   b753c:	f7ff fc25 	bl	b6d8a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7540:	1d28      	adds	r0, r5, #4
   b7542:	f7fd fba5 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7546:	3508      	adds	r5, #8
   b7548:	3408      	adds	r4, #8
   b754a:	e7f2      	b.n	b7532 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b754c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b754e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b754e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7550:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7552:	4605      	mov	r5, r0
        if (n > 0) {
   b7554:	dd11      	ble.n	b757a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7556:	00f0      	lsls	r0, r6, #3
   b7558:	f7fe faae 	bl	b5ab8 <malloc>
            if (!d) {
   b755c:	4604      	mov	r4, r0
   b755e:	b158      	cbz	r0, b7578 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7560:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7564:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7568:	f7ff ffc7 	bl	b74fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b756c:	6828      	ldr	r0, [r5, #0]
   b756e:	f7fe faab 	bl	b5ac8 <free>
        data_ = d;
   b7572:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7574:	60ae      	str	r6, [r5, #8]
        return true;
   b7576:	2001      	movs	r0, #1
    }
   b7578:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b757a:	2400      	movs	r4, #0
   b757c:	e7f6      	b.n	b756c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b757e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b757e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7580:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7582:	6845      	ldr	r5, [r0, #4]
   b7584:	4668      	mov	r0, sp
   b7586:	f7ff fc00 	bl	b6d8a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b758a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b758e:	4299      	cmp	r1, r3
   b7590:	da10      	bge.n	b75b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7592:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7594:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7596:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b759a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b759e:	4629      	mov	r1, r5
   b75a0:	f105 0008 	add.w	r0, r5, #8
   b75a4:	f7ff ffa9 	bl	b74fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b75a8:	b98d      	cbnz	r5, b75ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b75aa:	6863      	ldr	r3, [r4, #4]
   b75ac:	3301      	adds	r3, #1
   b75ae:	6063      	str	r3, [r4, #4]
    return true;
   b75b0:	2601      	movs	r6, #1
   b75b2:	e006      	b.n	b75c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b75b4:	3101      	adds	r1, #1
   b75b6:	4620      	mov	r0, r4
   b75b8:	f7ff ffc9 	bl	b754e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b75bc:	4606      	mov	r6, r0
   b75be:	2800      	cmp	r0, #0
   b75c0:	d1e7      	bne.n	b7592 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b75c2:	a801      	add	r0, sp, #4
   b75c4:	f7fd fb64 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b75c8:	4630      	mov	r0, r6
   b75ca:	b002      	add	sp, #8
   b75cc:	bd70      	pop	{r4, r5, r6, pc}
   b75ce:	4669      	mov	r1, sp
   b75d0:	4628      	mov	r0, r5
   b75d2:	f7ff fbda 	bl	b6d8a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b75d6:	e7e8      	b.n	b75aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b75d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b75d8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b75da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75dc:	4604      	mov	r4, r0
   b75de:	460d      	mov	r5, r1
   b75e0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b75e2:	d914      	bls.n	b760e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b75e4:	4290      	cmp	r0, r2
   b75e6:	d213      	bcs.n	b7610 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b75e8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b75ec:	1a75      	subs	r5, r6, r1
   b75ee:	f1a1 0708 	sub.w	r7, r1, #8
   b75f2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b75f4:	42b7      	cmp	r7, r6
   b75f6:	d018      	beq.n	b762a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b75f8:	b11c      	cbz	r4, b7602 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b75fa:	4631      	mov	r1, r6
   b75fc:	4620      	mov	r0, r4
   b75fe:	f7ff fbb6 	bl	b6d6e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7602:	1d30      	adds	r0, r6, #4
   b7604:	f7fd fb44 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7608:	3e08      	subs	r6, #8
   b760a:	3c08      	subs	r4, #8
   b760c:	e7f2      	b.n	b75f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b760e:	d00c      	beq.n	b762a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7610:	42b5      	cmp	r5, r6
   b7612:	d00a      	beq.n	b762a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7614:	b11c      	cbz	r4, b761e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7616:	4629      	mov	r1, r5
   b7618:	4620      	mov	r0, r4
   b761a:	f7ff fba8 	bl	b6d6e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b761e:	1d28      	adds	r0, r5, #4
   b7620:	f7fd fb36 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7624:	3508      	adds	r5, #8
   b7626:	3408      	adds	r4, #8
   b7628:	e7f2      	b.n	b7610 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b762a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b762c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b762c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b762e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7630:	4605      	mov	r5, r0
        if (n > 0) {
   b7632:	dd11      	ble.n	b7658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7634:	00f0      	lsls	r0, r6, #3
   b7636:	f7fe fa3f 	bl	b5ab8 <malloc>
            if (!d) {
   b763a:	4604      	mov	r4, r0
   b763c:	b158      	cbz	r0, b7656 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b763e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7642:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7646:	f7ff ffc7 	bl	b75d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b764a:	6828      	ldr	r0, [r5, #0]
   b764c:	f7fe fa3c 	bl	b5ac8 <free>
        data_ = d;
   b7650:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7652:	60ae      	str	r6, [r5, #8]
        return true;
   b7654:	2001      	movs	r0, #1
    }
   b7656:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7658:	2400      	movs	r4, #0
   b765a:	e7f6      	b.n	b764a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b765c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b765c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b765e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7660:	6845      	ldr	r5, [r0, #4]
   b7662:	4668      	mov	r0, sp
   b7664:	f7ff fb83 	bl	b6d6e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7668:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b766c:	4299      	cmp	r1, r3
   b766e:	da10      	bge.n	b7692 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7670:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7672:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7674:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7678:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b767c:	4629      	mov	r1, r5
   b767e:	f105 0008 	add.w	r0, r5, #8
   b7682:	f7ff ffa9 	bl	b75d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7686:	b98d      	cbnz	r5, b76ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7688:	6863      	ldr	r3, [r4, #4]
   b768a:	3301      	adds	r3, #1
   b768c:	6063      	str	r3, [r4, #4]
    return true;
   b768e:	2601      	movs	r6, #1
   b7690:	e006      	b.n	b76a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7692:	3101      	adds	r1, #1
   b7694:	4620      	mov	r0, r4
   b7696:	f7ff ffc9 	bl	b762c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b769a:	4606      	mov	r6, r0
   b769c:	2800      	cmp	r0, #0
   b769e:	d1e7      	bne.n	b7670 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b76a0:	a801      	add	r0, sp, #4
   b76a2:	f7fd faf5 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b76a6:	4630      	mov	r0, r6
   b76a8:	b002      	add	sp, #8
   b76aa:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b76ac:	4669      	mov	r1, sp
   b76ae:	4628      	mov	r0, r5
   b76b0:	f7ff fb5d 	bl	b6d6e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b76b4:	e7e8      	b.n	b7688 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b76b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b76b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76bc:	4617      	mov	r7, r2
   b76be:	b0a1      	sub	sp, #132	; 0x84
   b76c0:	4680      	mov	r8, r0
    WiringBleLock lk;
   b76c2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b76c4:	460e      	mov	r6, r1
    WiringBleLock lk;
   b76c6:	f7fe ffef 	bl	b66a8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b76ca:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b76cc:	7923      	ldrb	r3, [r4, #4]
   b76ce:	b953      	cbnz	r3, b76e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b76d0:	4639      	mov	r1, r7
   b76d2:	4640      	mov	r0, r8
   b76d4:	f7ff fb4b 	bl	b6d6e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b76d8:	a80a      	add	r0, sp, #40	; 0x28
   b76da:	f7fe fff3 	bl	b66c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b76de:	4640      	mov	r0, r8
   b76e0:	b021      	add	sp, #132	; 0x84
   b76e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b76e6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b76e8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b76ec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b76f0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b76f2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b76f6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b76fa:	9b03      	ldr	r3, [sp, #12]
   b76fc:	429d      	cmp	r5, r3
   b76fe:	d021      	beq.n	b7744 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7700:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7704:	4658      	mov	r0, fp
   b7706:	f109 0114 	add.w	r1, r9, #20
   b770a:	f7ff f87a 	bl	b6802 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b770e:	b1b8      	cbz	r0, b7740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7710:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7714:	4650      	mov	r0, sl
   b7716:	f7ff f874 	bl	b6802 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b771a:	b188      	cbz	r0, b7740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b771c:	6823      	ldr	r3, [r4, #0]
   b771e:	f8d9 2000 	ldr.w	r2, [r9]
   b7722:	4053      	eors	r3, r2
   b7724:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7728:	d10a      	bne.n	b7740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b772a:	2220      	movs	r2, #32
   b772c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7730:	4a5e      	ldr	r2, [pc, #376]	; (b78ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7732:	9200      	str	r2, [sp, #0]
   b7734:	aa15      	add	r2, sp, #84	; 0x54
   b7736:	495e      	ldr	r1, [pc, #376]	; (b78b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7738:	2032      	movs	r0, #50	; 0x32
   b773a:	f7fe f8d9 	bl	b58f0 <log_message>
   b773e:	e7c7      	b.n	b76d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7740:	3508      	adds	r5, #8
   b7742:	e7da      	b.n	b76fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7744:	4650      	mov	r0, sl
   b7746:	f7ff f82d 	bl	b67a4 <_ZNK8particle7BleUuid7isValidEv>
   b774a:	b960      	cbnz	r0, b7766 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b774c:	4959      	ldr	r1, [pc, #356]	; (b78b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b774e:	2201      	movs	r2, #1
   b7750:	a815      	add	r0, sp, #84	; 0x54
   b7752:	ad15      	add	r5, sp, #84	; 0x54
   b7754:	f7fe fffe 	bl	b6754 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b775a:	46d4      	mov	ip, sl
   b775c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7760:	682b      	ldr	r3, [r5, #0]
   b7762:	f8cc 3000 	str.w	r3, [ip]
   b7766:	6833      	ldr	r3, [r6, #0]
   b7768:	e9d3 5300 	ldrd	r5, r3, [r3]
   b776c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7770:	455d      	cmp	r5, fp
   b7772:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7774:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7776:	d06e      	beq.n	b7856 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7778:	f855 0b08 	ldr.w	r0, [r5], #8
   b777c:	f7ff f841 	bl	b6802 <_ZNK8particle7BleUuideqERKS0_>
   b7780:	2800      	cmp	r0, #0
   b7782:	d0f5      	beq.n	b7770 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7784:	f104 0a14 	add.w	sl, r4, #20
   b7788:	4650      	mov	r0, sl
   b778a:	f7ff f80b 	bl	b67a4 <_ZNK8particle7BleUuid7isValidEv>
   b778e:	b988      	cbnz	r0, b77b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7790:	4b49      	ldr	r3, [pc, #292]	; (b78b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7792:	4948      	ldr	r1, [pc, #288]	; (b78b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7794:	881a      	ldrh	r2, [r3, #0]
   b7796:	3201      	adds	r2, #1
   b7798:	b292      	uxth	r2, r2
   b779a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b779c:	a815      	add	r0, sp, #84	; 0x54
   b779e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b77a0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b77a2:	f7fe fff6 	bl	b6792 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b77a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77a8:	46d4      	mov	ip, sl
   b77aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b77ae:	682b      	ldr	r3, [r5, #0]
   b77b0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b77b4:	4b41      	ldr	r3, [pc, #260]	; (b78bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b77b6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b77b8:	2228      	movs	r2, #40	; 0x28
   b77ba:	2100      	movs	r1, #0
   b77bc:	a816      	add	r0, sp, #88	; 0x58
   b77be:	f001 ffe0 	bl	b9782 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b77c2:	4651      	mov	r1, sl
   b77c4:	a804      	add	r0, sp, #16
   b77c6:	f7fe ffff 	bl	b67c8 <_ZN8particle7BleUuid7halUUIDEv>
   b77ca:	ab04      	add	r3, sp, #16
   b77cc:	aa18      	add	r2, sp, #96	; 0x60
   b77ce:	f10d 0c20 	add.w	ip, sp, #32
   b77d2:	6818      	ldr	r0, [r3, #0]
   b77d4:	6859      	ldr	r1, [r3, #4]
   b77d6:	4615      	mov	r5, r2
   b77d8:	c503      	stmia	r5!, {r0, r1}
   b77da:	3308      	adds	r3, #8
   b77dc:	4563      	cmp	r3, ip
   b77de:	462a      	mov	r2, r5
   b77e0:	d1f7      	bne.n	b77d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b77e2:	6818      	ldr	r0, [r3, #0]
   b77e4:	6028      	str	r0, [r5, #0]
    return value_;
   b77e6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b77e8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b77ec:	f8d9 3000 	ldr.w	r3, [r9]
   b77f0:	8a9b      	ldrh	r3, [r3, #20]
   b77f2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b77f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b77f8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b77fa:	4b31      	ldr	r3, [pc, #196]	; (b78c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b77fc:	2200      	movs	r2, #0
   b77fe:	1da1      	adds	r1, r4, #6
   b7800:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7802:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7806:	f7fd fee3 	bl	b55d0 <hal_ble_gatt_server_add_characteristic>
   b780a:	2800      	cmp	r0, #0
   b780c:	f47f af60 	bne.w	b76d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7810:	2301      	movs	r3, #1
   b7812:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7814:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7816:	4639      	mov	r1, r7
        return characteristics_;
   b7818:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b781a:	a80d      	add	r0, sp, #52	; 0x34
   b781c:	f7ff faa7 	bl	b6d6e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7820:	4620      	mov	r0, r4
   b7822:	a90d      	add	r1, sp, #52	; 0x34
   b7824:	f7ff ff1a 	bl	b765c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7828:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b782a:	a80e      	add	r0, sp, #56	; 0x38
   b782c:	f7fd fa30 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7830:	2c00      	cmp	r4, #0
   b7832:	f47f af4d 	bne.w	b76d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7836:	2320      	movs	r3, #32
   b7838:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b783c:	4b21      	ldr	r3, [pc, #132]	; (b78c4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b783e:	9300      	str	r3, [sp, #0]
   b7840:	aa0d      	add	r2, sp, #52	; 0x34
   b7842:	4623      	mov	r3, r4
   b7844:	e777      	b.n	b7736 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7846:	4639      	mov	r1, r7
   b7848:	4640      	mov	r0, r8
   b784a:	f7ff fa90 	bl	b6d6e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b784e:	a80c      	add	r0, sp, #48	; 0x30
   b7850:	f7fd fa1e 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7854:	e740      	b.n	b76d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7856:	a80b      	add	r0, sp, #44	; 0x2c
   b7858:	f7ff f8f6 	bl	b6a48 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b785c:	4651      	mov	r1, sl
   b785e:	a815      	add	r0, sp, #84	; 0x54
   b7860:	f7fe ffb2 	bl	b67c8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7866:	2300      	movs	r3, #0
   b7868:	3214      	adds	r2, #20
   b786a:	a915      	add	r1, sp, #84	; 0x54
   b786c:	2001      	movs	r0, #1
   b786e:	f7fd fe87 	bl	b5580 <hal_ble_gatt_server_add_service>
   b7872:	2800      	cmp	r0, #0
   b7874:	d1e7      	bne.n	b7846 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7876:	6835      	ldr	r5, [r6, #0]
   b7878:	a90b      	add	r1, sp, #44	; 0x2c
   b787a:	a80d      	add	r0, sp, #52	; 0x34
   b787c:	f7ff fa85 	bl	b6d8a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7880:	4628      	mov	r0, r5
   b7882:	a90d      	add	r1, sp, #52	; 0x34
   b7884:	f7ff fe7b 	bl	b757e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7888:	4605      	mov	r5, r0
   b788a:	a80e      	add	r0, sp, #56	; 0x38
   b788c:	f7fd fa00 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7890:	2d00      	cmp	r5, #0
   b7892:	d0d8      	beq.n	b7846 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7894:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7896:	6853      	ldr	r3, [r2, #4]
   b7898:	6812      	ldr	r2, [r2, #0]
   b789a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b789e:	3b01      	subs	r3, #1
   b78a0:	a80c      	add	r0, sp, #48	; 0x30
   b78a2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b78a6:	f7fd f9f3 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78aa:	e76b      	b.n	b7784 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b78ac:	000bbfba 	.word	0x000bbfba
   b78b0:	000bbed7 	.word	0x000bbed7
   b78b4:	000bc07e 	.word	0x000bc07e
   b78b8:	2003e690 	.word	0x2003e690
   b78bc:	002c0003 	.word	0x002c0003
   b78c0:	000b6be1 	.word	0x000b6be1
   b78c4:	000bbfe5 	.word	0x000bbfe5

000b78c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b78c8:	4802      	ldr	r0, [pc, #8]	; (b78d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b78ca:	2300      	movs	r3, #0
   b78cc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b78ce:	f7fd bed7 	b.w	b5680 <os_mutex_recursive_create>
   b78d2:	bf00      	nop
   b78d4:	2003e694 	.word	0x2003e694

000b78d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b78d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78da:	4606      	mov	r6, r0
   b78dc:	460d      	mov	r5, r1
  size_t n = 0;
   b78de:	188f      	adds	r7, r1, r2
   b78e0:	2400      	movs	r4, #0
  while (size--) {
   b78e2:	42bd      	cmp	r5, r7
   b78e4:	d00c      	beq.n	b7900 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b78e6:	6833      	ldr	r3, [r6, #0]
   b78e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b78ec:	689b      	ldr	r3, [r3, #8]
   b78ee:	4630      	mov	r0, r6
   b78f0:	4798      	blx	r3
     if (chunk>=0)
   b78f2:	1e03      	subs	r3, r0, #0
   b78f4:	db01      	blt.n	b78fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b78f6:	441c      	add	r4, r3
  while (size--) {
   b78f8:	e7f3      	b.n	b78e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b78fa:	2c00      	cmp	r4, #0
   b78fc:	bf08      	it	eq
   b78fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7900:	4620      	mov	r0, r4
   b7902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7904 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7904:	b513      	push	{r0, r1, r4, lr}
   b7906:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7908:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b790a:	b159      	cbz	r1, b7924 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b790c:	9101      	str	r1, [sp, #4]
   b790e:	f001 ffae 	bl	b986e <strlen>
   b7912:	6823      	ldr	r3, [r4, #0]
   b7914:	9901      	ldr	r1, [sp, #4]
   b7916:	68db      	ldr	r3, [r3, #12]
   b7918:	4602      	mov	r2, r0
   b791a:	4620      	mov	r0, r4
    }
   b791c:	b002      	add	sp, #8
   b791e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7922:	4718      	bx	r3
    }
   b7924:	b002      	add	sp, #8
   b7926:	bd10      	pop	{r4, pc}

000b7928 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b7928:	6803      	ldr	r3, [r0, #0]
   b792a:	689b      	ldr	r3, [r3, #8]
   b792c:	4718      	bx	r3

000b792e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b792e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7930:	210d      	movs	r1, #13
{
   b7932:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7934:	f7ff fff8 	bl	b7928 <_ZN5Print5printEc>
  n += print('\n');
   b7938:	210a      	movs	r1, #10
  size_t n = print('\r');
   b793a:	4604      	mov	r4, r0
  n += print('\n');
   b793c:	4628      	mov	r0, r5
   b793e:	f7ff fff3 	bl	b7928 <_ZN5Print5printEc>
  return n;
}
   b7942:	4420      	add	r0, r4
   b7944:	bd38      	pop	{r3, r4, r5, pc}

000b7946 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7946:	b538      	push	{r3, r4, r5, lr}
   b7948:	4605      	mov	r5, r0
  return write(str);
   b794a:	f7ff ffdb 	bl	b7904 <_ZN5Print5writeEPKc>
   b794e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7950:	4628      	mov	r0, r5
   b7952:	f7ff ffec 	bl	b792e <_ZN5Print7printlnEv>
  return n;
}
   b7956:	4420      	add	r0, r4
   b7958:	bd38      	pop	{r3, r4, r5, pc}

000b795a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b795a:	b530      	push	{r4, r5, lr}
   b795c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b795e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7960:	2a01      	cmp	r2, #1
  *str = '\0';
   b7962:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7966:	bf98      	it	ls
   b7968:	220a      	movls	r2, #10
   b796a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b796c:	460d      	mov	r5, r1
   b796e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7972:	fb01 5312 	mls	r3, r1, r2, r5
   b7976:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b797a:	2b09      	cmp	r3, #9
   b797c:	bf94      	ite	ls
   b797e:	3330      	addls	r3, #48	; 0x30
   b7980:	3337      	addhi	r3, #55	; 0x37
   b7982:	b2db      	uxtb	r3, r3
  } while(n);
   b7984:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7986:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b798a:	d9ef      	bls.n	b796c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b798c:	4621      	mov	r1, r4
   b798e:	f7ff ffb9 	bl	b7904 <_ZN5Print5writeEPKc>
}
   b7992:	b00b      	add	sp, #44	; 0x2c
   b7994:	bd30      	pop	{r4, r5, pc}

000b7996 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b799a:	b086      	sub	sp, #24
   b799c:	af00      	add	r7, sp, #0
   b799e:	4605      	mov	r5, r0
   b79a0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b79a2:	1d38      	adds	r0, r7, #4
   b79a4:	2114      	movs	r1, #20
{
   b79a6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b79a8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b79aa:	f7fe f8a5 	bl	b5af8 <vsnprintf>

    if (n<bufsize)
   b79ae:	2813      	cmp	r0, #19
   b79b0:	d80e      	bhi.n	b79d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b79b2:	1d39      	adds	r1, r7, #4
   b79b4:	4628      	mov	r0, r5
   b79b6:	f7ff ffa5 	bl	b7904 <_ZN5Print5writeEPKc>
   b79ba:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b79bc:	b11e      	cbz	r6, b79c6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b79be:	4628      	mov	r0, r5
   b79c0:	f7ff ffb5 	bl	b792e <_ZN5Print7printlnEv>
   b79c4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b79c6:	4620      	mov	r0, r4
   b79c8:	3718      	adds	r7, #24
   b79ca:	46bd      	mov	sp, r7
   b79cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b79d0:	f100 0308 	add.w	r3, r0, #8
   b79d4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b79d8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b79da:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b79de:	4622      	mov	r2, r4
   b79e0:	1c41      	adds	r1, r0, #1
   b79e2:	683b      	ldr	r3, [r7, #0]
   b79e4:	4668      	mov	r0, sp
   b79e6:	f7fe f887 	bl	b5af8 <vsnprintf>
  return write(str);
   b79ea:	4669      	mov	r1, sp
   b79ec:	4628      	mov	r0, r5
   b79ee:	f7ff ff89 	bl	b7904 <_ZN5Print5writeEPKc>
   b79f2:	4604      	mov	r4, r0
   b79f4:	46c5      	mov	sp, r8
   b79f6:	e7e1      	b.n	b79bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b79f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b79f8:	4b01      	ldr	r3, [pc, #4]	; (b7a00 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b79fa:	4a02      	ldr	r2, [pc, #8]	; (b7a04 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b79fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b79fe:	4770      	bx	lr
   b7a00:	2003e69c 	.word	0x2003e69c
   b7a04:	000bc09e 	.word	0x000bc09e

000b7a08 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7a0c:	4a15      	ldr	r2, [pc, #84]	; (b7a64 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7a0e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7a70 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b7a12:	e9d2 6300 	ldrd	r6, r3, [r2]
   b7a16:	1980      	adds	r0, r0, r6
   b7a18:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b7a1c:	4b12      	ldr	r3, [pc, #72]	; (b7a68 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b7a1e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b7a22:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b7a26:	1986      	adds	r6, r0, r6
   b7a28:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7a2c:	42bb      	cmp	r3, r7
   b7a2e:	bf08      	it	eq
   b7a30:	42b2      	cmpeq	r2, r6
{
   b7a32:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7a34:	d013      	beq.n	b7a5e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7a36:	a903      	add	r1, sp, #12
   b7a38:	4668      	mov	r0, sp
   b7a3a:	e9cd 6700 	strd	r6, r7, [sp]
   b7a3e:	f7fe f88b 	bl	b5b58 <localtime_r>
	calendar_time.tm_year += 1900;
   b7a42:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a44:	4d09      	ldr	r5, [pc, #36]	; (b7a6c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7a46:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a4a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7a4c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7a56:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7a5a:	6823      	ldr	r3, [r4, #0]
   b7a5c:	602b      	str	r3, [r5, #0]
    }
}
   b7a5e:	b00c      	add	sp, #48	; 0x30
   b7a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7a64:	2003e6d0 	.word	0x2003e6d0
   b7a68:	2003e6c8 	.word	0x2003e6c8
   b7a6c:	2003e6a4 	.word	0x2003e6a4
   b7a70:	2003e6d8 	.word	0x2003e6d8

000b7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7a74:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a76:	2000      	movs	r0, #0
   b7a78:	f7fe f80e 	bl	b5a98 <spark_sync_time_pending>
   b7a7c:	b128      	cbz	r0, b7a8a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7a7e:	f7fd fff3 	bl	b5a68 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a82:	f080 0001 	eor.w	r0, r0, #1
   b7a86:	b2c0      	uxtb	r0, r0
    }
   b7a88:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7a8a:	2001      	movs	r0, #1
   b7a8c:	e7fc      	b.n	b7a88 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b7a90 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b7a90:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b7a92:	f7ff ffb9 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b7a96:	4b02      	ldr	r3, [pc, #8]	; (b7aa0 <_ZN9TimeClass5monthEx+0x10>)
   b7a98:	6918      	ldr	r0, [r3, #16]
}
   b7a9a:	3001      	adds	r0, #1
   b7a9c:	bd08      	pop	{r3, pc}
   b7a9e:	bf00      	nop
   b7aa0:	2003e6a4 	.word	0x2003e6a4

000b7aa4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7aa4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b7aa8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b7ab0:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7ab2:	d411      	bmi.n	b7ad8 <_ZN9TimeClass4zoneEf+0x34>
   b7ab4:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b7ab8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7ac0:	dc0a      	bgt.n	b7ad8 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b7ac2:	eddf 7a06 	vldr	s15, [pc, #24]	; b7adc <_ZN9TimeClass4zoneEf+0x38>
   b7ac6:	ee60 7a27 	vmul.f32	s15, s0, s15
   b7aca:	ee17 0a90 	vmov	r0, s15
   b7ace:	f001 fdc1 	bl	b9654 <__aeabi_f2lz>
   b7ad2:	4b03      	ldr	r3, [pc, #12]	; (b7ae0 <_ZN9TimeClass4zoneEf+0x3c>)
   b7ad4:	e9c3 0100 	strd	r0, r1, [r3]
}
   b7ad8:	bd08      	pop	{r3, pc}
   b7ada:	bf00      	nop
   b7adc:	45610000 	.word	0x45610000
   b7ae0:	2003e6d0 	.word	0x2003e6d0

000b7ae4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7ae4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7ae6:	2000      	movs	r0, #0
   b7ae8:	f7fd fd00 	bl	b54ec <hal_rtc_time_is_valid>
    if (rtcstate)
   b7aec:	4604      	mov	r4, r0
   b7aee:	b9a0      	cbnz	r0, b7b1a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7af0:	f7fd ff06 	bl	b5900 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7af4:	2801      	cmp	r0, #1
   b7af6:	d110      	bne.n	b7b1a <_ZN9TimeClass7isValidEv+0x36>
   b7af8:	4620      	mov	r0, r4
   b7afa:	f7fd ff31 	bl	b5960 <system_thread_get_state>
   b7afe:	b960      	cbnz	r0, b7b1a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7b00:	f7ff ffb8 	bl	b7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7b04:	b910      	cbnz	r0, b7b0c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7b06:	f7fd ffa7 	bl	b5a58 <spark_process>
        while (_while() && !_condition()) {
   b7b0a:	e7f9      	b.n	b7b00 <_ZN9TimeClass7isValidEv+0x1c>
   b7b0c:	f7ff ffb2 	bl	b7a74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7b14:	2000      	movs	r0, #0
   b7b16:	f7fd bce9 	b.w	b54ec <hal_rtc_time_is_valid>
}
   b7b1a:	4620      	mov	r0, r4
   b7b1c:	bd10      	pop	{r4, pc}

000b7b1e <_ZN9TimeClass3nowEv>:
{
   b7b1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7b20:	f7ff ffe0 	bl	b7ae4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7b24:	2210      	movs	r2, #16
   b7b26:	2100      	movs	r1, #0
   b7b28:	4668      	mov	r0, sp
   b7b2a:	f001 fe2a 	bl	b9782 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7b2e:	2100      	movs	r1, #0
   b7b30:	4668      	mov	r0, sp
   b7b32:	f7fd fce3 	bl	b54fc <hal_rtc_get_time>
}
   b7b36:	9800      	ldr	r0, [sp, #0]
   b7b38:	b005      	add	sp, #20
   b7b3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b40 <_ZN9TimeClass4hourEv>:
{
   b7b40:	b508      	push	{r3, lr}
	return hour(now());
   b7b42:	f7ff ffec 	bl	b7b1e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b46:	17c1      	asrs	r1, r0, #31
   b7b48:	f7ff ff5e 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b4c:	4b01      	ldr	r3, [pc, #4]	; (b7b54 <_ZN9TimeClass4hourEv+0x14>)
   b7b4e:	6898      	ldr	r0, [r3, #8]
   b7b50:	bd08      	pop	{r3, pc}
   b7b52:	bf00      	nop
   b7b54:	2003e6a4 	.word	0x2003e6a4

000b7b58 <_ZN9TimeClass6minuteEv>:
{
   b7b58:	b508      	push	{r3, lr}
	return minute(now());
   b7b5a:	f7ff ffe0 	bl	b7b1e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b5e:	17c1      	asrs	r1, r0, #31
   b7b60:	f7ff ff52 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b64:	4b01      	ldr	r3, [pc, #4]	; (b7b6c <_ZN9TimeClass6minuteEv+0x14>)
   b7b66:	6858      	ldr	r0, [r3, #4]
   b7b68:	bd08      	pop	{r3, pc}
   b7b6a:	bf00      	nop
   b7b6c:	2003e6a4 	.word	0x2003e6a4

000b7b70 <_ZN9TimeClass6secondEv>:
{
   b7b70:	b508      	push	{r3, lr}
	return second(now());
   b7b72:	f7ff ffd4 	bl	b7b1e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b76:	17c1      	asrs	r1, r0, #31
   b7b78:	f7ff ff46 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b7c:	4b01      	ldr	r3, [pc, #4]	; (b7b84 <_ZN9TimeClass6secondEv+0x14>)
   b7b7e:	6818      	ldr	r0, [r3, #0]
   b7b80:	bd08      	pop	{r3, pc}
   b7b82:	bf00      	nop
   b7b84:	2003e6a4 	.word	0x2003e6a4

000b7b88 <_ZN9TimeClass3dayEv>:
{
   b7b88:	b508      	push	{r3, lr}
	return day(now());
   b7b8a:	f7ff ffc8 	bl	b7b1e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7b8e:	17c1      	asrs	r1, r0, #31
   b7b90:	f7ff ff3a 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7b94:	4b01      	ldr	r3, [pc, #4]	; (b7b9c <_ZN9TimeClass3dayEv+0x14>)
   b7b96:	68d8      	ldr	r0, [r3, #12]
   b7b98:	bd08      	pop	{r3, pc}
   b7b9a:	bf00      	nop
   b7b9c:	2003e6a4 	.word	0x2003e6a4

000b7ba0 <_ZN9TimeClass5monthEv>:
{
   b7ba0:	b508      	push	{r3, lr}
	return month(now());
   b7ba2:	f7ff ffbc 	bl	b7b1e <_ZN9TimeClass3nowEv>
}
   b7ba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b7baa:	17c1      	asrs	r1, r0, #31
   b7bac:	f7ff bf70 	b.w	b7a90 <_ZN9TimeClass5monthEx>

000b7bb0 <_ZN9TimeClass4yearEv>:
{
   b7bb0:	b508      	push	{r3, lr}
	return year(now());
   b7bb2:	f7ff ffb4 	bl	b7b1e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b7bb6:	17c1      	asrs	r1, r0, #31
   b7bb8:	f7ff ff26 	bl	b7a08 <_ZL22Refresh_UnixTime_Cachex>
}
   b7bbc:	4b01      	ldr	r3, [pc, #4]	; (b7bc4 <_ZN9TimeClass4yearEv+0x14>)
   b7bbe:	6958      	ldr	r0, [r3, #20]
   b7bc0:	bd08      	pop	{r3, pc}
   b7bc2:	bf00      	nop
   b7bc4:	2003e6a4 	.word	0x2003e6a4

000b7bc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7bc8:	4b02      	ldr	r3, [pc, #8]	; (b7bd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7bca:	681a      	ldr	r2, [r3, #0]
   b7bcc:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7bce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7bd0:	4770      	bx	lr
   b7bd2:	bf00      	nop
   b7bd4:	2003d980 	.word	0x2003d980
   b7bd8:	2003e6a0 	.word	0x2003e6a0

000b7bdc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7bdc:	2100      	movs	r1, #0
   b7bde:	f7fd be9f 	b.w	b5920 <system_delay_ms>
	...

000b7be4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7be4:	4b01      	ldr	r3, [pc, #4]	; (b7bec <_GLOBAL__sub_I_RGB+0x8>)
   b7be6:	2200      	movs	r2, #0
   b7be8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7bea:	4770      	bx	lr
   b7bec:	2003e6e0 	.word	0x2003e6e0

000b7bf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7bf0:	4b01      	ldr	r3, [pc, #4]	; (b7bf8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7bf2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7bf4:	4770      	bx	lr
   b7bf6:	bf00      	nop
   b7bf8:	2003d984 	.word	0x2003d984

000b7bfc <serialEventRun>:
{
   b7bfc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7bfe:	4b0b      	ldr	r3, [pc, #44]	; (b7c2c <serialEventRun+0x30>)
   b7c00:	b143      	cbz	r3, b7c14 <serialEventRun+0x18>
   b7c02:	f000 fc19 	bl	b8438 <_Z16_fetch_usbserialv>
   b7c06:	6803      	ldr	r3, [r0, #0]
   b7c08:	691b      	ldr	r3, [r3, #16]
   b7c0a:	4798      	blx	r3
   b7c0c:	2800      	cmp	r0, #0
   b7c0e:	dd01      	ble.n	b7c14 <serialEventRun+0x18>
        serialEvent();
   b7c10:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7c14:	4b06      	ldr	r3, [pc, #24]	; (b7c30 <serialEventRun+0x34>)
   b7c16:	b143      	cbz	r3, b7c2a <serialEventRun+0x2e>
   b7c18:	f000 ff2a 	bl	b8a70 <_Z22__fetch_global_Serial1v>
   b7c1c:	6803      	ldr	r3, [r0, #0]
   b7c1e:	691b      	ldr	r3, [r3, #16]
   b7c20:	4798      	blx	r3
   b7c22:	2800      	cmp	r0, #0
   b7c24:	dd01      	ble.n	b7c2a <serialEventRun+0x2e>
        serialEvent1();
   b7c26:	f3af 8000 	nop.w
}
   b7c2a:	bd08      	pop	{r3, pc}
	...

000b7c34 <_post_loop>:
{
   b7c34:	b508      	push	{r3, lr}
	serialEventRun();
   b7c36:	f7ff ffe1 	bl	b7bfc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7c3a:	f7fd fc4f 	bl	b54dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7c3e:	4b01      	ldr	r3, [pc, #4]	; (b7c44 <_post_loop+0x10>)
   b7c40:	6018      	str	r0, [r3, #0]
}
   b7c42:	bd08      	pop	{r3, pc}
   b7c44:	2003e744 	.word	0x2003e744

000b7c48 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c48:	4805      	ldr	r0, [pc, #20]	; (b7c60 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7c4a:	4a06      	ldr	r2, [pc, #24]	; (b7c64 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7c4c:	4906      	ldr	r1, [pc, #24]	; (b7c68 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7c4e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7c50:	1a12      	subs	r2, r2, r0
   b7c52:	f001 fd6e 	bl	b9732 <memcpy>
    __backup_sram_signature = signature;
   b7c56:	4b05      	ldr	r3, [pc, #20]	; (b7c6c <_Z33system_initialize_user_backup_ramv+0x24>)
   b7c58:	4a05      	ldr	r2, [pc, #20]	; (b7c70 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7c5a:	601a      	str	r2, [r3, #0]
}
   b7c5c:	bd08      	pop	{r3, pc}
   b7c5e:	bf00      	nop
   b7c60:	2003f400 	.word	0x2003f400
   b7c64:	2003f404 	.word	0x2003f404
   b7c68:	000bc804 	.word	0x000bc804
   b7c6c:	2003f400 	.word	0x2003f400
   b7c70:	9a271c1e 	.word	0x9a271c1e

000b7c74 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7c74:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7c76:	2300      	movs	r3, #0
   b7c78:	9300      	str	r3, [sp, #0]
   b7c7a:	461a      	mov	r2, r3
   b7c7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7c80:	f7fd fe80 	bl	b5984 <system_ctrl_set_result>
}
   b7c84:	b003      	add	sp, #12
   b7c86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7c8c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7c8c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7c8e:	8843      	ldrh	r3, [r0, #2]
   b7c90:	2b0a      	cmp	r3, #10
   b7c92:	d008      	beq.n	b7ca6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7c94:	2b50      	cmp	r3, #80	; 0x50
   b7c96:	d10b      	bne.n	b7cb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7c98:	4b09      	ldr	r3, [pc, #36]	; (b7cc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7c9a:	681b      	ldr	r3, [r3, #0]
   b7c9c:	b14b      	cbz	r3, b7cb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7c9e:	b003      	add	sp, #12
   b7ca0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7ca4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7ca6:	f7ff ffe5 	bl	b7c74 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7caa:	b003      	add	sp, #12
   b7cac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7cb0:	2300      	movs	r3, #0
   b7cb2:	9300      	str	r3, [sp, #0]
   b7cb4:	461a      	mov	r2, r3
   b7cb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7cba:	f7fd fe63 	bl	b5984 <system_ctrl_set_result>
}
   b7cbe:	e7f4      	b.n	b7caa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7cc0:	2003e6f4 	.word	0x2003e6f4

000b7cc4 <module_user_init_hook>:
{
   b7cc4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7cc6:	4812      	ldr	r0, [pc, #72]	; (b7d10 <module_user_init_hook+0x4c>)
   b7cc8:	2100      	movs	r1, #0
   b7cca:	f7fd ff3d 	bl	b5b48 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7cce:	4b11      	ldr	r3, [pc, #68]	; (b7d14 <module_user_init_hook+0x50>)
   b7cd0:	681a      	ldr	r2, [r3, #0]
   b7cd2:	4b11      	ldr	r3, [pc, #68]	; (b7d18 <module_user_init_hook+0x54>)
   b7cd4:	429a      	cmp	r2, r3
   b7cd6:	4b11      	ldr	r3, [pc, #68]	; (b7d1c <module_user_init_hook+0x58>)
   b7cd8:	bf0c      	ite	eq
   b7cda:	2201      	moveq	r2, #1
   b7cdc:	2200      	movne	r2, #0
   b7cde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7ce0:	d001      	beq.n	b7ce6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7ce2:	f7ff ffb1 	bl	b7c48 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7ce6:	f7fd fbe9 	bl	b54bc <HAL_RNG_GetRandomNumber>
   b7cea:	4604      	mov	r4, r0
    srand(seed);
   b7cec:	f001 fd52 	bl	b9794 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7cf0:	4b0b      	ldr	r3, [pc, #44]	; (b7d20 <module_user_init_hook+0x5c>)
   b7cf2:	b113      	cbz	r3, b7cfa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7cf4:	4620      	mov	r0, r4
   b7cf6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7cfa:	2100      	movs	r1, #0
   b7cfc:	4808      	ldr	r0, [pc, #32]	; (b7d20 <module_user_init_hook+0x5c>)
   b7cfe:	f7fd fed3 	bl	b5aa8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7d06:	4807      	ldr	r0, [pc, #28]	; (b7d24 <module_user_init_hook+0x60>)
   b7d08:	2100      	movs	r1, #0
   b7d0a:	f7fd be31 	b.w	b5970 <system_ctrl_set_app_request_handler>
   b7d0e:	bf00      	nop
   b7d10:	000b7bf1 	.word	0x000b7bf1
   b7d14:	2003f400 	.word	0x2003f400
   b7d18:	9a271c1e 	.word	0x9a271c1e
   b7d1c:	2003e6f0 	.word	0x2003e6f0
   b7d20:	00000000 	.word	0x00000000
   b7d24:	000b7c8d 	.word	0x000b7c8d

000b7d28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7d28:	4770      	bx	lr

000b7d2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7d2a:	2000      	movs	r0, #0
   b7d2c:	4770      	bx	lr

000b7d2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7d2e:	b510      	push	{r4, lr}
   b7d30:	2110      	movs	r1, #16
   b7d32:	4604      	mov	r4, r0
   b7d34:	f7fc f9b3 	bl	b409e <_ZdlPvj>
   b7d38:	4620      	mov	r0, r4
   b7d3a:	bd10      	pop	{r4, pc}

000b7d3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7d3c:	b508      	push	{r3, lr}
      { delete this; }
   b7d3e:	f7ff fff6 	bl	b7d2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b7d42:	bd08      	pop	{r3, pc}

000b7d44 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7d44:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7d46:	2200      	movs	r2, #0
   b7d48:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7d4c:	6002      	str	r2, [r0, #0]
   b7d4e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7d50:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d52:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7d54:	680c      	ldr	r4, [r1, #0]
   b7d56:	8085      	strh	r5, [r0, #4]
   b7d58:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d5a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7d5c:	bd30      	pop	{r4, r5, pc}

000b7d5e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b7d5e:	b510      	push	{r4, lr}
   b7d60:	4604      	mov	r4, r0
    free((void*)msg_);
   b7d62:	6800      	ldr	r0, [r0, #0]
   b7d64:	f7fd feb0 	bl	b5ac8 <free>
}
   b7d68:	4620      	mov	r0, r4
   b7d6a:	bd10      	pop	{r4, pc}

000b7d6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7d6c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b7d6e:	68c4      	ldr	r4, [r0, #12]
   b7d70:	b1f4      	cbz	r4, b7db0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b7d72:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b7d74:	2b02      	cmp	r3, #2
   b7d76:	d103      	bne.n	b7d80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b7d78:	f104 000c 	add.w	r0, r4, #12
   b7d7c:	f7ff ffef 	bl	b7d5e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b7d80:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b7d82:	b135      	cbz	r5, b7d92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b7d84:	4628      	mov	r0, r5
   b7d86:	f7fc fb27 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
   b7d8a:	2110      	movs	r1, #16
   b7d8c:	4628      	mov	r0, r5
   b7d8e:	f7fc f986 	bl	b409e <_ZdlPvj>
   b7d92:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b7d94:	b135      	cbz	r5, b7da4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b7d96:	4628      	mov	r0, r5
   b7d98:	f7fc fb1e 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
   b7d9c:	2110      	movs	r1, #16
   b7d9e:	4628      	mov	r0, r5
   b7da0:	f7fc f97d 	bl	b409e <_ZdlPvj>
   b7da4:	4620      	mov	r0, r4
   b7da6:	2114      	movs	r1, #20
   b7da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7dac:	f7fc b977 	b.w	b409e <_ZdlPvj>
   b7db0:	bd38      	pop	{r3, r4, r5, pc}

000b7db2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7db2:	680b      	ldr	r3, [r1, #0]
   b7db4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7db6:	684b      	ldr	r3, [r1, #4]
   b7db8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7dba:	b113      	cbz	r3, b7dc2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b7dbc:	685a      	ldr	r2, [r3, #4]
   b7dbe:	3201      	adds	r2, #1
   b7dc0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7dc2:	4770      	bx	lr

000b7dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b7dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7dc6:	4604      	mov	r4, r0
   b7dc8:	4668      	mov	r0, sp
   b7dca:	460d      	mov	r5, r1
   b7dcc:	f7ff fff1 	bl	b7db2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7dd0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7dd2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7dd4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7dd6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7dd8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7dda:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7ddc:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b7dde:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b7de0:	f7fc ff56 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7de4:	b135      	cbz	r5, b7df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7de6:	1d28      	adds	r0, r5, #4
   b7de8:	f7fc ff52 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7dec:	2108      	movs	r1, #8
   b7dee:	4628      	mov	r0, r5
   b7df0:	f7fc f955 	bl	b409e <_ZdlPvj>
        return p;
    }
   b7df4:	4620      	mov	r0, r4
   b7df6:	b003      	add	sp, #12
   b7df8:	bd30      	pop	{r4, r5, pc}

000b7dfa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b7dfa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7dfc:	b510      	push	{r4, lr}
      if (_M_empty())
   b7dfe:	b90a      	cbnz	r2, b7e04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b7e00:	f000 fe9c 	bl	b8b3c <_ZSt25__throw_bad_function_callv>
    }
   b7e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7e08:	68c3      	ldr	r3, [r0, #12]
   b7e0a:	4718      	bx	r3

000b7e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7e0c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7e0e:	6800      	ldr	r0, [r0, #0]
   b7e10:	f100 0110 	add.w	r1, r0, #16
   b7e14:	f7ff fff1 	bl	b7dfa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7e18:	bd08      	pop	{r3, pc}

000b7e1a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7e1a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7e1c:	b510      	push	{r4, lr}
      if (_M_empty())
   b7e1e:	b90a      	cbnz	r2, b7e24 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b7e20:	f000 fe8c 	bl	b8b3c <_ZSt25__throw_bad_function_callv>
    }
   b7e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7e28:	68c3      	ldr	r3, [r0, #12]
   b7e2a:	4718      	bx	r3

000b7e2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7e2c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b7e2e:	6800      	ldr	r0, [r0, #0]
   b7e30:	f100 0110 	add.w	r1, r0, #16
   b7e34:	f7ff fff1 	bl	b7e1a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7e38:	bd08      	pop	{r3, pc}
	...

000b7e3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7e3c:	b538      	push	{r3, r4, r5, lr}
   b7e3e:	2300      	movs	r3, #0
   b7e40:	4604      	mov	r4, r0
   b7e42:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e44:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7e46:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e48:	f7fc f925 	bl	b4096 <_Znwj>
   b7e4c:	b128      	cbz	r0, b7e5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b7e4e:	2301      	movs	r3, #1
   b7e50:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7e54:	4b02      	ldr	r3, [pc, #8]	; (b7e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7e56:	6003      	str	r3, [r0, #0]
   b7e58:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7e5a:	6020      	str	r0, [r4, #0]
	}
   b7e5c:	4620      	mov	r0, r4
   b7e5e:	bd38      	pop	{r3, r4, r5, pc}
   b7e60:	000bc0c8 	.word	0x000bc0c8

000b7e64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7e64:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7e66:	2300      	movs	r3, #0
   b7e68:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7e6a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7e6c:	4604      	mov	r4, r0
   b7e6e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7e70:	b12b      	cbz	r3, b7e7e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7e72:	2202      	movs	r2, #2
   b7e74:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7e76:	68eb      	ldr	r3, [r5, #12]
   b7e78:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b7e7a:	68ab      	ldr	r3, [r5, #8]
   b7e7c:	60a3      	str	r3, [r4, #8]
    }
   b7e7e:	4620      	mov	r0, r4
   b7e80:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7e84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b7e84:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7e86:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b7e88:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b7e8a:	4668      	mov	r0, sp
   b7e8c:	f7ff ff5a 	bl	b7d44 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7e90:	f04f 0302 	mov.w	r3, #2
   b7e94:	e8d4 2f4f 	ldrexb	r2, [r4]
   b7e98:	2a00      	cmp	r2, #0
   b7e9a:	d103      	bne.n	b7ea4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b7e9c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b7ea0:	2900      	cmp	r1, #0
   b7ea2:	d1f7      	bne.n	b7e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b7ea4:	d125      	bne.n	b7ef2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b7ea6:	f104 050c 	add.w	r5, r4, #12
   b7eaa:	4669      	mov	r1, sp
   b7eac:	4628      	mov	r0, r5
   b7eae:	f7ff ff49 	bl	b7d44 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b7eb2:	f3bf 8f5b 	dmb	ish
   b7eb6:	2301      	movs	r3, #1
   b7eb8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7eba:	2000      	movs	r0, #0
   b7ebc:	f104 0308 	add.w	r3, r4, #8
   b7ec0:	f3bf 8f5b 	dmb	ish
   b7ec4:	e853 6f00 	ldrex	r6, [r3]
   b7ec8:	e843 0200 	strex	r2, r0, [r3]
   b7ecc:	2a00      	cmp	r2, #0
   b7ece:	d1f9      	bne.n	b7ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b7ed0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7ed4:	b16e      	cbz	r6, b7ef2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7ed6:	f7fd fd33 	bl	b5940 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7eda:	b178      	cbz	r0, b7efc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7edc:	4629      	mov	r1, r5
   b7ede:	4630      	mov	r0, r6
   b7ee0:	f7ff ff8b 	bl	b7dfa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7ee4:	4630      	mov	r0, r6
   b7ee6:	f7fc fa77 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7eea:	2110      	movs	r1, #16
   b7eec:	4630      	mov	r0, r6
   b7eee:	f7fc f8d6 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b7ef2:	4668      	mov	r0, sp
   b7ef4:	f7ff ff33 	bl	b7d5e <_ZN8particle5ErrorD1Ev>
    }
   b7ef8:	b009      	add	sp, #36	; 0x24
   b7efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7efc:	4631      	mov	r1, r6
   b7efe:	a802      	add	r0, sp, #8
   b7f00:	f7ff ffb0 	bl	b7e64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7f04:	68e0      	ldr	r0, [r4, #12]
   b7f06:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7f0a:	b108      	cbz	r0, b7f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7f0c:	f001 fc92 	bl	b9834 <strdup>
        type_(type) {
   b7f10:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b7f12:	2010      	movs	r0, #16
   b7f14:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7f18:	f7fc f8bd 	bl	b4096 <_Znwj>
   b7f1c:	4605      	mov	r5, r0
   b7f1e:	b1e8      	cbz	r0, b7f5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b7f20:	2700      	movs	r7, #0
   b7f22:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7f24:	2018      	movs	r0, #24
   b7f26:	f7fc f8b6 	bl	b4096 <_Znwj>
   b7f2a:	4604      	mov	r4, r0
   b7f2c:	b188      	cbz	r0, b7f52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b7f2e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b7f30:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b7f32:	a802      	add	r0, sp, #8
   b7f34:	f7ff fa1a 	bl	b736c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f38:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7f3a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f3c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7f3e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7f40:	9204      	str	r2, [sp, #16]
   b7f42:	a906      	add	r1, sp, #24
   b7f44:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7f46:	60e3      	str	r3, [r4, #12]
   b7f48:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7f4c:	9205      	str	r2, [sp, #20]
   b7f4e:	f7ff fef9 	bl	b7d44 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b7f52:	4b08      	ldr	r3, [pc, #32]	; (b7f74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7f54:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7f56:	4b08      	ldr	r3, [pc, #32]	; (b7f78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7f58:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7f5a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7f5c:	a806      	add	r0, sp, #24
   b7f5e:	f7ff fefe 	bl	b7d5e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b7f62:	a802      	add	r0, sp, #8
   b7f64:	f7fc fa38 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7f68:	2200      	movs	r2, #0
   b7f6a:	4629      	mov	r1, r5
   b7f6c:	4803      	ldr	r0, [pc, #12]	; (b7f7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b7f6e:	f7fd fcef 	bl	b5950 <application_thread_invoke>
   b7f72:	e7b7      	b.n	b7ee4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b7f74:	000b7e0d 	.word	0x000b7e0d
   b7f78:	000b8091 	.word	0x000b8091
   b7f7c:	000b8581 	.word	0x000b8581

000b7f80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b7f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f84:	b08b      	sub	sp, #44	; 0x2c
   b7f86:	4605      	mov	r5, r0
   b7f88:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b7f8c:	460f      	mov	r7, r1
   b7f8e:	4690      	mov	r8, r2
   b7f90:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7f92:	f7fd fd69 	bl	b5a68 <spark_cloud_flag_connected>
   b7f96:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b7f98:	4683      	mov	fp, r0
   b7f9a:	bb38      	cbnz	r0, b7fec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b7f9c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b7fa0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7fa2:	a905      	add	r1, sp, #20
   b7fa4:	4630      	mov	r0, r6
   b7fa6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b7faa:	f7ff fecb 	bl	b7d44 <_ZN8particle5ErrorC1EOS0_>
   b7fae:	2014      	movs	r0, #20
   b7fb0:	f7fc f871 	bl	b4096 <_Znwj>
   b7fb4:	4604      	mov	r4, r0
   b7fb6:	b148      	cbz	r0, b7fcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b7fb8:	2302      	movs	r3, #2
   b7fba:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7fbc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b7fbe:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7fc2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b7fc4:	4631      	mov	r1, r6
   b7fc6:	300c      	adds	r0, #12
   b7fc8:	f7ff febc 	bl	b7d44 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7fcc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b7fce:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7fd0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7fd4:	f7ff ff32 	bl	b7e3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7fd8:	4630      	mov	r0, r6
   b7fda:	f7ff fec0 	bl	b7d5e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b7fde:	a805      	add	r0, sp, #20
   b7fe0:	f7ff febd 	bl	b7d5e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b7fe4:	4628      	mov	r0, r5
   b7fe6:	b00b      	add	sp, #44	; 0x2c
   b7fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b7fec:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b7fee:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b7ff0:	2014      	movs	r0, #20
   b7ff2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b7ff6:	9307      	str	r3, [sp, #28]
   b7ff8:	f7fc f84d 	bl	b4096 <_Znwj>
   b7ffc:	4601      	mov	r1, r0
   b7ffe:	b118      	cbz	r0, b8008 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8000:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8004:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8006:	7044      	strb	r4, [r0, #1]
   b8008:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b800a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b800c:	f7ff ff16 	bl	b7e3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8010:	4b1e      	ldr	r3, [pc, #120]	; (b808c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8012:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8014:	2008      	movs	r0, #8
   b8016:	f7fc f83e 	bl	b4096 <_Znwj>
   b801a:	4604      	mov	r4, r0
   b801c:	b110      	cbz	r0, b8024 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b801e:	a903      	add	r1, sp, #12
   b8020:	f7ff fec7 	bl	b7db2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8024:	9600      	str	r6, [sp, #0]
   b8026:	fa5f f38a 	uxtb.w	r3, sl
   b802a:	464a      	mov	r2, r9
   b802c:	4641      	mov	r1, r8
   b802e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8030:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8032:	f7fd fd21 	bl	b5a78 <spark_send_event>
   b8036:	b9b8      	cbnz	r0, b8068 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8038:	9b03      	ldr	r3, [sp, #12]
   b803a:	785b      	ldrb	r3, [r3, #1]
   b803c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8040:	b993      	cbnz	r3, b8068 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8042:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8046:	a905      	add	r1, sp, #20
   b8048:	a803      	add	r0, sp, #12
   b804a:	9205      	str	r2, [sp, #20]
   b804c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8050:	f7ff ff18 	bl	b7e84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8054:	a805      	add	r0, sp, #20
   b8056:	f7ff fe82 	bl	b7d5e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b805a:	a805      	add	r0, sp, #20
   b805c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b805e:	f7ff feb1 	bl	b7dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8062:	a806      	add	r0, sp, #24
   b8064:	f7fc fe14 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8068:	a903      	add	r1, sp, #12
   b806a:	a805      	add	r0, sp, #20
   b806c:	f7ff fea1 	bl	b7db2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8070:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8072:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8074:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b8076:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8078:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b807a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b807c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b807e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8080:	f7fc fe06 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8084:	a804      	add	r0, sp, #16
   b8086:	f7fc fe03 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b808a:	e7ab      	b.n	b7fe4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b808c:	000b810d 	.word	0x000b810d

000b8090 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8090:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8094:	4605      	mov	r5, r0
	switch (__op)
   b8096:	d103      	bne.n	b80a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8098:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b809a:	6003      	str	r3, [r0, #0]
      }
   b809c:	2000      	movs	r0, #0
   b809e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b80a0:	2a02      	cmp	r2, #2
   b80a2:	d010      	beq.n	b80c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b80a4:	2a03      	cmp	r2, #3
   b80a6:	d1f9      	bne.n	b809c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b80a8:	6804      	ldr	r4, [r0, #0]
   b80aa:	2c00      	cmp	r4, #0
   b80ac:	d0f6      	beq.n	b809c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b80ae:	f104 0010 	add.w	r0, r4, #16
   b80b2:	f7ff fe54 	bl	b7d5e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b80b6:	4620      	mov	r0, r4
   b80b8:	f7fc f98e 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b80bc:	2118      	movs	r1, #24
   b80be:	4620      	mov	r0, r4
   b80c0:	f7fb ffed 	bl	b409e <_ZdlPvj>
   b80c4:	e7ea      	b.n	b809c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b80c6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b80c8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b80ca:	f7fb ffe4 	bl	b4096 <_Znwj>
   b80ce:	4604      	mov	r4, r0
   b80d0:	b150      	cbz	r0, b80e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b80d2:	4631      	mov	r1, r6
   b80d4:	f7ff fec6 	bl	b7e64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b80d8:	6930      	ldr	r0, [r6, #16]
   b80da:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b80de:	b108      	cbz	r0, b80e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b80e0:	f001 fba8 	bl	b9834 <strdup>
        type_(type) {
   b80e4:	6120      	str	r0, [r4, #16]
   b80e6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b80e8:	602c      	str	r4, [r5, #0]
	}
   b80ea:	e7d7      	b.n	b809c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b80ec <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b80ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b80ee:	2300      	movs	r3, #0
   b80f0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b80f2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b80f4:	4604      	mov	r4, r0
   b80f6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b80f8:	b12b      	cbz	r3, b8106 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b80fa:	2202      	movs	r2, #2
   b80fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b80fe:	68eb      	ldr	r3, [r5, #12]
   b8100:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8102:	68ab      	ldr	r3, [r5, #8]
   b8104:	60a3      	str	r3, [r4, #8]
    }
   b8106:	4620      	mov	r0, r4
   b8108:	bd38      	pop	{r3, r4, r5, pc}
	...

000b810c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b810c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b810e:	b089      	sub	sp, #36	; 0x24
   b8110:	4604      	mov	r4, r0
   b8112:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8114:	a801      	add	r0, sp, #4
   b8116:	4611      	mov	r1, r2
   b8118:	f7ff fe54 	bl	b7dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b811c:	b1a4      	cbz	r4, b8148 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b811e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8120:	b11d      	cbz	r5, b812a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b8122:	4628      	mov	r0, r5
   b8124:	f001 fb86 	bl	b9834 <strdup>
   b8128:	4605      	mov	r5, r0
   b812a:	a801      	add	r0, sp, #4
   b812c:	a903      	add	r1, sp, #12
        type_(type) {
   b812e:	9503      	str	r5, [sp, #12]
   b8130:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8134:	f7ff fea6 	bl	b7e84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8138:	a803      	add	r0, sp, #12
   b813a:	f7ff fe10 	bl	b7d5e <_ZN8particle5ErrorD1Ev>
   b813e:	a802      	add	r0, sp, #8
   b8140:	f7fc fda6 	bl	b4c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8144:	b009      	add	sp, #36	; 0x24
   b8146:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b8148:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b814a:	2301      	movs	r3, #1
   b814c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8150:	2a00      	cmp	r2, #0
   b8152:	d103      	bne.n	b815c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8154:	e8c5 3f41 	strexb	r1, r3, [r5]
   b8158:	2900      	cmp	r1, #0
   b815a:	d1f7      	bne.n	b814c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b815c:	d1ef      	bne.n	b813e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b815e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8160:	f3bf 8f5b 	dmb	ish
   b8164:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8166:	1d2b      	adds	r3, r5, #4
   b8168:	f3bf 8f5b 	dmb	ish
   b816c:	e853 6f00 	ldrex	r6, [r3]
   b8170:	e843 4200 	strex	r2, r4, [r3]
   b8174:	2a00      	cmp	r2, #0
   b8176:	d1f9      	bne.n	b816c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8178:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b817c:	2e00      	cmp	r6, #0
   b817e:	d0de      	beq.n	b813e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8180:	4620      	mov	r0, r4
   b8182:	f7fd fbdd 	bl	b5940 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8186:	4607      	mov	r7, r0
   b8188:	b160      	cbz	r0, b81a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b818a:	f105 010c 	add.w	r1, r5, #12
   b818e:	4630      	mov	r0, r6
   b8190:	f7ff fe43 	bl	b7e1a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8194:	4630      	mov	r0, r6
   b8196:	f7fc f91f 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b819a:	2110      	movs	r1, #16
   b819c:	4630      	mov	r0, r6
   b819e:	f7fb ff7e 	bl	b409e <_ZdlPvj>
   b81a2:	e7cc      	b.n	b813e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b81a4:	4631      	mov	r1, r6
   b81a6:	a803      	add	r0, sp, #12
   b81a8:	f7ff ffa0 	bl	b80ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b81ac:	7b2b      	ldrb	r3, [r5, #12]
   b81ae:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b81b2:	2010      	movs	r0, #16
   b81b4:	f7fb ff6f 	bl	b4096 <_Znwj>
   b81b8:	4605      	mov	r5, r0
   b81ba:	b1d0      	cbz	r0, b81f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b81bc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81be:	2014      	movs	r0, #20
   b81c0:	f7fb ff69 	bl	b4096 <_Znwj>
   b81c4:	4604      	mov	r4, r0
   b81c6:	b178      	cbz	r0, b81e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b81c8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b81ca:	4601      	mov	r1, r0
   b81cc:	a803      	add	r0, sp, #12
   b81ce:	f7ff f8cd 	bl	b736c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b81d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b81d4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b81d6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b81d8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b81da:	9205      	str	r2, [sp, #20]
   b81dc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b81de:	60e3      	str	r3, [r4, #12]
   b81e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b81e4:	9206      	str	r2, [sp, #24]
   b81e6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b81e8:	4b06      	ldr	r3, [pc, #24]	; (b8204 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b81ea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b81ec:	4b06      	ldr	r3, [pc, #24]	; (b8208 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81ee:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b81f0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b81f2:	a803      	add	r0, sp, #12
   b81f4:	f7fc f8f0 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b81f8:	2200      	movs	r2, #0
   b81fa:	4629      	mov	r1, r5
   b81fc:	4803      	ldr	r0, [pc, #12]	; (b820c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b81fe:	f7fd fba7 	bl	b5950 <application_thread_invoke>
   b8202:	e7c7      	b.n	b8194 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b8204:	000b7e2d 	.word	0x000b7e2d
   b8208:	000b8211 	.word	0x000b8211
   b820c:	000b8581 	.word	0x000b8581

000b8210 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8210:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8212:	b570      	push	{r4, r5, r6, lr}
   b8214:	4604      	mov	r4, r0
	switch (__op)
   b8216:	d103      	bne.n	b8220 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8218:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b821a:	6003      	str	r3, [r0, #0]
      }
   b821c:	2000      	movs	r0, #0
   b821e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b8220:	2a02      	cmp	r2, #2
   b8222:	d00c      	beq.n	b823e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8224:	2a03      	cmp	r2, #3
   b8226:	d1f9      	bne.n	b821c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8228:	6804      	ldr	r4, [r0, #0]
   b822a:	2c00      	cmp	r4, #0
   b822c:	d0f6      	beq.n	b821c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b822e:	4620      	mov	r0, r4
   b8230:	f7fc f8d2 	bl	b43d8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8234:	2114      	movs	r1, #20
   b8236:	4620      	mov	r0, r4
   b8238:	f7fb ff31 	bl	b409e <_ZdlPvj>
   b823c:	e7ee      	b.n	b821c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b823e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8240:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8242:	f7fb ff28 	bl	b4096 <_Znwj>
   b8246:	4605      	mov	r5, r0
   b8248:	b120      	cbz	r0, b8254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b824a:	4631      	mov	r1, r6
   b824c:	f7ff ff4e 	bl	b80ec <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8250:	7c33      	ldrb	r3, [r6, #16]
   b8252:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8254:	6025      	str	r5, [r4, #0]
	}
   b8256:	e7e1      	b.n	b821c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b8258 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b8258:	4770      	bx	lr

000b825a <_ZN9IPAddressD0Ev>:
   b825a:	b510      	push	{r4, lr}
   b825c:	2118      	movs	r1, #24
   b825e:	4604      	mov	r4, r0
   b8260:	f7fb ff1d 	bl	b409e <_ZdlPvj>
   b8264:	4620      	mov	r0, r4
   b8266:	bd10      	pop	{r4, pc}

000b8268 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8268:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b826a:	7d03      	ldrb	r3, [r0, #20]
   b826c:	2b06      	cmp	r3, #6
{
   b826e:	b08d      	sub	sp, #52	; 0x34
   b8270:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8272:	f100 0704 	add.w	r7, r0, #4
   b8276:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b827a:	d012      	beq.n	b82a2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b827c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8280:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8284:	220a      	movs	r2, #10
   b8286:	4630      	mov	r0, r6
   b8288:	f7ff fb67 	bl	b795a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b828c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b828e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8290:	d019      	beq.n	b82c6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8292:	2c00      	cmp	r4, #0
   b8294:	d0f4      	beq.n	b8280 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8296:	212e      	movs	r1, #46	; 0x2e
   b8298:	4630      	mov	r0, r6
   b829a:	f7ff fb45 	bl	b7928 <_ZN5Print5printEc>
   b829e:	4404      	add	r4, r0
   b82a0:	e7ee      	b.n	b8280 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b82a2:	232f      	movs	r3, #47	; 0x2f
   b82a4:	466a      	mov	r2, sp
   b82a6:	4639      	mov	r1, r7
   b82a8:	200a      	movs	r0, #10
		buf[0] = 0;
   b82aa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b82ae:	f7fd fa07 	bl	b56c0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b82b2:	4668      	mov	r0, sp
   b82b4:	f001 fadb 	bl	b986e <strlen>
   b82b8:	6833      	ldr	r3, [r6, #0]
   b82ba:	4602      	mov	r2, r0
   b82bc:	68db      	ldr	r3, [r3, #12]
   b82be:	4669      	mov	r1, sp
   b82c0:	4630      	mov	r0, r6
   b82c2:	4798      	blx	r3
   b82c4:	4604      	mov	r4, r0
    }
    return n;
}
   b82c6:	4620      	mov	r0, r4
   b82c8:	b00d      	add	sp, #52	; 0x34
   b82ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b82cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b82cc:	b510      	push	{r4, lr}
   b82ce:	4b05      	ldr	r3, [pc, #20]	; (b82e4 <_ZN9IPAddressC1Ev+0x18>)
   b82d0:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b82d2:	2211      	movs	r2, #17
   b82d4:	f840 3b04 	str.w	r3, [r0], #4
   b82d8:	2100      	movs	r1, #0
   b82da:	f001 fa52 	bl	b9782 <memset>
}
   b82de:	4620      	mov	r0, r4
   b82e0:	bd10      	pop	{r4, pc}
   b82e2:	bf00      	nop
   b82e4:	000bc0e4 	.word	0x000bc0e4

000b82e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b82e8:	4603      	mov	r3, r0
   b82ea:	4a07      	ldr	r2, [pc, #28]	; (b8308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b82ec:	b510      	push	{r4, lr}
   b82ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b82f2:	f101 0210 	add.w	r2, r1, #16
   b82f6:	f851 4b04 	ldr.w	r4, [r1], #4
   b82fa:	f843 4b04 	str.w	r4, [r3], #4
   b82fe:	4291      	cmp	r1, r2
   b8300:	d1f9      	bne.n	b82f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8302:	780a      	ldrb	r2, [r1, #0]
   b8304:	701a      	strb	r2, [r3, #0]
}
   b8306:	bd10      	pop	{r4, pc}
   b8308:	000bc0e4 	.word	0x000bc0e4

000b830c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b830c:	4a02      	ldr	r2, [pc, #8]	; (b8318 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b830e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b8312:	2204      	movs	r2, #4
   b8314:	7502      	strb	r2, [r0, #20]
}
   b8316:	4770      	bx	lr
   b8318:	000bc0e4 	.word	0x000bc0e4

000b831c <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b831c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b831e:	2b04      	cmp	r3, #4
   b8320:	d104      	bne.n	b832c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8322:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8324:	3800      	subs	r0, #0
   b8326:	bf18      	it	ne
   b8328:	2001      	movne	r0, #1
   b832a:	4770      	bx	lr
    } else if (version() == 6) {
   b832c:	2b06      	cmp	r3, #6
   b832e:	d107      	bne.n	b8340 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8330:	6843      	ldr	r3, [r0, #4]
   b8332:	b93b      	cbnz	r3, b8344 <_ZNK9IPAddresscvbEv+0x28>
   b8334:	6883      	ldr	r3, [r0, #8]
   b8336:	b92b      	cbnz	r3, b8344 <_ZNK9IPAddresscvbEv+0x28>
   b8338:	68c3      	ldr	r3, [r0, #12]
   b833a:	b91b      	cbnz	r3, b8344 <_ZNK9IPAddresscvbEv+0x28>
   b833c:	6900      	ldr	r0, [r0, #16]
   b833e:	e7f1      	b.n	b8324 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8340:	2000      	movs	r0, #0
   b8342:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8344:	2001      	movs	r0, #1
}
   b8346:	4770      	bx	lr

000b8348 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8348:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b834a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b834e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8352:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8356:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b835a:	2304      	movs	r3, #4
   b835c:	6041      	str	r1, [r0, #4]
   b835e:	7503      	strb	r3, [r0, #20]
}
   b8360:	bd10      	pop	{r4, pc}
	...

000b8364 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8364:	b507      	push	{r0, r1, r2, lr}
   b8366:	4b06      	ldr	r3, [pc, #24]	; (b8380 <_ZN9IPAddressC1EPKh+0x1c>)
   b8368:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b836a:	78cb      	ldrb	r3, [r1, #3]
   b836c:	9300      	str	r3, [sp, #0]
   b836e:	788b      	ldrb	r3, [r1, #2]
   b8370:	784a      	ldrb	r2, [r1, #1]
   b8372:	7809      	ldrb	r1, [r1, #0]
   b8374:	f7ff ffe8 	bl	b8348 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8378:	b003      	add	sp, #12
   b837a:	f85d fb04 	ldr.w	pc, [sp], #4
   b837e:	bf00      	nop
   b8380:	000bc0e4 	.word	0x000bc0e4

000b8384 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8384:	7441      	strb	r1, [r0, #17]
}
   b8386:	4770      	bx	lr

000b8388 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8388:	4770      	bx	lr

000b838a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b838a:	4770      	bx	lr

000b838c <_ZN9USBSerial4readEv>:
{
   b838c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b838e:	2100      	movs	r1, #0
   b8390:	7c00      	ldrb	r0, [r0, #16]
   b8392:	f7fd fa85 	bl	b58a0 <HAL_USB_USART_Receive_Data>
}
   b8396:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b839a:	bd08      	pop	{r3, pc}

000b839c <_ZN9USBSerial4peekEv>:
{
   b839c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b839e:	2101      	movs	r1, #1
   b83a0:	7c00      	ldrb	r0, [r0, #16]
   b83a2:	f7fd fa7d 	bl	b58a0 <HAL_USB_USART_Receive_Data>
}
   b83a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b83aa:	bd08      	pop	{r3, pc}

000b83ac <_ZN9USBSerial17availableForWriteEv>:
{
   b83ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b83ae:	7c00      	ldrb	r0, [r0, #16]
   b83b0:	f7fd fa6e 	bl	b5890 <HAL_USB_USART_Available_Data_For_Write>
}
   b83b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b83b8:	bd08      	pop	{r3, pc}

000b83ba <_ZN9USBSerial9availableEv>:
{
   b83ba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b83bc:	7c00      	ldrb	r0, [r0, #16]
   b83be:	f7fd fa5f 	bl	b5880 <HAL_USB_USART_Available_Data>
}
   b83c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b83c6:	bd08      	pop	{r3, pc}

000b83c8 <_ZN9USBSerial5writeEh>:
{
   b83c8:	b513      	push	{r0, r1, r4, lr}
   b83ca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b83cc:	7c00      	ldrb	r0, [r0, #16]
{
   b83ce:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b83d0:	f7fd fa5e 	bl	b5890 <HAL_USB_USART_Available_Data_For_Write>
   b83d4:	2800      	cmp	r0, #0
   b83d6:	9901      	ldr	r1, [sp, #4]
   b83d8:	dc01      	bgt.n	b83de <_ZN9USBSerial5writeEh+0x16>
   b83da:	7c60      	ldrb	r0, [r4, #17]
   b83dc:	b120      	cbz	r0, b83e8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b83de:	7c20      	ldrb	r0, [r4, #16]
   b83e0:	f7fd fa66 	bl	b58b0 <HAL_USB_USART_Send_Data>
   b83e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b83e8:	b002      	add	sp, #8
   b83ea:	bd10      	pop	{r4, pc}

000b83ec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b83ec:	7c00      	ldrb	r0, [r0, #16]
   b83ee:	f7fd ba67 	b.w	b58c0 <HAL_USB_USART_Flush_Data>

000b83f2 <_ZN9USBSerialD0Ev>:
   b83f2:	b510      	push	{r4, lr}
   b83f4:	2114      	movs	r1, #20
   b83f6:	4604      	mov	r4, r0
   b83f8:	f7fb fe51 	bl	b409e <_ZdlPvj>
   b83fc:	4620      	mov	r0, r4
   b83fe:	bd10      	pop	{r4, pc}

000b8400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8400:	b510      	push	{r4, lr}
   b8402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8406:	4604      	mov	r4, r0
   b8408:	4608      	mov	r0, r1
   b840a:	2100      	movs	r1, #0
   b840c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8410:	4b04      	ldr	r3, [pc, #16]	; (b8424 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8412:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8414:	2301      	movs	r3, #1
  _serial = serial;
   b8416:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8418:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b841a:	4611      	mov	r1, r2
   b841c:	f7fd fa28 	bl	b5870 <HAL_USB_USART_Init>
}
   b8420:	4620      	mov	r0, r4
   b8422:	bd10      	pop	{r4, pc}
   b8424:	000bc0f8 	.word	0x000bc0f8

000b8428 <_Z19acquireSerialBufferv>:
{
   b8428:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b842a:	2214      	movs	r2, #20
{
   b842c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b842e:	2100      	movs	r1, #0
   b8430:	f001 f9a7 	bl	b9782 <memset>
}
   b8434:	4620      	mov	r0, r4
   b8436:	bd10      	pop	{r4, pc}

000b8438 <_Z16_fetch_usbserialv>:
{
   b8438:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b843a:	4c0f      	ldr	r4, [pc, #60]	; (b8478 <_Z16_fetch_usbserialv+0x40>)
{
   b843c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b843e:	a803      	add	r0, sp, #12
   b8440:	f7ff fff2 	bl	b8428 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8444:	7821      	ldrb	r1, [r4, #0]
   b8446:	f3bf 8f5b 	dmb	ish
   b844a:	f011 0101 	ands.w	r1, r1, #1
   b844e:	d10f      	bne.n	b8470 <_Z16_fetch_usbserialv+0x38>
   b8450:	4620      	mov	r0, r4
   b8452:	9101      	str	r1, [sp, #4]
   b8454:	f7fb fe25 	bl	b40a2 <__cxa_guard_acquire>
   b8458:	9901      	ldr	r1, [sp, #4]
   b845a:	b148      	cbz	r0, b8470 <_Z16_fetch_usbserialv+0x38>
   b845c:	aa03      	add	r2, sp, #12
   b845e:	4807      	ldr	r0, [pc, #28]	; (b847c <_Z16_fetch_usbserialv+0x44>)
   b8460:	f7ff ffce 	bl	b8400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8464:	4620      	mov	r0, r4
   b8466:	f7fb fe21 	bl	b40ac <__cxa_guard_release>
   b846a:	4805      	ldr	r0, [pc, #20]	; (b8480 <_Z16_fetch_usbserialv+0x48>)
   b846c:	f001 f944 	bl	b96f8 <atexit>
	return _usbserial;
}
   b8470:	4802      	ldr	r0, [pc, #8]	; (b847c <_Z16_fetch_usbserialv+0x44>)
   b8472:	b008      	add	sp, #32
   b8474:	bd10      	pop	{r4, pc}
   b8476:	bf00      	nop
   b8478:	2003e6f8 	.word	0x2003e6f8
   b847c:	2003e6fc 	.word	0x2003e6fc
   b8480:	000b8389 	.word	0x000b8389

000b8484 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8484:	4700      	bx	r0
	...

000b8488 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8488:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b848c:	2400      	movs	r4, #0
{
   b848e:	461d      	mov	r5, r3
   b8490:	460f      	mov	r7, r1
   b8492:	4690      	mov	r8, r2
   b8494:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b8496:	f7fd f801 	bl	b549c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b849a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b849c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b84a0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b84a4:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b84a8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b84ac:	bfa2      	ittt	ge
   b84ae:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b84b2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b84b6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b84b8:	4907      	ldr	r1, [pc, #28]	; (b84d8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b84ba:	9400      	str	r4, [sp, #0]
   b84bc:	4643      	mov	r3, r8
   b84be:	463a      	mov	r2, r7
   b84c0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b84c2:	bfa8      	it	ge
   b84c4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b84c8:	f7fc ffe0 	bl	b548c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b84cc:	fab0 f080 	clz	r0, r0
   b84d0:	0940      	lsrs	r0, r0, #5
   b84d2:	b004      	add	sp, #16
   b84d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b84d8:	000b8485 	.word	0x000b8485

000b84dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b84dc:	4770      	bx	lr

000b84de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b84de:	7441      	strb	r1, [r0, #17]
}
   b84e0:	4770      	bx	lr

000b84e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b84e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b84e4:	7c00      	ldrb	r0, [r0, #16]
   b84e6:	f7fd f93b 	bl	b5760 <hal_usart_available_data_for_write>
}
   b84ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b84ee:	bd08      	pop	{r3, pc}

000b84f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b84f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b84f2:	7c00      	ldrb	r0, [r0, #16]
   b84f4:	f7fd f90c 	bl	b5710 <hal_usart_available>
}
   b84f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b84fc:	bd08      	pop	{r3, pc}

000b84fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b84fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8500:	7c00      	ldrb	r0, [r0, #16]
   b8502:	f7fd f915 	bl	b5730 <hal_usart_peek>
}
   b8506:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b850a:	bd08      	pop	{r3, pc}

000b850c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b850c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b850e:	7c00      	ldrb	r0, [r0, #16]
   b8510:	f7fd f906 	bl	b5720 <hal_usart_read>
}
   b8514:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8518:	bd08      	pop	{r3, pc}

000b851a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b851a:	7c00      	ldrb	r0, [r0, #16]
   b851c:	f7fd b910 	b.w	b5740 <hal_usart_flush>

000b8520 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8520:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8522:	7c45      	ldrb	r5, [r0, #17]
{
   b8524:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8526:	b12d      	cbz	r5, b8534 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8528:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b852a:	b003      	add	sp, #12
   b852c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8530:	f7fd b8e6 	b.w	b5700 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8534:	7c00      	ldrb	r0, [r0, #16]
   b8536:	9101      	str	r1, [sp, #4]
   b8538:	f7fd f912 	bl	b5760 <hal_usart_available_data_for_write>
   b853c:	2800      	cmp	r0, #0
   b853e:	9901      	ldr	r1, [sp, #4]
   b8540:	dcf2      	bgt.n	b8528 <_ZN11USARTSerial5writeEh+0x8>
}
   b8542:	4628      	mov	r0, r5
   b8544:	b003      	add	sp, #12
   b8546:	bd30      	pop	{r4, r5, pc}

000b8548 <_ZN11USARTSerialD0Ev>:
   b8548:	b510      	push	{r4, lr}
   b854a:	2114      	movs	r1, #20
   b854c:	4604      	mov	r4, r0
   b854e:	f7fb fda6 	bl	b409e <_ZdlPvj>
   b8552:	4620      	mov	r0, r4
   b8554:	bd10      	pop	{r4, pc}
	...

000b8558 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8558:	b510      	push	{r4, lr}
   b855a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b855e:	4604      	mov	r4, r0
   b8560:	4608      	mov	r0, r1
   b8562:	4611      	mov	r1, r2
   b8564:	2200      	movs	r2, #0
   b8566:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b856a:	4b04      	ldr	r3, [pc, #16]	; (b857c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b856c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b856e:	2301      	movs	r3, #1
  _serial = serial;
   b8570:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8572:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8574:	f7fd f8fc 	bl	b5770 <hal_usart_init_ex>
}
   b8578:	4620      	mov	r0, r4
   b857a:	bd10      	pop	{r4, pc}
   b857c:	000bc128 	.word	0x000bc128

000b8580 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8580:	b510      	push	{r4, lr}
      if (_M_empty())
   b8582:	6883      	ldr	r3, [r0, #8]
   b8584:	4604      	mov	r4, r0
   b8586:	b90b      	cbnz	r3, b858c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8588:	f000 fad8 	bl	b8b3c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b858c:	68c3      	ldr	r3, [r0, #12]
   b858e:	4798      	blx	r3
      if (_M_manager)
   b8590:	68a3      	ldr	r3, [r4, #8]
   b8592:	b11b      	cbz	r3, b859c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8594:	2203      	movs	r2, #3
   b8596:	4621      	mov	r1, r4
   b8598:	4620      	mov	r0, r4
   b859a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b859c:	4620      	mov	r0, r4
   b859e:	2110      	movs	r1, #16
}
   b85a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b85a4:	f7fb bd7b 	b.w	b409e <_ZdlPvj>

000b85a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b85a8:	4770      	bx	lr

000b85aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b85aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b85ac:	4606      	mov	r6, r0
   b85ae:	4615      	mov	r5, r2
   b85b0:	460c      	mov	r4, r1
   b85b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b85b4:	42bc      	cmp	r4, r7
   b85b6:	d006      	beq.n	b85c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b85b8:	6833      	ldr	r3, [r6, #0]
   b85ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   b85be:	689b      	ldr	r3, [r3, #8]
   b85c0:	4630      	mov	r0, r6
   b85c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b85c4:	e7f6      	b.n	b85b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b85c6:	4628      	mov	r0, r5
   b85c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b85ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b85ca:	7c00      	ldrb	r0, [r0, #16]
   b85cc:	2200      	movs	r2, #0
   b85ce:	f7fd b8d7 	b.w	b5780 <hal_i2c_write>

000b85d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b85d2:	7c00      	ldrb	r0, [r0, #16]
   b85d4:	2100      	movs	r1, #0
   b85d6:	f7fd b8db 	b.w	b5790 <hal_i2c_available>

000b85da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b85da:	7c00      	ldrb	r0, [r0, #16]
   b85dc:	2100      	movs	r1, #0
   b85de:	f7fd b8df 	b.w	b57a0 <hal_i2c_read>

000b85e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b85e2:	7c00      	ldrb	r0, [r0, #16]
   b85e4:	2100      	movs	r1, #0
   b85e6:	f7fd b8e3 	b.w	b57b0 <hal_i2c_peek>

000b85ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b85ea:	7c00      	ldrb	r0, [r0, #16]
   b85ec:	2100      	movs	r1, #0
   b85ee:	f7fd b8e7 	b.w	b57c0 <hal_i2c_flush>

000b85f2 <_ZN7TwoWireD0Ev>:
   b85f2:	b510      	push	{r4, lr}
   b85f4:	2114      	movs	r1, #20
   b85f6:	4604      	mov	r4, r0
   b85f8:	f7fb fd51 	bl	b409e <_ZdlPvj>
   b85fc:	4620      	mov	r0, r4
   b85fe:	bd10      	pop	{r4, pc}

000b8600 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8600:	b538      	push	{r3, r4, r5, lr}
   b8602:	4604      	mov	r4, r0
   b8604:	4615      	mov	r5, r2
   b8606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b860a:	2200      	movs	r2, #0
   b860c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8610:	4b09      	ldr	r3, [pc, #36]	; (b8638 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8612:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8614:	4608      	mov	r0, r1
   b8616:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b8618:	4629      	mov	r1, r5
   b861a:	f7fd f8e1 	bl	b57e0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b861e:	30bf      	adds	r0, #191	; 0xbf
   b8620:	d108      	bne.n	b8634 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8622:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8624:	07db      	lsls	r3, r3, #31
   b8626:	d505      	bpl.n	b8634 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b8628:	6868      	ldr	r0, [r5, #4]
   b862a:	f7fd fa4d 	bl	b5ac8 <free>
    free(conf.tx_buffer);
   b862e:	68e8      	ldr	r0, [r5, #12]
   b8630:	f7fd fa4a 	bl	b5ac8 <free>
}
   b8634:	4620      	mov	r0, r4
   b8636:	bd38      	pop	{r3, r4, r5, pc}
   b8638:	000bc158 	.word	0x000bc158

000b863c <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   b863c:	4770      	bx	lr

000b863e <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   b863e:	2001      	movs	r0, #1
   b8640:	4770      	bx	lr

000b8642 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8642:	2200      	movs	r2, #0
   b8644:	6840      	ldr	r0, [r0, #4]
   b8646:	4611      	mov	r1, r2
   b8648:	f7fd b9be 	b.w	b59c8 <network_ready>

000b864c <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   b864c:	b510      	push	{r4, lr}
   b864e:	2124      	movs	r1, #36	; 0x24
   b8650:	4604      	mov	r4, r0
   b8652:	f7fb fd24 	bl	b409e <_ZdlPvj>
   b8656:	4620      	mov	r0, r4
   b8658:	bd10      	pop	{r4, pc}

000b865a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b865a:	2200      	movs	r2, #0
   b865c:	6840      	ldr	r0, [r0, #4]
   b865e:	4611      	mov	r1, r2
   b8660:	f7fd b9d2 	b.w	b5a08 <network_listening>

000b8664 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8664:	2200      	movs	r2, #0
   b8666:	6840      	ldr	r0, [r0, #4]
   b8668:	4611      	mov	r1, r2
   b866a:	f7fd b9dd 	b.w	b5a28 <network_get_listen_timeout>

000b866e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b866e:	6840      	ldr	r0, [r0, #4]
   b8670:	2200      	movs	r2, #0
   b8672:	f7fd b9d1 	b.w	b5a18 <network_set_listen_timeout>

000b8676 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8676:	6840      	ldr	r0, [r0, #4]
   b8678:	2200      	movs	r2, #0
   b867a:	f081 0101 	eor.w	r1, r1, #1
   b867e:	f7fd b9bb 	b.w	b59f8 <network_listen>

000b8682 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8682:	2300      	movs	r3, #0
   b8684:	6840      	ldr	r0, [r0, #4]
   b8686:	461a      	mov	r2, r3
   b8688:	4619      	mov	r1, r3
   b868a:	f7fd b9ad 	b.w	b59e8 <network_off>

000b868e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b868e:	2300      	movs	r3, #0
   b8690:	6840      	ldr	r0, [r0, #4]
   b8692:	461a      	mov	r2, r3
   b8694:	4619      	mov	r1, r3
   b8696:	f7fd b99f 	b.w	b59d8 <network_on>

000b869a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b869a:	2200      	movs	r2, #0
   b869c:	6840      	ldr	r0, [r0, #4]
   b869e:	4611      	mov	r1, r2
   b86a0:	f7fd b982 	b.w	b59a8 <network_connecting>

000b86a4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b86a4:	6840      	ldr	r0, [r0, #4]
   b86a6:	2200      	movs	r2, #0
   b86a8:	2102      	movs	r1, #2
   b86aa:	f7fd b985 	b.w	b59b8 <network_disconnect>

000b86ae <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b86ae:	2300      	movs	r3, #0
   b86b0:	6840      	ldr	r0, [r0, #4]
   b86b2:	461a      	mov	r2, r3
   b86b4:	f7fd b970 	b.w	b5998 <network_connect>

000b86b8 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   b86b8:	8983      	ldrh	r3, [r0, #12]
   b86ba:	b17b      	cbz	r3, b86dc <_ZNK10WiFiSignal11getStrengthEv+0x24>
   b86bc:	6943      	ldr	r3, [r0, #20]
   b86be:	2b00      	cmp	r3, #0
   b86c0:	db0c      	blt.n	b86dc <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   b86c2:	ee07 3a90 	vmov	s15, r3
   b86c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; b86e4 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   b86ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b86ce:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b86d2:	eddf 7a05 	vldr	s15, [pc, #20]	; b86e8 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   b86d6:	ee20 0a27 	vmul.f32	s0, s0, s15
   b86da:	4770      	bx	lr
    }
    return -1.0f;
   b86dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b86e0:	4770      	bx	lr
   b86e2:	bf00      	nop
   b86e4:	477fff00 	.word	0x477fff00
   b86e8:	42c80000 	.word	0x42c80000

000b86ec <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   b86ec:	8983      	ldrh	r3, [r0, #12]
   b86ee:	b163      	cbz	r3, b870a <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   b86f0:	6903      	ldr	r3, [r0, #16]
   b86f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b86f6:	d008      	beq.n	b870a <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   b86f8:	ee07 3a90 	vmov	s15, r3
   b86fc:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8710 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   b8700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8704:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8708:	4770      	bx	lr
    }
    return 0.0f;
   b870a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8714 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   b870e:	4770      	bx	lr
   b8710:	42c80000 	.word	0x42c80000
   b8714:	00000000 	.word	0x00000000

000b8718 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   b8718:	8983      	ldrh	r3, [r0, #12]
   b871a:	b17b      	cbz	r3, b873c <_ZNK10WiFiSignal10getQualityEv+0x24>
   b871c:	6a03      	ldr	r3, [r0, #32]
   b871e:	2b00      	cmp	r3, #0
   b8720:	db0c      	blt.n	b873c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   b8722:	ee07 3a90 	vmov	s15, r3
   b8726:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8744 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   b872a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b872e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8732:	eddf 7a05 	vldr	s15, [pc, #20]	; b8748 <_ZNK10WiFiSignal10getQualityEv+0x30>
   b8736:	ee20 0a27 	vmul.f32	s0, s0, s15
   b873a:	4770      	bx	lr
    }
    return -1.0f;
   b873c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8740:	4770      	bx	lr
   b8742:	bf00      	nop
   b8744:	477fff00 	.word	0x477fff00
   b8748:	42c80000 	.word	0x42c80000

000b874c <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   b874c:	8983      	ldrh	r3, [r0, #12]
   b874e:	b163      	cbz	r3, b876a <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   b8750:	6983      	ldr	r3, [r0, #24]
   b8752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8756:	d008      	beq.n	b876a <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   b8758:	ee07 3a90 	vmov	s15, r3
   b875c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8770 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   b8760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8764:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8768:	4770      	bx	lr
    }
    return 0.0f;
   b876a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8774 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   b876e:	4770      	bx	lr
   b8770:	42c80000 	.word	0x42c80000
   b8774:	00000000 	.word	0x00000000

000b8778 <_ZNK10WiFiSignalcvaEv>:
}
   b8778:	f990 0004 	ldrsb.w	r0, [r0, #4]
   b877c:	4770      	bx	lr

000b877e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b877e:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   b8780:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b8782:	4606      	mov	r6, r0
    inf_ = inf;
   b8784:	f100 050c 	add.w	r5, r0, #12
   b8788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b878a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b878c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8790:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   b8794:	6933      	ldr	r3, [r6, #16]
   b8796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b879a:	bf0e      	itee	eq
   b879c:	2302      	moveq	r3, #2
   b879e:	2264      	movne	r2, #100	; 0x64
   b87a0:	fb93 f3f2 	sdivne	r3, r3, r2
   b87a4:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b87a6:	69b3      	ldr	r3, [r6, #24]
   b87a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b87ac:	bf0c      	ite	eq
   b87ae:	2300      	moveq	r3, #0
   b87b0:	2264      	movne	r2, #100	; 0x64
}
   b87b2:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b87b6:	bf18      	it	ne
   b87b8:	fb93 f3f2 	sdivne	r3, r3, r2
   b87bc:	60b3      	str	r3, [r6, #8]
}
   b87be:	bd70      	pop	{r4, r5, r6, pc}

000b87c0 <_ZN5spark9WiFiClass4RSSIEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
<<<<<<< HEAD
   ba390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   ba394:	4b16      	ldr	r3, [pc, #88]	; (ba3f0 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   ba396:	6003      	str	r3, [r0, #0]
   ba398:	2500      	movs	r5, #0
   ba39a:	460f      	mov	r7, r1
   ba39c:	f04f 0802 	mov.w	r8, #2
   ba3a0:	2618      	movs	r6, #24
   ba3a2:	e9c0 8501 	strd	r8, r5, [r0, #4]
   ba3a6:	b086      	sub	sp, #24
   ba3a8:	4632      	mov	r2, r6
   ba3aa:	4629      	mov	r1, r5
   ba3ac:	4604      	mov	r4, r0
   ba3ae:	300c      	adds	r0, #12
   ba3b0:	f000 ffe3 	bl	bb37a <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   ba3b4:	6878      	ldr	r0, [r7, #4]
   ba3b6:	462a      	mov	r2, r5
   ba3b8:	4629      	mov	r1, r5
   ba3ba:	f7fc fceb 	bl	b6d94 <network_ready>
   ba3be:	b180      	cbz	r0, ba3e2 <_ZN5spark9WiFiClass4RSSIEv+0x52>
=======
   b87c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   b87c4:	4b16      	ldr	r3, [pc, #88]	; (b8820 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   b87c6:	6003      	str	r3, [r0, #0]
   b87c8:	2500      	movs	r5, #0
   b87ca:	460f      	mov	r7, r1
   b87cc:	f04f 0802 	mov.w	r8, #2
   b87d0:	2618      	movs	r6, #24
   b87d2:	e9c0 8501 	strd	r8, r5, [r0, #4]
   b87d6:	b086      	sub	sp, #24
   b87d8:	4632      	mov	r2, r6
   b87da:	4629      	mov	r1, r5
   b87dc:	4604      	mov	r4, r0
   b87de:	300c      	adds	r0, #12
   b87e0:	f000 ffcf 	bl	b9782 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b87e4:	6878      	ldr	r0, [r7, #4]
   b87e6:	462a      	mov	r2, r5
   b87e8:	4629      	mov	r1, r5
   b87ea:	f7fd f8ed 	bl	b59c8 <network_ready>
   b87ee:	b180      	cbz	r0, b8812 <_ZN5spark9WiFiClass4RSSIEv+0x52>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
            return sig;
        }

        wlan_connected_info_t info = {};
<<<<<<< HEAD
   ba3c0:	4632      	mov	r2, r6
   ba3c2:	4629      	mov	r1, r5
   ba3c4:	4668      	mov	r0, sp
   ba3c6:	f000 ffd8 	bl	bb37a <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   ba3ca:	462a      	mov	r2, r5
   ba3cc:	4669      	mov	r1, sp
   ba3ce:	4628      	mov	r0, r5
        info.size = sizeof(info);
   ba3d0:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   ba3d4:	f7fc fc62 	bl	b6c9c <wlan_connected_info>
        if (r == 0) {
   ba3d8:	b938      	cbnz	r0, ba3ea <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   ba3da:	4669      	mov	r1, sp
   ba3dc:	4620      	mov	r0, r4
   ba3de:	f7ff ffb6 	bl	ba34e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
=======
   b87f0:	4632      	mov	r2, r6
   b87f2:	4629      	mov	r1, r5
   b87f4:	4668      	mov	r0, sp
   b87f6:	f000 ffc4 	bl	b9782 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b87fa:	462a      	mov	r2, r5
   b87fc:	4669      	mov	r1, sp
   b87fe:	4628      	mov	r0, r5
        info.size = sizeof(info);
   b8800:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b8804:	f7fd f864 	bl	b58d0 <wlan_connected_info>
        if (r == 0) {
   b8808:	b938      	cbnz	r0, b881a <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   b880a:	4669      	mov	r1, sp
   b880c:	4620      	mov	r0, r4
   b880e:	f7ff ffb6 	bl	b877e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
<<<<<<< HEAD
   ba3e2:	4620      	mov	r0, r4
   ba3e4:	b006      	add	sp, #24
   ba3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   ba3ea:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   ba3ee:	e7f8      	b.n	ba3e2 <_ZN5spark9WiFiClass4RSSIEv+0x52>
   ba3f0:	000bdf54 	.word	0x000bdf54

000ba3f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba3f4:	4b02      	ldr	r3, [pc, #8]	; (ba400 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba3f6:	2204      	movs	r2, #4
   ba3f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba3fa:	4a02      	ldr	r2, [pc, #8]	; (ba404 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba3fc:	601a      	str	r2, [r3, #0]
=======
   b8812:	4620      	mov	r0, r4
   b8814:	b006      	add	sp, #24
   b8816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   b881a:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   b881e:	e7f8      	b.n	b8812 <_ZN5spark9WiFiClass4RSSIEv+0x52>
   b8820:	000bc1bc 	.word	0x000bc1bc

000b8824 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8824:	4b02      	ldr	r3, [pc, #8]	; (b8830 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8826:	2204      	movs	r2, #4
   b8828:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b882a:	4a02      	ldr	r2, [pc, #8]	; (b8834 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b882c:	601a      	str	r2, [r3, #0]
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
<<<<<<< HEAD
   ba3fe:	4770      	bx	lr
   ba400:	2003e710 	.word	0x2003e710
   ba404:	000bdf18 	.word	0x000bdf18

000ba408 <_ZN5spark12NetworkClass7connectEj>:
=======
   b882e:	4770      	bx	lr
   b8830:	2003e710 	.word	0x2003e710
   b8834:	000bc180 	.word	0x000bc180

000b8838 <_ZN5spark12NetworkClass7connectEj>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
<<<<<<< HEAD
   ba408:	2300      	movs	r3, #0
   ba40a:	6840      	ldr	r0, [r0, #4]
   ba40c:	461a      	mov	r2, r3
   ba40e:	f7fc bca9 	b.w	b6d64 <network_connect>

000ba412 <_ZN5spark12NetworkClass10disconnectEv>:
=======
   b8838:	2300      	movs	r3, #0
   b883a:	6840      	ldr	r0, [r0, #4]
   b883c:	461a      	mov	r2, r3
   b883e:	f7fd b8ab 	b.w	b5998 <network_connect>

000b8842 <_ZN5spark12NetworkClass10disconnectEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
<<<<<<< HEAD
   ba412:	6840      	ldr	r0, [r0, #4]
   ba414:	2200      	movs	r2, #0
   ba416:	2102      	movs	r1, #2
   ba418:	f7fc bcb4 	b.w	b6d84 <network_disconnect>

000ba41c <_ZN5spark12NetworkClass10connectingEv>:
=======
   b8842:	6840      	ldr	r0, [r0, #4]
   b8844:	2200      	movs	r2, #0
   b8846:	2102      	movs	r1, #2
   b8848:	f7fd b8b6 	b.w	b59b8 <network_disconnect>

000b884c <_ZN5spark12NetworkClass10connectingEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
<<<<<<< HEAD
   ba41c:	2200      	movs	r2, #0
   ba41e:	6840      	ldr	r0, [r0, #4]
   ba420:	4611      	mov	r1, r2
   ba422:	f7fc bca7 	b.w	b6d74 <network_connecting>

000ba426 <_ZN5spark12NetworkClass5readyEv>:
=======
   b884c:	2200      	movs	r2, #0
   b884e:	6840      	ldr	r0, [r0, #4]
   b8850:	4611      	mov	r1, r2
   b8852:	f7fd b8a9 	b.w	b59a8 <network_connecting>

000b8856 <_ZN5spark12NetworkClass5readyEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
<<<<<<< HEAD
   ba426:	2200      	movs	r2, #0
   ba428:	6840      	ldr	r0, [r0, #4]
   ba42a:	4611      	mov	r1, r2
   ba42c:	f7fc bcb2 	b.w	b6d94 <network_ready>

000ba430 <_ZN5spark12NetworkClass2onEv>:
=======
   b8856:	2200      	movs	r2, #0
   b8858:	6840      	ldr	r0, [r0, #4]
   b885a:	4611      	mov	r1, r2
   b885c:	f7fd b8b4 	b.w	b59c8 <network_ready>

000b8860 <_ZN5spark12NetworkClass2onEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
<<<<<<< HEAD
   ba430:	2300      	movs	r3, #0
   ba432:	6840      	ldr	r0, [r0, #4]
   ba434:	461a      	mov	r2, r3
   ba436:	4619      	mov	r1, r3
   ba438:	f7fc bcb4 	b.w	b6da4 <network_on>

000ba43c <_ZN5spark12NetworkClass3offEv>:
=======
   b8860:	2300      	movs	r3, #0
   b8862:	6840      	ldr	r0, [r0, #4]
   b8864:	461a      	mov	r2, r3
   b8866:	4619      	mov	r1, r3
   b8868:	f7fd b8b6 	b.w	b59d8 <network_on>

000b886c <_ZN5spark12NetworkClass3offEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
<<<<<<< HEAD
   ba43c:	2300      	movs	r3, #0
   ba43e:	6840      	ldr	r0, [r0, #4]
   ba440:	461a      	mov	r2, r3
   ba442:	4619      	mov	r1, r3
   ba444:	f7fc bcb6 	b.w	b6db4 <network_off>

000ba448 <_ZN5spark12NetworkClass4isOnEv>:
=======
   b886c:	2300      	movs	r3, #0
   b886e:	6840      	ldr	r0, [r0, #4]
   b8870:	461a      	mov	r2, r3
   b8872:	4619      	mov	r1, r3
   b8874:	f7fd b8b8 	b.w	b59e8 <network_off>

000b8878 <_ZN5spark12NetworkClass4isOnEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
<<<<<<< HEAD
   ba448:	6840      	ldr	r0, [r0, #4]
   ba44a:	2100      	movs	r1, #0
   ba44c:	f7fc bcda 	b.w	b6e04 <network_is_on>

000ba450 <_ZN5spark12NetworkClass5isOffEv>:
=======
   b8878:	6840      	ldr	r0, [r0, #4]
   b887a:	2100      	movs	r1, #0
   b887c:	f7fd b8dc 	b.w	b5a38 <network_is_on>

000b8880 <_ZN5spark12NetworkClass5isOffEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
<<<<<<< HEAD
   ba450:	6840      	ldr	r0, [r0, #4]
   ba452:	2100      	movs	r1, #0
   ba454:	f7fc bcde 	b.w	b6e14 <network_is_off>

000ba458 <_ZN5spark12NetworkClass6listenEb>:
=======
   b8880:	6840      	ldr	r0, [r0, #4]
   b8882:	2100      	movs	r1, #0
   b8884:	f7fd b8e0 	b.w	b5a48 <network_is_off>

000b8888 <_ZN5spark12NetworkClass6listenEb>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
<<<<<<< HEAD
   ba458:	6840      	ldr	r0, [r0, #4]
   ba45a:	2200      	movs	r2, #0
   ba45c:	f081 0101 	eor.w	r1, r1, #1
   ba460:	f7fc bcb0 	b.w	b6dc4 <network_listen>

000ba464 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
=======
   b8888:	6840      	ldr	r0, [r0, #4]
   b888a:	2200      	movs	r2, #0
   b888c:	f081 0101 	eor.w	r1, r1, #1
   b8890:	f7fd b8b2 	b.w	b59f8 <network_listen>

000b8894 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
<<<<<<< HEAD
   ba464:	6840      	ldr	r0, [r0, #4]
   ba466:	2200      	movs	r2, #0
   ba468:	f7fc bcbc 	b.w	b6de4 <network_set_listen_timeout>

000ba46c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
=======
   b8894:	6840      	ldr	r0, [r0, #4]
   b8896:	2200      	movs	r2, #0
   b8898:	f7fd b8be 	b.w	b5a18 <network_set_listen_timeout>

000b889c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
<<<<<<< HEAD
   ba46c:	2200      	movs	r2, #0
   ba46e:	6840      	ldr	r0, [r0, #4]
   ba470:	4611      	mov	r1, r2
   ba472:	f7fc bcbf 	b.w	b6df4 <network_get_listen_timeout>

000ba476 <_ZN5spark12NetworkClass9listeningEv>:
=======
   b889c:	2200      	movs	r2, #0
   b889e:	6840      	ldr	r0, [r0, #4]
   b88a0:	4611      	mov	r1, r2
   b88a2:	f7fd b8c1 	b.w	b5a28 <network_get_listen_timeout>

000b88a6 <_ZN5spark12NetworkClass9listeningEv>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
<<<<<<< HEAD
   ba476:	2200      	movs	r2, #0
   ba478:	6840      	ldr	r0, [r0, #4]
   ba47a:	4611      	mov	r1, r2
   ba47c:	f7fc bcaa 	b.w	b6dd4 <network_listening>

000ba480 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba484:	b095      	sub	sp, #84	; 0x54
   ba486:	4614      	mov	r4, r2
   ba488:	460d      	mov	r5, r1
   ba48a:	4607      	mov	r7, r0
    IPAddress addr;
   ba48c:	f7ff fa2e 	bl	b98ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba490:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba492:	221c      	movs	r2, #28
   ba494:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba496:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba498:	f000 ff6f 	bl	bb37a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba49c:	2340      	movs	r3, #64	; 0x40
   ba49e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba4a0:	4620      	mov	r0, r4
   ba4a2:	466b      	mov	r3, sp
   ba4a4:	aa0c      	add	r2, sp, #48	; 0x30
   ba4a6:	2100      	movs	r1, #0
   ba4a8:	f7fc f986 	bl	b67b8 <netdb_getaddrinfo>
    if (!r) {
   ba4ac:	4604      	mov	r4, r0
   ba4ae:	2800      	cmp	r0, #0
   ba4b0:	d14b      	bne.n	ba54a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba4b2:	4602      	mov	r2, r0
   ba4b4:	2101      	movs	r1, #1
   ba4b6:	6868      	ldr	r0, [r5, #4]
   ba4b8:	f7fc fc6c 	bl	b6d94 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba4bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba4be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba4c0:	4622      	mov	r2, r4
   ba4c2:	6868      	ldr	r0, [r5, #4]
   ba4c4:	f7fc fc66 	bl	b6d94 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba4c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba4ca:	4681      	mov	r9, r0
        bool ok = false;
   ba4cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba4ce:	2e00      	cmp	r6, #0
   ba4d0:	d03b      	beq.n	ba54a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba4d2:	2900      	cmp	r1, #0
   ba4d4:	d139      	bne.n	ba54a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba4d6:	6873      	ldr	r3, [r6, #4]
   ba4d8:	2b02      	cmp	r3, #2
   ba4da:	d003      	beq.n	ba4e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba4dc:	2b0a      	cmp	r3, #10
   ba4de:	d011      	beq.n	ba504 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba4e0:	69f6      	ldr	r6, [r6, #28]
   ba4e2:	e7f4      	b.n	ba4ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba4e4:	f1b8 0f00 	cmp.w	r8, #0
   ba4e8:	d0fa      	beq.n	ba4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
=======
   b88a6:	2200      	movs	r2, #0
   b88a8:	6840      	ldr	r0, [r0, #4]
   b88aa:	4611      	mov	r1, r2
   b88ac:	f7fd b8ac 	b.w	b5a08 <network_listening>

000b88b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b88b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b88b4:	b095      	sub	sp, #84	; 0x54
   b88b6:	4614      	mov	r4, r2
   b88b8:	460d      	mov	r5, r1
   b88ba:	4607      	mov	r7, r0
    IPAddress addr;
   b88bc:	f7ff fd06 	bl	b82cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b88c0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b88c2:	221c      	movs	r2, #28
   b88c4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b88c6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b88c8:	f000 ff5b 	bl	b9782 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b88cc:	2340      	movs	r3, #64	; 0x40
   b88ce:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b88d0:	4620      	mov	r0, r4
   b88d2:	466b      	mov	r3, sp
   b88d4:	aa0c      	add	r2, sp, #48	; 0x30
   b88d6:	2100      	movs	r1, #0
   b88d8:	f7fc fdc8 	bl	b546c <netdb_getaddrinfo>
    if (!r) {
   b88dc:	4604      	mov	r4, r0
   b88de:	2800      	cmp	r0, #0
   b88e0:	d14b      	bne.n	b897a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b88e2:	4602      	mov	r2, r0
   b88e4:	2101      	movs	r1, #1
   b88e6:	6868      	ldr	r0, [r5, #4]
   b88e8:	f7fd f86e 	bl	b59c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b88ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b88ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b88f0:	4622      	mov	r2, r4
   b88f2:	6868      	ldr	r0, [r5, #4]
   b88f4:	f7fd f868 	bl	b59c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b88f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b88fa:	4681      	mov	r9, r0
        bool ok = false;
   b88fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b88fe:	2e00      	cmp	r6, #0
   b8900:	d03b      	beq.n	b897a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8902:	2900      	cmp	r1, #0
   b8904:	d139      	bne.n	b897a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8906:	6873      	ldr	r3, [r6, #4]
   b8908:	2b02      	cmp	r3, #2
   b890a:	d003      	beq.n	b8914 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b890c:	2b0a      	cmp	r3, #10
   b890e:	d011      	beq.n	b8934 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8910:	69f6      	ldr	r6, [r6, #28]
   b8912:	e7f4      	b.n	b88fe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8914:	f1b8 0f00 	cmp.w	r8, #0
   b8918:	d0fa      	beq.n	b8910 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
<<<<<<< HEAD
   ba4ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba4ec:	a806      	add	r0, sp, #24
   ba4ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba4f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba4f2:	f7ff fa53 	bl	b999c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba4f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba4f8:	1d3c      	adds	r4, r7, #4
   ba4fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba4fc:	682b      	ldr	r3, [r5, #0]
   ba4fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba500:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba502:	e7ed      	b.n	ba4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
=======
   b891a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b891c:	a806      	add	r0, sp, #24
   b891e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8920:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8922:	f7ff fd1f 	bl	b8364 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8928:	1d3c      	adds	r4, r7, #4
   b892a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b892c:	682b      	ldr	r3, [r5, #0]
   b892e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8930:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8932:	e7ed      	b.n	b8910 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
<<<<<<< HEAD
   ba504:	f1b9 0f00 	cmp.w	r9, #0
   ba508:	d0ea      	beq.n	ba4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba50a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba50c:	2210      	movs	r2, #16
   ba50e:	a801      	add	r0, sp, #4
   ba510:	f000 ff33 	bl	bb37a <memset>
                    a.v = 6;
   ba514:	2306      	movs	r3, #6
   ba516:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba51a:	ad01      	add	r5, sp, #4
   ba51c:	f104 0308 	add.w	r3, r4, #8
   ba520:	3418      	adds	r4, #24
   ba522:	6818      	ldr	r0, [r3, #0]
   ba524:	6859      	ldr	r1, [r3, #4]
   ba526:	462a      	mov	r2, r5
   ba528:	c203      	stmia	r2!, {r0, r1}
   ba52a:	3308      	adds	r3, #8
   ba52c:	42a3      	cmp	r3, r4
   ba52e:	4615      	mov	r5, r2
   ba530:	d1f7      	bne.n	ba522 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba532:	a901      	add	r1, sp, #4
   ba534:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba536:	ad07      	add	r5, sp, #28
   ba538:	f7ff f9e6 	bl	b9908 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba53c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba53e:	1d3c      	adds	r4, r7, #4
   ba540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba542:	682b      	ldr	r3, [r5, #0]
   ba544:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba546:	4649      	mov	r1, r9
   ba548:	e7ca      	b.n	ba4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
=======
   b8934:	f1b9 0f00 	cmp.w	r9, #0
   b8938:	d0ea      	beq.n	b8910 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b893a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b893c:	2210      	movs	r2, #16
   b893e:	a801      	add	r0, sp, #4
   b8940:	f000 ff1f 	bl	b9782 <memset>
                    a.v = 6;
   b8944:	2306      	movs	r3, #6
   b8946:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b894a:	ad01      	add	r5, sp, #4
   b894c:	f104 0308 	add.w	r3, r4, #8
   b8950:	3418      	adds	r4, #24
   b8952:	6818      	ldr	r0, [r3, #0]
   b8954:	6859      	ldr	r1, [r3, #4]
   b8956:	462a      	mov	r2, r5
   b8958:	c203      	stmia	r2!, {r0, r1}
   b895a:	3308      	adds	r3, #8
   b895c:	42a3      	cmp	r3, r4
   b895e:	4615      	mov	r5, r2
   b8960:	d1f7      	bne.n	b8952 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8962:	a901      	add	r1, sp, #4
   b8964:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8966:	ad07      	add	r5, sp, #28
   b8968:	f7ff fcbe 	bl	b82e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b896c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b896e:	1d3c      	adds	r4, r7, #4
   b8970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8972:	682b      	ldr	r3, [r5, #0]
   b8974:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8976:	4649      	mov	r1, r9
   b8978:	e7ca      	b.n	b8910 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
<<<<<<< HEAD
   ba54a:	9800      	ldr	r0, [sp, #0]
   ba54c:	f7fc f92c 	bl	b67a8 <netdb_freeaddrinfo>
=======
   b897a:	9800      	ldr	r0, [sp, #0]
   b897c:	f7fc fd6e 	bl	b545c <netdb_freeaddrinfo>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
<<<<<<< HEAD
   ba550:	4638      	mov	r0, r7
   ba552:	b015      	add	sp, #84	; 0x54
   ba554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba558 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba558:	4b02      	ldr	r3, [pc, #8]	; (ba564 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba55a:	4a03      	ldr	r2, [pc, #12]	; (ba568 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba55c:	601a      	str	r2, [r3, #0]
   ba55e:	2200      	movs	r2, #0
   ba560:	605a      	str	r2, [r3, #4]

} // spark
   ba562:	4770      	bx	lr
   ba564:	2003e718 	.word	0x2003e718
   ba568:	000bdf78 	.word	0x000bdf78

000ba56c <pinAvailable>:
=======
   b8980:	4638      	mov	r0, r7
   b8982:	b015      	add	sp, #84	; 0x54
   b8984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8988 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8988:	4b02      	ldr	r3, [pc, #8]	; (b8994 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b898a:	4a03      	ldr	r2, [pc, #12]	; (b8998 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b898c:	601a      	str	r2, [r3, #0]
   b898e:	2200      	movs	r2, #0
   b8990:	605a      	str	r2, [r3, #4]

} // spark
   b8992:	4770      	bx	lr
   b8994:	2003e718 	.word	0x2003e718
   b8998:	000bc1e0 	.word	0x000bc1e0

000b899c <pinAvailable>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
<<<<<<< HEAD
   ba56c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ba56e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ba570:	d902      	bls.n	ba578 <pinAvailable+0xc>
    return false;
   ba572:	2000      	movs	r0, #0
=======
   b899c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b899e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b89a0:	d902      	bls.n	b89a8 <pinAvailable+0xc>
    return false;
   b89a2:	2000      	movs	r0, #0
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
<<<<<<< HEAD
   ba574:	b002      	add	sp, #8
   ba576:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba578:	f1a0 030b 	sub.w	r3, r0, #11
   ba57c:	2b02      	cmp	r3, #2
   ba57e:	d81a      	bhi.n	ba5b6 <pinAvailable+0x4a>
=======
   b89a4:	b002      	add	sp, #8
   b89a6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b89a8:	f1a0 030b 	sub.w	r3, r0, #11
   b89ac:	2b02      	cmp	r3, #2
   b89ae:	d81a      	bhi.n	b89e6 <pinAvailable+0x4a>
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
<<<<<<< HEAD
   ba580:	4c17      	ldr	r4, [pc, #92]	; (ba5e0 <pinAvailable+0x74>)
   ba582:	7821      	ldrb	r1, [r4, #0]
   ba584:	f3bf 8f5b 	dmb	ish
   ba588:	f011 0101 	ands.w	r1, r1, #1
   ba58c:	d10b      	bne.n	ba5a6 <pinAvailable+0x3a>
   ba58e:	4620      	mov	r0, r4
   ba590:	9101      	str	r1, [sp, #4]
   ba592:	f7f9 fd88 	bl	b40a6 <__cxa_guard_acquire>
   ba596:	9901      	ldr	r1, [sp, #4]
   ba598:	b128      	cbz	r0, ba5a6 <pinAvailable+0x3a>
   ba59a:	4812      	ldr	r0, [pc, #72]	; (ba5e4 <pinAvailable+0x78>)
   ba59c:	f7fc fd08 	bl	b6fb0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba5a0:	4620      	mov	r0, r4
   ba5a2:	f7f9 fd85 	bl	b40b0 <__cxa_guard_release>
   ba5a6:	4b0f      	ldr	r3, [pc, #60]	; (ba5e4 <pinAvailable+0x78>)
   ba5a8:	7818      	ldrb	r0, [r3, #0]
   ba5aa:	f7fc fb3f 	bl	b6c2c <hal_spi_is_enabled>
   ba5ae:	2800      	cmp	r0, #0
   ba5b0:	d1df      	bne.n	ba572 <pinAvailable+0x6>
  return true; // 'pin' is available
   ba5b2:	2001      	movs	r0, #1
   ba5b4:	e7de      	b.n	ba574 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba5b6:	2801      	cmp	r0, #1
   ba5b8:	d809      	bhi.n	ba5ce <pinAvailable+0x62>
   ba5ba:	f000 f881 	bl	ba6c0 <_Z19__fetch_global_Wirev>
   ba5be:	2100      	movs	r1, #0
   ba5c0:	7c00      	ldrb	r0, [r0, #16]
   ba5c2:	f7fc fad3 	bl	b6b6c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba5c6:	f080 0001 	eor.w	r0, r0, #1
   ba5ca:	b2c0      	uxtb	r0, r0
   ba5cc:	e7d2      	b.n	ba574 <pinAvailable+0x8>
   ba5ce:	3809      	subs	r0, #9
   ba5d0:	2801      	cmp	r0, #1
   ba5d2:	d8ee      	bhi.n	ba5b2 <pinAvailable+0x46>
   ba5d4:	f000 f834 	bl	ba640 <_Z22__fetch_global_Serial1v>
   ba5d8:	7c00      	ldrb	r0, [r0, #16]
   ba5da:	f7fc fa87 	bl	b6aec <hal_usart_is_enabled>
   ba5de:	e7f2      	b.n	ba5c6 <pinAvailable+0x5a>
   ba5e0:	2003e720 	.word	0x2003e720
   ba5e4:	2003e724 	.word	0x2003e724

000ba5e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba5e8:	2823      	cmp	r0, #35	; 0x23
{
   ba5ea:	b538      	push	{r3, r4, r5, lr}
   ba5ec:	4604      	mov	r4, r0
   ba5ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba5f0:	d80a      	bhi.n	ba608 <pinMode+0x20>
   ba5f2:	29ff      	cmp	r1, #255	; 0xff
   ba5f4:	d008      	beq.n	ba608 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba5f6:	f7ff ffb9 	bl	ba56c <pinAvailable>
   ba5fa:	b128      	cbz	r0, ba608 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   ba5fc:	4629      	mov	r1, r5
   ba5fe:	4620      	mov	r0, r4
}
   ba600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   ba604:	f7fc b8e0 	b.w	b67c8 <HAL_Pin_Mode>
}
   ba608:	bd38      	pop	{r3, r4, r5, pc}

000ba60a <__tcf_0>:
=======
   b89b0:	4c17      	ldr	r4, [pc, #92]	; (b8a10 <pinAvailable+0x74>)
   b89b2:	7821      	ldrb	r1, [r4, #0]
   b89b4:	f3bf 8f5b 	dmb	ish
   b89b8:	f011 0101 	ands.w	r1, r1, #1
   b89bc:	d10b      	bne.n	b89d6 <pinAvailable+0x3a>
   b89be:	4620      	mov	r0, r4
   b89c0:	9101      	str	r1, [sp, #4]
   b89c2:	f7fb fb6e 	bl	b40a2 <__cxa_guard_acquire>
   b89c6:	9901      	ldr	r1, [sp, #4]
   b89c8:	b128      	cbz	r0, b89d6 <pinAvailable+0x3a>
   b89ca:	4812      	ldr	r0, [pc, #72]	; (b8a14 <pinAvailable+0x78>)
   b89cc:	f7fd f90a 	bl	b5be4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b89d0:	4620      	mov	r0, r4
   b89d2:	f7fb fb6b 	bl	b40ac <__cxa_guard_release>
   b89d6:	4b0f      	ldr	r3, [pc, #60]	; (b8a14 <pinAvailable+0x78>)
   b89d8:	7818      	ldrb	r0, [r3, #0]
   b89da:	f7fc ff41 	bl	b5860 <hal_spi_is_enabled>
   b89de:	2800      	cmp	r0, #0
   b89e0:	d1df      	bne.n	b89a2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b89e2:	2001      	movs	r0, #1
   b89e4:	e7de      	b.n	b89a4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b89e6:	2801      	cmp	r0, #1
   b89e8:	d809      	bhi.n	b89fe <pinAvailable+0x62>
   b89ea:	f000 f881 	bl	b8af0 <_Z19__fetch_global_Wirev>
   b89ee:	2100      	movs	r1, #0
   b89f0:	7c00      	ldrb	r0, [r0, #16]
   b89f2:	f7fc feed 	bl	b57d0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b89f6:	f080 0001 	eor.w	r0, r0, #1
   b89fa:	b2c0      	uxtb	r0, r0
   b89fc:	e7d2      	b.n	b89a4 <pinAvailable+0x8>
   b89fe:	3809      	subs	r0, #9
   b8a00:	2801      	cmp	r0, #1
   b8a02:	d8ee      	bhi.n	b89e2 <pinAvailable+0x46>
   b8a04:	f000 f834 	bl	b8a70 <_Z22__fetch_global_Serial1v>
   b8a08:	7c00      	ldrb	r0, [r0, #16]
   b8a0a:	f7fc fea1 	bl	b5750 <hal_usart_is_enabled>
   b8a0e:	e7f2      	b.n	b89f6 <pinAvailable+0x5a>
   b8a10:	2003e720 	.word	0x2003e720
   b8a14:	2003e724 	.word	0x2003e724

000b8a18 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8a18:	2823      	cmp	r0, #35	; 0x23
{
   b8a1a:	b538      	push	{r3, r4, r5, lr}
   b8a1c:	4604      	mov	r4, r0
   b8a1e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8a20:	d80a      	bhi.n	b8a38 <pinMode+0x20>
   b8a22:	29ff      	cmp	r1, #255	; 0xff
   b8a24:	d008      	beq.n	b8a38 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8a26:	f7ff ffb9 	bl	b899c <pinAvailable>
   b8a2a:	b128      	cbz	r0, b8a38 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8a2c:	4629      	mov	r1, r5
   b8a2e:	4620      	mov	r0, r4
}
   b8a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8a34:	f7fc bd22 	b.w	b547c <HAL_Pin_Mode>
}
   b8a38:	bd38      	pop	{r3, r4, r5, pc}

000b8a3a <__tcf_0>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
<<<<<<< HEAD
   ba60a:	4770      	bx	lr

000ba60c <_Z20acquireSerial1Bufferv>:
{
   ba60c:	b538      	push	{r3, r4, r5, lr}
   ba60e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba610:	2514      	movs	r5, #20
   ba612:	462a      	mov	r2, r5
   ba614:	2100      	movs	r1, #0
   ba616:	f000 feb0 	bl	bb37a <memset>
   ba61a:	8025      	strh	r5, [r4, #0]
   ba61c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba61e:	4907      	ldr	r1, [pc, #28]	; (ba63c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba620:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba622:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba624:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba626:	f000 f86f 	bl	ba708 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba62a:	4904      	ldr	r1, [pc, #16]	; (ba63c <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba62c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba62e:	4628      	mov	r0, r5
   ba630:	f000 f86a 	bl	ba708 <_ZnajRKSt9nothrow_t>
    };
   ba634:	60e0      	str	r0, [r4, #12]
}
   ba636:	4620      	mov	r0, r4
   ba638:	bd38      	pop	{r3, r4, r5, pc}
   ba63a:	bf00      	nop
   ba63c:	000bdfac 	.word	0x000bdfac

000ba640 <_Z22__fetch_global_Serial1v>:
{
   ba640:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba642:	4d0e      	ldr	r5, [pc, #56]	; (ba67c <_Z22__fetch_global_Serial1v+0x3c>)
   ba644:	7829      	ldrb	r1, [r5, #0]
   ba646:	f3bf 8f5b 	dmb	ish
   ba64a:	f011 0401 	ands.w	r4, r1, #1
{
   ba64e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba650:	d111      	bne.n	ba676 <_Z22__fetch_global_Serial1v+0x36>
   ba652:	4628      	mov	r0, r5
   ba654:	f7f9 fd27 	bl	b40a6 <__cxa_guard_acquire>
   ba658:	b168      	cbz	r0, ba676 <_Z22__fetch_global_Serial1v+0x36>
   ba65a:	a801      	add	r0, sp, #4
   ba65c:	f7ff ffd6 	bl	ba60c <_Z20acquireSerial1Bufferv>
   ba660:	aa01      	add	r2, sp, #4
   ba662:	4621      	mov	r1, r4
   ba664:	4806      	ldr	r0, [pc, #24]	; (ba680 <_Z22__fetch_global_Serial1v+0x40>)
   ba666:	f7ff fa93 	bl	b9b90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba66a:	4628      	mov	r0, r5
   ba66c:	f7f9 fd20 	bl	b40b0 <__cxa_guard_release>
   ba670:	4804      	ldr	r0, [pc, #16]	; (ba684 <_Z22__fetch_global_Serial1v+0x44>)
   ba672:	f000 fe29 	bl	bb2c8 <atexit>
    return serial1;
}
   ba676:	4802      	ldr	r0, [pc, #8]	; (ba680 <_Z22__fetch_global_Serial1v+0x40>)
   ba678:	b007      	add	sp, #28
   ba67a:	bd30      	pop	{r4, r5, pc}
   ba67c:	2003e72c 	.word	0x2003e72c
   ba680:	2003e730 	.word	0x2003e730
   ba684:	000ba60b 	.word	0x000ba60b

000ba688 <__tcf_0>:
=======
   b8a3a:	4770      	bx	lr

000b8a3c <_Z20acquireSerial1Bufferv>:
{
   b8a3c:	b538      	push	{r3, r4, r5, lr}
   b8a3e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8a40:	2514      	movs	r5, #20
   b8a42:	462a      	mov	r2, r5
   b8a44:	2100      	movs	r1, #0
   b8a46:	f000 fe9c 	bl	b9782 <memset>
   b8a4a:	8025      	strh	r5, [r4, #0]
   b8a4c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a4e:	4907      	ldr	r1, [pc, #28]	; (b8a6c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8a50:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a52:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8a54:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a56:	f000 f86f 	bl	b8b38 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a5a:	4904      	ldr	r1, [pc, #16]	; (b8a6c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8a5c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8a5e:	4628      	mov	r0, r5
   b8a60:	f000 f86a 	bl	b8b38 <_ZnajRKSt9nothrow_t>
    };
   b8a64:	60e0      	str	r0, [r4, #12]
}
   b8a66:	4620      	mov	r0, r4
   b8a68:	bd38      	pop	{r3, r4, r5, pc}
   b8a6a:	bf00      	nop
   b8a6c:	000bc214 	.word	0x000bc214

000b8a70 <_Z22__fetch_global_Serial1v>:
{
   b8a70:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8a72:	4d0e      	ldr	r5, [pc, #56]	; (b8aac <_Z22__fetch_global_Serial1v+0x3c>)
   b8a74:	7829      	ldrb	r1, [r5, #0]
   b8a76:	f3bf 8f5b 	dmb	ish
   b8a7a:	f011 0401 	ands.w	r4, r1, #1
{
   b8a7e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8a80:	d111      	bne.n	b8aa6 <_Z22__fetch_global_Serial1v+0x36>
   b8a82:	4628      	mov	r0, r5
   b8a84:	f7fb fb0d 	bl	b40a2 <__cxa_guard_acquire>
   b8a88:	b168      	cbz	r0, b8aa6 <_Z22__fetch_global_Serial1v+0x36>
   b8a8a:	a801      	add	r0, sp, #4
   b8a8c:	f7ff ffd6 	bl	b8a3c <_Z20acquireSerial1Bufferv>
   b8a90:	aa01      	add	r2, sp, #4
   b8a92:	4621      	mov	r1, r4
   b8a94:	4806      	ldr	r0, [pc, #24]	; (b8ab0 <_Z22__fetch_global_Serial1v+0x40>)
   b8a96:	f7ff fd5f 	bl	b8558 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8a9a:	4628      	mov	r0, r5
   b8a9c:	f7fb fb06 	bl	b40ac <__cxa_guard_release>
   b8aa0:	4804      	ldr	r0, [pc, #16]	; (b8ab4 <_Z22__fetch_global_Serial1v+0x44>)
   b8aa2:	f000 fe29 	bl	b96f8 <atexit>
    return serial1;
}
   b8aa6:	4802      	ldr	r0, [pc, #8]	; (b8ab0 <_Z22__fetch_global_Serial1v+0x40>)
   b8aa8:	b007      	add	sp, #28
   b8aaa:	bd30      	pop	{r4, r5, pc}
   b8aac:	2003e72c 	.word	0x2003e72c
   b8ab0:	2003e730 	.word	0x2003e730
   b8ab4:	000b8a3b 	.word	0x000b8a3b

000b8ab8 <__tcf_0>:
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
<<<<<<< HEAD
   ba688:	4770      	bx	lr
	...

000ba68c <_Z17acquireWireBufferv>:
{
   ba68c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba68e:	4b0a      	ldr	r3, [pc, #40]	; (ba6b8 <_Z17acquireWireBufferv+0x2c>)
   ba690:	6003      	str	r3, [r0, #0]
   ba692:	2301      	movs	r3, #1
{
   ba694:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba696:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba698:	4908      	ldr	r1, [pc, #32]	; (ba6bc <_Z17acquireWireBufferv+0x30>)
   ba69a:	2020      	movs	r0, #32
   ba69c:	f000 f834 	bl	ba708 <_ZnajRKSt9nothrow_t>
	};
   ba6a0:	2520      	movs	r5, #32
   ba6a2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba6a4:	4905      	ldr	r1, [pc, #20]	; (ba6bc <_Z17acquireWireBufferv+0x30>)
	};
   ba6a6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba6a8:	4628      	mov	r0, r5
   ba6aa:	f000 f82d 	bl	ba708 <_ZnajRKSt9nothrow_t>
	};
   ba6ae:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   ba6b2:	4620      	mov	r0, r4
   ba6b4:	bd38      	pop	{r3, r4, r5, pc}
   ba6b6:	bf00      	nop
   ba6b8:	00010018 	.word	0x00010018
   ba6bc:	000bdfac 	.word	0x000bdfac

000ba6c0 <_Z19__fetch_global_Wirev>:
{
   ba6c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba6c2:	4d0e      	ldr	r5, [pc, #56]	; (ba6fc <_Z19__fetch_global_Wirev+0x3c>)
   ba6c4:	7829      	ldrb	r1, [r5, #0]
   ba6c6:	f3bf 8f5b 	dmb	ish
   ba6ca:	f011 0401 	ands.w	r4, r1, #1
{
   ba6ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba6d0:	d111      	bne.n	ba6f6 <_Z19__fetch_global_Wirev+0x36>
   ba6d2:	4628      	mov	r0, r5
   ba6d4:	f7f9 fce7 	bl	b40a6 <__cxa_guard_acquire>
   ba6d8:	b168      	cbz	r0, ba6f6 <_Z19__fetch_global_Wirev+0x36>
   ba6da:	4668      	mov	r0, sp
   ba6dc:	f7ff ffd6 	bl	ba68c <_Z17acquireWireBufferv>
   ba6e0:	466a      	mov	r2, sp
   ba6e2:	4621      	mov	r1, r4
   ba6e4:	4806      	ldr	r0, [pc, #24]	; (ba700 <_Z19__fetch_global_Wirev+0x40>)
   ba6e6:	f7ff faa7 	bl	b9c38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba6ea:	4628      	mov	r0, r5
   ba6ec:	f7f9 fce0 	bl	b40b0 <__cxa_guard_release>
   ba6f0:	4804      	ldr	r0, [pc, #16]	; (ba704 <_Z19__fetch_global_Wirev+0x44>)
   ba6f2:	f000 fde9 	bl	bb2c8 <atexit>
	return wire;
}
   ba6f6:	4802      	ldr	r0, [pc, #8]	; (ba700 <_Z19__fetch_global_Wirev+0x40>)
   ba6f8:	b007      	add	sp, #28
   ba6fa:	bd30      	pop	{r4, r5, pc}
   ba6fc:	2003e748 	.word	0x2003e748
   ba700:	2003e74c 	.word	0x2003e74c
   ba704:	000ba689 	.word	0x000ba689

000ba708 <_ZnajRKSt9nothrow_t>:
   ba708:	f7f9 bcc7 	b.w	b409a <_Znaj>

000ba70c <_ZSt25__throw_bad_function_callv>:
   ba70c:	b508      	push	{r3, lr}
   ba70e:	f7fc fbe1 	bl	b6ed4 <abort>
	...

000ba714 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba714:	4901      	ldr	r1, [pc, #4]	; (ba71c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba716:	f000 b8f9 	b.w	ba90c <_ZNKSt9type_infoeqERKS_>
   ba71a:	bf00      	nop
   ba71c:	000bdfc8 	.word	0x000bdfc8

000ba720 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba720:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba722:	2400      	movs	r4, #0
   ba724:	2310      	movs	r3, #16
   ba726:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba72a:	6803      	ldr	r3, [r0, #0]
   ba72c:	4615      	mov	r5, r2
   ba72e:	699e      	ldr	r6, [r3, #24]
   ba730:	6812      	ldr	r2, [r2, #0]
   ba732:	466b      	mov	r3, sp
   ba734:	e9cd 4400 	strd	r4, r4, [sp]
   ba738:	47b0      	blx	r6
   ba73a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba73e:	f003 0306 	and.w	r3, r3, #6
   ba742:	2b06      	cmp	r3, #6
   ba744:	bf03      	ittte	eq
   ba746:	9b00      	ldreq	r3, [sp, #0]
   ba748:	602b      	streq	r3, [r5, #0]
   ba74a:	2001      	moveq	r0, #1
   ba74c:	4620      	movne	r0, r4
   ba74e:	b004      	add	sp, #16
   ba750:	bd70      	pop	{r4, r5, r6, pc}

000ba752 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba752:	9800      	ldr	r0, [sp, #0]
   ba754:	4290      	cmp	r0, r2
   ba756:	bf14      	ite	ne
   ba758:	2001      	movne	r0, #1
   ba75a:	2006      	moveq	r0, #6
   ba75c:	4770      	bx	lr
	...

000ba760 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba760:	b510      	push	{r4, lr}
   ba762:	4b03      	ldr	r3, [pc, #12]	; (ba770 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba764:	6003      	str	r3, [r0, #0]
   ba766:	4604      	mov	r4, r0
   ba768:	f000 f8cd 	bl	ba906 <_ZNSt9type_infoD1Ev>
   ba76c:	4620      	mov	r0, r4
   ba76e:	bd10      	pop	{r4, pc}
   ba770:	000be008 	.word	0x000be008

000ba774 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba774:	b510      	push	{r4, lr}
   ba776:	4604      	mov	r4, r0
   ba778:	f7ff fff2 	bl	ba760 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba77c:	4620      	mov	r0, r4
   ba77e:	2108      	movs	r1, #8
   ba780:	f7f9 fc8f 	bl	b40a2 <_ZdlPvj>
   ba784:	4620      	mov	r0, r4
   ba786:	bd10      	pop	{r4, pc}

000ba788 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba78c:	461f      	mov	r7, r3
   ba78e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba792:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba796:	4598      	cmp	r8, r3
   ba798:	4606      	mov	r6, r0
   ba79a:	4615      	mov	r5, r2
   ba79c:	d107      	bne.n	ba7ae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba79e:	9907      	ldr	r1, [sp, #28]
   ba7a0:	f000 f8b4 	bl	ba90c <_ZNKSt9type_infoeqERKS_>
   ba7a4:	b118      	cbz	r0, ba7ae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba7a6:	7165      	strb	r5, [r4, #5]
   ba7a8:	2000      	movs	r0, #0
   ba7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba7ae:	4639      	mov	r1, r7
   ba7b0:	4630      	mov	r0, r6
   ba7b2:	f000 f8ab 	bl	ba90c <_ZNKSt9type_infoeqERKS_>
   ba7b6:	2800      	cmp	r0, #0
   ba7b8:	d0f6      	beq.n	ba7a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba7ba:	2301      	movs	r3, #1
   ba7bc:	f8c4 8000 	str.w	r8, [r4]
   ba7c0:	7125      	strb	r5, [r4, #4]
   ba7c2:	71a3      	strb	r3, [r4, #6]
   ba7c4:	e7f0      	b.n	ba7a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba7c6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba7c6:	b538      	push	{r3, r4, r5, lr}
   ba7c8:	4615      	mov	r5, r2
   ba7ca:	461c      	mov	r4, r3
   ba7cc:	f000 f89e 	bl	ba90c <_ZNKSt9type_infoeqERKS_>
   ba7d0:	b120      	cbz	r0, ba7dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba7d2:	2308      	movs	r3, #8
   ba7d4:	60e3      	str	r3, [r4, #12]
   ba7d6:	2306      	movs	r3, #6
   ba7d8:	6025      	str	r5, [r4, #0]
   ba7da:	7123      	strb	r3, [r4, #4]
   ba7dc:	bd38      	pop	{r3, r4, r5, pc}

000ba7de <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba7e0:	4605      	mov	r5, r0
   ba7e2:	460c      	mov	r4, r1
   ba7e4:	9201      	str	r2, [sp, #4]
   ba7e6:	461e      	mov	r6, r3
   ba7e8:	f000 f890 	bl	ba90c <_ZNKSt9type_infoeqERKS_>
   ba7ec:	b950      	cbnz	r0, ba804 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba7ee:	2e03      	cmp	r6, #3
   ba7f0:	d808      	bhi.n	ba804 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba7f2:	6823      	ldr	r3, [r4, #0]
   ba7f4:	9a01      	ldr	r2, [sp, #4]
   ba7f6:	695b      	ldr	r3, [r3, #20]
   ba7f8:	4629      	mov	r1, r5
   ba7fa:	4620      	mov	r0, r4
   ba7fc:	b002      	add	sp, #8
   ba7fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba802:	4718      	bx	r3
   ba804:	b002      	add	sp, #8
   ba806:	bd70      	pop	{r4, r5, r6, pc}

000ba808 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba808:	b510      	push	{r4, lr}
   ba80a:	4b03      	ldr	r3, [pc, #12]	; (ba818 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba80c:	6003      	str	r3, [r0, #0]
   ba80e:	4604      	mov	r4, r0
   ba810:	f7ff ffa6 	bl	ba760 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba814:	4620      	mov	r0, r4
   ba816:	bd10      	pop	{r4, pc}
   ba818:	000be068 	.word	0x000be068

000ba81c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba81c:	b510      	push	{r4, lr}
   ba81e:	4604      	mov	r4, r0
   ba820:	f7ff fff2 	bl	ba808 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba824:	4620      	mov	r0, r4
   ba826:	210c      	movs	r1, #12
   ba828:	f7f9 fc3b 	bl	b40a2 <_ZdlPvj>
   ba82c:	4620      	mov	r0, r4
   ba82e:	bd10      	pop	{r4, pc}

000ba830 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba832:	9f08      	ldr	r7, [sp, #32]
   ba834:	4297      	cmp	r7, r2
   ba836:	4605      	mov	r5, r0
   ba838:	460e      	mov	r6, r1
   ba83a:	4614      	mov	r4, r2
   ba83c:	d00a      	beq.n	ba854 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba83e:	68a8      	ldr	r0, [r5, #8]
   ba840:	6802      	ldr	r2, [r0, #0]
   ba842:	9708      	str	r7, [sp, #32]
   ba844:	6a15      	ldr	r5, [r2, #32]
   ba846:	4631      	mov	r1, r6
   ba848:	4622      	mov	r2, r4
   ba84a:	46ac      	mov	ip, r5
   ba84c:	b003      	add	sp, #12
   ba84e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba852:	4760      	bx	ip
   ba854:	4619      	mov	r1, r3
   ba856:	9301      	str	r3, [sp, #4]
   ba858:	f000 f858 	bl	ba90c <_ZNKSt9type_infoeqERKS_>
   ba85c:	9b01      	ldr	r3, [sp, #4]
   ba85e:	2800      	cmp	r0, #0
   ba860:	d0ed      	beq.n	ba83e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba862:	2006      	movs	r0, #6
   ba864:	b003      	add	sp, #12
   ba866:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba868 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba868:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba86c:	460d      	mov	r5, r1
   ba86e:	4619      	mov	r1, r3
   ba870:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba874:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba878:	4681      	mov	r9, r0
   ba87a:	4617      	mov	r7, r2
   ba87c:	4698      	mov	r8, r3
   ba87e:	f000 f845 	bl	ba90c <_ZNKSt9type_infoeqERKS_>
   ba882:	b190      	cbz	r0, ba8aa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba884:	2d00      	cmp	r5, #0
   ba886:	6034      	str	r4, [r6, #0]
   ba888:	7137      	strb	r7, [r6, #4]
   ba88a:	db09      	blt.n	ba8a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba88c:	1961      	adds	r1, r4, r5
   ba88e:	458a      	cmp	sl, r1
   ba890:	bf0c      	ite	eq
   ba892:	2106      	moveq	r1, #6
   ba894:	2101      	movne	r1, #1
   ba896:	71b1      	strb	r1, [r6, #6]
   ba898:	2000      	movs	r0, #0
   ba89a:	b001      	add	sp, #4
   ba89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba8a0:	3502      	adds	r5, #2
   ba8a2:	d1f9      	bne.n	ba898 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8a4:	2301      	movs	r3, #1
   ba8a6:	71b3      	strb	r3, [r6, #6]
   ba8a8:	e7f6      	b.n	ba898 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8aa:	4554      	cmp	r4, sl
   ba8ac:	d106      	bne.n	ba8bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba8ae:	4659      	mov	r1, fp
   ba8b0:	4648      	mov	r0, r9
   ba8b2:	f000 f82b 	bl	ba90c <_ZNKSt9type_infoeqERKS_>
   ba8b6:	b108      	cbz	r0, ba8bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba8b8:	7177      	strb	r7, [r6, #5]
   ba8ba:	e7ed      	b.n	ba898 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8bc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba8c0:	6803      	ldr	r3, [r0, #0]
   ba8c2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba8c6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba8ca:	69dc      	ldr	r4, [r3, #28]
   ba8cc:	463a      	mov	r2, r7
   ba8ce:	4643      	mov	r3, r8
   ba8d0:	4629      	mov	r1, r5
   ba8d2:	46a4      	mov	ip, r4
   ba8d4:	b001      	add	sp, #4
   ba8d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba8da:	4760      	bx	ip

000ba8dc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba8e0:	4607      	mov	r7, r0
   ba8e2:	460c      	mov	r4, r1
   ba8e4:	4615      	mov	r5, r2
   ba8e6:	461e      	mov	r6, r3
   ba8e8:	f7ff ff6d 	bl	ba7c6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba8ec:	b948      	cbnz	r0, ba902 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba8ee:	68b8      	ldr	r0, [r7, #8]
   ba8f0:	6803      	ldr	r3, [r0, #0]
   ba8f2:	699f      	ldr	r7, [r3, #24]
   ba8f4:	462a      	mov	r2, r5
   ba8f6:	4633      	mov	r3, r6
   ba8f8:	4621      	mov	r1, r4
   ba8fa:	46bc      	mov	ip, r7
   ba8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba900:	4760      	bx	ip
   ba902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba906 <_ZNSt9type_infoD1Ev>:
   ba906:	4770      	bx	lr

000ba908 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba908:	2000      	movs	r0, #0
   ba90a:	4770      	bx	lr

000ba90c <_ZNKSt9type_infoeqERKS_>:
   ba90c:	4281      	cmp	r1, r0
   ba90e:	b508      	push	{r3, lr}
   ba910:	d00e      	beq.n	ba930 <_ZNKSt9type_infoeqERKS_+0x24>
   ba912:	6840      	ldr	r0, [r0, #4]
   ba914:	7803      	ldrb	r3, [r0, #0]
   ba916:	2b2a      	cmp	r3, #42	; 0x2a
   ba918:	d00c      	beq.n	ba934 <_ZNKSt9type_infoeqERKS_+0x28>
   ba91a:	6849      	ldr	r1, [r1, #4]
   ba91c:	780b      	ldrb	r3, [r1, #0]
   ba91e:	2b2a      	cmp	r3, #42	; 0x2a
   ba920:	bf08      	it	eq
   ba922:	3101      	addeq	r1, #1
   ba924:	f000 fd6f 	bl	bb406 <strcmp>
   ba928:	fab0 f080 	clz	r0, r0
   ba92c:	0940      	lsrs	r0, r0, #5
   ba92e:	bd08      	pop	{r3, pc}
   ba930:	2001      	movs	r0, #1
   ba932:	e7fc      	b.n	ba92e <_ZNKSt9type_infoeqERKS_+0x22>
   ba934:	2000      	movs	r0, #0
   ba936:	e7fa      	b.n	ba92e <_ZNKSt9type_infoeqERKS_+0x22>

000ba938 <__aeabi_drsub>:
   ba938:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba93c:	e002      	b.n	ba944 <__adddf3>
   ba93e:	bf00      	nop

000ba940 <__aeabi_dsub>:
   ba940:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba944 <__adddf3>:
   ba944:	b530      	push	{r4, r5, lr}
   ba946:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba94a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba94e:	ea94 0f05 	teq	r4, r5
   ba952:	bf08      	it	eq
   ba954:	ea90 0f02 	teqeq	r0, r2
   ba958:	bf1f      	itttt	ne
   ba95a:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba95e:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba962:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba966:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba96a:	f000 80e2 	beq.w	bab32 <__adddf3+0x1ee>
   ba96e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba972:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba976:	bfb8      	it	lt
   ba978:	426d      	neglt	r5, r5
   ba97a:	dd0c      	ble.n	ba996 <__adddf3+0x52>
   ba97c:	442c      	add	r4, r5
   ba97e:	ea80 0202 	eor.w	r2, r0, r2
   ba982:	ea81 0303 	eor.w	r3, r1, r3
   ba986:	ea82 0000 	eor.w	r0, r2, r0
   ba98a:	ea83 0101 	eor.w	r1, r3, r1
   ba98e:	ea80 0202 	eor.w	r2, r0, r2
   ba992:	ea81 0303 	eor.w	r3, r1, r3
   ba996:	2d36      	cmp	r5, #54	; 0x36
   ba998:	bf88      	it	hi
   ba99a:	bd30      	pophi	{r4, r5, pc}
   ba99c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba9a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba9a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba9a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba9ac:	d002      	beq.n	ba9b4 <__adddf3+0x70>
   ba9ae:	4240      	negs	r0, r0
   ba9b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba9b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba9b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba9bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba9c0:	d002      	beq.n	ba9c8 <__adddf3+0x84>
   ba9c2:	4252      	negs	r2, r2
   ba9c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba9c8:	ea94 0f05 	teq	r4, r5
   ba9cc:	f000 80a7 	beq.w	bab1e <__adddf3+0x1da>
   ba9d0:	f1a4 0401 	sub.w	r4, r4, #1
   ba9d4:	f1d5 0e20 	rsbs	lr, r5, #32
   ba9d8:	db0d      	blt.n	ba9f6 <__adddf3+0xb2>
   ba9da:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba9de:	fa22 f205 	lsr.w	r2, r2, r5
   ba9e2:	1880      	adds	r0, r0, r2
   ba9e4:	f141 0100 	adc.w	r1, r1, #0
   ba9e8:	fa03 f20e 	lsl.w	r2, r3, lr
   ba9ec:	1880      	adds	r0, r0, r2
   ba9ee:	fa43 f305 	asr.w	r3, r3, r5
   ba9f2:	4159      	adcs	r1, r3
   ba9f4:	e00e      	b.n	baa14 <__adddf3+0xd0>
   ba9f6:	f1a5 0520 	sub.w	r5, r5, #32
   ba9fa:	f10e 0e20 	add.w	lr, lr, #32
   ba9fe:	2a01      	cmp	r2, #1
   baa00:	fa03 fc0e 	lsl.w	ip, r3, lr
   baa04:	bf28      	it	cs
   baa06:	f04c 0c02 	orrcs.w	ip, ip, #2
   baa0a:	fa43 f305 	asr.w	r3, r3, r5
   baa0e:	18c0      	adds	r0, r0, r3
   baa10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   baa14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baa18:	d507      	bpl.n	baa2a <__adddf3+0xe6>
   baa1a:	f04f 0e00 	mov.w	lr, #0
   baa1e:	f1dc 0c00 	rsbs	ip, ip, #0
   baa22:	eb7e 0000 	sbcs.w	r0, lr, r0
   baa26:	eb6e 0101 	sbc.w	r1, lr, r1
   baa2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   baa2e:	d31b      	bcc.n	baa68 <__adddf3+0x124>
   baa30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   baa34:	d30c      	bcc.n	baa50 <__adddf3+0x10c>
   baa36:	0849      	lsrs	r1, r1, #1
   baa38:	ea5f 0030 	movs.w	r0, r0, rrx
   baa3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   baa40:	f104 0401 	add.w	r4, r4, #1
   baa44:	ea4f 5244 	mov.w	r2, r4, lsl #21
   baa48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   baa4c:	f080 809a 	bcs.w	bab84 <__adddf3+0x240>
   baa50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   baa54:	bf08      	it	eq
   baa56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   baa5a:	f150 0000 	adcs.w	r0, r0, #0
   baa5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   baa62:	ea41 0105 	orr.w	r1, r1, r5
   baa66:	bd30      	pop	{r4, r5, pc}
   baa68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   baa6c:	4140      	adcs	r0, r0
   baa6e:	eb41 0101 	adc.w	r1, r1, r1
   baa72:	3c01      	subs	r4, #1
   baa74:	bf28      	it	cs
   baa76:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   baa7a:	d2e9      	bcs.n	baa50 <__adddf3+0x10c>
   baa7c:	f091 0f00 	teq	r1, #0
   baa80:	bf04      	itt	eq
   baa82:	4601      	moveq	r1, r0
   baa84:	2000      	moveq	r0, #0
   baa86:	fab1 f381 	clz	r3, r1
   baa8a:	bf08      	it	eq
   baa8c:	3320      	addeq	r3, #32
   baa8e:	f1a3 030b 	sub.w	r3, r3, #11
   baa92:	f1b3 0220 	subs.w	r2, r3, #32
   baa96:	da0c      	bge.n	baab2 <__adddf3+0x16e>
   baa98:	320c      	adds	r2, #12
   baa9a:	dd08      	ble.n	baaae <__adddf3+0x16a>
   baa9c:	f102 0c14 	add.w	ip, r2, #20
   baaa0:	f1c2 020c 	rsb	r2, r2, #12
   baaa4:	fa01 f00c 	lsl.w	r0, r1, ip
   baaa8:	fa21 f102 	lsr.w	r1, r1, r2
   baaac:	e00c      	b.n	baac8 <__adddf3+0x184>
   baaae:	f102 0214 	add.w	r2, r2, #20
   baab2:	bfd8      	it	le
   baab4:	f1c2 0c20 	rsble	ip, r2, #32
   baab8:	fa01 f102 	lsl.w	r1, r1, r2
   baabc:	fa20 fc0c 	lsr.w	ip, r0, ip
   baac0:	bfdc      	itt	le
   baac2:	ea41 010c 	orrle.w	r1, r1, ip
   baac6:	4090      	lslle	r0, r2
   baac8:	1ae4      	subs	r4, r4, r3
   baaca:	bfa2      	ittt	ge
   baacc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   baad0:	4329      	orrge	r1, r5
   baad2:	bd30      	popge	{r4, r5, pc}
   baad4:	ea6f 0404 	mvn.w	r4, r4
   baad8:	3c1f      	subs	r4, #31
   baada:	da1c      	bge.n	bab16 <__adddf3+0x1d2>
   baadc:	340c      	adds	r4, #12
   baade:	dc0e      	bgt.n	baafe <__adddf3+0x1ba>
   baae0:	f104 0414 	add.w	r4, r4, #20
   baae4:	f1c4 0220 	rsb	r2, r4, #32
   baae8:	fa20 f004 	lsr.w	r0, r0, r4
   baaec:	fa01 f302 	lsl.w	r3, r1, r2
   baaf0:	ea40 0003 	orr.w	r0, r0, r3
   baaf4:	fa21 f304 	lsr.w	r3, r1, r4
   baaf8:	ea45 0103 	orr.w	r1, r5, r3
   baafc:	bd30      	pop	{r4, r5, pc}
   baafe:	f1c4 040c 	rsb	r4, r4, #12
   bab02:	f1c4 0220 	rsb	r2, r4, #32
   bab06:	fa20 f002 	lsr.w	r0, r0, r2
   bab0a:	fa01 f304 	lsl.w	r3, r1, r4
   bab0e:	ea40 0003 	orr.w	r0, r0, r3
   bab12:	4629      	mov	r1, r5
   bab14:	bd30      	pop	{r4, r5, pc}
   bab16:	fa21 f004 	lsr.w	r0, r1, r4
   bab1a:	4629      	mov	r1, r5
   bab1c:	bd30      	pop	{r4, r5, pc}
   bab1e:	f094 0f00 	teq	r4, #0
   bab22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bab26:	bf06      	itte	eq
   bab28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bab2c:	3401      	addeq	r4, #1
   bab2e:	3d01      	subne	r5, #1
   bab30:	e74e      	b.n	ba9d0 <__adddf3+0x8c>
   bab32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bab36:	bf18      	it	ne
   bab38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bab3c:	d029      	beq.n	bab92 <__adddf3+0x24e>
   bab3e:	ea94 0f05 	teq	r4, r5
   bab42:	bf08      	it	eq
   bab44:	ea90 0f02 	teqeq	r0, r2
   bab48:	d005      	beq.n	bab56 <__adddf3+0x212>
   bab4a:	ea54 0c00 	orrs.w	ip, r4, r0
   bab4e:	bf04      	itt	eq
   bab50:	4619      	moveq	r1, r3
   bab52:	4610      	moveq	r0, r2
   bab54:	bd30      	pop	{r4, r5, pc}
   bab56:	ea91 0f03 	teq	r1, r3
   bab5a:	bf1e      	ittt	ne
   bab5c:	2100      	movne	r1, #0
   bab5e:	2000      	movne	r0, #0
   bab60:	bd30      	popne	{r4, r5, pc}
   bab62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bab66:	d105      	bne.n	bab74 <__adddf3+0x230>
   bab68:	0040      	lsls	r0, r0, #1
   bab6a:	4149      	adcs	r1, r1
   bab6c:	bf28      	it	cs
   bab6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bab72:	bd30      	pop	{r4, r5, pc}
   bab74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bab78:	bf3c      	itt	cc
   bab7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bab7e:	bd30      	popcc	{r4, r5, pc}
   bab80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bab84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bab88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bab8c:	f04f 0000 	mov.w	r0, #0
   bab90:	bd30      	pop	{r4, r5, pc}
   bab92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bab96:	bf1a      	itte	ne
   bab98:	4619      	movne	r1, r3
   bab9a:	4610      	movne	r0, r2
   bab9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   baba0:	bf1c      	itt	ne
   baba2:	460b      	movne	r3, r1
   baba4:	4602      	movne	r2, r0
   baba6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   babaa:	bf06      	itte	eq
   babac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   babb0:	ea91 0f03 	teqeq	r1, r3
   babb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   babb8:	bd30      	pop	{r4, r5, pc}
   babba:	bf00      	nop

000babbc <__aeabi_ui2d>:
   babbc:	f090 0f00 	teq	r0, #0
   babc0:	bf04      	itt	eq
   babc2:	2100      	moveq	r1, #0
   babc4:	4770      	bxeq	lr
   babc6:	b530      	push	{r4, r5, lr}
   babc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   babcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   babd0:	f04f 0500 	mov.w	r5, #0
   babd4:	f04f 0100 	mov.w	r1, #0
   babd8:	e750      	b.n	baa7c <__adddf3+0x138>
   babda:	bf00      	nop

000babdc <__aeabi_i2d>:
   babdc:	f090 0f00 	teq	r0, #0
   babe0:	bf04      	itt	eq
   babe2:	2100      	moveq	r1, #0
   babe4:	4770      	bxeq	lr
   babe6:	b530      	push	{r4, r5, lr}
   babe8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   babec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   babf0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   babf4:	bf48      	it	mi
   babf6:	4240      	negmi	r0, r0
   babf8:	f04f 0100 	mov.w	r1, #0
   babfc:	e73e      	b.n	baa7c <__adddf3+0x138>
   babfe:	bf00      	nop

000bac00 <__aeabi_f2d>:
   bac00:	0042      	lsls	r2, r0, #1
   bac02:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bac06:	ea4f 0131 	mov.w	r1, r1, rrx
   bac0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bac0e:	bf1f      	itttt	ne
   bac10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bac14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bac18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bac1c:	4770      	bxne	lr
   bac1e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bac22:	bf08      	it	eq
   bac24:	4770      	bxeq	lr
   bac26:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bac2a:	bf04      	itt	eq
   bac2c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bac30:	4770      	bxeq	lr
   bac32:	b530      	push	{r4, r5, lr}
   bac34:	f44f 7460 	mov.w	r4, #896	; 0x380
   bac38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bac3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bac40:	e71c      	b.n	baa7c <__adddf3+0x138>
   bac42:	bf00      	nop

000bac44 <__aeabi_ul2d>:
   bac44:	ea50 0201 	orrs.w	r2, r0, r1
   bac48:	bf08      	it	eq
   bac4a:	4770      	bxeq	lr
   bac4c:	b530      	push	{r4, r5, lr}
   bac4e:	f04f 0500 	mov.w	r5, #0
   bac52:	e00a      	b.n	bac6a <__aeabi_l2d+0x16>

000bac54 <__aeabi_l2d>:
   bac54:	ea50 0201 	orrs.w	r2, r0, r1
   bac58:	bf08      	it	eq
   bac5a:	4770      	bxeq	lr
   bac5c:	b530      	push	{r4, r5, lr}
   bac5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bac62:	d502      	bpl.n	bac6a <__aeabi_l2d+0x16>
   bac64:	4240      	negs	r0, r0
   bac66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bac6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bac6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bac72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bac76:	f43f aed8 	beq.w	baa2a <__adddf3+0xe6>
   bac7a:	f04f 0203 	mov.w	r2, #3
   bac7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bac82:	bf18      	it	ne
   bac84:	3203      	addne	r2, #3
   bac86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bac8a:	bf18      	it	ne
   bac8c:	3203      	addne	r2, #3
   bac8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bac92:	f1c2 0320 	rsb	r3, r2, #32
   bac96:	fa00 fc03 	lsl.w	ip, r0, r3
   bac9a:	fa20 f002 	lsr.w	r0, r0, r2
   bac9e:	fa01 fe03 	lsl.w	lr, r1, r3
   baca2:	ea40 000e 	orr.w	r0, r0, lr
   baca6:	fa21 f102 	lsr.w	r1, r1, r2
   bacaa:	4414      	add	r4, r2
   bacac:	e6bd      	b.n	baa2a <__adddf3+0xe6>
   bacae:	bf00      	nop

000bacb0 <__aeabi_dmul>:
   bacb0:	b570      	push	{r4, r5, r6, lr}
   bacb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bacb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bacba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bacbe:	bf1d      	ittte	ne
   bacc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bacc4:	ea94 0f0c 	teqne	r4, ip
   bacc8:	ea95 0f0c 	teqne	r5, ip
   baccc:	f000 f8de 	bleq	bae8c <__aeabi_dmul+0x1dc>
   bacd0:	442c      	add	r4, r5
   bacd2:	ea81 0603 	eor.w	r6, r1, r3
   bacd6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bacda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bacde:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bace2:	bf18      	it	ne
   bace4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bace8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bacec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bacf0:	d038      	beq.n	bad64 <__aeabi_dmul+0xb4>
   bacf2:	fba0 ce02 	umull	ip, lr, r0, r2
   bacf6:	f04f 0500 	mov.w	r5, #0
   bacfa:	fbe1 e502 	umlal	lr, r5, r1, r2
   bacfe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bad02:	fbe0 e503 	umlal	lr, r5, r0, r3
   bad06:	f04f 0600 	mov.w	r6, #0
   bad0a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bad0e:	f09c 0f00 	teq	ip, #0
   bad12:	bf18      	it	ne
   bad14:	f04e 0e01 	orrne.w	lr, lr, #1
   bad18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bad1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bad20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bad24:	d204      	bcs.n	bad30 <__aeabi_dmul+0x80>
   bad26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bad2a:	416d      	adcs	r5, r5
   bad2c:	eb46 0606 	adc.w	r6, r6, r6
   bad30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bad34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bad38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bad3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bad40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bad44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bad48:	bf88      	it	hi
   bad4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bad4e:	d81e      	bhi.n	bad8e <__aeabi_dmul+0xde>
   bad50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bad54:	bf08      	it	eq
   bad56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bad5a:	f150 0000 	adcs.w	r0, r0, #0
   bad5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bad62:	bd70      	pop	{r4, r5, r6, pc}
   bad64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bad68:	ea46 0101 	orr.w	r1, r6, r1
   bad6c:	ea40 0002 	orr.w	r0, r0, r2
   bad70:	ea81 0103 	eor.w	r1, r1, r3
   bad74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bad78:	bfc2      	ittt	gt
   bad7a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bad7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bad82:	bd70      	popgt	{r4, r5, r6, pc}
   bad84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bad88:	f04f 0e00 	mov.w	lr, #0
   bad8c:	3c01      	subs	r4, #1
   bad8e:	f300 80ab 	bgt.w	baee8 <__aeabi_dmul+0x238>
   bad92:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bad96:	bfde      	ittt	le
   bad98:	2000      	movle	r0, #0
   bad9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bad9e:	bd70      	pople	{r4, r5, r6, pc}
   bada0:	f1c4 0400 	rsb	r4, r4, #0
   bada4:	3c20      	subs	r4, #32
   bada6:	da35      	bge.n	bae14 <__aeabi_dmul+0x164>
   bada8:	340c      	adds	r4, #12
   badaa:	dc1b      	bgt.n	bade4 <__aeabi_dmul+0x134>
   badac:	f104 0414 	add.w	r4, r4, #20
   badb0:	f1c4 0520 	rsb	r5, r4, #32
   badb4:	fa00 f305 	lsl.w	r3, r0, r5
   badb8:	fa20 f004 	lsr.w	r0, r0, r4
   badbc:	fa01 f205 	lsl.w	r2, r1, r5
   badc0:	ea40 0002 	orr.w	r0, r0, r2
   badc4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   badc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   badcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   badd0:	fa21 f604 	lsr.w	r6, r1, r4
   badd4:	eb42 0106 	adc.w	r1, r2, r6
   badd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   baddc:	bf08      	it	eq
   badde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bade2:	bd70      	pop	{r4, r5, r6, pc}
   bade4:	f1c4 040c 	rsb	r4, r4, #12
   bade8:	f1c4 0520 	rsb	r5, r4, #32
   badec:	fa00 f304 	lsl.w	r3, r0, r4
   badf0:	fa20 f005 	lsr.w	r0, r0, r5
   badf4:	fa01 f204 	lsl.w	r2, r1, r4
   badf8:	ea40 0002 	orr.w	r0, r0, r2
   badfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bae00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bae04:	f141 0100 	adc.w	r1, r1, #0
   bae08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bae0c:	bf08      	it	eq
   bae0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bae12:	bd70      	pop	{r4, r5, r6, pc}
   bae14:	f1c4 0520 	rsb	r5, r4, #32
   bae18:	fa00 f205 	lsl.w	r2, r0, r5
   bae1c:	ea4e 0e02 	orr.w	lr, lr, r2
   bae20:	fa20 f304 	lsr.w	r3, r0, r4
   bae24:	fa01 f205 	lsl.w	r2, r1, r5
   bae28:	ea43 0302 	orr.w	r3, r3, r2
   bae2c:	fa21 f004 	lsr.w	r0, r1, r4
   bae30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bae34:	fa21 f204 	lsr.w	r2, r1, r4
   bae38:	ea20 0002 	bic.w	r0, r0, r2
   bae3c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bae40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bae44:	bf08      	it	eq
   bae46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bae4a:	bd70      	pop	{r4, r5, r6, pc}
   bae4c:	f094 0f00 	teq	r4, #0
   bae50:	d10f      	bne.n	bae72 <__aeabi_dmul+0x1c2>
   bae52:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bae56:	0040      	lsls	r0, r0, #1
   bae58:	eb41 0101 	adc.w	r1, r1, r1
   bae5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae60:	bf08      	it	eq
   bae62:	3c01      	subeq	r4, #1
   bae64:	d0f7      	beq.n	bae56 <__aeabi_dmul+0x1a6>
   bae66:	ea41 0106 	orr.w	r1, r1, r6
   bae6a:	f095 0f00 	teq	r5, #0
   bae6e:	bf18      	it	ne
   bae70:	4770      	bxne	lr
   bae72:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bae76:	0052      	lsls	r2, r2, #1
   bae78:	eb43 0303 	adc.w	r3, r3, r3
   bae7c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bae80:	bf08      	it	eq
   bae82:	3d01      	subeq	r5, #1
   bae84:	d0f7      	beq.n	bae76 <__aeabi_dmul+0x1c6>
   bae86:	ea43 0306 	orr.w	r3, r3, r6
   bae8a:	4770      	bx	lr
   bae8c:	ea94 0f0c 	teq	r4, ip
   bae90:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bae94:	bf18      	it	ne
   bae96:	ea95 0f0c 	teqne	r5, ip
   bae9a:	d00c      	beq.n	baeb6 <__aeabi_dmul+0x206>
   bae9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baea0:	bf18      	it	ne
   baea2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baea6:	d1d1      	bne.n	bae4c <__aeabi_dmul+0x19c>
   baea8:	ea81 0103 	eor.w	r1, r1, r3
   baeac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baeb0:	f04f 0000 	mov.w	r0, #0
   baeb4:	bd70      	pop	{r4, r5, r6, pc}
   baeb6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baeba:	bf06      	itte	eq
   baebc:	4610      	moveq	r0, r2
   baebe:	4619      	moveq	r1, r3
   baec0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baec4:	d019      	beq.n	baefa <__aeabi_dmul+0x24a>
   baec6:	ea94 0f0c 	teq	r4, ip
   baeca:	d102      	bne.n	baed2 <__aeabi_dmul+0x222>
   baecc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   baed0:	d113      	bne.n	baefa <__aeabi_dmul+0x24a>
   baed2:	ea95 0f0c 	teq	r5, ip
   baed6:	d105      	bne.n	baee4 <__aeabi_dmul+0x234>
   baed8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   baedc:	bf1c      	itt	ne
   baede:	4610      	movne	r0, r2
   baee0:	4619      	movne	r1, r3
   baee2:	d10a      	bne.n	baefa <__aeabi_dmul+0x24a>
   baee4:	ea81 0103 	eor.w	r1, r1, r3
   baee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baeec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   baef0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   baef4:	f04f 0000 	mov.w	r0, #0
   baef8:	bd70      	pop	{r4, r5, r6, pc}
   baefa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   baefe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   baf02:	bd70      	pop	{r4, r5, r6, pc}

000baf04 <__aeabi_ddiv>:
   baf04:	b570      	push	{r4, r5, r6, lr}
   baf06:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baf0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baf0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   baf12:	bf1d      	ittte	ne
   baf14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   baf18:	ea94 0f0c 	teqne	r4, ip
   baf1c:	ea95 0f0c 	teqne	r5, ip
   baf20:	f000 f8a7 	bleq	bb072 <__aeabi_ddiv+0x16e>
   baf24:	eba4 0405 	sub.w	r4, r4, r5
   baf28:	ea81 0e03 	eor.w	lr, r1, r3
   baf2c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   baf30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   baf34:	f000 8088 	beq.w	bb048 <__aeabi_ddiv+0x144>
   baf38:	ea4f 3303 	mov.w	r3, r3, lsl #12
   baf3c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   baf40:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   baf44:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   baf48:	ea4f 2202 	mov.w	r2, r2, lsl #8
   baf4c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   baf50:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   baf54:	ea4f 2600 	mov.w	r6, r0, lsl #8
   baf58:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   baf5c:	429d      	cmp	r5, r3
   baf5e:	bf08      	it	eq
   baf60:	4296      	cmpeq	r6, r2
   baf62:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   baf66:	f504 7440 	add.w	r4, r4, #768	; 0x300
   baf6a:	d202      	bcs.n	baf72 <__aeabi_ddiv+0x6e>
   baf6c:	085b      	lsrs	r3, r3, #1
   baf6e:	ea4f 0232 	mov.w	r2, r2, rrx
   baf72:	1ab6      	subs	r6, r6, r2
   baf74:	eb65 0503 	sbc.w	r5, r5, r3
   baf78:	085b      	lsrs	r3, r3, #1
   baf7a:	ea4f 0232 	mov.w	r2, r2, rrx
   baf7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   baf82:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   baf86:	ebb6 0e02 	subs.w	lr, r6, r2
   baf8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   baf8e:	bf22      	ittt	cs
   baf90:	1ab6      	subcs	r6, r6, r2
   baf92:	4675      	movcs	r5, lr
   baf94:	ea40 000c 	orrcs.w	r0, r0, ip
   baf98:	085b      	lsrs	r3, r3, #1
   baf9a:	ea4f 0232 	mov.w	r2, r2, rrx
   baf9e:	ebb6 0e02 	subs.w	lr, r6, r2
   bafa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bafa6:	bf22      	ittt	cs
   bafa8:	1ab6      	subcs	r6, r6, r2
   bafaa:	4675      	movcs	r5, lr
   bafac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bafb0:	085b      	lsrs	r3, r3, #1
   bafb2:	ea4f 0232 	mov.w	r2, r2, rrx
   bafb6:	ebb6 0e02 	subs.w	lr, r6, r2
   bafba:	eb75 0e03 	sbcs.w	lr, r5, r3
   bafbe:	bf22      	ittt	cs
   bafc0:	1ab6      	subcs	r6, r6, r2
   bafc2:	4675      	movcs	r5, lr
   bafc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bafc8:	085b      	lsrs	r3, r3, #1
   bafca:	ea4f 0232 	mov.w	r2, r2, rrx
   bafce:	ebb6 0e02 	subs.w	lr, r6, r2
   bafd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bafd6:	bf22      	ittt	cs
   bafd8:	1ab6      	subcs	r6, r6, r2
   bafda:	4675      	movcs	r5, lr
   bafdc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bafe0:	ea55 0e06 	orrs.w	lr, r5, r6
   bafe4:	d018      	beq.n	bb018 <__aeabi_ddiv+0x114>
   bafe6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bafea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bafee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   baff2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   baff6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   baffa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   baffe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb002:	d1c0      	bne.n	baf86 <__aeabi_ddiv+0x82>
   bb004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb008:	d10b      	bne.n	bb022 <__aeabi_ddiv+0x11e>
   bb00a:	ea41 0100 	orr.w	r1, r1, r0
   bb00e:	f04f 0000 	mov.w	r0, #0
   bb012:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb016:	e7b6      	b.n	baf86 <__aeabi_ddiv+0x82>
   bb018:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb01c:	bf04      	itt	eq
   bb01e:	4301      	orreq	r1, r0
   bb020:	2000      	moveq	r0, #0
   bb022:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb026:	bf88      	it	hi
   bb028:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb02c:	f63f aeaf 	bhi.w	bad8e <__aeabi_dmul+0xde>
   bb030:	ebb5 0c03 	subs.w	ip, r5, r3
   bb034:	bf04      	itt	eq
   bb036:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb03a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb03e:	f150 0000 	adcs.w	r0, r0, #0
   bb042:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb046:	bd70      	pop	{r4, r5, r6, pc}
   bb048:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb04c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb050:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb054:	bfc2      	ittt	gt
   bb056:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb05a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb05e:	bd70      	popgt	{r4, r5, r6, pc}
   bb060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb064:	f04f 0e00 	mov.w	lr, #0
   bb068:	3c01      	subs	r4, #1
   bb06a:	e690      	b.n	bad8e <__aeabi_dmul+0xde>
   bb06c:	ea45 0e06 	orr.w	lr, r5, r6
   bb070:	e68d      	b.n	bad8e <__aeabi_dmul+0xde>
   bb072:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb076:	ea94 0f0c 	teq	r4, ip
   bb07a:	bf08      	it	eq
   bb07c:	ea95 0f0c 	teqeq	r5, ip
   bb080:	f43f af3b 	beq.w	baefa <__aeabi_dmul+0x24a>
   bb084:	ea94 0f0c 	teq	r4, ip
   bb088:	d10a      	bne.n	bb0a0 <__aeabi_ddiv+0x19c>
   bb08a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb08e:	f47f af34 	bne.w	baefa <__aeabi_dmul+0x24a>
   bb092:	ea95 0f0c 	teq	r5, ip
   bb096:	f47f af25 	bne.w	baee4 <__aeabi_dmul+0x234>
   bb09a:	4610      	mov	r0, r2
   bb09c:	4619      	mov	r1, r3
   bb09e:	e72c      	b.n	baefa <__aeabi_dmul+0x24a>
   bb0a0:	ea95 0f0c 	teq	r5, ip
   bb0a4:	d106      	bne.n	bb0b4 <__aeabi_ddiv+0x1b0>
   bb0a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb0aa:	f43f aefd 	beq.w	baea8 <__aeabi_dmul+0x1f8>
   bb0ae:	4610      	mov	r0, r2
   bb0b0:	4619      	mov	r1, r3
   bb0b2:	e722      	b.n	baefa <__aeabi_dmul+0x24a>
   bb0b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb0b8:	bf18      	it	ne
   bb0ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb0be:	f47f aec5 	bne.w	bae4c <__aeabi_dmul+0x19c>
   bb0c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb0c6:	f47f af0d 	bne.w	baee4 <__aeabi_dmul+0x234>
   bb0ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb0ce:	f47f aeeb 	bne.w	baea8 <__aeabi_dmul+0x1f8>
   bb0d2:	e712      	b.n	baefa <__aeabi_dmul+0x24a>

000bb0d4 <__gedf2>:
   bb0d4:	f04f 3cff 	mov.w	ip, #4294967295
   bb0d8:	e006      	b.n	bb0e8 <__cmpdf2+0x4>
   bb0da:	bf00      	nop

000bb0dc <__ledf2>:
   bb0dc:	f04f 0c01 	mov.w	ip, #1
   bb0e0:	e002      	b.n	bb0e8 <__cmpdf2+0x4>
   bb0e2:	bf00      	nop

000bb0e4 <__cmpdf2>:
   bb0e4:	f04f 0c01 	mov.w	ip, #1
   bb0e8:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb0ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb0f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb0f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb0f8:	bf18      	it	ne
   bb0fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb0fe:	d01b      	beq.n	bb138 <__cmpdf2+0x54>
   bb100:	b001      	add	sp, #4
   bb102:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb106:	bf0c      	ite	eq
   bb108:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb10c:	ea91 0f03 	teqne	r1, r3
   bb110:	bf02      	ittt	eq
   bb112:	ea90 0f02 	teqeq	r0, r2
   bb116:	2000      	moveq	r0, #0
   bb118:	4770      	bxeq	lr
   bb11a:	f110 0f00 	cmn.w	r0, #0
   bb11e:	ea91 0f03 	teq	r1, r3
   bb122:	bf58      	it	pl
   bb124:	4299      	cmppl	r1, r3
   bb126:	bf08      	it	eq
   bb128:	4290      	cmpeq	r0, r2
   bb12a:	bf2c      	ite	cs
   bb12c:	17d8      	asrcs	r0, r3, #31
   bb12e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb132:	f040 0001 	orr.w	r0, r0, #1
   bb136:	4770      	bx	lr
   bb138:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb13c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb140:	d102      	bne.n	bb148 <__cmpdf2+0x64>
   bb142:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb146:	d107      	bne.n	bb158 <__cmpdf2+0x74>
   bb148:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb14c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb150:	d1d6      	bne.n	bb100 <__cmpdf2+0x1c>
   bb152:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb156:	d0d3      	beq.n	bb100 <__cmpdf2+0x1c>
   bb158:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb15c:	4770      	bx	lr
   bb15e:	bf00      	nop

000bb160 <__aeabi_cdrcmple>:
   bb160:	4684      	mov	ip, r0
   bb162:	4610      	mov	r0, r2
   bb164:	4662      	mov	r2, ip
   bb166:	468c      	mov	ip, r1
   bb168:	4619      	mov	r1, r3
   bb16a:	4663      	mov	r3, ip
   bb16c:	e000      	b.n	bb170 <__aeabi_cdcmpeq>
   bb16e:	bf00      	nop

000bb170 <__aeabi_cdcmpeq>:
   bb170:	b501      	push	{r0, lr}
   bb172:	f7ff ffb7 	bl	bb0e4 <__cmpdf2>
   bb176:	2800      	cmp	r0, #0
   bb178:	bf48      	it	mi
   bb17a:	f110 0f00 	cmnmi.w	r0, #0
   bb17e:	bd01      	pop	{r0, pc}

000bb180 <__aeabi_dcmpeq>:
   bb180:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb184:	f7ff fff4 	bl	bb170 <__aeabi_cdcmpeq>
   bb188:	bf0c      	ite	eq
   bb18a:	2001      	moveq	r0, #1
   bb18c:	2000      	movne	r0, #0
   bb18e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb192:	bf00      	nop

000bb194 <__aeabi_dcmplt>:
   bb194:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb198:	f7ff ffea 	bl	bb170 <__aeabi_cdcmpeq>
   bb19c:	bf34      	ite	cc
   bb19e:	2001      	movcc	r0, #1
   bb1a0:	2000      	movcs	r0, #0
   bb1a2:	f85d fb08 	ldr.w	pc, [sp], #8
   bb1a6:	bf00      	nop

000bb1a8 <__aeabi_dcmple>:
   bb1a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb1ac:	f7ff ffe0 	bl	bb170 <__aeabi_cdcmpeq>
   bb1b0:	bf94      	ite	ls
   bb1b2:	2001      	movls	r0, #1
   bb1b4:	2000      	movhi	r0, #0
   bb1b6:	f85d fb08 	ldr.w	pc, [sp], #8
   bb1ba:	bf00      	nop

000bb1bc <__aeabi_dcmpge>:
   bb1bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb1c0:	f7ff ffce 	bl	bb160 <__aeabi_cdrcmple>
   bb1c4:	bf94      	ite	ls
   bb1c6:	2001      	movls	r0, #1
   bb1c8:	2000      	movhi	r0, #0
   bb1ca:	f85d fb08 	ldr.w	pc, [sp], #8
   bb1ce:	bf00      	nop

000bb1d0 <__aeabi_dcmpgt>:
   bb1d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb1d4:	f7ff ffc4 	bl	bb160 <__aeabi_cdrcmple>
   bb1d8:	bf34      	ite	cc
   bb1da:	2001      	movcc	r0, #1
   bb1dc:	2000      	movcs	r0, #0
   bb1de:	f85d fb08 	ldr.w	pc, [sp], #8
   bb1e2:	bf00      	nop

000bb1e4 <__aeabi_d2uiz>:
   bb1e4:	004a      	lsls	r2, r1, #1
   bb1e6:	d211      	bcs.n	bb20c <__aeabi_d2uiz+0x28>
   bb1e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb1ec:	d211      	bcs.n	bb212 <__aeabi_d2uiz+0x2e>
   bb1ee:	d50d      	bpl.n	bb20c <__aeabi_d2uiz+0x28>
   bb1f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb1f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb1f8:	d40e      	bmi.n	bb218 <__aeabi_d2uiz+0x34>
   bb1fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb1fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb202:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb206:	fa23 f002 	lsr.w	r0, r3, r2
   bb20a:	4770      	bx	lr
   bb20c:	f04f 0000 	mov.w	r0, #0
   bb210:	4770      	bx	lr
   bb212:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb216:	d102      	bne.n	bb21e <__aeabi_d2uiz+0x3a>
   bb218:	f04f 30ff 	mov.w	r0, #4294967295
   bb21c:	4770      	bx	lr
   bb21e:	f04f 0000 	mov.w	r0, #0
   bb222:	4770      	bx	lr

000bb224 <__aeabi_f2lz>:
   bb224:	ee07 0a90 	vmov	s15, r0
   bb228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb230:	d401      	bmi.n	bb236 <__aeabi_f2lz+0x12>
   bb232:	f000 b80b 	b.w	bb24c <__aeabi_f2ulz>
   bb236:	eef1 7a67 	vneg.f32	s15, s15
   bb23a:	b508      	push	{r3, lr}
   bb23c:	ee17 0a90 	vmov	r0, s15
   bb240:	f000 f804 	bl	bb24c <__aeabi_f2ulz>
   bb244:	4240      	negs	r0, r0
   bb246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb24a:	bd08      	pop	{r3, pc}

000bb24c <__aeabi_f2ulz>:
   bb24c:	b5d0      	push	{r4, r6, r7, lr}
   bb24e:	f7ff fcd7 	bl	bac00 <__aeabi_f2d>
   bb252:	4b0c      	ldr	r3, [pc, #48]	; (bb284 <__aeabi_f2ulz+0x38>)
   bb254:	2200      	movs	r2, #0
   bb256:	4606      	mov	r6, r0
   bb258:	460f      	mov	r7, r1
   bb25a:	f7ff fd29 	bl	bacb0 <__aeabi_dmul>
   bb25e:	f7ff ffc1 	bl	bb1e4 <__aeabi_d2uiz>
   bb262:	4604      	mov	r4, r0
   bb264:	f7ff fcaa 	bl	babbc <__aeabi_ui2d>
   bb268:	4b07      	ldr	r3, [pc, #28]	; (bb288 <__aeabi_f2ulz+0x3c>)
   bb26a:	2200      	movs	r2, #0
   bb26c:	f7ff fd20 	bl	bacb0 <__aeabi_dmul>
   bb270:	4602      	mov	r2, r0
   bb272:	460b      	mov	r3, r1
   bb274:	4630      	mov	r0, r6
   bb276:	4639      	mov	r1, r7
   bb278:	f7ff fb62 	bl	ba940 <__aeabi_dsub>
   bb27c:	f7ff ffb2 	bl	bb1e4 <__aeabi_d2uiz>
   bb280:	4621      	mov	r1, r4
   bb282:	bdd0      	pop	{r4, r6, r7, pc}
   bb284:	3df00000 	.word	0x3df00000
   bb288:	41f00000 	.word	0x41f00000

000bb28c <__aeabi_d2ulz>:
   bb28c:	b5d0      	push	{r4, r6, r7, lr}
   bb28e:	4b0c      	ldr	r3, [pc, #48]	; (bb2c0 <__aeabi_d2ulz+0x34>)
   bb290:	2200      	movs	r2, #0
   bb292:	4606      	mov	r6, r0
   bb294:	460f      	mov	r7, r1
   bb296:	f7ff fd0b 	bl	bacb0 <__aeabi_dmul>
   bb29a:	f7ff ffa3 	bl	bb1e4 <__aeabi_d2uiz>
   bb29e:	4604      	mov	r4, r0
   bb2a0:	f7ff fc8c 	bl	babbc <__aeabi_ui2d>
   bb2a4:	4b07      	ldr	r3, [pc, #28]	; (bb2c4 <__aeabi_d2ulz+0x38>)
   bb2a6:	2200      	movs	r2, #0
   bb2a8:	f7ff fd02 	bl	bacb0 <__aeabi_dmul>
   bb2ac:	4602      	mov	r2, r0
   bb2ae:	460b      	mov	r3, r1
   bb2b0:	4630      	mov	r0, r6
   bb2b2:	4639      	mov	r1, r7
   bb2b4:	f7ff fb44 	bl	ba940 <__aeabi_dsub>
   bb2b8:	f7ff ff94 	bl	bb1e4 <__aeabi_d2uiz>
   bb2bc:	4621      	mov	r1, r4
   bb2be:	bdd0      	pop	{r4, r6, r7, pc}
   bb2c0:	3df00000 	.word	0x3df00000
   bb2c4:	41f00000 	.word	0x41f00000

000bb2c8 <atexit>:
   bb2c8:	2300      	movs	r3, #0
   bb2ca:	4601      	mov	r1, r0
   bb2cc:	461a      	mov	r2, r3
   bb2ce:	4618      	mov	r0, r3
   bb2d0:	f001 b81c 	b.w	bc30c <__register_exitproc>

000bb2d4 <atof>:
   bb2d4:	2100      	movs	r1, #0
   bb2d6:	f000 bf25 	b.w	bc124 <strtod>

000bb2da <atoi>:
   bb2da:	220a      	movs	r2, #10
   bb2dc:	2100      	movs	r1, #0
   bb2de:	f001 b80b 	b.w	bc2f8 <strtol>

000bb2e2 <ldiv>:
   bb2e2:	2900      	cmp	r1, #0
   bb2e4:	b510      	push	{r4, lr}
   bb2e6:	fb91 f4f2 	sdiv	r4, r1, r2
   bb2ea:	fb02 1314 	mls	r3, r2, r4, r1
   bb2ee:	db06      	blt.n	bb2fe <ldiv+0x1c>
   bb2f0:	2b00      	cmp	r3, #0
   bb2f2:	da01      	bge.n	bb2f8 <ldiv+0x16>
   bb2f4:	3401      	adds	r4, #1
   bb2f6:	1a9b      	subs	r3, r3, r2
   bb2f8:	e9c0 4300 	strd	r4, r3, [r0]
   bb2fc:	bd10      	pop	{r4, pc}
   bb2fe:	2b00      	cmp	r3, #0
   bb300:	bfc4      	itt	gt
   bb302:	f104 34ff 	addgt.w	r4, r4, #4294967295
   bb306:	189b      	addgt	r3, r3, r2
   bb308:	e7f6      	b.n	bb2f8 <ldiv+0x16>

000bb30a <memcmp>:
   bb30a:	b510      	push	{r4, lr}
   bb30c:	3901      	subs	r1, #1
   bb30e:	4402      	add	r2, r0
   bb310:	4290      	cmp	r0, r2
   bb312:	d101      	bne.n	bb318 <memcmp+0xe>
   bb314:	2000      	movs	r0, #0
   bb316:	e005      	b.n	bb324 <memcmp+0x1a>
   bb318:	7803      	ldrb	r3, [r0, #0]
   bb31a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb31e:	42a3      	cmp	r3, r4
   bb320:	d001      	beq.n	bb326 <memcmp+0x1c>
   bb322:	1b18      	subs	r0, r3, r4
   bb324:	bd10      	pop	{r4, pc}
   bb326:	3001      	adds	r0, #1
   bb328:	e7f2      	b.n	bb310 <memcmp+0x6>

000bb32a <memcpy>:
   bb32a:	440a      	add	r2, r1
   bb32c:	4291      	cmp	r1, r2
   bb32e:	f100 33ff 	add.w	r3, r0, #4294967295
   bb332:	d100      	bne.n	bb336 <memcpy+0xc>
   bb334:	4770      	bx	lr
   bb336:	b510      	push	{r4, lr}
   bb338:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb33c:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb340:	4291      	cmp	r1, r2
   bb342:	d1f9      	bne.n	bb338 <memcpy+0xe>
   bb344:	bd10      	pop	{r4, pc}

000bb346 <memmove>:
   bb346:	4288      	cmp	r0, r1
   bb348:	b510      	push	{r4, lr}
   bb34a:	eb01 0402 	add.w	r4, r1, r2
   bb34e:	d902      	bls.n	bb356 <memmove+0x10>
   bb350:	4284      	cmp	r4, r0
   bb352:	4623      	mov	r3, r4
   bb354:	d807      	bhi.n	bb366 <memmove+0x20>
   bb356:	1e43      	subs	r3, r0, #1
   bb358:	42a1      	cmp	r1, r4
   bb35a:	d008      	beq.n	bb36e <memmove+0x28>
   bb35c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb360:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb364:	e7f8      	b.n	bb358 <memmove+0x12>
   bb366:	4402      	add	r2, r0
   bb368:	4601      	mov	r1, r0
   bb36a:	428a      	cmp	r2, r1
   bb36c:	d100      	bne.n	bb370 <memmove+0x2a>
   bb36e:	bd10      	pop	{r4, pc}
   bb370:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb374:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb378:	e7f7      	b.n	bb36a <memmove+0x24>

000bb37a <memset>:
   bb37a:	4402      	add	r2, r0
   bb37c:	4603      	mov	r3, r0
   bb37e:	4293      	cmp	r3, r2
   bb380:	d100      	bne.n	bb384 <memset+0xa>
   bb382:	4770      	bx	lr
   bb384:	f803 1b01 	strb.w	r1, [r3], #1
   bb388:	e7f9      	b.n	bb37e <memset+0x4>
	...

000bb38c <srand>:
   bb38c:	b538      	push	{r3, r4, r5, lr}
   bb38e:	4b10      	ldr	r3, [pc, #64]	; (bb3d0 <srand+0x44>)
   bb390:	681d      	ldr	r5, [r3, #0]
   bb392:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb394:	4604      	mov	r4, r0
   bb396:	b9b3      	cbnz	r3, bb3c6 <srand+0x3a>
   bb398:	2018      	movs	r0, #24
   bb39a:	f7fb fd73 	bl	b6e84 <malloc>
   bb39e:	4602      	mov	r2, r0
   bb3a0:	63a8      	str	r0, [r5, #56]	; 0x38
   bb3a2:	b920      	cbnz	r0, bb3ae <srand+0x22>
   bb3a4:	4b0b      	ldr	r3, [pc, #44]	; (bb3d4 <srand+0x48>)
   bb3a6:	480c      	ldr	r0, [pc, #48]	; (bb3d8 <srand+0x4c>)
   bb3a8:	2142      	movs	r1, #66	; 0x42
   bb3aa:	f7fb fdab 	bl	b6f04 <__assert_func>
   bb3ae:	490b      	ldr	r1, [pc, #44]	; (bb3dc <srand+0x50>)
   bb3b0:	4b0b      	ldr	r3, [pc, #44]	; (bb3e0 <srand+0x54>)
   bb3b2:	e9c0 1300 	strd	r1, r3, [r0]
   bb3b6:	4b0b      	ldr	r3, [pc, #44]	; (bb3e4 <srand+0x58>)
   bb3b8:	6083      	str	r3, [r0, #8]
   bb3ba:	230b      	movs	r3, #11
   bb3bc:	8183      	strh	r3, [r0, #12]
   bb3be:	2100      	movs	r1, #0
   bb3c0:	2001      	movs	r0, #1
   bb3c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb3c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb3c8:	2200      	movs	r2, #0
   bb3ca:	611c      	str	r4, [r3, #16]
   bb3cc:	615a      	str	r2, [r3, #20]
   bb3ce:	bd38      	pop	{r3, r4, r5, pc}
   bb3d0:	2003d924 	.word	0x2003d924
   bb3d4:	000be0a1 	.word	0x000be0a1
   bb3d8:	000be0b8 	.word	0x000be0b8
   bb3dc:	abcd330e 	.word	0xabcd330e
   bb3e0:	e66d1234 	.word	0xe66d1234
   bb3e4:	0005deec 	.word	0x0005deec

000bb3e8 <strcat>:
   bb3e8:	b510      	push	{r4, lr}
   bb3ea:	4602      	mov	r2, r0
   bb3ec:	7814      	ldrb	r4, [r2, #0]
   bb3ee:	4613      	mov	r3, r2
   bb3f0:	3201      	adds	r2, #1
   bb3f2:	2c00      	cmp	r4, #0
   bb3f4:	d1fa      	bne.n	bb3ec <strcat+0x4>
   bb3f6:	3b01      	subs	r3, #1
   bb3f8:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb3fc:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb400:	2a00      	cmp	r2, #0
   bb402:	d1f9      	bne.n	bb3f8 <strcat+0x10>
   bb404:	bd10      	pop	{r4, pc}

000bb406 <strcmp>:
   bb406:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb40a:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb40e:	2a01      	cmp	r2, #1
   bb410:	bf28      	it	cs
   bb412:	429a      	cmpcs	r2, r3
   bb414:	d0f7      	beq.n	bb406 <strcmp>
   bb416:	1ad0      	subs	r0, r2, r3
   bb418:	4770      	bx	lr

000bb41a <strcpy>:
   bb41a:	4603      	mov	r3, r0
   bb41c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb420:	f803 2b01 	strb.w	r2, [r3], #1
   bb424:	2a00      	cmp	r2, #0
   bb426:	d1f9      	bne.n	bb41c <strcpy+0x2>
   bb428:	4770      	bx	lr
	...

000bb42c <strdup>:
   bb42c:	4b02      	ldr	r3, [pc, #8]	; (bb438 <strdup+0xc>)
   bb42e:	4601      	mov	r1, r0
   bb430:	6818      	ldr	r0, [r3, #0]
   bb432:	f000 b803 	b.w	bb43c <_strdup_r>
   bb436:	bf00      	nop
   bb438:	2003d924 	.word	0x2003d924

000bb43c <_strdup_r>:
   bb43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb43e:	4604      	mov	r4, r0
   bb440:	4608      	mov	r0, r1
   bb442:	460d      	mov	r5, r1
   bb444:	f000 f80f 	bl	bb466 <strlen>
   bb448:	1c42      	adds	r2, r0, #1
   bb44a:	4611      	mov	r1, r2
   bb44c:	4620      	mov	r0, r4
   bb44e:	9201      	str	r2, [sp, #4]
   bb450:	f7fb fd48 	bl	b6ee4 <_malloc_r>
   bb454:	4604      	mov	r4, r0
   bb456:	b118      	cbz	r0, bb460 <_strdup_r+0x24>
   bb458:	9a01      	ldr	r2, [sp, #4]
   bb45a:	4629      	mov	r1, r5
   bb45c:	f7ff ff65 	bl	bb32a <memcpy>
   bb460:	4620      	mov	r0, r4
   bb462:	b003      	add	sp, #12
   bb464:	bd30      	pop	{r4, r5, pc}

000bb466 <strlen>:
   bb466:	4603      	mov	r3, r0
   bb468:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb46c:	2a00      	cmp	r2, #0
   bb46e:	d1fb      	bne.n	bb468 <strlen+0x2>
   bb470:	1a18      	subs	r0, r3, r0
   bb472:	3801      	subs	r0, #1
   bb474:	4770      	bx	lr

000bb476 <strncmp>:
   bb476:	b510      	push	{r4, lr}
   bb478:	b17a      	cbz	r2, bb49a <strncmp+0x24>
   bb47a:	4603      	mov	r3, r0
   bb47c:	3901      	subs	r1, #1
   bb47e:	1884      	adds	r4, r0, r2
   bb480:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb484:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb488:	4290      	cmp	r0, r2
   bb48a:	d101      	bne.n	bb490 <strncmp+0x1a>
   bb48c:	42a3      	cmp	r3, r4
   bb48e:	d101      	bne.n	bb494 <strncmp+0x1e>
   bb490:	1a80      	subs	r0, r0, r2
   bb492:	bd10      	pop	{r4, pc}
   bb494:	2800      	cmp	r0, #0
   bb496:	d1f3      	bne.n	bb480 <strncmp+0xa>
   bb498:	e7fa      	b.n	bb490 <strncmp+0x1a>
   bb49a:	4610      	mov	r0, r2
   bb49c:	e7f9      	b.n	bb492 <strncmp+0x1c>

000bb49e <strncpy>:
   bb49e:	b510      	push	{r4, lr}
   bb4a0:	3901      	subs	r1, #1
   bb4a2:	4603      	mov	r3, r0
   bb4a4:	b132      	cbz	r2, bb4b4 <strncpy+0x16>
   bb4a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb4aa:	f803 4b01 	strb.w	r4, [r3], #1
   bb4ae:	3a01      	subs	r2, #1
   bb4b0:	2c00      	cmp	r4, #0
   bb4b2:	d1f7      	bne.n	bb4a4 <strncpy+0x6>
   bb4b4:	441a      	add	r2, r3
   bb4b6:	2100      	movs	r1, #0
   bb4b8:	4293      	cmp	r3, r2
   bb4ba:	d100      	bne.n	bb4be <strncpy+0x20>
   bb4bc:	bd10      	pop	{r4, pc}
   bb4be:	f803 1b01 	strb.w	r1, [r3], #1
   bb4c2:	e7f9      	b.n	bb4b8 <strncpy+0x1a>

000bb4c4 <strnlen>:
   bb4c4:	b510      	push	{r4, lr}
   bb4c6:	4602      	mov	r2, r0
   bb4c8:	4401      	add	r1, r0
   bb4ca:	428a      	cmp	r2, r1
   bb4cc:	4613      	mov	r3, r2
   bb4ce:	d003      	beq.n	bb4d8 <strnlen+0x14>
   bb4d0:	781c      	ldrb	r4, [r3, #0]
   bb4d2:	3201      	adds	r2, #1
   bb4d4:	2c00      	cmp	r4, #0
   bb4d6:	d1f8      	bne.n	bb4ca <strnlen+0x6>
   bb4d8:	1a18      	subs	r0, r3, r0
   bb4da:	bd10      	pop	{r4, pc}

000bb4dc <sulp>:
   bb4dc:	b570      	push	{r4, r5, r6, lr}
   bb4de:	4604      	mov	r4, r0
   bb4e0:	460d      	mov	r5, r1
   bb4e2:	ec45 4b10 	vmov	d0, r4, r5
   bb4e6:	4616      	mov	r6, r2
   bb4e8:	f001 fe6a 	bl	bd1c0 <__ulp>
   bb4ec:	ec51 0b10 	vmov	r0, r1, d0
   bb4f0:	b17e      	cbz	r6, bb512 <sulp+0x36>
   bb4f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb4f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb4fa:	2b00      	cmp	r3, #0
   bb4fc:	dd09      	ble.n	bb512 <sulp+0x36>
   bb4fe:	051b      	lsls	r3, r3, #20
   bb500:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb504:	2400      	movs	r4, #0
   bb506:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb50a:	4622      	mov	r2, r4
   bb50c:	462b      	mov	r3, r5
   bb50e:	f7ff fbcf 	bl	bacb0 <__aeabi_dmul>
   bb512:	bd70      	pop	{r4, r5, r6, pc}
   bb514:	0000      	movs	r0, r0
	...

000bb518 <_strtod_l>:
   bb518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb51c:	ed2d 8b02 	vpush	{d8}
   bb520:	b09d      	sub	sp, #116	; 0x74
   bb522:	461f      	mov	r7, r3
   bb524:	2300      	movs	r3, #0
   bb526:	9318      	str	r3, [sp, #96]	; 0x60
   bb528:	4ba2      	ldr	r3, [pc, #648]	; (bb7b4 <_strtod_l+0x29c>)
   bb52a:	9213      	str	r2, [sp, #76]	; 0x4c
   bb52c:	681b      	ldr	r3, [r3, #0]
   bb52e:	9305      	str	r3, [sp, #20]
   bb530:	4604      	mov	r4, r0
   bb532:	4618      	mov	r0, r3
   bb534:	4688      	mov	r8, r1
   bb536:	f7ff ff96 	bl	bb466 <strlen>
   bb53a:	f04f 0a00 	mov.w	sl, #0
   bb53e:	4605      	mov	r5, r0
   bb540:	f04f 0b00 	mov.w	fp, #0
   bb544:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb54a:	781a      	ldrb	r2, [r3, #0]
   bb54c:	2a2b      	cmp	r2, #43	; 0x2b
   bb54e:	d04e      	beq.n	bb5ee <_strtod_l+0xd6>
   bb550:	d83b      	bhi.n	bb5ca <_strtod_l+0xb2>
   bb552:	2a0d      	cmp	r2, #13
   bb554:	d834      	bhi.n	bb5c0 <_strtod_l+0xa8>
   bb556:	2a08      	cmp	r2, #8
   bb558:	d834      	bhi.n	bb5c4 <_strtod_l+0xac>
   bb55a:	2a00      	cmp	r2, #0
   bb55c:	d03e      	beq.n	bb5dc <_strtod_l+0xc4>
   bb55e:	2300      	movs	r3, #0
   bb560:	930a      	str	r3, [sp, #40]	; 0x28
   bb562:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb564:	7833      	ldrb	r3, [r6, #0]
   bb566:	2b30      	cmp	r3, #48	; 0x30
   bb568:	f040 80b0 	bne.w	bb6cc <_strtod_l+0x1b4>
   bb56c:	7873      	ldrb	r3, [r6, #1]
   bb56e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb572:	2b58      	cmp	r3, #88	; 0x58
   bb574:	d168      	bne.n	bb648 <_strtod_l+0x130>
   bb576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb578:	9301      	str	r3, [sp, #4]
   bb57a:	ab18      	add	r3, sp, #96	; 0x60
   bb57c:	9702      	str	r7, [sp, #8]
   bb57e:	9300      	str	r3, [sp, #0]
   bb580:	4a8d      	ldr	r2, [pc, #564]	; (bb7b8 <_strtod_l+0x2a0>)
   bb582:	ab19      	add	r3, sp, #100	; 0x64
   bb584:	a917      	add	r1, sp, #92	; 0x5c
   bb586:	4620      	mov	r0, r4
   bb588:	f000 ff8a 	bl	bc4a0 <__gethex>
   bb58c:	f010 0707 	ands.w	r7, r0, #7
   bb590:	4605      	mov	r5, r0
   bb592:	d005      	beq.n	bb5a0 <_strtod_l+0x88>
   bb594:	2f06      	cmp	r7, #6
   bb596:	d12c      	bne.n	bb5f2 <_strtod_l+0xda>
   bb598:	3601      	adds	r6, #1
   bb59a:	2300      	movs	r3, #0
   bb59c:	9617      	str	r6, [sp, #92]	; 0x5c
   bb59e:	930a      	str	r3, [sp, #40]	; 0x28
   bb5a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb5a2:	2b00      	cmp	r3, #0
   bb5a4:	f040 8590 	bne.w	bc0c8 <_strtod_l+0xbb0>
   bb5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb5aa:	b1eb      	cbz	r3, bb5e8 <_strtod_l+0xd0>
   bb5ac:	4652      	mov	r2, sl
   bb5ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb5b2:	ec43 2b10 	vmov	d0, r2, r3
   bb5b6:	b01d      	add	sp, #116	; 0x74
   bb5b8:	ecbd 8b02 	vpop	{d8}
   bb5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb5c0:	2a20      	cmp	r2, #32
   bb5c2:	d1cc      	bne.n	bb55e <_strtod_l+0x46>
   bb5c4:	3301      	adds	r3, #1
   bb5c6:	9317      	str	r3, [sp, #92]	; 0x5c
   bb5c8:	e7be      	b.n	bb548 <_strtod_l+0x30>
   bb5ca:	2a2d      	cmp	r2, #45	; 0x2d
   bb5cc:	d1c7      	bne.n	bb55e <_strtod_l+0x46>
   bb5ce:	2201      	movs	r2, #1
   bb5d0:	920a      	str	r2, [sp, #40]	; 0x28
   bb5d2:	1c5a      	adds	r2, r3, #1
   bb5d4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb5d6:	785b      	ldrb	r3, [r3, #1]
   bb5d8:	2b00      	cmp	r3, #0
   bb5da:	d1c2      	bne.n	bb562 <_strtod_l+0x4a>
   bb5dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb5de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb5e2:	2b00      	cmp	r3, #0
   bb5e4:	f040 856e 	bne.w	bc0c4 <_strtod_l+0xbac>
   bb5e8:	4652      	mov	r2, sl
   bb5ea:	465b      	mov	r3, fp
   bb5ec:	e7e1      	b.n	bb5b2 <_strtod_l+0x9a>
   bb5ee:	2200      	movs	r2, #0
   bb5f0:	e7ee      	b.n	bb5d0 <_strtod_l+0xb8>
   bb5f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb5f4:	b13a      	cbz	r2, bb606 <_strtod_l+0xee>
   bb5f6:	2135      	movs	r1, #53	; 0x35
   bb5f8:	a81a      	add	r0, sp, #104	; 0x68
   bb5fa:	f001 feec 	bl	bd3d6 <__copybits>
   bb5fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb600:	4620      	mov	r0, r4
   bb602:	f001 faab 	bl	bcb5c <_Bfree>
   bb606:	3f01      	subs	r7, #1
   bb608:	2f04      	cmp	r7, #4
   bb60a:	d806      	bhi.n	bb61a <_strtod_l+0x102>
   bb60c:	e8df f007 	tbb	[pc, r7]
   bb610:	1714030a 	.word	0x1714030a
   bb614:	0a          	.byte	0x0a
   bb615:	00          	.byte	0x00
   bb616:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb61a:	0728      	lsls	r0, r5, #28
   bb61c:	d5c0      	bpl.n	bb5a0 <_strtod_l+0x88>
   bb61e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb622:	e7bd      	b.n	bb5a0 <_strtod_l+0x88>
   bb624:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb628:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb62a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb62e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb632:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb636:	e7f0      	b.n	bb61a <_strtod_l+0x102>
   bb638:	f8df b180 	ldr.w	fp, [pc, #384]	; bb7bc <_strtod_l+0x2a4>
   bb63c:	e7ed      	b.n	bb61a <_strtod_l+0x102>
   bb63e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb642:	f04f 3aff 	mov.w	sl, #4294967295
   bb646:	e7e8      	b.n	bb61a <_strtod_l+0x102>
   bb648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb64a:	1c5a      	adds	r2, r3, #1
   bb64c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb64e:	785b      	ldrb	r3, [r3, #1]
   bb650:	2b30      	cmp	r3, #48	; 0x30
   bb652:	d0f9      	beq.n	bb648 <_strtod_l+0x130>
   bb654:	2b00      	cmp	r3, #0
   bb656:	d0a3      	beq.n	bb5a0 <_strtod_l+0x88>
   bb658:	2301      	movs	r3, #1
   bb65a:	f04f 0900 	mov.w	r9, #0
   bb65e:	9304      	str	r3, [sp, #16]
   bb660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb662:	9308      	str	r3, [sp, #32]
   bb664:	f8cd 901c 	str.w	r9, [sp, #28]
   bb668:	464f      	mov	r7, r9
   bb66a:	220a      	movs	r2, #10
   bb66c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb66e:	7806      	ldrb	r6, [r0, #0]
   bb670:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb674:	b2d9      	uxtb	r1, r3
   bb676:	2909      	cmp	r1, #9
   bb678:	d92a      	bls.n	bb6d0 <_strtod_l+0x1b8>
   bb67a:	9905      	ldr	r1, [sp, #20]
   bb67c:	462a      	mov	r2, r5
   bb67e:	f7ff fefa 	bl	bb476 <strncmp>
   bb682:	b398      	cbz	r0, bb6ec <_strtod_l+0x1d4>
   bb684:	2000      	movs	r0, #0
   bb686:	4632      	mov	r2, r6
   bb688:	463d      	mov	r5, r7
   bb68a:	9005      	str	r0, [sp, #20]
   bb68c:	4603      	mov	r3, r0
   bb68e:	2a65      	cmp	r2, #101	; 0x65
   bb690:	d001      	beq.n	bb696 <_strtod_l+0x17e>
   bb692:	2a45      	cmp	r2, #69	; 0x45
   bb694:	d118      	bne.n	bb6c8 <_strtod_l+0x1b0>
   bb696:	b91d      	cbnz	r5, bb6a0 <_strtod_l+0x188>
   bb698:	9a04      	ldr	r2, [sp, #16]
   bb69a:	4302      	orrs	r2, r0
   bb69c:	d09e      	beq.n	bb5dc <_strtod_l+0xc4>
   bb69e:	2500      	movs	r5, #0
   bb6a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb6a4:	f108 0201 	add.w	r2, r8, #1
   bb6a8:	9217      	str	r2, [sp, #92]	; 0x5c
   bb6aa:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb6ae:	2a2b      	cmp	r2, #43	; 0x2b
   bb6b0:	d075      	beq.n	bb79e <_strtod_l+0x286>
   bb6b2:	2a2d      	cmp	r2, #45	; 0x2d
   bb6b4:	d07b      	beq.n	bb7ae <_strtod_l+0x296>
   bb6b6:	f04f 0c00 	mov.w	ip, #0
   bb6ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb6be:	2909      	cmp	r1, #9
   bb6c0:	f240 8082 	bls.w	bb7c8 <_strtod_l+0x2b0>
   bb6c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb6c8:	2600      	movs	r6, #0
   bb6ca:	e09d      	b.n	bb808 <_strtod_l+0x2f0>
   bb6cc:	2300      	movs	r3, #0
   bb6ce:	e7c4      	b.n	bb65a <_strtod_l+0x142>
   bb6d0:	2f08      	cmp	r7, #8
   bb6d2:	bfd8      	it	le
   bb6d4:	9907      	ldrle	r1, [sp, #28]
   bb6d6:	f100 0001 	add.w	r0, r0, #1
   bb6da:	bfda      	itte	le
   bb6dc:	fb02 3301 	mlale	r3, r2, r1, r3
   bb6e0:	9307      	strle	r3, [sp, #28]
   bb6e2:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb6e6:	3701      	adds	r7, #1
   bb6e8:	9017      	str	r0, [sp, #92]	; 0x5c
   bb6ea:	e7bf      	b.n	bb66c <_strtod_l+0x154>
   bb6ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb6ee:	195a      	adds	r2, r3, r5
   bb6f0:	9217      	str	r2, [sp, #92]	; 0x5c
   bb6f2:	5d5a      	ldrb	r2, [r3, r5]
   bb6f4:	2f00      	cmp	r7, #0
   bb6f6:	d037      	beq.n	bb768 <_strtod_l+0x250>
   bb6f8:	9005      	str	r0, [sp, #20]
   bb6fa:	463d      	mov	r5, r7
   bb6fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb700:	2b09      	cmp	r3, #9
   bb702:	d912      	bls.n	bb72a <_strtod_l+0x212>
   bb704:	2301      	movs	r3, #1
   bb706:	e7c2      	b.n	bb68e <_strtod_l+0x176>
   bb708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb70a:	1c5a      	adds	r2, r3, #1
   bb70c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb70e:	785a      	ldrb	r2, [r3, #1]
   bb710:	3001      	adds	r0, #1
   bb712:	2a30      	cmp	r2, #48	; 0x30
   bb714:	d0f8      	beq.n	bb708 <_strtod_l+0x1f0>
   bb716:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb71a:	2b08      	cmp	r3, #8
   bb71c:	f200 84d9 	bhi.w	bc0d2 <_strtod_l+0xbba>
   bb720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb722:	9005      	str	r0, [sp, #20]
   bb724:	2000      	movs	r0, #0
   bb726:	9308      	str	r3, [sp, #32]
   bb728:	4605      	mov	r5, r0
   bb72a:	3a30      	subs	r2, #48	; 0x30
   bb72c:	f100 0301 	add.w	r3, r0, #1
   bb730:	d014      	beq.n	bb75c <_strtod_l+0x244>
   bb732:	9905      	ldr	r1, [sp, #20]
   bb734:	4419      	add	r1, r3
   bb736:	9105      	str	r1, [sp, #20]
   bb738:	462b      	mov	r3, r5
   bb73a:	eb00 0e05 	add.w	lr, r0, r5
   bb73e:	210a      	movs	r1, #10
   bb740:	4573      	cmp	r3, lr
   bb742:	d113      	bne.n	bb76c <_strtod_l+0x254>
   bb744:	182b      	adds	r3, r5, r0
   bb746:	2b08      	cmp	r3, #8
   bb748:	f105 0501 	add.w	r5, r5, #1
   bb74c:	4405      	add	r5, r0
   bb74e:	dc1c      	bgt.n	bb78a <_strtod_l+0x272>
   bb750:	9907      	ldr	r1, [sp, #28]
   bb752:	230a      	movs	r3, #10
   bb754:	fb03 2301 	mla	r3, r3, r1, r2
   bb758:	9307      	str	r3, [sp, #28]
   bb75a:	2300      	movs	r3, #0
   bb75c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb75e:	1c51      	adds	r1, r2, #1
   bb760:	9117      	str	r1, [sp, #92]	; 0x5c
   bb762:	7852      	ldrb	r2, [r2, #1]
   bb764:	4618      	mov	r0, r3
   bb766:	e7c9      	b.n	bb6fc <_strtod_l+0x1e4>
   bb768:	4638      	mov	r0, r7
   bb76a:	e7d2      	b.n	bb712 <_strtod_l+0x1fa>
   bb76c:	2b08      	cmp	r3, #8
   bb76e:	dc04      	bgt.n	bb77a <_strtod_l+0x262>
   bb770:	9e07      	ldr	r6, [sp, #28]
   bb772:	434e      	muls	r6, r1
   bb774:	9607      	str	r6, [sp, #28]
   bb776:	3301      	adds	r3, #1
   bb778:	e7e2      	b.n	bb740 <_strtod_l+0x228>
   bb77a:	f103 0c01 	add.w	ip, r3, #1
   bb77e:	f1bc 0f10 	cmp.w	ip, #16
   bb782:	bfd8      	it	le
   bb784:	fb01 f909 	mulle.w	r9, r1, r9
   bb788:	e7f5      	b.n	bb776 <_strtod_l+0x25e>
   bb78a:	2d10      	cmp	r5, #16
   bb78c:	bfdc      	itt	le
   bb78e:	230a      	movle	r3, #10
   bb790:	fb03 2909 	mlale	r9, r3, r9, r2
   bb794:	e7e1      	b.n	bb75a <_strtod_l+0x242>
   bb796:	2300      	movs	r3, #0
   bb798:	9305      	str	r3, [sp, #20]
   bb79a:	2301      	movs	r3, #1
   bb79c:	e77c      	b.n	bb698 <_strtod_l+0x180>
   bb79e:	f04f 0c00 	mov.w	ip, #0
   bb7a2:	f108 0202 	add.w	r2, r8, #2
   bb7a6:	9217      	str	r2, [sp, #92]	; 0x5c
   bb7a8:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb7ac:	e785      	b.n	bb6ba <_strtod_l+0x1a2>
   bb7ae:	f04f 0c01 	mov.w	ip, #1
   bb7b2:	e7f6      	b.n	bb7a2 <_strtod_l+0x28a>
   bb7b4:	000be3b0 	.word	0x000be3b0
   bb7b8:	000be144 	.word	0x000be144
   bb7bc:	7ff00000 	.word	0x7ff00000
   bb7c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb7c2:	1c51      	adds	r1, r2, #1
   bb7c4:	9117      	str	r1, [sp, #92]	; 0x5c
   bb7c6:	7852      	ldrb	r2, [r2, #1]
   bb7c8:	2a30      	cmp	r2, #48	; 0x30
   bb7ca:	d0f9      	beq.n	bb7c0 <_strtod_l+0x2a8>
   bb7cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb7d0:	2908      	cmp	r1, #8
   bb7d2:	f63f af79 	bhi.w	bb6c8 <_strtod_l+0x1b0>
   bb7d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb7da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb7dc:	9206      	str	r2, [sp, #24]
   bb7de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb7e0:	1c51      	adds	r1, r2, #1
   bb7e2:	9117      	str	r1, [sp, #92]	; 0x5c
   bb7e4:	7852      	ldrb	r2, [r2, #1]
   bb7e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb7ea:	2e09      	cmp	r6, #9
   bb7ec:	d937      	bls.n	bb85e <_strtod_l+0x346>
   bb7ee:	9e06      	ldr	r6, [sp, #24]
   bb7f0:	1b89      	subs	r1, r1, r6
   bb7f2:	2908      	cmp	r1, #8
   bb7f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb7f8:	dc02      	bgt.n	bb800 <_strtod_l+0x2e8>
   bb7fa:	4576      	cmp	r6, lr
   bb7fc:	bfa8      	it	ge
   bb7fe:	4676      	movge	r6, lr
   bb800:	f1bc 0f00 	cmp.w	ip, #0
   bb804:	d000      	beq.n	bb808 <_strtod_l+0x2f0>
   bb806:	4276      	negs	r6, r6
   bb808:	2d00      	cmp	r5, #0
   bb80a:	d14d      	bne.n	bb8a8 <_strtod_l+0x390>
   bb80c:	9904      	ldr	r1, [sp, #16]
   bb80e:	4301      	orrs	r1, r0
   bb810:	f47f aec6 	bne.w	bb5a0 <_strtod_l+0x88>
   bb814:	2b00      	cmp	r3, #0
   bb816:	f47f aee1 	bne.w	bb5dc <_strtod_l+0xc4>
   bb81a:	2a69      	cmp	r2, #105	; 0x69
   bb81c:	d027      	beq.n	bb86e <_strtod_l+0x356>
   bb81e:	dc24      	bgt.n	bb86a <_strtod_l+0x352>
   bb820:	2a49      	cmp	r2, #73	; 0x49
   bb822:	d024      	beq.n	bb86e <_strtod_l+0x356>
   bb824:	2a4e      	cmp	r2, #78	; 0x4e
   bb826:	f47f aed9 	bne.w	bb5dc <_strtod_l+0xc4>
   bb82a:	499f      	ldr	r1, [pc, #636]	; (bbaa8 <_strtod_l+0x590>)
   bb82c:	a817      	add	r0, sp, #92	; 0x5c
   bb82e:	f001 f88f 	bl	bc950 <__match>
   bb832:	2800      	cmp	r0, #0
   bb834:	f43f aed2 	beq.w	bb5dc <_strtod_l+0xc4>
   bb838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb83a:	781b      	ldrb	r3, [r3, #0]
   bb83c:	2b28      	cmp	r3, #40	; 0x28
   bb83e:	d12d      	bne.n	bb89c <_strtod_l+0x384>
   bb840:	499a      	ldr	r1, [pc, #616]	; (bbaac <_strtod_l+0x594>)
   bb842:	aa1a      	add	r2, sp, #104	; 0x68
   bb844:	a817      	add	r0, sp, #92	; 0x5c
   bb846:	f001 f897 	bl	bc978 <__hexnan>
   bb84a:	2805      	cmp	r0, #5
   bb84c:	d126      	bne.n	bb89c <_strtod_l+0x384>
   bb84e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb850:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb854:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb858:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb85c:	e6a0      	b.n	bb5a0 <_strtod_l+0x88>
   bb85e:	210a      	movs	r1, #10
   bb860:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb864:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb868:	e7b9      	b.n	bb7de <_strtod_l+0x2c6>
   bb86a:	2a6e      	cmp	r2, #110	; 0x6e
   bb86c:	e7db      	b.n	bb826 <_strtod_l+0x30e>
   bb86e:	4990      	ldr	r1, [pc, #576]	; (bbab0 <_strtod_l+0x598>)
   bb870:	a817      	add	r0, sp, #92	; 0x5c
   bb872:	f001 f86d 	bl	bc950 <__match>
   bb876:	2800      	cmp	r0, #0
   bb878:	f43f aeb0 	beq.w	bb5dc <_strtod_l+0xc4>
   bb87c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb87e:	498d      	ldr	r1, [pc, #564]	; (bbab4 <_strtod_l+0x59c>)
   bb880:	3b01      	subs	r3, #1
   bb882:	a817      	add	r0, sp, #92	; 0x5c
   bb884:	9317      	str	r3, [sp, #92]	; 0x5c
   bb886:	f001 f863 	bl	bc950 <__match>
   bb88a:	b910      	cbnz	r0, bb892 <_strtod_l+0x37a>
   bb88c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb88e:	3301      	adds	r3, #1
   bb890:	9317      	str	r3, [sp, #92]	; 0x5c
   bb892:	f8df b230 	ldr.w	fp, [pc, #560]	; bbac4 <_strtod_l+0x5ac>
   bb896:	f04f 0a00 	mov.w	sl, #0
   bb89a:	e681      	b.n	bb5a0 <_strtod_l+0x88>
   bb89c:	4886      	ldr	r0, [pc, #536]	; (bbab8 <_strtod_l+0x5a0>)
   bb89e:	f001 fdef 	bl	bd480 <nan>
   bb8a2:	ec5b ab10 	vmov	sl, fp, d0
   bb8a6:	e67b      	b.n	bb5a0 <_strtod_l+0x88>
   bb8a8:	9b05      	ldr	r3, [sp, #20]
   bb8aa:	9807      	ldr	r0, [sp, #28]
   bb8ac:	1af3      	subs	r3, r6, r3
   bb8ae:	2f00      	cmp	r7, #0
   bb8b0:	bf08      	it	eq
   bb8b2:	462f      	moveq	r7, r5
   bb8b4:	2d10      	cmp	r5, #16
   bb8b6:	9306      	str	r3, [sp, #24]
   bb8b8:	46a8      	mov	r8, r5
   bb8ba:	bfa8      	it	ge
   bb8bc:	f04f 0810 	movge.w	r8, #16
   bb8c0:	f7ff f97c 	bl	babbc <__aeabi_ui2d>
   bb8c4:	2d09      	cmp	r5, #9
   bb8c6:	4682      	mov	sl, r0
   bb8c8:	468b      	mov	fp, r1
   bb8ca:	dd13      	ble.n	bb8f4 <_strtod_l+0x3dc>
   bb8cc:	4b7b      	ldr	r3, [pc, #492]	; (bbabc <_strtod_l+0x5a4>)
   bb8ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb8d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb8d6:	f7ff f9eb 	bl	bacb0 <__aeabi_dmul>
   bb8da:	4682      	mov	sl, r0
   bb8dc:	4648      	mov	r0, r9
   bb8de:	468b      	mov	fp, r1
   bb8e0:	f7ff f96c 	bl	babbc <__aeabi_ui2d>
   bb8e4:	4602      	mov	r2, r0
   bb8e6:	460b      	mov	r3, r1
   bb8e8:	4650      	mov	r0, sl
   bb8ea:	4659      	mov	r1, fp
   bb8ec:	f7ff f82a 	bl	ba944 <__adddf3>
   bb8f0:	4682      	mov	sl, r0
   bb8f2:	468b      	mov	fp, r1
   bb8f4:	2d0f      	cmp	r5, #15
   bb8f6:	dc38      	bgt.n	bb96a <_strtod_l+0x452>
   bb8f8:	9b06      	ldr	r3, [sp, #24]
   bb8fa:	2b00      	cmp	r3, #0
   bb8fc:	f43f ae50 	beq.w	bb5a0 <_strtod_l+0x88>
   bb900:	dd24      	ble.n	bb94c <_strtod_l+0x434>
   bb902:	2b16      	cmp	r3, #22
   bb904:	dc0b      	bgt.n	bb91e <_strtod_l+0x406>
   bb906:	496d      	ldr	r1, [pc, #436]	; (bbabc <_strtod_l+0x5a4>)
   bb908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb90c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb910:	4652      	mov	r2, sl
   bb912:	465b      	mov	r3, fp
   bb914:	f7ff f9cc 	bl	bacb0 <__aeabi_dmul>
   bb918:	4682      	mov	sl, r0
   bb91a:	468b      	mov	fp, r1
   bb91c:	e640      	b.n	bb5a0 <_strtod_l+0x88>
   bb91e:	9a06      	ldr	r2, [sp, #24]
   bb920:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb924:	4293      	cmp	r3, r2
   bb926:	db20      	blt.n	bb96a <_strtod_l+0x452>
   bb928:	4c64      	ldr	r4, [pc, #400]	; (bbabc <_strtod_l+0x5a4>)
   bb92a:	f1c5 050f 	rsb	r5, r5, #15
   bb92e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb932:	4652      	mov	r2, sl
   bb934:	465b      	mov	r3, fp
   bb936:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb93a:	f7ff f9b9 	bl	bacb0 <__aeabi_dmul>
   bb93e:	9b06      	ldr	r3, [sp, #24]
   bb940:	1b5d      	subs	r5, r3, r5
   bb942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb946:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb94a:	e7e3      	b.n	bb914 <_strtod_l+0x3fc>
   bb94c:	9b06      	ldr	r3, [sp, #24]
   bb94e:	3316      	adds	r3, #22
   bb950:	db0b      	blt.n	bb96a <_strtod_l+0x452>
   bb952:	9b05      	ldr	r3, [sp, #20]
   bb954:	1b9e      	subs	r6, r3, r6
   bb956:	4b59      	ldr	r3, [pc, #356]	; (bbabc <_strtod_l+0x5a4>)
   bb958:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb95c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb960:	4650      	mov	r0, sl
   bb962:	4659      	mov	r1, fp
   bb964:	f7ff face 	bl	baf04 <__aeabi_ddiv>
   bb968:	e7d6      	b.n	bb918 <_strtod_l+0x400>
   bb96a:	9b06      	ldr	r3, [sp, #24]
   bb96c:	eba5 0808 	sub.w	r8, r5, r8
   bb970:	4498      	add	r8, r3
   bb972:	f1b8 0f00 	cmp.w	r8, #0
   bb976:	dd74      	ble.n	bba62 <_strtod_l+0x54a>
   bb978:	f018 030f 	ands.w	r3, r8, #15
   bb97c:	d00a      	beq.n	bb994 <_strtod_l+0x47c>
   bb97e:	494f      	ldr	r1, [pc, #316]	; (bbabc <_strtod_l+0x5a4>)
   bb980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb984:	4652      	mov	r2, sl
   bb986:	465b      	mov	r3, fp
   bb988:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb98c:	f7ff f990 	bl	bacb0 <__aeabi_dmul>
   bb990:	4682      	mov	sl, r0
   bb992:	468b      	mov	fp, r1
   bb994:	f038 080f 	bics.w	r8, r8, #15
   bb998:	d04f      	beq.n	bba3a <_strtod_l+0x522>
   bb99a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb99e:	dd22      	ble.n	bb9e6 <_strtod_l+0x4ce>
   bb9a0:	2500      	movs	r5, #0
   bb9a2:	462e      	mov	r6, r5
   bb9a4:	9507      	str	r5, [sp, #28]
   bb9a6:	9505      	str	r5, [sp, #20]
   bb9a8:	2322      	movs	r3, #34	; 0x22
   bb9aa:	f8df b118 	ldr.w	fp, [pc, #280]	; bbac4 <_strtod_l+0x5ac>
   bb9ae:	6023      	str	r3, [r4, #0]
   bb9b0:	f04f 0a00 	mov.w	sl, #0
   bb9b4:	9b07      	ldr	r3, [sp, #28]
   bb9b6:	2b00      	cmp	r3, #0
   bb9b8:	f43f adf2 	beq.w	bb5a0 <_strtod_l+0x88>
   bb9bc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb9be:	4620      	mov	r0, r4
   bb9c0:	f001 f8cc 	bl	bcb5c <_Bfree>
   bb9c4:	9905      	ldr	r1, [sp, #20]
   bb9c6:	4620      	mov	r0, r4
   bb9c8:	f001 f8c8 	bl	bcb5c <_Bfree>
   bb9cc:	4631      	mov	r1, r6
   bb9ce:	4620      	mov	r0, r4
   bb9d0:	f001 f8c4 	bl	bcb5c <_Bfree>
   bb9d4:	9907      	ldr	r1, [sp, #28]
   bb9d6:	4620      	mov	r0, r4
   bb9d8:	f001 f8c0 	bl	bcb5c <_Bfree>
   bb9dc:	4629      	mov	r1, r5
   bb9de:	4620      	mov	r0, r4
   bb9e0:	f001 f8bc 	bl	bcb5c <_Bfree>
   bb9e4:	e5dc      	b.n	bb5a0 <_strtod_l+0x88>
   bb9e6:	4b36      	ldr	r3, [pc, #216]	; (bbac0 <_strtod_l+0x5a8>)
   bb9e8:	9304      	str	r3, [sp, #16]
   bb9ea:	2300      	movs	r3, #0
   bb9ec:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb9f0:	4650      	mov	r0, sl
   bb9f2:	4659      	mov	r1, fp
   bb9f4:	4699      	mov	r9, r3
   bb9f6:	f1b8 0f01 	cmp.w	r8, #1
   bb9fa:	dc21      	bgt.n	bba40 <_strtod_l+0x528>
   bb9fc:	b10b      	cbz	r3, bba02 <_strtod_l+0x4ea>
   bb9fe:	4682      	mov	sl, r0
   bba00:	468b      	mov	fp, r1
   bba02:	4b2f      	ldr	r3, [pc, #188]	; (bbac0 <_strtod_l+0x5a8>)
   bba04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bba08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bba0c:	4652      	mov	r2, sl
   bba0e:	465b      	mov	r3, fp
   bba10:	e9d9 0100 	ldrd	r0, r1, [r9]
   bba14:	f7ff f94c 	bl	bacb0 <__aeabi_dmul>
   bba18:	4b2a      	ldr	r3, [pc, #168]	; (bbac4 <_strtod_l+0x5ac>)
   bba1a:	460a      	mov	r2, r1
   bba1c:	400b      	ands	r3, r1
   bba1e:	492a      	ldr	r1, [pc, #168]	; (bbac8 <_strtod_l+0x5b0>)
   bba20:	428b      	cmp	r3, r1
   bba22:	4682      	mov	sl, r0
   bba24:	d8bc      	bhi.n	bb9a0 <_strtod_l+0x488>
   bba26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bba2a:	428b      	cmp	r3, r1
   bba2c:	bf86      	itte	hi
   bba2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bbacc <_strtod_l+0x5b4>
   bba32:	f04f 3aff 	movhi.w	sl, #4294967295
   bba36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bba3a:	2300      	movs	r3, #0
   bba3c:	9304      	str	r3, [sp, #16]
   bba3e:	e084      	b.n	bbb4a <_strtod_l+0x632>
   bba40:	f018 0f01 	tst.w	r8, #1
   bba44:	d005      	beq.n	bba52 <_strtod_l+0x53a>
   bba46:	9b04      	ldr	r3, [sp, #16]
   bba48:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba4c:	f7ff f930 	bl	bacb0 <__aeabi_dmul>
   bba50:	2301      	movs	r3, #1
   bba52:	9a04      	ldr	r2, [sp, #16]
   bba54:	3208      	adds	r2, #8
   bba56:	f109 0901 	add.w	r9, r9, #1
   bba5a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bba5e:	9204      	str	r2, [sp, #16]
   bba60:	e7c9      	b.n	bb9f6 <_strtod_l+0x4de>
   bba62:	d0ea      	beq.n	bba3a <_strtod_l+0x522>
   bba64:	f1c8 0800 	rsb	r8, r8, #0
   bba68:	f018 020f 	ands.w	r2, r8, #15
   bba6c:	d00a      	beq.n	bba84 <_strtod_l+0x56c>
   bba6e:	4b13      	ldr	r3, [pc, #76]	; (bbabc <_strtod_l+0x5a4>)
   bba70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bba74:	4650      	mov	r0, sl
   bba76:	4659      	mov	r1, fp
   bba78:	e9d3 2300 	ldrd	r2, r3, [r3]
   bba7c:	f7ff fa42 	bl	baf04 <__aeabi_ddiv>
   bba80:	4682      	mov	sl, r0
   bba82:	468b      	mov	fp, r1
   bba84:	ea5f 1828 	movs.w	r8, r8, asr #4
   bba88:	d0d7      	beq.n	bba3a <_strtod_l+0x522>
   bba8a:	f1b8 0f1f 	cmp.w	r8, #31
   bba8e:	dd1f      	ble.n	bbad0 <_strtod_l+0x5b8>
   bba90:	2500      	movs	r5, #0
   bba92:	462e      	mov	r6, r5
   bba94:	9507      	str	r5, [sp, #28]
   bba96:	9505      	str	r5, [sp, #20]
   bba98:	2322      	movs	r3, #34	; 0x22
   bba9a:	f04f 0a00 	mov.w	sl, #0
   bba9e:	f04f 0b00 	mov.w	fp, #0
   bbaa2:	6023      	str	r3, [r4, #0]
   bbaa4:	e786      	b.n	bb9b4 <_strtod_l+0x49c>
   bbaa6:	bf00      	nop
   bbaa8:	000be13e 	.word	0x000be13e
   bbaac:	000be158 	.word	0x000be158
   bbab0:	000be135 	.word	0x000be135
   bbab4:	000be138 	.word	0x000be138
   bbab8:	000bd928 	.word	0x000bd928
   bbabc:	000be470 	.word	0x000be470
   bbac0:	000be448 	.word	0x000be448
   bbac4:	7ff00000 	.word	0x7ff00000
   bbac8:	7ca00000 	.word	0x7ca00000
   bbacc:	7fefffff 	.word	0x7fefffff
   bbad0:	f018 0310 	ands.w	r3, r8, #16
   bbad4:	bf18      	it	ne
   bbad6:	236a      	movne	r3, #106	; 0x6a
   bbad8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbe88 <_strtod_l+0x970>
   bbadc:	9304      	str	r3, [sp, #16]
   bbade:	4650      	mov	r0, sl
   bbae0:	4659      	mov	r1, fp
   bbae2:	2300      	movs	r3, #0
   bbae4:	f018 0f01 	tst.w	r8, #1
   bbae8:	d004      	beq.n	bbaf4 <_strtod_l+0x5dc>
   bbaea:	e9d9 2300 	ldrd	r2, r3, [r9]
   bbaee:	f7ff f8df 	bl	bacb0 <__aeabi_dmul>
   bbaf2:	2301      	movs	r3, #1
   bbaf4:	ea5f 0868 	movs.w	r8, r8, asr #1
   bbaf8:	f109 0908 	add.w	r9, r9, #8
   bbafc:	d1f2      	bne.n	bbae4 <_strtod_l+0x5cc>
   bbafe:	b10b      	cbz	r3, bbb04 <_strtod_l+0x5ec>
   bbb00:	4682      	mov	sl, r0
   bbb02:	468b      	mov	fp, r1
   bbb04:	9b04      	ldr	r3, [sp, #16]
   bbb06:	b1c3      	cbz	r3, bbb3a <_strtod_l+0x622>
   bbb08:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bbb0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bbb10:	2b00      	cmp	r3, #0
   bbb12:	4659      	mov	r1, fp
   bbb14:	dd11      	ble.n	bbb3a <_strtod_l+0x622>
   bbb16:	2b1f      	cmp	r3, #31
   bbb18:	f340 8124 	ble.w	bbd64 <_strtod_l+0x84c>
   bbb1c:	2b34      	cmp	r3, #52	; 0x34
   bbb1e:	bfde      	ittt	le
   bbb20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bbb24:	f04f 33ff 	movle.w	r3, #4294967295
   bbb28:	fa03 f202 	lslle.w	r2, r3, r2
   bbb2c:	f04f 0a00 	mov.w	sl, #0
   bbb30:	bfcc      	ite	gt
   bbb32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bbb36:	ea02 0b01 	andle.w	fp, r2, r1
   bbb3a:	2200      	movs	r2, #0
   bbb3c:	2300      	movs	r3, #0
   bbb3e:	4650      	mov	r0, sl
   bbb40:	4659      	mov	r1, fp
   bbb42:	f7ff fb1d 	bl	bb180 <__aeabi_dcmpeq>
   bbb46:	2800      	cmp	r0, #0
   bbb48:	d1a2      	bne.n	bba90 <_strtod_l+0x578>
   bbb4a:	9b07      	ldr	r3, [sp, #28]
   bbb4c:	9300      	str	r3, [sp, #0]
   bbb4e:	9908      	ldr	r1, [sp, #32]
   bbb50:	462b      	mov	r3, r5
   bbb52:	463a      	mov	r2, r7
   bbb54:	4620      	mov	r0, r4
   bbb56:	f001 f869 	bl	bcc2c <__s2b>
   bbb5a:	9007      	str	r0, [sp, #28]
   bbb5c:	2800      	cmp	r0, #0
   bbb5e:	f43f af1f 	beq.w	bb9a0 <_strtod_l+0x488>
   bbb62:	9b05      	ldr	r3, [sp, #20]
   bbb64:	1b9e      	subs	r6, r3, r6
   bbb66:	9b06      	ldr	r3, [sp, #24]
   bbb68:	2b00      	cmp	r3, #0
   bbb6a:	bfb4      	ite	lt
   bbb6c:	4633      	movlt	r3, r6
   bbb6e:	2300      	movge	r3, #0
   bbb70:	930c      	str	r3, [sp, #48]	; 0x30
   bbb72:	9b06      	ldr	r3, [sp, #24]
   bbb74:	2500      	movs	r5, #0
   bbb76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bbb7a:	9312      	str	r3, [sp, #72]	; 0x48
   bbb7c:	462e      	mov	r6, r5
   bbb7e:	9b07      	ldr	r3, [sp, #28]
   bbb80:	4620      	mov	r0, r4
   bbb82:	6859      	ldr	r1, [r3, #4]
   bbb84:	f000 ffaa 	bl	bcadc <_Balloc>
   bbb88:	9005      	str	r0, [sp, #20]
   bbb8a:	2800      	cmp	r0, #0
   bbb8c:	f43f af0c 	beq.w	bb9a8 <_strtod_l+0x490>
   bbb90:	9b07      	ldr	r3, [sp, #28]
   bbb92:	691a      	ldr	r2, [r3, #16]
   bbb94:	3202      	adds	r2, #2
   bbb96:	f103 010c 	add.w	r1, r3, #12
   bbb9a:	0092      	lsls	r2, r2, #2
   bbb9c:	300c      	adds	r0, #12
   bbb9e:	f7ff fbc4 	bl	bb32a <memcpy>
   bbba2:	ec4b ab10 	vmov	d0, sl, fp
   bbba6:	aa1a      	add	r2, sp, #104	; 0x68
   bbba8:	a919      	add	r1, sp, #100	; 0x64
   bbbaa:	4620      	mov	r0, r4
   bbbac:	f001 fb84 	bl	bd2b8 <__d2b>
   bbbb0:	ec4b ab18 	vmov	d8, sl, fp
   bbbb4:	9018      	str	r0, [sp, #96]	; 0x60
   bbbb6:	2800      	cmp	r0, #0
   bbbb8:	f43f aef6 	beq.w	bb9a8 <_strtod_l+0x490>
   bbbbc:	2101      	movs	r1, #1
   bbbbe:	4620      	mov	r0, r4
   bbbc0:	f001 f8ce 	bl	bcd60 <__i2b>
   bbbc4:	4606      	mov	r6, r0
   bbbc6:	2800      	cmp	r0, #0
   bbbc8:	f43f aeee 	beq.w	bb9a8 <_strtod_l+0x490>
   bbbcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bbbce:	9904      	ldr	r1, [sp, #16]
   bbbd0:	2b00      	cmp	r3, #0
   bbbd2:	bfab      	itete	ge
   bbbd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bbbd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bbbd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bbbda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bbbde:	bfac      	ite	ge
   bbbe0:	eb03 0902 	addge.w	r9, r3, r2
   bbbe4:	1ad7      	sublt	r7, r2, r3
   bbbe6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bbbe8:	eba3 0801 	sub.w	r8, r3, r1
   bbbec:	4490      	add	r8, r2
   bbbee:	4ba1      	ldr	r3, [pc, #644]	; (bbe74 <_strtod_l+0x95c>)
   bbbf0:	f108 38ff 	add.w	r8, r8, #4294967295
   bbbf4:	4598      	cmp	r8, r3
   bbbf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bbbfa:	f280 80c7 	bge.w	bbd8c <_strtod_l+0x874>
   bbbfe:	eba3 0308 	sub.w	r3, r3, r8
   bbc02:	2b1f      	cmp	r3, #31
   bbc04:	eba2 0203 	sub.w	r2, r2, r3
   bbc08:	f04f 0101 	mov.w	r1, #1
   bbc0c:	f300 80b1 	bgt.w	bbd72 <_strtod_l+0x85a>
   bbc10:	fa01 f303 	lsl.w	r3, r1, r3
   bbc14:	930d      	str	r3, [sp, #52]	; 0x34
   bbc16:	2300      	movs	r3, #0
   bbc18:	9308      	str	r3, [sp, #32]
   bbc1a:	eb09 0802 	add.w	r8, r9, r2
   bbc1e:	9b04      	ldr	r3, [sp, #16]
   bbc20:	45c1      	cmp	r9, r8
   bbc22:	4417      	add	r7, r2
   bbc24:	441f      	add	r7, r3
   bbc26:	464b      	mov	r3, r9
   bbc28:	bfa8      	it	ge
   bbc2a:	4643      	movge	r3, r8
   bbc2c:	42bb      	cmp	r3, r7
   bbc2e:	bfa8      	it	ge
   bbc30:	463b      	movge	r3, r7
   bbc32:	2b00      	cmp	r3, #0
   bbc34:	bfc2      	ittt	gt
   bbc36:	eba8 0803 	subgt.w	r8, r8, r3
   bbc3a:	1aff      	subgt	r7, r7, r3
   bbc3c:	eba9 0903 	subgt.w	r9, r9, r3
   bbc40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bbc42:	2b00      	cmp	r3, #0
   bbc44:	dd17      	ble.n	bbc76 <_strtod_l+0x75e>
   bbc46:	4631      	mov	r1, r6
   bbc48:	461a      	mov	r2, r3
   bbc4a:	4620      	mov	r0, r4
   bbc4c:	f001 f948 	bl	bcee0 <__pow5mult>
   bbc50:	4606      	mov	r6, r0
   bbc52:	2800      	cmp	r0, #0
   bbc54:	f43f aea8 	beq.w	bb9a8 <_strtod_l+0x490>
   bbc58:	4601      	mov	r1, r0
   bbc5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbc5c:	4620      	mov	r0, r4
   bbc5e:	f001 f895 	bl	bcd8c <__multiply>
   bbc62:	900b      	str	r0, [sp, #44]	; 0x2c
   bbc64:	2800      	cmp	r0, #0
   bbc66:	f43f ae9f 	beq.w	bb9a8 <_strtod_l+0x490>
   bbc6a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbc6c:	4620      	mov	r0, r4
   bbc6e:	f000 ff75 	bl	bcb5c <_Bfree>
   bbc72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbc74:	9318      	str	r3, [sp, #96]	; 0x60
   bbc76:	f1b8 0f00 	cmp.w	r8, #0
   bbc7a:	f300 808c 	bgt.w	bbd96 <_strtod_l+0x87e>
   bbc7e:	9b06      	ldr	r3, [sp, #24]
   bbc80:	2b00      	cmp	r3, #0
   bbc82:	dd08      	ble.n	bbc96 <_strtod_l+0x77e>
   bbc84:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbc86:	9905      	ldr	r1, [sp, #20]
   bbc88:	4620      	mov	r0, r4
   bbc8a:	f001 f929 	bl	bcee0 <__pow5mult>
   bbc8e:	9005      	str	r0, [sp, #20]
   bbc90:	2800      	cmp	r0, #0
   bbc92:	f43f ae89 	beq.w	bb9a8 <_strtod_l+0x490>
   bbc96:	2f00      	cmp	r7, #0
   bbc98:	dd08      	ble.n	bbcac <_strtod_l+0x794>
   bbc9a:	9905      	ldr	r1, [sp, #20]
   bbc9c:	463a      	mov	r2, r7
   bbc9e:	4620      	mov	r0, r4
   bbca0:	f001 f978 	bl	bcf94 <__lshift>
   bbca4:	9005      	str	r0, [sp, #20]
   bbca6:	2800      	cmp	r0, #0
   bbca8:	f43f ae7e 	beq.w	bb9a8 <_strtod_l+0x490>
   bbcac:	f1b9 0f00 	cmp.w	r9, #0
   bbcb0:	dd08      	ble.n	bbcc4 <_strtod_l+0x7ac>
   bbcb2:	4631      	mov	r1, r6
   bbcb4:	464a      	mov	r2, r9
   bbcb6:	4620      	mov	r0, r4
   bbcb8:	f001 f96c 	bl	bcf94 <__lshift>
   bbcbc:	4606      	mov	r6, r0
   bbcbe:	2800      	cmp	r0, #0
   bbcc0:	f43f ae72 	beq.w	bb9a8 <_strtod_l+0x490>
   bbcc4:	9a05      	ldr	r2, [sp, #20]
   bbcc6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbcc8:	4620      	mov	r0, r4
   bbcca:	f001 f9ef 	bl	bd0ac <__mdiff>
   bbcce:	4605      	mov	r5, r0
   bbcd0:	2800      	cmp	r0, #0
   bbcd2:	f43f ae69 	beq.w	bb9a8 <_strtod_l+0x490>
   bbcd6:	68c3      	ldr	r3, [r0, #12]
   bbcd8:	930b      	str	r3, [sp, #44]	; 0x2c
   bbcda:	2300      	movs	r3, #0
   bbcdc:	60c3      	str	r3, [r0, #12]
   bbcde:	4631      	mov	r1, r6
   bbce0:	f001 f9c8 	bl	bd074 <__mcmp>
   bbce4:	2800      	cmp	r0, #0
   bbce6:	da60      	bge.n	bbdaa <_strtod_l+0x892>
   bbce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbcea:	ea53 030a 	orrs.w	r3, r3, sl
   bbcee:	f040 8082 	bne.w	bbdf6 <_strtod_l+0x8de>
   bbcf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbcf6:	2b00      	cmp	r3, #0
   bbcf8:	d17d      	bne.n	bbdf6 <_strtod_l+0x8de>
   bbcfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbcfe:	0d1b      	lsrs	r3, r3, #20
   bbd00:	051b      	lsls	r3, r3, #20
   bbd02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbd06:	d976      	bls.n	bbdf6 <_strtod_l+0x8de>
   bbd08:	696b      	ldr	r3, [r5, #20]
   bbd0a:	b913      	cbnz	r3, bbd12 <_strtod_l+0x7fa>
   bbd0c:	692b      	ldr	r3, [r5, #16]
   bbd0e:	2b01      	cmp	r3, #1
   bbd10:	dd71      	ble.n	bbdf6 <_strtod_l+0x8de>
   bbd12:	4629      	mov	r1, r5
   bbd14:	2201      	movs	r2, #1
   bbd16:	4620      	mov	r0, r4
   bbd18:	f001 f93c 	bl	bcf94 <__lshift>
   bbd1c:	4631      	mov	r1, r6
   bbd1e:	4605      	mov	r5, r0
   bbd20:	f001 f9a8 	bl	bd074 <__mcmp>
   bbd24:	2800      	cmp	r0, #0
   bbd26:	dd66      	ble.n	bbdf6 <_strtod_l+0x8de>
   bbd28:	9904      	ldr	r1, [sp, #16]
   bbd2a:	4a53      	ldr	r2, [pc, #332]	; (bbe78 <_strtod_l+0x960>)
   bbd2c:	465b      	mov	r3, fp
   bbd2e:	2900      	cmp	r1, #0
   bbd30:	f000 8081 	beq.w	bbe36 <_strtod_l+0x91e>
   bbd34:	ea02 010b 	and.w	r1, r2, fp
   bbd38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbd3c:	dc7b      	bgt.n	bbe36 <_strtod_l+0x91e>
   bbd3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbd42:	f77f aea9 	ble.w	bba98 <_strtod_l+0x580>
   bbd46:	4b4d      	ldr	r3, [pc, #308]	; (bbe7c <_strtod_l+0x964>)
   bbd48:	4650      	mov	r0, sl
   bbd4a:	4659      	mov	r1, fp
   bbd4c:	2200      	movs	r2, #0
   bbd4e:	f7fe ffaf 	bl	bacb0 <__aeabi_dmul>
   bbd52:	460b      	mov	r3, r1
   bbd54:	4303      	orrs	r3, r0
   bbd56:	bf08      	it	eq
   bbd58:	2322      	moveq	r3, #34	; 0x22
   bbd5a:	4682      	mov	sl, r0
   bbd5c:	468b      	mov	fp, r1
   bbd5e:	bf08      	it	eq
   bbd60:	6023      	streq	r3, [r4, #0]
   bbd62:	e62b      	b.n	bb9bc <_strtod_l+0x4a4>
   bbd64:	f04f 32ff 	mov.w	r2, #4294967295
   bbd68:	fa02 f303 	lsl.w	r3, r2, r3
   bbd6c:	ea03 0a0a 	and.w	sl, r3, sl
   bbd70:	e6e3      	b.n	bbb3a <_strtod_l+0x622>
   bbd72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbd76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbd7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbd7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbd82:	fa01 f308 	lsl.w	r3, r1, r8
   bbd86:	9308      	str	r3, [sp, #32]
   bbd88:	910d      	str	r1, [sp, #52]	; 0x34
   bbd8a:	e746      	b.n	bbc1a <_strtod_l+0x702>
   bbd8c:	2300      	movs	r3, #0
   bbd8e:	9308      	str	r3, [sp, #32]
   bbd90:	2301      	movs	r3, #1
   bbd92:	930d      	str	r3, [sp, #52]	; 0x34
   bbd94:	e741      	b.n	bbc1a <_strtod_l+0x702>
   bbd96:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbd98:	4642      	mov	r2, r8
   bbd9a:	4620      	mov	r0, r4
   bbd9c:	f001 f8fa 	bl	bcf94 <__lshift>
   bbda0:	9018      	str	r0, [sp, #96]	; 0x60
   bbda2:	2800      	cmp	r0, #0
   bbda4:	f47f af6b 	bne.w	bbc7e <_strtod_l+0x766>
   bbda8:	e5fe      	b.n	bb9a8 <_strtod_l+0x490>
   bbdaa:	465f      	mov	r7, fp
   bbdac:	d16e      	bne.n	bbe8c <_strtod_l+0x974>
   bbdae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbdb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbdb4:	b342      	cbz	r2, bbe08 <_strtod_l+0x8f0>
   bbdb6:	4a32      	ldr	r2, [pc, #200]	; (bbe80 <_strtod_l+0x968>)
   bbdb8:	4293      	cmp	r3, r2
   bbdba:	d128      	bne.n	bbe0e <_strtod_l+0x8f6>
   bbdbc:	9b04      	ldr	r3, [sp, #16]
   bbdbe:	4651      	mov	r1, sl
   bbdc0:	b1eb      	cbz	r3, bbdfe <_strtod_l+0x8e6>
   bbdc2:	4b2d      	ldr	r3, [pc, #180]	; (bbe78 <_strtod_l+0x960>)
   bbdc4:	403b      	ands	r3, r7
   bbdc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbdca:	f04f 32ff 	mov.w	r2, #4294967295
   bbdce:	d819      	bhi.n	bbe04 <_strtod_l+0x8ec>
   bbdd0:	0d1b      	lsrs	r3, r3, #20
   bbdd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbdd6:	fa02 f303 	lsl.w	r3, r2, r3
   bbdda:	4299      	cmp	r1, r3
   bbddc:	d117      	bne.n	bbe0e <_strtod_l+0x8f6>
   bbdde:	4b29      	ldr	r3, [pc, #164]	; (bbe84 <_strtod_l+0x96c>)
   bbde0:	429f      	cmp	r7, r3
   bbde2:	d102      	bne.n	bbdea <_strtod_l+0x8d2>
   bbde4:	3101      	adds	r1, #1
   bbde6:	f43f addf 	beq.w	bb9a8 <_strtod_l+0x490>
   bbdea:	4b23      	ldr	r3, [pc, #140]	; (bbe78 <_strtod_l+0x960>)
   bbdec:	403b      	ands	r3, r7
   bbdee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bbdf2:	f04f 0a00 	mov.w	sl, #0
   bbdf6:	9b04      	ldr	r3, [sp, #16]
   bbdf8:	2b00      	cmp	r3, #0
   bbdfa:	d1a4      	bne.n	bbd46 <_strtod_l+0x82e>
   bbdfc:	e5de      	b.n	bb9bc <_strtod_l+0x4a4>
   bbdfe:	f04f 33ff 	mov.w	r3, #4294967295
   bbe02:	e7ea      	b.n	bbdda <_strtod_l+0x8c2>
   bbe04:	4613      	mov	r3, r2
   bbe06:	e7e8      	b.n	bbdda <_strtod_l+0x8c2>
   bbe08:	ea53 030a 	orrs.w	r3, r3, sl
   bbe0c:	d08c      	beq.n	bbd28 <_strtod_l+0x810>
   bbe0e:	9b08      	ldr	r3, [sp, #32]
   bbe10:	b1db      	cbz	r3, bbe4a <_strtod_l+0x932>
   bbe12:	423b      	tst	r3, r7
   bbe14:	d0ef      	beq.n	bbdf6 <_strtod_l+0x8de>
   bbe16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbe18:	9a04      	ldr	r2, [sp, #16]
   bbe1a:	4650      	mov	r0, sl
   bbe1c:	4659      	mov	r1, fp
   bbe1e:	b1c3      	cbz	r3, bbe52 <_strtod_l+0x93a>
   bbe20:	f7ff fb5c 	bl	bb4dc <sulp>
   bbe24:	4602      	mov	r2, r0
   bbe26:	460b      	mov	r3, r1
   bbe28:	ec51 0b18 	vmov	r0, r1, d8
   bbe2c:	f7fe fd8a 	bl	ba944 <__adddf3>
   bbe30:	4682      	mov	sl, r0
   bbe32:	468b      	mov	fp, r1
   bbe34:	e7df      	b.n	bbdf6 <_strtod_l+0x8de>
   bbe36:	4013      	ands	r3, r2
   bbe38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bbe3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bbe40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bbe44:	f04f 3aff 	mov.w	sl, #4294967295
   bbe48:	e7d5      	b.n	bbdf6 <_strtod_l+0x8de>
   bbe4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbe4c:	ea13 0f0a 	tst.w	r3, sl
   bbe50:	e7e0      	b.n	bbe14 <_strtod_l+0x8fc>
   bbe52:	f7ff fb43 	bl	bb4dc <sulp>
   bbe56:	4602      	mov	r2, r0
   bbe58:	460b      	mov	r3, r1
   bbe5a:	ec51 0b18 	vmov	r0, r1, d8
   bbe5e:	f7fe fd6f 	bl	ba940 <__aeabi_dsub>
   bbe62:	2200      	movs	r2, #0
   bbe64:	2300      	movs	r3, #0
   bbe66:	4682      	mov	sl, r0
   bbe68:	468b      	mov	fp, r1
   bbe6a:	f7ff f989 	bl	bb180 <__aeabi_dcmpeq>
   bbe6e:	2800      	cmp	r0, #0
   bbe70:	d0c1      	beq.n	bbdf6 <_strtod_l+0x8de>
   bbe72:	e611      	b.n	bba98 <_strtod_l+0x580>
   bbe74:	fffffc02 	.word	0xfffffc02
   bbe78:	7ff00000 	.word	0x7ff00000
   bbe7c:	39500000 	.word	0x39500000
   bbe80:	000fffff 	.word	0x000fffff
   bbe84:	7fefffff 	.word	0x7fefffff
   bbe88:	000be170 	.word	0x000be170
   bbe8c:	4631      	mov	r1, r6
   bbe8e:	4628      	mov	r0, r5
   bbe90:	f001 fa6e 	bl	bd370 <__ratio>
   bbe94:	ec59 8b10 	vmov	r8, r9, d0
   bbe98:	ee10 0a10 	vmov	r0, s0
   bbe9c:	2200      	movs	r2, #0
   bbe9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bbea2:	4649      	mov	r1, r9
   bbea4:	f7ff f980 	bl	bb1a8 <__aeabi_dcmple>
   bbea8:	2800      	cmp	r0, #0
   bbeaa:	d07a      	beq.n	bbfa2 <_strtod_l+0xa8a>
   bbeac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbeae:	2b00      	cmp	r3, #0
   bbeb0:	d04a      	beq.n	bbf48 <_strtod_l+0xa30>
   bbeb2:	4b95      	ldr	r3, [pc, #596]	; (bc108 <_strtod_l+0xbf0>)
   bbeb4:	2200      	movs	r2, #0
   bbeb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbeba:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc108 <_strtod_l+0xbf0>
   bbebe:	f04f 0800 	mov.w	r8, #0
   bbec2:	4b92      	ldr	r3, [pc, #584]	; (bc10c <_strtod_l+0xbf4>)
   bbec4:	403b      	ands	r3, r7
   bbec6:	930d      	str	r3, [sp, #52]	; 0x34
   bbec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbeca:	4b91      	ldr	r3, [pc, #580]	; (bc110 <_strtod_l+0xbf8>)
   bbecc:	429a      	cmp	r2, r3
   bbece:	f040 80b0 	bne.w	bc032 <_strtod_l+0xb1a>
   bbed2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbed6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bbeda:	ec4b ab10 	vmov	d0, sl, fp
   bbede:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbee2:	f001 f96d 	bl	bd1c0 <__ulp>
   bbee6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbeea:	ec53 2b10 	vmov	r2, r3, d0
   bbeee:	f7fe fedf 	bl	bacb0 <__aeabi_dmul>
   bbef2:	4652      	mov	r2, sl
   bbef4:	465b      	mov	r3, fp
   bbef6:	f7fe fd25 	bl	ba944 <__adddf3>
   bbefa:	460b      	mov	r3, r1
   bbefc:	4983      	ldr	r1, [pc, #524]	; (bc10c <_strtod_l+0xbf4>)
   bbefe:	4a85      	ldr	r2, [pc, #532]	; (bc114 <_strtod_l+0xbfc>)
   bbf00:	4019      	ands	r1, r3
   bbf02:	4291      	cmp	r1, r2
   bbf04:	4682      	mov	sl, r0
   bbf06:	d960      	bls.n	bbfca <_strtod_l+0xab2>
   bbf08:	ee18 3a90 	vmov	r3, s17
   bbf0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bbf10:	4293      	cmp	r3, r2
   bbf12:	d104      	bne.n	bbf1e <_strtod_l+0xa06>
   bbf14:	ee18 3a10 	vmov	r3, s16
   bbf18:	3301      	adds	r3, #1
   bbf1a:	f43f ad45 	beq.w	bb9a8 <_strtod_l+0x490>
   bbf1e:	f8df b200 	ldr.w	fp, [pc, #512]	; bc120 <_strtod_l+0xc08>
   bbf22:	f04f 3aff 	mov.w	sl, #4294967295
   bbf26:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf28:	4620      	mov	r0, r4
   bbf2a:	f000 fe17 	bl	bcb5c <_Bfree>
   bbf2e:	9905      	ldr	r1, [sp, #20]
   bbf30:	4620      	mov	r0, r4
   bbf32:	f000 fe13 	bl	bcb5c <_Bfree>
   bbf36:	4631      	mov	r1, r6
   bbf38:	4620      	mov	r0, r4
   bbf3a:	f000 fe0f 	bl	bcb5c <_Bfree>
   bbf3e:	4629      	mov	r1, r5
   bbf40:	4620      	mov	r0, r4
   bbf42:	f000 fe0b 	bl	bcb5c <_Bfree>
   bbf46:	e61a      	b.n	bbb7e <_strtod_l+0x666>
   bbf48:	f1ba 0f00 	cmp.w	sl, #0
   bbf4c:	d11b      	bne.n	bbf86 <_strtod_l+0xa6e>
   bbf4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbf52:	b9f3      	cbnz	r3, bbf92 <_strtod_l+0xa7a>
   bbf54:	4b6c      	ldr	r3, [pc, #432]	; (bc108 <_strtod_l+0xbf0>)
   bbf56:	2200      	movs	r2, #0
   bbf58:	4640      	mov	r0, r8
   bbf5a:	4649      	mov	r1, r9
   bbf5c:	f7ff f91a 	bl	bb194 <__aeabi_dcmplt>
   bbf60:	b9d0      	cbnz	r0, bbf98 <_strtod_l+0xa80>
   bbf62:	4640      	mov	r0, r8
   bbf64:	4649      	mov	r1, r9
   bbf66:	4b6c      	ldr	r3, [pc, #432]	; (bc118 <_strtod_l+0xc00>)
   bbf68:	2200      	movs	r2, #0
   bbf6a:	f7fe fea1 	bl	bacb0 <__aeabi_dmul>
   bbf6e:	4680      	mov	r8, r0
   bbf70:	4689      	mov	r9, r1
   bbf72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bbf76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bbf7a:	9315      	str	r3, [sp, #84]	; 0x54
   bbf7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bbf80:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbf84:	e79d      	b.n	bbec2 <_strtod_l+0x9aa>
   bbf86:	f1ba 0f01 	cmp.w	sl, #1
   bbf8a:	d102      	bne.n	bbf92 <_strtod_l+0xa7a>
   bbf8c:	2f00      	cmp	r7, #0
   bbf8e:	f43f ad83 	beq.w	bba98 <_strtod_l+0x580>
   bbf92:	4b62      	ldr	r3, [pc, #392]	; (bc11c <_strtod_l+0xc04>)
   bbf94:	2200      	movs	r2, #0
   bbf96:	e78e      	b.n	bbeb6 <_strtod_l+0x99e>
   bbf98:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc118 <_strtod_l+0xc00>
   bbf9c:	f04f 0800 	mov.w	r8, #0
   bbfa0:	e7e7      	b.n	bbf72 <_strtod_l+0xa5a>
   bbfa2:	4b5d      	ldr	r3, [pc, #372]	; (bc118 <_strtod_l+0xc00>)
   bbfa4:	4640      	mov	r0, r8
   bbfa6:	4649      	mov	r1, r9
   bbfa8:	2200      	movs	r2, #0
   bbfaa:	f7fe fe81 	bl	bacb0 <__aeabi_dmul>
   bbfae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbfb0:	4680      	mov	r8, r0
   bbfb2:	4689      	mov	r9, r1
   bbfb4:	b933      	cbnz	r3, bbfc4 <_strtod_l+0xaac>
   bbfb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbfba:	900e      	str	r0, [sp, #56]	; 0x38
   bbfbc:	930f      	str	r3, [sp, #60]	; 0x3c
   bbfbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bbfc2:	e7dd      	b.n	bbf80 <_strtod_l+0xa68>
   bbfc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bbfc8:	e7f9      	b.n	bbfbe <_strtod_l+0xaa6>
   bbfca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bbfce:	9b04      	ldr	r3, [sp, #16]
   bbfd0:	2b00      	cmp	r3, #0
   bbfd2:	d1a8      	bne.n	bbf26 <_strtod_l+0xa0e>
   bbfd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbfd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbfda:	0d1b      	lsrs	r3, r3, #20
   bbfdc:	051b      	lsls	r3, r3, #20
   bbfde:	429a      	cmp	r2, r3
   bbfe0:	d1a1      	bne.n	bbf26 <_strtod_l+0xa0e>
   bbfe2:	4640      	mov	r0, r8
   bbfe4:	4649      	mov	r1, r9
   bbfe6:	f001 fa61 	bl	bd4ac <__aeabi_d2lz>
   bbfea:	f7fe fe33 	bl	bac54 <__aeabi_l2d>
   bbfee:	4602      	mov	r2, r0
   bbff0:	460b      	mov	r3, r1
   bbff2:	4640      	mov	r0, r8
   bbff4:	4649      	mov	r1, r9
   bbff6:	f7fe fca3 	bl	ba940 <__aeabi_dsub>
   bbffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc000:	ea43 030a 	orr.w	r3, r3, sl
   bc004:	4313      	orrs	r3, r2
   bc006:	4680      	mov	r8, r0
   bc008:	4689      	mov	r9, r1
   bc00a:	d055      	beq.n	bc0b8 <_strtod_l+0xba0>
   bc00c:	a336      	add	r3, pc, #216	; (adr r3, bc0e8 <_strtod_l+0xbd0>)
   bc00e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc012:	f7ff f8bf 	bl	bb194 <__aeabi_dcmplt>
   bc016:	2800      	cmp	r0, #0
   bc018:	f47f acd0 	bne.w	bb9bc <_strtod_l+0x4a4>
   bc01c:	a334      	add	r3, pc, #208	; (adr r3, bc0f0 <_strtod_l+0xbd8>)
   bc01e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc022:	4640      	mov	r0, r8
   bc024:	4649      	mov	r1, r9
   bc026:	f7ff f8d3 	bl	bb1d0 <__aeabi_dcmpgt>
   bc02a:	2800      	cmp	r0, #0
   bc02c:	f43f af7b 	beq.w	bbf26 <_strtod_l+0xa0e>
   bc030:	e4c4      	b.n	bb9bc <_strtod_l+0x4a4>
   bc032:	9b04      	ldr	r3, [sp, #16]
   bc034:	b333      	cbz	r3, bc084 <_strtod_l+0xb6c>
   bc036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc038:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc03c:	d822      	bhi.n	bc084 <_strtod_l+0xb6c>
   bc03e:	a32e      	add	r3, pc, #184	; (adr r3, bc0f8 <_strtod_l+0xbe0>)
   bc040:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc044:	4640      	mov	r0, r8
   bc046:	4649      	mov	r1, r9
   bc048:	f7ff f8ae 	bl	bb1a8 <__aeabi_dcmple>
   bc04c:	b1a0      	cbz	r0, bc078 <_strtod_l+0xb60>
   bc04e:	4649      	mov	r1, r9
   bc050:	4640      	mov	r0, r8
   bc052:	f7ff f8c7 	bl	bb1e4 <__aeabi_d2uiz>
   bc056:	2801      	cmp	r0, #1
   bc058:	bf38      	it	cc
   bc05a:	2001      	movcc	r0, #1
   bc05c:	f7fe fdae 	bl	babbc <__aeabi_ui2d>
   bc060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc062:	4680      	mov	r8, r0
   bc064:	4689      	mov	r9, r1
   bc066:	bb23      	cbnz	r3, bc0b2 <_strtod_l+0xb9a>
   bc068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc06c:	9010      	str	r0, [sp, #64]	; 0x40
   bc06e:	9311      	str	r3, [sp, #68]	; 0x44
   bc070:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc074:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc078:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc07a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc07c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc080:	1a9b      	subs	r3, r3, r2
   bc082:	9309      	str	r3, [sp, #36]	; 0x24
   bc084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc088:	eeb0 0a48 	vmov.f32	s0, s16
   bc08c:	eef0 0a68 	vmov.f32	s1, s17
   bc090:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc094:	f001 f894 	bl	bd1c0 <__ulp>
   bc098:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc09c:	ec53 2b10 	vmov	r2, r3, d0
   bc0a0:	f7fe fe06 	bl	bacb0 <__aeabi_dmul>
   bc0a4:	ec53 2b18 	vmov	r2, r3, d8
   bc0a8:	f7fe fc4c 	bl	ba944 <__adddf3>
   bc0ac:	4682      	mov	sl, r0
   bc0ae:	468b      	mov	fp, r1
   bc0b0:	e78d      	b.n	bbfce <_strtod_l+0xab6>
   bc0b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc0b6:	e7db      	b.n	bc070 <_strtod_l+0xb58>
   bc0b8:	a311      	add	r3, pc, #68	; (adr r3, bc100 <_strtod_l+0xbe8>)
   bc0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc0be:	f7ff f869 	bl	bb194 <__aeabi_dcmplt>
   bc0c2:	e7b2      	b.n	bc02a <_strtod_l+0xb12>
   bc0c4:	2300      	movs	r3, #0
   bc0c6:	930a      	str	r3, [sp, #40]	; 0x28
   bc0c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc0ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc0cc:	6013      	str	r3, [r2, #0]
   bc0ce:	f7ff ba6b 	b.w	bb5a8 <_strtod_l+0x90>
   bc0d2:	2a65      	cmp	r2, #101	; 0x65
   bc0d4:	f43f ab5f 	beq.w	bb796 <_strtod_l+0x27e>
   bc0d8:	2a45      	cmp	r2, #69	; 0x45
   bc0da:	f43f ab5c 	beq.w	bb796 <_strtod_l+0x27e>
   bc0de:	2301      	movs	r3, #1
   bc0e0:	f7ff bb94 	b.w	bb80c <_strtod_l+0x2f4>
   bc0e4:	f3af 8000 	nop.w
   bc0e8:	94a03595 	.word	0x94a03595
   bc0ec:	3fdfffff 	.word	0x3fdfffff
   bc0f0:	35afe535 	.word	0x35afe535
   bc0f4:	3fe00000 	.word	0x3fe00000
   bc0f8:	ffc00000 	.word	0xffc00000
   bc0fc:	41dfffff 	.word	0x41dfffff
   bc100:	94a03595 	.word	0x94a03595
   bc104:	3fcfffff 	.word	0x3fcfffff
   bc108:	3ff00000 	.word	0x3ff00000
   bc10c:	7ff00000 	.word	0x7ff00000
   bc110:	7fe00000 	.word	0x7fe00000
   bc114:	7c9fffff 	.word	0x7c9fffff
   bc118:	3fe00000 	.word	0x3fe00000
   bc11c:	bff00000 	.word	0xbff00000
   bc120:	7fefffff 	.word	0x7fefffff

000bc124 <strtod>:
   bc124:	460a      	mov	r2, r1
   bc126:	4601      	mov	r1, r0
   bc128:	4802      	ldr	r0, [pc, #8]	; (bc134 <strtod+0x10>)
   bc12a:	4b03      	ldr	r3, [pc, #12]	; (bc138 <strtod+0x14>)
   bc12c:	6800      	ldr	r0, [r0, #0]
   bc12e:	f7ff b9f3 	b.w	bb518 <_strtod_l>
   bc132:	bf00      	nop
   bc134:	2003d924 	.word	0x2003d924
   bc138:	2003d990 	.word	0x2003d990

000bc13c <strtok>:
   bc13c:	4b16      	ldr	r3, [pc, #88]	; (bc198 <strtok+0x5c>)
   bc13e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc140:	681e      	ldr	r6, [r3, #0]
   bc142:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bc144:	4605      	mov	r5, r0
   bc146:	b9fc      	cbnz	r4, bc188 <strtok+0x4c>
   bc148:	2050      	movs	r0, #80	; 0x50
   bc14a:	9101      	str	r1, [sp, #4]
   bc14c:	f7fa fe9a 	bl	b6e84 <malloc>
   bc150:	9901      	ldr	r1, [sp, #4]
   bc152:	65b0      	str	r0, [r6, #88]	; 0x58
   bc154:	4602      	mov	r2, r0
   bc156:	b920      	cbnz	r0, bc162 <strtok+0x26>
   bc158:	4b10      	ldr	r3, [pc, #64]	; (bc19c <strtok+0x60>)
   bc15a:	4811      	ldr	r0, [pc, #68]	; (bc1a0 <strtok+0x64>)
   bc15c:	2157      	movs	r1, #87	; 0x57
   bc15e:	f7fa fed1 	bl	b6f04 <__assert_func>
   bc162:	e9c0 4400 	strd	r4, r4, [r0]
   bc166:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bc16a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bc16e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bc172:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bc176:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bc17a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bc17e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bc182:	6184      	str	r4, [r0, #24]
   bc184:	7704      	strb	r4, [r0, #28]
   bc186:	6244      	str	r4, [r0, #36]	; 0x24
   bc188:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bc18a:	2301      	movs	r3, #1
   bc18c:	4628      	mov	r0, r5
   bc18e:	b002      	add	sp, #8
   bc190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bc194:	f000 b806 	b.w	bc1a4 <__strtok_r>
   bc198:	2003d924 	.word	0x2003d924
   bc19c:	000be0a1 	.word	0x000be0a1
   bc1a0:	000be198 	.word	0x000be198

000bc1a4 <__strtok_r>:
   bc1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc1a6:	b908      	cbnz	r0, bc1ac <__strtok_r+0x8>
   bc1a8:	6810      	ldr	r0, [r2, #0]
   bc1aa:	b188      	cbz	r0, bc1d0 <__strtok_r+0x2c>
   bc1ac:	4604      	mov	r4, r0
   bc1ae:	4620      	mov	r0, r4
   bc1b0:	f814 5b01 	ldrb.w	r5, [r4], #1
   bc1b4:	460f      	mov	r7, r1
   bc1b6:	f817 6b01 	ldrb.w	r6, [r7], #1
   bc1ba:	b91e      	cbnz	r6, bc1c4 <__strtok_r+0x20>
   bc1bc:	b965      	cbnz	r5, bc1d8 <__strtok_r+0x34>
   bc1be:	6015      	str	r5, [r2, #0]
   bc1c0:	4628      	mov	r0, r5
   bc1c2:	e005      	b.n	bc1d0 <__strtok_r+0x2c>
   bc1c4:	42b5      	cmp	r5, r6
   bc1c6:	d1f6      	bne.n	bc1b6 <__strtok_r+0x12>
   bc1c8:	2b00      	cmp	r3, #0
   bc1ca:	d1f0      	bne.n	bc1ae <__strtok_r+0xa>
   bc1cc:	6014      	str	r4, [r2, #0]
   bc1ce:	7003      	strb	r3, [r0, #0]
   bc1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc1d2:	461c      	mov	r4, r3
   bc1d4:	e00c      	b.n	bc1f0 <__strtok_r+0x4c>
   bc1d6:	b915      	cbnz	r5, bc1de <__strtok_r+0x3a>
   bc1d8:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc1dc:	460e      	mov	r6, r1
   bc1de:	f816 5b01 	ldrb.w	r5, [r6], #1
   bc1e2:	42ab      	cmp	r3, r5
   bc1e4:	d1f7      	bne.n	bc1d6 <__strtok_r+0x32>
   bc1e6:	2b00      	cmp	r3, #0
   bc1e8:	d0f3      	beq.n	bc1d2 <__strtok_r+0x2e>
   bc1ea:	2300      	movs	r3, #0
   bc1ec:	f804 3c01 	strb.w	r3, [r4, #-1]
   bc1f0:	6014      	str	r4, [r2, #0]
   bc1f2:	e7ed      	b.n	bc1d0 <__strtok_r+0x2c>

000bc1f4 <_strtol_l.constprop.0>:
   bc1f4:	2b01      	cmp	r3, #1
   bc1f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc1fa:	d001      	beq.n	bc200 <_strtol_l.constprop.0+0xc>
   bc1fc:	2b24      	cmp	r3, #36	; 0x24
   bc1fe:	d906      	bls.n	bc20e <_strtol_l.constprop.0+0x1a>
   bc200:	f7fa fe78 	bl	b6ef4 <__errno>
   bc204:	2316      	movs	r3, #22
   bc206:	6003      	str	r3, [r0, #0]
   bc208:	2000      	movs	r0, #0
   bc20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc20e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc2f4 <_strtol_l.constprop.0+0x100>
   bc212:	460d      	mov	r5, r1
   bc214:	462e      	mov	r6, r5
   bc216:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc21a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc21e:	f017 0708 	ands.w	r7, r7, #8
   bc222:	d1f7      	bne.n	bc214 <_strtol_l.constprop.0+0x20>
   bc224:	2c2d      	cmp	r4, #45	; 0x2d
   bc226:	d132      	bne.n	bc28e <_strtol_l.constprop.0+0x9a>
   bc228:	782c      	ldrb	r4, [r5, #0]
   bc22a:	2701      	movs	r7, #1
   bc22c:	1cb5      	adds	r5, r6, #2
   bc22e:	2b00      	cmp	r3, #0
   bc230:	d05b      	beq.n	bc2ea <_strtol_l.constprop.0+0xf6>
   bc232:	2b10      	cmp	r3, #16
   bc234:	d109      	bne.n	bc24a <_strtol_l.constprop.0+0x56>
   bc236:	2c30      	cmp	r4, #48	; 0x30
   bc238:	d107      	bne.n	bc24a <_strtol_l.constprop.0+0x56>
   bc23a:	782c      	ldrb	r4, [r5, #0]
   bc23c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc240:	2c58      	cmp	r4, #88	; 0x58
   bc242:	d14d      	bne.n	bc2e0 <_strtol_l.constprop.0+0xec>
   bc244:	786c      	ldrb	r4, [r5, #1]
   bc246:	2310      	movs	r3, #16
   bc248:	3502      	adds	r5, #2
   bc24a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc24e:	f108 38ff 	add.w	r8, r8, #4294967295
   bc252:	f04f 0c00 	mov.w	ip, #0
   bc256:	fbb8 f9f3 	udiv	r9, r8, r3
   bc25a:	4666      	mov	r6, ip
   bc25c:	fb03 8a19 	mls	sl, r3, r9, r8
   bc260:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc264:	f1be 0f09 	cmp.w	lr, #9
   bc268:	d816      	bhi.n	bc298 <_strtol_l.constprop.0+0xa4>
   bc26a:	4674      	mov	r4, lr
   bc26c:	42a3      	cmp	r3, r4
   bc26e:	dd24      	ble.n	bc2ba <_strtol_l.constprop.0+0xc6>
   bc270:	f1bc 0f00 	cmp.w	ip, #0
   bc274:	db1e      	blt.n	bc2b4 <_strtol_l.constprop.0+0xc0>
   bc276:	45b1      	cmp	r9, r6
   bc278:	d31c      	bcc.n	bc2b4 <_strtol_l.constprop.0+0xc0>
   bc27a:	d101      	bne.n	bc280 <_strtol_l.constprop.0+0x8c>
   bc27c:	45a2      	cmp	sl, r4
   bc27e:	db19      	blt.n	bc2b4 <_strtol_l.constprop.0+0xc0>
   bc280:	fb06 4603 	mla	r6, r6, r3, r4
   bc284:	f04f 0c01 	mov.w	ip, #1
   bc288:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc28c:	e7e8      	b.n	bc260 <_strtol_l.constprop.0+0x6c>
   bc28e:	2c2b      	cmp	r4, #43	; 0x2b
   bc290:	bf04      	itt	eq
   bc292:	782c      	ldrbeq	r4, [r5, #0]
   bc294:	1cb5      	addeq	r5, r6, #2
   bc296:	e7ca      	b.n	bc22e <_strtol_l.constprop.0+0x3a>
   bc298:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc29c:	f1be 0f19 	cmp.w	lr, #25
   bc2a0:	d801      	bhi.n	bc2a6 <_strtol_l.constprop.0+0xb2>
   bc2a2:	3c37      	subs	r4, #55	; 0x37
   bc2a4:	e7e2      	b.n	bc26c <_strtol_l.constprop.0+0x78>
   bc2a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc2aa:	f1be 0f19 	cmp.w	lr, #25
   bc2ae:	d804      	bhi.n	bc2ba <_strtol_l.constprop.0+0xc6>
   bc2b0:	3c57      	subs	r4, #87	; 0x57
   bc2b2:	e7db      	b.n	bc26c <_strtol_l.constprop.0+0x78>
   bc2b4:	f04f 3cff 	mov.w	ip, #4294967295
   bc2b8:	e7e6      	b.n	bc288 <_strtol_l.constprop.0+0x94>
   bc2ba:	f1bc 0f00 	cmp.w	ip, #0
   bc2be:	da05      	bge.n	bc2cc <_strtol_l.constprop.0+0xd8>
   bc2c0:	2322      	movs	r3, #34	; 0x22
   bc2c2:	6003      	str	r3, [r0, #0]
   bc2c4:	4646      	mov	r6, r8
   bc2c6:	b942      	cbnz	r2, bc2da <_strtol_l.constprop.0+0xe6>
   bc2c8:	4630      	mov	r0, r6
   bc2ca:	e79e      	b.n	bc20a <_strtol_l.constprop.0+0x16>
   bc2cc:	b107      	cbz	r7, bc2d0 <_strtol_l.constprop.0+0xdc>
   bc2ce:	4276      	negs	r6, r6
   bc2d0:	2a00      	cmp	r2, #0
   bc2d2:	d0f9      	beq.n	bc2c8 <_strtol_l.constprop.0+0xd4>
   bc2d4:	f1bc 0f00 	cmp.w	ip, #0
   bc2d8:	d000      	beq.n	bc2dc <_strtol_l.constprop.0+0xe8>
   bc2da:	1e69      	subs	r1, r5, #1
   bc2dc:	6011      	str	r1, [r2, #0]
   bc2de:	e7f3      	b.n	bc2c8 <_strtol_l.constprop.0+0xd4>
   bc2e0:	2430      	movs	r4, #48	; 0x30
   bc2e2:	2b00      	cmp	r3, #0
   bc2e4:	d1b1      	bne.n	bc24a <_strtol_l.constprop.0+0x56>
   bc2e6:	2308      	movs	r3, #8
   bc2e8:	e7af      	b.n	bc24a <_strtol_l.constprop.0+0x56>
   bc2ea:	2c30      	cmp	r4, #48	; 0x30
   bc2ec:	d0a5      	beq.n	bc23a <_strtol_l.constprop.0+0x46>
   bc2ee:	230a      	movs	r3, #10
   bc2f0:	e7ab      	b.n	bc24a <_strtol_l.constprop.0+0x56>
   bc2f2:	bf00      	nop
   bc2f4:	000be218 	.word	0x000be218

000bc2f8 <strtol>:
   bc2f8:	4613      	mov	r3, r2
   bc2fa:	460a      	mov	r2, r1
   bc2fc:	4601      	mov	r1, r0
   bc2fe:	4802      	ldr	r0, [pc, #8]	; (bc308 <strtol+0x10>)
   bc300:	6800      	ldr	r0, [r0, #0]
   bc302:	f7ff bf77 	b.w	bc1f4 <_strtol_l.constprop.0>
   bc306:	bf00      	nop
   bc308:	2003d924 	.word	0x2003d924

000bc30c <__register_exitproc>:
   bc30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc310:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc3cc <__register_exitproc+0xc0>
   bc314:	4606      	mov	r6, r0
   bc316:	f8d8 0000 	ldr.w	r0, [r8]
   bc31a:	461f      	mov	r7, r3
   bc31c:	460d      	mov	r5, r1
   bc31e:	4691      	mov	r9, r2
   bc320:	f000 fbc6 	bl	bcab0 <__retarget_lock_acquire_recursive>
   bc324:	4b25      	ldr	r3, [pc, #148]	; (bc3bc <__register_exitproc+0xb0>)
   bc326:	681c      	ldr	r4, [r3, #0]
   bc328:	b934      	cbnz	r4, bc338 <__register_exitproc+0x2c>
   bc32a:	4c25      	ldr	r4, [pc, #148]	; (bc3c0 <__register_exitproc+0xb4>)
   bc32c:	601c      	str	r4, [r3, #0]
   bc32e:	4b25      	ldr	r3, [pc, #148]	; (bc3c4 <__register_exitproc+0xb8>)
   bc330:	b113      	cbz	r3, bc338 <__register_exitproc+0x2c>
   bc332:	681b      	ldr	r3, [r3, #0]
   bc334:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc338:	6863      	ldr	r3, [r4, #4]
   bc33a:	2b1f      	cmp	r3, #31
   bc33c:	dd07      	ble.n	bc34e <__register_exitproc+0x42>
   bc33e:	f8d8 0000 	ldr.w	r0, [r8]
   bc342:	f000 fbb7 	bl	bcab4 <__retarget_lock_release_recursive>
   bc346:	f04f 30ff 	mov.w	r0, #4294967295
   bc34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc34e:	b34e      	cbz	r6, bc3a4 <__register_exitproc+0x98>
   bc350:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc354:	b988      	cbnz	r0, bc37a <__register_exitproc+0x6e>
   bc356:	4b1c      	ldr	r3, [pc, #112]	; (bc3c8 <__register_exitproc+0xbc>)
   bc358:	b923      	cbnz	r3, bc364 <__register_exitproc+0x58>
   bc35a:	f8d8 0000 	ldr.w	r0, [r8]
   bc35e:	f000 fba8 	bl	bcab2 <__retarget_lock_release>
   bc362:	e7f0      	b.n	bc346 <__register_exitproc+0x3a>
   bc364:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc368:	f7fa fd8c 	bl	b6e84 <malloc>
   bc36c:	2800      	cmp	r0, #0
   bc36e:	d0f4      	beq.n	bc35a <__register_exitproc+0x4e>
   bc370:	2300      	movs	r3, #0
   bc372:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc376:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc37a:	6863      	ldr	r3, [r4, #4]
   bc37c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc380:	2201      	movs	r2, #1
   bc382:	409a      	lsls	r2, r3
   bc384:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc388:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc38c:	4313      	orrs	r3, r2
   bc38e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc392:	2e02      	cmp	r6, #2
   bc394:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc398:	bf02      	ittt	eq
   bc39a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc39e:	4313      	orreq	r3, r2
   bc3a0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc3a4:	6863      	ldr	r3, [r4, #4]
   bc3a6:	f8d8 0000 	ldr.w	r0, [r8]
   bc3aa:	1c5a      	adds	r2, r3, #1
   bc3ac:	3302      	adds	r3, #2
   bc3ae:	6062      	str	r2, [r4, #4]
   bc3b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc3b4:	f000 fb7e 	bl	bcab4 <__retarget_lock_release_recursive>
   bc3b8:	2000      	movs	r0, #0
   bc3ba:	e7c6      	b.n	bc34a <__register_exitproc+0x3e>
   bc3bc:	2003e7ec 	.word	0x2003e7ec
   bc3c0:	2003e760 	.word	0x2003e760
   bc3c4:	00000000 	.word	0x00000000
   bc3c8:	000b6e85 	.word	0x000b6e85
   bc3cc:	2003d988 	.word	0x2003d988

000bc3d0 <rshift>:
   bc3d0:	6903      	ldr	r3, [r0, #16]
   bc3d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc3d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc3da:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc3de:	f100 0414 	add.w	r4, r0, #20
   bc3e2:	dd45      	ble.n	bc470 <rshift+0xa0>
   bc3e4:	f011 011f 	ands.w	r1, r1, #31
   bc3e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc3ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc3f0:	d10c      	bne.n	bc40c <rshift+0x3c>
   bc3f2:	f100 0710 	add.w	r7, r0, #16
   bc3f6:	4629      	mov	r1, r5
   bc3f8:	42b1      	cmp	r1, r6
   bc3fa:	d334      	bcc.n	bc466 <rshift+0x96>
   bc3fc:	1a9b      	subs	r3, r3, r2
   bc3fe:	009b      	lsls	r3, r3, #2
   bc400:	1eea      	subs	r2, r5, #3
   bc402:	4296      	cmp	r6, r2
   bc404:	bf38      	it	cc
   bc406:	2300      	movcc	r3, #0
   bc408:	4423      	add	r3, r4
   bc40a:	e015      	b.n	bc438 <rshift+0x68>
   bc40c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc410:	f1c1 0820 	rsb	r8, r1, #32
   bc414:	40cf      	lsrs	r7, r1
   bc416:	f105 0e04 	add.w	lr, r5, #4
   bc41a:	46a1      	mov	r9, r4
   bc41c:	4576      	cmp	r6, lr
   bc41e:	46f4      	mov	ip, lr
   bc420:	d815      	bhi.n	bc44e <rshift+0x7e>
   bc422:	1a9a      	subs	r2, r3, r2
   bc424:	0092      	lsls	r2, r2, #2
   bc426:	3a04      	subs	r2, #4
   bc428:	3501      	adds	r5, #1
   bc42a:	42ae      	cmp	r6, r5
   bc42c:	bf38      	it	cc
   bc42e:	2200      	movcc	r2, #0
   bc430:	18a3      	adds	r3, r4, r2
   bc432:	50a7      	str	r7, [r4, r2]
   bc434:	b107      	cbz	r7, bc438 <rshift+0x68>
   bc436:	3304      	adds	r3, #4
   bc438:	1b1a      	subs	r2, r3, r4
   bc43a:	42a3      	cmp	r3, r4
   bc43c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc440:	bf08      	it	eq
   bc442:	2300      	moveq	r3, #0
   bc444:	6102      	str	r2, [r0, #16]
   bc446:	bf08      	it	eq
   bc448:	6143      	streq	r3, [r0, #20]
   bc44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc44e:	f8dc c000 	ldr.w	ip, [ip]
   bc452:	fa0c fc08 	lsl.w	ip, ip, r8
   bc456:	ea4c 0707 	orr.w	r7, ip, r7
   bc45a:	f849 7b04 	str.w	r7, [r9], #4
   bc45e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc462:	40cf      	lsrs	r7, r1
   bc464:	e7da      	b.n	bc41c <rshift+0x4c>
   bc466:	f851 cb04 	ldr.w	ip, [r1], #4
   bc46a:	f847 cf04 	str.w	ip, [r7, #4]!
   bc46e:	e7c3      	b.n	bc3f8 <rshift+0x28>
   bc470:	4623      	mov	r3, r4
   bc472:	e7e1      	b.n	bc438 <rshift+0x68>

000bc474 <__hexdig_fun>:
   bc474:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc478:	2b09      	cmp	r3, #9
   bc47a:	d802      	bhi.n	bc482 <__hexdig_fun+0xe>
   bc47c:	3820      	subs	r0, #32
   bc47e:	b2c0      	uxtb	r0, r0
   bc480:	4770      	bx	lr
   bc482:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc486:	2b05      	cmp	r3, #5
   bc488:	d801      	bhi.n	bc48e <__hexdig_fun+0x1a>
   bc48a:	3847      	subs	r0, #71	; 0x47
   bc48c:	e7f7      	b.n	bc47e <__hexdig_fun+0xa>
   bc48e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc492:	2b05      	cmp	r3, #5
   bc494:	d801      	bhi.n	bc49a <__hexdig_fun+0x26>
   bc496:	3827      	subs	r0, #39	; 0x27
   bc498:	e7f1      	b.n	bc47e <__hexdig_fun+0xa>
   bc49a:	2000      	movs	r0, #0
   bc49c:	4770      	bx	lr
	...

000bc4a0 <__gethex>:
   bc4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc4a4:	ed2d 8b02 	vpush	{d8}
   bc4a8:	b089      	sub	sp, #36	; 0x24
   bc4aa:	ee08 0a10 	vmov	s16, r0
   bc4ae:	9304      	str	r3, [sp, #16]
   bc4b0:	4bb4      	ldr	r3, [pc, #720]	; (bc784 <__gethex+0x2e4>)
   bc4b2:	681b      	ldr	r3, [r3, #0]
   bc4b4:	9301      	str	r3, [sp, #4]
   bc4b6:	4618      	mov	r0, r3
   bc4b8:	468b      	mov	fp, r1
   bc4ba:	4690      	mov	r8, r2
   bc4bc:	f7fe ffd3 	bl	bb466 <strlen>
   bc4c0:	9b01      	ldr	r3, [sp, #4]
   bc4c2:	f8db 2000 	ldr.w	r2, [fp]
   bc4c6:	4403      	add	r3, r0
   bc4c8:	4682      	mov	sl, r0
   bc4ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc4ce:	9305      	str	r3, [sp, #20]
   bc4d0:	1c93      	adds	r3, r2, #2
   bc4d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc4d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc4da:	32fe      	adds	r2, #254	; 0xfe
   bc4dc:	18d1      	adds	r1, r2, r3
   bc4de:	461f      	mov	r7, r3
   bc4e0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc4e4:	9100      	str	r1, [sp, #0]
   bc4e6:	2830      	cmp	r0, #48	; 0x30
   bc4e8:	d0f8      	beq.n	bc4dc <__gethex+0x3c>
   bc4ea:	f7ff ffc3 	bl	bc474 <__hexdig_fun>
   bc4ee:	4604      	mov	r4, r0
   bc4f0:	2800      	cmp	r0, #0
   bc4f2:	d13a      	bne.n	bc56a <__gethex+0xca>
   bc4f4:	9901      	ldr	r1, [sp, #4]
   bc4f6:	4652      	mov	r2, sl
   bc4f8:	4638      	mov	r0, r7
   bc4fa:	f7fe ffbc 	bl	bb476 <strncmp>
   bc4fe:	4605      	mov	r5, r0
   bc500:	2800      	cmp	r0, #0
   bc502:	d168      	bne.n	bc5d6 <__gethex+0x136>
   bc504:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc508:	eb07 060a 	add.w	r6, r7, sl
   bc50c:	f7ff ffb2 	bl	bc474 <__hexdig_fun>
   bc510:	2800      	cmp	r0, #0
   bc512:	d062      	beq.n	bc5da <__gethex+0x13a>
   bc514:	4633      	mov	r3, r6
   bc516:	7818      	ldrb	r0, [r3, #0]
   bc518:	2830      	cmp	r0, #48	; 0x30
   bc51a:	461f      	mov	r7, r3
   bc51c:	f103 0301 	add.w	r3, r3, #1
   bc520:	d0f9      	beq.n	bc516 <__gethex+0x76>
   bc522:	f7ff ffa7 	bl	bc474 <__hexdig_fun>
   bc526:	2301      	movs	r3, #1
   bc528:	fab0 f480 	clz	r4, r0
   bc52c:	0964      	lsrs	r4, r4, #5
   bc52e:	4635      	mov	r5, r6
   bc530:	9300      	str	r3, [sp, #0]
   bc532:	463a      	mov	r2, r7
   bc534:	4616      	mov	r6, r2
   bc536:	3201      	adds	r2, #1
   bc538:	7830      	ldrb	r0, [r6, #0]
   bc53a:	f7ff ff9b 	bl	bc474 <__hexdig_fun>
   bc53e:	2800      	cmp	r0, #0
   bc540:	d1f8      	bne.n	bc534 <__gethex+0x94>
   bc542:	9901      	ldr	r1, [sp, #4]
   bc544:	4652      	mov	r2, sl
   bc546:	4630      	mov	r0, r6
   bc548:	f7fe ff95 	bl	bb476 <strncmp>
   bc54c:	b980      	cbnz	r0, bc570 <__gethex+0xd0>
   bc54e:	b94d      	cbnz	r5, bc564 <__gethex+0xc4>
   bc550:	eb06 050a 	add.w	r5, r6, sl
   bc554:	462a      	mov	r2, r5
   bc556:	4616      	mov	r6, r2
   bc558:	3201      	adds	r2, #1
   bc55a:	7830      	ldrb	r0, [r6, #0]
   bc55c:	f7ff ff8a 	bl	bc474 <__hexdig_fun>
   bc560:	2800      	cmp	r0, #0
   bc562:	d1f8      	bne.n	bc556 <__gethex+0xb6>
   bc564:	1bad      	subs	r5, r5, r6
   bc566:	00ad      	lsls	r5, r5, #2
   bc568:	e004      	b.n	bc574 <__gethex+0xd4>
   bc56a:	2400      	movs	r4, #0
   bc56c:	4625      	mov	r5, r4
   bc56e:	e7e0      	b.n	bc532 <__gethex+0x92>
   bc570:	2d00      	cmp	r5, #0
   bc572:	d1f7      	bne.n	bc564 <__gethex+0xc4>
   bc574:	7833      	ldrb	r3, [r6, #0]
   bc576:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc57a:	2b50      	cmp	r3, #80	; 0x50
   bc57c:	d13b      	bne.n	bc5f6 <__gethex+0x156>
   bc57e:	7873      	ldrb	r3, [r6, #1]
   bc580:	2b2b      	cmp	r3, #43	; 0x2b
   bc582:	d02c      	beq.n	bc5de <__gethex+0x13e>
   bc584:	2b2d      	cmp	r3, #45	; 0x2d
   bc586:	d02e      	beq.n	bc5e6 <__gethex+0x146>
   bc588:	1c71      	adds	r1, r6, #1
   bc58a:	f04f 0900 	mov.w	r9, #0
   bc58e:	7808      	ldrb	r0, [r1, #0]
   bc590:	f7ff ff70 	bl	bc474 <__hexdig_fun>
   bc594:	1e43      	subs	r3, r0, #1
   bc596:	b2db      	uxtb	r3, r3
   bc598:	2b18      	cmp	r3, #24
   bc59a:	d82c      	bhi.n	bc5f6 <__gethex+0x156>
   bc59c:	f1a0 0210 	sub.w	r2, r0, #16
   bc5a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc5a4:	f7ff ff66 	bl	bc474 <__hexdig_fun>
   bc5a8:	1e43      	subs	r3, r0, #1
   bc5aa:	b2db      	uxtb	r3, r3
   bc5ac:	2b18      	cmp	r3, #24
   bc5ae:	d91d      	bls.n	bc5ec <__gethex+0x14c>
   bc5b0:	f1b9 0f00 	cmp.w	r9, #0
   bc5b4:	d000      	beq.n	bc5b8 <__gethex+0x118>
   bc5b6:	4252      	negs	r2, r2
   bc5b8:	4415      	add	r5, r2
   bc5ba:	f8cb 1000 	str.w	r1, [fp]
   bc5be:	b1e4      	cbz	r4, bc5fa <__gethex+0x15a>
   bc5c0:	9b00      	ldr	r3, [sp, #0]
   bc5c2:	2b00      	cmp	r3, #0
   bc5c4:	bf14      	ite	ne
   bc5c6:	2700      	movne	r7, #0
   bc5c8:	2706      	moveq	r7, #6
   bc5ca:	4638      	mov	r0, r7
   bc5cc:	b009      	add	sp, #36	; 0x24
   bc5ce:	ecbd 8b02 	vpop	{d8}
   bc5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc5d6:	463e      	mov	r6, r7
   bc5d8:	4625      	mov	r5, r4
   bc5da:	2401      	movs	r4, #1
   bc5dc:	e7ca      	b.n	bc574 <__gethex+0xd4>
   bc5de:	f04f 0900 	mov.w	r9, #0
   bc5e2:	1cb1      	adds	r1, r6, #2
   bc5e4:	e7d3      	b.n	bc58e <__gethex+0xee>
   bc5e6:	f04f 0901 	mov.w	r9, #1
   bc5ea:	e7fa      	b.n	bc5e2 <__gethex+0x142>
   bc5ec:	230a      	movs	r3, #10
   bc5ee:	fb03 0202 	mla	r2, r3, r2, r0
   bc5f2:	3a10      	subs	r2, #16
   bc5f4:	e7d4      	b.n	bc5a0 <__gethex+0x100>
   bc5f6:	4631      	mov	r1, r6
   bc5f8:	e7df      	b.n	bc5ba <__gethex+0x11a>
   bc5fa:	1bf3      	subs	r3, r6, r7
   bc5fc:	3b01      	subs	r3, #1
   bc5fe:	4621      	mov	r1, r4
   bc600:	2b07      	cmp	r3, #7
   bc602:	dc0b      	bgt.n	bc61c <__gethex+0x17c>
   bc604:	ee18 0a10 	vmov	r0, s16
   bc608:	f000 fa68 	bl	bcadc <_Balloc>
   bc60c:	4604      	mov	r4, r0
   bc60e:	b940      	cbnz	r0, bc622 <__gethex+0x182>
   bc610:	4b5d      	ldr	r3, [pc, #372]	; (bc788 <__gethex+0x2e8>)
   bc612:	4602      	mov	r2, r0
   bc614:	21de      	movs	r1, #222	; 0xde
   bc616:	485d      	ldr	r0, [pc, #372]	; (bc78c <__gethex+0x2ec>)
   bc618:	f7fa fc74 	bl	b6f04 <__assert_func>
   bc61c:	3101      	adds	r1, #1
   bc61e:	105b      	asrs	r3, r3, #1
   bc620:	e7ee      	b.n	bc600 <__gethex+0x160>
   bc622:	f100 0914 	add.w	r9, r0, #20
   bc626:	f04f 0b00 	mov.w	fp, #0
   bc62a:	f1ca 0301 	rsb	r3, sl, #1
   bc62e:	f8cd 9008 	str.w	r9, [sp, #8]
   bc632:	f8cd b000 	str.w	fp, [sp]
   bc636:	9306      	str	r3, [sp, #24]
   bc638:	42b7      	cmp	r7, r6
   bc63a:	d340      	bcc.n	bc6be <__gethex+0x21e>
   bc63c:	9802      	ldr	r0, [sp, #8]
   bc63e:	9b00      	ldr	r3, [sp, #0]
   bc640:	f840 3b04 	str.w	r3, [r0], #4
   bc644:	eba0 0009 	sub.w	r0, r0, r9
   bc648:	1080      	asrs	r0, r0, #2
   bc64a:	0146      	lsls	r6, r0, #5
   bc64c:	6120      	str	r0, [r4, #16]
   bc64e:	4618      	mov	r0, r3
   bc650:	f000 fb36 	bl	bccc0 <__hi0bits>
   bc654:	1a30      	subs	r0, r6, r0
   bc656:	f8d8 6000 	ldr.w	r6, [r8]
   bc65a:	42b0      	cmp	r0, r6
   bc65c:	dd63      	ble.n	bc726 <__gethex+0x286>
   bc65e:	1b87      	subs	r7, r0, r6
   bc660:	4639      	mov	r1, r7
   bc662:	4620      	mov	r0, r4
   bc664:	f000 feda 	bl	bd41c <__any_on>
   bc668:	4682      	mov	sl, r0
   bc66a:	b1a8      	cbz	r0, bc698 <__gethex+0x1f8>
   bc66c:	1e7b      	subs	r3, r7, #1
   bc66e:	1159      	asrs	r1, r3, #5
   bc670:	f003 021f 	and.w	r2, r3, #31
   bc674:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc678:	f04f 0a01 	mov.w	sl, #1
   bc67c:	fa0a f202 	lsl.w	r2, sl, r2
   bc680:	420a      	tst	r2, r1
   bc682:	d009      	beq.n	bc698 <__gethex+0x1f8>
   bc684:	4553      	cmp	r3, sl
   bc686:	dd05      	ble.n	bc694 <__gethex+0x1f4>
   bc688:	1eb9      	subs	r1, r7, #2
   bc68a:	4620      	mov	r0, r4
   bc68c:	f000 fec6 	bl	bd41c <__any_on>
   bc690:	2800      	cmp	r0, #0
   bc692:	d145      	bne.n	bc720 <__gethex+0x280>
   bc694:	f04f 0a02 	mov.w	sl, #2
   bc698:	4639      	mov	r1, r7
   bc69a:	4620      	mov	r0, r4
   bc69c:	f7ff fe98 	bl	bc3d0 <rshift>
   bc6a0:	443d      	add	r5, r7
   bc6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc6a6:	42ab      	cmp	r3, r5
   bc6a8:	da4c      	bge.n	bc744 <__gethex+0x2a4>
   bc6aa:	ee18 0a10 	vmov	r0, s16
   bc6ae:	4621      	mov	r1, r4
   bc6b0:	f000 fa54 	bl	bcb5c <_Bfree>
   bc6b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc6b6:	2300      	movs	r3, #0
   bc6b8:	6013      	str	r3, [r2, #0]
   bc6ba:	27a3      	movs	r7, #163	; 0xa3
   bc6bc:	e785      	b.n	bc5ca <__gethex+0x12a>
   bc6be:	1e73      	subs	r3, r6, #1
   bc6c0:	9a05      	ldr	r2, [sp, #20]
   bc6c2:	9303      	str	r3, [sp, #12]
   bc6c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc6c8:	4293      	cmp	r3, r2
   bc6ca:	d019      	beq.n	bc700 <__gethex+0x260>
   bc6cc:	f1bb 0f20 	cmp.w	fp, #32
   bc6d0:	d107      	bne.n	bc6e2 <__gethex+0x242>
   bc6d2:	9b02      	ldr	r3, [sp, #8]
   bc6d4:	9a00      	ldr	r2, [sp, #0]
   bc6d6:	f843 2b04 	str.w	r2, [r3], #4
   bc6da:	9302      	str	r3, [sp, #8]
   bc6dc:	2300      	movs	r3, #0
   bc6de:	9300      	str	r3, [sp, #0]
   bc6e0:	469b      	mov	fp, r3
   bc6e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc6e6:	f7ff fec5 	bl	bc474 <__hexdig_fun>
   bc6ea:	9b00      	ldr	r3, [sp, #0]
   bc6ec:	f000 000f 	and.w	r0, r0, #15
   bc6f0:	fa00 f00b 	lsl.w	r0, r0, fp
   bc6f4:	4303      	orrs	r3, r0
   bc6f6:	9300      	str	r3, [sp, #0]
   bc6f8:	f10b 0b04 	add.w	fp, fp, #4
   bc6fc:	9b03      	ldr	r3, [sp, #12]
   bc6fe:	e00d      	b.n	bc71c <__gethex+0x27c>
   bc700:	9b03      	ldr	r3, [sp, #12]
   bc702:	9a06      	ldr	r2, [sp, #24]
   bc704:	4413      	add	r3, r2
   bc706:	42bb      	cmp	r3, r7
   bc708:	d3e0      	bcc.n	bc6cc <__gethex+0x22c>
   bc70a:	4618      	mov	r0, r3
   bc70c:	9901      	ldr	r1, [sp, #4]
   bc70e:	9307      	str	r3, [sp, #28]
   bc710:	4652      	mov	r2, sl
   bc712:	f7fe feb0 	bl	bb476 <strncmp>
   bc716:	9b07      	ldr	r3, [sp, #28]
   bc718:	2800      	cmp	r0, #0
   bc71a:	d1d7      	bne.n	bc6cc <__gethex+0x22c>
   bc71c:	461e      	mov	r6, r3
   bc71e:	e78b      	b.n	bc638 <__gethex+0x198>
   bc720:	f04f 0a03 	mov.w	sl, #3
   bc724:	e7b8      	b.n	bc698 <__gethex+0x1f8>
   bc726:	da0a      	bge.n	bc73e <__gethex+0x29e>
   bc728:	1a37      	subs	r7, r6, r0
   bc72a:	4621      	mov	r1, r4
   bc72c:	ee18 0a10 	vmov	r0, s16
   bc730:	463a      	mov	r2, r7
   bc732:	f000 fc2f 	bl	bcf94 <__lshift>
   bc736:	1bed      	subs	r5, r5, r7
   bc738:	4604      	mov	r4, r0
   bc73a:	f100 0914 	add.w	r9, r0, #20
   bc73e:	f04f 0a00 	mov.w	sl, #0
   bc742:	e7ae      	b.n	bc6a2 <__gethex+0x202>
   bc744:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc748:	42a8      	cmp	r0, r5
   bc74a:	dd72      	ble.n	bc832 <__gethex+0x392>
   bc74c:	1b45      	subs	r5, r0, r5
   bc74e:	42ae      	cmp	r6, r5
   bc750:	dc36      	bgt.n	bc7c0 <__gethex+0x320>
   bc752:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc756:	2b02      	cmp	r3, #2
   bc758:	d02a      	beq.n	bc7b0 <__gethex+0x310>
   bc75a:	2b03      	cmp	r3, #3
   bc75c:	d02c      	beq.n	bc7b8 <__gethex+0x318>
   bc75e:	2b01      	cmp	r3, #1
   bc760:	d11c      	bne.n	bc79c <__gethex+0x2fc>
   bc762:	42ae      	cmp	r6, r5
   bc764:	d11a      	bne.n	bc79c <__gethex+0x2fc>
   bc766:	2e01      	cmp	r6, #1
   bc768:	d112      	bne.n	bc790 <__gethex+0x2f0>
   bc76a:	9a04      	ldr	r2, [sp, #16]
   bc76c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc770:	6013      	str	r3, [r2, #0]
   bc772:	2301      	movs	r3, #1
   bc774:	6123      	str	r3, [r4, #16]
   bc776:	f8c9 3000 	str.w	r3, [r9]
   bc77a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc77c:	2762      	movs	r7, #98	; 0x62
   bc77e:	601c      	str	r4, [r3, #0]
   bc780:	e723      	b.n	bc5ca <__gethex+0x12a>
   bc782:	bf00      	nop
   bc784:	000be3b0 	.word	0x000be3b0
   bc788:	000be318 	.word	0x000be318
   bc78c:	000be329 	.word	0x000be329
   bc790:	1e71      	subs	r1, r6, #1
   bc792:	4620      	mov	r0, r4
   bc794:	f000 fe42 	bl	bd41c <__any_on>
   bc798:	2800      	cmp	r0, #0
   bc79a:	d1e6      	bne.n	bc76a <__gethex+0x2ca>
   bc79c:	ee18 0a10 	vmov	r0, s16
   bc7a0:	4621      	mov	r1, r4
   bc7a2:	f000 f9db 	bl	bcb5c <_Bfree>
   bc7a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc7a8:	2300      	movs	r3, #0
   bc7aa:	6013      	str	r3, [r2, #0]
   bc7ac:	2750      	movs	r7, #80	; 0x50
   bc7ae:	e70c      	b.n	bc5ca <__gethex+0x12a>
   bc7b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc7b2:	2b00      	cmp	r3, #0
   bc7b4:	d1f2      	bne.n	bc79c <__gethex+0x2fc>
   bc7b6:	e7d8      	b.n	bc76a <__gethex+0x2ca>
   bc7b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc7ba:	2b00      	cmp	r3, #0
   bc7bc:	d1d5      	bne.n	bc76a <__gethex+0x2ca>
   bc7be:	e7ed      	b.n	bc79c <__gethex+0x2fc>
   bc7c0:	1e6f      	subs	r7, r5, #1
   bc7c2:	f1ba 0f00 	cmp.w	sl, #0
   bc7c6:	d131      	bne.n	bc82c <__gethex+0x38c>
   bc7c8:	b127      	cbz	r7, bc7d4 <__gethex+0x334>
   bc7ca:	4639      	mov	r1, r7
   bc7cc:	4620      	mov	r0, r4
   bc7ce:	f000 fe25 	bl	bd41c <__any_on>
   bc7d2:	4682      	mov	sl, r0
   bc7d4:	117b      	asrs	r3, r7, #5
   bc7d6:	2101      	movs	r1, #1
   bc7d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc7dc:	f007 071f 	and.w	r7, r7, #31
   bc7e0:	fa01 f707 	lsl.w	r7, r1, r7
   bc7e4:	421f      	tst	r7, r3
   bc7e6:	4629      	mov	r1, r5
   bc7e8:	4620      	mov	r0, r4
   bc7ea:	bf18      	it	ne
   bc7ec:	f04a 0a02 	orrne.w	sl, sl, #2
   bc7f0:	1b76      	subs	r6, r6, r5
   bc7f2:	f7ff fded 	bl	bc3d0 <rshift>
   bc7f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc7fa:	2702      	movs	r7, #2
   bc7fc:	f1ba 0f00 	cmp.w	sl, #0
   bc800:	d048      	beq.n	bc894 <__gethex+0x3f4>
   bc802:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc806:	2b02      	cmp	r3, #2
   bc808:	d015      	beq.n	bc836 <__gethex+0x396>
   bc80a:	2b03      	cmp	r3, #3
   bc80c:	d017      	beq.n	bc83e <__gethex+0x39e>
   bc80e:	2b01      	cmp	r3, #1
   bc810:	d109      	bne.n	bc826 <__gethex+0x386>
   bc812:	f01a 0f02 	tst.w	sl, #2
   bc816:	d006      	beq.n	bc826 <__gethex+0x386>
   bc818:	f8d9 0000 	ldr.w	r0, [r9]
   bc81c:	ea4a 0a00 	orr.w	sl, sl, r0
   bc820:	f01a 0f01 	tst.w	sl, #1
   bc824:	d10e      	bne.n	bc844 <__gethex+0x3a4>
   bc826:	f047 0710 	orr.w	r7, r7, #16
   bc82a:	e033      	b.n	bc894 <__gethex+0x3f4>
   bc82c:	f04f 0a01 	mov.w	sl, #1
   bc830:	e7d0      	b.n	bc7d4 <__gethex+0x334>
   bc832:	2701      	movs	r7, #1
   bc834:	e7e2      	b.n	bc7fc <__gethex+0x35c>
   bc836:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc838:	f1c3 0301 	rsb	r3, r3, #1
   bc83c:	9315      	str	r3, [sp, #84]	; 0x54
   bc83e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc840:	2b00      	cmp	r3, #0
   bc842:	d0f0      	beq.n	bc826 <__gethex+0x386>
   bc844:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc848:	f104 0314 	add.w	r3, r4, #20
   bc84c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc850:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc854:	f04f 0c00 	mov.w	ip, #0
   bc858:	4618      	mov	r0, r3
   bc85a:	f853 2b04 	ldr.w	r2, [r3], #4
   bc85e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bc862:	d01c      	beq.n	bc89e <__gethex+0x3fe>
   bc864:	3201      	adds	r2, #1
   bc866:	6002      	str	r2, [r0, #0]
   bc868:	2f02      	cmp	r7, #2
   bc86a:	f104 0314 	add.w	r3, r4, #20
   bc86e:	d13f      	bne.n	bc8f0 <__gethex+0x450>
   bc870:	f8d8 2000 	ldr.w	r2, [r8]
   bc874:	3a01      	subs	r2, #1
   bc876:	42b2      	cmp	r2, r6
   bc878:	d10a      	bne.n	bc890 <__gethex+0x3f0>
   bc87a:	1171      	asrs	r1, r6, #5
   bc87c:	2201      	movs	r2, #1
   bc87e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc882:	f006 061f 	and.w	r6, r6, #31
   bc886:	fa02 f606 	lsl.w	r6, r2, r6
   bc88a:	421e      	tst	r6, r3
   bc88c:	bf18      	it	ne
   bc88e:	4617      	movne	r7, r2
   bc890:	f047 0720 	orr.w	r7, r7, #32
   bc894:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc896:	601c      	str	r4, [r3, #0]
   bc898:	9b04      	ldr	r3, [sp, #16]
   bc89a:	601d      	str	r5, [r3, #0]
   bc89c:	e695      	b.n	bc5ca <__gethex+0x12a>
   bc89e:	4299      	cmp	r1, r3
   bc8a0:	f843 cc04 	str.w	ip, [r3, #-4]
   bc8a4:	d8d8      	bhi.n	bc858 <__gethex+0x3b8>
   bc8a6:	68a3      	ldr	r3, [r4, #8]
   bc8a8:	459b      	cmp	fp, r3
   bc8aa:	db19      	blt.n	bc8e0 <__gethex+0x440>
   bc8ac:	6861      	ldr	r1, [r4, #4]
   bc8ae:	ee18 0a10 	vmov	r0, s16
   bc8b2:	3101      	adds	r1, #1
   bc8b4:	f000 f912 	bl	bcadc <_Balloc>
   bc8b8:	4681      	mov	r9, r0
   bc8ba:	b918      	cbnz	r0, bc8c4 <__gethex+0x424>
   bc8bc:	4b1a      	ldr	r3, [pc, #104]	; (bc928 <__gethex+0x488>)
   bc8be:	4602      	mov	r2, r0
   bc8c0:	2184      	movs	r1, #132	; 0x84
   bc8c2:	e6a8      	b.n	bc616 <__gethex+0x176>
   bc8c4:	6922      	ldr	r2, [r4, #16]
   bc8c6:	3202      	adds	r2, #2
   bc8c8:	f104 010c 	add.w	r1, r4, #12
   bc8cc:	0092      	lsls	r2, r2, #2
   bc8ce:	300c      	adds	r0, #12
   bc8d0:	f7fe fd2b 	bl	bb32a <memcpy>
   bc8d4:	4621      	mov	r1, r4
   bc8d6:	ee18 0a10 	vmov	r0, s16
   bc8da:	f000 f93f 	bl	bcb5c <_Bfree>
   bc8de:	464c      	mov	r4, r9
   bc8e0:	6923      	ldr	r3, [r4, #16]
   bc8e2:	1c5a      	adds	r2, r3, #1
   bc8e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc8e8:	6122      	str	r2, [r4, #16]
   bc8ea:	2201      	movs	r2, #1
   bc8ec:	615a      	str	r2, [r3, #20]
   bc8ee:	e7bb      	b.n	bc868 <__gethex+0x3c8>
   bc8f0:	6922      	ldr	r2, [r4, #16]
   bc8f2:	455a      	cmp	r2, fp
   bc8f4:	dd0b      	ble.n	bc90e <__gethex+0x46e>
   bc8f6:	2101      	movs	r1, #1
   bc8f8:	4620      	mov	r0, r4
   bc8fa:	f7ff fd69 	bl	bc3d0 <rshift>
   bc8fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc902:	3501      	adds	r5, #1
   bc904:	42ab      	cmp	r3, r5
   bc906:	f6ff aed0 	blt.w	bc6aa <__gethex+0x20a>
   bc90a:	2701      	movs	r7, #1
   bc90c:	e7c0      	b.n	bc890 <__gethex+0x3f0>
   bc90e:	f016 061f 	ands.w	r6, r6, #31
   bc912:	d0fa      	beq.n	bc90a <__gethex+0x46a>
   bc914:	4453      	add	r3, sl
   bc916:	f1c6 0620 	rsb	r6, r6, #32
   bc91a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc91e:	f000 f9cf 	bl	bccc0 <__hi0bits>
   bc922:	42b0      	cmp	r0, r6
   bc924:	dbe7      	blt.n	bc8f6 <__gethex+0x456>
   bc926:	e7f0      	b.n	bc90a <__gethex+0x46a>
   bc928:	000be318 	.word	0x000be318

000bc92c <L_shift>:
   bc92c:	f1c2 0208 	rsb	r2, r2, #8
   bc930:	0092      	lsls	r2, r2, #2
   bc932:	b570      	push	{r4, r5, r6, lr}
   bc934:	f1c2 0620 	rsb	r6, r2, #32
   bc938:	6843      	ldr	r3, [r0, #4]
   bc93a:	6804      	ldr	r4, [r0, #0]
   bc93c:	fa03 f506 	lsl.w	r5, r3, r6
   bc940:	432c      	orrs	r4, r5
   bc942:	40d3      	lsrs	r3, r2
   bc944:	6004      	str	r4, [r0, #0]
   bc946:	f840 3f04 	str.w	r3, [r0, #4]!
   bc94a:	4288      	cmp	r0, r1
   bc94c:	d3f4      	bcc.n	bc938 <L_shift+0xc>
   bc94e:	bd70      	pop	{r4, r5, r6, pc}

000bc950 <__match>:
   bc950:	b530      	push	{r4, r5, lr}
   bc952:	6803      	ldr	r3, [r0, #0]
   bc954:	3301      	adds	r3, #1
   bc956:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc95a:	b914      	cbnz	r4, bc962 <__match+0x12>
   bc95c:	6003      	str	r3, [r0, #0]
   bc95e:	2001      	movs	r0, #1
   bc960:	bd30      	pop	{r4, r5, pc}
   bc962:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc966:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc96a:	2d19      	cmp	r5, #25
   bc96c:	bf98      	it	ls
   bc96e:	3220      	addls	r2, #32
   bc970:	42a2      	cmp	r2, r4
   bc972:	d0f0      	beq.n	bc956 <__match+0x6>
   bc974:	2000      	movs	r0, #0
   bc976:	e7f3      	b.n	bc960 <__match+0x10>

000bc978 <__hexnan>:
   bc978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc97c:	680b      	ldr	r3, [r1, #0]
   bc97e:	115e      	asrs	r6, r3, #5
   bc980:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc984:	f013 031f 	ands.w	r3, r3, #31
   bc988:	b087      	sub	sp, #28
   bc98a:	bf18      	it	ne
   bc98c:	3604      	addne	r6, #4
   bc98e:	2500      	movs	r5, #0
   bc990:	1f37      	subs	r7, r6, #4
   bc992:	4690      	mov	r8, r2
   bc994:	6802      	ldr	r2, [r0, #0]
   bc996:	9301      	str	r3, [sp, #4]
   bc998:	4682      	mov	sl, r0
   bc99a:	f846 5c04 	str.w	r5, [r6, #-4]
   bc99e:	46b9      	mov	r9, r7
   bc9a0:	463c      	mov	r4, r7
   bc9a2:	9502      	str	r5, [sp, #8]
   bc9a4:	46ab      	mov	fp, r5
   bc9a6:	7851      	ldrb	r1, [r2, #1]
   bc9a8:	1c53      	adds	r3, r2, #1
   bc9aa:	9303      	str	r3, [sp, #12]
   bc9ac:	b341      	cbz	r1, bca00 <__hexnan+0x88>
   bc9ae:	4608      	mov	r0, r1
   bc9b0:	9205      	str	r2, [sp, #20]
   bc9b2:	9104      	str	r1, [sp, #16]
   bc9b4:	f7ff fd5e 	bl	bc474 <__hexdig_fun>
   bc9b8:	2800      	cmp	r0, #0
   bc9ba:	d14f      	bne.n	bca5c <__hexnan+0xe4>
   bc9bc:	9904      	ldr	r1, [sp, #16]
   bc9be:	9a05      	ldr	r2, [sp, #20]
   bc9c0:	2920      	cmp	r1, #32
   bc9c2:	d818      	bhi.n	bc9f6 <__hexnan+0x7e>
   bc9c4:	9b02      	ldr	r3, [sp, #8]
   bc9c6:	459b      	cmp	fp, r3
   bc9c8:	dd13      	ble.n	bc9f2 <__hexnan+0x7a>
   bc9ca:	454c      	cmp	r4, r9
   bc9cc:	d206      	bcs.n	bc9dc <__hexnan+0x64>
   bc9ce:	2d07      	cmp	r5, #7
   bc9d0:	dc04      	bgt.n	bc9dc <__hexnan+0x64>
   bc9d2:	462a      	mov	r2, r5
   bc9d4:	4649      	mov	r1, r9
   bc9d6:	4620      	mov	r0, r4
   bc9d8:	f7ff ffa8 	bl	bc92c <L_shift>
   bc9dc:	4544      	cmp	r4, r8
   bc9de:	d950      	bls.n	bca82 <__hexnan+0x10a>
   bc9e0:	2300      	movs	r3, #0
   bc9e2:	f1a4 0904 	sub.w	r9, r4, #4
   bc9e6:	f844 3c04 	str.w	r3, [r4, #-4]
   bc9ea:	f8cd b008 	str.w	fp, [sp, #8]
   bc9ee:	464c      	mov	r4, r9
   bc9f0:	461d      	mov	r5, r3
   bc9f2:	9a03      	ldr	r2, [sp, #12]
   bc9f4:	e7d7      	b.n	bc9a6 <__hexnan+0x2e>
   bc9f6:	2929      	cmp	r1, #41	; 0x29
   bc9f8:	d156      	bne.n	bcaa8 <__hexnan+0x130>
   bc9fa:	3202      	adds	r2, #2
   bc9fc:	f8ca 2000 	str.w	r2, [sl]
   bca00:	f1bb 0f00 	cmp.w	fp, #0
   bca04:	d050      	beq.n	bcaa8 <__hexnan+0x130>
   bca06:	454c      	cmp	r4, r9
   bca08:	d206      	bcs.n	bca18 <__hexnan+0xa0>
   bca0a:	2d07      	cmp	r5, #7
   bca0c:	dc04      	bgt.n	bca18 <__hexnan+0xa0>
   bca0e:	462a      	mov	r2, r5
   bca10:	4649      	mov	r1, r9
   bca12:	4620      	mov	r0, r4
   bca14:	f7ff ff8a 	bl	bc92c <L_shift>
   bca18:	4544      	cmp	r4, r8
   bca1a:	d934      	bls.n	bca86 <__hexnan+0x10e>
   bca1c:	f1a8 0204 	sub.w	r2, r8, #4
   bca20:	4623      	mov	r3, r4
   bca22:	f853 1b04 	ldr.w	r1, [r3], #4
   bca26:	f842 1f04 	str.w	r1, [r2, #4]!
   bca2a:	429f      	cmp	r7, r3
   bca2c:	d2f9      	bcs.n	bca22 <__hexnan+0xaa>
   bca2e:	1b3b      	subs	r3, r7, r4
   bca30:	f023 0303 	bic.w	r3, r3, #3
   bca34:	3304      	adds	r3, #4
   bca36:	3401      	adds	r4, #1
   bca38:	3e03      	subs	r6, #3
   bca3a:	42b4      	cmp	r4, r6
   bca3c:	bf88      	it	hi
   bca3e:	2304      	movhi	r3, #4
   bca40:	4443      	add	r3, r8
   bca42:	2200      	movs	r2, #0
   bca44:	f843 2b04 	str.w	r2, [r3], #4
   bca48:	429f      	cmp	r7, r3
   bca4a:	d2fb      	bcs.n	bca44 <__hexnan+0xcc>
   bca4c:	683b      	ldr	r3, [r7, #0]
   bca4e:	b91b      	cbnz	r3, bca58 <__hexnan+0xe0>
   bca50:	4547      	cmp	r7, r8
   bca52:	d127      	bne.n	bcaa4 <__hexnan+0x12c>
   bca54:	2301      	movs	r3, #1
   bca56:	603b      	str	r3, [r7, #0]
   bca58:	2005      	movs	r0, #5
   bca5a:	e026      	b.n	bcaaa <__hexnan+0x132>
   bca5c:	3501      	adds	r5, #1
   bca5e:	2d08      	cmp	r5, #8
   bca60:	f10b 0b01 	add.w	fp, fp, #1
   bca64:	dd06      	ble.n	bca74 <__hexnan+0xfc>
   bca66:	4544      	cmp	r4, r8
   bca68:	d9c3      	bls.n	bc9f2 <__hexnan+0x7a>
   bca6a:	2300      	movs	r3, #0
   bca6c:	f844 3c04 	str.w	r3, [r4, #-4]
   bca70:	2501      	movs	r5, #1
   bca72:	3c04      	subs	r4, #4
   bca74:	6822      	ldr	r2, [r4, #0]
   bca76:	f000 000f 	and.w	r0, r0, #15
   bca7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bca7e:	6022      	str	r2, [r4, #0]
   bca80:	e7b7      	b.n	bc9f2 <__hexnan+0x7a>
   bca82:	2508      	movs	r5, #8
   bca84:	e7b5      	b.n	bc9f2 <__hexnan+0x7a>
   bca86:	9b01      	ldr	r3, [sp, #4]
   bca88:	2b00      	cmp	r3, #0
   bca8a:	d0df      	beq.n	bca4c <__hexnan+0xd4>
   bca8c:	f04f 32ff 	mov.w	r2, #4294967295
   bca90:	f1c3 0320 	rsb	r3, r3, #32
   bca94:	fa22 f303 	lsr.w	r3, r2, r3
   bca98:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bca9c:	401a      	ands	r2, r3
   bca9e:	f846 2c04 	str.w	r2, [r6, #-4]
   bcaa2:	e7d3      	b.n	bca4c <__hexnan+0xd4>
   bcaa4:	3f04      	subs	r7, #4
   bcaa6:	e7d1      	b.n	bca4c <__hexnan+0xd4>
   bcaa8:	2004      	movs	r0, #4
   bcaaa:	b007      	add	sp, #28
   bcaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcab0 <__retarget_lock_acquire_recursive>:
   bcab0:	4770      	bx	lr

000bcab2 <__retarget_lock_release>:
   bcab2:	4770      	bx	lr

000bcab4 <__retarget_lock_release_recursive>:
   bcab4:	4770      	bx	lr

000bcab6 <__ascii_mbtowc>:
   bcab6:	b082      	sub	sp, #8
   bcab8:	b901      	cbnz	r1, bcabc <__ascii_mbtowc+0x6>
   bcaba:	a901      	add	r1, sp, #4
   bcabc:	b142      	cbz	r2, bcad0 <__ascii_mbtowc+0x1a>
   bcabe:	b14b      	cbz	r3, bcad4 <__ascii_mbtowc+0x1e>
   bcac0:	7813      	ldrb	r3, [r2, #0]
   bcac2:	600b      	str	r3, [r1, #0]
   bcac4:	7812      	ldrb	r2, [r2, #0]
   bcac6:	1e10      	subs	r0, r2, #0
   bcac8:	bf18      	it	ne
   bcaca:	2001      	movne	r0, #1
   bcacc:	b002      	add	sp, #8
   bcace:	4770      	bx	lr
   bcad0:	4610      	mov	r0, r2
   bcad2:	e7fb      	b.n	bcacc <__ascii_mbtowc+0x16>
   bcad4:	f06f 0001 	mvn.w	r0, #1
   bcad8:	e7f8      	b.n	bcacc <__ascii_mbtowc+0x16>
	...

000bcadc <_Balloc>:
   bcadc:	b570      	push	{r4, r5, r6, lr}
   bcade:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcae0:	4604      	mov	r4, r0
   bcae2:	460d      	mov	r5, r1
   bcae4:	b976      	cbnz	r6, bcb04 <_Balloc+0x28>
   bcae6:	2010      	movs	r0, #16
   bcae8:	f7fa f9cc 	bl	b6e84 <malloc>
   bcaec:	4602      	mov	r2, r0
   bcaee:	6260      	str	r0, [r4, #36]	; 0x24
   bcaf0:	b920      	cbnz	r0, bcafc <_Balloc+0x20>
   bcaf2:	4b18      	ldr	r3, [pc, #96]	; (bcb54 <_Balloc+0x78>)
   bcaf4:	4818      	ldr	r0, [pc, #96]	; (bcb58 <_Balloc+0x7c>)
   bcaf6:	2166      	movs	r1, #102	; 0x66
   bcaf8:	f7fa fa04 	bl	b6f04 <__assert_func>
   bcafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcb00:	6006      	str	r6, [r0, #0]
   bcb02:	60c6      	str	r6, [r0, #12]
   bcb04:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bcb06:	68f3      	ldr	r3, [r6, #12]
   bcb08:	b183      	cbz	r3, bcb2c <_Balloc+0x50>
   bcb0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcb0c:	68db      	ldr	r3, [r3, #12]
   bcb0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bcb12:	b9b8      	cbnz	r0, bcb44 <_Balloc+0x68>
   bcb14:	2101      	movs	r1, #1
   bcb16:	fa01 f605 	lsl.w	r6, r1, r5
   bcb1a:	1d72      	adds	r2, r6, #5
   bcb1c:	0092      	lsls	r2, r2, #2
   bcb1e:	4620      	mov	r0, r4
   bcb20:	f000 fc9d 	bl	bd45e <_calloc_r>
   bcb24:	b160      	cbz	r0, bcb40 <_Balloc+0x64>
   bcb26:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bcb2a:	e00e      	b.n	bcb4a <_Balloc+0x6e>
   bcb2c:	2221      	movs	r2, #33	; 0x21
   bcb2e:	2104      	movs	r1, #4
   bcb30:	4620      	mov	r0, r4
   bcb32:	f000 fc94 	bl	bd45e <_calloc_r>
   bcb36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcb38:	60f0      	str	r0, [r6, #12]
   bcb3a:	68db      	ldr	r3, [r3, #12]
   bcb3c:	2b00      	cmp	r3, #0
   bcb3e:	d1e4      	bne.n	bcb0a <_Balloc+0x2e>
   bcb40:	2000      	movs	r0, #0
   bcb42:	bd70      	pop	{r4, r5, r6, pc}
   bcb44:	6802      	ldr	r2, [r0, #0]
   bcb46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bcb4a:	2300      	movs	r3, #0
   bcb4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bcb50:	e7f7      	b.n	bcb42 <_Balloc+0x66>
   bcb52:	bf00      	nop
   bcb54:	000be0a1 	.word	0x000be0a1
   bcb58:	000be3c4 	.word	0x000be3c4

000bcb5c <_Bfree>:
   bcb5c:	b570      	push	{r4, r5, r6, lr}
   bcb5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcb60:	4605      	mov	r5, r0
   bcb62:	460c      	mov	r4, r1
   bcb64:	b976      	cbnz	r6, bcb84 <_Bfree+0x28>
   bcb66:	2010      	movs	r0, #16
   bcb68:	f7fa f98c 	bl	b6e84 <malloc>
   bcb6c:	4602      	mov	r2, r0
   bcb6e:	6268      	str	r0, [r5, #36]	; 0x24
   bcb70:	b920      	cbnz	r0, bcb7c <_Bfree+0x20>
   bcb72:	4b09      	ldr	r3, [pc, #36]	; (bcb98 <_Bfree+0x3c>)
   bcb74:	4809      	ldr	r0, [pc, #36]	; (bcb9c <_Bfree+0x40>)
   bcb76:	218a      	movs	r1, #138	; 0x8a
   bcb78:	f7fa f9c4 	bl	b6f04 <__assert_func>
   bcb7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcb80:	6006      	str	r6, [r0, #0]
   bcb82:	60c6      	str	r6, [r0, #12]
   bcb84:	b13c      	cbz	r4, bcb96 <_Bfree+0x3a>
   bcb86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bcb88:	6862      	ldr	r2, [r4, #4]
   bcb8a:	68db      	ldr	r3, [r3, #12]
   bcb8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bcb90:	6021      	str	r1, [r4, #0]
   bcb92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bcb96:	bd70      	pop	{r4, r5, r6, pc}
   bcb98:	000be0a1 	.word	0x000be0a1
   bcb9c:	000be3c4 	.word	0x000be3c4

000bcba0 <__multadd>:
   bcba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcba4:	690d      	ldr	r5, [r1, #16]
   bcba6:	4607      	mov	r7, r0
   bcba8:	460c      	mov	r4, r1
   bcbaa:	461e      	mov	r6, r3
   bcbac:	f101 0c14 	add.w	ip, r1, #20
   bcbb0:	2000      	movs	r0, #0
   bcbb2:	f8dc 3000 	ldr.w	r3, [ip]
   bcbb6:	b299      	uxth	r1, r3
   bcbb8:	fb02 6101 	mla	r1, r2, r1, r6
   bcbbc:	0c1e      	lsrs	r6, r3, #16
   bcbbe:	0c0b      	lsrs	r3, r1, #16
   bcbc0:	fb02 3306 	mla	r3, r2, r6, r3
   bcbc4:	b289      	uxth	r1, r1
   bcbc6:	3001      	adds	r0, #1
   bcbc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bcbcc:	4285      	cmp	r5, r0
   bcbce:	f84c 1b04 	str.w	r1, [ip], #4
   bcbd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bcbd6:	dcec      	bgt.n	bcbb2 <__multadd+0x12>
   bcbd8:	b30e      	cbz	r6, bcc1e <__multadd+0x7e>
   bcbda:	68a3      	ldr	r3, [r4, #8]
   bcbdc:	42ab      	cmp	r3, r5
   bcbde:	dc19      	bgt.n	bcc14 <__multadd+0x74>
   bcbe0:	6861      	ldr	r1, [r4, #4]
   bcbe2:	4638      	mov	r0, r7
   bcbe4:	3101      	adds	r1, #1
   bcbe6:	f7ff ff79 	bl	bcadc <_Balloc>
   bcbea:	4680      	mov	r8, r0
   bcbec:	b928      	cbnz	r0, bcbfa <__multadd+0x5a>
   bcbee:	4602      	mov	r2, r0
   bcbf0:	4b0c      	ldr	r3, [pc, #48]	; (bcc24 <__multadd+0x84>)
   bcbf2:	480d      	ldr	r0, [pc, #52]	; (bcc28 <__multadd+0x88>)
   bcbf4:	21b5      	movs	r1, #181	; 0xb5
   bcbf6:	f7fa f985 	bl	b6f04 <__assert_func>
   bcbfa:	6922      	ldr	r2, [r4, #16]
   bcbfc:	3202      	adds	r2, #2
   bcbfe:	f104 010c 	add.w	r1, r4, #12
   bcc02:	0092      	lsls	r2, r2, #2
   bcc04:	300c      	adds	r0, #12
   bcc06:	f7fe fb90 	bl	bb32a <memcpy>
   bcc0a:	4621      	mov	r1, r4
   bcc0c:	4638      	mov	r0, r7
   bcc0e:	f7ff ffa5 	bl	bcb5c <_Bfree>
   bcc12:	4644      	mov	r4, r8
   bcc14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bcc18:	3501      	adds	r5, #1
   bcc1a:	615e      	str	r6, [r3, #20]
   bcc1c:	6125      	str	r5, [r4, #16]
   bcc1e:	4620      	mov	r0, r4
   bcc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcc24:	000be318 	.word	0x000be318
   bcc28:	000be3c4 	.word	0x000be3c4

000bcc2c <__s2b>:
   bcc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcc30:	460c      	mov	r4, r1
   bcc32:	4615      	mov	r5, r2
   bcc34:	461f      	mov	r7, r3
   bcc36:	2209      	movs	r2, #9
   bcc38:	3308      	adds	r3, #8
   bcc3a:	4606      	mov	r6, r0
   bcc3c:	fb93 f3f2 	sdiv	r3, r3, r2
   bcc40:	2100      	movs	r1, #0
   bcc42:	2201      	movs	r2, #1
   bcc44:	429a      	cmp	r2, r3
   bcc46:	db09      	blt.n	bcc5c <__s2b+0x30>
   bcc48:	4630      	mov	r0, r6
   bcc4a:	f7ff ff47 	bl	bcadc <_Balloc>
   bcc4e:	b940      	cbnz	r0, bcc62 <__s2b+0x36>
   bcc50:	4602      	mov	r2, r0
   bcc52:	4b19      	ldr	r3, [pc, #100]	; (bccb8 <__s2b+0x8c>)
   bcc54:	4819      	ldr	r0, [pc, #100]	; (bccbc <__s2b+0x90>)
   bcc56:	21ce      	movs	r1, #206	; 0xce
   bcc58:	f7fa f954 	bl	b6f04 <__assert_func>
   bcc5c:	0052      	lsls	r2, r2, #1
   bcc5e:	3101      	adds	r1, #1
   bcc60:	e7f0      	b.n	bcc44 <__s2b+0x18>
   bcc62:	9b08      	ldr	r3, [sp, #32]
   bcc64:	6143      	str	r3, [r0, #20]
   bcc66:	2d09      	cmp	r5, #9
   bcc68:	f04f 0301 	mov.w	r3, #1
   bcc6c:	6103      	str	r3, [r0, #16]
   bcc6e:	dd16      	ble.n	bcc9e <__s2b+0x72>
   bcc70:	f104 0909 	add.w	r9, r4, #9
   bcc74:	46c8      	mov	r8, r9
   bcc76:	442c      	add	r4, r5
   bcc78:	f818 3b01 	ldrb.w	r3, [r8], #1
   bcc7c:	4601      	mov	r1, r0
   bcc7e:	3b30      	subs	r3, #48	; 0x30
   bcc80:	220a      	movs	r2, #10
   bcc82:	4630      	mov	r0, r6
   bcc84:	f7ff ff8c 	bl	bcba0 <__multadd>
   bcc88:	45a0      	cmp	r8, r4
   bcc8a:	d1f5      	bne.n	bcc78 <__s2b+0x4c>
   bcc8c:	f1a5 0408 	sub.w	r4, r5, #8
   bcc90:	444c      	add	r4, r9
   bcc92:	1b2d      	subs	r5, r5, r4
   bcc94:	1963      	adds	r3, r4, r5
   bcc96:	42bb      	cmp	r3, r7
   bcc98:	db04      	blt.n	bcca4 <__s2b+0x78>
   bcc9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcc9e:	340a      	adds	r4, #10
   bcca0:	2509      	movs	r5, #9
   bcca2:	e7f6      	b.n	bcc92 <__s2b+0x66>
   bcca4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bcca8:	4601      	mov	r1, r0
   bccaa:	3b30      	subs	r3, #48	; 0x30
   bccac:	220a      	movs	r2, #10
   bccae:	4630      	mov	r0, r6
   bccb0:	f7ff ff76 	bl	bcba0 <__multadd>
   bccb4:	e7ee      	b.n	bcc94 <__s2b+0x68>
   bccb6:	bf00      	nop
   bccb8:	000be318 	.word	0x000be318
   bccbc:	000be3c4 	.word	0x000be3c4

000bccc0 <__hi0bits>:
   bccc0:	0c03      	lsrs	r3, r0, #16
   bccc2:	041b      	lsls	r3, r3, #16
   bccc4:	b9d3      	cbnz	r3, bccfc <__hi0bits+0x3c>
   bccc6:	0400      	lsls	r0, r0, #16
   bccc8:	2310      	movs	r3, #16
   bccca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bccce:	bf04      	itt	eq
   bccd0:	0200      	lsleq	r0, r0, #8
   bccd2:	3308      	addeq	r3, #8
   bccd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bccd8:	bf04      	itt	eq
   bccda:	0100      	lsleq	r0, r0, #4
   bccdc:	3304      	addeq	r3, #4
   bccde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcce2:	bf04      	itt	eq
   bcce4:	0080      	lsleq	r0, r0, #2
   bcce6:	3302      	addeq	r3, #2
   bcce8:	2800      	cmp	r0, #0
   bccea:	db05      	blt.n	bccf8 <__hi0bits+0x38>
   bccec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bccf0:	f103 0301 	add.w	r3, r3, #1
   bccf4:	bf08      	it	eq
   bccf6:	2320      	moveq	r3, #32
   bccf8:	4618      	mov	r0, r3
   bccfa:	4770      	bx	lr
   bccfc:	2300      	movs	r3, #0
   bccfe:	e7e4      	b.n	bccca <__hi0bits+0xa>

000bcd00 <__lo0bits>:
   bcd00:	6803      	ldr	r3, [r0, #0]
   bcd02:	f013 0207 	ands.w	r2, r3, #7
   bcd06:	4601      	mov	r1, r0
   bcd08:	d00b      	beq.n	bcd22 <__lo0bits+0x22>
   bcd0a:	07da      	lsls	r2, r3, #31
   bcd0c:	d423      	bmi.n	bcd56 <__lo0bits+0x56>
   bcd0e:	0798      	lsls	r0, r3, #30
   bcd10:	bf49      	itett	mi
   bcd12:	085b      	lsrmi	r3, r3, #1
   bcd14:	089b      	lsrpl	r3, r3, #2
   bcd16:	2001      	movmi	r0, #1
   bcd18:	600b      	strmi	r3, [r1, #0]
   bcd1a:	bf5c      	itt	pl
   bcd1c:	600b      	strpl	r3, [r1, #0]
   bcd1e:	2002      	movpl	r0, #2
   bcd20:	4770      	bx	lr
   bcd22:	b298      	uxth	r0, r3
   bcd24:	b9a8      	cbnz	r0, bcd52 <__lo0bits+0x52>
   bcd26:	0c1b      	lsrs	r3, r3, #16
   bcd28:	2010      	movs	r0, #16
   bcd2a:	b2da      	uxtb	r2, r3
   bcd2c:	b90a      	cbnz	r2, bcd32 <__lo0bits+0x32>
   bcd2e:	3008      	adds	r0, #8
   bcd30:	0a1b      	lsrs	r3, r3, #8
   bcd32:	071a      	lsls	r2, r3, #28
   bcd34:	bf04      	itt	eq
   bcd36:	091b      	lsreq	r3, r3, #4
   bcd38:	3004      	addeq	r0, #4
   bcd3a:	079a      	lsls	r2, r3, #30
   bcd3c:	bf04      	itt	eq
   bcd3e:	089b      	lsreq	r3, r3, #2
   bcd40:	3002      	addeq	r0, #2
   bcd42:	07da      	lsls	r2, r3, #31
   bcd44:	d403      	bmi.n	bcd4e <__lo0bits+0x4e>
   bcd46:	085b      	lsrs	r3, r3, #1
   bcd48:	f100 0001 	add.w	r0, r0, #1
   bcd4c:	d005      	beq.n	bcd5a <__lo0bits+0x5a>
   bcd4e:	600b      	str	r3, [r1, #0]
   bcd50:	4770      	bx	lr
   bcd52:	4610      	mov	r0, r2
   bcd54:	e7e9      	b.n	bcd2a <__lo0bits+0x2a>
   bcd56:	2000      	movs	r0, #0
   bcd58:	4770      	bx	lr
   bcd5a:	2020      	movs	r0, #32
   bcd5c:	4770      	bx	lr
	...

000bcd60 <__i2b>:
   bcd60:	b510      	push	{r4, lr}
   bcd62:	460c      	mov	r4, r1
   bcd64:	2101      	movs	r1, #1
   bcd66:	f7ff feb9 	bl	bcadc <_Balloc>
   bcd6a:	4602      	mov	r2, r0
   bcd6c:	b928      	cbnz	r0, bcd7a <__i2b+0x1a>
   bcd6e:	4b05      	ldr	r3, [pc, #20]	; (bcd84 <__i2b+0x24>)
   bcd70:	4805      	ldr	r0, [pc, #20]	; (bcd88 <__i2b+0x28>)
   bcd72:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bcd76:	f7fa f8c5 	bl	b6f04 <__assert_func>
   bcd7a:	2301      	movs	r3, #1
   bcd7c:	6144      	str	r4, [r0, #20]
   bcd7e:	6103      	str	r3, [r0, #16]
   bcd80:	bd10      	pop	{r4, pc}
   bcd82:	bf00      	nop
   bcd84:	000be318 	.word	0x000be318
   bcd88:	000be3c4 	.word	0x000be3c4

000bcd8c <__multiply>:
   bcd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd90:	4691      	mov	r9, r2
   bcd92:	690a      	ldr	r2, [r1, #16]
   bcd94:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcd98:	429a      	cmp	r2, r3
   bcd9a:	bfb8      	it	lt
   bcd9c:	460b      	movlt	r3, r1
   bcd9e:	460c      	mov	r4, r1
   bcda0:	bfbc      	itt	lt
   bcda2:	464c      	movlt	r4, r9
   bcda4:	4699      	movlt	r9, r3
   bcda6:	6927      	ldr	r7, [r4, #16]
   bcda8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bcdac:	68a3      	ldr	r3, [r4, #8]
   bcdae:	6861      	ldr	r1, [r4, #4]
   bcdb0:	eb07 060a 	add.w	r6, r7, sl
   bcdb4:	42b3      	cmp	r3, r6
   bcdb6:	b085      	sub	sp, #20
   bcdb8:	bfb8      	it	lt
   bcdba:	3101      	addlt	r1, #1
   bcdbc:	f7ff fe8e 	bl	bcadc <_Balloc>
   bcdc0:	b930      	cbnz	r0, bcdd0 <__multiply+0x44>
   bcdc2:	4602      	mov	r2, r0
   bcdc4:	4b44      	ldr	r3, [pc, #272]	; (bced8 <__multiply+0x14c>)
   bcdc6:	4845      	ldr	r0, [pc, #276]	; (bcedc <__multiply+0x150>)
   bcdc8:	f240 115d 	movw	r1, #349	; 0x15d
   bcdcc:	f7fa f89a 	bl	b6f04 <__assert_func>
   bcdd0:	f100 0514 	add.w	r5, r0, #20
   bcdd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bcdd8:	462b      	mov	r3, r5
   bcdda:	2200      	movs	r2, #0
   bcddc:	4543      	cmp	r3, r8
   bcdde:	d321      	bcc.n	bce24 <__multiply+0x98>
   bcde0:	f104 0314 	add.w	r3, r4, #20
   bcde4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bcde8:	f109 0314 	add.w	r3, r9, #20
   bcdec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bcdf0:	9202      	str	r2, [sp, #8]
   bcdf2:	1b3a      	subs	r2, r7, r4
   bcdf4:	3a15      	subs	r2, #21
   bcdf6:	f022 0203 	bic.w	r2, r2, #3
   bcdfa:	3204      	adds	r2, #4
   bcdfc:	f104 0115 	add.w	r1, r4, #21
   bce00:	428f      	cmp	r7, r1
   bce02:	bf38      	it	cc
   bce04:	2204      	movcc	r2, #4
   bce06:	9201      	str	r2, [sp, #4]
   bce08:	9a02      	ldr	r2, [sp, #8]
   bce0a:	9303      	str	r3, [sp, #12]
   bce0c:	429a      	cmp	r2, r3
   bce0e:	d80c      	bhi.n	bce2a <__multiply+0x9e>
   bce10:	2e00      	cmp	r6, #0
   bce12:	dd03      	ble.n	bce1c <__multiply+0x90>
   bce14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bce18:	2b00      	cmp	r3, #0
   bce1a:	d05a      	beq.n	bced2 <__multiply+0x146>
   bce1c:	6106      	str	r6, [r0, #16]
   bce1e:	b005      	add	sp, #20
   bce20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bce24:	f843 2b04 	str.w	r2, [r3], #4
   bce28:	e7d8      	b.n	bcddc <__multiply+0x50>
   bce2a:	f8b3 a000 	ldrh.w	sl, [r3]
   bce2e:	f1ba 0f00 	cmp.w	sl, #0
   bce32:	d024      	beq.n	bce7e <__multiply+0xf2>
   bce34:	f104 0e14 	add.w	lr, r4, #20
   bce38:	46a9      	mov	r9, r5
   bce3a:	f04f 0c00 	mov.w	ip, #0
   bce3e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bce42:	f8d9 1000 	ldr.w	r1, [r9]
   bce46:	fa1f fb82 	uxth.w	fp, r2
   bce4a:	b289      	uxth	r1, r1
   bce4c:	fb0a 110b 	mla	r1, sl, fp, r1
   bce50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bce54:	f8d9 2000 	ldr.w	r2, [r9]
   bce58:	4461      	add	r1, ip
   bce5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bce5e:	fb0a c20b 	mla	r2, sl, fp, ip
   bce62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bce66:	b289      	uxth	r1, r1
   bce68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bce6c:	4577      	cmp	r7, lr
   bce6e:	f849 1b04 	str.w	r1, [r9], #4
   bce72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bce76:	d8e2      	bhi.n	bce3e <__multiply+0xb2>
   bce78:	9a01      	ldr	r2, [sp, #4]
   bce7a:	f845 c002 	str.w	ip, [r5, r2]
   bce7e:	9a03      	ldr	r2, [sp, #12]
   bce80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bce84:	3304      	adds	r3, #4
   bce86:	f1b9 0f00 	cmp.w	r9, #0
   bce8a:	d020      	beq.n	bcece <__multiply+0x142>
   bce8c:	6829      	ldr	r1, [r5, #0]
   bce8e:	f104 0c14 	add.w	ip, r4, #20
   bce92:	46ae      	mov	lr, r5
   bce94:	f04f 0a00 	mov.w	sl, #0
   bce98:	f8bc b000 	ldrh.w	fp, [ip]
   bce9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bcea0:	fb09 220b 	mla	r2, r9, fp, r2
   bcea4:	4492      	add	sl, r2
   bcea6:	b289      	uxth	r1, r1
   bcea8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bceac:	f84e 1b04 	str.w	r1, [lr], #4
   bceb0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bceb4:	f8be 1000 	ldrh.w	r1, [lr]
   bceb8:	0c12      	lsrs	r2, r2, #16
   bceba:	fb09 1102 	mla	r1, r9, r2, r1
   bcebe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bcec2:	4567      	cmp	r7, ip
   bcec4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bcec8:	d8e6      	bhi.n	bce98 <__multiply+0x10c>
   bceca:	9a01      	ldr	r2, [sp, #4]
   bcecc:	50a9      	str	r1, [r5, r2]
   bcece:	3504      	adds	r5, #4
   bced0:	e79a      	b.n	bce08 <__multiply+0x7c>
   bced2:	3e01      	subs	r6, #1
   bced4:	e79c      	b.n	bce10 <__multiply+0x84>
   bced6:	bf00      	nop
   bced8:	000be318 	.word	0x000be318
   bcedc:	000be3c4 	.word	0x000be3c4

000bcee0 <__pow5mult>:
   bcee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcee4:	4615      	mov	r5, r2
   bcee6:	f012 0203 	ands.w	r2, r2, #3
   bceea:	4606      	mov	r6, r0
   bceec:	460f      	mov	r7, r1
   bceee:	d007      	beq.n	bcf00 <__pow5mult+0x20>
   bcef0:	4c25      	ldr	r4, [pc, #148]	; (bcf88 <__pow5mult+0xa8>)
   bcef2:	3a01      	subs	r2, #1
   bcef4:	2300      	movs	r3, #0
   bcef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bcefa:	f7ff fe51 	bl	bcba0 <__multadd>
   bcefe:	4607      	mov	r7, r0
   bcf00:	10ad      	asrs	r5, r5, #2
   bcf02:	d03d      	beq.n	bcf80 <__pow5mult+0xa0>
   bcf04:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bcf06:	b97c      	cbnz	r4, bcf28 <__pow5mult+0x48>
   bcf08:	2010      	movs	r0, #16
   bcf0a:	f7f9 ffbb 	bl	b6e84 <malloc>
   bcf0e:	4602      	mov	r2, r0
   bcf10:	6270      	str	r0, [r6, #36]	; 0x24
   bcf12:	b928      	cbnz	r0, bcf20 <__pow5mult+0x40>
   bcf14:	4b1d      	ldr	r3, [pc, #116]	; (bcf8c <__pow5mult+0xac>)
   bcf16:	481e      	ldr	r0, [pc, #120]	; (bcf90 <__pow5mult+0xb0>)
   bcf18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bcf1c:	f7f9 fff2 	bl	b6f04 <__assert_func>
   bcf20:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcf24:	6004      	str	r4, [r0, #0]
   bcf26:	60c4      	str	r4, [r0, #12]
   bcf28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bcf2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bcf30:	b94c      	cbnz	r4, bcf46 <__pow5mult+0x66>
   bcf32:	f240 2171 	movw	r1, #625	; 0x271
   bcf36:	4630      	mov	r0, r6
   bcf38:	f7ff ff12 	bl	bcd60 <__i2b>
   bcf3c:	2300      	movs	r3, #0
   bcf3e:	f8c8 0008 	str.w	r0, [r8, #8]
   bcf42:	4604      	mov	r4, r0
   bcf44:	6003      	str	r3, [r0, #0]
   bcf46:	f04f 0900 	mov.w	r9, #0
   bcf4a:	07eb      	lsls	r3, r5, #31
   bcf4c:	d50a      	bpl.n	bcf64 <__pow5mult+0x84>
   bcf4e:	4639      	mov	r1, r7
   bcf50:	4622      	mov	r2, r4
   bcf52:	4630      	mov	r0, r6
   bcf54:	f7ff ff1a 	bl	bcd8c <__multiply>
   bcf58:	4639      	mov	r1, r7
   bcf5a:	4680      	mov	r8, r0
   bcf5c:	4630      	mov	r0, r6
   bcf5e:	f7ff fdfd 	bl	bcb5c <_Bfree>
   bcf62:	4647      	mov	r7, r8
   bcf64:	106d      	asrs	r5, r5, #1
   bcf66:	d00b      	beq.n	bcf80 <__pow5mult+0xa0>
   bcf68:	6820      	ldr	r0, [r4, #0]
   bcf6a:	b938      	cbnz	r0, bcf7c <__pow5mult+0x9c>
   bcf6c:	4622      	mov	r2, r4
   bcf6e:	4621      	mov	r1, r4
   bcf70:	4630      	mov	r0, r6
   bcf72:	f7ff ff0b 	bl	bcd8c <__multiply>
   bcf76:	6020      	str	r0, [r4, #0]
   bcf78:	f8c0 9000 	str.w	r9, [r0]
   bcf7c:	4604      	mov	r4, r0
   bcf7e:	e7e4      	b.n	bcf4a <__pow5mult+0x6a>
   bcf80:	4638      	mov	r0, r7
   bcf82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcf86:	bf00      	nop
   bcf88:	000be538 	.word	0x000be538
   bcf8c:	000be0a1 	.word	0x000be0a1
   bcf90:	000be3c4 	.word	0x000be3c4

000bcf94 <__lshift>:
   bcf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcf98:	460c      	mov	r4, r1
   bcf9a:	6849      	ldr	r1, [r1, #4]
   bcf9c:	6923      	ldr	r3, [r4, #16]
   bcf9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bcfa2:	68a3      	ldr	r3, [r4, #8]
   bcfa4:	4607      	mov	r7, r0
   bcfa6:	4691      	mov	r9, r2
   bcfa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bcfac:	f108 0601 	add.w	r6, r8, #1
   bcfb0:	42b3      	cmp	r3, r6
   bcfb2:	db0b      	blt.n	bcfcc <__lshift+0x38>
   bcfb4:	4638      	mov	r0, r7
   bcfb6:	f7ff fd91 	bl	bcadc <_Balloc>
   bcfba:	4605      	mov	r5, r0
   bcfbc:	b948      	cbnz	r0, bcfd2 <__lshift+0x3e>
   bcfbe:	4602      	mov	r2, r0
   bcfc0:	4b2a      	ldr	r3, [pc, #168]	; (bd06c <__lshift+0xd8>)
   bcfc2:	482b      	ldr	r0, [pc, #172]	; (bd070 <__lshift+0xdc>)
   bcfc4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bcfc8:	f7f9 ff9c 	bl	b6f04 <__assert_func>
   bcfcc:	3101      	adds	r1, #1
   bcfce:	005b      	lsls	r3, r3, #1
   bcfd0:	e7ee      	b.n	bcfb0 <__lshift+0x1c>
   bcfd2:	2300      	movs	r3, #0
   bcfd4:	f100 0114 	add.w	r1, r0, #20
   bcfd8:	f100 0210 	add.w	r2, r0, #16
   bcfdc:	4618      	mov	r0, r3
   bcfde:	4553      	cmp	r3, sl
   bcfe0:	db37      	blt.n	bd052 <__lshift+0xbe>
   bcfe2:	6920      	ldr	r0, [r4, #16]
   bcfe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bcfe8:	f104 0314 	add.w	r3, r4, #20
   bcfec:	f019 091f 	ands.w	r9, r9, #31
   bcff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bcff4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bcff8:	d02f      	beq.n	bd05a <__lshift+0xc6>
   bcffa:	f1c9 0e20 	rsb	lr, r9, #32
   bcffe:	468a      	mov	sl, r1
   bd000:	f04f 0c00 	mov.w	ip, #0
   bd004:	681a      	ldr	r2, [r3, #0]
   bd006:	fa02 f209 	lsl.w	r2, r2, r9
   bd00a:	ea42 020c 	orr.w	r2, r2, ip
   bd00e:	f84a 2b04 	str.w	r2, [sl], #4
   bd012:	f853 2b04 	ldr.w	r2, [r3], #4
   bd016:	4298      	cmp	r0, r3
   bd018:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd01c:	d8f2      	bhi.n	bd004 <__lshift+0x70>
   bd01e:	1b03      	subs	r3, r0, r4
   bd020:	3b15      	subs	r3, #21
   bd022:	f023 0303 	bic.w	r3, r3, #3
   bd026:	3304      	adds	r3, #4
   bd028:	f104 0215 	add.w	r2, r4, #21
   bd02c:	4290      	cmp	r0, r2
   bd02e:	bf38      	it	cc
   bd030:	2304      	movcc	r3, #4
   bd032:	f841 c003 	str.w	ip, [r1, r3]
   bd036:	f1bc 0f00 	cmp.w	ip, #0
   bd03a:	d001      	beq.n	bd040 <__lshift+0xac>
   bd03c:	f108 0602 	add.w	r6, r8, #2
   bd040:	3e01      	subs	r6, #1
   bd042:	4638      	mov	r0, r7
   bd044:	612e      	str	r6, [r5, #16]
   bd046:	4621      	mov	r1, r4
   bd048:	f7ff fd88 	bl	bcb5c <_Bfree>
   bd04c:	4628      	mov	r0, r5
   bd04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd052:	f842 0f04 	str.w	r0, [r2, #4]!
   bd056:	3301      	adds	r3, #1
   bd058:	e7c1      	b.n	bcfde <__lshift+0x4a>
   bd05a:	3904      	subs	r1, #4
   bd05c:	f853 2b04 	ldr.w	r2, [r3], #4
   bd060:	f841 2f04 	str.w	r2, [r1, #4]!
   bd064:	4298      	cmp	r0, r3
   bd066:	d8f9      	bhi.n	bd05c <__lshift+0xc8>
   bd068:	e7ea      	b.n	bd040 <__lshift+0xac>
   bd06a:	bf00      	nop
   bd06c:	000be318 	.word	0x000be318
   bd070:	000be3c4 	.word	0x000be3c4

000bd074 <__mcmp>:
   bd074:	b530      	push	{r4, r5, lr}
   bd076:	6902      	ldr	r2, [r0, #16]
   bd078:	690c      	ldr	r4, [r1, #16]
   bd07a:	1b12      	subs	r2, r2, r4
   bd07c:	d10e      	bne.n	bd09c <__mcmp+0x28>
   bd07e:	f100 0314 	add.w	r3, r0, #20
   bd082:	3114      	adds	r1, #20
   bd084:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd088:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd08c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd090:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd094:	42a5      	cmp	r5, r4
   bd096:	d003      	beq.n	bd0a0 <__mcmp+0x2c>
   bd098:	d305      	bcc.n	bd0a6 <__mcmp+0x32>
   bd09a:	2201      	movs	r2, #1
   bd09c:	4610      	mov	r0, r2
   bd09e:	bd30      	pop	{r4, r5, pc}
   bd0a0:	4283      	cmp	r3, r0
   bd0a2:	d3f3      	bcc.n	bd08c <__mcmp+0x18>
   bd0a4:	e7fa      	b.n	bd09c <__mcmp+0x28>
   bd0a6:	f04f 32ff 	mov.w	r2, #4294967295
   bd0aa:	e7f7      	b.n	bd09c <__mcmp+0x28>

000bd0ac <__mdiff>:
   bd0ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd0b0:	460c      	mov	r4, r1
   bd0b2:	4606      	mov	r6, r0
   bd0b4:	4611      	mov	r1, r2
   bd0b6:	4620      	mov	r0, r4
   bd0b8:	4690      	mov	r8, r2
   bd0ba:	f7ff ffdb 	bl	bd074 <__mcmp>
   bd0be:	1e05      	subs	r5, r0, #0
   bd0c0:	d110      	bne.n	bd0e4 <__mdiff+0x38>
   bd0c2:	4629      	mov	r1, r5
   bd0c4:	4630      	mov	r0, r6
   bd0c6:	f7ff fd09 	bl	bcadc <_Balloc>
   bd0ca:	b930      	cbnz	r0, bd0da <__mdiff+0x2e>
   bd0cc:	4b3a      	ldr	r3, [pc, #232]	; (bd1b8 <__mdiff+0x10c>)
   bd0ce:	4602      	mov	r2, r0
   bd0d0:	f240 2132 	movw	r1, #562	; 0x232
   bd0d4:	4839      	ldr	r0, [pc, #228]	; (bd1bc <__mdiff+0x110>)
   bd0d6:	f7f9 ff15 	bl	b6f04 <__assert_func>
   bd0da:	2301      	movs	r3, #1
   bd0dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd0e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd0e4:	bfa4      	itt	ge
   bd0e6:	4643      	movge	r3, r8
   bd0e8:	46a0      	movge	r8, r4
   bd0ea:	4630      	mov	r0, r6
   bd0ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd0f0:	bfa6      	itte	ge
   bd0f2:	461c      	movge	r4, r3
   bd0f4:	2500      	movge	r5, #0
   bd0f6:	2501      	movlt	r5, #1
   bd0f8:	f7ff fcf0 	bl	bcadc <_Balloc>
   bd0fc:	b920      	cbnz	r0, bd108 <__mdiff+0x5c>
   bd0fe:	4b2e      	ldr	r3, [pc, #184]	; (bd1b8 <__mdiff+0x10c>)
   bd100:	4602      	mov	r2, r0
   bd102:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd106:	e7e5      	b.n	bd0d4 <__mdiff+0x28>
   bd108:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd10c:	6926      	ldr	r6, [r4, #16]
   bd10e:	60c5      	str	r5, [r0, #12]
   bd110:	f104 0914 	add.w	r9, r4, #20
   bd114:	f108 0514 	add.w	r5, r8, #20
   bd118:	f100 0e14 	add.w	lr, r0, #20
   bd11c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd120:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd124:	f108 0210 	add.w	r2, r8, #16
   bd128:	46f2      	mov	sl, lr
   bd12a:	2100      	movs	r1, #0
   bd12c:	f859 3b04 	ldr.w	r3, [r9], #4
   bd130:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd134:	fa1f f883 	uxth.w	r8, r3
   bd138:	fa11 f18b 	uxtah	r1, r1, fp
   bd13c:	0c1b      	lsrs	r3, r3, #16
   bd13e:	eba1 0808 	sub.w	r8, r1, r8
   bd142:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd146:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd14a:	fa1f f888 	uxth.w	r8, r8
   bd14e:	1419      	asrs	r1, r3, #16
   bd150:	454e      	cmp	r6, r9
   bd152:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd156:	f84a 3b04 	str.w	r3, [sl], #4
   bd15a:	d8e7      	bhi.n	bd12c <__mdiff+0x80>
   bd15c:	1b33      	subs	r3, r6, r4
   bd15e:	3b15      	subs	r3, #21
   bd160:	f023 0303 	bic.w	r3, r3, #3
   bd164:	3304      	adds	r3, #4
   bd166:	3415      	adds	r4, #21
   bd168:	42a6      	cmp	r6, r4
   bd16a:	bf38      	it	cc
   bd16c:	2304      	movcc	r3, #4
   bd16e:	441d      	add	r5, r3
   bd170:	4473      	add	r3, lr
   bd172:	469e      	mov	lr, r3
   bd174:	462e      	mov	r6, r5
   bd176:	4566      	cmp	r6, ip
   bd178:	d30e      	bcc.n	bd198 <__mdiff+0xec>
   bd17a:	f10c 0203 	add.w	r2, ip, #3
   bd17e:	1b52      	subs	r2, r2, r5
   bd180:	f022 0203 	bic.w	r2, r2, #3
   bd184:	3d03      	subs	r5, #3
   bd186:	45ac      	cmp	ip, r5
   bd188:	bf38      	it	cc
   bd18a:	2200      	movcc	r2, #0
   bd18c:	441a      	add	r2, r3
   bd18e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd192:	b17b      	cbz	r3, bd1b4 <__mdiff+0x108>
   bd194:	6107      	str	r7, [r0, #16]
   bd196:	e7a3      	b.n	bd0e0 <__mdiff+0x34>
   bd198:	f856 8b04 	ldr.w	r8, [r6], #4
   bd19c:	fa11 f288 	uxtah	r2, r1, r8
   bd1a0:	1414      	asrs	r4, r2, #16
   bd1a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd1a6:	b292      	uxth	r2, r2
   bd1a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd1ac:	f84e 2b04 	str.w	r2, [lr], #4
   bd1b0:	1421      	asrs	r1, r4, #16
   bd1b2:	e7e0      	b.n	bd176 <__mdiff+0xca>
   bd1b4:	3f01      	subs	r7, #1
   bd1b6:	e7ea      	b.n	bd18e <__mdiff+0xe2>
   bd1b8:	000be318 	.word	0x000be318
   bd1bc:	000be3c4 	.word	0x000be3c4

000bd1c0 <__ulp>:
   bd1c0:	b082      	sub	sp, #8
   bd1c2:	ed8d 0b00 	vstr	d0, [sp]
   bd1c6:	9b01      	ldr	r3, [sp, #4]
   bd1c8:	4912      	ldr	r1, [pc, #72]	; (bd214 <__ulp+0x54>)
   bd1ca:	4019      	ands	r1, r3
   bd1cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd1d0:	2900      	cmp	r1, #0
   bd1d2:	dd05      	ble.n	bd1e0 <__ulp+0x20>
   bd1d4:	2200      	movs	r2, #0
   bd1d6:	460b      	mov	r3, r1
   bd1d8:	ec43 2b10 	vmov	d0, r2, r3
   bd1dc:	b002      	add	sp, #8
   bd1de:	4770      	bx	lr
   bd1e0:	4249      	negs	r1, r1
   bd1e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd1e6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd1ea:	f04f 0200 	mov.w	r2, #0
   bd1ee:	f04f 0300 	mov.w	r3, #0
   bd1f2:	da04      	bge.n	bd1fe <__ulp+0x3e>
   bd1f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd1f8:	fa41 f300 	asr.w	r3, r1, r0
   bd1fc:	e7ec      	b.n	bd1d8 <__ulp+0x18>
   bd1fe:	f1a0 0114 	sub.w	r1, r0, #20
   bd202:	291e      	cmp	r1, #30
   bd204:	bfda      	itte	le
   bd206:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd20a:	fa20 f101 	lsrle.w	r1, r0, r1
   bd20e:	2101      	movgt	r1, #1
   bd210:	460a      	mov	r2, r1
   bd212:	e7e1      	b.n	bd1d8 <__ulp+0x18>
   bd214:	7ff00000 	.word	0x7ff00000

000bd218 <__b2d>:
   bd218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd21a:	6905      	ldr	r5, [r0, #16]
   bd21c:	f100 0714 	add.w	r7, r0, #20
   bd220:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd224:	1f2e      	subs	r6, r5, #4
   bd226:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd22a:	4620      	mov	r0, r4
   bd22c:	f7ff fd48 	bl	bccc0 <__hi0bits>
   bd230:	f1c0 0320 	rsb	r3, r0, #32
   bd234:	280a      	cmp	r0, #10
   bd236:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd2b4 <__b2d+0x9c>
   bd23a:	600b      	str	r3, [r1, #0]
   bd23c:	dc14      	bgt.n	bd268 <__b2d+0x50>
   bd23e:	f1c0 0e0b 	rsb	lr, r0, #11
   bd242:	fa24 f10e 	lsr.w	r1, r4, lr
   bd246:	42b7      	cmp	r7, r6
   bd248:	ea41 030c 	orr.w	r3, r1, ip
   bd24c:	bf34      	ite	cc
   bd24e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd252:	2100      	movcs	r1, #0
   bd254:	3015      	adds	r0, #21
   bd256:	fa04 f000 	lsl.w	r0, r4, r0
   bd25a:	fa21 f10e 	lsr.w	r1, r1, lr
   bd25e:	ea40 0201 	orr.w	r2, r0, r1
   bd262:	ec43 2b10 	vmov	d0, r2, r3
   bd266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd268:	42b7      	cmp	r7, r6
   bd26a:	bf3a      	itte	cc
   bd26c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd270:	f1a5 0608 	subcc.w	r6, r5, #8
   bd274:	2100      	movcs	r1, #0
   bd276:	380b      	subs	r0, #11
   bd278:	d017      	beq.n	bd2aa <__b2d+0x92>
   bd27a:	f1c0 0c20 	rsb	ip, r0, #32
   bd27e:	fa04 f500 	lsl.w	r5, r4, r0
   bd282:	42be      	cmp	r6, r7
   bd284:	fa21 f40c 	lsr.w	r4, r1, ip
   bd288:	ea45 0504 	orr.w	r5, r5, r4
   bd28c:	bf8c      	ite	hi
   bd28e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd292:	2400      	movls	r4, #0
   bd294:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd298:	fa01 f000 	lsl.w	r0, r1, r0
   bd29c:	fa24 f40c 	lsr.w	r4, r4, ip
   bd2a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd2a4:	ea40 0204 	orr.w	r2, r0, r4
   bd2a8:	e7db      	b.n	bd262 <__b2d+0x4a>
   bd2aa:	ea44 030c 	orr.w	r3, r4, ip
   bd2ae:	460a      	mov	r2, r1
   bd2b0:	e7d7      	b.n	bd262 <__b2d+0x4a>
   bd2b2:	bf00      	nop
   bd2b4:	3ff00000 	.word	0x3ff00000

000bd2b8 <__d2b>:
   bd2b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd2bc:	4689      	mov	r9, r1
   bd2be:	2101      	movs	r1, #1
   bd2c0:	ec57 6b10 	vmov	r6, r7, d0
   bd2c4:	4690      	mov	r8, r2
   bd2c6:	f7ff fc09 	bl	bcadc <_Balloc>
   bd2ca:	4604      	mov	r4, r0
   bd2cc:	b930      	cbnz	r0, bd2dc <__d2b+0x24>
   bd2ce:	4602      	mov	r2, r0
   bd2d0:	4b25      	ldr	r3, [pc, #148]	; (bd368 <__d2b+0xb0>)
   bd2d2:	4826      	ldr	r0, [pc, #152]	; (bd36c <__d2b+0xb4>)
   bd2d4:	f240 310a 	movw	r1, #778	; 0x30a
   bd2d8:	f7f9 fe14 	bl	b6f04 <__assert_func>
   bd2dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd2e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd2e4:	bb35      	cbnz	r5, bd334 <__d2b+0x7c>
   bd2e6:	2e00      	cmp	r6, #0
   bd2e8:	9301      	str	r3, [sp, #4]
   bd2ea:	d028      	beq.n	bd33e <__d2b+0x86>
   bd2ec:	4668      	mov	r0, sp
   bd2ee:	9600      	str	r6, [sp, #0]
   bd2f0:	f7ff fd06 	bl	bcd00 <__lo0bits>
   bd2f4:	9900      	ldr	r1, [sp, #0]
   bd2f6:	b300      	cbz	r0, bd33a <__d2b+0x82>
   bd2f8:	9a01      	ldr	r2, [sp, #4]
   bd2fa:	f1c0 0320 	rsb	r3, r0, #32
   bd2fe:	fa02 f303 	lsl.w	r3, r2, r3
   bd302:	430b      	orrs	r3, r1
   bd304:	40c2      	lsrs	r2, r0
   bd306:	6163      	str	r3, [r4, #20]
   bd308:	9201      	str	r2, [sp, #4]
   bd30a:	9b01      	ldr	r3, [sp, #4]
   bd30c:	61a3      	str	r3, [r4, #24]
   bd30e:	2b00      	cmp	r3, #0
   bd310:	bf14      	ite	ne
   bd312:	2202      	movne	r2, #2
   bd314:	2201      	moveq	r2, #1
   bd316:	6122      	str	r2, [r4, #16]
   bd318:	b1d5      	cbz	r5, bd350 <__d2b+0x98>
   bd31a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd31e:	4405      	add	r5, r0
   bd320:	f8c9 5000 	str.w	r5, [r9]
   bd324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd328:	f8c8 0000 	str.w	r0, [r8]
   bd32c:	4620      	mov	r0, r4
   bd32e:	b003      	add	sp, #12
   bd330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd338:	e7d5      	b.n	bd2e6 <__d2b+0x2e>
   bd33a:	6161      	str	r1, [r4, #20]
   bd33c:	e7e5      	b.n	bd30a <__d2b+0x52>
   bd33e:	a801      	add	r0, sp, #4
   bd340:	f7ff fcde 	bl	bcd00 <__lo0bits>
   bd344:	9b01      	ldr	r3, [sp, #4]
   bd346:	6163      	str	r3, [r4, #20]
   bd348:	2201      	movs	r2, #1
   bd34a:	6122      	str	r2, [r4, #16]
   bd34c:	3020      	adds	r0, #32
   bd34e:	e7e3      	b.n	bd318 <__d2b+0x60>
   bd350:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd354:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd358:	f8c9 0000 	str.w	r0, [r9]
   bd35c:	6918      	ldr	r0, [r3, #16]
   bd35e:	f7ff fcaf 	bl	bccc0 <__hi0bits>
   bd362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd366:	e7df      	b.n	bd328 <__d2b+0x70>
   bd368:	000be318 	.word	0x000be318
   bd36c:	000be3c4 	.word	0x000be3c4

000bd370 <__ratio>:
   bd370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd374:	4688      	mov	r8, r1
   bd376:	4669      	mov	r1, sp
   bd378:	4681      	mov	r9, r0
   bd37a:	f7ff ff4d 	bl	bd218 <__b2d>
   bd37e:	a901      	add	r1, sp, #4
   bd380:	4640      	mov	r0, r8
   bd382:	ec55 4b10 	vmov	r4, r5, d0
   bd386:	f7ff ff47 	bl	bd218 <__b2d>
   bd38a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd38e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd392:	eba3 0c02 	sub.w	ip, r3, r2
   bd396:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd39a:	1a9b      	subs	r3, r3, r2
   bd39c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd3a0:	ec51 0b10 	vmov	r0, r1, d0
   bd3a4:	2b00      	cmp	r3, #0
   bd3a6:	bfd6      	itet	le
   bd3a8:	460a      	movle	r2, r1
   bd3aa:	462a      	movgt	r2, r5
   bd3ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd3b0:	468b      	mov	fp, r1
   bd3b2:	462f      	mov	r7, r5
   bd3b4:	bfd4      	ite	le
   bd3b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd3ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd3be:	4620      	mov	r0, r4
   bd3c0:	ee10 2a10 	vmov	r2, s0
   bd3c4:	465b      	mov	r3, fp
   bd3c6:	4639      	mov	r1, r7
   bd3c8:	f7fd fd9c 	bl	baf04 <__aeabi_ddiv>
   bd3cc:	ec41 0b10 	vmov	d0, r0, r1
   bd3d0:	b003      	add	sp, #12
   bd3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd3d6 <__copybits>:
   bd3d6:	3901      	subs	r1, #1
   bd3d8:	b570      	push	{r4, r5, r6, lr}
   bd3da:	1149      	asrs	r1, r1, #5
   bd3dc:	6914      	ldr	r4, [r2, #16]
   bd3de:	3101      	adds	r1, #1
   bd3e0:	f102 0314 	add.w	r3, r2, #20
   bd3e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd3e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd3ec:	1f05      	subs	r5, r0, #4
   bd3ee:	42a3      	cmp	r3, r4
   bd3f0:	d30c      	bcc.n	bd40c <__copybits+0x36>
   bd3f2:	1aa3      	subs	r3, r4, r2
   bd3f4:	3b11      	subs	r3, #17
   bd3f6:	f023 0303 	bic.w	r3, r3, #3
   bd3fa:	3211      	adds	r2, #17
   bd3fc:	42a2      	cmp	r2, r4
   bd3fe:	bf88      	it	hi
   bd400:	2300      	movhi	r3, #0
   bd402:	4418      	add	r0, r3
   bd404:	2300      	movs	r3, #0
   bd406:	4288      	cmp	r0, r1
   bd408:	d305      	bcc.n	bd416 <__copybits+0x40>
   bd40a:	bd70      	pop	{r4, r5, r6, pc}
   bd40c:	f853 6b04 	ldr.w	r6, [r3], #4
   bd410:	f845 6f04 	str.w	r6, [r5, #4]!
   bd414:	e7eb      	b.n	bd3ee <__copybits+0x18>
   bd416:	f840 3b04 	str.w	r3, [r0], #4
   bd41a:	e7f4      	b.n	bd406 <__copybits+0x30>

000bd41c <__any_on>:
   bd41c:	f100 0214 	add.w	r2, r0, #20
   bd420:	6900      	ldr	r0, [r0, #16]
   bd422:	114b      	asrs	r3, r1, #5
   bd424:	4298      	cmp	r0, r3
   bd426:	b510      	push	{r4, lr}
   bd428:	db11      	blt.n	bd44e <__any_on+0x32>
   bd42a:	dd0a      	ble.n	bd442 <__any_on+0x26>
   bd42c:	f011 011f 	ands.w	r1, r1, #31
   bd430:	d007      	beq.n	bd442 <__any_on+0x26>
   bd432:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd436:	fa24 f001 	lsr.w	r0, r4, r1
   bd43a:	fa00 f101 	lsl.w	r1, r0, r1
   bd43e:	428c      	cmp	r4, r1
   bd440:	d10b      	bne.n	bd45a <__any_on+0x3e>
   bd442:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd446:	4293      	cmp	r3, r2
   bd448:	d803      	bhi.n	bd452 <__any_on+0x36>
   bd44a:	2000      	movs	r0, #0
   bd44c:	bd10      	pop	{r4, pc}
   bd44e:	4603      	mov	r3, r0
   bd450:	e7f7      	b.n	bd442 <__any_on+0x26>
   bd452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd456:	2900      	cmp	r1, #0
   bd458:	d0f5      	beq.n	bd446 <__any_on+0x2a>
   bd45a:	2001      	movs	r0, #1
   bd45c:	e7f6      	b.n	bd44c <__any_on+0x30>

000bd45e <_calloc_r>:
   bd45e:	b513      	push	{r0, r1, r4, lr}
   bd460:	434a      	muls	r2, r1
   bd462:	4611      	mov	r1, r2
   bd464:	9201      	str	r2, [sp, #4]
   bd466:	f7f9 fd3d 	bl	b6ee4 <_malloc_r>
   bd46a:	4604      	mov	r4, r0
   bd46c:	b118      	cbz	r0, bd476 <_calloc_r+0x18>
   bd46e:	9a01      	ldr	r2, [sp, #4]
   bd470:	2100      	movs	r1, #0
   bd472:	f7fd ff82 	bl	bb37a <memset>
   bd476:	4620      	mov	r0, r4
   bd478:	b002      	add	sp, #8
   bd47a:	bd10      	pop	{r4, pc}
   bd47c:	0000      	movs	r0, r0
	...

000bd480 <nan>:
   bd480:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd488 <nan+0x8>
   bd484:	4770      	bx	lr
   bd486:	bf00      	nop
   bd488:	00000000 	.word	0x00000000
   bd48c:	7ff80000 	.word	0x7ff80000

000bd490 <__ascii_wctomb>:
   bd490:	b149      	cbz	r1, bd4a6 <__ascii_wctomb+0x16>
   bd492:	2aff      	cmp	r2, #255	; 0xff
   bd494:	bf85      	ittet	hi
   bd496:	238a      	movhi	r3, #138	; 0x8a
   bd498:	6003      	strhi	r3, [r0, #0]
   bd49a:	700a      	strbls	r2, [r1, #0]
   bd49c:	f04f 30ff 	movhi.w	r0, #4294967295
   bd4a0:	bf98      	it	ls
   bd4a2:	2001      	movls	r0, #1
   bd4a4:	4770      	bx	lr
   bd4a6:	4608      	mov	r0, r1
   bd4a8:	4770      	bx	lr
	...

000bd4ac <__aeabi_d2lz>:
   bd4ac:	b538      	push	{r3, r4, r5, lr}
   bd4ae:	2200      	movs	r2, #0
   bd4b0:	2300      	movs	r3, #0
   bd4b2:	4604      	mov	r4, r0
   bd4b4:	460d      	mov	r5, r1
   bd4b6:	f7fd fe6d 	bl	bb194 <__aeabi_dcmplt>
   bd4ba:	b928      	cbnz	r0, bd4c8 <__aeabi_d2lz+0x1c>
   bd4bc:	4620      	mov	r0, r4
   bd4be:	4629      	mov	r1, r5
   bd4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd4c4:	f7fd bee2 	b.w	bb28c <__aeabi_d2ulz>
   bd4c8:	4620      	mov	r0, r4
   bd4ca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd4ce:	f7fd fedd 	bl	bb28c <__aeabi_d2ulz>
   bd4d2:	4240      	negs	r0, r0
   bd4d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd4d8:	bd38      	pop	{r3, r4, r5, pc}
   bd4da:	bf00      	nop

000bd4dc <dynalib_user>:
   bd4dc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd4ec:	0000 0000 7270 6369 7365 002f 7325 000a     ....prices/.%s..
   bd4fc:	212c 5700 6961 6974 676e 6620 726f 4220     ,!.Waiting for B
   bd50c:	454c 6c63 6569 746e 6320 6e6f 656e 7463     LEclient connect
   bd51c:	6f69 2e6e 2e2e 4800 6769 6568 7473 7020     ion....Highest p
   bd52c:	6972 6563 6f20 2066 6874 2065 6164 3a79     rice of the day:
   bd53c:	2520 0a66 4c00 776f 7365 2074 7270 6369      %f..Lowest pric
   bd54c:	2065 666f 7420 6568 6420 7961 203a 6625     e of the day: %f
   bd55c:	000a 6f48 7275 2073 666f 7420 6568 6420     ..Hours of the d
   bd56c:	7961 7720 6568 6572 6520 656c 7463 6972     ay where electri
   bd57c:	6963 7974 6920 2073 6977 6874 6e69 6120     city is within a
   bd58c:	6363 7065 6574 2064 6172 676e 3a65 000a     ccepted range:..
   bd59c:	3025 6432 7420 206f 3025 6432 000a 227b     %02d to %02d..{"
   bd5ac:	6857 5f72 6f74 6164 2279 5b3a 2c00 5d00     Whr_today":[.,.]
   bd5bc:	007d 227b 7270 6369 7365 6579 7473 7265     }.{"pricesyester
   bd5cc:	6164 2279 5b3a 2500 322e 666c 7b00 7022     day":[.%.2lf.{"p
   bd5dc:	6972 6563 7473 646f 7961 3a22 005b 227b     ricestoday":[.{"
   bd5ec:	7270 6369 7365 6f74 6f6d 7272 776f 3a22     pricestomorrow":
   bd5fc:	005b 227b 4857 5f72 6579 7473 7265 6164     [.{"WHr_yesterda
   bd60c:	2279 5b3a 7b00 5722 7248 745f 646f 7961     y":[.{"WHr_today
   bd61c:	3a22 005b 6146 6c69 6465 7420 206f 6c61     ":[.Failed to al
   bd62c:	6f6c 6163 6574 6d20 6d65 726f 2079 6f66     locate memory fo
   bd63c:	2072 6f63 7473 795f 7365 6574 6472 7961     r cost_yesterday
   bd64c:	000a 6146 6c69 6465 7420 206f 6c61 6f6c     ..Failed to allo
   bd65c:	6163 6574 6d20 6d65 726f 2079 6f66 2072     cate memory for 
   bd66c:	6f63 7473 745f 646f 7961 000a 6146 6c69     cost_today..Fail
   bd67c:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   bd68c:	6d65 726f 2079 6f66 2072 6f63 7473 745f     emory for cost_t
   bd69c:	6d6f 726f 6f72 0a77 4d00 6d65 726f 2079     omorrow..Memory 
   bd6ac:	6c61 6f6c 6163 6574 2064 6f66 2072 7270     allocated for pr
   bd6bc:	6369 7365 203a 6425 6220 7479 7365 6f20     ices: %d bytes o
   bd6cc:	2066 6f64 6275 656c 0a73 4600 6961 656c     f doubles..Faile
   bd6dc:	2064 6f74 6120 6c6c 636f 7461 2065 656d     d to allocate me
   bd6ec:	6f6d 7972 6620 726f 7720 5f68 6f74 6164     mory for wh_toda
   bd6fc:	0a79 4600 6961 656c 2064 6f74 6120 6c6c     y..Failed to all
   bd70c:	636f 7461 2065 656d 6f6d 7972 6620 726f     ocate memory for
   bd71c:	7720 5f68 6579 7473 7265 6164 0a79 4d00      wh_yesterday..M
   bd72c:	6d65 726f 2079 6c61 6f6c 6163 6574 2064     emory allocated 
   bd73c:	6f66 2072 6877 203a 6425 6220 7479 7365     for wh: %d bytes
   bd74c:	6f20 2066 6e69 7374 000a 6641 6574 2072      of ints..After 
   bd75c:	6c25 0a75 6800 6d6f 6165 7373 7369 6174     %lu..homeassista
   bd76c:	746e 6c2e 636f 6c61 6d00 7471 0074 6552     nt.local.mqtt.Re
   bd77c:	7574 6e72 7620 6c61 6575 203a 6425 4300     turn value: %d.C
   bd78c:	6e6f 656e 7463 6465 7420 206f 514d 5454     onnected to MQTT
   bd79c:	6220 6f72 656b 0a72 6800 6c65 6f6c 7720      broker..hello w
   bd7ac:	726f 646c 7000 776f 7265 672f 7465 7000     orld.power/get.p
   bd7bc:	776f 7265 702f 6972 6563 0073 7543 7272     ower/prices.Curr
   bd7cc:	6e65 2074 4848 4d3a 3a4d 2520 3230 3a64     ent HH:MM: %02d:
   bd7dc:	3025 6432 000a 6c43 6569 746e 6420 7369     %02d..Client dis
   bd7ec:	6f63 6e6e 6365 6574 0a64 7300 6170 6b72     connected..spark
   bd7fc:	6c63 6569 746e 005f 6c43 6569 746e 7220     client_.Client r
   bd80c:	6365 6e6f 656e 7463 6465 000a 207b 7922     econnected..{ "y
   bd81c:	6165 2272 203a 2522 2264 202c 6d22 6e6f     ear": "%d", "mon
   bd82c:	6874 3a22 2522 3230 2264 202c 6422 7961     th":"%02d", "day
   bd83c:	3a22 2220 3025 6432 7d22 6500 706c 6972     ": "%02d"}.elpri
   bd84c:	6573 0072 6e49 7720 726f 0a6b 4300 6568     ser.In work..Che
   bd85c:	7061 6928 6873 2029 6f68 7275 2073 666f     ap(ish) hours of
   bd86c:	7420 6568 6420 7961 203a 2500 3230 2064      the day: .%02d 
   bd87c:	6f74 2520 3230 2c64 0020 6f4c 2077 7270     to %02d, .Low pr
   bd88c:	6369 2065 6f68 7275 0073 5352 4953 253d     ice hours.RSSI=%
   bd89c:	0064 6547 7474 6e69 2067 7270 6369 2065     d.Getting price 
   bd8ac:	6164 6174 6620 726f 7920 7365 6574 6472     data for yesterd
   bd8bc:	7961 000a 6f43 6e75 3174 3a3d 2520 0a64     ay..Count1=: %d.
   bd8cc:	4700 7465 6974 676e 7020 6972 6563 6420     .Getting price d
   bd8dc:	7461 2061 6f66 2072 6f74 6164 0a79 4300     ata for today..C
   bd8ec:	756f 746e 3d32 203a 6425 000a 6854 2065     ount2=: %d..The 
   bd8fc:	7270 6369 7365 6620 726f 7420 6d6f 726f     prices for tomor
   bd90c:	6f72 2076 6977 6c6c 6220 2065 7570 6c6c     rov will be pull
   bd91c:	6465 6120 2074 6425 303a 0a30 5200 6365     ed at %d:00..Rec
   bd92c:	6965 6576 2064 6f70 6577 2f72 6567 0a74     eived power/get.
   bd93c:	7000 776f 7265 7b00 7722 7461 2274 253a     .power.{"watt":%
   bd94c:	7d64 7700 7461 6874 756f 0072 6c62 5f65     d}.watthour.ble_
   bd95c:	6f63 6e6e 6365 6574 0a64 5700 7461 2074     connected..Watt 
   bd96c:	6f6e 0077 4b44 204b 6559 7473 7265 6164     now.DKK Yesterda
   bd97c:	0079 4b44 204b 6f54 6164 0079 4b44 204b     y.DKK Today.DKK 
   bd98c:	6f54 6f6d 7272 776f 5700 7268 5420 646f     Tomorrow.Whr Tod
   bd99c:	7961 5700 7268 5920 7365 6574 6472 7961     ay.Whr Yesterday
   bd9ac:	3100 3239 312e 3836 312e 3031 362e 0000     .192.168.110.6..

000bd9bc <_ZTV5Timer>:
	...
   bd9c4:	43fd 000b 4441 000b 4131 000b 3462 3532     .C..AD..1A..b425
   bd9d4:	3430 3530 662d 3462 2d62 3734 3634 622d     0405-fb4b-4746-b
   bd9e4:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bd9f4:	6200 3234 3035 3034 2d34 6266 6234 342d     .b4250404-fb4b-4
   bda04:	3437 2d36 3262 3062 392d 6633 6530 3136     746-b2b0-93f0e61
   bda14:	3231 6332 0036 3462 3532 3430 3330 662d     122c6.b4250403-f
   bda24:	3462 2d62 3734 3634 622d 6232 2d30 3339     b4b-4746-b2b0-93
   bda34:	3066 3665 3131 3232 3663 6200 3234 3035     f0e61122c6.b4250
   bda44:	3034 2d32 6266 6234 342d 3437 2d36 3262     402-fb4b-4746-b2
   bda54:	3062 392d 6633 6530 3136 3231 6332 0036     b0-93f0e61122c6.
   bda64:	3462 3532 3430 3630 662d 3462 2d62 3734     b4250406-fb4b-47
   bda74:	3634 622d 6232 2d30 3339 3066 3665 3131     46-b2b0-93f0e611
   bda84:	3232 3663 6200 3234 3035 3034 2d31 6266     22c6.b4250401-fb
   bda94:	6234 342d 3437 2d36 3262 3062 392d 6633     4b-4746-b2b0-93f
   bdaa4:	6530 3136 3231 6332 0036 6633 6131 3531     0e61122c6.3f1a15
   bdab4:	3639 652d 3765 2d66 3234 6462 382d 6434     96-ee7f-42bd-84d
   bdac4:	2d31 3162 3261 3439 3866 6532 6663 4100     1-b1a294f82ecf.A
   bdad4:	6772 6e6f 4d50 0000 4d04 5451 0454 0600     rgonPM...MQTT...
   bdae4:	514d 7349 7064 4203 6765 6e69 4d20 6c75     MQIsdp.Begin Mul
   bdaf4:	6974 6163 7473 4f00 7475 6f20 2066 656d     ticast.Out of me
   bdb04:	6f6d 7972 6e00 746f 7620 6c61 6469 0000     mory.not valid..

000bdb14 <_ZTVN5spark13EthernetClassE>:
	...
   bdb1c:	6f93 000b 6f89 000b 6f7f 000b 6f75 000b     .o...o...o..uo..
   bdb2c:	6f69 000b 6f5d 000b a449 000b a451 000b     io..]o..I...Q...
   bdb3c:	6f51 000b 6f49 000b 6f3f 000b 6f35 000b     Qo..Io..?o..5o..
   bdb4c:	a481 000b                                   ....

000bdb50 <_ZTV3UDP>:
	...
   bdb58:	7785 000b 77a9 000b 718d 000b 72b5 000b     .w...w...q...r..
   bdb68:	7145 000b 71a5 000b 71c3 000b 71dd 000b     Eq...q...q...q..
   bdb78:	7201 000b 7299 000b 7573 000b 7339 000b     .r...r..su..9s..
   bdb88:	7491 000b 712d 000b 7715 000b 7419 000b     .t..-q...w...t..
   bdb98:	714d 000b 7743 000b 72df 000b 713b 000b     Mq..Cw...r..;q..
   bdba8:	7371 000b 7141 000b 71df 000b fff0 ffff     qs..Aq...q......
   bdbb8:	0000 0000 71f9 000b                         .....q..

000bdbc0 <_ZTV21StringPrintableHelper>:
	...
   bdbc8:	7801 000b 7803 000b 7a0f 000b 79bf 000b     .x...x...z...y..
   bdbd8:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   bdbe8:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   bdbf8:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   bdc08:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   bdc18:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   bdc28:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   bdc38:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   bdc48:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   bdc58:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   bdc68:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   bdc78:	206f 7061 6570 646e 7020 6565 2072 6543     o append peer Ce
   bdc88:	746e 6172 206c 6564 6976 6563 002e 6f43     ntral device..Co
   bdc98:	6e6e 6365 6574 2064 7962 4320 6e65 7274     nnected by Centr
   bdca8:	6c61 6420 7665 6369 2e65 4400 7369 6f63     al device..Disco
   bdcb8:	6e6e 6365 6574 2064 7962 7220 6d65 746f     nnected by remot
   bdcc8:	2065 6564 6976 6563 002e 7544 6c70 6369     e device..Duplic
   bdcd8:	7461 6465 6320 6168 6172 7463 7265 7369     ated characteris
   bdce8:	6974 2063 6163 6e6e 746f 6220 2065 6461     tic cannot be ad
   bdcf8:	6564 2e64 4600 6961 656c 2064 6f74 6120     ded..Failed to a
   bdd08:	7070 6e65 2064 6f6c 6163 206c 6863 7261     ppend local char
   bdd18:	6361 6574 6972 7473 6369 002e               acteristic..

000bdd24 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd2c:	7abb 000b 7b1d 000b 7c3d 000b 7b47 000b     .z...{..=|..G{..
   bdd3c:	7abd 000b                                   .z..

000bdd40 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd48:	7ab7 000b 7b2b 000b 7ab9 000b 7b4d 000b     .z..+{...z..M{..
   bdd58:	7add 000b                                   .z..

000bdd5c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd64:	7ab5 000b 7b39 000b 83fd 000b 7b53 000b     .z..9{......S{..
   bdd74:	7afd 000b                                   .z..

000bdd78 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bdd84:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bdd96 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bdd96:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bdda6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bdda6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bddb6:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bddc6:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bddd8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdde0:	9349 000b 934f 000b 938d 000b 935d 000b     I...O.......]...
   bddf0:	934b 000b                                   K...

000bddf4 <_ZTV9IPAddress>:
	...
   bddfc:	9889 000b 9879 000b 987b 000b               ....y...{...

000bde08 <_ZTV9USBSerial>:
	...
   bde10:	99c3 000b 9a2b 000b 9a01 000b 8ecd 000b     ....+...........
   bde20:	99f3 000b 99c5 000b 99d5 000b 9a25 000b     ............%...
   bde30:	99e5 000b 99bd 000b                         ........

000bde38 <_ZTV11USARTSerial>:
	...
   bde40:	9b15 000b 9b81 000b 9b59 000b 8ecd 000b     ........Y.......
   bde50:	9b29 000b 9b45 000b 9b37 000b 9b53 000b     )...E...7...S...
   bde60:	9b17 000b 9b1b 000b                         ........

000bde68 <_ZTV7TwoWire>:
	...
   bde70:	9be1 000b 9c2b 000b 9c03 000b 9be3 000b     ....+...........
   bde80:	9c0b 000b 9c13 000b 9c1b 000b 9c23 000b     ............#...
   bde90:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bdea0:	2072 203d 6425 0000                         r = %d..

000bdea8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdeb0:	9cf9 000b 9d1d 000b a207 000b 9d2b 000b     ............+...
   bdec0:	9cfd 000b                                   ....

000bdec4 <_ZTV9TCPClient>:
	...
   bdecc:	91d9 000b 91f1 000b 9c75 000b 9c8f 000b     ........u.......
   bdedc:	a09d 000b 9cb9 000b 9f13 000b 9ced 000b     ................
   bdeec:	9fa5 000b 9de5 000b 9f41 000b a151 000b     ........A...Q...
   bdefc:	9ee1 000b 9cef 000b 9ca1 000b 9d31 000b     ............1...
   bdf0c:	9dc5 000b                                   ....

000bdf10 <_ZTVN5spark9WiFiClassE>:
	...
   bdf18:	a27f 000b a275 000b a26b 000b a213 000b     ....u...k.......
   bdf28:	a25f 000b a253 000b a449 000b a451 000b     _...S...I...Q...
   bdf38:	a247 000b a23f 000b a235 000b a22b 000b     G...?...5...+...
   bdf48:	a481 000b                                   ....

000bdf4c <_ZTV10WiFiSignal>:
	...
   bdf54:	a20d 000b a21d 000b a20f 000b a289 000b     ................
   bdf64:	a2bd 000b a2e9 000b a31d 000b               ............

000bdf70 <_ZTVN5spark12NetworkClassE>:
	...
   bdf78:	a409 000b a413 000b a41d 000b a427 000b     ............'...
   bdf88:	a431 000b a43d 000b a449 000b a451 000b     1...=...I...Q...
   bdf98:	a459 000b a465 000b a46d 000b a477 000b     Y...e...m...w...
   bdfa8:	a481 000b                                   ....

000bdfac <_ZSt7nothrow>:
	...

000bdfad <_ZTSSt19_Sp_make_shared_tag>:
   bdfad:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdfbd:	6572 5f64 6174 0067 0000                     red_tag....

000bdfc8 <_ZTISt19_Sp_make_shared_tag>:
   bdfc8:	e008 000b dfad 000b                         ........

000bdfd0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdfd0:	e068 000b dfdc 000b e08c 000b               h...........

000bdfdc <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdfdc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bdfec:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bdffc:	0045 0000                                   E...

000be000 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be000:	0000 0000 dfd0 000b a761 000b a775 000b     ........a...u...
   be010:	a909 000b a909 000b a7df 000b a721 000b     ............!...
   be020:	a7c7 000b a789 000b a753 000b               ........S...

000be02c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be02c:	e068 000b e038 000b dfd0 000b               h...8.......

000be038 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be038:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be048:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be058:	666e 456f 0000 0000                         nfoE....

000be060 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be060:	0000 0000 e02c 000b a809 000b a81d 000b     ....,...........
   be070:	a909 000b a909 000b a7df 000b a721 000b     ............!...
   be080:	a8dd 000b a869 000b a831 000b               ....i...1...

000be08c <_ZTISt9type_info>:
   be08c:	e008 000b e094 000b                         ........

000be094 <_ZTSSt9type_info>:
   be094:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be0a4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be0b4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   be0c4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   be0d4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   be0e4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   be0f4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   be104:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   be114:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   be124:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   be134:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000be144 <fpi.1>:
   be144:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be154:	0000 0000                                   ....

000be158 <fpinan.0>:
   be158:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000be170 <tinytens>:
   be170:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be180:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be190:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   be1a0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   be1b0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   be1c0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   be1d0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   be1e0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   be1f0:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   be200:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   be210:	7472 6b6f 632e                               rtok.c.

000be217 <_ctype_>:
   be217:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be227:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be237:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be247:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be257:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be267:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be277:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be287:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be297:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   be317:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   be327:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   be337:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   be347:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   be357:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   be367:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   be377:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   be387:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   be397:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   be3a7:	6874 7865 632e 0000                          thex.c...

000be3b0 <_C_numeric_locale>:
   be3b0:	d521 000b d928 000b d98c 2003 0043 4f50     !...(...... C.PO
   be3c0:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   be3d0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   be3e0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   be3f0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   be400:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   be410:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   be420:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   be430:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   be440:	0063 0000 0000 0000                         c.......

000be448 <__mprec_bigtens>:
   be448:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   be458:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   be468:	bf3c 7f73 4fdd 7515                         <.s..O.u

000be470 <__mprec_tens>:
   be470:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   be480:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   be490:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   be4a0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   be4b0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   be4c0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   be4d0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   be4e0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   be4f0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be500:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be510:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be520:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be530:	9db4 79d9 7843 44ea                         ...yCx.D

000be538 <p05.0>:
   be538:	0005 0000 0019 0000 007d 0000               ........}...

000be544 <link_const_variable_data_end>:
   be544:	000b5195 	.word	0x000b5195
   be548:	000b679d 	.word	0x000b679d
   be54c:	000b6f9d 	.word	0x000b6f9d
   be550:	000b6fe9 	.word	0x000b6fe9
   be554:	000b8ebd 	.word	0x000b8ebd
   be558:	000b8fed 	.word	0x000b8fed
   be55c:	000b91bd 	.word	0x000b91bd
   be560:	000b9205 	.word	0x000b9205
   be564:	000ba3f5 	.word	0x000ba3f5
   be568:	000ba559 	.word	0x000ba559

000be56c <link_constructors_end>:
   be56c:	00000000 	.word	0x00000000
=======
   b8ab8:	4770      	bx	lr
	...

000b8abc <_Z17acquireWireBufferv>:
{
   b8abc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8abe:	4b0a      	ldr	r3, [pc, #40]	; (b8ae8 <_Z17acquireWireBufferv+0x2c>)
   b8ac0:	6003      	str	r3, [r0, #0]
   b8ac2:	2301      	movs	r3, #1
{
   b8ac4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8ac6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8ac8:	4908      	ldr	r1, [pc, #32]	; (b8aec <_Z17acquireWireBufferv+0x30>)
   b8aca:	2020      	movs	r0, #32
   b8acc:	f000 f834 	bl	b8b38 <_ZnajRKSt9nothrow_t>
	};
   b8ad0:	2520      	movs	r5, #32
   b8ad2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8ad4:	4905      	ldr	r1, [pc, #20]	; (b8aec <_Z17acquireWireBufferv+0x30>)
	};
   b8ad6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8ad8:	4628      	mov	r0, r5
   b8ada:	f000 f82d 	bl	b8b38 <_ZnajRKSt9nothrow_t>
	};
   b8ade:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8ae2:	4620      	mov	r0, r4
   b8ae4:	bd38      	pop	{r3, r4, r5, pc}
   b8ae6:	bf00      	nop
   b8ae8:	00010018 	.word	0x00010018
   b8aec:	000bc214 	.word	0x000bc214

000b8af0 <_Z19__fetch_global_Wirev>:
{
   b8af0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8af2:	4d0e      	ldr	r5, [pc, #56]	; (b8b2c <_Z19__fetch_global_Wirev+0x3c>)
   b8af4:	7829      	ldrb	r1, [r5, #0]
   b8af6:	f3bf 8f5b 	dmb	ish
   b8afa:	f011 0401 	ands.w	r4, r1, #1
{
   b8afe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8b00:	d111      	bne.n	b8b26 <_Z19__fetch_global_Wirev+0x36>
   b8b02:	4628      	mov	r0, r5
   b8b04:	f7fb facd 	bl	b40a2 <__cxa_guard_acquire>
   b8b08:	b168      	cbz	r0, b8b26 <_Z19__fetch_global_Wirev+0x36>
   b8b0a:	4668      	mov	r0, sp
   b8b0c:	f7ff ffd6 	bl	b8abc <_Z17acquireWireBufferv>
   b8b10:	466a      	mov	r2, sp
   b8b12:	4621      	mov	r1, r4
   b8b14:	4806      	ldr	r0, [pc, #24]	; (b8b30 <_Z19__fetch_global_Wirev+0x40>)
   b8b16:	f7ff fd73 	bl	b8600 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8b1a:	4628      	mov	r0, r5
   b8b1c:	f7fb fac6 	bl	b40ac <__cxa_guard_release>
   b8b20:	4804      	ldr	r0, [pc, #16]	; (b8b34 <_Z19__fetch_global_Wirev+0x44>)
   b8b22:	f000 fde9 	bl	b96f8 <atexit>
	return wire;
}
   b8b26:	4802      	ldr	r0, [pc, #8]	; (b8b30 <_Z19__fetch_global_Wirev+0x40>)
   b8b28:	b007      	add	sp, #28
   b8b2a:	bd30      	pop	{r4, r5, pc}
   b8b2c:	2003e748 	.word	0x2003e748
   b8b30:	2003e74c 	.word	0x2003e74c
   b8b34:	000b8ab9 	.word	0x000b8ab9

000b8b38 <_ZnajRKSt9nothrow_t>:
   b8b38:	f7fb baaf 	b.w	b409a <_Znaj>

000b8b3c <_ZSt25__throw_bad_function_callv>:
   b8b3c:	b508      	push	{r3, lr}
   b8b3e:	f7fc ffe3 	bl	b5b08 <abort>
	...

000b8b44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8b44:	4901      	ldr	r1, [pc, #4]	; (b8b4c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8b46:	f000 b8f9 	b.w	b8d3c <_ZNKSt9type_infoeqERKS_>
   b8b4a:	bf00      	nop
   b8b4c:	000bc230 	.word	0x000bc230

000b8b50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8b50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8b52:	2400      	movs	r4, #0
   b8b54:	2310      	movs	r3, #16
   b8b56:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8b5a:	6803      	ldr	r3, [r0, #0]
   b8b5c:	4615      	mov	r5, r2
   b8b5e:	699e      	ldr	r6, [r3, #24]
   b8b60:	6812      	ldr	r2, [r2, #0]
   b8b62:	466b      	mov	r3, sp
   b8b64:	e9cd 4400 	strd	r4, r4, [sp]
   b8b68:	47b0      	blx	r6
   b8b6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8b6e:	f003 0306 	and.w	r3, r3, #6
   b8b72:	2b06      	cmp	r3, #6
   b8b74:	bf03      	ittte	eq
   b8b76:	9b00      	ldreq	r3, [sp, #0]
   b8b78:	602b      	streq	r3, [r5, #0]
   b8b7a:	2001      	moveq	r0, #1
   b8b7c:	4620      	movne	r0, r4
   b8b7e:	b004      	add	sp, #16
   b8b80:	bd70      	pop	{r4, r5, r6, pc}

000b8b82 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8b82:	9800      	ldr	r0, [sp, #0]
   b8b84:	4290      	cmp	r0, r2
   b8b86:	bf14      	ite	ne
   b8b88:	2001      	movne	r0, #1
   b8b8a:	2006      	moveq	r0, #6
   b8b8c:	4770      	bx	lr
	...

000b8b90 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8b90:	b510      	push	{r4, lr}
   b8b92:	4b03      	ldr	r3, [pc, #12]	; (b8ba0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8b94:	6003      	str	r3, [r0, #0]
   b8b96:	4604      	mov	r4, r0
   b8b98:	f000 f8cd 	bl	b8d36 <_ZNSt9type_infoD1Ev>
   b8b9c:	4620      	mov	r0, r4
   b8b9e:	bd10      	pop	{r4, pc}
   b8ba0:	000bc270 	.word	0x000bc270

000b8ba4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8ba4:	b510      	push	{r4, lr}
   b8ba6:	4604      	mov	r4, r0
   b8ba8:	f7ff fff2 	bl	b8b90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8bac:	4620      	mov	r0, r4
   b8bae:	2108      	movs	r1, #8
   b8bb0:	f7fb fa75 	bl	b409e <_ZdlPvj>
   b8bb4:	4620      	mov	r0, r4
   b8bb6:	bd10      	pop	{r4, pc}

000b8bb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8bbc:	461f      	mov	r7, r3
   b8bbe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8bc2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8bc6:	4598      	cmp	r8, r3
   b8bc8:	4606      	mov	r6, r0
   b8bca:	4615      	mov	r5, r2
   b8bcc:	d107      	bne.n	b8bde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8bce:	9907      	ldr	r1, [sp, #28]
   b8bd0:	f000 f8b4 	bl	b8d3c <_ZNKSt9type_infoeqERKS_>
   b8bd4:	b118      	cbz	r0, b8bde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8bd6:	7165      	strb	r5, [r4, #5]
   b8bd8:	2000      	movs	r0, #0
   b8bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8bde:	4639      	mov	r1, r7
   b8be0:	4630      	mov	r0, r6
   b8be2:	f000 f8ab 	bl	b8d3c <_ZNKSt9type_infoeqERKS_>
   b8be6:	2800      	cmp	r0, #0
   b8be8:	d0f6      	beq.n	b8bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8bea:	2301      	movs	r3, #1
   b8bec:	f8c4 8000 	str.w	r8, [r4]
   b8bf0:	7125      	strb	r5, [r4, #4]
   b8bf2:	71a3      	strb	r3, [r4, #6]
   b8bf4:	e7f0      	b.n	b8bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8bf6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8bf6:	b538      	push	{r3, r4, r5, lr}
   b8bf8:	4615      	mov	r5, r2
   b8bfa:	461c      	mov	r4, r3
   b8bfc:	f000 f89e 	bl	b8d3c <_ZNKSt9type_infoeqERKS_>
   b8c00:	b120      	cbz	r0, b8c0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8c02:	2308      	movs	r3, #8
   b8c04:	60e3      	str	r3, [r4, #12]
   b8c06:	2306      	movs	r3, #6
   b8c08:	6025      	str	r5, [r4, #0]
   b8c0a:	7123      	strb	r3, [r4, #4]
   b8c0c:	bd38      	pop	{r3, r4, r5, pc}

000b8c0e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c10:	4605      	mov	r5, r0
   b8c12:	460c      	mov	r4, r1
   b8c14:	9201      	str	r2, [sp, #4]
   b8c16:	461e      	mov	r6, r3
   b8c18:	f000 f890 	bl	b8d3c <_ZNKSt9type_infoeqERKS_>
   b8c1c:	b950      	cbnz	r0, b8c34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8c1e:	2e03      	cmp	r6, #3
   b8c20:	d808      	bhi.n	b8c34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8c22:	6823      	ldr	r3, [r4, #0]
   b8c24:	9a01      	ldr	r2, [sp, #4]
   b8c26:	695b      	ldr	r3, [r3, #20]
   b8c28:	4629      	mov	r1, r5
   b8c2a:	4620      	mov	r0, r4
   b8c2c:	b002      	add	sp, #8
   b8c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8c32:	4718      	bx	r3
   b8c34:	b002      	add	sp, #8
   b8c36:	bd70      	pop	{r4, r5, r6, pc}

000b8c38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8c38:	b510      	push	{r4, lr}
   b8c3a:	4b03      	ldr	r3, [pc, #12]	; (b8c48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8c3c:	6003      	str	r3, [r0, #0]
   b8c3e:	4604      	mov	r4, r0
   b8c40:	f7ff ffa6 	bl	b8b90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8c44:	4620      	mov	r0, r4
   b8c46:	bd10      	pop	{r4, pc}
   b8c48:	000bc2d0 	.word	0x000bc2d0

000b8c4c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8c4c:	b510      	push	{r4, lr}
   b8c4e:	4604      	mov	r4, r0
   b8c50:	f7ff fff2 	bl	b8c38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8c54:	4620      	mov	r0, r4
   b8c56:	210c      	movs	r1, #12
   b8c58:	f7fb fa21 	bl	b409e <_ZdlPvj>
   b8c5c:	4620      	mov	r0, r4
   b8c5e:	bd10      	pop	{r4, pc}

000b8c60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8c62:	9f08      	ldr	r7, [sp, #32]
   b8c64:	4297      	cmp	r7, r2
   b8c66:	4605      	mov	r5, r0
   b8c68:	460e      	mov	r6, r1
   b8c6a:	4614      	mov	r4, r2
   b8c6c:	d00a      	beq.n	b8c84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8c6e:	68a8      	ldr	r0, [r5, #8]
   b8c70:	6802      	ldr	r2, [r0, #0]
   b8c72:	9708      	str	r7, [sp, #32]
   b8c74:	6a15      	ldr	r5, [r2, #32]
   b8c76:	4631      	mov	r1, r6
   b8c78:	4622      	mov	r2, r4
   b8c7a:	46ac      	mov	ip, r5
   b8c7c:	b003      	add	sp, #12
   b8c7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8c82:	4760      	bx	ip
   b8c84:	4619      	mov	r1, r3
   b8c86:	9301      	str	r3, [sp, #4]
   b8c88:	f000 f858 	bl	b8d3c <_ZNKSt9type_infoeqERKS_>
   b8c8c:	9b01      	ldr	r3, [sp, #4]
   b8c8e:	2800      	cmp	r0, #0
   b8c90:	d0ed      	beq.n	b8c6e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8c92:	2006      	movs	r0, #6
   b8c94:	b003      	add	sp, #12
   b8c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8c98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8c98:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c9c:	460d      	mov	r5, r1
   b8c9e:	4619      	mov	r1, r3
   b8ca0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8ca4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8ca8:	4681      	mov	r9, r0
   b8caa:	4617      	mov	r7, r2
   b8cac:	4698      	mov	r8, r3
   b8cae:	f000 f845 	bl	b8d3c <_ZNKSt9type_infoeqERKS_>
   b8cb2:	b190      	cbz	r0, b8cda <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8cb4:	2d00      	cmp	r5, #0
   b8cb6:	6034      	str	r4, [r6, #0]
   b8cb8:	7137      	strb	r7, [r6, #4]
   b8cba:	db09      	blt.n	b8cd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8cbc:	1961      	adds	r1, r4, r5
   b8cbe:	458a      	cmp	sl, r1
   b8cc0:	bf0c      	ite	eq
   b8cc2:	2106      	moveq	r1, #6
   b8cc4:	2101      	movne	r1, #1
   b8cc6:	71b1      	strb	r1, [r6, #6]
   b8cc8:	2000      	movs	r0, #0
   b8cca:	b001      	add	sp, #4
   b8ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8cd0:	3502      	adds	r5, #2
   b8cd2:	d1f9      	bne.n	b8cc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8cd4:	2301      	movs	r3, #1
   b8cd6:	71b3      	strb	r3, [r6, #6]
   b8cd8:	e7f6      	b.n	b8cc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8cda:	4554      	cmp	r4, sl
   b8cdc:	d106      	bne.n	b8cec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8cde:	4659      	mov	r1, fp
   b8ce0:	4648      	mov	r0, r9
   b8ce2:	f000 f82b 	bl	b8d3c <_ZNKSt9type_infoeqERKS_>
   b8ce6:	b108      	cbz	r0, b8cec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8ce8:	7177      	strb	r7, [r6, #5]
   b8cea:	e7ed      	b.n	b8cc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8cec:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8cf0:	6803      	ldr	r3, [r0, #0]
   b8cf2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8cf6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8cfa:	69dc      	ldr	r4, [r3, #28]
   b8cfc:	463a      	mov	r2, r7
   b8cfe:	4643      	mov	r3, r8
   b8d00:	4629      	mov	r1, r5
   b8d02:	46a4      	mov	ip, r4
   b8d04:	b001      	add	sp, #4
   b8d06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d0a:	4760      	bx	ip

000b8d0c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8d10:	4607      	mov	r7, r0
   b8d12:	460c      	mov	r4, r1
   b8d14:	4615      	mov	r5, r2
   b8d16:	461e      	mov	r6, r3
   b8d18:	f7ff ff6d 	bl	b8bf6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8d1c:	b948      	cbnz	r0, b8d32 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8d1e:	68b8      	ldr	r0, [r7, #8]
   b8d20:	6803      	ldr	r3, [r0, #0]
   b8d22:	699f      	ldr	r7, [r3, #24]
   b8d24:	462a      	mov	r2, r5
   b8d26:	4633      	mov	r3, r6
   b8d28:	4621      	mov	r1, r4
   b8d2a:	46bc      	mov	ip, r7
   b8d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8d30:	4760      	bx	ip
   b8d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8d36 <_ZNSt9type_infoD1Ev>:
   b8d36:	4770      	bx	lr

000b8d38 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8d38:	2000      	movs	r0, #0
   b8d3a:	4770      	bx	lr

000b8d3c <_ZNKSt9type_infoeqERKS_>:
   b8d3c:	4281      	cmp	r1, r0
   b8d3e:	b508      	push	{r3, lr}
   b8d40:	d00e      	beq.n	b8d60 <_ZNKSt9type_infoeqERKS_+0x24>
   b8d42:	6840      	ldr	r0, [r0, #4]
   b8d44:	7803      	ldrb	r3, [r0, #0]
   b8d46:	2b2a      	cmp	r3, #42	; 0x2a
   b8d48:	d00c      	beq.n	b8d64 <_ZNKSt9type_infoeqERKS_+0x28>
   b8d4a:	6849      	ldr	r1, [r1, #4]
   b8d4c:	780b      	ldrb	r3, [r1, #0]
   b8d4e:	2b2a      	cmp	r3, #42	; 0x2a
   b8d50:	bf08      	it	eq
   b8d52:	3101      	addeq	r1, #1
   b8d54:	f000 fd5b 	bl	b980e <strcmp>
   b8d58:	fab0 f080 	clz	r0, r0
   b8d5c:	0940      	lsrs	r0, r0, #5
   b8d5e:	bd08      	pop	{r3, pc}
   b8d60:	2001      	movs	r0, #1
   b8d62:	e7fc      	b.n	b8d5e <_ZNKSt9type_infoeqERKS_+0x22>
   b8d64:	2000      	movs	r0, #0
   b8d66:	e7fa      	b.n	b8d5e <_ZNKSt9type_infoeqERKS_+0x22>

000b8d68 <__aeabi_drsub>:
   b8d68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8d6c:	e002      	b.n	b8d74 <__adddf3>
   b8d6e:	bf00      	nop

000b8d70 <__aeabi_dsub>:
   b8d70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8d74 <__adddf3>:
   b8d74:	b530      	push	{r4, r5, lr}
   b8d76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8d7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8d7e:	ea94 0f05 	teq	r4, r5
   b8d82:	bf08      	it	eq
   b8d84:	ea90 0f02 	teqeq	r0, r2
   b8d88:	bf1f      	itttt	ne
   b8d8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8d8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8d92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8d96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8d9a:	f000 80e2 	beq.w	b8f62 <__adddf3+0x1ee>
   b8d9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8da2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8da6:	bfb8      	it	lt
   b8da8:	426d      	neglt	r5, r5
   b8daa:	dd0c      	ble.n	b8dc6 <__adddf3+0x52>
   b8dac:	442c      	add	r4, r5
   b8dae:	ea80 0202 	eor.w	r2, r0, r2
   b8db2:	ea81 0303 	eor.w	r3, r1, r3
   b8db6:	ea82 0000 	eor.w	r0, r2, r0
   b8dba:	ea83 0101 	eor.w	r1, r3, r1
   b8dbe:	ea80 0202 	eor.w	r2, r0, r2
   b8dc2:	ea81 0303 	eor.w	r3, r1, r3
   b8dc6:	2d36      	cmp	r5, #54	; 0x36
   b8dc8:	bf88      	it	hi
   b8dca:	bd30      	pophi	{r4, r5, pc}
   b8dcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8dd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8dd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8dd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8ddc:	d002      	beq.n	b8de4 <__adddf3+0x70>
   b8dde:	4240      	negs	r0, r0
   b8de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8de4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8de8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8dec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8df0:	d002      	beq.n	b8df8 <__adddf3+0x84>
   b8df2:	4252      	negs	r2, r2
   b8df4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8df8:	ea94 0f05 	teq	r4, r5
   b8dfc:	f000 80a7 	beq.w	b8f4e <__adddf3+0x1da>
   b8e00:	f1a4 0401 	sub.w	r4, r4, #1
   b8e04:	f1d5 0e20 	rsbs	lr, r5, #32
   b8e08:	db0d      	blt.n	b8e26 <__adddf3+0xb2>
   b8e0a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8e0e:	fa22 f205 	lsr.w	r2, r2, r5
   b8e12:	1880      	adds	r0, r0, r2
   b8e14:	f141 0100 	adc.w	r1, r1, #0
   b8e18:	fa03 f20e 	lsl.w	r2, r3, lr
   b8e1c:	1880      	adds	r0, r0, r2
   b8e1e:	fa43 f305 	asr.w	r3, r3, r5
   b8e22:	4159      	adcs	r1, r3
   b8e24:	e00e      	b.n	b8e44 <__adddf3+0xd0>
   b8e26:	f1a5 0520 	sub.w	r5, r5, #32
   b8e2a:	f10e 0e20 	add.w	lr, lr, #32
   b8e2e:	2a01      	cmp	r2, #1
   b8e30:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8e34:	bf28      	it	cs
   b8e36:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8e3a:	fa43 f305 	asr.w	r3, r3, r5
   b8e3e:	18c0      	adds	r0, r0, r3
   b8e40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8e48:	d507      	bpl.n	b8e5a <__adddf3+0xe6>
   b8e4a:	f04f 0e00 	mov.w	lr, #0
   b8e4e:	f1dc 0c00 	rsbs	ip, ip, #0
   b8e52:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8e56:	eb6e 0101 	sbc.w	r1, lr, r1
   b8e5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8e5e:	d31b      	bcc.n	b8e98 <__adddf3+0x124>
   b8e60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8e64:	d30c      	bcc.n	b8e80 <__adddf3+0x10c>
   b8e66:	0849      	lsrs	r1, r1, #1
   b8e68:	ea5f 0030 	movs.w	r0, r0, rrx
   b8e6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8e70:	f104 0401 	add.w	r4, r4, #1
   b8e74:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8e78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8e7c:	f080 809a 	bcs.w	b8fb4 <__adddf3+0x240>
   b8e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8e84:	bf08      	it	eq
   b8e86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8e8a:	f150 0000 	adcs.w	r0, r0, #0
   b8e8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8e92:	ea41 0105 	orr.w	r1, r1, r5
   b8e96:	bd30      	pop	{r4, r5, pc}
   b8e98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8e9c:	4140      	adcs	r0, r0
   b8e9e:	eb41 0101 	adc.w	r1, r1, r1
   b8ea2:	3c01      	subs	r4, #1
   b8ea4:	bf28      	it	cs
   b8ea6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8eaa:	d2e9      	bcs.n	b8e80 <__adddf3+0x10c>
   b8eac:	f091 0f00 	teq	r1, #0
   b8eb0:	bf04      	itt	eq
   b8eb2:	4601      	moveq	r1, r0
   b8eb4:	2000      	moveq	r0, #0
   b8eb6:	fab1 f381 	clz	r3, r1
   b8eba:	bf08      	it	eq
   b8ebc:	3320      	addeq	r3, #32
   b8ebe:	f1a3 030b 	sub.w	r3, r3, #11
   b8ec2:	f1b3 0220 	subs.w	r2, r3, #32
   b8ec6:	da0c      	bge.n	b8ee2 <__adddf3+0x16e>
   b8ec8:	320c      	adds	r2, #12
   b8eca:	dd08      	ble.n	b8ede <__adddf3+0x16a>
   b8ecc:	f102 0c14 	add.w	ip, r2, #20
   b8ed0:	f1c2 020c 	rsb	r2, r2, #12
   b8ed4:	fa01 f00c 	lsl.w	r0, r1, ip
   b8ed8:	fa21 f102 	lsr.w	r1, r1, r2
   b8edc:	e00c      	b.n	b8ef8 <__adddf3+0x184>
   b8ede:	f102 0214 	add.w	r2, r2, #20
   b8ee2:	bfd8      	it	le
   b8ee4:	f1c2 0c20 	rsble	ip, r2, #32
   b8ee8:	fa01 f102 	lsl.w	r1, r1, r2
   b8eec:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8ef0:	bfdc      	itt	le
   b8ef2:	ea41 010c 	orrle.w	r1, r1, ip
   b8ef6:	4090      	lslle	r0, r2
   b8ef8:	1ae4      	subs	r4, r4, r3
   b8efa:	bfa2      	ittt	ge
   b8efc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8f00:	4329      	orrge	r1, r5
   b8f02:	bd30      	popge	{r4, r5, pc}
   b8f04:	ea6f 0404 	mvn.w	r4, r4
   b8f08:	3c1f      	subs	r4, #31
   b8f0a:	da1c      	bge.n	b8f46 <__adddf3+0x1d2>
   b8f0c:	340c      	adds	r4, #12
   b8f0e:	dc0e      	bgt.n	b8f2e <__adddf3+0x1ba>
   b8f10:	f104 0414 	add.w	r4, r4, #20
   b8f14:	f1c4 0220 	rsb	r2, r4, #32
   b8f18:	fa20 f004 	lsr.w	r0, r0, r4
   b8f1c:	fa01 f302 	lsl.w	r3, r1, r2
   b8f20:	ea40 0003 	orr.w	r0, r0, r3
   b8f24:	fa21 f304 	lsr.w	r3, r1, r4
   b8f28:	ea45 0103 	orr.w	r1, r5, r3
   b8f2c:	bd30      	pop	{r4, r5, pc}
   b8f2e:	f1c4 040c 	rsb	r4, r4, #12
   b8f32:	f1c4 0220 	rsb	r2, r4, #32
   b8f36:	fa20 f002 	lsr.w	r0, r0, r2
   b8f3a:	fa01 f304 	lsl.w	r3, r1, r4
   b8f3e:	ea40 0003 	orr.w	r0, r0, r3
   b8f42:	4629      	mov	r1, r5
   b8f44:	bd30      	pop	{r4, r5, pc}
   b8f46:	fa21 f004 	lsr.w	r0, r1, r4
   b8f4a:	4629      	mov	r1, r5
   b8f4c:	bd30      	pop	{r4, r5, pc}
   b8f4e:	f094 0f00 	teq	r4, #0
   b8f52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8f56:	bf06      	itte	eq
   b8f58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8f5c:	3401      	addeq	r4, #1
   b8f5e:	3d01      	subne	r5, #1
   b8f60:	e74e      	b.n	b8e00 <__adddf3+0x8c>
   b8f62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8f66:	bf18      	it	ne
   b8f68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8f6c:	d029      	beq.n	b8fc2 <__adddf3+0x24e>
   b8f6e:	ea94 0f05 	teq	r4, r5
   b8f72:	bf08      	it	eq
   b8f74:	ea90 0f02 	teqeq	r0, r2
   b8f78:	d005      	beq.n	b8f86 <__adddf3+0x212>
   b8f7a:	ea54 0c00 	orrs.w	ip, r4, r0
   b8f7e:	bf04      	itt	eq
   b8f80:	4619      	moveq	r1, r3
   b8f82:	4610      	moveq	r0, r2
   b8f84:	bd30      	pop	{r4, r5, pc}
   b8f86:	ea91 0f03 	teq	r1, r3
   b8f8a:	bf1e      	ittt	ne
   b8f8c:	2100      	movne	r1, #0
   b8f8e:	2000      	movne	r0, #0
   b8f90:	bd30      	popne	{r4, r5, pc}
   b8f92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8f96:	d105      	bne.n	b8fa4 <__adddf3+0x230>
   b8f98:	0040      	lsls	r0, r0, #1
   b8f9a:	4149      	adcs	r1, r1
   b8f9c:	bf28      	it	cs
   b8f9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8fa2:	bd30      	pop	{r4, r5, pc}
   b8fa4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8fa8:	bf3c      	itt	cc
   b8faa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8fae:	bd30      	popcc	{r4, r5, pc}
   b8fb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8fb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8fb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8fbc:	f04f 0000 	mov.w	r0, #0
   b8fc0:	bd30      	pop	{r4, r5, pc}
   b8fc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8fc6:	bf1a      	itte	ne
   b8fc8:	4619      	movne	r1, r3
   b8fca:	4610      	movne	r0, r2
   b8fcc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8fd0:	bf1c      	itt	ne
   b8fd2:	460b      	movne	r3, r1
   b8fd4:	4602      	movne	r2, r0
   b8fd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8fda:	bf06      	itte	eq
   b8fdc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8fe0:	ea91 0f03 	teqeq	r1, r3
   b8fe4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8fe8:	bd30      	pop	{r4, r5, pc}
   b8fea:	bf00      	nop

000b8fec <__aeabi_ui2d>:
   b8fec:	f090 0f00 	teq	r0, #0
   b8ff0:	bf04      	itt	eq
   b8ff2:	2100      	moveq	r1, #0
   b8ff4:	4770      	bxeq	lr
   b8ff6:	b530      	push	{r4, r5, lr}
   b8ff8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8ffc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9000:	f04f 0500 	mov.w	r5, #0
   b9004:	f04f 0100 	mov.w	r1, #0
   b9008:	e750      	b.n	b8eac <__adddf3+0x138>
   b900a:	bf00      	nop

000b900c <__aeabi_i2d>:
   b900c:	f090 0f00 	teq	r0, #0
   b9010:	bf04      	itt	eq
   b9012:	2100      	moveq	r1, #0
   b9014:	4770      	bxeq	lr
   b9016:	b530      	push	{r4, r5, lr}
   b9018:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b901c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9020:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9024:	bf48      	it	mi
   b9026:	4240      	negmi	r0, r0
   b9028:	f04f 0100 	mov.w	r1, #0
   b902c:	e73e      	b.n	b8eac <__adddf3+0x138>
   b902e:	bf00      	nop

000b9030 <__aeabi_f2d>:
   b9030:	0042      	lsls	r2, r0, #1
   b9032:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9036:	ea4f 0131 	mov.w	r1, r1, rrx
   b903a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b903e:	bf1f      	itttt	ne
   b9040:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9044:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9048:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b904c:	4770      	bxne	lr
   b904e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9052:	bf08      	it	eq
   b9054:	4770      	bxeq	lr
   b9056:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b905a:	bf04      	itt	eq
   b905c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9060:	4770      	bxeq	lr
   b9062:	b530      	push	{r4, r5, lr}
   b9064:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9068:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b906c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9070:	e71c      	b.n	b8eac <__adddf3+0x138>
   b9072:	bf00      	nop

000b9074 <__aeabi_ul2d>:
   b9074:	ea50 0201 	orrs.w	r2, r0, r1
   b9078:	bf08      	it	eq
   b907a:	4770      	bxeq	lr
   b907c:	b530      	push	{r4, r5, lr}
   b907e:	f04f 0500 	mov.w	r5, #0
   b9082:	e00a      	b.n	b909a <__aeabi_l2d+0x16>

000b9084 <__aeabi_l2d>:
   b9084:	ea50 0201 	orrs.w	r2, r0, r1
   b9088:	bf08      	it	eq
   b908a:	4770      	bxeq	lr
   b908c:	b530      	push	{r4, r5, lr}
   b908e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9092:	d502      	bpl.n	b909a <__aeabi_l2d+0x16>
   b9094:	4240      	negs	r0, r0
   b9096:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b909a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b909e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b90a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b90a6:	f43f aed8 	beq.w	b8e5a <__adddf3+0xe6>
   b90aa:	f04f 0203 	mov.w	r2, #3
   b90ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b90b2:	bf18      	it	ne
   b90b4:	3203      	addne	r2, #3
   b90b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b90ba:	bf18      	it	ne
   b90bc:	3203      	addne	r2, #3
   b90be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b90c2:	f1c2 0320 	rsb	r3, r2, #32
   b90c6:	fa00 fc03 	lsl.w	ip, r0, r3
   b90ca:	fa20 f002 	lsr.w	r0, r0, r2
   b90ce:	fa01 fe03 	lsl.w	lr, r1, r3
   b90d2:	ea40 000e 	orr.w	r0, r0, lr
   b90d6:	fa21 f102 	lsr.w	r1, r1, r2
   b90da:	4414      	add	r4, r2
   b90dc:	e6bd      	b.n	b8e5a <__adddf3+0xe6>
   b90de:	bf00      	nop

000b90e0 <__aeabi_dmul>:
   b90e0:	b570      	push	{r4, r5, r6, lr}
   b90e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b90e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b90ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b90ee:	bf1d      	ittte	ne
   b90f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b90f4:	ea94 0f0c 	teqne	r4, ip
   b90f8:	ea95 0f0c 	teqne	r5, ip
   b90fc:	f000 f8de 	bleq	b92bc <__aeabi_dmul+0x1dc>
   b9100:	442c      	add	r4, r5
   b9102:	ea81 0603 	eor.w	r6, r1, r3
   b9106:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b910a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b910e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9112:	bf18      	it	ne
   b9114:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9118:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b911c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9120:	d038      	beq.n	b9194 <__aeabi_dmul+0xb4>
   b9122:	fba0 ce02 	umull	ip, lr, r0, r2
   b9126:	f04f 0500 	mov.w	r5, #0
   b912a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b912e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9132:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9136:	f04f 0600 	mov.w	r6, #0
   b913a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b913e:	f09c 0f00 	teq	ip, #0
   b9142:	bf18      	it	ne
   b9144:	f04e 0e01 	orrne.w	lr, lr, #1
   b9148:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b914c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9150:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9154:	d204      	bcs.n	b9160 <__aeabi_dmul+0x80>
   b9156:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b915a:	416d      	adcs	r5, r5
   b915c:	eb46 0606 	adc.w	r6, r6, r6
   b9160:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9164:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9168:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b916c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9170:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9174:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9178:	bf88      	it	hi
   b917a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b917e:	d81e      	bhi.n	b91be <__aeabi_dmul+0xde>
   b9180:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9184:	bf08      	it	eq
   b9186:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b918a:	f150 0000 	adcs.w	r0, r0, #0
   b918e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9192:	bd70      	pop	{r4, r5, r6, pc}
   b9194:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9198:	ea46 0101 	orr.w	r1, r6, r1
   b919c:	ea40 0002 	orr.w	r0, r0, r2
   b91a0:	ea81 0103 	eor.w	r1, r1, r3
   b91a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b91a8:	bfc2      	ittt	gt
   b91aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b91ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b91b2:	bd70      	popgt	{r4, r5, r6, pc}
   b91b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b91b8:	f04f 0e00 	mov.w	lr, #0
   b91bc:	3c01      	subs	r4, #1
   b91be:	f300 80ab 	bgt.w	b9318 <__aeabi_dmul+0x238>
   b91c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b91c6:	bfde      	ittt	le
   b91c8:	2000      	movle	r0, #0
   b91ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b91ce:	bd70      	pople	{r4, r5, r6, pc}
   b91d0:	f1c4 0400 	rsb	r4, r4, #0
   b91d4:	3c20      	subs	r4, #32
   b91d6:	da35      	bge.n	b9244 <__aeabi_dmul+0x164>
   b91d8:	340c      	adds	r4, #12
   b91da:	dc1b      	bgt.n	b9214 <__aeabi_dmul+0x134>
   b91dc:	f104 0414 	add.w	r4, r4, #20
   b91e0:	f1c4 0520 	rsb	r5, r4, #32
   b91e4:	fa00 f305 	lsl.w	r3, r0, r5
   b91e8:	fa20 f004 	lsr.w	r0, r0, r4
   b91ec:	fa01 f205 	lsl.w	r2, r1, r5
   b91f0:	ea40 0002 	orr.w	r0, r0, r2
   b91f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b91f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b91fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9200:	fa21 f604 	lsr.w	r6, r1, r4
   b9204:	eb42 0106 	adc.w	r1, r2, r6
   b9208:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b920c:	bf08      	it	eq
   b920e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9212:	bd70      	pop	{r4, r5, r6, pc}
   b9214:	f1c4 040c 	rsb	r4, r4, #12
   b9218:	f1c4 0520 	rsb	r5, r4, #32
   b921c:	fa00 f304 	lsl.w	r3, r0, r4
   b9220:	fa20 f005 	lsr.w	r0, r0, r5
   b9224:	fa01 f204 	lsl.w	r2, r1, r4
   b9228:	ea40 0002 	orr.w	r0, r0, r2
   b922c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9230:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9234:	f141 0100 	adc.w	r1, r1, #0
   b9238:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b923c:	bf08      	it	eq
   b923e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9242:	bd70      	pop	{r4, r5, r6, pc}
   b9244:	f1c4 0520 	rsb	r5, r4, #32
   b9248:	fa00 f205 	lsl.w	r2, r0, r5
   b924c:	ea4e 0e02 	orr.w	lr, lr, r2
   b9250:	fa20 f304 	lsr.w	r3, r0, r4
   b9254:	fa01 f205 	lsl.w	r2, r1, r5
   b9258:	ea43 0302 	orr.w	r3, r3, r2
   b925c:	fa21 f004 	lsr.w	r0, r1, r4
   b9260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9264:	fa21 f204 	lsr.w	r2, r1, r4
   b9268:	ea20 0002 	bic.w	r0, r0, r2
   b926c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9270:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9274:	bf08      	it	eq
   b9276:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b927a:	bd70      	pop	{r4, r5, r6, pc}
   b927c:	f094 0f00 	teq	r4, #0
   b9280:	d10f      	bne.n	b92a2 <__aeabi_dmul+0x1c2>
   b9282:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9286:	0040      	lsls	r0, r0, #1
   b9288:	eb41 0101 	adc.w	r1, r1, r1
   b928c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9290:	bf08      	it	eq
   b9292:	3c01      	subeq	r4, #1
   b9294:	d0f7      	beq.n	b9286 <__aeabi_dmul+0x1a6>
   b9296:	ea41 0106 	orr.w	r1, r1, r6
   b929a:	f095 0f00 	teq	r5, #0
   b929e:	bf18      	it	ne
   b92a0:	4770      	bxne	lr
   b92a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b92a6:	0052      	lsls	r2, r2, #1
   b92a8:	eb43 0303 	adc.w	r3, r3, r3
   b92ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b92b0:	bf08      	it	eq
   b92b2:	3d01      	subeq	r5, #1
   b92b4:	d0f7      	beq.n	b92a6 <__aeabi_dmul+0x1c6>
   b92b6:	ea43 0306 	orr.w	r3, r3, r6
   b92ba:	4770      	bx	lr
   b92bc:	ea94 0f0c 	teq	r4, ip
   b92c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b92c4:	bf18      	it	ne
   b92c6:	ea95 0f0c 	teqne	r5, ip
   b92ca:	d00c      	beq.n	b92e6 <__aeabi_dmul+0x206>
   b92cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b92d0:	bf18      	it	ne
   b92d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b92d6:	d1d1      	bne.n	b927c <__aeabi_dmul+0x19c>
   b92d8:	ea81 0103 	eor.w	r1, r1, r3
   b92dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b92e0:	f04f 0000 	mov.w	r0, #0
   b92e4:	bd70      	pop	{r4, r5, r6, pc}
   b92e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b92ea:	bf06      	itte	eq
   b92ec:	4610      	moveq	r0, r2
   b92ee:	4619      	moveq	r1, r3
   b92f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b92f4:	d019      	beq.n	b932a <__aeabi_dmul+0x24a>
   b92f6:	ea94 0f0c 	teq	r4, ip
   b92fa:	d102      	bne.n	b9302 <__aeabi_dmul+0x222>
   b92fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9300:	d113      	bne.n	b932a <__aeabi_dmul+0x24a>
   b9302:	ea95 0f0c 	teq	r5, ip
   b9306:	d105      	bne.n	b9314 <__aeabi_dmul+0x234>
   b9308:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b930c:	bf1c      	itt	ne
   b930e:	4610      	movne	r0, r2
   b9310:	4619      	movne	r1, r3
   b9312:	d10a      	bne.n	b932a <__aeabi_dmul+0x24a>
   b9314:	ea81 0103 	eor.w	r1, r1, r3
   b9318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b931c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9320:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9324:	f04f 0000 	mov.w	r0, #0
   b9328:	bd70      	pop	{r4, r5, r6, pc}
   b932a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b932e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9332:	bd70      	pop	{r4, r5, r6, pc}

000b9334 <__aeabi_ddiv>:
   b9334:	b570      	push	{r4, r5, r6, lr}
   b9336:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b933a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b933e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9342:	bf1d      	ittte	ne
   b9344:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9348:	ea94 0f0c 	teqne	r4, ip
   b934c:	ea95 0f0c 	teqne	r5, ip
   b9350:	f000 f8a7 	bleq	b94a2 <__aeabi_ddiv+0x16e>
   b9354:	eba4 0405 	sub.w	r4, r4, r5
   b9358:	ea81 0e03 	eor.w	lr, r1, r3
   b935c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9360:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9364:	f000 8088 	beq.w	b9478 <__aeabi_ddiv+0x144>
   b9368:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b936c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9370:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9374:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9378:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b937c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9380:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9384:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9388:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b938c:	429d      	cmp	r5, r3
   b938e:	bf08      	it	eq
   b9390:	4296      	cmpeq	r6, r2
   b9392:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9396:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b939a:	d202      	bcs.n	b93a2 <__aeabi_ddiv+0x6e>
   b939c:	085b      	lsrs	r3, r3, #1
   b939e:	ea4f 0232 	mov.w	r2, r2, rrx
   b93a2:	1ab6      	subs	r6, r6, r2
   b93a4:	eb65 0503 	sbc.w	r5, r5, r3
   b93a8:	085b      	lsrs	r3, r3, #1
   b93aa:	ea4f 0232 	mov.w	r2, r2, rrx
   b93ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b93b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b93b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b93ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b93be:	bf22      	ittt	cs
   b93c0:	1ab6      	subcs	r6, r6, r2
   b93c2:	4675      	movcs	r5, lr
   b93c4:	ea40 000c 	orrcs.w	r0, r0, ip
   b93c8:	085b      	lsrs	r3, r3, #1
   b93ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b93ce:	ebb6 0e02 	subs.w	lr, r6, r2
   b93d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b93d6:	bf22      	ittt	cs
   b93d8:	1ab6      	subcs	r6, r6, r2
   b93da:	4675      	movcs	r5, lr
   b93dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b93e0:	085b      	lsrs	r3, r3, #1
   b93e2:	ea4f 0232 	mov.w	r2, r2, rrx
   b93e6:	ebb6 0e02 	subs.w	lr, r6, r2
   b93ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b93ee:	bf22      	ittt	cs
   b93f0:	1ab6      	subcs	r6, r6, r2
   b93f2:	4675      	movcs	r5, lr
   b93f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b93f8:	085b      	lsrs	r3, r3, #1
   b93fa:	ea4f 0232 	mov.w	r2, r2, rrx
   b93fe:	ebb6 0e02 	subs.w	lr, r6, r2
   b9402:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9406:	bf22      	ittt	cs
   b9408:	1ab6      	subcs	r6, r6, r2
   b940a:	4675      	movcs	r5, lr
   b940c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9410:	ea55 0e06 	orrs.w	lr, r5, r6
   b9414:	d018      	beq.n	b9448 <__aeabi_ddiv+0x114>
   b9416:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b941a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b941e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9422:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9426:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b942a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b942e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9432:	d1c0      	bne.n	b93b6 <__aeabi_ddiv+0x82>
   b9434:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9438:	d10b      	bne.n	b9452 <__aeabi_ddiv+0x11e>
   b943a:	ea41 0100 	orr.w	r1, r1, r0
   b943e:	f04f 0000 	mov.w	r0, #0
   b9442:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9446:	e7b6      	b.n	b93b6 <__aeabi_ddiv+0x82>
   b9448:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b944c:	bf04      	itt	eq
   b944e:	4301      	orreq	r1, r0
   b9450:	2000      	moveq	r0, #0
   b9452:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9456:	bf88      	it	hi
   b9458:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b945c:	f63f aeaf 	bhi.w	b91be <__aeabi_dmul+0xde>
   b9460:	ebb5 0c03 	subs.w	ip, r5, r3
   b9464:	bf04      	itt	eq
   b9466:	ebb6 0c02 	subseq.w	ip, r6, r2
   b946a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b946e:	f150 0000 	adcs.w	r0, r0, #0
   b9472:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9476:	bd70      	pop	{r4, r5, r6, pc}
   b9478:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b947c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9480:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9484:	bfc2      	ittt	gt
   b9486:	ebd4 050c 	rsbsgt	r5, r4, ip
   b948a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b948e:	bd70      	popgt	{r4, r5, r6, pc}
   b9490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9494:	f04f 0e00 	mov.w	lr, #0
   b9498:	3c01      	subs	r4, #1
   b949a:	e690      	b.n	b91be <__aeabi_dmul+0xde>
   b949c:	ea45 0e06 	orr.w	lr, r5, r6
   b94a0:	e68d      	b.n	b91be <__aeabi_dmul+0xde>
   b94a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b94a6:	ea94 0f0c 	teq	r4, ip
   b94aa:	bf08      	it	eq
   b94ac:	ea95 0f0c 	teqeq	r5, ip
   b94b0:	f43f af3b 	beq.w	b932a <__aeabi_dmul+0x24a>
   b94b4:	ea94 0f0c 	teq	r4, ip
   b94b8:	d10a      	bne.n	b94d0 <__aeabi_ddiv+0x19c>
   b94ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b94be:	f47f af34 	bne.w	b932a <__aeabi_dmul+0x24a>
   b94c2:	ea95 0f0c 	teq	r5, ip
   b94c6:	f47f af25 	bne.w	b9314 <__aeabi_dmul+0x234>
   b94ca:	4610      	mov	r0, r2
   b94cc:	4619      	mov	r1, r3
   b94ce:	e72c      	b.n	b932a <__aeabi_dmul+0x24a>
   b94d0:	ea95 0f0c 	teq	r5, ip
   b94d4:	d106      	bne.n	b94e4 <__aeabi_ddiv+0x1b0>
   b94d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b94da:	f43f aefd 	beq.w	b92d8 <__aeabi_dmul+0x1f8>
   b94de:	4610      	mov	r0, r2
   b94e0:	4619      	mov	r1, r3
   b94e2:	e722      	b.n	b932a <__aeabi_dmul+0x24a>
   b94e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b94e8:	bf18      	it	ne
   b94ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b94ee:	f47f aec5 	bne.w	b927c <__aeabi_dmul+0x19c>
   b94f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b94f6:	f47f af0d 	bne.w	b9314 <__aeabi_dmul+0x234>
   b94fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b94fe:	f47f aeeb 	bne.w	b92d8 <__aeabi_dmul+0x1f8>
   b9502:	e712      	b.n	b932a <__aeabi_dmul+0x24a>

000b9504 <__gedf2>:
   b9504:	f04f 3cff 	mov.w	ip, #4294967295
   b9508:	e006      	b.n	b9518 <__cmpdf2+0x4>
   b950a:	bf00      	nop

000b950c <__ledf2>:
   b950c:	f04f 0c01 	mov.w	ip, #1
   b9510:	e002      	b.n	b9518 <__cmpdf2+0x4>
   b9512:	bf00      	nop

000b9514 <__cmpdf2>:
   b9514:	f04f 0c01 	mov.w	ip, #1
   b9518:	f84d cd04 	str.w	ip, [sp, #-4]!
   b951c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9520:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9524:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9528:	bf18      	it	ne
   b952a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b952e:	d01b      	beq.n	b9568 <__cmpdf2+0x54>
   b9530:	b001      	add	sp, #4
   b9532:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9536:	bf0c      	ite	eq
   b9538:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b953c:	ea91 0f03 	teqne	r1, r3
   b9540:	bf02      	ittt	eq
   b9542:	ea90 0f02 	teqeq	r0, r2
   b9546:	2000      	moveq	r0, #0
   b9548:	4770      	bxeq	lr
   b954a:	f110 0f00 	cmn.w	r0, #0
   b954e:	ea91 0f03 	teq	r1, r3
   b9552:	bf58      	it	pl
   b9554:	4299      	cmppl	r1, r3
   b9556:	bf08      	it	eq
   b9558:	4290      	cmpeq	r0, r2
   b955a:	bf2c      	ite	cs
   b955c:	17d8      	asrcs	r0, r3, #31
   b955e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9562:	f040 0001 	orr.w	r0, r0, #1
   b9566:	4770      	bx	lr
   b9568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b956c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9570:	d102      	bne.n	b9578 <__cmpdf2+0x64>
   b9572:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9576:	d107      	bne.n	b9588 <__cmpdf2+0x74>
   b9578:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b957c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9580:	d1d6      	bne.n	b9530 <__cmpdf2+0x1c>
   b9582:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9586:	d0d3      	beq.n	b9530 <__cmpdf2+0x1c>
   b9588:	f85d 0b04 	ldr.w	r0, [sp], #4
   b958c:	4770      	bx	lr
   b958e:	bf00      	nop

000b9590 <__aeabi_cdrcmple>:
   b9590:	4684      	mov	ip, r0
   b9592:	4610      	mov	r0, r2
   b9594:	4662      	mov	r2, ip
   b9596:	468c      	mov	ip, r1
   b9598:	4619      	mov	r1, r3
   b959a:	4663      	mov	r3, ip
   b959c:	e000      	b.n	b95a0 <__aeabi_cdcmpeq>
   b959e:	bf00      	nop

000b95a0 <__aeabi_cdcmpeq>:
   b95a0:	b501      	push	{r0, lr}
   b95a2:	f7ff ffb7 	bl	b9514 <__cmpdf2>
   b95a6:	2800      	cmp	r0, #0
   b95a8:	bf48      	it	mi
   b95aa:	f110 0f00 	cmnmi.w	r0, #0
   b95ae:	bd01      	pop	{r0, pc}

000b95b0 <__aeabi_dcmpeq>:
   b95b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b95b4:	f7ff fff4 	bl	b95a0 <__aeabi_cdcmpeq>
   b95b8:	bf0c      	ite	eq
   b95ba:	2001      	moveq	r0, #1
   b95bc:	2000      	movne	r0, #0
   b95be:	f85d fb08 	ldr.w	pc, [sp], #8
   b95c2:	bf00      	nop

000b95c4 <__aeabi_dcmplt>:
   b95c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b95c8:	f7ff ffea 	bl	b95a0 <__aeabi_cdcmpeq>
   b95cc:	bf34      	ite	cc
   b95ce:	2001      	movcc	r0, #1
   b95d0:	2000      	movcs	r0, #0
   b95d2:	f85d fb08 	ldr.w	pc, [sp], #8
   b95d6:	bf00      	nop

000b95d8 <__aeabi_dcmple>:
   b95d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b95dc:	f7ff ffe0 	bl	b95a0 <__aeabi_cdcmpeq>
   b95e0:	bf94      	ite	ls
   b95e2:	2001      	movls	r0, #1
   b95e4:	2000      	movhi	r0, #0
   b95e6:	f85d fb08 	ldr.w	pc, [sp], #8
   b95ea:	bf00      	nop

000b95ec <__aeabi_dcmpge>:
   b95ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   b95f0:	f7ff ffce 	bl	b9590 <__aeabi_cdrcmple>
   b95f4:	bf94      	ite	ls
   b95f6:	2001      	movls	r0, #1
   b95f8:	2000      	movhi	r0, #0
   b95fa:	f85d fb08 	ldr.w	pc, [sp], #8
   b95fe:	bf00      	nop

000b9600 <__aeabi_dcmpgt>:
   b9600:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9604:	f7ff ffc4 	bl	b9590 <__aeabi_cdrcmple>
   b9608:	bf34      	ite	cc
   b960a:	2001      	movcc	r0, #1
   b960c:	2000      	movcs	r0, #0
   b960e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9612:	bf00      	nop

000b9614 <__aeabi_d2uiz>:
   b9614:	004a      	lsls	r2, r1, #1
   b9616:	d211      	bcs.n	b963c <__aeabi_d2uiz+0x28>
   b9618:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b961c:	d211      	bcs.n	b9642 <__aeabi_d2uiz+0x2e>
   b961e:	d50d      	bpl.n	b963c <__aeabi_d2uiz+0x28>
   b9620:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9624:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9628:	d40e      	bmi.n	b9648 <__aeabi_d2uiz+0x34>
   b962a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b962e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9632:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9636:	fa23 f002 	lsr.w	r0, r3, r2
   b963a:	4770      	bx	lr
   b963c:	f04f 0000 	mov.w	r0, #0
   b9640:	4770      	bx	lr
   b9642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9646:	d102      	bne.n	b964e <__aeabi_d2uiz+0x3a>
   b9648:	f04f 30ff 	mov.w	r0, #4294967295
   b964c:	4770      	bx	lr
   b964e:	f04f 0000 	mov.w	r0, #0
   b9652:	4770      	bx	lr

000b9654 <__aeabi_f2lz>:
   b9654:	ee07 0a90 	vmov	s15, r0
   b9658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b965c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9660:	d401      	bmi.n	b9666 <__aeabi_f2lz+0x12>
   b9662:	f000 b80b 	b.w	b967c <__aeabi_f2ulz>
   b9666:	eef1 7a67 	vneg.f32	s15, s15
   b966a:	b508      	push	{r3, lr}
   b966c:	ee17 0a90 	vmov	r0, s15
   b9670:	f000 f804 	bl	b967c <__aeabi_f2ulz>
   b9674:	4240      	negs	r0, r0
   b9676:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b967a:	bd08      	pop	{r3, pc}

000b967c <__aeabi_f2ulz>:
   b967c:	b5d0      	push	{r4, r6, r7, lr}
   b967e:	f7ff fcd7 	bl	b9030 <__aeabi_f2d>
   b9682:	4b0c      	ldr	r3, [pc, #48]	; (b96b4 <__aeabi_f2ulz+0x38>)
   b9684:	2200      	movs	r2, #0
   b9686:	4606      	mov	r6, r0
   b9688:	460f      	mov	r7, r1
   b968a:	f7ff fd29 	bl	b90e0 <__aeabi_dmul>
   b968e:	f7ff ffc1 	bl	b9614 <__aeabi_d2uiz>
   b9692:	4604      	mov	r4, r0
   b9694:	f7ff fcaa 	bl	b8fec <__aeabi_ui2d>
   b9698:	4b07      	ldr	r3, [pc, #28]	; (b96b8 <__aeabi_f2ulz+0x3c>)
   b969a:	2200      	movs	r2, #0
   b969c:	f7ff fd20 	bl	b90e0 <__aeabi_dmul>
   b96a0:	4602      	mov	r2, r0
   b96a2:	460b      	mov	r3, r1
   b96a4:	4630      	mov	r0, r6
   b96a6:	4639      	mov	r1, r7
   b96a8:	f7ff fb62 	bl	b8d70 <__aeabi_dsub>
   b96ac:	f7ff ffb2 	bl	b9614 <__aeabi_d2uiz>
   b96b0:	4621      	mov	r1, r4
   b96b2:	bdd0      	pop	{r4, r6, r7, pc}
   b96b4:	3df00000 	.word	0x3df00000
   b96b8:	41f00000 	.word	0x41f00000

000b96bc <__aeabi_d2ulz>:
   b96bc:	b5d0      	push	{r4, r6, r7, lr}
   b96be:	4b0c      	ldr	r3, [pc, #48]	; (b96f0 <__aeabi_d2ulz+0x34>)
   b96c0:	2200      	movs	r2, #0
   b96c2:	4606      	mov	r6, r0
   b96c4:	460f      	mov	r7, r1
   b96c6:	f7ff fd0b 	bl	b90e0 <__aeabi_dmul>
   b96ca:	f7ff ffa3 	bl	b9614 <__aeabi_d2uiz>
   b96ce:	4604      	mov	r4, r0
   b96d0:	f7ff fc8c 	bl	b8fec <__aeabi_ui2d>
   b96d4:	4b07      	ldr	r3, [pc, #28]	; (b96f4 <__aeabi_d2ulz+0x38>)
   b96d6:	2200      	movs	r2, #0
   b96d8:	f7ff fd02 	bl	b90e0 <__aeabi_dmul>
   b96dc:	4602      	mov	r2, r0
   b96de:	460b      	mov	r3, r1
   b96e0:	4630      	mov	r0, r6
   b96e2:	4639      	mov	r1, r7
   b96e4:	f7ff fb44 	bl	b8d70 <__aeabi_dsub>
   b96e8:	f7ff ff94 	bl	b9614 <__aeabi_d2uiz>
   b96ec:	4621      	mov	r1, r4
   b96ee:	bdd0      	pop	{r4, r6, r7, pc}
   b96f0:	3df00000 	.word	0x3df00000
   b96f4:	41f00000 	.word	0x41f00000

000b96f8 <atexit>:
   b96f8:	2300      	movs	r3, #0
   b96fa:	4601      	mov	r1, r0
   b96fc:	461a      	mov	r2, r3
   b96fe:	4618      	mov	r0, r3
   b9700:	f000 bff4 	b.w	ba6ec <__register_exitproc>

000b9704 <atof>:
   b9704:	2100      	movs	r1, #0
   b9706:	f000 befd 	b.w	ba504 <strtod>

000b970a <atoi>:
   b970a:	220a      	movs	r2, #10
   b970c:	2100      	movs	r1, #0
   b970e:	f000 bfe3 	b.w	ba6d8 <strtol>

000b9712 <memcmp>:
   b9712:	b510      	push	{r4, lr}
   b9714:	3901      	subs	r1, #1
   b9716:	4402      	add	r2, r0
   b9718:	4290      	cmp	r0, r2
   b971a:	d101      	bne.n	b9720 <memcmp+0xe>
   b971c:	2000      	movs	r0, #0
   b971e:	e005      	b.n	b972c <memcmp+0x1a>
   b9720:	7803      	ldrb	r3, [r0, #0]
   b9722:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9726:	42a3      	cmp	r3, r4
   b9728:	d001      	beq.n	b972e <memcmp+0x1c>
   b972a:	1b18      	subs	r0, r3, r4
   b972c:	bd10      	pop	{r4, pc}
   b972e:	3001      	adds	r0, #1
   b9730:	e7f2      	b.n	b9718 <memcmp+0x6>

000b9732 <memcpy>:
   b9732:	440a      	add	r2, r1
   b9734:	4291      	cmp	r1, r2
   b9736:	f100 33ff 	add.w	r3, r0, #4294967295
   b973a:	d100      	bne.n	b973e <memcpy+0xc>
   b973c:	4770      	bx	lr
   b973e:	b510      	push	{r4, lr}
   b9740:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9744:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9748:	4291      	cmp	r1, r2
   b974a:	d1f9      	bne.n	b9740 <memcpy+0xe>
   b974c:	bd10      	pop	{r4, pc}

000b974e <memmove>:
   b974e:	4288      	cmp	r0, r1
   b9750:	b510      	push	{r4, lr}
   b9752:	eb01 0402 	add.w	r4, r1, r2
   b9756:	d902      	bls.n	b975e <memmove+0x10>
   b9758:	4284      	cmp	r4, r0
   b975a:	4623      	mov	r3, r4
   b975c:	d807      	bhi.n	b976e <memmove+0x20>
   b975e:	1e43      	subs	r3, r0, #1
   b9760:	42a1      	cmp	r1, r4
   b9762:	d008      	beq.n	b9776 <memmove+0x28>
   b9764:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9768:	f803 2f01 	strb.w	r2, [r3, #1]!
   b976c:	e7f8      	b.n	b9760 <memmove+0x12>
   b976e:	4402      	add	r2, r0
   b9770:	4601      	mov	r1, r0
   b9772:	428a      	cmp	r2, r1
   b9774:	d100      	bne.n	b9778 <memmove+0x2a>
   b9776:	bd10      	pop	{r4, pc}
   b9778:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b977c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9780:	e7f7      	b.n	b9772 <memmove+0x24>

000b9782 <memset>:
   b9782:	4402      	add	r2, r0
   b9784:	4603      	mov	r3, r0
   b9786:	4293      	cmp	r3, r2
   b9788:	d100      	bne.n	b978c <memset+0xa>
   b978a:	4770      	bx	lr
   b978c:	f803 1b01 	strb.w	r1, [r3], #1
   b9790:	e7f9      	b.n	b9786 <memset+0x4>
	...

000b9794 <srand>:
   b9794:	b538      	push	{r3, r4, r5, lr}
   b9796:	4b10      	ldr	r3, [pc, #64]	; (b97d8 <srand+0x44>)
   b9798:	681d      	ldr	r5, [r3, #0]
   b979a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b979c:	4604      	mov	r4, r0
   b979e:	b9b3      	cbnz	r3, b97ce <srand+0x3a>
   b97a0:	2018      	movs	r0, #24
   b97a2:	f7fc f989 	bl	b5ab8 <malloc>
   b97a6:	4602      	mov	r2, r0
   b97a8:	63a8      	str	r0, [r5, #56]	; 0x38
   b97aa:	b920      	cbnz	r0, b97b6 <srand+0x22>
   b97ac:	4b0b      	ldr	r3, [pc, #44]	; (b97dc <srand+0x48>)
   b97ae:	480c      	ldr	r0, [pc, #48]	; (b97e0 <srand+0x4c>)
   b97b0:	2142      	movs	r1, #66	; 0x42
   b97b2:	f7fc f9c1 	bl	b5b38 <__assert_func>
   b97b6:	490b      	ldr	r1, [pc, #44]	; (b97e4 <srand+0x50>)
   b97b8:	4b0b      	ldr	r3, [pc, #44]	; (b97e8 <srand+0x54>)
   b97ba:	e9c0 1300 	strd	r1, r3, [r0]
   b97be:	4b0b      	ldr	r3, [pc, #44]	; (b97ec <srand+0x58>)
   b97c0:	6083      	str	r3, [r0, #8]
   b97c2:	230b      	movs	r3, #11
   b97c4:	8183      	strh	r3, [r0, #12]
   b97c6:	2100      	movs	r1, #0
   b97c8:	2001      	movs	r0, #1
   b97ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b97ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b97d0:	2200      	movs	r2, #0
   b97d2:	611c      	str	r4, [r3, #16]
   b97d4:	615a      	str	r2, [r3, #20]
   b97d6:	bd38      	pop	{r3, r4, r5, pc}
   b97d8:	2003d984 	.word	0x2003d984
   b97dc:	000bc309 	.word	0x000bc309
   b97e0:	000bc320 	.word	0x000bc320
   b97e4:	abcd330e 	.word	0xabcd330e
   b97e8:	e66d1234 	.word	0xe66d1234
   b97ec:	0005deec 	.word	0x0005deec

000b97f0 <strcat>:
   b97f0:	b510      	push	{r4, lr}
   b97f2:	4602      	mov	r2, r0
   b97f4:	7814      	ldrb	r4, [r2, #0]
   b97f6:	4613      	mov	r3, r2
   b97f8:	3201      	adds	r2, #1
   b97fa:	2c00      	cmp	r4, #0
   b97fc:	d1fa      	bne.n	b97f4 <strcat+0x4>
   b97fe:	3b01      	subs	r3, #1
   b9800:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9804:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9808:	2a00      	cmp	r2, #0
   b980a:	d1f9      	bne.n	b9800 <strcat+0x10>
   b980c:	bd10      	pop	{r4, pc}

000b980e <strcmp>:
   b980e:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9812:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9816:	2a01      	cmp	r2, #1
   b9818:	bf28      	it	cs
   b981a:	429a      	cmpcs	r2, r3
   b981c:	d0f7      	beq.n	b980e <strcmp>
   b981e:	1ad0      	subs	r0, r2, r3
   b9820:	4770      	bx	lr

000b9822 <strcpy>:
   b9822:	4603      	mov	r3, r0
   b9824:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9828:	f803 2b01 	strb.w	r2, [r3], #1
   b982c:	2a00      	cmp	r2, #0
   b982e:	d1f9      	bne.n	b9824 <strcpy+0x2>
   b9830:	4770      	bx	lr
	...

000b9834 <strdup>:
   b9834:	4b02      	ldr	r3, [pc, #8]	; (b9840 <strdup+0xc>)
   b9836:	4601      	mov	r1, r0
   b9838:	6818      	ldr	r0, [r3, #0]
   b983a:	f000 b803 	b.w	b9844 <_strdup_r>
   b983e:	bf00      	nop
   b9840:	2003d984 	.word	0x2003d984

000b9844 <_strdup_r>:
   b9844:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9846:	4604      	mov	r4, r0
   b9848:	4608      	mov	r0, r1
   b984a:	460d      	mov	r5, r1
   b984c:	f000 f80f 	bl	b986e <strlen>
   b9850:	1c42      	adds	r2, r0, #1
   b9852:	4611      	mov	r1, r2
   b9854:	4620      	mov	r0, r4
   b9856:	9201      	str	r2, [sp, #4]
   b9858:	f7fc f95e 	bl	b5b18 <_malloc_r>
   b985c:	4604      	mov	r4, r0
   b985e:	b118      	cbz	r0, b9868 <_strdup_r+0x24>
   b9860:	9a01      	ldr	r2, [sp, #4]
   b9862:	4629      	mov	r1, r5
   b9864:	f7ff ff65 	bl	b9732 <memcpy>
   b9868:	4620      	mov	r0, r4
   b986a:	b003      	add	sp, #12
   b986c:	bd30      	pop	{r4, r5, pc}

000b986e <strlen>:
   b986e:	4603      	mov	r3, r0
   b9870:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9874:	2a00      	cmp	r2, #0
   b9876:	d1fb      	bne.n	b9870 <strlen+0x2>
   b9878:	1a18      	subs	r0, r3, r0
   b987a:	3801      	subs	r0, #1
   b987c:	4770      	bx	lr

000b987e <strncmp>:
   b987e:	b510      	push	{r4, lr}
   b9880:	b17a      	cbz	r2, b98a2 <strncmp+0x24>
   b9882:	4603      	mov	r3, r0
   b9884:	3901      	subs	r1, #1
   b9886:	1884      	adds	r4, r0, r2
   b9888:	f813 0b01 	ldrb.w	r0, [r3], #1
   b988c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9890:	4290      	cmp	r0, r2
   b9892:	d101      	bne.n	b9898 <strncmp+0x1a>
   b9894:	42a3      	cmp	r3, r4
   b9896:	d101      	bne.n	b989c <strncmp+0x1e>
   b9898:	1a80      	subs	r0, r0, r2
   b989a:	bd10      	pop	{r4, pc}
   b989c:	2800      	cmp	r0, #0
   b989e:	d1f3      	bne.n	b9888 <strncmp+0xa>
   b98a0:	e7fa      	b.n	b9898 <strncmp+0x1a>
   b98a2:	4610      	mov	r0, r2
   b98a4:	e7f9      	b.n	b989a <strncmp+0x1c>

000b98a6 <strnlen>:
   b98a6:	b510      	push	{r4, lr}
   b98a8:	4602      	mov	r2, r0
   b98aa:	4401      	add	r1, r0
   b98ac:	428a      	cmp	r2, r1
   b98ae:	4613      	mov	r3, r2
   b98b0:	d003      	beq.n	b98ba <strnlen+0x14>
   b98b2:	781c      	ldrb	r4, [r3, #0]
   b98b4:	3201      	adds	r2, #1
   b98b6:	2c00      	cmp	r4, #0
   b98b8:	d1f8      	bne.n	b98ac <strnlen+0x6>
   b98ba:	1a18      	subs	r0, r3, r0
   b98bc:	bd10      	pop	{r4, pc}

000b98be <sulp>:
   b98be:	b570      	push	{r4, r5, r6, lr}
   b98c0:	4604      	mov	r4, r0
   b98c2:	460d      	mov	r5, r1
   b98c4:	ec45 4b10 	vmov	d0, r4, r5
   b98c8:	4616      	mov	r6, r2
   b98ca:	f001 fe69 	bl	bb5a0 <__ulp>
   b98ce:	ec51 0b10 	vmov	r0, r1, d0
   b98d2:	b17e      	cbz	r6, b98f4 <sulp+0x36>
   b98d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b98d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b98dc:	2b00      	cmp	r3, #0
   b98de:	dd09      	ble.n	b98f4 <sulp+0x36>
   b98e0:	051b      	lsls	r3, r3, #20
   b98e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b98e6:	2400      	movs	r4, #0
   b98e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b98ec:	4622      	mov	r2, r4
   b98ee:	462b      	mov	r3, r5
   b98f0:	f7ff fbf6 	bl	b90e0 <__aeabi_dmul>
   b98f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b98f8 <_strtod_l>:
   b98f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98fc:	ed2d 8b02 	vpush	{d8}
   b9900:	b09d      	sub	sp, #116	; 0x74
   b9902:	461f      	mov	r7, r3
   b9904:	2300      	movs	r3, #0
   b9906:	9318      	str	r3, [sp, #96]	; 0x60
   b9908:	4ba2      	ldr	r3, [pc, #648]	; (b9b94 <_strtod_l+0x29c>)
   b990a:	9213      	str	r2, [sp, #76]	; 0x4c
   b990c:	681b      	ldr	r3, [r3, #0]
   b990e:	9305      	str	r3, [sp, #20]
   b9910:	4604      	mov	r4, r0
   b9912:	4618      	mov	r0, r3
   b9914:	4688      	mov	r8, r1
   b9916:	f7ff ffaa 	bl	b986e <strlen>
   b991a:	f04f 0a00 	mov.w	sl, #0
   b991e:	4605      	mov	r5, r0
   b9920:	f04f 0b00 	mov.w	fp, #0
   b9924:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b992a:	781a      	ldrb	r2, [r3, #0]
   b992c:	2a2b      	cmp	r2, #43	; 0x2b
   b992e:	d04e      	beq.n	b99ce <_strtod_l+0xd6>
   b9930:	d83b      	bhi.n	b99aa <_strtod_l+0xb2>
   b9932:	2a0d      	cmp	r2, #13
   b9934:	d834      	bhi.n	b99a0 <_strtod_l+0xa8>
   b9936:	2a08      	cmp	r2, #8
   b9938:	d834      	bhi.n	b99a4 <_strtod_l+0xac>
   b993a:	2a00      	cmp	r2, #0
   b993c:	d03e      	beq.n	b99bc <_strtod_l+0xc4>
   b993e:	2300      	movs	r3, #0
   b9940:	930a      	str	r3, [sp, #40]	; 0x28
   b9942:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b9944:	7833      	ldrb	r3, [r6, #0]
   b9946:	2b30      	cmp	r3, #48	; 0x30
   b9948:	f040 80b0 	bne.w	b9aac <_strtod_l+0x1b4>
   b994c:	7873      	ldrb	r3, [r6, #1]
   b994e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9952:	2b58      	cmp	r3, #88	; 0x58
   b9954:	d168      	bne.n	b9a28 <_strtod_l+0x130>
   b9956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9958:	9301      	str	r3, [sp, #4]
   b995a:	ab18      	add	r3, sp, #96	; 0x60
   b995c:	9702      	str	r7, [sp, #8]
   b995e:	9300      	str	r3, [sp, #0]
   b9960:	4a8d      	ldr	r2, [pc, #564]	; (b9b98 <_strtod_l+0x2a0>)
   b9962:	ab19      	add	r3, sp, #100	; 0x64
   b9964:	a917      	add	r1, sp, #92	; 0x5c
   b9966:	4620      	mov	r0, r4
   b9968:	f000 ff8a 	bl	ba880 <__gethex>
   b996c:	f010 0707 	ands.w	r7, r0, #7
   b9970:	4605      	mov	r5, r0
   b9972:	d005      	beq.n	b9980 <_strtod_l+0x88>
   b9974:	2f06      	cmp	r7, #6
   b9976:	d12c      	bne.n	b99d2 <_strtod_l+0xda>
   b9978:	3601      	adds	r6, #1
   b997a:	2300      	movs	r3, #0
   b997c:	9617      	str	r6, [sp, #92]	; 0x5c
   b997e:	930a      	str	r3, [sp, #40]	; 0x28
   b9980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9982:	2b00      	cmp	r3, #0
   b9984:	f040 8590 	bne.w	ba4a8 <_strtod_l+0xbb0>
   b9988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b998a:	b1eb      	cbz	r3, b99c8 <_strtod_l+0xd0>
   b998c:	4652      	mov	r2, sl
   b998e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b9992:	ec43 2b10 	vmov	d0, r2, r3
   b9996:	b01d      	add	sp, #116	; 0x74
   b9998:	ecbd 8b02 	vpop	{d8}
   b999c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b99a0:	2a20      	cmp	r2, #32
   b99a2:	d1cc      	bne.n	b993e <_strtod_l+0x46>
   b99a4:	3301      	adds	r3, #1
   b99a6:	9317      	str	r3, [sp, #92]	; 0x5c
   b99a8:	e7be      	b.n	b9928 <_strtod_l+0x30>
   b99aa:	2a2d      	cmp	r2, #45	; 0x2d
   b99ac:	d1c7      	bne.n	b993e <_strtod_l+0x46>
   b99ae:	2201      	movs	r2, #1
   b99b0:	920a      	str	r2, [sp, #40]	; 0x28
   b99b2:	1c5a      	adds	r2, r3, #1
   b99b4:	9217      	str	r2, [sp, #92]	; 0x5c
   b99b6:	785b      	ldrb	r3, [r3, #1]
   b99b8:	2b00      	cmp	r3, #0
   b99ba:	d1c2      	bne.n	b9942 <_strtod_l+0x4a>
   b99bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b99be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b99c2:	2b00      	cmp	r3, #0
   b99c4:	f040 856e 	bne.w	ba4a4 <_strtod_l+0xbac>
   b99c8:	4652      	mov	r2, sl
   b99ca:	465b      	mov	r3, fp
   b99cc:	e7e1      	b.n	b9992 <_strtod_l+0x9a>
   b99ce:	2200      	movs	r2, #0
   b99d0:	e7ee      	b.n	b99b0 <_strtod_l+0xb8>
   b99d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b99d4:	b13a      	cbz	r2, b99e6 <_strtod_l+0xee>
   b99d6:	2135      	movs	r1, #53	; 0x35
   b99d8:	a81a      	add	r0, sp, #104	; 0x68
   b99da:	f001 feec 	bl	bb7b6 <__copybits>
   b99de:	9918      	ldr	r1, [sp, #96]	; 0x60
   b99e0:	4620      	mov	r0, r4
   b99e2:	f001 faab 	bl	baf3c <_Bfree>
   b99e6:	3f01      	subs	r7, #1
   b99e8:	2f04      	cmp	r7, #4
   b99ea:	d806      	bhi.n	b99fa <_strtod_l+0x102>
   b99ec:	e8df f007 	tbb	[pc, r7]
   b99f0:	1714030a 	.word	0x1714030a
   b99f4:	0a          	.byte	0x0a
   b99f5:	00          	.byte	0x00
   b99f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b99fa:	0728      	lsls	r0, r5, #28
   b99fc:	d5c0      	bpl.n	b9980 <_strtod_l+0x88>
   b99fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b9a02:	e7bd      	b.n	b9980 <_strtod_l+0x88>
   b9a04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9a08:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b9a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b9a0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b9a12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b9a16:	e7f0      	b.n	b99fa <_strtod_l+0x102>
   b9a18:	f8df b180 	ldr.w	fp, [pc, #384]	; b9b9c <_strtod_l+0x2a4>
   b9a1c:	e7ed      	b.n	b99fa <_strtod_l+0x102>
   b9a1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b9a22:	f04f 3aff 	mov.w	sl, #4294967295
   b9a26:	e7e8      	b.n	b99fa <_strtod_l+0x102>
   b9a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a2a:	1c5a      	adds	r2, r3, #1
   b9a2c:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a2e:	785b      	ldrb	r3, [r3, #1]
   b9a30:	2b30      	cmp	r3, #48	; 0x30
   b9a32:	d0f9      	beq.n	b9a28 <_strtod_l+0x130>
   b9a34:	2b00      	cmp	r3, #0
   b9a36:	d0a3      	beq.n	b9980 <_strtod_l+0x88>
   b9a38:	2301      	movs	r3, #1
   b9a3a:	f04f 0900 	mov.w	r9, #0
   b9a3e:	9304      	str	r3, [sp, #16]
   b9a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a42:	9308      	str	r3, [sp, #32]
   b9a44:	f8cd 901c 	str.w	r9, [sp, #28]
   b9a48:	464f      	mov	r7, r9
   b9a4a:	220a      	movs	r2, #10
   b9a4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b9a4e:	7806      	ldrb	r6, [r0, #0]
   b9a50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b9a54:	b2d9      	uxtb	r1, r3
   b9a56:	2909      	cmp	r1, #9
   b9a58:	d92a      	bls.n	b9ab0 <_strtod_l+0x1b8>
   b9a5a:	9905      	ldr	r1, [sp, #20]
   b9a5c:	462a      	mov	r2, r5
   b9a5e:	f7ff ff0e 	bl	b987e <strncmp>
   b9a62:	b398      	cbz	r0, b9acc <_strtod_l+0x1d4>
   b9a64:	2000      	movs	r0, #0
   b9a66:	4632      	mov	r2, r6
   b9a68:	463d      	mov	r5, r7
   b9a6a:	9005      	str	r0, [sp, #20]
   b9a6c:	4603      	mov	r3, r0
   b9a6e:	2a65      	cmp	r2, #101	; 0x65
   b9a70:	d001      	beq.n	b9a76 <_strtod_l+0x17e>
   b9a72:	2a45      	cmp	r2, #69	; 0x45
   b9a74:	d118      	bne.n	b9aa8 <_strtod_l+0x1b0>
   b9a76:	b91d      	cbnz	r5, b9a80 <_strtod_l+0x188>
   b9a78:	9a04      	ldr	r2, [sp, #16]
   b9a7a:	4302      	orrs	r2, r0
   b9a7c:	d09e      	beq.n	b99bc <_strtod_l+0xc4>
   b9a7e:	2500      	movs	r5, #0
   b9a80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b9a84:	f108 0201 	add.w	r2, r8, #1
   b9a88:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a8a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b9a8e:	2a2b      	cmp	r2, #43	; 0x2b
   b9a90:	d075      	beq.n	b9b7e <_strtod_l+0x286>
   b9a92:	2a2d      	cmp	r2, #45	; 0x2d
   b9a94:	d07b      	beq.n	b9b8e <_strtod_l+0x296>
   b9a96:	f04f 0c00 	mov.w	ip, #0
   b9a9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b9a9e:	2909      	cmp	r1, #9
   b9aa0:	f240 8082 	bls.w	b9ba8 <_strtod_l+0x2b0>
   b9aa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9aa8:	2600      	movs	r6, #0
   b9aaa:	e09d      	b.n	b9be8 <_strtod_l+0x2f0>
   b9aac:	2300      	movs	r3, #0
   b9aae:	e7c4      	b.n	b9a3a <_strtod_l+0x142>
   b9ab0:	2f08      	cmp	r7, #8
   b9ab2:	bfd8      	it	le
   b9ab4:	9907      	ldrle	r1, [sp, #28]
   b9ab6:	f100 0001 	add.w	r0, r0, #1
   b9aba:	bfda      	itte	le
   b9abc:	fb02 3301 	mlale	r3, r2, r1, r3
   b9ac0:	9307      	strle	r3, [sp, #28]
   b9ac2:	fb02 3909 	mlagt	r9, r2, r9, r3
   b9ac6:	3701      	adds	r7, #1
   b9ac8:	9017      	str	r0, [sp, #92]	; 0x5c
   b9aca:	e7bf      	b.n	b9a4c <_strtod_l+0x154>
   b9acc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9ace:	195a      	adds	r2, r3, r5
   b9ad0:	9217      	str	r2, [sp, #92]	; 0x5c
   b9ad2:	5d5a      	ldrb	r2, [r3, r5]
   b9ad4:	2f00      	cmp	r7, #0
   b9ad6:	d037      	beq.n	b9b48 <_strtod_l+0x250>
   b9ad8:	9005      	str	r0, [sp, #20]
   b9ada:	463d      	mov	r5, r7
   b9adc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9ae0:	2b09      	cmp	r3, #9
   b9ae2:	d912      	bls.n	b9b0a <_strtod_l+0x212>
   b9ae4:	2301      	movs	r3, #1
   b9ae6:	e7c2      	b.n	b9a6e <_strtod_l+0x176>
   b9ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9aea:	1c5a      	adds	r2, r3, #1
   b9aec:	9217      	str	r2, [sp, #92]	; 0x5c
   b9aee:	785a      	ldrb	r2, [r3, #1]
   b9af0:	3001      	adds	r0, #1
   b9af2:	2a30      	cmp	r2, #48	; 0x30
   b9af4:	d0f8      	beq.n	b9ae8 <_strtod_l+0x1f0>
   b9af6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b9afa:	2b08      	cmp	r3, #8
   b9afc:	f200 84d9 	bhi.w	ba4b2 <_strtod_l+0xbba>
   b9b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9b02:	9005      	str	r0, [sp, #20]
   b9b04:	2000      	movs	r0, #0
   b9b06:	9308      	str	r3, [sp, #32]
   b9b08:	4605      	mov	r5, r0
   b9b0a:	3a30      	subs	r2, #48	; 0x30
   b9b0c:	f100 0301 	add.w	r3, r0, #1
   b9b10:	d014      	beq.n	b9b3c <_strtod_l+0x244>
   b9b12:	9905      	ldr	r1, [sp, #20]
   b9b14:	4419      	add	r1, r3
   b9b16:	9105      	str	r1, [sp, #20]
   b9b18:	462b      	mov	r3, r5
   b9b1a:	eb00 0e05 	add.w	lr, r0, r5
   b9b1e:	210a      	movs	r1, #10
   b9b20:	4573      	cmp	r3, lr
   b9b22:	d113      	bne.n	b9b4c <_strtod_l+0x254>
   b9b24:	182b      	adds	r3, r5, r0
   b9b26:	2b08      	cmp	r3, #8
   b9b28:	f105 0501 	add.w	r5, r5, #1
   b9b2c:	4405      	add	r5, r0
   b9b2e:	dc1c      	bgt.n	b9b6a <_strtod_l+0x272>
   b9b30:	9907      	ldr	r1, [sp, #28]
   b9b32:	230a      	movs	r3, #10
   b9b34:	fb03 2301 	mla	r3, r3, r1, r2
   b9b38:	9307      	str	r3, [sp, #28]
   b9b3a:	2300      	movs	r3, #0
   b9b3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b3e:	1c51      	adds	r1, r2, #1
   b9b40:	9117      	str	r1, [sp, #92]	; 0x5c
   b9b42:	7852      	ldrb	r2, [r2, #1]
   b9b44:	4618      	mov	r0, r3
   b9b46:	e7c9      	b.n	b9adc <_strtod_l+0x1e4>
   b9b48:	4638      	mov	r0, r7
   b9b4a:	e7d2      	b.n	b9af2 <_strtod_l+0x1fa>
   b9b4c:	2b08      	cmp	r3, #8
   b9b4e:	dc04      	bgt.n	b9b5a <_strtod_l+0x262>
   b9b50:	9e07      	ldr	r6, [sp, #28]
   b9b52:	434e      	muls	r6, r1
   b9b54:	9607      	str	r6, [sp, #28]
   b9b56:	3301      	adds	r3, #1
   b9b58:	e7e2      	b.n	b9b20 <_strtod_l+0x228>
   b9b5a:	f103 0c01 	add.w	ip, r3, #1
   b9b5e:	f1bc 0f10 	cmp.w	ip, #16
   b9b62:	bfd8      	it	le
   b9b64:	fb01 f909 	mulle.w	r9, r1, r9
   b9b68:	e7f5      	b.n	b9b56 <_strtod_l+0x25e>
   b9b6a:	2d10      	cmp	r5, #16
   b9b6c:	bfdc      	itt	le
   b9b6e:	230a      	movle	r3, #10
   b9b70:	fb03 2909 	mlale	r9, r3, r9, r2
   b9b74:	e7e1      	b.n	b9b3a <_strtod_l+0x242>
   b9b76:	2300      	movs	r3, #0
   b9b78:	9305      	str	r3, [sp, #20]
   b9b7a:	2301      	movs	r3, #1
   b9b7c:	e77c      	b.n	b9a78 <_strtod_l+0x180>
   b9b7e:	f04f 0c00 	mov.w	ip, #0
   b9b82:	f108 0202 	add.w	r2, r8, #2
   b9b86:	9217      	str	r2, [sp, #92]	; 0x5c
   b9b88:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9b8c:	e785      	b.n	b9a9a <_strtod_l+0x1a2>
   b9b8e:	f04f 0c01 	mov.w	ip, #1
   b9b92:	e7f6      	b.n	b9b82 <_strtod_l+0x28a>
   b9b94:	000bc618 	.word	0x000bc618
   b9b98:	000bc3ac 	.word	0x000bc3ac
   b9b9c:	7ff00000 	.word	0x7ff00000
   b9ba0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9ba2:	1c51      	adds	r1, r2, #1
   b9ba4:	9117      	str	r1, [sp, #92]	; 0x5c
   b9ba6:	7852      	ldrb	r2, [r2, #1]
   b9ba8:	2a30      	cmp	r2, #48	; 0x30
   b9baa:	d0f9      	beq.n	b9ba0 <_strtod_l+0x2a8>
   b9bac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9bb0:	2908      	cmp	r1, #8
   b9bb2:	f63f af79 	bhi.w	b9aa8 <_strtod_l+0x1b0>
   b9bb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b9bba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9bbc:	9206      	str	r2, [sp, #24]
   b9bbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9bc0:	1c51      	adds	r1, r2, #1
   b9bc2:	9117      	str	r1, [sp, #92]	; 0x5c
   b9bc4:	7852      	ldrb	r2, [r2, #1]
   b9bc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b9bca:	2e09      	cmp	r6, #9
   b9bcc:	d937      	bls.n	b9c3e <_strtod_l+0x346>
   b9bce:	9e06      	ldr	r6, [sp, #24]
   b9bd0:	1b89      	subs	r1, r1, r6
   b9bd2:	2908      	cmp	r1, #8
   b9bd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9bd8:	dc02      	bgt.n	b9be0 <_strtod_l+0x2e8>
   b9bda:	4576      	cmp	r6, lr
   b9bdc:	bfa8      	it	ge
   b9bde:	4676      	movge	r6, lr
   b9be0:	f1bc 0f00 	cmp.w	ip, #0
   b9be4:	d000      	beq.n	b9be8 <_strtod_l+0x2f0>
   b9be6:	4276      	negs	r6, r6
   b9be8:	2d00      	cmp	r5, #0
   b9bea:	d14d      	bne.n	b9c88 <_strtod_l+0x390>
   b9bec:	9904      	ldr	r1, [sp, #16]
   b9bee:	4301      	orrs	r1, r0
   b9bf0:	f47f aec6 	bne.w	b9980 <_strtod_l+0x88>
   b9bf4:	2b00      	cmp	r3, #0
   b9bf6:	f47f aee1 	bne.w	b99bc <_strtod_l+0xc4>
   b9bfa:	2a69      	cmp	r2, #105	; 0x69
   b9bfc:	d027      	beq.n	b9c4e <_strtod_l+0x356>
   b9bfe:	dc24      	bgt.n	b9c4a <_strtod_l+0x352>
   b9c00:	2a49      	cmp	r2, #73	; 0x49
   b9c02:	d024      	beq.n	b9c4e <_strtod_l+0x356>
   b9c04:	2a4e      	cmp	r2, #78	; 0x4e
   b9c06:	f47f aed9 	bne.w	b99bc <_strtod_l+0xc4>
   b9c0a:	499f      	ldr	r1, [pc, #636]	; (b9e88 <_strtod_l+0x590>)
   b9c0c:	a817      	add	r0, sp, #92	; 0x5c
   b9c0e:	f001 f88f 	bl	bad30 <__match>
   b9c12:	2800      	cmp	r0, #0
   b9c14:	f43f aed2 	beq.w	b99bc <_strtod_l+0xc4>
   b9c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9c1a:	781b      	ldrb	r3, [r3, #0]
   b9c1c:	2b28      	cmp	r3, #40	; 0x28
   b9c1e:	d12d      	bne.n	b9c7c <_strtod_l+0x384>
   b9c20:	499a      	ldr	r1, [pc, #616]	; (b9e8c <_strtod_l+0x594>)
   b9c22:	aa1a      	add	r2, sp, #104	; 0x68
   b9c24:	a817      	add	r0, sp, #92	; 0x5c
   b9c26:	f001 f897 	bl	bad58 <__hexnan>
   b9c2a:	2805      	cmp	r0, #5
   b9c2c:	d126      	bne.n	b9c7c <_strtod_l+0x384>
   b9c2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9c30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b9c34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9c38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9c3c:	e6a0      	b.n	b9980 <_strtod_l+0x88>
   b9c3e:	210a      	movs	r1, #10
   b9c40:	fb01 2e0e 	mla	lr, r1, lr, r2
   b9c44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9c48:	e7b9      	b.n	b9bbe <_strtod_l+0x2c6>
   b9c4a:	2a6e      	cmp	r2, #110	; 0x6e
   b9c4c:	e7db      	b.n	b9c06 <_strtod_l+0x30e>
   b9c4e:	4990      	ldr	r1, [pc, #576]	; (b9e90 <_strtod_l+0x598>)
   b9c50:	a817      	add	r0, sp, #92	; 0x5c
   b9c52:	f001 f86d 	bl	bad30 <__match>
   b9c56:	2800      	cmp	r0, #0
   b9c58:	f43f aeb0 	beq.w	b99bc <_strtod_l+0xc4>
   b9c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9c5e:	498d      	ldr	r1, [pc, #564]	; (b9e94 <_strtod_l+0x59c>)
   b9c60:	3b01      	subs	r3, #1
   b9c62:	a817      	add	r0, sp, #92	; 0x5c
   b9c64:	9317      	str	r3, [sp, #92]	; 0x5c
   b9c66:	f001 f863 	bl	bad30 <__match>
   b9c6a:	b910      	cbnz	r0, b9c72 <_strtod_l+0x37a>
   b9c6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9c6e:	3301      	adds	r3, #1
   b9c70:	9317      	str	r3, [sp, #92]	; 0x5c
   b9c72:	f8df b230 	ldr.w	fp, [pc, #560]	; b9ea4 <_strtod_l+0x5ac>
   b9c76:	f04f 0a00 	mov.w	sl, #0
   b9c7a:	e681      	b.n	b9980 <_strtod_l+0x88>
   b9c7c:	4886      	ldr	r0, [pc, #536]	; (b9e98 <_strtod_l+0x5a0>)
   b9c7e:	f001 fdef 	bl	bb860 <nan>
   b9c82:	ec5b ab10 	vmov	sl, fp, d0
   b9c86:	e67b      	b.n	b9980 <_strtod_l+0x88>
   b9c88:	9b05      	ldr	r3, [sp, #20]
   b9c8a:	9807      	ldr	r0, [sp, #28]
   b9c8c:	1af3      	subs	r3, r6, r3
   b9c8e:	2f00      	cmp	r7, #0
   b9c90:	bf08      	it	eq
   b9c92:	462f      	moveq	r7, r5
   b9c94:	2d10      	cmp	r5, #16
   b9c96:	9306      	str	r3, [sp, #24]
   b9c98:	46a8      	mov	r8, r5
   b9c9a:	bfa8      	it	ge
   b9c9c:	f04f 0810 	movge.w	r8, #16
   b9ca0:	f7ff f9a4 	bl	b8fec <__aeabi_ui2d>
   b9ca4:	2d09      	cmp	r5, #9
   b9ca6:	4682      	mov	sl, r0
   b9ca8:	468b      	mov	fp, r1
   b9caa:	dd13      	ble.n	b9cd4 <_strtod_l+0x3dc>
   b9cac:	4b7b      	ldr	r3, [pc, #492]	; (b9e9c <_strtod_l+0x5a4>)
   b9cae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b9cb2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b9cb6:	f7ff fa13 	bl	b90e0 <__aeabi_dmul>
   b9cba:	4682      	mov	sl, r0
   b9cbc:	4648      	mov	r0, r9
   b9cbe:	468b      	mov	fp, r1
   b9cc0:	f7ff f994 	bl	b8fec <__aeabi_ui2d>
   b9cc4:	4602      	mov	r2, r0
   b9cc6:	460b      	mov	r3, r1
   b9cc8:	4650      	mov	r0, sl
   b9cca:	4659      	mov	r1, fp
   b9ccc:	f7ff f852 	bl	b8d74 <__adddf3>
   b9cd0:	4682      	mov	sl, r0
   b9cd2:	468b      	mov	fp, r1
   b9cd4:	2d0f      	cmp	r5, #15
   b9cd6:	dc38      	bgt.n	b9d4a <_strtod_l+0x452>
   b9cd8:	9b06      	ldr	r3, [sp, #24]
   b9cda:	2b00      	cmp	r3, #0
   b9cdc:	f43f ae50 	beq.w	b9980 <_strtod_l+0x88>
   b9ce0:	dd24      	ble.n	b9d2c <_strtod_l+0x434>
   b9ce2:	2b16      	cmp	r3, #22
   b9ce4:	dc0b      	bgt.n	b9cfe <_strtod_l+0x406>
   b9ce6:	496d      	ldr	r1, [pc, #436]	; (b9e9c <_strtod_l+0x5a4>)
   b9ce8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9cec:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9cf0:	4652      	mov	r2, sl
   b9cf2:	465b      	mov	r3, fp
   b9cf4:	f7ff f9f4 	bl	b90e0 <__aeabi_dmul>
   b9cf8:	4682      	mov	sl, r0
   b9cfa:	468b      	mov	fp, r1
   b9cfc:	e640      	b.n	b9980 <_strtod_l+0x88>
   b9cfe:	9a06      	ldr	r2, [sp, #24]
   b9d00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9d04:	4293      	cmp	r3, r2
   b9d06:	db20      	blt.n	b9d4a <_strtod_l+0x452>
   b9d08:	4c64      	ldr	r4, [pc, #400]	; (b9e9c <_strtod_l+0x5a4>)
   b9d0a:	f1c5 050f 	rsb	r5, r5, #15
   b9d0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9d12:	4652      	mov	r2, sl
   b9d14:	465b      	mov	r3, fp
   b9d16:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9d1a:	f7ff f9e1 	bl	b90e0 <__aeabi_dmul>
   b9d1e:	9b06      	ldr	r3, [sp, #24]
   b9d20:	1b5d      	subs	r5, r3, r5
   b9d22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9d26:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9d2a:	e7e3      	b.n	b9cf4 <_strtod_l+0x3fc>
   b9d2c:	9b06      	ldr	r3, [sp, #24]
   b9d2e:	3316      	adds	r3, #22
   b9d30:	db0b      	blt.n	b9d4a <_strtod_l+0x452>
   b9d32:	9b05      	ldr	r3, [sp, #20]
   b9d34:	1b9e      	subs	r6, r3, r6
   b9d36:	4b59      	ldr	r3, [pc, #356]	; (b9e9c <_strtod_l+0x5a4>)
   b9d38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9d3c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9d40:	4650      	mov	r0, sl
   b9d42:	4659      	mov	r1, fp
   b9d44:	f7ff faf6 	bl	b9334 <__aeabi_ddiv>
   b9d48:	e7d6      	b.n	b9cf8 <_strtod_l+0x400>
   b9d4a:	9b06      	ldr	r3, [sp, #24]
   b9d4c:	eba5 0808 	sub.w	r8, r5, r8
   b9d50:	4498      	add	r8, r3
   b9d52:	f1b8 0f00 	cmp.w	r8, #0
   b9d56:	dd74      	ble.n	b9e42 <_strtod_l+0x54a>
   b9d58:	f018 030f 	ands.w	r3, r8, #15
   b9d5c:	d00a      	beq.n	b9d74 <_strtod_l+0x47c>
   b9d5e:	494f      	ldr	r1, [pc, #316]	; (b9e9c <_strtod_l+0x5a4>)
   b9d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9d64:	4652      	mov	r2, sl
   b9d66:	465b      	mov	r3, fp
   b9d68:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9d6c:	f7ff f9b8 	bl	b90e0 <__aeabi_dmul>
   b9d70:	4682      	mov	sl, r0
   b9d72:	468b      	mov	fp, r1
   b9d74:	f038 080f 	bics.w	r8, r8, #15
   b9d78:	d04f      	beq.n	b9e1a <_strtod_l+0x522>
   b9d7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9d7e:	dd22      	ble.n	b9dc6 <_strtod_l+0x4ce>
   b9d80:	2500      	movs	r5, #0
   b9d82:	462e      	mov	r6, r5
   b9d84:	9507      	str	r5, [sp, #28]
   b9d86:	9505      	str	r5, [sp, #20]
   b9d88:	2322      	movs	r3, #34	; 0x22
   b9d8a:	f8df b118 	ldr.w	fp, [pc, #280]	; b9ea4 <_strtod_l+0x5ac>
   b9d8e:	6023      	str	r3, [r4, #0]
   b9d90:	f04f 0a00 	mov.w	sl, #0
   b9d94:	9b07      	ldr	r3, [sp, #28]
   b9d96:	2b00      	cmp	r3, #0
   b9d98:	f43f adf2 	beq.w	b9980 <_strtod_l+0x88>
   b9d9c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d9e:	4620      	mov	r0, r4
   b9da0:	f001 f8cc 	bl	baf3c <_Bfree>
   b9da4:	9905      	ldr	r1, [sp, #20]
   b9da6:	4620      	mov	r0, r4
   b9da8:	f001 f8c8 	bl	baf3c <_Bfree>
   b9dac:	4631      	mov	r1, r6
   b9dae:	4620      	mov	r0, r4
   b9db0:	f001 f8c4 	bl	baf3c <_Bfree>
   b9db4:	9907      	ldr	r1, [sp, #28]
   b9db6:	4620      	mov	r0, r4
   b9db8:	f001 f8c0 	bl	baf3c <_Bfree>
   b9dbc:	4629      	mov	r1, r5
   b9dbe:	4620      	mov	r0, r4
   b9dc0:	f001 f8bc 	bl	baf3c <_Bfree>
   b9dc4:	e5dc      	b.n	b9980 <_strtod_l+0x88>
   b9dc6:	4b36      	ldr	r3, [pc, #216]	; (b9ea0 <_strtod_l+0x5a8>)
   b9dc8:	9304      	str	r3, [sp, #16]
   b9dca:	2300      	movs	r3, #0
   b9dcc:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9dd0:	4650      	mov	r0, sl
   b9dd2:	4659      	mov	r1, fp
   b9dd4:	4699      	mov	r9, r3
   b9dd6:	f1b8 0f01 	cmp.w	r8, #1
   b9dda:	dc21      	bgt.n	b9e20 <_strtod_l+0x528>
   b9ddc:	b10b      	cbz	r3, b9de2 <_strtod_l+0x4ea>
   b9dde:	4682      	mov	sl, r0
   b9de0:	468b      	mov	fp, r1
   b9de2:	4b2f      	ldr	r3, [pc, #188]	; (b9ea0 <_strtod_l+0x5a8>)
   b9de4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9de8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9dec:	4652      	mov	r2, sl
   b9dee:	465b      	mov	r3, fp
   b9df0:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9df4:	f7ff f974 	bl	b90e0 <__aeabi_dmul>
   b9df8:	4b2a      	ldr	r3, [pc, #168]	; (b9ea4 <_strtod_l+0x5ac>)
   b9dfa:	460a      	mov	r2, r1
   b9dfc:	400b      	ands	r3, r1
   b9dfe:	492a      	ldr	r1, [pc, #168]	; (b9ea8 <_strtod_l+0x5b0>)
   b9e00:	428b      	cmp	r3, r1
   b9e02:	4682      	mov	sl, r0
   b9e04:	d8bc      	bhi.n	b9d80 <_strtod_l+0x488>
   b9e06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9e0a:	428b      	cmp	r3, r1
   b9e0c:	bf86      	itte	hi
   b9e0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9eac <_strtod_l+0x5b4>
   b9e12:	f04f 3aff 	movhi.w	sl, #4294967295
   b9e16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9e1a:	2300      	movs	r3, #0
   b9e1c:	9304      	str	r3, [sp, #16]
   b9e1e:	e084      	b.n	b9f2a <_strtod_l+0x632>
   b9e20:	f018 0f01 	tst.w	r8, #1
   b9e24:	d005      	beq.n	b9e32 <_strtod_l+0x53a>
   b9e26:	9b04      	ldr	r3, [sp, #16]
   b9e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9e2c:	f7ff f958 	bl	b90e0 <__aeabi_dmul>
   b9e30:	2301      	movs	r3, #1
   b9e32:	9a04      	ldr	r2, [sp, #16]
   b9e34:	3208      	adds	r2, #8
   b9e36:	f109 0901 	add.w	r9, r9, #1
   b9e3a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9e3e:	9204      	str	r2, [sp, #16]
   b9e40:	e7c9      	b.n	b9dd6 <_strtod_l+0x4de>
   b9e42:	d0ea      	beq.n	b9e1a <_strtod_l+0x522>
   b9e44:	f1c8 0800 	rsb	r8, r8, #0
   b9e48:	f018 020f 	ands.w	r2, r8, #15
   b9e4c:	d00a      	beq.n	b9e64 <_strtod_l+0x56c>
   b9e4e:	4b13      	ldr	r3, [pc, #76]	; (b9e9c <_strtod_l+0x5a4>)
   b9e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9e54:	4650      	mov	r0, sl
   b9e56:	4659      	mov	r1, fp
   b9e58:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9e5c:	f7ff fa6a 	bl	b9334 <__aeabi_ddiv>
   b9e60:	4682      	mov	sl, r0
   b9e62:	468b      	mov	fp, r1
   b9e64:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9e68:	d0d7      	beq.n	b9e1a <_strtod_l+0x522>
   b9e6a:	f1b8 0f1f 	cmp.w	r8, #31
   b9e6e:	dd1f      	ble.n	b9eb0 <_strtod_l+0x5b8>
   b9e70:	2500      	movs	r5, #0
   b9e72:	462e      	mov	r6, r5
   b9e74:	9507      	str	r5, [sp, #28]
   b9e76:	9505      	str	r5, [sp, #20]
   b9e78:	2322      	movs	r3, #34	; 0x22
   b9e7a:	f04f 0a00 	mov.w	sl, #0
   b9e7e:	f04f 0b00 	mov.w	fp, #0
   b9e82:	6023      	str	r3, [r4, #0]
   b9e84:	e786      	b.n	b9d94 <_strtod_l+0x49c>
   b9e86:	bf00      	nop
   b9e88:	000bc3a6 	.word	0x000bc3a6
   b9e8c:	000bc3c0 	.word	0x000bc3c0
   b9e90:	000bc39d 	.word	0x000bc39d
   b9e94:	000bc3a0 	.word	0x000bc3a0
   b9e98:	000bbc7e 	.word	0x000bbc7e
   b9e9c:	000bc6d8 	.word	0x000bc6d8
   b9ea0:	000bc6b0 	.word	0x000bc6b0
   b9ea4:	7ff00000 	.word	0x7ff00000
   b9ea8:	7ca00000 	.word	0x7ca00000
   b9eac:	7fefffff 	.word	0x7fefffff
   b9eb0:	f018 0310 	ands.w	r3, r8, #16
   b9eb4:	bf18      	it	ne
   b9eb6:	236a      	movne	r3, #106	; 0x6a
   b9eb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; ba268 <_strtod_l+0x970>
   b9ebc:	9304      	str	r3, [sp, #16]
   b9ebe:	4650      	mov	r0, sl
   b9ec0:	4659      	mov	r1, fp
   b9ec2:	2300      	movs	r3, #0
   b9ec4:	f018 0f01 	tst.w	r8, #1
   b9ec8:	d004      	beq.n	b9ed4 <_strtod_l+0x5dc>
   b9eca:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9ece:	f7ff f907 	bl	b90e0 <__aeabi_dmul>
   b9ed2:	2301      	movs	r3, #1
   b9ed4:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9ed8:	f109 0908 	add.w	r9, r9, #8
   b9edc:	d1f2      	bne.n	b9ec4 <_strtod_l+0x5cc>
   b9ede:	b10b      	cbz	r3, b9ee4 <_strtod_l+0x5ec>
   b9ee0:	4682      	mov	sl, r0
   b9ee2:	468b      	mov	fp, r1
   b9ee4:	9b04      	ldr	r3, [sp, #16]
   b9ee6:	b1c3      	cbz	r3, b9f1a <_strtod_l+0x622>
   b9ee8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9eec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9ef0:	2b00      	cmp	r3, #0
   b9ef2:	4659      	mov	r1, fp
   b9ef4:	dd11      	ble.n	b9f1a <_strtod_l+0x622>
   b9ef6:	2b1f      	cmp	r3, #31
   b9ef8:	f340 8124 	ble.w	ba144 <_strtod_l+0x84c>
   b9efc:	2b34      	cmp	r3, #52	; 0x34
   b9efe:	bfde      	ittt	le
   b9f00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9f04:	f04f 33ff 	movle.w	r3, #4294967295
   b9f08:	fa03 f202 	lslle.w	r2, r3, r2
   b9f0c:	f04f 0a00 	mov.w	sl, #0
   b9f10:	bfcc      	ite	gt
   b9f12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9f16:	ea02 0b01 	andle.w	fp, r2, r1
   b9f1a:	2200      	movs	r2, #0
   b9f1c:	2300      	movs	r3, #0
   b9f1e:	4650      	mov	r0, sl
   b9f20:	4659      	mov	r1, fp
   b9f22:	f7ff fb45 	bl	b95b0 <__aeabi_dcmpeq>
   b9f26:	2800      	cmp	r0, #0
   b9f28:	d1a2      	bne.n	b9e70 <_strtod_l+0x578>
   b9f2a:	9b07      	ldr	r3, [sp, #28]
   b9f2c:	9300      	str	r3, [sp, #0]
   b9f2e:	9908      	ldr	r1, [sp, #32]
   b9f30:	462b      	mov	r3, r5
   b9f32:	463a      	mov	r2, r7
   b9f34:	4620      	mov	r0, r4
   b9f36:	f001 f869 	bl	bb00c <__s2b>
   b9f3a:	9007      	str	r0, [sp, #28]
   b9f3c:	2800      	cmp	r0, #0
   b9f3e:	f43f af1f 	beq.w	b9d80 <_strtod_l+0x488>
   b9f42:	9b05      	ldr	r3, [sp, #20]
   b9f44:	1b9e      	subs	r6, r3, r6
   b9f46:	9b06      	ldr	r3, [sp, #24]
   b9f48:	2b00      	cmp	r3, #0
   b9f4a:	bfb4      	ite	lt
   b9f4c:	4633      	movlt	r3, r6
   b9f4e:	2300      	movge	r3, #0
   b9f50:	930c      	str	r3, [sp, #48]	; 0x30
   b9f52:	9b06      	ldr	r3, [sp, #24]
   b9f54:	2500      	movs	r5, #0
   b9f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9f5a:	9312      	str	r3, [sp, #72]	; 0x48
   b9f5c:	462e      	mov	r6, r5
   b9f5e:	9b07      	ldr	r3, [sp, #28]
   b9f60:	4620      	mov	r0, r4
   b9f62:	6859      	ldr	r1, [r3, #4]
   b9f64:	f000 ffaa 	bl	baebc <_Balloc>
   b9f68:	9005      	str	r0, [sp, #20]
   b9f6a:	2800      	cmp	r0, #0
   b9f6c:	f43f af0c 	beq.w	b9d88 <_strtod_l+0x490>
   b9f70:	9b07      	ldr	r3, [sp, #28]
   b9f72:	691a      	ldr	r2, [r3, #16]
   b9f74:	3202      	adds	r2, #2
   b9f76:	f103 010c 	add.w	r1, r3, #12
   b9f7a:	0092      	lsls	r2, r2, #2
   b9f7c:	300c      	adds	r0, #12
   b9f7e:	f7ff fbd8 	bl	b9732 <memcpy>
   b9f82:	ec4b ab10 	vmov	d0, sl, fp
   b9f86:	aa1a      	add	r2, sp, #104	; 0x68
   b9f88:	a919      	add	r1, sp, #100	; 0x64
   b9f8a:	4620      	mov	r0, r4
   b9f8c:	f001 fb84 	bl	bb698 <__d2b>
   b9f90:	ec4b ab18 	vmov	d8, sl, fp
   b9f94:	9018      	str	r0, [sp, #96]	; 0x60
   b9f96:	2800      	cmp	r0, #0
   b9f98:	f43f aef6 	beq.w	b9d88 <_strtod_l+0x490>
   b9f9c:	2101      	movs	r1, #1
   b9f9e:	4620      	mov	r0, r4
   b9fa0:	f001 f8ce 	bl	bb140 <__i2b>
   b9fa4:	4606      	mov	r6, r0
   b9fa6:	2800      	cmp	r0, #0
   b9fa8:	f43f aeee 	beq.w	b9d88 <_strtod_l+0x490>
   b9fac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9fae:	9904      	ldr	r1, [sp, #16]
   b9fb0:	2b00      	cmp	r3, #0
   b9fb2:	bfab      	itete	ge
   b9fb4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9fb6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9fb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9fba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9fbe:	bfac      	ite	ge
   b9fc0:	eb03 0902 	addge.w	r9, r3, r2
   b9fc4:	1ad7      	sublt	r7, r2, r3
   b9fc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9fc8:	eba3 0801 	sub.w	r8, r3, r1
   b9fcc:	4490      	add	r8, r2
   b9fce:	4ba1      	ldr	r3, [pc, #644]	; (ba254 <_strtod_l+0x95c>)
   b9fd0:	f108 38ff 	add.w	r8, r8, #4294967295
   b9fd4:	4598      	cmp	r8, r3
   b9fd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9fda:	f280 80c7 	bge.w	ba16c <_strtod_l+0x874>
   b9fde:	eba3 0308 	sub.w	r3, r3, r8
   b9fe2:	2b1f      	cmp	r3, #31
   b9fe4:	eba2 0203 	sub.w	r2, r2, r3
   b9fe8:	f04f 0101 	mov.w	r1, #1
   b9fec:	f300 80b1 	bgt.w	ba152 <_strtod_l+0x85a>
   b9ff0:	fa01 f303 	lsl.w	r3, r1, r3
   b9ff4:	930d      	str	r3, [sp, #52]	; 0x34
   b9ff6:	2300      	movs	r3, #0
   b9ff8:	9308      	str	r3, [sp, #32]
   b9ffa:	eb09 0802 	add.w	r8, r9, r2
   b9ffe:	9b04      	ldr	r3, [sp, #16]
   ba000:	45c1      	cmp	r9, r8
   ba002:	4417      	add	r7, r2
   ba004:	441f      	add	r7, r3
   ba006:	464b      	mov	r3, r9
   ba008:	bfa8      	it	ge
   ba00a:	4643      	movge	r3, r8
   ba00c:	42bb      	cmp	r3, r7
   ba00e:	bfa8      	it	ge
   ba010:	463b      	movge	r3, r7
   ba012:	2b00      	cmp	r3, #0
   ba014:	bfc2      	ittt	gt
   ba016:	eba8 0803 	subgt.w	r8, r8, r3
   ba01a:	1aff      	subgt	r7, r7, r3
   ba01c:	eba9 0903 	subgt.w	r9, r9, r3
   ba020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba022:	2b00      	cmp	r3, #0
   ba024:	dd17      	ble.n	ba056 <_strtod_l+0x75e>
   ba026:	4631      	mov	r1, r6
   ba028:	461a      	mov	r2, r3
   ba02a:	4620      	mov	r0, r4
   ba02c:	f001 f948 	bl	bb2c0 <__pow5mult>
   ba030:	4606      	mov	r6, r0
   ba032:	2800      	cmp	r0, #0
   ba034:	f43f aea8 	beq.w	b9d88 <_strtod_l+0x490>
   ba038:	4601      	mov	r1, r0
   ba03a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba03c:	4620      	mov	r0, r4
   ba03e:	f001 f895 	bl	bb16c <__multiply>
   ba042:	900b      	str	r0, [sp, #44]	; 0x2c
   ba044:	2800      	cmp	r0, #0
   ba046:	f43f ae9f 	beq.w	b9d88 <_strtod_l+0x490>
   ba04a:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba04c:	4620      	mov	r0, r4
   ba04e:	f000 ff75 	bl	baf3c <_Bfree>
   ba052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba054:	9318      	str	r3, [sp, #96]	; 0x60
   ba056:	f1b8 0f00 	cmp.w	r8, #0
   ba05a:	f300 808c 	bgt.w	ba176 <_strtod_l+0x87e>
   ba05e:	9b06      	ldr	r3, [sp, #24]
   ba060:	2b00      	cmp	r3, #0
   ba062:	dd08      	ble.n	ba076 <_strtod_l+0x77e>
   ba064:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba066:	9905      	ldr	r1, [sp, #20]
   ba068:	4620      	mov	r0, r4
   ba06a:	f001 f929 	bl	bb2c0 <__pow5mult>
   ba06e:	9005      	str	r0, [sp, #20]
   ba070:	2800      	cmp	r0, #0
   ba072:	f43f ae89 	beq.w	b9d88 <_strtod_l+0x490>
   ba076:	2f00      	cmp	r7, #0
   ba078:	dd08      	ble.n	ba08c <_strtod_l+0x794>
   ba07a:	9905      	ldr	r1, [sp, #20]
   ba07c:	463a      	mov	r2, r7
   ba07e:	4620      	mov	r0, r4
   ba080:	f001 f978 	bl	bb374 <__lshift>
   ba084:	9005      	str	r0, [sp, #20]
   ba086:	2800      	cmp	r0, #0
   ba088:	f43f ae7e 	beq.w	b9d88 <_strtod_l+0x490>
   ba08c:	f1b9 0f00 	cmp.w	r9, #0
   ba090:	dd08      	ble.n	ba0a4 <_strtod_l+0x7ac>
   ba092:	4631      	mov	r1, r6
   ba094:	464a      	mov	r2, r9
   ba096:	4620      	mov	r0, r4
   ba098:	f001 f96c 	bl	bb374 <__lshift>
   ba09c:	4606      	mov	r6, r0
   ba09e:	2800      	cmp	r0, #0
   ba0a0:	f43f ae72 	beq.w	b9d88 <_strtod_l+0x490>
   ba0a4:	9a05      	ldr	r2, [sp, #20]
   ba0a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba0a8:	4620      	mov	r0, r4
   ba0aa:	f001 f9ef 	bl	bb48c <__mdiff>
   ba0ae:	4605      	mov	r5, r0
   ba0b0:	2800      	cmp	r0, #0
   ba0b2:	f43f ae69 	beq.w	b9d88 <_strtod_l+0x490>
   ba0b6:	68c3      	ldr	r3, [r0, #12]
   ba0b8:	930b      	str	r3, [sp, #44]	; 0x2c
   ba0ba:	2300      	movs	r3, #0
   ba0bc:	60c3      	str	r3, [r0, #12]
   ba0be:	4631      	mov	r1, r6
   ba0c0:	f001 f9c8 	bl	bb454 <__mcmp>
   ba0c4:	2800      	cmp	r0, #0
   ba0c6:	da60      	bge.n	ba18a <_strtod_l+0x892>
   ba0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba0ca:	ea53 030a 	orrs.w	r3, r3, sl
   ba0ce:	f040 8082 	bne.w	ba1d6 <_strtod_l+0x8de>
   ba0d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba0d6:	2b00      	cmp	r3, #0
   ba0d8:	d17d      	bne.n	ba1d6 <_strtod_l+0x8de>
   ba0da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba0de:	0d1b      	lsrs	r3, r3, #20
   ba0e0:	051b      	lsls	r3, r3, #20
   ba0e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   ba0e6:	d976      	bls.n	ba1d6 <_strtod_l+0x8de>
   ba0e8:	696b      	ldr	r3, [r5, #20]
   ba0ea:	b913      	cbnz	r3, ba0f2 <_strtod_l+0x7fa>
   ba0ec:	692b      	ldr	r3, [r5, #16]
   ba0ee:	2b01      	cmp	r3, #1
   ba0f0:	dd71      	ble.n	ba1d6 <_strtod_l+0x8de>
   ba0f2:	4629      	mov	r1, r5
   ba0f4:	2201      	movs	r2, #1
   ba0f6:	4620      	mov	r0, r4
   ba0f8:	f001 f93c 	bl	bb374 <__lshift>
   ba0fc:	4631      	mov	r1, r6
   ba0fe:	4605      	mov	r5, r0
   ba100:	f001 f9a8 	bl	bb454 <__mcmp>
   ba104:	2800      	cmp	r0, #0
   ba106:	dd66      	ble.n	ba1d6 <_strtod_l+0x8de>
   ba108:	9904      	ldr	r1, [sp, #16]
   ba10a:	4a53      	ldr	r2, [pc, #332]	; (ba258 <_strtod_l+0x960>)
   ba10c:	465b      	mov	r3, fp
   ba10e:	2900      	cmp	r1, #0
   ba110:	f000 8081 	beq.w	ba216 <_strtod_l+0x91e>
   ba114:	ea02 010b 	and.w	r1, r2, fp
   ba118:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   ba11c:	dc7b      	bgt.n	ba216 <_strtod_l+0x91e>
   ba11e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   ba122:	f77f aea9 	ble.w	b9e78 <_strtod_l+0x580>
   ba126:	4b4d      	ldr	r3, [pc, #308]	; (ba25c <_strtod_l+0x964>)
   ba128:	4650      	mov	r0, sl
   ba12a:	4659      	mov	r1, fp
   ba12c:	2200      	movs	r2, #0
   ba12e:	f7fe ffd7 	bl	b90e0 <__aeabi_dmul>
   ba132:	460b      	mov	r3, r1
   ba134:	4303      	orrs	r3, r0
   ba136:	bf08      	it	eq
   ba138:	2322      	moveq	r3, #34	; 0x22
   ba13a:	4682      	mov	sl, r0
   ba13c:	468b      	mov	fp, r1
   ba13e:	bf08      	it	eq
   ba140:	6023      	streq	r3, [r4, #0]
   ba142:	e62b      	b.n	b9d9c <_strtod_l+0x4a4>
   ba144:	f04f 32ff 	mov.w	r2, #4294967295
   ba148:	fa02 f303 	lsl.w	r3, r2, r3
   ba14c:	ea03 0a0a 	and.w	sl, r3, sl
   ba150:	e6e3      	b.n	b9f1a <_strtod_l+0x622>
   ba152:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   ba156:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   ba15a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   ba15e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   ba162:	fa01 f308 	lsl.w	r3, r1, r8
   ba166:	9308      	str	r3, [sp, #32]
   ba168:	910d      	str	r1, [sp, #52]	; 0x34
   ba16a:	e746      	b.n	b9ffa <_strtod_l+0x702>
   ba16c:	2300      	movs	r3, #0
   ba16e:	9308      	str	r3, [sp, #32]
   ba170:	2301      	movs	r3, #1
   ba172:	930d      	str	r3, [sp, #52]	; 0x34
   ba174:	e741      	b.n	b9ffa <_strtod_l+0x702>
   ba176:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba178:	4642      	mov	r2, r8
   ba17a:	4620      	mov	r0, r4
   ba17c:	f001 f8fa 	bl	bb374 <__lshift>
   ba180:	9018      	str	r0, [sp, #96]	; 0x60
   ba182:	2800      	cmp	r0, #0
   ba184:	f47f af6b 	bne.w	ba05e <_strtod_l+0x766>
   ba188:	e5fe      	b.n	b9d88 <_strtod_l+0x490>
   ba18a:	465f      	mov	r7, fp
   ba18c:	d16e      	bne.n	ba26c <_strtod_l+0x974>
   ba18e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba190:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba194:	b342      	cbz	r2, ba1e8 <_strtod_l+0x8f0>
   ba196:	4a32      	ldr	r2, [pc, #200]	; (ba260 <_strtod_l+0x968>)
   ba198:	4293      	cmp	r3, r2
   ba19a:	d128      	bne.n	ba1ee <_strtod_l+0x8f6>
   ba19c:	9b04      	ldr	r3, [sp, #16]
   ba19e:	4651      	mov	r1, sl
   ba1a0:	b1eb      	cbz	r3, ba1de <_strtod_l+0x8e6>
   ba1a2:	4b2d      	ldr	r3, [pc, #180]	; (ba258 <_strtod_l+0x960>)
   ba1a4:	403b      	ands	r3, r7
   ba1a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba1aa:	f04f 32ff 	mov.w	r2, #4294967295
   ba1ae:	d819      	bhi.n	ba1e4 <_strtod_l+0x8ec>
   ba1b0:	0d1b      	lsrs	r3, r3, #20
   ba1b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba1b6:	fa02 f303 	lsl.w	r3, r2, r3
   ba1ba:	4299      	cmp	r1, r3
   ba1bc:	d117      	bne.n	ba1ee <_strtod_l+0x8f6>
   ba1be:	4b29      	ldr	r3, [pc, #164]	; (ba264 <_strtod_l+0x96c>)
   ba1c0:	429f      	cmp	r7, r3
   ba1c2:	d102      	bne.n	ba1ca <_strtod_l+0x8d2>
   ba1c4:	3101      	adds	r1, #1
   ba1c6:	f43f addf 	beq.w	b9d88 <_strtod_l+0x490>
   ba1ca:	4b23      	ldr	r3, [pc, #140]	; (ba258 <_strtod_l+0x960>)
   ba1cc:	403b      	ands	r3, r7
   ba1ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   ba1d2:	f04f 0a00 	mov.w	sl, #0
   ba1d6:	9b04      	ldr	r3, [sp, #16]
   ba1d8:	2b00      	cmp	r3, #0
   ba1da:	d1a4      	bne.n	ba126 <_strtod_l+0x82e>
   ba1dc:	e5de      	b.n	b9d9c <_strtod_l+0x4a4>
   ba1de:	f04f 33ff 	mov.w	r3, #4294967295
   ba1e2:	e7ea      	b.n	ba1ba <_strtod_l+0x8c2>
   ba1e4:	4613      	mov	r3, r2
   ba1e6:	e7e8      	b.n	ba1ba <_strtod_l+0x8c2>
   ba1e8:	ea53 030a 	orrs.w	r3, r3, sl
   ba1ec:	d08c      	beq.n	ba108 <_strtod_l+0x810>
   ba1ee:	9b08      	ldr	r3, [sp, #32]
   ba1f0:	b1db      	cbz	r3, ba22a <_strtod_l+0x932>
   ba1f2:	423b      	tst	r3, r7
   ba1f4:	d0ef      	beq.n	ba1d6 <_strtod_l+0x8de>
   ba1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba1f8:	9a04      	ldr	r2, [sp, #16]
   ba1fa:	4650      	mov	r0, sl
   ba1fc:	4659      	mov	r1, fp
   ba1fe:	b1c3      	cbz	r3, ba232 <_strtod_l+0x93a>
   ba200:	f7ff fb5d 	bl	b98be <sulp>
   ba204:	4602      	mov	r2, r0
   ba206:	460b      	mov	r3, r1
   ba208:	ec51 0b18 	vmov	r0, r1, d8
   ba20c:	f7fe fdb2 	bl	b8d74 <__adddf3>
   ba210:	4682      	mov	sl, r0
   ba212:	468b      	mov	fp, r1
   ba214:	e7df      	b.n	ba1d6 <_strtod_l+0x8de>
   ba216:	4013      	ands	r3, r2
   ba218:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   ba21c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   ba220:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   ba224:	f04f 3aff 	mov.w	sl, #4294967295
   ba228:	e7d5      	b.n	ba1d6 <_strtod_l+0x8de>
   ba22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba22c:	ea13 0f0a 	tst.w	r3, sl
   ba230:	e7e0      	b.n	ba1f4 <_strtod_l+0x8fc>
   ba232:	f7ff fb44 	bl	b98be <sulp>
   ba236:	4602      	mov	r2, r0
   ba238:	460b      	mov	r3, r1
   ba23a:	ec51 0b18 	vmov	r0, r1, d8
   ba23e:	f7fe fd97 	bl	b8d70 <__aeabi_dsub>
   ba242:	2200      	movs	r2, #0
   ba244:	2300      	movs	r3, #0
   ba246:	4682      	mov	sl, r0
   ba248:	468b      	mov	fp, r1
   ba24a:	f7ff f9b1 	bl	b95b0 <__aeabi_dcmpeq>
   ba24e:	2800      	cmp	r0, #0
   ba250:	d0c1      	beq.n	ba1d6 <_strtod_l+0x8de>
   ba252:	e611      	b.n	b9e78 <_strtod_l+0x580>
   ba254:	fffffc02 	.word	0xfffffc02
   ba258:	7ff00000 	.word	0x7ff00000
   ba25c:	39500000 	.word	0x39500000
   ba260:	000fffff 	.word	0x000fffff
   ba264:	7fefffff 	.word	0x7fefffff
   ba268:	000bc3d8 	.word	0x000bc3d8
   ba26c:	4631      	mov	r1, r6
   ba26e:	4628      	mov	r0, r5
   ba270:	f001 fa6e 	bl	bb750 <__ratio>
   ba274:	ec59 8b10 	vmov	r8, r9, d0
   ba278:	ee10 0a10 	vmov	r0, s0
   ba27c:	2200      	movs	r2, #0
   ba27e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba282:	4649      	mov	r1, r9
   ba284:	f7ff f9a8 	bl	b95d8 <__aeabi_dcmple>
   ba288:	2800      	cmp	r0, #0
   ba28a:	d07a      	beq.n	ba382 <_strtod_l+0xa8a>
   ba28c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba28e:	2b00      	cmp	r3, #0
   ba290:	d04a      	beq.n	ba328 <_strtod_l+0xa30>
   ba292:	4b95      	ldr	r3, [pc, #596]	; (ba4e8 <_strtod_l+0xbf0>)
   ba294:	2200      	movs	r2, #0
   ba296:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba29a:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba4e8 <_strtod_l+0xbf0>
   ba29e:	f04f 0800 	mov.w	r8, #0
   ba2a2:	4b92      	ldr	r3, [pc, #584]	; (ba4ec <_strtod_l+0xbf4>)
   ba2a4:	403b      	ands	r3, r7
   ba2a6:	930d      	str	r3, [sp, #52]	; 0x34
   ba2a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba2aa:	4b91      	ldr	r3, [pc, #580]	; (ba4f0 <_strtod_l+0xbf8>)
   ba2ac:	429a      	cmp	r2, r3
   ba2ae:	f040 80b0 	bne.w	ba412 <_strtod_l+0xb1a>
   ba2b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba2b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   ba2ba:	ec4b ab10 	vmov	d0, sl, fp
   ba2be:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba2c2:	f001 f96d 	bl	bb5a0 <__ulp>
   ba2c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba2ca:	ec53 2b10 	vmov	r2, r3, d0
   ba2ce:	f7fe ff07 	bl	b90e0 <__aeabi_dmul>
   ba2d2:	4652      	mov	r2, sl
   ba2d4:	465b      	mov	r3, fp
   ba2d6:	f7fe fd4d 	bl	b8d74 <__adddf3>
   ba2da:	460b      	mov	r3, r1
   ba2dc:	4983      	ldr	r1, [pc, #524]	; (ba4ec <_strtod_l+0xbf4>)
   ba2de:	4a85      	ldr	r2, [pc, #532]	; (ba4f4 <_strtod_l+0xbfc>)
   ba2e0:	4019      	ands	r1, r3
   ba2e2:	4291      	cmp	r1, r2
   ba2e4:	4682      	mov	sl, r0
   ba2e6:	d960      	bls.n	ba3aa <_strtod_l+0xab2>
   ba2e8:	ee18 3a90 	vmov	r3, s17
   ba2ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   ba2f0:	4293      	cmp	r3, r2
   ba2f2:	d104      	bne.n	ba2fe <_strtod_l+0xa06>
   ba2f4:	ee18 3a10 	vmov	r3, s16
   ba2f8:	3301      	adds	r3, #1
   ba2fa:	f43f ad45 	beq.w	b9d88 <_strtod_l+0x490>
   ba2fe:	f8df b200 	ldr.w	fp, [pc, #512]	; ba500 <_strtod_l+0xc08>
   ba302:	f04f 3aff 	mov.w	sl, #4294967295
   ba306:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba308:	4620      	mov	r0, r4
   ba30a:	f000 fe17 	bl	baf3c <_Bfree>
   ba30e:	9905      	ldr	r1, [sp, #20]
   ba310:	4620      	mov	r0, r4
   ba312:	f000 fe13 	bl	baf3c <_Bfree>
   ba316:	4631      	mov	r1, r6
   ba318:	4620      	mov	r0, r4
   ba31a:	f000 fe0f 	bl	baf3c <_Bfree>
   ba31e:	4629      	mov	r1, r5
   ba320:	4620      	mov	r0, r4
   ba322:	f000 fe0b 	bl	baf3c <_Bfree>
   ba326:	e61a      	b.n	b9f5e <_strtod_l+0x666>
   ba328:	f1ba 0f00 	cmp.w	sl, #0
   ba32c:	d11b      	bne.n	ba366 <_strtod_l+0xa6e>
   ba32e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba332:	b9f3      	cbnz	r3, ba372 <_strtod_l+0xa7a>
   ba334:	4b6c      	ldr	r3, [pc, #432]	; (ba4e8 <_strtod_l+0xbf0>)
   ba336:	2200      	movs	r2, #0
   ba338:	4640      	mov	r0, r8
   ba33a:	4649      	mov	r1, r9
   ba33c:	f7ff f942 	bl	b95c4 <__aeabi_dcmplt>
   ba340:	b9d0      	cbnz	r0, ba378 <_strtod_l+0xa80>
   ba342:	4640      	mov	r0, r8
   ba344:	4649      	mov	r1, r9
   ba346:	4b6c      	ldr	r3, [pc, #432]	; (ba4f8 <_strtod_l+0xc00>)
   ba348:	2200      	movs	r2, #0
   ba34a:	f7fe fec9 	bl	b90e0 <__aeabi_dmul>
   ba34e:	4680      	mov	r8, r0
   ba350:	4689      	mov	r9, r1
   ba352:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ba356:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   ba35a:	9315      	str	r3, [sp, #84]	; 0x54
   ba35c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ba360:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba364:	e79d      	b.n	ba2a2 <_strtod_l+0x9aa>
   ba366:	f1ba 0f01 	cmp.w	sl, #1
   ba36a:	d102      	bne.n	ba372 <_strtod_l+0xa7a>
   ba36c:	2f00      	cmp	r7, #0
   ba36e:	f43f ad83 	beq.w	b9e78 <_strtod_l+0x580>
   ba372:	4b62      	ldr	r3, [pc, #392]	; (ba4fc <_strtod_l+0xc04>)
   ba374:	2200      	movs	r2, #0
   ba376:	e78e      	b.n	ba296 <_strtod_l+0x99e>
   ba378:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba4f8 <_strtod_l+0xc00>
   ba37c:	f04f 0800 	mov.w	r8, #0
   ba380:	e7e7      	b.n	ba352 <_strtod_l+0xa5a>
   ba382:	4b5d      	ldr	r3, [pc, #372]	; (ba4f8 <_strtod_l+0xc00>)
   ba384:	4640      	mov	r0, r8
   ba386:	4649      	mov	r1, r9
   ba388:	2200      	movs	r2, #0
   ba38a:	f7fe fea9 	bl	b90e0 <__aeabi_dmul>
   ba38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba390:	4680      	mov	r8, r0
   ba392:	4689      	mov	r9, r1
   ba394:	b933      	cbnz	r3, ba3a4 <_strtod_l+0xaac>
   ba396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba39a:	900e      	str	r0, [sp, #56]	; 0x38
   ba39c:	930f      	str	r3, [sp, #60]	; 0x3c
   ba39e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   ba3a2:	e7dd      	b.n	ba360 <_strtod_l+0xa68>
   ba3a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   ba3a8:	e7f9      	b.n	ba39e <_strtod_l+0xaa6>
   ba3aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ba3ae:	9b04      	ldr	r3, [sp, #16]
   ba3b0:	2b00      	cmp	r3, #0
   ba3b2:	d1a8      	bne.n	ba306 <_strtod_l+0xa0e>
   ba3b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba3b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba3ba:	0d1b      	lsrs	r3, r3, #20
   ba3bc:	051b      	lsls	r3, r3, #20
   ba3be:	429a      	cmp	r2, r3
   ba3c0:	d1a1      	bne.n	ba306 <_strtod_l+0xa0e>
   ba3c2:	4640      	mov	r0, r8
   ba3c4:	4649      	mov	r1, r9
   ba3c6:	f001 fa61 	bl	bb88c <__aeabi_d2lz>
   ba3ca:	f7fe fe5b 	bl	b9084 <__aeabi_l2d>
   ba3ce:	4602      	mov	r2, r0
   ba3d0:	460b      	mov	r3, r1
   ba3d2:	4640      	mov	r0, r8
   ba3d4:	4649      	mov	r1, r9
   ba3d6:	f7fe fccb 	bl	b8d70 <__aeabi_dsub>
   ba3da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba3dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba3e0:	ea43 030a 	orr.w	r3, r3, sl
   ba3e4:	4313      	orrs	r3, r2
   ba3e6:	4680      	mov	r8, r0
   ba3e8:	4689      	mov	r9, r1
   ba3ea:	d055      	beq.n	ba498 <_strtod_l+0xba0>
   ba3ec:	a336      	add	r3, pc, #216	; (adr r3, ba4c8 <_strtod_l+0xbd0>)
   ba3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3f2:	f7ff f8e7 	bl	b95c4 <__aeabi_dcmplt>
   ba3f6:	2800      	cmp	r0, #0
   ba3f8:	f47f acd0 	bne.w	b9d9c <_strtod_l+0x4a4>
   ba3fc:	a334      	add	r3, pc, #208	; (adr r3, ba4d0 <_strtod_l+0xbd8>)
   ba3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba402:	4640      	mov	r0, r8
   ba404:	4649      	mov	r1, r9
   ba406:	f7ff f8fb 	bl	b9600 <__aeabi_dcmpgt>
   ba40a:	2800      	cmp	r0, #0
   ba40c:	f43f af7b 	beq.w	ba306 <_strtod_l+0xa0e>
   ba410:	e4c4      	b.n	b9d9c <_strtod_l+0x4a4>
   ba412:	9b04      	ldr	r3, [sp, #16]
   ba414:	b333      	cbz	r3, ba464 <_strtod_l+0xb6c>
   ba416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba418:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba41c:	d822      	bhi.n	ba464 <_strtod_l+0xb6c>
   ba41e:	a32e      	add	r3, pc, #184	; (adr r3, ba4d8 <_strtod_l+0xbe0>)
   ba420:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba424:	4640      	mov	r0, r8
   ba426:	4649      	mov	r1, r9
   ba428:	f7ff f8d6 	bl	b95d8 <__aeabi_dcmple>
   ba42c:	b1a0      	cbz	r0, ba458 <_strtod_l+0xb60>
   ba42e:	4649      	mov	r1, r9
   ba430:	4640      	mov	r0, r8
   ba432:	f7ff f8ef 	bl	b9614 <__aeabi_d2uiz>
   ba436:	2801      	cmp	r0, #1
   ba438:	bf38      	it	cc
   ba43a:	2001      	movcc	r0, #1
   ba43c:	f7fe fdd6 	bl	b8fec <__aeabi_ui2d>
   ba440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba442:	4680      	mov	r8, r0
   ba444:	4689      	mov	r9, r1
   ba446:	bb23      	cbnz	r3, ba492 <_strtod_l+0xb9a>
   ba448:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba44c:	9010      	str	r0, [sp, #64]	; 0x40
   ba44e:	9311      	str	r3, [sp, #68]	; 0x44
   ba450:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba454:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba458:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba45a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba45c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba460:	1a9b      	subs	r3, r3, r2
   ba462:	9309      	str	r3, [sp, #36]	; 0x24
   ba464:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba468:	eeb0 0a48 	vmov.f32	s0, s16
   ba46c:	eef0 0a68 	vmov.f32	s1, s17
   ba470:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba474:	f001 f894 	bl	bb5a0 <__ulp>
   ba478:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba47c:	ec53 2b10 	vmov	r2, r3, d0
   ba480:	f7fe fe2e 	bl	b90e0 <__aeabi_dmul>
   ba484:	ec53 2b18 	vmov	r2, r3, d8
   ba488:	f7fe fc74 	bl	b8d74 <__adddf3>
   ba48c:	4682      	mov	sl, r0
   ba48e:	468b      	mov	fp, r1
   ba490:	e78d      	b.n	ba3ae <_strtod_l+0xab6>
   ba492:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba496:	e7db      	b.n	ba450 <_strtod_l+0xb58>
   ba498:	a311      	add	r3, pc, #68	; (adr r3, ba4e0 <_strtod_l+0xbe8>)
   ba49a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba49e:	f7ff f891 	bl	b95c4 <__aeabi_dcmplt>
   ba4a2:	e7b2      	b.n	ba40a <_strtod_l+0xb12>
   ba4a4:	2300      	movs	r3, #0
   ba4a6:	930a      	str	r3, [sp, #40]	; 0x28
   ba4a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba4aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba4ac:	6013      	str	r3, [r2, #0]
   ba4ae:	f7ff ba6b 	b.w	b9988 <_strtod_l+0x90>
   ba4b2:	2a65      	cmp	r2, #101	; 0x65
   ba4b4:	f43f ab5f 	beq.w	b9b76 <_strtod_l+0x27e>
   ba4b8:	2a45      	cmp	r2, #69	; 0x45
   ba4ba:	f43f ab5c 	beq.w	b9b76 <_strtod_l+0x27e>
   ba4be:	2301      	movs	r3, #1
   ba4c0:	f7ff bb94 	b.w	b9bec <_strtod_l+0x2f4>
   ba4c4:	f3af 8000 	nop.w
   ba4c8:	94a03595 	.word	0x94a03595
   ba4cc:	3fdfffff 	.word	0x3fdfffff
   ba4d0:	35afe535 	.word	0x35afe535
   ba4d4:	3fe00000 	.word	0x3fe00000
   ba4d8:	ffc00000 	.word	0xffc00000
   ba4dc:	41dfffff 	.word	0x41dfffff
   ba4e0:	94a03595 	.word	0x94a03595
   ba4e4:	3fcfffff 	.word	0x3fcfffff
   ba4e8:	3ff00000 	.word	0x3ff00000
   ba4ec:	7ff00000 	.word	0x7ff00000
   ba4f0:	7fe00000 	.word	0x7fe00000
   ba4f4:	7c9fffff 	.word	0x7c9fffff
   ba4f8:	3fe00000 	.word	0x3fe00000
   ba4fc:	bff00000 	.word	0xbff00000
   ba500:	7fefffff 	.word	0x7fefffff

000ba504 <strtod>:
   ba504:	460a      	mov	r2, r1
   ba506:	4601      	mov	r1, r0
   ba508:	4802      	ldr	r0, [pc, #8]	; (ba514 <strtod+0x10>)
   ba50a:	4b03      	ldr	r3, [pc, #12]	; (ba518 <strtod+0x14>)
   ba50c:	6800      	ldr	r0, [r0, #0]
   ba50e:	f7ff b9f3 	b.w	b98f8 <_strtod_l>
   ba512:	bf00      	nop
   ba514:	2003d984 	.word	0x2003d984
   ba518:	2003d9f0 	.word	0x2003d9f0

000ba51c <strtok>:
   ba51c:	4b16      	ldr	r3, [pc, #88]	; (ba578 <strtok+0x5c>)
   ba51e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba520:	681e      	ldr	r6, [r3, #0]
   ba522:	6db4      	ldr	r4, [r6, #88]	; 0x58
   ba524:	4605      	mov	r5, r0
   ba526:	b9fc      	cbnz	r4, ba568 <strtok+0x4c>
   ba528:	2050      	movs	r0, #80	; 0x50
   ba52a:	9101      	str	r1, [sp, #4]
   ba52c:	f7fb fac4 	bl	b5ab8 <malloc>
   ba530:	9901      	ldr	r1, [sp, #4]
   ba532:	65b0      	str	r0, [r6, #88]	; 0x58
   ba534:	4602      	mov	r2, r0
   ba536:	b920      	cbnz	r0, ba542 <strtok+0x26>
   ba538:	4b10      	ldr	r3, [pc, #64]	; (ba57c <strtok+0x60>)
   ba53a:	4811      	ldr	r0, [pc, #68]	; (ba580 <strtok+0x64>)
   ba53c:	2157      	movs	r1, #87	; 0x57
   ba53e:	f7fb fafb 	bl	b5b38 <__assert_func>
   ba542:	e9c0 4400 	strd	r4, r4, [r0]
   ba546:	e9c0 4402 	strd	r4, r4, [r0, #8]
   ba54a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   ba54e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   ba552:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   ba556:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   ba55a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   ba55e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   ba562:	6184      	str	r4, [r0, #24]
   ba564:	7704      	strb	r4, [r0, #28]
   ba566:	6244      	str	r4, [r0, #36]	; 0x24
   ba568:	6db2      	ldr	r2, [r6, #88]	; 0x58
   ba56a:	2301      	movs	r3, #1
   ba56c:	4628      	mov	r0, r5
   ba56e:	b002      	add	sp, #8
   ba570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba574:	f000 b806 	b.w	ba584 <__strtok_r>
   ba578:	2003d984 	.word	0x2003d984
   ba57c:	000bc309 	.word	0x000bc309
   ba580:	000bc400 	.word	0x000bc400

000ba584 <__strtok_r>:
   ba584:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba586:	b908      	cbnz	r0, ba58c <__strtok_r+0x8>
   ba588:	6810      	ldr	r0, [r2, #0]
   ba58a:	b188      	cbz	r0, ba5b0 <__strtok_r+0x2c>
   ba58c:	4604      	mov	r4, r0
   ba58e:	4620      	mov	r0, r4
   ba590:	f814 5b01 	ldrb.w	r5, [r4], #1
   ba594:	460f      	mov	r7, r1
   ba596:	f817 6b01 	ldrb.w	r6, [r7], #1
   ba59a:	b91e      	cbnz	r6, ba5a4 <__strtok_r+0x20>
   ba59c:	b965      	cbnz	r5, ba5b8 <__strtok_r+0x34>
   ba59e:	6015      	str	r5, [r2, #0]
   ba5a0:	4628      	mov	r0, r5
   ba5a2:	e005      	b.n	ba5b0 <__strtok_r+0x2c>
   ba5a4:	42b5      	cmp	r5, r6
   ba5a6:	d1f6      	bne.n	ba596 <__strtok_r+0x12>
   ba5a8:	2b00      	cmp	r3, #0
   ba5aa:	d1f0      	bne.n	ba58e <__strtok_r+0xa>
   ba5ac:	6014      	str	r4, [r2, #0]
   ba5ae:	7003      	strb	r3, [r0, #0]
   ba5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba5b2:	461c      	mov	r4, r3
   ba5b4:	e00c      	b.n	ba5d0 <__strtok_r+0x4c>
   ba5b6:	b915      	cbnz	r5, ba5be <__strtok_r+0x3a>
   ba5b8:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba5bc:	460e      	mov	r6, r1
   ba5be:	f816 5b01 	ldrb.w	r5, [r6], #1
   ba5c2:	42ab      	cmp	r3, r5
   ba5c4:	d1f7      	bne.n	ba5b6 <__strtok_r+0x32>
   ba5c6:	2b00      	cmp	r3, #0
   ba5c8:	d0f3      	beq.n	ba5b2 <__strtok_r+0x2e>
   ba5ca:	2300      	movs	r3, #0
   ba5cc:	f804 3c01 	strb.w	r3, [r4, #-1]
   ba5d0:	6014      	str	r4, [r2, #0]
   ba5d2:	e7ed      	b.n	ba5b0 <__strtok_r+0x2c>

000ba5d4 <_strtol_l.constprop.0>:
   ba5d4:	2b01      	cmp	r3, #1
   ba5d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba5da:	d001      	beq.n	ba5e0 <_strtol_l.constprop.0+0xc>
   ba5dc:	2b24      	cmp	r3, #36	; 0x24
   ba5de:	d906      	bls.n	ba5ee <_strtol_l.constprop.0+0x1a>
   ba5e0:	f7fb faa2 	bl	b5b28 <__errno>
   ba5e4:	2316      	movs	r3, #22
   ba5e6:	6003      	str	r3, [r0, #0]
   ba5e8:	2000      	movs	r0, #0
   ba5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba5ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba6d4 <_strtol_l.constprop.0+0x100>
   ba5f2:	460d      	mov	r5, r1
   ba5f4:	462e      	mov	r6, r5
   ba5f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba5fa:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba5fe:	f017 0708 	ands.w	r7, r7, #8
   ba602:	d1f7      	bne.n	ba5f4 <_strtol_l.constprop.0+0x20>
   ba604:	2c2d      	cmp	r4, #45	; 0x2d
   ba606:	d132      	bne.n	ba66e <_strtol_l.constprop.0+0x9a>
   ba608:	782c      	ldrb	r4, [r5, #0]
   ba60a:	2701      	movs	r7, #1
   ba60c:	1cb5      	adds	r5, r6, #2
   ba60e:	2b00      	cmp	r3, #0
   ba610:	d05b      	beq.n	ba6ca <_strtol_l.constprop.0+0xf6>
   ba612:	2b10      	cmp	r3, #16
   ba614:	d109      	bne.n	ba62a <_strtol_l.constprop.0+0x56>
   ba616:	2c30      	cmp	r4, #48	; 0x30
   ba618:	d107      	bne.n	ba62a <_strtol_l.constprop.0+0x56>
   ba61a:	782c      	ldrb	r4, [r5, #0]
   ba61c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba620:	2c58      	cmp	r4, #88	; 0x58
   ba622:	d14d      	bne.n	ba6c0 <_strtol_l.constprop.0+0xec>
   ba624:	786c      	ldrb	r4, [r5, #1]
   ba626:	2310      	movs	r3, #16
   ba628:	3502      	adds	r5, #2
   ba62a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba62e:	f108 38ff 	add.w	r8, r8, #4294967295
   ba632:	f04f 0c00 	mov.w	ip, #0
   ba636:	fbb8 f9f3 	udiv	r9, r8, r3
   ba63a:	4666      	mov	r6, ip
   ba63c:	fb03 8a19 	mls	sl, r3, r9, r8
   ba640:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba644:	f1be 0f09 	cmp.w	lr, #9
   ba648:	d816      	bhi.n	ba678 <_strtol_l.constprop.0+0xa4>
   ba64a:	4674      	mov	r4, lr
   ba64c:	42a3      	cmp	r3, r4
   ba64e:	dd24      	ble.n	ba69a <_strtol_l.constprop.0+0xc6>
   ba650:	f1bc 0f00 	cmp.w	ip, #0
   ba654:	db1e      	blt.n	ba694 <_strtol_l.constprop.0+0xc0>
   ba656:	45b1      	cmp	r9, r6
   ba658:	d31c      	bcc.n	ba694 <_strtol_l.constprop.0+0xc0>
   ba65a:	d101      	bne.n	ba660 <_strtol_l.constprop.0+0x8c>
   ba65c:	45a2      	cmp	sl, r4
   ba65e:	db19      	blt.n	ba694 <_strtol_l.constprop.0+0xc0>
   ba660:	fb06 4603 	mla	r6, r6, r3, r4
   ba664:	f04f 0c01 	mov.w	ip, #1
   ba668:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba66c:	e7e8      	b.n	ba640 <_strtol_l.constprop.0+0x6c>
   ba66e:	2c2b      	cmp	r4, #43	; 0x2b
   ba670:	bf04      	itt	eq
   ba672:	782c      	ldrbeq	r4, [r5, #0]
   ba674:	1cb5      	addeq	r5, r6, #2
   ba676:	e7ca      	b.n	ba60e <_strtol_l.constprop.0+0x3a>
   ba678:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba67c:	f1be 0f19 	cmp.w	lr, #25
   ba680:	d801      	bhi.n	ba686 <_strtol_l.constprop.0+0xb2>
   ba682:	3c37      	subs	r4, #55	; 0x37
   ba684:	e7e2      	b.n	ba64c <_strtol_l.constprop.0+0x78>
   ba686:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba68a:	f1be 0f19 	cmp.w	lr, #25
   ba68e:	d804      	bhi.n	ba69a <_strtol_l.constprop.0+0xc6>
   ba690:	3c57      	subs	r4, #87	; 0x57
   ba692:	e7db      	b.n	ba64c <_strtol_l.constprop.0+0x78>
   ba694:	f04f 3cff 	mov.w	ip, #4294967295
   ba698:	e7e6      	b.n	ba668 <_strtol_l.constprop.0+0x94>
   ba69a:	f1bc 0f00 	cmp.w	ip, #0
   ba69e:	da05      	bge.n	ba6ac <_strtol_l.constprop.0+0xd8>
   ba6a0:	2322      	movs	r3, #34	; 0x22
   ba6a2:	6003      	str	r3, [r0, #0]
   ba6a4:	4646      	mov	r6, r8
   ba6a6:	b942      	cbnz	r2, ba6ba <_strtol_l.constprop.0+0xe6>
   ba6a8:	4630      	mov	r0, r6
   ba6aa:	e79e      	b.n	ba5ea <_strtol_l.constprop.0+0x16>
   ba6ac:	b107      	cbz	r7, ba6b0 <_strtol_l.constprop.0+0xdc>
   ba6ae:	4276      	negs	r6, r6
   ba6b0:	2a00      	cmp	r2, #0
   ba6b2:	d0f9      	beq.n	ba6a8 <_strtol_l.constprop.0+0xd4>
   ba6b4:	f1bc 0f00 	cmp.w	ip, #0
   ba6b8:	d000      	beq.n	ba6bc <_strtol_l.constprop.0+0xe8>
   ba6ba:	1e69      	subs	r1, r5, #1
   ba6bc:	6011      	str	r1, [r2, #0]
   ba6be:	e7f3      	b.n	ba6a8 <_strtol_l.constprop.0+0xd4>
   ba6c0:	2430      	movs	r4, #48	; 0x30
   ba6c2:	2b00      	cmp	r3, #0
   ba6c4:	d1b1      	bne.n	ba62a <_strtol_l.constprop.0+0x56>
   ba6c6:	2308      	movs	r3, #8
   ba6c8:	e7af      	b.n	ba62a <_strtol_l.constprop.0+0x56>
   ba6ca:	2c30      	cmp	r4, #48	; 0x30
   ba6cc:	d0a5      	beq.n	ba61a <_strtol_l.constprop.0+0x46>
   ba6ce:	230a      	movs	r3, #10
   ba6d0:	e7ab      	b.n	ba62a <_strtol_l.constprop.0+0x56>
   ba6d2:	bf00      	nop
   ba6d4:	000bc480 	.word	0x000bc480

000ba6d8 <strtol>:
   ba6d8:	4613      	mov	r3, r2
   ba6da:	460a      	mov	r2, r1
   ba6dc:	4601      	mov	r1, r0
   ba6de:	4802      	ldr	r0, [pc, #8]	; (ba6e8 <strtol+0x10>)
   ba6e0:	6800      	ldr	r0, [r0, #0]
   ba6e2:	f7ff bf77 	b.w	ba5d4 <_strtol_l.constprop.0>
   ba6e6:	bf00      	nop
   ba6e8:	2003d984 	.word	0x2003d984

000ba6ec <__register_exitproc>:
   ba6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba6f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba7ac <__register_exitproc+0xc0>
   ba6f4:	4606      	mov	r6, r0
   ba6f6:	f8d8 0000 	ldr.w	r0, [r8]
   ba6fa:	461f      	mov	r7, r3
   ba6fc:	460d      	mov	r5, r1
   ba6fe:	4691      	mov	r9, r2
   ba700:	f000 fbc6 	bl	bae90 <__retarget_lock_acquire_recursive>
   ba704:	4b25      	ldr	r3, [pc, #148]	; (ba79c <__register_exitproc+0xb0>)
   ba706:	681c      	ldr	r4, [r3, #0]
   ba708:	b934      	cbnz	r4, ba718 <__register_exitproc+0x2c>
   ba70a:	4c25      	ldr	r4, [pc, #148]	; (ba7a0 <__register_exitproc+0xb4>)
   ba70c:	601c      	str	r4, [r3, #0]
   ba70e:	4b25      	ldr	r3, [pc, #148]	; (ba7a4 <__register_exitproc+0xb8>)
   ba710:	b113      	cbz	r3, ba718 <__register_exitproc+0x2c>
   ba712:	681b      	ldr	r3, [r3, #0]
   ba714:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba718:	6863      	ldr	r3, [r4, #4]
   ba71a:	2b1f      	cmp	r3, #31
   ba71c:	dd07      	ble.n	ba72e <__register_exitproc+0x42>
   ba71e:	f8d8 0000 	ldr.w	r0, [r8]
   ba722:	f000 fbb7 	bl	bae94 <__retarget_lock_release_recursive>
   ba726:	f04f 30ff 	mov.w	r0, #4294967295
   ba72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba72e:	b34e      	cbz	r6, ba784 <__register_exitproc+0x98>
   ba730:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba734:	b988      	cbnz	r0, ba75a <__register_exitproc+0x6e>
   ba736:	4b1c      	ldr	r3, [pc, #112]	; (ba7a8 <__register_exitproc+0xbc>)
   ba738:	b923      	cbnz	r3, ba744 <__register_exitproc+0x58>
   ba73a:	f8d8 0000 	ldr.w	r0, [r8]
   ba73e:	f000 fba8 	bl	bae92 <__retarget_lock_release>
   ba742:	e7f0      	b.n	ba726 <__register_exitproc+0x3a>
   ba744:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba748:	f7fb f9b6 	bl	b5ab8 <malloc>
   ba74c:	2800      	cmp	r0, #0
   ba74e:	d0f4      	beq.n	ba73a <__register_exitproc+0x4e>
   ba750:	2300      	movs	r3, #0
   ba752:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba756:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba75a:	6863      	ldr	r3, [r4, #4]
   ba75c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba760:	2201      	movs	r2, #1
   ba762:	409a      	lsls	r2, r3
   ba764:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba768:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba76c:	4313      	orrs	r3, r2
   ba76e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba772:	2e02      	cmp	r6, #2
   ba774:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba778:	bf02      	ittt	eq
   ba77a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba77e:	4313      	orreq	r3, r2
   ba780:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba784:	6863      	ldr	r3, [r4, #4]
   ba786:	f8d8 0000 	ldr.w	r0, [r8]
   ba78a:	1c5a      	adds	r2, r3, #1
   ba78c:	3302      	adds	r3, #2
   ba78e:	6062      	str	r2, [r4, #4]
   ba790:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba794:	f000 fb7e 	bl	bae94 <__retarget_lock_release_recursive>
   ba798:	2000      	movs	r0, #0
   ba79a:	e7c6      	b.n	ba72a <__register_exitproc+0x3e>
   ba79c:	2003e7ec 	.word	0x2003e7ec
   ba7a0:	2003e760 	.word	0x2003e760
   ba7a4:	00000000 	.word	0x00000000
   ba7a8:	000b5ab9 	.word	0x000b5ab9
   ba7ac:	2003d9e8 	.word	0x2003d9e8

000ba7b0 <rshift>:
   ba7b0:	6903      	ldr	r3, [r0, #16]
   ba7b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba7b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba7ba:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba7be:	f100 0414 	add.w	r4, r0, #20
   ba7c2:	dd45      	ble.n	ba850 <rshift+0xa0>
   ba7c4:	f011 011f 	ands.w	r1, r1, #31
   ba7c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba7cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba7d0:	d10c      	bne.n	ba7ec <rshift+0x3c>
   ba7d2:	f100 0710 	add.w	r7, r0, #16
   ba7d6:	4629      	mov	r1, r5
   ba7d8:	42b1      	cmp	r1, r6
   ba7da:	d334      	bcc.n	ba846 <rshift+0x96>
   ba7dc:	1a9b      	subs	r3, r3, r2
   ba7de:	009b      	lsls	r3, r3, #2
   ba7e0:	1eea      	subs	r2, r5, #3
   ba7e2:	4296      	cmp	r6, r2
   ba7e4:	bf38      	it	cc
   ba7e6:	2300      	movcc	r3, #0
   ba7e8:	4423      	add	r3, r4
   ba7ea:	e015      	b.n	ba818 <rshift+0x68>
   ba7ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba7f0:	f1c1 0820 	rsb	r8, r1, #32
   ba7f4:	40cf      	lsrs	r7, r1
   ba7f6:	f105 0e04 	add.w	lr, r5, #4
   ba7fa:	46a1      	mov	r9, r4
   ba7fc:	4576      	cmp	r6, lr
   ba7fe:	46f4      	mov	ip, lr
   ba800:	d815      	bhi.n	ba82e <rshift+0x7e>
   ba802:	1a9a      	subs	r2, r3, r2
   ba804:	0092      	lsls	r2, r2, #2
   ba806:	3a04      	subs	r2, #4
   ba808:	3501      	adds	r5, #1
   ba80a:	42ae      	cmp	r6, r5
   ba80c:	bf38      	it	cc
   ba80e:	2200      	movcc	r2, #0
   ba810:	18a3      	adds	r3, r4, r2
   ba812:	50a7      	str	r7, [r4, r2]
   ba814:	b107      	cbz	r7, ba818 <rshift+0x68>
   ba816:	3304      	adds	r3, #4
   ba818:	1b1a      	subs	r2, r3, r4
   ba81a:	42a3      	cmp	r3, r4
   ba81c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba820:	bf08      	it	eq
   ba822:	2300      	moveq	r3, #0
   ba824:	6102      	str	r2, [r0, #16]
   ba826:	bf08      	it	eq
   ba828:	6143      	streq	r3, [r0, #20]
   ba82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba82e:	f8dc c000 	ldr.w	ip, [ip]
   ba832:	fa0c fc08 	lsl.w	ip, ip, r8
   ba836:	ea4c 0707 	orr.w	r7, ip, r7
   ba83a:	f849 7b04 	str.w	r7, [r9], #4
   ba83e:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba842:	40cf      	lsrs	r7, r1
   ba844:	e7da      	b.n	ba7fc <rshift+0x4c>
   ba846:	f851 cb04 	ldr.w	ip, [r1], #4
   ba84a:	f847 cf04 	str.w	ip, [r7, #4]!
   ba84e:	e7c3      	b.n	ba7d8 <rshift+0x28>
   ba850:	4623      	mov	r3, r4
   ba852:	e7e1      	b.n	ba818 <rshift+0x68>

000ba854 <__hexdig_fun>:
   ba854:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba858:	2b09      	cmp	r3, #9
   ba85a:	d802      	bhi.n	ba862 <__hexdig_fun+0xe>
   ba85c:	3820      	subs	r0, #32
   ba85e:	b2c0      	uxtb	r0, r0
   ba860:	4770      	bx	lr
   ba862:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba866:	2b05      	cmp	r3, #5
   ba868:	d801      	bhi.n	ba86e <__hexdig_fun+0x1a>
   ba86a:	3847      	subs	r0, #71	; 0x47
   ba86c:	e7f7      	b.n	ba85e <__hexdig_fun+0xa>
   ba86e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba872:	2b05      	cmp	r3, #5
   ba874:	d801      	bhi.n	ba87a <__hexdig_fun+0x26>
   ba876:	3827      	subs	r0, #39	; 0x27
   ba878:	e7f1      	b.n	ba85e <__hexdig_fun+0xa>
   ba87a:	2000      	movs	r0, #0
   ba87c:	4770      	bx	lr
	...

000ba880 <__gethex>:
   ba880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba884:	ed2d 8b02 	vpush	{d8}
   ba888:	b089      	sub	sp, #36	; 0x24
   ba88a:	ee08 0a10 	vmov	s16, r0
   ba88e:	9304      	str	r3, [sp, #16]
   ba890:	4bb4      	ldr	r3, [pc, #720]	; (bab64 <__gethex+0x2e4>)
   ba892:	681b      	ldr	r3, [r3, #0]
   ba894:	9301      	str	r3, [sp, #4]
   ba896:	4618      	mov	r0, r3
   ba898:	468b      	mov	fp, r1
   ba89a:	4690      	mov	r8, r2
   ba89c:	f7fe ffe7 	bl	b986e <strlen>
   ba8a0:	9b01      	ldr	r3, [sp, #4]
   ba8a2:	f8db 2000 	ldr.w	r2, [fp]
   ba8a6:	4403      	add	r3, r0
   ba8a8:	4682      	mov	sl, r0
   ba8aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba8ae:	9305      	str	r3, [sp, #20]
   ba8b0:	1c93      	adds	r3, r2, #2
   ba8b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba8b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba8ba:	32fe      	adds	r2, #254	; 0xfe
   ba8bc:	18d1      	adds	r1, r2, r3
   ba8be:	461f      	mov	r7, r3
   ba8c0:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba8c4:	9100      	str	r1, [sp, #0]
   ba8c6:	2830      	cmp	r0, #48	; 0x30
   ba8c8:	d0f8      	beq.n	ba8bc <__gethex+0x3c>
   ba8ca:	f7ff ffc3 	bl	ba854 <__hexdig_fun>
   ba8ce:	4604      	mov	r4, r0
   ba8d0:	2800      	cmp	r0, #0
   ba8d2:	d13a      	bne.n	ba94a <__gethex+0xca>
   ba8d4:	9901      	ldr	r1, [sp, #4]
   ba8d6:	4652      	mov	r2, sl
   ba8d8:	4638      	mov	r0, r7
   ba8da:	f7fe ffd0 	bl	b987e <strncmp>
   ba8de:	4605      	mov	r5, r0
   ba8e0:	2800      	cmp	r0, #0
   ba8e2:	d168      	bne.n	ba9b6 <__gethex+0x136>
   ba8e4:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba8e8:	eb07 060a 	add.w	r6, r7, sl
   ba8ec:	f7ff ffb2 	bl	ba854 <__hexdig_fun>
   ba8f0:	2800      	cmp	r0, #0
   ba8f2:	d062      	beq.n	ba9ba <__gethex+0x13a>
   ba8f4:	4633      	mov	r3, r6
   ba8f6:	7818      	ldrb	r0, [r3, #0]
   ba8f8:	2830      	cmp	r0, #48	; 0x30
   ba8fa:	461f      	mov	r7, r3
   ba8fc:	f103 0301 	add.w	r3, r3, #1
   ba900:	d0f9      	beq.n	ba8f6 <__gethex+0x76>
   ba902:	f7ff ffa7 	bl	ba854 <__hexdig_fun>
   ba906:	2301      	movs	r3, #1
   ba908:	fab0 f480 	clz	r4, r0
   ba90c:	0964      	lsrs	r4, r4, #5
   ba90e:	4635      	mov	r5, r6
   ba910:	9300      	str	r3, [sp, #0]
   ba912:	463a      	mov	r2, r7
   ba914:	4616      	mov	r6, r2
   ba916:	3201      	adds	r2, #1
   ba918:	7830      	ldrb	r0, [r6, #0]
   ba91a:	f7ff ff9b 	bl	ba854 <__hexdig_fun>
   ba91e:	2800      	cmp	r0, #0
   ba920:	d1f8      	bne.n	ba914 <__gethex+0x94>
   ba922:	9901      	ldr	r1, [sp, #4]
   ba924:	4652      	mov	r2, sl
   ba926:	4630      	mov	r0, r6
   ba928:	f7fe ffa9 	bl	b987e <strncmp>
   ba92c:	b980      	cbnz	r0, ba950 <__gethex+0xd0>
   ba92e:	b94d      	cbnz	r5, ba944 <__gethex+0xc4>
   ba930:	eb06 050a 	add.w	r5, r6, sl
   ba934:	462a      	mov	r2, r5
   ba936:	4616      	mov	r6, r2
   ba938:	3201      	adds	r2, #1
   ba93a:	7830      	ldrb	r0, [r6, #0]
   ba93c:	f7ff ff8a 	bl	ba854 <__hexdig_fun>
   ba940:	2800      	cmp	r0, #0
   ba942:	d1f8      	bne.n	ba936 <__gethex+0xb6>
   ba944:	1bad      	subs	r5, r5, r6
   ba946:	00ad      	lsls	r5, r5, #2
   ba948:	e004      	b.n	ba954 <__gethex+0xd4>
   ba94a:	2400      	movs	r4, #0
   ba94c:	4625      	mov	r5, r4
   ba94e:	e7e0      	b.n	ba912 <__gethex+0x92>
   ba950:	2d00      	cmp	r5, #0
   ba952:	d1f7      	bne.n	ba944 <__gethex+0xc4>
   ba954:	7833      	ldrb	r3, [r6, #0]
   ba956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba95a:	2b50      	cmp	r3, #80	; 0x50
   ba95c:	d13b      	bne.n	ba9d6 <__gethex+0x156>
   ba95e:	7873      	ldrb	r3, [r6, #1]
   ba960:	2b2b      	cmp	r3, #43	; 0x2b
   ba962:	d02c      	beq.n	ba9be <__gethex+0x13e>
   ba964:	2b2d      	cmp	r3, #45	; 0x2d
   ba966:	d02e      	beq.n	ba9c6 <__gethex+0x146>
   ba968:	1c71      	adds	r1, r6, #1
   ba96a:	f04f 0900 	mov.w	r9, #0
   ba96e:	7808      	ldrb	r0, [r1, #0]
   ba970:	f7ff ff70 	bl	ba854 <__hexdig_fun>
   ba974:	1e43      	subs	r3, r0, #1
   ba976:	b2db      	uxtb	r3, r3
   ba978:	2b18      	cmp	r3, #24
   ba97a:	d82c      	bhi.n	ba9d6 <__gethex+0x156>
   ba97c:	f1a0 0210 	sub.w	r2, r0, #16
   ba980:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba984:	f7ff ff66 	bl	ba854 <__hexdig_fun>
   ba988:	1e43      	subs	r3, r0, #1
   ba98a:	b2db      	uxtb	r3, r3
   ba98c:	2b18      	cmp	r3, #24
   ba98e:	d91d      	bls.n	ba9cc <__gethex+0x14c>
   ba990:	f1b9 0f00 	cmp.w	r9, #0
   ba994:	d000      	beq.n	ba998 <__gethex+0x118>
   ba996:	4252      	negs	r2, r2
   ba998:	4415      	add	r5, r2
   ba99a:	f8cb 1000 	str.w	r1, [fp]
   ba99e:	b1e4      	cbz	r4, ba9da <__gethex+0x15a>
   ba9a0:	9b00      	ldr	r3, [sp, #0]
   ba9a2:	2b00      	cmp	r3, #0
   ba9a4:	bf14      	ite	ne
   ba9a6:	2700      	movne	r7, #0
   ba9a8:	2706      	moveq	r7, #6
   ba9aa:	4638      	mov	r0, r7
   ba9ac:	b009      	add	sp, #36	; 0x24
   ba9ae:	ecbd 8b02 	vpop	{d8}
   ba9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba9b6:	463e      	mov	r6, r7
   ba9b8:	4625      	mov	r5, r4
   ba9ba:	2401      	movs	r4, #1
   ba9bc:	e7ca      	b.n	ba954 <__gethex+0xd4>
   ba9be:	f04f 0900 	mov.w	r9, #0
   ba9c2:	1cb1      	adds	r1, r6, #2
   ba9c4:	e7d3      	b.n	ba96e <__gethex+0xee>
   ba9c6:	f04f 0901 	mov.w	r9, #1
   ba9ca:	e7fa      	b.n	ba9c2 <__gethex+0x142>
   ba9cc:	230a      	movs	r3, #10
   ba9ce:	fb03 0202 	mla	r2, r3, r2, r0
   ba9d2:	3a10      	subs	r2, #16
   ba9d4:	e7d4      	b.n	ba980 <__gethex+0x100>
   ba9d6:	4631      	mov	r1, r6
   ba9d8:	e7df      	b.n	ba99a <__gethex+0x11a>
   ba9da:	1bf3      	subs	r3, r6, r7
   ba9dc:	3b01      	subs	r3, #1
   ba9de:	4621      	mov	r1, r4
   ba9e0:	2b07      	cmp	r3, #7
   ba9e2:	dc0b      	bgt.n	ba9fc <__gethex+0x17c>
   ba9e4:	ee18 0a10 	vmov	r0, s16
   ba9e8:	f000 fa68 	bl	baebc <_Balloc>
   ba9ec:	4604      	mov	r4, r0
   ba9ee:	b940      	cbnz	r0, baa02 <__gethex+0x182>
   ba9f0:	4b5d      	ldr	r3, [pc, #372]	; (bab68 <__gethex+0x2e8>)
   ba9f2:	4602      	mov	r2, r0
   ba9f4:	21de      	movs	r1, #222	; 0xde
   ba9f6:	485d      	ldr	r0, [pc, #372]	; (bab6c <__gethex+0x2ec>)
   ba9f8:	f7fb f89e 	bl	b5b38 <__assert_func>
   ba9fc:	3101      	adds	r1, #1
   ba9fe:	105b      	asrs	r3, r3, #1
   baa00:	e7ee      	b.n	ba9e0 <__gethex+0x160>
   baa02:	f100 0914 	add.w	r9, r0, #20
   baa06:	f04f 0b00 	mov.w	fp, #0
   baa0a:	f1ca 0301 	rsb	r3, sl, #1
   baa0e:	f8cd 9008 	str.w	r9, [sp, #8]
   baa12:	f8cd b000 	str.w	fp, [sp]
   baa16:	9306      	str	r3, [sp, #24]
   baa18:	42b7      	cmp	r7, r6
   baa1a:	d340      	bcc.n	baa9e <__gethex+0x21e>
   baa1c:	9802      	ldr	r0, [sp, #8]
   baa1e:	9b00      	ldr	r3, [sp, #0]
   baa20:	f840 3b04 	str.w	r3, [r0], #4
   baa24:	eba0 0009 	sub.w	r0, r0, r9
   baa28:	1080      	asrs	r0, r0, #2
   baa2a:	0146      	lsls	r6, r0, #5
   baa2c:	6120      	str	r0, [r4, #16]
   baa2e:	4618      	mov	r0, r3
   baa30:	f000 fb36 	bl	bb0a0 <__hi0bits>
   baa34:	1a30      	subs	r0, r6, r0
   baa36:	f8d8 6000 	ldr.w	r6, [r8]
   baa3a:	42b0      	cmp	r0, r6
   baa3c:	dd63      	ble.n	bab06 <__gethex+0x286>
   baa3e:	1b87      	subs	r7, r0, r6
   baa40:	4639      	mov	r1, r7
   baa42:	4620      	mov	r0, r4
   baa44:	f000 feda 	bl	bb7fc <__any_on>
   baa48:	4682      	mov	sl, r0
   baa4a:	b1a8      	cbz	r0, baa78 <__gethex+0x1f8>
   baa4c:	1e7b      	subs	r3, r7, #1
   baa4e:	1159      	asrs	r1, r3, #5
   baa50:	f003 021f 	and.w	r2, r3, #31
   baa54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   baa58:	f04f 0a01 	mov.w	sl, #1
   baa5c:	fa0a f202 	lsl.w	r2, sl, r2
   baa60:	420a      	tst	r2, r1
   baa62:	d009      	beq.n	baa78 <__gethex+0x1f8>
   baa64:	4553      	cmp	r3, sl
   baa66:	dd05      	ble.n	baa74 <__gethex+0x1f4>
   baa68:	1eb9      	subs	r1, r7, #2
   baa6a:	4620      	mov	r0, r4
   baa6c:	f000 fec6 	bl	bb7fc <__any_on>
   baa70:	2800      	cmp	r0, #0
   baa72:	d145      	bne.n	bab00 <__gethex+0x280>
   baa74:	f04f 0a02 	mov.w	sl, #2
   baa78:	4639      	mov	r1, r7
   baa7a:	4620      	mov	r0, r4
   baa7c:	f7ff fe98 	bl	ba7b0 <rshift>
   baa80:	443d      	add	r5, r7
   baa82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   baa86:	42ab      	cmp	r3, r5
   baa88:	da4c      	bge.n	bab24 <__gethex+0x2a4>
   baa8a:	ee18 0a10 	vmov	r0, s16
   baa8e:	4621      	mov	r1, r4
   baa90:	f000 fa54 	bl	baf3c <_Bfree>
   baa94:	9a14      	ldr	r2, [sp, #80]	; 0x50
   baa96:	2300      	movs	r3, #0
   baa98:	6013      	str	r3, [r2, #0]
   baa9a:	27a3      	movs	r7, #163	; 0xa3
   baa9c:	e785      	b.n	ba9aa <__gethex+0x12a>
   baa9e:	1e73      	subs	r3, r6, #1
   baaa0:	9a05      	ldr	r2, [sp, #20]
   baaa2:	9303      	str	r3, [sp, #12]
   baaa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   baaa8:	4293      	cmp	r3, r2
   baaaa:	d019      	beq.n	baae0 <__gethex+0x260>
   baaac:	f1bb 0f20 	cmp.w	fp, #32
   baab0:	d107      	bne.n	baac2 <__gethex+0x242>
   baab2:	9b02      	ldr	r3, [sp, #8]
   baab4:	9a00      	ldr	r2, [sp, #0]
   baab6:	f843 2b04 	str.w	r2, [r3], #4
   baaba:	9302      	str	r3, [sp, #8]
   baabc:	2300      	movs	r3, #0
   baabe:	9300      	str	r3, [sp, #0]
   baac0:	469b      	mov	fp, r3
   baac2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   baac6:	f7ff fec5 	bl	ba854 <__hexdig_fun>
   baaca:	9b00      	ldr	r3, [sp, #0]
   baacc:	f000 000f 	and.w	r0, r0, #15
   baad0:	fa00 f00b 	lsl.w	r0, r0, fp
   baad4:	4303      	orrs	r3, r0
   baad6:	9300      	str	r3, [sp, #0]
   baad8:	f10b 0b04 	add.w	fp, fp, #4
   baadc:	9b03      	ldr	r3, [sp, #12]
   baade:	e00d      	b.n	baafc <__gethex+0x27c>
   baae0:	9b03      	ldr	r3, [sp, #12]
   baae2:	9a06      	ldr	r2, [sp, #24]
   baae4:	4413      	add	r3, r2
   baae6:	42bb      	cmp	r3, r7
   baae8:	d3e0      	bcc.n	baaac <__gethex+0x22c>
   baaea:	4618      	mov	r0, r3
   baaec:	9901      	ldr	r1, [sp, #4]
   baaee:	9307      	str	r3, [sp, #28]
   baaf0:	4652      	mov	r2, sl
   baaf2:	f7fe fec4 	bl	b987e <strncmp>
   baaf6:	9b07      	ldr	r3, [sp, #28]
   baaf8:	2800      	cmp	r0, #0
   baafa:	d1d7      	bne.n	baaac <__gethex+0x22c>
   baafc:	461e      	mov	r6, r3
   baafe:	e78b      	b.n	baa18 <__gethex+0x198>
   bab00:	f04f 0a03 	mov.w	sl, #3
   bab04:	e7b8      	b.n	baa78 <__gethex+0x1f8>
   bab06:	da0a      	bge.n	bab1e <__gethex+0x29e>
   bab08:	1a37      	subs	r7, r6, r0
   bab0a:	4621      	mov	r1, r4
   bab0c:	ee18 0a10 	vmov	r0, s16
   bab10:	463a      	mov	r2, r7
   bab12:	f000 fc2f 	bl	bb374 <__lshift>
   bab16:	1bed      	subs	r5, r5, r7
   bab18:	4604      	mov	r4, r0
   bab1a:	f100 0914 	add.w	r9, r0, #20
   bab1e:	f04f 0a00 	mov.w	sl, #0
   bab22:	e7ae      	b.n	baa82 <__gethex+0x202>
   bab24:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bab28:	42a8      	cmp	r0, r5
   bab2a:	dd72      	ble.n	bac12 <__gethex+0x392>
   bab2c:	1b45      	subs	r5, r0, r5
   bab2e:	42ae      	cmp	r6, r5
   bab30:	dc36      	bgt.n	baba0 <__gethex+0x320>
   bab32:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bab36:	2b02      	cmp	r3, #2
   bab38:	d02a      	beq.n	bab90 <__gethex+0x310>
   bab3a:	2b03      	cmp	r3, #3
   bab3c:	d02c      	beq.n	bab98 <__gethex+0x318>
   bab3e:	2b01      	cmp	r3, #1
   bab40:	d11c      	bne.n	bab7c <__gethex+0x2fc>
   bab42:	42ae      	cmp	r6, r5
   bab44:	d11a      	bne.n	bab7c <__gethex+0x2fc>
   bab46:	2e01      	cmp	r6, #1
   bab48:	d112      	bne.n	bab70 <__gethex+0x2f0>
   bab4a:	9a04      	ldr	r2, [sp, #16]
   bab4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bab50:	6013      	str	r3, [r2, #0]
   bab52:	2301      	movs	r3, #1
   bab54:	6123      	str	r3, [r4, #16]
   bab56:	f8c9 3000 	str.w	r3, [r9]
   bab5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bab5c:	2762      	movs	r7, #98	; 0x62
   bab5e:	601c      	str	r4, [r3, #0]
   bab60:	e723      	b.n	ba9aa <__gethex+0x12a>
   bab62:	bf00      	nop
   bab64:	000bc618 	.word	0x000bc618
   bab68:	000bc580 	.word	0x000bc580
   bab6c:	000bc591 	.word	0x000bc591
   bab70:	1e71      	subs	r1, r6, #1
   bab72:	4620      	mov	r0, r4
   bab74:	f000 fe42 	bl	bb7fc <__any_on>
   bab78:	2800      	cmp	r0, #0
   bab7a:	d1e6      	bne.n	bab4a <__gethex+0x2ca>
   bab7c:	ee18 0a10 	vmov	r0, s16
   bab80:	4621      	mov	r1, r4
   bab82:	f000 f9db 	bl	baf3c <_Bfree>
   bab86:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bab88:	2300      	movs	r3, #0
   bab8a:	6013      	str	r3, [r2, #0]
   bab8c:	2750      	movs	r7, #80	; 0x50
   bab8e:	e70c      	b.n	ba9aa <__gethex+0x12a>
   bab90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bab92:	2b00      	cmp	r3, #0
   bab94:	d1f2      	bne.n	bab7c <__gethex+0x2fc>
   bab96:	e7d8      	b.n	bab4a <__gethex+0x2ca>
   bab98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bab9a:	2b00      	cmp	r3, #0
   bab9c:	d1d5      	bne.n	bab4a <__gethex+0x2ca>
   bab9e:	e7ed      	b.n	bab7c <__gethex+0x2fc>
   baba0:	1e6f      	subs	r7, r5, #1
   baba2:	f1ba 0f00 	cmp.w	sl, #0
   baba6:	d131      	bne.n	bac0c <__gethex+0x38c>
   baba8:	b127      	cbz	r7, babb4 <__gethex+0x334>
   babaa:	4639      	mov	r1, r7
   babac:	4620      	mov	r0, r4
   babae:	f000 fe25 	bl	bb7fc <__any_on>
   babb2:	4682      	mov	sl, r0
   babb4:	117b      	asrs	r3, r7, #5
   babb6:	2101      	movs	r1, #1
   babb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   babbc:	f007 071f 	and.w	r7, r7, #31
   babc0:	fa01 f707 	lsl.w	r7, r1, r7
   babc4:	421f      	tst	r7, r3
   babc6:	4629      	mov	r1, r5
   babc8:	4620      	mov	r0, r4
   babca:	bf18      	it	ne
   babcc:	f04a 0a02 	orrne.w	sl, sl, #2
   babd0:	1b76      	subs	r6, r6, r5
   babd2:	f7ff fded 	bl	ba7b0 <rshift>
   babd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   babda:	2702      	movs	r7, #2
   babdc:	f1ba 0f00 	cmp.w	sl, #0
   babe0:	d048      	beq.n	bac74 <__gethex+0x3f4>
   babe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   babe6:	2b02      	cmp	r3, #2
   babe8:	d015      	beq.n	bac16 <__gethex+0x396>
   babea:	2b03      	cmp	r3, #3
   babec:	d017      	beq.n	bac1e <__gethex+0x39e>
   babee:	2b01      	cmp	r3, #1
   babf0:	d109      	bne.n	bac06 <__gethex+0x386>
   babf2:	f01a 0f02 	tst.w	sl, #2
   babf6:	d006      	beq.n	bac06 <__gethex+0x386>
   babf8:	f8d9 0000 	ldr.w	r0, [r9]
   babfc:	ea4a 0a00 	orr.w	sl, sl, r0
   bac00:	f01a 0f01 	tst.w	sl, #1
   bac04:	d10e      	bne.n	bac24 <__gethex+0x3a4>
   bac06:	f047 0710 	orr.w	r7, r7, #16
   bac0a:	e033      	b.n	bac74 <__gethex+0x3f4>
   bac0c:	f04f 0a01 	mov.w	sl, #1
   bac10:	e7d0      	b.n	babb4 <__gethex+0x334>
   bac12:	2701      	movs	r7, #1
   bac14:	e7e2      	b.n	babdc <__gethex+0x35c>
   bac16:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bac18:	f1c3 0301 	rsb	r3, r3, #1
   bac1c:	9315      	str	r3, [sp, #84]	; 0x54
   bac1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bac20:	2b00      	cmp	r3, #0
   bac22:	d0f0      	beq.n	bac06 <__gethex+0x386>
   bac24:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bac28:	f104 0314 	add.w	r3, r4, #20
   bac2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bac30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bac34:	f04f 0c00 	mov.w	ip, #0
   bac38:	4618      	mov	r0, r3
   bac3a:	f853 2b04 	ldr.w	r2, [r3], #4
   bac3e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bac42:	d01c      	beq.n	bac7e <__gethex+0x3fe>
   bac44:	3201      	adds	r2, #1
   bac46:	6002      	str	r2, [r0, #0]
   bac48:	2f02      	cmp	r7, #2
   bac4a:	f104 0314 	add.w	r3, r4, #20
   bac4e:	d13f      	bne.n	bacd0 <__gethex+0x450>
   bac50:	f8d8 2000 	ldr.w	r2, [r8]
   bac54:	3a01      	subs	r2, #1
   bac56:	42b2      	cmp	r2, r6
   bac58:	d10a      	bne.n	bac70 <__gethex+0x3f0>
   bac5a:	1171      	asrs	r1, r6, #5
   bac5c:	2201      	movs	r2, #1
   bac5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bac62:	f006 061f 	and.w	r6, r6, #31
   bac66:	fa02 f606 	lsl.w	r6, r2, r6
   bac6a:	421e      	tst	r6, r3
   bac6c:	bf18      	it	ne
   bac6e:	4617      	movne	r7, r2
   bac70:	f047 0720 	orr.w	r7, r7, #32
   bac74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bac76:	601c      	str	r4, [r3, #0]
   bac78:	9b04      	ldr	r3, [sp, #16]
   bac7a:	601d      	str	r5, [r3, #0]
   bac7c:	e695      	b.n	ba9aa <__gethex+0x12a>
   bac7e:	4299      	cmp	r1, r3
   bac80:	f843 cc04 	str.w	ip, [r3, #-4]
   bac84:	d8d8      	bhi.n	bac38 <__gethex+0x3b8>
   bac86:	68a3      	ldr	r3, [r4, #8]
   bac88:	459b      	cmp	fp, r3
   bac8a:	db19      	blt.n	bacc0 <__gethex+0x440>
   bac8c:	6861      	ldr	r1, [r4, #4]
   bac8e:	ee18 0a10 	vmov	r0, s16
   bac92:	3101      	adds	r1, #1
   bac94:	f000 f912 	bl	baebc <_Balloc>
   bac98:	4681      	mov	r9, r0
   bac9a:	b918      	cbnz	r0, baca4 <__gethex+0x424>
   bac9c:	4b1a      	ldr	r3, [pc, #104]	; (bad08 <__gethex+0x488>)
   bac9e:	4602      	mov	r2, r0
   baca0:	2184      	movs	r1, #132	; 0x84
   baca2:	e6a8      	b.n	ba9f6 <__gethex+0x176>
   baca4:	6922      	ldr	r2, [r4, #16]
   baca6:	3202      	adds	r2, #2
   baca8:	f104 010c 	add.w	r1, r4, #12
   bacac:	0092      	lsls	r2, r2, #2
   bacae:	300c      	adds	r0, #12
   bacb0:	f7fe fd3f 	bl	b9732 <memcpy>
   bacb4:	4621      	mov	r1, r4
   bacb6:	ee18 0a10 	vmov	r0, s16
   bacba:	f000 f93f 	bl	baf3c <_Bfree>
   bacbe:	464c      	mov	r4, r9
   bacc0:	6923      	ldr	r3, [r4, #16]
   bacc2:	1c5a      	adds	r2, r3, #1
   bacc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bacc8:	6122      	str	r2, [r4, #16]
   bacca:	2201      	movs	r2, #1
   baccc:	615a      	str	r2, [r3, #20]
   bacce:	e7bb      	b.n	bac48 <__gethex+0x3c8>
   bacd0:	6922      	ldr	r2, [r4, #16]
   bacd2:	455a      	cmp	r2, fp
   bacd4:	dd0b      	ble.n	bacee <__gethex+0x46e>
   bacd6:	2101      	movs	r1, #1
   bacd8:	4620      	mov	r0, r4
   bacda:	f7ff fd69 	bl	ba7b0 <rshift>
   bacde:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bace2:	3501      	adds	r5, #1
   bace4:	42ab      	cmp	r3, r5
   bace6:	f6ff aed0 	blt.w	baa8a <__gethex+0x20a>
   bacea:	2701      	movs	r7, #1
   bacec:	e7c0      	b.n	bac70 <__gethex+0x3f0>
   bacee:	f016 061f 	ands.w	r6, r6, #31
   bacf2:	d0fa      	beq.n	bacea <__gethex+0x46a>
   bacf4:	4453      	add	r3, sl
   bacf6:	f1c6 0620 	rsb	r6, r6, #32
   bacfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bacfe:	f000 f9cf 	bl	bb0a0 <__hi0bits>
   bad02:	42b0      	cmp	r0, r6
   bad04:	dbe7      	blt.n	bacd6 <__gethex+0x456>
   bad06:	e7f0      	b.n	bacea <__gethex+0x46a>
   bad08:	000bc580 	.word	0x000bc580

000bad0c <L_shift>:
   bad0c:	f1c2 0208 	rsb	r2, r2, #8
   bad10:	0092      	lsls	r2, r2, #2
   bad12:	b570      	push	{r4, r5, r6, lr}
   bad14:	f1c2 0620 	rsb	r6, r2, #32
   bad18:	6843      	ldr	r3, [r0, #4]
   bad1a:	6804      	ldr	r4, [r0, #0]
   bad1c:	fa03 f506 	lsl.w	r5, r3, r6
   bad20:	432c      	orrs	r4, r5
   bad22:	40d3      	lsrs	r3, r2
   bad24:	6004      	str	r4, [r0, #0]
   bad26:	f840 3f04 	str.w	r3, [r0, #4]!
   bad2a:	4288      	cmp	r0, r1
   bad2c:	d3f4      	bcc.n	bad18 <L_shift+0xc>
   bad2e:	bd70      	pop	{r4, r5, r6, pc}

000bad30 <__match>:
   bad30:	b530      	push	{r4, r5, lr}
   bad32:	6803      	ldr	r3, [r0, #0]
   bad34:	3301      	adds	r3, #1
   bad36:	f811 4b01 	ldrb.w	r4, [r1], #1
   bad3a:	b914      	cbnz	r4, bad42 <__match+0x12>
   bad3c:	6003      	str	r3, [r0, #0]
   bad3e:	2001      	movs	r0, #1
   bad40:	bd30      	pop	{r4, r5, pc}
   bad42:	f813 2b01 	ldrb.w	r2, [r3], #1
   bad46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bad4a:	2d19      	cmp	r5, #25
   bad4c:	bf98      	it	ls
   bad4e:	3220      	addls	r2, #32
   bad50:	42a2      	cmp	r2, r4
   bad52:	d0f0      	beq.n	bad36 <__match+0x6>
   bad54:	2000      	movs	r0, #0
   bad56:	e7f3      	b.n	bad40 <__match+0x10>

000bad58 <__hexnan>:
   bad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bad5c:	680b      	ldr	r3, [r1, #0]
   bad5e:	115e      	asrs	r6, r3, #5
   bad60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bad64:	f013 031f 	ands.w	r3, r3, #31
   bad68:	b087      	sub	sp, #28
   bad6a:	bf18      	it	ne
   bad6c:	3604      	addne	r6, #4
   bad6e:	2500      	movs	r5, #0
   bad70:	1f37      	subs	r7, r6, #4
   bad72:	4690      	mov	r8, r2
   bad74:	6802      	ldr	r2, [r0, #0]
   bad76:	9301      	str	r3, [sp, #4]
   bad78:	4682      	mov	sl, r0
   bad7a:	f846 5c04 	str.w	r5, [r6, #-4]
   bad7e:	46b9      	mov	r9, r7
   bad80:	463c      	mov	r4, r7
   bad82:	9502      	str	r5, [sp, #8]
   bad84:	46ab      	mov	fp, r5
   bad86:	7851      	ldrb	r1, [r2, #1]
   bad88:	1c53      	adds	r3, r2, #1
   bad8a:	9303      	str	r3, [sp, #12]
   bad8c:	b341      	cbz	r1, bade0 <__hexnan+0x88>
   bad8e:	4608      	mov	r0, r1
   bad90:	9205      	str	r2, [sp, #20]
   bad92:	9104      	str	r1, [sp, #16]
   bad94:	f7ff fd5e 	bl	ba854 <__hexdig_fun>
   bad98:	2800      	cmp	r0, #0
   bad9a:	d14f      	bne.n	bae3c <__hexnan+0xe4>
   bad9c:	9904      	ldr	r1, [sp, #16]
   bad9e:	9a05      	ldr	r2, [sp, #20]
   bada0:	2920      	cmp	r1, #32
   bada2:	d818      	bhi.n	badd6 <__hexnan+0x7e>
   bada4:	9b02      	ldr	r3, [sp, #8]
   bada6:	459b      	cmp	fp, r3
   bada8:	dd13      	ble.n	badd2 <__hexnan+0x7a>
   badaa:	454c      	cmp	r4, r9
   badac:	d206      	bcs.n	badbc <__hexnan+0x64>
   badae:	2d07      	cmp	r5, #7
   badb0:	dc04      	bgt.n	badbc <__hexnan+0x64>
   badb2:	462a      	mov	r2, r5
   badb4:	4649      	mov	r1, r9
   badb6:	4620      	mov	r0, r4
   badb8:	f7ff ffa8 	bl	bad0c <L_shift>
   badbc:	4544      	cmp	r4, r8
   badbe:	d950      	bls.n	bae62 <__hexnan+0x10a>
   badc0:	2300      	movs	r3, #0
   badc2:	f1a4 0904 	sub.w	r9, r4, #4
   badc6:	f844 3c04 	str.w	r3, [r4, #-4]
   badca:	f8cd b008 	str.w	fp, [sp, #8]
   badce:	464c      	mov	r4, r9
   badd0:	461d      	mov	r5, r3
   badd2:	9a03      	ldr	r2, [sp, #12]
   badd4:	e7d7      	b.n	bad86 <__hexnan+0x2e>
   badd6:	2929      	cmp	r1, #41	; 0x29
   badd8:	d156      	bne.n	bae88 <__hexnan+0x130>
   badda:	3202      	adds	r2, #2
   baddc:	f8ca 2000 	str.w	r2, [sl]
   bade0:	f1bb 0f00 	cmp.w	fp, #0
   bade4:	d050      	beq.n	bae88 <__hexnan+0x130>
   bade6:	454c      	cmp	r4, r9
   bade8:	d206      	bcs.n	badf8 <__hexnan+0xa0>
   badea:	2d07      	cmp	r5, #7
   badec:	dc04      	bgt.n	badf8 <__hexnan+0xa0>
   badee:	462a      	mov	r2, r5
   badf0:	4649      	mov	r1, r9
   badf2:	4620      	mov	r0, r4
   badf4:	f7ff ff8a 	bl	bad0c <L_shift>
   badf8:	4544      	cmp	r4, r8
   badfa:	d934      	bls.n	bae66 <__hexnan+0x10e>
   badfc:	f1a8 0204 	sub.w	r2, r8, #4
   bae00:	4623      	mov	r3, r4
   bae02:	f853 1b04 	ldr.w	r1, [r3], #4
   bae06:	f842 1f04 	str.w	r1, [r2, #4]!
   bae0a:	429f      	cmp	r7, r3
   bae0c:	d2f9      	bcs.n	bae02 <__hexnan+0xaa>
   bae0e:	1b3b      	subs	r3, r7, r4
   bae10:	f023 0303 	bic.w	r3, r3, #3
   bae14:	3304      	adds	r3, #4
   bae16:	3401      	adds	r4, #1
   bae18:	3e03      	subs	r6, #3
   bae1a:	42b4      	cmp	r4, r6
   bae1c:	bf88      	it	hi
   bae1e:	2304      	movhi	r3, #4
   bae20:	4443      	add	r3, r8
   bae22:	2200      	movs	r2, #0
   bae24:	f843 2b04 	str.w	r2, [r3], #4
   bae28:	429f      	cmp	r7, r3
   bae2a:	d2fb      	bcs.n	bae24 <__hexnan+0xcc>
   bae2c:	683b      	ldr	r3, [r7, #0]
   bae2e:	b91b      	cbnz	r3, bae38 <__hexnan+0xe0>
   bae30:	4547      	cmp	r7, r8
   bae32:	d127      	bne.n	bae84 <__hexnan+0x12c>
   bae34:	2301      	movs	r3, #1
   bae36:	603b      	str	r3, [r7, #0]
   bae38:	2005      	movs	r0, #5
   bae3a:	e026      	b.n	bae8a <__hexnan+0x132>
   bae3c:	3501      	adds	r5, #1
   bae3e:	2d08      	cmp	r5, #8
   bae40:	f10b 0b01 	add.w	fp, fp, #1
   bae44:	dd06      	ble.n	bae54 <__hexnan+0xfc>
   bae46:	4544      	cmp	r4, r8
   bae48:	d9c3      	bls.n	badd2 <__hexnan+0x7a>
   bae4a:	2300      	movs	r3, #0
   bae4c:	f844 3c04 	str.w	r3, [r4, #-4]
   bae50:	2501      	movs	r5, #1
   bae52:	3c04      	subs	r4, #4
   bae54:	6822      	ldr	r2, [r4, #0]
   bae56:	f000 000f 	and.w	r0, r0, #15
   bae5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bae5e:	6022      	str	r2, [r4, #0]
   bae60:	e7b7      	b.n	badd2 <__hexnan+0x7a>
   bae62:	2508      	movs	r5, #8
   bae64:	e7b5      	b.n	badd2 <__hexnan+0x7a>
   bae66:	9b01      	ldr	r3, [sp, #4]
   bae68:	2b00      	cmp	r3, #0
   bae6a:	d0df      	beq.n	bae2c <__hexnan+0xd4>
   bae6c:	f04f 32ff 	mov.w	r2, #4294967295
   bae70:	f1c3 0320 	rsb	r3, r3, #32
   bae74:	fa22 f303 	lsr.w	r3, r2, r3
   bae78:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bae7c:	401a      	ands	r2, r3
   bae7e:	f846 2c04 	str.w	r2, [r6, #-4]
   bae82:	e7d3      	b.n	bae2c <__hexnan+0xd4>
   bae84:	3f04      	subs	r7, #4
   bae86:	e7d1      	b.n	bae2c <__hexnan+0xd4>
   bae88:	2004      	movs	r0, #4
   bae8a:	b007      	add	sp, #28
   bae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bae90 <__retarget_lock_acquire_recursive>:
   bae90:	4770      	bx	lr

000bae92 <__retarget_lock_release>:
   bae92:	4770      	bx	lr

000bae94 <__retarget_lock_release_recursive>:
   bae94:	4770      	bx	lr

000bae96 <__ascii_mbtowc>:
   bae96:	b082      	sub	sp, #8
   bae98:	b901      	cbnz	r1, bae9c <__ascii_mbtowc+0x6>
   bae9a:	a901      	add	r1, sp, #4
   bae9c:	b142      	cbz	r2, baeb0 <__ascii_mbtowc+0x1a>
   bae9e:	b14b      	cbz	r3, baeb4 <__ascii_mbtowc+0x1e>
   baea0:	7813      	ldrb	r3, [r2, #0]
   baea2:	600b      	str	r3, [r1, #0]
   baea4:	7812      	ldrb	r2, [r2, #0]
   baea6:	1e10      	subs	r0, r2, #0
   baea8:	bf18      	it	ne
   baeaa:	2001      	movne	r0, #1
   baeac:	b002      	add	sp, #8
   baeae:	4770      	bx	lr
   baeb0:	4610      	mov	r0, r2
   baeb2:	e7fb      	b.n	baeac <__ascii_mbtowc+0x16>
   baeb4:	f06f 0001 	mvn.w	r0, #1
   baeb8:	e7f8      	b.n	baeac <__ascii_mbtowc+0x16>
	...

000baebc <_Balloc>:
   baebc:	b570      	push	{r4, r5, r6, lr}
   baebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   baec0:	4604      	mov	r4, r0
   baec2:	460d      	mov	r5, r1
   baec4:	b976      	cbnz	r6, baee4 <_Balloc+0x28>
   baec6:	2010      	movs	r0, #16
   baec8:	f7fa fdf6 	bl	b5ab8 <malloc>
   baecc:	4602      	mov	r2, r0
   baece:	6260      	str	r0, [r4, #36]	; 0x24
   baed0:	b920      	cbnz	r0, baedc <_Balloc+0x20>
   baed2:	4b18      	ldr	r3, [pc, #96]	; (baf34 <_Balloc+0x78>)
   baed4:	4818      	ldr	r0, [pc, #96]	; (baf38 <_Balloc+0x7c>)
   baed6:	2166      	movs	r1, #102	; 0x66
   baed8:	f7fa fe2e 	bl	b5b38 <__assert_func>
   baedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   baee0:	6006      	str	r6, [r0, #0]
   baee2:	60c6      	str	r6, [r0, #12]
   baee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   baee6:	68f3      	ldr	r3, [r6, #12]
   baee8:	b183      	cbz	r3, baf0c <_Balloc+0x50>
   baeea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   baeec:	68db      	ldr	r3, [r3, #12]
   baeee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   baef2:	b9b8      	cbnz	r0, baf24 <_Balloc+0x68>
   baef4:	2101      	movs	r1, #1
   baef6:	fa01 f605 	lsl.w	r6, r1, r5
   baefa:	1d72      	adds	r2, r6, #5
   baefc:	0092      	lsls	r2, r2, #2
   baefe:	4620      	mov	r0, r4
   baf00:	f000 fc9d 	bl	bb83e <_calloc_r>
   baf04:	b160      	cbz	r0, baf20 <_Balloc+0x64>
   baf06:	e9c0 5601 	strd	r5, r6, [r0, #4]
   baf0a:	e00e      	b.n	baf2a <_Balloc+0x6e>
   baf0c:	2221      	movs	r2, #33	; 0x21
   baf0e:	2104      	movs	r1, #4
   baf10:	4620      	mov	r0, r4
   baf12:	f000 fc94 	bl	bb83e <_calloc_r>
   baf16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   baf18:	60f0      	str	r0, [r6, #12]
   baf1a:	68db      	ldr	r3, [r3, #12]
   baf1c:	2b00      	cmp	r3, #0
   baf1e:	d1e4      	bne.n	baeea <_Balloc+0x2e>
   baf20:	2000      	movs	r0, #0
   baf22:	bd70      	pop	{r4, r5, r6, pc}
   baf24:	6802      	ldr	r2, [r0, #0]
   baf26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   baf2a:	2300      	movs	r3, #0
   baf2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   baf30:	e7f7      	b.n	baf22 <_Balloc+0x66>
   baf32:	bf00      	nop
   baf34:	000bc309 	.word	0x000bc309
   baf38:	000bc62c 	.word	0x000bc62c

000baf3c <_Bfree>:
   baf3c:	b570      	push	{r4, r5, r6, lr}
   baf3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   baf40:	4605      	mov	r5, r0
   baf42:	460c      	mov	r4, r1
   baf44:	b976      	cbnz	r6, baf64 <_Bfree+0x28>
   baf46:	2010      	movs	r0, #16
   baf48:	f7fa fdb6 	bl	b5ab8 <malloc>
   baf4c:	4602      	mov	r2, r0
   baf4e:	6268      	str	r0, [r5, #36]	; 0x24
   baf50:	b920      	cbnz	r0, baf5c <_Bfree+0x20>
   baf52:	4b09      	ldr	r3, [pc, #36]	; (baf78 <_Bfree+0x3c>)
   baf54:	4809      	ldr	r0, [pc, #36]	; (baf7c <_Bfree+0x40>)
   baf56:	218a      	movs	r1, #138	; 0x8a
   baf58:	f7fa fdee 	bl	b5b38 <__assert_func>
   baf5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   baf60:	6006      	str	r6, [r0, #0]
   baf62:	60c6      	str	r6, [r0, #12]
   baf64:	b13c      	cbz	r4, baf76 <_Bfree+0x3a>
   baf66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   baf68:	6862      	ldr	r2, [r4, #4]
   baf6a:	68db      	ldr	r3, [r3, #12]
   baf6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   baf70:	6021      	str	r1, [r4, #0]
   baf72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   baf76:	bd70      	pop	{r4, r5, r6, pc}
   baf78:	000bc309 	.word	0x000bc309
   baf7c:	000bc62c 	.word	0x000bc62c

000baf80 <__multadd>:
   baf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baf84:	690d      	ldr	r5, [r1, #16]
   baf86:	4607      	mov	r7, r0
   baf88:	460c      	mov	r4, r1
   baf8a:	461e      	mov	r6, r3
   baf8c:	f101 0c14 	add.w	ip, r1, #20
   baf90:	2000      	movs	r0, #0
   baf92:	f8dc 3000 	ldr.w	r3, [ip]
   baf96:	b299      	uxth	r1, r3
   baf98:	fb02 6101 	mla	r1, r2, r1, r6
   baf9c:	0c1e      	lsrs	r6, r3, #16
   baf9e:	0c0b      	lsrs	r3, r1, #16
   bafa0:	fb02 3306 	mla	r3, r2, r6, r3
   bafa4:	b289      	uxth	r1, r1
   bafa6:	3001      	adds	r0, #1
   bafa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bafac:	4285      	cmp	r5, r0
   bafae:	f84c 1b04 	str.w	r1, [ip], #4
   bafb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bafb6:	dcec      	bgt.n	baf92 <__multadd+0x12>
   bafb8:	b30e      	cbz	r6, baffe <__multadd+0x7e>
   bafba:	68a3      	ldr	r3, [r4, #8]
   bafbc:	42ab      	cmp	r3, r5
   bafbe:	dc19      	bgt.n	baff4 <__multadd+0x74>
   bafc0:	6861      	ldr	r1, [r4, #4]
   bafc2:	4638      	mov	r0, r7
   bafc4:	3101      	adds	r1, #1
   bafc6:	f7ff ff79 	bl	baebc <_Balloc>
   bafca:	4680      	mov	r8, r0
   bafcc:	b928      	cbnz	r0, bafda <__multadd+0x5a>
   bafce:	4602      	mov	r2, r0
   bafd0:	4b0c      	ldr	r3, [pc, #48]	; (bb004 <__multadd+0x84>)
   bafd2:	480d      	ldr	r0, [pc, #52]	; (bb008 <__multadd+0x88>)
   bafd4:	21b5      	movs	r1, #181	; 0xb5
   bafd6:	f7fa fdaf 	bl	b5b38 <__assert_func>
   bafda:	6922      	ldr	r2, [r4, #16]
   bafdc:	3202      	adds	r2, #2
   bafde:	f104 010c 	add.w	r1, r4, #12
   bafe2:	0092      	lsls	r2, r2, #2
   bafe4:	300c      	adds	r0, #12
   bafe6:	f7fe fba4 	bl	b9732 <memcpy>
   bafea:	4621      	mov	r1, r4
   bafec:	4638      	mov	r0, r7
   bafee:	f7ff ffa5 	bl	baf3c <_Bfree>
   baff2:	4644      	mov	r4, r8
   baff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   baff8:	3501      	adds	r5, #1
   baffa:	615e      	str	r6, [r3, #20]
   baffc:	6125      	str	r5, [r4, #16]
   baffe:	4620      	mov	r0, r4
   bb000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb004:	000bc580 	.word	0x000bc580
   bb008:	000bc62c 	.word	0x000bc62c

000bb00c <__s2b>:
   bb00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb010:	460c      	mov	r4, r1
   bb012:	4615      	mov	r5, r2
   bb014:	461f      	mov	r7, r3
   bb016:	2209      	movs	r2, #9
   bb018:	3308      	adds	r3, #8
   bb01a:	4606      	mov	r6, r0
   bb01c:	fb93 f3f2 	sdiv	r3, r3, r2
   bb020:	2100      	movs	r1, #0
   bb022:	2201      	movs	r2, #1
   bb024:	429a      	cmp	r2, r3
   bb026:	db09      	blt.n	bb03c <__s2b+0x30>
   bb028:	4630      	mov	r0, r6
   bb02a:	f7ff ff47 	bl	baebc <_Balloc>
   bb02e:	b940      	cbnz	r0, bb042 <__s2b+0x36>
   bb030:	4602      	mov	r2, r0
   bb032:	4b19      	ldr	r3, [pc, #100]	; (bb098 <__s2b+0x8c>)
   bb034:	4819      	ldr	r0, [pc, #100]	; (bb09c <__s2b+0x90>)
   bb036:	21ce      	movs	r1, #206	; 0xce
   bb038:	f7fa fd7e 	bl	b5b38 <__assert_func>
   bb03c:	0052      	lsls	r2, r2, #1
   bb03e:	3101      	adds	r1, #1
   bb040:	e7f0      	b.n	bb024 <__s2b+0x18>
   bb042:	9b08      	ldr	r3, [sp, #32]
   bb044:	6143      	str	r3, [r0, #20]
   bb046:	2d09      	cmp	r5, #9
   bb048:	f04f 0301 	mov.w	r3, #1
   bb04c:	6103      	str	r3, [r0, #16]
   bb04e:	dd16      	ble.n	bb07e <__s2b+0x72>
   bb050:	f104 0909 	add.w	r9, r4, #9
   bb054:	46c8      	mov	r8, r9
   bb056:	442c      	add	r4, r5
   bb058:	f818 3b01 	ldrb.w	r3, [r8], #1
   bb05c:	4601      	mov	r1, r0
   bb05e:	3b30      	subs	r3, #48	; 0x30
   bb060:	220a      	movs	r2, #10
   bb062:	4630      	mov	r0, r6
   bb064:	f7ff ff8c 	bl	baf80 <__multadd>
   bb068:	45a0      	cmp	r8, r4
   bb06a:	d1f5      	bne.n	bb058 <__s2b+0x4c>
   bb06c:	f1a5 0408 	sub.w	r4, r5, #8
   bb070:	444c      	add	r4, r9
   bb072:	1b2d      	subs	r5, r5, r4
   bb074:	1963      	adds	r3, r4, r5
   bb076:	42bb      	cmp	r3, r7
   bb078:	db04      	blt.n	bb084 <__s2b+0x78>
   bb07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb07e:	340a      	adds	r4, #10
   bb080:	2509      	movs	r5, #9
   bb082:	e7f6      	b.n	bb072 <__s2b+0x66>
   bb084:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb088:	4601      	mov	r1, r0
   bb08a:	3b30      	subs	r3, #48	; 0x30
   bb08c:	220a      	movs	r2, #10
   bb08e:	4630      	mov	r0, r6
   bb090:	f7ff ff76 	bl	baf80 <__multadd>
   bb094:	e7ee      	b.n	bb074 <__s2b+0x68>
   bb096:	bf00      	nop
   bb098:	000bc580 	.word	0x000bc580
   bb09c:	000bc62c 	.word	0x000bc62c

000bb0a0 <__hi0bits>:
   bb0a0:	0c03      	lsrs	r3, r0, #16
   bb0a2:	041b      	lsls	r3, r3, #16
   bb0a4:	b9d3      	cbnz	r3, bb0dc <__hi0bits+0x3c>
   bb0a6:	0400      	lsls	r0, r0, #16
   bb0a8:	2310      	movs	r3, #16
   bb0aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bb0ae:	bf04      	itt	eq
   bb0b0:	0200      	lsleq	r0, r0, #8
   bb0b2:	3308      	addeq	r3, #8
   bb0b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bb0b8:	bf04      	itt	eq
   bb0ba:	0100      	lsleq	r0, r0, #4
   bb0bc:	3304      	addeq	r3, #4
   bb0be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bb0c2:	bf04      	itt	eq
   bb0c4:	0080      	lsleq	r0, r0, #2
   bb0c6:	3302      	addeq	r3, #2
   bb0c8:	2800      	cmp	r0, #0
   bb0ca:	db05      	blt.n	bb0d8 <__hi0bits+0x38>
   bb0cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bb0d0:	f103 0301 	add.w	r3, r3, #1
   bb0d4:	bf08      	it	eq
   bb0d6:	2320      	moveq	r3, #32
   bb0d8:	4618      	mov	r0, r3
   bb0da:	4770      	bx	lr
   bb0dc:	2300      	movs	r3, #0
   bb0de:	e7e4      	b.n	bb0aa <__hi0bits+0xa>

000bb0e0 <__lo0bits>:
   bb0e0:	6803      	ldr	r3, [r0, #0]
   bb0e2:	f013 0207 	ands.w	r2, r3, #7
   bb0e6:	4601      	mov	r1, r0
   bb0e8:	d00b      	beq.n	bb102 <__lo0bits+0x22>
   bb0ea:	07da      	lsls	r2, r3, #31
   bb0ec:	d423      	bmi.n	bb136 <__lo0bits+0x56>
   bb0ee:	0798      	lsls	r0, r3, #30
   bb0f0:	bf49      	itett	mi
   bb0f2:	085b      	lsrmi	r3, r3, #1
   bb0f4:	089b      	lsrpl	r3, r3, #2
   bb0f6:	2001      	movmi	r0, #1
   bb0f8:	600b      	strmi	r3, [r1, #0]
   bb0fa:	bf5c      	itt	pl
   bb0fc:	600b      	strpl	r3, [r1, #0]
   bb0fe:	2002      	movpl	r0, #2
   bb100:	4770      	bx	lr
   bb102:	b298      	uxth	r0, r3
   bb104:	b9a8      	cbnz	r0, bb132 <__lo0bits+0x52>
   bb106:	0c1b      	lsrs	r3, r3, #16
   bb108:	2010      	movs	r0, #16
   bb10a:	b2da      	uxtb	r2, r3
   bb10c:	b90a      	cbnz	r2, bb112 <__lo0bits+0x32>
   bb10e:	3008      	adds	r0, #8
   bb110:	0a1b      	lsrs	r3, r3, #8
   bb112:	071a      	lsls	r2, r3, #28
   bb114:	bf04      	itt	eq
   bb116:	091b      	lsreq	r3, r3, #4
   bb118:	3004      	addeq	r0, #4
   bb11a:	079a      	lsls	r2, r3, #30
   bb11c:	bf04      	itt	eq
   bb11e:	089b      	lsreq	r3, r3, #2
   bb120:	3002      	addeq	r0, #2
   bb122:	07da      	lsls	r2, r3, #31
   bb124:	d403      	bmi.n	bb12e <__lo0bits+0x4e>
   bb126:	085b      	lsrs	r3, r3, #1
   bb128:	f100 0001 	add.w	r0, r0, #1
   bb12c:	d005      	beq.n	bb13a <__lo0bits+0x5a>
   bb12e:	600b      	str	r3, [r1, #0]
   bb130:	4770      	bx	lr
   bb132:	4610      	mov	r0, r2
   bb134:	e7e9      	b.n	bb10a <__lo0bits+0x2a>
   bb136:	2000      	movs	r0, #0
   bb138:	4770      	bx	lr
   bb13a:	2020      	movs	r0, #32
   bb13c:	4770      	bx	lr
	...

000bb140 <__i2b>:
   bb140:	b510      	push	{r4, lr}
   bb142:	460c      	mov	r4, r1
   bb144:	2101      	movs	r1, #1
   bb146:	f7ff feb9 	bl	baebc <_Balloc>
   bb14a:	4602      	mov	r2, r0
   bb14c:	b928      	cbnz	r0, bb15a <__i2b+0x1a>
   bb14e:	4b05      	ldr	r3, [pc, #20]	; (bb164 <__i2b+0x24>)
   bb150:	4805      	ldr	r0, [pc, #20]	; (bb168 <__i2b+0x28>)
   bb152:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bb156:	f7fa fcef 	bl	b5b38 <__assert_func>
   bb15a:	2301      	movs	r3, #1
   bb15c:	6144      	str	r4, [r0, #20]
   bb15e:	6103      	str	r3, [r0, #16]
   bb160:	bd10      	pop	{r4, pc}
   bb162:	bf00      	nop
   bb164:	000bc580 	.word	0x000bc580
   bb168:	000bc62c 	.word	0x000bc62c

000bb16c <__multiply>:
   bb16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb170:	4691      	mov	r9, r2
   bb172:	690a      	ldr	r2, [r1, #16]
   bb174:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb178:	429a      	cmp	r2, r3
   bb17a:	bfb8      	it	lt
   bb17c:	460b      	movlt	r3, r1
   bb17e:	460c      	mov	r4, r1
   bb180:	bfbc      	itt	lt
   bb182:	464c      	movlt	r4, r9
   bb184:	4699      	movlt	r9, r3
   bb186:	6927      	ldr	r7, [r4, #16]
   bb188:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bb18c:	68a3      	ldr	r3, [r4, #8]
   bb18e:	6861      	ldr	r1, [r4, #4]
   bb190:	eb07 060a 	add.w	r6, r7, sl
   bb194:	42b3      	cmp	r3, r6
   bb196:	b085      	sub	sp, #20
   bb198:	bfb8      	it	lt
   bb19a:	3101      	addlt	r1, #1
   bb19c:	f7ff fe8e 	bl	baebc <_Balloc>
   bb1a0:	b930      	cbnz	r0, bb1b0 <__multiply+0x44>
   bb1a2:	4602      	mov	r2, r0
   bb1a4:	4b44      	ldr	r3, [pc, #272]	; (bb2b8 <__multiply+0x14c>)
   bb1a6:	4845      	ldr	r0, [pc, #276]	; (bb2bc <__multiply+0x150>)
   bb1a8:	f240 115d 	movw	r1, #349	; 0x15d
   bb1ac:	f7fa fcc4 	bl	b5b38 <__assert_func>
   bb1b0:	f100 0514 	add.w	r5, r0, #20
   bb1b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bb1b8:	462b      	mov	r3, r5
   bb1ba:	2200      	movs	r2, #0
   bb1bc:	4543      	cmp	r3, r8
   bb1be:	d321      	bcc.n	bb204 <__multiply+0x98>
   bb1c0:	f104 0314 	add.w	r3, r4, #20
   bb1c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bb1c8:	f109 0314 	add.w	r3, r9, #20
   bb1cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bb1d0:	9202      	str	r2, [sp, #8]
   bb1d2:	1b3a      	subs	r2, r7, r4
   bb1d4:	3a15      	subs	r2, #21
   bb1d6:	f022 0203 	bic.w	r2, r2, #3
   bb1da:	3204      	adds	r2, #4
   bb1dc:	f104 0115 	add.w	r1, r4, #21
   bb1e0:	428f      	cmp	r7, r1
   bb1e2:	bf38      	it	cc
   bb1e4:	2204      	movcc	r2, #4
   bb1e6:	9201      	str	r2, [sp, #4]
   bb1e8:	9a02      	ldr	r2, [sp, #8]
   bb1ea:	9303      	str	r3, [sp, #12]
   bb1ec:	429a      	cmp	r2, r3
   bb1ee:	d80c      	bhi.n	bb20a <__multiply+0x9e>
   bb1f0:	2e00      	cmp	r6, #0
   bb1f2:	dd03      	ble.n	bb1fc <__multiply+0x90>
   bb1f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bb1f8:	2b00      	cmp	r3, #0
   bb1fa:	d05a      	beq.n	bb2b2 <__multiply+0x146>
   bb1fc:	6106      	str	r6, [r0, #16]
   bb1fe:	b005      	add	sp, #20
   bb200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb204:	f843 2b04 	str.w	r2, [r3], #4
   bb208:	e7d8      	b.n	bb1bc <__multiply+0x50>
   bb20a:	f8b3 a000 	ldrh.w	sl, [r3]
   bb20e:	f1ba 0f00 	cmp.w	sl, #0
   bb212:	d024      	beq.n	bb25e <__multiply+0xf2>
   bb214:	f104 0e14 	add.w	lr, r4, #20
   bb218:	46a9      	mov	r9, r5
   bb21a:	f04f 0c00 	mov.w	ip, #0
   bb21e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bb222:	f8d9 1000 	ldr.w	r1, [r9]
   bb226:	fa1f fb82 	uxth.w	fp, r2
   bb22a:	b289      	uxth	r1, r1
   bb22c:	fb0a 110b 	mla	r1, sl, fp, r1
   bb230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bb234:	f8d9 2000 	ldr.w	r2, [r9]
   bb238:	4461      	add	r1, ip
   bb23a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb23e:	fb0a c20b 	mla	r2, sl, fp, ip
   bb242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bb246:	b289      	uxth	r1, r1
   bb248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bb24c:	4577      	cmp	r7, lr
   bb24e:	f849 1b04 	str.w	r1, [r9], #4
   bb252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb256:	d8e2      	bhi.n	bb21e <__multiply+0xb2>
   bb258:	9a01      	ldr	r2, [sp, #4]
   bb25a:	f845 c002 	str.w	ip, [r5, r2]
   bb25e:	9a03      	ldr	r2, [sp, #12]
   bb260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bb264:	3304      	adds	r3, #4
   bb266:	f1b9 0f00 	cmp.w	r9, #0
   bb26a:	d020      	beq.n	bb2ae <__multiply+0x142>
   bb26c:	6829      	ldr	r1, [r5, #0]
   bb26e:	f104 0c14 	add.w	ip, r4, #20
   bb272:	46ae      	mov	lr, r5
   bb274:	f04f 0a00 	mov.w	sl, #0
   bb278:	f8bc b000 	ldrh.w	fp, [ip]
   bb27c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bb280:	fb09 220b 	mla	r2, r9, fp, r2
   bb284:	4492      	add	sl, r2
   bb286:	b289      	uxth	r1, r1
   bb288:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bb28c:	f84e 1b04 	str.w	r1, [lr], #4
   bb290:	f85c 2b04 	ldr.w	r2, [ip], #4
   bb294:	f8be 1000 	ldrh.w	r1, [lr]
   bb298:	0c12      	lsrs	r2, r2, #16
   bb29a:	fb09 1102 	mla	r1, r9, r2, r1
   bb29e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bb2a2:	4567      	cmp	r7, ip
   bb2a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bb2a8:	d8e6      	bhi.n	bb278 <__multiply+0x10c>
   bb2aa:	9a01      	ldr	r2, [sp, #4]
   bb2ac:	50a9      	str	r1, [r5, r2]
   bb2ae:	3504      	adds	r5, #4
   bb2b0:	e79a      	b.n	bb1e8 <__multiply+0x7c>
   bb2b2:	3e01      	subs	r6, #1
   bb2b4:	e79c      	b.n	bb1f0 <__multiply+0x84>
   bb2b6:	bf00      	nop
   bb2b8:	000bc580 	.word	0x000bc580
   bb2bc:	000bc62c 	.word	0x000bc62c

000bb2c0 <__pow5mult>:
   bb2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb2c4:	4615      	mov	r5, r2
   bb2c6:	f012 0203 	ands.w	r2, r2, #3
   bb2ca:	4606      	mov	r6, r0
   bb2cc:	460f      	mov	r7, r1
   bb2ce:	d007      	beq.n	bb2e0 <__pow5mult+0x20>
   bb2d0:	4c25      	ldr	r4, [pc, #148]	; (bb368 <__pow5mult+0xa8>)
   bb2d2:	3a01      	subs	r2, #1
   bb2d4:	2300      	movs	r3, #0
   bb2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bb2da:	f7ff fe51 	bl	baf80 <__multadd>
   bb2de:	4607      	mov	r7, r0
   bb2e0:	10ad      	asrs	r5, r5, #2
   bb2e2:	d03d      	beq.n	bb360 <__pow5mult+0xa0>
   bb2e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb2e6:	b97c      	cbnz	r4, bb308 <__pow5mult+0x48>
   bb2e8:	2010      	movs	r0, #16
   bb2ea:	f7fa fbe5 	bl	b5ab8 <malloc>
   bb2ee:	4602      	mov	r2, r0
   bb2f0:	6270      	str	r0, [r6, #36]	; 0x24
   bb2f2:	b928      	cbnz	r0, bb300 <__pow5mult+0x40>
   bb2f4:	4b1d      	ldr	r3, [pc, #116]	; (bb36c <__pow5mult+0xac>)
   bb2f6:	481e      	ldr	r0, [pc, #120]	; (bb370 <__pow5mult+0xb0>)
   bb2f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bb2fc:	f7fa fc1c 	bl	b5b38 <__assert_func>
   bb300:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb304:	6004      	str	r4, [r0, #0]
   bb306:	60c4      	str	r4, [r0, #12]
   bb308:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bb30c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bb310:	b94c      	cbnz	r4, bb326 <__pow5mult+0x66>
   bb312:	f240 2171 	movw	r1, #625	; 0x271
   bb316:	4630      	mov	r0, r6
   bb318:	f7ff ff12 	bl	bb140 <__i2b>
   bb31c:	2300      	movs	r3, #0
   bb31e:	f8c8 0008 	str.w	r0, [r8, #8]
   bb322:	4604      	mov	r4, r0
   bb324:	6003      	str	r3, [r0, #0]
   bb326:	f04f 0900 	mov.w	r9, #0
   bb32a:	07eb      	lsls	r3, r5, #31
   bb32c:	d50a      	bpl.n	bb344 <__pow5mult+0x84>
   bb32e:	4639      	mov	r1, r7
   bb330:	4622      	mov	r2, r4
   bb332:	4630      	mov	r0, r6
   bb334:	f7ff ff1a 	bl	bb16c <__multiply>
   bb338:	4639      	mov	r1, r7
   bb33a:	4680      	mov	r8, r0
   bb33c:	4630      	mov	r0, r6
   bb33e:	f7ff fdfd 	bl	baf3c <_Bfree>
   bb342:	4647      	mov	r7, r8
   bb344:	106d      	asrs	r5, r5, #1
   bb346:	d00b      	beq.n	bb360 <__pow5mult+0xa0>
   bb348:	6820      	ldr	r0, [r4, #0]
   bb34a:	b938      	cbnz	r0, bb35c <__pow5mult+0x9c>
   bb34c:	4622      	mov	r2, r4
   bb34e:	4621      	mov	r1, r4
   bb350:	4630      	mov	r0, r6
   bb352:	f7ff ff0b 	bl	bb16c <__multiply>
   bb356:	6020      	str	r0, [r4, #0]
   bb358:	f8c0 9000 	str.w	r9, [r0]
   bb35c:	4604      	mov	r4, r0
   bb35e:	e7e4      	b.n	bb32a <__pow5mult+0x6a>
   bb360:	4638      	mov	r0, r7
   bb362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb366:	bf00      	nop
   bb368:	000bc7a0 	.word	0x000bc7a0
   bb36c:	000bc309 	.word	0x000bc309
   bb370:	000bc62c 	.word	0x000bc62c

000bb374 <__lshift>:
   bb374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb378:	460c      	mov	r4, r1
   bb37a:	6849      	ldr	r1, [r1, #4]
   bb37c:	6923      	ldr	r3, [r4, #16]
   bb37e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb382:	68a3      	ldr	r3, [r4, #8]
   bb384:	4607      	mov	r7, r0
   bb386:	4691      	mov	r9, r2
   bb388:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb38c:	f108 0601 	add.w	r6, r8, #1
   bb390:	42b3      	cmp	r3, r6
   bb392:	db0b      	blt.n	bb3ac <__lshift+0x38>
   bb394:	4638      	mov	r0, r7
   bb396:	f7ff fd91 	bl	baebc <_Balloc>
   bb39a:	4605      	mov	r5, r0
   bb39c:	b948      	cbnz	r0, bb3b2 <__lshift+0x3e>
   bb39e:	4602      	mov	r2, r0
   bb3a0:	4b2a      	ldr	r3, [pc, #168]	; (bb44c <__lshift+0xd8>)
   bb3a2:	482b      	ldr	r0, [pc, #172]	; (bb450 <__lshift+0xdc>)
   bb3a4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bb3a8:	f7fa fbc6 	bl	b5b38 <__assert_func>
   bb3ac:	3101      	adds	r1, #1
   bb3ae:	005b      	lsls	r3, r3, #1
   bb3b0:	e7ee      	b.n	bb390 <__lshift+0x1c>
   bb3b2:	2300      	movs	r3, #0
   bb3b4:	f100 0114 	add.w	r1, r0, #20
   bb3b8:	f100 0210 	add.w	r2, r0, #16
   bb3bc:	4618      	mov	r0, r3
   bb3be:	4553      	cmp	r3, sl
   bb3c0:	db37      	blt.n	bb432 <__lshift+0xbe>
   bb3c2:	6920      	ldr	r0, [r4, #16]
   bb3c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bb3c8:	f104 0314 	add.w	r3, r4, #20
   bb3cc:	f019 091f 	ands.w	r9, r9, #31
   bb3d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bb3d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bb3d8:	d02f      	beq.n	bb43a <__lshift+0xc6>
   bb3da:	f1c9 0e20 	rsb	lr, r9, #32
   bb3de:	468a      	mov	sl, r1
   bb3e0:	f04f 0c00 	mov.w	ip, #0
   bb3e4:	681a      	ldr	r2, [r3, #0]
   bb3e6:	fa02 f209 	lsl.w	r2, r2, r9
   bb3ea:	ea42 020c 	orr.w	r2, r2, ip
   bb3ee:	f84a 2b04 	str.w	r2, [sl], #4
   bb3f2:	f853 2b04 	ldr.w	r2, [r3], #4
   bb3f6:	4298      	cmp	r0, r3
   bb3f8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb3fc:	d8f2      	bhi.n	bb3e4 <__lshift+0x70>
   bb3fe:	1b03      	subs	r3, r0, r4
   bb400:	3b15      	subs	r3, #21
   bb402:	f023 0303 	bic.w	r3, r3, #3
   bb406:	3304      	adds	r3, #4
   bb408:	f104 0215 	add.w	r2, r4, #21
   bb40c:	4290      	cmp	r0, r2
   bb40e:	bf38      	it	cc
   bb410:	2304      	movcc	r3, #4
   bb412:	f841 c003 	str.w	ip, [r1, r3]
   bb416:	f1bc 0f00 	cmp.w	ip, #0
   bb41a:	d001      	beq.n	bb420 <__lshift+0xac>
   bb41c:	f108 0602 	add.w	r6, r8, #2
   bb420:	3e01      	subs	r6, #1
   bb422:	4638      	mov	r0, r7
   bb424:	612e      	str	r6, [r5, #16]
   bb426:	4621      	mov	r1, r4
   bb428:	f7ff fd88 	bl	baf3c <_Bfree>
   bb42c:	4628      	mov	r0, r5
   bb42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb432:	f842 0f04 	str.w	r0, [r2, #4]!
   bb436:	3301      	adds	r3, #1
   bb438:	e7c1      	b.n	bb3be <__lshift+0x4a>
   bb43a:	3904      	subs	r1, #4
   bb43c:	f853 2b04 	ldr.w	r2, [r3], #4
   bb440:	f841 2f04 	str.w	r2, [r1, #4]!
   bb444:	4298      	cmp	r0, r3
   bb446:	d8f9      	bhi.n	bb43c <__lshift+0xc8>
   bb448:	e7ea      	b.n	bb420 <__lshift+0xac>
   bb44a:	bf00      	nop
   bb44c:	000bc580 	.word	0x000bc580
   bb450:	000bc62c 	.word	0x000bc62c

000bb454 <__mcmp>:
   bb454:	b530      	push	{r4, r5, lr}
   bb456:	6902      	ldr	r2, [r0, #16]
   bb458:	690c      	ldr	r4, [r1, #16]
   bb45a:	1b12      	subs	r2, r2, r4
   bb45c:	d10e      	bne.n	bb47c <__mcmp+0x28>
   bb45e:	f100 0314 	add.w	r3, r0, #20
   bb462:	3114      	adds	r1, #20
   bb464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb46c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb474:	42a5      	cmp	r5, r4
   bb476:	d003      	beq.n	bb480 <__mcmp+0x2c>
   bb478:	d305      	bcc.n	bb486 <__mcmp+0x32>
   bb47a:	2201      	movs	r2, #1
   bb47c:	4610      	mov	r0, r2
   bb47e:	bd30      	pop	{r4, r5, pc}
   bb480:	4283      	cmp	r3, r0
   bb482:	d3f3      	bcc.n	bb46c <__mcmp+0x18>
   bb484:	e7fa      	b.n	bb47c <__mcmp+0x28>
   bb486:	f04f 32ff 	mov.w	r2, #4294967295
   bb48a:	e7f7      	b.n	bb47c <__mcmp+0x28>

000bb48c <__mdiff>:
   bb48c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb490:	460c      	mov	r4, r1
   bb492:	4606      	mov	r6, r0
   bb494:	4611      	mov	r1, r2
   bb496:	4620      	mov	r0, r4
   bb498:	4690      	mov	r8, r2
   bb49a:	f7ff ffdb 	bl	bb454 <__mcmp>
   bb49e:	1e05      	subs	r5, r0, #0
   bb4a0:	d110      	bne.n	bb4c4 <__mdiff+0x38>
   bb4a2:	4629      	mov	r1, r5
   bb4a4:	4630      	mov	r0, r6
   bb4a6:	f7ff fd09 	bl	baebc <_Balloc>
   bb4aa:	b930      	cbnz	r0, bb4ba <__mdiff+0x2e>
   bb4ac:	4b3a      	ldr	r3, [pc, #232]	; (bb598 <__mdiff+0x10c>)
   bb4ae:	4602      	mov	r2, r0
   bb4b0:	f240 2132 	movw	r1, #562	; 0x232
   bb4b4:	4839      	ldr	r0, [pc, #228]	; (bb59c <__mdiff+0x110>)
   bb4b6:	f7fa fb3f 	bl	b5b38 <__assert_func>
   bb4ba:	2301      	movs	r3, #1
   bb4bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb4c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb4c4:	bfa4      	itt	ge
   bb4c6:	4643      	movge	r3, r8
   bb4c8:	46a0      	movge	r8, r4
   bb4ca:	4630      	mov	r0, r6
   bb4cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb4d0:	bfa6      	itte	ge
   bb4d2:	461c      	movge	r4, r3
   bb4d4:	2500      	movge	r5, #0
   bb4d6:	2501      	movlt	r5, #1
   bb4d8:	f7ff fcf0 	bl	baebc <_Balloc>
   bb4dc:	b920      	cbnz	r0, bb4e8 <__mdiff+0x5c>
   bb4de:	4b2e      	ldr	r3, [pc, #184]	; (bb598 <__mdiff+0x10c>)
   bb4e0:	4602      	mov	r2, r0
   bb4e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb4e6:	e7e5      	b.n	bb4b4 <__mdiff+0x28>
   bb4e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb4ec:	6926      	ldr	r6, [r4, #16]
   bb4ee:	60c5      	str	r5, [r0, #12]
   bb4f0:	f104 0914 	add.w	r9, r4, #20
   bb4f4:	f108 0514 	add.w	r5, r8, #20
   bb4f8:	f100 0e14 	add.w	lr, r0, #20
   bb4fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb504:	f108 0210 	add.w	r2, r8, #16
   bb508:	46f2      	mov	sl, lr
   bb50a:	2100      	movs	r1, #0
   bb50c:	f859 3b04 	ldr.w	r3, [r9], #4
   bb510:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb514:	fa1f f883 	uxth.w	r8, r3
   bb518:	fa11 f18b 	uxtah	r1, r1, fp
   bb51c:	0c1b      	lsrs	r3, r3, #16
   bb51e:	eba1 0808 	sub.w	r8, r1, r8
   bb522:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb526:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb52a:	fa1f f888 	uxth.w	r8, r8
   bb52e:	1419      	asrs	r1, r3, #16
   bb530:	454e      	cmp	r6, r9
   bb532:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb536:	f84a 3b04 	str.w	r3, [sl], #4
   bb53a:	d8e7      	bhi.n	bb50c <__mdiff+0x80>
   bb53c:	1b33      	subs	r3, r6, r4
   bb53e:	3b15      	subs	r3, #21
   bb540:	f023 0303 	bic.w	r3, r3, #3
   bb544:	3304      	adds	r3, #4
   bb546:	3415      	adds	r4, #21
   bb548:	42a6      	cmp	r6, r4
   bb54a:	bf38      	it	cc
   bb54c:	2304      	movcc	r3, #4
   bb54e:	441d      	add	r5, r3
   bb550:	4473      	add	r3, lr
   bb552:	469e      	mov	lr, r3
   bb554:	462e      	mov	r6, r5
   bb556:	4566      	cmp	r6, ip
   bb558:	d30e      	bcc.n	bb578 <__mdiff+0xec>
   bb55a:	f10c 0203 	add.w	r2, ip, #3
   bb55e:	1b52      	subs	r2, r2, r5
   bb560:	f022 0203 	bic.w	r2, r2, #3
   bb564:	3d03      	subs	r5, #3
   bb566:	45ac      	cmp	ip, r5
   bb568:	bf38      	it	cc
   bb56a:	2200      	movcc	r2, #0
   bb56c:	441a      	add	r2, r3
   bb56e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb572:	b17b      	cbz	r3, bb594 <__mdiff+0x108>
   bb574:	6107      	str	r7, [r0, #16]
   bb576:	e7a3      	b.n	bb4c0 <__mdiff+0x34>
   bb578:	f856 8b04 	ldr.w	r8, [r6], #4
   bb57c:	fa11 f288 	uxtah	r2, r1, r8
   bb580:	1414      	asrs	r4, r2, #16
   bb582:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb586:	b292      	uxth	r2, r2
   bb588:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb58c:	f84e 2b04 	str.w	r2, [lr], #4
   bb590:	1421      	asrs	r1, r4, #16
   bb592:	e7e0      	b.n	bb556 <__mdiff+0xca>
   bb594:	3f01      	subs	r7, #1
   bb596:	e7ea      	b.n	bb56e <__mdiff+0xe2>
   bb598:	000bc580 	.word	0x000bc580
   bb59c:	000bc62c 	.word	0x000bc62c

000bb5a0 <__ulp>:
   bb5a0:	b082      	sub	sp, #8
   bb5a2:	ed8d 0b00 	vstr	d0, [sp]
   bb5a6:	9b01      	ldr	r3, [sp, #4]
   bb5a8:	4912      	ldr	r1, [pc, #72]	; (bb5f4 <__ulp+0x54>)
   bb5aa:	4019      	ands	r1, r3
   bb5ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb5b0:	2900      	cmp	r1, #0
   bb5b2:	dd05      	ble.n	bb5c0 <__ulp+0x20>
   bb5b4:	2200      	movs	r2, #0
   bb5b6:	460b      	mov	r3, r1
   bb5b8:	ec43 2b10 	vmov	d0, r2, r3
   bb5bc:	b002      	add	sp, #8
   bb5be:	4770      	bx	lr
   bb5c0:	4249      	negs	r1, r1
   bb5c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb5c6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb5ca:	f04f 0200 	mov.w	r2, #0
   bb5ce:	f04f 0300 	mov.w	r3, #0
   bb5d2:	da04      	bge.n	bb5de <__ulp+0x3e>
   bb5d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb5d8:	fa41 f300 	asr.w	r3, r1, r0
   bb5dc:	e7ec      	b.n	bb5b8 <__ulp+0x18>
   bb5de:	f1a0 0114 	sub.w	r1, r0, #20
   bb5e2:	291e      	cmp	r1, #30
   bb5e4:	bfda      	itte	le
   bb5e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb5ea:	fa20 f101 	lsrle.w	r1, r0, r1
   bb5ee:	2101      	movgt	r1, #1
   bb5f0:	460a      	mov	r2, r1
   bb5f2:	e7e1      	b.n	bb5b8 <__ulp+0x18>
   bb5f4:	7ff00000 	.word	0x7ff00000

000bb5f8 <__b2d>:
   bb5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb5fa:	6905      	ldr	r5, [r0, #16]
   bb5fc:	f100 0714 	add.w	r7, r0, #20
   bb600:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb604:	1f2e      	subs	r6, r5, #4
   bb606:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb60a:	4620      	mov	r0, r4
   bb60c:	f7ff fd48 	bl	bb0a0 <__hi0bits>
   bb610:	f1c0 0320 	rsb	r3, r0, #32
   bb614:	280a      	cmp	r0, #10
   bb616:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb694 <__b2d+0x9c>
   bb61a:	600b      	str	r3, [r1, #0]
   bb61c:	dc14      	bgt.n	bb648 <__b2d+0x50>
   bb61e:	f1c0 0e0b 	rsb	lr, r0, #11
   bb622:	fa24 f10e 	lsr.w	r1, r4, lr
   bb626:	42b7      	cmp	r7, r6
   bb628:	ea41 030c 	orr.w	r3, r1, ip
   bb62c:	bf34      	ite	cc
   bb62e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb632:	2100      	movcs	r1, #0
   bb634:	3015      	adds	r0, #21
   bb636:	fa04 f000 	lsl.w	r0, r4, r0
   bb63a:	fa21 f10e 	lsr.w	r1, r1, lr
   bb63e:	ea40 0201 	orr.w	r2, r0, r1
   bb642:	ec43 2b10 	vmov	d0, r2, r3
   bb646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb648:	42b7      	cmp	r7, r6
   bb64a:	bf3a      	itte	cc
   bb64c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb650:	f1a5 0608 	subcc.w	r6, r5, #8
   bb654:	2100      	movcs	r1, #0
   bb656:	380b      	subs	r0, #11
   bb658:	d017      	beq.n	bb68a <__b2d+0x92>
   bb65a:	f1c0 0c20 	rsb	ip, r0, #32
   bb65e:	fa04 f500 	lsl.w	r5, r4, r0
   bb662:	42be      	cmp	r6, r7
   bb664:	fa21 f40c 	lsr.w	r4, r1, ip
   bb668:	ea45 0504 	orr.w	r5, r5, r4
   bb66c:	bf8c      	ite	hi
   bb66e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb672:	2400      	movls	r4, #0
   bb674:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb678:	fa01 f000 	lsl.w	r0, r1, r0
   bb67c:	fa24 f40c 	lsr.w	r4, r4, ip
   bb680:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb684:	ea40 0204 	orr.w	r2, r0, r4
   bb688:	e7db      	b.n	bb642 <__b2d+0x4a>
   bb68a:	ea44 030c 	orr.w	r3, r4, ip
   bb68e:	460a      	mov	r2, r1
   bb690:	e7d7      	b.n	bb642 <__b2d+0x4a>
   bb692:	bf00      	nop
   bb694:	3ff00000 	.word	0x3ff00000

000bb698 <__d2b>:
   bb698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb69c:	4689      	mov	r9, r1
   bb69e:	2101      	movs	r1, #1
   bb6a0:	ec57 6b10 	vmov	r6, r7, d0
   bb6a4:	4690      	mov	r8, r2
   bb6a6:	f7ff fc09 	bl	baebc <_Balloc>
   bb6aa:	4604      	mov	r4, r0
   bb6ac:	b930      	cbnz	r0, bb6bc <__d2b+0x24>
   bb6ae:	4602      	mov	r2, r0
   bb6b0:	4b25      	ldr	r3, [pc, #148]	; (bb748 <__d2b+0xb0>)
   bb6b2:	4826      	ldr	r0, [pc, #152]	; (bb74c <__d2b+0xb4>)
   bb6b4:	f240 310a 	movw	r1, #778	; 0x30a
   bb6b8:	f7fa fa3e 	bl	b5b38 <__assert_func>
   bb6bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb6c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb6c4:	bb35      	cbnz	r5, bb714 <__d2b+0x7c>
   bb6c6:	2e00      	cmp	r6, #0
   bb6c8:	9301      	str	r3, [sp, #4]
   bb6ca:	d028      	beq.n	bb71e <__d2b+0x86>
   bb6cc:	4668      	mov	r0, sp
   bb6ce:	9600      	str	r6, [sp, #0]
   bb6d0:	f7ff fd06 	bl	bb0e0 <__lo0bits>
   bb6d4:	9900      	ldr	r1, [sp, #0]
   bb6d6:	b300      	cbz	r0, bb71a <__d2b+0x82>
   bb6d8:	9a01      	ldr	r2, [sp, #4]
   bb6da:	f1c0 0320 	rsb	r3, r0, #32
   bb6de:	fa02 f303 	lsl.w	r3, r2, r3
   bb6e2:	430b      	orrs	r3, r1
   bb6e4:	40c2      	lsrs	r2, r0
   bb6e6:	6163      	str	r3, [r4, #20]
   bb6e8:	9201      	str	r2, [sp, #4]
   bb6ea:	9b01      	ldr	r3, [sp, #4]
   bb6ec:	61a3      	str	r3, [r4, #24]
   bb6ee:	2b00      	cmp	r3, #0
   bb6f0:	bf14      	ite	ne
   bb6f2:	2202      	movne	r2, #2
   bb6f4:	2201      	moveq	r2, #1
   bb6f6:	6122      	str	r2, [r4, #16]
   bb6f8:	b1d5      	cbz	r5, bb730 <__d2b+0x98>
   bb6fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb6fe:	4405      	add	r5, r0
   bb700:	f8c9 5000 	str.w	r5, [r9]
   bb704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb708:	f8c8 0000 	str.w	r0, [r8]
   bb70c:	4620      	mov	r0, r4
   bb70e:	b003      	add	sp, #12
   bb710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb718:	e7d5      	b.n	bb6c6 <__d2b+0x2e>
   bb71a:	6161      	str	r1, [r4, #20]
   bb71c:	e7e5      	b.n	bb6ea <__d2b+0x52>
   bb71e:	a801      	add	r0, sp, #4
   bb720:	f7ff fcde 	bl	bb0e0 <__lo0bits>
   bb724:	9b01      	ldr	r3, [sp, #4]
   bb726:	6163      	str	r3, [r4, #20]
   bb728:	2201      	movs	r2, #1
   bb72a:	6122      	str	r2, [r4, #16]
   bb72c:	3020      	adds	r0, #32
   bb72e:	e7e3      	b.n	bb6f8 <__d2b+0x60>
   bb730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb738:	f8c9 0000 	str.w	r0, [r9]
   bb73c:	6918      	ldr	r0, [r3, #16]
   bb73e:	f7ff fcaf 	bl	bb0a0 <__hi0bits>
   bb742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb746:	e7df      	b.n	bb708 <__d2b+0x70>
   bb748:	000bc580 	.word	0x000bc580
   bb74c:	000bc62c 	.word	0x000bc62c

000bb750 <__ratio>:
   bb750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb754:	4688      	mov	r8, r1
   bb756:	4669      	mov	r1, sp
   bb758:	4681      	mov	r9, r0
   bb75a:	f7ff ff4d 	bl	bb5f8 <__b2d>
   bb75e:	a901      	add	r1, sp, #4
   bb760:	4640      	mov	r0, r8
   bb762:	ec55 4b10 	vmov	r4, r5, d0
   bb766:	f7ff ff47 	bl	bb5f8 <__b2d>
   bb76a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb76e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb772:	eba3 0c02 	sub.w	ip, r3, r2
   bb776:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb77a:	1a9b      	subs	r3, r3, r2
   bb77c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb780:	ec51 0b10 	vmov	r0, r1, d0
   bb784:	2b00      	cmp	r3, #0
   bb786:	bfd6      	itet	le
   bb788:	460a      	movle	r2, r1
   bb78a:	462a      	movgt	r2, r5
   bb78c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb790:	468b      	mov	fp, r1
   bb792:	462f      	mov	r7, r5
   bb794:	bfd4      	ite	le
   bb796:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb79a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb79e:	4620      	mov	r0, r4
   bb7a0:	ee10 2a10 	vmov	r2, s0
   bb7a4:	465b      	mov	r3, fp
   bb7a6:	4639      	mov	r1, r7
   bb7a8:	f7fd fdc4 	bl	b9334 <__aeabi_ddiv>
   bb7ac:	ec41 0b10 	vmov	d0, r0, r1
   bb7b0:	b003      	add	sp, #12
   bb7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb7b6 <__copybits>:
   bb7b6:	3901      	subs	r1, #1
   bb7b8:	b570      	push	{r4, r5, r6, lr}
   bb7ba:	1149      	asrs	r1, r1, #5
   bb7bc:	6914      	ldr	r4, [r2, #16]
   bb7be:	3101      	adds	r1, #1
   bb7c0:	f102 0314 	add.w	r3, r2, #20
   bb7c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb7c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb7cc:	1f05      	subs	r5, r0, #4
   bb7ce:	42a3      	cmp	r3, r4
   bb7d0:	d30c      	bcc.n	bb7ec <__copybits+0x36>
   bb7d2:	1aa3      	subs	r3, r4, r2
   bb7d4:	3b11      	subs	r3, #17
   bb7d6:	f023 0303 	bic.w	r3, r3, #3
   bb7da:	3211      	adds	r2, #17
   bb7dc:	42a2      	cmp	r2, r4
   bb7de:	bf88      	it	hi
   bb7e0:	2300      	movhi	r3, #0
   bb7e2:	4418      	add	r0, r3
   bb7e4:	2300      	movs	r3, #0
   bb7e6:	4288      	cmp	r0, r1
   bb7e8:	d305      	bcc.n	bb7f6 <__copybits+0x40>
   bb7ea:	bd70      	pop	{r4, r5, r6, pc}
   bb7ec:	f853 6b04 	ldr.w	r6, [r3], #4
   bb7f0:	f845 6f04 	str.w	r6, [r5, #4]!
   bb7f4:	e7eb      	b.n	bb7ce <__copybits+0x18>
   bb7f6:	f840 3b04 	str.w	r3, [r0], #4
   bb7fa:	e7f4      	b.n	bb7e6 <__copybits+0x30>

000bb7fc <__any_on>:
   bb7fc:	f100 0214 	add.w	r2, r0, #20
   bb800:	6900      	ldr	r0, [r0, #16]
   bb802:	114b      	asrs	r3, r1, #5
   bb804:	4298      	cmp	r0, r3
   bb806:	b510      	push	{r4, lr}
   bb808:	db11      	blt.n	bb82e <__any_on+0x32>
   bb80a:	dd0a      	ble.n	bb822 <__any_on+0x26>
   bb80c:	f011 011f 	ands.w	r1, r1, #31
   bb810:	d007      	beq.n	bb822 <__any_on+0x26>
   bb812:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb816:	fa24 f001 	lsr.w	r0, r4, r1
   bb81a:	fa00 f101 	lsl.w	r1, r0, r1
   bb81e:	428c      	cmp	r4, r1
   bb820:	d10b      	bne.n	bb83a <__any_on+0x3e>
   bb822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb826:	4293      	cmp	r3, r2
   bb828:	d803      	bhi.n	bb832 <__any_on+0x36>
   bb82a:	2000      	movs	r0, #0
   bb82c:	bd10      	pop	{r4, pc}
   bb82e:	4603      	mov	r3, r0
   bb830:	e7f7      	b.n	bb822 <__any_on+0x26>
   bb832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb836:	2900      	cmp	r1, #0
   bb838:	d0f5      	beq.n	bb826 <__any_on+0x2a>
   bb83a:	2001      	movs	r0, #1
   bb83c:	e7f6      	b.n	bb82c <__any_on+0x30>

000bb83e <_calloc_r>:
   bb83e:	b513      	push	{r0, r1, r4, lr}
   bb840:	434a      	muls	r2, r1
   bb842:	4611      	mov	r1, r2
   bb844:	9201      	str	r2, [sp, #4]
   bb846:	f7fa f967 	bl	b5b18 <_malloc_r>
   bb84a:	4604      	mov	r4, r0
   bb84c:	b118      	cbz	r0, bb856 <_calloc_r+0x18>
   bb84e:	9a01      	ldr	r2, [sp, #4]
   bb850:	2100      	movs	r1, #0
   bb852:	f7fd ff96 	bl	b9782 <memset>
   bb856:	4620      	mov	r0, r4
   bb858:	b002      	add	sp, #8
   bb85a:	bd10      	pop	{r4, pc}
   bb85c:	0000      	movs	r0, r0
	...

000bb860 <nan>:
   bb860:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb868 <nan+0x8>
   bb864:	4770      	bx	lr
   bb866:	bf00      	nop
   bb868:	00000000 	.word	0x00000000
   bb86c:	7ff80000 	.word	0x7ff80000

000bb870 <__ascii_wctomb>:
   bb870:	b149      	cbz	r1, bb886 <__ascii_wctomb+0x16>
   bb872:	2aff      	cmp	r2, #255	; 0xff
   bb874:	bf85      	ittet	hi
   bb876:	238a      	movhi	r3, #138	; 0x8a
   bb878:	6003      	strhi	r3, [r0, #0]
   bb87a:	700a      	strbls	r2, [r1, #0]
   bb87c:	f04f 30ff 	movhi.w	r0, #4294967295
   bb880:	bf98      	it	ls
   bb882:	2001      	movls	r0, #1
   bb884:	4770      	bx	lr
   bb886:	4608      	mov	r0, r1
   bb888:	4770      	bx	lr
	...

000bb88c <__aeabi_d2lz>:
   bb88c:	b538      	push	{r3, r4, r5, lr}
   bb88e:	2200      	movs	r2, #0
   bb890:	2300      	movs	r3, #0
   bb892:	4604      	mov	r4, r0
   bb894:	460d      	mov	r5, r1
   bb896:	f7fd fe95 	bl	b95c4 <__aeabi_dcmplt>
   bb89a:	b928      	cbnz	r0, bb8a8 <__aeabi_d2lz+0x1c>
   bb89c:	4620      	mov	r0, r4
   bb89e:	4629      	mov	r1, r5
   bb8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb8a4:	f7fd bf0a 	b.w	b96bc <__aeabi_d2ulz>
   bb8a8:	4620      	mov	r0, r4
   bb8aa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bb8ae:	f7fd ff05 	bl	b96bc <__aeabi_d2ulz>
   bb8b2:	4240      	negs	r0, r0
   bb8b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb8b8:	bd38      	pop	{r3, r4, r5, pc}
   bb8ba:	bf00      	nop

000bb8bc <dynalib_user>:
   bb8bc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bb8cc:	0000 0000 7270 6369 7365 002f 7325 000a     ....prices/.%s..
   bb8dc:	212c 5700 6961 6974 676e 6620 726f 4220     ,!.Waiting for B
   bb8ec:	454c 6c63 6569 746e 6320 6e6f 656e 7463     LEclient connect
   bb8fc:	6f69 2e6e 2e2e 4800 6769 6568 7473 7020     ion....Highest p
   bb90c:	6972 6563 6f20 2066 6874 2065 6164 3a79     rice of the day:
   bb91c:	2520 0a66 4c00 776f 7365 2074 7270 6369      %f..Lowest pric
   bb92c:	2065 666f 7420 6568 6420 7961 203a 6625     e of the day: %f
   bb93c:	000a 6f48 7275 2073 666f 7420 6568 6420     ..Hours of the d
   bb94c:	7961 7720 6568 6572 6520 656c 7463 6972     ay where electri
   bb95c:	6963 7974 6920 2073 6977 6874 6e69 6120     city is within a
   bb96c:	6363 7065 6574 2064 6172 676e 3a65 000a     ccepted range:..
   bb97c:	3025 6432 7420 206f 3025 6432 000a 227b     %02d to %02d..{"
   bb98c:	6857 5f72 6f74 6164 2279 5b3a 2c00 5d00     Whr_today":[.,.]
   bb99c:	007d 227b 7270 6369 7365 6579 7473 7265     }.{"pricesyester
   bb9ac:	6164 2279 5b3a 2500 322e 666c 7b00 7022     day":[.%.2lf.{"p
   bb9bc:	6972 6563 7473 646f 7961 3a22 005b 227b     ricestoday":[.{"
   bb9cc:	7270 6369 7365 6f74 6f6d 7272 776f 3a22     pricestomorrow":
   bb9dc:	005b 227b 4857 5f72 6579 7473 7265 6164     [.{"WHr_yesterda
   bb9ec:	2279 5b3a 7b00 5722 7248 745f 646f 7961     y":[.{"WHr_today
   bb9fc:	3a22 005b 6562 6f66 6572 2520 756c 000a     ":[.before %lu..
   bba0c:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   bba1c:	6574 6d20 6d65 726f 2079 6f66 2072 6f63     te memory for co
   bba2c:	7473 795f 7365 6574 6472 7961 000a 6146     st_yesterday..Fa
   bba3c:	6c69 6465 7420 206f 6c61 6f6c 6163 6574     iled to allocate
   bba4c:	6d20 6d65 726f 2079 6f66 2072 6f63 7473      memory for cost
   bba5c:	745f 646f 7961 000a 6146 6c69 6465 7420     _today..Failed t
   bba6c:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   bba7c:	2079 6f66 2072 6f63 7473 745f 6d6f 726f     y for cost_tomor
   bba8c:	6f72 0a77 4d00 6d65 726f 2079 6c61 6f6c     row..Memory allo
   bba9c:	6163 6574 2064 6f66 2072 7270 6369 7365     cated for prices
   bbaac:	203a 6425 6220 7479 7365 6f20 2066 6f64     : %d bytes of do
   bbabc:	6275 656c 0a73 4600 6961 656c 2064 6f74     ubles..Failed to
   bbacc:	6120 6c6c 636f 7461 2065 656d 6f6d 7972      allocate memory
   bbadc:	6620 726f 7720 5f68 6f74 6164 0a79 4600      for wh_today..F
   bbaec:	6961 656c 2064 6f74 6120 6c6c 636f 7461     ailed to allocat
   bbafc:	2065 656d 6f6d 7972 6620 726f 7720 5f68     e memory for wh_
   bbb0c:	6579 7473 7265 6164 0a79 4d00 6d65 726f     yesterday..Memor
   bbb1c:	2079 6c61 6f6c 6163 6574 2064 6f66 2072     y allocated for 
   bbb2c:	6877 203a 6425 6220 7479 7365 6f20 2066     wh: %d bytes of 
   bbb3c:	6e69 7374 000a 6641 6574 2072 6c25 0a75     ints..After %lu.
   bbb4c:	7000 6972 6563 0073 7543 7272 6e65 2074     .prices.Current 
   bbb5c:	4848 4d3a 3a4d 2520 3230 3a64 3025 6432     HH:MM: %02d:%02d
   bbb6c:	000a 207b 7922 6165 2272 203a 2522 2264     ..{ "year": "%d"
   bbb7c:	202c 6d22 6e6f 6874 3a22 2522 3230 2264     , "month":"%02d"
   bbb8c:	202c 6422 7961 3a22 2220 3025 6432 7d22     , "day": "%02d"}
   bbb9c:	6500 706c 6972 6573 0072 6e49 7720 726f     .elpriser.In wor
   bbbac:	0a6b 4300 6568 7061 6928 6873 2029 6f68     k..Cheap(ish) ho
   bbbbc:	7275 2073 666f 7420 6568 6420 7961 203a     urs of the day: 
   bbbcc:	2500 3230 2064 6f74 2520 3230 2c64 0020     .%02d to %02d, .
   bbbdc:	6f4c 2077 7270 6369 2065 6f68 7275 0073     Low price hours.
   bbbec:	5352 4953 253d 0064 6547 7474 6e69 2067     RSSI=%d.Getting 
   bbbfc:	7270 6369 2065 6164 6174 6620 726f 7920     price data for y
   bbc0c:	7365 6574 6472 7961 000a 6f43 6e75 3174     esterday..Count1
   bbc1c:	3a3d 2520 0a64 4700 7465 6974 676e 7020     =: %d..Getting p
   bbc2c:	6972 6563 6420 7461 2061 6f66 2072 6f74     rice data for to
   bbc3c:	6164 0a79 4300 756f 746e 3d32 203a 6425     day..Count2=: %d
   bbc4c:	000a 6854 2065 7270 6369 7365 6620 726f     ..The prices for
   bbc5c:	7420 6d6f 726f 6f72 2076 6977 6c6c 6220      tomorrov will b
   bbc6c:	2065 7570 6c6c 6465 6120 2074 6425 303a     e pulled at %d:0
   bbc7c:	0a30 5200 6365 6965 6576 2064 6f70 6577     0..Received powe
   bbc8c:	2f72 6567 0a74 7b00 7722 7461 2274 253a     r/get..{"watt":%
   bbc9c:	7d64 6200 656c 635f 6e6f 656e 7463 6465     d}.ble_connected
   bbcac:	000a 6157 7474 6e20 776f 4400 4b4b 5920     ..Watt now.DKK Y
   bbcbc:	7365 6574 6472 7961 4400 4b4b 5420 646f     esterday.DKK Tod
   bbccc:	7961 4400 4b4b 5420 6d6f 726f 6f72 0077     ay.DKK Tomorrow.
   bbcdc:	6857 2072 6f54 6164 0079 6857 2072 6559     Whr Today.Whr Ye
   bbcec:	7473 7265 6164 0079                         sterday.

000bbcf4 <_ZTV5Timer>:
	...
   bbcfc:	43ed 000b 4431 000b 4121 000b 3462 3532     .C..1D..!A..b425
   bbd0c:	3430 3530 662d 3462 2d62 3734 3634 622d     0405-fb4b-4746-b
   bbd1c:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bbd2c:	6200 3234 3035 3034 2d34 6266 6234 342d     .b4250404-fb4b-4
   bbd3c:	3437 2d36 3262 3062 392d 6633 6530 3136     746-b2b0-93f0e61
   bbd4c:	3231 6332 0036 3462 3532 3430 3330 662d     122c6.b4250403-f
   bbd5c:	3462 2d62 3734 3634 622d 6232 2d30 3339     b4b-4746-b2b0-93
   bbd6c:	3066 3665 3131 3232 3663 6200 3234 3035     f0e61122c6.b4250
   bbd7c:	3034 2d32 6266 6234 342d 3437 2d36 3262     402-fb4b-4746-b2
   bbd8c:	3062 392d 6633 6530 3136 3231 6332 0036     b0-93f0e61122c6.
   bbd9c:	3462 3532 3430 3630 662d 3462 2d62 3734     b4250406-fb4b-47
   bbdac:	3634 622d 6232 2d30 3339 3066 3665 3131     46-b2b0-93f0e611
   bbdbc:	3232 3663 6200 3234 3035 3034 2d31 6266     22c6.b4250401-fb
   bbdcc:	6234 342d 3437 2d36 3262 3062 392d 6633     4b-4746-b2b0-93f
   bbddc:	6530 3136 3231 6332 0036 6633 6131 3531     0e61122c6.3f1a15
   bbdec:	3639 652d 3765 2d66 3234 6462 382d 6434     96-ee7f-42bd-84d
   bbdfc:	2d31 3162 3261 3439 3866 6532 6663 4100     1-b1a294f82ecf.A
   bbe0c:	6772 6e6f 4d50 0000                         rgonPM..

000bbe14 <_ZTVN5spark13EthernetClassE>:
	...
   bbe1c:	5bc7 000b 5bbd 000b 5bb3 000b 5ba9 000b     .[...[...[...[..
   bbe2c:	5b9d 000b 5b91 000b 8879 000b 8881 000b     .[...[..y.......
   bbe3c:	5b85 000b 5b7d 000b 5b73 000b 5b69 000b     .[..}[..s[..i[..
   bbe4c:	88b1 000b                                   ....

000bbe50 <_ZTV3UDP>:
	...
   bbe58:	6279 000b 629d 000b 5d39 000b 5e61 000b     yb...b..9]..a^..
   bbe68:	5cf1 000b 5d51 000b 5d6f 000b 5d89 000b     .\..Q]..o]...]..
   bbe78:	5dad 000b 5e45 000b 611f 000b 5ee5 000b     .]..E^...a...^..
   bbe88:	603d 000b 5cd9 000b 6209 000b 5fc5 000b     =`...\...b..._..
   bbe98:	5cf9 000b 6237 000b 5e8b 000b 5ce7 000b     .\..7b...^...\..
   bbea8:	5f1d 000b 5ced 000b 5d8b 000b fff0 ffff     ._...\...]......
   bbeb8:	0000 0000 5da5 000b 7341 6573 7472 6f69     .....]..Assertio
   bbec8:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bbed8:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bbee8:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bbef8:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bbf08:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bbf18:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bbf28:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bbf38:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bbf48:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bbf58:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bbf68:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bbf78:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bbf88:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bbf98:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bbfa8:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bbfb8:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bbfc8:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bbfd8:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bbfe8:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bbff8:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bc008:	6369 002e                                   ic..

000bc00c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc014:	64e7 000b 6549 000b 6669 000b 6573 000b     .d..Ie..if..se..
   bc024:	64e9 000b                                   .d..

000bc028 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc030:	64e3 000b 6557 000b 64e5 000b 6579 000b     .d..We...d..ye..
   bc040:	6509 000b                                   .e..

000bc044 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc04c:	64e1 000b 6565 000b 6e09 000b 657f 000b     .d..ee...n...e..
   bc05c:	6529 000b                                   )e..

000bc060 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bc06c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bc07e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bc07e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bc08e <_ZN8particle7BleUuid9BASE_UUIDE>:
   bc08e:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bc09e:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bc0ae:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bc0c0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc0c8:	7d29 000b 7d2f 000b 7d6d 000b 7d3d 000b     )}../}..m}..=}..
   bc0d8:	7d2b 000b                                   +}..

000bc0dc <_ZTV9IPAddress>:
	...
   bc0e4:	8269 000b 8259 000b 825b 000b               i...Y...[...

000bc0f0 <_ZTV9USBSerial>:
	...
   bc0f8:	838b 000b 83f3 000b 83c9 000b 78d9 000b     .............x..
   bc108:	83bb 000b 838d 000b 839d 000b 83ed 000b     ................
   bc118:	83ad 000b 8385 000b                         ........

000bc120 <_ZTV11USARTSerial>:
	...
   bc128:	84dd 000b 8549 000b 8521 000b 78d9 000b     ....I...!....x..
   bc138:	84f1 000b 850d 000b 84ff 000b 851b 000b     ................
   bc148:	84df 000b 84e3 000b                         ........

000bc150 <_ZTV7TwoWire>:
	...
   bc158:	85a9 000b 85f3 000b 85cb 000b 85ab 000b     ................
   bc168:	85d3 000b 85db 000b 85e3 000b 85eb 000b     ................

000bc178 <_ZTVN5spark9WiFiClassE>:
	...
   bc180:	86af 000b 86a5 000b 869b 000b 8643 000b     ............C...
   bc190:	868f 000b 8683 000b 8879 000b 8881 000b     ........y.......
   bc1a0:	8677 000b 866f 000b 8665 000b 865b 000b     w...o...e...[...
   bc1b0:	88b1 000b                                   ....

000bc1b4 <_ZTV10WiFiSignal>:
	...
   bc1bc:	863d 000b 864d 000b 863f 000b 86b9 000b     =...M...?.......
   bc1cc:	86ed 000b 8719 000b 874d 000b               ........M...

000bc1d8 <_ZTVN5spark12NetworkClassE>:
	...
   bc1e0:	8839 000b 8843 000b 884d 000b 8857 000b     9...C...M...W...
   bc1f0:	8861 000b 886d 000b 8879 000b 8881 000b     a...m...y.......
   bc200:	8889 000b 8895 000b 889d 000b 88a7 000b     ................
   bc210:	88b1 000b                                   ....

000bc214 <_ZSt7nothrow>:
	...

000bc215 <_ZTSSt19_Sp_make_shared_tag>:
   bc215:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bc225:	6572 5f64 6174 0067 0000                     red_tag....

000bc230 <_ZTISt19_Sp_make_shared_tag>:
   bc230:	c270 000b c215 000b                         p.......

000bc238 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bc238:	c2d0 000b c244 000b c2f4 000b               ....D.......

000bc244 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bc244:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bc254:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bc264:	0045 0000                                   E...

000bc268 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bc268:	0000 0000 c238 000b 8b91 000b 8ba5 000b     ....8...........
   bc278:	8d39 000b 8d39 000b 8c0f 000b 8b51 000b     9...9.......Q...
   bc288:	8bf7 000b 8bb9 000b 8b83 000b               ............

000bc294 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bc294:	c2d0 000b c2a0 000b c238 000b               ........8...

000bc2a0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bc2a0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bc2b0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bc2c0:	666e 456f 0000 0000                         nfoE....

000bc2c8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bc2c8:	0000 0000 c294 000b 8c39 000b 8c4d 000b     ........9...M...
   bc2d8:	8d39 000b 8d39 000b 8c0f 000b 8b51 000b     9...9.......Q...
   bc2e8:	8d0d 000b 8c99 000b 8c61 000b               ........a...

000bc2f4 <_ZTISt9type_info>:
   bc2f4:	c270 000b c2fc 000b                         p.......

000bc2fc <_ZTSSt9type_info>:
   bc2fc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bc30c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bc31c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bc32c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bc33c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bc34c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bc35c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bc36c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bc37c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bc38c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bc39c:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bc3ac <fpi.1>:
   bc3ac:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bc3bc:	0000 0000                                   ....

000bc3c0 <fpinan.0>:
   bc3c0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bc3d8 <tinytens>:
   bc3d8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bc3e8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bc3f8:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bc408:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bc418:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bc428:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bc438:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bc448:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bc458:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bc468:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bc478:	7472 6b6f 632e                               rtok.c.

000bc47f <_ctype_>:
   bc47f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bc48f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bc49f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bc4af:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bc4bf:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bc4cf:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bc4df:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bc4ef:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bc4ff:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bc57f:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bc58f:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bc59f:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bc5af:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bc5bf:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bc5cf:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bc5df:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bc5ef:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bc5ff:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bc60f:	6874 7865 632e 0000                          thex.c...

000bc618 <_C_numeric_locale>:
   bc618:	b901 000b bc7e 000b d9ec 2003 0043 4f50     ....~...... C.PO
   bc628:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bc638:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bc648:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bc658:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bc668:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bc678:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bc688:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bc698:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bc6a8:	0063 0000 0000 0000                         c.......

000bc6b0 <__mprec_bigtens>:
   bc6b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bc6c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bc6d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bc6d8 <__mprec_tens>:
   bc6d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bc6e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bc6f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bc708:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bc718:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bc728:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bc738:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bc748:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bc758:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bc768:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bc778:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bc788:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bc798:	9db4 79d9 7843 44ea                         ...yCx.D

000bc7a0 <p05.0>:
   bc7a0:	0005 0000 0019 0000 007d 0000               ........}...

000bc7ac <link_const_variable_data_end>:
   bc7ac:	000b50bd 	.word	0x000b50bd
   bc7b0:	000b5451 	.word	0x000b5451
   bc7b4:	000b5bd1 	.word	0x000b5bd1
   bc7b8:	000b5c1d 	.word	0x000b5c1d
   bc7bc:	000b78c9 	.word	0x000b78c9
   bc7c0:	000b79f9 	.word	0x000b79f9
   bc7c4:	000b7bc9 	.word	0x000b7bc9
   bc7c8:	000b7be5 	.word	0x000b7be5
   bc7cc:	000b8825 	.word	0x000b8825
   bc7d0:	000b8989 	.word	0x000b8989

000bc7d4 <link_constructors_end>:
	...
>>>>>>> 7e9937822f05ab36dbef0edeec74b8536ca1f939
