
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/4.0.1/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a060  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be080  000be080  0000e080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be0a4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000022c  2003d130  000be0a8  0001d130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001494  2003d360  2003d360  0002d360  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000be2d4  000be2d4  0001e2d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be2fc  000be2fc  0001e2fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001769bd  00000000  00000000  0001e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019f5f  00000000  00000000  00194cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047a61  00000000  00000000  001aec1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003c08  00000000  00000000  001f667d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c7e0  00000000  00000000  001fa285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045e58  00000000  00000000  00206a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005767e  00000000  00000000  0024c8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144181  00000000  00000000  002a3f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b140  00000000  00000000  003e80bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fec0 	bl	badb6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fee2 	bl	bae06 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d130 	.word	0x2003d130
   b404c:	000be0a8 	.word	0x000be0a8
   b4050:	2003d35c 	.word	0x2003d35c
   b4054:	2003d360 	.word	0x2003d360
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 fe7d 	bl	b8d60 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be044 	.word	0x000be044
   b4080:	000be074 	.word	0x000be074

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b898 	b.w	b51b8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f95d 	bl	b5348 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 be1d 	b.w	b8cd0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bfd1 	b.w	b703c <malloc>

000b409a <_Znaj>:
   b409a:	f002 bfcf 	b.w	b703c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 bfd5 	b.w	b704c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
}
/**
 * @brief    Sets a flag when a new BLE connection is established
 */
void BLEOnConnectcallback(const BlePeerDevice &peer, void *context)
{
   b40b4:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40b6:	4b04      	ldr	r3, [pc, #16]	; (b40c8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40b8:	2201      	movs	r2, #1
   b40ba:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40bc:	f002 fcd0 	bl	b6a60 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40c0:	4b02      	ldr	r3, [pc, #8]	; (b40cc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40c2:	6018      	str	r0, [r3, #0]
}
   b40c4:	bd08      	pop	{r3, pc}
   b40c6:	bf00      	nop
   b40c8:	2003d37d 	.word	0x2003d37d
   b40cc:	2003dce8 	.word	0x2003dce8

000b40d0 <_Z13handle_sensorv>:
/**
 * @brief    IRQ handler for the KW sensor. This function is called every time the KW sensor detects a pulse.
 */
void handle_sensor(void)
{
   b40d0:	b508      	push	{r3, lr}
   b40d2:	f002 fcc5 	bl	b6a60 <HAL_Timer_Get_Milli_Seconds>
    static unsigned long last_read = 0;
    unsigned long current_reading = millis();
    unsigned long delta = current_reading - last_read;
   b40d6:	490c      	ldr	r1, [pc, #48]	; (b4108 <_Z13handle_sensorv+0x38>)
   b40d8:	680b      	ldr	r3, [r1, #0]
   b40da:	1ac3      	subs	r3, r0, r3

    // Check if we have a valid reading. I.e. at least 100 ms since last reading, which is equal to 36kW
    if (delta > 100)
   b40dc:	2b64      	cmp	r3, #100	; 0x64
   b40de:	d911      	bls.n	b4104 <_Z13handle_sensorv+0x34>
    {
        // We have a valid reading
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40e0:	4a0a      	ldr	r2, [pc, #40]	; (b410c <_Z13handle_sensorv+0x3c>)
   b40e2:	fbb2 f3f3 	udiv	r3, r2, r3
   b40e6:	4a0a      	ldr	r2, [pc, #40]	; (b4110 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b40e8:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40ea:	6013      	str	r3, [r2, #0]

        // One flash from sensor equals 1 Whr - Add to total
        wh_today[currentHour] += 1;
   b40ec:	4b09      	ldr	r3, [pc, #36]	; (b4114 <_Z13handle_sensorv+0x44>)
   b40ee:	7819      	ldrb	r1, [r3, #0]
   b40f0:	4b09      	ldr	r3, [pc, #36]	; (b4118 <_Z13handle_sensorv+0x48>)
   b40f2:	681a      	ldr	r2, [r3, #0]
   b40f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b40f8:	3301      	adds	r3, #1
   b40fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update flag - Transmit sensor values
        TRANSMIT_SENSOR = true;
   b40fe:	4b07      	ldr	r3, [pc, #28]	; (b411c <_Z13handle_sensorv+0x4c>)
   b4100:	2201      	movs	r2, #1
   b4102:	701a      	strb	r2, [r3, #0]
    }
}
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	2003d42c 	.word	0x2003d42c
   b410c:	0036ee80 	.word	0x0036ee80
   b4110:	2003d494 	.word	0x2003d494
   b4114:	2003d4a4 	.word	0x2003d4a4
   b4118:	2003e19c 	.word	0x2003e19c
   b411c:	2003d382 	.word	0x2003d382

000b4120 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4120:	6943      	ldr	r3, [r0, #20]
   b4122:	b113      	cbz	r3, b412a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4124:	6983      	ldr	r3, [r0, #24]
   b4126:	300c      	adds	r0, #12
   b4128:	4718      	bx	r3
            callback();
        }
    }
   b412a:	4770      	bx	lr

000b412c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b412c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b412e:	2100      	movs	r1, #0
   b4130:	4604      	mov	r4, r0
   b4132:	4608      	mov	r0, r1
   b4134:	f002 fd3e 	bl	b6bb4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4138:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b413a:	4620      	mov	r0, r4
   b413c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b413e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4140:	f002 fd50 	bl	b6be4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4144:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4146:	b10c      	cbz	r4, b414c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4148:	2301      	movs	r3, #1
   b414a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b414c:	2100      	movs	r1, #0
   b414e:	2001      	movs	r0, #1
   b4150:	f002 fd30 	bl	b6bb4 <os_thread_scheduling>
            }
        }
        if (t) {
   b4154:	b12c      	cbz	r4, b4162 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4156:	6823      	ldr	r3, [r4, #0]
   b4158:	4620      	mov	r0, r4
   b415a:	689b      	ldr	r3, [r3, #8]
   b415c:	4798      	blx	r3
            t->running = false;
   b415e:	2300      	movs	r3, #0
   b4160:	7123      	strb	r3, [r4, #4]
        }
    }
   b4162:	b002      	add	sp, #8
   b4164:	bd10      	pop	{r4, pc}

000b4166 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4166:	2a01      	cmp	r2, #1
   b4168:	d102      	bne.n	b4170 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416a:	6001      	str	r1, [r0, #0]
      }
   b416c:	2000      	movs	r0, #0
   b416e:	4770      	bx	lr
	  switch (__op)
   b4170:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4172:	bf04      	itt	eq
   b4174:	680b      	ldreq	r3, [r1, #0]
   b4176:	6003      	streq	r3, [r0, #0]
	      break;
   b4178:	e7f8      	b.n	b416c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417a:	6803      	ldr	r3, [r0, #0]
   b417c:	4718      	bx	r3

000b417e <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b417e:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4180:	6880      	ldr	r0, [r0, #8]
   b4182:	b130      	cbz	r0, b4192 <_ZN5Timer4stopEj.isra.0+0x14>
   b4184:	2300      	movs	r3, #0
   b4186:	e9cd 1300 	strd	r1, r3, [sp]
   b418a:	461a      	mov	r2, r3
   b418c:	2102      	movs	r1, #2
   b418e:	f002 fd31 	bl	b6bf4 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4192:	b003      	add	sp, #12
   b4194:	f85d fb04 	ldr.w	pc, [sp], #4

000b4198 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b4198:	b530      	push	{r4, r5, lr}
   b419a:	4605      	mov	r5, r0
   b419c:	b085      	sub	sp, #20
   b419e:	460c      	mov	r4, r1
        stop(fromISR);
   b41a0:	4611      	mov	r1, r2
   b41a2:	9203      	str	r2, [sp, #12]
   b41a4:	f7ff ffeb 	bl	b417e <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41a8:	68a8      	ldr	r0, [r5, #8]
   b41aa:	b130      	cbz	r0, b41ba <_ZN5Timer6_startEjb.isra.0+0x22>
   b41ac:	2300      	movs	r3, #0
   b41ae:	e9cd 4300 	strd	r4, r3, [sp]
   b41b2:	9a03      	ldr	r2, [sp, #12]
   b41b4:	4619      	mov	r1, r3
   b41b6:	f002 fd1d 	bl	b6bf4 <os_timer_change>
    }
   b41ba:	b005      	add	sp, #20
   b41bc:	bd30      	pop	{r4, r5, pc}
	...

000b41c0 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b41c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b41c4:	f004 fcf4 	bl	b8bb0 <_ZN9TimeClass4hourEv>
   b41c8:	4f26      	ldr	r7, [pc, #152]	; (b4264 <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b41ca:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4268 <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b41ce:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b41d0:	f004 fcfa 	bl	b8bc8 <_ZN9TimeClass6minuteEv>
   b41d4:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b41d6:	f004 fd03 	bl	b8be0 <_ZN9TimeClass6secondEv>
   b41da:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b41dc:	f004 fd0c 	bl	b8bf8 <_ZN9TimeClass3dayEv>
    timer.stop();
   b41e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b41e4:	4604      	mov	r4, r0
    timer.stop();
   b41e6:	4640      	mov	r0, r8
   b41e8:	f7ff ffc9 	bl	b417e <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b41ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b41f0:	b178      	cbz	r0, b4212 <_Z10check_timev+0x52>
   b41f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b41f6:	b2ed      	uxtb	r5, r5
   b41f8:	2200      	movs	r2, #0
   b41fa:	e9cd 1200 	strd	r1, r2, [sp]
   b41fe:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4202:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4206:	43ed      	mvns	r5, r5
   b4208:	fb01 5303 	mla	r3, r1, r3, r5
   b420c:	2103      	movs	r1, #3
   b420e:	f002 fcf1 	bl	b6bf4 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4212:	4815      	ldr	r0, [pc, #84]	; (b4268 <_Z10check_timev+0xa8>)
   b4214:	2200      	movs	r2, #0
   b4216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b421a:	f7ff ffbd 	bl	b4198 <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b421e:	783b      	ldrb	r3, [r7, #0]
   b4220:	2b0d      	cmp	r3, #13
   b4222:	d114      	bne.n	b424e <_Z10check_timev+0x8e>
   b4224:	4a11      	ldr	r2, [pc, #68]	; (b426c <_Z10check_timev+0xac>)
   b4226:	6811      	ldr	r1, [r2, #0]
   b4228:	b2e4      	uxtb	r4, r4
   b422a:	42a1      	cmp	r1, r4
   b422c:	d003      	beq.n	b4236 <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b422e:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4230:	4a0f      	ldr	r2, [pc, #60]	; (b4270 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b4232:	2101      	movs	r1, #1
   b4234:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4236:	b93e      	cbnz	r6, b4248 <_Z10check_timev+0x88>
   b4238:	4a0e      	ldr	r2, [pc, #56]	; (b4274 <_Z10check_timev+0xb4>)
   b423a:	6811      	ldr	r1, [r2, #0]
   b423c:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b423e:	bf1f      	itttt	ne
   b4240:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4242:	4b0d      	ldrne	r3, [pc, #52]	; (b4278 <_Z10check_timev+0xb8>)
   b4244:	2201      	movne	r2, #1
   b4246:	701a      	strbne	r2, [r3, #0]
    }
   b4248:	b002      	add	sp, #8
   b424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b424e:	2b00      	cmp	r3, #0
   b4250:	d1f1      	bne.n	b4236 <_Z10check_timev+0x76>
   b4252:	4a0a      	ldr	r2, [pc, #40]	; (b427c <_Z10check_timev+0xbc>)
   b4254:	6811      	ldr	r1, [r2, #0]
   b4256:	b2e4      	uxtb	r4, r4
   b4258:	42a1      	cmp	r1, r4
   b425a:	d0ec      	beq.n	b4236 <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b425c:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b425e:	4a08      	ldr	r2, [pc, #32]	; (b4280 <_Z10check_timev+0xc0>)
   b4260:	e7e7      	b.n	b4232 <_Z10check_timev+0x72>
   b4262:	bf00      	nop
   b4264:	2003d4a4 	.word	0x2003d4a4
   b4268:	2003e180 	.word	0x2003e180
   b426c:	2003d160 	.word	0x2003d160
   b4270:	2003d37c 	.word	0x2003d37c
   b4274:	2003d168 	.word	0x2003d168
   b4278:	2003d383 	.word	0x2003d383
   b427c:	2003d164 	.word	0x2003d164
   b4280:	2003d37e 	.word	0x2003d37e

000b4284 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4284:	b40e      	push	{r1, r2, r3}
   b4286:	b503      	push	{r0, r1, lr}
   b4288:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b428a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b428c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4290:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4292:	f004 fbb8 	bl	b8a06 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4296:	b002      	add	sp, #8
   b4298:	f85d eb04 	ldr.w	lr, [sp], #4
   b429c:	b003      	add	sp, #12
   b429e:	4770      	bx	lr

000b42a0 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b42a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b42a4:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b42a6:	4608      	mov	r0, r1
{
   b42a8:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b42aa:	f006 fe22 	bl	baef2 <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b42ae:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b42b0:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b42b2:	a801      	add	r0, sp, #4
   b42b4:	f006 fdf7 	bl	baea6 <strcpy>
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    Serial.println("in the callback");
   b42b8:	f005 f90c 	bl	b94d4 <_Z16_fetch_usbserialv>
   b42bc:	493c      	ldr	r1, [pc, #240]	; (b43b0 <_Z9myHandlerPKcS0_+0x110>)
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42be:	4d3d      	ldr	r5, [pc, #244]	; (b43b4 <_Z9myHandlerPKcS0_+0x114>)
    Serial.println("in the callback");
   b42c0:	f004 fb6f 	bl	b89a2 <_ZN5Print7printlnEPKc>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42c4:	493c      	ldr	r1, [pc, #240]	; (b43b8 <_Z9myHandlerPKcS0_+0x118>)
   b42c6:	a801      	add	r0, sp, #4
   b42c8:	f007 fc80 	bl	bbbcc <strtok>
   b42cc:	f006 fd5f 	bl	bad8e <atoi>
   b42d0:	4621      	mov	r1, r4
   b42d2:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b42d6:	f006 fdcd 	bl	bae74 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b42da:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b42de:	d214      	bcs.n	b430a <_Z9myHandlerPKcS0_+0x6a>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b42e0:	f005 f8f8 	bl	b94d4 <_Z16_fetch_usbserialv>
   b42e4:	4935      	ldr	r1, [pc, #212]	; (b43bc <_Z9myHandlerPKcS0_+0x11c>)
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b42e6:	4f36      	ldr	r7, [pc, #216]	; (b43c0 <_Z9myHandlerPKcS0_+0x120>)
        Serial.printf("%s\n", temp);
   b42e8:	462a      	mov	r2, r5
   b42ea:	f7ff ffcb 	bl	b4284 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b42ee:	4935      	ldr	r1, [pc, #212]	; (b43c4 <_Z9myHandlerPKcS0_+0x124>)
   b42f0:	4628      	mov	r0, r5
   b42f2:	f007 fc6b 	bl	bbbcc <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b42f6:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
   b42fa:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b42fe:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4300:	2600      	movs	r6, #0
            if (token == NULL)
   b4302:	b928      	cbnz	r0, b4310 <_Z9myHandlerPKcS0_+0x70>
            }
            token = strtok(NULL, ",!");

        }
        CALCULATE = true;
   b4304:	4b30      	ldr	r3, [pc, #192]	; (b43c8 <_Z9myHandlerPKcS0_+0x128>)
   b4306:	2201      	movs	r2, #1
   b4308:	701a      	strb	r2, [r3, #0]
    }
   b430a:	b004      	add	sp, #16
   b430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i >= 0 && i < 7)
   b4310:	2c06      	cmp	r4, #6
   b4312:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b43cc <_Z9myHandlerPKcS0_+0x12c>
   b4316:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b431a:	dc19      	bgt.n	b4350 <_Z9myHandlerPKcS0_+0xb0>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b431c:	f006 fd34 	bl	bad88 <atof>
   b4320:	f8da 3000 	ldr.w	r3, [sl]
   b4324:	4632      	mov	r2, r6
   b4326:	ec51 0b10 	vmov	r0, r1, d0
   b432a:	441d      	add	r5, r3
   b432c:	463b      	mov	r3, r7
   b432e:	f006 fb1b 	bl	ba968 <__aeabi_ddiv>
   b4332:	a31b      	add	r3, pc, #108	; (adr r3, b43a0 <_Z9myHandlerPKcS0_+0x100>)
   b4334:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4338:	f006 f836 	bl	ba3a8 <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b433c:	3401      	adds	r4, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b433e:	e9c5 0100 	strd	r0, r1, [r5]
            token = strtok(NULL, ",!");
   b4342:	4920      	ldr	r1, [pc, #128]	; (b43c4 <_Z9myHandlerPKcS0_+0x124>)
   b4344:	2000      	movs	r0, #0
   b4346:	f007 fc41 	bl	bbbcc <strtok>
        for (int i = 0; i < MAX_RANGE; i++)
   b434a:	2c18      	cmp	r4, #24
   b434c:	d1d9      	bne.n	b4302 <_Z9myHandlerPKcS0_+0x62>
   b434e:	e7d9      	b.n	b4304 <_Z9myHandlerPKcS0_+0x64>
            else if (i > 16 && i < 22)
   b4350:	f1a4 0311 	sub.w	r3, r4, #17
   b4354:	2b04      	cmp	r3, #4
   b4356:	d80d      	bhi.n	b4374 <_Z9myHandlerPKcS0_+0xd4>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4358:	f006 fd16 	bl	bad88 <atof>
   b435c:	f8da 3000 	ldr.w	r3, [sl]
   b4360:	4632      	mov	r2, r6
   b4362:	ec51 0b10 	vmov	r0, r1, d0
   b4366:	441d      	add	r5, r3
   b4368:	463b      	mov	r3, r7
   b436a:	f006 fafd 	bl	ba968 <__aeabi_ddiv>
   b436e:	4642      	mov	r2, r8
   b4370:	464b      	mov	r3, r9
   b4372:	e7e1      	b.n	b4338 <_Z9myHandlerPKcS0_+0x98>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4374:	f006 fd08 	bl	bad88 <atof>
   b4378:	f8da 3000 	ldr.w	r3, [sl]
   b437c:	4632      	mov	r2, r6
   b437e:	ec51 0b10 	vmov	r0, r1, d0
   b4382:	441d      	add	r5, r3
   b4384:	463b      	mov	r3, r7
   b4386:	f006 faef 	bl	ba968 <__aeabi_ddiv>
   b438a:	a307      	add	r3, pc, #28	; (adr r3, b43a8 <_Z9myHandlerPKcS0_+0x108>)
   b438c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4390:	e7d2      	b.n	b4338 <_Z9myHandlerPKcS0_+0x98>
   b4392:	bf00      	nop
   b4394:	f3af 8000 	nop.w
   b4398:	2d0e5604 	.word	0x2d0e5604
   b439c:	3ffe9db2 	.word	0x3ffe9db2
   b43a0:	ebedfa44 	.word	0xebedfa44
   b43a4:	3fcb39c0 	.word	0x3fcb39c0
   b43a8:	42c3c9ef 	.word	0x42c3c9ef
   b43ac:	3fe469ad 	.word	0x3fe469ad
   b43b0:	000bcf80 	.word	0x000bcf80
   b43b4:	2003dd7c 	.word	0x2003dd7c
   b43b8:	000bcf90 	.word	0x000bcf90
   b43bc:	000bcf98 	.word	0x000bcf98
   b43c0:	408f4000 	.word	0x408f4000
   b43c4:	000bcf9c 	.word	0x000bcf9c
   b43c8:	2003d361 	.word	0x2003d361
   b43cc:	2003d49c 	.word	0x2003d49c

000b43d0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d0:	b40e      	push	{r1, r2, r3}
   b43d2:	b503      	push	{r0, r1, lr}
   b43d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43d6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43de:	f004 fb12 	bl	b8a06 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43e2:	b002      	add	sp, #8
   b43e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e8:	b003      	add	sp, #12
   b43ea:	4770      	bx	lr

000b43ec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43ec:	b510      	push	{r4, lr}
      if (_M_manager)
   b43ee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43f0:	4604      	mov	r4, r0
      if (_M_manager)
   b43f2:	b113      	cbz	r3, b43fa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43f4:	2203      	movs	r2, #3
   b43f6:	4601      	mov	r1, r0
   b43f8:	4798      	blx	r3
    }
   b43fa:	4620      	mov	r0, r4
   b43fc:	bd10      	pop	{r4, pc}
	...

000b4400 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4400:	b538      	push	{r3, r4, r5, lr}
   b4402:	4b0f      	ldr	r3, [pc, #60]	; (b4440 <_ZN5TimerD1Ev+0x40>)
   b4404:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4406:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4408:	4604      	mov	r4, r0
        if (handle) {
   b440a:	b19b      	cbz	r3, b4434 <_ZN5TimerD1Ev+0x34>
            stop();
   b440c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4410:	f7ff feb5 	bl	b417e <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4414:	68a0      	ldr	r0, [r4, #8]
   b4416:	2100      	movs	r1, #0
   b4418:	f002 fc0c 	bl	b6c34 <os_timer_set_id>
            while (running) {
   b441c:	7923      	ldrb	r3, [r4, #4]
   b441e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4422:	b113      	cbz	r3, b442a <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4424:	f002 fbbe 	bl	b6ba4 <os_thread_yield>
            while (running) {
   b4428:	e7f8      	b.n	b441c <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b442a:	68a0      	ldr	r0, [r4, #8]
   b442c:	4629      	mov	r1, r5
   b442e:	f002 fbd1 	bl	b6bd4 <os_timer_destroy>
            handle = nullptr;
   b4432:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4434:	f104 000c 	add.w	r0, r4, #12
   b4438:	f7ff ffd8 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    }
   b443c:	4620      	mov	r0, r4
   b443e:	bd38      	pop	{r3, r4, r5, pc}
   b4440:	000bd4bc 	.word	0x000bd4bc

000b4444 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4444:	b510      	push	{r4, lr}
   b4446:	4604      	mov	r4, r0
    }
   b4448:	f7ff ffda 	bl	b4400 <_ZN5TimerD1Ev>
   b444c:	4620      	mov	r0, r4
   b444e:	211c      	movs	r1, #28
   b4450:	f7ff fe25 	bl	b409e <_ZdlPvj>
   b4454:	4620      	mov	r0, r4
   b4456:	bd10      	pop	{r4, pc}

000b4458 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b4458:	b570      	push	{r4, r5, r6, lr}
   b445a:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b445c:	f003 fbc8 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4460:	2102      	movs	r1, #2
   b4462:	f003 fc16 	bl	b7c92 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4466:	f003 fbc3 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b446a:	f003 fc0b 	bl	b7c84 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b446e:	f003 fbbf 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4472:	4a3e      	ldr	r2, [pc, #248]	; (b456c <_Z9ble_setupv+0x114>)
   b4474:	4c3e      	ldr	r4, [pc, #248]	; (b4570 <_Z9ble_setupv+0x118>)
   b4476:	4601      	mov	r1, r0
   b4478:	a80b      	add	r0, sp, #44	; 0x2c
   b447a:	f004 f941 	bl	b8700 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b447e:	a80b      	add	r0, sp, #44	; 0x2c
   b4480:	f003 fcbb 	bl	b7dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4484:	f003 fbb4 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4488:	4a3a      	ldr	r2, [pc, #232]	; (b4574 <_Z9ble_setupv+0x11c>)
   b448a:	4601      	mov	r1, r0
   b448c:	a80b      	add	r0, sp, #44	; 0x2c
   b448e:	f004 f937 	bl	b8700 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4492:	a80b      	add	r0, sp, #44	; 0x2c
   b4494:	f003 fcb1 	bl	b7dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4498:	f003 fbaa 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b449c:	4a36      	ldr	r2, [pc, #216]	; (b4578 <_Z9ble_setupv+0x120>)
   b449e:	4601      	mov	r1, r0
   b44a0:	a80b      	add	r0, sp, #44	; 0x2c
   b44a2:	f004 f92d 	bl	b8700 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44a6:	a80b      	add	r0, sp, #44	; 0x2c
   b44a8:	f003 fca7 	bl	b7dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b44ac:	f003 fba0 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44b0:	4a32      	ldr	r2, [pc, #200]	; (b457c <_Z9ble_setupv+0x124>)
   b44b2:	4601      	mov	r1, r0
   b44b4:	a80b      	add	r0, sp, #44	; 0x2c
   b44b6:	f004 f923 	bl	b8700 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ba:	a80b      	add	r0, sp, #44	; 0x2c
   b44bc:	f003 fc9d 	bl	b7dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b44c0:	f003 fb96 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44c4:	4a2e      	ldr	r2, [pc, #184]	; (b4580 <_Z9ble_setupv+0x128>)
   b44c6:	4601      	mov	r1, r0
   b44c8:	a80b      	add	r0, sp, #44	; 0x2c
   b44ca:	f004 f919 	bl	b8700 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ce:	a80b      	add	r0, sp, #44	; 0x2c
   b44d0:	f003 fc93 	bl	b7dfa <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b44d4:	f003 fb8c 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44d8:	4a2a      	ldr	r2, [pc, #168]	; (b4584 <_Z9ble_setupv+0x12c>)
   b44da:	4601      	mov	r1, r0
   b44dc:	a80b      	add	r0, sp, #44	; 0x2c
   b44de:	f004 f90f 	bl	b8700 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44e2:	a80b      	add	r0, sp, #44	; 0x2c
   b44e4:	f003 fc89 	bl	b7dfa <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b44e8:	a803      	add	r0, sp, #12
   b44ea:	f003 fdbc 	bl	b8066 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b44ee:	4b26      	ldr	r3, [pc, #152]	; (b4588 <_Z9ble_setupv+0x130>)
   b44f0:	a803      	add	r0, sp, #12
   b44f2:	6819      	ldr	r1, [r3, #0]
   b44f4:	f003 fdca 	bl	b808c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b44f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44fa:	ad06      	add	r5, sp, #24
   b44fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b44fe:	ad06      	add	r5, sp, #24
   b4500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4502:	6826      	ldr	r6, [r4, #0]
   b4504:	ac0b      	add	r4, sp, #44	; 0x2c
   b4506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4508:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b450a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b450c:	f003 f97e 	bl	b780c <_ZNK8particle7BleUuid4typeEv>
   b4510:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4512:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4514:	bb0c      	cbnz	r4, b455a <_Z9ble_setupv+0x102>
            uint16_t uuid16 = tempUUID.shorted();
   b4516:	f003 f995 	bl	b7844 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b451a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b451c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4520:	2302      	movs	r3, #2
   b4522:	f10d 020a 	add.w	r2, sp, #10
   b4526:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4528:	a803      	add	r0, sp, #12
   b452a:	f003 fd91 	bl	b8050 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b452e:	f003 fb5f 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4532:	2200      	movs	r2, #0
   b4534:	a903      	add	r1, sp, #12
   b4536:	f003 fbf3 	bl	b7d20 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b453a:	f004 ffcb 	bl	b94d4 <_Z16_fetch_usbserialv>
   b453e:	4913      	ldr	r1, [pc, #76]	; (b458c <_Z9ble_setupv+0x134>)
   b4540:	f004 fa2f 	bl	b89a2 <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4544:	f003 fb54 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4548:	4911      	ldr	r1, [pc, #68]	; (b4590 <_Z9ble_setupv+0x138>)
   b454a:	2200      	movs	r2, #0
   b454c:	f003 ffda 	bl	b8504 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4550:	9803      	ldr	r0, [sp, #12]
   b4552:	f002 fd7b 	bl	b704c <free>

}
   b4556:	b010      	add	sp, #64	; 0x40
   b4558:	bd70      	pop	{r4, r5, r6, pc}
   b455a:	f003 f975 	bl	b7848 <_ZNK8particle7BleUuid8rawBytesEv>
   b455e:	2300      	movs	r3, #0
   b4560:	9300      	str	r3, [sp, #0]
   b4562:	4602      	mov	r2, r0
   b4564:	2310      	movs	r3, #16
   b4566:	2107      	movs	r1, #7
   b4568:	e7de      	b.n	b4528 <_Z9ble_setupv+0xd0>
   b456a:	bf00      	nop
   b456c:	2003d384 	.word	0x2003d384
   b4570:	2003d3b0 	.word	0x2003d3b0
   b4574:	2003d374 	.word	0x2003d374
   b4578:	2003d364 	.word	0x2003d364
   b457c:	2003d36c 	.word	0x2003d36c
   b4580:	2003d38c 	.word	0x2003d38c
   b4584:	2003d394 	.word	0x2003d394
   b4588:	2003d144 	.word	0x2003d144
   b458c:	000bcf9f 	.word	0x000bcf9f
   b4590:	000b40b5 	.word	0x000b40b5
   b4594:	00000000 	.word	0x00000000

000b4598 <_Z8calc_lowPA2_iPdi>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int size)
{
   b4598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b459c:	ed2d 8b02 	vpush	{d8}
    int cnt = 0;
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0.0;
   b45a0:	ed9f 7b51 	vldr	d7, [pc, #324]	; b46e8 <_Z8calc_lowPA2_iPdi+0x150>
{
   b45a4:	b09b      	sub	sp, #108	; 0x6c
    double last_small = 1000.0; // Assign any absurdly high value
   b45a6:	f8df 9164 	ldr.w	r9, [pc, #356]	; b470c <_Z8calc_lowPA2_iPdi+0x174>
{
   b45aa:	9201      	str	r2, [sp, #4]
   b45ac:	4606      	mov	r6, r0
   b45ae:	460f      	mov	r7, r1
   b45b0:	468b      	mov	fp, r1

    for (int i = 0; i < size; i++)
   b45b2:	f04f 0a00 	mov.w	sl, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b45b6:	f04f 0800 	mov.w	r8, #0
    double last_big = 0.0;
   b45ba:	eeb0 8a47 	vmov.f32	s16, s14
   b45be:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < size; i++)
   b45c2:	9b01      	ldr	r3, [sp, #4]
   b45c4:	459a      	cmp	sl, r3
   b45c6:	da16      	bge.n	b45f6 <_Z8calc_lowPA2_iPdi+0x5e>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b45c8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
   b45cc:	ec53 2b18 	vmov	r2, r3, d8
   b45d0:	4620      	mov	r0, r4
   b45d2:	4629      	mov	r1, r5
   b45d4:	f006 fb2e 	bl	bac34 <__aeabi_dcmpgt>
   b45d8:	b108      	cbz	r0, b45de <_Z8calc_lowPA2_iPdi+0x46>
        {
            last_big = cost[i];
   b45da:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b45de:	4642      	mov	r2, r8
   b45e0:	464b      	mov	r3, r9
   b45e2:	4620      	mov	r0, r4
   b45e4:	4629      	mov	r1, r5
   b45e6:	f006 fb07 	bl	babf8 <__aeabi_dcmplt>
   b45ea:	b108      	cbz	r0, b45f0 <_Z8calc_lowPA2_iPdi+0x58>
        {
            last_small = cost[i];
   b45ec:	46a0      	mov	r8, r4
   b45ee:	46a9      	mov	r9, r5
    for (int i = 0; i < size; i++)
   b45f0:	f10a 0a01 	add.w	sl, sl, #1
   b45f4:	e7e5      	b.n	b45c2 <_Z8calc_lowPA2_iPdi+0x2a>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b45f6:	4642      	mov	r2, r8
   b45f8:	464b      	mov	r3, r9
   b45fa:	ec51 0b18 	vmov	r0, r1, d8
   b45fe:	f005 fed1 	bl	ba3a4 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4602:	a340      	add	r3, pc, #256	; (adr r3, b4704 <_Z8calc_lowPA2_iPdi+0x16c>)
   b4604:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4608:	f006 f884 	bl	ba714 <__aeabi_dmul>
   b460c:	4642      	mov	r2, r8
   b460e:	464b      	mov	r3, r9
   b4610:	f005 feca 	bl	ba3a8 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i < size; i++)
   b4614:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4616:	4682      	mov	sl, r0
   b4618:	468b      	mov	fp, r1
    int idx = 0;
   b461a:	462c      	mov	r4, r5
    for (int i = 0; i < size; i++)
   b461c:	9b01      	ldr	r3, [sp, #4]
   b461e:	429d      	cmp	r5, r3
   b4620:	da15      	bge.n	b464e <_Z8calc_lowPA2_iPdi+0xb6>
    {
        
        if (cost[i] < small_offset)
   b4622:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b4626:	4652      	mov	r2, sl
   b4628:	465b      	mov	r3, fp
   b462a:	f006 fae5 	bl	babf8 <__aeabi_dcmplt>
   b462e:	b160      	cbz	r0, b464a <_Z8calc_lowPA2_iPdi+0xb2>
        {
            low_range_hour[idx] = i;
   b4630:	ab1a      	add	r3, sp, #104	; 0x68
   b4632:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b4636:	f843 5c60 	str.w	r5, [r3, #-96]
            Serial.printf("low_range_hour[%d]: %d\n",idx, low_range_hour[idx]);
   b463a:	f004 ff4b 	bl	b94d4 <_Z16_fetch_usbserialv>
   b463e:	4622      	mov	r2, r4
   b4640:	492b      	ldr	r1, [pc, #172]	; (b46f0 <_Z8calc_lowPA2_iPdi+0x158>)
   b4642:	462b      	mov	r3, r5
   b4644:	f7ff fe1e 	bl	b4284 <_ZN5Print6printfEPKcz>
            idx++;
   b4648:	3401      	adds	r4, #1
    for (int i = 0; i < size; i++)
   b464a:	3501      	adds	r5, #1
   b464c:	e7e6      	b.n	b461c <_Z8calc_lowPA2_iPdi+0x84>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b464e:	f004 ff41 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4652:	ec53 2b18 	vmov	r2, r3, d8
   b4656:	4927      	ldr	r1, [pc, #156]	; (b46f4 <_Z8calc_lowPA2_iPdi+0x15c>)
   b4658:	f7ff fe14 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b465c:	f004 ff3a 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4660:	4925      	ldr	r1, [pc, #148]	; (b46f8 <_Z8calc_lowPA2_iPdi+0x160>)
   b4662:	4642      	mov	r2, r8
   b4664:	464b      	mov	r3, r9
   b4666:	f7ff fe0d 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b466a:	f004 ff33 	bl	b94d4 <_Z16_fetch_usbserialv>
   b466e:	4923      	ldr	r1, [pc, #140]	; (b46fc <_Z8calc_lowPA2_iPdi+0x164>)
   b4670:	f7ff fe08 	bl	b4284 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b4674:	b36c      	cbz	r4, b46d2 <_Z8calc_lowPA2_iPdi+0x13a>
    int i = 0;
   b4676:	2300      	movs	r3, #0
    int cnt = 0;
   b4678:	461d      	mov	r5, r3
   b467a:	1d37      	adds	r7, r6, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b467c:	aa1a      	add	r2, sp, #104	; 0x68
   b467e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4682:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b4686:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
   b468a:	aa02      	add	r2, sp, #8
   b468c:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4690:	6802      	ldr	r2, [r0, #0]
   b4692:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b4696:	3901      	subs	r1, #1
   b4698:	428a      	cmp	r2, r1
   b469a:	f103 0301 	add.w	r3, r3, #1
   b469e:	d0f7      	beq.n	b4690 <_Z8calc_lowPA2_iPdi+0xf8>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b46a0:	3201      	adds	r2, #1
        while (i <= idx)
   b46a2:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b46a4:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
            
            cnt++;
   b46a8:	f105 0201 	add.w	r2, r5, #1
        while (i <= idx)
   b46ac:	dd0f      	ble.n	b46ce <_Z8calc_lowPA2_iPdi+0x136>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b46ae:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4710 <_Z8calc_lowPA2_iPdi+0x178>
    for (int z = 0; z < cnt; z++)
   b46b2:	2400      	movs	r4, #0
   b46b4:	42ac      	cmp	r4, r5
   b46b6:	d00c      	beq.n	b46d2 <_Z8calc_lowPA2_iPdi+0x13a>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b46b8:	f004 ff0c 	bl	b94d4 <_Z16_fetch_usbserialv>
   b46bc:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b46c0:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
   b46c4:	4641      	mov	r1, r8
   b46c6:	f7ff fddd 	bl	b4284 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b46ca:	3401      	adds	r4, #1
   b46cc:	e7f2      	b.n	b46b4 <_Z8calc_lowPA2_iPdi+0x11c>
            cnt++;
   b46ce:	4615      	mov	r5, r2
   b46d0:	e7d4      	b.n	b467c <_Z8calc_lowPA2_iPdi+0xe4>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b46d2:	4b0b      	ldr	r3, [pc, #44]	; (b4700 <_Z8calc_lowPA2_iPdi+0x168>)
   b46d4:	2201      	movs	r2, #1

    return cnt;
}
   b46d6:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b46d8:	701a      	strb	r2, [r3, #0]
}
   b46da:	b01b      	add	sp, #108	; 0x6c
   b46dc:	ecbd 8b02 	vpop	{d8}
   b46e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46e4:	f3af 8000 	nop.w
	...
   b46f0:	000bcfc3 	.word	0x000bcfc3
   b46f4:	000bcfdb 	.word	0x000bcfdb
   b46f8:	000bcff9 	.word	0x000bcff9
   b46fc:	000bd016 	.word	0x000bd016
   b4700:	2003d381 	.word	0x2003d381
   b4704:	33333333 	.word	0x33333333
   b4708:	3fd33333 	.word	0x3fd33333
   b470c:	408f4000 	.word	0x408f4000
   b4710:	000bd054 	.word	0x000bd054

000b4714 <_Z18hourly_JSON_updatev>:
extern String pricestoday_Json;
extern String pricesyesterday_Json;
extern String pricestomorrow_Json;

void hourly_JSON_update()
{
   b4714:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b4716:	4913      	ldr	r1, [pc, #76]	; (b4764 <_Z18hourly_JSON_updatev+0x50>)
   b4718:	4813      	ldr	r0, [pc, #76]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b471a:	4e14      	ldr	r6, [pc, #80]	; (b476c <_Z18hourly_JSON_updatev+0x58>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b471c:	4d12      	ldr	r5, [pc, #72]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b471e:	4f14      	ldr	r7, [pc, #80]	; (b4770 <_Z18hourly_JSON_updatev+0x5c>)
{
   b4720:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b4722:	f002 fe27 	bl	b7374 <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b4726:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b4728:	6833      	ldr	r3, [r6, #0]
   b472a:	220a      	movs	r2, #10
   b472c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4730:	4668      	mov	r0, sp
   b4732:	f002 fe31 	bl	b7398 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4736:	4669      	mov	r1, sp
   b4738:	4628      	mov	r0, r5
   b473a:	f002 fe57 	bl	b73ec <_ZN6String6concatERKS_>
   b473e:	4668      	mov	r0, sp
   b4740:	f002 fd94 	bl	b726c <_ZN6StringD1Ev>
        if (i < 23)
   b4744:	2c17      	cmp	r4, #23
   b4746:	d003      	beq.n	b4750 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b4748:	4639      	mov	r1, r7
   b474a:	4628      	mov	r0, r5
   b474c:	f002 fe52 	bl	b73f4 <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b4750:	3401      	adds	r4, #1
   b4752:	2c18      	cmp	r4, #24
   b4754:	d1e8      	bne.n	b4728 <_Z18hourly_JSON_updatev+0x14>
   b4756:	4907      	ldr	r1, [pc, #28]	; (b4774 <_Z18hourly_JSON_updatev+0x60>)
   b4758:	4803      	ldr	r0, [pc, #12]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
        {
            wh_today_Json += ",";
        }
    }
    wh_today_Json += "]}";
}
   b475a:	b005      	add	sp, #20
   b475c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4760:	f002 be48 	b.w	b73f4 <_ZN6String6concatEPKc>
   b4764:	000bd062 	.word	0x000bd062
   b4768:	2003e1a0 	.word	0x2003e1a0
   b476c:	2003e19c 	.word	0x2003e19c
   b4770:	000bd071 	.word	0x000bd071
   b4774:	000bd073 	.word	0x000bd073

000b4778 <_Z11update_JSONv>:
void update_JSON()
{
   b4778:	b5f0      	push	{r4, r5, r6, r7, lr}
   b477a:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b477c:	498f      	ldr	r1, [pc, #572]	; (b49bc <_Z11update_JSONv+0x244>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b477e:	4e90      	ldr	r6, [pc, #576]	; (b49c0 <_Z11update_JSONv+0x248>)
   b4780:	4f90      	ldr	r7, [pc, #576]	; (b49c4 <_Z11update_JSONv+0x24c>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4782:	4d91      	ldr	r5, [pc, #580]	; (b49c8 <_Z11update_JSONv+0x250>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4784:	4668      	mov	r0, sp
   b4786:	f002 fe93 	bl	b74b0 <_ZN6String6formatEPKcz>
   b478a:	4669      	mov	r1, sp
   b478c:	488e      	ldr	r0, [pc, #568]	; (b49c8 <_Z11update_JSONv+0x250>)
   b478e:	f002 fde9 	bl	b7364 <_ZN6StringaSEOS_>
   b4792:	4668      	mov	r0, sp
   b4794:	f002 fd6a 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4798:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b479a:	6833      	ldr	r3, [r6, #0]
   b479c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b47a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47a4:	4639      	mov	r1, r7
   b47a6:	4668      	mov	r0, sp
   b47a8:	f002 fe82 	bl	b74b0 <_ZN6String6formatEPKcz>
   b47ac:	4669      	mov	r1, sp
   b47ae:	4628      	mov	r0, r5
   b47b0:	f002 fe1c 	bl	b73ec <_ZN6String6concatERKS_>
   b47b4:	4668      	mov	r0, sp
   b47b6:	f002 fd59 	bl	b726c <_ZN6StringD1Ev>
        if (i < 23)
   b47ba:	2c17      	cmp	r4, #23
   b47bc:	d00a      	beq.n	b47d4 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b47be:	4983      	ldr	r1, [pc, #524]	; (b49cc <_Z11update_JSONv+0x254>)
   b47c0:	4668      	mov	r0, sp
   b47c2:	f002 fe75 	bl	b74b0 <_ZN6String6formatEPKcz>
   b47c6:	4669      	mov	r1, sp
   b47c8:	4628      	mov	r0, r5
   b47ca:	f002 fe0f 	bl	b73ec <_ZN6String6concatERKS_>
   b47ce:	4668      	mov	r0, sp
   b47d0:	f002 fd4c 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47d4:	3401      	adds	r4, #1
   b47d6:	2c18      	cmp	r4, #24
   b47d8:	d1df      	bne.n	b479a <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b47da:	497d      	ldr	r1, [pc, #500]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b47dc:	4e7d      	ldr	r6, [pc, #500]	; (b49d4 <_Z11update_JSONv+0x25c>)
   b47de:	4f79      	ldr	r7, [pc, #484]	; (b49c4 <_Z11update_JSONv+0x24c>)
   b47e0:	4d7d      	ldr	r5, [pc, #500]	; (b49d8 <_Z11update_JSONv+0x260>)
    pricesyesterday_Json += String::format("]}");
   b47e2:	4668      	mov	r0, sp
   b47e4:	f002 fe64 	bl	b74b0 <_ZN6String6formatEPKcz>
   b47e8:	4669      	mov	r1, sp
   b47ea:	4877      	ldr	r0, [pc, #476]	; (b49c8 <_Z11update_JSONv+0x250>)
   b47ec:	f002 fdfe 	bl	b73ec <_ZN6String6concatERKS_>
   b47f0:	4668      	mov	r0, sp
   b47f2:	f002 fd3b 	bl	b726c <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b47f6:	4979      	ldr	r1, [pc, #484]	; (b49dc <_Z11update_JSONv+0x264>)
   b47f8:	4668      	mov	r0, sp
   b47fa:	f002 fe59 	bl	b74b0 <_ZN6String6formatEPKcz>
   b47fe:	4669      	mov	r1, sp
   b4800:	4875      	ldr	r0, [pc, #468]	; (b49d8 <_Z11update_JSONv+0x260>)
   b4802:	f002 fdaf 	bl	b7364 <_ZN6StringaSEOS_>
   b4806:	4668      	mov	r0, sp
   b4808:	f002 fd30 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b480c:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b480e:	6833      	ldr	r3, [r6, #0]
   b4810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4814:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4818:	4639      	mov	r1, r7
   b481a:	4668      	mov	r0, sp
   b481c:	f002 fe48 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4820:	4669      	mov	r1, sp
   b4822:	4628      	mov	r0, r5
   b4824:	f002 fde2 	bl	b73ec <_ZN6String6concatERKS_>
   b4828:	4668      	mov	r0, sp
   b482a:	f002 fd1f 	bl	b726c <_ZN6StringD1Ev>
        if (i < 23)
   b482e:	2c17      	cmp	r4, #23
   b4830:	d00a      	beq.n	b4848 <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b4832:	4966      	ldr	r1, [pc, #408]	; (b49cc <_Z11update_JSONv+0x254>)
   b4834:	4668      	mov	r0, sp
   b4836:	f002 fe3b 	bl	b74b0 <_ZN6String6formatEPKcz>
   b483a:	4669      	mov	r1, sp
   b483c:	4628      	mov	r0, r5
   b483e:	f002 fdd5 	bl	b73ec <_ZN6String6concatERKS_>
   b4842:	4668      	mov	r0, sp
   b4844:	f002 fd12 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4848:	3401      	adds	r4, #1
   b484a:	2c18      	cmp	r4, #24
   b484c:	d1df      	bne.n	b480e <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b484e:	4960      	ldr	r1, [pc, #384]	; (b49d0 <_Z11update_JSONv+0x258>)

     // Updating prices today JSON string
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b4850:	4e63      	ldr	r6, [pc, #396]	; (b49e0 <_Z11update_JSONv+0x268>)
   b4852:	4f5c      	ldr	r7, [pc, #368]	; (b49c4 <_Z11update_JSONv+0x24c>)
   b4854:	4d63      	ldr	r5, [pc, #396]	; (b49e4 <_Z11update_JSONv+0x26c>)
    pricestoday_Json += String::format("]}");
   b4856:	4668      	mov	r0, sp
   b4858:	f002 fe2a 	bl	b74b0 <_ZN6String6formatEPKcz>
   b485c:	4669      	mov	r1, sp
   b485e:	485e      	ldr	r0, [pc, #376]	; (b49d8 <_Z11update_JSONv+0x260>)
   b4860:	f002 fdc4 	bl	b73ec <_ZN6String6concatERKS_>
   b4864:	4668      	mov	r0, sp
   b4866:	f002 fd01 	bl	b726c <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b486a:	495f      	ldr	r1, [pc, #380]	; (b49e8 <_Z11update_JSONv+0x270>)
   b486c:	4668      	mov	r0, sp
   b486e:	f002 fe1f 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4872:	4669      	mov	r1, sp
   b4874:	485b      	ldr	r0, [pc, #364]	; (b49e4 <_Z11update_JSONv+0x26c>)
   b4876:	f002 fd75 	bl	b7364 <_ZN6StringaSEOS_>
   b487a:	4668      	mov	r0, sp
   b487c:	f002 fcf6 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4880:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b4882:	6833      	ldr	r3, [r6, #0]
   b4884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4888:	e9d3 2300 	ldrd	r2, r3, [r3]
   b488c:	4639      	mov	r1, r7
   b488e:	4668      	mov	r0, sp
   b4890:	f002 fe0e 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4894:	4669      	mov	r1, sp
   b4896:	4628      	mov	r0, r5
   b4898:	f002 fda8 	bl	b73ec <_ZN6String6concatERKS_>
   b489c:	4668      	mov	r0, sp
   b489e:	f002 fce5 	bl	b726c <_ZN6StringD1Ev>
        if (i < 23)
   b48a2:	2c17      	cmp	r4, #23
   b48a4:	d00a      	beq.n	b48bc <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b48a6:	4949      	ldr	r1, [pc, #292]	; (b49cc <_Z11update_JSONv+0x254>)
   b48a8:	4668      	mov	r0, sp
   b48aa:	f002 fe01 	bl	b74b0 <_ZN6String6formatEPKcz>
   b48ae:	4669      	mov	r1, sp
   b48b0:	4628      	mov	r0, r5
   b48b2:	f002 fd9b 	bl	b73ec <_ZN6String6concatERKS_>
   b48b6:	4668      	mov	r0, sp
   b48b8:	f002 fcd8 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48bc:	3401      	adds	r4, #1
   b48be:	2c18      	cmp	r4, #24
   b48c0:	d1df      	bne.n	b4882 <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b48c2:	4943      	ldr	r1, [pc, #268]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b48c4:	4e49      	ldr	r6, [pc, #292]	; (b49ec <_Z11update_JSONv+0x274>)
   b48c6:	4f4a      	ldr	r7, [pc, #296]	; (b49f0 <_Z11update_JSONv+0x278>)
   b48c8:	4d4a      	ldr	r5, [pc, #296]	; (b49f4 <_Z11update_JSONv+0x27c>)
    pricestomorrow_Json += String::format("]}");
   b48ca:	4668      	mov	r0, sp
   b48cc:	f002 fdf0 	bl	b74b0 <_ZN6String6formatEPKcz>
   b48d0:	4669      	mov	r1, sp
   b48d2:	4844      	ldr	r0, [pc, #272]	; (b49e4 <_Z11update_JSONv+0x26c>)
   b48d4:	f002 fd8a 	bl	b73ec <_ZN6String6concatERKS_>
   b48d8:	4668      	mov	r0, sp
   b48da:	f002 fcc7 	bl	b726c <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b48de:	4946      	ldr	r1, [pc, #280]	; (b49f8 <_Z11update_JSONv+0x280>)
   b48e0:	4668      	mov	r0, sp
   b48e2:	f002 fde5 	bl	b74b0 <_ZN6String6formatEPKcz>
   b48e6:	4669      	mov	r1, sp
   b48e8:	4842      	ldr	r0, [pc, #264]	; (b49f4 <_Z11update_JSONv+0x27c>)
   b48ea:	f002 fd3b 	bl	b7364 <_ZN6StringaSEOS_>
   b48ee:	4668      	mov	r0, sp
   b48f0:	f002 fcbc 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48f4:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b48f6:	6833      	ldr	r3, [r6, #0]
   b48f8:	4639      	mov	r1, r7
   b48fa:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b48fe:	4668      	mov	r0, sp
   b4900:	f002 fdd6 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4904:	4669      	mov	r1, sp
   b4906:	4628      	mov	r0, r5
   b4908:	f002 fd70 	bl	b73ec <_ZN6String6concatERKS_>
   b490c:	4668      	mov	r0, sp
   b490e:	f002 fcad 	bl	b726c <_ZN6StringD1Ev>
        if (i < 23)
   b4912:	2c17      	cmp	r4, #23
   b4914:	d00a      	beq.n	b492c <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b4916:	492d      	ldr	r1, [pc, #180]	; (b49cc <_Z11update_JSONv+0x254>)
   b4918:	4668      	mov	r0, sp
   b491a:	f002 fdc9 	bl	b74b0 <_ZN6String6formatEPKcz>
   b491e:	4669      	mov	r1, sp
   b4920:	4628      	mov	r0, r5
   b4922:	f002 fd63 	bl	b73ec <_ZN6String6concatERKS_>
   b4926:	4668      	mov	r0, sp
   b4928:	f002 fca0 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b492c:	3401      	adds	r4, #1
   b492e:	2c18      	cmp	r4, #24
   b4930:	d1e1      	bne.n	b48f6 <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b4932:	4927      	ldr	r1, [pc, #156]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b4934:	4e31      	ldr	r6, [pc, #196]	; (b49fc <_Z11update_JSONv+0x284>)
   b4936:	4f2e      	ldr	r7, [pc, #184]	; (b49f0 <_Z11update_JSONv+0x278>)
   b4938:	4d31      	ldr	r5, [pc, #196]	; (b4a00 <_Z11update_JSONv+0x288>)
    wh_yesterday_Json += String::format("]}");
   b493a:	4668      	mov	r0, sp
   b493c:	f002 fdb8 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4940:	4669      	mov	r1, sp
   b4942:	482c      	ldr	r0, [pc, #176]	; (b49f4 <_Z11update_JSONv+0x27c>)
   b4944:	f002 fd52 	bl	b73ec <_ZN6String6concatERKS_>
   b4948:	4668      	mov	r0, sp
   b494a:	f002 fc8f 	bl	b726c <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b494e:	492d      	ldr	r1, [pc, #180]	; (b4a04 <_Z11update_JSONv+0x28c>)
   b4950:	4668      	mov	r0, sp
   b4952:	f002 fdad 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4956:	4669      	mov	r1, sp
   b4958:	4829      	ldr	r0, [pc, #164]	; (b4a00 <_Z11update_JSONv+0x288>)
   b495a:	f002 fd03 	bl	b7364 <_ZN6StringaSEOS_>
   b495e:	4668      	mov	r0, sp
   b4960:	f002 fc84 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4964:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b4966:	6833      	ldr	r3, [r6, #0]
   b4968:	4639      	mov	r1, r7
   b496a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b496e:	4668      	mov	r0, sp
   b4970:	f002 fd9e 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4974:	4669      	mov	r1, sp
   b4976:	4628      	mov	r0, r5
   b4978:	f002 fd38 	bl	b73ec <_ZN6String6concatERKS_>
   b497c:	4668      	mov	r0, sp
   b497e:	f002 fc75 	bl	b726c <_ZN6StringD1Ev>
        if (i < 23)
   b4982:	2c17      	cmp	r4, #23
   b4984:	d00a      	beq.n	b499c <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b4986:	4911      	ldr	r1, [pc, #68]	; (b49cc <_Z11update_JSONv+0x254>)
   b4988:	4668      	mov	r0, sp
   b498a:	f002 fd91 	bl	b74b0 <_ZN6String6formatEPKcz>
   b498e:	4669      	mov	r1, sp
   b4990:	4628      	mov	r0, r5
   b4992:	f002 fd2b 	bl	b73ec <_ZN6String6concatERKS_>
   b4996:	4668      	mov	r0, sp
   b4998:	f002 fc68 	bl	b726c <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b499c:	3401      	adds	r4, #1
   b499e:	2c18      	cmp	r4, #24
   b49a0:	d1e1      	bne.n	b4966 <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b49a2:	4668      	mov	r0, sp
   b49a4:	490a      	ldr	r1, [pc, #40]	; (b49d0 <_Z11update_JSONv+0x258>)
   b49a6:	f002 fd83 	bl	b74b0 <_ZN6String6formatEPKcz>
   b49aa:	4669      	mov	r1, sp
   b49ac:	4814      	ldr	r0, [pc, #80]	; (b4a00 <_Z11update_JSONv+0x288>)
   b49ae:	f002 fd1d 	bl	b73ec <_ZN6String6concatERKS_>
   b49b2:	4668      	mov	r0, sp
   b49b4:	f002 fc5a 	bl	b726c <_ZN6StringD1Ev>

}
   b49b8:	b005      	add	sp, #20
   b49ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b49bc:	000bd076 	.word	0x000bd076
   b49c0:	2003d4a0 	.word	0x2003d4a0
   b49c4:	000bd08b 	.word	0x000bd08b
   b49c8:	2003dd0c 	.word	0x2003dd0c
   b49cc:	000bd071 	.word	0x000bd071
   b49d0:	000bd073 	.word	0x000bd073
   b49d4:	2003d498 	.word	0x2003d498
   b49d8:	2003dcec 	.word	0x2003dcec
   b49dc:	000bd091 	.word	0x000bd091
   b49e0:	2003d49c 	.word	0x2003d49c
   b49e4:	2003dcfc 	.word	0x2003dcfc
   b49e8:	000bd0a2 	.word	0x000bd0a2
   b49ec:	2003e1b0 	.word	0x2003e1b0
   b49f0:	000bd9a8 	.word	0x000bd9a8
   b49f4:	2003e1b4 	.word	0x2003e1b4
   b49f8:	000bd0b6 	.word	0x000bd0b6
   b49fc:	2003e19c 	.word	0x2003e19c
   b4a00:	2003e1a0 	.word	0x2003e1a0
   b4a04:	000bd0c9 	.word	0x000bd0c9

000b4a08 <_Z11init_memoryv>:
{
   b4a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b4a0c:	20c0      	movs	r0, #192	; 0xc0
   b4a0e:	f002 fb15 	bl	b703c <malloc>
   b4a12:	4d38      	ldr	r5, [pc, #224]	; (b4af4 <_Z11init_memoryv+0xec>)
   b4a14:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b4a16:	b928      	cbnz	r0, b4a24 <_Z11init_memoryv+0x1c>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b4a18:	f004 fd5c 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4a1c:	4936      	ldr	r1, [pc, #216]	; (b4af8 <_Z11init_memoryv+0xf0>)
   b4a1e:	f7ff fc31 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4a22:	e7fe      	b.n	b4a22 <_Z11init_memoryv+0x1a>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b4a24:	20c0      	movs	r0, #192	; 0xc0
   b4a26:	f002 fb09 	bl	b703c <malloc>
   b4a2a:	4c34      	ldr	r4, [pc, #208]	; (b4afc <_Z11init_memoryv+0xf4>)
   b4a2c:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b4a2e:	b928      	cbnz	r0, b4a3c <_Z11init_memoryv+0x34>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b4a30:	f004 fd50 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4a34:	4932      	ldr	r1, [pc, #200]	; (b4b00 <_Z11init_memoryv+0xf8>)
   b4a36:	f7ff fc25 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4a3a:	e7fe      	b.n	b4a3a <_Z11init_memoryv+0x32>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b4a3c:	20c0      	movs	r0, #192	; 0xc0
   b4a3e:	f002 fafd 	bl	b703c <malloc>
   b4a42:	4e30      	ldr	r6, [pc, #192]	; (b4b04 <_Z11init_memoryv+0xfc>)
   b4a44:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b4a46:	b928      	cbnz	r0, b4a54 <_Z11init_memoryv+0x4c>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b4a48:	f004 fd44 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4a4c:	492e      	ldr	r1, [pc, #184]	; (b4b08 <_Z11init_memoryv+0x100>)
   b4a4e:	f7ff fc19 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4a52:	e7fe      	b.n	b4a52 <_Z11init_memoryv+0x4a>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4a54:	f004 fd3e 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4a58:	492c      	ldr	r1, [pc, #176]	; (b4b0c <_Z11init_memoryv+0x104>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4a5a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b4b20 <_Z11init_memoryv+0x118>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4a5e:	f44f 7210 	mov.w	r2, #576	; 0x240
   b4a62:	f7ff fc0f 	bl	b4284 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4a66:	2060      	movs	r0, #96	; 0x60
   b4a68:	f002 fae8 	bl	b703c <malloc>
   b4a6c:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b4a70:	b928      	cbnz	r0, b4a7e <_Z11init_memoryv+0x76>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b4a72:	f004 fd2f 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4a76:	4926      	ldr	r1, [pc, #152]	; (b4b10 <_Z11init_memoryv+0x108>)
   b4a78:	f7ff fc04 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4a7c:	e7fe      	b.n	b4a7c <_Z11init_memoryv+0x74>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b4a7e:	2060      	movs	r0, #96	; 0x60
   b4a80:	f002 fadc 	bl	b703c <malloc>
   b4a84:	f8df 909c 	ldr.w	r9, [pc, #156]	; b4b24 <_Z11init_memoryv+0x11c>
   b4a88:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b4a8c:	b928      	cbnz	r0, b4a9a <_Z11init_memoryv+0x92>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b4a8e:	f004 fd21 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4a92:	4920      	ldr	r1, [pc, #128]	; (b4b14 <_Z11init_memoryv+0x10c>)
   b4a94:	f7ff fbf6 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4a98:	e7fe      	b.n	b4a98 <_Z11init_memoryv+0x90>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b4a9a:	f004 fd1b 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4a9e:	491e      	ldr	r1, [pc, #120]	; (b4b18 <_Z11init_memoryv+0x110>)
   b4aa0:	22c0      	movs	r2, #192	; 0xc0
   b4aa2:	f7ff fbef 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b4aa6:	f004 fd15 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4aaa:	4607      	mov	r7, r0
   b4aac:	f002 fb6e 	bl	b718c <_ZN11SystemClass10freeMemoryEv>
   b4ab0:	491a      	ldr	r1, [pc, #104]	; (b4b1c <_Z11init_memoryv+0x114>)
   b4ab2:	4602      	mov	r2, r0
   b4ab4:	4638      	mov	r0, r7
   b4ab6:	f7ff fbe5 	bl	b4284 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b4aba:	6828      	ldr	r0, [r5, #0]
   b4abc:	22c0      	movs	r2, #192	; 0xc0
   b4abe:	2100      	movs	r1, #0
   b4ac0:	f006 f9a1 	bl	bae06 <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b4ac4:	6820      	ldr	r0, [r4, #0]
   b4ac6:	22c0      	movs	r2, #192	; 0xc0
   b4ac8:	2100      	movs	r1, #0
   b4aca:	f006 f99c 	bl	bae06 <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4ace:	6830      	ldr	r0, [r6, #0]
   b4ad0:	22c0      	movs	r2, #192	; 0xc0
   b4ad2:	2100      	movs	r1, #0
   b4ad4:	f006 f997 	bl	bae06 <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4ad8:	f8d8 0000 	ldr.w	r0, [r8]
   b4adc:	2260      	movs	r2, #96	; 0x60
   b4ade:	2100      	movs	r1, #0
   b4ae0:	f006 f991 	bl	bae06 <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4ae4:	f8d9 0000 	ldr.w	r0, [r9]
   b4ae8:	2260      	movs	r2, #96	; 0x60
}
   b4aea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4aee:	2100      	movs	r1, #0
   b4af0:	f006 b989 	b.w	bae06 <memset>
   b4af4:	2003d4a0 	.word	0x2003d4a0
   b4af8:	000bd0d8 	.word	0x000bd0d8
   b4afc:	2003d498 	.word	0x2003d498
   b4b00:	000bd106 	.word	0x000bd106
   b4b04:	2003d49c 	.word	0x2003d49c
   b4b08:	000bd130 	.word	0x000bd130
   b4b0c:	000bd15d 	.word	0x000bd15d
   b4b10:	000bd18f 	.word	0x000bd18f
   b4b14:	000bd1b7 	.word	0x000bd1b7
   b4b18:	000bd1e3 	.word	0x000bd1e3
   b4b1c:	000bd20e 	.word	0x000bd20e
   b4b20:	2003e19c 	.word	0x2003e19c
   b4b24:	2003e1b0 	.word	0x2003e1b0

000b4b28 <_Z13rotate_pricesv>:
{
   b4b28:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b4b2a:	4a0c      	ldr	r2, [pc, #48]	; (b4b5c <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b4b2c:	4b0c      	ldr	r3, [pc, #48]	; (b4b60 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b4b2e:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b4b30:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b4b32:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b4b34:	4b0b      	ldr	r3, [pc, #44]	; (b4b64 <_Z13rotate_pricesv+0x3c>)
   b4b36:	6819      	ldr	r1, [r3, #0]
   b4b38:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4b3a:	22c0      	movs	r2, #192	; 0xc0
   b4b3c:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b4b3e:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4b40:	f006 f961 	bl	bae06 <memset>
    int *temp2 = wh_yesterday;
   b4b44:	4a08      	ldr	r2, [pc, #32]	; (b4b68 <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b4b46:	4b09      	ldr	r3, [pc, #36]	; (b4b6c <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b4b48:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b4b4a:	6819      	ldr	r1, [r3, #0]
   b4b4c:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b4b4e:	6018      	str	r0, [r3, #0]
}
   b4b50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4b54:	2260      	movs	r2, #96	; 0x60
   b4b56:	2100      	movs	r1, #0
   b4b58:	f006 b955 	b.w	bae06 <memset>
   b4b5c:	2003d498 	.word	0x2003d498
   b4b60:	2003d4a0 	.word	0x2003d4a0
   b4b64:	2003d49c 	.word	0x2003d49c
   b4b68:	2003e1b0 	.word	0x2003e1b0
   b4b6c:	2003e19c 	.word	0x2003e19c

000b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4b70:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4b72:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4b74:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4b76:	b17c      	cbz	r4, b4b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4b78:	6863      	ldr	r3, [r4, #4]
   b4b7a:	3b01      	subs	r3, #1
   b4b7c:	6063      	str	r3, [r4, #4]
   b4b7e:	b95b      	cbnz	r3, b4b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4b80:	6823      	ldr	r3, [r4, #0]
   b4b82:	4620      	mov	r0, r4
   b4b84:	689b      	ldr	r3, [r3, #8]
   b4b86:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b88:	68a3      	ldr	r3, [r4, #8]
   b4b8a:	3b01      	subs	r3, #1
   b4b8c:	60a3      	str	r3, [r4, #8]
   b4b8e:	b91b      	cbnz	r3, b4b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4b90:	6823      	ldr	r3, [r4, #0]
   b4b92:	4620      	mov	r0, r4
   b4b94:	68db      	ldr	r3, [r3, #12]
   b4b96:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4b98:	4628      	mov	r0, r5
   b4b9a:	bd38      	pop	{r3, r4, r5, pc}

000b4b9c <_Z15transmit_pricesPA2_ii>:
{
   b4b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ba0:	b08a      	sub	sp, #40	; 0x28
   b4ba2:	4605      	mov	r5, r0
   b4ba4:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b4ba6:	f004 fc95 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4baa:	4918      	ldr	r1, [pc, #96]	; (b4c0c <_Z15transmit_pricesPA2_ii+0x70>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4bac:	4f18      	ldr	r7, [pc, #96]	; (b4c10 <_Z15transmit_pricesPA2_ii+0x74>)
    Serial.printf("In work\n");
   b4bae:	f7ff fb69 	bl	b4284 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b4bb2:	4918      	ldr	r1, [pc, #96]	; (b4c14 <_Z15transmit_pricesPA2_ii+0x78>)
   b4bb4:	a802      	add	r0, sp, #8
   b4bb6:	f002 fba4 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4bba:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4bbc:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b4bc0:	42b4      	cmp	r4, r6
   b4bc2:	da10      	bge.n	b4be6 <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4bc4:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4bc8:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4bcc:	4639      	mov	r1, r7
   b4bce:	a806      	add	r0, sp, #24
   b4bd0:	f002 fc6e 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4bd4:	a906      	add	r1, sp, #24
   b4bd6:	a802      	add	r0, sp, #8
   b4bd8:	f002 fc08 	bl	b73ec <_ZN6String6concatERKS_>
   b4bdc:	a806      	add	r0, sp, #24
   b4bde:	f002 fb45 	bl	b726c <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b4be2:	3401      	adds	r4, #1
   b4be4:	e7ec      	b.n	b4bc0 <_Z15transmit_pricesPA2_ii+0x24>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4be6:	4b0c      	ldr	r3, [pc, #48]	; (b4c18 <_Z15transmit_pricesPA2_ii+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4be8:	9a02      	ldr	r2, [sp, #8]
   b4bea:	781b      	ldrb	r3, [r3, #0]
   b4bec:	490b      	ldr	r1, [pc, #44]	; (b4c1c <_Z15transmit_pricesPA2_ii+0x80>)
   b4bee:	f88d 3000 	strb.w	r3, [sp]
   b4bf2:	a806      	add	r0, sp, #24
   b4bf4:	233c      	movs	r3, #60	; 0x3c
   b4bf6:	f004 fa11 	bl	b901c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4bfa:	a807      	add	r0, sp, #28
   b4bfc:	f7ff ffb8 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String data = "Cheap(ish) hours of the day: ";
   b4c00:	a802      	add	r0, sp, #8
   b4c02:	f002 fb33 	bl	b726c <_ZN6StringD1Ev>
}
   b4c06:	b00a      	add	sp, #40	; 0x28
   b4c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4c0c:	000bd219 	.word	0x000bd219
   b4c10:	000bd240 	.word	0x000bd240
   b4c14:	000bd222 	.word	0x000bd222
   b4c18:	2003d428 	.word	0x2003d428
   b4c1c:	000bd24f 	.word	0x000bd24f

000b4c20 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4c20:	b082      	sub	sp, #8
   b4c22:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c24:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b4c26:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b4c28:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b4c2a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4c2c:	e9c0 3300 	strd	r3, r3, [r0]
   b4c30:	4606      	mov	r6, r0
   b4c32:	4694      	mov	ip, r2
   b4c34:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b4c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c38:	ac04      	add	r4, sp, #16
   b4c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c3c:	682b      	ldr	r3, [r5, #0]
   b4c3e:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b4c40:	ad1a      	add	r5, sp, #104	; 0x68
   b4c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4c44:	ac09      	add	r4, sp, #36	; 0x24
   b4c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4c48:	682b      	ldr	r3, [r5, #0]
   b4c4a:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4c4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4c4e:	9302      	str	r3, [sp, #8]
   b4c50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b4c52:	9301      	str	r3, [sp, #4]
   b4c54:	ab09      	add	r3, sp, #36	; 0x24
   b4c56:	9300      	str	r3, [sp, #0]
   b4c58:	4630      	mov	r0, r6
   b4c5a:	ab04      	add	r3, sp, #16
   b4c5c:	4662      	mov	r2, ip
   b4c5e:	4639      	mov	r1, r7
   b4c60:	f003 fbf6 	bl	b8450 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b4c64:	4630      	mov	r0, r6
   b4c66:	b00f      	add	sp, #60	; 0x3c
   b4c68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4c6c:	b002      	add	sp, #8
   b4c6e:	4770      	bx	lr

000b4c70 <_GLOBAL__sub_I_argonName>:
   b4c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b4c74:	4b90      	ldr	r3, [pc, #576]	; (b4eb8 <_GLOBAL__sub_I_argonName+0x248>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b4c76:	4d91      	ldr	r5, [pc, #580]	; (b4ebc <_GLOBAL__sub_I_argonName+0x24c>)
const BleUuid wattcharacteristicUuid(watt_c);
   b4c78:	f8df b2dc 	ldr.w	fp, [pc, #732]	; b4f58 <_GLOBAL__sub_I_argonName+0x2e8>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b4c7c:	f8df a2dc 	ldr.w	sl, [pc, #732]	; b4f5c <_GLOBAL__sub_I_argonName+0x2ec>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b4c80:	f8df 92dc 	ldr.w	r9, [pc, #732]	; b4f60 <_GLOBAL__sub_I_argonName+0x2f0>
   b4c84:	f04f 0801 	mov.w	r8, #1
   b4c88:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b4c8c:	4b8c      	ldr	r3, [pc, #560]	; (b4ec0 <_GLOBAL__sub_I_argonName+0x250>)
   b4c8e:	b093      	sub	sp, #76	; 0x4c
   b4c90:	6819      	ldr	r1, [r3, #0]
   b4c92:	4628      	mov	r0, r5
   b4c94:	f002 fe58 	bl	b7948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b4c98:	4b8a      	ldr	r3, [pc, #552]	; (b4ec4 <_GLOBAL__sub_I_argonName+0x254>)
   b4c9a:	4658      	mov	r0, fp
   b4c9c:	6819      	ldr	r1, [r3, #0]
   b4c9e:	f002 fe53 	bl	b7948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b4ca2:	4b89      	ldr	r3, [pc, #548]	; (b4ec8 <_GLOBAL__sub_I_argonName+0x258>)
   b4ca4:	4650      	mov	r0, sl
   b4ca6:	6819      	ldr	r1, [r3, #0]
   b4ca8:	f002 fe4e 	bl	b7948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b4cac:	4b87      	ldr	r3, [pc, #540]	; (b4ecc <_GLOBAL__sub_I_argonName+0x25c>)
   b4cae:	4648      	mov	r0, r9
   b4cb0:	6819      	ldr	r1, [r3, #0]
   b4cb2:	f002 fe49 	bl	b7948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b4cb6:	4b86      	ldr	r3, [pc, #536]	; (b4ed0 <_GLOBAL__sub_I_argonName+0x260>)
   b4cb8:	4886      	ldr	r0, [pc, #536]	; (b4ed4 <_GLOBAL__sub_I_argonName+0x264>)
   b4cba:	6819      	ldr	r1, [r3, #0]
   b4cbc:	f002 fe44 	bl	b7948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b4cc0:	4b85      	ldr	r3, [pc, #532]	; (b4ed8 <_GLOBAL__sub_I_argonName+0x268>)
   b4cc2:	4886      	ldr	r0, [pc, #536]	; (b4edc <_GLOBAL__sub_I_argonName+0x26c>)
   b4cc4:	6819      	ldr	r1, [r3, #0]
   b4cc6:	f002 fe3f 	bl	b7948 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b4cca:	4b85      	ldr	r3, [pc, #532]	; (b4ee0 <_GLOBAL__sub_I_argonName+0x270>)
   b4ccc:	4885      	ldr	r0, [pc, #532]	; (b4ee4 <_GLOBAL__sub_I_argonName+0x274>)
   b4cce:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4cd0:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b4cd2:	f002 fe39 	bl	b7948 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b4cd6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4cda:	462e      	mov	r6, r5
   b4cdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4cde:	2710      	movs	r7, #16
   b4ce0:	eb0d 0c07 	add.w	ip, sp, r7
   b4ce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4ce8:	6833      	ldr	r3, [r6, #0]
   b4cea:	f8cc 3000 	str.w	r3, [ip]
   b4cee:	f10b 0304 	add.w	r3, fp, #4
   b4cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4cf4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4cf8:	f8db 3000 	ldr.w	r3, [fp]
   b4cfc:	497a      	ldr	r1, [pc, #488]	; (b4ee8 <_GLOBAL__sub_I_argonName+0x278>)
   b4cfe:	487b      	ldr	r0, [pc, #492]	; (b4eec <_GLOBAL__sub_I_argonName+0x27c>)
   b4d00:	463a      	mov	r2, r7
   b4d02:	f7ff ff8d 	bl	b4c20 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b4d06:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4d0a:	46ae      	mov	lr, r5
   b4d0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4d10:	eb0d 0c07 	add.w	ip, sp, r7
   b4d14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4d18:	6833      	ldr	r3, [r6, #0]
   b4d1a:	f8cc 3000 	str.w	r3, [ip]
   b4d1e:	f10a 0304 	add.w	r3, sl, #4
   b4d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4d24:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4d28:	f8da 3000 	ldr.w	r3, [sl]
   b4d2c:	4970      	ldr	r1, [pc, #448]	; (b4ef0 <_GLOBAL__sub_I_argonName+0x280>)
   b4d2e:	4871      	ldr	r0, [pc, #452]	; (b4ef4 <_GLOBAL__sub_I_argonName+0x284>)
   b4d30:	463a      	mov	r2, r7
   b4d32:	f7ff ff75 	bl	b4c20 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b4d36:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4d3a:	46ae      	mov	lr, r5
   b4d3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4d40:	eb0d 0c07 	add.w	ip, sp, r7
   b4d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4d48:	6833      	ldr	r3, [r6, #0]
   b4d4a:	f8cc 3000 	str.w	r3, [ip]
   b4d4e:	f109 0304 	add.w	r3, r9, #4
   b4d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4d54:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4d58:	f8d9 3000 	ldr.w	r3, [r9]
   b4d5c:	4966      	ldr	r1, [pc, #408]	; (b4ef8 <_GLOBAL__sub_I_argonName+0x288>)
   b4d5e:	4867      	ldr	r0, [pc, #412]	; (b4efc <_GLOBAL__sub_I_argonName+0x28c>)
   b4d60:	463a      	mov	r2, r7
   b4d62:	f7ff ff5d 	bl	b4c20 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b4d66:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4d6a:	46ae      	mov	lr, r5
   b4d6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4d70:	eb0d 0c07 	add.w	ip, sp, r7
   b4d74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4d78:	6833      	ldr	r3, [r6, #0]
   b4d7a:	f8cc 3000 	str.w	r3, [ip]
   b4d7e:	4b55      	ldr	r3, [pc, #340]	; (b4ed4 <_GLOBAL__sub_I_argonName+0x264>)
   b4d80:	3304      	adds	r3, #4
   b4d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4d84:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4d88:	4b52      	ldr	r3, [pc, #328]	; (b4ed4 <_GLOBAL__sub_I_argonName+0x264>)
   b4d8a:	495d      	ldr	r1, [pc, #372]	; (b4f00 <_GLOBAL__sub_I_argonName+0x290>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	485d      	ldr	r0, [pc, #372]	; (b4f04 <_GLOBAL__sub_I_argonName+0x294>)
   b4d90:	463a      	mov	r2, r7
   b4d92:	f7ff ff45 	bl	b4c20 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b4d96:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4d9a:	46ae      	mov	lr, r5
   b4d9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4da0:	eb0d 0c07 	add.w	ip, sp, r7
   b4da4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4da8:	6833      	ldr	r3, [r6, #0]
   b4daa:	f8cc 3000 	str.w	r3, [ip]
   b4dae:	4b4b      	ldr	r3, [pc, #300]	; (b4edc <_GLOBAL__sub_I_argonName+0x26c>)
   b4db0:	3304      	adds	r3, #4
   b4db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4db4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b4db8:	4b48      	ldr	r3, [pc, #288]	; (b4edc <_GLOBAL__sub_I_argonName+0x26c>)
   b4dba:	4953      	ldr	r1, [pc, #332]	; (b4f08 <_GLOBAL__sub_I_argonName+0x298>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	4853      	ldr	r0, [pc, #332]	; (b4f0c <_GLOBAL__sub_I_argonName+0x29c>)
   b4dc0:	463a      	mov	r2, r7
   b4dc2:	f7ff ff2d 	bl	b4c20 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b4dc6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b4dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4dcc:	eb0d 0c07 	add.w	ip, sp, r7
   b4dd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4dd4:	4d43      	ldr	r5, [pc, #268]	; (b4ee4 <_GLOBAL__sub_I_argonName+0x274>)
   b4dd6:	6833      	ldr	r3, [r6, #0]
   b4dd8:	f8cc 3000 	str.w	r3, [ip]
   b4ddc:	1d2b      	adds	r3, r5, #4
   b4dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4de0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b4de4:	4e4a      	ldr	r6, [pc, #296]	; (b4f10 <_GLOBAL__sub_I_argonName+0x2a0>)
   b4de6:	682b      	ldr	r3, [r5, #0]
   b4de8:	494a      	ldr	r1, [pc, #296]	; (b4f14 <_GLOBAL__sub_I_argonName+0x2a4>)
   b4dea:	4d4b      	ldr	r5, [pc, #300]	; (b4f18 <_GLOBAL__sub_I_argonName+0x2a8>)
   b4dec:	484b      	ldr	r0, [pc, #300]	; (b4f1c <_GLOBAL__sub_I_argonName+0x2ac>)
   b4dee:	463a      	mov	r2, r7
   b4df0:	f7ff ff16 	bl	b4c20 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
extern const struct transport_t transport;
/**
 * Declaring the variables.
 */
unsigned int nextTime = 0; // Next time to contact the server
HttpClient http;
   b4df4:	484a      	ldr	r0, [pc, #296]	; (b4f20 <_GLOBAL__sub_I_argonName+0x2b0>)
   b4df6:	f001 fb59 	bl	b64ac <_ZN10HttpClientC1Ev>
   b4dfa:	4629      	mov	r1, r5
   b4dfc:	4630      	mov	r0, r6
   b4dfe:	f002 fa80 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e02:	19f0      	adds	r0, r6, r7
   b4e04:	f004 fab0 	bl	b9368 <_ZN9IPAddressC1Ev>
   b4e08:	4629      	mov	r1, r5
   b4e0a:	f106 0028 	add.w	r0, r6, #40	; 0x28
   b4e0e:	f002 fa78 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e12:	4629      	mov	r1, r5
   b4e14:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   b4e18:	f002 fa73 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b4e1c:	4629      	mov	r1, r5
   b4e1e:	4841      	ldr	r0, [pc, #260]	; (b4f24 <_GLOBAL__sub_I_argonName+0x2b4>)
   b4e20:	f002 fa6f 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
uint8_t currentHour = Time.hour();
   b4e24:	f003 fec4 	bl	b8bb0 <_ZN9TimeClass4hourEv>
   b4e28:	4b3f      	ldr	r3, [pc, #252]	; (b4f28 <_GLOBAL__sub_I_argonName+0x2b8>)
String pricestoday_Json;
   b4e2a:	4629      	mov	r1, r5
uint8_t currentHour = Time.hour();
   b4e2c:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b4e2e:	483f      	ldr	r0, [pc, #252]	; (b4f2c <_GLOBAL__sub_I_argonName+0x2bc>)
   b4e30:	f002 fa67 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b4e34:	4629      	mov	r1, r5
   b4e36:	483e      	ldr	r0, [pc, #248]	; (b4f30 <_GLOBAL__sub_I_argonName+0x2c0>)
   b4e38:	f002 fa63 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b4e3c:	4629      	mov	r1, r5
   b4e3e:	483d      	ldr	r0, [pc, #244]	; (b4f34 <_GLOBAL__sub_I_argonName+0x2c4>)
   b4e40:	f002 fa5f 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b4e44:	4629      	mov	r1, r5
   b4e46:	483c      	ldr	r0, [pc, #240]	; (b4f38 <_GLOBAL__sub_I_argonName+0x2c8>)
   b4e48:	f002 fa5b 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b4e4c:	4629      	mov	r1, r5
   b4e4e:	483b      	ldr	r0, [pc, #236]	; (b4f3c <_GLOBAL__sub_I_argonName+0x2cc>)
   b4e50:	f002 fa57 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4e54:	4b3a      	ldr	r3, [pc, #232]	; (b4f40 <_GLOBAL__sub_I_argonName+0x2d0>)
   b4e56:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e58:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4e5a:	4b3a      	ldr	r3, [pc, #232]	; (b4f44 <_GLOBAL__sub_I_argonName+0x2d4>)
   b4e5c:	4a3a      	ldr	r2, [pc, #232]	; (b4f48 <_GLOBAL__sub_I_argonName+0x2d8>)
   b4e5e:	601a      	str	r2, [r3, #0]
   b4e60:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4e64:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e68:	ae0c      	add	r6, sp, #48	; 0x30
   b4e6a:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4e72:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4e76:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4e7a:	e882 0003 	stmia.w	r2, {r0, r1}
   b4e7e:	4a33      	ldr	r2, [pc, #204]	; (b4f4c <_GLOBAL__sub_I_argonName+0x2dc>)
   b4e80:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4e82:	699a      	ldr	r2, [r3, #24]
   b4e84:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b4e86:	4a32      	ldr	r2, [pc, #200]	; (b4f50 <_GLOBAL__sub_I_argonName+0x2e0>)
   b4e88:	619a      	str	r2, [r3, #24]
   b4e8a:	711c      	strb	r4, [r3, #4]
   b4e8c:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4e8e:	4a31      	ldr	r2, [pc, #196]	; (b4f54 <_GLOBAL__sub_I_argonName+0x2e4>)
      __a = _GLIBCXX_MOVE(__b);
   b4e90:	9410      	str	r4, [sp, #64]	; 0x40
   b4e92:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4e96:	f103 0008 	add.w	r0, r3, #8
   b4e9a:	e9cd 8400 	strd	r8, r4, [sp]
   b4e9e:	f001 fe91 	bl	b6bc4 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b4ea2:	4628      	mov	r0, r5
   b4ea4:	f7ff faa2 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
SYSTEM_THREAD(ENABLED);
   b4ea8:	4621      	mov	r1, r4
   b4eaa:	4640      	mov	r0, r8
   b4eac:	b013      	add	sp, #76	; 0x4c
   b4eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b4eb2:	f001 bff7 	b.w	b6ea4 <system_thread_set_state>
   b4eb6:	bf00      	nop
   b4eb8:	2003d428 	.word	0x2003d428
   b4ebc:	2003d3b0 	.word	0x2003d3b0
   b4ec0:	2003d16c 	.word	0x2003d16c
   b4ec4:	2003d170 	.word	0x2003d170
   b4ec8:	2003d138 	.word	0x2003d138
   b4ecc:	2003d130 	.word	0x2003d130
   b4ed0:	2003d134 	.word	0x2003d134
   b4ed4:	2003d3ec 	.word	0x2003d3ec
   b4ed8:	2003d13c 	.word	0x2003d13c
   b4edc:	2003d3d8 	.word	0x2003d3d8
   b4ee0:	2003d140 	.word	0x2003d140
   b4ee4:	2003d414 	.word	0x2003d414
   b4ee8:	000bd25f 	.word	0x000bd25f
   b4eec:	2003d384 	.word	0x2003d384
   b4ef0:	000bd268 	.word	0x000bd268
   b4ef4:	2003d374 	.word	0x2003d374
   b4ef8:	000bd276 	.word	0x000bd276
   b4efc:	2003d364 	.word	0x2003d364
   b4f00:	000bd280 	.word	0x000bd280
   b4f04:	2003d36c 	.word	0x2003d36c
   b4f08:	000bd28d 	.word	0x000bd28d
   b4f0c:	2003d38c 	.word	0x2003d38c
   b4f10:	2003dd1c 	.word	0x2003dd1c
   b4f14:	000bd297 	.word	0x000bd297
   b4f18:	000bd64e 	.word	0x000bd64e
   b4f1c:	2003d394 	.word	0x2003d394
   b4f20:	2003d4a8 	.word	0x2003d4a8
   b4f24:	2003dd6c 	.word	0x2003dd6c
   b4f28:	2003d4a4 	.word	0x2003d4a4
   b4f2c:	2003dcec 	.word	0x2003dcec
   b4f30:	2003dcfc 	.word	0x2003dcfc
   b4f34:	2003dd0c 	.word	0x2003dd0c
   b4f38:	2003e1a0 	.word	0x2003e1a0
   b4f3c:	2003e1b4 	.word	0x2003e1b4
   b4f40:	000b41c1 	.word	0x000b41c1
   b4f44:	2003e180 	.word	0x2003e180
   b4f48:	000bd4bc 	.word	0x000bd4bc
   b4f4c:	000b4167 	.word	0x000b4167
   b4f50:	000b417b 	.word	0x000b417b
   b4f54:	000b412d 	.word	0x000b412d
   b4f58:	2003d39c 	.word	0x2003d39c
   b4f5c:	2003d400 	.word	0x2003d400
   b4f60:	2003d3c4 	.word	0x2003d3c4
   b4f64:	00000000 	.word	0x00000000

000b4f68 <_Z13get_data_httpi>:

// to get a verbose output from these actions
#define LOGGING

bool get_data_http(int day)
{
   b4f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f6c:	b099      	sub	sp, #100	; 0x64

    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b4f6e:	497e      	ldr	r1, [pc, #504]	; (b5168 <_Z13get_data_httpi+0x200>)
    path_s += String::format("%d-%02d-%02d", Time.year(), Time.month(), day);
    path_s += "T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk";
    // Request path and body can be set at runtime or at setup.
    request.hostname = "api.energidataservice.dk";
   b4f70:	4d7e      	ldr	r5, [pc, #504]	; (b516c <_Z13get_data_httpi+0x204>)
{
   b4f72:	4604      	mov	r4, r0
    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b4f74:	a810      	add	r0, sp, #64	; 0x40
   b4f76:	f002 f9c4 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
    path_s += String::format("%d-%02d-%02d", Time.year(), Time.month(), day);
   b4f7a:	f003 fe51 	bl	b8c20 <_ZN9TimeClass4yearEv>
   b4f7e:	9003      	str	r0, [sp, #12]
   b4f80:	f003 fe46 	bl	b8c10 <_ZN9TimeClass5monthEv>
   b4f84:	9a03      	ldr	r2, [sp, #12]
   b4f86:	497a      	ldr	r1, [pc, #488]	; (b5170 <_Z13get_data_httpi+0x208>)
   b4f88:	9400      	str	r4, [sp, #0]
   b4f8a:	4603      	mov	r3, r0
   b4f8c:	a814      	add	r0, sp, #80	; 0x50
   b4f8e:	f002 fa8f 	bl	b74b0 <_ZN6String6formatEPKcz>
   b4f92:	a914      	add	r1, sp, #80	; 0x50
   b4f94:	a810      	add	r0, sp, #64	; 0x40
   b4f96:	f002 fa29 	bl	b73ec <_ZN6String6concatERKS_>
   b4f9a:	a814      	add	r0, sp, #80	; 0x50
   b4f9c:	f002 f966 	bl	b726c <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b4fa0:	4974      	ldr	r1, [pc, #464]	; (b5174 <_Z13get_data_httpi+0x20c>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b4fa2:	4c75      	ldr	r4, [pc, #468]	; (b5178 <_Z13get_data_httpi+0x210>)
   b4fa4:	a810      	add	r0, sp, #64	; 0x40
   b4fa6:	f002 fa25 	bl	b73f4 <_ZN6String6concatEPKc>
    request.hostname = "api.energidataservice.dk";
   b4faa:	4974      	ldr	r1, [pc, #464]	; (b517c <_Z13get_data_httpi+0x214>)
   b4fac:	4628      	mov	r0, r5
   b4fae:	f002 f9e1 	bl	b7374 <_ZN6StringaSEPKc>
    request.port = 80;
   b4fb2:	2350      	movs	r3, #80	; 0x50
    request.path = path_s.c_str();
   b4fb4:	9910      	ldr	r1, [sp, #64]	; 0x40
    request.port = 80;
   b4fb6:	63ab      	str	r3, [r5, #56]	; 0x38
    request.path = path_s.c_str();
   b4fb8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b4fbc:	f002 f9da 	bl	b7374 <_ZN6StringaSEPKc>
   b4fc0:	4b6f      	ldr	r3, [pc, #444]	; (b5180 <_Z13get_data_httpi+0x218>)
   b4fc2:	9300      	str	r3, [sp, #0]
   b4fc4:	486f      	ldr	r0, [pc, #444]	; (b5184 <_Z13get_data_httpi+0x21c>)
   b4fc6:	4b70      	ldr	r3, [pc, #448]	; (b5188 <_Z13get_data_httpi+0x220>)
   b4fc8:	4622      	mov	r2, r4
   b4fca:	4629      	mov	r1, r5
   b4fcc:	f001 faa4 	bl	b6518 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    // Get request
    http.get(request, response, headers);
    // Serial.print("Application>\tResponse status: ");
    // Serial.println(response.status);
    if (response.status == 200)
   b4fd0:	6823      	ldr	r3, [r4, #0]
   b4fd2:	2bc8      	cmp	r3, #200	; 0xc8
   b4fd4:	d126      	bne.n	b5024 <_Z13get_data_httpi+0xbc>
    {
        Serial.println("success response code 200");
   b4fd6:	f004 fa7d 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4fda:	496c      	ldr	r1, [pc, #432]	; (b518c <_Z13get_data_httpi+0x224>)
   b4fdc:	f003 fce1 	bl	b89a2 <_ZN5Print7printlnEPKc>
    {
        Serial.println("bad response");
        return false;
    }

    Serial.println(response.body);
   b4fe0:	f004 fa78 	bl	b94d4 <_Z16_fetch_usbserialv>
   b4fe4:	6861      	ldr	r1, [r4, #4]
   b4fe6:	f003 fcdc 	bl	b89a2 <_ZN5Print7printlnEPKc>

    JSONVar myObject = JSON.parse(response.body);
   b4fea:	1d22      	adds	r2, r4, #4
   b4fec:	4968      	ldr	r1, [pc, #416]	; (b5190 <_Z13get_data_httpi+0x228>)
   b4fee:	a804      	add	r0, sp, #16
   b4ff0:	f001 fbc2 	bl	b6778 <_ZN9JSONClass5parseERK6String>
    if (JSON.typeof(myObject) == "undefined")
   b4ff4:	4966      	ldr	r1, [pc, #408]	; (b5190 <_Z13get_data_httpi+0x228>)
   b4ff6:	aa04      	add	r2, sp, #16
   b4ff8:	a814      	add	r0, sp, #80	; 0x50
   b4ffa:	f001 fbc4 	bl	b6786 <_ZN9JSONClass7typeof_ERK7JSONVar>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4ffe:	4965      	ldr	r1, [pc, #404]	; (b5194 <_Z13get_data_httpi+0x22c>)
   b5000:	a814      	add	r0, sp, #80	; 0x50
   b5002:	f002 fa08 	bl	b7416 <_ZNK6String6equalsEPKc>
   b5006:	4604      	mov	r4, r0
   b5008:	a814      	add	r0, sp, #80	; 0x50
   b500a:	f002 f92f 	bl	b726c <_ZN6StringD1Ev>
   b500e:	b1b4      	cbz	r4, b503e <_Z13get_data_httpi+0xd6>
    {
        Serial.println("Parsing input failed!");
   b5010:	f004 fa60 	bl	b94d4 <_Z16_fetch_usbserialv>
   b5014:	4960      	ldr	r1, [pc, #384]	; (b5198 <_Z13get_data_httpi+0x230>)
   b5016:	f003 fcc4 	bl	b89a2 <_ZN5Print7printlnEPKc>
            JSONVar myHour = myArray[i];

            if (JSON.typeof(myHour["SpotPriceDKK"]) == "undefined")
            {
                Serial.println("parsing failed 2");
                return false;
   b501a:	2400      	movs	r4, #0
    JSONVar myObject = JSON.parse(response.body);
   b501c:	a804      	add	r0, sp, #16
   b501e:	f001 fbc1 	bl	b67a4 <_ZN7JSONVarD1Ev>
   b5022:	e005      	b.n	b5030 <_Z13get_data_httpi+0xc8>
        Serial.println("bad response");
   b5024:	f004 fa56 	bl	b94d4 <_Z16_fetch_usbserialv>
   b5028:	495c      	ldr	r1, [pc, #368]	; (b519c <_Z13get_data_httpi+0x234>)
   b502a:	f003 fcba 	bl	b89a2 <_ZN5Print7printlnEPKc>
        return false;
   b502e:	2400      	movs	r4, #0
    String path_s = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=";
   b5030:	a810      	add	r0, sp, #64	; 0x40
   b5032:	f002 f91b 	bl	b726c <_ZN6StringD1Ev>
            }
        }
    }
    CALCULATE = true;
    return true;
   b5036:	4620      	mov	r0, r4
   b5038:	b019      	add	sp, #100	; 0x64
   b503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (myObject.hasOwnProperty("records"))
   b503e:	4958      	ldr	r1, [pc, #352]	; (b51a0 <_Z13get_data_httpi+0x238>)
   b5040:	a804      	add	r0, sp, #16
   b5042:	f001 fbf1 	bl	b6828 <_ZNK7JSONVar14hasOwnPropertyEPKc>
   b5046:	2800      	cmp	r0, #0
   b5048:	d070      	beq.n	b512c <_Z13get_data_httpi+0x1c4>
        JSONVar myArray = myObject["records"];
   b504a:	4a55      	ldr	r2, [pc, #340]	; (b51a0 <_Z13get_data_httpi+0x238>)
   b504c:	a904      	add	r1, sp, #16
   b504e:	a807      	add	r0, sp, #28
   b5050:	f001 fc70 	bl	b6934 <_ZN7JSONVarixEPKc>
        Serial.println(myArray[0]);
   b5054:	f004 fa3e 	bl	b94d4 <_Z16_fetch_usbserialv>
   b5058:	4622      	mov	r2, r4
   b505a:	4605      	mov	r5, r0
   b505c:	a907      	add	r1, sp, #28
   b505e:	a814      	add	r0, sp, #80	; 0x50
   b5060:	f001 fc88 	bl	b6974 <_ZN7JSONVarixEi>
   b5064:	a914      	add	r1, sp, #80	; 0x50
   b5066:	4628      	mov	r0, r5
   b5068:	f003 fca5 	bl	b89b6 <_ZN5Print7printlnERK9Printable>
   b506c:	a814      	add	r0, sp, #80	; 0x50
   b506e:	f001 fb99 	bl	b67a4 <_ZN7JSONVarD1Ev>
                    cost_tomorrow[i] += transport.medium;
   b5072:	a737      	add	r7, pc, #220	; (adr r7, b5150 <_Z13get_data_httpi+0x1e8>)
   b5074:	e9d7 6700 	ldrd	r6, r7, [r7]
                    cost_tomorrow[i] += transport.high;
   b5078:	f20f 09dc 	addw	r9, pc, #220	; 0xdc
   b507c:	e9d9 8900 	ldrd	r8, r9, [r9]
            JSONVar myHour = myArray[i];
   b5080:	4622      	mov	r2, r4
   b5082:	a907      	add	r1, sp, #28
   b5084:	a80a      	add	r0, sp, #40	; 0x28
   b5086:	f001 fc75 	bl	b6974 <_ZN7JSONVarixEi>
            if (JSON.typeof(myHour["SpotPriceDKK"]) == "undefined")
   b508a:	4a46      	ldr	r2, [pc, #280]	; (b51a4 <_Z13get_data_httpi+0x23c>)
   b508c:	a90a      	add	r1, sp, #40	; 0x28
   b508e:	a80d      	add	r0, sp, #52	; 0x34
   b5090:	f001 fc50 	bl	b6934 <_ZN7JSONVarixEPKc>
   b5094:	aa0d      	add	r2, sp, #52	; 0x34
   b5096:	493e      	ldr	r1, [pc, #248]	; (b5190 <_Z13get_data_httpi+0x228>)
   b5098:	a814      	add	r0, sp, #80	; 0x50
   b509a:	f001 fb74 	bl	b6786 <_ZN9JSONClass7typeof_ERK7JSONVar>
   b509e:	493d      	ldr	r1, [pc, #244]	; (b5194 <_Z13get_data_httpi+0x22c>)
   b50a0:	a814      	add	r0, sp, #80	; 0x50
   b50a2:	f002 f9b8 	bl	b7416 <_ZNK6String6equalsEPKc>
   b50a6:	4605      	mov	r5, r0
   b50a8:	a814      	add	r0, sp, #80	; 0x50
   b50aa:	f002 f8df 	bl	b726c <_ZN6StringD1Ev>
   b50ae:	a80d      	add	r0, sp, #52	; 0x34
   b50b0:	f001 fb78 	bl	b67a4 <_ZN7JSONVarD1Ev>
   b50b4:	b15d      	cbz	r5, b50ce <_Z13get_data_httpi+0x166>
                Serial.println("parsing failed 2");
   b50b6:	f004 fa0d 	bl	b94d4 <_Z16_fetch_usbserialv>
   b50ba:	493b      	ldr	r1, [pc, #236]	; (b51a8 <_Z13get_data_httpi+0x240>)
   b50bc:	f003 fc71 	bl	b89a2 <_ZN5Print7printlnEPKc>
                return false;
   b50c0:	a80a      	add	r0, sp, #40	; 0x28
   b50c2:	f001 fb6f 	bl	b67a4 <_ZN7JSONVarD1Ev>
   b50c6:	a807      	add	r0, sp, #28
   b50c8:	f001 fb6c 	bl	b67a4 <_ZN7JSONVarD1Ev>
   b50cc:	e7a5      	b.n	b501a <_Z13get_data_httpi+0xb2>
                cost_tomorrow[i] = (double)myHour["SpotPriceDKK"]/1000.0;
   b50ce:	4a35      	ldr	r2, [pc, #212]	; (b51a4 <_Z13get_data_httpi+0x23c>)
   b50d0:	4d36      	ldr	r5, [pc, #216]	; (b51ac <_Z13get_data_httpi+0x244>)
   b50d2:	a90a      	add	r1, sp, #40	; 0x28
   b50d4:	a814      	add	r0, sp, #80	; 0x50
   b50d6:	f001 fc2d 	bl	b6934 <_ZN7JSONVarixEPKc>
   b50da:	a814      	add	r0, sp, #80	; 0x50
   b50dc:	f001 fb90 	bl	b6800 <_ZNK7JSONVarcvdEv>
   b50e0:	682b      	ldr	r3, [r5, #0]
   b50e2:	ec51 0b10 	vmov	r0, r1, d0
   b50e6:	eb03 0ac4 	add.w	sl, r3, r4, lsl #3
   b50ea:	2200      	movs	r2, #0
   b50ec:	4b30      	ldr	r3, [pc, #192]	; (b51b0 <_Z13get_data_httpi+0x248>)
   b50ee:	f005 fc3b 	bl	ba968 <__aeabi_ddiv>
   b50f2:	e9ca 0100 	strd	r0, r1, [sl]
   b50f6:	a814      	add	r0, sp, #80	; 0x50
   b50f8:	f001 fb54 	bl	b67a4 <_ZN7JSONVarD1Ev>
                    cost_tomorrow[i] += transport.low;
   b50fc:	682b      	ldr	r3, [r5, #0]
   b50fe:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
                if (i >= 0 && i < 7)
   b5102:	2c06      	cmp	r4, #6
                    cost_tomorrow[i] += transport.low;
   b5104:	449b      	add	fp, r3
                if (i >= 0 && i < 7)
   b5106:	dc15      	bgt.n	b5134 <_Z13get_data_httpi+0x1cc>
                    cost_tomorrow[i] += transport.low;
   b5108:	a315      	add	r3, pc, #84	; (adr r3, b5160 <_Z13get_data_httpi+0x1f8>)
   b510a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b510e:	e9db 0100 	ldrd	r0, r1, [fp]
                    cost_tomorrow[i] += transport.medium;
   b5112:	f005 f949 	bl	ba3a8 <__adddf3>
        for (int i = 0; i < 24; i++)
   b5116:	3401      	adds	r4, #1
                    cost_tomorrow[i] += transport.medium;
   b5118:	e9cb 0100 	strd	r0, r1, [fp]
            JSONVar myHour = myArray[i];
   b511c:	a80a      	add	r0, sp, #40	; 0x28
   b511e:	f001 fb41 	bl	b67a4 <_ZN7JSONVarD1Ev>
        for (int i = 0; i < 24; i++)
   b5122:	2c18      	cmp	r4, #24
   b5124:	d1ac      	bne.n	b5080 <_Z13get_data_httpi+0x118>
        JSONVar myArray = myObject["records"];
   b5126:	a807      	add	r0, sp, #28
   b5128:	f001 fb3c 	bl	b67a4 <_ZN7JSONVarD1Ev>
    CALCULATE = true;
   b512c:	4b21      	ldr	r3, [pc, #132]	; (b51b4 <_Z13get_data_httpi+0x24c>)
   b512e:	2401      	movs	r4, #1
   b5130:	701c      	strb	r4, [r3, #0]
    return true;
   b5132:	e773      	b.n	b501c <_Z13get_data_httpi+0xb4>
                else if (i > 16 && i < 22)
   b5134:	f1a4 0311 	sub.w	r3, r4, #17
   b5138:	2b04      	cmp	r3, #4
                    cost_tomorrow[i] += transport.high;
   b513a:	e9db 0100 	ldrd	r0, r1, [fp]
   b513e:	bf99      	ittee	ls
   b5140:	4642      	movls	r2, r8
   b5142:	464b      	movls	r3, r9
                    cost_tomorrow[i] += transport.medium;
   b5144:	4632      	movhi	r2, r6
   b5146:	463b      	movhi	r3, r7
   b5148:	e7e3      	b.n	b5112 <_Z13get_data_httpi+0x1aa>
   b514a:	bf00      	nop
   b514c:	f3af 8000 	nop.w
   b5150:	42c3c9ef 	.word	0x42c3c9ef
   b5154:	3fe469ad 	.word	0x3fe469ad
   b5158:	2d0e5604 	.word	0x2d0e5604
   b515c:	3ffe9db2 	.word	0x3ffe9db2
   b5160:	ebedfa44 	.word	0xebedfa44
   b5164:	3fcb39c0 	.word	0x3fcb39c0
   b5168:	000bd2a5 	.word	0x000bd2a5
   b516c:	2003dd1c 	.word	0x2003dd1c
   b5170:	000bd2eb 	.word	0x000bd2eb
   b5174:	000bd2f8 	.word	0x000bd2f8
   b5178:	2003dd68 	.word	0x2003dd68
   b517c:	000bd346 	.word	0x000bd346
   b5180:	000bd35f 	.word	0x000bd35f
   b5184:	2003d4a8 	.word	0x2003d4a8
   b5188:	2003d148 	.word	0x2003d148
   b518c:	000bd363 	.word	0x000bd363
   b5190:	2003e660 	.word	0x2003e660
   b5194:	000bd37d 	.word	0x000bd37d
   b5198:	000bd394 	.word	0x000bd394
   b519c:	000bd387 	.word	0x000bd387
   b51a0:	000bd3aa 	.word	0x000bd3aa
   b51a4:	000bd3b2 	.word	0x000bd3b2
   b51a8:	000bd3bf 	.word	0x000bd3bf
   b51ac:	2003d49c 	.word	0x2003d49c
   b51b0:	408f4000 	.word	0x408f4000
   b51b4:	2003d361 	.word	0x2003d361

000b51b8 <setup>:
{
   b51b8:	b570      	push	{r4, r5, r6, lr}
    STARTUP = true;
   b51ba:	4b54      	ldr	r3, [pc, #336]	; (b530c <setup+0x154>)
   b51bc:	2201      	movs	r2, #1
{
   b51be:	b08e      	sub	sp, #56	; 0x38
    STARTUP = true;
   b51c0:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b51c2:	f001 ff0b 	bl	b6fdc <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b51c6:	b910      	cbnz	r0, b51ce <setup+0x16>
            spark_process();
   b51c8:	f001 ff00 	bl	b6fcc <spark_process>
        while (_while() && !_condition()) {
   b51cc:	e7f9      	b.n	b51c2 <setup+0xa>
   b51ce:	f001 ff05 	bl	b6fdc <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
   b51d2:	2000      	movs	r0, #0
   b51d4:	f001 ff1a 	bl	b700c <spark_unsubscribe>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b51d8:	2400      	movs	r4, #0
    ble_setup();
   b51da:	f7ff f93d 	bl	b4458 <_Z9ble_setupv>
    init_memory();
   b51de:	f7ff fc13 	bl	b4a08 <_Z11init_memoryv>
    Time.zone(1);
   b51e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b51e6:	f003 fc95 	bl	b8b14 <_ZN9TimeClass4zoneEf>
   b51ea:	4949      	ldr	r1, [pc, #292]	; (b5310 <setup+0x158>)
   b51ec:	4849      	ldr	r0, [pc, #292]	; (b5314 <setup+0x15c>)
        Serial.printf("Count1=: %d\n", count);
   b51ee:	4e4a      	ldr	r6, [pc, #296]	; (b5318 <setup+0x160>)
   b51f0:	2301      	movs	r3, #1
   b51f2:	4622      	mov	r2, r4
   b51f4:	e9cd 4400 	strd	r4, r4, [sp]
   b51f8:	f001 ff00 	bl	b6ffc <spark_subscribe>
    delay(10000);
   b51fc:	f242 7010 	movw	r0, #10000	; 0x2710
   b5200:	f003 fd24 	bl	b8c4c <delay>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b5204:	f004 f966 	bl	b94d4 <_Z16_fetch_usbserialv>
   b5208:	4605      	mov	r5, r0
   b520a:	f003 fcd1 	bl	b8bb0 <_ZN9TimeClass4hourEv>
   b520e:	9003      	str	r0, [sp, #12]
   b5210:	f003 fcda 	bl	b8bc8 <_ZN9TimeClass6minuteEv>
   b5214:	9a03      	ldr	r2, [sp, #12]
   b5216:	4941      	ldr	r1, [pc, #260]	; (b531c <setup+0x164>)
   b5218:	4603      	mov	r3, r0
   b521a:	4628      	mov	r0, r5
   b521c:	f7ff f832 	bl	b4284 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b5220:	4622      	mov	r2, r4
   b5222:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5226:	483e      	ldr	r0, [pc, #248]	; (b5320 <setup+0x168>)
   b5228:	f7fe ffb6 	bl	b4198 <_ZN5Timer6_startEjb.isra.0>
    Serial.printlnf("RSSI=%d", (int8_t)WiFi.RSSI());
   b522c:	f004 f952 	bl	b94d4 <_Z16_fetch_usbserialv>
   b5230:	493c      	ldr	r1, [pc, #240]	; (b5324 <setup+0x16c>)
   b5232:	4605      	mov	r5, r0
   b5234:	a805      	add	r0, sp, #20
   b5236:	f004 fddd 	bl	b9df4 <_ZN5spark9WiFiClass4RSSIEv>
   b523a:	a805      	add	r0, sp, #20
   b523c:	f004 fdb6 	bl	b9dac <_ZNK10WiFiSignalcvaEv>
   b5240:	4939      	ldr	r1, [pc, #228]	; (b5328 <setup+0x170>)
   b5242:	4602      	mov	r2, r0
   b5244:	4628      	mov	r0, r5
   b5246:	f7ff f8c3 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
    Serial.printf("Getting price data for yesterday\n");
   b524a:	f004 f943 	bl	b94d4 <_Z16_fetch_usbserialv>
   b524e:	4937      	ldr	r1, [pc, #220]	; (b532c <setup+0x174>)
    while (!CALCULATE)
   b5250:	4d37      	ldr	r5, [pc, #220]	; (b5330 <setup+0x178>)
    Serial.printf("Getting price data for yesterday\n");
   b5252:	f7ff f817 	bl	b4284 <_ZN5Print6printfEPKcz>
    get_data_http(Time.day() - 1);
   b5256:	f003 fccf 	bl	b8bf8 <_ZN9TimeClass3dayEv>
   b525a:	3801      	subs	r0, #1
   b525c:	f7ff fe84 	bl	b4f68 <_Z13get_data_httpi>
    while (!CALCULATE)
   b5260:	782b      	ldrb	r3, [r5, #0]
   b5262:	b95b      	cbnz	r3, b527c <setup+0xc4>
        delay(2000);
   b5264:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5268:	f003 fcf0 	bl	b8c4c <delay>
        Serial.printf("Count1=: %d\n", count);
   b526c:	f004 f932 	bl	b94d4 <_Z16_fetch_usbserialv>
   b5270:	4622      	mov	r2, r4
   b5272:	4631      	mov	r1, r6
   b5274:	f7ff f806 	bl	b4284 <_ZN5Print6printfEPKcz>
        count++;
   b5278:	3401      	adds	r4, #1
    while (!CALCULATE)
   b527a:	e7f1      	b.n	b5260 <setup+0xa8>
    delay(5000);
   b527c:	f241 3088 	movw	r0, #5000	; 0x1388
    CALCULATE = false;
   b5280:	2400      	movs	r4, #0
   b5282:	702c      	strb	r4, [r5, #0]
    delay(5000);
   b5284:	f003 fce2 	bl	b8c4c <delay>
    rotate_prices();
   b5288:	f7ff fc4e 	bl	b4b28 <_Z13rotate_pricesv>
    Serial.printf("Getting price data for today\n");
   b528c:	f004 f922 	bl	b94d4 <_Z16_fetch_usbserialv>
   b5290:	4928      	ldr	r1, [pc, #160]	; (b5334 <setup+0x17c>)
        Serial.printf("Count2=: %d\n", count);
   b5292:	4e29      	ldr	r6, [pc, #164]	; (b5338 <setup+0x180>)
    Serial.printf("Getting price data for today\n");
   b5294:	f7fe fff6 	bl	b4284 <_ZN5Print6printfEPKcz>
    get_data_http(Time.day());
   b5298:	f003 fcae 	bl	b8bf8 <_ZN9TimeClass3dayEv>
   b529c:	f7ff fe64 	bl	b4f68 <_Z13get_data_httpi>
    while (!CALCULATE)
   b52a0:	782b      	ldrb	r3, [r5, #0]
   b52a2:	b95b      	cbnz	r3, b52bc <setup+0x104>
        delay(1000);
   b52a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b52a8:	f003 fcd0 	bl	b8c4c <delay>
        Serial.printf("Count2=: %d\n", count);
   b52ac:	f004 f912 	bl	b94d4 <_Z16_fetch_usbserialv>
   b52b0:	4622      	mov	r2, r4
   b52b2:	4631      	mov	r1, r6
   b52b4:	f7fe ffe6 	bl	b4284 <_ZN5Print6printfEPKcz>
        count++;
   b52b8:	3401      	adds	r4, #1
    while (!CALCULATE)
   b52ba:	e7f1      	b.n	b52a0 <setup+0xe8>
    rotate_prices();
   b52bc:	f7ff fc34 	bl	b4b28 <_Z13rotate_pricesv>
    delay(5000);
   b52c0:	f241 3088 	movw	r0, #5000	; 0x1388
   b52c4:	f003 fcc2 	bl	b8c4c <delay>
    if (Time.hour() >= PULL_TIME_1)
   b52c8:	f003 fc72 	bl	b8bb0 <_ZN9TimeClass4hourEv>
   b52cc:	280c      	cmp	r0, #12
   b52ce:	dd13      	ble.n	b52f8 <setup+0x140>
        CALCULATE = false;
   b52d0:	2300      	movs	r3, #0
   b52d2:	702b      	strb	r3, [r5, #0]
        GET_DATA = true;
   b52d4:	4b19      	ldr	r3, [pc, #100]	; (b533c <setup+0x184>)
   b52d6:	2201      	movs	r2, #1
   b52d8:	701a      	strb	r2, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b52da:	2103      	movs	r1, #3
   b52dc:	2008      	movs	r0, #8
   b52de:	f004 feb5 	bl	ba04c <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b52e2:	2300      	movs	r3, #0
   b52e4:	9300      	str	r3, [sp, #0]
   b52e6:	4916      	ldr	r1, [pc, #88]	; (b5340 <setup+0x188>)
   b52e8:	f04f 33ff 	mov.w	r3, #4294967295
   b52ec:	2201      	movs	r2, #1
   b52ee:	2008      	movs	r0, #8
   b52f0:	f004 f918 	bl	b9524 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b52f4:	b00e      	add	sp, #56	; 0x38
   b52f6:	bd70      	pop	{r4, r5, r6, pc}
        Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b52f8:	f004 f8ec 	bl	b94d4 <_Z16_fetch_usbserialv>
   b52fc:	4911      	ldr	r1, [pc, #68]	; (b5344 <setup+0x18c>)
   b52fe:	220d      	movs	r2, #13
   b5300:	f7fe ffc0 	bl	b4284 <_ZN5Print6printfEPKcz>
        CALCULATE = true;
   b5304:	2301      	movs	r3, #1
   b5306:	702b      	strb	r3, [r5, #0]
   b5308:	e7e7      	b.n	b52da <setup+0x122>
   b530a:	bf00      	nop
   b530c:	2003d380 	.word	0x2003d380
   b5310:	000b42a1 	.word	0x000b42a1
   b5314:	000bd3d0 	.word	0x000bd3d0
   b5318:	000bd41b 	.word	0x000bd41b
   b531c:	000bd3d7 	.word	0x000bd3d7
   b5320:	2003e180 	.word	0x2003e180
   b5324:	2003e710 	.word	0x2003e710
   b5328:	000bd3f1 	.word	0x000bd3f1
   b532c:	000bd3f9 	.word	0x000bd3f9
   b5330:	2003d361 	.word	0x2003d361
   b5334:	000bd428 	.word	0x000bd428
   b5338:	000bd446 	.word	0x000bd446
   b533c:	2003d37c 	.word	0x2003d37c
   b5340:	000b40d1 	.word	0x000b40d1
   b5344:	000bd453 	.word	0x000bd453

000b5348 <loop>:
{
   b5348:	b570      	push	{r4, r5, r6, lr}
    if (GET_DATA)
   b534a:	4c56      	ldr	r4, [pc, #344]	; (b54a4 <loop+0x15c>)
   b534c:	7823      	ldrb	r3, [r4, #0]
{
   b534e:	b0c2      	sub	sp, #264	; 0x108
    if (GET_DATA)
   b5350:	b14b      	cbz	r3, b5366 <loop+0x1e>
        AWAITING_DATA = true;
   b5352:	4b55      	ldr	r3, [pc, #340]	; (b54a8 <loop+0x160>)
   b5354:	2201      	movs	r2, #1
   b5356:	701a      	strb	r2, [r3, #0]
        get_data_http(Time.day() + 1);
   b5358:	f003 fc4e 	bl	b8bf8 <_ZN9TimeClass3dayEv>
   b535c:	3001      	adds	r0, #1
   b535e:	f7ff fe03 	bl	b4f68 <_Z13get_data_httpi>
        GET_DATA = false;
   b5362:	2300      	movs	r3, #0
   b5364:	7023      	strb	r3, [r4, #0]
    if (CALCULATE)
   b5366:	4c51      	ldr	r4, [pc, #324]	; (b54ac <loop+0x164>)
   b5368:	4d51      	ldr	r5, [pc, #324]	; (b54b0 <loop+0x168>)
   b536a:	7823      	ldrb	r3, [r4, #0]
   b536c:	b333      	cbz	r3, b53bc <loop+0x74>
        update_JSON();
   b536e:	f7ff fa03 	bl	b4778 <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b5372:	4b50      	ldr	r3, [pc, #320]	; (b54b4 <loop+0x16c>)
   b5374:	4850      	ldr	r0, [pc, #320]	; (b54b8 <loop+0x170>)
   b5376:	6819      	ldr	r1, [r3, #0]
   b5378:	2218      	movs	r2, #24
   b537a:	f7ff f90d 	bl	b4598 <_Z8calc_lowPA2_iPdi>
   b537e:	4b4f      	ldr	r3, [pc, #316]	; (b54bc <loop+0x174>)
   b5380:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b5382:	f004 f8a7 	bl	b94d4 <_Z16_fetch_usbserialv>
   b5386:	4606      	mov	r6, r0
   b5388:	f003 fc12 	bl	b8bb0 <_ZN9TimeClass4hourEv>
   b538c:	9001      	str	r0, [sp, #4]
   b538e:	f003 fc1b 	bl	b8bc8 <_ZN9TimeClass6minuteEv>
   b5392:	9a01      	ldr	r2, [sp, #4]
   b5394:	494a      	ldr	r1, [pc, #296]	; (b54c0 <loop+0x178>)
   b5396:	4603      	mov	r3, r0
   b5398:	4630      	mov	r0, r6
   b539a:	f7fe ff73 	bl	b4284 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b539e:	2301      	movs	r3, #1
   b53a0:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b53a2:	2300      	movs	r3, #0
   b53a4:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b53a6:	4b45      	ldr	r3, [pc, #276]	; (b54bc <loop+0x174>)
   b53a8:	4843      	ldr	r0, [pc, #268]	; (b54b8 <loop+0x170>)
   b53aa:	6819      	ldr	r1, [r3, #0]
   b53ac:	f7ff fbf6 	bl	b4b9c <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b53b0:	4b44      	ldr	r3, [pc, #272]	; (b54c4 <loop+0x17c>)
   b53b2:	2201      	movs	r2, #1
   b53b4:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b53b6:	2300      	movs	r3, #0
   b53b8:	702b      	strb	r3, [r5, #0]
   b53ba:	e002      	b.n	b53c2 <loop+0x7a>
    if (TRANSMIT_PRICE)
   b53bc:	782b      	ldrb	r3, [r5, #0]
   b53be:	2b00      	cmp	r3, #0
   b53c0:	d1f1      	bne.n	b53a6 <loop+0x5e>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b53c2:	4d41      	ldr	r5, [pc, #260]	; (b54c8 <loop+0x180>)
   b53c4:	782b      	ldrb	r3, [r5, #0]
   b53c6:	b1db      	cbz	r3, b5400 <loop+0xb8>
        Serial.printf("Received power/get\n");
   b53c8:	f004 f884 	bl	b94d4 <_Z16_fetch_usbserialv>
   b53cc:	493f      	ldr	r1, [pc, #252]	; (b54cc <loop+0x184>)
   b53ce:	f7fe ff59 	bl	b4284 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b53d2:	4b3f      	ldr	r3, [pc, #252]	; (b54d0 <loop+0x188>)
   b53d4:	681e      	ldr	r6, [r3, #0]
   b53d6:	f003 fbeb 	bl	b8bb0 <_ZN9TimeClass4hourEv>
   b53da:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b53de:	493d      	ldr	r1, [pc, #244]	; (b54d4 <loop+0x18c>)
        wh_today[Time.hour()] += 1;
   b53e0:	3301      	adds	r3, #1
   b53e2:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b53e6:	4b3c      	ldr	r3, [pc, #240]	; (b54d8 <loop+0x190>)
   b53e8:	a802      	add	r0, sp, #8
   b53ea:	681a      	ldr	r2, [r3, #0]
   b53ec:	f001 fe3e 	bl	b706c <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b53f0:	2300      	movs	r3, #0
   b53f2:	483a      	ldr	r0, [pc, #232]	; (b54dc <loop+0x194>)
   b53f4:	22ff      	movs	r2, #255	; 0xff
   b53f6:	a902      	add	r1, sp, #8
   b53f8:	f002 fae4 	bl	b79c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        TRANSMIT_SENSOR = false;
   b53fc:	2300      	movs	r3, #0
   b53fe:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b5400:	4d37      	ldr	r5, [pc, #220]	; (b54e0 <loop+0x198>)
   b5402:	782b      	ldrb	r3, [r5, #0]
   b5404:	b12b      	cbz	r3, b5412 <loop+0xca>
        rotate_prices();
   b5406:	f7ff fb8f 	bl	b4b28 <_Z13rotate_pricesv>
        ROTATE = false;
   b540a:	2300      	movs	r3, #0
   b540c:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b540e:	2301      	movs	r3, #1
   b5410:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b5412:	4c34      	ldr	r4, [pc, #208]	; (b54e4 <loop+0x19c>)
   b5414:	7823      	ldrb	r3, [r4, #0]
   b5416:	b11b      	cbz	r3, b5420 <loop+0xd8>
        hourly_JSON_update();
   b5418:	f7ff f97c 	bl	b4714 <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b541c:	2300      	movs	r3, #0
   b541e:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 3000))
   b5420:	4c31      	ldr	r4, [pc, #196]	; (b54e8 <loop+0x1a0>)
   b5422:	7825      	ldrb	r5, [r4, #0]
   b5424:	f001 fb1c 	bl	b6a60 <HAL_Timer_Get_Milli_Seconds>
   b5428:	4b30      	ldr	r3, [pc, #192]	; (b54ec <loop+0x1a4>)
   b542a:	681b      	ldr	r3, [r3, #0]
   b542c:	1ac0      	subs	r0, r0, r3
   b542e:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b5432:	4298      	cmp	r0, r3
   b5434:	d92e      	bls.n	b5494 <loop+0x14c>
   b5436:	b36d      	cbz	r5, b5494 <loop+0x14c>
        update_JSON();
   b5438:	f7ff f99e 	bl	b4778 <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b543c:	4b26      	ldr	r3, [pc, #152]	; (b54d8 <loop+0x190>)
   b543e:	4925      	ldr	r1, [pc, #148]	; (b54d4 <loop+0x18c>)
   b5440:	681a      	ldr	r2, [r3, #0]
   b5442:	a802      	add	r0, sp, #8
   b5444:	f001 fe12 	bl	b706c <sprintf>
   b5448:	2300      	movs	r3, #0
   b544a:	22ff      	movs	r2, #255	; 0xff
   b544c:	a902      	add	r1, sp, #8
   b544e:	4823      	ldr	r0, [pc, #140]	; (b54dc <loop+0x194>)
   b5450:	f002 fab8 	bl	b79c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b5454:	4926      	ldr	r1, [pc, #152]	; (b54f0 <loop+0x1a8>)
   b5456:	4827      	ldr	r0, [pc, #156]	; (b54f4 <loop+0x1ac>)
   b5458:	2200      	movs	r2, #0
   b545a:	f002 fb13 	bl	b7a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b545e:	4926      	ldr	r1, [pc, #152]	; (b54f8 <loop+0x1b0>)
   b5460:	4826      	ldr	r0, [pc, #152]	; (b54fc <loop+0x1b4>)
   b5462:	2200      	movs	r2, #0
   b5464:	f002 fb0e 	bl	b7a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b5468:	4925      	ldr	r1, [pc, #148]	; (b5500 <loop+0x1b8>)
   b546a:	4826      	ldr	r0, [pc, #152]	; (b5504 <loop+0x1bc>)
   b546c:	2200      	movs	r2, #0
   b546e:	f002 fb09 	bl	b7a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b5472:	4925      	ldr	r1, [pc, #148]	; (b5508 <loop+0x1c0>)
   b5474:	4825      	ldr	r0, [pc, #148]	; (b550c <loop+0x1c4>)
   b5476:	2200      	movs	r2, #0
   b5478:	f002 fb04 	bl	b7a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b547c:	4924      	ldr	r1, [pc, #144]	; (b5510 <loop+0x1c8>)
   b547e:	4825      	ldr	r0, [pc, #148]	; (b5514 <loop+0x1cc>)
   b5480:	2200      	movs	r2, #0
   b5482:	f002 faff 	bl	b7a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b5486:	2300      	movs	r3, #0
   b5488:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b548a:	f004 f823 	bl	b94d4 <_Z16_fetch_usbserialv>
   b548e:	4922      	ldr	r1, [pc, #136]	; (b5518 <loop+0x1d0>)
   b5490:	f7fe fef8 	bl	b4284 <_ZN5Print6printfEPKcz>
    delay(1000);
   b5494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b5498:	b042      	add	sp, #264	; 0x108
   b549a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
   b549e:	f003 bbd5 	b.w	b8c4c <delay>
   b54a2:	bf00      	nop
   b54a4:	2003d37c 	.word	0x2003d37c
   b54a8:	2003d360 	.word	0x2003d360
   b54ac:	2003d361 	.word	0x2003d361
   b54b0:	2003d381 	.word	0x2003d381
   b54b4:	2003d498 	.word	0x2003d498
   b54b8:	2003d430 	.word	0x2003d430
   b54bc:	2003d490 	.word	0x2003d490
   b54c0:	000bd3d7 	.word	0x000bd3d7
   b54c4:	2003d37f 	.word	0x2003d37f
   b54c8:	2003d382 	.word	0x2003d382
   b54cc:	000bd484 	.word	0x000bd484
   b54d0:	2003e19c 	.word	0x2003e19c
   b54d4:	000bd498 	.word	0x000bd498
   b54d8:	2003d494 	.word	0x2003d494
   b54dc:	2003d384 	.word	0x2003d384
   b54e0:	2003d37e 	.word	0x2003d37e
   b54e4:	2003d383 	.word	0x2003d383
   b54e8:	2003d37d 	.word	0x2003d37d
   b54ec:	2003dce8 	.word	0x2003dce8
   b54f0:	2003dd0c 	.word	0x2003dd0c
   b54f4:	2003d374 	.word	0x2003d374
   b54f8:	2003dcec 	.word	0x2003dcec
   b54fc:	2003d364 	.word	0x2003d364
   b5500:	2003dcfc 	.word	0x2003dcfc
   b5504:	2003d36c 	.word	0x2003d36c
   b5508:	2003e1b4 	.word	0x2003e1b4
   b550c:	2003d394 	.word	0x2003d394
   b5510:	2003e1a0 	.word	0x2003e1a0
   b5514:	2003d38c 	.word	0x2003d38c
   b5518:	000bd4a4 	.word	0x000bd4a4

000b551c <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b551c:	b570      	push	{r4, r5, r6, lr}
   b551e:	4604      	mov	r4, r0
   b5520:	4605      	mov	r5, r0
   b5522:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5526:	4628      	mov	r0, r5
   b5528:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b552c:	f000 f815 	bl	b555a <_ZN12mDNSResolver8ResponseC1Ev>
   b5530:	42ae      	cmp	r6, r5
   b5532:	d1f8      	bne.n	b5526 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b5534:	2300      	movs	r3, #0
   b5536:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b553a:	4620      	mov	r0, r4
   b553c:	bd70      	pop	{r4, r5, r6, pc}

000b553e <_ZN9IPAddressaSImEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b553e:	b530      	push	{r4, r5, lr}
   b5540:	b087      	sub	sp, #28
   b5542:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5544:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5546:	4668      	mov	r0, sp
   b5548:	f003 ff2e 	bl	b93a8 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b554c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b554e:	3404      	adds	r4, #4
   b5550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5552:	682b      	ldr	r3, [r5, #0]
   b5554:	7023      	strb	r3, [r4, #0]
    }
   b5556:	b007      	add	sp, #28
   b5558:	bd30      	pop	{r4, r5, pc}

000b555a <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b555a:	b538      	push	{r3, r4, r5, lr}
   b555c:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b5560:	4604      	mov	r4, r0
   b5562:	4628      	mov	r0, r5
   b5564:	f003 ff00 	bl	b9368 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b5568:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b556a:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b556c:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b556e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b5572:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b5576:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b557a:	f04f 31ff 	mov.w	r1, #4294967295
   b557e:	f7ff ffde 	bl	b553e <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b5582:	4620      	mov	r0, r4
   b5584:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5588 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
#ifdef TEST
#include <stdlib.h>
#endif

namespace mDNSResolver {
  Cache cache;
   b5588:	4801      	ldr	r0, [pc, #4]	; (b5590 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b558a:	f7ff bfc7 	b.w	b551c <_ZN12mDNSResolver5CacheC1Ev>
   b558e:	bf00      	nop
   b5590:	2003e1c4 	.word	0x2003e1c4

000b5594 <parse_hex4>:
static unsigned parse_hex4(const unsigned char * const input)
{
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
   b5594:	2200      	movs	r2, #0
{
   b5596:	b510      	push	{r4, lr}
   b5598:	4604      	mov	r4, r0
    unsigned int h = 0;
   b559a:	4610      	mov	r0, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
   b559c:	5ca1      	ldrb	r1, [r4, r2]
   b559e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   b55a2:	2b09      	cmp	r3, #9
   b55a4:	d80b      	bhi.n	b55be <parse_hex4+0x2a>
        {
            h += (unsigned int) input[i] - '0';
   b55a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
   b55aa:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   b55ac:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   b55b0:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
   b55b4:	bf18      	it	ne
   b55b6:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   b55b8:	2a04      	cmp	r2, #4
   b55ba:	d1ef      	bne.n	b559c <parse_hex4+0x8>
        }
    }

    return h;
}
   b55bc:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   b55be:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   b55c2:	2b05      	cmp	r3, #5
   b55c4:	d802      	bhi.n	b55cc <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   b55c6:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   b55ca:	e7ee      	b.n	b55aa <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   b55cc:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   b55d0:	2b05      	cmp	r3, #5
   b55d2:	d802      	bhi.n	b55da <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   b55d4:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   b55d8:	e7e7      	b.n	b55aa <parse_hex4+0x16>
            return 0;
   b55da:	2000      	movs	r0, #0
   b55dc:	e7ee      	b.n	b55bc <parse_hex4+0x28>
	...

000b55e0 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
   b55e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b55e4:	680a      	ldr	r2, [r1, #0]
   b55e6:	688b      	ldr	r3, [r1, #8]
{
   b55e8:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b55ea:	1c5d      	adds	r5, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
   b55ec:	18d0      	adds	r0, r2, r3
   b55ee:	5cd3      	ldrb	r3, [r2, r3]
   b55f0:	2b22      	cmp	r3, #34	; 0x22
{
   b55f2:	468a      	mov	sl, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b55f4:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   b55f6:	f040 80dd 	bne.w	b57b4 <parse_string+0x1d4>

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   b55fa:	684c      	ldr	r4, [r1, #4]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   b55fc:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   b55fe:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   b5600:	1ab9      	subs	r1, r7, r2
   b5602:	42a1      	cmp	r1, r4
   b5604:	f080 80d6 	bcs.w	b57b4 <parse_string+0x1d4>
   b5608:	7839      	ldrb	r1, [r7, #0]
   b560a:	2922      	cmp	r1, #34	; 0x22
   b560c:	d10e      	bne.n	b562c <parse_string+0x4c>
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   b560e:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   b5612:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   b5614:	f8da 2010 	ldr.w	r2, [sl, #16]
   b5618:	4418      	add	r0, r3
   b561a:	4790      	blx	r2
        if (output == NULL)
   b561c:	4683      	mov	fp, r0
   b561e:	2800      	cmp	r0, #0
   b5620:	f000 80c8 	beq.w	b57b4 <parse_string+0x1d4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   b5624:	f8df 9198 	ldr.w	r9, [pc, #408]	; b57c0 <parse_string+0x1e0>
   b5628:	4604      	mov	r4, r0
   b562a:	e00f      	b.n	b564c <parse_string+0x6c>
            if (input_end[0] == '\\')
   b562c:	295c      	cmp	r1, #92	; 0x5c
   b562e:	d105      	bne.n	b563c <parse_string+0x5c>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   b5630:	3701      	adds	r7, #1
   b5632:	1ab9      	subs	r1, r7, r2
   b5634:	428c      	cmp	r4, r1
   b5636:	f240 80bd 	bls.w	b57b4 <parse_string+0x1d4>
                skipped_bytes++;
   b563a:	3301      	adds	r3, #1
            input_end++;
   b563c:	3701      	adds	r7, #1
   b563e:	e7df      	b.n	b5600 <parse_string+0x20>

    output_pointer = output;
    /* loop through the string literal */
    while (input_pointer < input_end)
    {
        if (*input_pointer != '\\')
   b5640:	782b      	ldrb	r3, [r5, #0]
   b5642:	2b5c      	cmp	r3, #92	; 0x5c
   b5644:	d012      	beq.n	b566c <parse_string+0x8c>
        {
            *output_pointer++ = *input_pointer++;
   b5646:	f804 3b01 	strb.w	r3, [r4], #1
   b564a:	3501      	adds	r5, #1
    while (input_pointer < input_end)
   b564c:	42bd      	cmp	r5, r7
   b564e:	d3f7      	bcc.n	b5640 <parse_string+0x60>
            input_pointer += sequence_length;
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
   b5650:	2300      	movs	r3, #0
   b5652:	7023      	strb	r3, [r4, #0]

    item->type = cJSON_String;
   b5654:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
   b5656:	e9c8 3b03 	strd	r3, fp, [r8, #12]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   b565a:	f8da 3000 	ldr.w	r3, [sl]
   b565e:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
   b5660:	3301      	adds	r3, #1
   b5662:	f8ca 3008 	str.w	r3, [sl, #8]

    return true;
   b5666:	2001      	movs	r0, #1
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
}
   b5668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   b566c:	1b7a      	subs	r2, r7, r5
   b566e:	2a00      	cmp	r2, #0
   b5670:	dd0d      	ble.n	b568e <parse_string+0xae>
            switch (input_pointer[1])
   b5672:	786b      	ldrb	r3, [r5, #1]
   b5674:	2b75      	cmp	r3, #117	; 0x75
   b5676:	d80a      	bhi.n	b568e <parse_string+0xae>
   b5678:	2b6d      	cmp	r3, #109	; 0x6d
   b567a:	d812      	bhi.n	b56a2 <parse_string+0xc2>
   b567c:	2b62      	cmp	r3, #98	; 0x62
   b567e:	d02b      	beq.n	b56d8 <parse_string+0xf8>
   b5680:	d826      	bhi.n	b56d0 <parse_string+0xf0>
   b5682:	2b2f      	cmp	r3, #47	; 0x2f
   b5684:	d029      	beq.n	b56da <parse_string+0xfa>
   b5686:	2b5c      	cmp	r3, #92	; 0x5c
   b5688:	d027      	beq.n	b56da <parse_string+0xfa>
   b568a:	2b22      	cmp	r3, #34	; 0x22
   b568c:	d025      	beq.n	b56da <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   b568e:	f8da 3014 	ldr.w	r3, [sl, #20]
   b5692:	4658      	mov	r0, fp
   b5694:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   b5696:	f8da 0000 	ldr.w	r0, [sl]
   b569a:	1a28      	subs	r0, r5, r0
   b569c:	f8ca 0008 	str.w	r0, [sl, #8]
   b56a0:	e08b      	b.n	b57ba <parse_string+0x1da>
   b56a2:	3b6e      	subs	r3, #110	; 0x6e
   b56a4:	2b07      	cmp	r3, #7
   b56a6:	d8f2      	bhi.n	b568e <parse_string+0xae>
   b56a8:	a101      	add	r1, pc, #4	; (adr r1, b56b0 <parse_string+0xd0>)
   b56aa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   b56ae:	bf00      	nop
   b56b0:	000b56e5 	.word	0x000b56e5
   b56b4:	000b568f 	.word	0x000b568f
   b56b8:	000b568f 	.word	0x000b568f
   b56bc:	000b568f 	.word	0x000b568f
   b56c0:	000b56e9 	.word	0x000b56e9
   b56c4:	000b568f 	.word	0x000b568f
   b56c8:	000b56ed 	.word	0x000b56ed
   b56cc:	000b56f1 	.word	0x000b56f1
            switch (input_pointer[1])
   b56d0:	2b66      	cmp	r3, #102	; 0x66
   b56d2:	d1dc      	bne.n	b568e <parse_string+0xae>
                    *output_pointer++ = '\f';
   b56d4:	230c      	movs	r3, #12
   b56d6:	e000      	b.n	b56da <parse_string+0xfa>
                    *output_pointer++ = '\b';
   b56d8:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   b56da:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   b56de:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   b56e0:	441d      	add	r5, r3
   b56e2:	e7b3      	b.n	b564c <parse_string+0x6c>
                    *output_pointer++ = '\n';
   b56e4:	230a      	movs	r3, #10
   b56e6:	e7f8      	b.n	b56da <parse_string+0xfa>
                    *output_pointer++ = '\r';
   b56e8:	230d      	movs	r3, #13
   b56ea:	e7f6      	b.n	b56da <parse_string+0xfa>
                    *output_pointer++ = '\t';
   b56ec:	2309      	movs	r3, #9
   b56ee:	e7f4      	b.n	b56da <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   b56f0:	2a05      	cmp	r2, #5
   b56f2:	ddcc      	ble.n	b568e <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   b56f4:	1ca8      	adds	r0, r5, #2
   b56f6:	f7ff ff4d 	bl	b5594 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   b56fa:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   b56fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   b5702:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   b5704:	d3c3      	bcc.n	b568e <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   b5706:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   b570a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b570e:	d22d      	bcs.n	b576c <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   b5710:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   b5712:	1afb      	subs	r3, r7, r3
   b5714:	2b05      	cmp	r3, #5
   b5716:	ddba      	ble.n	b568e <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   b5718:	79ab      	ldrb	r3, [r5, #6]
   b571a:	2b5c      	cmp	r3, #92	; 0x5c
   b571c:	d1b7      	bne.n	b568e <parse_string+0xae>
   b571e:	79eb      	ldrb	r3, [r5, #7]
   b5720:	2b75      	cmp	r3, #117	; 0x75
   b5722:	d1b4      	bne.n	b568e <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   b5724:	f105 0008 	add.w	r0, r5, #8
   b5728:	f7ff ff34 	bl	b5594 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   b572c:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   b5730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   b5734:	d2ab      	bcs.n	b568e <parse_string+0xae>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   b5736:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   b573a:	f3c0 0009 	ubfx	r0, r0, #0, #10
   b573e:	4330      	orrs	r0, r6
   b5740:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
   b5744:	230c      	movs	r3, #12
        first_byte_mark = 0xF0; /* 11110000 */
   b5746:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   b574a:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b574c:	f100 3eff 	add.w	lr, r0, #4294967295
   b5750:	fa54 fe8e 	uxtab	lr, r4, lr
   b5754:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   b5756:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b5758:	d124      	bne.n	b57a4 <parse_string+0x1c4>
    if (utf8_length > 1)
   b575a:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   b575c:	bf14      	ite	ne
   b575e:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   b5762:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   b5766:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   b5768:	4404      	add	r4, r0
                    if (sequence_length == 0)
   b576a:	e7b9      	b.n	b56e0 <parse_string+0x100>
    if (codepoint < 0x80)
   b576c:	287f      	cmp	r0, #127	; 0x7f
   b576e:	d90a      	bls.n	b5786 <parse_string+0x1a6>
    else if (codepoint < 0x800)
   b5770:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   b5774:	d30c      	bcc.n	b5790 <parse_string+0x1b0>
    else if (codepoint < 0x10000)
   b5776:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   b577a:	d30e      	bcc.n	b579a <parse_string+0x1ba>
    else if (codepoint <= 0x10FFFF)
   b577c:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   b5780:	d285      	bcs.n	b568e <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   b5782:	2306      	movs	r3, #6
   b5784:	e7df      	b.n	b5746 <parse_string+0x166>
   b5786:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   b5788:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   b578c:	2001      	movs	r0, #1
   b578e:	e7dd      	b.n	b574c <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   b5790:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   b5792:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   b5796:	2002      	movs	r0, #2
   b5798:	e7d8      	b.n	b574c <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   b579a:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   b579c:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   b57a0:	2003      	movs	r0, #3
   b57a2:	e7d3      	b.n	b574c <parse_string+0x16c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   b57a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   b57a8:	f062 017f 	orn	r1, r2, #127	; 0x7f
   b57ac:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
   b57b0:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   b57b2:	e7cf      	b.n	b5754 <parse_string+0x174>
    if (input_pointer != NULL)
   b57b4:	2d00      	cmp	r5, #0
   b57b6:	f47f af6e 	bne.w	b5696 <parse_string+0xb6>
    return false;
   b57ba:	2000      	movs	r0, #0
   b57bc:	e754      	b.n	b5668 <parse_string+0x88>
   b57be:	bf00      	nop
   b57c0:	000ffc00 	.word	0x000ffc00

000b57c4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
   b57c4:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   b57c6:	b140      	cbz	r0, b57da <buffer_skip_whitespace+0x16>
   b57c8:	6801      	ldr	r1, [r0, #0]
   b57ca:	b171      	cbz	r1, b57ea <buffer_skip_whitespace+0x26>
    {
        return NULL;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   b57cc:	6842      	ldr	r2, [r0, #4]
   b57ce:	6883      	ldr	r3, [r0, #8]
   b57d0:	4293      	cmp	r3, r2
   b57d2:	d206      	bcs.n	b57e2 <buffer_skip_whitespace+0x1e>
   b57d4:	5ccc      	ldrb	r4, [r1, r3]
   b57d6:	2c20      	cmp	r4, #32
   b57d8:	d900      	bls.n	b57dc <buffer_skip_whitespace+0x18>
    {
        buffer->offset--;
    }

    return buffer;
}
   b57da:	bd10      	pop	{r4, pc}
       buffer->offset++;
   b57dc:	3301      	adds	r3, #1
   b57de:	6083      	str	r3, [r0, #8]
   b57e0:	e7f5      	b.n	b57ce <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   b57e2:	d1fa      	bne.n	b57da <buffer_skip_whitespace+0x16>
        buffer->offset--;
   b57e4:	3a01      	subs	r2, #1
   b57e6:	6082      	str	r2, [r0, #8]
   b57e8:	e7f7      	b.n	b57da <buffer_skip_whitespace+0x16>
        return NULL;
   b57ea:	4608      	mov	r0, r1
   b57ec:	e7f5      	b.n	b57da <buffer_skip_whitespace+0x16>

000b57ee <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
    cJSON *current_child = NULL;

    if (array == NULL)
   b57ee:	b110      	cbz	r0, b57f6 <get_array_item+0x8>
    {
        return NULL;
    }

    current_child = array->child;
   b57f0:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   b57f2:	b100      	cbz	r0, b57f6 <get_array_item+0x8>
   b57f4:	b901      	cbnz	r1, b57f8 <get_array_item+0xa>
        index--;
        current_child = current_child->next;
    }

    return current_child;
}
   b57f6:	4770      	bx	lr
        current_child = current_child->next;
   b57f8:	6800      	ldr	r0, [r0, #0]
        index--;
   b57fa:	3901      	subs	r1, #1
        current_child = current_child->next;
   b57fc:	e7f9      	b.n	b57f2 <get_array_item+0x4>

000b57fe <update_offset>:
{
   b57fe:	b538      	push	{r3, r4, r5, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   b5800:	4604      	mov	r4, r0
   b5802:	b138      	cbz	r0, b5814 <update_offset+0x16>
   b5804:	6800      	ldr	r0, [r0, #0]
   b5806:	b128      	cbz	r0, b5814 <update_offset+0x16>
    buffer_pointer = buffer->buffer + buffer->offset;
   b5808:	68a5      	ldr	r5, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   b580a:	4428      	add	r0, r5
   b580c:	f005 fb71 	bl	baef2 <strlen>
   b5810:	4428      	add	r0, r5
   b5812:	60a0      	str	r0, [r4, #8]
}
   b5814:	bd38      	pop	{r3, r4, r5, pc}

000b5816 <ensure>:
{
   b5816:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   b5818:	4604      	mov	r4, r0
   b581a:	b1b8      	cbz	r0, b584c <ensure+0x36>
   b581c:	6805      	ldr	r5, [r0, #0]
   b581e:	b165      	cbz	r5, b583a <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   b5820:	6843      	ldr	r3, [r0, #4]
   b5822:	b113      	cbz	r3, b582a <ensure+0x14>
   b5824:	6882      	ldr	r2, [r0, #8]
   b5826:	4293      	cmp	r3, r2
   b5828:	d910      	bls.n	b584c <ensure+0x36>
    if (needed > INT_MAX)
   b582a:	2900      	cmp	r1, #0
   b582c:	db0e      	blt.n	b584c <ensure+0x36>
    needed += p->offset + 1;
   b582e:	68a2      	ldr	r2, [r4, #8]
   b5830:	1c4e      	adds	r6, r1, #1
   b5832:	4416      	add	r6, r2
    if (needed <= p->length)
   b5834:	42b3      	cmp	r3, r6
   b5836:	d302      	bcc.n	b583e <ensure+0x28>
        return p->buffer + p->offset;
   b5838:	4415      	add	r5, r2
}
   b583a:	4628      	mov	r0, r5
   b583c:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   b583e:	6923      	ldr	r3, [r4, #16]
   b5840:	b923      	cbnz	r3, b584c <ensure+0x36>
    if (needed > (INT_MAX / 2))
   b5842:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   b5846:	d303      	bcc.n	b5850 <ensure+0x3a>
        if (needed <= INT_MAX)
   b5848:	2e00      	cmp	r6, #0
   b584a:	da0f      	bge.n	b586c <ensure+0x56>
        return NULL;
   b584c:	2500      	movs	r5, #0
   b584e:	e7f4      	b.n	b583a <ensure+0x24>
        newsize = needed * 2;
   b5850:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   b5852:	6a23      	ldr	r3, [r4, #32]
   b5854:	b16b      	cbz	r3, b5872 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   b5856:	4628      	mov	r0, r5
   b5858:	4631      	mov	r1, r6
   b585a:	4798      	blx	r3
        if (newbuffer == NULL)
   b585c:	4605      	mov	r5, r0
   b585e:	b9b0      	cbnz	r0, b588e <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   b5860:	69e3      	ldr	r3, [r4, #28]
   b5862:	6820      	ldr	r0, [r4, #0]
   b5864:	4798      	blx	r3
            p->buffer = NULL;
   b5866:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   b586a:	e7e6      	b.n	b583a <ensure+0x24>
            newsize = INT_MAX;
   b586c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   b5870:	e7ef      	b.n	b5852 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   b5872:	69a3      	ldr	r3, [r4, #24]
   b5874:	4630      	mov	r0, r6
   b5876:	4798      	blx	r3
        if (!newbuffer)
   b5878:	4605      	mov	r5, r0
   b587a:	2800      	cmp	r0, #0
   b587c:	d0f0      	beq.n	b5860 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   b587e:	68a2      	ldr	r2, [r4, #8]
   b5880:	6821      	ldr	r1, [r4, #0]
   b5882:	3201      	adds	r2, #1
   b5884:	f005 fa97 	bl	badb6 <memcpy>
        p->hooks.deallocate(p->buffer);
   b5888:	69e3      	ldr	r3, [r4, #28]
   b588a:	6820      	ldr	r0, [r4, #0]
   b588c:	4798      	blx	r3
    return newbuffer + p->offset;
   b588e:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   b5890:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   b5894:	441d      	add	r5, r3
   b5896:	e7d0      	b.n	b583a <ensure+0x24>

000b5898 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
   b5898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b589a:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
   b589c:	4604      	mov	r4, r0
   b589e:	2800      	cmp	r0, #0
   b58a0:	d034      	beq.n	b590c <get_object_item+0x74>
   b58a2:	2900      	cmp	r1, #0
   b58a4:	d031      	beq.n	b590a <get_object_item+0x72>
    {
        return NULL;
    }

    current_element = object->child;
   b58a6:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   b58a8:	b9fa      	cbnz	r2, b58ea <get_object_item+0x52>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   b58aa:	4e19      	ldr	r6, [pc, #100]	; (b5910 <get_object_item+0x78>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   b58ac:	b374      	cbz	r4, b590c <get_object_item+0x74>
   b58ae:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   b58b0:	b1c3      	cbz	r3, b58e4 <get_object_item+0x4c>
    if (string1 == string2)
   b58b2:	42ab      	cmp	r3, r5
   b58b4:	d021      	beq.n	b58fa <get_object_item+0x62>
   b58b6:	f105 3cff 	add.w	ip, r5, #4294967295
   b58ba:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   b58bc:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   b58c0:	5d8a      	ldrb	r2, [r1, r6]
   b58c2:	f002 0203 	and.w	r2, r2, #3
   b58c6:	2a01      	cmp	r2, #1
   b58c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   b58cc:	5cb0      	ldrb	r0, [r6, r2]
   b58ce:	f000 0003 	and.w	r0, r0, #3
   b58d2:	460f      	mov	r7, r1
   b58d4:	bf08      	it	eq
   b58d6:	f101 0720 	addeq.w	r7, r1, #32
   b58da:	2801      	cmp	r0, #1
   b58dc:	bf08      	it	eq
   b58de:	3220      	addeq	r2, #32
   b58e0:	4297      	cmp	r7, r2
   b58e2:	d00f      	beq.n	b5904 <get_object_item+0x6c>
        {
            current_element = current_element->next;
   b58e4:	6824      	ldr	r4, [r4, #0]
   b58e6:	e7e1      	b.n	b58ac <get_object_item+0x14>
            current_element = current_element->next;
   b58e8:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   b58ea:	b17c      	cbz	r4, b590c <get_object_item+0x74>
   b58ec:	6a21      	ldr	r1, [r4, #32]
   b58ee:	b121      	cbz	r1, b58fa <get_object_item+0x62>
   b58f0:	4628      	mov	r0, r5
   b58f2:	f005 face 	bl	bae92 <strcmp>
   b58f6:	2800      	cmp	r0, #0
   b58f8:	d1f6      	bne.n	b58e8 <get_object_item+0x50>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
   b58fa:	6a23      	ldr	r3, [r4, #32]
        return NULL;
   b58fc:	2b00      	cmp	r3, #0
   b58fe:	bf08      	it	eq
   b5900:	2400      	moveq	r4, #0
   b5902:	e003      	b.n	b590c <get_object_item+0x74>
        if (*string1 == '\0')
   b5904:	2900      	cmp	r1, #0
   b5906:	d1d9      	bne.n	b58bc <get_object_item+0x24>
   b5908:	e7f7      	b.n	b58fa <get_object_item+0x62>
        return NULL;
   b590a:	460c      	mov	r4, r1
        return NULL;
    }

    return current_element;
}
   b590c:	4620      	mov	r0, r4
   b590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5910:	000bdba6 	.word	0x000bdba6

000b5914 <add_item_to_array>:

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
    cJSON *child = NULL;

    if ((item == NULL) || (array == NULL))
   b5914:	b161      	cbz	r1, b5930 <add_item_to_array+0x1c>
   b5916:	b160      	cbz	r0, b5932 <add_item_to_array+0x1e>
    {
        return false;
    }

    child = array->child;
   b5918:	6883      	ldr	r3, [r0, #8]

    if (child == NULL)
   b591a:	b913      	cbnz	r3, b5922 <add_item_to_array+0xe>
    {
        /* list is empty, start new one */
        array->child = item;
   b591c:	6081      	str	r1, [r0, #8]
}
   b591e:	2001      	movs	r0, #1
   b5920:	4770      	bx	lr
    }
    else
    {
        /* append to the end */
        while (child->next)
   b5922:	461a      	mov	r2, r3
   b5924:	681b      	ldr	r3, [r3, #0]
   b5926:	2b00      	cmp	r3, #0
   b5928:	d1fb      	bne.n	b5922 <add_item_to_array+0xe>
    prev->next = item;
   b592a:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   b592c:	604a      	str	r2, [r1, #4]
   b592e:	e7f6      	b.n	b591e <add_item_to_array+0xa>
        return false;
   b5930:	4608      	mov	r0, r1
        }
        suffix_object(child, item);
    }

    return true;
}
   b5932:	4770      	bx	lr

000b5934 <print_string_ptr>:
{
   b5934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5938:	4606      	mov	r6, r0
    if (output_buffer == NULL)
   b593a:	4608      	mov	r0, r1
   b593c:	b911      	cbnz	r1, b5944 <print_string_ptr+0x10>
        return false;
   b593e:	2000      	movs	r0, #0
}
   b5940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   b5944:	b336      	cbz	r6, b5994 <print_string_ptr+0x60>
   b5946:	4f44      	ldr	r7, [pc, #272]	; (b5a58 <print_string_ptr+0x124>)
   b5948:	4631      	mov	r1, r6
    size_t escape_characters = 0;
   b594a:	f04f 0a00 	mov.w	sl, #0
   b594e:	2401      	movs	r4, #1
   b5950:	460d      	mov	r5, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   b5952:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5956:	bb3b      	cbnz	r3, b59a8 <print_string_ptr+0x74>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   b5958:	1bad      	subs	r5, r5, r6
   b595a:	4455      	add	r5, sl
    output = ensure(output_buffer, output_length + sizeof("\"\""));
   b595c:	1ce9      	adds	r1, r5, #3
   b595e:	f7ff ff5a 	bl	b5816 <ensure>
    if (output == NULL)
   b5962:	4607      	mov	r7, r0
   b5964:	2800      	cmp	r0, #0
   b5966:	d0ea      	beq.n	b593e <print_string_ptr+0xa>
    if (escape_characters == 0)
   b5968:	f04f 0b22 	mov.w	fp, #34	; 0x22
        memcpy(output + 1, input, output_length);
   b596c:	1c44      	adds	r4, r0, #1
        output[output_length + 1] = '\"';
   b596e:	f105 0901 	add.w	r9, r5, #1
        output[output_length + 2] = '\0';
   b5972:	f105 0802 	add.w	r8, r5, #2
        output[0] = '\"';
   b5976:	f880 b000 	strb.w	fp, [r0]
    if (escape_characters == 0)
   b597a:	f1ba 0f00 	cmp.w	sl, #0
   b597e:	d129      	bne.n	b59d4 <print_string_ptr+0xa0>
        memcpy(output + 1, input, output_length);
   b5980:	462a      	mov	r2, r5
   b5982:	4631      	mov	r1, r6
   b5984:	4620      	mov	r0, r4
   b5986:	f005 fa16 	bl	badb6 <memcpy>
        output[output_length + 1] = '\"';
   b598a:	f807 b009 	strb.w	fp, [r7, r9]
        output[output_length + 2] = '\0';
   b598e:	f807 a008 	strb.w	sl, [r7, r8]
        return true;
   b5992:	e007      	b.n	b59a4 <print_string_ptr+0x70>
        output = ensure(output_buffer, sizeof("\"\""));
   b5994:	2103      	movs	r1, #3
   b5996:	f7ff ff3e 	bl	b5816 <ensure>
        if (output == NULL)
   b599a:	2800      	cmp	r0, #0
   b599c:	d0cf      	beq.n	b593e <print_string_ptr+0xa>
        strcpy((char*)output, "\"\"");
   b599e:	492f      	ldr	r1, [pc, #188]	; (b5a5c <print_string_ptr+0x128>)
   b59a0:	f005 fa81 	bl	baea6 <strcpy>
    return true;
   b59a4:	2001      	movs	r0, #1
   b59a6:	e7cb      	b.n	b5940 <print_string_ptr+0xc>
        switch (*input_pointer)
   b59a8:	2b22      	cmp	r3, #34	; 0x22
   b59aa:	d80b      	bhi.n	b59c4 <print_string_ptr+0x90>
   b59ac:	2b07      	cmp	r3, #7
   b59ae:	d90c      	bls.n	b59ca <print_string_ptr+0x96>
   b59b0:	f1a3 0208 	sub.w	r2, r3, #8
   b59b4:	b2d2      	uxtb	r2, r2
   b59b6:	fa04 f202 	lsl.w	r2, r4, r2
   b59ba:	423a      	tst	r2, r7
   b59bc:	d005      	beq.n	b59ca <print_string_ptr+0x96>
                escape_characters++;
   b59be:	f10a 0a01 	add.w	sl, sl, #1
                break;
   b59c2:	e7c5      	b.n	b5950 <print_string_ptr+0x1c>
        switch (*input_pointer)
   b59c4:	2b5c      	cmp	r3, #92	; 0x5c
   b59c6:	d1c3      	bne.n	b5950 <print_string_ptr+0x1c>
   b59c8:	e7f9      	b.n	b59be <print_string_ptr+0x8a>
                if (*input_pointer < 32)
   b59ca:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   b59cc:	bf98      	it	ls
   b59ce:	f10a 0a05 	addls.w	sl, sl, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   b59d2:	e7bd      	b.n	b5950 <print_string_ptr+0x1c>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b59d4:	f8df b088 	ldr.w	fp, [pc, #136]	; b5a60 <print_string_ptr+0x12c>
   b59d8:	3e01      	subs	r6, #1
            *output_pointer++ = '\\';
   b59da:	255c      	movs	r5, #92	; 0x5c
                    *output_pointer = 't';
   b59dc:	f04f 0a74 	mov.w	sl, #116	; 0x74
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b59e0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   b59e4:	b92b      	cbnz	r3, b59f2 <print_string_ptr+0xbe>
    output[output_length + 1] = '\"';
   b59e6:	2222      	movs	r2, #34	; 0x22
   b59e8:	f807 2009 	strb.w	r2, [r7, r9]
    output[output_length + 2] = '\0';
   b59ec:	f807 3008 	strb.w	r3, [r7, r8]
   b59f0:	e7d8      	b.n	b59a4 <print_string_ptr+0x70>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   b59f2:	2b1f      	cmp	r3, #31
   b59f4:	d907      	bls.n	b5a06 <print_string_ptr+0xd2>
   b59f6:	2b22      	cmp	r3, #34	; 0x22
   b59f8:	d005      	beq.n	b5a06 <print_string_ptr+0xd2>
   b59fa:	2b5c      	cmp	r3, #92	; 0x5c
   b59fc:	d003      	beq.n	b5a06 <print_string_ptr+0xd2>
            *output_pointer = *input_pointer;
   b59fe:	7023      	strb	r3, [r4, #0]
   b5a00:	4620      	mov	r0, r4
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b5a02:	1c44      	adds	r4, r0, #1
   b5a04:	e7ec      	b.n	b59e0 <print_string_ptr+0xac>
            *output_pointer++ = '\\';
   b5a06:	4620      	mov	r0, r4
   b5a08:	f800 5b01 	strb.w	r5, [r0], #1
            switch (*input_pointer)
   b5a0c:	7832      	ldrb	r2, [r6, #0]
   b5a0e:	2a0d      	cmp	r2, #13
   b5a10:	d80a      	bhi.n	b5a28 <print_string_ptr+0xf4>
   b5a12:	2a07      	cmp	r2, #7
   b5a14:	d91a      	bls.n	b5a4c <print_string_ptr+0x118>
   b5a16:	f1a2 0308 	sub.w	r3, r2, #8
   b5a1a:	2b05      	cmp	r3, #5
   b5a1c:	d816      	bhi.n	b5a4c <print_string_ptr+0x118>
   b5a1e:	e8df f003 	tbb	[pc, r3]
   b5a22:	1209      	.short	0x1209
   b5a24:	100c150e 	.word	0x100c150e
   b5a28:	2a22      	cmp	r2, #34	; 0x22
   b5a2a:	d001      	beq.n	b5a30 <print_string_ptr+0xfc>
   b5a2c:	2a5c      	cmp	r2, #92	; 0x5c
   b5a2e:	d10d      	bne.n	b5a4c <print_string_ptr+0x118>
                    *output_pointer = '\"';
   b5a30:	7062      	strb	r2, [r4, #1]
                    break;
   b5a32:	e7e6      	b.n	b5a02 <print_string_ptr+0xce>
                    *output_pointer = 'b';
   b5a34:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 'f';
   b5a36:	7063      	strb	r3, [r4, #1]
                    break;
   b5a38:	e7e3      	b.n	b5a02 <print_string_ptr+0xce>
                    *output_pointer = 'f';
   b5a3a:	2366      	movs	r3, #102	; 0x66
   b5a3c:	e7fb      	b.n	b5a36 <print_string_ptr+0x102>
                    *output_pointer = 'n';
   b5a3e:	236e      	movs	r3, #110	; 0x6e
   b5a40:	e7f9      	b.n	b5a36 <print_string_ptr+0x102>
                    *output_pointer = 'r';
   b5a42:	2372      	movs	r3, #114	; 0x72
   b5a44:	e7f7      	b.n	b5a36 <print_string_ptr+0x102>
                    *output_pointer = 't';
   b5a46:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   b5a4a:	e7da      	b.n	b5a02 <print_string_ptr+0xce>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b5a4c:	4659      	mov	r1, fp
   b5a4e:	f001 fb0d 	bl	b706c <sprintf>
                    output_pointer += 4;
   b5a52:	1d60      	adds	r0, r4, #5
                    break;
   b5a54:	e7d5      	b.n	b5a02 <print_string_ptr+0xce>
   b5a56:	bf00      	nop
   b5a58:	04000037 	.word	0x04000037
   b5a5c:	000bd5fa 	.word	0x000bd5fa
   b5a60:	000bd5fd 	.word	0x000bd5fd

000b5a64 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   b5a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   b5a66:	4605      	mov	r5, r0
   b5a68:	b180      	cbz	r0, b5a8c <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   b5a6a:	f005 fa42 	bl	baef2 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   b5a6e:	4b08      	ldr	r3, [pc, #32]	; (b5a90 <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   b5a70:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   b5a72:	681b      	ldr	r3, [r3, #0]
   b5a74:	9201      	str	r2, [sp, #4]
   b5a76:	4610      	mov	r0, r2
   b5a78:	4798      	blx	r3
    if (copy == NULL)
   b5a7a:	4604      	mov	r4, r0
   b5a7c:	b118      	cbz	r0, b5a86 <cJSON_strdup.constprop.0+0x22>
    memcpy(copy, string, length);
   b5a7e:	9a01      	ldr	r2, [sp, #4]
   b5a80:	4629      	mov	r1, r5
   b5a82:	f005 f998 	bl	badb6 <memcpy>
}
   b5a86:	4620      	mov	r0, r4
   b5a88:	b003      	add	sp, #12
   b5a8a:	bd30      	pop	{r4, r5, pc}
        return NULL;
   b5a8c:	4604      	mov	r4, r0
   b5a8e:	e7fa      	b.n	b5a86 <cJSON_strdup.constprop.0+0x22>
   b5a90:	2003d174 	.word	0x2003d174

000b5a94 <add_item_to_object.constprop.0>:
#if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   b5a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a96:	460d      	mov	r5, r1
   b5a98:	4614      	mov	r4, r2
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL))
   b5a9a:	4607      	mov	r7, r0
   b5a9c:	b1f0      	cbz	r0, b5adc <add_item_to_object.constprop.0+0x48>
   b5a9e:	b1e9      	cbz	r1, b5adc <add_item_to_object.constprop.0+0x48>
   b5aa0:	b1e2      	cbz	r2, b5adc <add_item_to_object.constprop.0+0x48>
    {
        return false;
    }

    if (constant_key)
   b5aa2:	b193      	cbz	r3, b5aca <add_item_to_object.constprop.0+0x36>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
   b5aa4:	68d6      	ldr	r6, [r2, #12]
   b5aa6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b5aaa:	68e3      	ldr	r3, [r4, #12]
   b5aac:	059b      	lsls	r3, r3, #22
   b5aae:	d404      	bmi.n	b5aba <add_item_to_object.constprop.0+0x26>
   b5ab0:	6a20      	ldr	r0, [r4, #32]
   b5ab2:	b110      	cbz	r0, b5aba <add_item_to_object.constprop.0+0x26>
    {
        hooks->deallocate(item->string);
   b5ab4:	4b0a      	ldr	r3, [pc, #40]	; (b5ae0 <add_item_to_object.constprop.0+0x4c>)
   b5ab6:	685b      	ldr	r3, [r3, #4]
   b5ab8:	4798      	blx	r3
    }

    item->string = new_key;
   b5aba:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   b5abc:	60e6      	str	r6, [r4, #12]

    return add_item_to_array(object, item);
   b5abe:	4621      	mov	r1, r4
   b5ac0:	4638      	mov	r0, r7
}
   b5ac2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   b5ac6:	f7ff bf25 	b.w	b5914 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   b5aca:	4608      	mov	r0, r1
   b5acc:	f7ff ffca 	bl	b5a64 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   b5ad0:	4605      	mov	r5, r0
   b5ad2:	b118      	cbz	r0, b5adc <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   b5ad4:	68e6      	ldr	r6, [r4, #12]
   b5ad6:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   b5ada:	e7e6      	b.n	b5aaa <add_item_to_object.constprop.0+0x16>
}
   b5adc:	2000      	movs	r0, #0
   b5ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5ae0:	2003d174 	.word	0x2003d174

000b5ae4 <print_value>:
{
   b5ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5ae8:	460c      	mov	r4, r1
   b5aea:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   b5aec:	4606      	mov	r6, r0
   b5aee:	b908      	cbnz	r0, b5af4 <print_value+0x10>
    switch ((item->type) & 0xFF)
   b5af0:	2500      	movs	r5, #0
   b5af2:	e05d      	b.n	b5bb0 <print_value+0xcc>
    if ((item == NULL) || (output_buffer == NULL))
   b5af4:	2900      	cmp	r1, #0
   b5af6:	d0fb      	beq.n	b5af0 <print_value+0xc>
    switch ((item->type) & 0xFF)
   b5af8:	7b05      	ldrb	r5, [r0, #12]
   b5afa:	2d10      	cmp	r5, #16
   b5afc:	f000 80c1 	beq.w	b5c82 <print_value+0x19e>
   b5b00:	dc18      	bgt.n	b5b34 <print_value+0x50>
   b5b02:	1e6b      	subs	r3, r5, #1
   b5b04:	2b07      	cmp	r3, #7
   b5b06:	d8f3      	bhi.n	b5af0 <print_value+0xc>
   b5b08:	2b07      	cmp	r3, #7
   b5b0a:	d8f1      	bhi.n	b5af0 <print_value+0xc>
   b5b0c:	a201      	add	r2, pc, #4	; (adr r2, b5b14 <print_value+0x30>)
   b5b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   b5b12:	bf00      	nop
   b5b14:	000b5b9f 	.word	0x000b5b9f
   b5b18:	000b5bb9 	.word	0x000b5bb9
   b5b1c:	000b5af1 	.word	0x000b5af1
   b5b20:	000b5b89 	.word	0x000b5b89
   b5b24:	000b5af1 	.word	0x000b5af1
   b5b28:	000b5af1 	.word	0x000b5af1
   b5b2c:	000b5af1 	.word	0x000b5af1
   b5b30:	000b5bc9 	.word	0x000b5bc9
   b5b34:	2d40      	cmp	r5, #64	; 0x40
   b5b36:	f000 80d3 	beq.w	b5ce0 <print_value+0x1fc>
   b5b3a:	2d80      	cmp	r5, #128	; 0x80
   b5b3c:	f000 808d 	beq.w	b5c5a <print_value+0x176>
   b5b40:	2d20      	cmp	r5, #32
   b5b42:	d1d5      	bne.n	b5af0 <print_value+0xc>
            return print_array(item, output_buffer);
   b5b44:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   b5b46:	2101      	movs	r1, #1
   b5b48:	4620      	mov	r0, r4
   b5b4a:	f7ff fe64 	bl	b5816 <ensure>
    if (output_pointer == NULL)
   b5b4e:	2800      	cmp	r0, #0
   b5b50:	d0ce      	beq.n	b5af0 <print_value+0xc>
    *output_pointer = '[';
   b5b52:	235b      	movs	r3, #91	; 0x5b
   b5b54:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   b5b56:	68a3      	ldr	r3, [r4, #8]
   b5b58:	3301      	adds	r3, #1
   b5b5a:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   b5b5c:	68e3      	ldr	r3, [r4, #12]
   b5b5e:	3301      	adds	r3, #1
   b5b60:	60e3      	str	r3, [r4, #12]
            *output_pointer++ = ',';
   b5b62:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   b5b64:	f04f 0800 	mov.w	r8, #0
    while (current_element != NULL)
   b5b68:	2e00      	cmp	r6, #0
   b5b6a:	f040 8090 	bne.w	b5c8e <print_value+0x1aa>
    output_pointer = ensure(output_buffer, 2);
   b5b6e:	2102      	movs	r1, #2
   b5b70:	4620      	mov	r0, r4
   b5b72:	f7ff fe50 	bl	b5816 <ensure>
    if (output_pointer == NULL)
   b5b76:	2800      	cmp	r0, #0
   b5b78:	d0ba      	beq.n	b5af0 <print_value+0xc>
    *output_pointer++ = ']';
   b5b7a:	235d      	movs	r3, #93	; 0x5d
   b5b7c:	7003      	strb	r3, [r0, #0]
    *output_pointer = '\0';
   b5b7e:	7046      	strb	r6, [r0, #1]
    output_buffer->depth--;
   b5b80:	68e3      	ldr	r3, [r4, #12]
   b5b82:	3b01      	subs	r3, #1
   b5b84:	60e3      	str	r3, [r4, #12]
   b5b86:	e008      	b.n	b5b9a <print_value+0xb6>
            output = ensure(output_buffer, 5);
   b5b88:	2105      	movs	r1, #5
   b5b8a:	4620      	mov	r0, r4
   b5b8c:	f7ff fe43 	bl	b5816 <ensure>
            if (output == NULL)
   b5b90:	2800      	cmp	r0, #0
   b5b92:	d0ad      	beq.n	b5af0 <print_value+0xc>
            strcpy((char*)output, "null");
   b5b94:	49a1      	ldr	r1, [pc, #644]	; (b5e1c <print_value+0x338>)
            strcpy((char*)output, "true");
   b5b96:	f005 f986 	bl	baea6 <strcpy>
    return true;
   b5b9a:	2501      	movs	r5, #1
   b5b9c:	e008      	b.n	b5bb0 <print_value+0xcc>
            output = ensure(output_buffer, 6);
   b5b9e:	2106      	movs	r1, #6
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	f7ff fe38 	bl	b5816 <ensure>
            if (output == NULL)
   b5ba6:	2800      	cmp	r0, #0
   b5ba8:	d0a2      	beq.n	b5af0 <print_value+0xc>
            strcpy((char*)output, "false");
   b5baa:	499d      	ldr	r1, [pc, #628]	; (b5e20 <print_value+0x33c>)
   b5bac:	f005 f97b 	bl	baea6 <strcpy>
}
   b5bb0:	4628      	mov	r0, r5
   b5bb2:	b00d      	add	sp, #52	; 0x34
   b5bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            output = ensure(output_buffer, 5);
   b5bb8:	2105      	movs	r1, #5
   b5bba:	4620      	mov	r0, r4
   b5bbc:	f7ff fe2b 	bl	b5816 <ensure>
            if (output == NULL)
   b5bc0:	2800      	cmp	r0, #0
   b5bc2:	d095      	beq.n	b5af0 <print_value+0xc>
            strcpy((char*)output, "true");
   b5bc4:	4997      	ldr	r1, [pc, #604]	; (b5e24 <print_value+0x340>)
   b5bc6:	e7e6      	b.n	b5b96 <print_value+0xb2>
    double d = item->valuedouble;
   b5bc8:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    if ((d * 0) != 0)
   b5bcc:	2200      	movs	r2, #0
   b5bce:	2300      	movs	r3, #0
   b5bd0:	4630      	mov	r0, r6
   b5bd2:	4639      	mov	r1, r7
   b5bd4:	f004 fd9e 	bl	ba714 <__aeabi_dmul>
   b5bd8:	2200      	movs	r2, #0
   b5bda:	2300      	movs	r3, #0
   b5bdc:	f005 f802 	bl	babe4 <__aeabi_dcmpeq>
   b5be0:	b9b0      	cbnz	r0, b5c10 <print_value+0x12c>
        length = sprintf((char*)number_buffer, "null");
   b5be2:	498e      	ldr	r1, [pc, #568]	; (b5e1c <print_value+0x338>)
   b5be4:	a805      	add	r0, sp, #20
   b5be6:	f005 f95e 	bl	baea6 <strcpy>
   b5bea:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   b5bec:	1c69      	adds	r1, r5, #1
   b5bee:	4620      	mov	r0, r4
   b5bf0:	f7ff fe11 	bl	b5816 <ensure>
    if (output_pointer == NULL)
   b5bf4:	2800      	cmp	r0, #0
   b5bf6:	f43f af7b 	beq.w	b5af0 <print_value+0xc>
   b5bfa:	4602      	mov	r2, r0
   b5bfc:	ab05      	add	r3, sp, #20
   b5bfe:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   b5c00:	4296      	cmp	r6, r2
   b5c02:	d125      	bne.n	b5c50 <print_value+0x16c>
    output_pointer[i] = '\0';
   b5c04:	2300      	movs	r3, #0
   b5c06:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   b5c08:	68a0      	ldr	r0, [r4, #8]
   b5c0a:	4428      	add	r0, r5
   b5c0c:	60a0      	str	r0, [r4, #8]
    return true;
   b5c0e:	e7c4      	b.n	b5b9a <print_value+0xb6>
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b5c10:	4985      	ldr	r1, [pc, #532]	; (b5e28 <print_value+0x344>)
   b5c12:	4632      	mov	r2, r6
   b5c14:	463b      	mov	r3, r7
   b5c16:	a805      	add	r0, sp, #20
   b5c18:	f001 fa28 	bl	b706c <sprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b5c1c:	4983      	ldr	r1, [pc, #524]	; (b5e2c <print_value+0x348>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b5c1e:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b5c20:	aa02      	add	r2, sp, #8
   b5c22:	a805      	add	r0, sp, #20
   b5c24:	f001 fa2a 	bl	b707c <sscanf>
   b5c28:	2801      	cmp	r0, #1
   b5c2a:	d106      	bne.n	b5c3a <print_value+0x156>
   b5c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b5c30:	4630      	mov	r0, r6
   b5c32:	4639      	mov	r1, r7
   b5c34:	f004 ffd6 	bl	babe4 <__aeabi_dcmpeq>
   b5c38:	b930      	cbnz	r0, b5c48 <print_value+0x164>
            length = sprintf((char*)number_buffer, "%1.17g", d);
   b5c3a:	497d      	ldr	r1, [pc, #500]	; (b5e30 <print_value+0x34c>)
   b5c3c:	4632      	mov	r2, r6
   b5c3e:	463b      	mov	r3, r7
   b5c40:	a805      	add	r0, sp, #20
   b5c42:	f001 fa13 	bl	b706c <sprintf>
   b5c46:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   b5c48:	2d19      	cmp	r5, #25
   b5c4a:	f63f af51 	bhi.w	b5af0 <print_value+0xc>
   b5c4e:	e7cd      	b.n	b5bec <print_value+0x108>
        if (number_buffer[i] == decimal_point)
   b5c50:	f813 1b01 	ldrb.w	r1, [r3], #1
            output_pointer[i] = '.';
   b5c54:	7011      	strb	r1, [r2, #0]
    for (i = 0; i < ((size_t)length); i++)
   b5c56:	3201      	adds	r2, #1
   b5c58:	e7d2      	b.n	b5c00 <print_value+0x11c>
            if (item->valuestring == NULL)
   b5c5a:	6900      	ldr	r0, [r0, #16]
   b5c5c:	2800      	cmp	r0, #0
   b5c5e:	f43f af47 	beq.w	b5af0 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   b5c62:	f005 f946 	bl	baef2 <strlen>
   b5c66:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   b5c68:	4611      	mov	r1, r2
   b5c6a:	4620      	mov	r0, r4
   b5c6c:	9201      	str	r2, [sp, #4]
   b5c6e:	f7ff fdd2 	bl	b5816 <ensure>
            if (output == NULL)
   b5c72:	2800      	cmp	r0, #0
   b5c74:	f43f af3c 	beq.w	b5af0 <print_value+0xc>
            memcpy(output, item->valuestring, raw_length);
   b5c78:	9a01      	ldr	r2, [sp, #4]
   b5c7a:	6931      	ldr	r1, [r6, #16]
   b5c7c:	f005 f89b 	bl	badb6 <memcpy>
            return true;
   b5c80:	e78b      	b.n	b5b9a <print_value+0xb6>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b5c82:	6900      	ldr	r0, [r0, #16]
}
   b5c84:	b00d      	add	sp, #52	; 0x34
   b5c86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b5c8a:	f7ff be53 	b.w	b5934 <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   b5c8e:	4621      	mov	r1, r4
   b5c90:	4630      	mov	r0, r6
   b5c92:	f7ff ff27 	bl	b5ae4 <print_value>
   b5c96:	2800      	cmp	r0, #0
   b5c98:	f43f af2a 	beq.w	b5af0 <print_value+0xc>
        update_offset(output_buffer);
   b5c9c:	4620      	mov	r0, r4
   b5c9e:	f7ff fdae 	bl	b57fe <update_offset>
        if (current_element->next)
   b5ca2:	6833      	ldr	r3, [r6, #0]
   b5ca4:	b1bb      	cbz	r3, b5cd6 <print_value+0x1f2>
            length = (size_t) (output_buffer->format ? 2 : 1);
   b5ca6:	6963      	ldr	r3, [r4, #20]
   b5ca8:	2b00      	cmp	r3, #0
   b5caa:	bf14      	ite	ne
   b5cac:	f04f 0902 	movne.w	r9, #2
   b5cb0:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   b5cb4:	f109 0101 	add.w	r1, r9, #1
   b5cb8:	4620      	mov	r0, r4
   b5cba:	f7ff fdac 	bl	b5816 <ensure>
            if (output_pointer == NULL)
   b5cbe:	2800      	cmp	r0, #0
   b5cc0:	f43f af16 	beq.w	b5af0 <print_value+0xc>
            *output_pointer++ = ',';
   b5cc4:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   b5cc6:	6963      	ldr	r3, [r4, #20]
   b5cc8:	b93b      	cbnz	r3, b5cda <print_value+0x1f6>
            *output_pointer++ = ',';
   b5cca:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   b5ccc:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   b5cd0:	68a3      	ldr	r3, [r4, #8]
   b5cd2:	444b      	add	r3, r9
   b5cd4:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   b5cd6:	6836      	ldr	r6, [r6, #0]
   b5cd8:	e746      	b.n	b5b68 <print_value+0x84>
                *output_pointer++ = ' ';
   b5cda:	1c83      	adds	r3, r0, #2
   b5cdc:	7045      	strb	r5, [r0, #1]
   b5cde:	e7f5      	b.n	b5ccc <print_value+0x1e8>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   b5ce0:	694b      	ldr	r3, [r1, #20]
   b5ce2:	6885      	ldr	r5, [r0, #8]
   b5ce4:	2b00      	cmp	r3, #0
   b5ce6:	bf14      	ite	ne
   b5ce8:	2702      	movne	r7, #2
   b5cea:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   b5cec:	1c79      	adds	r1, r7, #1
   b5cee:	4620      	mov	r0, r4
   b5cf0:	f7ff fd91 	bl	b5816 <ensure>
    if (output_pointer == NULL)
   b5cf4:	2800      	cmp	r0, #0
   b5cf6:	f43f aefb 	beq.w	b5af0 <print_value+0xc>
    *output_pointer++ = '{';
   b5cfa:	237b      	movs	r3, #123	; 0x7b
   b5cfc:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   b5cfe:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   b5d00:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   b5d02:	3201      	adds	r2, #1
   b5d04:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   b5d06:	b10b      	cbz	r3, b5d0c <print_value+0x228>
        *output_pointer++ = '\n';
   b5d08:	230a      	movs	r3, #10
   b5d0a:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   b5d0c:	68a3      	ldr	r3, [r4, #8]
   b5d0e:	443b      	add	r3, r7
   b5d10:	60a3      	str	r3, [r4, #8]
                *output_pointer++ = '\t';
   b5d12:	2609      	movs	r6, #9
        *output_pointer++ = ':';
   b5d14:	273a      	movs	r7, #58	; 0x3a
        if (output_buffer->format)
   b5d16:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   b5d18:	b995      	cbnz	r5, b5d40 <print_value+0x25c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b5d1a:	2b00      	cmp	r3, #0
   b5d1c:	d070      	beq.n	b5e00 <print_value+0x31c>
   b5d1e:	68e1      	ldr	r1, [r4, #12]
   b5d20:	3101      	adds	r1, #1
   b5d22:	4620      	mov	r0, r4
   b5d24:	f7ff fd77 	bl	b5816 <ensure>
    if (output_pointer == NULL)
   b5d28:	2800      	cmp	r0, #0
   b5d2a:	f43f aee1 	beq.w	b5af0 <print_value+0xc>
    if (output_buffer->format)
   b5d2e:	6963      	ldr	r3, [r4, #20]
   b5d30:	2b00      	cmp	r3, #0
   b5d32:	d16f      	bne.n	b5e14 <print_value+0x330>
   b5d34:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   b5d36:	227d      	movs	r2, #125	; 0x7d
   b5d38:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   b5d3a:	2200      	movs	r2, #0
   b5d3c:	705a      	strb	r2, [r3, #1]
   b5d3e:	e71f      	b.n	b5b80 <print_value+0x9c>
        if (output_buffer->format)
   b5d40:	b173      	cbz	r3, b5d60 <print_value+0x27c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   b5d42:	68e1      	ldr	r1, [r4, #12]
   b5d44:	4620      	mov	r0, r4
   b5d46:	f7ff fd66 	bl	b5816 <ensure>
            if (output_pointer == NULL)
   b5d4a:	2800      	cmp	r0, #0
   b5d4c:	f43f aed0 	beq.w	b5af0 <print_value+0xc>
   b5d50:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   b5d52:	68e1      	ldr	r1, [r4, #12]
   b5d54:	1a13      	subs	r3, r2, r0
   b5d56:	4299      	cmp	r1, r3
   b5d58:	d84f      	bhi.n	b5dfa <print_value+0x316>
            output_buffer->offset += output_buffer->depth;
   b5d5a:	68a3      	ldr	r3, [r4, #8]
   b5d5c:	440b      	add	r3, r1
   b5d5e:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   b5d60:	6a28      	ldr	r0, [r5, #32]
   b5d62:	4621      	mov	r1, r4
   b5d64:	f7ff fde6 	bl	b5934 <print_string_ptr>
   b5d68:	2800      	cmp	r0, #0
   b5d6a:	f43f aec1 	beq.w	b5af0 <print_value+0xc>
        update_offset(output_buffer);
   b5d6e:	4620      	mov	r0, r4
   b5d70:	f7ff fd45 	bl	b57fe <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   b5d74:	6963      	ldr	r3, [r4, #20]
   b5d76:	2b00      	cmp	r3, #0
   b5d78:	bf14      	ite	ne
   b5d7a:	f04f 0802 	movne.w	r8, #2
   b5d7e:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   b5d82:	4641      	mov	r1, r8
   b5d84:	4620      	mov	r0, r4
   b5d86:	f7ff fd46 	bl	b5816 <ensure>
        if (output_pointer == NULL)
   b5d8a:	2800      	cmp	r0, #0
   b5d8c:	f43f aeb0 	beq.w	b5af0 <print_value+0xc>
        *output_pointer++ = ':';
   b5d90:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   b5d92:	6963      	ldr	r3, [r4, #20]
   b5d94:	b103      	cbz	r3, b5d98 <print_value+0x2b4>
            *output_pointer++ = '\t';
   b5d96:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   b5d98:	68a3      	ldr	r3, [r4, #8]
   b5d9a:	4443      	add	r3, r8
   b5d9c:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   b5d9e:	4621      	mov	r1, r4
   b5da0:	4628      	mov	r0, r5
   b5da2:	f7ff fe9f 	bl	b5ae4 <print_value>
   b5da6:	2800      	cmp	r0, #0
   b5da8:	f43f aea2 	beq.w	b5af0 <print_value+0xc>
        update_offset(output_buffer);
   b5dac:	4620      	mov	r0, r4
   b5dae:	f7ff fd26 	bl	b57fe <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   b5db2:	682b      	ldr	r3, [r5, #0]
   b5db4:	6962      	ldr	r2, [r4, #20]
   b5db6:	f1b3 0800 	subs.w	r8, r3, #0
   b5dba:	bf18      	it	ne
   b5dbc:	f04f 0801 	movne.w	r8, #1
   b5dc0:	2a00      	cmp	r2, #0
   b5dc2:	bf18      	it	ne
   b5dc4:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   b5dc8:	f108 0101 	add.w	r1, r8, #1
   b5dcc:	4620      	mov	r0, r4
   b5dce:	f7ff fd22 	bl	b5816 <ensure>
        if (output_pointer == NULL)
   b5dd2:	2800      	cmp	r0, #0
   b5dd4:	f43f ae8c 	beq.w	b5af0 <print_value+0xc>
        if (current_item->next)
   b5dd8:	682b      	ldr	r3, [r5, #0]
   b5dda:	b113      	cbz	r3, b5de2 <print_value+0x2fe>
            *output_pointer++ = ',';
   b5ddc:	232c      	movs	r3, #44	; 0x2c
   b5dde:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   b5de2:	6963      	ldr	r3, [r4, #20]
   b5de4:	b113      	cbz	r3, b5dec <print_value+0x308>
            *output_pointer++ = '\n';
   b5de6:	230a      	movs	r3, #10
   b5de8:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   b5dec:	2300      	movs	r3, #0
   b5dee:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   b5df0:	68a3      	ldr	r3, [r4, #8]
   b5df2:	4443      	add	r3, r8
   b5df4:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   b5df6:	682d      	ldr	r5, [r5, #0]
   b5df8:	e78d      	b.n	b5d16 <print_value+0x232>
                *output_pointer++ = '\t';
   b5dfa:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   b5dfe:	e7a8      	b.n	b5d52 <print_value+0x26e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b5e00:	2102      	movs	r1, #2
   b5e02:	e78e      	b.n	b5d22 <print_value+0x23e>
            *output_pointer++ = '\t';
   b5e04:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   b5e08:	68e2      	ldr	r2, [r4, #12]
   b5e0a:	1a19      	subs	r1, r3, r0
   b5e0c:	3a01      	subs	r2, #1
   b5e0e:	4291      	cmp	r1, r2
   b5e10:	d3f8      	bcc.n	b5e04 <print_value+0x320>
   b5e12:	e790      	b.n	b5d36 <print_value+0x252>
   b5e14:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   b5e16:	2509      	movs	r5, #9
   b5e18:	e7f6      	b.n	b5e08 <print_value+0x324>
   b5e1a:	bf00      	nop
   b5e1c:	000bd603 	.word	0x000bd603
   b5e20:	000bd6ed 	.word	0x000bd6ed
   b5e24:	000bd608 	.word	0x000bd608
   b5e28:	000bd60d 	.word	0x000bd60d
   b5e2c:	000bd614 	.word	0x000bd614
   b5e30:	000bd618 	.word	0x000bd618

000b5e34 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5e34:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5e36:	4d23      	ldr	r5, [pc, #140]	; (b5ec4 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5e38:	b08a      	sub	sp, #40	; 0x28
   b5e3a:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   b5e3c:	2224      	movs	r2, #36	; 0x24
   b5e3e:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5e40:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   b5e42:	a801      	add	r0, sp, #4
   b5e44:	f004 ffdf 	bl	bae06 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5e48:	682b      	ldr	r3, [r5, #0]
   b5e4a:	f44f 7080 	mov.w	r0, #256	; 0x100
   b5e4e:	4798      	blx	r3
    buffer->length = default_buffer_size;
   b5e50:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5e54:	4603      	mov	r3, r0
   b5e56:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   b5e58:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   b5e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    buffer->format = format;
   b5e5e:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   b5e60:	ae0a      	add	r6, sp, #40	; 0x28
   b5e62:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   b5e66:	b17b      	cbz	r3, b5e88 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   b5e68:	a901      	add	r1, sp, #4
   b5e6a:	4620      	mov	r0, r4
   b5e6c:	f7ff fe3a 	bl	b5ae4 <print_value>
   b5e70:	b150      	cbz	r0, b5e88 <print.constprop.0+0x54>
    update_offset(buffer);
   b5e72:	a801      	add	r0, sp, #4
   b5e74:	f7ff fcc3 	bl	b57fe <update_offset>
    if (hooks->reallocate != NULL)
   b5e78:	68ae      	ldr	r6, [r5, #8]
   b5e7a:	9903      	ldr	r1, [sp, #12]
   b5e7c:	b15e      	cbz	r6, b5e96 <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   b5e7e:	9801      	ldr	r0, [sp, #4]
   b5e80:	3101      	adds	r1, #1
   b5e82:	47b0      	blx	r6
        if (printed == NULL) {
   b5e84:	4604      	mov	r4, r0
   b5e86:	b9d0      	cbnz	r0, b5ebe <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   b5e88:	9c01      	ldr	r4, [sp, #4]
   b5e8a:	b1c4      	cbz	r4, b5ebe <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	686b      	ldr	r3, [r5, #4]
   b5e90:	4798      	blx	r3
    return NULL;
   b5e92:	2400      	movs	r4, #0
   b5e94:	e013      	b.n	b5ebe <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   b5e96:	682b      	ldr	r3, [r5, #0]
   b5e98:	1c48      	adds	r0, r1, #1
   b5e9a:	4798      	blx	r3
        if (printed == NULL)
   b5e9c:	4604      	mov	r4, r0
   b5e9e:	2800      	cmp	r0, #0
   b5ea0:	d0f2      	beq.n	b5e88 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   b5ea2:	9a03      	ldr	r2, [sp, #12]
   b5ea4:	9b02      	ldr	r3, [sp, #8]
   b5ea6:	9901      	ldr	r1, [sp, #4]
   b5ea8:	3201      	adds	r2, #1
   b5eaa:	429a      	cmp	r2, r3
   b5eac:	bf28      	it	cs
   b5eae:	461a      	movcs	r2, r3
   b5eb0:	f004 ff81 	bl	badb6 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   b5eb4:	9b03      	ldr	r3, [sp, #12]
   b5eb6:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   b5eb8:	9801      	ldr	r0, [sp, #4]
   b5eba:	686b      	ldr	r3, [r5, #4]
   b5ebc:	4798      	blx	r3
}
   b5ebe:	4620      	mov	r0, r4
   b5ec0:	b00a      	add	sp, #40	; 0x28
   b5ec2:	bd70      	pop	{r4, r5, r6, pc}
   b5ec4:	2003d174 	.word	0x2003d174

000b5ec8 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   b5ec8:	b510      	push	{r4, lr}
   b5eca:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   b5ecc:	2028      	movs	r0, #40	; 0x28
   b5ece:	4798      	blx	r3
    if (node)
   b5ed0:	4604      	mov	r4, r0
   b5ed2:	b118      	cbz	r0, b5edc <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
   b5ed4:	2228      	movs	r2, #40	; 0x28
   b5ed6:	2100      	movs	r1, #0
   b5ed8:	f004 ff95 	bl	bae06 <memset>
}
   b5edc:	4620      	mov	r0, r4
   b5ede:	bd10      	pop	{r4, pc}

000b5ee0 <cJSON_Delete>:
{
   b5ee0:	b570      	push	{r4, r5, r6, lr}
   b5ee2:	4d10      	ldr	r5, [pc, #64]	; (b5f24 <cJSON_Delete+0x44>)
   b5ee4:	4604      	mov	r4, r0
    while (item != NULL)
   b5ee6:	b904      	cbnz	r4, b5eea <cJSON_Delete+0xa>
}
   b5ee8:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b5eea:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   b5eec:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b5eee:	05d9      	lsls	r1, r3, #23
   b5ef0:	d403      	bmi.n	b5efa <cJSON_Delete+0x1a>
   b5ef2:	68a0      	ldr	r0, [r4, #8]
   b5ef4:	b968      	cbnz	r0, b5f12 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b5ef6:	6920      	ldr	r0, [r4, #16]
   b5ef8:	b988      	cbnz	r0, b5f1e <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b5efa:	68e3      	ldr	r3, [r4, #12]
   b5efc:	059b      	lsls	r3, r3, #22
   b5efe:	d403      	bmi.n	b5f08 <cJSON_Delete+0x28>
   b5f00:	6a20      	ldr	r0, [r4, #32]
   b5f02:	b108      	cbz	r0, b5f08 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   b5f04:	686b      	ldr	r3, [r5, #4]
   b5f06:	4798      	blx	r3
        global_hooks.deallocate(item);
   b5f08:	4620      	mov	r0, r4
   b5f0a:	686b      	ldr	r3, [r5, #4]
   b5f0c:	4798      	blx	r3
        item = next;
   b5f0e:	4634      	mov	r4, r6
   b5f10:	e7e9      	b.n	b5ee6 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   b5f12:	f7ff ffe5 	bl	b5ee0 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b5f16:	68e3      	ldr	r3, [r4, #12]
   b5f18:	05da      	lsls	r2, r3, #23
   b5f1a:	d5ec      	bpl.n	b5ef6 <cJSON_Delete+0x16>
   b5f1c:	e7ed      	b.n	b5efa <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   b5f1e:	686b      	ldr	r3, [r5, #4]
   b5f20:	4798      	blx	r3
   b5f22:	e7ea      	b.n	b5efa <cJSON_Delete+0x1a>
   b5f24:	2003d174 	.word	0x2003d174

000b5f28 <parse_value>:
{
   b5f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f2c:	4606      	mov	r6, r0
   b5f2e:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   b5f30:	460c      	mov	r4, r1
   b5f32:	b909      	cbnz	r1, b5f38 <parse_value+0x10>
    return false;
   b5f34:	2000      	movs	r0, #0
   b5f36:	e023      	b.n	b5f80 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   b5f38:	680f      	ldr	r7, [r1, #0]
   b5f3a:	2f00      	cmp	r7, #0
   b5f3c:	d0fa      	beq.n	b5f34 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   b5f3e:	688d      	ldr	r5, [r1, #8]
   b5f40:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b5f44:	f105 0904 	add.w	r9, r5, #4
   b5f48:	45c1      	cmp	r9, r8
   b5f4a:	d80b      	bhi.n	b5f64 <parse_value+0x3c>
   b5f4c:	4990      	ldr	r1, [pc, #576]	; (b6190 <parse_value+0x268>)
   b5f4e:	2204      	movs	r2, #4
   b5f50:	1978      	adds	r0, r7, r5
   b5f52:	f004 ffd6 	bl	baf02 <strncmp>
   b5f56:	b928      	cbnz	r0, b5f64 <parse_value+0x3c>
        item->type = cJSON_NULL;
   b5f58:	2304      	movs	r3, #4
   b5f5a:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   b5f5c:	68a3      	ldr	r3, [r4, #8]
   b5f5e:	3304      	adds	r3, #4
    input_buffer->offset++;
   b5f60:	60a3      	str	r3, [r4, #8]
   b5f62:	e082      	b.n	b606a <parse_value+0x142>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   b5f64:	1d6b      	adds	r3, r5, #5
   b5f66:	4598      	cmp	r8, r3
   b5f68:	d30d      	bcc.n	b5f86 <parse_value+0x5e>
   b5f6a:	498a      	ldr	r1, [pc, #552]	; (b6194 <parse_value+0x26c>)
   b5f6c:	2205      	movs	r2, #5
   b5f6e:	1978      	adds	r0, r7, r5
   b5f70:	f004 ffc7 	bl	baf02 <strncmp>
   b5f74:	b938      	cbnz	r0, b5f86 <parse_value+0x5e>
        item->type = cJSON_False;
   b5f76:	2001      	movs	r0, #1
   b5f78:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   b5f7a:	68a2      	ldr	r2, [r4, #8]
   b5f7c:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   b5f7e:	60a2      	str	r2, [r4, #8]
}
   b5f80:	b012      	add	sp, #72	; 0x48
   b5f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   b5f86:	45c1      	cmp	r9, r8
   b5f88:	d80c      	bhi.n	b5fa4 <parse_value+0x7c>
   b5f8a:	4983      	ldr	r1, [pc, #524]	; (b6198 <parse_value+0x270>)
   b5f8c:	2204      	movs	r2, #4
   b5f8e:	1978      	adds	r0, r7, r5
   b5f90:	f004 ffb7 	bl	baf02 <strncmp>
   b5f94:	b930      	cbnz	r0, b5fa4 <parse_value+0x7c>
        item->type = cJSON_True;
   b5f96:	2302      	movs	r3, #2
        item->valueint = 1;
   b5f98:	2001      	movs	r0, #1
        item->type = cJSON_True;
   b5f9a:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   b5f9c:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   b5f9e:	68a2      	ldr	r2, [r4, #8]
   b5fa0:	3204      	adds	r2, #4
   b5fa2:	e7ec      	b.n	b5f7e <parse_value+0x56>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   b5fa4:	4545      	cmp	r5, r8
   b5fa6:	d2c5      	bcs.n	b5f34 <parse_value+0xc>
   b5fa8:	5d7b      	ldrb	r3, [r7, r5]
   b5faa:	2b22      	cmp	r3, #34	; 0x22
   b5fac:	eb07 0005 	add.w	r0, r7, r5
   b5fb0:	d106      	bne.n	b5fc0 <parse_value+0x98>
        return parse_string(item, input_buffer);
   b5fb2:	4621      	mov	r1, r4
   b5fb4:	4630      	mov	r0, r6
}
   b5fb6:	b012      	add	sp, #72	; 0x48
   b5fb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return parse_string(item, input_buffer);
   b5fbc:	f7ff bb10 	b.w	b55e0 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   b5fc0:	2b2d      	cmp	r3, #45	; 0x2d
   b5fc2:	d003      	beq.n	b5fcc <parse_value+0xa4>
   b5fc4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b5fc8:	2a09      	cmp	r2, #9
   b5fca:	d863      	bhi.n	b6094 <parse_value+0x16c>
    unsigned char *after_end = NULL;
   b5fcc:	2300      	movs	r3, #0
   b5fce:	aa02      	add	r2, sp, #8
   b5fd0:	9301      	str	r3, [sp, #4]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   b5fd2:	eba8 0505 	sub.w	r5, r8, r5
   b5fd6:	4617      	mov	r7, r2
                number_c_string[i] = decimal_point;
   b5fd8:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
        switch (buffer_at_offset(input_buffer)[i])
   b5fdc:	f810 1b01 	ldrb.w	r1, [r0], #1
   b5fe0:	2939      	cmp	r1, #57	; 0x39
   b5fe2:	d810      	bhi.n	b6006 <parse_value+0xde>
   b5fe4:	292a      	cmp	r1, #42	; 0x2a
   b5fe6:	d91b      	bls.n	b6020 <parse_value+0xf8>
   b5fe8:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
   b5fec:	f1bc 0f0e 	cmp.w	ip, #14
   b5ff0:	d816      	bhi.n	b6020 <parse_value+0xf8>
   b5ff2:	e8df f00c 	tbb	[pc, ip]
   b5ff6:	150d      	.short	0x150d
   b5ff8:	0d153c0d 	.word	0x0d153c0d
   b5ffc:	0d0d0d0d 	.word	0x0d0d0d0d
   b6000:	0d0d0d0d 	.word	0x0d0d0d0d
   b6004:	0d          	.byte	0x0d
   b6005:	00          	.byte	0x00
   b6006:	f001 0cdf 	and.w	ip, r1, #223	; 0xdf
   b600a:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   b600e:	d107      	bne.n	b6020 <parse_value+0xf8>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   b6010:	7011      	strb	r1, [r2, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   b6012:	3301      	adds	r3, #1
   b6014:	2b3f      	cmp	r3, #63	; 0x3f
   b6016:	f102 0201 	add.w	r2, r2, #1
   b601a:	d001      	beq.n	b6020 <parse_value+0xf8>
   b601c:	42ab      	cmp	r3, r5
   b601e:	d1dd      	bne.n	b5fdc <parse_value+0xb4>
    number_c_string[i] = '\0';
   b6020:	aa12      	add	r2, sp, #72	; 0x48
   b6022:	4413      	add	r3, r2
   b6024:	2500      	movs	r5, #0
   b6026:	f803 5c40 	strb.w	r5, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   b602a:	a901      	add	r1, sp, #4
   b602c:	4638      	mov	r0, r7
   b602e:	f005 fdc1 	bl	bbbb4 <strtod>
    if (number_c_string == after_end)
   b6032:	f8dd a004 	ldr.w	sl, [sp, #4]
   b6036:	45ba      	cmp	sl, r7
    number = strtod((const char*)number_c_string, (char**)&after_end);
   b6038:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   b603c:	f43f af7a 	beq.w	b5f34 <parse_value+0xc>
    item->valuedouble = number;
   b6040:	ed86 0b06 	vstr	d0, [r6, #24]
    if (number >= INT_MAX)
   b6044:	a350      	add	r3, pc, #320	; (adr r3, b6188 <parse_value+0x260>)
   b6046:	e9d3 2300 	ldrd	r2, r3, [r3]
   b604a:	ee10 0a10 	vmov	r0, s0
   b604e:	4649      	mov	r1, r9
   b6050:	f004 fde6 	bl	bac20 <__aeabi_dcmpge>
   b6054:	b170      	cbz	r0, b6074 <parse_value+0x14c>
        item->valueint = INT_MAX;
   b6056:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   b605a:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   b605c:	2308      	movs	r3, #8
   b605e:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   b6060:	ebaa 0a07 	sub.w	sl, sl, r7
   b6064:	68a7      	ldr	r7, [r4, #8]
   b6066:	4457      	add	r7, sl
   b6068:	60a7      	str	r7, [r4, #8]
    return true;
   b606a:	2001      	movs	r0, #1
   b606c:	e788      	b.n	b5f80 <parse_value+0x58>
                number_c_string[i] = decimal_point;
   b606e:	f882 e000 	strb.w	lr, [r2]
                break;
   b6072:	e7ce      	b.n	b6012 <parse_value+0xea>
    else if (number <= (double)INT_MIN)
   b6074:	4b49      	ldr	r3, [pc, #292]	; (b619c <parse_value+0x274>)
   b6076:	2200      	movs	r2, #0
   b6078:	4640      	mov	r0, r8
   b607a:	4649      	mov	r1, r9
   b607c:	f004 fdc6 	bl	bac0c <__aeabi_dcmple>
   b6080:	b110      	cbz	r0, b6088 <parse_value+0x160>
        item->valueint = INT_MIN;
   b6082:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   b6086:	e7e8      	b.n	b605a <parse_value+0x132>
        item->valueint = (int)number;
   b6088:	4640      	mov	r0, r8
   b608a:	4649      	mov	r1, r9
   b608c:	f004 fddc 	bl	bac48 <__aeabi_d2iz>
   b6090:	6170      	str	r0, [r6, #20]
   b6092:	e7e3      	b.n	b605c <parse_value+0x134>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   b6094:	2b5b      	cmp	r3, #91	; 0x5b
   b6096:	d150      	bne.n	b613a <parse_value+0x212>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   b6098:	68e3      	ldr	r3, [r4, #12]
   b609a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b609e:	f4bf af49 	bcs.w	b5f34 <parse_value+0xc>
    input_buffer->depth++;
   b60a2:	3301      	adds	r3, #1
   b60a4:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   b60a6:	5d7b      	ldrb	r3, [r7, r5]
   b60a8:	2b5b      	cmp	r3, #91	; 0x5b
   b60aa:	f47f af43 	bne.w	b5f34 <parse_value+0xc>
    input_buffer->offset++;
   b60ae:	3501      	adds	r5, #1
   b60b0:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   b60b2:	4620      	mov	r0, r4
   b60b4:	f7ff fb86 	bl	b57c4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   b60b8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b60bc:	4293      	cmp	r3, r2
   b60be:	d25d      	bcs.n	b617c <parse_value+0x254>
   b60c0:	6822      	ldr	r2, [r4, #0]
   b60c2:	5cd2      	ldrb	r2, [r2, r3]
   b60c4:	2a5d      	cmp	r2, #93	; 0x5d
   b60c6:	d109      	bne.n	b60dc <parse_value+0x1b4>
    cJSON *head = NULL; /* head of the linked list */
   b60c8:	2700      	movs	r7, #0
    input_buffer->depth--;
   b60ca:	68e3      	ldr	r3, [r4, #12]
   b60cc:	3b01      	subs	r3, #1
   b60ce:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   b60d0:	2320      	movs	r3, #32
    item->child = head;
   b60d2:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   b60d6:	68a3      	ldr	r3, [r4, #8]
   b60d8:	3301      	adds	r3, #1
   b60da:	e741      	b.n	b5f60 <parse_value+0x38>
    input_buffer->offset--;
   b60dc:	3b01      	subs	r3, #1
    cJSON *current_item = NULL;
   b60de:	2500      	movs	r5, #0
    input_buffer->offset--;
   b60e0:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* head of the linked list */
   b60e2:	462f      	mov	r7, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   b60e4:	6920      	ldr	r0, [r4, #16]
   b60e6:	f7ff feef 	bl	b5ec8 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   b60ea:	46a8      	mov	r8, r5
   b60ec:	4605      	mov	r5, r0
   b60ee:	2800      	cmp	r0, #0
   b60f0:	f000 809b 	beq.w	b622a <parse_value+0x302>
        if (head == NULL)
   b60f4:	b1ff      	cbz	r7, b6136 <parse_value+0x20e>
            current_item->next = new_item;
   b60f6:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   b60fa:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   b60fe:	68a3      	ldr	r3, [r4, #8]
   b6100:	3301      	adds	r3, #1
   b6102:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b6104:	4620      	mov	r0, r4
   b6106:	f7ff fb5d 	bl	b57c4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   b610a:	4621      	mov	r1, r4
   b610c:	4628      	mov	r0, r5
   b610e:	f7ff ff0b 	bl	b5f28 <parse_value>
   b6112:	2800      	cmp	r0, #0
   b6114:	f000 808c 	beq.w	b6230 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b6118:	4620      	mov	r0, r4
   b611a:	f7ff fb53 	bl	b57c4 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   b611e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b6122:	4293      	cmp	r3, r2
   b6124:	f080 8084 	bcs.w	b6230 <parse_value+0x308>
   b6128:	6822      	ldr	r2, [r4, #0]
   b612a:	5cd3      	ldrb	r3, [r2, r3]
   b612c:	2b2c      	cmp	r3, #44	; 0x2c
   b612e:	d0d9      	beq.n	b60e4 <parse_value+0x1bc>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   b6130:	2b5d      	cmp	r3, #93	; 0x5d
   b6132:	d17d      	bne.n	b6230 <parse_value+0x308>
   b6134:	e7c9      	b.n	b60ca <parse_value+0x1a2>
   b6136:	4607      	mov	r7, r0
   b6138:	e7e1      	b.n	b60fe <parse_value+0x1d6>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   b613a:	2b7b      	cmp	r3, #123	; 0x7b
   b613c:	f47f aefa 	bne.w	b5f34 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   b6140:	68e3      	ldr	r3, [r4, #12]
   b6142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b6146:	f4bf aef5 	bcs.w	b5f34 <parse_value+0xc>
    input_buffer->depth++;
   b614a:	3301      	adds	r3, #1
   b614c:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   b614e:	5d7b      	ldrb	r3, [r7, r5]
   b6150:	2b7b      	cmp	r3, #123	; 0x7b
   b6152:	f47f aeef 	bne.w	b5f34 <parse_value+0xc>
    input_buffer->offset++;
   b6156:	3501      	adds	r5, #1
   b6158:	60a5      	str	r5, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   b615a:	4620      	mov	r0, r4
   b615c:	f7ff fb32 	bl	b57c4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   b6160:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b6164:	4293      	cmp	r3, r2
   b6166:	d209      	bcs.n	b617c <parse_value+0x254>
   b6168:	6822      	ldr	r2, [r4, #0]
   b616a:	5cd2      	ldrb	r2, [r2, r3]
   b616c:	2a7d      	cmp	r2, #125	; 0x7d
   b616e:	d117      	bne.n	b61a0 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
   b6170:	2700      	movs	r7, #0
    input_buffer->depth--;
   b6172:	68e3      	ldr	r3, [r4, #12]
   b6174:	3b01      	subs	r3, #1
   b6176:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   b6178:	2340      	movs	r3, #64	; 0x40
   b617a:	e7aa      	b.n	b60d2 <parse_value+0x1aa>
        input_buffer->offset--;
   b617c:	3b01      	subs	r3, #1
   b617e:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   b6180:	e6d8      	b.n	b5f34 <parse_value+0xc>
   b6182:	bf00      	nop
   b6184:	f3af 8000 	nop.w
   b6188:	ffc00000 	.word	0xffc00000
   b618c:	41dfffff 	.word	0x41dfffff
   b6190:	000bd603 	.word	0x000bd603
   b6194:	000bd6ed 	.word	0x000bd6ed
   b6198:	000bd608 	.word	0x000bd608
   b619c:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   b61a0:	2500      	movs	r5, #0
    input_buffer->offset--;
   b61a2:	3b01      	subs	r3, #1
   b61a4:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* linked list head */
   b61a6:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   b61a8:	46a8      	mov	r8, r5
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   b61aa:	6920      	ldr	r0, [r4, #16]
   b61ac:	f7ff fe8c 	bl	b5ec8 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   b61b0:	46a9      	mov	r9, r5
   b61b2:	4605      	mov	r5, r0
   b61b4:	2800      	cmp	r0, #0
   b61b6:	d038      	beq.n	b622a <parse_value+0x302>
        if (head == NULL)
   b61b8:	b3af      	cbz	r7, b6226 <parse_value+0x2fe>
            current_item->next = new_item;
   b61ba:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   b61be:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   b61c2:	68a3      	ldr	r3, [r4, #8]
   b61c4:	3301      	adds	r3, #1
   b61c6:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b61c8:	4620      	mov	r0, r4
   b61ca:	f7ff fafb 	bl	b57c4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   b61ce:	4621      	mov	r1, r4
   b61d0:	4628      	mov	r0, r5
   b61d2:	f7ff fa05 	bl	b55e0 <parse_string>
   b61d6:	b358      	cbz	r0, b6230 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b61d8:	4620      	mov	r0, r4
   b61da:	f7ff faf3 	bl	b57c4 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   b61de:	692b      	ldr	r3, [r5, #16]
   b61e0:	622b      	str	r3, [r5, #32]
        current_item->valuestring = NULL;
   b61e2:	f8c5 8010 	str.w	r8, [r5, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   b61e6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b61ea:	4293      	cmp	r3, r2
   b61ec:	d220      	bcs.n	b6230 <parse_value+0x308>
   b61ee:	6822      	ldr	r2, [r4, #0]
   b61f0:	5cd2      	ldrb	r2, [r2, r3]
   b61f2:	2a3a      	cmp	r2, #58	; 0x3a
   b61f4:	d11c      	bne.n	b6230 <parse_value+0x308>
        input_buffer->offset++;
   b61f6:	3301      	adds	r3, #1
   b61f8:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   b61fa:	4620      	mov	r0, r4
   b61fc:	f7ff fae2 	bl	b57c4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   b6200:	4621      	mov	r1, r4
   b6202:	4628      	mov	r0, r5
   b6204:	f7ff fe90 	bl	b5f28 <parse_value>
   b6208:	b190      	cbz	r0, b6230 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   b620a:	4620      	mov	r0, r4
   b620c:	f7ff fada 	bl	b57c4 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   b6210:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   b6214:	4293      	cmp	r3, r2
   b6216:	d20b      	bcs.n	b6230 <parse_value+0x308>
   b6218:	6822      	ldr	r2, [r4, #0]
   b621a:	5cd3      	ldrb	r3, [r2, r3]
   b621c:	2b2c      	cmp	r3, #44	; 0x2c
   b621e:	d0c4      	beq.n	b61aa <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   b6220:	2b7d      	cmp	r3, #125	; 0x7d
   b6222:	d105      	bne.n	b6230 <parse_value+0x308>
   b6224:	e7a5      	b.n	b6172 <parse_value+0x24a>
   b6226:	4607      	mov	r7, r0
   b6228:	e7cb      	b.n	b61c2 <parse_value+0x29a>
    if (head != NULL)
   b622a:	2f00      	cmp	r7, #0
   b622c:	f43f ae82 	beq.w	b5f34 <parse_value+0xc>
        cJSON_Delete(head);
   b6230:	4638      	mov	r0, r7
   b6232:	f7ff fe55 	bl	b5ee0 <cJSON_Delete>
   b6236:	e67d      	b.n	b5f34 <parse_value+0xc>

000b6238 <cJSON_ParseWithOpts>:
{
   b6238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    global_error.json = NULL;
   b623c:	4f30      	ldr	r7, [pc, #192]	; (b6300 <cJSON_ParseWithOpts+0xc8>)
{
   b623e:	b089      	sub	sp, #36	; 0x24
   b6240:	4605      	mov	r5, r0
   b6242:	460e      	mov	r6, r1
   b6244:	4690      	mov	r8, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   b6246:	2100      	movs	r1, #0
   b6248:	221c      	movs	r2, #28
   b624a:	a801      	add	r0, sp, #4
    global_error.json = NULL;
   b624c:	f04f 0900 	mov.w	r9, #0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   b6250:	f004 fdd9 	bl	bae06 <memset>
    global_error.position = 0;
   b6254:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL)
   b6258:	2d00      	cmp	r5, #0
   b625a:	d048      	beq.n	b62ee <cJSON_ParseWithOpts+0xb6>
    buffer.length = strlen((const char*)value) + sizeof("");
   b625c:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   b625e:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   b6260:	f004 fe47 	bl	baef2 <strlen>
    buffer.hooks = global_hooks;
   b6264:	4b27      	ldr	r3, [pc, #156]	; (b6304 <cJSON_ParseWithOpts+0xcc>)
    buffer.length = strlen((const char*)value) + sizeof("");
   b6266:	3001      	adds	r0, #1
   b6268:	9002      	str	r0, [sp, #8]
    buffer.hooks = global_hooks;
   b626a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b626e:	ab08      	add	r3, sp, #32
   b6270:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   b6274:	f7ff fe28 	bl	b5ec8 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   b6278:	4604      	mov	r4, r0
   b627a:	b368      	cbz	r0, b62d8 <cJSON_ParseWithOpts+0xa0>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   b627c:	9801      	ldr	r0, [sp, #4]
   b627e:	b170      	cbz	r0, b629e <cJSON_ParseWithOpts+0x66>
   b6280:	9b03      	ldr	r3, [sp, #12]
   b6282:	b95b      	cbnz	r3, b629c <cJSON_ParseWithOpts+0x64>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   b6284:	9b02      	ldr	r3, [sp, #8]
   b6286:	2b04      	cmp	r3, #4
   b6288:	d906      	bls.n	b6298 <cJSON_ParseWithOpts+0x60>
   b628a:	491f      	ldr	r1, [pc, #124]	; (b6308 <cJSON_ParseWithOpts+0xd0>)
   b628c:	2203      	movs	r2, #3
   b628e:	f004 fe38 	bl	baf02 <strncmp>
   b6292:	b908      	cbnz	r0, b6298 <cJSON_ParseWithOpts+0x60>
        buffer->offset += 3;
   b6294:	2303      	movs	r3, #3
   b6296:	9303      	str	r3, [sp, #12]
    return buffer;
   b6298:	a801      	add	r0, sp, #4
   b629a:	e000      	b.n	b629e <cJSON_ParseWithOpts+0x66>
        return NULL;
   b629c:	4648      	mov	r0, r9
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   b629e:	f7ff fa91 	bl	b57c4 <buffer_skip_whitespace>
   b62a2:	4601      	mov	r1, r0
   b62a4:	4620      	mov	r0, r4
   b62a6:	f7ff fe3f 	bl	b5f28 <parse_value>
   b62aa:	b190      	cbz	r0, b62d2 <cJSON_ParseWithOpts+0x9a>
    if (require_null_terminated)
   b62ac:	f1b8 0f00 	cmp.w	r8, #0
   b62b0:	d104      	bne.n	b62bc <cJSON_ParseWithOpts+0x84>
    if (return_parse_end)
   b62b2:	b9f6      	cbnz	r6, b62f2 <cJSON_ParseWithOpts+0xba>
}
   b62b4:	4620      	mov	r0, r4
   b62b6:	b009      	add	sp, #36	; 0x24
   b62b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buffer_skip_whitespace(&buffer);
   b62bc:	a801      	add	r0, sp, #4
   b62be:	f7ff fa81 	bl	b57c4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   b62c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b62c6:	4293      	cmp	r3, r2
   b62c8:	d203      	bcs.n	b62d2 <cJSON_ParseWithOpts+0x9a>
   b62ca:	9a01      	ldr	r2, [sp, #4]
   b62cc:	5cd3      	ldrb	r3, [r2, r3]
   b62ce:	2b00      	cmp	r3, #0
   b62d0:	d0ef      	beq.n	b62b2 <cJSON_ParseWithOpts+0x7a>
        cJSON_Delete(item);
   b62d2:	4620      	mov	r0, r4
   b62d4:	f7ff fe04 	bl	b5ee0 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   b62d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b62dc:	429a      	cmp	r2, r3
   b62de:	d30d      	bcc.n	b62fc <cJSON_ParseWithOpts+0xc4>
        else if (buffer.length > 0)
   b62e0:	b103      	cbz	r3, b62e4 <cJSON_ParseWithOpts+0xac>
            local_error.position = buffer.length - 1;
   b62e2:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   b62e4:	b10e      	cbz	r6, b62ea <cJSON_ParseWithOpts+0xb2>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   b62e6:	18ea      	adds	r2, r5, r3
   b62e8:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   b62ea:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   b62ee:	2400      	movs	r4, #0
   b62f0:	e7e0      	b.n	b62b4 <cJSON_ParseWithOpts+0x7c>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   b62f2:	9b01      	ldr	r3, [sp, #4]
   b62f4:	9a03      	ldr	r2, [sp, #12]
   b62f6:	4413      	add	r3, r2
   b62f8:	6033      	str	r3, [r6, #0]
   b62fa:	e7db      	b.n	b62b4 <cJSON_ParseWithOpts+0x7c>
   b62fc:	4613      	mov	r3, r2
   b62fe:	e7f1      	b.n	b62e4 <cJSON_ParseWithOpts+0xac>
   b6300:	2003e658 	.word	0x2003e658
   b6304:	2003d174 	.word	0x2003d174
   b6308:	000bd61f 	.word	0x000bd61f

000b630c <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   b630c:	2200      	movs	r2, #0
   b630e:	4611      	mov	r1, r2
   b6310:	f7ff bf92 	b.w	b6238 <cJSON_ParseWithOpts>

000b6314 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   b6314:	2100      	movs	r1, #0
   b6316:	f7ff bd8d 	b.w	b5e34 <print.constprop.0>

000b631a <cJSON_GetArraySize>:
    if (array == NULL)
   b631a:	b110      	cbz	r0, b6322 <cJSON_GetArraySize+0x8>
    child = array->child;
   b631c:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   b631e:	2000      	movs	r0, #0
    while(child != NULL)
   b6320:	b903      	cbnz	r3, b6324 <cJSON_GetArraySize+0xa>
}
   b6322:	4770      	bx	lr
        child = child->next;
   b6324:	681b      	ldr	r3, [r3, #0]
        size++;
   b6326:	3001      	adds	r0, #1
        child = child->next;
   b6328:	e7fa      	b.n	b6320 <cJSON_GetArraySize+0x6>

000b632a <cJSON_GetArrayItem>:
    if (index < 0)
   b632a:	2900      	cmp	r1, #0
   b632c:	db01      	blt.n	b6332 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   b632e:	f7ff ba5e 	b.w	b57ee <get_array_item>
}
   b6332:	2000      	movs	r0, #0
   b6334:	4770      	bx	lr

000b6336 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
   b6336:	2201      	movs	r2, #1
   b6338:	f7ff baae 	b.w	b5898 <get_object_item>

000b633c <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   b633c:	f7ff baea 	b.w	b5914 <add_item_to_array>

000b6340 <cJSON_ReplaceItemViaPointer>:
        newitem->prev->next = newitem;
    }
}

CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
{
   b6340:	b510      	push	{r4, lr}
    if ((parent == NULL) || (replacement == NULL) || (item == NULL))
   b6342:	b1d0      	cbz	r0, b637a <cJSON_ReplaceItemViaPointer+0x3a>
   b6344:	b1c2      	cbz	r2, b6378 <cJSON_ReplaceItemViaPointer+0x38>
   b6346:	b1c9      	cbz	r1, b637c <cJSON_ReplaceItemViaPointer+0x3c>
    {
        return false;
    }

    if (replacement == item)
   b6348:	428a      	cmp	r2, r1
   b634a:	d013      	beq.n	b6374 <cJSON_ReplaceItemViaPointer+0x34>
    {
        return true;
    }

    replacement->next = item->next;
   b634c:	680b      	ldr	r3, [r1, #0]
   b634e:	6013      	str	r3, [r2, #0]
    replacement->prev = item->prev;
   b6350:	684c      	ldr	r4, [r1, #4]
   b6352:	6054      	str	r4, [r2, #4]

    if (replacement->next != NULL)
   b6354:	b103      	cbz	r3, b6358 <cJSON_ReplaceItemViaPointer+0x18>
    {
        replacement->next->prev = replacement;
   b6356:	605a      	str	r2, [r3, #4]
    }
    if (replacement->prev != NULL)
   b6358:	6853      	ldr	r3, [r2, #4]
   b635a:	b103      	cbz	r3, b635e <cJSON_ReplaceItemViaPointer+0x1e>
    {
        replacement->prev->next = replacement;
   b635c:	601a      	str	r2, [r3, #0]
    }
    if (parent->child == item)
   b635e:	6883      	ldr	r3, [r0, #8]
   b6360:	4299      	cmp	r1, r3
    {
        parent->child = replacement;
    }

    item->next = NULL;
   b6362:	f04f 0300 	mov.w	r3, #0
        parent->child = replacement;
   b6366:	bf08      	it	eq
   b6368:	6082      	streq	r2, [r0, #8]
    item->prev = NULL;
   b636a:	e9c1 3300 	strd	r3, r3, [r1]
    cJSON_Delete(item);
   b636e:	4608      	mov	r0, r1
   b6370:	f7ff fdb6 	bl	b5ee0 <cJSON_Delete>
        return true;
   b6374:	2001      	movs	r0, #1
   b6376:	e000      	b.n	b637a <cJSON_ReplaceItemViaPointer+0x3a>
        return false;
   b6378:	4610      	mov	r0, r2

    return true;
}
   b637a:	bd10      	pop	{r4, pc}
        return false;
   b637c:	4608      	mov	r0, r1
   b637e:	e7fc      	b.n	b637a <cJSON_ReplaceItemViaPointer+0x3a>

000b6380 <cJSON_CreateNull>:
    replace_item_in_object(object, string, newitem, true);
}

/* Create basic types: */
CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)
{
   b6380:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b6382:	4b04      	ldr	r3, [pc, #16]	; (b6394 <cJSON_CreateNull+0x14>)
   b6384:	6818      	ldr	r0, [r3, #0]
   b6386:	f7ff fd9f 	bl	b5ec8 <cJSON_New_Item.isra.0>
    if(item)
   b638a:	b108      	cbz	r0, b6390 <cJSON_CreateNull+0x10>
    {
        item->type = cJSON_NULL;
   b638c:	2304      	movs	r3, #4
   b638e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b6390:	bd08      	pop	{r3, pc}
   b6392:	bf00      	nop
   b6394:	2003d174 	.word	0x2003d174

000b6398 <cJSON_AddNullToObject>:
{
   b6398:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b639a:	4605      	mov	r5, r0
   b639c:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   b639e:	f7ff ffef 	bl	b6380 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, false))
   b63a2:	9901      	ldr	r1, [sp, #4]
   b63a4:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   b63a6:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, false))
   b63a8:	2300      	movs	r3, #0
   b63aa:	4628      	mov	r0, r5
   b63ac:	f7ff fb72 	bl	b5a94 <add_item_to_object.constprop.0>
   b63b0:	4605      	mov	r5, r0
   b63b2:	b918      	cbnz	r0, b63bc <cJSON_AddNullToObject+0x24>
    cJSON_Delete(null);
   b63b4:	4620      	mov	r0, r4
   b63b6:	f7ff fd93 	bl	b5ee0 <cJSON_Delete>
    return NULL;
   b63ba:	462c      	mov	r4, r5
}
   b63bc:	4620      	mov	r0, r4
   b63be:	b003      	add	sp, #12
   b63c0:	bd30      	pop	{r4, r5, pc}
	...

000b63c4 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   b63c4:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b63c6:	4b04      	ldr	r3, [pc, #16]	; (b63d8 <cJSON_CreateArray+0x14>)
   b63c8:	6818      	ldr	r0, [r3, #0]
   b63ca:	f7ff fd7d 	bl	b5ec8 <cJSON_New_Item.isra.0>
    if(item)
   b63ce:	b108      	cbz	r0, b63d4 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   b63d0:	2320      	movs	r3, #32
   b63d2:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b63d4:	bd08      	pop	{r3, pc}
   b63d6:	bf00      	nop
   b63d8:	2003d174 	.word	0x2003d174

000b63dc <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   b63dc:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   b63de:	4b04      	ldr	r3, [pc, #16]	; (b63f0 <cJSON_CreateObject+0x14>)
   b63e0:	6818      	ldr	r0, [r3, #0]
   b63e2:	f7ff fd71 	bl	b5ec8 <cJSON_New_Item.isra.0>
    if (item)
   b63e6:	b108      	cbz	r0, b63ec <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   b63e8:	2340      	movs	r3, #64	; 0x40
   b63ea:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   b63ec:	bd08      	pop	{r3, pc}
   b63ee:	bf00      	nop
   b63f0:	2003d174 	.word	0x2003d174

000b63f4 <cJSON_IsInvalid>:
    *into = '\0';
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)
{
    if (item == NULL)
   b63f4:	b118      	cbz	r0, b63fe <cJSON_IsInvalid+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Invalid;
   b63f6:	7b00      	ldrb	r0, [r0, #12]
   b63f8:	fab0 f080 	clz	r0, r0
   b63fc:	0940      	lsrs	r0, r0, #5
}
   b63fe:	4770      	bx	lr

000b6400 <cJSON_IsBool>:
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   b6400:	b120      	cbz	r0, b640c <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   b6402:	68c0      	ldr	r0, [r0, #12]
   b6404:	f010 0003 	ands.w	r0, r0, #3
   b6408:	bf18      	it	ne
   b640a:	2001      	movne	r0, #1
}
   b640c:	4770      	bx	lr

000b640e <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   b640e:	b118      	cbz	r0, b6418 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   b6410:	7b00      	ldrb	r0, [r0, #12]
   b6412:	1f03      	subs	r3, r0, #4
   b6414:	4258      	negs	r0, r3
   b6416:	4158      	adcs	r0, r3
}
   b6418:	4770      	bx	lr

000b641a <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   b641a:	b120      	cbz	r0, b6426 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   b641c:	7b00      	ldrb	r0, [r0, #12]
   b641e:	f1a0 0308 	sub.w	r3, r0, #8
   b6422:	4258      	negs	r0, r3
   b6424:	4158      	adcs	r0, r3
}
   b6426:	4770      	bx	lr

000b6428 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   b6428:	b120      	cbz	r0, b6434 <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   b642a:	7b00      	ldrb	r0, [r0, #12]
   b642c:	f1a0 0310 	sub.w	r3, r0, #16
   b6430:	4258      	negs	r0, r3
   b6432:	4158      	adcs	r0, r3
}
   b6434:	4770      	bx	lr

000b6436 <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
    if (item == NULL)
   b6436:	b120      	cbz	r0, b6442 <cJSON_IsArray+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Array;
   b6438:	7b00      	ldrb	r0, [r0, #12]
   b643a:	f1a0 0320 	sub.w	r3, r0, #32
   b643e:	4258      	negs	r0, r3
   b6440:	4158      	adcs	r0, r3
}
   b6442:	4770      	bx	lr

000b6444 <cJSON_IsObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   b6444:	b120      	cbz	r0, b6450 <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   b6446:	7b00      	ldrb	r0, [r0, #12]
   b6448:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   b644c:	4258      	negs	r0, r3
   b644e:	4158      	adcs	r0, r3
}
   b6450:	4770      	bx	lr
	...

000b6454 <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   b6454:	4b01      	ldr	r3, [pc, #4]	; (b645c <cJSON_free+0x8>)
   b6456:	685b      	ldr	r3, [r3, #4]
   b6458:	4718      	bx	r3
   b645a:	bf00      	nop
   b645c:	2003d174 	.word	0x2003d174

000b6460 <replace_item_in_object.isra.0>:
static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
   b6460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6462:	4606      	mov	r6, r0
   b6464:	460d      	mov	r5, r1
   b6466:	461f      	mov	r7, r3
    if ((replacement == NULL) || (string == NULL))
   b6468:	4614      	mov	r4, r2
   b646a:	b1da      	cbz	r2, b64a4 <replace_item_in_object.isra.0+0x44>
   b646c:	b1d1      	cbz	r1, b64a4 <replace_item_in_object.isra.0+0x44>
    if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
   b646e:	68d3      	ldr	r3, [r2, #12]
   b6470:	059b      	lsls	r3, r3, #22
   b6472:	d403      	bmi.n	b647c <replace_item_in_object.isra.0+0x1c>
   b6474:	6a10      	ldr	r0, [r2, #32]
   b6476:	b108      	cbz	r0, b647c <replace_item_in_object.isra.0+0x1c>
        cJSON_free(replacement->string);
   b6478:	f7ff ffec 	bl	b6454 <cJSON_free>
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   b647c:	4628      	mov	r0, r5
   b647e:	f7ff faf1 	bl	b5a64 <cJSON_strdup.constprop.0>
    replacement->type &= ~cJSON_StringIsConst;
   b6482:	68e3      	ldr	r3, [r4, #12]
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   b6484:	6220      	str	r0, [r4, #32]
    replacement->type &= ~cJSON_StringIsConst;
   b6486:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b648a:	463a      	mov	r2, r7
   b648c:	4629      	mov	r1, r5
    replacement->type &= ~cJSON_StringIsConst;
   b648e:	60e3      	str	r3, [r4, #12]
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b6490:	4630      	mov	r0, r6
   b6492:	f7ff fa01 	bl	b5898 <get_object_item>
   b6496:	4622      	mov	r2, r4
   b6498:	4601      	mov	r1, r0
   b649a:	4630      	mov	r0, r6
}
   b649c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   b64a0:	f7ff bf4e 	b.w	b6340 <cJSON_ReplaceItemViaPointer>
}
   b64a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b64a6 <cJSON_ReplaceItemInObjectCaseSensitive>:
    replace_item_in_object(object, string, newitem, true);
   b64a6:	2301      	movs	r3, #1
   b64a8:	f7ff bfda 	b.w	b6460 <replace_item_in_object.isra.0>

000b64ac <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b64ac:	b510      	push	{r4, lr}
   b64ae:	4604      	mov	r4, r0
   b64b0:	f003 fbca 	bl	b9c48 <_ZN9TCPClientC1Ev>
{

}
   b64b4:	4620      	mov	r0, r4
   b64b6:	bd10      	pop	{r4, pc}

000b64b8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b64b8:	b538      	push	{r3, r4, r5, lr}
   b64ba:	4604      	mov	r4, r0
   b64bc:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b64be:	f002 fa57 	bl	b8970 <_ZN5Print5printEPKc>
    client.print(": ");
   b64c2:	4905      	ldr	r1, [pc, #20]	; (b64d8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b64c4:	4620      	mov	r0, r4
   b64c6:	f002 fa53 	bl	b8970 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b64ca:	4629      	mov	r1, r5
   b64cc:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b64ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b64d2:	f002 ba66 	b.w	b89a2 <_ZN5Print7printlnEPKc>
   b64d6:	bf00      	nop
   b64d8:	000bd23d 	.word	0x000bd23d

000b64dc <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b64dc:	b538      	push	{r3, r4, r5, lr}
   b64de:	4605      	mov	r5, r0
   b64e0:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b64e2:	f002 fa45 	bl	b8970 <_ZN5Print5printEPKc>
    client.print(": ");
   b64e6:	490b      	ldr	r1, [pc, #44]	; (b6514 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b64e8:	4628      	mov	r0, r5
   b64ea:	f002 fa41 	bl	b8970 <_ZN5Print5printEPKc>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b64ee:	2c00      	cmp	r4, #0
   b64f0:	da0d      	bge.n	b650e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b64f2:	212d      	movs	r1, #45	; 0x2d
   b64f4:	4628      	mov	r0, r5
   b64f6:	f002 fa3f 	bl	b8978 <_ZN5Print5printEc>
            val = -n;
   b64fa:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b64fc:	4628      	mov	r0, r5
   b64fe:	220a      	movs	r2, #10
   b6500:	f002 fa63 	bl	b89ca <_ZN5Print11printNumberEmh>
        n += println();
   b6504:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b650a:	f002 ba3e 	b.w	b898a <_ZN5Print7printlnEv>
            val = n;
   b650e:	4621      	mov	r1, r4
   b6510:	e7f4      	b.n	b64fc <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b6512:	bf00      	nop
   b6514:	000bd23d 	.word	0x000bd23d

000b6518 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b651c:	460e      	mov	r6, r1
   b651e:	b091      	sub	sp, #68	; 0x44
   b6520:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b6522:	f04f 33ff 	mov.w	r3, #4294967295
   b6526:	6013      	str	r3, [r2, #0]
{
   b6528:	4604      	mov	r4, r0
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b652a:	2100      	movs	r1, #0
   b652c:	4630      	mov	r0, r6
   b652e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b6532:	4617      	mov	r7, r2
   b6534:	f000 ff6f 	bl	b7416 <_ZNK6String6equalsEPKc>
   b6538:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b653c:	4603      	mov	r3, r0
   b653e:	b998      	cbnz	r0, b6568 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b6540:	f1be 0f00 	cmp.w	lr, #0
   b6544:	bf14      	ite	ne
   b6546:	4672      	movne	r2, lr
   b6548:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b654a:	6831      	ldr	r1, [r6, #0]
   b654c:	b292      	uxth	r2, r2
   b654e:	4620      	mov	r0, r4
   b6550:	f003 f97a 	bl	b9848 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b6554:	1e05      	subs	r5, r0, #0
   b6556:	bf18      	it	ne
   b6558:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b655a:	b9c5      	cbnz	r5, b658e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b655c:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b655e:	b011      	add	sp, #68	; 0x44
   b6560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b6564:	f003 bb26 	b.w	b9bb4 <_ZN9TCPClient4stopEv>
class IPAddress : public Printable {
   b6568:	4b75      	ldr	r3, [pc, #468]	; (b6740 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   b656a:	930a      	str	r3, [sp, #40]	; 0x28
   b656c:	f106 0c14 	add.w	ip, r6, #20
   b6570:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6574:	ad0b      	add	r5, sp, #44	; 0x2c
   b6576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6578:	f8dc 3000 	ldr.w	r3, [ip]
   b657c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b657e:	fa1f f28e 	uxth.w	r2, lr
   b6582:	2300      	movs	r3, #0
   b6584:	a90a      	add	r1, sp, #40	; 0x28
   b6586:	4620      	mov	r0, r4
   b6588:	f003 fa3e 	bl	b9a08 <_ZN9TCPClient7connectE9IPAddresstm>
   b658c:	e7e2      	b.n	b6554 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b658e:	4649      	mov	r1, r9
   b6590:	4620      	mov	r0, r4
   b6592:	f002 f9ed 	bl	b8970 <_ZN5Print5printEPKc>
    client.print(" ");
   b6596:	496b      	ldr	r1, [pc, #428]	; (b6744 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b6598:	4620      	mov	r0, r4
   b659a:	f002 f9e9 	bl	b8970 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b659e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b65a0:	4620      	mov	r0, r4
   b65a2:	f002 f9e5 	bl	b8970 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b65a6:	4968      	ldr	r1, [pc, #416]	; (b6748 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b65a8:	4620      	mov	r0, r4
   b65aa:	f002 f9e1 	bl	b8970 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b65ae:	4967      	ldr	r1, [pc, #412]	; (b674c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b65b0:	4a67      	ldr	r2, [pc, #412]	; (b6750 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b65b2:	4620      	mov	r0, r4
   b65b4:	f7ff ff80 	bl	b64b8 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b65b8:	2100      	movs	r1, #0
   b65ba:	4630      	mov	r0, r6
   b65bc:	f000 ff2b 	bl	b7416 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b65c0:	b920      	cbnz	r0, b65cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b65c2:	6832      	ldr	r2, [r6, #0]
   b65c4:	4963      	ldr	r1, [pc, #396]	; (b6754 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b65c6:	4620      	mov	r0, r4
   b65c8:	f7ff ff76 	bl	b64b8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b65cc:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b65d0:	2100      	movs	r1, #0
   b65d2:	4650      	mov	r0, sl
   b65d4:	f000 ff1f 	bl	b7416 <_ZNK6String6equalsEPKc>
   b65d8:	b928      	cbnz	r0, b65e6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b65da:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b65dc:	495e      	ldr	r1, [pc, #376]	; (b6758 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b65de:	4620      	mov	r0, r4
   b65e0:	f7ff ff7c 	bl	b64dc <_ZN10HttpClient10sendHeaderEPKci>
   b65e4:	e006      	b.n	b65f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b65e6:	495d      	ldr	r1, [pc, #372]	; (b675c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b65e8:	4648      	mov	r0, r9
   b65ea:	f004 fc52 	bl	bae92 <strcmp>
   b65ee:	4602      	mov	r2, r0
   b65f0:	2800      	cmp	r0, #0
   b65f2:	d0f3      	beq.n	b65dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b65f4:	f1b8 0f00 	cmp.w	r8, #0
   b65f8:	d00e      	beq.n	b6618 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b65fa:	f8d8 1000 	ldr.w	r1, [r8]
   b65fe:	b159      	cbz	r1, b6618 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b6600:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6604:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6606:	b122      	cbz	r2, b6612 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b6608:	f7ff ff56 	bl	b64b8 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b660c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b6610:	e7f3      	b.n	b65fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b6612:	f002 f9c6 	bl	b89a2 <_ZN5Print7printlnEPKc>
}
   b6616:	e7f9      	b.n	b660c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b6618:	4620      	mov	r0, r4
   b661a:	f002 f9b6 	bl	b898a <_ZN5Print7printlnEv>
    client.flush();
   b661e:	4620      	mov	r0, r4
   b6620:	f003 f896 	bl	b9750 <_ZN9TCPClient5flushEv>
   b6624:	2100      	movs	r1, #0
   b6626:	4650      	mov	r0, sl
   b6628:	f000 fef5 	bl	b7416 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b662c:	b918      	cbnz	r0, b6636 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b662e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6630:	4620      	mov	r0, r4
   b6632:	f002 f9b6 	bl	b89a2 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6636:	f104 0a1c 	add.w	sl, r4, #28
   b663a:	f640 0224 	movw	r2, #2084	; 0x824
   b663e:	2100      	movs	r1, #0
   b6640:	4650      	mov	r0, sl
   b6642:	f004 fbe0 	bl	bae06 <memset>
   b6646:	f000 fa0b 	bl	b6a60 <HAL_Timer_Get_Milli_Seconds>
   b664a:	9001      	str	r0, [sp, #4]
   b664c:	f000 fa08 	bl	b6a60 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b6650:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6654:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b6656:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b665a:	4620      	mov	r0, r4
   b665c:	f003 fa50 	bl	b9b00 <_ZN9TCPClient9availableEv>
   b6660:	b1d8      	cbz	r0, b669a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
   b6662:	4620      	mov	r0, r4
   b6664:	f003 f85a 	bl	b971c <_ZN9TCPClient4readEv>
   b6668:	4681      	mov	r9, r0
   b666a:	f000 f9f9 	bl	b6a60 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b666e:	f640 0322 	movw	r3, #2082	; 0x822
   b6672:	429e      	cmp	r6, r3
   b6674:	9001      	str	r0, [sp, #4]
   b6676:	d804      	bhi.n	b6682 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b6678:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b667a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b667e:	3601      	adds	r6, #1
        while (client.available()) {
   b6680:	e7eb      	b.n	b665a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b6682:	f640 0323 	movw	r3, #2083	; 0x823
   b6686:	429e      	cmp	r6, r3
   b6688:	d1f9      	bne.n	b667e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b668a:	2300      	movs	r3, #0
   b668c:	f884 383f 	strb.w	r3, [r4, #2111]	; 0x83f
                client.stop();
   b6690:	4620      	mov	r0, r4
   b6692:	f003 fa8f 	bl	b9bb4 <_ZN9TCPClient4stopEv>
                error = true;
   b6696:	46a8      	mov	r8, r5
   b6698:	e7f1      	b.n	b667e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b669a:	19a3      	adds	r3, r4, r6
   b669c:	7718      	strb	r0, [r3, #28]
   b669e:	f000 f9df 	bl	b6a60 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b66a2:	9b01      	ldr	r3, [sp, #4]
   b66a4:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b66a8:	f1b8 0f00 	cmp.w	r8, #0
   b66ac:	d104      	bne.n	b66b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
   b66ae:	45d9      	cmp	r9, fp
   b66b0:	d802      	bhi.n	b66b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
   b66b2:	20c8      	movs	r0, #200	; 0xc8
   b66b4:	f002 faca 	bl	b8c4c <delay>
    } while (client.connected() && !timeout && !error);
   b66b8:	4620      	mov	r0, r4
   b66ba:	f003 f943 	bl	b9944 <_ZN9TCPClient9connectedEv>
   b66be:	b120      	cbz	r0, b66ca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b66c0:	45d9      	cmp	r9, fp
   b66c2:	d802      	bhi.n	b66ca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b66c4:	f1b8 0f00 	cmp.w	r8, #0
   b66c8:	d0c7      	beq.n	b665a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b66ca:	4620      	mov	r0, r4
   b66cc:	f003 fa72 	bl	b9bb4 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b66d0:	4651      	mov	r1, sl
   b66d2:	a802      	add	r0, sp, #8
   b66d4:	f000 fe15 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b66d8:	230c      	movs	r3, #12
   b66da:	2209      	movs	r2, #9
   b66dc:	a902      	add	r1, sp, #8
   b66de:	a806      	add	r0, sp, #24
   b66e0:	f000 febe 	bl	b7460 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b66e4:	491e      	ldr	r1, [pc, #120]	; (b6760 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b66e6:	a80a      	add	r0, sp, #40	; 0x28
   b66e8:	f000 fe0b 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
   b66ec:	a90a      	add	r1, sp, #40	; 0x28
   b66ee:	a802      	add	r0, sp, #8
   b66f0:	f000 feb2 	bl	b7458 <_ZNK6String7indexOfERKS_>
   b66f4:	4604      	mov	r4, r0
   b66f6:	a80a      	add	r0, sp, #40	; 0x28
   b66f8:	f000 fdb8 	bl	b726c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b66fc:	1c63      	adds	r3, r4, #1
   b66fe:	d108      	bne.n	b6712 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
    String statusCode = raw_response.substring(9,12);
   b6700:	a806      	add	r0, sp, #24
   b6702:	f000 fdb3 	bl	b726c <_ZN6StringD1Ev>
    String raw_response(buffer);
   b6706:	a802      	add	r0, sp, #8
   b6708:	f000 fdb0 	bl	b726c <_ZN6StringD1Ev>
}
   b670c:	b011      	add	sp, #68	; 0x44
   b670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b6712:	1d3d      	adds	r5, r7, #4
   b6714:	4913      	ldr	r1, [pc, #76]	; (b6764 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b6716:	4628      	mov	r0, r5
   b6718:	f000 fe2c 	bl	b7374 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b671c:	1d22      	adds	r2, r4, #4
   b671e:	a902      	add	r1, sp, #8
   b6720:	a80a      	add	r0, sp, #40	; 0x28
   b6722:	f000 febd 	bl	b74a0 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6726:	a90a      	add	r1, sp, #40	; 0x28
   b6728:	4628      	mov	r0, r5
   b672a:	f000 fe5f 	bl	b73ec <_ZN6String6concatERKS_>
   b672e:	a80a      	add	r0, sp, #40	; 0x28
   b6730:	f000 fd9c 	bl	b726c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6734:	9806      	ldr	r0, [sp, #24]
   b6736:	f004 fb2a 	bl	bad8e <atoi>
   b673a:	6038      	str	r0, [r7, #0]
   b673c:	e7e0      	b.n	b6700 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
   b673e:	bf00      	nop
   b6740:	000bd900 	.word	0x000bd900
   b6744:	000bd24d 	.word	0x000bd24d
   b6748:	000bd623 	.word	0x000bd623
   b674c:	000bd635 	.word	0x000bd635
   b6750:	000bd62f 	.word	0x000bd62f
   b6754:	000bd640 	.word	0x000bd640
   b6758:	000bd4c8 	.word	0x000bd4c8
   b675c:	000bd645 	.word	0x000bd645
   b6760:	000bd64a 	.word	0x000bd64a
   b6764:	000bd64e 	.word	0x000bd64e

000b6768 <_ZN9JSONClassD1Ev>:
#endif
}

JSONClass::~JSONClass()
{
}
   b6768:	4770      	bx	lr

000b676a <_ZN9JSONClassD0Ev>:
JSONClass::~JSONClass()
   b676a:	b510      	push	{r4, lr}
}
   b676c:	2104      	movs	r1, #4
JSONClass::~JSONClass()
   b676e:	4604      	mov	r4, r0
}
   b6770:	f7fd fc95 	bl	b409e <_ZdlPvj>
   b6774:	4620      	mov	r0, r4
   b6776:	bd10      	pop	{r4, pc}

000b6778 <_ZN9JSONClass5parseERK6String>:
{
  return JSONVar::parse(s);
}

JSONVar JSONClass::parse(const String& s)
{
   b6778:	b510      	push	{r4, lr}
  return JSONVar::parse(s);
   b677a:	4611      	mov	r1, r2
{
   b677c:	4604      	mov	r4, r0
  return JSONVar::parse(s);
   b677e:	f000 f863 	bl	b6848 <_ZN7JSONVar5parseERK6String>
}
   b6782:	4620      	mov	r0, r4
   b6784:	bd10      	pop	{r4, pc}

000b6786 <_ZN9JSONClass7typeof_ERK7JSONVar>:
{
  return JSONVar::stringify(value);
}

String JSONClass::typeof(const JSONVar& value)
{
   b6786:	b510      	push	{r4, lr}
  return JSONVar::typeof(value);
   b6788:	4611      	mov	r1, r2
{
   b678a:	4604      	mov	r4, r0
  return JSONVar::typeof(value);
   b678c:	f000 f86a 	bl	b6864 <_ZN7JSONVar7typeof_ERKS_>
}
   b6790:	4620      	mov	r0, r4
   b6792:	bd10      	pop	{r4, pc}

000b6794 <_GLOBAL__sub_I__ZN9JSONClassC2Ev>:
JSONClass::JSONClass()
   b6794:	4b01      	ldr	r3, [pc, #4]	; (b679c <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0x8>)
   b6796:	4a02      	ldr	r2, [pc, #8]	; (b67a0 <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0xc>)
   b6798:	601a      	str	r2, [r3, #0]

JSONClass JSON;
   b679a:	4770      	bx	lr
   b679c:	2003e660 	.word	0x2003e660
   b67a0:	000bd658 	.word	0x000bd658

000b67a4 <_ZN7JSONVarD1Ev>:
JSONVar::JSONVar() :
  JSONVar(NULL, NULL)
{
}

JSONVar::~JSONVar()
   b67a4:	b510      	push	{r4, lr}
   b67a6:	4b05      	ldr	r3, [pc, #20]	; (b67bc <_ZN7JSONVarD1Ev+0x18>)
   b67a8:	6003      	str	r3, [r0, #0]
   b67aa:	4604      	mov	r4, r0
{
  if (_json != NULL && _parent == NULL) {
   b67ac:	6840      	ldr	r0, [r0, #4]
   b67ae:	b118      	cbz	r0, b67b8 <_ZN7JSONVarD1Ev+0x14>
   b67b0:	68a3      	ldr	r3, [r4, #8]
   b67b2:	b90b      	cbnz	r3, b67b8 <_ZN7JSONVarD1Ev+0x14>
    cJSON_Delete(_json);
   b67b4:	f7ff fb94 	bl	b5ee0 <cJSON_Delete>

    _json = NULL;
  }
}
   b67b8:	4620      	mov	r0, r4
   b67ba:	bd10      	pop	{r4, pc}
   b67bc:	000bd694 	.word	0x000bd694

000b67c0 <_ZN7JSONVarD0Ev>:
JSONVar::~JSONVar()
   b67c0:	b510      	push	{r4, lr}
   b67c2:	4604      	mov	r4, r0
}
   b67c4:	f7ff ffee 	bl	b67a4 <_ZN7JSONVarD1Ev>
   b67c8:	4620      	mov	r0, r4
   b67ca:	210c      	movs	r1, #12
   b67cc:	f7fd fc67 	bl	b409e <_ZdlPvj>
   b67d0:	4620      	mov	r0, r4
   b67d2:	bd10      	pop	{r4, pc}

000b67d4 <_ZNK7JSONVar7printToER5Print>:

size_t JSONVar::printTo(Print& p) const
{
   b67d4:	b538      	push	{r3, r4, r5, lr}
  if (_json == NULL) {
   b67d6:	6840      	ldr	r0, [r0, #4]
{
   b67d8:	460c      	mov	r4, r1
  if (_json == NULL) {
   b67da:	b160      	cbz	r0, b67f6 <_ZNK7JSONVar7printToER5Print+0x22>
    return 0;
  }

  char* s = cJSON_PrintUnformatted(_json);
   b67dc:	f7ff fd9a 	bl	b6314 <cJSON_PrintUnformatted>
   b67e0:	4605      	mov	r5, r0

  size_t writen = p.print(s);
   b67e2:	4601      	mov	r1, r0
   b67e4:	4620      	mov	r0, r4
   b67e6:	f002 f8c3 	bl	b8970 <_ZN5Print5printEPKc>
   b67ea:	4604      	mov	r4, r0

  cJSON_free(s);
   b67ec:	4628      	mov	r0, r5
   b67ee:	f7ff fe31 	bl	b6454 <cJSON_free>

  return writen;
}
   b67f2:	4620      	mov	r0, r4
   b67f4:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   b67f6:	4604      	mov	r4, r0
   b67f8:	e7fb      	b.n	b67f2 <_ZNK7JSONVar7printToER5Print+0x1e>
   b67fa:	0000      	movs	r0, r0
   b67fc:	0000      	movs	r0, r0
	...

000b6800 <_ZNK7JSONVarcvdEv>:
{
  return cJSON_IsNumber(_json) ? _json->valueint : 0;
}

JSONVar::operator double() const
{
   b6800:	b510      	push	{r4, lr}
   b6802:	4604      	mov	r4, r0
  return cJSON_IsNumber(_json) ? _json->valuedouble : NAN;
   b6804:	6840      	ldr	r0, [r0, #4]
   b6806:	f7ff fe08 	bl	b641a <cJSON_IsNumber>
   b680a:	b118      	cbz	r0, b6814 <_ZNK7JSONVarcvdEv+0x14>
   b680c:	6863      	ldr	r3, [r4, #4]
   b680e:	ed93 0b06 	vldr	d0, [r3, #24]
}
   b6812:	bd10      	pop	{r4, pc}
  return cJSON_IsNumber(_json) ? _json->valuedouble : NAN;
   b6814:	ed9f 0b02 	vldr	d0, [pc, #8]	; b6820 <_ZNK7JSONVarcvdEv+0x20>
   b6818:	e7fb      	b.n	b6812 <_ZNK7JSONVarcvdEv+0x12>
   b681a:	bf00      	nop
   b681c:	f3af 8000 	nop.w
   b6820:	00000000 	.word	0x00000000
   b6824:	7ff80000 	.word	0x7ff80000

000b6828 <_ZNK7JSONVar14hasOwnPropertyEPKc>:

  return JSONVar(cJSON_CreateStringArray(keys, length), NULL);
}

bool JSONVar::hasOwnProperty(const char* key) const
{
   b6828:	b513      	push	{r0, r1, r4, lr}
   b682a:	4604      	mov	r4, r0
  if (!cJSON_IsObject(_json)) {
   b682c:	6840      	ldr	r0, [r0, #4]
{
   b682e:	9101      	str	r1, [sp, #4]
  if (!cJSON_IsObject(_json)) {
   b6830:	f7ff fe08 	bl	b6444 <cJSON_IsObject>
   b6834:	b130      	cbz	r0, b6844 <_ZNK7JSONVar14hasOwnPropertyEPKc+0x1c>
    return false;
  }

  cJSON* json = cJSON_GetObjectItemCaseSensitive(_json, key);
   b6836:	9901      	ldr	r1, [sp, #4]
   b6838:	6860      	ldr	r0, [r4, #4]
   b683a:	f7ff fd7c 	bl	b6336 <cJSON_GetObjectItemCaseSensitive>

  return (json != NULL);
   b683e:	3800      	subs	r0, #0
   b6840:	bf18      	it	ne
   b6842:	2001      	movne	r0, #1
}
   b6844:	b002      	add	sp, #8
   b6846:	bd10      	pop	{r4, pc}

000b6848 <_ZN7JSONVar5parseERK6String>:

  return JSONVar(json, NULL);
}

JSONVar JSONVar::parse(const String& s)
{
   b6848:	b510      	push	{r4, lr}
   b684a:	4604      	mov	r4, r0
  cJSON* json = cJSON_Parse(s);
   b684c:	6808      	ldr	r0, [r1, #0]
   b684e:	f7ff fd5d 	bl	b630c <cJSON_Parse>
  _parent(parent)
   b6852:	4b03      	ldr	r3, [pc, #12]	; (b6860 <_ZN7JSONVar5parseERK6String+0x18>)
   b6854:	e9c4 3000 	strd	r3, r0, [r4]
   b6858:	2300      	movs	r3, #0
   b685a:	60a3      	str	r3, [r4, #8]
  return parse(s.c_str());
}
   b685c:	4620      	mov	r0, r4
   b685e:	bd10      	pop	{r4, pc}
   b6860:	000bd694 	.word	0x000bd694

000b6864 <_ZN7JSONVar7typeof_ERKS_>:

  return str;
}

String JSONVar::typeof_(const JSONVar& value)
{
   b6864:	b538      	push	{r3, r4, r5, lr}
  struct cJSON* json = value._json;
   b6866:	684d      	ldr	r5, [r1, #4]
{
   b6868:	4604      	mov	r4, r0

  if (json == NULL ||  cJSON_IsInvalid(json)) {
   b686a:	b92d      	cbnz	r5, b6878 <_ZN7JSONVar7typeof_ERKS_+0x14>
    return "undefined";
   b686c:	4918      	ldr	r1, [pc, #96]	; (b68d0 <_ZN7JSONVar7typeof_ERKS_+0x6c>)
  } else if (cJSON_IsArray(json)) {
    return "array"; // TODO: should this return "object" to be more JS like?
  } else if (cJSON_IsObject(json)) {
    return "object";
  } else {
    return "unknown";
   b686e:	4620      	mov	r0, r4
   b6870:	f000 fd47 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
  }
}
   b6874:	4620      	mov	r0, r4
   b6876:	bd38      	pop	{r3, r4, r5, pc}
  if (json == NULL ||  cJSON_IsInvalid(json)) {
   b6878:	4628      	mov	r0, r5
   b687a:	f7ff fdbb 	bl	b63f4 <cJSON_IsInvalid>
   b687e:	2800      	cmp	r0, #0
   b6880:	d1f4      	bne.n	b686c <_ZN7JSONVar7typeof_ERKS_+0x8>
  } else if (cJSON_IsBool(json)) {
   b6882:	4628      	mov	r0, r5
   b6884:	f7ff fdbc 	bl	b6400 <cJSON_IsBool>
   b6888:	b108      	cbz	r0, b688e <_ZN7JSONVar7typeof_ERKS_+0x2a>
    return "boolean";
   b688a:	4912      	ldr	r1, [pc, #72]	; (b68d4 <_ZN7JSONVar7typeof_ERKS_+0x70>)
   b688c:	e7ef      	b.n	b686e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsNull(json)) {
   b688e:	4628      	mov	r0, r5
   b6890:	f7ff fdbd 	bl	b640e <cJSON_IsNull>
   b6894:	b108      	cbz	r0, b689a <_ZN7JSONVar7typeof_ERKS_+0x36>
    return "null"; // TODO: should this return "object" to be more JS like?
   b6896:	4910      	ldr	r1, [pc, #64]	; (b68d8 <_ZN7JSONVar7typeof_ERKS_+0x74>)
   b6898:	e7e9      	b.n	b686e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsNumber(json)) {
   b689a:	4628      	mov	r0, r5
   b689c:	f7ff fdbd 	bl	b641a <cJSON_IsNumber>
   b68a0:	b108      	cbz	r0, b68a6 <_ZN7JSONVar7typeof_ERKS_+0x42>
    return "number";
   b68a2:	490e      	ldr	r1, [pc, #56]	; (b68dc <_ZN7JSONVar7typeof_ERKS_+0x78>)
   b68a4:	e7e3      	b.n	b686e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsString(json)) {
   b68a6:	4628      	mov	r0, r5
   b68a8:	f7ff fdbe 	bl	b6428 <cJSON_IsString>
   b68ac:	b108      	cbz	r0, b68b2 <_ZN7JSONVar7typeof_ERKS_+0x4e>
    return "string";
   b68ae:	490c      	ldr	r1, [pc, #48]	; (b68e0 <_ZN7JSONVar7typeof_ERKS_+0x7c>)
   b68b0:	e7dd      	b.n	b686e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsArray(json)) {
   b68b2:	4628      	mov	r0, r5
   b68b4:	f7ff fdbf 	bl	b6436 <cJSON_IsArray>
   b68b8:	b108      	cbz	r0, b68be <_ZN7JSONVar7typeof_ERKS_+0x5a>
    return "array"; // TODO: should this return "object" to be more JS like?
   b68ba:	490a      	ldr	r1, [pc, #40]	; (b68e4 <_ZN7JSONVar7typeof_ERKS_+0x80>)
   b68bc:	e7d7      	b.n	b686e <_ZN7JSONVar7typeof_ERKS_+0xa>
  } else if (cJSON_IsObject(json)) {
   b68be:	4628      	mov	r0, r5
   b68c0:	f7ff fdc0 	bl	b6444 <cJSON_IsObject>
   b68c4:	b108      	cbz	r0, b68ca <_ZN7JSONVar7typeof_ERKS_+0x66>
    return "object";
   b68c6:	4908      	ldr	r1, [pc, #32]	; (b68e8 <_ZN7JSONVar7typeof_ERKS_+0x84>)
   b68c8:	e7d1      	b.n	b686e <_ZN7JSONVar7typeof_ERKS_+0xa>
    return "unknown";
   b68ca:	4908      	ldr	r1, [pc, #32]	; (b68ec <_ZN7JSONVar7typeof_ERKS_+0x88>)
   b68cc:	e7cf      	b.n	b686e <_ZN7JSONVar7typeof_ERKS_+0xa>
   b68ce:	bf00      	nop
   b68d0:	000bd37d 	.word	0x000bd37d
   b68d4:	000bd660 	.word	0x000bd660
   b68d8:	000bd603 	.word	0x000bd603
   b68dc:	000bd668 	.word	0x000bd668
   b68e0:	000bd66f 	.word	0x000bd66f
   b68e4:	000bd676 	.word	0x000bd676
   b68e8:	000bd67c 	.word	0x000bd67c
   b68ec:	000bd683 	.word	0x000bd683

000b68f0 <_ZN7JSONVar11replaceJsonEP5cJSON>:

void JSONVar::replaceJson(struct cJSON* json)
{
   b68f0:	b538      	push	{r3, r4, r5, lr}
  cJSON* old = _json;
   b68f2:	6845      	ldr	r5, [r0, #4]

  _json = json;
   b68f4:	6041      	str	r1, [r0, #4]
{
   b68f6:	4604      	mov	r4, r0

  if (old) {
   b68f8:	b1dd      	cbz	r5, b6932 <_ZN7JSONVar11replaceJsonEP5cJSON+0x42>
    if (_parent) {
   b68fa:	6880      	ldr	r0, [r0, #8]
   b68fc:	b1a0      	cbz	r0, b6928 <_ZN7JSONVar11replaceJsonEP5cJSON+0x38>
      if (cJSON_IsObject(_parent)) {
   b68fe:	f7ff fda1 	bl	b6444 <cJSON_IsObject>
   b6902:	b130      	cbz	r0, b6912 <_ZN7JSONVar11replaceJsonEP5cJSON+0x22>
        cJSON_ReplaceItemInObjectCaseSensitive(_parent, old->string, _json);
   b6904:	6862      	ldr	r2, [r4, #4]
   b6906:	6a29      	ldr	r1, [r5, #32]
   b6908:	68a0      	ldr	r0, [r4, #8]
      }
    } else {
      cJSON_Delete(old);
    }
  }
}
   b690a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        cJSON_ReplaceItemInObjectCaseSensitive(_parent, old->string, _json);
   b690e:	f7ff bdca 	b.w	b64a6 <cJSON_ReplaceItemInObjectCaseSensitive>
      } else if (cJSON_IsArray(_parent)) {
   b6912:	68a0      	ldr	r0, [r4, #8]
   b6914:	f7ff fd8f 	bl	b6436 <cJSON_IsArray>
   b6918:	b158      	cbz	r0, b6932 <_ZN7JSONVar11replaceJsonEP5cJSON+0x42>
        cJSON_ReplaceItemViaPointer(_parent, old, _json);
   b691a:	6862      	ldr	r2, [r4, #4]
   b691c:	68a0      	ldr	r0, [r4, #8]
   b691e:	4629      	mov	r1, r5
}
   b6920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        cJSON_ReplaceItemViaPointer(_parent, old, _json);
   b6924:	f7ff bd0c 	b.w	b6340 <cJSON_ReplaceItemViaPointer>
      cJSON_Delete(old);
   b6928:	4628      	mov	r0, r5
}
   b692a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      cJSON_Delete(old);
   b692e:	f7ff bad7 	b.w	b5ee0 <cJSON_Delete>
}
   b6932:	bd38      	pop	{r3, r4, r5, pc}

000b6934 <_ZN7JSONVarixEPKc>:
{
   b6934:	b570      	push	{r4, r5, r6, lr}
   b6936:	4605      	mov	r5, r0
  if (!cJSON_IsObject(_json)) {
   b6938:	6848      	ldr	r0, [r1, #4]
{
   b693a:	460c      	mov	r4, r1
   b693c:	4616      	mov	r6, r2
  if (!cJSON_IsObject(_json)) {
   b693e:	f7ff fd81 	bl	b6444 <cJSON_IsObject>
   b6942:	b928      	cbnz	r0, b6950 <_ZN7JSONVarixEPKc+0x1c>
    replaceJson(cJSON_CreateObject());
   b6944:	f7ff fd4a 	bl	b63dc <cJSON_CreateObject>
   b6948:	4601      	mov	r1, r0
   b694a:	4620      	mov	r0, r4
   b694c:	f7ff ffd0 	bl	b68f0 <_ZN7JSONVar11replaceJsonEP5cJSON>
  cJSON* json = cJSON_GetObjectItemCaseSensitive(_json, key);
   b6950:	6860      	ldr	r0, [r4, #4]
   b6952:	4631      	mov	r1, r6
   b6954:	f7ff fcef 	bl	b6336 <cJSON_GetObjectItemCaseSensitive>
  if (json == NULL) {
   b6958:	b918      	cbnz	r0, b6962 <_ZN7JSONVarixEPKc+0x2e>
    json = cJSON_AddNullToObject(_json, key);
   b695a:	6860      	ldr	r0, [r4, #4]
   b695c:	4631      	mov	r1, r6
   b695e:	f7ff fd1b 	bl	b6398 <cJSON_AddNullToObject>
  _parent(parent)
   b6962:	4a03      	ldr	r2, [pc, #12]	; (b6970 <_ZN7JSONVarixEPKc+0x3c>)
  return JSONVar(json, _json);    
   b6964:	6863      	ldr	r3, [r4, #4]
  _parent(parent)
   b6966:	60ab      	str	r3, [r5, #8]
   b6968:	e9c5 2000 	strd	r2, r0, [r5]
}
   b696c:	4628      	mov	r0, r5
   b696e:	bd70      	pop	{r4, r5, r6, pc}
   b6970:	000bd694 	.word	0x000bd694

000b6974 <_ZN7JSONVarixEi>:
{
   b6974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6976:	4606      	mov	r6, r0
  if (!cJSON_IsArray(_json)) {
   b6978:	6848      	ldr	r0, [r1, #4]
{
   b697a:	460d      	mov	r5, r1
   b697c:	4617      	mov	r7, r2
  if (!cJSON_IsArray(_json)) {
   b697e:	f7ff fd5a 	bl	b6436 <cJSON_IsArray>
   b6982:	b928      	cbnz	r0, b6990 <_ZN7JSONVarixEi+0x1c>
    replaceJson(cJSON_CreateArray());
   b6984:	f7ff fd1e 	bl	b63c4 <cJSON_CreateArray>
   b6988:	4601      	mov	r1, r0
   b698a:	4628      	mov	r0, r5
   b698c:	f7ff ffb0 	bl	b68f0 <_ZN7JSONVar11replaceJsonEP5cJSON>
  cJSON* json = cJSON_GetArrayItem(_json, index);
   b6990:	6868      	ldr	r0, [r5, #4]
   b6992:	4639      	mov	r1, r7
   b6994:	f7ff fcc9 	bl	b632a <cJSON_GetArrayItem>
  if (json == NULL) {
   b6998:	4604      	mov	r4, r0
   b699a:	b960      	cbnz	r0, b69b6 <_ZN7JSONVarixEi+0x42>
    while (index >= cJSON_GetArraySize(_json)) {
   b699c:	6868      	ldr	r0, [r5, #4]
   b699e:	f7ff fcbc 	bl	b631a <cJSON_GetArraySize>
   b69a2:	42b8      	cmp	r0, r7
   b69a4:	dc07      	bgt.n	b69b6 <_ZN7JSONVarixEi+0x42>
      json = cJSON_CreateNull();
   b69a6:	f7ff fceb 	bl	b6380 <cJSON_CreateNull>
   b69aa:	4604      	mov	r4, r0
      cJSON_AddItemToArray(_json, json);
   b69ac:	4601      	mov	r1, r0
   b69ae:	6868      	ldr	r0, [r5, #4]
   b69b0:	f7ff fcc4 	bl	b633c <cJSON_AddItemToArray>
    while (index >= cJSON_GetArraySize(_json)) {
   b69b4:	e7f2      	b.n	b699c <_ZN7JSONVarixEi+0x28>
  _parent(parent)
   b69b6:	4a03      	ldr	r2, [pc, #12]	; (b69c4 <_ZN7JSONVarixEi+0x50>)
  return JSONVar(json, _json);
   b69b8:	686b      	ldr	r3, [r5, #4]
  _parent(parent)
   b69ba:	60b3      	str	r3, [r6, #8]
   b69bc:	e9c6 2400 	strd	r2, r4, [r6]
}
   b69c0:	4630      	mov	r0, r6
   b69c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b69c4:	000bd694 	.word	0x000bd694

000b69c8 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_>:
  _parent(parent)
   b69c8:	4b03      	ldr	r3, [pc, #12]	; (b69d8 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x10>)
   b69ca:	4a04      	ldr	r2, [pc, #16]	; (b69dc <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x14>)
   b69cc:	601a      	str	r2, [r3, #0]
   b69ce:	2200      	movs	r2, #0
   b69d0:	e9c3 2201 	strd	r2, r2, [r3, #4]

JSONVar undefined;
   b69d4:	4770      	bx	lr
   b69d6:	bf00      	nop
   b69d8:	2003e664 	.word	0x2003e664
   b69dc:	000bd694 	.word	0x000bd694

000b69e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b69e0:	b508      	push	{r3, lr}
   b69e2:	4b02      	ldr	r3, [pc, #8]	; (b69ec <netdb_freeaddrinfo+0xc>)
   b69e4:	681b      	ldr	r3, [r3, #0]
   b69e6:	689b      	ldr	r3, [r3, #8]
   b69e8:	9301      	str	r3, [sp, #4]
   b69ea:	bd08      	pop	{r3, pc}
   b69ec:	00030268 	.word	0x00030268

000b69f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b69f0:	b508      	push	{r3, lr}
   b69f2:	4b02      	ldr	r3, [pc, #8]	; (b69fc <netdb_getaddrinfo+0xc>)
   b69f4:	681b      	ldr	r3, [r3, #0]
   b69f6:	68db      	ldr	r3, [r3, #12]
   b69f8:	9301      	str	r3, [sp, #4]
   b69fa:	bd08      	pop	{r3, pc}
   b69fc:	00030268 	.word	0x00030268

000b6a00 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6a00:	b508      	push	{r3, lr}
   b6a02:	4b02      	ldr	r3, [pc, #8]	; (b6a0c <HAL_Pin_Mode+0xc>)
   b6a04:	681b      	ldr	r3, [r3, #0]
   b6a06:	689b      	ldr	r3, [r3, #8]
   b6a08:	9301      	str	r3, [sp, #4]
   b6a0a:	bd08      	pop	{r3, pc}
   b6a0c:	0003022c 	.word	0x0003022c

000b6a10 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b6a10:	b508      	push	{r3, lr}
   b6a12:	4b02      	ldr	r3, [pc, #8]	; (b6a1c <HAL_Interrupts_Attach+0xc>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	699b      	ldr	r3, [r3, #24]
   b6a18:	9301      	str	r3, [sp, #4]
   b6a1a:	bd08      	pop	{r3, pc}
   b6a1c:	0003022c 	.word	0x0003022c

000b6a20 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b6a20:	b508      	push	{r3, lr}
   b6a22:	4b02      	ldr	r3, [pc, #8]	; (b6a2c <HAL_Interrupts_Detach+0xc>)
   b6a24:	681b      	ldr	r3, [r3, #0]
   b6a26:	69db      	ldr	r3, [r3, #28]
   b6a28:	9301      	str	r3, [sp, #4]
   b6a2a:	bd08      	pop	{r3, pc}
   b6a2c:	0003022c 	.word	0x0003022c

000b6a30 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6a30:	b508      	push	{r3, lr}
   b6a32:	4b02      	ldr	r3, [pc, #8]	; (b6a3c <if_index_to_name+0xc>)
   b6a34:	681b      	ldr	r3, [r3, #0]
   b6a36:	695b      	ldr	r3, [r3, #20]
   b6a38:	9301      	str	r3, [sp, #4]
   b6a3a:	bd08      	pop	{r3, pc}
   b6a3c:	0003026c 	.word	0x0003026c

000b6a40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6a40:	b508      	push	{r3, lr}
   b6a42:	4b02      	ldr	r3, [pc, #8]	; (b6a4c <HAL_RNG_GetRandomNumber+0xc>)
   b6a44:	681b      	ldr	r3, [r3, #0]
   b6a46:	685b      	ldr	r3, [r3, #4]
   b6a48:	9301      	str	r3, [sp, #4]
   b6a4a:	bd08      	pop	{r3, pc}
   b6a4c:	00030218 	.word	0x00030218

000b6a50 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6a50:	b508      	push	{r3, lr}
   b6a52:	4b02      	ldr	r3, [pc, #8]	; (b6a5c <HAL_Delay_Microseconds+0xc>)
   b6a54:	681b      	ldr	r3, [r3, #0]
   b6a56:	68db      	ldr	r3, [r3, #12]
   b6a58:	9301      	str	r3, [sp, #4]
   b6a5a:	bd08      	pop	{r3, pc}
   b6a5c:	00030218 	.word	0x00030218

000b6a60 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6a60:	b508      	push	{r3, lr}
   b6a62:	4b02      	ldr	r3, [pc, #8]	; (b6a6c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6a64:	681b      	ldr	r3, [r3, #0]
   b6a66:	695b      	ldr	r3, [r3, #20]
   b6a68:	9301      	str	r3, [sp, #4]
   b6a6a:	bd08      	pop	{r3, pc}
   b6a6c:	00030218 	.word	0x00030218

000b6a70 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6a70:	b508      	push	{r3, lr}
   b6a72:	4b02      	ldr	r3, [pc, #8]	; (b6a7c <hal_rtc_time_is_valid+0xc>)
   b6a74:	681b      	ldr	r3, [r3, #0]
   b6a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6a78:	9301      	str	r3, [sp, #4]
   b6a7a:	bd08      	pop	{r3, pc}
   b6a7c:	00030218 	.word	0x00030218

000b6a80 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6a80:	b508      	push	{r3, lr}
   b6a82:	4b02      	ldr	r3, [pc, #8]	; (b6a8c <hal_rtc_get_time+0xc>)
   b6a84:	681b      	ldr	r3, [r3, #0]
   b6a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6a88:	9301      	str	r3, [sp, #4]
   b6a8a:	bd08      	pop	{r3, pc}
   b6a8c:	00030218 	.word	0x00030218

000b6a90 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <HAL_Core_Runtime_Info+0xc>)
   b6a94:	681b      	ldr	r3, [r3, #0]
   b6a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6a98:	9301      	str	r3, [sp, #4]
   b6a9a:	bd08      	pop	{r3, pc}
   b6a9c:	00030234 	.word	0x00030234

000b6aa0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6aa0:	b508      	push	{r3, lr}
   b6aa2:	4b02      	ldr	r3, [pc, #8]	; (b6aac <hal_ble_stack_init+0xc>)
   b6aa4:	681b      	ldr	r3, [r3, #0]
   b6aa6:	689b      	ldr	r3, [r3, #8]
   b6aa8:	9301      	str	r3, [sp, #4]
   b6aaa:	bd08      	pop	{r3, pc}
   b6aac:	00030278 	.word	0x00030278

000b6ab0 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b02      	ldr	r3, [pc, #8]	; (b6abc <hal_ble_select_antenna+0xc>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	691b      	ldr	r3, [r3, #16]
   b6ab8:	9301      	str	r3, [sp, #4]
   b6aba:	bd08      	pop	{r3, pc}
   b6abc:	00030278 	.word	0x00030278

000b6ac0 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6ac0:	b508      	push	{r3, lr}
   b6ac2:	4b02      	ldr	r3, [pc, #8]	; (b6acc <hal_ble_gap_set_advertising_data+0xc>)
   b6ac4:	681b      	ldr	r3, [r3, #0]
   b6ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6ac8:	9301      	str	r3, [sp, #4]
   b6aca:	bd08      	pop	{r3, pc}
   b6acc:	00030278 	.word	0x00030278

000b6ad0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6ad0:	b508      	push	{r3, lr}
   b6ad2:	4b02      	ldr	r3, [pc, #8]	; (b6adc <hal_ble_gap_set_scan_response_data+0xc>)
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	bd08      	pop	{r3, pc}
   b6adc:	00030278 	.word	0x00030278

000b6ae0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b6ae0:	b508      	push	{r3, lr}
   b6ae2:	4b02      	ldr	r3, [pc, #8]	; (b6aec <hal_ble_gap_start_advertising+0xc>)
   b6ae4:	681b      	ldr	r3, [r3, #0]
   b6ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6ae8:	9301      	str	r3, [sp, #4]
   b6aea:	bd08      	pop	{r3, pc}
   b6aec:	00030278 	.word	0x00030278

000b6af0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6af0:	b508      	push	{r3, lr}
   b6af2:	4b03      	ldr	r3, [pc, #12]	; (b6b00 <hal_ble_gap_disconnect+0x10>)
   b6af4:	681b      	ldr	r3, [r3, #0]
   b6af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6afa:	9301      	str	r3, [sp, #4]
   b6afc:	bd08      	pop	{r3, pc}
   b6afe:	0000      	.short	0x0000
   b6b00:	00030278 	.word	0x00030278

000b6b04 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6b04:	b508      	push	{r3, lr}
   b6b06:	4b03      	ldr	r3, [pc, #12]	; (b6b14 <hal_ble_gatt_server_add_service+0x10>)
   b6b08:	681b      	ldr	r3, [r3, #0]
   b6b0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6b0e:	9301      	str	r3, [sp, #4]
   b6b10:	bd08      	pop	{r3, pc}
   b6b12:	0000      	.short	0x0000
   b6b14:	00030278 	.word	0x00030278

000b6b18 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6b18:	b508      	push	{r3, lr}
   b6b1a:	4b03      	ldr	r3, [pc, #12]	; (b6b28 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6b1c:	681b      	ldr	r3, [r3, #0]
   b6b1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6b22:	9301      	str	r3, [sp, #4]
   b6b24:	bd08      	pop	{r3, pc}
   b6b26:	0000      	.short	0x0000
   b6b28:	00030278 	.word	0x00030278

000b6b2c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6b2c:	b508      	push	{r3, lr}
   b6b2e:	4b03      	ldr	r3, [pc, #12]	; (b6b3c <hal_ble_gatt_client_write_with_response+0x10>)
   b6b30:	681b      	ldr	r3, [r3, #0]
   b6b32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6b36:	9301      	str	r3, [sp, #4]
   b6b38:	bd08      	pop	{r3, pc}
   b6b3a:	0000      	.short	0x0000
   b6b3c:	00030278 	.word	0x00030278

000b6b40 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6b40:	b508      	push	{r3, lr}
   b6b42:	4b03      	ldr	r3, [pc, #12]	; (b6b50 <hal_ble_gatt_client_write_without_response+0x10>)
   b6b44:	681b      	ldr	r3, [r3, #0]
   b6b46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6b4a:	9301      	str	r3, [sp, #4]
   b6b4c:	bd08      	pop	{r3, pc}
   b6b4e:	0000      	.short	0x0000
   b6b50:	00030278 	.word	0x00030278

000b6b54 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6b54:	b508      	push	{r3, lr}
   b6b56:	4b03      	ldr	r3, [pc, #12]	; (b6b64 <hal_ble_gatt_server_add_characteristic+0x10>)
   b6b58:	681b      	ldr	r3, [r3, #0]
   b6b5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b6b5e:	9301      	str	r3, [sp, #4]
   b6b60:	bd08      	pop	{r3, pc}
   b6b62:	0000      	.short	0x0000
   b6b64:	00030278 	.word	0x00030278

000b6b68 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6b68:	b508      	push	{r3, lr}
   b6b6a:	4b03      	ldr	r3, [pc, #12]	; (b6b78 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6b6c:	681b      	ldr	r3, [r3, #0]
   b6b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6b72:	9301      	str	r3, [sp, #4]
   b6b74:	bd08      	pop	{r3, pc}
   b6b76:	0000      	.short	0x0000
   b6b78:	00030278 	.word	0x00030278

000b6b7c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6b7c:	b508      	push	{r3, lr}
   b6b7e:	4b03      	ldr	r3, [pc, #12]	; (b6b8c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6b80:	681b      	ldr	r3, [r3, #0]
   b6b82:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6b86:	9301      	str	r3, [sp, #4]
   b6b88:	bd08      	pop	{r3, pc}
   b6b8a:	0000      	.short	0x0000
   b6b8c:	00030278 	.word	0x00030278

000b6b90 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6b90:	b508      	push	{r3, lr}
   b6b92:	4b03      	ldr	r3, [pc, #12]	; (b6ba0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6b94:	681b      	ldr	r3, [r3, #0]
   b6b96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6b9a:	9301      	str	r3, [sp, #4]
   b6b9c:	bd08      	pop	{r3, pc}
   b6b9e:	0000      	.short	0x0000
   b6ba0:	00030278 	.word	0x00030278

000b6ba4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6ba4:	b508      	push	{r3, lr}
   b6ba6:	4b02      	ldr	r3, [pc, #8]	; (b6bb0 <os_thread_yield+0xc>)
   b6ba8:	681b      	ldr	r3, [r3, #0]
   b6baa:	68db      	ldr	r3, [r3, #12]
   b6bac:	9301      	str	r3, [sp, #4]
   b6bae:	bd08      	pop	{r3, pc}
   b6bb0:	00030248 	.word	0x00030248

000b6bb4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6bb4:	b508      	push	{r3, lr}
   b6bb6:	4b02      	ldr	r3, [pc, #8]	; (b6bc0 <os_thread_scheduling+0xc>)
   b6bb8:	681b      	ldr	r3, [r3, #0]
   b6bba:	69db      	ldr	r3, [r3, #28]
   b6bbc:	9301      	str	r3, [sp, #4]
   b6bbe:	bd08      	pop	{r3, pc}
   b6bc0:	00030248 	.word	0x00030248

000b6bc4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b6bc4:	b508      	push	{r3, lr}
   b6bc6:	4b02      	ldr	r3, [pc, #8]	; (b6bd0 <os_timer_create+0xc>)
   b6bc8:	681b      	ldr	r3, [r3, #0]
   b6bca:	6a1b      	ldr	r3, [r3, #32]
   b6bcc:	9301      	str	r3, [sp, #4]
   b6bce:	bd08      	pop	{r3, pc}
   b6bd0:	00030248 	.word	0x00030248

000b6bd4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6bd4:	b508      	push	{r3, lr}
   b6bd6:	4b02      	ldr	r3, [pc, #8]	; (b6be0 <os_timer_destroy+0xc>)
   b6bd8:	681b      	ldr	r3, [r3, #0]
   b6bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6bdc:	9301      	str	r3, [sp, #4]
   b6bde:	bd08      	pop	{r3, pc}
   b6be0:	00030248 	.word	0x00030248

000b6be4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6be4:	b508      	push	{r3, lr}
   b6be6:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <os_timer_get_id+0xc>)
   b6be8:	681b      	ldr	r3, [r3, #0]
   b6bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6bec:	9301      	str	r3, [sp, #4]
   b6bee:	bd08      	pop	{r3, pc}
   b6bf0:	00030248 	.word	0x00030248

000b6bf4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <os_timer_change+0xc>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6bfc:	9301      	str	r3, [sp, #4]
   b6bfe:	bd08      	pop	{r3, pc}
   b6c00:	00030248 	.word	0x00030248

000b6c04 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6c04:	b508      	push	{r3, lr}
   b6c06:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <os_mutex_recursive_create+0xc>)
   b6c08:	681b      	ldr	r3, [r3, #0]
   b6c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c0c:	9301      	str	r3, [sp, #4]
   b6c0e:	bd08      	pop	{r3, pc}
   b6c10:	00030248 	.word	0x00030248

000b6c14 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6c14:	b508      	push	{r3, lr}
   b6c16:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <os_mutex_recursive_lock+0xc>)
   b6c18:	681b      	ldr	r3, [r3, #0]
   b6c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6c1c:	9301      	str	r3, [sp, #4]
   b6c1e:	bd08      	pop	{r3, pc}
   b6c20:	00030248 	.word	0x00030248

000b6c24 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <os_mutex_recursive_unlock+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	00030248 	.word	0x00030248

000b6c34 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b02      	ldr	r3, [pc, #8]	; (b6c40 <os_timer_set_id+0xc>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6c3c:	9301      	str	r3, [sp, #4]
   b6c3e:	bd08      	pop	{r3, pc}
   b6c40:	00030248 	.word	0x00030248

000b6c44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6c44:	b508      	push	{r3, lr}
   b6c46:	4b02      	ldr	r3, [pc, #8]	; (b6c50 <inet_inet_ntop+0xc>)
   b6c48:	681b      	ldr	r3, [r3, #0]
   b6c4a:	695b      	ldr	r3, [r3, #20]
   b6c4c:	9301      	str	r3, [sp, #4]
   b6c4e:	bd08      	pop	{r3, pc}
   b6c50:	00030264 	.word	0x00030264

000b6c54 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6c54:	b508      	push	{r3, lr}
   b6c56:	4b02      	ldr	r3, [pc, #8]	; (b6c60 <inet_htonl+0xc>)
   b6c58:	681b      	ldr	r3, [r3, #0]
   b6c5a:	6a1b      	ldr	r3, [r3, #32]
   b6c5c:	9301      	str	r3, [sp, #4]
   b6c5e:	bd08      	pop	{r3, pc}
   b6c60:	00030264 	.word	0x00030264

000b6c64 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6c64:	b508      	push	{r3, lr}
   b6c66:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <inet_htons+0xc>)
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c6c:	9301      	str	r3, [sp, #4]
   b6c6e:	bd08      	pop	{r3, pc}
   b6c70:	00030264 	.word	0x00030264

000b6c74 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6c74:	b508      	push	{r3, lr}
   b6c76:	4b02      	ldr	r3, [pc, #8]	; (b6c80 <hal_usart_write+0xc>)
   b6c78:	681b      	ldr	r3, [r3, #0]
   b6c7a:	68db      	ldr	r3, [r3, #12]
   b6c7c:	9301      	str	r3, [sp, #4]
   b6c7e:	bd08      	pop	{r3, pc}
   b6c80:	0003023c 	.word	0x0003023c

000b6c84 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6c84:	b508      	push	{r3, lr}
   b6c86:	4b02      	ldr	r3, [pc, #8]	; (b6c90 <hal_usart_available+0xc>)
   b6c88:	681b      	ldr	r3, [r3, #0]
   b6c8a:	691b      	ldr	r3, [r3, #16]
   b6c8c:	9301      	str	r3, [sp, #4]
   b6c8e:	bd08      	pop	{r3, pc}
   b6c90:	0003023c 	.word	0x0003023c

000b6c94 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6c94:	b508      	push	{r3, lr}
   b6c96:	4b02      	ldr	r3, [pc, #8]	; (b6ca0 <hal_usart_read+0xc>)
   b6c98:	681b      	ldr	r3, [r3, #0]
   b6c9a:	695b      	ldr	r3, [r3, #20]
   b6c9c:	9301      	str	r3, [sp, #4]
   b6c9e:	bd08      	pop	{r3, pc}
   b6ca0:	0003023c 	.word	0x0003023c

000b6ca4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6ca4:	b508      	push	{r3, lr}
   b6ca6:	4b02      	ldr	r3, [pc, #8]	; (b6cb0 <hal_usart_peek+0xc>)
   b6ca8:	681b      	ldr	r3, [r3, #0]
   b6caa:	699b      	ldr	r3, [r3, #24]
   b6cac:	9301      	str	r3, [sp, #4]
   b6cae:	bd08      	pop	{r3, pc}
   b6cb0:	0003023c 	.word	0x0003023c

000b6cb4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6cb4:	b508      	push	{r3, lr}
   b6cb6:	4b02      	ldr	r3, [pc, #8]	; (b6cc0 <hal_usart_flush+0xc>)
   b6cb8:	681b      	ldr	r3, [r3, #0]
   b6cba:	69db      	ldr	r3, [r3, #28]
   b6cbc:	9301      	str	r3, [sp, #4]
   b6cbe:	bd08      	pop	{r3, pc}
   b6cc0:	0003023c 	.word	0x0003023c

000b6cc4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6cc4:	b508      	push	{r3, lr}
   b6cc6:	4b02      	ldr	r3, [pc, #8]	; (b6cd0 <hal_usart_is_enabled+0xc>)
   b6cc8:	681b      	ldr	r3, [r3, #0]
   b6cca:	6a1b      	ldr	r3, [r3, #32]
   b6ccc:	9301      	str	r3, [sp, #4]
   b6cce:	bd08      	pop	{r3, pc}
   b6cd0:	0003023c 	.word	0x0003023c

000b6cd4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6cd4:	b508      	push	{r3, lr}
   b6cd6:	4b02      	ldr	r3, [pc, #8]	; (b6ce0 <hal_usart_available_data_for_write+0xc>)
   b6cd8:	681b      	ldr	r3, [r3, #0]
   b6cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6cdc:	9301      	str	r3, [sp, #4]
   b6cde:	bd08      	pop	{r3, pc}
   b6ce0:	0003023c 	.word	0x0003023c

000b6ce4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6ce4:	b508      	push	{r3, lr}
   b6ce6:	4b02      	ldr	r3, [pc, #8]	; (b6cf0 <hal_usart_init_ex+0xc>)
   b6ce8:	681b      	ldr	r3, [r3, #0]
   b6cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6cec:	9301      	str	r3, [sp, #4]
   b6cee:	bd08      	pop	{r3, pc}
   b6cf0:	0003023c 	.word	0x0003023c

000b6cf4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6cf4:	b508      	push	{r3, lr}
   b6cf6:	4b02      	ldr	r3, [pc, #8]	; (b6d00 <hal_i2c_write+0xc>)
   b6cf8:	681b      	ldr	r3, [r3, #0]
   b6cfa:	6a1b      	ldr	r3, [r3, #32]
   b6cfc:	9301      	str	r3, [sp, #4]
   b6cfe:	bd08      	pop	{r3, pc}
   b6d00:	00030228 	.word	0x00030228

000b6d04 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6d04:	b508      	push	{r3, lr}
   b6d06:	4b02      	ldr	r3, [pc, #8]	; (b6d10 <hal_i2c_available+0xc>)
   b6d08:	681b      	ldr	r3, [r3, #0]
   b6d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6d0c:	9301      	str	r3, [sp, #4]
   b6d0e:	bd08      	pop	{r3, pc}
   b6d10:	00030228 	.word	0x00030228

000b6d14 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6d14:	b508      	push	{r3, lr}
   b6d16:	4b02      	ldr	r3, [pc, #8]	; (b6d20 <hal_i2c_read+0xc>)
   b6d18:	681b      	ldr	r3, [r3, #0]
   b6d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d1c:	9301      	str	r3, [sp, #4]
   b6d1e:	bd08      	pop	{r3, pc}
   b6d20:	00030228 	.word	0x00030228

000b6d24 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6d24:	b508      	push	{r3, lr}
   b6d26:	4b02      	ldr	r3, [pc, #8]	; (b6d30 <hal_i2c_peek+0xc>)
   b6d28:	681b      	ldr	r3, [r3, #0]
   b6d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d2c:	9301      	str	r3, [sp, #4]
   b6d2e:	bd08      	pop	{r3, pc}
   b6d30:	00030228 	.word	0x00030228

000b6d34 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6d34:	b508      	push	{r3, lr}
   b6d36:	4b02      	ldr	r3, [pc, #8]	; (b6d40 <hal_i2c_flush+0xc>)
   b6d38:	681b      	ldr	r3, [r3, #0]
   b6d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d3c:	9301      	str	r3, [sp, #4]
   b6d3e:	bd08      	pop	{r3, pc}
   b6d40:	00030228 	.word	0x00030228

000b6d44 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6d44:	b508      	push	{r3, lr}
   b6d46:	4b02      	ldr	r3, [pc, #8]	; (b6d50 <hal_i2c_is_enabled+0xc>)
   b6d48:	681b      	ldr	r3, [r3, #0]
   b6d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6d4c:	9301      	str	r3, [sp, #4]
   b6d4e:	bd08      	pop	{r3, pc}
   b6d50:	00030228 	.word	0x00030228

000b6d54 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6d54:	b508      	push	{r3, lr}
   b6d56:	4b02      	ldr	r3, [pc, #8]	; (b6d60 <hal_i2c_init+0xc>)
   b6d58:	681b      	ldr	r3, [r3, #0]
   b6d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d5c:	9301      	str	r3, [sp, #4]
   b6d5e:	bd08      	pop	{r3, pc}
   b6d60:	00030228 	.word	0x00030228

000b6d64 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6d64:	b508      	push	{r3, lr}
   b6d66:	4b02      	ldr	r3, [pc, #8]	; (b6d70 <sock_setsockopt+0xc>)
   b6d68:	681b      	ldr	r3, [r3, #0]
   b6d6a:	699b      	ldr	r3, [r3, #24]
   b6d6c:	9301      	str	r3, [sp, #4]
   b6d6e:	bd08      	pop	{r3, pc}
   b6d70:	00030238 	.word	0x00030238

000b6d74 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6d74:	b508      	push	{r3, lr}
   b6d76:	4b02      	ldr	r3, [pc, #8]	; (b6d80 <sock_close+0xc>)
   b6d78:	681b      	ldr	r3, [r3, #0]
   b6d7a:	69db      	ldr	r3, [r3, #28]
   b6d7c:	9301      	str	r3, [sp, #4]
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	00030238 	.word	0x00030238

000b6d84 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6d84:	b508      	push	{r3, lr}
   b6d86:	4b02      	ldr	r3, [pc, #8]	; (b6d90 <sock_connect+0xc>)
   b6d88:	681b      	ldr	r3, [r3, #0]
   b6d8a:	6a1b      	ldr	r3, [r3, #32]
   b6d8c:	9301      	str	r3, [sp, #4]
   b6d8e:	bd08      	pop	{r3, pc}
   b6d90:	00030238 	.word	0x00030238

000b6d94 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <sock_recv+0xc>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d9c:	9301      	str	r3, [sp, #4]
   b6d9e:	bd08      	pop	{r3, pc}
   b6da0:	00030238 	.word	0x00030238

000b6da4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b02      	ldr	r3, [pc, #8]	; (b6db0 <sock_send+0xc>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6dac:	9301      	str	r3, [sp, #4]
   b6dae:	bd08      	pop	{r3, pc}
   b6db0:	00030238 	.word	0x00030238

000b6db4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6db4:	b508      	push	{r3, lr}
   b6db6:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <sock_socket+0xc>)
   b6db8:	681b      	ldr	r3, [r3, #0]
   b6dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6dbc:	9301      	str	r3, [sp, #4]
   b6dbe:	bd08      	pop	{r3, pc}
   b6dc0:	00030238 	.word	0x00030238

000b6dc4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6dc4:	b508      	push	{r3, lr}
   b6dc6:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <hal_spi_init+0xc>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	69db      	ldr	r3, [r3, #28]
   b6dcc:	9301      	str	r3, [sp, #4]
   b6dce:	bd08      	pop	{r3, pc}
   b6dd0:	00030230 	.word	0x00030230

000b6dd4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <hal_spi_is_enabled+0xc>)
   b6dd8:	681b      	ldr	r3, [r3, #0]
   b6dda:	6a1b      	ldr	r3, [r3, #32]
   b6ddc:	9301      	str	r3, [sp, #4]
   b6dde:	bd08      	pop	{r3, pc}
   b6de0:	00030230 	.word	0x00030230

000b6de4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b02      	ldr	r3, [pc, #8]	; (b6df0 <HAL_USB_USART_Init+0xc>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	681b      	ldr	r3, [r3, #0]
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	bd08      	pop	{r3, pc}
   b6df0:	0003024c 	.word	0x0003024c

000b6df4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <HAL_USB_USART_Available_Data+0xc>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	691b      	ldr	r3, [r3, #16]
   b6dfc:	9301      	str	r3, [sp, #4]
   b6dfe:	bd08      	pop	{r3, pc}
   b6e00:	0003024c 	.word	0x0003024c

000b6e04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6e04:	b508      	push	{r3, lr}
   b6e06:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6e08:	681b      	ldr	r3, [r3, #0]
   b6e0a:	695b      	ldr	r3, [r3, #20]
   b6e0c:	9301      	str	r3, [sp, #4]
   b6e0e:	bd08      	pop	{r3, pc}
   b6e10:	0003024c 	.word	0x0003024c

000b6e14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e14:	b508      	push	{r3, lr}
   b6e16:	4b02      	ldr	r3, [pc, #8]	; (b6e20 <HAL_USB_USART_Receive_Data+0xc>)
   b6e18:	681b      	ldr	r3, [r3, #0]
   b6e1a:	699b      	ldr	r3, [r3, #24]
   b6e1c:	9301      	str	r3, [sp, #4]
   b6e1e:	bd08      	pop	{r3, pc}
   b6e20:	0003024c 	.word	0x0003024c

000b6e24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6e24:	b508      	push	{r3, lr}
   b6e26:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <HAL_USB_USART_Send_Data+0xc>)
   b6e28:	681b      	ldr	r3, [r3, #0]
   b6e2a:	69db      	ldr	r3, [r3, #28]
   b6e2c:	9301      	str	r3, [sp, #4]
   b6e2e:	bd08      	pop	{r3, pc}
   b6e30:	0003024c 	.word	0x0003024c

000b6e34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b02      	ldr	r3, [pc, #8]	; (b6e40 <HAL_USB_USART_Flush_Data+0xc>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	6a1b      	ldr	r3, [r3, #32]
   b6e3c:	9301      	str	r3, [sp, #4]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	0003024c 	.word	0x0003024c

000b6e44 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b02      	ldr	r3, [pc, #8]	; (b6e50 <wlan_connected_info+0xc>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b6e4c:	9301      	str	r3, [sp, #4]
   b6e4e:	bd08      	pop	{r3, pc}
   b6e50:	00030274 	.word	0x00030274

000b6e54 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6e54:	b508      	push	{r3, lr}
   b6e56:	4b02      	ldr	r3, [pc, #8]	; (b6e60 <panic_+0xc>)
   b6e58:	681b      	ldr	r3, [r3, #0]
   b6e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	bd08      	pop	{r3, pc}
   b6e60:	00030260 	.word	0x00030260

000b6e64 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <log_message+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	00030260 	.word	0x00030260

000b6e74 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <system_mode+0xc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	681b      	ldr	r3, [r3, #0]
   b6e7c:	9301      	str	r3, [sp, #4]
   b6e7e:	bd08      	pop	{r3, pc}
   b6e80:	00030220 	.word	0x00030220

000b6e84 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b02      	ldr	r3, [pc, #8]	; (b6e90 <set_system_mode+0xc>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	685b      	ldr	r3, [r3, #4]
   b6e8c:	9301      	str	r3, [sp, #4]
   b6e8e:	bd08      	pop	{r3, pc}
   b6e90:	00030220 	.word	0x00030220

000b6e94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b02      	ldr	r3, [pc, #8]	; (b6ea0 <system_delay_ms+0xc>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	695b      	ldr	r3, [r3, #20]
   b6e9c:	9301      	str	r3, [sp, #4]
   b6e9e:	bd08      	pop	{r3, pc}
   b6ea0:	00030220 	.word	0x00030220

000b6ea4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6ea4:	b508      	push	{r3, lr}
   b6ea6:	4b02      	ldr	r3, [pc, #8]	; (b6eb0 <system_thread_set_state+0xc>)
   b6ea8:	681b      	ldr	r3, [r3, #0]
   b6eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6eac:	9301      	str	r3, [sp, #4]
   b6eae:	bd08      	pop	{r3, pc}
   b6eb0:	00030220 	.word	0x00030220

000b6eb4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6eb4:	b508      	push	{r3, lr}
   b6eb6:	4b02      	ldr	r3, [pc, #8]	; (b6ec0 <application_thread_current+0xc>)
   b6eb8:	681b      	ldr	r3, [r3, #0]
   b6eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6ebc:	9301      	str	r3, [sp, #4]
   b6ebe:	bd08      	pop	{r3, pc}
   b6ec0:	00030220 	.word	0x00030220

000b6ec4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6ec4:	b508      	push	{r3, lr}
   b6ec6:	4b02      	ldr	r3, [pc, #8]	; (b6ed0 <application_thread_invoke+0xc>)
   b6ec8:	681b      	ldr	r3, [r3, #0]
   b6eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6ecc:	9301      	str	r3, [sp, #4]
   b6ece:	bd08      	pop	{r3, pc}
   b6ed0:	00030220 	.word	0x00030220

000b6ed4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6ed4:	b508      	push	{r3, lr}
   b6ed6:	4b02      	ldr	r3, [pc, #8]	; (b6ee0 <system_thread_get_state+0xc>)
   b6ed8:	681b      	ldr	r3, [r3, #0]
   b6eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6edc:	9301      	str	r3, [sp, #4]
   b6ede:	bd08      	pop	{r3, pc}
   b6ee0:	00030220 	.word	0x00030220

000b6ee4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b03      	ldr	r3, [pc, #12]	; (b6ef4 <system_ctrl_set_app_request_handler+0x10>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6eee:	9301      	str	r3, [sp, #4]
   b6ef0:	bd08      	pop	{r3, pc}
   b6ef2:	0000      	.short	0x0000
   b6ef4:	00030220 	.word	0x00030220

000b6ef8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6ef8:	b508      	push	{r3, lr}
   b6efa:	4b03      	ldr	r3, [pc, #12]	; (b6f08 <system_ctrl_set_result+0x10>)
   b6efc:	681b      	ldr	r3, [r3, #0]
   b6efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6f02:	9301      	str	r3, [sp, #4]
   b6f04:	bd08      	pop	{r3, pc}
   b6f06:	0000      	.short	0x0000
   b6f08:	00030220 	.word	0x00030220

000b6f0c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <network_connect+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	685b      	ldr	r3, [r3, #4]
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030240 	.word	0x00030240

000b6f1c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <network_connecting+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	689b      	ldr	r3, [r3, #8]
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030240 	.word	0x00030240

000b6f2c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <network_disconnect+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	68db      	ldr	r3, [r3, #12]
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030240 	.word	0x00030240

000b6f3c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <network_ready+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	691b      	ldr	r3, [r3, #16]
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030240 	.word	0x00030240

000b6f4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <network_on+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	695b      	ldr	r3, [r3, #20]
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030240 	.word	0x00030240

000b6f5c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <network_off+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	699b      	ldr	r3, [r3, #24]
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030240 	.word	0x00030240

000b6f6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <network_listen+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	69db      	ldr	r3, [r3, #28]
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	00030240 	.word	0x00030240

000b6f7c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <network_listening+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	6a1b      	ldr	r3, [r3, #32]
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	00030240 	.word	0x00030240

000b6f8c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <network_set_listen_timeout+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	00030240 	.word	0x00030240

000b6f9c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <network_get_listen_timeout+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	00030240 	.word	0x00030240

000b6fac <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <network_is_on+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	00030240 	.word	0x00030240

000b6fbc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <network_is_off+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	00030240 	.word	0x00030240

000b6fcc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <spark_process+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	689b      	ldr	r3, [r3, #8]
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	00030244 	.word	0x00030244

000b6fdc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <spark_cloud_flag_connected+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	695b      	ldr	r3, [r3, #20]
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	00030244 	.word	0x00030244

000b6fec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <spark_send_event+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	6a1b      	ldr	r3, [r3, #32]
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	00030244 	.word	0x00030244

000b6ffc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <spark_subscribe+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	00030244 	.word	0x00030244

000b700c <spark_unsubscribe>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <spark_unsubscribe+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	00030244 	.word	0x00030244

000b701c <spark_sync_time_pending>:
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <spark_sync_time_pending+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	00030244 	.word	0x00030244

000b702c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030244 	.word	0x00030244

000b703c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <malloc+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	681b      	ldr	r3, [r3, #0]
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	0003021c 	.word	0x0003021c

000b704c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <free+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	685b      	ldr	r3, [r3, #4]
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	0003021c 	.word	0x0003021c

000b705c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <realloc+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	689b      	ldr	r3, [r3, #8]
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	0003021c 	.word	0x0003021c

000b706c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <sprintf+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	68db      	ldr	r3, [r3, #12]
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	0003021c 	.word	0x0003021c

000b707c <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <sscanf+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	695b      	ldr	r3, [r3, #20]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	0003021c 	.word	0x0003021c

000b708c <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <vsnprintf+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	0003021c 	.word	0x0003021c

000b709c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <abort+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	0003021c 	.word	0x0003021c

000b70ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <_malloc_r+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	0003021c 	.word	0x0003021c

000b70bc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <__errno+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	0003021c 	.word	0x0003021c

000b70cc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <__assert_func+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	0003021c 	.word	0x0003021c

000b70dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <newlib_impure_ptr_callback+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	0003021c 	.word	0x0003021c

000b70ec <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <localtime_r+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	0003021c 	.word	0x0003021c

000b70fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b70fc:	2200      	movs	r2, #0
   b70fe:	6840      	ldr	r0, [r0, #4]
   b7100:	4611      	mov	r1, r2
   b7102:	f7ff bf3b 	b.w	b6f7c <network_listening>

000b7106 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7106:	2200      	movs	r2, #0
   b7108:	6840      	ldr	r0, [r0, #4]
   b710a:	4611      	mov	r1, r2
   b710c:	f7ff bf46 	b.w	b6f9c <network_get_listen_timeout>

000b7110 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7110:	6840      	ldr	r0, [r0, #4]
   b7112:	2200      	movs	r2, #0
   b7114:	f7ff bf3a 	b.w	b6f8c <network_set_listen_timeout>

000b7118 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7118:	6840      	ldr	r0, [r0, #4]
   b711a:	2200      	movs	r2, #0
   b711c:	f081 0101 	eor.w	r1, r1, #1
   b7120:	f7ff bf24 	b.w	b6f6c <network_listen>

000b7124 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7124:	2300      	movs	r3, #0
   b7126:	6840      	ldr	r0, [r0, #4]
   b7128:	461a      	mov	r2, r3
   b712a:	4619      	mov	r1, r3
   b712c:	f7ff bf16 	b.w	b6f5c <network_off>

000b7130 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7130:	2300      	movs	r3, #0
   b7132:	6840      	ldr	r0, [r0, #4]
   b7134:	461a      	mov	r2, r3
   b7136:	4619      	mov	r1, r3
   b7138:	f7ff bf08 	b.w	b6f4c <network_on>

000b713c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b713c:	2200      	movs	r2, #0
   b713e:	6840      	ldr	r0, [r0, #4]
   b7140:	4611      	mov	r1, r2
   b7142:	f7ff befb 	b.w	b6f3c <network_ready>

000b7146 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7146:	2200      	movs	r2, #0
   b7148:	6840      	ldr	r0, [r0, #4]
   b714a:	4611      	mov	r1, r2
   b714c:	f7ff bee6 	b.w	b6f1c <network_connecting>

000b7150 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7150:	6840      	ldr	r0, [r0, #4]
   b7152:	2200      	movs	r2, #0
   b7154:	2102      	movs	r1, #2
   b7156:	f7ff bee9 	b.w	b6f2c <network_disconnect>

000b715a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b715a:	2300      	movs	r3, #0
   b715c:	6840      	ldr	r0, [r0, #4]
   b715e:	461a      	mov	r2, r3
   b7160:	f7ff bed4 	b.w	b6f0c <network_connect>

000b7164 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7164:	4b02      	ldr	r3, [pc, #8]	; (b7170 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7166:	2203      	movs	r2, #3
   b7168:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b716a:	4a02      	ldr	r2, [pc, #8]	; (b7174 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b716c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b716e:	4770      	bx	lr
   b7170:	2003e670 	.word	0x2003e670
   b7174:	000bd6a8 	.word	0x000bd6a8

000b7178 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7178:	b510      	push	{r4, lr}
   b717a:	4604      	mov	r4, r0
   b717c:	4608      	mov	r0, r1
{
    _spi = spi;
   b717e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7180:	f7ff fe20 	bl	b6dc4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7184:	2300      	movs	r3, #0
   b7186:	6063      	str	r3, [r4, #4]
}
   b7188:	4620      	mov	r0, r4
   b718a:	bd10      	pop	{r4, pc}

000b718c <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b718c:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b718e:	2420      	movs	r4, #32
{
   b7190:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b7192:	4622      	mov	r2, r4
   b7194:	2100      	movs	r1, #0
   b7196:	4668      	mov	r0, sp
   b7198:	f003 fe35 	bl	bae06 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b719c:	2100      	movs	r1, #0
   b719e:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b71a0:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b71a4:	f7ff fc74 	bl	b6a90 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b71a8:	9801      	ldr	r0, [sp, #4]
   b71aa:	b008      	add	sp, #32
   b71ac:	bd10      	pop	{r4, pc}
	...

000b71b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b71b0:	4b05      	ldr	r3, [pc, #20]	; (b71c8 <_GLOBAL__sub_I_System+0x18>)
   b71b2:	2202      	movs	r2, #2
   b71b4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b71b6:	4b05      	ldr	r3, [pc, #20]	; (b71cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b71b8:	4a05      	ldr	r2, [pc, #20]	; (b71d0 <_GLOBAL__sub_I_System+0x20>)
   b71ba:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b71bc:	2000      	movs	r0, #0
   b71be:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b71c2:	f7ff be5f 	b.w	b6e84 <set_system_mode>
   b71c6:	bf00      	nop
   b71c8:	2003e684 	.word	0x2003e684
   b71cc:	2003e678 	.word	0x2003e678
   b71d0:	ffff0000 	.word	0xffff0000

000b71d4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b71d4:	b510      	push	{r4, lr}
   b71d6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b71d8:	f003 fe8b 	bl	baef2 <strlen>
   b71dc:	3801      	subs	r0, #1
   b71de:	1823      	adds	r3, r4, r0
   b71e0:	4620      	mov	r0, r4
	while(i<j){
   b71e2:	4283      	cmp	r3, r0
   b71e4:	d906      	bls.n	b71f4 <_Z11str_reversePc+0x20>
		c = *i;
   b71e6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b71e8:	7819      	ldrb	r1, [r3, #0]
   b71ea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b71ee:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b71f2:	e7f6      	b.n	b71e2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b71f4:	bd10      	pop	{r4, pc}

000b71f6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b71f6:	b570      	push	{r4, r5, r6, lr}
   b71f8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b71fa:	1e91      	subs	r1, r2, #2
   b71fc:	2922      	cmp	r1, #34	; 0x22
   b71fe:	d81d      	bhi.n	b723c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7200:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7202:	b930      	cbnz	r0, b7212 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7204:	4423      	add	r3, r4
            *ptr++ = '0';
   b7206:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7208:	429d      	cmp	r5, r3
   b720a:	d210      	bcs.n	b722e <ultoa+0x38>
            *ptr++ = '0';
   b720c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7210:	e7fa      	b.n	b7208 <ultoa+0x12>
            result.quot = a/radix;
   b7212:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7216:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b721a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b721c:	2809      	cmp	r0, #9
                *ptr += '0';
   b721e:	bf94      	ite	ls
   b7220:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7222:	3157      	addhi	r1, #87	; 0x57
   b7224:	b2c9      	uxtb	r1, r1
   b7226:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b722a:	4630      	mov	r0, r6
	while(a){
   b722c:	e7e9      	b.n	b7202 <ultoa+0xc>

	*ptr = '\0';
   b722e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7230:	4620      	mov	r0, r4
	*ptr = '\0';
   b7232:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7234:	f7ff ffce 	bl	b71d4 <_Z11str_reversePc>
	return buffer;
   b7238:	4620      	mov	r0, r4
}
   b723a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b723c:	2000      	movs	r0, #0
   b723e:	e7fc      	b.n	b723a <ultoa+0x44>

000b7240 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7240:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7242:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7244:	460c      	mov	r4, r1
   b7246:	4615      	mov	r5, r2
	if(a<0){
   b7248:	da0e      	bge.n	b7268 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b724a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b724e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7252:	bf14      	ite	ne
   b7254:	4258      	negne	r0, r3
   b7256:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7258:	2301      	movs	r3, #1
		*buffer = '-';
   b725a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b725c:	462a      	mov	r2, r5
   b725e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7260:	f7ff ffc9 	bl	b71f6 <ultoa>
	}
	return buffer;
}
   b7264:	4620      	mov	r0, r4
   b7266:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7268:	2301      	movs	r3, #1
   b726a:	e7f9      	b.n	b7260 <itoa+0x20>

000b726c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b726c:	b510      	push	{r4, lr}
   b726e:	4604      	mov	r4, r0
{
	free(buffer);
   b7270:	6800      	ldr	r0, [r0, #0]
   b7272:	f7ff feeb 	bl	b704c <free>
}
   b7276:	4620      	mov	r0, r4
   b7278:	bd10      	pop	{r4, pc}

000b727a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b727a:	b510      	push	{r4, lr}
   b727c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b727e:	6800      	ldr	r0, [r0, #0]
   b7280:	b108      	cbz	r0, b7286 <_ZN6String10invalidateEv+0xc>
   b7282:	f7ff fee3 	bl	b704c <free>
	buffer = NULL;
   b7286:	2300      	movs	r3, #0
	capacity = len = 0;
   b7288:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b728c:	6023      	str	r3, [r4, #0]
}
   b728e:	bd10      	pop	{r4, pc}

000b7290 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7290:	b538      	push	{r3, r4, r5, lr}
   b7292:	4604      	mov	r4, r0
   b7294:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7296:	6800      	ldr	r0, [r0, #0]
   b7298:	3101      	adds	r1, #1
   b729a:	f7ff fedf 	bl	b705c <realloc>
	if (newbuffer) {
   b729e:	b110      	cbz	r0, b72a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b72a0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b72a4:	2001      	movs	r0, #1
	}
	return 0;
}
   b72a6:	bd38      	pop	{r3, r4, r5, pc}

000b72a8 <_ZN6String7reserveEj>:
{
   b72a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b72aa:	6803      	ldr	r3, [r0, #0]
{
   b72ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b72ae:	b123      	cbz	r3, b72ba <_ZN6String7reserveEj+0x12>
   b72b0:	6843      	ldr	r3, [r0, #4]
   b72b2:	428b      	cmp	r3, r1
   b72b4:	d301      	bcc.n	b72ba <_ZN6String7reserveEj+0x12>
   b72b6:	2001      	movs	r0, #1
}
   b72b8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b72ba:	4620      	mov	r0, r4
   b72bc:	f7ff ffe8 	bl	b7290 <_ZN6String12changeBufferEj>
   b72c0:	2800      	cmp	r0, #0
   b72c2:	d0f9      	beq.n	b72b8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b72c4:	68a3      	ldr	r3, [r4, #8]
   b72c6:	2b00      	cmp	r3, #0
   b72c8:	d1f5      	bne.n	b72b6 <_ZN6String7reserveEj+0xe>
   b72ca:	6822      	ldr	r2, [r4, #0]
   b72cc:	7013      	strb	r3, [r2, #0]
   b72ce:	e7f2      	b.n	b72b6 <_ZN6String7reserveEj+0xe>

000b72d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b72d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b72d2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b72d4:	4611      	mov	r1, r2
   b72d6:	9201      	str	r2, [sp, #4]
{
   b72d8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b72da:	f7ff ffe5 	bl	b72a8 <_ZN6String7reserveEj>
   b72de:	9a01      	ldr	r2, [sp, #4]
   b72e0:	b928      	cbnz	r0, b72ee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b72e2:	4620      	mov	r0, r4
   b72e4:	f7ff ffc9 	bl	b727a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b72e8:	4620      	mov	r0, r4
   b72ea:	b003      	add	sp, #12
   b72ec:	bd30      	pop	{r4, r5, pc}
	len = length;
   b72ee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b72f0:	4629      	mov	r1, r5
   b72f2:	6820      	ldr	r0, [r4, #0]
   b72f4:	f003 fd5f 	bl	badb6 <memcpy>
	buffer[len] = 0;
   b72f8:	6822      	ldr	r2, [r4, #0]
   b72fa:	68a3      	ldr	r3, [r4, #8]
   b72fc:	2100      	movs	r1, #0
   b72fe:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7300:	e7f2      	b.n	b72e8 <_ZN6String4copyEPKcj+0x18>

000b7302 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7302:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7304:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7306:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b730a:	4604      	mov	r4, r0
	len = 0;
   b730c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b730e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7310:	b141      	cbz	r1, b7324 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7312:	4608      	mov	r0, r1
   b7314:	9101      	str	r1, [sp, #4]
   b7316:	f003 fdec 	bl	baef2 <strlen>
   b731a:	9901      	ldr	r1, [sp, #4]
   b731c:	4602      	mov	r2, r0
   b731e:	4620      	mov	r0, r4
   b7320:	f7ff ffd6 	bl	b72d0 <_ZN6String4copyEPKcj>
}
   b7324:	4620      	mov	r0, r4
   b7326:	b002      	add	sp, #8
   b7328:	bd10      	pop	{r4, pc}

000b732a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b732a:	b538      	push	{r3, r4, r5, lr}
   b732c:	4605      	mov	r5, r0
	if (buffer) {
   b732e:	6800      	ldr	r0, [r0, #0]
{
   b7330:	460c      	mov	r4, r1
	if (buffer) {
   b7332:	b168      	cbz	r0, b7350 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7334:	686a      	ldr	r2, [r5, #4]
   b7336:	688b      	ldr	r3, [r1, #8]
   b7338:	429a      	cmp	r2, r3
   b733a:	d307      	bcc.n	b734c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b733c:	6809      	ldr	r1, [r1, #0]
   b733e:	f003 fdb2 	bl	baea6 <strcpy>
			len = rhs.len;
   b7342:	68a3      	ldr	r3, [r4, #8]
   b7344:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7346:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7348:	60a3      	str	r3, [r4, #8]
}
   b734a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b734c:	f7ff fe7e 	bl	b704c <free>
	buffer = rhs.buffer;
   b7350:	6823      	ldr	r3, [r4, #0]
   b7352:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7354:	6863      	ldr	r3, [r4, #4]
   b7356:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7358:	68a3      	ldr	r3, [r4, #8]
   b735a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b735c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b735e:	e9c4 3300 	strd	r3, r3, [r4]
   b7362:	e7f1      	b.n	b7348 <_ZN6String4moveERS_+0x1e>

000b7364 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b7364:	4288      	cmp	r0, r1
{
   b7366:	b510      	push	{r4, lr}
   b7368:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b736a:	d001      	beq.n	b7370 <_ZN6StringaSEOS_+0xc>
   b736c:	f7ff ffdd 	bl	b732a <_ZN6String4moveERS_>
	return *this;
}
   b7370:	4620      	mov	r0, r4
   b7372:	bd10      	pop	{r4, pc}

000b7374 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7374:	b513      	push	{r0, r1, r4, lr}
   b7376:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7378:	b159      	cbz	r1, b7392 <_ZN6StringaSEPKc+0x1e>
   b737a:	4608      	mov	r0, r1
   b737c:	9101      	str	r1, [sp, #4]
   b737e:	f003 fdb8 	bl	baef2 <strlen>
   b7382:	9901      	ldr	r1, [sp, #4]
   b7384:	4602      	mov	r2, r0
   b7386:	4620      	mov	r0, r4
   b7388:	f7ff ffa2 	bl	b72d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b738c:	4620      	mov	r0, r4
   b738e:	b002      	add	sp, #8
   b7390:	bd10      	pop	{r4, pc}
	else invalidate();
   b7392:	f7ff ff72 	bl	b727a <_ZN6String10invalidateEv>
   b7396:	e7f9      	b.n	b738c <_ZN6StringaSEPKc+0x18>

000b7398 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7398:	b510      	push	{r4, lr}
   b739a:	4604      	mov	r4, r0
   b739c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b739e:	2300      	movs	r3, #0
	capacity = 0;
   b73a0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b73a4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b73a6:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b73a8:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b73aa:	a901      	add	r1, sp, #4
   b73ac:	f7ff ff48 	bl	b7240 <itoa>
	*this = buf;
   b73b0:	a901      	add	r1, sp, #4
   b73b2:	4620      	mov	r0, r4
   b73b4:	f7ff ffde 	bl	b7374 <_ZN6StringaSEPKc>
}
   b73b8:	4620      	mov	r0, r4
   b73ba:	b00a      	add	sp, #40	; 0x28
   b73bc:	bd10      	pop	{r4, pc}

000b73be <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b73be:	b570      	push	{r4, r5, r6, lr}
   b73c0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b73c2:	460e      	mov	r6, r1
   b73c4:	b909      	cbnz	r1, b73ca <_ZN6String6concatEPKcj+0xc>
   b73c6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b73c8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b73ca:	b16a      	cbz	r2, b73e8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b73cc:	6884      	ldr	r4, [r0, #8]
   b73ce:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b73d0:	4621      	mov	r1, r4
   b73d2:	f7ff ff69 	bl	b72a8 <_ZN6String7reserveEj>
   b73d6:	2800      	cmp	r0, #0
   b73d8:	d0f5      	beq.n	b73c6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b73da:	6828      	ldr	r0, [r5, #0]
   b73dc:	68ab      	ldr	r3, [r5, #8]
   b73de:	4631      	mov	r1, r6
   b73e0:	4418      	add	r0, r3
   b73e2:	f003 fd60 	bl	baea6 <strcpy>
	len = newlen;
   b73e6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b73e8:	2001      	movs	r0, #1
   b73ea:	e7ed      	b.n	b73c8 <_ZN6String6concatEPKcj+0xa>

000b73ec <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b73ec:	688a      	ldr	r2, [r1, #8]
   b73ee:	6809      	ldr	r1, [r1, #0]
   b73f0:	f7ff bfe5 	b.w	b73be <_ZN6String6concatEPKcj>

000b73f4 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b73f4:	b513      	push	{r0, r1, r4, lr}
   b73f6:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b73f8:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b73fa:	b151      	cbz	r1, b7412 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b73fc:	9101      	str	r1, [sp, #4]
   b73fe:	f003 fd78 	bl	baef2 <strlen>
   b7402:	9901      	ldr	r1, [sp, #4]
   b7404:	4602      	mov	r2, r0
   b7406:	4620      	mov	r0, r4
}
   b7408:	b002      	add	sp, #8
   b740a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b740e:	f7ff bfd6 	b.w	b73be <_ZN6String6concatEPKcj>
}
   b7412:	b002      	add	sp, #8
   b7414:	bd10      	pop	{r4, pc}

000b7416 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b7416:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7418:	6882      	ldr	r2, [r0, #8]
   b741a:	b93a      	cbnz	r2, b742c <_ZNK6String6equalsEPKc+0x16>
   b741c:	b121      	cbz	r1, b7428 <_ZNK6String6equalsEPKc+0x12>
   b741e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b7420:	fab0 f080 	clz	r0, r0
   b7424:	0940      	lsrs	r0, r0, #5
   b7426:	e000      	b.n	b742a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7428:	2001      	movs	r0, #1
}
   b742a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b742c:	6800      	ldr	r0, [r0, #0]
   b742e:	b909      	cbnz	r1, b7434 <_ZNK6String6equalsEPKc+0x1e>
   b7430:	7800      	ldrb	r0, [r0, #0]
   b7432:	e7f5      	b.n	b7420 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b7434:	f003 fd2d 	bl	bae92 <strcmp>
   b7438:	e7f2      	b.n	b7420 <_ZNK6String6equalsEPKc+0xa>

000b743a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b743a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b743c:	6883      	ldr	r3, [r0, #8]
   b743e:	4293      	cmp	r3, r2
   b7440:	d907      	bls.n	b7452 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b7442:	6804      	ldr	r4, [r0, #0]
   b7444:	6809      	ldr	r1, [r1, #0]
   b7446:	18a0      	adds	r0, r4, r2
   b7448:	f003 fd7b 	bl	baf42 <strstr>
	if (found == NULL) return -1;
   b744c:	b108      	cbz	r0, b7452 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b744e:	1b00      	subs	r0, r0, r4
}
   b7450:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b7452:	f04f 30ff 	mov.w	r0, #4294967295
   b7456:	e7fb      	b.n	b7450 <_ZNK6String7indexOfERKS_j+0x16>

000b7458 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b7458:	2200      	movs	r2, #0
   b745a:	f7ff bfee 	b.w	b743a <_ZNK6String7indexOfERKS_j>
	...

000b7460 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b7460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b7462:	429a      	cmp	r2, r3
{
   b7464:	460f      	mov	r7, r1
   b7466:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b7468:	490c      	ldr	r1, [pc, #48]	; (b749c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b746a:	bf88      	it	hi
   b746c:	4613      	movhi	r3, r2
{
   b746e:	4614      	mov	r4, r2
   b7470:	4606      	mov	r6, r0
	if (left > right) {
   b7472:	bf84      	itt	hi
   b7474:	462c      	movhi	r4, r5
   b7476:	461d      	movhi	r5, r3
	String out;
   b7478:	f7ff ff43 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b747c:	68bb      	ldr	r3, [r7, #8]
   b747e:	42a3      	cmp	r3, r4
   b7480:	d30a      	bcc.n	b7498 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b7482:	6839      	ldr	r1, [r7, #0]
   b7484:	42ab      	cmp	r3, r5
   b7486:	bf94      	ite	ls
   b7488:	ebc4 0203 	rsbls	r2, r4, r3
   b748c:	ebc4 0205 	rsbhi	r2, r4, r5
   b7490:	4421      	add	r1, r4
   b7492:	4630      	mov	r0, r6
   b7494:	f7ff ff1c 	bl	b72d0 <_ZN6String4copyEPKcj>
	return out;
}
   b7498:	4630      	mov	r0, r6
   b749a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b749c:	000bd64e 	.word	0x000bd64e

000b74a0 <_ZNK6String9substringEj>:
{
   b74a0:	b510      	push	{r4, lr}
   b74a2:	4604      	mov	r4, r0
	return substring(left, len);
   b74a4:	688b      	ldr	r3, [r1, #8]
   b74a6:	f7ff ffdb 	bl	b7460 <_ZNK6String9substringEjj>
}
   b74aa:	4620      	mov	r0, r4
   b74ac:	bd10      	pop	{r4, pc}
	...

000b74b0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b74b0:	b40e      	push	{r1, r2, r3}
   b74b2:	b570      	push	{r4, r5, r6, lr}
   b74b4:	b087      	sub	sp, #28
   b74b6:	ad0b      	add	r5, sp, #44	; 0x2c
   b74b8:	4604      	mov	r4, r0
   b74ba:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b74be:	9201      	str	r2, [sp, #4]
   b74c0:	462b      	mov	r3, r5
   b74c2:	2105      	movs	r1, #5
   b74c4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b74c6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b74c8:	f7ff fde0 	bl	b708c <vsnprintf>
    va_end(marker);

    String result;
   b74cc:	490b      	ldr	r1, [pc, #44]	; (b74fc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b74ce:	4606      	mov	r6, r0
    String result;
   b74d0:	4620      	mov	r0, r4
   b74d2:	f7ff ff16 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b74d6:	4631      	mov	r1, r6
   b74d8:	4620      	mov	r0, r4
   b74da:	f7ff fee5 	bl	b72a8 <_ZN6String7reserveEj>
    if (result.buffer) {
   b74de:	6820      	ldr	r0, [r4, #0]
   b74e0:	b130      	cbz	r0, b74f0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b74e2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b74e4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b74e6:	462b      	mov	r3, r5
   b74e8:	1c71      	adds	r1, r6, #1
   b74ea:	f7ff fdcf 	bl	b708c <vsnprintf>
        va_end(marker);
        result.len = n;
   b74ee:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b74f0:	4620      	mov	r0, r4
   b74f2:	b007      	add	sp, #28
   b74f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b74f8:	b003      	add	sp, #12
   b74fa:	4770      	bx	lr
   b74fc:	000bd64e 	.word	0x000bd64e

000b7500 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7500:	4770      	bx	lr

000b7502 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7502:	4770      	bx	lr

000b7504 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7504:	4770      	bx	lr

000b7506 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7506:	4770      	bx	lr

000b7508 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7508:	4b06      	ldr	r3, [pc, #24]	; (b7524 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b750a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b750c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b750e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7512:	d005      	beq.n	b7520 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7514:	4608      	mov	r0, r1
   b7516:	f002 fe2f 	bl	ba178 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b751a:	2800      	cmp	r0, #0
   b751c:	bf08      	it	eq
   b751e:	2400      	moveq	r4, #0
      }
   b7520:	4620      	mov	r0, r4
   b7522:	bd10      	pop	{r4, pc}
   b7524:	000bd87c 	.word	0x000bd87c

000b7528 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7528:	4b06      	ldr	r3, [pc, #24]	; (b7544 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b752a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b752c:	b510      	push	{r4, lr}
   b752e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7532:	d005      	beq.n	b7540 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7534:	4608      	mov	r0, r1
   b7536:	f002 fe1f 	bl	ba178 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b753a:	2800      	cmp	r0, #0
   b753c:	bf08      	it	eq
   b753e:	2400      	moveq	r4, #0
      }
   b7540:	4620      	mov	r0, r4
   b7542:	bd10      	pop	{r4, pc}
   b7544:	000bd87c 	.word	0x000bd87c

000b7548 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7548:	4b06      	ldr	r3, [pc, #24]	; (b7564 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b754a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b754c:	b510      	push	{r4, lr}
   b754e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7552:	d005      	beq.n	b7560 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7554:	4608      	mov	r0, r1
   b7556:	f002 fe0f 	bl	ba178 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b755a:	2800      	cmp	r0, #0
   b755c:	bf08      	it	eq
   b755e:	2400      	moveq	r4, #0
      }
   b7560:	4620      	mov	r0, r4
   b7562:	bd10      	pop	{r4, pc}
   b7564:	000bd87c 	.word	0x000bd87c

000b7568 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7568:	b510      	push	{r4, lr}
   b756a:	2168      	movs	r1, #104	; 0x68
   b756c:	4604      	mov	r4, r0
   b756e:	f7fc fd96 	bl	b409e <_ZdlPvj>
   b7572:	4620      	mov	r0, r4
   b7574:	bd10      	pop	{r4, pc}

000b7576 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7576:	b510      	push	{r4, lr}
   b7578:	2128      	movs	r1, #40	; 0x28
   b757a:	4604      	mov	r4, r0
   b757c:	f7fc fd8f 	bl	b409e <_ZdlPvj>
   b7580:	4620      	mov	r0, r4
   b7582:	bd10      	pop	{r4, pc}

000b7584 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7584:	b510      	push	{r4, lr}
   b7586:	2130      	movs	r1, #48	; 0x30
   b7588:	4604      	mov	r4, r0
   b758a:	f7fc fd88 	bl	b409e <_ZdlPvj>
   b758e:	4620      	mov	r0, r4
   b7590:	bd10      	pop	{r4, pc}

000b7592 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7592:	2168      	movs	r1, #104	; 0x68
   b7594:	f7fc bd83 	b.w	b409e <_ZdlPvj>

000b7598 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7598:	2128      	movs	r1, #40	; 0x28
   b759a:	f7fc bd80 	b.w	b409e <_ZdlPvj>

000b759e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b759e:	2130      	movs	r1, #48	; 0x30
   b75a0:	f7fc bd7d 	b.w	b409e <_ZdlPvj>

000b75a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b75a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b75a6:	2500      	movs	r5, #0
   b75a8:	1cec      	adds	r4, r5, #3
   b75aa:	428c      	cmp	r4, r1
   b75ac:	d80d      	bhi.n	b75ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b75ae:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b75b0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b75b2:	5d87      	ldrb	r7, [r0, r6]
   b75b4:	4297      	cmp	r7, r2
   b75b6:	d105      	bne.n	b75c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b75b8:	4426      	add	r6, r4
   b75ba:	42b1      	cmp	r1, r6
   b75bc:	d305      	bcc.n	b75ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b75be:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b75c0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b75c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b75c4:	3401      	adds	r4, #1
   b75c6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b75c8:	e7ee      	b.n	b75a8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b75ca:	2000      	movs	r0, #0
   b75cc:	e7f9      	b.n	b75c2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b75d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b75d0:	4a02      	ldr	r2, [pc, #8]	; (b75dc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b75d2:	4903      	ldr	r1, [pc, #12]	; (b75e0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b75d4:	200a      	movs	r0, #10
   b75d6:	f7ff bc3d 	b.w	b6e54 <panic_>
   b75da:	bf00      	nop
   b75dc:	000b6a51 	.word	0x000b6a51
   b75e0:	000bd6dc 	.word	0x000bd6dc

000b75e4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b75e4:	4603      	mov	r3, r0
   b75e6:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b75e8:	681b      	ldr	r3, [r3, #0]
   b75ea:	e9d3 2100 	ldrd	r2, r1, [r3]
   b75ee:	4710      	bx	r2

000b75f0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b75f0:	b430      	push	{r4, r5}
   b75f2:	460d      	mov	r5, r1
   b75f4:	4611      	mov	r1, r2
   b75f6:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b75f8:	6803      	ldr	r3, [r0, #0]
   b75fa:	6809      	ldr	r1, [r1, #0]
   b75fc:	6828      	ldr	r0, [r5, #0]
   b75fe:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7602:	46a4      	mov	ip, r4
      }
   b7604:	bc30      	pop	{r4, r5}
   b7606:	4760      	bx	ip

000b7608 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b7608:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b760a:	b538      	push	{r3, r4, r5, lr}
   b760c:	4604      	mov	r4, r0
	switch (__op)
   b760e:	d102      	bne.n	b7616 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7610:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7612:	6023      	str	r3, [r4, #0]
	}
   b7614:	e003      	b.n	b761e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b7616:	2a02      	cmp	r2, #2
   b7618:	d003      	beq.n	b7622 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b761a:	2a03      	cmp	r2, #3
   b761c:	d00d      	beq.n	b763a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b761e:	2000      	movs	r0, #0
   b7620:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7622:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7624:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7626:	f7fc fd36 	bl	b4096 <_Znwj>
   b762a:	4603      	mov	r3, r0
   b762c:	2800      	cmp	r0, #0
   b762e:	d0f0      	beq.n	b7612 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b7630:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7634:	e883 0003 	stmia.w	r3, {r0, r1}
   b7638:	e7eb      	b.n	b7612 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b763a:	6800      	ldr	r0, [r0, #0]
   b763c:	2800      	cmp	r0, #0
   b763e:	d0ee      	beq.n	b761e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b7640:	2108      	movs	r1, #8
   b7642:	f7fc fd2c 	bl	b409e <_ZdlPvj>
   b7646:	e7ea      	b.n	b761e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b7648 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7648:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b764a:	b538      	push	{r3, r4, r5, lr}
   b764c:	4604      	mov	r4, r0
	switch (__op)
   b764e:	d102      	bne.n	b7656 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7650:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7652:	6023      	str	r3, [r4, #0]
	}
   b7654:	e003      	b.n	b765e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7656:	2a02      	cmp	r2, #2
   b7658:	d003      	beq.n	b7662 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b765a:	2a03      	cmp	r2, #3
   b765c:	d00d      	beq.n	b767a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b765e:	2000      	movs	r0, #0
   b7660:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7662:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7664:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7666:	f7fc fd16 	bl	b4096 <_Znwj>
   b766a:	4603      	mov	r3, r0
   b766c:	2800      	cmp	r0, #0
   b766e:	d0f0      	beq.n	b7652 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7670:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7674:	e883 0003 	stmia.w	r3, {r0, r1}
   b7678:	e7eb      	b.n	b7652 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b767a:	6800      	ldr	r0, [r0, #0]
   b767c:	2800      	cmp	r0, #0
   b767e:	d0ee      	beq.n	b765e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7680:	2108      	movs	r1, #8
   b7682:	f7fc fd0c 	bl	b409e <_ZdlPvj>
   b7686:	e7ea      	b.n	b765e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7688 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7688:	b510      	push	{r4, lr}
   b768a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b768c:	3058      	adds	r0, #88	; 0x58
   b768e:	f7fc fead 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7692:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b769a:	f7ff bde7 	b.w	b726c <_ZN6StringD1Ev>

000b769e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b769e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b76a0:	6843      	ldr	r3, [r0, #4]
   b76a2:	3b01      	subs	r3, #1
    {
   b76a4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b76a6:	6043      	str	r3, [r0, #4]
   b76a8:	b963      	cbnz	r3, b76c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b76aa:	6803      	ldr	r3, [r0, #0]
   b76ac:	689b      	ldr	r3, [r3, #8]
   b76ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b76b0:	68a3      	ldr	r3, [r4, #8]
   b76b2:	3b01      	subs	r3, #1
   b76b4:	60a3      	str	r3, [r4, #8]
   b76b6:	b92b      	cbnz	r3, b76c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b76b8:	6823      	ldr	r3, [r4, #0]
   b76ba:	4620      	mov	r0, r4
   b76bc:	68db      	ldr	r3, [r3, #12]
    }
   b76be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b76c2:	4718      	bx	r3
    }
   b76c4:	bd10      	pop	{r4, pc}

000b76c6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b76c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b76ca:	b2da      	uxtb	r2, r3
   b76cc:	2a09      	cmp	r2, #9
   b76ce:	d801      	bhi.n	b76d4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b76d0:	4618      	mov	r0, r3
   b76d2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b76d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b76d8:	2b05      	cmp	r3, #5
   b76da:	d801      	bhi.n	b76e0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b76dc:	3857      	subs	r0, #87	; 0x57
   b76de:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b76e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b76e4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b76e6:	bf94      	ite	ls
   b76e8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b76ea:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b76ee:	4770      	bx	lr

000b76f0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b76f0:	b510      	push	{r4, lr}
            locked_(false) {
   b76f2:	2300      	movs	r3, #0
   b76f4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b76f6:	4b04      	ldr	r3, [pc, #16]	; (b7708 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b76f8:	4604      	mov	r4, r0
   b76fa:	6818      	ldr	r0, [r3, #0]
   b76fc:	f7ff fa8a 	bl	b6c14 <os_mutex_recursive_lock>
        locked_ = true;
   b7700:	2301      	movs	r3, #1
   b7702:	7023      	strb	r3, [r4, #0]
    }
   b7704:	4620      	mov	r0, r4
   b7706:	bd10      	pop	{r4, pc}
   b7708:	2003e690 	.word	0x2003e690

000b770c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b770c:	b510      	push	{r4, lr}
        if (locked_) {
   b770e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7710:	4604      	mov	r4, r0
        if (locked_) {
   b7712:	b11b      	cbz	r3, b771c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7714:	4b02      	ldr	r3, [pc, #8]	; (b7720 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7716:	6818      	ldr	r0, [r3, #0]
   b7718:	f7ff fa84 	bl	b6c24 <os_mutex_recursive_unlock>
    }
   b771c:	4620      	mov	r0, r4
   b771e:	bd10      	pop	{r4, pc}
   b7720:	2003e690 	.word	0x2003e690

000b7724 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7724:	b082      	sub	sp, #8
   b7726:	4603      	mov	r3, r0
    address_ = addr;
   b7728:	6808      	ldr	r0, [r1, #0]
   b772a:	6849      	ldr	r1, [r1, #4]
   b772c:	466a      	mov	r2, sp
   b772e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7730:	466a      	mov	r2, sp
   b7732:	ca03      	ldmia	r2!, {r0, r1}
   b7734:	6018      	str	r0, [r3, #0]
}
   b7736:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7738:	6059      	str	r1, [r3, #4]
}
   b773a:	b002      	add	sp, #8
   b773c:	4770      	bx	lr

000b773e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b773e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7740:	7982      	ldrb	r2, [r0, #6]
   b7742:	798b      	ldrb	r3, [r1, #6]
   b7744:	429a      	cmp	r2, r3
   b7746:	d106      	bne.n	b7756 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7748:	2206      	movs	r2, #6
   b774a:	f003 fb24 	bl	bad96 <memcmp>
   b774e:	fab0 f080 	clz	r0, r0
   b7752:	0940      	lsrs	r0, r0, #5
}
   b7754:	bd08      	pop	{r3, pc}
    return false;
   b7756:	2000      	movs	r0, #0
   b7758:	e7fc      	b.n	b7754 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b775a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b775a:	f04f 33ff 	mov.w	r3, #4294967295
   b775e:	6003      	str	r3, [r0, #0]
   b7760:	8083      	strh	r3, [r0, #4]
}
   b7762:	2000      	movs	r0, #0
   b7764:	4770      	bx	lr

000b7766 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7766:	b508      	push	{r3, lr}
   b7768:	4602      	mov	r2, r0
        : address_{} {
   b776a:	2100      	movs	r1, #0
   b776c:	6001      	str	r1, [r0, #0]
   b776e:	6041      	str	r1, [r0, #4]
    clear();
   b7770:	f7ff fff3 	bl	b775a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7774:	7191      	strb	r1, [r2, #6]
}
   b7776:	4610      	mov	r0, r2
   b7778:	bd08      	pop	{r3, pc}
	...

000b777c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b777c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b777e:	2301      	movs	r3, #1
   b7780:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7782:	4b05      	ldr	r3, [pc, #20]	; (b7798 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7784:	4602      	mov	r2, r0
   b7786:	f103 0110 	add.w	r1, r3, #16
   b778a:	f853 4b04 	ldr.w	r4, [r3], #4
   b778e:	f842 4b04 	str.w	r4, [r2], #4
   b7792:	428b      	cmp	r3, r1
   b7794:	d1f9      	bne.n	b778a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7796:	bd10      	pop	{r4, pc}
   b7798:	000bd88a 	.word	0x000bd88a

000b779c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b779c:	b510      	push	{r4, lr}
    if (uuid128) {
   b779e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b77a0:	4604      	mov	r4, r0
    if (uuid128) {
   b77a2:	b1b1      	cbz	r1, b77d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b77a4:	2a01      	cmp	r2, #1
   b77a6:	f101 0210 	add.w	r2, r1, #16
   b77aa:	d10a      	bne.n	b77c2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b77ac:	4601      	mov	r1, r0
   b77ae:	f853 0b04 	ldr.w	r0, [r3], #4
   b77b2:	f841 0b04 	str.w	r0, [r1], #4
   b77b6:	4293      	cmp	r3, r2
   b77b8:	d1f9      	bne.n	b77ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b77ba:	2301      	movs	r3, #1
   b77bc:	6123      	str	r3, [r4, #16]
}
   b77be:	4620      	mov	r0, r4
   b77c0:	bd10      	pop	{r4, pc}
   b77c2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b77c4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b77c8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b77cc:	429a      	cmp	r2, r3
   b77ce:	d1f9      	bne.n	b77c4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b77d0:	e7f3      	b.n	b77ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b77d2:	2210      	movs	r2, #16
   b77d4:	f003 fb17 	bl	bae06 <memset>
   b77d8:	e7f1      	b.n	b77be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b77da <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b77da:	b538      	push	{r3, r4, r5, lr}
   b77dc:	4604      	mov	r4, r0
   b77de:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b77e0:	461a      	mov	r2, r3
   b77e2:	f7ff ffdb 	bl	b779c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b77e6:	81a5      	strh	r5, [r4, #12]
}
   b77e8:	4620      	mov	r0, r4
   b77ea:	bd38      	pop	{r3, r4, r5, pc}

000b77ec <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b77ec:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b77ee:	6902      	ldr	r2, [r0, #16]
   b77f0:	b922      	cbnz	r2, b77fc <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b77f2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b77f4:	3800      	subs	r0, #0
   b77f6:	bf18      	it	ne
   b77f8:	2001      	movne	r0, #1
}
   b77fa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b77fc:	4902      	ldr	r1, [pc, #8]	; (b7808 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b77fe:	2210      	movs	r2, #16
   b7800:	f003 fac9 	bl	bad96 <memcmp>
   b7804:	e7f6      	b.n	b77f4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7806:	bf00      	nop
   b7808:	000bd8aa 	.word	0x000bd8aa

000b780c <_ZNK8particle7BleUuid4typeEv>:
}
   b780c:	6900      	ldr	r0, [r0, #16]
   b780e:	4770      	bx	lr

000b7810 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7810:	b538      	push	{r3, r4, r5, lr}
   b7812:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7814:	2214      	movs	r2, #20
   b7816:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7818:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b781a:	f003 faf4 	bl	bae06 <memset>
    if (type_ == BleUuidType::SHORT) {
   b781e:	6923      	ldr	r3, [r4, #16]
   b7820:	b91b      	cbnz	r3, b782a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7822:	89a3      	ldrh	r3, [r4, #12]
   b7824:	802b      	strh	r3, [r5, #0]
}
   b7826:	4628      	mov	r0, r5
   b7828:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b782a:	2301      	movs	r3, #1
   b782c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b782e:	4621      	mov	r1, r4
   b7830:	462b      	mov	r3, r5
   b7832:	f104 0210 	add.w	r2, r4, #16
   b7836:	f851 0b04 	ldr.w	r0, [r1], #4
   b783a:	f843 0b04 	str.w	r0, [r3], #4
   b783e:	4291      	cmp	r1, r2
   b7840:	d1f9      	bne.n	b7836 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7842:	e7f0      	b.n	b7826 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7844 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7844:	8980      	ldrh	r0, [r0, #12]
   b7846:	4770      	bx	lr

000b7848 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7848:	4770      	bx	lr

000b784a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b784a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b784c:	6902      	ldr	r2, [r0, #16]
   b784e:	690b      	ldr	r3, [r1, #16]
   b7850:	429a      	cmp	r2, r3
   b7852:	d106      	bne.n	b7862 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7854:	2210      	movs	r2, #16
   b7856:	f003 fa9e 	bl	bad96 <memcmp>
   b785a:	fab0 f080 	clz	r0, r0
   b785e:	0940      	lsrs	r0, r0, #5
}
   b7860:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7862:	2000      	movs	r0, #0
   b7864:	e7fc      	b.n	b7860 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7868 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7868:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b786a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b786e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7870:	4b34      	ldr	r3, [pc, #208]	; (b7944 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7872:	460c      	mov	r4, r1
   b7874:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7876:	4602      	mov	r2, r0
   b7878:	f103 0110 	add.w	r1, r3, #16
   b787c:	f853 0b04 	ldr.w	r0, [r3], #4
   b7880:	f842 0b04 	str.w	r0, [r2], #4
   b7884:	428b      	cmp	r3, r1
   b7886:	d1f9      	bne.n	b787c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7888:	b344      	cbz	r4, b78dc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b788a:	2124      	movs	r1, #36	; 0x24
   b788c:	4620      	mov	r0, r4
   b788e:	f003 fb4c 	bl	baf2a <strnlen>
   b7892:	2804      	cmp	r0, #4
   b7894:	f04f 0500 	mov.w	r5, #0
   b7898:	d123      	bne.n	b78e2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b789a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b789e:	af01      	add	r7, sp, #4
   b78a0:	1ca5      	adds	r5, r4, #2
   b78a2:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b78a4:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b78a8:	f7ff ff0d 	bl	b76c6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b78ac:	f1b0 0800 	subs.w	r8, r0, #0
   b78b0:	db12      	blt.n	b78d8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b78b2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b78b6:	f7ff ff06 	bl	b76c6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b78ba:	2800      	cmp	r0, #0
   b78bc:	db0c      	blt.n	b78d8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b78be:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b78c0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b78c4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b78c6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b78ca:	d1eb      	bne.n	b78a4 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b78cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b78d0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b78d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b78d6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b78d8:	2300      	movs	r3, #0
   b78da:	6133      	str	r3, [r6, #16]
}
   b78dc:	b002      	add	sp, #8
   b78de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b78e2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b78e6:	2124      	movs	r1, #36	; 0x24
   b78e8:	4620      	mov	r0, r4
   b78ea:	f003 fb1e 	bl	baf2a <strnlen>
   b78ee:	42a8      	cmp	r0, r5
   b78f0:	d807      	bhi.n	b7902 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b78f2:	4642      	mov	r2, r8
   b78f4:	2100      	movs	r1, #0
   b78f6:	4630      	mov	r0, r6
}
   b78f8:	b002      	add	sp, #8
   b78fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b78fe:	f003 ba82 	b.w	bae06 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7902:	f1b8 0f00 	cmp.w	r8, #0
   b7906:	d0e9      	beq.n	b78dc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7908:	5d60      	ldrb	r0, [r4, r5]
   b790a:	f7ff fedc 	bl	b76c6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b790e:	0603      	lsls	r3, r0, #24
   b7910:	d415      	bmi.n	b793e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7912:	0100      	lsls	r0, r0, #4
   b7914:	f108 38ff 	add.w	r8, r8, #4294967295
   b7918:	b2c7      	uxtb	r7, r0
   b791a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b791e:	2124      	movs	r1, #36	; 0x24
   b7920:	4620      	mov	r0, r4
   b7922:	f003 fb02 	bl	baf2a <strnlen>
   b7926:	3501      	adds	r5, #1
   b7928:	42a8      	cmp	r0, r5
   b792a:	d908      	bls.n	b793e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b792c:	5d60      	ldrb	r0, [r4, r5]
   b792e:	f7ff feca 	bl	b76c6 <_ZN8particle11hexToNibbleEc>
   b7932:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7934:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7936:	bfa4      	itt	ge
   b7938:	4338      	orrge	r0, r7
   b793a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b793e:	3501      	adds	r5, #1
   b7940:	e7d1      	b.n	b78e6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7942:	bf00      	nop
   b7944:	000bd88a 	.word	0x000bd88a

000b7948 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7948:	b513      	push	{r0, r1, r4, lr}
   b794a:	4604      	mov	r4, r0
   b794c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b794e:	f7ff ff15 	bl	b777c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7952:	4620      	mov	r0, r4
   b7954:	9901      	ldr	r1, [sp, #4]
   b7956:	f7ff ff87 	bl	b7868 <_ZN8particle7BleUuid9constructEPKc>
}
   b795a:	4620      	mov	r0, r4
   b795c:	b002      	add	sp, #8
   b795e:	bd10      	pop	{r4, pc}

000b7960 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7960:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7962:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7966:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7968:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b796a:	8043      	strh	r3, [r0, #2]
   b796c:	220e      	movs	r2, #14
   b796e:	4629      	mov	r1, r5
   b7970:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7972:	7105      	strb	r5, [r0, #4]
   b7974:	3006      	adds	r0, #6
   b7976:	f003 fa46 	bl	bae06 <memset>
   b797a:	f104 0014 	add.w	r0, r4, #20
   b797e:	f7ff fefd 	bl	b777c <_ZN8particle7BleUuidC1Ev>
   b7982:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7986:	f7ff fef9 	bl	b777c <_ZN8particle7BleUuidC1Ev>
   b798a:	4904      	ldr	r1, [pc, #16]	; (b799c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b798c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7990:	f7ff fcb7 	bl	b7302 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7994:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7996:	4620      	mov	r0, r4
   b7998:	bd38      	pop	{r3, r4, r5, pc}
   b799a:	bf00      	nop
   b799c:	000bd64e 	.word	0x000bd64e

000b79a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b79a0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b79a2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b79a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b79aa:	4293      	cmp	r3, r2
   b79ac:	4618      	mov	r0, r3
   b79ae:	d006      	beq.n	b79be <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b79b0:	6804      	ldr	r4, [r0, #0]
   b79b2:	8824      	ldrh	r4, [r4, #0]
   b79b4:	428c      	cmp	r4, r1
   b79b6:	f103 0308 	add.w	r3, r3, #8
   b79ba:	d1f6      	bne.n	b79aa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b79bc:	bd10      	pop	{r4, pc}
        return nullptr;
   b79be:	2000      	movs	r0, #0
   b79c0:	e7fc      	b.n	b79bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b79c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b79c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b79c6:	4606      	mov	r6, r0
   b79c8:	b085      	sub	sp, #20
   b79ca:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b79cc:	460d      	mov	r5, r1
   b79ce:	2900      	cmp	r1, #0
   b79d0:	d050      	beq.n	b7a74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b79d2:	2a00      	cmp	r2, #0
   b79d4:	d04e      	beq.n	b7a74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b79d6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b79d8:	7823      	ldrb	r3, [r4, #0]
   b79da:	2af4      	cmp	r2, #244	; 0xf4
   b79dc:	bf28      	it	cs
   b79de:	22f4      	movcs	r2, #244	; 0xf4
   b79e0:	b343      	cbz	r3, b7a34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b79e2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b79e4:	0798      	lsls	r0, r3, #30
   b79e6:	d509      	bpl.n	b79fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b79e8:	89a0      	ldrh	r0, [r4, #12]
   b79ea:	9203      	str	r2, [sp, #12]
   b79ec:	2300      	movs	r3, #0
   b79ee:	f7ff f893 	bl	b6b18 <hal_ble_gatt_server_set_characteristic_value>
   b79f2:	2800      	cmp	r0, #0
   b79f4:	9a03      	ldr	r2, [sp, #12]
   b79f6:	da03      	bge.n	b7a00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b79f8:	b005      	add	sp, #20
   b79fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b79fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7a00:	6834      	ldr	r4, [r6, #0]
   b7a02:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7a04:	06d9      	lsls	r1, r3, #27
   b7a06:	d509      	bpl.n	b7a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7a08:	2f01      	cmp	r7, #1
   b7a0a:	d007      	beq.n	b7a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7a0c:	89a0      	ldrh	r0, [r4, #12]
   b7a0e:	2300      	movs	r3, #0
   b7a10:	4629      	mov	r1, r5
}
   b7a12:	b005      	add	sp, #20
   b7a14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7a18:	f7ff b8b0 	b.w	b6b7c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7a1c:	069b      	lsls	r3, r3, #26
   b7a1e:	d5eb      	bpl.n	b79f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7a20:	2f02      	cmp	r7, #2
   b7a22:	d0e9      	beq.n	b79f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7a24:	89a0      	ldrh	r0, [r4, #12]
   b7a26:	2300      	movs	r3, #0
   b7a28:	4629      	mov	r1, r5
}
   b7a2a:	b005      	add	sp, #20
   b7a2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7a30:	f7ff b8ae 	b.w	b6b90 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7a34:	8860      	ldrh	r0, [r4, #2]
   b7a36:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7a3a:	4288      	cmp	r0, r1
   b7a3c:	d01c      	beq.n	b7a78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7a3e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7a40:	074e      	lsls	r6, r1, #29
   b7a42:	d501      	bpl.n	b7a48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7a44:	2f01      	cmp	r7, #1
   b7a46:	d104      	bne.n	b7a52 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7a48:	070b      	lsls	r3, r1, #28
   b7a4a:	d409      	bmi.n	b7a60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7a4c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7a50:	e7d2      	b.n	b79f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7a52:	89a1      	ldrh	r1, [r4, #12]
   b7a54:	9300      	str	r3, [sp, #0]
   b7a56:	4613      	mov	r3, r2
   b7a58:	462a      	mov	r2, r5
   b7a5a:	f7ff f871 	bl	b6b40 <hal_ble_gatt_client_write_without_response>
   b7a5e:	e7cb      	b.n	b79f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7a60:	2f02      	cmp	r7, #2
   b7a62:	d0f3      	beq.n	b7a4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7a64:	2300      	movs	r3, #0
   b7a66:	89a1      	ldrh	r1, [r4, #12]
   b7a68:	9300      	str	r3, [sp, #0]
   b7a6a:	4613      	mov	r3, r2
   b7a6c:	462a      	mov	r2, r5
   b7a6e:	f7ff f85d 	bl	b6b2c <hal_ble_gatt_client_write_with_response>
   b7a72:	e7c1      	b.n	b79f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7a74:	4802      	ldr	r0, [pc, #8]	; (b7a80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7a76:	e7bf      	b.n	b79f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7a78:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7a7c:	e7bc      	b.n	b79f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7a7e:	bf00      	nop
   b7a80:	fffffef2 	.word	0xfffffef2

000b7a84 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b7a84:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b7a86:	688a      	ldr	r2, [r1, #8]
   b7a88:	6809      	ldr	r1, [r1, #0]
   b7a8a:	f7ff bf9b 	b.w	b79c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b7a90 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7a94:	2600      	movs	r6, #0
   b7a96:	6006      	str	r6, [r0, #0]
   b7a98:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7a9a:	2028      	movs	r0, #40	; 0x28
   b7a9c:	460c      	mov	r4, r1
   b7a9e:	f7fc fafa 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7aa2:	1e05      	subs	r5, r0, #0
   b7aa4:	f105 080c 	add.w	r8, r5, #12
   b7aa8:	d00f      	beq.n	b7aca <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b7aaa:	2301      	movs	r3, #1
   b7aac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7ab0:	4b08      	ldr	r3, [pc, #32]	; (b7ad4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7ab2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7ab4:	4640      	mov	r0, r8
   b7ab6:	f7ff fe61 	bl	b777c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b7aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b7abc:	622e      	str	r6, [r5, #32]
   b7abe:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b7ac2:	4646      	mov	r6, r8
   b7ac4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7ac6:	6823      	ldr	r3, [r4, #0]
   b7ac8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b7aca:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7ace:	4638      	mov	r0, r7
   b7ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7ad4:	000bd84c 	.word	0x000bd84c

000b7ad8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7ad8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7ada:	2500      	movs	r5, #0
   b7adc:	6005      	str	r5, [r0, #0]
   b7ade:	4606      	mov	r6, r0
   b7ae0:	2030      	movs	r0, #48	; 0x30
   b7ae2:	f7fc fad8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7ae6:	4604      	mov	r4, r0
   b7ae8:	b188      	cbz	r0, b7b0e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7aea:	2301      	movs	r3, #1
   b7aec:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7af0:	4b09      	ldr	r3, [pc, #36]	; (b7b18 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7af2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7af8:	8183      	strh	r3, [r0, #12]
   b7afa:	300e      	adds	r0, #14
   b7afc:	f7ff fe33 	bl	b7766 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7b00:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7b04:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7b08:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7b0c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7b0e:	6074      	str	r4, [r6, #4]
   b7b10:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7b12:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7b14:	4630      	mov	r0, r6
   b7b16:	bd70      	pop	{r4, r5, r6, pc}
   b7b18:	000bd868 	.word	0x000bd868

000b7b1c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7b1e:	460d      	mov	r5, r1
   b7b20:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7b22:	a801      	add	r0, sp, #4
   b7b24:	f7ff fde4 	bl	b76f0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7b28:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7b2a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7b2e:	6023      	str	r3, [r4, #0]
   b7b30:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7b34:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7b36:	a801      	add	r0, sp, #4
   b7b38:	f7ff fde8 	bl	b770c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7b3c:	4620      	mov	r0, r4
   b7b3e:	b003      	add	sp, #12
   b7b40:	bd30      	pop	{r4, r5, pc}

000b7b42 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7b42:	b530      	push	{r4, r5, lr}
   b7b44:	4605      	mov	r5, r0
   b7b46:	b087      	sub	sp, #28
   b7b48:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7b4a:	a801      	add	r0, sp, #4
   b7b4c:	f7ff fdd0 	bl	b76f0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7b50:	682a      	ldr	r2, [r5, #0]
   b7b52:	6823      	ldr	r3, [r4, #0]
   b7b54:	8812      	ldrh	r2, [r2, #0]
   b7b56:	881b      	ldrh	r3, [r3, #0]
   b7b58:	429a      	cmp	r2, r3
   b7b5a:	d10d      	bne.n	b7b78 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7b5c:	4629      	mov	r1, r5
   b7b5e:	a802      	add	r0, sp, #8
   b7b60:	f7ff ffdc 	bl	b7b1c <_ZNK8particle13BlePeerDevice7addressEv>
   b7b64:	4621      	mov	r1, r4
   b7b66:	a804      	add	r0, sp, #16
   b7b68:	f7ff ffd8 	bl	b7b1c <_ZNK8particle13BlePeerDevice7addressEv>
   b7b6c:	a904      	add	r1, sp, #16
   b7b6e:	a802      	add	r0, sp, #8
   b7b70:	f7ff fde5 	bl	b773e <_ZNK8particle10BleAddresseqERKS0_>
   b7b74:	4604      	mov	r4, r0
   b7b76:	b900      	cbnz	r0, b7b7a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7b78:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7b7a:	a801      	add	r0, sp, #4
   b7b7c:	f7ff fdc6 	bl	b770c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7b80:	4620      	mov	r0, r4
   b7b82:	b007      	add	sp, #28
   b7b84:	bd30      	pop	{r4, r5, pc}
	...

000b7b88 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7b88:	b510      	push	{r4, lr}
   b7b8a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7b8c:	2064      	movs	r0, #100	; 0x64
   b7b8e:	f7fc fa82 	bl	b4096 <_Znwj>
   b7b92:	b168      	cbz	r0, b7bb0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7b94:	2300      	movs	r3, #0
   b7b96:	e9c0 3300 	strd	r3, r3, [r0]
   b7b9a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7ba2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7ba6:	6203      	str	r3, [r0, #32]
   b7ba8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7baa:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7bac:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7bae:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7bb0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7bb2:	b920      	cbnz	r0, b7bbe <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7bb4:	4a0a      	ldr	r2, [pc, #40]	; (b7be0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7bb6:	490b      	ldr	r1, [pc, #44]	; (b7be4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7bb8:	200a      	movs	r0, #10
   b7bba:	f7ff f94b 	bl	b6e54 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7bbe:	2000      	movs	r0, #0
   b7bc0:	f7fe ff6e 	bl	b6aa0 <hal_ble_stack_init>
   b7bc4:	b120      	cbz	r0, b7bd0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7bc6:	4a06      	ldr	r2, [pc, #24]	; (b7be0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7bc8:	4907      	ldr	r1, [pc, #28]	; (b7be8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7bca:	200a      	movs	r0, #10
   b7bcc:	f7ff f942 	bl	b6e54 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7bd0:	6821      	ldr	r1, [r4, #0]
   b7bd2:	4806      	ldr	r0, [pc, #24]	; (b7bec <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7bd4:	2200      	movs	r2, #0
   b7bd6:	f7fe ffc7 	bl	b6b68 <hal_ble_set_callback_on_periph_link_events>
}
   b7bda:	4620      	mov	r0, r4
   b7bdc:	bd10      	pop	{r4, pc}
   b7bde:	bf00      	nop
   b7be0:	000b6a51 	.word	0x000b6a51
   b7be4:	000bd6dc 	.word	0x000bd6dc
   b7be8:	000bd71a 	.word	0x000bd71a
   b7bec:	000b81bd 	.word	0x000b81bd

000b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7bf0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7bf2:	4c0a      	ldr	r4, [pc, #40]	; (b7c1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7bf4:	7823      	ldrb	r3, [r4, #0]
   b7bf6:	f3bf 8f5b 	dmb	ish
   b7bfa:	07db      	lsls	r3, r3, #31
   b7bfc:	d40c      	bmi.n	b7c18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7bfe:	4620      	mov	r0, r4
   b7c00:	f7fc fa4f 	bl	b40a2 <__cxa_guard_acquire>
   b7c04:	b140      	cbz	r0, b7c18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7c06:	4806      	ldr	r0, [pc, #24]	; (b7c20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7c08:	f7ff ffbe 	bl	b7b88 <_ZN8particle14BleLocalDeviceC1Ev>
   b7c0c:	4620      	mov	r0, r4
   b7c0e:	f7fc fa4d 	bl	b40ac <__cxa_guard_release>
   b7c12:	4804      	ldr	r0, [pc, #16]	; (b7c24 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7c14:	f003 f8b2 	bl	bad7c <atexit>
    return instance;
}
   b7c18:	4801      	ldr	r0, [pc, #4]	; (b7c20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7c1a:	bd10      	pop	{r4, pc}
   b7c1c:	2003e688 	.word	0x2003e688
   b7c20:	2003e694 	.word	0x2003e694
   b7c24:	000b7e65 	.word	0x000b7e65

000b7c28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7c28:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7c2a:	6803      	ldr	r3, [r0, #0]
   b7c2c:	3b09      	subs	r3, #9
   b7c2e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7c30:	b08d      	sub	sp, #52	; 0x34
   b7c32:	4604      	mov	r4, r0
   b7c34:	460d      	mov	r5, r1
    switch (event->type) {
   b7c36:	d811      	bhi.n	b7c5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7c38:	f7ff ffda 	bl	b7bf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7c3c:	88a1      	ldrh	r1, [r4, #4]
   b7c3e:	6800      	ldr	r0, [r0, #0]
   b7c40:	f7ff feae 	bl	b79a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7c44:	4603      	mov	r3, r0
   b7c46:	b958      	cbnz	r0, b7c60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7c48:	2220      	movs	r2, #32
   b7c4a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7c4e:	4a0b      	ldr	r2, [pc, #44]	; (b7c7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7c50:	9200      	str	r2, [sp, #0]
   b7c52:	490b      	ldr	r1, [pc, #44]	; (b7c80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7c54:	aa04      	add	r2, sp, #16
   b7c56:	2032      	movs	r0, #50	; 0x32
   b7c58:	f7ff f904 	bl	b6e64 <log_message>
}
   b7c5c:	b00d      	add	sp, #52	; 0x34
   b7c5e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7c60:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7c62:	2a00      	cmp	r2, #0
   b7c64:	d0fa      	beq.n	b7c5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7c66:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7c6a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7c6e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7c72:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7c74:	aa04      	add	r2, sp, #16
   b7c76:	a903      	add	r1, sp, #12
   b7c78:	47a0      	blx	r4
}
   b7c7a:	e7ef      	b.n	b7c5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7c7c:	000bd75c 	.word	0x000bd75c
   b7c80:	000bd6f3 	.word	0x000bd6f3

000b7c84 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7c84:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7c86:	2000      	movs	r0, #0
   b7c88:	f7fe ff0a 	bl	b6aa0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7c8c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7c90:	bd08      	pop	{r3, pc}

000b7c92 <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b7c92:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b7c94:	2100      	movs	r1, #0
   b7c96:	f7fe bf0b 	b.w	b6ab0 <hal_ble_select_antenna>

000b7c9a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b7c9a:	b919      	cbnz	r1, b7ca4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7c9c:	460a      	mov	r2, r1
   b7c9e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7ca0:	f7fe bf0e 	b.w	b6ac0 <hal_ble_gap_set_advertising_data>
   b7ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7ca8:	2200      	movs	r2, #0
   b7caa:	e7f9      	b.n	b7ca0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b7cac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7cac:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7cae:	1e14      	subs	r4, r2, #0
   b7cb0:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7cb2:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7cb4:	db02      	blt.n	b7cbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b7cb6:	1862      	adds	r2, r4, r1
   b7cb8:	429a      	cmp	r2, r3
   b7cba:	dd00      	ble.n	b7cbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7cbc:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7cbe:	682a      	ldr	r2, [r5, #0]
   b7cc0:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7cc2:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7cc4:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7cc6:	1a52      	subs	r2, r2, r1
   b7cc8:	f003 f883 	bl	badd2 <memmove>
    size_ -= n;
   b7ccc:	686a      	ldr	r2, [r5, #4]
   b7cce:	1b12      	subs	r2, r2, r4
   b7cd0:	606a      	str	r2, [r5, #4]
}
   b7cd2:	bd38      	pop	{r3, r4, r5, pc}

000b7cd4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b7cd6:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7cd8:	4604      	mov	r4, r0
   b7cda:	460d      	mov	r5, r1
   b7cdc:	ab01      	add	r3, sp, #4
   b7cde:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7ce2:	f7ff fc5f 	bl	b75a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b7ce6:	4602      	mov	r2, r0
   b7ce8:	b138      	cbz	r0, b7cfa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7cea:	9901      	ldr	r1, [sp, #4]
   b7cec:	4620      	mov	r0, r4
   b7cee:	f7ff ffdd 	bl	b7cac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7cf2:	4629      	mov	r1, r5
   b7cf4:	4620      	mov	r0, r4
   b7cf6:	f7ff ffed 	bl	b7cd4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7cfa:	b003      	add	sp, #12
   b7cfc:	bd30      	pop	{r4, r5, pc}

000b7cfe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7cfe:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7d00:	460c      	mov	r4, r1
   b7d02:	b929      	cbnz	r1, b7d10 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7d04:	460a      	mov	r2, r1
   b7d06:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7d0c:	f7fe bee0 	b.w	b6ad0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7d10:	2101      	movs	r1, #1
   b7d12:	4620      	mov	r0, r4
   b7d14:	f7ff ffde 	bl	b7cd4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7d18:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7d1c:	2200      	movs	r2, #0
   b7d1e:	e7f3      	b.n	b7d08 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7d20 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7d20:	b538      	push	{r3, r4, r5, lr}
   b7d22:	4604      	mov	r4, r0
   b7d24:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7d26:	f7ff ffb8 	bl	b7c9a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7d2a:	2800      	cmp	r0, #0
   b7d2c:	db0a      	blt.n	b7d44 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7d2e:	4629      	mov	r1, r5
   b7d30:	4620      	mov	r0, r4
   b7d32:	f7ff ffe4 	bl	b7cfe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7d36:	2800      	cmp	r0, #0
   b7d38:	db04      	blt.n	b7d44 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7d3e:	2000      	movs	r0, #0
   b7d40:	f7fe bece 	b.w	b6ae0 <hal_ble_gap_start_advertising>
}
   b7d44:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7d48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7d48:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7d4a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7d4c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7d4e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7d50:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7d52:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7d54:	f7fc f99f 	bl	b4096 <_Znwj>
   b7d58:	b118      	cbz	r0, b7d62 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7d5a:	682b      	ldr	r3, [r5, #0]
   b7d5c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7d5e:	686b      	ldr	r3, [r5, #4]
   b7d60:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7d62:	4b03      	ldr	r3, [pc, #12]	; (b7d70 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7d64:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7d66:	4b03      	ldr	r3, [pc, #12]	; (b7d74 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7d68:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7d6a:	60a3      	str	r3, [r4, #8]
      }
   b7d6c:	4620      	mov	r0, r4
   b7d6e:	bd38      	pop	{r3, r4, r5, pc}
   b7d70:	000b75f1 	.word	0x000b75f1
   b7d74:	000b7649 	.word	0x000b7649

000b7d78 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7d78:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7d7a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7d7c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7d7e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7d80:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7d82:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7d84:	f7fc f987 	bl	b4096 <_Znwj>
   b7d88:	b118      	cbz	r0, b7d92 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b7d8a:	682b      	ldr	r3, [r5, #0]
   b7d8c:	6003      	str	r3, [r0, #0]
   b7d8e:	686b      	ldr	r3, [r5, #4]
   b7d90:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7d92:	4b03      	ldr	r3, [pc, #12]	; (b7da0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b7d94:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7d96:	4b03      	ldr	r3, [pc, #12]	; (b7da4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7d98:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7d9a:	60a3      	str	r3, [r4, #8]
      }
   b7d9c:	4620      	mov	r0, r4
   b7d9e:	bd38      	pop	{r3, r4, r5, pc}
   b7da0:	000b75e5 	.word	0x000b75e5
   b7da4:	000b7609 	.word	0x000b7609

000b7da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7da8:	680b      	ldr	r3, [r1, #0]
   b7daa:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7dac:	b113      	cbz	r3, b7db4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7dae:	685a      	ldr	r2, [r3, #4]
   b7db0:	3201      	adds	r2, #1
   b7db2:	605a      	str	r2, [r3, #4]
      }
   b7db4:	4770      	bx	lr

000b7db6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b7db6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7db8:	f851 3b04 	ldr.w	r3, [r1], #4
   b7dbc:	4604      	mov	r4, r0
   b7dbe:	f840 3b04 	str.w	r3, [r0], #4
   b7dc2:	f7ff fff1 	bl	b7da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b7dc6:	6823      	ldr	r3, [r4, #0]
   b7dc8:	b90b      	cbnz	r3, b7dce <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b7dca:	f7ff fc01 	bl	b75d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7dce:	4620      	mov	r0, r4
   b7dd0:	bd10      	pop	{r4, pc}

000b7dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7dd2:	b510      	push	{r4, lr}
   b7dd4:	f851 3b04 	ldr.w	r3, [r1], #4
   b7dd8:	4604      	mov	r4, r0
   b7dda:	f840 3b04 	str.w	r3, [r0], #4
   b7dde:	f7ff ffe3 	bl	b7da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7de2:	4620      	mov	r0, r4
   b7de4:	bd10      	pop	{r4, pc}

000b7de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7de6:	b510      	push	{r4, lr}
   b7de8:	f851 3b04 	ldr.w	r3, [r1], #4
   b7dec:	4604      	mov	r4, r0
   b7dee:	f840 3b04 	str.w	r3, [r0], #4
   b7df2:	f7ff ffd9 	bl	b7da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7df6:	4620      	mov	r0, r4
   b7df8:	bd10      	pop	{r4, pc}

000b7dfa <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7dfa:	b510      	push	{r4, lr}
   b7dfc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7dfe:	3004      	adds	r0, #4
   b7e00:	f7fc feb6 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7e04:	4620      	mov	r0, r4
   b7e06:	bd10      	pop	{r4, pc}

000b7e08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7e08:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7e0a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7e0e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7e10:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7e14:	42ae      	cmp	r6, r5
   b7e16:	d004      	beq.n	b7e22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7e18:	1d28      	adds	r0, r5, #4
   b7e1a:	f7fc fea9 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e1e:	3508      	adds	r5, #8
   b7e20:	e7f8      	b.n	b7e14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7e22:	6820      	ldr	r0, [r4, #0]
   b7e24:	f7ff f912 	bl	b704c <free>
}
   b7e28:	4620      	mov	r0, r4
   b7e2a:	bd70      	pop	{r4, r5, r6, pc}

000b7e2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7e2c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7e2e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7e32:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7e34:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7e38:	42ae      	cmp	r6, r5
   b7e3a:	d004      	beq.n	b7e46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7e3c:	1d28      	adds	r0, r5, #4
   b7e3e:	f7fc fe97 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e42:	3508      	adds	r5, #8
   b7e44:	e7f8      	b.n	b7e38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7e46:	6820      	ldr	r0, [r4, #0]
   b7e48:	f7ff f900 	bl	b704c <free>
}
   b7e4c:	4620      	mov	r0, r4
   b7e4e:	bd70      	pop	{r4, r5, r6, pc}

000b7e50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7e50:	b510      	push	{r4, lr}
   b7e52:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7e54:	3024      	adds	r0, #36	; 0x24
   b7e56:	f7ff ffe9 	bl	b7e2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7e5a:	f104 0018 	add.w	r0, r4, #24
   b7e5e:	f7ff ffd3 	bl	b7e08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7e62:	bd10      	pop	{r4, pc}

000b7e64 <__tcf_0>:
    static BleLocalDevice instance;
   b7e64:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7e66:	4b17      	ldr	r3, [pc, #92]	; (b7ec4 <__tcf_0+0x60>)
   b7e68:	681c      	ldr	r4, [r3, #0]
   b7e6a:	b354      	cbz	r4, b7ec2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7e6c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7e70:	f7fc fabc 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7e74:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7e78:	f7fc fab8 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7e7c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7e80:	f7fc fab4 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7e84:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7e88:	f7fc fab0 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7e8c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7e90:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7e94:	42ae      	cmp	r6, r5
   b7e96:	d004      	beq.n	b7ea2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7e98:	1d28      	adds	r0, r5, #4
   b7e9a:	f7fc fe69 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e9e:	3508      	adds	r5, #8
   b7ea0:	e7f8      	b.n	b7e94 <__tcf_0+0x30>
    ::free(ptr);
   b7ea2:	69a0      	ldr	r0, [r4, #24]
   b7ea4:	f7ff f8d2 	bl	b704c <free>
    ~BleLocalDeviceImpl() = default;
   b7ea8:	f104 000c 	add.w	r0, r4, #12
   b7eac:	f7ff ffbe 	bl	b7e2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7eb0:	4620      	mov	r0, r4
   b7eb2:	f7ff ffa9 	bl	b7e08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b7eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7ebe:	f7fc b8ee 	b.w	b409e <_ZdlPvj>
   b7ec2:	bd70      	pop	{r4, r5, r6, pc}
   b7ec4:	2003e694 	.word	0x2003e694

000b7ec8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b7ec8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b7eca:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7ecc:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7ed0:	e9c1 3300 	strd	r3, r3, [r1]
   b7ed4:	6803      	ldr	r3, [r0, #0]
   b7ed6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ed8:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7eda:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7edc:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7ede:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7ee0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7ee2:	f7fc fe45 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7ee6:	b002      	add	sp, #8
   b7ee8:	bd10      	pop	{r4, pc}

000b7eea <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7eea:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7eec:	b510      	push	{r4, lr}
      if (_M_empty())
   b7eee:	b90a      	cbnz	r2, b7ef4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7ef0:	f002 f93e 	bl	ba170 <_ZSt25__throw_bad_function_callv>
    }
   b7ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7ef8:	68c3      	ldr	r3, [r0, #12]
   b7efa:	4718      	bx	r3

000b7efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7efc:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7efe:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7f00:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7f02:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7f04:	dd03      	ble.n	b7f0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7f06:	f7ff f8a9 	bl	b705c <realloc>
            if (!d) {
   b7f0a:	b918      	cbnz	r0, b7f14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7f0c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7f0e:	f7ff f89d 	bl	b704c <free>
        T* d = nullptr;
   b7f12:	2000      	movs	r0, #0
        data_ = d;
   b7f14:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7f16:	60a5      	str	r5, [r4, #8]
        return true;
   b7f18:	2001      	movs	r0, #1
   b7f1a:	e7f7      	b.n	b7f0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7f1c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7f1e:	6883      	ldr	r3, [r0, #8]
   b7f20:	428b      	cmp	r3, r1
   b7f22:	da02      	bge.n	b7f2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7f24:	f7ff ffea 	bl	b7efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7f28:	bd08      	pop	{r3, pc}
    return true;
   b7f2a:	2001      	movs	r0, #1
   b7f2c:	e7fc      	b.n	b7f28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7f2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7f32:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7f34:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7f36:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7f38:	4419      	add	r1, r3
   b7f3a:	6883      	ldr	r3, [r0, #8]
   b7f3c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7f3e:	4604      	mov	r4, r0
   b7f40:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7f42:	dc12      	bgt.n	b7f6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7f44:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7f46:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7f48:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7f4a:	1bd2      	subs	r2, r2, r7
   b7f4c:	4631      	mov	r1, r6
   b7f4e:	1970      	adds	r0, r6, r5
   b7f50:	f002 ff3f 	bl	badd2 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7f54:	462a      	mov	r2, r5
   b7f56:	4641      	mov	r1, r8
   b7f58:	4630      	mov	r0, r6
   b7f5a:	f002 ff2c 	bl	badb6 <memcpy>
    size_ += n;
   b7f5e:	6863      	ldr	r3, [r4, #4]
   b7f60:	442b      	add	r3, r5
   b7f62:	6063      	str	r3, [r4, #4]
    return true;
   b7f64:	2001      	movs	r0, #1
}
   b7f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7f6a:	f7ff ffc7 	bl	b7efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7f6e:	2800      	cmp	r0, #0
   b7f70:	d1e8      	bne.n	b7f44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7f72:	e7f8      	b.n	b7f66 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f76:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f78:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7f7c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7f7e:	4604      	mov	r4, r0
   b7f80:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f82:	da0b      	bge.n	b7f9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7f84:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7f86:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7f88:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7f8a:	1b52      	subs	r2, r2, r5
   b7f8c:	1c48      	adds	r0, r1, #1
   b7f8e:	f002 ff20 	bl	badd2 <memmove>
    new(p) T(std::move(value));
   b7f92:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7f94:	6863      	ldr	r3, [r4, #4]
   b7f96:	3301      	adds	r3, #1
   b7f98:	6063      	str	r3, [r4, #4]
}
   b7f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f9c:	3101      	adds	r1, #1
   b7f9e:	f7ff ffad 	bl	b7efc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7fa2:	2800      	cmp	r0, #0
   b7fa4:	d1ee      	bne.n	b7f84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7fa6:	e7f8      	b.n	b7f9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7fa8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7fa8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7faa:	6841      	ldr	r1, [r0, #4]
   b7fac:	f7ff bfe2 	b.w	b7f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7fb0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7fb4:	4604      	mov	r4, r0
   b7fb6:	461d      	mov	r5, r3
   b7fb8:	460f      	mov	r7, r1
   b7fba:	ab01      	add	r3, sp, #4
   b7fbc:	4690      	mov	r8, r2
   b7fbe:	460a      	mov	r2, r1
   b7fc0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7fc4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7fc8:	f7ff faec 	bl	b75a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7fcc:	1cae      	adds	r6, r5, #2
   b7fce:	6863      	ldr	r3, [r4, #4]
   b7fd0:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7fd2:	f1b9 0f00 	cmp.w	r9, #0
   b7fd6:	d126      	bne.n	b8026 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7fd8:	b328      	cbz	r0, b8026 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7fda:	4433      	add	r3, r6
   b7fdc:	1a1b      	subs	r3, r3, r0
   b7fde:	2bff      	cmp	r3, #255	; 0xff
   b7fe0:	d809      	bhi.n	b7ff6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7fe2:	9901      	ldr	r1, [sp, #4]
   b7fe4:	4620      	mov	r0, r4
   b7fe6:	f7ff fe61 	bl	b7cac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7fea:	6861      	ldr	r1, [r4, #4]
   b7fec:	4620      	mov	r0, r4
   b7fee:	4431      	add	r1, r6
   b7ff0:	f7ff ff94 	bl	b7f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7ff4:	b918      	cbnz	r0, b7ffe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7ff6:	6860      	ldr	r0, [r4, #4]
}
   b7ff8:	b003      	add	sp, #12
   b7ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7ffe:	1c6a      	adds	r2, r5, #1
   b8000:	9901      	ldr	r1, [sp, #4]
   b8002:	b2d2      	uxtb	r2, r2
   b8004:	4620      	mov	r0, r4
   b8006:	f7ff ffb5 	bl	b7f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b800a:	9901      	ldr	r1, [sp, #4]
   b800c:	463a      	mov	r2, r7
   b800e:	3101      	adds	r1, #1
   b8010:	4620      	mov	r0, r4
   b8012:	f7ff ffaf 	bl	b7f74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8016:	9901      	ldr	r1, [sp, #4]
   b8018:	462b      	mov	r3, r5
   b801a:	4642      	mov	r2, r8
   b801c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b801e:	4620      	mov	r0, r4
   b8020:	f7ff ff85 	bl	b7f2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8024:	e7e7      	b.n	b7ff6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8026:	18f1      	adds	r1, r6, r3
   b8028:	29ff      	cmp	r1, #255	; 0xff
   b802a:	d8e4      	bhi.n	b7ff6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b802c:	4620      	mov	r0, r4
   b802e:	f7ff ff75 	bl	b7f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8032:	2800      	cmp	r0, #0
   b8034:	d0df      	beq.n	b7ff6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8036:	1c69      	adds	r1, r5, #1
   b8038:	b2c9      	uxtb	r1, r1
   b803a:	4620      	mov	r0, r4
   b803c:	f7ff ffb4 	bl	b7fa8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8040:	4639      	mov	r1, r7
   b8042:	4620      	mov	r0, r4
   b8044:	f7ff ffb0 	bl	b7fa8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8048:	6861      	ldr	r1, [r4, #4]
   b804a:	462b      	mov	r3, r5
   b804c:	4642      	mov	r2, r8
   b804e:	e7e6      	b.n	b801e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8050 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8050:	b430      	push	{r4, r5}
   b8052:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8056:	b11a      	cbz	r2, b8060 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8058:	9502      	str	r5, [sp, #8]
}
   b805a:	bc30      	pop	{r4, r5}
   b805c:	f7ff bfa8 	b.w	b7fb0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8060:	6840      	ldr	r0, [r0, #4]
}
   b8062:	bc30      	pop	{r4, r5}
   b8064:	4770      	bx	lr

000b8066 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8066:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8068:	2300      	movs	r3, #0
   b806a:	e9c0 3300 	strd	r3, r3, [r0]
   b806e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8070:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8072:	9300      	str	r3, [sp, #0]
   b8074:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8076:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b807a:	4619      	mov	r1, r3
   b807c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8080:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8082:	f7ff ffe5 	bl	b8050 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8086:	4620      	mov	r0, r4
   b8088:	b004      	add	sp, #16
   b808a:	bd10      	pop	{r4, pc}

000b808c <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b808c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b808e:	460a      	mov	r2, r1
   b8090:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b8092:	2114      	movs	r1, #20
   b8094:	4610      	mov	r0, r2
   b8096:	9203      	str	r2, [sp, #12]
   b8098:	f002 ff47 	bl	baf2a <strnlen>
   b809c:	2100      	movs	r1, #0
   b809e:	4603      	mov	r3, r0
   b80a0:	9100      	str	r1, [sp, #0]
   b80a2:	9a03      	ldr	r2, [sp, #12]
   b80a4:	2109      	movs	r1, #9
   b80a6:	4620      	mov	r0, r4
   b80a8:	f7ff ffd2 	bl	b8050 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b80ac:	b004      	add	sp, #16
   b80ae:	bd10      	pop	{r4, pc}

000b80b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b80b0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b80b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80b4:	4604      	mov	r4, r0
   b80b6:	460d      	mov	r5, r1
   b80b8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b80ba:	d914      	bls.n	b80e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b80bc:	4290      	cmp	r0, r2
   b80be:	d213      	bcs.n	b80e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b80c0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b80c4:	1a75      	subs	r5, r6, r1
   b80c6:	f1a1 0708 	sub.w	r7, r1, #8
   b80ca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b80cc:	42b7      	cmp	r7, r6
   b80ce:	d018      	beq.n	b8102 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b80d0:	b11c      	cbz	r4, b80da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b80d2:	4631      	mov	r1, r6
   b80d4:	4620      	mov	r0, r4
   b80d6:	f7ff fe86 	bl	b7de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b80da:	1d30      	adds	r0, r6, #4
   b80dc:	f7fc fd48 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b80e0:	3e08      	subs	r6, #8
   b80e2:	3c08      	subs	r4, #8
   b80e4:	e7f2      	b.n	b80cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b80e6:	d00c      	beq.n	b8102 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b80e8:	42b5      	cmp	r5, r6
   b80ea:	d00a      	beq.n	b8102 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b80ec:	b11c      	cbz	r4, b80f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b80ee:	4629      	mov	r1, r5
   b80f0:	4620      	mov	r0, r4
   b80f2:	f7ff fe78 	bl	b7de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b80f6:	1d28      	adds	r0, r5, #4
   b80f8:	f7fc fd3a 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b80fc:	3508      	adds	r5, #8
   b80fe:	3408      	adds	r4, #8
   b8100:	e7f2      	b.n	b80e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8104 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8106:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8108:	6846      	ldr	r6, [r0, #4]
   b810a:	4668      	mov	r0, sp
   b810c:	f7ff fe6b 	bl	b7de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8110:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8114:	429f      	cmp	r7, r3
   b8116:	db12      	blt.n	b813e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8118:	3701      	adds	r7, #1
        if (n > 0) {
   b811a:	2f00      	cmp	r7, #0
   b811c:	dd29      	ble.n	b8172 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b811e:	00f8      	lsls	r0, r7, #3
   b8120:	f7fe ff8c 	bl	b703c <malloc>
            if (!d) {
   b8124:	4605      	mov	r5, r0
   b8126:	b1f0      	cbz	r0, b8166 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8128:	e9d4 1200 	ldrd	r1, r2, [r4]
   b812c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8130:	f7ff ffbe 	bl	b80b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8134:	6820      	ldr	r0, [r4, #0]
   b8136:	f7fe ff89 	bl	b704c <free>
        data_ = d;
   b813a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b813c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b813e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8140:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8142:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8146:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b814a:	4631      	mov	r1, r6
   b814c:	f106 0008 	add.w	r0, r6, #8
   b8150:	f7ff ffae 	bl	b80b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8154:	b11e      	cbz	r6, b815e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8156:	4669      	mov	r1, sp
   b8158:	4630      	mov	r0, r6
   b815a:	f7ff fe44 	bl	b7de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b815e:	6863      	ldr	r3, [r4, #4]
   b8160:	3301      	adds	r3, #1
   b8162:	6063      	str	r3, [r4, #4]
    return true;
   b8164:	2501      	movs	r5, #1
   b8166:	a801      	add	r0, sp, #4
   b8168:	f7fc fd02 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b816c:	4628      	mov	r0, r5
   b816e:	b003      	add	sp, #12
   b8170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8172:	2500      	movs	r5, #0
   b8174:	e7de      	b.n	b8134 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8176 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8178:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b817c:	4605      	mov	r5, r0
   b817e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8180:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8184:	42a6      	cmp	r6, r4
   b8186:	d005      	beq.n	b8194 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8188:	4639      	mov	r1, r7
   b818a:	4620      	mov	r0, r4
   b818c:	f7ff fcd9 	bl	b7b42 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8190:	b108      	cbz	r0, b8196 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8192:	b914      	cbnz	r4, b819a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8196:	3408      	adds	r4, #8
   b8198:	e7f4      	b.n	b8184 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b819a:	1d20      	adds	r0, r4, #4
   b819c:	f7fc fce8 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b81a0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b81a4:	f104 0108 	add.w	r1, r4, #8
   b81a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b81ac:	4620      	mov	r0, r4
   b81ae:	f7ff ff7f 	bl	b80b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b81b2:	686b      	ldr	r3, [r5, #4]
   b81b4:	3b01      	subs	r3, #1
   b81b6:	606b      	str	r3, [r5, #4]
    return true;
   b81b8:	e7ec      	b.n	b8194 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b81bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b81bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b81c0:	4605      	mov	r5, r0
   b81c2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b81c4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b81c6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b81c8:	f7ff fa92 	bl	b76f0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b81cc:	682e      	ldr	r6, [r5, #0]
   b81ce:	1ef3      	subs	r3, r6, #3
   b81d0:	2b0d      	cmp	r3, #13
   b81d2:	d83c      	bhi.n	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b81d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b81d8:	0053000e 	.word	0x0053000e
   b81dc:	00d1003b 	.word	0x00d1003b
   b81e0:	003b003b 	.word	0x003b003b
   b81e4:	003b003b 	.word	0x003b003b
   b81e8:	009b003b 	.word	0x009b003b
   b81ec:	009b009b 	.word	0x009b009b
   b81f0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b81f4:	a804      	add	r0, sp, #16
   b81f6:	f7ff fc6f 	bl	b7ad8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b81fa:	9b04      	ldr	r3, [sp, #16]
   b81fc:	89aa      	ldrh	r2, [r5, #12]
   b81fe:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8200:	6869      	ldr	r1, [r5, #4]
   b8202:	9804      	ldr	r0, [sp, #16]
   b8204:	3108      	adds	r1, #8
   b8206:	3002      	adds	r0, #2
   b8208:	f7ff fa8c 	bl	b7724 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b820c:	a904      	add	r1, sp, #16
   b820e:	a806      	add	r0, sp, #24
   b8210:	f7ff fde9 	bl	b7de6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8214:	a906      	add	r1, sp, #24
   b8216:	f104 0018 	add.w	r0, r4, #24
   b821a:	f7ff ff73 	bl	b8104 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b821e:	4605      	mov	r5, r0
   b8220:	a807      	add	r0, sp, #28
   b8222:	f7fc fca5 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8226:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8228:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b822a:	b9b5      	cbnz	r5, b825a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b822c:	4b5d      	ldr	r3, [pc, #372]	; (b83a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b822e:	495e      	ldr	r1, [pc, #376]	; (b83a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8230:	9300      	str	r3, [sp, #0]
   b8232:	2032      	movs	r0, #50	; 0x32
   b8234:	462b      	mov	r3, r5
   b8236:	aa06      	add	r2, sp, #24
   b8238:	9507      	str	r5, [sp, #28]
   b823a:	f7fe fe13 	bl	b6e64 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b823e:	9b04      	ldr	r3, [sp, #16]
   b8240:	4629      	mov	r1, r5
   b8242:	8818      	ldrh	r0, [r3, #0]
   b8244:	f7fe fc54 	bl	b6af0 <hal_ble_gap_disconnect>
   b8248:	a805      	add	r0, sp, #20
   b824a:	f7fc fc91 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b824e:	a803      	add	r0, sp, #12
   b8250:	f7ff fa5c 	bl	b770c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8254:	b00e      	add	sp, #56	; 0x38
   b8256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b825a:	4a54      	ldr	r2, [pc, #336]	; (b83ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b825c:	9200      	str	r2, [sp, #0]
   b825e:	2300      	movs	r3, #0
   b8260:	4951      	ldr	r1, [pc, #324]	; (b83a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8262:	9307      	str	r3, [sp, #28]
   b8264:	aa06      	add	r2, sp, #24
   b8266:	2001      	movs	r0, #1
   b8268:	f7fe fdfc 	bl	b6e64 <log_message>
                if (impl->connectedCallback_) {
   b826c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b826e:	2b00      	cmp	r3, #0
   b8270:	d0ea      	beq.n	b8248 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8272:	a904      	add	r1, sp, #16
   b8274:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8278:	f7ff fe37 	bl	b7eea <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b827c:	e7e4      	b.n	b8248 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b827e:	89a9      	ldrh	r1, [r5, #12]
   b8280:	4620      	mov	r0, r4
   b8282:	f7ff fb8d 	bl	b79a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8286:	4606      	mov	r6, r0
   b8288:	2800      	cmp	r0, #0
   b828a:	d0e0      	beq.n	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b828c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b828e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8292:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8296:	8029      	strh	r1, [r5, #0]
   b8298:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b829c:	429a      	cmp	r2, r3
   b829e:	d003      	beq.n	b82a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b82a0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b82a4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b82a6:	e7f9      	b.n	b829c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b82a8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b82ac:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b82b0:	45b8      	cmp	r8, r7
   b82b2:	d004      	beq.n	b82be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b82b4:	1d38      	adds	r0, r7, #4
   b82b6:	f7fc fc5b 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82ba:	3708      	adds	r7, #8
   b82bc:	e7f8      	b.n	b82b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b82be:	2300      	movs	r3, #0
   b82c0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b82c2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b82c6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b82ca:	45b8      	cmp	r8, r7
   b82cc:	d004      	beq.n	b82d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b82ce:	1d38      	adds	r0, r7, #4
   b82d0:	f7fc fc4e 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82d4:	3708      	adds	r7, #8
   b82d6:	e7f8      	b.n	b82ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b82d8:	2300      	movs	r3, #0
   b82da:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b82dc:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b82de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b82e0:	b123      	cbz	r3, b82ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b82e2:	4631      	mov	r1, r6
   b82e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b82e8:	f7ff fdff 	bl	b7eea <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b82ec:	2300      	movs	r3, #0
   b82ee:	2220      	movs	r2, #32
   b82f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b82f4:	4a2e      	ldr	r2, [pc, #184]	; (b83b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b82f6:	9200      	str	r2, [sp, #0]
   b82f8:	492b      	ldr	r1, [pc, #172]	; (b83a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b82fa:	aa06      	add	r2, sp, #24
   b82fc:	2001      	movs	r0, #1
   b82fe:	f7fe fdb1 	bl	b6e64 <log_message>
                    impl->peers_.removeOne(*peer);
   b8302:	4631      	mov	r1, r6
   b8304:	f104 0018 	add.w	r0, r4, #24
   b8308:	f7ff ff35 	bl	b8176 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b830c:	e79f      	b.n	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b830e:	89a9      	ldrh	r1, [r5, #12]
   b8310:	4620      	mov	r0, r4
   b8312:	f7ff fb45 	bl	b79a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8316:	2800      	cmp	r0, #0
   b8318:	d099      	beq.n	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b831a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b831c:	2b00      	cmp	r3, #0
   b831e:	d096      	beq.n	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8320:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8322:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8324:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8328:	d001      	beq.n	b832e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b832a:	2e10      	cmp	r6, #16
   b832c:	d117      	bne.n	b835e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b832e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8330:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8332:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8334:	2506      	movs	r5, #6
                        };
   b8336:	f88d 3015 	strb.w	r3, [sp, #21]
   b833a:	9104      	str	r1, [sp, #16]
   b833c:	f88d 2014 	strb.w	r2, [sp, #20]
   b8340:	9006      	str	r0, [sp, #24]
   b8342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8346:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8348:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b834c:	9508      	str	r5, [sp, #32]
   b834e:	e883 0003 	stmia.w	r3, {r0, r1}
   b8352:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8354:	a906      	add	r1, sp, #24
   b8356:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b835a:	4798      	blx	r3
   b835c:	e777      	b.n	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b835e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8360:	bf01      	itttt	eq
   b8362:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8364:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8366:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b836a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b836c:	bf0f      	iteee	eq
   b836e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8372:	461a      	movne	r2, r3
   b8374:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8376:	461d      	movne	r5, r3
   b8378:	e7dd      	b.n	b8336 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b837a:	89a9      	ldrh	r1, [r5, #12]
   b837c:	4620      	mov	r0, r4
   b837e:	f7ff fb0f 	bl	b79a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8382:	4601      	mov	r1, r0
   b8384:	2800      	cmp	r0, #0
   b8386:	f43f af62 	beq.w	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b838a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b838c:	2b00      	cmp	r3, #0
   b838e:	f43f af5e 	beq.w	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8392:	686b      	ldr	r3, [r5, #4]
   b8394:	9306      	str	r3, [sp, #24]
   b8396:	aa06      	add	r2, sp, #24
   b8398:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b839a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b839e:	4798      	blx	r3
   b83a0:	e755      	b.n	b824e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b83a2:	bf00      	nop
   b83a4:	000bd774 	.word	0x000bd774
   b83a8:	000bd6f3 	.word	0x000bd6f3
   b83ac:	000bd79a 	.word	0x000bd79a
   b83b0:	000bd7b7 	.word	0x000bd7b7

000b83b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b83b4:	b513      	push	{r0, r1, r4, lr}
   b83b6:	460b      	mov	r3, r1
   b83b8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b83ba:	e9d0 0100 	ldrd	r0, r1, [r0]
   b83be:	466c      	mov	r4, sp
   b83c0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b83c4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b83c8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b83cc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b83d0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b83d4:	b002      	add	sp, #8
   b83d6:	bd10      	pop	{r4, pc}

000b83d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b83d8:	b538      	push	{r3, r4, r5, lr}
   b83da:	4605      	mov	r5, r0
   b83dc:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b83de:	f7ff ffe9 	bl	b83b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b83e2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b83e4:	68a2      	ldr	r2, [r4, #8]
   b83e6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b83e8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b83ea:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b83ec:	68e2      	ldr	r2, [r4, #12]
   b83ee:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b83f0:	60e3      	str	r3, [r4, #12]
      }
   b83f2:	bd38      	pop	{r3, r4, r5, pc}

000b83f4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b83f4:	b570      	push	{r4, r5, r6, lr}
   b83f6:	4604      	mov	r4, r0
   b83f8:	b08c      	sub	sp, #48	; 0x30
   b83fa:	460e      	mov	r6, r1
   b83fc:	9201      	str	r2, [sp, #4]
   b83fe:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8400:	f7ff faae 	bl	b7960 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8404:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8406:	9901      	ldr	r1, [sp, #4]
   b8408:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b840c:	f7fe ffb2 	bl	b7374 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8410:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8414:	b1cd      	cbz	r5, b844a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8416:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8418:	9502      	str	r5, [sp, #8]
   b841a:	a902      	add	r1, sp, #8
   b841c:	a804      	add	r0, sp, #16
   b841e:	9303      	str	r3, [sp, #12]
   b8420:	f7ff fc92 	bl	b7d48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8424:	2300      	movs	r3, #0
	__x.swap(*this);
   b8426:	a908      	add	r1, sp, #32
   b8428:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b842a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b842c:	f7ff ffd4 	bl	b83d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8430:	4631      	mov	r1, r6
   b8432:	a808      	add	r0, sp, #32
   b8434:	f7ff ffd0 	bl	b83d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8438:	a808      	add	r0, sp, #32
   b843a:	f7fb ffd7 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b843e:	a804      	add	r0, sp, #16
   b8440:	f7fb ffd4 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    }
   b8444:	4620      	mov	r0, r4
   b8446:	b00c      	add	sp, #48	; 0x30
   b8448:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b844a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b844c:	e7ea      	b.n	b8424 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8450 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8454:	b087      	sub	sp, #28
   b8456:	461d      	mov	r5, r3
   b8458:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b845c:	4680      	mov	r8, r0
   b845e:	468b      	mov	fp, r1
   b8460:	4692      	mov	sl, r2
   b8462:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8464:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8466:	2200      	movs	r2, #0
   b8468:	2068      	movs	r0, #104	; 0x68
   b846a:	9102      	str	r1, [sp, #8]
   b846c:	9204      	str	r2, [sp, #16]
   b846e:	f7fb fe12 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8472:	1e06      	subs	r6, r0, #0
   b8474:	f106 090c 	add.w	r9, r6, #12
   b8478:	d018      	beq.n	b84ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b847a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b847c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b847e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b8482:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8484:	4a15      	ldr	r2, [pc, #84]	; (b84dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8486:	f847 2b20 	str.w	r2, [r7], #32
   b848a:	9b03      	ldr	r3, [sp, #12]
   b848c:	9100      	str	r1, [sp, #0]
   b848e:	465a      	mov	r2, fp
   b8490:	4651      	mov	r1, sl
   b8492:	4648      	mov	r0, r9
   b8494:	f7ff ffae 	bl	b83f4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b849a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b849c:	682b      	ldr	r3, [r5, #0]
   b849e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b84a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b84a2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b84a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b84a8:	6823      	ldr	r3, [r4, #0]
   b84aa:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b84ac:	a904      	add	r1, sp, #16
   b84ae:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b84b0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b84b4:	f7ff fd08 	bl	b7ec8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b84b8:	a805      	add	r0, sp, #20
   b84ba:	f7fc fb59 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b84be:	f8d8 3000 	ldr.w	r3, [r8]
   b84c2:	b93b      	cbnz	r3, b84d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b84c4:	4a06      	ldr	r2, [pc, #24]	; (b84e0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b84c6:	4907      	ldr	r1, [pc, #28]	; (b84e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b84c8:	200a      	movs	r0, #10
}
   b84ca:	b007      	add	sp, #28
   b84cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b84d0:	f7fe bcc0 	b.w	b6e54 <panic_>
}
   b84d4:	b007      	add	sp, #28
   b84d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b84da:	bf00      	nop
   b84dc:	000bd830 	.word	0x000bd830
   b84e0:	000b6a51 	.word	0x000b6a51
   b84e4:	000bd6dc 	.word	0x000bd6dc

000b84e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b84e8:	b538      	push	{r3, r4, r5, lr}
   b84ea:	4605      	mov	r5, r0
   b84ec:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b84ee:	f7ff ff61 	bl	b83b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84f2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b84f4:	68a2      	ldr	r2, [r4, #8]
   b84f6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b84f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84fa:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b84fc:	68e2      	ldr	r2, [r4, #12]
   b84fe:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8500:	60e3      	str	r3, [r4, #12]
      }
   b8502:	bd38      	pop	{r3, r4, r5, pc}

000b8504 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b8504:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b8506:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b8508:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b850a:	3424      	adds	r4, #36	; 0x24
   b850c:	b1b9      	cbz	r1, b853e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b850e:	e9cd 1200 	strd	r1, r2, [sp]
   b8512:	a802      	add	r0, sp, #8
   b8514:	4669      	mov	r1, sp
   b8516:	f7ff fc2f 	bl	b7d78 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b851a:	2300      	movs	r3, #0
	__x.swap(*this);
   b851c:	a906      	add	r1, sp, #24
   b851e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b8520:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b8522:	f7ff ffe1 	bl	b84e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b8526:	4621      	mov	r1, r4
   b8528:	a806      	add	r0, sp, #24
   b852a:	f7ff ffdd 	bl	b84e8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b852e:	a806      	add	r0, sp, #24
   b8530:	f7fb ff5c 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b8534:	a802      	add	r0, sp, #8
   b8536:	f7fb ff59 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
}
   b853a:	b00a      	add	sp, #40	; 0x28
   b853c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b853e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b8540:	e7eb      	b.n	b851a <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b8542 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8542:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8546:	4604      	mov	r4, r0
   b8548:	460d      	mov	r5, r1
   b854a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b854c:	d914      	bls.n	b8578 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b854e:	4290      	cmp	r0, r2
   b8550:	d213      	bcs.n	b857a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8552:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8556:	1a75      	subs	r5, r6, r1
   b8558:	f1a1 0708 	sub.w	r7, r1, #8
   b855c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b855e:	42b7      	cmp	r7, r6
   b8560:	d018      	beq.n	b8594 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8562:	b11c      	cbz	r4, b856c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8564:	4631      	mov	r1, r6
   b8566:	4620      	mov	r0, r4
   b8568:	f7ff fc33 	bl	b7dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b856c:	1d30      	adds	r0, r6, #4
   b856e:	f7fc faff 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8572:	3e08      	subs	r6, #8
   b8574:	3c08      	subs	r4, #8
   b8576:	e7f2      	b.n	b855e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8578:	d00c      	beq.n	b8594 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b857a:	42b5      	cmp	r5, r6
   b857c:	d00a      	beq.n	b8594 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b857e:	b11c      	cbz	r4, b8588 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8580:	4629      	mov	r1, r5
   b8582:	4620      	mov	r0, r4
   b8584:	f7ff fc25 	bl	b7dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8588:	1d28      	adds	r0, r5, #4
   b858a:	f7fc faf1 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b858e:	3508      	adds	r5, #8
   b8590:	3408      	adds	r4, #8
   b8592:	e7f2      	b.n	b857a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8596 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8596:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8598:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b859a:	4605      	mov	r5, r0
        if (n > 0) {
   b859c:	dd11      	ble.n	b85c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b859e:	00f0      	lsls	r0, r6, #3
   b85a0:	f7fe fd4c 	bl	b703c <malloc>
            if (!d) {
   b85a4:	4604      	mov	r4, r0
   b85a6:	b158      	cbz	r0, b85c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b85a8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b85ac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b85b0:	f7ff ffc7 	bl	b8542 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b85b4:	6828      	ldr	r0, [r5, #0]
   b85b6:	f7fe fd49 	bl	b704c <free>
        data_ = d;
   b85ba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b85bc:	60ae      	str	r6, [r5, #8]
        return true;
   b85be:	2001      	movs	r0, #1
    }
   b85c0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b85c2:	2400      	movs	r4, #0
   b85c4:	e7f6      	b.n	b85b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b85c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b85c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b85c8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b85ca:	6845      	ldr	r5, [r0, #4]
   b85cc:	4668      	mov	r0, sp
   b85ce:	f7ff fc00 	bl	b7dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b85d2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b85d6:	4299      	cmp	r1, r3
   b85d8:	da10      	bge.n	b85fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b85da:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b85dc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b85de:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b85e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b85e6:	4629      	mov	r1, r5
   b85e8:	f105 0008 	add.w	r0, r5, #8
   b85ec:	f7ff ffa9 	bl	b8542 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b85f0:	b98d      	cbnz	r5, b8616 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b85f2:	6863      	ldr	r3, [r4, #4]
   b85f4:	3301      	adds	r3, #1
   b85f6:	6063      	str	r3, [r4, #4]
    return true;
   b85f8:	2601      	movs	r6, #1
   b85fa:	e006      	b.n	b860a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b85fc:	3101      	adds	r1, #1
   b85fe:	4620      	mov	r0, r4
   b8600:	f7ff ffc9 	bl	b8596 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8604:	4606      	mov	r6, r0
   b8606:	2800      	cmp	r0, #0
   b8608:	d1e7      	bne.n	b85da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b860a:	a801      	add	r0, sp, #4
   b860c:	f7fc fab0 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8610:	4630      	mov	r0, r6
   b8612:	b002      	add	sp, #8
   b8614:	bd70      	pop	{r4, r5, r6, pc}
   b8616:	4669      	mov	r1, sp
   b8618:	4628      	mov	r0, r5
   b861a:	f7ff fbda 	bl	b7dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b861e:	e7e8      	b.n	b85f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8620 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8620:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8624:	4604      	mov	r4, r0
   b8626:	460d      	mov	r5, r1
   b8628:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b862a:	d914      	bls.n	b8656 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b862c:	4290      	cmp	r0, r2
   b862e:	d213      	bcs.n	b8658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8630:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8634:	1a75      	subs	r5, r6, r1
   b8636:	f1a1 0708 	sub.w	r7, r1, #8
   b863a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b863c:	42b7      	cmp	r7, r6
   b863e:	d018      	beq.n	b8672 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8640:	b11c      	cbz	r4, b864a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8642:	4631      	mov	r1, r6
   b8644:	4620      	mov	r0, r4
   b8646:	f7ff fbb6 	bl	b7db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b864a:	1d30      	adds	r0, r6, #4
   b864c:	f7fc fa90 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8650:	3e08      	subs	r6, #8
   b8652:	3c08      	subs	r4, #8
   b8654:	e7f2      	b.n	b863c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8656:	d00c      	beq.n	b8672 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8658:	42b5      	cmp	r5, r6
   b865a:	d00a      	beq.n	b8672 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b865c:	b11c      	cbz	r4, b8666 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b865e:	4629      	mov	r1, r5
   b8660:	4620      	mov	r0, r4
   b8662:	f7ff fba8 	bl	b7db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8666:	1d28      	adds	r0, r5, #4
   b8668:	f7fc fa82 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b866c:	3508      	adds	r5, #8
   b866e:	3408      	adds	r4, #8
   b8670:	e7f2      	b.n	b8658 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8674:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8676:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8678:	4605      	mov	r5, r0
        if (n > 0) {
   b867a:	dd11      	ble.n	b86a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b867c:	00f0      	lsls	r0, r6, #3
   b867e:	f7fe fcdd 	bl	b703c <malloc>
            if (!d) {
   b8682:	4604      	mov	r4, r0
   b8684:	b158      	cbz	r0, b869e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8686:	e9d5 1200 	ldrd	r1, r2, [r5]
   b868a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b868e:	f7ff ffc7 	bl	b8620 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8692:	6828      	ldr	r0, [r5, #0]
   b8694:	f7fe fcda 	bl	b704c <free>
        data_ = d;
   b8698:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b869a:	60ae      	str	r6, [r5, #8]
        return true;
   b869c:	2001      	movs	r0, #1
    }
   b869e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b86a0:	2400      	movs	r4, #0
   b86a2:	e7f6      	b.n	b8692 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b86a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b86a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b86a6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b86a8:	6845      	ldr	r5, [r0, #4]
   b86aa:	4668      	mov	r0, sp
   b86ac:	f7ff fb83 	bl	b7db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b86b0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b86b4:	4299      	cmp	r1, r3
   b86b6:	da10      	bge.n	b86da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b86b8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b86ba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b86bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b86c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b86c4:	4629      	mov	r1, r5
   b86c6:	f105 0008 	add.w	r0, r5, #8
   b86ca:	f7ff ffa9 	bl	b8620 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b86ce:	b98d      	cbnz	r5, b86f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b86d0:	6863      	ldr	r3, [r4, #4]
   b86d2:	3301      	adds	r3, #1
   b86d4:	6063      	str	r3, [r4, #4]
    return true;
   b86d6:	2601      	movs	r6, #1
   b86d8:	e006      	b.n	b86e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b86da:	3101      	adds	r1, #1
   b86dc:	4620      	mov	r0, r4
   b86de:	f7ff ffc9 	bl	b8674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b86e2:	4606      	mov	r6, r0
   b86e4:	2800      	cmp	r0, #0
   b86e6:	d1e7      	bne.n	b86b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b86e8:	a801      	add	r0, sp, #4
   b86ea:	f7fc fa41 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b86ee:	4630      	mov	r0, r6
   b86f0:	b002      	add	sp, #8
   b86f2:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b86f4:	4669      	mov	r1, sp
   b86f6:	4628      	mov	r0, r5
   b86f8:	f7ff fb5d 	bl	b7db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b86fc:	e7e8      	b.n	b86d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b8700 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8704:	4617      	mov	r7, r2
   b8706:	b0a1      	sub	sp, #132	; 0x84
   b8708:	4680      	mov	r8, r0
    WiringBleLock lk;
   b870a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b870c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b870e:	f7fe ffef 	bl	b76f0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8712:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8714:	7923      	ldrb	r3, [r4, #4]
   b8716:	b953      	cbnz	r3, b872e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8718:	4639      	mov	r1, r7
   b871a:	4640      	mov	r0, r8
   b871c:	f7ff fb4b 	bl	b7db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8720:	a80a      	add	r0, sp, #40	; 0x28
   b8722:	f7fe fff3 	bl	b770c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8726:	4640      	mov	r0, r8
   b8728:	b021      	add	sp, #132	; 0x84
   b872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b872e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8730:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8734:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8738:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b873a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b873e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8742:	9b03      	ldr	r3, [sp, #12]
   b8744:	429d      	cmp	r5, r3
   b8746:	d021      	beq.n	b878c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8748:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b874c:	4658      	mov	r0, fp
   b874e:	f109 0114 	add.w	r1, r9, #20
   b8752:	f7ff f87a 	bl	b784a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8756:	b1b8      	cbz	r0, b8788 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8758:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b875c:	4650      	mov	r0, sl
   b875e:	f7ff f874 	bl	b784a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8762:	b188      	cbz	r0, b8788 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8764:	6823      	ldr	r3, [r4, #0]
   b8766:	f8d9 2000 	ldr.w	r2, [r9]
   b876a:	4053      	eors	r3, r2
   b876c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8770:	d10a      	bne.n	b8788 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8772:	2220      	movs	r2, #32
   b8774:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8778:	4a5e      	ldr	r2, [pc, #376]	; (b88f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b877a:	9200      	str	r2, [sp, #0]
   b877c:	aa15      	add	r2, sp, #84	; 0x54
   b877e:	495e      	ldr	r1, [pc, #376]	; (b88f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8780:	2032      	movs	r0, #50	; 0x32
   b8782:	f7fe fb6f 	bl	b6e64 <log_message>
   b8786:	e7c7      	b.n	b8718 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8788:	3508      	adds	r5, #8
   b878a:	e7da      	b.n	b8742 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b878c:	4650      	mov	r0, sl
   b878e:	f7ff f82d 	bl	b77ec <_ZNK8particle7BleUuid7isValidEv>
   b8792:	b960      	cbnz	r0, b87ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8794:	4959      	ldr	r1, [pc, #356]	; (b88fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8796:	2201      	movs	r2, #1
   b8798:	a815      	add	r0, sp, #84	; 0x54
   b879a:	ad15      	add	r5, sp, #84	; 0x54
   b879c:	f7fe fffe 	bl	b779c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b87a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87a2:	46d4      	mov	ip, sl
   b87a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b87a8:	682b      	ldr	r3, [r5, #0]
   b87aa:	f8cc 3000 	str.w	r3, [ip]
   b87ae:	6833      	ldr	r3, [r6, #0]
   b87b0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b87b4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b87b8:	455d      	cmp	r5, fp
   b87ba:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b87bc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b87be:	d06e      	beq.n	b889e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b87c0:	f855 0b08 	ldr.w	r0, [r5], #8
   b87c4:	f7ff f841 	bl	b784a <_ZNK8particle7BleUuideqERKS0_>
   b87c8:	2800      	cmp	r0, #0
   b87ca:	d0f5      	beq.n	b87b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b87cc:	f104 0a14 	add.w	sl, r4, #20
   b87d0:	4650      	mov	r0, sl
   b87d2:	f7ff f80b 	bl	b77ec <_ZNK8particle7BleUuid7isValidEv>
   b87d6:	b988      	cbnz	r0, b87fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b87d8:	4b49      	ldr	r3, [pc, #292]	; (b8900 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b87da:	4948      	ldr	r1, [pc, #288]	; (b88fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b87dc:	881a      	ldrh	r2, [r3, #0]
   b87de:	3201      	adds	r2, #1
   b87e0:	b292      	uxth	r2, r2
   b87e2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b87e4:	a815      	add	r0, sp, #84	; 0x54
   b87e6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b87e8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b87ea:	f7fe fff6 	bl	b77da <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b87ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87f0:	46d4      	mov	ip, sl
   b87f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b87f6:	682b      	ldr	r3, [r5, #0]
   b87f8:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b87fc:	4b41      	ldr	r3, [pc, #260]	; (b8904 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b87fe:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8800:	2228      	movs	r2, #40	; 0x28
   b8802:	2100      	movs	r1, #0
   b8804:	a816      	add	r0, sp, #88	; 0x58
   b8806:	f002 fafe 	bl	bae06 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b880a:	4651      	mov	r1, sl
   b880c:	a804      	add	r0, sp, #16
   b880e:	f7fe ffff 	bl	b7810 <_ZN8particle7BleUuid7halUUIDEv>
   b8812:	ab04      	add	r3, sp, #16
   b8814:	aa18      	add	r2, sp, #96	; 0x60
   b8816:	f10d 0c20 	add.w	ip, sp, #32
   b881a:	6818      	ldr	r0, [r3, #0]
   b881c:	6859      	ldr	r1, [r3, #4]
   b881e:	4615      	mov	r5, r2
   b8820:	c503      	stmia	r5!, {r0, r1}
   b8822:	3308      	adds	r3, #8
   b8824:	4563      	cmp	r3, ip
   b8826:	462a      	mov	r2, r5
   b8828:	d1f7      	bne.n	b881a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b882a:	6818      	ldr	r0, [r3, #0]
   b882c:	6028      	str	r0, [r5, #0]
    return value_;
   b882e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8830:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8834:	f8d9 3000 	ldr.w	r3, [r9]
   b8838:	8a9b      	ldrh	r3, [r3, #20]
   b883a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b883e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8840:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8842:	4b31      	ldr	r3, [pc, #196]	; (b8908 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8844:	2200      	movs	r2, #0
   b8846:	1da1      	adds	r1, r4, #6
   b8848:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b884a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b884e:	f7fe f981 	bl	b6b54 <hal_ble_gatt_server_add_characteristic>
   b8852:	2800      	cmp	r0, #0
   b8854:	f47f af60 	bne.w	b8718 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8858:	2301      	movs	r3, #1
   b885a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b885c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b885e:	4639      	mov	r1, r7
        return characteristics_;
   b8860:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8862:	a80d      	add	r0, sp, #52	; 0x34
   b8864:	f7ff faa7 	bl	b7db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8868:	4620      	mov	r0, r4
   b886a:	a90d      	add	r1, sp, #52	; 0x34
   b886c:	f7ff ff1a 	bl	b86a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8870:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8872:	a80e      	add	r0, sp, #56	; 0x38
   b8874:	f7fc f97c 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8878:	2c00      	cmp	r4, #0
   b887a:	f47f af4d 	bne.w	b8718 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b887e:	2320      	movs	r3, #32
   b8880:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8884:	4b21      	ldr	r3, [pc, #132]	; (b890c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8886:	9300      	str	r3, [sp, #0]
   b8888:	aa0d      	add	r2, sp, #52	; 0x34
   b888a:	4623      	mov	r3, r4
   b888c:	e777      	b.n	b877e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b888e:	4639      	mov	r1, r7
   b8890:	4640      	mov	r0, r8
   b8892:	f7ff fa90 	bl	b7db6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8896:	a80c      	add	r0, sp, #48	; 0x30
   b8898:	f7fc f96a 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b889c:	e740      	b.n	b8720 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b889e:	a80b      	add	r0, sp, #44	; 0x2c
   b88a0:	f7ff f8f6 	bl	b7a90 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b88a4:	4651      	mov	r1, sl
   b88a6:	a815      	add	r0, sp, #84	; 0x54
   b88a8:	f7fe ffb2 	bl	b7810 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b88ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b88ae:	2300      	movs	r3, #0
   b88b0:	3214      	adds	r2, #20
   b88b2:	a915      	add	r1, sp, #84	; 0x54
   b88b4:	2001      	movs	r0, #1
   b88b6:	f7fe f925 	bl	b6b04 <hal_ble_gatt_server_add_service>
   b88ba:	2800      	cmp	r0, #0
   b88bc:	d1e7      	bne.n	b888e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b88be:	6835      	ldr	r5, [r6, #0]
   b88c0:	a90b      	add	r1, sp, #44	; 0x2c
   b88c2:	a80d      	add	r0, sp, #52	; 0x34
   b88c4:	f7ff fa85 	bl	b7dd2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b88c8:	4628      	mov	r0, r5
   b88ca:	a90d      	add	r1, sp, #52	; 0x34
   b88cc:	f7ff fe7b 	bl	b85c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b88d0:	4605      	mov	r5, r0
   b88d2:	a80e      	add	r0, sp, #56	; 0x38
   b88d4:	f7fc f94c 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88d8:	2d00      	cmp	r5, #0
   b88da:	d0d8      	beq.n	b888e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b88dc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b88de:	6853      	ldr	r3, [r2, #4]
   b88e0:	6812      	ldr	r2, [r2, #0]
   b88e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b88e6:	3b01      	subs	r3, #1
   b88e8:	a80c      	add	r0, sp, #48	; 0x30
   b88ea:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b88ee:	f7fc f93f 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88f2:	e76b      	b.n	b87cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b88f4:	000bd7d6 	.word	0x000bd7d6
   b88f8:	000bd6f3 	.word	0x000bd6f3
   b88fc:	000bd89a 	.word	0x000bd89a
   b8900:	2003e68c 	.word	0x2003e68c
   b8904:	002c0003 	.word	0x002c0003
   b8908:	000b7c29 	.word	0x000b7c29
   b890c:	000bd801 	.word	0x000bd801

000b8910 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8910:	4802      	ldr	r0, [pc, #8]	; (b891c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8912:	2300      	movs	r3, #0
   b8914:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8916:	f7fe b975 	b.w	b6c04 <os_mutex_recursive_create>
   b891a:	bf00      	nop
   b891c:	2003e690 	.word	0x2003e690

000b8920 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8922:	4606      	mov	r6, r0
   b8924:	460d      	mov	r5, r1
  size_t n = 0;
   b8926:	188f      	adds	r7, r1, r2
   b8928:	2400      	movs	r4, #0
  while (size--) {
   b892a:	42bd      	cmp	r5, r7
   b892c:	d00c      	beq.n	b8948 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b892e:	6833      	ldr	r3, [r6, #0]
   b8930:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8934:	689b      	ldr	r3, [r3, #8]
   b8936:	4630      	mov	r0, r6
   b8938:	4798      	blx	r3
     if (chunk>=0)
   b893a:	1e03      	subs	r3, r0, #0
   b893c:	db01      	blt.n	b8942 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b893e:	441c      	add	r4, r3
  while (size--) {
   b8940:	e7f3      	b.n	b892a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8942:	2c00      	cmp	r4, #0
   b8944:	bf08      	it	eq
   b8946:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8948:	4620      	mov	r0, r4
   b894a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b894c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b894c:	b513      	push	{r0, r1, r4, lr}
   b894e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b8950:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8952:	b159      	cbz	r1, b896c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8954:	9101      	str	r1, [sp, #4]
   b8956:	f002 facc 	bl	baef2 <strlen>
   b895a:	6823      	ldr	r3, [r4, #0]
   b895c:	9901      	ldr	r1, [sp, #4]
   b895e:	68db      	ldr	r3, [r3, #12]
   b8960:	4602      	mov	r2, r0
   b8962:	4620      	mov	r0, r4
    }
   b8964:	b002      	add	sp, #8
   b8966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b896a:	4718      	bx	r3
    }
   b896c:	b002      	add	sp, #8
   b896e:	bd10      	pop	{r4, pc}

000b8970 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8970:	b508      	push	{r3, lr}
  return write(str);
   b8972:	f7ff ffeb 	bl	b894c <_ZN5Print5writeEPKc>
}
   b8976:	bd08      	pop	{r3, pc}

000b8978 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8978:	6803      	ldr	r3, [r0, #0]
   b897a:	689b      	ldr	r3, [r3, #8]
   b897c:	4718      	bx	r3

000b897e <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   b897e:	680a      	ldr	r2, [r1, #0]
 {
   b8980:	460b      	mov	r3, r1
   return x.printTo(*this);
   b8982:	6812      	ldr	r2, [r2, #0]
   b8984:	4601      	mov	r1, r0
   b8986:	4618      	mov	r0, r3
   b8988:	4710      	bx	r2

000b898a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b898a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b898c:	210d      	movs	r1, #13
{
   b898e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8990:	f7ff fff2 	bl	b8978 <_ZN5Print5printEc>
  n += print('\n');
   b8994:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8996:	4604      	mov	r4, r0
  n += print('\n');
   b8998:	4628      	mov	r0, r5
   b899a:	f7ff ffed 	bl	b8978 <_ZN5Print5printEc>
  return n;
}
   b899e:	4420      	add	r0, r4
   b89a0:	bd38      	pop	{r3, r4, r5, pc}

000b89a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b89a2:	b538      	push	{r3, r4, r5, lr}
   b89a4:	4605      	mov	r5, r0
  return write(str);
   b89a6:	f7ff ffd1 	bl	b894c <_ZN5Print5writeEPKc>
   b89aa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b89ac:	4628      	mov	r0, r5
   b89ae:	f7ff ffec 	bl	b898a <_ZN5Print7printlnEv>
  return n;
}
   b89b2:	4420      	add	r0, r4
   b89b4:	bd38      	pop	{r3, r4, r5, pc}

000b89b6 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   b89b6:	b538      	push	{r3, r4, r5, lr}
   b89b8:	4605      	mov	r5, r0
   size_t n = print(x);
   b89ba:	f7ff ffe0 	bl	b897e <_ZN5Print5printERK9Printable>
   b89be:	4604      	mov	r4, r0
   n += println();
   b89c0:	4628      	mov	r0, r5
   b89c2:	f7ff ffe2 	bl	b898a <_ZN5Print7printlnEv>
   return n;
 }
   b89c6:	4420      	add	r0, r4
   b89c8:	bd38      	pop	{r3, r4, r5, pc}

000b89ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b89ca:	b530      	push	{r4, r5, lr}
   b89cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b89ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b89d0:	2a01      	cmp	r2, #1
  *str = '\0';
   b89d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b89d6:	bf98      	it	ls
   b89d8:	220a      	movls	r2, #10
   b89da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b89dc:	460d      	mov	r5, r1
   b89de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b89e2:	fb01 5312 	mls	r3, r1, r2, r5
   b89e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b89ea:	2b09      	cmp	r3, #9
   b89ec:	bf94      	ite	ls
   b89ee:	3330      	addls	r3, #48	; 0x30
   b89f0:	3337      	addhi	r3, #55	; 0x37
   b89f2:	b2db      	uxtb	r3, r3
  } while(n);
   b89f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b89f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b89fa:	d9ef      	bls.n	b89dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b89fc:	4621      	mov	r1, r4
   b89fe:	f7ff ffa5 	bl	b894c <_ZN5Print5writeEPKc>
}
   b8a02:	b00b      	add	sp, #44	; 0x2c
   b8a04:	bd30      	pop	{r4, r5, pc}

000b8a06 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a0a:	b086      	sub	sp, #24
   b8a0c:	af00      	add	r7, sp, #0
   b8a0e:	4605      	mov	r5, r0
   b8a10:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8a12:	1d38      	adds	r0, r7, #4
   b8a14:	2114      	movs	r1, #20
{
   b8a16:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8a18:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8a1a:	f7fe fb37 	bl	b708c <vsnprintf>

    if (n<bufsize)
   b8a1e:	2813      	cmp	r0, #19
   b8a20:	d80e      	bhi.n	b8a40 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8a22:	1d39      	adds	r1, r7, #4
   b8a24:	4628      	mov	r0, r5
   b8a26:	f7ff ff91 	bl	b894c <_ZN5Print5writeEPKc>
   b8a2a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8a2c:	b11e      	cbz	r6, b8a36 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8a2e:	4628      	mov	r0, r5
   b8a30:	f7ff ffab 	bl	b898a <_ZN5Print7printlnEv>
   b8a34:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8a36:	4620      	mov	r0, r4
   b8a38:	3718      	adds	r7, #24
   b8a3a:	46bd      	mov	sp, r7
   b8a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8a40:	f100 0308 	add.w	r3, r0, #8
   b8a44:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8a48:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8a4a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8a4e:	4622      	mov	r2, r4
   b8a50:	1c41      	adds	r1, r0, #1
   b8a52:	683b      	ldr	r3, [r7, #0]
   b8a54:	4668      	mov	r0, sp
   b8a56:	f7fe fb19 	bl	b708c <vsnprintf>
  return write(str);
   b8a5a:	4669      	mov	r1, sp
   b8a5c:	4628      	mov	r0, r5
   b8a5e:	f7ff ff75 	bl	b894c <_ZN5Print5writeEPKc>
   b8a62:	4604      	mov	r4, r0
   b8a64:	46c5      	mov	sp, r8
   b8a66:	e7e1      	b.n	b8a2c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8a68 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8a68:	4b01      	ldr	r3, [pc, #4]	; (b8a70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8a6a:	4a02      	ldr	r2, [pc, #8]	; (b8a74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8a6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8a6e:	4770      	bx	lr
   b8a70:	2003e698 	.word	0x2003e698
   b8a74:	000bd8ba 	.word	0x000bd8ba

000b8a78 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b8a7c:	4a15      	ldr	r2, [pc, #84]	; (b8ad4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b8a7e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b8ae0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b8a82:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8a86:	1980      	adds	r0, r0, r6
   b8a88:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b8a8c:	4b12      	ldr	r3, [pc, #72]	; (b8ad8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b8a8e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b8a92:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8a96:	1986      	adds	r6, r0, r6
   b8a98:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b8a9c:	42bb      	cmp	r3, r7
   b8a9e:	bf08      	it	eq
   b8aa0:	42b2      	cmpeq	r2, r6
{
   b8aa2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8aa4:	d013      	beq.n	b8ace <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8aa6:	a903      	add	r1, sp, #12
   b8aa8:	4668      	mov	r0, sp
   b8aaa:	e9cd 6700 	strd	r6, r7, [sp]
   b8aae:	f7fe fb1d 	bl	b70ec <localtime_r>
	calendar_time.tm_year += 1900;
   b8ab2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8ab4:	4d09      	ldr	r5, [pc, #36]	; (b8adc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8ab6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8aba:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b8abc:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8ac6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8aca:	6823      	ldr	r3, [r4, #0]
   b8acc:	602b      	str	r3, [r5, #0]
    }
}
   b8ace:	b00c      	add	sp, #48	; 0x30
   b8ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8ad4:	2003e6d0 	.word	0x2003e6d0
   b8ad8:	2003e6c8 	.word	0x2003e6c8
   b8adc:	2003e6a0 	.word	0x2003e6a0
   b8ae0:	2003e6d8 	.word	0x2003e6d8

000b8ae4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b8ae4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8ae6:	2000      	movs	r0, #0
   b8ae8:	f7fe fa98 	bl	b701c <spark_sync_time_pending>
   b8aec:	b128      	cbz	r0, b8afa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8aee:	f7fe fa75 	bl	b6fdc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8af2:	f080 0001 	eor.w	r0, r0, #1
   b8af6:	b2c0      	uxtb	r0, r0
    }
   b8af8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8afa:	2001      	movs	r0, #1
   b8afc:	e7fc      	b.n	b8af8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b8b00 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b8b00:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b8b02:	f7ff ffb9 	bl	b8a78 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b8b06:	4b02      	ldr	r3, [pc, #8]	; (b8b10 <_ZN9TimeClass5monthEx+0x10>)
   b8b08:	6918      	ldr	r0, [r3, #16]
}
   b8b0a:	3001      	adds	r0, #1
   b8b0c:	bd08      	pop	{r3, pc}
   b8b0e:	bf00      	nop
   b8b10:	2003e6a0 	.word	0x2003e6a0

000b8b14 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b8b14:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b8b18:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b8b20:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b8b22:	d411      	bmi.n	b8b48 <_ZN9TimeClass4zoneEf+0x34>
   b8b24:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b8b28:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8b30:	dc0a      	bgt.n	b8b48 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b8b32:	eddf 7a06 	vldr	s15, [pc, #24]	; b8b4c <_ZN9TimeClass4zoneEf+0x38>
   b8b36:	ee60 7a27 	vmul.f32	s15, s0, s15
   b8b3a:	ee17 0a90 	vmov	r0, s15
   b8b3e:	f002 f8cb 	bl	bacd8 <__aeabi_f2lz>
   b8b42:	4b03      	ldr	r3, [pc, #12]	; (b8b50 <_ZN9TimeClass4zoneEf+0x3c>)
   b8b44:	e9c3 0100 	strd	r0, r1, [r3]
}
   b8b48:	bd08      	pop	{r3, pc}
   b8b4a:	bf00      	nop
   b8b4c:	45610000 	.word	0x45610000
   b8b50:	2003e6d0 	.word	0x2003e6d0

000b8b54 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8b54:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8b56:	2000      	movs	r0, #0
   b8b58:	f7fd ff8a 	bl	b6a70 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8b5c:	4604      	mov	r4, r0
   b8b5e:	b9a0      	cbnz	r0, b8b8a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8b60:	f7fe f988 	bl	b6e74 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8b64:	2801      	cmp	r0, #1
   b8b66:	d110      	bne.n	b8b8a <_ZN9TimeClass7isValidEv+0x36>
   b8b68:	4620      	mov	r0, r4
   b8b6a:	f7fe f9b3 	bl	b6ed4 <system_thread_get_state>
   b8b6e:	b960      	cbnz	r0, b8b8a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8b70:	f7ff ffb8 	bl	b8ae4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8b74:	b910      	cbnz	r0, b8b7c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8b76:	f7fe fa29 	bl	b6fcc <spark_process>
        while (_while() && !_condition()) {
   b8b7a:	e7f9      	b.n	b8b70 <_ZN9TimeClass7isValidEv+0x1c>
   b8b7c:	f7ff ffb2 	bl	b8ae4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8b84:	2000      	movs	r0, #0
   b8b86:	f7fd bf73 	b.w	b6a70 <hal_rtc_time_is_valid>
}
   b8b8a:	4620      	mov	r0, r4
   b8b8c:	bd10      	pop	{r4, pc}

000b8b8e <_ZN9TimeClass3nowEv>:
{
   b8b8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b8b90:	f7ff ffe0 	bl	b8b54 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8b94:	2210      	movs	r2, #16
   b8b96:	2100      	movs	r1, #0
   b8b98:	4668      	mov	r0, sp
   b8b9a:	f002 f934 	bl	bae06 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b8b9e:	2100      	movs	r1, #0
   b8ba0:	4668      	mov	r0, sp
   b8ba2:	f7fd ff6d 	bl	b6a80 <hal_rtc_get_time>
}
   b8ba6:	9800      	ldr	r0, [sp, #0]
   b8ba8:	b005      	add	sp, #20
   b8baa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8bb0 <_ZN9TimeClass4hourEv>:
{
   b8bb0:	b508      	push	{r3, lr}
	return hour(now());
   b8bb2:	f7ff ffec 	bl	b8b8e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8bb6:	17c1      	asrs	r1, r0, #31
   b8bb8:	f7ff ff5e 	bl	b8a78 <_ZL22Refresh_UnixTime_Cachex>
}
   b8bbc:	4b01      	ldr	r3, [pc, #4]	; (b8bc4 <_ZN9TimeClass4hourEv+0x14>)
   b8bbe:	6898      	ldr	r0, [r3, #8]
   b8bc0:	bd08      	pop	{r3, pc}
   b8bc2:	bf00      	nop
   b8bc4:	2003e6a0 	.word	0x2003e6a0

000b8bc8 <_ZN9TimeClass6minuteEv>:
{
   b8bc8:	b508      	push	{r3, lr}
	return minute(now());
   b8bca:	f7ff ffe0 	bl	b8b8e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8bce:	17c1      	asrs	r1, r0, #31
   b8bd0:	f7ff ff52 	bl	b8a78 <_ZL22Refresh_UnixTime_Cachex>
}
   b8bd4:	4b01      	ldr	r3, [pc, #4]	; (b8bdc <_ZN9TimeClass6minuteEv+0x14>)
   b8bd6:	6858      	ldr	r0, [r3, #4]
   b8bd8:	bd08      	pop	{r3, pc}
   b8bda:	bf00      	nop
   b8bdc:	2003e6a0 	.word	0x2003e6a0

000b8be0 <_ZN9TimeClass6secondEv>:
{
   b8be0:	b508      	push	{r3, lr}
	return second(now());
   b8be2:	f7ff ffd4 	bl	b8b8e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8be6:	17c1      	asrs	r1, r0, #31
   b8be8:	f7ff ff46 	bl	b8a78 <_ZL22Refresh_UnixTime_Cachex>
}
   b8bec:	4b01      	ldr	r3, [pc, #4]	; (b8bf4 <_ZN9TimeClass6secondEv+0x14>)
   b8bee:	6818      	ldr	r0, [r3, #0]
   b8bf0:	bd08      	pop	{r3, pc}
   b8bf2:	bf00      	nop
   b8bf4:	2003e6a0 	.word	0x2003e6a0

000b8bf8 <_ZN9TimeClass3dayEv>:
{
   b8bf8:	b508      	push	{r3, lr}
	return day(now());
   b8bfa:	f7ff ffc8 	bl	b8b8e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8bfe:	17c1      	asrs	r1, r0, #31
   b8c00:	f7ff ff3a 	bl	b8a78 <_ZL22Refresh_UnixTime_Cachex>
}
   b8c04:	4b01      	ldr	r3, [pc, #4]	; (b8c0c <_ZN9TimeClass3dayEv+0x14>)
   b8c06:	68d8      	ldr	r0, [r3, #12]
   b8c08:	bd08      	pop	{r3, pc}
   b8c0a:	bf00      	nop
   b8c0c:	2003e6a0 	.word	0x2003e6a0

000b8c10 <_ZN9TimeClass5monthEv>:
{
   b8c10:	b508      	push	{r3, lr}
	return month(now());
   b8c12:	f7ff ffbc 	bl	b8b8e <_ZN9TimeClass3nowEv>
}
   b8c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b8c1a:	17c1      	asrs	r1, r0, #31
   b8c1c:	f7ff bf70 	b.w	b8b00 <_ZN9TimeClass5monthEx>

000b8c20 <_ZN9TimeClass4yearEv>:
{
   b8c20:	b508      	push	{r3, lr}
	return year(now());
   b8c22:	f7ff ffb4 	bl	b8b8e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8c26:	17c1      	asrs	r1, r0, #31
   b8c28:	f7ff ff26 	bl	b8a78 <_ZL22Refresh_UnixTime_Cachex>
}
   b8c2c:	4b01      	ldr	r3, [pc, #4]	; (b8c34 <_ZN9TimeClass4yearEv+0x14>)
   b8c2e:	6958      	ldr	r0, [r3, #20]
   b8c30:	bd08      	pop	{r3, pc}
   b8c32:	bf00      	nop
   b8c34:	2003e6a0 	.word	0x2003e6a0

000b8c38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8c38:	4b02      	ldr	r3, [pc, #8]	; (b8c44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8c3a:	681a      	ldr	r2, [r3, #0]
   b8c3c:	4b02      	ldr	r3, [pc, #8]	; (b8c48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8c3e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8c40:	4770      	bx	lr
   b8c42:	bf00      	nop
   b8c44:	2003d180 	.word	0x2003d180
   b8c48:	2003e69c 	.word	0x2003e69c

000b8c4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8c4c:	2100      	movs	r1, #0
   b8c4e:	f7fe b921 	b.w	b6e94 <system_delay_ms>
	...

000b8c54 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8c54:	b510      	push	{r4, lr}
   b8c56:	4b04      	ldr	r3, [pc, #16]	; (b8c68 <_ZN9TCPClientD1Ev+0x14>)
   b8c58:	6003      	str	r3, [r0, #0]
   b8c5a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8c5c:	6980      	ldr	r0, [r0, #24]
   b8c5e:	b108      	cbz	r0, b8c64 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b8c60:	f7fe fd1d 	bl	b769e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b8c64:	4620      	mov	r0, r4
   b8c66:	bd10      	pop	{r4, pc}
   b8c68:	000bd9d0 	.word	0x000bd9d0

000b8c6c <_ZN9TCPClientD0Ev>:
   b8c6c:	b510      	push	{r4, lr}
   b8c6e:	4604      	mov	r4, r0
   b8c70:	f7ff fff0 	bl	b8c54 <_ZN9TCPClientD1Ev>
   b8c74:	4620      	mov	r0, r4
   b8c76:	211c      	movs	r1, #28
   b8c78:	f7fb fa11 	bl	b409e <_ZdlPvj>
   b8c7c:	4620      	mov	r0, r4
   b8c7e:	bd10      	pop	{r4, pc}

000b8c80 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8c80:	4b01      	ldr	r3, [pc, #4]	; (b8c88 <_GLOBAL__sub_I_RGB+0x8>)
   b8c82:	2200      	movs	r2, #0
   b8c84:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8c86:	4770      	bx	lr
   b8c88:	2003e6e0 	.word	0x2003e6e0

000b8c8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8c8c:	4b01      	ldr	r3, [pc, #4]	; (b8c94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8c8e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8c90:	4770      	bx	lr
   b8c92:	bf00      	nop
   b8c94:	2003d184 	.word	0x2003d184

000b8c98 <serialEventRun>:
{
   b8c98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8c9a:	4b0b      	ldr	r3, [pc, #44]	; (b8cc8 <serialEventRun+0x30>)
   b8c9c:	b143      	cbz	r3, b8cb0 <serialEventRun+0x18>
   b8c9e:	f000 fc19 	bl	b94d4 <_Z16_fetch_usbserialv>
   b8ca2:	6803      	ldr	r3, [r0, #0]
   b8ca4:	691b      	ldr	r3, [r3, #16]
   b8ca6:	4798      	blx	r3
   b8ca8:	2800      	cmp	r0, #0
   b8caa:	dd01      	ble.n	b8cb0 <serialEventRun+0x18>
        serialEvent();
   b8cac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8cb0:	4b06      	ldr	r3, [pc, #24]	; (b8ccc <serialEventRun+0x34>)
   b8cb2:	b143      	cbz	r3, b8cc6 <serialEventRun+0x2e>
   b8cb4:	f001 f9f6 	bl	ba0a4 <_Z22__fetch_global_Serial1v>
   b8cb8:	6803      	ldr	r3, [r0, #0]
   b8cba:	691b      	ldr	r3, [r3, #16]
   b8cbc:	4798      	blx	r3
   b8cbe:	2800      	cmp	r0, #0
   b8cc0:	dd01      	ble.n	b8cc6 <serialEventRun+0x2e>
        serialEvent1();
   b8cc2:	f3af 8000 	nop.w
}
   b8cc6:	bd08      	pop	{r3, pc}
	...

000b8cd0 <_post_loop>:
{
   b8cd0:	b508      	push	{r3, lr}
	serialEventRun();
   b8cd2:	f7ff ffe1 	bl	b8c98 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8cd6:	f7fd fec3 	bl	b6a60 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8cda:	4b01      	ldr	r3, [pc, #4]	; (b8ce0 <_post_loop+0x10>)
   b8cdc:	6018      	str	r0, [r3, #0]
}
   b8cde:	bd08      	pop	{r3, pc}
   b8ce0:	2003e744 	.word	0x2003e744

000b8ce4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8ce4:	4805      	ldr	r0, [pc, #20]	; (b8cfc <_Z33system_initialize_user_backup_ramv+0x18>)
   b8ce6:	4a06      	ldr	r2, [pc, #24]	; (b8d00 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8ce8:	4906      	ldr	r1, [pc, #24]	; (b8d04 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8cea:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8cec:	1a12      	subs	r2, r2, r0
   b8cee:	f002 f862 	bl	badb6 <memcpy>
    __backup_sram_signature = signature;
   b8cf2:	4b05      	ldr	r3, [pc, #20]	; (b8d08 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8cf4:	4a05      	ldr	r2, [pc, #20]	; (b8d0c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8cf6:	601a      	str	r2, [r3, #0]
}
   b8cf8:	bd08      	pop	{r3, pc}
   b8cfa:	bf00      	nop
   b8cfc:	2003f400 	.word	0x2003f400
   b8d00:	2003f404 	.word	0x2003f404
   b8d04:	000be0a4 	.word	0x000be0a4
   b8d08:	2003f400 	.word	0x2003f400
   b8d0c:	9a271c1e 	.word	0x9a271c1e

000b8d10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8d10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8d12:	2300      	movs	r3, #0
   b8d14:	9300      	str	r3, [sp, #0]
   b8d16:	461a      	mov	r2, r3
   b8d18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8d1c:	f7fe f8ec 	bl	b6ef8 <system_ctrl_set_result>
}
   b8d20:	b003      	add	sp, #12
   b8d22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8d28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8d28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8d2a:	8843      	ldrh	r3, [r0, #2]
   b8d2c:	2b0a      	cmp	r3, #10
   b8d2e:	d008      	beq.n	b8d42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8d30:	2b50      	cmp	r3, #80	; 0x50
   b8d32:	d10b      	bne.n	b8d4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8d34:	4b09      	ldr	r3, [pc, #36]	; (b8d5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8d36:	681b      	ldr	r3, [r3, #0]
   b8d38:	b14b      	cbz	r3, b8d4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8d3a:	b003      	add	sp, #12
   b8d3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8d40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8d42:	f7ff ffe5 	bl	b8d10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8d46:	b003      	add	sp, #12
   b8d48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8d4c:	2300      	movs	r3, #0
   b8d4e:	9300      	str	r3, [sp, #0]
   b8d50:	461a      	mov	r2, r3
   b8d52:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8d56:	f7fe f8cf 	bl	b6ef8 <system_ctrl_set_result>
}
   b8d5a:	e7f4      	b.n	b8d46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8d5c:	2003e6f4 	.word	0x2003e6f4

000b8d60 <module_user_init_hook>:
{
   b8d60:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8d62:	4812      	ldr	r0, [pc, #72]	; (b8dac <module_user_init_hook+0x4c>)
   b8d64:	2100      	movs	r1, #0
   b8d66:	f7fe f9b9 	bl	b70dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8d6a:	4b11      	ldr	r3, [pc, #68]	; (b8db0 <module_user_init_hook+0x50>)
   b8d6c:	681a      	ldr	r2, [r3, #0]
   b8d6e:	4b11      	ldr	r3, [pc, #68]	; (b8db4 <module_user_init_hook+0x54>)
   b8d70:	429a      	cmp	r2, r3
   b8d72:	4b11      	ldr	r3, [pc, #68]	; (b8db8 <module_user_init_hook+0x58>)
   b8d74:	bf0c      	ite	eq
   b8d76:	2201      	moveq	r2, #1
   b8d78:	2200      	movne	r2, #0
   b8d7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8d7c:	d001      	beq.n	b8d82 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8d7e:	f7ff ffb1 	bl	b8ce4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8d82:	f7fd fe5d 	bl	b6a40 <HAL_RNG_GetRandomNumber>
   b8d86:	4604      	mov	r4, r0
    srand(seed);
   b8d88:	f002 f846 	bl	bae18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8d8c:	4b0b      	ldr	r3, [pc, #44]	; (b8dbc <module_user_init_hook+0x5c>)
   b8d8e:	b113      	cbz	r3, b8d96 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8d90:	4620      	mov	r0, r4
   b8d92:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8d96:	2100      	movs	r1, #0
   b8d98:	4808      	ldr	r0, [pc, #32]	; (b8dbc <module_user_init_hook+0x5c>)
   b8d9a:	f7fe f947 	bl	b702c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8da2:	4807      	ldr	r0, [pc, #28]	; (b8dc0 <module_user_init_hook+0x60>)
   b8da4:	2100      	movs	r1, #0
   b8da6:	f7fe b89d 	b.w	b6ee4 <system_ctrl_set_app_request_handler>
   b8daa:	bf00      	nop
   b8dac:	000b8c8d 	.word	0x000b8c8d
   b8db0:	2003f400 	.word	0x2003f400
   b8db4:	9a271c1e 	.word	0x9a271c1e
   b8db8:	2003e6f0 	.word	0x2003e6f0
   b8dbc:	00000000 	.word	0x00000000
   b8dc0:	000b8d29 	.word	0x000b8d29

000b8dc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8dc4:	4770      	bx	lr

000b8dc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b8dc6:	2000      	movs	r0, #0
   b8dc8:	4770      	bx	lr

000b8dca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8dca:	b510      	push	{r4, lr}
   b8dcc:	2110      	movs	r1, #16
   b8dce:	4604      	mov	r4, r0
   b8dd0:	f7fb f965 	bl	b409e <_ZdlPvj>
   b8dd4:	4620      	mov	r0, r4
   b8dd6:	bd10      	pop	{r4, pc}

000b8dd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b8dd8:	b508      	push	{r3, lr}
      { delete this; }
   b8dda:	f7ff fff6 	bl	b8dca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b8dde:	bd08      	pop	{r3, pc}

000b8de0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b8de0:	b530      	push	{r4, r5, lr}
        type_(type) {
   b8de2:	2200      	movs	r2, #0
   b8de4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b8de8:	6002      	str	r2, [r0, #0]
   b8dea:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8dec:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b8dee:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8df0:	680c      	ldr	r4, [r1, #0]
   b8df2:	8085      	strh	r5, [r0, #4]
   b8df4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8df6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b8df8:	bd30      	pop	{r4, r5, pc}

000b8dfa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b8dfa:	b510      	push	{r4, lr}
   b8dfc:	4604      	mov	r4, r0
    free((void*)msg_);
   b8dfe:	6800      	ldr	r0, [r0, #0]
   b8e00:	f7fe f924 	bl	b704c <free>
}
   b8e04:	4620      	mov	r0, r4
   b8e06:	bd10      	pop	{r4, pc}

000b8e08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8e08:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b8e0a:	68c4      	ldr	r4, [r0, #12]
   b8e0c:	b1f4      	cbz	r4, b8e4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b8e0e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b8e10:	2b02      	cmp	r3, #2
   b8e12:	d103      	bne.n	b8e1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b8e14:	f104 000c 	add.w	r0, r4, #12
   b8e18:	f7ff ffef 	bl	b8dfa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b8e1c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b8e1e:	b135      	cbz	r5, b8e2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b8e20:	4628      	mov	r0, r5
   b8e22:	f7fb fae3 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b8e26:	2110      	movs	r1, #16
   b8e28:	4628      	mov	r0, r5
   b8e2a:	f7fb f938 	bl	b409e <_ZdlPvj>
   b8e2e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b8e30:	b135      	cbz	r5, b8e40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b8e32:	4628      	mov	r0, r5
   b8e34:	f7fb fada 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b8e38:	2110      	movs	r1, #16
   b8e3a:	4628      	mov	r0, r5
   b8e3c:	f7fb f92f 	bl	b409e <_ZdlPvj>
   b8e40:	4620      	mov	r0, r4
   b8e42:	2114      	movs	r1, #20
   b8e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8e48:	f7fb b929 	b.w	b409e <_ZdlPvj>
   b8e4c:	bd38      	pop	{r3, r4, r5, pc}

000b8e4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8e4e:	680b      	ldr	r3, [r1, #0]
   b8e50:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8e52:	684b      	ldr	r3, [r1, #4]
   b8e54:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8e56:	b113      	cbz	r3, b8e5e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b8e58:	685a      	ldr	r2, [r3, #4]
   b8e5a:	3201      	adds	r2, #1
   b8e5c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8e5e:	4770      	bx	lr

000b8e60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b8e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8e62:	4604      	mov	r4, r0
   b8e64:	4668      	mov	r0, sp
   b8e66:	460d      	mov	r5, r1
   b8e68:	f7ff fff1 	bl	b8e4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8e6c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8e6e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8e70:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b8e72:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8e74:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8e76:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b8e78:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b8e7a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8e7c:	f7fb fe78 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b8e80:	b135      	cbz	r5, b8e90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b8e82:	1d28      	adds	r0, r5, #4
   b8e84:	f7fb fe74 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e88:	2108      	movs	r1, #8
   b8e8a:	4628      	mov	r0, r5
   b8e8c:	f7fb f907 	bl	b409e <_ZdlPvj>
        return p;
    }
   b8e90:	4620      	mov	r0, r4
   b8e92:	b003      	add	sp, #12
   b8e94:	bd30      	pop	{r4, r5, pc}

000b8e96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b8e96:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8e98:	b510      	push	{r4, lr}
      if (_M_empty())
   b8e9a:	b90a      	cbnz	r2, b8ea0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b8e9c:	f001 f968 	bl	ba170 <_ZSt25__throw_bad_function_callv>
    }
   b8ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8ea4:	68c3      	ldr	r3, [r0, #12]
   b8ea6:	4718      	bx	r3

000b8ea8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8ea8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8eaa:	6800      	ldr	r0, [r0, #0]
   b8eac:	f100 0110 	add.w	r1, r0, #16
   b8eb0:	f7ff fff1 	bl	b8e96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8eb4:	bd08      	pop	{r3, pc}

000b8eb6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b8eb6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8eb8:	b510      	push	{r4, lr}
      if (_M_empty())
   b8eba:	b90a      	cbnz	r2, b8ec0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8ebc:	f001 f958 	bl	ba170 <_ZSt25__throw_bad_function_callv>
    }
   b8ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8ec4:	68c3      	ldr	r3, [r0, #12]
   b8ec6:	4718      	bx	r3

000b8ec8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8ec8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8eca:	6800      	ldr	r0, [r0, #0]
   b8ecc:	f100 0110 	add.w	r1, r0, #16
   b8ed0:	f7ff fff1 	bl	b8eb6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8ed4:	bd08      	pop	{r3, pc}
	...

000b8ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8ed8:	b538      	push	{r3, r4, r5, lr}
   b8eda:	2300      	movs	r3, #0
   b8edc:	4604      	mov	r4, r0
   b8ede:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8ee0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b8ee2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8ee4:	f7fb f8d7 	bl	b4096 <_Znwj>
   b8ee8:	b128      	cbz	r0, b8ef6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8eea:	2301      	movs	r3, #1
   b8eec:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8ef0:	4b02      	ldr	r3, [pc, #8]	; (b8efc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b8ef2:	6003      	str	r3, [r0, #0]
   b8ef4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8ef6:	6020      	str	r0, [r4, #0]
	}
   b8ef8:	4620      	mov	r0, r4
   b8efa:	bd38      	pop	{r3, r4, r5, pc}
   b8efc:	000bd8e4 	.word	0x000bd8e4

000b8f00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8f00:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8f02:	2300      	movs	r3, #0
   b8f04:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8f06:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8f08:	4604      	mov	r4, r0
   b8f0a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8f0c:	b12b      	cbz	r3, b8f1a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8f0e:	2202      	movs	r2, #2
   b8f10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8f12:	68eb      	ldr	r3, [r5, #12]
   b8f14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8f16:	68ab      	ldr	r3, [r5, #8]
   b8f18:	60a3      	str	r3, [r4, #8]
    }
   b8f1a:	4620      	mov	r0, r4
   b8f1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8f20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8f22:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b8f24:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b8f26:	4668      	mov	r0, sp
   b8f28:	f7ff ff5a 	bl	b8de0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8f2c:	f04f 0302 	mov.w	r3, #2
   b8f30:	e8d4 2f4f 	ldrexb	r2, [r4]
   b8f34:	2a00      	cmp	r2, #0
   b8f36:	d103      	bne.n	b8f40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b8f38:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8f3c:	2900      	cmp	r1, #0
   b8f3e:	d1f7      	bne.n	b8f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8f40:	d125      	bne.n	b8f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b8f42:	f104 050c 	add.w	r5, r4, #12
   b8f46:	4669      	mov	r1, sp
   b8f48:	4628      	mov	r0, r5
   b8f4a:	f7ff ff49 	bl	b8de0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b8f4e:	f3bf 8f5b 	dmb	ish
   b8f52:	2301      	movs	r3, #1
   b8f54:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8f56:	2000      	movs	r0, #0
   b8f58:	f104 0308 	add.w	r3, r4, #8
   b8f5c:	f3bf 8f5b 	dmb	ish
   b8f60:	e853 6f00 	ldrex	r6, [r3]
   b8f64:	e843 0200 	strex	r2, r0, [r3]
   b8f68:	2a00      	cmp	r2, #0
   b8f6a:	d1f9      	bne.n	b8f60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8f6c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8f70:	b16e      	cbz	r6, b8f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b8f72:	f7fd ff9f 	bl	b6eb4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8f76:	b178      	cbz	r0, b8f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8f78:	4629      	mov	r1, r5
   b8f7a:	4630      	mov	r0, r6
   b8f7c:	f7ff ff8b 	bl	b8e96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b8f80:	4630      	mov	r0, r6
   b8f82:	f7fb fa33 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8f86:	2110      	movs	r1, #16
   b8f88:	4630      	mov	r0, r6
   b8f8a:	f7fb f888 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b8f8e:	4668      	mov	r0, sp
   b8f90:	f7ff ff33 	bl	b8dfa <_ZN8particle5ErrorD1Ev>
    }
   b8f94:	b009      	add	sp, #36	; 0x24
   b8f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8f98:	4631      	mov	r1, r6
   b8f9a:	a802      	add	r0, sp, #8
   b8f9c:	f7ff ffb0 	bl	b8f00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8fa0:	68e0      	ldr	r0, [r4, #12]
   b8fa2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8fa6:	b108      	cbz	r0, b8fac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b8fa8:	f001 ff86 	bl	baeb8 <strdup>
        type_(type) {
   b8fac:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8fae:	2010      	movs	r0, #16
   b8fb0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8fb4:	f7fb f86f 	bl	b4096 <_Znwj>
   b8fb8:	4605      	mov	r5, r0
   b8fba:	b1e8      	cbz	r0, b8ff8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8fbc:	2700      	movs	r7, #0
   b8fbe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8fc0:	2018      	movs	r0, #24
   b8fc2:	f7fb f868 	bl	b4096 <_Znwj>
   b8fc6:	4604      	mov	r4, r0
   b8fc8:	b188      	cbz	r0, b8fee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b8fca:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8fcc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8fce:	a802      	add	r0, sp, #8
   b8fd0:	f7ff f9f0 	bl	b83b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8fd4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8fd6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8fd8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8fda:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8fdc:	9204      	str	r2, [sp, #16]
   b8fde:	a906      	add	r1, sp, #24
   b8fe0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8fe2:	60e3      	str	r3, [r4, #12]
   b8fe4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8fe8:	9205      	str	r2, [sp, #20]
   b8fea:	f7ff fef9 	bl	b8de0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8fee:	4b08      	ldr	r3, [pc, #32]	; (b9010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8ff0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8ff2:	4b08      	ldr	r3, [pc, #32]	; (b9014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8ff4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8ff6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8ff8:	a806      	add	r0, sp, #24
   b8ffa:	f7ff fefe 	bl	b8dfa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8ffe:	a802      	add	r0, sp, #8
   b9000:	f7fb f9f4 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9004:	2200      	movs	r2, #0
   b9006:	4629      	mov	r1, r5
   b9008:	4803      	ldr	r0, [pc, #12]	; (b9018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b900a:	f7fd ff5b 	bl	b6ec4 <application_thread_invoke>
   b900e:	e7b7      	b.n	b8f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b9010:	000b8ea9 	.word	0x000b8ea9
   b9014:	000b912d 	.word	0x000b912d
   b9018:	000b961d 	.word	0x000b961d

000b901c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9020:	b08b      	sub	sp, #44	; 0x2c
   b9022:	4605      	mov	r5, r0
   b9024:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b9028:	460f      	mov	r7, r1
   b902a:	4690      	mov	r8, r2
   b902c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b902e:	f7fd ffd5 	bl	b6fdc <spark_cloud_flag_connected>
   b9032:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b9034:	4683      	mov	fp, r0
   b9036:	bb38      	cbnz	r0, b9088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b9038:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b903c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b903e:	a905      	add	r1, sp, #20
   b9040:	4630      	mov	r0, r6
   b9042:	f8ad 3018 	strh.w	r3, [sp, #24]
   b9046:	f7ff fecb 	bl	b8de0 <_ZN8particle5ErrorC1EOS0_>
   b904a:	2014      	movs	r0, #20
   b904c:	f7fb f823 	bl	b4096 <_Znwj>
   b9050:	4604      	mov	r4, r0
   b9052:	b148      	cbz	r0, b9068 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b9054:	2302      	movs	r3, #2
   b9056:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9058:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b905a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b905e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b9060:	4631      	mov	r1, r6
   b9062:	300c      	adds	r0, #12
   b9064:	f7ff febc 	bl	b8de0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9068:	4628      	mov	r0, r5
	: __shared_count(__p)
   b906a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b906c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b9070:	f7ff ff32 	bl	b8ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9074:	4630      	mov	r0, r6
   b9076:	f7ff fec0 	bl	b8dfa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b907a:	a805      	add	r0, sp, #20
   b907c:	f7ff febd 	bl	b8dfa <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b9080:	4628      	mov	r0, r5
   b9082:	b00b      	add	sp, #44	; 0x2c
   b9084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b9088:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b908a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b908c:	2014      	movs	r0, #20
   b908e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b9092:	9307      	str	r3, [sp, #28]
   b9094:	f7fa ffff 	bl	b4096 <_Znwj>
   b9098:	4601      	mov	r1, r0
   b909a:	b118      	cbz	r0, b90a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b909c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b90a0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b90a2:	7044      	strb	r4, [r0, #1]
   b90a4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b90a6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b90a8:	f7ff ff16 	bl	b8ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b90ac:	4b1e      	ldr	r3, [pc, #120]	; (b9128 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b90ae:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b90b0:	2008      	movs	r0, #8
   b90b2:	f7fa fff0 	bl	b4096 <_Znwj>
   b90b6:	4604      	mov	r4, r0
   b90b8:	b110      	cbz	r0, b90c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b90ba:	a903      	add	r1, sp, #12
   b90bc:	f7ff fec7 	bl	b8e4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b90c0:	9600      	str	r6, [sp, #0]
   b90c2:	fa5f f38a 	uxtb.w	r3, sl
   b90c6:	464a      	mov	r2, r9
   b90c8:	4641      	mov	r1, r8
   b90ca:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b90cc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b90ce:	f7fd ff8d 	bl	b6fec <spark_send_event>
   b90d2:	b9b8      	cbnz	r0, b9104 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b90d4:	9b03      	ldr	r3, [sp, #12]
   b90d6:	785b      	ldrb	r3, [r3, #1]
   b90d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b90dc:	b993      	cbnz	r3, b9104 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b90de:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b90e2:	a905      	add	r1, sp, #20
   b90e4:	a803      	add	r0, sp, #12
   b90e6:	9205      	str	r2, [sp, #20]
   b90e8:	f8ad 3018 	strh.w	r3, [sp, #24]
   b90ec:	f7ff ff18 	bl	b8f20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b90f0:	a805      	add	r0, sp, #20
   b90f2:	f7ff fe82 	bl	b8dfa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b90f6:	a805      	add	r0, sp, #20
   b90f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b90fa:	f7ff feb1 	bl	b8e60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b90fe:	a806      	add	r0, sp, #24
   b9100:	f7fb fd36 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9104:	a903      	add	r1, sp, #12
   b9106:	a805      	add	r0, sp, #20
   b9108:	f7ff fea1 	bl	b8e4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b910c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b910e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9110:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b9112:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b9114:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b9116:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b9118:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b911a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b911c:	f7fb fd28 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9120:	a804      	add	r0, sp, #16
   b9122:	f7fb fd25 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b9126:	e7ab      	b.n	b9080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b9128:	000b91a9 	.word	0x000b91a9

000b912c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b912c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b912e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9130:	4605      	mov	r5, r0
	switch (__op)
   b9132:	d103      	bne.n	b913c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b9134:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9136:	6003      	str	r3, [r0, #0]
      }
   b9138:	2000      	movs	r0, #0
   b913a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b913c:	2a02      	cmp	r2, #2
   b913e:	d010      	beq.n	b9162 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b9140:	2a03      	cmp	r2, #3
   b9142:	d1f9      	bne.n	b9138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b9144:	6804      	ldr	r4, [r0, #0]
   b9146:	2c00      	cmp	r4, #0
   b9148:	d0f6      	beq.n	b9138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b914a:	f104 0010 	add.w	r0, r4, #16
   b914e:	f7ff fe54 	bl	b8dfa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9152:	4620      	mov	r0, r4
   b9154:	f7fb f94a 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9158:	2118      	movs	r1, #24
   b915a:	4620      	mov	r0, r4
   b915c:	f7fa ff9f 	bl	b409e <_ZdlPvj>
   b9160:	e7ea      	b.n	b9138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b9162:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b9164:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9166:	f7fa ff96 	bl	b4096 <_Znwj>
   b916a:	4604      	mov	r4, r0
   b916c:	b150      	cbz	r0, b9184 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b916e:	4631      	mov	r1, r6
   b9170:	f7ff fec6 	bl	b8f00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9174:	6930      	ldr	r0, [r6, #16]
   b9176:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b917a:	b108      	cbz	r0, b9180 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b917c:	f001 fe9c 	bl	baeb8 <strdup>
        type_(type) {
   b9180:	6120      	str	r0, [r4, #16]
   b9182:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b9184:	602c      	str	r4, [r5, #0]
	}
   b9186:	e7d7      	b.n	b9138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b9188 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b9188:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b918a:	2300      	movs	r3, #0
   b918c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b918e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9190:	4604      	mov	r4, r0
   b9192:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9194:	b12b      	cbz	r3, b91a2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9196:	2202      	movs	r2, #2
   b9198:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b919a:	68eb      	ldr	r3, [r5, #12]
   b919c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b919e:	68ab      	ldr	r3, [r5, #8]
   b91a0:	60a3      	str	r3, [r4, #8]
    }
   b91a2:	4620      	mov	r0, r4
   b91a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b91a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b91a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b91aa:	b089      	sub	sp, #36	; 0x24
   b91ac:	4604      	mov	r4, r0
   b91ae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b91b0:	a801      	add	r0, sp, #4
   b91b2:	4611      	mov	r1, r2
   b91b4:	f7ff fe54 	bl	b8e60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b91b8:	b1a4      	cbz	r4, b91e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b91ba:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b91bc:	b11d      	cbz	r5, b91c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b91be:	4628      	mov	r0, r5
   b91c0:	f001 fe7a 	bl	baeb8 <strdup>
   b91c4:	4605      	mov	r5, r0
   b91c6:	a801      	add	r0, sp, #4
   b91c8:	a903      	add	r1, sp, #12
        type_(type) {
   b91ca:	9503      	str	r5, [sp, #12]
   b91cc:	f8ad 4010 	strh.w	r4, [sp, #16]
   b91d0:	f7ff fea6 	bl	b8f20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b91d4:	a803      	add	r0, sp, #12
   b91d6:	f7ff fe10 	bl	b8dfa <_ZN8particle5ErrorD1Ev>
   b91da:	a802      	add	r0, sp, #8
   b91dc:	f7fb fcc8 	bl	b4b70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b91e0:	b009      	add	sp, #36	; 0x24
   b91e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b91e4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b91e6:	2301      	movs	r3, #1
   b91e8:	e8d5 2f4f 	ldrexb	r2, [r5]
   b91ec:	2a00      	cmp	r2, #0
   b91ee:	d103      	bne.n	b91f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b91f0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b91f4:	2900      	cmp	r1, #0
   b91f6:	d1f7      	bne.n	b91e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b91f8:	d1ef      	bne.n	b91da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b91fa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b91fc:	f3bf 8f5b 	dmb	ish
   b9200:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b9202:	1d2b      	adds	r3, r5, #4
   b9204:	f3bf 8f5b 	dmb	ish
   b9208:	e853 6f00 	ldrex	r6, [r3]
   b920c:	e843 4200 	strex	r2, r4, [r3]
   b9210:	2a00      	cmp	r2, #0
   b9212:	d1f9      	bne.n	b9208 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b9214:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b9218:	2e00      	cmp	r6, #0
   b921a:	d0de      	beq.n	b91da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b921c:	4620      	mov	r0, r4
   b921e:	f7fd fe49 	bl	b6eb4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b9222:	4607      	mov	r7, r0
   b9224:	b160      	cbz	r0, b9240 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b9226:	f105 010c 	add.w	r1, r5, #12
   b922a:	4630      	mov	r0, r6
   b922c:	f7ff fe43 	bl	b8eb6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b9230:	4630      	mov	r0, r6
   b9232:	f7fb f8db 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b9236:	2110      	movs	r1, #16
   b9238:	4630      	mov	r0, r6
   b923a:	f7fa ff30 	bl	b409e <_ZdlPvj>
   b923e:	e7cc      	b.n	b91da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9240:	4631      	mov	r1, r6
   b9242:	a803      	add	r0, sp, #12
   b9244:	f7ff ffa0 	bl	b9188 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b9248:	7b2b      	ldrb	r3, [r5, #12]
   b924a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b924e:	2010      	movs	r0, #16
   b9250:	f7fa ff21 	bl	b4096 <_Znwj>
   b9254:	4605      	mov	r5, r0
   b9256:	b1d0      	cbz	r0, b928e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b9258:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b925a:	2014      	movs	r0, #20
   b925c:	f7fa ff1b 	bl	b4096 <_Znwj>
   b9260:	4604      	mov	r4, r0
   b9262:	b178      	cbz	r0, b9284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b9264:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9266:	4601      	mov	r1, r0
   b9268:	a803      	add	r0, sp, #12
   b926a:	f7ff f8a3 	bl	b83b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b926e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9270:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9272:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9274:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b9276:	9205      	str	r2, [sp, #20]
   b9278:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b927a:	60e3      	str	r3, [r4, #12]
   b927c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b9280:	9206      	str	r2, [sp, #24]
   b9282:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b9284:	4b06      	ldr	r3, [pc, #24]	; (b92a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b9286:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9288:	4b06      	ldr	r3, [pc, #24]	; (b92a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b928a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b928c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b928e:	a803      	add	r0, sp, #12
   b9290:	f7fb f8ac 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9294:	2200      	movs	r2, #0
   b9296:	4629      	mov	r1, r5
   b9298:	4803      	ldr	r0, [pc, #12]	; (b92a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b929a:	f7fd fe13 	bl	b6ec4 <application_thread_invoke>
   b929e:	e7c7      	b.n	b9230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b92a0:	000b8ec9 	.word	0x000b8ec9
   b92a4:	000b92ad 	.word	0x000b92ad
   b92a8:	000b961d 	.word	0x000b961d

000b92ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b92ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b92ae:	b570      	push	{r4, r5, r6, lr}
   b92b0:	4604      	mov	r4, r0
	switch (__op)
   b92b2:	d103      	bne.n	b92bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b92b4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b92b6:	6003      	str	r3, [r0, #0]
      }
   b92b8:	2000      	movs	r0, #0
   b92ba:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b92bc:	2a02      	cmp	r2, #2
   b92be:	d00c      	beq.n	b92da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b92c0:	2a03      	cmp	r2, #3
   b92c2:	d1f9      	bne.n	b92b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b92c4:	6804      	ldr	r4, [r0, #0]
   b92c6:	2c00      	cmp	r4, #0
   b92c8:	d0f6      	beq.n	b92b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b92ca:	4620      	mov	r0, r4
   b92cc:	f7fb f88e 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b92d0:	2114      	movs	r1, #20
   b92d2:	4620      	mov	r0, r4
   b92d4:	f7fa fee3 	bl	b409e <_ZdlPvj>
   b92d8:	e7ee      	b.n	b92b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b92da:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b92dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b92de:	f7fa feda 	bl	b4096 <_Znwj>
   b92e2:	4605      	mov	r5, r0
   b92e4:	b120      	cbz	r0, b92f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b92e6:	4631      	mov	r1, r6
   b92e8:	f7ff ff4e 	bl	b9188 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b92ec:	7c33      	ldrb	r3, [r6, #16]
   b92ee:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b92f0:	6025      	str	r5, [r4, #0]
	}
   b92f2:	e7e1      	b.n	b92b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b92f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b92f4:	4770      	bx	lr

000b92f6 <_ZN9IPAddressD0Ev>:
   b92f6:	b510      	push	{r4, lr}
   b92f8:	2118      	movs	r1, #24
   b92fa:	4604      	mov	r4, r0
   b92fc:	f7fa fecf 	bl	b409e <_ZdlPvj>
   b9300:	4620      	mov	r0, r4
   b9302:	bd10      	pop	{r4, pc}

000b9304 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9304:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9306:	7d03      	ldrb	r3, [r0, #20]
   b9308:	2b06      	cmp	r3, #6
{
   b930a:	b08d      	sub	sp, #52	; 0x34
   b930c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b930e:	f100 0704 	add.w	r7, r0, #4
   b9312:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9316:	d012      	beq.n	b933e <_ZNK9IPAddress7printToER5Print+0x3a>
   b9318:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b931c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9320:	220a      	movs	r2, #10
   b9322:	4630      	mov	r0, r6
   b9324:	f7ff fb51 	bl	b89ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9328:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b932a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b932c:	d019      	beq.n	b9362 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b932e:	2c00      	cmp	r4, #0
   b9330:	d0f4      	beq.n	b931c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9332:	212e      	movs	r1, #46	; 0x2e
   b9334:	4630      	mov	r0, r6
   b9336:	f7ff fb1f 	bl	b8978 <_ZN5Print5printEc>
   b933a:	4404      	add	r4, r0
   b933c:	e7ee      	b.n	b931c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b933e:	232f      	movs	r3, #47	; 0x2f
   b9340:	466a      	mov	r2, sp
   b9342:	4639      	mov	r1, r7
   b9344:	200a      	movs	r0, #10
		buf[0] = 0;
   b9346:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b934a:	f7fd fc7b 	bl	b6c44 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b934e:	4668      	mov	r0, sp
   b9350:	f001 fdcf 	bl	baef2 <strlen>
   b9354:	6833      	ldr	r3, [r6, #0]
   b9356:	4602      	mov	r2, r0
   b9358:	68db      	ldr	r3, [r3, #12]
   b935a:	4669      	mov	r1, sp
   b935c:	4630      	mov	r0, r6
   b935e:	4798      	blx	r3
   b9360:	4604      	mov	r4, r0
    }
    return n;
}
   b9362:	4620      	mov	r0, r4
   b9364:	b00d      	add	sp, #52	; 0x34
   b9366:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9368 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9368:	b510      	push	{r4, lr}
   b936a:	4b05      	ldr	r3, [pc, #20]	; (b9380 <_ZN9IPAddressC1Ev+0x18>)
   b936c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b936e:	2211      	movs	r2, #17
   b9370:	f840 3b04 	str.w	r3, [r0], #4
   b9374:	2100      	movs	r1, #0
   b9376:	f001 fd46 	bl	bae06 <memset>
}
   b937a:	4620      	mov	r0, r4
   b937c:	bd10      	pop	{r4, pc}
   b937e:	bf00      	nop
   b9380:	000bd900 	.word	0x000bd900

000b9384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9384:	4603      	mov	r3, r0
   b9386:	4a07      	ldr	r2, [pc, #28]	; (b93a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9388:	b510      	push	{r4, lr}
   b938a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b938e:	f101 0210 	add.w	r2, r1, #16
   b9392:	f851 4b04 	ldr.w	r4, [r1], #4
   b9396:	f843 4b04 	str.w	r4, [r3], #4
   b939a:	4291      	cmp	r1, r2
   b939c:	d1f9      	bne.n	b9392 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b939e:	780a      	ldrb	r2, [r1, #0]
   b93a0:	701a      	strb	r2, [r3, #0]
}
   b93a2:	bd10      	pop	{r4, pc}
   b93a4:	000bd900 	.word	0x000bd900

000b93a8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b93a8:	4a02      	ldr	r2, [pc, #8]	; (b93b4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b93aa:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b93ae:	2204      	movs	r2, #4
   b93b0:	7502      	strb	r2, [r0, #20]
}
   b93b2:	4770      	bx	lr
   b93b4:	000bd900 	.word	0x000bd900

000b93b8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b93b8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b93ba:	2b04      	cmp	r3, #4
   b93bc:	d104      	bne.n	b93c8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b93be:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b93c0:	3800      	subs	r0, #0
   b93c2:	bf18      	it	ne
   b93c4:	2001      	movne	r0, #1
   b93c6:	4770      	bx	lr
    } else if (version() == 6) {
   b93c8:	2b06      	cmp	r3, #6
   b93ca:	d107      	bne.n	b93dc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b93cc:	6843      	ldr	r3, [r0, #4]
   b93ce:	b93b      	cbnz	r3, b93e0 <_ZNK9IPAddresscvbEv+0x28>
   b93d0:	6883      	ldr	r3, [r0, #8]
   b93d2:	b92b      	cbnz	r3, b93e0 <_ZNK9IPAddresscvbEv+0x28>
   b93d4:	68c3      	ldr	r3, [r0, #12]
   b93d6:	b91b      	cbnz	r3, b93e0 <_ZNK9IPAddresscvbEv+0x28>
   b93d8:	6900      	ldr	r0, [r0, #16]
   b93da:	e7f1      	b.n	b93c0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b93dc:	2000      	movs	r0, #0
   b93de:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b93e0:	2001      	movs	r0, #1
}
   b93e2:	4770      	bx	lr

000b93e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b93e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b93e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b93ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b93ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b93f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b93f6:	2304      	movs	r3, #4
   b93f8:	6041      	str	r1, [r0, #4]
   b93fa:	7503      	strb	r3, [r0, #20]
}
   b93fc:	bd10      	pop	{r4, pc}
	...

000b9400 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9400:	b507      	push	{r0, r1, r2, lr}
   b9402:	4b06      	ldr	r3, [pc, #24]	; (b941c <_ZN9IPAddressC1EPKh+0x1c>)
   b9404:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9406:	78cb      	ldrb	r3, [r1, #3]
   b9408:	9300      	str	r3, [sp, #0]
   b940a:	788b      	ldrb	r3, [r1, #2]
   b940c:	784a      	ldrb	r2, [r1, #1]
   b940e:	7809      	ldrb	r1, [r1, #0]
   b9410:	f7ff ffe8 	bl	b93e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9414:	b003      	add	sp, #12
   b9416:	f85d fb04 	ldr.w	pc, [sp], #4
   b941a:	bf00      	nop
   b941c:	000bd900 	.word	0x000bd900

000b9420 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9420:	7441      	strb	r1, [r0, #17]
}
   b9422:	4770      	bx	lr

000b9424 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9424:	4770      	bx	lr

000b9426 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9426:	4770      	bx	lr

000b9428 <_ZN9USBSerial4readEv>:
{
   b9428:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b942a:	2100      	movs	r1, #0
   b942c:	7c00      	ldrb	r0, [r0, #16]
   b942e:	f7fd fcf1 	bl	b6e14 <HAL_USB_USART_Receive_Data>
}
   b9432:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9436:	bd08      	pop	{r3, pc}

000b9438 <_ZN9USBSerial4peekEv>:
{
   b9438:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b943a:	2101      	movs	r1, #1
   b943c:	7c00      	ldrb	r0, [r0, #16]
   b943e:	f7fd fce9 	bl	b6e14 <HAL_USB_USART_Receive_Data>
}
   b9442:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9446:	bd08      	pop	{r3, pc}

000b9448 <_ZN9USBSerial17availableForWriteEv>:
{
   b9448:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b944a:	7c00      	ldrb	r0, [r0, #16]
   b944c:	f7fd fcda 	bl	b6e04 <HAL_USB_USART_Available_Data_For_Write>
}
   b9450:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9454:	bd08      	pop	{r3, pc}

000b9456 <_ZN9USBSerial9availableEv>:
{
   b9456:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9458:	7c00      	ldrb	r0, [r0, #16]
   b945a:	f7fd fccb 	bl	b6df4 <HAL_USB_USART_Available_Data>
}
   b945e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9462:	bd08      	pop	{r3, pc}

000b9464 <_ZN9USBSerial5writeEh>:
{
   b9464:	b513      	push	{r0, r1, r4, lr}
   b9466:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9468:	7c00      	ldrb	r0, [r0, #16]
{
   b946a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b946c:	f7fd fcca 	bl	b6e04 <HAL_USB_USART_Available_Data_For_Write>
   b9470:	2800      	cmp	r0, #0
   b9472:	9901      	ldr	r1, [sp, #4]
   b9474:	dc01      	bgt.n	b947a <_ZN9USBSerial5writeEh+0x16>
   b9476:	7c60      	ldrb	r0, [r4, #17]
   b9478:	b120      	cbz	r0, b9484 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b947a:	7c20      	ldrb	r0, [r4, #16]
   b947c:	f7fd fcd2 	bl	b6e24 <HAL_USB_USART_Send_Data>
   b9480:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9484:	b002      	add	sp, #8
   b9486:	bd10      	pop	{r4, pc}

000b9488 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9488:	7c00      	ldrb	r0, [r0, #16]
   b948a:	f7fd bcd3 	b.w	b6e34 <HAL_USB_USART_Flush_Data>

000b948e <_ZN9USBSerialD0Ev>:
   b948e:	b510      	push	{r4, lr}
   b9490:	2114      	movs	r1, #20
   b9492:	4604      	mov	r4, r0
   b9494:	f7fa fe03 	bl	b409e <_ZdlPvj>
   b9498:	4620      	mov	r0, r4
   b949a:	bd10      	pop	{r4, pc}

000b949c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b949c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b949e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b94a2:	4604      	mov	r4, r0
   b94a4:	4608      	mov	r0, r1
   b94a6:	2100      	movs	r1, #0
   b94a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b94ac:	4b04      	ldr	r3, [pc, #16]	; (b94c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b94ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b94b0:	2301      	movs	r3, #1
  _serial = serial;
   b94b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b94b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b94b6:	4611      	mov	r1, r2
   b94b8:	f7fd fc94 	bl	b6de4 <HAL_USB_USART_Init>
}
   b94bc:	4620      	mov	r0, r4
   b94be:	bd10      	pop	{r4, pc}
   b94c0:	000bd914 	.word	0x000bd914

000b94c4 <_Z19acquireSerialBufferv>:
{
   b94c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b94c6:	2214      	movs	r2, #20
{
   b94c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b94ca:	2100      	movs	r1, #0
   b94cc:	f001 fc9b 	bl	bae06 <memset>
}
   b94d0:	4620      	mov	r0, r4
   b94d2:	bd10      	pop	{r4, pc}

000b94d4 <_Z16_fetch_usbserialv>:
{
   b94d4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b94d6:	4c0f      	ldr	r4, [pc, #60]	; (b9514 <_Z16_fetch_usbserialv+0x40>)
{
   b94d8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b94da:	a803      	add	r0, sp, #12
   b94dc:	f7ff fff2 	bl	b94c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b94e0:	7821      	ldrb	r1, [r4, #0]
   b94e2:	f3bf 8f5b 	dmb	ish
   b94e6:	f011 0101 	ands.w	r1, r1, #1
   b94ea:	d10f      	bne.n	b950c <_Z16_fetch_usbserialv+0x38>
   b94ec:	4620      	mov	r0, r4
   b94ee:	9101      	str	r1, [sp, #4]
   b94f0:	f7fa fdd7 	bl	b40a2 <__cxa_guard_acquire>
   b94f4:	9901      	ldr	r1, [sp, #4]
   b94f6:	b148      	cbz	r0, b950c <_Z16_fetch_usbserialv+0x38>
   b94f8:	aa03      	add	r2, sp, #12
   b94fa:	4807      	ldr	r0, [pc, #28]	; (b9518 <_Z16_fetch_usbserialv+0x44>)
   b94fc:	f7ff ffce 	bl	b949c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9500:	4620      	mov	r0, r4
   b9502:	f7fa fdd3 	bl	b40ac <__cxa_guard_release>
   b9506:	4805      	ldr	r0, [pc, #20]	; (b951c <_Z16_fetch_usbserialv+0x48>)
   b9508:	f001 fc38 	bl	bad7c <atexit>
	return _usbserial;
}
   b950c:	4802      	ldr	r0, [pc, #8]	; (b9518 <_Z16_fetch_usbserialv+0x44>)
   b950e:	b008      	add	sp, #32
   b9510:	bd10      	pop	{r4, pc}
   b9512:	bf00      	nop
   b9514:	2003e6f8 	.word	0x2003e6f8
   b9518:	2003e6fc 	.word	0x2003e6fc
   b951c:	000b9425 	.word	0x000b9425

000b9520 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9520:	4700      	bx	r0
	...

000b9524 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9524:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9528:	2400      	movs	r4, #0
{
   b952a:	461d      	mov	r5, r3
   b952c:	460f      	mov	r7, r1
   b952e:	4690      	mov	r8, r2
   b9530:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b9532:	f7fd fa75 	bl	b6a20 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b9536:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9538:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b953c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9540:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9544:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9548:	bfa2      	ittt	ge
   b954a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b954e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b9552:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9554:	4907      	ldr	r1, [pc, #28]	; (b9574 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9556:	9400      	str	r4, [sp, #0]
   b9558:	4643      	mov	r3, r8
   b955a:	463a      	mov	r2, r7
   b955c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b955e:	bfa8      	it	ge
   b9560:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9564:	f7fd fa54 	bl	b6a10 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9568:	fab0 f080 	clz	r0, r0
   b956c:	0940      	lsrs	r0, r0, #5
   b956e:	b004      	add	sp, #16
   b9570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9574:	000b9521 	.word	0x000b9521

000b9578 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9578:	4770      	bx	lr

000b957a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b957a:	7441      	strb	r1, [r0, #17]
}
   b957c:	4770      	bx	lr

000b957e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b957e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9580:	7c00      	ldrb	r0, [r0, #16]
   b9582:	f7fd fba7 	bl	b6cd4 <hal_usart_available_data_for_write>
}
   b9586:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b958a:	bd08      	pop	{r3, pc}

000b958c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b958c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b958e:	7c00      	ldrb	r0, [r0, #16]
   b9590:	f7fd fb78 	bl	b6c84 <hal_usart_available>
}
   b9594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9598:	bd08      	pop	{r3, pc}

000b959a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b959a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b959c:	7c00      	ldrb	r0, [r0, #16]
   b959e:	f7fd fb81 	bl	b6ca4 <hal_usart_peek>
}
   b95a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b95a6:	bd08      	pop	{r3, pc}

000b95a8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b95a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b95aa:	7c00      	ldrb	r0, [r0, #16]
   b95ac:	f7fd fb72 	bl	b6c94 <hal_usart_read>
}
   b95b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b95b4:	bd08      	pop	{r3, pc}

000b95b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b95b6:	7c00      	ldrb	r0, [r0, #16]
   b95b8:	f7fd bb7c 	b.w	b6cb4 <hal_usart_flush>

000b95bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b95bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b95be:	7c45      	ldrb	r5, [r0, #17]
{
   b95c0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b95c2:	b12d      	cbz	r5, b95d0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b95c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b95c6:	b003      	add	sp, #12
   b95c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b95cc:	f7fd bb52 	b.w	b6c74 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b95d0:	7c00      	ldrb	r0, [r0, #16]
   b95d2:	9101      	str	r1, [sp, #4]
   b95d4:	f7fd fb7e 	bl	b6cd4 <hal_usart_available_data_for_write>
   b95d8:	2800      	cmp	r0, #0
   b95da:	9901      	ldr	r1, [sp, #4]
   b95dc:	dcf2      	bgt.n	b95c4 <_ZN11USARTSerial5writeEh+0x8>
}
   b95de:	4628      	mov	r0, r5
   b95e0:	b003      	add	sp, #12
   b95e2:	bd30      	pop	{r4, r5, pc}

000b95e4 <_ZN11USARTSerialD0Ev>:
   b95e4:	b510      	push	{r4, lr}
   b95e6:	2114      	movs	r1, #20
   b95e8:	4604      	mov	r4, r0
   b95ea:	f7fa fd58 	bl	b409e <_ZdlPvj>
   b95ee:	4620      	mov	r0, r4
   b95f0:	bd10      	pop	{r4, pc}
	...

000b95f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b95f4:	b510      	push	{r4, lr}
   b95f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b95fa:	4604      	mov	r4, r0
   b95fc:	4608      	mov	r0, r1
   b95fe:	4611      	mov	r1, r2
   b9600:	2200      	movs	r2, #0
   b9602:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9606:	4b04      	ldr	r3, [pc, #16]	; (b9618 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9608:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b960a:	2301      	movs	r3, #1
  _serial = serial;
   b960c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b960e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9610:	f7fd fb68 	bl	b6ce4 <hal_usart_init_ex>
}
   b9614:	4620      	mov	r0, r4
   b9616:	bd10      	pop	{r4, pc}
   b9618:	000bd944 	.word	0x000bd944

000b961c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b961c:	b510      	push	{r4, lr}
      if (_M_empty())
   b961e:	6883      	ldr	r3, [r0, #8]
   b9620:	4604      	mov	r4, r0
   b9622:	b90b      	cbnz	r3, b9628 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b9624:	f000 fda4 	bl	ba170 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9628:	68c3      	ldr	r3, [r0, #12]
   b962a:	4798      	blx	r3
      if (_M_manager)
   b962c:	68a3      	ldr	r3, [r4, #8]
   b962e:	b11b      	cbz	r3, b9638 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9630:	2203      	movs	r2, #3
   b9632:	4621      	mov	r1, r4
   b9634:	4620      	mov	r0, r4
   b9636:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b9638:	4620      	mov	r0, r4
   b963a:	2110      	movs	r1, #16
}
   b963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b9640:	f7fa bd2d 	b.w	b409e <_ZdlPvj>

000b9644 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9644:	4770      	bx	lr

000b9646 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9648:	4606      	mov	r6, r0
   b964a:	4615      	mov	r5, r2
   b964c:	460c      	mov	r4, r1
   b964e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9650:	42bc      	cmp	r4, r7
   b9652:	d006      	beq.n	b9662 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9654:	6833      	ldr	r3, [r6, #0]
   b9656:	f814 1b01 	ldrb.w	r1, [r4], #1
   b965a:	689b      	ldr	r3, [r3, #8]
   b965c:	4630      	mov	r0, r6
   b965e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9660:	e7f6      	b.n	b9650 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9662:	4628      	mov	r0, r5
   b9664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9666 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9666:	7c00      	ldrb	r0, [r0, #16]
   b9668:	2200      	movs	r2, #0
   b966a:	f7fd bb43 	b.w	b6cf4 <hal_i2c_write>

000b966e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b966e:	7c00      	ldrb	r0, [r0, #16]
   b9670:	2100      	movs	r1, #0
   b9672:	f7fd bb47 	b.w	b6d04 <hal_i2c_available>

000b9676 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9676:	7c00      	ldrb	r0, [r0, #16]
   b9678:	2100      	movs	r1, #0
   b967a:	f7fd bb4b 	b.w	b6d14 <hal_i2c_read>

000b967e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b967e:	7c00      	ldrb	r0, [r0, #16]
   b9680:	2100      	movs	r1, #0
   b9682:	f7fd bb4f 	b.w	b6d24 <hal_i2c_peek>

000b9686 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9686:	7c00      	ldrb	r0, [r0, #16]
   b9688:	2100      	movs	r1, #0
   b968a:	f7fd bb53 	b.w	b6d34 <hal_i2c_flush>

000b968e <_ZN7TwoWireD0Ev>:
   b968e:	b510      	push	{r4, lr}
   b9690:	2114      	movs	r1, #20
   b9692:	4604      	mov	r4, r0
   b9694:	f7fa fd03 	bl	b409e <_ZdlPvj>
   b9698:	4620      	mov	r0, r4
   b969a:	bd10      	pop	{r4, pc}

000b969c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b969c:	b538      	push	{r3, r4, r5, lr}
   b969e:	4604      	mov	r4, r0
   b96a0:	4615      	mov	r5, r2
   b96a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b96a6:	2200      	movs	r2, #0
   b96a8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b96ac:	4b09      	ldr	r3, [pc, #36]	; (b96d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b96ae:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b96b0:	4608      	mov	r0, r1
   b96b2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b96b4:	4629      	mov	r1, r5
   b96b6:	f7fd fb4d 	bl	b6d54 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b96ba:	30bf      	adds	r0, #191	; 0xbf
   b96bc:	d108      	bne.n	b96d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b96be:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b96c0:	07db      	lsls	r3, r3, #31
   b96c2:	d505      	bpl.n	b96d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b96c4:	6868      	ldr	r0, [r5, #4]
   b96c6:	f7fd fcc1 	bl	b704c <free>
    free(conf.tx_buffer);
   b96ca:	68e8      	ldr	r0, [r5, #12]
   b96cc:	f7fd fcbe 	bl	b704c <free>
}
   b96d0:	4620      	mov	r0, r4
   b96d2:	bd38      	pop	{r3, r4, r5, pc}
   b96d4:	000bd974 	.word	0x000bd974

000b96d8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b96d8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b96da:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b96dc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b96e0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b96e2:	2201      	movs	r2, #1
   b96e4:	f04f 33ff 	mov.w	r3, #4294967295
   b96e8:	f10d 0107 	add.w	r1, sp, #7
   b96ec:	47a0      	blx	r4
}
   b96ee:	b002      	add	sp, #8
   b96f0:	bd10      	pop	{r4, pc}

000b96f2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b96f2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b96f4:	6803      	ldr	r3, [r0, #0]
   b96f6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b96f8:	f04f 33ff 	mov.w	r3, #4294967295
   b96fc:	46a4      	mov	ip, r4
}
   b96fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9702:	4760      	bx	ip

000b9704 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9704:	b513      	push	{r0, r1, r4, lr}
   b9706:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9708:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b970a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b970e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9710:	f10d 0107 	add.w	r1, sp, #7
   b9714:	2201      	movs	r2, #1
   b9716:	47a0      	blx	r4
}
   b9718:	b002      	add	sp, #8
   b971a:	bd10      	pop	{r4, pc}

000b971c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b971c:	b510      	push	{r4, lr}
   b971e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9720:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9724:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9728:	429a      	cmp	r2, r3
int TCPClient::read() {
   b972a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b972c:	d008      	beq.n	b9740 <_ZN9TCPClient4readEv+0x24>
   b972e:	6963      	ldr	r3, [r4, #20]
   b9730:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9734:	1c51      	adds	r1, r2, #1
   b9736:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b973a:	4413      	add	r3, r2
   b973c:	7918      	ldrb	r0, [r3, #4]
}
   b973e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9740:	6803      	ldr	r3, [r0, #0]
   b9742:	691b      	ldr	r3, [r3, #16]
   b9744:	4798      	blx	r3
   b9746:	2800      	cmp	r0, #0
   b9748:	d1f1      	bne.n	b972e <_ZN9TCPClient4readEv+0x12>
   b974a:	f04f 30ff 	mov.w	r0, #4294967295
   b974e:	e7f6      	b.n	b973e <_ZN9TCPClient4readEv+0x22>

000b9750 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9750:	4770      	bx	lr

000b9752 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9752:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9754:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9756:	43c0      	mvns	r0, r0
   b9758:	0fc0      	lsrs	r0, r0, #31
   b975a:	4770      	bx	lr

000b975c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b975c:	4770      	bx	lr
	...

000b9760 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9760:	4b06      	ldr	r3, [pc, #24]	; (b977c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9762:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9764:	b510      	push	{r4, lr}
   b9766:	f100 040c 	add.w	r4, r0, #12
	    ||
   b976a:	d005      	beq.n	b9778 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b976c:	4608      	mov	r0, r1
   b976e:	f000 fd03 	bl	ba178 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9772:	2800      	cmp	r0, #0
   b9774:	bf08      	it	eq
   b9776:	2400      	moveq	r4, #0
      }
   b9778:	4620      	mov	r0, r4
   b977a:	bd10      	pop	{r4, pc}
   b977c:	000bd87c 	.word	0x000bd87c

000b9780 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9780:	b510      	push	{r4, lr}
   b9782:	21ac      	movs	r1, #172	; 0xac
   b9784:	4604      	mov	r4, r0
   b9786:	f7fa fc8a 	bl	b409e <_ZdlPvj>
   b978a:	4620      	mov	r0, r4
   b978c:	bd10      	pop	{r4, pc}

000b978e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b978e:	21ac      	movs	r1, #172	; 0xac
   b9790:	f7fa bc85 	b.w	b409e <_ZdlPvj>

000b9794 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9798:	f04f 0800 	mov.w	r8, #0
   b979c:	b086      	sub	sp, #24
   b979e:	461c      	mov	r4, r3
   b97a0:	f8c0 8004 	str.w	r8, [r0, #4]
   b97a4:	4605      	mov	r5, r0
   b97a6:	460e      	mov	r6, r1
   b97a8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b97aa:	4641      	mov	r1, r8
   b97ac:	2210      	movs	r2, #16
   b97ae:	a802      	add	r0, sp, #8
   b97b0:	f001 fb29 	bl	bae06 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b97b4:	1c63      	adds	r3, r4, #1
   b97b6:	d009      	beq.n	b97cc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b97b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b97bc:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b97c0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b97c4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b97c8:	435c      	muls	r4, r3
   b97ca:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b97cc:	6968      	ldr	r0, [r5, #20]
   b97ce:	2310      	movs	r3, #16
   b97d0:	9300      	str	r3, [sp, #0]
   b97d2:	6800      	ldr	r0, [r0, #0]
   b97d4:	ab02      	add	r3, sp, #8
   b97d6:	f241 0205 	movw	r2, #4101	; 0x1005
   b97da:	f640 71ff 	movw	r1, #4095	; 0xfff
   b97de:	f7fd fac1 	bl	b6d64 <sock_setsockopt>
    if (ret < 0) {
   b97e2:	2800      	cmp	r0, #0
   b97e4:	da07      	bge.n	b97f6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b97e6:	f7fd fc69 	bl	b70bc <__errno>
   b97ea:	6803      	ldr	r3, [r0, #0]
   b97ec:	606b      	str	r3, [r5, #4]
        return 0;
   b97ee:	2000      	movs	r0, #0
}
   b97f0:	b006      	add	sp, #24
   b97f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b97f6:	6968      	ldr	r0, [r5, #20]
   b97f8:	2300      	movs	r3, #0
   b97fa:	6800      	ldr	r0, [r0, #0]
   b97fc:	463a      	mov	r2, r7
   b97fe:	4631      	mov	r1, r6
   b9800:	f7fd fad0 	bl	b6da4 <sock_send>
    if (ret < 0) {
   b9804:	1e03      	subs	r3, r0, #0
   b9806:	dbee      	blt.n	b97e6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9808:	4618      	mov	r0, r3
   b980a:	e7f1      	b.n	b97f0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b980c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b980c:	b530      	push	{r4, r5, lr}
   b980e:	b087      	sub	sp, #28
   b9810:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9812:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9814:	4668      	mov	r0, sp
   b9816:	f7ff fdf3 	bl	b9400 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b981a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b981c:	3404      	adds	r4, #4
   b981e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9820:	682b      	ldr	r3, [r5, #0]
   b9822:	7023      	strb	r3, [r4, #0]
    }
   b9824:	b007      	add	sp, #28
   b9826:	bd30      	pop	{r4, r5, pc}

000b9828 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9828:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b982a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b982c:	4b05      	ldr	r3, [pc, #20]	; (b9844 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b982e:	4604      	mov	r4, r0
   b9830:	358c      	adds	r5, #140	; 0x8c
   b9832:	f844 3b04 	str.w	r3, [r4], #4
   b9836:	4606      	mov	r6, r0
   b9838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b983a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b983c:	682b      	ldr	r3, [r5, #0]
   b983e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9840:	4630      	mov	r0, r6
   b9842:	bd70      	pop	{r4, r5, r6, pc}
   b9844:	000bd900 	.word	0x000bd900

000b9848 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b984c:	4698      	mov	r8, r3
    stop();
   b984e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9850:	b093      	sub	sp, #76	; 0x4c
   b9852:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9854:	2400      	movs	r4, #0
    stop();
   b9856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9858:	4606      	mov	r6, r0
   b985a:	4617      	mov	r7, r2
    stop();
   b985c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b985e:	4628      	mov	r0, r5
   b9860:	466b      	mov	r3, sp
   b9862:	4622      	mov	r2, r4
   b9864:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9866:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9868:	f7fd f8c2 	bl	b69f0 <netdb_getaddrinfo>
   b986c:	4605      	mov	r5, r0
   b986e:	2800      	cmp	r0, #0
   b9870:	d163      	bne.n	b993a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9872:	9b00      	ldr	r3, [sp, #0]
   b9874:	2b00      	cmp	r3, #0
   b9876:	d04b      	beq.n	b9910 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9878:	695b      	ldr	r3, [r3, #20]
   b987a:	2b00      	cmp	r3, #0
   b987c:	d048      	beq.n	b9910 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b987e:	a806      	add	r0, sp, #24
   b9880:	f7ff fd72 	bl	b9368 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9884:	9b00      	ldr	r3, [sp, #0]
   b9886:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9888:	7863      	ldrb	r3, [r4, #1]
   b988a:	2b02      	cmp	r3, #2
   b988c:	d104      	bne.n	b9898 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b988e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9890:	a806      	add	r0, sp, #24
   b9892:	f7ff ffbb 	bl	b980c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b9896:	e026      	b.n	b98e6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9898:	2b0a      	cmp	r3, #10
   b989a:	d124      	bne.n	b98e6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b989c:	2211      	movs	r2, #17
   b989e:	4629      	mov	r1, r5
   b98a0:	a801      	add	r0, sp, #4
   b98a2:	f001 fab0 	bl	bae06 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b98a6:	68a3      	ldr	r3, [r4, #8]
   b98a8:	2b00      	cmp	r3, #0
   b98aa:	d038      	beq.n	b991e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b98ac:	f104 0308 	add.w	r3, r4, #8
   b98b0:	f10d 0c04 	add.w	ip, sp, #4
   b98b4:	3418      	adds	r4, #24
   b98b6:	6818      	ldr	r0, [r3, #0]
   b98b8:	6859      	ldr	r1, [r3, #4]
   b98ba:	4662      	mov	r2, ip
   b98bc:	c203      	stmia	r2!, {r0, r1}
   b98be:	3308      	adds	r3, #8
   b98c0:	42a3      	cmp	r3, r4
   b98c2:	4694      	mov	ip, r2
   b98c4:	d1f7      	bne.n	b98b6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b98c6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b98c8:	a901      	add	r1, sp, #4
   b98ca:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b98cc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b98d0:	f7ff fd58 	bl	b9384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b98d4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b98d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b98dc:	ac07      	add	r4, sp, #28
   b98de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b98e0:	f8dc 3000 	ldr.w	r3, [ip]
   b98e4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b98e6:	a806      	add	r0, sp, #24
   b98e8:	f7ff fd66 	bl	b93b8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b98ec:	b180      	cbz	r0, b9910 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b98ee:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b98f0:	ad07      	add	r5, sp, #28
   b98f2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b98f6:	4b12      	ldr	r3, [pc, #72]	; (b9940 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b98f8:	930c      	str	r3, [sp, #48]	; 0x30
   b98fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b98fc:	ac0d      	add	r4, sp, #52	; 0x34
   b98fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9900:	682b      	ldr	r3, [r5, #0]
   b9902:	7023      	strb	r3, [r4, #0]
   b9904:	463a      	mov	r2, r7
   b9906:	4643      	mov	r3, r8
   b9908:	a90c      	add	r1, sp, #48	; 0x30
   b990a:	4630      	mov	r0, r6
   b990c:	47c8      	blx	r9
   b990e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9910:	9800      	ldr	r0, [sp, #0]
   b9912:	f7fd f865 	bl	b69e0 <netdb_freeaddrinfo>
}
   b9916:	4628      	mov	r0, r5
   b9918:	b013      	add	sp, #76	; 0x4c
   b991a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b991e:	68e3      	ldr	r3, [r4, #12]
   b9920:	2b00      	cmp	r3, #0
   b9922:	d1c3      	bne.n	b98ac <_ZN9TCPClient7connectEPKctm+0x64>
   b9924:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9928:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b992c:	f7fd f992 	bl	b6c54 <inet_htonl>
   b9930:	4581      	cmp	r9, r0
   b9932:	d1bb      	bne.n	b98ac <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9934:	f104 0114 	add.w	r1, r4, #20
   b9938:	e7aa      	b.n	b9890 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b993a:	4625      	mov	r5, r4
   b993c:	e7e8      	b.n	b9910 <_ZN9TCPClient7connectEPKctm+0xc8>
   b993e:	bf00      	nop
   b9940:	000bd900 	.word	0x000bd900

000b9944 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9944:	b538      	push	{r3, r4, r5, lr}
   b9946:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9948:	681a      	ldr	r2, [r3, #0]
   b994a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b994c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b994e:	da10      	bge.n	b9972 <_ZN9TCPClient9connectedEv+0x2e>
   b9950:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9954:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9958:	429a      	cmp	r2, r3
   b995a:	d10a      	bne.n	b9972 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b995c:	6803      	ldr	r3, [r0, #0]
   b995e:	691b      	ldr	r3, [r3, #16]
   b9960:	4798      	blx	r3
        if (!rv) {
   b9962:	4604      	mov	r4, r0
   b9964:	b928      	cbnz	r0, b9972 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9966:	682b      	ldr	r3, [r5, #0]
   b9968:	4628      	mov	r0, r5
   b996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b996c:	4798      	blx	r3
        rv = available();
   b996e:	4620      	mov	r0, r4
}
   b9970:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9972:	2001      	movs	r0, #1
   b9974:	e7fc      	b.n	b9970 <_ZN9TCPClient9connectedEv+0x2c>

000b9976 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9976:	b510      	push	{r4, lr}
   b9978:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b997a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b997e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9982:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9984:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9986:	d005      	beq.n	b9994 <_ZN9TCPClient4peekEv+0x1e>
   b9988:	6963      	ldr	r3, [r4, #20]
   b998a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b998e:	4413      	add	r3, r2
   b9990:	7918      	ldrb	r0, [r3, #4]
}
   b9992:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9994:	6803      	ldr	r3, [r0, #0]
   b9996:	691b      	ldr	r3, [r3, #16]
   b9998:	4798      	blx	r3
   b999a:	2800      	cmp	r0, #0
   b999c:	d1f4      	bne.n	b9988 <_ZN9TCPClient4peekEv+0x12>
   b999e:	f04f 30ff 	mov.w	r0, #4294967295
   b99a2:	e7f6      	b.n	b9992 <_ZN9TCPClient4peekEv+0x1c>

000b99a4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b99a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99a6:	6943      	ldr	r3, [r0, #20]
   b99a8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b99aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b99ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b99b2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b99b4:	4605      	mov	r5, r0
   b99b6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b99b8:	d016      	beq.n	b99e8 <_ZN9TCPClient4readEPhj+0x44>
   b99ba:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b99bc:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b99c0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b99c4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b99c6:	42bc      	cmp	r4, r7
   b99c8:	bf28      	it	cs
   b99ca:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b99cc:	3304      	adds	r3, #4
   b99ce:	4622      	mov	r2, r4
   b99d0:	4419      	add	r1, r3
   b99d2:	4630      	mov	r0, r6
   b99d4:	f001 f9ef 	bl	badb6 <memcpy>
   b99d8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b99da:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b99de:	4423      	add	r3, r4
   b99e0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b99e4:	4620      	mov	r0, r4
   b99e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b99e8:	6803      	ldr	r3, [r0, #0]
   b99ea:	691b      	ldr	r3, [r3, #16]
   b99ec:	4798      	blx	r3
   b99ee:	2800      	cmp	r0, #0
   b99f0:	d1e3      	bne.n	b99ba <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b99f2:	f04f 34ff 	mov.w	r4, #4294967295
   b99f6:	e7f5      	b.n	b99e4 <_ZN9TCPClient4readEPhj+0x40>

000b99f8 <_ZN9TCPClient12flush_bufferEv>:
   b99f8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b99fa:	2300      	movs	r3, #0
   b99fc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9a00:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9a02:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9a06:	4770      	bx	lr

000b9a08 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a0c:	461f      	mov	r7, r3
    stop();
   b9a0e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a10:	460c      	mov	r4, r1
    stop();
   b9a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a14:	b08a      	sub	sp, #40	; 0x28
   b9a16:	4605      	mov	r5, r0
   b9a18:	4616      	mov	r6, r2
    stop();
   b9a1a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9a1c:	7d23      	ldrb	r3, [r4, #20]
   b9a1e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9a22:	2b04      	cmp	r3, #4
   b9a24:	bf0c      	ite	eq
   b9a26:	2002      	moveq	r0, #2
   b9a28:	200a      	movne	r0, #10
   b9a2a:	2206      	movs	r2, #6
   b9a2c:	2101      	movs	r1, #1
   b9a2e:	f7fd f9c1 	bl	b6db4 <sock_socket>
   b9a32:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9a36:	696b      	ldr	r3, [r5, #20]
   b9a38:	681b      	ldr	r3, [r3, #0]
   b9a3a:	2b00      	cmp	r3, #0
   b9a3c:	da08      	bge.n	b9a50 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9a3e:	682b      	ldr	r3, [r5, #0]
   b9a40:	4628      	mov	r0, r5
   b9a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9a44:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9a46:	4798      	blx	r3
}
   b9a48:	4620      	mov	r0, r4
   b9a4a:	b00a      	add	sp, #40	; 0x28
   b9a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9a50:	4628      	mov	r0, r5
   b9a52:	f7ff ffd1 	bl	b99f8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9a56:	b1b7      	cbz	r7, b9a86 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9a58:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9a5a:	a903      	add	r1, sp, #12
   b9a5c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9a5e:	9303      	str	r3, [sp, #12]
   b9a60:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9a64:	f7fc ffe4 	bl	b6a30 <if_index_to_name>
   b9a68:	2800      	cmp	r0, #0
   b9a6a:	d1e8      	bne.n	b9a3e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9a6c:	6968      	ldr	r0, [r5, #20]
   b9a6e:	2306      	movs	r3, #6
   b9a70:	9300      	str	r3, [sp, #0]
   b9a72:	6800      	ldr	r0, [r0, #0]
   b9a74:	ab03      	add	r3, sp, #12
   b9a76:	f241 020b 	movw	r2, #4107	; 0x100b
   b9a7a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9a7e:	f7fd f971 	bl	b6d64 <sock_setsockopt>
   b9a82:	2800      	cmp	r0, #0
   b9a84:	d1db      	bne.n	b9a3e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9a86:	221c      	movs	r2, #28
   b9a88:	2100      	movs	r1, #0
   b9a8a:	a803      	add	r0, sp, #12
   b9a8c:	f001 f9bb 	bl	bae06 <memset>
    if (ip.version() == 4) {
   b9a90:	7d23      	ldrb	r3, [r4, #20]
   b9a92:	2b04      	cmp	r3, #4
   b9a94:	d11d      	bne.n	b9ad2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9a96:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9a9a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9a9c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9aa0:	f7fd f8e0 	bl	b6c64 <inet_htons>
   b9aa4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9aa8:	6860      	ldr	r0, [r4, #4]
   b9aaa:	f7fd f8d3 	bl	b6c54 <inet_htonl>
   b9aae:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9ab0:	696b      	ldr	r3, [r5, #20]
   b9ab2:	221c      	movs	r2, #28
   b9ab4:	6818      	ldr	r0, [r3, #0]
   b9ab6:	a903      	add	r1, sp, #12
   b9ab8:	f7fd f964 	bl	b6d84 <sock_connect>
   b9abc:	2800      	cmp	r0, #0
   b9abe:	d1be      	bne.n	b9a3e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9ac0:	3404      	adds	r4, #4
   b9ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9ac4:	696d      	ldr	r5, [r5, #20]
   b9ac6:	358c      	adds	r5, #140	; 0x8c
   b9ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9aca:	6823      	ldr	r3, [r4, #0]
   b9acc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9ace:	2401      	movs	r4, #1
   b9ad0:	e7ba      	b.n	b9a48 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9ad2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9ad6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9ad8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9adc:	f7fd f8c2 	bl	b6c64 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9ae0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9ae2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9ae6:	1d23      	adds	r3, r4, #4
   b9ae8:	f104 0714 	add.w	r7, r4, #20
   b9aec:	6818      	ldr	r0, [r3, #0]
   b9aee:	6859      	ldr	r1, [r3, #4]
   b9af0:	4632      	mov	r2, r6
   b9af2:	c203      	stmia	r2!, {r0, r1}
   b9af4:	3308      	adds	r3, #8
   b9af6:	42bb      	cmp	r3, r7
   b9af8:	4616      	mov	r6, r2
   b9afa:	d1f7      	bne.n	b9aec <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9afc:	e7d8      	b.n	b9ab0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9b00 <_ZN9TCPClient9availableEv>:
{
   b9b00:	b530      	push	{r4, r5, lr}
   b9b02:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9b04:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9b08:	b08b      	sub	sp, #44	; 0x2c
   b9b0a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9b0c:	b12b      	cbz	r3, b9b1a <_ZN9TCPClient9availableEv+0x1a>
   b9b0e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9b12:	429a      	cmp	r2, r3
   b9b14:	d101      	bne.n	b9b1a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9b16:	f7ff ff6f 	bl	b99f8 <_ZN9TCPClient12flush_bufferEv>
   b9b1a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9b1c:	6808      	ldr	r0, [r1, #0]
   b9b1e:	2800      	cmp	r0, #0
   b9b20:	db18      	blt.n	b9b54 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9b22:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9b26:	2d7f      	cmp	r5, #127	; 0x7f
   b9b28:	d814      	bhi.n	b9b54 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9b2a:	3104      	adds	r1, #4
   b9b2c:	2308      	movs	r3, #8
   b9b2e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9b32:	4429      	add	r1, r5
   b9b34:	f7fd f92e 	bl	b6d94 <sock_recv>
            if (ret > 0) {
   b9b38:	2800      	cmp	r0, #0
   b9b3a:	dd13      	ble.n	b9b64 <_ZN9TCPClient9availableEv+0x64>
   b9b3c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9b3e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9b42:	b90a      	cbnz	r2, b9b48 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9b44:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9b48:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9b4a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9b4e:	4410      	add	r0, r2
   b9b50:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9b54:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9b56:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9b5a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9b5e:	1ac0      	subs	r0, r0, r3
   b9b60:	b00b      	add	sp, #44	; 0x2c
   b9b62:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9b64:	f7fd faaa 	bl	b70bc <__errno>
   b9b68:	6803      	ldr	r3, [r0, #0]
   b9b6a:	2b0b      	cmp	r3, #11
   b9b6c:	d0f2      	beq.n	b9b54 <_ZN9TCPClient9availableEv+0x54>
   b9b6e:	f7fd faa5 	bl	b70bc <__errno>
   b9b72:	6803      	ldr	r3, [r0, #0]
   b9b74:	2b0b      	cmp	r3, #11
   b9b76:	d0ed      	beq.n	b9b54 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9b78:	2320      	movs	r3, #32
   b9b7a:	2500      	movs	r5, #0
   b9b7c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9b80:	f7fd fa9c 	bl	b70bc <__errno>
   b9b84:	6803      	ldr	r3, [r0, #0]
   b9b86:	9301      	str	r3, [sp, #4]
   b9b88:	4b08      	ldr	r3, [pc, #32]	; (b9bac <_ZN9TCPClient9availableEv+0xac>)
   b9b8a:	4909      	ldr	r1, [pc, #36]	; (b9bb0 <_ZN9TCPClient9availableEv+0xb0>)
   b9b8c:	9300      	str	r3, [sp, #0]
   b9b8e:	aa02      	add	r2, sp, #8
   b9b90:	462b      	mov	r3, r5
   b9b92:	2032      	movs	r0, #50	; 0x32
   b9b94:	f7fd f966 	bl	b6e64 <log_message>
                    sock_close(d_->sock);
   b9b98:	6963      	ldr	r3, [r4, #20]
   b9b9a:	6818      	ldr	r0, [r3, #0]
   b9b9c:	f7fd f8ea 	bl	b6d74 <sock_close>
   b9ba0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9ba2:	f04f 32ff 	mov.w	r2, #4294967295
   b9ba6:	601a      	str	r2, [r3, #0]
   b9ba8:	e7d4      	b.n	b9b54 <_ZN9TCPClient9availableEv+0x54>
   b9baa:	bf00      	nop
   b9bac:	000bd99b 	.word	0x000bd99b
   b9bb0:	000bd994 	.word	0x000bd994

000b9bb4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9bb4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9bb6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9bb8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9bba:	6818      	ldr	r0, [r3, #0]
   b9bbc:	2800      	cmp	r0, #0
   b9bbe:	db01      	blt.n	b9bc4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9bc0:	f7fd f8d8 	bl	b6d74 <sock_close>
   b9bc4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9bc6:	f04f 32ff 	mov.w	r2, #4294967295
   b9bca:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9bcc:	6960      	ldr	r0, [r4, #20]
   b9bce:	2211      	movs	r2, #17
   b9bd0:	2100      	movs	r1, #0
   b9bd2:	308c      	adds	r0, #140	; 0x8c
   b9bd4:	f001 f917 	bl	bae06 <memset>
    flush_buffer();
   b9bd8:	4620      	mov	r0, r4
}
   b9bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9bde:	f7ff bf0b 	b.w	b99f8 <_ZN9TCPClient12flush_bufferEv>

000b9be2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9be2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9be4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9be6:	4604      	mov	r4, r0
          total(0) {
   b9be8:	6001      	str	r1, [r0, #0]
   b9bea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9bee:	3088      	adds	r0, #136	; 0x88
   b9bf0:	f7ff fbba 	bl	b9368 <_ZN9IPAddressC1Ev>
}
   b9bf4:	4620      	mov	r0, r4
   b9bf6:	bd10      	pop	{r4, pc}

000b9bf8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9bfa:	2300      	movs	r3, #0
   b9bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9c00:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9c04:	4a0e      	ldr	r2, [pc, #56]	; (b9c40 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9c06:	6103      	str	r3, [r0, #16]
   b9c08:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9c0a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9c0c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9c0e:	20ac      	movs	r0, #172	; 0xac
   b9c10:	9101      	str	r1, [sp, #4]
   b9c12:	f7fa fa40 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9c16:	1e05      	subs	r5, r0, #0
   b9c18:	f105 060c 	add.w	r6, r5, #12
   b9c1c:	d008      	beq.n	b9c30 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9c1e:	2301      	movs	r3, #1
   b9c20:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9c24:	4b07      	ldr	r3, [pc, #28]	; (b9c44 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9c26:	9901      	ldr	r1, [sp, #4]
   b9c28:	602b      	str	r3, [r5, #0]
   b9c2a:	4630      	mov	r0, r6
   b9c2c:	f7ff ffd9 	bl	b9be2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9c30:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9c32:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9c36:	f7ff fedf 	bl	b99f8 <_ZN9TCPClient12flush_bufferEv>
}
   b9c3a:	b002      	add	sp, #8
   b9c3c:	bd70      	pop	{r4, r5, r6, pc}
   b9c3e:	bf00      	nop
   b9c40:	000bd9d0 	.word	0x000bd9d0
   b9c44:	000bd9b4 	.word	0x000bd9b4

000b9c48 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9c48:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9c4a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b9c4e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9c50:	f7ff ffd2 	bl	b9bf8 <_ZN9TCPClientC1Ei>
}
   b9c54:	4620      	mov	r0, r4
   b9c56:	bd10      	pop	{r4, pc}

000b9c58 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9c58:	b510      	push	{r4, lr}
   b9c5a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9c5c:	6800      	ldr	r0, [r0, #0]
   b9c5e:	2800      	cmp	r0, #0
   b9c60:	db01      	blt.n	b9c66 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9c62:	f7fd f887 	bl	b6d74 <sock_close>
    }
}
   b9c66:	4620      	mov	r0, r4
   b9c68:	bd10      	pop	{r4, pc}

000b9c6a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9c6a:	300c      	adds	r0, #12
   b9c6c:	f7ff bff4 	b.w	b9c58 <_ZN9TCPClient4DataD1Ev>

000b9c70 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   b9c70:	4770      	bx	lr

000b9c72 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   b9c72:	2001      	movs	r0, #1
   b9c74:	4770      	bx	lr

000b9c76 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9c76:	2200      	movs	r2, #0
   b9c78:	6840      	ldr	r0, [r0, #4]
   b9c7a:	4611      	mov	r1, r2
   b9c7c:	f7fd b95e 	b.w	b6f3c <network_ready>

000b9c80 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   b9c80:	b510      	push	{r4, lr}
   b9c82:	2124      	movs	r1, #36	; 0x24
   b9c84:	4604      	mov	r4, r0
   b9c86:	f7fa fa0a 	bl	b409e <_ZdlPvj>
   b9c8a:	4620      	mov	r0, r4
   b9c8c:	bd10      	pop	{r4, pc}

000b9c8e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9c8e:	2200      	movs	r2, #0
   b9c90:	6840      	ldr	r0, [r0, #4]
   b9c92:	4611      	mov	r1, r2
   b9c94:	f7fd b972 	b.w	b6f7c <network_listening>

000b9c98 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9c98:	2200      	movs	r2, #0
   b9c9a:	6840      	ldr	r0, [r0, #4]
   b9c9c:	4611      	mov	r1, r2
   b9c9e:	f7fd b97d 	b.w	b6f9c <network_get_listen_timeout>

000b9ca2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9ca2:	6840      	ldr	r0, [r0, #4]
   b9ca4:	2200      	movs	r2, #0
   b9ca6:	f7fd b971 	b.w	b6f8c <network_set_listen_timeout>

000b9caa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9caa:	6840      	ldr	r0, [r0, #4]
   b9cac:	2200      	movs	r2, #0
   b9cae:	f081 0101 	eor.w	r1, r1, #1
   b9cb2:	f7fd b95b 	b.w	b6f6c <network_listen>

000b9cb6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9cb6:	2300      	movs	r3, #0
   b9cb8:	6840      	ldr	r0, [r0, #4]
   b9cba:	461a      	mov	r2, r3
   b9cbc:	4619      	mov	r1, r3
   b9cbe:	f7fd b94d 	b.w	b6f5c <network_off>

000b9cc2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9cc2:	2300      	movs	r3, #0
   b9cc4:	6840      	ldr	r0, [r0, #4]
   b9cc6:	461a      	mov	r2, r3
   b9cc8:	4619      	mov	r1, r3
   b9cca:	f7fd b93f 	b.w	b6f4c <network_on>

000b9cce <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9cce:	2200      	movs	r2, #0
   b9cd0:	6840      	ldr	r0, [r0, #4]
   b9cd2:	4611      	mov	r1, r2
   b9cd4:	f7fd b922 	b.w	b6f1c <network_connecting>

000b9cd8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9cd8:	6840      	ldr	r0, [r0, #4]
   b9cda:	2200      	movs	r2, #0
   b9cdc:	2102      	movs	r1, #2
   b9cde:	f7fd b925 	b.w	b6f2c <network_disconnect>

000b9ce2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9ce2:	2300      	movs	r3, #0
   b9ce4:	6840      	ldr	r0, [r0, #4]
   b9ce6:	461a      	mov	r2, r3
   b9ce8:	f7fd b910 	b.w	b6f0c <network_connect>

000b9cec <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   b9cec:	8983      	ldrh	r3, [r0, #12]
   b9cee:	b17b      	cbz	r3, b9d10 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   b9cf0:	6943      	ldr	r3, [r0, #20]
   b9cf2:	2b00      	cmp	r3, #0
   b9cf4:	db0c      	blt.n	b9d10 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   b9cf6:	ee07 3a90 	vmov	s15, r3
   b9cfa:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9d18 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   b9cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9d02:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9d06:	eddf 7a05 	vldr	s15, [pc, #20]	; b9d1c <_ZNK10WiFiSignal11getStrengthEv+0x30>
   b9d0a:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9d0e:	4770      	bx	lr
    }
    return -1.0f;
   b9d10:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9d14:	4770      	bx	lr
   b9d16:	bf00      	nop
   b9d18:	477fff00 	.word	0x477fff00
   b9d1c:	42c80000 	.word	0x42c80000

000b9d20 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   b9d20:	8983      	ldrh	r3, [r0, #12]
   b9d22:	b163      	cbz	r3, b9d3e <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   b9d24:	6903      	ldr	r3, [r0, #16]
   b9d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9d2a:	d008      	beq.n	b9d3e <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   b9d2c:	ee07 3a90 	vmov	s15, r3
   b9d30:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9d44 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   b9d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9d38:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9d3c:	4770      	bx	lr
    }
    return 0.0f;
   b9d3e:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9d48 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   b9d42:	4770      	bx	lr
   b9d44:	42c80000 	.word	0x42c80000
   b9d48:	00000000 	.word	0x00000000

000b9d4c <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   b9d4c:	8983      	ldrh	r3, [r0, #12]
   b9d4e:	b17b      	cbz	r3, b9d70 <_ZNK10WiFiSignal10getQualityEv+0x24>
   b9d50:	6a03      	ldr	r3, [r0, #32]
   b9d52:	2b00      	cmp	r3, #0
   b9d54:	db0c      	blt.n	b9d70 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   b9d56:	ee07 3a90 	vmov	s15, r3
   b9d5a:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9d78 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   b9d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9d62:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9d66:	eddf 7a05 	vldr	s15, [pc, #20]	; b9d7c <_ZNK10WiFiSignal10getQualityEv+0x30>
   b9d6a:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9d6e:	4770      	bx	lr
    }
    return -1.0f;
   b9d70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9d74:	4770      	bx	lr
   b9d76:	bf00      	nop
   b9d78:	477fff00 	.word	0x477fff00
   b9d7c:	42c80000 	.word	0x42c80000

000b9d80 <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   b9d80:	8983      	ldrh	r3, [r0, #12]
   b9d82:	b163      	cbz	r3, b9d9e <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   b9d84:	6983      	ldr	r3, [r0, #24]
   b9d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9d8a:	d008      	beq.n	b9d9e <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   b9d8c:	ee07 3a90 	vmov	s15, r3
   b9d90:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9da4 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   b9d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9d98:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9d9c:	4770      	bx	lr
    }
    return 0.0f;
   b9d9e:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9da8 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   b9da2:	4770      	bx	lr
   b9da4:	42c80000 	.word	0x42c80000
   b9da8:	00000000 	.word	0x00000000

000b9dac <_ZNK10WiFiSignalcvaEv>:
}
   b9dac:	f990 0004 	ldrsb.w	r0, [r0, #4]
   b9db0:	4770      	bx	lr

000b9db2 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b9db2:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   b9db4:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b9db6:	4606      	mov	r6, r0
    inf_ = inf;
   b9db8:	f100 050c 	add.w	r5, r0, #12
   b9dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9dc0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9dc4:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   b9dc8:	6933      	ldr	r3, [r6, #16]
   b9dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9dce:	bf0e      	itee	eq
   b9dd0:	2302      	moveq	r3, #2
   b9dd2:	2264      	movne	r2, #100	; 0x64
   b9dd4:	fb93 f3f2 	sdivne	r3, r3, r2
   b9dd8:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b9dda:	69b3      	ldr	r3, [r6, #24]
   b9ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9de0:	bf0c      	ite	eq
   b9de2:	2300      	moveq	r3, #0
   b9de4:	2264      	movne	r2, #100	; 0x64
}
   b9de6:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b9dea:	bf18      	it	ne
   b9dec:	fb93 f3f2 	sdivne	r3, r3, r2
   b9df0:	60b3      	str	r3, [r6, #8]
}
   b9df2:	bd70      	pop	{r4, r5, r6, pc}

000b9df4 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   b9df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   b9df8:	4b16      	ldr	r3, [pc, #88]	; (b9e54 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   b9dfa:	6003      	str	r3, [r0, #0]
   b9dfc:	2500      	movs	r5, #0
   b9dfe:	460f      	mov	r7, r1
   b9e00:	f04f 0802 	mov.w	r8, #2
   b9e04:	2618      	movs	r6, #24
   b9e06:	e9c0 8501 	strd	r8, r5, [r0, #4]
   b9e0a:	b086      	sub	sp, #24
   b9e0c:	4632      	mov	r2, r6
   b9e0e:	4629      	mov	r1, r5
   b9e10:	4604      	mov	r4, r0
   b9e12:	300c      	adds	r0, #12
   b9e14:	f000 fff7 	bl	bae06 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b9e18:	6878      	ldr	r0, [r7, #4]
   b9e1a:	462a      	mov	r2, r5
   b9e1c:	4629      	mov	r1, r5
   b9e1e:	f7fd f88d 	bl	b6f3c <network_ready>
   b9e22:	b180      	cbz	r0, b9e46 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
   b9e24:	4632      	mov	r2, r6
   b9e26:	4629      	mov	r1, r5
   b9e28:	4668      	mov	r0, sp
   b9e2a:	f000 ffec 	bl	bae06 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b9e2e:	462a      	mov	r2, r5
   b9e30:	4669      	mov	r1, sp
   b9e32:	4628      	mov	r0, r5
        info.size = sizeof(info);
   b9e34:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b9e38:	f7fd f804 	bl	b6e44 <wlan_connected_info>
        if (r == 0) {
   b9e3c:	b938      	cbnz	r0, b9e4e <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   b9e3e:	4669      	mov	r1, sp
   b9e40:	4620      	mov	r0, r4
   b9e42:	f7ff ffb6 	bl	b9db2 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
   b9e46:	4620      	mov	r0, r4
   b9e48:	b006      	add	sp, #24
   b9e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   b9e4e:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   b9e52:	e7f8      	b.n	b9e46 <_ZN5spark9WiFiClass4RSSIEv+0x52>
   b9e54:	000bda58 	.word	0x000bda58

000b9e58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9e58:	4b02      	ldr	r3, [pc, #8]	; (b9e64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9e5a:	2204      	movs	r2, #4
   b9e5c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9e5e:	4a02      	ldr	r2, [pc, #8]	; (b9e68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9e60:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9e62:	4770      	bx	lr
   b9e64:	2003e710 	.word	0x2003e710
   b9e68:	000bda1c 	.word	0x000bda1c

000b9e6c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9e6c:	2300      	movs	r3, #0
   b9e6e:	6840      	ldr	r0, [r0, #4]
   b9e70:	461a      	mov	r2, r3
   b9e72:	f7fd b84b 	b.w	b6f0c <network_connect>

000b9e76 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9e76:	6840      	ldr	r0, [r0, #4]
   b9e78:	2200      	movs	r2, #0
   b9e7a:	2102      	movs	r1, #2
   b9e7c:	f7fd b856 	b.w	b6f2c <network_disconnect>

000b9e80 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9e80:	2200      	movs	r2, #0
   b9e82:	6840      	ldr	r0, [r0, #4]
   b9e84:	4611      	mov	r1, r2
   b9e86:	f7fd b849 	b.w	b6f1c <network_connecting>

000b9e8a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9e8a:	2200      	movs	r2, #0
   b9e8c:	6840      	ldr	r0, [r0, #4]
   b9e8e:	4611      	mov	r1, r2
   b9e90:	f7fd b854 	b.w	b6f3c <network_ready>

000b9e94 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9e94:	2300      	movs	r3, #0
   b9e96:	6840      	ldr	r0, [r0, #4]
   b9e98:	461a      	mov	r2, r3
   b9e9a:	4619      	mov	r1, r3
   b9e9c:	f7fd b856 	b.w	b6f4c <network_on>

000b9ea0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9ea0:	2300      	movs	r3, #0
   b9ea2:	6840      	ldr	r0, [r0, #4]
   b9ea4:	461a      	mov	r2, r3
   b9ea6:	4619      	mov	r1, r3
   b9ea8:	f7fd b858 	b.w	b6f5c <network_off>

000b9eac <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9eac:	6840      	ldr	r0, [r0, #4]
   b9eae:	2100      	movs	r1, #0
   b9eb0:	f7fd b87c 	b.w	b6fac <network_is_on>

000b9eb4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9eb4:	6840      	ldr	r0, [r0, #4]
   b9eb6:	2100      	movs	r1, #0
   b9eb8:	f7fd b880 	b.w	b6fbc <network_is_off>

000b9ebc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9ebc:	6840      	ldr	r0, [r0, #4]
   b9ebe:	2200      	movs	r2, #0
   b9ec0:	f081 0101 	eor.w	r1, r1, #1
   b9ec4:	f7fd b852 	b.w	b6f6c <network_listen>

000b9ec8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9ec8:	6840      	ldr	r0, [r0, #4]
   b9eca:	2200      	movs	r2, #0
   b9ecc:	f7fd b85e 	b.w	b6f8c <network_set_listen_timeout>

000b9ed0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9ed0:	2200      	movs	r2, #0
   b9ed2:	6840      	ldr	r0, [r0, #4]
   b9ed4:	4611      	mov	r1, r2
   b9ed6:	f7fd b861 	b.w	b6f9c <network_get_listen_timeout>

000b9eda <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b9eda:	2200      	movs	r2, #0
   b9edc:	6840      	ldr	r0, [r0, #4]
   b9ede:	4611      	mov	r1, r2
   b9ee0:	f7fd b84c 	b.w	b6f7c <network_listening>

000b9ee4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9ee8:	b095      	sub	sp, #84	; 0x54
   b9eea:	4614      	mov	r4, r2
   b9eec:	460d      	mov	r5, r1
   b9eee:	4607      	mov	r7, r0
    IPAddress addr;
   b9ef0:	f7ff fa3a 	bl	b9368 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9ef4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9ef6:	221c      	movs	r2, #28
   b9ef8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9efa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9efc:	f000 ff83 	bl	bae06 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9f00:	2340      	movs	r3, #64	; 0x40
   b9f02:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9f04:	4620      	mov	r0, r4
   b9f06:	466b      	mov	r3, sp
   b9f08:	aa0c      	add	r2, sp, #48	; 0x30
   b9f0a:	2100      	movs	r1, #0
   b9f0c:	f7fc fd70 	bl	b69f0 <netdb_getaddrinfo>
    if (!r) {
   b9f10:	4604      	mov	r4, r0
   b9f12:	2800      	cmp	r0, #0
   b9f14:	d14b      	bne.n	b9fae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9f16:	4602      	mov	r2, r0
   b9f18:	2101      	movs	r1, #1
   b9f1a:	6868      	ldr	r0, [r5, #4]
   b9f1c:	f7fd f80e 	bl	b6f3c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9f20:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9f22:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9f24:	4622      	mov	r2, r4
   b9f26:	6868      	ldr	r0, [r5, #4]
   b9f28:	f7fd f808 	bl	b6f3c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9f2c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9f2e:	4681      	mov	r9, r0
        bool ok = false;
   b9f30:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9f32:	2e00      	cmp	r6, #0
   b9f34:	d03b      	beq.n	b9fae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9f36:	2900      	cmp	r1, #0
   b9f38:	d139      	bne.n	b9fae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9f3a:	6873      	ldr	r3, [r6, #4]
   b9f3c:	2b02      	cmp	r3, #2
   b9f3e:	d003      	beq.n	b9f48 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9f40:	2b0a      	cmp	r3, #10
   b9f42:	d011      	beq.n	b9f68 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9f44:	69f6      	ldr	r6, [r6, #28]
   b9f46:	e7f4      	b.n	b9f32 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9f48:	f1b8 0f00 	cmp.w	r8, #0
   b9f4c:	d0fa      	beq.n	b9f44 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9f4e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9f50:	a806      	add	r0, sp, #24
   b9f52:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9f54:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9f56:	f7ff fa53 	bl	b9400 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9f5c:	1d3c      	adds	r4, r7, #4
   b9f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9f60:	682b      	ldr	r3, [r5, #0]
   b9f62:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9f64:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9f66:	e7ed      	b.n	b9f44 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9f68:	f1b9 0f00 	cmp.w	r9, #0
   b9f6c:	d0ea      	beq.n	b9f44 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9f6e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9f70:	2210      	movs	r2, #16
   b9f72:	a801      	add	r0, sp, #4
   b9f74:	f000 ff47 	bl	bae06 <memset>
                    a.v = 6;
   b9f78:	2306      	movs	r3, #6
   b9f7a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9f7e:	ad01      	add	r5, sp, #4
   b9f80:	f104 0308 	add.w	r3, r4, #8
   b9f84:	3418      	adds	r4, #24
   b9f86:	6818      	ldr	r0, [r3, #0]
   b9f88:	6859      	ldr	r1, [r3, #4]
   b9f8a:	462a      	mov	r2, r5
   b9f8c:	c203      	stmia	r2!, {r0, r1}
   b9f8e:	3308      	adds	r3, #8
   b9f90:	42a3      	cmp	r3, r4
   b9f92:	4615      	mov	r5, r2
   b9f94:	d1f7      	bne.n	b9f86 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9f96:	a901      	add	r1, sp, #4
   b9f98:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9f9a:	ad07      	add	r5, sp, #28
   b9f9c:	f7ff f9f2 	bl	b9384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9fa2:	1d3c      	adds	r4, r7, #4
   b9fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9fa6:	682b      	ldr	r3, [r5, #0]
   b9fa8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9faa:	4649      	mov	r1, r9
   b9fac:	e7ca      	b.n	b9f44 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9fae:	9800      	ldr	r0, [sp, #0]
   b9fb0:	f7fc fd16 	bl	b69e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9fb4:	4638      	mov	r0, r7
   b9fb6:	b015      	add	sp, #84	; 0x54
   b9fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9fbc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9fbc:	4b02      	ldr	r3, [pc, #8]	; (b9fc8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9fbe:	4a03      	ldr	r2, [pc, #12]	; (b9fcc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9fc0:	601a      	str	r2, [r3, #0]
   b9fc2:	2200      	movs	r2, #0
   b9fc4:	605a      	str	r2, [r3, #4]

} // spark
   b9fc6:	4770      	bx	lr
   b9fc8:	2003e718 	.word	0x2003e718
   b9fcc:	000bda7c 	.word	0x000bda7c

000b9fd0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b9fd0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b9fd2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9fd4:	d902      	bls.n	b9fdc <pinAvailable+0xc>
    return false;
   b9fd6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9fd8:	b002      	add	sp, #8
   b9fda:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9fdc:	f1a0 030b 	sub.w	r3, r0, #11
   b9fe0:	2b02      	cmp	r3, #2
   b9fe2:	d81a      	bhi.n	ba01a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9fe4:	4c17      	ldr	r4, [pc, #92]	; (ba044 <pinAvailable+0x74>)
   b9fe6:	7821      	ldrb	r1, [r4, #0]
   b9fe8:	f3bf 8f5b 	dmb	ish
   b9fec:	f011 0101 	ands.w	r1, r1, #1
   b9ff0:	d10b      	bne.n	ba00a <pinAvailable+0x3a>
   b9ff2:	4620      	mov	r0, r4
   b9ff4:	9101      	str	r1, [sp, #4]
   b9ff6:	f7fa f854 	bl	b40a2 <__cxa_guard_acquire>
   b9ffa:	9901      	ldr	r1, [sp, #4]
   b9ffc:	b128      	cbz	r0, ba00a <pinAvailable+0x3a>
   b9ffe:	4812      	ldr	r0, [pc, #72]	; (ba048 <pinAvailable+0x78>)
   ba000:	f7fd f8ba 	bl	b7178 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba004:	4620      	mov	r0, r4
   ba006:	f7fa f851 	bl	b40ac <__cxa_guard_release>
   ba00a:	4b0f      	ldr	r3, [pc, #60]	; (ba048 <pinAvailable+0x78>)
   ba00c:	7818      	ldrb	r0, [r3, #0]
   ba00e:	f7fc fee1 	bl	b6dd4 <hal_spi_is_enabled>
   ba012:	2800      	cmp	r0, #0
   ba014:	d1df      	bne.n	b9fd6 <pinAvailable+0x6>
  return true; // 'pin' is available
   ba016:	2001      	movs	r0, #1
   ba018:	e7de      	b.n	b9fd8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba01a:	2801      	cmp	r0, #1
   ba01c:	d809      	bhi.n	ba032 <pinAvailable+0x62>
   ba01e:	f000 f881 	bl	ba124 <_Z19__fetch_global_Wirev>
   ba022:	2100      	movs	r1, #0
   ba024:	7c00      	ldrb	r0, [r0, #16]
   ba026:	f7fc fe8d 	bl	b6d44 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba02a:	f080 0001 	eor.w	r0, r0, #1
   ba02e:	b2c0      	uxtb	r0, r0
   ba030:	e7d2      	b.n	b9fd8 <pinAvailable+0x8>
   ba032:	3809      	subs	r0, #9
   ba034:	2801      	cmp	r0, #1
   ba036:	d8ee      	bhi.n	ba016 <pinAvailable+0x46>
   ba038:	f000 f834 	bl	ba0a4 <_Z22__fetch_global_Serial1v>
   ba03c:	7c00      	ldrb	r0, [r0, #16]
   ba03e:	f7fc fe41 	bl	b6cc4 <hal_usart_is_enabled>
   ba042:	e7f2      	b.n	ba02a <pinAvailable+0x5a>
   ba044:	2003e720 	.word	0x2003e720
   ba048:	2003e724 	.word	0x2003e724

000ba04c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba04c:	2823      	cmp	r0, #35	; 0x23
{
   ba04e:	b538      	push	{r3, r4, r5, lr}
   ba050:	4604      	mov	r4, r0
   ba052:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba054:	d80a      	bhi.n	ba06c <pinMode+0x20>
   ba056:	29ff      	cmp	r1, #255	; 0xff
   ba058:	d008      	beq.n	ba06c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba05a:	f7ff ffb9 	bl	b9fd0 <pinAvailable>
   ba05e:	b128      	cbz	r0, ba06c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   ba060:	4629      	mov	r1, r5
   ba062:	4620      	mov	r0, r4
}
   ba064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   ba068:	f7fc bcca 	b.w	b6a00 <HAL_Pin_Mode>
}
   ba06c:	bd38      	pop	{r3, r4, r5, pc}

000ba06e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba06e:	4770      	bx	lr

000ba070 <_Z20acquireSerial1Bufferv>:
{
   ba070:	b538      	push	{r3, r4, r5, lr}
   ba072:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba074:	2514      	movs	r5, #20
   ba076:	462a      	mov	r2, r5
   ba078:	2100      	movs	r1, #0
   ba07a:	f000 fec4 	bl	bae06 <memset>
   ba07e:	8025      	strh	r5, [r4, #0]
   ba080:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba082:	4907      	ldr	r1, [pc, #28]	; (ba0a0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba084:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba086:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba088:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba08a:	f000 f86f 	bl	ba16c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba08e:	4904      	ldr	r1, [pc, #16]	; (ba0a0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba090:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba092:	4628      	mov	r0, r5
   ba094:	f000 f86a 	bl	ba16c <_ZnajRKSt9nothrow_t>
    };
   ba098:	60e0      	str	r0, [r4, #12]
}
   ba09a:	4620      	mov	r0, r4
   ba09c:	bd38      	pop	{r3, r4, r5, pc}
   ba09e:	bf00      	nop
   ba0a0:	000bdab0 	.word	0x000bdab0

000ba0a4 <_Z22__fetch_global_Serial1v>:
{
   ba0a4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba0a6:	4d0e      	ldr	r5, [pc, #56]	; (ba0e0 <_Z22__fetch_global_Serial1v+0x3c>)
   ba0a8:	7829      	ldrb	r1, [r5, #0]
   ba0aa:	f3bf 8f5b 	dmb	ish
   ba0ae:	f011 0401 	ands.w	r4, r1, #1
{
   ba0b2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba0b4:	d111      	bne.n	ba0da <_Z22__fetch_global_Serial1v+0x36>
   ba0b6:	4628      	mov	r0, r5
   ba0b8:	f7f9 fff3 	bl	b40a2 <__cxa_guard_acquire>
   ba0bc:	b168      	cbz	r0, ba0da <_Z22__fetch_global_Serial1v+0x36>
   ba0be:	a801      	add	r0, sp, #4
   ba0c0:	f7ff ffd6 	bl	ba070 <_Z20acquireSerial1Bufferv>
   ba0c4:	aa01      	add	r2, sp, #4
   ba0c6:	4621      	mov	r1, r4
   ba0c8:	4806      	ldr	r0, [pc, #24]	; (ba0e4 <_Z22__fetch_global_Serial1v+0x40>)
   ba0ca:	f7ff fa93 	bl	b95f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba0ce:	4628      	mov	r0, r5
   ba0d0:	f7f9 ffec 	bl	b40ac <__cxa_guard_release>
   ba0d4:	4804      	ldr	r0, [pc, #16]	; (ba0e8 <_Z22__fetch_global_Serial1v+0x44>)
   ba0d6:	f000 fe51 	bl	bad7c <atexit>
    return serial1;
}
   ba0da:	4802      	ldr	r0, [pc, #8]	; (ba0e4 <_Z22__fetch_global_Serial1v+0x40>)
   ba0dc:	b007      	add	sp, #28
   ba0de:	bd30      	pop	{r4, r5, pc}
   ba0e0:	2003e72c 	.word	0x2003e72c
   ba0e4:	2003e730 	.word	0x2003e730
   ba0e8:	000ba06f 	.word	0x000ba06f

000ba0ec <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba0ec:	4770      	bx	lr
	...

000ba0f0 <_Z17acquireWireBufferv>:
{
   ba0f0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba0f2:	4b0a      	ldr	r3, [pc, #40]	; (ba11c <_Z17acquireWireBufferv+0x2c>)
   ba0f4:	6003      	str	r3, [r0, #0]
   ba0f6:	2301      	movs	r3, #1
{
   ba0f8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba0fa:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba0fc:	4908      	ldr	r1, [pc, #32]	; (ba120 <_Z17acquireWireBufferv+0x30>)
   ba0fe:	2020      	movs	r0, #32
   ba100:	f000 f834 	bl	ba16c <_ZnajRKSt9nothrow_t>
	};
   ba104:	2520      	movs	r5, #32
   ba106:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba108:	4905      	ldr	r1, [pc, #20]	; (ba120 <_Z17acquireWireBufferv+0x30>)
	};
   ba10a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba10c:	4628      	mov	r0, r5
   ba10e:	f000 f82d 	bl	ba16c <_ZnajRKSt9nothrow_t>
	};
   ba112:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   ba116:	4620      	mov	r0, r4
   ba118:	bd38      	pop	{r3, r4, r5, pc}
   ba11a:	bf00      	nop
   ba11c:	00010018 	.word	0x00010018
   ba120:	000bdab0 	.word	0x000bdab0

000ba124 <_Z19__fetch_global_Wirev>:
{
   ba124:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba126:	4d0e      	ldr	r5, [pc, #56]	; (ba160 <_Z19__fetch_global_Wirev+0x3c>)
   ba128:	7829      	ldrb	r1, [r5, #0]
   ba12a:	f3bf 8f5b 	dmb	ish
   ba12e:	f011 0401 	ands.w	r4, r1, #1
{
   ba132:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba134:	d111      	bne.n	ba15a <_Z19__fetch_global_Wirev+0x36>
   ba136:	4628      	mov	r0, r5
   ba138:	f7f9 ffb3 	bl	b40a2 <__cxa_guard_acquire>
   ba13c:	b168      	cbz	r0, ba15a <_Z19__fetch_global_Wirev+0x36>
   ba13e:	4668      	mov	r0, sp
   ba140:	f7ff ffd6 	bl	ba0f0 <_Z17acquireWireBufferv>
   ba144:	466a      	mov	r2, sp
   ba146:	4621      	mov	r1, r4
   ba148:	4806      	ldr	r0, [pc, #24]	; (ba164 <_Z19__fetch_global_Wirev+0x40>)
   ba14a:	f7ff faa7 	bl	b969c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba14e:	4628      	mov	r0, r5
   ba150:	f7f9 ffac 	bl	b40ac <__cxa_guard_release>
   ba154:	4804      	ldr	r0, [pc, #16]	; (ba168 <_Z19__fetch_global_Wirev+0x44>)
   ba156:	f000 fe11 	bl	bad7c <atexit>
	return wire;
}
   ba15a:	4802      	ldr	r0, [pc, #8]	; (ba164 <_Z19__fetch_global_Wirev+0x40>)
   ba15c:	b007      	add	sp, #28
   ba15e:	bd30      	pop	{r4, r5, pc}
   ba160:	2003e748 	.word	0x2003e748
   ba164:	2003e74c 	.word	0x2003e74c
   ba168:	000ba0ed 	.word	0x000ba0ed

000ba16c <_ZnajRKSt9nothrow_t>:
   ba16c:	f7f9 bf95 	b.w	b409a <_Znaj>

000ba170 <_ZSt25__throw_bad_function_callv>:
   ba170:	b508      	push	{r3, lr}
   ba172:	f7fc ff93 	bl	b709c <abort>
	...

000ba178 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba178:	4901      	ldr	r1, [pc, #4]	; (ba180 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba17a:	f000 b8f9 	b.w	ba370 <_ZNKSt9type_infoeqERKS_>
   ba17e:	bf00      	nop
   ba180:	000bdacc 	.word	0x000bdacc

000ba184 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba186:	2400      	movs	r4, #0
   ba188:	2310      	movs	r3, #16
   ba18a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba18e:	6803      	ldr	r3, [r0, #0]
   ba190:	4615      	mov	r5, r2
   ba192:	699e      	ldr	r6, [r3, #24]
   ba194:	6812      	ldr	r2, [r2, #0]
   ba196:	466b      	mov	r3, sp
   ba198:	e9cd 4400 	strd	r4, r4, [sp]
   ba19c:	47b0      	blx	r6
   ba19e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba1a2:	f003 0306 	and.w	r3, r3, #6
   ba1a6:	2b06      	cmp	r3, #6
   ba1a8:	bf03      	ittte	eq
   ba1aa:	9b00      	ldreq	r3, [sp, #0]
   ba1ac:	602b      	streq	r3, [r5, #0]
   ba1ae:	2001      	moveq	r0, #1
   ba1b0:	4620      	movne	r0, r4
   ba1b2:	b004      	add	sp, #16
   ba1b4:	bd70      	pop	{r4, r5, r6, pc}

000ba1b6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba1b6:	9800      	ldr	r0, [sp, #0]
   ba1b8:	4290      	cmp	r0, r2
   ba1ba:	bf14      	ite	ne
   ba1bc:	2001      	movne	r0, #1
   ba1be:	2006      	moveq	r0, #6
   ba1c0:	4770      	bx	lr
	...

000ba1c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba1c4:	b510      	push	{r4, lr}
   ba1c6:	4b03      	ldr	r3, [pc, #12]	; (ba1d4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba1c8:	6003      	str	r3, [r0, #0]
   ba1ca:	4604      	mov	r4, r0
   ba1cc:	f000 f8cd 	bl	ba36a <_ZNSt9type_infoD1Ev>
   ba1d0:	4620      	mov	r0, r4
   ba1d2:	bd10      	pop	{r4, pc}
   ba1d4:	000bdb0c 	.word	0x000bdb0c

000ba1d8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba1d8:	b510      	push	{r4, lr}
   ba1da:	4604      	mov	r4, r0
   ba1dc:	f7ff fff2 	bl	ba1c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba1e0:	4620      	mov	r0, r4
   ba1e2:	2108      	movs	r1, #8
   ba1e4:	f7f9 ff5b 	bl	b409e <_ZdlPvj>
   ba1e8:	4620      	mov	r0, r4
   ba1ea:	bd10      	pop	{r4, pc}

000ba1ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba1f0:	461f      	mov	r7, r3
   ba1f2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba1f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba1fa:	4598      	cmp	r8, r3
   ba1fc:	4606      	mov	r6, r0
   ba1fe:	4615      	mov	r5, r2
   ba200:	d107      	bne.n	ba212 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba202:	9907      	ldr	r1, [sp, #28]
   ba204:	f000 f8b4 	bl	ba370 <_ZNKSt9type_infoeqERKS_>
   ba208:	b118      	cbz	r0, ba212 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba20a:	7165      	strb	r5, [r4, #5]
   ba20c:	2000      	movs	r0, #0
   ba20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba212:	4639      	mov	r1, r7
   ba214:	4630      	mov	r0, r6
   ba216:	f000 f8ab 	bl	ba370 <_ZNKSt9type_infoeqERKS_>
   ba21a:	2800      	cmp	r0, #0
   ba21c:	d0f6      	beq.n	ba20c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba21e:	2301      	movs	r3, #1
   ba220:	f8c4 8000 	str.w	r8, [r4]
   ba224:	7125      	strb	r5, [r4, #4]
   ba226:	71a3      	strb	r3, [r4, #6]
   ba228:	e7f0      	b.n	ba20c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba22a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba22a:	b538      	push	{r3, r4, r5, lr}
   ba22c:	4615      	mov	r5, r2
   ba22e:	461c      	mov	r4, r3
   ba230:	f000 f89e 	bl	ba370 <_ZNKSt9type_infoeqERKS_>
   ba234:	b120      	cbz	r0, ba240 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba236:	2308      	movs	r3, #8
   ba238:	60e3      	str	r3, [r4, #12]
   ba23a:	2306      	movs	r3, #6
   ba23c:	6025      	str	r5, [r4, #0]
   ba23e:	7123      	strb	r3, [r4, #4]
   ba240:	bd38      	pop	{r3, r4, r5, pc}

000ba242 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba242:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba244:	4605      	mov	r5, r0
   ba246:	460c      	mov	r4, r1
   ba248:	9201      	str	r2, [sp, #4]
   ba24a:	461e      	mov	r6, r3
   ba24c:	f000 f890 	bl	ba370 <_ZNKSt9type_infoeqERKS_>
   ba250:	b950      	cbnz	r0, ba268 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba252:	2e03      	cmp	r6, #3
   ba254:	d808      	bhi.n	ba268 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba256:	6823      	ldr	r3, [r4, #0]
   ba258:	9a01      	ldr	r2, [sp, #4]
   ba25a:	695b      	ldr	r3, [r3, #20]
   ba25c:	4629      	mov	r1, r5
   ba25e:	4620      	mov	r0, r4
   ba260:	b002      	add	sp, #8
   ba262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba266:	4718      	bx	r3
   ba268:	b002      	add	sp, #8
   ba26a:	bd70      	pop	{r4, r5, r6, pc}

000ba26c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba26c:	b510      	push	{r4, lr}
   ba26e:	4b03      	ldr	r3, [pc, #12]	; (ba27c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba270:	6003      	str	r3, [r0, #0]
   ba272:	4604      	mov	r4, r0
   ba274:	f7ff ffa6 	bl	ba1c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba278:	4620      	mov	r0, r4
   ba27a:	bd10      	pop	{r4, pc}
   ba27c:	000bdb6c 	.word	0x000bdb6c

000ba280 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba280:	b510      	push	{r4, lr}
   ba282:	4604      	mov	r4, r0
   ba284:	f7ff fff2 	bl	ba26c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba288:	4620      	mov	r0, r4
   ba28a:	210c      	movs	r1, #12
   ba28c:	f7f9 ff07 	bl	b409e <_ZdlPvj>
   ba290:	4620      	mov	r0, r4
   ba292:	bd10      	pop	{r4, pc}

000ba294 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba296:	9f08      	ldr	r7, [sp, #32]
   ba298:	4297      	cmp	r7, r2
   ba29a:	4605      	mov	r5, r0
   ba29c:	460e      	mov	r6, r1
   ba29e:	4614      	mov	r4, r2
   ba2a0:	d00a      	beq.n	ba2b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba2a2:	68a8      	ldr	r0, [r5, #8]
   ba2a4:	6802      	ldr	r2, [r0, #0]
   ba2a6:	9708      	str	r7, [sp, #32]
   ba2a8:	6a15      	ldr	r5, [r2, #32]
   ba2aa:	4631      	mov	r1, r6
   ba2ac:	4622      	mov	r2, r4
   ba2ae:	46ac      	mov	ip, r5
   ba2b0:	b003      	add	sp, #12
   ba2b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba2b6:	4760      	bx	ip
   ba2b8:	4619      	mov	r1, r3
   ba2ba:	9301      	str	r3, [sp, #4]
   ba2bc:	f000 f858 	bl	ba370 <_ZNKSt9type_infoeqERKS_>
   ba2c0:	9b01      	ldr	r3, [sp, #4]
   ba2c2:	2800      	cmp	r0, #0
   ba2c4:	d0ed      	beq.n	ba2a2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba2c6:	2006      	movs	r0, #6
   ba2c8:	b003      	add	sp, #12
   ba2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba2cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba2cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba2d0:	460d      	mov	r5, r1
   ba2d2:	4619      	mov	r1, r3
   ba2d4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba2d8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba2dc:	4681      	mov	r9, r0
   ba2de:	4617      	mov	r7, r2
   ba2e0:	4698      	mov	r8, r3
   ba2e2:	f000 f845 	bl	ba370 <_ZNKSt9type_infoeqERKS_>
   ba2e6:	b190      	cbz	r0, ba30e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba2e8:	2d00      	cmp	r5, #0
   ba2ea:	6034      	str	r4, [r6, #0]
   ba2ec:	7137      	strb	r7, [r6, #4]
   ba2ee:	db09      	blt.n	ba304 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba2f0:	1961      	adds	r1, r4, r5
   ba2f2:	458a      	cmp	sl, r1
   ba2f4:	bf0c      	ite	eq
   ba2f6:	2106      	moveq	r1, #6
   ba2f8:	2101      	movne	r1, #1
   ba2fa:	71b1      	strb	r1, [r6, #6]
   ba2fc:	2000      	movs	r0, #0
   ba2fe:	b001      	add	sp, #4
   ba300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba304:	3502      	adds	r5, #2
   ba306:	d1f9      	bne.n	ba2fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba308:	2301      	movs	r3, #1
   ba30a:	71b3      	strb	r3, [r6, #6]
   ba30c:	e7f6      	b.n	ba2fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba30e:	4554      	cmp	r4, sl
   ba310:	d106      	bne.n	ba320 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba312:	4659      	mov	r1, fp
   ba314:	4648      	mov	r0, r9
   ba316:	f000 f82b 	bl	ba370 <_ZNKSt9type_infoeqERKS_>
   ba31a:	b108      	cbz	r0, ba320 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba31c:	7177      	strb	r7, [r6, #5]
   ba31e:	e7ed      	b.n	ba2fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba320:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba324:	6803      	ldr	r3, [r0, #0]
   ba326:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba32a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba32e:	69dc      	ldr	r4, [r3, #28]
   ba330:	463a      	mov	r2, r7
   ba332:	4643      	mov	r3, r8
   ba334:	4629      	mov	r1, r5
   ba336:	46a4      	mov	ip, r4
   ba338:	b001      	add	sp, #4
   ba33a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba33e:	4760      	bx	ip

000ba340 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba344:	4607      	mov	r7, r0
   ba346:	460c      	mov	r4, r1
   ba348:	4615      	mov	r5, r2
   ba34a:	461e      	mov	r6, r3
   ba34c:	f7ff ff6d 	bl	ba22a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba350:	b948      	cbnz	r0, ba366 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba352:	68b8      	ldr	r0, [r7, #8]
   ba354:	6803      	ldr	r3, [r0, #0]
   ba356:	699f      	ldr	r7, [r3, #24]
   ba358:	462a      	mov	r2, r5
   ba35a:	4633      	mov	r3, r6
   ba35c:	4621      	mov	r1, r4
   ba35e:	46bc      	mov	ip, r7
   ba360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba364:	4760      	bx	ip
   ba366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba36a <_ZNSt9type_infoD1Ev>:
   ba36a:	4770      	bx	lr

000ba36c <_ZNKSt9type_info14__is_pointer_pEv>:
   ba36c:	2000      	movs	r0, #0
   ba36e:	4770      	bx	lr

000ba370 <_ZNKSt9type_infoeqERKS_>:
   ba370:	4281      	cmp	r1, r0
   ba372:	b508      	push	{r3, lr}
   ba374:	d00e      	beq.n	ba394 <_ZNKSt9type_infoeqERKS_+0x24>
   ba376:	6840      	ldr	r0, [r0, #4]
   ba378:	7803      	ldrb	r3, [r0, #0]
   ba37a:	2b2a      	cmp	r3, #42	; 0x2a
   ba37c:	d00c      	beq.n	ba398 <_ZNKSt9type_infoeqERKS_+0x28>
   ba37e:	6849      	ldr	r1, [r1, #4]
   ba380:	780b      	ldrb	r3, [r1, #0]
   ba382:	2b2a      	cmp	r3, #42	; 0x2a
   ba384:	bf08      	it	eq
   ba386:	3101      	addeq	r1, #1
   ba388:	f000 fd83 	bl	bae92 <strcmp>
   ba38c:	fab0 f080 	clz	r0, r0
   ba390:	0940      	lsrs	r0, r0, #5
   ba392:	bd08      	pop	{r3, pc}
   ba394:	2001      	movs	r0, #1
   ba396:	e7fc      	b.n	ba392 <_ZNKSt9type_infoeqERKS_+0x22>
   ba398:	2000      	movs	r0, #0
   ba39a:	e7fa      	b.n	ba392 <_ZNKSt9type_infoeqERKS_+0x22>

000ba39c <__aeabi_drsub>:
   ba39c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba3a0:	e002      	b.n	ba3a8 <__adddf3>
   ba3a2:	bf00      	nop

000ba3a4 <__aeabi_dsub>:
   ba3a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba3a8 <__adddf3>:
   ba3a8:	b530      	push	{r4, r5, lr}
   ba3aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba3ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba3b2:	ea94 0f05 	teq	r4, r5
   ba3b6:	bf08      	it	eq
   ba3b8:	ea90 0f02 	teqeq	r0, r2
   ba3bc:	bf1f      	itttt	ne
   ba3be:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba3c2:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba3c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba3ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba3ce:	f000 80e2 	beq.w	ba596 <__adddf3+0x1ee>
   ba3d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba3d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba3da:	bfb8      	it	lt
   ba3dc:	426d      	neglt	r5, r5
   ba3de:	dd0c      	ble.n	ba3fa <__adddf3+0x52>
   ba3e0:	442c      	add	r4, r5
   ba3e2:	ea80 0202 	eor.w	r2, r0, r2
   ba3e6:	ea81 0303 	eor.w	r3, r1, r3
   ba3ea:	ea82 0000 	eor.w	r0, r2, r0
   ba3ee:	ea83 0101 	eor.w	r1, r3, r1
   ba3f2:	ea80 0202 	eor.w	r2, r0, r2
   ba3f6:	ea81 0303 	eor.w	r3, r1, r3
   ba3fa:	2d36      	cmp	r5, #54	; 0x36
   ba3fc:	bf88      	it	hi
   ba3fe:	bd30      	pophi	{r4, r5, pc}
   ba400:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba404:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba408:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba40c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba410:	d002      	beq.n	ba418 <__adddf3+0x70>
   ba412:	4240      	negs	r0, r0
   ba414:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba418:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba41c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba420:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba424:	d002      	beq.n	ba42c <__adddf3+0x84>
   ba426:	4252      	negs	r2, r2
   ba428:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba42c:	ea94 0f05 	teq	r4, r5
   ba430:	f000 80a7 	beq.w	ba582 <__adddf3+0x1da>
   ba434:	f1a4 0401 	sub.w	r4, r4, #1
   ba438:	f1d5 0e20 	rsbs	lr, r5, #32
   ba43c:	db0d      	blt.n	ba45a <__adddf3+0xb2>
   ba43e:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba442:	fa22 f205 	lsr.w	r2, r2, r5
   ba446:	1880      	adds	r0, r0, r2
   ba448:	f141 0100 	adc.w	r1, r1, #0
   ba44c:	fa03 f20e 	lsl.w	r2, r3, lr
   ba450:	1880      	adds	r0, r0, r2
   ba452:	fa43 f305 	asr.w	r3, r3, r5
   ba456:	4159      	adcs	r1, r3
   ba458:	e00e      	b.n	ba478 <__adddf3+0xd0>
   ba45a:	f1a5 0520 	sub.w	r5, r5, #32
   ba45e:	f10e 0e20 	add.w	lr, lr, #32
   ba462:	2a01      	cmp	r2, #1
   ba464:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba468:	bf28      	it	cs
   ba46a:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba46e:	fa43 f305 	asr.w	r3, r3, r5
   ba472:	18c0      	adds	r0, r0, r3
   ba474:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba47c:	d507      	bpl.n	ba48e <__adddf3+0xe6>
   ba47e:	f04f 0e00 	mov.w	lr, #0
   ba482:	f1dc 0c00 	rsbs	ip, ip, #0
   ba486:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba48a:	eb6e 0101 	sbc.w	r1, lr, r1
   ba48e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba492:	d31b      	bcc.n	ba4cc <__adddf3+0x124>
   ba494:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba498:	d30c      	bcc.n	ba4b4 <__adddf3+0x10c>
   ba49a:	0849      	lsrs	r1, r1, #1
   ba49c:	ea5f 0030 	movs.w	r0, r0, rrx
   ba4a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba4a4:	f104 0401 	add.w	r4, r4, #1
   ba4a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba4ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba4b0:	f080 809a 	bcs.w	ba5e8 <__adddf3+0x240>
   ba4b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba4b8:	bf08      	it	eq
   ba4ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba4be:	f150 0000 	adcs.w	r0, r0, #0
   ba4c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba4c6:	ea41 0105 	orr.w	r1, r1, r5
   ba4ca:	bd30      	pop	{r4, r5, pc}
   ba4cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba4d0:	4140      	adcs	r0, r0
   ba4d2:	eb41 0101 	adc.w	r1, r1, r1
   ba4d6:	3c01      	subs	r4, #1
   ba4d8:	bf28      	it	cs
   ba4da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba4de:	d2e9      	bcs.n	ba4b4 <__adddf3+0x10c>
   ba4e0:	f091 0f00 	teq	r1, #0
   ba4e4:	bf04      	itt	eq
   ba4e6:	4601      	moveq	r1, r0
   ba4e8:	2000      	moveq	r0, #0
   ba4ea:	fab1 f381 	clz	r3, r1
   ba4ee:	bf08      	it	eq
   ba4f0:	3320      	addeq	r3, #32
   ba4f2:	f1a3 030b 	sub.w	r3, r3, #11
   ba4f6:	f1b3 0220 	subs.w	r2, r3, #32
   ba4fa:	da0c      	bge.n	ba516 <__adddf3+0x16e>
   ba4fc:	320c      	adds	r2, #12
   ba4fe:	dd08      	ble.n	ba512 <__adddf3+0x16a>
   ba500:	f102 0c14 	add.w	ip, r2, #20
   ba504:	f1c2 020c 	rsb	r2, r2, #12
   ba508:	fa01 f00c 	lsl.w	r0, r1, ip
   ba50c:	fa21 f102 	lsr.w	r1, r1, r2
   ba510:	e00c      	b.n	ba52c <__adddf3+0x184>
   ba512:	f102 0214 	add.w	r2, r2, #20
   ba516:	bfd8      	it	le
   ba518:	f1c2 0c20 	rsble	ip, r2, #32
   ba51c:	fa01 f102 	lsl.w	r1, r1, r2
   ba520:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba524:	bfdc      	itt	le
   ba526:	ea41 010c 	orrle.w	r1, r1, ip
   ba52a:	4090      	lslle	r0, r2
   ba52c:	1ae4      	subs	r4, r4, r3
   ba52e:	bfa2      	ittt	ge
   ba530:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba534:	4329      	orrge	r1, r5
   ba536:	bd30      	popge	{r4, r5, pc}
   ba538:	ea6f 0404 	mvn.w	r4, r4
   ba53c:	3c1f      	subs	r4, #31
   ba53e:	da1c      	bge.n	ba57a <__adddf3+0x1d2>
   ba540:	340c      	adds	r4, #12
   ba542:	dc0e      	bgt.n	ba562 <__adddf3+0x1ba>
   ba544:	f104 0414 	add.w	r4, r4, #20
   ba548:	f1c4 0220 	rsb	r2, r4, #32
   ba54c:	fa20 f004 	lsr.w	r0, r0, r4
   ba550:	fa01 f302 	lsl.w	r3, r1, r2
   ba554:	ea40 0003 	orr.w	r0, r0, r3
   ba558:	fa21 f304 	lsr.w	r3, r1, r4
   ba55c:	ea45 0103 	orr.w	r1, r5, r3
   ba560:	bd30      	pop	{r4, r5, pc}
   ba562:	f1c4 040c 	rsb	r4, r4, #12
   ba566:	f1c4 0220 	rsb	r2, r4, #32
   ba56a:	fa20 f002 	lsr.w	r0, r0, r2
   ba56e:	fa01 f304 	lsl.w	r3, r1, r4
   ba572:	ea40 0003 	orr.w	r0, r0, r3
   ba576:	4629      	mov	r1, r5
   ba578:	bd30      	pop	{r4, r5, pc}
   ba57a:	fa21 f004 	lsr.w	r0, r1, r4
   ba57e:	4629      	mov	r1, r5
   ba580:	bd30      	pop	{r4, r5, pc}
   ba582:	f094 0f00 	teq	r4, #0
   ba586:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba58a:	bf06      	itte	eq
   ba58c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba590:	3401      	addeq	r4, #1
   ba592:	3d01      	subne	r5, #1
   ba594:	e74e      	b.n	ba434 <__adddf3+0x8c>
   ba596:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba59a:	bf18      	it	ne
   ba59c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba5a0:	d029      	beq.n	ba5f6 <__adddf3+0x24e>
   ba5a2:	ea94 0f05 	teq	r4, r5
   ba5a6:	bf08      	it	eq
   ba5a8:	ea90 0f02 	teqeq	r0, r2
   ba5ac:	d005      	beq.n	ba5ba <__adddf3+0x212>
   ba5ae:	ea54 0c00 	orrs.w	ip, r4, r0
   ba5b2:	bf04      	itt	eq
   ba5b4:	4619      	moveq	r1, r3
   ba5b6:	4610      	moveq	r0, r2
   ba5b8:	bd30      	pop	{r4, r5, pc}
   ba5ba:	ea91 0f03 	teq	r1, r3
   ba5be:	bf1e      	ittt	ne
   ba5c0:	2100      	movne	r1, #0
   ba5c2:	2000      	movne	r0, #0
   ba5c4:	bd30      	popne	{r4, r5, pc}
   ba5c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba5ca:	d105      	bne.n	ba5d8 <__adddf3+0x230>
   ba5cc:	0040      	lsls	r0, r0, #1
   ba5ce:	4149      	adcs	r1, r1
   ba5d0:	bf28      	it	cs
   ba5d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba5d6:	bd30      	pop	{r4, r5, pc}
   ba5d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba5dc:	bf3c      	itt	cc
   ba5de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba5e2:	bd30      	popcc	{r4, r5, pc}
   ba5e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba5e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba5ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba5f0:	f04f 0000 	mov.w	r0, #0
   ba5f4:	bd30      	pop	{r4, r5, pc}
   ba5f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba5fa:	bf1a      	itte	ne
   ba5fc:	4619      	movne	r1, r3
   ba5fe:	4610      	movne	r0, r2
   ba600:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba604:	bf1c      	itt	ne
   ba606:	460b      	movne	r3, r1
   ba608:	4602      	movne	r2, r0
   ba60a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba60e:	bf06      	itte	eq
   ba610:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba614:	ea91 0f03 	teqeq	r1, r3
   ba618:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba61c:	bd30      	pop	{r4, r5, pc}
   ba61e:	bf00      	nop

000ba620 <__aeabi_ui2d>:
   ba620:	f090 0f00 	teq	r0, #0
   ba624:	bf04      	itt	eq
   ba626:	2100      	moveq	r1, #0
   ba628:	4770      	bxeq	lr
   ba62a:	b530      	push	{r4, r5, lr}
   ba62c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba630:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba634:	f04f 0500 	mov.w	r5, #0
   ba638:	f04f 0100 	mov.w	r1, #0
   ba63c:	e750      	b.n	ba4e0 <__adddf3+0x138>
   ba63e:	bf00      	nop

000ba640 <__aeabi_i2d>:
   ba640:	f090 0f00 	teq	r0, #0
   ba644:	bf04      	itt	eq
   ba646:	2100      	moveq	r1, #0
   ba648:	4770      	bxeq	lr
   ba64a:	b530      	push	{r4, r5, lr}
   ba64c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba650:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba654:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba658:	bf48      	it	mi
   ba65a:	4240      	negmi	r0, r0
   ba65c:	f04f 0100 	mov.w	r1, #0
   ba660:	e73e      	b.n	ba4e0 <__adddf3+0x138>
   ba662:	bf00      	nop

000ba664 <__aeabi_f2d>:
   ba664:	0042      	lsls	r2, r0, #1
   ba666:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba66a:	ea4f 0131 	mov.w	r1, r1, rrx
   ba66e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba672:	bf1f      	itttt	ne
   ba674:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba678:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba67c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba680:	4770      	bxne	lr
   ba682:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba686:	bf08      	it	eq
   ba688:	4770      	bxeq	lr
   ba68a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba68e:	bf04      	itt	eq
   ba690:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba694:	4770      	bxeq	lr
   ba696:	b530      	push	{r4, r5, lr}
   ba698:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba69c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba6a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba6a4:	e71c      	b.n	ba4e0 <__adddf3+0x138>
   ba6a6:	bf00      	nop

000ba6a8 <__aeabi_ul2d>:
   ba6a8:	ea50 0201 	orrs.w	r2, r0, r1
   ba6ac:	bf08      	it	eq
   ba6ae:	4770      	bxeq	lr
   ba6b0:	b530      	push	{r4, r5, lr}
   ba6b2:	f04f 0500 	mov.w	r5, #0
   ba6b6:	e00a      	b.n	ba6ce <__aeabi_l2d+0x16>

000ba6b8 <__aeabi_l2d>:
   ba6b8:	ea50 0201 	orrs.w	r2, r0, r1
   ba6bc:	bf08      	it	eq
   ba6be:	4770      	bxeq	lr
   ba6c0:	b530      	push	{r4, r5, lr}
   ba6c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba6c6:	d502      	bpl.n	ba6ce <__aeabi_l2d+0x16>
   ba6c8:	4240      	negs	r0, r0
   ba6ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba6ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba6d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba6d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba6da:	f43f aed8 	beq.w	ba48e <__adddf3+0xe6>
   ba6de:	f04f 0203 	mov.w	r2, #3
   ba6e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba6e6:	bf18      	it	ne
   ba6e8:	3203      	addne	r2, #3
   ba6ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba6ee:	bf18      	it	ne
   ba6f0:	3203      	addne	r2, #3
   ba6f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba6f6:	f1c2 0320 	rsb	r3, r2, #32
   ba6fa:	fa00 fc03 	lsl.w	ip, r0, r3
   ba6fe:	fa20 f002 	lsr.w	r0, r0, r2
   ba702:	fa01 fe03 	lsl.w	lr, r1, r3
   ba706:	ea40 000e 	orr.w	r0, r0, lr
   ba70a:	fa21 f102 	lsr.w	r1, r1, r2
   ba70e:	4414      	add	r4, r2
   ba710:	e6bd      	b.n	ba48e <__adddf3+0xe6>
   ba712:	bf00      	nop

000ba714 <__aeabi_dmul>:
   ba714:	b570      	push	{r4, r5, r6, lr}
   ba716:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba71a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba71e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba722:	bf1d      	ittte	ne
   ba724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba728:	ea94 0f0c 	teqne	r4, ip
   ba72c:	ea95 0f0c 	teqne	r5, ip
   ba730:	f000 f8de 	bleq	ba8f0 <__aeabi_dmul+0x1dc>
   ba734:	442c      	add	r4, r5
   ba736:	ea81 0603 	eor.w	r6, r1, r3
   ba73a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba73e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba742:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba746:	bf18      	it	ne
   ba748:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba74c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba754:	d038      	beq.n	ba7c8 <__aeabi_dmul+0xb4>
   ba756:	fba0 ce02 	umull	ip, lr, r0, r2
   ba75a:	f04f 0500 	mov.w	r5, #0
   ba75e:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba762:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba766:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba76a:	f04f 0600 	mov.w	r6, #0
   ba76e:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba772:	f09c 0f00 	teq	ip, #0
   ba776:	bf18      	it	ne
   ba778:	f04e 0e01 	orrne.w	lr, lr, #1
   ba77c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba780:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba784:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba788:	d204      	bcs.n	ba794 <__aeabi_dmul+0x80>
   ba78a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba78e:	416d      	adcs	r5, r5
   ba790:	eb46 0606 	adc.w	r6, r6, r6
   ba794:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba798:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba79c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba7a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba7a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba7a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba7ac:	bf88      	it	hi
   ba7ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba7b2:	d81e      	bhi.n	ba7f2 <__aeabi_dmul+0xde>
   ba7b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba7b8:	bf08      	it	eq
   ba7ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba7be:	f150 0000 	adcs.w	r0, r0, #0
   ba7c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba7c6:	bd70      	pop	{r4, r5, r6, pc}
   ba7c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba7cc:	ea46 0101 	orr.w	r1, r6, r1
   ba7d0:	ea40 0002 	orr.w	r0, r0, r2
   ba7d4:	ea81 0103 	eor.w	r1, r1, r3
   ba7d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba7dc:	bfc2      	ittt	gt
   ba7de:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba7e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba7e6:	bd70      	popgt	{r4, r5, r6, pc}
   ba7e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba7ec:	f04f 0e00 	mov.w	lr, #0
   ba7f0:	3c01      	subs	r4, #1
   ba7f2:	f300 80ab 	bgt.w	ba94c <__aeabi_dmul+0x238>
   ba7f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba7fa:	bfde      	ittt	le
   ba7fc:	2000      	movle	r0, #0
   ba7fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba802:	bd70      	pople	{r4, r5, r6, pc}
   ba804:	f1c4 0400 	rsb	r4, r4, #0
   ba808:	3c20      	subs	r4, #32
   ba80a:	da35      	bge.n	ba878 <__aeabi_dmul+0x164>
   ba80c:	340c      	adds	r4, #12
   ba80e:	dc1b      	bgt.n	ba848 <__aeabi_dmul+0x134>
   ba810:	f104 0414 	add.w	r4, r4, #20
   ba814:	f1c4 0520 	rsb	r5, r4, #32
   ba818:	fa00 f305 	lsl.w	r3, r0, r5
   ba81c:	fa20 f004 	lsr.w	r0, r0, r4
   ba820:	fa01 f205 	lsl.w	r2, r1, r5
   ba824:	ea40 0002 	orr.w	r0, r0, r2
   ba828:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba82c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba830:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba834:	fa21 f604 	lsr.w	r6, r1, r4
   ba838:	eb42 0106 	adc.w	r1, r2, r6
   ba83c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba840:	bf08      	it	eq
   ba842:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba846:	bd70      	pop	{r4, r5, r6, pc}
   ba848:	f1c4 040c 	rsb	r4, r4, #12
   ba84c:	f1c4 0520 	rsb	r5, r4, #32
   ba850:	fa00 f304 	lsl.w	r3, r0, r4
   ba854:	fa20 f005 	lsr.w	r0, r0, r5
   ba858:	fa01 f204 	lsl.w	r2, r1, r4
   ba85c:	ea40 0002 	orr.w	r0, r0, r2
   ba860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba864:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba868:	f141 0100 	adc.w	r1, r1, #0
   ba86c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba870:	bf08      	it	eq
   ba872:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba876:	bd70      	pop	{r4, r5, r6, pc}
   ba878:	f1c4 0520 	rsb	r5, r4, #32
   ba87c:	fa00 f205 	lsl.w	r2, r0, r5
   ba880:	ea4e 0e02 	orr.w	lr, lr, r2
   ba884:	fa20 f304 	lsr.w	r3, r0, r4
   ba888:	fa01 f205 	lsl.w	r2, r1, r5
   ba88c:	ea43 0302 	orr.w	r3, r3, r2
   ba890:	fa21 f004 	lsr.w	r0, r1, r4
   ba894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba898:	fa21 f204 	lsr.w	r2, r1, r4
   ba89c:	ea20 0002 	bic.w	r0, r0, r2
   ba8a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba8a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba8a8:	bf08      	it	eq
   ba8aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba8ae:	bd70      	pop	{r4, r5, r6, pc}
   ba8b0:	f094 0f00 	teq	r4, #0
   ba8b4:	d10f      	bne.n	ba8d6 <__aeabi_dmul+0x1c2>
   ba8b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba8ba:	0040      	lsls	r0, r0, #1
   ba8bc:	eb41 0101 	adc.w	r1, r1, r1
   ba8c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba8c4:	bf08      	it	eq
   ba8c6:	3c01      	subeq	r4, #1
   ba8c8:	d0f7      	beq.n	ba8ba <__aeabi_dmul+0x1a6>
   ba8ca:	ea41 0106 	orr.w	r1, r1, r6
   ba8ce:	f095 0f00 	teq	r5, #0
   ba8d2:	bf18      	it	ne
   ba8d4:	4770      	bxne	lr
   ba8d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba8da:	0052      	lsls	r2, r2, #1
   ba8dc:	eb43 0303 	adc.w	r3, r3, r3
   ba8e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba8e4:	bf08      	it	eq
   ba8e6:	3d01      	subeq	r5, #1
   ba8e8:	d0f7      	beq.n	ba8da <__aeabi_dmul+0x1c6>
   ba8ea:	ea43 0306 	orr.w	r3, r3, r6
   ba8ee:	4770      	bx	lr
   ba8f0:	ea94 0f0c 	teq	r4, ip
   ba8f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba8f8:	bf18      	it	ne
   ba8fa:	ea95 0f0c 	teqne	r5, ip
   ba8fe:	d00c      	beq.n	ba91a <__aeabi_dmul+0x206>
   ba900:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba904:	bf18      	it	ne
   ba906:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba90a:	d1d1      	bne.n	ba8b0 <__aeabi_dmul+0x19c>
   ba90c:	ea81 0103 	eor.w	r1, r1, r3
   ba910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba914:	f04f 0000 	mov.w	r0, #0
   ba918:	bd70      	pop	{r4, r5, r6, pc}
   ba91a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba91e:	bf06      	itte	eq
   ba920:	4610      	moveq	r0, r2
   ba922:	4619      	moveq	r1, r3
   ba924:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba928:	d019      	beq.n	ba95e <__aeabi_dmul+0x24a>
   ba92a:	ea94 0f0c 	teq	r4, ip
   ba92e:	d102      	bne.n	ba936 <__aeabi_dmul+0x222>
   ba930:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba934:	d113      	bne.n	ba95e <__aeabi_dmul+0x24a>
   ba936:	ea95 0f0c 	teq	r5, ip
   ba93a:	d105      	bne.n	ba948 <__aeabi_dmul+0x234>
   ba93c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba940:	bf1c      	itt	ne
   ba942:	4610      	movne	r0, r2
   ba944:	4619      	movne	r1, r3
   ba946:	d10a      	bne.n	ba95e <__aeabi_dmul+0x24a>
   ba948:	ea81 0103 	eor.w	r1, r1, r3
   ba94c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba950:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba954:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba958:	f04f 0000 	mov.w	r0, #0
   ba95c:	bd70      	pop	{r4, r5, r6, pc}
   ba95e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba962:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba966:	bd70      	pop	{r4, r5, r6, pc}

000ba968 <__aeabi_ddiv>:
   ba968:	b570      	push	{r4, r5, r6, lr}
   ba96a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba96e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba972:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba976:	bf1d      	ittte	ne
   ba978:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba97c:	ea94 0f0c 	teqne	r4, ip
   ba980:	ea95 0f0c 	teqne	r5, ip
   ba984:	f000 f8a7 	bleq	baad6 <__aeabi_ddiv+0x16e>
   ba988:	eba4 0405 	sub.w	r4, r4, r5
   ba98c:	ea81 0e03 	eor.w	lr, r1, r3
   ba990:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba994:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba998:	f000 8088 	beq.w	baaac <__aeabi_ddiv+0x144>
   ba99c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba9a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba9a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba9a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba9ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba9b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba9b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba9b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba9bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba9c0:	429d      	cmp	r5, r3
   ba9c2:	bf08      	it	eq
   ba9c4:	4296      	cmpeq	r6, r2
   ba9c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba9ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba9ce:	d202      	bcs.n	ba9d6 <__aeabi_ddiv+0x6e>
   ba9d0:	085b      	lsrs	r3, r3, #1
   ba9d2:	ea4f 0232 	mov.w	r2, r2, rrx
   ba9d6:	1ab6      	subs	r6, r6, r2
   ba9d8:	eb65 0503 	sbc.w	r5, r5, r3
   ba9dc:	085b      	lsrs	r3, r3, #1
   ba9de:	ea4f 0232 	mov.w	r2, r2, rrx
   ba9e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba9e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba9ea:	ebb6 0e02 	subs.w	lr, r6, r2
   ba9ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba9f2:	bf22      	ittt	cs
   ba9f4:	1ab6      	subcs	r6, r6, r2
   ba9f6:	4675      	movcs	r5, lr
   ba9f8:	ea40 000c 	orrcs.w	r0, r0, ip
   ba9fc:	085b      	lsrs	r3, r3, #1
   ba9fe:	ea4f 0232 	mov.w	r2, r2, rrx
   baa02:	ebb6 0e02 	subs.w	lr, r6, r2
   baa06:	eb75 0e03 	sbcs.w	lr, r5, r3
   baa0a:	bf22      	ittt	cs
   baa0c:	1ab6      	subcs	r6, r6, r2
   baa0e:	4675      	movcs	r5, lr
   baa10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   baa14:	085b      	lsrs	r3, r3, #1
   baa16:	ea4f 0232 	mov.w	r2, r2, rrx
   baa1a:	ebb6 0e02 	subs.w	lr, r6, r2
   baa1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   baa22:	bf22      	ittt	cs
   baa24:	1ab6      	subcs	r6, r6, r2
   baa26:	4675      	movcs	r5, lr
   baa28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   baa2c:	085b      	lsrs	r3, r3, #1
   baa2e:	ea4f 0232 	mov.w	r2, r2, rrx
   baa32:	ebb6 0e02 	subs.w	lr, r6, r2
   baa36:	eb75 0e03 	sbcs.w	lr, r5, r3
   baa3a:	bf22      	ittt	cs
   baa3c:	1ab6      	subcs	r6, r6, r2
   baa3e:	4675      	movcs	r5, lr
   baa40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   baa44:	ea55 0e06 	orrs.w	lr, r5, r6
   baa48:	d018      	beq.n	baa7c <__aeabi_ddiv+0x114>
   baa4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   baa4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   baa52:	ea4f 1606 	mov.w	r6, r6, lsl #4
   baa56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   baa5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   baa5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   baa62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   baa66:	d1c0      	bne.n	ba9ea <__aeabi_ddiv+0x82>
   baa68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baa6c:	d10b      	bne.n	baa86 <__aeabi_ddiv+0x11e>
   baa6e:	ea41 0100 	orr.w	r1, r1, r0
   baa72:	f04f 0000 	mov.w	r0, #0
   baa76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   baa7a:	e7b6      	b.n	ba9ea <__aeabi_ddiv+0x82>
   baa7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baa80:	bf04      	itt	eq
   baa82:	4301      	orreq	r1, r0
   baa84:	2000      	moveq	r0, #0
   baa86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   baa8a:	bf88      	it	hi
   baa8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   baa90:	f63f aeaf 	bhi.w	ba7f2 <__aeabi_dmul+0xde>
   baa94:	ebb5 0c03 	subs.w	ip, r5, r3
   baa98:	bf04      	itt	eq
   baa9a:	ebb6 0c02 	subseq.w	ip, r6, r2
   baa9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   baaa2:	f150 0000 	adcs.w	r0, r0, #0
   baaa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   baaaa:	bd70      	pop	{r4, r5, r6, pc}
   baaac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   baab0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   baab4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   baab8:	bfc2      	ittt	gt
   baaba:	ebd4 050c 	rsbsgt	r5, r4, ip
   baabe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   baac2:	bd70      	popgt	{r4, r5, r6, pc}
   baac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baac8:	f04f 0e00 	mov.w	lr, #0
   baacc:	3c01      	subs	r4, #1
   baace:	e690      	b.n	ba7f2 <__aeabi_dmul+0xde>
   baad0:	ea45 0e06 	orr.w	lr, r5, r6
   baad4:	e68d      	b.n	ba7f2 <__aeabi_dmul+0xde>
   baad6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   baada:	ea94 0f0c 	teq	r4, ip
   baade:	bf08      	it	eq
   baae0:	ea95 0f0c 	teqeq	r5, ip
   baae4:	f43f af3b 	beq.w	ba95e <__aeabi_dmul+0x24a>
   baae8:	ea94 0f0c 	teq	r4, ip
   baaec:	d10a      	bne.n	bab04 <__aeabi_ddiv+0x19c>
   baaee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baaf2:	f47f af34 	bne.w	ba95e <__aeabi_dmul+0x24a>
   baaf6:	ea95 0f0c 	teq	r5, ip
   baafa:	f47f af25 	bne.w	ba948 <__aeabi_dmul+0x234>
   baafe:	4610      	mov	r0, r2
   bab00:	4619      	mov	r1, r3
   bab02:	e72c      	b.n	ba95e <__aeabi_dmul+0x24a>
   bab04:	ea95 0f0c 	teq	r5, ip
   bab08:	d106      	bne.n	bab18 <__aeabi_ddiv+0x1b0>
   bab0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bab0e:	f43f aefd 	beq.w	ba90c <__aeabi_dmul+0x1f8>
   bab12:	4610      	mov	r0, r2
   bab14:	4619      	mov	r1, r3
   bab16:	e722      	b.n	ba95e <__aeabi_dmul+0x24a>
   bab18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bab1c:	bf18      	it	ne
   bab1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bab22:	f47f aec5 	bne.w	ba8b0 <__aeabi_dmul+0x19c>
   bab26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bab2a:	f47f af0d 	bne.w	ba948 <__aeabi_dmul+0x234>
   bab2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bab32:	f47f aeeb 	bne.w	ba90c <__aeabi_dmul+0x1f8>
   bab36:	e712      	b.n	ba95e <__aeabi_dmul+0x24a>

000bab38 <__gedf2>:
   bab38:	f04f 3cff 	mov.w	ip, #4294967295
   bab3c:	e006      	b.n	bab4c <__cmpdf2+0x4>
   bab3e:	bf00      	nop

000bab40 <__ledf2>:
   bab40:	f04f 0c01 	mov.w	ip, #1
   bab44:	e002      	b.n	bab4c <__cmpdf2+0x4>
   bab46:	bf00      	nop

000bab48 <__cmpdf2>:
   bab48:	f04f 0c01 	mov.w	ip, #1
   bab4c:	f84d cd04 	str.w	ip, [sp, #-4]!
   bab50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bab54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bab58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bab5c:	bf18      	it	ne
   bab5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bab62:	d01b      	beq.n	bab9c <__cmpdf2+0x54>
   bab64:	b001      	add	sp, #4
   bab66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bab6a:	bf0c      	ite	eq
   bab6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bab70:	ea91 0f03 	teqne	r1, r3
   bab74:	bf02      	ittt	eq
   bab76:	ea90 0f02 	teqeq	r0, r2
   bab7a:	2000      	moveq	r0, #0
   bab7c:	4770      	bxeq	lr
   bab7e:	f110 0f00 	cmn.w	r0, #0
   bab82:	ea91 0f03 	teq	r1, r3
   bab86:	bf58      	it	pl
   bab88:	4299      	cmppl	r1, r3
   bab8a:	bf08      	it	eq
   bab8c:	4290      	cmpeq	r0, r2
   bab8e:	bf2c      	ite	cs
   bab90:	17d8      	asrcs	r0, r3, #31
   bab92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bab96:	f040 0001 	orr.w	r0, r0, #1
   bab9a:	4770      	bx	lr
   bab9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baba4:	d102      	bne.n	babac <__cmpdf2+0x64>
   baba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   babaa:	d107      	bne.n	babbc <__cmpdf2+0x74>
   babac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   babb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   babb4:	d1d6      	bne.n	bab64 <__cmpdf2+0x1c>
   babb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   babba:	d0d3      	beq.n	bab64 <__cmpdf2+0x1c>
   babbc:	f85d 0b04 	ldr.w	r0, [sp], #4
   babc0:	4770      	bx	lr
   babc2:	bf00      	nop

000babc4 <__aeabi_cdrcmple>:
   babc4:	4684      	mov	ip, r0
   babc6:	4610      	mov	r0, r2
   babc8:	4662      	mov	r2, ip
   babca:	468c      	mov	ip, r1
   babcc:	4619      	mov	r1, r3
   babce:	4663      	mov	r3, ip
   babd0:	e000      	b.n	babd4 <__aeabi_cdcmpeq>
   babd2:	bf00      	nop

000babd4 <__aeabi_cdcmpeq>:
   babd4:	b501      	push	{r0, lr}
   babd6:	f7ff ffb7 	bl	bab48 <__cmpdf2>
   babda:	2800      	cmp	r0, #0
   babdc:	bf48      	it	mi
   babde:	f110 0f00 	cmnmi.w	r0, #0
   babe2:	bd01      	pop	{r0, pc}

000babe4 <__aeabi_dcmpeq>:
   babe4:	f84d ed08 	str.w	lr, [sp, #-8]!
   babe8:	f7ff fff4 	bl	babd4 <__aeabi_cdcmpeq>
   babec:	bf0c      	ite	eq
   babee:	2001      	moveq	r0, #1
   babf0:	2000      	movne	r0, #0
   babf2:	f85d fb08 	ldr.w	pc, [sp], #8
   babf6:	bf00      	nop

000babf8 <__aeabi_dcmplt>:
   babf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   babfc:	f7ff ffea 	bl	babd4 <__aeabi_cdcmpeq>
   bac00:	bf34      	ite	cc
   bac02:	2001      	movcc	r0, #1
   bac04:	2000      	movcs	r0, #0
   bac06:	f85d fb08 	ldr.w	pc, [sp], #8
   bac0a:	bf00      	nop

000bac0c <__aeabi_dcmple>:
   bac0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bac10:	f7ff ffe0 	bl	babd4 <__aeabi_cdcmpeq>
   bac14:	bf94      	ite	ls
   bac16:	2001      	movls	r0, #1
   bac18:	2000      	movhi	r0, #0
   bac1a:	f85d fb08 	ldr.w	pc, [sp], #8
   bac1e:	bf00      	nop

000bac20 <__aeabi_dcmpge>:
   bac20:	f84d ed08 	str.w	lr, [sp, #-8]!
   bac24:	f7ff ffce 	bl	babc4 <__aeabi_cdrcmple>
   bac28:	bf94      	ite	ls
   bac2a:	2001      	movls	r0, #1
   bac2c:	2000      	movhi	r0, #0
   bac2e:	f85d fb08 	ldr.w	pc, [sp], #8
   bac32:	bf00      	nop

000bac34 <__aeabi_dcmpgt>:
   bac34:	f84d ed08 	str.w	lr, [sp, #-8]!
   bac38:	f7ff ffc4 	bl	babc4 <__aeabi_cdrcmple>
   bac3c:	bf34      	ite	cc
   bac3e:	2001      	movcc	r0, #1
   bac40:	2000      	movcs	r0, #0
   bac42:	f85d fb08 	ldr.w	pc, [sp], #8
   bac46:	bf00      	nop

000bac48 <__aeabi_d2iz>:
   bac48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bac4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bac50:	d215      	bcs.n	bac7e <__aeabi_d2iz+0x36>
   bac52:	d511      	bpl.n	bac78 <__aeabi_d2iz+0x30>
   bac54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bac58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bac5c:	d912      	bls.n	bac84 <__aeabi_d2iz+0x3c>
   bac5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bac62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bac66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bac6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bac6e:	fa23 f002 	lsr.w	r0, r3, r2
   bac72:	bf18      	it	ne
   bac74:	4240      	negne	r0, r0
   bac76:	4770      	bx	lr
   bac78:	f04f 0000 	mov.w	r0, #0
   bac7c:	4770      	bx	lr
   bac7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bac82:	d105      	bne.n	bac90 <__aeabi_d2iz+0x48>
   bac84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bac88:	bf08      	it	eq
   bac8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bac8e:	4770      	bx	lr
   bac90:	f04f 0000 	mov.w	r0, #0
   bac94:	4770      	bx	lr
   bac96:	bf00      	nop

000bac98 <__aeabi_d2uiz>:
   bac98:	004a      	lsls	r2, r1, #1
   bac9a:	d211      	bcs.n	bacc0 <__aeabi_d2uiz+0x28>
   bac9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   baca0:	d211      	bcs.n	bacc6 <__aeabi_d2uiz+0x2e>
   baca2:	d50d      	bpl.n	bacc0 <__aeabi_d2uiz+0x28>
   baca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   baca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bacac:	d40e      	bmi.n	baccc <__aeabi_d2uiz+0x34>
   bacae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bacb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bacb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bacba:	fa23 f002 	lsr.w	r0, r3, r2
   bacbe:	4770      	bx	lr
   bacc0:	f04f 0000 	mov.w	r0, #0
   bacc4:	4770      	bx	lr
   bacc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bacca:	d102      	bne.n	bacd2 <__aeabi_d2uiz+0x3a>
   baccc:	f04f 30ff 	mov.w	r0, #4294967295
   bacd0:	4770      	bx	lr
   bacd2:	f04f 0000 	mov.w	r0, #0
   bacd6:	4770      	bx	lr

000bacd8 <__aeabi_f2lz>:
   bacd8:	ee07 0a90 	vmov	s15, r0
   bacdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bace0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bace4:	d401      	bmi.n	bacea <__aeabi_f2lz+0x12>
   bace6:	f000 b80b 	b.w	bad00 <__aeabi_f2ulz>
   bacea:	eef1 7a67 	vneg.f32	s15, s15
   bacee:	b508      	push	{r3, lr}
   bacf0:	ee17 0a90 	vmov	r0, s15
   bacf4:	f000 f804 	bl	bad00 <__aeabi_f2ulz>
   bacf8:	4240      	negs	r0, r0
   bacfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bacfe:	bd08      	pop	{r3, pc}

000bad00 <__aeabi_f2ulz>:
   bad00:	b5d0      	push	{r4, r6, r7, lr}
   bad02:	f7ff fcaf 	bl	ba664 <__aeabi_f2d>
   bad06:	4b0c      	ldr	r3, [pc, #48]	; (bad38 <__aeabi_f2ulz+0x38>)
   bad08:	2200      	movs	r2, #0
   bad0a:	4606      	mov	r6, r0
   bad0c:	460f      	mov	r7, r1
   bad0e:	f7ff fd01 	bl	ba714 <__aeabi_dmul>
   bad12:	f7ff ffc1 	bl	bac98 <__aeabi_d2uiz>
   bad16:	4604      	mov	r4, r0
   bad18:	f7ff fc82 	bl	ba620 <__aeabi_ui2d>
   bad1c:	4b07      	ldr	r3, [pc, #28]	; (bad3c <__aeabi_f2ulz+0x3c>)
   bad1e:	2200      	movs	r2, #0
   bad20:	f7ff fcf8 	bl	ba714 <__aeabi_dmul>
   bad24:	4602      	mov	r2, r0
   bad26:	460b      	mov	r3, r1
   bad28:	4630      	mov	r0, r6
   bad2a:	4639      	mov	r1, r7
   bad2c:	f7ff fb3a 	bl	ba3a4 <__aeabi_dsub>
   bad30:	f7ff ffb2 	bl	bac98 <__aeabi_d2uiz>
   bad34:	4621      	mov	r1, r4
   bad36:	bdd0      	pop	{r4, r6, r7, pc}
   bad38:	3df00000 	.word	0x3df00000
   bad3c:	41f00000 	.word	0x41f00000

000bad40 <__aeabi_d2ulz>:
   bad40:	b5d0      	push	{r4, r6, r7, lr}
   bad42:	4b0c      	ldr	r3, [pc, #48]	; (bad74 <__aeabi_d2ulz+0x34>)
   bad44:	2200      	movs	r2, #0
   bad46:	4606      	mov	r6, r0
   bad48:	460f      	mov	r7, r1
   bad4a:	f7ff fce3 	bl	ba714 <__aeabi_dmul>
   bad4e:	f7ff ffa3 	bl	bac98 <__aeabi_d2uiz>
   bad52:	4604      	mov	r4, r0
   bad54:	f7ff fc64 	bl	ba620 <__aeabi_ui2d>
   bad58:	4b07      	ldr	r3, [pc, #28]	; (bad78 <__aeabi_d2ulz+0x38>)
   bad5a:	2200      	movs	r2, #0
   bad5c:	f7ff fcda 	bl	ba714 <__aeabi_dmul>
   bad60:	4602      	mov	r2, r0
   bad62:	460b      	mov	r3, r1
   bad64:	4630      	mov	r0, r6
   bad66:	4639      	mov	r1, r7
   bad68:	f7ff fb1c 	bl	ba3a4 <__aeabi_dsub>
   bad6c:	f7ff ff94 	bl	bac98 <__aeabi_d2uiz>
   bad70:	4621      	mov	r1, r4
   bad72:	bdd0      	pop	{r4, r6, r7, pc}
   bad74:	3df00000 	.word	0x3df00000
   bad78:	41f00000 	.word	0x41f00000

000bad7c <atexit>:
   bad7c:	2300      	movs	r3, #0
   bad7e:	4601      	mov	r1, r0
   bad80:	461a      	mov	r2, r3
   bad82:	4618      	mov	r0, r3
   bad84:	f001 b80a 	b.w	bbd9c <__register_exitproc>

000bad88 <atof>:
   bad88:	2100      	movs	r1, #0
   bad8a:	f000 bf13 	b.w	bbbb4 <strtod>

000bad8e <atoi>:
   bad8e:	220a      	movs	r2, #10
   bad90:	2100      	movs	r1, #0
   bad92:	f000 bff9 	b.w	bbd88 <strtol>

000bad96 <memcmp>:
   bad96:	b510      	push	{r4, lr}
   bad98:	3901      	subs	r1, #1
   bad9a:	4402      	add	r2, r0
   bad9c:	4290      	cmp	r0, r2
   bad9e:	d101      	bne.n	bada4 <memcmp+0xe>
   bada0:	2000      	movs	r0, #0
   bada2:	e005      	b.n	badb0 <memcmp+0x1a>
   bada4:	7803      	ldrb	r3, [r0, #0]
   bada6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   badaa:	42a3      	cmp	r3, r4
   badac:	d001      	beq.n	badb2 <memcmp+0x1c>
   badae:	1b18      	subs	r0, r3, r4
   badb0:	bd10      	pop	{r4, pc}
   badb2:	3001      	adds	r0, #1
   badb4:	e7f2      	b.n	bad9c <memcmp+0x6>

000badb6 <memcpy>:
   badb6:	440a      	add	r2, r1
   badb8:	4291      	cmp	r1, r2
   badba:	f100 33ff 	add.w	r3, r0, #4294967295
   badbe:	d100      	bne.n	badc2 <memcpy+0xc>
   badc0:	4770      	bx	lr
   badc2:	b510      	push	{r4, lr}
   badc4:	f811 4b01 	ldrb.w	r4, [r1], #1
   badc8:	f803 4f01 	strb.w	r4, [r3, #1]!
   badcc:	4291      	cmp	r1, r2
   badce:	d1f9      	bne.n	badc4 <memcpy+0xe>
   badd0:	bd10      	pop	{r4, pc}

000badd2 <memmove>:
   badd2:	4288      	cmp	r0, r1
   badd4:	b510      	push	{r4, lr}
   badd6:	eb01 0402 	add.w	r4, r1, r2
   badda:	d902      	bls.n	bade2 <memmove+0x10>
   baddc:	4284      	cmp	r4, r0
   badde:	4623      	mov	r3, r4
   bade0:	d807      	bhi.n	badf2 <memmove+0x20>
   bade2:	1e43      	subs	r3, r0, #1
   bade4:	42a1      	cmp	r1, r4
   bade6:	d008      	beq.n	badfa <memmove+0x28>
   bade8:	f811 2b01 	ldrb.w	r2, [r1], #1
   badec:	f803 2f01 	strb.w	r2, [r3, #1]!
   badf0:	e7f8      	b.n	bade4 <memmove+0x12>
   badf2:	4402      	add	r2, r0
   badf4:	4601      	mov	r1, r0
   badf6:	428a      	cmp	r2, r1
   badf8:	d100      	bne.n	badfc <memmove+0x2a>
   badfa:	bd10      	pop	{r4, pc}
   badfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bae00:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bae04:	e7f7      	b.n	badf6 <memmove+0x24>

000bae06 <memset>:
   bae06:	4402      	add	r2, r0
   bae08:	4603      	mov	r3, r0
   bae0a:	4293      	cmp	r3, r2
   bae0c:	d100      	bne.n	bae10 <memset+0xa>
   bae0e:	4770      	bx	lr
   bae10:	f803 1b01 	strb.w	r1, [r3], #1
   bae14:	e7f9      	b.n	bae0a <memset+0x4>
	...

000bae18 <srand>:
   bae18:	b538      	push	{r3, r4, r5, lr}
   bae1a:	4b10      	ldr	r3, [pc, #64]	; (bae5c <srand+0x44>)
   bae1c:	681d      	ldr	r5, [r3, #0]
   bae1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bae20:	4604      	mov	r4, r0
   bae22:	b9b3      	cbnz	r3, bae52 <srand+0x3a>
   bae24:	2018      	movs	r0, #24
   bae26:	f7fc f909 	bl	b703c <malloc>
   bae2a:	4602      	mov	r2, r0
   bae2c:	63a8      	str	r0, [r5, #56]	; 0x38
   bae2e:	b920      	cbnz	r0, bae3a <srand+0x22>
   bae30:	4b0b      	ldr	r3, [pc, #44]	; (bae60 <srand+0x48>)
   bae32:	480c      	ldr	r0, [pc, #48]	; (bae64 <srand+0x4c>)
   bae34:	2142      	movs	r1, #66	; 0x42
   bae36:	f7fc f949 	bl	b70cc <__assert_func>
   bae3a:	490b      	ldr	r1, [pc, #44]	; (bae68 <srand+0x50>)
   bae3c:	4b0b      	ldr	r3, [pc, #44]	; (bae6c <srand+0x54>)
   bae3e:	e9c0 1300 	strd	r1, r3, [r0]
   bae42:	4b0b      	ldr	r3, [pc, #44]	; (bae70 <srand+0x58>)
   bae44:	6083      	str	r3, [r0, #8]
   bae46:	230b      	movs	r3, #11
   bae48:	8183      	strh	r3, [r0, #12]
   bae4a:	2100      	movs	r1, #0
   bae4c:	2001      	movs	r0, #1
   bae4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bae52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bae54:	2200      	movs	r2, #0
   bae56:	611c      	str	r4, [r3, #16]
   bae58:	615a      	str	r2, [r3, #20]
   bae5a:	bd38      	pop	{r3, r4, r5, pc}
   bae5c:	2003d184 	.word	0x2003d184
   bae60:	000bdca6 	.word	0x000bdca6
   bae64:	000bdcbd 	.word	0x000bdcbd
   bae68:	abcd330e 	.word	0xabcd330e
   bae6c:	e66d1234 	.word	0xe66d1234
   bae70:	0005deec 	.word	0x0005deec

000bae74 <strcat>:
   bae74:	b510      	push	{r4, lr}
   bae76:	4602      	mov	r2, r0
   bae78:	7814      	ldrb	r4, [r2, #0]
   bae7a:	4613      	mov	r3, r2
   bae7c:	3201      	adds	r2, #1
   bae7e:	2c00      	cmp	r4, #0
   bae80:	d1fa      	bne.n	bae78 <strcat+0x4>
   bae82:	3b01      	subs	r3, #1
   bae84:	f811 2b01 	ldrb.w	r2, [r1], #1
   bae88:	f803 2f01 	strb.w	r2, [r3, #1]!
   bae8c:	2a00      	cmp	r2, #0
   bae8e:	d1f9      	bne.n	bae84 <strcat+0x10>
   bae90:	bd10      	pop	{r4, pc}

000bae92 <strcmp>:
   bae92:	f810 2b01 	ldrb.w	r2, [r0], #1
   bae96:	f811 3b01 	ldrb.w	r3, [r1], #1
   bae9a:	2a01      	cmp	r2, #1
   bae9c:	bf28      	it	cs
   bae9e:	429a      	cmpcs	r2, r3
   baea0:	d0f7      	beq.n	bae92 <strcmp>
   baea2:	1ad0      	subs	r0, r2, r3
   baea4:	4770      	bx	lr

000baea6 <strcpy>:
   baea6:	4603      	mov	r3, r0
   baea8:	f811 2b01 	ldrb.w	r2, [r1], #1
   baeac:	f803 2b01 	strb.w	r2, [r3], #1
   baeb0:	2a00      	cmp	r2, #0
   baeb2:	d1f9      	bne.n	baea8 <strcpy+0x2>
   baeb4:	4770      	bx	lr
	...

000baeb8 <strdup>:
   baeb8:	4b02      	ldr	r3, [pc, #8]	; (baec4 <strdup+0xc>)
   baeba:	4601      	mov	r1, r0
   baebc:	6818      	ldr	r0, [r3, #0]
   baebe:	f000 b803 	b.w	baec8 <_strdup_r>
   baec2:	bf00      	nop
   baec4:	2003d184 	.word	0x2003d184

000baec8 <_strdup_r>:
   baec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baeca:	4604      	mov	r4, r0
   baecc:	4608      	mov	r0, r1
   baece:	460d      	mov	r5, r1
   baed0:	f000 f80f 	bl	baef2 <strlen>
   baed4:	1c42      	adds	r2, r0, #1
   baed6:	4611      	mov	r1, r2
   baed8:	4620      	mov	r0, r4
   baeda:	9201      	str	r2, [sp, #4]
   baedc:	f7fc f8e6 	bl	b70ac <_malloc_r>
   baee0:	4604      	mov	r4, r0
   baee2:	b118      	cbz	r0, baeec <_strdup_r+0x24>
   baee4:	9a01      	ldr	r2, [sp, #4]
   baee6:	4629      	mov	r1, r5
   baee8:	f7ff ff65 	bl	badb6 <memcpy>
   baeec:	4620      	mov	r0, r4
   baeee:	b003      	add	sp, #12
   baef0:	bd30      	pop	{r4, r5, pc}

000baef2 <strlen>:
   baef2:	4603      	mov	r3, r0
   baef4:	f813 2b01 	ldrb.w	r2, [r3], #1
   baef8:	2a00      	cmp	r2, #0
   baefa:	d1fb      	bne.n	baef4 <strlen+0x2>
   baefc:	1a18      	subs	r0, r3, r0
   baefe:	3801      	subs	r0, #1
   baf00:	4770      	bx	lr

000baf02 <strncmp>:
   baf02:	b510      	push	{r4, lr}
   baf04:	b17a      	cbz	r2, baf26 <strncmp+0x24>
   baf06:	4603      	mov	r3, r0
   baf08:	3901      	subs	r1, #1
   baf0a:	1884      	adds	r4, r0, r2
   baf0c:	f813 0b01 	ldrb.w	r0, [r3], #1
   baf10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   baf14:	4290      	cmp	r0, r2
   baf16:	d101      	bne.n	baf1c <strncmp+0x1a>
   baf18:	42a3      	cmp	r3, r4
   baf1a:	d101      	bne.n	baf20 <strncmp+0x1e>
   baf1c:	1a80      	subs	r0, r0, r2
   baf1e:	bd10      	pop	{r4, pc}
   baf20:	2800      	cmp	r0, #0
   baf22:	d1f3      	bne.n	baf0c <strncmp+0xa>
   baf24:	e7fa      	b.n	baf1c <strncmp+0x1a>
   baf26:	4610      	mov	r0, r2
   baf28:	e7f9      	b.n	baf1e <strncmp+0x1c>

000baf2a <strnlen>:
   baf2a:	b510      	push	{r4, lr}
   baf2c:	4602      	mov	r2, r0
   baf2e:	4401      	add	r1, r0
   baf30:	428a      	cmp	r2, r1
   baf32:	4613      	mov	r3, r2
   baf34:	d003      	beq.n	baf3e <strnlen+0x14>
   baf36:	781c      	ldrb	r4, [r3, #0]
   baf38:	3201      	adds	r2, #1
   baf3a:	2c00      	cmp	r4, #0
   baf3c:	d1f8      	bne.n	baf30 <strnlen+0x6>
   baf3e:	1a18      	subs	r0, r3, r0
   baf40:	bd10      	pop	{r4, pc}

000baf42 <strstr>:
   baf42:	780a      	ldrb	r2, [r1, #0]
   baf44:	b570      	push	{r4, r5, r6, lr}
   baf46:	b96a      	cbnz	r2, baf64 <strstr+0x22>
   baf48:	bd70      	pop	{r4, r5, r6, pc}
   baf4a:	429a      	cmp	r2, r3
   baf4c:	d109      	bne.n	baf62 <strstr+0x20>
   baf4e:	460c      	mov	r4, r1
   baf50:	4605      	mov	r5, r0
   baf52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   baf56:	2b00      	cmp	r3, #0
   baf58:	d0f6      	beq.n	baf48 <strstr+0x6>
   baf5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   baf5e:	429e      	cmp	r6, r3
   baf60:	d0f7      	beq.n	baf52 <strstr+0x10>
   baf62:	3001      	adds	r0, #1
   baf64:	7803      	ldrb	r3, [r0, #0]
   baf66:	2b00      	cmp	r3, #0
   baf68:	d1ef      	bne.n	baf4a <strstr+0x8>
   baf6a:	4618      	mov	r0, r3
   baf6c:	e7ec      	b.n	baf48 <strstr+0x6>

000baf6e <sulp>:
   baf6e:	b570      	push	{r4, r5, r6, lr}
   baf70:	4604      	mov	r4, r0
   baf72:	460d      	mov	r5, r1
   baf74:	ec45 4b10 	vmov	d0, r4, r5
   baf78:	4616      	mov	r6, r2
   baf7a:	f001 fe69 	bl	bcc50 <__ulp>
   baf7e:	ec51 0b10 	vmov	r0, r1, d0
   baf82:	b17e      	cbz	r6, bafa4 <sulp+0x36>
   baf84:	f3c5 530a 	ubfx	r3, r5, #20, #11
   baf88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   baf8c:	2b00      	cmp	r3, #0
   baf8e:	dd09      	ble.n	bafa4 <sulp+0x36>
   baf90:	051b      	lsls	r3, r3, #20
   baf92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   baf96:	2400      	movs	r4, #0
   baf98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   baf9c:	4622      	mov	r2, r4
   baf9e:	462b      	mov	r3, r5
   bafa0:	f7ff fbb8 	bl	ba714 <__aeabi_dmul>
   bafa4:	bd70      	pop	{r4, r5, r6, pc}
	...

000bafa8 <_strtod_l>:
   bafa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bafac:	ed2d 8b02 	vpush	{d8}
   bafb0:	b09d      	sub	sp, #116	; 0x74
   bafb2:	461f      	mov	r7, r3
   bafb4:	2300      	movs	r3, #0
   bafb6:	9318      	str	r3, [sp, #96]	; 0x60
   bafb8:	4ba2      	ldr	r3, [pc, #648]	; (bb244 <_strtod_l+0x29c>)
   bafba:	9213      	str	r2, [sp, #76]	; 0x4c
   bafbc:	681b      	ldr	r3, [r3, #0]
   bafbe:	9305      	str	r3, [sp, #20]
   bafc0:	4604      	mov	r4, r0
   bafc2:	4618      	mov	r0, r3
   bafc4:	4688      	mov	r8, r1
   bafc6:	f7ff ff94 	bl	baef2 <strlen>
   bafca:	f04f 0a00 	mov.w	sl, #0
   bafce:	4605      	mov	r5, r0
   bafd0:	f04f 0b00 	mov.w	fp, #0
   bafd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bafd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bafda:	781a      	ldrb	r2, [r3, #0]
   bafdc:	2a2b      	cmp	r2, #43	; 0x2b
   bafde:	d04e      	beq.n	bb07e <_strtod_l+0xd6>
   bafe0:	d83b      	bhi.n	bb05a <_strtod_l+0xb2>
   bafe2:	2a0d      	cmp	r2, #13
   bafe4:	d834      	bhi.n	bb050 <_strtod_l+0xa8>
   bafe6:	2a08      	cmp	r2, #8
   bafe8:	d834      	bhi.n	bb054 <_strtod_l+0xac>
   bafea:	2a00      	cmp	r2, #0
   bafec:	d03e      	beq.n	bb06c <_strtod_l+0xc4>
   bafee:	2300      	movs	r3, #0
   baff0:	930a      	str	r3, [sp, #40]	; 0x28
   baff2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   baff4:	7833      	ldrb	r3, [r6, #0]
   baff6:	2b30      	cmp	r3, #48	; 0x30
   baff8:	f040 80b0 	bne.w	bb15c <_strtod_l+0x1b4>
   baffc:	7873      	ldrb	r3, [r6, #1]
   baffe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb002:	2b58      	cmp	r3, #88	; 0x58
   bb004:	d168      	bne.n	bb0d8 <_strtod_l+0x130>
   bb006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb008:	9301      	str	r3, [sp, #4]
   bb00a:	ab18      	add	r3, sp, #96	; 0x60
   bb00c:	9702      	str	r7, [sp, #8]
   bb00e:	9300      	str	r3, [sp, #0]
   bb010:	4a8d      	ldr	r2, [pc, #564]	; (bb248 <_strtod_l+0x2a0>)
   bb012:	ab19      	add	r3, sp, #100	; 0x64
   bb014:	a917      	add	r1, sp, #92	; 0x5c
   bb016:	4620      	mov	r0, r4
   bb018:	f000 ff8a 	bl	bbf30 <__gethex>
   bb01c:	f010 0707 	ands.w	r7, r0, #7
   bb020:	4605      	mov	r5, r0
   bb022:	d005      	beq.n	bb030 <_strtod_l+0x88>
   bb024:	2f06      	cmp	r7, #6
   bb026:	d12c      	bne.n	bb082 <_strtod_l+0xda>
   bb028:	3601      	adds	r6, #1
   bb02a:	2300      	movs	r3, #0
   bb02c:	9617      	str	r6, [sp, #92]	; 0x5c
   bb02e:	930a      	str	r3, [sp, #40]	; 0x28
   bb030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb032:	2b00      	cmp	r3, #0
   bb034:	f040 8590 	bne.w	bbb58 <_strtod_l+0xbb0>
   bb038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb03a:	b1eb      	cbz	r3, bb078 <_strtod_l+0xd0>
   bb03c:	4652      	mov	r2, sl
   bb03e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb042:	ec43 2b10 	vmov	d0, r2, r3
   bb046:	b01d      	add	sp, #116	; 0x74
   bb048:	ecbd 8b02 	vpop	{d8}
   bb04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb050:	2a20      	cmp	r2, #32
   bb052:	d1cc      	bne.n	bafee <_strtod_l+0x46>
   bb054:	3301      	adds	r3, #1
   bb056:	9317      	str	r3, [sp, #92]	; 0x5c
   bb058:	e7be      	b.n	bafd8 <_strtod_l+0x30>
   bb05a:	2a2d      	cmp	r2, #45	; 0x2d
   bb05c:	d1c7      	bne.n	bafee <_strtod_l+0x46>
   bb05e:	2201      	movs	r2, #1
   bb060:	920a      	str	r2, [sp, #40]	; 0x28
   bb062:	1c5a      	adds	r2, r3, #1
   bb064:	9217      	str	r2, [sp, #92]	; 0x5c
   bb066:	785b      	ldrb	r3, [r3, #1]
   bb068:	2b00      	cmp	r3, #0
   bb06a:	d1c2      	bne.n	baff2 <_strtod_l+0x4a>
   bb06c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb06e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb072:	2b00      	cmp	r3, #0
   bb074:	f040 856e 	bne.w	bbb54 <_strtod_l+0xbac>
   bb078:	4652      	mov	r2, sl
   bb07a:	465b      	mov	r3, fp
   bb07c:	e7e1      	b.n	bb042 <_strtod_l+0x9a>
   bb07e:	2200      	movs	r2, #0
   bb080:	e7ee      	b.n	bb060 <_strtod_l+0xb8>
   bb082:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb084:	b13a      	cbz	r2, bb096 <_strtod_l+0xee>
   bb086:	2135      	movs	r1, #53	; 0x35
   bb088:	a81a      	add	r0, sp, #104	; 0x68
   bb08a:	f001 feec 	bl	bce66 <__copybits>
   bb08e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb090:	4620      	mov	r0, r4
   bb092:	f001 faab 	bl	bc5ec <_Bfree>
   bb096:	3f01      	subs	r7, #1
   bb098:	2f04      	cmp	r7, #4
   bb09a:	d806      	bhi.n	bb0aa <_strtod_l+0x102>
   bb09c:	e8df f007 	tbb	[pc, r7]
   bb0a0:	1714030a 	.word	0x1714030a
   bb0a4:	0a          	.byte	0x0a
   bb0a5:	00          	.byte	0x00
   bb0a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb0aa:	0728      	lsls	r0, r5, #28
   bb0ac:	d5c0      	bpl.n	bb030 <_strtod_l+0x88>
   bb0ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb0b2:	e7bd      	b.n	bb030 <_strtod_l+0x88>
   bb0b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb0b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb0ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb0be:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb0c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb0c6:	e7f0      	b.n	bb0aa <_strtod_l+0x102>
   bb0c8:	f8df b180 	ldr.w	fp, [pc, #384]	; bb24c <_strtod_l+0x2a4>
   bb0cc:	e7ed      	b.n	bb0aa <_strtod_l+0x102>
   bb0ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb0d2:	f04f 3aff 	mov.w	sl, #4294967295
   bb0d6:	e7e8      	b.n	bb0aa <_strtod_l+0x102>
   bb0d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb0da:	1c5a      	adds	r2, r3, #1
   bb0dc:	9217      	str	r2, [sp, #92]	; 0x5c
   bb0de:	785b      	ldrb	r3, [r3, #1]
   bb0e0:	2b30      	cmp	r3, #48	; 0x30
   bb0e2:	d0f9      	beq.n	bb0d8 <_strtod_l+0x130>
   bb0e4:	2b00      	cmp	r3, #0
   bb0e6:	d0a3      	beq.n	bb030 <_strtod_l+0x88>
   bb0e8:	2301      	movs	r3, #1
   bb0ea:	f04f 0900 	mov.w	r9, #0
   bb0ee:	9304      	str	r3, [sp, #16]
   bb0f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb0f2:	9308      	str	r3, [sp, #32]
   bb0f4:	f8cd 901c 	str.w	r9, [sp, #28]
   bb0f8:	464f      	mov	r7, r9
   bb0fa:	220a      	movs	r2, #10
   bb0fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb0fe:	7806      	ldrb	r6, [r0, #0]
   bb100:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb104:	b2d9      	uxtb	r1, r3
   bb106:	2909      	cmp	r1, #9
   bb108:	d92a      	bls.n	bb160 <_strtod_l+0x1b8>
   bb10a:	9905      	ldr	r1, [sp, #20]
   bb10c:	462a      	mov	r2, r5
   bb10e:	f7ff fef8 	bl	baf02 <strncmp>
   bb112:	b398      	cbz	r0, bb17c <_strtod_l+0x1d4>
   bb114:	2000      	movs	r0, #0
   bb116:	4632      	mov	r2, r6
   bb118:	463d      	mov	r5, r7
   bb11a:	9005      	str	r0, [sp, #20]
   bb11c:	4603      	mov	r3, r0
   bb11e:	2a65      	cmp	r2, #101	; 0x65
   bb120:	d001      	beq.n	bb126 <_strtod_l+0x17e>
   bb122:	2a45      	cmp	r2, #69	; 0x45
   bb124:	d118      	bne.n	bb158 <_strtod_l+0x1b0>
   bb126:	b91d      	cbnz	r5, bb130 <_strtod_l+0x188>
   bb128:	9a04      	ldr	r2, [sp, #16]
   bb12a:	4302      	orrs	r2, r0
   bb12c:	d09e      	beq.n	bb06c <_strtod_l+0xc4>
   bb12e:	2500      	movs	r5, #0
   bb130:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb134:	f108 0201 	add.w	r2, r8, #1
   bb138:	9217      	str	r2, [sp, #92]	; 0x5c
   bb13a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb13e:	2a2b      	cmp	r2, #43	; 0x2b
   bb140:	d075      	beq.n	bb22e <_strtod_l+0x286>
   bb142:	2a2d      	cmp	r2, #45	; 0x2d
   bb144:	d07b      	beq.n	bb23e <_strtod_l+0x296>
   bb146:	f04f 0c00 	mov.w	ip, #0
   bb14a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb14e:	2909      	cmp	r1, #9
   bb150:	f240 8082 	bls.w	bb258 <_strtod_l+0x2b0>
   bb154:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb158:	2600      	movs	r6, #0
   bb15a:	e09d      	b.n	bb298 <_strtod_l+0x2f0>
   bb15c:	2300      	movs	r3, #0
   bb15e:	e7c4      	b.n	bb0ea <_strtod_l+0x142>
   bb160:	2f08      	cmp	r7, #8
   bb162:	bfd8      	it	le
   bb164:	9907      	ldrle	r1, [sp, #28]
   bb166:	f100 0001 	add.w	r0, r0, #1
   bb16a:	bfda      	itte	le
   bb16c:	fb02 3301 	mlale	r3, r2, r1, r3
   bb170:	9307      	strle	r3, [sp, #28]
   bb172:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb176:	3701      	adds	r7, #1
   bb178:	9017      	str	r0, [sp, #92]	; 0x5c
   bb17a:	e7bf      	b.n	bb0fc <_strtod_l+0x154>
   bb17c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb17e:	195a      	adds	r2, r3, r5
   bb180:	9217      	str	r2, [sp, #92]	; 0x5c
   bb182:	5d5a      	ldrb	r2, [r3, r5]
   bb184:	2f00      	cmp	r7, #0
   bb186:	d037      	beq.n	bb1f8 <_strtod_l+0x250>
   bb188:	9005      	str	r0, [sp, #20]
   bb18a:	463d      	mov	r5, r7
   bb18c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb190:	2b09      	cmp	r3, #9
   bb192:	d912      	bls.n	bb1ba <_strtod_l+0x212>
   bb194:	2301      	movs	r3, #1
   bb196:	e7c2      	b.n	bb11e <_strtod_l+0x176>
   bb198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb19a:	1c5a      	adds	r2, r3, #1
   bb19c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb19e:	785a      	ldrb	r2, [r3, #1]
   bb1a0:	3001      	adds	r0, #1
   bb1a2:	2a30      	cmp	r2, #48	; 0x30
   bb1a4:	d0f8      	beq.n	bb198 <_strtod_l+0x1f0>
   bb1a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb1aa:	2b08      	cmp	r3, #8
   bb1ac:	f200 84d9 	bhi.w	bbb62 <_strtod_l+0xbba>
   bb1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb1b2:	9005      	str	r0, [sp, #20]
   bb1b4:	2000      	movs	r0, #0
   bb1b6:	9308      	str	r3, [sp, #32]
   bb1b8:	4605      	mov	r5, r0
   bb1ba:	3a30      	subs	r2, #48	; 0x30
   bb1bc:	f100 0301 	add.w	r3, r0, #1
   bb1c0:	d014      	beq.n	bb1ec <_strtod_l+0x244>
   bb1c2:	9905      	ldr	r1, [sp, #20]
   bb1c4:	4419      	add	r1, r3
   bb1c6:	9105      	str	r1, [sp, #20]
   bb1c8:	462b      	mov	r3, r5
   bb1ca:	eb00 0e05 	add.w	lr, r0, r5
   bb1ce:	210a      	movs	r1, #10
   bb1d0:	4573      	cmp	r3, lr
   bb1d2:	d113      	bne.n	bb1fc <_strtod_l+0x254>
   bb1d4:	182b      	adds	r3, r5, r0
   bb1d6:	2b08      	cmp	r3, #8
   bb1d8:	f105 0501 	add.w	r5, r5, #1
   bb1dc:	4405      	add	r5, r0
   bb1de:	dc1c      	bgt.n	bb21a <_strtod_l+0x272>
   bb1e0:	9907      	ldr	r1, [sp, #28]
   bb1e2:	230a      	movs	r3, #10
   bb1e4:	fb03 2301 	mla	r3, r3, r1, r2
   bb1e8:	9307      	str	r3, [sp, #28]
   bb1ea:	2300      	movs	r3, #0
   bb1ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb1ee:	1c51      	adds	r1, r2, #1
   bb1f0:	9117      	str	r1, [sp, #92]	; 0x5c
   bb1f2:	7852      	ldrb	r2, [r2, #1]
   bb1f4:	4618      	mov	r0, r3
   bb1f6:	e7c9      	b.n	bb18c <_strtod_l+0x1e4>
   bb1f8:	4638      	mov	r0, r7
   bb1fa:	e7d2      	b.n	bb1a2 <_strtod_l+0x1fa>
   bb1fc:	2b08      	cmp	r3, #8
   bb1fe:	dc04      	bgt.n	bb20a <_strtod_l+0x262>
   bb200:	9e07      	ldr	r6, [sp, #28]
   bb202:	434e      	muls	r6, r1
   bb204:	9607      	str	r6, [sp, #28]
   bb206:	3301      	adds	r3, #1
   bb208:	e7e2      	b.n	bb1d0 <_strtod_l+0x228>
   bb20a:	f103 0c01 	add.w	ip, r3, #1
   bb20e:	f1bc 0f10 	cmp.w	ip, #16
   bb212:	bfd8      	it	le
   bb214:	fb01 f909 	mulle.w	r9, r1, r9
   bb218:	e7f5      	b.n	bb206 <_strtod_l+0x25e>
   bb21a:	2d10      	cmp	r5, #16
   bb21c:	bfdc      	itt	le
   bb21e:	230a      	movle	r3, #10
   bb220:	fb03 2909 	mlale	r9, r3, r9, r2
   bb224:	e7e1      	b.n	bb1ea <_strtod_l+0x242>
   bb226:	2300      	movs	r3, #0
   bb228:	9305      	str	r3, [sp, #20]
   bb22a:	2301      	movs	r3, #1
   bb22c:	e77c      	b.n	bb128 <_strtod_l+0x180>
   bb22e:	f04f 0c00 	mov.w	ip, #0
   bb232:	f108 0202 	add.w	r2, r8, #2
   bb236:	9217      	str	r2, [sp, #92]	; 0x5c
   bb238:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb23c:	e785      	b.n	bb14a <_strtod_l+0x1a2>
   bb23e:	f04f 0c01 	mov.w	ip, #1
   bb242:	e7f6      	b.n	bb232 <_strtod_l+0x28a>
   bb244:	000bdeb0 	.word	0x000bdeb0
   bb248:	000bdd44 	.word	0x000bdd44
   bb24c:	7ff00000 	.word	0x7ff00000
   bb250:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb252:	1c51      	adds	r1, r2, #1
   bb254:	9117      	str	r1, [sp, #92]	; 0x5c
   bb256:	7852      	ldrb	r2, [r2, #1]
   bb258:	2a30      	cmp	r2, #48	; 0x30
   bb25a:	d0f9      	beq.n	bb250 <_strtod_l+0x2a8>
   bb25c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb260:	2908      	cmp	r1, #8
   bb262:	f63f af79 	bhi.w	bb158 <_strtod_l+0x1b0>
   bb266:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb26a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb26c:	9206      	str	r2, [sp, #24]
   bb26e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb270:	1c51      	adds	r1, r2, #1
   bb272:	9117      	str	r1, [sp, #92]	; 0x5c
   bb274:	7852      	ldrb	r2, [r2, #1]
   bb276:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb27a:	2e09      	cmp	r6, #9
   bb27c:	d937      	bls.n	bb2ee <_strtod_l+0x346>
   bb27e:	9e06      	ldr	r6, [sp, #24]
   bb280:	1b89      	subs	r1, r1, r6
   bb282:	2908      	cmp	r1, #8
   bb284:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb288:	dc02      	bgt.n	bb290 <_strtod_l+0x2e8>
   bb28a:	4576      	cmp	r6, lr
   bb28c:	bfa8      	it	ge
   bb28e:	4676      	movge	r6, lr
   bb290:	f1bc 0f00 	cmp.w	ip, #0
   bb294:	d000      	beq.n	bb298 <_strtod_l+0x2f0>
   bb296:	4276      	negs	r6, r6
   bb298:	2d00      	cmp	r5, #0
   bb29a:	d14d      	bne.n	bb338 <_strtod_l+0x390>
   bb29c:	9904      	ldr	r1, [sp, #16]
   bb29e:	4301      	orrs	r1, r0
   bb2a0:	f47f aec6 	bne.w	bb030 <_strtod_l+0x88>
   bb2a4:	2b00      	cmp	r3, #0
   bb2a6:	f47f aee1 	bne.w	bb06c <_strtod_l+0xc4>
   bb2aa:	2a69      	cmp	r2, #105	; 0x69
   bb2ac:	d027      	beq.n	bb2fe <_strtod_l+0x356>
   bb2ae:	dc24      	bgt.n	bb2fa <_strtod_l+0x352>
   bb2b0:	2a49      	cmp	r2, #73	; 0x49
   bb2b2:	d024      	beq.n	bb2fe <_strtod_l+0x356>
   bb2b4:	2a4e      	cmp	r2, #78	; 0x4e
   bb2b6:	f47f aed9 	bne.w	bb06c <_strtod_l+0xc4>
   bb2ba:	499f      	ldr	r1, [pc, #636]	; (bb538 <_strtod_l+0x590>)
   bb2bc:	a817      	add	r0, sp, #92	; 0x5c
   bb2be:	f001 f88f 	bl	bc3e0 <__match>
   bb2c2:	2800      	cmp	r0, #0
   bb2c4:	f43f aed2 	beq.w	bb06c <_strtod_l+0xc4>
   bb2c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb2ca:	781b      	ldrb	r3, [r3, #0]
   bb2cc:	2b28      	cmp	r3, #40	; 0x28
   bb2ce:	d12d      	bne.n	bb32c <_strtod_l+0x384>
   bb2d0:	499a      	ldr	r1, [pc, #616]	; (bb53c <_strtod_l+0x594>)
   bb2d2:	aa1a      	add	r2, sp, #104	; 0x68
   bb2d4:	a817      	add	r0, sp, #92	; 0x5c
   bb2d6:	f001 f897 	bl	bc408 <__hexnan>
   bb2da:	2805      	cmp	r0, #5
   bb2dc:	d126      	bne.n	bb32c <_strtod_l+0x384>
   bb2de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb2e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb2e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb2e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb2ec:	e6a0      	b.n	bb030 <_strtod_l+0x88>
   bb2ee:	210a      	movs	r1, #10
   bb2f0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb2f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb2f8:	e7b9      	b.n	bb26e <_strtod_l+0x2c6>
   bb2fa:	2a6e      	cmp	r2, #110	; 0x6e
   bb2fc:	e7db      	b.n	bb2b6 <_strtod_l+0x30e>
   bb2fe:	4990      	ldr	r1, [pc, #576]	; (bb540 <_strtod_l+0x598>)
   bb300:	a817      	add	r0, sp, #92	; 0x5c
   bb302:	f001 f86d 	bl	bc3e0 <__match>
   bb306:	2800      	cmp	r0, #0
   bb308:	f43f aeb0 	beq.w	bb06c <_strtod_l+0xc4>
   bb30c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb30e:	498d      	ldr	r1, [pc, #564]	; (bb544 <_strtod_l+0x59c>)
   bb310:	3b01      	subs	r3, #1
   bb312:	a817      	add	r0, sp, #92	; 0x5c
   bb314:	9317      	str	r3, [sp, #92]	; 0x5c
   bb316:	f001 f863 	bl	bc3e0 <__match>
   bb31a:	b910      	cbnz	r0, bb322 <_strtod_l+0x37a>
   bb31c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb31e:	3301      	adds	r3, #1
   bb320:	9317      	str	r3, [sp, #92]	; 0x5c
   bb322:	f8df b230 	ldr.w	fp, [pc, #560]	; bb554 <_strtod_l+0x5ac>
   bb326:	f04f 0a00 	mov.w	sl, #0
   bb32a:	e681      	b.n	bb030 <_strtod_l+0x88>
   bb32c:	4886      	ldr	r0, [pc, #536]	; (bb548 <_strtod_l+0x5a0>)
   bb32e:	f001 fdef 	bl	bcf10 <nan>
   bb332:	ec5b ab10 	vmov	sl, fp, d0
   bb336:	e67b      	b.n	bb030 <_strtod_l+0x88>
   bb338:	9b05      	ldr	r3, [sp, #20]
   bb33a:	9807      	ldr	r0, [sp, #28]
   bb33c:	1af3      	subs	r3, r6, r3
   bb33e:	2f00      	cmp	r7, #0
   bb340:	bf08      	it	eq
   bb342:	462f      	moveq	r7, r5
   bb344:	2d10      	cmp	r5, #16
   bb346:	9306      	str	r3, [sp, #24]
   bb348:	46a8      	mov	r8, r5
   bb34a:	bfa8      	it	ge
   bb34c:	f04f 0810 	movge.w	r8, #16
   bb350:	f7ff f966 	bl	ba620 <__aeabi_ui2d>
   bb354:	2d09      	cmp	r5, #9
   bb356:	4682      	mov	sl, r0
   bb358:	468b      	mov	fp, r1
   bb35a:	dd13      	ble.n	bb384 <_strtod_l+0x3dc>
   bb35c:	4b7b      	ldr	r3, [pc, #492]	; (bb54c <_strtod_l+0x5a4>)
   bb35e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb362:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb366:	f7ff f9d5 	bl	ba714 <__aeabi_dmul>
   bb36a:	4682      	mov	sl, r0
   bb36c:	4648      	mov	r0, r9
   bb36e:	468b      	mov	fp, r1
   bb370:	f7ff f956 	bl	ba620 <__aeabi_ui2d>
   bb374:	4602      	mov	r2, r0
   bb376:	460b      	mov	r3, r1
   bb378:	4650      	mov	r0, sl
   bb37a:	4659      	mov	r1, fp
   bb37c:	f7ff f814 	bl	ba3a8 <__adddf3>
   bb380:	4682      	mov	sl, r0
   bb382:	468b      	mov	fp, r1
   bb384:	2d0f      	cmp	r5, #15
   bb386:	dc38      	bgt.n	bb3fa <_strtod_l+0x452>
   bb388:	9b06      	ldr	r3, [sp, #24]
   bb38a:	2b00      	cmp	r3, #0
   bb38c:	f43f ae50 	beq.w	bb030 <_strtod_l+0x88>
   bb390:	dd24      	ble.n	bb3dc <_strtod_l+0x434>
   bb392:	2b16      	cmp	r3, #22
   bb394:	dc0b      	bgt.n	bb3ae <_strtod_l+0x406>
   bb396:	496d      	ldr	r1, [pc, #436]	; (bb54c <_strtod_l+0x5a4>)
   bb398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb39c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb3a0:	4652      	mov	r2, sl
   bb3a2:	465b      	mov	r3, fp
   bb3a4:	f7ff f9b6 	bl	ba714 <__aeabi_dmul>
   bb3a8:	4682      	mov	sl, r0
   bb3aa:	468b      	mov	fp, r1
   bb3ac:	e640      	b.n	bb030 <_strtod_l+0x88>
   bb3ae:	9a06      	ldr	r2, [sp, #24]
   bb3b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb3b4:	4293      	cmp	r3, r2
   bb3b6:	db20      	blt.n	bb3fa <_strtod_l+0x452>
   bb3b8:	4c64      	ldr	r4, [pc, #400]	; (bb54c <_strtod_l+0x5a4>)
   bb3ba:	f1c5 050f 	rsb	r5, r5, #15
   bb3be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb3c2:	4652      	mov	r2, sl
   bb3c4:	465b      	mov	r3, fp
   bb3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb3ca:	f7ff f9a3 	bl	ba714 <__aeabi_dmul>
   bb3ce:	9b06      	ldr	r3, [sp, #24]
   bb3d0:	1b5d      	subs	r5, r3, r5
   bb3d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb3d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb3da:	e7e3      	b.n	bb3a4 <_strtod_l+0x3fc>
   bb3dc:	9b06      	ldr	r3, [sp, #24]
   bb3de:	3316      	adds	r3, #22
   bb3e0:	db0b      	blt.n	bb3fa <_strtod_l+0x452>
   bb3e2:	9b05      	ldr	r3, [sp, #20]
   bb3e4:	1b9e      	subs	r6, r3, r6
   bb3e6:	4b59      	ldr	r3, [pc, #356]	; (bb54c <_strtod_l+0x5a4>)
   bb3e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb3ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb3f0:	4650      	mov	r0, sl
   bb3f2:	4659      	mov	r1, fp
   bb3f4:	f7ff fab8 	bl	ba968 <__aeabi_ddiv>
   bb3f8:	e7d6      	b.n	bb3a8 <_strtod_l+0x400>
   bb3fa:	9b06      	ldr	r3, [sp, #24]
   bb3fc:	eba5 0808 	sub.w	r8, r5, r8
   bb400:	4498      	add	r8, r3
   bb402:	f1b8 0f00 	cmp.w	r8, #0
   bb406:	dd74      	ble.n	bb4f2 <_strtod_l+0x54a>
   bb408:	f018 030f 	ands.w	r3, r8, #15
   bb40c:	d00a      	beq.n	bb424 <_strtod_l+0x47c>
   bb40e:	494f      	ldr	r1, [pc, #316]	; (bb54c <_strtod_l+0x5a4>)
   bb410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb414:	4652      	mov	r2, sl
   bb416:	465b      	mov	r3, fp
   bb418:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb41c:	f7ff f97a 	bl	ba714 <__aeabi_dmul>
   bb420:	4682      	mov	sl, r0
   bb422:	468b      	mov	fp, r1
   bb424:	f038 080f 	bics.w	r8, r8, #15
   bb428:	d04f      	beq.n	bb4ca <_strtod_l+0x522>
   bb42a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb42e:	dd22      	ble.n	bb476 <_strtod_l+0x4ce>
   bb430:	2500      	movs	r5, #0
   bb432:	462e      	mov	r6, r5
   bb434:	9507      	str	r5, [sp, #28]
   bb436:	9505      	str	r5, [sp, #20]
   bb438:	2322      	movs	r3, #34	; 0x22
   bb43a:	f8df b118 	ldr.w	fp, [pc, #280]	; bb554 <_strtod_l+0x5ac>
   bb43e:	6023      	str	r3, [r4, #0]
   bb440:	f04f 0a00 	mov.w	sl, #0
   bb444:	9b07      	ldr	r3, [sp, #28]
   bb446:	2b00      	cmp	r3, #0
   bb448:	f43f adf2 	beq.w	bb030 <_strtod_l+0x88>
   bb44c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb44e:	4620      	mov	r0, r4
   bb450:	f001 f8cc 	bl	bc5ec <_Bfree>
   bb454:	9905      	ldr	r1, [sp, #20]
   bb456:	4620      	mov	r0, r4
   bb458:	f001 f8c8 	bl	bc5ec <_Bfree>
   bb45c:	4631      	mov	r1, r6
   bb45e:	4620      	mov	r0, r4
   bb460:	f001 f8c4 	bl	bc5ec <_Bfree>
   bb464:	9907      	ldr	r1, [sp, #28]
   bb466:	4620      	mov	r0, r4
   bb468:	f001 f8c0 	bl	bc5ec <_Bfree>
   bb46c:	4629      	mov	r1, r5
   bb46e:	4620      	mov	r0, r4
   bb470:	f001 f8bc 	bl	bc5ec <_Bfree>
   bb474:	e5dc      	b.n	bb030 <_strtod_l+0x88>
   bb476:	4b36      	ldr	r3, [pc, #216]	; (bb550 <_strtod_l+0x5a8>)
   bb478:	9304      	str	r3, [sp, #16]
   bb47a:	2300      	movs	r3, #0
   bb47c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb480:	4650      	mov	r0, sl
   bb482:	4659      	mov	r1, fp
   bb484:	4699      	mov	r9, r3
   bb486:	f1b8 0f01 	cmp.w	r8, #1
   bb48a:	dc21      	bgt.n	bb4d0 <_strtod_l+0x528>
   bb48c:	b10b      	cbz	r3, bb492 <_strtod_l+0x4ea>
   bb48e:	4682      	mov	sl, r0
   bb490:	468b      	mov	fp, r1
   bb492:	4b2f      	ldr	r3, [pc, #188]	; (bb550 <_strtod_l+0x5a8>)
   bb494:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb498:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb49c:	4652      	mov	r2, sl
   bb49e:	465b      	mov	r3, fp
   bb4a0:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb4a4:	f7ff f936 	bl	ba714 <__aeabi_dmul>
   bb4a8:	4b2a      	ldr	r3, [pc, #168]	; (bb554 <_strtod_l+0x5ac>)
   bb4aa:	460a      	mov	r2, r1
   bb4ac:	400b      	ands	r3, r1
   bb4ae:	492a      	ldr	r1, [pc, #168]	; (bb558 <_strtod_l+0x5b0>)
   bb4b0:	428b      	cmp	r3, r1
   bb4b2:	4682      	mov	sl, r0
   bb4b4:	d8bc      	bhi.n	bb430 <_strtod_l+0x488>
   bb4b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb4ba:	428b      	cmp	r3, r1
   bb4bc:	bf86      	itte	hi
   bb4be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb55c <_strtod_l+0x5b4>
   bb4c2:	f04f 3aff 	movhi.w	sl, #4294967295
   bb4c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb4ca:	2300      	movs	r3, #0
   bb4cc:	9304      	str	r3, [sp, #16]
   bb4ce:	e084      	b.n	bb5da <_strtod_l+0x632>
   bb4d0:	f018 0f01 	tst.w	r8, #1
   bb4d4:	d005      	beq.n	bb4e2 <_strtod_l+0x53a>
   bb4d6:	9b04      	ldr	r3, [sp, #16]
   bb4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb4dc:	f7ff f91a 	bl	ba714 <__aeabi_dmul>
   bb4e0:	2301      	movs	r3, #1
   bb4e2:	9a04      	ldr	r2, [sp, #16]
   bb4e4:	3208      	adds	r2, #8
   bb4e6:	f109 0901 	add.w	r9, r9, #1
   bb4ea:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb4ee:	9204      	str	r2, [sp, #16]
   bb4f0:	e7c9      	b.n	bb486 <_strtod_l+0x4de>
   bb4f2:	d0ea      	beq.n	bb4ca <_strtod_l+0x522>
   bb4f4:	f1c8 0800 	rsb	r8, r8, #0
   bb4f8:	f018 020f 	ands.w	r2, r8, #15
   bb4fc:	d00a      	beq.n	bb514 <_strtod_l+0x56c>
   bb4fe:	4b13      	ldr	r3, [pc, #76]	; (bb54c <_strtod_l+0x5a4>)
   bb500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb504:	4650      	mov	r0, sl
   bb506:	4659      	mov	r1, fp
   bb508:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb50c:	f7ff fa2c 	bl	ba968 <__aeabi_ddiv>
   bb510:	4682      	mov	sl, r0
   bb512:	468b      	mov	fp, r1
   bb514:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb518:	d0d7      	beq.n	bb4ca <_strtod_l+0x522>
   bb51a:	f1b8 0f1f 	cmp.w	r8, #31
   bb51e:	dd1f      	ble.n	bb560 <_strtod_l+0x5b8>
   bb520:	2500      	movs	r5, #0
   bb522:	462e      	mov	r6, r5
   bb524:	9507      	str	r5, [sp, #28]
   bb526:	9505      	str	r5, [sp, #20]
   bb528:	2322      	movs	r3, #34	; 0x22
   bb52a:	f04f 0a00 	mov.w	sl, #0
   bb52e:	f04f 0b00 	mov.w	fp, #0
   bb532:	6023      	str	r3, [r4, #0]
   bb534:	e786      	b.n	bb444 <_strtod_l+0x49c>
   bb536:	bf00      	nop
   bb538:	000bd665 	.word	0x000bd665
   bb53c:	000bdd58 	.word	0x000bdd58
   bb540:	000bdd3a 	.word	0x000bdd3a
   bb544:	000bdd3d 	.word	0x000bdd3d
   bb548:	000bd64e 	.word	0x000bd64e
   bb54c:	000bdf70 	.word	0x000bdf70
   bb550:	000bdf48 	.word	0x000bdf48
   bb554:	7ff00000 	.word	0x7ff00000
   bb558:	7ca00000 	.word	0x7ca00000
   bb55c:	7fefffff 	.word	0x7fefffff
   bb560:	f018 0310 	ands.w	r3, r8, #16
   bb564:	bf18      	it	ne
   bb566:	236a      	movne	r3, #106	; 0x6a
   bb568:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bb918 <_strtod_l+0x970>
   bb56c:	9304      	str	r3, [sp, #16]
   bb56e:	4650      	mov	r0, sl
   bb570:	4659      	mov	r1, fp
   bb572:	2300      	movs	r3, #0
   bb574:	f018 0f01 	tst.w	r8, #1
   bb578:	d004      	beq.n	bb584 <_strtod_l+0x5dc>
   bb57a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb57e:	f7ff f8c9 	bl	ba714 <__aeabi_dmul>
   bb582:	2301      	movs	r3, #1
   bb584:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb588:	f109 0908 	add.w	r9, r9, #8
   bb58c:	d1f2      	bne.n	bb574 <_strtod_l+0x5cc>
   bb58e:	b10b      	cbz	r3, bb594 <_strtod_l+0x5ec>
   bb590:	4682      	mov	sl, r0
   bb592:	468b      	mov	fp, r1
   bb594:	9b04      	ldr	r3, [sp, #16]
   bb596:	b1c3      	cbz	r3, bb5ca <_strtod_l+0x622>
   bb598:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb59c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb5a0:	2b00      	cmp	r3, #0
   bb5a2:	4659      	mov	r1, fp
   bb5a4:	dd11      	ble.n	bb5ca <_strtod_l+0x622>
   bb5a6:	2b1f      	cmp	r3, #31
   bb5a8:	f340 8124 	ble.w	bb7f4 <_strtod_l+0x84c>
   bb5ac:	2b34      	cmp	r3, #52	; 0x34
   bb5ae:	bfde      	ittt	le
   bb5b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb5b4:	f04f 33ff 	movle.w	r3, #4294967295
   bb5b8:	fa03 f202 	lslle.w	r2, r3, r2
   bb5bc:	f04f 0a00 	mov.w	sl, #0
   bb5c0:	bfcc      	ite	gt
   bb5c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb5c6:	ea02 0b01 	andle.w	fp, r2, r1
   bb5ca:	2200      	movs	r2, #0
   bb5cc:	2300      	movs	r3, #0
   bb5ce:	4650      	mov	r0, sl
   bb5d0:	4659      	mov	r1, fp
   bb5d2:	f7ff fb07 	bl	babe4 <__aeabi_dcmpeq>
   bb5d6:	2800      	cmp	r0, #0
   bb5d8:	d1a2      	bne.n	bb520 <_strtod_l+0x578>
   bb5da:	9b07      	ldr	r3, [sp, #28]
   bb5dc:	9300      	str	r3, [sp, #0]
   bb5de:	9908      	ldr	r1, [sp, #32]
   bb5e0:	462b      	mov	r3, r5
   bb5e2:	463a      	mov	r2, r7
   bb5e4:	4620      	mov	r0, r4
   bb5e6:	f001 f869 	bl	bc6bc <__s2b>
   bb5ea:	9007      	str	r0, [sp, #28]
   bb5ec:	2800      	cmp	r0, #0
   bb5ee:	f43f af1f 	beq.w	bb430 <_strtod_l+0x488>
   bb5f2:	9b05      	ldr	r3, [sp, #20]
   bb5f4:	1b9e      	subs	r6, r3, r6
   bb5f6:	9b06      	ldr	r3, [sp, #24]
   bb5f8:	2b00      	cmp	r3, #0
   bb5fa:	bfb4      	ite	lt
   bb5fc:	4633      	movlt	r3, r6
   bb5fe:	2300      	movge	r3, #0
   bb600:	930c      	str	r3, [sp, #48]	; 0x30
   bb602:	9b06      	ldr	r3, [sp, #24]
   bb604:	2500      	movs	r5, #0
   bb606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb60a:	9312      	str	r3, [sp, #72]	; 0x48
   bb60c:	462e      	mov	r6, r5
   bb60e:	9b07      	ldr	r3, [sp, #28]
   bb610:	4620      	mov	r0, r4
   bb612:	6859      	ldr	r1, [r3, #4]
   bb614:	f000 ffaa 	bl	bc56c <_Balloc>
   bb618:	9005      	str	r0, [sp, #20]
   bb61a:	2800      	cmp	r0, #0
   bb61c:	f43f af0c 	beq.w	bb438 <_strtod_l+0x490>
   bb620:	9b07      	ldr	r3, [sp, #28]
   bb622:	691a      	ldr	r2, [r3, #16]
   bb624:	3202      	adds	r2, #2
   bb626:	f103 010c 	add.w	r1, r3, #12
   bb62a:	0092      	lsls	r2, r2, #2
   bb62c:	300c      	adds	r0, #12
   bb62e:	f7ff fbc2 	bl	badb6 <memcpy>
   bb632:	ec4b ab10 	vmov	d0, sl, fp
   bb636:	aa1a      	add	r2, sp, #104	; 0x68
   bb638:	a919      	add	r1, sp, #100	; 0x64
   bb63a:	4620      	mov	r0, r4
   bb63c:	f001 fb84 	bl	bcd48 <__d2b>
   bb640:	ec4b ab18 	vmov	d8, sl, fp
   bb644:	9018      	str	r0, [sp, #96]	; 0x60
   bb646:	2800      	cmp	r0, #0
   bb648:	f43f aef6 	beq.w	bb438 <_strtod_l+0x490>
   bb64c:	2101      	movs	r1, #1
   bb64e:	4620      	mov	r0, r4
   bb650:	f001 f8ce 	bl	bc7f0 <__i2b>
   bb654:	4606      	mov	r6, r0
   bb656:	2800      	cmp	r0, #0
   bb658:	f43f aeee 	beq.w	bb438 <_strtod_l+0x490>
   bb65c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb65e:	9904      	ldr	r1, [sp, #16]
   bb660:	2b00      	cmp	r3, #0
   bb662:	bfab      	itete	ge
   bb664:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb666:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb668:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb66a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb66e:	bfac      	ite	ge
   bb670:	eb03 0902 	addge.w	r9, r3, r2
   bb674:	1ad7      	sublt	r7, r2, r3
   bb676:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb678:	eba3 0801 	sub.w	r8, r3, r1
   bb67c:	4490      	add	r8, r2
   bb67e:	4ba1      	ldr	r3, [pc, #644]	; (bb904 <_strtod_l+0x95c>)
   bb680:	f108 38ff 	add.w	r8, r8, #4294967295
   bb684:	4598      	cmp	r8, r3
   bb686:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb68a:	f280 80c7 	bge.w	bb81c <_strtod_l+0x874>
   bb68e:	eba3 0308 	sub.w	r3, r3, r8
   bb692:	2b1f      	cmp	r3, #31
   bb694:	eba2 0203 	sub.w	r2, r2, r3
   bb698:	f04f 0101 	mov.w	r1, #1
   bb69c:	f300 80b1 	bgt.w	bb802 <_strtod_l+0x85a>
   bb6a0:	fa01 f303 	lsl.w	r3, r1, r3
   bb6a4:	930d      	str	r3, [sp, #52]	; 0x34
   bb6a6:	2300      	movs	r3, #0
   bb6a8:	9308      	str	r3, [sp, #32]
   bb6aa:	eb09 0802 	add.w	r8, r9, r2
   bb6ae:	9b04      	ldr	r3, [sp, #16]
   bb6b0:	45c1      	cmp	r9, r8
   bb6b2:	4417      	add	r7, r2
   bb6b4:	441f      	add	r7, r3
   bb6b6:	464b      	mov	r3, r9
   bb6b8:	bfa8      	it	ge
   bb6ba:	4643      	movge	r3, r8
   bb6bc:	42bb      	cmp	r3, r7
   bb6be:	bfa8      	it	ge
   bb6c0:	463b      	movge	r3, r7
   bb6c2:	2b00      	cmp	r3, #0
   bb6c4:	bfc2      	ittt	gt
   bb6c6:	eba8 0803 	subgt.w	r8, r8, r3
   bb6ca:	1aff      	subgt	r7, r7, r3
   bb6cc:	eba9 0903 	subgt.w	r9, r9, r3
   bb6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb6d2:	2b00      	cmp	r3, #0
   bb6d4:	dd17      	ble.n	bb706 <_strtod_l+0x75e>
   bb6d6:	4631      	mov	r1, r6
   bb6d8:	461a      	mov	r2, r3
   bb6da:	4620      	mov	r0, r4
   bb6dc:	f001 f948 	bl	bc970 <__pow5mult>
   bb6e0:	4606      	mov	r6, r0
   bb6e2:	2800      	cmp	r0, #0
   bb6e4:	f43f aea8 	beq.w	bb438 <_strtod_l+0x490>
   bb6e8:	4601      	mov	r1, r0
   bb6ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb6ec:	4620      	mov	r0, r4
   bb6ee:	f001 f895 	bl	bc81c <__multiply>
   bb6f2:	900b      	str	r0, [sp, #44]	; 0x2c
   bb6f4:	2800      	cmp	r0, #0
   bb6f6:	f43f ae9f 	beq.w	bb438 <_strtod_l+0x490>
   bb6fa:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb6fc:	4620      	mov	r0, r4
   bb6fe:	f000 ff75 	bl	bc5ec <_Bfree>
   bb702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb704:	9318      	str	r3, [sp, #96]	; 0x60
   bb706:	f1b8 0f00 	cmp.w	r8, #0
   bb70a:	f300 808c 	bgt.w	bb826 <_strtod_l+0x87e>
   bb70e:	9b06      	ldr	r3, [sp, #24]
   bb710:	2b00      	cmp	r3, #0
   bb712:	dd08      	ble.n	bb726 <_strtod_l+0x77e>
   bb714:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb716:	9905      	ldr	r1, [sp, #20]
   bb718:	4620      	mov	r0, r4
   bb71a:	f001 f929 	bl	bc970 <__pow5mult>
   bb71e:	9005      	str	r0, [sp, #20]
   bb720:	2800      	cmp	r0, #0
   bb722:	f43f ae89 	beq.w	bb438 <_strtod_l+0x490>
   bb726:	2f00      	cmp	r7, #0
   bb728:	dd08      	ble.n	bb73c <_strtod_l+0x794>
   bb72a:	9905      	ldr	r1, [sp, #20]
   bb72c:	463a      	mov	r2, r7
   bb72e:	4620      	mov	r0, r4
   bb730:	f001 f978 	bl	bca24 <__lshift>
   bb734:	9005      	str	r0, [sp, #20]
   bb736:	2800      	cmp	r0, #0
   bb738:	f43f ae7e 	beq.w	bb438 <_strtod_l+0x490>
   bb73c:	f1b9 0f00 	cmp.w	r9, #0
   bb740:	dd08      	ble.n	bb754 <_strtod_l+0x7ac>
   bb742:	4631      	mov	r1, r6
   bb744:	464a      	mov	r2, r9
   bb746:	4620      	mov	r0, r4
   bb748:	f001 f96c 	bl	bca24 <__lshift>
   bb74c:	4606      	mov	r6, r0
   bb74e:	2800      	cmp	r0, #0
   bb750:	f43f ae72 	beq.w	bb438 <_strtod_l+0x490>
   bb754:	9a05      	ldr	r2, [sp, #20]
   bb756:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb758:	4620      	mov	r0, r4
   bb75a:	f001 f9ef 	bl	bcb3c <__mdiff>
   bb75e:	4605      	mov	r5, r0
   bb760:	2800      	cmp	r0, #0
   bb762:	f43f ae69 	beq.w	bb438 <_strtod_l+0x490>
   bb766:	68c3      	ldr	r3, [r0, #12]
   bb768:	930b      	str	r3, [sp, #44]	; 0x2c
   bb76a:	2300      	movs	r3, #0
   bb76c:	60c3      	str	r3, [r0, #12]
   bb76e:	4631      	mov	r1, r6
   bb770:	f001 f9c8 	bl	bcb04 <__mcmp>
   bb774:	2800      	cmp	r0, #0
   bb776:	da60      	bge.n	bb83a <_strtod_l+0x892>
   bb778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb77a:	ea53 030a 	orrs.w	r3, r3, sl
   bb77e:	f040 8082 	bne.w	bb886 <_strtod_l+0x8de>
   bb782:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb786:	2b00      	cmp	r3, #0
   bb788:	d17d      	bne.n	bb886 <_strtod_l+0x8de>
   bb78a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb78e:	0d1b      	lsrs	r3, r3, #20
   bb790:	051b      	lsls	r3, r3, #20
   bb792:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bb796:	d976      	bls.n	bb886 <_strtod_l+0x8de>
   bb798:	696b      	ldr	r3, [r5, #20]
   bb79a:	b913      	cbnz	r3, bb7a2 <_strtod_l+0x7fa>
   bb79c:	692b      	ldr	r3, [r5, #16]
   bb79e:	2b01      	cmp	r3, #1
   bb7a0:	dd71      	ble.n	bb886 <_strtod_l+0x8de>
   bb7a2:	4629      	mov	r1, r5
   bb7a4:	2201      	movs	r2, #1
   bb7a6:	4620      	mov	r0, r4
   bb7a8:	f001 f93c 	bl	bca24 <__lshift>
   bb7ac:	4631      	mov	r1, r6
   bb7ae:	4605      	mov	r5, r0
   bb7b0:	f001 f9a8 	bl	bcb04 <__mcmp>
   bb7b4:	2800      	cmp	r0, #0
   bb7b6:	dd66      	ble.n	bb886 <_strtod_l+0x8de>
   bb7b8:	9904      	ldr	r1, [sp, #16]
   bb7ba:	4a53      	ldr	r2, [pc, #332]	; (bb908 <_strtod_l+0x960>)
   bb7bc:	465b      	mov	r3, fp
   bb7be:	2900      	cmp	r1, #0
   bb7c0:	f000 8081 	beq.w	bb8c6 <_strtod_l+0x91e>
   bb7c4:	ea02 010b 	and.w	r1, r2, fp
   bb7c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bb7cc:	dc7b      	bgt.n	bb8c6 <_strtod_l+0x91e>
   bb7ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bb7d2:	f77f aea9 	ble.w	bb528 <_strtod_l+0x580>
   bb7d6:	4b4d      	ldr	r3, [pc, #308]	; (bb90c <_strtod_l+0x964>)
   bb7d8:	4650      	mov	r0, sl
   bb7da:	4659      	mov	r1, fp
   bb7dc:	2200      	movs	r2, #0
   bb7de:	f7fe ff99 	bl	ba714 <__aeabi_dmul>
   bb7e2:	460b      	mov	r3, r1
   bb7e4:	4303      	orrs	r3, r0
   bb7e6:	bf08      	it	eq
   bb7e8:	2322      	moveq	r3, #34	; 0x22
   bb7ea:	4682      	mov	sl, r0
   bb7ec:	468b      	mov	fp, r1
   bb7ee:	bf08      	it	eq
   bb7f0:	6023      	streq	r3, [r4, #0]
   bb7f2:	e62b      	b.n	bb44c <_strtod_l+0x4a4>
   bb7f4:	f04f 32ff 	mov.w	r2, #4294967295
   bb7f8:	fa02 f303 	lsl.w	r3, r2, r3
   bb7fc:	ea03 0a0a 	and.w	sl, r3, sl
   bb800:	e6e3      	b.n	bb5ca <_strtod_l+0x622>
   bb802:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bb806:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bb80a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bb80e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bb812:	fa01 f308 	lsl.w	r3, r1, r8
   bb816:	9308      	str	r3, [sp, #32]
   bb818:	910d      	str	r1, [sp, #52]	; 0x34
   bb81a:	e746      	b.n	bb6aa <_strtod_l+0x702>
   bb81c:	2300      	movs	r3, #0
   bb81e:	9308      	str	r3, [sp, #32]
   bb820:	2301      	movs	r3, #1
   bb822:	930d      	str	r3, [sp, #52]	; 0x34
   bb824:	e741      	b.n	bb6aa <_strtod_l+0x702>
   bb826:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb828:	4642      	mov	r2, r8
   bb82a:	4620      	mov	r0, r4
   bb82c:	f001 f8fa 	bl	bca24 <__lshift>
   bb830:	9018      	str	r0, [sp, #96]	; 0x60
   bb832:	2800      	cmp	r0, #0
   bb834:	f47f af6b 	bne.w	bb70e <_strtod_l+0x766>
   bb838:	e5fe      	b.n	bb438 <_strtod_l+0x490>
   bb83a:	465f      	mov	r7, fp
   bb83c:	d16e      	bne.n	bb91c <_strtod_l+0x974>
   bb83e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb840:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb844:	b342      	cbz	r2, bb898 <_strtod_l+0x8f0>
   bb846:	4a32      	ldr	r2, [pc, #200]	; (bb910 <_strtod_l+0x968>)
   bb848:	4293      	cmp	r3, r2
   bb84a:	d128      	bne.n	bb89e <_strtod_l+0x8f6>
   bb84c:	9b04      	ldr	r3, [sp, #16]
   bb84e:	4651      	mov	r1, sl
   bb850:	b1eb      	cbz	r3, bb88e <_strtod_l+0x8e6>
   bb852:	4b2d      	ldr	r3, [pc, #180]	; (bb908 <_strtod_l+0x960>)
   bb854:	403b      	ands	r3, r7
   bb856:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb85a:	f04f 32ff 	mov.w	r2, #4294967295
   bb85e:	d819      	bhi.n	bb894 <_strtod_l+0x8ec>
   bb860:	0d1b      	lsrs	r3, r3, #20
   bb862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb866:	fa02 f303 	lsl.w	r3, r2, r3
   bb86a:	4299      	cmp	r1, r3
   bb86c:	d117      	bne.n	bb89e <_strtod_l+0x8f6>
   bb86e:	4b29      	ldr	r3, [pc, #164]	; (bb914 <_strtod_l+0x96c>)
   bb870:	429f      	cmp	r7, r3
   bb872:	d102      	bne.n	bb87a <_strtod_l+0x8d2>
   bb874:	3101      	adds	r1, #1
   bb876:	f43f addf 	beq.w	bb438 <_strtod_l+0x490>
   bb87a:	4b23      	ldr	r3, [pc, #140]	; (bb908 <_strtod_l+0x960>)
   bb87c:	403b      	ands	r3, r7
   bb87e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bb882:	f04f 0a00 	mov.w	sl, #0
   bb886:	9b04      	ldr	r3, [sp, #16]
   bb888:	2b00      	cmp	r3, #0
   bb88a:	d1a4      	bne.n	bb7d6 <_strtod_l+0x82e>
   bb88c:	e5de      	b.n	bb44c <_strtod_l+0x4a4>
   bb88e:	f04f 33ff 	mov.w	r3, #4294967295
   bb892:	e7ea      	b.n	bb86a <_strtod_l+0x8c2>
   bb894:	4613      	mov	r3, r2
   bb896:	e7e8      	b.n	bb86a <_strtod_l+0x8c2>
   bb898:	ea53 030a 	orrs.w	r3, r3, sl
   bb89c:	d08c      	beq.n	bb7b8 <_strtod_l+0x810>
   bb89e:	9b08      	ldr	r3, [sp, #32]
   bb8a0:	b1db      	cbz	r3, bb8da <_strtod_l+0x932>
   bb8a2:	423b      	tst	r3, r7
   bb8a4:	d0ef      	beq.n	bb886 <_strtod_l+0x8de>
   bb8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb8a8:	9a04      	ldr	r2, [sp, #16]
   bb8aa:	4650      	mov	r0, sl
   bb8ac:	4659      	mov	r1, fp
   bb8ae:	b1c3      	cbz	r3, bb8e2 <_strtod_l+0x93a>
   bb8b0:	f7ff fb5d 	bl	baf6e <sulp>
   bb8b4:	4602      	mov	r2, r0
   bb8b6:	460b      	mov	r3, r1
   bb8b8:	ec51 0b18 	vmov	r0, r1, d8
   bb8bc:	f7fe fd74 	bl	ba3a8 <__adddf3>
   bb8c0:	4682      	mov	sl, r0
   bb8c2:	468b      	mov	fp, r1
   bb8c4:	e7df      	b.n	bb886 <_strtod_l+0x8de>
   bb8c6:	4013      	ands	r3, r2
   bb8c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bb8cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bb8d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bb8d4:	f04f 3aff 	mov.w	sl, #4294967295
   bb8d8:	e7d5      	b.n	bb886 <_strtod_l+0x8de>
   bb8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb8dc:	ea13 0f0a 	tst.w	r3, sl
   bb8e0:	e7e0      	b.n	bb8a4 <_strtod_l+0x8fc>
   bb8e2:	f7ff fb44 	bl	baf6e <sulp>
   bb8e6:	4602      	mov	r2, r0
   bb8e8:	460b      	mov	r3, r1
   bb8ea:	ec51 0b18 	vmov	r0, r1, d8
   bb8ee:	f7fe fd59 	bl	ba3a4 <__aeabi_dsub>
   bb8f2:	2200      	movs	r2, #0
   bb8f4:	2300      	movs	r3, #0
   bb8f6:	4682      	mov	sl, r0
   bb8f8:	468b      	mov	fp, r1
   bb8fa:	f7ff f973 	bl	babe4 <__aeabi_dcmpeq>
   bb8fe:	2800      	cmp	r0, #0
   bb900:	d0c1      	beq.n	bb886 <_strtod_l+0x8de>
   bb902:	e611      	b.n	bb528 <_strtod_l+0x580>
   bb904:	fffffc02 	.word	0xfffffc02
   bb908:	7ff00000 	.word	0x7ff00000
   bb90c:	39500000 	.word	0x39500000
   bb910:	000fffff 	.word	0x000fffff
   bb914:	7fefffff 	.word	0x7fefffff
   bb918:	000bdd70 	.word	0x000bdd70
   bb91c:	4631      	mov	r1, r6
   bb91e:	4628      	mov	r0, r5
   bb920:	f001 fa6e 	bl	bce00 <__ratio>
   bb924:	ec59 8b10 	vmov	r8, r9, d0
   bb928:	ee10 0a10 	vmov	r0, s0
   bb92c:	2200      	movs	r2, #0
   bb92e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb932:	4649      	mov	r1, r9
   bb934:	f7ff f96a 	bl	bac0c <__aeabi_dcmple>
   bb938:	2800      	cmp	r0, #0
   bb93a:	d07a      	beq.n	bba32 <_strtod_l+0xa8a>
   bb93c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb93e:	2b00      	cmp	r3, #0
   bb940:	d04a      	beq.n	bb9d8 <_strtod_l+0xa30>
   bb942:	4b95      	ldr	r3, [pc, #596]	; (bbb98 <_strtod_l+0xbf0>)
   bb944:	2200      	movs	r2, #0
   bb946:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb94a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bbb98 <_strtod_l+0xbf0>
   bb94e:	f04f 0800 	mov.w	r8, #0
   bb952:	4b92      	ldr	r3, [pc, #584]	; (bbb9c <_strtod_l+0xbf4>)
   bb954:	403b      	ands	r3, r7
   bb956:	930d      	str	r3, [sp, #52]	; 0x34
   bb958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb95a:	4b91      	ldr	r3, [pc, #580]	; (bbba0 <_strtod_l+0xbf8>)
   bb95c:	429a      	cmp	r2, r3
   bb95e:	f040 80b0 	bne.w	bbac2 <_strtod_l+0xb1a>
   bb962:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb966:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bb96a:	ec4b ab10 	vmov	d0, sl, fp
   bb96e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb972:	f001 f96d 	bl	bcc50 <__ulp>
   bb976:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb97a:	ec53 2b10 	vmov	r2, r3, d0
   bb97e:	f7fe fec9 	bl	ba714 <__aeabi_dmul>
   bb982:	4652      	mov	r2, sl
   bb984:	465b      	mov	r3, fp
   bb986:	f7fe fd0f 	bl	ba3a8 <__adddf3>
   bb98a:	460b      	mov	r3, r1
   bb98c:	4983      	ldr	r1, [pc, #524]	; (bbb9c <_strtod_l+0xbf4>)
   bb98e:	4a85      	ldr	r2, [pc, #532]	; (bbba4 <_strtod_l+0xbfc>)
   bb990:	4019      	ands	r1, r3
   bb992:	4291      	cmp	r1, r2
   bb994:	4682      	mov	sl, r0
   bb996:	d960      	bls.n	bba5a <_strtod_l+0xab2>
   bb998:	ee18 3a90 	vmov	r3, s17
   bb99c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bb9a0:	4293      	cmp	r3, r2
   bb9a2:	d104      	bne.n	bb9ae <_strtod_l+0xa06>
   bb9a4:	ee18 3a10 	vmov	r3, s16
   bb9a8:	3301      	adds	r3, #1
   bb9aa:	f43f ad45 	beq.w	bb438 <_strtod_l+0x490>
   bb9ae:	f8df b200 	ldr.w	fp, [pc, #512]	; bbbb0 <_strtod_l+0xc08>
   bb9b2:	f04f 3aff 	mov.w	sl, #4294967295
   bb9b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb9b8:	4620      	mov	r0, r4
   bb9ba:	f000 fe17 	bl	bc5ec <_Bfree>
   bb9be:	9905      	ldr	r1, [sp, #20]
   bb9c0:	4620      	mov	r0, r4
   bb9c2:	f000 fe13 	bl	bc5ec <_Bfree>
   bb9c6:	4631      	mov	r1, r6
   bb9c8:	4620      	mov	r0, r4
   bb9ca:	f000 fe0f 	bl	bc5ec <_Bfree>
   bb9ce:	4629      	mov	r1, r5
   bb9d0:	4620      	mov	r0, r4
   bb9d2:	f000 fe0b 	bl	bc5ec <_Bfree>
   bb9d6:	e61a      	b.n	bb60e <_strtod_l+0x666>
   bb9d8:	f1ba 0f00 	cmp.w	sl, #0
   bb9dc:	d11b      	bne.n	bba16 <_strtod_l+0xa6e>
   bb9de:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb9e2:	b9f3      	cbnz	r3, bba22 <_strtod_l+0xa7a>
   bb9e4:	4b6c      	ldr	r3, [pc, #432]	; (bbb98 <_strtod_l+0xbf0>)
   bb9e6:	2200      	movs	r2, #0
   bb9e8:	4640      	mov	r0, r8
   bb9ea:	4649      	mov	r1, r9
   bb9ec:	f7ff f904 	bl	babf8 <__aeabi_dcmplt>
   bb9f0:	b9d0      	cbnz	r0, bba28 <_strtod_l+0xa80>
   bb9f2:	4640      	mov	r0, r8
   bb9f4:	4649      	mov	r1, r9
   bb9f6:	4b6c      	ldr	r3, [pc, #432]	; (bbba8 <_strtod_l+0xc00>)
   bb9f8:	2200      	movs	r2, #0
   bb9fa:	f7fe fe8b 	bl	ba714 <__aeabi_dmul>
   bb9fe:	4680      	mov	r8, r0
   bba00:	4689      	mov	r9, r1
   bba02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bba06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bba0a:	9315      	str	r3, [sp, #84]	; 0x54
   bba0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bba10:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bba14:	e79d      	b.n	bb952 <_strtod_l+0x9aa>
   bba16:	f1ba 0f01 	cmp.w	sl, #1
   bba1a:	d102      	bne.n	bba22 <_strtod_l+0xa7a>
   bba1c:	2f00      	cmp	r7, #0
   bba1e:	f43f ad83 	beq.w	bb528 <_strtod_l+0x580>
   bba22:	4b62      	ldr	r3, [pc, #392]	; (bbbac <_strtod_l+0xc04>)
   bba24:	2200      	movs	r2, #0
   bba26:	e78e      	b.n	bb946 <_strtod_l+0x99e>
   bba28:	f8df 917c 	ldr.w	r9, [pc, #380]	; bbba8 <_strtod_l+0xc00>
   bba2c:	f04f 0800 	mov.w	r8, #0
   bba30:	e7e7      	b.n	bba02 <_strtod_l+0xa5a>
   bba32:	4b5d      	ldr	r3, [pc, #372]	; (bbba8 <_strtod_l+0xc00>)
   bba34:	4640      	mov	r0, r8
   bba36:	4649      	mov	r1, r9
   bba38:	2200      	movs	r2, #0
   bba3a:	f7fe fe6b 	bl	ba714 <__aeabi_dmul>
   bba3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bba40:	4680      	mov	r8, r0
   bba42:	4689      	mov	r9, r1
   bba44:	b933      	cbnz	r3, bba54 <_strtod_l+0xaac>
   bba46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bba4a:	900e      	str	r0, [sp, #56]	; 0x38
   bba4c:	930f      	str	r3, [sp, #60]	; 0x3c
   bba4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bba52:	e7dd      	b.n	bba10 <_strtod_l+0xa68>
   bba54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bba58:	e7f9      	b.n	bba4e <_strtod_l+0xaa6>
   bba5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bba5e:	9b04      	ldr	r3, [sp, #16]
   bba60:	2b00      	cmp	r3, #0
   bba62:	d1a8      	bne.n	bb9b6 <_strtod_l+0xa0e>
   bba64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bba68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bba6a:	0d1b      	lsrs	r3, r3, #20
   bba6c:	051b      	lsls	r3, r3, #20
   bba6e:	429a      	cmp	r2, r3
   bba70:	d1a1      	bne.n	bb9b6 <_strtod_l+0xa0e>
   bba72:	4640      	mov	r0, r8
   bba74:	4649      	mov	r1, r9
   bba76:	f001 fa61 	bl	bcf3c <__aeabi_d2lz>
   bba7a:	f7fe fe1d 	bl	ba6b8 <__aeabi_l2d>
   bba7e:	4602      	mov	r2, r0
   bba80:	460b      	mov	r3, r1
   bba82:	4640      	mov	r0, r8
   bba84:	4649      	mov	r1, r9
   bba86:	f7fe fc8d 	bl	ba3a4 <__aeabi_dsub>
   bba8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bba8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bba90:	ea43 030a 	orr.w	r3, r3, sl
   bba94:	4313      	orrs	r3, r2
   bba96:	4680      	mov	r8, r0
   bba98:	4689      	mov	r9, r1
   bba9a:	d055      	beq.n	bbb48 <_strtod_l+0xba0>
   bba9c:	a336      	add	r3, pc, #216	; (adr r3, bbb78 <_strtod_l+0xbd0>)
   bba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbaa2:	f7ff f8a9 	bl	babf8 <__aeabi_dcmplt>
   bbaa6:	2800      	cmp	r0, #0
   bbaa8:	f47f acd0 	bne.w	bb44c <_strtod_l+0x4a4>
   bbaac:	a334      	add	r3, pc, #208	; (adr r3, bbb80 <_strtod_l+0xbd8>)
   bbaae:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbab2:	4640      	mov	r0, r8
   bbab4:	4649      	mov	r1, r9
   bbab6:	f7ff f8bd 	bl	bac34 <__aeabi_dcmpgt>
   bbaba:	2800      	cmp	r0, #0
   bbabc:	f43f af7b 	beq.w	bb9b6 <_strtod_l+0xa0e>
   bbac0:	e4c4      	b.n	bb44c <_strtod_l+0x4a4>
   bbac2:	9b04      	ldr	r3, [sp, #16]
   bbac4:	b333      	cbz	r3, bbb14 <_strtod_l+0xb6c>
   bbac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbac8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbacc:	d822      	bhi.n	bbb14 <_strtod_l+0xb6c>
   bbace:	a32e      	add	r3, pc, #184	; (adr r3, bbb88 <_strtod_l+0xbe0>)
   bbad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbad4:	4640      	mov	r0, r8
   bbad6:	4649      	mov	r1, r9
   bbad8:	f7ff f898 	bl	bac0c <__aeabi_dcmple>
   bbadc:	b1a0      	cbz	r0, bbb08 <_strtod_l+0xb60>
   bbade:	4649      	mov	r1, r9
   bbae0:	4640      	mov	r0, r8
   bbae2:	f7ff f8d9 	bl	bac98 <__aeabi_d2uiz>
   bbae6:	2801      	cmp	r0, #1
   bbae8:	bf38      	it	cc
   bbaea:	2001      	movcc	r0, #1
   bbaec:	f7fe fd98 	bl	ba620 <__aeabi_ui2d>
   bbaf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbaf2:	4680      	mov	r8, r0
   bbaf4:	4689      	mov	r9, r1
   bbaf6:	bb23      	cbnz	r3, bbb42 <_strtod_l+0xb9a>
   bbaf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbafc:	9010      	str	r0, [sp, #64]	; 0x40
   bbafe:	9311      	str	r3, [sp, #68]	; 0x44
   bbb00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bbb04:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbb0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbb0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bbb10:	1a9b      	subs	r3, r3, r2
   bbb12:	9309      	str	r3, [sp, #36]	; 0x24
   bbb14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbb18:	eeb0 0a48 	vmov.f32	s0, s16
   bbb1c:	eef0 0a68 	vmov.f32	s1, s17
   bbb20:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbb24:	f001 f894 	bl	bcc50 <__ulp>
   bbb28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbb2c:	ec53 2b10 	vmov	r2, r3, d0
   bbb30:	f7fe fdf0 	bl	ba714 <__aeabi_dmul>
   bbb34:	ec53 2b18 	vmov	r2, r3, d8
   bbb38:	f7fe fc36 	bl	ba3a8 <__adddf3>
   bbb3c:	4682      	mov	sl, r0
   bbb3e:	468b      	mov	fp, r1
   bbb40:	e78d      	b.n	bba5e <_strtod_l+0xab6>
   bbb42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bbb46:	e7db      	b.n	bbb00 <_strtod_l+0xb58>
   bbb48:	a311      	add	r3, pc, #68	; (adr r3, bbb90 <_strtod_l+0xbe8>)
   bbb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbb4e:	f7ff f853 	bl	babf8 <__aeabi_dcmplt>
   bbb52:	e7b2      	b.n	bbaba <_strtod_l+0xb12>
   bbb54:	2300      	movs	r3, #0
   bbb56:	930a      	str	r3, [sp, #40]	; 0x28
   bbb58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bbb5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbb5c:	6013      	str	r3, [r2, #0]
   bbb5e:	f7ff ba6b 	b.w	bb038 <_strtod_l+0x90>
   bbb62:	2a65      	cmp	r2, #101	; 0x65
   bbb64:	f43f ab5f 	beq.w	bb226 <_strtod_l+0x27e>
   bbb68:	2a45      	cmp	r2, #69	; 0x45
   bbb6a:	f43f ab5c 	beq.w	bb226 <_strtod_l+0x27e>
   bbb6e:	2301      	movs	r3, #1
   bbb70:	f7ff bb94 	b.w	bb29c <_strtod_l+0x2f4>
   bbb74:	f3af 8000 	nop.w
   bbb78:	94a03595 	.word	0x94a03595
   bbb7c:	3fdfffff 	.word	0x3fdfffff
   bbb80:	35afe535 	.word	0x35afe535
   bbb84:	3fe00000 	.word	0x3fe00000
   bbb88:	ffc00000 	.word	0xffc00000
   bbb8c:	41dfffff 	.word	0x41dfffff
   bbb90:	94a03595 	.word	0x94a03595
   bbb94:	3fcfffff 	.word	0x3fcfffff
   bbb98:	3ff00000 	.word	0x3ff00000
   bbb9c:	7ff00000 	.word	0x7ff00000
   bbba0:	7fe00000 	.word	0x7fe00000
   bbba4:	7c9fffff 	.word	0x7c9fffff
   bbba8:	3fe00000 	.word	0x3fe00000
   bbbac:	bff00000 	.word	0xbff00000
   bbbb0:	7fefffff 	.word	0x7fefffff

000bbbb4 <strtod>:
   bbbb4:	460a      	mov	r2, r1
   bbbb6:	4601      	mov	r1, r0
   bbbb8:	4802      	ldr	r0, [pc, #8]	; (bbbc4 <strtod+0x10>)
   bbbba:	4b03      	ldr	r3, [pc, #12]	; (bbbc8 <strtod+0x14>)
   bbbbc:	6800      	ldr	r0, [r0, #0]
   bbbbe:	f7ff b9f3 	b.w	bafa8 <_strtod_l>
   bbbc2:	bf00      	nop
   bbbc4:	2003d184 	.word	0x2003d184
   bbbc8:	2003d1f0 	.word	0x2003d1f0

000bbbcc <strtok>:
   bbbcc:	4b16      	ldr	r3, [pc, #88]	; (bbc28 <strtok+0x5c>)
   bbbce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbbd0:	681e      	ldr	r6, [r3, #0]
   bbbd2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bbbd4:	4605      	mov	r5, r0
   bbbd6:	b9fc      	cbnz	r4, bbc18 <strtok+0x4c>
   bbbd8:	2050      	movs	r0, #80	; 0x50
   bbbda:	9101      	str	r1, [sp, #4]
   bbbdc:	f7fb fa2e 	bl	b703c <malloc>
   bbbe0:	9901      	ldr	r1, [sp, #4]
   bbbe2:	65b0      	str	r0, [r6, #88]	; 0x58
   bbbe4:	4602      	mov	r2, r0
   bbbe6:	b920      	cbnz	r0, bbbf2 <strtok+0x26>
   bbbe8:	4b10      	ldr	r3, [pc, #64]	; (bbc2c <strtok+0x60>)
   bbbea:	4811      	ldr	r0, [pc, #68]	; (bbc30 <strtok+0x64>)
   bbbec:	2157      	movs	r1, #87	; 0x57
   bbbee:	f7fb fa6d 	bl	b70cc <__assert_func>
   bbbf2:	e9c0 4400 	strd	r4, r4, [r0]
   bbbf6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bbbfa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bbbfe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bbc02:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bbc06:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bbc0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bbc0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bbc12:	6184      	str	r4, [r0, #24]
   bbc14:	7704      	strb	r4, [r0, #28]
   bbc16:	6244      	str	r4, [r0, #36]	; 0x24
   bbc18:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bbc1a:	2301      	movs	r3, #1
   bbc1c:	4628      	mov	r0, r5
   bbc1e:	b002      	add	sp, #8
   bbc20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbc24:	f000 b806 	b.w	bbc34 <__strtok_r>
   bbc28:	2003d184 	.word	0x2003d184
   bbc2c:	000bdca6 	.word	0x000bdca6
   bbc30:	000bdd98 	.word	0x000bdd98

000bbc34 <__strtok_r>:
   bbc34:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbc36:	b908      	cbnz	r0, bbc3c <__strtok_r+0x8>
   bbc38:	6810      	ldr	r0, [r2, #0]
   bbc3a:	b188      	cbz	r0, bbc60 <__strtok_r+0x2c>
   bbc3c:	4604      	mov	r4, r0
   bbc3e:	4620      	mov	r0, r4
   bbc40:	f814 5b01 	ldrb.w	r5, [r4], #1
   bbc44:	460f      	mov	r7, r1
   bbc46:	f817 6b01 	ldrb.w	r6, [r7], #1
   bbc4a:	b91e      	cbnz	r6, bbc54 <__strtok_r+0x20>
   bbc4c:	b965      	cbnz	r5, bbc68 <__strtok_r+0x34>
   bbc4e:	6015      	str	r5, [r2, #0]
   bbc50:	4628      	mov	r0, r5
   bbc52:	e005      	b.n	bbc60 <__strtok_r+0x2c>
   bbc54:	42b5      	cmp	r5, r6
   bbc56:	d1f6      	bne.n	bbc46 <__strtok_r+0x12>
   bbc58:	2b00      	cmp	r3, #0
   bbc5a:	d1f0      	bne.n	bbc3e <__strtok_r+0xa>
   bbc5c:	6014      	str	r4, [r2, #0]
   bbc5e:	7003      	strb	r3, [r0, #0]
   bbc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbc62:	461c      	mov	r4, r3
   bbc64:	e00c      	b.n	bbc80 <__strtok_r+0x4c>
   bbc66:	b915      	cbnz	r5, bbc6e <__strtok_r+0x3a>
   bbc68:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbc6c:	460e      	mov	r6, r1
   bbc6e:	f816 5b01 	ldrb.w	r5, [r6], #1
   bbc72:	42ab      	cmp	r3, r5
   bbc74:	d1f7      	bne.n	bbc66 <__strtok_r+0x32>
   bbc76:	2b00      	cmp	r3, #0
   bbc78:	d0f3      	beq.n	bbc62 <__strtok_r+0x2e>
   bbc7a:	2300      	movs	r3, #0
   bbc7c:	f804 3c01 	strb.w	r3, [r4, #-1]
   bbc80:	6014      	str	r4, [r2, #0]
   bbc82:	e7ed      	b.n	bbc60 <__strtok_r+0x2c>

000bbc84 <_strtol_l.constprop.0>:
   bbc84:	2b01      	cmp	r3, #1
   bbc86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbc8a:	d001      	beq.n	bbc90 <_strtol_l.constprop.0+0xc>
   bbc8c:	2b24      	cmp	r3, #36	; 0x24
   bbc8e:	d906      	bls.n	bbc9e <_strtol_l.constprop.0+0x1a>
   bbc90:	f7fb fa14 	bl	b70bc <__errno>
   bbc94:	2316      	movs	r3, #22
   bbc96:	6003      	str	r3, [r0, #0]
   bbc98:	2000      	movs	r0, #0
   bbc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbc9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bbd84 <_strtol_l.constprop.0+0x100>
   bbca2:	460d      	mov	r5, r1
   bbca4:	462e      	mov	r6, r5
   bbca6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbcaa:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbcae:	f017 0708 	ands.w	r7, r7, #8
   bbcb2:	d1f7      	bne.n	bbca4 <_strtol_l.constprop.0+0x20>
   bbcb4:	2c2d      	cmp	r4, #45	; 0x2d
   bbcb6:	d132      	bne.n	bbd1e <_strtol_l.constprop.0+0x9a>
   bbcb8:	782c      	ldrb	r4, [r5, #0]
   bbcba:	2701      	movs	r7, #1
   bbcbc:	1cb5      	adds	r5, r6, #2
   bbcbe:	2b00      	cmp	r3, #0
   bbcc0:	d05b      	beq.n	bbd7a <_strtol_l.constprop.0+0xf6>
   bbcc2:	2b10      	cmp	r3, #16
   bbcc4:	d109      	bne.n	bbcda <_strtol_l.constprop.0+0x56>
   bbcc6:	2c30      	cmp	r4, #48	; 0x30
   bbcc8:	d107      	bne.n	bbcda <_strtol_l.constprop.0+0x56>
   bbcca:	782c      	ldrb	r4, [r5, #0]
   bbccc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bbcd0:	2c58      	cmp	r4, #88	; 0x58
   bbcd2:	d14d      	bne.n	bbd70 <_strtol_l.constprop.0+0xec>
   bbcd4:	786c      	ldrb	r4, [r5, #1]
   bbcd6:	2310      	movs	r3, #16
   bbcd8:	3502      	adds	r5, #2
   bbcda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bbcde:	f108 38ff 	add.w	r8, r8, #4294967295
   bbce2:	f04f 0c00 	mov.w	ip, #0
   bbce6:	fbb8 f9f3 	udiv	r9, r8, r3
   bbcea:	4666      	mov	r6, ip
   bbcec:	fb03 8a19 	mls	sl, r3, r9, r8
   bbcf0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bbcf4:	f1be 0f09 	cmp.w	lr, #9
   bbcf8:	d816      	bhi.n	bbd28 <_strtol_l.constprop.0+0xa4>
   bbcfa:	4674      	mov	r4, lr
   bbcfc:	42a3      	cmp	r3, r4
   bbcfe:	dd24      	ble.n	bbd4a <_strtol_l.constprop.0+0xc6>
   bbd00:	f1bc 0f00 	cmp.w	ip, #0
   bbd04:	db1e      	blt.n	bbd44 <_strtol_l.constprop.0+0xc0>
   bbd06:	45b1      	cmp	r9, r6
   bbd08:	d31c      	bcc.n	bbd44 <_strtol_l.constprop.0+0xc0>
   bbd0a:	d101      	bne.n	bbd10 <_strtol_l.constprop.0+0x8c>
   bbd0c:	45a2      	cmp	sl, r4
   bbd0e:	db19      	blt.n	bbd44 <_strtol_l.constprop.0+0xc0>
   bbd10:	fb06 4603 	mla	r6, r6, r3, r4
   bbd14:	f04f 0c01 	mov.w	ip, #1
   bbd18:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbd1c:	e7e8      	b.n	bbcf0 <_strtol_l.constprop.0+0x6c>
   bbd1e:	2c2b      	cmp	r4, #43	; 0x2b
   bbd20:	bf04      	itt	eq
   bbd22:	782c      	ldrbeq	r4, [r5, #0]
   bbd24:	1cb5      	addeq	r5, r6, #2
   bbd26:	e7ca      	b.n	bbcbe <_strtol_l.constprop.0+0x3a>
   bbd28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bbd2c:	f1be 0f19 	cmp.w	lr, #25
   bbd30:	d801      	bhi.n	bbd36 <_strtol_l.constprop.0+0xb2>
   bbd32:	3c37      	subs	r4, #55	; 0x37
   bbd34:	e7e2      	b.n	bbcfc <_strtol_l.constprop.0+0x78>
   bbd36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bbd3a:	f1be 0f19 	cmp.w	lr, #25
   bbd3e:	d804      	bhi.n	bbd4a <_strtol_l.constprop.0+0xc6>
   bbd40:	3c57      	subs	r4, #87	; 0x57
   bbd42:	e7db      	b.n	bbcfc <_strtol_l.constprop.0+0x78>
   bbd44:	f04f 3cff 	mov.w	ip, #4294967295
   bbd48:	e7e6      	b.n	bbd18 <_strtol_l.constprop.0+0x94>
   bbd4a:	f1bc 0f00 	cmp.w	ip, #0
   bbd4e:	da05      	bge.n	bbd5c <_strtol_l.constprop.0+0xd8>
   bbd50:	2322      	movs	r3, #34	; 0x22
   bbd52:	6003      	str	r3, [r0, #0]
   bbd54:	4646      	mov	r6, r8
   bbd56:	b942      	cbnz	r2, bbd6a <_strtol_l.constprop.0+0xe6>
   bbd58:	4630      	mov	r0, r6
   bbd5a:	e79e      	b.n	bbc9a <_strtol_l.constprop.0+0x16>
   bbd5c:	b107      	cbz	r7, bbd60 <_strtol_l.constprop.0+0xdc>
   bbd5e:	4276      	negs	r6, r6
   bbd60:	2a00      	cmp	r2, #0
   bbd62:	d0f9      	beq.n	bbd58 <_strtol_l.constprop.0+0xd4>
   bbd64:	f1bc 0f00 	cmp.w	ip, #0
   bbd68:	d000      	beq.n	bbd6c <_strtol_l.constprop.0+0xe8>
   bbd6a:	1e69      	subs	r1, r5, #1
   bbd6c:	6011      	str	r1, [r2, #0]
   bbd6e:	e7f3      	b.n	bbd58 <_strtol_l.constprop.0+0xd4>
   bbd70:	2430      	movs	r4, #48	; 0x30
   bbd72:	2b00      	cmp	r3, #0
   bbd74:	d1b1      	bne.n	bbcda <_strtol_l.constprop.0+0x56>
   bbd76:	2308      	movs	r3, #8
   bbd78:	e7af      	b.n	bbcda <_strtol_l.constprop.0+0x56>
   bbd7a:	2c30      	cmp	r4, #48	; 0x30
   bbd7c:	d0a5      	beq.n	bbcca <_strtol_l.constprop.0+0x46>
   bbd7e:	230a      	movs	r3, #10
   bbd80:	e7ab      	b.n	bbcda <_strtol_l.constprop.0+0x56>
   bbd82:	bf00      	nop
   bbd84:	000bdba6 	.word	0x000bdba6

000bbd88 <strtol>:
   bbd88:	4613      	mov	r3, r2
   bbd8a:	460a      	mov	r2, r1
   bbd8c:	4601      	mov	r1, r0
   bbd8e:	4802      	ldr	r0, [pc, #8]	; (bbd98 <strtol+0x10>)
   bbd90:	6800      	ldr	r0, [r0, #0]
   bbd92:	f7ff bf77 	b.w	bbc84 <_strtol_l.constprop.0>
   bbd96:	bf00      	nop
   bbd98:	2003d184 	.word	0x2003d184

000bbd9c <__register_exitproc>:
   bbd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbda0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbe5c <__register_exitproc+0xc0>
   bbda4:	4606      	mov	r6, r0
   bbda6:	f8d8 0000 	ldr.w	r0, [r8]
   bbdaa:	461f      	mov	r7, r3
   bbdac:	460d      	mov	r5, r1
   bbdae:	4691      	mov	r9, r2
   bbdb0:	f000 fbc6 	bl	bc540 <__retarget_lock_acquire_recursive>
   bbdb4:	4b25      	ldr	r3, [pc, #148]	; (bbe4c <__register_exitproc+0xb0>)
   bbdb6:	681c      	ldr	r4, [r3, #0]
   bbdb8:	b934      	cbnz	r4, bbdc8 <__register_exitproc+0x2c>
   bbdba:	4c25      	ldr	r4, [pc, #148]	; (bbe50 <__register_exitproc+0xb4>)
   bbdbc:	601c      	str	r4, [r3, #0]
   bbdbe:	4b25      	ldr	r3, [pc, #148]	; (bbe54 <__register_exitproc+0xb8>)
   bbdc0:	b113      	cbz	r3, bbdc8 <__register_exitproc+0x2c>
   bbdc2:	681b      	ldr	r3, [r3, #0]
   bbdc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbdc8:	6863      	ldr	r3, [r4, #4]
   bbdca:	2b1f      	cmp	r3, #31
   bbdcc:	dd07      	ble.n	bbdde <__register_exitproc+0x42>
   bbdce:	f8d8 0000 	ldr.w	r0, [r8]
   bbdd2:	f000 fbb7 	bl	bc544 <__retarget_lock_release_recursive>
   bbdd6:	f04f 30ff 	mov.w	r0, #4294967295
   bbdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbdde:	b34e      	cbz	r6, bbe34 <__register_exitproc+0x98>
   bbde0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbde4:	b988      	cbnz	r0, bbe0a <__register_exitproc+0x6e>
   bbde6:	4b1c      	ldr	r3, [pc, #112]	; (bbe58 <__register_exitproc+0xbc>)
   bbde8:	b923      	cbnz	r3, bbdf4 <__register_exitproc+0x58>
   bbdea:	f8d8 0000 	ldr.w	r0, [r8]
   bbdee:	f000 fba8 	bl	bc542 <__retarget_lock_release>
   bbdf2:	e7f0      	b.n	bbdd6 <__register_exitproc+0x3a>
   bbdf4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbdf8:	f7fb f920 	bl	b703c <malloc>
   bbdfc:	2800      	cmp	r0, #0
   bbdfe:	d0f4      	beq.n	bbdea <__register_exitproc+0x4e>
   bbe00:	2300      	movs	r3, #0
   bbe02:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbe06:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbe0a:	6863      	ldr	r3, [r4, #4]
   bbe0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbe10:	2201      	movs	r2, #1
   bbe12:	409a      	lsls	r2, r3
   bbe14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbe18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbe1c:	4313      	orrs	r3, r2
   bbe1e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbe22:	2e02      	cmp	r6, #2
   bbe24:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbe28:	bf02      	ittt	eq
   bbe2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbe2e:	4313      	orreq	r3, r2
   bbe30:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbe34:	6863      	ldr	r3, [r4, #4]
   bbe36:	f8d8 0000 	ldr.w	r0, [r8]
   bbe3a:	1c5a      	adds	r2, r3, #1
   bbe3c:	3302      	adds	r3, #2
   bbe3e:	6062      	str	r2, [r4, #4]
   bbe40:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbe44:	f000 fb7e 	bl	bc544 <__retarget_lock_release_recursive>
   bbe48:	2000      	movs	r0, #0
   bbe4a:	e7c6      	b.n	bbdda <__register_exitproc+0x3e>
   bbe4c:	2003e7ec 	.word	0x2003e7ec
   bbe50:	2003e760 	.word	0x2003e760
   bbe54:	00000000 	.word	0x00000000
   bbe58:	000b703d 	.word	0x000b703d
   bbe5c:	2003d1e8 	.word	0x2003d1e8

000bbe60 <rshift>:
   bbe60:	6903      	ldr	r3, [r0, #16]
   bbe62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bbe66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbe6a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bbe6e:	f100 0414 	add.w	r4, r0, #20
   bbe72:	dd45      	ble.n	bbf00 <rshift+0xa0>
   bbe74:	f011 011f 	ands.w	r1, r1, #31
   bbe78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bbe7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bbe80:	d10c      	bne.n	bbe9c <rshift+0x3c>
   bbe82:	f100 0710 	add.w	r7, r0, #16
   bbe86:	4629      	mov	r1, r5
   bbe88:	42b1      	cmp	r1, r6
   bbe8a:	d334      	bcc.n	bbef6 <rshift+0x96>
   bbe8c:	1a9b      	subs	r3, r3, r2
   bbe8e:	009b      	lsls	r3, r3, #2
   bbe90:	1eea      	subs	r2, r5, #3
   bbe92:	4296      	cmp	r6, r2
   bbe94:	bf38      	it	cc
   bbe96:	2300      	movcc	r3, #0
   bbe98:	4423      	add	r3, r4
   bbe9a:	e015      	b.n	bbec8 <rshift+0x68>
   bbe9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bbea0:	f1c1 0820 	rsb	r8, r1, #32
   bbea4:	40cf      	lsrs	r7, r1
   bbea6:	f105 0e04 	add.w	lr, r5, #4
   bbeaa:	46a1      	mov	r9, r4
   bbeac:	4576      	cmp	r6, lr
   bbeae:	46f4      	mov	ip, lr
   bbeb0:	d815      	bhi.n	bbede <rshift+0x7e>
   bbeb2:	1a9a      	subs	r2, r3, r2
   bbeb4:	0092      	lsls	r2, r2, #2
   bbeb6:	3a04      	subs	r2, #4
   bbeb8:	3501      	adds	r5, #1
   bbeba:	42ae      	cmp	r6, r5
   bbebc:	bf38      	it	cc
   bbebe:	2200      	movcc	r2, #0
   bbec0:	18a3      	adds	r3, r4, r2
   bbec2:	50a7      	str	r7, [r4, r2]
   bbec4:	b107      	cbz	r7, bbec8 <rshift+0x68>
   bbec6:	3304      	adds	r3, #4
   bbec8:	1b1a      	subs	r2, r3, r4
   bbeca:	42a3      	cmp	r3, r4
   bbecc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bbed0:	bf08      	it	eq
   bbed2:	2300      	moveq	r3, #0
   bbed4:	6102      	str	r2, [r0, #16]
   bbed6:	bf08      	it	eq
   bbed8:	6143      	streq	r3, [r0, #20]
   bbeda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbede:	f8dc c000 	ldr.w	ip, [ip]
   bbee2:	fa0c fc08 	lsl.w	ip, ip, r8
   bbee6:	ea4c 0707 	orr.w	r7, ip, r7
   bbeea:	f849 7b04 	str.w	r7, [r9], #4
   bbeee:	f85e 7b04 	ldr.w	r7, [lr], #4
   bbef2:	40cf      	lsrs	r7, r1
   bbef4:	e7da      	b.n	bbeac <rshift+0x4c>
   bbef6:	f851 cb04 	ldr.w	ip, [r1], #4
   bbefa:	f847 cf04 	str.w	ip, [r7, #4]!
   bbefe:	e7c3      	b.n	bbe88 <rshift+0x28>
   bbf00:	4623      	mov	r3, r4
   bbf02:	e7e1      	b.n	bbec8 <rshift+0x68>

000bbf04 <__hexdig_fun>:
   bbf04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bbf08:	2b09      	cmp	r3, #9
   bbf0a:	d802      	bhi.n	bbf12 <__hexdig_fun+0xe>
   bbf0c:	3820      	subs	r0, #32
   bbf0e:	b2c0      	uxtb	r0, r0
   bbf10:	4770      	bx	lr
   bbf12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bbf16:	2b05      	cmp	r3, #5
   bbf18:	d801      	bhi.n	bbf1e <__hexdig_fun+0x1a>
   bbf1a:	3847      	subs	r0, #71	; 0x47
   bbf1c:	e7f7      	b.n	bbf0e <__hexdig_fun+0xa>
   bbf1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bbf22:	2b05      	cmp	r3, #5
   bbf24:	d801      	bhi.n	bbf2a <__hexdig_fun+0x26>
   bbf26:	3827      	subs	r0, #39	; 0x27
   bbf28:	e7f1      	b.n	bbf0e <__hexdig_fun+0xa>
   bbf2a:	2000      	movs	r0, #0
   bbf2c:	4770      	bx	lr
	...

000bbf30 <__gethex>:
   bbf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf34:	ed2d 8b02 	vpush	{d8}
   bbf38:	b089      	sub	sp, #36	; 0x24
   bbf3a:	ee08 0a10 	vmov	s16, r0
   bbf3e:	9304      	str	r3, [sp, #16]
   bbf40:	4bb4      	ldr	r3, [pc, #720]	; (bc214 <__gethex+0x2e4>)
   bbf42:	681b      	ldr	r3, [r3, #0]
   bbf44:	9301      	str	r3, [sp, #4]
   bbf46:	4618      	mov	r0, r3
   bbf48:	468b      	mov	fp, r1
   bbf4a:	4690      	mov	r8, r2
   bbf4c:	f7fe ffd1 	bl	baef2 <strlen>
   bbf50:	9b01      	ldr	r3, [sp, #4]
   bbf52:	f8db 2000 	ldr.w	r2, [fp]
   bbf56:	4403      	add	r3, r0
   bbf58:	4682      	mov	sl, r0
   bbf5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bbf5e:	9305      	str	r3, [sp, #20]
   bbf60:	1c93      	adds	r3, r2, #2
   bbf62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bbf66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bbf6a:	32fe      	adds	r2, #254	; 0xfe
   bbf6c:	18d1      	adds	r1, r2, r3
   bbf6e:	461f      	mov	r7, r3
   bbf70:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbf74:	9100      	str	r1, [sp, #0]
   bbf76:	2830      	cmp	r0, #48	; 0x30
   bbf78:	d0f8      	beq.n	bbf6c <__gethex+0x3c>
   bbf7a:	f7ff ffc3 	bl	bbf04 <__hexdig_fun>
   bbf7e:	4604      	mov	r4, r0
   bbf80:	2800      	cmp	r0, #0
   bbf82:	d13a      	bne.n	bbffa <__gethex+0xca>
   bbf84:	9901      	ldr	r1, [sp, #4]
   bbf86:	4652      	mov	r2, sl
   bbf88:	4638      	mov	r0, r7
   bbf8a:	f7fe ffba 	bl	baf02 <strncmp>
   bbf8e:	4605      	mov	r5, r0
   bbf90:	2800      	cmp	r0, #0
   bbf92:	d168      	bne.n	bc066 <__gethex+0x136>
   bbf94:	f817 000a 	ldrb.w	r0, [r7, sl]
   bbf98:	eb07 060a 	add.w	r6, r7, sl
   bbf9c:	f7ff ffb2 	bl	bbf04 <__hexdig_fun>
   bbfa0:	2800      	cmp	r0, #0
   bbfa2:	d062      	beq.n	bc06a <__gethex+0x13a>
   bbfa4:	4633      	mov	r3, r6
   bbfa6:	7818      	ldrb	r0, [r3, #0]
   bbfa8:	2830      	cmp	r0, #48	; 0x30
   bbfaa:	461f      	mov	r7, r3
   bbfac:	f103 0301 	add.w	r3, r3, #1
   bbfb0:	d0f9      	beq.n	bbfa6 <__gethex+0x76>
   bbfb2:	f7ff ffa7 	bl	bbf04 <__hexdig_fun>
   bbfb6:	2301      	movs	r3, #1
   bbfb8:	fab0 f480 	clz	r4, r0
   bbfbc:	0964      	lsrs	r4, r4, #5
   bbfbe:	4635      	mov	r5, r6
   bbfc0:	9300      	str	r3, [sp, #0]
   bbfc2:	463a      	mov	r2, r7
   bbfc4:	4616      	mov	r6, r2
   bbfc6:	3201      	adds	r2, #1
   bbfc8:	7830      	ldrb	r0, [r6, #0]
   bbfca:	f7ff ff9b 	bl	bbf04 <__hexdig_fun>
   bbfce:	2800      	cmp	r0, #0
   bbfd0:	d1f8      	bne.n	bbfc4 <__gethex+0x94>
   bbfd2:	9901      	ldr	r1, [sp, #4]
   bbfd4:	4652      	mov	r2, sl
   bbfd6:	4630      	mov	r0, r6
   bbfd8:	f7fe ff93 	bl	baf02 <strncmp>
   bbfdc:	b980      	cbnz	r0, bc000 <__gethex+0xd0>
   bbfde:	b94d      	cbnz	r5, bbff4 <__gethex+0xc4>
   bbfe0:	eb06 050a 	add.w	r5, r6, sl
   bbfe4:	462a      	mov	r2, r5
   bbfe6:	4616      	mov	r6, r2
   bbfe8:	3201      	adds	r2, #1
   bbfea:	7830      	ldrb	r0, [r6, #0]
   bbfec:	f7ff ff8a 	bl	bbf04 <__hexdig_fun>
   bbff0:	2800      	cmp	r0, #0
   bbff2:	d1f8      	bne.n	bbfe6 <__gethex+0xb6>
   bbff4:	1bad      	subs	r5, r5, r6
   bbff6:	00ad      	lsls	r5, r5, #2
   bbff8:	e004      	b.n	bc004 <__gethex+0xd4>
   bbffa:	2400      	movs	r4, #0
   bbffc:	4625      	mov	r5, r4
   bbffe:	e7e0      	b.n	bbfc2 <__gethex+0x92>
   bc000:	2d00      	cmp	r5, #0
   bc002:	d1f7      	bne.n	bbff4 <__gethex+0xc4>
   bc004:	7833      	ldrb	r3, [r6, #0]
   bc006:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc00a:	2b50      	cmp	r3, #80	; 0x50
   bc00c:	d13b      	bne.n	bc086 <__gethex+0x156>
   bc00e:	7873      	ldrb	r3, [r6, #1]
   bc010:	2b2b      	cmp	r3, #43	; 0x2b
   bc012:	d02c      	beq.n	bc06e <__gethex+0x13e>
   bc014:	2b2d      	cmp	r3, #45	; 0x2d
   bc016:	d02e      	beq.n	bc076 <__gethex+0x146>
   bc018:	1c71      	adds	r1, r6, #1
   bc01a:	f04f 0900 	mov.w	r9, #0
   bc01e:	7808      	ldrb	r0, [r1, #0]
   bc020:	f7ff ff70 	bl	bbf04 <__hexdig_fun>
   bc024:	1e43      	subs	r3, r0, #1
   bc026:	b2db      	uxtb	r3, r3
   bc028:	2b18      	cmp	r3, #24
   bc02a:	d82c      	bhi.n	bc086 <__gethex+0x156>
   bc02c:	f1a0 0210 	sub.w	r2, r0, #16
   bc030:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc034:	f7ff ff66 	bl	bbf04 <__hexdig_fun>
   bc038:	1e43      	subs	r3, r0, #1
   bc03a:	b2db      	uxtb	r3, r3
   bc03c:	2b18      	cmp	r3, #24
   bc03e:	d91d      	bls.n	bc07c <__gethex+0x14c>
   bc040:	f1b9 0f00 	cmp.w	r9, #0
   bc044:	d000      	beq.n	bc048 <__gethex+0x118>
   bc046:	4252      	negs	r2, r2
   bc048:	4415      	add	r5, r2
   bc04a:	f8cb 1000 	str.w	r1, [fp]
   bc04e:	b1e4      	cbz	r4, bc08a <__gethex+0x15a>
   bc050:	9b00      	ldr	r3, [sp, #0]
   bc052:	2b00      	cmp	r3, #0
   bc054:	bf14      	ite	ne
   bc056:	2700      	movne	r7, #0
   bc058:	2706      	moveq	r7, #6
   bc05a:	4638      	mov	r0, r7
   bc05c:	b009      	add	sp, #36	; 0x24
   bc05e:	ecbd 8b02 	vpop	{d8}
   bc062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc066:	463e      	mov	r6, r7
   bc068:	4625      	mov	r5, r4
   bc06a:	2401      	movs	r4, #1
   bc06c:	e7ca      	b.n	bc004 <__gethex+0xd4>
   bc06e:	f04f 0900 	mov.w	r9, #0
   bc072:	1cb1      	adds	r1, r6, #2
   bc074:	e7d3      	b.n	bc01e <__gethex+0xee>
   bc076:	f04f 0901 	mov.w	r9, #1
   bc07a:	e7fa      	b.n	bc072 <__gethex+0x142>
   bc07c:	230a      	movs	r3, #10
   bc07e:	fb03 0202 	mla	r2, r3, r2, r0
   bc082:	3a10      	subs	r2, #16
   bc084:	e7d4      	b.n	bc030 <__gethex+0x100>
   bc086:	4631      	mov	r1, r6
   bc088:	e7df      	b.n	bc04a <__gethex+0x11a>
   bc08a:	1bf3      	subs	r3, r6, r7
   bc08c:	3b01      	subs	r3, #1
   bc08e:	4621      	mov	r1, r4
   bc090:	2b07      	cmp	r3, #7
   bc092:	dc0b      	bgt.n	bc0ac <__gethex+0x17c>
   bc094:	ee18 0a10 	vmov	r0, s16
   bc098:	f000 fa68 	bl	bc56c <_Balloc>
   bc09c:	4604      	mov	r4, r0
   bc09e:	b940      	cbnz	r0, bc0b2 <__gethex+0x182>
   bc0a0:	4b5d      	ldr	r3, [pc, #372]	; (bc218 <__gethex+0x2e8>)
   bc0a2:	4602      	mov	r2, r0
   bc0a4:	21de      	movs	r1, #222	; 0xde
   bc0a6:	485d      	ldr	r0, [pc, #372]	; (bc21c <__gethex+0x2ec>)
   bc0a8:	f7fb f810 	bl	b70cc <__assert_func>
   bc0ac:	3101      	adds	r1, #1
   bc0ae:	105b      	asrs	r3, r3, #1
   bc0b0:	e7ee      	b.n	bc090 <__gethex+0x160>
   bc0b2:	f100 0914 	add.w	r9, r0, #20
   bc0b6:	f04f 0b00 	mov.w	fp, #0
   bc0ba:	f1ca 0301 	rsb	r3, sl, #1
   bc0be:	f8cd 9008 	str.w	r9, [sp, #8]
   bc0c2:	f8cd b000 	str.w	fp, [sp]
   bc0c6:	9306      	str	r3, [sp, #24]
   bc0c8:	42b7      	cmp	r7, r6
   bc0ca:	d340      	bcc.n	bc14e <__gethex+0x21e>
   bc0cc:	9802      	ldr	r0, [sp, #8]
   bc0ce:	9b00      	ldr	r3, [sp, #0]
   bc0d0:	f840 3b04 	str.w	r3, [r0], #4
   bc0d4:	eba0 0009 	sub.w	r0, r0, r9
   bc0d8:	1080      	asrs	r0, r0, #2
   bc0da:	0146      	lsls	r6, r0, #5
   bc0dc:	6120      	str	r0, [r4, #16]
   bc0de:	4618      	mov	r0, r3
   bc0e0:	f000 fb36 	bl	bc750 <__hi0bits>
   bc0e4:	1a30      	subs	r0, r6, r0
   bc0e6:	f8d8 6000 	ldr.w	r6, [r8]
   bc0ea:	42b0      	cmp	r0, r6
   bc0ec:	dd63      	ble.n	bc1b6 <__gethex+0x286>
   bc0ee:	1b87      	subs	r7, r0, r6
   bc0f0:	4639      	mov	r1, r7
   bc0f2:	4620      	mov	r0, r4
   bc0f4:	f000 feda 	bl	bceac <__any_on>
   bc0f8:	4682      	mov	sl, r0
   bc0fa:	b1a8      	cbz	r0, bc128 <__gethex+0x1f8>
   bc0fc:	1e7b      	subs	r3, r7, #1
   bc0fe:	1159      	asrs	r1, r3, #5
   bc100:	f003 021f 	and.w	r2, r3, #31
   bc104:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc108:	f04f 0a01 	mov.w	sl, #1
   bc10c:	fa0a f202 	lsl.w	r2, sl, r2
   bc110:	420a      	tst	r2, r1
   bc112:	d009      	beq.n	bc128 <__gethex+0x1f8>
   bc114:	4553      	cmp	r3, sl
   bc116:	dd05      	ble.n	bc124 <__gethex+0x1f4>
   bc118:	1eb9      	subs	r1, r7, #2
   bc11a:	4620      	mov	r0, r4
   bc11c:	f000 fec6 	bl	bceac <__any_on>
   bc120:	2800      	cmp	r0, #0
   bc122:	d145      	bne.n	bc1b0 <__gethex+0x280>
   bc124:	f04f 0a02 	mov.w	sl, #2
   bc128:	4639      	mov	r1, r7
   bc12a:	4620      	mov	r0, r4
   bc12c:	f7ff fe98 	bl	bbe60 <rshift>
   bc130:	443d      	add	r5, r7
   bc132:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc136:	42ab      	cmp	r3, r5
   bc138:	da4c      	bge.n	bc1d4 <__gethex+0x2a4>
   bc13a:	ee18 0a10 	vmov	r0, s16
   bc13e:	4621      	mov	r1, r4
   bc140:	f000 fa54 	bl	bc5ec <_Bfree>
   bc144:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc146:	2300      	movs	r3, #0
   bc148:	6013      	str	r3, [r2, #0]
   bc14a:	27a3      	movs	r7, #163	; 0xa3
   bc14c:	e785      	b.n	bc05a <__gethex+0x12a>
   bc14e:	1e73      	subs	r3, r6, #1
   bc150:	9a05      	ldr	r2, [sp, #20]
   bc152:	9303      	str	r3, [sp, #12]
   bc154:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc158:	4293      	cmp	r3, r2
   bc15a:	d019      	beq.n	bc190 <__gethex+0x260>
   bc15c:	f1bb 0f20 	cmp.w	fp, #32
   bc160:	d107      	bne.n	bc172 <__gethex+0x242>
   bc162:	9b02      	ldr	r3, [sp, #8]
   bc164:	9a00      	ldr	r2, [sp, #0]
   bc166:	f843 2b04 	str.w	r2, [r3], #4
   bc16a:	9302      	str	r3, [sp, #8]
   bc16c:	2300      	movs	r3, #0
   bc16e:	9300      	str	r3, [sp, #0]
   bc170:	469b      	mov	fp, r3
   bc172:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc176:	f7ff fec5 	bl	bbf04 <__hexdig_fun>
   bc17a:	9b00      	ldr	r3, [sp, #0]
   bc17c:	f000 000f 	and.w	r0, r0, #15
   bc180:	fa00 f00b 	lsl.w	r0, r0, fp
   bc184:	4303      	orrs	r3, r0
   bc186:	9300      	str	r3, [sp, #0]
   bc188:	f10b 0b04 	add.w	fp, fp, #4
   bc18c:	9b03      	ldr	r3, [sp, #12]
   bc18e:	e00d      	b.n	bc1ac <__gethex+0x27c>
   bc190:	9b03      	ldr	r3, [sp, #12]
   bc192:	9a06      	ldr	r2, [sp, #24]
   bc194:	4413      	add	r3, r2
   bc196:	42bb      	cmp	r3, r7
   bc198:	d3e0      	bcc.n	bc15c <__gethex+0x22c>
   bc19a:	4618      	mov	r0, r3
   bc19c:	9901      	ldr	r1, [sp, #4]
   bc19e:	9307      	str	r3, [sp, #28]
   bc1a0:	4652      	mov	r2, sl
   bc1a2:	f7fe feae 	bl	baf02 <strncmp>
   bc1a6:	9b07      	ldr	r3, [sp, #28]
   bc1a8:	2800      	cmp	r0, #0
   bc1aa:	d1d7      	bne.n	bc15c <__gethex+0x22c>
   bc1ac:	461e      	mov	r6, r3
   bc1ae:	e78b      	b.n	bc0c8 <__gethex+0x198>
   bc1b0:	f04f 0a03 	mov.w	sl, #3
   bc1b4:	e7b8      	b.n	bc128 <__gethex+0x1f8>
   bc1b6:	da0a      	bge.n	bc1ce <__gethex+0x29e>
   bc1b8:	1a37      	subs	r7, r6, r0
   bc1ba:	4621      	mov	r1, r4
   bc1bc:	ee18 0a10 	vmov	r0, s16
   bc1c0:	463a      	mov	r2, r7
   bc1c2:	f000 fc2f 	bl	bca24 <__lshift>
   bc1c6:	1bed      	subs	r5, r5, r7
   bc1c8:	4604      	mov	r4, r0
   bc1ca:	f100 0914 	add.w	r9, r0, #20
   bc1ce:	f04f 0a00 	mov.w	sl, #0
   bc1d2:	e7ae      	b.n	bc132 <__gethex+0x202>
   bc1d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc1d8:	42a8      	cmp	r0, r5
   bc1da:	dd72      	ble.n	bc2c2 <__gethex+0x392>
   bc1dc:	1b45      	subs	r5, r0, r5
   bc1de:	42ae      	cmp	r6, r5
   bc1e0:	dc36      	bgt.n	bc250 <__gethex+0x320>
   bc1e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc1e6:	2b02      	cmp	r3, #2
   bc1e8:	d02a      	beq.n	bc240 <__gethex+0x310>
   bc1ea:	2b03      	cmp	r3, #3
   bc1ec:	d02c      	beq.n	bc248 <__gethex+0x318>
   bc1ee:	2b01      	cmp	r3, #1
   bc1f0:	d11c      	bne.n	bc22c <__gethex+0x2fc>
   bc1f2:	42ae      	cmp	r6, r5
   bc1f4:	d11a      	bne.n	bc22c <__gethex+0x2fc>
   bc1f6:	2e01      	cmp	r6, #1
   bc1f8:	d112      	bne.n	bc220 <__gethex+0x2f0>
   bc1fa:	9a04      	ldr	r2, [sp, #16]
   bc1fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc200:	6013      	str	r3, [r2, #0]
   bc202:	2301      	movs	r3, #1
   bc204:	6123      	str	r3, [r4, #16]
   bc206:	f8c9 3000 	str.w	r3, [r9]
   bc20a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc20c:	2762      	movs	r7, #98	; 0x62
   bc20e:	601c      	str	r4, [r3, #0]
   bc210:	e723      	b.n	bc05a <__gethex+0x12a>
   bc212:	bf00      	nop
   bc214:	000bdeb0 	.word	0x000bdeb0
   bc218:	000bde17 	.word	0x000bde17
   bc21c:	000bde28 	.word	0x000bde28
   bc220:	1e71      	subs	r1, r6, #1
   bc222:	4620      	mov	r0, r4
   bc224:	f000 fe42 	bl	bceac <__any_on>
   bc228:	2800      	cmp	r0, #0
   bc22a:	d1e6      	bne.n	bc1fa <__gethex+0x2ca>
   bc22c:	ee18 0a10 	vmov	r0, s16
   bc230:	4621      	mov	r1, r4
   bc232:	f000 f9db 	bl	bc5ec <_Bfree>
   bc236:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc238:	2300      	movs	r3, #0
   bc23a:	6013      	str	r3, [r2, #0]
   bc23c:	2750      	movs	r7, #80	; 0x50
   bc23e:	e70c      	b.n	bc05a <__gethex+0x12a>
   bc240:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc242:	2b00      	cmp	r3, #0
   bc244:	d1f2      	bne.n	bc22c <__gethex+0x2fc>
   bc246:	e7d8      	b.n	bc1fa <__gethex+0x2ca>
   bc248:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc24a:	2b00      	cmp	r3, #0
   bc24c:	d1d5      	bne.n	bc1fa <__gethex+0x2ca>
   bc24e:	e7ed      	b.n	bc22c <__gethex+0x2fc>
   bc250:	1e6f      	subs	r7, r5, #1
   bc252:	f1ba 0f00 	cmp.w	sl, #0
   bc256:	d131      	bne.n	bc2bc <__gethex+0x38c>
   bc258:	b127      	cbz	r7, bc264 <__gethex+0x334>
   bc25a:	4639      	mov	r1, r7
   bc25c:	4620      	mov	r0, r4
   bc25e:	f000 fe25 	bl	bceac <__any_on>
   bc262:	4682      	mov	sl, r0
   bc264:	117b      	asrs	r3, r7, #5
   bc266:	2101      	movs	r1, #1
   bc268:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc26c:	f007 071f 	and.w	r7, r7, #31
   bc270:	fa01 f707 	lsl.w	r7, r1, r7
   bc274:	421f      	tst	r7, r3
   bc276:	4629      	mov	r1, r5
   bc278:	4620      	mov	r0, r4
   bc27a:	bf18      	it	ne
   bc27c:	f04a 0a02 	orrne.w	sl, sl, #2
   bc280:	1b76      	subs	r6, r6, r5
   bc282:	f7ff fded 	bl	bbe60 <rshift>
   bc286:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc28a:	2702      	movs	r7, #2
   bc28c:	f1ba 0f00 	cmp.w	sl, #0
   bc290:	d048      	beq.n	bc324 <__gethex+0x3f4>
   bc292:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc296:	2b02      	cmp	r3, #2
   bc298:	d015      	beq.n	bc2c6 <__gethex+0x396>
   bc29a:	2b03      	cmp	r3, #3
   bc29c:	d017      	beq.n	bc2ce <__gethex+0x39e>
   bc29e:	2b01      	cmp	r3, #1
   bc2a0:	d109      	bne.n	bc2b6 <__gethex+0x386>
   bc2a2:	f01a 0f02 	tst.w	sl, #2
   bc2a6:	d006      	beq.n	bc2b6 <__gethex+0x386>
   bc2a8:	f8d9 0000 	ldr.w	r0, [r9]
   bc2ac:	ea4a 0a00 	orr.w	sl, sl, r0
   bc2b0:	f01a 0f01 	tst.w	sl, #1
   bc2b4:	d10e      	bne.n	bc2d4 <__gethex+0x3a4>
   bc2b6:	f047 0710 	orr.w	r7, r7, #16
   bc2ba:	e033      	b.n	bc324 <__gethex+0x3f4>
   bc2bc:	f04f 0a01 	mov.w	sl, #1
   bc2c0:	e7d0      	b.n	bc264 <__gethex+0x334>
   bc2c2:	2701      	movs	r7, #1
   bc2c4:	e7e2      	b.n	bc28c <__gethex+0x35c>
   bc2c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc2c8:	f1c3 0301 	rsb	r3, r3, #1
   bc2cc:	9315      	str	r3, [sp, #84]	; 0x54
   bc2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc2d0:	2b00      	cmp	r3, #0
   bc2d2:	d0f0      	beq.n	bc2b6 <__gethex+0x386>
   bc2d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc2d8:	f104 0314 	add.w	r3, r4, #20
   bc2dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc2e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc2e4:	f04f 0c00 	mov.w	ip, #0
   bc2e8:	4618      	mov	r0, r3
   bc2ea:	f853 2b04 	ldr.w	r2, [r3], #4
   bc2ee:	f1b2 3fff 	cmp.w	r2, #4294967295
   bc2f2:	d01c      	beq.n	bc32e <__gethex+0x3fe>
   bc2f4:	3201      	adds	r2, #1
   bc2f6:	6002      	str	r2, [r0, #0]
   bc2f8:	2f02      	cmp	r7, #2
   bc2fa:	f104 0314 	add.w	r3, r4, #20
   bc2fe:	d13f      	bne.n	bc380 <__gethex+0x450>
   bc300:	f8d8 2000 	ldr.w	r2, [r8]
   bc304:	3a01      	subs	r2, #1
   bc306:	42b2      	cmp	r2, r6
   bc308:	d10a      	bne.n	bc320 <__gethex+0x3f0>
   bc30a:	1171      	asrs	r1, r6, #5
   bc30c:	2201      	movs	r2, #1
   bc30e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc312:	f006 061f 	and.w	r6, r6, #31
   bc316:	fa02 f606 	lsl.w	r6, r2, r6
   bc31a:	421e      	tst	r6, r3
   bc31c:	bf18      	it	ne
   bc31e:	4617      	movne	r7, r2
   bc320:	f047 0720 	orr.w	r7, r7, #32
   bc324:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc326:	601c      	str	r4, [r3, #0]
   bc328:	9b04      	ldr	r3, [sp, #16]
   bc32a:	601d      	str	r5, [r3, #0]
   bc32c:	e695      	b.n	bc05a <__gethex+0x12a>
   bc32e:	4299      	cmp	r1, r3
   bc330:	f843 cc04 	str.w	ip, [r3, #-4]
   bc334:	d8d8      	bhi.n	bc2e8 <__gethex+0x3b8>
   bc336:	68a3      	ldr	r3, [r4, #8]
   bc338:	459b      	cmp	fp, r3
   bc33a:	db19      	blt.n	bc370 <__gethex+0x440>
   bc33c:	6861      	ldr	r1, [r4, #4]
   bc33e:	ee18 0a10 	vmov	r0, s16
   bc342:	3101      	adds	r1, #1
   bc344:	f000 f912 	bl	bc56c <_Balloc>
   bc348:	4681      	mov	r9, r0
   bc34a:	b918      	cbnz	r0, bc354 <__gethex+0x424>
   bc34c:	4b1a      	ldr	r3, [pc, #104]	; (bc3b8 <__gethex+0x488>)
   bc34e:	4602      	mov	r2, r0
   bc350:	2184      	movs	r1, #132	; 0x84
   bc352:	e6a8      	b.n	bc0a6 <__gethex+0x176>
   bc354:	6922      	ldr	r2, [r4, #16]
   bc356:	3202      	adds	r2, #2
   bc358:	f104 010c 	add.w	r1, r4, #12
   bc35c:	0092      	lsls	r2, r2, #2
   bc35e:	300c      	adds	r0, #12
   bc360:	f7fe fd29 	bl	badb6 <memcpy>
   bc364:	4621      	mov	r1, r4
   bc366:	ee18 0a10 	vmov	r0, s16
   bc36a:	f000 f93f 	bl	bc5ec <_Bfree>
   bc36e:	464c      	mov	r4, r9
   bc370:	6923      	ldr	r3, [r4, #16]
   bc372:	1c5a      	adds	r2, r3, #1
   bc374:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc378:	6122      	str	r2, [r4, #16]
   bc37a:	2201      	movs	r2, #1
   bc37c:	615a      	str	r2, [r3, #20]
   bc37e:	e7bb      	b.n	bc2f8 <__gethex+0x3c8>
   bc380:	6922      	ldr	r2, [r4, #16]
   bc382:	455a      	cmp	r2, fp
   bc384:	dd0b      	ble.n	bc39e <__gethex+0x46e>
   bc386:	2101      	movs	r1, #1
   bc388:	4620      	mov	r0, r4
   bc38a:	f7ff fd69 	bl	bbe60 <rshift>
   bc38e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc392:	3501      	adds	r5, #1
   bc394:	42ab      	cmp	r3, r5
   bc396:	f6ff aed0 	blt.w	bc13a <__gethex+0x20a>
   bc39a:	2701      	movs	r7, #1
   bc39c:	e7c0      	b.n	bc320 <__gethex+0x3f0>
   bc39e:	f016 061f 	ands.w	r6, r6, #31
   bc3a2:	d0fa      	beq.n	bc39a <__gethex+0x46a>
   bc3a4:	4453      	add	r3, sl
   bc3a6:	f1c6 0620 	rsb	r6, r6, #32
   bc3aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc3ae:	f000 f9cf 	bl	bc750 <__hi0bits>
   bc3b2:	42b0      	cmp	r0, r6
   bc3b4:	dbe7      	blt.n	bc386 <__gethex+0x456>
   bc3b6:	e7f0      	b.n	bc39a <__gethex+0x46a>
   bc3b8:	000bde17 	.word	0x000bde17

000bc3bc <L_shift>:
   bc3bc:	f1c2 0208 	rsb	r2, r2, #8
   bc3c0:	0092      	lsls	r2, r2, #2
   bc3c2:	b570      	push	{r4, r5, r6, lr}
   bc3c4:	f1c2 0620 	rsb	r6, r2, #32
   bc3c8:	6843      	ldr	r3, [r0, #4]
   bc3ca:	6804      	ldr	r4, [r0, #0]
   bc3cc:	fa03 f506 	lsl.w	r5, r3, r6
   bc3d0:	432c      	orrs	r4, r5
   bc3d2:	40d3      	lsrs	r3, r2
   bc3d4:	6004      	str	r4, [r0, #0]
   bc3d6:	f840 3f04 	str.w	r3, [r0, #4]!
   bc3da:	4288      	cmp	r0, r1
   bc3dc:	d3f4      	bcc.n	bc3c8 <L_shift+0xc>
   bc3de:	bd70      	pop	{r4, r5, r6, pc}

000bc3e0 <__match>:
   bc3e0:	b530      	push	{r4, r5, lr}
   bc3e2:	6803      	ldr	r3, [r0, #0]
   bc3e4:	3301      	adds	r3, #1
   bc3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc3ea:	b914      	cbnz	r4, bc3f2 <__match+0x12>
   bc3ec:	6003      	str	r3, [r0, #0]
   bc3ee:	2001      	movs	r0, #1
   bc3f0:	bd30      	pop	{r4, r5, pc}
   bc3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc3f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc3fa:	2d19      	cmp	r5, #25
   bc3fc:	bf98      	it	ls
   bc3fe:	3220      	addls	r2, #32
   bc400:	42a2      	cmp	r2, r4
   bc402:	d0f0      	beq.n	bc3e6 <__match+0x6>
   bc404:	2000      	movs	r0, #0
   bc406:	e7f3      	b.n	bc3f0 <__match+0x10>

000bc408 <__hexnan>:
   bc408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc40c:	680b      	ldr	r3, [r1, #0]
   bc40e:	115e      	asrs	r6, r3, #5
   bc410:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc414:	f013 031f 	ands.w	r3, r3, #31
   bc418:	b087      	sub	sp, #28
   bc41a:	bf18      	it	ne
   bc41c:	3604      	addne	r6, #4
   bc41e:	2500      	movs	r5, #0
   bc420:	1f37      	subs	r7, r6, #4
   bc422:	4690      	mov	r8, r2
   bc424:	6802      	ldr	r2, [r0, #0]
   bc426:	9301      	str	r3, [sp, #4]
   bc428:	4682      	mov	sl, r0
   bc42a:	f846 5c04 	str.w	r5, [r6, #-4]
   bc42e:	46b9      	mov	r9, r7
   bc430:	463c      	mov	r4, r7
   bc432:	9502      	str	r5, [sp, #8]
   bc434:	46ab      	mov	fp, r5
   bc436:	7851      	ldrb	r1, [r2, #1]
   bc438:	1c53      	adds	r3, r2, #1
   bc43a:	9303      	str	r3, [sp, #12]
   bc43c:	b341      	cbz	r1, bc490 <__hexnan+0x88>
   bc43e:	4608      	mov	r0, r1
   bc440:	9205      	str	r2, [sp, #20]
   bc442:	9104      	str	r1, [sp, #16]
   bc444:	f7ff fd5e 	bl	bbf04 <__hexdig_fun>
   bc448:	2800      	cmp	r0, #0
   bc44a:	d14f      	bne.n	bc4ec <__hexnan+0xe4>
   bc44c:	9904      	ldr	r1, [sp, #16]
   bc44e:	9a05      	ldr	r2, [sp, #20]
   bc450:	2920      	cmp	r1, #32
   bc452:	d818      	bhi.n	bc486 <__hexnan+0x7e>
   bc454:	9b02      	ldr	r3, [sp, #8]
   bc456:	459b      	cmp	fp, r3
   bc458:	dd13      	ble.n	bc482 <__hexnan+0x7a>
   bc45a:	454c      	cmp	r4, r9
   bc45c:	d206      	bcs.n	bc46c <__hexnan+0x64>
   bc45e:	2d07      	cmp	r5, #7
   bc460:	dc04      	bgt.n	bc46c <__hexnan+0x64>
   bc462:	462a      	mov	r2, r5
   bc464:	4649      	mov	r1, r9
   bc466:	4620      	mov	r0, r4
   bc468:	f7ff ffa8 	bl	bc3bc <L_shift>
   bc46c:	4544      	cmp	r4, r8
   bc46e:	d950      	bls.n	bc512 <__hexnan+0x10a>
   bc470:	2300      	movs	r3, #0
   bc472:	f1a4 0904 	sub.w	r9, r4, #4
   bc476:	f844 3c04 	str.w	r3, [r4, #-4]
   bc47a:	f8cd b008 	str.w	fp, [sp, #8]
   bc47e:	464c      	mov	r4, r9
   bc480:	461d      	mov	r5, r3
   bc482:	9a03      	ldr	r2, [sp, #12]
   bc484:	e7d7      	b.n	bc436 <__hexnan+0x2e>
   bc486:	2929      	cmp	r1, #41	; 0x29
   bc488:	d156      	bne.n	bc538 <__hexnan+0x130>
   bc48a:	3202      	adds	r2, #2
   bc48c:	f8ca 2000 	str.w	r2, [sl]
   bc490:	f1bb 0f00 	cmp.w	fp, #0
   bc494:	d050      	beq.n	bc538 <__hexnan+0x130>
   bc496:	454c      	cmp	r4, r9
   bc498:	d206      	bcs.n	bc4a8 <__hexnan+0xa0>
   bc49a:	2d07      	cmp	r5, #7
   bc49c:	dc04      	bgt.n	bc4a8 <__hexnan+0xa0>
   bc49e:	462a      	mov	r2, r5
   bc4a0:	4649      	mov	r1, r9
   bc4a2:	4620      	mov	r0, r4
   bc4a4:	f7ff ff8a 	bl	bc3bc <L_shift>
   bc4a8:	4544      	cmp	r4, r8
   bc4aa:	d934      	bls.n	bc516 <__hexnan+0x10e>
   bc4ac:	f1a8 0204 	sub.w	r2, r8, #4
   bc4b0:	4623      	mov	r3, r4
   bc4b2:	f853 1b04 	ldr.w	r1, [r3], #4
   bc4b6:	f842 1f04 	str.w	r1, [r2, #4]!
   bc4ba:	429f      	cmp	r7, r3
   bc4bc:	d2f9      	bcs.n	bc4b2 <__hexnan+0xaa>
   bc4be:	1b3b      	subs	r3, r7, r4
   bc4c0:	f023 0303 	bic.w	r3, r3, #3
   bc4c4:	3304      	adds	r3, #4
   bc4c6:	3401      	adds	r4, #1
   bc4c8:	3e03      	subs	r6, #3
   bc4ca:	42b4      	cmp	r4, r6
   bc4cc:	bf88      	it	hi
   bc4ce:	2304      	movhi	r3, #4
   bc4d0:	4443      	add	r3, r8
   bc4d2:	2200      	movs	r2, #0
   bc4d4:	f843 2b04 	str.w	r2, [r3], #4
   bc4d8:	429f      	cmp	r7, r3
   bc4da:	d2fb      	bcs.n	bc4d4 <__hexnan+0xcc>
   bc4dc:	683b      	ldr	r3, [r7, #0]
   bc4de:	b91b      	cbnz	r3, bc4e8 <__hexnan+0xe0>
   bc4e0:	4547      	cmp	r7, r8
   bc4e2:	d127      	bne.n	bc534 <__hexnan+0x12c>
   bc4e4:	2301      	movs	r3, #1
   bc4e6:	603b      	str	r3, [r7, #0]
   bc4e8:	2005      	movs	r0, #5
   bc4ea:	e026      	b.n	bc53a <__hexnan+0x132>
   bc4ec:	3501      	adds	r5, #1
   bc4ee:	2d08      	cmp	r5, #8
   bc4f0:	f10b 0b01 	add.w	fp, fp, #1
   bc4f4:	dd06      	ble.n	bc504 <__hexnan+0xfc>
   bc4f6:	4544      	cmp	r4, r8
   bc4f8:	d9c3      	bls.n	bc482 <__hexnan+0x7a>
   bc4fa:	2300      	movs	r3, #0
   bc4fc:	f844 3c04 	str.w	r3, [r4, #-4]
   bc500:	2501      	movs	r5, #1
   bc502:	3c04      	subs	r4, #4
   bc504:	6822      	ldr	r2, [r4, #0]
   bc506:	f000 000f 	and.w	r0, r0, #15
   bc50a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc50e:	6022      	str	r2, [r4, #0]
   bc510:	e7b7      	b.n	bc482 <__hexnan+0x7a>
   bc512:	2508      	movs	r5, #8
   bc514:	e7b5      	b.n	bc482 <__hexnan+0x7a>
   bc516:	9b01      	ldr	r3, [sp, #4]
   bc518:	2b00      	cmp	r3, #0
   bc51a:	d0df      	beq.n	bc4dc <__hexnan+0xd4>
   bc51c:	f04f 32ff 	mov.w	r2, #4294967295
   bc520:	f1c3 0320 	rsb	r3, r3, #32
   bc524:	fa22 f303 	lsr.w	r3, r2, r3
   bc528:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc52c:	401a      	ands	r2, r3
   bc52e:	f846 2c04 	str.w	r2, [r6, #-4]
   bc532:	e7d3      	b.n	bc4dc <__hexnan+0xd4>
   bc534:	3f04      	subs	r7, #4
   bc536:	e7d1      	b.n	bc4dc <__hexnan+0xd4>
   bc538:	2004      	movs	r0, #4
   bc53a:	b007      	add	sp, #28
   bc53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc540 <__retarget_lock_acquire_recursive>:
   bc540:	4770      	bx	lr

000bc542 <__retarget_lock_release>:
   bc542:	4770      	bx	lr

000bc544 <__retarget_lock_release_recursive>:
   bc544:	4770      	bx	lr

000bc546 <__ascii_mbtowc>:
   bc546:	b082      	sub	sp, #8
   bc548:	b901      	cbnz	r1, bc54c <__ascii_mbtowc+0x6>
   bc54a:	a901      	add	r1, sp, #4
   bc54c:	b142      	cbz	r2, bc560 <__ascii_mbtowc+0x1a>
   bc54e:	b14b      	cbz	r3, bc564 <__ascii_mbtowc+0x1e>
   bc550:	7813      	ldrb	r3, [r2, #0]
   bc552:	600b      	str	r3, [r1, #0]
   bc554:	7812      	ldrb	r2, [r2, #0]
   bc556:	1e10      	subs	r0, r2, #0
   bc558:	bf18      	it	ne
   bc55a:	2001      	movne	r0, #1
   bc55c:	b002      	add	sp, #8
   bc55e:	4770      	bx	lr
   bc560:	4610      	mov	r0, r2
   bc562:	e7fb      	b.n	bc55c <__ascii_mbtowc+0x16>
   bc564:	f06f 0001 	mvn.w	r0, #1
   bc568:	e7f8      	b.n	bc55c <__ascii_mbtowc+0x16>
	...

000bc56c <_Balloc>:
   bc56c:	b570      	push	{r4, r5, r6, lr}
   bc56e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc570:	4604      	mov	r4, r0
   bc572:	460d      	mov	r5, r1
   bc574:	b976      	cbnz	r6, bc594 <_Balloc+0x28>
   bc576:	2010      	movs	r0, #16
   bc578:	f7fa fd60 	bl	b703c <malloc>
   bc57c:	4602      	mov	r2, r0
   bc57e:	6260      	str	r0, [r4, #36]	; 0x24
   bc580:	b920      	cbnz	r0, bc58c <_Balloc+0x20>
   bc582:	4b18      	ldr	r3, [pc, #96]	; (bc5e4 <_Balloc+0x78>)
   bc584:	4818      	ldr	r0, [pc, #96]	; (bc5e8 <_Balloc+0x7c>)
   bc586:	2166      	movs	r1, #102	; 0x66
   bc588:	f7fa fda0 	bl	b70cc <__assert_func>
   bc58c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc590:	6006      	str	r6, [r0, #0]
   bc592:	60c6      	str	r6, [r0, #12]
   bc594:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc596:	68f3      	ldr	r3, [r6, #12]
   bc598:	b183      	cbz	r3, bc5bc <_Balloc+0x50>
   bc59a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc59c:	68db      	ldr	r3, [r3, #12]
   bc59e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc5a2:	b9b8      	cbnz	r0, bc5d4 <_Balloc+0x68>
   bc5a4:	2101      	movs	r1, #1
   bc5a6:	fa01 f605 	lsl.w	r6, r1, r5
   bc5aa:	1d72      	adds	r2, r6, #5
   bc5ac:	0092      	lsls	r2, r2, #2
   bc5ae:	4620      	mov	r0, r4
   bc5b0:	f000 fc9d 	bl	bceee <_calloc_r>
   bc5b4:	b160      	cbz	r0, bc5d0 <_Balloc+0x64>
   bc5b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc5ba:	e00e      	b.n	bc5da <_Balloc+0x6e>
   bc5bc:	2221      	movs	r2, #33	; 0x21
   bc5be:	2104      	movs	r1, #4
   bc5c0:	4620      	mov	r0, r4
   bc5c2:	f000 fc94 	bl	bceee <_calloc_r>
   bc5c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc5c8:	60f0      	str	r0, [r6, #12]
   bc5ca:	68db      	ldr	r3, [r3, #12]
   bc5cc:	2b00      	cmp	r3, #0
   bc5ce:	d1e4      	bne.n	bc59a <_Balloc+0x2e>
   bc5d0:	2000      	movs	r0, #0
   bc5d2:	bd70      	pop	{r4, r5, r6, pc}
   bc5d4:	6802      	ldr	r2, [r0, #0]
   bc5d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc5da:	2300      	movs	r3, #0
   bc5dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc5e0:	e7f7      	b.n	bc5d2 <_Balloc+0x66>
   bc5e2:	bf00      	nop
   bc5e4:	000bdca6 	.word	0x000bdca6
   bc5e8:	000bdec4 	.word	0x000bdec4

000bc5ec <_Bfree>:
   bc5ec:	b570      	push	{r4, r5, r6, lr}
   bc5ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc5f0:	4605      	mov	r5, r0
   bc5f2:	460c      	mov	r4, r1
   bc5f4:	b976      	cbnz	r6, bc614 <_Bfree+0x28>
   bc5f6:	2010      	movs	r0, #16
   bc5f8:	f7fa fd20 	bl	b703c <malloc>
   bc5fc:	4602      	mov	r2, r0
   bc5fe:	6268      	str	r0, [r5, #36]	; 0x24
   bc600:	b920      	cbnz	r0, bc60c <_Bfree+0x20>
   bc602:	4b09      	ldr	r3, [pc, #36]	; (bc628 <_Bfree+0x3c>)
   bc604:	4809      	ldr	r0, [pc, #36]	; (bc62c <_Bfree+0x40>)
   bc606:	218a      	movs	r1, #138	; 0x8a
   bc608:	f7fa fd60 	bl	b70cc <__assert_func>
   bc60c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc610:	6006      	str	r6, [r0, #0]
   bc612:	60c6      	str	r6, [r0, #12]
   bc614:	b13c      	cbz	r4, bc626 <_Bfree+0x3a>
   bc616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc618:	6862      	ldr	r2, [r4, #4]
   bc61a:	68db      	ldr	r3, [r3, #12]
   bc61c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc620:	6021      	str	r1, [r4, #0]
   bc622:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc626:	bd70      	pop	{r4, r5, r6, pc}
   bc628:	000bdca6 	.word	0x000bdca6
   bc62c:	000bdec4 	.word	0x000bdec4

000bc630 <__multadd>:
   bc630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc634:	690d      	ldr	r5, [r1, #16]
   bc636:	4607      	mov	r7, r0
   bc638:	460c      	mov	r4, r1
   bc63a:	461e      	mov	r6, r3
   bc63c:	f101 0c14 	add.w	ip, r1, #20
   bc640:	2000      	movs	r0, #0
   bc642:	f8dc 3000 	ldr.w	r3, [ip]
   bc646:	b299      	uxth	r1, r3
   bc648:	fb02 6101 	mla	r1, r2, r1, r6
   bc64c:	0c1e      	lsrs	r6, r3, #16
   bc64e:	0c0b      	lsrs	r3, r1, #16
   bc650:	fb02 3306 	mla	r3, r2, r6, r3
   bc654:	b289      	uxth	r1, r1
   bc656:	3001      	adds	r0, #1
   bc658:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc65c:	4285      	cmp	r5, r0
   bc65e:	f84c 1b04 	str.w	r1, [ip], #4
   bc662:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc666:	dcec      	bgt.n	bc642 <__multadd+0x12>
   bc668:	b30e      	cbz	r6, bc6ae <__multadd+0x7e>
   bc66a:	68a3      	ldr	r3, [r4, #8]
   bc66c:	42ab      	cmp	r3, r5
   bc66e:	dc19      	bgt.n	bc6a4 <__multadd+0x74>
   bc670:	6861      	ldr	r1, [r4, #4]
   bc672:	4638      	mov	r0, r7
   bc674:	3101      	adds	r1, #1
   bc676:	f7ff ff79 	bl	bc56c <_Balloc>
   bc67a:	4680      	mov	r8, r0
   bc67c:	b928      	cbnz	r0, bc68a <__multadd+0x5a>
   bc67e:	4602      	mov	r2, r0
   bc680:	4b0c      	ldr	r3, [pc, #48]	; (bc6b4 <__multadd+0x84>)
   bc682:	480d      	ldr	r0, [pc, #52]	; (bc6b8 <__multadd+0x88>)
   bc684:	21b5      	movs	r1, #181	; 0xb5
   bc686:	f7fa fd21 	bl	b70cc <__assert_func>
   bc68a:	6922      	ldr	r2, [r4, #16]
   bc68c:	3202      	adds	r2, #2
   bc68e:	f104 010c 	add.w	r1, r4, #12
   bc692:	0092      	lsls	r2, r2, #2
   bc694:	300c      	adds	r0, #12
   bc696:	f7fe fb8e 	bl	badb6 <memcpy>
   bc69a:	4621      	mov	r1, r4
   bc69c:	4638      	mov	r0, r7
   bc69e:	f7ff ffa5 	bl	bc5ec <_Bfree>
   bc6a2:	4644      	mov	r4, r8
   bc6a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc6a8:	3501      	adds	r5, #1
   bc6aa:	615e      	str	r6, [r3, #20]
   bc6ac:	6125      	str	r5, [r4, #16]
   bc6ae:	4620      	mov	r0, r4
   bc6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc6b4:	000bde17 	.word	0x000bde17
   bc6b8:	000bdec4 	.word	0x000bdec4

000bc6bc <__s2b>:
   bc6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc6c0:	460c      	mov	r4, r1
   bc6c2:	4615      	mov	r5, r2
   bc6c4:	461f      	mov	r7, r3
   bc6c6:	2209      	movs	r2, #9
   bc6c8:	3308      	adds	r3, #8
   bc6ca:	4606      	mov	r6, r0
   bc6cc:	fb93 f3f2 	sdiv	r3, r3, r2
   bc6d0:	2100      	movs	r1, #0
   bc6d2:	2201      	movs	r2, #1
   bc6d4:	429a      	cmp	r2, r3
   bc6d6:	db09      	blt.n	bc6ec <__s2b+0x30>
   bc6d8:	4630      	mov	r0, r6
   bc6da:	f7ff ff47 	bl	bc56c <_Balloc>
   bc6de:	b940      	cbnz	r0, bc6f2 <__s2b+0x36>
   bc6e0:	4602      	mov	r2, r0
   bc6e2:	4b19      	ldr	r3, [pc, #100]	; (bc748 <__s2b+0x8c>)
   bc6e4:	4819      	ldr	r0, [pc, #100]	; (bc74c <__s2b+0x90>)
   bc6e6:	21ce      	movs	r1, #206	; 0xce
   bc6e8:	f7fa fcf0 	bl	b70cc <__assert_func>
   bc6ec:	0052      	lsls	r2, r2, #1
   bc6ee:	3101      	adds	r1, #1
   bc6f0:	e7f0      	b.n	bc6d4 <__s2b+0x18>
   bc6f2:	9b08      	ldr	r3, [sp, #32]
   bc6f4:	6143      	str	r3, [r0, #20]
   bc6f6:	2d09      	cmp	r5, #9
   bc6f8:	f04f 0301 	mov.w	r3, #1
   bc6fc:	6103      	str	r3, [r0, #16]
   bc6fe:	dd16      	ble.n	bc72e <__s2b+0x72>
   bc700:	f104 0909 	add.w	r9, r4, #9
   bc704:	46c8      	mov	r8, r9
   bc706:	442c      	add	r4, r5
   bc708:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc70c:	4601      	mov	r1, r0
   bc70e:	3b30      	subs	r3, #48	; 0x30
   bc710:	220a      	movs	r2, #10
   bc712:	4630      	mov	r0, r6
   bc714:	f7ff ff8c 	bl	bc630 <__multadd>
   bc718:	45a0      	cmp	r8, r4
   bc71a:	d1f5      	bne.n	bc708 <__s2b+0x4c>
   bc71c:	f1a5 0408 	sub.w	r4, r5, #8
   bc720:	444c      	add	r4, r9
   bc722:	1b2d      	subs	r5, r5, r4
   bc724:	1963      	adds	r3, r4, r5
   bc726:	42bb      	cmp	r3, r7
   bc728:	db04      	blt.n	bc734 <__s2b+0x78>
   bc72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc72e:	340a      	adds	r4, #10
   bc730:	2509      	movs	r5, #9
   bc732:	e7f6      	b.n	bc722 <__s2b+0x66>
   bc734:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc738:	4601      	mov	r1, r0
   bc73a:	3b30      	subs	r3, #48	; 0x30
   bc73c:	220a      	movs	r2, #10
   bc73e:	4630      	mov	r0, r6
   bc740:	f7ff ff76 	bl	bc630 <__multadd>
   bc744:	e7ee      	b.n	bc724 <__s2b+0x68>
   bc746:	bf00      	nop
   bc748:	000bde17 	.word	0x000bde17
   bc74c:	000bdec4 	.word	0x000bdec4

000bc750 <__hi0bits>:
   bc750:	0c03      	lsrs	r3, r0, #16
   bc752:	041b      	lsls	r3, r3, #16
   bc754:	b9d3      	cbnz	r3, bc78c <__hi0bits+0x3c>
   bc756:	0400      	lsls	r0, r0, #16
   bc758:	2310      	movs	r3, #16
   bc75a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bc75e:	bf04      	itt	eq
   bc760:	0200      	lsleq	r0, r0, #8
   bc762:	3308      	addeq	r3, #8
   bc764:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bc768:	bf04      	itt	eq
   bc76a:	0100      	lsleq	r0, r0, #4
   bc76c:	3304      	addeq	r3, #4
   bc76e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bc772:	bf04      	itt	eq
   bc774:	0080      	lsleq	r0, r0, #2
   bc776:	3302      	addeq	r3, #2
   bc778:	2800      	cmp	r0, #0
   bc77a:	db05      	blt.n	bc788 <__hi0bits+0x38>
   bc77c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bc780:	f103 0301 	add.w	r3, r3, #1
   bc784:	bf08      	it	eq
   bc786:	2320      	moveq	r3, #32
   bc788:	4618      	mov	r0, r3
   bc78a:	4770      	bx	lr
   bc78c:	2300      	movs	r3, #0
   bc78e:	e7e4      	b.n	bc75a <__hi0bits+0xa>

000bc790 <__lo0bits>:
   bc790:	6803      	ldr	r3, [r0, #0]
   bc792:	f013 0207 	ands.w	r2, r3, #7
   bc796:	4601      	mov	r1, r0
   bc798:	d00b      	beq.n	bc7b2 <__lo0bits+0x22>
   bc79a:	07da      	lsls	r2, r3, #31
   bc79c:	d423      	bmi.n	bc7e6 <__lo0bits+0x56>
   bc79e:	0798      	lsls	r0, r3, #30
   bc7a0:	bf49      	itett	mi
   bc7a2:	085b      	lsrmi	r3, r3, #1
   bc7a4:	089b      	lsrpl	r3, r3, #2
   bc7a6:	2001      	movmi	r0, #1
   bc7a8:	600b      	strmi	r3, [r1, #0]
   bc7aa:	bf5c      	itt	pl
   bc7ac:	600b      	strpl	r3, [r1, #0]
   bc7ae:	2002      	movpl	r0, #2
   bc7b0:	4770      	bx	lr
   bc7b2:	b298      	uxth	r0, r3
   bc7b4:	b9a8      	cbnz	r0, bc7e2 <__lo0bits+0x52>
   bc7b6:	0c1b      	lsrs	r3, r3, #16
   bc7b8:	2010      	movs	r0, #16
   bc7ba:	b2da      	uxtb	r2, r3
   bc7bc:	b90a      	cbnz	r2, bc7c2 <__lo0bits+0x32>
   bc7be:	3008      	adds	r0, #8
   bc7c0:	0a1b      	lsrs	r3, r3, #8
   bc7c2:	071a      	lsls	r2, r3, #28
   bc7c4:	bf04      	itt	eq
   bc7c6:	091b      	lsreq	r3, r3, #4
   bc7c8:	3004      	addeq	r0, #4
   bc7ca:	079a      	lsls	r2, r3, #30
   bc7cc:	bf04      	itt	eq
   bc7ce:	089b      	lsreq	r3, r3, #2
   bc7d0:	3002      	addeq	r0, #2
   bc7d2:	07da      	lsls	r2, r3, #31
   bc7d4:	d403      	bmi.n	bc7de <__lo0bits+0x4e>
   bc7d6:	085b      	lsrs	r3, r3, #1
   bc7d8:	f100 0001 	add.w	r0, r0, #1
   bc7dc:	d005      	beq.n	bc7ea <__lo0bits+0x5a>
   bc7de:	600b      	str	r3, [r1, #0]
   bc7e0:	4770      	bx	lr
   bc7e2:	4610      	mov	r0, r2
   bc7e4:	e7e9      	b.n	bc7ba <__lo0bits+0x2a>
   bc7e6:	2000      	movs	r0, #0
   bc7e8:	4770      	bx	lr
   bc7ea:	2020      	movs	r0, #32
   bc7ec:	4770      	bx	lr
	...

000bc7f0 <__i2b>:
   bc7f0:	b510      	push	{r4, lr}
   bc7f2:	460c      	mov	r4, r1
   bc7f4:	2101      	movs	r1, #1
   bc7f6:	f7ff feb9 	bl	bc56c <_Balloc>
   bc7fa:	4602      	mov	r2, r0
   bc7fc:	b928      	cbnz	r0, bc80a <__i2b+0x1a>
   bc7fe:	4b05      	ldr	r3, [pc, #20]	; (bc814 <__i2b+0x24>)
   bc800:	4805      	ldr	r0, [pc, #20]	; (bc818 <__i2b+0x28>)
   bc802:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bc806:	f7fa fc61 	bl	b70cc <__assert_func>
   bc80a:	2301      	movs	r3, #1
   bc80c:	6144      	str	r4, [r0, #20]
   bc80e:	6103      	str	r3, [r0, #16]
   bc810:	bd10      	pop	{r4, pc}
   bc812:	bf00      	nop
   bc814:	000bde17 	.word	0x000bde17
   bc818:	000bdec4 	.word	0x000bdec4

000bc81c <__multiply>:
   bc81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc820:	4691      	mov	r9, r2
   bc822:	690a      	ldr	r2, [r1, #16]
   bc824:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc828:	429a      	cmp	r2, r3
   bc82a:	bfb8      	it	lt
   bc82c:	460b      	movlt	r3, r1
   bc82e:	460c      	mov	r4, r1
   bc830:	bfbc      	itt	lt
   bc832:	464c      	movlt	r4, r9
   bc834:	4699      	movlt	r9, r3
   bc836:	6927      	ldr	r7, [r4, #16]
   bc838:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bc83c:	68a3      	ldr	r3, [r4, #8]
   bc83e:	6861      	ldr	r1, [r4, #4]
   bc840:	eb07 060a 	add.w	r6, r7, sl
   bc844:	42b3      	cmp	r3, r6
   bc846:	b085      	sub	sp, #20
   bc848:	bfb8      	it	lt
   bc84a:	3101      	addlt	r1, #1
   bc84c:	f7ff fe8e 	bl	bc56c <_Balloc>
   bc850:	b930      	cbnz	r0, bc860 <__multiply+0x44>
   bc852:	4602      	mov	r2, r0
   bc854:	4b44      	ldr	r3, [pc, #272]	; (bc968 <__multiply+0x14c>)
   bc856:	4845      	ldr	r0, [pc, #276]	; (bc96c <__multiply+0x150>)
   bc858:	f240 115d 	movw	r1, #349	; 0x15d
   bc85c:	f7fa fc36 	bl	b70cc <__assert_func>
   bc860:	f100 0514 	add.w	r5, r0, #20
   bc864:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bc868:	462b      	mov	r3, r5
   bc86a:	2200      	movs	r2, #0
   bc86c:	4543      	cmp	r3, r8
   bc86e:	d321      	bcc.n	bc8b4 <__multiply+0x98>
   bc870:	f104 0314 	add.w	r3, r4, #20
   bc874:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bc878:	f109 0314 	add.w	r3, r9, #20
   bc87c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bc880:	9202      	str	r2, [sp, #8]
   bc882:	1b3a      	subs	r2, r7, r4
   bc884:	3a15      	subs	r2, #21
   bc886:	f022 0203 	bic.w	r2, r2, #3
   bc88a:	3204      	adds	r2, #4
   bc88c:	f104 0115 	add.w	r1, r4, #21
   bc890:	428f      	cmp	r7, r1
   bc892:	bf38      	it	cc
   bc894:	2204      	movcc	r2, #4
   bc896:	9201      	str	r2, [sp, #4]
   bc898:	9a02      	ldr	r2, [sp, #8]
   bc89a:	9303      	str	r3, [sp, #12]
   bc89c:	429a      	cmp	r2, r3
   bc89e:	d80c      	bhi.n	bc8ba <__multiply+0x9e>
   bc8a0:	2e00      	cmp	r6, #0
   bc8a2:	dd03      	ble.n	bc8ac <__multiply+0x90>
   bc8a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bc8a8:	2b00      	cmp	r3, #0
   bc8aa:	d05a      	beq.n	bc962 <__multiply+0x146>
   bc8ac:	6106      	str	r6, [r0, #16]
   bc8ae:	b005      	add	sp, #20
   bc8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc8b4:	f843 2b04 	str.w	r2, [r3], #4
   bc8b8:	e7d8      	b.n	bc86c <__multiply+0x50>
   bc8ba:	f8b3 a000 	ldrh.w	sl, [r3]
   bc8be:	f1ba 0f00 	cmp.w	sl, #0
   bc8c2:	d024      	beq.n	bc90e <__multiply+0xf2>
   bc8c4:	f104 0e14 	add.w	lr, r4, #20
   bc8c8:	46a9      	mov	r9, r5
   bc8ca:	f04f 0c00 	mov.w	ip, #0
   bc8ce:	f85e 2b04 	ldr.w	r2, [lr], #4
   bc8d2:	f8d9 1000 	ldr.w	r1, [r9]
   bc8d6:	fa1f fb82 	uxth.w	fp, r2
   bc8da:	b289      	uxth	r1, r1
   bc8dc:	fb0a 110b 	mla	r1, sl, fp, r1
   bc8e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bc8e4:	f8d9 2000 	ldr.w	r2, [r9]
   bc8e8:	4461      	add	r1, ip
   bc8ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc8ee:	fb0a c20b 	mla	r2, sl, fp, ip
   bc8f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bc8f6:	b289      	uxth	r1, r1
   bc8f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bc8fc:	4577      	cmp	r7, lr
   bc8fe:	f849 1b04 	str.w	r1, [r9], #4
   bc902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc906:	d8e2      	bhi.n	bc8ce <__multiply+0xb2>
   bc908:	9a01      	ldr	r2, [sp, #4]
   bc90a:	f845 c002 	str.w	ip, [r5, r2]
   bc90e:	9a03      	ldr	r2, [sp, #12]
   bc910:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bc914:	3304      	adds	r3, #4
   bc916:	f1b9 0f00 	cmp.w	r9, #0
   bc91a:	d020      	beq.n	bc95e <__multiply+0x142>
   bc91c:	6829      	ldr	r1, [r5, #0]
   bc91e:	f104 0c14 	add.w	ip, r4, #20
   bc922:	46ae      	mov	lr, r5
   bc924:	f04f 0a00 	mov.w	sl, #0
   bc928:	f8bc b000 	ldrh.w	fp, [ip]
   bc92c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bc930:	fb09 220b 	mla	r2, r9, fp, r2
   bc934:	4492      	add	sl, r2
   bc936:	b289      	uxth	r1, r1
   bc938:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bc93c:	f84e 1b04 	str.w	r1, [lr], #4
   bc940:	f85c 2b04 	ldr.w	r2, [ip], #4
   bc944:	f8be 1000 	ldrh.w	r1, [lr]
   bc948:	0c12      	lsrs	r2, r2, #16
   bc94a:	fb09 1102 	mla	r1, r9, r2, r1
   bc94e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bc952:	4567      	cmp	r7, ip
   bc954:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bc958:	d8e6      	bhi.n	bc928 <__multiply+0x10c>
   bc95a:	9a01      	ldr	r2, [sp, #4]
   bc95c:	50a9      	str	r1, [r5, r2]
   bc95e:	3504      	adds	r5, #4
   bc960:	e79a      	b.n	bc898 <__multiply+0x7c>
   bc962:	3e01      	subs	r6, #1
   bc964:	e79c      	b.n	bc8a0 <__multiply+0x84>
   bc966:	bf00      	nop
   bc968:	000bde17 	.word	0x000bde17
   bc96c:	000bdec4 	.word	0x000bdec4

000bc970 <__pow5mult>:
   bc970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc974:	4615      	mov	r5, r2
   bc976:	f012 0203 	ands.w	r2, r2, #3
   bc97a:	4606      	mov	r6, r0
   bc97c:	460f      	mov	r7, r1
   bc97e:	d007      	beq.n	bc990 <__pow5mult+0x20>
   bc980:	4c25      	ldr	r4, [pc, #148]	; (bca18 <__pow5mult+0xa8>)
   bc982:	3a01      	subs	r2, #1
   bc984:	2300      	movs	r3, #0
   bc986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bc98a:	f7ff fe51 	bl	bc630 <__multadd>
   bc98e:	4607      	mov	r7, r0
   bc990:	10ad      	asrs	r5, r5, #2
   bc992:	d03d      	beq.n	bca10 <__pow5mult+0xa0>
   bc994:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc996:	b97c      	cbnz	r4, bc9b8 <__pow5mult+0x48>
   bc998:	2010      	movs	r0, #16
   bc99a:	f7fa fb4f 	bl	b703c <malloc>
   bc99e:	4602      	mov	r2, r0
   bc9a0:	6270      	str	r0, [r6, #36]	; 0x24
   bc9a2:	b928      	cbnz	r0, bc9b0 <__pow5mult+0x40>
   bc9a4:	4b1d      	ldr	r3, [pc, #116]	; (bca1c <__pow5mult+0xac>)
   bc9a6:	481e      	ldr	r0, [pc, #120]	; (bca20 <__pow5mult+0xb0>)
   bc9a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bc9ac:	f7fa fb8e 	bl	b70cc <__assert_func>
   bc9b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc9b4:	6004      	str	r4, [r0, #0]
   bc9b6:	60c4      	str	r4, [r0, #12]
   bc9b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bc9bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bc9c0:	b94c      	cbnz	r4, bc9d6 <__pow5mult+0x66>
   bc9c2:	f240 2171 	movw	r1, #625	; 0x271
   bc9c6:	4630      	mov	r0, r6
   bc9c8:	f7ff ff12 	bl	bc7f0 <__i2b>
   bc9cc:	2300      	movs	r3, #0
   bc9ce:	f8c8 0008 	str.w	r0, [r8, #8]
   bc9d2:	4604      	mov	r4, r0
   bc9d4:	6003      	str	r3, [r0, #0]
   bc9d6:	f04f 0900 	mov.w	r9, #0
   bc9da:	07eb      	lsls	r3, r5, #31
   bc9dc:	d50a      	bpl.n	bc9f4 <__pow5mult+0x84>
   bc9de:	4639      	mov	r1, r7
   bc9e0:	4622      	mov	r2, r4
   bc9e2:	4630      	mov	r0, r6
   bc9e4:	f7ff ff1a 	bl	bc81c <__multiply>
   bc9e8:	4639      	mov	r1, r7
   bc9ea:	4680      	mov	r8, r0
   bc9ec:	4630      	mov	r0, r6
   bc9ee:	f7ff fdfd 	bl	bc5ec <_Bfree>
   bc9f2:	4647      	mov	r7, r8
   bc9f4:	106d      	asrs	r5, r5, #1
   bc9f6:	d00b      	beq.n	bca10 <__pow5mult+0xa0>
   bc9f8:	6820      	ldr	r0, [r4, #0]
   bc9fa:	b938      	cbnz	r0, bca0c <__pow5mult+0x9c>
   bc9fc:	4622      	mov	r2, r4
   bc9fe:	4621      	mov	r1, r4
   bca00:	4630      	mov	r0, r6
   bca02:	f7ff ff0b 	bl	bc81c <__multiply>
   bca06:	6020      	str	r0, [r4, #0]
   bca08:	f8c0 9000 	str.w	r9, [r0]
   bca0c:	4604      	mov	r4, r0
   bca0e:	e7e4      	b.n	bc9da <__pow5mult+0x6a>
   bca10:	4638      	mov	r0, r7
   bca12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bca16:	bf00      	nop
   bca18:	000be038 	.word	0x000be038
   bca1c:	000bdca6 	.word	0x000bdca6
   bca20:	000bdec4 	.word	0x000bdec4

000bca24 <__lshift>:
   bca24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bca28:	460c      	mov	r4, r1
   bca2a:	6849      	ldr	r1, [r1, #4]
   bca2c:	6923      	ldr	r3, [r4, #16]
   bca2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bca32:	68a3      	ldr	r3, [r4, #8]
   bca34:	4607      	mov	r7, r0
   bca36:	4691      	mov	r9, r2
   bca38:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bca3c:	f108 0601 	add.w	r6, r8, #1
   bca40:	42b3      	cmp	r3, r6
   bca42:	db0b      	blt.n	bca5c <__lshift+0x38>
   bca44:	4638      	mov	r0, r7
   bca46:	f7ff fd91 	bl	bc56c <_Balloc>
   bca4a:	4605      	mov	r5, r0
   bca4c:	b948      	cbnz	r0, bca62 <__lshift+0x3e>
   bca4e:	4602      	mov	r2, r0
   bca50:	4b2a      	ldr	r3, [pc, #168]	; (bcafc <__lshift+0xd8>)
   bca52:	482b      	ldr	r0, [pc, #172]	; (bcb00 <__lshift+0xdc>)
   bca54:	f240 11d9 	movw	r1, #473	; 0x1d9
   bca58:	f7fa fb38 	bl	b70cc <__assert_func>
   bca5c:	3101      	adds	r1, #1
   bca5e:	005b      	lsls	r3, r3, #1
   bca60:	e7ee      	b.n	bca40 <__lshift+0x1c>
   bca62:	2300      	movs	r3, #0
   bca64:	f100 0114 	add.w	r1, r0, #20
   bca68:	f100 0210 	add.w	r2, r0, #16
   bca6c:	4618      	mov	r0, r3
   bca6e:	4553      	cmp	r3, sl
   bca70:	db37      	blt.n	bcae2 <__lshift+0xbe>
   bca72:	6920      	ldr	r0, [r4, #16]
   bca74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bca78:	f104 0314 	add.w	r3, r4, #20
   bca7c:	f019 091f 	ands.w	r9, r9, #31
   bca80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bca84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bca88:	d02f      	beq.n	bcaea <__lshift+0xc6>
   bca8a:	f1c9 0e20 	rsb	lr, r9, #32
   bca8e:	468a      	mov	sl, r1
   bca90:	f04f 0c00 	mov.w	ip, #0
   bca94:	681a      	ldr	r2, [r3, #0]
   bca96:	fa02 f209 	lsl.w	r2, r2, r9
   bca9a:	ea42 020c 	orr.w	r2, r2, ip
   bca9e:	f84a 2b04 	str.w	r2, [sl], #4
   bcaa2:	f853 2b04 	ldr.w	r2, [r3], #4
   bcaa6:	4298      	cmp	r0, r3
   bcaa8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bcaac:	d8f2      	bhi.n	bca94 <__lshift+0x70>
   bcaae:	1b03      	subs	r3, r0, r4
   bcab0:	3b15      	subs	r3, #21
   bcab2:	f023 0303 	bic.w	r3, r3, #3
   bcab6:	3304      	adds	r3, #4
   bcab8:	f104 0215 	add.w	r2, r4, #21
   bcabc:	4290      	cmp	r0, r2
   bcabe:	bf38      	it	cc
   bcac0:	2304      	movcc	r3, #4
   bcac2:	f841 c003 	str.w	ip, [r1, r3]
   bcac6:	f1bc 0f00 	cmp.w	ip, #0
   bcaca:	d001      	beq.n	bcad0 <__lshift+0xac>
   bcacc:	f108 0602 	add.w	r6, r8, #2
   bcad0:	3e01      	subs	r6, #1
   bcad2:	4638      	mov	r0, r7
   bcad4:	612e      	str	r6, [r5, #16]
   bcad6:	4621      	mov	r1, r4
   bcad8:	f7ff fd88 	bl	bc5ec <_Bfree>
   bcadc:	4628      	mov	r0, r5
   bcade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcae2:	f842 0f04 	str.w	r0, [r2, #4]!
   bcae6:	3301      	adds	r3, #1
   bcae8:	e7c1      	b.n	bca6e <__lshift+0x4a>
   bcaea:	3904      	subs	r1, #4
   bcaec:	f853 2b04 	ldr.w	r2, [r3], #4
   bcaf0:	f841 2f04 	str.w	r2, [r1, #4]!
   bcaf4:	4298      	cmp	r0, r3
   bcaf6:	d8f9      	bhi.n	bcaec <__lshift+0xc8>
   bcaf8:	e7ea      	b.n	bcad0 <__lshift+0xac>
   bcafa:	bf00      	nop
   bcafc:	000bde17 	.word	0x000bde17
   bcb00:	000bdec4 	.word	0x000bdec4

000bcb04 <__mcmp>:
   bcb04:	b530      	push	{r4, r5, lr}
   bcb06:	6902      	ldr	r2, [r0, #16]
   bcb08:	690c      	ldr	r4, [r1, #16]
   bcb0a:	1b12      	subs	r2, r2, r4
   bcb0c:	d10e      	bne.n	bcb2c <__mcmp+0x28>
   bcb0e:	f100 0314 	add.w	r3, r0, #20
   bcb12:	3114      	adds	r1, #20
   bcb14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bcb18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bcb1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bcb20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bcb24:	42a5      	cmp	r5, r4
   bcb26:	d003      	beq.n	bcb30 <__mcmp+0x2c>
   bcb28:	d305      	bcc.n	bcb36 <__mcmp+0x32>
   bcb2a:	2201      	movs	r2, #1
   bcb2c:	4610      	mov	r0, r2
   bcb2e:	bd30      	pop	{r4, r5, pc}
   bcb30:	4283      	cmp	r3, r0
   bcb32:	d3f3      	bcc.n	bcb1c <__mcmp+0x18>
   bcb34:	e7fa      	b.n	bcb2c <__mcmp+0x28>
   bcb36:	f04f 32ff 	mov.w	r2, #4294967295
   bcb3a:	e7f7      	b.n	bcb2c <__mcmp+0x28>

000bcb3c <__mdiff>:
   bcb3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcb40:	460c      	mov	r4, r1
   bcb42:	4606      	mov	r6, r0
   bcb44:	4611      	mov	r1, r2
   bcb46:	4620      	mov	r0, r4
   bcb48:	4690      	mov	r8, r2
   bcb4a:	f7ff ffdb 	bl	bcb04 <__mcmp>
   bcb4e:	1e05      	subs	r5, r0, #0
   bcb50:	d110      	bne.n	bcb74 <__mdiff+0x38>
   bcb52:	4629      	mov	r1, r5
   bcb54:	4630      	mov	r0, r6
   bcb56:	f7ff fd09 	bl	bc56c <_Balloc>
   bcb5a:	b930      	cbnz	r0, bcb6a <__mdiff+0x2e>
   bcb5c:	4b3a      	ldr	r3, [pc, #232]	; (bcc48 <__mdiff+0x10c>)
   bcb5e:	4602      	mov	r2, r0
   bcb60:	f240 2132 	movw	r1, #562	; 0x232
   bcb64:	4839      	ldr	r0, [pc, #228]	; (bcc4c <__mdiff+0x110>)
   bcb66:	f7fa fab1 	bl	b70cc <__assert_func>
   bcb6a:	2301      	movs	r3, #1
   bcb6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bcb70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcb74:	bfa4      	itt	ge
   bcb76:	4643      	movge	r3, r8
   bcb78:	46a0      	movge	r8, r4
   bcb7a:	4630      	mov	r0, r6
   bcb7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bcb80:	bfa6      	itte	ge
   bcb82:	461c      	movge	r4, r3
   bcb84:	2500      	movge	r5, #0
   bcb86:	2501      	movlt	r5, #1
   bcb88:	f7ff fcf0 	bl	bc56c <_Balloc>
   bcb8c:	b920      	cbnz	r0, bcb98 <__mdiff+0x5c>
   bcb8e:	4b2e      	ldr	r3, [pc, #184]	; (bcc48 <__mdiff+0x10c>)
   bcb90:	4602      	mov	r2, r0
   bcb92:	f44f 7110 	mov.w	r1, #576	; 0x240
   bcb96:	e7e5      	b.n	bcb64 <__mdiff+0x28>
   bcb98:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bcb9c:	6926      	ldr	r6, [r4, #16]
   bcb9e:	60c5      	str	r5, [r0, #12]
   bcba0:	f104 0914 	add.w	r9, r4, #20
   bcba4:	f108 0514 	add.w	r5, r8, #20
   bcba8:	f100 0e14 	add.w	lr, r0, #20
   bcbac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bcbb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bcbb4:	f108 0210 	add.w	r2, r8, #16
   bcbb8:	46f2      	mov	sl, lr
   bcbba:	2100      	movs	r1, #0
   bcbbc:	f859 3b04 	ldr.w	r3, [r9], #4
   bcbc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bcbc4:	fa1f f883 	uxth.w	r8, r3
   bcbc8:	fa11 f18b 	uxtah	r1, r1, fp
   bcbcc:	0c1b      	lsrs	r3, r3, #16
   bcbce:	eba1 0808 	sub.w	r8, r1, r8
   bcbd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bcbd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bcbda:	fa1f f888 	uxth.w	r8, r8
   bcbde:	1419      	asrs	r1, r3, #16
   bcbe0:	454e      	cmp	r6, r9
   bcbe2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bcbe6:	f84a 3b04 	str.w	r3, [sl], #4
   bcbea:	d8e7      	bhi.n	bcbbc <__mdiff+0x80>
   bcbec:	1b33      	subs	r3, r6, r4
   bcbee:	3b15      	subs	r3, #21
   bcbf0:	f023 0303 	bic.w	r3, r3, #3
   bcbf4:	3304      	adds	r3, #4
   bcbf6:	3415      	adds	r4, #21
   bcbf8:	42a6      	cmp	r6, r4
   bcbfa:	bf38      	it	cc
   bcbfc:	2304      	movcc	r3, #4
   bcbfe:	441d      	add	r5, r3
   bcc00:	4473      	add	r3, lr
   bcc02:	469e      	mov	lr, r3
   bcc04:	462e      	mov	r6, r5
   bcc06:	4566      	cmp	r6, ip
   bcc08:	d30e      	bcc.n	bcc28 <__mdiff+0xec>
   bcc0a:	f10c 0203 	add.w	r2, ip, #3
   bcc0e:	1b52      	subs	r2, r2, r5
   bcc10:	f022 0203 	bic.w	r2, r2, #3
   bcc14:	3d03      	subs	r5, #3
   bcc16:	45ac      	cmp	ip, r5
   bcc18:	bf38      	it	cc
   bcc1a:	2200      	movcc	r2, #0
   bcc1c:	441a      	add	r2, r3
   bcc1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bcc22:	b17b      	cbz	r3, bcc44 <__mdiff+0x108>
   bcc24:	6107      	str	r7, [r0, #16]
   bcc26:	e7a3      	b.n	bcb70 <__mdiff+0x34>
   bcc28:	f856 8b04 	ldr.w	r8, [r6], #4
   bcc2c:	fa11 f288 	uxtah	r2, r1, r8
   bcc30:	1414      	asrs	r4, r2, #16
   bcc32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bcc36:	b292      	uxth	r2, r2
   bcc38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bcc3c:	f84e 2b04 	str.w	r2, [lr], #4
   bcc40:	1421      	asrs	r1, r4, #16
   bcc42:	e7e0      	b.n	bcc06 <__mdiff+0xca>
   bcc44:	3f01      	subs	r7, #1
   bcc46:	e7ea      	b.n	bcc1e <__mdiff+0xe2>
   bcc48:	000bde17 	.word	0x000bde17
   bcc4c:	000bdec4 	.word	0x000bdec4

000bcc50 <__ulp>:
   bcc50:	b082      	sub	sp, #8
   bcc52:	ed8d 0b00 	vstr	d0, [sp]
   bcc56:	9b01      	ldr	r3, [sp, #4]
   bcc58:	4912      	ldr	r1, [pc, #72]	; (bcca4 <__ulp+0x54>)
   bcc5a:	4019      	ands	r1, r3
   bcc5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bcc60:	2900      	cmp	r1, #0
   bcc62:	dd05      	ble.n	bcc70 <__ulp+0x20>
   bcc64:	2200      	movs	r2, #0
   bcc66:	460b      	mov	r3, r1
   bcc68:	ec43 2b10 	vmov	d0, r2, r3
   bcc6c:	b002      	add	sp, #8
   bcc6e:	4770      	bx	lr
   bcc70:	4249      	negs	r1, r1
   bcc72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bcc76:	ea4f 5021 	mov.w	r0, r1, asr #20
   bcc7a:	f04f 0200 	mov.w	r2, #0
   bcc7e:	f04f 0300 	mov.w	r3, #0
   bcc82:	da04      	bge.n	bcc8e <__ulp+0x3e>
   bcc84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bcc88:	fa41 f300 	asr.w	r3, r1, r0
   bcc8c:	e7ec      	b.n	bcc68 <__ulp+0x18>
   bcc8e:	f1a0 0114 	sub.w	r1, r0, #20
   bcc92:	291e      	cmp	r1, #30
   bcc94:	bfda      	itte	le
   bcc96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bcc9a:	fa20 f101 	lsrle.w	r1, r0, r1
   bcc9e:	2101      	movgt	r1, #1
   bcca0:	460a      	mov	r2, r1
   bcca2:	e7e1      	b.n	bcc68 <__ulp+0x18>
   bcca4:	7ff00000 	.word	0x7ff00000

000bcca8 <__b2d>:
   bcca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bccaa:	6905      	ldr	r5, [r0, #16]
   bccac:	f100 0714 	add.w	r7, r0, #20
   bccb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bccb4:	1f2e      	subs	r6, r5, #4
   bccb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bccba:	4620      	mov	r0, r4
   bccbc:	f7ff fd48 	bl	bc750 <__hi0bits>
   bccc0:	f1c0 0320 	rsb	r3, r0, #32
   bccc4:	280a      	cmp	r0, #10
   bccc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bcd44 <__b2d+0x9c>
   bccca:	600b      	str	r3, [r1, #0]
   bcccc:	dc14      	bgt.n	bccf8 <__b2d+0x50>
   bccce:	f1c0 0e0b 	rsb	lr, r0, #11
   bccd2:	fa24 f10e 	lsr.w	r1, r4, lr
   bccd6:	42b7      	cmp	r7, r6
   bccd8:	ea41 030c 	orr.w	r3, r1, ip
   bccdc:	bf34      	ite	cc
   bccde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bcce2:	2100      	movcs	r1, #0
   bcce4:	3015      	adds	r0, #21
   bcce6:	fa04 f000 	lsl.w	r0, r4, r0
   bccea:	fa21 f10e 	lsr.w	r1, r1, lr
   bccee:	ea40 0201 	orr.w	r2, r0, r1
   bccf2:	ec43 2b10 	vmov	d0, r2, r3
   bccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bccf8:	42b7      	cmp	r7, r6
   bccfa:	bf3a      	itte	cc
   bccfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bcd00:	f1a5 0608 	subcc.w	r6, r5, #8
   bcd04:	2100      	movcs	r1, #0
   bcd06:	380b      	subs	r0, #11
   bcd08:	d017      	beq.n	bcd3a <__b2d+0x92>
   bcd0a:	f1c0 0c20 	rsb	ip, r0, #32
   bcd0e:	fa04 f500 	lsl.w	r5, r4, r0
   bcd12:	42be      	cmp	r6, r7
   bcd14:	fa21 f40c 	lsr.w	r4, r1, ip
   bcd18:	ea45 0504 	orr.w	r5, r5, r4
   bcd1c:	bf8c      	ite	hi
   bcd1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bcd22:	2400      	movls	r4, #0
   bcd24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bcd28:	fa01 f000 	lsl.w	r0, r1, r0
   bcd2c:	fa24 f40c 	lsr.w	r4, r4, ip
   bcd30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bcd34:	ea40 0204 	orr.w	r2, r0, r4
   bcd38:	e7db      	b.n	bccf2 <__b2d+0x4a>
   bcd3a:	ea44 030c 	orr.w	r3, r4, ip
   bcd3e:	460a      	mov	r2, r1
   bcd40:	e7d7      	b.n	bccf2 <__b2d+0x4a>
   bcd42:	bf00      	nop
   bcd44:	3ff00000 	.word	0x3ff00000

000bcd48 <__d2b>:
   bcd48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bcd4c:	4689      	mov	r9, r1
   bcd4e:	2101      	movs	r1, #1
   bcd50:	ec57 6b10 	vmov	r6, r7, d0
   bcd54:	4690      	mov	r8, r2
   bcd56:	f7ff fc09 	bl	bc56c <_Balloc>
   bcd5a:	4604      	mov	r4, r0
   bcd5c:	b930      	cbnz	r0, bcd6c <__d2b+0x24>
   bcd5e:	4602      	mov	r2, r0
   bcd60:	4b25      	ldr	r3, [pc, #148]	; (bcdf8 <__d2b+0xb0>)
   bcd62:	4826      	ldr	r0, [pc, #152]	; (bcdfc <__d2b+0xb4>)
   bcd64:	f240 310a 	movw	r1, #778	; 0x30a
   bcd68:	f7fa f9b0 	bl	b70cc <__assert_func>
   bcd6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bcd70:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bcd74:	bb35      	cbnz	r5, bcdc4 <__d2b+0x7c>
   bcd76:	2e00      	cmp	r6, #0
   bcd78:	9301      	str	r3, [sp, #4]
   bcd7a:	d028      	beq.n	bcdce <__d2b+0x86>
   bcd7c:	4668      	mov	r0, sp
   bcd7e:	9600      	str	r6, [sp, #0]
   bcd80:	f7ff fd06 	bl	bc790 <__lo0bits>
   bcd84:	9900      	ldr	r1, [sp, #0]
   bcd86:	b300      	cbz	r0, bcdca <__d2b+0x82>
   bcd88:	9a01      	ldr	r2, [sp, #4]
   bcd8a:	f1c0 0320 	rsb	r3, r0, #32
   bcd8e:	fa02 f303 	lsl.w	r3, r2, r3
   bcd92:	430b      	orrs	r3, r1
   bcd94:	40c2      	lsrs	r2, r0
   bcd96:	6163      	str	r3, [r4, #20]
   bcd98:	9201      	str	r2, [sp, #4]
   bcd9a:	9b01      	ldr	r3, [sp, #4]
   bcd9c:	61a3      	str	r3, [r4, #24]
   bcd9e:	2b00      	cmp	r3, #0
   bcda0:	bf14      	ite	ne
   bcda2:	2202      	movne	r2, #2
   bcda4:	2201      	moveq	r2, #1
   bcda6:	6122      	str	r2, [r4, #16]
   bcda8:	b1d5      	cbz	r5, bcde0 <__d2b+0x98>
   bcdaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bcdae:	4405      	add	r5, r0
   bcdb0:	f8c9 5000 	str.w	r5, [r9]
   bcdb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bcdb8:	f8c8 0000 	str.w	r0, [r8]
   bcdbc:	4620      	mov	r0, r4
   bcdbe:	b003      	add	sp, #12
   bcdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcdc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bcdc8:	e7d5      	b.n	bcd76 <__d2b+0x2e>
   bcdca:	6161      	str	r1, [r4, #20]
   bcdcc:	e7e5      	b.n	bcd9a <__d2b+0x52>
   bcdce:	a801      	add	r0, sp, #4
   bcdd0:	f7ff fcde 	bl	bc790 <__lo0bits>
   bcdd4:	9b01      	ldr	r3, [sp, #4]
   bcdd6:	6163      	str	r3, [r4, #20]
   bcdd8:	2201      	movs	r2, #1
   bcdda:	6122      	str	r2, [r4, #16]
   bcddc:	3020      	adds	r0, #32
   bcdde:	e7e3      	b.n	bcda8 <__d2b+0x60>
   bcde0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bcde4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bcde8:	f8c9 0000 	str.w	r0, [r9]
   bcdec:	6918      	ldr	r0, [r3, #16]
   bcdee:	f7ff fcaf 	bl	bc750 <__hi0bits>
   bcdf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bcdf6:	e7df      	b.n	bcdb8 <__d2b+0x70>
   bcdf8:	000bde17 	.word	0x000bde17
   bcdfc:	000bdec4 	.word	0x000bdec4

000bce00 <__ratio>:
   bce00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce04:	4688      	mov	r8, r1
   bce06:	4669      	mov	r1, sp
   bce08:	4681      	mov	r9, r0
   bce0a:	f7ff ff4d 	bl	bcca8 <__b2d>
   bce0e:	a901      	add	r1, sp, #4
   bce10:	4640      	mov	r0, r8
   bce12:	ec55 4b10 	vmov	r4, r5, d0
   bce16:	f7ff ff47 	bl	bcca8 <__b2d>
   bce1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bce1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bce22:	eba3 0c02 	sub.w	ip, r3, r2
   bce26:	e9dd 3200 	ldrd	r3, r2, [sp]
   bce2a:	1a9b      	subs	r3, r3, r2
   bce2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bce30:	ec51 0b10 	vmov	r0, r1, d0
   bce34:	2b00      	cmp	r3, #0
   bce36:	bfd6      	itet	le
   bce38:	460a      	movle	r2, r1
   bce3a:	462a      	movgt	r2, r5
   bce3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bce40:	468b      	mov	fp, r1
   bce42:	462f      	mov	r7, r5
   bce44:	bfd4      	ite	le
   bce46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bce4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bce4e:	4620      	mov	r0, r4
   bce50:	ee10 2a10 	vmov	r2, s0
   bce54:	465b      	mov	r3, fp
   bce56:	4639      	mov	r1, r7
   bce58:	f7fd fd86 	bl	ba968 <__aeabi_ddiv>
   bce5c:	ec41 0b10 	vmov	d0, r0, r1
   bce60:	b003      	add	sp, #12
   bce62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bce66 <__copybits>:
   bce66:	3901      	subs	r1, #1
   bce68:	b570      	push	{r4, r5, r6, lr}
   bce6a:	1149      	asrs	r1, r1, #5
   bce6c:	6914      	ldr	r4, [r2, #16]
   bce6e:	3101      	adds	r1, #1
   bce70:	f102 0314 	add.w	r3, r2, #20
   bce74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bce78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bce7c:	1f05      	subs	r5, r0, #4
   bce7e:	42a3      	cmp	r3, r4
   bce80:	d30c      	bcc.n	bce9c <__copybits+0x36>
   bce82:	1aa3      	subs	r3, r4, r2
   bce84:	3b11      	subs	r3, #17
   bce86:	f023 0303 	bic.w	r3, r3, #3
   bce8a:	3211      	adds	r2, #17
   bce8c:	42a2      	cmp	r2, r4
   bce8e:	bf88      	it	hi
   bce90:	2300      	movhi	r3, #0
   bce92:	4418      	add	r0, r3
   bce94:	2300      	movs	r3, #0
   bce96:	4288      	cmp	r0, r1
   bce98:	d305      	bcc.n	bcea6 <__copybits+0x40>
   bce9a:	bd70      	pop	{r4, r5, r6, pc}
   bce9c:	f853 6b04 	ldr.w	r6, [r3], #4
   bcea0:	f845 6f04 	str.w	r6, [r5, #4]!
   bcea4:	e7eb      	b.n	bce7e <__copybits+0x18>
   bcea6:	f840 3b04 	str.w	r3, [r0], #4
   bceaa:	e7f4      	b.n	bce96 <__copybits+0x30>

000bceac <__any_on>:
   bceac:	f100 0214 	add.w	r2, r0, #20
   bceb0:	6900      	ldr	r0, [r0, #16]
   bceb2:	114b      	asrs	r3, r1, #5
   bceb4:	4298      	cmp	r0, r3
   bceb6:	b510      	push	{r4, lr}
   bceb8:	db11      	blt.n	bcede <__any_on+0x32>
   bceba:	dd0a      	ble.n	bced2 <__any_on+0x26>
   bcebc:	f011 011f 	ands.w	r1, r1, #31
   bcec0:	d007      	beq.n	bced2 <__any_on+0x26>
   bcec2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bcec6:	fa24 f001 	lsr.w	r0, r4, r1
   bceca:	fa00 f101 	lsl.w	r1, r0, r1
   bcece:	428c      	cmp	r4, r1
   bced0:	d10b      	bne.n	bceea <__any_on+0x3e>
   bced2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bced6:	4293      	cmp	r3, r2
   bced8:	d803      	bhi.n	bcee2 <__any_on+0x36>
   bceda:	2000      	movs	r0, #0
   bcedc:	bd10      	pop	{r4, pc}
   bcede:	4603      	mov	r3, r0
   bcee0:	e7f7      	b.n	bced2 <__any_on+0x26>
   bcee2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bcee6:	2900      	cmp	r1, #0
   bcee8:	d0f5      	beq.n	bced6 <__any_on+0x2a>
   bceea:	2001      	movs	r0, #1
   bceec:	e7f6      	b.n	bcedc <__any_on+0x30>

000bceee <_calloc_r>:
   bceee:	b513      	push	{r0, r1, r4, lr}
   bcef0:	434a      	muls	r2, r1
   bcef2:	4611      	mov	r1, r2
   bcef4:	9201      	str	r2, [sp, #4]
   bcef6:	f7fa f8d9 	bl	b70ac <_malloc_r>
   bcefa:	4604      	mov	r4, r0
   bcefc:	b118      	cbz	r0, bcf06 <_calloc_r+0x18>
   bcefe:	9a01      	ldr	r2, [sp, #4]
   bcf00:	2100      	movs	r1, #0
   bcf02:	f7fd ff80 	bl	bae06 <memset>
   bcf06:	4620      	mov	r0, r4
   bcf08:	b002      	add	sp, #8
   bcf0a:	bd10      	pop	{r4, pc}
   bcf0c:	0000      	movs	r0, r0
	...

000bcf10 <nan>:
   bcf10:	ed9f 0b01 	vldr	d0, [pc, #4]	; bcf18 <nan+0x8>
   bcf14:	4770      	bx	lr
   bcf16:	bf00      	nop
   bcf18:	00000000 	.word	0x00000000
   bcf1c:	7ff80000 	.word	0x7ff80000

000bcf20 <__ascii_wctomb>:
   bcf20:	b149      	cbz	r1, bcf36 <__ascii_wctomb+0x16>
   bcf22:	2aff      	cmp	r2, #255	; 0xff
   bcf24:	bf85      	ittet	hi
   bcf26:	238a      	movhi	r3, #138	; 0x8a
   bcf28:	6003      	strhi	r3, [r0, #0]
   bcf2a:	700a      	strbls	r2, [r1, #0]
   bcf2c:	f04f 30ff 	movhi.w	r0, #4294967295
   bcf30:	bf98      	it	ls
   bcf32:	2001      	movls	r0, #1
   bcf34:	4770      	bx	lr
   bcf36:	4608      	mov	r0, r1
   bcf38:	4770      	bx	lr
	...

000bcf3c <__aeabi_d2lz>:
   bcf3c:	b538      	push	{r3, r4, r5, lr}
   bcf3e:	2200      	movs	r2, #0
   bcf40:	2300      	movs	r3, #0
   bcf42:	4604      	mov	r4, r0
   bcf44:	460d      	mov	r5, r1
   bcf46:	f7fd fe57 	bl	babf8 <__aeabi_dcmplt>
   bcf4a:	b928      	cbnz	r0, bcf58 <__aeabi_d2lz+0x1c>
   bcf4c:	4620      	mov	r0, r4
   bcf4e:	4629      	mov	r1, r5
   bcf50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bcf54:	f7fd bef4 	b.w	bad40 <__aeabi_d2ulz>
   bcf58:	4620      	mov	r0, r4
   bcf5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bcf5e:	f7fd feef 	bl	bad40 <__aeabi_d2ulz>
   bcf62:	4240      	negs	r0, r0
   bcf64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcf68:	bd38      	pop	{r3, r4, r5, pc}
   bcf6a:	bf00      	nop

000bcf6c <dynalib_user>:
   bcf6c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bcf7c:	0000 0000 6e69 7420 6568 6320 6c61 626c     ....in the callb
   bcf8c:	6361 006b 7270 6369 7365 002f 7325 000a     ack.prices/.%s..
   bcf9c:	212c 5700 6961 6974 676e 6620 726f 4220     ,!.Waiting for B
   bcfac:	454c 6c63 6569 746e 6320 6e6f 656e 7463     LEclient connect
   bcfbc:	6f69 2e6e 2e2e 6c00 776f 725f 6e61 6567     ion....low_range
   bcfcc:	685f 756f 5b72 6425 3a5d 2520 0a64 4800     _hour[%d]: %d..H
   bcfdc:	6769 6568 7473 7020 6972 6563 6f20 2066     ighest price of 
   bcfec:	6874 2065 6164 3a79 2520 0a66 4c00 776f     the day: %f..Low
   bcffc:	7365 2074 7270 6369 2065 666f 7420 6568     est price of the
   bd00c:	6420 7961 203a 6625 000a 6f48 7275 2073      day: %f..Hours 
   bd01c:	666f 7420 6568 6420 7961 7720 6568 6572     of the day where
   bd02c:	6520 656c 7463 6972 6963 7974 6920 2073      electricity is 
   bd03c:	6977 6874 6e69 6120 6363 7065 6574 2064     within accepted 
   bd04c:	6172 676e 3a65 000a 3025 6432 7420 206f     range:..%02d to 
   bd05c:	3025 6432 000a 227b 6857 5f72 6f74 6164     %02d..{"Whr_toda
   bd06c:	2279 5b3a 2c00 5d00 007d 227b 7270 6369     y":[.,.]}.{"pric
   bd07c:	7365 6579 7473 7265 6164 2279 5b3a 2500     esyesterday":[.%
   bd08c:	322e 666c 7b00 7022 6972 6563 7473 646f     .2lf.{"pricestod
   bd09c:	7961 3a22 005b 227b 7270 6369 7365 6f74     ay":[.{"pricesto
   bd0ac:	6f6d 7272 776f 3a22 005b 227b 4857 5f72     morrow":[.{"WHr_
   bd0bc:	6579 7473 7265 6164 2279 5b3a 7b00 5722     yesterday":[.{"W
   bd0cc:	7248 745f 646f 7961 3a22 005b 6146 6c69     Hr_today":[.Fail
   bd0dc:	6465 7420 206f 6c61 6f6c 6163 6574 6d20     ed to allocate m
   bd0ec:	6d65 726f 2079 6f66 2072 6f63 7473 795f     emory for cost_y
   bd0fc:	7365 6574 6472 7961 000a 6146 6c69 6465     esterday..Failed
   bd10c:	7420 206f 6c61 6f6c 6163 6574 6d20 6d65      to allocate mem
   bd11c:	726f 2079 6f66 2072 6f63 7473 745f 646f     ory for cost_tod
   bd12c:	7961 000a 6146 6c69 6465 7420 206f 6c61     ay..Failed to al
   bd13c:	6f6c 6163 6574 6d20 6d65 726f 2079 6f66     locate memory fo
   bd14c:	2072 6f63 7473 745f 6d6f 726f 6f72 0a77     r cost_tomorrow.
   bd15c:	4d00 6d65 726f 2079 6c61 6f6c 6163 6574     .Memory allocate
   bd16c:	2064 6f66 2072 7270 6369 7365 203a 6425     d for prices: %d
   bd17c:	6220 7479 7365 6f20 2066 6f64 6275 656c      bytes of double
   bd18c:	0a73 4600 6961 656c 2064 6f74 6120 6c6c     s..Failed to all
   bd19c:	636f 7461 2065 656d 6f6d 7972 6620 726f     ocate memory for
   bd1ac:	7720 5f68 6f74 6164 0a79 4600 6961 656c      wh_today..Faile
   bd1bc:	2064 6f74 6120 6c6c 636f 7461 2065 656d     d to allocate me
   bd1cc:	6f6d 7972 6620 726f 7720 5f68 6579 7473     mory for wh_yest
   bd1dc:	7265 6164 0a79 4d00 6d65 726f 2079 6c61     erday..Memory al
   bd1ec:	6f6c 6163 6574 2064 6f66 2072 6877 203a     located for wh: 
   bd1fc:	6425 6220 7479 7365 6f20 2066 6e69 7374     %d bytes of ints
   bd20c:	000a 6641 6574 2072 6c25 0a75 4900 206e     ..After %lu..In 
   bd21c:	6f77 6b72 000a 6843 6165 2870 7369 2968     work..Cheap(ish)
   bd22c:	6820 756f 7372 6f20 2066 6874 2065 6164      hours of the da
   bd23c:	3a79 0020 3025 6432 7420 206f 3025 6432     y: .%02d to %02d
   bd24c:	202c 4c00 776f 7020 6972 6563 6820 756f     , .Low price hou
   bd25c:	7372 5700 7461 2074 6f6e 0077 4b44 204b     rs.Watt now.DKK 
   bd26c:	6559 7473 7265 6164 0079 4b44 204b 6f54     Yesterday.DKK To
   bd27c:	6164 0079 4b44 204b 6f54 6f6d 7272 776f     day.DKK Tomorrow
   bd28c:	5700 7268 5420 646f 7961 5700 7268 5920     .Whr Today.Whr Y
   bd29c:	7365 6574 6472 7961 2f00 6164 6174 6573     esterday./datase
   bd2ac:	2f74 6c45 7073 746f 7270 6369 7365 663f     t/Elspotprices?f
   bd2bc:	6c69 6574 3d72 3725 2542 3232 7250 6369     ilter=%7B%22Pric
   bd2cc:	4165 6572 2561 3232 3325 2541 3232 4b44     eArea%22%3A%22DK
   bd2dc:	2532 3232 3725 2644 7473 7261 3d74 2500     2%22%7D&start=.%
   bd2ec:	2d64 3025 6432 252d 3230 0064 3054 2530     d-%02d-%02d.T00%
   bd2fc:	4133 3030 6f26 6666 6573 3d74 2630 696c     3A00&offset=0&li
   bd30c:	696d 3d74 3432 6326 6c6f 6d75 736e 533d     mit=24&columns=S
   bd31c:	6f70 5074 6972 6563 4b44 264b 6f73 7472     potPriceDKK&sort
   bd32c:	483d 756f 4472 254b 3032 5341 2643 6974     =HourDK%20ASC&ti
   bd33c:	656d 6f7a 656e 643d 006b 7061 2e69 6e65     mezone=dk.api.en
   bd34c:	7265 6967 6164 6174 6573 7672 6369 2e65     ergidataservice.
   bd35c:	6b64 4700 5445 7300 6375 6563 7373 7220     dk.GET.success r
   bd36c:	7365 6f70 736e 2065 6f63 6564 3220 3030     esponse code 200
   bd37c:	7500 646e 6665 6e69 6465 6200 6461 7220     .undefined.bad r
   bd38c:	7365 6f70 736e 0065 6150 7372 6e69 2067     esponse.Parsing 
   bd39c:	6e69 7570 2074 6166 6c69 6465 0021 6572     input failed!.re
   bd3ac:	6f63 6472 0073 7053 746f 7250 6369 4465     cords.SpotPriceD
   bd3bc:	4b4b 7000 7261 6973 676e 6620 6961 656c     KK.parsing faile
   bd3cc:	2064 0032 7270 6369 7365 4300 7275 6572     d 2.prices.Curre
   bd3dc:	746e 4820 3a48 4d4d 203a 3025 6432 253a     nt HH:MM: %02d:%
   bd3ec:	3230 0a64 5200 5353 3d49 6425 4700 7465     02d..RSSI=%d.Get
   bd3fc:	6974 676e 7020 6972 6563 6420 7461 2061     ting price data 
   bd40c:	6f66 2072 6579 7473 7265 6164 0a79 4300     for yesterday..C
   bd41c:	756f 746e 3d31 203a 6425 000a 6547 7474     ount1=: %d..Gett
   bd42c:	6e69 2067 7270 6369 2065 6164 6174 6620     ing price data f
   bd43c:	726f 7420 646f 7961 000a 6f43 6e75 3274     or today..Count2
   bd44c:	3a3d 2520 0a64 5400 6568 7020 6972 6563     =: %d..The price
   bd45c:	2073 6f66 2072 6f74 6f6d 7272 766f 7720     s for tomorrov w
   bd46c:	6c69 206c 6562 7020 6c75 656c 2064 7461     ill be pulled at
   bd47c:	2520 3a64 3030 000a 6552 6563 7669 6465      %d:00..Received
   bd48c:	7020 776f 7265 672f 7465 000a 227b 6177      power/get..{"wa
   bd49c:	7474 3a22 6425 007d 6c62 5f65 6f63 6e6e     tt":%d}.ble_conn
   bd4ac:	6365 6574 0a64 0000                         ected...

000bd4b4 <_ZTV5Timer>:
	...
   bd4bc:	4401 000b 4445 000b 4121 000b 6f43 746e     .D..ED..!A..Cont
   bd4cc:	6e65 2d74 654c 676e 6874 4100 6363 7065     ent-Length.Accep
   bd4dc:	0074 7061 6c70 6369 7461 6f69 2f6e 736a     t.application/js
   bd4ec:	6e6f 6200 3234 3035 3034 2d35 6266 6234     on.b4250405-fb4b
   bd4fc:	342d 3437 2d36 3262 3062 392d 6633 6530     -4746-b2b0-93f0e
   bd50c:	3136 3231 6332 0036 3462 3532 3430 3430     61122c6.b4250404
   bd51c:	662d 3462 2d62 3734 3634 622d 6232 2d30     -fb4b-4746-b2b0-
   bd52c:	3339 3066 3665 3131 3232 3663 6200 3234     93f0e61122c6.b42
   bd53c:	3035 3034 2d33 6266 6234 342d 3437 2d36     50403-fb4b-4746-
   bd54c:	3262 3062 392d 6633 6530 3136 3231 6332     b2b0-93f0e61122c
   bd55c:	0036 3462 3532 3430 3230 662d 3462 2d62     6.b4250402-fb4b-
   bd56c:	3734 3634 622d 6232 2d30 3339 3066 3665     4746-b2b0-93f0e6
   bd57c:	3131 3232 3663 6200 3234 3035 3034 2d36     1122c6.b4250406-
   bd58c:	6266 6234 342d 3437 2d36 3262 3062 392d     fb4b-4746-b2b0-9
   bd59c:	6633 6530 3136 3231 6332 0036 3462 3532     3f0e61122c6.b425
   bd5ac:	3430 3130 662d 3462 2d62 3734 3634 622d     0401-fb4b-4746-b
   bd5bc:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bd5cc:	3300 3166 3161 3935 2d36 6565 6637 342d     .3f1a1596-ee7f-4
   bd5dc:	6232 2d64 3438 3164 622d 6131 3932 6634     2bd-84d1-b1a294f
   bd5ec:	3238 6365 0066 7241 6f67 506e 004d 2222     82ecf.ArgonPM.""
   bd5fc:	7500 3025 7834 6e00 6c75 006c 7274 6575     .u%04x.null.true
   bd60c:	2500 2e31 3531 0067 6c25 0067 3125 312e     .%1.15g.%lg.%1.1
   bd61c:	6737 ef00 bfbb 2000 5448 5054 312f 302e     7g..... HTTP/1.0
   bd62c:	0a0d 6300 6f6c 6573 4300 6e6f 656e 7463     ...close.Connect
   bd63c:	6f69 006e 4f48 5453 5000 534f 0054 0a0d     ion.HOST.POST...
   bd64c:	0a0d 0000                                   ....

000bd650 <_ZTV9JSONClass>:
	...
   bd658:	6769 000b 676b 000b 6f62 6c6f 6165 006e     ig..kg..boolean.
   bd668:	756e 626d 7265 7300 7274 6e69 0067 7261     number.string.ar
   bd678:	6172 0079 626f 656a 7463 7500 6b6e 6f6e     ray.object.unkno
   bd688:	6e77 0000                                   wn..

000bd68c <_ZTV7JSONVar>:
	...
   bd694:	67d5 000b 67a5 000b 67c1 000b               .g...g...g..

000bd6a0 <_ZTVN5spark13EthernetClassE>:
	...
   bd6a8:	715b 000b 7151 000b 7147 000b 713d 000b     [q..Qq..Gq..=q..
   bd6b8:	7131 000b 7125 000b 9ead 000b 9eb5 000b     1q..%q..........
   bd6c8:	7119 000b 7111 000b 7107 000b 70fd 000b     .q...q...q...p..
   bd6d8:	9ee5 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bd6e8:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   bd6f8:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   bd708:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   bd718:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   bd728:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   bd738:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   bd748:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   bd758:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   bd768:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   bd778:	6465 7420 206f 7061 6570 646e 7020 6565     ed to append pee
   bd788:	2072 6543 746e 6172 206c 6564 6976 6563     r Central device
   bd798:	002e 6f43 6e6e 6365 6574 2064 7962 4320     ..Connected by C
   bd7a8:	6e65 7274 6c61 6420 7665 6369 2e65 4400     entral device..D
   bd7b8:	7369 6f63 6e6e 6365 6574 2064 7962 7220     isconnected by r
   bd7c8:	6d65 746f 2065 6564 6976 6563 002e 7544     emote device..Du
   bd7d8:	6c70 6369 7461 6465 6320 6168 6172 7463     plicated charact
   bd7e8:	7265 7369 6974 2063 6163 6e6e 746f 6220     eristic cannot b
   bd7f8:	2065 6461 6564 2e64 4600 6961 656c 2064     e added..Failed 
   bd808:	6f74 6120 7070 6e65 2064 6f6c 6163 206c     to append local 
   bd818:	6863 7261 6361 6574 6972 7473 6369 002e     characteristic..

000bd828 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd830:	7507 000b 7569 000b 7689 000b 7593 000b     .u..iu...v...u..
   bd840:	7509 000b                                   .u..

000bd844 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd84c:	7503 000b 7577 000b 7505 000b 7599 000b     .u..wu...u...u..
   bd85c:	7529 000b                                   )u..

000bd860 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd868:	7501 000b 7585 000b 7e51 000b 759f 000b     .u...u..Q~...u..
   bd878:	7549 000b                                   Iu..

000bd87c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd888:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd89a <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd89a:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd8aa <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd8aa:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bd8ba:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bd8ca:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bd8dc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd8e4:	8dc5 000b 8dcb 000b 8e09 000b 8dd9 000b     ................
   bd8f4:	8dc7 000b                                   ....

000bd8f8 <_ZTV9IPAddress>:
	...
   bd900:	9305 000b 92f5 000b 92f7 000b               ............

000bd90c <_ZTV9USBSerial>:
	...
   bd914:	9427 000b 948f 000b 9465 000b 8921 000b     '.......e...!...
   bd924:	9457 000b 9429 000b 9439 000b 9489 000b     W...)...9.......
   bd934:	9449 000b 9421 000b                         I...!...

000bd93c <_ZTV11USARTSerial>:
	...
   bd944:	9579 000b 95e5 000b 95bd 000b 8921 000b     y...........!...
   bd954:	958d 000b 95a9 000b 959b 000b 95b7 000b     ................
   bd964:	957b 000b 957f 000b                         {.......

000bd96c <_ZTV7TwoWire>:
	...
   bd974:	9645 000b 968f 000b 9667 000b 9647 000b     E.......g...G...
   bd984:	966f 000b 9677 000b 967f 000b 9687 000b     o...w...........
   bd994:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bd9a4:	2072 203d 6425 0000                         r = %d..

000bd9ac <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd9b4:	975d 000b 9781 000b 9c6b 000b 978f 000b     ].......k.......
   bd9c4:	9761 000b                                   a...

000bd9c8 <_ZTV9TCPClient>:
	...
   bd9d0:	8c55 000b 8c6d 000b 96d9 000b 96f3 000b     U...m...........
   bd9e0:	9b01 000b 971d 000b 9977 000b 9751 000b     ........w...Q...
   bd9f0:	9a09 000b 9849 000b 99a5 000b 9bb5 000b     ....I...........
   bda00:	9945 000b 9753 000b 9705 000b 9795 000b     E...S...........
   bda10:	9829 000b                                   )...

000bda14 <_ZTVN5spark9WiFiClassE>:
	...
   bda1c:	9ce3 000b 9cd9 000b 9ccf 000b 9c77 000b     ............w...
   bda2c:	9cc3 000b 9cb7 000b 9ead 000b 9eb5 000b     ................
   bda3c:	9cab 000b 9ca3 000b 9c99 000b 9c8f 000b     ................
   bda4c:	9ee5 000b                                   ....

000bda50 <_ZTV10WiFiSignal>:
	...
   bda58:	9c71 000b 9c81 000b 9c73 000b 9ced 000b     q.......s.......
   bda68:	9d21 000b 9d4d 000b 9d81 000b               !...M.......

000bda74 <_ZTVN5spark12NetworkClassE>:
	...
   bda7c:	9e6d 000b 9e77 000b 9e81 000b 9e8b 000b     m...w...........
   bda8c:	9e95 000b 9ea1 000b 9ead 000b 9eb5 000b     ................
   bda9c:	9ebd 000b 9ec9 000b 9ed1 000b 9edb 000b     ................
   bdaac:	9ee5 000b                                   ....

000bdab0 <_ZSt7nothrow>:
	...

000bdab1 <_ZTSSt19_Sp_make_shared_tag>:
   bdab1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdac1:	6572 5f64 6174 0067 0000                     red_tag....

000bdacc <_ZTISt19_Sp_make_shared_tag>:
   bdacc:	db0c 000b dab1 000b                         ........

000bdad4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdad4:	db6c 000b dae0 000b db90 000b               l...........

000bdae0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdae0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bdaf0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bdb00:	0045 0000                                   E...

000bdb04 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bdb04:	0000 0000 dad4 000b a1c5 000b a1d9 000b     ................
   bdb14:	a36d 000b a36d 000b a243 000b a185 000b     m...m...C.......
   bdb24:	a22b 000b a1ed 000b a1b7 000b               +...........

000bdb30 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bdb30:	db6c 000b db3c 000b dad4 000b               l...<.......

000bdb3c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bdb3c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bdb4c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bdb5c:	666e 456f 0000 0000                         nfoE....

000bdb64 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bdb64:	0000 0000 db30 000b a26d 000b a281 000b     ....0...m.......
   bdb74:	a36d 000b a36d 000b a243 000b a185 000b     m...m...C.......
   bdb84:	a341 000b a2cd 000b a295 000b               A...........

000bdb90 <_ZTISt9type_info>:
   bdb90:	db0c 000b db98 000b                         ........

000bdb98 <_ZTSSt9type_info>:
   bdb98:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000bdba5 <_ctype_>:
   bdba5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bdbb5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bdbc5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bdbd5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bdbe5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bdbf5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bdc05:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bdc15:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bdc25:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bdca5:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bdcb5:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bdcc5:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bdcd5:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bdce5:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bdcf5:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bdd05:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bdd15:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bdd25:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bdd35:	646e 632e 6e00 0066 6e69 7469 0079           nd.c.nf.inity..

000bdd44 <fpi.1>:
   bdd44:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bdd54:	0000 0000                                   ....

000bdd58 <fpinan.0>:
   bdd58:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bdd70 <tinytens>:
   bdd70:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bdd80:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bdd90:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bdda0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bddb0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bddc0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bddd0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bdde0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bddf0:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bde00:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bde10:	7472 6b6f 632e 4200 6c61 6f6c 2063 7573     rtok.c.Balloc su
   bde20:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bde30:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bde40:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bde50:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bde60:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bde70:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bde80:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bde90:	2f62 696c 6362 732f 6474 696c 2f62 6467     b/libc/stdlib/gd
   bdea0:	6f74 2d61 6567 6874 7865 632e 0000 0000     toa-gethex.c....

000bdeb0 <_C_numeric_locale>:
   bdeb0:	cfc1 000b d64e 000b d1ec 2003 0043 4f50     ....N...... C.PO
   bdec0:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bded0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bdee0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bdef0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bdf00:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bdf10:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bdf20:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bdf30:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bdf40:	0063 0000 0000 0000                         c.......

000bdf48 <__mprec_bigtens>:
   bdf48:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bdf58:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bdf68:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bdf70 <__mprec_tens>:
   bdf70:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bdf80:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bdf90:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bdfa0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bdfb0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bdfc0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bdfd0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bdfe0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bdff0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be000:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be010:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be020:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be030:	9db4 79d9 7843 44ea                         ...yCx.D

000be038 <p05.0>:
   be038:	0005 0000 0019 0000 007d 0000               ........}...

000be044 <link_const_variable_data_end>:
   be044:	000b4c71 	.word	0x000b4c71
   be048:	000b5589 	.word	0x000b5589
   be04c:	000b6795 	.word	0x000b6795
   be050:	000b69c9 	.word	0x000b69c9
   be054:	000b7165 	.word	0x000b7165
   be058:	000b71b1 	.word	0x000b71b1
   be05c:	000b8911 	.word	0x000b8911
   be060:	000b8a69 	.word	0x000b8a69
   be064:	000b8c39 	.word	0x000b8c39
   be068:	000b8c81 	.word	0x000b8c81
   be06c:	000b9e59 	.word	0x000b9e59
   be070:	000b9fbd 	.word	0x000b9fbd

000be074 <link_constructors_end>:
	...
