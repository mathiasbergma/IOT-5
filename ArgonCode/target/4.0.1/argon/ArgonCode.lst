
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/4.0.1/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009650  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd670  000bd670  0000d670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd694  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000022c  2003d120  000bd698  0001d120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000014a4  2003d350  2003d350  0002d350  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bd8c4  000bd8c4  0001d8c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bd8ec  000bd8ec  0001d8ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00176b6c  00000000  00000000  0001d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019f8c  00000000  00000000  0019445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047b75  00000000  00000000  001ae3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003c10  00000000  00000000  001f5f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c7a8  00000000  00000000  001f9b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045e5d  00000000  00000000  00206315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00057688  00000000  00000000  0024c172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144143  00000000  00000000  002a37fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b13c  00000000  00000000  003e7940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 f90e 	bl	ba252 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 f930 	bl	ba2a2 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d120 	.word	0x2003d120
   b404c:	000bd698 	.word	0x000bd698
   b4050:	2003d34c 	.word	0x2003d34c
   b4054:	2003d350 	.word	0x2003d350
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 f8f3 	bl	b824c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd63c 	.word	0x000bd63c
   b4080:	000bd66c 	.word	0x000bd66c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 be86 	b.w	b4d94 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 ff9f 	bl	b4fcc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 b893 	b.w	b81bc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 ba47 	b.w	b6528 <malloc>

000b409a <_Znaj>:
   b409a:	f002 ba45 	b.w	b6528 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 ba4b 	b.w	b6538 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
}
/**
 * @brief    Sets a flag when a new BLE connection is established
 */
void BLEOnConnectcallback(const BlePeerDevice &peer, void *context)
{
   b40b4:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40b6:	4b04      	ldr	r3, [pc, #16]	; (b40c8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40b8:	2201      	movs	r2, #1
   b40ba:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40bc:	f001 ff46 	bl	b5f4c <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40c0:	4b02      	ldr	r3, [pc, #8]	; (b40cc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40c2:	6018      	str	r0, [r3, #0]
}
   b40c4:	bd08      	pop	{r3, pc}
   b40c6:	bf00      	nop
   b40c8:	2003d36d 	.word	0x2003d36d
   b40cc:	2003dcf4 	.word	0x2003dcf4

000b40d0 <_Z13handle_sensorv>:
/**
 * @brief    IRQ handler for the KW sensor. This function is called every time the KW sensor detects a pulse.
 */
void handle_sensor(void)
{
   b40d0:	b508      	push	{r3, lr}
   b40d2:	f001 ff3b 	bl	b5f4c <HAL_Timer_Get_Milli_Seconds>
    static unsigned long last_read = 0;
    unsigned long current_reading = millis();
    unsigned long delta = current_reading - last_read;
   b40d6:	490c      	ldr	r1, [pc, #48]	; (b4108 <_Z13handle_sensorv+0x38>)
   b40d8:	680b      	ldr	r3, [r1, #0]
   b40da:	1ac3      	subs	r3, r0, r3

    // Check if we have a valid reading. I.e. at least 100 ms since last reading, which is equal to 36kW
    if (delta > 100)
   b40dc:	2b64      	cmp	r3, #100	; 0x64
   b40de:	d911      	bls.n	b4104 <_Z13handle_sensorv+0x34>
    {
        // We have a valid reading
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40e0:	4a0a      	ldr	r2, [pc, #40]	; (b410c <_Z13handle_sensorv+0x3c>)
   b40e2:	fbb2 f3f3 	udiv	r3, r2, r3
   b40e6:	4a0a      	ldr	r2, [pc, #40]	; (b4110 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b40e8:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40ea:	6013      	str	r3, [r2, #0]

        // One flash from sensor equals 1 Whr - Add to total
        wh_today[currentHour] += 1;
   b40ec:	4b09      	ldr	r3, [pc, #36]	; (b4114 <_Z13handle_sensorv+0x44>)
   b40ee:	7819      	ldrb	r1, [r3, #0]
   b40f0:	4b09      	ldr	r3, [pc, #36]	; (b4118 <_Z13handle_sensorv+0x48>)
   b40f2:	681a      	ldr	r2, [r3, #0]
   b40f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b40f8:	3301      	adds	r3, #1
   b40fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update flag - Transmit sensor values
        TRANSMIT_SENSOR = true;
   b40fe:	4b07      	ldr	r3, [pc, #28]	; (b411c <_Z13handle_sensorv+0x4c>)
   b4100:	2201      	movs	r2, #1
   b4102:	701a      	strb	r2, [r3, #0]
    }
}
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	2003d41c 	.word	0x2003d41c
   b410c:	0036ee80 	.word	0x0036ee80
   b4110:	2003d484 	.word	0x2003d484
   b4114:	2003d4b0 	.word	0x2003d4b0
   b4118:	2003e1a8 	.word	0x2003e1a8
   b411c:	2003d372 	.word	0x2003d372

000b4120 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4120:	6943      	ldr	r3, [r0, #20]
   b4122:	b113      	cbz	r3, b412a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4124:	6983      	ldr	r3, [r0, #24]
   b4126:	300c      	adds	r0, #12
   b4128:	4718      	bx	r3
            callback();
        }
    }
   b412a:	4770      	bx	lr

000b412c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b412c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b412e:	2100      	movs	r1, #0
   b4130:	4604      	mov	r4, r0
   b4132:	4608      	mov	r0, r1
   b4134:	f001 ffb4 	bl	b60a0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4138:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b413a:	4620      	mov	r0, r4
   b413c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b413e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4140:	f001 ffc6 	bl	b60d0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4144:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4146:	b10c      	cbz	r4, b414c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4148:	2301      	movs	r3, #1
   b414a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b414c:	2100      	movs	r1, #0
   b414e:	2001      	movs	r0, #1
   b4150:	f001 ffa6 	bl	b60a0 <os_thread_scheduling>
            }
        }
        if (t) {
   b4154:	b12c      	cbz	r4, b4162 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4156:	6823      	ldr	r3, [r4, #0]
   b4158:	4620      	mov	r0, r4
   b415a:	689b      	ldr	r3, [r3, #8]
   b415c:	4798      	blx	r3
            t->running = false;
   b415e:	2300      	movs	r3, #0
   b4160:	7123      	strb	r3, [r4, #4]
        }
    }
   b4162:	b002      	add	sp, #8
   b4164:	bd10      	pop	{r4, pc}

000b4166 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4166:	2a01      	cmp	r2, #1
   b4168:	d102      	bne.n	b4170 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416a:	6001      	str	r1, [r0, #0]
      }
   b416c:	2000      	movs	r0, #0
   b416e:	4770      	bx	lr
	  switch (__op)
   b4170:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4172:	bf04      	itt	eq
   b4174:	680b      	ldreq	r3, [r1, #0]
   b4176:	6003      	streq	r3, [r0, #0]
	      break;
   b4178:	e7f8      	b.n	b416c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417a:	6803      	ldr	r3, [r0, #0]
   b417c:	4718      	bx	r3

000b417e <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b417e:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4180:	6880      	ldr	r0, [r0, #8]
   b4182:	b130      	cbz	r0, b4192 <_ZN5Timer4stopEj.isra.0+0x14>
   b4184:	2300      	movs	r3, #0
   b4186:	e9cd 1300 	strd	r1, r3, [sp]
   b418a:	461a      	mov	r2, r3
   b418c:	2102      	movs	r1, #2
   b418e:	f001 ffa7 	bl	b60e0 <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4192:	b003      	add	sp, #12
   b4194:	f85d fb04 	ldr.w	pc, [sp], #4

000b4198 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b4198:	b530      	push	{r4, r5, lr}
   b419a:	4605      	mov	r5, r0
   b419c:	b085      	sub	sp, #20
   b419e:	460c      	mov	r4, r1
        stop(fromISR);
   b41a0:	4611      	mov	r1, r2
   b41a2:	9203      	str	r2, [sp, #12]
   b41a4:	f7ff ffeb 	bl	b417e <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41a8:	68a8      	ldr	r0, [r5, #8]
   b41aa:	b130      	cbz	r0, b41ba <_ZN5Timer6_startEjb.isra.0+0x22>
   b41ac:	2300      	movs	r3, #0
   b41ae:	e9cd 4300 	strd	r4, r3, [sp]
   b41b2:	9a03      	ldr	r2, [sp, #12]
   b41b4:	4619      	mov	r1, r3
   b41b6:	f001 ff93 	bl	b60e0 <os_timer_change>
    }
   b41ba:	b005      	add	sp, #20
   b41bc:	bd30      	pop	{r4, r5, pc}
	...

000b41c0 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b41c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b41c4:	f003 ff6a 	bl	b809c <_ZN9TimeClass4hourEv>
   b41c8:	4f26      	ldr	r7, [pc, #152]	; (b4264 <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b41ca:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4268 <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b41ce:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b41d0:	f003 ff70 	bl	b80b4 <_ZN9TimeClass6minuteEv>
   b41d4:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b41d6:	f003 ff79 	bl	b80cc <_ZN9TimeClass6secondEv>
   b41da:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b41dc:	f003 ff82 	bl	b80e4 <_ZN9TimeClass3dayEv>
    timer.stop();
   b41e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b41e4:	4604      	mov	r4, r0
    timer.stop();
   b41e6:	4640      	mov	r0, r8
   b41e8:	f7ff ffc9 	bl	b417e <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b41ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b41f0:	b178      	cbz	r0, b4212 <_Z10check_timev+0x52>
   b41f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b41f6:	b2ed      	uxtb	r5, r5
   b41f8:	2200      	movs	r2, #0
   b41fa:	e9cd 1200 	strd	r1, r2, [sp]
   b41fe:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4202:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4206:	43ed      	mvns	r5, r5
   b4208:	fb01 5303 	mla	r3, r1, r3, r5
   b420c:	2103      	movs	r1, #3
   b420e:	f001 ff67 	bl	b60e0 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4212:	4815      	ldr	r0, [pc, #84]	; (b4268 <_Z10check_timev+0xa8>)
   b4214:	2200      	movs	r2, #0
   b4216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b421a:	f7ff ffbd 	bl	b4198 <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b421e:	783b      	ldrb	r3, [r7, #0]
   b4220:	2b0d      	cmp	r3, #13
   b4222:	d114      	bne.n	b424e <_Z10check_timev+0x8e>
   b4224:	4a11      	ldr	r2, [pc, #68]	; (b426c <_Z10check_timev+0xac>)
   b4226:	6811      	ldr	r1, [r2, #0]
   b4228:	b2e4      	uxtb	r4, r4
   b422a:	42a1      	cmp	r1, r4
   b422c:	d003      	beq.n	b4236 <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b422e:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4230:	4a0f      	ldr	r2, [pc, #60]	; (b4270 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b4232:	2101      	movs	r1, #1
   b4234:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4236:	b93e      	cbnz	r6, b4248 <_Z10check_timev+0x88>
   b4238:	4a0e      	ldr	r2, [pc, #56]	; (b4274 <_Z10check_timev+0xb4>)
   b423a:	6811      	ldr	r1, [r2, #0]
   b423c:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b423e:	bf1f      	itttt	ne
   b4240:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4242:	4b0d      	ldrne	r3, [pc, #52]	; (b4278 <_Z10check_timev+0xb8>)
   b4244:	2201      	movne	r2, #1
   b4246:	701a      	strbne	r2, [r3, #0]
    }
   b4248:	b002      	add	sp, #8
   b424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b424e:	2b00      	cmp	r3, #0
   b4250:	d1f1      	bne.n	b4236 <_Z10check_timev+0x76>
   b4252:	4a0a      	ldr	r2, [pc, #40]	; (b427c <_Z10check_timev+0xbc>)
   b4254:	6811      	ldr	r1, [r2, #0]
   b4256:	b2e4      	uxtb	r4, r4
   b4258:	42a1      	cmp	r1, r4
   b425a:	d0ec      	beq.n	b4236 <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b425c:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b425e:	4a08      	ldr	r2, [pc, #32]	; (b4280 <_Z10check_timev+0xc0>)
   b4260:	e7e7      	b.n	b4232 <_Z10check_timev+0x72>
   b4262:	bf00      	nop
   b4264:	2003d4b0 	.word	0x2003d4b0
   b4268:	2003e18c 	.word	0x2003e18c
   b426c:	2003d150 	.word	0x2003d150
   b4270:	2003d36c 	.word	0x2003d36c
   b4274:	2003d158 	.word	0x2003d158
   b4278:	2003d373 	.word	0x2003d373
   b427c:	2003d154 	.word	0x2003d154
   b4280:	2003d36e 	.word	0x2003d36e

000b4284 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4284:	b40e      	push	{r1, r2, r3}
   b4286:	b503      	push	{r0, r1, lr}
   b4288:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b428a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b428c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4290:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4292:	f003 fe2e 	bl	b7ef2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4296:	b002      	add	sp, #8
   b4298:	f85d eb04 	ldr.w	lr, [sp], #4
   b429c:	b003      	add	sp, #12
   b429e:	4770      	bx	lr

000b42a0 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b42a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b42a4:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b42a6:	4608      	mov	r0, r1
{
   b42a8:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b42aa:	f006 f870 	bl	ba38e <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b42ae:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b42b0:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b42b2:	a801      	add	r0, sp, #4
   b42b4:	f006 f845 	bl	ba342 <strcpy>
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    Serial.println("in the callback");
   b42b8:	f004 fb82 	bl	b89c0 <_Z16_fetch_usbserialv>
   b42bc:	493c      	ldr	r1, [pc, #240]	; (b43b0 <_Z9myHandlerPKcS0_+0x110>)
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42be:	4d3d      	ldr	r5, [pc, #244]	; (b43b4 <_Z9myHandlerPKcS0_+0x114>)
    Serial.println("in the callback");
   b42c0:	f003 fdef 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42c4:	493c      	ldr	r1, [pc, #240]	; (b43b8 <_Z9myHandlerPKcS0_+0x118>)
   b42c6:	a801      	add	r0, sp, #4
   b42c8:	f006 fed0 	bl	bb06c <strtok>
   b42cc:	f005 ffad 	bl	ba22a <atoi>
   b42d0:	4621      	mov	r1, r4
   b42d2:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b42d6:	f006 f81b 	bl	ba310 <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b42da:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b42de:	d214      	bcs.n	b430a <_Z9myHandlerPKcS0_+0x6a>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b42e0:	f004 fb6e 	bl	b89c0 <_Z16_fetch_usbserialv>
   b42e4:	4935      	ldr	r1, [pc, #212]	; (b43bc <_Z9myHandlerPKcS0_+0x11c>)
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b42e6:	4f36      	ldr	r7, [pc, #216]	; (b43c0 <_Z9myHandlerPKcS0_+0x120>)
        Serial.printf("%s\n", temp);
   b42e8:	462a      	mov	r2, r5
   b42ea:	f7ff ffcb 	bl	b4284 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b42ee:	4935      	ldr	r1, [pc, #212]	; (b43c4 <_Z9myHandlerPKcS0_+0x124>)
   b42f0:	4628      	mov	r0, r5
   b42f2:	f006 febb 	bl	bb06c <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b42f6:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
   b42fa:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b42fe:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4300:	2600      	movs	r6, #0
            if (token == NULL)
   b4302:	b928      	cbnz	r0, b4310 <_Z9myHandlerPKcS0_+0x70>
            }
            token = strtok(NULL, ",!");

        }
        CALCULATE = true;
   b4304:	4b30      	ldr	r3, [pc, #192]	; (b43c8 <_Z9myHandlerPKcS0_+0x128>)
   b4306:	2201      	movs	r2, #1
   b4308:	701a      	strb	r2, [r3, #0]
    }
   b430a:	b004      	add	sp, #16
   b430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i >= 0 && i < 7)
   b4310:	2c06      	cmp	r4, #6
   b4312:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b43cc <_Z9myHandlerPKcS0_+0x12c>
   b4316:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b431a:	dc19      	bgt.n	b4350 <_Z9myHandlerPKcS0_+0xb0>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b431c:	f005 ff82 	bl	ba224 <atof>
   b4320:	f8da 3000 	ldr.w	r3, [sl]
   b4324:	4632      	mov	r2, r6
   b4326:	ec51 0b10 	vmov	r0, r1, d0
   b432a:	441d      	add	r5, r3
   b432c:	463b      	mov	r3, r7
   b432e:	f005 fd91 	bl	b9e54 <__aeabi_ddiv>
   b4332:	a31b      	add	r3, pc, #108	; (adr r3, b43a0 <_Z9myHandlerPKcS0_+0x100>)
   b4334:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4338:	f005 faac 	bl	b9894 <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b433c:	3401      	adds	r4, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b433e:	e9c5 0100 	strd	r0, r1, [r5]
            token = strtok(NULL, ",!");
   b4342:	4920      	ldr	r1, [pc, #128]	; (b43c4 <_Z9myHandlerPKcS0_+0x124>)
   b4344:	2000      	movs	r0, #0
   b4346:	f006 fe91 	bl	bb06c <strtok>
        for (int i = 0; i < MAX_RANGE; i++)
   b434a:	2c18      	cmp	r4, #24
   b434c:	d1d9      	bne.n	b4302 <_Z9myHandlerPKcS0_+0x62>
   b434e:	e7d9      	b.n	b4304 <_Z9myHandlerPKcS0_+0x64>
            else if (i > 16 && i < 22)
   b4350:	f1a4 0311 	sub.w	r3, r4, #17
   b4354:	2b04      	cmp	r3, #4
   b4356:	d80d      	bhi.n	b4374 <_Z9myHandlerPKcS0_+0xd4>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4358:	f005 ff64 	bl	ba224 <atof>
   b435c:	f8da 3000 	ldr.w	r3, [sl]
   b4360:	4632      	mov	r2, r6
   b4362:	ec51 0b10 	vmov	r0, r1, d0
   b4366:	441d      	add	r5, r3
   b4368:	463b      	mov	r3, r7
   b436a:	f005 fd73 	bl	b9e54 <__aeabi_ddiv>
   b436e:	4642      	mov	r2, r8
   b4370:	464b      	mov	r3, r9
   b4372:	e7e1      	b.n	b4338 <_Z9myHandlerPKcS0_+0x98>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4374:	f005 ff56 	bl	ba224 <atof>
   b4378:	f8da 3000 	ldr.w	r3, [sl]
   b437c:	4632      	mov	r2, r6
   b437e:	ec51 0b10 	vmov	r0, r1, d0
   b4382:	441d      	add	r5, r3
   b4384:	463b      	mov	r3, r7
   b4386:	f005 fd65 	bl	b9e54 <__aeabi_ddiv>
   b438a:	a307      	add	r3, pc, #28	; (adr r3, b43a8 <_Z9myHandlerPKcS0_+0x108>)
   b438c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4390:	e7d2      	b.n	b4338 <_Z9myHandlerPKcS0_+0x98>
   b4392:	bf00      	nop
   b4394:	f3af 8000 	nop.w
   b4398:	2d0e5604 	.word	0x2d0e5604
   b439c:	3ffe9db2 	.word	0x3ffe9db2
   b43a0:	ebedfa44 	.word	0xebedfa44
   b43a4:	3fcb39c0 	.word	0x3fcb39c0
   b43a8:	42c3c9ef 	.word	0x42c3c9ef
   b43ac:	3fe469ad 	.word	0x3fe469ad
   b43b0:	000bc420 	.word	0x000bc420
   b43b4:	2003dd88 	.word	0x2003dd88
   b43b8:	000bc430 	.word	0x000bc430
   b43bc:	000bc438 	.word	0x000bc438
   b43c0:	408f4000 	.word	0x408f4000
   b43c4:	000bc43c 	.word	0x000bc43c
   b43c8:	2003d351 	.word	0x2003d351
   b43cc:	2003d4a8 	.word	0x2003d4a8

000b43d0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d0:	b40e      	push	{r1, r2, r3}
   b43d2:	b503      	push	{r0, r1, lr}
   b43d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43d6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43de:	f003 fd88 	bl	b7ef2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43e2:	b002      	add	sp, #8
   b43e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e8:	b003      	add	sp, #12
   b43ea:	4770      	bx	lr

000b43ec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43ec:	b510      	push	{r4, lr}
      if (_M_manager)
   b43ee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43f0:	4604      	mov	r4, r0
      if (_M_manager)
   b43f2:	b113      	cbz	r3, b43fa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43f4:	2203      	movs	r2, #3
   b43f6:	4601      	mov	r1, r0
   b43f8:	4798      	blx	r3
    }
   b43fa:	4620      	mov	r0, r4
   b43fc:	bd10      	pop	{r4, pc}
	...

000b4400 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4400:	b538      	push	{r3, r4, r5, lr}
   b4402:	4b0f      	ldr	r3, [pc, #60]	; (b4440 <_ZN5TimerD1Ev+0x40>)
   b4404:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4406:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4408:	4604      	mov	r4, r0
        if (handle) {
   b440a:	b19b      	cbz	r3, b4434 <_ZN5TimerD1Ev+0x34>
            stop();
   b440c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4410:	f7ff feb5 	bl	b417e <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4414:	68a0      	ldr	r0, [r4, #8]
   b4416:	2100      	movs	r1, #0
   b4418:	f001 fe82 	bl	b6120 <os_timer_set_id>
            while (running) {
   b441c:	7923      	ldrb	r3, [r4, #4]
   b441e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4422:	b113      	cbz	r3, b442a <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4424:	f001 fe34 	bl	b6090 <os_thread_yield>
            while (running) {
   b4428:	e7f8      	b.n	b441c <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b442a:	68a0      	ldr	r0, [r4, #8]
   b442c:	4629      	mov	r1, r5
   b442e:	f001 fe47 	bl	b60c0 <os_timer_destroy>
            handle = nullptr;
   b4432:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4434:	f104 000c 	add.w	r0, r4, #12
   b4438:	f7ff ffd8 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    }
   b443c:	4620      	mov	r0, r4
   b443e:	bd38      	pop	{r3, r4, r5, pc}
   b4440:	000bcaf4 	.word	0x000bcaf4

000b4444 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4444:	b510      	push	{r4, lr}
   b4446:	4604      	mov	r4, r0
    }
   b4448:	f7ff ffda 	bl	b4400 <_ZN5TimerD1Ev>
   b444c:	4620      	mov	r0, r4
   b444e:	211c      	movs	r1, #28
   b4450:	f7ff fe25 	bl	b409e <_ZdlPvj>
   b4454:	4620      	mov	r0, r4
   b4456:	bd10      	pop	{r4, pc}

000b4458 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b4458:	b570      	push	{r4, r5, r6, lr}
   b445a:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b445c:	f002 fe4e 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4460:	2102      	movs	r1, #2
   b4462:	f002 fe9c 	bl	b719e <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4466:	f002 fe49 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b446a:	f002 fe91 	bl	b7190 <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b446e:	f002 fe45 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4472:	4a3e      	ldr	r2, [pc, #248]	; (b456c <_Z9ble_setupv+0x114>)
   b4474:	4c3e      	ldr	r4, [pc, #248]	; (b4570 <_Z9ble_setupv+0x118>)
   b4476:	4601      	mov	r1, r0
   b4478:	a80b      	add	r0, sp, #44	; 0x2c
   b447a:	f003 fbc7 	bl	b7c0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b447e:	a80b      	add	r0, sp, #44	; 0x2c
   b4480:	f002 ff41 	bl	b7306 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4484:	f002 fe3a 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4488:	4a3a      	ldr	r2, [pc, #232]	; (b4574 <_Z9ble_setupv+0x11c>)
   b448a:	4601      	mov	r1, r0
   b448c:	a80b      	add	r0, sp, #44	; 0x2c
   b448e:	f003 fbbd 	bl	b7c0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4492:	a80b      	add	r0, sp, #44	; 0x2c
   b4494:	f002 ff37 	bl	b7306 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4498:	f002 fe30 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b449c:	4a36      	ldr	r2, [pc, #216]	; (b4578 <_Z9ble_setupv+0x120>)
   b449e:	4601      	mov	r1, r0
   b44a0:	a80b      	add	r0, sp, #44	; 0x2c
   b44a2:	f003 fbb3 	bl	b7c0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44a6:	a80b      	add	r0, sp, #44	; 0x2c
   b44a8:	f002 ff2d 	bl	b7306 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b44ac:	f002 fe26 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44b0:	4a32      	ldr	r2, [pc, #200]	; (b457c <_Z9ble_setupv+0x124>)
   b44b2:	4601      	mov	r1, r0
   b44b4:	a80b      	add	r0, sp, #44	; 0x2c
   b44b6:	f003 fba9 	bl	b7c0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ba:	a80b      	add	r0, sp, #44	; 0x2c
   b44bc:	f002 ff23 	bl	b7306 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b44c0:	f002 fe1c 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44c4:	4a2e      	ldr	r2, [pc, #184]	; (b4580 <_Z9ble_setupv+0x128>)
   b44c6:	4601      	mov	r1, r0
   b44c8:	a80b      	add	r0, sp, #44	; 0x2c
   b44ca:	f003 fb9f 	bl	b7c0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ce:	a80b      	add	r0, sp, #44	; 0x2c
   b44d0:	f002 ff19 	bl	b7306 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b44d4:	f002 fe12 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44d8:	4a2a      	ldr	r2, [pc, #168]	; (b4584 <_Z9ble_setupv+0x12c>)
   b44da:	4601      	mov	r1, r0
   b44dc:	a80b      	add	r0, sp, #44	; 0x2c
   b44de:	f003 fb95 	bl	b7c0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44e2:	a80b      	add	r0, sp, #44	; 0x2c
   b44e4:	f002 ff0f 	bl	b7306 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b44e8:	a803      	add	r0, sp, #12
   b44ea:	f003 f842 	bl	b7572 <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b44ee:	4b26      	ldr	r3, [pc, #152]	; (b4588 <_Z9ble_setupv+0x130>)
   b44f0:	a803      	add	r0, sp, #12
   b44f2:	6819      	ldr	r1, [r3, #0]
   b44f4:	f003 f850 	bl	b7598 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b44f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44fa:	ad06      	add	r5, sp, #24
   b44fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b44fe:	ad06      	add	r5, sp, #24
   b4500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4502:	6826      	ldr	r6, [r4, #0]
   b4504:	ac0b      	add	r4, sp, #44	; 0x2c
   b4506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4508:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b450a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b450c:	f002 fbf4 	bl	b6cf8 <_ZNK8particle7BleUuid4typeEv>
   b4510:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4512:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4514:	bb0c      	cbnz	r4, b455a <_Z9ble_setupv+0x102>
            uint16_t uuid16 = tempUUID.shorted();
   b4516:	f002 fc0b 	bl	b6d30 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b451a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b451c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4520:	2302      	movs	r3, #2
   b4522:	f10d 020a 	add.w	r2, sp, #10
   b4526:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4528:	a803      	add	r0, sp, #12
   b452a:	f003 f817 	bl	b755c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b452e:	f002 fde5 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4532:	2200      	movs	r2, #0
   b4534:	a903      	add	r1, sp, #12
   b4536:	f002 fe79 	bl	b722c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b453a:	f004 fa41 	bl	b89c0 <_Z16_fetch_usbserialv>
   b453e:	4913      	ldr	r1, [pc, #76]	; (b458c <_Z9ble_setupv+0x134>)
   b4540:	f003 fcaf 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4544:	f002 fdda 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4548:	4911      	ldr	r1, [pc, #68]	; (b4590 <_Z9ble_setupv+0x138>)
   b454a:	2200      	movs	r2, #0
   b454c:	f003 fa60 	bl	b7a10 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4550:	9803      	ldr	r0, [sp, #12]
   b4552:	f001 fff1 	bl	b6538 <free>

}
   b4556:	b010      	add	sp, #64	; 0x40
   b4558:	bd70      	pop	{r4, r5, r6, pc}
   b455a:	f002 fbeb 	bl	b6d34 <_ZNK8particle7BleUuid8rawBytesEv>
   b455e:	2300      	movs	r3, #0
   b4560:	9300      	str	r3, [sp, #0]
   b4562:	4602      	mov	r2, r0
   b4564:	2310      	movs	r3, #16
   b4566:	2107      	movs	r1, #7
   b4568:	e7de      	b.n	b4528 <_Z9ble_setupv+0xd0>
   b456a:	bf00      	nop
   b456c:	2003d374 	.word	0x2003d374
   b4570:	2003d3a0 	.word	0x2003d3a0
   b4574:	2003d364 	.word	0x2003d364
   b4578:	2003d354 	.word	0x2003d354
   b457c:	2003d35c 	.word	0x2003d35c
   b4580:	2003d37c 	.word	0x2003d37c
   b4584:	2003d384 	.word	0x2003d384
   b4588:	2003d134 	.word	0x2003d134
   b458c:	000bc43f 	.word	0x000bc43f
   b4590:	000b40b5 	.word	0x000b40b5
   b4594:	00000000 	.word	0x00000000

000b4598 <_Z8calc_lowPA2_iPdi>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int size)
{
   b4598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b459c:	ed2d 8b02 	vpush	{d8}
    int cnt = 0;
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0.0;
   b45a0:	ed9f 7b51 	vldr	d7, [pc, #324]	; b46e8 <_Z8calc_lowPA2_iPdi+0x150>
{
   b45a4:	b09b      	sub	sp, #108	; 0x6c
    double last_small = 1000.0; // Assign any absurdly high value
   b45a6:	f8df 9164 	ldr.w	r9, [pc, #356]	; b470c <_Z8calc_lowPA2_iPdi+0x174>
{
   b45aa:	9201      	str	r2, [sp, #4]
   b45ac:	4606      	mov	r6, r0
   b45ae:	460f      	mov	r7, r1
   b45b0:	468b      	mov	fp, r1

    for (int i = 0; i < size; i++)
   b45b2:	f04f 0a00 	mov.w	sl, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b45b6:	f04f 0800 	mov.w	r8, #0
    double last_big = 0.0;
   b45ba:	eeb0 8a47 	vmov.f32	s16, s14
   b45be:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < size; i++)
   b45c2:	9b01      	ldr	r3, [sp, #4]
   b45c4:	459a      	cmp	sl, r3
   b45c6:	da16      	bge.n	b45f6 <_Z8calc_lowPA2_iPdi+0x5e>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b45c8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
   b45cc:	ec53 2b18 	vmov	r2, r3, d8
   b45d0:	4620      	mov	r0, r4
   b45d2:	4629      	mov	r1, r5
   b45d4:	f005 fda4 	bl	ba120 <__aeabi_dcmpgt>
   b45d8:	b108      	cbz	r0, b45de <_Z8calc_lowPA2_iPdi+0x46>
        {
            last_big = cost[i];
   b45da:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b45de:	4642      	mov	r2, r8
   b45e0:	464b      	mov	r3, r9
   b45e2:	4620      	mov	r0, r4
   b45e4:	4629      	mov	r1, r5
   b45e6:	f005 fd7d 	bl	ba0e4 <__aeabi_dcmplt>
   b45ea:	b108      	cbz	r0, b45f0 <_Z8calc_lowPA2_iPdi+0x58>
        {
            last_small = cost[i];
   b45ec:	46a0      	mov	r8, r4
   b45ee:	46a9      	mov	r9, r5
    for (int i = 0; i < size; i++)
   b45f0:	f10a 0a01 	add.w	sl, sl, #1
   b45f4:	e7e5      	b.n	b45c2 <_Z8calc_lowPA2_iPdi+0x2a>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b45f6:	4642      	mov	r2, r8
   b45f8:	464b      	mov	r3, r9
   b45fa:	ec51 0b18 	vmov	r0, r1, d8
   b45fe:	f005 f947 	bl	b9890 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4602:	a340      	add	r3, pc, #256	; (adr r3, b4704 <_Z8calc_lowPA2_iPdi+0x16c>)
   b4604:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4608:	f005 fafa 	bl	b9c00 <__aeabi_dmul>
   b460c:	4642      	mov	r2, r8
   b460e:	464b      	mov	r3, r9
   b4610:	f005 f940 	bl	b9894 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i < size; i++)
   b4614:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4616:	4682      	mov	sl, r0
   b4618:	468b      	mov	fp, r1
    int idx = 0;
   b461a:	462c      	mov	r4, r5
    for (int i = 0; i < size; i++)
   b461c:	9b01      	ldr	r3, [sp, #4]
   b461e:	429d      	cmp	r5, r3
   b4620:	da15      	bge.n	b464e <_Z8calc_lowPA2_iPdi+0xb6>
    {
        
        if (cost[i] < small_offset)
   b4622:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b4626:	4652      	mov	r2, sl
   b4628:	465b      	mov	r3, fp
   b462a:	f005 fd5b 	bl	ba0e4 <__aeabi_dcmplt>
   b462e:	b160      	cbz	r0, b464a <_Z8calc_lowPA2_iPdi+0xb2>
        {
            low_range_hour[idx] = i;
   b4630:	ab1a      	add	r3, sp, #104	; 0x68
   b4632:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b4636:	f843 5c60 	str.w	r5, [r3, #-96]
            Serial.printf("low_range_hour[%d]: %d\n",idx, low_range_hour[idx]);
   b463a:	f004 f9c1 	bl	b89c0 <_Z16_fetch_usbserialv>
   b463e:	4622      	mov	r2, r4
   b4640:	492b      	ldr	r1, [pc, #172]	; (b46f0 <_Z8calc_lowPA2_iPdi+0x158>)
   b4642:	462b      	mov	r3, r5
   b4644:	f7ff fe1e 	bl	b4284 <_ZN5Print6printfEPKcz>
            idx++;
   b4648:	3401      	adds	r4, #1
    for (int i = 0; i < size; i++)
   b464a:	3501      	adds	r5, #1
   b464c:	e7e6      	b.n	b461c <_Z8calc_lowPA2_iPdi+0x84>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b464e:	f004 f9b7 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4652:	ec53 2b18 	vmov	r2, r3, d8
   b4656:	4927      	ldr	r1, [pc, #156]	; (b46f4 <_Z8calc_lowPA2_iPdi+0x15c>)
   b4658:	f7ff fe14 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b465c:	f004 f9b0 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4660:	4925      	ldr	r1, [pc, #148]	; (b46f8 <_Z8calc_lowPA2_iPdi+0x160>)
   b4662:	4642      	mov	r2, r8
   b4664:	464b      	mov	r3, r9
   b4666:	f7ff fe0d 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b466a:	f004 f9a9 	bl	b89c0 <_Z16_fetch_usbserialv>
   b466e:	4923      	ldr	r1, [pc, #140]	; (b46fc <_Z8calc_lowPA2_iPdi+0x164>)
   b4670:	f7ff fe08 	bl	b4284 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b4674:	b36c      	cbz	r4, b46d2 <_Z8calc_lowPA2_iPdi+0x13a>
    int i = 0;
   b4676:	2300      	movs	r3, #0
    int cnt = 0;
   b4678:	461d      	mov	r5, r3
   b467a:	1d37      	adds	r7, r6, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b467c:	aa1a      	add	r2, sp, #104	; 0x68
   b467e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4682:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b4686:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
   b468a:	aa02      	add	r2, sp, #8
   b468c:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4690:	6802      	ldr	r2, [r0, #0]
   b4692:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b4696:	3901      	subs	r1, #1
   b4698:	428a      	cmp	r2, r1
   b469a:	f103 0301 	add.w	r3, r3, #1
   b469e:	d0f7      	beq.n	b4690 <_Z8calc_lowPA2_iPdi+0xf8>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b46a0:	3201      	adds	r2, #1
        while (i <= idx)
   b46a2:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b46a4:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
            
            cnt++;
   b46a8:	f105 0201 	add.w	r2, r5, #1
        while (i <= idx)
   b46ac:	dd0f      	ble.n	b46ce <_Z8calc_lowPA2_iPdi+0x136>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b46ae:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4710 <_Z8calc_lowPA2_iPdi+0x178>
    for (int z = 0; z < cnt; z++)
   b46b2:	2400      	movs	r4, #0
   b46b4:	42ac      	cmp	r4, r5
   b46b6:	d00c      	beq.n	b46d2 <_Z8calc_lowPA2_iPdi+0x13a>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b46b8:	f004 f982 	bl	b89c0 <_Z16_fetch_usbserialv>
   b46bc:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b46c0:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
   b46c4:	4641      	mov	r1, r8
   b46c6:	f7ff fddd 	bl	b4284 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b46ca:	3401      	adds	r4, #1
   b46cc:	e7f2      	b.n	b46b4 <_Z8calc_lowPA2_iPdi+0x11c>
            cnt++;
   b46ce:	4615      	mov	r5, r2
   b46d0:	e7d4      	b.n	b467c <_Z8calc_lowPA2_iPdi+0xe4>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b46d2:	4b0b      	ldr	r3, [pc, #44]	; (b4700 <_Z8calc_lowPA2_iPdi+0x168>)
   b46d4:	2201      	movs	r2, #1

    return cnt;
}
   b46d6:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b46d8:	701a      	strb	r2, [r3, #0]
}
   b46da:	b01b      	add	sp, #108	; 0x6c
   b46dc:	ecbd 8b02 	vpop	{d8}
   b46e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46e4:	f3af 8000 	nop.w
	...
   b46f0:	000bc463 	.word	0x000bc463
   b46f4:	000bc47b 	.word	0x000bc47b
   b46f8:	000bc499 	.word	0x000bc499
   b46fc:	000bc4b6 	.word	0x000bc4b6
   b4700:	2003d371 	.word	0x2003d371
   b4704:	33333333 	.word	0x33333333
   b4708:	3fd33333 	.word	0x3fd33333
   b470c:	408f4000 	.word	0x408f4000
   b4710:	000bc4f4 	.word	0x000bc4f4

000b4714 <_Z18hourly_JSON_updatev>:
extern String pricestoday_Json;
extern String pricesyesterday_Json;
extern String pricestomorrow_Json;

void hourly_JSON_update()
{
   b4714:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b4716:	4913      	ldr	r1, [pc, #76]	; (b4764 <_Z18hourly_JSON_updatev+0x50>)
   b4718:	4813      	ldr	r0, [pc, #76]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b471a:	4e14      	ldr	r6, [pc, #80]	; (b476c <_Z18hourly_JSON_updatev+0x58>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b471c:	4d12      	ldr	r5, [pc, #72]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b471e:	4f14      	ldr	r7, [pc, #80]	; (b4770 <_Z18hourly_JSON_updatev+0x5c>)
{
   b4720:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b4722:	f002 f89d 	bl	b6860 <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b4726:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b4728:	6833      	ldr	r3, [r6, #0]
   b472a:	220a      	movs	r2, #10
   b472c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4730:	4668      	mov	r0, sp
   b4732:	f002 f8a7 	bl	b6884 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4736:	4669      	mov	r1, sp
   b4738:	4628      	mov	r0, r5
   b473a:	f002 f8cd 	bl	b68d8 <_ZN6String6concatERKS_>
   b473e:	4668      	mov	r0, sp
   b4740:	f002 f80a 	bl	b6758 <_ZN6StringD1Ev>
        if (i < 23)
   b4744:	2c17      	cmp	r4, #23
   b4746:	d003      	beq.n	b4750 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b4748:	4639      	mov	r1, r7
   b474a:	4628      	mov	r0, r5
   b474c:	f002 f8c8 	bl	b68e0 <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b4750:	3401      	adds	r4, #1
   b4752:	2c18      	cmp	r4, #24
   b4754:	d1e8      	bne.n	b4728 <_Z18hourly_JSON_updatev+0x14>
   b4756:	4907      	ldr	r1, [pc, #28]	; (b4774 <_Z18hourly_JSON_updatev+0x60>)
   b4758:	4803      	ldr	r0, [pc, #12]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
        {
            wh_today_Json += ",";
        }
    }
    wh_today_Json += "]}";
}
   b475a:	b005      	add	sp, #20
   b475c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4760:	f002 b8be 	b.w	b68e0 <_ZN6String6concatEPKc>
   b4764:	000bc502 	.word	0x000bc502
   b4768:	2003e1ac 	.word	0x2003e1ac
   b476c:	2003e1a8 	.word	0x2003e1a8
   b4770:	000bc511 	.word	0x000bc511
   b4774:	000bca94 	.word	0x000bca94

000b4778 <_Z11update_JSONv>:
void update_JSON()
{
   b4778:	b5f0      	push	{r4, r5, r6, r7, lr}
   b477a:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b477c:	498f      	ldr	r1, [pc, #572]	; (b49bc <_Z11update_JSONv+0x244>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b477e:	4e90      	ldr	r6, [pc, #576]	; (b49c0 <_Z11update_JSONv+0x248>)
   b4780:	4f90      	ldr	r7, [pc, #576]	; (b49c4 <_Z11update_JSONv+0x24c>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4782:	4d91      	ldr	r5, [pc, #580]	; (b49c8 <_Z11update_JSONv+0x250>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4784:	4668      	mov	r0, sp
   b4786:	f002 f909 	bl	b699c <_ZN6String6formatEPKcz>
   b478a:	4669      	mov	r1, sp
   b478c:	488e      	ldr	r0, [pc, #568]	; (b49c8 <_Z11update_JSONv+0x250>)
   b478e:	f002 f85f 	bl	b6850 <_ZN6StringaSEOS_>
   b4792:	4668      	mov	r0, sp
   b4794:	f001 ffe0 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4798:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b479a:	6833      	ldr	r3, [r6, #0]
   b479c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b47a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47a4:	4639      	mov	r1, r7
   b47a6:	4668      	mov	r0, sp
   b47a8:	f002 f8f8 	bl	b699c <_ZN6String6formatEPKcz>
   b47ac:	4669      	mov	r1, sp
   b47ae:	4628      	mov	r0, r5
   b47b0:	f002 f892 	bl	b68d8 <_ZN6String6concatERKS_>
   b47b4:	4668      	mov	r0, sp
   b47b6:	f001 ffcf 	bl	b6758 <_ZN6StringD1Ev>
        if (i < 23)
   b47ba:	2c17      	cmp	r4, #23
   b47bc:	d00a      	beq.n	b47d4 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b47be:	4983      	ldr	r1, [pc, #524]	; (b49cc <_Z11update_JSONv+0x254>)
   b47c0:	4668      	mov	r0, sp
   b47c2:	f002 f8eb 	bl	b699c <_ZN6String6formatEPKcz>
   b47c6:	4669      	mov	r1, sp
   b47c8:	4628      	mov	r0, r5
   b47ca:	f002 f885 	bl	b68d8 <_ZN6String6concatERKS_>
   b47ce:	4668      	mov	r0, sp
   b47d0:	f001 ffc2 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47d4:	3401      	adds	r4, #1
   b47d6:	2c18      	cmp	r4, #24
   b47d8:	d1df      	bne.n	b479a <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b47da:	497d      	ldr	r1, [pc, #500]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b47dc:	4e7d      	ldr	r6, [pc, #500]	; (b49d4 <_Z11update_JSONv+0x25c>)
   b47de:	4f79      	ldr	r7, [pc, #484]	; (b49c4 <_Z11update_JSONv+0x24c>)
   b47e0:	4d7d      	ldr	r5, [pc, #500]	; (b49d8 <_Z11update_JSONv+0x260>)
    pricesyesterday_Json += String::format("]}");
   b47e2:	4668      	mov	r0, sp
   b47e4:	f002 f8da 	bl	b699c <_ZN6String6formatEPKcz>
   b47e8:	4669      	mov	r1, sp
   b47ea:	4877      	ldr	r0, [pc, #476]	; (b49c8 <_Z11update_JSONv+0x250>)
   b47ec:	f002 f874 	bl	b68d8 <_ZN6String6concatERKS_>
   b47f0:	4668      	mov	r0, sp
   b47f2:	f001 ffb1 	bl	b6758 <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b47f6:	4979      	ldr	r1, [pc, #484]	; (b49dc <_Z11update_JSONv+0x264>)
   b47f8:	4668      	mov	r0, sp
   b47fa:	f002 f8cf 	bl	b699c <_ZN6String6formatEPKcz>
   b47fe:	4669      	mov	r1, sp
   b4800:	4875      	ldr	r0, [pc, #468]	; (b49d8 <_Z11update_JSONv+0x260>)
   b4802:	f002 f825 	bl	b6850 <_ZN6StringaSEOS_>
   b4806:	4668      	mov	r0, sp
   b4808:	f001 ffa6 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b480c:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b480e:	6833      	ldr	r3, [r6, #0]
   b4810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4814:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4818:	4639      	mov	r1, r7
   b481a:	4668      	mov	r0, sp
   b481c:	f002 f8be 	bl	b699c <_ZN6String6formatEPKcz>
   b4820:	4669      	mov	r1, sp
   b4822:	4628      	mov	r0, r5
   b4824:	f002 f858 	bl	b68d8 <_ZN6String6concatERKS_>
   b4828:	4668      	mov	r0, sp
   b482a:	f001 ff95 	bl	b6758 <_ZN6StringD1Ev>
        if (i < 23)
   b482e:	2c17      	cmp	r4, #23
   b4830:	d00a      	beq.n	b4848 <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b4832:	4966      	ldr	r1, [pc, #408]	; (b49cc <_Z11update_JSONv+0x254>)
   b4834:	4668      	mov	r0, sp
   b4836:	f002 f8b1 	bl	b699c <_ZN6String6formatEPKcz>
   b483a:	4669      	mov	r1, sp
   b483c:	4628      	mov	r0, r5
   b483e:	f002 f84b 	bl	b68d8 <_ZN6String6concatERKS_>
   b4842:	4668      	mov	r0, sp
   b4844:	f001 ff88 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4848:	3401      	adds	r4, #1
   b484a:	2c18      	cmp	r4, #24
   b484c:	d1df      	bne.n	b480e <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b484e:	4960      	ldr	r1, [pc, #384]	; (b49d0 <_Z11update_JSONv+0x258>)

     // Updating prices today JSON string
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b4850:	4e63      	ldr	r6, [pc, #396]	; (b49e0 <_Z11update_JSONv+0x268>)
   b4852:	4f5c      	ldr	r7, [pc, #368]	; (b49c4 <_Z11update_JSONv+0x24c>)
   b4854:	4d63      	ldr	r5, [pc, #396]	; (b49e4 <_Z11update_JSONv+0x26c>)
    pricestoday_Json += String::format("]}");
   b4856:	4668      	mov	r0, sp
   b4858:	f002 f8a0 	bl	b699c <_ZN6String6formatEPKcz>
   b485c:	4669      	mov	r1, sp
   b485e:	485e      	ldr	r0, [pc, #376]	; (b49d8 <_Z11update_JSONv+0x260>)
   b4860:	f002 f83a 	bl	b68d8 <_ZN6String6concatERKS_>
   b4864:	4668      	mov	r0, sp
   b4866:	f001 ff77 	bl	b6758 <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b486a:	495f      	ldr	r1, [pc, #380]	; (b49e8 <_Z11update_JSONv+0x270>)
   b486c:	4668      	mov	r0, sp
   b486e:	f002 f895 	bl	b699c <_ZN6String6formatEPKcz>
   b4872:	4669      	mov	r1, sp
   b4874:	485b      	ldr	r0, [pc, #364]	; (b49e4 <_Z11update_JSONv+0x26c>)
   b4876:	f001 ffeb 	bl	b6850 <_ZN6StringaSEOS_>
   b487a:	4668      	mov	r0, sp
   b487c:	f001 ff6c 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4880:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b4882:	6833      	ldr	r3, [r6, #0]
   b4884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4888:	e9d3 2300 	ldrd	r2, r3, [r3]
   b488c:	4639      	mov	r1, r7
   b488e:	4668      	mov	r0, sp
   b4890:	f002 f884 	bl	b699c <_ZN6String6formatEPKcz>
   b4894:	4669      	mov	r1, sp
   b4896:	4628      	mov	r0, r5
   b4898:	f002 f81e 	bl	b68d8 <_ZN6String6concatERKS_>
   b489c:	4668      	mov	r0, sp
   b489e:	f001 ff5b 	bl	b6758 <_ZN6StringD1Ev>
        if (i < 23)
   b48a2:	2c17      	cmp	r4, #23
   b48a4:	d00a      	beq.n	b48bc <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b48a6:	4949      	ldr	r1, [pc, #292]	; (b49cc <_Z11update_JSONv+0x254>)
   b48a8:	4668      	mov	r0, sp
   b48aa:	f002 f877 	bl	b699c <_ZN6String6formatEPKcz>
   b48ae:	4669      	mov	r1, sp
   b48b0:	4628      	mov	r0, r5
   b48b2:	f002 f811 	bl	b68d8 <_ZN6String6concatERKS_>
   b48b6:	4668      	mov	r0, sp
   b48b8:	f001 ff4e 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48bc:	3401      	adds	r4, #1
   b48be:	2c18      	cmp	r4, #24
   b48c0:	d1df      	bne.n	b4882 <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b48c2:	4943      	ldr	r1, [pc, #268]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b48c4:	4e49      	ldr	r6, [pc, #292]	; (b49ec <_Z11update_JSONv+0x274>)
   b48c6:	4f4a      	ldr	r7, [pc, #296]	; (b49f0 <_Z11update_JSONv+0x278>)
   b48c8:	4d4a      	ldr	r5, [pc, #296]	; (b49f4 <_Z11update_JSONv+0x27c>)
    pricestomorrow_Json += String::format("]}");
   b48ca:	4668      	mov	r0, sp
   b48cc:	f002 f866 	bl	b699c <_ZN6String6formatEPKcz>
   b48d0:	4669      	mov	r1, sp
   b48d2:	4844      	ldr	r0, [pc, #272]	; (b49e4 <_Z11update_JSONv+0x26c>)
   b48d4:	f002 f800 	bl	b68d8 <_ZN6String6concatERKS_>
   b48d8:	4668      	mov	r0, sp
   b48da:	f001 ff3d 	bl	b6758 <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b48de:	4946      	ldr	r1, [pc, #280]	; (b49f8 <_Z11update_JSONv+0x280>)
   b48e0:	4668      	mov	r0, sp
   b48e2:	f002 f85b 	bl	b699c <_ZN6String6formatEPKcz>
   b48e6:	4669      	mov	r1, sp
   b48e8:	4842      	ldr	r0, [pc, #264]	; (b49f4 <_Z11update_JSONv+0x27c>)
   b48ea:	f001 ffb1 	bl	b6850 <_ZN6StringaSEOS_>
   b48ee:	4668      	mov	r0, sp
   b48f0:	f001 ff32 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48f4:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b48f6:	6833      	ldr	r3, [r6, #0]
   b48f8:	4639      	mov	r1, r7
   b48fa:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b48fe:	4668      	mov	r0, sp
   b4900:	f002 f84c 	bl	b699c <_ZN6String6formatEPKcz>
   b4904:	4669      	mov	r1, sp
   b4906:	4628      	mov	r0, r5
   b4908:	f001 ffe6 	bl	b68d8 <_ZN6String6concatERKS_>
   b490c:	4668      	mov	r0, sp
   b490e:	f001 ff23 	bl	b6758 <_ZN6StringD1Ev>
        if (i < 23)
   b4912:	2c17      	cmp	r4, #23
   b4914:	d00a      	beq.n	b492c <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b4916:	492d      	ldr	r1, [pc, #180]	; (b49cc <_Z11update_JSONv+0x254>)
   b4918:	4668      	mov	r0, sp
   b491a:	f002 f83f 	bl	b699c <_ZN6String6formatEPKcz>
   b491e:	4669      	mov	r1, sp
   b4920:	4628      	mov	r0, r5
   b4922:	f001 ffd9 	bl	b68d8 <_ZN6String6concatERKS_>
   b4926:	4668      	mov	r0, sp
   b4928:	f001 ff16 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b492c:	3401      	adds	r4, #1
   b492e:	2c18      	cmp	r4, #24
   b4930:	d1e1      	bne.n	b48f6 <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b4932:	4927      	ldr	r1, [pc, #156]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b4934:	4e31      	ldr	r6, [pc, #196]	; (b49fc <_Z11update_JSONv+0x284>)
   b4936:	4f2e      	ldr	r7, [pc, #184]	; (b49f0 <_Z11update_JSONv+0x278>)
   b4938:	4d31      	ldr	r5, [pc, #196]	; (b4a00 <_Z11update_JSONv+0x288>)
    wh_yesterday_Json += String::format("]}");
   b493a:	4668      	mov	r0, sp
   b493c:	f002 f82e 	bl	b699c <_ZN6String6formatEPKcz>
   b4940:	4669      	mov	r1, sp
   b4942:	482c      	ldr	r0, [pc, #176]	; (b49f4 <_Z11update_JSONv+0x27c>)
   b4944:	f001 ffc8 	bl	b68d8 <_ZN6String6concatERKS_>
   b4948:	4668      	mov	r0, sp
   b494a:	f001 ff05 	bl	b6758 <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b494e:	492d      	ldr	r1, [pc, #180]	; (b4a04 <_Z11update_JSONv+0x28c>)
   b4950:	4668      	mov	r0, sp
   b4952:	f002 f823 	bl	b699c <_ZN6String6formatEPKcz>
   b4956:	4669      	mov	r1, sp
   b4958:	4829      	ldr	r0, [pc, #164]	; (b4a00 <_Z11update_JSONv+0x288>)
   b495a:	f001 ff79 	bl	b6850 <_ZN6StringaSEOS_>
   b495e:	4668      	mov	r0, sp
   b4960:	f001 fefa 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4964:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b4966:	6833      	ldr	r3, [r6, #0]
   b4968:	4639      	mov	r1, r7
   b496a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b496e:	4668      	mov	r0, sp
   b4970:	f002 f814 	bl	b699c <_ZN6String6formatEPKcz>
   b4974:	4669      	mov	r1, sp
   b4976:	4628      	mov	r0, r5
   b4978:	f001 ffae 	bl	b68d8 <_ZN6String6concatERKS_>
   b497c:	4668      	mov	r0, sp
   b497e:	f001 feeb 	bl	b6758 <_ZN6StringD1Ev>
        if (i < 23)
   b4982:	2c17      	cmp	r4, #23
   b4984:	d00a      	beq.n	b499c <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b4986:	4911      	ldr	r1, [pc, #68]	; (b49cc <_Z11update_JSONv+0x254>)
   b4988:	4668      	mov	r0, sp
   b498a:	f002 f807 	bl	b699c <_ZN6String6formatEPKcz>
   b498e:	4669      	mov	r1, sp
   b4990:	4628      	mov	r0, r5
   b4992:	f001 ffa1 	bl	b68d8 <_ZN6String6concatERKS_>
   b4996:	4668      	mov	r0, sp
   b4998:	f001 fede 	bl	b6758 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b499c:	3401      	adds	r4, #1
   b499e:	2c18      	cmp	r4, #24
   b49a0:	d1e1      	bne.n	b4966 <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b49a2:	4668      	mov	r0, sp
   b49a4:	490a      	ldr	r1, [pc, #40]	; (b49d0 <_Z11update_JSONv+0x258>)
   b49a6:	f001 fff9 	bl	b699c <_ZN6String6formatEPKcz>
   b49aa:	4669      	mov	r1, sp
   b49ac:	4814      	ldr	r0, [pc, #80]	; (b4a00 <_Z11update_JSONv+0x288>)
   b49ae:	f001 ff93 	bl	b68d8 <_ZN6String6concatERKS_>
   b49b2:	4668      	mov	r0, sp
   b49b4:	f001 fed0 	bl	b6758 <_ZN6StringD1Ev>

}
   b49b8:	b005      	add	sp, #20
   b49ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b49bc:	000bc513 	.word	0x000bc513
   b49c0:	2003d4ac 	.word	0x2003d4ac
   b49c4:	000bc528 	.word	0x000bc528
   b49c8:	2003dd18 	.word	0x2003dd18
   b49cc:	000bc511 	.word	0x000bc511
   b49d0:	000bca94 	.word	0x000bca94
   b49d4:	2003d4a4 	.word	0x2003d4a4
   b49d8:	2003dcf8 	.word	0x2003dcf8
   b49dc:	000bc52e 	.word	0x000bc52e
   b49e0:	2003d4a8 	.word	0x2003d4a8
   b49e4:	2003dd08 	.word	0x2003dd08
   b49e8:	000bc53f 	.word	0x000bc53f
   b49ec:	2003e1bc 	.word	0x2003e1bc
   b49f0:	000bcfa0 	.word	0x000bcfa0
   b49f4:	2003e1c0 	.word	0x2003e1c0
   b49f8:	000bc553 	.word	0x000bc553
   b49fc:	2003e1a8 	.word	0x2003e1a8
   b4a00:	2003e1ac 	.word	0x2003e1ac
   b4a04:	000bc566 	.word	0x000bc566

000b4a08 <_Z17Httprequest_todayv>:
#include "application.h"

TCPClient client;

bool Httprequest_today(void)
{
   b4a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a0a:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
  String Json_message;
   b4a0e:	4931      	ldr	r1, [pc, #196]	; (b4ad4 <_Z17Httprequest_todayv+0xcc>)
   b4a10:	a801      	add	r0, sp, #4
   b4a12:	f001 feec 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
  client.connect("api.energidataservice.dk", 80);
   b4a16:	4930      	ldr	r1, [pc, #192]	; (b4ad8 <_Z17Httprequest_todayv+0xd0>)
   b4a18:	4830      	ldr	r0, [pc, #192]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4a1a:	2300      	movs	r3, #0
   b4a1c:	2250      	movs	r2, #80	; 0x50
   b4a1e:	f004 f989 	bl	b8d34 <_ZN9TCPClient7connectEPKctm>
  if (client.connected())
   b4a22:	482e      	ldr	r0, [pc, #184]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4a24:	f004 fa04 	bl	b8e30 <_ZN9TCPClient9connectedEv>
   b4a28:	b1b8      	cbz	r0, b4a5a <_Z17Httprequest_todayv+0x52>
  {
    Serial.println("connected");
   b4a2a:	f003 ffc9 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4a2e:	492c      	ldr	r1, [pc, #176]	; (b4ae0 <_Z17Httprequest_todayv+0xd8>)
   b4a30:	f003 fa37 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    client.println("GET /dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=2022-11-27T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk HTTP/1.0");
   b4a34:	492b      	ldr	r1, [pc, #172]	; (b4ae4 <_Z17Httprequest_todayv+0xdc>)
   b4a36:	4829      	ldr	r0, [pc, #164]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4a38:	f003 fa33 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    client.println("Host: api.energidataservice.dk");
   b4a3c:	492a      	ldr	r1, [pc, #168]	; (b4ae8 <_Z17Httprequest_todayv+0xe0>)
   b4a3e:	4827      	ldr	r0, [pc, #156]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4a40:	f003 fa2f 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    client.println("Content-Length: 0");
   b4a44:	4929      	ldr	r1, [pc, #164]	; (b4aec <_Z17Httprequest_todayv+0xe4>)
   b4a46:	4825      	ldr	r0, [pc, #148]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4a48:	f003 fa2b 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    client.println("Content-Type: application/json");
   b4a4c:	4928      	ldr	r1, [pc, #160]	; (b4af0 <_Z17Httprequest_todayv+0xe8>)
   b4a4e:	4823      	ldr	r0, [pc, #140]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4a50:	f003 fa27 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    client.println();
   b4a54:	4821      	ldr	r0, [pc, #132]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4a56:	f003 fa18 	bl	b7e8a <_ZN5Print7printlnEv>
    //
  }
  delay(2000);
   b4a5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4a5e:	f003 fb6b 	bl	b8138 <delay>
  bool Json_start = false;
  char buffer[2084];
  int pos = 0;
   b4a62:	2400      	movs	r4, #0
  while (client.connected())
   b4a64:	4e1d      	ldr	r6, [pc, #116]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
  bool Json_start = false;
   b4a66:	4627      	mov	r7, r4
   b4a68:	ad05      	add	r5, sp, #20
  while (client.connected())
   b4a6a:	4630      	mov	r0, r6
   b4a6c:	f004 f9e0 	bl	b8e30 <_ZN9TCPClient9connectedEv>
   b4a70:	b198      	cbz	r0, b4a9a <_Z17Httprequest_todayv+0x92>
  {
    if (client.available())
   b4a72:	4630      	mov	r0, r6
   b4a74:	f004 faba 	bl	b8fec <_ZN9TCPClient9availableEv>
   b4a78:	b148      	cbz	r0, b4a8e <_Z17Httprequest_todayv+0x86>
    {
      char c = client.read();
   b4a7a:	4630      	mov	r0, r6
   b4a7c:	f004 f8c4 	bl	b8c08 <_ZN9TCPClient4readEv>
   b4a80:	b2c0      	uxtb	r0, r0
      if (!Json_start && (c == '{'))
   b4a82:	b93f      	cbnz	r7, b4a94 <_Z17Httprequest_todayv+0x8c>
   b4a84:	287b      	cmp	r0, #123	; 0x7b
   b4a86:	d102      	bne.n	b4a8e <_Z17Httprequest_todayv+0x86>
      {
        Json_start = true;
        buffer[pos] = c;
   b4a88:	5528      	strb	r0, [r5, r4]
        Json_start = true;
   b4a8a:	2701      	movs	r7, #1
        pos++;
   b4a8c:	3401      	adds	r4, #1
        buffer[pos] = c;
        pos++;
      }
      
    }
    buffer[pos] = '\0'; // Null-terminate buffer
   b4a8e:	2300      	movs	r3, #0
   b4a90:	552b      	strb	r3, [r5, r4]
  while (client.connected())
   b4a92:	e7ea      	b.n	b4a6a <_Z17Httprequest_todayv+0x62>
        buffer[pos] = c;
   b4a94:	5528      	strb	r0, [r5, r4]
        pos++;
   b4a96:	3401      	adds	r4, #1
   b4a98:	e7f9      	b.n	b4a8e <_Z17Httprequest_todayv+0x86>

    //Serial.println(buffer);
  }
  Serial.println(buffer);
   b4a9a:	f003 ff91 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4a9e:	4629      	mov	r1, r5
   b4aa0:	f003 f9ff 	bl	b7ea2 <_ZN5Print7printlnEPKc>

    }
    */
  // if temp is char string, term it here temp[ptr] = '\0';

  if (!client.connected())
   b4aa4:	480d      	ldr	r0, [pc, #52]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4aa6:	f004 f9c3 	bl	b8e30 <_ZN9TCPClient9connectedEv>
   b4aaa:	b958      	cbnz	r0, b4ac4 <_Z17Httprequest_todayv+0xbc>
  {
    Serial.println();
   b4aac:	f003 ff88 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4ab0:	f003 f9eb 	bl	b7e8a <_ZN5Print7printlnEv>
    Serial.println("disconnecting.");
   b4ab4:	f003 ff84 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4ab8:	490e      	ldr	r1, [pc, #56]	; (b4af4 <_Z17Httprequest_todayv+0xec>)
   b4aba:	f003 f9f2 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    client.stop();
   b4abe:	4807      	ldr	r0, [pc, #28]	; (b4adc <_Z17Httprequest_todayv+0xd4>)
   b4ac0:	f004 faee 	bl	b90a0 <_ZN9TCPClient4stopEv>
  String Json_message;
   b4ac4:	a801      	add	r0, sp, #4
   b4ac6:	f001 fe47 	bl	b6758 <_ZN6StringD1Ev>
  }

  return true;
}
   b4aca:	2001      	movs	r0, #1
   b4acc:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
   b4ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4ad2:	bf00      	nop
   b4ad4:	000bcc71 	.word	0x000bcc71
   b4ad8:	000bc62f 	.word	0x000bc62f
   b4adc:	2003d488 	.word	0x2003d488
   b4ae0:	000bc575 	.word	0x000bc575
   b4ae4:	000bc57f 	.word	0x000bc57f
   b4ae8:	000bc629 	.word	0x000bc629
   b4aec:	000bc648 	.word	0x000bc648
   b4af0:	000bc65a 	.word	0x000bc65a
   b4af4:	000bc679 	.word	0x000bc679

000b4af8 <_Z7htttttpv>:


// to get a verbose output from these actions
#define LOGGING  

void htttttp() {
   b4af8:	b573      	push	{r0, r1, r4, r5, r6, lr}

Serial.println();
   b4afa:	f003 ff61 	bl	b89c0 <_Z16_fetch_usbserialv>
Serial.println("Application>\tStart of Loop.");
// Request path and body can be set at runtime or at setup.
request.hostname = "api.energidataservice.dk";
   b4afe:	4c20      	ldr	r4, [pc, #128]	; (b4b80 <_Z7htttttpv+0x88>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b4b00:	4e20      	ldr	r6, [pc, #128]	; (b4b84 <_Z7htttttpv+0x8c>)
Serial.println();
   b4b02:	f003 f9c2 	bl	b7e8a <_ZN5Print7printlnEv>
Serial.println("Application>\tStart of Loop.");
   b4b06:	f003 ff5b 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4b0a:	491f      	ldr	r1, [pc, #124]	; (b4b88 <_Z7htttttpv+0x90>)
   b4b0c:	f003 f9c9 	bl	b7ea2 <_ZN5Print7printlnEPKc>
request.hostname = "api.energidataservice.dk";
   b4b10:	491e      	ldr	r1, [pc, #120]	; (b4b8c <_Z7htttttpv+0x94>)
   b4b12:	4620      	mov	r0, r4
   b4b14:	f001 fea4 	bl	b6860 <_ZN6StringaSEPKc>
request.port = 80;
   b4b18:	2350      	movs	r3, #80	; 0x50
request.path = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=2022-11-27T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk";
   b4b1a:	491d      	ldr	r1, [pc, #116]	; (b4b90 <_Z7htttttpv+0x98>)
request.port = 80;
   b4b1c:	63a3      	str	r3, [r4, #56]	; 0x38
request.path = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=2022-11-27T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk";
   b4b1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4b22:	f001 fe9d 	bl	b6860 <_ZN6StringaSEPKc>
   b4b26:	4b1b      	ldr	r3, [pc, #108]	; (b4b94 <_Z7htttttpv+0x9c>)
   b4b28:	481b      	ldr	r0, [pc, #108]	; (b4b98 <_Z7htttttpv+0xa0>)
   b4b2a:	9300      	str	r3, [sp, #0]
   b4b2c:	4632      	mov	r2, r6
   b4b2e:	4b1b      	ldr	r3, [pc, #108]	; (b4b9c <_Z7htttttpv+0xa4>)
   b4b30:	4621      	mov	r1, r4
   b4b32:	f001 f85b 	bl	b5bec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
// The library also supports sending a body with your request:
//request.body = "{\"key\":\"value\"}";

// Get request
http.get(request, response, headers);
Serial.print("Application>\tResponse status: ");
   b4b36:	f003 ff43 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4b3a:	4919      	ldr	r1, [pc, #100]	; (b4ba0 <_Z7htttttpv+0xa8>)
   b4b3c:	f003 f99e 	bl	b7e7c <_ZN5Print5printEPKc>
Serial.println(response.status);
   b4b40:	f003 ff3e 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4b44:	6834      	ldr	r4, [r6, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4b46:	2c00      	cmp	r4, #0
   b4b48:	4605      	mov	r5, r0
   b4b4a:	da17      	bge.n	b4b7c <_Z7htttttpv+0x84>
            t = print('-');
   b4b4c:	212d      	movs	r1, #45	; 0x2d
   b4b4e:	f003 f999 	bl	b7e84 <_ZN5Print5printEc>
            val = -n;
   b4b52:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b54:	220a      	movs	r2, #10
   b4b56:	4628      	mov	r0, r5
   b4b58:	f003 f9ad 	bl	b7eb6 <_ZN5Print11printNumberEmh>
        n += println();
   b4b5c:	4628      	mov	r0, r5
   b4b5e:	f003 f994 	bl	b7e8a <_ZN5Print7printlnEv>

Serial.print("Application>\tHTTP Response Body: ");
   b4b62:	f003 ff2d 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4b66:	490f      	ldr	r1, [pc, #60]	; (b4ba4 <_Z7htttttpv+0xac>)
   b4b68:	f003 f988 	bl	b7e7c <_ZN5Print5printEPKc>
Serial.println(response.body);
   b4b6c:	f003 ff28 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4b70:	6871      	ldr	r1, [r6, #4]

return;
   b4b72:	b002      	add	sp, #8
   b4b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Serial.println(response.body);
   b4b78:	f003 b993 	b.w	b7ea2 <_ZN5Print7printlnEPKc>
            val = n;
   b4b7c:	4621      	mov	r1, r4
   b4b7e:	e7e9      	b.n	b4b54 <_Z7htttttpv+0x5c>
   b4b80:	2003dd28 	.word	0x2003dd28
   b4b84:	2003dd74 	.word	0x2003dd74
   b4b88:	000bc688 	.word	0x000bc688
   b4b8c:	000bc62f 	.word	0x000bc62f
   b4b90:	000bc6a4 	.word	0x000bc6a4
   b4b94:	000bc741 	.word	0x000bc741
   b4b98:	2003d4b4 	.word	0x2003d4b4
   b4b9c:	2003d138 	.word	0x2003d138
   b4ba0:	000bc745 	.word	0x000bc745
   b4ba4:	000bc764 	.word	0x000bc764

000b4ba8 <_Z11init_memoryv>:
{
   b4ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b4bac:	20c0      	movs	r0, #192	; 0xc0
   b4bae:	f001 fcbb 	bl	b6528 <malloc>
   b4bb2:	4d38      	ldr	r5, [pc, #224]	; (b4c94 <_Z11init_memoryv+0xec>)
   b4bb4:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b4bb6:	b928      	cbnz	r0, b4bc4 <_Z11init_memoryv+0x1c>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b4bb8:	f003 ff02 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4bbc:	4936      	ldr	r1, [pc, #216]	; (b4c98 <_Z11init_memoryv+0xf0>)
   b4bbe:	f7ff fb61 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4bc2:	e7fe      	b.n	b4bc2 <_Z11init_memoryv+0x1a>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b4bc4:	20c0      	movs	r0, #192	; 0xc0
   b4bc6:	f001 fcaf 	bl	b6528 <malloc>
   b4bca:	4c34      	ldr	r4, [pc, #208]	; (b4c9c <_Z11init_memoryv+0xf4>)
   b4bcc:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b4bce:	b928      	cbnz	r0, b4bdc <_Z11init_memoryv+0x34>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b4bd0:	f003 fef6 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4bd4:	4932      	ldr	r1, [pc, #200]	; (b4ca0 <_Z11init_memoryv+0xf8>)
   b4bd6:	f7ff fb55 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4bda:	e7fe      	b.n	b4bda <_Z11init_memoryv+0x32>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b4bdc:	20c0      	movs	r0, #192	; 0xc0
   b4bde:	f001 fca3 	bl	b6528 <malloc>
   b4be2:	4e30      	ldr	r6, [pc, #192]	; (b4ca4 <_Z11init_memoryv+0xfc>)
   b4be4:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b4be6:	b928      	cbnz	r0, b4bf4 <_Z11init_memoryv+0x4c>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b4be8:	f003 feea 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4bec:	492e      	ldr	r1, [pc, #184]	; (b4ca8 <_Z11init_memoryv+0x100>)
   b4bee:	f7ff fb49 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4bf2:	e7fe      	b.n	b4bf2 <_Z11init_memoryv+0x4a>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4bf4:	f003 fee4 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4bf8:	492c      	ldr	r1, [pc, #176]	; (b4cac <_Z11init_memoryv+0x104>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4bfa:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b4cc0 <_Z11init_memoryv+0x118>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4bfe:	f44f 7210 	mov.w	r2, #576	; 0x240
   b4c02:	f7ff fb3f 	bl	b4284 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4c06:	2060      	movs	r0, #96	; 0x60
   b4c08:	f001 fc8e 	bl	b6528 <malloc>
   b4c0c:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b4c10:	b928      	cbnz	r0, b4c1e <_Z11init_memoryv+0x76>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b4c12:	f003 fed5 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4c16:	4926      	ldr	r1, [pc, #152]	; (b4cb0 <_Z11init_memoryv+0x108>)
   b4c18:	f7ff fb34 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4c1c:	e7fe      	b.n	b4c1c <_Z11init_memoryv+0x74>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b4c1e:	2060      	movs	r0, #96	; 0x60
   b4c20:	f001 fc82 	bl	b6528 <malloc>
   b4c24:	f8df 909c 	ldr.w	r9, [pc, #156]	; b4cc4 <_Z11init_memoryv+0x11c>
   b4c28:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b4c2c:	b928      	cbnz	r0, b4c3a <_Z11init_memoryv+0x92>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b4c2e:	f003 fec7 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4c32:	4920      	ldr	r1, [pc, #128]	; (b4cb4 <_Z11init_memoryv+0x10c>)
   b4c34:	f7ff fb26 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4c38:	e7fe      	b.n	b4c38 <_Z11init_memoryv+0x90>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b4c3a:	f003 fec1 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4c3e:	491e      	ldr	r1, [pc, #120]	; (b4cb8 <_Z11init_memoryv+0x110>)
   b4c40:	22c0      	movs	r2, #192	; 0xc0
   b4c42:	f7ff fb1f 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b4c46:	f003 febb 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4c4a:	4607      	mov	r7, r0
   b4c4c:	f001 fd14 	bl	b6678 <_ZN11SystemClass10freeMemoryEv>
   b4c50:	491a      	ldr	r1, [pc, #104]	; (b4cbc <_Z11init_memoryv+0x114>)
   b4c52:	4602      	mov	r2, r0
   b4c54:	4638      	mov	r0, r7
   b4c56:	f7ff fb15 	bl	b4284 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b4c5a:	6828      	ldr	r0, [r5, #0]
   b4c5c:	22c0      	movs	r2, #192	; 0xc0
   b4c5e:	2100      	movs	r1, #0
   b4c60:	f005 fb1f 	bl	ba2a2 <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b4c64:	6820      	ldr	r0, [r4, #0]
   b4c66:	22c0      	movs	r2, #192	; 0xc0
   b4c68:	2100      	movs	r1, #0
   b4c6a:	f005 fb1a 	bl	ba2a2 <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4c6e:	6830      	ldr	r0, [r6, #0]
   b4c70:	22c0      	movs	r2, #192	; 0xc0
   b4c72:	2100      	movs	r1, #0
   b4c74:	f005 fb15 	bl	ba2a2 <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4c78:	f8d8 0000 	ldr.w	r0, [r8]
   b4c7c:	2260      	movs	r2, #96	; 0x60
   b4c7e:	2100      	movs	r1, #0
   b4c80:	f005 fb0f 	bl	ba2a2 <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4c84:	f8d9 0000 	ldr.w	r0, [r9]
   b4c88:	2260      	movs	r2, #96	; 0x60
}
   b4c8a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4c8e:	2100      	movs	r1, #0
   b4c90:	f005 bb07 	b.w	ba2a2 <memset>
   b4c94:	2003d4ac 	.word	0x2003d4ac
   b4c98:	000bc786 	.word	0x000bc786
   b4c9c:	2003d4a4 	.word	0x2003d4a4
   b4ca0:	000bc7b4 	.word	0x000bc7b4
   b4ca4:	2003d4a8 	.word	0x2003d4a8
   b4ca8:	000bc7de 	.word	0x000bc7de
   b4cac:	000bc80b 	.word	0x000bc80b
   b4cb0:	000bc83d 	.word	0x000bc83d
   b4cb4:	000bc865 	.word	0x000bc865
   b4cb8:	000bc891 	.word	0x000bc891
   b4cbc:	000bc8bc 	.word	0x000bc8bc
   b4cc0:	2003e1a8 	.word	0x2003e1a8
   b4cc4:	2003e1bc 	.word	0x2003e1bc

000b4cc8 <_Z13rotate_pricesv>:
{
   b4cc8:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b4cca:	4a0c      	ldr	r2, [pc, #48]	; (b4cfc <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b4ccc:	4b0c      	ldr	r3, [pc, #48]	; (b4d00 <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b4cce:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b4cd0:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b4cd2:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b4cd4:	4b0b      	ldr	r3, [pc, #44]	; (b4d04 <_Z13rotate_pricesv+0x3c>)
   b4cd6:	6819      	ldr	r1, [r3, #0]
   b4cd8:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4cda:	22c0      	movs	r2, #192	; 0xc0
   b4cdc:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b4cde:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4ce0:	f005 fadf 	bl	ba2a2 <memset>
    int *temp2 = wh_yesterday;
   b4ce4:	4a08      	ldr	r2, [pc, #32]	; (b4d08 <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b4ce6:	4b09      	ldr	r3, [pc, #36]	; (b4d0c <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b4ce8:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b4cea:	6819      	ldr	r1, [r3, #0]
   b4cec:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b4cee:	6018      	str	r0, [r3, #0]
}
   b4cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4cf4:	2260      	movs	r2, #96	; 0x60
   b4cf6:	2100      	movs	r1, #0
   b4cf8:	f005 bad3 	b.w	ba2a2 <memset>
   b4cfc:	2003d4a4 	.word	0x2003d4a4
   b4d00:	2003d4ac 	.word	0x2003d4ac
   b4d04:	2003d4a8 	.word	0x2003d4a8
   b4d08:	2003e1bc 	.word	0x2003e1bc
   b4d0c:	2003e1a8 	.word	0x2003e1a8

000b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4d10:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4d12:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4d14:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4d16:	b17c      	cbz	r4, b4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4d18:	6863      	ldr	r3, [r4, #4]
   b4d1a:	3b01      	subs	r3, #1
   b4d1c:	6063      	str	r3, [r4, #4]
   b4d1e:	b95b      	cbnz	r3, b4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4d20:	6823      	ldr	r3, [r4, #0]
   b4d22:	4620      	mov	r0, r4
   b4d24:	689b      	ldr	r3, [r3, #8]
   b4d26:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d28:	68a3      	ldr	r3, [r4, #8]
   b4d2a:	3b01      	subs	r3, #1
   b4d2c:	60a3      	str	r3, [r4, #8]
   b4d2e:	b91b      	cbnz	r3, b4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4d30:	6823      	ldr	r3, [r4, #0]
   b4d32:	4620      	mov	r0, r4
   b4d34:	68db      	ldr	r3, [r3, #12]
   b4d36:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4d38:	4628      	mov	r0, r5
   b4d3a:	bd38      	pop	{r3, r4, r5, pc}

000b4d3c <_Z8get_datai>:
{
   b4d3c:	b510      	push	{r4, lr}
    temp[0] = 0;
   b4d3e:	4b11      	ldr	r3, [pc, #68]	; (b4d84 <_Z8get_datai+0x48>)
   b4d40:	2200      	movs	r2, #0
{
   b4d42:	b08a      	sub	sp, #40	; 0x28
    temp[0] = 0;
   b4d44:	701a      	strb	r2, [r3, #0]
{
   b4d46:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\"}", Time.year(), Time.month(), day);
   b4d48:	f003 f9e0 	bl	b810c <_ZN9TimeClass4yearEv>
   b4d4c:	9003      	str	r0, [sp, #12]
   b4d4e:	f003 f9d5 	bl	b80fc <_ZN9TimeClass5monthEv>
   b4d52:	9a03      	ldr	r2, [sp, #12]
   b4d54:	490c      	ldr	r1, [pc, #48]	; (b4d88 <_Z8get_datai+0x4c>)
   b4d56:	9400      	str	r4, [sp, #0]
   b4d58:	4603      	mov	r3, r0
   b4d5a:	a806      	add	r0, sp, #24
   b4d5c:	f001 fe1e 	bl	b699c <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4d60:	4b0a      	ldr	r3, [pc, #40]	; (b4d8c <_Z8get_datai+0x50>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4d62:	9a06      	ldr	r2, [sp, #24]
   b4d64:	781b      	ldrb	r3, [r3, #0]
   b4d66:	490a      	ldr	r1, [pc, #40]	; (b4d90 <_Z8get_datai+0x54>)
   b4d68:	f88d 3000 	strb.w	r3, [sp]
   b4d6c:	a804      	add	r0, sp, #16
   b4d6e:	233c      	movs	r3, #60	; 0x3c
   b4d70:	f003 fbca 	bl	b8508 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4d74:	a805      	add	r0, sp, #20
   b4d76:	f7ff ffcb 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4d7a:	a806      	add	r0, sp, #24
   b4d7c:	f001 fcec 	bl	b6758 <_ZN6StringD1Ev>
}
   b4d80:	b00a      	add	sp, #40	; 0x28
   b4d82:	bd10      	pop	{r4, pc}
   b4d84:	2003dd88 	.word	0x2003dd88
   b4d88:	000bc8c7 	.word	0x000bc8c7
   b4d8c:	2003d418 	.word	0x2003d418
   b4d90:	000bc8f6 	.word	0x000bc8f6

000b4d94 <setup>:
{
   b4d94:	b570      	push	{r4, r5, r6, lr}
    STARTUP = true;
   b4d96:	4b5b      	ldr	r3, [pc, #364]	; (b4f04 <setup+0x170>)
   b4d98:	2201      	movs	r2, #1
{
   b4d9a:	b08e      	sub	sp, #56	; 0x38
    STARTUP = true;
   b4d9c:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d9e:	f001 fb93 	bl	b64c8 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4da2:	b910      	cbnz	r0, b4daa <setup+0x16>
            spark_process();
   b4da4:	f001 fb88 	bl	b64b8 <spark_process>
        while (_while() && !_condition()) {
   b4da8:	e7f9      	b.n	b4d9e <setup+0xa>
   b4daa:	f001 fb8d 	bl	b64c8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
   b4dae:	2000      	movs	r0, #0
   b4db0:	f001 fba2 	bl	b64f8 <spark_unsubscribe>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4db4:	2400      	movs	r4, #0
    ble_setup();
   b4db6:	f7ff fb4f 	bl	b4458 <_Z9ble_setupv>
    init_memory();
   b4dba:	f7ff fef5 	bl	b4ba8 <_Z11init_memoryv>
    Time.zone(1);
   b4dbe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b4dc2:	f003 f91d 	bl	b8000 <_ZN9TimeClass4zoneEf>
   b4dc6:	4950      	ldr	r1, [pc, #320]	; (b4f08 <setup+0x174>)
   b4dc8:	4850      	ldr	r0, [pc, #320]	; (b4f0c <setup+0x178>)
        Serial.printf("Count1=: %d\n", count);
   b4dca:	4e51      	ldr	r6, [pc, #324]	; (b4f10 <setup+0x17c>)
   b4dcc:	2301      	movs	r3, #1
   b4dce:	4622      	mov	r2, r4
   b4dd0:	e9cd 4400 	strd	r4, r4, [sp]
   b4dd4:	f001 fb88 	bl	b64e8 <spark_subscribe>
    delay(10000);
   b4dd8:	f242 7010 	movw	r0, #10000	; 0x2710
   b4ddc:	f003 f9ac 	bl	b8138 <delay>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4de0:	f003 fdee 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4de4:	4605      	mov	r5, r0
   b4de6:	f003 f959 	bl	b809c <_ZN9TimeClass4hourEv>
   b4dea:	9003      	str	r0, [sp, #12]
   b4dec:	f003 f962 	bl	b80b4 <_ZN9TimeClass6minuteEv>
   b4df0:	9a03      	ldr	r2, [sp, #12]
   b4df2:	4948      	ldr	r1, [pc, #288]	; (b4f14 <setup+0x180>)
   b4df4:	4603      	mov	r3, r0
   b4df6:	4628      	mov	r0, r5
   b4df8:	f7ff fa44 	bl	b4284 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4dfc:	4622      	mov	r2, r4
   b4dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4e02:	4845      	ldr	r0, [pc, #276]	; (b4f18 <setup+0x184>)
   b4e04:	f7ff f9c8 	bl	b4198 <_ZN5Timer6_startEjb.isra.0>
    Serial.printlnf("RSSI=%d", (int8_t)WiFi.RSSI());
   b4e08:	f003 fdda 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4e0c:	4943      	ldr	r1, [pc, #268]	; (b4f1c <setup+0x188>)
   b4e0e:	4605      	mov	r5, r0
   b4e10:	a805      	add	r0, sp, #20
   b4e12:	f004 fa65 	bl	b92e0 <_ZN5spark9WiFiClass4RSSIEv>
   b4e16:	a805      	add	r0, sp, #20
   b4e18:	f004 fa3e 	bl	b9298 <_ZNK10WiFiSignalcvaEv>
   b4e1c:	4940      	ldr	r1, [pc, #256]	; (b4f20 <setup+0x18c>)
   b4e1e:	4602      	mov	r2, r0
   b4e20:	4628      	mov	r0, r5
   b4e22:	f7ff fad5 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
    Serial.printf("trying the HTTP GET\n");
   b4e26:	f003 fdcb 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4e2a:	493e      	ldr	r1, [pc, #248]	; (b4f24 <setup+0x190>)
    while (!CALCULATE)
   b4e2c:	4d3e      	ldr	r5, [pc, #248]	; (b4f28 <setup+0x194>)
    Serial.printf("trying the HTTP GET\n");
   b4e2e:	f7ff fa29 	bl	b4284 <_ZN5Print6printfEPKcz>
    Httprequest_today();
   b4e32:	f7ff fde9 	bl	b4a08 <_Z17Httprequest_todayv>
    Serial.println("trying the other method");
   b4e36:	f003 fdc3 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4e3a:	493c      	ldr	r1, [pc, #240]	; (b4f2c <setup+0x198>)
   b4e3c:	f003 f831 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    htttttp();
   b4e40:	f7ff fe5a 	bl	b4af8 <_Z7htttttpv>
    Serial.printf("Getting price data for yesterday\n");
   b4e44:	f003 fdbc 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4e48:	4939      	ldr	r1, [pc, #228]	; (b4f30 <setup+0x19c>)
   b4e4a:	f7ff fa1b 	bl	b4284 <_ZN5Print6printfEPKcz>
    get_data(Time.day() - 1);
   b4e4e:	f003 f949 	bl	b80e4 <_ZN9TimeClass3dayEv>
   b4e52:	3801      	subs	r0, #1
   b4e54:	f7ff ff72 	bl	b4d3c <_Z8get_datai>
    while (!CALCULATE)
   b4e58:	782b      	ldrb	r3, [r5, #0]
   b4e5a:	b95b      	cbnz	r3, b4e74 <setup+0xe0>
        delay(2000);
   b4e5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e60:	f003 f96a 	bl	b8138 <delay>
        Serial.printf("Count1=: %d\n", count);
   b4e64:	f003 fdac 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4e68:	4622      	mov	r2, r4
   b4e6a:	4631      	mov	r1, r6
   b4e6c:	f7ff fa0a 	bl	b4284 <_ZN5Print6printfEPKcz>
        count++;
   b4e70:	3401      	adds	r4, #1
    while (!CALCULATE)
   b4e72:	e7f1      	b.n	b4e58 <setup+0xc4>
    delay(5000);
   b4e74:	f241 3088 	movw	r0, #5000	; 0x1388
    CALCULATE = false;
   b4e78:	2400      	movs	r4, #0
   b4e7a:	702c      	strb	r4, [r5, #0]
    delay(5000);
   b4e7c:	f003 f95c 	bl	b8138 <delay>
    rotate_prices();
   b4e80:	f7ff ff22 	bl	b4cc8 <_Z13rotate_pricesv>
    Serial.printf("Getting price data for today\n");
   b4e84:	f003 fd9c 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4e88:	492a      	ldr	r1, [pc, #168]	; (b4f34 <setup+0x1a0>)
        Serial.printf("Count2=: %d\n", count);
   b4e8a:	4e2b      	ldr	r6, [pc, #172]	; (b4f38 <setup+0x1a4>)
    Serial.printf("Getting price data for today\n");
   b4e8c:	f7ff f9fa 	bl	b4284 <_ZN5Print6printfEPKcz>
    get_data(Time.day());
   b4e90:	f003 f928 	bl	b80e4 <_ZN9TimeClass3dayEv>
   b4e94:	f7ff ff52 	bl	b4d3c <_Z8get_datai>
    while (!CALCULATE)
   b4e98:	782b      	ldrb	r3, [r5, #0]
   b4e9a:	b95b      	cbnz	r3, b4eb4 <setup+0x120>
        delay(1000);
   b4e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4ea0:	f003 f94a 	bl	b8138 <delay>
        Serial.printf("Count2=: %d\n", count);
   b4ea4:	f003 fd8c 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4ea8:	4622      	mov	r2, r4
   b4eaa:	4631      	mov	r1, r6
   b4eac:	f7ff f9ea 	bl	b4284 <_ZN5Print6printfEPKcz>
        count++;
   b4eb0:	3401      	adds	r4, #1
    while (!CALCULATE)
   b4eb2:	e7f1      	b.n	b4e98 <setup+0x104>
    rotate_prices();
   b4eb4:	f7ff ff08 	bl	b4cc8 <_Z13rotate_pricesv>
    delay(5000);
   b4eb8:	f241 3088 	movw	r0, #5000	; 0x1388
   b4ebc:	f003 f93c 	bl	b8138 <delay>
    if (Time.hour() >= PULL_TIME_1)
   b4ec0:	f003 f8ec 	bl	b809c <_ZN9TimeClass4hourEv>
   b4ec4:	280c      	cmp	r0, #12
   b4ec6:	dd13      	ble.n	b4ef0 <setup+0x15c>
        CALCULATE = false;
   b4ec8:	2300      	movs	r3, #0
   b4eca:	702b      	strb	r3, [r5, #0]
        GET_DATA = true;
   b4ecc:	4b1b      	ldr	r3, [pc, #108]	; (b4f3c <setup+0x1a8>)
   b4ece:	2201      	movs	r2, #1
   b4ed0:	701a      	strb	r2, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b4ed2:	2103      	movs	r1, #3
   b4ed4:	2008      	movs	r0, #8
   b4ed6:	f004 fb2f 	bl	b9538 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4eda:	2300      	movs	r3, #0
   b4edc:	9300      	str	r3, [sp, #0]
   b4ede:	4918      	ldr	r1, [pc, #96]	; (b4f40 <setup+0x1ac>)
   b4ee0:	f04f 33ff 	mov.w	r3, #4294967295
   b4ee4:	2201      	movs	r2, #1
   b4ee6:	2008      	movs	r0, #8
   b4ee8:	f003 fd92 	bl	b8a10 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b4eec:	b00e      	add	sp, #56	; 0x38
   b4eee:	bd70      	pop	{r4, r5, r6, pc}
        Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b4ef0:	f003 fd66 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4ef4:	4913      	ldr	r1, [pc, #76]	; (b4f44 <setup+0x1b0>)
   b4ef6:	220d      	movs	r2, #13
   b4ef8:	f7ff f9c4 	bl	b4284 <_ZN5Print6printfEPKcz>
        CALCULATE = true;
   b4efc:	2301      	movs	r3, #1
   b4efe:	702b      	strb	r3, [r5, #0]
   b4f00:	e7e7      	b.n	b4ed2 <setup+0x13e>
   b4f02:	bf00      	nop
   b4f04:	2003d370 	.word	0x2003d370
   b4f08:	000b42a1 	.word	0x000b42a1
   b4f0c:	000bc8ff 	.word	0x000bc8ff
   b4f10:	000bc977 	.word	0x000bc977
   b4f14:	000bc906 	.word	0x000bc906
   b4f18:	2003e18c 	.word	0x2003e18c
   b4f1c:	2003e710 	.word	0x2003e710
   b4f20:	000bc920 	.word	0x000bc920
   b4f24:	000bc928 	.word	0x000bc928
   b4f28:	2003d351 	.word	0x2003d351
   b4f2c:	000bc93d 	.word	0x000bc93d
   b4f30:	000bc955 	.word	0x000bc955
   b4f34:	000bc984 	.word	0x000bc984
   b4f38:	000bc9a2 	.word	0x000bc9a2
   b4f3c:	2003d36c 	.word	0x2003d36c
   b4f40:	000b40d1 	.word	0x000b40d1
   b4f44:	000bc9af 	.word	0x000bc9af

000b4f48 <_Z15transmit_pricesPA2_ii>:
{
   b4f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f4c:	b08a      	sub	sp, #40	; 0x28
   b4f4e:	4605      	mov	r5, r0
   b4f50:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b4f52:	f003 fd35 	bl	b89c0 <_Z16_fetch_usbserialv>
   b4f56:	4918      	ldr	r1, [pc, #96]	; (b4fb8 <_Z15transmit_pricesPA2_ii+0x70>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4f58:	4f18      	ldr	r7, [pc, #96]	; (b4fbc <_Z15transmit_pricesPA2_ii+0x74>)
    Serial.printf("In work\n");
   b4f5a:	f7ff f993 	bl	b4284 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b4f5e:	4918      	ldr	r1, [pc, #96]	; (b4fc0 <_Z15transmit_pricesPA2_ii+0x78>)
   b4f60:	a802      	add	r0, sp, #8
   b4f62:	f001 fc44 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4f66:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4f68:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b4f6c:	42b4      	cmp	r4, r6
   b4f6e:	da10      	bge.n	b4f92 <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4f70:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4f74:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4f78:	4639      	mov	r1, r7
   b4f7a:	a806      	add	r0, sp, #24
   b4f7c:	f001 fd0e 	bl	b699c <_ZN6String6formatEPKcz>
   b4f80:	a906      	add	r1, sp, #24
   b4f82:	a802      	add	r0, sp, #8
   b4f84:	f001 fca8 	bl	b68d8 <_ZN6String6concatERKS_>
   b4f88:	a806      	add	r0, sp, #24
   b4f8a:	f001 fbe5 	bl	b6758 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b4f8e:	3401      	adds	r4, #1
   b4f90:	e7ec      	b.n	b4f6c <_Z15transmit_pricesPA2_ii+0x24>
   b4f92:	4b0c      	ldr	r3, [pc, #48]	; (b4fc4 <_Z15transmit_pricesPA2_ii+0x7c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4f94:	9a02      	ldr	r2, [sp, #8]
   b4f96:	781b      	ldrb	r3, [r3, #0]
   b4f98:	490b      	ldr	r1, [pc, #44]	; (b4fc8 <_Z15transmit_pricesPA2_ii+0x80>)
   b4f9a:	f88d 3000 	strb.w	r3, [sp]
   b4f9e:	a806      	add	r0, sp, #24
   b4fa0:	233c      	movs	r3, #60	; 0x3c
   b4fa2:	f003 fab1 	bl	b8508 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4fa6:	a807      	add	r0, sp, #28
   b4fa8:	f7ff feb2 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String data = "Cheap(ish) hours of the day: ";
   b4fac:	a802      	add	r0, sp, #8
   b4fae:	f001 fbd3 	bl	b6758 <_ZN6StringD1Ev>
}
   b4fb2:	b00a      	add	sp, #40	; 0x28
   b4fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4fb8:	000bc9e0 	.word	0x000bc9e0
   b4fbc:	000bca07 	.word	0x000bca07
   b4fc0:	000bc9e9 	.word	0x000bc9e9
   b4fc4:	2003d418 	.word	0x2003d418
   b4fc8:	000bca16 	.word	0x000bca16

000b4fcc <loop>:
{
   b4fcc:	b570      	push	{r4, r5, r6, lr}
    if (GET_DATA)
   b4fce:	4c59      	ldr	r4, [pc, #356]	; (b5134 <loop+0x168>)
   b4fd0:	7823      	ldrb	r3, [r4, #0]
{
   b4fd2:	b0c2      	sub	sp, #264	; 0x108
    if (GET_DATA)
   b4fd4:	b14b      	cbz	r3, b4fea <loop+0x1e>
        AWAITING_DATA = true;
   b4fd6:	4b58      	ldr	r3, [pc, #352]	; (b5138 <loop+0x16c>)
   b4fd8:	2201      	movs	r2, #1
   b4fda:	701a      	strb	r2, [r3, #0]
        get_data(Time.day() + 1);
   b4fdc:	f003 f882 	bl	b80e4 <_ZN9TimeClass3dayEv>
   b4fe0:	3001      	adds	r0, #1
   b4fe2:	f7ff feab 	bl	b4d3c <_Z8get_datai>
        GET_DATA = false;
   b4fe6:	2300      	movs	r3, #0
   b4fe8:	7023      	strb	r3, [r4, #0]
    if (CALCULATE)
   b4fea:	4c54      	ldr	r4, [pc, #336]	; (b513c <loop+0x170>)
   b4fec:	4d54      	ldr	r5, [pc, #336]	; (b5140 <loop+0x174>)
   b4fee:	7823      	ldrb	r3, [r4, #0]
   b4ff0:	b333      	cbz	r3, b5040 <loop+0x74>
        update_JSON();
   b4ff2:	f7ff fbc1 	bl	b4778 <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b4ff6:	4b53      	ldr	r3, [pc, #332]	; (b5144 <loop+0x178>)
   b4ff8:	4853      	ldr	r0, [pc, #332]	; (b5148 <loop+0x17c>)
   b4ffa:	6819      	ldr	r1, [r3, #0]
   b4ffc:	2218      	movs	r2, #24
   b4ffe:	f7ff facb 	bl	b4598 <_Z8calc_lowPA2_iPdi>
   b5002:	4b52      	ldr	r3, [pc, #328]	; (b514c <loop+0x180>)
   b5004:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b5006:	f003 fcdb 	bl	b89c0 <_Z16_fetch_usbserialv>
   b500a:	4606      	mov	r6, r0
   b500c:	f003 f846 	bl	b809c <_ZN9TimeClass4hourEv>
   b5010:	9001      	str	r0, [sp, #4]
   b5012:	f003 f84f 	bl	b80b4 <_ZN9TimeClass6minuteEv>
   b5016:	9a01      	ldr	r2, [sp, #4]
   b5018:	494d      	ldr	r1, [pc, #308]	; (b5150 <loop+0x184>)
   b501a:	4603      	mov	r3, r0
   b501c:	4630      	mov	r0, r6
   b501e:	f7ff f931 	bl	b4284 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b5022:	2301      	movs	r3, #1
   b5024:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b5026:	2300      	movs	r3, #0
   b5028:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b502a:	4b48      	ldr	r3, [pc, #288]	; (b514c <loop+0x180>)
   b502c:	4846      	ldr	r0, [pc, #280]	; (b5148 <loop+0x17c>)
   b502e:	6819      	ldr	r1, [r3, #0]
   b5030:	f7ff ff8a 	bl	b4f48 <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b5034:	4b47      	ldr	r3, [pc, #284]	; (b5154 <loop+0x188>)
   b5036:	2201      	movs	r2, #1
   b5038:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b503a:	2300      	movs	r3, #0
   b503c:	702b      	strb	r3, [r5, #0]
   b503e:	e002      	b.n	b5046 <loop+0x7a>
    if (TRANSMIT_PRICE)
   b5040:	782b      	ldrb	r3, [r5, #0]
   b5042:	2b00      	cmp	r3, #0
   b5044:	d1f1      	bne.n	b502a <loop+0x5e>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b5046:	4d44      	ldr	r5, [pc, #272]	; (b5158 <loop+0x18c>)
   b5048:	782b      	ldrb	r3, [r5, #0]
   b504a:	b1db      	cbz	r3, b5084 <loop+0xb8>
        Serial.printf("Received power/get\n");
   b504c:	f003 fcb8 	bl	b89c0 <_Z16_fetch_usbserialv>
   b5050:	4942      	ldr	r1, [pc, #264]	; (b515c <loop+0x190>)
   b5052:	f7ff f917 	bl	b4284 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b5056:	4b42      	ldr	r3, [pc, #264]	; (b5160 <loop+0x194>)
   b5058:	681e      	ldr	r6, [r3, #0]
   b505a:	f003 f81f 	bl	b809c <_ZN9TimeClass4hourEv>
   b505e:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b5062:	4940      	ldr	r1, [pc, #256]	; (b5164 <loop+0x198>)
        wh_today[Time.hour()] += 1;
   b5064:	3301      	adds	r3, #1
   b5066:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b506a:	4b3f      	ldr	r3, [pc, #252]	; (b5168 <loop+0x19c>)
   b506c:	a802      	add	r0, sp, #8
   b506e:	681a      	ldr	r2, [r3, #0]
   b5070:	f001 fa72 	bl	b6558 <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5074:	2300      	movs	r3, #0
   b5076:	483d      	ldr	r0, [pc, #244]	; (b516c <loop+0x1a0>)
   b5078:	22ff      	movs	r2, #255	; 0xff
   b507a:	a902      	add	r1, sp, #8
   b507c:	f001 ff18 	bl	b6eb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        TRANSMIT_SENSOR = false;
   b5080:	2300      	movs	r3, #0
   b5082:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b5084:	4d3a      	ldr	r5, [pc, #232]	; (b5170 <loop+0x1a4>)
   b5086:	782b      	ldrb	r3, [r5, #0]
   b5088:	b12b      	cbz	r3, b5096 <loop+0xca>
        rotate_prices();
   b508a:	f7ff fe1d 	bl	b4cc8 <_Z13rotate_pricesv>
        ROTATE = false;
   b508e:	2300      	movs	r3, #0
   b5090:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b5092:	2301      	movs	r3, #1
   b5094:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b5096:	4c37      	ldr	r4, [pc, #220]	; (b5174 <loop+0x1a8>)
   b5098:	7823      	ldrb	r3, [r4, #0]
   b509a:	b11b      	cbz	r3, b50a4 <loop+0xd8>
        hourly_JSON_update();
   b509c:	f7ff fb3a 	bl	b4714 <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b50a0:	2300      	movs	r3, #0
   b50a2:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 3000))
   b50a4:	4c34      	ldr	r4, [pc, #208]	; (b5178 <loop+0x1ac>)
   b50a6:	7825      	ldrb	r5, [r4, #0]
   b50a8:	f000 ff50 	bl	b5f4c <HAL_Timer_Get_Milli_Seconds>
   b50ac:	4b33      	ldr	r3, [pc, #204]	; (b517c <loop+0x1b0>)
   b50ae:	681b      	ldr	r3, [r3, #0]
   b50b0:	1ac0      	subs	r0, r0, r3
   b50b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b50b6:	4298      	cmp	r0, r3
   b50b8:	d934      	bls.n	b5124 <loop+0x158>
   b50ba:	2d00      	cmp	r5, #0
   b50bc:	d032      	beq.n	b5124 <loop+0x158>
        update_JSON();
   b50be:	f7ff fb5b 	bl	b4778 <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b50c2:	4b29      	ldr	r3, [pc, #164]	; (b5168 <loop+0x19c>)
   b50c4:	4927      	ldr	r1, [pc, #156]	; (b5164 <loop+0x198>)
   b50c6:	681a      	ldr	r2, [r3, #0]
   b50c8:	a802      	add	r0, sp, #8
   b50ca:	f001 fa45 	bl	b6558 <sprintf>
   b50ce:	2300      	movs	r3, #0
   b50d0:	22ff      	movs	r2, #255	; 0xff
   b50d2:	a902      	add	r1, sp, #8
   b50d4:	4825      	ldr	r0, [pc, #148]	; (b516c <loop+0x1a0>)
   b50d6:	f001 feeb 	bl	b6eb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b50da:	4929      	ldr	r1, [pc, #164]	; (b5180 <loop+0x1b4>)
   b50dc:	4829      	ldr	r0, [pc, #164]	; (b5184 <loop+0x1b8>)
   b50de:	2200      	movs	r2, #0
   b50e0:	f001 ff46 	bl	b6f70 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b50e4:	4928      	ldr	r1, [pc, #160]	; (b5188 <loop+0x1bc>)
   b50e6:	4829      	ldr	r0, [pc, #164]	; (b518c <loop+0x1c0>)
   b50e8:	2200      	movs	r2, #0
   b50ea:	f001 ff41 	bl	b6f70 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b50ee:	4928      	ldr	r1, [pc, #160]	; (b5190 <loop+0x1c4>)
   b50f0:	4828      	ldr	r0, [pc, #160]	; (b5194 <loop+0x1c8>)
   b50f2:	2200      	movs	r2, #0
   b50f4:	f001 ff3c 	bl	b6f70 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b50f8:	4927      	ldr	r1, [pc, #156]	; (b5198 <loop+0x1cc>)
   b50fa:	4828      	ldr	r0, [pc, #160]	; (b519c <loop+0x1d0>)
   b50fc:	2200      	movs	r2, #0
   b50fe:	f001 ff37 	bl	b6f70 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b5102:	4927      	ldr	r1, [pc, #156]	; (b51a0 <loop+0x1d4>)
   b5104:	4827      	ldr	r0, [pc, #156]	; (b51a4 <loop+0x1d8>)
   b5106:	2200      	movs	r2, #0
   b5108:	f001 ff32 	bl	b6f70 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue("{\"pricestoday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b510c:	4926      	ldr	r1, [pc, #152]	; (b51a8 <loop+0x1dc>)
   b510e:	481f      	ldr	r0, [pc, #124]	; (b518c <loop+0x1c0>)
   b5110:	2200      	movs	r2, #0
   b5112:	f001 ff32 	bl	b6f7a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b5116:	2300      	movs	r3, #0
   b5118:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b511a:	f003 fc51 	bl	b89c0 <_Z16_fetch_usbserialv>
   b511e:	4923      	ldr	r1, [pc, #140]	; (b51ac <loop+0x1e0>)
   b5120:	f7ff f8b0 	bl	b4284 <_ZN5Print6printfEPKcz>
    delay(1000);
   b5124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b5128:	b042      	add	sp, #264	; 0x108
   b512a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
   b512e:	f003 b803 	b.w	b8138 <delay>
   b5132:	bf00      	nop
   b5134:	2003d36c 	.word	0x2003d36c
   b5138:	2003d350 	.word	0x2003d350
   b513c:	2003d351 	.word	0x2003d351
   b5140:	2003d371 	.word	0x2003d371
   b5144:	2003d4a4 	.word	0x2003d4a4
   b5148:	2003d420 	.word	0x2003d420
   b514c:	2003d480 	.word	0x2003d480
   b5150:	000bc906 	.word	0x000bc906
   b5154:	2003d36f 	.word	0x2003d36f
   b5158:	2003d372 	.word	0x2003d372
   b515c:	000bca26 	.word	0x000bca26
   b5160:	2003e1a8 	.word	0x2003e1a8
   b5164:	000bca3a 	.word	0x000bca3a
   b5168:	2003d484 	.word	0x2003d484
   b516c:	2003d374 	.word	0x2003d374
   b5170:	2003d36e 	.word	0x2003d36e
   b5174:	2003d373 	.word	0x2003d373
   b5178:	2003d36d 	.word	0x2003d36d
   b517c:	2003dcf4 	.word	0x2003dcf4
   b5180:	2003dd18 	.word	0x2003dd18
   b5184:	2003d364 	.word	0x2003d364
   b5188:	2003dcf8 	.word	0x2003dcf8
   b518c:	2003d354 	.word	0x2003d354
   b5190:	2003dd08 	.word	0x2003dd08
   b5194:	2003d35c 	.word	0x2003d35c
   b5198:	2003e1c0 	.word	0x2003e1c0
   b519c:	2003d384 	.word	0x2003d384
   b51a0:	2003e1ac 	.word	0x2003e1ac
   b51a4:	2003d37c 	.word	0x2003d37c
   b51a8:	000bca46 	.word	0x000bca46
   b51ac:	000bca97 	.word	0x000bca97

000b51b0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b51b0:	b082      	sub	sp, #8
   b51b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b51b4:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b51b6:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b51b8:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b51ba:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b51bc:	e9c0 3300 	strd	r3, r3, [r0]
   b51c0:	4606      	mov	r6, r0
   b51c2:	4694      	mov	ip, r2
   b51c4:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b51c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51c8:	ac04      	add	r4, sp, #16
   b51ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51cc:	682b      	ldr	r3, [r5, #0]
   b51ce:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b51d0:	ad1a      	add	r5, sp, #104	; 0x68
   b51d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51d4:	ac09      	add	r4, sp, #36	; 0x24
   b51d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51d8:	682b      	ldr	r3, [r5, #0]
   b51da:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b51dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b51de:	9302      	str	r3, [sp, #8]
   b51e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b51e2:	9301      	str	r3, [sp, #4]
   b51e4:	ab09      	add	r3, sp, #36	; 0x24
   b51e6:	9300      	str	r3, [sp, #0]
   b51e8:	4630      	mov	r0, r6
   b51ea:	ab04      	add	r3, sp, #16
   b51ec:	4662      	mov	r2, ip
   b51ee:	4639      	mov	r1, r7
   b51f0:	f002 fbb4 	bl	b795c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b51f4:	4630      	mov	r0, r6
   b51f6:	b00f      	add	sp, #60	; 0x3c
   b51f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b51fc:	b002      	add	sp, #8
   b51fe:	4770      	bx	lr

000b5200 <_GLOBAL__sub_I_argonName>:
   b5200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b5204:	4b91      	ldr	r3, [pc, #580]	; (b544c <_GLOBAL__sub_I_argonName+0x24c>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5206:	4d92      	ldr	r5, [pc, #584]	; (b5450 <_GLOBAL__sub_I_argonName+0x250>)
const BleUuid wattcharacteristicUuid(watt_c);
   b5208:	f8df b2e4 	ldr.w	fp, [pc, #740]	; b54f0 <_GLOBAL__sub_I_argonName+0x2f0>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b520c:	f8df a2e4 	ldr.w	sl, [pc, #740]	; b54f4 <_GLOBAL__sub_I_argonName+0x2f4>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b5210:	f8df 92e4 	ldr.w	r9, [pc, #740]	; b54f8 <_GLOBAL__sub_I_argonName+0x2f8>
   b5214:	f04f 0801 	mov.w	r8, #1
   b5218:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b521c:	4b8d      	ldr	r3, [pc, #564]	; (b5454 <_GLOBAL__sub_I_argonName+0x254>)
   b521e:	b093      	sub	sp, #76	; 0x4c
   b5220:	6819      	ldr	r1, [r3, #0]
   b5222:	4628      	mov	r0, r5
   b5224:	f001 fe06 	bl	b6e34 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b5228:	4b8b      	ldr	r3, [pc, #556]	; (b5458 <_GLOBAL__sub_I_argonName+0x258>)
   b522a:	4658      	mov	r0, fp
   b522c:	6819      	ldr	r1, [r3, #0]
   b522e:	f001 fe01 	bl	b6e34 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b5232:	4b8a      	ldr	r3, [pc, #552]	; (b545c <_GLOBAL__sub_I_argonName+0x25c>)
   b5234:	4650      	mov	r0, sl
   b5236:	6819      	ldr	r1, [r3, #0]
   b5238:	f001 fdfc 	bl	b6e34 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b523c:	4b88      	ldr	r3, [pc, #544]	; (b5460 <_GLOBAL__sub_I_argonName+0x260>)
   b523e:	4648      	mov	r0, r9
   b5240:	6819      	ldr	r1, [r3, #0]
   b5242:	f001 fdf7 	bl	b6e34 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b5246:	4b87      	ldr	r3, [pc, #540]	; (b5464 <_GLOBAL__sub_I_argonName+0x264>)
   b5248:	4887      	ldr	r0, [pc, #540]	; (b5468 <_GLOBAL__sub_I_argonName+0x268>)
   b524a:	6819      	ldr	r1, [r3, #0]
   b524c:	f001 fdf2 	bl	b6e34 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b5250:	4b86      	ldr	r3, [pc, #536]	; (b546c <_GLOBAL__sub_I_argonName+0x26c>)
   b5252:	4887      	ldr	r0, [pc, #540]	; (b5470 <_GLOBAL__sub_I_argonName+0x270>)
   b5254:	6819      	ldr	r1, [r3, #0]
   b5256:	f001 fded 	bl	b6e34 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b525a:	4b86      	ldr	r3, [pc, #536]	; (b5474 <_GLOBAL__sub_I_argonName+0x274>)
   b525c:	4886      	ldr	r0, [pc, #536]	; (b5478 <_GLOBAL__sub_I_argonName+0x278>)
   b525e:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5260:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b5262:	f001 fde7 	bl	b6e34 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5266:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b526a:	462e      	mov	r6, r5
   b526c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b526e:	2710      	movs	r7, #16
   b5270:	eb0d 0c07 	add.w	ip, sp, r7
   b5274:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5278:	6833      	ldr	r3, [r6, #0]
   b527a:	f8cc 3000 	str.w	r3, [ip]
   b527e:	f10b 0304 	add.w	r3, fp, #4
   b5282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5284:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5288:	f8db 3000 	ldr.w	r3, [fp]
   b528c:	497b      	ldr	r1, [pc, #492]	; (b547c <_GLOBAL__sub_I_argonName+0x27c>)
   b528e:	487c      	ldr	r0, [pc, #496]	; (b5480 <_GLOBAL__sub_I_argonName+0x280>)
   b5290:	463a      	mov	r2, r7
   b5292:	f7ff ff8d 	bl	b51b0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b5296:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b529a:	46ae      	mov	lr, r5
   b529c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b52a0:	eb0d 0c07 	add.w	ip, sp, r7
   b52a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b52a8:	6833      	ldr	r3, [r6, #0]
   b52aa:	f8cc 3000 	str.w	r3, [ip]
   b52ae:	f10a 0304 	add.w	r3, sl, #4
   b52b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b52b8:	f8da 3000 	ldr.w	r3, [sl]
   b52bc:	4971      	ldr	r1, [pc, #452]	; (b5484 <_GLOBAL__sub_I_argonName+0x284>)
   b52be:	4872      	ldr	r0, [pc, #456]	; (b5488 <_GLOBAL__sub_I_argonName+0x288>)
   b52c0:	463a      	mov	r2, r7
   b52c2:	f7ff ff75 	bl	b51b0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b52c6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b52ca:	46ae      	mov	lr, r5
   b52cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b52d0:	eb0d 0c07 	add.w	ip, sp, r7
   b52d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b52d8:	6833      	ldr	r3, [r6, #0]
   b52da:	f8cc 3000 	str.w	r3, [ip]
   b52de:	f109 0304 	add.w	r3, r9, #4
   b52e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52e4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b52e8:	f8d9 3000 	ldr.w	r3, [r9]
   b52ec:	4967      	ldr	r1, [pc, #412]	; (b548c <_GLOBAL__sub_I_argonName+0x28c>)
   b52ee:	4868      	ldr	r0, [pc, #416]	; (b5490 <_GLOBAL__sub_I_argonName+0x290>)
   b52f0:	463a      	mov	r2, r7
   b52f2:	f7ff ff5d 	bl	b51b0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b52f6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b52fa:	46ae      	mov	lr, r5
   b52fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5300:	eb0d 0c07 	add.w	ip, sp, r7
   b5304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5308:	6833      	ldr	r3, [r6, #0]
   b530a:	f8cc 3000 	str.w	r3, [ip]
   b530e:	4b56      	ldr	r3, [pc, #344]	; (b5468 <_GLOBAL__sub_I_argonName+0x268>)
   b5310:	3304      	adds	r3, #4
   b5312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5314:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5318:	4b53      	ldr	r3, [pc, #332]	; (b5468 <_GLOBAL__sub_I_argonName+0x268>)
   b531a:	495e      	ldr	r1, [pc, #376]	; (b5494 <_GLOBAL__sub_I_argonName+0x294>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	485e      	ldr	r0, [pc, #376]	; (b5498 <_GLOBAL__sub_I_argonName+0x298>)
   b5320:	463a      	mov	r2, r7
   b5322:	f7ff ff45 	bl	b51b0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b5326:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b532a:	46ae      	mov	lr, r5
   b532c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5330:	eb0d 0c07 	add.w	ip, sp, r7
   b5334:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5338:	6833      	ldr	r3, [r6, #0]
   b533a:	f8cc 3000 	str.w	r3, [ip]
   b533e:	4b4c      	ldr	r3, [pc, #304]	; (b5470 <_GLOBAL__sub_I_argonName+0x270>)
   b5340:	3304      	adds	r3, #4
   b5342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5344:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5348:	4b49      	ldr	r3, [pc, #292]	; (b5470 <_GLOBAL__sub_I_argonName+0x270>)
   b534a:	4954      	ldr	r1, [pc, #336]	; (b549c <_GLOBAL__sub_I_argonName+0x29c>)
   b534c:	681b      	ldr	r3, [r3, #0]
   b534e:	4854      	ldr	r0, [pc, #336]	; (b54a0 <_GLOBAL__sub_I_argonName+0x2a0>)
   b5350:	463a      	mov	r2, r7
   b5352:	f7ff ff2d 	bl	b51b0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b5356:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b535a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b535c:	eb0d 0c07 	add.w	ip, sp, r7
   b5360:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5364:	4d44      	ldr	r5, [pc, #272]	; (b5478 <_GLOBAL__sub_I_argonName+0x278>)
   b5366:	6833      	ldr	r3, [r6, #0]
   b5368:	f8cc 3000 	str.w	r3, [ip]
   b536c:	1d2b      	adds	r3, r5, #4
   b536e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5370:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5374:	463a      	mov	r2, r7
   b5376:	682b      	ldr	r3, [r5, #0]
   b5378:	494a      	ldr	r1, [pc, #296]	; (b54a4 <_GLOBAL__sub_I_argonName+0x2a4>)
   b537a:	484b      	ldr	r0, [pc, #300]	; (b54a8 <_GLOBAL__sub_I_argonName+0x2a8>)
} http_request_t;
   b537c:	4d4b      	ldr	r5, [pc, #300]	; (b54ac <_GLOBAL__sub_I_argonName+0x2ac>)
   b537e:	4e4c      	ldr	r6, [pc, #304]	; (b54b0 <_GLOBAL__sub_I_argonName+0x2b0>)
   b5380:	f7ff ff16 	bl	b51b0 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
TCPClient client;
   b5384:	484b      	ldr	r0, [pc, #300]	; (b54b4 <_GLOBAL__sub_I_argonName+0x2b4>)
   b5386:	f003 fed5 	bl	b9134 <_ZN9TCPClientC1Ev>
HttpClient http;
   b538a:	484b      	ldr	r0, [pc, #300]	; (b54b8 <_GLOBAL__sub_I_argonName+0x2b8>)
   b538c:	f000 fbf8 	bl	b5b80 <_ZN10HttpClientC1Ev>
   b5390:	4629      	mov	r1, r5
   b5392:	4630      	mov	r0, r6
   b5394:	f001 fa2b 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
   b5398:	19f0      	adds	r0, r6, r7
   b539a:	f003 fa5b 	bl	b8854 <_ZN9IPAddressC1Ev>
   b539e:	4629      	mov	r1, r5
   b53a0:	f106 0028 	add.w	r0, r6, #40	; 0x28
   b53a4:	f001 fa23 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
   b53a8:	4629      	mov	r1, r5
   b53aa:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   b53ae:	f001 fa1e 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
} http_response_t;
   b53b2:	4629      	mov	r1, r5
   b53b4:	4841      	ldr	r0, [pc, #260]	; (b54bc <_GLOBAL__sub_I_argonName+0x2bc>)
   b53b6:	f001 fa1a 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
uint8_t currentHour = Time.hour();
   b53ba:	f002 fe6f 	bl	b809c <_ZN9TimeClass4hourEv>
   b53be:	4b40      	ldr	r3, [pc, #256]	; (b54c0 <_GLOBAL__sub_I_argonName+0x2c0>)
String pricestoday_Json;
   b53c0:	4629      	mov	r1, r5
uint8_t currentHour = Time.hour();
   b53c2:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b53c4:	483f      	ldr	r0, [pc, #252]	; (b54c4 <_GLOBAL__sub_I_argonName+0x2c4>)
   b53c6:	f001 fa12 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b53ca:	4629      	mov	r1, r5
   b53cc:	483e      	ldr	r0, [pc, #248]	; (b54c8 <_GLOBAL__sub_I_argonName+0x2c8>)
   b53ce:	f001 fa0e 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b53d2:	4629      	mov	r1, r5
   b53d4:	483d      	ldr	r0, [pc, #244]	; (b54cc <_GLOBAL__sub_I_argonName+0x2cc>)
   b53d6:	f001 fa0a 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b53da:	4629      	mov	r1, r5
   b53dc:	483c      	ldr	r0, [pc, #240]	; (b54d0 <_GLOBAL__sub_I_argonName+0x2d0>)
   b53de:	f001 fa06 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b53e2:	4629      	mov	r1, r5
   b53e4:	483b      	ldr	r0, [pc, #236]	; (b54d4 <_GLOBAL__sub_I_argonName+0x2d4>)
   b53e6:	f001 fa02 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b53ea:	4b3b      	ldr	r3, [pc, #236]	; (b54d8 <_GLOBAL__sub_I_argonName+0x2d8>)
   b53ec:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53ee:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b53f0:	4b3a      	ldr	r3, [pc, #232]	; (b54dc <_GLOBAL__sub_I_argonName+0x2dc>)
   b53f2:	4a3b      	ldr	r2, [pc, #236]	; (b54e0 <_GLOBAL__sub_I_argonName+0x2e0>)
   b53f4:	601a      	str	r2, [r3, #0]
   b53f6:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b53fa:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53fe:	ae0c      	add	r6, sp, #48	; 0x30
   b5400:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5404:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5408:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b540c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5410:	e882 0003 	stmia.w	r2, {r0, r1}
   b5414:	4a33      	ldr	r2, [pc, #204]	; (b54e4 <_GLOBAL__sub_I_argonName+0x2e4>)
   b5416:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5418:	699a      	ldr	r2, [r3, #24]
   b541a:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b541c:	4a32      	ldr	r2, [pc, #200]	; (b54e8 <_GLOBAL__sub_I_argonName+0x2e8>)
   b541e:	619a      	str	r2, [r3, #24]
   b5420:	711c      	strb	r4, [r3, #4]
   b5422:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5424:	4a31      	ldr	r2, [pc, #196]	; (b54ec <_GLOBAL__sub_I_argonName+0x2ec>)
      __a = _GLIBCXX_MOVE(__b);
   b5426:	9410      	str	r4, [sp, #64]	; 0x40
   b5428:	f64e 2160 	movw	r1, #60000	; 0xea60
   b542c:	f103 0008 	add.w	r0, r3, #8
   b5430:	e9cd 8400 	strd	r8, r4, [sp]
   b5434:	f000 fe3c 	bl	b60b0 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5438:	4628      	mov	r0, r5
   b543a:	f7fe ffd7 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
SYSTEM_THREAD(ENABLED);
   b543e:	4621      	mov	r1, r4
   b5440:	4640      	mov	r0, r8
   b5442:	b013      	add	sp, #76	; 0x4c
   b5444:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b5448:	f000 bfa2 	b.w	b6390 <system_thread_set_state>
   b544c:	2003d418 	.word	0x2003d418
   b5450:	2003d3a0 	.word	0x2003d3a0
   b5454:	2003d15c 	.word	0x2003d15c
   b5458:	2003d160 	.word	0x2003d160
   b545c:	2003d128 	.word	0x2003d128
   b5460:	2003d120 	.word	0x2003d120
   b5464:	2003d124 	.word	0x2003d124
   b5468:	2003d3dc 	.word	0x2003d3dc
   b546c:	2003d12c 	.word	0x2003d12c
   b5470:	2003d3c8 	.word	0x2003d3c8
   b5474:	2003d130 	.word	0x2003d130
   b5478:	2003d404 	.word	0x2003d404
   b547c:	000bcaa6 	.word	0x000bcaa6
   b5480:	2003d374 	.word	0x2003d374
   b5484:	000bcaaf 	.word	0x000bcaaf
   b5488:	2003d364 	.word	0x2003d364
   b548c:	000bcabd 	.word	0x000bcabd
   b5490:	2003d354 	.word	0x2003d354
   b5494:	000bcac7 	.word	0x000bcac7
   b5498:	2003d35c 	.word	0x2003d35c
   b549c:	000bcad4 	.word	0x000bcad4
   b54a0:	2003d37c 	.word	0x2003d37c
   b54a4:	000bcade 	.word	0x000bcade
   b54a8:	2003d384 	.word	0x2003d384
   b54ac:	000bcc71 	.word	0x000bcc71
   b54b0:	2003dd28 	.word	0x2003dd28
   b54b4:	2003d488 	.word	0x2003d488
   b54b8:	2003d4b4 	.word	0x2003d4b4
   b54bc:	2003dd78 	.word	0x2003dd78
   b54c0:	2003d4b0 	.word	0x2003d4b0
   b54c4:	2003dcf8 	.word	0x2003dcf8
   b54c8:	2003dd08 	.word	0x2003dd08
   b54cc:	2003dd18 	.word	0x2003dd18
   b54d0:	2003e1ac 	.word	0x2003e1ac
   b54d4:	2003e1c0 	.word	0x2003e1c0
   b54d8:	000b41c1 	.word	0x000b41c1
   b54dc:	2003e18c 	.word	0x2003e18c
   b54e0:	000bcaf4 	.word	0x000bcaf4
   b54e4:	000b4167 	.word	0x000b4167
   b54e8:	000b417b 	.word	0x000b417b
   b54ec:	000b412d 	.word	0x000b412d
   b54f0:	2003d38c 	.word	0x2003d38c
   b54f4:	2003d3f0 	.word	0x2003d3f0
   b54f8:	2003d3b4 	.word	0x2003d3b4

000b54fc <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b54fc:	b570      	push	{r4, r5, r6, lr}
   b54fe:	4604      	mov	r4, r0
   b5500:	4605      	mov	r5, r0
   b5502:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5506:	4628      	mov	r0, r5
   b5508:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b550c:	f000 f815 	bl	b553a <_ZN12mDNSResolver8ResponseC1Ev>
   b5510:	42ae      	cmp	r6, r5
   b5512:	d1f8      	bne.n	b5506 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b5514:	2300      	movs	r3, #0
   b5516:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b551a:	4620      	mov	r0, r4
   b551c:	bd70      	pop	{r4, r5, r6, pc}

000b551e <_ZN9IPAddressaSImEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b551e:	b530      	push	{r4, r5, lr}
   b5520:	b087      	sub	sp, #28
   b5522:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5524:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5526:	4668      	mov	r0, sp
   b5528:	f003 f9b4 	bl	b8894 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b552c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b552e:	3404      	adds	r4, #4
   b5530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5532:	682b      	ldr	r3, [r5, #0]
   b5534:	7023      	strb	r3, [r4, #0]
    }
   b5536:	b007      	add	sp, #28
   b5538:	bd30      	pop	{r4, r5, pc}

000b553a <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b553a:	b538      	push	{r3, r4, r5, lr}
   b553c:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b5540:	4604      	mov	r4, r0
   b5542:	4628      	mov	r0, r5
   b5544:	f003 f986 	bl	b8854 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b5548:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b554a:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b554c:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b554e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b5552:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b5556:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b555a:	f04f 31ff 	mov.w	r1, #4294967295
   b555e:	f7ff ffde 	bl	b551e <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b5562:	4620      	mov	r0, r4
   b5564:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5568 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
#ifdef TEST
#include <stdlib.h>
#endif

namespace mDNSResolver {
  Cache cache;
   b5568:	4801      	ldr	r0, [pc, #4]	; (b5570 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b556a:	f7ff bfc7 	b.w	b54fc <_ZN12mDNSResolver5CacheC1Ev>
   b556e:	bf00      	nop
   b5570:	2003e1d0 	.word	0x2003e1d0

000b5574 <update_offset>:
    return newbuffer + p->offset;
}

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
   b5574:	b538      	push	{r3, r4, r5, lr}
    const unsigned char *buffer_pointer = NULL;
    if ((buffer == NULL) || (buffer->buffer == NULL))
   b5576:	4604      	mov	r4, r0
   b5578:	b138      	cbz	r0, b558a <update_offset+0x16>
   b557a:	6800      	ldr	r0, [r0, #0]
   b557c:	b128      	cbz	r0, b558a <update_offset+0x16>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
   b557e:	68a5      	ldr	r5, [r4, #8]

    buffer->offset += strlen((const char*)buffer_pointer);
   b5580:	4428      	add	r0, r5
   b5582:	f004 ff04 	bl	ba38e <strlen>
   b5586:	4428      	add	r0, r5
   b5588:	60a0      	str	r0, [r4, #8]
}
   b558a:	bd38      	pop	{r3, r4, r5, pc}

000b558c <ensure>:
{
   b558c:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   b558e:	4604      	mov	r4, r0
   b5590:	b1b8      	cbz	r0, b55c2 <ensure+0x36>
   b5592:	6805      	ldr	r5, [r0, #0]
   b5594:	b165      	cbz	r5, b55b0 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   b5596:	6843      	ldr	r3, [r0, #4]
   b5598:	b113      	cbz	r3, b55a0 <ensure+0x14>
   b559a:	6882      	ldr	r2, [r0, #8]
   b559c:	4293      	cmp	r3, r2
   b559e:	d910      	bls.n	b55c2 <ensure+0x36>
    if (needed > INT_MAX)
   b55a0:	2900      	cmp	r1, #0
   b55a2:	db0e      	blt.n	b55c2 <ensure+0x36>
    needed += p->offset + 1;
   b55a4:	68a2      	ldr	r2, [r4, #8]
   b55a6:	1c4e      	adds	r6, r1, #1
   b55a8:	4416      	add	r6, r2
    if (needed <= p->length)
   b55aa:	42b3      	cmp	r3, r6
   b55ac:	d302      	bcc.n	b55b4 <ensure+0x28>
        return p->buffer + p->offset;
   b55ae:	4415      	add	r5, r2
}
   b55b0:	4628      	mov	r0, r5
   b55b2:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   b55b4:	6923      	ldr	r3, [r4, #16]
   b55b6:	b923      	cbnz	r3, b55c2 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   b55b8:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   b55bc:	d303      	bcc.n	b55c6 <ensure+0x3a>
        if (needed <= INT_MAX)
   b55be:	2e00      	cmp	r6, #0
   b55c0:	da0f      	bge.n	b55e2 <ensure+0x56>
        return NULL;
   b55c2:	2500      	movs	r5, #0
   b55c4:	e7f4      	b.n	b55b0 <ensure+0x24>
        newsize = needed * 2;
   b55c6:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   b55c8:	6a23      	ldr	r3, [r4, #32]
   b55ca:	b16b      	cbz	r3, b55e8 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   b55cc:	4628      	mov	r0, r5
   b55ce:	4631      	mov	r1, r6
   b55d0:	4798      	blx	r3
        if (newbuffer == NULL)
   b55d2:	4605      	mov	r5, r0
   b55d4:	b9b0      	cbnz	r0, b5604 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   b55d6:	69e3      	ldr	r3, [r4, #28]
   b55d8:	6820      	ldr	r0, [r4, #0]
   b55da:	4798      	blx	r3
            p->buffer = NULL;
   b55dc:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   b55e0:	e7e6      	b.n	b55b0 <ensure+0x24>
            newsize = INT_MAX;
   b55e2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   b55e6:	e7ef      	b.n	b55c8 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   b55e8:	69a3      	ldr	r3, [r4, #24]
   b55ea:	4630      	mov	r0, r6
   b55ec:	4798      	blx	r3
        if (!newbuffer)
   b55ee:	4605      	mov	r5, r0
   b55f0:	2800      	cmp	r0, #0
   b55f2:	d0f0      	beq.n	b55d6 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   b55f4:	68a2      	ldr	r2, [r4, #8]
   b55f6:	6821      	ldr	r1, [r4, #0]
   b55f8:	3201      	adds	r2, #1
   b55fa:	f004 fe2a 	bl	ba252 <memcpy>
        p->hooks.deallocate(p->buffer);
   b55fe:	69e3      	ldr	r3, [r4, #28]
   b5600:	6820      	ldr	r0, [r4, #0]
   b5602:	4798      	blx	r3
    return newbuffer + p->offset;
   b5604:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   b5606:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   b560a:	441d      	add	r5, r3
   b560c:	e7d0      	b.n	b55b0 <ensure+0x24>
	...

000b5610 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   b5610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5614:	4606      	mov	r6, r0
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;

    if (output_buffer == NULL)
   b5616:	4608      	mov	r0, r1
   b5618:	b911      	cbnz	r1, b5620 <print_string_ptr+0x10>
    {
        return false;
   b561a:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   b561c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   b5620:	b336      	cbz	r6, b5670 <print_string_ptr+0x60>
   b5622:	4f44      	ldr	r7, [pc, #272]	; (b5734 <print_string_ptr+0x124>)
   b5624:	4631      	mov	r1, r6
    size_t escape_characters = 0;
   b5626:	f04f 0a00 	mov.w	sl, #0
   b562a:	2401      	movs	r4, #1
   b562c:	460d      	mov	r5, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   b562e:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5632:	bb3b      	cbnz	r3, b5684 <print_string_ptr+0x74>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   b5634:	1bad      	subs	r5, r5, r6
   b5636:	4455      	add	r5, sl
    output = ensure(output_buffer, output_length + sizeof("\"\""));
   b5638:	1ce9      	adds	r1, r5, #3
   b563a:	f7ff ffa7 	bl	b558c <ensure>
    if (output == NULL)
   b563e:	4607      	mov	r7, r0
   b5640:	2800      	cmp	r0, #0
   b5642:	d0ea      	beq.n	b561a <print_string_ptr+0xa>
    if (escape_characters == 0)
   b5644:	f04f 0b22 	mov.w	fp, #34	; 0x22
        memcpy(output + 1, input, output_length);
   b5648:	1c44      	adds	r4, r0, #1
        output[output_length + 1] = '\"';
   b564a:	f105 0901 	add.w	r9, r5, #1
        output[output_length + 2] = '\0';
   b564e:	f105 0802 	add.w	r8, r5, #2
        output[0] = '\"';
   b5652:	f880 b000 	strb.w	fp, [r0]
    if (escape_characters == 0)
   b5656:	f1ba 0f00 	cmp.w	sl, #0
   b565a:	d129      	bne.n	b56b0 <print_string_ptr+0xa0>
        memcpy(output + 1, input, output_length);
   b565c:	462a      	mov	r2, r5
   b565e:	4631      	mov	r1, r6
   b5660:	4620      	mov	r0, r4
   b5662:	f004 fdf6 	bl	ba252 <memcpy>
        output[output_length + 1] = '\"';
   b5666:	f807 b009 	strb.w	fp, [r7, r9]
        output[output_length + 2] = '\0';
   b566a:	f807 a008 	strb.w	sl, [r7, r8]
        return true;
   b566e:	e007      	b.n	b5680 <print_string_ptr+0x70>
        output = ensure(output_buffer, sizeof("\"\""));
   b5670:	2103      	movs	r1, #3
   b5672:	f7ff ff8b 	bl	b558c <ensure>
        if (output == NULL)
   b5676:	2800      	cmp	r0, #0
   b5678:	d0cf      	beq.n	b561a <print_string_ptr+0xa>
        strcpy((char*)output, "\"\"");
   b567a:	492f      	ldr	r1, [pc, #188]	; (b5738 <print_string_ptr+0x128>)
   b567c:	f004 fe61 	bl	ba342 <strcpy>
    return true;
   b5680:	2001      	movs	r0, #1
   b5682:	e7cb      	b.n	b561c <print_string_ptr+0xc>
        switch (*input_pointer)
   b5684:	2b22      	cmp	r3, #34	; 0x22
   b5686:	d80b      	bhi.n	b56a0 <print_string_ptr+0x90>
   b5688:	2b07      	cmp	r3, #7
   b568a:	d90c      	bls.n	b56a6 <print_string_ptr+0x96>
   b568c:	f1a3 0208 	sub.w	r2, r3, #8
   b5690:	b2d2      	uxtb	r2, r2
   b5692:	fa04 f202 	lsl.w	r2, r4, r2
   b5696:	423a      	tst	r2, r7
   b5698:	d005      	beq.n	b56a6 <print_string_ptr+0x96>
                escape_characters++;
   b569a:	f10a 0a01 	add.w	sl, sl, #1
                break;
   b569e:	e7c5      	b.n	b562c <print_string_ptr+0x1c>
        switch (*input_pointer)
   b56a0:	2b5c      	cmp	r3, #92	; 0x5c
   b56a2:	d1c3      	bne.n	b562c <print_string_ptr+0x1c>
   b56a4:	e7f9      	b.n	b569a <print_string_ptr+0x8a>
                if (*input_pointer < 32)
   b56a6:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   b56a8:	bf98      	it	ls
   b56aa:	f10a 0a05 	addls.w	sl, sl, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   b56ae:	e7bd      	b.n	b562c <print_string_ptr+0x1c>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b56b0:	f8df b088 	ldr.w	fp, [pc, #136]	; b573c <print_string_ptr+0x12c>
   b56b4:	3e01      	subs	r6, #1
            *output_pointer++ = '\\';
   b56b6:	255c      	movs	r5, #92	; 0x5c
                    *output_pointer = 't';
   b56b8:	f04f 0a74 	mov.w	sl, #116	; 0x74
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b56bc:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   b56c0:	b92b      	cbnz	r3, b56ce <print_string_ptr+0xbe>
    output[output_length + 1] = '\"';
   b56c2:	2222      	movs	r2, #34	; 0x22
   b56c4:	f807 2009 	strb.w	r2, [r7, r9]
    output[output_length + 2] = '\0';
   b56c8:	f807 3008 	strb.w	r3, [r7, r8]
   b56cc:	e7d8      	b.n	b5680 <print_string_ptr+0x70>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   b56ce:	2b1f      	cmp	r3, #31
   b56d0:	d907      	bls.n	b56e2 <print_string_ptr+0xd2>
   b56d2:	2b22      	cmp	r3, #34	; 0x22
   b56d4:	d005      	beq.n	b56e2 <print_string_ptr+0xd2>
   b56d6:	2b5c      	cmp	r3, #92	; 0x5c
   b56d8:	d003      	beq.n	b56e2 <print_string_ptr+0xd2>
            *output_pointer = *input_pointer;
   b56da:	7023      	strb	r3, [r4, #0]
   b56dc:	4620      	mov	r0, r4
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b56de:	1c44      	adds	r4, r0, #1
   b56e0:	e7ec      	b.n	b56bc <print_string_ptr+0xac>
            *output_pointer++ = '\\';
   b56e2:	4620      	mov	r0, r4
   b56e4:	f800 5b01 	strb.w	r5, [r0], #1
            switch (*input_pointer)
   b56e8:	7832      	ldrb	r2, [r6, #0]
   b56ea:	2a0d      	cmp	r2, #13
   b56ec:	d80a      	bhi.n	b5704 <print_string_ptr+0xf4>
   b56ee:	2a07      	cmp	r2, #7
   b56f0:	d91a      	bls.n	b5728 <print_string_ptr+0x118>
   b56f2:	f1a2 0308 	sub.w	r3, r2, #8
   b56f6:	2b05      	cmp	r3, #5
   b56f8:	d816      	bhi.n	b5728 <print_string_ptr+0x118>
   b56fa:	e8df f003 	tbb	[pc, r3]
   b56fe:	1209      	.short	0x1209
   b5700:	100c150e 	.word	0x100c150e
   b5704:	2a22      	cmp	r2, #34	; 0x22
   b5706:	d001      	beq.n	b570c <print_string_ptr+0xfc>
   b5708:	2a5c      	cmp	r2, #92	; 0x5c
   b570a:	d10d      	bne.n	b5728 <print_string_ptr+0x118>
                    *output_pointer = '\"';
   b570c:	7062      	strb	r2, [r4, #1]
                    break;
   b570e:	e7e6      	b.n	b56de <print_string_ptr+0xce>
                    *output_pointer = 'b';
   b5710:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 'f';
   b5712:	7063      	strb	r3, [r4, #1]
                    break;
   b5714:	e7e3      	b.n	b56de <print_string_ptr+0xce>
                    *output_pointer = 'f';
   b5716:	2366      	movs	r3, #102	; 0x66
   b5718:	e7fb      	b.n	b5712 <print_string_ptr+0x102>
                    *output_pointer = 'n';
   b571a:	236e      	movs	r3, #110	; 0x6e
   b571c:	e7f9      	b.n	b5712 <print_string_ptr+0x102>
                    *output_pointer = 'r';
   b571e:	2372      	movs	r3, #114	; 0x72
   b5720:	e7f7      	b.n	b5712 <print_string_ptr+0x102>
                    *output_pointer = 't';
   b5722:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   b5726:	e7da      	b.n	b56de <print_string_ptr+0xce>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b5728:	4659      	mov	r1, fp
   b572a:	f000 ff15 	bl	b6558 <sprintf>
                    output_pointer += 4;
   b572e:	1d60      	adds	r0, r4, #5
                    break;
   b5730:	e7d5      	b.n	b56de <print_string_ptr+0xce>
   b5732:	bf00      	nop
   b5734:	04000037 	.word	0x04000037
   b5738:	000bcc21 	.word	0x000bcc21
   b573c:	000bcc24 	.word	0x000bcc24

000b5740 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   b5740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5744:	460c      	mov	r4, r1
   b5746:	b08d      	sub	sp, #52	; 0x34
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   b5748:	4606      	mov	r6, r0
   b574a:	b908      	cbnz	r0, b5750 <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   b574c:	2500      	movs	r5, #0
   b574e:	e05d      	b.n	b580c <print_value+0xcc>
    if ((item == NULL) || (output_buffer == NULL))
   b5750:	2900      	cmp	r1, #0
   b5752:	d0fb      	beq.n	b574c <print_value+0xc>
    switch ((item->type) & 0xFF)
   b5754:	7b05      	ldrb	r5, [r0, #12]
   b5756:	2d10      	cmp	r5, #16
   b5758:	f000 80c1 	beq.w	b58de <print_value+0x19e>
   b575c:	dc18      	bgt.n	b5790 <print_value+0x50>
   b575e:	1e6b      	subs	r3, r5, #1
   b5760:	2b07      	cmp	r3, #7
   b5762:	d8f3      	bhi.n	b574c <print_value+0xc>
   b5764:	2b07      	cmp	r3, #7
   b5766:	d8f1      	bhi.n	b574c <print_value+0xc>
   b5768:	a201      	add	r2, pc, #4	; (adr r2, b5770 <print_value+0x30>)
   b576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   b576e:	bf00      	nop
   b5770:	000b57fb 	.word	0x000b57fb
   b5774:	000b5815 	.word	0x000b5815
   b5778:	000b574d 	.word	0x000b574d
   b577c:	000b57e5 	.word	0x000b57e5
   b5780:	000b574d 	.word	0x000b574d
   b5784:	000b574d 	.word	0x000b574d
   b5788:	000b574d 	.word	0x000b574d
   b578c:	000b5825 	.word	0x000b5825
   b5790:	2d40      	cmp	r5, #64	; 0x40
   b5792:	f000 80d3 	beq.w	b593c <print_value+0x1fc>
   b5796:	2d80      	cmp	r5, #128	; 0x80
   b5798:	f000 808d 	beq.w	b58b6 <print_value+0x176>
   b579c:	2d20      	cmp	r5, #32
   b579e:	d1d5      	bne.n	b574c <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   b57a0:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   b57a2:	2101      	movs	r1, #1
   b57a4:	4620      	mov	r0, r4
   b57a6:	f7ff fef1 	bl	b558c <ensure>
    if (output_pointer == NULL)
   b57aa:	2800      	cmp	r0, #0
   b57ac:	d0ce      	beq.n	b574c <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   b57ae:	235b      	movs	r3, #91	; 0x5b
   b57b0:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   b57b2:	68a3      	ldr	r3, [r4, #8]
   b57b4:	3301      	adds	r3, #1
   b57b6:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   b57b8:	68e3      	ldr	r3, [r4, #12]
   b57ba:	3301      	adds	r3, #1
   b57bc:	60e3      	str	r3, [r4, #12]
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   b57be:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   b57c0:	f04f 0800 	mov.w	r8, #0
    while (current_element != NULL)
   b57c4:	2e00      	cmp	r6, #0
   b57c6:	f040 8090 	bne.w	b58ea <print_value+0x1aa>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   b57ca:	2102      	movs	r1, #2
   b57cc:	4620      	mov	r0, r4
   b57ce:	f7ff fedd 	bl	b558c <ensure>
    if (output_pointer == NULL)
   b57d2:	2800      	cmp	r0, #0
   b57d4:	d0ba      	beq.n	b574c <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   b57d6:	235d      	movs	r3, #93	; 0x5d
   b57d8:	7003      	strb	r3, [r0, #0]
    *output_pointer = '\0';
   b57da:	7046      	strb	r6, [r0, #1]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   b57dc:	68e3      	ldr	r3, [r4, #12]
   b57de:	3b01      	subs	r3, #1
   b57e0:	60e3      	str	r3, [r4, #12]
   b57e2:	e008      	b.n	b57f6 <print_value+0xb6>
            output = ensure(output_buffer, 5);
   b57e4:	2105      	movs	r1, #5
   b57e6:	4620      	mov	r0, r4
   b57e8:	f7ff fed0 	bl	b558c <ensure>
            if (output == NULL)
   b57ec:	2800      	cmp	r0, #0
   b57ee:	d0ad      	beq.n	b574c <print_value+0xc>
            strcpy((char*)output, "null");
   b57f0:	49a1      	ldr	r1, [pc, #644]	; (b5a78 <print_value+0x338>)
            strcpy((char*)output, "true");
   b57f2:	f004 fda6 	bl	ba342 <strcpy>

    return true;
   b57f6:	2501      	movs	r5, #1
   b57f8:	e008      	b.n	b580c <print_value+0xcc>
            output = ensure(output_buffer, 6);
   b57fa:	2106      	movs	r1, #6
   b57fc:	4620      	mov	r0, r4
   b57fe:	f7ff fec5 	bl	b558c <ensure>
            if (output == NULL)
   b5802:	2800      	cmp	r0, #0
   b5804:	d0a2      	beq.n	b574c <print_value+0xc>
            strcpy((char*)output, "false");
   b5806:	499d      	ldr	r1, [pc, #628]	; (b5a7c <print_value+0x33c>)
   b5808:	f004 fd9b 	bl	ba342 <strcpy>
}
   b580c:	4628      	mov	r0, r5
   b580e:	b00d      	add	sp, #52	; 0x34
   b5810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            output = ensure(output_buffer, 5);
   b5814:	2105      	movs	r1, #5
   b5816:	4620      	mov	r0, r4
   b5818:	f7ff feb8 	bl	b558c <ensure>
            if (output == NULL)
   b581c:	2800      	cmp	r0, #0
   b581e:	d095      	beq.n	b574c <print_value+0xc>
            strcpy((char*)output, "true");
   b5820:	4997      	ldr	r1, [pc, #604]	; (b5a80 <print_value+0x340>)
   b5822:	e7e6      	b.n	b57f2 <print_value+0xb2>
    double d = item->valuedouble;
   b5824:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    if ((d * 0) != 0)
   b5828:	2200      	movs	r2, #0
   b582a:	2300      	movs	r3, #0
   b582c:	4630      	mov	r0, r6
   b582e:	4639      	mov	r1, r7
   b5830:	f004 f9e6 	bl	b9c00 <__aeabi_dmul>
   b5834:	2200      	movs	r2, #0
   b5836:	2300      	movs	r3, #0
   b5838:	f004 fc4a 	bl	ba0d0 <__aeabi_dcmpeq>
   b583c:	b9b0      	cbnz	r0, b586c <print_value+0x12c>
        length = sprintf((char*)number_buffer, "null");
   b583e:	498e      	ldr	r1, [pc, #568]	; (b5a78 <print_value+0x338>)
   b5840:	a805      	add	r0, sp, #20
   b5842:	f004 fd7e 	bl	ba342 <strcpy>
   b5846:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   b5848:	1c69      	adds	r1, r5, #1
   b584a:	4620      	mov	r0, r4
   b584c:	f7ff fe9e 	bl	b558c <ensure>
    if (output_pointer == NULL)
   b5850:	2800      	cmp	r0, #0
   b5852:	f43f af7b 	beq.w	b574c <print_value+0xc>
   b5856:	4602      	mov	r2, r0
   b5858:	ab05      	add	r3, sp, #20
   b585a:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   b585c:	4296      	cmp	r6, r2
   b585e:	d125      	bne.n	b58ac <print_value+0x16c>
    output_pointer[i] = '\0';
   b5860:	2300      	movs	r3, #0
   b5862:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   b5864:	68a0      	ldr	r0, [r4, #8]
   b5866:	4428      	add	r0, r5
   b5868:	60a0      	str	r0, [r4, #8]
    return true;
   b586a:	e7c4      	b.n	b57f6 <print_value+0xb6>
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b586c:	4985      	ldr	r1, [pc, #532]	; (b5a84 <print_value+0x344>)
   b586e:	4632      	mov	r2, r6
   b5870:	463b      	mov	r3, r7
   b5872:	a805      	add	r0, sp, #20
   b5874:	f000 fe70 	bl	b6558 <sprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b5878:	4983      	ldr	r1, [pc, #524]	; (b5a88 <print_value+0x348>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b587a:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b587c:	aa02      	add	r2, sp, #8
   b587e:	a805      	add	r0, sp, #20
   b5880:	f000 fe72 	bl	b6568 <sscanf>
   b5884:	2801      	cmp	r0, #1
   b5886:	d106      	bne.n	b5896 <print_value+0x156>
   b5888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b588c:	4630      	mov	r0, r6
   b588e:	4639      	mov	r1, r7
   b5890:	f004 fc1e 	bl	ba0d0 <__aeabi_dcmpeq>
   b5894:	b930      	cbnz	r0, b58a4 <print_value+0x164>
            length = sprintf((char*)number_buffer, "%1.17g", d);
   b5896:	497d      	ldr	r1, [pc, #500]	; (b5a8c <print_value+0x34c>)
   b5898:	4632      	mov	r2, r6
   b589a:	463b      	mov	r3, r7
   b589c:	a805      	add	r0, sp, #20
   b589e:	f000 fe5b 	bl	b6558 <sprintf>
   b58a2:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   b58a4:	2d19      	cmp	r5, #25
   b58a6:	f63f af51 	bhi.w	b574c <print_value+0xc>
   b58aa:	e7cd      	b.n	b5848 <print_value+0x108>
        if (number_buffer[i] == decimal_point)
   b58ac:	f813 1b01 	ldrb.w	r1, [r3], #1
            output_pointer[i] = '.';
   b58b0:	7011      	strb	r1, [r2, #0]
    for (i = 0; i < ((size_t)length); i++)
   b58b2:	3201      	adds	r2, #1
   b58b4:	e7d2      	b.n	b585c <print_value+0x11c>
            if (item->valuestring == NULL)
   b58b6:	6900      	ldr	r0, [r0, #16]
   b58b8:	2800      	cmp	r0, #0
   b58ba:	f43f af47 	beq.w	b574c <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   b58be:	f004 fd66 	bl	ba38e <strlen>
   b58c2:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   b58c4:	4611      	mov	r1, r2
   b58c6:	4620      	mov	r0, r4
   b58c8:	9201      	str	r2, [sp, #4]
   b58ca:	f7ff fe5f 	bl	b558c <ensure>
            if (output == NULL)
   b58ce:	2800      	cmp	r0, #0
   b58d0:	f43f af3c 	beq.w	b574c <print_value+0xc>
            memcpy(output, item->valuestring, raw_length);
   b58d4:	9a01      	ldr	r2, [sp, #4]
   b58d6:	6931      	ldr	r1, [r6, #16]
   b58d8:	f004 fcbb 	bl	ba252 <memcpy>
            return true;
   b58dc:	e78b      	b.n	b57f6 <print_value+0xb6>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b58de:	6900      	ldr	r0, [r0, #16]
}
   b58e0:	b00d      	add	sp, #52	; 0x34
   b58e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b58e6:	f7ff be93 	b.w	b5610 <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   b58ea:	4621      	mov	r1, r4
   b58ec:	4630      	mov	r0, r6
   b58ee:	f7ff ff27 	bl	b5740 <print_value>
   b58f2:	2800      	cmp	r0, #0
   b58f4:	f43f af2a 	beq.w	b574c <print_value+0xc>
        update_offset(output_buffer);
   b58f8:	4620      	mov	r0, r4
   b58fa:	f7ff fe3b 	bl	b5574 <update_offset>
        if (current_element->next)
   b58fe:	6833      	ldr	r3, [r6, #0]
   b5900:	b1bb      	cbz	r3, b5932 <print_value+0x1f2>
            length = (size_t) (output_buffer->format ? 2 : 1);
   b5902:	6963      	ldr	r3, [r4, #20]
   b5904:	2b00      	cmp	r3, #0
   b5906:	bf14      	ite	ne
   b5908:	f04f 0902 	movne.w	r9, #2
   b590c:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   b5910:	f109 0101 	add.w	r1, r9, #1
   b5914:	4620      	mov	r0, r4
   b5916:	f7ff fe39 	bl	b558c <ensure>
            if (output_pointer == NULL)
   b591a:	2800      	cmp	r0, #0
   b591c:	f43f af16 	beq.w	b574c <print_value+0xc>
            *output_pointer++ = ',';
   b5920:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   b5922:	6963      	ldr	r3, [r4, #20]
   b5924:	b93b      	cbnz	r3, b5936 <print_value+0x1f6>
            *output_pointer++ = ',';
   b5926:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   b5928:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   b592c:	68a3      	ldr	r3, [r4, #8]
   b592e:	444b      	add	r3, r9
   b5930:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   b5932:	6836      	ldr	r6, [r6, #0]
   b5934:	e746      	b.n	b57c4 <print_value+0x84>
                *output_pointer++ = ' ';
   b5936:	1c83      	adds	r3, r0, #2
   b5938:	7045      	strb	r5, [r0, #1]
   b593a:	e7f5      	b.n	b5928 <print_value+0x1e8>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   b593c:	694b      	ldr	r3, [r1, #20]
   b593e:	6885      	ldr	r5, [r0, #8]
   b5940:	2b00      	cmp	r3, #0
   b5942:	bf14      	ite	ne
   b5944:	2702      	movne	r7, #2
   b5946:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   b5948:	1c79      	adds	r1, r7, #1
   b594a:	4620      	mov	r0, r4
   b594c:	f7ff fe1e 	bl	b558c <ensure>
    if (output_pointer == NULL)
   b5950:	2800      	cmp	r0, #0
   b5952:	f43f aefb 	beq.w	b574c <print_value+0xc>
    *output_pointer++ = '{';
   b5956:	237b      	movs	r3, #123	; 0x7b
   b5958:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   b595a:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   b595c:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   b595e:	3201      	adds	r2, #1
   b5960:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   b5962:	b10b      	cbz	r3, b5968 <print_value+0x228>
        *output_pointer++ = '\n';
   b5964:	230a      	movs	r3, #10
   b5966:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   b5968:	68a3      	ldr	r3, [r4, #8]
   b596a:	443b      	add	r3, r7
   b596c:	60a3      	str	r3, [r4, #8]
                *output_pointer++ = '\t';
   b596e:	2609      	movs	r6, #9
        *output_pointer++ = ':';
   b5970:	273a      	movs	r7, #58	; 0x3a
        if (output_buffer->format)
   b5972:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   b5974:	b995      	cbnz	r5, b599c <print_value+0x25c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b5976:	2b00      	cmp	r3, #0
   b5978:	d070      	beq.n	b5a5c <print_value+0x31c>
   b597a:	68e1      	ldr	r1, [r4, #12]
   b597c:	3101      	adds	r1, #1
   b597e:	4620      	mov	r0, r4
   b5980:	f7ff fe04 	bl	b558c <ensure>
    if (output_pointer == NULL)
   b5984:	2800      	cmp	r0, #0
   b5986:	f43f aee1 	beq.w	b574c <print_value+0xc>
    if (output_buffer->format)
   b598a:	6963      	ldr	r3, [r4, #20]
   b598c:	2b00      	cmp	r3, #0
   b598e:	d16f      	bne.n	b5a70 <print_value+0x330>
   b5990:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   b5992:	227d      	movs	r2, #125	; 0x7d
   b5994:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   b5996:	2200      	movs	r2, #0
   b5998:	705a      	strb	r2, [r3, #1]
   b599a:	e71f      	b.n	b57dc <print_value+0x9c>
        if (output_buffer->format)
   b599c:	b173      	cbz	r3, b59bc <print_value+0x27c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   b599e:	68e1      	ldr	r1, [r4, #12]
   b59a0:	4620      	mov	r0, r4
   b59a2:	f7ff fdf3 	bl	b558c <ensure>
            if (output_pointer == NULL)
   b59a6:	2800      	cmp	r0, #0
   b59a8:	f43f aed0 	beq.w	b574c <print_value+0xc>
   b59ac:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   b59ae:	68e1      	ldr	r1, [r4, #12]
   b59b0:	1a13      	subs	r3, r2, r0
   b59b2:	4299      	cmp	r1, r3
   b59b4:	d84f      	bhi.n	b5a56 <print_value+0x316>
            output_buffer->offset += output_buffer->depth;
   b59b6:	68a3      	ldr	r3, [r4, #8]
   b59b8:	440b      	add	r3, r1
   b59ba:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   b59bc:	6a28      	ldr	r0, [r5, #32]
   b59be:	4621      	mov	r1, r4
   b59c0:	f7ff fe26 	bl	b5610 <print_string_ptr>
   b59c4:	2800      	cmp	r0, #0
   b59c6:	f43f aec1 	beq.w	b574c <print_value+0xc>
        update_offset(output_buffer);
   b59ca:	4620      	mov	r0, r4
   b59cc:	f7ff fdd2 	bl	b5574 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   b59d0:	6963      	ldr	r3, [r4, #20]
   b59d2:	2b00      	cmp	r3, #0
   b59d4:	bf14      	ite	ne
   b59d6:	f04f 0802 	movne.w	r8, #2
   b59da:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   b59de:	4641      	mov	r1, r8
   b59e0:	4620      	mov	r0, r4
   b59e2:	f7ff fdd3 	bl	b558c <ensure>
        if (output_pointer == NULL)
   b59e6:	2800      	cmp	r0, #0
   b59e8:	f43f aeb0 	beq.w	b574c <print_value+0xc>
        *output_pointer++ = ':';
   b59ec:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   b59ee:	6963      	ldr	r3, [r4, #20]
   b59f0:	b103      	cbz	r3, b59f4 <print_value+0x2b4>
            *output_pointer++ = '\t';
   b59f2:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   b59f4:	68a3      	ldr	r3, [r4, #8]
   b59f6:	4443      	add	r3, r8
   b59f8:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   b59fa:	4621      	mov	r1, r4
   b59fc:	4628      	mov	r0, r5
   b59fe:	f7ff fe9f 	bl	b5740 <print_value>
   b5a02:	2800      	cmp	r0, #0
   b5a04:	f43f aea2 	beq.w	b574c <print_value+0xc>
        update_offset(output_buffer);
   b5a08:	4620      	mov	r0, r4
   b5a0a:	f7ff fdb3 	bl	b5574 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   b5a0e:	682b      	ldr	r3, [r5, #0]
   b5a10:	6962      	ldr	r2, [r4, #20]
   b5a12:	f1b3 0800 	subs.w	r8, r3, #0
   b5a16:	bf18      	it	ne
   b5a18:	f04f 0801 	movne.w	r8, #1
   b5a1c:	2a00      	cmp	r2, #0
   b5a1e:	bf18      	it	ne
   b5a20:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   b5a24:	f108 0101 	add.w	r1, r8, #1
   b5a28:	4620      	mov	r0, r4
   b5a2a:	f7ff fdaf 	bl	b558c <ensure>
        if (output_pointer == NULL)
   b5a2e:	2800      	cmp	r0, #0
   b5a30:	f43f ae8c 	beq.w	b574c <print_value+0xc>
        if (current_item->next)
   b5a34:	682b      	ldr	r3, [r5, #0]
   b5a36:	b113      	cbz	r3, b5a3e <print_value+0x2fe>
            *output_pointer++ = ',';
   b5a38:	232c      	movs	r3, #44	; 0x2c
   b5a3a:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   b5a3e:	6963      	ldr	r3, [r4, #20]
   b5a40:	b113      	cbz	r3, b5a48 <print_value+0x308>
            *output_pointer++ = '\n';
   b5a42:	230a      	movs	r3, #10
   b5a44:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   b5a48:	2300      	movs	r3, #0
   b5a4a:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   b5a4c:	68a3      	ldr	r3, [r4, #8]
   b5a4e:	4443      	add	r3, r8
   b5a50:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   b5a52:	682d      	ldr	r5, [r5, #0]
   b5a54:	e78d      	b.n	b5972 <print_value+0x232>
                *output_pointer++ = '\t';
   b5a56:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   b5a5a:	e7a8      	b.n	b59ae <print_value+0x26e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b5a5c:	2102      	movs	r1, #2
   b5a5e:	e78e      	b.n	b597e <print_value+0x23e>
            *output_pointer++ = '\t';
   b5a60:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   b5a64:	68e2      	ldr	r2, [r4, #12]
   b5a66:	1a19      	subs	r1, r3, r0
   b5a68:	3a01      	subs	r2, #1
   b5a6a:	4291      	cmp	r1, r2
   b5a6c:	d3f8      	bcc.n	b5a60 <print_value+0x320>
   b5a6e:	e790      	b.n	b5992 <print_value+0x252>
   b5a70:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   b5a72:	2509      	movs	r5, #9
   b5a74:	e7f6      	b.n	b5a64 <print_value+0x324>
   b5a76:	bf00      	nop
   b5a78:	000bcc2a 	.word	0x000bcc2a
   b5a7c:	000bcce5 	.word	0x000bcce5
   b5a80:	000bcc2f 	.word	0x000bcc2f
   b5a84:	000bcc34 	.word	0x000bcc34
   b5a88:	000bcc3b 	.word	0x000bcc3b
   b5a8c:	000bcc3f 	.word	0x000bcc3f

000b5a90 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5a90:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5a92:	4d23      	ldr	r5, [pc, #140]	; (b5b20 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5a94:	b08a      	sub	sp, #40	; 0x28
   b5a96:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   b5a98:	2224      	movs	r2, #36	; 0x24
   b5a9a:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5a9c:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   b5a9e:	a801      	add	r0, sp, #4
   b5aa0:	f004 fbff 	bl	ba2a2 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5aa4:	682b      	ldr	r3, [r5, #0]
   b5aa6:	f44f 7080 	mov.w	r0, #256	; 0x100
   b5aaa:	4798      	blx	r3
    buffer->length = default_buffer_size;
   b5aac:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5ab0:	4603      	mov	r3, r0
   b5ab2:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   b5ab4:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   b5ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    buffer->format = format;
   b5aba:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   b5abc:	ae0a      	add	r6, sp, #40	; 0x28
   b5abe:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   b5ac2:	b17b      	cbz	r3, b5ae4 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   b5ac4:	a901      	add	r1, sp, #4
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	f7ff fe3a 	bl	b5740 <print_value>
   b5acc:	b150      	cbz	r0, b5ae4 <print.constprop.0+0x54>
    update_offset(buffer);
   b5ace:	a801      	add	r0, sp, #4
   b5ad0:	f7ff fd50 	bl	b5574 <update_offset>
    if (hooks->reallocate != NULL)
   b5ad4:	68ae      	ldr	r6, [r5, #8]
   b5ad6:	9903      	ldr	r1, [sp, #12]
   b5ad8:	b15e      	cbz	r6, b5af2 <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   b5ada:	9801      	ldr	r0, [sp, #4]
   b5adc:	3101      	adds	r1, #1
   b5ade:	47b0      	blx	r6
        if (printed == NULL) {
   b5ae0:	4604      	mov	r4, r0
   b5ae2:	b9d0      	cbnz	r0, b5b1a <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   b5ae4:	9c01      	ldr	r4, [sp, #4]
   b5ae6:	b1c4      	cbz	r4, b5b1a <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   b5ae8:	4620      	mov	r0, r4
   b5aea:	686b      	ldr	r3, [r5, #4]
   b5aec:	4798      	blx	r3
    return NULL;
   b5aee:	2400      	movs	r4, #0
   b5af0:	e013      	b.n	b5b1a <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   b5af2:	682b      	ldr	r3, [r5, #0]
   b5af4:	1c48      	adds	r0, r1, #1
   b5af6:	4798      	blx	r3
        if (printed == NULL)
   b5af8:	4604      	mov	r4, r0
   b5afa:	2800      	cmp	r0, #0
   b5afc:	d0f2      	beq.n	b5ae4 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   b5afe:	9a03      	ldr	r2, [sp, #12]
   b5b00:	9b02      	ldr	r3, [sp, #8]
   b5b02:	9901      	ldr	r1, [sp, #4]
   b5b04:	3201      	adds	r2, #1
   b5b06:	429a      	cmp	r2, r3
   b5b08:	bf28      	it	cs
   b5b0a:	461a      	movcs	r2, r3
   b5b0c:	f004 fba1 	bl	ba252 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   b5b10:	9b03      	ldr	r3, [sp, #12]
   b5b12:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   b5b14:	9801      	ldr	r0, [sp, #4]
   b5b16:	686b      	ldr	r3, [r5, #4]
   b5b18:	4798      	blx	r3
}
   b5b1a:	4620      	mov	r0, r4
   b5b1c:	b00a      	add	sp, #40	; 0x28
   b5b1e:	bd70      	pop	{r4, r5, r6, pc}
   b5b20:	2003d164 	.word	0x2003d164

000b5b24 <cJSON_Delete>:
{
   b5b24:	b570      	push	{r4, r5, r6, lr}
   b5b26:	4d10      	ldr	r5, [pc, #64]	; (b5b68 <cJSON_Delete+0x44>)
   b5b28:	4604      	mov	r4, r0
    while (item != NULL)
   b5b2a:	b904      	cbnz	r4, b5b2e <cJSON_Delete+0xa>
}
   b5b2c:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b5b2e:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   b5b30:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b5b32:	05d9      	lsls	r1, r3, #23
   b5b34:	d403      	bmi.n	b5b3e <cJSON_Delete+0x1a>
   b5b36:	68a0      	ldr	r0, [r4, #8]
   b5b38:	b968      	cbnz	r0, b5b56 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b5b3a:	6920      	ldr	r0, [r4, #16]
   b5b3c:	b988      	cbnz	r0, b5b62 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b5b3e:	68e3      	ldr	r3, [r4, #12]
   b5b40:	059b      	lsls	r3, r3, #22
   b5b42:	d403      	bmi.n	b5b4c <cJSON_Delete+0x28>
   b5b44:	6a20      	ldr	r0, [r4, #32]
   b5b46:	b108      	cbz	r0, b5b4c <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   b5b48:	686b      	ldr	r3, [r5, #4]
   b5b4a:	4798      	blx	r3
        global_hooks.deallocate(item);
   b5b4c:	4620      	mov	r0, r4
   b5b4e:	686b      	ldr	r3, [r5, #4]
   b5b50:	4798      	blx	r3
        item = next;
   b5b52:	4634      	mov	r4, r6
   b5b54:	e7e9      	b.n	b5b2a <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   b5b56:	f7ff ffe5 	bl	b5b24 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b5b5a:	68e3      	ldr	r3, [r4, #12]
   b5b5c:	05da      	lsls	r2, r3, #23
   b5b5e:	d5ec      	bpl.n	b5b3a <cJSON_Delete+0x16>
   b5b60:	e7ed      	b.n	b5b3e <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   b5b62:	686b      	ldr	r3, [r5, #4]
   b5b64:	4798      	blx	r3
   b5b66:	e7ea      	b.n	b5b3e <cJSON_Delete+0x1a>
   b5b68:	2003d164 	.word	0x2003d164

000b5b6c <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   b5b6c:	2100      	movs	r1, #0
   b5b6e:	f7ff bf8f 	b.w	b5a90 <print.constprop.0>
	...

000b5b74 <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   b5b74:	4b01      	ldr	r3, [pc, #4]	; (b5b7c <cJSON_free+0x8>)
   b5b76:	685b      	ldr	r3, [r3, #4]
   b5b78:	4718      	bx	r3
   b5b7a:	bf00      	nop
   b5b7c:	2003d164 	.word	0x2003d164

000b5b80 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b5b80:	b510      	push	{r4, lr}
   b5b82:	4604      	mov	r4, r0
   b5b84:	f003 fad6 	bl	b9134 <_ZN9TCPClientC1Ev>
{

}
   b5b88:	4620      	mov	r0, r4
   b5b8a:	bd10      	pop	{r4, pc}

000b5b8c <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5b8c:	b538      	push	{r3, r4, r5, lr}
   b5b8e:	4604      	mov	r4, r0
   b5b90:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b5b92:	f002 f973 	bl	b7e7c <_ZN5Print5printEPKc>
    client.print(": ");
   b5b96:	4905      	ldr	r1, [pc, #20]	; (b5bac <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b5b98:	4620      	mov	r0, r4
   b5b9a:	f002 f96f 	bl	b7e7c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b5b9e:	4629      	mov	r1, r5
   b5ba0:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b5ba6:	f002 b97c 	b.w	b7ea2 <_ZN5Print7printlnEPKc>
   b5baa:	bf00      	nop
   b5bac:	000bc761 	.word	0x000bc761

000b5bb0 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5bb0:	b538      	push	{r3, r4, r5, lr}
   b5bb2:	4605      	mov	r5, r0
   b5bb4:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b5bb6:	f002 f961 	bl	b7e7c <_ZN5Print5printEPKc>
    client.print(": ");
   b5bba:	490b      	ldr	r1, [pc, #44]	; (b5be8 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b5bbc:	4628      	mov	r0, r5
   b5bbe:	f002 f95d 	bl	b7e7c <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b5bc2:	2c00      	cmp	r4, #0
   b5bc4:	da0d      	bge.n	b5be2 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b5bc6:	212d      	movs	r1, #45	; 0x2d
   b5bc8:	4628      	mov	r0, r5
   b5bca:	f002 f95b 	bl	b7e84 <_ZN5Print5printEc>
            val = -n;
   b5bce:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5bd0:	4628      	mov	r0, r5
   b5bd2:	220a      	movs	r2, #10
   b5bd4:	f002 f96f 	bl	b7eb6 <_ZN5Print11printNumberEmh>
        n += println();
   b5bd8:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5bde:	f002 b954 	b.w	b7e8a <_ZN5Print7printlnEv>
            val = n;
   b5be2:	4621      	mov	r1, r4
   b5be4:	e7f4      	b.n	b5bd0 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b5be6:	bf00      	nop
   b5be8:	000bc761 	.word	0x000bc761

000b5bec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5bf0:	460e      	mov	r6, r1
   b5bf2:	b091      	sub	sp, #68	; 0x44
   b5bf4:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5bf6:	f04f 33ff 	mov.w	r3, #4294967295
   b5bfa:	6013      	str	r3, [r2, #0]
{
   b5bfc:	4604      	mov	r4, r0
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5bfe:	2100      	movs	r1, #0
   b5c00:	4630      	mov	r0, r6
   b5c02:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5c06:	4617      	mov	r7, r2
   b5c08:	f000 fe7b 	bl	b6902 <_ZNK6String6equalsEPKc>
   b5c0c:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5c10:	4603      	mov	r3, r0
   b5c12:	b998      	cbnz	r0, b5c3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5c14:	f1be 0f00 	cmp.w	lr, #0
   b5c18:	bf14      	ite	ne
   b5c1a:	4672      	movne	r2, lr
   b5c1c:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5c1e:	6831      	ldr	r1, [r6, #0]
   b5c20:	b292      	uxth	r2, r2
   b5c22:	4620      	mov	r0, r4
   b5c24:	f003 f886 	bl	b8d34 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5c28:	1e05      	subs	r5, r0, #0
   b5c2a:	bf18      	it	ne
   b5c2c:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b5c2e:	b9c5      	cbnz	r5, b5c62 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b5c30:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5c32:	b011      	add	sp, #68	; 0x44
   b5c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5c38:	f003 ba32 	b.w	b90a0 <_ZN9TCPClient4stopEv>
class IPAddress : public Printable {
   b5c3c:	4b75      	ldr	r3, [pc, #468]	; (b5e14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   b5c3e:	930a      	str	r3, [sp, #40]	; 0x28
   b5c40:	f106 0c14 	add.w	ip, r6, #20
   b5c44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c48:	ad0b      	add	r5, sp, #44	; 0x2c
   b5c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5c4c:	f8dc 3000 	ldr.w	r3, [ip]
   b5c50:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5c52:	fa1f f28e 	uxth.w	r2, lr
   b5c56:	2300      	movs	r3, #0
   b5c58:	a90a      	add	r1, sp, #40	; 0x28
   b5c5a:	4620      	mov	r0, r4
   b5c5c:	f003 f94a 	bl	b8ef4 <_ZN9TCPClient7connectE9IPAddresstm>
   b5c60:	e7e2      	b.n	b5c28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b5c62:	4649      	mov	r1, r9
   b5c64:	4620      	mov	r0, r4
   b5c66:	f002 f909 	bl	b7e7c <_ZN5Print5printEPKc>
    client.print(" ");
   b5c6a:	496b      	ldr	r1, [pc, #428]	; (b5e18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b5c6c:	4620      	mov	r0, r4
   b5c6e:	f002 f905 	bl	b7e7c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5c72:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5c74:	4620      	mov	r0, r4
   b5c76:	f002 f901 	bl	b7e7c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5c7a:	4968      	ldr	r1, [pc, #416]	; (b5e1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	f002 f8fd 	bl	b7e7c <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5c82:	4967      	ldr	r1, [pc, #412]	; (b5e20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b5c84:	4a67      	ldr	r2, [pc, #412]	; (b5e24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b5c86:	4620      	mov	r0, r4
   b5c88:	f7ff ff80 	bl	b5b8c <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5c8c:	2100      	movs	r1, #0
   b5c8e:	4630      	mov	r0, r6
   b5c90:	f000 fe37 	bl	b6902 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5c94:	b920      	cbnz	r0, b5ca0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5c96:	6832      	ldr	r2, [r6, #0]
   b5c98:	4963      	ldr	r1, [pc, #396]	; (b5e28 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b5c9a:	4620      	mov	r0, r4
   b5c9c:	f7ff ff76 	bl	b5b8c <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5ca0:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5ca4:	2100      	movs	r1, #0
   b5ca6:	4650      	mov	r0, sl
   b5ca8:	f000 fe2b 	bl	b6902 <_ZNK6String6equalsEPKc>
   b5cac:	b928      	cbnz	r0, b5cba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b5cae:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5cb0:	495e      	ldr	r1, [pc, #376]	; (b5e2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	f7ff ff7c 	bl	b5bb0 <_ZN10HttpClient10sendHeaderEPKci>
   b5cb8:	e006      	b.n	b5cc8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5cba:	495d      	ldr	r1, [pc, #372]	; (b5e30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b5cbc:	4648      	mov	r0, r9
   b5cbe:	f004 fb36 	bl	ba32e <strcmp>
   b5cc2:	4602      	mov	r2, r0
   b5cc4:	2800      	cmp	r0, #0
   b5cc6:	d0f3      	beq.n	b5cb0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b5cc8:	f1b8 0f00 	cmp.w	r8, #0
   b5ccc:	d00e      	beq.n	b5cec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b5cce:	f8d8 1000 	ldr.w	r1, [r8]
   b5cd2:	b159      	cbz	r1, b5cec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b5cd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b5cd8:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b5cda:	b122      	cbz	r2, b5ce6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b5cdc:	f7ff ff56 	bl	b5b8c <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5ce0:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b5ce4:	e7f3      	b.n	b5cce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b5ce6:	f002 f8dc 	bl	b7ea2 <_ZN5Print7printlnEPKc>
}
   b5cea:	e7f9      	b.n	b5ce0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b5cec:	4620      	mov	r0, r4
   b5cee:	f002 f8cc 	bl	b7e8a <_ZN5Print7printlnEv>
    client.flush();
   b5cf2:	4620      	mov	r0, r4
   b5cf4:	f002 ffa2 	bl	b8c3c <_ZN9TCPClient5flushEv>
   b5cf8:	2100      	movs	r1, #0
   b5cfa:	4650      	mov	r0, sl
   b5cfc:	f000 fe01 	bl	b6902 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5d00:	b918      	cbnz	r0, b5d0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b5d02:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5d04:	4620      	mov	r0, r4
   b5d06:	f002 f8cc 	bl	b7ea2 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5d0a:	f104 0a1c 	add.w	sl, r4, #28
   b5d0e:	f640 0224 	movw	r2, #2084	; 0x824
   b5d12:	2100      	movs	r1, #0
   b5d14:	4650      	mov	r0, sl
   b5d16:	f004 fac4 	bl	ba2a2 <memset>
   b5d1a:	f000 f917 	bl	b5f4c <HAL_Timer_Get_Milli_Seconds>
   b5d1e:	9001      	str	r0, [sp, #4]
   b5d20:	f000 f914 	bl	b5f4c <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b5d24:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b5d28:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b5d2a:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b5d2e:	4620      	mov	r0, r4
   b5d30:	f003 f95c 	bl	b8fec <_ZN9TCPClient9availableEv>
   b5d34:	b1d8      	cbz	r0, b5d6e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
   b5d36:	4620      	mov	r0, r4
   b5d38:	f002 ff66 	bl	b8c08 <_ZN9TCPClient4readEv>
   b5d3c:	4681      	mov	r9, r0
   b5d3e:	f000 f905 	bl	b5f4c <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5d42:	f640 0322 	movw	r3, #2082	; 0x822
   b5d46:	429e      	cmp	r6, r3
   b5d48:	9001      	str	r0, [sp, #4]
   b5d4a:	d804      	bhi.n	b5d56 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b5d4c:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b5d4e:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b5d52:	3601      	adds	r6, #1
        while (client.available()) {
   b5d54:	e7eb      	b.n	b5d2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b5d56:	f640 0323 	movw	r3, #2083	; 0x823
   b5d5a:	429e      	cmp	r6, r3
   b5d5c:	d1f9      	bne.n	b5d52 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5d5e:	2300      	movs	r3, #0
   b5d60:	f884 383f 	strb.w	r3, [r4, #2111]	; 0x83f
                client.stop();
   b5d64:	4620      	mov	r0, r4
   b5d66:	f003 f99b 	bl	b90a0 <_ZN9TCPClient4stopEv>
                error = true;
   b5d6a:	46a8      	mov	r8, r5
   b5d6c:	e7f1      	b.n	b5d52 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5d6e:	19a3      	adds	r3, r4, r6
   b5d70:	7718      	strb	r0, [r3, #28]
   b5d72:	f000 f8eb 	bl	b5f4c <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b5d76:	9b01      	ldr	r3, [sp, #4]
   b5d78:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b5d7c:	f1b8 0f00 	cmp.w	r8, #0
   b5d80:	d104      	bne.n	b5d8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
   b5d82:	45d9      	cmp	r9, fp
   b5d84:	d802      	bhi.n	b5d8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
   b5d86:	20c8      	movs	r0, #200	; 0xc8
   b5d88:	f002 f9d6 	bl	b8138 <delay>
    } while (client.connected() && !timeout && !error);
   b5d8c:	4620      	mov	r0, r4
   b5d8e:	f003 f84f 	bl	b8e30 <_ZN9TCPClient9connectedEv>
   b5d92:	b120      	cbz	r0, b5d9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b5d94:	45d9      	cmp	r9, fp
   b5d96:	d802      	bhi.n	b5d9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b5d98:	f1b8 0f00 	cmp.w	r8, #0
   b5d9c:	d0c7      	beq.n	b5d2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b5d9e:	4620      	mov	r0, r4
   b5da0:	f003 f97e 	bl	b90a0 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b5da4:	4651      	mov	r1, sl
   b5da6:	a802      	add	r0, sp, #8
   b5da8:	f000 fd21 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b5dac:	230c      	movs	r3, #12
   b5dae:	2209      	movs	r2, #9
   b5db0:	a902      	add	r1, sp, #8
   b5db2:	a806      	add	r0, sp, #24
   b5db4:	f000 fdca 	bl	b694c <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b5db8:	491e      	ldr	r1, [pc, #120]	; (b5e34 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b5dba:	a80a      	add	r0, sp, #40	; 0x28
   b5dbc:	f000 fd17 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
   b5dc0:	a90a      	add	r1, sp, #40	; 0x28
   b5dc2:	a802      	add	r0, sp, #8
   b5dc4:	f000 fdbe 	bl	b6944 <_ZNK6String7indexOfERKS_>
   b5dc8:	4604      	mov	r4, r0
   b5dca:	a80a      	add	r0, sp, #40	; 0x28
   b5dcc:	f000 fcc4 	bl	b6758 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b5dd0:	1c63      	adds	r3, r4, #1
   b5dd2:	d108      	bne.n	b5de6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
    String statusCode = raw_response.substring(9,12);
   b5dd4:	a806      	add	r0, sp, #24
   b5dd6:	f000 fcbf 	bl	b6758 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b5dda:	a802      	add	r0, sp, #8
   b5ddc:	f000 fcbc 	bl	b6758 <_ZN6StringD1Ev>
}
   b5de0:	b011      	add	sp, #68	; 0x44
   b5de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b5de6:	1d3d      	adds	r5, r7, #4
   b5de8:	4913      	ldr	r1, [pc, #76]	; (b5e38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b5dea:	4628      	mov	r0, r5
   b5dec:	f000 fd38 	bl	b6860 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b5df0:	1d22      	adds	r2, r4, #4
   b5df2:	a902      	add	r1, sp, #8
   b5df4:	a80a      	add	r0, sp, #40	; 0x28
   b5df6:	f000 fdc9 	bl	b698c <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5dfa:	a90a      	add	r1, sp, #40	; 0x28
   b5dfc:	4628      	mov	r0, r5
   b5dfe:	f000 fd6b 	bl	b68d8 <_ZN6String6concatERKS_>
   b5e02:	a80a      	add	r0, sp, #40	; 0x28
   b5e04:	f000 fca8 	bl	b6758 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5e08:	9806      	ldr	r0, [sp, #24]
   b5e0a:	f004 fa0e 	bl	ba22a <atoi>
   b5e0e:	6038      	str	r0, [r7, #0]
   b5e10:	e7e0      	b.n	b5dd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
   b5e12:	bf00      	nop
   b5e14:	000bcef8 	.word	0x000bcef8
   b5e18:	000bca14 	.word	0x000bca14
   b5e1c:	000bcc46 	.word	0x000bcc46
   b5e20:	000bcc58 	.word	0x000bcc58
   b5e24:	000bcc52 	.word	0x000bcc52
   b5e28:	000bcc63 	.word	0x000bcc63
   b5e2c:	000bcb00 	.word	0x000bcb00
   b5e30:	000bcc68 	.word	0x000bcc68
   b5e34:	000bcc6d 	.word	0x000bcc6d
   b5e38:	000bcc71 	.word	0x000bcc71

000b5e3c <_ZN9JSONClassD1Ev>:
#endif
}

JSONClass::~JSONClass()
{
}
   b5e3c:	4770      	bx	lr

000b5e3e <_ZN9JSONClassD0Ev>:
JSONClass::~JSONClass()
   b5e3e:	b510      	push	{r4, lr}
}
   b5e40:	2104      	movs	r1, #4
JSONClass::~JSONClass()
   b5e42:	4604      	mov	r4, r0
}
   b5e44:	f7fe f92b 	bl	b409e <_ZdlPvj>
   b5e48:	4620      	mov	r0, r4
   b5e4a:	bd10      	pop	{r4, pc}

000b5e4c <_GLOBAL__sub_I__ZN9JSONClassC2Ev>:
JSONClass::JSONClass()
   b5e4c:	4b01      	ldr	r3, [pc, #4]	; (b5e54 <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0x8>)
   b5e4e:	4a02      	ldr	r2, [pc, #8]	; (b5e58 <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0xc>)
   b5e50:	601a      	str	r2, [r3, #0]
String JSONClass::typeof(const JSONVar& value)
{
  return JSONVar::typeof(value);
}

JSONClass JSON;
   b5e52:	4770      	bx	lr
   b5e54:	2003e664 	.word	0x2003e664
   b5e58:	000bcc7c 	.word	0x000bcc7c

000b5e5c <_ZN7JSONVarD1Ev>:
JSONVar::JSONVar() :
  JSONVar(NULL, NULL)
{
}

JSONVar::~JSONVar()
   b5e5c:	b510      	push	{r4, lr}
   b5e5e:	4b05      	ldr	r3, [pc, #20]	; (b5e74 <_ZN7JSONVarD1Ev+0x18>)
   b5e60:	6003      	str	r3, [r0, #0]
   b5e62:	4604      	mov	r4, r0
{
  if (_json != NULL && _parent == NULL) {
   b5e64:	6840      	ldr	r0, [r0, #4]
   b5e66:	b118      	cbz	r0, b5e70 <_ZN7JSONVarD1Ev+0x14>
   b5e68:	68a3      	ldr	r3, [r4, #8]
   b5e6a:	b90b      	cbnz	r3, b5e70 <_ZN7JSONVarD1Ev+0x14>
    cJSON_Delete(_json);
   b5e6c:	f7ff fe5a 	bl	b5b24 <cJSON_Delete>

    _json = NULL;
  }
}
   b5e70:	4620      	mov	r0, r4
   b5e72:	bd10      	pop	{r4, pc}
   b5e74:	000bcc8c 	.word	0x000bcc8c

000b5e78 <_ZN7JSONVarD0Ev>:
JSONVar::~JSONVar()
   b5e78:	b510      	push	{r4, lr}
   b5e7a:	4604      	mov	r4, r0
}
   b5e7c:	f7ff ffee 	bl	b5e5c <_ZN7JSONVarD1Ev>
   b5e80:	4620      	mov	r0, r4
   b5e82:	210c      	movs	r1, #12
   b5e84:	f7fe f90b 	bl	b409e <_ZdlPvj>
   b5e88:	4620      	mov	r0, r4
   b5e8a:	bd10      	pop	{r4, pc}

000b5e8c <_ZNK7JSONVar7printToER5Print>:

size_t JSONVar::printTo(Print& p) const
{
   b5e8c:	b538      	push	{r3, r4, r5, lr}
  if (_json == NULL) {
   b5e8e:	6840      	ldr	r0, [r0, #4]
{
   b5e90:	460c      	mov	r4, r1
  if (_json == NULL) {
   b5e92:	b160      	cbz	r0, b5eae <_ZNK7JSONVar7printToER5Print+0x22>
    return 0;
  }

  char* s = cJSON_PrintUnformatted(_json);
   b5e94:	f7ff fe6a 	bl	b5b6c <cJSON_PrintUnformatted>
   b5e98:	4605      	mov	r5, r0

  size_t writen = p.print(s);
   b5e9a:	4601      	mov	r1, r0
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	f001 ffed 	bl	b7e7c <_ZN5Print5printEPKc>
   b5ea2:	4604      	mov	r4, r0

  cJSON_free(s);
   b5ea4:	4628      	mov	r0, r5
   b5ea6:	f7ff fe65 	bl	b5b74 <cJSON_free>

  return writen;
}
   b5eaa:	4620      	mov	r0, r4
   b5eac:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   b5eae:	4604      	mov	r4, r0
   b5eb0:	e7fb      	b.n	b5eaa <_ZNK7JSONVar7printToER5Print+0x1e>
	...

000b5eb4 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_>:
  _parent(parent)
   b5eb4:	4b03      	ldr	r3, [pc, #12]	; (b5ec4 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x10>)
   b5eb6:	4a04      	ldr	r2, [pc, #16]	; (b5ec8 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x14>)
   b5eb8:	601a      	str	r2, [r3, #0]
   b5eba:	2200      	movs	r2, #0
   b5ebc:	e9c3 2201 	strd	r2, r2, [r3, #4]
      cJSON_Delete(old);
    }
  }
}

JSONVar undefined;
   b5ec0:	4770      	bx	lr
   b5ec2:	bf00      	nop
   b5ec4:	2003e668 	.word	0x2003e668
   b5ec8:	000bcc8c 	.word	0x000bcc8c

000b5ecc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <netdb_freeaddrinfo+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	689b      	ldr	r3, [r3, #8]
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	00030268 	.word	0x00030268

000b5edc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <netdb_getaddrinfo+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	68db      	ldr	r3, [r3, #12]
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	00030268 	.word	0x00030268

000b5eec <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <HAL_Pin_Mode+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	689b      	ldr	r3, [r3, #8]
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	0003022c 	.word	0x0003022c

000b5efc <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <HAL_Interrupts_Attach+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	699b      	ldr	r3, [r3, #24]
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	0003022c 	.word	0x0003022c

000b5f0c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <HAL_Interrupts_Detach+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	69db      	ldr	r3, [r3, #28]
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	0003022c 	.word	0x0003022c

000b5f1c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <if_index_to_name+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	695b      	ldr	r3, [r3, #20]
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	0003026c 	.word	0x0003026c

000b5f2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <HAL_RNG_GetRandomNumber+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	685b      	ldr	r3, [r3, #4]
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	00030218 	.word	0x00030218

000b5f3c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <HAL_Delay_Microseconds+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	68db      	ldr	r3, [r3, #12]
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	00030218 	.word	0x00030218

000b5f4c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	695b      	ldr	r3, [r3, #20]
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	00030218 	.word	0x00030218

000b5f5c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <hal_rtc_time_is_valid+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	00030218 	.word	0x00030218

000b5f6c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <hal_rtc_get_time+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	00030218 	.word	0x00030218

000b5f7c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <HAL_Core_Runtime_Info+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	00030234 	.word	0x00030234

000b5f8c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <hal_ble_stack_init+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	689b      	ldr	r3, [r3, #8]
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	00030278 	.word	0x00030278

000b5f9c <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <hal_ble_select_antenna+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	691b      	ldr	r3, [r3, #16]
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	00030278 	.word	0x00030278

000b5fac <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <hal_ble_gap_set_advertising_data+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	00030278 	.word	0x00030278

000b5fbc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <hal_ble_gap_set_scan_response_data+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	00030278 	.word	0x00030278

000b5fcc <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <hal_ble_gap_start_advertising+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	00030278 	.word	0x00030278

000b5fdc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b03      	ldr	r3, [pc, #12]	; (b5fec <hal_ble_gap_disconnect+0x10>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5fe6:	9301      	str	r3, [sp, #4]
   b5fe8:	bd08      	pop	{r3, pc}
   b5fea:	0000      	.short	0x0000
   b5fec:	00030278 	.word	0x00030278

000b5ff0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b03      	ldr	r3, [pc, #12]	; (b6000 <hal_ble_gatt_server_add_service+0x10>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b5ffa:	9301      	str	r3, [sp, #4]
   b5ffc:	bd08      	pop	{r3, pc}
   b5ffe:	0000      	.short	0x0000
   b6000:	00030278 	.word	0x00030278

000b6004 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b03      	ldr	r3, [pc, #12]	; (b6014 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b600e:	9301      	str	r3, [sp, #4]
   b6010:	bd08      	pop	{r3, pc}
   b6012:	0000      	.short	0x0000
   b6014:	00030278 	.word	0x00030278

000b6018 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b03      	ldr	r3, [pc, #12]	; (b6028 <hal_ble_gatt_client_write_with_response+0x10>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6022:	9301      	str	r3, [sp, #4]
   b6024:	bd08      	pop	{r3, pc}
   b6026:	0000      	.short	0x0000
   b6028:	00030278 	.word	0x00030278

000b602c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b602c:	b508      	push	{r3, lr}
   b602e:	4b03      	ldr	r3, [pc, #12]	; (b603c <hal_ble_gatt_client_write_without_response+0x10>)
   b6030:	681b      	ldr	r3, [r3, #0]
   b6032:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6036:	9301      	str	r3, [sp, #4]
   b6038:	bd08      	pop	{r3, pc}
   b603a:	0000      	.short	0x0000
   b603c:	00030278 	.word	0x00030278

000b6040 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b03      	ldr	r3, [pc, #12]	; (b6050 <hal_ble_gatt_server_add_characteristic+0x10>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b604a:	9301      	str	r3, [sp, #4]
   b604c:	bd08      	pop	{r3, pc}
   b604e:	0000      	.short	0x0000
   b6050:	00030278 	.word	0x00030278

000b6054 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b03      	ldr	r3, [pc, #12]	; (b6064 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b605e:	9301      	str	r3, [sp, #4]
   b6060:	bd08      	pop	{r3, pc}
   b6062:	0000      	.short	0x0000
   b6064:	00030278 	.word	0x00030278

000b6068 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b03      	ldr	r3, [pc, #12]	; (b6078 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6072:	9301      	str	r3, [sp, #4]
   b6074:	bd08      	pop	{r3, pc}
   b6076:	0000      	.short	0x0000
   b6078:	00030278 	.word	0x00030278

000b607c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b607c:	b508      	push	{r3, lr}
   b607e:	4b03      	ldr	r3, [pc, #12]	; (b608c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6080:	681b      	ldr	r3, [r3, #0]
   b6082:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6086:	9301      	str	r3, [sp, #4]
   b6088:	bd08      	pop	{r3, pc}
   b608a:	0000      	.short	0x0000
   b608c:	00030278 	.word	0x00030278

000b6090 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <os_thread_yield+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	68db      	ldr	r3, [r3, #12]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030248 	.word	0x00030248

000b60a0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <os_thread_scheduling+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	69db      	ldr	r3, [r3, #28]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030248 	.word	0x00030248

000b60b0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <os_timer_create+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	6a1b      	ldr	r3, [r3, #32]
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030248 	.word	0x00030248

000b60c0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <os_timer_destroy+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030248 	.word	0x00030248

000b60d0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <os_timer_get_id+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030248 	.word	0x00030248

000b60e0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <os_timer_change+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030248 	.word	0x00030248

000b60f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <os_mutex_recursive_create+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030248 	.word	0x00030248

000b6100 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <os_mutex_recursive_lock+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030248 	.word	0x00030248

000b6110 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <os_mutex_recursive_unlock+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030248 	.word	0x00030248

000b6120 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <os_timer_set_id+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030248 	.word	0x00030248

000b6130 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <inet_inet_ntop+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	695b      	ldr	r3, [r3, #20]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030264 	.word	0x00030264

000b6140 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <inet_htonl+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	6a1b      	ldr	r3, [r3, #32]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030264 	.word	0x00030264

000b6150 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <inet_htons+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030264 	.word	0x00030264

000b6160 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <hal_usart_write+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	68db      	ldr	r3, [r3, #12]
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	0003023c 	.word	0x0003023c

000b6170 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <hal_usart_available+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	691b      	ldr	r3, [r3, #16]
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	0003023c 	.word	0x0003023c

000b6180 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <hal_usart_read+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	695b      	ldr	r3, [r3, #20]
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	0003023c 	.word	0x0003023c

000b6190 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <hal_usart_peek+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	699b      	ldr	r3, [r3, #24]
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	0003023c 	.word	0x0003023c

000b61a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <hal_usart_flush+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	69db      	ldr	r3, [r3, #28]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	0003023c 	.word	0x0003023c

000b61b0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <hal_usart_is_enabled+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	6a1b      	ldr	r3, [r3, #32]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	0003023c 	.word	0x0003023c

000b61c0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <hal_usart_available_data_for_write+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	0003023c 	.word	0x0003023c

000b61d0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <hal_usart_init_ex+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	0003023c 	.word	0x0003023c

000b61e0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <hal_i2c_write+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	6a1b      	ldr	r3, [r3, #32]
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	00030228 	.word	0x00030228

000b61f0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <hal_i2c_available+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	00030228 	.word	0x00030228

000b6200 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <hal_i2c_read+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	00030228 	.word	0x00030228

000b6210 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <hal_i2c_peek+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	00030228 	.word	0x00030228

000b6220 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <hal_i2c_flush+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030228 	.word	0x00030228

000b6230 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <hal_i2c_is_enabled+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	00030228 	.word	0x00030228

000b6240 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <hal_i2c_init+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	00030228 	.word	0x00030228

000b6250 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <sock_setsockopt+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	699b      	ldr	r3, [r3, #24]
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	00030238 	.word	0x00030238

000b6260 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <sock_close+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	69db      	ldr	r3, [r3, #28]
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	00030238 	.word	0x00030238

000b6270 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <sock_connect+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	6a1b      	ldr	r3, [r3, #32]
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	00030238 	.word	0x00030238

000b6280 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <sock_recv+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	00030238 	.word	0x00030238

000b6290 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <sock_send+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030238 	.word	0x00030238

000b62a0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <sock_socket+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030238 	.word	0x00030238

000b62b0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <hal_spi_init+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	69db      	ldr	r3, [r3, #28]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	00030230 	.word	0x00030230

000b62c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <hal_spi_is_enabled+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6a1b      	ldr	r3, [r3, #32]
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030230 	.word	0x00030230

000b62d0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <HAL_USB_USART_Init+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	681b      	ldr	r3, [r3, #0]
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	0003024c 	.word	0x0003024c

000b62e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <HAL_USB_USART_Available_Data+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	691b      	ldr	r3, [r3, #16]
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	0003024c 	.word	0x0003024c

000b62f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	695b      	ldr	r3, [r3, #20]
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	0003024c 	.word	0x0003024c

000b6300 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <HAL_USB_USART_Receive_Data+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	699b      	ldr	r3, [r3, #24]
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	0003024c 	.word	0x0003024c

000b6310 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <HAL_USB_USART_Send_Data+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	69db      	ldr	r3, [r3, #28]
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	0003024c 	.word	0x0003024c

000b6320 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <HAL_USB_USART_Flush_Data+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	6a1b      	ldr	r3, [r3, #32]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	0003024c 	.word	0x0003024c

000b6330 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <wlan_connected_info+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	00030274 	.word	0x00030274

000b6340 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <panic_+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	00030260 	.word	0x00030260

000b6350 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <log_message+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	00030260 	.word	0x00030260

000b6360 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <system_mode+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	681b      	ldr	r3, [r3, #0]
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	00030220 	.word	0x00030220

000b6370 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <set_system_mode+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	685b      	ldr	r3, [r3, #4]
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	00030220 	.word	0x00030220

000b6380 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b02      	ldr	r3, [pc, #8]	; (b638c <system_delay_ms+0xc>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	695b      	ldr	r3, [r3, #20]
   b6388:	9301      	str	r3, [sp, #4]
   b638a:	bd08      	pop	{r3, pc}
   b638c:	00030220 	.word	0x00030220

000b6390 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6390:	b508      	push	{r3, lr}
   b6392:	4b02      	ldr	r3, [pc, #8]	; (b639c <system_thread_set_state+0xc>)
   b6394:	681b      	ldr	r3, [r3, #0]
   b6396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6398:	9301      	str	r3, [sp, #4]
   b639a:	bd08      	pop	{r3, pc}
   b639c:	00030220 	.word	0x00030220

000b63a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b63a0:	b508      	push	{r3, lr}
   b63a2:	4b02      	ldr	r3, [pc, #8]	; (b63ac <application_thread_current+0xc>)
   b63a4:	681b      	ldr	r3, [r3, #0]
   b63a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b63a8:	9301      	str	r3, [sp, #4]
   b63aa:	bd08      	pop	{r3, pc}
   b63ac:	00030220 	.word	0x00030220

000b63b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b63b0:	b508      	push	{r3, lr}
   b63b2:	4b02      	ldr	r3, [pc, #8]	; (b63bc <application_thread_invoke+0xc>)
   b63b4:	681b      	ldr	r3, [r3, #0]
   b63b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b63b8:	9301      	str	r3, [sp, #4]
   b63ba:	bd08      	pop	{r3, pc}
   b63bc:	00030220 	.word	0x00030220

000b63c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b63c0:	b508      	push	{r3, lr}
   b63c2:	4b02      	ldr	r3, [pc, #8]	; (b63cc <system_thread_get_state+0xc>)
   b63c4:	681b      	ldr	r3, [r3, #0]
   b63c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b63c8:	9301      	str	r3, [sp, #4]
   b63ca:	bd08      	pop	{r3, pc}
   b63cc:	00030220 	.word	0x00030220

000b63d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b03      	ldr	r3, [pc, #12]	; (b63e0 <system_ctrl_set_app_request_handler+0x10>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b63da:	9301      	str	r3, [sp, #4]
   b63dc:	bd08      	pop	{r3, pc}
   b63de:	0000      	.short	0x0000
   b63e0:	00030220 	.word	0x00030220

000b63e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b03      	ldr	r3, [pc, #12]	; (b63f4 <system_ctrl_set_result+0x10>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b63ee:	9301      	str	r3, [sp, #4]
   b63f0:	bd08      	pop	{r3, pc}
   b63f2:	0000      	.short	0x0000
   b63f4:	00030220 	.word	0x00030220

000b63f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b63f8:	b508      	push	{r3, lr}
   b63fa:	4b02      	ldr	r3, [pc, #8]	; (b6404 <network_connect+0xc>)
   b63fc:	681b      	ldr	r3, [r3, #0]
   b63fe:	685b      	ldr	r3, [r3, #4]
   b6400:	9301      	str	r3, [sp, #4]
   b6402:	bd08      	pop	{r3, pc}
   b6404:	00030240 	.word	0x00030240

000b6408 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6408:	b508      	push	{r3, lr}
   b640a:	4b02      	ldr	r3, [pc, #8]	; (b6414 <network_connecting+0xc>)
   b640c:	681b      	ldr	r3, [r3, #0]
   b640e:	689b      	ldr	r3, [r3, #8]
   b6410:	9301      	str	r3, [sp, #4]
   b6412:	bd08      	pop	{r3, pc}
   b6414:	00030240 	.word	0x00030240

000b6418 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6418:	b508      	push	{r3, lr}
   b641a:	4b02      	ldr	r3, [pc, #8]	; (b6424 <network_disconnect+0xc>)
   b641c:	681b      	ldr	r3, [r3, #0]
   b641e:	68db      	ldr	r3, [r3, #12]
   b6420:	9301      	str	r3, [sp, #4]
   b6422:	bd08      	pop	{r3, pc}
   b6424:	00030240 	.word	0x00030240

000b6428 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6428:	b508      	push	{r3, lr}
   b642a:	4b02      	ldr	r3, [pc, #8]	; (b6434 <network_ready+0xc>)
   b642c:	681b      	ldr	r3, [r3, #0]
   b642e:	691b      	ldr	r3, [r3, #16]
   b6430:	9301      	str	r3, [sp, #4]
   b6432:	bd08      	pop	{r3, pc}
   b6434:	00030240 	.word	0x00030240

000b6438 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6438:	b508      	push	{r3, lr}
   b643a:	4b02      	ldr	r3, [pc, #8]	; (b6444 <network_on+0xc>)
   b643c:	681b      	ldr	r3, [r3, #0]
   b643e:	695b      	ldr	r3, [r3, #20]
   b6440:	9301      	str	r3, [sp, #4]
   b6442:	bd08      	pop	{r3, pc}
   b6444:	00030240 	.word	0x00030240

000b6448 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6448:	b508      	push	{r3, lr}
   b644a:	4b02      	ldr	r3, [pc, #8]	; (b6454 <network_off+0xc>)
   b644c:	681b      	ldr	r3, [r3, #0]
   b644e:	699b      	ldr	r3, [r3, #24]
   b6450:	9301      	str	r3, [sp, #4]
   b6452:	bd08      	pop	{r3, pc}
   b6454:	00030240 	.word	0x00030240

000b6458 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6458:	b508      	push	{r3, lr}
   b645a:	4b02      	ldr	r3, [pc, #8]	; (b6464 <network_listen+0xc>)
   b645c:	681b      	ldr	r3, [r3, #0]
   b645e:	69db      	ldr	r3, [r3, #28]
   b6460:	9301      	str	r3, [sp, #4]
   b6462:	bd08      	pop	{r3, pc}
   b6464:	00030240 	.word	0x00030240

000b6468 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6468:	b508      	push	{r3, lr}
   b646a:	4b02      	ldr	r3, [pc, #8]	; (b6474 <network_listening+0xc>)
   b646c:	681b      	ldr	r3, [r3, #0]
   b646e:	6a1b      	ldr	r3, [r3, #32]
   b6470:	9301      	str	r3, [sp, #4]
   b6472:	bd08      	pop	{r3, pc}
   b6474:	00030240 	.word	0x00030240

000b6478 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b02      	ldr	r3, [pc, #8]	; (b6484 <network_set_listen_timeout+0xc>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6480:	9301      	str	r3, [sp, #4]
   b6482:	bd08      	pop	{r3, pc}
   b6484:	00030240 	.word	0x00030240

000b6488 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6488:	b508      	push	{r3, lr}
   b648a:	4b02      	ldr	r3, [pc, #8]	; (b6494 <network_get_listen_timeout+0xc>)
   b648c:	681b      	ldr	r3, [r3, #0]
   b648e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6490:	9301      	str	r3, [sp, #4]
   b6492:	bd08      	pop	{r3, pc}
   b6494:	00030240 	.word	0x00030240

000b6498 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6498:	b508      	push	{r3, lr}
   b649a:	4b02      	ldr	r3, [pc, #8]	; (b64a4 <network_is_on+0xc>)
   b649c:	681b      	ldr	r3, [r3, #0]
   b649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64a0:	9301      	str	r3, [sp, #4]
   b64a2:	bd08      	pop	{r3, pc}
   b64a4:	00030240 	.word	0x00030240

000b64a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b64a8:	b508      	push	{r3, lr}
   b64aa:	4b02      	ldr	r3, [pc, #8]	; (b64b4 <network_is_off+0xc>)
   b64ac:	681b      	ldr	r3, [r3, #0]
   b64ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64b0:	9301      	str	r3, [sp, #4]
   b64b2:	bd08      	pop	{r3, pc}
   b64b4:	00030240 	.word	0x00030240

000b64b8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b64b8:	b508      	push	{r3, lr}
   b64ba:	4b02      	ldr	r3, [pc, #8]	; (b64c4 <spark_process+0xc>)
   b64bc:	681b      	ldr	r3, [r3, #0]
   b64be:	689b      	ldr	r3, [r3, #8]
   b64c0:	9301      	str	r3, [sp, #4]
   b64c2:	bd08      	pop	{r3, pc}
   b64c4:	00030244 	.word	0x00030244

000b64c8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b64c8:	b508      	push	{r3, lr}
   b64ca:	4b02      	ldr	r3, [pc, #8]	; (b64d4 <spark_cloud_flag_connected+0xc>)
   b64cc:	681b      	ldr	r3, [r3, #0]
   b64ce:	695b      	ldr	r3, [r3, #20]
   b64d0:	9301      	str	r3, [sp, #4]
   b64d2:	bd08      	pop	{r3, pc}
   b64d4:	00030244 	.word	0x00030244

000b64d8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b64d8:	b508      	push	{r3, lr}
   b64da:	4b02      	ldr	r3, [pc, #8]	; (b64e4 <spark_send_event+0xc>)
   b64dc:	681b      	ldr	r3, [r3, #0]
   b64de:	6a1b      	ldr	r3, [r3, #32]
   b64e0:	9301      	str	r3, [sp, #4]
   b64e2:	bd08      	pop	{r3, pc}
   b64e4:	00030244 	.word	0x00030244

000b64e8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b64e8:	b508      	push	{r3, lr}
   b64ea:	4b02      	ldr	r3, [pc, #8]	; (b64f4 <spark_subscribe+0xc>)
   b64ec:	681b      	ldr	r3, [r3, #0]
   b64ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b64f0:	9301      	str	r3, [sp, #4]
   b64f2:	bd08      	pop	{r3, pc}
   b64f4:	00030244 	.word	0x00030244

000b64f8 <spark_unsubscribe>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
   b64f8:	b508      	push	{r3, lr}
   b64fa:	4b02      	ldr	r3, [pc, #8]	; (b6504 <spark_unsubscribe+0xc>)
   b64fc:	681b      	ldr	r3, [r3, #0]
   b64fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6500:	9301      	str	r3, [sp, #4]
   b6502:	bd08      	pop	{r3, pc}
   b6504:	00030244 	.word	0x00030244

000b6508 <spark_sync_time_pending>:
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6508:	b508      	push	{r3, lr}
   b650a:	4b02      	ldr	r3, [pc, #8]	; (b6514 <spark_sync_time_pending+0xc>)
   b650c:	681b      	ldr	r3, [r3, #0]
   b650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6510:	9301      	str	r3, [sp, #4]
   b6512:	bd08      	pop	{r3, pc}
   b6514:	00030244 	.word	0x00030244

000b6518 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6518:	b508      	push	{r3, lr}
   b651a:	4b02      	ldr	r3, [pc, #8]	; (b6524 <spark_set_random_seed_from_cloud_handler+0xc>)
   b651c:	681b      	ldr	r3, [r3, #0]
   b651e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6520:	9301      	str	r3, [sp, #4]
   b6522:	bd08      	pop	{r3, pc}
   b6524:	00030244 	.word	0x00030244

000b6528 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6528:	b508      	push	{r3, lr}
   b652a:	4b02      	ldr	r3, [pc, #8]	; (b6534 <malloc+0xc>)
   b652c:	681b      	ldr	r3, [r3, #0]
   b652e:	681b      	ldr	r3, [r3, #0]
   b6530:	9301      	str	r3, [sp, #4]
   b6532:	bd08      	pop	{r3, pc}
   b6534:	0003021c 	.word	0x0003021c

000b6538 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6538:	b508      	push	{r3, lr}
   b653a:	4b02      	ldr	r3, [pc, #8]	; (b6544 <free+0xc>)
   b653c:	681b      	ldr	r3, [r3, #0]
   b653e:	685b      	ldr	r3, [r3, #4]
   b6540:	9301      	str	r3, [sp, #4]
   b6542:	bd08      	pop	{r3, pc}
   b6544:	0003021c 	.word	0x0003021c

000b6548 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6548:	b508      	push	{r3, lr}
   b654a:	4b02      	ldr	r3, [pc, #8]	; (b6554 <realloc+0xc>)
   b654c:	681b      	ldr	r3, [r3, #0]
   b654e:	689b      	ldr	r3, [r3, #8]
   b6550:	9301      	str	r3, [sp, #4]
   b6552:	bd08      	pop	{r3, pc}
   b6554:	0003021c 	.word	0x0003021c

000b6558 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6558:	b508      	push	{r3, lr}
   b655a:	4b02      	ldr	r3, [pc, #8]	; (b6564 <sprintf+0xc>)
   b655c:	681b      	ldr	r3, [r3, #0]
   b655e:	68db      	ldr	r3, [r3, #12]
   b6560:	9301      	str	r3, [sp, #4]
   b6562:	bd08      	pop	{r3, pc}
   b6564:	0003021c 	.word	0x0003021c

000b6568 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6568:	b508      	push	{r3, lr}
   b656a:	4b02      	ldr	r3, [pc, #8]	; (b6574 <sscanf+0xc>)
   b656c:	681b      	ldr	r3, [r3, #0]
   b656e:	695b      	ldr	r3, [r3, #20]
   b6570:	9301      	str	r3, [sp, #4]
   b6572:	bd08      	pop	{r3, pc}
   b6574:	0003021c 	.word	0x0003021c

000b6578 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6578:	b508      	push	{r3, lr}
   b657a:	4b02      	ldr	r3, [pc, #8]	; (b6584 <vsnprintf+0xc>)
   b657c:	681b      	ldr	r3, [r3, #0]
   b657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6580:	9301      	str	r3, [sp, #4]
   b6582:	bd08      	pop	{r3, pc}
   b6584:	0003021c 	.word	0x0003021c

000b6588 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6588:	b508      	push	{r3, lr}
   b658a:	4b02      	ldr	r3, [pc, #8]	; (b6594 <abort+0xc>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6590:	9301      	str	r3, [sp, #4]
   b6592:	bd08      	pop	{r3, pc}
   b6594:	0003021c 	.word	0x0003021c

000b6598 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6598:	b508      	push	{r3, lr}
   b659a:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <_malloc_r+0xc>)
   b659c:	681b      	ldr	r3, [r3, #0]
   b659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65a0:	9301      	str	r3, [sp, #4]
   b65a2:	bd08      	pop	{r3, pc}
   b65a4:	0003021c 	.word	0x0003021c

000b65a8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b65a8:	b508      	push	{r3, lr}
   b65aa:	4b02      	ldr	r3, [pc, #8]	; (b65b4 <__errno+0xc>)
   b65ac:	681b      	ldr	r3, [r3, #0]
   b65ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	bd08      	pop	{r3, pc}
   b65b4:	0003021c 	.word	0x0003021c

000b65b8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b65b8:	b508      	push	{r3, lr}
   b65ba:	4b02      	ldr	r3, [pc, #8]	; (b65c4 <__assert_func+0xc>)
   b65bc:	681b      	ldr	r3, [r3, #0]
   b65be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65c0:	9301      	str	r3, [sp, #4]
   b65c2:	bd08      	pop	{r3, pc}
   b65c4:	0003021c 	.word	0x0003021c

000b65c8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b65c8:	b508      	push	{r3, lr}
   b65ca:	4b02      	ldr	r3, [pc, #8]	; (b65d4 <newlib_impure_ptr_callback+0xc>)
   b65cc:	681b      	ldr	r3, [r3, #0]
   b65ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65d0:	9301      	str	r3, [sp, #4]
   b65d2:	bd08      	pop	{r3, pc}
   b65d4:	0003021c 	.word	0x0003021c

000b65d8 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b65d8:	b508      	push	{r3, lr}
   b65da:	4b02      	ldr	r3, [pc, #8]	; (b65e4 <localtime_r+0xc>)
   b65dc:	681b      	ldr	r3, [r3, #0]
   b65de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b65e0:	9301      	str	r3, [sp, #4]
   b65e2:	bd08      	pop	{r3, pc}
   b65e4:	0003021c 	.word	0x0003021c

000b65e8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b65e8:	2200      	movs	r2, #0
   b65ea:	6840      	ldr	r0, [r0, #4]
   b65ec:	4611      	mov	r1, r2
   b65ee:	f7ff bf3b 	b.w	b6468 <network_listening>

000b65f2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b65f2:	2200      	movs	r2, #0
   b65f4:	6840      	ldr	r0, [r0, #4]
   b65f6:	4611      	mov	r1, r2
   b65f8:	f7ff bf46 	b.w	b6488 <network_get_listen_timeout>

000b65fc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b65fc:	6840      	ldr	r0, [r0, #4]
   b65fe:	2200      	movs	r2, #0
   b6600:	f7ff bf3a 	b.w	b6478 <network_set_listen_timeout>

000b6604 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6604:	6840      	ldr	r0, [r0, #4]
   b6606:	2200      	movs	r2, #0
   b6608:	f081 0101 	eor.w	r1, r1, #1
   b660c:	f7ff bf24 	b.w	b6458 <network_listen>

000b6610 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6610:	2300      	movs	r3, #0
   b6612:	6840      	ldr	r0, [r0, #4]
   b6614:	461a      	mov	r2, r3
   b6616:	4619      	mov	r1, r3
   b6618:	f7ff bf16 	b.w	b6448 <network_off>

000b661c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b661c:	2300      	movs	r3, #0
   b661e:	6840      	ldr	r0, [r0, #4]
   b6620:	461a      	mov	r2, r3
   b6622:	4619      	mov	r1, r3
   b6624:	f7ff bf08 	b.w	b6438 <network_on>

000b6628 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6628:	2200      	movs	r2, #0
   b662a:	6840      	ldr	r0, [r0, #4]
   b662c:	4611      	mov	r1, r2
   b662e:	f7ff befb 	b.w	b6428 <network_ready>

000b6632 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6632:	2200      	movs	r2, #0
   b6634:	6840      	ldr	r0, [r0, #4]
   b6636:	4611      	mov	r1, r2
   b6638:	f7ff bee6 	b.w	b6408 <network_connecting>

000b663c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b663c:	6840      	ldr	r0, [r0, #4]
   b663e:	2200      	movs	r2, #0
   b6640:	2102      	movs	r1, #2
   b6642:	f7ff bee9 	b.w	b6418 <network_disconnect>

000b6646 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6646:	2300      	movs	r3, #0
   b6648:	6840      	ldr	r0, [r0, #4]
   b664a:	461a      	mov	r2, r3
   b664c:	f7ff bed4 	b.w	b63f8 <network_connect>

000b6650 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6650:	4b02      	ldr	r3, [pc, #8]	; (b665c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6652:	2203      	movs	r2, #3
   b6654:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6656:	4a02      	ldr	r2, [pc, #8]	; (b6660 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6658:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b665a:	4770      	bx	lr
   b665c:	2003e674 	.word	0x2003e674
   b6660:	000bcca0 	.word	0x000bcca0

000b6664 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6664:	b510      	push	{r4, lr}
   b6666:	4604      	mov	r4, r0
   b6668:	4608      	mov	r0, r1
{
    _spi = spi;
   b666a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b666c:	f7ff fe20 	bl	b62b0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6670:	2300      	movs	r3, #0
   b6672:	6063      	str	r3, [r4, #4]
}
   b6674:	4620      	mov	r0, r4
   b6676:	bd10      	pop	{r4, pc}

000b6678 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b6678:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b667a:	2420      	movs	r4, #32
{
   b667c:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b667e:	4622      	mov	r2, r4
   b6680:	2100      	movs	r1, #0
   b6682:	4668      	mov	r0, sp
   b6684:	f003 fe0d 	bl	ba2a2 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b6688:	2100      	movs	r1, #0
   b668a:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b668c:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b6690:	f7ff fc74 	bl	b5f7c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b6694:	9801      	ldr	r0, [sp, #4]
   b6696:	b008      	add	sp, #32
   b6698:	bd10      	pop	{r4, pc}
	...

000b669c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b669c:	4b05      	ldr	r3, [pc, #20]	; (b66b4 <_GLOBAL__sub_I_System+0x18>)
   b669e:	2202      	movs	r2, #2
   b66a0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b66a2:	4b05      	ldr	r3, [pc, #20]	; (b66b8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b66a4:	4a05      	ldr	r2, [pc, #20]	; (b66bc <_GLOBAL__sub_I_System+0x20>)
   b66a6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b66a8:	2000      	movs	r0, #0
   b66aa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b66ae:	f7ff be5f 	b.w	b6370 <set_system_mode>
   b66b2:	bf00      	nop
   b66b4:	2003e688 	.word	0x2003e688
   b66b8:	2003e67c 	.word	0x2003e67c
   b66bc:	ffff0000 	.word	0xffff0000

000b66c0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b66c0:	b510      	push	{r4, lr}
   b66c2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b66c4:	f003 fe63 	bl	ba38e <strlen>
   b66c8:	3801      	subs	r0, #1
   b66ca:	1823      	adds	r3, r4, r0
   b66cc:	4620      	mov	r0, r4
	while(i<j){
   b66ce:	4283      	cmp	r3, r0
   b66d0:	d906      	bls.n	b66e0 <_Z11str_reversePc+0x20>
		c = *i;
   b66d2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b66d4:	7819      	ldrb	r1, [r3, #0]
   b66d6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b66da:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b66de:	e7f6      	b.n	b66ce <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b66e0:	bd10      	pop	{r4, pc}

000b66e2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b66e2:	b570      	push	{r4, r5, r6, lr}
   b66e4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b66e6:	1e91      	subs	r1, r2, #2
   b66e8:	2922      	cmp	r1, #34	; 0x22
   b66ea:	d81d      	bhi.n	b6728 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b66ec:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b66ee:	b930      	cbnz	r0, b66fe <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b66f0:	4423      	add	r3, r4
            *ptr++ = '0';
   b66f2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b66f4:	429d      	cmp	r5, r3
   b66f6:	d210      	bcs.n	b671a <ultoa+0x38>
            *ptr++ = '0';
   b66f8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b66fc:	e7fa      	b.n	b66f4 <ultoa+0x12>
            result.quot = a/radix;
   b66fe:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b6702:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6706:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6708:	2809      	cmp	r0, #9
                *ptr += '0';
   b670a:	bf94      	ite	ls
   b670c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b670e:	3157      	addhi	r1, #87	; 0x57
   b6710:	b2c9      	uxtb	r1, r1
   b6712:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6716:	4630      	mov	r0, r6
	while(a){
   b6718:	e7e9      	b.n	b66ee <ultoa+0xc>

	*ptr = '\0';
   b671a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b671c:	4620      	mov	r0, r4
	*ptr = '\0';
   b671e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6720:	f7ff ffce 	bl	b66c0 <_Z11str_reversePc>
	return buffer;
   b6724:	4620      	mov	r0, r4
}
   b6726:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6728:	2000      	movs	r0, #0
   b672a:	e7fc      	b.n	b6726 <ultoa+0x44>

000b672c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b672c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b672e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6730:	460c      	mov	r4, r1
   b6732:	4615      	mov	r5, r2
	if(a<0){
   b6734:	da0e      	bge.n	b6754 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b673a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b673e:	bf14      	ite	ne
   b6740:	4258      	negne	r0, r3
   b6742:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b6744:	2301      	movs	r3, #1
		*buffer = '-';
   b6746:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6748:	462a      	mov	r2, r5
   b674a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b674c:	f7ff ffc9 	bl	b66e2 <ultoa>
	}
	return buffer;
}
   b6750:	4620      	mov	r0, r4
   b6752:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b6754:	2301      	movs	r3, #1
   b6756:	e7f9      	b.n	b674c <itoa+0x20>

000b6758 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6758:	b510      	push	{r4, lr}
   b675a:	4604      	mov	r4, r0
{
	free(buffer);
   b675c:	6800      	ldr	r0, [r0, #0]
   b675e:	f7ff feeb 	bl	b6538 <free>
}
   b6762:	4620      	mov	r0, r4
   b6764:	bd10      	pop	{r4, pc}

000b6766 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6766:	b510      	push	{r4, lr}
   b6768:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b676a:	6800      	ldr	r0, [r0, #0]
   b676c:	b108      	cbz	r0, b6772 <_ZN6String10invalidateEv+0xc>
   b676e:	f7ff fee3 	bl	b6538 <free>
	buffer = NULL;
   b6772:	2300      	movs	r3, #0
	capacity = len = 0;
   b6774:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6778:	6023      	str	r3, [r4, #0]
}
   b677a:	bd10      	pop	{r4, pc}

000b677c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b677c:	b538      	push	{r3, r4, r5, lr}
   b677e:	4604      	mov	r4, r0
   b6780:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6782:	6800      	ldr	r0, [r0, #0]
   b6784:	3101      	adds	r1, #1
   b6786:	f7ff fedf 	bl	b6548 <realloc>
	if (newbuffer) {
   b678a:	b110      	cbz	r0, b6792 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b678c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6790:	2001      	movs	r0, #1
	}
	return 0;
}
   b6792:	bd38      	pop	{r3, r4, r5, pc}

000b6794 <_ZN6String7reserveEj>:
{
   b6794:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6796:	6803      	ldr	r3, [r0, #0]
{
   b6798:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b679a:	b123      	cbz	r3, b67a6 <_ZN6String7reserveEj+0x12>
   b679c:	6843      	ldr	r3, [r0, #4]
   b679e:	428b      	cmp	r3, r1
   b67a0:	d301      	bcc.n	b67a6 <_ZN6String7reserveEj+0x12>
   b67a2:	2001      	movs	r0, #1
}
   b67a4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b67a6:	4620      	mov	r0, r4
   b67a8:	f7ff ffe8 	bl	b677c <_ZN6String12changeBufferEj>
   b67ac:	2800      	cmp	r0, #0
   b67ae:	d0f9      	beq.n	b67a4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b67b0:	68a3      	ldr	r3, [r4, #8]
   b67b2:	2b00      	cmp	r3, #0
   b67b4:	d1f5      	bne.n	b67a2 <_ZN6String7reserveEj+0xe>
   b67b6:	6822      	ldr	r2, [r4, #0]
   b67b8:	7013      	strb	r3, [r2, #0]
   b67ba:	e7f2      	b.n	b67a2 <_ZN6String7reserveEj+0xe>

000b67bc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b67bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b67be:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b67c0:	4611      	mov	r1, r2
   b67c2:	9201      	str	r2, [sp, #4]
{
   b67c4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b67c6:	f7ff ffe5 	bl	b6794 <_ZN6String7reserveEj>
   b67ca:	9a01      	ldr	r2, [sp, #4]
   b67cc:	b928      	cbnz	r0, b67da <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b67ce:	4620      	mov	r0, r4
   b67d0:	f7ff ffc9 	bl	b6766 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b67d4:	4620      	mov	r0, r4
   b67d6:	b003      	add	sp, #12
   b67d8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b67da:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b67dc:	4629      	mov	r1, r5
   b67de:	6820      	ldr	r0, [r4, #0]
   b67e0:	f003 fd37 	bl	ba252 <memcpy>
	buffer[len] = 0;
   b67e4:	6822      	ldr	r2, [r4, #0]
   b67e6:	68a3      	ldr	r3, [r4, #8]
   b67e8:	2100      	movs	r1, #0
   b67ea:	54d1      	strb	r1, [r2, r3]
	return *this;
   b67ec:	e7f2      	b.n	b67d4 <_ZN6String4copyEPKcj+0x18>

000b67ee <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b67ee:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b67f0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b67f2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b67f6:	4604      	mov	r4, r0
	len = 0;
   b67f8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b67fa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b67fc:	b141      	cbz	r1, b6810 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b67fe:	4608      	mov	r0, r1
   b6800:	9101      	str	r1, [sp, #4]
   b6802:	f003 fdc4 	bl	ba38e <strlen>
   b6806:	9901      	ldr	r1, [sp, #4]
   b6808:	4602      	mov	r2, r0
   b680a:	4620      	mov	r0, r4
   b680c:	f7ff ffd6 	bl	b67bc <_ZN6String4copyEPKcj>
}
   b6810:	4620      	mov	r0, r4
   b6812:	b002      	add	sp, #8
   b6814:	bd10      	pop	{r4, pc}

000b6816 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6816:	b538      	push	{r3, r4, r5, lr}
   b6818:	4605      	mov	r5, r0
	if (buffer) {
   b681a:	6800      	ldr	r0, [r0, #0]
{
   b681c:	460c      	mov	r4, r1
	if (buffer) {
   b681e:	b168      	cbz	r0, b683c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6820:	686a      	ldr	r2, [r5, #4]
   b6822:	688b      	ldr	r3, [r1, #8]
   b6824:	429a      	cmp	r2, r3
   b6826:	d307      	bcc.n	b6838 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6828:	6809      	ldr	r1, [r1, #0]
   b682a:	f003 fd8a 	bl	ba342 <strcpy>
			len = rhs.len;
   b682e:	68a3      	ldr	r3, [r4, #8]
   b6830:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6832:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6834:	60a3      	str	r3, [r4, #8]
}
   b6836:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6838:	f7ff fe7e 	bl	b6538 <free>
	buffer = rhs.buffer;
   b683c:	6823      	ldr	r3, [r4, #0]
   b683e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6840:	6863      	ldr	r3, [r4, #4]
   b6842:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6844:	68a3      	ldr	r3, [r4, #8]
   b6846:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6848:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b684a:	e9c4 3300 	strd	r3, r3, [r4]
   b684e:	e7f1      	b.n	b6834 <_ZN6String4moveERS_+0x1e>

000b6850 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b6850:	4288      	cmp	r0, r1
{
   b6852:	b510      	push	{r4, lr}
   b6854:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b6856:	d001      	beq.n	b685c <_ZN6StringaSEOS_+0xc>
   b6858:	f7ff ffdd 	bl	b6816 <_ZN6String4moveERS_>
	return *this;
}
   b685c:	4620      	mov	r0, r4
   b685e:	bd10      	pop	{r4, pc}

000b6860 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6860:	b513      	push	{r0, r1, r4, lr}
   b6862:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6864:	b159      	cbz	r1, b687e <_ZN6StringaSEPKc+0x1e>
   b6866:	4608      	mov	r0, r1
   b6868:	9101      	str	r1, [sp, #4]
   b686a:	f003 fd90 	bl	ba38e <strlen>
   b686e:	9901      	ldr	r1, [sp, #4]
   b6870:	4602      	mov	r2, r0
   b6872:	4620      	mov	r0, r4
   b6874:	f7ff ffa2 	bl	b67bc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6878:	4620      	mov	r0, r4
   b687a:	b002      	add	sp, #8
   b687c:	bd10      	pop	{r4, pc}
	else invalidate();
   b687e:	f7ff ff72 	bl	b6766 <_ZN6String10invalidateEv>
   b6882:	e7f9      	b.n	b6878 <_ZN6StringaSEPKc+0x18>

000b6884 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6884:	b510      	push	{r4, lr}
   b6886:	4604      	mov	r4, r0
   b6888:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b688a:	2300      	movs	r3, #0
	capacity = 0;
   b688c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6890:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6892:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6894:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6896:	a901      	add	r1, sp, #4
   b6898:	f7ff ff48 	bl	b672c <itoa>
	*this = buf;
   b689c:	a901      	add	r1, sp, #4
   b689e:	4620      	mov	r0, r4
   b68a0:	f7ff ffde 	bl	b6860 <_ZN6StringaSEPKc>
}
   b68a4:	4620      	mov	r0, r4
   b68a6:	b00a      	add	sp, #40	; 0x28
   b68a8:	bd10      	pop	{r4, pc}

000b68aa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b68aa:	b570      	push	{r4, r5, r6, lr}
   b68ac:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b68ae:	460e      	mov	r6, r1
   b68b0:	b909      	cbnz	r1, b68b6 <_ZN6String6concatEPKcj+0xc>
   b68b2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b68b4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b68b6:	b16a      	cbz	r2, b68d4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b68b8:	6884      	ldr	r4, [r0, #8]
   b68ba:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b68bc:	4621      	mov	r1, r4
   b68be:	f7ff ff69 	bl	b6794 <_ZN6String7reserveEj>
   b68c2:	2800      	cmp	r0, #0
   b68c4:	d0f5      	beq.n	b68b2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b68c6:	6828      	ldr	r0, [r5, #0]
   b68c8:	68ab      	ldr	r3, [r5, #8]
   b68ca:	4631      	mov	r1, r6
   b68cc:	4418      	add	r0, r3
   b68ce:	f003 fd38 	bl	ba342 <strcpy>
	len = newlen;
   b68d2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b68d4:	2001      	movs	r0, #1
   b68d6:	e7ed      	b.n	b68b4 <_ZN6String6concatEPKcj+0xa>

000b68d8 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b68d8:	688a      	ldr	r2, [r1, #8]
   b68da:	6809      	ldr	r1, [r1, #0]
   b68dc:	f7ff bfe5 	b.w	b68aa <_ZN6String6concatEPKcj>

000b68e0 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b68e0:	b513      	push	{r0, r1, r4, lr}
   b68e2:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b68e4:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b68e6:	b151      	cbz	r1, b68fe <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b68e8:	9101      	str	r1, [sp, #4]
   b68ea:	f003 fd50 	bl	ba38e <strlen>
   b68ee:	9901      	ldr	r1, [sp, #4]
   b68f0:	4602      	mov	r2, r0
   b68f2:	4620      	mov	r0, r4
}
   b68f4:	b002      	add	sp, #8
   b68f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b68fa:	f7ff bfd6 	b.w	b68aa <_ZN6String6concatEPKcj>
}
   b68fe:	b002      	add	sp, #8
   b6900:	bd10      	pop	{r4, pc}

000b6902 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b6902:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6904:	6882      	ldr	r2, [r0, #8]
   b6906:	b93a      	cbnz	r2, b6918 <_ZNK6String6equalsEPKc+0x16>
   b6908:	b121      	cbz	r1, b6914 <_ZNK6String6equalsEPKc+0x12>
   b690a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b690c:	fab0 f080 	clz	r0, r0
   b6910:	0940      	lsrs	r0, r0, #5
   b6912:	e000      	b.n	b6916 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6914:	2001      	movs	r0, #1
}
   b6916:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b6918:	6800      	ldr	r0, [r0, #0]
   b691a:	b909      	cbnz	r1, b6920 <_ZNK6String6equalsEPKc+0x1e>
   b691c:	7800      	ldrb	r0, [r0, #0]
   b691e:	e7f5      	b.n	b690c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b6920:	f003 fd05 	bl	ba32e <strcmp>
   b6924:	e7f2      	b.n	b690c <_ZNK6String6equalsEPKc+0xa>

000b6926 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b6926:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b6928:	6883      	ldr	r3, [r0, #8]
   b692a:	4293      	cmp	r3, r2
   b692c:	d907      	bls.n	b693e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b692e:	6804      	ldr	r4, [r0, #0]
   b6930:	6809      	ldr	r1, [r1, #0]
   b6932:	18a0      	adds	r0, r4, r2
   b6934:	f003 fd53 	bl	ba3de <strstr>
	if (found == NULL) return -1;
   b6938:	b108      	cbz	r0, b693e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b693a:	1b00      	subs	r0, r0, r4
}
   b693c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b693e:	f04f 30ff 	mov.w	r0, #4294967295
   b6942:	e7fb      	b.n	b693c <_ZNK6String7indexOfERKS_j+0x16>

000b6944 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b6944:	2200      	movs	r2, #0
   b6946:	f7ff bfee 	b.w	b6926 <_ZNK6String7indexOfERKS_j>
	...

000b694c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b694e:	429a      	cmp	r2, r3
{
   b6950:	460f      	mov	r7, r1
   b6952:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b6954:	490c      	ldr	r1, [pc, #48]	; (b6988 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b6956:	bf88      	it	hi
   b6958:	4613      	movhi	r3, r2
{
   b695a:	4614      	mov	r4, r2
   b695c:	4606      	mov	r6, r0
	if (left > right) {
   b695e:	bf84      	itt	hi
   b6960:	462c      	movhi	r4, r5
   b6962:	461d      	movhi	r5, r3
	String out;
   b6964:	f7ff ff43 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b6968:	68bb      	ldr	r3, [r7, #8]
   b696a:	42a3      	cmp	r3, r4
   b696c:	d30a      	bcc.n	b6984 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b696e:	6839      	ldr	r1, [r7, #0]
   b6970:	42ab      	cmp	r3, r5
   b6972:	bf94      	ite	ls
   b6974:	ebc4 0203 	rsbls	r2, r4, r3
   b6978:	ebc4 0205 	rsbhi	r2, r4, r5
   b697c:	4421      	add	r1, r4
   b697e:	4630      	mov	r0, r6
   b6980:	f7ff ff1c 	bl	b67bc <_ZN6String4copyEPKcj>
	return out;
}
   b6984:	4630      	mov	r0, r6
   b6986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6988:	000bcc71 	.word	0x000bcc71

000b698c <_ZNK6String9substringEj>:
{
   b698c:	b510      	push	{r4, lr}
   b698e:	4604      	mov	r4, r0
	return substring(left, len);
   b6990:	688b      	ldr	r3, [r1, #8]
   b6992:	f7ff ffdb 	bl	b694c <_ZNK6String9substringEjj>
}
   b6996:	4620      	mov	r0, r4
   b6998:	bd10      	pop	{r4, pc}
	...

000b699c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b699c:	b40e      	push	{r1, r2, r3}
   b699e:	b570      	push	{r4, r5, r6, lr}
   b69a0:	b087      	sub	sp, #28
   b69a2:	ad0b      	add	r5, sp, #44	; 0x2c
   b69a4:	4604      	mov	r4, r0
   b69a6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b69aa:	9201      	str	r2, [sp, #4]
   b69ac:	462b      	mov	r3, r5
   b69ae:	2105      	movs	r1, #5
   b69b0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b69b2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b69b4:	f7ff fde0 	bl	b6578 <vsnprintf>
    va_end(marker);

    String result;
   b69b8:	490b      	ldr	r1, [pc, #44]	; (b69e8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b69ba:	4606      	mov	r6, r0
    String result;
   b69bc:	4620      	mov	r0, r4
   b69be:	f7ff ff16 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b69c2:	4631      	mov	r1, r6
   b69c4:	4620      	mov	r0, r4
   b69c6:	f7ff fee5 	bl	b6794 <_ZN6String7reserveEj>
    if (result.buffer) {
   b69ca:	6820      	ldr	r0, [r4, #0]
   b69cc:	b130      	cbz	r0, b69dc <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b69ce:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b69d0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b69d2:	462b      	mov	r3, r5
   b69d4:	1c71      	adds	r1, r6, #1
   b69d6:	f7ff fdcf 	bl	b6578 <vsnprintf>
        va_end(marker);
        result.len = n;
   b69da:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b69dc:	4620      	mov	r0, r4
   b69de:	b007      	add	sp, #28
   b69e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b69e4:	b003      	add	sp, #12
   b69e6:	4770      	bx	lr
   b69e8:	000bcc71 	.word	0x000bcc71

000b69ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b69ec:	4770      	bx	lr

000b69ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b69ee:	4770      	bx	lr

000b69f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b69f0:	4770      	bx	lr

000b69f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b69f2:	4770      	bx	lr

000b69f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b69f4:	4b06      	ldr	r3, [pc, #24]	; (b6a10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b69f6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b69f8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b69fa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b69fe:	d005      	beq.n	b6a0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a00:	4608      	mov	r0, r1
   b6a02:	f002 fe2f 	bl	b9664 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a06:	2800      	cmp	r0, #0
   b6a08:	bf08      	it	eq
   b6a0a:	2400      	moveq	r4, #0
      }
   b6a0c:	4620      	mov	r0, r4
   b6a0e:	bd10      	pop	{r4, pc}
   b6a10:	000bce74 	.word	0x000bce74

000b6a14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a14:	4b06      	ldr	r3, [pc, #24]	; (b6a30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a16:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a18:	b510      	push	{r4, lr}
   b6a1a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a1e:	d005      	beq.n	b6a2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a20:	4608      	mov	r0, r1
   b6a22:	f002 fe1f 	bl	b9664 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a26:	2800      	cmp	r0, #0
   b6a28:	bf08      	it	eq
   b6a2a:	2400      	moveq	r4, #0
      }
   b6a2c:	4620      	mov	r0, r4
   b6a2e:	bd10      	pop	{r4, pc}
   b6a30:	000bce74 	.word	0x000bce74

000b6a34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a34:	4b06      	ldr	r3, [pc, #24]	; (b6a50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a36:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a38:	b510      	push	{r4, lr}
   b6a3a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a3e:	d005      	beq.n	b6a4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a40:	4608      	mov	r0, r1
   b6a42:	f002 fe0f 	bl	b9664 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a46:	2800      	cmp	r0, #0
   b6a48:	bf08      	it	eq
   b6a4a:	2400      	moveq	r4, #0
      }
   b6a4c:	4620      	mov	r0, r4
   b6a4e:	bd10      	pop	{r4, pc}
   b6a50:	000bce74 	.word	0x000bce74

000b6a54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a54:	b510      	push	{r4, lr}
   b6a56:	2168      	movs	r1, #104	; 0x68
   b6a58:	4604      	mov	r4, r0
   b6a5a:	f7fd fb20 	bl	b409e <_ZdlPvj>
   b6a5e:	4620      	mov	r0, r4
   b6a60:	bd10      	pop	{r4, pc}

000b6a62 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6a62:	b510      	push	{r4, lr}
   b6a64:	2128      	movs	r1, #40	; 0x28
   b6a66:	4604      	mov	r4, r0
   b6a68:	f7fd fb19 	bl	b409e <_ZdlPvj>
   b6a6c:	4620      	mov	r0, r4
   b6a6e:	bd10      	pop	{r4, pc}

000b6a70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6a70:	b510      	push	{r4, lr}
   b6a72:	2130      	movs	r1, #48	; 0x30
   b6a74:	4604      	mov	r4, r0
   b6a76:	f7fd fb12 	bl	b409e <_ZdlPvj>
   b6a7a:	4620      	mov	r0, r4
   b6a7c:	bd10      	pop	{r4, pc}

000b6a7e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6a7e:	2168      	movs	r1, #104	; 0x68
   b6a80:	f7fd bb0d 	b.w	b409e <_ZdlPvj>

000b6a84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6a84:	2128      	movs	r1, #40	; 0x28
   b6a86:	f7fd bb0a 	b.w	b409e <_ZdlPvj>

000b6a8a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6a8a:	2130      	movs	r1, #48	; 0x30
   b6a8c:	f7fd bb07 	b.w	b409e <_ZdlPvj>

000b6a90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6a92:	2500      	movs	r5, #0
   b6a94:	1cec      	adds	r4, r5, #3
   b6a96:	428c      	cmp	r4, r1
   b6a98:	d80d      	bhi.n	b6ab6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6a9a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6a9c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6a9e:	5d87      	ldrb	r7, [r0, r6]
   b6aa0:	4297      	cmp	r7, r2
   b6aa2:	d105      	bne.n	b6ab0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6aa4:	4426      	add	r6, r4
   b6aa6:	42b1      	cmp	r1, r6
   b6aa8:	d305      	bcc.n	b6ab6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6aaa:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6aac:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6ab0:	3401      	adds	r4, #1
   b6ab2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6ab4:	e7ee      	b.n	b6a94 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6ab6:	2000      	movs	r0, #0
   b6ab8:	e7f9      	b.n	b6aae <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6abc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6abc:	4a02      	ldr	r2, [pc, #8]	; (b6ac8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6abe:	4903      	ldr	r1, [pc, #12]	; (b6acc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6ac0:	200a      	movs	r0, #10
   b6ac2:	f7ff bc3d 	b.w	b6340 <panic_>
   b6ac6:	bf00      	nop
   b6ac8:	000b5f3d 	.word	0x000b5f3d
   b6acc:	000bccd4 	.word	0x000bccd4

000b6ad0 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6ad0:	4603      	mov	r3, r0
   b6ad2:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6ada:	4710      	bx	r2

000b6adc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6adc:	b430      	push	{r4, r5}
   b6ade:	460d      	mov	r5, r1
   b6ae0:	4611      	mov	r1, r2
   b6ae2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6ae4:	6803      	ldr	r3, [r0, #0]
   b6ae6:	6809      	ldr	r1, [r1, #0]
   b6ae8:	6828      	ldr	r0, [r5, #0]
   b6aea:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6aee:	46a4      	mov	ip, r4
      }
   b6af0:	bc30      	pop	{r4, r5}
   b6af2:	4760      	bx	ip

000b6af4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6af4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6af6:	b538      	push	{r3, r4, r5, lr}
   b6af8:	4604      	mov	r4, r0
	switch (__op)
   b6afa:	d102      	bne.n	b6b02 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6afc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6afe:	6023      	str	r3, [r4, #0]
	}
   b6b00:	e003      	b.n	b6b0a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6b02:	2a02      	cmp	r2, #2
   b6b04:	d003      	beq.n	b6b0e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6b06:	2a03      	cmp	r2, #3
   b6b08:	d00d      	beq.n	b6b26 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6b0a:	2000      	movs	r0, #0
   b6b0c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b0e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6b10:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b12:	f7fd fac0 	bl	b4096 <_Znwj>
   b6b16:	4603      	mov	r3, r0
   b6b18:	2800      	cmp	r0, #0
   b6b1a:	d0f0      	beq.n	b6afe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6b1c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6b20:	e883 0003 	stmia.w	r3, {r0, r1}
   b6b24:	e7eb      	b.n	b6afe <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6b26:	6800      	ldr	r0, [r0, #0]
   b6b28:	2800      	cmp	r0, #0
   b6b2a:	d0ee      	beq.n	b6b0a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6b2c:	2108      	movs	r1, #8
   b6b2e:	f7fd fab6 	bl	b409e <_ZdlPvj>
   b6b32:	e7ea      	b.n	b6b0a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6b34 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6b34:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b36:	b538      	push	{r3, r4, r5, lr}
   b6b38:	4604      	mov	r4, r0
	switch (__op)
   b6b3a:	d102      	bne.n	b6b42 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6b3c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6b3e:	6023      	str	r3, [r4, #0]
	}
   b6b40:	e003      	b.n	b6b4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6b42:	2a02      	cmp	r2, #2
   b6b44:	d003      	beq.n	b6b4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6b46:	2a03      	cmp	r2, #3
   b6b48:	d00d      	beq.n	b6b66 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6b4a:	2000      	movs	r0, #0
   b6b4c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b4e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6b50:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b52:	f7fd faa0 	bl	b4096 <_Znwj>
   b6b56:	4603      	mov	r3, r0
   b6b58:	2800      	cmp	r0, #0
   b6b5a:	d0f0      	beq.n	b6b3e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6b5c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6b60:	e883 0003 	stmia.w	r3, {r0, r1}
   b6b64:	e7eb      	b.n	b6b3e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6b66:	6800      	ldr	r0, [r0, #0]
   b6b68:	2800      	cmp	r0, #0
   b6b6a:	d0ee      	beq.n	b6b4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6b6c:	2108      	movs	r1, #8
   b6b6e:	f7fd fa96 	bl	b409e <_ZdlPvj>
   b6b72:	e7ea      	b.n	b6b4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6b74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6b74:	b510      	push	{r4, lr}
   b6b76:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6b78:	3058      	adds	r0, #88	; 0x58
   b6b7a:	f7fd fc37 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6b7e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6b86:	f7ff bde7 	b.w	b6758 <_ZN6StringD1Ev>

000b6b8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6b8a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6b8c:	6843      	ldr	r3, [r0, #4]
   b6b8e:	3b01      	subs	r3, #1
    {
   b6b90:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6b92:	6043      	str	r3, [r0, #4]
   b6b94:	b963      	cbnz	r3, b6bb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6b96:	6803      	ldr	r3, [r0, #0]
   b6b98:	689b      	ldr	r3, [r3, #8]
   b6b9a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6b9c:	68a3      	ldr	r3, [r4, #8]
   b6b9e:	3b01      	subs	r3, #1
   b6ba0:	60a3      	str	r3, [r4, #8]
   b6ba2:	b92b      	cbnz	r3, b6bb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6ba4:	6823      	ldr	r3, [r4, #0]
   b6ba6:	4620      	mov	r0, r4
   b6ba8:	68db      	ldr	r3, [r3, #12]
    }
   b6baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6bae:	4718      	bx	r3
    }
   b6bb0:	bd10      	pop	{r4, pc}

000b6bb2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6bb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6bb6:	b2da      	uxtb	r2, r3
   b6bb8:	2a09      	cmp	r2, #9
   b6bba:	d801      	bhi.n	b6bc0 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6bbc:	4618      	mov	r0, r3
   b6bbe:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6bc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6bc4:	2b05      	cmp	r3, #5
   b6bc6:	d801      	bhi.n	b6bcc <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6bc8:	3857      	subs	r0, #87	; 0x57
   b6bca:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6bcc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6bd0:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6bd2:	bf94      	ite	ls
   b6bd4:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6bd6:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b6bda:	4770      	bx	lr

000b6bdc <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6bdc:	b510      	push	{r4, lr}
            locked_(false) {
   b6bde:	2300      	movs	r3, #0
   b6be0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6be2:	4b04      	ldr	r3, [pc, #16]	; (b6bf4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6be4:	4604      	mov	r4, r0
   b6be6:	6818      	ldr	r0, [r3, #0]
   b6be8:	f7ff fa8a 	bl	b6100 <os_mutex_recursive_lock>
        locked_ = true;
   b6bec:	2301      	movs	r3, #1
   b6bee:	7023      	strb	r3, [r4, #0]
    }
   b6bf0:	4620      	mov	r0, r4
   b6bf2:	bd10      	pop	{r4, pc}
   b6bf4:	2003e694 	.word	0x2003e694

000b6bf8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6bf8:	b510      	push	{r4, lr}
        if (locked_) {
   b6bfa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6bfc:	4604      	mov	r4, r0
        if (locked_) {
   b6bfe:	b11b      	cbz	r3, b6c08 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6c00:	4b02      	ldr	r3, [pc, #8]	; (b6c0c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6c02:	6818      	ldr	r0, [r3, #0]
   b6c04:	f7ff fa84 	bl	b6110 <os_mutex_recursive_unlock>
    }
   b6c08:	4620      	mov	r0, r4
   b6c0a:	bd10      	pop	{r4, pc}
   b6c0c:	2003e694 	.word	0x2003e694

000b6c10 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6c10:	b082      	sub	sp, #8
   b6c12:	4603      	mov	r3, r0
    address_ = addr;
   b6c14:	6808      	ldr	r0, [r1, #0]
   b6c16:	6849      	ldr	r1, [r1, #4]
   b6c18:	466a      	mov	r2, sp
   b6c1a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6c1c:	466a      	mov	r2, sp
   b6c1e:	ca03      	ldmia	r2!, {r0, r1}
   b6c20:	6018      	str	r0, [r3, #0]
}
   b6c22:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6c24:	6059      	str	r1, [r3, #4]
}
   b6c26:	b002      	add	sp, #8
   b6c28:	4770      	bx	lr

000b6c2a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6c2a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6c2c:	7982      	ldrb	r2, [r0, #6]
   b6c2e:	798b      	ldrb	r3, [r1, #6]
   b6c30:	429a      	cmp	r2, r3
   b6c32:	d106      	bne.n	b6c42 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6c34:	2206      	movs	r2, #6
   b6c36:	f003 fafc 	bl	ba232 <memcmp>
   b6c3a:	fab0 f080 	clz	r0, r0
   b6c3e:	0940      	lsrs	r0, r0, #5
}
   b6c40:	bd08      	pop	{r3, pc}
    return false;
   b6c42:	2000      	movs	r0, #0
   b6c44:	e7fc      	b.n	b6c40 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6c46 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6c46:	f04f 33ff 	mov.w	r3, #4294967295
   b6c4a:	6003      	str	r3, [r0, #0]
   b6c4c:	8083      	strh	r3, [r0, #4]
}
   b6c4e:	2000      	movs	r0, #0
   b6c50:	4770      	bx	lr

000b6c52 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6c52:	b508      	push	{r3, lr}
   b6c54:	4602      	mov	r2, r0
        : address_{} {
   b6c56:	2100      	movs	r1, #0
   b6c58:	6001      	str	r1, [r0, #0]
   b6c5a:	6041      	str	r1, [r0, #4]
    clear();
   b6c5c:	f7ff fff3 	bl	b6c46 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6c60:	7191      	strb	r1, [r2, #6]
}
   b6c62:	4610      	mov	r0, r2
   b6c64:	bd08      	pop	{r3, pc}
	...

000b6c68 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6c68:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6c6a:	2301      	movs	r3, #1
   b6c6c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6c6e:	4b05      	ldr	r3, [pc, #20]	; (b6c84 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6c70:	4602      	mov	r2, r0
   b6c72:	f103 0110 	add.w	r1, r3, #16
   b6c76:	f853 4b04 	ldr.w	r4, [r3], #4
   b6c7a:	f842 4b04 	str.w	r4, [r2], #4
   b6c7e:	428b      	cmp	r3, r1
   b6c80:	d1f9      	bne.n	b6c76 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6c82:	bd10      	pop	{r4, pc}
   b6c84:	000bce82 	.word	0x000bce82

000b6c88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6c88:	b510      	push	{r4, lr}
    if (uuid128) {
   b6c8a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6c8c:	4604      	mov	r4, r0
    if (uuid128) {
   b6c8e:	b1b1      	cbz	r1, b6cbe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6c90:	2a01      	cmp	r2, #1
   b6c92:	f101 0210 	add.w	r2, r1, #16
   b6c96:	d10a      	bne.n	b6cae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6c98:	4601      	mov	r1, r0
   b6c9a:	f853 0b04 	ldr.w	r0, [r3], #4
   b6c9e:	f841 0b04 	str.w	r0, [r1], #4
   b6ca2:	4293      	cmp	r3, r2
   b6ca4:	d1f9      	bne.n	b6c9a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6ca6:	2301      	movs	r3, #1
   b6ca8:	6123      	str	r3, [r4, #16]
}
   b6caa:	4620      	mov	r0, r4
   b6cac:	bd10      	pop	{r4, pc}
   b6cae:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6cb0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6cb4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6cb8:	429a      	cmp	r2, r3
   b6cba:	d1f9      	bne.n	b6cb0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6cbc:	e7f3      	b.n	b6ca6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6cbe:	2210      	movs	r2, #16
   b6cc0:	f003 faef 	bl	ba2a2 <memset>
   b6cc4:	e7f1      	b.n	b6caa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6cc6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6cc6:	b538      	push	{r3, r4, r5, lr}
   b6cc8:	4604      	mov	r4, r0
   b6cca:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6ccc:	461a      	mov	r2, r3
   b6cce:	f7ff ffdb 	bl	b6c88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6cd2:	81a5      	strh	r5, [r4, #12]
}
   b6cd4:	4620      	mov	r0, r4
   b6cd6:	bd38      	pop	{r3, r4, r5, pc}

000b6cd8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6cd8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6cda:	6902      	ldr	r2, [r0, #16]
   b6cdc:	b922      	cbnz	r2, b6ce8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6cde:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6ce0:	3800      	subs	r0, #0
   b6ce2:	bf18      	it	ne
   b6ce4:	2001      	movne	r0, #1
}
   b6ce6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6ce8:	4902      	ldr	r1, [pc, #8]	; (b6cf4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6cea:	2210      	movs	r2, #16
   b6cec:	f003 faa1 	bl	ba232 <memcmp>
   b6cf0:	e7f6      	b.n	b6ce0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6cf2:	bf00      	nop
   b6cf4:	000bcea2 	.word	0x000bcea2

000b6cf8 <_ZNK8particle7BleUuid4typeEv>:
}
   b6cf8:	6900      	ldr	r0, [r0, #16]
   b6cfa:	4770      	bx	lr

000b6cfc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6cfc:	b538      	push	{r3, r4, r5, lr}
   b6cfe:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6d00:	2214      	movs	r2, #20
   b6d02:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6d04:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6d06:	f003 facc 	bl	ba2a2 <memset>
    if (type_ == BleUuidType::SHORT) {
   b6d0a:	6923      	ldr	r3, [r4, #16]
   b6d0c:	b91b      	cbnz	r3, b6d16 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6d0e:	89a3      	ldrh	r3, [r4, #12]
   b6d10:	802b      	strh	r3, [r5, #0]
}
   b6d12:	4628      	mov	r0, r5
   b6d14:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6d16:	2301      	movs	r3, #1
   b6d18:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6d1a:	4621      	mov	r1, r4
   b6d1c:	462b      	mov	r3, r5
   b6d1e:	f104 0210 	add.w	r2, r4, #16
   b6d22:	f851 0b04 	ldr.w	r0, [r1], #4
   b6d26:	f843 0b04 	str.w	r0, [r3], #4
   b6d2a:	4291      	cmp	r1, r2
   b6d2c:	d1f9      	bne.n	b6d22 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6d2e:	e7f0      	b.n	b6d12 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6d30 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6d30:	8980      	ldrh	r0, [r0, #12]
   b6d32:	4770      	bx	lr

000b6d34 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6d34:	4770      	bx	lr

000b6d36 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6d36:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6d38:	6902      	ldr	r2, [r0, #16]
   b6d3a:	690b      	ldr	r3, [r1, #16]
   b6d3c:	429a      	cmp	r2, r3
   b6d3e:	d106      	bne.n	b6d4e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6d40:	2210      	movs	r2, #16
   b6d42:	f003 fa76 	bl	ba232 <memcmp>
   b6d46:	fab0 f080 	clz	r0, r0
   b6d4a:	0940      	lsrs	r0, r0, #5
}
   b6d4c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6d4e:	2000      	movs	r0, #0
   b6d50:	e7fc      	b.n	b6d4c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6d54 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6d54:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6d56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6d5a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6d5c:	4b34      	ldr	r3, [pc, #208]	; (b6e30 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6d5e:	460c      	mov	r4, r1
   b6d60:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6d62:	4602      	mov	r2, r0
   b6d64:	f103 0110 	add.w	r1, r3, #16
   b6d68:	f853 0b04 	ldr.w	r0, [r3], #4
   b6d6c:	f842 0b04 	str.w	r0, [r2], #4
   b6d70:	428b      	cmp	r3, r1
   b6d72:	d1f9      	bne.n	b6d68 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6d74:	b344      	cbz	r4, b6dc8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6d76:	2124      	movs	r1, #36	; 0x24
   b6d78:	4620      	mov	r0, r4
   b6d7a:	f003 fb24 	bl	ba3c6 <strnlen>
   b6d7e:	2804      	cmp	r0, #4
   b6d80:	f04f 0500 	mov.w	r5, #0
   b6d84:	d123      	bne.n	b6dce <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6d86:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6d8a:	af01      	add	r7, sp, #4
   b6d8c:	1ca5      	adds	r5, r4, #2
   b6d8e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6d90:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6d94:	f7ff ff0d 	bl	b6bb2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6d98:	f1b0 0800 	subs.w	r8, r0, #0
   b6d9c:	db12      	blt.n	b6dc4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6d9e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6da2:	f7ff ff06 	bl	b6bb2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6da6:	2800      	cmp	r0, #0
   b6da8:	db0c      	blt.n	b6dc4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6daa:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6dac:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6db0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6db2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6db6:	d1eb      	bne.n	b6d90 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6db8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6dbc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6dbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6dc2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6dc4:	2300      	movs	r3, #0
   b6dc6:	6133      	str	r3, [r6, #16]
}
   b6dc8:	b002      	add	sp, #8
   b6dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6dce:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6dd2:	2124      	movs	r1, #36	; 0x24
   b6dd4:	4620      	mov	r0, r4
   b6dd6:	f003 faf6 	bl	ba3c6 <strnlen>
   b6dda:	42a8      	cmp	r0, r5
   b6ddc:	d807      	bhi.n	b6dee <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6dde:	4642      	mov	r2, r8
   b6de0:	2100      	movs	r1, #0
   b6de2:	4630      	mov	r0, r6
}
   b6de4:	b002      	add	sp, #8
   b6de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6dea:	f003 ba5a 	b.w	ba2a2 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6dee:	f1b8 0f00 	cmp.w	r8, #0
   b6df2:	d0e9      	beq.n	b6dc8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6df4:	5d60      	ldrb	r0, [r4, r5]
   b6df6:	f7ff fedc 	bl	b6bb2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6dfa:	0603      	lsls	r3, r0, #24
   b6dfc:	d415      	bmi.n	b6e2a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6dfe:	0100      	lsls	r0, r0, #4
   b6e00:	f108 38ff 	add.w	r8, r8, #4294967295
   b6e04:	b2c7      	uxtb	r7, r0
   b6e06:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6e0a:	2124      	movs	r1, #36	; 0x24
   b6e0c:	4620      	mov	r0, r4
   b6e0e:	f003 fada 	bl	ba3c6 <strnlen>
   b6e12:	3501      	adds	r5, #1
   b6e14:	42a8      	cmp	r0, r5
   b6e16:	d908      	bls.n	b6e2a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6e18:	5d60      	ldrb	r0, [r4, r5]
   b6e1a:	f7ff feca 	bl	b6bb2 <_ZN8particle11hexToNibbleEc>
   b6e1e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6e20:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6e22:	bfa4      	itt	ge
   b6e24:	4338      	orrge	r0, r7
   b6e26:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6e2a:	3501      	adds	r5, #1
   b6e2c:	e7d1      	b.n	b6dd2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6e2e:	bf00      	nop
   b6e30:	000bce82 	.word	0x000bce82

000b6e34 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6e34:	b513      	push	{r0, r1, r4, lr}
   b6e36:	4604      	mov	r4, r0
   b6e38:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6e3a:	f7ff ff15 	bl	b6c68 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6e3e:	4620      	mov	r0, r4
   b6e40:	9901      	ldr	r1, [sp, #4]
   b6e42:	f7ff ff87 	bl	b6d54 <_ZN8particle7BleUuid9constructEPKc>
}
   b6e46:	4620      	mov	r0, r4
   b6e48:	b002      	add	sp, #8
   b6e4a:	bd10      	pop	{r4, pc}

000b6e4c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6e4c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6e52:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6e54:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6e56:	8043      	strh	r3, [r0, #2]
   b6e58:	220e      	movs	r2, #14
   b6e5a:	4629      	mov	r1, r5
   b6e5c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6e5e:	7105      	strb	r5, [r0, #4]
   b6e60:	3006      	adds	r0, #6
   b6e62:	f003 fa1e 	bl	ba2a2 <memset>
   b6e66:	f104 0014 	add.w	r0, r4, #20
   b6e6a:	f7ff fefd 	bl	b6c68 <_ZN8particle7BleUuidC1Ev>
   b6e6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6e72:	f7ff fef9 	bl	b6c68 <_ZN8particle7BleUuidC1Ev>
   b6e76:	4904      	ldr	r1, [pc, #16]	; (b6e88 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6e78:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6e7c:	f7ff fcb7 	bl	b67ee <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6e80:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6e82:	4620      	mov	r0, r4
   b6e84:	bd38      	pop	{r3, r4, r5, pc}
   b6e86:	bf00      	nop
   b6e88:	000bcc71 	.word	0x000bcc71

000b6e8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6e8c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6e8e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6e92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6e96:	4293      	cmp	r3, r2
   b6e98:	4618      	mov	r0, r3
   b6e9a:	d006      	beq.n	b6eaa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6e9c:	6804      	ldr	r4, [r0, #0]
   b6e9e:	8824      	ldrh	r4, [r4, #0]
   b6ea0:	428c      	cmp	r4, r1
   b6ea2:	f103 0308 	add.w	r3, r3, #8
   b6ea6:	d1f6      	bne.n	b6e96 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6ea8:	bd10      	pop	{r4, pc}
        return nullptr;
   b6eaa:	2000      	movs	r0, #0
   b6eac:	e7fc      	b.n	b6ea8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6eb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6eb2:	4606      	mov	r6, r0
   b6eb4:	b085      	sub	sp, #20
   b6eb6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6eb8:	460d      	mov	r5, r1
   b6eba:	2900      	cmp	r1, #0
   b6ebc:	d050      	beq.n	b6f60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6ebe:	2a00      	cmp	r2, #0
   b6ec0:	d04e      	beq.n	b6f60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6ec2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6ec4:	7823      	ldrb	r3, [r4, #0]
   b6ec6:	2af4      	cmp	r2, #244	; 0xf4
   b6ec8:	bf28      	it	cs
   b6eca:	22f4      	movcs	r2, #244	; 0xf4
   b6ecc:	b343      	cbz	r3, b6f20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6ece:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6ed0:	0798      	lsls	r0, r3, #30
   b6ed2:	d509      	bpl.n	b6ee8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6ed4:	89a0      	ldrh	r0, [r4, #12]
   b6ed6:	9203      	str	r2, [sp, #12]
   b6ed8:	2300      	movs	r3, #0
   b6eda:	f7ff f893 	bl	b6004 <hal_ble_gatt_server_set_characteristic_value>
   b6ede:	2800      	cmp	r0, #0
   b6ee0:	9a03      	ldr	r2, [sp, #12]
   b6ee2:	da03      	bge.n	b6eec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6ee4:	b005      	add	sp, #20
   b6ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6ee8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6eec:	6834      	ldr	r4, [r6, #0]
   b6eee:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6ef0:	06d9      	lsls	r1, r3, #27
   b6ef2:	d509      	bpl.n	b6f08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6ef4:	2f01      	cmp	r7, #1
   b6ef6:	d007      	beq.n	b6f08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6ef8:	89a0      	ldrh	r0, [r4, #12]
   b6efa:	2300      	movs	r3, #0
   b6efc:	4629      	mov	r1, r5
}
   b6efe:	b005      	add	sp, #20
   b6f00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f04:	f7ff b8b0 	b.w	b6068 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6f08:	069b      	lsls	r3, r3, #26
   b6f0a:	d5eb      	bpl.n	b6ee4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6f0c:	2f02      	cmp	r7, #2
   b6f0e:	d0e9      	beq.n	b6ee4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f10:	89a0      	ldrh	r0, [r4, #12]
   b6f12:	2300      	movs	r3, #0
   b6f14:	4629      	mov	r1, r5
}
   b6f16:	b005      	add	sp, #20
   b6f18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f1c:	f7ff b8ae 	b.w	b607c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6f20:	8860      	ldrh	r0, [r4, #2]
   b6f22:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6f26:	4288      	cmp	r0, r1
   b6f28:	d01c      	beq.n	b6f64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6f2a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6f2c:	074e      	lsls	r6, r1, #29
   b6f2e:	d501      	bpl.n	b6f34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6f30:	2f01      	cmp	r7, #1
   b6f32:	d104      	bne.n	b6f3e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6f34:	070b      	lsls	r3, r1, #28
   b6f36:	d409      	bmi.n	b6f4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6f38:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6f3c:	e7d2      	b.n	b6ee4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f3e:	89a1      	ldrh	r1, [r4, #12]
   b6f40:	9300      	str	r3, [sp, #0]
   b6f42:	4613      	mov	r3, r2
   b6f44:	462a      	mov	r2, r5
   b6f46:	f7ff f871 	bl	b602c <hal_ble_gatt_client_write_without_response>
   b6f4a:	e7cb      	b.n	b6ee4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6f4c:	2f02      	cmp	r7, #2
   b6f4e:	d0f3      	beq.n	b6f38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f50:	2300      	movs	r3, #0
   b6f52:	89a1      	ldrh	r1, [r4, #12]
   b6f54:	9300      	str	r3, [sp, #0]
   b6f56:	4613      	mov	r3, r2
   b6f58:	462a      	mov	r2, r5
   b6f5a:	f7ff f85d 	bl	b6018 <hal_ble_gatt_client_write_with_response>
   b6f5e:	e7c1      	b.n	b6ee4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6f60:	4802      	ldr	r0, [pc, #8]	; (b6f6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6f62:	e7bf      	b.n	b6ee4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6f64:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6f68:	e7bc      	b.n	b6ee4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6f6a:	bf00      	nop
   b6f6c:	fffffef2 	.word	0xfffffef2

000b6f70 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b6f70:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b6f72:	688a      	ldr	r2, [r1, #8]
   b6f74:	6809      	ldr	r1, [r1, #0]
   b6f76:	f7ff bf9b 	b.w	b6eb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6f7a <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6f7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6f7c:	460c      	mov	r4, r1
   b6f7e:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6f80:	21f4      	movs	r1, #244	; 0xf4
   b6f82:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6f84:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6f86:	f003 fa1e 	bl	ba3c6 <strnlen>
   b6f8a:	9b01      	ldr	r3, [sp, #4]
   b6f8c:	4602      	mov	r2, r0
   b6f8e:	4621      	mov	r1, r4
   b6f90:	4628      	mov	r0, r5
}
   b6f92:	b003      	add	sp, #12
   b6f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6f98:	f7ff bf8a 	b.w	b6eb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6f9c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6fa0:	2600      	movs	r6, #0
   b6fa2:	6006      	str	r6, [r0, #0]
   b6fa4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6fa6:	2028      	movs	r0, #40	; 0x28
   b6fa8:	460c      	mov	r4, r1
   b6faa:	f7fd f874 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6fae:	1e05      	subs	r5, r0, #0
   b6fb0:	f105 080c 	add.w	r8, r5, #12
   b6fb4:	d00f      	beq.n	b6fd6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6fb6:	2301      	movs	r3, #1
   b6fb8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6fbc:	4b08      	ldr	r3, [pc, #32]	; (b6fe0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6fbe:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6fc0:	4640      	mov	r0, r8
   b6fc2:	f7ff fe51 	bl	b6c68 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6fc8:	622e      	str	r6, [r5, #32]
   b6fca:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6fce:	4646      	mov	r6, r8
   b6fd0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6fd2:	6823      	ldr	r3, [r4, #0]
   b6fd4:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6fd6:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6fda:	4638      	mov	r0, r7
   b6fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6fe0:	000bce44 	.word	0x000bce44

000b6fe4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6fe4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6fe6:	2500      	movs	r5, #0
   b6fe8:	6005      	str	r5, [r0, #0]
   b6fea:	4606      	mov	r6, r0
   b6fec:	2030      	movs	r0, #48	; 0x30
   b6fee:	f7fd f852 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6ff2:	4604      	mov	r4, r0
   b6ff4:	b188      	cbz	r0, b701a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6ff6:	2301      	movs	r3, #1
   b6ff8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6ffc:	4b09      	ldr	r3, [pc, #36]	; (b7024 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6ffe:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7000:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7004:	8183      	strh	r3, [r0, #12]
   b7006:	300e      	adds	r0, #14
   b7008:	f7ff fe23 	bl	b6c52 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b700c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7010:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7014:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7018:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b701a:	6074      	str	r4, [r6, #4]
   b701c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b701e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7020:	4630      	mov	r0, r6
   b7022:	bd70      	pop	{r4, r5, r6, pc}
   b7024:	000bce60 	.word	0x000bce60

000b7028 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7028:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b702a:	460d      	mov	r5, r1
   b702c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b702e:	a801      	add	r0, sp, #4
   b7030:	f7ff fdd4 	bl	b6bdc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7034:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7036:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b703a:	6023      	str	r3, [r4, #0]
   b703c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7040:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7042:	a801      	add	r0, sp, #4
   b7044:	f7ff fdd8 	bl	b6bf8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7048:	4620      	mov	r0, r4
   b704a:	b003      	add	sp, #12
   b704c:	bd30      	pop	{r4, r5, pc}

000b704e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b704e:	b530      	push	{r4, r5, lr}
   b7050:	4605      	mov	r5, r0
   b7052:	b087      	sub	sp, #28
   b7054:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7056:	a801      	add	r0, sp, #4
   b7058:	f7ff fdc0 	bl	b6bdc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b705c:	682a      	ldr	r2, [r5, #0]
   b705e:	6823      	ldr	r3, [r4, #0]
   b7060:	8812      	ldrh	r2, [r2, #0]
   b7062:	881b      	ldrh	r3, [r3, #0]
   b7064:	429a      	cmp	r2, r3
   b7066:	d10d      	bne.n	b7084 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7068:	4629      	mov	r1, r5
   b706a:	a802      	add	r0, sp, #8
   b706c:	f7ff ffdc 	bl	b7028 <_ZNK8particle13BlePeerDevice7addressEv>
   b7070:	4621      	mov	r1, r4
   b7072:	a804      	add	r0, sp, #16
   b7074:	f7ff ffd8 	bl	b7028 <_ZNK8particle13BlePeerDevice7addressEv>
   b7078:	a904      	add	r1, sp, #16
   b707a:	a802      	add	r0, sp, #8
   b707c:	f7ff fdd5 	bl	b6c2a <_ZNK8particle10BleAddresseqERKS0_>
   b7080:	4604      	mov	r4, r0
   b7082:	b900      	cbnz	r0, b7086 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7084:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7086:	a801      	add	r0, sp, #4
   b7088:	f7ff fdb6 	bl	b6bf8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b708c:	4620      	mov	r0, r4
   b708e:	b007      	add	sp, #28
   b7090:	bd30      	pop	{r4, r5, pc}
	...

000b7094 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7094:	b510      	push	{r4, lr}
   b7096:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7098:	2064      	movs	r0, #100	; 0x64
   b709a:	f7fc fffc 	bl	b4096 <_Znwj>
   b709e:	b168      	cbz	r0, b70bc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b70a0:	2300      	movs	r3, #0
   b70a2:	e9c0 3300 	strd	r3, r3, [r0]
   b70a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b70aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b70ae:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b70b2:	6203      	str	r3, [r0, #32]
   b70b4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b70b6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b70b8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b70ba:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b70bc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b70be:	b920      	cbnz	r0, b70ca <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b70c0:	4a0a      	ldr	r2, [pc, #40]	; (b70ec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b70c2:	490b      	ldr	r1, [pc, #44]	; (b70f0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b70c4:	200a      	movs	r0, #10
   b70c6:	f7ff f93b 	bl	b6340 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b70ca:	2000      	movs	r0, #0
   b70cc:	f7fe ff5e 	bl	b5f8c <hal_ble_stack_init>
   b70d0:	b120      	cbz	r0, b70dc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b70d2:	4a06      	ldr	r2, [pc, #24]	; (b70ec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b70d4:	4907      	ldr	r1, [pc, #28]	; (b70f4 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b70d6:	200a      	movs	r0, #10
   b70d8:	f7ff f932 	bl	b6340 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b70dc:	6821      	ldr	r1, [r4, #0]
   b70de:	4806      	ldr	r0, [pc, #24]	; (b70f8 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b70e0:	2200      	movs	r2, #0
   b70e2:	f7fe ffb7 	bl	b6054 <hal_ble_set_callback_on_periph_link_events>
}
   b70e6:	4620      	mov	r0, r4
   b70e8:	bd10      	pop	{r4, pc}
   b70ea:	bf00      	nop
   b70ec:	000b5f3d 	.word	0x000b5f3d
   b70f0:	000bccd4 	.word	0x000bccd4
   b70f4:	000bcd12 	.word	0x000bcd12
   b70f8:	000b76c9 	.word	0x000b76c9

000b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b70fc:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b70fe:	4c0a      	ldr	r4, [pc, #40]	; (b7128 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7100:	7823      	ldrb	r3, [r4, #0]
   b7102:	f3bf 8f5b 	dmb	ish
   b7106:	07db      	lsls	r3, r3, #31
   b7108:	d40c      	bmi.n	b7124 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b710a:	4620      	mov	r0, r4
   b710c:	f7fc ffc9 	bl	b40a2 <__cxa_guard_acquire>
   b7110:	b140      	cbz	r0, b7124 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7112:	4806      	ldr	r0, [pc, #24]	; (b712c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7114:	f7ff ffbe 	bl	b7094 <_ZN8particle14BleLocalDeviceC1Ev>
   b7118:	4620      	mov	r0, r4
   b711a:	f7fc ffc7 	bl	b40ac <__cxa_guard_release>
   b711e:	4804      	ldr	r0, [pc, #16]	; (b7130 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7120:	f003 f87a 	bl	ba218 <atexit>
    return instance;
}
   b7124:	4801      	ldr	r0, [pc, #4]	; (b712c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7126:	bd10      	pop	{r4, pc}
   b7128:	2003e68c 	.word	0x2003e68c
   b712c:	2003e698 	.word	0x2003e698
   b7130:	000b7371 	.word	0x000b7371

000b7134 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7134:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7136:	6803      	ldr	r3, [r0, #0]
   b7138:	3b09      	subs	r3, #9
   b713a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b713c:	b08d      	sub	sp, #52	; 0x34
   b713e:	4604      	mov	r4, r0
   b7140:	460d      	mov	r5, r1
    switch (event->type) {
   b7142:	d811      	bhi.n	b7168 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7144:	f7ff ffda 	bl	b70fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7148:	88a1      	ldrh	r1, [r4, #4]
   b714a:	6800      	ldr	r0, [r0, #0]
   b714c:	f7ff fe9e 	bl	b6e8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7150:	4603      	mov	r3, r0
   b7152:	b958      	cbnz	r0, b716c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7154:	2220      	movs	r2, #32
   b7156:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b715a:	4a0b      	ldr	r2, [pc, #44]	; (b7188 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b715c:	9200      	str	r2, [sp, #0]
   b715e:	490b      	ldr	r1, [pc, #44]	; (b718c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7160:	aa04      	add	r2, sp, #16
   b7162:	2032      	movs	r0, #50	; 0x32
   b7164:	f7ff f8f4 	bl	b6350 <log_message>
}
   b7168:	b00d      	add	sp, #52	; 0x34
   b716a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b716c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b716e:	2a00      	cmp	r2, #0
   b7170:	d0fa      	beq.n	b7168 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7172:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7176:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b717a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b717e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7180:	aa04      	add	r2, sp, #16
   b7182:	a903      	add	r1, sp, #12
   b7184:	47a0      	blx	r4
}
   b7186:	e7ef      	b.n	b7168 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7188:	000bcd54 	.word	0x000bcd54
   b718c:	000bcceb 	.word	0x000bcceb

000b7190 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7190:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7192:	2000      	movs	r0, #0
   b7194:	f7fe fefa 	bl	b5f8c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7198:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b719c:	bd08      	pop	{r3, pc}

000b719e <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b719e:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b71a0:	2100      	movs	r1, #0
   b71a2:	f7fe befb 	b.w	b5f9c <hal_ble_select_antenna>

000b71a6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b71a6:	b919      	cbnz	r1, b71b0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b71a8:	460a      	mov	r2, r1
   b71aa:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b71ac:	f7fe befe 	b.w	b5fac <hal_ble_gap_set_advertising_data>
   b71b0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b71b4:	2200      	movs	r2, #0
   b71b6:	e7f9      	b.n	b71ac <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b71b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b71b8:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b71ba:	1e14      	subs	r4, r2, #0
   b71bc:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b71be:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b71c0:	db02      	blt.n	b71c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b71c2:	1862      	adds	r2, r4, r1
   b71c4:	429a      	cmp	r2, r3
   b71c6:	dd00      	ble.n	b71ca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b71c8:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b71ca:	682a      	ldr	r2, [r5, #0]
   b71cc:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b71ce:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b71d0:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b71d2:	1a52      	subs	r2, r2, r1
   b71d4:	f003 f84b 	bl	ba26e <memmove>
    size_ -= n;
   b71d8:	686a      	ldr	r2, [r5, #4]
   b71da:	1b12      	subs	r2, r2, r4
   b71dc:	606a      	str	r2, [r5, #4]
}
   b71de:	bd38      	pop	{r3, r4, r5, pc}

000b71e0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b71e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b71e2:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b71e4:	4604      	mov	r4, r0
   b71e6:	460d      	mov	r5, r1
   b71e8:	ab01      	add	r3, sp, #4
   b71ea:	e9d0 0100 	ldrd	r0, r1, [r0]
   b71ee:	f7ff fc4f 	bl	b6a90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b71f2:	4602      	mov	r2, r0
   b71f4:	b138      	cbz	r0, b7206 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b71f6:	9901      	ldr	r1, [sp, #4]
   b71f8:	4620      	mov	r0, r4
   b71fa:	f7ff ffdd 	bl	b71b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b71fe:	4629      	mov	r1, r5
   b7200:	4620      	mov	r0, r4
   b7202:	f7ff ffed 	bl	b71e0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7206:	b003      	add	sp, #12
   b7208:	bd30      	pop	{r4, r5, pc}

000b720a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b720a:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b720c:	460c      	mov	r4, r1
   b720e:	b929      	cbnz	r1, b721c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7210:	460a      	mov	r2, r1
   b7212:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7218:	f7fe bed0 	b.w	b5fbc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b721c:	2101      	movs	r1, #1
   b721e:	4620      	mov	r0, r4
   b7220:	f7ff ffde 	bl	b71e0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7224:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7228:	2200      	movs	r2, #0
   b722a:	e7f3      	b.n	b7214 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b722c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b722c:	b538      	push	{r3, r4, r5, lr}
   b722e:	4604      	mov	r4, r0
   b7230:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7232:	f7ff ffb8 	bl	b71a6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7236:	2800      	cmp	r0, #0
   b7238:	db0a      	blt.n	b7250 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b723a:	4629      	mov	r1, r5
   b723c:	4620      	mov	r0, r4
   b723e:	f7ff ffe4 	bl	b720a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7242:	2800      	cmp	r0, #0
   b7244:	db04      	blt.n	b7250 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b724a:	2000      	movs	r0, #0
   b724c:	f7fe bebe 	b.w	b5fcc <hal_ble_gap_start_advertising>
}
   b7250:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7254 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7254:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7256:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7258:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b725a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b725c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b725e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7260:	f7fc ff19 	bl	b4096 <_Znwj>
   b7264:	b118      	cbz	r0, b726e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7266:	682b      	ldr	r3, [r5, #0]
   b7268:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b726a:	686b      	ldr	r3, [r5, #4]
   b726c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b726e:	4b03      	ldr	r3, [pc, #12]	; (b727c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7270:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7272:	4b03      	ldr	r3, [pc, #12]	; (b7280 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7274:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7276:	60a3      	str	r3, [r4, #8]
      }
   b7278:	4620      	mov	r0, r4
   b727a:	bd38      	pop	{r3, r4, r5, pc}
   b727c:	000b6add 	.word	0x000b6add
   b7280:	000b6b35 	.word	0x000b6b35

000b7284 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7284:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7286:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7288:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b728a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b728c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b728e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7290:	f7fc ff01 	bl	b4096 <_Znwj>
   b7294:	b118      	cbz	r0, b729e <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b7296:	682b      	ldr	r3, [r5, #0]
   b7298:	6003      	str	r3, [r0, #0]
   b729a:	686b      	ldr	r3, [r5, #4]
   b729c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b729e:	4b03      	ldr	r3, [pc, #12]	; (b72ac <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b72a0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b72a2:	4b03      	ldr	r3, [pc, #12]	; (b72b0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72a4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b72a6:	60a3      	str	r3, [r4, #8]
      }
   b72a8:	4620      	mov	r0, r4
   b72aa:	bd38      	pop	{r3, r4, r5, pc}
   b72ac:	000b6ad1 	.word	0x000b6ad1
   b72b0:	000b6af5 	.word	0x000b6af5

000b72b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b72b4:	680b      	ldr	r3, [r1, #0]
   b72b6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b72b8:	b113      	cbz	r3, b72c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b72ba:	685a      	ldr	r2, [r3, #4]
   b72bc:	3201      	adds	r2, #1
   b72be:	605a      	str	r2, [r3, #4]
      }
   b72c0:	4770      	bx	lr

000b72c2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b72c2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b72c4:	f851 3b04 	ldr.w	r3, [r1], #4
   b72c8:	4604      	mov	r4, r0
   b72ca:	f840 3b04 	str.w	r3, [r0], #4
   b72ce:	f7ff fff1 	bl	b72b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b72d2:	6823      	ldr	r3, [r4, #0]
   b72d4:	b90b      	cbnz	r3, b72da <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b72d6:	f7ff fbf1 	bl	b6abc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b72da:	4620      	mov	r0, r4
   b72dc:	bd10      	pop	{r4, pc}

000b72de <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b72de:	b510      	push	{r4, lr}
   b72e0:	f851 3b04 	ldr.w	r3, [r1], #4
   b72e4:	4604      	mov	r4, r0
   b72e6:	f840 3b04 	str.w	r3, [r0], #4
   b72ea:	f7ff ffe3 	bl	b72b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b72ee:	4620      	mov	r0, r4
   b72f0:	bd10      	pop	{r4, pc}

000b72f2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b72f2:	b510      	push	{r4, lr}
   b72f4:	f851 3b04 	ldr.w	r3, [r1], #4
   b72f8:	4604      	mov	r4, r0
   b72fa:	f840 3b04 	str.w	r3, [r0], #4
   b72fe:	f7ff ffd9 	bl	b72b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7302:	4620      	mov	r0, r4
   b7304:	bd10      	pop	{r4, pc}

000b7306 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7306:	b510      	push	{r4, lr}
   b7308:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b730a:	3004      	adds	r0, #4
   b730c:	f7fd fd00 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7310:	4620      	mov	r0, r4
   b7312:	bd10      	pop	{r4, pc}

000b7314 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7314:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7316:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b731a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b731c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7320:	42ae      	cmp	r6, r5
   b7322:	d004      	beq.n	b732e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7324:	1d28      	adds	r0, r5, #4
   b7326:	f7fd fcf3 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b732a:	3508      	adds	r5, #8
   b732c:	e7f8      	b.n	b7320 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b732e:	6820      	ldr	r0, [r4, #0]
   b7330:	f7ff f902 	bl	b6538 <free>
}
   b7334:	4620      	mov	r0, r4
   b7336:	bd70      	pop	{r4, r5, r6, pc}

000b7338 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7338:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b733a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b733e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7340:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7344:	42ae      	cmp	r6, r5
   b7346:	d004      	beq.n	b7352 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7348:	1d28      	adds	r0, r5, #4
   b734a:	f7fd fce1 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b734e:	3508      	adds	r5, #8
   b7350:	e7f8      	b.n	b7344 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7352:	6820      	ldr	r0, [r4, #0]
   b7354:	f7ff f8f0 	bl	b6538 <free>
}
   b7358:	4620      	mov	r0, r4
   b735a:	bd70      	pop	{r4, r5, r6, pc}

000b735c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b735c:	b510      	push	{r4, lr}
   b735e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7360:	3024      	adds	r0, #36	; 0x24
   b7362:	f7ff ffe9 	bl	b7338 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7366:	f104 0018 	add.w	r0, r4, #24
   b736a:	f7ff ffd3 	bl	b7314 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b736e:	bd10      	pop	{r4, pc}

000b7370 <__tcf_0>:
    static BleLocalDevice instance;
   b7370:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7372:	4b17      	ldr	r3, [pc, #92]	; (b73d0 <__tcf_0+0x60>)
   b7374:	681c      	ldr	r4, [r3, #0]
   b7376:	b354      	cbz	r4, b73ce <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7378:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b737c:	f7fd f836 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7380:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7384:	f7fd f832 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7388:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b738c:	f7fd f82e 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7390:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7394:	f7fd f82a 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7398:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b739c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b73a0:	42ae      	cmp	r6, r5
   b73a2:	d004      	beq.n	b73ae <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b73a4:	1d28      	adds	r0, r5, #4
   b73a6:	f7fd fcb3 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b73aa:	3508      	adds	r5, #8
   b73ac:	e7f8      	b.n	b73a0 <__tcf_0+0x30>
    ::free(ptr);
   b73ae:	69a0      	ldr	r0, [r4, #24]
   b73b0:	f7ff f8c2 	bl	b6538 <free>
    ~BleLocalDeviceImpl() = default;
   b73b4:	f104 000c 	add.w	r0, r4, #12
   b73b8:	f7ff ffbe 	bl	b7338 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b73bc:	4620      	mov	r0, r4
   b73be:	f7ff ffa9 	bl	b7314 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b73c2:	4620      	mov	r0, r4
   b73c4:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b73c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b73ca:	f7fc be68 	b.w	b409e <_ZdlPvj>
   b73ce:	bd70      	pop	{r4, r5, r6, pc}
   b73d0:	2003e698 	.word	0x2003e698

000b73d4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b73d4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b73d6:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b73d8:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b73dc:	e9c1 3300 	strd	r3, r3, [r1]
   b73e0:	6803      	ldr	r3, [r0, #0]
   b73e2:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b73e4:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b73e6:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b73e8:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b73ea:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b73ec:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b73ee:	f7fd fc8f 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b73f2:	b002      	add	sp, #8
   b73f4:	bd10      	pop	{r4, pc}

000b73f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b73f6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b73f8:	b510      	push	{r4, lr}
      if (_M_empty())
   b73fa:	b90a      	cbnz	r2, b7400 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b73fc:	f002 f92e 	bl	b965c <_ZSt25__throw_bad_function_callv>
    }
   b7400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7404:	68c3      	ldr	r3, [r0, #12]
   b7406:	4718      	bx	r3

000b7408 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7408:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b740a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b740c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b740e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7410:	dd03      	ble.n	b741a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7412:	f7ff f899 	bl	b6548 <realloc>
            if (!d) {
   b7416:	b918      	cbnz	r0, b7420 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7418:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b741a:	f7ff f88d 	bl	b6538 <free>
        T* d = nullptr;
   b741e:	2000      	movs	r0, #0
        data_ = d;
   b7420:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7422:	60a5      	str	r5, [r4, #8]
        return true;
   b7424:	2001      	movs	r0, #1
   b7426:	e7f7      	b.n	b7418 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7428 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7428:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b742a:	6883      	ldr	r3, [r0, #8]
   b742c:	428b      	cmp	r3, r1
   b742e:	da02      	bge.n	b7436 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7430:	f7ff ffea 	bl	b7408 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7434:	bd08      	pop	{r3, pc}
    return true;
   b7436:	2001      	movs	r0, #1
   b7438:	e7fc      	b.n	b7434 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b743a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b743a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b743e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7440:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7442:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7444:	4419      	add	r1, r3
   b7446:	6883      	ldr	r3, [r0, #8]
   b7448:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b744a:	4604      	mov	r4, r0
   b744c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b744e:	dc12      	bgt.n	b7476 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7450:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7452:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7454:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7456:	1bd2      	subs	r2, r2, r7
   b7458:	4631      	mov	r1, r6
   b745a:	1970      	adds	r0, r6, r5
   b745c:	f002 ff07 	bl	ba26e <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7460:	462a      	mov	r2, r5
   b7462:	4641      	mov	r1, r8
   b7464:	4630      	mov	r0, r6
   b7466:	f002 fef4 	bl	ba252 <memcpy>
    size_ += n;
   b746a:	6863      	ldr	r3, [r4, #4]
   b746c:	442b      	add	r3, r5
   b746e:	6063      	str	r3, [r4, #4]
    return true;
   b7470:	2001      	movs	r0, #1
}
   b7472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7476:	f7ff ffc7 	bl	b7408 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b747a:	2800      	cmp	r0, #0
   b747c:	d1e8      	bne.n	b7450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b747e:	e7f8      	b.n	b7472 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7480 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7482:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7484:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7488:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b748a:	4604      	mov	r4, r0
   b748c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b748e:	da0b      	bge.n	b74a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7490:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7492:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7494:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7496:	1b52      	subs	r2, r2, r5
   b7498:	1c48      	adds	r0, r1, #1
   b749a:	f002 fee8 	bl	ba26e <memmove>
    new(p) T(std::move(value));
   b749e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b74a0:	6863      	ldr	r3, [r4, #4]
   b74a2:	3301      	adds	r3, #1
   b74a4:	6063      	str	r3, [r4, #4]
}
   b74a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74a8:	3101      	adds	r1, #1
   b74aa:	f7ff ffad 	bl	b7408 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b74ae:	2800      	cmp	r0, #0
   b74b0:	d1ee      	bne.n	b7490 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b74b2:	e7f8      	b.n	b74a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b74b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b74b4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b74b6:	6841      	ldr	r1, [r0, #4]
   b74b8:	f7ff bfe2 	b.w	b7480 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b74bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b74bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b74c0:	4604      	mov	r4, r0
   b74c2:	461d      	mov	r5, r3
   b74c4:	460f      	mov	r7, r1
   b74c6:	ab01      	add	r3, sp, #4
   b74c8:	4690      	mov	r8, r2
   b74ca:	460a      	mov	r2, r1
   b74cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b74d0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b74d4:	f7ff fadc 	bl	b6a90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b74d8:	1cae      	adds	r6, r5, #2
   b74da:	6863      	ldr	r3, [r4, #4]
   b74dc:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b74de:	f1b9 0f00 	cmp.w	r9, #0
   b74e2:	d126      	bne.n	b7532 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b74e4:	b328      	cbz	r0, b7532 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b74e6:	4433      	add	r3, r6
   b74e8:	1a1b      	subs	r3, r3, r0
   b74ea:	2bff      	cmp	r3, #255	; 0xff
   b74ec:	d809      	bhi.n	b7502 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b74ee:	9901      	ldr	r1, [sp, #4]
   b74f0:	4620      	mov	r0, r4
   b74f2:	f7ff fe61 	bl	b71b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b74f6:	6861      	ldr	r1, [r4, #4]
   b74f8:	4620      	mov	r0, r4
   b74fa:	4431      	add	r1, r6
   b74fc:	f7ff ff94 	bl	b7428 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7500:	b918      	cbnz	r0, b750a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7502:	6860      	ldr	r0, [r4, #4]
}
   b7504:	b003      	add	sp, #12
   b7506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b750a:	1c6a      	adds	r2, r5, #1
   b750c:	9901      	ldr	r1, [sp, #4]
   b750e:	b2d2      	uxtb	r2, r2
   b7510:	4620      	mov	r0, r4
   b7512:	f7ff ffb5 	bl	b7480 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7516:	9901      	ldr	r1, [sp, #4]
   b7518:	463a      	mov	r2, r7
   b751a:	3101      	adds	r1, #1
   b751c:	4620      	mov	r0, r4
   b751e:	f7ff ffaf 	bl	b7480 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7522:	9901      	ldr	r1, [sp, #4]
   b7524:	462b      	mov	r3, r5
   b7526:	4642      	mov	r2, r8
   b7528:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b752a:	4620      	mov	r0, r4
   b752c:	f7ff ff85 	bl	b743a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7530:	e7e7      	b.n	b7502 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7532:	18f1      	adds	r1, r6, r3
   b7534:	29ff      	cmp	r1, #255	; 0xff
   b7536:	d8e4      	bhi.n	b7502 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7538:	4620      	mov	r0, r4
   b753a:	f7ff ff75 	bl	b7428 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b753e:	2800      	cmp	r0, #0
   b7540:	d0df      	beq.n	b7502 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7542:	1c69      	adds	r1, r5, #1
   b7544:	b2c9      	uxtb	r1, r1
   b7546:	4620      	mov	r0, r4
   b7548:	f7ff ffb4 	bl	b74b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b754c:	4639      	mov	r1, r7
   b754e:	4620      	mov	r0, r4
   b7550:	f7ff ffb0 	bl	b74b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7554:	6861      	ldr	r1, [r4, #4]
   b7556:	462b      	mov	r3, r5
   b7558:	4642      	mov	r2, r8
   b755a:	e7e6      	b.n	b752a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b755c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b755c:	b430      	push	{r4, r5}
   b755e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7562:	b11a      	cbz	r2, b756c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7564:	9502      	str	r5, [sp, #8]
}
   b7566:	bc30      	pop	{r4, r5}
   b7568:	f7ff bfa8 	b.w	b74bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b756c:	6840      	ldr	r0, [r0, #4]
}
   b756e:	bc30      	pop	{r4, r5}
   b7570:	4770      	bx	lr

000b7572 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7572:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7574:	2300      	movs	r3, #0
   b7576:	e9c0 3300 	strd	r3, r3, [r0]
   b757a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b757c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b757e:	9300      	str	r3, [sp, #0]
   b7580:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7582:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7586:	4619      	mov	r1, r3
   b7588:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b758c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b758e:	f7ff ffe5 	bl	b755c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7592:	4620      	mov	r0, r4
   b7594:	b004      	add	sp, #16
   b7596:	bd10      	pop	{r4, pc}

000b7598 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b7598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b759a:	460a      	mov	r2, r1
   b759c:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b759e:	2114      	movs	r1, #20
   b75a0:	4610      	mov	r0, r2
   b75a2:	9203      	str	r2, [sp, #12]
   b75a4:	f002 ff0f 	bl	ba3c6 <strnlen>
   b75a8:	2100      	movs	r1, #0
   b75aa:	4603      	mov	r3, r0
   b75ac:	9100      	str	r1, [sp, #0]
   b75ae:	9a03      	ldr	r2, [sp, #12]
   b75b0:	2109      	movs	r1, #9
   b75b2:	4620      	mov	r0, r4
   b75b4:	f7ff ffd2 	bl	b755c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b75b8:	b004      	add	sp, #16
   b75ba:	bd10      	pop	{r4, pc}

000b75bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b75bc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b75be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75c0:	4604      	mov	r4, r0
   b75c2:	460d      	mov	r5, r1
   b75c4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b75c6:	d914      	bls.n	b75f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b75c8:	4290      	cmp	r0, r2
   b75ca:	d213      	bcs.n	b75f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b75cc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b75d0:	1a75      	subs	r5, r6, r1
   b75d2:	f1a1 0708 	sub.w	r7, r1, #8
   b75d6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b75d8:	42b7      	cmp	r7, r6
   b75da:	d018      	beq.n	b760e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b75dc:	b11c      	cbz	r4, b75e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b75de:	4631      	mov	r1, r6
   b75e0:	4620      	mov	r0, r4
   b75e2:	f7ff fe86 	bl	b72f2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b75e6:	1d30      	adds	r0, r6, #4
   b75e8:	f7fd fb92 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b75ec:	3e08      	subs	r6, #8
   b75ee:	3c08      	subs	r4, #8
   b75f0:	e7f2      	b.n	b75d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b75f2:	d00c      	beq.n	b760e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b75f4:	42b5      	cmp	r5, r6
   b75f6:	d00a      	beq.n	b760e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b75f8:	b11c      	cbz	r4, b7602 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b75fa:	4629      	mov	r1, r5
   b75fc:	4620      	mov	r0, r4
   b75fe:	f7ff fe78 	bl	b72f2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7602:	1d28      	adds	r0, r5, #4
   b7604:	f7fd fb84 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7608:	3508      	adds	r5, #8
   b760a:	3408      	adds	r4, #8
   b760c:	e7f2      	b.n	b75f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7610 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7612:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7614:	6846      	ldr	r6, [r0, #4]
   b7616:	4668      	mov	r0, sp
   b7618:	f7ff fe6b 	bl	b72f2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b761c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7620:	429f      	cmp	r7, r3
   b7622:	db12      	blt.n	b764a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7624:	3701      	adds	r7, #1
        if (n > 0) {
   b7626:	2f00      	cmp	r7, #0
   b7628:	dd29      	ble.n	b767e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b762a:	00f8      	lsls	r0, r7, #3
   b762c:	f7fe ff7c 	bl	b6528 <malloc>
            if (!d) {
   b7630:	4605      	mov	r5, r0
   b7632:	b1f0      	cbz	r0, b7672 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7634:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7638:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b763c:	f7ff ffbe 	bl	b75bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7640:	6820      	ldr	r0, [r4, #0]
   b7642:	f7fe ff79 	bl	b6538 <free>
        data_ = d;
   b7646:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7648:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b764a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b764c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b764e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7652:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7656:	4631      	mov	r1, r6
   b7658:	f106 0008 	add.w	r0, r6, #8
   b765c:	f7ff ffae 	bl	b75bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7660:	b11e      	cbz	r6, b766a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7662:	4669      	mov	r1, sp
   b7664:	4630      	mov	r0, r6
   b7666:	f7ff fe44 	bl	b72f2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b766a:	6863      	ldr	r3, [r4, #4]
   b766c:	3301      	adds	r3, #1
   b766e:	6063      	str	r3, [r4, #4]
    return true;
   b7670:	2501      	movs	r5, #1
   b7672:	a801      	add	r0, sp, #4
   b7674:	f7fd fb4c 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7678:	4628      	mov	r0, r5
   b767a:	b003      	add	sp, #12
   b767c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b767e:	2500      	movs	r5, #0
   b7680:	e7de      	b.n	b7640 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7682 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7684:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7688:	4605      	mov	r5, r0
   b768a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b768c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7690:	42a6      	cmp	r6, r4
   b7692:	d005      	beq.n	b76a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7694:	4639      	mov	r1, r7
   b7696:	4620      	mov	r0, r4
   b7698:	f7ff fcd9 	bl	b704e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b769c:	b108      	cbz	r0, b76a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b769e:	b914      	cbnz	r4, b76a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b76a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b76a2:	3408      	adds	r4, #8
   b76a4:	e7f4      	b.n	b7690 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b76a6:	1d20      	adds	r0, r4, #4
   b76a8:	f7fd fb32 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b76ac:	e9d5 3200 	ldrd	r3, r2, [r5]
   b76b0:	f104 0108 	add.w	r1, r4, #8
   b76b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b76b8:	4620      	mov	r0, r4
   b76ba:	f7ff ff7f 	bl	b75bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b76be:	686b      	ldr	r3, [r5, #4]
   b76c0:	3b01      	subs	r3, #1
   b76c2:	606b      	str	r3, [r5, #4]
    return true;
   b76c4:	e7ec      	b.n	b76a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b76c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b76c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76cc:	4605      	mov	r5, r0
   b76ce:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b76d0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b76d2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b76d4:	f7ff fa82 	bl	b6bdc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b76d8:	682e      	ldr	r6, [r5, #0]
   b76da:	1ef3      	subs	r3, r6, #3
   b76dc:	2b0d      	cmp	r3, #13
   b76de:	d83c      	bhi.n	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b76e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   b76e4:	0053000e 	.word	0x0053000e
   b76e8:	00d1003b 	.word	0x00d1003b
   b76ec:	003b003b 	.word	0x003b003b
   b76f0:	003b003b 	.word	0x003b003b
   b76f4:	009b003b 	.word	0x009b003b
   b76f8:	009b009b 	.word	0x009b009b
   b76fc:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b7700:	a804      	add	r0, sp, #16
   b7702:	f7ff fc6f 	bl	b6fe4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7706:	9b04      	ldr	r3, [sp, #16]
   b7708:	89aa      	ldrh	r2, [r5, #12]
   b770a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b770c:	6869      	ldr	r1, [r5, #4]
   b770e:	9804      	ldr	r0, [sp, #16]
   b7710:	3108      	adds	r1, #8
   b7712:	3002      	adds	r0, #2
   b7714:	f7ff fa7c 	bl	b6c10 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7718:	a904      	add	r1, sp, #16
   b771a:	a806      	add	r0, sp, #24
   b771c:	f7ff fde9 	bl	b72f2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b7720:	a906      	add	r1, sp, #24
   b7722:	f104 0018 	add.w	r0, r4, #24
   b7726:	f7ff ff73 	bl	b7610 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b772a:	4605      	mov	r5, r0
   b772c:	a807      	add	r0, sp, #28
   b772e:	f7fd faef 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7732:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7734:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7736:	b9b5      	cbnz	r5, b7766 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7738:	4b5d      	ldr	r3, [pc, #372]	; (b78b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b773a:	495e      	ldr	r1, [pc, #376]	; (b78b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b773c:	9300      	str	r3, [sp, #0]
   b773e:	2032      	movs	r0, #50	; 0x32
   b7740:	462b      	mov	r3, r5
   b7742:	aa06      	add	r2, sp, #24
   b7744:	9507      	str	r5, [sp, #28]
   b7746:	f7fe fe03 	bl	b6350 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b774a:	9b04      	ldr	r3, [sp, #16]
   b774c:	4629      	mov	r1, r5
   b774e:	8818      	ldrh	r0, [r3, #0]
   b7750:	f7fe fc44 	bl	b5fdc <hal_ble_gap_disconnect>
   b7754:	a805      	add	r0, sp, #20
   b7756:	f7fd fadb 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b775a:	a803      	add	r0, sp, #12
   b775c:	f7ff fa4c 	bl	b6bf8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7760:	b00e      	add	sp, #56	; 0x38
   b7762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7766:	4a54      	ldr	r2, [pc, #336]	; (b78b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7768:	9200      	str	r2, [sp, #0]
   b776a:	2300      	movs	r3, #0
   b776c:	4951      	ldr	r1, [pc, #324]	; (b78b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b776e:	9307      	str	r3, [sp, #28]
   b7770:	aa06      	add	r2, sp, #24
   b7772:	2001      	movs	r0, #1
   b7774:	f7fe fdec 	bl	b6350 <log_message>
                if (impl->connectedCallback_) {
   b7778:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b777a:	2b00      	cmp	r3, #0
   b777c:	d0ea      	beq.n	b7754 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b777e:	a904      	add	r1, sp, #16
   b7780:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7784:	f7ff fe37 	bl	b73f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7788:	e7e4      	b.n	b7754 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b778a:	89a9      	ldrh	r1, [r5, #12]
   b778c:	4620      	mov	r0, r4
   b778e:	f7ff fb7d 	bl	b6e8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7792:	4606      	mov	r6, r0
   b7794:	2800      	cmp	r0, #0
   b7796:	d0e0      	beq.n	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7798:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b779a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b779e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b77a2:	8029      	strh	r1, [r5, #0]
   b77a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b77a8:	429a      	cmp	r2, r3
   b77aa:	d003      	beq.n	b77b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b77ac:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b77b0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b77b2:	e7f9      	b.n	b77a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b77b4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b77b8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b77bc:	45b8      	cmp	r8, r7
   b77be:	d004      	beq.n	b77ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b77c0:	1d38      	adds	r0, r7, #4
   b77c2:	f7fd faa5 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77c6:	3708      	adds	r7, #8
   b77c8:	e7f8      	b.n	b77bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b77ca:	2300      	movs	r3, #0
   b77cc:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b77ce:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b77d2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b77d6:	45b8      	cmp	r8, r7
   b77d8:	d004      	beq.n	b77e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b77da:	1d38      	adds	r0, r7, #4
   b77dc:	f7fd fa98 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77e0:	3708      	adds	r7, #8
   b77e2:	e7f8      	b.n	b77d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b77e4:	2300      	movs	r3, #0
   b77e6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b77e8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b77ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b77ec:	b123      	cbz	r3, b77f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b77ee:	4631      	mov	r1, r6
   b77f0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b77f4:	f7ff fdff 	bl	b73f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b77f8:	2300      	movs	r3, #0
   b77fa:	2220      	movs	r2, #32
   b77fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7800:	4a2e      	ldr	r2, [pc, #184]	; (b78bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b7802:	9200      	str	r2, [sp, #0]
   b7804:	492b      	ldr	r1, [pc, #172]	; (b78b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7806:	aa06      	add	r2, sp, #24
   b7808:	2001      	movs	r0, #1
   b780a:	f7fe fda1 	bl	b6350 <log_message>
                    impl->peers_.removeOne(*peer);
   b780e:	4631      	mov	r1, r6
   b7810:	f104 0018 	add.w	r0, r4, #24
   b7814:	f7ff ff35 	bl	b7682 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7818:	e79f      	b.n	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b781a:	89a9      	ldrh	r1, [r5, #12]
   b781c:	4620      	mov	r0, r4
   b781e:	f7ff fb35 	bl	b6e8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7822:	2800      	cmp	r0, #0
   b7824:	d099      	beq.n	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7826:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7828:	2b00      	cmp	r3, #0
   b782a:	d096      	beq.n	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b782c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b782e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7830:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7834:	d001      	beq.n	b783a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7836:	2e10      	cmp	r6, #16
   b7838:	d117      	bne.n	b786a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b783a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b783c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b783e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7840:	2506      	movs	r5, #6
                        };
   b7842:	f88d 3015 	strb.w	r3, [sp, #21]
   b7846:	9104      	str	r1, [sp, #16]
   b7848:	f88d 2014 	strb.w	r2, [sp, #20]
   b784c:	9006      	str	r0, [sp, #24]
   b784e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7852:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7854:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7858:	9508      	str	r5, [sp, #32]
   b785a:	e883 0003 	stmia.w	r3, {r0, r1}
   b785e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7860:	a906      	add	r1, sp, #24
   b7862:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7866:	4798      	blx	r3
   b7868:	e777      	b.n	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b786a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b786c:	bf01      	itttt	eq
   b786e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7870:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7872:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7876:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7878:	bf0f      	iteee	eq
   b787a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b787e:	461a      	movne	r2, r3
   b7880:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7882:	461d      	movne	r5, r3
   b7884:	e7dd      	b.n	b7842 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7886:	89a9      	ldrh	r1, [r5, #12]
   b7888:	4620      	mov	r0, r4
   b788a:	f7ff faff 	bl	b6e8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b788e:	4601      	mov	r1, r0
   b7890:	2800      	cmp	r0, #0
   b7892:	f43f af62 	beq.w	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7896:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7898:	2b00      	cmp	r3, #0
   b789a:	f43f af5e 	beq.w	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b789e:	686b      	ldr	r3, [r5, #4]
   b78a0:	9306      	str	r3, [sp, #24]
   b78a2:	aa06      	add	r2, sp, #24
   b78a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b78a6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b78aa:	4798      	blx	r3
   b78ac:	e755      	b.n	b775a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b78ae:	bf00      	nop
   b78b0:	000bcd6c 	.word	0x000bcd6c
   b78b4:	000bcceb 	.word	0x000bcceb
   b78b8:	000bcd92 	.word	0x000bcd92
   b78bc:	000bcdaf 	.word	0x000bcdaf

000b78c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b78c0:	b513      	push	{r0, r1, r4, lr}
   b78c2:	460b      	mov	r3, r1
   b78c4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78c6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b78ca:	466c      	mov	r4, sp
   b78cc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b78d0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b78d4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b78d8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b78dc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b78e0:	b002      	add	sp, #8
   b78e2:	bd10      	pop	{r4, pc}

000b78e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b78e4:	b538      	push	{r3, r4, r5, lr}
   b78e6:	4605      	mov	r5, r0
   b78e8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b78ea:	f7ff ffe9 	bl	b78c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78ee:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b78f0:	68a2      	ldr	r2, [r4, #8]
   b78f2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b78f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78f6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b78f8:	68e2      	ldr	r2, [r4, #12]
   b78fa:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b78fc:	60e3      	str	r3, [r4, #12]
      }
   b78fe:	bd38      	pop	{r3, r4, r5, pc}

000b7900 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7900:	b570      	push	{r4, r5, r6, lr}
   b7902:	4604      	mov	r4, r0
   b7904:	b08c      	sub	sp, #48	; 0x30
   b7906:	460e      	mov	r6, r1
   b7908:	9201      	str	r2, [sp, #4]
   b790a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b790c:	f7ff fa9e 	bl	b6e4c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7910:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7912:	9901      	ldr	r1, [sp, #4]
   b7914:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7918:	f7fe ffa2 	bl	b6860 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b791c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7920:	b1cd      	cbz	r5, b7956 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7922:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7924:	9502      	str	r5, [sp, #8]
   b7926:	a902      	add	r1, sp, #8
   b7928:	a804      	add	r0, sp, #16
   b792a:	9303      	str	r3, [sp, #12]
   b792c:	f7ff fc92 	bl	b7254 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7930:	2300      	movs	r3, #0
	__x.swap(*this);
   b7932:	a908      	add	r1, sp, #32
   b7934:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7936:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7938:	f7ff ffd4 	bl	b78e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b793c:	4631      	mov	r1, r6
   b793e:	a808      	add	r0, sp, #32
   b7940:	f7ff ffd0 	bl	b78e4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7944:	a808      	add	r0, sp, #32
   b7946:	f7fc fd51 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b794a:	a804      	add	r0, sp, #16
   b794c:	f7fc fd4e 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    }
   b7950:	4620      	mov	r0, r4
   b7952:	b00c      	add	sp, #48	; 0x30
   b7954:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7956:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7958:	e7ea      	b.n	b7930 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b795c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7960:	b087      	sub	sp, #28
   b7962:	461d      	mov	r5, r3
   b7964:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7968:	4680      	mov	r8, r0
   b796a:	468b      	mov	fp, r1
   b796c:	4692      	mov	sl, r2
   b796e:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7970:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7972:	2200      	movs	r2, #0
   b7974:	2068      	movs	r0, #104	; 0x68
   b7976:	9102      	str	r1, [sp, #8]
   b7978:	9204      	str	r2, [sp, #16]
   b797a:	f7fc fb8c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b797e:	1e06      	subs	r6, r0, #0
   b7980:	f106 090c 	add.w	r9, r6, #12
   b7984:	d018      	beq.n	b79b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7986:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7988:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b798a:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b798e:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7990:	4a15      	ldr	r2, [pc, #84]	; (b79e8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7992:	f847 2b20 	str.w	r2, [r7], #32
   b7996:	9b03      	ldr	r3, [sp, #12]
   b7998:	9100      	str	r1, [sp, #0]
   b799a:	465a      	mov	r2, fp
   b799c:	4651      	mov	r1, sl
   b799e:	4648      	mov	r0, r9
   b79a0:	f7ff ffae 	bl	b7900 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b79a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79a6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b79a8:	682b      	ldr	r3, [r5, #0]
   b79aa:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b79ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b79ae:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b79b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b79b4:	6823      	ldr	r3, [r4, #0]
   b79b6:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b79b8:	a904      	add	r1, sp, #16
   b79ba:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b79bc:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b79c0:	f7ff fd08 	bl	b73d4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b79c4:	a805      	add	r0, sp, #20
   b79c6:	f7fd f9a3 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b79ca:	f8d8 3000 	ldr.w	r3, [r8]
   b79ce:	b93b      	cbnz	r3, b79e0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b79d0:	4a06      	ldr	r2, [pc, #24]	; (b79ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b79d2:	4907      	ldr	r1, [pc, #28]	; (b79f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b79d4:	200a      	movs	r0, #10
}
   b79d6:	b007      	add	sp, #28
   b79d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b79dc:	f7fe bcb0 	b.w	b6340 <panic_>
}
   b79e0:	b007      	add	sp, #28
   b79e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79e6:	bf00      	nop
   b79e8:	000bce28 	.word	0x000bce28
   b79ec:	000b5f3d 	.word	0x000b5f3d
   b79f0:	000bccd4 	.word	0x000bccd4

000b79f4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b79f4:	b538      	push	{r3, r4, r5, lr}
   b79f6:	4605      	mov	r5, r0
   b79f8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b79fa:	f7ff ff61 	bl	b78c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b79fe:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7a00:	68a2      	ldr	r2, [r4, #8]
   b7a02:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a04:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a06:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7a08:	68e2      	ldr	r2, [r4, #12]
   b7a0a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a0c:	60e3      	str	r3, [r4, #12]
      }
   b7a0e:	bd38      	pop	{r3, r4, r5, pc}

000b7a10 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7a10:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7a12:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7a14:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7a16:	3424      	adds	r4, #36	; 0x24
   b7a18:	b1b9      	cbz	r1, b7a4a <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7a1a:	e9cd 1200 	strd	r1, r2, [sp]
   b7a1e:	a802      	add	r0, sp, #8
   b7a20:	4669      	mov	r1, sp
   b7a22:	f7ff fc2f 	bl	b7284 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7a26:	2300      	movs	r3, #0
	__x.swap(*this);
   b7a28:	a906      	add	r1, sp, #24
   b7a2a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7a2c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7a2e:	f7ff ffe1 	bl	b79f4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7a32:	4621      	mov	r1, r4
   b7a34:	a806      	add	r0, sp, #24
   b7a36:	f7ff ffdd 	bl	b79f4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7a3a:	a806      	add	r0, sp, #24
   b7a3c:	f7fc fcd6 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7a40:	a802      	add	r0, sp, #8
   b7a42:	f7fc fcd3 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
}
   b7a46:	b00a      	add	sp, #40	; 0x28
   b7a48:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7a4a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7a4c:	e7eb      	b.n	b7a26 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7a4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7a4e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a52:	4604      	mov	r4, r0
   b7a54:	460d      	mov	r5, r1
   b7a56:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7a58:	d914      	bls.n	b7a84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7a5a:	4290      	cmp	r0, r2
   b7a5c:	d213      	bcs.n	b7a86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7a5e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7a62:	1a75      	subs	r5, r6, r1
   b7a64:	f1a1 0708 	sub.w	r7, r1, #8
   b7a68:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7a6a:	42b7      	cmp	r7, r6
   b7a6c:	d018      	beq.n	b7aa0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7a6e:	b11c      	cbz	r4, b7a78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7a70:	4631      	mov	r1, r6
   b7a72:	4620      	mov	r0, r4
   b7a74:	f7ff fc33 	bl	b72de <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7a78:	1d30      	adds	r0, r6, #4
   b7a7a:	f7fd f949 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7a7e:	3e08      	subs	r6, #8
   b7a80:	3c08      	subs	r4, #8
   b7a82:	e7f2      	b.n	b7a6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7a84:	d00c      	beq.n	b7aa0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7a86:	42b5      	cmp	r5, r6
   b7a88:	d00a      	beq.n	b7aa0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7a8a:	b11c      	cbz	r4, b7a94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7a8c:	4629      	mov	r1, r5
   b7a8e:	4620      	mov	r0, r4
   b7a90:	f7ff fc25 	bl	b72de <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7a94:	1d28      	adds	r0, r5, #4
   b7a96:	f7fd f93b 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7a9a:	3508      	adds	r5, #8
   b7a9c:	3408      	adds	r4, #8
   b7a9e:	e7f2      	b.n	b7a86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7aa2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7aa2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7aa4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7aa6:	4605      	mov	r5, r0
        if (n > 0) {
   b7aa8:	dd11      	ble.n	b7ace <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7aaa:	00f0      	lsls	r0, r6, #3
   b7aac:	f7fe fd3c 	bl	b6528 <malloc>
            if (!d) {
   b7ab0:	4604      	mov	r4, r0
   b7ab2:	b158      	cbz	r0, b7acc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7ab4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7ab8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7abc:	f7ff ffc7 	bl	b7a4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7ac0:	6828      	ldr	r0, [r5, #0]
   b7ac2:	f7fe fd39 	bl	b6538 <free>
        data_ = d;
   b7ac6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7ac8:	60ae      	str	r6, [r5, #8]
        return true;
   b7aca:	2001      	movs	r0, #1
    }
   b7acc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7ace:	2400      	movs	r4, #0
   b7ad0:	e7f6      	b.n	b7ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7ad2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7ad4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7ad6:	6845      	ldr	r5, [r0, #4]
   b7ad8:	4668      	mov	r0, sp
   b7ada:	f7ff fc00 	bl	b72de <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ade:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7ae2:	4299      	cmp	r1, r3
   b7ae4:	da10      	bge.n	b7b08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7ae6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7ae8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7aea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7aee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7af2:	4629      	mov	r1, r5
   b7af4:	f105 0008 	add.w	r0, r5, #8
   b7af8:	f7ff ffa9 	bl	b7a4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7afc:	b98d      	cbnz	r5, b7b22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7afe:	6863      	ldr	r3, [r4, #4]
   b7b00:	3301      	adds	r3, #1
   b7b02:	6063      	str	r3, [r4, #4]
    return true;
   b7b04:	2601      	movs	r6, #1
   b7b06:	e006      	b.n	b7b16 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b08:	3101      	adds	r1, #1
   b7b0a:	4620      	mov	r0, r4
   b7b0c:	f7ff ffc9 	bl	b7aa2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7b10:	4606      	mov	r6, r0
   b7b12:	2800      	cmp	r0, #0
   b7b14:	d1e7      	bne.n	b7ae6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7b16:	a801      	add	r0, sp, #4
   b7b18:	f7fd f8fa 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7b1c:	4630      	mov	r0, r6
   b7b1e:	b002      	add	sp, #8
   b7b20:	bd70      	pop	{r4, r5, r6, pc}
   b7b22:	4669      	mov	r1, sp
   b7b24:	4628      	mov	r0, r5
   b7b26:	f7ff fbda 	bl	b72de <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7b2a:	e7e8      	b.n	b7afe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7b2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7b2c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b30:	4604      	mov	r4, r0
   b7b32:	460d      	mov	r5, r1
   b7b34:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7b36:	d914      	bls.n	b7b62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7b38:	4290      	cmp	r0, r2
   b7b3a:	d213      	bcs.n	b7b64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7b3c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7b40:	1a75      	subs	r5, r6, r1
   b7b42:	f1a1 0708 	sub.w	r7, r1, #8
   b7b46:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7b48:	42b7      	cmp	r7, r6
   b7b4a:	d018      	beq.n	b7b7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7b4c:	b11c      	cbz	r4, b7b56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7b4e:	4631      	mov	r1, r6
   b7b50:	4620      	mov	r0, r4
   b7b52:	f7ff fbb6 	bl	b72c2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b56:	1d30      	adds	r0, r6, #4
   b7b58:	f7fd f8da 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7b5c:	3e08      	subs	r6, #8
   b7b5e:	3c08      	subs	r4, #8
   b7b60:	e7f2      	b.n	b7b48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7b62:	d00c      	beq.n	b7b7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7b64:	42b5      	cmp	r5, r6
   b7b66:	d00a      	beq.n	b7b7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7b68:	b11c      	cbz	r4, b7b72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7b6a:	4629      	mov	r1, r5
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	f7ff fba8 	bl	b72c2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b72:	1d28      	adds	r0, r5, #4
   b7b74:	f7fd f8cc 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7b78:	3508      	adds	r5, #8
   b7b7a:	3408      	adds	r4, #8
   b7b7c:	e7f2      	b.n	b7b64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7b80:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7b82:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7b84:	4605      	mov	r5, r0
        if (n > 0) {
   b7b86:	dd11      	ble.n	b7bac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7b88:	00f0      	lsls	r0, r6, #3
   b7b8a:	f7fe fccd 	bl	b6528 <malloc>
            if (!d) {
   b7b8e:	4604      	mov	r4, r0
   b7b90:	b158      	cbz	r0, b7baa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7b92:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7b96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7b9a:	f7ff ffc7 	bl	b7b2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7b9e:	6828      	ldr	r0, [r5, #0]
   b7ba0:	f7fe fcca 	bl	b6538 <free>
        data_ = d;
   b7ba4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7ba6:	60ae      	str	r6, [r5, #8]
        return true;
   b7ba8:	2001      	movs	r0, #1
    }
   b7baa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7bac:	2400      	movs	r4, #0
   b7bae:	e7f6      	b.n	b7b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7bb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7bb2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7bb4:	6845      	ldr	r5, [r0, #4]
   b7bb6:	4668      	mov	r0, sp
   b7bb8:	f7ff fb83 	bl	b72c2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7bbc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7bc0:	4299      	cmp	r1, r3
   b7bc2:	da10      	bge.n	b7be6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7bc4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7bc6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7bc8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7bcc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7bd0:	4629      	mov	r1, r5
   b7bd2:	f105 0008 	add.w	r0, r5, #8
   b7bd6:	f7ff ffa9 	bl	b7b2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7bda:	b98d      	cbnz	r5, b7c00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7bdc:	6863      	ldr	r3, [r4, #4]
   b7bde:	3301      	adds	r3, #1
   b7be0:	6063      	str	r3, [r4, #4]
    return true;
   b7be2:	2601      	movs	r6, #1
   b7be4:	e006      	b.n	b7bf4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7be6:	3101      	adds	r1, #1
   b7be8:	4620      	mov	r0, r4
   b7bea:	f7ff ffc9 	bl	b7b80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7bee:	4606      	mov	r6, r0
   b7bf0:	2800      	cmp	r0, #0
   b7bf2:	d1e7      	bne.n	b7bc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7bf4:	a801      	add	r0, sp, #4
   b7bf6:	f7fd f88b 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7bfa:	4630      	mov	r0, r6
   b7bfc:	b002      	add	sp, #8
   b7bfe:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7c00:	4669      	mov	r1, sp
   b7c02:	4628      	mov	r0, r5
   b7c04:	f7ff fb5d 	bl	b72c2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7c08:	e7e8      	b.n	b7bdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b7c0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c10:	4617      	mov	r7, r2
   b7c12:	b0a1      	sub	sp, #132	; 0x84
   b7c14:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7c16:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7c18:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7c1a:	f7fe ffdf 	bl	b6bdc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7c1e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7c20:	7923      	ldrb	r3, [r4, #4]
   b7c22:	b953      	cbnz	r3, b7c3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7c24:	4639      	mov	r1, r7
   b7c26:	4640      	mov	r0, r8
   b7c28:	f7ff fb4b 	bl	b72c2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7c2c:	a80a      	add	r0, sp, #40	; 0x28
   b7c2e:	f7fe ffe3 	bl	b6bf8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7c32:	4640      	mov	r0, r8
   b7c34:	b021      	add	sp, #132	; 0x84
   b7c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7c3a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7c3c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7c40:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7c44:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7c46:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7c4a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7c4e:	9b03      	ldr	r3, [sp, #12]
   b7c50:	429d      	cmp	r5, r3
   b7c52:	d021      	beq.n	b7c98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7c54:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7c58:	4658      	mov	r0, fp
   b7c5a:	f109 0114 	add.w	r1, r9, #20
   b7c5e:	f7ff f86a 	bl	b6d36 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7c62:	b1b8      	cbz	r0, b7c94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7c64:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7c68:	4650      	mov	r0, sl
   b7c6a:	f7ff f864 	bl	b6d36 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7c6e:	b188      	cbz	r0, b7c94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7c70:	6823      	ldr	r3, [r4, #0]
   b7c72:	f8d9 2000 	ldr.w	r2, [r9]
   b7c76:	4053      	eors	r3, r2
   b7c78:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7c7c:	d10a      	bne.n	b7c94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7c7e:	2220      	movs	r2, #32
   b7c80:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7c84:	4a5e      	ldr	r2, [pc, #376]	; (b7e00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7c86:	9200      	str	r2, [sp, #0]
   b7c88:	aa15      	add	r2, sp, #84	; 0x54
   b7c8a:	495e      	ldr	r1, [pc, #376]	; (b7e04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7c8c:	2032      	movs	r0, #50	; 0x32
   b7c8e:	f7fe fb5f 	bl	b6350 <log_message>
   b7c92:	e7c7      	b.n	b7c24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7c94:	3508      	adds	r5, #8
   b7c96:	e7da      	b.n	b7c4e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7c98:	4650      	mov	r0, sl
   b7c9a:	f7ff f81d 	bl	b6cd8 <_ZNK8particle7BleUuid7isValidEv>
   b7c9e:	b960      	cbnz	r0, b7cba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b7ca0:	4959      	ldr	r1, [pc, #356]	; (b7e08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7ca2:	2201      	movs	r2, #1
   b7ca4:	a815      	add	r0, sp, #84	; 0x54
   b7ca6:	ad15      	add	r5, sp, #84	; 0x54
   b7ca8:	f7fe ffee 	bl	b6c88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7cae:	46d4      	mov	ip, sl
   b7cb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7cb4:	682b      	ldr	r3, [r5, #0]
   b7cb6:	f8cc 3000 	str.w	r3, [ip]
   b7cba:	6833      	ldr	r3, [r6, #0]
   b7cbc:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7cc0:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7cc4:	455d      	cmp	r5, fp
   b7cc6:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7cc8:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7cca:	d06e      	beq.n	b7daa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7ccc:	f855 0b08 	ldr.w	r0, [r5], #8
   b7cd0:	f7ff f831 	bl	b6d36 <_ZNK8particle7BleUuideqERKS0_>
   b7cd4:	2800      	cmp	r0, #0
   b7cd6:	d0f5      	beq.n	b7cc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7cd8:	f104 0a14 	add.w	sl, r4, #20
   b7cdc:	4650      	mov	r0, sl
   b7cde:	f7fe fffb 	bl	b6cd8 <_ZNK8particle7BleUuid7isValidEv>
   b7ce2:	b988      	cbnz	r0, b7d08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7ce4:	4b49      	ldr	r3, [pc, #292]	; (b7e0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7ce6:	4948      	ldr	r1, [pc, #288]	; (b7e08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7ce8:	881a      	ldrh	r2, [r3, #0]
   b7cea:	3201      	adds	r2, #1
   b7cec:	b292      	uxth	r2, r2
   b7cee:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7cf0:	a815      	add	r0, sp, #84	; 0x54
   b7cf2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7cf4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7cf6:	f7fe ffe6 	bl	b6cc6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7cfc:	46d4      	mov	ip, sl
   b7cfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7d02:	682b      	ldr	r3, [r5, #0]
   b7d04:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7d08:	4b41      	ldr	r3, [pc, #260]	; (b7e10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7d0a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7d0c:	2228      	movs	r2, #40	; 0x28
   b7d0e:	2100      	movs	r1, #0
   b7d10:	a816      	add	r0, sp, #88	; 0x58
   b7d12:	f002 fac6 	bl	ba2a2 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7d16:	4651      	mov	r1, sl
   b7d18:	a804      	add	r0, sp, #16
   b7d1a:	f7fe ffef 	bl	b6cfc <_ZN8particle7BleUuid7halUUIDEv>
   b7d1e:	ab04      	add	r3, sp, #16
   b7d20:	aa18      	add	r2, sp, #96	; 0x60
   b7d22:	f10d 0c20 	add.w	ip, sp, #32
   b7d26:	6818      	ldr	r0, [r3, #0]
   b7d28:	6859      	ldr	r1, [r3, #4]
   b7d2a:	4615      	mov	r5, r2
   b7d2c:	c503      	stmia	r5!, {r0, r1}
   b7d2e:	3308      	adds	r3, #8
   b7d30:	4563      	cmp	r3, ip
   b7d32:	462a      	mov	r2, r5
   b7d34:	d1f7      	bne.n	b7d26 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7d36:	6818      	ldr	r0, [r3, #0]
   b7d38:	6028      	str	r0, [r5, #0]
    return value_;
   b7d3a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7d3c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7d40:	f8d9 3000 	ldr.w	r3, [r9]
   b7d44:	8a9b      	ldrh	r3, [r3, #20]
   b7d46:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7d4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7d4c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7d4e:	4b31      	ldr	r3, [pc, #196]	; (b7e14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7d50:	2200      	movs	r2, #0
   b7d52:	1da1      	adds	r1, r4, #6
   b7d54:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7d56:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7d5a:	f7fe f971 	bl	b6040 <hal_ble_gatt_server_add_characteristic>
   b7d5e:	2800      	cmp	r0, #0
   b7d60:	f47f af60 	bne.w	b7c24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7d64:	2301      	movs	r3, #1
   b7d66:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7d68:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7d6a:	4639      	mov	r1, r7
        return characteristics_;
   b7d6c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7d6e:	a80d      	add	r0, sp, #52	; 0x34
   b7d70:	f7ff faa7 	bl	b72c2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7d74:	4620      	mov	r0, r4
   b7d76:	a90d      	add	r1, sp, #52	; 0x34
   b7d78:	f7ff ff1a 	bl	b7bb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7d7c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7d7e:	a80e      	add	r0, sp, #56	; 0x38
   b7d80:	f7fc ffc6 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d84:	2c00      	cmp	r4, #0
   b7d86:	f47f af4d 	bne.w	b7c24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7d8a:	2320      	movs	r3, #32
   b7d8c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7d90:	4b21      	ldr	r3, [pc, #132]	; (b7e18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7d92:	9300      	str	r3, [sp, #0]
   b7d94:	aa0d      	add	r2, sp, #52	; 0x34
   b7d96:	4623      	mov	r3, r4
   b7d98:	e777      	b.n	b7c8a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7d9a:	4639      	mov	r1, r7
   b7d9c:	4640      	mov	r0, r8
   b7d9e:	f7ff fa90 	bl	b72c2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7da2:	a80c      	add	r0, sp, #48	; 0x30
   b7da4:	f7fc ffb4 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7da8:	e740      	b.n	b7c2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7daa:	a80b      	add	r0, sp, #44	; 0x2c
   b7dac:	f7ff f8f6 	bl	b6f9c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7db0:	4651      	mov	r1, sl
   b7db2:	a815      	add	r0, sp, #84	; 0x54
   b7db4:	f7fe ffa2 	bl	b6cfc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7dba:	2300      	movs	r3, #0
   b7dbc:	3214      	adds	r2, #20
   b7dbe:	a915      	add	r1, sp, #84	; 0x54
   b7dc0:	2001      	movs	r0, #1
   b7dc2:	f7fe f915 	bl	b5ff0 <hal_ble_gatt_server_add_service>
   b7dc6:	2800      	cmp	r0, #0
   b7dc8:	d1e7      	bne.n	b7d9a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7dca:	6835      	ldr	r5, [r6, #0]
   b7dcc:	a90b      	add	r1, sp, #44	; 0x2c
   b7dce:	a80d      	add	r0, sp, #52	; 0x34
   b7dd0:	f7ff fa85 	bl	b72de <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7dd4:	4628      	mov	r0, r5
   b7dd6:	a90d      	add	r1, sp, #52	; 0x34
   b7dd8:	f7ff fe7b 	bl	b7ad2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7ddc:	4605      	mov	r5, r0
   b7dde:	a80e      	add	r0, sp, #56	; 0x38
   b7de0:	f7fc ff96 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7de4:	2d00      	cmp	r5, #0
   b7de6:	d0d8      	beq.n	b7d9a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7de8:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7dea:	6853      	ldr	r3, [r2, #4]
   b7dec:	6812      	ldr	r2, [r2, #0]
   b7dee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7df2:	3b01      	subs	r3, #1
   b7df4:	a80c      	add	r0, sp, #48	; 0x30
   b7df6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7dfa:	f7fc ff89 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7dfe:	e76b      	b.n	b7cd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7e00:	000bcdce 	.word	0x000bcdce
   b7e04:	000bcceb 	.word	0x000bcceb
   b7e08:	000bce92 	.word	0x000bce92
   b7e0c:	2003e690 	.word	0x2003e690
   b7e10:	002c0003 	.word	0x002c0003
   b7e14:	000b7135 	.word	0x000b7135
   b7e18:	000bcdf9 	.word	0x000bcdf9

000b7e1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7e1c:	4802      	ldr	r0, [pc, #8]	; (b7e28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7e1e:	2300      	movs	r3, #0
   b7e20:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7e22:	f7fe b965 	b.w	b60f0 <os_mutex_recursive_create>
   b7e26:	bf00      	nop
   b7e28:	2003e694 	.word	0x2003e694

000b7e2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e2e:	4606      	mov	r6, r0
   b7e30:	460d      	mov	r5, r1
  size_t n = 0;
   b7e32:	188f      	adds	r7, r1, r2
   b7e34:	2400      	movs	r4, #0
  while (size--) {
   b7e36:	42bd      	cmp	r5, r7
   b7e38:	d00c      	beq.n	b7e54 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7e3a:	6833      	ldr	r3, [r6, #0]
   b7e3c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7e40:	689b      	ldr	r3, [r3, #8]
   b7e42:	4630      	mov	r0, r6
   b7e44:	4798      	blx	r3
     if (chunk>=0)
   b7e46:	1e03      	subs	r3, r0, #0
   b7e48:	db01      	blt.n	b7e4e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7e4a:	441c      	add	r4, r3
  while (size--) {
   b7e4c:	e7f3      	b.n	b7e36 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7e4e:	2c00      	cmp	r4, #0
   b7e50:	bf08      	it	eq
   b7e52:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7e54:	4620      	mov	r0, r4
   b7e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7e58 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7e58:	b513      	push	{r0, r1, r4, lr}
   b7e5a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7e5c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7e5e:	b159      	cbz	r1, b7e78 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7e60:	9101      	str	r1, [sp, #4]
   b7e62:	f002 fa94 	bl	ba38e <strlen>
   b7e66:	6823      	ldr	r3, [r4, #0]
   b7e68:	9901      	ldr	r1, [sp, #4]
   b7e6a:	68db      	ldr	r3, [r3, #12]
   b7e6c:	4602      	mov	r2, r0
   b7e6e:	4620      	mov	r0, r4
    }
   b7e70:	b002      	add	sp, #8
   b7e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7e76:	4718      	bx	r3
    }
   b7e78:	b002      	add	sp, #8
   b7e7a:	bd10      	pop	{r4, pc}

000b7e7c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7e7c:	b508      	push	{r3, lr}
  return write(str);
   b7e7e:	f7ff ffeb 	bl	b7e58 <_ZN5Print5writeEPKc>
}
   b7e82:	bd08      	pop	{r3, pc}

000b7e84 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7e84:	6803      	ldr	r3, [r0, #0]
   b7e86:	689b      	ldr	r3, [r3, #8]
   b7e88:	4718      	bx	r3

000b7e8a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7e8a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7e8c:	210d      	movs	r1, #13
{
   b7e8e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7e90:	f7ff fff8 	bl	b7e84 <_ZN5Print5printEc>
  n += print('\n');
   b7e94:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7e96:	4604      	mov	r4, r0
  n += print('\n');
   b7e98:	4628      	mov	r0, r5
   b7e9a:	f7ff fff3 	bl	b7e84 <_ZN5Print5printEc>
  return n;
}
   b7e9e:	4420      	add	r0, r4
   b7ea0:	bd38      	pop	{r3, r4, r5, pc}

000b7ea2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7ea2:	b538      	push	{r3, r4, r5, lr}
   b7ea4:	4605      	mov	r5, r0
  return write(str);
   b7ea6:	f7ff ffd7 	bl	b7e58 <_ZN5Print5writeEPKc>
   b7eaa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7eac:	4628      	mov	r0, r5
   b7eae:	f7ff ffec 	bl	b7e8a <_ZN5Print7printlnEv>
  return n;
}
   b7eb2:	4420      	add	r0, r4
   b7eb4:	bd38      	pop	{r3, r4, r5, pc}

000b7eb6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7eb6:	b530      	push	{r4, r5, lr}
   b7eb8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7eba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7ebc:	2a01      	cmp	r2, #1
  *str = '\0';
   b7ebe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7ec2:	bf98      	it	ls
   b7ec4:	220a      	movls	r2, #10
   b7ec6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7ec8:	460d      	mov	r5, r1
   b7eca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7ece:	fb01 5312 	mls	r3, r1, r2, r5
   b7ed2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7ed6:	2b09      	cmp	r3, #9
   b7ed8:	bf94      	ite	ls
   b7eda:	3330      	addls	r3, #48	; 0x30
   b7edc:	3337      	addhi	r3, #55	; 0x37
   b7ede:	b2db      	uxtb	r3, r3
  } while(n);
   b7ee0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7ee2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7ee6:	d9ef      	bls.n	b7ec8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7ee8:	4621      	mov	r1, r4
   b7eea:	f7ff ffb5 	bl	b7e58 <_ZN5Print5writeEPKc>
}
   b7eee:	b00b      	add	sp, #44	; 0x2c
   b7ef0:	bd30      	pop	{r4, r5, pc}

000b7ef2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ef6:	b086      	sub	sp, #24
   b7ef8:	af00      	add	r7, sp, #0
   b7efa:	4605      	mov	r5, r0
   b7efc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7efe:	1d38      	adds	r0, r7, #4
   b7f00:	2114      	movs	r1, #20
{
   b7f02:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7f04:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7f06:	f7fe fb37 	bl	b6578 <vsnprintf>

    if (n<bufsize)
   b7f0a:	2813      	cmp	r0, #19
   b7f0c:	d80e      	bhi.n	b7f2c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7f0e:	1d39      	adds	r1, r7, #4
   b7f10:	4628      	mov	r0, r5
   b7f12:	f7ff ffa1 	bl	b7e58 <_ZN5Print5writeEPKc>
   b7f16:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7f18:	b11e      	cbz	r6, b7f22 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7f1a:	4628      	mov	r0, r5
   b7f1c:	f7ff ffb5 	bl	b7e8a <_ZN5Print7printlnEv>
   b7f20:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7f22:	4620      	mov	r0, r4
   b7f24:	3718      	adds	r7, #24
   b7f26:	46bd      	mov	sp, r7
   b7f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7f2c:	f100 0308 	add.w	r3, r0, #8
   b7f30:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7f34:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7f36:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7f3a:	4622      	mov	r2, r4
   b7f3c:	1c41      	adds	r1, r0, #1
   b7f3e:	683b      	ldr	r3, [r7, #0]
   b7f40:	4668      	mov	r0, sp
   b7f42:	f7fe fb19 	bl	b6578 <vsnprintf>
  return write(str);
   b7f46:	4669      	mov	r1, sp
   b7f48:	4628      	mov	r0, r5
   b7f4a:	f7ff ff85 	bl	b7e58 <_ZN5Print5writeEPKc>
   b7f4e:	4604      	mov	r4, r0
   b7f50:	46c5      	mov	sp, r8
   b7f52:	e7e1      	b.n	b7f18 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7f54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7f54:	4b01      	ldr	r3, [pc, #4]	; (b7f5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7f56:	4a02      	ldr	r2, [pc, #8]	; (b7f60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7f58:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7f5a:	4770      	bx	lr
   b7f5c:	2003e69c 	.word	0x2003e69c
   b7f60:	000bceb2 	.word	0x000bceb2

000b7f64 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7f68:	4a15      	ldr	r2, [pc, #84]	; (b7fc0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7f6a:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7fcc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b7f6e:	e9d2 6300 	ldrd	r6, r3, [r2]
   b7f72:	1980      	adds	r0, r0, r6
   b7f74:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b7f78:	4b12      	ldr	r3, [pc, #72]	; (b7fc4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b7f7a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b7f7e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b7f82:	1986      	adds	r6, r0, r6
   b7f84:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7f88:	42bb      	cmp	r3, r7
   b7f8a:	bf08      	it	eq
   b7f8c:	42b2      	cmpeq	r2, r6
{
   b7f8e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7f90:	d013      	beq.n	b7fba <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7f92:	a903      	add	r1, sp, #12
   b7f94:	4668      	mov	r0, sp
   b7f96:	e9cd 6700 	strd	r6, r7, [sp]
   b7f9a:	f7fe fb1d 	bl	b65d8 <localtime_r>
	calendar_time.tm_year += 1900;
   b7f9e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7fa0:	4d09      	ldr	r5, [pc, #36]	; (b7fc8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7fa2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7fa6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7fa8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7fb2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7fb6:	6823      	ldr	r3, [r4, #0]
   b7fb8:	602b      	str	r3, [r5, #0]
    }
}
   b7fba:	b00c      	add	sp, #48	; 0x30
   b7fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7fc0:	2003e6d0 	.word	0x2003e6d0
   b7fc4:	2003e6c8 	.word	0x2003e6c8
   b7fc8:	2003e6a4 	.word	0x2003e6a4
   b7fcc:	2003e6d8 	.word	0x2003e6d8

000b7fd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7fd0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7fd2:	2000      	movs	r0, #0
   b7fd4:	f7fe fa98 	bl	b6508 <spark_sync_time_pending>
   b7fd8:	b128      	cbz	r0, b7fe6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7fda:	f7fe fa75 	bl	b64c8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7fde:	f080 0001 	eor.w	r0, r0, #1
   b7fe2:	b2c0      	uxtb	r0, r0
    }
   b7fe4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7fe6:	2001      	movs	r0, #1
   b7fe8:	e7fc      	b.n	b7fe4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b7fec <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b7fec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b7fee:	f7ff ffb9 	bl	b7f64 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b7ff2:	4b02      	ldr	r3, [pc, #8]	; (b7ffc <_ZN9TimeClass5monthEx+0x10>)
   b7ff4:	6918      	ldr	r0, [r3, #16]
}
   b7ff6:	3001      	adds	r0, #1
   b7ff8:	bd08      	pop	{r3, pc}
   b7ffa:	bf00      	nop
   b7ffc:	2003e6a4 	.word	0x2003e6a4

000b8000 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b8000:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b8004:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b800c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b800e:	d411      	bmi.n	b8034 <_ZN9TimeClass4zoneEf+0x34>
   b8010:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b8014:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b801c:	dc0a      	bgt.n	b8034 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b801e:	eddf 7a06 	vldr	s15, [pc, #24]	; b8038 <_ZN9TimeClass4zoneEf+0x38>
   b8022:	ee60 7a27 	vmul.f32	s15, s0, s15
   b8026:	ee17 0a90 	vmov	r0, s15
   b802a:	f002 f8a3 	bl	ba174 <__aeabi_f2lz>
   b802e:	4b03      	ldr	r3, [pc, #12]	; (b803c <_ZN9TimeClass4zoneEf+0x3c>)
   b8030:	e9c3 0100 	strd	r0, r1, [r3]
}
   b8034:	bd08      	pop	{r3, pc}
   b8036:	bf00      	nop
   b8038:	45610000 	.word	0x45610000
   b803c:	2003e6d0 	.word	0x2003e6d0

000b8040 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8040:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8042:	2000      	movs	r0, #0
   b8044:	f7fd ff8a 	bl	b5f5c <hal_rtc_time_is_valid>
    if (rtcstate)
   b8048:	4604      	mov	r4, r0
   b804a:	b9a0      	cbnz	r0, b8076 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b804c:	f7fe f988 	bl	b6360 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8050:	2801      	cmp	r0, #1
   b8052:	d110      	bne.n	b8076 <_ZN9TimeClass7isValidEv+0x36>
   b8054:	4620      	mov	r0, r4
   b8056:	f7fe f9b3 	bl	b63c0 <system_thread_get_state>
   b805a:	b960      	cbnz	r0, b8076 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b805c:	f7ff ffb8 	bl	b7fd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8060:	b910      	cbnz	r0, b8068 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8062:	f7fe fa29 	bl	b64b8 <spark_process>
        while (_while() && !_condition()) {
   b8066:	e7f9      	b.n	b805c <_ZN9TimeClass7isValidEv+0x1c>
   b8068:	f7ff ffb2 	bl	b7fd0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b806c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8070:	2000      	movs	r0, #0
   b8072:	f7fd bf73 	b.w	b5f5c <hal_rtc_time_is_valid>
}
   b8076:	4620      	mov	r0, r4
   b8078:	bd10      	pop	{r4, pc}

000b807a <_ZN9TimeClass3nowEv>:
{
   b807a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b807c:	f7ff ffe0 	bl	b8040 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b8080:	2210      	movs	r2, #16
   b8082:	2100      	movs	r1, #0
   b8084:	4668      	mov	r0, sp
   b8086:	f002 f90c 	bl	ba2a2 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b808a:	2100      	movs	r1, #0
   b808c:	4668      	mov	r0, sp
   b808e:	f7fd ff6d 	bl	b5f6c <hal_rtc_get_time>
}
   b8092:	9800      	ldr	r0, [sp, #0]
   b8094:	b005      	add	sp, #20
   b8096:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b809c <_ZN9TimeClass4hourEv>:
{
   b809c:	b508      	push	{r3, lr}
	return hour(now());
   b809e:	f7ff ffec 	bl	b807a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b80a2:	17c1      	asrs	r1, r0, #31
   b80a4:	f7ff ff5e 	bl	b7f64 <_ZL22Refresh_UnixTime_Cachex>
}
   b80a8:	4b01      	ldr	r3, [pc, #4]	; (b80b0 <_ZN9TimeClass4hourEv+0x14>)
   b80aa:	6898      	ldr	r0, [r3, #8]
   b80ac:	bd08      	pop	{r3, pc}
   b80ae:	bf00      	nop
   b80b0:	2003e6a4 	.word	0x2003e6a4

000b80b4 <_ZN9TimeClass6minuteEv>:
{
   b80b4:	b508      	push	{r3, lr}
	return minute(now());
   b80b6:	f7ff ffe0 	bl	b807a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b80ba:	17c1      	asrs	r1, r0, #31
   b80bc:	f7ff ff52 	bl	b7f64 <_ZL22Refresh_UnixTime_Cachex>
}
   b80c0:	4b01      	ldr	r3, [pc, #4]	; (b80c8 <_ZN9TimeClass6minuteEv+0x14>)
   b80c2:	6858      	ldr	r0, [r3, #4]
   b80c4:	bd08      	pop	{r3, pc}
   b80c6:	bf00      	nop
   b80c8:	2003e6a4 	.word	0x2003e6a4

000b80cc <_ZN9TimeClass6secondEv>:
{
   b80cc:	b508      	push	{r3, lr}
	return second(now());
   b80ce:	f7ff ffd4 	bl	b807a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b80d2:	17c1      	asrs	r1, r0, #31
   b80d4:	f7ff ff46 	bl	b7f64 <_ZL22Refresh_UnixTime_Cachex>
}
   b80d8:	4b01      	ldr	r3, [pc, #4]	; (b80e0 <_ZN9TimeClass6secondEv+0x14>)
   b80da:	6818      	ldr	r0, [r3, #0]
   b80dc:	bd08      	pop	{r3, pc}
   b80de:	bf00      	nop
   b80e0:	2003e6a4 	.word	0x2003e6a4

000b80e4 <_ZN9TimeClass3dayEv>:
{
   b80e4:	b508      	push	{r3, lr}
	return day(now());
   b80e6:	f7ff ffc8 	bl	b807a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b80ea:	17c1      	asrs	r1, r0, #31
   b80ec:	f7ff ff3a 	bl	b7f64 <_ZL22Refresh_UnixTime_Cachex>
}
   b80f0:	4b01      	ldr	r3, [pc, #4]	; (b80f8 <_ZN9TimeClass3dayEv+0x14>)
   b80f2:	68d8      	ldr	r0, [r3, #12]
   b80f4:	bd08      	pop	{r3, pc}
   b80f6:	bf00      	nop
   b80f8:	2003e6a4 	.word	0x2003e6a4

000b80fc <_ZN9TimeClass5monthEv>:
{
   b80fc:	b508      	push	{r3, lr}
	return month(now());
   b80fe:	f7ff ffbc 	bl	b807a <_ZN9TimeClass3nowEv>
}
   b8102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b8106:	17c1      	asrs	r1, r0, #31
   b8108:	f7ff bf70 	b.w	b7fec <_ZN9TimeClass5monthEx>

000b810c <_ZN9TimeClass4yearEv>:
{
   b810c:	b508      	push	{r3, lr}
	return year(now());
   b810e:	f7ff ffb4 	bl	b807a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8112:	17c1      	asrs	r1, r0, #31
   b8114:	f7ff ff26 	bl	b7f64 <_ZL22Refresh_UnixTime_Cachex>
}
   b8118:	4b01      	ldr	r3, [pc, #4]	; (b8120 <_ZN9TimeClass4yearEv+0x14>)
   b811a:	6958      	ldr	r0, [r3, #20]
   b811c:	bd08      	pop	{r3, pc}
   b811e:	bf00      	nop
   b8120:	2003e6a4 	.word	0x2003e6a4

000b8124 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8124:	4b02      	ldr	r3, [pc, #8]	; (b8130 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8126:	681a      	ldr	r2, [r3, #0]
   b8128:	4b02      	ldr	r3, [pc, #8]	; (b8134 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b812a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b812c:	4770      	bx	lr
   b812e:	bf00      	nop
   b8130:	2003d170 	.word	0x2003d170
   b8134:	2003e6a0 	.word	0x2003e6a0

000b8138 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8138:	2100      	movs	r1, #0
   b813a:	f7fe b921 	b.w	b6380 <system_delay_ms>
	...

000b8140 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8140:	b510      	push	{r4, lr}
   b8142:	4b04      	ldr	r3, [pc, #16]	; (b8154 <_ZN9TCPClientD1Ev+0x14>)
   b8144:	6003      	str	r3, [r0, #0]
   b8146:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8148:	6980      	ldr	r0, [r0, #24]
   b814a:	b108      	cbz	r0, b8150 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b814c:	f7fe fd1d 	bl	b6b8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b8150:	4620      	mov	r0, r4
   b8152:	bd10      	pop	{r4, pc}
   b8154:	000bcfc8 	.word	0x000bcfc8

000b8158 <_ZN9TCPClientD0Ev>:
   b8158:	b510      	push	{r4, lr}
   b815a:	4604      	mov	r4, r0
   b815c:	f7ff fff0 	bl	b8140 <_ZN9TCPClientD1Ev>
   b8160:	4620      	mov	r0, r4
   b8162:	211c      	movs	r1, #28
   b8164:	f7fb ff9b 	bl	b409e <_ZdlPvj>
   b8168:	4620      	mov	r0, r4
   b816a:	bd10      	pop	{r4, pc}

000b816c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b816c:	4b01      	ldr	r3, [pc, #4]	; (b8174 <_GLOBAL__sub_I_RGB+0x8>)
   b816e:	2200      	movs	r2, #0
   b8170:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8172:	4770      	bx	lr
   b8174:	2003e6e0 	.word	0x2003e6e0

000b8178 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8178:	4b01      	ldr	r3, [pc, #4]	; (b8180 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b817a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b817c:	4770      	bx	lr
   b817e:	bf00      	nop
   b8180:	2003d174 	.word	0x2003d174

000b8184 <serialEventRun>:
{
   b8184:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8186:	4b0b      	ldr	r3, [pc, #44]	; (b81b4 <serialEventRun+0x30>)
   b8188:	b143      	cbz	r3, b819c <serialEventRun+0x18>
   b818a:	f000 fc19 	bl	b89c0 <_Z16_fetch_usbserialv>
   b818e:	6803      	ldr	r3, [r0, #0]
   b8190:	691b      	ldr	r3, [r3, #16]
   b8192:	4798      	blx	r3
   b8194:	2800      	cmp	r0, #0
   b8196:	dd01      	ble.n	b819c <serialEventRun+0x18>
        serialEvent();
   b8198:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b819c:	4b06      	ldr	r3, [pc, #24]	; (b81b8 <serialEventRun+0x34>)
   b819e:	b143      	cbz	r3, b81b2 <serialEventRun+0x2e>
   b81a0:	f001 f9f6 	bl	b9590 <_Z22__fetch_global_Serial1v>
   b81a4:	6803      	ldr	r3, [r0, #0]
   b81a6:	691b      	ldr	r3, [r3, #16]
   b81a8:	4798      	blx	r3
   b81aa:	2800      	cmp	r0, #0
   b81ac:	dd01      	ble.n	b81b2 <serialEventRun+0x2e>
        serialEvent1();
   b81ae:	f3af 8000 	nop.w
}
   b81b2:	bd08      	pop	{r3, pc}
	...

000b81bc <_post_loop>:
{
   b81bc:	b508      	push	{r3, lr}
	serialEventRun();
   b81be:	f7ff ffe1 	bl	b8184 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b81c2:	f7fd fec3 	bl	b5f4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b81c6:	4b01      	ldr	r3, [pc, #4]	; (b81cc <_post_loop+0x10>)
   b81c8:	6018      	str	r0, [r3, #0]
}
   b81ca:	bd08      	pop	{r3, pc}
   b81cc:	2003e744 	.word	0x2003e744

000b81d0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b81d0:	4805      	ldr	r0, [pc, #20]	; (b81e8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b81d2:	4a06      	ldr	r2, [pc, #24]	; (b81ec <_Z33system_initialize_user_backup_ramv+0x1c>)
   b81d4:	4906      	ldr	r1, [pc, #24]	; (b81f0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b81d6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b81d8:	1a12      	subs	r2, r2, r0
   b81da:	f002 f83a 	bl	ba252 <memcpy>
    __backup_sram_signature = signature;
   b81de:	4b05      	ldr	r3, [pc, #20]	; (b81f4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b81e0:	4a05      	ldr	r2, [pc, #20]	; (b81f8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b81e2:	601a      	str	r2, [r3, #0]
}
   b81e4:	bd08      	pop	{r3, pc}
   b81e6:	bf00      	nop
   b81e8:	2003f400 	.word	0x2003f400
   b81ec:	2003f404 	.word	0x2003f404
   b81f0:	000bd694 	.word	0x000bd694
   b81f4:	2003f400 	.word	0x2003f400
   b81f8:	9a271c1e 	.word	0x9a271c1e

000b81fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b81fc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b81fe:	2300      	movs	r3, #0
   b8200:	9300      	str	r3, [sp, #0]
   b8202:	461a      	mov	r2, r3
   b8204:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8208:	f7fe f8ec 	bl	b63e4 <system_ctrl_set_result>
}
   b820c:	b003      	add	sp, #12
   b820e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8214 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8214:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8216:	8843      	ldrh	r3, [r0, #2]
   b8218:	2b0a      	cmp	r3, #10
   b821a:	d008      	beq.n	b822e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b821c:	2b50      	cmp	r3, #80	; 0x50
   b821e:	d10b      	bne.n	b8238 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8220:	4b09      	ldr	r3, [pc, #36]	; (b8248 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8222:	681b      	ldr	r3, [r3, #0]
   b8224:	b14b      	cbz	r3, b823a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8226:	b003      	add	sp, #12
   b8228:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b822c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b822e:	f7ff ffe5 	bl	b81fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8232:	b003      	add	sp, #12
   b8234:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8238:	2300      	movs	r3, #0
   b823a:	9300      	str	r3, [sp, #0]
   b823c:	461a      	mov	r2, r3
   b823e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8242:	f7fe f8cf 	bl	b63e4 <system_ctrl_set_result>
}
   b8246:	e7f4      	b.n	b8232 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8248:	2003e6f4 	.word	0x2003e6f4

000b824c <module_user_init_hook>:
{
   b824c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b824e:	4812      	ldr	r0, [pc, #72]	; (b8298 <module_user_init_hook+0x4c>)
   b8250:	2100      	movs	r1, #0
   b8252:	f7fe f9b9 	bl	b65c8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8256:	4b11      	ldr	r3, [pc, #68]	; (b829c <module_user_init_hook+0x50>)
   b8258:	681a      	ldr	r2, [r3, #0]
   b825a:	4b11      	ldr	r3, [pc, #68]	; (b82a0 <module_user_init_hook+0x54>)
   b825c:	429a      	cmp	r2, r3
   b825e:	4b11      	ldr	r3, [pc, #68]	; (b82a4 <module_user_init_hook+0x58>)
   b8260:	bf0c      	ite	eq
   b8262:	2201      	moveq	r2, #1
   b8264:	2200      	movne	r2, #0
   b8266:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8268:	d001      	beq.n	b826e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b826a:	f7ff ffb1 	bl	b81d0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b826e:	f7fd fe5d 	bl	b5f2c <HAL_RNG_GetRandomNumber>
   b8272:	4604      	mov	r4, r0
    srand(seed);
   b8274:	f002 f81e 	bl	ba2b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8278:	4b0b      	ldr	r3, [pc, #44]	; (b82a8 <module_user_init_hook+0x5c>)
   b827a:	b113      	cbz	r3, b8282 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b827c:	4620      	mov	r0, r4
   b827e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8282:	2100      	movs	r1, #0
   b8284:	4808      	ldr	r0, [pc, #32]	; (b82a8 <module_user_init_hook+0x5c>)
   b8286:	f7fe f947 	bl	b6518 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b828a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b828e:	4807      	ldr	r0, [pc, #28]	; (b82ac <module_user_init_hook+0x60>)
   b8290:	2100      	movs	r1, #0
   b8292:	f7fe b89d 	b.w	b63d0 <system_ctrl_set_app_request_handler>
   b8296:	bf00      	nop
   b8298:	000b8179 	.word	0x000b8179
   b829c:	2003f400 	.word	0x2003f400
   b82a0:	9a271c1e 	.word	0x9a271c1e
   b82a4:	2003e6f0 	.word	0x2003e6f0
   b82a8:	00000000 	.word	0x00000000
   b82ac:	000b8215 	.word	0x000b8215

000b82b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b82b0:	4770      	bx	lr

000b82b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b82b2:	2000      	movs	r0, #0
   b82b4:	4770      	bx	lr

000b82b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b82b6:	b510      	push	{r4, lr}
   b82b8:	2110      	movs	r1, #16
   b82ba:	4604      	mov	r4, r0
   b82bc:	f7fb feef 	bl	b409e <_ZdlPvj>
   b82c0:	4620      	mov	r0, r4
   b82c2:	bd10      	pop	{r4, pc}

000b82c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b82c4:	b508      	push	{r3, lr}
      { delete this; }
   b82c6:	f7ff fff6 	bl	b82b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b82ca:	bd08      	pop	{r3, pc}

000b82cc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b82cc:	b530      	push	{r4, r5, lr}
        type_(type) {
   b82ce:	2200      	movs	r2, #0
   b82d0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b82d4:	6002      	str	r2, [r0, #0]
   b82d6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b82d8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b82da:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b82dc:	680c      	ldr	r4, [r1, #0]
   b82de:	8085      	strh	r5, [r0, #4]
   b82e0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b82e2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b82e4:	bd30      	pop	{r4, r5, pc}

000b82e6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b82e6:	b510      	push	{r4, lr}
   b82e8:	4604      	mov	r4, r0
    free((void*)msg_);
   b82ea:	6800      	ldr	r0, [r0, #0]
   b82ec:	f7fe f924 	bl	b6538 <free>
}
   b82f0:	4620      	mov	r0, r4
   b82f2:	bd10      	pop	{r4, pc}

000b82f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b82f4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b82f6:	68c4      	ldr	r4, [r0, #12]
   b82f8:	b1f4      	cbz	r4, b8338 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b82fa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b82fc:	2b02      	cmp	r3, #2
   b82fe:	d103      	bne.n	b8308 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b8300:	f104 000c 	add.w	r0, r4, #12
   b8304:	f7ff ffef 	bl	b82e6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b8308:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b830a:	b135      	cbz	r5, b831a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b830c:	4628      	mov	r0, r5
   b830e:	f7fc f86d 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b8312:	2110      	movs	r1, #16
   b8314:	4628      	mov	r0, r5
   b8316:	f7fb fec2 	bl	b409e <_ZdlPvj>
   b831a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b831c:	b135      	cbz	r5, b832c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b831e:	4628      	mov	r0, r5
   b8320:	f7fc f864 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b8324:	2110      	movs	r1, #16
   b8326:	4628      	mov	r0, r5
   b8328:	f7fb feb9 	bl	b409e <_ZdlPvj>
   b832c:	4620      	mov	r0, r4
   b832e:	2114      	movs	r1, #20
   b8330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8334:	f7fb beb3 	b.w	b409e <_ZdlPvj>
   b8338:	bd38      	pop	{r3, r4, r5, pc}

000b833a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b833a:	680b      	ldr	r3, [r1, #0]
   b833c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b833e:	684b      	ldr	r3, [r1, #4]
   b8340:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8342:	b113      	cbz	r3, b834a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b8344:	685a      	ldr	r2, [r3, #4]
   b8346:	3201      	adds	r2, #1
   b8348:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b834a:	4770      	bx	lr

000b834c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b834c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b834e:	4604      	mov	r4, r0
   b8350:	4668      	mov	r0, sp
   b8352:	460d      	mov	r5, r1
   b8354:	f7ff fff1 	bl	b833a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8358:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b835a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b835c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b835e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8360:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8362:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b8364:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b8366:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8368:	f7fc fcd2 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b836c:	b135      	cbz	r5, b837c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b836e:	1d28      	adds	r0, r5, #4
   b8370:	f7fc fcce 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8374:	2108      	movs	r1, #8
   b8376:	4628      	mov	r0, r5
   b8378:	f7fb fe91 	bl	b409e <_ZdlPvj>
        return p;
    }
   b837c:	4620      	mov	r0, r4
   b837e:	b003      	add	sp, #12
   b8380:	bd30      	pop	{r4, r5, pc}

000b8382 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b8382:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8384:	b510      	push	{r4, lr}
      if (_M_empty())
   b8386:	b90a      	cbnz	r2, b838c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b8388:	f001 f968 	bl	b965c <_ZSt25__throw_bad_function_callv>
    }
   b838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8390:	68c3      	ldr	r3, [r0, #12]
   b8392:	4718      	bx	r3

000b8394 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8394:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8396:	6800      	ldr	r0, [r0, #0]
   b8398:	f100 0110 	add.w	r1, r0, #16
   b839c:	f7ff fff1 	bl	b8382 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b83a0:	bd08      	pop	{r3, pc}

000b83a2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b83a2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b83a4:	b510      	push	{r4, lr}
      if (_M_empty())
   b83a6:	b90a      	cbnz	r2, b83ac <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b83a8:	f001 f958 	bl	b965c <_ZSt25__throw_bad_function_callv>
    }
   b83ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b83b0:	68c3      	ldr	r3, [r0, #12]
   b83b2:	4718      	bx	r3

000b83b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b83b4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b83b6:	6800      	ldr	r0, [r0, #0]
   b83b8:	f100 0110 	add.w	r1, r0, #16
   b83bc:	f7ff fff1 	bl	b83a2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b83c0:	bd08      	pop	{r3, pc}
	...

000b83c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b83c4:	b538      	push	{r3, r4, r5, lr}
   b83c6:	2300      	movs	r3, #0
   b83c8:	4604      	mov	r4, r0
   b83ca:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b83cc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b83ce:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b83d0:	f7fb fe61 	bl	b4096 <_Znwj>
   b83d4:	b128      	cbz	r0, b83e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b83d6:	2301      	movs	r3, #1
   b83d8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b83dc:	4b02      	ldr	r3, [pc, #8]	; (b83e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b83de:	6003      	str	r3, [r0, #0]
   b83e0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b83e2:	6020      	str	r0, [r4, #0]
	}
   b83e4:	4620      	mov	r0, r4
   b83e6:	bd38      	pop	{r3, r4, r5, pc}
   b83e8:	000bcedc 	.word	0x000bcedc

000b83ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b83ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b83ee:	2300      	movs	r3, #0
   b83f0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b83f2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b83f4:	4604      	mov	r4, r0
   b83f6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b83f8:	b12b      	cbz	r3, b8406 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b83fa:	2202      	movs	r2, #2
   b83fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b83fe:	68eb      	ldr	r3, [r5, #12]
   b8400:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8402:	68ab      	ldr	r3, [r5, #8]
   b8404:	60a3      	str	r3, [r4, #8]
    }
   b8406:	4620      	mov	r0, r4
   b8408:	bd38      	pop	{r3, r4, r5, pc}
	...

000b840c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b840c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b840e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b8410:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b8412:	4668      	mov	r0, sp
   b8414:	f7ff ff5a 	bl	b82cc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8418:	f04f 0302 	mov.w	r3, #2
   b841c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b8420:	2a00      	cmp	r2, #0
   b8422:	d103      	bne.n	b842c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b8424:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8428:	2900      	cmp	r1, #0
   b842a:	d1f7      	bne.n	b841c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b842c:	d125      	bne.n	b847a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b842e:	f104 050c 	add.w	r5, r4, #12
   b8432:	4669      	mov	r1, sp
   b8434:	4628      	mov	r0, r5
   b8436:	f7ff ff49 	bl	b82cc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b843a:	f3bf 8f5b 	dmb	ish
   b843e:	2301      	movs	r3, #1
   b8440:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8442:	2000      	movs	r0, #0
   b8444:	f104 0308 	add.w	r3, r4, #8
   b8448:	f3bf 8f5b 	dmb	ish
   b844c:	e853 6f00 	ldrex	r6, [r3]
   b8450:	e843 0200 	strex	r2, r0, [r3]
   b8454:	2a00      	cmp	r2, #0
   b8456:	d1f9      	bne.n	b844c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8458:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b845c:	b16e      	cbz	r6, b847a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b845e:	f7fd ff9f 	bl	b63a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8462:	b178      	cbz	r0, b8484 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8464:	4629      	mov	r1, r5
   b8466:	4630      	mov	r0, r6
   b8468:	f7ff ff8b 	bl	b8382 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b846c:	4630      	mov	r0, r6
   b846e:	f7fb ffbd 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8472:	2110      	movs	r1, #16
   b8474:	4630      	mov	r0, r6
   b8476:	f7fb fe12 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b847a:	4668      	mov	r0, sp
   b847c:	f7ff ff33 	bl	b82e6 <_ZN8particle5ErrorD1Ev>
    }
   b8480:	b009      	add	sp, #36	; 0x24
   b8482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8484:	4631      	mov	r1, r6
   b8486:	a802      	add	r0, sp, #8
   b8488:	f7ff ffb0 	bl	b83ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b848c:	68e0      	ldr	r0, [r4, #12]
   b848e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8492:	b108      	cbz	r0, b8498 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b8494:	f001 ff5e 	bl	ba354 <strdup>
        type_(type) {
   b8498:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b849a:	2010      	movs	r0, #16
   b849c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b84a0:	f7fb fdf9 	bl	b4096 <_Znwj>
   b84a4:	4605      	mov	r5, r0
   b84a6:	b1e8      	cbz	r0, b84e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b84a8:	2700      	movs	r7, #0
   b84aa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b84ac:	2018      	movs	r0, #24
   b84ae:	f7fb fdf2 	bl	b4096 <_Znwj>
   b84b2:	4604      	mov	r4, r0
   b84b4:	b188      	cbz	r0, b84da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b84b6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b84b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b84ba:	a802      	add	r0, sp, #8
   b84bc:	f7ff fa00 	bl	b78c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84c0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b84c2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b84c4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84c6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b84c8:	9204      	str	r2, [sp, #16]
   b84ca:	a906      	add	r1, sp, #24
   b84cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b84ce:	60e3      	str	r3, [r4, #12]
   b84d0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b84d4:	9205      	str	r2, [sp, #20]
   b84d6:	f7ff fef9 	bl	b82cc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b84da:	4b08      	ldr	r3, [pc, #32]	; (b84fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b84dc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b84de:	4b08      	ldr	r3, [pc, #32]	; (b8500 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b84e0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b84e2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b84e4:	a806      	add	r0, sp, #24
   b84e6:	f7ff fefe 	bl	b82e6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b84ea:	a802      	add	r0, sp, #8
   b84ec:	f7fb ff7e 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b84f0:	2200      	movs	r2, #0
   b84f2:	4629      	mov	r1, r5
   b84f4:	4803      	ldr	r0, [pc, #12]	; (b8504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b84f6:	f7fd ff5b 	bl	b63b0 <application_thread_invoke>
   b84fa:	e7b7      	b.n	b846c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b84fc:	000b8395 	.word	0x000b8395
   b8500:	000b8619 	.word	0x000b8619
   b8504:	000b8b09 	.word	0x000b8b09

000b8508 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b850c:	b08b      	sub	sp, #44	; 0x2c
   b850e:	4605      	mov	r5, r0
   b8510:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8514:	460f      	mov	r7, r1
   b8516:	4690      	mov	r8, r2
   b8518:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b851a:	f7fd ffd5 	bl	b64c8 <spark_cloud_flag_connected>
   b851e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b8520:	4683      	mov	fp, r0
   b8522:	bb38      	cbnz	r0, b8574 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8524:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8528:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b852a:	a905      	add	r1, sp, #20
   b852c:	4630      	mov	r0, r6
   b852e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8532:	f7ff fecb 	bl	b82cc <_ZN8particle5ErrorC1EOS0_>
   b8536:	2014      	movs	r0, #20
   b8538:	f7fb fdad 	bl	b4096 <_Znwj>
   b853c:	4604      	mov	r4, r0
   b853e:	b148      	cbz	r0, b8554 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b8540:	2302      	movs	r3, #2
   b8542:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8544:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8546:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b854a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b854c:	4631      	mov	r1, r6
   b854e:	300c      	adds	r0, #12
   b8550:	f7ff febc 	bl	b82cc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8554:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8556:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8558:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b855c:	f7ff ff32 	bl	b83c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8560:	4630      	mov	r0, r6
   b8562:	f7ff fec0 	bl	b82e6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8566:	a805      	add	r0, sp, #20
   b8568:	f7ff febd 	bl	b82e6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b856c:	4628      	mov	r0, r5
   b856e:	b00b      	add	sp, #44	; 0x2c
   b8570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8574:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8576:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8578:	2014      	movs	r0, #20
   b857a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b857e:	9307      	str	r3, [sp, #28]
   b8580:	f7fb fd89 	bl	b4096 <_Znwj>
   b8584:	4601      	mov	r1, r0
   b8586:	b118      	cbz	r0, b8590 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8588:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b858c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b858e:	7044      	strb	r4, [r0, #1]
   b8590:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8592:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8594:	f7ff ff16 	bl	b83c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8598:	4b1e      	ldr	r3, [pc, #120]	; (b8614 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b859a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b859c:	2008      	movs	r0, #8
   b859e:	f7fb fd7a 	bl	b4096 <_Znwj>
   b85a2:	4604      	mov	r4, r0
   b85a4:	b110      	cbz	r0, b85ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b85a6:	a903      	add	r1, sp, #12
   b85a8:	f7ff fec7 	bl	b833a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b85ac:	9600      	str	r6, [sp, #0]
   b85ae:	fa5f f38a 	uxtb.w	r3, sl
   b85b2:	464a      	mov	r2, r9
   b85b4:	4641      	mov	r1, r8
   b85b6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b85b8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b85ba:	f7fd ff8d 	bl	b64d8 <spark_send_event>
   b85be:	b9b8      	cbnz	r0, b85f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b85c0:	9b03      	ldr	r3, [sp, #12]
   b85c2:	785b      	ldrb	r3, [r3, #1]
   b85c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b85c8:	b993      	cbnz	r3, b85f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b85ca:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b85ce:	a905      	add	r1, sp, #20
   b85d0:	a803      	add	r0, sp, #12
   b85d2:	9205      	str	r2, [sp, #20]
   b85d4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b85d8:	f7ff ff18 	bl	b840c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b85dc:	a805      	add	r0, sp, #20
   b85de:	f7ff fe82 	bl	b82e6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b85e2:	a805      	add	r0, sp, #20
   b85e4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b85e6:	f7ff feb1 	bl	b834c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b85ea:	a806      	add	r0, sp, #24
   b85ec:	f7fc fb90 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b85f0:	a903      	add	r1, sp, #12
   b85f2:	a805      	add	r0, sp, #20
   b85f4:	f7ff fea1 	bl	b833a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b85f8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b85fa:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b85fc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b85fe:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8600:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8602:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8604:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8606:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8608:	f7fc fb82 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b860c:	a804      	add	r0, sp, #16
   b860e:	f7fc fb7f 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b8612:	e7ab      	b.n	b856c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8614:	000b8695 	.word	0x000b8695

000b8618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8618:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b861a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b861c:	4605      	mov	r5, r0
	switch (__op)
   b861e:	d103      	bne.n	b8628 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8620:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8622:	6003      	str	r3, [r0, #0]
      }
   b8624:	2000      	movs	r0, #0
   b8626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8628:	2a02      	cmp	r2, #2
   b862a:	d010      	beq.n	b864e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b862c:	2a03      	cmp	r2, #3
   b862e:	d1f9      	bne.n	b8624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8630:	6804      	ldr	r4, [r0, #0]
   b8632:	2c00      	cmp	r4, #0
   b8634:	d0f6      	beq.n	b8624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8636:	f104 0010 	add.w	r0, r4, #16
   b863a:	f7ff fe54 	bl	b82e6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b863e:	4620      	mov	r0, r4
   b8640:	f7fb fed4 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8644:	2118      	movs	r1, #24
   b8646:	4620      	mov	r0, r4
   b8648:	f7fb fd29 	bl	b409e <_ZdlPvj>
   b864c:	e7ea      	b.n	b8624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b864e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b8650:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8652:	f7fb fd20 	bl	b4096 <_Znwj>
   b8656:	4604      	mov	r4, r0
   b8658:	b150      	cbz	r0, b8670 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b865a:	4631      	mov	r1, r6
   b865c:	f7ff fec6 	bl	b83ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8660:	6930      	ldr	r0, [r6, #16]
   b8662:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8666:	b108      	cbz	r0, b866c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8668:	f001 fe74 	bl	ba354 <strdup>
        type_(type) {
   b866c:	6120      	str	r0, [r4, #16]
   b866e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b8670:	602c      	str	r4, [r5, #0]
	}
   b8672:	e7d7      	b.n	b8624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8674 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8674:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8676:	2300      	movs	r3, #0
   b8678:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b867a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b867c:	4604      	mov	r4, r0
   b867e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8680:	b12b      	cbz	r3, b868e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8682:	2202      	movs	r2, #2
   b8684:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8686:	68eb      	ldr	r3, [r5, #12]
   b8688:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b868a:	68ab      	ldr	r3, [r5, #8]
   b868c:	60a3      	str	r3, [r4, #8]
    }
   b868e:	4620      	mov	r0, r4
   b8690:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8694 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8694:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8696:	b089      	sub	sp, #36	; 0x24
   b8698:	4604      	mov	r4, r0
   b869a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b869c:	a801      	add	r0, sp, #4
   b869e:	4611      	mov	r1, r2
   b86a0:	f7ff fe54 	bl	b834c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b86a4:	b1a4      	cbz	r4, b86d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b86a6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b86a8:	b11d      	cbz	r5, b86b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b86aa:	4628      	mov	r0, r5
   b86ac:	f001 fe52 	bl	ba354 <strdup>
   b86b0:	4605      	mov	r5, r0
   b86b2:	a801      	add	r0, sp, #4
   b86b4:	a903      	add	r1, sp, #12
        type_(type) {
   b86b6:	9503      	str	r5, [sp, #12]
   b86b8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b86bc:	f7ff fea6 	bl	b840c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b86c0:	a803      	add	r0, sp, #12
   b86c2:	f7ff fe10 	bl	b82e6 <_ZN8particle5ErrorD1Ev>
   b86c6:	a802      	add	r0, sp, #8
   b86c8:	f7fc fb22 	bl	b4d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b86cc:	b009      	add	sp, #36	; 0x24
   b86ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b86d0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b86d2:	2301      	movs	r3, #1
   b86d4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b86d8:	2a00      	cmp	r2, #0
   b86da:	d103      	bne.n	b86e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b86dc:	e8c5 3f41 	strexb	r1, r3, [r5]
   b86e0:	2900      	cmp	r1, #0
   b86e2:	d1f7      	bne.n	b86d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b86e4:	d1ef      	bne.n	b86c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b86e6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b86e8:	f3bf 8f5b 	dmb	ish
   b86ec:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b86ee:	1d2b      	adds	r3, r5, #4
   b86f0:	f3bf 8f5b 	dmb	ish
   b86f4:	e853 6f00 	ldrex	r6, [r3]
   b86f8:	e843 4200 	strex	r2, r4, [r3]
   b86fc:	2a00      	cmp	r2, #0
   b86fe:	d1f9      	bne.n	b86f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8700:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8704:	2e00      	cmp	r6, #0
   b8706:	d0de      	beq.n	b86c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8708:	4620      	mov	r0, r4
   b870a:	f7fd fe49 	bl	b63a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b870e:	4607      	mov	r7, r0
   b8710:	b160      	cbz	r0, b872c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8712:	f105 010c 	add.w	r1, r5, #12
   b8716:	4630      	mov	r0, r6
   b8718:	f7ff fe43 	bl	b83a2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b871c:	4630      	mov	r0, r6
   b871e:	f7fb fe65 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8722:	2110      	movs	r1, #16
   b8724:	4630      	mov	r0, r6
   b8726:	f7fb fcba 	bl	b409e <_ZdlPvj>
   b872a:	e7cc      	b.n	b86c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b872c:	4631      	mov	r1, r6
   b872e:	a803      	add	r0, sp, #12
   b8730:	f7ff ffa0 	bl	b8674 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8734:	7b2b      	ldrb	r3, [r5, #12]
   b8736:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b873a:	2010      	movs	r0, #16
   b873c:	f7fb fcab 	bl	b4096 <_Znwj>
   b8740:	4605      	mov	r5, r0
   b8742:	b1d0      	cbz	r0, b877a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8744:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8746:	2014      	movs	r0, #20
   b8748:	f7fb fca5 	bl	b4096 <_Znwj>
   b874c:	4604      	mov	r4, r0
   b874e:	b178      	cbz	r0, b8770 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b8750:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8752:	4601      	mov	r1, r0
   b8754:	a803      	add	r0, sp, #12
   b8756:	f7ff f8b3 	bl	b78c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b875a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b875c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b875e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8760:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b8762:	9205      	str	r2, [sp, #20]
   b8764:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8766:	60e3      	str	r3, [r4, #12]
   b8768:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b876c:	9206      	str	r2, [sp, #24]
   b876e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b8770:	4b06      	ldr	r3, [pc, #24]	; (b878c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b8772:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8774:	4b06      	ldr	r3, [pc, #24]	; (b8790 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8776:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8778:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b877a:	a803      	add	r0, sp, #12
   b877c:	f7fb fe36 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8780:	2200      	movs	r2, #0
   b8782:	4629      	mov	r1, r5
   b8784:	4803      	ldr	r0, [pc, #12]	; (b8794 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b8786:	f7fd fe13 	bl	b63b0 <application_thread_invoke>
   b878a:	e7c7      	b.n	b871c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b878c:	000b83b5 	.word	0x000b83b5
   b8790:	000b8799 	.word	0x000b8799
   b8794:	000b8b09 	.word	0x000b8b09

000b8798 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8798:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b879a:	b570      	push	{r4, r5, r6, lr}
   b879c:	4604      	mov	r4, r0
	switch (__op)
   b879e:	d103      	bne.n	b87a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b87a0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b87a2:	6003      	str	r3, [r0, #0]
      }
   b87a4:	2000      	movs	r0, #0
   b87a6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b87a8:	2a02      	cmp	r2, #2
   b87aa:	d00c      	beq.n	b87c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b87ac:	2a03      	cmp	r2, #3
   b87ae:	d1f9      	bne.n	b87a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b87b0:	6804      	ldr	r4, [r0, #0]
   b87b2:	2c00      	cmp	r4, #0
   b87b4:	d0f6      	beq.n	b87a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b87b6:	4620      	mov	r0, r4
   b87b8:	f7fb fe18 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b87bc:	2114      	movs	r1, #20
   b87be:	4620      	mov	r0, r4
   b87c0:	f7fb fc6d 	bl	b409e <_ZdlPvj>
   b87c4:	e7ee      	b.n	b87a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b87c6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b87c8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b87ca:	f7fb fc64 	bl	b4096 <_Znwj>
   b87ce:	4605      	mov	r5, r0
   b87d0:	b120      	cbz	r0, b87dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b87d2:	4631      	mov	r1, r6
   b87d4:	f7ff ff4e 	bl	b8674 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b87d8:	7c33      	ldrb	r3, [r6, #16]
   b87da:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b87dc:	6025      	str	r5, [r4, #0]
	}
   b87de:	e7e1      	b.n	b87a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b87e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b87e0:	4770      	bx	lr

000b87e2 <_ZN9IPAddressD0Ev>:
   b87e2:	b510      	push	{r4, lr}
   b87e4:	2118      	movs	r1, #24
   b87e6:	4604      	mov	r4, r0
   b87e8:	f7fb fc59 	bl	b409e <_ZdlPvj>
   b87ec:	4620      	mov	r0, r4
   b87ee:	bd10      	pop	{r4, pc}

000b87f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b87f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b87f2:	7d03      	ldrb	r3, [r0, #20]
   b87f4:	2b06      	cmp	r3, #6
{
   b87f6:	b08d      	sub	sp, #52	; 0x34
   b87f8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b87fa:	f100 0704 	add.w	r7, r0, #4
   b87fe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8802:	d012      	beq.n	b882a <_ZNK9IPAddress7printToER5Print+0x3a>
   b8804:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8808:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b880c:	220a      	movs	r2, #10
   b880e:	4630      	mov	r0, r6
   b8810:	f7ff fb51 	bl	b7eb6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8814:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8816:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8818:	d019      	beq.n	b884e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b881a:	2c00      	cmp	r4, #0
   b881c:	d0f4      	beq.n	b8808 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b881e:	212e      	movs	r1, #46	; 0x2e
   b8820:	4630      	mov	r0, r6
   b8822:	f7ff fb2f 	bl	b7e84 <_ZN5Print5printEc>
   b8826:	4404      	add	r4, r0
   b8828:	e7ee      	b.n	b8808 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b882a:	232f      	movs	r3, #47	; 0x2f
   b882c:	466a      	mov	r2, sp
   b882e:	4639      	mov	r1, r7
   b8830:	200a      	movs	r0, #10
		buf[0] = 0;
   b8832:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8836:	f7fd fc7b 	bl	b6130 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b883a:	4668      	mov	r0, sp
   b883c:	f001 fda7 	bl	ba38e <strlen>
   b8840:	6833      	ldr	r3, [r6, #0]
   b8842:	4602      	mov	r2, r0
   b8844:	68db      	ldr	r3, [r3, #12]
   b8846:	4669      	mov	r1, sp
   b8848:	4630      	mov	r0, r6
   b884a:	4798      	blx	r3
   b884c:	4604      	mov	r4, r0
    }
    return n;
}
   b884e:	4620      	mov	r0, r4
   b8850:	b00d      	add	sp, #52	; 0x34
   b8852:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8854 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8854:	b510      	push	{r4, lr}
   b8856:	4b05      	ldr	r3, [pc, #20]	; (b886c <_ZN9IPAddressC1Ev+0x18>)
   b8858:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b885a:	2211      	movs	r2, #17
   b885c:	f840 3b04 	str.w	r3, [r0], #4
   b8860:	2100      	movs	r1, #0
   b8862:	f001 fd1e 	bl	ba2a2 <memset>
}
   b8866:	4620      	mov	r0, r4
   b8868:	bd10      	pop	{r4, pc}
   b886a:	bf00      	nop
   b886c:	000bcef8 	.word	0x000bcef8

000b8870 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8870:	4603      	mov	r3, r0
   b8872:	4a07      	ldr	r2, [pc, #28]	; (b8890 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8874:	b510      	push	{r4, lr}
   b8876:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b887a:	f101 0210 	add.w	r2, r1, #16
   b887e:	f851 4b04 	ldr.w	r4, [r1], #4
   b8882:	f843 4b04 	str.w	r4, [r3], #4
   b8886:	4291      	cmp	r1, r2
   b8888:	d1f9      	bne.n	b887e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b888a:	780a      	ldrb	r2, [r1, #0]
   b888c:	701a      	strb	r2, [r3, #0]
}
   b888e:	bd10      	pop	{r4, pc}
   b8890:	000bcef8 	.word	0x000bcef8

000b8894 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b8894:	4a02      	ldr	r2, [pc, #8]	; (b88a0 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b8896:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b889a:	2204      	movs	r2, #4
   b889c:	7502      	strb	r2, [r0, #20]
}
   b889e:	4770      	bx	lr
   b88a0:	000bcef8 	.word	0x000bcef8

000b88a4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b88a4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b88a6:	2b04      	cmp	r3, #4
   b88a8:	d104      	bne.n	b88b4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b88aa:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b88ac:	3800      	subs	r0, #0
   b88ae:	bf18      	it	ne
   b88b0:	2001      	movne	r0, #1
   b88b2:	4770      	bx	lr
    } else if (version() == 6) {
   b88b4:	2b06      	cmp	r3, #6
   b88b6:	d107      	bne.n	b88c8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b88b8:	6843      	ldr	r3, [r0, #4]
   b88ba:	b93b      	cbnz	r3, b88cc <_ZNK9IPAddresscvbEv+0x28>
   b88bc:	6883      	ldr	r3, [r0, #8]
   b88be:	b92b      	cbnz	r3, b88cc <_ZNK9IPAddresscvbEv+0x28>
   b88c0:	68c3      	ldr	r3, [r0, #12]
   b88c2:	b91b      	cbnz	r3, b88cc <_ZNK9IPAddresscvbEv+0x28>
   b88c4:	6900      	ldr	r0, [r0, #16]
   b88c6:	e7f1      	b.n	b88ac <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b88c8:	2000      	movs	r0, #0
   b88ca:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b88cc:	2001      	movs	r0, #1
}
   b88ce:	4770      	bx	lr

000b88d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b88d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b88d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b88d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b88da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b88de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b88e2:	2304      	movs	r3, #4
   b88e4:	6041      	str	r1, [r0, #4]
   b88e6:	7503      	strb	r3, [r0, #20]
}
   b88e8:	bd10      	pop	{r4, pc}
	...

000b88ec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b88ec:	b507      	push	{r0, r1, r2, lr}
   b88ee:	4b06      	ldr	r3, [pc, #24]	; (b8908 <_ZN9IPAddressC1EPKh+0x1c>)
   b88f0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b88f2:	78cb      	ldrb	r3, [r1, #3]
   b88f4:	9300      	str	r3, [sp, #0]
   b88f6:	788b      	ldrb	r3, [r1, #2]
   b88f8:	784a      	ldrb	r2, [r1, #1]
   b88fa:	7809      	ldrb	r1, [r1, #0]
   b88fc:	f7ff ffe8 	bl	b88d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8900:	b003      	add	sp, #12
   b8902:	f85d fb04 	ldr.w	pc, [sp], #4
   b8906:	bf00      	nop
   b8908:	000bcef8 	.word	0x000bcef8

000b890c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b890c:	7441      	strb	r1, [r0, #17]
}
   b890e:	4770      	bx	lr

000b8910 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8910:	4770      	bx	lr

000b8912 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8912:	4770      	bx	lr

000b8914 <_ZN9USBSerial4readEv>:
{
   b8914:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8916:	2100      	movs	r1, #0
   b8918:	7c00      	ldrb	r0, [r0, #16]
   b891a:	f7fd fcf1 	bl	b6300 <HAL_USB_USART_Receive_Data>
}
   b891e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8922:	bd08      	pop	{r3, pc}

000b8924 <_ZN9USBSerial4peekEv>:
{
   b8924:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8926:	2101      	movs	r1, #1
   b8928:	7c00      	ldrb	r0, [r0, #16]
   b892a:	f7fd fce9 	bl	b6300 <HAL_USB_USART_Receive_Data>
}
   b892e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8932:	bd08      	pop	{r3, pc}

000b8934 <_ZN9USBSerial17availableForWriteEv>:
{
   b8934:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8936:	7c00      	ldrb	r0, [r0, #16]
   b8938:	f7fd fcda 	bl	b62f0 <HAL_USB_USART_Available_Data_For_Write>
}
   b893c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8940:	bd08      	pop	{r3, pc}

000b8942 <_ZN9USBSerial9availableEv>:
{
   b8942:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8944:	7c00      	ldrb	r0, [r0, #16]
   b8946:	f7fd fccb 	bl	b62e0 <HAL_USB_USART_Available_Data>
}
   b894a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b894e:	bd08      	pop	{r3, pc}

000b8950 <_ZN9USBSerial5writeEh>:
{
   b8950:	b513      	push	{r0, r1, r4, lr}
   b8952:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8954:	7c00      	ldrb	r0, [r0, #16]
{
   b8956:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8958:	f7fd fcca 	bl	b62f0 <HAL_USB_USART_Available_Data_For_Write>
   b895c:	2800      	cmp	r0, #0
   b895e:	9901      	ldr	r1, [sp, #4]
   b8960:	dc01      	bgt.n	b8966 <_ZN9USBSerial5writeEh+0x16>
   b8962:	7c60      	ldrb	r0, [r4, #17]
   b8964:	b120      	cbz	r0, b8970 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8966:	7c20      	ldrb	r0, [r4, #16]
   b8968:	f7fd fcd2 	bl	b6310 <HAL_USB_USART_Send_Data>
   b896c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8970:	b002      	add	sp, #8
   b8972:	bd10      	pop	{r4, pc}

000b8974 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8974:	7c00      	ldrb	r0, [r0, #16]
   b8976:	f7fd bcd3 	b.w	b6320 <HAL_USB_USART_Flush_Data>

000b897a <_ZN9USBSerialD0Ev>:
   b897a:	b510      	push	{r4, lr}
   b897c:	2114      	movs	r1, #20
   b897e:	4604      	mov	r4, r0
   b8980:	f7fb fb8d 	bl	b409e <_ZdlPvj>
   b8984:	4620      	mov	r0, r4
   b8986:	bd10      	pop	{r4, pc}

000b8988 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8988:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b898a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b898e:	4604      	mov	r4, r0
   b8990:	4608      	mov	r0, r1
   b8992:	2100      	movs	r1, #0
   b8994:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8998:	4b04      	ldr	r3, [pc, #16]	; (b89ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b899a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b899c:	2301      	movs	r3, #1
  _serial = serial;
   b899e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b89a0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b89a2:	4611      	mov	r1, r2
   b89a4:	f7fd fc94 	bl	b62d0 <HAL_USB_USART_Init>
}
   b89a8:	4620      	mov	r0, r4
   b89aa:	bd10      	pop	{r4, pc}
   b89ac:	000bcf0c 	.word	0x000bcf0c

000b89b0 <_Z19acquireSerialBufferv>:
{
   b89b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b89b2:	2214      	movs	r2, #20
{
   b89b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b89b6:	2100      	movs	r1, #0
   b89b8:	f001 fc73 	bl	ba2a2 <memset>
}
   b89bc:	4620      	mov	r0, r4
   b89be:	bd10      	pop	{r4, pc}

000b89c0 <_Z16_fetch_usbserialv>:
{
   b89c0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b89c2:	4c0f      	ldr	r4, [pc, #60]	; (b8a00 <_Z16_fetch_usbserialv+0x40>)
{
   b89c4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b89c6:	a803      	add	r0, sp, #12
   b89c8:	f7ff fff2 	bl	b89b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b89cc:	7821      	ldrb	r1, [r4, #0]
   b89ce:	f3bf 8f5b 	dmb	ish
   b89d2:	f011 0101 	ands.w	r1, r1, #1
   b89d6:	d10f      	bne.n	b89f8 <_Z16_fetch_usbserialv+0x38>
   b89d8:	4620      	mov	r0, r4
   b89da:	9101      	str	r1, [sp, #4]
   b89dc:	f7fb fb61 	bl	b40a2 <__cxa_guard_acquire>
   b89e0:	9901      	ldr	r1, [sp, #4]
   b89e2:	b148      	cbz	r0, b89f8 <_Z16_fetch_usbserialv+0x38>
   b89e4:	aa03      	add	r2, sp, #12
   b89e6:	4807      	ldr	r0, [pc, #28]	; (b8a04 <_Z16_fetch_usbserialv+0x44>)
   b89e8:	f7ff ffce 	bl	b8988 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b89ec:	4620      	mov	r0, r4
   b89ee:	f7fb fb5d 	bl	b40ac <__cxa_guard_release>
   b89f2:	4805      	ldr	r0, [pc, #20]	; (b8a08 <_Z16_fetch_usbserialv+0x48>)
   b89f4:	f001 fc10 	bl	ba218 <atexit>
	return _usbserial;
}
   b89f8:	4802      	ldr	r0, [pc, #8]	; (b8a04 <_Z16_fetch_usbserialv+0x44>)
   b89fa:	b008      	add	sp, #32
   b89fc:	bd10      	pop	{r4, pc}
   b89fe:	bf00      	nop
   b8a00:	2003e6f8 	.word	0x2003e6f8
   b8a04:	2003e6fc 	.word	0x2003e6fc
   b8a08:	000b8911 	.word	0x000b8911

000b8a0c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8a0c:	4700      	bx	r0
	...

000b8a10 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8a10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b8a14:	2400      	movs	r4, #0
{
   b8a16:	461d      	mov	r5, r3
   b8a18:	460f      	mov	r7, r1
   b8a1a:	4690      	mov	r8, r2
   b8a1c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b8a1e:	f7fd fa75 	bl	b5f0c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b8a22:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8a24:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b8a28:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8a2c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b8a30:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8a34:	bfa2      	ittt	ge
   b8a36:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b8a3a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b8a3e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8a40:	4907      	ldr	r1, [pc, #28]	; (b8a60 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8a42:	9400      	str	r4, [sp, #0]
   b8a44:	4643      	mov	r3, r8
   b8a46:	463a      	mov	r2, r7
   b8a48:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8a4a:	bfa8      	it	ge
   b8a4c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8a50:	f7fd fa54 	bl	b5efc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b8a54:	fab0 f080 	clz	r0, r0
   b8a58:	0940      	lsrs	r0, r0, #5
   b8a5a:	b004      	add	sp, #16
   b8a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8a60:	000b8a0d 	.word	0x000b8a0d

000b8a64 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8a64:	4770      	bx	lr

000b8a66 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8a66:	7441      	strb	r1, [r0, #17]
}
   b8a68:	4770      	bx	lr

000b8a6a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8a6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8a6c:	7c00      	ldrb	r0, [r0, #16]
   b8a6e:	f7fd fba7 	bl	b61c0 <hal_usart_available_data_for_write>
}
   b8a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8a76:	bd08      	pop	{r3, pc}

000b8a78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8a78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8a7a:	7c00      	ldrb	r0, [r0, #16]
   b8a7c:	f7fd fb78 	bl	b6170 <hal_usart_available>
}
   b8a80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8a84:	bd08      	pop	{r3, pc}

000b8a86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8a86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8a88:	7c00      	ldrb	r0, [r0, #16]
   b8a8a:	f7fd fb81 	bl	b6190 <hal_usart_peek>
}
   b8a8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8a92:	bd08      	pop	{r3, pc}

000b8a94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8a94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8a96:	7c00      	ldrb	r0, [r0, #16]
   b8a98:	f7fd fb72 	bl	b6180 <hal_usart_read>
}
   b8a9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8aa0:	bd08      	pop	{r3, pc}

000b8aa2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8aa2:	7c00      	ldrb	r0, [r0, #16]
   b8aa4:	f7fd bb7c 	b.w	b61a0 <hal_usart_flush>

000b8aa8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8aaa:	7c45      	ldrb	r5, [r0, #17]
{
   b8aac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8aae:	b12d      	cbz	r5, b8abc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8ab0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8ab2:	b003      	add	sp, #12
   b8ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8ab8:	f7fd bb52 	b.w	b6160 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8abc:	7c00      	ldrb	r0, [r0, #16]
   b8abe:	9101      	str	r1, [sp, #4]
   b8ac0:	f7fd fb7e 	bl	b61c0 <hal_usart_available_data_for_write>
   b8ac4:	2800      	cmp	r0, #0
   b8ac6:	9901      	ldr	r1, [sp, #4]
   b8ac8:	dcf2      	bgt.n	b8ab0 <_ZN11USARTSerial5writeEh+0x8>
}
   b8aca:	4628      	mov	r0, r5
   b8acc:	b003      	add	sp, #12
   b8ace:	bd30      	pop	{r4, r5, pc}

000b8ad0 <_ZN11USARTSerialD0Ev>:
   b8ad0:	b510      	push	{r4, lr}
   b8ad2:	2114      	movs	r1, #20
   b8ad4:	4604      	mov	r4, r0
   b8ad6:	f7fb fae2 	bl	b409e <_ZdlPvj>
   b8ada:	4620      	mov	r0, r4
   b8adc:	bd10      	pop	{r4, pc}
	...

000b8ae0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8ae0:	b510      	push	{r4, lr}
   b8ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ae6:	4604      	mov	r4, r0
   b8ae8:	4608      	mov	r0, r1
   b8aea:	4611      	mov	r1, r2
   b8aec:	2200      	movs	r2, #0
   b8aee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8af2:	4b04      	ldr	r3, [pc, #16]	; (b8b04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8af4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8af6:	2301      	movs	r3, #1
  _serial = serial;
   b8af8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8afa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8afc:	f7fd fb68 	bl	b61d0 <hal_usart_init_ex>
}
   b8b00:	4620      	mov	r0, r4
   b8b02:	bd10      	pop	{r4, pc}
   b8b04:	000bcf3c 	.word	0x000bcf3c

000b8b08 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8b08:	b510      	push	{r4, lr}
      if (_M_empty())
   b8b0a:	6883      	ldr	r3, [r0, #8]
   b8b0c:	4604      	mov	r4, r0
   b8b0e:	b90b      	cbnz	r3, b8b14 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8b10:	f000 fda4 	bl	b965c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8b14:	68c3      	ldr	r3, [r0, #12]
   b8b16:	4798      	blx	r3
      if (_M_manager)
   b8b18:	68a3      	ldr	r3, [r4, #8]
   b8b1a:	b11b      	cbz	r3, b8b24 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8b1c:	2203      	movs	r2, #3
   b8b1e:	4621      	mov	r1, r4
   b8b20:	4620      	mov	r0, r4
   b8b22:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8b24:	4620      	mov	r0, r4
   b8b26:	2110      	movs	r1, #16
}
   b8b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b8b2c:	f7fb bab7 	b.w	b409e <_ZdlPvj>

000b8b30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8b30:	4770      	bx	lr

000b8b32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b34:	4606      	mov	r6, r0
   b8b36:	4615      	mov	r5, r2
   b8b38:	460c      	mov	r4, r1
   b8b3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8b3c:	42bc      	cmp	r4, r7
   b8b3e:	d006      	beq.n	b8b4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8b40:	6833      	ldr	r3, [r6, #0]
   b8b42:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8b46:	689b      	ldr	r3, [r3, #8]
   b8b48:	4630      	mov	r0, r6
   b8b4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8b4c:	e7f6      	b.n	b8b3c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8b4e:	4628      	mov	r0, r5
   b8b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8b52:	7c00      	ldrb	r0, [r0, #16]
   b8b54:	2200      	movs	r2, #0
   b8b56:	f7fd bb43 	b.w	b61e0 <hal_i2c_write>

000b8b5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8b5a:	7c00      	ldrb	r0, [r0, #16]
   b8b5c:	2100      	movs	r1, #0
   b8b5e:	f7fd bb47 	b.w	b61f0 <hal_i2c_available>

000b8b62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8b62:	7c00      	ldrb	r0, [r0, #16]
   b8b64:	2100      	movs	r1, #0
   b8b66:	f7fd bb4b 	b.w	b6200 <hal_i2c_read>

000b8b6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8b6a:	7c00      	ldrb	r0, [r0, #16]
   b8b6c:	2100      	movs	r1, #0
   b8b6e:	f7fd bb4f 	b.w	b6210 <hal_i2c_peek>

000b8b72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8b72:	7c00      	ldrb	r0, [r0, #16]
   b8b74:	2100      	movs	r1, #0
   b8b76:	f7fd bb53 	b.w	b6220 <hal_i2c_flush>

000b8b7a <_ZN7TwoWireD0Ev>:
   b8b7a:	b510      	push	{r4, lr}
   b8b7c:	2114      	movs	r1, #20
   b8b7e:	4604      	mov	r4, r0
   b8b80:	f7fb fa8d 	bl	b409e <_ZdlPvj>
   b8b84:	4620      	mov	r0, r4
   b8b86:	bd10      	pop	{r4, pc}

000b8b88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8b88:	b538      	push	{r3, r4, r5, lr}
   b8b8a:	4604      	mov	r4, r0
   b8b8c:	4615      	mov	r5, r2
   b8b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8b92:	2200      	movs	r2, #0
   b8b94:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8b98:	4b09      	ldr	r3, [pc, #36]	; (b8bc0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8b9a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8b9c:	4608      	mov	r0, r1
   b8b9e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b8ba0:	4629      	mov	r1, r5
   b8ba2:	f7fd fb4d 	bl	b6240 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8ba6:	30bf      	adds	r0, #191	; 0xbf
   b8ba8:	d108      	bne.n	b8bbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8baa:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8bac:	07db      	lsls	r3, r3, #31
   b8bae:	d505      	bpl.n	b8bbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b8bb0:	6868      	ldr	r0, [r5, #4]
   b8bb2:	f7fd fcc1 	bl	b6538 <free>
    free(conf.tx_buffer);
   b8bb6:	68e8      	ldr	r0, [r5, #12]
   b8bb8:	f7fd fcbe 	bl	b6538 <free>
}
   b8bbc:	4620      	mov	r0, r4
   b8bbe:	bd38      	pop	{r3, r4, r5, pc}
   b8bc0:	000bcf6c 	.word	0x000bcf6c

000b8bc4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8bc4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8bc6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8bc8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8bcc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8bce:	2201      	movs	r2, #1
   b8bd0:	f04f 33ff 	mov.w	r3, #4294967295
   b8bd4:	f10d 0107 	add.w	r1, sp, #7
   b8bd8:	47a0      	blx	r4
}
   b8bda:	b002      	add	sp, #8
   b8bdc:	bd10      	pop	{r4, pc}

000b8bde <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8bde:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8be0:	6803      	ldr	r3, [r0, #0]
   b8be2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8be4:	f04f 33ff 	mov.w	r3, #4294967295
   b8be8:	46a4      	mov	ip, r4
}
   b8bea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8bee:	4760      	bx	ip

000b8bf0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8bf0:	b513      	push	{r0, r1, r4, lr}
   b8bf2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8bf4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8bf6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8bfa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8bfc:	f10d 0107 	add.w	r1, sp, #7
   b8c00:	2201      	movs	r2, #1
   b8c02:	47a0      	blx	r4
}
   b8c04:	b002      	add	sp, #8
   b8c06:	bd10      	pop	{r4, pc}

000b8c08 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8c08:	b510      	push	{r4, lr}
   b8c0a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8c0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8c10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8c14:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8c16:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8c18:	d008      	beq.n	b8c2c <_ZN9TCPClient4readEv+0x24>
   b8c1a:	6963      	ldr	r3, [r4, #20]
   b8c1c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8c20:	1c51      	adds	r1, r2, #1
   b8c22:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8c26:	4413      	add	r3, r2
   b8c28:	7918      	ldrb	r0, [r3, #4]
}
   b8c2a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8c2c:	6803      	ldr	r3, [r0, #0]
   b8c2e:	691b      	ldr	r3, [r3, #16]
   b8c30:	4798      	blx	r3
   b8c32:	2800      	cmp	r0, #0
   b8c34:	d1f1      	bne.n	b8c1a <_ZN9TCPClient4readEv+0x12>
   b8c36:	f04f 30ff 	mov.w	r0, #4294967295
   b8c3a:	e7f6      	b.n	b8c2a <_ZN9TCPClient4readEv+0x22>

000b8c3c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8c3c:	4770      	bx	lr

000b8c3e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8c3e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8c40:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8c42:	43c0      	mvns	r0, r0
   b8c44:	0fc0      	lsrs	r0, r0, #31
   b8c46:	4770      	bx	lr

000b8c48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8c48:	4770      	bx	lr
	...

000b8c4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8c4c:	4b06      	ldr	r3, [pc, #24]	; (b8c68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8c4e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8c50:	b510      	push	{r4, lr}
   b8c52:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8c56:	d005      	beq.n	b8c64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8c58:	4608      	mov	r0, r1
   b8c5a:	f000 fd03 	bl	b9664 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8c5e:	2800      	cmp	r0, #0
   b8c60:	bf08      	it	eq
   b8c62:	2400      	moveq	r4, #0
      }
   b8c64:	4620      	mov	r0, r4
   b8c66:	bd10      	pop	{r4, pc}
   b8c68:	000bce74 	.word	0x000bce74

000b8c6c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8c6c:	b510      	push	{r4, lr}
   b8c6e:	21ac      	movs	r1, #172	; 0xac
   b8c70:	4604      	mov	r4, r0
   b8c72:	f7fb fa14 	bl	b409e <_ZdlPvj>
   b8c76:	4620      	mov	r0, r4
   b8c78:	bd10      	pop	{r4, pc}

000b8c7a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8c7a:	21ac      	movs	r1, #172	; 0xac
   b8c7c:	f7fb ba0f 	b.w	b409e <_ZdlPvj>

000b8c80 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8c84:	f04f 0800 	mov.w	r8, #0
   b8c88:	b086      	sub	sp, #24
   b8c8a:	461c      	mov	r4, r3
   b8c8c:	f8c0 8004 	str.w	r8, [r0, #4]
   b8c90:	4605      	mov	r5, r0
   b8c92:	460e      	mov	r6, r1
   b8c94:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8c96:	4641      	mov	r1, r8
   b8c98:	2210      	movs	r2, #16
   b8c9a:	a802      	add	r0, sp, #8
   b8c9c:	f001 fb01 	bl	ba2a2 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8ca0:	1c63      	adds	r3, r4, #1
   b8ca2:	d009      	beq.n	b8cb8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ca8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8cac:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8cb0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8cb4:	435c      	muls	r4, r3
   b8cb6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8cb8:	6968      	ldr	r0, [r5, #20]
   b8cba:	2310      	movs	r3, #16
   b8cbc:	9300      	str	r3, [sp, #0]
   b8cbe:	6800      	ldr	r0, [r0, #0]
   b8cc0:	ab02      	add	r3, sp, #8
   b8cc2:	f241 0205 	movw	r2, #4101	; 0x1005
   b8cc6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8cca:	f7fd fac1 	bl	b6250 <sock_setsockopt>
    if (ret < 0) {
   b8cce:	2800      	cmp	r0, #0
   b8cd0:	da07      	bge.n	b8ce2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8cd2:	f7fd fc69 	bl	b65a8 <__errno>
   b8cd6:	6803      	ldr	r3, [r0, #0]
   b8cd8:	606b      	str	r3, [r5, #4]
        return 0;
   b8cda:	2000      	movs	r0, #0
}
   b8cdc:	b006      	add	sp, #24
   b8cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8ce2:	6968      	ldr	r0, [r5, #20]
   b8ce4:	2300      	movs	r3, #0
   b8ce6:	6800      	ldr	r0, [r0, #0]
   b8ce8:	463a      	mov	r2, r7
   b8cea:	4631      	mov	r1, r6
   b8cec:	f7fd fad0 	bl	b6290 <sock_send>
    if (ret < 0) {
   b8cf0:	1e03      	subs	r3, r0, #0
   b8cf2:	dbee      	blt.n	b8cd2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8cf4:	4618      	mov	r0, r3
   b8cf6:	e7f1      	b.n	b8cdc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8cf8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8cf8:	b530      	push	{r4, r5, lr}
   b8cfa:	b087      	sub	sp, #28
   b8cfc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8cfe:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8d00:	4668      	mov	r0, sp
   b8d02:	f7ff fdf3 	bl	b88ec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d08:	3404      	adds	r4, #4
   b8d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8d0c:	682b      	ldr	r3, [r5, #0]
   b8d0e:	7023      	strb	r3, [r4, #0]
    }
   b8d10:	b007      	add	sp, #28
   b8d12:	bd30      	pop	{r4, r5, pc}

000b8d14 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8d14:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8d16:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8d18:	4b05      	ldr	r3, [pc, #20]	; (b8d30 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8d1a:	4604      	mov	r4, r0
   b8d1c:	358c      	adds	r5, #140	; 0x8c
   b8d1e:	f844 3b04 	str.w	r3, [r4], #4
   b8d22:	4606      	mov	r6, r0
   b8d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8d28:	682b      	ldr	r3, [r5, #0]
   b8d2a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8d2c:	4630      	mov	r0, r6
   b8d2e:	bd70      	pop	{r4, r5, r6, pc}
   b8d30:	000bcef8 	.word	0x000bcef8

000b8d34 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8d38:	4698      	mov	r8, r3
    stop();
   b8d3a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8d3c:	b093      	sub	sp, #76	; 0x4c
   b8d3e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8d40:	2400      	movs	r4, #0
    stop();
   b8d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8d44:	4606      	mov	r6, r0
   b8d46:	4617      	mov	r7, r2
    stop();
   b8d48:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8d4a:	4628      	mov	r0, r5
   b8d4c:	466b      	mov	r3, sp
   b8d4e:	4622      	mov	r2, r4
   b8d50:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8d52:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8d54:	f7fd f8c2 	bl	b5edc <netdb_getaddrinfo>
   b8d58:	4605      	mov	r5, r0
   b8d5a:	2800      	cmp	r0, #0
   b8d5c:	d163      	bne.n	b8e26 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8d5e:	9b00      	ldr	r3, [sp, #0]
   b8d60:	2b00      	cmp	r3, #0
   b8d62:	d04b      	beq.n	b8dfc <_ZN9TCPClient7connectEPKctm+0xc8>
   b8d64:	695b      	ldr	r3, [r3, #20]
   b8d66:	2b00      	cmp	r3, #0
   b8d68:	d048      	beq.n	b8dfc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8d6a:	a806      	add	r0, sp, #24
   b8d6c:	f7ff fd72 	bl	b8854 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8d70:	9b00      	ldr	r3, [sp, #0]
   b8d72:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8d74:	7863      	ldrb	r3, [r4, #1]
   b8d76:	2b02      	cmp	r3, #2
   b8d78:	d104      	bne.n	b8d84 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8d7a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8d7c:	a806      	add	r0, sp, #24
   b8d7e:	f7ff ffbb 	bl	b8cf8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8d82:	e026      	b.n	b8dd2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8d84:	2b0a      	cmp	r3, #10
   b8d86:	d124      	bne.n	b8dd2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8d88:	2211      	movs	r2, #17
   b8d8a:	4629      	mov	r1, r5
   b8d8c:	a801      	add	r0, sp, #4
   b8d8e:	f001 fa88 	bl	ba2a2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8d92:	68a3      	ldr	r3, [r4, #8]
   b8d94:	2b00      	cmp	r3, #0
   b8d96:	d038      	beq.n	b8e0a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8d98:	f104 0308 	add.w	r3, r4, #8
   b8d9c:	f10d 0c04 	add.w	ip, sp, #4
   b8da0:	3418      	adds	r4, #24
   b8da2:	6818      	ldr	r0, [r3, #0]
   b8da4:	6859      	ldr	r1, [r3, #4]
   b8da6:	4662      	mov	r2, ip
   b8da8:	c203      	stmia	r2!, {r0, r1}
   b8daa:	3308      	adds	r3, #8
   b8dac:	42a3      	cmp	r3, r4
   b8dae:	4694      	mov	ip, r2
   b8db0:	d1f7      	bne.n	b8da2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8db2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8db4:	a901      	add	r1, sp, #4
   b8db6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8db8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8dbc:	f7ff fd58 	bl	b8870 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8dc0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8dc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8dc8:	ac07      	add	r4, sp, #28
   b8dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8dcc:	f8dc 3000 	ldr.w	r3, [ip]
   b8dd0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8dd2:	a806      	add	r0, sp, #24
   b8dd4:	f7ff fd66 	bl	b88a4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8dd8:	b180      	cbz	r0, b8dfc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8dda:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8ddc:	ad07      	add	r5, sp, #28
   b8dde:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8de2:	4b12      	ldr	r3, [pc, #72]	; (b8e2c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8de4:	930c      	str	r3, [sp, #48]	; 0x30
   b8de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8de8:	ac0d      	add	r4, sp, #52	; 0x34
   b8dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8dec:	682b      	ldr	r3, [r5, #0]
   b8dee:	7023      	strb	r3, [r4, #0]
   b8df0:	463a      	mov	r2, r7
   b8df2:	4643      	mov	r3, r8
   b8df4:	a90c      	add	r1, sp, #48	; 0x30
   b8df6:	4630      	mov	r0, r6
   b8df8:	47c8      	blx	r9
   b8dfa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8dfc:	9800      	ldr	r0, [sp, #0]
   b8dfe:	f7fd f865 	bl	b5ecc <netdb_freeaddrinfo>
}
   b8e02:	4628      	mov	r0, r5
   b8e04:	b013      	add	sp, #76	; 0x4c
   b8e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8e0a:	68e3      	ldr	r3, [r4, #12]
   b8e0c:	2b00      	cmp	r3, #0
   b8e0e:	d1c3      	bne.n	b8d98 <_ZN9TCPClient7connectEPKctm+0x64>
   b8e10:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8e14:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8e18:	f7fd f992 	bl	b6140 <inet_htonl>
   b8e1c:	4581      	cmp	r9, r0
   b8e1e:	d1bb      	bne.n	b8d98 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8e20:	f104 0114 	add.w	r1, r4, #20
   b8e24:	e7aa      	b.n	b8d7c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8e26:	4625      	mov	r5, r4
   b8e28:	e7e8      	b.n	b8dfc <_ZN9TCPClient7connectEPKctm+0xc8>
   b8e2a:	bf00      	nop
   b8e2c:	000bcef8 	.word	0x000bcef8

000b8e30 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8e30:	b538      	push	{r3, r4, r5, lr}
   b8e32:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8e34:	681a      	ldr	r2, [r3, #0]
   b8e36:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8e38:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8e3a:	da10      	bge.n	b8e5e <_ZN9TCPClient9connectedEv+0x2e>
   b8e3c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e40:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e44:	429a      	cmp	r2, r3
   b8e46:	d10a      	bne.n	b8e5e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8e48:	6803      	ldr	r3, [r0, #0]
   b8e4a:	691b      	ldr	r3, [r3, #16]
   b8e4c:	4798      	blx	r3
        if (!rv) {
   b8e4e:	4604      	mov	r4, r0
   b8e50:	b928      	cbnz	r0, b8e5e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8e52:	682b      	ldr	r3, [r5, #0]
   b8e54:	4628      	mov	r0, r5
   b8e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8e58:	4798      	blx	r3
        rv = available();
   b8e5a:	4620      	mov	r0, r4
}
   b8e5c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8e5e:	2001      	movs	r0, #1
   b8e60:	e7fc      	b.n	b8e5c <_ZN9TCPClient9connectedEv+0x2c>

000b8e62 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8e62:	b510      	push	{r4, lr}
   b8e64:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8e66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e6a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e6e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8e70:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8e72:	d005      	beq.n	b8e80 <_ZN9TCPClient4peekEv+0x1e>
   b8e74:	6963      	ldr	r3, [r4, #20]
   b8e76:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8e7a:	4413      	add	r3, r2
   b8e7c:	7918      	ldrb	r0, [r3, #4]
}
   b8e7e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8e80:	6803      	ldr	r3, [r0, #0]
   b8e82:	691b      	ldr	r3, [r3, #16]
   b8e84:	4798      	blx	r3
   b8e86:	2800      	cmp	r0, #0
   b8e88:	d1f4      	bne.n	b8e74 <_ZN9TCPClient4peekEv+0x12>
   b8e8a:	f04f 30ff 	mov.w	r0, #4294967295
   b8e8e:	e7f6      	b.n	b8e7e <_ZN9TCPClient4peekEv+0x1c>

000b8e90 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8e92:	6943      	ldr	r3, [r0, #20]
   b8e94:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8e96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e9a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e9e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8ea0:	4605      	mov	r5, r0
   b8ea2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8ea4:	d016      	beq.n	b8ed4 <_ZN9TCPClient4readEPhj+0x44>
   b8ea6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8ea8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8eac:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8eb0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8eb2:	42bc      	cmp	r4, r7
   b8eb4:	bf28      	it	cs
   b8eb6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8eb8:	3304      	adds	r3, #4
   b8eba:	4622      	mov	r2, r4
   b8ebc:	4419      	add	r1, r3
   b8ebe:	4630      	mov	r0, r6
   b8ec0:	f001 f9c7 	bl	ba252 <memcpy>
   b8ec4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8ec6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8eca:	4423      	add	r3, r4
   b8ecc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8ed0:	4620      	mov	r0, r4
   b8ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8ed4:	6803      	ldr	r3, [r0, #0]
   b8ed6:	691b      	ldr	r3, [r3, #16]
   b8ed8:	4798      	blx	r3
   b8eda:	2800      	cmp	r0, #0
   b8edc:	d1e3      	bne.n	b8ea6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8ede:	f04f 34ff 	mov.w	r4, #4294967295
   b8ee2:	e7f5      	b.n	b8ed0 <_ZN9TCPClient4readEPhj+0x40>

000b8ee4 <_ZN9TCPClient12flush_bufferEv>:
   b8ee4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8ee6:	2300      	movs	r3, #0
   b8ee8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8eec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8eee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8ef2:	4770      	bx	lr

000b8ef4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8ef8:	461f      	mov	r7, r3
    stop();
   b8efa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8efc:	460c      	mov	r4, r1
    stop();
   b8efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8f00:	b08a      	sub	sp, #40	; 0x28
   b8f02:	4605      	mov	r5, r0
   b8f04:	4616      	mov	r6, r2
    stop();
   b8f06:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8f08:	7d23      	ldrb	r3, [r4, #20]
   b8f0a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8f0e:	2b04      	cmp	r3, #4
   b8f10:	bf0c      	ite	eq
   b8f12:	2002      	moveq	r0, #2
   b8f14:	200a      	movne	r0, #10
   b8f16:	2206      	movs	r2, #6
   b8f18:	2101      	movs	r1, #1
   b8f1a:	f7fd f9c1 	bl	b62a0 <sock_socket>
   b8f1e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8f22:	696b      	ldr	r3, [r5, #20]
   b8f24:	681b      	ldr	r3, [r3, #0]
   b8f26:	2b00      	cmp	r3, #0
   b8f28:	da08      	bge.n	b8f3c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8f2a:	682b      	ldr	r3, [r5, #0]
   b8f2c:	4628      	mov	r0, r5
   b8f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8f30:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8f32:	4798      	blx	r3
}
   b8f34:	4620      	mov	r0, r4
   b8f36:	b00a      	add	sp, #40	; 0x28
   b8f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8f3c:	4628      	mov	r0, r5
   b8f3e:	f7ff ffd1 	bl	b8ee4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8f42:	b1b7      	cbz	r7, b8f72 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8f44:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8f46:	a903      	add	r1, sp, #12
   b8f48:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8f4a:	9303      	str	r3, [sp, #12]
   b8f4c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8f50:	f7fc ffe4 	bl	b5f1c <if_index_to_name>
   b8f54:	2800      	cmp	r0, #0
   b8f56:	d1e8      	bne.n	b8f2a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8f58:	6968      	ldr	r0, [r5, #20]
   b8f5a:	2306      	movs	r3, #6
   b8f5c:	9300      	str	r3, [sp, #0]
   b8f5e:	6800      	ldr	r0, [r0, #0]
   b8f60:	ab03      	add	r3, sp, #12
   b8f62:	f241 020b 	movw	r2, #4107	; 0x100b
   b8f66:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8f6a:	f7fd f971 	bl	b6250 <sock_setsockopt>
   b8f6e:	2800      	cmp	r0, #0
   b8f70:	d1db      	bne.n	b8f2a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8f72:	221c      	movs	r2, #28
   b8f74:	2100      	movs	r1, #0
   b8f76:	a803      	add	r0, sp, #12
   b8f78:	f001 f993 	bl	ba2a2 <memset>
    if (ip.version() == 4) {
   b8f7c:	7d23      	ldrb	r3, [r4, #20]
   b8f7e:	2b04      	cmp	r3, #4
   b8f80:	d11d      	bne.n	b8fbe <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8f82:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8f86:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8f88:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8f8c:	f7fd f8e0 	bl	b6150 <inet_htons>
   b8f90:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8f94:	6860      	ldr	r0, [r4, #4]
   b8f96:	f7fd f8d3 	bl	b6140 <inet_htonl>
   b8f9a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8f9c:	696b      	ldr	r3, [r5, #20]
   b8f9e:	221c      	movs	r2, #28
   b8fa0:	6818      	ldr	r0, [r3, #0]
   b8fa2:	a903      	add	r1, sp, #12
   b8fa4:	f7fd f964 	bl	b6270 <sock_connect>
   b8fa8:	2800      	cmp	r0, #0
   b8faa:	d1be      	bne.n	b8f2a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8fac:	3404      	adds	r4, #4
   b8fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8fb0:	696d      	ldr	r5, [r5, #20]
   b8fb2:	358c      	adds	r5, #140	; 0x8c
   b8fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8fb6:	6823      	ldr	r3, [r4, #0]
   b8fb8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8fba:	2401      	movs	r4, #1
   b8fbc:	e7ba      	b.n	b8f34 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8fbe:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8fc2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8fc4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8fc8:	f7fd f8c2 	bl	b6150 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8fcc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8fce:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8fd2:	1d23      	adds	r3, r4, #4
   b8fd4:	f104 0714 	add.w	r7, r4, #20
   b8fd8:	6818      	ldr	r0, [r3, #0]
   b8fda:	6859      	ldr	r1, [r3, #4]
   b8fdc:	4632      	mov	r2, r6
   b8fde:	c203      	stmia	r2!, {r0, r1}
   b8fe0:	3308      	adds	r3, #8
   b8fe2:	42bb      	cmp	r3, r7
   b8fe4:	4616      	mov	r6, r2
   b8fe6:	d1f7      	bne.n	b8fd8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8fe8:	e7d8      	b.n	b8f9c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8fec <_ZN9TCPClient9availableEv>:
{
   b8fec:	b530      	push	{r4, r5, lr}
   b8fee:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8ff0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8ff4:	b08b      	sub	sp, #44	; 0x2c
   b8ff6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8ff8:	b12b      	cbz	r3, b9006 <_ZN9TCPClient9availableEv+0x1a>
   b8ffa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8ffe:	429a      	cmp	r2, r3
   b9000:	d101      	bne.n	b9006 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9002:	f7ff ff6f 	bl	b8ee4 <_ZN9TCPClient12flush_bufferEv>
   b9006:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9008:	6808      	ldr	r0, [r1, #0]
   b900a:	2800      	cmp	r0, #0
   b900c:	db18      	blt.n	b9040 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b900e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9012:	2d7f      	cmp	r5, #127	; 0x7f
   b9014:	d814      	bhi.n	b9040 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9016:	3104      	adds	r1, #4
   b9018:	2308      	movs	r3, #8
   b901a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b901e:	4429      	add	r1, r5
   b9020:	f7fd f92e 	bl	b6280 <sock_recv>
            if (ret > 0) {
   b9024:	2800      	cmp	r0, #0
   b9026:	dd13      	ble.n	b9050 <_ZN9TCPClient9availableEv+0x64>
   b9028:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b902a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b902e:	b90a      	cbnz	r2, b9034 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9030:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9034:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9036:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b903a:	4410      	add	r0, r2
   b903c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9040:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9042:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9046:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b904a:	1ac0      	subs	r0, r0, r3
   b904c:	b00b      	add	sp, #44	; 0x2c
   b904e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9050:	f7fd faaa 	bl	b65a8 <__errno>
   b9054:	6803      	ldr	r3, [r0, #0]
   b9056:	2b0b      	cmp	r3, #11
   b9058:	d0f2      	beq.n	b9040 <_ZN9TCPClient9availableEv+0x54>
   b905a:	f7fd faa5 	bl	b65a8 <__errno>
   b905e:	6803      	ldr	r3, [r0, #0]
   b9060:	2b0b      	cmp	r3, #11
   b9062:	d0ed      	beq.n	b9040 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9064:	2320      	movs	r3, #32
   b9066:	2500      	movs	r5, #0
   b9068:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b906c:	f7fd fa9c 	bl	b65a8 <__errno>
   b9070:	6803      	ldr	r3, [r0, #0]
   b9072:	9301      	str	r3, [sp, #4]
   b9074:	4b08      	ldr	r3, [pc, #32]	; (b9098 <_ZN9TCPClient9availableEv+0xac>)
   b9076:	4909      	ldr	r1, [pc, #36]	; (b909c <_ZN9TCPClient9availableEv+0xb0>)
   b9078:	9300      	str	r3, [sp, #0]
   b907a:	aa02      	add	r2, sp, #8
   b907c:	462b      	mov	r3, r5
   b907e:	2032      	movs	r0, #50	; 0x32
   b9080:	f7fd f966 	bl	b6350 <log_message>
                    sock_close(d_->sock);
   b9084:	6963      	ldr	r3, [r4, #20]
   b9086:	6818      	ldr	r0, [r3, #0]
   b9088:	f7fd f8ea 	bl	b6260 <sock_close>
   b908c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b908e:	f04f 32ff 	mov.w	r2, #4294967295
   b9092:	601a      	str	r2, [r3, #0]
   b9094:	e7d4      	b.n	b9040 <_ZN9TCPClient9availableEv+0x54>
   b9096:	bf00      	nop
   b9098:	000bcf93 	.word	0x000bcf93
   b909c:	000bcf8c 	.word	0x000bcf8c

000b90a0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b90a0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b90a2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b90a4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b90a6:	6818      	ldr	r0, [r3, #0]
   b90a8:	2800      	cmp	r0, #0
   b90aa:	db01      	blt.n	b90b0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b90ac:	f7fd f8d8 	bl	b6260 <sock_close>
   b90b0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b90b2:	f04f 32ff 	mov.w	r2, #4294967295
   b90b6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b90b8:	6960      	ldr	r0, [r4, #20]
   b90ba:	2211      	movs	r2, #17
   b90bc:	2100      	movs	r1, #0
   b90be:	308c      	adds	r0, #140	; 0x8c
   b90c0:	f001 f8ef 	bl	ba2a2 <memset>
    flush_buffer();
   b90c4:	4620      	mov	r0, r4
}
   b90c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b90ca:	f7ff bf0b 	b.w	b8ee4 <_ZN9TCPClient12flush_bufferEv>

000b90ce <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b90ce:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b90d0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b90d2:	4604      	mov	r4, r0
          total(0) {
   b90d4:	6001      	str	r1, [r0, #0]
   b90d6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b90da:	3088      	adds	r0, #136	; 0x88
   b90dc:	f7ff fbba 	bl	b8854 <_ZN9IPAddressC1Ev>
}
   b90e0:	4620      	mov	r0, r4
   b90e2:	bd10      	pop	{r4, pc}

000b90e4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b90e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b90e6:	2300      	movs	r3, #0
   b90e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b90ec:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b90f0:	4a0e      	ldr	r2, [pc, #56]	; (b912c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b90f2:	6103      	str	r3, [r0, #16]
   b90f4:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b90f6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b90f8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b90fa:	20ac      	movs	r0, #172	; 0xac
   b90fc:	9101      	str	r1, [sp, #4]
   b90fe:	f7fa ffca 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9102:	1e05      	subs	r5, r0, #0
   b9104:	f105 060c 	add.w	r6, r5, #12
   b9108:	d008      	beq.n	b911c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b910a:	2301      	movs	r3, #1
   b910c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9110:	4b07      	ldr	r3, [pc, #28]	; (b9130 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9112:	9901      	ldr	r1, [sp, #4]
   b9114:	602b      	str	r3, [r5, #0]
   b9116:	4630      	mov	r0, r6
   b9118:	f7ff ffd9 	bl	b90ce <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b911c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b911e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9122:	f7ff fedf 	bl	b8ee4 <_ZN9TCPClient12flush_bufferEv>
}
   b9126:	b002      	add	sp, #8
   b9128:	bd70      	pop	{r4, r5, r6, pc}
   b912a:	bf00      	nop
   b912c:	000bcfc8 	.word	0x000bcfc8
   b9130:	000bcfac 	.word	0x000bcfac

000b9134 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9134:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9136:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b913a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b913c:	f7ff ffd2 	bl	b90e4 <_ZN9TCPClientC1Ei>
}
   b9140:	4620      	mov	r0, r4
   b9142:	bd10      	pop	{r4, pc}

000b9144 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9144:	b510      	push	{r4, lr}
   b9146:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9148:	6800      	ldr	r0, [r0, #0]
   b914a:	2800      	cmp	r0, #0
   b914c:	db01      	blt.n	b9152 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b914e:	f7fd f887 	bl	b6260 <sock_close>
    }
}
   b9152:	4620      	mov	r0, r4
   b9154:	bd10      	pop	{r4, pc}

000b9156 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9156:	300c      	adds	r0, #12
   b9158:	f7ff bff4 	b.w	b9144 <_ZN9TCPClient4DataD1Ev>

000b915c <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   b915c:	4770      	bx	lr

000b915e <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   b915e:	2001      	movs	r0, #1
   b9160:	4770      	bx	lr

000b9162 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9162:	2200      	movs	r2, #0
   b9164:	6840      	ldr	r0, [r0, #4]
   b9166:	4611      	mov	r1, r2
   b9168:	f7fd b95e 	b.w	b6428 <network_ready>

000b916c <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   b916c:	b510      	push	{r4, lr}
   b916e:	2124      	movs	r1, #36	; 0x24
   b9170:	4604      	mov	r4, r0
   b9172:	f7fa ff94 	bl	b409e <_ZdlPvj>
   b9176:	4620      	mov	r0, r4
   b9178:	bd10      	pop	{r4, pc}

000b917a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b917a:	2200      	movs	r2, #0
   b917c:	6840      	ldr	r0, [r0, #4]
   b917e:	4611      	mov	r1, r2
   b9180:	f7fd b972 	b.w	b6468 <network_listening>

000b9184 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9184:	2200      	movs	r2, #0
   b9186:	6840      	ldr	r0, [r0, #4]
   b9188:	4611      	mov	r1, r2
   b918a:	f7fd b97d 	b.w	b6488 <network_get_listen_timeout>

000b918e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b918e:	6840      	ldr	r0, [r0, #4]
   b9190:	2200      	movs	r2, #0
   b9192:	f7fd b971 	b.w	b6478 <network_set_listen_timeout>

000b9196 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9196:	6840      	ldr	r0, [r0, #4]
   b9198:	2200      	movs	r2, #0
   b919a:	f081 0101 	eor.w	r1, r1, #1
   b919e:	f7fd b95b 	b.w	b6458 <network_listen>

000b91a2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b91a2:	2300      	movs	r3, #0
   b91a4:	6840      	ldr	r0, [r0, #4]
   b91a6:	461a      	mov	r2, r3
   b91a8:	4619      	mov	r1, r3
   b91aa:	f7fd b94d 	b.w	b6448 <network_off>

000b91ae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b91ae:	2300      	movs	r3, #0
   b91b0:	6840      	ldr	r0, [r0, #4]
   b91b2:	461a      	mov	r2, r3
   b91b4:	4619      	mov	r1, r3
   b91b6:	f7fd b93f 	b.w	b6438 <network_on>

000b91ba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b91ba:	2200      	movs	r2, #0
   b91bc:	6840      	ldr	r0, [r0, #4]
   b91be:	4611      	mov	r1, r2
   b91c0:	f7fd b922 	b.w	b6408 <network_connecting>

000b91c4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b91c4:	6840      	ldr	r0, [r0, #4]
   b91c6:	2200      	movs	r2, #0
   b91c8:	2102      	movs	r1, #2
   b91ca:	f7fd b925 	b.w	b6418 <network_disconnect>

000b91ce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b91ce:	2300      	movs	r3, #0
   b91d0:	6840      	ldr	r0, [r0, #4]
   b91d2:	461a      	mov	r2, r3
   b91d4:	f7fd b910 	b.w	b63f8 <network_connect>

000b91d8 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   b91d8:	8983      	ldrh	r3, [r0, #12]
   b91da:	b17b      	cbz	r3, b91fc <_ZNK10WiFiSignal11getStrengthEv+0x24>
   b91dc:	6943      	ldr	r3, [r0, #20]
   b91de:	2b00      	cmp	r3, #0
   b91e0:	db0c      	blt.n	b91fc <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   b91e2:	ee07 3a90 	vmov	s15, r3
   b91e6:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9204 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   b91ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b91ee:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b91f2:	eddf 7a05 	vldr	s15, [pc, #20]	; b9208 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   b91f6:	ee20 0a27 	vmul.f32	s0, s0, s15
   b91fa:	4770      	bx	lr
    }
    return -1.0f;
   b91fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9200:	4770      	bx	lr
   b9202:	bf00      	nop
   b9204:	477fff00 	.word	0x477fff00
   b9208:	42c80000 	.word	0x42c80000

000b920c <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   b920c:	8983      	ldrh	r3, [r0, #12]
   b920e:	b163      	cbz	r3, b922a <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   b9210:	6903      	ldr	r3, [r0, #16]
   b9212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9216:	d008      	beq.n	b922a <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   b9218:	ee07 3a90 	vmov	s15, r3
   b921c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9230 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   b9220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9224:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9228:	4770      	bx	lr
    }
    return 0.0f;
   b922a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9234 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   b922e:	4770      	bx	lr
   b9230:	42c80000 	.word	0x42c80000
   b9234:	00000000 	.word	0x00000000

000b9238 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   b9238:	8983      	ldrh	r3, [r0, #12]
   b923a:	b17b      	cbz	r3, b925c <_ZNK10WiFiSignal10getQualityEv+0x24>
   b923c:	6a03      	ldr	r3, [r0, #32]
   b923e:	2b00      	cmp	r3, #0
   b9240:	db0c      	blt.n	b925c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   b9242:	ee07 3a90 	vmov	s15, r3
   b9246:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9264 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   b924a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b924e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9252:	eddf 7a05 	vldr	s15, [pc, #20]	; b9268 <_ZNK10WiFiSignal10getQualityEv+0x30>
   b9256:	ee20 0a27 	vmul.f32	s0, s0, s15
   b925a:	4770      	bx	lr
    }
    return -1.0f;
   b925c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9260:	4770      	bx	lr
   b9262:	bf00      	nop
   b9264:	477fff00 	.word	0x477fff00
   b9268:	42c80000 	.word	0x42c80000

000b926c <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   b926c:	8983      	ldrh	r3, [r0, #12]
   b926e:	b163      	cbz	r3, b928a <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   b9270:	6983      	ldr	r3, [r0, #24]
   b9272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9276:	d008      	beq.n	b928a <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   b9278:	ee07 3a90 	vmov	s15, r3
   b927c:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9290 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   b9280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9284:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9288:	4770      	bx	lr
    }
    return 0.0f;
   b928a:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9294 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   b928e:	4770      	bx	lr
   b9290:	42c80000 	.word	0x42c80000
   b9294:	00000000 	.word	0x00000000

000b9298 <_ZNK10WiFiSignalcvaEv>:
}
   b9298:	f990 0004 	ldrsb.w	r0, [r0, #4]
   b929c:	4770      	bx	lr

000b929e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b929e:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   b92a0:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b92a2:	4606      	mov	r6, r0
    inf_ = inf;
   b92a4:	f100 050c 	add.w	r5, r0, #12
   b92a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b92aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b92ac:	e894 0003 	ldmia.w	r4, {r0, r1}
   b92b0:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   b92b4:	6933      	ldr	r3, [r6, #16]
   b92b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b92ba:	bf0e      	itee	eq
   b92bc:	2302      	moveq	r3, #2
   b92be:	2264      	movne	r2, #100	; 0x64
   b92c0:	fb93 f3f2 	sdivne	r3, r3, r2
   b92c4:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b92c6:	69b3      	ldr	r3, [r6, #24]
   b92c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b92cc:	bf0c      	ite	eq
   b92ce:	2300      	moveq	r3, #0
   b92d0:	2264      	movne	r2, #100	; 0x64
}
   b92d2:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b92d6:	bf18      	it	ne
   b92d8:	fb93 f3f2 	sdivne	r3, r3, r2
   b92dc:	60b3      	str	r3, [r6, #8]
}
   b92de:	bd70      	pop	{r4, r5, r6, pc}

000b92e0 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   b92e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   b92e4:	4b16      	ldr	r3, [pc, #88]	; (b9340 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   b92e6:	6003      	str	r3, [r0, #0]
   b92e8:	2500      	movs	r5, #0
   b92ea:	460f      	mov	r7, r1
   b92ec:	f04f 0802 	mov.w	r8, #2
   b92f0:	2618      	movs	r6, #24
   b92f2:	e9c0 8501 	strd	r8, r5, [r0, #4]
   b92f6:	b086      	sub	sp, #24
   b92f8:	4632      	mov	r2, r6
   b92fa:	4629      	mov	r1, r5
   b92fc:	4604      	mov	r4, r0
   b92fe:	300c      	adds	r0, #12
   b9300:	f000 ffcf 	bl	ba2a2 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b9304:	6878      	ldr	r0, [r7, #4]
   b9306:	462a      	mov	r2, r5
   b9308:	4629      	mov	r1, r5
   b930a:	f7fd f88d 	bl	b6428 <network_ready>
   b930e:	b180      	cbz	r0, b9332 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
   b9310:	4632      	mov	r2, r6
   b9312:	4629      	mov	r1, r5
   b9314:	4668      	mov	r0, sp
   b9316:	f000 ffc4 	bl	ba2a2 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b931a:	462a      	mov	r2, r5
   b931c:	4669      	mov	r1, sp
   b931e:	4628      	mov	r0, r5
        info.size = sizeof(info);
   b9320:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b9324:	f7fd f804 	bl	b6330 <wlan_connected_info>
        if (r == 0) {
   b9328:	b938      	cbnz	r0, b933a <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   b932a:	4669      	mov	r1, sp
   b932c:	4620      	mov	r0, r4
   b932e:	f7ff ffb6 	bl	b929e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
   b9332:	4620      	mov	r0, r4
   b9334:	b006      	add	sp, #24
   b9336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   b933a:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   b933e:	e7f8      	b.n	b9332 <_ZN5spark9WiFiClass4RSSIEv+0x52>
   b9340:	000bd050 	.word	0x000bd050

000b9344 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9344:	4b02      	ldr	r3, [pc, #8]	; (b9350 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9346:	2204      	movs	r2, #4
   b9348:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b934a:	4a02      	ldr	r2, [pc, #8]	; (b9354 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b934c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b934e:	4770      	bx	lr
   b9350:	2003e710 	.word	0x2003e710
   b9354:	000bd014 	.word	0x000bd014

000b9358 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9358:	2300      	movs	r3, #0
   b935a:	6840      	ldr	r0, [r0, #4]
   b935c:	461a      	mov	r2, r3
   b935e:	f7fd b84b 	b.w	b63f8 <network_connect>

000b9362 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9362:	6840      	ldr	r0, [r0, #4]
   b9364:	2200      	movs	r2, #0
   b9366:	2102      	movs	r1, #2
   b9368:	f7fd b856 	b.w	b6418 <network_disconnect>

000b936c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b936c:	2200      	movs	r2, #0
   b936e:	6840      	ldr	r0, [r0, #4]
   b9370:	4611      	mov	r1, r2
   b9372:	f7fd b849 	b.w	b6408 <network_connecting>

000b9376 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9376:	2200      	movs	r2, #0
   b9378:	6840      	ldr	r0, [r0, #4]
   b937a:	4611      	mov	r1, r2
   b937c:	f7fd b854 	b.w	b6428 <network_ready>

000b9380 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9380:	2300      	movs	r3, #0
   b9382:	6840      	ldr	r0, [r0, #4]
   b9384:	461a      	mov	r2, r3
   b9386:	4619      	mov	r1, r3
   b9388:	f7fd b856 	b.w	b6438 <network_on>

000b938c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b938c:	2300      	movs	r3, #0
   b938e:	6840      	ldr	r0, [r0, #4]
   b9390:	461a      	mov	r2, r3
   b9392:	4619      	mov	r1, r3
   b9394:	f7fd b858 	b.w	b6448 <network_off>

000b9398 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9398:	6840      	ldr	r0, [r0, #4]
   b939a:	2100      	movs	r1, #0
   b939c:	f7fd b87c 	b.w	b6498 <network_is_on>

000b93a0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b93a0:	6840      	ldr	r0, [r0, #4]
   b93a2:	2100      	movs	r1, #0
   b93a4:	f7fd b880 	b.w	b64a8 <network_is_off>

000b93a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b93a8:	6840      	ldr	r0, [r0, #4]
   b93aa:	2200      	movs	r2, #0
   b93ac:	f081 0101 	eor.w	r1, r1, #1
   b93b0:	f7fd b852 	b.w	b6458 <network_listen>

000b93b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b93b4:	6840      	ldr	r0, [r0, #4]
   b93b6:	2200      	movs	r2, #0
   b93b8:	f7fd b85e 	b.w	b6478 <network_set_listen_timeout>

000b93bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b93bc:	2200      	movs	r2, #0
   b93be:	6840      	ldr	r0, [r0, #4]
   b93c0:	4611      	mov	r1, r2
   b93c2:	f7fd b861 	b.w	b6488 <network_get_listen_timeout>

000b93c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b93c6:	2200      	movs	r2, #0
   b93c8:	6840      	ldr	r0, [r0, #4]
   b93ca:	4611      	mov	r1, r2
   b93cc:	f7fd b84c 	b.w	b6468 <network_listening>

000b93d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b93d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b93d4:	b095      	sub	sp, #84	; 0x54
   b93d6:	4614      	mov	r4, r2
   b93d8:	460d      	mov	r5, r1
   b93da:	4607      	mov	r7, r0
    IPAddress addr;
   b93dc:	f7ff fa3a 	bl	b8854 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b93e0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b93e2:	221c      	movs	r2, #28
   b93e4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b93e6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b93e8:	f000 ff5b 	bl	ba2a2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b93ec:	2340      	movs	r3, #64	; 0x40
   b93ee:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b93f0:	4620      	mov	r0, r4
   b93f2:	466b      	mov	r3, sp
   b93f4:	aa0c      	add	r2, sp, #48	; 0x30
   b93f6:	2100      	movs	r1, #0
   b93f8:	f7fc fd70 	bl	b5edc <netdb_getaddrinfo>
    if (!r) {
   b93fc:	4604      	mov	r4, r0
   b93fe:	2800      	cmp	r0, #0
   b9400:	d14b      	bne.n	b949a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9402:	4602      	mov	r2, r0
   b9404:	2101      	movs	r1, #1
   b9406:	6868      	ldr	r0, [r5, #4]
   b9408:	f7fd f80e 	bl	b6428 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b940c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b940e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9410:	4622      	mov	r2, r4
   b9412:	6868      	ldr	r0, [r5, #4]
   b9414:	f7fd f808 	bl	b6428 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9418:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b941a:	4681      	mov	r9, r0
        bool ok = false;
   b941c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b941e:	2e00      	cmp	r6, #0
   b9420:	d03b      	beq.n	b949a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9422:	2900      	cmp	r1, #0
   b9424:	d139      	bne.n	b949a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9426:	6873      	ldr	r3, [r6, #4]
   b9428:	2b02      	cmp	r3, #2
   b942a:	d003      	beq.n	b9434 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b942c:	2b0a      	cmp	r3, #10
   b942e:	d011      	beq.n	b9454 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9430:	69f6      	ldr	r6, [r6, #28]
   b9432:	e7f4      	b.n	b941e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9434:	f1b8 0f00 	cmp.w	r8, #0
   b9438:	d0fa      	beq.n	b9430 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b943a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b943c:	a806      	add	r0, sp, #24
   b943e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9440:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9442:	f7ff fa53 	bl	b88ec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9448:	1d3c      	adds	r4, r7, #4
   b944a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b944c:	682b      	ldr	r3, [r5, #0]
   b944e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9450:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9452:	e7ed      	b.n	b9430 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9454:	f1b9 0f00 	cmp.w	r9, #0
   b9458:	d0ea      	beq.n	b9430 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b945a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b945c:	2210      	movs	r2, #16
   b945e:	a801      	add	r0, sp, #4
   b9460:	f000 ff1f 	bl	ba2a2 <memset>
                    a.v = 6;
   b9464:	2306      	movs	r3, #6
   b9466:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b946a:	ad01      	add	r5, sp, #4
   b946c:	f104 0308 	add.w	r3, r4, #8
   b9470:	3418      	adds	r4, #24
   b9472:	6818      	ldr	r0, [r3, #0]
   b9474:	6859      	ldr	r1, [r3, #4]
   b9476:	462a      	mov	r2, r5
   b9478:	c203      	stmia	r2!, {r0, r1}
   b947a:	3308      	adds	r3, #8
   b947c:	42a3      	cmp	r3, r4
   b947e:	4615      	mov	r5, r2
   b9480:	d1f7      	bne.n	b9472 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9482:	a901      	add	r1, sp, #4
   b9484:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9486:	ad07      	add	r5, sp, #28
   b9488:	f7ff f9f2 	bl	b8870 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b948c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b948e:	1d3c      	adds	r4, r7, #4
   b9490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9492:	682b      	ldr	r3, [r5, #0]
   b9494:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9496:	4649      	mov	r1, r9
   b9498:	e7ca      	b.n	b9430 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b949a:	9800      	ldr	r0, [sp, #0]
   b949c:	f7fc fd16 	bl	b5ecc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b94a0:	4638      	mov	r0, r7
   b94a2:	b015      	add	sp, #84	; 0x54
   b94a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b94a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b94a8:	4b02      	ldr	r3, [pc, #8]	; (b94b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b94aa:	4a03      	ldr	r2, [pc, #12]	; (b94b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b94ac:	601a      	str	r2, [r3, #0]
   b94ae:	2200      	movs	r2, #0
   b94b0:	605a      	str	r2, [r3, #4]

} // spark
   b94b2:	4770      	bx	lr
   b94b4:	2003e718 	.word	0x2003e718
   b94b8:	000bd074 	.word	0x000bd074

000b94bc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b94bc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b94be:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b94c0:	d902      	bls.n	b94c8 <pinAvailable+0xc>
    return false;
   b94c2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b94c4:	b002      	add	sp, #8
   b94c6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b94c8:	f1a0 030b 	sub.w	r3, r0, #11
   b94cc:	2b02      	cmp	r3, #2
   b94ce:	d81a      	bhi.n	b9506 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b94d0:	4c17      	ldr	r4, [pc, #92]	; (b9530 <pinAvailable+0x74>)
   b94d2:	7821      	ldrb	r1, [r4, #0]
   b94d4:	f3bf 8f5b 	dmb	ish
   b94d8:	f011 0101 	ands.w	r1, r1, #1
   b94dc:	d10b      	bne.n	b94f6 <pinAvailable+0x3a>
   b94de:	4620      	mov	r0, r4
   b94e0:	9101      	str	r1, [sp, #4]
   b94e2:	f7fa fdde 	bl	b40a2 <__cxa_guard_acquire>
   b94e6:	9901      	ldr	r1, [sp, #4]
   b94e8:	b128      	cbz	r0, b94f6 <pinAvailable+0x3a>
   b94ea:	4812      	ldr	r0, [pc, #72]	; (b9534 <pinAvailable+0x78>)
   b94ec:	f7fd f8ba 	bl	b6664 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b94f0:	4620      	mov	r0, r4
   b94f2:	f7fa fddb 	bl	b40ac <__cxa_guard_release>
   b94f6:	4b0f      	ldr	r3, [pc, #60]	; (b9534 <pinAvailable+0x78>)
   b94f8:	7818      	ldrb	r0, [r3, #0]
   b94fa:	f7fc fee1 	bl	b62c0 <hal_spi_is_enabled>
   b94fe:	2800      	cmp	r0, #0
   b9500:	d1df      	bne.n	b94c2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9502:	2001      	movs	r0, #1
   b9504:	e7de      	b.n	b94c4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9506:	2801      	cmp	r0, #1
   b9508:	d809      	bhi.n	b951e <pinAvailable+0x62>
   b950a:	f000 f881 	bl	b9610 <_Z19__fetch_global_Wirev>
   b950e:	2100      	movs	r1, #0
   b9510:	7c00      	ldrb	r0, [r0, #16]
   b9512:	f7fc fe8d 	bl	b6230 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9516:	f080 0001 	eor.w	r0, r0, #1
   b951a:	b2c0      	uxtb	r0, r0
   b951c:	e7d2      	b.n	b94c4 <pinAvailable+0x8>
   b951e:	3809      	subs	r0, #9
   b9520:	2801      	cmp	r0, #1
   b9522:	d8ee      	bhi.n	b9502 <pinAvailable+0x46>
   b9524:	f000 f834 	bl	b9590 <_Z22__fetch_global_Serial1v>
   b9528:	7c00      	ldrb	r0, [r0, #16]
   b952a:	f7fc fe41 	bl	b61b0 <hal_usart_is_enabled>
   b952e:	e7f2      	b.n	b9516 <pinAvailable+0x5a>
   b9530:	2003e720 	.word	0x2003e720
   b9534:	2003e724 	.word	0x2003e724

000b9538 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9538:	2823      	cmp	r0, #35	; 0x23
{
   b953a:	b538      	push	{r3, r4, r5, lr}
   b953c:	4604      	mov	r4, r0
   b953e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9540:	d80a      	bhi.n	b9558 <pinMode+0x20>
   b9542:	29ff      	cmp	r1, #255	; 0xff
   b9544:	d008      	beq.n	b9558 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9546:	f7ff ffb9 	bl	b94bc <pinAvailable>
   b954a:	b128      	cbz	r0, b9558 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b954c:	4629      	mov	r1, r5
   b954e:	4620      	mov	r0, r4
}
   b9550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9554:	f7fc bcca 	b.w	b5eec <HAL_Pin_Mode>
}
   b9558:	bd38      	pop	{r3, r4, r5, pc}

000b955a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b955a:	4770      	bx	lr

000b955c <_Z20acquireSerial1Bufferv>:
{
   b955c:	b538      	push	{r3, r4, r5, lr}
   b955e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9560:	2514      	movs	r5, #20
   b9562:	462a      	mov	r2, r5
   b9564:	2100      	movs	r1, #0
   b9566:	f000 fe9c 	bl	ba2a2 <memset>
   b956a:	8025      	strh	r5, [r4, #0]
   b956c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b956e:	4907      	ldr	r1, [pc, #28]	; (b958c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9570:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9572:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9574:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9576:	f000 f86f 	bl	b9658 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b957a:	4904      	ldr	r1, [pc, #16]	; (b958c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b957c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b957e:	4628      	mov	r0, r5
   b9580:	f000 f86a 	bl	b9658 <_ZnajRKSt9nothrow_t>
    };
   b9584:	60e0      	str	r0, [r4, #12]
}
   b9586:	4620      	mov	r0, r4
   b9588:	bd38      	pop	{r3, r4, r5, pc}
   b958a:	bf00      	nop
   b958c:	000bd0a8 	.word	0x000bd0a8

000b9590 <_Z22__fetch_global_Serial1v>:
{
   b9590:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9592:	4d0e      	ldr	r5, [pc, #56]	; (b95cc <_Z22__fetch_global_Serial1v+0x3c>)
   b9594:	7829      	ldrb	r1, [r5, #0]
   b9596:	f3bf 8f5b 	dmb	ish
   b959a:	f011 0401 	ands.w	r4, r1, #1
{
   b959e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95a0:	d111      	bne.n	b95c6 <_Z22__fetch_global_Serial1v+0x36>
   b95a2:	4628      	mov	r0, r5
   b95a4:	f7fa fd7d 	bl	b40a2 <__cxa_guard_acquire>
   b95a8:	b168      	cbz	r0, b95c6 <_Z22__fetch_global_Serial1v+0x36>
   b95aa:	a801      	add	r0, sp, #4
   b95ac:	f7ff ffd6 	bl	b955c <_Z20acquireSerial1Bufferv>
   b95b0:	aa01      	add	r2, sp, #4
   b95b2:	4621      	mov	r1, r4
   b95b4:	4806      	ldr	r0, [pc, #24]	; (b95d0 <_Z22__fetch_global_Serial1v+0x40>)
   b95b6:	f7ff fa93 	bl	b8ae0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b95ba:	4628      	mov	r0, r5
   b95bc:	f7fa fd76 	bl	b40ac <__cxa_guard_release>
   b95c0:	4804      	ldr	r0, [pc, #16]	; (b95d4 <_Z22__fetch_global_Serial1v+0x44>)
   b95c2:	f000 fe29 	bl	ba218 <atexit>
    return serial1;
}
   b95c6:	4802      	ldr	r0, [pc, #8]	; (b95d0 <_Z22__fetch_global_Serial1v+0x40>)
   b95c8:	b007      	add	sp, #28
   b95ca:	bd30      	pop	{r4, r5, pc}
   b95cc:	2003e72c 	.word	0x2003e72c
   b95d0:	2003e730 	.word	0x2003e730
   b95d4:	000b955b 	.word	0x000b955b

000b95d8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b95d8:	4770      	bx	lr
	...

000b95dc <_Z17acquireWireBufferv>:
{
   b95dc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b95de:	4b0a      	ldr	r3, [pc, #40]	; (b9608 <_Z17acquireWireBufferv+0x2c>)
   b95e0:	6003      	str	r3, [r0, #0]
   b95e2:	2301      	movs	r3, #1
{
   b95e4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b95e6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b95e8:	4908      	ldr	r1, [pc, #32]	; (b960c <_Z17acquireWireBufferv+0x30>)
   b95ea:	2020      	movs	r0, #32
   b95ec:	f000 f834 	bl	b9658 <_ZnajRKSt9nothrow_t>
	};
   b95f0:	2520      	movs	r5, #32
   b95f2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b95f4:	4905      	ldr	r1, [pc, #20]	; (b960c <_Z17acquireWireBufferv+0x30>)
	};
   b95f6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b95f8:	4628      	mov	r0, r5
   b95fa:	f000 f82d 	bl	b9658 <_ZnajRKSt9nothrow_t>
	};
   b95fe:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b9602:	4620      	mov	r0, r4
   b9604:	bd38      	pop	{r3, r4, r5, pc}
   b9606:	bf00      	nop
   b9608:	00010018 	.word	0x00010018
   b960c:	000bd0a8 	.word	0x000bd0a8

000b9610 <_Z19__fetch_global_Wirev>:
{
   b9610:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9612:	4d0e      	ldr	r5, [pc, #56]	; (b964c <_Z19__fetch_global_Wirev+0x3c>)
   b9614:	7829      	ldrb	r1, [r5, #0]
   b9616:	f3bf 8f5b 	dmb	ish
   b961a:	f011 0401 	ands.w	r4, r1, #1
{
   b961e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9620:	d111      	bne.n	b9646 <_Z19__fetch_global_Wirev+0x36>
   b9622:	4628      	mov	r0, r5
   b9624:	f7fa fd3d 	bl	b40a2 <__cxa_guard_acquire>
   b9628:	b168      	cbz	r0, b9646 <_Z19__fetch_global_Wirev+0x36>
   b962a:	4668      	mov	r0, sp
   b962c:	f7ff ffd6 	bl	b95dc <_Z17acquireWireBufferv>
   b9630:	466a      	mov	r2, sp
   b9632:	4621      	mov	r1, r4
   b9634:	4806      	ldr	r0, [pc, #24]	; (b9650 <_Z19__fetch_global_Wirev+0x40>)
   b9636:	f7ff faa7 	bl	b8b88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b963a:	4628      	mov	r0, r5
   b963c:	f7fa fd36 	bl	b40ac <__cxa_guard_release>
   b9640:	4804      	ldr	r0, [pc, #16]	; (b9654 <_Z19__fetch_global_Wirev+0x44>)
   b9642:	f000 fde9 	bl	ba218 <atexit>
	return wire;
}
   b9646:	4802      	ldr	r0, [pc, #8]	; (b9650 <_Z19__fetch_global_Wirev+0x40>)
   b9648:	b007      	add	sp, #28
   b964a:	bd30      	pop	{r4, r5, pc}
   b964c:	2003e748 	.word	0x2003e748
   b9650:	2003e74c 	.word	0x2003e74c
   b9654:	000b95d9 	.word	0x000b95d9

000b9658 <_ZnajRKSt9nothrow_t>:
   b9658:	f7fa bd1f 	b.w	b409a <_Znaj>

000b965c <_ZSt25__throw_bad_function_callv>:
   b965c:	b508      	push	{r3, lr}
   b965e:	f7fc ff93 	bl	b6588 <abort>
	...

000b9664 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9664:	4901      	ldr	r1, [pc, #4]	; (b966c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9666:	f000 b8f9 	b.w	b985c <_ZNKSt9type_infoeqERKS_>
   b966a:	bf00      	nop
   b966c:	000bd0c4 	.word	0x000bd0c4

000b9670 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9672:	2400      	movs	r4, #0
   b9674:	2310      	movs	r3, #16
   b9676:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b967a:	6803      	ldr	r3, [r0, #0]
   b967c:	4615      	mov	r5, r2
   b967e:	699e      	ldr	r6, [r3, #24]
   b9680:	6812      	ldr	r2, [r2, #0]
   b9682:	466b      	mov	r3, sp
   b9684:	e9cd 4400 	strd	r4, r4, [sp]
   b9688:	47b0      	blx	r6
   b968a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b968e:	f003 0306 	and.w	r3, r3, #6
   b9692:	2b06      	cmp	r3, #6
   b9694:	bf03      	ittte	eq
   b9696:	9b00      	ldreq	r3, [sp, #0]
   b9698:	602b      	streq	r3, [r5, #0]
   b969a:	2001      	moveq	r0, #1
   b969c:	4620      	movne	r0, r4
   b969e:	b004      	add	sp, #16
   b96a0:	bd70      	pop	{r4, r5, r6, pc}

000b96a2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b96a2:	9800      	ldr	r0, [sp, #0]
   b96a4:	4290      	cmp	r0, r2
   b96a6:	bf14      	ite	ne
   b96a8:	2001      	movne	r0, #1
   b96aa:	2006      	moveq	r0, #6
   b96ac:	4770      	bx	lr
	...

000b96b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b96b0:	b510      	push	{r4, lr}
   b96b2:	4b03      	ldr	r3, [pc, #12]	; (b96c0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b96b4:	6003      	str	r3, [r0, #0]
   b96b6:	4604      	mov	r4, r0
   b96b8:	f000 f8cd 	bl	b9856 <_ZNSt9type_infoD1Ev>
   b96bc:	4620      	mov	r0, r4
   b96be:	bd10      	pop	{r4, pc}
   b96c0:	000bd104 	.word	0x000bd104

000b96c4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b96c4:	b510      	push	{r4, lr}
   b96c6:	4604      	mov	r4, r0
   b96c8:	f7ff fff2 	bl	b96b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b96cc:	4620      	mov	r0, r4
   b96ce:	2108      	movs	r1, #8
   b96d0:	f7fa fce5 	bl	b409e <_ZdlPvj>
   b96d4:	4620      	mov	r0, r4
   b96d6:	bd10      	pop	{r4, pc}

000b96d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b96d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b96dc:	461f      	mov	r7, r3
   b96de:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b96e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b96e6:	4598      	cmp	r8, r3
   b96e8:	4606      	mov	r6, r0
   b96ea:	4615      	mov	r5, r2
   b96ec:	d107      	bne.n	b96fe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b96ee:	9907      	ldr	r1, [sp, #28]
   b96f0:	f000 f8b4 	bl	b985c <_ZNKSt9type_infoeqERKS_>
   b96f4:	b118      	cbz	r0, b96fe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b96f6:	7165      	strb	r5, [r4, #5]
   b96f8:	2000      	movs	r0, #0
   b96fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b96fe:	4639      	mov	r1, r7
   b9700:	4630      	mov	r0, r6
   b9702:	f000 f8ab 	bl	b985c <_ZNKSt9type_infoeqERKS_>
   b9706:	2800      	cmp	r0, #0
   b9708:	d0f6      	beq.n	b96f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b970a:	2301      	movs	r3, #1
   b970c:	f8c4 8000 	str.w	r8, [r4]
   b9710:	7125      	strb	r5, [r4, #4]
   b9712:	71a3      	strb	r3, [r4, #6]
   b9714:	e7f0      	b.n	b96f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9716 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9716:	b538      	push	{r3, r4, r5, lr}
   b9718:	4615      	mov	r5, r2
   b971a:	461c      	mov	r4, r3
   b971c:	f000 f89e 	bl	b985c <_ZNKSt9type_infoeqERKS_>
   b9720:	b120      	cbz	r0, b972c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9722:	2308      	movs	r3, #8
   b9724:	60e3      	str	r3, [r4, #12]
   b9726:	2306      	movs	r3, #6
   b9728:	6025      	str	r5, [r4, #0]
   b972a:	7123      	strb	r3, [r4, #4]
   b972c:	bd38      	pop	{r3, r4, r5, pc}

000b972e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b972e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9730:	4605      	mov	r5, r0
   b9732:	460c      	mov	r4, r1
   b9734:	9201      	str	r2, [sp, #4]
   b9736:	461e      	mov	r6, r3
   b9738:	f000 f890 	bl	b985c <_ZNKSt9type_infoeqERKS_>
   b973c:	b950      	cbnz	r0, b9754 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b973e:	2e03      	cmp	r6, #3
   b9740:	d808      	bhi.n	b9754 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9742:	6823      	ldr	r3, [r4, #0]
   b9744:	9a01      	ldr	r2, [sp, #4]
   b9746:	695b      	ldr	r3, [r3, #20]
   b9748:	4629      	mov	r1, r5
   b974a:	4620      	mov	r0, r4
   b974c:	b002      	add	sp, #8
   b974e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9752:	4718      	bx	r3
   b9754:	b002      	add	sp, #8
   b9756:	bd70      	pop	{r4, r5, r6, pc}

000b9758 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9758:	b510      	push	{r4, lr}
   b975a:	4b03      	ldr	r3, [pc, #12]	; (b9768 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b975c:	6003      	str	r3, [r0, #0]
   b975e:	4604      	mov	r4, r0
   b9760:	f7ff ffa6 	bl	b96b0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9764:	4620      	mov	r0, r4
   b9766:	bd10      	pop	{r4, pc}
   b9768:	000bd164 	.word	0x000bd164

000b976c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b976c:	b510      	push	{r4, lr}
   b976e:	4604      	mov	r4, r0
   b9770:	f7ff fff2 	bl	b9758 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9774:	4620      	mov	r0, r4
   b9776:	210c      	movs	r1, #12
   b9778:	f7fa fc91 	bl	b409e <_ZdlPvj>
   b977c:	4620      	mov	r0, r4
   b977e:	bd10      	pop	{r4, pc}

000b9780 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9782:	9f08      	ldr	r7, [sp, #32]
   b9784:	4297      	cmp	r7, r2
   b9786:	4605      	mov	r5, r0
   b9788:	460e      	mov	r6, r1
   b978a:	4614      	mov	r4, r2
   b978c:	d00a      	beq.n	b97a4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b978e:	68a8      	ldr	r0, [r5, #8]
   b9790:	6802      	ldr	r2, [r0, #0]
   b9792:	9708      	str	r7, [sp, #32]
   b9794:	6a15      	ldr	r5, [r2, #32]
   b9796:	4631      	mov	r1, r6
   b9798:	4622      	mov	r2, r4
   b979a:	46ac      	mov	ip, r5
   b979c:	b003      	add	sp, #12
   b979e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b97a2:	4760      	bx	ip
   b97a4:	4619      	mov	r1, r3
   b97a6:	9301      	str	r3, [sp, #4]
   b97a8:	f000 f858 	bl	b985c <_ZNKSt9type_infoeqERKS_>
   b97ac:	9b01      	ldr	r3, [sp, #4]
   b97ae:	2800      	cmp	r0, #0
   b97b0:	d0ed      	beq.n	b978e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b97b2:	2006      	movs	r0, #6
   b97b4:	b003      	add	sp, #12
   b97b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b97b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b97b8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b97bc:	460d      	mov	r5, r1
   b97be:	4619      	mov	r1, r3
   b97c0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b97c4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b97c8:	4681      	mov	r9, r0
   b97ca:	4617      	mov	r7, r2
   b97cc:	4698      	mov	r8, r3
   b97ce:	f000 f845 	bl	b985c <_ZNKSt9type_infoeqERKS_>
   b97d2:	b190      	cbz	r0, b97fa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b97d4:	2d00      	cmp	r5, #0
   b97d6:	6034      	str	r4, [r6, #0]
   b97d8:	7137      	strb	r7, [r6, #4]
   b97da:	db09      	blt.n	b97f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b97dc:	1961      	adds	r1, r4, r5
   b97de:	458a      	cmp	sl, r1
   b97e0:	bf0c      	ite	eq
   b97e2:	2106      	moveq	r1, #6
   b97e4:	2101      	movne	r1, #1
   b97e6:	71b1      	strb	r1, [r6, #6]
   b97e8:	2000      	movs	r0, #0
   b97ea:	b001      	add	sp, #4
   b97ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b97f0:	3502      	adds	r5, #2
   b97f2:	d1f9      	bne.n	b97e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b97f4:	2301      	movs	r3, #1
   b97f6:	71b3      	strb	r3, [r6, #6]
   b97f8:	e7f6      	b.n	b97e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b97fa:	4554      	cmp	r4, sl
   b97fc:	d106      	bne.n	b980c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b97fe:	4659      	mov	r1, fp
   b9800:	4648      	mov	r0, r9
   b9802:	f000 f82b 	bl	b985c <_ZNKSt9type_infoeqERKS_>
   b9806:	b108      	cbz	r0, b980c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9808:	7177      	strb	r7, [r6, #5]
   b980a:	e7ed      	b.n	b97e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b980c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9810:	6803      	ldr	r3, [r0, #0]
   b9812:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9816:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b981a:	69dc      	ldr	r4, [r3, #28]
   b981c:	463a      	mov	r2, r7
   b981e:	4643      	mov	r3, r8
   b9820:	4629      	mov	r1, r5
   b9822:	46a4      	mov	ip, r4
   b9824:	b001      	add	sp, #4
   b9826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b982a:	4760      	bx	ip

000b982c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9830:	4607      	mov	r7, r0
   b9832:	460c      	mov	r4, r1
   b9834:	4615      	mov	r5, r2
   b9836:	461e      	mov	r6, r3
   b9838:	f7ff ff6d 	bl	b9716 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b983c:	b948      	cbnz	r0, b9852 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b983e:	68b8      	ldr	r0, [r7, #8]
   b9840:	6803      	ldr	r3, [r0, #0]
   b9842:	699f      	ldr	r7, [r3, #24]
   b9844:	462a      	mov	r2, r5
   b9846:	4633      	mov	r3, r6
   b9848:	4621      	mov	r1, r4
   b984a:	46bc      	mov	ip, r7
   b984c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9850:	4760      	bx	ip
   b9852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9856 <_ZNSt9type_infoD1Ev>:
   b9856:	4770      	bx	lr

000b9858 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9858:	2000      	movs	r0, #0
   b985a:	4770      	bx	lr

000b985c <_ZNKSt9type_infoeqERKS_>:
   b985c:	4281      	cmp	r1, r0
   b985e:	b508      	push	{r3, lr}
   b9860:	d00e      	beq.n	b9880 <_ZNKSt9type_infoeqERKS_+0x24>
   b9862:	6840      	ldr	r0, [r0, #4]
   b9864:	7803      	ldrb	r3, [r0, #0]
   b9866:	2b2a      	cmp	r3, #42	; 0x2a
   b9868:	d00c      	beq.n	b9884 <_ZNKSt9type_infoeqERKS_+0x28>
   b986a:	6849      	ldr	r1, [r1, #4]
   b986c:	780b      	ldrb	r3, [r1, #0]
   b986e:	2b2a      	cmp	r3, #42	; 0x2a
   b9870:	bf08      	it	eq
   b9872:	3101      	addeq	r1, #1
   b9874:	f000 fd5b 	bl	ba32e <strcmp>
   b9878:	fab0 f080 	clz	r0, r0
   b987c:	0940      	lsrs	r0, r0, #5
   b987e:	bd08      	pop	{r3, pc}
   b9880:	2001      	movs	r0, #1
   b9882:	e7fc      	b.n	b987e <_ZNKSt9type_infoeqERKS_+0x22>
   b9884:	2000      	movs	r0, #0
   b9886:	e7fa      	b.n	b987e <_ZNKSt9type_infoeqERKS_+0x22>

000b9888 <__aeabi_drsub>:
   b9888:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b988c:	e002      	b.n	b9894 <__adddf3>
   b988e:	bf00      	nop

000b9890 <__aeabi_dsub>:
   b9890:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9894 <__adddf3>:
   b9894:	b530      	push	{r4, r5, lr}
   b9896:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b989a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b989e:	ea94 0f05 	teq	r4, r5
   b98a2:	bf08      	it	eq
   b98a4:	ea90 0f02 	teqeq	r0, r2
   b98a8:	bf1f      	itttt	ne
   b98aa:	ea54 0c00 	orrsne.w	ip, r4, r0
   b98ae:	ea55 0c02 	orrsne.w	ip, r5, r2
   b98b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b98b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b98ba:	f000 80e2 	beq.w	b9a82 <__adddf3+0x1ee>
   b98be:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b98c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b98c6:	bfb8      	it	lt
   b98c8:	426d      	neglt	r5, r5
   b98ca:	dd0c      	ble.n	b98e6 <__adddf3+0x52>
   b98cc:	442c      	add	r4, r5
   b98ce:	ea80 0202 	eor.w	r2, r0, r2
   b98d2:	ea81 0303 	eor.w	r3, r1, r3
   b98d6:	ea82 0000 	eor.w	r0, r2, r0
   b98da:	ea83 0101 	eor.w	r1, r3, r1
   b98de:	ea80 0202 	eor.w	r2, r0, r2
   b98e2:	ea81 0303 	eor.w	r3, r1, r3
   b98e6:	2d36      	cmp	r5, #54	; 0x36
   b98e8:	bf88      	it	hi
   b98ea:	bd30      	pophi	{r4, r5, pc}
   b98ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b98f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b98f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b98f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b98fc:	d002      	beq.n	b9904 <__adddf3+0x70>
   b98fe:	4240      	negs	r0, r0
   b9900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9904:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9908:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b990c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9910:	d002      	beq.n	b9918 <__adddf3+0x84>
   b9912:	4252      	negs	r2, r2
   b9914:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9918:	ea94 0f05 	teq	r4, r5
   b991c:	f000 80a7 	beq.w	b9a6e <__adddf3+0x1da>
   b9920:	f1a4 0401 	sub.w	r4, r4, #1
   b9924:	f1d5 0e20 	rsbs	lr, r5, #32
   b9928:	db0d      	blt.n	b9946 <__adddf3+0xb2>
   b992a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b992e:	fa22 f205 	lsr.w	r2, r2, r5
   b9932:	1880      	adds	r0, r0, r2
   b9934:	f141 0100 	adc.w	r1, r1, #0
   b9938:	fa03 f20e 	lsl.w	r2, r3, lr
   b993c:	1880      	adds	r0, r0, r2
   b993e:	fa43 f305 	asr.w	r3, r3, r5
   b9942:	4159      	adcs	r1, r3
   b9944:	e00e      	b.n	b9964 <__adddf3+0xd0>
   b9946:	f1a5 0520 	sub.w	r5, r5, #32
   b994a:	f10e 0e20 	add.w	lr, lr, #32
   b994e:	2a01      	cmp	r2, #1
   b9950:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9954:	bf28      	it	cs
   b9956:	f04c 0c02 	orrcs.w	ip, ip, #2
   b995a:	fa43 f305 	asr.w	r3, r3, r5
   b995e:	18c0      	adds	r0, r0, r3
   b9960:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9964:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9968:	d507      	bpl.n	b997a <__adddf3+0xe6>
   b996a:	f04f 0e00 	mov.w	lr, #0
   b996e:	f1dc 0c00 	rsbs	ip, ip, #0
   b9972:	eb7e 0000 	sbcs.w	r0, lr, r0
   b9976:	eb6e 0101 	sbc.w	r1, lr, r1
   b997a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b997e:	d31b      	bcc.n	b99b8 <__adddf3+0x124>
   b9980:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b9984:	d30c      	bcc.n	b99a0 <__adddf3+0x10c>
   b9986:	0849      	lsrs	r1, r1, #1
   b9988:	ea5f 0030 	movs.w	r0, r0, rrx
   b998c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b9990:	f104 0401 	add.w	r4, r4, #1
   b9994:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9998:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b999c:	f080 809a 	bcs.w	b9ad4 <__adddf3+0x240>
   b99a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b99a4:	bf08      	it	eq
   b99a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b99aa:	f150 0000 	adcs.w	r0, r0, #0
   b99ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b99b2:	ea41 0105 	orr.w	r1, r1, r5
   b99b6:	bd30      	pop	{r4, r5, pc}
   b99b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b99bc:	4140      	adcs	r0, r0
   b99be:	eb41 0101 	adc.w	r1, r1, r1
   b99c2:	3c01      	subs	r4, #1
   b99c4:	bf28      	it	cs
   b99c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b99ca:	d2e9      	bcs.n	b99a0 <__adddf3+0x10c>
   b99cc:	f091 0f00 	teq	r1, #0
   b99d0:	bf04      	itt	eq
   b99d2:	4601      	moveq	r1, r0
   b99d4:	2000      	moveq	r0, #0
   b99d6:	fab1 f381 	clz	r3, r1
   b99da:	bf08      	it	eq
   b99dc:	3320      	addeq	r3, #32
   b99de:	f1a3 030b 	sub.w	r3, r3, #11
   b99e2:	f1b3 0220 	subs.w	r2, r3, #32
   b99e6:	da0c      	bge.n	b9a02 <__adddf3+0x16e>
   b99e8:	320c      	adds	r2, #12
   b99ea:	dd08      	ble.n	b99fe <__adddf3+0x16a>
   b99ec:	f102 0c14 	add.w	ip, r2, #20
   b99f0:	f1c2 020c 	rsb	r2, r2, #12
   b99f4:	fa01 f00c 	lsl.w	r0, r1, ip
   b99f8:	fa21 f102 	lsr.w	r1, r1, r2
   b99fc:	e00c      	b.n	b9a18 <__adddf3+0x184>
   b99fe:	f102 0214 	add.w	r2, r2, #20
   b9a02:	bfd8      	it	le
   b9a04:	f1c2 0c20 	rsble	ip, r2, #32
   b9a08:	fa01 f102 	lsl.w	r1, r1, r2
   b9a0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9a10:	bfdc      	itt	le
   b9a12:	ea41 010c 	orrle.w	r1, r1, ip
   b9a16:	4090      	lslle	r0, r2
   b9a18:	1ae4      	subs	r4, r4, r3
   b9a1a:	bfa2      	ittt	ge
   b9a1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9a20:	4329      	orrge	r1, r5
   b9a22:	bd30      	popge	{r4, r5, pc}
   b9a24:	ea6f 0404 	mvn.w	r4, r4
   b9a28:	3c1f      	subs	r4, #31
   b9a2a:	da1c      	bge.n	b9a66 <__adddf3+0x1d2>
   b9a2c:	340c      	adds	r4, #12
   b9a2e:	dc0e      	bgt.n	b9a4e <__adddf3+0x1ba>
   b9a30:	f104 0414 	add.w	r4, r4, #20
   b9a34:	f1c4 0220 	rsb	r2, r4, #32
   b9a38:	fa20 f004 	lsr.w	r0, r0, r4
   b9a3c:	fa01 f302 	lsl.w	r3, r1, r2
   b9a40:	ea40 0003 	orr.w	r0, r0, r3
   b9a44:	fa21 f304 	lsr.w	r3, r1, r4
   b9a48:	ea45 0103 	orr.w	r1, r5, r3
   b9a4c:	bd30      	pop	{r4, r5, pc}
   b9a4e:	f1c4 040c 	rsb	r4, r4, #12
   b9a52:	f1c4 0220 	rsb	r2, r4, #32
   b9a56:	fa20 f002 	lsr.w	r0, r0, r2
   b9a5a:	fa01 f304 	lsl.w	r3, r1, r4
   b9a5e:	ea40 0003 	orr.w	r0, r0, r3
   b9a62:	4629      	mov	r1, r5
   b9a64:	bd30      	pop	{r4, r5, pc}
   b9a66:	fa21 f004 	lsr.w	r0, r1, r4
   b9a6a:	4629      	mov	r1, r5
   b9a6c:	bd30      	pop	{r4, r5, pc}
   b9a6e:	f094 0f00 	teq	r4, #0
   b9a72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9a76:	bf06      	itte	eq
   b9a78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9a7c:	3401      	addeq	r4, #1
   b9a7e:	3d01      	subne	r5, #1
   b9a80:	e74e      	b.n	b9920 <__adddf3+0x8c>
   b9a82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9a86:	bf18      	it	ne
   b9a88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9a8c:	d029      	beq.n	b9ae2 <__adddf3+0x24e>
   b9a8e:	ea94 0f05 	teq	r4, r5
   b9a92:	bf08      	it	eq
   b9a94:	ea90 0f02 	teqeq	r0, r2
   b9a98:	d005      	beq.n	b9aa6 <__adddf3+0x212>
   b9a9a:	ea54 0c00 	orrs.w	ip, r4, r0
   b9a9e:	bf04      	itt	eq
   b9aa0:	4619      	moveq	r1, r3
   b9aa2:	4610      	moveq	r0, r2
   b9aa4:	bd30      	pop	{r4, r5, pc}
   b9aa6:	ea91 0f03 	teq	r1, r3
   b9aaa:	bf1e      	ittt	ne
   b9aac:	2100      	movne	r1, #0
   b9aae:	2000      	movne	r0, #0
   b9ab0:	bd30      	popne	{r4, r5, pc}
   b9ab2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9ab6:	d105      	bne.n	b9ac4 <__adddf3+0x230>
   b9ab8:	0040      	lsls	r0, r0, #1
   b9aba:	4149      	adcs	r1, r1
   b9abc:	bf28      	it	cs
   b9abe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9ac2:	bd30      	pop	{r4, r5, pc}
   b9ac4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9ac8:	bf3c      	itt	cc
   b9aca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9ace:	bd30      	popcc	{r4, r5, pc}
   b9ad0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9ad4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9ad8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9adc:	f04f 0000 	mov.w	r0, #0
   b9ae0:	bd30      	pop	{r4, r5, pc}
   b9ae2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9ae6:	bf1a      	itte	ne
   b9ae8:	4619      	movne	r1, r3
   b9aea:	4610      	movne	r0, r2
   b9aec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9af0:	bf1c      	itt	ne
   b9af2:	460b      	movne	r3, r1
   b9af4:	4602      	movne	r2, r0
   b9af6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9afa:	bf06      	itte	eq
   b9afc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9b00:	ea91 0f03 	teqeq	r1, r3
   b9b04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9b08:	bd30      	pop	{r4, r5, pc}
   b9b0a:	bf00      	nop

000b9b0c <__aeabi_ui2d>:
   b9b0c:	f090 0f00 	teq	r0, #0
   b9b10:	bf04      	itt	eq
   b9b12:	2100      	moveq	r1, #0
   b9b14:	4770      	bxeq	lr
   b9b16:	b530      	push	{r4, r5, lr}
   b9b18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9b1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9b20:	f04f 0500 	mov.w	r5, #0
   b9b24:	f04f 0100 	mov.w	r1, #0
   b9b28:	e750      	b.n	b99cc <__adddf3+0x138>
   b9b2a:	bf00      	nop

000b9b2c <__aeabi_i2d>:
   b9b2c:	f090 0f00 	teq	r0, #0
   b9b30:	bf04      	itt	eq
   b9b32:	2100      	moveq	r1, #0
   b9b34:	4770      	bxeq	lr
   b9b36:	b530      	push	{r4, r5, lr}
   b9b38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9b3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9b40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9b44:	bf48      	it	mi
   b9b46:	4240      	negmi	r0, r0
   b9b48:	f04f 0100 	mov.w	r1, #0
   b9b4c:	e73e      	b.n	b99cc <__adddf3+0x138>
   b9b4e:	bf00      	nop

000b9b50 <__aeabi_f2d>:
   b9b50:	0042      	lsls	r2, r0, #1
   b9b52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9b56:	ea4f 0131 	mov.w	r1, r1, rrx
   b9b5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9b5e:	bf1f      	itttt	ne
   b9b60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9b64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9b68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9b6c:	4770      	bxne	lr
   b9b6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9b72:	bf08      	it	eq
   b9b74:	4770      	bxeq	lr
   b9b76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9b7a:	bf04      	itt	eq
   b9b7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9b80:	4770      	bxeq	lr
   b9b82:	b530      	push	{r4, r5, lr}
   b9b84:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9b88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9b8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9b90:	e71c      	b.n	b99cc <__adddf3+0x138>
   b9b92:	bf00      	nop

000b9b94 <__aeabi_ul2d>:
   b9b94:	ea50 0201 	orrs.w	r2, r0, r1
   b9b98:	bf08      	it	eq
   b9b9a:	4770      	bxeq	lr
   b9b9c:	b530      	push	{r4, r5, lr}
   b9b9e:	f04f 0500 	mov.w	r5, #0
   b9ba2:	e00a      	b.n	b9bba <__aeabi_l2d+0x16>

000b9ba4 <__aeabi_l2d>:
   b9ba4:	ea50 0201 	orrs.w	r2, r0, r1
   b9ba8:	bf08      	it	eq
   b9baa:	4770      	bxeq	lr
   b9bac:	b530      	push	{r4, r5, lr}
   b9bae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9bb2:	d502      	bpl.n	b9bba <__aeabi_l2d+0x16>
   b9bb4:	4240      	negs	r0, r0
   b9bb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9bba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9bbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9bc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9bc6:	f43f aed8 	beq.w	b997a <__adddf3+0xe6>
   b9bca:	f04f 0203 	mov.w	r2, #3
   b9bce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9bd2:	bf18      	it	ne
   b9bd4:	3203      	addne	r2, #3
   b9bd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9bda:	bf18      	it	ne
   b9bdc:	3203      	addne	r2, #3
   b9bde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9be2:	f1c2 0320 	rsb	r3, r2, #32
   b9be6:	fa00 fc03 	lsl.w	ip, r0, r3
   b9bea:	fa20 f002 	lsr.w	r0, r0, r2
   b9bee:	fa01 fe03 	lsl.w	lr, r1, r3
   b9bf2:	ea40 000e 	orr.w	r0, r0, lr
   b9bf6:	fa21 f102 	lsr.w	r1, r1, r2
   b9bfa:	4414      	add	r4, r2
   b9bfc:	e6bd      	b.n	b997a <__adddf3+0xe6>
   b9bfe:	bf00      	nop

000b9c00 <__aeabi_dmul>:
   b9c00:	b570      	push	{r4, r5, r6, lr}
   b9c02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9c06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9c0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9c0e:	bf1d      	ittte	ne
   b9c10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9c14:	ea94 0f0c 	teqne	r4, ip
   b9c18:	ea95 0f0c 	teqne	r5, ip
   b9c1c:	f000 f8de 	bleq	b9ddc <__aeabi_dmul+0x1dc>
   b9c20:	442c      	add	r4, r5
   b9c22:	ea81 0603 	eor.w	r6, r1, r3
   b9c26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9c2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9c2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9c32:	bf18      	it	ne
   b9c34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9c38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9c40:	d038      	beq.n	b9cb4 <__aeabi_dmul+0xb4>
   b9c42:	fba0 ce02 	umull	ip, lr, r0, r2
   b9c46:	f04f 0500 	mov.w	r5, #0
   b9c4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9c4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9c52:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9c56:	f04f 0600 	mov.w	r6, #0
   b9c5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9c5e:	f09c 0f00 	teq	ip, #0
   b9c62:	bf18      	it	ne
   b9c64:	f04e 0e01 	orrne.w	lr, lr, #1
   b9c68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9c6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9c70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9c74:	d204      	bcs.n	b9c80 <__aeabi_dmul+0x80>
   b9c76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9c7a:	416d      	adcs	r5, r5
   b9c7c:	eb46 0606 	adc.w	r6, r6, r6
   b9c80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9c84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9c88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9c8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9c90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9c94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9c98:	bf88      	it	hi
   b9c9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9c9e:	d81e      	bhi.n	b9cde <__aeabi_dmul+0xde>
   b9ca0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9ca4:	bf08      	it	eq
   b9ca6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9caa:	f150 0000 	adcs.w	r0, r0, #0
   b9cae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9cb2:	bd70      	pop	{r4, r5, r6, pc}
   b9cb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9cb8:	ea46 0101 	orr.w	r1, r6, r1
   b9cbc:	ea40 0002 	orr.w	r0, r0, r2
   b9cc0:	ea81 0103 	eor.w	r1, r1, r3
   b9cc4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9cc8:	bfc2      	ittt	gt
   b9cca:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9cce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9cd2:	bd70      	popgt	{r4, r5, r6, pc}
   b9cd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9cd8:	f04f 0e00 	mov.w	lr, #0
   b9cdc:	3c01      	subs	r4, #1
   b9cde:	f300 80ab 	bgt.w	b9e38 <__aeabi_dmul+0x238>
   b9ce2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9ce6:	bfde      	ittt	le
   b9ce8:	2000      	movle	r0, #0
   b9cea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9cee:	bd70      	pople	{r4, r5, r6, pc}
   b9cf0:	f1c4 0400 	rsb	r4, r4, #0
   b9cf4:	3c20      	subs	r4, #32
   b9cf6:	da35      	bge.n	b9d64 <__aeabi_dmul+0x164>
   b9cf8:	340c      	adds	r4, #12
   b9cfa:	dc1b      	bgt.n	b9d34 <__aeabi_dmul+0x134>
   b9cfc:	f104 0414 	add.w	r4, r4, #20
   b9d00:	f1c4 0520 	rsb	r5, r4, #32
   b9d04:	fa00 f305 	lsl.w	r3, r0, r5
   b9d08:	fa20 f004 	lsr.w	r0, r0, r4
   b9d0c:	fa01 f205 	lsl.w	r2, r1, r5
   b9d10:	ea40 0002 	orr.w	r0, r0, r2
   b9d14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9d1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9d20:	fa21 f604 	lsr.w	r6, r1, r4
   b9d24:	eb42 0106 	adc.w	r1, r2, r6
   b9d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d2c:	bf08      	it	eq
   b9d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d32:	bd70      	pop	{r4, r5, r6, pc}
   b9d34:	f1c4 040c 	rsb	r4, r4, #12
   b9d38:	f1c4 0520 	rsb	r5, r4, #32
   b9d3c:	fa00 f304 	lsl.w	r3, r0, r4
   b9d40:	fa20 f005 	lsr.w	r0, r0, r5
   b9d44:	fa01 f204 	lsl.w	r2, r1, r4
   b9d48:	ea40 0002 	orr.w	r0, r0, r2
   b9d4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9d50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9d54:	f141 0100 	adc.w	r1, r1, #0
   b9d58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d5c:	bf08      	it	eq
   b9d5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d62:	bd70      	pop	{r4, r5, r6, pc}
   b9d64:	f1c4 0520 	rsb	r5, r4, #32
   b9d68:	fa00 f205 	lsl.w	r2, r0, r5
   b9d6c:	ea4e 0e02 	orr.w	lr, lr, r2
   b9d70:	fa20 f304 	lsr.w	r3, r0, r4
   b9d74:	fa01 f205 	lsl.w	r2, r1, r5
   b9d78:	ea43 0302 	orr.w	r3, r3, r2
   b9d7c:	fa21 f004 	lsr.w	r0, r1, r4
   b9d80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9d84:	fa21 f204 	lsr.w	r2, r1, r4
   b9d88:	ea20 0002 	bic.w	r0, r0, r2
   b9d8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d94:	bf08      	it	eq
   b9d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d9a:	bd70      	pop	{r4, r5, r6, pc}
   b9d9c:	f094 0f00 	teq	r4, #0
   b9da0:	d10f      	bne.n	b9dc2 <__aeabi_dmul+0x1c2>
   b9da2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9da6:	0040      	lsls	r0, r0, #1
   b9da8:	eb41 0101 	adc.w	r1, r1, r1
   b9dac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9db0:	bf08      	it	eq
   b9db2:	3c01      	subeq	r4, #1
   b9db4:	d0f7      	beq.n	b9da6 <__aeabi_dmul+0x1a6>
   b9db6:	ea41 0106 	orr.w	r1, r1, r6
   b9dba:	f095 0f00 	teq	r5, #0
   b9dbe:	bf18      	it	ne
   b9dc0:	4770      	bxne	lr
   b9dc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b9dc6:	0052      	lsls	r2, r2, #1
   b9dc8:	eb43 0303 	adc.w	r3, r3, r3
   b9dcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9dd0:	bf08      	it	eq
   b9dd2:	3d01      	subeq	r5, #1
   b9dd4:	d0f7      	beq.n	b9dc6 <__aeabi_dmul+0x1c6>
   b9dd6:	ea43 0306 	orr.w	r3, r3, r6
   b9dda:	4770      	bx	lr
   b9ddc:	ea94 0f0c 	teq	r4, ip
   b9de0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9de4:	bf18      	it	ne
   b9de6:	ea95 0f0c 	teqne	r5, ip
   b9dea:	d00c      	beq.n	b9e06 <__aeabi_dmul+0x206>
   b9dec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9df0:	bf18      	it	ne
   b9df2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9df6:	d1d1      	bne.n	b9d9c <__aeabi_dmul+0x19c>
   b9df8:	ea81 0103 	eor.w	r1, r1, r3
   b9dfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e00:	f04f 0000 	mov.w	r0, #0
   b9e04:	bd70      	pop	{r4, r5, r6, pc}
   b9e06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9e0a:	bf06      	itte	eq
   b9e0c:	4610      	moveq	r0, r2
   b9e0e:	4619      	moveq	r1, r3
   b9e10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9e14:	d019      	beq.n	b9e4a <__aeabi_dmul+0x24a>
   b9e16:	ea94 0f0c 	teq	r4, ip
   b9e1a:	d102      	bne.n	b9e22 <__aeabi_dmul+0x222>
   b9e1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9e20:	d113      	bne.n	b9e4a <__aeabi_dmul+0x24a>
   b9e22:	ea95 0f0c 	teq	r5, ip
   b9e26:	d105      	bne.n	b9e34 <__aeabi_dmul+0x234>
   b9e28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9e2c:	bf1c      	itt	ne
   b9e2e:	4610      	movne	r0, r2
   b9e30:	4619      	movne	r1, r3
   b9e32:	d10a      	bne.n	b9e4a <__aeabi_dmul+0x24a>
   b9e34:	ea81 0103 	eor.w	r1, r1, r3
   b9e38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9e40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9e44:	f04f 0000 	mov.w	r0, #0
   b9e48:	bd70      	pop	{r4, r5, r6, pc}
   b9e4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9e4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9e52:	bd70      	pop	{r4, r5, r6, pc}

000b9e54 <__aeabi_ddiv>:
   b9e54:	b570      	push	{r4, r5, r6, lr}
   b9e56:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9e5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9e5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9e62:	bf1d      	ittte	ne
   b9e64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9e68:	ea94 0f0c 	teqne	r4, ip
   b9e6c:	ea95 0f0c 	teqne	r5, ip
   b9e70:	f000 f8a7 	bleq	b9fc2 <__aeabi_ddiv+0x16e>
   b9e74:	eba4 0405 	sub.w	r4, r4, r5
   b9e78:	ea81 0e03 	eor.w	lr, r1, r3
   b9e7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9e80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9e84:	f000 8088 	beq.w	b9f98 <__aeabi_ddiv+0x144>
   b9e88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9e8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9e90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9e94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9e98:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9e9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9ea0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9ea4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9ea8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9eac:	429d      	cmp	r5, r3
   b9eae:	bf08      	it	eq
   b9eb0:	4296      	cmpeq	r6, r2
   b9eb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9eb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9eba:	d202      	bcs.n	b9ec2 <__aeabi_ddiv+0x6e>
   b9ebc:	085b      	lsrs	r3, r3, #1
   b9ebe:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ec2:	1ab6      	subs	r6, r6, r2
   b9ec4:	eb65 0503 	sbc.w	r5, r5, r3
   b9ec8:	085b      	lsrs	r3, r3, #1
   b9eca:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ece:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9ed2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9ed6:	ebb6 0e02 	subs.w	lr, r6, r2
   b9eda:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9ede:	bf22      	ittt	cs
   b9ee0:	1ab6      	subcs	r6, r6, r2
   b9ee2:	4675      	movcs	r5, lr
   b9ee4:	ea40 000c 	orrcs.w	r0, r0, ip
   b9ee8:	085b      	lsrs	r3, r3, #1
   b9eea:	ea4f 0232 	mov.w	r2, r2, rrx
   b9eee:	ebb6 0e02 	subs.w	lr, r6, r2
   b9ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9ef6:	bf22      	ittt	cs
   b9ef8:	1ab6      	subcs	r6, r6, r2
   b9efa:	4675      	movcs	r5, lr
   b9efc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9f00:	085b      	lsrs	r3, r3, #1
   b9f02:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f06:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f0e:	bf22      	ittt	cs
   b9f10:	1ab6      	subcs	r6, r6, r2
   b9f12:	4675      	movcs	r5, lr
   b9f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9f18:	085b      	lsrs	r3, r3, #1
   b9f1a:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f1e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f22:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f26:	bf22      	ittt	cs
   b9f28:	1ab6      	subcs	r6, r6, r2
   b9f2a:	4675      	movcs	r5, lr
   b9f2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9f30:	ea55 0e06 	orrs.w	lr, r5, r6
   b9f34:	d018      	beq.n	b9f68 <__aeabi_ddiv+0x114>
   b9f36:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9f3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9f3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9f42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9f46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9f4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9f4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9f52:	d1c0      	bne.n	b9ed6 <__aeabi_ddiv+0x82>
   b9f54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9f58:	d10b      	bne.n	b9f72 <__aeabi_ddiv+0x11e>
   b9f5a:	ea41 0100 	orr.w	r1, r1, r0
   b9f5e:	f04f 0000 	mov.w	r0, #0
   b9f62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9f66:	e7b6      	b.n	b9ed6 <__aeabi_ddiv+0x82>
   b9f68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9f6c:	bf04      	itt	eq
   b9f6e:	4301      	orreq	r1, r0
   b9f70:	2000      	moveq	r0, #0
   b9f72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9f76:	bf88      	it	hi
   b9f78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9f7c:	f63f aeaf 	bhi.w	b9cde <__aeabi_dmul+0xde>
   b9f80:	ebb5 0c03 	subs.w	ip, r5, r3
   b9f84:	bf04      	itt	eq
   b9f86:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9f8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9f8e:	f150 0000 	adcs.w	r0, r0, #0
   b9f92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9f96:	bd70      	pop	{r4, r5, r6, pc}
   b9f98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9f9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9fa0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9fa4:	bfc2      	ittt	gt
   b9fa6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9faa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9fae:	bd70      	popgt	{r4, r5, r6, pc}
   b9fb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9fb4:	f04f 0e00 	mov.w	lr, #0
   b9fb8:	3c01      	subs	r4, #1
   b9fba:	e690      	b.n	b9cde <__aeabi_dmul+0xde>
   b9fbc:	ea45 0e06 	orr.w	lr, r5, r6
   b9fc0:	e68d      	b.n	b9cde <__aeabi_dmul+0xde>
   b9fc2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9fc6:	ea94 0f0c 	teq	r4, ip
   b9fca:	bf08      	it	eq
   b9fcc:	ea95 0f0c 	teqeq	r5, ip
   b9fd0:	f43f af3b 	beq.w	b9e4a <__aeabi_dmul+0x24a>
   b9fd4:	ea94 0f0c 	teq	r4, ip
   b9fd8:	d10a      	bne.n	b9ff0 <__aeabi_ddiv+0x19c>
   b9fda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9fde:	f47f af34 	bne.w	b9e4a <__aeabi_dmul+0x24a>
   b9fe2:	ea95 0f0c 	teq	r5, ip
   b9fe6:	f47f af25 	bne.w	b9e34 <__aeabi_dmul+0x234>
   b9fea:	4610      	mov	r0, r2
   b9fec:	4619      	mov	r1, r3
   b9fee:	e72c      	b.n	b9e4a <__aeabi_dmul+0x24a>
   b9ff0:	ea95 0f0c 	teq	r5, ip
   b9ff4:	d106      	bne.n	ba004 <__aeabi_ddiv+0x1b0>
   b9ff6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9ffa:	f43f aefd 	beq.w	b9df8 <__aeabi_dmul+0x1f8>
   b9ffe:	4610      	mov	r0, r2
   ba000:	4619      	mov	r1, r3
   ba002:	e722      	b.n	b9e4a <__aeabi_dmul+0x24a>
   ba004:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba008:	bf18      	it	ne
   ba00a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba00e:	f47f aec5 	bne.w	b9d9c <__aeabi_dmul+0x19c>
   ba012:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba016:	f47f af0d 	bne.w	b9e34 <__aeabi_dmul+0x234>
   ba01a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba01e:	f47f aeeb 	bne.w	b9df8 <__aeabi_dmul+0x1f8>
   ba022:	e712      	b.n	b9e4a <__aeabi_dmul+0x24a>

000ba024 <__gedf2>:
   ba024:	f04f 3cff 	mov.w	ip, #4294967295
   ba028:	e006      	b.n	ba038 <__cmpdf2+0x4>
   ba02a:	bf00      	nop

000ba02c <__ledf2>:
   ba02c:	f04f 0c01 	mov.w	ip, #1
   ba030:	e002      	b.n	ba038 <__cmpdf2+0x4>
   ba032:	bf00      	nop

000ba034 <__cmpdf2>:
   ba034:	f04f 0c01 	mov.w	ip, #1
   ba038:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba03c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba040:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba048:	bf18      	it	ne
   ba04a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba04e:	d01b      	beq.n	ba088 <__cmpdf2+0x54>
   ba050:	b001      	add	sp, #4
   ba052:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba056:	bf0c      	ite	eq
   ba058:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba05c:	ea91 0f03 	teqne	r1, r3
   ba060:	bf02      	ittt	eq
   ba062:	ea90 0f02 	teqeq	r0, r2
   ba066:	2000      	moveq	r0, #0
   ba068:	4770      	bxeq	lr
   ba06a:	f110 0f00 	cmn.w	r0, #0
   ba06e:	ea91 0f03 	teq	r1, r3
   ba072:	bf58      	it	pl
   ba074:	4299      	cmppl	r1, r3
   ba076:	bf08      	it	eq
   ba078:	4290      	cmpeq	r0, r2
   ba07a:	bf2c      	ite	cs
   ba07c:	17d8      	asrcs	r0, r3, #31
   ba07e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba082:	f040 0001 	orr.w	r0, r0, #1
   ba086:	4770      	bx	lr
   ba088:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba08c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba090:	d102      	bne.n	ba098 <__cmpdf2+0x64>
   ba092:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba096:	d107      	bne.n	ba0a8 <__cmpdf2+0x74>
   ba098:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba09c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba0a0:	d1d6      	bne.n	ba050 <__cmpdf2+0x1c>
   ba0a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba0a6:	d0d3      	beq.n	ba050 <__cmpdf2+0x1c>
   ba0a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba0ac:	4770      	bx	lr
   ba0ae:	bf00      	nop

000ba0b0 <__aeabi_cdrcmple>:
   ba0b0:	4684      	mov	ip, r0
   ba0b2:	4610      	mov	r0, r2
   ba0b4:	4662      	mov	r2, ip
   ba0b6:	468c      	mov	ip, r1
   ba0b8:	4619      	mov	r1, r3
   ba0ba:	4663      	mov	r3, ip
   ba0bc:	e000      	b.n	ba0c0 <__aeabi_cdcmpeq>
   ba0be:	bf00      	nop

000ba0c0 <__aeabi_cdcmpeq>:
   ba0c0:	b501      	push	{r0, lr}
   ba0c2:	f7ff ffb7 	bl	ba034 <__cmpdf2>
   ba0c6:	2800      	cmp	r0, #0
   ba0c8:	bf48      	it	mi
   ba0ca:	f110 0f00 	cmnmi.w	r0, #0
   ba0ce:	bd01      	pop	{r0, pc}

000ba0d0 <__aeabi_dcmpeq>:
   ba0d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba0d4:	f7ff fff4 	bl	ba0c0 <__aeabi_cdcmpeq>
   ba0d8:	bf0c      	ite	eq
   ba0da:	2001      	moveq	r0, #1
   ba0dc:	2000      	movne	r0, #0
   ba0de:	f85d fb08 	ldr.w	pc, [sp], #8
   ba0e2:	bf00      	nop

000ba0e4 <__aeabi_dcmplt>:
   ba0e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba0e8:	f7ff ffea 	bl	ba0c0 <__aeabi_cdcmpeq>
   ba0ec:	bf34      	ite	cc
   ba0ee:	2001      	movcc	r0, #1
   ba0f0:	2000      	movcs	r0, #0
   ba0f2:	f85d fb08 	ldr.w	pc, [sp], #8
   ba0f6:	bf00      	nop

000ba0f8 <__aeabi_dcmple>:
   ba0f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba0fc:	f7ff ffe0 	bl	ba0c0 <__aeabi_cdcmpeq>
   ba100:	bf94      	ite	ls
   ba102:	2001      	movls	r0, #1
   ba104:	2000      	movhi	r0, #0
   ba106:	f85d fb08 	ldr.w	pc, [sp], #8
   ba10a:	bf00      	nop

000ba10c <__aeabi_dcmpge>:
   ba10c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba110:	f7ff ffce 	bl	ba0b0 <__aeabi_cdrcmple>
   ba114:	bf94      	ite	ls
   ba116:	2001      	movls	r0, #1
   ba118:	2000      	movhi	r0, #0
   ba11a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba11e:	bf00      	nop

000ba120 <__aeabi_dcmpgt>:
   ba120:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba124:	f7ff ffc4 	bl	ba0b0 <__aeabi_cdrcmple>
   ba128:	bf34      	ite	cc
   ba12a:	2001      	movcc	r0, #1
   ba12c:	2000      	movcs	r0, #0
   ba12e:	f85d fb08 	ldr.w	pc, [sp], #8
   ba132:	bf00      	nop

000ba134 <__aeabi_d2uiz>:
   ba134:	004a      	lsls	r2, r1, #1
   ba136:	d211      	bcs.n	ba15c <__aeabi_d2uiz+0x28>
   ba138:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba13c:	d211      	bcs.n	ba162 <__aeabi_d2uiz+0x2e>
   ba13e:	d50d      	bpl.n	ba15c <__aeabi_d2uiz+0x28>
   ba140:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba144:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba148:	d40e      	bmi.n	ba168 <__aeabi_d2uiz+0x34>
   ba14a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba14e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba152:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba156:	fa23 f002 	lsr.w	r0, r3, r2
   ba15a:	4770      	bx	lr
   ba15c:	f04f 0000 	mov.w	r0, #0
   ba160:	4770      	bx	lr
   ba162:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba166:	d102      	bne.n	ba16e <__aeabi_d2uiz+0x3a>
   ba168:	f04f 30ff 	mov.w	r0, #4294967295
   ba16c:	4770      	bx	lr
   ba16e:	f04f 0000 	mov.w	r0, #0
   ba172:	4770      	bx	lr

000ba174 <__aeabi_f2lz>:
   ba174:	ee07 0a90 	vmov	s15, r0
   ba178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba180:	d401      	bmi.n	ba186 <__aeabi_f2lz+0x12>
   ba182:	f000 b80b 	b.w	ba19c <__aeabi_f2ulz>
   ba186:	eef1 7a67 	vneg.f32	s15, s15
   ba18a:	b508      	push	{r3, lr}
   ba18c:	ee17 0a90 	vmov	r0, s15
   ba190:	f000 f804 	bl	ba19c <__aeabi_f2ulz>
   ba194:	4240      	negs	r0, r0
   ba196:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba19a:	bd08      	pop	{r3, pc}

000ba19c <__aeabi_f2ulz>:
   ba19c:	b5d0      	push	{r4, r6, r7, lr}
   ba19e:	f7ff fcd7 	bl	b9b50 <__aeabi_f2d>
   ba1a2:	4b0c      	ldr	r3, [pc, #48]	; (ba1d4 <__aeabi_f2ulz+0x38>)
   ba1a4:	2200      	movs	r2, #0
   ba1a6:	4606      	mov	r6, r0
   ba1a8:	460f      	mov	r7, r1
   ba1aa:	f7ff fd29 	bl	b9c00 <__aeabi_dmul>
   ba1ae:	f7ff ffc1 	bl	ba134 <__aeabi_d2uiz>
   ba1b2:	4604      	mov	r4, r0
   ba1b4:	f7ff fcaa 	bl	b9b0c <__aeabi_ui2d>
   ba1b8:	4b07      	ldr	r3, [pc, #28]	; (ba1d8 <__aeabi_f2ulz+0x3c>)
   ba1ba:	2200      	movs	r2, #0
   ba1bc:	f7ff fd20 	bl	b9c00 <__aeabi_dmul>
   ba1c0:	4602      	mov	r2, r0
   ba1c2:	460b      	mov	r3, r1
   ba1c4:	4630      	mov	r0, r6
   ba1c6:	4639      	mov	r1, r7
   ba1c8:	f7ff fb62 	bl	b9890 <__aeabi_dsub>
   ba1cc:	f7ff ffb2 	bl	ba134 <__aeabi_d2uiz>
   ba1d0:	4621      	mov	r1, r4
   ba1d2:	bdd0      	pop	{r4, r6, r7, pc}
   ba1d4:	3df00000 	.word	0x3df00000
   ba1d8:	41f00000 	.word	0x41f00000

000ba1dc <__aeabi_d2ulz>:
   ba1dc:	b5d0      	push	{r4, r6, r7, lr}
   ba1de:	4b0c      	ldr	r3, [pc, #48]	; (ba210 <__aeabi_d2ulz+0x34>)
   ba1e0:	2200      	movs	r2, #0
   ba1e2:	4606      	mov	r6, r0
   ba1e4:	460f      	mov	r7, r1
   ba1e6:	f7ff fd0b 	bl	b9c00 <__aeabi_dmul>
   ba1ea:	f7ff ffa3 	bl	ba134 <__aeabi_d2uiz>
   ba1ee:	4604      	mov	r4, r0
   ba1f0:	f7ff fc8c 	bl	b9b0c <__aeabi_ui2d>
   ba1f4:	4b07      	ldr	r3, [pc, #28]	; (ba214 <__aeabi_d2ulz+0x38>)
   ba1f6:	2200      	movs	r2, #0
   ba1f8:	f7ff fd02 	bl	b9c00 <__aeabi_dmul>
   ba1fc:	4602      	mov	r2, r0
   ba1fe:	460b      	mov	r3, r1
   ba200:	4630      	mov	r0, r6
   ba202:	4639      	mov	r1, r7
   ba204:	f7ff fb44 	bl	b9890 <__aeabi_dsub>
   ba208:	f7ff ff94 	bl	ba134 <__aeabi_d2uiz>
   ba20c:	4621      	mov	r1, r4
   ba20e:	bdd0      	pop	{r4, r6, r7, pc}
   ba210:	3df00000 	.word	0x3df00000
   ba214:	41f00000 	.word	0x41f00000

000ba218 <atexit>:
   ba218:	2300      	movs	r3, #0
   ba21a:	4601      	mov	r1, r0
   ba21c:	461a      	mov	r2, r3
   ba21e:	4618      	mov	r0, r3
   ba220:	f001 b80c 	b.w	bb23c <__register_exitproc>

000ba224 <atof>:
   ba224:	2100      	movs	r1, #0
   ba226:	f000 bf15 	b.w	bb054 <strtod>

000ba22a <atoi>:
   ba22a:	220a      	movs	r2, #10
   ba22c:	2100      	movs	r1, #0
   ba22e:	f000 bffb 	b.w	bb228 <strtol>

000ba232 <memcmp>:
   ba232:	b510      	push	{r4, lr}
   ba234:	3901      	subs	r1, #1
   ba236:	4402      	add	r2, r0
   ba238:	4290      	cmp	r0, r2
   ba23a:	d101      	bne.n	ba240 <memcmp+0xe>
   ba23c:	2000      	movs	r0, #0
   ba23e:	e005      	b.n	ba24c <memcmp+0x1a>
   ba240:	7803      	ldrb	r3, [r0, #0]
   ba242:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba246:	42a3      	cmp	r3, r4
   ba248:	d001      	beq.n	ba24e <memcmp+0x1c>
   ba24a:	1b18      	subs	r0, r3, r4
   ba24c:	bd10      	pop	{r4, pc}
   ba24e:	3001      	adds	r0, #1
   ba250:	e7f2      	b.n	ba238 <memcmp+0x6>

000ba252 <memcpy>:
   ba252:	440a      	add	r2, r1
   ba254:	4291      	cmp	r1, r2
   ba256:	f100 33ff 	add.w	r3, r0, #4294967295
   ba25a:	d100      	bne.n	ba25e <memcpy+0xc>
   ba25c:	4770      	bx	lr
   ba25e:	b510      	push	{r4, lr}
   ba260:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba264:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba268:	4291      	cmp	r1, r2
   ba26a:	d1f9      	bne.n	ba260 <memcpy+0xe>
   ba26c:	bd10      	pop	{r4, pc}

000ba26e <memmove>:
   ba26e:	4288      	cmp	r0, r1
   ba270:	b510      	push	{r4, lr}
   ba272:	eb01 0402 	add.w	r4, r1, r2
   ba276:	d902      	bls.n	ba27e <memmove+0x10>
   ba278:	4284      	cmp	r4, r0
   ba27a:	4623      	mov	r3, r4
   ba27c:	d807      	bhi.n	ba28e <memmove+0x20>
   ba27e:	1e43      	subs	r3, r0, #1
   ba280:	42a1      	cmp	r1, r4
   ba282:	d008      	beq.n	ba296 <memmove+0x28>
   ba284:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba288:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba28c:	e7f8      	b.n	ba280 <memmove+0x12>
   ba28e:	4402      	add	r2, r0
   ba290:	4601      	mov	r1, r0
   ba292:	428a      	cmp	r2, r1
   ba294:	d100      	bne.n	ba298 <memmove+0x2a>
   ba296:	bd10      	pop	{r4, pc}
   ba298:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba29c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba2a0:	e7f7      	b.n	ba292 <memmove+0x24>

000ba2a2 <memset>:
   ba2a2:	4402      	add	r2, r0
   ba2a4:	4603      	mov	r3, r0
   ba2a6:	4293      	cmp	r3, r2
   ba2a8:	d100      	bne.n	ba2ac <memset+0xa>
   ba2aa:	4770      	bx	lr
   ba2ac:	f803 1b01 	strb.w	r1, [r3], #1
   ba2b0:	e7f9      	b.n	ba2a6 <memset+0x4>
	...

000ba2b4 <srand>:
   ba2b4:	b538      	push	{r3, r4, r5, lr}
   ba2b6:	4b10      	ldr	r3, [pc, #64]	; (ba2f8 <srand+0x44>)
   ba2b8:	681d      	ldr	r5, [r3, #0]
   ba2ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba2bc:	4604      	mov	r4, r0
   ba2be:	b9b3      	cbnz	r3, ba2ee <srand+0x3a>
   ba2c0:	2018      	movs	r0, #24
   ba2c2:	f7fc f931 	bl	b6528 <malloc>
   ba2c6:	4602      	mov	r2, r0
   ba2c8:	63a8      	str	r0, [r5, #56]	; 0x38
   ba2ca:	b920      	cbnz	r0, ba2d6 <srand+0x22>
   ba2cc:	4b0b      	ldr	r3, [pc, #44]	; (ba2fc <srand+0x48>)
   ba2ce:	480c      	ldr	r0, [pc, #48]	; (ba300 <srand+0x4c>)
   ba2d0:	2142      	movs	r1, #66	; 0x42
   ba2d2:	f7fc f971 	bl	b65b8 <__assert_func>
   ba2d6:	490b      	ldr	r1, [pc, #44]	; (ba304 <srand+0x50>)
   ba2d8:	4b0b      	ldr	r3, [pc, #44]	; (ba308 <srand+0x54>)
   ba2da:	e9c0 1300 	strd	r1, r3, [r0]
   ba2de:	4b0b      	ldr	r3, [pc, #44]	; (ba30c <srand+0x58>)
   ba2e0:	6083      	str	r3, [r0, #8]
   ba2e2:	230b      	movs	r3, #11
   ba2e4:	8183      	strh	r3, [r0, #12]
   ba2e6:	2100      	movs	r1, #0
   ba2e8:	2001      	movs	r0, #1
   ba2ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba2ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba2f0:	2200      	movs	r2, #0
   ba2f2:	611c      	str	r4, [r3, #16]
   ba2f4:	615a      	str	r2, [r3, #20]
   ba2f6:	bd38      	pop	{r3, r4, r5, pc}
   ba2f8:	2003d174 	.word	0x2003d174
   ba2fc:	000bd29e 	.word	0x000bd29e
   ba300:	000bd2b5 	.word	0x000bd2b5
   ba304:	abcd330e 	.word	0xabcd330e
   ba308:	e66d1234 	.word	0xe66d1234
   ba30c:	0005deec 	.word	0x0005deec

000ba310 <strcat>:
   ba310:	b510      	push	{r4, lr}
   ba312:	4602      	mov	r2, r0
   ba314:	7814      	ldrb	r4, [r2, #0]
   ba316:	4613      	mov	r3, r2
   ba318:	3201      	adds	r2, #1
   ba31a:	2c00      	cmp	r4, #0
   ba31c:	d1fa      	bne.n	ba314 <strcat+0x4>
   ba31e:	3b01      	subs	r3, #1
   ba320:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba324:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba328:	2a00      	cmp	r2, #0
   ba32a:	d1f9      	bne.n	ba320 <strcat+0x10>
   ba32c:	bd10      	pop	{r4, pc}

000ba32e <strcmp>:
   ba32e:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba332:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba336:	2a01      	cmp	r2, #1
   ba338:	bf28      	it	cs
   ba33a:	429a      	cmpcs	r2, r3
   ba33c:	d0f7      	beq.n	ba32e <strcmp>
   ba33e:	1ad0      	subs	r0, r2, r3
   ba340:	4770      	bx	lr

000ba342 <strcpy>:
   ba342:	4603      	mov	r3, r0
   ba344:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba348:	f803 2b01 	strb.w	r2, [r3], #1
   ba34c:	2a00      	cmp	r2, #0
   ba34e:	d1f9      	bne.n	ba344 <strcpy+0x2>
   ba350:	4770      	bx	lr
	...

000ba354 <strdup>:
   ba354:	4b02      	ldr	r3, [pc, #8]	; (ba360 <strdup+0xc>)
   ba356:	4601      	mov	r1, r0
   ba358:	6818      	ldr	r0, [r3, #0]
   ba35a:	f000 b803 	b.w	ba364 <_strdup_r>
   ba35e:	bf00      	nop
   ba360:	2003d174 	.word	0x2003d174

000ba364 <_strdup_r>:
   ba364:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba366:	4604      	mov	r4, r0
   ba368:	4608      	mov	r0, r1
   ba36a:	460d      	mov	r5, r1
   ba36c:	f000 f80f 	bl	ba38e <strlen>
   ba370:	1c42      	adds	r2, r0, #1
   ba372:	4611      	mov	r1, r2
   ba374:	4620      	mov	r0, r4
   ba376:	9201      	str	r2, [sp, #4]
   ba378:	f7fc f90e 	bl	b6598 <_malloc_r>
   ba37c:	4604      	mov	r4, r0
   ba37e:	b118      	cbz	r0, ba388 <_strdup_r+0x24>
   ba380:	9a01      	ldr	r2, [sp, #4]
   ba382:	4629      	mov	r1, r5
   ba384:	f7ff ff65 	bl	ba252 <memcpy>
   ba388:	4620      	mov	r0, r4
   ba38a:	b003      	add	sp, #12
   ba38c:	bd30      	pop	{r4, r5, pc}

000ba38e <strlen>:
   ba38e:	4603      	mov	r3, r0
   ba390:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba394:	2a00      	cmp	r2, #0
   ba396:	d1fb      	bne.n	ba390 <strlen+0x2>
   ba398:	1a18      	subs	r0, r3, r0
   ba39a:	3801      	subs	r0, #1
   ba39c:	4770      	bx	lr

000ba39e <strncmp>:
   ba39e:	b510      	push	{r4, lr}
   ba3a0:	b17a      	cbz	r2, ba3c2 <strncmp+0x24>
   ba3a2:	4603      	mov	r3, r0
   ba3a4:	3901      	subs	r1, #1
   ba3a6:	1884      	adds	r4, r0, r2
   ba3a8:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba3ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba3b0:	4290      	cmp	r0, r2
   ba3b2:	d101      	bne.n	ba3b8 <strncmp+0x1a>
   ba3b4:	42a3      	cmp	r3, r4
   ba3b6:	d101      	bne.n	ba3bc <strncmp+0x1e>
   ba3b8:	1a80      	subs	r0, r0, r2
   ba3ba:	bd10      	pop	{r4, pc}
   ba3bc:	2800      	cmp	r0, #0
   ba3be:	d1f3      	bne.n	ba3a8 <strncmp+0xa>
   ba3c0:	e7fa      	b.n	ba3b8 <strncmp+0x1a>
   ba3c2:	4610      	mov	r0, r2
   ba3c4:	e7f9      	b.n	ba3ba <strncmp+0x1c>

000ba3c6 <strnlen>:
   ba3c6:	b510      	push	{r4, lr}
   ba3c8:	4602      	mov	r2, r0
   ba3ca:	4401      	add	r1, r0
   ba3cc:	428a      	cmp	r2, r1
   ba3ce:	4613      	mov	r3, r2
   ba3d0:	d003      	beq.n	ba3da <strnlen+0x14>
   ba3d2:	781c      	ldrb	r4, [r3, #0]
   ba3d4:	3201      	adds	r2, #1
   ba3d6:	2c00      	cmp	r4, #0
   ba3d8:	d1f8      	bne.n	ba3cc <strnlen+0x6>
   ba3da:	1a18      	subs	r0, r3, r0
   ba3dc:	bd10      	pop	{r4, pc}

000ba3de <strstr>:
   ba3de:	780a      	ldrb	r2, [r1, #0]
   ba3e0:	b570      	push	{r4, r5, r6, lr}
   ba3e2:	b96a      	cbnz	r2, ba400 <strstr+0x22>
   ba3e4:	bd70      	pop	{r4, r5, r6, pc}
   ba3e6:	429a      	cmp	r2, r3
   ba3e8:	d109      	bne.n	ba3fe <strstr+0x20>
   ba3ea:	460c      	mov	r4, r1
   ba3ec:	4605      	mov	r5, r0
   ba3ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba3f2:	2b00      	cmp	r3, #0
   ba3f4:	d0f6      	beq.n	ba3e4 <strstr+0x6>
   ba3f6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba3fa:	429e      	cmp	r6, r3
   ba3fc:	d0f7      	beq.n	ba3ee <strstr+0x10>
   ba3fe:	3001      	adds	r0, #1
   ba400:	7803      	ldrb	r3, [r0, #0]
   ba402:	2b00      	cmp	r3, #0
   ba404:	d1ef      	bne.n	ba3e6 <strstr+0x8>
   ba406:	4618      	mov	r0, r3
   ba408:	e7ec      	b.n	ba3e4 <strstr+0x6>

000ba40a <sulp>:
   ba40a:	b570      	push	{r4, r5, r6, lr}
   ba40c:	4604      	mov	r4, r0
   ba40e:	460d      	mov	r5, r1
   ba410:	ec45 4b10 	vmov	d0, r4, r5
   ba414:	4616      	mov	r6, r2
   ba416:	f001 fe6b 	bl	bc0f0 <__ulp>
   ba41a:	ec51 0b10 	vmov	r0, r1, d0
   ba41e:	b17e      	cbz	r6, ba440 <sulp+0x36>
   ba420:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba424:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba428:	2b00      	cmp	r3, #0
   ba42a:	dd09      	ble.n	ba440 <sulp+0x36>
   ba42c:	051b      	lsls	r3, r3, #20
   ba42e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba432:	2400      	movs	r4, #0
   ba434:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba438:	4622      	mov	r2, r4
   ba43a:	462b      	mov	r3, r5
   ba43c:	f7ff fbe0 	bl	b9c00 <__aeabi_dmul>
   ba440:	bd70      	pop	{r4, r5, r6, pc}
   ba442:	0000      	movs	r0, r0
   ba444:	0000      	movs	r0, r0
	...

000ba448 <_strtod_l>:
   ba448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba44c:	ed2d 8b02 	vpush	{d8}
   ba450:	b09d      	sub	sp, #116	; 0x74
   ba452:	461f      	mov	r7, r3
   ba454:	2300      	movs	r3, #0
   ba456:	9318      	str	r3, [sp, #96]	; 0x60
   ba458:	4ba2      	ldr	r3, [pc, #648]	; (ba6e4 <_strtod_l+0x29c>)
   ba45a:	9213      	str	r2, [sp, #76]	; 0x4c
   ba45c:	681b      	ldr	r3, [r3, #0]
   ba45e:	9305      	str	r3, [sp, #20]
   ba460:	4604      	mov	r4, r0
   ba462:	4618      	mov	r0, r3
   ba464:	4688      	mov	r8, r1
   ba466:	f7ff ff92 	bl	ba38e <strlen>
   ba46a:	f04f 0a00 	mov.w	sl, #0
   ba46e:	4605      	mov	r5, r0
   ba470:	f04f 0b00 	mov.w	fp, #0
   ba474:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba47a:	781a      	ldrb	r2, [r3, #0]
   ba47c:	2a2b      	cmp	r2, #43	; 0x2b
   ba47e:	d04e      	beq.n	ba51e <_strtod_l+0xd6>
   ba480:	d83b      	bhi.n	ba4fa <_strtod_l+0xb2>
   ba482:	2a0d      	cmp	r2, #13
   ba484:	d834      	bhi.n	ba4f0 <_strtod_l+0xa8>
   ba486:	2a08      	cmp	r2, #8
   ba488:	d834      	bhi.n	ba4f4 <_strtod_l+0xac>
   ba48a:	2a00      	cmp	r2, #0
   ba48c:	d03e      	beq.n	ba50c <_strtod_l+0xc4>
   ba48e:	2300      	movs	r3, #0
   ba490:	930a      	str	r3, [sp, #40]	; 0x28
   ba492:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba494:	7833      	ldrb	r3, [r6, #0]
   ba496:	2b30      	cmp	r3, #48	; 0x30
   ba498:	f040 80b0 	bne.w	ba5fc <_strtod_l+0x1b4>
   ba49c:	7873      	ldrb	r3, [r6, #1]
   ba49e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba4a2:	2b58      	cmp	r3, #88	; 0x58
   ba4a4:	d168      	bne.n	ba578 <_strtod_l+0x130>
   ba4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba4a8:	9301      	str	r3, [sp, #4]
   ba4aa:	ab18      	add	r3, sp, #96	; 0x60
   ba4ac:	9702      	str	r7, [sp, #8]
   ba4ae:	9300      	str	r3, [sp, #0]
   ba4b0:	4a8d      	ldr	r2, [pc, #564]	; (ba6e8 <_strtod_l+0x2a0>)
   ba4b2:	ab19      	add	r3, sp, #100	; 0x64
   ba4b4:	a917      	add	r1, sp, #92	; 0x5c
   ba4b6:	4620      	mov	r0, r4
   ba4b8:	f000 ff8a 	bl	bb3d0 <__gethex>
   ba4bc:	f010 0707 	ands.w	r7, r0, #7
   ba4c0:	4605      	mov	r5, r0
   ba4c2:	d005      	beq.n	ba4d0 <_strtod_l+0x88>
   ba4c4:	2f06      	cmp	r7, #6
   ba4c6:	d12c      	bne.n	ba522 <_strtod_l+0xda>
   ba4c8:	3601      	adds	r6, #1
   ba4ca:	2300      	movs	r3, #0
   ba4cc:	9617      	str	r6, [sp, #92]	; 0x5c
   ba4ce:	930a      	str	r3, [sp, #40]	; 0x28
   ba4d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba4d2:	2b00      	cmp	r3, #0
   ba4d4:	f040 8590 	bne.w	baff8 <_strtod_l+0xbb0>
   ba4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba4da:	b1eb      	cbz	r3, ba518 <_strtod_l+0xd0>
   ba4dc:	4652      	mov	r2, sl
   ba4de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba4e2:	ec43 2b10 	vmov	d0, r2, r3
   ba4e6:	b01d      	add	sp, #116	; 0x74
   ba4e8:	ecbd 8b02 	vpop	{d8}
   ba4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba4f0:	2a20      	cmp	r2, #32
   ba4f2:	d1cc      	bne.n	ba48e <_strtod_l+0x46>
   ba4f4:	3301      	adds	r3, #1
   ba4f6:	9317      	str	r3, [sp, #92]	; 0x5c
   ba4f8:	e7be      	b.n	ba478 <_strtod_l+0x30>
   ba4fa:	2a2d      	cmp	r2, #45	; 0x2d
   ba4fc:	d1c7      	bne.n	ba48e <_strtod_l+0x46>
   ba4fe:	2201      	movs	r2, #1
   ba500:	920a      	str	r2, [sp, #40]	; 0x28
   ba502:	1c5a      	adds	r2, r3, #1
   ba504:	9217      	str	r2, [sp, #92]	; 0x5c
   ba506:	785b      	ldrb	r3, [r3, #1]
   ba508:	2b00      	cmp	r3, #0
   ba50a:	d1c2      	bne.n	ba492 <_strtod_l+0x4a>
   ba50c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba50e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba512:	2b00      	cmp	r3, #0
   ba514:	f040 856e 	bne.w	baff4 <_strtod_l+0xbac>
   ba518:	4652      	mov	r2, sl
   ba51a:	465b      	mov	r3, fp
   ba51c:	e7e1      	b.n	ba4e2 <_strtod_l+0x9a>
   ba51e:	2200      	movs	r2, #0
   ba520:	e7ee      	b.n	ba500 <_strtod_l+0xb8>
   ba522:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba524:	b13a      	cbz	r2, ba536 <_strtod_l+0xee>
   ba526:	2135      	movs	r1, #53	; 0x35
   ba528:	a81a      	add	r0, sp, #104	; 0x68
   ba52a:	f001 feec 	bl	bc306 <__copybits>
   ba52e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba530:	4620      	mov	r0, r4
   ba532:	f001 faab 	bl	bba8c <_Bfree>
   ba536:	3f01      	subs	r7, #1
   ba538:	2f04      	cmp	r7, #4
   ba53a:	d806      	bhi.n	ba54a <_strtod_l+0x102>
   ba53c:	e8df f007 	tbb	[pc, r7]
   ba540:	1714030a 	.word	0x1714030a
   ba544:	0a          	.byte	0x0a
   ba545:	00          	.byte	0x00
   ba546:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba54a:	0728      	lsls	r0, r5, #28
   ba54c:	d5c0      	bpl.n	ba4d0 <_strtod_l+0x88>
   ba54e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba552:	e7bd      	b.n	ba4d0 <_strtod_l+0x88>
   ba554:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba558:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba55a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba55e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba562:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba566:	e7f0      	b.n	ba54a <_strtod_l+0x102>
   ba568:	f8df b180 	ldr.w	fp, [pc, #384]	; ba6ec <_strtod_l+0x2a4>
   ba56c:	e7ed      	b.n	ba54a <_strtod_l+0x102>
   ba56e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba572:	f04f 3aff 	mov.w	sl, #4294967295
   ba576:	e7e8      	b.n	ba54a <_strtod_l+0x102>
   ba578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba57a:	1c5a      	adds	r2, r3, #1
   ba57c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba57e:	785b      	ldrb	r3, [r3, #1]
   ba580:	2b30      	cmp	r3, #48	; 0x30
   ba582:	d0f9      	beq.n	ba578 <_strtod_l+0x130>
   ba584:	2b00      	cmp	r3, #0
   ba586:	d0a3      	beq.n	ba4d0 <_strtod_l+0x88>
   ba588:	2301      	movs	r3, #1
   ba58a:	f04f 0900 	mov.w	r9, #0
   ba58e:	9304      	str	r3, [sp, #16]
   ba590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba592:	9308      	str	r3, [sp, #32]
   ba594:	f8cd 901c 	str.w	r9, [sp, #28]
   ba598:	464f      	mov	r7, r9
   ba59a:	220a      	movs	r2, #10
   ba59c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba59e:	7806      	ldrb	r6, [r0, #0]
   ba5a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba5a4:	b2d9      	uxtb	r1, r3
   ba5a6:	2909      	cmp	r1, #9
   ba5a8:	d92a      	bls.n	ba600 <_strtod_l+0x1b8>
   ba5aa:	9905      	ldr	r1, [sp, #20]
   ba5ac:	462a      	mov	r2, r5
   ba5ae:	f7ff fef6 	bl	ba39e <strncmp>
   ba5b2:	b398      	cbz	r0, ba61c <_strtod_l+0x1d4>
   ba5b4:	2000      	movs	r0, #0
   ba5b6:	4632      	mov	r2, r6
   ba5b8:	463d      	mov	r5, r7
   ba5ba:	9005      	str	r0, [sp, #20]
   ba5bc:	4603      	mov	r3, r0
   ba5be:	2a65      	cmp	r2, #101	; 0x65
   ba5c0:	d001      	beq.n	ba5c6 <_strtod_l+0x17e>
   ba5c2:	2a45      	cmp	r2, #69	; 0x45
   ba5c4:	d118      	bne.n	ba5f8 <_strtod_l+0x1b0>
   ba5c6:	b91d      	cbnz	r5, ba5d0 <_strtod_l+0x188>
   ba5c8:	9a04      	ldr	r2, [sp, #16]
   ba5ca:	4302      	orrs	r2, r0
   ba5cc:	d09e      	beq.n	ba50c <_strtod_l+0xc4>
   ba5ce:	2500      	movs	r5, #0
   ba5d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba5d4:	f108 0201 	add.w	r2, r8, #1
   ba5d8:	9217      	str	r2, [sp, #92]	; 0x5c
   ba5da:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba5de:	2a2b      	cmp	r2, #43	; 0x2b
   ba5e0:	d075      	beq.n	ba6ce <_strtod_l+0x286>
   ba5e2:	2a2d      	cmp	r2, #45	; 0x2d
   ba5e4:	d07b      	beq.n	ba6de <_strtod_l+0x296>
   ba5e6:	f04f 0c00 	mov.w	ip, #0
   ba5ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba5ee:	2909      	cmp	r1, #9
   ba5f0:	f240 8082 	bls.w	ba6f8 <_strtod_l+0x2b0>
   ba5f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba5f8:	2600      	movs	r6, #0
   ba5fa:	e09d      	b.n	ba738 <_strtod_l+0x2f0>
   ba5fc:	2300      	movs	r3, #0
   ba5fe:	e7c4      	b.n	ba58a <_strtod_l+0x142>
   ba600:	2f08      	cmp	r7, #8
   ba602:	bfd8      	it	le
   ba604:	9907      	ldrle	r1, [sp, #28]
   ba606:	f100 0001 	add.w	r0, r0, #1
   ba60a:	bfda      	itte	le
   ba60c:	fb02 3301 	mlale	r3, r2, r1, r3
   ba610:	9307      	strle	r3, [sp, #28]
   ba612:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba616:	3701      	adds	r7, #1
   ba618:	9017      	str	r0, [sp, #92]	; 0x5c
   ba61a:	e7bf      	b.n	ba59c <_strtod_l+0x154>
   ba61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba61e:	195a      	adds	r2, r3, r5
   ba620:	9217      	str	r2, [sp, #92]	; 0x5c
   ba622:	5d5a      	ldrb	r2, [r3, r5]
   ba624:	2f00      	cmp	r7, #0
   ba626:	d037      	beq.n	ba698 <_strtod_l+0x250>
   ba628:	9005      	str	r0, [sp, #20]
   ba62a:	463d      	mov	r5, r7
   ba62c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba630:	2b09      	cmp	r3, #9
   ba632:	d912      	bls.n	ba65a <_strtod_l+0x212>
   ba634:	2301      	movs	r3, #1
   ba636:	e7c2      	b.n	ba5be <_strtod_l+0x176>
   ba638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba63a:	1c5a      	adds	r2, r3, #1
   ba63c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba63e:	785a      	ldrb	r2, [r3, #1]
   ba640:	3001      	adds	r0, #1
   ba642:	2a30      	cmp	r2, #48	; 0x30
   ba644:	d0f8      	beq.n	ba638 <_strtod_l+0x1f0>
   ba646:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba64a:	2b08      	cmp	r3, #8
   ba64c:	f200 84d9 	bhi.w	bb002 <_strtod_l+0xbba>
   ba650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba652:	9005      	str	r0, [sp, #20]
   ba654:	2000      	movs	r0, #0
   ba656:	9308      	str	r3, [sp, #32]
   ba658:	4605      	mov	r5, r0
   ba65a:	3a30      	subs	r2, #48	; 0x30
   ba65c:	f100 0301 	add.w	r3, r0, #1
   ba660:	d014      	beq.n	ba68c <_strtod_l+0x244>
   ba662:	9905      	ldr	r1, [sp, #20]
   ba664:	4419      	add	r1, r3
   ba666:	9105      	str	r1, [sp, #20]
   ba668:	462b      	mov	r3, r5
   ba66a:	eb00 0e05 	add.w	lr, r0, r5
   ba66e:	210a      	movs	r1, #10
   ba670:	4573      	cmp	r3, lr
   ba672:	d113      	bne.n	ba69c <_strtod_l+0x254>
   ba674:	182b      	adds	r3, r5, r0
   ba676:	2b08      	cmp	r3, #8
   ba678:	f105 0501 	add.w	r5, r5, #1
   ba67c:	4405      	add	r5, r0
   ba67e:	dc1c      	bgt.n	ba6ba <_strtod_l+0x272>
   ba680:	9907      	ldr	r1, [sp, #28]
   ba682:	230a      	movs	r3, #10
   ba684:	fb03 2301 	mla	r3, r3, r1, r2
   ba688:	9307      	str	r3, [sp, #28]
   ba68a:	2300      	movs	r3, #0
   ba68c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba68e:	1c51      	adds	r1, r2, #1
   ba690:	9117      	str	r1, [sp, #92]	; 0x5c
   ba692:	7852      	ldrb	r2, [r2, #1]
   ba694:	4618      	mov	r0, r3
   ba696:	e7c9      	b.n	ba62c <_strtod_l+0x1e4>
   ba698:	4638      	mov	r0, r7
   ba69a:	e7d2      	b.n	ba642 <_strtod_l+0x1fa>
   ba69c:	2b08      	cmp	r3, #8
   ba69e:	dc04      	bgt.n	ba6aa <_strtod_l+0x262>
   ba6a0:	9e07      	ldr	r6, [sp, #28]
   ba6a2:	434e      	muls	r6, r1
   ba6a4:	9607      	str	r6, [sp, #28]
   ba6a6:	3301      	adds	r3, #1
   ba6a8:	e7e2      	b.n	ba670 <_strtod_l+0x228>
   ba6aa:	f103 0c01 	add.w	ip, r3, #1
   ba6ae:	f1bc 0f10 	cmp.w	ip, #16
   ba6b2:	bfd8      	it	le
   ba6b4:	fb01 f909 	mulle.w	r9, r1, r9
   ba6b8:	e7f5      	b.n	ba6a6 <_strtod_l+0x25e>
   ba6ba:	2d10      	cmp	r5, #16
   ba6bc:	bfdc      	itt	le
   ba6be:	230a      	movle	r3, #10
   ba6c0:	fb03 2909 	mlale	r9, r3, r9, r2
   ba6c4:	e7e1      	b.n	ba68a <_strtod_l+0x242>
   ba6c6:	2300      	movs	r3, #0
   ba6c8:	9305      	str	r3, [sp, #20]
   ba6ca:	2301      	movs	r3, #1
   ba6cc:	e77c      	b.n	ba5c8 <_strtod_l+0x180>
   ba6ce:	f04f 0c00 	mov.w	ip, #0
   ba6d2:	f108 0202 	add.w	r2, r8, #2
   ba6d6:	9217      	str	r2, [sp, #92]	; 0x5c
   ba6d8:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba6dc:	e785      	b.n	ba5ea <_strtod_l+0x1a2>
   ba6de:	f04f 0c01 	mov.w	ip, #1
   ba6e2:	e7f6      	b.n	ba6d2 <_strtod_l+0x28a>
   ba6e4:	000bd4a8 	.word	0x000bd4a8
   ba6e8:	000bd340 	.word	0x000bd340
   ba6ec:	7ff00000 	.word	0x7ff00000
   ba6f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba6f2:	1c51      	adds	r1, r2, #1
   ba6f4:	9117      	str	r1, [sp, #92]	; 0x5c
   ba6f6:	7852      	ldrb	r2, [r2, #1]
   ba6f8:	2a30      	cmp	r2, #48	; 0x30
   ba6fa:	d0f9      	beq.n	ba6f0 <_strtod_l+0x2a8>
   ba6fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba700:	2908      	cmp	r1, #8
   ba702:	f63f af79 	bhi.w	ba5f8 <_strtod_l+0x1b0>
   ba706:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba70a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba70c:	9206      	str	r2, [sp, #24]
   ba70e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba710:	1c51      	adds	r1, r2, #1
   ba712:	9117      	str	r1, [sp, #92]	; 0x5c
   ba714:	7852      	ldrb	r2, [r2, #1]
   ba716:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba71a:	2e09      	cmp	r6, #9
   ba71c:	d937      	bls.n	ba78e <_strtod_l+0x346>
   ba71e:	9e06      	ldr	r6, [sp, #24]
   ba720:	1b89      	subs	r1, r1, r6
   ba722:	2908      	cmp	r1, #8
   ba724:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba728:	dc02      	bgt.n	ba730 <_strtod_l+0x2e8>
   ba72a:	4576      	cmp	r6, lr
   ba72c:	bfa8      	it	ge
   ba72e:	4676      	movge	r6, lr
   ba730:	f1bc 0f00 	cmp.w	ip, #0
   ba734:	d000      	beq.n	ba738 <_strtod_l+0x2f0>
   ba736:	4276      	negs	r6, r6
   ba738:	2d00      	cmp	r5, #0
   ba73a:	d14d      	bne.n	ba7d8 <_strtod_l+0x390>
   ba73c:	9904      	ldr	r1, [sp, #16]
   ba73e:	4301      	orrs	r1, r0
   ba740:	f47f aec6 	bne.w	ba4d0 <_strtod_l+0x88>
   ba744:	2b00      	cmp	r3, #0
   ba746:	f47f aee1 	bne.w	ba50c <_strtod_l+0xc4>
   ba74a:	2a69      	cmp	r2, #105	; 0x69
   ba74c:	d027      	beq.n	ba79e <_strtod_l+0x356>
   ba74e:	dc24      	bgt.n	ba79a <_strtod_l+0x352>
   ba750:	2a49      	cmp	r2, #73	; 0x49
   ba752:	d024      	beq.n	ba79e <_strtod_l+0x356>
   ba754:	2a4e      	cmp	r2, #78	; 0x4e
   ba756:	f47f aed9 	bne.w	ba50c <_strtod_l+0xc4>
   ba75a:	499f      	ldr	r1, [pc, #636]	; (ba9d8 <_strtod_l+0x590>)
   ba75c:	a817      	add	r0, sp, #92	; 0x5c
   ba75e:	f001 f88f 	bl	bb880 <__match>
   ba762:	2800      	cmp	r0, #0
   ba764:	f43f aed2 	beq.w	ba50c <_strtod_l+0xc4>
   ba768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba76a:	781b      	ldrb	r3, [r3, #0]
   ba76c:	2b28      	cmp	r3, #40	; 0x28
   ba76e:	d12d      	bne.n	ba7cc <_strtod_l+0x384>
   ba770:	499a      	ldr	r1, [pc, #616]	; (ba9dc <_strtod_l+0x594>)
   ba772:	aa1a      	add	r2, sp, #104	; 0x68
   ba774:	a817      	add	r0, sp, #92	; 0x5c
   ba776:	f001 f897 	bl	bb8a8 <__hexnan>
   ba77a:	2805      	cmp	r0, #5
   ba77c:	d126      	bne.n	ba7cc <_strtod_l+0x384>
   ba77e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba780:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba784:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba788:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba78c:	e6a0      	b.n	ba4d0 <_strtod_l+0x88>
   ba78e:	210a      	movs	r1, #10
   ba790:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba794:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba798:	e7b9      	b.n	ba70e <_strtod_l+0x2c6>
   ba79a:	2a6e      	cmp	r2, #110	; 0x6e
   ba79c:	e7db      	b.n	ba756 <_strtod_l+0x30e>
   ba79e:	4990      	ldr	r1, [pc, #576]	; (ba9e0 <_strtod_l+0x598>)
   ba7a0:	a817      	add	r0, sp, #92	; 0x5c
   ba7a2:	f001 f86d 	bl	bb880 <__match>
   ba7a6:	2800      	cmp	r0, #0
   ba7a8:	f43f aeb0 	beq.w	ba50c <_strtod_l+0xc4>
   ba7ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba7ae:	498d      	ldr	r1, [pc, #564]	; (ba9e4 <_strtod_l+0x59c>)
   ba7b0:	3b01      	subs	r3, #1
   ba7b2:	a817      	add	r0, sp, #92	; 0x5c
   ba7b4:	9317      	str	r3, [sp, #92]	; 0x5c
   ba7b6:	f001 f863 	bl	bb880 <__match>
   ba7ba:	b910      	cbnz	r0, ba7c2 <_strtod_l+0x37a>
   ba7bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba7be:	3301      	adds	r3, #1
   ba7c0:	9317      	str	r3, [sp, #92]	; 0x5c
   ba7c2:	f8df b230 	ldr.w	fp, [pc, #560]	; ba9f4 <_strtod_l+0x5ac>
   ba7c6:	f04f 0a00 	mov.w	sl, #0
   ba7ca:	e681      	b.n	ba4d0 <_strtod_l+0x88>
   ba7cc:	4886      	ldr	r0, [pc, #536]	; (ba9e8 <_strtod_l+0x5a0>)
   ba7ce:	f001 fdef 	bl	bc3b0 <nan>
   ba7d2:	ec5b ab10 	vmov	sl, fp, d0
   ba7d6:	e67b      	b.n	ba4d0 <_strtod_l+0x88>
   ba7d8:	9b05      	ldr	r3, [sp, #20]
   ba7da:	9807      	ldr	r0, [sp, #28]
   ba7dc:	1af3      	subs	r3, r6, r3
   ba7de:	2f00      	cmp	r7, #0
   ba7e0:	bf08      	it	eq
   ba7e2:	462f      	moveq	r7, r5
   ba7e4:	2d10      	cmp	r5, #16
   ba7e6:	9306      	str	r3, [sp, #24]
   ba7e8:	46a8      	mov	r8, r5
   ba7ea:	bfa8      	it	ge
   ba7ec:	f04f 0810 	movge.w	r8, #16
   ba7f0:	f7ff f98c 	bl	b9b0c <__aeabi_ui2d>
   ba7f4:	2d09      	cmp	r5, #9
   ba7f6:	4682      	mov	sl, r0
   ba7f8:	468b      	mov	fp, r1
   ba7fa:	dd13      	ble.n	ba824 <_strtod_l+0x3dc>
   ba7fc:	4b7b      	ldr	r3, [pc, #492]	; (ba9ec <_strtod_l+0x5a4>)
   ba7fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba802:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba806:	f7ff f9fb 	bl	b9c00 <__aeabi_dmul>
   ba80a:	4682      	mov	sl, r0
   ba80c:	4648      	mov	r0, r9
   ba80e:	468b      	mov	fp, r1
   ba810:	f7ff f97c 	bl	b9b0c <__aeabi_ui2d>
   ba814:	4602      	mov	r2, r0
   ba816:	460b      	mov	r3, r1
   ba818:	4650      	mov	r0, sl
   ba81a:	4659      	mov	r1, fp
   ba81c:	f7ff f83a 	bl	b9894 <__adddf3>
   ba820:	4682      	mov	sl, r0
   ba822:	468b      	mov	fp, r1
   ba824:	2d0f      	cmp	r5, #15
   ba826:	dc38      	bgt.n	ba89a <_strtod_l+0x452>
   ba828:	9b06      	ldr	r3, [sp, #24]
   ba82a:	2b00      	cmp	r3, #0
   ba82c:	f43f ae50 	beq.w	ba4d0 <_strtod_l+0x88>
   ba830:	dd24      	ble.n	ba87c <_strtod_l+0x434>
   ba832:	2b16      	cmp	r3, #22
   ba834:	dc0b      	bgt.n	ba84e <_strtod_l+0x406>
   ba836:	496d      	ldr	r1, [pc, #436]	; (ba9ec <_strtod_l+0x5a4>)
   ba838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba83c:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba840:	4652      	mov	r2, sl
   ba842:	465b      	mov	r3, fp
   ba844:	f7ff f9dc 	bl	b9c00 <__aeabi_dmul>
   ba848:	4682      	mov	sl, r0
   ba84a:	468b      	mov	fp, r1
   ba84c:	e640      	b.n	ba4d0 <_strtod_l+0x88>
   ba84e:	9a06      	ldr	r2, [sp, #24]
   ba850:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba854:	4293      	cmp	r3, r2
   ba856:	db20      	blt.n	ba89a <_strtod_l+0x452>
   ba858:	4c64      	ldr	r4, [pc, #400]	; (ba9ec <_strtod_l+0x5a4>)
   ba85a:	f1c5 050f 	rsb	r5, r5, #15
   ba85e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba862:	4652      	mov	r2, sl
   ba864:	465b      	mov	r3, fp
   ba866:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba86a:	f7ff f9c9 	bl	b9c00 <__aeabi_dmul>
   ba86e:	9b06      	ldr	r3, [sp, #24]
   ba870:	1b5d      	subs	r5, r3, r5
   ba872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba876:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba87a:	e7e3      	b.n	ba844 <_strtod_l+0x3fc>
   ba87c:	9b06      	ldr	r3, [sp, #24]
   ba87e:	3316      	adds	r3, #22
   ba880:	db0b      	blt.n	ba89a <_strtod_l+0x452>
   ba882:	9b05      	ldr	r3, [sp, #20]
   ba884:	1b9e      	subs	r6, r3, r6
   ba886:	4b59      	ldr	r3, [pc, #356]	; (ba9ec <_strtod_l+0x5a4>)
   ba888:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba88c:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba890:	4650      	mov	r0, sl
   ba892:	4659      	mov	r1, fp
   ba894:	f7ff fade 	bl	b9e54 <__aeabi_ddiv>
   ba898:	e7d6      	b.n	ba848 <_strtod_l+0x400>
   ba89a:	9b06      	ldr	r3, [sp, #24]
   ba89c:	eba5 0808 	sub.w	r8, r5, r8
   ba8a0:	4498      	add	r8, r3
   ba8a2:	f1b8 0f00 	cmp.w	r8, #0
   ba8a6:	dd74      	ble.n	ba992 <_strtod_l+0x54a>
   ba8a8:	f018 030f 	ands.w	r3, r8, #15
   ba8ac:	d00a      	beq.n	ba8c4 <_strtod_l+0x47c>
   ba8ae:	494f      	ldr	r1, [pc, #316]	; (ba9ec <_strtod_l+0x5a4>)
   ba8b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba8b4:	4652      	mov	r2, sl
   ba8b6:	465b      	mov	r3, fp
   ba8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba8bc:	f7ff f9a0 	bl	b9c00 <__aeabi_dmul>
   ba8c0:	4682      	mov	sl, r0
   ba8c2:	468b      	mov	fp, r1
   ba8c4:	f038 080f 	bics.w	r8, r8, #15
   ba8c8:	d04f      	beq.n	ba96a <_strtod_l+0x522>
   ba8ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba8ce:	dd22      	ble.n	ba916 <_strtod_l+0x4ce>
   ba8d0:	2500      	movs	r5, #0
   ba8d2:	462e      	mov	r6, r5
   ba8d4:	9507      	str	r5, [sp, #28]
   ba8d6:	9505      	str	r5, [sp, #20]
   ba8d8:	2322      	movs	r3, #34	; 0x22
   ba8da:	f8df b118 	ldr.w	fp, [pc, #280]	; ba9f4 <_strtod_l+0x5ac>
   ba8de:	6023      	str	r3, [r4, #0]
   ba8e0:	f04f 0a00 	mov.w	sl, #0
   ba8e4:	9b07      	ldr	r3, [sp, #28]
   ba8e6:	2b00      	cmp	r3, #0
   ba8e8:	f43f adf2 	beq.w	ba4d0 <_strtod_l+0x88>
   ba8ec:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba8ee:	4620      	mov	r0, r4
   ba8f0:	f001 f8cc 	bl	bba8c <_Bfree>
   ba8f4:	9905      	ldr	r1, [sp, #20]
   ba8f6:	4620      	mov	r0, r4
   ba8f8:	f001 f8c8 	bl	bba8c <_Bfree>
   ba8fc:	4631      	mov	r1, r6
   ba8fe:	4620      	mov	r0, r4
   ba900:	f001 f8c4 	bl	bba8c <_Bfree>
   ba904:	9907      	ldr	r1, [sp, #28]
   ba906:	4620      	mov	r0, r4
   ba908:	f001 f8c0 	bl	bba8c <_Bfree>
   ba90c:	4629      	mov	r1, r5
   ba90e:	4620      	mov	r0, r4
   ba910:	f001 f8bc 	bl	bba8c <_Bfree>
   ba914:	e5dc      	b.n	ba4d0 <_strtod_l+0x88>
   ba916:	4b36      	ldr	r3, [pc, #216]	; (ba9f0 <_strtod_l+0x5a8>)
   ba918:	9304      	str	r3, [sp, #16]
   ba91a:	2300      	movs	r3, #0
   ba91c:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba920:	4650      	mov	r0, sl
   ba922:	4659      	mov	r1, fp
   ba924:	4699      	mov	r9, r3
   ba926:	f1b8 0f01 	cmp.w	r8, #1
   ba92a:	dc21      	bgt.n	ba970 <_strtod_l+0x528>
   ba92c:	b10b      	cbz	r3, ba932 <_strtod_l+0x4ea>
   ba92e:	4682      	mov	sl, r0
   ba930:	468b      	mov	fp, r1
   ba932:	4b2f      	ldr	r3, [pc, #188]	; (ba9f0 <_strtod_l+0x5a8>)
   ba934:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ba938:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   ba93c:	4652      	mov	r2, sl
   ba93e:	465b      	mov	r3, fp
   ba940:	e9d9 0100 	ldrd	r0, r1, [r9]
   ba944:	f7ff f95c 	bl	b9c00 <__aeabi_dmul>
   ba948:	4b2a      	ldr	r3, [pc, #168]	; (ba9f4 <_strtod_l+0x5ac>)
   ba94a:	460a      	mov	r2, r1
   ba94c:	400b      	ands	r3, r1
   ba94e:	492a      	ldr	r1, [pc, #168]	; (ba9f8 <_strtod_l+0x5b0>)
   ba950:	428b      	cmp	r3, r1
   ba952:	4682      	mov	sl, r0
   ba954:	d8bc      	bhi.n	ba8d0 <_strtod_l+0x488>
   ba956:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ba95a:	428b      	cmp	r3, r1
   ba95c:	bf86      	itte	hi
   ba95e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; ba9fc <_strtod_l+0x5b4>
   ba962:	f04f 3aff 	movhi.w	sl, #4294967295
   ba966:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ba96a:	2300      	movs	r3, #0
   ba96c:	9304      	str	r3, [sp, #16]
   ba96e:	e084      	b.n	baa7a <_strtod_l+0x632>
   ba970:	f018 0f01 	tst.w	r8, #1
   ba974:	d005      	beq.n	ba982 <_strtod_l+0x53a>
   ba976:	9b04      	ldr	r3, [sp, #16]
   ba978:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba97c:	f7ff f940 	bl	b9c00 <__aeabi_dmul>
   ba980:	2301      	movs	r3, #1
   ba982:	9a04      	ldr	r2, [sp, #16]
   ba984:	3208      	adds	r2, #8
   ba986:	f109 0901 	add.w	r9, r9, #1
   ba98a:	ea4f 0868 	mov.w	r8, r8, asr #1
   ba98e:	9204      	str	r2, [sp, #16]
   ba990:	e7c9      	b.n	ba926 <_strtod_l+0x4de>
   ba992:	d0ea      	beq.n	ba96a <_strtod_l+0x522>
   ba994:	f1c8 0800 	rsb	r8, r8, #0
   ba998:	f018 020f 	ands.w	r2, r8, #15
   ba99c:	d00a      	beq.n	ba9b4 <_strtod_l+0x56c>
   ba99e:	4b13      	ldr	r3, [pc, #76]	; (ba9ec <_strtod_l+0x5a4>)
   ba9a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ba9a4:	4650      	mov	r0, sl
   ba9a6:	4659      	mov	r1, fp
   ba9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9ac:	f7ff fa52 	bl	b9e54 <__aeabi_ddiv>
   ba9b0:	4682      	mov	sl, r0
   ba9b2:	468b      	mov	fp, r1
   ba9b4:	ea5f 1828 	movs.w	r8, r8, asr #4
   ba9b8:	d0d7      	beq.n	ba96a <_strtod_l+0x522>
   ba9ba:	f1b8 0f1f 	cmp.w	r8, #31
   ba9be:	dd1f      	ble.n	baa00 <_strtod_l+0x5b8>
   ba9c0:	2500      	movs	r5, #0
   ba9c2:	462e      	mov	r6, r5
   ba9c4:	9507      	str	r5, [sp, #28]
   ba9c6:	9505      	str	r5, [sp, #20]
   ba9c8:	2322      	movs	r3, #34	; 0x22
   ba9ca:	f04f 0a00 	mov.w	sl, #0
   ba9ce:	f04f 0b00 	mov.w	fp, #0
   ba9d2:	6023      	str	r3, [r4, #0]
   ba9d4:	e786      	b.n	ba8e4 <_strtod_l+0x49c>
   ba9d6:	bf00      	nop
   ba9d8:	000bd33b 	.word	0x000bd33b
   ba9dc:	000bd354 	.word	0x000bd354
   ba9e0:	000bd332 	.word	0x000bd332
   ba9e4:	000bd335 	.word	0x000bd335
   ba9e8:	000bcc71 	.word	0x000bcc71
   ba9ec:	000bd568 	.word	0x000bd568
   ba9f0:	000bd540 	.word	0x000bd540
   ba9f4:	7ff00000 	.word	0x7ff00000
   ba9f8:	7ca00000 	.word	0x7ca00000
   ba9fc:	7fefffff 	.word	0x7fefffff
   baa00:	f018 0310 	ands.w	r3, r8, #16
   baa04:	bf18      	it	ne
   baa06:	236a      	movne	r3, #106	; 0x6a
   baa08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; badb8 <_strtod_l+0x970>
   baa0c:	9304      	str	r3, [sp, #16]
   baa0e:	4650      	mov	r0, sl
   baa10:	4659      	mov	r1, fp
   baa12:	2300      	movs	r3, #0
   baa14:	f018 0f01 	tst.w	r8, #1
   baa18:	d004      	beq.n	baa24 <_strtod_l+0x5dc>
   baa1a:	e9d9 2300 	ldrd	r2, r3, [r9]
   baa1e:	f7ff f8ef 	bl	b9c00 <__aeabi_dmul>
   baa22:	2301      	movs	r3, #1
   baa24:	ea5f 0868 	movs.w	r8, r8, asr #1
   baa28:	f109 0908 	add.w	r9, r9, #8
   baa2c:	d1f2      	bne.n	baa14 <_strtod_l+0x5cc>
   baa2e:	b10b      	cbz	r3, baa34 <_strtod_l+0x5ec>
   baa30:	4682      	mov	sl, r0
   baa32:	468b      	mov	fp, r1
   baa34:	9b04      	ldr	r3, [sp, #16]
   baa36:	b1c3      	cbz	r3, baa6a <_strtod_l+0x622>
   baa38:	f3cb 520a 	ubfx	r2, fp, #20, #11
   baa3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   baa40:	2b00      	cmp	r3, #0
   baa42:	4659      	mov	r1, fp
   baa44:	dd11      	ble.n	baa6a <_strtod_l+0x622>
   baa46:	2b1f      	cmp	r3, #31
   baa48:	f340 8124 	ble.w	bac94 <_strtod_l+0x84c>
   baa4c:	2b34      	cmp	r3, #52	; 0x34
   baa4e:	bfde      	ittt	le
   baa50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   baa54:	f04f 33ff 	movle.w	r3, #4294967295
   baa58:	fa03 f202 	lslle.w	r2, r3, r2
   baa5c:	f04f 0a00 	mov.w	sl, #0
   baa60:	bfcc      	ite	gt
   baa62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   baa66:	ea02 0b01 	andle.w	fp, r2, r1
   baa6a:	2200      	movs	r2, #0
   baa6c:	2300      	movs	r3, #0
   baa6e:	4650      	mov	r0, sl
   baa70:	4659      	mov	r1, fp
   baa72:	f7ff fb2d 	bl	ba0d0 <__aeabi_dcmpeq>
   baa76:	2800      	cmp	r0, #0
   baa78:	d1a2      	bne.n	ba9c0 <_strtod_l+0x578>
   baa7a:	9b07      	ldr	r3, [sp, #28]
   baa7c:	9300      	str	r3, [sp, #0]
   baa7e:	9908      	ldr	r1, [sp, #32]
   baa80:	462b      	mov	r3, r5
   baa82:	463a      	mov	r2, r7
   baa84:	4620      	mov	r0, r4
   baa86:	f001 f869 	bl	bbb5c <__s2b>
   baa8a:	9007      	str	r0, [sp, #28]
   baa8c:	2800      	cmp	r0, #0
   baa8e:	f43f af1f 	beq.w	ba8d0 <_strtod_l+0x488>
   baa92:	9b05      	ldr	r3, [sp, #20]
   baa94:	1b9e      	subs	r6, r3, r6
   baa96:	9b06      	ldr	r3, [sp, #24]
   baa98:	2b00      	cmp	r3, #0
   baa9a:	bfb4      	ite	lt
   baa9c:	4633      	movlt	r3, r6
   baa9e:	2300      	movge	r3, #0
   baaa0:	930c      	str	r3, [sp, #48]	; 0x30
   baaa2:	9b06      	ldr	r3, [sp, #24]
   baaa4:	2500      	movs	r5, #0
   baaa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   baaaa:	9312      	str	r3, [sp, #72]	; 0x48
   baaac:	462e      	mov	r6, r5
   baaae:	9b07      	ldr	r3, [sp, #28]
   baab0:	4620      	mov	r0, r4
   baab2:	6859      	ldr	r1, [r3, #4]
   baab4:	f000 ffaa 	bl	bba0c <_Balloc>
   baab8:	9005      	str	r0, [sp, #20]
   baaba:	2800      	cmp	r0, #0
   baabc:	f43f af0c 	beq.w	ba8d8 <_strtod_l+0x490>
   baac0:	9b07      	ldr	r3, [sp, #28]
   baac2:	691a      	ldr	r2, [r3, #16]
   baac4:	3202      	adds	r2, #2
   baac6:	f103 010c 	add.w	r1, r3, #12
   baaca:	0092      	lsls	r2, r2, #2
   baacc:	300c      	adds	r0, #12
   baace:	f7ff fbc0 	bl	ba252 <memcpy>
   baad2:	ec4b ab10 	vmov	d0, sl, fp
   baad6:	aa1a      	add	r2, sp, #104	; 0x68
   baad8:	a919      	add	r1, sp, #100	; 0x64
   baada:	4620      	mov	r0, r4
   baadc:	f001 fb84 	bl	bc1e8 <__d2b>
   baae0:	ec4b ab18 	vmov	d8, sl, fp
   baae4:	9018      	str	r0, [sp, #96]	; 0x60
   baae6:	2800      	cmp	r0, #0
   baae8:	f43f aef6 	beq.w	ba8d8 <_strtod_l+0x490>
   baaec:	2101      	movs	r1, #1
   baaee:	4620      	mov	r0, r4
   baaf0:	f001 f8ce 	bl	bbc90 <__i2b>
   baaf4:	4606      	mov	r6, r0
   baaf6:	2800      	cmp	r0, #0
   baaf8:	f43f aeee 	beq.w	ba8d8 <_strtod_l+0x490>
   baafc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   baafe:	9904      	ldr	r1, [sp, #16]
   bab00:	2b00      	cmp	r3, #0
   bab02:	bfab      	itete	ge
   bab04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bab06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bab08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bab0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bab0e:	bfac      	ite	ge
   bab10:	eb03 0902 	addge.w	r9, r3, r2
   bab14:	1ad7      	sublt	r7, r2, r3
   bab16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bab18:	eba3 0801 	sub.w	r8, r3, r1
   bab1c:	4490      	add	r8, r2
   bab1e:	4ba1      	ldr	r3, [pc, #644]	; (bada4 <_strtod_l+0x95c>)
   bab20:	f108 38ff 	add.w	r8, r8, #4294967295
   bab24:	4598      	cmp	r8, r3
   bab26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bab2a:	f280 80c7 	bge.w	bacbc <_strtod_l+0x874>
   bab2e:	eba3 0308 	sub.w	r3, r3, r8
   bab32:	2b1f      	cmp	r3, #31
   bab34:	eba2 0203 	sub.w	r2, r2, r3
   bab38:	f04f 0101 	mov.w	r1, #1
   bab3c:	f300 80b1 	bgt.w	baca2 <_strtod_l+0x85a>
   bab40:	fa01 f303 	lsl.w	r3, r1, r3
   bab44:	930d      	str	r3, [sp, #52]	; 0x34
   bab46:	2300      	movs	r3, #0
   bab48:	9308      	str	r3, [sp, #32]
   bab4a:	eb09 0802 	add.w	r8, r9, r2
   bab4e:	9b04      	ldr	r3, [sp, #16]
   bab50:	45c1      	cmp	r9, r8
   bab52:	4417      	add	r7, r2
   bab54:	441f      	add	r7, r3
   bab56:	464b      	mov	r3, r9
   bab58:	bfa8      	it	ge
   bab5a:	4643      	movge	r3, r8
   bab5c:	42bb      	cmp	r3, r7
   bab5e:	bfa8      	it	ge
   bab60:	463b      	movge	r3, r7
   bab62:	2b00      	cmp	r3, #0
   bab64:	bfc2      	ittt	gt
   bab66:	eba8 0803 	subgt.w	r8, r8, r3
   bab6a:	1aff      	subgt	r7, r7, r3
   bab6c:	eba9 0903 	subgt.w	r9, r9, r3
   bab70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bab72:	2b00      	cmp	r3, #0
   bab74:	dd17      	ble.n	baba6 <_strtod_l+0x75e>
   bab76:	4631      	mov	r1, r6
   bab78:	461a      	mov	r2, r3
   bab7a:	4620      	mov	r0, r4
   bab7c:	f001 f948 	bl	bbe10 <__pow5mult>
   bab80:	4606      	mov	r6, r0
   bab82:	2800      	cmp	r0, #0
   bab84:	f43f aea8 	beq.w	ba8d8 <_strtod_l+0x490>
   bab88:	4601      	mov	r1, r0
   bab8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bab8c:	4620      	mov	r0, r4
   bab8e:	f001 f895 	bl	bbcbc <__multiply>
   bab92:	900b      	str	r0, [sp, #44]	; 0x2c
   bab94:	2800      	cmp	r0, #0
   bab96:	f43f ae9f 	beq.w	ba8d8 <_strtod_l+0x490>
   bab9a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bab9c:	4620      	mov	r0, r4
   bab9e:	f000 ff75 	bl	bba8c <_Bfree>
   baba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baba4:	9318      	str	r3, [sp, #96]	; 0x60
   baba6:	f1b8 0f00 	cmp.w	r8, #0
   babaa:	f300 808c 	bgt.w	bacc6 <_strtod_l+0x87e>
   babae:	9b06      	ldr	r3, [sp, #24]
   babb0:	2b00      	cmp	r3, #0
   babb2:	dd08      	ble.n	babc6 <_strtod_l+0x77e>
   babb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   babb6:	9905      	ldr	r1, [sp, #20]
   babb8:	4620      	mov	r0, r4
   babba:	f001 f929 	bl	bbe10 <__pow5mult>
   babbe:	9005      	str	r0, [sp, #20]
   babc0:	2800      	cmp	r0, #0
   babc2:	f43f ae89 	beq.w	ba8d8 <_strtod_l+0x490>
   babc6:	2f00      	cmp	r7, #0
   babc8:	dd08      	ble.n	babdc <_strtod_l+0x794>
   babca:	9905      	ldr	r1, [sp, #20]
   babcc:	463a      	mov	r2, r7
   babce:	4620      	mov	r0, r4
   babd0:	f001 f978 	bl	bbec4 <__lshift>
   babd4:	9005      	str	r0, [sp, #20]
   babd6:	2800      	cmp	r0, #0
   babd8:	f43f ae7e 	beq.w	ba8d8 <_strtod_l+0x490>
   babdc:	f1b9 0f00 	cmp.w	r9, #0
   babe0:	dd08      	ble.n	babf4 <_strtod_l+0x7ac>
   babe2:	4631      	mov	r1, r6
   babe4:	464a      	mov	r2, r9
   babe6:	4620      	mov	r0, r4
   babe8:	f001 f96c 	bl	bbec4 <__lshift>
   babec:	4606      	mov	r6, r0
   babee:	2800      	cmp	r0, #0
   babf0:	f43f ae72 	beq.w	ba8d8 <_strtod_l+0x490>
   babf4:	9a05      	ldr	r2, [sp, #20]
   babf6:	9918      	ldr	r1, [sp, #96]	; 0x60
   babf8:	4620      	mov	r0, r4
   babfa:	f001 f9ef 	bl	bbfdc <__mdiff>
   babfe:	4605      	mov	r5, r0
   bac00:	2800      	cmp	r0, #0
   bac02:	f43f ae69 	beq.w	ba8d8 <_strtod_l+0x490>
   bac06:	68c3      	ldr	r3, [r0, #12]
   bac08:	930b      	str	r3, [sp, #44]	; 0x2c
   bac0a:	2300      	movs	r3, #0
   bac0c:	60c3      	str	r3, [r0, #12]
   bac0e:	4631      	mov	r1, r6
   bac10:	f001 f9c8 	bl	bbfa4 <__mcmp>
   bac14:	2800      	cmp	r0, #0
   bac16:	da60      	bge.n	bacda <_strtod_l+0x892>
   bac18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bac1a:	ea53 030a 	orrs.w	r3, r3, sl
   bac1e:	f040 8082 	bne.w	bad26 <_strtod_l+0x8de>
   bac22:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bac26:	2b00      	cmp	r3, #0
   bac28:	d17d      	bne.n	bad26 <_strtod_l+0x8de>
   bac2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bac2e:	0d1b      	lsrs	r3, r3, #20
   bac30:	051b      	lsls	r3, r3, #20
   bac32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bac36:	d976      	bls.n	bad26 <_strtod_l+0x8de>
   bac38:	696b      	ldr	r3, [r5, #20]
   bac3a:	b913      	cbnz	r3, bac42 <_strtod_l+0x7fa>
   bac3c:	692b      	ldr	r3, [r5, #16]
   bac3e:	2b01      	cmp	r3, #1
   bac40:	dd71      	ble.n	bad26 <_strtod_l+0x8de>
   bac42:	4629      	mov	r1, r5
   bac44:	2201      	movs	r2, #1
   bac46:	4620      	mov	r0, r4
   bac48:	f001 f93c 	bl	bbec4 <__lshift>
   bac4c:	4631      	mov	r1, r6
   bac4e:	4605      	mov	r5, r0
   bac50:	f001 f9a8 	bl	bbfa4 <__mcmp>
   bac54:	2800      	cmp	r0, #0
   bac56:	dd66      	ble.n	bad26 <_strtod_l+0x8de>
   bac58:	9904      	ldr	r1, [sp, #16]
   bac5a:	4a53      	ldr	r2, [pc, #332]	; (bada8 <_strtod_l+0x960>)
   bac5c:	465b      	mov	r3, fp
   bac5e:	2900      	cmp	r1, #0
   bac60:	f000 8081 	beq.w	bad66 <_strtod_l+0x91e>
   bac64:	ea02 010b 	and.w	r1, r2, fp
   bac68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bac6c:	dc7b      	bgt.n	bad66 <_strtod_l+0x91e>
   bac6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bac72:	f77f aea9 	ble.w	ba9c8 <_strtod_l+0x580>
   bac76:	4b4d      	ldr	r3, [pc, #308]	; (badac <_strtod_l+0x964>)
   bac78:	4650      	mov	r0, sl
   bac7a:	4659      	mov	r1, fp
   bac7c:	2200      	movs	r2, #0
   bac7e:	f7fe ffbf 	bl	b9c00 <__aeabi_dmul>
   bac82:	460b      	mov	r3, r1
   bac84:	4303      	orrs	r3, r0
   bac86:	bf08      	it	eq
   bac88:	2322      	moveq	r3, #34	; 0x22
   bac8a:	4682      	mov	sl, r0
   bac8c:	468b      	mov	fp, r1
   bac8e:	bf08      	it	eq
   bac90:	6023      	streq	r3, [r4, #0]
   bac92:	e62b      	b.n	ba8ec <_strtod_l+0x4a4>
   bac94:	f04f 32ff 	mov.w	r2, #4294967295
   bac98:	fa02 f303 	lsl.w	r3, r2, r3
   bac9c:	ea03 0a0a 	and.w	sl, r3, sl
   baca0:	e6e3      	b.n	baa6a <_strtod_l+0x622>
   baca2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   baca6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bacaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bacae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bacb2:	fa01 f308 	lsl.w	r3, r1, r8
   bacb6:	9308      	str	r3, [sp, #32]
   bacb8:	910d      	str	r1, [sp, #52]	; 0x34
   bacba:	e746      	b.n	bab4a <_strtod_l+0x702>
   bacbc:	2300      	movs	r3, #0
   bacbe:	9308      	str	r3, [sp, #32]
   bacc0:	2301      	movs	r3, #1
   bacc2:	930d      	str	r3, [sp, #52]	; 0x34
   bacc4:	e741      	b.n	bab4a <_strtod_l+0x702>
   bacc6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bacc8:	4642      	mov	r2, r8
   bacca:	4620      	mov	r0, r4
   baccc:	f001 f8fa 	bl	bbec4 <__lshift>
   bacd0:	9018      	str	r0, [sp, #96]	; 0x60
   bacd2:	2800      	cmp	r0, #0
   bacd4:	f47f af6b 	bne.w	babae <_strtod_l+0x766>
   bacd8:	e5fe      	b.n	ba8d8 <_strtod_l+0x490>
   bacda:	465f      	mov	r7, fp
   bacdc:	d16e      	bne.n	badbc <_strtod_l+0x974>
   bacde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bace0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bace4:	b342      	cbz	r2, bad38 <_strtod_l+0x8f0>
   bace6:	4a32      	ldr	r2, [pc, #200]	; (badb0 <_strtod_l+0x968>)
   bace8:	4293      	cmp	r3, r2
   bacea:	d128      	bne.n	bad3e <_strtod_l+0x8f6>
   bacec:	9b04      	ldr	r3, [sp, #16]
   bacee:	4651      	mov	r1, sl
   bacf0:	b1eb      	cbz	r3, bad2e <_strtod_l+0x8e6>
   bacf2:	4b2d      	ldr	r3, [pc, #180]	; (bada8 <_strtod_l+0x960>)
   bacf4:	403b      	ands	r3, r7
   bacf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bacfa:	f04f 32ff 	mov.w	r2, #4294967295
   bacfe:	d819      	bhi.n	bad34 <_strtod_l+0x8ec>
   bad00:	0d1b      	lsrs	r3, r3, #20
   bad02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bad06:	fa02 f303 	lsl.w	r3, r2, r3
   bad0a:	4299      	cmp	r1, r3
   bad0c:	d117      	bne.n	bad3e <_strtod_l+0x8f6>
   bad0e:	4b29      	ldr	r3, [pc, #164]	; (badb4 <_strtod_l+0x96c>)
   bad10:	429f      	cmp	r7, r3
   bad12:	d102      	bne.n	bad1a <_strtod_l+0x8d2>
   bad14:	3101      	adds	r1, #1
   bad16:	f43f addf 	beq.w	ba8d8 <_strtod_l+0x490>
   bad1a:	4b23      	ldr	r3, [pc, #140]	; (bada8 <_strtod_l+0x960>)
   bad1c:	403b      	ands	r3, r7
   bad1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bad22:	f04f 0a00 	mov.w	sl, #0
   bad26:	9b04      	ldr	r3, [sp, #16]
   bad28:	2b00      	cmp	r3, #0
   bad2a:	d1a4      	bne.n	bac76 <_strtod_l+0x82e>
   bad2c:	e5de      	b.n	ba8ec <_strtod_l+0x4a4>
   bad2e:	f04f 33ff 	mov.w	r3, #4294967295
   bad32:	e7ea      	b.n	bad0a <_strtod_l+0x8c2>
   bad34:	4613      	mov	r3, r2
   bad36:	e7e8      	b.n	bad0a <_strtod_l+0x8c2>
   bad38:	ea53 030a 	orrs.w	r3, r3, sl
   bad3c:	d08c      	beq.n	bac58 <_strtod_l+0x810>
   bad3e:	9b08      	ldr	r3, [sp, #32]
   bad40:	b1db      	cbz	r3, bad7a <_strtod_l+0x932>
   bad42:	423b      	tst	r3, r7
   bad44:	d0ef      	beq.n	bad26 <_strtod_l+0x8de>
   bad46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bad48:	9a04      	ldr	r2, [sp, #16]
   bad4a:	4650      	mov	r0, sl
   bad4c:	4659      	mov	r1, fp
   bad4e:	b1c3      	cbz	r3, bad82 <_strtod_l+0x93a>
   bad50:	f7ff fb5b 	bl	ba40a <sulp>
   bad54:	4602      	mov	r2, r0
   bad56:	460b      	mov	r3, r1
   bad58:	ec51 0b18 	vmov	r0, r1, d8
   bad5c:	f7fe fd9a 	bl	b9894 <__adddf3>
   bad60:	4682      	mov	sl, r0
   bad62:	468b      	mov	fp, r1
   bad64:	e7df      	b.n	bad26 <_strtod_l+0x8de>
   bad66:	4013      	ands	r3, r2
   bad68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bad6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bad70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bad74:	f04f 3aff 	mov.w	sl, #4294967295
   bad78:	e7d5      	b.n	bad26 <_strtod_l+0x8de>
   bad7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bad7c:	ea13 0f0a 	tst.w	r3, sl
   bad80:	e7e0      	b.n	bad44 <_strtod_l+0x8fc>
   bad82:	f7ff fb42 	bl	ba40a <sulp>
   bad86:	4602      	mov	r2, r0
   bad88:	460b      	mov	r3, r1
   bad8a:	ec51 0b18 	vmov	r0, r1, d8
   bad8e:	f7fe fd7f 	bl	b9890 <__aeabi_dsub>
   bad92:	2200      	movs	r2, #0
   bad94:	2300      	movs	r3, #0
   bad96:	4682      	mov	sl, r0
   bad98:	468b      	mov	fp, r1
   bad9a:	f7ff f999 	bl	ba0d0 <__aeabi_dcmpeq>
   bad9e:	2800      	cmp	r0, #0
   bada0:	d0c1      	beq.n	bad26 <_strtod_l+0x8de>
   bada2:	e611      	b.n	ba9c8 <_strtod_l+0x580>
   bada4:	fffffc02 	.word	0xfffffc02
   bada8:	7ff00000 	.word	0x7ff00000
   badac:	39500000 	.word	0x39500000
   badb0:	000fffff 	.word	0x000fffff
   badb4:	7fefffff 	.word	0x7fefffff
   badb8:	000bd368 	.word	0x000bd368
   badbc:	4631      	mov	r1, r6
   badbe:	4628      	mov	r0, r5
   badc0:	f001 fa6e 	bl	bc2a0 <__ratio>
   badc4:	ec59 8b10 	vmov	r8, r9, d0
   badc8:	ee10 0a10 	vmov	r0, s0
   badcc:	2200      	movs	r2, #0
   badce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   badd2:	4649      	mov	r1, r9
   badd4:	f7ff f990 	bl	ba0f8 <__aeabi_dcmple>
   badd8:	2800      	cmp	r0, #0
   badda:	d07a      	beq.n	baed2 <_strtod_l+0xa8a>
   baddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   badde:	2b00      	cmp	r3, #0
   bade0:	d04a      	beq.n	bae78 <_strtod_l+0xa30>
   bade2:	4b95      	ldr	r3, [pc, #596]	; (bb038 <_strtod_l+0xbf0>)
   bade4:	2200      	movs	r2, #0
   bade6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   badea:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb038 <_strtod_l+0xbf0>
   badee:	f04f 0800 	mov.w	r8, #0
   badf2:	4b92      	ldr	r3, [pc, #584]	; (bb03c <_strtod_l+0xbf4>)
   badf4:	403b      	ands	r3, r7
   badf6:	930d      	str	r3, [sp, #52]	; 0x34
   badf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   badfa:	4b91      	ldr	r3, [pc, #580]	; (bb040 <_strtod_l+0xbf8>)
   badfc:	429a      	cmp	r2, r3
   badfe:	f040 80b0 	bne.w	baf62 <_strtod_l+0xb1a>
   bae02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bae06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bae0a:	ec4b ab10 	vmov	d0, sl, fp
   bae0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bae12:	f001 f96d 	bl	bc0f0 <__ulp>
   bae16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bae1a:	ec53 2b10 	vmov	r2, r3, d0
   bae1e:	f7fe feef 	bl	b9c00 <__aeabi_dmul>
   bae22:	4652      	mov	r2, sl
   bae24:	465b      	mov	r3, fp
   bae26:	f7fe fd35 	bl	b9894 <__adddf3>
   bae2a:	460b      	mov	r3, r1
   bae2c:	4983      	ldr	r1, [pc, #524]	; (bb03c <_strtod_l+0xbf4>)
   bae2e:	4a85      	ldr	r2, [pc, #532]	; (bb044 <_strtod_l+0xbfc>)
   bae30:	4019      	ands	r1, r3
   bae32:	4291      	cmp	r1, r2
   bae34:	4682      	mov	sl, r0
   bae36:	d960      	bls.n	baefa <_strtod_l+0xab2>
   bae38:	ee18 3a90 	vmov	r3, s17
   bae3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bae40:	4293      	cmp	r3, r2
   bae42:	d104      	bne.n	bae4e <_strtod_l+0xa06>
   bae44:	ee18 3a10 	vmov	r3, s16
   bae48:	3301      	adds	r3, #1
   bae4a:	f43f ad45 	beq.w	ba8d8 <_strtod_l+0x490>
   bae4e:	f8df b200 	ldr.w	fp, [pc, #512]	; bb050 <_strtod_l+0xc08>
   bae52:	f04f 3aff 	mov.w	sl, #4294967295
   bae56:	9918      	ldr	r1, [sp, #96]	; 0x60
   bae58:	4620      	mov	r0, r4
   bae5a:	f000 fe17 	bl	bba8c <_Bfree>
   bae5e:	9905      	ldr	r1, [sp, #20]
   bae60:	4620      	mov	r0, r4
   bae62:	f000 fe13 	bl	bba8c <_Bfree>
   bae66:	4631      	mov	r1, r6
   bae68:	4620      	mov	r0, r4
   bae6a:	f000 fe0f 	bl	bba8c <_Bfree>
   bae6e:	4629      	mov	r1, r5
   bae70:	4620      	mov	r0, r4
   bae72:	f000 fe0b 	bl	bba8c <_Bfree>
   bae76:	e61a      	b.n	baaae <_strtod_l+0x666>
   bae78:	f1ba 0f00 	cmp.w	sl, #0
   bae7c:	d11b      	bne.n	baeb6 <_strtod_l+0xa6e>
   bae7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bae82:	b9f3      	cbnz	r3, baec2 <_strtod_l+0xa7a>
   bae84:	4b6c      	ldr	r3, [pc, #432]	; (bb038 <_strtod_l+0xbf0>)
   bae86:	2200      	movs	r2, #0
   bae88:	4640      	mov	r0, r8
   bae8a:	4649      	mov	r1, r9
   bae8c:	f7ff f92a 	bl	ba0e4 <__aeabi_dcmplt>
   bae90:	b9d0      	cbnz	r0, baec8 <_strtod_l+0xa80>
   bae92:	4640      	mov	r0, r8
   bae94:	4649      	mov	r1, r9
   bae96:	4b6c      	ldr	r3, [pc, #432]	; (bb048 <_strtod_l+0xc00>)
   bae98:	2200      	movs	r2, #0
   bae9a:	f7fe feb1 	bl	b9c00 <__aeabi_dmul>
   bae9e:	4680      	mov	r8, r0
   baea0:	4689      	mov	r9, r1
   baea2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   baea6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   baeaa:	9315      	str	r3, [sp, #84]	; 0x54
   baeac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   baeb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baeb4:	e79d      	b.n	badf2 <_strtod_l+0x9aa>
   baeb6:	f1ba 0f01 	cmp.w	sl, #1
   baeba:	d102      	bne.n	baec2 <_strtod_l+0xa7a>
   baebc:	2f00      	cmp	r7, #0
   baebe:	f43f ad83 	beq.w	ba9c8 <_strtod_l+0x580>
   baec2:	4b62      	ldr	r3, [pc, #392]	; (bb04c <_strtod_l+0xc04>)
   baec4:	2200      	movs	r2, #0
   baec6:	e78e      	b.n	bade6 <_strtod_l+0x99e>
   baec8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb048 <_strtod_l+0xc00>
   baecc:	f04f 0800 	mov.w	r8, #0
   baed0:	e7e7      	b.n	baea2 <_strtod_l+0xa5a>
   baed2:	4b5d      	ldr	r3, [pc, #372]	; (bb048 <_strtod_l+0xc00>)
   baed4:	4640      	mov	r0, r8
   baed6:	4649      	mov	r1, r9
   baed8:	2200      	movs	r2, #0
   baeda:	f7fe fe91 	bl	b9c00 <__aeabi_dmul>
   baede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baee0:	4680      	mov	r8, r0
   baee2:	4689      	mov	r9, r1
   baee4:	b933      	cbnz	r3, baef4 <_strtod_l+0xaac>
   baee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   baeea:	900e      	str	r0, [sp, #56]	; 0x38
   baeec:	930f      	str	r3, [sp, #60]	; 0x3c
   baeee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   baef2:	e7dd      	b.n	baeb0 <_strtod_l+0xa68>
   baef4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   baef8:	e7f9      	b.n	baeee <_strtod_l+0xaa6>
   baefa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   baefe:	9b04      	ldr	r3, [sp, #16]
   baf00:	2b00      	cmp	r3, #0
   baf02:	d1a8      	bne.n	bae56 <_strtod_l+0xa0e>
   baf04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   baf08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   baf0a:	0d1b      	lsrs	r3, r3, #20
   baf0c:	051b      	lsls	r3, r3, #20
   baf0e:	429a      	cmp	r2, r3
   baf10:	d1a1      	bne.n	bae56 <_strtod_l+0xa0e>
   baf12:	4640      	mov	r0, r8
   baf14:	4649      	mov	r1, r9
   baf16:	f001 fa61 	bl	bc3dc <__aeabi_d2lz>
   baf1a:	f7fe fe43 	bl	b9ba4 <__aeabi_l2d>
   baf1e:	4602      	mov	r2, r0
   baf20:	460b      	mov	r3, r1
   baf22:	4640      	mov	r0, r8
   baf24:	4649      	mov	r1, r9
   baf26:	f7fe fcb3 	bl	b9890 <__aeabi_dsub>
   baf2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   baf2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baf30:	ea43 030a 	orr.w	r3, r3, sl
   baf34:	4313      	orrs	r3, r2
   baf36:	4680      	mov	r8, r0
   baf38:	4689      	mov	r9, r1
   baf3a:	d055      	beq.n	bafe8 <_strtod_l+0xba0>
   baf3c:	a336      	add	r3, pc, #216	; (adr r3, bb018 <_strtod_l+0xbd0>)
   baf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf42:	f7ff f8cf 	bl	ba0e4 <__aeabi_dcmplt>
   baf46:	2800      	cmp	r0, #0
   baf48:	f47f acd0 	bne.w	ba8ec <_strtod_l+0x4a4>
   baf4c:	a334      	add	r3, pc, #208	; (adr r3, bb020 <_strtod_l+0xbd8>)
   baf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf52:	4640      	mov	r0, r8
   baf54:	4649      	mov	r1, r9
   baf56:	f7ff f8e3 	bl	ba120 <__aeabi_dcmpgt>
   baf5a:	2800      	cmp	r0, #0
   baf5c:	f43f af7b 	beq.w	bae56 <_strtod_l+0xa0e>
   baf60:	e4c4      	b.n	ba8ec <_strtod_l+0x4a4>
   baf62:	9b04      	ldr	r3, [sp, #16]
   baf64:	b333      	cbz	r3, bafb4 <_strtod_l+0xb6c>
   baf66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   baf68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   baf6c:	d822      	bhi.n	bafb4 <_strtod_l+0xb6c>
   baf6e:	a32e      	add	r3, pc, #184	; (adr r3, bb028 <_strtod_l+0xbe0>)
   baf70:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf74:	4640      	mov	r0, r8
   baf76:	4649      	mov	r1, r9
   baf78:	f7ff f8be 	bl	ba0f8 <__aeabi_dcmple>
   baf7c:	b1a0      	cbz	r0, bafa8 <_strtod_l+0xb60>
   baf7e:	4649      	mov	r1, r9
   baf80:	4640      	mov	r0, r8
   baf82:	f7ff f8d7 	bl	ba134 <__aeabi_d2uiz>
   baf86:	2801      	cmp	r0, #1
   baf88:	bf38      	it	cc
   baf8a:	2001      	movcc	r0, #1
   baf8c:	f7fe fdbe 	bl	b9b0c <__aeabi_ui2d>
   baf90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baf92:	4680      	mov	r8, r0
   baf94:	4689      	mov	r9, r1
   baf96:	bb23      	cbnz	r3, bafe2 <_strtod_l+0xb9a>
   baf98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   baf9c:	9010      	str	r0, [sp, #64]	; 0x40
   baf9e:	9311      	str	r3, [sp, #68]	; 0x44
   bafa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bafa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bafa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bafaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bafac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bafb0:	1a9b      	subs	r3, r3, r2
   bafb2:	9309      	str	r3, [sp, #36]	; 0x24
   bafb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bafb8:	eeb0 0a48 	vmov.f32	s0, s16
   bafbc:	eef0 0a68 	vmov.f32	s1, s17
   bafc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bafc4:	f001 f894 	bl	bc0f0 <__ulp>
   bafc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bafcc:	ec53 2b10 	vmov	r2, r3, d0
   bafd0:	f7fe fe16 	bl	b9c00 <__aeabi_dmul>
   bafd4:	ec53 2b18 	vmov	r2, r3, d8
   bafd8:	f7fe fc5c 	bl	b9894 <__adddf3>
   bafdc:	4682      	mov	sl, r0
   bafde:	468b      	mov	fp, r1
   bafe0:	e78d      	b.n	baefe <_strtod_l+0xab6>
   bafe2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bafe6:	e7db      	b.n	bafa0 <_strtod_l+0xb58>
   bafe8:	a311      	add	r3, pc, #68	; (adr r3, bb030 <_strtod_l+0xbe8>)
   bafea:	e9d3 2300 	ldrd	r2, r3, [r3]
   bafee:	f7ff f879 	bl	ba0e4 <__aeabi_dcmplt>
   baff2:	e7b2      	b.n	baf5a <_strtod_l+0xb12>
   baff4:	2300      	movs	r3, #0
   baff6:	930a      	str	r3, [sp, #40]	; 0x28
   baff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   baffa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baffc:	6013      	str	r3, [r2, #0]
   baffe:	f7ff ba6b 	b.w	ba4d8 <_strtod_l+0x90>
   bb002:	2a65      	cmp	r2, #101	; 0x65
   bb004:	f43f ab5f 	beq.w	ba6c6 <_strtod_l+0x27e>
   bb008:	2a45      	cmp	r2, #69	; 0x45
   bb00a:	f43f ab5c 	beq.w	ba6c6 <_strtod_l+0x27e>
   bb00e:	2301      	movs	r3, #1
   bb010:	f7ff bb94 	b.w	ba73c <_strtod_l+0x2f4>
   bb014:	f3af 8000 	nop.w
   bb018:	94a03595 	.word	0x94a03595
   bb01c:	3fdfffff 	.word	0x3fdfffff
   bb020:	35afe535 	.word	0x35afe535
   bb024:	3fe00000 	.word	0x3fe00000
   bb028:	ffc00000 	.word	0xffc00000
   bb02c:	41dfffff 	.word	0x41dfffff
   bb030:	94a03595 	.word	0x94a03595
   bb034:	3fcfffff 	.word	0x3fcfffff
   bb038:	3ff00000 	.word	0x3ff00000
   bb03c:	7ff00000 	.word	0x7ff00000
   bb040:	7fe00000 	.word	0x7fe00000
   bb044:	7c9fffff 	.word	0x7c9fffff
   bb048:	3fe00000 	.word	0x3fe00000
   bb04c:	bff00000 	.word	0xbff00000
   bb050:	7fefffff 	.word	0x7fefffff

000bb054 <strtod>:
   bb054:	460a      	mov	r2, r1
   bb056:	4601      	mov	r1, r0
   bb058:	4802      	ldr	r0, [pc, #8]	; (bb064 <strtod+0x10>)
   bb05a:	4b03      	ldr	r3, [pc, #12]	; (bb068 <strtod+0x14>)
   bb05c:	6800      	ldr	r0, [r0, #0]
   bb05e:	f7ff b9f3 	b.w	ba448 <_strtod_l>
   bb062:	bf00      	nop
   bb064:	2003d174 	.word	0x2003d174
   bb068:	2003d1e0 	.word	0x2003d1e0

000bb06c <strtok>:
   bb06c:	4b16      	ldr	r3, [pc, #88]	; (bb0c8 <strtok+0x5c>)
   bb06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb070:	681e      	ldr	r6, [r3, #0]
   bb072:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bb074:	4605      	mov	r5, r0
   bb076:	b9fc      	cbnz	r4, bb0b8 <strtok+0x4c>
   bb078:	2050      	movs	r0, #80	; 0x50
   bb07a:	9101      	str	r1, [sp, #4]
   bb07c:	f7fb fa54 	bl	b6528 <malloc>
   bb080:	9901      	ldr	r1, [sp, #4]
   bb082:	65b0      	str	r0, [r6, #88]	; 0x58
   bb084:	4602      	mov	r2, r0
   bb086:	b920      	cbnz	r0, bb092 <strtok+0x26>
   bb088:	4b10      	ldr	r3, [pc, #64]	; (bb0cc <strtok+0x60>)
   bb08a:	4811      	ldr	r0, [pc, #68]	; (bb0d0 <strtok+0x64>)
   bb08c:	2157      	movs	r1, #87	; 0x57
   bb08e:	f7fb fa93 	bl	b65b8 <__assert_func>
   bb092:	e9c0 4400 	strd	r4, r4, [r0]
   bb096:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bb09a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bb09e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bb0a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bb0a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bb0aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bb0ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bb0b2:	6184      	str	r4, [r0, #24]
   bb0b4:	7704      	strb	r4, [r0, #28]
   bb0b6:	6244      	str	r4, [r0, #36]	; 0x24
   bb0b8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bb0ba:	2301      	movs	r3, #1
   bb0bc:	4628      	mov	r0, r5
   bb0be:	b002      	add	sp, #8
   bb0c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb0c4:	f000 b806 	b.w	bb0d4 <__strtok_r>
   bb0c8:	2003d174 	.word	0x2003d174
   bb0cc:	000bd29e 	.word	0x000bd29e
   bb0d0:	000bd390 	.word	0x000bd390

000bb0d4 <__strtok_r>:
   bb0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb0d6:	b908      	cbnz	r0, bb0dc <__strtok_r+0x8>
   bb0d8:	6810      	ldr	r0, [r2, #0]
   bb0da:	b188      	cbz	r0, bb100 <__strtok_r+0x2c>
   bb0dc:	4604      	mov	r4, r0
   bb0de:	4620      	mov	r0, r4
   bb0e0:	f814 5b01 	ldrb.w	r5, [r4], #1
   bb0e4:	460f      	mov	r7, r1
   bb0e6:	f817 6b01 	ldrb.w	r6, [r7], #1
   bb0ea:	b91e      	cbnz	r6, bb0f4 <__strtok_r+0x20>
   bb0ec:	b965      	cbnz	r5, bb108 <__strtok_r+0x34>
   bb0ee:	6015      	str	r5, [r2, #0]
   bb0f0:	4628      	mov	r0, r5
   bb0f2:	e005      	b.n	bb100 <__strtok_r+0x2c>
   bb0f4:	42b5      	cmp	r5, r6
   bb0f6:	d1f6      	bne.n	bb0e6 <__strtok_r+0x12>
   bb0f8:	2b00      	cmp	r3, #0
   bb0fa:	d1f0      	bne.n	bb0de <__strtok_r+0xa>
   bb0fc:	6014      	str	r4, [r2, #0]
   bb0fe:	7003      	strb	r3, [r0, #0]
   bb100:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb102:	461c      	mov	r4, r3
   bb104:	e00c      	b.n	bb120 <__strtok_r+0x4c>
   bb106:	b915      	cbnz	r5, bb10e <__strtok_r+0x3a>
   bb108:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb10c:	460e      	mov	r6, r1
   bb10e:	f816 5b01 	ldrb.w	r5, [r6], #1
   bb112:	42ab      	cmp	r3, r5
   bb114:	d1f7      	bne.n	bb106 <__strtok_r+0x32>
   bb116:	2b00      	cmp	r3, #0
   bb118:	d0f3      	beq.n	bb102 <__strtok_r+0x2e>
   bb11a:	2300      	movs	r3, #0
   bb11c:	f804 3c01 	strb.w	r3, [r4, #-1]
   bb120:	6014      	str	r4, [r2, #0]
   bb122:	e7ed      	b.n	bb100 <__strtok_r+0x2c>

000bb124 <_strtol_l.constprop.0>:
   bb124:	2b01      	cmp	r3, #1
   bb126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb12a:	d001      	beq.n	bb130 <_strtol_l.constprop.0+0xc>
   bb12c:	2b24      	cmp	r3, #36	; 0x24
   bb12e:	d906      	bls.n	bb13e <_strtol_l.constprop.0+0x1a>
   bb130:	f7fb fa3a 	bl	b65a8 <__errno>
   bb134:	2316      	movs	r3, #22
   bb136:	6003      	str	r3, [r0, #0]
   bb138:	2000      	movs	r0, #0
   bb13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb13e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb224 <_strtol_l.constprop.0+0x100>
   bb142:	460d      	mov	r5, r1
   bb144:	462e      	mov	r6, r5
   bb146:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb14a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb14e:	f017 0708 	ands.w	r7, r7, #8
   bb152:	d1f7      	bne.n	bb144 <_strtol_l.constprop.0+0x20>
   bb154:	2c2d      	cmp	r4, #45	; 0x2d
   bb156:	d132      	bne.n	bb1be <_strtol_l.constprop.0+0x9a>
   bb158:	782c      	ldrb	r4, [r5, #0]
   bb15a:	2701      	movs	r7, #1
   bb15c:	1cb5      	adds	r5, r6, #2
   bb15e:	2b00      	cmp	r3, #0
   bb160:	d05b      	beq.n	bb21a <_strtol_l.constprop.0+0xf6>
   bb162:	2b10      	cmp	r3, #16
   bb164:	d109      	bne.n	bb17a <_strtol_l.constprop.0+0x56>
   bb166:	2c30      	cmp	r4, #48	; 0x30
   bb168:	d107      	bne.n	bb17a <_strtol_l.constprop.0+0x56>
   bb16a:	782c      	ldrb	r4, [r5, #0]
   bb16c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb170:	2c58      	cmp	r4, #88	; 0x58
   bb172:	d14d      	bne.n	bb210 <_strtol_l.constprop.0+0xec>
   bb174:	786c      	ldrb	r4, [r5, #1]
   bb176:	2310      	movs	r3, #16
   bb178:	3502      	adds	r5, #2
   bb17a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb17e:	f108 38ff 	add.w	r8, r8, #4294967295
   bb182:	f04f 0c00 	mov.w	ip, #0
   bb186:	fbb8 f9f3 	udiv	r9, r8, r3
   bb18a:	4666      	mov	r6, ip
   bb18c:	fb03 8a19 	mls	sl, r3, r9, r8
   bb190:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb194:	f1be 0f09 	cmp.w	lr, #9
   bb198:	d816      	bhi.n	bb1c8 <_strtol_l.constprop.0+0xa4>
   bb19a:	4674      	mov	r4, lr
   bb19c:	42a3      	cmp	r3, r4
   bb19e:	dd24      	ble.n	bb1ea <_strtol_l.constprop.0+0xc6>
   bb1a0:	f1bc 0f00 	cmp.w	ip, #0
   bb1a4:	db1e      	blt.n	bb1e4 <_strtol_l.constprop.0+0xc0>
   bb1a6:	45b1      	cmp	r9, r6
   bb1a8:	d31c      	bcc.n	bb1e4 <_strtol_l.constprop.0+0xc0>
   bb1aa:	d101      	bne.n	bb1b0 <_strtol_l.constprop.0+0x8c>
   bb1ac:	45a2      	cmp	sl, r4
   bb1ae:	db19      	blt.n	bb1e4 <_strtol_l.constprop.0+0xc0>
   bb1b0:	fb06 4603 	mla	r6, r6, r3, r4
   bb1b4:	f04f 0c01 	mov.w	ip, #1
   bb1b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb1bc:	e7e8      	b.n	bb190 <_strtol_l.constprop.0+0x6c>
   bb1be:	2c2b      	cmp	r4, #43	; 0x2b
   bb1c0:	bf04      	itt	eq
   bb1c2:	782c      	ldrbeq	r4, [r5, #0]
   bb1c4:	1cb5      	addeq	r5, r6, #2
   bb1c6:	e7ca      	b.n	bb15e <_strtol_l.constprop.0+0x3a>
   bb1c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb1cc:	f1be 0f19 	cmp.w	lr, #25
   bb1d0:	d801      	bhi.n	bb1d6 <_strtol_l.constprop.0+0xb2>
   bb1d2:	3c37      	subs	r4, #55	; 0x37
   bb1d4:	e7e2      	b.n	bb19c <_strtol_l.constprop.0+0x78>
   bb1d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb1da:	f1be 0f19 	cmp.w	lr, #25
   bb1de:	d804      	bhi.n	bb1ea <_strtol_l.constprop.0+0xc6>
   bb1e0:	3c57      	subs	r4, #87	; 0x57
   bb1e2:	e7db      	b.n	bb19c <_strtol_l.constprop.0+0x78>
   bb1e4:	f04f 3cff 	mov.w	ip, #4294967295
   bb1e8:	e7e6      	b.n	bb1b8 <_strtol_l.constprop.0+0x94>
   bb1ea:	f1bc 0f00 	cmp.w	ip, #0
   bb1ee:	da05      	bge.n	bb1fc <_strtol_l.constprop.0+0xd8>
   bb1f0:	2322      	movs	r3, #34	; 0x22
   bb1f2:	6003      	str	r3, [r0, #0]
   bb1f4:	4646      	mov	r6, r8
   bb1f6:	b942      	cbnz	r2, bb20a <_strtol_l.constprop.0+0xe6>
   bb1f8:	4630      	mov	r0, r6
   bb1fa:	e79e      	b.n	bb13a <_strtol_l.constprop.0+0x16>
   bb1fc:	b107      	cbz	r7, bb200 <_strtol_l.constprop.0+0xdc>
   bb1fe:	4276      	negs	r6, r6
   bb200:	2a00      	cmp	r2, #0
   bb202:	d0f9      	beq.n	bb1f8 <_strtol_l.constprop.0+0xd4>
   bb204:	f1bc 0f00 	cmp.w	ip, #0
   bb208:	d000      	beq.n	bb20c <_strtol_l.constprop.0+0xe8>
   bb20a:	1e69      	subs	r1, r5, #1
   bb20c:	6011      	str	r1, [r2, #0]
   bb20e:	e7f3      	b.n	bb1f8 <_strtol_l.constprop.0+0xd4>
   bb210:	2430      	movs	r4, #48	; 0x30
   bb212:	2b00      	cmp	r3, #0
   bb214:	d1b1      	bne.n	bb17a <_strtol_l.constprop.0+0x56>
   bb216:	2308      	movs	r3, #8
   bb218:	e7af      	b.n	bb17a <_strtol_l.constprop.0+0x56>
   bb21a:	2c30      	cmp	r4, #48	; 0x30
   bb21c:	d0a5      	beq.n	bb16a <_strtol_l.constprop.0+0x46>
   bb21e:	230a      	movs	r3, #10
   bb220:	e7ab      	b.n	bb17a <_strtol_l.constprop.0+0x56>
   bb222:	bf00      	nop
   bb224:	000bd19e 	.word	0x000bd19e

000bb228 <strtol>:
   bb228:	4613      	mov	r3, r2
   bb22a:	460a      	mov	r2, r1
   bb22c:	4601      	mov	r1, r0
   bb22e:	4802      	ldr	r0, [pc, #8]	; (bb238 <strtol+0x10>)
   bb230:	6800      	ldr	r0, [r0, #0]
   bb232:	f7ff bf77 	b.w	bb124 <_strtol_l.constprop.0>
   bb236:	bf00      	nop
   bb238:	2003d174 	.word	0x2003d174

000bb23c <__register_exitproc>:
   bb23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb240:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb2fc <__register_exitproc+0xc0>
   bb244:	4606      	mov	r6, r0
   bb246:	f8d8 0000 	ldr.w	r0, [r8]
   bb24a:	461f      	mov	r7, r3
   bb24c:	460d      	mov	r5, r1
   bb24e:	4691      	mov	r9, r2
   bb250:	f000 fbc6 	bl	bb9e0 <__retarget_lock_acquire_recursive>
   bb254:	4b25      	ldr	r3, [pc, #148]	; (bb2ec <__register_exitproc+0xb0>)
   bb256:	681c      	ldr	r4, [r3, #0]
   bb258:	b934      	cbnz	r4, bb268 <__register_exitproc+0x2c>
   bb25a:	4c25      	ldr	r4, [pc, #148]	; (bb2f0 <__register_exitproc+0xb4>)
   bb25c:	601c      	str	r4, [r3, #0]
   bb25e:	4b25      	ldr	r3, [pc, #148]	; (bb2f4 <__register_exitproc+0xb8>)
   bb260:	b113      	cbz	r3, bb268 <__register_exitproc+0x2c>
   bb262:	681b      	ldr	r3, [r3, #0]
   bb264:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb268:	6863      	ldr	r3, [r4, #4]
   bb26a:	2b1f      	cmp	r3, #31
   bb26c:	dd07      	ble.n	bb27e <__register_exitproc+0x42>
   bb26e:	f8d8 0000 	ldr.w	r0, [r8]
   bb272:	f000 fbb7 	bl	bb9e4 <__retarget_lock_release_recursive>
   bb276:	f04f 30ff 	mov.w	r0, #4294967295
   bb27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb27e:	b34e      	cbz	r6, bb2d4 <__register_exitproc+0x98>
   bb280:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb284:	b988      	cbnz	r0, bb2aa <__register_exitproc+0x6e>
   bb286:	4b1c      	ldr	r3, [pc, #112]	; (bb2f8 <__register_exitproc+0xbc>)
   bb288:	b923      	cbnz	r3, bb294 <__register_exitproc+0x58>
   bb28a:	f8d8 0000 	ldr.w	r0, [r8]
   bb28e:	f000 fba8 	bl	bb9e2 <__retarget_lock_release>
   bb292:	e7f0      	b.n	bb276 <__register_exitproc+0x3a>
   bb294:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb298:	f7fb f946 	bl	b6528 <malloc>
   bb29c:	2800      	cmp	r0, #0
   bb29e:	d0f4      	beq.n	bb28a <__register_exitproc+0x4e>
   bb2a0:	2300      	movs	r3, #0
   bb2a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb2a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb2aa:	6863      	ldr	r3, [r4, #4]
   bb2ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb2b0:	2201      	movs	r2, #1
   bb2b2:	409a      	lsls	r2, r3
   bb2b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb2b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb2bc:	4313      	orrs	r3, r2
   bb2be:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb2c2:	2e02      	cmp	r6, #2
   bb2c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb2c8:	bf02      	ittt	eq
   bb2ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb2ce:	4313      	orreq	r3, r2
   bb2d0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb2d4:	6863      	ldr	r3, [r4, #4]
   bb2d6:	f8d8 0000 	ldr.w	r0, [r8]
   bb2da:	1c5a      	adds	r2, r3, #1
   bb2dc:	3302      	adds	r3, #2
   bb2de:	6062      	str	r2, [r4, #4]
   bb2e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb2e4:	f000 fb7e 	bl	bb9e4 <__retarget_lock_release_recursive>
   bb2e8:	2000      	movs	r0, #0
   bb2ea:	e7c6      	b.n	bb27a <__register_exitproc+0x3e>
   bb2ec:	2003e7ec 	.word	0x2003e7ec
   bb2f0:	2003e760 	.word	0x2003e760
   bb2f4:	00000000 	.word	0x00000000
   bb2f8:	000b6529 	.word	0x000b6529
   bb2fc:	2003d1d8 	.word	0x2003d1d8

000bb300 <rshift>:
   bb300:	6903      	ldr	r3, [r0, #16]
   bb302:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb306:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb30a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb30e:	f100 0414 	add.w	r4, r0, #20
   bb312:	dd45      	ble.n	bb3a0 <rshift+0xa0>
   bb314:	f011 011f 	ands.w	r1, r1, #31
   bb318:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb31c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb320:	d10c      	bne.n	bb33c <rshift+0x3c>
   bb322:	f100 0710 	add.w	r7, r0, #16
   bb326:	4629      	mov	r1, r5
   bb328:	42b1      	cmp	r1, r6
   bb32a:	d334      	bcc.n	bb396 <rshift+0x96>
   bb32c:	1a9b      	subs	r3, r3, r2
   bb32e:	009b      	lsls	r3, r3, #2
   bb330:	1eea      	subs	r2, r5, #3
   bb332:	4296      	cmp	r6, r2
   bb334:	bf38      	it	cc
   bb336:	2300      	movcc	r3, #0
   bb338:	4423      	add	r3, r4
   bb33a:	e015      	b.n	bb368 <rshift+0x68>
   bb33c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb340:	f1c1 0820 	rsb	r8, r1, #32
   bb344:	40cf      	lsrs	r7, r1
   bb346:	f105 0e04 	add.w	lr, r5, #4
   bb34a:	46a1      	mov	r9, r4
   bb34c:	4576      	cmp	r6, lr
   bb34e:	46f4      	mov	ip, lr
   bb350:	d815      	bhi.n	bb37e <rshift+0x7e>
   bb352:	1a9a      	subs	r2, r3, r2
   bb354:	0092      	lsls	r2, r2, #2
   bb356:	3a04      	subs	r2, #4
   bb358:	3501      	adds	r5, #1
   bb35a:	42ae      	cmp	r6, r5
   bb35c:	bf38      	it	cc
   bb35e:	2200      	movcc	r2, #0
   bb360:	18a3      	adds	r3, r4, r2
   bb362:	50a7      	str	r7, [r4, r2]
   bb364:	b107      	cbz	r7, bb368 <rshift+0x68>
   bb366:	3304      	adds	r3, #4
   bb368:	1b1a      	subs	r2, r3, r4
   bb36a:	42a3      	cmp	r3, r4
   bb36c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb370:	bf08      	it	eq
   bb372:	2300      	moveq	r3, #0
   bb374:	6102      	str	r2, [r0, #16]
   bb376:	bf08      	it	eq
   bb378:	6143      	streq	r3, [r0, #20]
   bb37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb37e:	f8dc c000 	ldr.w	ip, [ip]
   bb382:	fa0c fc08 	lsl.w	ip, ip, r8
   bb386:	ea4c 0707 	orr.w	r7, ip, r7
   bb38a:	f849 7b04 	str.w	r7, [r9], #4
   bb38e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb392:	40cf      	lsrs	r7, r1
   bb394:	e7da      	b.n	bb34c <rshift+0x4c>
   bb396:	f851 cb04 	ldr.w	ip, [r1], #4
   bb39a:	f847 cf04 	str.w	ip, [r7, #4]!
   bb39e:	e7c3      	b.n	bb328 <rshift+0x28>
   bb3a0:	4623      	mov	r3, r4
   bb3a2:	e7e1      	b.n	bb368 <rshift+0x68>

000bb3a4 <__hexdig_fun>:
   bb3a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb3a8:	2b09      	cmp	r3, #9
   bb3aa:	d802      	bhi.n	bb3b2 <__hexdig_fun+0xe>
   bb3ac:	3820      	subs	r0, #32
   bb3ae:	b2c0      	uxtb	r0, r0
   bb3b0:	4770      	bx	lr
   bb3b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb3b6:	2b05      	cmp	r3, #5
   bb3b8:	d801      	bhi.n	bb3be <__hexdig_fun+0x1a>
   bb3ba:	3847      	subs	r0, #71	; 0x47
   bb3bc:	e7f7      	b.n	bb3ae <__hexdig_fun+0xa>
   bb3be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb3c2:	2b05      	cmp	r3, #5
   bb3c4:	d801      	bhi.n	bb3ca <__hexdig_fun+0x26>
   bb3c6:	3827      	subs	r0, #39	; 0x27
   bb3c8:	e7f1      	b.n	bb3ae <__hexdig_fun+0xa>
   bb3ca:	2000      	movs	r0, #0
   bb3cc:	4770      	bx	lr
	...

000bb3d0 <__gethex>:
   bb3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3d4:	ed2d 8b02 	vpush	{d8}
   bb3d8:	b089      	sub	sp, #36	; 0x24
   bb3da:	ee08 0a10 	vmov	s16, r0
   bb3de:	9304      	str	r3, [sp, #16]
   bb3e0:	4bb4      	ldr	r3, [pc, #720]	; (bb6b4 <__gethex+0x2e4>)
   bb3e2:	681b      	ldr	r3, [r3, #0]
   bb3e4:	9301      	str	r3, [sp, #4]
   bb3e6:	4618      	mov	r0, r3
   bb3e8:	468b      	mov	fp, r1
   bb3ea:	4690      	mov	r8, r2
   bb3ec:	f7fe ffcf 	bl	ba38e <strlen>
   bb3f0:	9b01      	ldr	r3, [sp, #4]
   bb3f2:	f8db 2000 	ldr.w	r2, [fp]
   bb3f6:	4403      	add	r3, r0
   bb3f8:	4682      	mov	sl, r0
   bb3fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb3fe:	9305      	str	r3, [sp, #20]
   bb400:	1c93      	adds	r3, r2, #2
   bb402:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb406:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb40a:	32fe      	adds	r2, #254	; 0xfe
   bb40c:	18d1      	adds	r1, r2, r3
   bb40e:	461f      	mov	r7, r3
   bb410:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb414:	9100      	str	r1, [sp, #0]
   bb416:	2830      	cmp	r0, #48	; 0x30
   bb418:	d0f8      	beq.n	bb40c <__gethex+0x3c>
   bb41a:	f7ff ffc3 	bl	bb3a4 <__hexdig_fun>
   bb41e:	4604      	mov	r4, r0
   bb420:	2800      	cmp	r0, #0
   bb422:	d13a      	bne.n	bb49a <__gethex+0xca>
   bb424:	9901      	ldr	r1, [sp, #4]
   bb426:	4652      	mov	r2, sl
   bb428:	4638      	mov	r0, r7
   bb42a:	f7fe ffb8 	bl	ba39e <strncmp>
   bb42e:	4605      	mov	r5, r0
   bb430:	2800      	cmp	r0, #0
   bb432:	d168      	bne.n	bb506 <__gethex+0x136>
   bb434:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb438:	eb07 060a 	add.w	r6, r7, sl
   bb43c:	f7ff ffb2 	bl	bb3a4 <__hexdig_fun>
   bb440:	2800      	cmp	r0, #0
   bb442:	d062      	beq.n	bb50a <__gethex+0x13a>
   bb444:	4633      	mov	r3, r6
   bb446:	7818      	ldrb	r0, [r3, #0]
   bb448:	2830      	cmp	r0, #48	; 0x30
   bb44a:	461f      	mov	r7, r3
   bb44c:	f103 0301 	add.w	r3, r3, #1
   bb450:	d0f9      	beq.n	bb446 <__gethex+0x76>
   bb452:	f7ff ffa7 	bl	bb3a4 <__hexdig_fun>
   bb456:	2301      	movs	r3, #1
   bb458:	fab0 f480 	clz	r4, r0
   bb45c:	0964      	lsrs	r4, r4, #5
   bb45e:	4635      	mov	r5, r6
   bb460:	9300      	str	r3, [sp, #0]
   bb462:	463a      	mov	r2, r7
   bb464:	4616      	mov	r6, r2
   bb466:	3201      	adds	r2, #1
   bb468:	7830      	ldrb	r0, [r6, #0]
   bb46a:	f7ff ff9b 	bl	bb3a4 <__hexdig_fun>
   bb46e:	2800      	cmp	r0, #0
   bb470:	d1f8      	bne.n	bb464 <__gethex+0x94>
   bb472:	9901      	ldr	r1, [sp, #4]
   bb474:	4652      	mov	r2, sl
   bb476:	4630      	mov	r0, r6
   bb478:	f7fe ff91 	bl	ba39e <strncmp>
   bb47c:	b980      	cbnz	r0, bb4a0 <__gethex+0xd0>
   bb47e:	b94d      	cbnz	r5, bb494 <__gethex+0xc4>
   bb480:	eb06 050a 	add.w	r5, r6, sl
   bb484:	462a      	mov	r2, r5
   bb486:	4616      	mov	r6, r2
   bb488:	3201      	adds	r2, #1
   bb48a:	7830      	ldrb	r0, [r6, #0]
   bb48c:	f7ff ff8a 	bl	bb3a4 <__hexdig_fun>
   bb490:	2800      	cmp	r0, #0
   bb492:	d1f8      	bne.n	bb486 <__gethex+0xb6>
   bb494:	1bad      	subs	r5, r5, r6
   bb496:	00ad      	lsls	r5, r5, #2
   bb498:	e004      	b.n	bb4a4 <__gethex+0xd4>
   bb49a:	2400      	movs	r4, #0
   bb49c:	4625      	mov	r5, r4
   bb49e:	e7e0      	b.n	bb462 <__gethex+0x92>
   bb4a0:	2d00      	cmp	r5, #0
   bb4a2:	d1f7      	bne.n	bb494 <__gethex+0xc4>
   bb4a4:	7833      	ldrb	r3, [r6, #0]
   bb4a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb4aa:	2b50      	cmp	r3, #80	; 0x50
   bb4ac:	d13b      	bne.n	bb526 <__gethex+0x156>
   bb4ae:	7873      	ldrb	r3, [r6, #1]
   bb4b0:	2b2b      	cmp	r3, #43	; 0x2b
   bb4b2:	d02c      	beq.n	bb50e <__gethex+0x13e>
   bb4b4:	2b2d      	cmp	r3, #45	; 0x2d
   bb4b6:	d02e      	beq.n	bb516 <__gethex+0x146>
   bb4b8:	1c71      	adds	r1, r6, #1
   bb4ba:	f04f 0900 	mov.w	r9, #0
   bb4be:	7808      	ldrb	r0, [r1, #0]
   bb4c0:	f7ff ff70 	bl	bb3a4 <__hexdig_fun>
   bb4c4:	1e43      	subs	r3, r0, #1
   bb4c6:	b2db      	uxtb	r3, r3
   bb4c8:	2b18      	cmp	r3, #24
   bb4ca:	d82c      	bhi.n	bb526 <__gethex+0x156>
   bb4cc:	f1a0 0210 	sub.w	r2, r0, #16
   bb4d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb4d4:	f7ff ff66 	bl	bb3a4 <__hexdig_fun>
   bb4d8:	1e43      	subs	r3, r0, #1
   bb4da:	b2db      	uxtb	r3, r3
   bb4dc:	2b18      	cmp	r3, #24
   bb4de:	d91d      	bls.n	bb51c <__gethex+0x14c>
   bb4e0:	f1b9 0f00 	cmp.w	r9, #0
   bb4e4:	d000      	beq.n	bb4e8 <__gethex+0x118>
   bb4e6:	4252      	negs	r2, r2
   bb4e8:	4415      	add	r5, r2
   bb4ea:	f8cb 1000 	str.w	r1, [fp]
   bb4ee:	b1e4      	cbz	r4, bb52a <__gethex+0x15a>
   bb4f0:	9b00      	ldr	r3, [sp, #0]
   bb4f2:	2b00      	cmp	r3, #0
   bb4f4:	bf14      	ite	ne
   bb4f6:	2700      	movne	r7, #0
   bb4f8:	2706      	moveq	r7, #6
   bb4fa:	4638      	mov	r0, r7
   bb4fc:	b009      	add	sp, #36	; 0x24
   bb4fe:	ecbd 8b02 	vpop	{d8}
   bb502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb506:	463e      	mov	r6, r7
   bb508:	4625      	mov	r5, r4
   bb50a:	2401      	movs	r4, #1
   bb50c:	e7ca      	b.n	bb4a4 <__gethex+0xd4>
   bb50e:	f04f 0900 	mov.w	r9, #0
   bb512:	1cb1      	adds	r1, r6, #2
   bb514:	e7d3      	b.n	bb4be <__gethex+0xee>
   bb516:	f04f 0901 	mov.w	r9, #1
   bb51a:	e7fa      	b.n	bb512 <__gethex+0x142>
   bb51c:	230a      	movs	r3, #10
   bb51e:	fb03 0202 	mla	r2, r3, r2, r0
   bb522:	3a10      	subs	r2, #16
   bb524:	e7d4      	b.n	bb4d0 <__gethex+0x100>
   bb526:	4631      	mov	r1, r6
   bb528:	e7df      	b.n	bb4ea <__gethex+0x11a>
   bb52a:	1bf3      	subs	r3, r6, r7
   bb52c:	3b01      	subs	r3, #1
   bb52e:	4621      	mov	r1, r4
   bb530:	2b07      	cmp	r3, #7
   bb532:	dc0b      	bgt.n	bb54c <__gethex+0x17c>
   bb534:	ee18 0a10 	vmov	r0, s16
   bb538:	f000 fa68 	bl	bba0c <_Balloc>
   bb53c:	4604      	mov	r4, r0
   bb53e:	b940      	cbnz	r0, bb552 <__gethex+0x182>
   bb540:	4b5d      	ldr	r3, [pc, #372]	; (bb6b8 <__gethex+0x2e8>)
   bb542:	4602      	mov	r2, r0
   bb544:	21de      	movs	r1, #222	; 0xde
   bb546:	485d      	ldr	r0, [pc, #372]	; (bb6bc <__gethex+0x2ec>)
   bb548:	f7fb f836 	bl	b65b8 <__assert_func>
   bb54c:	3101      	adds	r1, #1
   bb54e:	105b      	asrs	r3, r3, #1
   bb550:	e7ee      	b.n	bb530 <__gethex+0x160>
   bb552:	f100 0914 	add.w	r9, r0, #20
   bb556:	f04f 0b00 	mov.w	fp, #0
   bb55a:	f1ca 0301 	rsb	r3, sl, #1
   bb55e:	f8cd 9008 	str.w	r9, [sp, #8]
   bb562:	f8cd b000 	str.w	fp, [sp]
   bb566:	9306      	str	r3, [sp, #24]
   bb568:	42b7      	cmp	r7, r6
   bb56a:	d340      	bcc.n	bb5ee <__gethex+0x21e>
   bb56c:	9802      	ldr	r0, [sp, #8]
   bb56e:	9b00      	ldr	r3, [sp, #0]
   bb570:	f840 3b04 	str.w	r3, [r0], #4
   bb574:	eba0 0009 	sub.w	r0, r0, r9
   bb578:	1080      	asrs	r0, r0, #2
   bb57a:	0146      	lsls	r6, r0, #5
   bb57c:	6120      	str	r0, [r4, #16]
   bb57e:	4618      	mov	r0, r3
   bb580:	f000 fb36 	bl	bbbf0 <__hi0bits>
   bb584:	1a30      	subs	r0, r6, r0
   bb586:	f8d8 6000 	ldr.w	r6, [r8]
   bb58a:	42b0      	cmp	r0, r6
   bb58c:	dd63      	ble.n	bb656 <__gethex+0x286>
   bb58e:	1b87      	subs	r7, r0, r6
   bb590:	4639      	mov	r1, r7
   bb592:	4620      	mov	r0, r4
   bb594:	f000 feda 	bl	bc34c <__any_on>
   bb598:	4682      	mov	sl, r0
   bb59a:	b1a8      	cbz	r0, bb5c8 <__gethex+0x1f8>
   bb59c:	1e7b      	subs	r3, r7, #1
   bb59e:	1159      	asrs	r1, r3, #5
   bb5a0:	f003 021f 	and.w	r2, r3, #31
   bb5a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb5a8:	f04f 0a01 	mov.w	sl, #1
   bb5ac:	fa0a f202 	lsl.w	r2, sl, r2
   bb5b0:	420a      	tst	r2, r1
   bb5b2:	d009      	beq.n	bb5c8 <__gethex+0x1f8>
   bb5b4:	4553      	cmp	r3, sl
   bb5b6:	dd05      	ble.n	bb5c4 <__gethex+0x1f4>
   bb5b8:	1eb9      	subs	r1, r7, #2
   bb5ba:	4620      	mov	r0, r4
   bb5bc:	f000 fec6 	bl	bc34c <__any_on>
   bb5c0:	2800      	cmp	r0, #0
   bb5c2:	d145      	bne.n	bb650 <__gethex+0x280>
   bb5c4:	f04f 0a02 	mov.w	sl, #2
   bb5c8:	4639      	mov	r1, r7
   bb5ca:	4620      	mov	r0, r4
   bb5cc:	f7ff fe98 	bl	bb300 <rshift>
   bb5d0:	443d      	add	r5, r7
   bb5d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb5d6:	42ab      	cmp	r3, r5
   bb5d8:	da4c      	bge.n	bb674 <__gethex+0x2a4>
   bb5da:	ee18 0a10 	vmov	r0, s16
   bb5de:	4621      	mov	r1, r4
   bb5e0:	f000 fa54 	bl	bba8c <_Bfree>
   bb5e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb5e6:	2300      	movs	r3, #0
   bb5e8:	6013      	str	r3, [r2, #0]
   bb5ea:	27a3      	movs	r7, #163	; 0xa3
   bb5ec:	e785      	b.n	bb4fa <__gethex+0x12a>
   bb5ee:	1e73      	subs	r3, r6, #1
   bb5f0:	9a05      	ldr	r2, [sp, #20]
   bb5f2:	9303      	str	r3, [sp, #12]
   bb5f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb5f8:	4293      	cmp	r3, r2
   bb5fa:	d019      	beq.n	bb630 <__gethex+0x260>
   bb5fc:	f1bb 0f20 	cmp.w	fp, #32
   bb600:	d107      	bne.n	bb612 <__gethex+0x242>
   bb602:	9b02      	ldr	r3, [sp, #8]
   bb604:	9a00      	ldr	r2, [sp, #0]
   bb606:	f843 2b04 	str.w	r2, [r3], #4
   bb60a:	9302      	str	r3, [sp, #8]
   bb60c:	2300      	movs	r3, #0
   bb60e:	9300      	str	r3, [sp, #0]
   bb610:	469b      	mov	fp, r3
   bb612:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb616:	f7ff fec5 	bl	bb3a4 <__hexdig_fun>
   bb61a:	9b00      	ldr	r3, [sp, #0]
   bb61c:	f000 000f 	and.w	r0, r0, #15
   bb620:	fa00 f00b 	lsl.w	r0, r0, fp
   bb624:	4303      	orrs	r3, r0
   bb626:	9300      	str	r3, [sp, #0]
   bb628:	f10b 0b04 	add.w	fp, fp, #4
   bb62c:	9b03      	ldr	r3, [sp, #12]
   bb62e:	e00d      	b.n	bb64c <__gethex+0x27c>
   bb630:	9b03      	ldr	r3, [sp, #12]
   bb632:	9a06      	ldr	r2, [sp, #24]
   bb634:	4413      	add	r3, r2
   bb636:	42bb      	cmp	r3, r7
   bb638:	d3e0      	bcc.n	bb5fc <__gethex+0x22c>
   bb63a:	4618      	mov	r0, r3
   bb63c:	9901      	ldr	r1, [sp, #4]
   bb63e:	9307      	str	r3, [sp, #28]
   bb640:	4652      	mov	r2, sl
   bb642:	f7fe feac 	bl	ba39e <strncmp>
   bb646:	9b07      	ldr	r3, [sp, #28]
   bb648:	2800      	cmp	r0, #0
   bb64a:	d1d7      	bne.n	bb5fc <__gethex+0x22c>
   bb64c:	461e      	mov	r6, r3
   bb64e:	e78b      	b.n	bb568 <__gethex+0x198>
   bb650:	f04f 0a03 	mov.w	sl, #3
   bb654:	e7b8      	b.n	bb5c8 <__gethex+0x1f8>
   bb656:	da0a      	bge.n	bb66e <__gethex+0x29e>
   bb658:	1a37      	subs	r7, r6, r0
   bb65a:	4621      	mov	r1, r4
   bb65c:	ee18 0a10 	vmov	r0, s16
   bb660:	463a      	mov	r2, r7
   bb662:	f000 fc2f 	bl	bbec4 <__lshift>
   bb666:	1bed      	subs	r5, r5, r7
   bb668:	4604      	mov	r4, r0
   bb66a:	f100 0914 	add.w	r9, r0, #20
   bb66e:	f04f 0a00 	mov.w	sl, #0
   bb672:	e7ae      	b.n	bb5d2 <__gethex+0x202>
   bb674:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb678:	42a8      	cmp	r0, r5
   bb67a:	dd72      	ble.n	bb762 <__gethex+0x392>
   bb67c:	1b45      	subs	r5, r0, r5
   bb67e:	42ae      	cmp	r6, r5
   bb680:	dc36      	bgt.n	bb6f0 <__gethex+0x320>
   bb682:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb686:	2b02      	cmp	r3, #2
   bb688:	d02a      	beq.n	bb6e0 <__gethex+0x310>
   bb68a:	2b03      	cmp	r3, #3
   bb68c:	d02c      	beq.n	bb6e8 <__gethex+0x318>
   bb68e:	2b01      	cmp	r3, #1
   bb690:	d11c      	bne.n	bb6cc <__gethex+0x2fc>
   bb692:	42ae      	cmp	r6, r5
   bb694:	d11a      	bne.n	bb6cc <__gethex+0x2fc>
   bb696:	2e01      	cmp	r6, #1
   bb698:	d112      	bne.n	bb6c0 <__gethex+0x2f0>
   bb69a:	9a04      	ldr	r2, [sp, #16]
   bb69c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb6a0:	6013      	str	r3, [r2, #0]
   bb6a2:	2301      	movs	r3, #1
   bb6a4:	6123      	str	r3, [r4, #16]
   bb6a6:	f8c9 3000 	str.w	r3, [r9]
   bb6aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb6ac:	2762      	movs	r7, #98	; 0x62
   bb6ae:	601c      	str	r4, [r3, #0]
   bb6b0:	e723      	b.n	bb4fa <__gethex+0x12a>
   bb6b2:	bf00      	nop
   bb6b4:	000bd4a8 	.word	0x000bd4a8
   bb6b8:	000bd40f 	.word	0x000bd40f
   bb6bc:	000bd420 	.word	0x000bd420
   bb6c0:	1e71      	subs	r1, r6, #1
   bb6c2:	4620      	mov	r0, r4
   bb6c4:	f000 fe42 	bl	bc34c <__any_on>
   bb6c8:	2800      	cmp	r0, #0
   bb6ca:	d1e6      	bne.n	bb69a <__gethex+0x2ca>
   bb6cc:	ee18 0a10 	vmov	r0, s16
   bb6d0:	4621      	mov	r1, r4
   bb6d2:	f000 f9db 	bl	bba8c <_Bfree>
   bb6d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb6d8:	2300      	movs	r3, #0
   bb6da:	6013      	str	r3, [r2, #0]
   bb6dc:	2750      	movs	r7, #80	; 0x50
   bb6de:	e70c      	b.n	bb4fa <__gethex+0x12a>
   bb6e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb6e2:	2b00      	cmp	r3, #0
   bb6e4:	d1f2      	bne.n	bb6cc <__gethex+0x2fc>
   bb6e6:	e7d8      	b.n	bb69a <__gethex+0x2ca>
   bb6e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb6ea:	2b00      	cmp	r3, #0
   bb6ec:	d1d5      	bne.n	bb69a <__gethex+0x2ca>
   bb6ee:	e7ed      	b.n	bb6cc <__gethex+0x2fc>
   bb6f0:	1e6f      	subs	r7, r5, #1
   bb6f2:	f1ba 0f00 	cmp.w	sl, #0
   bb6f6:	d131      	bne.n	bb75c <__gethex+0x38c>
   bb6f8:	b127      	cbz	r7, bb704 <__gethex+0x334>
   bb6fa:	4639      	mov	r1, r7
   bb6fc:	4620      	mov	r0, r4
   bb6fe:	f000 fe25 	bl	bc34c <__any_on>
   bb702:	4682      	mov	sl, r0
   bb704:	117b      	asrs	r3, r7, #5
   bb706:	2101      	movs	r1, #1
   bb708:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb70c:	f007 071f 	and.w	r7, r7, #31
   bb710:	fa01 f707 	lsl.w	r7, r1, r7
   bb714:	421f      	tst	r7, r3
   bb716:	4629      	mov	r1, r5
   bb718:	4620      	mov	r0, r4
   bb71a:	bf18      	it	ne
   bb71c:	f04a 0a02 	orrne.w	sl, sl, #2
   bb720:	1b76      	subs	r6, r6, r5
   bb722:	f7ff fded 	bl	bb300 <rshift>
   bb726:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb72a:	2702      	movs	r7, #2
   bb72c:	f1ba 0f00 	cmp.w	sl, #0
   bb730:	d048      	beq.n	bb7c4 <__gethex+0x3f4>
   bb732:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb736:	2b02      	cmp	r3, #2
   bb738:	d015      	beq.n	bb766 <__gethex+0x396>
   bb73a:	2b03      	cmp	r3, #3
   bb73c:	d017      	beq.n	bb76e <__gethex+0x39e>
   bb73e:	2b01      	cmp	r3, #1
   bb740:	d109      	bne.n	bb756 <__gethex+0x386>
   bb742:	f01a 0f02 	tst.w	sl, #2
   bb746:	d006      	beq.n	bb756 <__gethex+0x386>
   bb748:	f8d9 0000 	ldr.w	r0, [r9]
   bb74c:	ea4a 0a00 	orr.w	sl, sl, r0
   bb750:	f01a 0f01 	tst.w	sl, #1
   bb754:	d10e      	bne.n	bb774 <__gethex+0x3a4>
   bb756:	f047 0710 	orr.w	r7, r7, #16
   bb75a:	e033      	b.n	bb7c4 <__gethex+0x3f4>
   bb75c:	f04f 0a01 	mov.w	sl, #1
   bb760:	e7d0      	b.n	bb704 <__gethex+0x334>
   bb762:	2701      	movs	r7, #1
   bb764:	e7e2      	b.n	bb72c <__gethex+0x35c>
   bb766:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb768:	f1c3 0301 	rsb	r3, r3, #1
   bb76c:	9315      	str	r3, [sp, #84]	; 0x54
   bb76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb770:	2b00      	cmp	r3, #0
   bb772:	d0f0      	beq.n	bb756 <__gethex+0x386>
   bb774:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb778:	f104 0314 	add.w	r3, r4, #20
   bb77c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb780:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb784:	f04f 0c00 	mov.w	ip, #0
   bb788:	4618      	mov	r0, r3
   bb78a:	f853 2b04 	ldr.w	r2, [r3], #4
   bb78e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bb792:	d01c      	beq.n	bb7ce <__gethex+0x3fe>
   bb794:	3201      	adds	r2, #1
   bb796:	6002      	str	r2, [r0, #0]
   bb798:	2f02      	cmp	r7, #2
   bb79a:	f104 0314 	add.w	r3, r4, #20
   bb79e:	d13f      	bne.n	bb820 <__gethex+0x450>
   bb7a0:	f8d8 2000 	ldr.w	r2, [r8]
   bb7a4:	3a01      	subs	r2, #1
   bb7a6:	42b2      	cmp	r2, r6
   bb7a8:	d10a      	bne.n	bb7c0 <__gethex+0x3f0>
   bb7aa:	1171      	asrs	r1, r6, #5
   bb7ac:	2201      	movs	r2, #1
   bb7ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb7b2:	f006 061f 	and.w	r6, r6, #31
   bb7b6:	fa02 f606 	lsl.w	r6, r2, r6
   bb7ba:	421e      	tst	r6, r3
   bb7bc:	bf18      	it	ne
   bb7be:	4617      	movne	r7, r2
   bb7c0:	f047 0720 	orr.w	r7, r7, #32
   bb7c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb7c6:	601c      	str	r4, [r3, #0]
   bb7c8:	9b04      	ldr	r3, [sp, #16]
   bb7ca:	601d      	str	r5, [r3, #0]
   bb7cc:	e695      	b.n	bb4fa <__gethex+0x12a>
   bb7ce:	4299      	cmp	r1, r3
   bb7d0:	f843 cc04 	str.w	ip, [r3, #-4]
   bb7d4:	d8d8      	bhi.n	bb788 <__gethex+0x3b8>
   bb7d6:	68a3      	ldr	r3, [r4, #8]
   bb7d8:	459b      	cmp	fp, r3
   bb7da:	db19      	blt.n	bb810 <__gethex+0x440>
   bb7dc:	6861      	ldr	r1, [r4, #4]
   bb7de:	ee18 0a10 	vmov	r0, s16
   bb7e2:	3101      	adds	r1, #1
   bb7e4:	f000 f912 	bl	bba0c <_Balloc>
   bb7e8:	4681      	mov	r9, r0
   bb7ea:	b918      	cbnz	r0, bb7f4 <__gethex+0x424>
   bb7ec:	4b1a      	ldr	r3, [pc, #104]	; (bb858 <__gethex+0x488>)
   bb7ee:	4602      	mov	r2, r0
   bb7f0:	2184      	movs	r1, #132	; 0x84
   bb7f2:	e6a8      	b.n	bb546 <__gethex+0x176>
   bb7f4:	6922      	ldr	r2, [r4, #16]
   bb7f6:	3202      	adds	r2, #2
   bb7f8:	f104 010c 	add.w	r1, r4, #12
   bb7fc:	0092      	lsls	r2, r2, #2
   bb7fe:	300c      	adds	r0, #12
   bb800:	f7fe fd27 	bl	ba252 <memcpy>
   bb804:	4621      	mov	r1, r4
   bb806:	ee18 0a10 	vmov	r0, s16
   bb80a:	f000 f93f 	bl	bba8c <_Bfree>
   bb80e:	464c      	mov	r4, r9
   bb810:	6923      	ldr	r3, [r4, #16]
   bb812:	1c5a      	adds	r2, r3, #1
   bb814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb818:	6122      	str	r2, [r4, #16]
   bb81a:	2201      	movs	r2, #1
   bb81c:	615a      	str	r2, [r3, #20]
   bb81e:	e7bb      	b.n	bb798 <__gethex+0x3c8>
   bb820:	6922      	ldr	r2, [r4, #16]
   bb822:	455a      	cmp	r2, fp
   bb824:	dd0b      	ble.n	bb83e <__gethex+0x46e>
   bb826:	2101      	movs	r1, #1
   bb828:	4620      	mov	r0, r4
   bb82a:	f7ff fd69 	bl	bb300 <rshift>
   bb82e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb832:	3501      	adds	r5, #1
   bb834:	42ab      	cmp	r3, r5
   bb836:	f6ff aed0 	blt.w	bb5da <__gethex+0x20a>
   bb83a:	2701      	movs	r7, #1
   bb83c:	e7c0      	b.n	bb7c0 <__gethex+0x3f0>
   bb83e:	f016 061f 	ands.w	r6, r6, #31
   bb842:	d0fa      	beq.n	bb83a <__gethex+0x46a>
   bb844:	4453      	add	r3, sl
   bb846:	f1c6 0620 	rsb	r6, r6, #32
   bb84a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb84e:	f000 f9cf 	bl	bbbf0 <__hi0bits>
   bb852:	42b0      	cmp	r0, r6
   bb854:	dbe7      	blt.n	bb826 <__gethex+0x456>
   bb856:	e7f0      	b.n	bb83a <__gethex+0x46a>
   bb858:	000bd40f 	.word	0x000bd40f

000bb85c <L_shift>:
   bb85c:	f1c2 0208 	rsb	r2, r2, #8
   bb860:	0092      	lsls	r2, r2, #2
   bb862:	b570      	push	{r4, r5, r6, lr}
   bb864:	f1c2 0620 	rsb	r6, r2, #32
   bb868:	6843      	ldr	r3, [r0, #4]
   bb86a:	6804      	ldr	r4, [r0, #0]
   bb86c:	fa03 f506 	lsl.w	r5, r3, r6
   bb870:	432c      	orrs	r4, r5
   bb872:	40d3      	lsrs	r3, r2
   bb874:	6004      	str	r4, [r0, #0]
   bb876:	f840 3f04 	str.w	r3, [r0, #4]!
   bb87a:	4288      	cmp	r0, r1
   bb87c:	d3f4      	bcc.n	bb868 <L_shift+0xc>
   bb87e:	bd70      	pop	{r4, r5, r6, pc}

000bb880 <__match>:
   bb880:	b530      	push	{r4, r5, lr}
   bb882:	6803      	ldr	r3, [r0, #0]
   bb884:	3301      	adds	r3, #1
   bb886:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb88a:	b914      	cbnz	r4, bb892 <__match+0x12>
   bb88c:	6003      	str	r3, [r0, #0]
   bb88e:	2001      	movs	r0, #1
   bb890:	bd30      	pop	{r4, r5, pc}
   bb892:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb896:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb89a:	2d19      	cmp	r5, #25
   bb89c:	bf98      	it	ls
   bb89e:	3220      	addls	r2, #32
   bb8a0:	42a2      	cmp	r2, r4
   bb8a2:	d0f0      	beq.n	bb886 <__match+0x6>
   bb8a4:	2000      	movs	r0, #0
   bb8a6:	e7f3      	b.n	bb890 <__match+0x10>

000bb8a8 <__hexnan>:
   bb8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb8ac:	680b      	ldr	r3, [r1, #0]
   bb8ae:	115e      	asrs	r6, r3, #5
   bb8b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb8b4:	f013 031f 	ands.w	r3, r3, #31
   bb8b8:	b087      	sub	sp, #28
   bb8ba:	bf18      	it	ne
   bb8bc:	3604      	addne	r6, #4
   bb8be:	2500      	movs	r5, #0
   bb8c0:	1f37      	subs	r7, r6, #4
   bb8c2:	4690      	mov	r8, r2
   bb8c4:	6802      	ldr	r2, [r0, #0]
   bb8c6:	9301      	str	r3, [sp, #4]
   bb8c8:	4682      	mov	sl, r0
   bb8ca:	f846 5c04 	str.w	r5, [r6, #-4]
   bb8ce:	46b9      	mov	r9, r7
   bb8d0:	463c      	mov	r4, r7
   bb8d2:	9502      	str	r5, [sp, #8]
   bb8d4:	46ab      	mov	fp, r5
   bb8d6:	7851      	ldrb	r1, [r2, #1]
   bb8d8:	1c53      	adds	r3, r2, #1
   bb8da:	9303      	str	r3, [sp, #12]
   bb8dc:	b341      	cbz	r1, bb930 <__hexnan+0x88>
   bb8de:	4608      	mov	r0, r1
   bb8e0:	9205      	str	r2, [sp, #20]
   bb8e2:	9104      	str	r1, [sp, #16]
   bb8e4:	f7ff fd5e 	bl	bb3a4 <__hexdig_fun>
   bb8e8:	2800      	cmp	r0, #0
   bb8ea:	d14f      	bne.n	bb98c <__hexnan+0xe4>
   bb8ec:	9904      	ldr	r1, [sp, #16]
   bb8ee:	9a05      	ldr	r2, [sp, #20]
   bb8f0:	2920      	cmp	r1, #32
   bb8f2:	d818      	bhi.n	bb926 <__hexnan+0x7e>
   bb8f4:	9b02      	ldr	r3, [sp, #8]
   bb8f6:	459b      	cmp	fp, r3
   bb8f8:	dd13      	ble.n	bb922 <__hexnan+0x7a>
   bb8fa:	454c      	cmp	r4, r9
   bb8fc:	d206      	bcs.n	bb90c <__hexnan+0x64>
   bb8fe:	2d07      	cmp	r5, #7
   bb900:	dc04      	bgt.n	bb90c <__hexnan+0x64>
   bb902:	462a      	mov	r2, r5
   bb904:	4649      	mov	r1, r9
   bb906:	4620      	mov	r0, r4
   bb908:	f7ff ffa8 	bl	bb85c <L_shift>
   bb90c:	4544      	cmp	r4, r8
   bb90e:	d950      	bls.n	bb9b2 <__hexnan+0x10a>
   bb910:	2300      	movs	r3, #0
   bb912:	f1a4 0904 	sub.w	r9, r4, #4
   bb916:	f844 3c04 	str.w	r3, [r4, #-4]
   bb91a:	f8cd b008 	str.w	fp, [sp, #8]
   bb91e:	464c      	mov	r4, r9
   bb920:	461d      	mov	r5, r3
   bb922:	9a03      	ldr	r2, [sp, #12]
   bb924:	e7d7      	b.n	bb8d6 <__hexnan+0x2e>
   bb926:	2929      	cmp	r1, #41	; 0x29
   bb928:	d156      	bne.n	bb9d8 <__hexnan+0x130>
   bb92a:	3202      	adds	r2, #2
   bb92c:	f8ca 2000 	str.w	r2, [sl]
   bb930:	f1bb 0f00 	cmp.w	fp, #0
   bb934:	d050      	beq.n	bb9d8 <__hexnan+0x130>
   bb936:	454c      	cmp	r4, r9
   bb938:	d206      	bcs.n	bb948 <__hexnan+0xa0>
   bb93a:	2d07      	cmp	r5, #7
   bb93c:	dc04      	bgt.n	bb948 <__hexnan+0xa0>
   bb93e:	462a      	mov	r2, r5
   bb940:	4649      	mov	r1, r9
   bb942:	4620      	mov	r0, r4
   bb944:	f7ff ff8a 	bl	bb85c <L_shift>
   bb948:	4544      	cmp	r4, r8
   bb94a:	d934      	bls.n	bb9b6 <__hexnan+0x10e>
   bb94c:	f1a8 0204 	sub.w	r2, r8, #4
   bb950:	4623      	mov	r3, r4
   bb952:	f853 1b04 	ldr.w	r1, [r3], #4
   bb956:	f842 1f04 	str.w	r1, [r2, #4]!
   bb95a:	429f      	cmp	r7, r3
   bb95c:	d2f9      	bcs.n	bb952 <__hexnan+0xaa>
   bb95e:	1b3b      	subs	r3, r7, r4
   bb960:	f023 0303 	bic.w	r3, r3, #3
   bb964:	3304      	adds	r3, #4
   bb966:	3401      	adds	r4, #1
   bb968:	3e03      	subs	r6, #3
   bb96a:	42b4      	cmp	r4, r6
   bb96c:	bf88      	it	hi
   bb96e:	2304      	movhi	r3, #4
   bb970:	4443      	add	r3, r8
   bb972:	2200      	movs	r2, #0
   bb974:	f843 2b04 	str.w	r2, [r3], #4
   bb978:	429f      	cmp	r7, r3
   bb97a:	d2fb      	bcs.n	bb974 <__hexnan+0xcc>
   bb97c:	683b      	ldr	r3, [r7, #0]
   bb97e:	b91b      	cbnz	r3, bb988 <__hexnan+0xe0>
   bb980:	4547      	cmp	r7, r8
   bb982:	d127      	bne.n	bb9d4 <__hexnan+0x12c>
   bb984:	2301      	movs	r3, #1
   bb986:	603b      	str	r3, [r7, #0]
   bb988:	2005      	movs	r0, #5
   bb98a:	e026      	b.n	bb9da <__hexnan+0x132>
   bb98c:	3501      	adds	r5, #1
   bb98e:	2d08      	cmp	r5, #8
   bb990:	f10b 0b01 	add.w	fp, fp, #1
   bb994:	dd06      	ble.n	bb9a4 <__hexnan+0xfc>
   bb996:	4544      	cmp	r4, r8
   bb998:	d9c3      	bls.n	bb922 <__hexnan+0x7a>
   bb99a:	2300      	movs	r3, #0
   bb99c:	f844 3c04 	str.w	r3, [r4, #-4]
   bb9a0:	2501      	movs	r5, #1
   bb9a2:	3c04      	subs	r4, #4
   bb9a4:	6822      	ldr	r2, [r4, #0]
   bb9a6:	f000 000f 	and.w	r0, r0, #15
   bb9aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb9ae:	6022      	str	r2, [r4, #0]
   bb9b0:	e7b7      	b.n	bb922 <__hexnan+0x7a>
   bb9b2:	2508      	movs	r5, #8
   bb9b4:	e7b5      	b.n	bb922 <__hexnan+0x7a>
   bb9b6:	9b01      	ldr	r3, [sp, #4]
   bb9b8:	2b00      	cmp	r3, #0
   bb9ba:	d0df      	beq.n	bb97c <__hexnan+0xd4>
   bb9bc:	f04f 32ff 	mov.w	r2, #4294967295
   bb9c0:	f1c3 0320 	rsb	r3, r3, #32
   bb9c4:	fa22 f303 	lsr.w	r3, r2, r3
   bb9c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb9cc:	401a      	ands	r2, r3
   bb9ce:	f846 2c04 	str.w	r2, [r6, #-4]
   bb9d2:	e7d3      	b.n	bb97c <__hexnan+0xd4>
   bb9d4:	3f04      	subs	r7, #4
   bb9d6:	e7d1      	b.n	bb97c <__hexnan+0xd4>
   bb9d8:	2004      	movs	r0, #4
   bb9da:	b007      	add	sp, #28
   bb9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb9e0 <__retarget_lock_acquire_recursive>:
   bb9e0:	4770      	bx	lr

000bb9e2 <__retarget_lock_release>:
   bb9e2:	4770      	bx	lr

000bb9e4 <__retarget_lock_release_recursive>:
   bb9e4:	4770      	bx	lr

000bb9e6 <__ascii_mbtowc>:
   bb9e6:	b082      	sub	sp, #8
   bb9e8:	b901      	cbnz	r1, bb9ec <__ascii_mbtowc+0x6>
   bb9ea:	a901      	add	r1, sp, #4
   bb9ec:	b142      	cbz	r2, bba00 <__ascii_mbtowc+0x1a>
   bb9ee:	b14b      	cbz	r3, bba04 <__ascii_mbtowc+0x1e>
   bb9f0:	7813      	ldrb	r3, [r2, #0]
   bb9f2:	600b      	str	r3, [r1, #0]
   bb9f4:	7812      	ldrb	r2, [r2, #0]
   bb9f6:	1e10      	subs	r0, r2, #0
   bb9f8:	bf18      	it	ne
   bb9fa:	2001      	movne	r0, #1
   bb9fc:	b002      	add	sp, #8
   bb9fe:	4770      	bx	lr
   bba00:	4610      	mov	r0, r2
   bba02:	e7fb      	b.n	bb9fc <__ascii_mbtowc+0x16>
   bba04:	f06f 0001 	mvn.w	r0, #1
   bba08:	e7f8      	b.n	bb9fc <__ascii_mbtowc+0x16>
	...

000bba0c <_Balloc>:
   bba0c:	b570      	push	{r4, r5, r6, lr}
   bba0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bba10:	4604      	mov	r4, r0
   bba12:	460d      	mov	r5, r1
   bba14:	b976      	cbnz	r6, bba34 <_Balloc+0x28>
   bba16:	2010      	movs	r0, #16
   bba18:	f7fa fd86 	bl	b6528 <malloc>
   bba1c:	4602      	mov	r2, r0
   bba1e:	6260      	str	r0, [r4, #36]	; 0x24
   bba20:	b920      	cbnz	r0, bba2c <_Balloc+0x20>
   bba22:	4b18      	ldr	r3, [pc, #96]	; (bba84 <_Balloc+0x78>)
   bba24:	4818      	ldr	r0, [pc, #96]	; (bba88 <_Balloc+0x7c>)
   bba26:	2166      	movs	r1, #102	; 0x66
   bba28:	f7fa fdc6 	bl	b65b8 <__assert_func>
   bba2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bba30:	6006      	str	r6, [r0, #0]
   bba32:	60c6      	str	r6, [r0, #12]
   bba34:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bba36:	68f3      	ldr	r3, [r6, #12]
   bba38:	b183      	cbz	r3, bba5c <_Balloc+0x50>
   bba3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bba3c:	68db      	ldr	r3, [r3, #12]
   bba3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bba42:	b9b8      	cbnz	r0, bba74 <_Balloc+0x68>
   bba44:	2101      	movs	r1, #1
   bba46:	fa01 f605 	lsl.w	r6, r1, r5
   bba4a:	1d72      	adds	r2, r6, #5
   bba4c:	0092      	lsls	r2, r2, #2
   bba4e:	4620      	mov	r0, r4
   bba50:	f000 fc9d 	bl	bc38e <_calloc_r>
   bba54:	b160      	cbz	r0, bba70 <_Balloc+0x64>
   bba56:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bba5a:	e00e      	b.n	bba7a <_Balloc+0x6e>
   bba5c:	2221      	movs	r2, #33	; 0x21
   bba5e:	2104      	movs	r1, #4
   bba60:	4620      	mov	r0, r4
   bba62:	f000 fc94 	bl	bc38e <_calloc_r>
   bba66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bba68:	60f0      	str	r0, [r6, #12]
   bba6a:	68db      	ldr	r3, [r3, #12]
   bba6c:	2b00      	cmp	r3, #0
   bba6e:	d1e4      	bne.n	bba3a <_Balloc+0x2e>
   bba70:	2000      	movs	r0, #0
   bba72:	bd70      	pop	{r4, r5, r6, pc}
   bba74:	6802      	ldr	r2, [r0, #0]
   bba76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bba7a:	2300      	movs	r3, #0
   bba7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bba80:	e7f7      	b.n	bba72 <_Balloc+0x66>
   bba82:	bf00      	nop
   bba84:	000bd29e 	.word	0x000bd29e
   bba88:	000bd4bc 	.word	0x000bd4bc

000bba8c <_Bfree>:
   bba8c:	b570      	push	{r4, r5, r6, lr}
   bba8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bba90:	4605      	mov	r5, r0
   bba92:	460c      	mov	r4, r1
   bba94:	b976      	cbnz	r6, bbab4 <_Bfree+0x28>
   bba96:	2010      	movs	r0, #16
   bba98:	f7fa fd46 	bl	b6528 <malloc>
   bba9c:	4602      	mov	r2, r0
   bba9e:	6268      	str	r0, [r5, #36]	; 0x24
   bbaa0:	b920      	cbnz	r0, bbaac <_Bfree+0x20>
   bbaa2:	4b09      	ldr	r3, [pc, #36]	; (bbac8 <_Bfree+0x3c>)
   bbaa4:	4809      	ldr	r0, [pc, #36]	; (bbacc <_Bfree+0x40>)
   bbaa6:	218a      	movs	r1, #138	; 0x8a
   bbaa8:	f7fa fd86 	bl	b65b8 <__assert_func>
   bbaac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbab0:	6006      	str	r6, [r0, #0]
   bbab2:	60c6      	str	r6, [r0, #12]
   bbab4:	b13c      	cbz	r4, bbac6 <_Bfree+0x3a>
   bbab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bbab8:	6862      	ldr	r2, [r4, #4]
   bbaba:	68db      	ldr	r3, [r3, #12]
   bbabc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bbac0:	6021      	str	r1, [r4, #0]
   bbac2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bbac6:	bd70      	pop	{r4, r5, r6, pc}
   bbac8:	000bd29e 	.word	0x000bd29e
   bbacc:	000bd4bc 	.word	0x000bd4bc

000bbad0 <__multadd>:
   bbad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbad4:	690d      	ldr	r5, [r1, #16]
   bbad6:	4607      	mov	r7, r0
   bbad8:	460c      	mov	r4, r1
   bbada:	461e      	mov	r6, r3
   bbadc:	f101 0c14 	add.w	ip, r1, #20
   bbae0:	2000      	movs	r0, #0
   bbae2:	f8dc 3000 	ldr.w	r3, [ip]
   bbae6:	b299      	uxth	r1, r3
   bbae8:	fb02 6101 	mla	r1, r2, r1, r6
   bbaec:	0c1e      	lsrs	r6, r3, #16
   bbaee:	0c0b      	lsrs	r3, r1, #16
   bbaf0:	fb02 3306 	mla	r3, r2, r6, r3
   bbaf4:	b289      	uxth	r1, r1
   bbaf6:	3001      	adds	r0, #1
   bbaf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bbafc:	4285      	cmp	r5, r0
   bbafe:	f84c 1b04 	str.w	r1, [ip], #4
   bbb02:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bbb06:	dcec      	bgt.n	bbae2 <__multadd+0x12>
   bbb08:	b30e      	cbz	r6, bbb4e <__multadd+0x7e>
   bbb0a:	68a3      	ldr	r3, [r4, #8]
   bbb0c:	42ab      	cmp	r3, r5
   bbb0e:	dc19      	bgt.n	bbb44 <__multadd+0x74>
   bbb10:	6861      	ldr	r1, [r4, #4]
   bbb12:	4638      	mov	r0, r7
   bbb14:	3101      	adds	r1, #1
   bbb16:	f7ff ff79 	bl	bba0c <_Balloc>
   bbb1a:	4680      	mov	r8, r0
   bbb1c:	b928      	cbnz	r0, bbb2a <__multadd+0x5a>
   bbb1e:	4602      	mov	r2, r0
   bbb20:	4b0c      	ldr	r3, [pc, #48]	; (bbb54 <__multadd+0x84>)
   bbb22:	480d      	ldr	r0, [pc, #52]	; (bbb58 <__multadd+0x88>)
   bbb24:	21b5      	movs	r1, #181	; 0xb5
   bbb26:	f7fa fd47 	bl	b65b8 <__assert_func>
   bbb2a:	6922      	ldr	r2, [r4, #16]
   bbb2c:	3202      	adds	r2, #2
   bbb2e:	f104 010c 	add.w	r1, r4, #12
   bbb32:	0092      	lsls	r2, r2, #2
   bbb34:	300c      	adds	r0, #12
   bbb36:	f7fe fb8c 	bl	ba252 <memcpy>
   bbb3a:	4621      	mov	r1, r4
   bbb3c:	4638      	mov	r0, r7
   bbb3e:	f7ff ffa5 	bl	bba8c <_Bfree>
   bbb42:	4644      	mov	r4, r8
   bbb44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bbb48:	3501      	adds	r5, #1
   bbb4a:	615e      	str	r6, [r3, #20]
   bbb4c:	6125      	str	r5, [r4, #16]
   bbb4e:	4620      	mov	r0, r4
   bbb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbb54:	000bd40f 	.word	0x000bd40f
   bbb58:	000bd4bc 	.word	0x000bd4bc

000bbb5c <__s2b>:
   bbb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbb60:	460c      	mov	r4, r1
   bbb62:	4615      	mov	r5, r2
   bbb64:	461f      	mov	r7, r3
   bbb66:	2209      	movs	r2, #9
   bbb68:	3308      	adds	r3, #8
   bbb6a:	4606      	mov	r6, r0
   bbb6c:	fb93 f3f2 	sdiv	r3, r3, r2
   bbb70:	2100      	movs	r1, #0
   bbb72:	2201      	movs	r2, #1
   bbb74:	429a      	cmp	r2, r3
   bbb76:	db09      	blt.n	bbb8c <__s2b+0x30>
   bbb78:	4630      	mov	r0, r6
   bbb7a:	f7ff ff47 	bl	bba0c <_Balloc>
   bbb7e:	b940      	cbnz	r0, bbb92 <__s2b+0x36>
   bbb80:	4602      	mov	r2, r0
   bbb82:	4b19      	ldr	r3, [pc, #100]	; (bbbe8 <__s2b+0x8c>)
   bbb84:	4819      	ldr	r0, [pc, #100]	; (bbbec <__s2b+0x90>)
   bbb86:	21ce      	movs	r1, #206	; 0xce
   bbb88:	f7fa fd16 	bl	b65b8 <__assert_func>
   bbb8c:	0052      	lsls	r2, r2, #1
   bbb8e:	3101      	adds	r1, #1
   bbb90:	e7f0      	b.n	bbb74 <__s2b+0x18>
   bbb92:	9b08      	ldr	r3, [sp, #32]
   bbb94:	6143      	str	r3, [r0, #20]
   bbb96:	2d09      	cmp	r5, #9
   bbb98:	f04f 0301 	mov.w	r3, #1
   bbb9c:	6103      	str	r3, [r0, #16]
   bbb9e:	dd16      	ble.n	bbbce <__s2b+0x72>
   bbba0:	f104 0909 	add.w	r9, r4, #9
   bbba4:	46c8      	mov	r8, r9
   bbba6:	442c      	add	r4, r5
   bbba8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bbbac:	4601      	mov	r1, r0
   bbbae:	3b30      	subs	r3, #48	; 0x30
   bbbb0:	220a      	movs	r2, #10
   bbbb2:	4630      	mov	r0, r6
   bbbb4:	f7ff ff8c 	bl	bbad0 <__multadd>
   bbbb8:	45a0      	cmp	r8, r4
   bbbba:	d1f5      	bne.n	bbba8 <__s2b+0x4c>
   bbbbc:	f1a5 0408 	sub.w	r4, r5, #8
   bbbc0:	444c      	add	r4, r9
   bbbc2:	1b2d      	subs	r5, r5, r4
   bbbc4:	1963      	adds	r3, r4, r5
   bbbc6:	42bb      	cmp	r3, r7
   bbbc8:	db04      	blt.n	bbbd4 <__s2b+0x78>
   bbbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbbce:	340a      	adds	r4, #10
   bbbd0:	2509      	movs	r5, #9
   bbbd2:	e7f6      	b.n	bbbc2 <__s2b+0x66>
   bbbd4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbbd8:	4601      	mov	r1, r0
   bbbda:	3b30      	subs	r3, #48	; 0x30
   bbbdc:	220a      	movs	r2, #10
   bbbde:	4630      	mov	r0, r6
   bbbe0:	f7ff ff76 	bl	bbad0 <__multadd>
   bbbe4:	e7ee      	b.n	bbbc4 <__s2b+0x68>
   bbbe6:	bf00      	nop
   bbbe8:	000bd40f 	.word	0x000bd40f
   bbbec:	000bd4bc 	.word	0x000bd4bc

000bbbf0 <__hi0bits>:
   bbbf0:	0c03      	lsrs	r3, r0, #16
   bbbf2:	041b      	lsls	r3, r3, #16
   bbbf4:	b9d3      	cbnz	r3, bbc2c <__hi0bits+0x3c>
   bbbf6:	0400      	lsls	r0, r0, #16
   bbbf8:	2310      	movs	r3, #16
   bbbfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bbbfe:	bf04      	itt	eq
   bbc00:	0200      	lsleq	r0, r0, #8
   bbc02:	3308      	addeq	r3, #8
   bbc04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bbc08:	bf04      	itt	eq
   bbc0a:	0100      	lsleq	r0, r0, #4
   bbc0c:	3304      	addeq	r3, #4
   bbc0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bbc12:	bf04      	itt	eq
   bbc14:	0080      	lsleq	r0, r0, #2
   bbc16:	3302      	addeq	r3, #2
   bbc18:	2800      	cmp	r0, #0
   bbc1a:	db05      	blt.n	bbc28 <__hi0bits+0x38>
   bbc1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bbc20:	f103 0301 	add.w	r3, r3, #1
   bbc24:	bf08      	it	eq
   bbc26:	2320      	moveq	r3, #32
   bbc28:	4618      	mov	r0, r3
   bbc2a:	4770      	bx	lr
   bbc2c:	2300      	movs	r3, #0
   bbc2e:	e7e4      	b.n	bbbfa <__hi0bits+0xa>

000bbc30 <__lo0bits>:
   bbc30:	6803      	ldr	r3, [r0, #0]
   bbc32:	f013 0207 	ands.w	r2, r3, #7
   bbc36:	4601      	mov	r1, r0
   bbc38:	d00b      	beq.n	bbc52 <__lo0bits+0x22>
   bbc3a:	07da      	lsls	r2, r3, #31
   bbc3c:	d423      	bmi.n	bbc86 <__lo0bits+0x56>
   bbc3e:	0798      	lsls	r0, r3, #30
   bbc40:	bf49      	itett	mi
   bbc42:	085b      	lsrmi	r3, r3, #1
   bbc44:	089b      	lsrpl	r3, r3, #2
   bbc46:	2001      	movmi	r0, #1
   bbc48:	600b      	strmi	r3, [r1, #0]
   bbc4a:	bf5c      	itt	pl
   bbc4c:	600b      	strpl	r3, [r1, #0]
   bbc4e:	2002      	movpl	r0, #2
   bbc50:	4770      	bx	lr
   bbc52:	b298      	uxth	r0, r3
   bbc54:	b9a8      	cbnz	r0, bbc82 <__lo0bits+0x52>
   bbc56:	0c1b      	lsrs	r3, r3, #16
   bbc58:	2010      	movs	r0, #16
   bbc5a:	b2da      	uxtb	r2, r3
   bbc5c:	b90a      	cbnz	r2, bbc62 <__lo0bits+0x32>
   bbc5e:	3008      	adds	r0, #8
   bbc60:	0a1b      	lsrs	r3, r3, #8
   bbc62:	071a      	lsls	r2, r3, #28
   bbc64:	bf04      	itt	eq
   bbc66:	091b      	lsreq	r3, r3, #4
   bbc68:	3004      	addeq	r0, #4
   bbc6a:	079a      	lsls	r2, r3, #30
   bbc6c:	bf04      	itt	eq
   bbc6e:	089b      	lsreq	r3, r3, #2
   bbc70:	3002      	addeq	r0, #2
   bbc72:	07da      	lsls	r2, r3, #31
   bbc74:	d403      	bmi.n	bbc7e <__lo0bits+0x4e>
   bbc76:	085b      	lsrs	r3, r3, #1
   bbc78:	f100 0001 	add.w	r0, r0, #1
   bbc7c:	d005      	beq.n	bbc8a <__lo0bits+0x5a>
   bbc7e:	600b      	str	r3, [r1, #0]
   bbc80:	4770      	bx	lr
   bbc82:	4610      	mov	r0, r2
   bbc84:	e7e9      	b.n	bbc5a <__lo0bits+0x2a>
   bbc86:	2000      	movs	r0, #0
   bbc88:	4770      	bx	lr
   bbc8a:	2020      	movs	r0, #32
   bbc8c:	4770      	bx	lr
	...

000bbc90 <__i2b>:
   bbc90:	b510      	push	{r4, lr}
   bbc92:	460c      	mov	r4, r1
   bbc94:	2101      	movs	r1, #1
   bbc96:	f7ff feb9 	bl	bba0c <_Balloc>
   bbc9a:	4602      	mov	r2, r0
   bbc9c:	b928      	cbnz	r0, bbcaa <__i2b+0x1a>
   bbc9e:	4b05      	ldr	r3, [pc, #20]	; (bbcb4 <__i2b+0x24>)
   bbca0:	4805      	ldr	r0, [pc, #20]	; (bbcb8 <__i2b+0x28>)
   bbca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbca6:	f7fa fc87 	bl	b65b8 <__assert_func>
   bbcaa:	2301      	movs	r3, #1
   bbcac:	6144      	str	r4, [r0, #20]
   bbcae:	6103      	str	r3, [r0, #16]
   bbcb0:	bd10      	pop	{r4, pc}
   bbcb2:	bf00      	nop
   bbcb4:	000bd40f 	.word	0x000bd40f
   bbcb8:	000bd4bc 	.word	0x000bd4bc

000bbcbc <__multiply>:
   bbcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbcc0:	4691      	mov	r9, r2
   bbcc2:	690a      	ldr	r2, [r1, #16]
   bbcc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbcc8:	429a      	cmp	r2, r3
   bbcca:	bfb8      	it	lt
   bbccc:	460b      	movlt	r3, r1
   bbcce:	460c      	mov	r4, r1
   bbcd0:	bfbc      	itt	lt
   bbcd2:	464c      	movlt	r4, r9
   bbcd4:	4699      	movlt	r9, r3
   bbcd6:	6927      	ldr	r7, [r4, #16]
   bbcd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbcdc:	68a3      	ldr	r3, [r4, #8]
   bbcde:	6861      	ldr	r1, [r4, #4]
   bbce0:	eb07 060a 	add.w	r6, r7, sl
   bbce4:	42b3      	cmp	r3, r6
   bbce6:	b085      	sub	sp, #20
   bbce8:	bfb8      	it	lt
   bbcea:	3101      	addlt	r1, #1
   bbcec:	f7ff fe8e 	bl	bba0c <_Balloc>
   bbcf0:	b930      	cbnz	r0, bbd00 <__multiply+0x44>
   bbcf2:	4602      	mov	r2, r0
   bbcf4:	4b44      	ldr	r3, [pc, #272]	; (bbe08 <__multiply+0x14c>)
   bbcf6:	4845      	ldr	r0, [pc, #276]	; (bbe0c <__multiply+0x150>)
   bbcf8:	f240 115d 	movw	r1, #349	; 0x15d
   bbcfc:	f7fa fc5c 	bl	b65b8 <__assert_func>
   bbd00:	f100 0514 	add.w	r5, r0, #20
   bbd04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbd08:	462b      	mov	r3, r5
   bbd0a:	2200      	movs	r2, #0
   bbd0c:	4543      	cmp	r3, r8
   bbd0e:	d321      	bcc.n	bbd54 <__multiply+0x98>
   bbd10:	f104 0314 	add.w	r3, r4, #20
   bbd14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbd18:	f109 0314 	add.w	r3, r9, #20
   bbd1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbd20:	9202      	str	r2, [sp, #8]
   bbd22:	1b3a      	subs	r2, r7, r4
   bbd24:	3a15      	subs	r2, #21
   bbd26:	f022 0203 	bic.w	r2, r2, #3
   bbd2a:	3204      	adds	r2, #4
   bbd2c:	f104 0115 	add.w	r1, r4, #21
   bbd30:	428f      	cmp	r7, r1
   bbd32:	bf38      	it	cc
   bbd34:	2204      	movcc	r2, #4
   bbd36:	9201      	str	r2, [sp, #4]
   bbd38:	9a02      	ldr	r2, [sp, #8]
   bbd3a:	9303      	str	r3, [sp, #12]
   bbd3c:	429a      	cmp	r2, r3
   bbd3e:	d80c      	bhi.n	bbd5a <__multiply+0x9e>
   bbd40:	2e00      	cmp	r6, #0
   bbd42:	dd03      	ble.n	bbd4c <__multiply+0x90>
   bbd44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbd48:	2b00      	cmp	r3, #0
   bbd4a:	d05a      	beq.n	bbe02 <__multiply+0x146>
   bbd4c:	6106      	str	r6, [r0, #16]
   bbd4e:	b005      	add	sp, #20
   bbd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbd54:	f843 2b04 	str.w	r2, [r3], #4
   bbd58:	e7d8      	b.n	bbd0c <__multiply+0x50>
   bbd5a:	f8b3 a000 	ldrh.w	sl, [r3]
   bbd5e:	f1ba 0f00 	cmp.w	sl, #0
   bbd62:	d024      	beq.n	bbdae <__multiply+0xf2>
   bbd64:	f104 0e14 	add.w	lr, r4, #20
   bbd68:	46a9      	mov	r9, r5
   bbd6a:	f04f 0c00 	mov.w	ip, #0
   bbd6e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbd72:	f8d9 1000 	ldr.w	r1, [r9]
   bbd76:	fa1f fb82 	uxth.w	fp, r2
   bbd7a:	b289      	uxth	r1, r1
   bbd7c:	fb0a 110b 	mla	r1, sl, fp, r1
   bbd80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbd84:	f8d9 2000 	ldr.w	r2, [r9]
   bbd88:	4461      	add	r1, ip
   bbd8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbd8e:	fb0a c20b 	mla	r2, sl, fp, ip
   bbd92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbd96:	b289      	uxth	r1, r1
   bbd98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbd9c:	4577      	cmp	r7, lr
   bbd9e:	f849 1b04 	str.w	r1, [r9], #4
   bbda2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbda6:	d8e2      	bhi.n	bbd6e <__multiply+0xb2>
   bbda8:	9a01      	ldr	r2, [sp, #4]
   bbdaa:	f845 c002 	str.w	ip, [r5, r2]
   bbdae:	9a03      	ldr	r2, [sp, #12]
   bbdb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbdb4:	3304      	adds	r3, #4
   bbdb6:	f1b9 0f00 	cmp.w	r9, #0
   bbdba:	d020      	beq.n	bbdfe <__multiply+0x142>
   bbdbc:	6829      	ldr	r1, [r5, #0]
   bbdbe:	f104 0c14 	add.w	ip, r4, #20
   bbdc2:	46ae      	mov	lr, r5
   bbdc4:	f04f 0a00 	mov.w	sl, #0
   bbdc8:	f8bc b000 	ldrh.w	fp, [ip]
   bbdcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbdd0:	fb09 220b 	mla	r2, r9, fp, r2
   bbdd4:	4492      	add	sl, r2
   bbdd6:	b289      	uxth	r1, r1
   bbdd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbddc:	f84e 1b04 	str.w	r1, [lr], #4
   bbde0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbde4:	f8be 1000 	ldrh.w	r1, [lr]
   bbde8:	0c12      	lsrs	r2, r2, #16
   bbdea:	fb09 1102 	mla	r1, r9, r2, r1
   bbdee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbdf2:	4567      	cmp	r7, ip
   bbdf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbdf8:	d8e6      	bhi.n	bbdc8 <__multiply+0x10c>
   bbdfa:	9a01      	ldr	r2, [sp, #4]
   bbdfc:	50a9      	str	r1, [r5, r2]
   bbdfe:	3504      	adds	r5, #4
   bbe00:	e79a      	b.n	bbd38 <__multiply+0x7c>
   bbe02:	3e01      	subs	r6, #1
   bbe04:	e79c      	b.n	bbd40 <__multiply+0x84>
   bbe06:	bf00      	nop
   bbe08:	000bd40f 	.word	0x000bd40f
   bbe0c:	000bd4bc 	.word	0x000bd4bc

000bbe10 <__pow5mult>:
   bbe10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbe14:	4615      	mov	r5, r2
   bbe16:	f012 0203 	ands.w	r2, r2, #3
   bbe1a:	4606      	mov	r6, r0
   bbe1c:	460f      	mov	r7, r1
   bbe1e:	d007      	beq.n	bbe30 <__pow5mult+0x20>
   bbe20:	4c25      	ldr	r4, [pc, #148]	; (bbeb8 <__pow5mult+0xa8>)
   bbe22:	3a01      	subs	r2, #1
   bbe24:	2300      	movs	r3, #0
   bbe26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbe2a:	f7ff fe51 	bl	bbad0 <__multadd>
   bbe2e:	4607      	mov	r7, r0
   bbe30:	10ad      	asrs	r5, r5, #2
   bbe32:	d03d      	beq.n	bbeb0 <__pow5mult+0xa0>
   bbe34:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbe36:	b97c      	cbnz	r4, bbe58 <__pow5mult+0x48>
   bbe38:	2010      	movs	r0, #16
   bbe3a:	f7fa fb75 	bl	b6528 <malloc>
   bbe3e:	4602      	mov	r2, r0
   bbe40:	6270      	str	r0, [r6, #36]	; 0x24
   bbe42:	b928      	cbnz	r0, bbe50 <__pow5mult+0x40>
   bbe44:	4b1d      	ldr	r3, [pc, #116]	; (bbebc <__pow5mult+0xac>)
   bbe46:	481e      	ldr	r0, [pc, #120]	; (bbec0 <__pow5mult+0xb0>)
   bbe48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbe4c:	f7fa fbb4 	bl	b65b8 <__assert_func>
   bbe50:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbe54:	6004      	str	r4, [r0, #0]
   bbe56:	60c4      	str	r4, [r0, #12]
   bbe58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbe5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbe60:	b94c      	cbnz	r4, bbe76 <__pow5mult+0x66>
   bbe62:	f240 2171 	movw	r1, #625	; 0x271
   bbe66:	4630      	mov	r0, r6
   bbe68:	f7ff ff12 	bl	bbc90 <__i2b>
   bbe6c:	2300      	movs	r3, #0
   bbe6e:	f8c8 0008 	str.w	r0, [r8, #8]
   bbe72:	4604      	mov	r4, r0
   bbe74:	6003      	str	r3, [r0, #0]
   bbe76:	f04f 0900 	mov.w	r9, #0
   bbe7a:	07eb      	lsls	r3, r5, #31
   bbe7c:	d50a      	bpl.n	bbe94 <__pow5mult+0x84>
   bbe7e:	4639      	mov	r1, r7
   bbe80:	4622      	mov	r2, r4
   bbe82:	4630      	mov	r0, r6
   bbe84:	f7ff ff1a 	bl	bbcbc <__multiply>
   bbe88:	4639      	mov	r1, r7
   bbe8a:	4680      	mov	r8, r0
   bbe8c:	4630      	mov	r0, r6
   bbe8e:	f7ff fdfd 	bl	bba8c <_Bfree>
   bbe92:	4647      	mov	r7, r8
   bbe94:	106d      	asrs	r5, r5, #1
   bbe96:	d00b      	beq.n	bbeb0 <__pow5mult+0xa0>
   bbe98:	6820      	ldr	r0, [r4, #0]
   bbe9a:	b938      	cbnz	r0, bbeac <__pow5mult+0x9c>
   bbe9c:	4622      	mov	r2, r4
   bbe9e:	4621      	mov	r1, r4
   bbea0:	4630      	mov	r0, r6
   bbea2:	f7ff ff0b 	bl	bbcbc <__multiply>
   bbea6:	6020      	str	r0, [r4, #0]
   bbea8:	f8c0 9000 	str.w	r9, [r0]
   bbeac:	4604      	mov	r4, r0
   bbeae:	e7e4      	b.n	bbe7a <__pow5mult+0x6a>
   bbeb0:	4638      	mov	r0, r7
   bbeb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbeb6:	bf00      	nop
   bbeb8:	000bd630 	.word	0x000bd630
   bbebc:	000bd29e 	.word	0x000bd29e
   bbec0:	000bd4bc 	.word	0x000bd4bc

000bbec4 <__lshift>:
   bbec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbec8:	460c      	mov	r4, r1
   bbeca:	6849      	ldr	r1, [r1, #4]
   bbecc:	6923      	ldr	r3, [r4, #16]
   bbece:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bbed2:	68a3      	ldr	r3, [r4, #8]
   bbed4:	4607      	mov	r7, r0
   bbed6:	4691      	mov	r9, r2
   bbed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bbedc:	f108 0601 	add.w	r6, r8, #1
   bbee0:	42b3      	cmp	r3, r6
   bbee2:	db0b      	blt.n	bbefc <__lshift+0x38>
   bbee4:	4638      	mov	r0, r7
   bbee6:	f7ff fd91 	bl	bba0c <_Balloc>
   bbeea:	4605      	mov	r5, r0
   bbeec:	b948      	cbnz	r0, bbf02 <__lshift+0x3e>
   bbeee:	4602      	mov	r2, r0
   bbef0:	4b2a      	ldr	r3, [pc, #168]	; (bbf9c <__lshift+0xd8>)
   bbef2:	482b      	ldr	r0, [pc, #172]	; (bbfa0 <__lshift+0xdc>)
   bbef4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bbef8:	f7fa fb5e 	bl	b65b8 <__assert_func>
   bbefc:	3101      	adds	r1, #1
   bbefe:	005b      	lsls	r3, r3, #1
   bbf00:	e7ee      	b.n	bbee0 <__lshift+0x1c>
   bbf02:	2300      	movs	r3, #0
   bbf04:	f100 0114 	add.w	r1, r0, #20
   bbf08:	f100 0210 	add.w	r2, r0, #16
   bbf0c:	4618      	mov	r0, r3
   bbf0e:	4553      	cmp	r3, sl
   bbf10:	db37      	blt.n	bbf82 <__lshift+0xbe>
   bbf12:	6920      	ldr	r0, [r4, #16]
   bbf14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bbf18:	f104 0314 	add.w	r3, r4, #20
   bbf1c:	f019 091f 	ands.w	r9, r9, #31
   bbf20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bbf24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bbf28:	d02f      	beq.n	bbf8a <__lshift+0xc6>
   bbf2a:	f1c9 0e20 	rsb	lr, r9, #32
   bbf2e:	468a      	mov	sl, r1
   bbf30:	f04f 0c00 	mov.w	ip, #0
   bbf34:	681a      	ldr	r2, [r3, #0]
   bbf36:	fa02 f209 	lsl.w	r2, r2, r9
   bbf3a:	ea42 020c 	orr.w	r2, r2, ip
   bbf3e:	f84a 2b04 	str.w	r2, [sl], #4
   bbf42:	f853 2b04 	ldr.w	r2, [r3], #4
   bbf46:	4298      	cmp	r0, r3
   bbf48:	fa22 fc0e 	lsr.w	ip, r2, lr
   bbf4c:	d8f2      	bhi.n	bbf34 <__lshift+0x70>
   bbf4e:	1b03      	subs	r3, r0, r4
   bbf50:	3b15      	subs	r3, #21
   bbf52:	f023 0303 	bic.w	r3, r3, #3
   bbf56:	3304      	adds	r3, #4
   bbf58:	f104 0215 	add.w	r2, r4, #21
   bbf5c:	4290      	cmp	r0, r2
   bbf5e:	bf38      	it	cc
   bbf60:	2304      	movcc	r3, #4
   bbf62:	f841 c003 	str.w	ip, [r1, r3]
   bbf66:	f1bc 0f00 	cmp.w	ip, #0
   bbf6a:	d001      	beq.n	bbf70 <__lshift+0xac>
   bbf6c:	f108 0602 	add.w	r6, r8, #2
   bbf70:	3e01      	subs	r6, #1
   bbf72:	4638      	mov	r0, r7
   bbf74:	612e      	str	r6, [r5, #16]
   bbf76:	4621      	mov	r1, r4
   bbf78:	f7ff fd88 	bl	bba8c <_Bfree>
   bbf7c:	4628      	mov	r0, r5
   bbf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbf82:	f842 0f04 	str.w	r0, [r2, #4]!
   bbf86:	3301      	adds	r3, #1
   bbf88:	e7c1      	b.n	bbf0e <__lshift+0x4a>
   bbf8a:	3904      	subs	r1, #4
   bbf8c:	f853 2b04 	ldr.w	r2, [r3], #4
   bbf90:	f841 2f04 	str.w	r2, [r1, #4]!
   bbf94:	4298      	cmp	r0, r3
   bbf96:	d8f9      	bhi.n	bbf8c <__lshift+0xc8>
   bbf98:	e7ea      	b.n	bbf70 <__lshift+0xac>
   bbf9a:	bf00      	nop
   bbf9c:	000bd40f 	.word	0x000bd40f
   bbfa0:	000bd4bc 	.word	0x000bd4bc

000bbfa4 <__mcmp>:
   bbfa4:	b530      	push	{r4, r5, lr}
   bbfa6:	6902      	ldr	r2, [r0, #16]
   bbfa8:	690c      	ldr	r4, [r1, #16]
   bbfaa:	1b12      	subs	r2, r2, r4
   bbfac:	d10e      	bne.n	bbfcc <__mcmp+0x28>
   bbfae:	f100 0314 	add.w	r3, r0, #20
   bbfb2:	3114      	adds	r1, #20
   bbfb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bbfb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bbfbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bbfc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bbfc4:	42a5      	cmp	r5, r4
   bbfc6:	d003      	beq.n	bbfd0 <__mcmp+0x2c>
   bbfc8:	d305      	bcc.n	bbfd6 <__mcmp+0x32>
   bbfca:	2201      	movs	r2, #1
   bbfcc:	4610      	mov	r0, r2
   bbfce:	bd30      	pop	{r4, r5, pc}
   bbfd0:	4283      	cmp	r3, r0
   bbfd2:	d3f3      	bcc.n	bbfbc <__mcmp+0x18>
   bbfd4:	e7fa      	b.n	bbfcc <__mcmp+0x28>
   bbfd6:	f04f 32ff 	mov.w	r2, #4294967295
   bbfda:	e7f7      	b.n	bbfcc <__mcmp+0x28>

000bbfdc <__mdiff>:
   bbfdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbfe0:	460c      	mov	r4, r1
   bbfe2:	4606      	mov	r6, r0
   bbfe4:	4611      	mov	r1, r2
   bbfe6:	4620      	mov	r0, r4
   bbfe8:	4690      	mov	r8, r2
   bbfea:	f7ff ffdb 	bl	bbfa4 <__mcmp>
   bbfee:	1e05      	subs	r5, r0, #0
   bbff0:	d110      	bne.n	bc014 <__mdiff+0x38>
   bbff2:	4629      	mov	r1, r5
   bbff4:	4630      	mov	r0, r6
   bbff6:	f7ff fd09 	bl	bba0c <_Balloc>
   bbffa:	b930      	cbnz	r0, bc00a <__mdiff+0x2e>
   bbffc:	4b3a      	ldr	r3, [pc, #232]	; (bc0e8 <__mdiff+0x10c>)
   bbffe:	4602      	mov	r2, r0
   bc000:	f240 2132 	movw	r1, #562	; 0x232
   bc004:	4839      	ldr	r0, [pc, #228]	; (bc0ec <__mdiff+0x110>)
   bc006:	f7fa fad7 	bl	b65b8 <__assert_func>
   bc00a:	2301      	movs	r3, #1
   bc00c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc014:	bfa4      	itt	ge
   bc016:	4643      	movge	r3, r8
   bc018:	46a0      	movge	r8, r4
   bc01a:	4630      	mov	r0, r6
   bc01c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc020:	bfa6      	itte	ge
   bc022:	461c      	movge	r4, r3
   bc024:	2500      	movge	r5, #0
   bc026:	2501      	movlt	r5, #1
   bc028:	f7ff fcf0 	bl	bba0c <_Balloc>
   bc02c:	b920      	cbnz	r0, bc038 <__mdiff+0x5c>
   bc02e:	4b2e      	ldr	r3, [pc, #184]	; (bc0e8 <__mdiff+0x10c>)
   bc030:	4602      	mov	r2, r0
   bc032:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc036:	e7e5      	b.n	bc004 <__mdiff+0x28>
   bc038:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc03c:	6926      	ldr	r6, [r4, #16]
   bc03e:	60c5      	str	r5, [r0, #12]
   bc040:	f104 0914 	add.w	r9, r4, #20
   bc044:	f108 0514 	add.w	r5, r8, #20
   bc048:	f100 0e14 	add.w	lr, r0, #20
   bc04c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc050:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc054:	f108 0210 	add.w	r2, r8, #16
   bc058:	46f2      	mov	sl, lr
   bc05a:	2100      	movs	r1, #0
   bc05c:	f859 3b04 	ldr.w	r3, [r9], #4
   bc060:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc064:	fa1f f883 	uxth.w	r8, r3
   bc068:	fa11 f18b 	uxtah	r1, r1, fp
   bc06c:	0c1b      	lsrs	r3, r3, #16
   bc06e:	eba1 0808 	sub.w	r8, r1, r8
   bc072:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc076:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc07a:	fa1f f888 	uxth.w	r8, r8
   bc07e:	1419      	asrs	r1, r3, #16
   bc080:	454e      	cmp	r6, r9
   bc082:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc086:	f84a 3b04 	str.w	r3, [sl], #4
   bc08a:	d8e7      	bhi.n	bc05c <__mdiff+0x80>
   bc08c:	1b33      	subs	r3, r6, r4
   bc08e:	3b15      	subs	r3, #21
   bc090:	f023 0303 	bic.w	r3, r3, #3
   bc094:	3304      	adds	r3, #4
   bc096:	3415      	adds	r4, #21
   bc098:	42a6      	cmp	r6, r4
   bc09a:	bf38      	it	cc
   bc09c:	2304      	movcc	r3, #4
   bc09e:	441d      	add	r5, r3
   bc0a0:	4473      	add	r3, lr
   bc0a2:	469e      	mov	lr, r3
   bc0a4:	462e      	mov	r6, r5
   bc0a6:	4566      	cmp	r6, ip
   bc0a8:	d30e      	bcc.n	bc0c8 <__mdiff+0xec>
   bc0aa:	f10c 0203 	add.w	r2, ip, #3
   bc0ae:	1b52      	subs	r2, r2, r5
   bc0b0:	f022 0203 	bic.w	r2, r2, #3
   bc0b4:	3d03      	subs	r5, #3
   bc0b6:	45ac      	cmp	ip, r5
   bc0b8:	bf38      	it	cc
   bc0ba:	2200      	movcc	r2, #0
   bc0bc:	441a      	add	r2, r3
   bc0be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc0c2:	b17b      	cbz	r3, bc0e4 <__mdiff+0x108>
   bc0c4:	6107      	str	r7, [r0, #16]
   bc0c6:	e7a3      	b.n	bc010 <__mdiff+0x34>
   bc0c8:	f856 8b04 	ldr.w	r8, [r6], #4
   bc0cc:	fa11 f288 	uxtah	r2, r1, r8
   bc0d0:	1414      	asrs	r4, r2, #16
   bc0d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc0d6:	b292      	uxth	r2, r2
   bc0d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc0dc:	f84e 2b04 	str.w	r2, [lr], #4
   bc0e0:	1421      	asrs	r1, r4, #16
   bc0e2:	e7e0      	b.n	bc0a6 <__mdiff+0xca>
   bc0e4:	3f01      	subs	r7, #1
   bc0e6:	e7ea      	b.n	bc0be <__mdiff+0xe2>
   bc0e8:	000bd40f 	.word	0x000bd40f
   bc0ec:	000bd4bc 	.word	0x000bd4bc

000bc0f0 <__ulp>:
   bc0f0:	b082      	sub	sp, #8
   bc0f2:	ed8d 0b00 	vstr	d0, [sp]
   bc0f6:	9b01      	ldr	r3, [sp, #4]
   bc0f8:	4912      	ldr	r1, [pc, #72]	; (bc144 <__ulp+0x54>)
   bc0fa:	4019      	ands	r1, r3
   bc0fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc100:	2900      	cmp	r1, #0
   bc102:	dd05      	ble.n	bc110 <__ulp+0x20>
   bc104:	2200      	movs	r2, #0
   bc106:	460b      	mov	r3, r1
   bc108:	ec43 2b10 	vmov	d0, r2, r3
   bc10c:	b002      	add	sp, #8
   bc10e:	4770      	bx	lr
   bc110:	4249      	negs	r1, r1
   bc112:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc116:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc11a:	f04f 0200 	mov.w	r2, #0
   bc11e:	f04f 0300 	mov.w	r3, #0
   bc122:	da04      	bge.n	bc12e <__ulp+0x3e>
   bc124:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc128:	fa41 f300 	asr.w	r3, r1, r0
   bc12c:	e7ec      	b.n	bc108 <__ulp+0x18>
   bc12e:	f1a0 0114 	sub.w	r1, r0, #20
   bc132:	291e      	cmp	r1, #30
   bc134:	bfda      	itte	le
   bc136:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc13a:	fa20 f101 	lsrle.w	r1, r0, r1
   bc13e:	2101      	movgt	r1, #1
   bc140:	460a      	mov	r2, r1
   bc142:	e7e1      	b.n	bc108 <__ulp+0x18>
   bc144:	7ff00000 	.word	0x7ff00000

000bc148 <__b2d>:
   bc148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc14a:	6905      	ldr	r5, [r0, #16]
   bc14c:	f100 0714 	add.w	r7, r0, #20
   bc150:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc154:	1f2e      	subs	r6, r5, #4
   bc156:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc15a:	4620      	mov	r0, r4
   bc15c:	f7ff fd48 	bl	bbbf0 <__hi0bits>
   bc160:	f1c0 0320 	rsb	r3, r0, #32
   bc164:	280a      	cmp	r0, #10
   bc166:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc1e4 <__b2d+0x9c>
   bc16a:	600b      	str	r3, [r1, #0]
   bc16c:	dc14      	bgt.n	bc198 <__b2d+0x50>
   bc16e:	f1c0 0e0b 	rsb	lr, r0, #11
   bc172:	fa24 f10e 	lsr.w	r1, r4, lr
   bc176:	42b7      	cmp	r7, r6
   bc178:	ea41 030c 	orr.w	r3, r1, ip
   bc17c:	bf34      	ite	cc
   bc17e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc182:	2100      	movcs	r1, #0
   bc184:	3015      	adds	r0, #21
   bc186:	fa04 f000 	lsl.w	r0, r4, r0
   bc18a:	fa21 f10e 	lsr.w	r1, r1, lr
   bc18e:	ea40 0201 	orr.w	r2, r0, r1
   bc192:	ec43 2b10 	vmov	d0, r2, r3
   bc196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc198:	42b7      	cmp	r7, r6
   bc19a:	bf3a      	itte	cc
   bc19c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc1a0:	f1a5 0608 	subcc.w	r6, r5, #8
   bc1a4:	2100      	movcs	r1, #0
   bc1a6:	380b      	subs	r0, #11
   bc1a8:	d017      	beq.n	bc1da <__b2d+0x92>
   bc1aa:	f1c0 0c20 	rsb	ip, r0, #32
   bc1ae:	fa04 f500 	lsl.w	r5, r4, r0
   bc1b2:	42be      	cmp	r6, r7
   bc1b4:	fa21 f40c 	lsr.w	r4, r1, ip
   bc1b8:	ea45 0504 	orr.w	r5, r5, r4
   bc1bc:	bf8c      	ite	hi
   bc1be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc1c2:	2400      	movls	r4, #0
   bc1c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc1c8:	fa01 f000 	lsl.w	r0, r1, r0
   bc1cc:	fa24 f40c 	lsr.w	r4, r4, ip
   bc1d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc1d4:	ea40 0204 	orr.w	r2, r0, r4
   bc1d8:	e7db      	b.n	bc192 <__b2d+0x4a>
   bc1da:	ea44 030c 	orr.w	r3, r4, ip
   bc1de:	460a      	mov	r2, r1
   bc1e0:	e7d7      	b.n	bc192 <__b2d+0x4a>
   bc1e2:	bf00      	nop
   bc1e4:	3ff00000 	.word	0x3ff00000

000bc1e8 <__d2b>:
   bc1e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc1ec:	4689      	mov	r9, r1
   bc1ee:	2101      	movs	r1, #1
   bc1f0:	ec57 6b10 	vmov	r6, r7, d0
   bc1f4:	4690      	mov	r8, r2
   bc1f6:	f7ff fc09 	bl	bba0c <_Balloc>
   bc1fa:	4604      	mov	r4, r0
   bc1fc:	b930      	cbnz	r0, bc20c <__d2b+0x24>
   bc1fe:	4602      	mov	r2, r0
   bc200:	4b25      	ldr	r3, [pc, #148]	; (bc298 <__d2b+0xb0>)
   bc202:	4826      	ldr	r0, [pc, #152]	; (bc29c <__d2b+0xb4>)
   bc204:	f240 310a 	movw	r1, #778	; 0x30a
   bc208:	f7fa f9d6 	bl	b65b8 <__assert_func>
   bc20c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc210:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc214:	bb35      	cbnz	r5, bc264 <__d2b+0x7c>
   bc216:	2e00      	cmp	r6, #0
   bc218:	9301      	str	r3, [sp, #4]
   bc21a:	d028      	beq.n	bc26e <__d2b+0x86>
   bc21c:	4668      	mov	r0, sp
   bc21e:	9600      	str	r6, [sp, #0]
   bc220:	f7ff fd06 	bl	bbc30 <__lo0bits>
   bc224:	9900      	ldr	r1, [sp, #0]
   bc226:	b300      	cbz	r0, bc26a <__d2b+0x82>
   bc228:	9a01      	ldr	r2, [sp, #4]
   bc22a:	f1c0 0320 	rsb	r3, r0, #32
   bc22e:	fa02 f303 	lsl.w	r3, r2, r3
   bc232:	430b      	orrs	r3, r1
   bc234:	40c2      	lsrs	r2, r0
   bc236:	6163      	str	r3, [r4, #20]
   bc238:	9201      	str	r2, [sp, #4]
   bc23a:	9b01      	ldr	r3, [sp, #4]
   bc23c:	61a3      	str	r3, [r4, #24]
   bc23e:	2b00      	cmp	r3, #0
   bc240:	bf14      	ite	ne
   bc242:	2202      	movne	r2, #2
   bc244:	2201      	moveq	r2, #1
   bc246:	6122      	str	r2, [r4, #16]
   bc248:	b1d5      	cbz	r5, bc280 <__d2b+0x98>
   bc24a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc24e:	4405      	add	r5, r0
   bc250:	f8c9 5000 	str.w	r5, [r9]
   bc254:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc258:	f8c8 0000 	str.w	r0, [r8]
   bc25c:	4620      	mov	r0, r4
   bc25e:	b003      	add	sp, #12
   bc260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc268:	e7d5      	b.n	bc216 <__d2b+0x2e>
   bc26a:	6161      	str	r1, [r4, #20]
   bc26c:	e7e5      	b.n	bc23a <__d2b+0x52>
   bc26e:	a801      	add	r0, sp, #4
   bc270:	f7ff fcde 	bl	bbc30 <__lo0bits>
   bc274:	9b01      	ldr	r3, [sp, #4]
   bc276:	6163      	str	r3, [r4, #20]
   bc278:	2201      	movs	r2, #1
   bc27a:	6122      	str	r2, [r4, #16]
   bc27c:	3020      	adds	r0, #32
   bc27e:	e7e3      	b.n	bc248 <__d2b+0x60>
   bc280:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc284:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc288:	f8c9 0000 	str.w	r0, [r9]
   bc28c:	6918      	ldr	r0, [r3, #16]
   bc28e:	f7ff fcaf 	bl	bbbf0 <__hi0bits>
   bc292:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc296:	e7df      	b.n	bc258 <__d2b+0x70>
   bc298:	000bd40f 	.word	0x000bd40f
   bc29c:	000bd4bc 	.word	0x000bd4bc

000bc2a0 <__ratio>:
   bc2a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc2a4:	4688      	mov	r8, r1
   bc2a6:	4669      	mov	r1, sp
   bc2a8:	4681      	mov	r9, r0
   bc2aa:	f7ff ff4d 	bl	bc148 <__b2d>
   bc2ae:	a901      	add	r1, sp, #4
   bc2b0:	4640      	mov	r0, r8
   bc2b2:	ec55 4b10 	vmov	r4, r5, d0
   bc2b6:	f7ff ff47 	bl	bc148 <__b2d>
   bc2ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc2be:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc2c2:	eba3 0c02 	sub.w	ip, r3, r2
   bc2c6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc2ca:	1a9b      	subs	r3, r3, r2
   bc2cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc2d0:	ec51 0b10 	vmov	r0, r1, d0
   bc2d4:	2b00      	cmp	r3, #0
   bc2d6:	bfd6      	itet	le
   bc2d8:	460a      	movle	r2, r1
   bc2da:	462a      	movgt	r2, r5
   bc2dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc2e0:	468b      	mov	fp, r1
   bc2e2:	462f      	mov	r7, r5
   bc2e4:	bfd4      	ite	le
   bc2e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc2ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc2ee:	4620      	mov	r0, r4
   bc2f0:	ee10 2a10 	vmov	r2, s0
   bc2f4:	465b      	mov	r3, fp
   bc2f6:	4639      	mov	r1, r7
   bc2f8:	f7fd fdac 	bl	b9e54 <__aeabi_ddiv>
   bc2fc:	ec41 0b10 	vmov	d0, r0, r1
   bc300:	b003      	add	sp, #12
   bc302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc306 <__copybits>:
   bc306:	3901      	subs	r1, #1
   bc308:	b570      	push	{r4, r5, r6, lr}
   bc30a:	1149      	asrs	r1, r1, #5
   bc30c:	6914      	ldr	r4, [r2, #16]
   bc30e:	3101      	adds	r1, #1
   bc310:	f102 0314 	add.w	r3, r2, #20
   bc314:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc318:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc31c:	1f05      	subs	r5, r0, #4
   bc31e:	42a3      	cmp	r3, r4
   bc320:	d30c      	bcc.n	bc33c <__copybits+0x36>
   bc322:	1aa3      	subs	r3, r4, r2
   bc324:	3b11      	subs	r3, #17
   bc326:	f023 0303 	bic.w	r3, r3, #3
   bc32a:	3211      	adds	r2, #17
   bc32c:	42a2      	cmp	r2, r4
   bc32e:	bf88      	it	hi
   bc330:	2300      	movhi	r3, #0
   bc332:	4418      	add	r0, r3
   bc334:	2300      	movs	r3, #0
   bc336:	4288      	cmp	r0, r1
   bc338:	d305      	bcc.n	bc346 <__copybits+0x40>
   bc33a:	bd70      	pop	{r4, r5, r6, pc}
   bc33c:	f853 6b04 	ldr.w	r6, [r3], #4
   bc340:	f845 6f04 	str.w	r6, [r5, #4]!
   bc344:	e7eb      	b.n	bc31e <__copybits+0x18>
   bc346:	f840 3b04 	str.w	r3, [r0], #4
   bc34a:	e7f4      	b.n	bc336 <__copybits+0x30>

000bc34c <__any_on>:
   bc34c:	f100 0214 	add.w	r2, r0, #20
   bc350:	6900      	ldr	r0, [r0, #16]
   bc352:	114b      	asrs	r3, r1, #5
   bc354:	4298      	cmp	r0, r3
   bc356:	b510      	push	{r4, lr}
   bc358:	db11      	blt.n	bc37e <__any_on+0x32>
   bc35a:	dd0a      	ble.n	bc372 <__any_on+0x26>
   bc35c:	f011 011f 	ands.w	r1, r1, #31
   bc360:	d007      	beq.n	bc372 <__any_on+0x26>
   bc362:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc366:	fa24 f001 	lsr.w	r0, r4, r1
   bc36a:	fa00 f101 	lsl.w	r1, r0, r1
   bc36e:	428c      	cmp	r4, r1
   bc370:	d10b      	bne.n	bc38a <__any_on+0x3e>
   bc372:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc376:	4293      	cmp	r3, r2
   bc378:	d803      	bhi.n	bc382 <__any_on+0x36>
   bc37a:	2000      	movs	r0, #0
   bc37c:	bd10      	pop	{r4, pc}
   bc37e:	4603      	mov	r3, r0
   bc380:	e7f7      	b.n	bc372 <__any_on+0x26>
   bc382:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc386:	2900      	cmp	r1, #0
   bc388:	d0f5      	beq.n	bc376 <__any_on+0x2a>
   bc38a:	2001      	movs	r0, #1
   bc38c:	e7f6      	b.n	bc37c <__any_on+0x30>

000bc38e <_calloc_r>:
   bc38e:	b513      	push	{r0, r1, r4, lr}
   bc390:	434a      	muls	r2, r1
   bc392:	4611      	mov	r1, r2
   bc394:	9201      	str	r2, [sp, #4]
   bc396:	f7fa f8ff 	bl	b6598 <_malloc_r>
   bc39a:	4604      	mov	r4, r0
   bc39c:	b118      	cbz	r0, bc3a6 <_calloc_r+0x18>
   bc39e:	9a01      	ldr	r2, [sp, #4]
   bc3a0:	2100      	movs	r1, #0
   bc3a2:	f7fd ff7e 	bl	ba2a2 <memset>
   bc3a6:	4620      	mov	r0, r4
   bc3a8:	b002      	add	sp, #8
   bc3aa:	bd10      	pop	{r4, pc}
   bc3ac:	0000      	movs	r0, r0
	...

000bc3b0 <nan>:
   bc3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc3b8 <nan+0x8>
   bc3b4:	4770      	bx	lr
   bc3b6:	bf00      	nop
   bc3b8:	00000000 	.word	0x00000000
   bc3bc:	7ff80000 	.word	0x7ff80000

000bc3c0 <__ascii_wctomb>:
   bc3c0:	b149      	cbz	r1, bc3d6 <__ascii_wctomb+0x16>
   bc3c2:	2aff      	cmp	r2, #255	; 0xff
   bc3c4:	bf85      	ittet	hi
   bc3c6:	238a      	movhi	r3, #138	; 0x8a
   bc3c8:	6003      	strhi	r3, [r0, #0]
   bc3ca:	700a      	strbls	r2, [r1, #0]
   bc3cc:	f04f 30ff 	movhi.w	r0, #4294967295
   bc3d0:	bf98      	it	ls
   bc3d2:	2001      	movls	r0, #1
   bc3d4:	4770      	bx	lr
   bc3d6:	4608      	mov	r0, r1
   bc3d8:	4770      	bx	lr
	...

000bc3dc <__aeabi_d2lz>:
   bc3dc:	b538      	push	{r3, r4, r5, lr}
   bc3de:	2200      	movs	r2, #0
   bc3e0:	2300      	movs	r3, #0
   bc3e2:	4604      	mov	r4, r0
   bc3e4:	460d      	mov	r5, r1
   bc3e6:	f7fd fe7d 	bl	ba0e4 <__aeabi_dcmplt>
   bc3ea:	b928      	cbnz	r0, bc3f8 <__aeabi_d2lz+0x1c>
   bc3ec:	4620      	mov	r0, r4
   bc3ee:	4629      	mov	r1, r5
   bc3f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc3f4:	f7fd bef2 	b.w	ba1dc <__aeabi_d2ulz>
   bc3f8:	4620      	mov	r0, r4
   bc3fa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc3fe:	f7fd feed 	bl	ba1dc <__aeabi_d2ulz>
   bc402:	4240      	negs	r0, r0
   bc404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc408:	bd38      	pop	{r3, r4, r5, pc}
   bc40a:	bf00      	nop

000bc40c <dynalib_user>:
   bc40c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc41c:	0000 0000 6e69 7420 6568 6320 6c61 626c     ....in the callb
   bc42c:	6361 006b 7270 6369 7365 002f 7325 000a     ack.prices/.%s..
   bc43c:	212c 5700 6961 6974 676e 6620 726f 4220     ,!.Waiting for B
   bc44c:	454c 6c63 6569 746e 6320 6e6f 656e 7463     LEclient connect
   bc45c:	6f69 2e6e 2e2e 6c00 776f 725f 6e61 6567     ion....low_range
   bc46c:	685f 756f 5b72 6425 3a5d 2520 0a64 4800     _hour[%d]: %d..H
   bc47c:	6769 6568 7473 7020 6972 6563 6f20 2066     ighest price of 
   bc48c:	6874 2065 6164 3a79 2520 0a66 4c00 776f     the day: %f..Low
   bc49c:	7365 2074 7270 6369 2065 666f 7420 6568     est price of the
   bc4ac:	6420 7961 203a 6625 000a 6f48 7275 2073      day: %f..Hours 
   bc4bc:	666f 7420 6568 6420 7961 7720 6568 6572     of the day where
   bc4cc:	6520 656c 7463 6972 6963 7974 6920 2073      electricity is 
   bc4dc:	6977 6874 6e69 6120 6363 7065 6574 2064     within accepted 
   bc4ec:	6172 676e 3a65 000a 3025 6432 7420 206f     range:..%02d to 
   bc4fc:	3025 6432 000a 227b 6857 5f72 6f74 6164     %02d..{"Whr_toda
   bc50c:	2279 5b3a 2c00 7b00 7022 6972 6563 7973     y":[.,.{"pricesy
   bc51c:	7365 6574 6472 7961 3a22 005b 2e25 6c32     esterday":[.%.2l
   bc52c:	0066 227b 7270 6369 7365 6f74 6164 2279     f.{"pricestoday"
   bc53c:	5b3a 7b00 7022 6972 6563 7473 6d6f 726f     :[.{"pricestomor
   bc54c:	6f72 2277 5b3a 7b00 5722 7248 795f 7365     row":[.{"WHr_yes
   bc55c:	6574 6472 7961 3a22 005b 227b 4857 5f72     terday":[.{"WHr_
   bc56c:	6f74 6164 2279 5b3a 6300 6e6f 656e 7463     today":[.connect
   bc57c:	6465 4700 5445 2f20 6164 6174 6573 2f74     ed.GET /dataset/
   bc58c:	6c45 7073 746f 7270 6369 7365 663f 6c69     Elspotprices?fil
   bc59c:	6574 3d72 3725 2542 3232 7250 6369 4165     ter=%7B%22PriceA
   bc5ac:	6572 2561 3232 3325 2541 3232 4b44 2532     rea%22%3A%22DK2%
   bc5bc:	3232 3725 2644 7473 7261 3d74 3032 3232     22%7D&start=2022
   bc5cc:	312d 2d31 3732 3054 2530 4133 3030 6f26     -11-27T00%3A00&o
   bc5dc:	6666 6573 3d74 2630 696c 696d 3d74 3432     ffset=0&limit=24
   bc5ec:	6326 6c6f 6d75 736e 533d 6f70 5074 6972     &columns=SpotPri
   bc5fc:	6563 4b44 264b 6f73 7472 483d 756f 4472     ceDKK&sort=HourD
   bc60c:	254b 3032 5341 2643 6974 656d 6f7a 656e     K%20ASC&timezone
   bc61c:	643d 206b 5448 5054 312f 302e 4800 736f     =dk HTTP/1.0.Hos
   bc62c:	3a74 6120 6970 652e 656e 6772 6469 7461     t: api.energidat
   bc63c:	7361 7265 6976 6563 642e 006b 6f43 746e     aservice.dk.Cont
   bc64c:	6e65 2d74 654c 676e 6874 203a 0030 6f43     ent-Length: 0.Co
   bc65c:	746e 6e65 2d74 7954 6570 203a 7061 6c70     ntent-Type: appl
   bc66c:	6369 7461 6f69 2f6e 736a 6e6f 6400 7369     ication/json.dis
   bc67c:	6f63 6e6e 6365 6974 676e 002e 7041 6c70     connecting..Appl
   bc68c:	6369 7461 6f69 3e6e 5309 6174 7472 6f20     ication>.Start o
   bc69c:	2066 6f4c 706f 002e 642f 7461 7361 7465     f Loop../dataset
   bc6ac:	452f 736c 6f70 7074 6972 6563 3f73 6966     /Elspotprices?fi
   bc6bc:	746c 7265 253d 4237 3225 5032 6972 6563     lter=%7B%22Price
   bc6cc:	7241 6165 3225 2532 4133 3225 4432 324b     Area%22%3A%22DK2
   bc6dc:	3225 2532 4437 7326 6174 7472 323d 3230     %22%7D&start=202
   bc6ec:	2d32 3131 322d 5437 3030 3325 3041 2630     2-11-27T00%3A00&
   bc6fc:	666f 7366 7465 303d 6c26 6d69 7469 323d     offset=0&limit=2
   bc70c:	2634 6f63 756c 6e6d 3d73 7053 746f 7250     4&columns=SpotPr
   bc71c:	6369 4465 4b4b 7326 726f 3d74 6f48 7275     iceDKK&sort=Hour
   bc72c:	4b44 3225 4130 4353 7426 6d69 7a65 6e6f     DK%20ASC&timezon
   bc73c:	3d65 6b64 4700 5445 4100 7070 696c 6163     e=dk.GET.Applica
   bc74c:	6974 6e6f 093e 6552 7073 6e6f 6573 7320     tion>.Response s
   bc75c:	6174 7574 3a73 0020 7041 6c70 6369 7461     tatus: .Applicat
   bc76c:	6f69 3e6e 4809 5454 2050 6552 7073 6e6f     ion>.HTTP Respon
   bc77c:	6573 4220 646f 3a79 0020 6146 6c69 6465     se Body: .Failed
   bc78c:	7420 206f 6c61 6f6c 6163 6574 6d20 6d65      to allocate mem
   bc79c:	726f 2079 6f66 2072 6f63 7473 795f 7365     ory for cost_yes
   bc7ac:	6574 6472 7961 000a 6146 6c69 6465 7420     terday..Failed t
   bc7bc:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   bc7cc:	2079 6f66 2072 6f63 7473 745f 646f 7961     y for cost_today
   bc7dc:	000a 6146 6c69 6465 7420 206f 6c61 6f6c     ..Failed to allo
   bc7ec:	6163 6574 6d20 6d65 726f 2079 6f66 2072     cate memory for 
   bc7fc:	6f63 7473 745f 6d6f 726f 6f72 0a77 4d00     cost_tomorrow..M
   bc80c:	6d65 726f 2079 6c61 6f6c 6163 6574 2064     emory allocated 
   bc81c:	6f66 2072 7270 6369 7365 203a 6425 6220     for prices: %d b
   bc82c:	7479 7365 6f20 2066 6f64 6275 656c 0a73     ytes of doubles.
   bc83c:	4600 6961 656c 2064 6f74 6120 6c6c 636f     .Failed to alloc
   bc84c:	7461 2065 656d 6f6d 7972 6620 726f 7720     ate memory for w
   bc85c:	5f68 6f74 6164 0a79 4600 6961 656c 2064     h_today..Failed 
   bc86c:	6f74 6120 6c6c 636f 7461 2065 656d 6f6d     to allocate memo
   bc87c:	7972 6620 726f 7720 5f68 6579 7473 7265     ry for wh_yester
   bc88c:	6164 0a79 4d00 6d65 726f 2079 6c61 6f6c     day..Memory allo
   bc89c:	6163 6574 2064 6f66 2072 6877 203a 6425     cated for wh: %d
   bc8ac:	6220 7479 7365 6f20 2066 6e69 7374 000a      bytes of ints..
   bc8bc:	6641 6574 2072 6c25 0a75 7b00 2220 6579     After %lu..{ "ye
   bc8cc:	7261 3a22 2220 6425 2c22 2220 6f6d 746e     ar": "%d", "mont
   bc8dc:	2268 223a 3025 6432 2c22 2220 6164 2279     h":"%02d", "day"
   bc8ec:	203a 2522 3230 2264 007d 6c65 7270 7369     : "%02d"}.elpris
   bc8fc:	7265 7000 6972 6563 0073 7543 7272 6e65     er.prices.Curren
   bc90c:	2074 4848 4d3a 3a4d 2520 3230 3a64 3025     t HH:MM: %02d:%0
   bc91c:	6432 000a 5352 4953 253d 0064 7274 6979     2d..RSSI=%d.tryi
   bc92c:	676e 7420 6568 4820 5454 2050 4547 0a54     ng the HTTP GET.
   bc93c:	7400 7972 6e69 2067 6874 2065 746f 6568     .trying the othe
   bc94c:	2072 656d 6874 646f 4700 7465 6974 676e     r method.Getting
   bc95c:	7020 6972 6563 6420 7461 2061 6f66 2072      price data for 
   bc96c:	6579 7473 7265 6164 0a79 4300 756f 746e     yesterday..Count
   bc97c:	3d31 203a 6425 000a 6547 7474 6e69 2067     1=: %d..Getting 
   bc98c:	7270 6369 2065 6164 6174 6620 726f 7420     price data for t
   bc99c:	646f 7961 000a 6f43 6e75 3274 3a3d 2520     oday..Count2=: %
   bc9ac:	0a64 5400 6568 7020 6972 6563 2073 6f66     d..The prices fo
   bc9bc:	2072 6f74 6f6d 7272 766f 7720 6c69 206c     r tomorrov will 
   bc9cc:	6562 7020 6c75 656c 2064 7461 2520 3a64     be pulled at %d:
   bc9dc:	3030 000a 6e49 7720 726f 0a6b 4300 6568     00..In work..Che
   bc9ec:	7061 6928 6873 2029 6f68 7275 2073 666f     ap(ish) hours of
   bc9fc:	7420 6568 6420 7961 203a 2500 3230 2064      the day: .%02d 
   bca0c:	6f74 2520 3230 2c64 0020 6f4c 2077 7270     to %02d, .Low pr
   bca1c:	6369 2065 6f68 7275 0073 6552 6563 7669     ice hours.Receiv
   bca2c:	6465 7020 776f 7265 672f 7465 000a 227b     ed power/get..{"
   bca3c:	6177 7474 3a22 6425 007d 227b 7270 6369     watt":%d}.{"pric
   bca4c:	7365 6f74 6164 2279 5b3a 2c31 2c32 2c33     estoday":[1,2,3,
   bca5c:	2c34 2c35 2c36 2c37 2c38 2c39 3031 312c     4,5,6,7,8,9,10,1
   bca6c:	2c31 3231 312c 2c33 3431 312c 2c35 3631     1,12,13,14,15,16
   bca7c:	312c 2c37 3831 312c 2c39 3032 322c 2c31     ,17,18,19,20,21,
   bca8c:	3232 322c 2c33 3432 7d5d 6200 656c 635f     22,23,24]}.ble_c
   bca9c:	6e6f 656e 7463 6465 000a 6157 7474 6e20     onnected..Watt n
   bcaac:	776f 4400 4b4b 5920 7365 6574 6472 7961     ow.DKK Yesterday
   bcabc:	4400 4b4b 5420 646f 7961 4400 4b4b 5420     .DKK Today.DKK T
   bcacc:	6d6f 726f 6f72 0077 6857 2072 6f54 6164     omorrow.Whr Toda
   bcadc:	0079 6857 2072 6559 7473 7265 6164 0079     y.Whr Yesterday.

000bcaec <_ZTV5Timer>:
	...
   bcaf4:	4401 000b 4445 000b 4121 000b 6f43 746e     .D..ED..!A..Cont
   bcb04:	6e65 2d74 654c 676e 6874 4100 6363 7065     ent-Length.Accep
   bcb14:	0074 3462 3532 3430 3530 662d 3462 2d62     t.b4250405-fb4b-
   bcb24:	3734 3634 622d 6232 2d30 3339 3066 3665     4746-b2b0-93f0e6
   bcb34:	3131 3232 3663 6200 3234 3035 3034 2d34     1122c6.b4250404-
   bcb44:	6266 6234 342d 3437 2d36 3262 3062 392d     fb4b-4746-b2b0-9
   bcb54:	6633 6530 3136 3231 6332 0036 3462 3532     3f0e61122c6.b425
   bcb64:	3430 3330 662d 3462 2d62 3734 3634 622d     0403-fb4b-4746-b
   bcb74:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bcb84:	6200 3234 3035 3034 2d32 6266 6234 342d     .b4250402-fb4b-4
   bcb94:	3437 2d36 3262 3062 392d 6633 6530 3136     746-b2b0-93f0e61
   bcba4:	3231 6332 0036 3462 3532 3430 3630 662d     122c6.b4250406-f
   bcbb4:	3462 2d62 3734 3634 622d 6232 2d30 3339     b4b-4746-b2b0-93
   bcbc4:	3066 3665 3131 3232 3663 6200 3234 3035     f0e61122c6.b4250
   bcbd4:	3034 2d31 6266 6234 342d 3437 2d36 3262     401-fb4b-4746-b2
   bcbe4:	3062 392d 6633 6530 3136 3231 6332 0036     b0-93f0e61122c6.
   bcbf4:	6633 6131 3531 3639 652d 3765 2d66 3234     3f1a1596-ee7f-42
   bcc04:	6462 382d 6434 2d31 3162 3261 3439 3866     bd-84d1-b1a294f8
   bcc14:	6532 6663 4100 6772 6e6f 4d50 2200 0022     2ecf.ArgonPM."".
   bcc24:	2575 3430 0078 756e 6c6c 7400 7572 0065     u%04x.null.true.
   bcc34:	3125 312e 6735 2500 676c 2500 2e31 3731     %1.15g.%lg.%1.17
   bcc44:	0067 4820 5454 2f50 2e31 0d30 000a 6c63     g. HTTP/1.0...cl
   bcc54:	736f 0065 6f43 6e6e 6365 6974 6e6f 4800     ose.Connection.H
   bcc64:	534f 0054 4f50 5453 0d00 0d0a 000a 0000     OST.POST........

000bcc74 <_ZTV9JSONClass>:
	...
   bcc7c:	5e3d 000b 5e3f 000b                         =^..?^..

000bcc84 <_ZTV7JSONVar>:
	...
   bcc8c:	5e8d 000b 5e5d 000b 5e79 000b               .^..]^..y^..

000bcc98 <_ZTVN5spark13EthernetClassE>:
	...
   bcca0:	6647 000b 663d 000b 6633 000b 6629 000b     Gf..=f..3f..)f..
   bccb0:	661d 000b 6611 000b 9399 000b 93a1 000b     .f...f..........
   bccc0:	6605 000b 65fd 000b 65f3 000b 65e9 000b     .f...e...e...e..
   bccd0:	93d1 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bcce0:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   bccf0:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   bcd00:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   bcd10:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   bcd20:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   bcd30:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   bcd40:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   bcd50:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   bcd60:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   bcd70:	6465 7420 206f 7061 6570 646e 7020 6565     ed to append pee
   bcd80:	2072 6543 746e 6172 206c 6564 6976 6563     r Central device
   bcd90:	002e 6f43 6e6e 6365 6574 2064 7962 4320     ..Connected by C
   bcda0:	6e65 7274 6c61 6420 7665 6369 2e65 4400     entral device..D
   bcdb0:	7369 6f63 6e6e 6365 6574 2064 7962 7220     isconnected by r
   bcdc0:	6d65 746f 2065 6564 6976 6563 002e 7544     emote device..Du
   bcdd0:	6c70 6369 7461 6465 6320 6168 6172 7463     plicated charact
   bcde0:	7265 7369 6974 2063 6163 6e6e 746f 6220     eristic cannot b
   bcdf0:	2065 6461 6564 2e64 4600 6961 656c 2064     e added..Failed 
   bce00:	6f74 6120 7070 6e65 2064 6f6c 6163 206c     to append local 
   bce10:	6863 7261 6361 6574 6972 7473 6369 002e     characteristic..

000bce20 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bce28:	69f3 000b 6a55 000b 6b75 000b 6a7f 000b     .i..Uj..uk...j..
   bce38:	69f5 000b                                   .i..

000bce3c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bce44:	69ef 000b 6a63 000b 69f1 000b 6a85 000b     .i..cj...i...j..
   bce54:	6a15 000b                                   .j..

000bce58 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bce60:	69ed 000b 6a71 000b 735d 000b 6a8b 000b     .i..qj..]s...j..
   bce70:	6a35 000b                                   5j..

000bce74 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bce80:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bce92 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bce92:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bcea2 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bcea2:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bceb2:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bcec2:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bced4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcedc:	82b1 000b 82b7 000b 82f5 000b 82c5 000b     ................
   bceec:	82b3 000b                                   ....

000bcef0 <_ZTV9IPAddress>:
	...
   bcef8:	87f1 000b 87e1 000b 87e3 000b               ............

000bcf04 <_ZTV9USBSerial>:
	...
   bcf0c:	8913 000b 897b 000b 8951 000b 7e2d 000b     ....{...Q...-~..
   bcf1c:	8943 000b 8915 000b 8925 000b 8975 000b     C.......%...u...
   bcf2c:	8935 000b 890d 000b                         5.......

000bcf34 <_ZTV11USARTSerial>:
	...
   bcf3c:	8a65 000b 8ad1 000b 8aa9 000b 7e2d 000b     e...........-~..
   bcf4c:	8a79 000b 8a95 000b 8a87 000b 8aa3 000b     y...............
   bcf5c:	8a67 000b 8a6b 000b                         g...k...

000bcf64 <_ZTV7TwoWire>:
	...
   bcf6c:	8b31 000b 8b7b 000b 8b53 000b 8b33 000b     1...{...S...3...
   bcf7c:	8b5b 000b 8b63 000b 8b6b 000b 8b73 000b     [...c...k...s...
   bcf8c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bcf9c:	2072 203d 6425 0000                         r = %d..

000bcfa4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcfac:	8c49 000b 8c6d 000b 9157 000b 8c7b 000b     I...m...W...{...
   bcfbc:	8c4d 000b                                   M...

000bcfc0 <_ZTV9TCPClient>:
	...
   bcfc8:	8141 000b 8159 000b 8bc5 000b 8bdf 000b     A...Y...........
   bcfd8:	8fed 000b 8c09 000b 8e63 000b 8c3d 000b     ........c...=...
   bcfe8:	8ef5 000b 8d35 000b 8e91 000b 90a1 000b     ....5...........
   bcff8:	8e31 000b 8c3f 000b 8bf1 000b 8c81 000b     1...?...........
   bd008:	8d15 000b                                   ....

000bd00c <_ZTVN5spark9WiFiClassE>:
	...
   bd014:	91cf 000b 91c5 000b 91bb 000b 9163 000b     ............c...
   bd024:	91af 000b 91a3 000b 9399 000b 93a1 000b     ................
   bd034:	9197 000b 918f 000b 9185 000b 917b 000b     ............{...
   bd044:	93d1 000b                                   ....

000bd048 <_ZTV10WiFiSignal>:
	...
   bd050:	915d 000b 916d 000b 915f 000b 91d9 000b     ]...m..._.......
   bd060:	920d 000b 9239 000b 926d 000b               ....9...m...

000bd06c <_ZTVN5spark12NetworkClassE>:
	...
   bd074:	9359 000b 9363 000b 936d 000b 9377 000b     Y...c...m...w...
   bd084:	9381 000b 938d 000b 9399 000b 93a1 000b     ................
   bd094:	93a9 000b 93b5 000b 93bd 000b 93c7 000b     ................
   bd0a4:	93d1 000b                                   ....

000bd0a8 <_ZSt7nothrow>:
	...

000bd0a9 <_ZTSSt19_Sp_make_shared_tag>:
   bd0a9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd0b9:	6572 5f64 6174 0067 0000                     red_tag....

000bd0c4 <_ZTISt19_Sp_make_shared_tag>:
   bd0c4:	d104 000b d0a9 000b                         ........

000bd0cc <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd0cc:	d164 000b d0d8 000b d188 000b               d...........

000bd0d8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd0d8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd0e8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd0f8:	0045 0000                                   E...

000bd0fc <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd0fc:	0000 0000 d0cc 000b 96b1 000b 96c5 000b     ................
   bd10c:	9859 000b 9859 000b 972f 000b 9671 000b     Y...Y.../...q...
   bd11c:	9717 000b 96d9 000b 96a3 000b               ............

000bd128 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd128:	d164 000b d134 000b d0cc 000b               d...4.......

000bd134 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd134:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd144:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd154:	666e 456f 0000 0000                         nfoE....

000bd15c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd15c:	0000 0000 d128 000b 9759 000b 976d 000b     ....(...Y...m...
   bd16c:	9859 000b 9859 000b 972f 000b 9671 000b     Y...Y.../...q...
   bd17c:	982d 000b 97b9 000b 9781 000b               -...........

000bd188 <_ZTISt9type_info>:
   bd188:	d104 000b d190 000b                         ........

000bd190 <_ZTSSt9type_info>:
   bd190:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000bd19d <_ctype_>:
   bd19d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd1ad:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd1bd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd1cd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd1dd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd1ed:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd1fd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd20d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd21d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd29d:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bd2ad:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bd2bd:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd2cd:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd2dd:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd2ed:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd2fd:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd30d:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd31d:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bd32d:	646e 632e 6e00 0066 6e69 7469 0079 6e61     nd.c.nf.inity.an
   bd33d:	0000                                         ...

000bd340 <fpi.1>:
   bd340:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd350:	0000 0000                                   ....

000bd354 <fpinan.0>:
   bd354:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bd364:	0000 0000                                   ....

000bd368 <tinytens>:
   bd368:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd378:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd388:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bd398:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd3a8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd3b8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd3c8:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd3d8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd3e8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd3f8:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bd408:	7472 6b6f 632e 4200 6c61 6f6c 2063 7573     rtok.c.Balloc su
   bd418:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bd428:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd438:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd448:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd458:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd468:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd478:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd488:	2f62 696c 6362 732f 6474 696c 2f62 6467     b/libc/stdlib/gd
   bd498:	6f74 2d61 6567 6874 7865 632e 0000 0000     toa-gethex.c....

000bd4a8 <_C_numeric_locale>:
   bd4a8:	c461 000b cc71 000b d1dc 2003 0043 4f50     a...q...... C.PO
   bd4b8:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bd4c8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd4d8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd4e8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd4f8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd508:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd518:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd528:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bd538:	0063 0000 0000 0000                         c.......

000bd540 <__mprec_bigtens>:
   bd540:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd550:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd560:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd568 <__mprec_tens>:
   bd568:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd578:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd588:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd598:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd5a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd5b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd5c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd5d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd5e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd5f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd608:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd618:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd628:	9db4 79d9 7843 44ea                         ...yCx.D

000bd630 <p05.0>:
   bd630:	0005 0000 0019 0000 007d 0000               ........}...

000bd63c <link_const_variable_data_end>:
   bd63c:	000b5201 	.word	0x000b5201
   bd640:	000b5569 	.word	0x000b5569
   bd644:	000b5e4d 	.word	0x000b5e4d
   bd648:	000b5eb5 	.word	0x000b5eb5
   bd64c:	000b6651 	.word	0x000b6651
   bd650:	000b669d 	.word	0x000b669d
   bd654:	000b7e1d 	.word	0x000b7e1d
   bd658:	000b7f55 	.word	0x000b7f55
   bd65c:	000b8125 	.word	0x000b8125
   bd660:	000b816d 	.word	0x000b816d
   bd664:	000b9345 	.word	0x000b9345
   bd668:	000b94a9 	.word	0x000b94a9

000bd66c <link_constructors_end>:
   bd66c:	00000000 	.word	0x00000000
