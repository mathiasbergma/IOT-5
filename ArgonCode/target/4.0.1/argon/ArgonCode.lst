
c:/Users/mikeh/IOT_Project/Power_monitor/ArgonCode/target/4.0.1/argon/ArgonCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009680  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd6a0  000bd6a0  0000d6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd6c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000022c  2003d540  000bd6c8  0001d540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001084  2003d770  2003d770  0002d770  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bd8f4  000bd8f4  0001d8f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bd91c  000bd91c  0001d91c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00176c20  00000000  00000000  0001d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019fa0  00000000  00000000  00194540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047b4b  00000000  00000000  001ae4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003c10  00000000  00000000  001f602b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c7a8  00000000  00000000  001f9c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045e57  00000000  00000000  002063e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00057651  00000000  00000000  0024c23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144145  00000000  00000000  002a388b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b144  00000000  00000000  003e79d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 f924 	bl	ba27e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 f946 	bl	ba2ce <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d540 	.word	0x2003d540
   b404c:	000bd6c8 	.word	0x000bd6c8
   b4050:	2003d76c 	.word	0x2003d76c
   b4054:	2003d770 	.word	0x2003d770
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 f909 	bl	b8278 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd664 	.word	0x000bd664
   b4080:	000bd694 	.word	0x000bd694

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 be9c 	b.w	b4dc0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 ffb5 	bl	b4ff8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 b8a9 	b.w	b81e8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 ba5d 	b.w	b6554 <malloc>

000b409a <_Znaj>:
   b409a:	f002 ba5b 	b.w	b6554 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 ba61 	b.w	b6564 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv>:
}
/**
 * @brief    Sets a flag when a new BLE connection is established
 */
void BLEOnConnectcallback(const BlePeerDevice &peer, void *context)
{
   b40b4:	b508      	push	{r3, lr}
    NewBLEConnection = true;
   b40b6:	4b04      	ldr	r3, [pc, #16]	; (b40c8 <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x14>)
   b40b8:	2201      	movs	r2, #1
   b40ba:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40bc:	f001 ff5c 	bl	b5f78 <HAL_Timer_Get_Milli_Seconds>
    last_connect = millis();
   b40c0:	4b02      	ldr	r3, [pc, #8]	; (b40cc <_Z20BLEOnConnectcallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   b40c2:	6018      	str	r0, [r3, #0]
}
   b40c4:	bd08      	pop	{r3, pc}
   b40c6:	bf00      	nop
   b40c8:	2003d78d 	.word	0x2003d78d
   b40cc:	2003dcf0 	.word	0x2003dcf0

000b40d0 <_Z13handle_sensorv>:
/**
 * @brief    IRQ handler for the KW sensor. This function is called every time the KW sensor detects a pulse.
 */
void handle_sensor(void)
{
   b40d0:	b508      	push	{r3, lr}
   b40d2:	f001 ff51 	bl	b5f78 <HAL_Timer_Get_Milli_Seconds>
    static unsigned long last_read = 0;
    unsigned long current_reading = millis();
    unsigned long delta = current_reading - last_read;
   b40d6:	490c      	ldr	r1, [pc, #48]	; (b4108 <_Z13handle_sensorv+0x38>)
   b40d8:	680b      	ldr	r3, [r1, #0]
   b40da:	1ac3      	subs	r3, r0, r3

    // Check if we have a valid reading. I.e. at least 100 ms since last reading, which is equal to 36kW
    if (delta > 100)
   b40dc:	2b64      	cmp	r3, #100	; 0x64
   b40de:	d911      	bls.n	b4104 <_Z13handle_sensorv+0x34>
    {
        // We have a valid reading
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40e0:	4a0a      	ldr	r2, [pc, #40]	; (b410c <_Z13handle_sensorv+0x3c>)
   b40e2:	fbb2 f3f3 	udiv	r3, r2, r3
   b40e6:	4a0a      	ldr	r2, [pc, #40]	; (b4110 <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b40e8:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40ea:	6013      	str	r3, [r2, #0]

        // One flash from sensor equals 1 Whr - Add to total
        wh_today[currentHour] += 1;
   b40ec:	4b09      	ldr	r3, [pc, #36]	; (b4114 <_Z13handle_sensorv+0x44>)
   b40ee:	7819      	ldrb	r1, [r3, #0]
   b40f0:	4b09      	ldr	r3, [pc, #36]	; (b4118 <_Z13handle_sensorv+0x48>)
   b40f2:	681a      	ldr	r2, [r3, #0]
   b40f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   b40f8:	3301      	adds	r3, #1
   b40fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update flag - Transmit sensor values
        TRANSMIT_SENSOR = true;
   b40fe:	4b07      	ldr	r3, [pc, #28]	; (b411c <_Z13handle_sensorv+0x4c>)
   b4100:	2201      	movs	r2, #1
   b4102:	701a      	strb	r2, [r3, #0]
    }
}
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	2003d83c 	.word	0x2003d83c
   b410c:	0036ee80 	.word	0x0036ee80
   b4110:	2003d8a4 	.word	0x2003d8a4
   b4114:	2003d8d0 	.word	0x2003d8d0
   b4118:	2003e1a4 	.word	0x2003e1a4
   b411c:	2003d792 	.word	0x2003d792

000b4120 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4120:	6943      	ldr	r3, [r0, #20]
   b4122:	b113      	cbz	r3, b412a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4124:	6983      	ldr	r3, [r0, #24]
   b4126:	300c      	adds	r0, #12
   b4128:	4718      	bx	r3
            callback();
        }
    }
   b412a:	4770      	bx	lr

000b412c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b412c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b412e:	2100      	movs	r1, #0
   b4130:	4604      	mov	r4, r0
   b4132:	4608      	mov	r0, r1
   b4134:	f001 ffca 	bl	b60cc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4138:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b413a:	4620      	mov	r0, r4
   b413c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b413e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4140:	f001 ffdc 	bl	b60fc <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4144:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4146:	b10c      	cbz	r4, b414c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4148:	2301      	movs	r3, #1
   b414a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b414c:	2100      	movs	r1, #0
   b414e:	2001      	movs	r0, #1
   b4150:	f001 ffbc 	bl	b60cc <os_thread_scheduling>
            }
        }
        if (t) {
   b4154:	b12c      	cbz	r4, b4162 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4156:	6823      	ldr	r3, [r4, #0]
   b4158:	4620      	mov	r0, r4
   b415a:	689b      	ldr	r3, [r3, #8]
   b415c:	4798      	blx	r3
            t->running = false;
   b415e:	2300      	movs	r3, #0
   b4160:	7123      	strb	r3, [r4, #4]
        }
    }
   b4162:	b002      	add	sp, #8
   b4164:	bd10      	pop	{r4, pc}

000b4166 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4166:	2a01      	cmp	r2, #1
   b4168:	d102      	bne.n	b4170 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416a:	6001      	str	r1, [r0, #0]
      }
   b416c:	2000      	movs	r0, #0
   b416e:	4770      	bx	lr
	  switch (__op)
   b4170:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4172:	bf04      	itt	eq
   b4174:	680b      	ldreq	r3, [r1, #0]
   b4176:	6003      	streq	r3, [r0, #0]
	      break;
   b4178:	e7f8      	b.n	b416c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417a:	6803      	ldr	r3, [r0, #0]
   b417c:	4718      	bx	r3

000b417e <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b417e:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4180:	6880      	ldr	r0, [r0, #8]
   b4182:	b130      	cbz	r0, b4192 <_ZN5Timer4stopEj.isra.0+0x14>
   b4184:	2300      	movs	r3, #0
   b4186:	e9cd 1300 	strd	r1, r3, [sp]
   b418a:	461a      	mov	r2, r3
   b418c:	2102      	movs	r1, #2
   b418e:	f001 ffbd 	bl	b610c <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b4192:	b003      	add	sp, #12
   b4194:	f85d fb04 	ldr.w	pc, [sp], #4

000b4198 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b4198:	b530      	push	{r4, r5, lr}
   b419a:	4605      	mov	r5, r0
   b419c:	b085      	sub	sp, #20
   b419e:	460c      	mov	r4, r1
        stop(fromISR);
   b41a0:	4611      	mov	r1, r2
   b41a2:	9203      	str	r2, [sp, #12]
   b41a4:	f7ff ffeb 	bl	b417e <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b41a8:	68a8      	ldr	r0, [r5, #8]
   b41aa:	b130      	cbz	r0, b41ba <_ZN5Timer6_startEjb.isra.0+0x22>
   b41ac:	2300      	movs	r3, #0
   b41ae:	e9cd 4300 	strd	r4, r3, [sp]
   b41b2:	9a03      	ldr	r2, [sp, #12]
   b41b4:	4619      	mov	r1, r3
   b41b6:	f001 ffa9 	bl	b610c <os_timer_change>
    }
   b41ba:	b005      	add	sp, #20
   b41bc:	bd30      	pop	{r4, r5, pc}
	...

000b41c0 <_Z10check_timev>:
}
/**
 * @brief     Checks the current time and decides if it is time to update the prices, update watt hours or rotate price and watt hour arrays.
 */
void check_time(void)
{
   b41c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentHour = Time.hour();
   b41c4:	f003 ff80 	bl	b80c8 <_ZN9TimeClass4hourEv>
   b41c8:	4f26      	ldr	r7, [pc, #152]	; (b4264 <_Z10check_timev+0xa4>)

    // Set new countdown to aim for xx:00:01 within a second (+1 for safe side)
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);

    // Start timer again with new countdown
    timer.stop();
   b41ca:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4268 <_Z10check_timev+0xa8>
    currentHour = Time.hour();
   b41ce:	7038      	strb	r0, [r7, #0]
    uint8_t currentMinute = Time.minute();
   b41d0:	f003 ff86 	bl	b80e0 <_ZN9TimeClass6minuteEv>
   b41d4:	b2c6      	uxtb	r6, r0
    uint8_t currentSecond = Time.second();
   b41d6:	f003 ff8f 	bl	b80f8 <_ZN9TimeClass6secondEv>
   b41da:	4605      	mov	r5, r0
    uint8_t currentDay = Time.day();
   b41dc:	f003 ff98 	bl	b8110 <_ZN9TimeClass3dayEv>
    timer.stop();
   b41e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    uint8_t currentDay = Time.day();
   b41e4:	4604      	mov	r4, r0
    timer.stop();
   b41e6:	4640      	mov	r0, r8
   b41e8:	f7ff ffc9 	bl	b417e <_ZN5Timer4stopEj.isra.0>
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   b41ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
   b41f0:	b178      	cbz	r0, b4212 <_Z10check_timev+0x52>
   b41f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    countdown = ((60 - currentMinute) * 60000) - (currentSecond + 1);
   b41f6:	b2ed      	uxtb	r5, r5
   b41f8:	2200      	movs	r2, #0
   b41fa:	e9cd 1200 	strd	r1, r2, [sp]
   b41fe:	f1c6 033c 	rsb	r3, r6, #60	; 0x3c
   b4202:	f64e 2160 	movw	r1, #60000	; 0xea60
   b4206:	43ed      	mvns	r5, r5
   b4208:	fb01 5303 	mla	r3, r1, r3, r5
   b420c:	2103      	movs	r1, #3
   b420e:	f001 ff7d 	bl	b610c <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4212:	4815      	ldr	r0, [pc, #84]	; (b4268 <_Z10check_timev+0xa8>)
   b4214:	2200      	movs	r2, #0
   b4216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b421a:	f7ff ffbd 	bl	b4198 <_ZN5Timer6_startEjb.isra.0>
    timer.changePeriod(countdown);
    timer.start();

    if ((currentHour == PULL_TIME_1) && currentDay != oneShotGuard)
   b421e:	783b      	ldrb	r3, [r7, #0]
   b4220:	2b0d      	cmp	r3, #13
   b4222:	d114      	bne.n	b424e <_Z10check_timev+0x8e>
   b4224:	4a11      	ldr	r2, [pc, #68]	; (b426c <_Z10check_timev+0xac>)
   b4226:	6811      	ldr	r1, [r2, #0]
   b4228:	b2e4      	uxtb	r4, r4
   b422a:	42a1      	cmp	r1, r4
   b422c:	d003      	beq.n	b4236 <_Z10check_timev+0x76>
    {
        oneShotGuard = currentDay;
   b422e:	6014      	str	r4, [r2, #0]
        GET_DATA = true;
   b4230:	4a0f      	ldr	r2, [pc, #60]	; (b4270 <_Z10check_timev+0xb0>)
    }
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
    {
        oneShotGuard2 = currentDay;

        ROTATE = true;
   b4232:	2101      	movs	r1, #1
   b4234:	7011      	strb	r1, [r2, #0]
    }
    if (currentMinute == 0 && currentHour != oneShotGuard3)
   b4236:	b93e      	cbnz	r6, b4248 <_Z10check_timev+0x88>
   b4238:	4a0e      	ldr	r2, [pc, #56]	; (b4274 <_Z10check_timev+0xb4>)
   b423a:	6811      	ldr	r1, [r2, #0]
   b423c:	428b      	cmp	r3, r1
    {
        oneShotGuard3 = currentHour;
   b423e:	bf1f      	itttt	ne
   b4240:	6013      	strne	r3, [r2, #0]
        // Update the wh_today array
        UPDATE_WH_TODAY = true;
   b4242:	4b0d      	ldrne	r3, [pc, #52]	; (b4278 <_Z10check_timev+0xb8>)
   b4244:	2201      	movne	r2, #1
   b4246:	701a      	strbne	r2, [r3, #0]
    }
   b4248:	b002      	add	sp, #8
   b424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((currentHour == PULL_TIME_2) && currentDay != oneShotGuard2)
   b424e:	2b00      	cmp	r3, #0
   b4250:	d1f1      	bne.n	b4236 <_Z10check_timev+0x76>
   b4252:	4a0a      	ldr	r2, [pc, #40]	; (b427c <_Z10check_timev+0xbc>)
   b4254:	6811      	ldr	r1, [r2, #0]
   b4256:	b2e4      	uxtb	r4, r4
   b4258:	42a1      	cmp	r1, r4
   b425a:	d0ec      	beq.n	b4236 <_Z10check_timev+0x76>
        oneShotGuard2 = currentDay;
   b425c:	6014      	str	r4, [r2, #0]
        ROTATE = true;
   b425e:	4a08      	ldr	r2, [pc, #32]	; (b4280 <_Z10check_timev+0xc0>)
   b4260:	e7e7      	b.n	b4232 <_Z10check_timev+0x72>
   b4262:	bf00      	nop
   b4264:	2003d8d0 	.word	0x2003d8d0
   b4268:	2003e188 	.word	0x2003e188
   b426c:	2003d570 	.word	0x2003d570
   b4270:	2003d78c 	.word	0x2003d78c
   b4274:	2003d578 	.word	0x2003d578
   b4278:	2003d793 	.word	0x2003d793
   b427c:	2003d574 	.word	0x2003d574
   b4280:	2003d78e 	.word	0x2003d78e

000b4284 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4284:	b40e      	push	{r1, r2, r3}
   b4286:	b503      	push	{r0, r1, lr}
   b4288:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b428a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b428c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4290:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4292:	f003 fe44 	bl	b7f1e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4296:	b002      	add	sp, #8
   b4298:	f85d eb04 	ldr.w	lr, [sp], #4
   b429c:	b003      	add	sp, #12
   b429e:	4770      	bx	lr

000b42a0 <_Z9myHandlerPKcS0_>:
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
}

void myHandler(const char *event, const char *data)
{
   b42a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   b42a4:	4605      	mov	r5, r0

    /* When transmissions are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b42a6:	4608      	mov	r0, r1
{
   b42a8:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b42aa:	f006 f886 	bl	ba3ba <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b42ae:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b42b0:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b42b2:	a801      	add	r0, sp, #4
   b42b4:	f006 f85b 	bl	ba36e <strcpy>
    //Serial.printf("event_str: %s\n", event_str);
    // Token used for strtok()
    char *token = NULL;
    Serial.println("in the callback");
   b42b8:	f004 fb98 	bl	b89ec <_Z16_fetch_usbserialv>
   b42bc:	493c      	ldr	r1, [pc, #240]	; (b43b0 <_Z9myHandlerPKcS0_+0x110>)
    // Extract the numbered part of eventname and use it for indexing "temp"
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42be:	4d3d      	ldr	r5, [pc, #244]	; (b43b4 <_Z9myHandlerPKcS0_+0x114>)
    Serial.println("in the callback");
   b42c0:	f003 fe05 	bl	b7ece <_ZN5Print7printlnEPKc>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b42c4:	493c      	ldr	r1, [pc, #240]	; (b43b8 <_Z9myHandlerPKcS0_+0x118>)
   b42c6:	a801      	add	r0, sp, #4
   b42c8:	f006 fee4 	bl	bb094 <strtok>
   b42cc:	f005 ffc3 	bl	ba256 <atoi>
   b42d0:	4621      	mov	r1, r4
   b42d2:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b42d6:	f006 f831 	bl	ba33c <strcat>
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b42da:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b42de:	d214      	bcs.n	b430a <_Z9myHandlerPKcS0_+0x6a>
    }

    if (populate)
    {
        // Display what has been received
        Serial.printf("%s\n", temp);
   b42e0:	f004 fb84 	bl	b89ec <_Z16_fetch_usbserialv>
   b42e4:	4935      	ldr	r1, [pc, #212]	; (b43bc <_Z9myHandlerPKcS0_+0x11c>)
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
            }
            else
            {
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b42e6:	4f36      	ldr	r7, [pc, #216]	; (b43c0 <_Z9myHandlerPKcS0_+0x120>)
        Serial.printf("%s\n", temp);
   b42e8:	462a      	mov	r2, r5
   b42ea:	f7ff ffcb 	bl	b4284 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b42ee:	4935      	ldr	r1, [pc, #212]	; (b43c4 <_Z9myHandlerPKcS0_+0x124>)
   b42f0:	4628      	mov	r0, r5
   b42f2:	f006 fecf 	bl	bb094 <strtok>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b42f6:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
   b42fa:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < MAX_RANGE; i++)
   b42fe:	2400      	movs	r4, #0
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4300:	2600      	movs	r6, #0
            if (token == NULL)
   b4302:	b928      	cbnz	r0, b4310 <_Z9myHandlerPKcS0_+0x70>
            }
            token = strtok(NULL, ",!");

        }
        CALCULATE = true;
   b4304:	4b30      	ldr	r3, [pc, #192]	; (b43c8 <_Z9myHandlerPKcS0_+0x128>)
   b4306:	2201      	movs	r2, #1
   b4308:	701a      	strb	r2, [r3, #0]
    }
   b430a:	b004      	add	sp, #16
   b430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (i >= 0 && i < 7)
   b4310:	2c06      	cmp	r4, #6
   b4312:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b43cc <_Z9myHandlerPKcS0_+0x12c>
   b4316:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   b431a:	dc19      	bgt.n	b4350 <_Z9myHandlerPKcS0_+0xb0>
                 cost_tomorrow[i] = (atof(token) / 1000.0)+transport.low;
   b431c:	f005 ff98 	bl	ba250 <atof>
   b4320:	f8da 3000 	ldr.w	r3, [sl]
   b4324:	4632      	mov	r2, r6
   b4326:	ec51 0b10 	vmov	r0, r1, d0
   b432a:	441d      	add	r5, r3
   b432c:	463b      	mov	r3, r7
   b432e:	f005 fda7 	bl	b9e80 <__aeabi_ddiv>
   b4332:	a31b      	add	r3, pc, #108	; (adr r3, b43a0 <_Z9myHandlerPKcS0_+0x100>)
   b4334:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4338:	f005 fac2 	bl	b98c0 <__adddf3>
        for (int i = 0; i < MAX_RANGE; i++)
   b433c:	3401      	adds	r4, #1
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b433e:	e9c5 0100 	strd	r0, r1, [r5]
            token = strtok(NULL, ",!");
   b4342:	4920      	ldr	r1, [pc, #128]	; (b43c4 <_Z9myHandlerPKcS0_+0x124>)
   b4344:	2000      	movs	r0, #0
   b4346:	f006 fea5 	bl	bb094 <strtok>
        for (int i = 0; i < MAX_RANGE; i++)
   b434a:	2c18      	cmp	r4, #24
   b434c:	d1d9      	bne.n	b4302 <_Z9myHandlerPKcS0_+0x62>
   b434e:	e7d9      	b.n	b4304 <_Z9myHandlerPKcS0_+0x64>
            else if (i > 16 && i < 22)
   b4350:	f1a4 0311 	sub.w	r3, r4, #17
   b4354:	2b04      	cmp	r3, #4
   b4356:	d80d      	bhi.n	b4374 <_Z9myHandlerPKcS0_+0xd4>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.high;
   b4358:	f005 ff7a 	bl	ba250 <atof>
   b435c:	f8da 3000 	ldr.w	r3, [sl]
   b4360:	4632      	mov	r2, r6
   b4362:	ec51 0b10 	vmov	r0, r1, d0
   b4366:	441d      	add	r5, r3
   b4368:	463b      	mov	r3, r7
   b436a:	f005 fd89 	bl	b9e80 <__aeabi_ddiv>
   b436e:	4642      	mov	r2, r8
   b4370:	464b      	mov	r3, r9
   b4372:	e7e1      	b.n	b4338 <_Z9myHandlerPKcS0_+0x98>
                cost_tomorrow[i] = (atof(token) / 1000.0)+transport.medium;
   b4374:	f005 ff6c 	bl	ba250 <atof>
   b4378:	f8da 3000 	ldr.w	r3, [sl]
   b437c:	4632      	mov	r2, r6
   b437e:	ec51 0b10 	vmov	r0, r1, d0
   b4382:	441d      	add	r5, r3
   b4384:	463b      	mov	r3, r7
   b4386:	f005 fd7b 	bl	b9e80 <__aeabi_ddiv>
   b438a:	a307      	add	r3, pc, #28	; (adr r3, b43a8 <_Z9myHandlerPKcS0_+0x108>)
   b438c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4390:	e7d2      	b.n	b4338 <_Z9myHandlerPKcS0_+0x98>
   b4392:	bf00      	nop
   b4394:	f3af 8000 	nop.w
   b4398:	2d0e5604 	.word	0x2d0e5604
   b439c:	3ffe9db2 	.word	0x3ffe9db2
   b43a0:	ebedfa44 	.word	0xebedfa44
   b43a4:	3fcb39c0 	.word	0x3fcb39c0
   b43a8:	42c3c9ef 	.word	0x42c3c9ef
   b43ac:	3fe469ad 	.word	0x3fe469ad
   b43b0:	000bc448 	.word	0x000bc448
   b43b4:	2003dd84 	.word	0x2003dd84
   b43b8:	000bc458 	.word	0x000bc458
   b43bc:	000bc460 	.word	0x000bc460
   b43c0:	408f4000 	.word	0x408f4000
   b43c4:	000bc464 	.word	0x000bc464
   b43c8:	2003d771 	.word	0x2003d771
   b43cc:	2003d8c8 	.word	0x2003d8c8

000b43d0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d0:	b40e      	push	{r1, r2, r3}
   b43d2:	b503      	push	{r0, r1, lr}
   b43d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43d6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43de:	f003 fd9e 	bl	b7f1e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43e2:	b002      	add	sp, #8
   b43e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e8:	b003      	add	sp, #12
   b43ea:	4770      	bx	lr

000b43ec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43ec:	b510      	push	{r4, lr}
      if (_M_manager)
   b43ee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43f0:	4604      	mov	r4, r0
      if (_M_manager)
   b43f2:	b113      	cbz	r3, b43fa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43f4:	2203      	movs	r2, #3
   b43f6:	4601      	mov	r1, r0
   b43f8:	4798      	blx	r3
    }
   b43fa:	4620      	mov	r0, r4
   b43fc:	bd10      	pop	{r4, pc}
	...

000b4400 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4400:	b538      	push	{r3, r4, r5, lr}
   b4402:	4b0f      	ldr	r3, [pc, #60]	; (b4440 <_ZN5TimerD1Ev+0x40>)
   b4404:	6003      	str	r3, [r0, #0]
        if (handle) {
   b4406:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b4408:	4604      	mov	r4, r0
        if (handle) {
   b440a:	b19b      	cbz	r3, b4434 <_ZN5TimerD1Ev+0x34>
            stop();
   b440c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4410:	f7ff feb5 	bl	b417e <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b4414:	68a0      	ldr	r0, [r4, #8]
   b4416:	2100      	movs	r1, #0
   b4418:	f001 fe98 	bl	b614c <os_timer_set_id>
            while (running) {
   b441c:	7923      	ldrb	r3, [r4, #4]
   b441e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4422:	b113      	cbz	r3, b442a <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b4424:	f001 fe4a 	bl	b60bc <os_thread_yield>
            while (running) {
   b4428:	e7f8      	b.n	b441c <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b442a:	68a0      	ldr	r0, [r4, #8]
   b442c:	4629      	mov	r1, r5
   b442e:	f001 fe5d 	bl	b60ec <os_timer_destroy>
            handle = nullptr;
   b4432:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4434:	f104 000c 	add.w	r0, r4, #12
   b4438:	f7ff ffd8 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    }
   b443c:	4620      	mov	r0, r4
   b443e:	bd38      	pop	{r3, r4, r5, pc}
   b4440:	000bcb1c 	.word	0x000bcb1c

000b4444 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4444:	b510      	push	{r4, lr}
   b4446:	4604      	mov	r4, r0
    }
   b4448:	f7ff ffda 	bl	b4400 <_ZN5TimerD1Ev>
   b444c:	4620      	mov	r0, r4
   b444e:	211c      	movs	r1, #28
   b4450:	f7ff fe25 	bl	b409e <_ZdlPvj>
   b4454:	4620      	mov	r0, r4
   b4456:	bd10      	pop	{r4, pc}

000b4458 <_Z9ble_setupv>:
        }
*/
void BLEOnConnectcallback(const BlePeerDevice& peer, void* context);


void ble_setup(void){
   b4458:	b570      	push	{r4, r5, r6, lr}
   b445a:	b090      	sub	sp, #64	; 0x40
    BLE.selectAntenna(BleAntennaType::EXTERNAL);// change to internal if an external antenna is not attached.
   b445c:	f002 fe64 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4460:	2102      	movs	r1, #2
   b4462:	f002 feb2 	bl	b71ca <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   b4466:	f002 fe5f 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b446a:	f002 fea7 	bl	b71bc <_ZNK8particle14BleLocalDevice2onEv>
    //*****BLE setup*****
    BLE.addCharacteristic(WattCharacteristic);
   b446e:	f002 fe5b 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4472:	4a3e      	ldr	r2, [pc, #248]	; (b456c <_Z9ble_setupv+0x114>)
   b4474:	4c3e      	ldr	r4, [pc, #248]	; (b4570 <_Z9ble_setupv+0x118>)
   b4476:	4601      	mov	r1, r0
   b4478:	a80b      	add	r0, sp, #44	; 0x2c
   b447a:	f003 fbdd 	bl	b7c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b447e:	a80b      	add	r0, sp, #44	; 0x2c
   b4480:	f002 ff57 	bl	b7332 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkYesterdayCharacteristic);
   b4484:	f002 fe50 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4488:	4a3a      	ldr	r2, [pc, #232]	; (b4574 <_Z9ble_setupv+0x11c>)
   b448a:	4601      	mov	r1, r0
   b448c:	a80b      	add	r0, sp, #44	; 0x2c
   b448e:	f003 fbd3 	bl	b7c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4492:	a80b      	add	r0, sp, #44	; 0x2c
   b4494:	f002 ff4d 	bl	b7332 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTodayCharacteristic);
   b4498:	f002 fe46 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b449c:	4a36      	ldr	r2, [pc, #216]	; (b4578 <_Z9ble_setupv+0x120>)
   b449e:	4601      	mov	r1, r0
   b44a0:	a80b      	add	r0, sp, #44	; 0x2c
   b44a2:	f003 fbc9 	bl	b7c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44a6:	a80b      	add	r0, sp, #44	; 0x2c
   b44a8:	f002 ff43 	bl	b7332 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(DkkTomorrowCharacteristic);
   b44ac:	f002 fe3c 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44b0:	4a32      	ldr	r2, [pc, #200]	; (b457c <_Z9ble_setupv+0x124>)
   b44b2:	4601      	mov	r1, r0
   b44b4:	a80b      	add	r0, sp, #44	; 0x2c
   b44b6:	f003 fbbf 	bl	b7c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ba:	a80b      	add	r0, sp, #44	; 0x2c
   b44bc:	f002 ff39 	bl	b7332 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrTodayCharacteristic);
   b44c0:	f002 fe32 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44c4:	4a2e      	ldr	r2, [pc, #184]	; (b4580 <_Z9ble_setupv+0x128>)
   b44c6:	4601      	mov	r1, r0
   b44c8:	a80b      	add	r0, sp, #44	; 0x2c
   b44ca:	f003 fbb5 	bl	b7c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44ce:	a80b      	add	r0, sp, #44	; 0x2c
   b44d0:	f002 ff2f 	bl	b7332 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(WhrYesterdayCharacteristic);
   b44d4:	f002 fe28 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b44d8:	4a2a      	ldr	r2, [pc, #168]	; (b4584 <_Z9ble_setupv+0x12c>)
   b44da:	4601      	mov	r1, r0
   b44dc:	a80b      	add	r0, sp, #44	; 0x2c
   b44de:	f003 fbab 	bl	b7c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b44e2:	a80b      	add	r0, sp, #44	; 0x2c
   b44e4:	f002 ff25 	bl	b7332 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   b44e8:	a803      	add	r0, sp, #12
   b44ea:	f003 f858 	bl	b759e <_ZN8particle18BleAdvertisingDataC1Ev>
    advData.appendLocalName(argonName);
   b44ee:	4b26      	ldr	r3, [pc, #152]	; (b4588 <_Z9ble_setupv+0x130>)
   b44f0:	a803      	add	r0, sp, #12
   b44f2:	6819      	ldr	r1, [r3, #0]
   b44f4:	f003 f866 	bl	b75c4 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    advData.appendServiceUUID(powermonitorserviceUuid);
   b44f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44fa:	ad06      	add	r5, sp, #24
   b44fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b44fe:	ad06      	add	r5, sp, #24
   b4500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4502:	6826      	ldr	r6, [r4, #0]
   b4504:	ac0b      	add	r4, sp, #44	; 0x2c
   b4506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4508:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b450a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b450c:	f002 fc0a 	bl	b6d24 <_ZNK8particle7BleUuid4typeEv>
   b4510:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4512:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4514:	bb0c      	cbnz	r4, b455a <_Z9ble_setupv+0x102>
            uint16_t uuid16 = tempUUID.shorted();
   b4516:	f002 fc21 	bl	b6d5c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b451a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b451c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4520:	2302      	movs	r3, #2
   b4522:	f10d 020a 	add.w	r2, sp, #10
   b4526:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4528:	a803      	add	r0, sp, #12
   b452a:	f003 f82d 	bl	b7588 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&advData);
   b452e:	f002 fdfb 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4532:	2200      	movs	r2, #0
   b4534:	a903      	add	r1, sp, #12
   b4536:	f002 fe8f 	bl	b7258 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Serial.println("Waiting for BLEclient connection...");
   b453a:	f004 fa57 	bl	b89ec <_Z16_fetch_usbserialv>
   b453e:	4913      	ldr	r1, [pc, #76]	; (b458c <_Z9ble_setupv+0x134>)
   b4540:	f003 fcc5 	bl	b7ece <_ZN5Print7printlnEPKc>
    BLE.onConnected(BLEOnConnectcallback);
   b4544:	f002 fdf0 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4548:	4911      	ldr	r1, [pc, #68]	; (b4590 <_Z9ble_setupv+0x138>)
   b454a:	2200      	movs	r2, #0
   b454c:	f003 fa76 	bl	b7a3c <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4550:	9803      	ldr	r0, [sp, #12]
   b4552:	f002 f807 	bl	b6564 <free>

}
   b4556:	b010      	add	sp, #64	; 0x40
   b4558:	bd70      	pop	{r4, r5, r6, pc}
   b455a:	f002 fc01 	bl	b6d60 <_ZNK8particle7BleUuid8rawBytesEv>
   b455e:	2300      	movs	r3, #0
   b4560:	9300      	str	r3, [sp, #0]
   b4562:	4602      	mov	r2, r0
   b4564:	2310      	movs	r3, #16
   b4566:	2107      	movs	r1, #7
   b4568:	e7de      	b.n	b4528 <_Z9ble_setupv+0xd0>
   b456a:	bf00      	nop
   b456c:	2003d794 	.word	0x2003d794
   b4570:	2003d7c0 	.word	0x2003d7c0
   b4574:	2003d784 	.word	0x2003d784
   b4578:	2003d774 	.word	0x2003d774
   b457c:	2003d77c 	.word	0x2003d77c
   b4580:	2003d79c 	.word	0x2003d79c
   b4584:	2003d7a4 	.word	0x2003d7a4
   b4588:	2003d554 	.word	0x2003d554
   b458c:	000bc467 	.word	0x000bc467
   b4590:	000b40b5 	.word	0x000b40b5
   b4594:	00000000 	.word	0x00000000

000b4598 <_Z8calc_lowPA2_iPdi>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int size)
{
   b4598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b459c:	ed2d 8b02 	vpush	{d8}
    int cnt = 0;
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0.0;
   b45a0:	ed9f 7b51 	vldr	d7, [pc, #324]	; b46e8 <_Z8calc_lowPA2_iPdi+0x150>
{
   b45a4:	b09b      	sub	sp, #108	; 0x6c
    double last_small = 1000.0; // Assign any absurdly high value
   b45a6:	f8df 9164 	ldr.w	r9, [pc, #356]	; b470c <_Z8calc_lowPA2_iPdi+0x174>
{
   b45aa:	9201      	str	r2, [sp, #4]
   b45ac:	4606      	mov	r6, r0
   b45ae:	460f      	mov	r7, r1
   b45b0:	468b      	mov	fp, r1

    for (int i = 0; i < size; i++)
   b45b2:	f04f 0a00 	mov.w	sl, #0
    double last_small = 1000.0; // Assign any absurdly high value
   b45b6:	f04f 0800 	mov.w	r8, #0
    double last_big = 0.0;
   b45ba:	eeb0 8a47 	vmov.f32	s16, s14
   b45be:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < size; i++)
   b45c2:	9b01      	ldr	r3, [sp, #4]
   b45c4:	459a      	cmp	sl, r3
   b45c6:	da16      	bge.n	b45f6 <_Z8calc_lowPA2_iPdi+0x5e>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b45c8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
   b45cc:	ec53 2b18 	vmov	r2, r3, d8
   b45d0:	4620      	mov	r0, r4
   b45d2:	4629      	mov	r1, r5
   b45d4:	f005 fdba 	bl	ba14c <__aeabi_dcmpgt>
   b45d8:	b108      	cbz	r0, b45de <_Z8calc_lowPA2_iPdi+0x46>
        {
            last_big = cost[i];
   b45da:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b45de:	4642      	mov	r2, r8
   b45e0:	464b      	mov	r3, r9
   b45e2:	4620      	mov	r0, r4
   b45e4:	4629      	mov	r1, r5
   b45e6:	f005 fd93 	bl	ba110 <__aeabi_dcmplt>
   b45ea:	b108      	cbz	r0, b45f0 <_Z8calc_lowPA2_iPdi+0x58>
        {
            last_small = cost[i];
   b45ec:	46a0      	mov	r8, r4
   b45ee:	46a9      	mov	r9, r5
    for (int i = 0; i < size; i++)
   b45f0:	f10a 0a01 	add.w	sl, sl, #1
   b45f4:	e7e5      	b.n	b45c2 <_Z8calc_lowPA2_iPdi+0x2a>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b45f6:	4642      	mov	r2, r8
   b45f8:	464b      	mov	r3, r9
   b45fa:	ec51 0b18 	vmov	r0, r1, d8
   b45fe:	f005 f95d 	bl	b98bc <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4602:	a340      	add	r3, pc, #256	; (adr r3, b4704 <_Z8calc_lowPA2_iPdi+0x16c>)
   b4604:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4608:	f005 fb10 	bl	b9c2c <__aeabi_dmul>
   b460c:	4642      	mov	r2, r8
   b460e:	464b      	mov	r3, r9
   b4610:	f005 f956 	bl	b98c0 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i < size; i++)
   b4614:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4616:	4682      	mov	sl, r0
   b4618:	468b      	mov	fp, r1
    int idx = 0;
   b461a:	462c      	mov	r4, r5
    for (int i = 0; i < size; i++)
   b461c:	9b01      	ldr	r3, [sp, #4]
   b461e:	429d      	cmp	r5, r3
   b4620:	da15      	bge.n	b464e <_Z8calc_lowPA2_iPdi+0xb6>
    {
        
        if (cost[i] < small_offset)
   b4622:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b4626:	4652      	mov	r2, sl
   b4628:	465b      	mov	r3, fp
   b462a:	f005 fd71 	bl	ba110 <__aeabi_dcmplt>
   b462e:	b160      	cbz	r0, b464a <_Z8calc_lowPA2_iPdi+0xb2>
        {
            low_range_hour[idx] = i;
   b4630:	ab1a      	add	r3, sp, #104	; 0x68
   b4632:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b4636:	f843 5c60 	str.w	r5, [r3, #-96]
            Serial.printf("low_range_hour[%d]: %d\n",idx, low_range_hour[idx]);
   b463a:	f004 f9d7 	bl	b89ec <_Z16_fetch_usbserialv>
   b463e:	4622      	mov	r2, r4
   b4640:	492b      	ldr	r1, [pc, #172]	; (b46f0 <_Z8calc_lowPA2_iPdi+0x158>)
   b4642:	462b      	mov	r3, r5
   b4644:	f7ff fe1e 	bl	b4284 <_ZN5Print6printfEPKcz>
            idx++;
   b4648:	3401      	adds	r4, #1
    for (int i = 0; i < size; i++)
   b464a:	3501      	adds	r5, #1
   b464c:	e7e6      	b.n	b461c <_Z8calc_lowPA2_iPdi+0x84>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b464e:	f004 f9cd 	bl	b89ec <_Z16_fetch_usbserialv>
   b4652:	ec53 2b18 	vmov	r2, r3, d8
   b4656:	4927      	ldr	r1, [pc, #156]	; (b46f4 <_Z8calc_lowPA2_iPdi+0x15c>)
   b4658:	f7ff fe14 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b465c:	f004 f9c6 	bl	b89ec <_Z16_fetch_usbserialv>
   b4660:	4925      	ldr	r1, [pc, #148]	; (b46f8 <_Z8calc_lowPA2_iPdi+0x160>)
   b4662:	4642      	mov	r2, r8
   b4664:	464b      	mov	r3, r9
   b4666:	f7ff fe0d 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b466a:	f004 f9bf 	bl	b89ec <_Z16_fetch_usbserialv>
   b466e:	4923      	ldr	r1, [pc, #140]	; (b46fc <_Z8calc_lowPA2_iPdi+0x164>)
   b4670:	f7ff fe08 	bl	b4284 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b4674:	b36c      	cbz	r4, b46d2 <_Z8calc_lowPA2_iPdi+0x13a>
    int i = 0;
   b4676:	2300      	movs	r3, #0
    int cnt = 0;
   b4678:	461d      	mov	r5, r3
   b467a:	1d37      	adds	r7, r6, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b467c:	aa1a      	add	r2, sp, #104	; 0x68
   b467e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4682:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b4686:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
   b468a:	aa02      	add	r2, sp, #8
   b468c:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4690:	6802      	ldr	r2, [r0, #0]
   b4692:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b4696:	3901      	subs	r1, #1
   b4698:	428a      	cmp	r2, r1
   b469a:	f103 0301 	add.w	r3, r3, #1
   b469e:	d0f7      	beq.n	b4690 <_Z8calc_lowPA2_iPdi+0xf8>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b46a0:	3201      	adds	r2, #1
        while (i <= idx)
   b46a2:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b46a4:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
            
            cnt++;
   b46a8:	f105 0201 	add.w	r2, r5, #1
        while (i <= idx)
   b46ac:	dd0f      	ble.n	b46ce <_Z8calc_lowPA2_iPdi+0x136>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b46ae:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4710 <_Z8calc_lowPA2_iPdi+0x178>
    for (int z = 0; z < cnt; z++)
   b46b2:	2400      	movs	r4, #0
   b46b4:	42ac      	cmp	r4, r5
   b46b6:	d00c      	beq.n	b46d2 <_Z8calc_lowPA2_iPdi+0x13a>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b46b8:	f004 f998 	bl	b89ec <_Z16_fetch_usbserialv>
   b46bc:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b46c0:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
   b46c4:	4641      	mov	r1, r8
   b46c6:	f7ff fddd 	bl	b4284 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b46ca:	3401      	adds	r4, #1
   b46cc:	e7f2      	b.n	b46b4 <_Z8calc_lowPA2_iPdi+0x11c>
            cnt++;
   b46ce:	4615      	mov	r5, r2
   b46d0:	e7d4      	b.n	b467c <_Z8calc_lowPA2_iPdi+0xe4>
    }

    // Calculations are done - set flag
    TRANSMIT_PRICE = true;
   b46d2:	4b0b      	ldr	r3, [pc, #44]	; (b4700 <_Z8calc_lowPA2_iPdi+0x168>)
   b46d4:	2201      	movs	r2, #1

    return cnt;
}
   b46d6:	4620      	mov	r0, r4
    TRANSMIT_PRICE = true;
   b46d8:	701a      	strb	r2, [r3, #0]
}
   b46da:	b01b      	add	sp, #108	; 0x6c
   b46dc:	ecbd 8b02 	vpop	{d8}
   b46e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46e4:	f3af 8000 	nop.w
	...
   b46f0:	000bc48b 	.word	0x000bc48b
   b46f4:	000bc4a3 	.word	0x000bc4a3
   b46f8:	000bc4c1 	.word	0x000bc4c1
   b46fc:	000bc4de 	.word	0x000bc4de
   b4700:	2003d791 	.word	0x2003d791
   b4704:	33333333 	.word	0x33333333
   b4708:	3fd33333 	.word	0x3fd33333
   b470c:	408f4000 	.word	0x408f4000
   b4710:	000bc51c 	.word	0x000bc51c

000b4714 <_Z18hourly_JSON_updatev>:
extern String pricestoday_Json;
extern String pricesyesterday_Json;
extern String pricestomorrow_Json;

void hourly_JSON_update()
{
   b4714:	b5f0      	push	{r4, r5, r6, r7, lr}
    //Update wh_today_Json
    wh_today_Json = "{\"Whr_today\":[";
   b4716:	4913      	ldr	r1, [pc, #76]	; (b4764 <_Z18hourly_JSON_updatev+0x50>)
   b4718:	4813      	ldr	r0, [pc, #76]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String(wh_today[i]);
   b471a:	4e14      	ldr	r6, [pc, #80]	; (b476c <_Z18hourly_JSON_updatev+0x58>)
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b471c:	4d12      	ldr	r5, [pc, #72]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b471e:	4f14      	ldr	r7, [pc, #80]	; (b4770 <_Z18hourly_JSON_updatev+0x5c>)
{
   b4720:	b085      	sub	sp, #20
    wh_today_Json = "{\"Whr_today\":[";
   b4722:	f002 f8b3 	bl	b688c <_ZN6StringaSEPKc>
    for (int i = 0; i < 24; i++)
   b4726:	2400      	movs	r4, #0
        wh_today_Json += String(wh_today[i]);
   b4728:	6833      	ldr	r3, [r6, #0]
   b472a:	220a      	movs	r2, #10
   b472c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4730:	4668      	mov	r0, sp
   b4732:	f002 f8bd 	bl	b68b0 <_ZN6StringC1Eih>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4736:	4669      	mov	r1, sp
   b4738:	4628      	mov	r0, r5
   b473a:	f002 f8e3 	bl	b6904 <_ZN6String6concatERKS_>
   b473e:	4668      	mov	r0, sp
   b4740:	f002 f820 	bl	b6784 <_ZN6StringD1Ev>
        if (i < 23)
   b4744:	2c17      	cmp	r4, #23
   b4746:	d003      	beq.n	b4750 <_Z18hourly_JSON_updatev+0x3c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b4748:	4639      	mov	r1, r7
   b474a:	4628      	mov	r0, r5
   b474c:	f002 f8de 	bl	b690c <_ZN6String6concatEPKc>
    for (int i = 0; i < 24; i++)
   b4750:	3401      	adds	r4, #1
   b4752:	2c18      	cmp	r4, #24
   b4754:	d1e8      	bne.n	b4728 <_Z18hourly_JSON_updatev+0x14>
   b4756:	4907      	ldr	r1, [pc, #28]	; (b4774 <_Z18hourly_JSON_updatev+0x60>)
   b4758:	4803      	ldr	r0, [pc, #12]	; (b4768 <_Z18hourly_JSON_updatev+0x54>)
        {
            wh_today_Json += ",";
        }
    }
    wh_today_Json += "]}";
}
   b475a:	b005      	add	sp, #20
   b475c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4760:	f002 b8d4 	b.w	b690c <_ZN6String6concatEPKc>
   b4764:	000bc52a 	.word	0x000bc52a
   b4768:	2003e1a8 	.word	0x2003e1a8
   b476c:	2003e1a4 	.word	0x2003e1a4
   b4770:	000bc539 	.word	0x000bc539
   b4774:	000bcabc 	.word	0x000bcabc

000b4778 <_Z11update_JSONv>:
void update_JSON()
{
   b4778:	b5f0      	push	{r4, r5, r6, r7, lr}
   b477a:	b085      	sub	sp, #20
    // Update the json strings
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b477c:	498f      	ldr	r1, [pc, #572]	; (b49bc <_Z11update_JSONv+0x244>)
    for (int i = 0; i < 24; i++)
    {
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b477e:	4e90      	ldr	r6, [pc, #576]	; (b49c0 <_Z11update_JSONv+0x248>)
   b4780:	4f90      	ldr	r7, [pc, #576]	; (b49c4 <_Z11update_JSONv+0x24c>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4782:	4d91      	ldr	r5, [pc, #580]	; (b49c8 <_Z11update_JSONv+0x250>)
    pricesyesterday_Json = String::format("{\"pricesyesterday\":[");
   b4784:	4668      	mov	r0, sp
   b4786:	f002 f91f 	bl	b69c8 <_ZN6String6formatEPKcz>
   b478a:	4669      	mov	r1, sp
   b478c:	488e      	ldr	r0, [pc, #568]	; (b49c8 <_Z11update_JSONv+0x250>)
   b478e:	f002 f875 	bl	b687c <_ZN6StringaSEOS_>
   b4792:	4668      	mov	r0, sp
   b4794:	f001 fff6 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4798:	2400      	movs	r4, #0
        pricesyesterday_Json += String::format("%.2lf", cost_yesterday[i]);
   b479a:	6833      	ldr	r3, [r6, #0]
   b479c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b47a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47a4:	4639      	mov	r1, r7
   b47a6:	4668      	mov	r0, sp
   b47a8:	f002 f90e 	bl	b69c8 <_ZN6String6formatEPKcz>
   b47ac:	4669      	mov	r1, sp
   b47ae:	4628      	mov	r0, r5
   b47b0:	f002 f8a8 	bl	b6904 <_ZN6String6concatERKS_>
   b47b4:	4668      	mov	r0, sp
   b47b6:	f001 ffe5 	bl	b6784 <_ZN6StringD1Ev>
        if (i < 23)
   b47ba:	2c17      	cmp	r4, #23
   b47bc:	d00a      	beq.n	b47d4 <_Z11update_JSONv+0x5c>
        {
            pricesyesterday_Json += String::format(",");
   b47be:	4983      	ldr	r1, [pc, #524]	; (b49cc <_Z11update_JSONv+0x254>)
   b47c0:	4668      	mov	r0, sp
   b47c2:	f002 f901 	bl	b69c8 <_ZN6String6formatEPKcz>
   b47c6:	4669      	mov	r1, sp
   b47c8:	4628      	mov	r0, r5
   b47ca:	f002 f89b 	bl	b6904 <_ZN6String6concatERKS_>
   b47ce:	4668      	mov	r0, sp
   b47d0:	f001 ffd8 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b47d4:	3401      	adds	r4, #1
   b47d6:	2c18      	cmp	r4, #24
   b47d8:	d1df      	bne.n	b479a <_Z11update_JSONv+0x22>
        }
    }
    pricesyesterday_Json += String::format("]}");
   b47da:	497d      	ldr	r1, [pc, #500]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating prices today JSON string
    pricestoday_Json = String::format("{\"pricestoday\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b47dc:	4e7d      	ldr	r6, [pc, #500]	; (b49d4 <_Z11update_JSONv+0x25c>)
   b47de:	4f79      	ldr	r7, [pc, #484]	; (b49c4 <_Z11update_JSONv+0x24c>)
   b47e0:	4d7d      	ldr	r5, [pc, #500]	; (b49d8 <_Z11update_JSONv+0x260>)
    pricesyesterday_Json += String::format("]}");
   b47e2:	4668      	mov	r0, sp
   b47e4:	f002 f8f0 	bl	b69c8 <_ZN6String6formatEPKcz>
   b47e8:	4669      	mov	r1, sp
   b47ea:	4877      	ldr	r0, [pc, #476]	; (b49c8 <_Z11update_JSONv+0x250>)
   b47ec:	f002 f88a 	bl	b6904 <_ZN6String6concatERKS_>
   b47f0:	4668      	mov	r0, sp
   b47f2:	f001 ffc7 	bl	b6784 <_ZN6StringD1Ev>
    pricestoday_Json = String::format("{\"pricestoday\":[");
   b47f6:	4979      	ldr	r1, [pc, #484]	; (b49dc <_Z11update_JSONv+0x264>)
   b47f8:	4668      	mov	r0, sp
   b47fa:	f002 f8e5 	bl	b69c8 <_ZN6String6formatEPKcz>
   b47fe:	4669      	mov	r1, sp
   b4800:	4875      	ldr	r0, [pc, #468]	; (b49d8 <_Z11update_JSONv+0x260>)
   b4802:	f002 f83b 	bl	b687c <_ZN6StringaSEOS_>
   b4806:	4668      	mov	r0, sp
   b4808:	f001 ffbc 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b480c:	2400      	movs	r4, #0
        pricestoday_Json += String::format("%.2lf", cost_today[i]);
   b480e:	6833      	ldr	r3, [r6, #0]
   b4810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4814:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4818:	4639      	mov	r1, r7
   b481a:	4668      	mov	r0, sp
   b481c:	f002 f8d4 	bl	b69c8 <_ZN6String6formatEPKcz>
   b4820:	4669      	mov	r1, sp
   b4822:	4628      	mov	r0, r5
   b4824:	f002 f86e 	bl	b6904 <_ZN6String6concatERKS_>
   b4828:	4668      	mov	r0, sp
   b482a:	f001 ffab 	bl	b6784 <_ZN6StringD1Ev>
        if (i < 23)
   b482e:	2c17      	cmp	r4, #23
   b4830:	d00a      	beq.n	b4848 <_Z11update_JSONv+0xd0>
        {
            pricestoday_Json += String::format(",");
   b4832:	4966      	ldr	r1, [pc, #408]	; (b49cc <_Z11update_JSONv+0x254>)
   b4834:	4668      	mov	r0, sp
   b4836:	f002 f8c7 	bl	b69c8 <_ZN6String6formatEPKcz>
   b483a:	4669      	mov	r1, sp
   b483c:	4628      	mov	r0, r5
   b483e:	f002 f861 	bl	b6904 <_ZN6String6concatERKS_>
   b4842:	4668      	mov	r0, sp
   b4844:	f001 ff9e 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4848:	3401      	adds	r4, #1
   b484a:	2c18      	cmp	r4, #24
   b484c:	d1df      	bne.n	b480e <_Z11update_JSONv+0x96>
        }
    }
    pricestoday_Json += String::format("]}");
   b484e:	4960      	ldr	r1, [pc, #384]	; (b49d0 <_Z11update_JSONv+0x258>)

     // Updating prices today JSON string
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
    for (int i = 0; i < 24; i++)
    {
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b4850:	4e63      	ldr	r6, [pc, #396]	; (b49e0 <_Z11update_JSONv+0x268>)
   b4852:	4f5c      	ldr	r7, [pc, #368]	; (b49c4 <_Z11update_JSONv+0x24c>)
   b4854:	4d63      	ldr	r5, [pc, #396]	; (b49e4 <_Z11update_JSONv+0x26c>)
    pricestoday_Json += String::format("]}");
   b4856:	4668      	mov	r0, sp
   b4858:	f002 f8b6 	bl	b69c8 <_ZN6String6formatEPKcz>
   b485c:	4669      	mov	r1, sp
   b485e:	485e      	ldr	r0, [pc, #376]	; (b49d8 <_Z11update_JSONv+0x260>)
   b4860:	f002 f850 	bl	b6904 <_ZN6String6concatERKS_>
   b4864:	4668      	mov	r0, sp
   b4866:	f001 ff8d 	bl	b6784 <_ZN6StringD1Ev>
    pricestomorrow_Json = String::format("{\"pricestomorrow\":[");
   b486a:	495f      	ldr	r1, [pc, #380]	; (b49e8 <_Z11update_JSONv+0x270>)
   b486c:	4668      	mov	r0, sp
   b486e:	f002 f8ab 	bl	b69c8 <_ZN6String6formatEPKcz>
   b4872:	4669      	mov	r1, sp
   b4874:	485b      	ldr	r0, [pc, #364]	; (b49e4 <_Z11update_JSONv+0x26c>)
   b4876:	f002 f801 	bl	b687c <_ZN6StringaSEOS_>
   b487a:	4668      	mov	r0, sp
   b487c:	f001 ff82 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4880:	2400      	movs	r4, #0
        pricestomorrow_Json += String::format("%.2lf", cost_tomorrow[i]);
   b4882:	6833      	ldr	r3, [r6, #0]
   b4884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   b4888:	e9d3 2300 	ldrd	r2, r3, [r3]
   b488c:	4639      	mov	r1, r7
   b488e:	4668      	mov	r0, sp
   b4890:	f002 f89a 	bl	b69c8 <_ZN6String6formatEPKcz>
   b4894:	4669      	mov	r1, sp
   b4896:	4628      	mov	r0, r5
   b4898:	f002 f834 	bl	b6904 <_ZN6String6concatERKS_>
   b489c:	4668      	mov	r0, sp
   b489e:	f001 ff71 	bl	b6784 <_ZN6StringD1Ev>
        if (i < 23)
   b48a2:	2c17      	cmp	r4, #23
   b48a4:	d00a      	beq.n	b48bc <_Z11update_JSONv+0x144>
        {
            pricestomorrow_Json += String::format(",");
   b48a6:	4949      	ldr	r1, [pc, #292]	; (b49cc <_Z11update_JSONv+0x254>)
   b48a8:	4668      	mov	r0, sp
   b48aa:	f002 f88d 	bl	b69c8 <_ZN6String6formatEPKcz>
   b48ae:	4669      	mov	r1, sp
   b48b0:	4628      	mov	r0, r5
   b48b2:	f002 f827 	bl	b6904 <_ZN6String6concatERKS_>
   b48b6:	4668      	mov	r0, sp
   b48b8:	f001 ff64 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48bc:	3401      	adds	r4, #1
   b48be:	2c18      	cmp	r4, #24
   b48c0:	d1df      	bne.n	b4882 <_Z11update_JSONv+0x10a>
        }
    }
    pricestomorrow_Json += String::format("]}");
   b48c2:	4943      	ldr	r1, [pc, #268]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating watt hours used yesterday JSON string
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b48c4:	4e49      	ldr	r6, [pc, #292]	; (b49ec <_Z11update_JSONv+0x274>)
   b48c6:	4f4a      	ldr	r7, [pc, #296]	; (b49f0 <_Z11update_JSONv+0x278>)
   b48c8:	4d4a      	ldr	r5, [pc, #296]	; (b49f4 <_Z11update_JSONv+0x27c>)
    pricestomorrow_Json += String::format("]}");
   b48ca:	4668      	mov	r0, sp
   b48cc:	f002 f87c 	bl	b69c8 <_ZN6String6formatEPKcz>
   b48d0:	4669      	mov	r1, sp
   b48d2:	4844      	ldr	r0, [pc, #272]	; (b49e4 <_Z11update_JSONv+0x26c>)
   b48d4:	f002 f816 	bl	b6904 <_ZN6String6concatERKS_>
   b48d8:	4668      	mov	r0, sp
   b48da:	f001 ff53 	bl	b6784 <_ZN6StringD1Ev>
    wh_yesterday_Json = String::format("{\"WHr_yesterday\":[");
   b48de:	4946      	ldr	r1, [pc, #280]	; (b49f8 <_Z11update_JSONv+0x280>)
   b48e0:	4668      	mov	r0, sp
   b48e2:	f002 f871 	bl	b69c8 <_ZN6String6formatEPKcz>
   b48e6:	4669      	mov	r1, sp
   b48e8:	4842      	ldr	r0, [pc, #264]	; (b49f4 <_Z11update_JSONv+0x27c>)
   b48ea:	f001 ffc7 	bl	b687c <_ZN6StringaSEOS_>
   b48ee:	4668      	mov	r0, sp
   b48f0:	f001 ff48 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b48f4:	2400      	movs	r4, #0
        wh_yesterday_Json += String::format("%d", wh_yesterday[i]);
   b48f6:	6833      	ldr	r3, [r6, #0]
   b48f8:	4639      	mov	r1, r7
   b48fa:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b48fe:	4668      	mov	r0, sp
   b4900:	f002 f862 	bl	b69c8 <_ZN6String6formatEPKcz>
   b4904:	4669      	mov	r1, sp
   b4906:	4628      	mov	r0, r5
   b4908:	f001 fffc 	bl	b6904 <_ZN6String6concatERKS_>
   b490c:	4668      	mov	r0, sp
   b490e:	f001 ff39 	bl	b6784 <_ZN6StringD1Ev>
        if (i < 23)
   b4912:	2c17      	cmp	r4, #23
   b4914:	d00a      	beq.n	b492c <_Z11update_JSONv+0x1b4>
        {
            wh_yesterday_Json += String::format(",");
   b4916:	492d      	ldr	r1, [pc, #180]	; (b49cc <_Z11update_JSONv+0x254>)
   b4918:	4668      	mov	r0, sp
   b491a:	f002 f855 	bl	b69c8 <_ZN6String6formatEPKcz>
   b491e:	4669      	mov	r1, sp
   b4920:	4628      	mov	r0, r5
   b4922:	f001 ffef 	bl	b6904 <_ZN6String6concatERKS_>
   b4926:	4668      	mov	r0, sp
   b4928:	f001 ff2c 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b492c:	3401      	adds	r4, #1
   b492e:	2c18      	cmp	r4, #24
   b4930:	d1e1      	bne.n	b48f6 <_Z11update_JSONv+0x17e>
        }
    }
    wh_yesterday_Json += String::format("]}");
   b4932:	4927      	ldr	r1, [pc, #156]	; (b49d0 <_Z11update_JSONv+0x258>)

    // Updating watt hours for today JSON string
    wh_today_Json = String::format("{\"WHr_today\":[");
    for (int i = 0; i < 24; i++)
    {
        wh_today_Json += String::format("%d", wh_today[i]);
   b4934:	4e31      	ldr	r6, [pc, #196]	; (b49fc <_Z11update_JSONv+0x284>)
   b4936:	4f2e      	ldr	r7, [pc, #184]	; (b49f0 <_Z11update_JSONv+0x278>)
   b4938:	4d31      	ldr	r5, [pc, #196]	; (b4a00 <_Z11update_JSONv+0x288>)
    wh_yesterday_Json += String::format("]}");
   b493a:	4668      	mov	r0, sp
   b493c:	f002 f844 	bl	b69c8 <_ZN6String6formatEPKcz>
   b4940:	4669      	mov	r1, sp
   b4942:	482c      	ldr	r0, [pc, #176]	; (b49f4 <_Z11update_JSONv+0x27c>)
   b4944:	f001 ffde 	bl	b6904 <_ZN6String6concatERKS_>
   b4948:	4668      	mov	r0, sp
   b494a:	f001 ff1b 	bl	b6784 <_ZN6StringD1Ev>
    wh_today_Json = String::format("{\"WHr_today\":[");
   b494e:	492d      	ldr	r1, [pc, #180]	; (b4a04 <_Z11update_JSONv+0x28c>)
   b4950:	4668      	mov	r0, sp
   b4952:	f002 f839 	bl	b69c8 <_ZN6String6formatEPKcz>
   b4956:	4669      	mov	r1, sp
   b4958:	4829      	ldr	r0, [pc, #164]	; (b4a00 <_Z11update_JSONv+0x288>)
   b495a:	f001 ff8f 	bl	b687c <_ZN6StringaSEOS_>
   b495e:	4668      	mov	r0, sp
   b4960:	f001 ff10 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b4964:	2400      	movs	r4, #0
        wh_today_Json += String::format("%d", wh_today[i]);
   b4966:	6833      	ldr	r3, [r6, #0]
   b4968:	4639      	mov	r1, r7
   b496a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   b496e:	4668      	mov	r0, sp
   b4970:	f002 f82a 	bl	b69c8 <_ZN6String6formatEPKcz>
   b4974:	4669      	mov	r1, sp
   b4976:	4628      	mov	r0, r5
   b4978:	f001 ffc4 	bl	b6904 <_ZN6String6concatERKS_>
   b497c:	4668      	mov	r0, sp
   b497e:	f001 ff01 	bl	b6784 <_ZN6StringD1Ev>
        if (i < 23)
   b4982:	2c17      	cmp	r4, #23
   b4984:	d00a      	beq.n	b499c <_Z11update_JSONv+0x224>
        {
            wh_today_Json += String::format(",");
   b4986:	4911      	ldr	r1, [pc, #68]	; (b49cc <_Z11update_JSONv+0x254>)
   b4988:	4668      	mov	r0, sp
   b498a:	f002 f81d 	bl	b69c8 <_ZN6String6formatEPKcz>
   b498e:	4669      	mov	r1, sp
   b4990:	4628      	mov	r0, r5
   b4992:	f001 ffb7 	bl	b6904 <_ZN6String6concatERKS_>
   b4996:	4668      	mov	r0, sp
   b4998:	f001 fef4 	bl	b6784 <_ZN6StringD1Ev>
    for (int i = 0; i < 24; i++)
   b499c:	3401      	adds	r4, #1
   b499e:	2c18      	cmp	r4, #24
   b49a0:	d1e1      	bne.n	b4966 <_Z11update_JSONv+0x1ee>
        }
    }
    wh_today_Json += String::format("]}");
   b49a2:	4668      	mov	r0, sp
   b49a4:	490a      	ldr	r1, [pc, #40]	; (b49d0 <_Z11update_JSONv+0x258>)
   b49a6:	f002 f80f 	bl	b69c8 <_ZN6String6formatEPKcz>
   b49aa:	4669      	mov	r1, sp
   b49ac:	4814      	ldr	r0, [pc, #80]	; (b4a00 <_Z11update_JSONv+0x288>)
   b49ae:	f001 ffa9 	bl	b6904 <_ZN6String6concatERKS_>
   b49b2:	4668      	mov	r0, sp
   b49b4:	f001 fee6 	bl	b6784 <_ZN6StringD1Ev>

}
   b49b8:	b005      	add	sp, #20
   b49ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b49bc:	000bc53b 	.word	0x000bc53b
   b49c0:	2003d8cc 	.word	0x2003d8cc
   b49c4:	000bc550 	.word	0x000bc550
   b49c8:	2003dd14 	.word	0x2003dd14
   b49cc:	000bc539 	.word	0x000bc539
   b49d0:	000bcabc 	.word	0x000bcabc
   b49d4:	2003d8c4 	.word	0x2003d8c4
   b49d8:	2003dcf4 	.word	0x2003dcf4
   b49dc:	000bc556 	.word	0x000bc556
   b49e0:	2003d8c8 	.word	0x2003d8c8
   b49e4:	2003dd04 	.word	0x2003dd04
   b49e8:	000bc567 	.word	0x000bc567
   b49ec:	2003e1b8 	.word	0x2003e1b8
   b49f0:	000bcfc8 	.word	0x000bcfc8
   b49f4:	2003e1bc 	.word	0x2003e1bc
   b49f8:	000bc57b 	.word	0x000bc57b
   b49fc:	2003e1a4 	.word	0x2003e1a4
   b4a00:	2003e1a8 	.word	0x2003e1a8
   b4a04:	000bc58e 	.word	0x000bc58e

000b4a08 <_Z17Httprequest_todayv>:
#include "application.h"

TCPClient client;

bool Httprequest_today(void)
{
   b4a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a0c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   b4a10:	af00      	add	r7, sp, #0
  String Json_message;
   b4a12:	493a      	ldr	r1, [pc, #232]	; (b4afc <_Z17Httprequest_todayv+0xf4>)
   b4a14:	1d38      	adds	r0, r7, #4
   b4a16:	f001 ff00 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
  client.connect("api.energidataservice.dk", 80);
   b4a1a:	4939      	ldr	r1, [pc, #228]	; (b4b00 <_Z17Httprequest_todayv+0xf8>)
   b4a1c:	4839      	ldr	r0, [pc, #228]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4a1e:	2300      	movs	r3, #0
   b4a20:	2250      	movs	r2, #80	; 0x50
   b4a22:	f004 f99d 	bl	b8d60 <_ZN9TCPClient7connectEPKctm>
  if (client.connected())
   b4a26:	4837      	ldr	r0, [pc, #220]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4a28:	f004 fa18 	bl	b8e5c <_ZN9TCPClient9connectedEv>
   b4a2c:	b1b8      	cbz	r0, b4a5e <_Z17Httprequest_todayv+0x56>
  {
    Serial.println("connected");
   b4a2e:	f003 ffdd 	bl	b89ec <_Z16_fetch_usbserialv>
   b4a32:	4935      	ldr	r1, [pc, #212]	; (b4b08 <_Z17Httprequest_todayv+0x100>)
   b4a34:	f003 fa4b 	bl	b7ece <_ZN5Print7printlnEPKc>
    client.println("GET /dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=2022-11-27T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk HTTP/1.0");
   b4a38:	4934      	ldr	r1, [pc, #208]	; (b4b0c <_Z17Httprequest_todayv+0x104>)
   b4a3a:	4832      	ldr	r0, [pc, #200]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4a3c:	f003 fa47 	bl	b7ece <_ZN5Print7printlnEPKc>
    client.println("Host: api.energidataservice.dk");
   b4a40:	4933      	ldr	r1, [pc, #204]	; (b4b10 <_Z17Httprequest_todayv+0x108>)
   b4a42:	4830      	ldr	r0, [pc, #192]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4a44:	f003 fa43 	bl	b7ece <_ZN5Print7printlnEPKc>
    client.println("Content-Length: 0");
   b4a48:	4932      	ldr	r1, [pc, #200]	; (b4b14 <_Z17Httprequest_todayv+0x10c>)
   b4a4a:	482e      	ldr	r0, [pc, #184]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4a4c:	f003 fa3f 	bl	b7ece <_ZN5Print7printlnEPKc>
    client.println("Content-Type: application/json");
   b4a50:	4931      	ldr	r1, [pc, #196]	; (b4b18 <_Z17Httprequest_todayv+0x110>)
   b4a52:	482c      	ldr	r0, [pc, #176]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4a54:	f003 fa3b 	bl	b7ece <_ZN5Print7printlnEPKc>
    client.println();
   b4a58:	482a      	ldr	r0, [pc, #168]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4a5a:	f003 fa2c 	bl	b7eb6 <_ZN5Print7printlnEv>
    // IPAddress equals whatever www.google.com resolves to
  }
  delay(2000);
   b4a5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4a62:	f003 fb7f 	bl	b8164 <delay>
  bool print_next = false;
  while (client.connected())
   b4a66:	4d27      	ldr	r5, [pc, #156]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
  {
    uint32_t bytesAvail = client.available();
    uint32_t ptr = 0;
    uint8_t buffer[500];
    client.read(buffer, bytesAvail);
    char message[bytesAvail+1]= "\0";
   b4a68:	4e2c      	ldr	r6, [pc, #176]	; (b4b1c <_Z17Httprequest_todayv+0x114>)
  while (client.connected())
   b4a6a:	4628      	mov	r0, r5
   b4a6c:	f004 f9f6 	bl	b8e5c <_ZN9TCPClient9connectedEv>
   b4a70:	b350      	cbz	r0, b4ac8 <_Z17Httprequest_todayv+0xc0>
    uint32_t bytesAvail = client.available();
   b4a72:	4628      	mov	r0, r5
   b4a74:	f004 fad0 	bl	b9018 <_ZN9TCPClient9availableEv>
    client.read(buffer, bytesAvail);
   b4a78:	f107 0114 	add.w	r1, r7, #20
    uint32_t bytesAvail = client.available();
   b4a7c:	4604      	mov	r4, r0
    client.read(buffer, bytesAvail);
   b4a7e:	4602      	mov	r2, r0
   b4a80:	4628      	mov	r0, r5
   b4a82:	f004 fa1b 	bl	b8ebc <_ZN9TCPClient4readEPhj>
    char message[bytesAvail+1]= "\0";
   b4a86:	f104 0308 	add.w	r3, r4, #8
   b4a8a:	f023 0307 	bic.w	r3, r3, #7
      message[i] = (char)buffer[i];
    }
    
      Serial.print(message);

  }
   b4a8e:	46e8      	mov	r8, sp
    char message[bytesAvail+1]= "\0";
   b4a90:	ebad 0d03 	sub.w	sp, sp, r3
   b4a94:	4668      	mov	r0, sp
   b4a96:	8833      	ldrh	r3, [r6, #0]
   b4a98:	f820 3b02 	strh.w	r3, [r0], #2
   b4a9c:	2c00      	cmp	r4, #0
   b4a9e:	f104 32ff 	add.w	r2, r4, #4294967295
   b4aa2:	f04f 0100 	mov.w	r1, #0
   b4aa6:	bfd8      	it	le
   b4aa8:	2200      	movle	r2, #0
   b4aaa:	f005 fc10 	bl	ba2ce <memset>
      message[i] = (char)buffer[i];
   b4aae:	4622      	mov	r2, r4
   b4ab0:	f107 0114 	add.w	r1, r7, #20
   b4ab4:	4668      	mov	r0, sp
   b4ab6:	f005 fbe2 	bl	ba27e <memcpy>
      Serial.print(message);
   b4aba:	f003 ff97 	bl	b89ec <_Z16_fetch_usbserialv>
   b4abe:	4669      	mov	r1, sp
   b4ac0:	f003 f9f2 	bl	b7ea8 <_ZN5Print5printEPKc>
   b4ac4:	46c5      	mov	sp, r8
  while (client.connected())
   b4ac6:	e7d0      	b.n	b4a6a <_Z17Httprequest_todayv+0x62>
  // if temp is char string, term it here temp[ptr] = '\0';
  

  if (!client.connected())
   b4ac8:	480e      	ldr	r0, [pc, #56]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4aca:	f004 f9c7 	bl	b8e5c <_ZN9TCPClient9connectedEv>
   b4ace:	b958      	cbnz	r0, b4ae8 <_Z17Httprequest_todayv+0xe0>
  {
    Serial.println();
   b4ad0:	f003 ff8c 	bl	b89ec <_Z16_fetch_usbserialv>
   b4ad4:	f003 f9ef 	bl	b7eb6 <_ZN5Print7printlnEv>
    Serial.println("disconnecting.");
   b4ad8:	f003 ff88 	bl	b89ec <_Z16_fetch_usbserialv>
   b4adc:	4910      	ldr	r1, [pc, #64]	; (b4b20 <_Z17Httprequest_todayv+0x118>)
   b4ade:	f003 f9f6 	bl	b7ece <_ZN5Print7printlnEPKc>
    client.stop();
   b4ae2:	4808      	ldr	r0, [pc, #32]	; (b4b04 <_Z17Httprequest_todayv+0xfc>)
   b4ae4:	f004 faf2 	bl	b90cc <_ZN9TCPClient4stopEv>
  String Json_message;
   b4ae8:	1d38      	adds	r0, r7, #4
   b4aea:	f001 fe4b 	bl	b6784 <_ZN6StringD1Ev>
  }

  return true;
}
   b4aee:	2001      	movs	r0, #1
   b4af0:	f507 7702 	add.w	r7, r7, #520	; 0x208
   b4af4:	46bd      	mov	sp, r7
   b4af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4afa:	bf00      	nop
   b4afc:	000bcc9b 	.word	0x000bcc9b
   b4b00:	000bc657 	.word	0x000bc657
   b4b04:	2003d8a8 	.word	0x2003d8a8
   b4b08:	000bc59d 	.word	0x000bc59d
   b4b0c:	000bc5a7 	.word	0x000bc5a7
   b4b10:	000bc651 	.word	0x000bc651
   b4b14:	000bc670 	.word	0x000bc670
   b4b18:	000bc682 	.word	0x000bc682
   b4b1c:	000bcc49 	.word	0x000bcc49
   b4b20:	000bc6a1 	.word	0x000bc6a1

000b4b24 <_Z7htttttpv>:

http_request_t request;
http_response_t response;


void htttttp() {
   b4b24:	b573      	push	{r0, r1, r4, r5, r6, lr}


Serial.println();
   b4b26:	f003 ff61 	bl	b89ec <_Z16_fetch_usbserialv>
Serial.println("Application>\tStart of Loop.");
// Request path and body can be set at runtime or at setup.
request.hostname = "api.energidataservice.dk";
   b4b2a:	4c20      	ldr	r4, [pc, #128]	; (b4bac <_Z7htttttpv+0x88>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b4b2c:	4e20      	ldr	r6, [pc, #128]	; (b4bb0 <_Z7htttttpv+0x8c>)
Serial.println();
   b4b2e:	f003 f9c2 	bl	b7eb6 <_ZN5Print7printlnEv>
Serial.println("Application>\tStart of Loop.");
   b4b32:	f003 ff5b 	bl	b89ec <_Z16_fetch_usbserialv>
   b4b36:	491f      	ldr	r1, [pc, #124]	; (b4bb4 <_Z7htttttpv+0x90>)
   b4b38:	f003 f9c9 	bl	b7ece <_ZN5Print7printlnEPKc>
request.hostname = "api.energidataservice.dk";
   b4b3c:	491e      	ldr	r1, [pc, #120]	; (b4bb8 <_Z7htttttpv+0x94>)
   b4b3e:	4620      	mov	r0, r4
   b4b40:	f001 fea4 	bl	b688c <_ZN6StringaSEPKc>
request.port = 80;
   b4b44:	2350      	movs	r3, #80	; 0x50
request.path = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=2022-11-27T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk";
   b4b46:	491d      	ldr	r1, [pc, #116]	; (b4bbc <_Z7htttttpv+0x98>)
request.port = 80;
   b4b48:	63a3      	str	r3, [r4, #56]	; 0x38
request.path = "/dataset/Elspotprices?filter=%7B%22PriceArea%22%3A%22DK2%22%7D&start=2022-11-27T00%3A00&offset=0&limit=24&columns=SpotPriceDKK&sort=HourDK%20ASC&timezone=dk";
   b4b4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4b4e:	f001 fe9d 	bl	b688c <_ZN6StringaSEPKc>
   b4b52:	4b1b      	ldr	r3, [pc, #108]	; (b4bc0 <_Z7htttttpv+0x9c>)
   b4b54:	481b      	ldr	r0, [pc, #108]	; (b4bc4 <_Z7htttttpv+0xa0>)
   b4b56:	9300      	str	r3, [sp, #0]
   b4b58:	4632      	mov	r2, r6
   b4b5a:	4b1b      	ldr	r3, [pc, #108]	; (b4bc8 <_Z7htttttpv+0xa4>)
   b4b5c:	4621      	mov	r1, r4
   b4b5e:	f001 f85b 	bl	b5c18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
// The library also supports sending a body with your request:
//request.body = "{\"key\":\"value\"}";

// Get request
http.get(request, response, headers);
Serial.print("Application>\tResponse status: ");
   b4b62:	f003 ff43 	bl	b89ec <_Z16_fetch_usbserialv>
   b4b66:	4919      	ldr	r1, [pc, #100]	; (b4bcc <_Z7htttttpv+0xa8>)
   b4b68:	f003 f99e 	bl	b7ea8 <_ZN5Print5printEPKc>
Serial.println(response.status);
   b4b6c:	f003 ff3e 	bl	b89ec <_Z16_fetch_usbserialv>
   b4b70:	6834      	ldr	r4, [r6, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4b72:	2c00      	cmp	r4, #0
   b4b74:	4605      	mov	r5, r0
   b4b76:	da17      	bge.n	b4ba8 <_Z7htttttpv+0x84>
            t = print('-');
   b4b78:	212d      	movs	r1, #45	; 0x2d
   b4b7a:	f003 f999 	bl	b7eb0 <_ZN5Print5printEc>
            val = -n;
   b4b7e:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b80:	220a      	movs	r2, #10
   b4b82:	4628      	mov	r0, r5
   b4b84:	f003 f9ad 	bl	b7ee2 <_ZN5Print11printNumberEmh>
        n += println();
   b4b88:	4628      	mov	r0, r5
   b4b8a:	f003 f994 	bl	b7eb6 <_ZN5Print7printlnEv>

Serial.print("Application>\tHTTP Response Body: ");
   b4b8e:	f003 ff2d 	bl	b89ec <_Z16_fetch_usbserialv>
   b4b92:	490f      	ldr	r1, [pc, #60]	; (b4bd0 <_Z7htttttpv+0xac>)
   b4b94:	f003 f988 	bl	b7ea8 <_ZN5Print5printEPKc>
Serial.println(response.body);
   b4b98:	f003 ff28 	bl	b89ec <_Z16_fetch_usbserialv>
   b4b9c:	6871      	ldr	r1, [r6, #4]

return;
   b4b9e:	b002      	add	sp, #8
   b4ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Serial.println(response.body);
   b4ba4:	f003 b993 	b.w	b7ece <_ZN5Print7printlnEPKc>
            val = n;
   b4ba8:	4621      	mov	r1, r4
   b4baa:	e7e9      	b.n	b4b80 <_Z7htttttpv+0x5c>
   b4bac:	2003dd24 	.word	0x2003dd24
   b4bb0:	2003dd70 	.word	0x2003dd70
   b4bb4:	000bc6b0 	.word	0x000bc6b0
   b4bb8:	000bc657 	.word	0x000bc657
   b4bbc:	000bc6cc 	.word	0x000bc6cc
   b4bc0:	000bc769 	.word	0x000bc769
   b4bc4:	2003d8d4 	.word	0x2003d8d4
   b4bc8:	2003d558 	.word	0x2003d558
   b4bcc:	000bc76d 	.word	0x000bc76d
   b4bd0:	000bc78c 	.word	0x000bc78c

000b4bd4 <_Z11init_memoryv>:
{
   b4bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cost_yesterday = (double *)malloc(MAX_RANGE * sizeof(double));
   b4bd8:	20c0      	movs	r0, #192	; 0xc0
   b4bda:	f001 fcbb 	bl	b6554 <malloc>
   b4bde:	4d38      	ldr	r5, [pc, #224]	; (b4cc0 <_Z11init_memoryv+0xec>)
   b4be0:	6028      	str	r0, [r5, #0]
    if (cost_yesterday == NULL)
   b4be2:	b928      	cbnz	r0, b4bf0 <_Z11init_memoryv+0x1c>
        Serial.printf("Failed to allocate memory for cost_yesterday\n");
   b4be4:	f003 ff02 	bl	b89ec <_Z16_fetch_usbserialv>
   b4be8:	4936      	ldr	r1, [pc, #216]	; (b4cc4 <_Z11init_memoryv+0xf0>)
   b4bea:	f7ff fb4b 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4bee:	e7fe      	b.n	b4bee <_Z11init_memoryv+0x1a>
    cost_today = (double *)malloc(MAX_RANGE * sizeof(double));
   b4bf0:	20c0      	movs	r0, #192	; 0xc0
   b4bf2:	f001 fcaf 	bl	b6554 <malloc>
   b4bf6:	4c34      	ldr	r4, [pc, #208]	; (b4cc8 <_Z11init_memoryv+0xf4>)
   b4bf8:	6020      	str	r0, [r4, #0]
    if (cost_today == NULL)
   b4bfa:	b928      	cbnz	r0, b4c08 <_Z11init_memoryv+0x34>
        Serial.printf("Failed to allocate memory for cost_today\n");
   b4bfc:	f003 fef6 	bl	b89ec <_Z16_fetch_usbserialv>
   b4c00:	4932      	ldr	r1, [pc, #200]	; (b4ccc <_Z11init_memoryv+0xf8>)
   b4c02:	f7ff fb3f 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4c06:	e7fe      	b.n	b4c06 <_Z11init_memoryv+0x32>
    cost_tomorrow = (double *)malloc(MAX_RANGE * sizeof(double));
   b4c08:	20c0      	movs	r0, #192	; 0xc0
   b4c0a:	f001 fca3 	bl	b6554 <malloc>
   b4c0e:	4e30      	ldr	r6, [pc, #192]	; (b4cd0 <_Z11init_memoryv+0xfc>)
   b4c10:	6030      	str	r0, [r6, #0]
    if (cost_tomorrow == NULL)
   b4c12:	b928      	cbnz	r0, b4c20 <_Z11init_memoryv+0x4c>
        Serial.printf("Failed to allocate memory for cost_tomorrow\n");
   b4c14:	f003 feea 	bl	b89ec <_Z16_fetch_usbserialv>
   b4c18:	492e      	ldr	r1, [pc, #184]	; (b4cd4 <_Z11init_memoryv+0x100>)
   b4c1a:	f7ff fb33 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4c1e:	e7fe      	b.n	b4c1e <_Z11init_memoryv+0x4a>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4c20:	f003 fee4 	bl	b89ec <_Z16_fetch_usbserialv>
   b4c24:	492c      	ldr	r1, [pc, #176]	; (b4cd8 <_Z11init_memoryv+0x104>)
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4c26:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b4cec <_Z11init_memoryv+0x118>
    Serial.printf("Memory allocated for prices: %d bytes of doubles\n", 3 * MAX_RANGE * sizeof(double));
   b4c2a:	f44f 7210 	mov.w	r2, #576	; 0x240
   b4c2e:	f7ff fb29 	bl	b4284 <_ZN5Print6printfEPKcz>
    wh_today = (int *)malloc(MAX_RANGE * sizeof(int));
   b4c32:	2060      	movs	r0, #96	; 0x60
   b4c34:	f001 fc8e 	bl	b6554 <malloc>
   b4c38:	f8c8 0000 	str.w	r0, [r8]
    if (wh_today == NULL)
   b4c3c:	b928      	cbnz	r0, b4c4a <_Z11init_memoryv+0x76>
        Serial.printf("Failed to allocate memory for wh_today\n");
   b4c3e:	f003 fed5 	bl	b89ec <_Z16_fetch_usbserialv>
   b4c42:	4926      	ldr	r1, [pc, #152]	; (b4cdc <_Z11init_memoryv+0x108>)
   b4c44:	f7ff fb1e 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4c48:	e7fe      	b.n	b4c48 <_Z11init_memoryv+0x74>
    wh_yesterday = (int *)malloc(MAX_RANGE * sizeof(int));
   b4c4a:	2060      	movs	r0, #96	; 0x60
   b4c4c:	f001 fc82 	bl	b6554 <malloc>
   b4c50:	f8df 909c 	ldr.w	r9, [pc, #156]	; b4cf0 <_Z11init_memoryv+0x11c>
   b4c54:	f8c9 0000 	str.w	r0, [r9]
    if (wh_yesterday == NULL)
   b4c58:	b928      	cbnz	r0, b4c66 <_Z11init_memoryv+0x92>
        Serial.printf("Failed to allocate memory for wh_yesterday\n");
   b4c5a:	f003 fec7 	bl	b89ec <_Z16_fetch_usbserialv>
   b4c5e:	4920      	ldr	r1, [pc, #128]	; (b4ce0 <_Z11init_memoryv+0x10c>)
   b4c60:	f7ff fb10 	bl	b4284 <_ZN5Print6printfEPKcz>
        while (1)
   b4c64:	e7fe      	b.n	b4c64 <_Z11init_memoryv+0x90>
    Serial.printf("Memory allocated for wh: %d bytes of ints\n", 2 * MAX_RANGE * sizeof(int));
   b4c66:	f003 fec1 	bl	b89ec <_Z16_fetch_usbserialv>
   b4c6a:	491e      	ldr	r1, [pc, #120]	; (b4ce4 <_Z11init_memoryv+0x110>)
   b4c6c:	22c0      	movs	r2, #192	; 0xc0
   b4c6e:	f7ff fb09 	bl	b4284 <_ZN5Print6printfEPKcz>
    Serial.printf("After %lu\n", System.freeMemory());
   b4c72:	f003 febb 	bl	b89ec <_Z16_fetch_usbserialv>
   b4c76:	4607      	mov	r7, r0
   b4c78:	f001 fd14 	bl	b66a4 <_ZN11SystemClass10freeMemoryEv>
   b4c7c:	491a      	ldr	r1, [pc, #104]	; (b4ce8 <_Z11init_memoryv+0x114>)
   b4c7e:	4602      	mov	r2, r0
   b4c80:	4638      	mov	r0, r7
   b4c82:	f7ff faff 	bl	b4284 <_ZN5Print6printfEPKcz>
    memset(cost_yesterday, 0, MAX_RANGE * sizeof(double));
   b4c86:	6828      	ldr	r0, [r5, #0]
   b4c88:	22c0      	movs	r2, #192	; 0xc0
   b4c8a:	2100      	movs	r1, #0
   b4c8c:	f005 fb1f 	bl	ba2ce <memset>
    memset(cost_today, 0, MAX_RANGE * sizeof(double));
   b4c90:	6820      	ldr	r0, [r4, #0]
   b4c92:	22c0      	movs	r2, #192	; 0xc0
   b4c94:	2100      	movs	r1, #0
   b4c96:	f005 fb1a 	bl	ba2ce <memset>
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4c9a:	6830      	ldr	r0, [r6, #0]
   b4c9c:	22c0      	movs	r2, #192	; 0xc0
   b4c9e:	2100      	movs	r1, #0
   b4ca0:	f005 fb15 	bl	ba2ce <memset>
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4ca4:	f8d8 0000 	ldr.w	r0, [r8]
   b4ca8:	2260      	movs	r2, #96	; 0x60
   b4caa:	2100      	movs	r1, #0
   b4cac:	f005 fb0f 	bl	ba2ce <memset>
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4cb0:	f8d9 0000 	ldr.w	r0, [r9]
   b4cb4:	2260      	movs	r2, #96	; 0x60
}
   b4cb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    memset(wh_yesterday, 0, MAX_RANGE * sizeof(int));
   b4cba:	2100      	movs	r1, #0
   b4cbc:	f005 bb07 	b.w	ba2ce <memset>
   b4cc0:	2003d8cc 	.word	0x2003d8cc
   b4cc4:	000bc7ae 	.word	0x000bc7ae
   b4cc8:	2003d8c4 	.word	0x2003d8c4
   b4ccc:	000bc7dc 	.word	0x000bc7dc
   b4cd0:	2003d8c8 	.word	0x2003d8c8
   b4cd4:	000bc806 	.word	0x000bc806
   b4cd8:	000bc833 	.word	0x000bc833
   b4cdc:	000bc865 	.word	0x000bc865
   b4ce0:	000bc88d 	.word	0x000bc88d
   b4ce4:	000bc8b9 	.word	0x000bc8b9
   b4ce8:	000bc8e4 	.word	0x000bc8e4
   b4cec:	2003e1a4 	.word	0x2003e1a4
   b4cf0:	2003e1b8 	.word	0x2003e1b8

000b4cf4 <_Z13rotate_pricesv>:
{
   b4cf4:	b508      	push	{r3, lr}
    cost_yesterday = cost_today;
   b4cf6:	4a0c      	ldr	r2, [pc, #48]	; (b4d28 <_Z13rotate_pricesv+0x34>)
    double *temp = cost_yesterday;
   b4cf8:	4b0c      	ldr	r3, [pc, #48]	; (b4d2c <_Z13rotate_pricesv+0x38>)
    cost_yesterday = cost_today;
   b4cfa:	6811      	ldr	r1, [r2, #0]
    double *temp = cost_yesterday;
   b4cfc:	6818      	ldr	r0, [r3, #0]
    cost_yesterday = cost_today;
   b4cfe:	6019      	str	r1, [r3, #0]
    cost_today = cost_tomorrow;
   b4d00:	4b0b      	ldr	r3, [pc, #44]	; (b4d30 <_Z13rotate_pricesv+0x3c>)
   b4d02:	6819      	ldr	r1, [r3, #0]
   b4d04:	6011      	str	r1, [r2, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4d06:	22c0      	movs	r2, #192	; 0xc0
   b4d08:	2100      	movs	r1, #0
    cost_tomorrow = temp;
   b4d0a:	6018      	str	r0, [r3, #0]
    memset(cost_tomorrow, 0, MAX_RANGE * sizeof(double));
   b4d0c:	f005 fadf 	bl	ba2ce <memset>
    int *temp2 = wh_yesterday;
   b4d10:	4a08      	ldr	r2, [pc, #32]	; (b4d34 <_Z13rotate_pricesv+0x40>)
    wh_yesterday = wh_today;
   b4d12:	4b09      	ldr	r3, [pc, #36]	; (b4d38 <_Z13rotate_pricesv+0x44>)
    int *temp2 = wh_yesterday;
   b4d14:	6810      	ldr	r0, [r2, #0]
    wh_yesterday = wh_today;
   b4d16:	6819      	ldr	r1, [r3, #0]
   b4d18:	6011      	str	r1, [r2, #0]
    wh_today = temp2;
   b4d1a:	6018      	str	r0, [r3, #0]
}
   b4d1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    memset(wh_today, 0, MAX_RANGE * sizeof(int));
   b4d20:	2260      	movs	r2, #96	; 0x60
   b4d22:	2100      	movs	r1, #0
   b4d24:	f005 bad3 	b.w	ba2ce <memset>
   b4d28:	2003d8c4 	.word	0x2003d8c4
   b4d2c:	2003d8cc 	.word	0x2003d8cc
   b4d30:	2003d8c8 	.word	0x2003d8c8
   b4d34:	2003e1b8 	.word	0x2003e1b8
   b4d38:	2003e1a4 	.word	0x2003e1a4

000b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4d3c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4d3e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4d40:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4d42:	b17c      	cbz	r4, b4d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4d44:	6863      	ldr	r3, [r4, #4]
   b4d46:	3b01      	subs	r3, #1
   b4d48:	6063      	str	r3, [r4, #4]
   b4d4a:	b95b      	cbnz	r3, b4d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4d4c:	6823      	ldr	r3, [r4, #0]
   b4d4e:	4620      	mov	r0, r4
   b4d50:	689b      	ldr	r3, [r3, #8]
   b4d52:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d54:	68a3      	ldr	r3, [r4, #8]
   b4d56:	3b01      	subs	r3, #1
   b4d58:	60a3      	str	r3, [r4, #8]
   b4d5a:	b91b      	cbnz	r3, b4d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4d5c:	6823      	ldr	r3, [r4, #0]
   b4d5e:	4620      	mov	r0, r4
   b4d60:	68db      	ldr	r3, [r3, #12]
   b4d62:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4d64:	4628      	mov	r0, r5
   b4d66:	bd38      	pop	{r3, r4, r5, pc}

000b4d68 <_Z8get_datai>:
{
   b4d68:	b510      	push	{r4, lr}
    temp[0] = 0;
   b4d6a:	4b11      	ldr	r3, [pc, #68]	; (b4db0 <_Z8get_datai+0x48>)
   b4d6c:	2200      	movs	r2, #0
{
   b4d6e:	b08a      	sub	sp, #40	; 0x28
    temp[0] = 0;
   b4d70:	701a      	strb	r2, [r3, #0]
{
   b4d72:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\"}", Time.year(), Time.month(), day);
   b4d74:	f003 f9e0 	bl	b8138 <_ZN9TimeClass4yearEv>
   b4d78:	9003      	str	r0, [sp, #12]
   b4d7a:	f003 f9d5 	bl	b8128 <_ZN9TimeClass5monthEv>
   b4d7e:	9a03      	ldr	r2, [sp, #12]
   b4d80:	490c      	ldr	r1, [pc, #48]	; (b4db4 <_Z8get_datai+0x4c>)
   b4d82:	9400      	str	r4, [sp, #0]
   b4d84:	4603      	mov	r3, r0
   b4d86:	a806      	add	r0, sp, #24
   b4d88:	f001 fe1e 	bl	b69c8 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4d8c:	4b0a      	ldr	r3, [pc, #40]	; (b4db8 <_Z8get_datai+0x50>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4d8e:	9a06      	ldr	r2, [sp, #24]
   b4d90:	781b      	ldrb	r3, [r3, #0]
   b4d92:	490a      	ldr	r1, [pc, #40]	; (b4dbc <_Z8get_datai+0x54>)
   b4d94:	f88d 3000 	strb.w	r3, [sp]
   b4d98:	a804      	add	r0, sp, #16
   b4d9a:	233c      	movs	r3, #60	; 0x3c
   b4d9c:	f003 fbca 	bl	b8534 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4da0:	a805      	add	r0, sp, #20
   b4da2:	f7ff ffcb 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4da6:	a806      	add	r0, sp, #24
   b4da8:	f001 fcec 	bl	b6784 <_ZN6StringD1Ev>
}
   b4dac:	b00a      	add	sp, #40	; 0x28
   b4dae:	bd10      	pop	{r4, pc}
   b4db0:	2003dd84 	.word	0x2003dd84
   b4db4:	000bc8ef 	.word	0x000bc8ef
   b4db8:	2003d838 	.word	0x2003d838
   b4dbc:	000bc91e 	.word	0x000bc91e

000b4dc0 <setup>:
{
   b4dc0:	b570      	push	{r4, r5, r6, lr}
    STARTUP = true;
   b4dc2:	4b5b      	ldr	r3, [pc, #364]	; (b4f30 <setup+0x170>)
   b4dc4:	2201      	movs	r2, #1
{
   b4dc6:	b08e      	sub	sp, #56	; 0x38
    STARTUP = true;
   b4dc8:	701a      	strb	r2, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4dca:	f001 fb93 	bl	b64f4 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4dce:	b910      	cbnz	r0, b4dd6 <setup+0x16>
            spark_process();
   b4dd0:	f001 fb88 	bl	b64e4 <spark_process>
        while (_while() && !_condition()) {
   b4dd4:	e7f9      	b.n	b4dca <setup+0xa>
   b4dd6:	f001 fb8d 	bl	b64f4 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
   b4dda:	2000      	movs	r0, #0
   b4ddc:	f001 fba2 	bl	b6524 <spark_unsubscribe>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4de0:	2400      	movs	r4, #0
    ble_setup();
   b4de2:	f7ff fb39 	bl	b4458 <_Z9ble_setupv>
    init_memory();
   b4de6:	f7ff fef5 	bl	b4bd4 <_Z11init_memoryv>
    Time.zone(1);
   b4dea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   b4dee:	f003 f91d 	bl	b802c <_ZN9TimeClass4zoneEf>
   b4df2:	4950      	ldr	r1, [pc, #320]	; (b4f34 <setup+0x174>)
   b4df4:	4850      	ldr	r0, [pc, #320]	; (b4f38 <setup+0x178>)
        Serial.printf("Count1=: %d\n", count);
   b4df6:	4e51      	ldr	r6, [pc, #324]	; (b4f3c <setup+0x17c>)
   b4df8:	2301      	movs	r3, #1
   b4dfa:	4622      	mov	r2, r4
   b4dfc:	e9cd 4400 	strd	r4, r4, [sp]
   b4e00:	f001 fb88 	bl	b6514 <spark_subscribe>
    delay(10000);
   b4e04:	f242 7010 	movw	r0, #10000	; 0x2710
   b4e08:	f003 f9ac 	bl	b8164 <delay>
    Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b4e0c:	f003 fdee 	bl	b89ec <_Z16_fetch_usbserialv>
   b4e10:	4605      	mov	r5, r0
   b4e12:	f003 f959 	bl	b80c8 <_ZN9TimeClass4hourEv>
   b4e16:	9003      	str	r0, [sp, #12]
   b4e18:	f003 f962 	bl	b80e0 <_ZN9TimeClass6minuteEv>
   b4e1c:	9a03      	ldr	r2, [sp, #12]
   b4e1e:	4948      	ldr	r1, [pc, #288]	; (b4f40 <setup+0x180>)
   b4e20:	4603      	mov	r3, r0
   b4e22:	4628      	mov	r0, r5
   b4e24:	f7ff fa2e 	bl	b4284 <_ZN5Print6printfEPKcz>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4e28:	4622      	mov	r2, r4
   b4e2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b4e2e:	4845      	ldr	r0, [pc, #276]	; (b4f44 <setup+0x184>)
   b4e30:	f7ff f9b2 	bl	b4198 <_ZN5Timer6_startEjb.isra.0>
    Serial.printlnf("RSSI=%d", (int8_t)WiFi.RSSI());
   b4e34:	f003 fdda 	bl	b89ec <_Z16_fetch_usbserialv>
   b4e38:	4943      	ldr	r1, [pc, #268]	; (b4f48 <setup+0x188>)
   b4e3a:	4605      	mov	r5, r0
   b4e3c:	a805      	add	r0, sp, #20
   b4e3e:	f004 fa65 	bl	b930c <_ZN5spark9WiFiClass4RSSIEv>
   b4e42:	a805      	add	r0, sp, #20
   b4e44:	f004 fa3e 	bl	b92c4 <_ZNK10WiFiSignalcvaEv>
   b4e48:	4940      	ldr	r1, [pc, #256]	; (b4f4c <setup+0x18c>)
   b4e4a:	4602      	mov	r2, r0
   b4e4c:	4628      	mov	r0, r5
   b4e4e:	f7ff fabf 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
    Serial.printf("trying the HTTP GET\n");
   b4e52:	f003 fdcb 	bl	b89ec <_Z16_fetch_usbserialv>
   b4e56:	493e      	ldr	r1, [pc, #248]	; (b4f50 <setup+0x190>)
    while (!CALCULATE)
   b4e58:	4d3e      	ldr	r5, [pc, #248]	; (b4f54 <setup+0x194>)
    Serial.printf("trying the HTTP GET\n");
   b4e5a:	f7ff fa13 	bl	b4284 <_ZN5Print6printfEPKcz>
    Httprequest_today();
   b4e5e:	f7ff fdd3 	bl	b4a08 <_Z17Httprequest_todayv>
    Serial.println("trying the other method");
   b4e62:	f003 fdc3 	bl	b89ec <_Z16_fetch_usbserialv>
   b4e66:	493c      	ldr	r1, [pc, #240]	; (b4f58 <setup+0x198>)
   b4e68:	f003 f831 	bl	b7ece <_ZN5Print7printlnEPKc>
    htttttp();
   b4e6c:	f7ff fe5a 	bl	b4b24 <_Z7htttttpv>
    Serial.printf("Getting price data for yesterday\n");
   b4e70:	f003 fdbc 	bl	b89ec <_Z16_fetch_usbserialv>
   b4e74:	4939      	ldr	r1, [pc, #228]	; (b4f5c <setup+0x19c>)
   b4e76:	f7ff fa05 	bl	b4284 <_ZN5Print6printfEPKcz>
    get_data(Time.day() - 1);
   b4e7a:	f003 f949 	bl	b8110 <_ZN9TimeClass3dayEv>
   b4e7e:	3801      	subs	r0, #1
   b4e80:	f7ff ff72 	bl	b4d68 <_Z8get_datai>
    while (!CALCULATE)
   b4e84:	782b      	ldrb	r3, [r5, #0]
   b4e86:	b95b      	cbnz	r3, b4ea0 <setup+0xe0>
        delay(2000);
   b4e88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e8c:	f003 f96a 	bl	b8164 <delay>
        Serial.printf("Count1=: %d\n", count);
   b4e90:	f003 fdac 	bl	b89ec <_Z16_fetch_usbserialv>
   b4e94:	4622      	mov	r2, r4
   b4e96:	4631      	mov	r1, r6
   b4e98:	f7ff f9f4 	bl	b4284 <_ZN5Print6printfEPKcz>
        count++;
   b4e9c:	3401      	adds	r4, #1
    while (!CALCULATE)
   b4e9e:	e7f1      	b.n	b4e84 <setup+0xc4>
    delay(5000);
   b4ea0:	f241 3088 	movw	r0, #5000	; 0x1388
    CALCULATE = false;
   b4ea4:	2400      	movs	r4, #0
   b4ea6:	702c      	strb	r4, [r5, #0]
    delay(5000);
   b4ea8:	f003 f95c 	bl	b8164 <delay>
    rotate_prices();
   b4eac:	f7ff ff22 	bl	b4cf4 <_Z13rotate_pricesv>
    Serial.printf("Getting price data for today\n");
   b4eb0:	f003 fd9c 	bl	b89ec <_Z16_fetch_usbserialv>
   b4eb4:	492a      	ldr	r1, [pc, #168]	; (b4f60 <setup+0x1a0>)
        Serial.printf("Count2=: %d\n", count);
   b4eb6:	4e2b      	ldr	r6, [pc, #172]	; (b4f64 <setup+0x1a4>)
    Serial.printf("Getting price data for today\n");
   b4eb8:	f7ff f9e4 	bl	b4284 <_ZN5Print6printfEPKcz>
    get_data(Time.day());
   b4ebc:	f003 f928 	bl	b8110 <_ZN9TimeClass3dayEv>
   b4ec0:	f7ff ff52 	bl	b4d68 <_Z8get_datai>
    while (!CALCULATE)
   b4ec4:	782b      	ldrb	r3, [r5, #0]
   b4ec6:	b95b      	cbnz	r3, b4ee0 <setup+0x120>
        delay(1000);
   b4ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4ecc:	f003 f94a 	bl	b8164 <delay>
        Serial.printf("Count2=: %d\n", count);
   b4ed0:	f003 fd8c 	bl	b89ec <_Z16_fetch_usbserialv>
   b4ed4:	4622      	mov	r2, r4
   b4ed6:	4631      	mov	r1, r6
   b4ed8:	f7ff f9d4 	bl	b4284 <_ZN5Print6printfEPKcz>
        count++;
   b4edc:	3401      	adds	r4, #1
    while (!CALCULATE)
   b4ede:	e7f1      	b.n	b4ec4 <setup+0x104>
    rotate_prices();
   b4ee0:	f7ff ff08 	bl	b4cf4 <_Z13rotate_pricesv>
    delay(5000);
   b4ee4:	f241 3088 	movw	r0, #5000	; 0x1388
   b4ee8:	f003 f93c 	bl	b8164 <delay>
    if (Time.hour() >= PULL_TIME_1)
   b4eec:	f003 f8ec 	bl	b80c8 <_ZN9TimeClass4hourEv>
   b4ef0:	280c      	cmp	r0, #12
   b4ef2:	dd13      	ble.n	b4f1c <setup+0x15c>
        CALCULATE = false;
   b4ef4:	2300      	movs	r3, #0
   b4ef6:	702b      	strb	r3, [r5, #0]
        GET_DATA = true;
   b4ef8:	4b1b      	ldr	r3, [pc, #108]	; (b4f68 <setup+0x1a8>)
   b4efa:	2201      	movs	r2, #1
   b4efc:	701a      	strb	r2, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b4efe:	2103      	movs	r1, #3
   b4f00:	2008      	movs	r0, #8
   b4f02:	f004 fb2f 	bl	b9564 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b4f06:	2300      	movs	r3, #0
   b4f08:	9300      	str	r3, [sp, #0]
   b4f0a:	4918      	ldr	r1, [pc, #96]	; (b4f6c <setup+0x1ac>)
   b4f0c:	f04f 33ff 	mov.w	r3, #4294967295
   b4f10:	2201      	movs	r2, #1
   b4f12:	2008      	movs	r0, #8
   b4f14:	f003 fd92 	bl	b8a3c <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b4f18:	b00e      	add	sp, #56	; 0x38
   b4f1a:	bd70      	pop	{r4, r5, r6, pc}
        Serial.printf("The prices for tomorrov will be pulled at %d:00\n", PULL_TIME_1);
   b4f1c:	f003 fd66 	bl	b89ec <_Z16_fetch_usbserialv>
   b4f20:	4913      	ldr	r1, [pc, #76]	; (b4f70 <setup+0x1b0>)
   b4f22:	220d      	movs	r2, #13
   b4f24:	f7ff f9ae 	bl	b4284 <_ZN5Print6printfEPKcz>
        CALCULATE = true;
   b4f28:	2301      	movs	r3, #1
   b4f2a:	702b      	strb	r3, [r5, #0]
   b4f2c:	e7e7      	b.n	b4efe <setup+0x13e>
   b4f2e:	bf00      	nop
   b4f30:	2003d790 	.word	0x2003d790
   b4f34:	000b42a1 	.word	0x000b42a1
   b4f38:	000bc927 	.word	0x000bc927
   b4f3c:	000bc99f 	.word	0x000bc99f
   b4f40:	000bc92e 	.word	0x000bc92e
   b4f44:	2003e188 	.word	0x2003e188
   b4f48:	2003e710 	.word	0x2003e710
   b4f4c:	000bc948 	.word	0x000bc948
   b4f50:	000bc950 	.word	0x000bc950
   b4f54:	2003d771 	.word	0x2003d771
   b4f58:	000bc965 	.word	0x000bc965
   b4f5c:	000bc97d 	.word	0x000bc97d
   b4f60:	000bc9ac 	.word	0x000bc9ac
   b4f64:	000bc9ca 	.word	0x000bc9ca
   b4f68:	2003d78c 	.word	0x2003d78c
   b4f6c:	000b40d1 	.word	0x000b40d1
   b4f70:	000bc9d7 	.word	0x000bc9d7

000b4f74 <_Z15transmit_pricesPA2_ii>:
{
   b4f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4f78:	b08a      	sub	sp, #40	; 0x28
   b4f7a:	4605      	mov	r5, r0
   b4f7c:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b4f7e:	f003 fd35 	bl	b89ec <_Z16_fetch_usbserialv>
   b4f82:	4918      	ldr	r1, [pc, #96]	; (b4fe4 <_Z15transmit_pricesPA2_ii+0x70>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4f84:	4f18      	ldr	r7, [pc, #96]	; (b4fe8 <_Z15transmit_pricesPA2_ii+0x74>)
    Serial.printf("In work\n");
   b4f86:	f7ff f97d 	bl	b4284 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b4f8a:	4918      	ldr	r1, [pc, #96]	; (b4fec <_Z15transmit_pricesPA2_ii+0x78>)
   b4f8c:	a802      	add	r0, sp, #8
   b4f8e:	f001 fc44 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4f92:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4f94:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b4f98:	42b4      	cmp	r4, r6
   b4f9a:	da10      	bge.n	b4fbe <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4f9c:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4fa0:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4fa4:	4639      	mov	r1, r7
   b4fa6:	a806      	add	r0, sp, #24
   b4fa8:	f001 fd0e 	bl	b69c8 <_ZN6String6formatEPKcz>
   b4fac:	a906      	add	r1, sp, #24
   b4fae:	a802      	add	r0, sp, #8
   b4fb0:	f001 fca8 	bl	b6904 <_ZN6String6concatERKS_>
   b4fb4:	a806      	add	r0, sp, #24
   b4fb6:	f001 fbe5 	bl	b6784 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b4fba:	3401      	adds	r4, #1
   b4fbc:	e7ec      	b.n	b4f98 <_Z15transmit_pricesPA2_ii+0x24>
   b4fbe:	4b0c      	ldr	r3, [pc, #48]	; (b4ff0 <_Z15transmit_pricesPA2_ii+0x7c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4fc0:	9a02      	ldr	r2, [sp, #8]
   b4fc2:	781b      	ldrb	r3, [r3, #0]
   b4fc4:	490b      	ldr	r1, [pc, #44]	; (b4ff4 <_Z15transmit_pricesPA2_ii+0x80>)
   b4fc6:	f88d 3000 	strb.w	r3, [sp]
   b4fca:	a806      	add	r0, sp, #24
   b4fcc:	233c      	movs	r3, #60	; 0x3c
   b4fce:	f003 fab1 	bl	b8534 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4fd2:	a807      	add	r0, sp, #28
   b4fd4:	f7ff feb2 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String data = "Cheap(ish) hours of the day: ";
   b4fd8:	a802      	add	r0, sp, #8
   b4fda:	f001 fbd3 	bl	b6784 <_ZN6StringD1Ev>
}
   b4fde:	b00a      	add	sp, #40	; 0x28
   b4fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4fe4:	000bca08 	.word	0x000bca08
   b4fe8:	000bca2f 	.word	0x000bca2f
   b4fec:	000bca11 	.word	0x000bca11
   b4ff0:	2003d838 	.word	0x2003d838
   b4ff4:	000bca3e 	.word	0x000bca3e

000b4ff8 <loop>:
{
   b4ff8:	b570      	push	{r4, r5, r6, lr}
    if (GET_DATA)
   b4ffa:	4c59      	ldr	r4, [pc, #356]	; (b5160 <loop+0x168>)
   b4ffc:	7823      	ldrb	r3, [r4, #0]
{
   b4ffe:	b0c2      	sub	sp, #264	; 0x108
    if (GET_DATA)
   b5000:	b14b      	cbz	r3, b5016 <loop+0x1e>
        AWAITING_DATA = true;
   b5002:	4b58      	ldr	r3, [pc, #352]	; (b5164 <loop+0x16c>)
   b5004:	2201      	movs	r2, #1
   b5006:	701a      	strb	r2, [r3, #0]
        get_data(Time.day() + 1);
   b5008:	f003 f882 	bl	b8110 <_ZN9TimeClass3dayEv>
   b500c:	3001      	adds	r0, #1
   b500e:	f7ff feab 	bl	b4d68 <_Z8get_datai>
        GET_DATA = false;
   b5012:	2300      	movs	r3, #0
   b5014:	7023      	strb	r3, [r4, #0]
    if (CALCULATE)
   b5016:	4c54      	ldr	r4, [pc, #336]	; (b5168 <loop+0x170>)
   b5018:	4d54      	ldr	r5, [pc, #336]	; (b516c <loop+0x174>)
   b501a:	7823      	ldrb	r3, [r4, #0]
   b501c:	b333      	cbz	r3, b506c <loop+0x74>
        update_JSON();
   b501e:	f7ff fbab 	bl	b4778 <_Z11update_JSONv>
        cnt = calc_low(start_stop, cost_today, MAX_RANGE);
   b5022:	4b53      	ldr	r3, [pc, #332]	; (b5170 <loop+0x178>)
   b5024:	4853      	ldr	r0, [pc, #332]	; (b5174 <loop+0x17c>)
   b5026:	6819      	ldr	r1, [r3, #0]
   b5028:	2218      	movs	r2, #24
   b502a:	f7ff fab5 	bl	b4598 <_Z8calc_lowPA2_iPdi>
   b502e:	4b52      	ldr	r3, [pc, #328]	; (b5178 <loop+0x180>)
   b5030:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour(), Time.minute());
   b5032:	f003 fcdb 	bl	b89ec <_Z16_fetch_usbserialv>
   b5036:	4606      	mov	r6, r0
   b5038:	f003 f846 	bl	b80c8 <_ZN9TimeClass4hourEv>
   b503c:	9001      	str	r0, [sp, #4]
   b503e:	f003 f84f 	bl	b80e0 <_ZN9TimeClass6minuteEv>
   b5042:	9a01      	ldr	r2, [sp, #4]
   b5044:	494d      	ldr	r1, [pc, #308]	; (b517c <loop+0x184>)
   b5046:	4603      	mov	r3, r0
   b5048:	4630      	mov	r0, r6
   b504a:	f7ff f91b 	bl	b4284 <_ZN5Print6printfEPKcz>
        TRANSMIT_PRICE = true;
   b504e:	2301      	movs	r3, #1
   b5050:	702b      	strb	r3, [r5, #0]
        CALCULATE = false;
   b5052:	2300      	movs	r3, #0
   b5054:	7023      	strb	r3, [r4, #0]
        transmit_prices(start_stop, cnt);
   b5056:	4b48      	ldr	r3, [pc, #288]	; (b5178 <loop+0x180>)
   b5058:	4846      	ldr	r0, [pc, #280]	; (b5174 <loop+0x17c>)
   b505a:	6819      	ldr	r1, [r3, #0]
   b505c:	f7ff ff8a 	bl	b4f74 <_Z15transmit_pricesPA2_ii>
        STANDBY_STATE = true;
   b5060:	4b47      	ldr	r3, [pc, #284]	; (b5180 <loop+0x188>)
   b5062:	2201      	movs	r2, #1
   b5064:	701a      	strb	r2, [r3, #0]
        TRANSMIT_PRICE = false;
   b5066:	2300      	movs	r3, #0
   b5068:	702b      	strb	r3, [r5, #0]
   b506a:	e002      	b.n	b5072 <loop+0x7a>
    if (TRANSMIT_PRICE)
   b506c:	782b      	ldrb	r3, [r5, #0]
   b506e:	2b00      	cmp	r3, #0
   b5070:	d1f1      	bne.n	b5056 <loop+0x5e>
    if (TRANSMIT_SENSOR) // Did we receive a request for updated values
   b5072:	4d44      	ldr	r5, [pc, #272]	; (b5184 <loop+0x18c>)
   b5074:	782b      	ldrb	r3, [r5, #0]
   b5076:	b1db      	cbz	r3, b50b0 <loop+0xb8>
        Serial.printf("Received power/get\n");
   b5078:	f003 fcb8 	bl	b89ec <_Z16_fetch_usbserialv>
   b507c:	4942      	ldr	r1, [pc, #264]	; (b5188 <loop+0x190>)
   b507e:	f7ff f901 	bl	b4284 <_ZN5Print6printfEPKcz>
        wh_today[Time.hour()] += 1;
   b5082:	4b42      	ldr	r3, [pc, #264]	; (b518c <loop+0x194>)
   b5084:	681e      	ldr	r6, [r3, #0]
   b5086:	f003 f81f 	bl	b80c8 <_ZN9TimeClass4hourEv>
   b508a:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b508e:	4940      	ldr	r1, [pc, #256]	; (b5190 <loop+0x198>)
        wh_today[Time.hour()] += 1;
   b5090:	3301      	adds	r3, #1
   b5092:	f846 3020 	str.w	r3, [r6, r0, lsl #2]
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b5096:	4b3f      	ldr	r3, [pc, #252]	; (b5194 <loop+0x19c>)
   b5098:	a802      	add	r0, sp, #8
   b509a:	681a      	ldr	r2, [r3, #0]
   b509c:	f001 fa72 	bl	b6584 <sprintf>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b50a0:	2300      	movs	r3, #0
   b50a2:	483d      	ldr	r0, [pc, #244]	; (b5198 <loop+0x1a0>)
   b50a4:	22ff      	movs	r2, #255	; 0xff
   b50a6:	a902      	add	r1, sp, #8
   b50a8:	f001 ff18 	bl	b6edc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        TRANSMIT_SENSOR = false;
   b50ac:	2300      	movs	r3, #0
   b50ae:	702b      	strb	r3, [r5, #0]
    if (ROTATE)
   b50b0:	4d3a      	ldr	r5, [pc, #232]	; (b519c <loop+0x1a4>)
   b50b2:	782b      	ldrb	r3, [r5, #0]
   b50b4:	b12b      	cbz	r3, b50c2 <loop+0xca>
        rotate_prices();
   b50b6:	f7ff fe1d 	bl	b4cf4 <_Z13rotate_pricesv>
        ROTATE = false;
   b50ba:	2300      	movs	r3, #0
   b50bc:	702b      	strb	r3, [r5, #0]
        CALCULATE = true;
   b50be:	2301      	movs	r3, #1
   b50c0:	7023      	strb	r3, [r4, #0]
    if (UPDATE_WH_TODAY)
   b50c2:	4c37      	ldr	r4, [pc, #220]	; (b51a0 <loop+0x1a8>)
   b50c4:	7823      	ldrb	r3, [r4, #0]
   b50c6:	b11b      	cbz	r3, b50d0 <loop+0xd8>
        hourly_JSON_update();
   b50c8:	f7ff fb24 	bl	b4714 <_Z18hourly_JSON_updatev>
        UPDATE_WH_TODAY = false;
   b50cc:	2300      	movs	r3, #0
   b50ce:	7023      	strb	r3, [r4, #0]
    if (NewBLEConnection & ((millis() - last_connect) > 3000))
   b50d0:	4c34      	ldr	r4, [pc, #208]	; (b51a4 <loop+0x1ac>)
   b50d2:	7825      	ldrb	r5, [r4, #0]
   b50d4:	f000 ff50 	bl	b5f78 <HAL_Timer_Get_Milli_Seconds>
   b50d8:	4b33      	ldr	r3, [pc, #204]	; (b51a8 <loop+0x1b0>)
   b50da:	681b      	ldr	r3, [r3, #0]
   b50dc:	1ac0      	subs	r0, r0, r3
   b50de:	f640 33b8 	movw	r3, #3000	; 0xbb8
   b50e2:	4298      	cmp	r0, r3
   b50e4:	d934      	bls.n	b5150 <loop+0x158>
   b50e6:	2d00      	cmp	r5, #0
   b50e8:	d032      	beq.n	b5150 <loop+0x158>
        update_JSON();
   b50ea:	f7ff fb45 	bl	b4778 <_Z11update_JSONv>
        sprintf(buffer, "{\"watt\":%d}", calc_power);
   b50ee:	4b29      	ldr	r3, [pc, #164]	; (b5194 <loop+0x19c>)
   b50f0:	4927      	ldr	r1, [pc, #156]	; (b5190 <loop+0x198>)
   b50f2:	681a      	ldr	r2, [r3, #0]
   b50f4:	a802      	add	r0, sp, #8
   b50f6:	f001 fa45 	bl	b6584 <sprintf>
   b50fa:	2300      	movs	r3, #0
   b50fc:	22ff      	movs	r2, #255	; 0xff
   b50fe:	a902      	add	r1, sp, #8
   b5100:	4825      	ldr	r0, [pc, #148]	; (b5198 <loop+0x1a0>)
   b5102:	f001 feeb 	bl	b6edc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        DkkYesterdayCharacteristic.setValue(pricesyesterday_Json);
   b5106:	4929      	ldr	r1, [pc, #164]	; (b51ac <loop+0x1b4>)
   b5108:	4829      	ldr	r0, [pc, #164]	; (b51b0 <loop+0x1b8>)
   b510a:	2200      	movs	r2, #0
   b510c:	f001 ff46 	bl	b6f9c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue(pricestoday_Json);       // string Kr/kwhr
   b5110:	4928      	ldr	r1, [pc, #160]	; (b51b4 <loop+0x1bc>)
   b5112:	4829      	ldr	r0, [pc, #164]	; (b51b8 <loop+0x1c0>)
   b5114:	2200      	movs	r2, #0
   b5116:	f001 ff41 	bl	b6f9c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTomorrowCharacteristic.setValue(pricestomorrow_Json); // string Kr/kwhr
   b511a:	4928      	ldr	r1, [pc, #160]	; (b51bc <loop+0x1c4>)
   b511c:	4828      	ldr	r0, [pc, #160]	; (b51c0 <loop+0x1c8>)
   b511e:	2200      	movs	r2, #0
   b5120:	f001 ff3c 	bl	b6f9c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrYesterdayCharacteristic.setValue(wh_yesterday_Json);  // string Whr
   b5124:	4927      	ldr	r1, [pc, #156]	; (b51c4 <loop+0x1cc>)
   b5126:	4828      	ldr	r0, [pc, #160]	; (b51c8 <loop+0x1d0>)
   b5128:	2200      	movs	r2, #0
   b512a:	f001 ff37 	bl	b6f9c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        WhrTodayCharacteristic.setValue(wh_today_Json);          // Whr used in the corresponding hour
   b512e:	4927      	ldr	r1, [pc, #156]	; (b51cc <loop+0x1d4>)
   b5130:	4827      	ldr	r0, [pc, #156]	; (b51d0 <loop+0x1d8>)
   b5132:	2200      	movs	r2, #0
   b5134:	f001 ff32 	bl	b6f9c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
        DkkTodayCharacteristic.setValue("{\"pricestoday\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}");
   b5138:	4926      	ldr	r1, [pc, #152]	; (b51d4 <loop+0x1dc>)
   b513a:	481f      	ldr	r0, [pc, #124]	; (b51b8 <loop+0x1c0>)
   b513c:	2200      	movs	r2, #0
   b513e:	f001 ff32 	bl	b6fa6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        NewBLEConnection = false;
   b5142:	2300      	movs	r3, #0
   b5144:	7023      	strb	r3, [r4, #0]
        Serial.printf("ble_connected\n");
   b5146:	f003 fc51 	bl	b89ec <_Z16_fetch_usbserialv>
   b514a:	4923      	ldr	r1, [pc, #140]	; (b51d8 <loop+0x1e0>)
   b514c:	f7ff f89a 	bl	b4284 <_ZN5Print6printfEPKcz>
    delay(1000);
   b5150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b5154:	b042      	add	sp, #264	; 0x108
   b5156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
   b515a:	f003 b803 	b.w	b8164 <delay>
   b515e:	bf00      	nop
   b5160:	2003d78c 	.word	0x2003d78c
   b5164:	2003d770 	.word	0x2003d770
   b5168:	2003d771 	.word	0x2003d771
   b516c:	2003d791 	.word	0x2003d791
   b5170:	2003d8c4 	.word	0x2003d8c4
   b5174:	2003d840 	.word	0x2003d840
   b5178:	2003d8a0 	.word	0x2003d8a0
   b517c:	000bc92e 	.word	0x000bc92e
   b5180:	2003d78f 	.word	0x2003d78f
   b5184:	2003d792 	.word	0x2003d792
   b5188:	000bca4e 	.word	0x000bca4e
   b518c:	2003e1a4 	.word	0x2003e1a4
   b5190:	000bca62 	.word	0x000bca62
   b5194:	2003d8a4 	.word	0x2003d8a4
   b5198:	2003d794 	.word	0x2003d794
   b519c:	2003d78e 	.word	0x2003d78e
   b51a0:	2003d793 	.word	0x2003d793
   b51a4:	2003d78d 	.word	0x2003d78d
   b51a8:	2003dcf0 	.word	0x2003dcf0
   b51ac:	2003dd14 	.word	0x2003dd14
   b51b0:	2003d784 	.word	0x2003d784
   b51b4:	2003dcf4 	.word	0x2003dcf4
   b51b8:	2003d774 	.word	0x2003d774
   b51bc:	2003dd04 	.word	0x2003dd04
   b51c0:	2003d77c 	.word	0x2003d77c
   b51c4:	2003e1bc 	.word	0x2003e1bc
   b51c8:	2003d7a4 	.word	0x2003d7a4
   b51cc:	2003e1a8 	.word	0x2003e1a8
   b51d0:	2003d79c 	.word	0x2003d79c
   b51d4:	000bca6e 	.word	0x000bca6e
   b51d8:	000bcabf 	.word	0x000bcabf

000b51dc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b51dc:	b082      	sub	sp, #8
   b51de:	b5f0      	push	{r4, r5, r6, r7, lr}
   b51e0:	b08f      	sub	sp, #60	; 0x3c
        BleUuid cUuid(charUuid);
   b51e2:	ad15      	add	r5, sp, #84	; 0x54
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b51e4:	9315      	str	r3, [sp, #84]	; 0x54
      : _M_ptr(0), _M_refcount()
   b51e6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b51e8:	e9c0 3300 	strd	r3, r3, [r0]
   b51ec:	4606      	mov	r6, r0
   b51ee:	4694      	mov	ip, r2
   b51f0:	460f      	mov	r7, r1
        BleUuid cUuid(charUuid);
   b51f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51f4:	ac04      	add	r4, sp, #16
   b51f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51f8:	682b      	ldr	r3, [r5, #0]
   b51fa:	6023      	str	r3, [r4, #0]
        BleUuid sUuid(svcUuid);
   b51fc:	ad1a      	add	r5, sp, #104	; 0x68
   b51fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5200:	ac09      	add	r4, sp, #36	; 0x24
   b5202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5204:	682b      	ldr	r3, [r5, #0]
   b5206:	6023      	str	r3, [r4, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5208:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b520a:	9302      	str	r3, [sp, #8]
   b520c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   b520e:	9301      	str	r3, [sp, #4]
   b5210:	ab09      	add	r3, sp, #36	; 0x24
   b5212:	9300      	str	r3, [sp, #0]
   b5214:	4630      	mov	r0, r6
   b5216:	ab04      	add	r3, sp, #16
   b5218:	4662      	mov	r2, ip
   b521a:	4639      	mov	r1, r7
   b521c:	f002 fbb4 	bl	b7988 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5220:	4630      	mov	r0, r6
   b5222:	b00f      	add	sp, #60	; 0x3c
   b5224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5228:	b002      	add	sp, #8
   b522a:	4770      	bx	lr

000b522c <_GLOBAL__sub_I_argonName>:
   b522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   b5230:	4b91      	ldr	r3, [pc, #580]	; (b5478 <_GLOBAL__sub_I_argonName+0x24c>)
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5232:	4d92      	ldr	r5, [pc, #584]	; (b547c <_GLOBAL__sub_I_argonName+0x250>)
const BleUuid wattcharacteristicUuid(watt_c);
   b5234:	f8df b2e4 	ldr.w	fp, [pc, #740]	; b551c <_GLOBAL__sub_I_argonName+0x2f0>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b5238:	f8df a2e4 	ldr.w	sl, [pc, #740]	; b5520 <_GLOBAL__sub_I_argonName+0x2f4>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b523c:	f8df 92e4 	ldr.w	r9, [pc, #740]	; b5524 <_GLOBAL__sub_I_argonName+0x2f8>
   b5240:	f04f 0801 	mov.w	r8, #1
   b5244:	f883 8000 	strb.w	r8, [r3]
const BleUuid powermonitorserviceUuid(serviceUuid_c);
   b5248:	4b8d      	ldr	r3, [pc, #564]	; (b5480 <_GLOBAL__sub_I_argonName+0x254>)
   b524a:	b093      	sub	sp, #76	; 0x4c
   b524c:	6819      	ldr	r1, [r3, #0]
   b524e:	4628      	mov	r0, r5
   b5250:	f001 fe06 	bl	b6e60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid wattcharacteristicUuid(watt_c);
   b5254:	4b8b      	ldr	r3, [pc, #556]	; (b5484 <_GLOBAL__sub_I_argonName+0x258>)
   b5256:	4658      	mov	r0, fp
   b5258:	6819      	ldr	r1, [r3, #0]
   b525a:	f001 fe01 	bl	b6e60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkkyesterdaycharacteristicUuid(DkkYesterday_c);
   b525e:	4b8a      	ldr	r3, [pc, #552]	; (b5488 <_GLOBAL__sub_I_argonName+0x25c>)
   b5260:	4650      	mov	r0, sl
   b5262:	6819      	ldr	r1, [r3, #0]
   b5264:	f001 fdfc 	bl	b6e60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktodaycharacteristicUuid(DkkToday_c);
   b5268:	4b88      	ldr	r3, [pc, #544]	; (b548c <_GLOBAL__sub_I_argonName+0x260>)
   b526a:	4648      	mov	r0, r9
   b526c:	6819      	ldr	r1, [r3, #0]
   b526e:	f001 fdf7 	bl	b6e60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid DkktomorrowcharacteristicUuid(DkkTomorrow_c);
   b5272:	4b87      	ldr	r3, [pc, #540]	; (b5490 <_GLOBAL__sub_I_argonName+0x264>)
   b5274:	4887      	ldr	r0, [pc, #540]	; (b5494 <_GLOBAL__sub_I_argonName+0x268>)
   b5276:	6819      	ldr	r1, [r3, #0]
   b5278:	f001 fdf2 	bl	b6e60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrTodaycharacteristicUuid (WhrToday_c);
   b527c:	4b86      	ldr	r3, [pc, #536]	; (b5498 <_GLOBAL__sub_I_argonName+0x26c>)
   b527e:	4887      	ldr	r0, [pc, #540]	; (b549c <_GLOBAL__sub_I_argonName+0x270>)
   b5280:	6819      	ldr	r1, [r3, #0]
   b5282:	f001 fded 	bl	b6e60 <_ZN8particle7BleUuidC1EPKc>
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b5286:	4b86      	ldr	r3, [pc, #536]	; (b54a0 <_GLOBAL__sub_I_argonName+0x274>)
   b5288:	4886      	ldr	r0, [pc, #536]	; (b54a4 <_GLOBAL__sub_I_argonName+0x278>)
   b528a:	6819      	ldr	r1, [r3, #0]
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b528c:	2400      	movs	r4, #0
const BleUuid WhrYesterdayCharacteristicUuid(WhrYesterday_c);
   b528e:	f001 fde7 	bl	b6e60 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic WattCharacteristic("Watt now", BleCharacteristicProperty::NOTIFY, wattcharacteristicUuid, powermonitorserviceUuid);
   b5292:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5296:	462e      	mov	r6, r5
   b5298:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b529a:	2710      	movs	r7, #16
   b529c:	eb0d 0c07 	add.w	ip, sp, r7
   b52a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b52a4:	6833      	ldr	r3, [r6, #0]
   b52a6:	f8cc 3000 	str.w	r3, [ip]
   b52aa:	f10b 0304 	add.w	r3, fp, #4
   b52ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52b0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b52b4:	f8db 3000 	ldr.w	r3, [fp]
   b52b8:	497b      	ldr	r1, [pc, #492]	; (b54a8 <_GLOBAL__sub_I_argonName+0x27c>)
   b52ba:	487c      	ldr	r0, [pc, #496]	; (b54ac <_GLOBAL__sub_I_argonName+0x280>)
   b52bc:	463a      	mov	r2, r7
   b52be:	f7ff ff8d 	bl	b51dc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkYesterdayCharacteristic("DKK Yesterday", BleCharacteristicProperty::NOTIFY, DkkyesterdaycharacteristicUuid, powermonitorserviceUuid);
   b52c2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b52c6:	46ae      	mov	lr, r5
   b52c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b52cc:	eb0d 0c07 	add.w	ip, sp, r7
   b52d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b52d4:	6833      	ldr	r3, [r6, #0]
   b52d6:	f8cc 3000 	str.w	r3, [ip]
   b52da:	f10a 0304 	add.w	r3, sl, #4
   b52de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b52e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b52e4:	f8da 3000 	ldr.w	r3, [sl]
   b52e8:	4971      	ldr	r1, [pc, #452]	; (b54b0 <_GLOBAL__sub_I_argonName+0x284>)
   b52ea:	4872      	ldr	r0, [pc, #456]	; (b54b4 <_GLOBAL__sub_I_argonName+0x288>)
   b52ec:	463a      	mov	r2, r7
   b52ee:	f7ff ff75 	bl	b51dc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTodayCharacteristic("DKK Today", BleCharacteristicProperty::NOTIFY, DkktodaycharacteristicUuid, powermonitorserviceUuid);
   b52f2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b52f6:	46ae      	mov	lr, r5
   b52f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b52fc:	eb0d 0c07 	add.w	ip, sp, r7
   b5300:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5304:	6833      	ldr	r3, [r6, #0]
   b5306:	f8cc 3000 	str.w	r3, [ip]
   b530a:	f109 0304 	add.w	r3, r9, #4
   b530e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5310:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5314:	f8d9 3000 	ldr.w	r3, [r9]
   b5318:	4967      	ldr	r1, [pc, #412]	; (b54b8 <_GLOBAL__sub_I_argonName+0x28c>)
   b531a:	4868      	ldr	r0, [pc, #416]	; (b54bc <_GLOBAL__sub_I_argonName+0x290>)
   b531c:	463a      	mov	r2, r7
   b531e:	f7ff ff5d 	bl	b51dc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic DkkTomorrowCharacteristic("DKK Tomorrow", BleCharacteristicProperty::NOTIFY, DkktomorrowcharacteristicUuid, powermonitorserviceUuid);
   b5322:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5326:	46ae      	mov	lr, r5
   b5328:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b532c:	eb0d 0c07 	add.w	ip, sp, r7
   b5330:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5334:	6833      	ldr	r3, [r6, #0]
   b5336:	f8cc 3000 	str.w	r3, [ip]
   b533a:	4b56      	ldr	r3, [pc, #344]	; (b5494 <_GLOBAL__sub_I_argonName+0x268>)
   b533c:	3304      	adds	r3, #4
   b533e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5340:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5344:	4b53      	ldr	r3, [pc, #332]	; (b5494 <_GLOBAL__sub_I_argonName+0x268>)
   b5346:	495e      	ldr	r1, [pc, #376]	; (b54c0 <_GLOBAL__sub_I_argonName+0x294>)
   b5348:	681b      	ldr	r3, [r3, #0]
   b534a:	485e      	ldr	r0, [pc, #376]	; (b54c4 <_GLOBAL__sub_I_argonName+0x298>)
   b534c:	463a      	mov	r2, r7
   b534e:	f7ff ff45 	bl	b51dc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrTodayCharacteristic("Whr Today", BleCharacteristicProperty::NOTIFY, WhrTodaycharacteristicUuid, powermonitorserviceUuid);
   b5352:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5356:	46ae      	mov	lr, r5
   b5358:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b535c:	eb0d 0c07 	add.w	ip, sp, r7
   b5360:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5364:	6833      	ldr	r3, [r6, #0]
   b5366:	f8cc 3000 	str.w	r3, [ip]
   b536a:	4b4c      	ldr	r3, [pc, #304]	; (b549c <_GLOBAL__sub_I_argonName+0x270>)
   b536c:	3304      	adds	r3, #4
   b536e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5370:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b5374:	4b49      	ldr	r3, [pc, #292]	; (b549c <_GLOBAL__sub_I_argonName+0x270>)
   b5376:	4954      	ldr	r1, [pc, #336]	; (b54c8 <_GLOBAL__sub_I_argonName+0x29c>)
   b5378:	681b      	ldr	r3, [r3, #0]
   b537a:	4854      	ldr	r0, [pc, #336]	; (b54cc <_GLOBAL__sub_I_argonName+0x2a0>)
   b537c:	463a      	mov	r2, r7
   b537e:	f7ff ff2d 	bl	b51dc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
BleCharacteristic WhrYesterdayCharacteristic("Whr Yesterday", BleCharacteristicProperty::NOTIFY, WhrYesterdayCharacteristicUuid, powermonitorserviceUuid);
   b5382:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   b5386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5388:	eb0d 0c07 	add.w	ip, sp, r7
   b538c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5390:	4d44      	ldr	r5, [pc, #272]	; (b54a4 <_GLOBAL__sub_I_argonName+0x278>)
   b5392:	6833      	ldr	r3, [r6, #0]
   b5394:	f8cc 3000 	str.w	r3, [ip]
   b5398:	1d2b      	adds	r3, r5, #4
   b539a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b539c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   b53a0:	463a      	mov	r2, r7
   b53a2:	682b      	ldr	r3, [r5, #0]
   b53a4:	494a      	ldr	r1, [pc, #296]	; (b54d0 <_GLOBAL__sub_I_argonName+0x2a4>)
   b53a6:	484b      	ldr	r0, [pc, #300]	; (b54d4 <_GLOBAL__sub_I_argonName+0x2a8>)
} http_request_t;
   b53a8:	4d4b      	ldr	r5, [pc, #300]	; (b54d8 <_GLOBAL__sub_I_argonName+0x2ac>)
   b53aa:	4e4c      	ldr	r6, [pc, #304]	; (b54dc <_GLOBAL__sub_I_argonName+0x2b0>)
   b53ac:	f7ff ff16 	bl	b51dc <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
TCPClient client;
   b53b0:	484b      	ldr	r0, [pc, #300]	; (b54e0 <_GLOBAL__sub_I_argonName+0x2b4>)
   b53b2:	f003 fed5 	bl	b9160 <_ZN9TCPClientC1Ev>
HttpClient http;
   b53b6:	484b      	ldr	r0, [pc, #300]	; (b54e4 <_GLOBAL__sub_I_argonName+0x2b8>)
   b53b8:	f000 fbf8 	bl	b5bac <_ZN10HttpClientC1Ev>
   b53bc:	4629      	mov	r1, r5
   b53be:	4630      	mov	r0, r6
   b53c0:	f001 fa2b 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
   b53c4:	19f0      	adds	r0, r6, r7
   b53c6:	f003 fa5b 	bl	b8880 <_ZN9IPAddressC1Ev>
   b53ca:	4629      	mov	r1, r5
   b53cc:	f106 0028 	add.w	r0, r6, #40	; 0x28
   b53d0:	f001 fa23 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
   b53d4:	4629      	mov	r1, r5
   b53d6:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   b53da:	f001 fa1e 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
} http_response_t;
   b53de:	4629      	mov	r1, r5
   b53e0:	4841      	ldr	r0, [pc, #260]	; (b54e8 <_GLOBAL__sub_I_argonName+0x2bc>)
   b53e2:	f001 fa1a 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
uint8_t currentHour = Time.hour();
   b53e6:	f002 fe6f 	bl	b80c8 <_ZN9TimeClass4hourEv>
   b53ea:	4b40      	ldr	r3, [pc, #256]	; (b54ec <_GLOBAL__sub_I_argonName+0x2c0>)
String pricestoday_Json;
   b53ec:	4629      	mov	r1, r5
uint8_t currentHour = Time.hour();
   b53ee:	7018      	strb	r0, [r3, #0]
String pricestoday_Json;
   b53f0:	483f      	ldr	r0, [pc, #252]	; (b54f0 <_GLOBAL__sub_I_argonName+0x2c4>)
   b53f2:	f001 fa12 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
String pricestomorrow_Json;
   b53f6:	4629      	mov	r1, r5
   b53f8:	483e      	ldr	r0, [pc, #248]	; (b54f4 <_GLOBAL__sub_I_argonName+0x2c8>)
   b53fa:	f001 fa0e 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
String pricesyesterday_Json;
   b53fe:	4629      	mov	r1, r5
   b5400:	483d      	ldr	r0, [pc, #244]	; (b54f8 <_GLOBAL__sub_I_argonName+0x2cc>)
   b5402:	f001 fa0a 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
String wh_today_Json;
   b5406:	4629      	mov	r1, r5
   b5408:	483c      	ldr	r0, [pc, #240]	; (b54fc <_GLOBAL__sub_I_argonName+0x2d0>)
   b540a:	f001 fa06 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
String wh_yesterday_Json;
   b540e:	4629      	mov	r1, r5
   b5410:	483b      	ldr	r0, [pc, #236]	; (b5500 <_GLOBAL__sub_I_argonName+0x2d4>)
   b5412:	f001 fa02 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5416:	4b3b      	ldr	r3, [pc, #236]	; (b5504 <_GLOBAL__sub_I_argonName+0x2d8>)
   b5418:	930e      	str	r3, [sp, #56]	; 0x38
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b541a:	ad0e      	add	r5, sp, #56	; 0x38
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b541c:	4b3a      	ldr	r3, [pc, #232]	; (b5508 <_GLOBAL__sub_I_argonName+0x2dc>)
   b541e:	4a3b      	ldr	r2, [pc, #236]	; (b550c <_GLOBAL__sub_I_argonName+0x2e0>)
   b5420:	601a      	str	r2, [r3, #0]
   b5422:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5426:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b542a:	ae0c      	add	r6, sp, #48	; 0x30
   b542c:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5430:	e892 0003 	ldmia.w	r2, {r0, r1}
   b5434:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5438:	e896 0003 	ldmia.w	r6, {r0, r1}
   b543c:	e882 0003 	stmia.w	r2, {r0, r1}
   b5440:	4a33      	ldr	r2, [pc, #204]	; (b5510 <_GLOBAL__sub_I_argonName+0x2e4>)
   b5442:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5444:	699a      	ldr	r2, [r3, #24]
   b5446:	9211      	str	r2, [sp, #68]	; 0x44
      __b = _GLIBCXX_MOVE(__tmp);
   b5448:	4a32      	ldr	r2, [pc, #200]	; (b5514 <_GLOBAL__sub_I_argonName+0x2e8>)
   b544a:	619a      	str	r2, [r3, #24]
   b544c:	711c      	strb	r4, [r3, #4]
   b544e:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b5450:	4a31      	ldr	r2, [pc, #196]	; (b5518 <_GLOBAL__sub_I_argonName+0x2ec>)
      __a = _GLIBCXX_MOVE(__b);
   b5452:	9410      	str	r4, [sp, #64]	; 0x40
   b5454:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5458:	f103 0008 	add.w	r0, r3, #8
   b545c:	e9cd 8400 	strd	r8, r4, [sp]
   b5460:	f000 fe3c 	bl	b60dc <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5464:	4628      	mov	r0, r5
   b5466:	f7fe ffc1 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
SYSTEM_THREAD(ENABLED);
   b546a:	4621      	mov	r1, r4
   b546c:	4640      	mov	r0, r8
   b546e:	b013      	add	sp, #76	; 0x4c
   b5470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED);
   b5474:	f000 bfa2 	b.w	b63bc <system_thread_set_state>
   b5478:	2003d838 	.word	0x2003d838
   b547c:	2003d7c0 	.word	0x2003d7c0
   b5480:	2003d57c 	.word	0x2003d57c
   b5484:	2003d580 	.word	0x2003d580
   b5488:	2003d548 	.word	0x2003d548
   b548c:	2003d540 	.word	0x2003d540
   b5490:	2003d544 	.word	0x2003d544
   b5494:	2003d7fc 	.word	0x2003d7fc
   b5498:	2003d54c 	.word	0x2003d54c
   b549c:	2003d7e8 	.word	0x2003d7e8
   b54a0:	2003d550 	.word	0x2003d550
   b54a4:	2003d824 	.word	0x2003d824
   b54a8:	000bcace 	.word	0x000bcace
   b54ac:	2003d794 	.word	0x2003d794
   b54b0:	000bcad7 	.word	0x000bcad7
   b54b4:	2003d784 	.word	0x2003d784
   b54b8:	000bcae5 	.word	0x000bcae5
   b54bc:	2003d774 	.word	0x2003d774
   b54c0:	000bcaef 	.word	0x000bcaef
   b54c4:	2003d77c 	.word	0x2003d77c
   b54c8:	000bcafc 	.word	0x000bcafc
   b54cc:	2003d79c 	.word	0x2003d79c
   b54d0:	000bcb06 	.word	0x000bcb06
   b54d4:	2003d7a4 	.word	0x2003d7a4
   b54d8:	000bcc9b 	.word	0x000bcc9b
   b54dc:	2003dd24 	.word	0x2003dd24
   b54e0:	2003d8a8 	.word	0x2003d8a8
   b54e4:	2003d8d4 	.word	0x2003d8d4
   b54e8:	2003dd74 	.word	0x2003dd74
   b54ec:	2003d8d0 	.word	0x2003d8d0
   b54f0:	2003dcf4 	.word	0x2003dcf4
   b54f4:	2003dd04 	.word	0x2003dd04
   b54f8:	2003dd14 	.word	0x2003dd14
   b54fc:	2003e1a8 	.word	0x2003e1a8
   b5500:	2003e1bc 	.word	0x2003e1bc
   b5504:	000b41c1 	.word	0x000b41c1
   b5508:	2003e188 	.word	0x2003e188
   b550c:	000bcb1c 	.word	0x000bcb1c
   b5510:	000b4167 	.word	0x000b4167
   b5514:	000b417b 	.word	0x000b417b
   b5518:	000b412d 	.word	0x000b412d
   b551c:	2003d7ac 	.word	0x2003d7ac
   b5520:	2003d810 	.word	0x2003d810
   b5524:	2003d7d4 	.word	0x2003d7d4

000b5528 <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b5528:	b570      	push	{r4, r5, r6, lr}
   b552a:	4604      	mov	r4, r0
   b552c:	4605      	mov	r5, r0
   b552e:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b5532:	4628      	mov	r0, r5
   b5534:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b5538:	f000 f815 	bl	b5566 <_ZN12mDNSResolver8ResponseC1Ev>
   b553c:	42ae      	cmp	r6, r5
   b553e:	d1f8      	bne.n	b5532 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b5540:	2300      	movs	r3, #0
   b5542:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5546:	4620      	mov	r0, r4
   b5548:	bd70      	pop	{r4, r5, r6, pc}

000b554a <_ZN9IPAddressaSImEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b554a:	b530      	push	{r4, r5, lr}
   b554c:	b087      	sub	sp, #28
   b554e:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5550:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5552:	4668      	mov	r0, sp
   b5554:	f003 f9b4 	bl	b88c0 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b5558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b555a:	3404      	adds	r4, #4
   b555c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b555e:	682b      	ldr	r3, [r5, #0]
   b5560:	7023      	strb	r3, [r4, #0]
    }
   b5562:	b007      	add	sp, #28
   b5564:	bd30      	pop	{r4, r5, pc}

000b5566 <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b5566:	b538      	push	{r3, r4, r5, lr}
   b5568:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b556c:	4604      	mov	r4, r0
   b556e:	4628      	mov	r0, r5
   b5570:	f003 f986 	bl	b8880 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b5574:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b5576:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b5578:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b557a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b557e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b5582:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b5586:	f04f 31ff 	mov.w	r1, #4294967295
   b558a:	f7ff ffde 	bl	b554a <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b558e:	4620      	mov	r0, r4
   b5590:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5594 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
#ifdef TEST
#include <stdlib.h>
#endif

namespace mDNSResolver {
  Cache cache;
   b5594:	4801      	ldr	r0, [pc, #4]	; (b559c <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b5596:	f7ff bfc7 	b.w	b5528 <_ZN12mDNSResolver5CacheC1Ev>
   b559a:	bf00      	nop
   b559c:	2003e1cc 	.word	0x2003e1cc

000b55a0 <update_offset>:
    return newbuffer + p->offset;
}

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
   b55a0:	b538      	push	{r3, r4, r5, lr}
    const unsigned char *buffer_pointer = NULL;
    if ((buffer == NULL) || (buffer->buffer == NULL))
   b55a2:	4604      	mov	r4, r0
   b55a4:	b138      	cbz	r0, b55b6 <update_offset+0x16>
   b55a6:	6800      	ldr	r0, [r0, #0]
   b55a8:	b128      	cbz	r0, b55b6 <update_offset+0x16>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
   b55aa:	68a5      	ldr	r5, [r4, #8]

    buffer->offset += strlen((const char*)buffer_pointer);
   b55ac:	4428      	add	r0, r5
   b55ae:	f004 ff04 	bl	ba3ba <strlen>
   b55b2:	4428      	add	r0, r5
   b55b4:	60a0      	str	r0, [r4, #8]
}
   b55b6:	bd38      	pop	{r3, r4, r5, pc}

000b55b8 <ensure>:
{
   b55b8:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   b55ba:	4604      	mov	r4, r0
   b55bc:	b1b8      	cbz	r0, b55ee <ensure+0x36>
   b55be:	6805      	ldr	r5, [r0, #0]
   b55c0:	b165      	cbz	r5, b55dc <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   b55c2:	6843      	ldr	r3, [r0, #4]
   b55c4:	b113      	cbz	r3, b55cc <ensure+0x14>
   b55c6:	6882      	ldr	r2, [r0, #8]
   b55c8:	4293      	cmp	r3, r2
   b55ca:	d910      	bls.n	b55ee <ensure+0x36>
    if (needed > INT_MAX)
   b55cc:	2900      	cmp	r1, #0
   b55ce:	db0e      	blt.n	b55ee <ensure+0x36>
    needed += p->offset + 1;
   b55d0:	68a2      	ldr	r2, [r4, #8]
   b55d2:	1c4e      	adds	r6, r1, #1
   b55d4:	4416      	add	r6, r2
    if (needed <= p->length)
   b55d6:	42b3      	cmp	r3, r6
   b55d8:	d302      	bcc.n	b55e0 <ensure+0x28>
        return p->buffer + p->offset;
   b55da:	4415      	add	r5, r2
}
   b55dc:	4628      	mov	r0, r5
   b55de:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   b55e0:	6923      	ldr	r3, [r4, #16]
   b55e2:	b923      	cbnz	r3, b55ee <ensure+0x36>
    if (needed > (INT_MAX / 2))
   b55e4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   b55e8:	d303      	bcc.n	b55f2 <ensure+0x3a>
        if (needed <= INT_MAX)
   b55ea:	2e00      	cmp	r6, #0
   b55ec:	da0f      	bge.n	b560e <ensure+0x56>
        return NULL;
   b55ee:	2500      	movs	r5, #0
   b55f0:	e7f4      	b.n	b55dc <ensure+0x24>
        newsize = needed * 2;
   b55f2:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   b55f4:	6a23      	ldr	r3, [r4, #32]
   b55f6:	b16b      	cbz	r3, b5614 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   b55f8:	4628      	mov	r0, r5
   b55fa:	4631      	mov	r1, r6
   b55fc:	4798      	blx	r3
        if (newbuffer == NULL)
   b55fe:	4605      	mov	r5, r0
   b5600:	b9b0      	cbnz	r0, b5630 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   b5602:	69e3      	ldr	r3, [r4, #28]
   b5604:	6820      	ldr	r0, [r4, #0]
   b5606:	4798      	blx	r3
            p->buffer = NULL;
   b5608:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   b560c:	e7e6      	b.n	b55dc <ensure+0x24>
            newsize = INT_MAX;
   b560e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   b5612:	e7ef      	b.n	b55f4 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   b5614:	69a3      	ldr	r3, [r4, #24]
   b5616:	4630      	mov	r0, r6
   b5618:	4798      	blx	r3
        if (!newbuffer)
   b561a:	4605      	mov	r5, r0
   b561c:	2800      	cmp	r0, #0
   b561e:	d0f0      	beq.n	b5602 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   b5620:	68a2      	ldr	r2, [r4, #8]
   b5622:	6821      	ldr	r1, [r4, #0]
   b5624:	3201      	adds	r2, #1
   b5626:	f004 fe2a 	bl	ba27e <memcpy>
        p->hooks.deallocate(p->buffer);
   b562a:	69e3      	ldr	r3, [r4, #28]
   b562c:	6820      	ldr	r0, [r4, #0]
   b562e:	4798      	blx	r3
    return newbuffer + p->offset;
   b5630:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   b5632:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   b5636:	441d      	add	r5, r3
   b5638:	e7d0      	b.n	b55dc <ensure+0x24>
	...

000b563c <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
   b563c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5640:	4606      	mov	r6, r0
    unsigned char *output_pointer = NULL;
    size_t output_length = 0;
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;

    if (output_buffer == NULL)
   b5642:	4608      	mov	r0, r1
   b5644:	b911      	cbnz	r1, b564c <print_string_ptr+0x10>
    {
        return false;
   b5646:	2000      	movs	r0, #0
    }
    output[output_length + 1] = '\"';
    output[output_length + 2] = '\0';

    return true;
}
   b5648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   b564c:	b336      	cbz	r6, b569c <print_string_ptr+0x60>
   b564e:	4f44      	ldr	r7, [pc, #272]	; (b5760 <print_string_ptr+0x124>)
   b5650:	4631      	mov	r1, r6
    size_t escape_characters = 0;
   b5652:	f04f 0a00 	mov.w	sl, #0
   b5656:	2401      	movs	r4, #1
   b5658:	460d      	mov	r5, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   b565a:	f811 3b01 	ldrb.w	r3, [r1], #1
   b565e:	bb3b      	cbnz	r3, b56b0 <print_string_ptr+0x74>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   b5660:	1bad      	subs	r5, r5, r6
   b5662:	4455      	add	r5, sl
    output = ensure(output_buffer, output_length + sizeof("\"\""));
   b5664:	1ce9      	adds	r1, r5, #3
   b5666:	f7ff ffa7 	bl	b55b8 <ensure>
    if (output == NULL)
   b566a:	4607      	mov	r7, r0
   b566c:	2800      	cmp	r0, #0
   b566e:	d0ea      	beq.n	b5646 <print_string_ptr+0xa>
    if (escape_characters == 0)
   b5670:	f04f 0b22 	mov.w	fp, #34	; 0x22
        memcpy(output + 1, input, output_length);
   b5674:	1c44      	adds	r4, r0, #1
        output[output_length + 1] = '\"';
   b5676:	f105 0901 	add.w	r9, r5, #1
        output[output_length + 2] = '\0';
   b567a:	f105 0802 	add.w	r8, r5, #2
        output[0] = '\"';
   b567e:	f880 b000 	strb.w	fp, [r0]
    if (escape_characters == 0)
   b5682:	f1ba 0f00 	cmp.w	sl, #0
   b5686:	d129      	bne.n	b56dc <print_string_ptr+0xa0>
        memcpy(output + 1, input, output_length);
   b5688:	462a      	mov	r2, r5
   b568a:	4631      	mov	r1, r6
   b568c:	4620      	mov	r0, r4
   b568e:	f004 fdf6 	bl	ba27e <memcpy>
        output[output_length + 1] = '\"';
   b5692:	f807 b009 	strb.w	fp, [r7, r9]
        output[output_length + 2] = '\0';
   b5696:	f807 a008 	strb.w	sl, [r7, r8]
        return true;
   b569a:	e007      	b.n	b56ac <print_string_ptr+0x70>
        output = ensure(output_buffer, sizeof("\"\""));
   b569c:	2103      	movs	r1, #3
   b569e:	f7ff ff8b 	bl	b55b8 <ensure>
        if (output == NULL)
   b56a2:	2800      	cmp	r0, #0
   b56a4:	d0cf      	beq.n	b5646 <print_string_ptr+0xa>
        strcpy((char*)output, "\"\"");
   b56a6:	492f      	ldr	r1, [pc, #188]	; (b5764 <print_string_ptr+0x128>)
   b56a8:	f004 fe61 	bl	ba36e <strcpy>
    return true;
   b56ac:	2001      	movs	r0, #1
   b56ae:	e7cb      	b.n	b5648 <print_string_ptr+0xc>
        switch (*input_pointer)
   b56b0:	2b22      	cmp	r3, #34	; 0x22
   b56b2:	d80b      	bhi.n	b56cc <print_string_ptr+0x90>
   b56b4:	2b07      	cmp	r3, #7
   b56b6:	d90c      	bls.n	b56d2 <print_string_ptr+0x96>
   b56b8:	f1a3 0208 	sub.w	r2, r3, #8
   b56bc:	b2d2      	uxtb	r2, r2
   b56be:	fa04 f202 	lsl.w	r2, r4, r2
   b56c2:	423a      	tst	r2, r7
   b56c4:	d005      	beq.n	b56d2 <print_string_ptr+0x96>
                escape_characters++;
   b56c6:	f10a 0a01 	add.w	sl, sl, #1
                break;
   b56ca:	e7c5      	b.n	b5658 <print_string_ptr+0x1c>
        switch (*input_pointer)
   b56cc:	2b5c      	cmp	r3, #92	; 0x5c
   b56ce:	d1c3      	bne.n	b5658 <print_string_ptr+0x1c>
   b56d0:	e7f9      	b.n	b56c6 <print_string_ptr+0x8a>
                if (*input_pointer < 32)
   b56d2:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   b56d4:	bf98      	it	ls
   b56d6:	f10a 0a05 	addls.w	sl, sl, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   b56da:	e7bd      	b.n	b5658 <print_string_ptr+0x1c>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b56dc:	f8df b088 	ldr.w	fp, [pc, #136]	; b5768 <print_string_ptr+0x12c>
   b56e0:	3e01      	subs	r6, #1
            *output_pointer++ = '\\';
   b56e2:	255c      	movs	r5, #92	; 0x5c
                    *output_pointer = 't';
   b56e4:	f04f 0a74 	mov.w	sl, #116	; 0x74
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b56e8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   b56ec:	b92b      	cbnz	r3, b56fa <print_string_ptr+0xbe>
    output[output_length + 1] = '\"';
   b56ee:	2222      	movs	r2, #34	; 0x22
   b56f0:	f807 2009 	strb.w	r2, [r7, r9]
    output[output_length + 2] = '\0';
   b56f4:	f807 3008 	strb.w	r3, [r7, r8]
   b56f8:	e7d8      	b.n	b56ac <print_string_ptr+0x70>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   b56fa:	2b1f      	cmp	r3, #31
   b56fc:	d907      	bls.n	b570e <print_string_ptr+0xd2>
   b56fe:	2b22      	cmp	r3, #34	; 0x22
   b5700:	d005      	beq.n	b570e <print_string_ptr+0xd2>
   b5702:	2b5c      	cmp	r3, #92	; 0x5c
   b5704:	d003      	beq.n	b570e <print_string_ptr+0xd2>
            *output_pointer = *input_pointer;
   b5706:	7023      	strb	r3, [r4, #0]
   b5708:	4620      	mov	r0, r4
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   b570a:	1c44      	adds	r4, r0, #1
   b570c:	e7ec      	b.n	b56e8 <print_string_ptr+0xac>
            *output_pointer++ = '\\';
   b570e:	4620      	mov	r0, r4
   b5710:	f800 5b01 	strb.w	r5, [r0], #1
            switch (*input_pointer)
   b5714:	7832      	ldrb	r2, [r6, #0]
   b5716:	2a0d      	cmp	r2, #13
   b5718:	d80a      	bhi.n	b5730 <print_string_ptr+0xf4>
   b571a:	2a07      	cmp	r2, #7
   b571c:	d91a      	bls.n	b5754 <print_string_ptr+0x118>
   b571e:	f1a2 0308 	sub.w	r3, r2, #8
   b5722:	2b05      	cmp	r3, #5
   b5724:	d816      	bhi.n	b5754 <print_string_ptr+0x118>
   b5726:	e8df f003 	tbb	[pc, r3]
   b572a:	1209      	.short	0x1209
   b572c:	100c150e 	.word	0x100c150e
   b5730:	2a22      	cmp	r2, #34	; 0x22
   b5732:	d001      	beq.n	b5738 <print_string_ptr+0xfc>
   b5734:	2a5c      	cmp	r2, #92	; 0x5c
   b5736:	d10d      	bne.n	b5754 <print_string_ptr+0x118>
                    *output_pointer = '\"';
   b5738:	7062      	strb	r2, [r4, #1]
                    break;
   b573a:	e7e6      	b.n	b570a <print_string_ptr+0xce>
                    *output_pointer = 'b';
   b573c:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 'f';
   b573e:	7063      	strb	r3, [r4, #1]
                    break;
   b5740:	e7e3      	b.n	b570a <print_string_ptr+0xce>
                    *output_pointer = 'f';
   b5742:	2366      	movs	r3, #102	; 0x66
   b5744:	e7fb      	b.n	b573e <print_string_ptr+0x102>
                    *output_pointer = 'n';
   b5746:	236e      	movs	r3, #110	; 0x6e
   b5748:	e7f9      	b.n	b573e <print_string_ptr+0x102>
                    *output_pointer = 'r';
   b574a:	2372      	movs	r3, #114	; 0x72
   b574c:	e7f7      	b.n	b573e <print_string_ptr+0x102>
                    *output_pointer = 't';
   b574e:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   b5752:	e7da      	b.n	b570a <print_string_ptr+0xce>
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
   b5754:	4659      	mov	r1, fp
   b5756:	f000 ff15 	bl	b6584 <sprintf>
                    output_pointer += 4;
   b575a:	1d60      	adds	r0, r4, #5
                    break;
   b575c:	e7d5      	b.n	b570a <print_string_ptr+0xce>
   b575e:	bf00      	nop
   b5760:	04000037 	.word	0x04000037
   b5764:	000bcc4b 	.word	0x000bcc4b
   b5768:	000bcc4e 	.word	0x000bcc4e

000b576c <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
   b576c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5770:	460c      	mov	r4, r1
   b5772:	b08d      	sub	sp, #52	; 0x34
    unsigned char *output = NULL;

    if ((item == NULL) || (output_buffer == NULL))
   b5774:	4606      	mov	r6, r0
   b5776:	b908      	cbnz	r0, b577c <print_value+0x10>
    {
        return false;
    }

    switch ((item->type) & 0xFF)
   b5778:	2500      	movs	r5, #0
   b577a:	e05d      	b.n	b5838 <print_value+0xcc>
    if ((item == NULL) || (output_buffer == NULL))
   b577c:	2900      	cmp	r1, #0
   b577e:	d0fb      	beq.n	b5778 <print_value+0xc>
    switch ((item->type) & 0xFF)
   b5780:	7b05      	ldrb	r5, [r0, #12]
   b5782:	2d10      	cmp	r5, #16
   b5784:	f000 80c1 	beq.w	b590a <print_value+0x19e>
   b5788:	dc18      	bgt.n	b57bc <print_value+0x50>
   b578a:	1e6b      	subs	r3, r5, #1
   b578c:	2b07      	cmp	r3, #7
   b578e:	d8f3      	bhi.n	b5778 <print_value+0xc>
   b5790:	2b07      	cmp	r3, #7
   b5792:	d8f1      	bhi.n	b5778 <print_value+0xc>
   b5794:	a201      	add	r2, pc, #4	; (adr r2, b579c <print_value+0x30>)
   b5796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   b579a:	bf00      	nop
   b579c:	000b5827 	.word	0x000b5827
   b57a0:	000b5841 	.word	0x000b5841
   b57a4:	000b5779 	.word	0x000b5779
   b57a8:	000b5811 	.word	0x000b5811
   b57ac:	000b5779 	.word	0x000b5779
   b57b0:	000b5779 	.word	0x000b5779
   b57b4:	000b5779 	.word	0x000b5779
   b57b8:	000b5851 	.word	0x000b5851
   b57bc:	2d40      	cmp	r5, #64	; 0x40
   b57be:	f000 80d3 	beq.w	b5968 <print_value+0x1fc>
   b57c2:	2d80      	cmp	r5, #128	; 0x80
   b57c4:	f000 808d 	beq.w	b58e2 <print_value+0x176>
   b57c8:	2d20      	cmp	r5, #32
   b57ca:	d1d5      	bne.n	b5778 <print_value+0xc>

        case cJSON_String:
            return print_string(item, output_buffer);

        case cJSON_Array:
            return print_array(item, output_buffer);
   b57cc:	6886      	ldr	r6, [r0, #8]
        return false;
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
   b57ce:	2101      	movs	r1, #1
   b57d0:	4620      	mov	r0, r4
   b57d2:	f7ff fef1 	bl	b55b8 <ensure>
    if (output_pointer == NULL)
   b57d6:	2800      	cmp	r0, #0
   b57d8:	d0ce      	beq.n	b5778 <print_value+0xc>
    {
        return false;
    }

    *output_pointer = '[';
   b57da:	235b      	movs	r3, #91	; 0x5b
   b57dc:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   b57de:	68a3      	ldr	r3, [r4, #8]
   b57e0:	3301      	adds	r3, #1
   b57e2:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   b57e4:	68e3      	ldr	r3, [r4, #12]
   b57e6:	3301      	adds	r3, #1
   b57e8:	60e3      	str	r3, [r4, #12]
            output_pointer = ensure(output_buffer, length + 1);
            if (output_pointer == NULL)
            {
                return false;
            }
            *output_pointer++ = ',';
   b57ea:	272c      	movs	r7, #44	; 0x2c
            if(output_buffer->format)
            {
                *output_pointer++ = ' ';
            }
            *output_pointer = '\0';
   b57ec:	f04f 0800 	mov.w	r8, #0
    while (current_element != NULL)
   b57f0:	2e00      	cmp	r6, #0
   b57f2:	f040 8090 	bne.w	b5916 <print_value+0x1aa>
            output_buffer->offset += length;
        }
        current_element = current_element->next;
    }

    output_pointer = ensure(output_buffer, 2);
   b57f6:	2102      	movs	r1, #2
   b57f8:	4620      	mov	r0, r4
   b57fa:	f7ff fedd 	bl	b55b8 <ensure>
    if (output_pointer == NULL)
   b57fe:	2800      	cmp	r0, #0
   b5800:	d0ba      	beq.n	b5778 <print_value+0xc>
    {
        return false;
    }
    *output_pointer++ = ']';
   b5802:	235d      	movs	r3, #93	; 0x5d
   b5804:	7003      	strb	r3, [r0, #0]
    *output_pointer = '\0';
   b5806:	7046      	strb	r6, [r0, #1]
            *output_pointer++ = '\t';
        }
    }
    *output_pointer++ = '}';
    *output_pointer = '\0';
    output_buffer->depth--;
   b5808:	68e3      	ldr	r3, [r4, #12]
   b580a:	3b01      	subs	r3, #1
   b580c:	60e3      	str	r3, [r4, #12]
   b580e:	e008      	b.n	b5822 <print_value+0xb6>
            output = ensure(output_buffer, 5);
   b5810:	2105      	movs	r1, #5
   b5812:	4620      	mov	r0, r4
   b5814:	f7ff fed0 	bl	b55b8 <ensure>
            if (output == NULL)
   b5818:	2800      	cmp	r0, #0
   b581a:	d0ad      	beq.n	b5778 <print_value+0xc>
            strcpy((char*)output, "null");
   b581c:	49a1      	ldr	r1, [pc, #644]	; (b5aa4 <print_value+0x338>)
            strcpy((char*)output, "true");
   b581e:	f004 fda6 	bl	ba36e <strcpy>

    return true;
   b5822:	2501      	movs	r5, #1
   b5824:	e008      	b.n	b5838 <print_value+0xcc>
            output = ensure(output_buffer, 6);
   b5826:	2106      	movs	r1, #6
   b5828:	4620      	mov	r0, r4
   b582a:	f7ff fec5 	bl	b55b8 <ensure>
            if (output == NULL)
   b582e:	2800      	cmp	r0, #0
   b5830:	d0a2      	beq.n	b5778 <print_value+0xc>
            strcpy((char*)output, "false");
   b5832:	499d      	ldr	r1, [pc, #628]	; (b5aa8 <print_value+0x33c>)
   b5834:	f004 fd9b 	bl	ba36e <strcpy>
}
   b5838:	4628      	mov	r0, r5
   b583a:	b00d      	add	sp, #52	; 0x34
   b583c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            output = ensure(output_buffer, 5);
   b5840:	2105      	movs	r1, #5
   b5842:	4620      	mov	r0, r4
   b5844:	f7ff feb8 	bl	b55b8 <ensure>
            if (output == NULL)
   b5848:	2800      	cmp	r0, #0
   b584a:	d095      	beq.n	b5778 <print_value+0xc>
            strcpy((char*)output, "true");
   b584c:	4997      	ldr	r1, [pc, #604]	; (b5aac <print_value+0x340>)
   b584e:	e7e6      	b.n	b581e <print_value+0xb2>
    double d = item->valuedouble;
   b5850:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    if ((d * 0) != 0)
   b5854:	2200      	movs	r2, #0
   b5856:	2300      	movs	r3, #0
   b5858:	4630      	mov	r0, r6
   b585a:	4639      	mov	r1, r7
   b585c:	f004 f9e6 	bl	b9c2c <__aeabi_dmul>
   b5860:	2200      	movs	r2, #0
   b5862:	2300      	movs	r3, #0
   b5864:	f004 fc4a 	bl	ba0fc <__aeabi_dcmpeq>
   b5868:	b9b0      	cbnz	r0, b5898 <print_value+0x12c>
        length = sprintf((char*)number_buffer, "null");
   b586a:	498e      	ldr	r1, [pc, #568]	; (b5aa4 <print_value+0x338>)
   b586c:	a805      	add	r0, sp, #20
   b586e:	f004 fd7e 	bl	ba36e <strcpy>
   b5872:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   b5874:	1c69      	adds	r1, r5, #1
   b5876:	4620      	mov	r0, r4
   b5878:	f7ff fe9e 	bl	b55b8 <ensure>
    if (output_pointer == NULL)
   b587c:	2800      	cmp	r0, #0
   b587e:	f43f af7b 	beq.w	b5778 <print_value+0xc>
   b5882:	4602      	mov	r2, r0
   b5884:	ab05      	add	r3, sp, #20
   b5886:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   b5888:	4296      	cmp	r6, r2
   b588a:	d125      	bne.n	b58d8 <print_value+0x16c>
    output_pointer[i] = '\0';
   b588c:	2300      	movs	r3, #0
   b588e:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   b5890:	68a0      	ldr	r0, [r4, #8]
   b5892:	4428      	add	r0, r5
   b5894:	60a0      	str	r0, [r4, #8]
    return true;
   b5896:	e7c4      	b.n	b5822 <print_value+0xb6>
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b5898:	4985      	ldr	r1, [pc, #532]	; (b5ab0 <print_value+0x344>)
   b589a:	4632      	mov	r2, r6
   b589c:	463b      	mov	r3, r7
   b589e:	a805      	add	r0, sp, #20
   b58a0:	f000 fe70 	bl	b6584 <sprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b58a4:	4983      	ldr	r1, [pc, #524]	; (b5ab4 <print_value+0x348>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
   b58a6:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   b58a8:	aa02      	add	r2, sp, #8
   b58aa:	a805      	add	r0, sp, #20
   b58ac:	f000 fe72 	bl	b6594 <sscanf>
   b58b0:	2801      	cmp	r0, #1
   b58b2:	d106      	bne.n	b58c2 <print_value+0x156>
   b58b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b58b8:	4630      	mov	r0, r6
   b58ba:	4639      	mov	r1, r7
   b58bc:	f004 fc1e 	bl	ba0fc <__aeabi_dcmpeq>
   b58c0:	b930      	cbnz	r0, b58d0 <print_value+0x164>
            length = sprintf((char*)number_buffer, "%1.17g", d);
   b58c2:	497d      	ldr	r1, [pc, #500]	; (b5ab8 <print_value+0x34c>)
   b58c4:	4632      	mov	r2, r6
   b58c6:	463b      	mov	r3, r7
   b58c8:	a805      	add	r0, sp, #20
   b58ca:	f000 fe5b 	bl	b6584 <sprintf>
   b58ce:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   b58d0:	2d19      	cmp	r5, #25
   b58d2:	f63f af51 	bhi.w	b5778 <print_value+0xc>
   b58d6:	e7cd      	b.n	b5874 <print_value+0x108>
        if (number_buffer[i] == decimal_point)
   b58d8:	f813 1b01 	ldrb.w	r1, [r3], #1
            output_pointer[i] = '.';
   b58dc:	7011      	strb	r1, [r2, #0]
    for (i = 0; i < ((size_t)length); i++)
   b58de:	3201      	adds	r2, #1
   b58e0:	e7d2      	b.n	b5888 <print_value+0x11c>
            if (item->valuestring == NULL)
   b58e2:	6900      	ldr	r0, [r0, #16]
   b58e4:	2800      	cmp	r0, #0
   b58e6:	f43f af47 	beq.w	b5778 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   b58ea:	f004 fd66 	bl	ba3ba <strlen>
   b58ee:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   b58f0:	4611      	mov	r1, r2
   b58f2:	4620      	mov	r0, r4
   b58f4:	9201      	str	r2, [sp, #4]
   b58f6:	f7ff fe5f 	bl	b55b8 <ensure>
            if (output == NULL)
   b58fa:	2800      	cmp	r0, #0
   b58fc:	f43f af3c 	beq.w	b5778 <print_value+0xc>
            memcpy(output, item->valuestring, raw_length);
   b5900:	9a01      	ldr	r2, [sp, #4]
   b5902:	6931      	ldr	r1, [r6, #16]
   b5904:	f004 fcbb 	bl	ba27e <memcpy>
            return true;
   b5908:	e78b      	b.n	b5822 <print_value+0xb6>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b590a:	6900      	ldr	r0, [r0, #16]
}
   b590c:	b00d      	add	sp, #52	; 0x34
   b590e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   b5912:	f7ff be93 	b.w	b563c <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   b5916:	4621      	mov	r1, r4
   b5918:	4630      	mov	r0, r6
   b591a:	f7ff ff27 	bl	b576c <print_value>
   b591e:	2800      	cmp	r0, #0
   b5920:	f43f af2a 	beq.w	b5778 <print_value+0xc>
        update_offset(output_buffer);
   b5924:	4620      	mov	r0, r4
   b5926:	f7ff fe3b 	bl	b55a0 <update_offset>
        if (current_element->next)
   b592a:	6833      	ldr	r3, [r6, #0]
   b592c:	b1bb      	cbz	r3, b595e <print_value+0x1f2>
            length = (size_t) (output_buffer->format ? 2 : 1);
   b592e:	6963      	ldr	r3, [r4, #20]
   b5930:	2b00      	cmp	r3, #0
   b5932:	bf14      	ite	ne
   b5934:	f04f 0902 	movne.w	r9, #2
   b5938:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   b593c:	f109 0101 	add.w	r1, r9, #1
   b5940:	4620      	mov	r0, r4
   b5942:	f7ff fe39 	bl	b55b8 <ensure>
            if (output_pointer == NULL)
   b5946:	2800      	cmp	r0, #0
   b5948:	f43f af16 	beq.w	b5778 <print_value+0xc>
            *output_pointer++ = ',';
   b594c:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   b594e:	6963      	ldr	r3, [r4, #20]
   b5950:	b93b      	cbnz	r3, b5962 <print_value+0x1f6>
            *output_pointer++ = ',';
   b5952:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   b5954:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   b5958:	68a3      	ldr	r3, [r4, #8]
   b595a:	444b      	add	r3, r9
   b595c:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   b595e:	6836      	ldr	r6, [r6, #0]
   b5960:	e746      	b.n	b57f0 <print_value+0x84>
                *output_pointer++ = ' ';
   b5962:	1c83      	adds	r3, r0, #2
   b5964:	7045      	strb	r5, [r0, #1]
   b5966:	e7f5      	b.n	b5954 <print_value+0x1e8>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   b5968:	694b      	ldr	r3, [r1, #20]
   b596a:	6885      	ldr	r5, [r0, #8]
   b596c:	2b00      	cmp	r3, #0
   b596e:	bf14      	ite	ne
   b5970:	2702      	movne	r7, #2
   b5972:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   b5974:	1c79      	adds	r1, r7, #1
   b5976:	4620      	mov	r0, r4
   b5978:	f7ff fe1e 	bl	b55b8 <ensure>
    if (output_pointer == NULL)
   b597c:	2800      	cmp	r0, #0
   b597e:	f43f aefb 	beq.w	b5778 <print_value+0xc>
    *output_pointer++ = '{';
   b5982:	237b      	movs	r3, #123	; 0x7b
   b5984:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   b5986:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   b5988:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   b598a:	3201      	adds	r2, #1
   b598c:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   b598e:	b10b      	cbz	r3, b5994 <print_value+0x228>
        *output_pointer++ = '\n';
   b5990:	230a      	movs	r3, #10
   b5992:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   b5994:	68a3      	ldr	r3, [r4, #8]
   b5996:	443b      	add	r3, r7
   b5998:	60a3      	str	r3, [r4, #8]
                *output_pointer++ = '\t';
   b599a:	2609      	movs	r6, #9
        *output_pointer++ = ':';
   b599c:	273a      	movs	r7, #58	; 0x3a
        if (output_buffer->format)
   b599e:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   b59a0:	b995      	cbnz	r5, b59c8 <print_value+0x25c>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b59a2:	2b00      	cmp	r3, #0
   b59a4:	d070      	beq.n	b5a88 <print_value+0x31c>
   b59a6:	68e1      	ldr	r1, [r4, #12]
   b59a8:	3101      	adds	r1, #1
   b59aa:	4620      	mov	r0, r4
   b59ac:	f7ff fe04 	bl	b55b8 <ensure>
    if (output_pointer == NULL)
   b59b0:	2800      	cmp	r0, #0
   b59b2:	f43f aee1 	beq.w	b5778 <print_value+0xc>
    if (output_buffer->format)
   b59b6:	6963      	ldr	r3, [r4, #20]
   b59b8:	2b00      	cmp	r3, #0
   b59ba:	d16f      	bne.n	b5a9c <print_value+0x330>
   b59bc:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   b59be:	227d      	movs	r2, #125	; 0x7d
   b59c0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   b59c2:	2200      	movs	r2, #0
   b59c4:	705a      	strb	r2, [r3, #1]
   b59c6:	e71f      	b.n	b5808 <print_value+0x9c>
        if (output_buffer->format)
   b59c8:	b173      	cbz	r3, b59e8 <print_value+0x27c>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   b59ca:	68e1      	ldr	r1, [r4, #12]
   b59cc:	4620      	mov	r0, r4
   b59ce:	f7ff fdf3 	bl	b55b8 <ensure>
            if (output_pointer == NULL)
   b59d2:	2800      	cmp	r0, #0
   b59d4:	f43f aed0 	beq.w	b5778 <print_value+0xc>
   b59d8:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   b59da:	68e1      	ldr	r1, [r4, #12]
   b59dc:	1a13      	subs	r3, r2, r0
   b59de:	4299      	cmp	r1, r3
   b59e0:	d84f      	bhi.n	b5a82 <print_value+0x316>
            output_buffer->offset += output_buffer->depth;
   b59e2:	68a3      	ldr	r3, [r4, #8]
   b59e4:	440b      	add	r3, r1
   b59e6:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   b59e8:	6a28      	ldr	r0, [r5, #32]
   b59ea:	4621      	mov	r1, r4
   b59ec:	f7ff fe26 	bl	b563c <print_string_ptr>
   b59f0:	2800      	cmp	r0, #0
   b59f2:	f43f aec1 	beq.w	b5778 <print_value+0xc>
        update_offset(output_buffer);
   b59f6:	4620      	mov	r0, r4
   b59f8:	f7ff fdd2 	bl	b55a0 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   b59fc:	6963      	ldr	r3, [r4, #20]
   b59fe:	2b00      	cmp	r3, #0
   b5a00:	bf14      	ite	ne
   b5a02:	f04f 0802 	movne.w	r8, #2
   b5a06:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   b5a0a:	4641      	mov	r1, r8
   b5a0c:	4620      	mov	r0, r4
   b5a0e:	f7ff fdd3 	bl	b55b8 <ensure>
        if (output_pointer == NULL)
   b5a12:	2800      	cmp	r0, #0
   b5a14:	f43f aeb0 	beq.w	b5778 <print_value+0xc>
        *output_pointer++ = ':';
   b5a18:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   b5a1a:	6963      	ldr	r3, [r4, #20]
   b5a1c:	b103      	cbz	r3, b5a20 <print_value+0x2b4>
            *output_pointer++ = '\t';
   b5a1e:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   b5a20:	68a3      	ldr	r3, [r4, #8]
   b5a22:	4443      	add	r3, r8
   b5a24:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   b5a26:	4621      	mov	r1, r4
   b5a28:	4628      	mov	r0, r5
   b5a2a:	f7ff fe9f 	bl	b576c <print_value>
   b5a2e:	2800      	cmp	r0, #0
   b5a30:	f43f aea2 	beq.w	b5778 <print_value+0xc>
        update_offset(output_buffer);
   b5a34:	4620      	mov	r0, r4
   b5a36:	f7ff fdb3 	bl	b55a0 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   b5a3a:	682b      	ldr	r3, [r5, #0]
   b5a3c:	6962      	ldr	r2, [r4, #20]
   b5a3e:	f1b3 0800 	subs.w	r8, r3, #0
   b5a42:	bf18      	it	ne
   b5a44:	f04f 0801 	movne.w	r8, #1
   b5a48:	2a00      	cmp	r2, #0
   b5a4a:	bf18      	it	ne
   b5a4c:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   b5a50:	f108 0101 	add.w	r1, r8, #1
   b5a54:	4620      	mov	r0, r4
   b5a56:	f7ff fdaf 	bl	b55b8 <ensure>
        if (output_pointer == NULL)
   b5a5a:	2800      	cmp	r0, #0
   b5a5c:	f43f ae8c 	beq.w	b5778 <print_value+0xc>
        if (current_item->next)
   b5a60:	682b      	ldr	r3, [r5, #0]
   b5a62:	b113      	cbz	r3, b5a6a <print_value+0x2fe>
            *output_pointer++ = ',';
   b5a64:	232c      	movs	r3, #44	; 0x2c
   b5a66:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   b5a6a:	6963      	ldr	r3, [r4, #20]
   b5a6c:	b113      	cbz	r3, b5a74 <print_value+0x308>
            *output_pointer++ = '\n';
   b5a6e:	230a      	movs	r3, #10
   b5a70:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   b5a74:	2300      	movs	r3, #0
   b5a76:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   b5a78:	68a3      	ldr	r3, [r4, #8]
   b5a7a:	4443      	add	r3, r8
   b5a7c:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   b5a7e:	682d      	ldr	r5, [r5, #0]
   b5a80:	e78d      	b.n	b599e <print_value+0x232>
                *output_pointer++ = '\t';
   b5a82:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   b5a86:	e7a8      	b.n	b59da <print_value+0x26e>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   b5a88:	2102      	movs	r1, #2
   b5a8a:	e78e      	b.n	b59aa <print_value+0x23e>
            *output_pointer++ = '\t';
   b5a8c:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   b5a90:	68e2      	ldr	r2, [r4, #12]
   b5a92:	1a19      	subs	r1, r3, r0
   b5a94:	3a01      	subs	r2, #1
   b5a96:	4291      	cmp	r1, r2
   b5a98:	d3f8      	bcc.n	b5a8c <print_value+0x320>
   b5a9a:	e790      	b.n	b59be <print_value+0x252>
   b5a9c:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   b5a9e:	2509      	movs	r5, #9
   b5aa0:	e7f6      	b.n	b5a90 <print_value+0x324>
   b5aa2:	bf00      	nop
   b5aa4:	000bcc54 	.word	0x000bcc54
   b5aa8:	000bcd0d 	.word	0x000bcd0d
   b5aac:	000bcc59 	.word	0x000bcc59
   b5ab0:	000bcc5e 	.word	0x000bcc5e
   b5ab4:	000bcc65 	.word	0x000bcc65
   b5ab8:	000bcc69 	.word	0x000bcc69

000b5abc <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5abc:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5abe:	4d23      	ldr	r5, [pc, #140]	; (b5b4c <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5ac0:	b08a      	sub	sp, #40	; 0x28
   b5ac2:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   b5ac4:	2224      	movs	r2, #36	; 0x24
   b5ac6:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   b5ac8:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   b5aca:	a801      	add	r0, sp, #4
   b5acc:	f004 fbff 	bl	ba2ce <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5ad0:	682b      	ldr	r3, [r5, #0]
   b5ad2:	f44f 7080 	mov.w	r0, #256	; 0x100
   b5ad6:	4798      	blx	r3
    buffer->length = default_buffer_size;
   b5ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   b5adc:	4603      	mov	r3, r0
   b5ade:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   b5ae0:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   b5ae2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    buffer->format = format;
   b5ae6:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   b5ae8:	ae0a      	add	r6, sp, #40	; 0x28
   b5aea:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   b5aee:	b17b      	cbz	r3, b5b10 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   b5af0:	a901      	add	r1, sp, #4
   b5af2:	4620      	mov	r0, r4
   b5af4:	f7ff fe3a 	bl	b576c <print_value>
   b5af8:	b150      	cbz	r0, b5b10 <print.constprop.0+0x54>
    update_offset(buffer);
   b5afa:	a801      	add	r0, sp, #4
   b5afc:	f7ff fd50 	bl	b55a0 <update_offset>
    if (hooks->reallocate != NULL)
   b5b00:	68ae      	ldr	r6, [r5, #8]
   b5b02:	9903      	ldr	r1, [sp, #12]
   b5b04:	b15e      	cbz	r6, b5b1e <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   b5b06:	9801      	ldr	r0, [sp, #4]
   b5b08:	3101      	adds	r1, #1
   b5b0a:	47b0      	blx	r6
        if (printed == NULL) {
   b5b0c:	4604      	mov	r4, r0
   b5b0e:	b9d0      	cbnz	r0, b5b46 <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   b5b10:	9c01      	ldr	r4, [sp, #4]
   b5b12:	b1c4      	cbz	r4, b5b46 <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   b5b14:	4620      	mov	r0, r4
   b5b16:	686b      	ldr	r3, [r5, #4]
   b5b18:	4798      	blx	r3
    return NULL;
   b5b1a:	2400      	movs	r4, #0
   b5b1c:	e013      	b.n	b5b46 <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   b5b1e:	682b      	ldr	r3, [r5, #0]
   b5b20:	1c48      	adds	r0, r1, #1
   b5b22:	4798      	blx	r3
        if (printed == NULL)
   b5b24:	4604      	mov	r4, r0
   b5b26:	2800      	cmp	r0, #0
   b5b28:	d0f2      	beq.n	b5b10 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   b5b2a:	9a03      	ldr	r2, [sp, #12]
   b5b2c:	9b02      	ldr	r3, [sp, #8]
   b5b2e:	9901      	ldr	r1, [sp, #4]
   b5b30:	3201      	adds	r2, #1
   b5b32:	429a      	cmp	r2, r3
   b5b34:	bf28      	it	cs
   b5b36:	461a      	movcs	r2, r3
   b5b38:	f004 fba1 	bl	ba27e <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   b5b3c:	9b03      	ldr	r3, [sp, #12]
   b5b3e:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   b5b40:	9801      	ldr	r0, [sp, #4]
   b5b42:	686b      	ldr	r3, [r5, #4]
   b5b44:	4798      	blx	r3
}
   b5b46:	4620      	mov	r0, r4
   b5b48:	b00a      	add	sp, #40	; 0x28
   b5b4a:	bd70      	pop	{r4, r5, r6, pc}
   b5b4c:	2003d584 	.word	0x2003d584

000b5b50 <cJSON_Delete>:
{
   b5b50:	b570      	push	{r4, r5, r6, lr}
   b5b52:	4d10      	ldr	r5, [pc, #64]	; (b5b94 <cJSON_Delete+0x44>)
   b5b54:	4604      	mov	r4, r0
    while (item != NULL)
   b5b56:	b904      	cbnz	r4, b5b5a <cJSON_Delete+0xa>
}
   b5b58:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b5b5a:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   b5b5c:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   b5b5e:	05d9      	lsls	r1, r3, #23
   b5b60:	d403      	bmi.n	b5b6a <cJSON_Delete+0x1a>
   b5b62:	68a0      	ldr	r0, [r4, #8]
   b5b64:	b968      	cbnz	r0, b5b82 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b5b66:	6920      	ldr	r0, [r4, #16]
   b5b68:	b988      	cbnz	r0, b5b8e <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   b5b6a:	68e3      	ldr	r3, [r4, #12]
   b5b6c:	059b      	lsls	r3, r3, #22
   b5b6e:	d403      	bmi.n	b5b78 <cJSON_Delete+0x28>
   b5b70:	6a20      	ldr	r0, [r4, #32]
   b5b72:	b108      	cbz	r0, b5b78 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   b5b74:	686b      	ldr	r3, [r5, #4]
   b5b76:	4798      	blx	r3
        global_hooks.deallocate(item);
   b5b78:	4620      	mov	r0, r4
   b5b7a:	686b      	ldr	r3, [r5, #4]
   b5b7c:	4798      	blx	r3
        item = next;
   b5b7e:	4634      	mov	r4, r6
   b5b80:	e7e9      	b.n	b5b56 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   b5b82:	f7ff ffe5 	bl	b5b50 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   b5b86:	68e3      	ldr	r3, [r4, #12]
   b5b88:	05da      	lsls	r2, r3, #23
   b5b8a:	d5ec      	bpl.n	b5b66 <cJSON_Delete+0x16>
   b5b8c:	e7ed      	b.n	b5b6a <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   b5b8e:	686b      	ldr	r3, [r5, #4]
   b5b90:	4798      	blx	r3
   b5b92:	e7ea      	b.n	b5b6a <cJSON_Delete+0x1a>
   b5b94:	2003d584 	.word	0x2003d584

000b5b98 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   b5b98:	2100      	movs	r1, #0
   b5b9a:	f7ff bf8f 	b.w	b5abc <print.constprop.0>
	...

000b5ba0 <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   b5ba0:	4b01      	ldr	r3, [pc, #4]	; (b5ba8 <cJSON_free+0x8>)
   b5ba2:	685b      	ldr	r3, [r3, #4]
   b5ba4:	4718      	bx	r3
   b5ba6:	bf00      	nop
   b5ba8:	2003d584 	.word	0x2003d584

000b5bac <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b5bac:	b510      	push	{r4, lr}
   b5bae:	4604      	mov	r4, r0
   b5bb0:	f003 fad6 	bl	b9160 <_ZN9TCPClientC1Ev>
{

}
   b5bb4:	4620      	mov	r0, r4
   b5bb6:	bd10      	pop	{r4, pc}

000b5bb8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5bb8:	b538      	push	{r3, r4, r5, lr}
   b5bba:	4604      	mov	r4, r0
   b5bbc:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b5bbe:	f002 f973 	bl	b7ea8 <_ZN5Print5printEPKc>
    client.print(": ");
   b5bc2:	4905      	ldr	r1, [pc, #20]	; (b5bd8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b5bc4:	4620      	mov	r0, r4
   b5bc6:	f002 f96f 	bl	b7ea8 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b5bca:	4629      	mov	r1, r5
   b5bcc:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b5bd2:	f002 b97c 	b.w	b7ece <_ZN5Print7printlnEPKc>
   b5bd6:	bf00      	nop
   b5bd8:	000bc789 	.word	0x000bc789

000b5bdc <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5bdc:	b538      	push	{r3, r4, r5, lr}
   b5bde:	4605      	mov	r5, r0
   b5be0:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b5be2:	f002 f961 	bl	b7ea8 <_ZN5Print5printEPKc>
    client.print(": ");
   b5be6:	490b      	ldr	r1, [pc, #44]	; (b5c14 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b5be8:	4628      	mov	r0, r5
   b5bea:	f002 f95d 	bl	b7ea8 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b5bee:	2c00      	cmp	r4, #0
   b5bf0:	da0d      	bge.n	b5c0e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b5bf2:	212d      	movs	r1, #45	; 0x2d
   b5bf4:	4628      	mov	r0, r5
   b5bf6:	f002 f95b 	bl	b7eb0 <_ZN5Print5printEc>
            val = -n;
   b5bfa:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5bfc:	4628      	mov	r0, r5
   b5bfe:	220a      	movs	r2, #10
   b5c00:	f002 f96f 	bl	b7ee2 <_ZN5Print11printNumberEmh>
        n += println();
   b5c04:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5c0a:	f002 b954 	b.w	b7eb6 <_ZN5Print7printlnEv>
            val = n;
   b5c0e:	4621      	mov	r1, r4
   b5c10:	e7f4      	b.n	b5bfc <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b5c12:	bf00      	nop
   b5c14:	000bc789 	.word	0x000bc789

000b5c18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c1c:	460e      	mov	r6, r1
   b5c1e:	b091      	sub	sp, #68	; 0x44
   b5c20:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5c22:	f04f 33ff 	mov.w	r3, #4294967295
   b5c26:	6013      	str	r3, [r2, #0]
{
   b5c28:	4604      	mov	r4, r0
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5c2a:	2100      	movs	r1, #0
   b5c2c:	4630      	mov	r0, r6
   b5c2e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5c32:	4617      	mov	r7, r2
   b5c34:	f000 fe7b 	bl	b692e <_ZNK6String6equalsEPKc>
   b5c38:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5c3c:	4603      	mov	r3, r0
   b5c3e:	b998      	cbnz	r0, b5c68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5c40:	f1be 0f00 	cmp.w	lr, #0
   b5c44:	bf14      	ite	ne
   b5c46:	4672      	movne	r2, lr
   b5c48:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5c4a:	6831      	ldr	r1, [r6, #0]
   b5c4c:	b292      	uxth	r2, r2
   b5c4e:	4620      	mov	r0, r4
   b5c50:	f003 f886 	bl	b8d60 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5c54:	1e05      	subs	r5, r0, #0
   b5c56:	bf18      	it	ne
   b5c58:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b5c5a:	b9c5      	cbnz	r5, b5c8e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b5c5c:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5c5e:	b011      	add	sp, #68	; 0x44
   b5c60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5c64:	f003 ba32 	b.w	b90cc <_ZN9TCPClient4stopEv>
class IPAddress : public Printable {
   b5c68:	4b75      	ldr	r3, [pc, #468]	; (b5e40 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   b5c6a:	930a      	str	r3, [sp, #40]	; 0x28
   b5c6c:	f106 0c14 	add.w	ip, r6, #20
   b5c70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c74:	ad0b      	add	r5, sp, #44	; 0x2c
   b5c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5c78:	f8dc 3000 	ldr.w	r3, [ip]
   b5c7c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5c7e:	fa1f f28e 	uxth.w	r2, lr
   b5c82:	2300      	movs	r3, #0
   b5c84:	a90a      	add	r1, sp, #40	; 0x28
   b5c86:	4620      	mov	r0, r4
   b5c88:	f003 f94a 	bl	b8f20 <_ZN9TCPClient7connectE9IPAddresstm>
   b5c8c:	e7e2      	b.n	b5c54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b5c8e:	4649      	mov	r1, r9
   b5c90:	4620      	mov	r0, r4
   b5c92:	f002 f909 	bl	b7ea8 <_ZN5Print5printEPKc>
    client.print(" ");
   b5c96:	496b      	ldr	r1, [pc, #428]	; (b5e44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b5c98:	4620      	mov	r0, r4
   b5c9a:	f002 f905 	bl	b7ea8 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5c9e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	f002 f901 	bl	b7ea8 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5ca6:	4968      	ldr	r1, [pc, #416]	; (b5e48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b5ca8:	4620      	mov	r0, r4
   b5caa:	f002 f8fd 	bl	b7ea8 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5cae:	4967      	ldr	r1, [pc, #412]	; (b5e4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b5cb0:	4a67      	ldr	r2, [pc, #412]	; (b5e50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	f7ff ff80 	bl	b5bb8 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5cb8:	2100      	movs	r1, #0
   b5cba:	4630      	mov	r0, r6
   b5cbc:	f000 fe37 	bl	b692e <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5cc0:	b920      	cbnz	r0, b5ccc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5cc2:	6832      	ldr	r2, [r6, #0]
   b5cc4:	4963      	ldr	r1, [pc, #396]	; (b5e54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b5cc6:	4620      	mov	r0, r4
   b5cc8:	f7ff ff76 	bl	b5bb8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5ccc:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5cd0:	2100      	movs	r1, #0
   b5cd2:	4650      	mov	r0, sl
   b5cd4:	f000 fe2b 	bl	b692e <_ZNK6String6equalsEPKc>
   b5cd8:	b928      	cbnz	r0, b5ce6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b5cda:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5cdc:	495e      	ldr	r1, [pc, #376]	; (b5e58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b5cde:	4620      	mov	r0, r4
   b5ce0:	f7ff ff7c 	bl	b5bdc <_ZN10HttpClient10sendHeaderEPKci>
   b5ce4:	e006      	b.n	b5cf4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5ce6:	495d      	ldr	r1, [pc, #372]	; (b5e5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b5ce8:	4648      	mov	r0, r9
   b5cea:	f004 fb36 	bl	ba35a <strcmp>
   b5cee:	4602      	mov	r2, r0
   b5cf0:	2800      	cmp	r0, #0
   b5cf2:	d0f3      	beq.n	b5cdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b5cf4:	f1b8 0f00 	cmp.w	r8, #0
   b5cf8:	d00e      	beq.n	b5d18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b5cfa:	f8d8 1000 	ldr.w	r1, [r8]
   b5cfe:	b159      	cbz	r1, b5d18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b5d00:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b5d04:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b5d06:	b122      	cbz	r2, b5d12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b5d08:	f7ff ff56 	bl	b5bb8 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5d0c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b5d10:	e7f3      	b.n	b5cfa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b5d12:	f002 f8dc 	bl	b7ece <_ZN5Print7printlnEPKc>
}
   b5d16:	e7f9      	b.n	b5d0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b5d18:	4620      	mov	r0, r4
   b5d1a:	f002 f8cc 	bl	b7eb6 <_ZN5Print7printlnEv>
    client.flush();
   b5d1e:	4620      	mov	r0, r4
   b5d20:	f002 ffa2 	bl	b8c68 <_ZN9TCPClient5flushEv>
   b5d24:	2100      	movs	r1, #0
   b5d26:	4650      	mov	r0, sl
   b5d28:	f000 fe01 	bl	b692e <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5d2c:	b918      	cbnz	r0, b5d36 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b5d2e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5d30:	4620      	mov	r0, r4
   b5d32:	f002 f8cc 	bl	b7ece <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5d36:	f104 0a1c 	add.w	sl, r4, #28
   b5d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5d3e:	2100      	movs	r1, #0
   b5d40:	4650      	mov	r0, sl
   b5d42:	f004 fac4 	bl	ba2ce <memset>
   b5d46:	f000 f917 	bl	b5f78 <HAL_Timer_Get_Milli_Seconds>
   b5d4a:	9001      	str	r0, [sp, #4]
   b5d4c:	f000 f914 	bl	b5f78 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b5d50:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b5d54:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b5d56:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b5d5a:	4620      	mov	r0, r4
   b5d5c:	f003 f95c 	bl	b9018 <_ZN9TCPClient9availableEv>
   b5d60:	b1d8      	cbz	r0, b5d9a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
   b5d62:	4620      	mov	r0, r4
   b5d64:	f002 ff66 	bl	b8c34 <_ZN9TCPClient4readEv>
   b5d68:	4681      	mov	r9, r0
   b5d6a:	f000 f905 	bl	b5f78 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5d6e:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b5d72:	429e      	cmp	r6, r3
   b5d74:	9001      	str	r0, [sp, #4]
   b5d76:	d804      	bhi.n	b5d82 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b5d78:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b5d7a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b5d7e:	3601      	adds	r6, #1
        while (client.available()) {
   b5d80:	e7eb      	b.n	b5d5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b5d82:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b5d86:	429e      	cmp	r6, r3
   b5d88:	d1f9      	bne.n	b5d7e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5d8a:	2300      	movs	r3, #0
   b5d8c:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b5d90:	4620      	mov	r0, r4
   b5d92:	f003 f99b 	bl	b90cc <_ZN9TCPClient4stopEv>
                error = true;
   b5d96:	46a8      	mov	r8, r5
   b5d98:	e7f1      	b.n	b5d7e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5d9a:	19a3      	adds	r3, r4, r6
   b5d9c:	7718      	strb	r0, [r3, #28]
   b5d9e:	f000 f8eb 	bl	b5f78 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b5da2:	9b01      	ldr	r3, [sp, #4]
   b5da4:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b5da8:	f1b8 0f00 	cmp.w	r8, #0
   b5dac:	d104      	bne.n	b5db8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
   b5dae:	45d9      	cmp	r9, fp
   b5db0:	d802      	bhi.n	b5db8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
   b5db2:	20c8      	movs	r0, #200	; 0xc8
   b5db4:	f002 f9d6 	bl	b8164 <delay>
    } while (client.connected() && !timeout && !error);
   b5db8:	4620      	mov	r0, r4
   b5dba:	f003 f84f 	bl	b8e5c <_ZN9TCPClient9connectedEv>
   b5dbe:	b120      	cbz	r0, b5dca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b5dc0:	45d9      	cmp	r9, fp
   b5dc2:	d802      	bhi.n	b5dca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b5dc4:	f1b8 0f00 	cmp.w	r8, #0
   b5dc8:	d0c7      	beq.n	b5d5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b5dca:	4620      	mov	r0, r4
   b5dcc:	f003 f97e 	bl	b90cc <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b5dd0:	4651      	mov	r1, sl
   b5dd2:	a802      	add	r0, sp, #8
   b5dd4:	f000 fd21 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b5dd8:	230c      	movs	r3, #12
   b5dda:	2209      	movs	r2, #9
   b5ddc:	a902      	add	r1, sp, #8
   b5dde:	a806      	add	r0, sp, #24
   b5de0:	f000 fdca 	bl	b6978 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b5de4:	491e      	ldr	r1, [pc, #120]	; (b5e60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b5de6:	a80a      	add	r0, sp, #40	; 0x28
   b5de8:	f000 fd17 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
   b5dec:	a90a      	add	r1, sp, #40	; 0x28
   b5dee:	a802      	add	r0, sp, #8
   b5df0:	f000 fdbe 	bl	b6970 <_ZNK6String7indexOfERKS_>
   b5df4:	4604      	mov	r4, r0
   b5df6:	a80a      	add	r0, sp, #40	; 0x28
   b5df8:	f000 fcc4 	bl	b6784 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b5dfc:	1c63      	adds	r3, r4, #1
   b5dfe:	d108      	bne.n	b5e12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
    String statusCode = raw_response.substring(9,12);
   b5e00:	a806      	add	r0, sp, #24
   b5e02:	f000 fcbf 	bl	b6784 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b5e06:	a802      	add	r0, sp, #8
   b5e08:	f000 fcbc 	bl	b6784 <_ZN6StringD1Ev>
}
   b5e0c:	b011      	add	sp, #68	; 0x44
   b5e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b5e12:	1d3d      	adds	r5, r7, #4
   b5e14:	4913      	ldr	r1, [pc, #76]	; (b5e64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b5e16:	4628      	mov	r0, r5
   b5e18:	f000 fd38 	bl	b688c <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b5e1c:	1d22      	adds	r2, r4, #4
   b5e1e:	a902      	add	r1, sp, #8
   b5e20:	a80a      	add	r0, sp, #40	; 0x28
   b5e22:	f000 fdc9 	bl	b69b8 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5e26:	a90a      	add	r1, sp, #40	; 0x28
   b5e28:	4628      	mov	r0, r5
   b5e2a:	f000 fd6b 	bl	b6904 <_ZN6String6concatERKS_>
   b5e2e:	a80a      	add	r0, sp, #40	; 0x28
   b5e30:	f000 fca8 	bl	b6784 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5e34:	9806      	ldr	r0, [sp, #24]
   b5e36:	f004 fa0e 	bl	ba256 <atoi>
   b5e3a:	6038      	str	r0, [r7, #0]
   b5e3c:	e7e0      	b.n	b5e00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
   b5e3e:	bf00      	nop
   b5e40:	000bcf20 	.word	0x000bcf20
   b5e44:	000bca3c 	.word	0x000bca3c
   b5e48:	000bcc70 	.word	0x000bcc70
   b5e4c:	000bcc82 	.word	0x000bcc82
   b5e50:	000bcc7c 	.word	0x000bcc7c
   b5e54:	000bcc8d 	.word	0x000bcc8d
   b5e58:	000bcb28 	.word	0x000bcb28
   b5e5c:	000bcc92 	.word	0x000bcc92
   b5e60:	000bcc97 	.word	0x000bcc97
   b5e64:	000bcc9b 	.word	0x000bcc9b

000b5e68 <_ZN9JSONClassD1Ev>:
#endif
}

JSONClass::~JSONClass()
{
}
   b5e68:	4770      	bx	lr

000b5e6a <_ZN9JSONClassD0Ev>:
JSONClass::~JSONClass()
   b5e6a:	b510      	push	{r4, lr}
}
   b5e6c:	2104      	movs	r1, #4
JSONClass::~JSONClass()
   b5e6e:	4604      	mov	r4, r0
}
   b5e70:	f7fe f915 	bl	b409e <_ZdlPvj>
   b5e74:	4620      	mov	r0, r4
   b5e76:	bd10      	pop	{r4, pc}

000b5e78 <_GLOBAL__sub_I__ZN9JSONClassC2Ev>:
JSONClass::JSONClass()
   b5e78:	4b01      	ldr	r3, [pc, #4]	; (b5e80 <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0x8>)
   b5e7a:	4a02      	ldr	r2, [pc, #8]	; (b5e84 <_GLOBAL__sub_I__ZN9JSONClassC2Ev+0xc>)
   b5e7c:	601a      	str	r2, [r3, #0]
String JSONClass::typeof(const JSONVar& value)
{
  return JSONVar::typeof(value);
}

JSONClass JSON;
   b5e7e:	4770      	bx	lr
   b5e80:	2003e660 	.word	0x2003e660
   b5e84:	000bcca4 	.word	0x000bcca4

000b5e88 <_ZN7JSONVarD1Ev>:
JSONVar::JSONVar() :
  JSONVar(NULL, NULL)
{
}

JSONVar::~JSONVar()
   b5e88:	b510      	push	{r4, lr}
   b5e8a:	4b05      	ldr	r3, [pc, #20]	; (b5ea0 <_ZN7JSONVarD1Ev+0x18>)
   b5e8c:	6003      	str	r3, [r0, #0]
   b5e8e:	4604      	mov	r4, r0
{
  if (_json != NULL && _parent == NULL) {
   b5e90:	6840      	ldr	r0, [r0, #4]
   b5e92:	b118      	cbz	r0, b5e9c <_ZN7JSONVarD1Ev+0x14>
   b5e94:	68a3      	ldr	r3, [r4, #8]
   b5e96:	b90b      	cbnz	r3, b5e9c <_ZN7JSONVarD1Ev+0x14>
    cJSON_Delete(_json);
   b5e98:	f7ff fe5a 	bl	b5b50 <cJSON_Delete>

    _json = NULL;
  }
}
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	bd10      	pop	{r4, pc}
   b5ea0:	000bccb4 	.word	0x000bccb4

000b5ea4 <_ZN7JSONVarD0Ev>:
JSONVar::~JSONVar()
   b5ea4:	b510      	push	{r4, lr}
   b5ea6:	4604      	mov	r4, r0
}
   b5ea8:	f7ff ffee 	bl	b5e88 <_ZN7JSONVarD1Ev>
   b5eac:	4620      	mov	r0, r4
   b5eae:	210c      	movs	r1, #12
   b5eb0:	f7fe f8f5 	bl	b409e <_ZdlPvj>
   b5eb4:	4620      	mov	r0, r4
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZNK7JSONVar7printToER5Print>:

size_t JSONVar::printTo(Print& p) const
{
   b5eb8:	b538      	push	{r3, r4, r5, lr}
  if (_json == NULL) {
   b5eba:	6840      	ldr	r0, [r0, #4]
{
   b5ebc:	460c      	mov	r4, r1
  if (_json == NULL) {
   b5ebe:	b160      	cbz	r0, b5eda <_ZNK7JSONVar7printToER5Print+0x22>
    return 0;
  }

  char* s = cJSON_PrintUnformatted(_json);
   b5ec0:	f7ff fe6a 	bl	b5b98 <cJSON_PrintUnformatted>
   b5ec4:	4605      	mov	r5, r0

  size_t writen = p.print(s);
   b5ec6:	4601      	mov	r1, r0
   b5ec8:	4620      	mov	r0, r4
   b5eca:	f001 ffed 	bl	b7ea8 <_ZN5Print5printEPKc>
   b5ece:	4604      	mov	r4, r0

  cJSON_free(s);
   b5ed0:	4628      	mov	r0, r5
   b5ed2:	f7ff fe65 	bl	b5ba0 <cJSON_free>

  return writen;
}
   b5ed6:	4620      	mov	r0, r4
   b5ed8:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   b5eda:	4604      	mov	r4, r0
   b5edc:	e7fb      	b.n	b5ed6 <_ZNK7JSONVar7printToER5Print+0x1e>
	...

000b5ee0 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_>:
  _parent(parent)
   b5ee0:	4b03      	ldr	r3, [pc, #12]	; (b5ef0 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x10>)
   b5ee2:	4a04      	ldr	r2, [pc, #16]	; (b5ef4 <_GLOBAL__sub_I__ZN7JSONVarC2EP5cJSONS1_+0x14>)
   b5ee4:	601a      	str	r2, [r3, #0]
   b5ee6:	2200      	movs	r2, #0
   b5ee8:	e9c3 2201 	strd	r2, r2, [r3, #4]
      cJSON_Delete(old);
    }
  }
}

JSONVar undefined;
   b5eec:	4770      	bx	lr
   b5eee:	bf00      	nop
   b5ef0:	2003e664 	.word	0x2003e664
   b5ef4:	000bccb4 	.word	0x000bccb4

000b5ef8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <netdb_freeaddrinfo+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	689b      	ldr	r3, [r3, #8]
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030268 	.word	0x00030268

000b5f08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <netdb_getaddrinfo+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	68db      	ldr	r3, [r3, #12]
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	00030268 	.word	0x00030268

000b5f18 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <HAL_Pin_Mode+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	689b      	ldr	r3, [r3, #8]
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	0003022c 	.word	0x0003022c

000b5f28 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <HAL_Interrupts_Attach+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	699b      	ldr	r3, [r3, #24]
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	0003022c 	.word	0x0003022c

000b5f38 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <HAL_Interrupts_Detach+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	69db      	ldr	r3, [r3, #28]
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	0003022c 	.word	0x0003022c

000b5f48 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <if_index_to_name+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	695b      	ldr	r3, [r3, #20]
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	0003026c 	.word	0x0003026c

000b5f58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <HAL_RNG_GetRandomNumber+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	685b      	ldr	r3, [r3, #4]
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030218 	.word	0x00030218

000b5f68 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <HAL_Delay_Microseconds+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	68db      	ldr	r3, [r3, #12]
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	00030218 	.word	0x00030218

000b5f78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	695b      	ldr	r3, [r3, #20]
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	00030218 	.word	0x00030218

000b5f88 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <hal_rtc_time_is_valid+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	00030218 	.word	0x00030218

000b5f98 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <hal_rtc_get_time+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	00030218 	.word	0x00030218

000b5fa8 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <HAL_Core_Runtime_Info+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	00030234 	.word	0x00030234

000b5fb8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <hal_ble_stack_init+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	689b      	ldr	r3, [r3, #8]
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	00030278 	.word	0x00030278

000b5fc8 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <hal_ble_select_antenna+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	691b      	ldr	r3, [r3, #16]
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030278 	.word	0x00030278

000b5fd8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <hal_ble_gap_set_advertising_data+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030278 	.word	0x00030278

000b5fe8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <hal_ble_gap_set_scan_response_data+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030278 	.word	0x00030278

000b5ff8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <hal_ble_gap_start_advertising+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030278 	.word	0x00030278

000b6008 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b03      	ldr	r3, [pc, #12]	; (b6018 <hal_ble_gap_disconnect+0x10>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6012:	9301      	str	r3, [sp, #4]
   b6014:	bd08      	pop	{r3, pc}
   b6016:	0000      	.short	0x0000
   b6018:	00030278 	.word	0x00030278

000b601c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b601c:	b508      	push	{r3, lr}
   b601e:	4b03      	ldr	r3, [pc, #12]	; (b602c <hal_ble_gatt_server_add_service+0x10>)
   b6020:	681b      	ldr	r3, [r3, #0]
   b6022:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6026:	9301      	str	r3, [sp, #4]
   b6028:	bd08      	pop	{r3, pc}
   b602a:	0000      	.short	0x0000
   b602c:	00030278 	.word	0x00030278

000b6030 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b03      	ldr	r3, [pc, #12]	; (b6040 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b603a:	9301      	str	r3, [sp, #4]
   b603c:	bd08      	pop	{r3, pc}
   b603e:	0000      	.short	0x0000
   b6040:	00030278 	.word	0x00030278

000b6044 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b03      	ldr	r3, [pc, #12]	; (b6054 <hal_ble_gatt_client_write_with_response+0x10>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b604e:	9301      	str	r3, [sp, #4]
   b6050:	bd08      	pop	{r3, pc}
   b6052:	0000      	.short	0x0000
   b6054:	00030278 	.word	0x00030278

000b6058 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b03      	ldr	r3, [pc, #12]	; (b6068 <hal_ble_gatt_client_write_without_response+0x10>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6062:	9301      	str	r3, [sp, #4]
   b6064:	bd08      	pop	{r3, pc}
   b6066:	0000      	.short	0x0000
   b6068:	00030278 	.word	0x00030278

000b606c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b606c:	b508      	push	{r3, lr}
   b606e:	4b03      	ldr	r3, [pc, #12]	; (b607c <hal_ble_gatt_server_add_characteristic+0x10>)
   b6070:	681b      	ldr	r3, [r3, #0]
   b6072:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b6076:	9301      	str	r3, [sp, #4]
   b6078:	bd08      	pop	{r3, pc}
   b607a:	0000      	.short	0x0000
   b607c:	00030278 	.word	0x00030278

000b6080 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b03      	ldr	r3, [pc, #12]	; (b6090 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b608a:	9301      	str	r3, [sp, #4]
   b608c:	bd08      	pop	{r3, pc}
   b608e:	0000      	.short	0x0000
   b6090:	00030278 	.word	0x00030278

000b6094 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6094:	b508      	push	{r3, lr}
   b6096:	4b03      	ldr	r3, [pc, #12]	; (b60a4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6098:	681b      	ldr	r3, [r3, #0]
   b609a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b609e:	9301      	str	r3, [sp, #4]
   b60a0:	bd08      	pop	{r3, pc}
   b60a2:	0000      	.short	0x0000
   b60a4:	00030278 	.word	0x00030278

000b60a8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b03      	ldr	r3, [pc, #12]	; (b60b8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b60b2:	9301      	str	r3, [sp, #4]
   b60b4:	bd08      	pop	{r3, pc}
   b60b6:	0000      	.short	0x0000
   b60b8:	00030278 	.word	0x00030278

000b60bc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b60bc:	b508      	push	{r3, lr}
   b60be:	4b02      	ldr	r3, [pc, #8]	; (b60c8 <os_thread_yield+0xc>)
   b60c0:	681b      	ldr	r3, [r3, #0]
   b60c2:	68db      	ldr	r3, [r3, #12]
   b60c4:	9301      	str	r3, [sp, #4]
   b60c6:	bd08      	pop	{r3, pc}
   b60c8:	00030248 	.word	0x00030248

000b60cc <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b60cc:	b508      	push	{r3, lr}
   b60ce:	4b02      	ldr	r3, [pc, #8]	; (b60d8 <os_thread_scheduling+0xc>)
   b60d0:	681b      	ldr	r3, [r3, #0]
   b60d2:	69db      	ldr	r3, [r3, #28]
   b60d4:	9301      	str	r3, [sp, #4]
   b60d6:	bd08      	pop	{r3, pc}
   b60d8:	00030248 	.word	0x00030248

000b60dc <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b60dc:	b508      	push	{r3, lr}
   b60de:	4b02      	ldr	r3, [pc, #8]	; (b60e8 <os_timer_create+0xc>)
   b60e0:	681b      	ldr	r3, [r3, #0]
   b60e2:	6a1b      	ldr	r3, [r3, #32]
   b60e4:	9301      	str	r3, [sp, #4]
   b60e6:	bd08      	pop	{r3, pc}
   b60e8:	00030248 	.word	0x00030248

000b60ec <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b60ec:	b508      	push	{r3, lr}
   b60ee:	4b02      	ldr	r3, [pc, #8]	; (b60f8 <os_timer_destroy+0xc>)
   b60f0:	681b      	ldr	r3, [r3, #0]
   b60f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b60f4:	9301      	str	r3, [sp, #4]
   b60f6:	bd08      	pop	{r3, pc}
   b60f8:	00030248 	.word	0x00030248

000b60fc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b60fc:	b508      	push	{r3, lr}
   b60fe:	4b02      	ldr	r3, [pc, #8]	; (b6108 <os_timer_get_id+0xc>)
   b6100:	681b      	ldr	r3, [r3, #0]
   b6102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6104:	9301      	str	r3, [sp, #4]
   b6106:	bd08      	pop	{r3, pc}
   b6108:	00030248 	.word	0x00030248

000b610c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b610c:	b508      	push	{r3, lr}
   b610e:	4b02      	ldr	r3, [pc, #8]	; (b6118 <os_timer_change+0xc>)
   b6110:	681b      	ldr	r3, [r3, #0]
   b6112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6114:	9301      	str	r3, [sp, #4]
   b6116:	bd08      	pop	{r3, pc}
   b6118:	00030248 	.word	0x00030248

000b611c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b611c:	b508      	push	{r3, lr}
   b611e:	4b02      	ldr	r3, [pc, #8]	; (b6128 <os_mutex_recursive_create+0xc>)
   b6120:	681b      	ldr	r3, [r3, #0]
   b6122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6124:	9301      	str	r3, [sp, #4]
   b6126:	bd08      	pop	{r3, pc}
   b6128:	00030248 	.word	0x00030248

000b612c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b612c:	b508      	push	{r3, lr}
   b612e:	4b02      	ldr	r3, [pc, #8]	; (b6138 <os_mutex_recursive_lock+0xc>)
   b6130:	681b      	ldr	r3, [r3, #0]
   b6132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6134:	9301      	str	r3, [sp, #4]
   b6136:	bd08      	pop	{r3, pc}
   b6138:	00030248 	.word	0x00030248

000b613c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b613c:	b508      	push	{r3, lr}
   b613e:	4b02      	ldr	r3, [pc, #8]	; (b6148 <os_mutex_recursive_unlock+0xc>)
   b6140:	681b      	ldr	r3, [r3, #0]
   b6142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6144:	9301      	str	r3, [sp, #4]
   b6146:	bd08      	pop	{r3, pc}
   b6148:	00030248 	.word	0x00030248

000b614c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b614c:	b508      	push	{r3, lr}
   b614e:	4b02      	ldr	r3, [pc, #8]	; (b6158 <os_timer_set_id+0xc>)
   b6150:	681b      	ldr	r3, [r3, #0]
   b6152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6154:	9301      	str	r3, [sp, #4]
   b6156:	bd08      	pop	{r3, pc}
   b6158:	00030248 	.word	0x00030248

000b615c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b615c:	b508      	push	{r3, lr}
   b615e:	4b02      	ldr	r3, [pc, #8]	; (b6168 <inet_inet_ntop+0xc>)
   b6160:	681b      	ldr	r3, [r3, #0]
   b6162:	695b      	ldr	r3, [r3, #20]
   b6164:	9301      	str	r3, [sp, #4]
   b6166:	bd08      	pop	{r3, pc}
   b6168:	00030264 	.word	0x00030264

000b616c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b616c:	b508      	push	{r3, lr}
   b616e:	4b02      	ldr	r3, [pc, #8]	; (b6178 <inet_htonl+0xc>)
   b6170:	681b      	ldr	r3, [r3, #0]
   b6172:	6a1b      	ldr	r3, [r3, #32]
   b6174:	9301      	str	r3, [sp, #4]
   b6176:	bd08      	pop	{r3, pc}
   b6178:	00030264 	.word	0x00030264

000b617c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b02      	ldr	r3, [pc, #8]	; (b6188 <inet_htons+0xc>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6184:	9301      	str	r3, [sp, #4]
   b6186:	bd08      	pop	{r3, pc}
   b6188:	00030264 	.word	0x00030264

000b618c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b618c:	b508      	push	{r3, lr}
   b618e:	4b02      	ldr	r3, [pc, #8]	; (b6198 <hal_usart_write+0xc>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	68db      	ldr	r3, [r3, #12]
   b6194:	9301      	str	r3, [sp, #4]
   b6196:	bd08      	pop	{r3, pc}
   b6198:	0003023c 	.word	0x0003023c

000b619c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b619c:	b508      	push	{r3, lr}
   b619e:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <hal_usart_available+0xc>)
   b61a0:	681b      	ldr	r3, [r3, #0]
   b61a2:	691b      	ldr	r3, [r3, #16]
   b61a4:	9301      	str	r3, [sp, #4]
   b61a6:	bd08      	pop	{r3, pc}
   b61a8:	0003023c 	.word	0x0003023c

000b61ac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b61ac:	b508      	push	{r3, lr}
   b61ae:	4b02      	ldr	r3, [pc, #8]	; (b61b8 <hal_usart_read+0xc>)
   b61b0:	681b      	ldr	r3, [r3, #0]
   b61b2:	695b      	ldr	r3, [r3, #20]
   b61b4:	9301      	str	r3, [sp, #4]
   b61b6:	bd08      	pop	{r3, pc}
   b61b8:	0003023c 	.word	0x0003023c

000b61bc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <hal_usart_peek+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	699b      	ldr	r3, [r3, #24]
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	0003023c 	.word	0x0003023c

000b61cc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b02      	ldr	r3, [pc, #8]	; (b61d8 <hal_usart_flush+0xc>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	69db      	ldr	r3, [r3, #28]
   b61d4:	9301      	str	r3, [sp, #4]
   b61d6:	bd08      	pop	{r3, pc}
   b61d8:	0003023c 	.word	0x0003023c

000b61dc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b02      	ldr	r3, [pc, #8]	; (b61e8 <hal_usart_is_enabled+0xc>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	6a1b      	ldr	r3, [r3, #32]
   b61e4:	9301      	str	r3, [sp, #4]
   b61e6:	bd08      	pop	{r3, pc}
   b61e8:	0003023c 	.word	0x0003023c

000b61ec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b61ec:	b508      	push	{r3, lr}
   b61ee:	4b02      	ldr	r3, [pc, #8]	; (b61f8 <hal_usart_available_data_for_write+0xc>)
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61f4:	9301      	str	r3, [sp, #4]
   b61f6:	bd08      	pop	{r3, pc}
   b61f8:	0003023c 	.word	0x0003023c

000b61fc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b61fc:	b508      	push	{r3, lr}
   b61fe:	4b02      	ldr	r3, [pc, #8]	; (b6208 <hal_usart_init_ex+0xc>)
   b6200:	681b      	ldr	r3, [r3, #0]
   b6202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6204:	9301      	str	r3, [sp, #4]
   b6206:	bd08      	pop	{r3, pc}
   b6208:	0003023c 	.word	0x0003023c

000b620c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b620c:	b508      	push	{r3, lr}
   b620e:	4b02      	ldr	r3, [pc, #8]	; (b6218 <hal_i2c_write+0xc>)
   b6210:	681b      	ldr	r3, [r3, #0]
   b6212:	6a1b      	ldr	r3, [r3, #32]
   b6214:	9301      	str	r3, [sp, #4]
   b6216:	bd08      	pop	{r3, pc}
   b6218:	00030228 	.word	0x00030228

000b621c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b621c:	b508      	push	{r3, lr}
   b621e:	4b02      	ldr	r3, [pc, #8]	; (b6228 <hal_i2c_available+0xc>)
   b6220:	681b      	ldr	r3, [r3, #0]
   b6222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6224:	9301      	str	r3, [sp, #4]
   b6226:	bd08      	pop	{r3, pc}
   b6228:	00030228 	.word	0x00030228

000b622c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b622c:	b508      	push	{r3, lr}
   b622e:	4b02      	ldr	r3, [pc, #8]	; (b6238 <hal_i2c_read+0xc>)
   b6230:	681b      	ldr	r3, [r3, #0]
   b6232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6234:	9301      	str	r3, [sp, #4]
   b6236:	bd08      	pop	{r3, pc}
   b6238:	00030228 	.word	0x00030228

000b623c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b623c:	b508      	push	{r3, lr}
   b623e:	4b02      	ldr	r3, [pc, #8]	; (b6248 <hal_i2c_peek+0xc>)
   b6240:	681b      	ldr	r3, [r3, #0]
   b6242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6244:	9301      	str	r3, [sp, #4]
   b6246:	bd08      	pop	{r3, pc}
   b6248:	00030228 	.word	0x00030228

000b624c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b624c:	b508      	push	{r3, lr}
   b624e:	4b02      	ldr	r3, [pc, #8]	; (b6258 <hal_i2c_flush+0xc>)
   b6250:	681b      	ldr	r3, [r3, #0]
   b6252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6254:	9301      	str	r3, [sp, #4]
   b6256:	bd08      	pop	{r3, pc}
   b6258:	00030228 	.word	0x00030228

000b625c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b625c:	b508      	push	{r3, lr}
   b625e:	4b02      	ldr	r3, [pc, #8]	; (b6268 <hal_i2c_is_enabled+0xc>)
   b6260:	681b      	ldr	r3, [r3, #0]
   b6262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	bd08      	pop	{r3, pc}
   b6268:	00030228 	.word	0x00030228

000b626c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b626c:	b508      	push	{r3, lr}
   b626e:	4b02      	ldr	r3, [pc, #8]	; (b6278 <hal_i2c_init+0xc>)
   b6270:	681b      	ldr	r3, [r3, #0]
   b6272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6274:	9301      	str	r3, [sp, #4]
   b6276:	bd08      	pop	{r3, pc}
   b6278:	00030228 	.word	0x00030228

000b627c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b02      	ldr	r3, [pc, #8]	; (b6288 <sock_setsockopt+0xc>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	699b      	ldr	r3, [r3, #24]
   b6284:	9301      	str	r3, [sp, #4]
   b6286:	bd08      	pop	{r3, pc}
   b6288:	00030238 	.word	0x00030238

000b628c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b02      	ldr	r3, [pc, #8]	; (b6298 <sock_close+0xc>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	69db      	ldr	r3, [r3, #28]
   b6294:	9301      	str	r3, [sp, #4]
   b6296:	bd08      	pop	{r3, pc}
   b6298:	00030238 	.word	0x00030238

000b629c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b629c:	b508      	push	{r3, lr}
   b629e:	4b02      	ldr	r3, [pc, #8]	; (b62a8 <sock_connect+0xc>)
   b62a0:	681b      	ldr	r3, [r3, #0]
   b62a2:	6a1b      	ldr	r3, [r3, #32]
   b62a4:	9301      	str	r3, [sp, #4]
   b62a6:	bd08      	pop	{r3, pc}
   b62a8:	00030238 	.word	0x00030238

000b62ac <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b62ac:	b508      	push	{r3, lr}
   b62ae:	4b02      	ldr	r3, [pc, #8]	; (b62b8 <sock_recv+0xc>)
   b62b0:	681b      	ldr	r3, [r3, #0]
   b62b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62b4:	9301      	str	r3, [sp, #4]
   b62b6:	bd08      	pop	{r3, pc}
   b62b8:	00030238 	.word	0x00030238

000b62bc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b62bc:	b508      	push	{r3, lr}
   b62be:	4b02      	ldr	r3, [pc, #8]	; (b62c8 <sock_send+0xc>)
   b62c0:	681b      	ldr	r3, [r3, #0]
   b62c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62c4:	9301      	str	r3, [sp, #4]
   b62c6:	bd08      	pop	{r3, pc}
   b62c8:	00030238 	.word	0x00030238

000b62cc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b62cc:	b508      	push	{r3, lr}
   b62ce:	4b02      	ldr	r3, [pc, #8]	; (b62d8 <sock_socket+0xc>)
   b62d0:	681b      	ldr	r3, [r3, #0]
   b62d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b62d4:	9301      	str	r3, [sp, #4]
   b62d6:	bd08      	pop	{r3, pc}
   b62d8:	00030238 	.word	0x00030238

000b62dc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b62dc:	b508      	push	{r3, lr}
   b62de:	4b02      	ldr	r3, [pc, #8]	; (b62e8 <hal_spi_init+0xc>)
   b62e0:	681b      	ldr	r3, [r3, #0]
   b62e2:	69db      	ldr	r3, [r3, #28]
   b62e4:	9301      	str	r3, [sp, #4]
   b62e6:	bd08      	pop	{r3, pc}
   b62e8:	00030230 	.word	0x00030230

000b62ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b62ec:	b508      	push	{r3, lr}
   b62ee:	4b02      	ldr	r3, [pc, #8]	; (b62f8 <hal_spi_is_enabled+0xc>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	6a1b      	ldr	r3, [r3, #32]
   b62f4:	9301      	str	r3, [sp, #4]
   b62f6:	bd08      	pop	{r3, pc}
   b62f8:	00030230 	.word	0x00030230

000b62fc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b62fc:	b508      	push	{r3, lr}
   b62fe:	4b02      	ldr	r3, [pc, #8]	; (b6308 <HAL_USB_USART_Init+0xc>)
   b6300:	681b      	ldr	r3, [r3, #0]
   b6302:	681b      	ldr	r3, [r3, #0]
   b6304:	9301      	str	r3, [sp, #4]
   b6306:	bd08      	pop	{r3, pc}
   b6308:	0003024c 	.word	0x0003024c

000b630c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b630c:	b508      	push	{r3, lr}
   b630e:	4b02      	ldr	r3, [pc, #8]	; (b6318 <HAL_USB_USART_Available_Data+0xc>)
   b6310:	681b      	ldr	r3, [r3, #0]
   b6312:	691b      	ldr	r3, [r3, #16]
   b6314:	9301      	str	r3, [sp, #4]
   b6316:	bd08      	pop	{r3, pc}
   b6318:	0003024c 	.word	0x0003024c

000b631c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b631c:	b508      	push	{r3, lr}
   b631e:	4b02      	ldr	r3, [pc, #8]	; (b6328 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6320:	681b      	ldr	r3, [r3, #0]
   b6322:	695b      	ldr	r3, [r3, #20]
   b6324:	9301      	str	r3, [sp, #4]
   b6326:	bd08      	pop	{r3, pc}
   b6328:	0003024c 	.word	0x0003024c

000b632c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b632c:	b508      	push	{r3, lr}
   b632e:	4b02      	ldr	r3, [pc, #8]	; (b6338 <HAL_USB_USART_Receive_Data+0xc>)
   b6330:	681b      	ldr	r3, [r3, #0]
   b6332:	699b      	ldr	r3, [r3, #24]
   b6334:	9301      	str	r3, [sp, #4]
   b6336:	bd08      	pop	{r3, pc}
   b6338:	0003024c 	.word	0x0003024c

000b633c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b633c:	b508      	push	{r3, lr}
   b633e:	4b02      	ldr	r3, [pc, #8]	; (b6348 <HAL_USB_USART_Send_Data+0xc>)
   b6340:	681b      	ldr	r3, [r3, #0]
   b6342:	69db      	ldr	r3, [r3, #28]
   b6344:	9301      	str	r3, [sp, #4]
   b6346:	bd08      	pop	{r3, pc}
   b6348:	0003024c 	.word	0x0003024c

000b634c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b634c:	b508      	push	{r3, lr}
   b634e:	4b02      	ldr	r3, [pc, #8]	; (b6358 <HAL_USB_USART_Flush_Data+0xc>)
   b6350:	681b      	ldr	r3, [r3, #0]
   b6352:	6a1b      	ldr	r3, [r3, #32]
   b6354:	9301      	str	r3, [sp, #4]
   b6356:	bd08      	pop	{r3, pc}
   b6358:	0003024c 	.word	0x0003024c

000b635c <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   b635c:	b508      	push	{r3, lr}
   b635e:	4b02      	ldr	r3, [pc, #8]	; (b6368 <wlan_connected_info+0xc>)
   b6360:	681b      	ldr	r3, [r3, #0]
   b6362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b6364:	9301      	str	r3, [sp, #4]
   b6366:	bd08      	pop	{r3, pc}
   b6368:	00030274 	.word	0x00030274

000b636c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b636c:	b508      	push	{r3, lr}
   b636e:	4b02      	ldr	r3, [pc, #8]	; (b6378 <panic_+0xc>)
   b6370:	681b      	ldr	r3, [r3, #0]
   b6372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6374:	9301      	str	r3, [sp, #4]
   b6376:	bd08      	pop	{r3, pc}
   b6378:	00030260 	.word	0x00030260

000b637c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b637c:	b508      	push	{r3, lr}
   b637e:	4b02      	ldr	r3, [pc, #8]	; (b6388 <log_message+0xc>)
   b6380:	681b      	ldr	r3, [r3, #0]
   b6382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6384:	9301      	str	r3, [sp, #4]
   b6386:	bd08      	pop	{r3, pc}
   b6388:	00030260 	.word	0x00030260

000b638c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b638c:	b508      	push	{r3, lr}
   b638e:	4b02      	ldr	r3, [pc, #8]	; (b6398 <system_mode+0xc>)
   b6390:	681b      	ldr	r3, [r3, #0]
   b6392:	681b      	ldr	r3, [r3, #0]
   b6394:	9301      	str	r3, [sp, #4]
   b6396:	bd08      	pop	{r3, pc}
   b6398:	00030220 	.word	0x00030220

000b639c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b639c:	b508      	push	{r3, lr}
   b639e:	4b02      	ldr	r3, [pc, #8]	; (b63a8 <set_system_mode+0xc>)
   b63a0:	681b      	ldr	r3, [r3, #0]
   b63a2:	685b      	ldr	r3, [r3, #4]
   b63a4:	9301      	str	r3, [sp, #4]
   b63a6:	bd08      	pop	{r3, pc}
   b63a8:	00030220 	.word	0x00030220

000b63ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b63ac:	b508      	push	{r3, lr}
   b63ae:	4b02      	ldr	r3, [pc, #8]	; (b63b8 <system_delay_ms+0xc>)
   b63b0:	681b      	ldr	r3, [r3, #0]
   b63b2:	695b      	ldr	r3, [r3, #20]
   b63b4:	9301      	str	r3, [sp, #4]
   b63b6:	bd08      	pop	{r3, pc}
   b63b8:	00030220 	.word	0x00030220

000b63bc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b63bc:	b508      	push	{r3, lr}
   b63be:	4b02      	ldr	r3, [pc, #8]	; (b63c8 <system_thread_set_state+0xc>)
   b63c0:	681b      	ldr	r3, [r3, #0]
   b63c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b63c4:	9301      	str	r3, [sp, #4]
   b63c6:	bd08      	pop	{r3, pc}
   b63c8:	00030220 	.word	0x00030220

000b63cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b63cc:	b508      	push	{r3, lr}
   b63ce:	4b02      	ldr	r3, [pc, #8]	; (b63d8 <application_thread_current+0xc>)
   b63d0:	681b      	ldr	r3, [r3, #0]
   b63d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b63d4:	9301      	str	r3, [sp, #4]
   b63d6:	bd08      	pop	{r3, pc}
   b63d8:	00030220 	.word	0x00030220

000b63dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b63dc:	b508      	push	{r3, lr}
   b63de:	4b02      	ldr	r3, [pc, #8]	; (b63e8 <application_thread_invoke+0xc>)
   b63e0:	681b      	ldr	r3, [r3, #0]
   b63e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b63e4:	9301      	str	r3, [sp, #4]
   b63e6:	bd08      	pop	{r3, pc}
   b63e8:	00030220 	.word	0x00030220

000b63ec <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b63ec:	b508      	push	{r3, lr}
   b63ee:	4b02      	ldr	r3, [pc, #8]	; (b63f8 <system_thread_get_state+0xc>)
   b63f0:	681b      	ldr	r3, [r3, #0]
   b63f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b63f4:	9301      	str	r3, [sp, #4]
   b63f6:	bd08      	pop	{r3, pc}
   b63f8:	00030220 	.word	0x00030220

000b63fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b63fc:	b508      	push	{r3, lr}
   b63fe:	4b03      	ldr	r3, [pc, #12]	; (b640c <system_ctrl_set_app_request_handler+0x10>)
   b6400:	681b      	ldr	r3, [r3, #0]
   b6402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6406:	9301      	str	r3, [sp, #4]
   b6408:	bd08      	pop	{r3, pc}
   b640a:	0000      	.short	0x0000
   b640c:	00030220 	.word	0x00030220

000b6410 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b03      	ldr	r3, [pc, #12]	; (b6420 <system_ctrl_set_result+0x10>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b641a:	9301      	str	r3, [sp, #4]
   b641c:	bd08      	pop	{r3, pc}
   b641e:	0000      	.short	0x0000
   b6420:	00030220 	.word	0x00030220

000b6424 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <network_connect+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	685b      	ldr	r3, [r3, #4]
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	00030240 	.word	0x00030240

000b6434 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <network_connecting+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	689b      	ldr	r3, [r3, #8]
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	00030240 	.word	0x00030240

000b6444 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <network_disconnect+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	68db      	ldr	r3, [r3, #12]
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	00030240 	.word	0x00030240

000b6454 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <network_ready+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	691b      	ldr	r3, [r3, #16]
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	00030240 	.word	0x00030240

000b6464 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <network_on+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	695b      	ldr	r3, [r3, #20]
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	00030240 	.word	0x00030240

000b6474 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <network_off+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	699b      	ldr	r3, [r3, #24]
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	00030240 	.word	0x00030240

000b6484 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <network_listen+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	69db      	ldr	r3, [r3, #28]
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	00030240 	.word	0x00030240

000b6494 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <network_listening+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	6a1b      	ldr	r3, [r3, #32]
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	00030240 	.word	0x00030240

000b64a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <network_set_listen_timeout+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030240 	.word	0x00030240

000b64b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <network_get_listen_timeout+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030240 	.word	0x00030240

000b64c4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <network_is_on+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030240 	.word	0x00030240

000b64d4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <network_is_off+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030240 	.word	0x00030240

000b64e4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <spark_process+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	689b      	ldr	r3, [r3, #8]
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030244 	.word	0x00030244

000b64f4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <spark_cloud_flag_connected+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	695b      	ldr	r3, [r3, #20]
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	00030244 	.word	0x00030244

000b6504 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <spark_send_event+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	6a1b      	ldr	r3, [r3, #32]
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	00030244 	.word	0x00030244

000b6514 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <spark_subscribe+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	00030244 	.word	0x00030244

000b6524 <spark_unsubscribe>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <spark_unsubscribe+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	00030244 	.word	0x00030244

000b6534 <spark_sync_time_pending>:
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <spark_sync_time_pending+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	00030244 	.word	0x00030244

000b6544 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	00030244 	.word	0x00030244

000b6554 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <malloc+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	681b      	ldr	r3, [r3, #0]
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	0003021c 	.word	0x0003021c

000b6564 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <free+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	685b      	ldr	r3, [r3, #4]
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	0003021c 	.word	0x0003021c

000b6574 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <realloc+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	689b      	ldr	r3, [r3, #8]
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	0003021c 	.word	0x0003021c

000b6584 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <sprintf+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	68db      	ldr	r3, [r3, #12]
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	0003021c 	.word	0x0003021c

000b6594 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <sscanf+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	695b      	ldr	r3, [r3, #20]
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	0003021c 	.word	0x0003021c

000b65a4 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <vsnprintf+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	0003021c 	.word	0x0003021c

000b65b4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <abort+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	0003021c 	.word	0x0003021c

000b65c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <_malloc_r+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	0003021c 	.word	0x0003021c

000b65d4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <__errno+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	0003021c 	.word	0x0003021c

000b65e4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <__assert_func+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	0003021c 	.word	0x0003021c

000b65f4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <newlib_impure_ptr_callback+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	0003021c 	.word	0x0003021c

000b6604 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <localtime_r+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	0003021c 	.word	0x0003021c

000b6614 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6614:	2200      	movs	r2, #0
   b6616:	6840      	ldr	r0, [r0, #4]
   b6618:	4611      	mov	r1, r2
   b661a:	f7ff bf3b 	b.w	b6494 <network_listening>

000b661e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b661e:	2200      	movs	r2, #0
   b6620:	6840      	ldr	r0, [r0, #4]
   b6622:	4611      	mov	r1, r2
   b6624:	f7ff bf46 	b.w	b64b4 <network_get_listen_timeout>

000b6628 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6628:	6840      	ldr	r0, [r0, #4]
   b662a:	2200      	movs	r2, #0
   b662c:	f7ff bf3a 	b.w	b64a4 <network_set_listen_timeout>

000b6630 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6630:	6840      	ldr	r0, [r0, #4]
   b6632:	2200      	movs	r2, #0
   b6634:	f081 0101 	eor.w	r1, r1, #1
   b6638:	f7ff bf24 	b.w	b6484 <network_listen>

000b663c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b663c:	2300      	movs	r3, #0
   b663e:	6840      	ldr	r0, [r0, #4]
   b6640:	461a      	mov	r2, r3
   b6642:	4619      	mov	r1, r3
   b6644:	f7ff bf16 	b.w	b6474 <network_off>

000b6648 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6648:	2300      	movs	r3, #0
   b664a:	6840      	ldr	r0, [r0, #4]
   b664c:	461a      	mov	r2, r3
   b664e:	4619      	mov	r1, r3
   b6650:	f7ff bf08 	b.w	b6464 <network_on>

000b6654 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6654:	2200      	movs	r2, #0
   b6656:	6840      	ldr	r0, [r0, #4]
   b6658:	4611      	mov	r1, r2
   b665a:	f7ff befb 	b.w	b6454 <network_ready>

000b665e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b665e:	2200      	movs	r2, #0
   b6660:	6840      	ldr	r0, [r0, #4]
   b6662:	4611      	mov	r1, r2
   b6664:	f7ff bee6 	b.w	b6434 <network_connecting>

000b6668 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6668:	6840      	ldr	r0, [r0, #4]
   b666a:	2200      	movs	r2, #0
   b666c:	2102      	movs	r1, #2
   b666e:	f7ff bee9 	b.w	b6444 <network_disconnect>

000b6672 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6672:	2300      	movs	r3, #0
   b6674:	6840      	ldr	r0, [r0, #4]
   b6676:	461a      	mov	r2, r3
   b6678:	f7ff bed4 	b.w	b6424 <network_connect>

000b667c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b667c:	4b02      	ldr	r3, [pc, #8]	; (b6688 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b667e:	2203      	movs	r2, #3
   b6680:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6682:	4a02      	ldr	r2, [pc, #8]	; (b668c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6684:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6686:	4770      	bx	lr
   b6688:	2003e670 	.word	0x2003e670
   b668c:	000bccc8 	.word	0x000bccc8

000b6690 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6690:	b510      	push	{r4, lr}
   b6692:	4604      	mov	r4, r0
   b6694:	4608      	mov	r0, r1
{
    _spi = spi;
   b6696:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6698:	f7ff fe20 	bl	b62dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b669c:	2300      	movs	r3, #0
   b669e:	6063      	str	r3, [r4, #4]
}
   b66a0:	4620      	mov	r0, r4
   b66a2:	bd10      	pop	{r4, pc}

000b66a4 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b66a4:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b66a6:	2420      	movs	r4, #32
{
   b66a8:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b66aa:	4622      	mov	r2, r4
   b66ac:	2100      	movs	r1, #0
   b66ae:	4668      	mov	r0, sp
   b66b0:	f003 fe0d 	bl	ba2ce <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b66b4:	2100      	movs	r1, #0
   b66b6:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b66b8:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b66bc:	f7ff fc74 	bl	b5fa8 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b66c0:	9801      	ldr	r0, [sp, #4]
   b66c2:	b008      	add	sp, #32
   b66c4:	bd10      	pop	{r4, pc}
	...

000b66c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b66c8:	4b05      	ldr	r3, [pc, #20]	; (b66e0 <_GLOBAL__sub_I_System+0x18>)
   b66ca:	2202      	movs	r2, #2
   b66cc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b66ce:	4b05      	ldr	r3, [pc, #20]	; (b66e4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b66d0:	4a05      	ldr	r2, [pc, #20]	; (b66e8 <_GLOBAL__sub_I_System+0x20>)
   b66d2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b66d4:	2000      	movs	r0, #0
   b66d6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b66da:	f7ff be5f 	b.w	b639c <set_system_mode>
   b66de:	bf00      	nop
   b66e0:	2003e684 	.word	0x2003e684
   b66e4:	2003e678 	.word	0x2003e678
   b66e8:	ffff0000 	.word	0xffff0000

000b66ec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b66ec:	b510      	push	{r4, lr}
   b66ee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b66f0:	f003 fe63 	bl	ba3ba <strlen>
   b66f4:	3801      	subs	r0, #1
   b66f6:	1823      	adds	r3, r4, r0
   b66f8:	4620      	mov	r0, r4
	while(i<j){
   b66fa:	4283      	cmp	r3, r0
   b66fc:	d906      	bls.n	b670c <_Z11str_reversePc+0x20>
		c = *i;
   b66fe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6700:	7819      	ldrb	r1, [r3, #0]
   b6702:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6706:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b670a:	e7f6      	b.n	b66fa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b670c:	bd10      	pop	{r4, pc}

000b670e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b670e:	b570      	push	{r4, r5, r6, lr}
   b6710:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b6712:	1e91      	subs	r1, r2, #2
   b6714:	2922      	cmp	r1, #34	; 0x22
   b6716:	d81d      	bhi.n	b6754 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6718:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b671a:	b930      	cbnz	r0, b672a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b671c:	4423      	add	r3, r4
            *ptr++ = '0';
   b671e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6720:	429d      	cmp	r5, r3
   b6722:	d210      	bcs.n	b6746 <ultoa+0x38>
            *ptr++ = '0';
   b6724:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6728:	e7fa      	b.n	b6720 <ultoa+0x12>
            result.quot = a/radix;
   b672a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b672e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6732:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6734:	2809      	cmp	r0, #9
                *ptr += '0';
   b6736:	bf94      	ite	ls
   b6738:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b673a:	3157      	addhi	r1, #87	; 0x57
   b673c:	b2c9      	uxtb	r1, r1
   b673e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6742:	4630      	mov	r0, r6
	while(a){
   b6744:	e7e9      	b.n	b671a <ultoa+0xc>

	*ptr = '\0';
   b6746:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6748:	4620      	mov	r0, r4
	*ptr = '\0';
   b674a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b674c:	f7ff ffce 	bl	b66ec <_Z11str_reversePc>
	return buffer;
   b6750:	4620      	mov	r0, r4
}
   b6752:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6754:	2000      	movs	r0, #0
   b6756:	e7fc      	b.n	b6752 <ultoa+0x44>

000b6758 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6758:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b675a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b675c:	460c      	mov	r4, r1
   b675e:	4615      	mov	r5, r2
	if(a<0){
   b6760:	da0e      	bge.n	b6780 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b6766:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b676a:	bf14      	ite	ne
   b676c:	4258      	negne	r0, r3
   b676e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b6770:	2301      	movs	r3, #1
		*buffer = '-';
   b6772:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6774:	462a      	mov	r2, r5
   b6776:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b6778:	f7ff ffc9 	bl	b670e <ultoa>
	}
	return buffer;
}
   b677c:	4620      	mov	r0, r4
   b677e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b6780:	2301      	movs	r3, #1
   b6782:	e7f9      	b.n	b6778 <itoa+0x20>

000b6784 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6784:	b510      	push	{r4, lr}
   b6786:	4604      	mov	r4, r0
{
	free(buffer);
   b6788:	6800      	ldr	r0, [r0, #0]
   b678a:	f7ff feeb 	bl	b6564 <free>
}
   b678e:	4620      	mov	r0, r4
   b6790:	bd10      	pop	{r4, pc}

000b6792 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6792:	b510      	push	{r4, lr}
   b6794:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6796:	6800      	ldr	r0, [r0, #0]
   b6798:	b108      	cbz	r0, b679e <_ZN6String10invalidateEv+0xc>
   b679a:	f7ff fee3 	bl	b6564 <free>
	buffer = NULL;
   b679e:	2300      	movs	r3, #0
	capacity = len = 0;
   b67a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b67a4:	6023      	str	r3, [r4, #0]
}
   b67a6:	bd10      	pop	{r4, pc}

000b67a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b67a8:	b538      	push	{r3, r4, r5, lr}
   b67aa:	4604      	mov	r4, r0
   b67ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b67ae:	6800      	ldr	r0, [r0, #0]
   b67b0:	3101      	adds	r1, #1
   b67b2:	f7ff fedf 	bl	b6574 <realloc>
	if (newbuffer) {
   b67b6:	b110      	cbz	r0, b67be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b67b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b67bc:	2001      	movs	r0, #1
	}
	return 0;
}
   b67be:	bd38      	pop	{r3, r4, r5, pc}

000b67c0 <_ZN6String7reserveEj>:
{
   b67c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b67c2:	6803      	ldr	r3, [r0, #0]
{
   b67c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b67c6:	b123      	cbz	r3, b67d2 <_ZN6String7reserveEj+0x12>
   b67c8:	6843      	ldr	r3, [r0, #4]
   b67ca:	428b      	cmp	r3, r1
   b67cc:	d301      	bcc.n	b67d2 <_ZN6String7reserveEj+0x12>
   b67ce:	2001      	movs	r0, #1
}
   b67d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b67d2:	4620      	mov	r0, r4
   b67d4:	f7ff ffe8 	bl	b67a8 <_ZN6String12changeBufferEj>
   b67d8:	2800      	cmp	r0, #0
   b67da:	d0f9      	beq.n	b67d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b67dc:	68a3      	ldr	r3, [r4, #8]
   b67de:	2b00      	cmp	r3, #0
   b67e0:	d1f5      	bne.n	b67ce <_ZN6String7reserveEj+0xe>
   b67e2:	6822      	ldr	r2, [r4, #0]
   b67e4:	7013      	strb	r3, [r2, #0]
   b67e6:	e7f2      	b.n	b67ce <_ZN6String7reserveEj+0xe>

000b67e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b67e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b67ea:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b67ec:	4611      	mov	r1, r2
   b67ee:	9201      	str	r2, [sp, #4]
{
   b67f0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b67f2:	f7ff ffe5 	bl	b67c0 <_ZN6String7reserveEj>
   b67f6:	9a01      	ldr	r2, [sp, #4]
   b67f8:	b928      	cbnz	r0, b6806 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b67fa:	4620      	mov	r0, r4
   b67fc:	f7ff ffc9 	bl	b6792 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6800:	4620      	mov	r0, r4
   b6802:	b003      	add	sp, #12
   b6804:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6806:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6808:	4629      	mov	r1, r5
   b680a:	6820      	ldr	r0, [r4, #0]
   b680c:	f003 fd37 	bl	ba27e <memcpy>
	buffer[len] = 0;
   b6810:	6822      	ldr	r2, [r4, #0]
   b6812:	68a3      	ldr	r3, [r4, #8]
   b6814:	2100      	movs	r1, #0
   b6816:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6818:	e7f2      	b.n	b6800 <_ZN6String4copyEPKcj+0x18>

000b681a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b681a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b681c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b681e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6822:	4604      	mov	r4, r0
	len = 0;
   b6824:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6826:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6828:	b141      	cbz	r1, b683c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b682a:	4608      	mov	r0, r1
   b682c:	9101      	str	r1, [sp, #4]
   b682e:	f003 fdc4 	bl	ba3ba <strlen>
   b6832:	9901      	ldr	r1, [sp, #4]
   b6834:	4602      	mov	r2, r0
   b6836:	4620      	mov	r0, r4
   b6838:	f7ff ffd6 	bl	b67e8 <_ZN6String4copyEPKcj>
}
   b683c:	4620      	mov	r0, r4
   b683e:	b002      	add	sp, #8
   b6840:	bd10      	pop	{r4, pc}

000b6842 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6842:	b538      	push	{r3, r4, r5, lr}
   b6844:	4605      	mov	r5, r0
	if (buffer) {
   b6846:	6800      	ldr	r0, [r0, #0]
{
   b6848:	460c      	mov	r4, r1
	if (buffer) {
   b684a:	b168      	cbz	r0, b6868 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b684c:	686a      	ldr	r2, [r5, #4]
   b684e:	688b      	ldr	r3, [r1, #8]
   b6850:	429a      	cmp	r2, r3
   b6852:	d307      	bcc.n	b6864 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6854:	6809      	ldr	r1, [r1, #0]
   b6856:	f003 fd8a 	bl	ba36e <strcpy>
			len = rhs.len;
   b685a:	68a3      	ldr	r3, [r4, #8]
   b685c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b685e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6860:	60a3      	str	r3, [r4, #8]
}
   b6862:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6864:	f7ff fe7e 	bl	b6564 <free>
	buffer = rhs.buffer;
   b6868:	6823      	ldr	r3, [r4, #0]
   b686a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b686c:	6863      	ldr	r3, [r4, #4]
   b686e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6870:	68a3      	ldr	r3, [r4, #8]
   b6872:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6874:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6876:	e9c4 3300 	strd	r3, r3, [r4]
   b687a:	e7f1      	b.n	b6860 <_ZN6String4moveERS_+0x1e>

000b687c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b687c:	4288      	cmp	r0, r1
{
   b687e:	b510      	push	{r4, lr}
   b6880:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b6882:	d001      	beq.n	b6888 <_ZN6StringaSEOS_+0xc>
   b6884:	f7ff ffdd 	bl	b6842 <_ZN6String4moveERS_>
	return *this;
}
   b6888:	4620      	mov	r0, r4
   b688a:	bd10      	pop	{r4, pc}

000b688c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b688c:	b513      	push	{r0, r1, r4, lr}
   b688e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6890:	b159      	cbz	r1, b68aa <_ZN6StringaSEPKc+0x1e>
   b6892:	4608      	mov	r0, r1
   b6894:	9101      	str	r1, [sp, #4]
   b6896:	f003 fd90 	bl	ba3ba <strlen>
   b689a:	9901      	ldr	r1, [sp, #4]
   b689c:	4602      	mov	r2, r0
   b689e:	4620      	mov	r0, r4
   b68a0:	f7ff ffa2 	bl	b67e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b68a4:	4620      	mov	r0, r4
   b68a6:	b002      	add	sp, #8
   b68a8:	bd10      	pop	{r4, pc}
	else invalidate();
   b68aa:	f7ff ff72 	bl	b6792 <_ZN6String10invalidateEv>
   b68ae:	e7f9      	b.n	b68a4 <_ZN6StringaSEPKc+0x18>

000b68b0 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b68b0:	b510      	push	{r4, lr}
   b68b2:	4604      	mov	r4, r0
   b68b4:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b68b6:	2300      	movs	r3, #0
	capacity = 0;
   b68b8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b68bc:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b68be:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b68c0:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b68c2:	a901      	add	r1, sp, #4
   b68c4:	f7ff ff48 	bl	b6758 <itoa>
	*this = buf;
   b68c8:	a901      	add	r1, sp, #4
   b68ca:	4620      	mov	r0, r4
   b68cc:	f7ff ffde 	bl	b688c <_ZN6StringaSEPKc>
}
   b68d0:	4620      	mov	r0, r4
   b68d2:	b00a      	add	sp, #40	; 0x28
   b68d4:	bd10      	pop	{r4, pc}

000b68d6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b68d6:	b570      	push	{r4, r5, r6, lr}
   b68d8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b68da:	460e      	mov	r6, r1
   b68dc:	b909      	cbnz	r1, b68e2 <_ZN6String6concatEPKcj+0xc>
   b68de:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b68e0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b68e2:	b16a      	cbz	r2, b6900 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b68e4:	6884      	ldr	r4, [r0, #8]
   b68e6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b68e8:	4621      	mov	r1, r4
   b68ea:	f7ff ff69 	bl	b67c0 <_ZN6String7reserveEj>
   b68ee:	2800      	cmp	r0, #0
   b68f0:	d0f5      	beq.n	b68de <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b68f2:	6828      	ldr	r0, [r5, #0]
   b68f4:	68ab      	ldr	r3, [r5, #8]
   b68f6:	4631      	mov	r1, r6
   b68f8:	4418      	add	r0, r3
   b68fa:	f003 fd38 	bl	ba36e <strcpy>
	len = newlen;
   b68fe:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6900:	2001      	movs	r0, #1
   b6902:	e7ed      	b.n	b68e0 <_ZN6String6concatEPKcj+0xa>

000b6904 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b6904:	688a      	ldr	r2, [r1, #8]
   b6906:	6809      	ldr	r1, [r1, #0]
   b6908:	f7ff bfe5 	b.w	b68d6 <_ZN6String6concatEPKcj>

000b690c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b690c:	b513      	push	{r0, r1, r4, lr}
   b690e:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b6910:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6912:	b151      	cbz	r1, b692a <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6914:	9101      	str	r1, [sp, #4]
   b6916:	f003 fd50 	bl	ba3ba <strlen>
   b691a:	9901      	ldr	r1, [sp, #4]
   b691c:	4602      	mov	r2, r0
   b691e:	4620      	mov	r0, r4
}
   b6920:	b002      	add	sp, #8
   b6922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6926:	f7ff bfd6 	b.w	b68d6 <_ZN6String6concatEPKcj>
}
   b692a:	b002      	add	sp, #8
   b692c:	bd10      	pop	{r4, pc}

000b692e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b692e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6930:	6882      	ldr	r2, [r0, #8]
   b6932:	b93a      	cbnz	r2, b6944 <_ZNK6String6equalsEPKc+0x16>
   b6934:	b121      	cbz	r1, b6940 <_ZNK6String6equalsEPKc+0x12>
   b6936:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b6938:	fab0 f080 	clz	r0, r0
   b693c:	0940      	lsrs	r0, r0, #5
   b693e:	e000      	b.n	b6942 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6940:	2001      	movs	r0, #1
}
   b6942:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b6944:	6800      	ldr	r0, [r0, #0]
   b6946:	b909      	cbnz	r1, b694c <_ZNK6String6equalsEPKc+0x1e>
   b6948:	7800      	ldrb	r0, [r0, #0]
   b694a:	e7f5      	b.n	b6938 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b694c:	f003 fd05 	bl	ba35a <strcmp>
   b6950:	e7f2      	b.n	b6938 <_ZNK6String6equalsEPKc+0xa>

000b6952 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b6952:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b6954:	6883      	ldr	r3, [r0, #8]
   b6956:	4293      	cmp	r3, r2
   b6958:	d907      	bls.n	b696a <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b695a:	6804      	ldr	r4, [r0, #0]
   b695c:	6809      	ldr	r1, [r1, #0]
   b695e:	18a0      	adds	r0, r4, r2
   b6960:	f003 fd53 	bl	ba40a <strstr>
	if (found == NULL) return -1;
   b6964:	b108      	cbz	r0, b696a <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b6966:	1b00      	subs	r0, r0, r4
}
   b6968:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b696a:	f04f 30ff 	mov.w	r0, #4294967295
   b696e:	e7fb      	b.n	b6968 <_ZNK6String7indexOfERKS_j+0x16>

000b6970 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b6970:	2200      	movs	r2, #0
   b6972:	f7ff bfee 	b.w	b6952 <_ZNK6String7indexOfERKS_j>
	...

000b6978 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b6978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b697a:	429a      	cmp	r2, r3
{
   b697c:	460f      	mov	r7, r1
   b697e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b6980:	490c      	ldr	r1, [pc, #48]	; (b69b4 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b6982:	bf88      	it	hi
   b6984:	4613      	movhi	r3, r2
{
   b6986:	4614      	mov	r4, r2
   b6988:	4606      	mov	r6, r0
	if (left > right) {
   b698a:	bf84      	itt	hi
   b698c:	462c      	movhi	r4, r5
   b698e:	461d      	movhi	r5, r3
	String out;
   b6990:	f7ff ff43 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b6994:	68bb      	ldr	r3, [r7, #8]
   b6996:	42a3      	cmp	r3, r4
   b6998:	d30a      	bcc.n	b69b0 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b699a:	6839      	ldr	r1, [r7, #0]
   b699c:	42ab      	cmp	r3, r5
   b699e:	bf94      	ite	ls
   b69a0:	ebc4 0203 	rsbls	r2, r4, r3
   b69a4:	ebc4 0205 	rsbhi	r2, r4, r5
   b69a8:	4421      	add	r1, r4
   b69aa:	4630      	mov	r0, r6
   b69ac:	f7ff ff1c 	bl	b67e8 <_ZN6String4copyEPKcj>
	return out;
}
   b69b0:	4630      	mov	r0, r6
   b69b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b69b4:	000bcc9b 	.word	0x000bcc9b

000b69b8 <_ZNK6String9substringEj>:
{
   b69b8:	b510      	push	{r4, lr}
   b69ba:	4604      	mov	r4, r0
	return substring(left, len);
   b69bc:	688b      	ldr	r3, [r1, #8]
   b69be:	f7ff ffdb 	bl	b6978 <_ZNK6String9substringEjj>
}
   b69c2:	4620      	mov	r0, r4
   b69c4:	bd10      	pop	{r4, pc}
	...

000b69c8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b69c8:	b40e      	push	{r1, r2, r3}
   b69ca:	b570      	push	{r4, r5, r6, lr}
   b69cc:	b087      	sub	sp, #28
   b69ce:	ad0b      	add	r5, sp, #44	; 0x2c
   b69d0:	4604      	mov	r4, r0
   b69d2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b69d6:	9201      	str	r2, [sp, #4]
   b69d8:	462b      	mov	r3, r5
   b69da:	2105      	movs	r1, #5
   b69dc:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b69de:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b69e0:	f7ff fde0 	bl	b65a4 <vsnprintf>
    va_end(marker);

    String result;
   b69e4:	490b      	ldr	r1, [pc, #44]	; (b6a14 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b69e6:	4606      	mov	r6, r0
    String result;
   b69e8:	4620      	mov	r0, r4
   b69ea:	f7ff ff16 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b69ee:	4631      	mov	r1, r6
   b69f0:	4620      	mov	r0, r4
   b69f2:	f7ff fee5 	bl	b67c0 <_ZN6String7reserveEj>
    if (result.buffer) {
   b69f6:	6820      	ldr	r0, [r4, #0]
   b69f8:	b130      	cbz	r0, b6a08 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b69fa:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b69fc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b69fe:	462b      	mov	r3, r5
   b6a00:	1c71      	adds	r1, r6, #1
   b6a02:	f7ff fdcf 	bl	b65a4 <vsnprintf>
        va_end(marker);
        result.len = n;
   b6a06:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6a08:	4620      	mov	r0, r4
   b6a0a:	b007      	add	sp, #28
   b6a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6a10:	b003      	add	sp, #12
   b6a12:	4770      	bx	lr
   b6a14:	000bcc9b 	.word	0x000bcc9b

000b6a18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a18:	4770      	bx	lr

000b6a1a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6a1a:	4770      	bx	lr

000b6a1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6a1c:	4770      	bx	lr

000b6a1e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a1e:	4770      	bx	lr

000b6a20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a20:	4b06      	ldr	r3, [pc, #24]	; (b6a3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a22:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a24:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6a26:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a2a:	d005      	beq.n	b6a38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a2c:	4608      	mov	r0, r1
   b6a2e:	f002 fe2f 	bl	b9690 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a32:	2800      	cmp	r0, #0
   b6a34:	bf08      	it	eq
   b6a36:	2400      	moveq	r4, #0
      }
   b6a38:	4620      	mov	r0, r4
   b6a3a:	bd10      	pop	{r4, pc}
   b6a3c:	000bce9c 	.word	0x000bce9c

000b6a40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a40:	4b06      	ldr	r3, [pc, #24]	; (b6a5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a42:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a44:	b510      	push	{r4, lr}
   b6a46:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a4a:	d005      	beq.n	b6a58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a4c:	4608      	mov	r0, r1
   b6a4e:	f002 fe1f 	bl	b9690 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a52:	2800      	cmp	r0, #0
   b6a54:	bf08      	it	eq
   b6a56:	2400      	moveq	r4, #0
      }
   b6a58:	4620      	mov	r0, r4
   b6a5a:	bd10      	pop	{r4, pc}
   b6a5c:	000bce9c 	.word	0x000bce9c

000b6a60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a60:	4b06      	ldr	r3, [pc, #24]	; (b6a7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a62:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a64:	b510      	push	{r4, lr}
   b6a66:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a6a:	d005      	beq.n	b6a78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a6c:	4608      	mov	r0, r1
   b6a6e:	f002 fe0f 	bl	b9690 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6a72:	2800      	cmp	r0, #0
   b6a74:	bf08      	it	eq
   b6a76:	2400      	moveq	r4, #0
      }
   b6a78:	4620      	mov	r0, r4
   b6a7a:	bd10      	pop	{r4, pc}
   b6a7c:	000bce9c 	.word	0x000bce9c

000b6a80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a80:	b510      	push	{r4, lr}
   b6a82:	2168      	movs	r1, #104	; 0x68
   b6a84:	4604      	mov	r4, r0
   b6a86:	f7fd fb0a 	bl	b409e <_ZdlPvj>
   b6a8a:	4620      	mov	r0, r4
   b6a8c:	bd10      	pop	{r4, pc}

000b6a8e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6a8e:	b510      	push	{r4, lr}
   b6a90:	2128      	movs	r1, #40	; 0x28
   b6a92:	4604      	mov	r4, r0
   b6a94:	f7fd fb03 	bl	b409e <_ZdlPvj>
   b6a98:	4620      	mov	r0, r4
   b6a9a:	bd10      	pop	{r4, pc}

000b6a9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6a9c:	b510      	push	{r4, lr}
   b6a9e:	2130      	movs	r1, #48	; 0x30
   b6aa0:	4604      	mov	r4, r0
   b6aa2:	f7fd fafc 	bl	b409e <_ZdlPvj>
   b6aa6:	4620      	mov	r0, r4
   b6aa8:	bd10      	pop	{r4, pc}

000b6aaa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6aaa:	2168      	movs	r1, #104	; 0x68
   b6aac:	f7fd baf7 	b.w	b409e <_ZdlPvj>

000b6ab0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6ab0:	2128      	movs	r1, #40	; 0x28
   b6ab2:	f7fd baf4 	b.w	b409e <_ZdlPvj>

000b6ab6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6ab6:	2130      	movs	r1, #48	; 0x30
   b6ab8:	f7fd baf1 	b.w	b409e <_ZdlPvj>

000b6abc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6abe:	2500      	movs	r5, #0
   b6ac0:	1cec      	adds	r4, r5, #3
   b6ac2:	428c      	cmp	r4, r1
   b6ac4:	d80d      	bhi.n	b6ae2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6ac6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6ac8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6aca:	5d87      	ldrb	r7, [r0, r6]
   b6acc:	4297      	cmp	r7, r2
   b6ace:	d105      	bne.n	b6adc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6ad0:	4426      	add	r6, r4
   b6ad2:	42b1      	cmp	r1, r6
   b6ad4:	d305      	bcc.n	b6ae2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6ad6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6ad8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6adc:	3401      	adds	r4, #1
   b6ade:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6ae0:	e7ee      	b.n	b6ac0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6ae2:	2000      	movs	r0, #0
   b6ae4:	e7f9      	b.n	b6ada <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6ae8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6ae8:	4a02      	ldr	r2, [pc, #8]	; (b6af4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6aea:	4903      	ldr	r1, [pc, #12]	; (b6af8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6aec:	200a      	movs	r0, #10
   b6aee:	f7ff bc3d 	b.w	b636c <panic_>
   b6af2:	bf00      	nop
   b6af4:	000b5f69 	.word	0x000b5f69
   b6af8:	000bccfc 	.word	0x000bccfc

000b6afc <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6afc:	4603      	mov	r3, r0
   b6afe:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b6b00:	681b      	ldr	r3, [r3, #0]
   b6b02:	e9d3 2100 	ldrd	r2, r1, [r3]
   b6b06:	4710      	bx	r2

000b6b08 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6b08:	b430      	push	{r4, r5}
   b6b0a:	460d      	mov	r5, r1
   b6b0c:	4611      	mov	r1, r2
   b6b0e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6b10:	6803      	ldr	r3, [r0, #0]
   b6b12:	6809      	ldr	r1, [r1, #0]
   b6b14:	6828      	ldr	r0, [r5, #0]
   b6b16:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6b1a:	46a4      	mov	ip, r4
      }
   b6b1c:	bc30      	pop	{r4, r5}
   b6b1e:	4760      	bx	ip

000b6b20 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b6b20:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b22:	b538      	push	{r3, r4, r5, lr}
   b6b24:	4604      	mov	r4, r0
	switch (__op)
   b6b26:	d102      	bne.n	b6b2e <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6b28:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6b2a:	6023      	str	r3, [r4, #0]
	}
   b6b2c:	e003      	b.n	b6b36 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b6b2e:	2a02      	cmp	r2, #2
   b6b30:	d003      	beq.n	b6b3a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b6b32:	2a03      	cmp	r2, #3
   b6b34:	d00d      	beq.n	b6b52 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b6b36:	2000      	movs	r0, #0
   b6b38:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b3a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6b3c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b3e:	f7fd faaa 	bl	b4096 <_Znwj>
   b6b42:	4603      	mov	r3, r0
   b6b44:	2800      	cmp	r0, #0
   b6b46:	d0f0      	beq.n	b6b2a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b6b48:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6b4c:	e883 0003 	stmia.w	r3, {r0, r1}
   b6b50:	e7eb      	b.n	b6b2a <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6b52:	6800      	ldr	r0, [r0, #0]
   b6b54:	2800      	cmp	r0, #0
   b6b56:	d0ee      	beq.n	b6b36 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b6b58:	2108      	movs	r1, #8
   b6b5a:	f7fd faa0 	bl	b409e <_ZdlPvj>
   b6b5e:	e7ea      	b.n	b6b36 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b6b60 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6b60:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b62:	b538      	push	{r3, r4, r5, lr}
   b6b64:	4604      	mov	r4, r0
	switch (__op)
   b6b66:	d102      	bne.n	b6b6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6b68:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6b6a:	6023      	str	r3, [r4, #0]
	}
   b6b6c:	e003      	b.n	b6b76 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6b6e:	2a02      	cmp	r2, #2
   b6b70:	d003      	beq.n	b6b7a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b6b72:	2a03      	cmp	r2, #3
   b6b74:	d00d      	beq.n	b6b92 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6b76:	2000      	movs	r0, #0
   b6b78:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b7a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6b7c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b7e:	f7fd fa8a 	bl	b4096 <_Znwj>
   b6b82:	4603      	mov	r3, r0
   b6b84:	2800      	cmp	r0, #0
   b6b86:	d0f0      	beq.n	b6b6a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6b88:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6b8c:	e883 0003 	stmia.w	r3, {r0, r1}
   b6b90:	e7eb      	b.n	b6b6a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6b92:	6800      	ldr	r0, [r0, #0]
   b6b94:	2800      	cmp	r0, #0
   b6b96:	d0ee      	beq.n	b6b76 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6b98:	2108      	movs	r1, #8
   b6b9a:	f7fd fa80 	bl	b409e <_ZdlPvj>
   b6b9e:	e7ea      	b.n	b6b76 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b6ba0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6ba0:	b510      	push	{r4, lr}
   b6ba2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6ba4:	3058      	adds	r0, #88	; 0x58
   b6ba6:	f7fd fc21 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6baa:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6bb2:	f7ff bde7 	b.w	b6784 <_ZN6StringD1Ev>

000b6bb6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6bb6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6bb8:	6843      	ldr	r3, [r0, #4]
   b6bba:	3b01      	subs	r3, #1
    {
   b6bbc:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6bbe:	6043      	str	r3, [r0, #4]
   b6bc0:	b963      	cbnz	r3, b6bdc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6bc2:	6803      	ldr	r3, [r0, #0]
   b6bc4:	689b      	ldr	r3, [r3, #8]
   b6bc6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6bc8:	68a3      	ldr	r3, [r4, #8]
   b6bca:	3b01      	subs	r3, #1
   b6bcc:	60a3      	str	r3, [r4, #8]
   b6bce:	b92b      	cbnz	r3, b6bdc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6bd0:	6823      	ldr	r3, [r4, #0]
   b6bd2:	4620      	mov	r0, r4
   b6bd4:	68db      	ldr	r3, [r3, #12]
    }
   b6bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6bda:	4718      	bx	r3
    }
   b6bdc:	bd10      	pop	{r4, pc}

000b6bde <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6bde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6be2:	b2da      	uxtb	r2, r3
   b6be4:	2a09      	cmp	r2, #9
   b6be6:	d801      	bhi.n	b6bec <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b6be8:	4618      	mov	r0, r3
   b6bea:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6bec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6bf0:	2b05      	cmp	r3, #5
   b6bf2:	d801      	bhi.n	b6bf8 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b6bf4:	3857      	subs	r0, #87	; 0x57
   b6bf6:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b6bf8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6bfc:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6bfe:	bf94      	ite	ls
   b6c00:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6c02:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b6c06:	4770      	bx	lr

000b6c08 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6c08:	b510      	push	{r4, lr}
            locked_(false) {
   b6c0a:	2300      	movs	r3, #0
   b6c0c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6c0e:	4b04      	ldr	r3, [pc, #16]	; (b6c20 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6c10:	4604      	mov	r4, r0
   b6c12:	6818      	ldr	r0, [r3, #0]
   b6c14:	f7ff fa8a 	bl	b612c <os_mutex_recursive_lock>
        locked_ = true;
   b6c18:	2301      	movs	r3, #1
   b6c1a:	7023      	strb	r3, [r4, #0]
    }
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	bd10      	pop	{r4, pc}
   b6c20:	2003e690 	.word	0x2003e690

000b6c24 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6c24:	b510      	push	{r4, lr}
        if (locked_) {
   b6c26:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6c28:	4604      	mov	r4, r0
        if (locked_) {
   b6c2a:	b11b      	cbz	r3, b6c34 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6c2c:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6c2e:	6818      	ldr	r0, [r3, #0]
   b6c30:	f7ff fa84 	bl	b613c <os_mutex_recursive_unlock>
    }
   b6c34:	4620      	mov	r0, r4
   b6c36:	bd10      	pop	{r4, pc}
   b6c38:	2003e690 	.word	0x2003e690

000b6c3c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6c3c:	b082      	sub	sp, #8
   b6c3e:	4603      	mov	r3, r0
    address_ = addr;
   b6c40:	6808      	ldr	r0, [r1, #0]
   b6c42:	6849      	ldr	r1, [r1, #4]
   b6c44:	466a      	mov	r2, sp
   b6c46:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6c48:	466a      	mov	r2, sp
   b6c4a:	ca03      	ldmia	r2!, {r0, r1}
   b6c4c:	6018      	str	r0, [r3, #0]
}
   b6c4e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6c50:	6059      	str	r1, [r3, #4]
}
   b6c52:	b002      	add	sp, #8
   b6c54:	4770      	bx	lr

000b6c56 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6c56:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6c58:	7982      	ldrb	r2, [r0, #6]
   b6c5a:	798b      	ldrb	r3, [r1, #6]
   b6c5c:	429a      	cmp	r2, r3
   b6c5e:	d106      	bne.n	b6c6e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6c60:	2206      	movs	r2, #6
   b6c62:	f003 fafc 	bl	ba25e <memcmp>
   b6c66:	fab0 f080 	clz	r0, r0
   b6c6a:	0940      	lsrs	r0, r0, #5
}
   b6c6c:	bd08      	pop	{r3, pc}
    return false;
   b6c6e:	2000      	movs	r0, #0
   b6c70:	e7fc      	b.n	b6c6c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6c72 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6c72:	f04f 33ff 	mov.w	r3, #4294967295
   b6c76:	6003      	str	r3, [r0, #0]
   b6c78:	8083      	strh	r3, [r0, #4]
}
   b6c7a:	2000      	movs	r0, #0
   b6c7c:	4770      	bx	lr

000b6c7e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6c7e:	b508      	push	{r3, lr}
   b6c80:	4602      	mov	r2, r0
        : address_{} {
   b6c82:	2100      	movs	r1, #0
   b6c84:	6001      	str	r1, [r0, #0]
   b6c86:	6041      	str	r1, [r0, #4]
    clear();
   b6c88:	f7ff fff3 	bl	b6c72 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6c8c:	7191      	strb	r1, [r2, #6]
}
   b6c8e:	4610      	mov	r0, r2
   b6c90:	bd08      	pop	{r3, pc}
	...

000b6c94 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6c94:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b6c96:	2301      	movs	r3, #1
   b6c98:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6c9a:	4b05      	ldr	r3, [pc, #20]	; (b6cb0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6c9c:	4602      	mov	r2, r0
   b6c9e:	f103 0110 	add.w	r1, r3, #16
   b6ca2:	f853 4b04 	ldr.w	r4, [r3], #4
   b6ca6:	f842 4b04 	str.w	r4, [r2], #4
   b6caa:	428b      	cmp	r3, r1
   b6cac:	d1f9      	bne.n	b6ca2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6cae:	bd10      	pop	{r4, pc}
   b6cb0:	000bceaa 	.word	0x000bceaa

000b6cb4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6cb4:	b510      	push	{r4, lr}
    if (uuid128) {
   b6cb6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6cb8:	4604      	mov	r4, r0
    if (uuid128) {
   b6cba:	b1b1      	cbz	r1, b6cea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6cbc:	2a01      	cmp	r2, #1
   b6cbe:	f101 0210 	add.w	r2, r1, #16
   b6cc2:	d10a      	bne.n	b6cda <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6cc4:	4601      	mov	r1, r0
   b6cc6:	f853 0b04 	ldr.w	r0, [r3], #4
   b6cca:	f841 0b04 	str.w	r0, [r1], #4
   b6cce:	4293      	cmp	r3, r2
   b6cd0:	d1f9      	bne.n	b6cc6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b6cd2:	2301      	movs	r3, #1
   b6cd4:	6123      	str	r3, [r4, #16]
}
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	bd10      	pop	{r4, pc}
   b6cda:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6cdc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b6ce0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6ce4:	429a      	cmp	r2, r3
   b6ce6:	d1f9      	bne.n	b6cdc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6ce8:	e7f3      	b.n	b6cd2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6cea:	2210      	movs	r2, #16
   b6cec:	f003 faef 	bl	ba2ce <memset>
   b6cf0:	e7f1      	b.n	b6cd6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b6cf2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b6cf2:	b538      	push	{r3, r4, r5, lr}
   b6cf4:	4604      	mov	r4, r0
   b6cf6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b6cf8:	461a      	mov	r2, r3
   b6cfa:	f7ff ffdb 	bl	b6cb4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6cfe:	81a5      	strh	r5, [r4, #12]
}
   b6d00:	4620      	mov	r0, r4
   b6d02:	bd38      	pop	{r3, r4, r5, pc}

000b6d04 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b6d04:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b6d06:	6902      	ldr	r2, [r0, #16]
   b6d08:	b922      	cbnz	r2, b6d14 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b6d0a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6d0c:	3800      	subs	r0, #0
   b6d0e:	bf18      	it	ne
   b6d10:	2001      	movne	r0, #1
}
   b6d12:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6d14:	4902      	ldr	r1, [pc, #8]	; (b6d20 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b6d16:	2210      	movs	r2, #16
   b6d18:	f003 faa1 	bl	ba25e <memcmp>
   b6d1c:	e7f6      	b.n	b6d0c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6d1e:	bf00      	nop
   b6d20:	000bceca 	.word	0x000bceca

000b6d24 <_ZNK8particle7BleUuid4typeEv>:
}
   b6d24:	6900      	ldr	r0, [r0, #16]
   b6d26:	4770      	bx	lr

000b6d28 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b6d28:	b538      	push	{r3, r4, r5, lr}
   b6d2a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6d2c:	2214      	movs	r2, #20
   b6d2e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6d30:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6d32:	f003 facc 	bl	ba2ce <memset>
    if (type_ == BleUuidType::SHORT) {
   b6d36:	6923      	ldr	r3, [r4, #16]
   b6d38:	b91b      	cbnz	r3, b6d42 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b6d3a:	89a3      	ldrh	r3, [r4, #12]
   b6d3c:	802b      	strh	r3, [r5, #0]
}
   b6d3e:	4628      	mov	r0, r5
   b6d40:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6d42:	2301      	movs	r3, #1
   b6d44:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b6d46:	4621      	mov	r1, r4
   b6d48:	462b      	mov	r3, r5
   b6d4a:	f104 0210 	add.w	r2, r4, #16
   b6d4e:	f851 0b04 	ldr.w	r0, [r1], #4
   b6d52:	f843 0b04 	str.w	r0, [r3], #4
   b6d56:	4291      	cmp	r1, r2
   b6d58:	d1f9      	bne.n	b6d4e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b6d5a:	e7f0      	b.n	b6d3e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6d5c <_ZNK8particle7BleUuid7shortedEv>:
}
   b6d5c:	8980      	ldrh	r0, [r0, #12]
   b6d5e:	4770      	bx	lr

000b6d60 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6d60:	4770      	bx	lr

000b6d62 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6d62:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6d64:	6902      	ldr	r2, [r0, #16]
   b6d66:	690b      	ldr	r3, [r1, #16]
   b6d68:	429a      	cmp	r2, r3
   b6d6a:	d106      	bne.n	b6d7a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6d6c:	2210      	movs	r2, #16
   b6d6e:	f003 fa76 	bl	ba25e <memcmp>
   b6d72:	fab0 f080 	clz	r0, r0
   b6d76:	0940      	lsrs	r0, r0, #5
}
   b6d78:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6d7a:	2000      	movs	r0, #0
   b6d7c:	e7fc      	b.n	b6d78 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6d80 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6d80:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6d82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b6d86:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6d88:	4b34      	ldr	r3, [pc, #208]	; (b6e5c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b6d8a:	460c      	mov	r4, r1
   b6d8c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6d8e:	4602      	mov	r2, r0
   b6d90:	f103 0110 	add.w	r1, r3, #16
   b6d94:	f853 0b04 	ldr.w	r0, [r3], #4
   b6d98:	f842 0b04 	str.w	r0, [r2], #4
   b6d9c:	428b      	cmp	r3, r1
   b6d9e:	d1f9      	bne.n	b6d94 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6da0:	b344      	cbz	r4, b6df4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6da2:	2124      	movs	r1, #36	; 0x24
   b6da4:	4620      	mov	r0, r4
   b6da6:	f003 fb24 	bl	ba3f2 <strnlen>
   b6daa:	2804      	cmp	r0, #4
   b6dac:	f04f 0500 	mov.w	r5, #0
   b6db0:	d123      	bne.n	b6dfa <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6db2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6db6:	af01      	add	r7, sp, #4
   b6db8:	1ca5      	adds	r5, r4, #2
   b6dba:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6dbc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6dc0:	f7ff ff0d 	bl	b6bde <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6dc4:	f1b0 0800 	subs.w	r8, r0, #0
   b6dc8:	db12      	blt.n	b6df0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b6dca:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6dce:	f7ff ff06 	bl	b6bde <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6dd2:	2800      	cmp	r0, #0
   b6dd4:	db0c      	blt.n	b6df0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6dd6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6dd8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6ddc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6dde:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6de2:	d1eb      	bne.n	b6dbc <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6de4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6de8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b6dea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6dee:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6df0:	2300      	movs	r3, #0
   b6df2:	6133      	str	r3, [r6, #16]
}
   b6df4:	b002      	add	sp, #8
   b6df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b6dfa:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6dfe:	2124      	movs	r1, #36	; 0x24
   b6e00:	4620      	mov	r0, r4
   b6e02:	f003 faf6 	bl	ba3f2 <strnlen>
   b6e06:	42a8      	cmp	r0, r5
   b6e08:	d807      	bhi.n	b6e1a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b6e0a:	4642      	mov	r2, r8
   b6e0c:	2100      	movs	r1, #0
   b6e0e:	4630      	mov	r0, r6
}
   b6e10:	b002      	add	sp, #8
   b6e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6e16:	f003 ba5a 	b.w	ba2ce <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6e1a:	f1b8 0f00 	cmp.w	r8, #0
   b6e1e:	d0e9      	beq.n	b6df4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6e20:	5d60      	ldrb	r0, [r4, r5]
   b6e22:	f7ff fedc 	bl	b6bde <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6e26:	0603      	lsls	r3, r0, #24
   b6e28:	d415      	bmi.n	b6e56 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b6e2a:	0100      	lsls	r0, r0, #4
   b6e2c:	f108 38ff 	add.w	r8, r8, #4294967295
   b6e30:	b2c7      	uxtb	r7, r0
   b6e32:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6e36:	2124      	movs	r1, #36	; 0x24
   b6e38:	4620      	mov	r0, r4
   b6e3a:	f003 fada 	bl	ba3f2 <strnlen>
   b6e3e:	3501      	adds	r5, #1
   b6e40:	42a8      	cmp	r0, r5
   b6e42:	d908      	bls.n	b6e56 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6e44:	5d60      	ldrb	r0, [r4, r5]
   b6e46:	f7ff feca 	bl	b6bde <_ZN8particle11hexToNibbleEc>
   b6e4a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6e4c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6e4e:	bfa4      	itt	ge
   b6e50:	4338      	orrge	r0, r7
   b6e52:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b6e56:	3501      	adds	r5, #1
   b6e58:	e7d1      	b.n	b6dfe <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b6e5a:	bf00      	nop
   b6e5c:	000bceaa 	.word	0x000bceaa

000b6e60 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6e60:	b513      	push	{r0, r1, r4, lr}
   b6e62:	4604      	mov	r4, r0
   b6e64:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b6e66:	f7ff ff15 	bl	b6c94 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	9901      	ldr	r1, [sp, #4]
   b6e6e:	f7ff ff87 	bl	b6d80 <_ZN8particle7BleUuid9constructEPKc>
}
   b6e72:	4620      	mov	r0, r4
   b6e74:	b002      	add	sp, #8
   b6e76:	bd10      	pop	{r4, pc}

000b6e78 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6e78:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6e7e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6e80:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6e82:	8043      	strh	r3, [r0, #2]
   b6e84:	220e      	movs	r2, #14
   b6e86:	4629      	mov	r1, r5
   b6e88:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6e8a:	7105      	strb	r5, [r0, #4]
   b6e8c:	3006      	adds	r0, #6
   b6e8e:	f003 fa1e 	bl	ba2ce <memset>
   b6e92:	f104 0014 	add.w	r0, r4, #20
   b6e96:	f7ff fefd 	bl	b6c94 <_ZN8particle7BleUuidC1Ev>
   b6e9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6e9e:	f7ff fef9 	bl	b6c94 <_ZN8particle7BleUuidC1Ev>
   b6ea2:	4904      	ldr	r1, [pc, #16]	; (b6eb4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6ea4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6ea8:	f7ff fcb7 	bl	b681a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6eac:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6eae:	4620      	mov	r0, r4
   b6eb0:	bd38      	pop	{r3, r4, r5, pc}
   b6eb2:	bf00      	nop
   b6eb4:	000bcc9b 	.word	0x000bcc9b

000b6eb8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6eb8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6eba:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6ebe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6ec2:	4293      	cmp	r3, r2
   b6ec4:	4618      	mov	r0, r3
   b6ec6:	d006      	beq.n	b6ed6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6ec8:	6804      	ldr	r4, [r0, #0]
   b6eca:	8824      	ldrh	r4, [r4, #0]
   b6ecc:	428c      	cmp	r4, r1
   b6ece:	f103 0308 	add.w	r3, r3, #8
   b6ed2:	d1f6      	bne.n	b6ec2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6ed4:	bd10      	pop	{r4, pc}
        return nullptr;
   b6ed6:	2000      	movs	r0, #0
   b6ed8:	e7fc      	b.n	b6ed4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6edc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6ede:	4606      	mov	r6, r0
   b6ee0:	b085      	sub	sp, #20
   b6ee2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6ee4:	460d      	mov	r5, r1
   b6ee6:	2900      	cmp	r1, #0
   b6ee8:	d050      	beq.n	b6f8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6eea:	2a00      	cmp	r2, #0
   b6eec:	d04e      	beq.n	b6f8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6eee:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6ef0:	7823      	ldrb	r3, [r4, #0]
   b6ef2:	2af4      	cmp	r2, #244	; 0xf4
   b6ef4:	bf28      	it	cs
   b6ef6:	22f4      	movcs	r2, #244	; 0xf4
   b6ef8:	b343      	cbz	r3, b6f4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6efa:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6efc:	0798      	lsls	r0, r3, #30
   b6efe:	d509      	bpl.n	b6f14 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6f00:	89a0      	ldrh	r0, [r4, #12]
   b6f02:	9203      	str	r2, [sp, #12]
   b6f04:	2300      	movs	r3, #0
   b6f06:	f7ff f893 	bl	b6030 <hal_ble_gatt_server_set_characteristic_value>
   b6f0a:	2800      	cmp	r0, #0
   b6f0c:	9a03      	ldr	r2, [sp, #12]
   b6f0e:	da03      	bge.n	b6f18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6f10:	b005      	add	sp, #20
   b6f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6f14:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6f18:	6834      	ldr	r4, [r6, #0]
   b6f1a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6f1c:	06d9      	lsls	r1, r3, #27
   b6f1e:	d509      	bpl.n	b6f34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6f20:	2f01      	cmp	r7, #1
   b6f22:	d007      	beq.n	b6f34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f24:	89a0      	ldrh	r0, [r4, #12]
   b6f26:	2300      	movs	r3, #0
   b6f28:	4629      	mov	r1, r5
}
   b6f2a:	b005      	add	sp, #20
   b6f2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f30:	f7ff b8b0 	b.w	b6094 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6f34:	069b      	lsls	r3, r3, #26
   b6f36:	d5eb      	bpl.n	b6f10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6f38:	2f02      	cmp	r7, #2
   b6f3a:	d0e9      	beq.n	b6f10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f3c:	89a0      	ldrh	r0, [r4, #12]
   b6f3e:	2300      	movs	r3, #0
   b6f40:	4629      	mov	r1, r5
}
   b6f42:	b005      	add	sp, #20
   b6f44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f48:	f7ff b8ae 	b.w	b60a8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6f4c:	8860      	ldrh	r0, [r4, #2]
   b6f4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6f52:	4288      	cmp	r0, r1
   b6f54:	d01c      	beq.n	b6f90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6f56:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6f58:	074e      	lsls	r6, r1, #29
   b6f5a:	d501      	bpl.n	b6f60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6f5c:	2f01      	cmp	r7, #1
   b6f5e:	d104      	bne.n	b6f6a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6f60:	070b      	lsls	r3, r1, #28
   b6f62:	d409      	bmi.n	b6f78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6f64:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6f68:	e7d2      	b.n	b6f10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f6a:	89a1      	ldrh	r1, [r4, #12]
   b6f6c:	9300      	str	r3, [sp, #0]
   b6f6e:	4613      	mov	r3, r2
   b6f70:	462a      	mov	r2, r5
   b6f72:	f7ff f871 	bl	b6058 <hal_ble_gatt_client_write_without_response>
   b6f76:	e7cb      	b.n	b6f10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6f78:	2f02      	cmp	r7, #2
   b6f7a:	d0f3      	beq.n	b6f64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6f7c:	2300      	movs	r3, #0
   b6f7e:	89a1      	ldrh	r1, [r4, #12]
   b6f80:	9300      	str	r3, [sp, #0]
   b6f82:	4613      	mov	r3, r2
   b6f84:	462a      	mov	r2, r5
   b6f86:	f7ff f85d 	bl	b6044 <hal_ble_gatt_client_write_with_response>
   b6f8a:	e7c1      	b.n	b6f10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6f8c:	4802      	ldr	r0, [pc, #8]	; (b6f98 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6f8e:	e7bf      	b.n	b6f10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6f90:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6f94:	e7bc      	b.n	b6f10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6f96:	bf00      	nop
   b6f98:	fffffef2 	.word	0xfffffef2

000b6f9c <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   b6f9c:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   b6f9e:	688a      	ldr	r2, [r1, #8]
   b6fa0:	6809      	ldr	r1, [r1, #0]
   b6fa2:	f7ff bf9b 	b.w	b6edc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6fa6 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6fa8:	460c      	mov	r4, r1
   b6faa:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6fac:	21f4      	movs	r1, #244	; 0xf4
   b6fae:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6fb0:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6fb2:	f003 fa1e 	bl	ba3f2 <strnlen>
   b6fb6:	9b01      	ldr	r3, [sp, #4]
   b6fb8:	4602      	mov	r2, r0
   b6fba:	4621      	mov	r1, r4
   b6fbc:	4628      	mov	r0, r5
}
   b6fbe:	b003      	add	sp, #12
   b6fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6fc4:	f7ff bf8a 	b.w	b6edc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000b6fc8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6fcc:	2600      	movs	r6, #0
   b6fce:	6006      	str	r6, [r0, #0]
   b6fd0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6fd2:	2028      	movs	r0, #40	; 0x28
   b6fd4:	460c      	mov	r4, r1
   b6fd6:	f7fd f85e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6fda:	1e05      	subs	r5, r0, #0
   b6fdc:	f105 080c 	add.w	r8, r5, #12
   b6fe0:	d00f      	beq.n	b7002 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6fe2:	2301      	movs	r3, #1
   b6fe4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6fe8:	4b08      	ldr	r3, [pc, #32]	; (b700c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b6fea:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b6fec:	4640      	mov	r0, r8
   b6fee:	f7ff fe51 	bl	b6c94 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6ff4:	622e      	str	r6, [r5, #32]
   b6ff6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b6ffa:	4646      	mov	r6, r8
   b6ffc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6ffe:	6823      	ldr	r3, [r4, #0]
   b7000:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b7002:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7006:	4638      	mov	r0, r7
   b7008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b700c:	000bce6c 	.word	0x000bce6c

000b7010 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7010:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7012:	2500      	movs	r5, #0
   b7014:	6005      	str	r5, [r0, #0]
   b7016:	4606      	mov	r6, r0
   b7018:	2030      	movs	r0, #48	; 0x30
   b701a:	f7fd f83c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b701e:	4604      	mov	r4, r0
   b7020:	b188      	cbz	r0, b7046 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7022:	2301      	movs	r3, #1
   b7024:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7028:	4b09      	ldr	r3, [pc, #36]	; (b7050 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b702a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b702c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7030:	8183      	strh	r3, [r0, #12]
   b7032:	300e      	adds	r0, #14
   b7034:	f7ff fe23 	bl	b6c7e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7038:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b703c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7040:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7044:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7046:	6074      	str	r4, [r6, #4]
   b7048:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b704a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b704c:	4630      	mov	r0, r6
   b704e:	bd70      	pop	{r4, r5, r6, pc}
   b7050:	000bce88 	.word	0x000bce88

000b7054 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7054:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7056:	460d      	mov	r5, r1
   b7058:	4604      	mov	r4, r0
    WiringBleLock lk;
   b705a:	a801      	add	r0, sp, #4
   b705c:	f7ff fdd4 	bl	b6c08 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7060:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7062:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7066:	6023      	str	r3, [r4, #0]
   b7068:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b706c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b706e:	a801      	add	r0, sp, #4
   b7070:	f7ff fdd8 	bl	b6c24 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7074:	4620      	mov	r0, r4
   b7076:	b003      	add	sp, #12
   b7078:	bd30      	pop	{r4, r5, pc}

000b707a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b707a:	b530      	push	{r4, r5, lr}
   b707c:	4605      	mov	r5, r0
   b707e:	b087      	sub	sp, #28
   b7080:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7082:	a801      	add	r0, sp, #4
   b7084:	f7ff fdc0 	bl	b6c08 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7088:	682a      	ldr	r2, [r5, #0]
   b708a:	6823      	ldr	r3, [r4, #0]
   b708c:	8812      	ldrh	r2, [r2, #0]
   b708e:	881b      	ldrh	r3, [r3, #0]
   b7090:	429a      	cmp	r2, r3
   b7092:	d10d      	bne.n	b70b0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7094:	4629      	mov	r1, r5
   b7096:	a802      	add	r0, sp, #8
   b7098:	f7ff ffdc 	bl	b7054 <_ZNK8particle13BlePeerDevice7addressEv>
   b709c:	4621      	mov	r1, r4
   b709e:	a804      	add	r0, sp, #16
   b70a0:	f7ff ffd8 	bl	b7054 <_ZNK8particle13BlePeerDevice7addressEv>
   b70a4:	a904      	add	r1, sp, #16
   b70a6:	a802      	add	r0, sp, #8
   b70a8:	f7ff fdd5 	bl	b6c56 <_ZNK8particle10BleAddresseqERKS0_>
   b70ac:	4604      	mov	r4, r0
   b70ae:	b900      	cbnz	r0, b70b2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b70b0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b70b2:	a801      	add	r0, sp, #4
   b70b4:	f7ff fdb6 	bl	b6c24 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b70b8:	4620      	mov	r0, r4
   b70ba:	b007      	add	sp, #28
   b70bc:	bd30      	pop	{r4, r5, pc}
	...

000b70c0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b70c0:	b510      	push	{r4, lr}
   b70c2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b70c4:	2064      	movs	r0, #100	; 0x64
   b70c6:	f7fc ffe6 	bl	b4096 <_Znwj>
   b70ca:	b168      	cbz	r0, b70e8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b70cc:	2300      	movs	r3, #0
   b70ce:	e9c0 3300 	strd	r3, r3, [r0]
   b70d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b70d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b70da:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b70de:	6203      	str	r3, [r0, #32]
   b70e0:	62c3      	str	r3, [r0, #44]	; 0x2c
   b70e2:	63c3      	str	r3, [r0, #60]	; 0x3c
   b70e4:	64c3      	str	r3, [r0, #76]	; 0x4c
   b70e6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b70e8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b70ea:	b920      	cbnz	r0, b70f6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b70ec:	4a0a      	ldr	r2, [pc, #40]	; (b7118 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b70ee:	490b      	ldr	r1, [pc, #44]	; (b711c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b70f0:	200a      	movs	r0, #10
   b70f2:	f7ff f93b 	bl	b636c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b70f6:	2000      	movs	r0, #0
   b70f8:	f7fe ff5e 	bl	b5fb8 <hal_ble_stack_init>
   b70fc:	b120      	cbz	r0, b7108 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b70fe:	4a06      	ldr	r2, [pc, #24]	; (b7118 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7100:	4907      	ldr	r1, [pc, #28]	; (b7120 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7102:	200a      	movs	r0, #10
   b7104:	f7ff f932 	bl	b636c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7108:	6821      	ldr	r1, [r4, #0]
   b710a:	4806      	ldr	r0, [pc, #24]	; (b7124 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b710c:	2200      	movs	r2, #0
   b710e:	f7fe ffb7 	bl	b6080 <hal_ble_set_callback_on_periph_link_events>
}
   b7112:	4620      	mov	r0, r4
   b7114:	bd10      	pop	{r4, pc}
   b7116:	bf00      	nop
   b7118:	000b5f69 	.word	0x000b5f69
   b711c:	000bccfc 	.word	0x000bccfc
   b7120:	000bcd3a 	.word	0x000bcd3a
   b7124:	000b76f5 	.word	0x000b76f5

000b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7128:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b712a:	4c0a      	ldr	r4, [pc, #40]	; (b7154 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b712c:	7823      	ldrb	r3, [r4, #0]
   b712e:	f3bf 8f5b 	dmb	ish
   b7132:	07db      	lsls	r3, r3, #31
   b7134:	d40c      	bmi.n	b7150 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7136:	4620      	mov	r0, r4
   b7138:	f7fc ffb3 	bl	b40a2 <__cxa_guard_acquire>
   b713c:	b140      	cbz	r0, b7150 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b713e:	4806      	ldr	r0, [pc, #24]	; (b7158 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7140:	f7ff ffbe 	bl	b70c0 <_ZN8particle14BleLocalDeviceC1Ev>
   b7144:	4620      	mov	r0, r4
   b7146:	f7fc ffb1 	bl	b40ac <__cxa_guard_release>
   b714a:	4804      	ldr	r0, [pc, #16]	; (b715c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b714c:	f003 f87a 	bl	ba244 <atexit>
    return instance;
}
   b7150:	4801      	ldr	r0, [pc, #4]	; (b7158 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7152:	bd10      	pop	{r4, pc}
   b7154:	2003e688 	.word	0x2003e688
   b7158:	2003e694 	.word	0x2003e694
   b715c:	000b739d 	.word	0x000b739d

000b7160 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7160:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7162:	6803      	ldr	r3, [r0, #0]
   b7164:	3b09      	subs	r3, #9
   b7166:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7168:	b08d      	sub	sp, #52	; 0x34
   b716a:	4604      	mov	r4, r0
   b716c:	460d      	mov	r5, r1
    switch (event->type) {
   b716e:	d811      	bhi.n	b7194 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7170:	f7ff ffda 	bl	b7128 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7174:	88a1      	ldrh	r1, [r4, #4]
   b7176:	6800      	ldr	r0, [r0, #0]
   b7178:	f7ff fe9e 	bl	b6eb8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b717c:	4603      	mov	r3, r0
   b717e:	b958      	cbnz	r0, b7198 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7180:	2220      	movs	r2, #32
   b7182:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7186:	4a0b      	ldr	r2, [pc, #44]	; (b71b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7188:	9200      	str	r2, [sp, #0]
   b718a:	490b      	ldr	r1, [pc, #44]	; (b71b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b718c:	aa04      	add	r2, sp, #16
   b718e:	2032      	movs	r0, #50	; 0x32
   b7190:	f7ff f8f4 	bl	b637c <log_message>
}
   b7194:	b00d      	add	sp, #52	; 0x34
   b7196:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7198:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b719a:	2a00      	cmp	r2, #0
   b719c:	d0fa      	beq.n	b7194 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b719e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b71a2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b71a6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b71aa:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b71ac:	aa04      	add	r2, sp, #16
   b71ae:	a903      	add	r1, sp, #12
   b71b0:	47a0      	blx	r4
}
   b71b2:	e7ef      	b.n	b7194 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b71b4:	000bcd7c 	.word	0x000bcd7c
   b71b8:	000bcd13 	.word	0x000bcd13

000b71bc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b71bc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b71be:	2000      	movs	r0, #0
   b71c0:	f7fe fefa 	bl	b5fb8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b71c4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b71c8:	bd08      	pop	{r3, pc}

000b71ca <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
    int8_t tx = BLE_TX_POWER_INVALID;
    hal_ble_gap_get_tx_power(&tx, nullptr);
    return tx;
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   b71ca:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   b71cc:	2100      	movs	r1, #0
   b71ce:	f7fe befb 	b.w	b5fc8 <hal_ble_select_antenna>

000b71d2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b71d2:	b919      	cbnz	r1, b71dc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b71d4:	460a      	mov	r2, r1
   b71d6:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b71d8:	f7fe befe 	b.w	b5fd8 <hal_ble_gap_set_advertising_data>
   b71dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b71e0:	2200      	movs	r2, #0
   b71e2:	e7f9      	b.n	b71d8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b71e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b71e4:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b71e6:	1e14      	subs	r4, r2, #0
   b71e8:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b71ea:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b71ec:	db02      	blt.n	b71f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b71ee:	1862      	adds	r2, r4, r1
   b71f0:	429a      	cmp	r2, r3
   b71f2:	dd00      	ble.n	b71f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b71f4:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b71f6:	682a      	ldr	r2, [r5, #0]
   b71f8:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b71fa:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b71fc:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b71fe:	1a52      	subs	r2, r2, r1
   b7200:	f003 f84b 	bl	ba29a <memmove>
    size_ -= n;
   b7204:	686a      	ldr	r2, [r5, #4]
   b7206:	1b12      	subs	r2, r2, r4
   b7208:	606a      	str	r2, [r5, #4]
}
   b720a:	bd38      	pop	{r3, r4, r5, pc}

000b720c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b720c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b720e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7210:	4604      	mov	r4, r0
   b7212:	460d      	mov	r5, r1
   b7214:	ab01      	add	r3, sp, #4
   b7216:	e9d0 0100 	ldrd	r0, r1, [r0]
   b721a:	f7ff fc4f 	bl	b6abc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b721e:	4602      	mov	r2, r0
   b7220:	b138      	cbz	r0, b7232 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7222:	9901      	ldr	r1, [sp, #4]
   b7224:	4620      	mov	r0, r4
   b7226:	f7ff ffdd 	bl	b71e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b722a:	4629      	mov	r1, r5
   b722c:	4620      	mov	r0, r4
   b722e:	f7ff ffed 	bl	b720c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7232:	b003      	add	sp, #12
   b7234:	bd30      	pop	{r4, r5, pc}

000b7236 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7236:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7238:	460c      	mov	r4, r1
   b723a:	b929      	cbnz	r1, b7248 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b723c:	460a      	mov	r2, r1
   b723e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7244:	f7fe bed0 	b.w	b5fe8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7248:	2101      	movs	r1, #1
   b724a:	4620      	mov	r0, r4
   b724c:	f7ff ffde 	bl	b720c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7250:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7254:	2200      	movs	r2, #0
   b7256:	e7f3      	b.n	b7240 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7258 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7258:	b538      	push	{r3, r4, r5, lr}
   b725a:	4604      	mov	r4, r0
   b725c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b725e:	f7ff ffb8 	bl	b71d2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7262:	2800      	cmp	r0, #0
   b7264:	db0a      	blt.n	b727c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7266:	4629      	mov	r1, r5
   b7268:	4620      	mov	r0, r4
   b726a:	f7ff ffe4 	bl	b7236 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b726e:	2800      	cmp	r0, #0
   b7270:	db04      	blt.n	b727c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7276:	2000      	movs	r0, #0
   b7278:	f7fe bebe 	b.w	b5ff8 <hal_ble_gap_start_advertising>
}
   b727c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7280 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7280:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7282:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7284:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7286:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7288:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b728a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b728c:	f7fc ff03 	bl	b4096 <_Znwj>
   b7290:	b118      	cbz	r0, b729a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7292:	682b      	ldr	r3, [r5, #0]
   b7294:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7296:	686b      	ldr	r3, [r5, #4]
   b7298:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b729a:	4b03      	ldr	r3, [pc, #12]	; (b72a8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b729c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b729e:	4b03      	ldr	r3, [pc, #12]	; (b72ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72a0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b72a2:	60a3      	str	r3, [r4, #8]
      }
   b72a4:	4620      	mov	r0, r4
   b72a6:	bd38      	pop	{r3, r4, r5, pc}
   b72a8:	000b6b09 	.word	0x000b6b09
   b72ac:	000b6b61 	.word	0x000b6b61

000b72b0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b72b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b72b2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b72b4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b72b6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72b8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b72ba:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72bc:	f7fc feeb 	bl	b4096 <_Znwj>
   b72c0:	b118      	cbz	r0, b72ca <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   b72c2:	682b      	ldr	r3, [r5, #0]
   b72c4:	6003      	str	r3, [r0, #0]
   b72c6:	686b      	ldr	r3, [r5, #4]
   b72c8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b72ca:	4b03      	ldr	r3, [pc, #12]	; (b72d8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b72cc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b72ce:	4b03      	ldr	r3, [pc, #12]	; (b72dc <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b72d0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b72d2:	60a3      	str	r3, [r4, #8]
      }
   b72d4:	4620      	mov	r0, r4
   b72d6:	bd38      	pop	{r3, r4, r5, pc}
   b72d8:	000b6afd 	.word	0x000b6afd
   b72dc:	000b6b21 	.word	0x000b6b21

000b72e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b72e0:	680b      	ldr	r3, [r1, #0]
   b72e2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b72e4:	b113      	cbz	r3, b72ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b72e6:	685a      	ldr	r2, [r3, #4]
   b72e8:	3201      	adds	r2, #1
   b72ea:	605a      	str	r2, [r3, #4]
      }
   b72ec:	4770      	bx	lr

000b72ee <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b72ee:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b72f0:	f851 3b04 	ldr.w	r3, [r1], #4
   b72f4:	4604      	mov	r4, r0
   b72f6:	f840 3b04 	str.w	r3, [r0], #4
   b72fa:	f7ff fff1 	bl	b72e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b72fe:	6823      	ldr	r3, [r4, #0]
   b7300:	b90b      	cbnz	r3, b7306 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b7302:	f7ff fbf1 	bl	b6ae8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7306:	4620      	mov	r0, r4
   b7308:	bd10      	pop	{r4, pc}

000b730a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b730a:	b510      	push	{r4, lr}
   b730c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7310:	4604      	mov	r4, r0
   b7312:	f840 3b04 	str.w	r3, [r0], #4
   b7316:	f7ff ffe3 	bl	b72e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b731a:	4620      	mov	r0, r4
   b731c:	bd10      	pop	{r4, pc}

000b731e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b731e:	b510      	push	{r4, lr}
   b7320:	f851 3b04 	ldr.w	r3, [r1], #4
   b7324:	4604      	mov	r4, r0
   b7326:	f840 3b04 	str.w	r3, [r0], #4
   b732a:	f7ff ffd9 	bl	b72e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b732e:	4620      	mov	r0, r4
   b7330:	bd10      	pop	{r4, pc}

000b7332 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7332:	b510      	push	{r4, lr}
   b7334:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7336:	3004      	adds	r0, #4
   b7338:	f7fd fd00 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b733c:	4620      	mov	r0, r4
   b733e:	bd10      	pop	{r4, pc}

000b7340 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7340:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7342:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7346:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7348:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b734c:	42ae      	cmp	r6, r5
   b734e:	d004      	beq.n	b735a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7350:	1d28      	adds	r0, r5, #4
   b7352:	f7fd fcf3 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7356:	3508      	adds	r5, #8
   b7358:	e7f8      	b.n	b734c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b735a:	6820      	ldr	r0, [r4, #0]
   b735c:	f7ff f902 	bl	b6564 <free>
}
   b7360:	4620      	mov	r0, r4
   b7362:	bd70      	pop	{r4, r5, r6, pc}

000b7364 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7364:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7366:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b736a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b736c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7370:	42ae      	cmp	r6, r5
   b7372:	d004      	beq.n	b737e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7374:	1d28      	adds	r0, r5, #4
   b7376:	f7fd fce1 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b737a:	3508      	adds	r5, #8
   b737c:	e7f8      	b.n	b7370 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b737e:	6820      	ldr	r0, [r4, #0]
   b7380:	f7ff f8f0 	bl	b6564 <free>
}
   b7384:	4620      	mov	r0, r4
   b7386:	bd70      	pop	{r4, r5, r6, pc}

000b7388 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7388:	b510      	push	{r4, lr}
   b738a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b738c:	3024      	adds	r0, #36	; 0x24
   b738e:	f7ff ffe9 	bl	b7364 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7392:	f104 0018 	add.w	r0, r4, #24
   b7396:	f7ff ffd3 	bl	b7340 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b739a:	bd10      	pop	{r4, pc}

000b739c <__tcf_0>:
    static BleLocalDevice instance;
   b739c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b739e:	4b17      	ldr	r3, [pc, #92]	; (b73fc <__tcf_0+0x60>)
   b73a0:	681c      	ldr	r4, [r3, #0]
   b73a2:	b354      	cbz	r4, b73fa <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b73a4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b73a8:	f7fd f820 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b73ac:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b73b0:	f7fd f81c 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b73b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b73b8:	f7fd f818 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b73bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b73c0:	f7fd f814 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b73c4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b73c8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b73cc:	42ae      	cmp	r6, r5
   b73ce:	d004      	beq.n	b73da <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b73d0:	1d28      	adds	r0, r5, #4
   b73d2:	f7fd fcb3 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b73d6:	3508      	adds	r5, #8
   b73d8:	e7f8      	b.n	b73cc <__tcf_0+0x30>
    ::free(ptr);
   b73da:	69a0      	ldr	r0, [r4, #24]
   b73dc:	f7ff f8c2 	bl	b6564 <free>
    ~BleLocalDeviceImpl() = default;
   b73e0:	f104 000c 	add.w	r0, r4, #12
   b73e4:	f7ff ffbe 	bl	b7364 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b73e8:	4620      	mov	r0, r4
   b73ea:	f7ff ffa9 	bl	b7340 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b73ee:	4620      	mov	r0, r4
   b73f0:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b73f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b73f6:	f7fc be52 	b.w	b409e <_ZdlPvj>
   b73fa:	bd70      	pop	{r4, r5, r6, pc}
   b73fc:	2003e694 	.word	0x2003e694

000b7400 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b7400:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b7402:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7404:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7408:	e9c1 3300 	strd	r3, r3, [r1]
   b740c:	6803      	ldr	r3, [r0, #0]
   b740e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7410:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7412:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7414:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7416:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7418:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b741a:	f7fd fc8f 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b741e:	b002      	add	sp, #8
   b7420:	bd10      	pop	{r4, pc}

000b7422 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7422:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7424:	b510      	push	{r4, lr}
      if (_M_empty())
   b7426:	b90a      	cbnz	r2, b742c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7428:	f002 f92e 	bl	b9688 <_ZSt25__throw_bad_function_callv>
    }
   b742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7430:	68c3      	ldr	r3, [r0, #12]
   b7432:	4718      	bx	r3

000b7434 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7434:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7436:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7438:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b743a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b743c:	dd03      	ble.n	b7446 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b743e:	f7ff f899 	bl	b6574 <realloc>
            if (!d) {
   b7442:	b918      	cbnz	r0, b744c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7444:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7446:	f7ff f88d 	bl	b6564 <free>
        T* d = nullptr;
   b744a:	2000      	movs	r0, #0
        data_ = d;
   b744c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b744e:	60a5      	str	r5, [r4, #8]
        return true;
   b7450:	2001      	movs	r0, #1
   b7452:	e7f7      	b.n	b7444 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7454 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7454:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7456:	6883      	ldr	r3, [r0, #8]
   b7458:	428b      	cmp	r3, r1
   b745a:	da02      	bge.n	b7462 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b745c:	f7ff ffea 	bl	b7434 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7460:	bd08      	pop	{r3, pc}
    return true;
   b7462:	2001      	movs	r0, #1
   b7464:	e7fc      	b.n	b7460 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7466 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b746a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b746c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b746e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7470:	4419      	add	r1, r3
   b7472:	6883      	ldr	r3, [r0, #8]
   b7474:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7476:	4604      	mov	r4, r0
   b7478:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b747a:	dc12      	bgt.n	b74a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b747c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b747e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7480:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7482:	1bd2      	subs	r2, r2, r7
   b7484:	4631      	mov	r1, r6
   b7486:	1970      	adds	r0, r6, r5
   b7488:	f002 ff07 	bl	ba29a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b748c:	462a      	mov	r2, r5
   b748e:	4641      	mov	r1, r8
   b7490:	4630      	mov	r0, r6
   b7492:	f002 fef4 	bl	ba27e <memcpy>
    size_ += n;
   b7496:	6863      	ldr	r3, [r4, #4]
   b7498:	442b      	add	r3, r5
   b749a:	6063      	str	r3, [r4, #4]
    return true;
   b749c:	2001      	movs	r0, #1
}
   b749e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b74a2:	f7ff ffc7 	bl	b7434 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b74a6:	2800      	cmp	r0, #0
   b74a8:	d1e8      	bne.n	b747c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b74aa:	e7f8      	b.n	b749e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b74ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b74ae:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74b0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b74b4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b74b6:	4604      	mov	r4, r0
   b74b8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74ba:	da0b      	bge.n	b74d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b74bc:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b74be:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b74c0:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b74c2:	1b52      	subs	r2, r2, r5
   b74c4:	1c48      	adds	r0, r1, #1
   b74c6:	f002 fee8 	bl	ba29a <memmove>
    new(p) T(std::move(value));
   b74ca:	557e      	strb	r6, [r7, r5]
    ++size_;
   b74cc:	6863      	ldr	r3, [r4, #4]
   b74ce:	3301      	adds	r3, #1
   b74d0:	6063      	str	r3, [r4, #4]
}
   b74d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b74d4:	3101      	adds	r1, #1
   b74d6:	f7ff ffad 	bl	b7434 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b74da:	2800      	cmp	r0, #0
   b74dc:	d1ee      	bne.n	b74bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b74de:	e7f8      	b.n	b74d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b74e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b74e0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b74e2:	6841      	ldr	r1, [r0, #4]
   b74e4:	f7ff bfe2 	b.w	b74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b74e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b74e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b74ec:	4604      	mov	r4, r0
   b74ee:	461d      	mov	r5, r3
   b74f0:	460f      	mov	r7, r1
   b74f2:	ab01      	add	r3, sp, #4
   b74f4:	4690      	mov	r8, r2
   b74f6:	460a      	mov	r2, r1
   b74f8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b74fc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7500:	f7ff fadc 	bl	b6abc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7504:	1cae      	adds	r6, r5, #2
   b7506:	6863      	ldr	r3, [r4, #4]
   b7508:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b750a:	f1b9 0f00 	cmp.w	r9, #0
   b750e:	d126      	bne.n	b755e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7510:	b328      	cbz	r0, b755e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7512:	4433      	add	r3, r6
   b7514:	1a1b      	subs	r3, r3, r0
   b7516:	2bff      	cmp	r3, #255	; 0xff
   b7518:	d809      	bhi.n	b752e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b751a:	9901      	ldr	r1, [sp, #4]
   b751c:	4620      	mov	r0, r4
   b751e:	f7ff fe61 	bl	b71e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7522:	6861      	ldr	r1, [r4, #4]
   b7524:	4620      	mov	r0, r4
   b7526:	4431      	add	r1, r6
   b7528:	f7ff ff94 	bl	b7454 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b752c:	b918      	cbnz	r0, b7536 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b752e:	6860      	ldr	r0, [r4, #4]
}
   b7530:	b003      	add	sp, #12
   b7532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7536:	1c6a      	adds	r2, r5, #1
   b7538:	9901      	ldr	r1, [sp, #4]
   b753a:	b2d2      	uxtb	r2, r2
   b753c:	4620      	mov	r0, r4
   b753e:	f7ff ffb5 	bl	b74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7542:	9901      	ldr	r1, [sp, #4]
   b7544:	463a      	mov	r2, r7
   b7546:	3101      	adds	r1, #1
   b7548:	4620      	mov	r0, r4
   b754a:	f7ff ffaf 	bl	b74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b754e:	9901      	ldr	r1, [sp, #4]
   b7550:	462b      	mov	r3, r5
   b7552:	4642      	mov	r2, r8
   b7554:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7556:	4620      	mov	r0, r4
   b7558:	f7ff ff85 	bl	b7466 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b755c:	e7e7      	b.n	b752e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b755e:	18f1      	adds	r1, r6, r3
   b7560:	29ff      	cmp	r1, #255	; 0xff
   b7562:	d8e4      	bhi.n	b752e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7564:	4620      	mov	r0, r4
   b7566:	f7ff ff75 	bl	b7454 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b756a:	2800      	cmp	r0, #0
   b756c:	d0df      	beq.n	b752e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b756e:	1c69      	adds	r1, r5, #1
   b7570:	b2c9      	uxtb	r1, r1
   b7572:	4620      	mov	r0, r4
   b7574:	f7ff ffb4 	bl	b74e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7578:	4639      	mov	r1, r7
   b757a:	4620      	mov	r0, r4
   b757c:	f7ff ffb0 	bl	b74e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7580:	6861      	ldr	r1, [r4, #4]
   b7582:	462b      	mov	r3, r5
   b7584:	4642      	mov	r2, r8
   b7586:	e7e6      	b.n	b7556 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7588 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7588:	b430      	push	{r4, r5}
   b758a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b758e:	b11a      	cbz	r2, b7598 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7590:	9502      	str	r5, [sp, #8]
}
   b7592:	bc30      	pop	{r4, r5}
   b7594:	f7ff bfa8 	b.w	b74e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7598:	6840      	ldr	r0, [r0, #4]
}
   b759a:	bc30      	pop	{r4, r5}
   b759c:	4770      	bx	lr

000b759e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b759e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b75a0:	2300      	movs	r3, #0
   b75a2:	e9c0 3300 	strd	r3, r3, [r0]
   b75a6:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b75a8:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b75aa:	9300      	str	r3, [sp, #0]
   b75ac:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b75ae:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b75b2:	4619      	mov	r1, r3
   b75b4:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b75b8:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b75ba:	f7ff ffe5 	bl	b7588 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b75be:	4620      	mov	r0, r4
   b75c0:	b004      	add	sp, #16
   b75c2:	bd10      	pop	{r4, pc}

000b75c4 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   b75c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b75c6:	460a      	mov	r2, r1
   b75c8:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   b75ca:	2114      	movs	r1, #20
   b75cc:	4610      	mov	r0, r2
   b75ce:	9203      	str	r2, [sp, #12]
   b75d0:	f002 ff0f 	bl	ba3f2 <strnlen>
   b75d4:	2100      	movs	r1, #0
   b75d6:	4603      	mov	r3, r0
   b75d8:	9100      	str	r1, [sp, #0]
   b75da:	9a03      	ldr	r2, [sp, #12]
   b75dc:	2109      	movs	r1, #9
   b75de:	4620      	mov	r0, r4
   b75e0:	f7ff ffd2 	bl	b7588 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b75e4:	b004      	add	sp, #16
   b75e6:	bd10      	pop	{r4, pc}

000b75e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b75e8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b75ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75ec:	4604      	mov	r4, r0
   b75ee:	460d      	mov	r5, r1
   b75f0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b75f2:	d914      	bls.n	b761e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b75f4:	4290      	cmp	r0, r2
   b75f6:	d213      	bcs.n	b7620 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b75f8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b75fc:	1a75      	subs	r5, r6, r1
   b75fe:	f1a1 0708 	sub.w	r7, r1, #8
   b7602:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7604:	42b7      	cmp	r7, r6
   b7606:	d018      	beq.n	b763a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7608:	b11c      	cbz	r4, b7612 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b760a:	4631      	mov	r1, r6
   b760c:	4620      	mov	r0, r4
   b760e:	f7ff fe86 	bl	b731e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7612:	1d30      	adds	r0, r6, #4
   b7614:	f7fd fb92 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7618:	3e08      	subs	r6, #8
   b761a:	3c08      	subs	r4, #8
   b761c:	e7f2      	b.n	b7604 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b761e:	d00c      	beq.n	b763a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7620:	42b5      	cmp	r5, r6
   b7622:	d00a      	beq.n	b763a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7624:	b11c      	cbz	r4, b762e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7626:	4629      	mov	r1, r5
   b7628:	4620      	mov	r0, r4
   b762a:	f7ff fe78 	bl	b731e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b762e:	1d28      	adds	r0, r5, #4
   b7630:	f7fd fb84 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7634:	3508      	adds	r5, #8
   b7636:	3408      	adds	r4, #8
   b7638:	e7f2      	b.n	b7620 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b763a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b763c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b763c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b763e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7640:	6846      	ldr	r6, [r0, #4]
   b7642:	4668      	mov	r0, sp
   b7644:	f7ff fe6b 	bl	b731e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7648:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b764c:	429f      	cmp	r7, r3
   b764e:	db12      	blt.n	b7676 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7650:	3701      	adds	r7, #1
        if (n > 0) {
   b7652:	2f00      	cmp	r7, #0
   b7654:	dd29      	ble.n	b76aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7656:	00f8      	lsls	r0, r7, #3
   b7658:	f7fe ff7c 	bl	b6554 <malloc>
            if (!d) {
   b765c:	4605      	mov	r5, r0
   b765e:	b1f0      	cbz	r0, b769e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7660:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7664:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7668:	f7ff ffbe 	bl	b75e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b766c:	6820      	ldr	r0, [r4, #0]
   b766e:	f7fe ff79 	bl	b6564 <free>
        data_ = d;
   b7672:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7674:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7676:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7678:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b767a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b767e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7682:	4631      	mov	r1, r6
   b7684:	f106 0008 	add.w	r0, r6, #8
   b7688:	f7ff ffae 	bl	b75e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b768c:	b11e      	cbz	r6, b7696 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b768e:	4669      	mov	r1, sp
   b7690:	4630      	mov	r0, r6
   b7692:	f7ff fe44 	bl	b731e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7696:	6863      	ldr	r3, [r4, #4]
   b7698:	3301      	adds	r3, #1
   b769a:	6063      	str	r3, [r4, #4]
    return true;
   b769c:	2501      	movs	r5, #1
   b769e:	a801      	add	r0, sp, #4
   b76a0:	f7fd fb4c 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b76a4:	4628      	mov	r0, r5
   b76a6:	b003      	add	sp, #12
   b76a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b76aa:	2500      	movs	r5, #0
   b76ac:	e7de      	b.n	b766c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b76ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b76ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b76b0:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b76b4:	4605      	mov	r5, r0
   b76b6:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b76b8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b76bc:	42a6      	cmp	r6, r4
   b76be:	d005      	beq.n	b76cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b76c0:	4639      	mov	r1, r7
   b76c2:	4620      	mov	r0, r4
   b76c4:	f7ff fcd9 	bl	b707a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b76c8:	b108      	cbz	r0, b76ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b76ca:	b914      	cbnz	r4, b76d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b76cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b76ce:	3408      	adds	r4, #8
   b76d0:	e7f4      	b.n	b76bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b76d2:	1d20      	adds	r0, r4, #4
   b76d4:	f7fd fb32 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b76d8:	e9d5 3200 	ldrd	r3, r2, [r5]
   b76dc:	f104 0108 	add.w	r1, r4, #8
   b76e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b76e4:	4620      	mov	r0, r4
   b76e6:	f7ff ff7f 	bl	b75e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b76ea:	686b      	ldr	r3, [r5, #4]
   b76ec:	3b01      	subs	r3, #1
   b76ee:	606b      	str	r3, [r5, #4]
    return true;
   b76f0:	e7ec      	b.n	b76cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b76f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b76f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76f8:	4605      	mov	r5, r0
   b76fa:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b76fc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b76fe:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7700:	f7ff fa82 	bl	b6c08 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7704:	682e      	ldr	r6, [r5, #0]
   b7706:	1ef3      	subs	r3, r6, #3
   b7708:	2b0d      	cmp	r3, #13
   b770a:	d83c      	bhi.n	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b770c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7710:	0053000e 	.word	0x0053000e
   b7714:	00d1003b 	.word	0x00d1003b
   b7718:	003b003b 	.word	0x003b003b
   b771c:	003b003b 	.word	0x003b003b
   b7720:	009b003b 	.word	0x009b003b
   b7724:	009b009b 	.word	0x009b009b
   b7728:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b772c:	a804      	add	r0, sp, #16
   b772e:	f7ff fc6f 	bl	b7010 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b7732:	9b04      	ldr	r3, [sp, #16]
   b7734:	89aa      	ldrh	r2, [r5, #12]
   b7736:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b7738:	6869      	ldr	r1, [r5, #4]
   b773a:	9804      	ldr	r0, [sp, #16]
   b773c:	3108      	adds	r1, #8
   b773e:	3002      	adds	r0, #2
   b7740:	f7ff fa7c 	bl	b6c3c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7744:	a904      	add	r1, sp, #16
   b7746:	a806      	add	r0, sp, #24
   b7748:	f7ff fde9 	bl	b731e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b774c:	a906      	add	r1, sp, #24
   b774e:	f104 0018 	add.w	r0, r4, #24
   b7752:	f7ff ff73 	bl	b763c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7756:	4605      	mov	r5, r0
   b7758:	a807      	add	r0, sp, #28
   b775a:	f7fd faef 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b775e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b7760:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b7762:	b9b5      	cbnz	r5, b7792 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b7764:	4b5d      	ldr	r3, [pc, #372]	; (b78dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b7766:	495e      	ldr	r1, [pc, #376]	; (b78e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7768:	9300      	str	r3, [sp, #0]
   b776a:	2032      	movs	r0, #50	; 0x32
   b776c:	462b      	mov	r3, r5
   b776e:	aa06      	add	r2, sp, #24
   b7770:	9507      	str	r5, [sp, #28]
   b7772:	f7fe fe03 	bl	b637c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7776:	9b04      	ldr	r3, [sp, #16]
   b7778:	4629      	mov	r1, r5
   b777a:	8818      	ldrh	r0, [r3, #0]
   b777c:	f7fe fc44 	bl	b6008 <hal_ble_gap_disconnect>
   b7780:	a805      	add	r0, sp, #20
   b7782:	f7fd fadb 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7786:	a803      	add	r0, sp, #12
   b7788:	f7ff fa4c 	bl	b6c24 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b778c:	b00e      	add	sp, #56	; 0x38
   b778e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b7792:	4a54      	ldr	r2, [pc, #336]	; (b78e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7794:	9200      	str	r2, [sp, #0]
   b7796:	2300      	movs	r3, #0
   b7798:	4951      	ldr	r1, [pc, #324]	; (b78e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b779a:	9307      	str	r3, [sp, #28]
   b779c:	aa06      	add	r2, sp, #24
   b779e:	2001      	movs	r0, #1
   b77a0:	f7fe fdec 	bl	b637c <log_message>
                if (impl->connectedCallback_) {
   b77a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b77a6:	2b00      	cmp	r3, #0
   b77a8:	d0ea      	beq.n	b7780 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b77aa:	a904      	add	r1, sp, #16
   b77ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b77b0:	f7ff fe37 	bl	b7422 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b77b4:	e7e4      	b.n	b7780 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b77b6:	89a9      	ldrh	r1, [r5, #12]
   b77b8:	4620      	mov	r0, r4
   b77ba:	f7ff fb7d 	bl	b6eb8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b77be:	4606      	mov	r6, r0
   b77c0:	2800      	cmp	r0, #0
   b77c2:	d0e0      	beq.n	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b77c4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b77c6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b77ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b77ce:	8029      	strh	r1, [r5, #0]
   b77d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b77d4:	429a      	cmp	r2, r3
   b77d6:	d003      	beq.n	b77e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b77d8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b77dc:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b77de:	e7f9      	b.n	b77d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b77e0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b77e4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b77e8:	45b8      	cmp	r8, r7
   b77ea:	d004      	beq.n	b77f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b77ec:	1d38      	adds	r0, r7, #4
   b77ee:	f7fd faa5 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77f2:	3708      	adds	r7, #8
   b77f4:	e7f8      	b.n	b77e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b77f6:	2300      	movs	r3, #0
   b77f8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b77fa:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b77fe:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7802:	45b8      	cmp	r8, r7
   b7804:	d004      	beq.n	b7810 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7806:	1d38      	adds	r0, r7, #4
   b7808:	f7fd fa98 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b780c:	3708      	adds	r7, #8
   b780e:	e7f8      	b.n	b7802 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b7810:	2300      	movs	r3, #0
   b7812:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7814:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7816:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7818:	b123      	cbz	r3, b7824 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b781a:	4631      	mov	r1, r6
   b781c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7820:	f7ff fdff 	bl	b7422 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b7824:	2300      	movs	r3, #0
   b7826:	2220      	movs	r2, #32
   b7828:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b782c:	4a2e      	ldr	r2, [pc, #184]	; (b78e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b782e:	9200      	str	r2, [sp, #0]
   b7830:	492b      	ldr	r1, [pc, #172]	; (b78e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7832:	aa06      	add	r2, sp, #24
   b7834:	2001      	movs	r0, #1
   b7836:	f7fe fda1 	bl	b637c <log_message>
                    impl->peers_.removeOne(*peer);
   b783a:	4631      	mov	r1, r6
   b783c:	f104 0018 	add.w	r0, r4, #24
   b7840:	f7ff ff35 	bl	b76ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b7844:	e79f      	b.n	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7846:	89a9      	ldrh	r1, [r5, #12]
   b7848:	4620      	mov	r0, r4
   b784a:	f7ff fb35 	bl	b6eb8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b784e:	2800      	cmp	r0, #0
   b7850:	d099      	beq.n	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7852:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7854:	2b00      	cmp	r3, #0
   b7856:	d096      	beq.n	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7858:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b785a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b785c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7860:	d001      	beq.n	b7866 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b7862:	2e10      	cmp	r6, #16
   b7864:	d117      	bne.n	b7896 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b7866:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7868:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b786a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b786c:	2506      	movs	r5, #6
                        };
   b786e:	f88d 3015 	strb.w	r3, [sp, #21]
   b7872:	9104      	str	r1, [sp, #16]
   b7874:	f88d 2014 	strb.w	r2, [sp, #20]
   b7878:	9006      	str	r0, [sp, #24]
   b787a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b787e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7880:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7884:	9508      	str	r5, [sp, #32]
   b7886:	e883 0003 	stmia.w	r3, {r0, r1}
   b788a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b788c:	a906      	add	r1, sp, #24
   b788e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7892:	4798      	blx	r3
   b7894:	e777      	b.n	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7896:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7898:	bf01      	itttt	eq
   b789a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b789c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b789e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b78a2:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b78a4:	bf0f      	iteee	eq
   b78a6:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b78aa:	461a      	movne	r2, r3
   b78ac:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b78ae:	461d      	movne	r5, r3
   b78b0:	e7dd      	b.n	b786e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b78b2:	89a9      	ldrh	r1, [r5, #12]
   b78b4:	4620      	mov	r0, r4
   b78b6:	f7ff faff 	bl	b6eb8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b78ba:	4601      	mov	r1, r0
   b78bc:	2800      	cmp	r0, #0
   b78be:	f43f af62 	beq.w	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b78c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b78c4:	2b00      	cmp	r3, #0
   b78c6:	f43f af5e 	beq.w	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b78ca:	686b      	ldr	r3, [r5, #4]
   b78cc:	9306      	str	r3, [sp, #24]
   b78ce:	aa06      	add	r2, sp, #24
   b78d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b78d2:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b78d6:	4798      	blx	r3
   b78d8:	e755      	b.n	b7786 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b78da:	bf00      	nop
   b78dc:	000bcd94 	.word	0x000bcd94
   b78e0:	000bcd13 	.word	0x000bcd13
   b78e4:	000bcdba 	.word	0x000bcdba
   b78e8:	000bcdd7 	.word	0x000bcdd7

000b78ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b78ec:	b513      	push	{r0, r1, r4, lr}
   b78ee:	460b      	mov	r3, r1
   b78f0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b78f2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b78f6:	466c      	mov	r4, sp
   b78f8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b78fc:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7900:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7904:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7908:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b790c:	b002      	add	sp, #8
   b790e:	bd10      	pop	{r4, pc}

000b7910 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7910:	b538      	push	{r3, r4, r5, lr}
   b7912:	4605      	mov	r5, r0
   b7914:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7916:	f7ff ffe9 	bl	b78ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b791a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b791c:	68a2      	ldr	r2, [r4, #8]
   b791e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7920:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7922:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7924:	68e2      	ldr	r2, [r4, #12]
   b7926:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7928:	60e3      	str	r3, [r4, #12]
      }
   b792a:	bd38      	pop	{r3, r4, r5, pc}

000b792c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b792c:	b570      	push	{r4, r5, r6, lr}
   b792e:	4604      	mov	r4, r0
   b7930:	b08c      	sub	sp, #48	; 0x30
   b7932:	460e      	mov	r6, r1
   b7934:	9201      	str	r2, [sp, #4]
   b7936:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7938:	f7ff fa9e 	bl	b6e78 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b793c:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b793e:	9901      	ldr	r1, [sp, #4]
   b7940:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7944:	f7fe ffa2 	bl	b688c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7948:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b794c:	b1cd      	cbz	r5, b7982 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b794e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7950:	9502      	str	r5, [sp, #8]
   b7952:	a902      	add	r1, sp, #8
   b7954:	a804      	add	r0, sp, #16
   b7956:	9303      	str	r3, [sp, #12]
   b7958:	f7ff fc92 	bl	b7280 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b795c:	2300      	movs	r3, #0
	__x.swap(*this);
   b795e:	a908      	add	r1, sp, #32
   b7960:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7962:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7964:	f7ff ffd4 	bl	b7910 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7968:	4631      	mov	r1, r6
   b796a:	a808      	add	r0, sp, #32
   b796c:	f7ff ffd0 	bl	b7910 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7970:	a808      	add	r0, sp, #32
   b7972:	f7fc fd3b 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7976:	a804      	add	r0, sp, #16
   b7978:	f7fc fd38 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
    }
   b797c:	4620      	mov	r0, r4
   b797e:	b00c      	add	sp, #48	; 0x30
   b7980:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7982:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7984:	e7ea      	b.n	b795c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b7988 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b798c:	b087      	sub	sp, #28
   b798e:	461d      	mov	r5, r3
   b7990:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7994:	4680      	mov	r8, r0
   b7996:	468b      	mov	fp, r1
   b7998:	4692      	mov	sl, r2
   b799a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b799c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b799e:	2200      	movs	r2, #0
   b79a0:	2068      	movs	r0, #104	; 0x68
   b79a2:	9102      	str	r1, [sp, #8]
   b79a4:	9204      	str	r2, [sp, #16]
   b79a6:	f7fc fb76 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b79aa:	1e06      	subs	r6, r0, #0
   b79ac:	f106 090c 	add.w	r9, r6, #12
   b79b0:	d018      	beq.n	b79e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b79b2:	2201      	movs	r2, #1
	: _M_impl(__a)
   b79b4:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b79b6:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b79ba:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b79bc:	4a15      	ldr	r2, [pc, #84]	; (b7a14 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b79be:	f847 2b20 	str.w	r2, [r7], #32
   b79c2:	9b03      	ldr	r3, [sp, #12]
   b79c4:	9100      	str	r1, [sp, #0]
   b79c6:	465a      	mov	r2, fp
   b79c8:	4651      	mov	r1, sl
   b79ca:	4648      	mov	r0, r9
   b79cc:	f7ff ffae 	bl	b792c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b79d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b79d4:	682b      	ldr	r3, [r5, #0]
   b79d6:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b79d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b79da:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b79de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b79e0:	6823      	ldr	r3, [r4, #0]
   b79e2:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b79e4:	a904      	add	r1, sp, #16
   b79e6:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b79e8:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b79ec:	f7ff fd08 	bl	b7400 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b79f0:	a805      	add	r0, sp, #20
   b79f2:	f7fd f9a3 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b79f6:	f8d8 3000 	ldr.w	r3, [r8]
   b79fa:	b93b      	cbnz	r3, b7a0c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b79fc:	4a06      	ldr	r2, [pc, #24]	; (b7a18 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b79fe:	4907      	ldr	r1, [pc, #28]	; (b7a1c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7a00:	200a      	movs	r0, #10
}
   b7a02:	b007      	add	sp, #28
   b7a04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7a08:	f7fe bcb0 	b.w	b636c <panic_>
}
   b7a0c:	b007      	add	sp, #28
   b7a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7a12:	bf00      	nop
   b7a14:	000bce50 	.word	0x000bce50
   b7a18:	000b5f69 	.word	0x000b5f69
   b7a1c:	000bccfc 	.word	0x000bccfc

000b7a20 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7a20:	b538      	push	{r3, r4, r5, lr}
   b7a22:	4605      	mov	r5, r0
   b7a24:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7a26:	f7ff ff61 	bl	b78ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a2a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7a2c:	68a2      	ldr	r2, [r4, #8]
   b7a2e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a30:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7a32:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7a34:	68e2      	ldr	r2, [r4, #12]
   b7a36:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7a38:	60e3      	str	r3, [r4, #12]
      }
   b7a3a:	bd38      	pop	{r3, r4, r5, pc}

000b7a3c <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7a3c:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7a3e:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7a40:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7a42:	3424      	adds	r4, #36	; 0x24
   b7a44:	b1b9      	cbz	r1, b7a76 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7a46:	e9cd 1200 	strd	r1, r2, [sp]
   b7a4a:	a802      	add	r0, sp, #8
   b7a4c:	4669      	mov	r1, sp
   b7a4e:	f7ff fc2f 	bl	b72b0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7a52:	2300      	movs	r3, #0
	__x.swap(*this);
   b7a54:	a906      	add	r1, sp, #24
   b7a56:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7a58:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7a5a:	f7ff ffe1 	bl	b7a20 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7a5e:	4621      	mov	r1, r4
   b7a60:	a806      	add	r0, sp, #24
   b7a62:	f7ff ffdd 	bl	b7a20 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7a66:	a806      	add	r0, sp, #24
   b7a68:	f7fc fcc0 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b7a6c:	a802      	add	r0, sp, #8
   b7a6e:	f7fc fcbd 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
}
   b7a72:	b00a      	add	sp, #40	; 0x28
   b7a74:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7a76:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7a78:	e7eb      	b.n	b7a52 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7a7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7a7a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a7e:	4604      	mov	r4, r0
   b7a80:	460d      	mov	r5, r1
   b7a82:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7a84:	d914      	bls.n	b7ab0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7a86:	4290      	cmp	r0, r2
   b7a88:	d213      	bcs.n	b7ab2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7a8a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7a8e:	1a75      	subs	r5, r6, r1
   b7a90:	f1a1 0708 	sub.w	r7, r1, #8
   b7a94:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7a96:	42b7      	cmp	r7, r6
   b7a98:	d018      	beq.n	b7acc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7a9a:	b11c      	cbz	r4, b7aa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7a9c:	4631      	mov	r1, r6
   b7a9e:	4620      	mov	r0, r4
   b7aa0:	f7ff fc33 	bl	b730a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7aa4:	1d30      	adds	r0, r6, #4
   b7aa6:	f7fd f949 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7aaa:	3e08      	subs	r6, #8
   b7aac:	3c08      	subs	r4, #8
   b7aae:	e7f2      	b.n	b7a96 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7ab0:	d00c      	beq.n	b7acc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7ab2:	42b5      	cmp	r5, r6
   b7ab4:	d00a      	beq.n	b7acc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7ab6:	b11c      	cbz	r4, b7ac0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7ab8:	4629      	mov	r1, r5
   b7aba:	4620      	mov	r0, r4
   b7abc:	f7ff fc25 	bl	b730a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7ac0:	1d28      	adds	r0, r5, #4
   b7ac2:	f7fd f93b 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7ac6:	3508      	adds	r5, #8
   b7ac8:	3408      	adds	r4, #8
   b7aca:	e7f2      	b.n	b7ab2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ace <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7ace:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7ad0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7ad2:	4605      	mov	r5, r0
        if (n > 0) {
   b7ad4:	dd11      	ble.n	b7afa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7ad6:	00f0      	lsls	r0, r6, #3
   b7ad8:	f7fe fd3c 	bl	b6554 <malloc>
            if (!d) {
   b7adc:	4604      	mov	r4, r0
   b7ade:	b158      	cbz	r0, b7af8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7ae0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7ae4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7ae8:	f7ff ffc7 	bl	b7a7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7aec:	6828      	ldr	r0, [r5, #0]
   b7aee:	f7fe fd39 	bl	b6564 <free>
        data_ = d;
   b7af2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7af4:	60ae      	str	r6, [r5, #8]
        return true;
   b7af6:	2001      	movs	r0, #1
    }
   b7af8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7afa:	2400      	movs	r4, #0
   b7afc:	e7f6      	b.n	b7aec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7afe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b00:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7b02:	6845      	ldr	r5, [r0, #4]
   b7b04:	4668      	mov	r0, sp
   b7b06:	f7ff fc00 	bl	b730a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b0a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7b0e:	4299      	cmp	r1, r3
   b7b10:	da10      	bge.n	b7b34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7b12:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7b14:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7b16:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7b1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7b1e:	4629      	mov	r1, r5
   b7b20:	f105 0008 	add.w	r0, r5, #8
   b7b24:	f7ff ffa9 	bl	b7a7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7b28:	b98d      	cbnz	r5, b7b4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7b2a:	6863      	ldr	r3, [r4, #4]
   b7b2c:	3301      	adds	r3, #1
   b7b2e:	6063      	str	r3, [r4, #4]
    return true;
   b7b30:	2601      	movs	r6, #1
   b7b32:	e006      	b.n	b7b42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b34:	3101      	adds	r1, #1
   b7b36:	4620      	mov	r0, r4
   b7b38:	f7ff ffc9 	bl	b7ace <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7b3c:	4606      	mov	r6, r0
   b7b3e:	2800      	cmp	r0, #0
   b7b40:	d1e7      	bne.n	b7b12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7b42:	a801      	add	r0, sp, #4
   b7b44:	f7fd f8fa 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7b48:	4630      	mov	r0, r6
   b7b4a:	b002      	add	sp, #8
   b7b4c:	bd70      	pop	{r4, r5, r6, pc}
   b7b4e:	4669      	mov	r1, sp
   b7b50:	4628      	mov	r0, r5
   b7b52:	f7ff fbda 	bl	b730a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7b56:	e7e8      	b.n	b7b2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7b58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7b58:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b5c:	4604      	mov	r4, r0
   b7b5e:	460d      	mov	r5, r1
   b7b60:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7b62:	d914      	bls.n	b7b8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7b64:	4290      	cmp	r0, r2
   b7b66:	d213      	bcs.n	b7b90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7b68:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7b6c:	1a75      	subs	r5, r6, r1
   b7b6e:	f1a1 0708 	sub.w	r7, r1, #8
   b7b72:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7b74:	42b7      	cmp	r7, r6
   b7b76:	d018      	beq.n	b7baa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7b78:	b11c      	cbz	r4, b7b82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7b7a:	4631      	mov	r1, r6
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	f7ff fbb6 	bl	b72ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b82:	1d30      	adds	r0, r6, #4
   b7b84:	f7fd f8da 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7b88:	3e08      	subs	r6, #8
   b7b8a:	3c08      	subs	r4, #8
   b7b8c:	e7f2      	b.n	b7b74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7b8e:	d00c      	beq.n	b7baa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7b90:	42b5      	cmp	r5, r6
   b7b92:	d00a      	beq.n	b7baa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7b94:	b11c      	cbz	r4, b7b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7b96:	4629      	mov	r1, r5
   b7b98:	4620      	mov	r0, r4
   b7b9a:	f7ff fba8 	bl	b72ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b9e:	1d28      	adds	r0, r5, #4
   b7ba0:	f7fd f8cc 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7ba4:	3508      	adds	r5, #8
   b7ba6:	3408      	adds	r4, #8
   b7ba8:	e7f2      	b.n	b7b90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7bac:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7bae:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7bb0:	4605      	mov	r5, r0
        if (n > 0) {
   b7bb2:	dd11      	ble.n	b7bd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7bb4:	00f0      	lsls	r0, r6, #3
   b7bb6:	f7fe fccd 	bl	b6554 <malloc>
            if (!d) {
   b7bba:	4604      	mov	r4, r0
   b7bbc:	b158      	cbz	r0, b7bd6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7bbe:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7bc2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7bc6:	f7ff ffc7 	bl	b7b58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7bca:	6828      	ldr	r0, [r5, #0]
   b7bcc:	f7fe fcca 	bl	b6564 <free>
        data_ = d;
   b7bd0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7bd2:	60ae      	str	r6, [r5, #8]
        return true;
   b7bd4:	2001      	movs	r0, #1
    }
   b7bd6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7bd8:	2400      	movs	r4, #0
   b7bda:	e7f6      	b.n	b7bca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7bdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7bde:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7be0:	6845      	ldr	r5, [r0, #4]
   b7be2:	4668      	mov	r0, sp
   b7be4:	f7ff fb83 	bl	b72ee <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7be8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7bec:	4299      	cmp	r1, r3
   b7bee:	da10      	bge.n	b7c12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7bf0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7bf2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7bf4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7bf8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7bfc:	4629      	mov	r1, r5
   b7bfe:	f105 0008 	add.w	r0, r5, #8
   b7c02:	f7ff ffa9 	bl	b7b58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7c06:	b98d      	cbnz	r5, b7c2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7c08:	6863      	ldr	r3, [r4, #4]
   b7c0a:	3301      	adds	r3, #1
   b7c0c:	6063      	str	r3, [r4, #4]
    return true;
   b7c0e:	2601      	movs	r6, #1
   b7c10:	e006      	b.n	b7c20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c12:	3101      	adds	r1, #1
   b7c14:	4620      	mov	r0, r4
   b7c16:	f7ff ffc9 	bl	b7bac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7c1a:	4606      	mov	r6, r0
   b7c1c:	2800      	cmp	r0, #0
   b7c1e:	d1e7      	bne.n	b7bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7c20:	a801      	add	r0, sp, #4
   b7c22:	f7fd f88b 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7c26:	4630      	mov	r0, r6
   b7c28:	b002      	add	sp, #8
   b7c2a:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7c2c:	4669      	mov	r1, sp
   b7c2e:	4628      	mov	r0, r5
   b7c30:	f7ff fb5d 	bl	b72ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7c34:	e7e8      	b.n	b7c08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b7c38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c3c:	4617      	mov	r7, r2
   b7c3e:	b0a1      	sub	sp, #132	; 0x84
   b7c40:	4680      	mov	r8, r0
    WiringBleLock lk;
   b7c42:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7c44:	460e      	mov	r6, r1
    WiringBleLock lk;
   b7c46:	f7fe ffdf 	bl	b6c08 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7c4a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7c4c:	7923      	ldrb	r3, [r4, #4]
   b7c4e:	b953      	cbnz	r3, b7c66 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7c50:	4639      	mov	r1, r7
   b7c52:	4640      	mov	r0, r8
   b7c54:	f7ff fb4b 	bl	b72ee <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7c58:	a80a      	add	r0, sp, #40	; 0x28
   b7c5a:	f7fe ffe3 	bl	b6c24 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7c5e:	4640      	mov	r0, r8
   b7c60:	b021      	add	sp, #132	; 0x84
   b7c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7c66:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7c68:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7c6c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7c70:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b7c72:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b7c76:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7c7a:	9b03      	ldr	r3, [sp, #12]
   b7c7c:	429d      	cmp	r5, r3
   b7c7e:	d021      	beq.n	b7cc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7c80:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b7c84:	4658      	mov	r0, fp
   b7c86:	f109 0114 	add.w	r1, r9, #20
   b7c8a:	f7ff f86a 	bl	b6d62 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7c8e:	b1b8      	cbz	r0, b7cc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7c90:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b7c94:	4650      	mov	r0, sl
   b7c96:	f7ff f864 	bl	b6d62 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b7c9a:	b188      	cbz	r0, b7cc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b7c9c:	6823      	ldr	r3, [r4, #0]
   b7c9e:	f8d9 2000 	ldr.w	r2, [r9]
   b7ca2:	4053      	eors	r3, r2
   b7ca4:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b7ca8:	d10a      	bne.n	b7cc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b7caa:	2220      	movs	r2, #32
   b7cac:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b7cb0:	4a5e      	ldr	r2, [pc, #376]	; (b7e2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b7cb2:	9200      	str	r2, [sp, #0]
   b7cb4:	aa15      	add	r2, sp, #84	; 0x54
   b7cb6:	495e      	ldr	r1, [pc, #376]	; (b7e30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b7cb8:	2032      	movs	r0, #50	; 0x32
   b7cba:	f7fe fb5f 	bl	b637c <log_message>
   b7cbe:	e7c7      	b.n	b7c50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b7cc0:	3508      	adds	r5, #8
   b7cc2:	e7da      	b.n	b7c7a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b7cc4:	4650      	mov	r0, sl
   b7cc6:	f7ff f81d 	bl	b6d04 <_ZNK8particle7BleUuid7isValidEv>
   b7cca:	b960      	cbnz	r0, b7ce6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b7ccc:	4959      	ldr	r1, [pc, #356]	; (b7e34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b7cce:	2201      	movs	r2, #1
   b7cd0:	a815      	add	r0, sp, #84	; 0x54
   b7cd2:	ad15      	add	r5, sp, #84	; 0x54
   b7cd4:	f7fe ffee 	bl	b6cb4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b7cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7cda:	46d4      	mov	ip, sl
   b7cdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7ce0:	682b      	ldr	r3, [r5, #0]
   b7ce2:	f8cc 3000 	str.w	r3, [ip]
   b7ce6:	6833      	ldr	r3, [r6, #0]
   b7ce8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b7cec:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b7cf0:	455d      	cmp	r5, fp
   b7cf2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b7cf4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b7cf6:	d06e      	beq.n	b7dd6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7cf8:	f855 0b08 	ldr.w	r0, [r5], #8
   b7cfc:	f7ff f831 	bl	b6d62 <_ZNK8particle7BleUuideqERKS0_>
   b7d00:	2800      	cmp	r0, #0
   b7d02:	d0f5      	beq.n	b7cf0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b7d04:	f104 0a14 	add.w	sl, r4, #20
   b7d08:	4650      	mov	r0, sl
   b7d0a:	f7fe fffb 	bl	b6d04 <_ZNK8particle7BleUuid7isValidEv>
   b7d0e:	b988      	cbnz	r0, b7d34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7d10:	4b49      	ldr	r3, [pc, #292]	; (b7e38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7d12:	4948      	ldr	r1, [pc, #288]	; (b7e34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b7d14:	881a      	ldrh	r2, [r3, #0]
   b7d16:	3201      	adds	r2, #1
   b7d18:	b292      	uxth	r2, r2
   b7d1a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7d1c:	a815      	add	r0, sp, #84	; 0x54
   b7d1e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7d20:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7d22:	f7fe ffe6 	bl	b6cf2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b7d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d28:	46d4      	mov	ip, sl
   b7d2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7d2e:	682b      	ldr	r3, [r5, #0]
   b7d30:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b7d34:	4b41      	ldr	r3, [pc, #260]	; (b7e3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b7d36:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7d38:	2228      	movs	r2, #40	; 0x28
   b7d3a:	2100      	movs	r1, #0
   b7d3c:	a816      	add	r0, sp, #88	; 0x58
   b7d3e:	f002 fac6 	bl	ba2ce <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b7d42:	4651      	mov	r1, sl
   b7d44:	a804      	add	r0, sp, #16
   b7d46:	f7fe ffef 	bl	b6d28 <_ZN8particle7BleUuid7halUUIDEv>
   b7d4a:	ab04      	add	r3, sp, #16
   b7d4c:	aa18      	add	r2, sp, #96	; 0x60
   b7d4e:	f10d 0c20 	add.w	ip, sp, #32
   b7d52:	6818      	ldr	r0, [r3, #0]
   b7d54:	6859      	ldr	r1, [r3, #4]
   b7d56:	4615      	mov	r5, r2
   b7d58:	c503      	stmia	r5!, {r0, r1}
   b7d5a:	3308      	adds	r3, #8
   b7d5c:	4563      	cmp	r3, ip
   b7d5e:	462a      	mov	r2, r5
   b7d60:	d1f7      	bne.n	b7d52 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b7d62:	6818      	ldr	r0, [r3, #0]
   b7d64:	6028      	str	r0, [r5, #0]
    return value_;
   b7d66:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7d68:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7d6c:	f8d9 3000 	ldr.w	r3, [r9]
   b7d70:	8a9b      	ldrh	r3, [r3, #20]
   b7d72:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b7d76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7d78:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7d7a:	4b31      	ldr	r3, [pc, #196]	; (b7e40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7d7c:	2200      	movs	r2, #0
   b7d7e:	1da1      	adds	r1, r4, #6
   b7d80:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b7d82:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7d86:	f7fe f971 	bl	b606c <hal_ble_gatt_server_add_characteristic>
   b7d8a:	2800      	cmp	r0, #0
   b7d8c:	f47f af60 	bne.w	b7c50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7d90:	2301      	movs	r3, #1
   b7d92:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b7d94:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b7d96:	4639      	mov	r1, r7
        return characteristics_;
   b7d98:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b7d9a:	a80d      	add	r0, sp, #52	; 0x34
   b7d9c:	f7ff faa7 	bl	b72ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7da0:	4620      	mov	r0, r4
   b7da2:	a90d      	add	r1, sp, #52	; 0x34
   b7da4:	f7ff ff1a 	bl	b7bdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7da8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7daa:	a80e      	add	r0, sp, #56	; 0x38
   b7dac:	f7fc ffc6 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7db0:	2c00      	cmp	r4, #0
   b7db2:	f47f af4d 	bne.w	b7c50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b7db6:	2320      	movs	r3, #32
   b7db8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b7dbc:	4b21      	ldr	r3, [pc, #132]	; (b7e44 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b7dbe:	9300      	str	r3, [sp, #0]
   b7dc0:	aa0d      	add	r2, sp, #52	; 0x34
   b7dc2:	4623      	mov	r3, r4
   b7dc4:	e777      	b.n	b7cb6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b7dc6:	4639      	mov	r1, r7
   b7dc8:	4640      	mov	r0, r8
   b7dca:	f7ff fa90 	bl	b72ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7dce:	a80c      	add	r0, sp, #48	; 0x30
   b7dd0:	f7fc ffb4 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7dd4:	e740      	b.n	b7c58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b7dd6:	a80b      	add	r0, sp, #44	; 0x2c
   b7dd8:	f7ff f8f6 	bl	b6fc8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b7ddc:	4651      	mov	r1, sl
   b7dde:	a815      	add	r0, sp, #84	; 0x54
   b7de0:	f7fe ffa2 	bl	b6d28 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b7de4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7de6:	2300      	movs	r3, #0
   b7de8:	3214      	adds	r2, #20
   b7dea:	a915      	add	r1, sp, #84	; 0x54
   b7dec:	2001      	movs	r0, #1
   b7dee:	f7fe f915 	bl	b601c <hal_ble_gatt_server_add_service>
   b7df2:	2800      	cmp	r0, #0
   b7df4:	d1e7      	bne.n	b7dc6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b7df6:	6835      	ldr	r5, [r6, #0]
   b7df8:	a90b      	add	r1, sp, #44	; 0x2c
   b7dfa:	a80d      	add	r0, sp, #52	; 0x34
   b7dfc:	f7ff fa85 	bl	b730a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7e00:	4628      	mov	r0, r5
   b7e02:	a90d      	add	r1, sp, #52	; 0x34
   b7e04:	f7ff fe7b 	bl	b7afe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7e08:	4605      	mov	r5, r0
   b7e0a:	a80e      	add	r0, sp, #56	; 0x38
   b7e0c:	f7fc ff96 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e10:	2d00      	cmp	r5, #0
   b7e12:	d0d8      	beq.n	b7dc6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b7e14:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b7e16:	6853      	ldr	r3, [r2, #4]
   b7e18:	6812      	ldr	r2, [r2, #0]
   b7e1a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7e1e:	3b01      	subs	r3, #1
   b7e20:	a80c      	add	r0, sp, #48	; 0x30
   b7e22:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b7e26:	f7fc ff89 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7e2a:	e76b      	b.n	b7d04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7e2c:	000bcdf6 	.word	0x000bcdf6
   b7e30:	000bcd13 	.word	0x000bcd13
   b7e34:	000bceba 	.word	0x000bceba
   b7e38:	2003e68c 	.word	0x2003e68c
   b7e3c:	002c0003 	.word	0x002c0003
   b7e40:	000b7161 	.word	0x000b7161
   b7e44:	000bce21 	.word	0x000bce21

000b7e48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7e48:	4802      	ldr	r0, [pc, #8]	; (b7e54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7e4a:	2300      	movs	r3, #0
   b7e4c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7e4e:	f7fe b965 	b.w	b611c <os_mutex_recursive_create>
   b7e52:	bf00      	nop
   b7e54:	2003e690 	.word	0x2003e690

000b7e58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e5a:	4606      	mov	r6, r0
   b7e5c:	460d      	mov	r5, r1
  size_t n = 0;
   b7e5e:	188f      	adds	r7, r1, r2
   b7e60:	2400      	movs	r4, #0
  while (size--) {
   b7e62:	42bd      	cmp	r5, r7
   b7e64:	d00c      	beq.n	b7e80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7e66:	6833      	ldr	r3, [r6, #0]
   b7e68:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7e6c:	689b      	ldr	r3, [r3, #8]
   b7e6e:	4630      	mov	r0, r6
   b7e70:	4798      	blx	r3
     if (chunk>=0)
   b7e72:	1e03      	subs	r3, r0, #0
   b7e74:	db01      	blt.n	b7e7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7e76:	441c      	add	r4, r3
  while (size--) {
   b7e78:	e7f3      	b.n	b7e62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7e7a:	2c00      	cmp	r4, #0
   b7e7c:	bf08      	it	eq
   b7e7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7e80:	4620      	mov	r0, r4
   b7e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7e84 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7e84:	b513      	push	{r0, r1, r4, lr}
   b7e86:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7e88:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7e8a:	b159      	cbz	r1, b7ea4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7e8c:	9101      	str	r1, [sp, #4]
   b7e8e:	f002 fa94 	bl	ba3ba <strlen>
   b7e92:	6823      	ldr	r3, [r4, #0]
   b7e94:	9901      	ldr	r1, [sp, #4]
   b7e96:	68db      	ldr	r3, [r3, #12]
   b7e98:	4602      	mov	r2, r0
   b7e9a:	4620      	mov	r0, r4
    }
   b7e9c:	b002      	add	sp, #8
   b7e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7ea2:	4718      	bx	r3
    }
   b7ea4:	b002      	add	sp, #8
   b7ea6:	bd10      	pop	{r4, pc}

000b7ea8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7ea8:	b508      	push	{r3, lr}
  return write(str);
   b7eaa:	f7ff ffeb 	bl	b7e84 <_ZN5Print5writeEPKc>
}
   b7eae:	bd08      	pop	{r3, pc}

000b7eb0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7eb0:	6803      	ldr	r3, [r0, #0]
   b7eb2:	689b      	ldr	r3, [r3, #8]
   b7eb4:	4718      	bx	r3

000b7eb6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7eb6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7eb8:	210d      	movs	r1, #13
{
   b7eba:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7ebc:	f7ff fff8 	bl	b7eb0 <_ZN5Print5printEc>
  n += print('\n');
   b7ec0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7ec2:	4604      	mov	r4, r0
  n += print('\n');
   b7ec4:	4628      	mov	r0, r5
   b7ec6:	f7ff fff3 	bl	b7eb0 <_ZN5Print5printEc>
  return n;
}
   b7eca:	4420      	add	r0, r4
   b7ecc:	bd38      	pop	{r3, r4, r5, pc}

000b7ece <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7ece:	b538      	push	{r3, r4, r5, lr}
   b7ed0:	4605      	mov	r5, r0
  return write(str);
   b7ed2:	f7ff ffd7 	bl	b7e84 <_ZN5Print5writeEPKc>
   b7ed6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7ed8:	4628      	mov	r0, r5
   b7eda:	f7ff ffec 	bl	b7eb6 <_ZN5Print7printlnEv>
  return n;
}
   b7ede:	4420      	add	r0, r4
   b7ee0:	bd38      	pop	{r3, r4, r5, pc}

000b7ee2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7ee2:	b530      	push	{r4, r5, lr}
   b7ee4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7ee6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7ee8:	2a01      	cmp	r2, #1
  *str = '\0';
   b7eea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7eee:	bf98      	it	ls
   b7ef0:	220a      	movls	r2, #10
   b7ef2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7ef4:	460d      	mov	r5, r1
   b7ef6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7efa:	fb01 5312 	mls	r3, r1, r2, r5
   b7efe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7f02:	2b09      	cmp	r3, #9
   b7f04:	bf94      	ite	ls
   b7f06:	3330      	addls	r3, #48	; 0x30
   b7f08:	3337      	addhi	r3, #55	; 0x37
   b7f0a:	b2db      	uxtb	r3, r3
  } while(n);
   b7f0c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7f0e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7f12:	d9ef      	bls.n	b7ef4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7f14:	4621      	mov	r1, r4
   b7f16:	f7ff ffb5 	bl	b7e84 <_ZN5Print5writeEPKc>
}
   b7f1a:	b00b      	add	sp, #44	; 0x2c
   b7f1c:	bd30      	pop	{r4, r5, pc}

000b7f1e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7f22:	b086      	sub	sp, #24
   b7f24:	af00      	add	r7, sp, #0
   b7f26:	4605      	mov	r5, r0
   b7f28:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7f2a:	1d38      	adds	r0, r7, #4
   b7f2c:	2114      	movs	r1, #20
{
   b7f2e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7f30:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7f32:	f7fe fb37 	bl	b65a4 <vsnprintf>

    if (n<bufsize)
   b7f36:	2813      	cmp	r0, #19
   b7f38:	d80e      	bhi.n	b7f58 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7f3a:	1d39      	adds	r1, r7, #4
   b7f3c:	4628      	mov	r0, r5
   b7f3e:	f7ff ffa1 	bl	b7e84 <_ZN5Print5writeEPKc>
   b7f42:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7f44:	b11e      	cbz	r6, b7f4e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7f46:	4628      	mov	r0, r5
   b7f48:	f7ff ffb5 	bl	b7eb6 <_ZN5Print7printlnEv>
   b7f4c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7f4e:	4620      	mov	r0, r4
   b7f50:	3718      	adds	r7, #24
   b7f52:	46bd      	mov	sp, r7
   b7f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7f58:	f100 0308 	add.w	r3, r0, #8
   b7f5c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7f60:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7f62:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7f66:	4622      	mov	r2, r4
   b7f68:	1c41      	adds	r1, r0, #1
   b7f6a:	683b      	ldr	r3, [r7, #0]
   b7f6c:	4668      	mov	r0, sp
   b7f6e:	f7fe fb19 	bl	b65a4 <vsnprintf>
  return write(str);
   b7f72:	4669      	mov	r1, sp
   b7f74:	4628      	mov	r0, r5
   b7f76:	f7ff ff85 	bl	b7e84 <_ZN5Print5writeEPKc>
   b7f7a:	4604      	mov	r4, r0
   b7f7c:	46c5      	mov	sp, r8
   b7f7e:	e7e1      	b.n	b7f44 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7f80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7f80:	4b01      	ldr	r3, [pc, #4]	; (b7f88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7f82:	4a02      	ldr	r2, [pc, #8]	; (b7f8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7f84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7f86:	4770      	bx	lr
   b7f88:	2003e698 	.word	0x2003e698
   b7f8c:	000bceda 	.word	0x000bceda

000b7f90 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7f94:	4a15      	ldr	r2, [pc, #84]	; (b7fec <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7f96:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7ff8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b7f9a:	e9d2 6300 	ldrd	r6, r3, [r2]
   b7f9e:	1980      	adds	r0, r0, r6
   b7fa0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b7fa4:	4b12      	ldr	r3, [pc, #72]	; (b7ff0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b7fa6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b7faa:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b7fae:	1986      	adds	r6, r0, r6
   b7fb0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7fb4:	42bb      	cmp	r3, r7
   b7fb6:	bf08      	it	eq
   b7fb8:	42b2      	cmpeq	r2, r6
{
   b7fba:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7fbc:	d013      	beq.n	b7fe6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7fbe:	a903      	add	r1, sp, #12
   b7fc0:	4668      	mov	r0, sp
   b7fc2:	e9cd 6700 	strd	r6, r7, [sp]
   b7fc6:	f7fe fb1d 	bl	b6604 <localtime_r>
	calendar_time.tm_year += 1900;
   b7fca:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7fcc:	4d09      	ldr	r5, [pc, #36]	; (b7ff4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7fce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7fd2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7fd4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7fde:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7fe2:	6823      	ldr	r3, [r4, #0]
   b7fe4:	602b      	str	r3, [r5, #0]
    }
}
   b7fe6:	b00c      	add	sp, #48	; 0x30
   b7fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7fec:	2003e6d0 	.word	0x2003e6d0
   b7ff0:	2003e6c8 	.word	0x2003e6c8
   b7ff4:	2003e6a0 	.word	0x2003e6a0
   b7ff8:	2003e6d8 	.word	0x2003e6d8

000b7ffc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b7ffc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7ffe:	2000      	movs	r0, #0
   b8000:	f7fe fa98 	bl	b6534 <spark_sync_time_pending>
   b8004:	b128      	cbz	r0, b8012 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8006:	f7fe fa75 	bl	b64f4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b800a:	f080 0001 	eor.w	r0, r0, #1
   b800e:	b2c0      	uxtb	r0, r0
    }
   b8010:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b8012:	2001      	movs	r0, #1
   b8014:	e7fc      	b.n	b8010 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b8018 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b8018:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b801a:	f7ff ffb9 	bl	b7f90 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b801e:	4b02      	ldr	r3, [pc, #8]	; (b8028 <_ZN9TimeClass5monthEx+0x10>)
   b8020:	6918      	ldr	r0, [r3, #16]
}
   b8022:	3001      	adds	r0, #1
   b8024:	bd08      	pop	{r3, pc}
   b8026:	bf00      	nop
   b8028:	2003e6a0 	.word	0x2003e6a0

000b802c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b802c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b8030:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b8038:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b803a:	d411      	bmi.n	b8060 <_ZN9TimeClass4zoneEf+0x34>
   b803c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b8040:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8048:	dc0a      	bgt.n	b8060 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b804a:	eddf 7a06 	vldr	s15, [pc, #24]	; b8064 <_ZN9TimeClass4zoneEf+0x38>
   b804e:	ee60 7a27 	vmul.f32	s15, s0, s15
   b8052:	ee17 0a90 	vmov	r0, s15
   b8056:	f002 f8a3 	bl	ba1a0 <__aeabi_f2lz>
   b805a:	4b03      	ldr	r3, [pc, #12]	; (b8068 <_ZN9TimeClass4zoneEf+0x3c>)
   b805c:	e9c3 0100 	strd	r0, r1, [r3]
}
   b8060:	bd08      	pop	{r3, pc}
   b8062:	bf00      	nop
   b8064:	45610000 	.word	0x45610000
   b8068:	2003e6d0 	.word	0x2003e6d0

000b806c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b806c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b806e:	2000      	movs	r0, #0
   b8070:	f7fd ff8a 	bl	b5f88 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8074:	4604      	mov	r4, r0
   b8076:	b9a0      	cbnz	r0, b80a2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b8078:	f7fe f988 	bl	b638c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b807c:	2801      	cmp	r0, #1
   b807e:	d110      	bne.n	b80a2 <_ZN9TimeClass7isValidEv+0x36>
   b8080:	4620      	mov	r0, r4
   b8082:	f7fe f9b3 	bl	b63ec <system_thread_get_state>
   b8086:	b960      	cbnz	r0, b80a2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b8088:	f7ff ffb8 	bl	b7ffc <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b808c:	b910      	cbnz	r0, b8094 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b808e:	f7fe fa29 	bl	b64e4 <spark_process>
        while (_while() && !_condition()) {
   b8092:	e7f9      	b.n	b8088 <_ZN9TimeClass7isValidEv+0x1c>
   b8094:	f7ff ffb2 	bl	b7ffc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b8098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b809c:	2000      	movs	r0, #0
   b809e:	f7fd bf73 	b.w	b5f88 <hal_rtc_time_is_valid>
}
   b80a2:	4620      	mov	r0, r4
   b80a4:	bd10      	pop	{r4, pc}

000b80a6 <_ZN9TimeClass3nowEv>:
{
   b80a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b80a8:	f7ff ffe0 	bl	b806c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b80ac:	2210      	movs	r2, #16
   b80ae:	2100      	movs	r1, #0
   b80b0:	4668      	mov	r0, sp
   b80b2:	f002 f90c 	bl	ba2ce <memset>
    hal_rtc_get_time(&tv, nullptr);
   b80b6:	2100      	movs	r1, #0
   b80b8:	4668      	mov	r0, sp
   b80ba:	f7fd ff6d 	bl	b5f98 <hal_rtc_get_time>
}
   b80be:	9800      	ldr	r0, [sp, #0]
   b80c0:	b005      	add	sp, #20
   b80c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b80c8 <_ZN9TimeClass4hourEv>:
{
   b80c8:	b508      	push	{r3, lr}
	return hour(now());
   b80ca:	f7ff ffec 	bl	b80a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b80ce:	17c1      	asrs	r1, r0, #31
   b80d0:	f7ff ff5e 	bl	b7f90 <_ZL22Refresh_UnixTime_Cachex>
}
   b80d4:	4b01      	ldr	r3, [pc, #4]	; (b80dc <_ZN9TimeClass4hourEv+0x14>)
   b80d6:	6898      	ldr	r0, [r3, #8]
   b80d8:	bd08      	pop	{r3, pc}
   b80da:	bf00      	nop
   b80dc:	2003e6a0 	.word	0x2003e6a0

000b80e0 <_ZN9TimeClass6minuteEv>:
{
   b80e0:	b508      	push	{r3, lr}
	return minute(now());
   b80e2:	f7ff ffe0 	bl	b80a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b80e6:	17c1      	asrs	r1, r0, #31
   b80e8:	f7ff ff52 	bl	b7f90 <_ZL22Refresh_UnixTime_Cachex>
}
   b80ec:	4b01      	ldr	r3, [pc, #4]	; (b80f4 <_ZN9TimeClass6minuteEv+0x14>)
   b80ee:	6858      	ldr	r0, [r3, #4]
   b80f0:	bd08      	pop	{r3, pc}
   b80f2:	bf00      	nop
   b80f4:	2003e6a0 	.word	0x2003e6a0

000b80f8 <_ZN9TimeClass6secondEv>:
{
   b80f8:	b508      	push	{r3, lr}
	return second(now());
   b80fa:	f7ff ffd4 	bl	b80a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b80fe:	17c1      	asrs	r1, r0, #31
   b8100:	f7ff ff46 	bl	b7f90 <_ZL22Refresh_UnixTime_Cachex>
}
   b8104:	4b01      	ldr	r3, [pc, #4]	; (b810c <_ZN9TimeClass6secondEv+0x14>)
   b8106:	6818      	ldr	r0, [r3, #0]
   b8108:	bd08      	pop	{r3, pc}
   b810a:	bf00      	nop
   b810c:	2003e6a0 	.word	0x2003e6a0

000b8110 <_ZN9TimeClass3dayEv>:
{
   b8110:	b508      	push	{r3, lr}
	return day(now());
   b8112:	f7ff ffc8 	bl	b80a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b8116:	17c1      	asrs	r1, r0, #31
   b8118:	f7ff ff3a 	bl	b7f90 <_ZL22Refresh_UnixTime_Cachex>
}
   b811c:	4b01      	ldr	r3, [pc, #4]	; (b8124 <_ZN9TimeClass3dayEv+0x14>)
   b811e:	68d8      	ldr	r0, [r3, #12]
   b8120:	bd08      	pop	{r3, pc}
   b8122:	bf00      	nop
   b8124:	2003e6a0 	.word	0x2003e6a0

000b8128 <_ZN9TimeClass5monthEv>:
{
   b8128:	b508      	push	{r3, lr}
	return month(now());
   b812a:	f7ff ffbc 	bl	b80a6 <_ZN9TimeClass3nowEv>
}
   b812e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b8132:	17c1      	asrs	r1, r0, #31
   b8134:	f7ff bf70 	b.w	b8018 <_ZN9TimeClass5monthEx>

000b8138 <_ZN9TimeClass4yearEv>:
{
   b8138:	b508      	push	{r3, lr}
	return year(now());
   b813a:	f7ff ffb4 	bl	b80a6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b813e:	17c1      	asrs	r1, r0, #31
   b8140:	f7ff ff26 	bl	b7f90 <_ZL22Refresh_UnixTime_Cachex>
}
   b8144:	4b01      	ldr	r3, [pc, #4]	; (b814c <_ZN9TimeClass4yearEv+0x14>)
   b8146:	6958      	ldr	r0, [r3, #20]
   b8148:	bd08      	pop	{r3, pc}
   b814a:	bf00      	nop
   b814c:	2003e6a0 	.word	0x2003e6a0

000b8150 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8150:	4b02      	ldr	r3, [pc, #8]	; (b815c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8152:	681a      	ldr	r2, [r3, #0]
   b8154:	4b02      	ldr	r3, [pc, #8]	; (b8160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8156:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8158:	4770      	bx	lr
   b815a:	bf00      	nop
   b815c:	2003d590 	.word	0x2003d590
   b8160:	2003e69c 	.word	0x2003e69c

000b8164 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8164:	2100      	movs	r1, #0
   b8166:	f7fe b921 	b.w	b63ac <system_delay_ms>
	...

000b816c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b816c:	b510      	push	{r4, lr}
   b816e:	4b04      	ldr	r3, [pc, #16]	; (b8180 <_ZN9TCPClientD1Ev+0x14>)
   b8170:	6003      	str	r3, [r0, #0]
   b8172:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8174:	6980      	ldr	r0, [r0, #24]
   b8176:	b108      	cbz	r0, b817c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b8178:	f7fe fd1d 	bl	b6bb6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b817c:	4620      	mov	r0, r4
   b817e:	bd10      	pop	{r4, pc}
   b8180:	000bcff0 	.word	0x000bcff0

000b8184 <_ZN9TCPClientD0Ev>:
   b8184:	b510      	push	{r4, lr}
   b8186:	4604      	mov	r4, r0
   b8188:	f7ff fff0 	bl	b816c <_ZN9TCPClientD1Ev>
   b818c:	4620      	mov	r0, r4
   b818e:	211c      	movs	r1, #28
   b8190:	f7fb ff85 	bl	b409e <_ZdlPvj>
   b8194:	4620      	mov	r0, r4
   b8196:	bd10      	pop	{r4, pc}

000b8198 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8198:	4b01      	ldr	r3, [pc, #4]	; (b81a0 <_GLOBAL__sub_I_RGB+0x8>)
   b819a:	2200      	movs	r2, #0
   b819c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b819e:	4770      	bx	lr
   b81a0:	2003e6e0 	.word	0x2003e6e0

000b81a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b81a4:	4b01      	ldr	r3, [pc, #4]	; (b81ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b81a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b81a8:	4770      	bx	lr
   b81aa:	bf00      	nop
   b81ac:	2003d594 	.word	0x2003d594

000b81b0 <serialEventRun>:
{
   b81b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b81b2:	4b0b      	ldr	r3, [pc, #44]	; (b81e0 <serialEventRun+0x30>)
   b81b4:	b143      	cbz	r3, b81c8 <serialEventRun+0x18>
   b81b6:	f000 fc19 	bl	b89ec <_Z16_fetch_usbserialv>
   b81ba:	6803      	ldr	r3, [r0, #0]
   b81bc:	691b      	ldr	r3, [r3, #16]
   b81be:	4798      	blx	r3
   b81c0:	2800      	cmp	r0, #0
   b81c2:	dd01      	ble.n	b81c8 <serialEventRun+0x18>
        serialEvent();
   b81c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b81c8:	4b06      	ldr	r3, [pc, #24]	; (b81e4 <serialEventRun+0x34>)
   b81ca:	b143      	cbz	r3, b81de <serialEventRun+0x2e>
   b81cc:	f001 f9f6 	bl	b95bc <_Z22__fetch_global_Serial1v>
   b81d0:	6803      	ldr	r3, [r0, #0]
   b81d2:	691b      	ldr	r3, [r3, #16]
   b81d4:	4798      	blx	r3
   b81d6:	2800      	cmp	r0, #0
   b81d8:	dd01      	ble.n	b81de <serialEventRun+0x2e>
        serialEvent1();
   b81da:	f3af 8000 	nop.w
}
   b81de:	bd08      	pop	{r3, pc}
	...

000b81e8 <_post_loop>:
{
   b81e8:	b508      	push	{r3, lr}
	serialEventRun();
   b81ea:	f7ff ffe1 	bl	b81b0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b81ee:	f7fd fec3 	bl	b5f78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b81f2:	4b01      	ldr	r3, [pc, #4]	; (b81f8 <_post_loop+0x10>)
   b81f4:	6018      	str	r0, [r3, #0]
}
   b81f6:	bd08      	pop	{r3, pc}
   b81f8:	2003e744 	.word	0x2003e744

000b81fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b81fc:	4805      	ldr	r0, [pc, #20]	; (b8214 <_Z33system_initialize_user_backup_ramv+0x18>)
   b81fe:	4a06      	ldr	r2, [pc, #24]	; (b8218 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8200:	4906      	ldr	r1, [pc, #24]	; (b821c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8202:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8204:	1a12      	subs	r2, r2, r0
   b8206:	f002 f83a 	bl	ba27e <memcpy>
    __backup_sram_signature = signature;
   b820a:	4b05      	ldr	r3, [pc, #20]	; (b8220 <_Z33system_initialize_user_backup_ramv+0x24>)
   b820c:	4a05      	ldr	r2, [pc, #20]	; (b8224 <_Z33system_initialize_user_backup_ramv+0x28>)
   b820e:	601a      	str	r2, [r3, #0]
}
   b8210:	bd08      	pop	{r3, pc}
   b8212:	bf00      	nop
   b8214:	2003f400 	.word	0x2003f400
   b8218:	2003f404 	.word	0x2003f404
   b821c:	000bd6c4 	.word	0x000bd6c4
   b8220:	2003f400 	.word	0x2003f400
   b8224:	9a271c1e 	.word	0x9a271c1e

000b8228 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8228:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b822a:	2300      	movs	r3, #0
   b822c:	9300      	str	r3, [sp, #0]
   b822e:	461a      	mov	r2, r3
   b8230:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8234:	f7fe f8ec 	bl	b6410 <system_ctrl_set_result>
}
   b8238:	b003      	add	sp, #12
   b823a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8240 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8240:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8242:	8843      	ldrh	r3, [r0, #2]
   b8244:	2b0a      	cmp	r3, #10
   b8246:	d008      	beq.n	b825a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8248:	2b50      	cmp	r3, #80	; 0x50
   b824a:	d10b      	bne.n	b8264 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b824c:	4b09      	ldr	r3, [pc, #36]	; (b8274 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b824e:	681b      	ldr	r3, [r3, #0]
   b8250:	b14b      	cbz	r3, b8266 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8252:	b003      	add	sp, #12
   b8254:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8258:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b825a:	f7ff ffe5 	bl	b8228 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b825e:	b003      	add	sp, #12
   b8260:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8264:	2300      	movs	r3, #0
   b8266:	9300      	str	r3, [sp, #0]
   b8268:	461a      	mov	r2, r3
   b826a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b826e:	f7fe f8cf 	bl	b6410 <system_ctrl_set_result>
}
   b8272:	e7f4      	b.n	b825e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8274:	2003e6f4 	.word	0x2003e6f4

000b8278 <module_user_init_hook>:
{
   b8278:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b827a:	4812      	ldr	r0, [pc, #72]	; (b82c4 <module_user_init_hook+0x4c>)
   b827c:	2100      	movs	r1, #0
   b827e:	f7fe f9b9 	bl	b65f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8282:	4b11      	ldr	r3, [pc, #68]	; (b82c8 <module_user_init_hook+0x50>)
   b8284:	681a      	ldr	r2, [r3, #0]
   b8286:	4b11      	ldr	r3, [pc, #68]	; (b82cc <module_user_init_hook+0x54>)
   b8288:	429a      	cmp	r2, r3
   b828a:	4b11      	ldr	r3, [pc, #68]	; (b82d0 <module_user_init_hook+0x58>)
   b828c:	bf0c      	ite	eq
   b828e:	2201      	moveq	r2, #1
   b8290:	2200      	movne	r2, #0
   b8292:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8294:	d001      	beq.n	b829a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8296:	f7ff ffb1 	bl	b81fc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b829a:	f7fd fe5d 	bl	b5f58 <HAL_RNG_GetRandomNumber>
   b829e:	4604      	mov	r4, r0
    srand(seed);
   b82a0:	f002 f81e 	bl	ba2e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b82a4:	4b0b      	ldr	r3, [pc, #44]	; (b82d4 <module_user_init_hook+0x5c>)
   b82a6:	b113      	cbz	r3, b82ae <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b82a8:	4620      	mov	r0, r4
   b82aa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b82ae:	2100      	movs	r1, #0
   b82b0:	4808      	ldr	r0, [pc, #32]	; (b82d4 <module_user_init_hook+0x5c>)
   b82b2:	f7fe f947 	bl	b6544 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b82b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b82ba:	4807      	ldr	r0, [pc, #28]	; (b82d8 <module_user_init_hook+0x60>)
   b82bc:	2100      	movs	r1, #0
   b82be:	f7fe b89d 	b.w	b63fc <system_ctrl_set_app_request_handler>
   b82c2:	bf00      	nop
   b82c4:	000b81a5 	.word	0x000b81a5
   b82c8:	2003f400 	.word	0x2003f400
   b82cc:	9a271c1e 	.word	0x9a271c1e
   b82d0:	2003e6f0 	.word	0x2003e6f0
   b82d4:	00000000 	.word	0x00000000
   b82d8:	000b8241 	.word	0x000b8241

000b82dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b82dc:	4770      	bx	lr

000b82de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b82de:	2000      	movs	r0, #0
   b82e0:	4770      	bx	lr

000b82e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b82e2:	b510      	push	{r4, lr}
   b82e4:	2110      	movs	r1, #16
   b82e6:	4604      	mov	r4, r0
   b82e8:	f7fb fed9 	bl	b409e <_ZdlPvj>
   b82ec:	4620      	mov	r0, r4
   b82ee:	bd10      	pop	{r4, pc}

000b82f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b82f0:	b508      	push	{r3, lr}
      { delete this; }
   b82f2:	f7ff fff6 	bl	b82e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b82f6:	bd08      	pop	{r3, pc}

000b82f8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b82f8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b82fa:	2200      	movs	r2, #0
   b82fc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b8300:	6002      	str	r2, [r0, #0]
   b8302:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8304:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b8306:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8308:	680c      	ldr	r4, [r1, #0]
   b830a:	8085      	strh	r5, [r0, #4]
   b830c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b830e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b8310:	bd30      	pop	{r4, r5, pc}

000b8312 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b8312:	b510      	push	{r4, lr}
   b8314:	4604      	mov	r4, r0
    free((void*)msg_);
   b8316:	6800      	ldr	r0, [r0, #0]
   b8318:	f7fe f924 	bl	b6564 <free>
}
   b831c:	4620      	mov	r0, r4
   b831e:	bd10      	pop	{r4, pc}

000b8320 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8320:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b8322:	68c4      	ldr	r4, [r0, #12]
   b8324:	b1f4      	cbz	r4, b8364 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b8326:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b8328:	2b02      	cmp	r3, #2
   b832a:	d103      	bne.n	b8334 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b832c:	f104 000c 	add.w	r0, r4, #12
   b8330:	f7ff ffef 	bl	b8312 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b8334:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b8336:	b135      	cbz	r5, b8346 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b8338:	4628      	mov	r0, r5
   b833a:	f7fc f857 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b833e:	2110      	movs	r1, #16
   b8340:	4628      	mov	r0, r5
   b8342:	f7fb feac 	bl	b409e <_ZdlPvj>
   b8346:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b8348:	b135      	cbz	r5, b8358 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b834a:	4628      	mov	r0, r5
   b834c:	f7fc f84e 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
   b8350:	2110      	movs	r1, #16
   b8352:	4628      	mov	r0, r5
   b8354:	f7fb fea3 	bl	b409e <_ZdlPvj>
   b8358:	4620      	mov	r0, r4
   b835a:	2114      	movs	r1, #20
   b835c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8360:	f7fb be9d 	b.w	b409e <_ZdlPvj>
   b8364:	bd38      	pop	{r3, r4, r5, pc}

000b8366 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8366:	680b      	ldr	r3, [r1, #0]
   b8368:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b836a:	684b      	ldr	r3, [r1, #4]
   b836c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b836e:	b113      	cbz	r3, b8376 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b8370:	685a      	ldr	r2, [r3, #4]
   b8372:	3201      	adds	r2, #1
   b8374:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8376:	4770      	bx	lr

000b8378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b8378:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b837a:	4604      	mov	r4, r0
   b837c:	4668      	mov	r0, sp
   b837e:	460d      	mov	r5, r1
   b8380:	f7ff fff1 	bl	b8366 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8384:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8386:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8388:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b838a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b838c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b838e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b8390:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b8392:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8394:	f7fc fcd2 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b8398:	b135      	cbz	r5, b83a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b839a:	1d28      	adds	r0, r5, #4
   b839c:	f7fc fcce 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b83a0:	2108      	movs	r1, #8
   b83a2:	4628      	mov	r0, r5
   b83a4:	f7fb fe7b 	bl	b409e <_ZdlPvj>
        return p;
    }
   b83a8:	4620      	mov	r0, r4
   b83aa:	b003      	add	sp, #12
   b83ac:	bd30      	pop	{r4, r5, pc}

000b83ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b83ae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b83b0:	b510      	push	{r4, lr}
      if (_M_empty())
   b83b2:	b90a      	cbnz	r2, b83b8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b83b4:	f001 f968 	bl	b9688 <_ZSt25__throw_bad_function_callv>
    }
   b83b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b83bc:	68c3      	ldr	r3, [r0, #12]
   b83be:	4718      	bx	r3

000b83c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b83c0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b83c2:	6800      	ldr	r0, [r0, #0]
   b83c4:	f100 0110 	add.w	r1, r0, #16
   b83c8:	f7ff fff1 	bl	b83ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b83cc:	bd08      	pop	{r3, pc}

000b83ce <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b83ce:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b83d0:	b510      	push	{r4, lr}
      if (_M_empty())
   b83d2:	b90a      	cbnz	r2, b83d8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b83d4:	f001 f958 	bl	b9688 <_ZSt25__throw_bad_function_callv>
    }
   b83d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b83dc:	68c3      	ldr	r3, [r0, #12]
   b83de:	4718      	bx	r3

000b83e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b83e0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b83e2:	6800      	ldr	r0, [r0, #0]
   b83e4:	f100 0110 	add.w	r1, r0, #16
   b83e8:	f7ff fff1 	bl	b83ce <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b83ec:	bd08      	pop	{r3, pc}
	...

000b83f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b83f0:	b538      	push	{r3, r4, r5, lr}
   b83f2:	2300      	movs	r3, #0
   b83f4:	4604      	mov	r4, r0
   b83f6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b83f8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b83fa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b83fc:	f7fb fe4b 	bl	b4096 <_Znwj>
   b8400:	b128      	cbz	r0, b840e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8402:	2301      	movs	r3, #1
   b8404:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8408:	4b02      	ldr	r3, [pc, #8]	; (b8414 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b840a:	6003      	str	r3, [r0, #0]
   b840c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b840e:	6020      	str	r0, [r4, #0]
	}
   b8410:	4620      	mov	r0, r4
   b8412:	bd38      	pop	{r3, r4, r5, pc}
   b8414:	000bcf04 	.word	0x000bcf04

000b8418 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8418:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b841a:	2300      	movs	r3, #0
   b841c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b841e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8420:	4604      	mov	r4, r0
   b8422:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8424:	b12b      	cbz	r3, b8432 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8426:	2202      	movs	r2, #2
   b8428:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b842a:	68eb      	ldr	r3, [r5, #12]
   b842c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b842e:	68ab      	ldr	r3, [r5, #8]
   b8430:	60a3      	str	r3, [r4, #8]
    }
   b8432:	4620      	mov	r0, r4
   b8434:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8438:	b5f0      	push	{r4, r5, r6, r7, lr}
   b843a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b843c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b843e:	4668      	mov	r0, sp
   b8440:	f7ff ff5a 	bl	b82f8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8444:	f04f 0302 	mov.w	r3, #2
   b8448:	e8d4 2f4f 	ldrexb	r2, [r4]
   b844c:	2a00      	cmp	r2, #0
   b844e:	d103      	bne.n	b8458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b8450:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8454:	2900      	cmp	r1, #0
   b8456:	d1f7      	bne.n	b8448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8458:	d125      	bne.n	b84a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b845a:	f104 050c 	add.w	r5, r4, #12
   b845e:	4669      	mov	r1, sp
   b8460:	4628      	mov	r0, r5
   b8462:	f7ff ff49 	bl	b82f8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b8466:	f3bf 8f5b 	dmb	ish
   b846a:	2301      	movs	r3, #1
   b846c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b846e:	2000      	movs	r0, #0
   b8470:	f104 0308 	add.w	r3, r4, #8
   b8474:	f3bf 8f5b 	dmb	ish
   b8478:	e853 6f00 	ldrex	r6, [r3]
   b847c:	e843 0200 	strex	r2, r0, [r3]
   b8480:	2a00      	cmp	r2, #0
   b8482:	d1f9      	bne.n	b8478 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8484:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8488:	b16e      	cbz	r6, b84a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b848a:	f7fd ff9f 	bl	b63cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b848e:	b178      	cbz	r0, b84b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8490:	4629      	mov	r1, r5
   b8492:	4630      	mov	r0, r6
   b8494:	f7ff ff8b 	bl	b83ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b8498:	4630      	mov	r0, r6
   b849a:	f7fb ffa7 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b849e:	2110      	movs	r1, #16
   b84a0:	4630      	mov	r0, r6
   b84a2:	f7fb fdfc 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b84a6:	4668      	mov	r0, sp
   b84a8:	f7ff ff33 	bl	b8312 <_ZN8particle5ErrorD1Ev>
    }
   b84ac:	b009      	add	sp, #36	; 0x24
   b84ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b84b0:	4631      	mov	r1, r6
   b84b2:	a802      	add	r0, sp, #8
   b84b4:	f7ff ffb0 	bl	b8418 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b84b8:	68e0      	ldr	r0, [r4, #12]
   b84ba:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b84be:	b108      	cbz	r0, b84c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b84c0:	f001 ff5e 	bl	ba380 <strdup>
        type_(type) {
   b84c4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b84c6:	2010      	movs	r0, #16
   b84c8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b84cc:	f7fb fde3 	bl	b4096 <_Znwj>
   b84d0:	4605      	mov	r5, r0
   b84d2:	b1e8      	cbz	r0, b8510 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b84d4:	2700      	movs	r7, #0
   b84d6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b84d8:	2018      	movs	r0, #24
   b84da:	f7fb fddc 	bl	b4096 <_Znwj>
   b84de:	4604      	mov	r4, r0
   b84e0:	b188      	cbz	r0, b8506 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b84e2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b84e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b84e6:	a802      	add	r0, sp, #8
   b84e8:	f7ff fa00 	bl	b78ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84ec:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b84ee:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b84f0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b84f2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b84f4:	9204      	str	r2, [sp, #16]
   b84f6:	a906      	add	r1, sp, #24
   b84f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b84fa:	60e3      	str	r3, [r4, #12]
   b84fc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8500:	9205      	str	r2, [sp, #20]
   b8502:	f7ff fef9 	bl	b82f8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8506:	4b08      	ldr	r3, [pc, #32]	; (b8528 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8508:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b850a:	4b08      	ldr	r3, [pc, #32]	; (b852c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b850c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b850e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8510:	a806      	add	r0, sp, #24
   b8512:	f7ff fefe 	bl	b8312 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8516:	a802      	add	r0, sp, #8
   b8518:	f7fb ff68 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b851c:	2200      	movs	r2, #0
   b851e:	4629      	mov	r1, r5
   b8520:	4803      	ldr	r0, [pc, #12]	; (b8530 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b8522:	f7fd ff5b 	bl	b63dc <application_thread_invoke>
   b8526:	e7b7      	b.n	b8498 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8528:	000b83c1 	.word	0x000b83c1
   b852c:	000b8645 	.word	0x000b8645
   b8530:	000b8b35 	.word	0x000b8b35

000b8534 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8538:	b08b      	sub	sp, #44	; 0x2c
   b853a:	4605      	mov	r5, r0
   b853c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8540:	460f      	mov	r7, r1
   b8542:	4690      	mov	r8, r2
   b8544:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8546:	f7fd ffd5 	bl	b64f4 <spark_cloud_flag_connected>
   b854a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b854c:	4683      	mov	fp, r0
   b854e:	bb38      	cbnz	r0, b85a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8550:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8554:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8556:	a905      	add	r1, sp, #20
   b8558:	4630      	mov	r0, r6
   b855a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b855e:	f7ff fecb 	bl	b82f8 <_ZN8particle5ErrorC1EOS0_>
   b8562:	2014      	movs	r0, #20
   b8564:	f7fb fd97 	bl	b4096 <_Znwj>
   b8568:	4604      	mov	r4, r0
   b856a:	b148      	cbz	r0, b8580 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b856c:	2302      	movs	r3, #2
   b856e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8570:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8572:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8576:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8578:	4631      	mov	r1, r6
   b857a:	300c      	adds	r0, #12
   b857c:	f7ff febc 	bl	b82f8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8580:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8582:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8584:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8588:	f7ff ff32 	bl	b83f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b858c:	4630      	mov	r0, r6
   b858e:	f7ff fec0 	bl	b8312 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8592:	a805      	add	r0, sp, #20
   b8594:	f7ff febd 	bl	b8312 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8598:	4628      	mov	r0, r5
   b859a:	b00b      	add	sp, #44	; 0x2c
   b859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b85a0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b85a2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b85a4:	2014      	movs	r0, #20
   b85a6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b85aa:	9307      	str	r3, [sp, #28]
   b85ac:	f7fb fd73 	bl	b4096 <_Znwj>
   b85b0:	4601      	mov	r1, r0
   b85b2:	b118      	cbz	r0, b85bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b85b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b85b8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b85ba:	7044      	strb	r4, [r0, #1]
   b85bc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b85be:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b85c0:	f7ff ff16 	bl	b83f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b85c4:	4b1e      	ldr	r3, [pc, #120]	; (b8640 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b85c6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b85c8:	2008      	movs	r0, #8
   b85ca:	f7fb fd64 	bl	b4096 <_Znwj>
   b85ce:	4604      	mov	r4, r0
   b85d0:	b110      	cbz	r0, b85d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b85d2:	a903      	add	r1, sp, #12
   b85d4:	f7ff fec7 	bl	b8366 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b85d8:	9600      	str	r6, [sp, #0]
   b85da:	fa5f f38a 	uxtb.w	r3, sl
   b85de:	464a      	mov	r2, r9
   b85e0:	4641      	mov	r1, r8
   b85e2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b85e4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b85e6:	f7fd ff8d 	bl	b6504 <spark_send_event>
   b85ea:	b9b8      	cbnz	r0, b861c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b85ec:	9b03      	ldr	r3, [sp, #12]
   b85ee:	785b      	ldrb	r3, [r3, #1]
   b85f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b85f4:	b993      	cbnz	r3, b861c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b85f6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b85fa:	a905      	add	r1, sp, #20
   b85fc:	a803      	add	r0, sp, #12
   b85fe:	9205      	str	r2, [sp, #20]
   b8600:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8604:	f7ff ff18 	bl	b8438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8608:	a805      	add	r0, sp, #20
   b860a:	f7ff fe82 	bl	b8312 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b860e:	a805      	add	r0, sp, #20
   b8610:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8612:	f7ff feb1 	bl	b8378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8616:	a806      	add	r0, sp, #24
   b8618:	f7fc fb90 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b861c:	a903      	add	r1, sp, #12
   b861e:	a805      	add	r0, sp, #20
   b8620:	f7ff fea1 	bl	b8366 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8624:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8626:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8628:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b862a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b862c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b862e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8630:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8632:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8634:	f7fc fb82 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8638:	a804      	add	r0, sp, #16
   b863a:	f7fc fb7f 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b863e:	e7ab      	b.n	b8598 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8640:	000b86c1 	.word	0x000b86c1

000b8644 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8644:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8648:	4605      	mov	r5, r0
	switch (__op)
   b864a:	d103      	bne.n	b8654 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b864c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b864e:	6003      	str	r3, [r0, #0]
      }
   b8650:	2000      	movs	r0, #0
   b8652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8654:	2a02      	cmp	r2, #2
   b8656:	d010      	beq.n	b867a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8658:	2a03      	cmp	r2, #3
   b865a:	d1f9      	bne.n	b8650 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b865c:	6804      	ldr	r4, [r0, #0]
   b865e:	2c00      	cmp	r4, #0
   b8660:	d0f6      	beq.n	b8650 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8662:	f104 0010 	add.w	r0, r4, #16
   b8666:	f7ff fe54 	bl	b8312 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b866a:	4620      	mov	r0, r4
   b866c:	f7fb febe 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8670:	2118      	movs	r1, #24
   b8672:	4620      	mov	r0, r4
   b8674:	f7fb fd13 	bl	b409e <_ZdlPvj>
   b8678:	e7ea      	b.n	b8650 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b867a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b867c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b867e:	f7fb fd0a 	bl	b4096 <_Znwj>
   b8682:	4604      	mov	r4, r0
   b8684:	b150      	cbz	r0, b869c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b8686:	4631      	mov	r1, r6
   b8688:	f7ff fec6 	bl	b8418 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b868c:	6930      	ldr	r0, [r6, #16]
   b868e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8692:	b108      	cbz	r0, b8698 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8694:	f001 fe74 	bl	ba380 <strdup>
        type_(type) {
   b8698:	6120      	str	r0, [r4, #16]
   b869a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b869c:	602c      	str	r4, [r5, #0]
	}
   b869e:	e7d7      	b.n	b8650 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b86a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b86a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b86a2:	2300      	movs	r3, #0
   b86a4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b86a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b86a8:	4604      	mov	r4, r0
   b86aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b86ac:	b12b      	cbz	r3, b86ba <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b86ae:	2202      	movs	r2, #2
   b86b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b86b2:	68eb      	ldr	r3, [r5, #12]
   b86b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b86b6:	68ab      	ldr	r3, [r5, #8]
   b86b8:	60a3      	str	r3, [r4, #8]
    }
   b86ba:	4620      	mov	r0, r4
   b86bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b86c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b86c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b86c2:	b089      	sub	sp, #36	; 0x24
   b86c4:	4604      	mov	r4, r0
   b86c6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b86c8:	a801      	add	r0, sp, #4
   b86ca:	4611      	mov	r1, r2
   b86cc:	f7ff fe54 	bl	b8378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b86d0:	b1a4      	cbz	r4, b86fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b86d2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b86d4:	b11d      	cbz	r5, b86de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b86d6:	4628      	mov	r0, r5
   b86d8:	f001 fe52 	bl	ba380 <strdup>
   b86dc:	4605      	mov	r5, r0
   b86de:	a801      	add	r0, sp, #4
   b86e0:	a903      	add	r1, sp, #12
        type_(type) {
   b86e2:	9503      	str	r5, [sp, #12]
   b86e4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b86e8:	f7ff fea6 	bl	b8438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b86ec:	a803      	add	r0, sp, #12
   b86ee:	f7ff fe10 	bl	b8312 <_ZN8particle5ErrorD1Ev>
   b86f2:	a802      	add	r0, sp, #8
   b86f4:	f7fc fb22 	bl	b4d3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b86f8:	b009      	add	sp, #36	; 0x24
   b86fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b86fc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b86fe:	2301      	movs	r3, #1
   b8700:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8704:	2a00      	cmp	r2, #0
   b8706:	d103      	bne.n	b8710 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8708:	e8c5 3f41 	strexb	r1, r3, [r5]
   b870c:	2900      	cmp	r1, #0
   b870e:	d1f7      	bne.n	b8700 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b8710:	d1ef      	bne.n	b86f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b8712:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8714:	f3bf 8f5b 	dmb	ish
   b8718:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b871a:	1d2b      	adds	r3, r5, #4
   b871c:	f3bf 8f5b 	dmb	ish
   b8720:	e853 6f00 	ldrex	r6, [r3]
   b8724:	e843 4200 	strex	r2, r4, [r3]
   b8728:	2a00      	cmp	r2, #0
   b872a:	d1f9      	bne.n	b8720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b872c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8730:	2e00      	cmp	r6, #0
   b8732:	d0de      	beq.n	b86f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8734:	4620      	mov	r0, r4
   b8736:	f7fd fe49 	bl	b63cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b873a:	4607      	mov	r7, r0
   b873c:	b160      	cbz	r0, b8758 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b873e:	f105 010c 	add.w	r1, r5, #12
   b8742:	4630      	mov	r0, r6
   b8744:	f7ff fe43 	bl	b83ce <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8748:	4630      	mov	r0, r6
   b874a:	f7fb fe4f 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b874e:	2110      	movs	r1, #16
   b8750:	4630      	mov	r0, r6
   b8752:	f7fb fca4 	bl	b409e <_ZdlPvj>
   b8756:	e7cc      	b.n	b86f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8758:	4631      	mov	r1, r6
   b875a:	a803      	add	r0, sp, #12
   b875c:	f7ff ffa0 	bl	b86a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8760:	7b2b      	ldrb	r3, [r5, #12]
   b8762:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8766:	2010      	movs	r0, #16
   b8768:	f7fb fc95 	bl	b4096 <_Znwj>
   b876c:	4605      	mov	r5, r0
   b876e:	b1d0      	cbz	r0, b87a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b8770:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8772:	2014      	movs	r0, #20
   b8774:	f7fb fc8f 	bl	b4096 <_Znwj>
   b8778:	4604      	mov	r4, r0
   b877a:	b178      	cbz	r0, b879c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b877c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b877e:	4601      	mov	r1, r0
   b8780:	a803      	add	r0, sp, #12
   b8782:	f7ff f8b3 	bl	b78ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8786:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8788:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b878a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b878c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b878e:	9205      	str	r2, [sp, #20]
   b8790:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8792:	60e3      	str	r3, [r4, #12]
   b8794:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b8798:	9206      	str	r2, [sp, #24]
   b879a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b879c:	4b06      	ldr	r3, [pc, #24]	; (b87b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b879e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b87a0:	4b06      	ldr	r3, [pc, #24]	; (b87bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b87a2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b87a4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b87a6:	a803      	add	r0, sp, #12
   b87a8:	f7fb fe20 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b87ac:	2200      	movs	r2, #0
   b87ae:	4629      	mov	r1, r5
   b87b0:	4803      	ldr	r0, [pc, #12]	; (b87c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b87b2:	f7fd fe13 	bl	b63dc <application_thread_invoke>
   b87b6:	e7c7      	b.n	b8748 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b87b8:	000b83e1 	.word	0x000b83e1
   b87bc:	000b87c5 	.word	0x000b87c5
   b87c0:	000b8b35 	.word	0x000b8b35

000b87c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b87c4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b87c6:	b570      	push	{r4, r5, r6, lr}
   b87c8:	4604      	mov	r4, r0
	switch (__op)
   b87ca:	d103      	bne.n	b87d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b87cc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b87ce:	6003      	str	r3, [r0, #0]
      }
   b87d0:	2000      	movs	r0, #0
   b87d2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b87d4:	2a02      	cmp	r2, #2
   b87d6:	d00c      	beq.n	b87f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b87d8:	2a03      	cmp	r2, #3
   b87da:	d1f9      	bne.n	b87d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b87dc:	6804      	ldr	r4, [r0, #0]
   b87de:	2c00      	cmp	r4, #0
   b87e0:	d0f6      	beq.n	b87d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b87e2:	4620      	mov	r0, r4
   b87e4:	f7fb fe02 	bl	b43ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b87e8:	2114      	movs	r1, #20
   b87ea:	4620      	mov	r0, r4
   b87ec:	f7fb fc57 	bl	b409e <_ZdlPvj>
   b87f0:	e7ee      	b.n	b87d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b87f2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b87f4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b87f6:	f7fb fc4e 	bl	b4096 <_Znwj>
   b87fa:	4605      	mov	r5, r0
   b87fc:	b120      	cbz	r0, b8808 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b87fe:	4631      	mov	r1, r6
   b8800:	f7ff ff4e 	bl	b86a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8804:	7c33      	ldrb	r3, [r6, #16]
   b8806:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8808:	6025      	str	r5, [r4, #0]
	}
   b880a:	e7e1      	b.n	b87d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b880c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b880c:	4770      	bx	lr

000b880e <_ZN9IPAddressD0Ev>:
   b880e:	b510      	push	{r4, lr}
   b8810:	2118      	movs	r1, #24
   b8812:	4604      	mov	r4, r0
   b8814:	f7fb fc43 	bl	b409e <_ZdlPvj>
   b8818:	4620      	mov	r0, r4
   b881a:	bd10      	pop	{r4, pc}

000b881c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b881c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b881e:	7d03      	ldrb	r3, [r0, #20]
   b8820:	2b06      	cmp	r3, #6
{
   b8822:	b08d      	sub	sp, #52	; 0x34
   b8824:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8826:	f100 0704 	add.w	r7, r0, #4
   b882a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b882e:	d012      	beq.n	b8856 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8830:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8834:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8838:	220a      	movs	r2, #10
   b883a:	4630      	mov	r0, r6
   b883c:	f7ff fb51 	bl	b7ee2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8840:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8842:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8844:	d019      	beq.n	b887a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8846:	2c00      	cmp	r4, #0
   b8848:	d0f4      	beq.n	b8834 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b884a:	212e      	movs	r1, #46	; 0x2e
   b884c:	4630      	mov	r0, r6
   b884e:	f7ff fb2f 	bl	b7eb0 <_ZN5Print5printEc>
   b8852:	4404      	add	r4, r0
   b8854:	e7ee      	b.n	b8834 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8856:	232f      	movs	r3, #47	; 0x2f
   b8858:	466a      	mov	r2, sp
   b885a:	4639      	mov	r1, r7
   b885c:	200a      	movs	r0, #10
		buf[0] = 0;
   b885e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8862:	f7fd fc7b 	bl	b615c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8866:	4668      	mov	r0, sp
   b8868:	f001 fda7 	bl	ba3ba <strlen>
   b886c:	6833      	ldr	r3, [r6, #0]
   b886e:	4602      	mov	r2, r0
   b8870:	68db      	ldr	r3, [r3, #12]
   b8872:	4669      	mov	r1, sp
   b8874:	4630      	mov	r0, r6
   b8876:	4798      	blx	r3
   b8878:	4604      	mov	r4, r0
    }
    return n;
}
   b887a:	4620      	mov	r0, r4
   b887c:	b00d      	add	sp, #52	; 0x34
   b887e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8880 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8880:	b510      	push	{r4, lr}
   b8882:	4b05      	ldr	r3, [pc, #20]	; (b8898 <_ZN9IPAddressC1Ev+0x18>)
   b8884:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8886:	2211      	movs	r2, #17
   b8888:	f840 3b04 	str.w	r3, [r0], #4
   b888c:	2100      	movs	r1, #0
   b888e:	f001 fd1e 	bl	ba2ce <memset>
}
   b8892:	4620      	mov	r0, r4
   b8894:	bd10      	pop	{r4, pc}
   b8896:	bf00      	nop
   b8898:	000bcf20 	.word	0x000bcf20

000b889c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b889c:	4603      	mov	r3, r0
   b889e:	4a07      	ldr	r2, [pc, #28]	; (b88bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b88a0:	b510      	push	{r4, lr}
   b88a2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b88a6:	f101 0210 	add.w	r2, r1, #16
   b88aa:	f851 4b04 	ldr.w	r4, [r1], #4
   b88ae:	f843 4b04 	str.w	r4, [r3], #4
   b88b2:	4291      	cmp	r1, r2
   b88b4:	d1f9      	bne.n	b88aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b88b6:	780a      	ldrb	r2, [r1, #0]
   b88b8:	701a      	strb	r2, [r3, #0]
}
   b88ba:	bd10      	pop	{r4, pc}
   b88bc:	000bcf20 	.word	0x000bcf20

000b88c0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b88c0:	4a02      	ldr	r2, [pc, #8]	; (b88cc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b88c2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b88c6:	2204      	movs	r2, #4
   b88c8:	7502      	strb	r2, [r0, #20]
}
   b88ca:	4770      	bx	lr
   b88cc:	000bcf20 	.word	0x000bcf20

000b88d0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b88d0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b88d2:	2b04      	cmp	r3, #4
   b88d4:	d104      	bne.n	b88e0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b88d6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b88d8:	3800      	subs	r0, #0
   b88da:	bf18      	it	ne
   b88dc:	2001      	movne	r0, #1
   b88de:	4770      	bx	lr
    } else if (version() == 6) {
   b88e0:	2b06      	cmp	r3, #6
   b88e2:	d107      	bne.n	b88f4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b88e4:	6843      	ldr	r3, [r0, #4]
   b88e6:	b93b      	cbnz	r3, b88f8 <_ZNK9IPAddresscvbEv+0x28>
   b88e8:	6883      	ldr	r3, [r0, #8]
   b88ea:	b92b      	cbnz	r3, b88f8 <_ZNK9IPAddresscvbEv+0x28>
   b88ec:	68c3      	ldr	r3, [r0, #12]
   b88ee:	b91b      	cbnz	r3, b88f8 <_ZNK9IPAddresscvbEv+0x28>
   b88f0:	6900      	ldr	r0, [r0, #16]
   b88f2:	e7f1      	b.n	b88d8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b88f4:	2000      	movs	r0, #0
   b88f6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b88f8:	2001      	movs	r0, #1
}
   b88fa:	4770      	bx	lr

000b88fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b88fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b88fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8902:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8906:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b890a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b890e:	2304      	movs	r3, #4
   b8910:	6041      	str	r1, [r0, #4]
   b8912:	7503      	strb	r3, [r0, #20]
}
   b8914:	bd10      	pop	{r4, pc}
	...

000b8918 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8918:	b507      	push	{r0, r1, r2, lr}
   b891a:	4b06      	ldr	r3, [pc, #24]	; (b8934 <_ZN9IPAddressC1EPKh+0x1c>)
   b891c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b891e:	78cb      	ldrb	r3, [r1, #3]
   b8920:	9300      	str	r3, [sp, #0]
   b8922:	788b      	ldrb	r3, [r1, #2]
   b8924:	784a      	ldrb	r2, [r1, #1]
   b8926:	7809      	ldrb	r1, [r1, #0]
   b8928:	f7ff ffe8 	bl	b88fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b892c:	b003      	add	sp, #12
   b892e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8932:	bf00      	nop
   b8934:	000bcf20 	.word	0x000bcf20

000b8938 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8938:	7441      	strb	r1, [r0, #17]
}
   b893a:	4770      	bx	lr

000b893c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b893c:	4770      	bx	lr

000b893e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b893e:	4770      	bx	lr

000b8940 <_ZN9USBSerial4readEv>:
{
   b8940:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8942:	2100      	movs	r1, #0
   b8944:	7c00      	ldrb	r0, [r0, #16]
   b8946:	f7fd fcf1 	bl	b632c <HAL_USB_USART_Receive_Data>
}
   b894a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b894e:	bd08      	pop	{r3, pc}

000b8950 <_ZN9USBSerial4peekEv>:
{
   b8950:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8952:	2101      	movs	r1, #1
   b8954:	7c00      	ldrb	r0, [r0, #16]
   b8956:	f7fd fce9 	bl	b632c <HAL_USB_USART_Receive_Data>
}
   b895a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b895e:	bd08      	pop	{r3, pc}

000b8960 <_ZN9USBSerial17availableForWriteEv>:
{
   b8960:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8962:	7c00      	ldrb	r0, [r0, #16]
   b8964:	f7fd fcda 	bl	b631c <HAL_USB_USART_Available_Data_For_Write>
}
   b8968:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b896c:	bd08      	pop	{r3, pc}

000b896e <_ZN9USBSerial9availableEv>:
{
   b896e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8970:	7c00      	ldrb	r0, [r0, #16]
   b8972:	f7fd fccb 	bl	b630c <HAL_USB_USART_Available_Data>
}
   b8976:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b897a:	bd08      	pop	{r3, pc}

000b897c <_ZN9USBSerial5writeEh>:
{
   b897c:	b513      	push	{r0, r1, r4, lr}
   b897e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8980:	7c00      	ldrb	r0, [r0, #16]
{
   b8982:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8984:	f7fd fcca 	bl	b631c <HAL_USB_USART_Available_Data_For_Write>
   b8988:	2800      	cmp	r0, #0
   b898a:	9901      	ldr	r1, [sp, #4]
   b898c:	dc01      	bgt.n	b8992 <_ZN9USBSerial5writeEh+0x16>
   b898e:	7c60      	ldrb	r0, [r4, #17]
   b8990:	b120      	cbz	r0, b899c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8992:	7c20      	ldrb	r0, [r4, #16]
   b8994:	f7fd fcd2 	bl	b633c <HAL_USB_USART_Send_Data>
   b8998:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b899c:	b002      	add	sp, #8
   b899e:	bd10      	pop	{r4, pc}

000b89a0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b89a0:	7c00      	ldrb	r0, [r0, #16]
   b89a2:	f7fd bcd3 	b.w	b634c <HAL_USB_USART_Flush_Data>

000b89a6 <_ZN9USBSerialD0Ev>:
   b89a6:	b510      	push	{r4, lr}
   b89a8:	2114      	movs	r1, #20
   b89aa:	4604      	mov	r4, r0
   b89ac:	f7fb fb77 	bl	b409e <_ZdlPvj>
   b89b0:	4620      	mov	r0, r4
   b89b2:	bd10      	pop	{r4, pc}

000b89b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b89b4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b89b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b89ba:	4604      	mov	r4, r0
   b89bc:	4608      	mov	r0, r1
   b89be:	2100      	movs	r1, #0
   b89c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b89c4:	4b04      	ldr	r3, [pc, #16]	; (b89d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b89c6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b89c8:	2301      	movs	r3, #1
  _serial = serial;
   b89ca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b89cc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b89ce:	4611      	mov	r1, r2
   b89d0:	f7fd fc94 	bl	b62fc <HAL_USB_USART_Init>
}
   b89d4:	4620      	mov	r0, r4
   b89d6:	bd10      	pop	{r4, pc}
   b89d8:	000bcf34 	.word	0x000bcf34

000b89dc <_Z19acquireSerialBufferv>:
{
   b89dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b89de:	2214      	movs	r2, #20
{
   b89e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b89e2:	2100      	movs	r1, #0
   b89e4:	f001 fc73 	bl	ba2ce <memset>
}
   b89e8:	4620      	mov	r0, r4
   b89ea:	bd10      	pop	{r4, pc}

000b89ec <_Z16_fetch_usbserialv>:
{
   b89ec:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b89ee:	4c0f      	ldr	r4, [pc, #60]	; (b8a2c <_Z16_fetch_usbserialv+0x40>)
{
   b89f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b89f2:	a803      	add	r0, sp, #12
   b89f4:	f7ff fff2 	bl	b89dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b89f8:	7821      	ldrb	r1, [r4, #0]
   b89fa:	f3bf 8f5b 	dmb	ish
   b89fe:	f011 0101 	ands.w	r1, r1, #1
   b8a02:	d10f      	bne.n	b8a24 <_Z16_fetch_usbserialv+0x38>
   b8a04:	4620      	mov	r0, r4
   b8a06:	9101      	str	r1, [sp, #4]
   b8a08:	f7fb fb4b 	bl	b40a2 <__cxa_guard_acquire>
   b8a0c:	9901      	ldr	r1, [sp, #4]
   b8a0e:	b148      	cbz	r0, b8a24 <_Z16_fetch_usbserialv+0x38>
   b8a10:	aa03      	add	r2, sp, #12
   b8a12:	4807      	ldr	r0, [pc, #28]	; (b8a30 <_Z16_fetch_usbserialv+0x44>)
   b8a14:	f7ff ffce 	bl	b89b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8a18:	4620      	mov	r0, r4
   b8a1a:	f7fb fb47 	bl	b40ac <__cxa_guard_release>
   b8a1e:	4805      	ldr	r0, [pc, #20]	; (b8a34 <_Z16_fetch_usbserialv+0x48>)
   b8a20:	f001 fc10 	bl	ba244 <atexit>
	return _usbserial;
}
   b8a24:	4802      	ldr	r0, [pc, #8]	; (b8a30 <_Z16_fetch_usbserialv+0x44>)
   b8a26:	b008      	add	sp, #32
   b8a28:	bd10      	pop	{r4, pc}
   b8a2a:	bf00      	nop
   b8a2c:	2003e6f8 	.word	0x2003e6f8
   b8a30:	2003e6fc 	.word	0x2003e6fc
   b8a34:	000b893d 	.word	0x000b893d

000b8a38 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8a38:	4700      	bx	r0
	...

000b8a3c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8a3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b8a40:	2400      	movs	r4, #0
{
   b8a42:	461d      	mov	r5, r3
   b8a44:	460f      	mov	r7, r1
   b8a46:	4690      	mov	r8, r2
   b8a48:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b8a4a:	f7fd fa75 	bl	b5f38 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b8a4e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8a50:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b8a54:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8a58:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b8a5c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8a60:	bfa2      	ittt	ge
   b8a62:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b8a66:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b8a6a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8a6c:	4907      	ldr	r1, [pc, #28]	; (b8a8c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8a6e:	9400      	str	r4, [sp, #0]
   b8a70:	4643      	mov	r3, r8
   b8a72:	463a      	mov	r2, r7
   b8a74:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8a76:	bfa8      	it	ge
   b8a78:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8a7c:	f7fd fa54 	bl	b5f28 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b8a80:	fab0 f080 	clz	r0, r0
   b8a84:	0940      	lsrs	r0, r0, #5
   b8a86:	b004      	add	sp, #16
   b8a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8a8c:	000b8a39 	.word	0x000b8a39

000b8a90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8a90:	4770      	bx	lr

000b8a92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8a92:	7441      	strb	r1, [r0, #17]
}
   b8a94:	4770      	bx	lr

000b8a96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8a96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8a98:	7c00      	ldrb	r0, [r0, #16]
   b8a9a:	f7fd fba7 	bl	b61ec <hal_usart_available_data_for_write>
}
   b8a9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8aa2:	bd08      	pop	{r3, pc}

000b8aa4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8aa4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8aa6:	7c00      	ldrb	r0, [r0, #16]
   b8aa8:	f7fd fb78 	bl	b619c <hal_usart_available>
}
   b8aac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8ab0:	bd08      	pop	{r3, pc}

000b8ab2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8ab2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8ab4:	7c00      	ldrb	r0, [r0, #16]
   b8ab6:	f7fd fb81 	bl	b61bc <hal_usart_peek>
}
   b8aba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8abe:	bd08      	pop	{r3, pc}

000b8ac0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8ac0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8ac2:	7c00      	ldrb	r0, [r0, #16]
   b8ac4:	f7fd fb72 	bl	b61ac <hal_usart_read>
}
   b8ac8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8acc:	bd08      	pop	{r3, pc}

000b8ace <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8ace:	7c00      	ldrb	r0, [r0, #16]
   b8ad0:	f7fd bb7c 	b.w	b61cc <hal_usart_flush>

000b8ad4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8ad6:	7c45      	ldrb	r5, [r0, #17]
{
   b8ad8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8ada:	b12d      	cbz	r5, b8ae8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8adc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8ade:	b003      	add	sp, #12
   b8ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8ae4:	f7fd bb52 	b.w	b618c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8ae8:	7c00      	ldrb	r0, [r0, #16]
   b8aea:	9101      	str	r1, [sp, #4]
   b8aec:	f7fd fb7e 	bl	b61ec <hal_usart_available_data_for_write>
   b8af0:	2800      	cmp	r0, #0
   b8af2:	9901      	ldr	r1, [sp, #4]
   b8af4:	dcf2      	bgt.n	b8adc <_ZN11USARTSerial5writeEh+0x8>
}
   b8af6:	4628      	mov	r0, r5
   b8af8:	b003      	add	sp, #12
   b8afa:	bd30      	pop	{r4, r5, pc}

000b8afc <_ZN11USARTSerialD0Ev>:
   b8afc:	b510      	push	{r4, lr}
   b8afe:	2114      	movs	r1, #20
   b8b00:	4604      	mov	r4, r0
   b8b02:	f7fb facc 	bl	b409e <_ZdlPvj>
   b8b06:	4620      	mov	r0, r4
   b8b08:	bd10      	pop	{r4, pc}
	...

000b8b0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8b0c:	b510      	push	{r4, lr}
   b8b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8b12:	4604      	mov	r4, r0
   b8b14:	4608      	mov	r0, r1
   b8b16:	4611      	mov	r1, r2
   b8b18:	2200      	movs	r2, #0
   b8b1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8b1e:	4b04      	ldr	r3, [pc, #16]	; (b8b30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8b20:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8b22:	2301      	movs	r3, #1
  _serial = serial;
   b8b24:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8b26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8b28:	f7fd fb68 	bl	b61fc <hal_usart_init_ex>
}
   b8b2c:	4620      	mov	r0, r4
   b8b2e:	bd10      	pop	{r4, pc}
   b8b30:	000bcf64 	.word	0x000bcf64

000b8b34 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8b34:	b510      	push	{r4, lr}
      if (_M_empty())
   b8b36:	6883      	ldr	r3, [r0, #8]
   b8b38:	4604      	mov	r4, r0
   b8b3a:	b90b      	cbnz	r3, b8b40 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8b3c:	f000 fda4 	bl	b9688 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8b40:	68c3      	ldr	r3, [r0, #12]
   b8b42:	4798      	blx	r3
      if (_M_manager)
   b8b44:	68a3      	ldr	r3, [r4, #8]
   b8b46:	b11b      	cbz	r3, b8b50 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8b48:	2203      	movs	r2, #3
   b8b4a:	4621      	mov	r1, r4
   b8b4c:	4620      	mov	r0, r4
   b8b4e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8b50:	4620      	mov	r0, r4
   b8b52:	2110      	movs	r1, #16
}
   b8b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b8b58:	f7fb baa1 	b.w	b409e <_ZdlPvj>

000b8b5c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8b5c:	4770      	bx	lr

000b8b5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b60:	4606      	mov	r6, r0
   b8b62:	4615      	mov	r5, r2
   b8b64:	460c      	mov	r4, r1
   b8b66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8b68:	42bc      	cmp	r4, r7
   b8b6a:	d006      	beq.n	b8b7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8b6c:	6833      	ldr	r3, [r6, #0]
   b8b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8b72:	689b      	ldr	r3, [r3, #8]
   b8b74:	4630      	mov	r0, r6
   b8b76:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8b78:	e7f6      	b.n	b8b68 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8b7a:	4628      	mov	r0, r5
   b8b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b7e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8b7e:	7c00      	ldrb	r0, [r0, #16]
   b8b80:	2200      	movs	r2, #0
   b8b82:	f7fd bb43 	b.w	b620c <hal_i2c_write>

000b8b86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8b86:	7c00      	ldrb	r0, [r0, #16]
   b8b88:	2100      	movs	r1, #0
   b8b8a:	f7fd bb47 	b.w	b621c <hal_i2c_available>

000b8b8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8b8e:	7c00      	ldrb	r0, [r0, #16]
   b8b90:	2100      	movs	r1, #0
   b8b92:	f7fd bb4b 	b.w	b622c <hal_i2c_read>

000b8b96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8b96:	7c00      	ldrb	r0, [r0, #16]
   b8b98:	2100      	movs	r1, #0
   b8b9a:	f7fd bb4f 	b.w	b623c <hal_i2c_peek>

000b8b9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8b9e:	7c00      	ldrb	r0, [r0, #16]
   b8ba0:	2100      	movs	r1, #0
   b8ba2:	f7fd bb53 	b.w	b624c <hal_i2c_flush>

000b8ba6 <_ZN7TwoWireD0Ev>:
   b8ba6:	b510      	push	{r4, lr}
   b8ba8:	2114      	movs	r1, #20
   b8baa:	4604      	mov	r4, r0
   b8bac:	f7fb fa77 	bl	b409e <_ZdlPvj>
   b8bb0:	4620      	mov	r0, r4
   b8bb2:	bd10      	pop	{r4, pc}

000b8bb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8bb4:	b538      	push	{r3, r4, r5, lr}
   b8bb6:	4604      	mov	r4, r0
   b8bb8:	4615      	mov	r5, r2
   b8bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8bbe:	2200      	movs	r2, #0
   b8bc0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8bc4:	4b09      	ldr	r3, [pc, #36]	; (b8bec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8bc6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8bc8:	4608      	mov	r0, r1
   b8bca:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b8bcc:	4629      	mov	r1, r5
   b8bce:	f7fd fb4d 	bl	b626c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8bd2:	30bf      	adds	r0, #191	; 0xbf
   b8bd4:	d108      	bne.n	b8be8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8bd6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8bd8:	07db      	lsls	r3, r3, #31
   b8bda:	d505      	bpl.n	b8be8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b8bdc:	6868      	ldr	r0, [r5, #4]
   b8bde:	f7fd fcc1 	bl	b6564 <free>
    free(conf.tx_buffer);
   b8be2:	68e8      	ldr	r0, [r5, #12]
   b8be4:	f7fd fcbe 	bl	b6564 <free>
}
   b8be8:	4620      	mov	r0, r4
   b8bea:	bd38      	pop	{r3, r4, r5, pc}
   b8bec:	000bcf94 	.word	0x000bcf94

000b8bf0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8bf0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8bf2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8bf4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8bf8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8bfa:	2201      	movs	r2, #1
   b8bfc:	f04f 33ff 	mov.w	r3, #4294967295
   b8c00:	f10d 0107 	add.w	r1, sp, #7
   b8c04:	47a0      	blx	r4
}
   b8c06:	b002      	add	sp, #8
   b8c08:	bd10      	pop	{r4, pc}

000b8c0a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8c0a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8c0c:	6803      	ldr	r3, [r0, #0]
   b8c0e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8c10:	f04f 33ff 	mov.w	r3, #4294967295
   b8c14:	46a4      	mov	ip, r4
}
   b8c16:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8c1a:	4760      	bx	ip

000b8c1c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8c1c:	b513      	push	{r0, r1, r4, lr}
   b8c1e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8c20:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8c22:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8c26:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8c28:	f10d 0107 	add.w	r1, sp, #7
   b8c2c:	2201      	movs	r2, #1
   b8c2e:	47a0      	blx	r4
}
   b8c30:	b002      	add	sp, #8
   b8c32:	bd10      	pop	{r4, pc}

000b8c34 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8c34:	b510      	push	{r4, lr}
   b8c36:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8c38:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8c3c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8c40:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8c42:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8c44:	d008      	beq.n	b8c58 <_ZN9TCPClient4readEv+0x24>
   b8c46:	6963      	ldr	r3, [r4, #20]
   b8c48:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8c4c:	1c51      	adds	r1, r2, #1
   b8c4e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8c52:	4413      	add	r3, r2
   b8c54:	7918      	ldrb	r0, [r3, #4]
}
   b8c56:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8c58:	6803      	ldr	r3, [r0, #0]
   b8c5a:	691b      	ldr	r3, [r3, #16]
   b8c5c:	4798      	blx	r3
   b8c5e:	2800      	cmp	r0, #0
   b8c60:	d1f1      	bne.n	b8c46 <_ZN9TCPClient4readEv+0x12>
   b8c62:	f04f 30ff 	mov.w	r0, #4294967295
   b8c66:	e7f6      	b.n	b8c56 <_ZN9TCPClient4readEv+0x22>

000b8c68 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8c68:	4770      	bx	lr

000b8c6a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8c6a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8c6c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8c6e:	43c0      	mvns	r0, r0
   b8c70:	0fc0      	lsrs	r0, r0, #31
   b8c72:	4770      	bx	lr

000b8c74 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8c74:	4770      	bx	lr
	...

000b8c78 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8c78:	4b06      	ldr	r3, [pc, #24]	; (b8c94 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8c7a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8c7c:	b510      	push	{r4, lr}
   b8c7e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8c82:	d005      	beq.n	b8c90 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8c84:	4608      	mov	r0, r1
   b8c86:	f000 fd03 	bl	b9690 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8c8a:	2800      	cmp	r0, #0
   b8c8c:	bf08      	it	eq
   b8c8e:	2400      	moveq	r4, #0
      }
   b8c90:	4620      	mov	r0, r4
   b8c92:	bd10      	pop	{r4, pc}
   b8c94:	000bce9c 	.word	0x000bce9c

000b8c98 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8c98:	b510      	push	{r4, lr}
   b8c9a:	21ac      	movs	r1, #172	; 0xac
   b8c9c:	4604      	mov	r4, r0
   b8c9e:	f7fb f9fe 	bl	b409e <_ZdlPvj>
   b8ca2:	4620      	mov	r0, r4
   b8ca4:	bd10      	pop	{r4, pc}

000b8ca6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8ca6:	21ac      	movs	r1, #172	; 0xac
   b8ca8:	f7fb b9f9 	b.w	b409e <_ZdlPvj>

000b8cac <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8cb0:	f04f 0800 	mov.w	r8, #0
   b8cb4:	b086      	sub	sp, #24
   b8cb6:	461c      	mov	r4, r3
   b8cb8:	f8c0 8004 	str.w	r8, [r0, #4]
   b8cbc:	4605      	mov	r5, r0
   b8cbe:	460e      	mov	r6, r1
   b8cc0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8cc2:	4641      	mov	r1, r8
   b8cc4:	2210      	movs	r2, #16
   b8cc6:	a802      	add	r0, sp, #8
   b8cc8:	f001 fb01 	bl	ba2ce <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8ccc:	1c63      	adds	r3, r4, #1
   b8cce:	d009      	beq.n	b8ce4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8cd4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8cd8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8cdc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8ce0:	435c      	muls	r4, r3
   b8ce2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8ce4:	6968      	ldr	r0, [r5, #20]
   b8ce6:	2310      	movs	r3, #16
   b8ce8:	9300      	str	r3, [sp, #0]
   b8cea:	6800      	ldr	r0, [r0, #0]
   b8cec:	ab02      	add	r3, sp, #8
   b8cee:	f241 0205 	movw	r2, #4101	; 0x1005
   b8cf2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8cf6:	f7fd fac1 	bl	b627c <sock_setsockopt>
    if (ret < 0) {
   b8cfa:	2800      	cmp	r0, #0
   b8cfc:	da07      	bge.n	b8d0e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8cfe:	f7fd fc69 	bl	b65d4 <__errno>
   b8d02:	6803      	ldr	r3, [r0, #0]
   b8d04:	606b      	str	r3, [r5, #4]
        return 0;
   b8d06:	2000      	movs	r0, #0
}
   b8d08:	b006      	add	sp, #24
   b8d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8d0e:	6968      	ldr	r0, [r5, #20]
   b8d10:	2300      	movs	r3, #0
   b8d12:	6800      	ldr	r0, [r0, #0]
   b8d14:	463a      	mov	r2, r7
   b8d16:	4631      	mov	r1, r6
   b8d18:	f7fd fad0 	bl	b62bc <sock_send>
    if (ret < 0) {
   b8d1c:	1e03      	subs	r3, r0, #0
   b8d1e:	dbee      	blt.n	b8cfe <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8d20:	4618      	mov	r0, r3
   b8d22:	e7f1      	b.n	b8d08 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8d24 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8d24:	b530      	push	{r4, r5, lr}
   b8d26:	b087      	sub	sp, #28
   b8d28:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8d2a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8d2c:	4668      	mov	r0, sp
   b8d2e:	f7ff fdf3 	bl	b8918 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d34:	3404      	adds	r4, #4
   b8d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8d38:	682b      	ldr	r3, [r5, #0]
   b8d3a:	7023      	strb	r3, [r4, #0]
    }
   b8d3c:	b007      	add	sp, #28
   b8d3e:	bd30      	pop	{r4, r5, pc}

000b8d40 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8d40:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8d42:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8d44:	4b05      	ldr	r3, [pc, #20]	; (b8d5c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8d46:	4604      	mov	r4, r0
   b8d48:	358c      	adds	r5, #140	; 0x8c
   b8d4a:	f844 3b04 	str.w	r3, [r4], #4
   b8d4e:	4606      	mov	r6, r0
   b8d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8d54:	682b      	ldr	r3, [r5, #0]
   b8d56:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8d58:	4630      	mov	r0, r6
   b8d5a:	bd70      	pop	{r4, r5, r6, pc}
   b8d5c:	000bcf20 	.word	0x000bcf20

000b8d60 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8d64:	4698      	mov	r8, r3
    stop();
   b8d66:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8d68:	b093      	sub	sp, #76	; 0x4c
   b8d6a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8d6c:	2400      	movs	r4, #0
    stop();
   b8d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8d70:	4606      	mov	r6, r0
   b8d72:	4617      	mov	r7, r2
    stop();
   b8d74:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8d76:	4628      	mov	r0, r5
   b8d78:	466b      	mov	r3, sp
   b8d7a:	4622      	mov	r2, r4
   b8d7c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8d7e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8d80:	f7fd f8c2 	bl	b5f08 <netdb_getaddrinfo>
   b8d84:	4605      	mov	r5, r0
   b8d86:	2800      	cmp	r0, #0
   b8d88:	d163      	bne.n	b8e52 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8d8a:	9b00      	ldr	r3, [sp, #0]
   b8d8c:	2b00      	cmp	r3, #0
   b8d8e:	d04b      	beq.n	b8e28 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8d90:	695b      	ldr	r3, [r3, #20]
   b8d92:	2b00      	cmp	r3, #0
   b8d94:	d048      	beq.n	b8e28 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8d96:	a806      	add	r0, sp, #24
   b8d98:	f7ff fd72 	bl	b8880 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8d9c:	9b00      	ldr	r3, [sp, #0]
   b8d9e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8da0:	7863      	ldrb	r3, [r4, #1]
   b8da2:	2b02      	cmp	r3, #2
   b8da4:	d104      	bne.n	b8db0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8da6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8da8:	a806      	add	r0, sp, #24
   b8daa:	f7ff ffbb 	bl	b8d24 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8dae:	e026      	b.n	b8dfe <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8db0:	2b0a      	cmp	r3, #10
   b8db2:	d124      	bne.n	b8dfe <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8db4:	2211      	movs	r2, #17
   b8db6:	4629      	mov	r1, r5
   b8db8:	a801      	add	r0, sp, #4
   b8dba:	f001 fa88 	bl	ba2ce <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8dbe:	68a3      	ldr	r3, [r4, #8]
   b8dc0:	2b00      	cmp	r3, #0
   b8dc2:	d038      	beq.n	b8e36 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8dc4:	f104 0308 	add.w	r3, r4, #8
   b8dc8:	f10d 0c04 	add.w	ip, sp, #4
   b8dcc:	3418      	adds	r4, #24
   b8dce:	6818      	ldr	r0, [r3, #0]
   b8dd0:	6859      	ldr	r1, [r3, #4]
   b8dd2:	4662      	mov	r2, ip
   b8dd4:	c203      	stmia	r2!, {r0, r1}
   b8dd6:	3308      	adds	r3, #8
   b8dd8:	42a3      	cmp	r3, r4
   b8dda:	4694      	mov	ip, r2
   b8ddc:	d1f7      	bne.n	b8dce <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8dde:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8de0:	a901      	add	r1, sp, #4
   b8de2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8de4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8de8:	f7ff fd58 	bl	b889c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8dec:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8df0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8df4:	ac07      	add	r4, sp, #28
   b8df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8df8:	f8dc 3000 	ldr.w	r3, [ip]
   b8dfc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8dfe:	a806      	add	r0, sp, #24
   b8e00:	f7ff fd66 	bl	b88d0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8e04:	b180      	cbz	r0, b8e28 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8e06:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8e08:	ad07      	add	r5, sp, #28
   b8e0a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8e0e:	4b12      	ldr	r3, [pc, #72]	; (b8e58 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8e10:	930c      	str	r3, [sp, #48]	; 0x30
   b8e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e14:	ac0d      	add	r4, sp, #52	; 0x34
   b8e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e18:	682b      	ldr	r3, [r5, #0]
   b8e1a:	7023      	strb	r3, [r4, #0]
   b8e1c:	463a      	mov	r2, r7
   b8e1e:	4643      	mov	r3, r8
   b8e20:	a90c      	add	r1, sp, #48	; 0x30
   b8e22:	4630      	mov	r0, r6
   b8e24:	47c8      	blx	r9
   b8e26:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8e28:	9800      	ldr	r0, [sp, #0]
   b8e2a:	f7fd f865 	bl	b5ef8 <netdb_freeaddrinfo>
}
   b8e2e:	4628      	mov	r0, r5
   b8e30:	b013      	add	sp, #76	; 0x4c
   b8e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8e36:	68e3      	ldr	r3, [r4, #12]
   b8e38:	2b00      	cmp	r3, #0
   b8e3a:	d1c3      	bne.n	b8dc4 <_ZN9TCPClient7connectEPKctm+0x64>
   b8e3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8e40:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8e44:	f7fd f992 	bl	b616c <inet_htonl>
   b8e48:	4581      	cmp	r9, r0
   b8e4a:	d1bb      	bne.n	b8dc4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8e4c:	f104 0114 	add.w	r1, r4, #20
   b8e50:	e7aa      	b.n	b8da8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8e52:	4625      	mov	r5, r4
   b8e54:	e7e8      	b.n	b8e28 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8e56:	bf00      	nop
   b8e58:	000bcf20 	.word	0x000bcf20

000b8e5c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8e5c:	b538      	push	{r3, r4, r5, lr}
   b8e5e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8e60:	681a      	ldr	r2, [r3, #0]
   b8e62:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8e64:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8e66:	da10      	bge.n	b8e8a <_ZN9TCPClient9connectedEv+0x2e>
   b8e68:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e70:	429a      	cmp	r2, r3
   b8e72:	d10a      	bne.n	b8e8a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8e74:	6803      	ldr	r3, [r0, #0]
   b8e76:	691b      	ldr	r3, [r3, #16]
   b8e78:	4798      	blx	r3
        if (!rv) {
   b8e7a:	4604      	mov	r4, r0
   b8e7c:	b928      	cbnz	r0, b8e8a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8e7e:	682b      	ldr	r3, [r5, #0]
   b8e80:	4628      	mov	r0, r5
   b8e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8e84:	4798      	blx	r3
        rv = available();
   b8e86:	4620      	mov	r0, r4
}
   b8e88:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8e8a:	2001      	movs	r0, #1
   b8e8c:	e7fc      	b.n	b8e88 <_ZN9TCPClient9connectedEv+0x2c>

000b8e8e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8e8e:	b510      	push	{r4, lr}
   b8e90:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8e92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e9a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8e9c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8e9e:	d005      	beq.n	b8eac <_ZN9TCPClient4peekEv+0x1e>
   b8ea0:	6963      	ldr	r3, [r4, #20]
   b8ea2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8ea6:	4413      	add	r3, r2
   b8ea8:	7918      	ldrb	r0, [r3, #4]
}
   b8eaa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8eac:	6803      	ldr	r3, [r0, #0]
   b8eae:	691b      	ldr	r3, [r3, #16]
   b8eb0:	4798      	blx	r3
   b8eb2:	2800      	cmp	r0, #0
   b8eb4:	d1f4      	bne.n	b8ea0 <_ZN9TCPClient4peekEv+0x12>
   b8eb6:	f04f 30ff 	mov.w	r0, #4294967295
   b8eba:	e7f6      	b.n	b8eaa <_ZN9TCPClient4peekEv+0x1c>

000b8ebc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ebe:	6943      	ldr	r3, [r0, #20]
   b8ec0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8ec2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8ec6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8eca:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8ecc:	4605      	mov	r5, r0
   b8ece:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8ed0:	d016      	beq.n	b8f00 <_ZN9TCPClient4readEPhj+0x44>
   b8ed2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8ed4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8ed8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8edc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8ede:	42bc      	cmp	r4, r7
   b8ee0:	bf28      	it	cs
   b8ee2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8ee4:	3304      	adds	r3, #4
   b8ee6:	4622      	mov	r2, r4
   b8ee8:	4419      	add	r1, r3
   b8eea:	4630      	mov	r0, r6
   b8eec:	f001 f9c7 	bl	ba27e <memcpy>
   b8ef0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8ef2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8ef6:	4423      	add	r3, r4
   b8ef8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8efc:	4620      	mov	r0, r4
   b8efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8f00:	6803      	ldr	r3, [r0, #0]
   b8f02:	691b      	ldr	r3, [r3, #16]
   b8f04:	4798      	blx	r3
   b8f06:	2800      	cmp	r0, #0
   b8f08:	d1e3      	bne.n	b8ed2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8f0a:	f04f 34ff 	mov.w	r4, #4294967295
   b8f0e:	e7f5      	b.n	b8efc <_ZN9TCPClient4readEPhj+0x40>

000b8f10 <_ZN9TCPClient12flush_bufferEv>:
   b8f10:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8f12:	2300      	movs	r3, #0
   b8f14:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8f18:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8f1a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8f1e:	4770      	bx	lr

000b8f20 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f24:	461f      	mov	r7, r3
    stop();
   b8f26:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8f28:	460c      	mov	r4, r1
    stop();
   b8f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8f2c:	b08a      	sub	sp, #40	; 0x28
   b8f2e:	4605      	mov	r5, r0
   b8f30:	4616      	mov	r6, r2
    stop();
   b8f32:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8f34:	7d23      	ldrb	r3, [r4, #20]
   b8f36:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8f3a:	2b04      	cmp	r3, #4
   b8f3c:	bf0c      	ite	eq
   b8f3e:	2002      	moveq	r0, #2
   b8f40:	200a      	movne	r0, #10
   b8f42:	2206      	movs	r2, #6
   b8f44:	2101      	movs	r1, #1
   b8f46:	f7fd f9c1 	bl	b62cc <sock_socket>
   b8f4a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8f4e:	696b      	ldr	r3, [r5, #20]
   b8f50:	681b      	ldr	r3, [r3, #0]
   b8f52:	2b00      	cmp	r3, #0
   b8f54:	da08      	bge.n	b8f68 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8f56:	682b      	ldr	r3, [r5, #0]
   b8f58:	4628      	mov	r0, r5
   b8f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8f5c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8f5e:	4798      	blx	r3
}
   b8f60:	4620      	mov	r0, r4
   b8f62:	b00a      	add	sp, #40	; 0x28
   b8f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8f68:	4628      	mov	r0, r5
   b8f6a:	f7ff ffd1 	bl	b8f10 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8f6e:	b1b7      	cbz	r7, b8f9e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8f70:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8f72:	a903      	add	r1, sp, #12
   b8f74:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8f76:	9303      	str	r3, [sp, #12]
   b8f78:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8f7c:	f7fc ffe4 	bl	b5f48 <if_index_to_name>
   b8f80:	2800      	cmp	r0, #0
   b8f82:	d1e8      	bne.n	b8f56 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8f84:	6968      	ldr	r0, [r5, #20]
   b8f86:	2306      	movs	r3, #6
   b8f88:	9300      	str	r3, [sp, #0]
   b8f8a:	6800      	ldr	r0, [r0, #0]
   b8f8c:	ab03      	add	r3, sp, #12
   b8f8e:	f241 020b 	movw	r2, #4107	; 0x100b
   b8f92:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8f96:	f7fd f971 	bl	b627c <sock_setsockopt>
   b8f9a:	2800      	cmp	r0, #0
   b8f9c:	d1db      	bne.n	b8f56 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8f9e:	221c      	movs	r2, #28
   b8fa0:	2100      	movs	r1, #0
   b8fa2:	a803      	add	r0, sp, #12
   b8fa4:	f001 f993 	bl	ba2ce <memset>
    if (ip.version() == 4) {
   b8fa8:	7d23      	ldrb	r3, [r4, #20]
   b8faa:	2b04      	cmp	r3, #4
   b8fac:	d11d      	bne.n	b8fea <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8fae:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8fb2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8fb4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8fb8:	f7fd f8e0 	bl	b617c <inet_htons>
   b8fbc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8fc0:	6860      	ldr	r0, [r4, #4]
   b8fc2:	f7fd f8d3 	bl	b616c <inet_htonl>
   b8fc6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8fc8:	696b      	ldr	r3, [r5, #20]
   b8fca:	221c      	movs	r2, #28
   b8fcc:	6818      	ldr	r0, [r3, #0]
   b8fce:	a903      	add	r1, sp, #12
   b8fd0:	f7fd f964 	bl	b629c <sock_connect>
   b8fd4:	2800      	cmp	r0, #0
   b8fd6:	d1be      	bne.n	b8f56 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8fd8:	3404      	adds	r4, #4
   b8fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8fdc:	696d      	ldr	r5, [r5, #20]
   b8fde:	358c      	adds	r5, #140	; 0x8c
   b8fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8fe2:	6823      	ldr	r3, [r4, #0]
   b8fe4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8fe6:	2401      	movs	r4, #1
   b8fe8:	e7ba      	b.n	b8f60 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8fea:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8fee:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8ff0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8ff4:	f7fd f8c2 	bl	b617c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8ff8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8ffa:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8ffe:	1d23      	adds	r3, r4, #4
   b9000:	f104 0714 	add.w	r7, r4, #20
   b9004:	6818      	ldr	r0, [r3, #0]
   b9006:	6859      	ldr	r1, [r3, #4]
   b9008:	4632      	mov	r2, r6
   b900a:	c203      	stmia	r2!, {r0, r1}
   b900c:	3308      	adds	r3, #8
   b900e:	42bb      	cmp	r3, r7
   b9010:	4616      	mov	r6, r2
   b9012:	d1f7      	bne.n	b9004 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9014:	e7d8      	b.n	b8fc8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9018 <_ZN9TCPClient9availableEv>:
{
   b9018:	b530      	push	{r4, r5, lr}
   b901a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b901c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9020:	b08b      	sub	sp, #44	; 0x2c
   b9022:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9024:	b12b      	cbz	r3, b9032 <_ZN9TCPClient9availableEv+0x1a>
   b9026:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b902a:	429a      	cmp	r2, r3
   b902c:	d101      	bne.n	b9032 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b902e:	f7ff ff6f 	bl	b8f10 <_ZN9TCPClient12flush_bufferEv>
   b9032:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9034:	6808      	ldr	r0, [r1, #0]
   b9036:	2800      	cmp	r0, #0
   b9038:	db18      	blt.n	b906c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b903a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b903e:	2d7f      	cmp	r5, #127	; 0x7f
   b9040:	d814      	bhi.n	b906c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9042:	3104      	adds	r1, #4
   b9044:	2308      	movs	r3, #8
   b9046:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b904a:	4429      	add	r1, r5
   b904c:	f7fd f92e 	bl	b62ac <sock_recv>
            if (ret > 0) {
   b9050:	2800      	cmp	r0, #0
   b9052:	dd13      	ble.n	b907c <_ZN9TCPClient9availableEv+0x64>
   b9054:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9056:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b905a:	b90a      	cbnz	r2, b9060 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b905c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9060:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9062:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9066:	4410      	add	r0, r2
   b9068:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b906c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b906e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9072:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9076:	1ac0      	subs	r0, r0, r3
   b9078:	b00b      	add	sp, #44	; 0x2c
   b907a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b907c:	f7fd faaa 	bl	b65d4 <__errno>
   b9080:	6803      	ldr	r3, [r0, #0]
   b9082:	2b0b      	cmp	r3, #11
   b9084:	d0f2      	beq.n	b906c <_ZN9TCPClient9availableEv+0x54>
   b9086:	f7fd faa5 	bl	b65d4 <__errno>
   b908a:	6803      	ldr	r3, [r0, #0]
   b908c:	2b0b      	cmp	r3, #11
   b908e:	d0ed      	beq.n	b906c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9090:	2320      	movs	r3, #32
   b9092:	2500      	movs	r5, #0
   b9094:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9098:	f7fd fa9c 	bl	b65d4 <__errno>
   b909c:	6803      	ldr	r3, [r0, #0]
   b909e:	9301      	str	r3, [sp, #4]
   b90a0:	4b08      	ldr	r3, [pc, #32]	; (b90c4 <_ZN9TCPClient9availableEv+0xac>)
   b90a2:	4909      	ldr	r1, [pc, #36]	; (b90c8 <_ZN9TCPClient9availableEv+0xb0>)
   b90a4:	9300      	str	r3, [sp, #0]
   b90a6:	aa02      	add	r2, sp, #8
   b90a8:	462b      	mov	r3, r5
   b90aa:	2032      	movs	r0, #50	; 0x32
   b90ac:	f7fd f966 	bl	b637c <log_message>
                    sock_close(d_->sock);
   b90b0:	6963      	ldr	r3, [r4, #20]
   b90b2:	6818      	ldr	r0, [r3, #0]
   b90b4:	f7fd f8ea 	bl	b628c <sock_close>
   b90b8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b90ba:	f04f 32ff 	mov.w	r2, #4294967295
   b90be:	601a      	str	r2, [r3, #0]
   b90c0:	e7d4      	b.n	b906c <_ZN9TCPClient9availableEv+0x54>
   b90c2:	bf00      	nop
   b90c4:	000bcfbb 	.word	0x000bcfbb
   b90c8:	000bcfb4 	.word	0x000bcfb4

000b90cc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b90cc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b90ce:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b90d0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b90d2:	6818      	ldr	r0, [r3, #0]
   b90d4:	2800      	cmp	r0, #0
   b90d6:	db01      	blt.n	b90dc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b90d8:	f7fd f8d8 	bl	b628c <sock_close>
   b90dc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b90de:	f04f 32ff 	mov.w	r2, #4294967295
   b90e2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b90e4:	6960      	ldr	r0, [r4, #20]
   b90e6:	2211      	movs	r2, #17
   b90e8:	2100      	movs	r1, #0
   b90ea:	308c      	adds	r0, #140	; 0x8c
   b90ec:	f001 f8ef 	bl	ba2ce <memset>
    flush_buffer();
   b90f0:	4620      	mov	r0, r4
}
   b90f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b90f6:	f7ff bf0b 	b.w	b8f10 <_ZN9TCPClient12flush_bufferEv>

000b90fa <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b90fa:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b90fc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b90fe:	4604      	mov	r4, r0
          total(0) {
   b9100:	6001      	str	r1, [r0, #0]
   b9102:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9106:	3088      	adds	r0, #136	; 0x88
   b9108:	f7ff fbba 	bl	b8880 <_ZN9IPAddressC1Ev>
}
   b910c:	4620      	mov	r0, r4
   b910e:	bd10      	pop	{r4, pc}

000b9110 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9110:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9112:	2300      	movs	r3, #0
   b9114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9118:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b911c:	4a0e      	ldr	r2, [pc, #56]	; (b9158 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b911e:	6103      	str	r3, [r0, #16]
   b9120:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9122:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9124:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9126:	20ac      	movs	r0, #172	; 0xac
   b9128:	9101      	str	r1, [sp, #4]
   b912a:	f7fa ffb4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b912e:	1e05      	subs	r5, r0, #0
   b9130:	f105 060c 	add.w	r6, r5, #12
   b9134:	d008      	beq.n	b9148 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9136:	2301      	movs	r3, #1
   b9138:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b913c:	4b07      	ldr	r3, [pc, #28]	; (b915c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b913e:	9901      	ldr	r1, [sp, #4]
   b9140:	602b      	str	r3, [r5, #0]
   b9142:	4630      	mov	r0, r6
   b9144:	f7ff ffd9 	bl	b90fa <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9148:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b914a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b914e:	f7ff fedf 	bl	b8f10 <_ZN9TCPClient12flush_bufferEv>
}
   b9152:	b002      	add	sp, #8
   b9154:	bd70      	pop	{r4, r5, r6, pc}
   b9156:	bf00      	nop
   b9158:	000bcff0 	.word	0x000bcff0
   b915c:	000bcfd4 	.word	0x000bcfd4

000b9160 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9160:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9162:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b9166:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9168:	f7ff ffd2 	bl	b9110 <_ZN9TCPClientC1Ei>
}
   b916c:	4620      	mov	r0, r4
   b916e:	bd10      	pop	{r4, pc}

000b9170 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9170:	b510      	push	{r4, lr}
   b9172:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9174:	6800      	ldr	r0, [r0, #0]
   b9176:	2800      	cmp	r0, #0
   b9178:	db01      	blt.n	b917e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b917a:	f7fd f887 	bl	b628c <sock_close>
    }
}
   b917e:	4620      	mov	r0, r4
   b9180:	bd10      	pop	{r4, pc}

000b9182 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9182:	300c      	adds	r0, #12
   b9184:	f7ff bff4 	b.w	b9170 <_ZN9TCPClient4DataD1Ev>

000b9188 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   b9188:	4770      	bx	lr

000b918a <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   b918a:	2001      	movs	r0, #1
   b918c:	4770      	bx	lr

000b918e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b918e:	2200      	movs	r2, #0
   b9190:	6840      	ldr	r0, [r0, #4]
   b9192:	4611      	mov	r1, r2
   b9194:	f7fd b95e 	b.w	b6454 <network_ready>

000b9198 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
   b9198:	b510      	push	{r4, lr}
   b919a:	2124      	movs	r1, #36	; 0x24
   b919c:	4604      	mov	r4, r0
   b919e:	f7fa ff7e 	bl	b409e <_ZdlPvj>
   b91a2:	4620      	mov	r0, r4
   b91a4:	bd10      	pop	{r4, pc}

000b91a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b91a6:	2200      	movs	r2, #0
   b91a8:	6840      	ldr	r0, [r0, #4]
   b91aa:	4611      	mov	r1, r2
   b91ac:	f7fd b972 	b.w	b6494 <network_listening>

000b91b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b91b0:	2200      	movs	r2, #0
   b91b2:	6840      	ldr	r0, [r0, #4]
   b91b4:	4611      	mov	r1, r2
   b91b6:	f7fd b97d 	b.w	b64b4 <network_get_listen_timeout>

000b91ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b91ba:	6840      	ldr	r0, [r0, #4]
   b91bc:	2200      	movs	r2, #0
   b91be:	f7fd b971 	b.w	b64a4 <network_set_listen_timeout>

000b91c2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b91c2:	6840      	ldr	r0, [r0, #4]
   b91c4:	2200      	movs	r2, #0
   b91c6:	f081 0101 	eor.w	r1, r1, #1
   b91ca:	f7fd b95b 	b.w	b6484 <network_listen>

000b91ce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b91ce:	2300      	movs	r3, #0
   b91d0:	6840      	ldr	r0, [r0, #4]
   b91d2:	461a      	mov	r2, r3
   b91d4:	4619      	mov	r1, r3
   b91d6:	f7fd b94d 	b.w	b6474 <network_off>

000b91da <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b91da:	2300      	movs	r3, #0
   b91dc:	6840      	ldr	r0, [r0, #4]
   b91de:	461a      	mov	r2, r3
   b91e0:	4619      	mov	r1, r3
   b91e2:	f7fd b93f 	b.w	b6464 <network_on>

000b91e6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b91e6:	2200      	movs	r2, #0
   b91e8:	6840      	ldr	r0, [r0, #4]
   b91ea:	4611      	mov	r1, r2
   b91ec:	f7fd b922 	b.w	b6434 <network_connecting>

000b91f0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b91f0:	6840      	ldr	r0, [r0, #4]
   b91f2:	2200      	movs	r2, #0
   b91f4:	2102      	movs	r1, #2
   b91f6:	f7fd b925 	b.w	b6444 <network_disconnect>

000b91fa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b91fa:	2300      	movs	r3, #0
   b91fc:	6840      	ldr	r0, [r0, #4]
   b91fe:	461a      	mov	r2, r3
   b9200:	f7fd b910 	b.w	b6424 <network_connect>

000b9204 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   b9204:	8983      	ldrh	r3, [r0, #12]
   b9206:	b17b      	cbz	r3, b9228 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   b9208:	6943      	ldr	r3, [r0, #20]
   b920a:	2b00      	cmp	r3, #0
   b920c:	db0c      	blt.n	b9228 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   b920e:	ee07 3a90 	vmov	s15, r3
   b9212:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9230 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   b9216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b921a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b921e:	eddf 7a05 	vldr	s15, [pc, #20]	; b9234 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   b9222:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9226:	4770      	bx	lr
    }
    return -1.0f;
   b9228:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b922c:	4770      	bx	lr
   b922e:	bf00      	nop
   b9230:	477fff00 	.word	0x477fff00
   b9234:	42c80000 	.word	0x42c80000

000b9238 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   b9238:	8983      	ldrh	r3, [r0, #12]
   b923a:	b163      	cbz	r3, b9256 <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
   b923c:	6903      	ldr	r3, [r0, #16]
   b923e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b9242:	d008      	beq.n	b9256 <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
   b9244:	ee07 3a90 	vmov	s15, r3
   b9248:	ed9f 7a04 	vldr	s14, [pc, #16]	; b925c <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   b924c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9250:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9254:	4770      	bx	lr
    }
    return 0.0f;
   b9256:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9260 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
   b925a:	4770      	bx	lr
   b925c:	42c80000 	.word	0x42c80000
   b9260:	00000000 	.word	0x00000000

000b9264 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   b9264:	8983      	ldrh	r3, [r0, #12]
   b9266:	b17b      	cbz	r3, b9288 <_ZNK10WiFiSignal10getQualityEv+0x24>
   b9268:	6a03      	ldr	r3, [r0, #32]
   b926a:	2b00      	cmp	r3, #0
   b926c:	db0c      	blt.n	b9288 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   b926e:	ee07 3a90 	vmov	s15, r3
   b9272:	ed9f 7a07 	vldr	s14, [pc, #28]	; b9290 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   b9276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b927a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b927e:	eddf 7a05 	vldr	s15, [pc, #20]	; b9294 <_ZNK10WiFiSignal10getQualityEv+0x30>
   b9282:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9286:	4770      	bx	lr
    }
    return -1.0f;
   b9288:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b928c:	4770      	bx	lr
   b928e:	bf00      	nop
   b9290:	477fff00 	.word	0x477fff00
   b9294:	42c80000 	.word	0x42c80000

000b9298 <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   b9298:	8983      	ldrh	r3, [r0, #12]
   b929a:	b163      	cbz	r3, b92b6 <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
   b929c:	6983      	ldr	r3, [r0, #24]
   b929e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b92a2:	d008      	beq.n	b92b6 <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
   b92a4:	ee07 3a90 	vmov	s15, r3
   b92a8:	ed9f 7a04 	vldr	s14, [pc, #16]	; b92bc <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   b92ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b92b0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b92b4:	4770      	bx	lr
    }
    return 0.0f;
   b92b6:	ed9f 0a02 	vldr	s0, [pc, #8]	; b92c0 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
   b92ba:	4770      	bx	lr
   b92bc:	42c80000 	.word	0x42c80000
   b92c0:	00000000 	.word	0x00000000

000b92c4 <_ZNK10WiFiSignalcvaEv>:
}
   b92c4:	f990 0004 	ldrsb.w	r0, [r0, #4]
   b92c8:	4770      	bx	lr

000b92ca <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b92ca:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   b92cc:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   b92ce:	4606      	mov	r6, r0
    inf_ = inf;
   b92d0:	f100 050c 	add.w	r5, r0, #12
   b92d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b92d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b92d8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b92dc:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   b92e0:	6933      	ldr	r3, [r6, #16]
   b92e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b92e6:	bf0e      	itee	eq
   b92e8:	2302      	moveq	r3, #2
   b92ea:	2264      	movne	r2, #100	; 0x64
   b92ec:	fb93 f3f2 	sdivne	r3, r3, r2
   b92f0:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b92f2:	69b3      	ldr	r3, [r6, #24]
   b92f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b92f8:	bf0c      	ite	eq
   b92fa:	2300      	moveq	r3, #0
   b92fc:	2264      	movne	r2, #100	; 0x64
}
   b92fe:	f04f 0001 	mov.w	r0, #1
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   b9302:	bf18      	it	ne
   b9304:	fb93 f3f2 	sdivne	r3, r3, r2
   b9308:	60b3      	str	r3, [r6, #8]
}
   b930a:	bd70      	pop	{r4, r5, r6, pc}

000b930c <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   b930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
   b9310:	4b16      	ldr	r3, [pc, #88]	; (b936c <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   b9312:	6003      	str	r3, [r0, #0]
   b9314:	2500      	movs	r5, #0
   b9316:	460f      	mov	r7, r1
   b9318:	f04f 0802 	mov.w	r8, #2
   b931c:	2618      	movs	r6, #24
   b931e:	e9c0 8501 	strd	r8, r5, [r0, #4]
   b9322:	b086      	sub	sp, #24
   b9324:	4632      	mov	r2, r6
   b9326:	4629      	mov	r1, r5
   b9328:	4604      	mov	r4, r0
   b932a:	300c      	adds	r0, #12
   b932c:	f000 ffcf 	bl	ba2ce <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b9330:	6878      	ldr	r0, [r7, #4]
   b9332:	462a      	mov	r2, r5
   b9334:	4629      	mov	r1, r5
   b9336:	f7fd f88d 	bl	b6454 <network_ready>
   b933a:	b180      	cbz	r0, b935e <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
   b933c:	4632      	mov	r2, r6
   b933e:	4629      	mov	r1, r5
   b9340:	4668      	mov	r0, sp
   b9342:	f000 ffc4 	bl	ba2ce <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b9346:	462a      	mov	r2, r5
   b9348:	4669      	mov	r1, sp
   b934a:	4628      	mov	r0, r5
        info.size = sizeof(info);
   b934c:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   b9350:	f7fd f804 	bl	b635c <wlan_connected_info>
        if (r == 0) {
   b9354:	b938      	cbnz	r0, b9366 <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
   b9356:	4669      	mov	r1, sp
   b9358:	4620      	mov	r0, r4
   b935a:	f7ff ffb6 	bl	b92ca <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
   b935e:	4620      	mov	r0, r4
   b9360:	b006      	add	sp, #24
   b9362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
   b9366:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
   b936a:	e7f8      	b.n	b935e <_ZN5spark9WiFiClass4RSSIEv+0x52>
   b936c:	000bd078 	.word	0x000bd078

000b9370 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9370:	4b02      	ldr	r3, [pc, #8]	; (b937c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9372:	2204      	movs	r2, #4
   b9374:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9376:	4a02      	ldr	r2, [pc, #8]	; (b9380 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9378:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b937a:	4770      	bx	lr
   b937c:	2003e710 	.word	0x2003e710
   b9380:	000bd03c 	.word	0x000bd03c

000b9384 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9384:	2300      	movs	r3, #0
   b9386:	6840      	ldr	r0, [r0, #4]
   b9388:	461a      	mov	r2, r3
   b938a:	f7fd b84b 	b.w	b6424 <network_connect>

000b938e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b938e:	6840      	ldr	r0, [r0, #4]
   b9390:	2200      	movs	r2, #0
   b9392:	2102      	movs	r1, #2
   b9394:	f7fd b856 	b.w	b6444 <network_disconnect>

000b9398 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9398:	2200      	movs	r2, #0
   b939a:	6840      	ldr	r0, [r0, #4]
   b939c:	4611      	mov	r1, r2
   b939e:	f7fd b849 	b.w	b6434 <network_connecting>

000b93a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b93a2:	2200      	movs	r2, #0
   b93a4:	6840      	ldr	r0, [r0, #4]
   b93a6:	4611      	mov	r1, r2
   b93a8:	f7fd b854 	b.w	b6454 <network_ready>

000b93ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b93ac:	2300      	movs	r3, #0
   b93ae:	6840      	ldr	r0, [r0, #4]
   b93b0:	461a      	mov	r2, r3
   b93b2:	4619      	mov	r1, r3
   b93b4:	f7fd b856 	b.w	b6464 <network_on>

000b93b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b93b8:	2300      	movs	r3, #0
   b93ba:	6840      	ldr	r0, [r0, #4]
   b93bc:	461a      	mov	r2, r3
   b93be:	4619      	mov	r1, r3
   b93c0:	f7fd b858 	b.w	b6474 <network_off>

000b93c4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b93c4:	6840      	ldr	r0, [r0, #4]
   b93c6:	2100      	movs	r1, #0
   b93c8:	f7fd b87c 	b.w	b64c4 <network_is_on>

000b93cc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b93cc:	6840      	ldr	r0, [r0, #4]
   b93ce:	2100      	movs	r1, #0
   b93d0:	f7fd b880 	b.w	b64d4 <network_is_off>

000b93d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b93d4:	6840      	ldr	r0, [r0, #4]
   b93d6:	2200      	movs	r2, #0
   b93d8:	f081 0101 	eor.w	r1, r1, #1
   b93dc:	f7fd b852 	b.w	b6484 <network_listen>

000b93e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b93e0:	6840      	ldr	r0, [r0, #4]
   b93e2:	2200      	movs	r2, #0
   b93e4:	f7fd b85e 	b.w	b64a4 <network_set_listen_timeout>

000b93e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b93e8:	2200      	movs	r2, #0
   b93ea:	6840      	ldr	r0, [r0, #4]
   b93ec:	4611      	mov	r1, r2
   b93ee:	f7fd b861 	b.w	b64b4 <network_get_listen_timeout>

000b93f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b93f2:	2200      	movs	r2, #0
   b93f4:	6840      	ldr	r0, [r0, #4]
   b93f6:	4611      	mov	r1, r2
   b93f8:	f7fd b84c 	b.w	b6494 <network_listening>

000b93fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b93fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9400:	b095      	sub	sp, #84	; 0x54
   b9402:	4614      	mov	r4, r2
   b9404:	460d      	mov	r5, r1
   b9406:	4607      	mov	r7, r0
    IPAddress addr;
   b9408:	f7ff fa3a 	bl	b8880 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b940c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b940e:	221c      	movs	r2, #28
   b9410:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9412:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9414:	f000 ff5b 	bl	ba2ce <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9418:	2340      	movs	r3, #64	; 0x40
   b941a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b941c:	4620      	mov	r0, r4
   b941e:	466b      	mov	r3, sp
   b9420:	aa0c      	add	r2, sp, #48	; 0x30
   b9422:	2100      	movs	r1, #0
   b9424:	f7fc fd70 	bl	b5f08 <netdb_getaddrinfo>
    if (!r) {
   b9428:	4604      	mov	r4, r0
   b942a:	2800      	cmp	r0, #0
   b942c:	d14b      	bne.n	b94c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b942e:	4602      	mov	r2, r0
   b9430:	2101      	movs	r1, #1
   b9432:	6868      	ldr	r0, [r5, #4]
   b9434:	f7fd f80e 	bl	b6454 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9438:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b943a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b943c:	4622      	mov	r2, r4
   b943e:	6868      	ldr	r0, [r5, #4]
   b9440:	f7fd f808 	bl	b6454 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9444:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9446:	4681      	mov	r9, r0
        bool ok = false;
   b9448:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b944a:	2e00      	cmp	r6, #0
   b944c:	d03b      	beq.n	b94c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b944e:	2900      	cmp	r1, #0
   b9450:	d139      	bne.n	b94c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9452:	6873      	ldr	r3, [r6, #4]
   b9454:	2b02      	cmp	r3, #2
   b9456:	d003      	beq.n	b9460 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9458:	2b0a      	cmp	r3, #10
   b945a:	d011      	beq.n	b9480 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b945c:	69f6      	ldr	r6, [r6, #28]
   b945e:	e7f4      	b.n	b944a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9460:	f1b8 0f00 	cmp.w	r8, #0
   b9464:	d0fa      	beq.n	b945c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9466:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9468:	a806      	add	r0, sp, #24
   b946a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b946c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b946e:	f7ff fa53 	bl	b8918 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9474:	1d3c      	adds	r4, r7, #4
   b9476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9478:	682b      	ldr	r3, [r5, #0]
   b947a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b947c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b947e:	e7ed      	b.n	b945c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9480:	f1b9 0f00 	cmp.w	r9, #0
   b9484:	d0ea      	beq.n	b945c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9486:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9488:	2210      	movs	r2, #16
   b948a:	a801      	add	r0, sp, #4
   b948c:	f000 ff1f 	bl	ba2ce <memset>
                    a.v = 6;
   b9490:	2306      	movs	r3, #6
   b9492:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9496:	ad01      	add	r5, sp, #4
   b9498:	f104 0308 	add.w	r3, r4, #8
   b949c:	3418      	adds	r4, #24
   b949e:	6818      	ldr	r0, [r3, #0]
   b94a0:	6859      	ldr	r1, [r3, #4]
   b94a2:	462a      	mov	r2, r5
   b94a4:	c203      	stmia	r2!, {r0, r1}
   b94a6:	3308      	adds	r3, #8
   b94a8:	42a3      	cmp	r3, r4
   b94aa:	4615      	mov	r5, r2
   b94ac:	d1f7      	bne.n	b949e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b94ae:	a901      	add	r1, sp, #4
   b94b0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b94b2:	ad07      	add	r5, sp, #28
   b94b4:	f7ff f9f2 	bl	b889c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b94b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b94ba:	1d3c      	adds	r4, r7, #4
   b94bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b94be:	682b      	ldr	r3, [r5, #0]
   b94c0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b94c2:	4649      	mov	r1, r9
   b94c4:	e7ca      	b.n	b945c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b94c6:	9800      	ldr	r0, [sp, #0]
   b94c8:	f7fc fd16 	bl	b5ef8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b94cc:	4638      	mov	r0, r7
   b94ce:	b015      	add	sp, #84	; 0x54
   b94d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b94d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b94d4:	4b02      	ldr	r3, [pc, #8]	; (b94e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b94d6:	4a03      	ldr	r2, [pc, #12]	; (b94e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b94d8:	601a      	str	r2, [r3, #0]
   b94da:	2200      	movs	r2, #0
   b94dc:	605a      	str	r2, [r3, #4]

} // spark
   b94de:	4770      	bx	lr
   b94e0:	2003e718 	.word	0x2003e718
   b94e4:	000bd09c 	.word	0x000bd09c

000b94e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b94e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b94ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b94ec:	d902      	bls.n	b94f4 <pinAvailable+0xc>
    return false;
   b94ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b94f0:	b002      	add	sp, #8
   b94f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b94f4:	f1a0 030b 	sub.w	r3, r0, #11
   b94f8:	2b02      	cmp	r3, #2
   b94fa:	d81a      	bhi.n	b9532 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b94fc:	4c17      	ldr	r4, [pc, #92]	; (b955c <pinAvailable+0x74>)
   b94fe:	7821      	ldrb	r1, [r4, #0]
   b9500:	f3bf 8f5b 	dmb	ish
   b9504:	f011 0101 	ands.w	r1, r1, #1
   b9508:	d10b      	bne.n	b9522 <pinAvailable+0x3a>
   b950a:	4620      	mov	r0, r4
   b950c:	9101      	str	r1, [sp, #4]
   b950e:	f7fa fdc8 	bl	b40a2 <__cxa_guard_acquire>
   b9512:	9901      	ldr	r1, [sp, #4]
   b9514:	b128      	cbz	r0, b9522 <pinAvailable+0x3a>
   b9516:	4812      	ldr	r0, [pc, #72]	; (b9560 <pinAvailable+0x78>)
   b9518:	f7fd f8ba 	bl	b6690 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b951c:	4620      	mov	r0, r4
   b951e:	f7fa fdc5 	bl	b40ac <__cxa_guard_release>
   b9522:	4b0f      	ldr	r3, [pc, #60]	; (b9560 <pinAvailable+0x78>)
   b9524:	7818      	ldrb	r0, [r3, #0]
   b9526:	f7fc fee1 	bl	b62ec <hal_spi_is_enabled>
   b952a:	2800      	cmp	r0, #0
   b952c:	d1df      	bne.n	b94ee <pinAvailable+0x6>
  return true; // 'pin' is available
   b952e:	2001      	movs	r0, #1
   b9530:	e7de      	b.n	b94f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9532:	2801      	cmp	r0, #1
   b9534:	d809      	bhi.n	b954a <pinAvailable+0x62>
   b9536:	f000 f881 	bl	b963c <_Z19__fetch_global_Wirev>
   b953a:	2100      	movs	r1, #0
   b953c:	7c00      	ldrb	r0, [r0, #16]
   b953e:	f7fc fe8d 	bl	b625c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9542:	f080 0001 	eor.w	r0, r0, #1
   b9546:	b2c0      	uxtb	r0, r0
   b9548:	e7d2      	b.n	b94f0 <pinAvailable+0x8>
   b954a:	3809      	subs	r0, #9
   b954c:	2801      	cmp	r0, #1
   b954e:	d8ee      	bhi.n	b952e <pinAvailable+0x46>
   b9550:	f000 f834 	bl	b95bc <_Z22__fetch_global_Serial1v>
   b9554:	7c00      	ldrb	r0, [r0, #16]
   b9556:	f7fc fe41 	bl	b61dc <hal_usart_is_enabled>
   b955a:	e7f2      	b.n	b9542 <pinAvailable+0x5a>
   b955c:	2003e720 	.word	0x2003e720
   b9560:	2003e724 	.word	0x2003e724

000b9564 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9564:	2823      	cmp	r0, #35	; 0x23
{
   b9566:	b538      	push	{r3, r4, r5, lr}
   b9568:	4604      	mov	r4, r0
   b956a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b956c:	d80a      	bhi.n	b9584 <pinMode+0x20>
   b956e:	29ff      	cmp	r1, #255	; 0xff
   b9570:	d008      	beq.n	b9584 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9572:	f7ff ffb9 	bl	b94e8 <pinAvailable>
   b9576:	b128      	cbz	r0, b9584 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b9578:	4629      	mov	r1, r5
   b957a:	4620      	mov	r0, r4
}
   b957c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9580:	f7fc bcca 	b.w	b5f18 <HAL_Pin_Mode>
}
   b9584:	bd38      	pop	{r3, r4, r5, pc}

000b9586 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9586:	4770      	bx	lr

000b9588 <_Z20acquireSerial1Bufferv>:
{
   b9588:	b538      	push	{r3, r4, r5, lr}
   b958a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b958c:	2514      	movs	r5, #20
   b958e:	462a      	mov	r2, r5
   b9590:	2100      	movs	r1, #0
   b9592:	f000 fe9c 	bl	ba2ce <memset>
   b9596:	8025      	strh	r5, [r4, #0]
   b9598:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b959a:	4907      	ldr	r1, [pc, #28]	; (b95b8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b959c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b959e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b95a0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95a2:	f000 f86f 	bl	b9684 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95a6:	4904      	ldr	r1, [pc, #16]	; (b95b8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b95a8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95aa:	4628      	mov	r0, r5
   b95ac:	f000 f86a 	bl	b9684 <_ZnajRKSt9nothrow_t>
    };
   b95b0:	60e0      	str	r0, [r4, #12]
}
   b95b2:	4620      	mov	r0, r4
   b95b4:	bd38      	pop	{r3, r4, r5, pc}
   b95b6:	bf00      	nop
   b95b8:	000bd0d0 	.word	0x000bd0d0

000b95bc <_Z22__fetch_global_Serial1v>:
{
   b95bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95be:	4d0e      	ldr	r5, [pc, #56]	; (b95f8 <_Z22__fetch_global_Serial1v+0x3c>)
   b95c0:	7829      	ldrb	r1, [r5, #0]
   b95c2:	f3bf 8f5b 	dmb	ish
   b95c6:	f011 0401 	ands.w	r4, r1, #1
{
   b95ca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95cc:	d111      	bne.n	b95f2 <_Z22__fetch_global_Serial1v+0x36>
   b95ce:	4628      	mov	r0, r5
   b95d0:	f7fa fd67 	bl	b40a2 <__cxa_guard_acquire>
   b95d4:	b168      	cbz	r0, b95f2 <_Z22__fetch_global_Serial1v+0x36>
   b95d6:	a801      	add	r0, sp, #4
   b95d8:	f7ff ffd6 	bl	b9588 <_Z20acquireSerial1Bufferv>
   b95dc:	aa01      	add	r2, sp, #4
   b95de:	4621      	mov	r1, r4
   b95e0:	4806      	ldr	r0, [pc, #24]	; (b95fc <_Z22__fetch_global_Serial1v+0x40>)
   b95e2:	f7ff fa93 	bl	b8b0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b95e6:	4628      	mov	r0, r5
   b95e8:	f7fa fd60 	bl	b40ac <__cxa_guard_release>
   b95ec:	4804      	ldr	r0, [pc, #16]	; (b9600 <_Z22__fetch_global_Serial1v+0x44>)
   b95ee:	f000 fe29 	bl	ba244 <atexit>
    return serial1;
}
   b95f2:	4802      	ldr	r0, [pc, #8]	; (b95fc <_Z22__fetch_global_Serial1v+0x40>)
   b95f4:	b007      	add	sp, #28
   b95f6:	bd30      	pop	{r4, r5, pc}
   b95f8:	2003e72c 	.word	0x2003e72c
   b95fc:	2003e730 	.word	0x2003e730
   b9600:	000b9587 	.word	0x000b9587

000b9604 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9604:	4770      	bx	lr
	...

000b9608 <_Z17acquireWireBufferv>:
{
   b9608:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b960a:	4b0a      	ldr	r3, [pc, #40]	; (b9634 <_Z17acquireWireBufferv+0x2c>)
   b960c:	6003      	str	r3, [r0, #0]
   b960e:	2301      	movs	r3, #1
{
   b9610:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9612:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9614:	4908      	ldr	r1, [pc, #32]	; (b9638 <_Z17acquireWireBufferv+0x30>)
   b9616:	2020      	movs	r0, #32
   b9618:	f000 f834 	bl	b9684 <_ZnajRKSt9nothrow_t>
	};
   b961c:	2520      	movs	r5, #32
   b961e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9620:	4905      	ldr	r1, [pc, #20]	; (b9638 <_Z17acquireWireBufferv+0x30>)
	};
   b9622:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b9624:	4628      	mov	r0, r5
   b9626:	f000 f82d 	bl	b9684 <_ZnajRKSt9nothrow_t>
	};
   b962a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b962e:	4620      	mov	r0, r4
   b9630:	bd38      	pop	{r3, r4, r5, pc}
   b9632:	bf00      	nop
   b9634:	00010018 	.word	0x00010018
   b9638:	000bd0d0 	.word	0x000bd0d0

000b963c <_Z19__fetch_global_Wirev>:
{
   b963c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b963e:	4d0e      	ldr	r5, [pc, #56]	; (b9678 <_Z19__fetch_global_Wirev+0x3c>)
   b9640:	7829      	ldrb	r1, [r5, #0]
   b9642:	f3bf 8f5b 	dmb	ish
   b9646:	f011 0401 	ands.w	r4, r1, #1
{
   b964a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b964c:	d111      	bne.n	b9672 <_Z19__fetch_global_Wirev+0x36>
   b964e:	4628      	mov	r0, r5
   b9650:	f7fa fd27 	bl	b40a2 <__cxa_guard_acquire>
   b9654:	b168      	cbz	r0, b9672 <_Z19__fetch_global_Wirev+0x36>
   b9656:	4668      	mov	r0, sp
   b9658:	f7ff ffd6 	bl	b9608 <_Z17acquireWireBufferv>
   b965c:	466a      	mov	r2, sp
   b965e:	4621      	mov	r1, r4
   b9660:	4806      	ldr	r0, [pc, #24]	; (b967c <_Z19__fetch_global_Wirev+0x40>)
   b9662:	f7ff faa7 	bl	b8bb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9666:	4628      	mov	r0, r5
   b9668:	f7fa fd20 	bl	b40ac <__cxa_guard_release>
   b966c:	4804      	ldr	r0, [pc, #16]	; (b9680 <_Z19__fetch_global_Wirev+0x44>)
   b966e:	f000 fde9 	bl	ba244 <atexit>
	return wire;
}
   b9672:	4802      	ldr	r0, [pc, #8]	; (b967c <_Z19__fetch_global_Wirev+0x40>)
   b9674:	b007      	add	sp, #28
   b9676:	bd30      	pop	{r4, r5, pc}
   b9678:	2003e748 	.word	0x2003e748
   b967c:	2003e74c 	.word	0x2003e74c
   b9680:	000b9605 	.word	0x000b9605

000b9684 <_ZnajRKSt9nothrow_t>:
   b9684:	f7fa bd09 	b.w	b409a <_Znaj>

000b9688 <_ZSt25__throw_bad_function_callv>:
   b9688:	b508      	push	{r3, lr}
   b968a:	f7fc ff93 	bl	b65b4 <abort>
	...

000b9690 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9690:	4901      	ldr	r1, [pc, #4]	; (b9698 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9692:	f000 b8f9 	b.w	b9888 <_ZNKSt9type_infoeqERKS_>
   b9696:	bf00      	nop
   b9698:	000bd0ec 	.word	0x000bd0ec

000b969c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b969c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b969e:	2400      	movs	r4, #0
   b96a0:	2310      	movs	r3, #16
   b96a2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b96a6:	6803      	ldr	r3, [r0, #0]
   b96a8:	4615      	mov	r5, r2
   b96aa:	699e      	ldr	r6, [r3, #24]
   b96ac:	6812      	ldr	r2, [r2, #0]
   b96ae:	466b      	mov	r3, sp
   b96b0:	e9cd 4400 	strd	r4, r4, [sp]
   b96b4:	47b0      	blx	r6
   b96b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b96ba:	f003 0306 	and.w	r3, r3, #6
   b96be:	2b06      	cmp	r3, #6
   b96c0:	bf03      	ittte	eq
   b96c2:	9b00      	ldreq	r3, [sp, #0]
   b96c4:	602b      	streq	r3, [r5, #0]
   b96c6:	2001      	moveq	r0, #1
   b96c8:	4620      	movne	r0, r4
   b96ca:	b004      	add	sp, #16
   b96cc:	bd70      	pop	{r4, r5, r6, pc}

000b96ce <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b96ce:	9800      	ldr	r0, [sp, #0]
   b96d0:	4290      	cmp	r0, r2
   b96d2:	bf14      	ite	ne
   b96d4:	2001      	movne	r0, #1
   b96d6:	2006      	moveq	r0, #6
   b96d8:	4770      	bx	lr
	...

000b96dc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b96dc:	b510      	push	{r4, lr}
   b96de:	4b03      	ldr	r3, [pc, #12]	; (b96ec <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b96e0:	6003      	str	r3, [r0, #0]
   b96e2:	4604      	mov	r4, r0
   b96e4:	f000 f8cd 	bl	b9882 <_ZNSt9type_infoD1Ev>
   b96e8:	4620      	mov	r0, r4
   b96ea:	bd10      	pop	{r4, pc}
   b96ec:	000bd12c 	.word	0x000bd12c

000b96f0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b96f0:	b510      	push	{r4, lr}
   b96f2:	4604      	mov	r4, r0
   b96f4:	f7ff fff2 	bl	b96dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b96f8:	4620      	mov	r0, r4
   b96fa:	2108      	movs	r1, #8
   b96fc:	f7fa fccf 	bl	b409e <_ZdlPvj>
   b9700:	4620      	mov	r0, r4
   b9702:	bd10      	pop	{r4, pc}

000b9704 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9708:	461f      	mov	r7, r3
   b970a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b970e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9712:	4598      	cmp	r8, r3
   b9714:	4606      	mov	r6, r0
   b9716:	4615      	mov	r5, r2
   b9718:	d107      	bne.n	b972a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b971a:	9907      	ldr	r1, [sp, #28]
   b971c:	f000 f8b4 	bl	b9888 <_ZNKSt9type_infoeqERKS_>
   b9720:	b118      	cbz	r0, b972a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9722:	7165      	strb	r5, [r4, #5]
   b9724:	2000      	movs	r0, #0
   b9726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b972a:	4639      	mov	r1, r7
   b972c:	4630      	mov	r0, r6
   b972e:	f000 f8ab 	bl	b9888 <_ZNKSt9type_infoeqERKS_>
   b9732:	2800      	cmp	r0, #0
   b9734:	d0f6      	beq.n	b9724 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9736:	2301      	movs	r3, #1
   b9738:	f8c4 8000 	str.w	r8, [r4]
   b973c:	7125      	strb	r5, [r4, #4]
   b973e:	71a3      	strb	r3, [r4, #6]
   b9740:	e7f0      	b.n	b9724 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9742 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9742:	b538      	push	{r3, r4, r5, lr}
   b9744:	4615      	mov	r5, r2
   b9746:	461c      	mov	r4, r3
   b9748:	f000 f89e 	bl	b9888 <_ZNKSt9type_infoeqERKS_>
   b974c:	b120      	cbz	r0, b9758 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b974e:	2308      	movs	r3, #8
   b9750:	60e3      	str	r3, [r4, #12]
   b9752:	2306      	movs	r3, #6
   b9754:	6025      	str	r5, [r4, #0]
   b9756:	7123      	strb	r3, [r4, #4]
   b9758:	bd38      	pop	{r3, r4, r5, pc}

000b975a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b975a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b975c:	4605      	mov	r5, r0
   b975e:	460c      	mov	r4, r1
   b9760:	9201      	str	r2, [sp, #4]
   b9762:	461e      	mov	r6, r3
   b9764:	f000 f890 	bl	b9888 <_ZNKSt9type_infoeqERKS_>
   b9768:	b950      	cbnz	r0, b9780 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b976a:	2e03      	cmp	r6, #3
   b976c:	d808      	bhi.n	b9780 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b976e:	6823      	ldr	r3, [r4, #0]
   b9770:	9a01      	ldr	r2, [sp, #4]
   b9772:	695b      	ldr	r3, [r3, #20]
   b9774:	4629      	mov	r1, r5
   b9776:	4620      	mov	r0, r4
   b9778:	b002      	add	sp, #8
   b977a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b977e:	4718      	bx	r3
   b9780:	b002      	add	sp, #8
   b9782:	bd70      	pop	{r4, r5, r6, pc}

000b9784 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9784:	b510      	push	{r4, lr}
   b9786:	4b03      	ldr	r3, [pc, #12]	; (b9794 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9788:	6003      	str	r3, [r0, #0]
   b978a:	4604      	mov	r4, r0
   b978c:	f7ff ffa6 	bl	b96dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9790:	4620      	mov	r0, r4
   b9792:	bd10      	pop	{r4, pc}
   b9794:	000bd18c 	.word	0x000bd18c

000b9798 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9798:	b510      	push	{r4, lr}
   b979a:	4604      	mov	r4, r0
   b979c:	f7ff fff2 	bl	b9784 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b97a0:	4620      	mov	r0, r4
   b97a2:	210c      	movs	r1, #12
   b97a4:	f7fa fc7b 	bl	b409e <_ZdlPvj>
   b97a8:	4620      	mov	r0, r4
   b97aa:	bd10      	pop	{r4, pc}

000b97ac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b97ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b97ae:	9f08      	ldr	r7, [sp, #32]
   b97b0:	4297      	cmp	r7, r2
   b97b2:	4605      	mov	r5, r0
   b97b4:	460e      	mov	r6, r1
   b97b6:	4614      	mov	r4, r2
   b97b8:	d00a      	beq.n	b97d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b97ba:	68a8      	ldr	r0, [r5, #8]
   b97bc:	6802      	ldr	r2, [r0, #0]
   b97be:	9708      	str	r7, [sp, #32]
   b97c0:	6a15      	ldr	r5, [r2, #32]
   b97c2:	4631      	mov	r1, r6
   b97c4:	4622      	mov	r2, r4
   b97c6:	46ac      	mov	ip, r5
   b97c8:	b003      	add	sp, #12
   b97ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b97ce:	4760      	bx	ip
   b97d0:	4619      	mov	r1, r3
   b97d2:	9301      	str	r3, [sp, #4]
   b97d4:	f000 f858 	bl	b9888 <_ZNKSt9type_infoeqERKS_>
   b97d8:	9b01      	ldr	r3, [sp, #4]
   b97da:	2800      	cmp	r0, #0
   b97dc:	d0ed      	beq.n	b97ba <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b97de:	2006      	movs	r0, #6
   b97e0:	b003      	add	sp, #12
   b97e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b97e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b97e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b97e8:	460d      	mov	r5, r1
   b97ea:	4619      	mov	r1, r3
   b97ec:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b97f0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b97f4:	4681      	mov	r9, r0
   b97f6:	4617      	mov	r7, r2
   b97f8:	4698      	mov	r8, r3
   b97fa:	f000 f845 	bl	b9888 <_ZNKSt9type_infoeqERKS_>
   b97fe:	b190      	cbz	r0, b9826 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9800:	2d00      	cmp	r5, #0
   b9802:	6034      	str	r4, [r6, #0]
   b9804:	7137      	strb	r7, [r6, #4]
   b9806:	db09      	blt.n	b981c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9808:	1961      	adds	r1, r4, r5
   b980a:	458a      	cmp	sl, r1
   b980c:	bf0c      	ite	eq
   b980e:	2106      	moveq	r1, #6
   b9810:	2101      	movne	r1, #1
   b9812:	71b1      	strb	r1, [r6, #6]
   b9814:	2000      	movs	r0, #0
   b9816:	b001      	add	sp, #4
   b9818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b981c:	3502      	adds	r5, #2
   b981e:	d1f9      	bne.n	b9814 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9820:	2301      	movs	r3, #1
   b9822:	71b3      	strb	r3, [r6, #6]
   b9824:	e7f6      	b.n	b9814 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9826:	4554      	cmp	r4, sl
   b9828:	d106      	bne.n	b9838 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b982a:	4659      	mov	r1, fp
   b982c:	4648      	mov	r0, r9
   b982e:	f000 f82b 	bl	b9888 <_ZNKSt9type_infoeqERKS_>
   b9832:	b108      	cbz	r0, b9838 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9834:	7177      	strb	r7, [r6, #5]
   b9836:	e7ed      	b.n	b9814 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9838:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b983c:	6803      	ldr	r3, [r0, #0]
   b983e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9842:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9846:	69dc      	ldr	r4, [r3, #28]
   b9848:	463a      	mov	r2, r7
   b984a:	4643      	mov	r3, r8
   b984c:	4629      	mov	r1, r5
   b984e:	46a4      	mov	ip, r4
   b9850:	b001      	add	sp, #4
   b9852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9856:	4760      	bx	ip

000b9858 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b985c:	4607      	mov	r7, r0
   b985e:	460c      	mov	r4, r1
   b9860:	4615      	mov	r5, r2
   b9862:	461e      	mov	r6, r3
   b9864:	f7ff ff6d 	bl	b9742 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9868:	b948      	cbnz	r0, b987e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b986a:	68b8      	ldr	r0, [r7, #8]
   b986c:	6803      	ldr	r3, [r0, #0]
   b986e:	699f      	ldr	r7, [r3, #24]
   b9870:	462a      	mov	r2, r5
   b9872:	4633      	mov	r3, r6
   b9874:	4621      	mov	r1, r4
   b9876:	46bc      	mov	ip, r7
   b9878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b987c:	4760      	bx	ip
   b987e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9882 <_ZNSt9type_infoD1Ev>:
   b9882:	4770      	bx	lr

000b9884 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9884:	2000      	movs	r0, #0
   b9886:	4770      	bx	lr

000b9888 <_ZNKSt9type_infoeqERKS_>:
   b9888:	4281      	cmp	r1, r0
   b988a:	b508      	push	{r3, lr}
   b988c:	d00e      	beq.n	b98ac <_ZNKSt9type_infoeqERKS_+0x24>
   b988e:	6840      	ldr	r0, [r0, #4]
   b9890:	7803      	ldrb	r3, [r0, #0]
   b9892:	2b2a      	cmp	r3, #42	; 0x2a
   b9894:	d00c      	beq.n	b98b0 <_ZNKSt9type_infoeqERKS_+0x28>
   b9896:	6849      	ldr	r1, [r1, #4]
   b9898:	780b      	ldrb	r3, [r1, #0]
   b989a:	2b2a      	cmp	r3, #42	; 0x2a
   b989c:	bf08      	it	eq
   b989e:	3101      	addeq	r1, #1
   b98a0:	f000 fd5b 	bl	ba35a <strcmp>
   b98a4:	fab0 f080 	clz	r0, r0
   b98a8:	0940      	lsrs	r0, r0, #5
   b98aa:	bd08      	pop	{r3, pc}
   b98ac:	2001      	movs	r0, #1
   b98ae:	e7fc      	b.n	b98aa <_ZNKSt9type_infoeqERKS_+0x22>
   b98b0:	2000      	movs	r0, #0
   b98b2:	e7fa      	b.n	b98aa <_ZNKSt9type_infoeqERKS_+0x22>

000b98b4 <__aeabi_drsub>:
   b98b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b98b8:	e002      	b.n	b98c0 <__adddf3>
   b98ba:	bf00      	nop

000b98bc <__aeabi_dsub>:
   b98bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b98c0 <__adddf3>:
   b98c0:	b530      	push	{r4, r5, lr}
   b98c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b98c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b98ca:	ea94 0f05 	teq	r4, r5
   b98ce:	bf08      	it	eq
   b98d0:	ea90 0f02 	teqeq	r0, r2
   b98d4:	bf1f      	itttt	ne
   b98d6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b98da:	ea55 0c02 	orrsne.w	ip, r5, r2
   b98de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b98e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b98e6:	f000 80e2 	beq.w	b9aae <__adddf3+0x1ee>
   b98ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b98ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b98f2:	bfb8      	it	lt
   b98f4:	426d      	neglt	r5, r5
   b98f6:	dd0c      	ble.n	b9912 <__adddf3+0x52>
   b98f8:	442c      	add	r4, r5
   b98fa:	ea80 0202 	eor.w	r2, r0, r2
   b98fe:	ea81 0303 	eor.w	r3, r1, r3
   b9902:	ea82 0000 	eor.w	r0, r2, r0
   b9906:	ea83 0101 	eor.w	r1, r3, r1
   b990a:	ea80 0202 	eor.w	r2, r0, r2
   b990e:	ea81 0303 	eor.w	r3, r1, r3
   b9912:	2d36      	cmp	r5, #54	; 0x36
   b9914:	bf88      	it	hi
   b9916:	bd30      	pophi	{r4, r5, pc}
   b9918:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b991c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9920:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9924:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9928:	d002      	beq.n	b9930 <__adddf3+0x70>
   b992a:	4240      	negs	r0, r0
   b992c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9930:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9934:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9938:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b993c:	d002      	beq.n	b9944 <__adddf3+0x84>
   b993e:	4252      	negs	r2, r2
   b9940:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9944:	ea94 0f05 	teq	r4, r5
   b9948:	f000 80a7 	beq.w	b9a9a <__adddf3+0x1da>
   b994c:	f1a4 0401 	sub.w	r4, r4, #1
   b9950:	f1d5 0e20 	rsbs	lr, r5, #32
   b9954:	db0d      	blt.n	b9972 <__adddf3+0xb2>
   b9956:	fa02 fc0e 	lsl.w	ip, r2, lr
   b995a:	fa22 f205 	lsr.w	r2, r2, r5
   b995e:	1880      	adds	r0, r0, r2
   b9960:	f141 0100 	adc.w	r1, r1, #0
   b9964:	fa03 f20e 	lsl.w	r2, r3, lr
   b9968:	1880      	adds	r0, r0, r2
   b996a:	fa43 f305 	asr.w	r3, r3, r5
   b996e:	4159      	adcs	r1, r3
   b9970:	e00e      	b.n	b9990 <__adddf3+0xd0>
   b9972:	f1a5 0520 	sub.w	r5, r5, #32
   b9976:	f10e 0e20 	add.w	lr, lr, #32
   b997a:	2a01      	cmp	r2, #1
   b997c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b9980:	bf28      	it	cs
   b9982:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9986:	fa43 f305 	asr.w	r3, r3, r5
   b998a:	18c0      	adds	r0, r0, r3
   b998c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b9990:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9994:	d507      	bpl.n	b99a6 <__adddf3+0xe6>
   b9996:	f04f 0e00 	mov.w	lr, #0
   b999a:	f1dc 0c00 	rsbs	ip, ip, #0
   b999e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b99a2:	eb6e 0101 	sbc.w	r1, lr, r1
   b99a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b99aa:	d31b      	bcc.n	b99e4 <__adddf3+0x124>
   b99ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b99b0:	d30c      	bcc.n	b99cc <__adddf3+0x10c>
   b99b2:	0849      	lsrs	r1, r1, #1
   b99b4:	ea5f 0030 	movs.w	r0, r0, rrx
   b99b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b99bc:	f104 0401 	add.w	r4, r4, #1
   b99c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b99c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b99c8:	f080 809a 	bcs.w	b9b00 <__adddf3+0x240>
   b99cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b99d0:	bf08      	it	eq
   b99d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b99d6:	f150 0000 	adcs.w	r0, r0, #0
   b99da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b99de:	ea41 0105 	orr.w	r1, r1, r5
   b99e2:	bd30      	pop	{r4, r5, pc}
   b99e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b99e8:	4140      	adcs	r0, r0
   b99ea:	eb41 0101 	adc.w	r1, r1, r1
   b99ee:	3c01      	subs	r4, #1
   b99f0:	bf28      	it	cs
   b99f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b99f6:	d2e9      	bcs.n	b99cc <__adddf3+0x10c>
   b99f8:	f091 0f00 	teq	r1, #0
   b99fc:	bf04      	itt	eq
   b99fe:	4601      	moveq	r1, r0
   b9a00:	2000      	moveq	r0, #0
   b9a02:	fab1 f381 	clz	r3, r1
   b9a06:	bf08      	it	eq
   b9a08:	3320      	addeq	r3, #32
   b9a0a:	f1a3 030b 	sub.w	r3, r3, #11
   b9a0e:	f1b3 0220 	subs.w	r2, r3, #32
   b9a12:	da0c      	bge.n	b9a2e <__adddf3+0x16e>
   b9a14:	320c      	adds	r2, #12
   b9a16:	dd08      	ble.n	b9a2a <__adddf3+0x16a>
   b9a18:	f102 0c14 	add.w	ip, r2, #20
   b9a1c:	f1c2 020c 	rsb	r2, r2, #12
   b9a20:	fa01 f00c 	lsl.w	r0, r1, ip
   b9a24:	fa21 f102 	lsr.w	r1, r1, r2
   b9a28:	e00c      	b.n	b9a44 <__adddf3+0x184>
   b9a2a:	f102 0214 	add.w	r2, r2, #20
   b9a2e:	bfd8      	it	le
   b9a30:	f1c2 0c20 	rsble	ip, r2, #32
   b9a34:	fa01 f102 	lsl.w	r1, r1, r2
   b9a38:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9a3c:	bfdc      	itt	le
   b9a3e:	ea41 010c 	orrle.w	r1, r1, ip
   b9a42:	4090      	lslle	r0, r2
   b9a44:	1ae4      	subs	r4, r4, r3
   b9a46:	bfa2      	ittt	ge
   b9a48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9a4c:	4329      	orrge	r1, r5
   b9a4e:	bd30      	popge	{r4, r5, pc}
   b9a50:	ea6f 0404 	mvn.w	r4, r4
   b9a54:	3c1f      	subs	r4, #31
   b9a56:	da1c      	bge.n	b9a92 <__adddf3+0x1d2>
   b9a58:	340c      	adds	r4, #12
   b9a5a:	dc0e      	bgt.n	b9a7a <__adddf3+0x1ba>
   b9a5c:	f104 0414 	add.w	r4, r4, #20
   b9a60:	f1c4 0220 	rsb	r2, r4, #32
   b9a64:	fa20 f004 	lsr.w	r0, r0, r4
   b9a68:	fa01 f302 	lsl.w	r3, r1, r2
   b9a6c:	ea40 0003 	orr.w	r0, r0, r3
   b9a70:	fa21 f304 	lsr.w	r3, r1, r4
   b9a74:	ea45 0103 	orr.w	r1, r5, r3
   b9a78:	bd30      	pop	{r4, r5, pc}
   b9a7a:	f1c4 040c 	rsb	r4, r4, #12
   b9a7e:	f1c4 0220 	rsb	r2, r4, #32
   b9a82:	fa20 f002 	lsr.w	r0, r0, r2
   b9a86:	fa01 f304 	lsl.w	r3, r1, r4
   b9a8a:	ea40 0003 	orr.w	r0, r0, r3
   b9a8e:	4629      	mov	r1, r5
   b9a90:	bd30      	pop	{r4, r5, pc}
   b9a92:	fa21 f004 	lsr.w	r0, r1, r4
   b9a96:	4629      	mov	r1, r5
   b9a98:	bd30      	pop	{r4, r5, pc}
   b9a9a:	f094 0f00 	teq	r4, #0
   b9a9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9aa2:	bf06      	itte	eq
   b9aa4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9aa8:	3401      	addeq	r4, #1
   b9aaa:	3d01      	subne	r5, #1
   b9aac:	e74e      	b.n	b994c <__adddf3+0x8c>
   b9aae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9ab2:	bf18      	it	ne
   b9ab4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9ab8:	d029      	beq.n	b9b0e <__adddf3+0x24e>
   b9aba:	ea94 0f05 	teq	r4, r5
   b9abe:	bf08      	it	eq
   b9ac0:	ea90 0f02 	teqeq	r0, r2
   b9ac4:	d005      	beq.n	b9ad2 <__adddf3+0x212>
   b9ac6:	ea54 0c00 	orrs.w	ip, r4, r0
   b9aca:	bf04      	itt	eq
   b9acc:	4619      	moveq	r1, r3
   b9ace:	4610      	moveq	r0, r2
   b9ad0:	bd30      	pop	{r4, r5, pc}
   b9ad2:	ea91 0f03 	teq	r1, r3
   b9ad6:	bf1e      	ittt	ne
   b9ad8:	2100      	movne	r1, #0
   b9ada:	2000      	movne	r0, #0
   b9adc:	bd30      	popne	{r4, r5, pc}
   b9ade:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9ae2:	d105      	bne.n	b9af0 <__adddf3+0x230>
   b9ae4:	0040      	lsls	r0, r0, #1
   b9ae6:	4149      	adcs	r1, r1
   b9ae8:	bf28      	it	cs
   b9aea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9aee:	bd30      	pop	{r4, r5, pc}
   b9af0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9af4:	bf3c      	itt	cc
   b9af6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9afa:	bd30      	popcc	{r4, r5, pc}
   b9afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9b00:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9b04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9b08:	f04f 0000 	mov.w	r0, #0
   b9b0c:	bd30      	pop	{r4, r5, pc}
   b9b0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9b12:	bf1a      	itte	ne
   b9b14:	4619      	movne	r1, r3
   b9b16:	4610      	movne	r0, r2
   b9b18:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9b1c:	bf1c      	itt	ne
   b9b1e:	460b      	movne	r3, r1
   b9b20:	4602      	movne	r2, r0
   b9b22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9b26:	bf06      	itte	eq
   b9b28:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9b2c:	ea91 0f03 	teqeq	r1, r3
   b9b30:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9b34:	bd30      	pop	{r4, r5, pc}
   b9b36:	bf00      	nop

000b9b38 <__aeabi_ui2d>:
   b9b38:	f090 0f00 	teq	r0, #0
   b9b3c:	bf04      	itt	eq
   b9b3e:	2100      	moveq	r1, #0
   b9b40:	4770      	bxeq	lr
   b9b42:	b530      	push	{r4, r5, lr}
   b9b44:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9b48:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9b4c:	f04f 0500 	mov.w	r5, #0
   b9b50:	f04f 0100 	mov.w	r1, #0
   b9b54:	e750      	b.n	b99f8 <__adddf3+0x138>
   b9b56:	bf00      	nop

000b9b58 <__aeabi_i2d>:
   b9b58:	f090 0f00 	teq	r0, #0
   b9b5c:	bf04      	itt	eq
   b9b5e:	2100      	moveq	r1, #0
   b9b60:	4770      	bxeq	lr
   b9b62:	b530      	push	{r4, r5, lr}
   b9b64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9b68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9b6c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9b70:	bf48      	it	mi
   b9b72:	4240      	negmi	r0, r0
   b9b74:	f04f 0100 	mov.w	r1, #0
   b9b78:	e73e      	b.n	b99f8 <__adddf3+0x138>
   b9b7a:	bf00      	nop

000b9b7c <__aeabi_f2d>:
   b9b7c:	0042      	lsls	r2, r0, #1
   b9b7e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9b82:	ea4f 0131 	mov.w	r1, r1, rrx
   b9b86:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9b8a:	bf1f      	itttt	ne
   b9b8c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9b90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9b94:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9b98:	4770      	bxne	lr
   b9b9a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9b9e:	bf08      	it	eq
   b9ba0:	4770      	bxeq	lr
   b9ba2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9ba6:	bf04      	itt	eq
   b9ba8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9bac:	4770      	bxeq	lr
   b9bae:	b530      	push	{r4, r5, lr}
   b9bb0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9bb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9bb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9bbc:	e71c      	b.n	b99f8 <__adddf3+0x138>
   b9bbe:	bf00      	nop

000b9bc0 <__aeabi_ul2d>:
   b9bc0:	ea50 0201 	orrs.w	r2, r0, r1
   b9bc4:	bf08      	it	eq
   b9bc6:	4770      	bxeq	lr
   b9bc8:	b530      	push	{r4, r5, lr}
   b9bca:	f04f 0500 	mov.w	r5, #0
   b9bce:	e00a      	b.n	b9be6 <__aeabi_l2d+0x16>

000b9bd0 <__aeabi_l2d>:
   b9bd0:	ea50 0201 	orrs.w	r2, r0, r1
   b9bd4:	bf08      	it	eq
   b9bd6:	4770      	bxeq	lr
   b9bd8:	b530      	push	{r4, r5, lr}
   b9bda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9bde:	d502      	bpl.n	b9be6 <__aeabi_l2d+0x16>
   b9be0:	4240      	negs	r0, r0
   b9be2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9be6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9bea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9bee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9bf2:	f43f aed8 	beq.w	b99a6 <__adddf3+0xe6>
   b9bf6:	f04f 0203 	mov.w	r2, #3
   b9bfa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9bfe:	bf18      	it	ne
   b9c00:	3203      	addne	r2, #3
   b9c02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9c06:	bf18      	it	ne
   b9c08:	3203      	addne	r2, #3
   b9c0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9c0e:	f1c2 0320 	rsb	r3, r2, #32
   b9c12:	fa00 fc03 	lsl.w	ip, r0, r3
   b9c16:	fa20 f002 	lsr.w	r0, r0, r2
   b9c1a:	fa01 fe03 	lsl.w	lr, r1, r3
   b9c1e:	ea40 000e 	orr.w	r0, r0, lr
   b9c22:	fa21 f102 	lsr.w	r1, r1, r2
   b9c26:	4414      	add	r4, r2
   b9c28:	e6bd      	b.n	b99a6 <__adddf3+0xe6>
   b9c2a:	bf00      	nop

000b9c2c <__aeabi_dmul>:
   b9c2c:	b570      	push	{r4, r5, r6, lr}
   b9c2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9c32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9c36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9c3a:	bf1d      	ittte	ne
   b9c3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9c40:	ea94 0f0c 	teqne	r4, ip
   b9c44:	ea95 0f0c 	teqne	r5, ip
   b9c48:	f000 f8de 	bleq	b9e08 <__aeabi_dmul+0x1dc>
   b9c4c:	442c      	add	r4, r5
   b9c4e:	ea81 0603 	eor.w	r6, r1, r3
   b9c52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9c56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9c5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9c5e:	bf18      	it	ne
   b9c60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9c64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9c6c:	d038      	beq.n	b9ce0 <__aeabi_dmul+0xb4>
   b9c6e:	fba0 ce02 	umull	ip, lr, r0, r2
   b9c72:	f04f 0500 	mov.w	r5, #0
   b9c76:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9c7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9c7e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9c82:	f04f 0600 	mov.w	r6, #0
   b9c86:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9c8a:	f09c 0f00 	teq	ip, #0
   b9c8e:	bf18      	it	ne
   b9c90:	f04e 0e01 	orrne.w	lr, lr, #1
   b9c94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9c98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9c9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9ca0:	d204      	bcs.n	b9cac <__aeabi_dmul+0x80>
   b9ca2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9ca6:	416d      	adcs	r5, r5
   b9ca8:	eb46 0606 	adc.w	r6, r6, r6
   b9cac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9cb0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9cb4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9cb8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9cbc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9cc0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9cc4:	bf88      	it	hi
   b9cc6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9cca:	d81e      	bhi.n	b9d0a <__aeabi_dmul+0xde>
   b9ccc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9cd0:	bf08      	it	eq
   b9cd2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9cd6:	f150 0000 	adcs.w	r0, r0, #0
   b9cda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9cde:	bd70      	pop	{r4, r5, r6, pc}
   b9ce0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9ce4:	ea46 0101 	orr.w	r1, r6, r1
   b9ce8:	ea40 0002 	orr.w	r0, r0, r2
   b9cec:	ea81 0103 	eor.w	r1, r1, r3
   b9cf0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9cf4:	bfc2      	ittt	gt
   b9cf6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9cfa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9cfe:	bd70      	popgt	{r4, r5, r6, pc}
   b9d00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9d04:	f04f 0e00 	mov.w	lr, #0
   b9d08:	3c01      	subs	r4, #1
   b9d0a:	f300 80ab 	bgt.w	b9e64 <__aeabi_dmul+0x238>
   b9d0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9d12:	bfde      	ittt	le
   b9d14:	2000      	movle	r0, #0
   b9d16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9d1a:	bd70      	pople	{r4, r5, r6, pc}
   b9d1c:	f1c4 0400 	rsb	r4, r4, #0
   b9d20:	3c20      	subs	r4, #32
   b9d22:	da35      	bge.n	b9d90 <__aeabi_dmul+0x164>
   b9d24:	340c      	adds	r4, #12
   b9d26:	dc1b      	bgt.n	b9d60 <__aeabi_dmul+0x134>
   b9d28:	f104 0414 	add.w	r4, r4, #20
   b9d2c:	f1c4 0520 	rsb	r5, r4, #32
   b9d30:	fa00 f305 	lsl.w	r3, r0, r5
   b9d34:	fa20 f004 	lsr.w	r0, r0, r4
   b9d38:	fa01 f205 	lsl.w	r2, r1, r5
   b9d3c:	ea40 0002 	orr.w	r0, r0, r2
   b9d40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9d44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9d48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9d4c:	fa21 f604 	lsr.w	r6, r1, r4
   b9d50:	eb42 0106 	adc.w	r1, r2, r6
   b9d54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d58:	bf08      	it	eq
   b9d5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d5e:	bd70      	pop	{r4, r5, r6, pc}
   b9d60:	f1c4 040c 	rsb	r4, r4, #12
   b9d64:	f1c4 0520 	rsb	r5, r4, #32
   b9d68:	fa00 f304 	lsl.w	r3, r0, r4
   b9d6c:	fa20 f005 	lsr.w	r0, r0, r5
   b9d70:	fa01 f204 	lsl.w	r2, r1, r4
   b9d74:	ea40 0002 	orr.w	r0, r0, r2
   b9d78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9d7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9d80:	f141 0100 	adc.w	r1, r1, #0
   b9d84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d88:	bf08      	it	eq
   b9d8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d8e:	bd70      	pop	{r4, r5, r6, pc}
   b9d90:	f1c4 0520 	rsb	r5, r4, #32
   b9d94:	fa00 f205 	lsl.w	r2, r0, r5
   b9d98:	ea4e 0e02 	orr.w	lr, lr, r2
   b9d9c:	fa20 f304 	lsr.w	r3, r0, r4
   b9da0:	fa01 f205 	lsl.w	r2, r1, r5
   b9da4:	ea43 0302 	orr.w	r3, r3, r2
   b9da8:	fa21 f004 	lsr.w	r0, r1, r4
   b9dac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9db0:	fa21 f204 	lsr.w	r2, r1, r4
   b9db4:	ea20 0002 	bic.w	r0, r0, r2
   b9db8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9dbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9dc0:	bf08      	it	eq
   b9dc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9dc6:	bd70      	pop	{r4, r5, r6, pc}
   b9dc8:	f094 0f00 	teq	r4, #0
   b9dcc:	d10f      	bne.n	b9dee <__aeabi_dmul+0x1c2>
   b9dce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9dd2:	0040      	lsls	r0, r0, #1
   b9dd4:	eb41 0101 	adc.w	r1, r1, r1
   b9dd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9ddc:	bf08      	it	eq
   b9dde:	3c01      	subeq	r4, #1
   b9de0:	d0f7      	beq.n	b9dd2 <__aeabi_dmul+0x1a6>
   b9de2:	ea41 0106 	orr.w	r1, r1, r6
   b9de6:	f095 0f00 	teq	r5, #0
   b9dea:	bf18      	it	ne
   b9dec:	4770      	bxne	lr
   b9dee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b9df2:	0052      	lsls	r2, r2, #1
   b9df4:	eb43 0303 	adc.w	r3, r3, r3
   b9df8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9dfc:	bf08      	it	eq
   b9dfe:	3d01      	subeq	r5, #1
   b9e00:	d0f7      	beq.n	b9df2 <__aeabi_dmul+0x1c6>
   b9e02:	ea43 0306 	orr.w	r3, r3, r6
   b9e06:	4770      	bx	lr
   b9e08:	ea94 0f0c 	teq	r4, ip
   b9e0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9e10:	bf18      	it	ne
   b9e12:	ea95 0f0c 	teqne	r5, ip
   b9e16:	d00c      	beq.n	b9e32 <__aeabi_dmul+0x206>
   b9e18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9e1c:	bf18      	it	ne
   b9e1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9e22:	d1d1      	bne.n	b9dc8 <__aeabi_dmul+0x19c>
   b9e24:	ea81 0103 	eor.w	r1, r1, r3
   b9e28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e2c:	f04f 0000 	mov.w	r0, #0
   b9e30:	bd70      	pop	{r4, r5, r6, pc}
   b9e32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9e36:	bf06      	itte	eq
   b9e38:	4610      	moveq	r0, r2
   b9e3a:	4619      	moveq	r1, r3
   b9e3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9e40:	d019      	beq.n	b9e76 <__aeabi_dmul+0x24a>
   b9e42:	ea94 0f0c 	teq	r4, ip
   b9e46:	d102      	bne.n	b9e4e <__aeabi_dmul+0x222>
   b9e48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9e4c:	d113      	bne.n	b9e76 <__aeabi_dmul+0x24a>
   b9e4e:	ea95 0f0c 	teq	r5, ip
   b9e52:	d105      	bne.n	b9e60 <__aeabi_dmul+0x234>
   b9e54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9e58:	bf1c      	itt	ne
   b9e5a:	4610      	movne	r0, r2
   b9e5c:	4619      	movne	r1, r3
   b9e5e:	d10a      	bne.n	b9e76 <__aeabi_dmul+0x24a>
   b9e60:	ea81 0103 	eor.w	r1, r1, r3
   b9e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9e6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9e70:	f04f 0000 	mov.w	r0, #0
   b9e74:	bd70      	pop	{r4, r5, r6, pc}
   b9e76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9e7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9e7e:	bd70      	pop	{r4, r5, r6, pc}

000b9e80 <__aeabi_ddiv>:
   b9e80:	b570      	push	{r4, r5, r6, lr}
   b9e82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9e86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9e8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9e8e:	bf1d      	ittte	ne
   b9e90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9e94:	ea94 0f0c 	teqne	r4, ip
   b9e98:	ea95 0f0c 	teqne	r5, ip
   b9e9c:	f000 f8a7 	bleq	b9fee <__aeabi_ddiv+0x16e>
   b9ea0:	eba4 0405 	sub.w	r4, r4, r5
   b9ea4:	ea81 0e03 	eor.w	lr, r1, r3
   b9ea8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9eac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9eb0:	f000 8088 	beq.w	b9fc4 <__aeabi_ddiv+0x144>
   b9eb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9eb8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9ebc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9ec0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9ec4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9ec8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9ecc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9ed0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9ed4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9ed8:	429d      	cmp	r5, r3
   b9eda:	bf08      	it	eq
   b9edc:	4296      	cmpeq	r6, r2
   b9ede:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9ee2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9ee6:	d202      	bcs.n	b9eee <__aeabi_ddiv+0x6e>
   b9ee8:	085b      	lsrs	r3, r3, #1
   b9eea:	ea4f 0232 	mov.w	r2, r2, rrx
   b9eee:	1ab6      	subs	r6, r6, r2
   b9ef0:	eb65 0503 	sbc.w	r5, r5, r3
   b9ef4:	085b      	lsrs	r3, r3, #1
   b9ef6:	ea4f 0232 	mov.w	r2, r2, rrx
   b9efa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9efe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9f02:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f06:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f0a:	bf22      	ittt	cs
   b9f0c:	1ab6      	subcs	r6, r6, r2
   b9f0e:	4675      	movcs	r5, lr
   b9f10:	ea40 000c 	orrcs.w	r0, r0, ip
   b9f14:	085b      	lsrs	r3, r3, #1
   b9f16:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f1a:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f22:	bf22      	ittt	cs
   b9f24:	1ab6      	subcs	r6, r6, r2
   b9f26:	4675      	movcs	r5, lr
   b9f28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9f2c:	085b      	lsrs	r3, r3, #1
   b9f2e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f32:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f36:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f3a:	bf22      	ittt	cs
   b9f3c:	1ab6      	subcs	r6, r6, r2
   b9f3e:	4675      	movcs	r5, lr
   b9f40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9f44:	085b      	lsrs	r3, r3, #1
   b9f46:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f4a:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f52:	bf22      	ittt	cs
   b9f54:	1ab6      	subcs	r6, r6, r2
   b9f56:	4675      	movcs	r5, lr
   b9f58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9f5c:	ea55 0e06 	orrs.w	lr, r5, r6
   b9f60:	d018      	beq.n	b9f94 <__aeabi_ddiv+0x114>
   b9f62:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9f66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9f6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9f6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9f72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9f76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9f7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9f7e:	d1c0      	bne.n	b9f02 <__aeabi_ddiv+0x82>
   b9f80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9f84:	d10b      	bne.n	b9f9e <__aeabi_ddiv+0x11e>
   b9f86:	ea41 0100 	orr.w	r1, r1, r0
   b9f8a:	f04f 0000 	mov.w	r0, #0
   b9f8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9f92:	e7b6      	b.n	b9f02 <__aeabi_ddiv+0x82>
   b9f94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9f98:	bf04      	itt	eq
   b9f9a:	4301      	orreq	r1, r0
   b9f9c:	2000      	moveq	r0, #0
   b9f9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9fa2:	bf88      	it	hi
   b9fa4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9fa8:	f63f aeaf 	bhi.w	b9d0a <__aeabi_dmul+0xde>
   b9fac:	ebb5 0c03 	subs.w	ip, r5, r3
   b9fb0:	bf04      	itt	eq
   b9fb2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9fb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9fba:	f150 0000 	adcs.w	r0, r0, #0
   b9fbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9fc2:	bd70      	pop	{r4, r5, r6, pc}
   b9fc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9fc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9fcc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9fd0:	bfc2      	ittt	gt
   b9fd2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9fd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9fda:	bd70      	popgt	{r4, r5, r6, pc}
   b9fdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9fe0:	f04f 0e00 	mov.w	lr, #0
   b9fe4:	3c01      	subs	r4, #1
   b9fe6:	e690      	b.n	b9d0a <__aeabi_dmul+0xde>
   b9fe8:	ea45 0e06 	orr.w	lr, r5, r6
   b9fec:	e68d      	b.n	b9d0a <__aeabi_dmul+0xde>
   b9fee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9ff2:	ea94 0f0c 	teq	r4, ip
   b9ff6:	bf08      	it	eq
   b9ff8:	ea95 0f0c 	teqeq	r5, ip
   b9ffc:	f43f af3b 	beq.w	b9e76 <__aeabi_dmul+0x24a>
   ba000:	ea94 0f0c 	teq	r4, ip
   ba004:	d10a      	bne.n	ba01c <__aeabi_ddiv+0x19c>
   ba006:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba00a:	f47f af34 	bne.w	b9e76 <__aeabi_dmul+0x24a>
   ba00e:	ea95 0f0c 	teq	r5, ip
   ba012:	f47f af25 	bne.w	b9e60 <__aeabi_dmul+0x234>
   ba016:	4610      	mov	r0, r2
   ba018:	4619      	mov	r1, r3
   ba01a:	e72c      	b.n	b9e76 <__aeabi_dmul+0x24a>
   ba01c:	ea95 0f0c 	teq	r5, ip
   ba020:	d106      	bne.n	ba030 <__aeabi_ddiv+0x1b0>
   ba022:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba026:	f43f aefd 	beq.w	b9e24 <__aeabi_dmul+0x1f8>
   ba02a:	4610      	mov	r0, r2
   ba02c:	4619      	mov	r1, r3
   ba02e:	e722      	b.n	b9e76 <__aeabi_dmul+0x24a>
   ba030:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba034:	bf18      	it	ne
   ba036:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba03a:	f47f aec5 	bne.w	b9dc8 <__aeabi_dmul+0x19c>
   ba03e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba042:	f47f af0d 	bne.w	b9e60 <__aeabi_dmul+0x234>
   ba046:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba04a:	f47f aeeb 	bne.w	b9e24 <__aeabi_dmul+0x1f8>
   ba04e:	e712      	b.n	b9e76 <__aeabi_dmul+0x24a>

000ba050 <__gedf2>:
   ba050:	f04f 3cff 	mov.w	ip, #4294967295
   ba054:	e006      	b.n	ba064 <__cmpdf2+0x4>
   ba056:	bf00      	nop

000ba058 <__ledf2>:
   ba058:	f04f 0c01 	mov.w	ip, #1
   ba05c:	e002      	b.n	ba064 <__cmpdf2+0x4>
   ba05e:	bf00      	nop

000ba060 <__cmpdf2>:
   ba060:	f04f 0c01 	mov.w	ip, #1
   ba064:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba068:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba06c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba070:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba074:	bf18      	it	ne
   ba076:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba07a:	d01b      	beq.n	ba0b4 <__cmpdf2+0x54>
   ba07c:	b001      	add	sp, #4
   ba07e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba082:	bf0c      	ite	eq
   ba084:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba088:	ea91 0f03 	teqne	r1, r3
   ba08c:	bf02      	ittt	eq
   ba08e:	ea90 0f02 	teqeq	r0, r2
   ba092:	2000      	moveq	r0, #0
   ba094:	4770      	bxeq	lr
   ba096:	f110 0f00 	cmn.w	r0, #0
   ba09a:	ea91 0f03 	teq	r1, r3
   ba09e:	bf58      	it	pl
   ba0a0:	4299      	cmppl	r1, r3
   ba0a2:	bf08      	it	eq
   ba0a4:	4290      	cmpeq	r0, r2
   ba0a6:	bf2c      	ite	cs
   ba0a8:	17d8      	asrcs	r0, r3, #31
   ba0aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba0ae:	f040 0001 	orr.w	r0, r0, #1
   ba0b2:	4770      	bx	lr
   ba0b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba0b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba0bc:	d102      	bne.n	ba0c4 <__cmpdf2+0x64>
   ba0be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba0c2:	d107      	bne.n	ba0d4 <__cmpdf2+0x74>
   ba0c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba0c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba0cc:	d1d6      	bne.n	ba07c <__cmpdf2+0x1c>
   ba0ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba0d2:	d0d3      	beq.n	ba07c <__cmpdf2+0x1c>
   ba0d4:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba0d8:	4770      	bx	lr
   ba0da:	bf00      	nop

000ba0dc <__aeabi_cdrcmple>:
   ba0dc:	4684      	mov	ip, r0
   ba0de:	4610      	mov	r0, r2
   ba0e0:	4662      	mov	r2, ip
   ba0e2:	468c      	mov	ip, r1
   ba0e4:	4619      	mov	r1, r3
   ba0e6:	4663      	mov	r3, ip
   ba0e8:	e000      	b.n	ba0ec <__aeabi_cdcmpeq>
   ba0ea:	bf00      	nop

000ba0ec <__aeabi_cdcmpeq>:
   ba0ec:	b501      	push	{r0, lr}
   ba0ee:	f7ff ffb7 	bl	ba060 <__cmpdf2>
   ba0f2:	2800      	cmp	r0, #0
   ba0f4:	bf48      	it	mi
   ba0f6:	f110 0f00 	cmnmi.w	r0, #0
   ba0fa:	bd01      	pop	{r0, pc}

000ba0fc <__aeabi_dcmpeq>:
   ba0fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba100:	f7ff fff4 	bl	ba0ec <__aeabi_cdcmpeq>
   ba104:	bf0c      	ite	eq
   ba106:	2001      	moveq	r0, #1
   ba108:	2000      	movne	r0, #0
   ba10a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba10e:	bf00      	nop

000ba110 <__aeabi_dcmplt>:
   ba110:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba114:	f7ff ffea 	bl	ba0ec <__aeabi_cdcmpeq>
   ba118:	bf34      	ite	cc
   ba11a:	2001      	movcc	r0, #1
   ba11c:	2000      	movcs	r0, #0
   ba11e:	f85d fb08 	ldr.w	pc, [sp], #8
   ba122:	bf00      	nop

000ba124 <__aeabi_dcmple>:
   ba124:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba128:	f7ff ffe0 	bl	ba0ec <__aeabi_cdcmpeq>
   ba12c:	bf94      	ite	ls
   ba12e:	2001      	movls	r0, #1
   ba130:	2000      	movhi	r0, #0
   ba132:	f85d fb08 	ldr.w	pc, [sp], #8
   ba136:	bf00      	nop

000ba138 <__aeabi_dcmpge>:
   ba138:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba13c:	f7ff ffce 	bl	ba0dc <__aeabi_cdrcmple>
   ba140:	bf94      	ite	ls
   ba142:	2001      	movls	r0, #1
   ba144:	2000      	movhi	r0, #0
   ba146:	f85d fb08 	ldr.w	pc, [sp], #8
   ba14a:	bf00      	nop

000ba14c <__aeabi_dcmpgt>:
   ba14c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba150:	f7ff ffc4 	bl	ba0dc <__aeabi_cdrcmple>
   ba154:	bf34      	ite	cc
   ba156:	2001      	movcc	r0, #1
   ba158:	2000      	movcs	r0, #0
   ba15a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba15e:	bf00      	nop

000ba160 <__aeabi_d2uiz>:
   ba160:	004a      	lsls	r2, r1, #1
   ba162:	d211      	bcs.n	ba188 <__aeabi_d2uiz+0x28>
   ba164:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba168:	d211      	bcs.n	ba18e <__aeabi_d2uiz+0x2e>
   ba16a:	d50d      	bpl.n	ba188 <__aeabi_d2uiz+0x28>
   ba16c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba170:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba174:	d40e      	bmi.n	ba194 <__aeabi_d2uiz+0x34>
   ba176:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba17a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba17e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba182:	fa23 f002 	lsr.w	r0, r3, r2
   ba186:	4770      	bx	lr
   ba188:	f04f 0000 	mov.w	r0, #0
   ba18c:	4770      	bx	lr
   ba18e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba192:	d102      	bne.n	ba19a <__aeabi_d2uiz+0x3a>
   ba194:	f04f 30ff 	mov.w	r0, #4294967295
   ba198:	4770      	bx	lr
   ba19a:	f04f 0000 	mov.w	r0, #0
   ba19e:	4770      	bx	lr

000ba1a0 <__aeabi_f2lz>:
   ba1a0:	ee07 0a90 	vmov	s15, r0
   ba1a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba1ac:	d401      	bmi.n	ba1b2 <__aeabi_f2lz+0x12>
   ba1ae:	f000 b80b 	b.w	ba1c8 <__aeabi_f2ulz>
   ba1b2:	eef1 7a67 	vneg.f32	s15, s15
   ba1b6:	b508      	push	{r3, lr}
   ba1b8:	ee17 0a90 	vmov	r0, s15
   ba1bc:	f000 f804 	bl	ba1c8 <__aeabi_f2ulz>
   ba1c0:	4240      	negs	r0, r0
   ba1c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba1c6:	bd08      	pop	{r3, pc}

000ba1c8 <__aeabi_f2ulz>:
   ba1c8:	b5d0      	push	{r4, r6, r7, lr}
   ba1ca:	f7ff fcd7 	bl	b9b7c <__aeabi_f2d>
   ba1ce:	4b0c      	ldr	r3, [pc, #48]	; (ba200 <__aeabi_f2ulz+0x38>)
   ba1d0:	2200      	movs	r2, #0
   ba1d2:	4606      	mov	r6, r0
   ba1d4:	460f      	mov	r7, r1
   ba1d6:	f7ff fd29 	bl	b9c2c <__aeabi_dmul>
   ba1da:	f7ff ffc1 	bl	ba160 <__aeabi_d2uiz>
   ba1de:	4604      	mov	r4, r0
   ba1e0:	f7ff fcaa 	bl	b9b38 <__aeabi_ui2d>
   ba1e4:	4b07      	ldr	r3, [pc, #28]	; (ba204 <__aeabi_f2ulz+0x3c>)
   ba1e6:	2200      	movs	r2, #0
   ba1e8:	f7ff fd20 	bl	b9c2c <__aeabi_dmul>
   ba1ec:	4602      	mov	r2, r0
   ba1ee:	460b      	mov	r3, r1
   ba1f0:	4630      	mov	r0, r6
   ba1f2:	4639      	mov	r1, r7
   ba1f4:	f7ff fb62 	bl	b98bc <__aeabi_dsub>
   ba1f8:	f7ff ffb2 	bl	ba160 <__aeabi_d2uiz>
   ba1fc:	4621      	mov	r1, r4
   ba1fe:	bdd0      	pop	{r4, r6, r7, pc}
   ba200:	3df00000 	.word	0x3df00000
   ba204:	41f00000 	.word	0x41f00000

000ba208 <__aeabi_d2ulz>:
   ba208:	b5d0      	push	{r4, r6, r7, lr}
   ba20a:	4b0c      	ldr	r3, [pc, #48]	; (ba23c <__aeabi_d2ulz+0x34>)
   ba20c:	2200      	movs	r2, #0
   ba20e:	4606      	mov	r6, r0
   ba210:	460f      	mov	r7, r1
   ba212:	f7ff fd0b 	bl	b9c2c <__aeabi_dmul>
   ba216:	f7ff ffa3 	bl	ba160 <__aeabi_d2uiz>
   ba21a:	4604      	mov	r4, r0
   ba21c:	f7ff fc8c 	bl	b9b38 <__aeabi_ui2d>
   ba220:	4b07      	ldr	r3, [pc, #28]	; (ba240 <__aeabi_d2ulz+0x38>)
   ba222:	2200      	movs	r2, #0
   ba224:	f7ff fd02 	bl	b9c2c <__aeabi_dmul>
   ba228:	4602      	mov	r2, r0
   ba22a:	460b      	mov	r3, r1
   ba22c:	4630      	mov	r0, r6
   ba22e:	4639      	mov	r1, r7
   ba230:	f7ff fb44 	bl	b98bc <__aeabi_dsub>
   ba234:	f7ff ff94 	bl	ba160 <__aeabi_d2uiz>
   ba238:	4621      	mov	r1, r4
   ba23a:	bdd0      	pop	{r4, r6, r7, pc}
   ba23c:	3df00000 	.word	0x3df00000
   ba240:	41f00000 	.word	0x41f00000

000ba244 <atexit>:
   ba244:	2300      	movs	r3, #0
   ba246:	4601      	mov	r1, r0
   ba248:	461a      	mov	r2, r3
   ba24a:	4618      	mov	r0, r3
   ba24c:	f001 b80a 	b.w	bb264 <__register_exitproc>

000ba250 <atof>:
   ba250:	2100      	movs	r1, #0
   ba252:	f000 bf13 	b.w	bb07c <strtod>

000ba256 <atoi>:
   ba256:	220a      	movs	r2, #10
   ba258:	2100      	movs	r1, #0
   ba25a:	f000 bff9 	b.w	bb250 <strtol>

000ba25e <memcmp>:
   ba25e:	b510      	push	{r4, lr}
   ba260:	3901      	subs	r1, #1
   ba262:	4402      	add	r2, r0
   ba264:	4290      	cmp	r0, r2
   ba266:	d101      	bne.n	ba26c <memcmp+0xe>
   ba268:	2000      	movs	r0, #0
   ba26a:	e005      	b.n	ba278 <memcmp+0x1a>
   ba26c:	7803      	ldrb	r3, [r0, #0]
   ba26e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba272:	42a3      	cmp	r3, r4
   ba274:	d001      	beq.n	ba27a <memcmp+0x1c>
   ba276:	1b18      	subs	r0, r3, r4
   ba278:	bd10      	pop	{r4, pc}
   ba27a:	3001      	adds	r0, #1
   ba27c:	e7f2      	b.n	ba264 <memcmp+0x6>

000ba27e <memcpy>:
   ba27e:	440a      	add	r2, r1
   ba280:	4291      	cmp	r1, r2
   ba282:	f100 33ff 	add.w	r3, r0, #4294967295
   ba286:	d100      	bne.n	ba28a <memcpy+0xc>
   ba288:	4770      	bx	lr
   ba28a:	b510      	push	{r4, lr}
   ba28c:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba290:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba294:	4291      	cmp	r1, r2
   ba296:	d1f9      	bne.n	ba28c <memcpy+0xe>
   ba298:	bd10      	pop	{r4, pc}

000ba29a <memmove>:
   ba29a:	4288      	cmp	r0, r1
   ba29c:	b510      	push	{r4, lr}
   ba29e:	eb01 0402 	add.w	r4, r1, r2
   ba2a2:	d902      	bls.n	ba2aa <memmove+0x10>
   ba2a4:	4284      	cmp	r4, r0
   ba2a6:	4623      	mov	r3, r4
   ba2a8:	d807      	bhi.n	ba2ba <memmove+0x20>
   ba2aa:	1e43      	subs	r3, r0, #1
   ba2ac:	42a1      	cmp	r1, r4
   ba2ae:	d008      	beq.n	ba2c2 <memmove+0x28>
   ba2b0:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba2b4:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba2b8:	e7f8      	b.n	ba2ac <memmove+0x12>
   ba2ba:	4402      	add	r2, r0
   ba2bc:	4601      	mov	r1, r0
   ba2be:	428a      	cmp	r2, r1
   ba2c0:	d100      	bne.n	ba2c4 <memmove+0x2a>
   ba2c2:	bd10      	pop	{r4, pc}
   ba2c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba2c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba2cc:	e7f7      	b.n	ba2be <memmove+0x24>

000ba2ce <memset>:
   ba2ce:	4402      	add	r2, r0
   ba2d0:	4603      	mov	r3, r0
   ba2d2:	4293      	cmp	r3, r2
   ba2d4:	d100      	bne.n	ba2d8 <memset+0xa>
   ba2d6:	4770      	bx	lr
   ba2d8:	f803 1b01 	strb.w	r1, [r3], #1
   ba2dc:	e7f9      	b.n	ba2d2 <memset+0x4>
	...

000ba2e0 <srand>:
   ba2e0:	b538      	push	{r3, r4, r5, lr}
   ba2e2:	4b10      	ldr	r3, [pc, #64]	; (ba324 <srand+0x44>)
   ba2e4:	681d      	ldr	r5, [r3, #0]
   ba2e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba2e8:	4604      	mov	r4, r0
   ba2ea:	b9b3      	cbnz	r3, ba31a <srand+0x3a>
   ba2ec:	2018      	movs	r0, #24
   ba2ee:	f7fc f931 	bl	b6554 <malloc>
   ba2f2:	4602      	mov	r2, r0
   ba2f4:	63a8      	str	r0, [r5, #56]	; 0x38
   ba2f6:	b920      	cbnz	r0, ba302 <srand+0x22>
   ba2f8:	4b0b      	ldr	r3, [pc, #44]	; (ba328 <srand+0x48>)
   ba2fa:	480c      	ldr	r0, [pc, #48]	; (ba32c <srand+0x4c>)
   ba2fc:	2142      	movs	r1, #66	; 0x42
   ba2fe:	f7fc f971 	bl	b65e4 <__assert_func>
   ba302:	490b      	ldr	r1, [pc, #44]	; (ba330 <srand+0x50>)
   ba304:	4b0b      	ldr	r3, [pc, #44]	; (ba334 <srand+0x54>)
   ba306:	e9c0 1300 	strd	r1, r3, [r0]
   ba30a:	4b0b      	ldr	r3, [pc, #44]	; (ba338 <srand+0x58>)
   ba30c:	6083      	str	r3, [r0, #8]
   ba30e:	230b      	movs	r3, #11
   ba310:	8183      	strh	r3, [r0, #12]
   ba312:	2100      	movs	r1, #0
   ba314:	2001      	movs	r0, #1
   ba316:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba31a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba31c:	2200      	movs	r2, #0
   ba31e:	611c      	str	r4, [r3, #16]
   ba320:	615a      	str	r2, [r3, #20]
   ba322:	bd38      	pop	{r3, r4, r5, pc}
   ba324:	2003d594 	.word	0x2003d594
   ba328:	000bd2c6 	.word	0x000bd2c6
   ba32c:	000bd2dd 	.word	0x000bd2dd
   ba330:	abcd330e 	.word	0xabcd330e
   ba334:	e66d1234 	.word	0xe66d1234
   ba338:	0005deec 	.word	0x0005deec

000ba33c <strcat>:
   ba33c:	b510      	push	{r4, lr}
   ba33e:	4602      	mov	r2, r0
   ba340:	7814      	ldrb	r4, [r2, #0]
   ba342:	4613      	mov	r3, r2
   ba344:	3201      	adds	r2, #1
   ba346:	2c00      	cmp	r4, #0
   ba348:	d1fa      	bne.n	ba340 <strcat+0x4>
   ba34a:	3b01      	subs	r3, #1
   ba34c:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba350:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba354:	2a00      	cmp	r2, #0
   ba356:	d1f9      	bne.n	ba34c <strcat+0x10>
   ba358:	bd10      	pop	{r4, pc}

000ba35a <strcmp>:
   ba35a:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba35e:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba362:	2a01      	cmp	r2, #1
   ba364:	bf28      	it	cs
   ba366:	429a      	cmpcs	r2, r3
   ba368:	d0f7      	beq.n	ba35a <strcmp>
   ba36a:	1ad0      	subs	r0, r2, r3
   ba36c:	4770      	bx	lr

000ba36e <strcpy>:
   ba36e:	4603      	mov	r3, r0
   ba370:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba374:	f803 2b01 	strb.w	r2, [r3], #1
   ba378:	2a00      	cmp	r2, #0
   ba37a:	d1f9      	bne.n	ba370 <strcpy+0x2>
   ba37c:	4770      	bx	lr
	...

000ba380 <strdup>:
   ba380:	4b02      	ldr	r3, [pc, #8]	; (ba38c <strdup+0xc>)
   ba382:	4601      	mov	r1, r0
   ba384:	6818      	ldr	r0, [r3, #0]
   ba386:	f000 b803 	b.w	ba390 <_strdup_r>
   ba38a:	bf00      	nop
   ba38c:	2003d594 	.word	0x2003d594

000ba390 <_strdup_r>:
   ba390:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba392:	4604      	mov	r4, r0
   ba394:	4608      	mov	r0, r1
   ba396:	460d      	mov	r5, r1
   ba398:	f000 f80f 	bl	ba3ba <strlen>
   ba39c:	1c42      	adds	r2, r0, #1
   ba39e:	4611      	mov	r1, r2
   ba3a0:	4620      	mov	r0, r4
   ba3a2:	9201      	str	r2, [sp, #4]
   ba3a4:	f7fc f90e 	bl	b65c4 <_malloc_r>
   ba3a8:	4604      	mov	r4, r0
   ba3aa:	b118      	cbz	r0, ba3b4 <_strdup_r+0x24>
   ba3ac:	9a01      	ldr	r2, [sp, #4]
   ba3ae:	4629      	mov	r1, r5
   ba3b0:	f7ff ff65 	bl	ba27e <memcpy>
   ba3b4:	4620      	mov	r0, r4
   ba3b6:	b003      	add	sp, #12
   ba3b8:	bd30      	pop	{r4, r5, pc}

000ba3ba <strlen>:
   ba3ba:	4603      	mov	r3, r0
   ba3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba3c0:	2a00      	cmp	r2, #0
   ba3c2:	d1fb      	bne.n	ba3bc <strlen+0x2>
   ba3c4:	1a18      	subs	r0, r3, r0
   ba3c6:	3801      	subs	r0, #1
   ba3c8:	4770      	bx	lr

000ba3ca <strncmp>:
   ba3ca:	b510      	push	{r4, lr}
   ba3cc:	b17a      	cbz	r2, ba3ee <strncmp+0x24>
   ba3ce:	4603      	mov	r3, r0
   ba3d0:	3901      	subs	r1, #1
   ba3d2:	1884      	adds	r4, r0, r2
   ba3d4:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba3d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba3dc:	4290      	cmp	r0, r2
   ba3de:	d101      	bne.n	ba3e4 <strncmp+0x1a>
   ba3e0:	42a3      	cmp	r3, r4
   ba3e2:	d101      	bne.n	ba3e8 <strncmp+0x1e>
   ba3e4:	1a80      	subs	r0, r0, r2
   ba3e6:	bd10      	pop	{r4, pc}
   ba3e8:	2800      	cmp	r0, #0
   ba3ea:	d1f3      	bne.n	ba3d4 <strncmp+0xa>
   ba3ec:	e7fa      	b.n	ba3e4 <strncmp+0x1a>
   ba3ee:	4610      	mov	r0, r2
   ba3f0:	e7f9      	b.n	ba3e6 <strncmp+0x1c>

000ba3f2 <strnlen>:
   ba3f2:	b510      	push	{r4, lr}
   ba3f4:	4602      	mov	r2, r0
   ba3f6:	4401      	add	r1, r0
   ba3f8:	428a      	cmp	r2, r1
   ba3fa:	4613      	mov	r3, r2
   ba3fc:	d003      	beq.n	ba406 <strnlen+0x14>
   ba3fe:	781c      	ldrb	r4, [r3, #0]
   ba400:	3201      	adds	r2, #1
   ba402:	2c00      	cmp	r4, #0
   ba404:	d1f8      	bne.n	ba3f8 <strnlen+0x6>
   ba406:	1a18      	subs	r0, r3, r0
   ba408:	bd10      	pop	{r4, pc}

000ba40a <strstr>:
   ba40a:	780a      	ldrb	r2, [r1, #0]
   ba40c:	b570      	push	{r4, r5, r6, lr}
   ba40e:	b96a      	cbnz	r2, ba42c <strstr+0x22>
   ba410:	bd70      	pop	{r4, r5, r6, pc}
   ba412:	429a      	cmp	r2, r3
   ba414:	d109      	bne.n	ba42a <strstr+0x20>
   ba416:	460c      	mov	r4, r1
   ba418:	4605      	mov	r5, r0
   ba41a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   ba41e:	2b00      	cmp	r3, #0
   ba420:	d0f6      	beq.n	ba410 <strstr+0x6>
   ba422:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   ba426:	429e      	cmp	r6, r3
   ba428:	d0f7      	beq.n	ba41a <strstr+0x10>
   ba42a:	3001      	adds	r0, #1
   ba42c:	7803      	ldrb	r3, [r0, #0]
   ba42e:	2b00      	cmp	r3, #0
   ba430:	d1ef      	bne.n	ba412 <strstr+0x8>
   ba432:	4618      	mov	r0, r3
   ba434:	e7ec      	b.n	ba410 <strstr+0x6>

000ba436 <sulp>:
   ba436:	b570      	push	{r4, r5, r6, lr}
   ba438:	4604      	mov	r4, r0
   ba43a:	460d      	mov	r5, r1
   ba43c:	ec45 4b10 	vmov	d0, r4, r5
   ba440:	4616      	mov	r6, r2
   ba442:	f001 fe69 	bl	bc118 <__ulp>
   ba446:	ec51 0b10 	vmov	r0, r1, d0
   ba44a:	b17e      	cbz	r6, ba46c <sulp+0x36>
   ba44c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba450:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba454:	2b00      	cmp	r3, #0
   ba456:	dd09      	ble.n	ba46c <sulp+0x36>
   ba458:	051b      	lsls	r3, r3, #20
   ba45a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba45e:	2400      	movs	r4, #0
   ba460:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba464:	4622      	mov	r2, r4
   ba466:	462b      	mov	r3, r5
   ba468:	f7ff fbe0 	bl	b9c2c <__aeabi_dmul>
   ba46c:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba470 <_strtod_l>:
   ba470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba474:	ed2d 8b02 	vpush	{d8}
   ba478:	b09d      	sub	sp, #116	; 0x74
   ba47a:	461f      	mov	r7, r3
   ba47c:	2300      	movs	r3, #0
   ba47e:	9318      	str	r3, [sp, #96]	; 0x60
   ba480:	4ba2      	ldr	r3, [pc, #648]	; (ba70c <_strtod_l+0x29c>)
   ba482:	9213      	str	r2, [sp, #76]	; 0x4c
   ba484:	681b      	ldr	r3, [r3, #0]
   ba486:	9305      	str	r3, [sp, #20]
   ba488:	4604      	mov	r4, r0
   ba48a:	4618      	mov	r0, r3
   ba48c:	4688      	mov	r8, r1
   ba48e:	f7ff ff94 	bl	ba3ba <strlen>
   ba492:	f04f 0a00 	mov.w	sl, #0
   ba496:	4605      	mov	r5, r0
   ba498:	f04f 0b00 	mov.w	fp, #0
   ba49c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba4a2:	781a      	ldrb	r2, [r3, #0]
   ba4a4:	2a2b      	cmp	r2, #43	; 0x2b
   ba4a6:	d04e      	beq.n	ba546 <_strtod_l+0xd6>
   ba4a8:	d83b      	bhi.n	ba522 <_strtod_l+0xb2>
   ba4aa:	2a0d      	cmp	r2, #13
   ba4ac:	d834      	bhi.n	ba518 <_strtod_l+0xa8>
   ba4ae:	2a08      	cmp	r2, #8
   ba4b0:	d834      	bhi.n	ba51c <_strtod_l+0xac>
   ba4b2:	2a00      	cmp	r2, #0
   ba4b4:	d03e      	beq.n	ba534 <_strtod_l+0xc4>
   ba4b6:	2300      	movs	r3, #0
   ba4b8:	930a      	str	r3, [sp, #40]	; 0x28
   ba4ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   ba4bc:	7833      	ldrb	r3, [r6, #0]
   ba4be:	2b30      	cmp	r3, #48	; 0x30
   ba4c0:	f040 80b0 	bne.w	ba624 <_strtod_l+0x1b4>
   ba4c4:	7873      	ldrb	r3, [r6, #1]
   ba4c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba4ca:	2b58      	cmp	r3, #88	; 0x58
   ba4cc:	d168      	bne.n	ba5a0 <_strtod_l+0x130>
   ba4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba4d0:	9301      	str	r3, [sp, #4]
   ba4d2:	ab18      	add	r3, sp, #96	; 0x60
   ba4d4:	9702      	str	r7, [sp, #8]
   ba4d6:	9300      	str	r3, [sp, #0]
   ba4d8:	4a8d      	ldr	r2, [pc, #564]	; (ba710 <_strtod_l+0x2a0>)
   ba4da:	ab19      	add	r3, sp, #100	; 0x64
   ba4dc:	a917      	add	r1, sp, #92	; 0x5c
   ba4de:	4620      	mov	r0, r4
   ba4e0:	f000 ff8a 	bl	bb3f8 <__gethex>
   ba4e4:	f010 0707 	ands.w	r7, r0, #7
   ba4e8:	4605      	mov	r5, r0
   ba4ea:	d005      	beq.n	ba4f8 <_strtod_l+0x88>
   ba4ec:	2f06      	cmp	r7, #6
   ba4ee:	d12c      	bne.n	ba54a <_strtod_l+0xda>
   ba4f0:	3601      	adds	r6, #1
   ba4f2:	2300      	movs	r3, #0
   ba4f4:	9617      	str	r6, [sp, #92]	; 0x5c
   ba4f6:	930a      	str	r3, [sp, #40]	; 0x28
   ba4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba4fa:	2b00      	cmp	r3, #0
   ba4fc:	f040 8590 	bne.w	bb020 <_strtod_l+0xbb0>
   ba500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ba502:	b1eb      	cbz	r3, ba540 <_strtod_l+0xd0>
   ba504:	4652      	mov	r2, sl
   ba506:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   ba50a:	ec43 2b10 	vmov	d0, r2, r3
   ba50e:	b01d      	add	sp, #116	; 0x74
   ba510:	ecbd 8b02 	vpop	{d8}
   ba514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba518:	2a20      	cmp	r2, #32
   ba51a:	d1cc      	bne.n	ba4b6 <_strtod_l+0x46>
   ba51c:	3301      	adds	r3, #1
   ba51e:	9317      	str	r3, [sp, #92]	; 0x5c
   ba520:	e7be      	b.n	ba4a0 <_strtod_l+0x30>
   ba522:	2a2d      	cmp	r2, #45	; 0x2d
   ba524:	d1c7      	bne.n	ba4b6 <_strtod_l+0x46>
   ba526:	2201      	movs	r2, #1
   ba528:	920a      	str	r2, [sp, #40]	; 0x28
   ba52a:	1c5a      	adds	r2, r3, #1
   ba52c:	9217      	str	r2, [sp, #92]	; 0x5c
   ba52e:	785b      	ldrb	r3, [r3, #1]
   ba530:	2b00      	cmp	r3, #0
   ba532:	d1c2      	bne.n	ba4ba <_strtod_l+0x4a>
   ba534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   ba536:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba53a:	2b00      	cmp	r3, #0
   ba53c:	f040 856e 	bne.w	bb01c <_strtod_l+0xbac>
   ba540:	4652      	mov	r2, sl
   ba542:	465b      	mov	r3, fp
   ba544:	e7e1      	b.n	ba50a <_strtod_l+0x9a>
   ba546:	2200      	movs	r2, #0
   ba548:	e7ee      	b.n	ba528 <_strtod_l+0xb8>
   ba54a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba54c:	b13a      	cbz	r2, ba55e <_strtod_l+0xee>
   ba54e:	2135      	movs	r1, #53	; 0x35
   ba550:	a81a      	add	r0, sp, #104	; 0x68
   ba552:	f001 feec 	bl	bc32e <__copybits>
   ba556:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba558:	4620      	mov	r0, r4
   ba55a:	f001 faab 	bl	bbab4 <_Bfree>
   ba55e:	3f01      	subs	r7, #1
   ba560:	2f04      	cmp	r7, #4
   ba562:	d806      	bhi.n	ba572 <_strtod_l+0x102>
   ba564:	e8df f007 	tbb	[pc, r7]
   ba568:	1714030a 	.word	0x1714030a
   ba56c:	0a          	.byte	0x0a
   ba56d:	00          	.byte	0x00
   ba56e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   ba572:	0728      	lsls	r0, r5, #28
   ba574:	d5c0      	bpl.n	ba4f8 <_strtod_l+0x88>
   ba576:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   ba57a:	e7bd      	b.n	ba4f8 <_strtod_l+0x88>
   ba57c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   ba580:	9a19      	ldr	r2, [sp, #100]	; 0x64
   ba582:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   ba586:	f202 4233 	addw	r2, r2, #1075	; 0x433
   ba58a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   ba58e:	e7f0      	b.n	ba572 <_strtod_l+0x102>
   ba590:	f8df b180 	ldr.w	fp, [pc, #384]	; ba714 <_strtod_l+0x2a4>
   ba594:	e7ed      	b.n	ba572 <_strtod_l+0x102>
   ba596:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   ba59a:	f04f 3aff 	mov.w	sl, #4294967295
   ba59e:	e7e8      	b.n	ba572 <_strtod_l+0x102>
   ba5a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5a2:	1c5a      	adds	r2, r3, #1
   ba5a4:	9217      	str	r2, [sp, #92]	; 0x5c
   ba5a6:	785b      	ldrb	r3, [r3, #1]
   ba5a8:	2b30      	cmp	r3, #48	; 0x30
   ba5aa:	d0f9      	beq.n	ba5a0 <_strtod_l+0x130>
   ba5ac:	2b00      	cmp	r3, #0
   ba5ae:	d0a3      	beq.n	ba4f8 <_strtod_l+0x88>
   ba5b0:	2301      	movs	r3, #1
   ba5b2:	f04f 0900 	mov.w	r9, #0
   ba5b6:	9304      	str	r3, [sp, #16]
   ba5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba5ba:	9308      	str	r3, [sp, #32]
   ba5bc:	f8cd 901c 	str.w	r9, [sp, #28]
   ba5c0:	464f      	mov	r7, r9
   ba5c2:	220a      	movs	r2, #10
   ba5c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   ba5c6:	7806      	ldrb	r6, [r0, #0]
   ba5c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   ba5cc:	b2d9      	uxtb	r1, r3
   ba5ce:	2909      	cmp	r1, #9
   ba5d0:	d92a      	bls.n	ba628 <_strtod_l+0x1b8>
   ba5d2:	9905      	ldr	r1, [sp, #20]
   ba5d4:	462a      	mov	r2, r5
   ba5d6:	f7ff fef8 	bl	ba3ca <strncmp>
   ba5da:	b398      	cbz	r0, ba644 <_strtod_l+0x1d4>
   ba5dc:	2000      	movs	r0, #0
   ba5de:	4632      	mov	r2, r6
   ba5e0:	463d      	mov	r5, r7
   ba5e2:	9005      	str	r0, [sp, #20]
   ba5e4:	4603      	mov	r3, r0
   ba5e6:	2a65      	cmp	r2, #101	; 0x65
   ba5e8:	d001      	beq.n	ba5ee <_strtod_l+0x17e>
   ba5ea:	2a45      	cmp	r2, #69	; 0x45
   ba5ec:	d118      	bne.n	ba620 <_strtod_l+0x1b0>
   ba5ee:	b91d      	cbnz	r5, ba5f8 <_strtod_l+0x188>
   ba5f0:	9a04      	ldr	r2, [sp, #16]
   ba5f2:	4302      	orrs	r2, r0
   ba5f4:	d09e      	beq.n	ba534 <_strtod_l+0xc4>
   ba5f6:	2500      	movs	r5, #0
   ba5f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   ba5fc:	f108 0201 	add.w	r2, r8, #1
   ba600:	9217      	str	r2, [sp, #92]	; 0x5c
   ba602:	f898 2001 	ldrb.w	r2, [r8, #1]
   ba606:	2a2b      	cmp	r2, #43	; 0x2b
   ba608:	d075      	beq.n	ba6f6 <_strtod_l+0x286>
   ba60a:	2a2d      	cmp	r2, #45	; 0x2d
   ba60c:	d07b      	beq.n	ba706 <_strtod_l+0x296>
   ba60e:	f04f 0c00 	mov.w	ip, #0
   ba612:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   ba616:	2909      	cmp	r1, #9
   ba618:	f240 8082 	bls.w	ba720 <_strtod_l+0x2b0>
   ba61c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba620:	2600      	movs	r6, #0
   ba622:	e09d      	b.n	ba760 <_strtod_l+0x2f0>
   ba624:	2300      	movs	r3, #0
   ba626:	e7c4      	b.n	ba5b2 <_strtod_l+0x142>
   ba628:	2f08      	cmp	r7, #8
   ba62a:	bfd8      	it	le
   ba62c:	9907      	ldrle	r1, [sp, #28]
   ba62e:	f100 0001 	add.w	r0, r0, #1
   ba632:	bfda      	itte	le
   ba634:	fb02 3301 	mlale	r3, r2, r1, r3
   ba638:	9307      	strle	r3, [sp, #28]
   ba63a:	fb02 3909 	mlagt	r9, r2, r9, r3
   ba63e:	3701      	adds	r7, #1
   ba640:	9017      	str	r0, [sp, #92]	; 0x5c
   ba642:	e7bf      	b.n	ba5c4 <_strtod_l+0x154>
   ba644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba646:	195a      	adds	r2, r3, r5
   ba648:	9217      	str	r2, [sp, #92]	; 0x5c
   ba64a:	5d5a      	ldrb	r2, [r3, r5]
   ba64c:	2f00      	cmp	r7, #0
   ba64e:	d037      	beq.n	ba6c0 <_strtod_l+0x250>
   ba650:	9005      	str	r0, [sp, #20]
   ba652:	463d      	mov	r5, r7
   ba654:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   ba658:	2b09      	cmp	r3, #9
   ba65a:	d912      	bls.n	ba682 <_strtod_l+0x212>
   ba65c:	2301      	movs	r3, #1
   ba65e:	e7c2      	b.n	ba5e6 <_strtod_l+0x176>
   ba660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba662:	1c5a      	adds	r2, r3, #1
   ba664:	9217      	str	r2, [sp, #92]	; 0x5c
   ba666:	785a      	ldrb	r2, [r3, #1]
   ba668:	3001      	adds	r0, #1
   ba66a:	2a30      	cmp	r2, #48	; 0x30
   ba66c:	d0f8      	beq.n	ba660 <_strtod_l+0x1f0>
   ba66e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   ba672:	2b08      	cmp	r3, #8
   ba674:	f200 84d9 	bhi.w	bb02a <_strtod_l+0xbba>
   ba678:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba67a:	9005      	str	r0, [sp, #20]
   ba67c:	2000      	movs	r0, #0
   ba67e:	9308      	str	r3, [sp, #32]
   ba680:	4605      	mov	r5, r0
   ba682:	3a30      	subs	r2, #48	; 0x30
   ba684:	f100 0301 	add.w	r3, r0, #1
   ba688:	d014      	beq.n	ba6b4 <_strtod_l+0x244>
   ba68a:	9905      	ldr	r1, [sp, #20]
   ba68c:	4419      	add	r1, r3
   ba68e:	9105      	str	r1, [sp, #20]
   ba690:	462b      	mov	r3, r5
   ba692:	eb00 0e05 	add.w	lr, r0, r5
   ba696:	210a      	movs	r1, #10
   ba698:	4573      	cmp	r3, lr
   ba69a:	d113      	bne.n	ba6c4 <_strtod_l+0x254>
   ba69c:	182b      	adds	r3, r5, r0
   ba69e:	2b08      	cmp	r3, #8
   ba6a0:	f105 0501 	add.w	r5, r5, #1
   ba6a4:	4405      	add	r5, r0
   ba6a6:	dc1c      	bgt.n	ba6e2 <_strtod_l+0x272>
   ba6a8:	9907      	ldr	r1, [sp, #28]
   ba6aa:	230a      	movs	r3, #10
   ba6ac:	fb03 2301 	mla	r3, r3, r1, r2
   ba6b0:	9307      	str	r3, [sp, #28]
   ba6b2:	2300      	movs	r3, #0
   ba6b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba6b6:	1c51      	adds	r1, r2, #1
   ba6b8:	9117      	str	r1, [sp, #92]	; 0x5c
   ba6ba:	7852      	ldrb	r2, [r2, #1]
   ba6bc:	4618      	mov	r0, r3
   ba6be:	e7c9      	b.n	ba654 <_strtod_l+0x1e4>
   ba6c0:	4638      	mov	r0, r7
   ba6c2:	e7d2      	b.n	ba66a <_strtod_l+0x1fa>
   ba6c4:	2b08      	cmp	r3, #8
   ba6c6:	dc04      	bgt.n	ba6d2 <_strtod_l+0x262>
   ba6c8:	9e07      	ldr	r6, [sp, #28]
   ba6ca:	434e      	muls	r6, r1
   ba6cc:	9607      	str	r6, [sp, #28]
   ba6ce:	3301      	adds	r3, #1
   ba6d0:	e7e2      	b.n	ba698 <_strtod_l+0x228>
   ba6d2:	f103 0c01 	add.w	ip, r3, #1
   ba6d6:	f1bc 0f10 	cmp.w	ip, #16
   ba6da:	bfd8      	it	le
   ba6dc:	fb01 f909 	mulle.w	r9, r1, r9
   ba6e0:	e7f5      	b.n	ba6ce <_strtod_l+0x25e>
   ba6e2:	2d10      	cmp	r5, #16
   ba6e4:	bfdc      	itt	le
   ba6e6:	230a      	movle	r3, #10
   ba6e8:	fb03 2909 	mlale	r9, r3, r9, r2
   ba6ec:	e7e1      	b.n	ba6b2 <_strtod_l+0x242>
   ba6ee:	2300      	movs	r3, #0
   ba6f0:	9305      	str	r3, [sp, #20]
   ba6f2:	2301      	movs	r3, #1
   ba6f4:	e77c      	b.n	ba5f0 <_strtod_l+0x180>
   ba6f6:	f04f 0c00 	mov.w	ip, #0
   ba6fa:	f108 0202 	add.w	r2, r8, #2
   ba6fe:	9217      	str	r2, [sp, #92]	; 0x5c
   ba700:	f898 2002 	ldrb.w	r2, [r8, #2]
   ba704:	e785      	b.n	ba612 <_strtod_l+0x1a2>
   ba706:	f04f 0c01 	mov.w	ip, #1
   ba70a:	e7f6      	b.n	ba6fa <_strtod_l+0x28a>
   ba70c:	000bd4d0 	.word	0x000bd4d0
   ba710:	000bd368 	.word	0x000bd368
   ba714:	7ff00000 	.word	0x7ff00000
   ba718:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba71a:	1c51      	adds	r1, r2, #1
   ba71c:	9117      	str	r1, [sp, #92]	; 0x5c
   ba71e:	7852      	ldrb	r2, [r2, #1]
   ba720:	2a30      	cmp	r2, #48	; 0x30
   ba722:	d0f9      	beq.n	ba718 <_strtod_l+0x2a8>
   ba724:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   ba728:	2908      	cmp	r1, #8
   ba72a:	f63f af79 	bhi.w	ba620 <_strtod_l+0x1b0>
   ba72e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   ba732:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba734:	9206      	str	r2, [sp, #24]
   ba736:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   ba738:	1c51      	adds	r1, r2, #1
   ba73a:	9117      	str	r1, [sp, #92]	; 0x5c
   ba73c:	7852      	ldrb	r2, [r2, #1]
   ba73e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   ba742:	2e09      	cmp	r6, #9
   ba744:	d937      	bls.n	ba7b6 <_strtod_l+0x346>
   ba746:	9e06      	ldr	r6, [sp, #24]
   ba748:	1b89      	subs	r1, r1, r6
   ba74a:	2908      	cmp	r1, #8
   ba74c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   ba750:	dc02      	bgt.n	ba758 <_strtod_l+0x2e8>
   ba752:	4576      	cmp	r6, lr
   ba754:	bfa8      	it	ge
   ba756:	4676      	movge	r6, lr
   ba758:	f1bc 0f00 	cmp.w	ip, #0
   ba75c:	d000      	beq.n	ba760 <_strtod_l+0x2f0>
   ba75e:	4276      	negs	r6, r6
   ba760:	2d00      	cmp	r5, #0
   ba762:	d14d      	bne.n	ba800 <_strtod_l+0x390>
   ba764:	9904      	ldr	r1, [sp, #16]
   ba766:	4301      	orrs	r1, r0
   ba768:	f47f aec6 	bne.w	ba4f8 <_strtod_l+0x88>
   ba76c:	2b00      	cmp	r3, #0
   ba76e:	f47f aee1 	bne.w	ba534 <_strtod_l+0xc4>
   ba772:	2a69      	cmp	r2, #105	; 0x69
   ba774:	d027      	beq.n	ba7c6 <_strtod_l+0x356>
   ba776:	dc24      	bgt.n	ba7c2 <_strtod_l+0x352>
   ba778:	2a49      	cmp	r2, #73	; 0x49
   ba77a:	d024      	beq.n	ba7c6 <_strtod_l+0x356>
   ba77c:	2a4e      	cmp	r2, #78	; 0x4e
   ba77e:	f47f aed9 	bne.w	ba534 <_strtod_l+0xc4>
   ba782:	499f      	ldr	r1, [pc, #636]	; (baa00 <_strtod_l+0x590>)
   ba784:	a817      	add	r0, sp, #92	; 0x5c
   ba786:	f001 f88f 	bl	bb8a8 <__match>
   ba78a:	2800      	cmp	r0, #0
   ba78c:	f43f aed2 	beq.w	ba534 <_strtod_l+0xc4>
   ba790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba792:	781b      	ldrb	r3, [r3, #0]
   ba794:	2b28      	cmp	r3, #40	; 0x28
   ba796:	d12d      	bne.n	ba7f4 <_strtod_l+0x384>
   ba798:	499a      	ldr	r1, [pc, #616]	; (baa04 <_strtod_l+0x594>)
   ba79a:	aa1a      	add	r2, sp, #104	; 0x68
   ba79c:	a817      	add	r0, sp, #92	; 0x5c
   ba79e:	f001 f897 	bl	bb8d0 <__hexnan>
   ba7a2:	2805      	cmp	r0, #5
   ba7a4:	d126      	bne.n	ba7f4 <_strtod_l+0x384>
   ba7a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   ba7a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   ba7ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   ba7b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   ba7b4:	e6a0      	b.n	ba4f8 <_strtod_l+0x88>
   ba7b6:	210a      	movs	r1, #10
   ba7b8:	fb01 2e0e 	mla	lr, r1, lr, r2
   ba7bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   ba7c0:	e7b9      	b.n	ba736 <_strtod_l+0x2c6>
   ba7c2:	2a6e      	cmp	r2, #110	; 0x6e
   ba7c4:	e7db      	b.n	ba77e <_strtod_l+0x30e>
   ba7c6:	4990      	ldr	r1, [pc, #576]	; (baa08 <_strtod_l+0x598>)
   ba7c8:	a817      	add	r0, sp, #92	; 0x5c
   ba7ca:	f001 f86d 	bl	bb8a8 <__match>
   ba7ce:	2800      	cmp	r0, #0
   ba7d0:	f43f aeb0 	beq.w	ba534 <_strtod_l+0xc4>
   ba7d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba7d6:	498d      	ldr	r1, [pc, #564]	; (baa0c <_strtod_l+0x59c>)
   ba7d8:	3b01      	subs	r3, #1
   ba7da:	a817      	add	r0, sp, #92	; 0x5c
   ba7dc:	9317      	str	r3, [sp, #92]	; 0x5c
   ba7de:	f001 f863 	bl	bb8a8 <__match>
   ba7e2:	b910      	cbnz	r0, ba7ea <_strtod_l+0x37a>
   ba7e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba7e6:	3301      	adds	r3, #1
   ba7e8:	9317      	str	r3, [sp, #92]	; 0x5c
   ba7ea:	f8df b230 	ldr.w	fp, [pc, #560]	; baa1c <_strtod_l+0x5ac>
   ba7ee:	f04f 0a00 	mov.w	sl, #0
   ba7f2:	e681      	b.n	ba4f8 <_strtod_l+0x88>
   ba7f4:	4886      	ldr	r0, [pc, #536]	; (baa10 <_strtod_l+0x5a0>)
   ba7f6:	f001 fdef 	bl	bc3d8 <nan>
   ba7fa:	ec5b ab10 	vmov	sl, fp, d0
   ba7fe:	e67b      	b.n	ba4f8 <_strtod_l+0x88>
   ba800:	9b05      	ldr	r3, [sp, #20]
   ba802:	9807      	ldr	r0, [sp, #28]
   ba804:	1af3      	subs	r3, r6, r3
   ba806:	2f00      	cmp	r7, #0
   ba808:	bf08      	it	eq
   ba80a:	462f      	moveq	r7, r5
   ba80c:	2d10      	cmp	r5, #16
   ba80e:	9306      	str	r3, [sp, #24]
   ba810:	46a8      	mov	r8, r5
   ba812:	bfa8      	it	ge
   ba814:	f04f 0810 	movge.w	r8, #16
   ba818:	f7ff f98e 	bl	b9b38 <__aeabi_ui2d>
   ba81c:	2d09      	cmp	r5, #9
   ba81e:	4682      	mov	sl, r0
   ba820:	468b      	mov	fp, r1
   ba822:	dd13      	ble.n	ba84c <_strtod_l+0x3dc>
   ba824:	4b7b      	ldr	r3, [pc, #492]	; (baa14 <_strtod_l+0x5a4>)
   ba826:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   ba82a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   ba82e:	f7ff f9fd 	bl	b9c2c <__aeabi_dmul>
   ba832:	4682      	mov	sl, r0
   ba834:	4648      	mov	r0, r9
   ba836:	468b      	mov	fp, r1
   ba838:	f7ff f97e 	bl	b9b38 <__aeabi_ui2d>
   ba83c:	4602      	mov	r2, r0
   ba83e:	460b      	mov	r3, r1
   ba840:	4650      	mov	r0, sl
   ba842:	4659      	mov	r1, fp
   ba844:	f7ff f83c 	bl	b98c0 <__adddf3>
   ba848:	4682      	mov	sl, r0
   ba84a:	468b      	mov	fp, r1
   ba84c:	2d0f      	cmp	r5, #15
   ba84e:	dc38      	bgt.n	ba8c2 <_strtod_l+0x452>
   ba850:	9b06      	ldr	r3, [sp, #24]
   ba852:	2b00      	cmp	r3, #0
   ba854:	f43f ae50 	beq.w	ba4f8 <_strtod_l+0x88>
   ba858:	dd24      	ble.n	ba8a4 <_strtod_l+0x434>
   ba85a:	2b16      	cmp	r3, #22
   ba85c:	dc0b      	bgt.n	ba876 <_strtod_l+0x406>
   ba85e:	496d      	ldr	r1, [pc, #436]	; (baa14 <_strtod_l+0x5a4>)
   ba860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba864:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba868:	4652      	mov	r2, sl
   ba86a:	465b      	mov	r3, fp
   ba86c:	f7ff f9de 	bl	b9c2c <__aeabi_dmul>
   ba870:	4682      	mov	sl, r0
   ba872:	468b      	mov	fp, r1
   ba874:	e640      	b.n	ba4f8 <_strtod_l+0x88>
   ba876:	9a06      	ldr	r2, [sp, #24]
   ba878:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   ba87c:	4293      	cmp	r3, r2
   ba87e:	db20      	blt.n	ba8c2 <_strtod_l+0x452>
   ba880:	4c64      	ldr	r4, [pc, #400]	; (baa14 <_strtod_l+0x5a4>)
   ba882:	f1c5 050f 	rsb	r5, r5, #15
   ba886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   ba88a:	4652      	mov	r2, sl
   ba88c:	465b      	mov	r3, fp
   ba88e:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba892:	f7ff f9cb 	bl	b9c2c <__aeabi_dmul>
   ba896:	9b06      	ldr	r3, [sp, #24]
   ba898:	1b5d      	subs	r5, r3, r5
   ba89a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   ba89e:	e9d4 2300 	ldrd	r2, r3, [r4]
   ba8a2:	e7e3      	b.n	ba86c <_strtod_l+0x3fc>
   ba8a4:	9b06      	ldr	r3, [sp, #24]
   ba8a6:	3316      	adds	r3, #22
   ba8a8:	db0b      	blt.n	ba8c2 <_strtod_l+0x452>
   ba8aa:	9b05      	ldr	r3, [sp, #20]
   ba8ac:	1b9e      	subs	r6, r3, r6
   ba8ae:	4b59      	ldr	r3, [pc, #356]	; (baa14 <_strtod_l+0x5a4>)
   ba8b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   ba8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
   ba8b8:	4650      	mov	r0, sl
   ba8ba:	4659      	mov	r1, fp
   ba8bc:	f7ff fae0 	bl	b9e80 <__aeabi_ddiv>
   ba8c0:	e7d6      	b.n	ba870 <_strtod_l+0x400>
   ba8c2:	9b06      	ldr	r3, [sp, #24]
   ba8c4:	eba5 0808 	sub.w	r8, r5, r8
   ba8c8:	4498      	add	r8, r3
   ba8ca:	f1b8 0f00 	cmp.w	r8, #0
   ba8ce:	dd74      	ble.n	ba9ba <_strtod_l+0x54a>
   ba8d0:	f018 030f 	ands.w	r3, r8, #15
   ba8d4:	d00a      	beq.n	ba8ec <_strtod_l+0x47c>
   ba8d6:	494f      	ldr	r1, [pc, #316]	; (baa14 <_strtod_l+0x5a4>)
   ba8d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   ba8dc:	4652      	mov	r2, sl
   ba8de:	465b      	mov	r3, fp
   ba8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   ba8e4:	f7ff f9a2 	bl	b9c2c <__aeabi_dmul>
   ba8e8:	4682      	mov	sl, r0
   ba8ea:	468b      	mov	fp, r1
   ba8ec:	f038 080f 	bics.w	r8, r8, #15
   ba8f0:	d04f      	beq.n	ba992 <_strtod_l+0x522>
   ba8f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   ba8f6:	dd22      	ble.n	ba93e <_strtod_l+0x4ce>
   ba8f8:	2500      	movs	r5, #0
   ba8fa:	462e      	mov	r6, r5
   ba8fc:	9507      	str	r5, [sp, #28]
   ba8fe:	9505      	str	r5, [sp, #20]
   ba900:	2322      	movs	r3, #34	; 0x22
   ba902:	f8df b118 	ldr.w	fp, [pc, #280]	; baa1c <_strtod_l+0x5ac>
   ba906:	6023      	str	r3, [r4, #0]
   ba908:	f04f 0a00 	mov.w	sl, #0
   ba90c:	9b07      	ldr	r3, [sp, #28]
   ba90e:	2b00      	cmp	r3, #0
   ba910:	f43f adf2 	beq.w	ba4f8 <_strtod_l+0x88>
   ba914:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba916:	4620      	mov	r0, r4
   ba918:	f001 f8cc 	bl	bbab4 <_Bfree>
   ba91c:	9905      	ldr	r1, [sp, #20]
   ba91e:	4620      	mov	r0, r4
   ba920:	f001 f8c8 	bl	bbab4 <_Bfree>
   ba924:	4631      	mov	r1, r6
   ba926:	4620      	mov	r0, r4
   ba928:	f001 f8c4 	bl	bbab4 <_Bfree>
   ba92c:	9907      	ldr	r1, [sp, #28]
   ba92e:	4620      	mov	r0, r4
   ba930:	f001 f8c0 	bl	bbab4 <_Bfree>
   ba934:	4629      	mov	r1, r5
   ba936:	4620      	mov	r0, r4
   ba938:	f001 f8bc 	bl	bbab4 <_Bfree>
   ba93c:	e5dc      	b.n	ba4f8 <_strtod_l+0x88>
   ba93e:	4b36      	ldr	r3, [pc, #216]	; (baa18 <_strtod_l+0x5a8>)
   ba940:	9304      	str	r3, [sp, #16]
   ba942:	2300      	movs	r3, #0
   ba944:	ea4f 1828 	mov.w	r8, r8, asr #4
   ba948:	4650      	mov	r0, sl
   ba94a:	4659      	mov	r1, fp
   ba94c:	4699      	mov	r9, r3
   ba94e:	f1b8 0f01 	cmp.w	r8, #1
   ba952:	dc21      	bgt.n	ba998 <_strtod_l+0x528>
   ba954:	b10b      	cbz	r3, ba95a <_strtod_l+0x4ea>
   ba956:	4682      	mov	sl, r0
   ba958:	468b      	mov	fp, r1
   ba95a:	4b2f      	ldr	r3, [pc, #188]	; (baa18 <_strtod_l+0x5a8>)
   ba95c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   ba960:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   ba964:	4652      	mov	r2, sl
   ba966:	465b      	mov	r3, fp
   ba968:	e9d9 0100 	ldrd	r0, r1, [r9]
   ba96c:	f7ff f95e 	bl	b9c2c <__aeabi_dmul>
   ba970:	4b2a      	ldr	r3, [pc, #168]	; (baa1c <_strtod_l+0x5ac>)
   ba972:	460a      	mov	r2, r1
   ba974:	400b      	ands	r3, r1
   ba976:	492a      	ldr	r1, [pc, #168]	; (baa20 <_strtod_l+0x5b0>)
   ba978:	428b      	cmp	r3, r1
   ba97a:	4682      	mov	sl, r0
   ba97c:	d8bc      	bhi.n	ba8f8 <_strtod_l+0x488>
   ba97e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   ba982:	428b      	cmp	r3, r1
   ba984:	bf86      	itte	hi
   ba986:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; baa24 <_strtod_l+0x5b4>
   ba98a:	f04f 3aff 	movhi.w	sl, #4294967295
   ba98e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   ba992:	2300      	movs	r3, #0
   ba994:	9304      	str	r3, [sp, #16]
   ba996:	e084      	b.n	baaa2 <_strtod_l+0x632>
   ba998:	f018 0f01 	tst.w	r8, #1
   ba99c:	d005      	beq.n	ba9aa <_strtod_l+0x53a>
   ba99e:	9b04      	ldr	r3, [sp, #16]
   ba9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9a4:	f7ff f942 	bl	b9c2c <__aeabi_dmul>
   ba9a8:	2301      	movs	r3, #1
   ba9aa:	9a04      	ldr	r2, [sp, #16]
   ba9ac:	3208      	adds	r2, #8
   ba9ae:	f109 0901 	add.w	r9, r9, #1
   ba9b2:	ea4f 0868 	mov.w	r8, r8, asr #1
   ba9b6:	9204      	str	r2, [sp, #16]
   ba9b8:	e7c9      	b.n	ba94e <_strtod_l+0x4de>
   ba9ba:	d0ea      	beq.n	ba992 <_strtod_l+0x522>
   ba9bc:	f1c8 0800 	rsb	r8, r8, #0
   ba9c0:	f018 020f 	ands.w	r2, r8, #15
   ba9c4:	d00a      	beq.n	ba9dc <_strtod_l+0x56c>
   ba9c6:	4b13      	ldr	r3, [pc, #76]	; (baa14 <_strtod_l+0x5a4>)
   ba9c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   ba9cc:	4650      	mov	r0, sl
   ba9ce:	4659      	mov	r1, fp
   ba9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9d4:	f7ff fa54 	bl	b9e80 <__aeabi_ddiv>
   ba9d8:	4682      	mov	sl, r0
   ba9da:	468b      	mov	fp, r1
   ba9dc:	ea5f 1828 	movs.w	r8, r8, asr #4
   ba9e0:	d0d7      	beq.n	ba992 <_strtod_l+0x522>
   ba9e2:	f1b8 0f1f 	cmp.w	r8, #31
   ba9e6:	dd1f      	ble.n	baa28 <_strtod_l+0x5b8>
   ba9e8:	2500      	movs	r5, #0
   ba9ea:	462e      	mov	r6, r5
   ba9ec:	9507      	str	r5, [sp, #28]
   ba9ee:	9505      	str	r5, [sp, #20]
   ba9f0:	2322      	movs	r3, #34	; 0x22
   ba9f2:	f04f 0a00 	mov.w	sl, #0
   ba9f6:	f04f 0b00 	mov.w	fp, #0
   ba9fa:	6023      	str	r3, [r4, #0]
   ba9fc:	e786      	b.n	ba90c <_strtod_l+0x49c>
   ba9fe:	bf00      	nop
   baa00:	000bd363 	.word	0x000bd363
   baa04:	000bd37c 	.word	0x000bd37c
   baa08:	000bd35a 	.word	0x000bd35a
   baa0c:	000bd35d 	.word	0x000bd35d
   baa10:	000bcc9b 	.word	0x000bcc9b
   baa14:	000bd590 	.word	0x000bd590
   baa18:	000bd568 	.word	0x000bd568
   baa1c:	7ff00000 	.word	0x7ff00000
   baa20:	7ca00000 	.word	0x7ca00000
   baa24:	7fefffff 	.word	0x7fefffff
   baa28:	f018 0310 	ands.w	r3, r8, #16
   baa2c:	bf18      	it	ne
   baa2e:	236a      	movne	r3, #106	; 0x6a
   baa30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bade0 <_strtod_l+0x970>
   baa34:	9304      	str	r3, [sp, #16]
   baa36:	4650      	mov	r0, sl
   baa38:	4659      	mov	r1, fp
   baa3a:	2300      	movs	r3, #0
   baa3c:	f018 0f01 	tst.w	r8, #1
   baa40:	d004      	beq.n	baa4c <_strtod_l+0x5dc>
   baa42:	e9d9 2300 	ldrd	r2, r3, [r9]
   baa46:	f7ff f8f1 	bl	b9c2c <__aeabi_dmul>
   baa4a:	2301      	movs	r3, #1
   baa4c:	ea5f 0868 	movs.w	r8, r8, asr #1
   baa50:	f109 0908 	add.w	r9, r9, #8
   baa54:	d1f2      	bne.n	baa3c <_strtod_l+0x5cc>
   baa56:	b10b      	cbz	r3, baa5c <_strtod_l+0x5ec>
   baa58:	4682      	mov	sl, r0
   baa5a:	468b      	mov	fp, r1
   baa5c:	9b04      	ldr	r3, [sp, #16]
   baa5e:	b1c3      	cbz	r3, baa92 <_strtod_l+0x622>
   baa60:	f3cb 520a 	ubfx	r2, fp, #20, #11
   baa64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   baa68:	2b00      	cmp	r3, #0
   baa6a:	4659      	mov	r1, fp
   baa6c:	dd11      	ble.n	baa92 <_strtod_l+0x622>
   baa6e:	2b1f      	cmp	r3, #31
   baa70:	f340 8124 	ble.w	bacbc <_strtod_l+0x84c>
   baa74:	2b34      	cmp	r3, #52	; 0x34
   baa76:	bfde      	ittt	le
   baa78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   baa7c:	f04f 33ff 	movle.w	r3, #4294967295
   baa80:	fa03 f202 	lslle.w	r2, r3, r2
   baa84:	f04f 0a00 	mov.w	sl, #0
   baa88:	bfcc      	ite	gt
   baa8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   baa8e:	ea02 0b01 	andle.w	fp, r2, r1
   baa92:	2200      	movs	r2, #0
   baa94:	2300      	movs	r3, #0
   baa96:	4650      	mov	r0, sl
   baa98:	4659      	mov	r1, fp
   baa9a:	f7ff fb2f 	bl	ba0fc <__aeabi_dcmpeq>
   baa9e:	2800      	cmp	r0, #0
   baaa0:	d1a2      	bne.n	ba9e8 <_strtod_l+0x578>
   baaa2:	9b07      	ldr	r3, [sp, #28]
   baaa4:	9300      	str	r3, [sp, #0]
   baaa6:	9908      	ldr	r1, [sp, #32]
   baaa8:	462b      	mov	r3, r5
   baaaa:	463a      	mov	r2, r7
   baaac:	4620      	mov	r0, r4
   baaae:	f001 f869 	bl	bbb84 <__s2b>
   baab2:	9007      	str	r0, [sp, #28]
   baab4:	2800      	cmp	r0, #0
   baab6:	f43f af1f 	beq.w	ba8f8 <_strtod_l+0x488>
   baaba:	9b05      	ldr	r3, [sp, #20]
   baabc:	1b9e      	subs	r6, r3, r6
   baabe:	9b06      	ldr	r3, [sp, #24]
   baac0:	2b00      	cmp	r3, #0
   baac2:	bfb4      	ite	lt
   baac4:	4633      	movlt	r3, r6
   baac6:	2300      	movge	r3, #0
   baac8:	930c      	str	r3, [sp, #48]	; 0x30
   baaca:	9b06      	ldr	r3, [sp, #24]
   baacc:	2500      	movs	r5, #0
   baace:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   baad2:	9312      	str	r3, [sp, #72]	; 0x48
   baad4:	462e      	mov	r6, r5
   baad6:	9b07      	ldr	r3, [sp, #28]
   baad8:	4620      	mov	r0, r4
   baada:	6859      	ldr	r1, [r3, #4]
   baadc:	f000 ffaa 	bl	bba34 <_Balloc>
   baae0:	9005      	str	r0, [sp, #20]
   baae2:	2800      	cmp	r0, #0
   baae4:	f43f af0c 	beq.w	ba900 <_strtod_l+0x490>
   baae8:	9b07      	ldr	r3, [sp, #28]
   baaea:	691a      	ldr	r2, [r3, #16]
   baaec:	3202      	adds	r2, #2
   baaee:	f103 010c 	add.w	r1, r3, #12
   baaf2:	0092      	lsls	r2, r2, #2
   baaf4:	300c      	adds	r0, #12
   baaf6:	f7ff fbc2 	bl	ba27e <memcpy>
   baafa:	ec4b ab10 	vmov	d0, sl, fp
   baafe:	aa1a      	add	r2, sp, #104	; 0x68
   bab00:	a919      	add	r1, sp, #100	; 0x64
   bab02:	4620      	mov	r0, r4
   bab04:	f001 fb84 	bl	bc210 <__d2b>
   bab08:	ec4b ab18 	vmov	d8, sl, fp
   bab0c:	9018      	str	r0, [sp, #96]	; 0x60
   bab0e:	2800      	cmp	r0, #0
   bab10:	f43f aef6 	beq.w	ba900 <_strtod_l+0x490>
   bab14:	2101      	movs	r1, #1
   bab16:	4620      	mov	r0, r4
   bab18:	f001 f8ce 	bl	bbcb8 <__i2b>
   bab1c:	4606      	mov	r6, r0
   bab1e:	2800      	cmp	r0, #0
   bab20:	f43f aeee 	beq.w	ba900 <_strtod_l+0x490>
   bab24:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bab26:	9904      	ldr	r1, [sp, #16]
   bab28:	2b00      	cmp	r3, #0
   bab2a:	bfab      	itete	ge
   bab2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bab2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bab30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bab32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bab36:	bfac      	ite	ge
   bab38:	eb03 0902 	addge.w	r9, r3, r2
   bab3c:	1ad7      	sublt	r7, r2, r3
   bab3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bab40:	eba3 0801 	sub.w	r8, r3, r1
   bab44:	4490      	add	r8, r2
   bab46:	4ba1      	ldr	r3, [pc, #644]	; (badcc <_strtod_l+0x95c>)
   bab48:	f108 38ff 	add.w	r8, r8, #4294967295
   bab4c:	4598      	cmp	r8, r3
   bab4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bab52:	f280 80c7 	bge.w	bace4 <_strtod_l+0x874>
   bab56:	eba3 0308 	sub.w	r3, r3, r8
   bab5a:	2b1f      	cmp	r3, #31
   bab5c:	eba2 0203 	sub.w	r2, r2, r3
   bab60:	f04f 0101 	mov.w	r1, #1
   bab64:	f300 80b1 	bgt.w	bacca <_strtod_l+0x85a>
   bab68:	fa01 f303 	lsl.w	r3, r1, r3
   bab6c:	930d      	str	r3, [sp, #52]	; 0x34
   bab6e:	2300      	movs	r3, #0
   bab70:	9308      	str	r3, [sp, #32]
   bab72:	eb09 0802 	add.w	r8, r9, r2
   bab76:	9b04      	ldr	r3, [sp, #16]
   bab78:	45c1      	cmp	r9, r8
   bab7a:	4417      	add	r7, r2
   bab7c:	441f      	add	r7, r3
   bab7e:	464b      	mov	r3, r9
   bab80:	bfa8      	it	ge
   bab82:	4643      	movge	r3, r8
   bab84:	42bb      	cmp	r3, r7
   bab86:	bfa8      	it	ge
   bab88:	463b      	movge	r3, r7
   bab8a:	2b00      	cmp	r3, #0
   bab8c:	bfc2      	ittt	gt
   bab8e:	eba8 0803 	subgt.w	r8, r8, r3
   bab92:	1aff      	subgt	r7, r7, r3
   bab94:	eba9 0903 	subgt.w	r9, r9, r3
   bab98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bab9a:	2b00      	cmp	r3, #0
   bab9c:	dd17      	ble.n	babce <_strtod_l+0x75e>
   bab9e:	4631      	mov	r1, r6
   baba0:	461a      	mov	r2, r3
   baba2:	4620      	mov	r0, r4
   baba4:	f001 f948 	bl	bbe38 <__pow5mult>
   baba8:	4606      	mov	r6, r0
   babaa:	2800      	cmp	r0, #0
   babac:	f43f aea8 	beq.w	ba900 <_strtod_l+0x490>
   babb0:	4601      	mov	r1, r0
   babb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   babb4:	4620      	mov	r0, r4
   babb6:	f001 f895 	bl	bbce4 <__multiply>
   babba:	900b      	str	r0, [sp, #44]	; 0x2c
   babbc:	2800      	cmp	r0, #0
   babbe:	f43f ae9f 	beq.w	ba900 <_strtod_l+0x490>
   babc2:	9918      	ldr	r1, [sp, #96]	; 0x60
   babc4:	4620      	mov	r0, r4
   babc6:	f000 ff75 	bl	bbab4 <_Bfree>
   babca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   babcc:	9318      	str	r3, [sp, #96]	; 0x60
   babce:	f1b8 0f00 	cmp.w	r8, #0
   babd2:	f300 808c 	bgt.w	bacee <_strtod_l+0x87e>
   babd6:	9b06      	ldr	r3, [sp, #24]
   babd8:	2b00      	cmp	r3, #0
   babda:	dd08      	ble.n	babee <_strtod_l+0x77e>
   babdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   babde:	9905      	ldr	r1, [sp, #20]
   babe0:	4620      	mov	r0, r4
   babe2:	f001 f929 	bl	bbe38 <__pow5mult>
   babe6:	9005      	str	r0, [sp, #20]
   babe8:	2800      	cmp	r0, #0
   babea:	f43f ae89 	beq.w	ba900 <_strtod_l+0x490>
   babee:	2f00      	cmp	r7, #0
   babf0:	dd08      	ble.n	bac04 <_strtod_l+0x794>
   babf2:	9905      	ldr	r1, [sp, #20]
   babf4:	463a      	mov	r2, r7
   babf6:	4620      	mov	r0, r4
   babf8:	f001 f978 	bl	bbeec <__lshift>
   babfc:	9005      	str	r0, [sp, #20]
   babfe:	2800      	cmp	r0, #0
   bac00:	f43f ae7e 	beq.w	ba900 <_strtod_l+0x490>
   bac04:	f1b9 0f00 	cmp.w	r9, #0
   bac08:	dd08      	ble.n	bac1c <_strtod_l+0x7ac>
   bac0a:	4631      	mov	r1, r6
   bac0c:	464a      	mov	r2, r9
   bac0e:	4620      	mov	r0, r4
   bac10:	f001 f96c 	bl	bbeec <__lshift>
   bac14:	4606      	mov	r6, r0
   bac16:	2800      	cmp	r0, #0
   bac18:	f43f ae72 	beq.w	ba900 <_strtod_l+0x490>
   bac1c:	9a05      	ldr	r2, [sp, #20]
   bac1e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bac20:	4620      	mov	r0, r4
   bac22:	f001 f9ef 	bl	bc004 <__mdiff>
   bac26:	4605      	mov	r5, r0
   bac28:	2800      	cmp	r0, #0
   bac2a:	f43f ae69 	beq.w	ba900 <_strtod_l+0x490>
   bac2e:	68c3      	ldr	r3, [r0, #12]
   bac30:	930b      	str	r3, [sp, #44]	; 0x2c
   bac32:	2300      	movs	r3, #0
   bac34:	60c3      	str	r3, [r0, #12]
   bac36:	4631      	mov	r1, r6
   bac38:	f001 f9c8 	bl	bbfcc <__mcmp>
   bac3c:	2800      	cmp	r0, #0
   bac3e:	da60      	bge.n	bad02 <_strtod_l+0x892>
   bac40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bac42:	ea53 030a 	orrs.w	r3, r3, sl
   bac46:	f040 8082 	bne.w	bad4e <_strtod_l+0x8de>
   bac4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bac4e:	2b00      	cmp	r3, #0
   bac50:	d17d      	bne.n	bad4e <_strtod_l+0x8de>
   bac52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bac56:	0d1b      	lsrs	r3, r3, #20
   bac58:	051b      	lsls	r3, r3, #20
   bac5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bac5e:	d976      	bls.n	bad4e <_strtod_l+0x8de>
   bac60:	696b      	ldr	r3, [r5, #20]
   bac62:	b913      	cbnz	r3, bac6a <_strtod_l+0x7fa>
   bac64:	692b      	ldr	r3, [r5, #16]
   bac66:	2b01      	cmp	r3, #1
   bac68:	dd71      	ble.n	bad4e <_strtod_l+0x8de>
   bac6a:	4629      	mov	r1, r5
   bac6c:	2201      	movs	r2, #1
   bac6e:	4620      	mov	r0, r4
   bac70:	f001 f93c 	bl	bbeec <__lshift>
   bac74:	4631      	mov	r1, r6
   bac76:	4605      	mov	r5, r0
   bac78:	f001 f9a8 	bl	bbfcc <__mcmp>
   bac7c:	2800      	cmp	r0, #0
   bac7e:	dd66      	ble.n	bad4e <_strtod_l+0x8de>
   bac80:	9904      	ldr	r1, [sp, #16]
   bac82:	4a53      	ldr	r2, [pc, #332]	; (badd0 <_strtod_l+0x960>)
   bac84:	465b      	mov	r3, fp
   bac86:	2900      	cmp	r1, #0
   bac88:	f000 8081 	beq.w	bad8e <_strtod_l+0x91e>
   bac8c:	ea02 010b 	and.w	r1, r2, fp
   bac90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bac94:	dc7b      	bgt.n	bad8e <_strtod_l+0x91e>
   bac96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bac9a:	f77f aea9 	ble.w	ba9f0 <_strtod_l+0x580>
   bac9e:	4b4d      	ldr	r3, [pc, #308]	; (badd4 <_strtod_l+0x964>)
   baca0:	4650      	mov	r0, sl
   baca2:	4659      	mov	r1, fp
   baca4:	2200      	movs	r2, #0
   baca6:	f7fe ffc1 	bl	b9c2c <__aeabi_dmul>
   bacaa:	460b      	mov	r3, r1
   bacac:	4303      	orrs	r3, r0
   bacae:	bf08      	it	eq
   bacb0:	2322      	moveq	r3, #34	; 0x22
   bacb2:	4682      	mov	sl, r0
   bacb4:	468b      	mov	fp, r1
   bacb6:	bf08      	it	eq
   bacb8:	6023      	streq	r3, [r4, #0]
   bacba:	e62b      	b.n	ba914 <_strtod_l+0x4a4>
   bacbc:	f04f 32ff 	mov.w	r2, #4294967295
   bacc0:	fa02 f303 	lsl.w	r3, r2, r3
   bacc4:	ea03 0a0a 	and.w	sl, r3, sl
   bacc8:	e6e3      	b.n	baa92 <_strtod_l+0x622>
   bacca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bacce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bacd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bacd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bacda:	fa01 f308 	lsl.w	r3, r1, r8
   bacde:	9308      	str	r3, [sp, #32]
   bace0:	910d      	str	r1, [sp, #52]	; 0x34
   bace2:	e746      	b.n	bab72 <_strtod_l+0x702>
   bace4:	2300      	movs	r3, #0
   bace6:	9308      	str	r3, [sp, #32]
   bace8:	2301      	movs	r3, #1
   bacea:	930d      	str	r3, [sp, #52]	; 0x34
   bacec:	e741      	b.n	bab72 <_strtod_l+0x702>
   bacee:	9918      	ldr	r1, [sp, #96]	; 0x60
   bacf0:	4642      	mov	r2, r8
   bacf2:	4620      	mov	r0, r4
   bacf4:	f001 f8fa 	bl	bbeec <__lshift>
   bacf8:	9018      	str	r0, [sp, #96]	; 0x60
   bacfa:	2800      	cmp	r0, #0
   bacfc:	f47f af6b 	bne.w	babd6 <_strtod_l+0x766>
   bad00:	e5fe      	b.n	ba900 <_strtod_l+0x490>
   bad02:	465f      	mov	r7, fp
   bad04:	d16e      	bne.n	bade4 <_strtod_l+0x974>
   bad06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bad08:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bad0c:	b342      	cbz	r2, bad60 <_strtod_l+0x8f0>
   bad0e:	4a32      	ldr	r2, [pc, #200]	; (badd8 <_strtod_l+0x968>)
   bad10:	4293      	cmp	r3, r2
   bad12:	d128      	bne.n	bad66 <_strtod_l+0x8f6>
   bad14:	9b04      	ldr	r3, [sp, #16]
   bad16:	4651      	mov	r1, sl
   bad18:	b1eb      	cbz	r3, bad56 <_strtod_l+0x8e6>
   bad1a:	4b2d      	ldr	r3, [pc, #180]	; (badd0 <_strtod_l+0x960>)
   bad1c:	403b      	ands	r3, r7
   bad1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bad22:	f04f 32ff 	mov.w	r2, #4294967295
   bad26:	d819      	bhi.n	bad5c <_strtod_l+0x8ec>
   bad28:	0d1b      	lsrs	r3, r3, #20
   bad2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bad2e:	fa02 f303 	lsl.w	r3, r2, r3
   bad32:	4299      	cmp	r1, r3
   bad34:	d117      	bne.n	bad66 <_strtod_l+0x8f6>
   bad36:	4b29      	ldr	r3, [pc, #164]	; (baddc <_strtod_l+0x96c>)
   bad38:	429f      	cmp	r7, r3
   bad3a:	d102      	bne.n	bad42 <_strtod_l+0x8d2>
   bad3c:	3101      	adds	r1, #1
   bad3e:	f43f addf 	beq.w	ba900 <_strtod_l+0x490>
   bad42:	4b23      	ldr	r3, [pc, #140]	; (badd0 <_strtod_l+0x960>)
   bad44:	403b      	ands	r3, r7
   bad46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bad4a:	f04f 0a00 	mov.w	sl, #0
   bad4e:	9b04      	ldr	r3, [sp, #16]
   bad50:	2b00      	cmp	r3, #0
   bad52:	d1a4      	bne.n	bac9e <_strtod_l+0x82e>
   bad54:	e5de      	b.n	ba914 <_strtod_l+0x4a4>
   bad56:	f04f 33ff 	mov.w	r3, #4294967295
   bad5a:	e7ea      	b.n	bad32 <_strtod_l+0x8c2>
   bad5c:	4613      	mov	r3, r2
   bad5e:	e7e8      	b.n	bad32 <_strtod_l+0x8c2>
   bad60:	ea53 030a 	orrs.w	r3, r3, sl
   bad64:	d08c      	beq.n	bac80 <_strtod_l+0x810>
   bad66:	9b08      	ldr	r3, [sp, #32]
   bad68:	b1db      	cbz	r3, bada2 <_strtod_l+0x932>
   bad6a:	423b      	tst	r3, r7
   bad6c:	d0ef      	beq.n	bad4e <_strtod_l+0x8de>
   bad6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bad70:	9a04      	ldr	r2, [sp, #16]
   bad72:	4650      	mov	r0, sl
   bad74:	4659      	mov	r1, fp
   bad76:	b1c3      	cbz	r3, badaa <_strtod_l+0x93a>
   bad78:	f7ff fb5d 	bl	ba436 <sulp>
   bad7c:	4602      	mov	r2, r0
   bad7e:	460b      	mov	r3, r1
   bad80:	ec51 0b18 	vmov	r0, r1, d8
   bad84:	f7fe fd9c 	bl	b98c0 <__adddf3>
   bad88:	4682      	mov	sl, r0
   bad8a:	468b      	mov	fp, r1
   bad8c:	e7df      	b.n	bad4e <_strtod_l+0x8de>
   bad8e:	4013      	ands	r3, r2
   bad90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bad94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bad98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bad9c:	f04f 3aff 	mov.w	sl, #4294967295
   bada0:	e7d5      	b.n	bad4e <_strtod_l+0x8de>
   bada2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bada4:	ea13 0f0a 	tst.w	r3, sl
   bada8:	e7e0      	b.n	bad6c <_strtod_l+0x8fc>
   badaa:	f7ff fb44 	bl	ba436 <sulp>
   badae:	4602      	mov	r2, r0
   badb0:	460b      	mov	r3, r1
   badb2:	ec51 0b18 	vmov	r0, r1, d8
   badb6:	f7fe fd81 	bl	b98bc <__aeabi_dsub>
   badba:	2200      	movs	r2, #0
   badbc:	2300      	movs	r3, #0
   badbe:	4682      	mov	sl, r0
   badc0:	468b      	mov	fp, r1
   badc2:	f7ff f99b 	bl	ba0fc <__aeabi_dcmpeq>
   badc6:	2800      	cmp	r0, #0
   badc8:	d0c1      	beq.n	bad4e <_strtod_l+0x8de>
   badca:	e611      	b.n	ba9f0 <_strtod_l+0x580>
   badcc:	fffffc02 	.word	0xfffffc02
   badd0:	7ff00000 	.word	0x7ff00000
   badd4:	39500000 	.word	0x39500000
   badd8:	000fffff 	.word	0x000fffff
   baddc:	7fefffff 	.word	0x7fefffff
   bade0:	000bd390 	.word	0x000bd390
   bade4:	4631      	mov	r1, r6
   bade6:	4628      	mov	r0, r5
   bade8:	f001 fa6e 	bl	bc2c8 <__ratio>
   badec:	ec59 8b10 	vmov	r8, r9, d0
   badf0:	ee10 0a10 	vmov	r0, s0
   badf4:	2200      	movs	r2, #0
   badf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   badfa:	4649      	mov	r1, r9
   badfc:	f7ff f992 	bl	ba124 <__aeabi_dcmple>
   bae00:	2800      	cmp	r0, #0
   bae02:	d07a      	beq.n	baefa <_strtod_l+0xa8a>
   bae04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bae06:	2b00      	cmp	r3, #0
   bae08:	d04a      	beq.n	baea0 <_strtod_l+0xa30>
   bae0a:	4b95      	ldr	r3, [pc, #596]	; (bb060 <_strtod_l+0xbf0>)
   bae0c:	2200      	movs	r2, #0
   bae0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bae12:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb060 <_strtod_l+0xbf0>
   bae16:	f04f 0800 	mov.w	r8, #0
   bae1a:	4b92      	ldr	r3, [pc, #584]	; (bb064 <_strtod_l+0xbf4>)
   bae1c:	403b      	ands	r3, r7
   bae1e:	930d      	str	r3, [sp, #52]	; 0x34
   bae20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bae22:	4b91      	ldr	r3, [pc, #580]	; (bb068 <_strtod_l+0xbf8>)
   bae24:	429a      	cmp	r2, r3
   bae26:	f040 80b0 	bne.w	baf8a <_strtod_l+0xb1a>
   bae2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bae2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bae32:	ec4b ab10 	vmov	d0, sl, fp
   bae36:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bae3a:	f001 f96d 	bl	bc118 <__ulp>
   bae3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bae42:	ec53 2b10 	vmov	r2, r3, d0
   bae46:	f7fe fef1 	bl	b9c2c <__aeabi_dmul>
   bae4a:	4652      	mov	r2, sl
   bae4c:	465b      	mov	r3, fp
   bae4e:	f7fe fd37 	bl	b98c0 <__adddf3>
   bae52:	460b      	mov	r3, r1
   bae54:	4983      	ldr	r1, [pc, #524]	; (bb064 <_strtod_l+0xbf4>)
   bae56:	4a85      	ldr	r2, [pc, #532]	; (bb06c <_strtod_l+0xbfc>)
   bae58:	4019      	ands	r1, r3
   bae5a:	4291      	cmp	r1, r2
   bae5c:	4682      	mov	sl, r0
   bae5e:	d960      	bls.n	baf22 <_strtod_l+0xab2>
   bae60:	ee18 3a90 	vmov	r3, s17
   bae64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bae68:	4293      	cmp	r3, r2
   bae6a:	d104      	bne.n	bae76 <_strtod_l+0xa06>
   bae6c:	ee18 3a10 	vmov	r3, s16
   bae70:	3301      	adds	r3, #1
   bae72:	f43f ad45 	beq.w	ba900 <_strtod_l+0x490>
   bae76:	f8df b200 	ldr.w	fp, [pc, #512]	; bb078 <_strtod_l+0xc08>
   bae7a:	f04f 3aff 	mov.w	sl, #4294967295
   bae7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bae80:	4620      	mov	r0, r4
   bae82:	f000 fe17 	bl	bbab4 <_Bfree>
   bae86:	9905      	ldr	r1, [sp, #20]
   bae88:	4620      	mov	r0, r4
   bae8a:	f000 fe13 	bl	bbab4 <_Bfree>
   bae8e:	4631      	mov	r1, r6
   bae90:	4620      	mov	r0, r4
   bae92:	f000 fe0f 	bl	bbab4 <_Bfree>
   bae96:	4629      	mov	r1, r5
   bae98:	4620      	mov	r0, r4
   bae9a:	f000 fe0b 	bl	bbab4 <_Bfree>
   bae9e:	e61a      	b.n	baad6 <_strtod_l+0x666>
   baea0:	f1ba 0f00 	cmp.w	sl, #0
   baea4:	d11b      	bne.n	baede <_strtod_l+0xa6e>
   baea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baeaa:	b9f3      	cbnz	r3, baeea <_strtod_l+0xa7a>
   baeac:	4b6c      	ldr	r3, [pc, #432]	; (bb060 <_strtod_l+0xbf0>)
   baeae:	2200      	movs	r2, #0
   baeb0:	4640      	mov	r0, r8
   baeb2:	4649      	mov	r1, r9
   baeb4:	f7ff f92c 	bl	ba110 <__aeabi_dcmplt>
   baeb8:	b9d0      	cbnz	r0, baef0 <_strtod_l+0xa80>
   baeba:	4640      	mov	r0, r8
   baebc:	4649      	mov	r1, r9
   baebe:	4b6c      	ldr	r3, [pc, #432]	; (bb070 <_strtod_l+0xc00>)
   baec0:	2200      	movs	r2, #0
   baec2:	f7fe feb3 	bl	b9c2c <__aeabi_dmul>
   baec6:	4680      	mov	r8, r0
   baec8:	4689      	mov	r9, r1
   baeca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   baece:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   baed2:	9315      	str	r3, [sp, #84]	; 0x54
   baed4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   baed8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   baedc:	e79d      	b.n	bae1a <_strtod_l+0x9aa>
   baede:	f1ba 0f01 	cmp.w	sl, #1
   baee2:	d102      	bne.n	baeea <_strtod_l+0xa7a>
   baee4:	2f00      	cmp	r7, #0
   baee6:	f43f ad83 	beq.w	ba9f0 <_strtod_l+0x580>
   baeea:	4b62      	ldr	r3, [pc, #392]	; (bb074 <_strtod_l+0xc04>)
   baeec:	2200      	movs	r2, #0
   baeee:	e78e      	b.n	bae0e <_strtod_l+0x99e>
   baef0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb070 <_strtod_l+0xc00>
   baef4:	f04f 0800 	mov.w	r8, #0
   baef8:	e7e7      	b.n	baeca <_strtod_l+0xa5a>
   baefa:	4b5d      	ldr	r3, [pc, #372]	; (bb070 <_strtod_l+0xc00>)
   baefc:	4640      	mov	r0, r8
   baefe:	4649      	mov	r1, r9
   baf00:	2200      	movs	r2, #0
   baf02:	f7fe fe93 	bl	b9c2c <__aeabi_dmul>
   baf06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   baf08:	4680      	mov	r8, r0
   baf0a:	4689      	mov	r9, r1
   baf0c:	b933      	cbnz	r3, baf1c <_strtod_l+0xaac>
   baf0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   baf12:	900e      	str	r0, [sp, #56]	; 0x38
   baf14:	930f      	str	r3, [sp, #60]	; 0x3c
   baf16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   baf1a:	e7dd      	b.n	baed8 <_strtod_l+0xa68>
   baf1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   baf20:	e7f9      	b.n	baf16 <_strtod_l+0xaa6>
   baf22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   baf26:	9b04      	ldr	r3, [sp, #16]
   baf28:	2b00      	cmp	r3, #0
   baf2a:	d1a8      	bne.n	bae7e <_strtod_l+0xa0e>
   baf2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   baf30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   baf32:	0d1b      	lsrs	r3, r3, #20
   baf34:	051b      	lsls	r3, r3, #20
   baf36:	429a      	cmp	r2, r3
   baf38:	d1a1      	bne.n	bae7e <_strtod_l+0xa0e>
   baf3a:	4640      	mov	r0, r8
   baf3c:	4649      	mov	r1, r9
   baf3e:	f001 fa61 	bl	bc404 <__aeabi_d2lz>
   baf42:	f7fe fe45 	bl	b9bd0 <__aeabi_l2d>
   baf46:	4602      	mov	r2, r0
   baf48:	460b      	mov	r3, r1
   baf4a:	4640      	mov	r0, r8
   baf4c:	4649      	mov	r1, r9
   baf4e:	f7fe fcb5 	bl	b98bc <__aeabi_dsub>
   baf52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   baf54:	f3cb 0313 	ubfx	r3, fp, #0, #20
   baf58:	ea43 030a 	orr.w	r3, r3, sl
   baf5c:	4313      	orrs	r3, r2
   baf5e:	4680      	mov	r8, r0
   baf60:	4689      	mov	r9, r1
   baf62:	d055      	beq.n	bb010 <_strtod_l+0xba0>
   baf64:	a336      	add	r3, pc, #216	; (adr r3, bb040 <_strtod_l+0xbd0>)
   baf66:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf6a:	f7ff f8d1 	bl	ba110 <__aeabi_dcmplt>
   baf6e:	2800      	cmp	r0, #0
   baf70:	f47f acd0 	bne.w	ba914 <_strtod_l+0x4a4>
   baf74:	a334      	add	r3, pc, #208	; (adr r3, bb048 <_strtod_l+0xbd8>)
   baf76:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf7a:	4640      	mov	r0, r8
   baf7c:	4649      	mov	r1, r9
   baf7e:	f7ff f8e5 	bl	ba14c <__aeabi_dcmpgt>
   baf82:	2800      	cmp	r0, #0
   baf84:	f43f af7b 	beq.w	bae7e <_strtod_l+0xa0e>
   baf88:	e4c4      	b.n	ba914 <_strtod_l+0x4a4>
   baf8a:	9b04      	ldr	r3, [sp, #16]
   baf8c:	b333      	cbz	r3, bafdc <_strtod_l+0xb6c>
   baf8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   baf90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   baf94:	d822      	bhi.n	bafdc <_strtod_l+0xb6c>
   baf96:	a32e      	add	r3, pc, #184	; (adr r3, bb050 <_strtod_l+0xbe0>)
   baf98:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf9c:	4640      	mov	r0, r8
   baf9e:	4649      	mov	r1, r9
   bafa0:	f7ff f8c0 	bl	ba124 <__aeabi_dcmple>
   bafa4:	b1a0      	cbz	r0, bafd0 <_strtod_l+0xb60>
   bafa6:	4649      	mov	r1, r9
   bafa8:	4640      	mov	r0, r8
   bafaa:	f7ff f8d9 	bl	ba160 <__aeabi_d2uiz>
   bafae:	2801      	cmp	r0, #1
   bafb0:	bf38      	it	cc
   bafb2:	2001      	movcc	r0, #1
   bafb4:	f7fe fdc0 	bl	b9b38 <__aeabi_ui2d>
   bafb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bafba:	4680      	mov	r8, r0
   bafbc:	4689      	mov	r9, r1
   bafbe:	bb23      	cbnz	r3, bb00a <_strtod_l+0xb9a>
   bafc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bafc4:	9010      	str	r0, [sp, #64]	; 0x40
   bafc6:	9311      	str	r3, [sp, #68]	; 0x44
   bafc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bafcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bafd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bafd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bafd4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bafd8:	1a9b      	subs	r3, r3, r2
   bafda:	9309      	str	r3, [sp, #36]	; 0x24
   bafdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bafe0:	eeb0 0a48 	vmov.f32	s0, s16
   bafe4:	eef0 0a68 	vmov.f32	s1, s17
   bafe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bafec:	f001 f894 	bl	bc118 <__ulp>
   baff0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   baff4:	ec53 2b10 	vmov	r2, r3, d0
   baff8:	f7fe fe18 	bl	b9c2c <__aeabi_dmul>
   baffc:	ec53 2b18 	vmov	r2, r3, d8
   bb000:	f7fe fc5e 	bl	b98c0 <__adddf3>
   bb004:	4682      	mov	sl, r0
   bb006:	468b      	mov	fp, r1
   bb008:	e78d      	b.n	baf26 <_strtod_l+0xab6>
   bb00a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb00e:	e7db      	b.n	bafc8 <_strtod_l+0xb58>
   bb010:	a311      	add	r3, pc, #68	; (adr r3, bb058 <_strtod_l+0xbe8>)
   bb012:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb016:	f7ff f87b 	bl	ba110 <__aeabi_dcmplt>
   bb01a:	e7b2      	b.n	baf82 <_strtod_l+0xb12>
   bb01c:	2300      	movs	r3, #0
   bb01e:	930a      	str	r3, [sp, #40]	; 0x28
   bb020:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb024:	6013      	str	r3, [r2, #0]
   bb026:	f7ff ba6b 	b.w	ba500 <_strtod_l+0x90>
   bb02a:	2a65      	cmp	r2, #101	; 0x65
   bb02c:	f43f ab5f 	beq.w	ba6ee <_strtod_l+0x27e>
   bb030:	2a45      	cmp	r2, #69	; 0x45
   bb032:	f43f ab5c 	beq.w	ba6ee <_strtod_l+0x27e>
   bb036:	2301      	movs	r3, #1
   bb038:	f7ff bb94 	b.w	ba764 <_strtod_l+0x2f4>
   bb03c:	f3af 8000 	nop.w
   bb040:	94a03595 	.word	0x94a03595
   bb044:	3fdfffff 	.word	0x3fdfffff
   bb048:	35afe535 	.word	0x35afe535
   bb04c:	3fe00000 	.word	0x3fe00000
   bb050:	ffc00000 	.word	0xffc00000
   bb054:	41dfffff 	.word	0x41dfffff
   bb058:	94a03595 	.word	0x94a03595
   bb05c:	3fcfffff 	.word	0x3fcfffff
   bb060:	3ff00000 	.word	0x3ff00000
   bb064:	7ff00000 	.word	0x7ff00000
   bb068:	7fe00000 	.word	0x7fe00000
   bb06c:	7c9fffff 	.word	0x7c9fffff
   bb070:	3fe00000 	.word	0x3fe00000
   bb074:	bff00000 	.word	0xbff00000
   bb078:	7fefffff 	.word	0x7fefffff

000bb07c <strtod>:
   bb07c:	460a      	mov	r2, r1
   bb07e:	4601      	mov	r1, r0
   bb080:	4802      	ldr	r0, [pc, #8]	; (bb08c <strtod+0x10>)
   bb082:	4b03      	ldr	r3, [pc, #12]	; (bb090 <strtod+0x14>)
   bb084:	6800      	ldr	r0, [r0, #0]
   bb086:	f7ff b9f3 	b.w	ba470 <_strtod_l>
   bb08a:	bf00      	nop
   bb08c:	2003d594 	.word	0x2003d594
   bb090:	2003d600 	.word	0x2003d600

000bb094 <strtok>:
   bb094:	4b16      	ldr	r3, [pc, #88]	; (bb0f0 <strtok+0x5c>)
   bb096:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb098:	681e      	ldr	r6, [r3, #0]
   bb09a:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bb09c:	4605      	mov	r5, r0
   bb09e:	b9fc      	cbnz	r4, bb0e0 <strtok+0x4c>
   bb0a0:	2050      	movs	r0, #80	; 0x50
   bb0a2:	9101      	str	r1, [sp, #4]
   bb0a4:	f7fb fa56 	bl	b6554 <malloc>
   bb0a8:	9901      	ldr	r1, [sp, #4]
   bb0aa:	65b0      	str	r0, [r6, #88]	; 0x58
   bb0ac:	4602      	mov	r2, r0
   bb0ae:	b920      	cbnz	r0, bb0ba <strtok+0x26>
   bb0b0:	4b10      	ldr	r3, [pc, #64]	; (bb0f4 <strtok+0x60>)
   bb0b2:	4811      	ldr	r0, [pc, #68]	; (bb0f8 <strtok+0x64>)
   bb0b4:	2157      	movs	r1, #87	; 0x57
   bb0b6:	f7fb fa95 	bl	b65e4 <__assert_func>
   bb0ba:	e9c0 4400 	strd	r4, r4, [r0]
   bb0be:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bb0c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bb0c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bb0ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bb0ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bb0d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bb0d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bb0da:	6184      	str	r4, [r0, #24]
   bb0dc:	7704      	strb	r4, [r0, #28]
   bb0de:	6244      	str	r4, [r0, #36]	; 0x24
   bb0e0:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bb0e2:	2301      	movs	r3, #1
   bb0e4:	4628      	mov	r0, r5
   bb0e6:	b002      	add	sp, #8
   bb0e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb0ec:	f000 b806 	b.w	bb0fc <__strtok_r>
   bb0f0:	2003d594 	.word	0x2003d594
   bb0f4:	000bd2c6 	.word	0x000bd2c6
   bb0f8:	000bd3b8 	.word	0x000bd3b8

000bb0fc <__strtok_r>:
   bb0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb0fe:	b908      	cbnz	r0, bb104 <__strtok_r+0x8>
   bb100:	6810      	ldr	r0, [r2, #0]
   bb102:	b188      	cbz	r0, bb128 <__strtok_r+0x2c>
   bb104:	4604      	mov	r4, r0
   bb106:	4620      	mov	r0, r4
   bb108:	f814 5b01 	ldrb.w	r5, [r4], #1
   bb10c:	460f      	mov	r7, r1
   bb10e:	f817 6b01 	ldrb.w	r6, [r7], #1
   bb112:	b91e      	cbnz	r6, bb11c <__strtok_r+0x20>
   bb114:	b965      	cbnz	r5, bb130 <__strtok_r+0x34>
   bb116:	6015      	str	r5, [r2, #0]
   bb118:	4628      	mov	r0, r5
   bb11a:	e005      	b.n	bb128 <__strtok_r+0x2c>
   bb11c:	42b5      	cmp	r5, r6
   bb11e:	d1f6      	bne.n	bb10e <__strtok_r+0x12>
   bb120:	2b00      	cmp	r3, #0
   bb122:	d1f0      	bne.n	bb106 <__strtok_r+0xa>
   bb124:	6014      	str	r4, [r2, #0]
   bb126:	7003      	strb	r3, [r0, #0]
   bb128:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb12a:	461c      	mov	r4, r3
   bb12c:	e00c      	b.n	bb148 <__strtok_r+0x4c>
   bb12e:	b915      	cbnz	r5, bb136 <__strtok_r+0x3a>
   bb130:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb134:	460e      	mov	r6, r1
   bb136:	f816 5b01 	ldrb.w	r5, [r6], #1
   bb13a:	42ab      	cmp	r3, r5
   bb13c:	d1f7      	bne.n	bb12e <__strtok_r+0x32>
   bb13e:	2b00      	cmp	r3, #0
   bb140:	d0f3      	beq.n	bb12a <__strtok_r+0x2e>
   bb142:	2300      	movs	r3, #0
   bb144:	f804 3c01 	strb.w	r3, [r4, #-1]
   bb148:	6014      	str	r4, [r2, #0]
   bb14a:	e7ed      	b.n	bb128 <__strtok_r+0x2c>

000bb14c <_strtol_l.constprop.0>:
   bb14c:	2b01      	cmp	r3, #1
   bb14e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb152:	d001      	beq.n	bb158 <_strtol_l.constprop.0+0xc>
   bb154:	2b24      	cmp	r3, #36	; 0x24
   bb156:	d906      	bls.n	bb166 <_strtol_l.constprop.0+0x1a>
   bb158:	f7fb fa3c 	bl	b65d4 <__errno>
   bb15c:	2316      	movs	r3, #22
   bb15e:	6003      	str	r3, [r0, #0]
   bb160:	2000      	movs	r0, #0
   bb162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb166:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb24c <_strtol_l.constprop.0+0x100>
   bb16a:	460d      	mov	r5, r1
   bb16c:	462e      	mov	r6, r5
   bb16e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb172:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb176:	f017 0708 	ands.w	r7, r7, #8
   bb17a:	d1f7      	bne.n	bb16c <_strtol_l.constprop.0+0x20>
   bb17c:	2c2d      	cmp	r4, #45	; 0x2d
   bb17e:	d132      	bne.n	bb1e6 <_strtol_l.constprop.0+0x9a>
   bb180:	782c      	ldrb	r4, [r5, #0]
   bb182:	2701      	movs	r7, #1
   bb184:	1cb5      	adds	r5, r6, #2
   bb186:	2b00      	cmp	r3, #0
   bb188:	d05b      	beq.n	bb242 <_strtol_l.constprop.0+0xf6>
   bb18a:	2b10      	cmp	r3, #16
   bb18c:	d109      	bne.n	bb1a2 <_strtol_l.constprop.0+0x56>
   bb18e:	2c30      	cmp	r4, #48	; 0x30
   bb190:	d107      	bne.n	bb1a2 <_strtol_l.constprop.0+0x56>
   bb192:	782c      	ldrb	r4, [r5, #0]
   bb194:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb198:	2c58      	cmp	r4, #88	; 0x58
   bb19a:	d14d      	bne.n	bb238 <_strtol_l.constprop.0+0xec>
   bb19c:	786c      	ldrb	r4, [r5, #1]
   bb19e:	2310      	movs	r3, #16
   bb1a0:	3502      	adds	r5, #2
   bb1a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb1a6:	f108 38ff 	add.w	r8, r8, #4294967295
   bb1aa:	f04f 0c00 	mov.w	ip, #0
   bb1ae:	fbb8 f9f3 	udiv	r9, r8, r3
   bb1b2:	4666      	mov	r6, ip
   bb1b4:	fb03 8a19 	mls	sl, r3, r9, r8
   bb1b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb1bc:	f1be 0f09 	cmp.w	lr, #9
   bb1c0:	d816      	bhi.n	bb1f0 <_strtol_l.constprop.0+0xa4>
   bb1c2:	4674      	mov	r4, lr
   bb1c4:	42a3      	cmp	r3, r4
   bb1c6:	dd24      	ble.n	bb212 <_strtol_l.constprop.0+0xc6>
   bb1c8:	f1bc 0f00 	cmp.w	ip, #0
   bb1cc:	db1e      	blt.n	bb20c <_strtol_l.constprop.0+0xc0>
   bb1ce:	45b1      	cmp	r9, r6
   bb1d0:	d31c      	bcc.n	bb20c <_strtol_l.constprop.0+0xc0>
   bb1d2:	d101      	bne.n	bb1d8 <_strtol_l.constprop.0+0x8c>
   bb1d4:	45a2      	cmp	sl, r4
   bb1d6:	db19      	blt.n	bb20c <_strtol_l.constprop.0+0xc0>
   bb1d8:	fb06 4603 	mla	r6, r6, r3, r4
   bb1dc:	f04f 0c01 	mov.w	ip, #1
   bb1e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb1e4:	e7e8      	b.n	bb1b8 <_strtol_l.constprop.0+0x6c>
   bb1e6:	2c2b      	cmp	r4, #43	; 0x2b
   bb1e8:	bf04      	itt	eq
   bb1ea:	782c      	ldrbeq	r4, [r5, #0]
   bb1ec:	1cb5      	addeq	r5, r6, #2
   bb1ee:	e7ca      	b.n	bb186 <_strtol_l.constprop.0+0x3a>
   bb1f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb1f4:	f1be 0f19 	cmp.w	lr, #25
   bb1f8:	d801      	bhi.n	bb1fe <_strtol_l.constprop.0+0xb2>
   bb1fa:	3c37      	subs	r4, #55	; 0x37
   bb1fc:	e7e2      	b.n	bb1c4 <_strtol_l.constprop.0+0x78>
   bb1fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb202:	f1be 0f19 	cmp.w	lr, #25
   bb206:	d804      	bhi.n	bb212 <_strtol_l.constprop.0+0xc6>
   bb208:	3c57      	subs	r4, #87	; 0x57
   bb20a:	e7db      	b.n	bb1c4 <_strtol_l.constprop.0+0x78>
   bb20c:	f04f 3cff 	mov.w	ip, #4294967295
   bb210:	e7e6      	b.n	bb1e0 <_strtol_l.constprop.0+0x94>
   bb212:	f1bc 0f00 	cmp.w	ip, #0
   bb216:	da05      	bge.n	bb224 <_strtol_l.constprop.0+0xd8>
   bb218:	2322      	movs	r3, #34	; 0x22
   bb21a:	6003      	str	r3, [r0, #0]
   bb21c:	4646      	mov	r6, r8
   bb21e:	b942      	cbnz	r2, bb232 <_strtol_l.constprop.0+0xe6>
   bb220:	4630      	mov	r0, r6
   bb222:	e79e      	b.n	bb162 <_strtol_l.constprop.0+0x16>
   bb224:	b107      	cbz	r7, bb228 <_strtol_l.constprop.0+0xdc>
   bb226:	4276      	negs	r6, r6
   bb228:	2a00      	cmp	r2, #0
   bb22a:	d0f9      	beq.n	bb220 <_strtol_l.constprop.0+0xd4>
   bb22c:	f1bc 0f00 	cmp.w	ip, #0
   bb230:	d000      	beq.n	bb234 <_strtol_l.constprop.0+0xe8>
   bb232:	1e69      	subs	r1, r5, #1
   bb234:	6011      	str	r1, [r2, #0]
   bb236:	e7f3      	b.n	bb220 <_strtol_l.constprop.0+0xd4>
   bb238:	2430      	movs	r4, #48	; 0x30
   bb23a:	2b00      	cmp	r3, #0
   bb23c:	d1b1      	bne.n	bb1a2 <_strtol_l.constprop.0+0x56>
   bb23e:	2308      	movs	r3, #8
   bb240:	e7af      	b.n	bb1a2 <_strtol_l.constprop.0+0x56>
   bb242:	2c30      	cmp	r4, #48	; 0x30
   bb244:	d0a5      	beq.n	bb192 <_strtol_l.constprop.0+0x46>
   bb246:	230a      	movs	r3, #10
   bb248:	e7ab      	b.n	bb1a2 <_strtol_l.constprop.0+0x56>
   bb24a:	bf00      	nop
   bb24c:	000bd1c6 	.word	0x000bd1c6

000bb250 <strtol>:
   bb250:	4613      	mov	r3, r2
   bb252:	460a      	mov	r2, r1
   bb254:	4601      	mov	r1, r0
   bb256:	4802      	ldr	r0, [pc, #8]	; (bb260 <strtol+0x10>)
   bb258:	6800      	ldr	r0, [r0, #0]
   bb25a:	f7ff bf77 	b.w	bb14c <_strtol_l.constprop.0>
   bb25e:	bf00      	nop
   bb260:	2003d594 	.word	0x2003d594

000bb264 <__register_exitproc>:
   bb264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb268:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb324 <__register_exitproc+0xc0>
   bb26c:	4606      	mov	r6, r0
   bb26e:	f8d8 0000 	ldr.w	r0, [r8]
   bb272:	461f      	mov	r7, r3
   bb274:	460d      	mov	r5, r1
   bb276:	4691      	mov	r9, r2
   bb278:	f000 fbc6 	bl	bba08 <__retarget_lock_acquire_recursive>
   bb27c:	4b25      	ldr	r3, [pc, #148]	; (bb314 <__register_exitproc+0xb0>)
   bb27e:	681c      	ldr	r4, [r3, #0]
   bb280:	b934      	cbnz	r4, bb290 <__register_exitproc+0x2c>
   bb282:	4c25      	ldr	r4, [pc, #148]	; (bb318 <__register_exitproc+0xb4>)
   bb284:	601c      	str	r4, [r3, #0]
   bb286:	4b25      	ldr	r3, [pc, #148]	; (bb31c <__register_exitproc+0xb8>)
   bb288:	b113      	cbz	r3, bb290 <__register_exitproc+0x2c>
   bb28a:	681b      	ldr	r3, [r3, #0]
   bb28c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb290:	6863      	ldr	r3, [r4, #4]
   bb292:	2b1f      	cmp	r3, #31
   bb294:	dd07      	ble.n	bb2a6 <__register_exitproc+0x42>
   bb296:	f8d8 0000 	ldr.w	r0, [r8]
   bb29a:	f000 fbb7 	bl	bba0c <__retarget_lock_release_recursive>
   bb29e:	f04f 30ff 	mov.w	r0, #4294967295
   bb2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb2a6:	b34e      	cbz	r6, bb2fc <__register_exitproc+0x98>
   bb2a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb2ac:	b988      	cbnz	r0, bb2d2 <__register_exitproc+0x6e>
   bb2ae:	4b1c      	ldr	r3, [pc, #112]	; (bb320 <__register_exitproc+0xbc>)
   bb2b0:	b923      	cbnz	r3, bb2bc <__register_exitproc+0x58>
   bb2b2:	f8d8 0000 	ldr.w	r0, [r8]
   bb2b6:	f000 fba8 	bl	bba0a <__retarget_lock_release>
   bb2ba:	e7f0      	b.n	bb29e <__register_exitproc+0x3a>
   bb2bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb2c0:	f7fb f948 	bl	b6554 <malloc>
   bb2c4:	2800      	cmp	r0, #0
   bb2c6:	d0f4      	beq.n	bb2b2 <__register_exitproc+0x4e>
   bb2c8:	2300      	movs	r3, #0
   bb2ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb2ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb2d2:	6863      	ldr	r3, [r4, #4]
   bb2d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb2d8:	2201      	movs	r2, #1
   bb2da:	409a      	lsls	r2, r3
   bb2dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb2e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb2e4:	4313      	orrs	r3, r2
   bb2e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb2ea:	2e02      	cmp	r6, #2
   bb2ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb2f0:	bf02      	ittt	eq
   bb2f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb2f6:	4313      	orreq	r3, r2
   bb2f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb2fc:	6863      	ldr	r3, [r4, #4]
   bb2fe:	f8d8 0000 	ldr.w	r0, [r8]
   bb302:	1c5a      	adds	r2, r3, #1
   bb304:	3302      	adds	r3, #2
   bb306:	6062      	str	r2, [r4, #4]
   bb308:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb30c:	f000 fb7e 	bl	bba0c <__retarget_lock_release_recursive>
   bb310:	2000      	movs	r0, #0
   bb312:	e7c6      	b.n	bb2a2 <__register_exitproc+0x3e>
   bb314:	2003e7ec 	.word	0x2003e7ec
   bb318:	2003e760 	.word	0x2003e760
   bb31c:	00000000 	.word	0x00000000
   bb320:	000b6555 	.word	0x000b6555
   bb324:	2003d5f8 	.word	0x2003d5f8

000bb328 <rshift>:
   bb328:	6903      	ldr	r3, [r0, #16]
   bb32a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb32e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb332:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb336:	f100 0414 	add.w	r4, r0, #20
   bb33a:	dd45      	ble.n	bb3c8 <rshift+0xa0>
   bb33c:	f011 011f 	ands.w	r1, r1, #31
   bb340:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb344:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb348:	d10c      	bne.n	bb364 <rshift+0x3c>
   bb34a:	f100 0710 	add.w	r7, r0, #16
   bb34e:	4629      	mov	r1, r5
   bb350:	42b1      	cmp	r1, r6
   bb352:	d334      	bcc.n	bb3be <rshift+0x96>
   bb354:	1a9b      	subs	r3, r3, r2
   bb356:	009b      	lsls	r3, r3, #2
   bb358:	1eea      	subs	r2, r5, #3
   bb35a:	4296      	cmp	r6, r2
   bb35c:	bf38      	it	cc
   bb35e:	2300      	movcc	r3, #0
   bb360:	4423      	add	r3, r4
   bb362:	e015      	b.n	bb390 <rshift+0x68>
   bb364:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb368:	f1c1 0820 	rsb	r8, r1, #32
   bb36c:	40cf      	lsrs	r7, r1
   bb36e:	f105 0e04 	add.w	lr, r5, #4
   bb372:	46a1      	mov	r9, r4
   bb374:	4576      	cmp	r6, lr
   bb376:	46f4      	mov	ip, lr
   bb378:	d815      	bhi.n	bb3a6 <rshift+0x7e>
   bb37a:	1a9a      	subs	r2, r3, r2
   bb37c:	0092      	lsls	r2, r2, #2
   bb37e:	3a04      	subs	r2, #4
   bb380:	3501      	adds	r5, #1
   bb382:	42ae      	cmp	r6, r5
   bb384:	bf38      	it	cc
   bb386:	2200      	movcc	r2, #0
   bb388:	18a3      	adds	r3, r4, r2
   bb38a:	50a7      	str	r7, [r4, r2]
   bb38c:	b107      	cbz	r7, bb390 <rshift+0x68>
   bb38e:	3304      	adds	r3, #4
   bb390:	1b1a      	subs	r2, r3, r4
   bb392:	42a3      	cmp	r3, r4
   bb394:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb398:	bf08      	it	eq
   bb39a:	2300      	moveq	r3, #0
   bb39c:	6102      	str	r2, [r0, #16]
   bb39e:	bf08      	it	eq
   bb3a0:	6143      	streq	r3, [r0, #20]
   bb3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb3a6:	f8dc c000 	ldr.w	ip, [ip]
   bb3aa:	fa0c fc08 	lsl.w	ip, ip, r8
   bb3ae:	ea4c 0707 	orr.w	r7, ip, r7
   bb3b2:	f849 7b04 	str.w	r7, [r9], #4
   bb3b6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb3ba:	40cf      	lsrs	r7, r1
   bb3bc:	e7da      	b.n	bb374 <rshift+0x4c>
   bb3be:	f851 cb04 	ldr.w	ip, [r1], #4
   bb3c2:	f847 cf04 	str.w	ip, [r7, #4]!
   bb3c6:	e7c3      	b.n	bb350 <rshift+0x28>
   bb3c8:	4623      	mov	r3, r4
   bb3ca:	e7e1      	b.n	bb390 <rshift+0x68>

000bb3cc <__hexdig_fun>:
   bb3cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb3d0:	2b09      	cmp	r3, #9
   bb3d2:	d802      	bhi.n	bb3da <__hexdig_fun+0xe>
   bb3d4:	3820      	subs	r0, #32
   bb3d6:	b2c0      	uxtb	r0, r0
   bb3d8:	4770      	bx	lr
   bb3da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb3de:	2b05      	cmp	r3, #5
   bb3e0:	d801      	bhi.n	bb3e6 <__hexdig_fun+0x1a>
   bb3e2:	3847      	subs	r0, #71	; 0x47
   bb3e4:	e7f7      	b.n	bb3d6 <__hexdig_fun+0xa>
   bb3e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb3ea:	2b05      	cmp	r3, #5
   bb3ec:	d801      	bhi.n	bb3f2 <__hexdig_fun+0x26>
   bb3ee:	3827      	subs	r0, #39	; 0x27
   bb3f0:	e7f1      	b.n	bb3d6 <__hexdig_fun+0xa>
   bb3f2:	2000      	movs	r0, #0
   bb3f4:	4770      	bx	lr
	...

000bb3f8 <__gethex>:
   bb3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3fc:	ed2d 8b02 	vpush	{d8}
   bb400:	b089      	sub	sp, #36	; 0x24
   bb402:	ee08 0a10 	vmov	s16, r0
   bb406:	9304      	str	r3, [sp, #16]
   bb408:	4bb4      	ldr	r3, [pc, #720]	; (bb6dc <__gethex+0x2e4>)
   bb40a:	681b      	ldr	r3, [r3, #0]
   bb40c:	9301      	str	r3, [sp, #4]
   bb40e:	4618      	mov	r0, r3
   bb410:	468b      	mov	fp, r1
   bb412:	4690      	mov	r8, r2
   bb414:	f7fe ffd1 	bl	ba3ba <strlen>
   bb418:	9b01      	ldr	r3, [sp, #4]
   bb41a:	f8db 2000 	ldr.w	r2, [fp]
   bb41e:	4403      	add	r3, r0
   bb420:	4682      	mov	sl, r0
   bb422:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb426:	9305      	str	r3, [sp, #20]
   bb428:	1c93      	adds	r3, r2, #2
   bb42a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb42e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb432:	32fe      	adds	r2, #254	; 0xfe
   bb434:	18d1      	adds	r1, r2, r3
   bb436:	461f      	mov	r7, r3
   bb438:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb43c:	9100      	str	r1, [sp, #0]
   bb43e:	2830      	cmp	r0, #48	; 0x30
   bb440:	d0f8      	beq.n	bb434 <__gethex+0x3c>
   bb442:	f7ff ffc3 	bl	bb3cc <__hexdig_fun>
   bb446:	4604      	mov	r4, r0
   bb448:	2800      	cmp	r0, #0
   bb44a:	d13a      	bne.n	bb4c2 <__gethex+0xca>
   bb44c:	9901      	ldr	r1, [sp, #4]
   bb44e:	4652      	mov	r2, sl
   bb450:	4638      	mov	r0, r7
   bb452:	f7fe ffba 	bl	ba3ca <strncmp>
   bb456:	4605      	mov	r5, r0
   bb458:	2800      	cmp	r0, #0
   bb45a:	d168      	bne.n	bb52e <__gethex+0x136>
   bb45c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb460:	eb07 060a 	add.w	r6, r7, sl
   bb464:	f7ff ffb2 	bl	bb3cc <__hexdig_fun>
   bb468:	2800      	cmp	r0, #0
   bb46a:	d062      	beq.n	bb532 <__gethex+0x13a>
   bb46c:	4633      	mov	r3, r6
   bb46e:	7818      	ldrb	r0, [r3, #0]
   bb470:	2830      	cmp	r0, #48	; 0x30
   bb472:	461f      	mov	r7, r3
   bb474:	f103 0301 	add.w	r3, r3, #1
   bb478:	d0f9      	beq.n	bb46e <__gethex+0x76>
   bb47a:	f7ff ffa7 	bl	bb3cc <__hexdig_fun>
   bb47e:	2301      	movs	r3, #1
   bb480:	fab0 f480 	clz	r4, r0
   bb484:	0964      	lsrs	r4, r4, #5
   bb486:	4635      	mov	r5, r6
   bb488:	9300      	str	r3, [sp, #0]
   bb48a:	463a      	mov	r2, r7
   bb48c:	4616      	mov	r6, r2
   bb48e:	3201      	adds	r2, #1
   bb490:	7830      	ldrb	r0, [r6, #0]
   bb492:	f7ff ff9b 	bl	bb3cc <__hexdig_fun>
   bb496:	2800      	cmp	r0, #0
   bb498:	d1f8      	bne.n	bb48c <__gethex+0x94>
   bb49a:	9901      	ldr	r1, [sp, #4]
   bb49c:	4652      	mov	r2, sl
   bb49e:	4630      	mov	r0, r6
   bb4a0:	f7fe ff93 	bl	ba3ca <strncmp>
   bb4a4:	b980      	cbnz	r0, bb4c8 <__gethex+0xd0>
   bb4a6:	b94d      	cbnz	r5, bb4bc <__gethex+0xc4>
   bb4a8:	eb06 050a 	add.w	r5, r6, sl
   bb4ac:	462a      	mov	r2, r5
   bb4ae:	4616      	mov	r6, r2
   bb4b0:	3201      	adds	r2, #1
   bb4b2:	7830      	ldrb	r0, [r6, #0]
   bb4b4:	f7ff ff8a 	bl	bb3cc <__hexdig_fun>
   bb4b8:	2800      	cmp	r0, #0
   bb4ba:	d1f8      	bne.n	bb4ae <__gethex+0xb6>
   bb4bc:	1bad      	subs	r5, r5, r6
   bb4be:	00ad      	lsls	r5, r5, #2
   bb4c0:	e004      	b.n	bb4cc <__gethex+0xd4>
   bb4c2:	2400      	movs	r4, #0
   bb4c4:	4625      	mov	r5, r4
   bb4c6:	e7e0      	b.n	bb48a <__gethex+0x92>
   bb4c8:	2d00      	cmp	r5, #0
   bb4ca:	d1f7      	bne.n	bb4bc <__gethex+0xc4>
   bb4cc:	7833      	ldrb	r3, [r6, #0]
   bb4ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb4d2:	2b50      	cmp	r3, #80	; 0x50
   bb4d4:	d13b      	bne.n	bb54e <__gethex+0x156>
   bb4d6:	7873      	ldrb	r3, [r6, #1]
   bb4d8:	2b2b      	cmp	r3, #43	; 0x2b
   bb4da:	d02c      	beq.n	bb536 <__gethex+0x13e>
   bb4dc:	2b2d      	cmp	r3, #45	; 0x2d
   bb4de:	d02e      	beq.n	bb53e <__gethex+0x146>
   bb4e0:	1c71      	adds	r1, r6, #1
   bb4e2:	f04f 0900 	mov.w	r9, #0
   bb4e6:	7808      	ldrb	r0, [r1, #0]
   bb4e8:	f7ff ff70 	bl	bb3cc <__hexdig_fun>
   bb4ec:	1e43      	subs	r3, r0, #1
   bb4ee:	b2db      	uxtb	r3, r3
   bb4f0:	2b18      	cmp	r3, #24
   bb4f2:	d82c      	bhi.n	bb54e <__gethex+0x156>
   bb4f4:	f1a0 0210 	sub.w	r2, r0, #16
   bb4f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb4fc:	f7ff ff66 	bl	bb3cc <__hexdig_fun>
   bb500:	1e43      	subs	r3, r0, #1
   bb502:	b2db      	uxtb	r3, r3
   bb504:	2b18      	cmp	r3, #24
   bb506:	d91d      	bls.n	bb544 <__gethex+0x14c>
   bb508:	f1b9 0f00 	cmp.w	r9, #0
   bb50c:	d000      	beq.n	bb510 <__gethex+0x118>
   bb50e:	4252      	negs	r2, r2
   bb510:	4415      	add	r5, r2
   bb512:	f8cb 1000 	str.w	r1, [fp]
   bb516:	b1e4      	cbz	r4, bb552 <__gethex+0x15a>
   bb518:	9b00      	ldr	r3, [sp, #0]
   bb51a:	2b00      	cmp	r3, #0
   bb51c:	bf14      	ite	ne
   bb51e:	2700      	movne	r7, #0
   bb520:	2706      	moveq	r7, #6
   bb522:	4638      	mov	r0, r7
   bb524:	b009      	add	sp, #36	; 0x24
   bb526:	ecbd 8b02 	vpop	{d8}
   bb52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb52e:	463e      	mov	r6, r7
   bb530:	4625      	mov	r5, r4
   bb532:	2401      	movs	r4, #1
   bb534:	e7ca      	b.n	bb4cc <__gethex+0xd4>
   bb536:	f04f 0900 	mov.w	r9, #0
   bb53a:	1cb1      	adds	r1, r6, #2
   bb53c:	e7d3      	b.n	bb4e6 <__gethex+0xee>
   bb53e:	f04f 0901 	mov.w	r9, #1
   bb542:	e7fa      	b.n	bb53a <__gethex+0x142>
   bb544:	230a      	movs	r3, #10
   bb546:	fb03 0202 	mla	r2, r3, r2, r0
   bb54a:	3a10      	subs	r2, #16
   bb54c:	e7d4      	b.n	bb4f8 <__gethex+0x100>
   bb54e:	4631      	mov	r1, r6
   bb550:	e7df      	b.n	bb512 <__gethex+0x11a>
   bb552:	1bf3      	subs	r3, r6, r7
   bb554:	3b01      	subs	r3, #1
   bb556:	4621      	mov	r1, r4
   bb558:	2b07      	cmp	r3, #7
   bb55a:	dc0b      	bgt.n	bb574 <__gethex+0x17c>
   bb55c:	ee18 0a10 	vmov	r0, s16
   bb560:	f000 fa68 	bl	bba34 <_Balloc>
   bb564:	4604      	mov	r4, r0
   bb566:	b940      	cbnz	r0, bb57a <__gethex+0x182>
   bb568:	4b5d      	ldr	r3, [pc, #372]	; (bb6e0 <__gethex+0x2e8>)
   bb56a:	4602      	mov	r2, r0
   bb56c:	21de      	movs	r1, #222	; 0xde
   bb56e:	485d      	ldr	r0, [pc, #372]	; (bb6e4 <__gethex+0x2ec>)
   bb570:	f7fb f838 	bl	b65e4 <__assert_func>
   bb574:	3101      	adds	r1, #1
   bb576:	105b      	asrs	r3, r3, #1
   bb578:	e7ee      	b.n	bb558 <__gethex+0x160>
   bb57a:	f100 0914 	add.w	r9, r0, #20
   bb57e:	f04f 0b00 	mov.w	fp, #0
   bb582:	f1ca 0301 	rsb	r3, sl, #1
   bb586:	f8cd 9008 	str.w	r9, [sp, #8]
   bb58a:	f8cd b000 	str.w	fp, [sp]
   bb58e:	9306      	str	r3, [sp, #24]
   bb590:	42b7      	cmp	r7, r6
   bb592:	d340      	bcc.n	bb616 <__gethex+0x21e>
   bb594:	9802      	ldr	r0, [sp, #8]
   bb596:	9b00      	ldr	r3, [sp, #0]
   bb598:	f840 3b04 	str.w	r3, [r0], #4
   bb59c:	eba0 0009 	sub.w	r0, r0, r9
   bb5a0:	1080      	asrs	r0, r0, #2
   bb5a2:	0146      	lsls	r6, r0, #5
   bb5a4:	6120      	str	r0, [r4, #16]
   bb5a6:	4618      	mov	r0, r3
   bb5a8:	f000 fb36 	bl	bbc18 <__hi0bits>
   bb5ac:	1a30      	subs	r0, r6, r0
   bb5ae:	f8d8 6000 	ldr.w	r6, [r8]
   bb5b2:	42b0      	cmp	r0, r6
   bb5b4:	dd63      	ble.n	bb67e <__gethex+0x286>
   bb5b6:	1b87      	subs	r7, r0, r6
   bb5b8:	4639      	mov	r1, r7
   bb5ba:	4620      	mov	r0, r4
   bb5bc:	f000 feda 	bl	bc374 <__any_on>
   bb5c0:	4682      	mov	sl, r0
   bb5c2:	b1a8      	cbz	r0, bb5f0 <__gethex+0x1f8>
   bb5c4:	1e7b      	subs	r3, r7, #1
   bb5c6:	1159      	asrs	r1, r3, #5
   bb5c8:	f003 021f 	and.w	r2, r3, #31
   bb5cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bb5d0:	f04f 0a01 	mov.w	sl, #1
   bb5d4:	fa0a f202 	lsl.w	r2, sl, r2
   bb5d8:	420a      	tst	r2, r1
   bb5da:	d009      	beq.n	bb5f0 <__gethex+0x1f8>
   bb5dc:	4553      	cmp	r3, sl
   bb5de:	dd05      	ble.n	bb5ec <__gethex+0x1f4>
   bb5e0:	1eb9      	subs	r1, r7, #2
   bb5e2:	4620      	mov	r0, r4
   bb5e4:	f000 fec6 	bl	bc374 <__any_on>
   bb5e8:	2800      	cmp	r0, #0
   bb5ea:	d145      	bne.n	bb678 <__gethex+0x280>
   bb5ec:	f04f 0a02 	mov.w	sl, #2
   bb5f0:	4639      	mov	r1, r7
   bb5f2:	4620      	mov	r0, r4
   bb5f4:	f7ff fe98 	bl	bb328 <rshift>
   bb5f8:	443d      	add	r5, r7
   bb5fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb5fe:	42ab      	cmp	r3, r5
   bb600:	da4c      	bge.n	bb69c <__gethex+0x2a4>
   bb602:	ee18 0a10 	vmov	r0, s16
   bb606:	4621      	mov	r1, r4
   bb608:	f000 fa54 	bl	bbab4 <_Bfree>
   bb60c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb60e:	2300      	movs	r3, #0
   bb610:	6013      	str	r3, [r2, #0]
   bb612:	27a3      	movs	r7, #163	; 0xa3
   bb614:	e785      	b.n	bb522 <__gethex+0x12a>
   bb616:	1e73      	subs	r3, r6, #1
   bb618:	9a05      	ldr	r2, [sp, #20]
   bb61a:	9303      	str	r3, [sp, #12]
   bb61c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bb620:	4293      	cmp	r3, r2
   bb622:	d019      	beq.n	bb658 <__gethex+0x260>
   bb624:	f1bb 0f20 	cmp.w	fp, #32
   bb628:	d107      	bne.n	bb63a <__gethex+0x242>
   bb62a:	9b02      	ldr	r3, [sp, #8]
   bb62c:	9a00      	ldr	r2, [sp, #0]
   bb62e:	f843 2b04 	str.w	r2, [r3], #4
   bb632:	9302      	str	r3, [sp, #8]
   bb634:	2300      	movs	r3, #0
   bb636:	9300      	str	r3, [sp, #0]
   bb638:	469b      	mov	fp, r3
   bb63a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bb63e:	f7ff fec5 	bl	bb3cc <__hexdig_fun>
   bb642:	9b00      	ldr	r3, [sp, #0]
   bb644:	f000 000f 	and.w	r0, r0, #15
   bb648:	fa00 f00b 	lsl.w	r0, r0, fp
   bb64c:	4303      	orrs	r3, r0
   bb64e:	9300      	str	r3, [sp, #0]
   bb650:	f10b 0b04 	add.w	fp, fp, #4
   bb654:	9b03      	ldr	r3, [sp, #12]
   bb656:	e00d      	b.n	bb674 <__gethex+0x27c>
   bb658:	9b03      	ldr	r3, [sp, #12]
   bb65a:	9a06      	ldr	r2, [sp, #24]
   bb65c:	4413      	add	r3, r2
   bb65e:	42bb      	cmp	r3, r7
   bb660:	d3e0      	bcc.n	bb624 <__gethex+0x22c>
   bb662:	4618      	mov	r0, r3
   bb664:	9901      	ldr	r1, [sp, #4]
   bb666:	9307      	str	r3, [sp, #28]
   bb668:	4652      	mov	r2, sl
   bb66a:	f7fe feae 	bl	ba3ca <strncmp>
   bb66e:	9b07      	ldr	r3, [sp, #28]
   bb670:	2800      	cmp	r0, #0
   bb672:	d1d7      	bne.n	bb624 <__gethex+0x22c>
   bb674:	461e      	mov	r6, r3
   bb676:	e78b      	b.n	bb590 <__gethex+0x198>
   bb678:	f04f 0a03 	mov.w	sl, #3
   bb67c:	e7b8      	b.n	bb5f0 <__gethex+0x1f8>
   bb67e:	da0a      	bge.n	bb696 <__gethex+0x29e>
   bb680:	1a37      	subs	r7, r6, r0
   bb682:	4621      	mov	r1, r4
   bb684:	ee18 0a10 	vmov	r0, s16
   bb688:	463a      	mov	r2, r7
   bb68a:	f000 fc2f 	bl	bbeec <__lshift>
   bb68e:	1bed      	subs	r5, r5, r7
   bb690:	4604      	mov	r4, r0
   bb692:	f100 0914 	add.w	r9, r0, #20
   bb696:	f04f 0a00 	mov.w	sl, #0
   bb69a:	e7ae      	b.n	bb5fa <__gethex+0x202>
   bb69c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bb6a0:	42a8      	cmp	r0, r5
   bb6a2:	dd72      	ble.n	bb78a <__gethex+0x392>
   bb6a4:	1b45      	subs	r5, r0, r5
   bb6a6:	42ae      	cmp	r6, r5
   bb6a8:	dc36      	bgt.n	bb718 <__gethex+0x320>
   bb6aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb6ae:	2b02      	cmp	r3, #2
   bb6b0:	d02a      	beq.n	bb708 <__gethex+0x310>
   bb6b2:	2b03      	cmp	r3, #3
   bb6b4:	d02c      	beq.n	bb710 <__gethex+0x318>
   bb6b6:	2b01      	cmp	r3, #1
   bb6b8:	d11c      	bne.n	bb6f4 <__gethex+0x2fc>
   bb6ba:	42ae      	cmp	r6, r5
   bb6bc:	d11a      	bne.n	bb6f4 <__gethex+0x2fc>
   bb6be:	2e01      	cmp	r6, #1
   bb6c0:	d112      	bne.n	bb6e8 <__gethex+0x2f0>
   bb6c2:	9a04      	ldr	r2, [sp, #16]
   bb6c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bb6c8:	6013      	str	r3, [r2, #0]
   bb6ca:	2301      	movs	r3, #1
   bb6cc:	6123      	str	r3, [r4, #16]
   bb6ce:	f8c9 3000 	str.w	r3, [r9]
   bb6d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb6d4:	2762      	movs	r7, #98	; 0x62
   bb6d6:	601c      	str	r4, [r3, #0]
   bb6d8:	e723      	b.n	bb522 <__gethex+0x12a>
   bb6da:	bf00      	nop
   bb6dc:	000bd4d0 	.word	0x000bd4d0
   bb6e0:	000bd437 	.word	0x000bd437
   bb6e4:	000bd448 	.word	0x000bd448
   bb6e8:	1e71      	subs	r1, r6, #1
   bb6ea:	4620      	mov	r0, r4
   bb6ec:	f000 fe42 	bl	bc374 <__any_on>
   bb6f0:	2800      	cmp	r0, #0
   bb6f2:	d1e6      	bne.n	bb6c2 <__gethex+0x2ca>
   bb6f4:	ee18 0a10 	vmov	r0, s16
   bb6f8:	4621      	mov	r1, r4
   bb6fa:	f000 f9db 	bl	bbab4 <_Bfree>
   bb6fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb700:	2300      	movs	r3, #0
   bb702:	6013      	str	r3, [r2, #0]
   bb704:	2750      	movs	r7, #80	; 0x50
   bb706:	e70c      	b.n	bb522 <__gethex+0x12a>
   bb708:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb70a:	2b00      	cmp	r3, #0
   bb70c:	d1f2      	bne.n	bb6f4 <__gethex+0x2fc>
   bb70e:	e7d8      	b.n	bb6c2 <__gethex+0x2ca>
   bb710:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb712:	2b00      	cmp	r3, #0
   bb714:	d1d5      	bne.n	bb6c2 <__gethex+0x2ca>
   bb716:	e7ed      	b.n	bb6f4 <__gethex+0x2fc>
   bb718:	1e6f      	subs	r7, r5, #1
   bb71a:	f1ba 0f00 	cmp.w	sl, #0
   bb71e:	d131      	bne.n	bb784 <__gethex+0x38c>
   bb720:	b127      	cbz	r7, bb72c <__gethex+0x334>
   bb722:	4639      	mov	r1, r7
   bb724:	4620      	mov	r0, r4
   bb726:	f000 fe25 	bl	bc374 <__any_on>
   bb72a:	4682      	mov	sl, r0
   bb72c:	117b      	asrs	r3, r7, #5
   bb72e:	2101      	movs	r1, #1
   bb730:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bb734:	f007 071f 	and.w	r7, r7, #31
   bb738:	fa01 f707 	lsl.w	r7, r1, r7
   bb73c:	421f      	tst	r7, r3
   bb73e:	4629      	mov	r1, r5
   bb740:	4620      	mov	r0, r4
   bb742:	bf18      	it	ne
   bb744:	f04a 0a02 	orrne.w	sl, sl, #2
   bb748:	1b76      	subs	r6, r6, r5
   bb74a:	f7ff fded 	bl	bb328 <rshift>
   bb74e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bb752:	2702      	movs	r7, #2
   bb754:	f1ba 0f00 	cmp.w	sl, #0
   bb758:	d048      	beq.n	bb7ec <__gethex+0x3f4>
   bb75a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bb75e:	2b02      	cmp	r3, #2
   bb760:	d015      	beq.n	bb78e <__gethex+0x396>
   bb762:	2b03      	cmp	r3, #3
   bb764:	d017      	beq.n	bb796 <__gethex+0x39e>
   bb766:	2b01      	cmp	r3, #1
   bb768:	d109      	bne.n	bb77e <__gethex+0x386>
   bb76a:	f01a 0f02 	tst.w	sl, #2
   bb76e:	d006      	beq.n	bb77e <__gethex+0x386>
   bb770:	f8d9 0000 	ldr.w	r0, [r9]
   bb774:	ea4a 0a00 	orr.w	sl, sl, r0
   bb778:	f01a 0f01 	tst.w	sl, #1
   bb77c:	d10e      	bne.n	bb79c <__gethex+0x3a4>
   bb77e:	f047 0710 	orr.w	r7, r7, #16
   bb782:	e033      	b.n	bb7ec <__gethex+0x3f4>
   bb784:	f04f 0a01 	mov.w	sl, #1
   bb788:	e7d0      	b.n	bb72c <__gethex+0x334>
   bb78a:	2701      	movs	r7, #1
   bb78c:	e7e2      	b.n	bb754 <__gethex+0x35c>
   bb78e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb790:	f1c3 0301 	rsb	r3, r3, #1
   bb794:	9315      	str	r3, [sp, #84]	; 0x54
   bb796:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb798:	2b00      	cmp	r3, #0
   bb79a:	d0f0      	beq.n	bb77e <__gethex+0x386>
   bb79c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bb7a0:	f104 0314 	add.w	r3, r4, #20
   bb7a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bb7a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bb7ac:	f04f 0c00 	mov.w	ip, #0
   bb7b0:	4618      	mov	r0, r3
   bb7b2:	f853 2b04 	ldr.w	r2, [r3], #4
   bb7b6:	f1b2 3fff 	cmp.w	r2, #4294967295
   bb7ba:	d01c      	beq.n	bb7f6 <__gethex+0x3fe>
   bb7bc:	3201      	adds	r2, #1
   bb7be:	6002      	str	r2, [r0, #0]
   bb7c0:	2f02      	cmp	r7, #2
   bb7c2:	f104 0314 	add.w	r3, r4, #20
   bb7c6:	d13f      	bne.n	bb848 <__gethex+0x450>
   bb7c8:	f8d8 2000 	ldr.w	r2, [r8]
   bb7cc:	3a01      	subs	r2, #1
   bb7ce:	42b2      	cmp	r2, r6
   bb7d0:	d10a      	bne.n	bb7e8 <__gethex+0x3f0>
   bb7d2:	1171      	asrs	r1, r6, #5
   bb7d4:	2201      	movs	r2, #1
   bb7d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bb7da:	f006 061f 	and.w	r6, r6, #31
   bb7de:	fa02 f606 	lsl.w	r6, r2, r6
   bb7e2:	421e      	tst	r6, r3
   bb7e4:	bf18      	it	ne
   bb7e6:	4617      	movne	r7, r2
   bb7e8:	f047 0720 	orr.w	r7, r7, #32
   bb7ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb7ee:	601c      	str	r4, [r3, #0]
   bb7f0:	9b04      	ldr	r3, [sp, #16]
   bb7f2:	601d      	str	r5, [r3, #0]
   bb7f4:	e695      	b.n	bb522 <__gethex+0x12a>
   bb7f6:	4299      	cmp	r1, r3
   bb7f8:	f843 cc04 	str.w	ip, [r3, #-4]
   bb7fc:	d8d8      	bhi.n	bb7b0 <__gethex+0x3b8>
   bb7fe:	68a3      	ldr	r3, [r4, #8]
   bb800:	459b      	cmp	fp, r3
   bb802:	db19      	blt.n	bb838 <__gethex+0x440>
   bb804:	6861      	ldr	r1, [r4, #4]
   bb806:	ee18 0a10 	vmov	r0, s16
   bb80a:	3101      	adds	r1, #1
   bb80c:	f000 f912 	bl	bba34 <_Balloc>
   bb810:	4681      	mov	r9, r0
   bb812:	b918      	cbnz	r0, bb81c <__gethex+0x424>
   bb814:	4b1a      	ldr	r3, [pc, #104]	; (bb880 <__gethex+0x488>)
   bb816:	4602      	mov	r2, r0
   bb818:	2184      	movs	r1, #132	; 0x84
   bb81a:	e6a8      	b.n	bb56e <__gethex+0x176>
   bb81c:	6922      	ldr	r2, [r4, #16]
   bb81e:	3202      	adds	r2, #2
   bb820:	f104 010c 	add.w	r1, r4, #12
   bb824:	0092      	lsls	r2, r2, #2
   bb826:	300c      	adds	r0, #12
   bb828:	f7fe fd29 	bl	ba27e <memcpy>
   bb82c:	4621      	mov	r1, r4
   bb82e:	ee18 0a10 	vmov	r0, s16
   bb832:	f000 f93f 	bl	bbab4 <_Bfree>
   bb836:	464c      	mov	r4, r9
   bb838:	6923      	ldr	r3, [r4, #16]
   bb83a:	1c5a      	adds	r2, r3, #1
   bb83c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bb840:	6122      	str	r2, [r4, #16]
   bb842:	2201      	movs	r2, #1
   bb844:	615a      	str	r2, [r3, #20]
   bb846:	e7bb      	b.n	bb7c0 <__gethex+0x3c8>
   bb848:	6922      	ldr	r2, [r4, #16]
   bb84a:	455a      	cmp	r2, fp
   bb84c:	dd0b      	ble.n	bb866 <__gethex+0x46e>
   bb84e:	2101      	movs	r1, #1
   bb850:	4620      	mov	r0, r4
   bb852:	f7ff fd69 	bl	bb328 <rshift>
   bb856:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bb85a:	3501      	adds	r5, #1
   bb85c:	42ab      	cmp	r3, r5
   bb85e:	f6ff aed0 	blt.w	bb602 <__gethex+0x20a>
   bb862:	2701      	movs	r7, #1
   bb864:	e7c0      	b.n	bb7e8 <__gethex+0x3f0>
   bb866:	f016 061f 	ands.w	r6, r6, #31
   bb86a:	d0fa      	beq.n	bb862 <__gethex+0x46a>
   bb86c:	4453      	add	r3, sl
   bb86e:	f1c6 0620 	rsb	r6, r6, #32
   bb872:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bb876:	f000 f9cf 	bl	bbc18 <__hi0bits>
   bb87a:	42b0      	cmp	r0, r6
   bb87c:	dbe7      	blt.n	bb84e <__gethex+0x456>
   bb87e:	e7f0      	b.n	bb862 <__gethex+0x46a>
   bb880:	000bd437 	.word	0x000bd437

000bb884 <L_shift>:
   bb884:	f1c2 0208 	rsb	r2, r2, #8
   bb888:	0092      	lsls	r2, r2, #2
   bb88a:	b570      	push	{r4, r5, r6, lr}
   bb88c:	f1c2 0620 	rsb	r6, r2, #32
   bb890:	6843      	ldr	r3, [r0, #4]
   bb892:	6804      	ldr	r4, [r0, #0]
   bb894:	fa03 f506 	lsl.w	r5, r3, r6
   bb898:	432c      	orrs	r4, r5
   bb89a:	40d3      	lsrs	r3, r2
   bb89c:	6004      	str	r4, [r0, #0]
   bb89e:	f840 3f04 	str.w	r3, [r0, #4]!
   bb8a2:	4288      	cmp	r0, r1
   bb8a4:	d3f4      	bcc.n	bb890 <L_shift+0xc>
   bb8a6:	bd70      	pop	{r4, r5, r6, pc}

000bb8a8 <__match>:
   bb8a8:	b530      	push	{r4, r5, lr}
   bb8aa:	6803      	ldr	r3, [r0, #0]
   bb8ac:	3301      	adds	r3, #1
   bb8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb8b2:	b914      	cbnz	r4, bb8ba <__match+0x12>
   bb8b4:	6003      	str	r3, [r0, #0]
   bb8b6:	2001      	movs	r0, #1
   bb8b8:	bd30      	pop	{r4, r5, pc}
   bb8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb8be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bb8c2:	2d19      	cmp	r5, #25
   bb8c4:	bf98      	it	ls
   bb8c6:	3220      	addls	r2, #32
   bb8c8:	42a2      	cmp	r2, r4
   bb8ca:	d0f0      	beq.n	bb8ae <__match+0x6>
   bb8cc:	2000      	movs	r0, #0
   bb8ce:	e7f3      	b.n	bb8b8 <__match+0x10>

000bb8d0 <__hexnan>:
   bb8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb8d4:	680b      	ldr	r3, [r1, #0]
   bb8d6:	115e      	asrs	r6, r3, #5
   bb8d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bb8dc:	f013 031f 	ands.w	r3, r3, #31
   bb8e0:	b087      	sub	sp, #28
   bb8e2:	bf18      	it	ne
   bb8e4:	3604      	addne	r6, #4
   bb8e6:	2500      	movs	r5, #0
   bb8e8:	1f37      	subs	r7, r6, #4
   bb8ea:	4690      	mov	r8, r2
   bb8ec:	6802      	ldr	r2, [r0, #0]
   bb8ee:	9301      	str	r3, [sp, #4]
   bb8f0:	4682      	mov	sl, r0
   bb8f2:	f846 5c04 	str.w	r5, [r6, #-4]
   bb8f6:	46b9      	mov	r9, r7
   bb8f8:	463c      	mov	r4, r7
   bb8fa:	9502      	str	r5, [sp, #8]
   bb8fc:	46ab      	mov	fp, r5
   bb8fe:	7851      	ldrb	r1, [r2, #1]
   bb900:	1c53      	adds	r3, r2, #1
   bb902:	9303      	str	r3, [sp, #12]
   bb904:	b341      	cbz	r1, bb958 <__hexnan+0x88>
   bb906:	4608      	mov	r0, r1
   bb908:	9205      	str	r2, [sp, #20]
   bb90a:	9104      	str	r1, [sp, #16]
   bb90c:	f7ff fd5e 	bl	bb3cc <__hexdig_fun>
   bb910:	2800      	cmp	r0, #0
   bb912:	d14f      	bne.n	bb9b4 <__hexnan+0xe4>
   bb914:	9904      	ldr	r1, [sp, #16]
   bb916:	9a05      	ldr	r2, [sp, #20]
   bb918:	2920      	cmp	r1, #32
   bb91a:	d818      	bhi.n	bb94e <__hexnan+0x7e>
   bb91c:	9b02      	ldr	r3, [sp, #8]
   bb91e:	459b      	cmp	fp, r3
   bb920:	dd13      	ble.n	bb94a <__hexnan+0x7a>
   bb922:	454c      	cmp	r4, r9
   bb924:	d206      	bcs.n	bb934 <__hexnan+0x64>
   bb926:	2d07      	cmp	r5, #7
   bb928:	dc04      	bgt.n	bb934 <__hexnan+0x64>
   bb92a:	462a      	mov	r2, r5
   bb92c:	4649      	mov	r1, r9
   bb92e:	4620      	mov	r0, r4
   bb930:	f7ff ffa8 	bl	bb884 <L_shift>
   bb934:	4544      	cmp	r4, r8
   bb936:	d950      	bls.n	bb9da <__hexnan+0x10a>
   bb938:	2300      	movs	r3, #0
   bb93a:	f1a4 0904 	sub.w	r9, r4, #4
   bb93e:	f844 3c04 	str.w	r3, [r4, #-4]
   bb942:	f8cd b008 	str.w	fp, [sp, #8]
   bb946:	464c      	mov	r4, r9
   bb948:	461d      	mov	r5, r3
   bb94a:	9a03      	ldr	r2, [sp, #12]
   bb94c:	e7d7      	b.n	bb8fe <__hexnan+0x2e>
   bb94e:	2929      	cmp	r1, #41	; 0x29
   bb950:	d156      	bne.n	bba00 <__hexnan+0x130>
   bb952:	3202      	adds	r2, #2
   bb954:	f8ca 2000 	str.w	r2, [sl]
   bb958:	f1bb 0f00 	cmp.w	fp, #0
   bb95c:	d050      	beq.n	bba00 <__hexnan+0x130>
   bb95e:	454c      	cmp	r4, r9
   bb960:	d206      	bcs.n	bb970 <__hexnan+0xa0>
   bb962:	2d07      	cmp	r5, #7
   bb964:	dc04      	bgt.n	bb970 <__hexnan+0xa0>
   bb966:	462a      	mov	r2, r5
   bb968:	4649      	mov	r1, r9
   bb96a:	4620      	mov	r0, r4
   bb96c:	f7ff ff8a 	bl	bb884 <L_shift>
   bb970:	4544      	cmp	r4, r8
   bb972:	d934      	bls.n	bb9de <__hexnan+0x10e>
   bb974:	f1a8 0204 	sub.w	r2, r8, #4
   bb978:	4623      	mov	r3, r4
   bb97a:	f853 1b04 	ldr.w	r1, [r3], #4
   bb97e:	f842 1f04 	str.w	r1, [r2, #4]!
   bb982:	429f      	cmp	r7, r3
   bb984:	d2f9      	bcs.n	bb97a <__hexnan+0xaa>
   bb986:	1b3b      	subs	r3, r7, r4
   bb988:	f023 0303 	bic.w	r3, r3, #3
   bb98c:	3304      	adds	r3, #4
   bb98e:	3401      	adds	r4, #1
   bb990:	3e03      	subs	r6, #3
   bb992:	42b4      	cmp	r4, r6
   bb994:	bf88      	it	hi
   bb996:	2304      	movhi	r3, #4
   bb998:	4443      	add	r3, r8
   bb99a:	2200      	movs	r2, #0
   bb99c:	f843 2b04 	str.w	r2, [r3], #4
   bb9a0:	429f      	cmp	r7, r3
   bb9a2:	d2fb      	bcs.n	bb99c <__hexnan+0xcc>
   bb9a4:	683b      	ldr	r3, [r7, #0]
   bb9a6:	b91b      	cbnz	r3, bb9b0 <__hexnan+0xe0>
   bb9a8:	4547      	cmp	r7, r8
   bb9aa:	d127      	bne.n	bb9fc <__hexnan+0x12c>
   bb9ac:	2301      	movs	r3, #1
   bb9ae:	603b      	str	r3, [r7, #0]
   bb9b0:	2005      	movs	r0, #5
   bb9b2:	e026      	b.n	bba02 <__hexnan+0x132>
   bb9b4:	3501      	adds	r5, #1
   bb9b6:	2d08      	cmp	r5, #8
   bb9b8:	f10b 0b01 	add.w	fp, fp, #1
   bb9bc:	dd06      	ble.n	bb9cc <__hexnan+0xfc>
   bb9be:	4544      	cmp	r4, r8
   bb9c0:	d9c3      	bls.n	bb94a <__hexnan+0x7a>
   bb9c2:	2300      	movs	r3, #0
   bb9c4:	f844 3c04 	str.w	r3, [r4, #-4]
   bb9c8:	2501      	movs	r5, #1
   bb9ca:	3c04      	subs	r4, #4
   bb9cc:	6822      	ldr	r2, [r4, #0]
   bb9ce:	f000 000f 	and.w	r0, r0, #15
   bb9d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bb9d6:	6022      	str	r2, [r4, #0]
   bb9d8:	e7b7      	b.n	bb94a <__hexnan+0x7a>
   bb9da:	2508      	movs	r5, #8
   bb9dc:	e7b5      	b.n	bb94a <__hexnan+0x7a>
   bb9de:	9b01      	ldr	r3, [sp, #4]
   bb9e0:	2b00      	cmp	r3, #0
   bb9e2:	d0df      	beq.n	bb9a4 <__hexnan+0xd4>
   bb9e4:	f04f 32ff 	mov.w	r2, #4294967295
   bb9e8:	f1c3 0320 	rsb	r3, r3, #32
   bb9ec:	fa22 f303 	lsr.w	r3, r2, r3
   bb9f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bb9f4:	401a      	ands	r2, r3
   bb9f6:	f846 2c04 	str.w	r2, [r6, #-4]
   bb9fa:	e7d3      	b.n	bb9a4 <__hexnan+0xd4>
   bb9fc:	3f04      	subs	r7, #4
   bb9fe:	e7d1      	b.n	bb9a4 <__hexnan+0xd4>
   bba00:	2004      	movs	r0, #4
   bba02:	b007      	add	sp, #28
   bba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bba08 <__retarget_lock_acquire_recursive>:
   bba08:	4770      	bx	lr

000bba0a <__retarget_lock_release>:
   bba0a:	4770      	bx	lr

000bba0c <__retarget_lock_release_recursive>:
   bba0c:	4770      	bx	lr

000bba0e <__ascii_mbtowc>:
   bba0e:	b082      	sub	sp, #8
   bba10:	b901      	cbnz	r1, bba14 <__ascii_mbtowc+0x6>
   bba12:	a901      	add	r1, sp, #4
   bba14:	b142      	cbz	r2, bba28 <__ascii_mbtowc+0x1a>
   bba16:	b14b      	cbz	r3, bba2c <__ascii_mbtowc+0x1e>
   bba18:	7813      	ldrb	r3, [r2, #0]
   bba1a:	600b      	str	r3, [r1, #0]
   bba1c:	7812      	ldrb	r2, [r2, #0]
   bba1e:	1e10      	subs	r0, r2, #0
   bba20:	bf18      	it	ne
   bba22:	2001      	movne	r0, #1
   bba24:	b002      	add	sp, #8
   bba26:	4770      	bx	lr
   bba28:	4610      	mov	r0, r2
   bba2a:	e7fb      	b.n	bba24 <__ascii_mbtowc+0x16>
   bba2c:	f06f 0001 	mvn.w	r0, #1
   bba30:	e7f8      	b.n	bba24 <__ascii_mbtowc+0x16>
	...

000bba34 <_Balloc>:
   bba34:	b570      	push	{r4, r5, r6, lr}
   bba36:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bba38:	4604      	mov	r4, r0
   bba3a:	460d      	mov	r5, r1
   bba3c:	b976      	cbnz	r6, bba5c <_Balloc+0x28>
   bba3e:	2010      	movs	r0, #16
   bba40:	f7fa fd88 	bl	b6554 <malloc>
   bba44:	4602      	mov	r2, r0
   bba46:	6260      	str	r0, [r4, #36]	; 0x24
   bba48:	b920      	cbnz	r0, bba54 <_Balloc+0x20>
   bba4a:	4b18      	ldr	r3, [pc, #96]	; (bbaac <_Balloc+0x78>)
   bba4c:	4818      	ldr	r0, [pc, #96]	; (bbab0 <_Balloc+0x7c>)
   bba4e:	2166      	movs	r1, #102	; 0x66
   bba50:	f7fa fdc8 	bl	b65e4 <__assert_func>
   bba54:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bba58:	6006      	str	r6, [r0, #0]
   bba5a:	60c6      	str	r6, [r0, #12]
   bba5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bba5e:	68f3      	ldr	r3, [r6, #12]
   bba60:	b183      	cbz	r3, bba84 <_Balloc+0x50>
   bba62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bba64:	68db      	ldr	r3, [r3, #12]
   bba66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bba6a:	b9b8      	cbnz	r0, bba9c <_Balloc+0x68>
   bba6c:	2101      	movs	r1, #1
   bba6e:	fa01 f605 	lsl.w	r6, r1, r5
   bba72:	1d72      	adds	r2, r6, #5
   bba74:	0092      	lsls	r2, r2, #2
   bba76:	4620      	mov	r0, r4
   bba78:	f000 fc9d 	bl	bc3b6 <_calloc_r>
   bba7c:	b160      	cbz	r0, bba98 <_Balloc+0x64>
   bba7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bba82:	e00e      	b.n	bbaa2 <_Balloc+0x6e>
   bba84:	2221      	movs	r2, #33	; 0x21
   bba86:	2104      	movs	r1, #4
   bba88:	4620      	mov	r0, r4
   bba8a:	f000 fc94 	bl	bc3b6 <_calloc_r>
   bba8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bba90:	60f0      	str	r0, [r6, #12]
   bba92:	68db      	ldr	r3, [r3, #12]
   bba94:	2b00      	cmp	r3, #0
   bba96:	d1e4      	bne.n	bba62 <_Balloc+0x2e>
   bba98:	2000      	movs	r0, #0
   bba9a:	bd70      	pop	{r4, r5, r6, pc}
   bba9c:	6802      	ldr	r2, [r0, #0]
   bba9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bbaa2:	2300      	movs	r3, #0
   bbaa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bbaa8:	e7f7      	b.n	bba9a <_Balloc+0x66>
   bbaaa:	bf00      	nop
   bbaac:	000bd2c6 	.word	0x000bd2c6
   bbab0:	000bd4e4 	.word	0x000bd4e4

000bbab4 <_Bfree>:
   bbab4:	b570      	push	{r4, r5, r6, lr}
   bbab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbab8:	4605      	mov	r5, r0
   bbaba:	460c      	mov	r4, r1
   bbabc:	b976      	cbnz	r6, bbadc <_Bfree+0x28>
   bbabe:	2010      	movs	r0, #16
   bbac0:	f7fa fd48 	bl	b6554 <malloc>
   bbac4:	4602      	mov	r2, r0
   bbac6:	6268      	str	r0, [r5, #36]	; 0x24
   bbac8:	b920      	cbnz	r0, bbad4 <_Bfree+0x20>
   bbaca:	4b09      	ldr	r3, [pc, #36]	; (bbaf0 <_Bfree+0x3c>)
   bbacc:	4809      	ldr	r0, [pc, #36]	; (bbaf4 <_Bfree+0x40>)
   bbace:	218a      	movs	r1, #138	; 0x8a
   bbad0:	f7fa fd88 	bl	b65e4 <__assert_func>
   bbad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbad8:	6006      	str	r6, [r0, #0]
   bbada:	60c6      	str	r6, [r0, #12]
   bbadc:	b13c      	cbz	r4, bbaee <_Bfree+0x3a>
   bbade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bbae0:	6862      	ldr	r2, [r4, #4]
   bbae2:	68db      	ldr	r3, [r3, #12]
   bbae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bbae8:	6021      	str	r1, [r4, #0]
   bbaea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bbaee:	bd70      	pop	{r4, r5, r6, pc}
   bbaf0:	000bd2c6 	.word	0x000bd2c6
   bbaf4:	000bd4e4 	.word	0x000bd4e4

000bbaf8 <__multadd>:
   bbaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbafc:	690d      	ldr	r5, [r1, #16]
   bbafe:	4607      	mov	r7, r0
   bbb00:	460c      	mov	r4, r1
   bbb02:	461e      	mov	r6, r3
   bbb04:	f101 0c14 	add.w	ip, r1, #20
   bbb08:	2000      	movs	r0, #0
   bbb0a:	f8dc 3000 	ldr.w	r3, [ip]
   bbb0e:	b299      	uxth	r1, r3
   bbb10:	fb02 6101 	mla	r1, r2, r1, r6
   bbb14:	0c1e      	lsrs	r6, r3, #16
   bbb16:	0c0b      	lsrs	r3, r1, #16
   bbb18:	fb02 3306 	mla	r3, r2, r6, r3
   bbb1c:	b289      	uxth	r1, r1
   bbb1e:	3001      	adds	r0, #1
   bbb20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bbb24:	4285      	cmp	r5, r0
   bbb26:	f84c 1b04 	str.w	r1, [ip], #4
   bbb2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bbb2e:	dcec      	bgt.n	bbb0a <__multadd+0x12>
   bbb30:	b30e      	cbz	r6, bbb76 <__multadd+0x7e>
   bbb32:	68a3      	ldr	r3, [r4, #8]
   bbb34:	42ab      	cmp	r3, r5
   bbb36:	dc19      	bgt.n	bbb6c <__multadd+0x74>
   bbb38:	6861      	ldr	r1, [r4, #4]
   bbb3a:	4638      	mov	r0, r7
   bbb3c:	3101      	adds	r1, #1
   bbb3e:	f7ff ff79 	bl	bba34 <_Balloc>
   bbb42:	4680      	mov	r8, r0
   bbb44:	b928      	cbnz	r0, bbb52 <__multadd+0x5a>
   bbb46:	4602      	mov	r2, r0
   bbb48:	4b0c      	ldr	r3, [pc, #48]	; (bbb7c <__multadd+0x84>)
   bbb4a:	480d      	ldr	r0, [pc, #52]	; (bbb80 <__multadd+0x88>)
   bbb4c:	21b5      	movs	r1, #181	; 0xb5
   bbb4e:	f7fa fd49 	bl	b65e4 <__assert_func>
   bbb52:	6922      	ldr	r2, [r4, #16]
   bbb54:	3202      	adds	r2, #2
   bbb56:	f104 010c 	add.w	r1, r4, #12
   bbb5a:	0092      	lsls	r2, r2, #2
   bbb5c:	300c      	adds	r0, #12
   bbb5e:	f7fe fb8e 	bl	ba27e <memcpy>
   bbb62:	4621      	mov	r1, r4
   bbb64:	4638      	mov	r0, r7
   bbb66:	f7ff ffa5 	bl	bbab4 <_Bfree>
   bbb6a:	4644      	mov	r4, r8
   bbb6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bbb70:	3501      	adds	r5, #1
   bbb72:	615e      	str	r6, [r3, #20]
   bbb74:	6125      	str	r5, [r4, #16]
   bbb76:	4620      	mov	r0, r4
   bbb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbb7c:	000bd437 	.word	0x000bd437
   bbb80:	000bd4e4 	.word	0x000bd4e4

000bbb84 <__s2b>:
   bbb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbb88:	460c      	mov	r4, r1
   bbb8a:	4615      	mov	r5, r2
   bbb8c:	461f      	mov	r7, r3
   bbb8e:	2209      	movs	r2, #9
   bbb90:	3308      	adds	r3, #8
   bbb92:	4606      	mov	r6, r0
   bbb94:	fb93 f3f2 	sdiv	r3, r3, r2
   bbb98:	2100      	movs	r1, #0
   bbb9a:	2201      	movs	r2, #1
   bbb9c:	429a      	cmp	r2, r3
   bbb9e:	db09      	blt.n	bbbb4 <__s2b+0x30>
   bbba0:	4630      	mov	r0, r6
   bbba2:	f7ff ff47 	bl	bba34 <_Balloc>
   bbba6:	b940      	cbnz	r0, bbbba <__s2b+0x36>
   bbba8:	4602      	mov	r2, r0
   bbbaa:	4b19      	ldr	r3, [pc, #100]	; (bbc10 <__s2b+0x8c>)
   bbbac:	4819      	ldr	r0, [pc, #100]	; (bbc14 <__s2b+0x90>)
   bbbae:	21ce      	movs	r1, #206	; 0xce
   bbbb0:	f7fa fd18 	bl	b65e4 <__assert_func>
   bbbb4:	0052      	lsls	r2, r2, #1
   bbbb6:	3101      	adds	r1, #1
   bbbb8:	e7f0      	b.n	bbb9c <__s2b+0x18>
   bbbba:	9b08      	ldr	r3, [sp, #32]
   bbbbc:	6143      	str	r3, [r0, #20]
   bbbbe:	2d09      	cmp	r5, #9
   bbbc0:	f04f 0301 	mov.w	r3, #1
   bbbc4:	6103      	str	r3, [r0, #16]
   bbbc6:	dd16      	ble.n	bbbf6 <__s2b+0x72>
   bbbc8:	f104 0909 	add.w	r9, r4, #9
   bbbcc:	46c8      	mov	r8, r9
   bbbce:	442c      	add	r4, r5
   bbbd0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bbbd4:	4601      	mov	r1, r0
   bbbd6:	3b30      	subs	r3, #48	; 0x30
   bbbd8:	220a      	movs	r2, #10
   bbbda:	4630      	mov	r0, r6
   bbbdc:	f7ff ff8c 	bl	bbaf8 <__multadd>
   bbbe0:	45a0      	cmp	r8, r4
   bbbe2:	d1f5      	bne.n	bbbd0 <__s2b+0x4c>
   bbbe4:	f1a5 0408 	sub.w	r4, r5, #8
   bbbe8:	444c      	add	r4, r9
   bbbea:	1b2d      	subs	r5, r5, r4
   bbbec:	1963      	adds	r3, r4, r5
   bbbee:	42bb      	cmp	r3, r7
   bbbf0:	db04      	blt.n	bbbfc <__s2b+0x78>
   bbbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbbf6:	340a      	adds	r4, #10
   bbbf8:	2509      	movs	r5, #9
   bbbfa:	e7f6      	b.n	bbbea <__s2b+0x66>
   bbbfc:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbc00:	4601      	mov	r1, r0
   bbc02:	3b30      	subs	r3, #48	; 0x30
   bbc04:	220a      	movs	r2, #10
   bbc06:	4630      	mov	r0, r6
   bbc08:	f7ff ff76 	bl	bbaf8 <__multadd>
   bbc0c:	e7ee      	b.n	bbbec <__s2b+0x68>
   bbc0e:	bf00      	nop
   bbc10:	000bd437 	.word	0x000bd437
   bbc14:	000bd4e4 	.word	0x000bd4e4

000bbc18 <__hi0bits>:
   bbc18:	0c03      	lsrs	r3, r0, #16
   bbc1a:	041b      	lsls	r3, r3, #16
   bbc1c:	b9d3      	cbnz	r3, bbc54 <__hi0bits+0x3c>
   bbc1e:	0400      	lsls	r0, r0, #16
   bbc20:	2310      	movs	r3, #16
   bbc22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bbc26:	bf04      	itt	eq
   bbc28:	0200      	lsleq	r0, r0, #8
   bbc2a:	3308      	addeq	r3, #8
   bbc2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bbc30:	bf04      	itt	eq
   bbc32:	0100      	lsleq	r0, r0, #4
   bbc34:	3304      	addeq	r3, #4
   bbc36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bbc3a:	bf04      	itt	eq
   bbc3c:	0080      	lsleq	r0, r0, #2
   bbc3e:	3302      	addeq	r3, #2
   bbc40:	2800      	cmp	r0, #0
   bbc42:	db05      	blt.n	bbc50 <__hi0bits+0x38>
   bbc44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bbc48:	f103 0301 	add.w	r3, r3, #1
   bbc4c:	bf08      	it	eq
   bbc4e:	2320      	moveq	r3, #32
   bbc50:	4618      	mov	r0, r3
   bbc52:	4770      	bx	lr
   bbc54:	2300      	movs	r3, #0
   bbc56:	e7e4      	b.n	bbc22 <__hi0bits+0xa>

000bbc58 <__lo0bits>:
   bbc58:	6803      	ldr	r3, [r0, #0]
   bbc5a:	f013 0207 	ands.w	r2, r3, #7
   bbc5e:	4601      	mov	r1, r0
   bbc60:	d00b      	beq.n	bbc7a <__lo0bits+0x22>
   bbc62:	07da      	lsls	r2, r3, #31
   bbc64:	d423      	bmi.n	bbcae <__lo0bits+0x56>
   bbc66:	0798      	lsls	r0, r3, #30
   bbc68:	bf49      	itett	mi
   bbc6a:	085b      	lsrmi	r3, r3, #1
   bbc6c:	089b      	lsrpl	r3, r3, #2
   bbc6e:	2001      	movmi	r0, #1
   bbc70:	600b      	strmi	r3, [r1, #0]
   bbc72:	bf5c      	itt	pl
   bbc74:	600b      	strpl	r3, [r1, #0]
   bbc76:	2002      	movpl	r0, #2
   bbc78:	4770      	bx	lr
   bbc7a:	b298      	uxth	r0, r3
   bbc7c:	b9a8      	cbnz	r0, bbcaa <__lo0bits+0x52>
   bbc7e:	0c1b      	lsrs	r3, r3, #16
   bbc80:	2010      	movs	r0, #16
   bbc82:	b2da      	uxtb	r2, r3
   bbc84:	b90a      	cbnz	r2, bbc8a <__lo0bits+0x32>
   bbc86:	3008      	adds	r0, #8
   bbc88:	0a1b      	lsrs	r3, r3, #8
   bbc8a:	071a      	lsls	r2, r3, #28
   bbc8c:	bf04      	itt	eq
   bbc8e:	091b      	lsreq	r3, r3, #4
   bbc90:	3004      	addeq	r0, #4
   bbc92:	079a      	lsls	r2, r3, #30
   bbc94:	bf04      	itt	eq
   bbc96:	089b      	lsreq	r3, r3, #2
   bbc98:	3002      	addeq	r0, #2
   bbc9a:	07da      	lsls	r2, r3, #31
   bbc9c:	d403      	bmi.n	bbca6 <__lo0bits+0x4e>
   bbc9e:	085b      	lsrs	r3, r3, #1
   bbca0:	f100 0001 	add.w	r0, r0, #1
   bbca4:	d005      	beq.n	bbcb2 <__lo0bits+0x5a>
   bbca6:	600b      	str	r3, [r1, #0]
   bbca8:	4770      	bx	lr
   bbcaa:	4610      	mov	r0, r2
   bbcac:	e7e9      	b.n	bbc82 <__lo0bits+0x2a>
   bbcae:	2000      	movs	r0, #0
   bbcb0:	4770      	bx	lr
   bbcb2:	2020      	movs	r0, #32
   bbcb4:	4770      	bx	lr
	...

000bbcb8 <__i2b>:
   bbcb8:	b510      	push	{r4, lr}
   bbcba:	460c      	mov	r4, r1
   bbcbc:	2101      	movs	r1, #1
   bbcbe:	f7ff feb9 	bl	bba34 <_Balloc>
   bbcc2:	4602      	mov	r2, r0
   bbcc4:	b928      	cbnz	r0, bbcd2 <__i2b+0x1a>
   bbcc6:	4b05      	ldr	r3, [pc, #20]	; (bbcdc <__i2b+0x24>)
   bbcc8:	4805      	ldr	r0, [pc, #20]	; (bbce0 <__i2b+0x28>)
   bbcca:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bbcce:	f7fa fc89 	bl	b65e4 <__assert_func>
   bbcd2:	2301      	movs	r3, #1
   bbcd4:	6144      	str	r4, [r0, #20]
   bbcd6:	6103      	str	r3, [r0, #16]
   bbcd8:	bd10      	pop	{r4, pc}
   bbcda:	bf00      	nop
   bbcdc:	000bd437 	.word	0x000bd437
   bbce0:	000bd4e4 	.word	0x000bd4e4

000bbce4 <__multiply>:
   bbce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbce8:	4691      	mov	r9, r2
   bbcea:	690a      	ldr	r2, [r1, #16]
   bbcec:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bbcf0:	429a      	cmp	r2, r3
   bbcf2:	bfb8      	it	lt
   bbcf4:	460b      	movlt	r3, r1
   bbcf6:	460c      	mov	r4, r1
   bbcf8:	bfbc      	itt	lt
   bbcfa:	464c      	movlt	r4, r9
   bbcfc:	4699      	movlt	r9, r3
   bbcfe:	6927      	ldr	r7, [r4, #16]
   bbd00:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bbd04:	68a3      	ldr	r3, [r4, #8]
   bbd06:	6861      	ldr	r1, [r4, #4]
   bbd08:	eb07 060a 	add.w	r6, r7, sl
   bbd0c:	42b3      	cmp	r3, r6
   bbd0e:	b085      	sub	sp, #20
   bbd10:	bfb8      	it	lt
   bbd12:	3101      	addlt	r1, #1
   bbd14:	f7ff fe8e 	bl	bba34 <_Balloc>
   bbd18:	b930      	cbnz	r0, bbd28 <__multiply+0x44>
   bbd1a:	4602      	mov	r2, r0
   bbd1c:	4b44      	ldr	r3, [pc, #272]	; (bbe30 <__multiply+0x14c>)
   bbd1e:	4845      	ldr	r0, [pc, #276]	; (bbe34 <__multiply+0x150>)
   bbd20:	f240 115d 	movw	r1, #349	; 0x15d
   bbd24:	f7fa fc5e 	bl	b65e4 <__assert_func>
   bbd28:	f100 0514 	add.w	r5, r0, #20
   bbd2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bbd30:	462b      	mov	r3, r5
   bbd32:	2200      	movs	r2, #0
   bbd34:	4543      	cmp	r3, r8
   bbd36:	d321      	bcc.n	bbd7c <__multiply+0x98>
   bbd38:	f104 0314 	add.w	r3, r4, #20
   bbd3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bbd40:	f109 0314 	add.w	r3, r9, #20
   bbd44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bbd48:	9202      	str	r2, [sp, #8]
   bbd4a:	1b3a      	subs	r2, r7, r4
   bbd4c:	3a15      	subs	r2, #21
   bbd4e:	f022 0203 	bic.w	r2, r2, #3
   bbd52:	3204      	adds	r2, #4
   bbd54:	f104 0115 	add.w	r1, r4, #21
   bbd58:	428f      	cmp	r7, r1
   bbd5a:	bf38      	it	cc
   bbd5c:	2204      	movcc	r2, #4
   bbd5e:	9201      	str	r2, [sp, #4]
   bbd60:	9a02      	ldr	r2, [sp, #8]
   bbd62:	9303      	str	r3, [sp, #12]
   bbd64:	429a      	cmp	r2, r3
   bbd66:	d80c      	bhi.n	bbd82 <__multiply+0x9e>
   bbd68:	2e00      	cmp	r6, #0
   bbd6a:	dd03      	ble.n	bbd74 <__multiply+0x90>
   bbd6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bbd70:	2b00      	cmp	r3, #0
   bbd72:	d05a      	beq.n	bbe2a <__multiply+0x146>
   bbd74:	6106      	str	r6, [r0, #16]
   bbd76:	b005      	add	sp, #20
   bbd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbd7c:	f843 2b04 	str.w	r2, [r3], #4
   bbd80:	e7d8      	b.n	bbd34 <__multiply+0x50>
   bbd82:	f8b3 a000 	ldrh.w	sl, [r3]
   bbd86:	f1ba 0f00 	cmp.w	sl, #0
   bbd8a:	d024      	beq.n	bbdd6 <__multiply+0xf2>
   bbd8c:	f104 0e14 	add.w	lr, r4, #20
   bbd90:	46a9      	mov	r9, r5
   bbd92:	f04f 0c00 	mov.w	ip, #0
   bbd96:	f85e 2b04 	ldr.w	r2, [lr], #4
   bbd9a:	f8d9 1000 	ldr.w	r1, [r9]
   bbd9e:	fa1f fb82 	uxth.w	fp, r2
   bbda2:	b289      	uxth	r1, r1
   bbda4:	fb0a 110b 	mla	r1, sl, fp, r1
   bbda8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bbdac:	f8d9 2000 	ldr.w	r2, [r9]
   bbdb0:	4461      	add	r1, ip
   bbdb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbdb6:	fb0a c20b 	mla	r2, sl, fp, ip
   bbdba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bbdbe:	b289      	uxth	r1, r1
   bbdc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bbdc4:	4577      	cmp	r7, lr
   bbdc6:	f849 1b04 	str.w	r1, [r9], #4
   bbdca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bbdce:	d8e2      	bhi.n	bbd96 <__multiply+0xb2>
   bbdd0:	9a01      	ldr	r2, [sp, #4]
   bbdd2:	f845 c002 	str.w	ip, [r5, r2]
   bbdd6:	9a03      	ldr	r2, [sp, #12]
   bbdd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bbddc:	3304      	adds	r3, #4
   bbdde:	f1b9 0f00 	cmp.w	r9, #0
   bbde2:	d020      	beq.n	bbe26 <__multiply+0x142>
   bbde4:	6829      	ldr	r1, [r5, #0]
   bbde6:	f104 0c14 	add.w	ip, r4, #20
   bbdea:	46ae      	mov	lr, r5
   bbdec:	f04f 0a00 	mov.w	sl, #0
   bbdf0:	f8bc b000 	ldrh.w	fp, [ip]
   bbdf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bbdf8:	fb09 220b 	mla	r2, r9, fp, r2
   bbdfc:	4492      	add	sl, r2
   bbdfe:	b289      	uxth	r1, r1
   bbe00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bbe04:	f84e 1b04 	str.w	r1, [lr], #4
   bbe08:	f85c 2b04 	ldr.w	r2, [ip], #4
   bbe0c:	f8be 1000 	ldrh.w	r1, [lr]
   bbe10:	0c12      	lsrs	r2, r2, #16
   bbe12:	fb09 1102 	mla	r1, r9, r2, r1
   bbe16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bbe1a:	4567      	cmp	r7, ip
   bbe1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bbe20:	d8e6      	bhi.n	bbdf0 <__multiply+0x10c>
   bbe22:	9a01      	ldr	r2, [sp, #4]
   bbe24:	50a9      	str	r1, [r5, r2]
   bbe26:	3504      	adds	r5, #4
   bbe28:	e79a      	b.n	bbd60 <__multiply+0x7c>
   bbe2a:	3e01      	subs	r6, #1
   bbe2c:	e79c      	b.n	bbd68 <__multiply+0x84>
   bbe2e:	bf00      	nop
   bbe30:	000bd437 	.word	0x000bd437
   bbe34:	000bd4e4 	.word	0x000bd4e4

000bbe38 <__pow5mult>:
   bbe38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbe3c:	4615      	mov	r5, r2
   bbe3e:	f012 0203 	ands.w	r2, r2, #3
   bbe42:	4606      	mov	r6, r0
   bbe44:	460f      	mov	r7, r1
   bbe46:	d007      	beq.n	bbe58 <__pow5mult+0x20>
   bbe48:	4c25      	ldr	r4, [pc, #148]	; (bbee0 <__pow5mult+0xa8>)
   bbe4a:	3a01      	subs	r2, #1
   bbe4c:	2300      	movs	r3, #0
   bbe4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bbe52:	f7ff fe51 	bl	bbaf8 <__multadd>
   bbe56:	4607      	mov	r7, r0
   bbe58:	10ad      	asrs	r5, r5, #2
   bbe5a:	d03d      	beq.n	bbed8 <__pow5mult+0xa0>
   bbe5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bbe5e:	b97c      	cbnz	r4, bbe80 <__pow5mult+0x48>
   bbe60:	2010      	movs	r0, #16
   bbe62:	f7fa fb77 	bl	b6554 <malloc>
   bbe66:	4602      	mov	r2, r0
   bbe68:	6270      	str	r0, [r6, #36]	; 0x24
   bbe6a:	b928      	cbnz	r0, bbe78 <__pow5mult+0x40>
   bbe6c:	4b1d      	ldr	r3, [pc, #116]	; (bbee4 <__pow5mult+0xac>)
   bbe6e:	481e      	ldr	r0, [pc, #120]	; (bbee8 <__pow5mult+0xb0>)
   bbe70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bbe74:	f7fa fbb6 	bl	b65e4 <__assert_func>
   bbe78:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bbe7c:	6004      	str	r4, [r0, #0]
   bbe7e:	60c4      	str	r4, [r0, #12]
   bbe80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bbe84:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bbe88:	b94c      	cbnz	r4, bbe9e <__pow5mult+0x66>
   bbe8a:	f240 2171 	movw	r1, #625	; 0x271
   bbe8e:	4630      	mov	r0, r6
   bbe90:	f7ff ff12 	bl	bbcb8 <__i2b>
   bbe94:	2300      	movs	r3, #0
   bbe96:	f8c8 0008 	str.w	r0, [r8, #8]
   bbe9a:	4604      	mov	r4, r0
   bbe9c:	6003      	str	r3, [r0, #0]
   bbe9e:	f04f 0900 	mov.w	r9, #0
   bbea2:	07eb      	lsls	r3, r5, #31
   bbea4:	d50a      	bpl.n	bbebc <__pow5mult+0x84>
   bbea6:	4639      	mov	r1, r7
   bbea8:	4622      	mov	r2, r4
   bbeaa:	4630      	mov	r0, r6
   bbeac:	f7ff ff1a 	bl	bbce4 <__multiply>
   bbeb0:	4639      	mov	r1, r7
   bbeb2:	4680      	mov	r8, r0
   bbeb4:	4630      	mov	r0, r6
   bbeb6:	f7ff fdfd 	bl	bbab4 <_Bfree>
   bbeba:	4647      	mov	r7, r8
   bbebc:	106d      	asrs	r5, r5, #1
   bbebe:	d00b      	beq.n	bbed8 <__pow5mult+0xa0>
   bbec0:	6820      	ldr	r0, [r4, #0]
   bbec2:	b938      	cbnz	r0, bbed4 <__pow5mult+0x9c>
   bbec4:	4622      	mov	r2, r4
   bbec6:	4621      	mov	r1, r4
   bbec8:	4630      	mov	r0, r6
   bbeca:	f7ff ff0b 	bl	bbce4 <__multiply>
   bbece:	6020      	str	r0, [r4, #0]
   bbed0:	f8c0 9000 	str.w	r9, [r0]
   bbed4:	4604      	mov	r4, r0
   bbed6:	e7e4      	b.n	bbea2 <__pow5mult+0x6a>
   bbed8:	4638      	mov	r0, r7
   bbeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbede:	bf00      	nop
   bbee0:	000bd658 	.word	0x000bd658
   bbee4:	000bd2c6 	.word	0x000bd2c6
   bbee8:	000bd4e4 	.word	0x000bd4e4

000bbeec <__lshift>:
   bbeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbef0:	460c      	mov	r4, r1
   bbef2:	6849      	ldr	r1, [r1, #4]
   bbef4:	6923      	ldr	r3, [r4, #16]
   bbef6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bbefa:	68a3      	ldr	r3, [r4, #8]
   bbefc:	4607      	mov	r7, r0
   bbefe:	4691      	mov	r9, r2
   bbf00:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bbf04:	f108 0601 	add.w	r6, r8, #1
   bbf08:	42b3      	cmp	r3, r6
   bbf0a:	db0b      	blt.n	bbf24 <__lshift+0x38>
   bbf0c:	4638      	mov	r0, r7
   bbf0e:	f7ff fd91 	bl	bba34 <_Balloc>
   bbf12:	4605      	mov	r5, r0
   bbf14:	b948      	cbnz	r0, bbf2a <__lshift+0x3e>
   bbf16:	4602      	mov	r2, r0
   bbf18:	4b2a      	ldr	r3, [pc, #168]	; (bbfc4 <__lshift+0xd8>)
   bbf1a:	482b      	ldr	r0, [pc, #172]	; (bbfc8 <__lshift+0xdc>)
   bbf1c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bbf20:	f7fa fb60 	bl	b65e4 <__assert_func>
   bbf24:	3101      	adds	r1, #1
   bbf26:	005b      	lsls	r3, r3, #1
   bbf28:	e7ee      	b.n	bbf08 <__lshift+0x1c>
   bbf2a:	2300      	movs	r3, #0
   bbf2c:	f100 0114 	add.w	r1, r0, #20
   bbf30:	f100 0210 	add.w	r2, r0, #16
   bbf34:	4618      	mov	r0, r3
   bbf36:	4553      	cmp	r3, sl
   bbf38:	db37      	blt.n	bbfaa <__lshift+0xbe>
   bbf3a:	6920      	ldr	r0, [r4, #16]
   bbf3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bbf40:	f104 0314 	add.w	r3, r4, #20
   bbf44:	f019 091f 	ands.w	r9, r9, #31
   bbf48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bbf4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bbf50:	d02f      	beq.n	bbfb2 <__lshift+0xc6>
   bbf52:	f1c9 0e20 	rsb	lr, r9, #32
   bbf56:	468a      	mov	sl, r1
   bbf58:	f04f 0c00 	mov.w	ip, #0
   bbf5c:	681a      	ldr	r2, [r3, #0]
   bbf5e:	fa02 f209 	lsl.w	r2, r2, r9
   bbf62:	ea42 020c 	orr.w	r2, r2, ip
   bbf66:	f84a 2b04 	str.w	r2, [sl], #4
   bbf6a:	f853 2b04 	ldr.w	r2, [r3], #4
   bbf6e:	4298      	cmp	r0, r3
   bbf70:	fa22 fc0e 	lsr.w	ip, r2, lr
   bbf74:	d8f2      	bhi.n	bbf5c <__lshift+0x70>
   bbf76:	1b03      	subs	r3, r0, r4
   bbf78:	3b15      	subs	r3, #21
   bbf7a:	f023 0303 	bic.w	r3, r3, #3
   bbf7e:	3304      	adds	r3, #4
   bbf80:	f104 0215 	add.w	r2, r4, #21
   bbf84:	4290      	cmp	r0, r2
   bbf86:	bf38      	it	cc
   bbf88:	2304      	movcc	r3, #4
   bbf8a:	f841 c003 	str.w	ip, [r1, r3]
   bbf8e:	f1bc 0f00 	cmp.w	ip, #0
   bbf92:	d001      	beq.n	bbf98 <__lshift+0xac>
   bbf94:	f108 0602 	add.w	r6, r8, #2
   bbf98:	3e01      	subs	r6, #1
   bbf9a:	4638      	mov	r0, r7
   bbf9c:	612e      	str	r6, [r5, #16]
   bbf9e:	4621      	mov	r1, r4
   bbfa0:	f7ff fd88 	bl	bbab4 <_Bfree>
   bbfa4:	4628      	mov	r0, r5
   bbfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbfaa:	f842 0f04 	str.w	r0, [r2, #4]!
   bbfae:	3301      	adds	r3, #1
   bbfb0:	e7c1      	b.n	bbf36 <__lshift+0x4a>
   bbfb2:	3904      	subs	r1, #4
   bbfb4:	f853 2b04 	ldr.w	r2, [r3], #4
   bbfb8:	f841 2f04 	str.w	r2, [r1, #4]!
   bbfbc:	4298      	cmp	r0, r3
   bbfbe:	d8f9      	bhi.n	bbfb4 <__lshift+0xc8>
   bbfc0:	e7ea      	b.n	bbf98 <__lshift+0xac>
   bbfc2:	bf00      	nop
   bbfc4:	000bd437 	.word	0x000bd437
   bbfc8:	000bd4e4 	.word	0x000bd4e4

000bbfcc <__mcmp>:
   bbfcc:	b530      	push	{r4, r5, lr}
   bbfce:	6902      	ldr	r2, [r0, #16]
   bbfd0:	690c      	ldr	r4, [r1, #16]
   bbfd2:	1b12      	subs	r2, r2, r4
   bbfd4:	d10e      	bne.n	bbff4 <__mcmp+0x28>
   bbfd6:	f100 0314 	add.w	r3, r0, #20
   bbfda:	3114      	adds	r1, #20
   bbfdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bbfe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bbfe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bbfe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bbfec:	42a5      	cmp	r5, r4
   bbfee:	d003      	beq.n	bbff8 <__mcmp+0x2c>
   bbff0:	d305      	bcc.n	bbffe <__mcmp+0x32>
   bbff2:	2201      	movs	r2, #1
   bbff4:	4610      	mov	r0, r2
   bbff6:	bd30      	pop	{r4, r5, pc}
   bbff8:	4283      	cmp	r3, r0
   bbffa:	d3f3      	bcc.n	bbfe4 <__mcmp+0x18>
   bbffc:	e7fa      	b.n	bbff4 <__mcmp+0x28>
   bbffe:	f04f 32ff 	mov.w	r2, #4294967295
   bc002:	e7f7      	b.n	bbff4 <__mcmp+0x28>

000bc004 <__mdiff>:
   bc004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc008:	460c      	mov	r4, r1
   bc00a:	4606      	mov	r6, r0
   bc00c:	4611      	mov	r1, r2
   bc00e:	4620      	mov	r0, r4
   bc010:	4690      	mov	r8, r2
   bc012:	f7ff ffdb 	bl	bbfcc <__mcmp>
   bc016:	1e05      	subs	r5, r0, #0
   bc018:	d110      	bne.n	bc03c <__mdiff+0x38>
   bc01a:	4629      	mov	r1, r5
   bc01c:	4630      	mov	r0, r6
   bc01e:	f7ff fd09 	bl	bba34 <_Balloc>
   bc022:	b930      	cbnz	r0, bc032 <__mdiff+0x2e>
   bc024:	4b3a      	ldr	r3, [pc, #232]	; (bc110 <__mdiff+0x10c>)
   bc026:	4602      	mov	r2, r0
   bc028:	f240 2132 	movw	r1, #562	; 0x232
   bc02c:	4839      	ldr	r0, [pc, #228]	; (bc114 <__mdiff+0x110>)
   bc02e:	f7fa fad9 	bl	b65e4 <__assert_func>
   bc032:	2301      	movs	r3, #1
   bc034:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc03c:	bfa4      	itt	ge
   bc03e:	4643      	movge	r3, r8
   bc040:	46a0      	movge	r8, r4
   bc042:	4630      	mov	r0, r6
   bc044:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc048:	bfa6      	itte	ge
   bc04a:	461c      	movge	r4, r3
   bc04c:	2500      	movge	r5, #0
   bc04e:	2501      	movlt	r5, #1
   bc050:	f7ff fcf0 	bl	bba34 <_Balloc>
   bc054:	b920      	cbnz	r0, bc060 <__mdiff+0x5c>
   bc056:	4b2e      	ldr	r3, [pc, #184]	; (bc110 <__mdiff+0x10c>)
   bc058:	4602      	mov	r2, r0
   bc05a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc05e:	e7e5      	b.n	bc02c <__mdiff+0x28>
   bc060:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc064:	6926      	ldr	r6, [r4, #16]
   bc066:	60c5      	str	r5, [r0, #12]
   bc068:	f104 0914 	add.w	r9, r4, #20
   bc06c:	f108 0514 	add.w	r5, r8, #20
   bc070:	f100 0e14 	add.w	lr, r0, #20
   bc074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc07c:	f108 0210 	add.w	r2, r8, #16
   bc080:	46f2      	mov	sl, lr
   bc082:	2100      	movs	r1, #0
   bc084:	f859 3b04 	ldr.w	r3, [r9], #4
   bc088:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc08c:	fa1f f883 	uxth.w	r8, r3
   bc090:	fa11 f18b 	uxtah	r1, r1, fp
   bc094:	0c1b      	lsrs	r3, r3, #16
   bc096:	eba1 0808 	sub.w	r8, r1, r8
   bc09a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc09e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc0a2:	fa1f f888 	uxth.w	r8, r8
   bc0a6:	1419      	asrs	r1, r3, #16
   bc0a8:	454e      	cmp	r6, r9
   bc0aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc0ae:	f84a 3b04 	str.w	r3, [sl], #4
   bc0b2:	d8e7      	bhi.n	bc084 <__mdiff+0x80>
   bc0b4:	1b33      	subs	r3, r6, r4
   bc0b6:	3b15      	subs	r3, #21
   bc0b8:	f023 0303 	bic.w	r3, r3, #3
   bc0bc:	3304      	adds	r3, #4
   bc0be:	3415      	adds	r4, #21
   bc0c0:	42a6      	cmp	r6, r4
   bc0c2:	bf38      	it	cc
   bc0c4:	2304      	movcc	r3, #4
   bc0c6:	441d      	add	r5, r3
   bc0c8:	4473      	add	r3, lr
   bc0ca:	469e      	mov	lr, r3
   bc0cc:	462e      	mov	r6, r5
   bc0ce:	4566      	cmp	r6, ip
   bc0d0:	d30e      	bcc.n	bc0f0 <__mdiff+0xec>
   bc0d2:	f10c 0203 	add.w	r2, ip, #3
   bc0d6:	1b52      	subs	r2, r2, r5
   bc0d8:	f022 0203 	bic.w	r2, r2, #3
   bc0dc:	3d03      	subs	r5, #3
   bc0de:	45ac      	cmp	ip, r5
   bc0e0:	bf38      	it	cc
   bc0e2:	2200      	movcc	r2, #0
   bc0e4:	441a      	add	r2, r3
   bc0e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc0ea:	b17b      	cbz	r3, bc10c <__mdiff+0x108>
   bc0ec:	6107      	str	r7, [r0, #16]
   bc0ee:	e7a3      	b.n	bc038 <__mdiff+0x34>
   bc0f0:	f856 8b04 	ldr.w	r8, [r6], #4
   bc0f4:	fa11 f288 	uxtah	r2, r1, r8
   bc0f8:	1414      	asrs	r4, r2, #16
   bc0fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc0fe:	b292      	uxth	r2, r2
   bc100:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc104:	f84e 2b04 	str.w	r2, [lr], #4
   bc108:	1421      	asrs	r1, r4, #16
   bc10a:	e7e0      	b.n	bc0ce <__mdiff+0xca>
   bc10c:	3f01      	subs	r7, #1
   bc10e:	e7ea      	b.n	bc0e6 <__mdiff+0xe2>
   bc110:	000bd437 	.word	0x000bd437
   bc114:	000bd4e4 	.word	0x000bd4e4

000bc118 <__ulp>:
   bc118:	b082      	sub	sp, #8
   bc11a:	ed8d 0b00 	vstr	d0, [sp]
   bc11e:	9b01      	ldr	r3, [sp, #4]
   bc120:	4912      	ldr	r1, [pc, #72]	; (bc16c <__ulp+0x54>)
   bc122:	4019      	ands	r1, r3
   bc124:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc128:	2900      	cmp	r1, #0
   bc12a:	dd05      	ble.n	bc138 <__ulp+0x20>
   bc12c:	2200      	movs	r2, #0
   bc12e:	460b      	mov	r3, r1
   bc130:	ec43 2b10 	vmov	d0, r2, r3
   bc134:	b002      	add	sp, #8
   bc136:	4770      	bx	lr
   bc138:	4249      	negs	r1, r1
   bc13a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc13e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc142:	f04f 0200 	mov.w	r2, #0
   bc146:	f04f 0300 	mov.w	r3, #0
   bc14a:	da04      	bge.n	bc156 <__ulp+0x3e>
   bc14c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc150:	fa41 f300 	asr.w	r3, r1, r0
   bc154:	e7ec      	b.n	bc130 <__ulp+0x18>
   bc156:	f1a0 0114 	sub.w	r1, r0, #20
   bc15a:	291e      	cmp	r1, #30
   bc15c:	bfda      	itte	le
   bc15e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc162:	fa20 f101 	lsrle.w	r1, r0, r1
   bc166:	2101      	movgt	r1, #1
   bc168:	460a      	mov	r2, r1
   bc16a:	e7e1      	b.n	bc130 <__ulp+0x18>
   bc16c:	7ff00000 	.word	0x7ff00000

000bc170 <__b2d>:
   bc170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc172:	6905      	ldr	r5, [r0, #16]
   bc174:	f100 0714 	add.w	r7, r0, #20
   bc178:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc17c:	1f2e      	subs	r6, r5, #4
   bc17e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc182:	4620      	mov	r0, r4
   bc184:	f7ff fd48 	bl	bbc18 <__hi0bits>
   bc188:	f1c0 0320 	rsb	r3, r0, #32
   bc18c:	280a      	cmp	r0, #10
   bc18e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc20c <__b2d+0x9c>
   bc192:	600b      	str	r3, [r1, #0]
   bc194:	dc14      	bgt.n	bc1c0 <__b2d+0x50>
   bc196:	f1c0 0e0b 	rsb	lr, r0, #11
   bc19a:	fa24 f10e 	lsr.w	r1, r4, lr
   bc19e:	42b7      	cmp	r7, r6
   bc1a0:	ea41 030c 	orr.w	r3, r1, ip
   bc1a4:	bf34      	ite	cc
   bc1a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc1aa:	2100      	movcs	r1, #0
   bc1ac:	3015      	adds	r0, #21
   bc1ae:	fa04 f000 	lsl.w	r0, r4, r0
   bc1b2:	fa21 f10e 	lsr.w	r1, r1, lr
   bc1b6:	ea40 0201 	orr.w	r2, r0, r1
   bc1ba:	ec43 2b10 	vmov	d0, r2, r3
   bc1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc1c0:	42b7      	cmp	r7, r6
   bc1c2:	bf3a      	itte	cc
   bc1c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc1c8:	f1a5 0608 	subcc.w	r6, r5, #8
   bc1cc:	2100      	movcs	r1, #0
   bc1ce:	380b      	subs	r0, #11
   bc1d0:	d017      	beq.n	bc202 <__b2d+0x92>
   bc1d2:	f1c0 0c20 	rsb	ip, r0, #32
   bc1d6:	fa04 f500 	lsl.w	r5, r4, r0
   bc1da:	42be      	cmp	r6, r7
   bc1dc:	fa21 f40c 	lsr.w	r4, r1, ip
   bc1e0:	ea45 0504 	orr.w	r5, r5, r4
   bc1e4:	bf8c      	ite	hi
   bc1e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc1ea:	2400      	movls	r4, #0
   bc1ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc1f0:	fa01 f000 	lsl.w	r0, r1, r0
   bc1f4:	fa24 f40c 	lsr.w	r4, r4, ip
   bc1f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc1fc:	ea40 0204 	orr.w	r2, r0, r4
   bc200:	e7db      	b.n	bc1ba <__b2d+0x4a>
   bc202:	ea44 030c 	orr.w	r3, r4, ip
   bc206:	460a      	mov	r2, r1
   bc208:	e7d7      	b.n	bc1ba <__b2d+0x4a>
   bc20a:	bf00      	nop
   bc20c:	3ff00000 	.word	0x3ff00000

000bc210 <__d2b>:
   bc210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc214:	4689      	mov	r9, r1
   bc216:	2101      	movs	r1, #1
   bc218:	ec57 6b10 	vmov	r6, r7, d0
   bc21c:	4690      	mov	r8, r2
   bc21e:	f7ff fc09 	bl	bba34 <_Balloc>
   bc222:	4604      	mov	r4, r0
   bc224:	b930      	cbnz	r0, bc234 <__d2b+0x24>
   bc226:	4602      	mov	r2, r0
   bc228:	4b25      	ldr	r3, [pc, #148]	; (bc2c0 <__d2b+0xb0>)
   bc22a:	4826      	ldr	r0, [pc, #152]	; (bc2c4 <__d2b+0xb4>)
   bc22c:	f240 310a 	movw	r1, #778	; 0x30a
   bc230:	f7fa f9d8 	bl	b65e4 <__assert_func>
   bc234:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc238:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc23c:	bb35      	cbnz	r5, bc28c <__d2b+0x7c>
   bc23e:	2e00      	cmp	r6, #0
   bc240:	9301      	str	r3, [sp, #4]
   bc242:	d028      	beq.n	bc296 <__d2b+0x86>
   bc244:	4668      	mov	r0, sp
   bc246:	9600      	str	r6, [sp, #0]
   bc248:	f7ff fd06 	bl	bbc58 <__lo0bits>
   bc24c:	9900      	ldr	r1, [sp, #0]
   bc24e:	b300      	cbz	r0, bc292 <__d2b+0x82>
   bc250:	9a01      	ldr	r2, [sp, #4]
   bc252:	f1c0 0320 	rsb	r3, r0, #32
   bc256:	fa02 f303 	lsl.w	r3, r2, r3
   bc25a:	430b      	orrs	r3, r1
   bc25c:	40c2      	lsrs	r2, r0
   bc25e:	6163      	str	r3, [r4, #20]
   bc260:	9201      	str	r2, [sp, #4]
   bc262:	9b01      	ldr	r3, [sp, #4]
   bc264:	61a3      	str	r3, [r4, #24]
   bc266:	2b00      	cmp	r3, #0
   bc268:	bf14      	ite	ne
   bc26a:	2202      	movne	r2, #2
   bc26c:	2201      	moveq	r2, #1
   bc26e:	6122      	str	r2, [r4, #16]
   bc270:	b1d5      	cbz	r5, bc2a8 <__d2b+0x98>
   bc272:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc276:	4405      	add	r5, r0
   bc278:	f8c9 5000 	str.w	r5, [r9]
   bc27c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc280:	f8c8 0000 	str.w	r0, [r8]
   bc284:	4620      	mov	r0, r4
   bc286:	b003      	add	sp, #12
   bc288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc28c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc290:	e7d5      	b.n	bc23e <__d2b+0x2e>
   bc292:	6161      	str	r1, [r4, #20]
   bc294:	e7e5      	b.n	bc262 <__d2b+0x52>
   bc296:	a801      	add	r0, sp, #4
   bc298:	f7ff fcde 	bl	bbc58 <__lo0bits>
   bc29c:	9b01      	ldr	r3, [sp, #4]
   bc29e:	6163      	str	r3, [r4, #20]
   bc2a0:	2201      	movs	r2, #1
   bc2a2:	6122      	str	r2, [r4, #16]
   bc2a4:	3020      	adds	r0, #32
   bc2a6:	e7e3      	b.n	bc270 <__d2b+0x60>
   bc2a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc2ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc2b0:	f8c9 0000 	str.w	r0, [r9]
   bc2b4:	6918      	ldr	r0, [r3, #16]
   bc2b6:	f7ff fcaf 	bl	bbc18 <__hi0bits>
   bc2ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc2be:	e7df      	b.n	bc280 <__d2b+0x70>
   bc2c0:	000bd437 	.word	0x000bd437
   bc2c4:	000bd4e4 	.word	0x000bd4e4

000bc2c8 <__ratio>:
   bc2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc2cc:	4688      	mov	r8, r1
   bc2ce:	4669      	mov	r1, sp
   bc2d0:	4681      	mov	r9, r0
   bc2d2:	f7ff ff4d 	bl	bc170 <__b2d>
   bc2d6:	a901      	add	r1, sp, #4
   bc2d8:	4640      	mov	r0, r8
   bc2da:	ec55 4b10 	vmov	r4, r5, d0
   bc2de:	f7ff ff47 	bl	bc170 <__b2d>
   bc2e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc2e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc2ea:	eba3 0c02 	sub.w	ip, r3, r2
   bc2ee:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc2f2:	1a9b      	subs	r3, r3, r2
   bc2f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc2f8:	ec51 0b10 	vmov	r0, r1, d0
   bc2fc:	2b00      	cmp	r3, #0
   bc2fe:	bfd6      	itet	le
   bc300:	460a      	movle	r2, r1
   bc302:	462a      	movgt	r2, r5
   bc304:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc308:	468b      	mov	fp, r1
   bc30a:	462f      	mov	r7, r5
   bc30c:	bfd4      	ite	le
   bc30e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc312:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc316:	4620      	mov	r0, r4
   bc318:	ee10 2a10 	vmov	r2, s0
   bc31c:	465b      	mov	r3, fp
   bc31e:	4639      	mov	r1, r7
   bc320:	f7fd fdae 	bl	b9e80 <__aeabi_ddiv>
   bc324:	ec41 0b10 	vmov	d0, r0, r1
   bc328:	b003      	add	sp, #12
   bc32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc32e <__copybits>:
   bc32e:	3901      	subs	r1, #1
   bc330:	b570      	push	{r4, r5, r6, lr}
   bc332:	1149      	asrs	r1, r1, #5
   bc334:	6914      	ldr	r4, [r2, #16]
   bc336:	3101      	adds	r1, #1
   bc338:	f102 0314 	add.w	r3, r2, #20
   bc33c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc340:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc344:	1f05      	subs	r5, r0, #4
   bc346:	42a3      	cmp	r3, r4
   bc348:	d30c      	bcc.n	bc364 <__copybits+0x36>
   bc34a:	1aa3      	subs	r3, r4, r2
   bc34c:	3b11      	subs	r3, #17
   bc34e:	f023 0303 	bic.w	r3, r3, #3
   bc352:	3211      	adds	r2, #17
   bc354:	42a2      	cmp	r2, r4
   bc356:	bf88      	it	hi
   bc358:	2300      	movhi	r3, #0
   bc35a:	4418      	add	r0, r3
   bc35c:	2300      	movs	r3, #0
   bc35e:	4288      	cmp	r0, r1
   bc360:	d305      	bcc.n	bc36e <__copybits+0x40>
   bc362:	bd70      	pop	{r4, r5, r6, pc}
   bc364:	f853 6b04 	ldr.w	r6, [r3], #4
   bc368:	f845 6f04 	str.w	r6, [r5, #4]!
   bc36c:	e7eb      	b.n	bc346 <__copybits+0x18>
   bc36e:	f840 3b04 	str.w	r3, [r0], #4
   bc372:	e7f4      	b.n	bc35e <__copybits+0x30>

000bc374 <__any_on>:
   bc374:	f100 0214 	add.w	r2, r0, #20
   bc378:	6900      	ldr	r0, [r0, #16]
   bc37a:	114b      	asrs	r3, r1, #5
   bc37c:	4298      	cmp	r0, r3
   bc37e:	b510      	push	{r4, lr}
   bc380:	db11      	blt.n	bc3a6 <__any_on+0x32>
   bc382:	dd0a      	ble.n	bc39a <__any_on+0x26>
   bc384:	f011 011f 	ands.w	r1, r1, #31
   bc388:	d007      	beq.n	bc39a <__any_on+0x26>
   bc38a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc38e:	fa24 f001 	lsr.w	r0, r4, r1
   bc392:	fa00 f101 	lsl.w	r1, r0, r1
   bc396:	428c      	cmp	r4, r1
   bc398:	d10b      	bne.n	bc3b2 <__any_on+0x3e>
   bc39a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc39e:	4293      	cmp	r3, r2
   bc3a0:	d803      	bhi.n	bc3aa <__any_on+0x36>
   bc3a2:	2000      	movs	r0, #0
   bc3a4:	bd10      	pop	{r4, pc}
   bc3a6:	4603      	mov	r3, r0
   bc3a8:	e7f7      	b.n	bc39a <__any_on+0x26>
   bc3aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc3ae:	2900      	cmp	r1, #0
   bc3b0:	d0f5      	beq.n	bc39e <__any_on+0x2a>
   bc3b2:	2001      	movs	r0, #1
   bc3b4:	e7f6      	b.n	bc3a4 <__any_on+0x30>

000bc3b6 <_calloc_r>:
   bc3b6:	b513      	push	{r0, r1, r4, lr}
   bc3b8:	434a      	muls	r2, r1
   bc3ba:	4611      	mov	r1, r2
   bc3bc:	9201      	str	r2, [sp, #4]
   bc3be:	f7fa f901 	bl	b65c4 <_malloc_r>
   bc3c2:	4604      	mov	r4, r0
   bc3c4:	b118      	cbz	r0, bc3ce <_calloc_r+0x18>
   bc3c6:	9a01      	ldr	r2, [sp, #4]
   bc3c8:	2100      	movs	r1, #0
   bc3ca:	f7fd ff80 	bl	ba2ce <memset>
   bc3ce:	4620      	mov	r0, r4
   bc3d0:	b002      	add	sp, #8
   bc3d2:	bd10      	pop	{r4, pc}
   bc3d4:	0000      	movs	r0, r0
	...

000bc3d8 <nan>:
   bc3d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc3e0 <nan+0x8>
   bc3dc:	4770      	bx	lr
   bc3de:	bf00      	nop
   bc3e0:	00000000 	.word	0x00000000
   bc3e4:	7ff80000 	.word	0x7ff80000

000bc3e8 <__ascii_wctomb>:
   bc3e8:	b149      	cbz	r1, bc3fe <__ascii_wctomb+0x16>
   bc3ea:	2aff      	cmp	r2, #255	; 0xff
   bc3ec:	bf85      	ittet	hi
   bc3ee:	238a      	movhi	r3, #138	; 0x8a
   bc3f0:	6003      	strhi	r3, [r0, #0]
   bc3f2:	700a      	strbls	r2, [r1, #0]
   bc3f4:	f04f 30ff 	movhi.w	r0, #4294967295
   bc3f8:	bf98      	it	ls
   bc3fa:	2001      	movls	r0, #1
   bc3fc:	4770      	bx	lr
   bc3fe:	4608      	mov	r0, r1
   bc400:	4770      	bx	lr
	...

000bc404 <__aeabi_d2lz>:
   bc404:	b538      	push	{r3, r4, r5, lr}
   bc406:	2200      	movs	r2, #0
   bc408:	2300      	movs	r3, #0
   bc40a:	4604      	mov	r4, r0
   bc40c:	460d      	mov	r5, r1
   bc40e:	f7fd fe7f 	bl	ba110 <__aeabi_dcmplt>
   bc412:	b928      	cbnz	r0, bc420 <__aeabi_d2lz+0x1c>
   bc414:	4620      	mov	r0, r4
   bc416:	4629      	mov	r1, r5
   bc418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc41c:	f7fd bef4 	b.w	ba208 <__aeabi_d2ulz>
   bc420:	4620      	mov	r0, r4
   bc422:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bc426:	f7fd feef 	bl	ba208 <__aeabi_d2ulz>
   bc42a:	4240      	negs	r0, r0
   bc42c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc430:	bd38      	pop	{r3, r4, r5, pc}
   bc432:	bf00      	nop

000bc434 <dynalib_user>:
   bc434:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc444:	0000 0000 6e69 7420 6568 6320 6c61 626c     ....in the callb
   bc454:	6361 006b 7270 6369 7365 002f 7325 000a     ack.prices/.%s..
   bc464:	212c 5700 6961 6974 676e 6620 726f 4220     ,!.Waiting for B
   bc474:	454c 6c63 6569 746e 6320 6e6f 656e 7463     LEclient connect
   bc484:	6f69 2e6e 2e2e 6c00 776f 725f 6e61 6567     ion....low_range
   bc494:	685f 756f 5b72 6425 3a5d 2520 0a64 4800     _hour[%d]: %d..H
   bc4a4:	6769 6568 7473 7020 6972 6563 6f20 2066     ighest price of 
   bc4b4:	6874 2065 6164 3a79 2520 0a66 4c00 776f     the day: %f..Low
   bc4c4:	7365 2074 7270 6369 2065 666f 7420 6568     est price of the
   bc4d4:	6420 7961 203a 6625 000a 6f48 7275 2073      day: %f..Hours 
   bc4e4:	666f 7420 6568 6420 7961 7720 6568 6572     of the day where
   bc4f4:	6520 656c 7463 6972 6963 7974 6920 2073      electricity is 
   bc504:	6977 6874 6e69 6120 6363 7065 6574 2064     within accepted 
   bc514:	6172 676e 3a65 000a 3025 6432 7420 206f     range:..%02d to 
   bc524:	3025 6432 000a 227b 6857 5f72 6f74 6164     %02d..{"Whr_toda
   bc534:	2279 5b3a 2c00 7b00 7022 6972 6563 7973     y":[.,.{"pricesy
   bc544:	7365 6574 6472 7961 3a22 005b 2e25 6c32     esterday":[.%.2l
   bc554:	0066 227b 7270 6369 7365 6f74 6164 2279     f.{"pricestoday"
   bc564:	5b3a 7b00 7022 6972 6563 7473 6d6f 726f     :[.{"pricestomor
   bc574:	6f72 2277 5b3a 7b00 5722 7248 795f 7365     row":[.{"WHr_yes
   bc584:	6574 6472 7961 3a22 005b 227b 4857 5f72     terday":[.{"WHr_
   bc594:	6f74 6164 2279 5b3a 6300 6e6f 656e 7463     today":[.connect
   bc5a4:	6465 4700 5445 2f20 6164 6174 6573 2f74     ed.GET /dataset/
   bc5b4:	6c45 7073 746f 7270 6369 7365 663f 6c69     Elspotprices?fil
   bc5c4:	6574 3d72 3725 2542 3232 7250 6369 4165     ter=%7B%22PriceA
   bc5d4:	6572 2561 3232 3325 2541 3232 4b44 2532     rea%22%3A%22DK2%
   bc5e4:	3232 3725 2644 7473 7261 3d74 3032 3232     22%7D&start=2022
   bc5f4:	312d 2d31 3732 3054 2530 4133 3030 6f26     -11-27T00%3A00&o
   bc604:	6666 6573 3d74 2630 696c 696d 3d74 3432     ffset=0&limit=24
   bc614:	6326 6c6f 6d75 736e 533d 6f70 5074 6972     &columns=SpotPri
   bc624:	6563 4b44 264b 6f73 7472 483d 756f 4472     ceDKK&sort=HourD
   bc634:	254b 3032 5341 2643 6974 656d 6f7a 656e     K%20ASC&timezone
   bc644:	643d 206b 5448 5054 312f 302e 4800 736f     =dk HTTP/1.0.Hos
   bc654:	3a74 6120 6970 652e 656e 6772 6469 7461     t: api.energidat
   bc664:	7361 7265 6976 6563 642e 006b 6f43 746e     aservice.dk.Cont
   bc674:	6e65 2d74 654c 676e 6874 203a 0030 6f43     ent-Length: 0.Co
   bc684:	746e 6e65 2d74 7954 6570 203a 7061 6c70     ntent-Type: appl
   bc694:	6369 7461 6f69 2f6e 736a 6e6f 6400 7369     ication/json.dis
   bc6a4:	6f63 6e6e 6365 6974 676e 002e 7041 6c70     connecting..Appl
   bc6b4:	6369 7461 6f69 3e6e 5309 6174 7472 6f20     ication>.Start o
   bc6c4:	2066 6f4c 706f 002e 642f 7461 7361 7465     f Loop../dataset
   bc6d4:	452f 736c 6f70 7074 6972 6563 3f73 6966     /Elspotprices?fi
   bc6e4:	746c 7265 253d 4237 3225 5032 6972 6563     lter=%7B%22Price
   bc6f4:	7241 6165 3225 2532 4133 3225 4432 324b     Area%22%3A%22DK2
   bc704:	3225 2532 4437 7326 6174 7472 323d 3230     %22%7D&start=202
   bc714:	2d32 3131 322d 5437 3030 3325 3041 2630     2-11-27T00%3A00&
   bc724:	666f 7366 7465 303d 6c26 6d69 7469 323d     offset=0&limit=2
   bc734:	2634 6f63 756c 6e6d 3d73 7053 746f 7250     4&columns=SpotPr
   bc744:	6369 4465 4b4b 7326 726f 3d74 6f48 7275     iceDKK&sort=Hour
   bc754:	4b44 3225 4130 4353 7426 6d69 7a65 6e6f     DK%20ASC&timezon
   bc764:	3d65 6b64 4700 5445 4100 7070 696c 6163     e=dk.GET.Applica
   bc774:	6974 6e6f 093e 6552 7073 6e6f 6573 7320     tion>.Response s
   bc784:	6174 7574 3a73 0020 7041 6c70 6369 7461     tatus: .Applicat
   bc794:	6f69 3e6e 4809 5454 2050 6552 7073 6e6f     ion>.HTTP Respon
   bc7a4:	6573 4220 646f 3a79 0020 6146 6c69 6465     se Body: .Failed
   bc7b4:	7420 206f 6c61 6f6c 6163 6574 6d20 6d65      to allocate mem
   bc7c4:	726f 2079 6f66 2072 6f63 7473 795f 7365     ory for cost_yes
   bc7d4:	6574 6472 7961 000a 6146 6c69 6465 7420     terday..Failed t
   bc7e4:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   bc7f4:	2079 6f66 2072 6f63 7473 745f 646f 7961     y for cost_today
   bc804:	000a 6146 6c69 6465 7420 206f 6c61 6f6c     ..Failed to allo
   bc814:	6163 6574 6d20 6d65 726f 2079 6f66 2072     cate memory for 
   bc824:	6f63 7473 745f 6d6f 726f 6f72 0a77 4d00     cost_tomorrow..M
   bc834:	6d65 726f 2079 6c61 6f6c 6163 6574 2064     emory allocated 
   bc844:	6f66 2072 7270 6369 7365 203a 6425 6220     for prices: %d b
   bc854:	7479 7365 6f20 2066 6f64 6275 656c 0a73     ytes of doubles.
   bc864:	4600 6961 656c 2064 6f74 6120 6c6c 636f     .Failed to alloc
   bc874:	7461 2065 656d 6f6d 7972 6620 726f 7720     ate memory for w
   bc884:	5f68 6f74 6164 0a79 4600 6961 656c 2064     h_today..Failed 
   bc894:	6f74 6120 6c6c 636f 7461 2065 656d 6f6d     to allocate memo
   bc8a4:	7972 6620 726f 7720 5f68 6579 7473 7265     ry for wh_yester
   bc8b4:	6164 0a79 4d00 6d65 726f 2079 6c61 6f6c     day..Memory allo
   bc8c4:	6163 6574 2064 6f66 2072 6877 203a 6425     cated for wh: %d
   bc8d4:	6220 7479 7365 6f20 2066 6e69 7374 000a      bytes of ints..
   bc8e4:	6641 6574 2072 6c25 0a75 7b00 2220 6579     After %lu..{ "ye
   bc8f4:	7261 3a22 2220 6425 2c22 2220 6f6d 746e     ar": "%d", "mont
   bc904:	2268 223a 3025 6432 2c22 2220 6164 2279     h":"%02d", "day"
   bc914:	203a 2522 3230 2264 007d 6c65 7270 7369     : "%02d"}.elpris
   bc924:	7265 7000 6972 6563 0073 7543 7272 6e65     er.prices.Curren
   bc934:	2074 4848 4d3a 3a4d 2520 3230 3a64 3025     t HH:MM: %02d:%0
   bc944:	6432 000a 5352 4953 253d 0064 7274 6979     2d..RSSI=%d.tryi
   bc954:	676e 7420 6568 4820 5454 2050 4547 0a54     ng the HTTP GET.
   bc964:	7400 7972 6e69 2067 6874 2065 746f 6568     .trying the othe
   bc974:	2072 656d 6874 646f 4700 7465 6974 676e     r method.Getting
   bc984:	7020 6972 6563 6420 7461 2061 6f66 2072      price data for 
   bc994:	6579 7473 7265 6164 0a79 4300 756f 746e     yesterday..Count
   bc9a4:	3d31 203a 6425 000a 6547 7474 6e69 2067     1=: %d..Getting 
   bc9b4:	7270 6369 2065 6164 6174 6620 726f 7420     price data for t
   bc9c4:	646f 7961 000a 6f43 6e75 3274 3a3d 2520     oday..Count2=: %
   bc9d4:	0a64 5400 6568 7020 6972 6563 2073 6f66     d..The prices fo
   bc9e4:	2072 6f74 6f6d 7272 766f 7720 6c69 206c     r tomorrov will 
   bc9f4:	6562 7020 6c75 656c 2064 7461 2520 3a64     be pulled at %d:
   bca04:	3030 000a 6e49 7720 726f 0a6b 4300 6568     00..In work..Che
   bca14:	7061 6928 6873 2029 6f68 7275 2073 666f     ap(ish) hours of
   bca24:	7420 6568 6420 7961 203a 2500 3230 2064      the day: .%02d 
   bca34:	6f74 2520 3230 2c64 0020 6f4c 2077 7270     to %02d, .Low pr
   bca44:	6369 2065 6f68 7275 0073 6552 6563 7669     ice hours.Receiv
   bca54:	6465 7020 776f 7265 672f 7465 000a 227b     ed power/get..{"
   bca64:	6177 7474 3a22 6425 007d 227b 7270 6369     watt":%d}.{"pric
   bca74:	7365 6f74 6164 2279 5b3a 2c31 2c32 2c33     estoday":[1,2,3,
   bca84:	2c34 2c35 2c36 2c37 2c38 2c39 3031 312c     4,5,6,7,8,9,10,1
   bca94:	2c31 3231 312c 2c33 3431 312c 2c35 3631     1,12,13,14,15,16
   bcaa4:	312c 2c37 3831 312c 2c39 3032 322c 2c31     ,17,18,19,20,21,
   bcab4:	3232 322c 2c33 3432 7d5d 6200 656c 635f     22,23,24]}.ble_c
   bcac4:	6e6f 656e 7463 6465 000a 6157 7474 6e20     onnected..Watt n
   bcad4:	776f 4400 4b4b 5920 7365 6574 6472 7961     ow.DKK Yesterday
   bcae4:	4400 4b4b 5420 646f 7961 4400 4b4b 5420     .DKK Today.DKK T
   bcaf4:	6d6f 726f 6f72 0077 6857 2072 6f54 6164     omorrow.Whr Toda
   bcb04:	0079 6857 2072 6559 7473 7265 6164 0079     y.Whr Yesterday.

000bcb14 <_ZTV5Timer>:
	...
   bcb1c:	4401 000b 4445 000b 4121 000b 6f43 746e     .D..ED..!A..Cont
   bcb2c:	6e65 2d74 654c 676e 6874 4100 6363 7065     ent-Length.Accep
   bcb3c:	0074 3462 3532 3430 3530 662d 3462 2d62     t.b4250405-fb4b-
   bcb4c:	3734 3634 622d 6232 2d30 3339 3066 3665     4746-b2b0-93f0e6
   bcb5c:	3131 3232 3663 6200 3234 3035 3034 2d34     1122c6.b4250404-
   bcb6c:	6266 6234 342d 3437 2d36 3262 3062 392d     fb4b-4746-b2b0-9
   bcb7c:	6633 6530 3136 3231 6332 0036 3462 3532     3f0e61122c6.b425
   bcb8c:	3430 3330 662d 3462 2d62 3734 3634 622d     0403-fb4b-4746-b
   bcb9c:	6232 2d30 3339 3066 3665 3131 3232 3663     2b0-93f0e61122c6
   bcbac:	6200 3234 3035 3034 2d32 6266 6234 342d     .b4250402-fb4b-4
   bcbbc:	3437 2d36 3262 3062 392d 6633 6530 3136     746-b2b0-93f0e61
   bcbcc:	3231 6332 0036 3462 3532 3430 3630 662d     122c6.b4250406-f
   bcbdc:	3462 2d62 3734 3634 622d 6232 2d30 3339     b4b-4746-b2b0-93
   bcbec:	3066 3665 3131 3232 3663 6200 3234 3035     f0e61122c6.b4250
   bcbfc:	3034 2d31 6266 6234 342d 3437 2d36 3262     401-fb4b-4746-b2
   bcc0c:	3062 392d 6633 6530 3136 3231 6332 0036     b0-93f0e61122c6.
   bcc1c:	6633 6131 3531 3639 652d 3765 2d66 3234     3f1a1596-ee7f-42
   bcc2c:	6462 382d 6434 2d31 3162 3261 3439 3866     bd-84d1-b1a294f8
   bcc3c:	6532 6663 4100 6772 6e6f 4d50 0000 2200     2ecf.ArgonPM..."
   bcc4c:	0022 2575 3430 0078 756e 6c6c 7400 7572     ".u%04x.null.tru
   bcc5c:	0065 3125 312e 6735 2500 676c 2500 2e31     e.%1.15g.%lg.%1.
   bcc6c:	3731 0067 4820 5454 2f50 2e31 0d30 000a     17g. HTTP/1.0...
   bcc7c:	6c63 736f 0065 6f43 6e6e 6365 6974 6e6f     close.Connection
   bcc8c:	4800 534f 0054 4f50 5453 0d00 0d0a 000a     .HOST.POST......

000bcc9c <_ZTV9JSONClass>:
	...
   bcca4:	5e69 000b 5e6b 000b                         i^..k^..

000bccac <_ZTV7JSONVar>:
	...
   bccb4:	5eb9 000b 5e89 000b 5ea5 000b               .^...^...^..

000bccc0 <_ZTVN5spark13EthernetClassE>:
	...
   bccc8:	6673 000b 6669 000b 665f 000b 6655 000b     sf..if.._f..Uf..
   bccd8:	6649 000b 663d 000b 93c5 000b 93cd 000b     If..=f..........
   bcce8:	6631 000b 6629 000b 661f 000b 6615 000b     1f..)f...f...f..
   bccf8:	93fd 000b 7341 6573 7472 6f69 466e 6961     ....AssertionFai
   bcd08:	756c 6572 6620 6c61 6573 7700 7269 6e69     lure false.wirin
   bcd18:	2e67 6c62 0065 7453 7261 2074 6964 6373     g.ble.Start disc
   bcd28:	766f 7265 6e69 2067 6573 7672 6369 7365     overing services
   bcd38:	002e 7341 6573 7472 6f69 466e 6961 756c     ..AssertionFailu
   bcd48:	6572 6820 6c61 625f 656c 735f 6174 6b63     re hal_ble_stack
   bcd58:	695f 696e 2874 756e 6c6c 7470 2972 3d20     _init(nullptr) =
   bcd68:	203d 5953 5453 4d45 455f 5252 524f 4e5f     = SYSTEM_ERROR_N
   bcd78:	4e4f 0045 6550 7265 6420 7665 6369 2065     ONE.Peer device 
   bcd88:	7369 6d20 7369 6973 676e 0021 6146 6c69     is missing!.Fail
   bcd98:	6465 7420 206f 7061 6570 646e 7020 6565     ed to append pee
   bcda8:	2072 6543 746e 6172 206c 6564 6976 6563     r Central device
   bcdb8:	002e 6f43 6e6e 6365 6574 2064 7962 4320     ..Connected by C
   bcdc8:	6e65 7274 6c61 6420 7665 6369 2e65 4400     entral device..D
   bcdd8:	7369 6f63 6e6e 6365 6574 2064 7962 7220     isconnected by r
   bcde8:	6d65 746f 2065 6564 6976 6563 002e 7544     emote device..Du
   bcdf8:	6c70 6369 7461 6465 6320 6168 6172 7463     plicated charact
   bce08:	7265 7369 6974 2063 6163 6e6e 746f 6220     eristic cannot b
   bce18:	2065 6461 6564 2e64 4600 6961 656c 2064     e added..Failed 
   bce28:	6f74 6120 7070 6e65 2064 6f6c 6163 206c     to append local 
   bce38:	6863 7261 6361 6574 6972 7473 6369 002e     characteristic..

000bce48 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bce50:	6a1f 000b 6a81 000b 6ba1 000b 6aab 000b     .j...j...k...j..
   bce60:	6a21 000b                                   !j..

000bce64 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bce6c:	6a1b 000b 6a8f 000b 6a1d 000b 6ab1 000b     .j...j...j...j..
   bce7c:	6a41 000b                                   Aj..

000bce80 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bce88:	6a19 000b 6a9d 000b 7389 000b 6ab7 000b     .j...j...s...j..
   bce98:	6a61 000b                                   aj..

000bce9c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bcea8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bceba <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bceba:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bceca <_ZN8particle7BleUuid9BASE_UUIDE>:
   bceca:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bceda:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bceea:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000bcefc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcf04:	82dd 000b 82e3 000b 8321 000b 82f1 000b     ........!.......
   bcf14:	82df 000b                                   ....

000bcf18 <_ZTV9IPAddress>:
	...
   bcf20:	881d 000b 880d 000b 880f 000b               ............

000bcf2c <_ZTV9USBSerial>:
	...
   bcf34:	893f 000b 89a7 000b 897d 000b 7e59 000b     ?.......}...Y~..
   bcf44:	896f 000b 8941 000b 8951 000b 89a1 000b     o...A...Q.......
   bcf54:	8961 000b 8939 000b                         a...9...

000bcf5c <_ZTV11USARTSerial>:
	...
   bcf64:	8a91 000b 8afd 000b 8ad5 000b 7e59 000b     ............Y~..
   bcf74:	8aa5 000b 8ac1 000b 8ab3 000b 8acf 000b     ................
   bcf84:	8a93 000b 8a97 000b                         ........

000bcf8c <_ZTV7TwoWire>:
	...
   bcf94:	8b5d 000b 8ba7 000b 8b7f 000b 8b5f 000b     ]..........._...
   bcfa4:	8b87 000b 8b8f 000b 8b97 000b 8b9f 000b     ................
   bcfb4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bcfc4:	2072 203d 6425 0000                         r = %d..

000bcfcc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcfd4:	8c75 000b 8c99 000b 9183 000b 8ca7 000b     u...............
   bcfe4:	8c79 000b                                   y...

000bcfe8 <_ZTV9TCPClient>:
	...
   bcff0:	816d 000b 8185 000b 8bf1 000b 8c0b 000b     m...............
   bd000:	9019 000b 8c35 000b 8e8f 000b 8c69 000b     ....5.......i...
   bd010:	8f21 000b 8d61 000b 8ebd 000b 90cd 000b     !...a...........
   bd020:	8e5d 000b 8c6b 000b 8c1d 000b 8cad 000b     ]...k...........
   bd030:	8d41 000b                                   A...

000bd034 <_ZTVN5spark9WiFiClassE>:
	...
   bd03c:	91fb 000b 91f1 000b 91e7 000b 918f 000b     ................
   bd04c:	91db 000b 91cf 000b 93c5 000b 93cd 000b     ................
   bd05c:	91c3 000b 91bb 000b 91b1 000b 91a7 000b     ................
   bd06c:	93fd 000b                                   ....

000bd070 <_ZTV10WiFiSignal>:
	...
   bd078:	9189 000b 9199 000b 918b 000b 9205 000b     ................
   bd088:	9239 000b 9265 000b 9299 000b               9...e.......

000bd094 <_ZTVN5spark12NetworkClassE>:
	...
   bd09c:	9385 000b 938f 000b 9399 000b 93a3 000b     ................
   bd0ac:	93ad 000b 93b9 000b 93c5 000b 93cd 000b     ................
   bd0bc:	93d5 000b 93e1 000b 93e9 000b 93f3 000b     ................
   bd0cc:	93fd 000b                                   ....

000bd0d0 <_ZSt7nothrow>:
	...

000bd0d1 <_ZTSSt19_Sp_make_shared_tag>:
   bd0d1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd0e1:	6572 5f64 6174 0067 0000                     red_tag....

000bd0ec <_ZTISt19_Sp_make_shared_tag>:
   bd0ec:	d12c 000b d0d1 000b                         ,.......

000bd0f4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd0f4:	d18c 000b d100 000b d1b0 000b               ............

000bd100 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd100:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd110:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd120:	0045 0000                                   E...

000bd124 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd124:	0000 0000 d0f4 000b 96dd 000b 96f1 000b     ................
   bd134:	9885 000b 9885 000b 975b 000b 969d 000b     ........[.......
   bd144:	9743 000b 9705 000b 96cf 000b               C...........

000bd150 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd150:	d18c 000b d15c 000b d0f4 000b               ....\.......

000bd15c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd15c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd16c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd17c:	666e 456f 0000 0000                         nfoE....

000bd184 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd184:	0000 0000 d150 000b 9785 000b 9799 000b     ....P...........
   bd194:	9885 000b 9885 000b 975b 000b 969d 000b     ........[.......
   bd1a4:	9859 000b 97e5 000b 97ad 000b               Y...........

000bd1b0 <_ZTISt9type_info>:
   bd1b0:	d12c 000b d1b8 000b                         ,.......

000bd1b8 <_ZTSSt9type_info>:
   bd1b8:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000bd1c5 <_ctype_>:
   bd1c5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd1d5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd1e5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd1f5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd205:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd215:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd225:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd235:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd245:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd2c5:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bd2d5:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bd2e5:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd2f5:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd305:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd315:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd325:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd335:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd345:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bd355:	646e 632e 6e00 0066 6e69 7469 0079 6e61     nd.c.nf.inity.an
   bd365:	0000                                         ...

000bd368 <fpi.1>:
   bd368:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd378:	0000 0000                                   ....

000bd37c <fpinan.0>:
   bd37c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bd38c:	0000 0000                                   ....

000bd390 <tinytens>:
   bd390:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd3a0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd3b0:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bd3c0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd3d0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd3e0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd3f0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd400:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd410:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd420:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bd430:	7472 6b6f 632e 4200 6c61 6f6c 2063 7573     rtok.c.Balloc su
   bd440:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bd450:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd460:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd470:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd480:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd490:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd4a0:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd4b0:	2f62 696c 6362 732f 6474 696c 2f62 6467     b/libc/stdlib/gd
   bd4c0:	6f74 2d61 6567 6874 7865 632e 0000 0000     toa-gethex.c....

000bd4d0 <_C_numeric_locale>:
   bd4d0:	c489 000b cc9b 000b d5fc 2003 0043 4f50     ........... C.PO
   bd4e0:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bd4f0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bd500:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bd510:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bd520:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bd530:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bd540:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bd550:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bd560:	0063 0000 0000 0000                         c.......

000bd568 <__mprec_bigtens>:
   bd568:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd578:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd588:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd590 <__mprec_tens>:
   bd590:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd5a0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd5b0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd5c0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd5d0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd5e0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd5f0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd600:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd610:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd620:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd630:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd640:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd650:	9db4 79d9 7843 44ea                         ...yCx.D

000bd658 <p05.0>:
   bd658:	0005 0000 0019 0000 007d 0000               ........}...

000bd664 <link_const_variable_data_end>:
   bd664:	000b522d 	.word	0x000b522d
   bd668:	000b5595 	.word	0x000b5595
   bd66c:	000b5e79 	.word	0x000b5e79
   bd670:	000b5ee1 	.word	0x000b5ee1
   bd674:	000b667d 	.word	0x000b667d
   bd678:	000b66c9 	.word	0x000b66c9
   bd67c:	000b7e49 	.word	0x000b7e49
   bd680:	000b7f81 	.word	0x000b7f81
   bd684:	000b8151 	.word	0x000b8151
   bd688:	000b8199 	.word	0x000b8199
   bd68c:	000b9371 	.word	0x000b9371
   bd690:	000b94d5 	.word	0x000b94d5

000bd694 <link_constructors_end>:
	...
