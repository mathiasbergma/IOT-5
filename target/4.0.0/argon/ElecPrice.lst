
c:/Users/mathi/Desktop/IOT/ElecPrice/target/4.0.0/argon/ElecPrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000066b0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba6d0  000ba6d0  0000a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba6f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  2003d768  000ba6f8  0001d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ea4  2003d950  2003d950  0002d950  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ba8dc  000ba8dc  0002a8dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba904  000ba904  0002a904  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00133093  00000000  00000000  0002a908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014fed  00000000  00000000  0015d99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003fab8  00000000  00000000  00172988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003118  00000000  00000000  001b2440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b470  00000000  00000000  001b5558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a5f1  00000000  00000000  001c09c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042e04  00000000  00000000  001fafb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a510  00000000  00000000  0023ddbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009548  00000000  00000000  003782d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fda2 	bl	b7b7a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fdaa 	bl	b7b96 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d768 	.word	0x2003d768
   b404c:	000ba6f8 	.word	0x000ba6f8
   b4050:	2003d94c 	.word	0x2003d94c
   b4054:	2003d950 	.word	0x2003d950
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fe75 	bl	b5d50 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba6ac 	.word	0x000ba6ac
   b4080:	000ba6d0 	.word	0x000ba6d0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b9c0 	b.w	b4408 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fadf 	bl	b464c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 be15 	b.w	b5cc0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 ba7f 	b.w	b5598 <malloc>

000b409a <_Znaj>:
   b409a:	f001 ba7d 	b.w	b5598 <malloc>

000b409e <_ZdaPv>:
   b409e:	f001 ba83 	b.w	b55a8 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f001 ba81 	b.w	b55a8 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z8callbackPcPhj>:
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    */

    state = GET_DATA;
   b40b8:	4b01      	ldr	r3, [pc, #4]	; (b40c0 <_Z8callbackPcPhj+0x8>)
   b40ba:	2201      	movs	r2, #1
   b40bc:	701a      	strb	r2, [r3, #0]
}
   b40be:	4770      	bx	lr
   b40c0:	2003dc78 	.word	0x2003dc78

000b40c4 <_Z14myPriceHandlerPKcS0_>:
{
   b40c4:	b510      	push	{r4, lr}
            digitalWrite(state, LOW);
   b40c6:	4c06      	ldr	r4, [pc, #24]	; (b40e0 <_Z14myPriceHandlerPKcS0_+0x1c>)
   b40c8:	2100      	movs	r1, #0
   b40ca:	7820      	ldrb	r0, [r4, #0]
   b40cc:	f002 fef3 	bl	b6eb6 <digitalWrite>
    state = GET_DATA;
   b40d0:	2101      	movs	r1, #1
   b40d2:	7021      	strb	r1, [r4, #0]
            digitalWrite(state, HIGH);
   b40d4:	4608      	mov	r0, r1
}
   b40d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            digitalWrite(state, HIGH);
   b40da:	f002 beec 	b.w	b6eb6 <digitalWrite>
   b40de:	bf00      	nop
   b40e0:	2003dc78 	.word	0x2003dc78

000b40e4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	b40e      	push	{r1, r2, r3}
   b40e6:	b503      	push	{r0, r1, lr}
   b40e8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ea:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ec:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40f0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40f2:	f001 fcb0 	bl	b5a56 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40f6:	b002      	add	sp, #8
   b40f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40fc:	b003      	add	sp, #12
   b40fe:	4770      	bx	lr

000b4100 <_Z9myHandlerPKcS0_>:
{
   b4100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4104:	4605      	mov	r5, r0
   b4106:	b085      	sub	sp, #20
    int transmission_size = strlen(data);
   b4108:	4608      	mov	r0, r1
{
   b410a:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b410c:	f003 fdb9 	bl	b7c82 <strlen>
    strcpy(event_str,event);
   b4110:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b4112:	4606      	mov	r6, r0
    strcpy(event_str,event);
   b4114:	a801      	add	r0, sp, #4
   b4116:	f003 fd8e 	bl	b7c36 <strcpy>
    strcat(&temp[atoi(strtok(event_str,"prices/"))*512],data);
   b411a:	4927      	ldr	r1, [pc, #156]	; (b41b8 <_Z9myHandlerPKcS0_+0xb8>)
   b411c:	4d27      	ldr	r5, [pc, #156]	; (b41bc <_Z9myHandlerPKcS0_+0xbc>)
   b411e:	a801      	add	r0, sp, #4
   b4120:	f004 fbfc 	bl	b891c <strtok>
   b4124:	f003 fd11 	bl	b7b4a <atoi>
   b4128:	4621      	mov	r1, r4
   b412a:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b412e:	f003 fd69 	bl	b7c04 <strcat>
    if (transmission_size < 512)
   b4132:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4136:	d239      	bcs.n	b41ac <_Z9myHandlerPKcS0_+0xac>
        Serial.printf("%s\n",temp);
   b4138:	f002 f9bc 	bl	b64b4 <_Z16_fetch_usbserialv>
   b413c:	462a      	mov	r2, r5
   b413e:	4920      	ldr	r1, [pc, #128]	; (b41c0 <_Z9myHandlerPKcS0_+0xc0>)
        for (int i = 0; i < range; i++)
   b4140:	f8df 8094 	ldr.w	r8, [pc, #148]	; b41d8 <_Z9myHandlerPKcS0_+0xd8>
            sscanf(token, "%*d-%*d-%*dT%d:%*d:%*d", &cost_hour[i]);
   b4144:	f8df 9094 	ldr.w	r9, [pc, #148]	; b41dc <_Z9myHandlerPKcS0_+0xdc>
            cost[i] = atof(token) / 1000;
   b4148:	4f1e      	ldr	r7, [pc, #120]	; (b41c4 <_Z9myHandlerPKcS0_+0xc4>)
        Serial.printf("%s\n",temp);
   b414a:	f7ff ffcb 	bl	b40e4 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b414e:	4628      	mov	r0, r5
   b4150:	491d      	ldr	r1, [pc, #116]	; (b41c8 <_Z9myHandlerPKcS0_+0xc8>)
   b4152:	4d1e      	ldr	r5, [pc, #120]	; (b41cc <_Z9myHandlerPKcS0_+0xcc>)
   b4154:	f004 fbe2 	bl	b891c <strtok>
        for (int i = 0; i < range; i++)
   b4158:	2400      	movs	r4, #0
            cost[i] = atof(token) / 1000;
   b415a:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b415c:	f8d8 3000 	ldr.w	r3, [r8]
   b4160:	42a3      	cmp	r3, r4
   b4162:	dd19      	ble.n	b4198 <_Z9myHandlerPKcS0_+0x98>
            sscanf(token, "%*d-%*d-%*dT%d:%*d:%*d", &cost_hour[i]);
   b4164:	eb09 0284 	add.w	r2, r9, r4, lsl #2
   b4168:	4919      	ldr	r1, [pc, #100]	; (b41d0 <_Z9myHandlerPKcS0_+0xd0>)
   b416a:	f001 fa35 	bl	b55d8 <sscanf>
            token = strtok(NULL, ",!");
   b416e:	4916      	ldr	r1, [pc, #88]	; (b41c8 <_Z9myHandlerPKcS0_+0xc8>)
   b4170:	2000      	movs	r0, #0
   b4172:	f004 fbd3 	bl	b891c <strtok>
            cost[i] = atof(token) / 1000;
   b4176:	f003 fce5 	bl	b7b44 <atof>
   b417a:	4632      	mov	r2, r6
   b417c:	ec51 0b10 	vmov	r0, r1, d0
   b4180:	463b      	mov	r3, r7
   b4182:	f003 fb2b 	bl	b77dc <__aeabi_ddiv>
   b4186:	e8e5 0102 	strd	r0, r1, [r5], #8
            if((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b418a:	490f      	ldr	r1, [pc, #60]	; (b41c8 <_Z9myHandlerPKcS0_+0xc8>)
   b418c:	2000      	movs	r0, #0
   b418e:	f004 fbc5 	bl	b891c <strtok>
   b4192:	b970      	cbnz	r0, b41b2 <_Z9myHandlerPKcS0_+0xb2>
                range = i;  // Update range, such that the rest of program flow is aware of size
   b4194:	f8c8 4000 	str.w	r4, [r8]
            digitalWrite(state, LOW);
   b4198:	4c0e      	ldr	r4, [pc, #56]	; (b41d4 <_Z9myHandlerPKcS0_+0xd4>)
   b419a:	2100      	movs	r1, #0
   b419c:	7820      	ldrb	r0, [r4, #0]
   b419e:	f002 fe8a 	bl	b6eb6 <digitalWrite>
        state = CALCULATE;
   b41a2:	2002      	movs	r0, #2
            digitalWrite(state, HIGH);
   b41a4:	2101      	movs	r1, #1
        state = CALCULATE;
   b41a6:	7020      	strb	r0, [r4, #0]
            digitalWrite(state, HIGH);
   b41a8:	f002 fe85 	bl	b6eb6 <digitalWrite>
}
   b41ac:	b005      	add	sp, #20
   b41ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for (int i = 0; i < range; i++)
   b41b2:	3401      	adds	r4, #1
   b41b4:	e7d2      	b.n	b415c <_Z9myHandlerPKcS0_+0x5c>
   b41b6:	bf00      	nop
   b41b8:	000b9cd0 	.word	0x000b9cd0
   b41bc:	2003dc79 	.word	0x2003dc79
   b41c0:	000b9cd8 	.word	0x000b9cd8
   b41c4:	408f4000 	.word	0x408f4000
   b41c8:	000b9cdc 	.word	0x000b9cdc
   b41cc:	2003da38 	.word	0x2003da38
   b41d0:	000b9cdf 	.word	0x000b9cdf
   b41d4:	2003dc78 	.word	0x2003dc78
   b41d8:	2003d76c 	.word	0x2003d76c
   b41dc:	2003dbb8 	.word	0x2003dbb8

000b41e0 <_Z13handle_sensorv>:
{
   b41e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((delta = current_reading-last_read) > 100)
   b41e4:	f8df 8068 	ldr.w	r8, [pc, #104]	; b4250 <_Z13handle_sensorv+0x70>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41e8:	f000 ffba 	bl	b5160 <HAL_Timer_Get_Milli_Seconds>
   b41ec:	f8d8 6000 	ldr.w	r6, [r8]
   b41f0:	1b86      	subs	r6, r0, r6
   b41f2:	2e64      	cmp	r6, #100	; 0x64
   b41f4:	4605      	mov	r5, r0
   b41f6:	d921      	bls.n	b423c <_Z13handle_sensorv+0x5c>
            digitalWrite(state, LOW);
   b41f8:	4c11      	ldr	r4, [pc, #68]	; (b4240 <_Z13handle_sensorv+0x60>)
        Serial.printf("In interrupt\n");
   b41fa:	f002 f95b 	bl	b64b4 <_Z16_fetch_usbserialv>
   b41fe:	4911      	ldr	r1, [pc, #68]	; (b4244 <_Z13handle_sensorv+0x64>)
   b4200:	f7ff ff70 	bl	b40e4 <_ZN5Print6printfEPKcz>
        state = SENSOR_READ;
   b4204:	2700      	movs	r7, #0
            digitalWrite(state, LOW);
   b4206:	7820      	ldrb	r0, [r4, #0]
   b4208:	2100      	movs	r1, #0
   b420a:	f002 fe54 	bl	b6eb6 <digitalWrite>
            digitalWrite(state, HIGH);
   b420e:	4638      	mov	r0, r7
   b4210:	2101      	movs	r1, #1
        state = SENSOR_READ;
   b4212:	7027      	strb	r7, [r4, #0]
            digitalWrite(state, HIGH);
   b4214:	f002 fe4f 	bl	b6eb6 <digitalWrite>
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4218:	4b0b      	ldr	r3, [pc, #44]	; (b4248 <_Z13handle_sensorv+0x68>)
   b421a:	fbb3 f6f6 	udiv	r6, r3, r6
   b421e:	4b0b      	ldr	r3, [pc, #44]	; (b424c <_Z13handle_sensorv+0x6c>)
            digitalWrite(state, LOW);
   b4220:	7820      	ldrb	r0, [r4, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4222:	601e      	str	r6, [r3, #0]
            digitalWrite(state, LOW);
   b4224:	4639      	mov	r1, r7
        last_read = current_reading;
   b4226:	f8c8 5000 	str.w	r5, [r8]
            digitalWrite(state, LOW);
   b422a:	f002 fe44 	bl	b6eb6 <digitalWrite>
        state = TRANSMIT_SENSOR;
   b422e:	2004      	movs	r0, #4
   b4230:	7020      	strb	r0, [r4, #0]
            digitalWrite(state, HIGH);
   b4232:	2101      	movs	r1, #1
}
   b4234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            digitalWrite(state, HIGH);
   b4238:	f002 be3d 	b.w	b6eb6 <digitalWrite>
}
   b423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4240:	2003dc78 	.word	0x2003dc78
   b4244:	000b9cf6 	.word	0x000b9cf6
   b4248:	0036ee80 	.word	0x0036ee80
   b424c:	2003d9bc 	.word	0x2003d9bc
   b4250:	2003d954 	.word	0x2003d954
   b4254:	00000000 	.word	0x00000000

000b4258 <_Z8calc_lowPA2_iPdPii>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int * cost_hour, int size)
{
   b4258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b425c:	ed2d 8b02 	vpush	{d8}
   b4260:	b09d      	sub	sp, #116	; 0x74
   b4262:	e9cd 3202 	strd	r3, r2, [sp, #8]
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value
   b4266:	4f50      	ldr	r7, [pc, #320]	; (b43a8 <_Z8calc_lowPA2_iPdPii+0x150>)
{
   b4268:	4605      	mov	r5, r0
   b426a:	468b      	mov	fp, r1
   b426c:	468a      	mov	sl, r1

    for (int i = 0; i < size; i++)
   b426e:	2400      	movs	r4, #0
    double last_small = 100; // Assign any absurdly high value
   b4270:	2600      	movs	r6, #0
    double last_big = 0;
   b4272:	f04f 0800 	mov.w	r8, #0
   b4276:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < size; i++)
   b427a:	9b02      	ldr	r3, [sp, #8]
   b427c:	429c      	cmp	r4, r3
   b427e:	da17      	bge.n	b42b0 <_Z8calc_lowPA2_iPdPii+0x58>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4280:	ecba 7b02 	vldmia	sl!, {d7}
   b4284:	4642      	mov	r2, r8
   b4286:	ec51 0b17 	vmov	r0, r1, d7
   b428a:	464b      	mov	r3, r9
   b428c:	ed8d 7b00 	vstr	d7, [sp]
   b4290:	f003 fc0a 	bl	b7aa8 <__aeabi_dcmpgt>
   b4294:	b108      	cbz	r0, b429a <_Z8calc_lowPA2_iPdPii+0x42>
        {
            last_big = cost[i];
   b4296:	e9dd 8900 	ldrd	r8, r9, [sp]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b429a:	e9dd 0100 	ldrd	r0, r1, [sp]
   b429e:	4632      	mov	r2, r6
   b42a0:	463b      	mov	r3, r7
   b42a2:	f003 fbe3 	bl	b7a6c <__aeabi_dcmplt>
   b42a6:	b108      	cbz	r0, b42ac <_Z8calc_lowPA2_iPdPii+0x54>
        {
            last_small = cost[i];
   b42a8:	e9dd 6700 	ldrd	r6, r7, [sp]
    for (int i = 0; i < size; i++)
   b42ac:	3401      	adds	r4, #1
   b42ae:	e7e4      	b.n	b427a <_Z8calc_lowPA2_iPdPii+0x22>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b42b0:	4632      	mov	r2, r6
   b42b2:	463b      	mov	r3, r7
   b42b4:	4640      	mov	r0, r8
   b42b6:	4649      	mov	r1, r9
   b42b8:	f002 ffae 	bl	b7218 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b42bc:	a338      	add	r3, pc, #224	; (adr r3, b43a0 <_Z8calc_lowPA2_iPdPii+0x148>)
   b42be:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42c2:	f003 f961 	bl	b7588 <__aeabi_dmul>
   b42c6:	4632      	mov	r2, r6
   b42c8:	463b      	mov	r3, r7
   b42ca:	f002 ffa7 	bl	b721c <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= size; i++)
   b42ce:	f04f 0a00 	mov.w	sl, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b42d2:	ec41 0b18 	vmov	d8, r0, r1
    int idx = 0;
   b42d6:	4654      	mov	r4, sl
    for (int i = 0; i <= size; i++)
   b42d8:	9b02      	ldr	r3, [sp, #8]
   b42da:	459a      	cmp	sl, r3
   b42dc:	dc12      	bgt.n	b4304 <_Z8calc_lowPA2_iPdPii+0xac>
    {
        
        if (cost[i] < small_offset)
   b42de:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   b42e2:	ec53 2b18 	vmov	r2, r3, d8
   b42e6:	f003 fbc1 	bl	b7a6c <__aeabi_dcmplt>
   b42ea:	b140      	cbz	r0, b42fe <_Z8calc_lowPA2_iPdPii+0xa6>
        {
            low_range_hour[idx] = cost_hour[i];
   b42ec:	9a03      	ldr	r2, [sp, #12]
   b42ee:	ab1c      	add	r3, sp, #112	; 0x70
   b42f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b42f4:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
   b42f8:	f843 2c60 	str.w	r2, [r3, #-96]
            
            idx++;
   b42fc:	3401      	adds	r4, #1
    for (int i = 0; i <= size; i++)
   b42fe:	f10a 0a01 	add.w	sl, sl, #1
   b4302:	e7e9      	b.n	b42d8 <_Z8calc_lowPA2_iPdPii+0x80>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b4304:	f002 f8d6 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4308:	4928      	ldr	r1, [pc, #160]	; (b43ac <_Z8calc_lowPA2_iPdPii+0x154>)
   b430a:	4642      	mov	r2, r8
   b430c:	464b      	mov	r3, r9
   b430e:	f7ff fee9 	bl	b40e4 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b4312:	f002 f8cf 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4316:	4926      	ldr	r1, [pc, #152]	; (b43b0 <_Z8calc_lowPA2_iPdPii+0x158>)
   b4318:	4632      	mov	r2, r6
   b431a:	463b      	mov	r3, r7
   b431c:	f7ff fee2 	bl	b40e4 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4320:	f002 f8c8 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4324:	4923      	ldr	r1, [pc, #140]	; (b43b4 <_Z8calc_lowPA2_iPdPii+0x15c>)
   b4326:	f7ff fedd 	bl	b40e4 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b432a:	b36c      	cbz	r4, b4388 <_Z8calc_lowPA2_iPdPii+0x130>
    int i = 0;
   b432c:	2300      	movs	r3, #0
    int cnt = 0;
   b432e:	461e      	mov	r6, r3
   b4330:	1d2f      	adds	r7, r5, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b4332:	aa1c      	add	r2, sp, #112	; 0x70
   b4334:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b4338:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b433c:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
   b4340:	aa04      	add	r2, sp, #16
   b4342:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4346:	6802      	ldr	r2, [r0, #0]
   b4348:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b434c:	3901      	subs	r1, #1
   b434e:	428a      	cmp	r2, r1
   b4350:	f103 0301 	add.w	r3, r3, #1
   b4354:	d0f7      	beq.n	b4346 <_Z8calc_lowPA2_iPdPii+0xee>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b4356:	3201      	adds	r2, #1
        while (i <= idx)
   b4358:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b435a:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
            
            cnt++;
   b435e:	f106 0201 	add.w	r2, r6, #1
        while (i <= idx)
   b4362:	dd0f      	ble.n	b4384 <_Z8calc_lowPA2_iPdPii+0x12c>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b4364:	f8df 8054 	ldr.w	r8, [pc, #84]	; b43bc <_Z8calc_lowPA2_iPdPii+0x164>
    for (int z = 0; z < cnt; z++)
   b4368:	2400      	movs	r4, #0
   b436a:	42b4      	cmp	r4, r6
   b436c:	d00c      	beq.n	b4388 <_Z8calc_lowPA2_iPdPii+0x130>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b436e:	f002 f8a1 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4372:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b4376:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b437a:	4641      	mov	r1, r8
   b437c:	f7ff feb2 	bl	b40e4 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b4380:	3401      	adds	r4, #1
   b4382:	e7f2      	b.n	b436a <_Z8calc_lowPA2_iPdPii+0x112>
            cnt++;
   b4384:	4616      	mov	r6, r2
   b4386:	e7d4      	b.n	b4332 <_Z8calc_lowPA2_iPdPii+0xda>

    // Calculations are done - set state
    #ifdef STATEDEBUG
            digitalWrite(state, LOW);
    #endif
    state = TRANSMIT_PRICE;
   b4388:	4b0b      	ldr	r3, [pc, #44]	; (b43b8 <_Z8calc_lowPA2_iPdPii+0x160>)
   b438a:	2203      	movs	r2, #3
    #ifdef STATEDEBUG
            digitalWrite(state, HIGH);
    #endif

    return cnt;
}
   b438c:	4620      	mov	r0, r4
    state = TRANSMIT_PRICE;
   b438e:	701a      	strb	r2, [r3, #0]
}
   b4390:	b01d      	add	sp, #116	; 0x74
   b4392:	ecbd 8b02 	vpop	{d8}
   b4396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b439a:	bf00      	nop
   b439c:	f3af 8000 	nop.w
   b43a0:	33333333 	.word	0x33333333
   b43a4:	3fd33333 	.word	0x3fd33333
   b43a8:	40590000 	.word	0x40590000
   b43ac:	000b9d04 	.word	0x000b9d04
   b43b0:	000b9d22 	.word	0x000b9d22
   b43b4:	000b9d3f 	.word	0x000b9d3f
   b43b8:	2003dc78 	.word	0x2003dc78
   b43bc:	000b9d7d 	.word	0x000b9d7d

000b43c0 <_Z9init_GPIOv>:
{
   b43c0:	b508      	push	{r3, lr}
    pinMode(SENSOR_READ, OUTPUT);
   b43c2:	2101      	movs	r1, #1
   b43c4:	2000      	movs	r0, #0
   b43c6:	f002 fd65 	bl	b6e94 <pinMode>
    pinMode(GET_DATA, OUTPUT);
   b43ca:	2101      	movs	r1, #1
   b43cc:	4608      	mov	r0, r1
   b43ce:	f002 fd61 	bl	b6e94 <pinMode>
    pinMode(CALCULATE, OUTPUT);
   b43d2:	2101      	movs	r1, #1
   b43d4:	2002      	movs	r0, #2
   b43d6:	f002 fd5d 	bl	b6e94 <pinMode>
    pinMode(TRANSMIT_PRICE, OUTPUT);
   b43da:	2101      	movs	r1, #1
   b43dc:	2003      	movs	r0, #3
   b43de:	f002 fd59 	bl	b6e94 <pinMode>
    pinMode(TRANSMIT_SENSOR, OUTPUT);
   b43e2:	2101      	movs	r1, #1
   b43e4:	2004      	movs	r0, #4
   b43e6:	f002 fd55 	bl	b6e94 <pinMode>
    pinMode(SLEEP_STATE, OUTPUT);
   b43ea:	2101      	movs	r1, #1
   b43ec:	2005      	movs	r0, #5
   b43ee:	f002 fd51 	bl	b6e94 <pinMode>
    pinMode(AWAITING_DATA, OUTPUT);
   b43f2:	2101      	movs	r1, #1
   b43f4:	2006      	movs	r0, #6
   b43f6:	f002 fd4d 	bl	b6e94 <pinMode>
}
   b43fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pinMode(STARTUP, OUTPUT);
   b43fe:	2101      	movs	r1, #1
   b4400:	200a      	movs	r0, #10
   b4402:	f002 bd47 	b.w	b6e94 <pinMode>
	...

000b4408 <setup>:
{
   b4408:	b570      	push	{r4, r5, r6, lr}
    state = STARTUP;
   b440a:	4d3a      	ldr	r5, [pc, #232]	; (b44f4 <setup+0xec>)
{
   b440c:	b08a      	sub	sp, #40	; 0x28
    init_GPIO();
   b440e:	f7ff ffd7 	bl	b43c0 <_Z9init_GPIOv>
    state = STARTUP;
   b4412:	200a      	movs	r0, #10
            digitalWrite(state, LOW);
   b4414:	2100      	movs	r1, #0
    state = STARTUP;
   b4416:	7028      	strb	r0, [r5, #0]
            digitalWrite(state, LOW);
   b4418:	f002 fd4d 	bl	b6eb6 <digitalWrite>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b441c:	f001 f894 	bl	b5548 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4420:	b910      	cbnz	r0, b4428 <setup+0x20>
            spark_process();
   b4422:	f001 f889 	bl	b5538 <spark_process>
        while (_while() && !_condition()) {
   b4426:	e7f9      	b.n	b441c <setup+0x14>
   b4428:	f001 f88e 	bl	b5548 <spark_cloud_flag_connected>
    state = GET_DATA;
   b442c:	2601      	movs	r6, #1
            digitalWrite(state, HIGH);
   b442e:	7828      	ldrb	r0, [r5, #0]
   b4430:	2101      	movs	r1, #1
   b4432:	f002 fd40 	bl	b6eb6 <digitalWrite>
            digitalWrite(state, HIGH);
   b4436:	4631      	mov	r1, r6
   b4438:	4630      	mov	r0, r6
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b443a:	2400      	movs	r4, #0
    state = GET_DATA;
   b443c:	702e      	strb	r6, [r5, #0]
            digitalWrite(state, HIGH);
   b443e:	f002 fd3a 	bl	b6eb6 <digitalWrite>
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                 //Setup pinmode for LDR pin
   b4442:	2103      	movs	r1, #3
   b4444:	2008      	movs	r0, #8
   b4446:	f002 fd25 	bl	b6e94 <pinMode>
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b444a:	492b      	ldr	r1, [pc, #172]	; (b44f8 <setup+0xf0>)
   b444c:	9400      	str	r4, [sp, #0]
   b444e:	f04f 33ff 	mov.w	r3, #4294967295
   b4452:	4632      	mov	r2, r6
   b4454:	2008      	movs	r0, #8
   b4456:	f002 f855 	bl	b6504 <_Z15attachInterrupttPFvvE13InterruptModeah>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b445a:	4623      	mov	r3, r4
   b445c:	4622      	mov	r2, r4
   b445e:	e9cd 4400 	strd	r4, r4, [sp]
   b4462:	4926      	ldr	r1, [pc, #152]	; (b44fc <setup+0xf4>)
   b4464:	4826      	ldr	r0, [pc, #152]	; (b4500 <setup+0xf8>)
   b4466:	f001 f87f 	bl	b5568 <spark_subscribe>
   b446a:	4623      	mov	r3, r4
   b446c:	4622      	mov	r2, r4
   b446e:	e9cd 4400 	strd	r4, r4, [sp]
   b4472:	4924      	ldr	r1, [pc, #144]	; (b4504 <setup+0xfc>)
   b4474:	4824      	ldr	r0, [pc, #144]	; (b4508 <setup+0x100>)
   b4476:	f001 f877 	bl	b5568 <spark_subscribe>
        return _variable(name, std::forward<ArgsT>(args)...);
   b447a:	782b      	ldrb	r3, [r5, #0]
   b447c:	9306      	str	r3, [sp, #24]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b447e:	2202      	movs	r2, #2
   b4480:	4623      	mov	r3, r4
   b4482:	a906      	add	r1, sp, #24
   b4484:	4821      	ldr	r0, [pc, #132]	; (b450c <setup+0x104>)
   b4486:	f001 f84f 	bl	b5528 <spark_variable>
    Serial.printf("Return value: %d",client.connect("client_" + String(Time.now()),"mqtt","mqtt"));
   b448a:	f002 f813 	bl	b64b4 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b448e:	4920      	ldr	r1, [pc, #128]	; (b4510 <setup+0x108>)
   b4490:	4604      	mov	r4, r0
   b4492:	a806      	add	r0, sp, #24
   b4494:	f001 f9c9 	bl	b582a <_ZN6StringC1EPK19__FlashStringHelper>
   b4498:	f001 fb81 	bl	b5b9e <_ZN9TimeClass3nowEv>
   b449c:	220a      	movs	r2, #10
   b449e:	4601      	mov	r1, r0
   b44a0:	a802      	add	r0, sp, #8
   b44a2:	f001 f9e8 	bl	b5876 <_ZN6StringC1Elh>
   b44a6:	a902      	add	r1, sp, #8
   b44a8:	a806      	add	r0, sp, #24
   b44aa:	f001 fa12 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b44ae:	4b19      	ldr	r3, [pc, #100]	; (b4514 <setup+0x10c>)
   b44b0:	6801      	ldr	r1, [r0, #0]
   b44b2:	4819      	ldr	r0, [pc, #100]	; (b4518 <setup+0x110>)
   b44b4:	461a      	mov	r2, r3
   b44b6:	f000 fbd9 	bl	b4c6c <_ZN4MQTT7connectEPKcS1_S1_>
   b44ba:	4918      	ldr	r1, [pc, #96]	; (b451c <setup+0x114>)
   b44bc:	4602      	mov	r2, r0
   b44be:	4620      	mov	r0, r4
   b44c0:	f7ff fe10 	bl	b40e4 <_ZN5Print6printfEPKcz>
   b44c4:	a802      	add	r0, sp, #8
   b44c6:	f001 f965 	bl	b5794 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44ca:	a806      	add	r0, sp, #24
   b44cc:	f001 f962 	bl	b5794 <_ZN6StringD1Ev>
    if (client.isConnected()) 
   b44d0:	4811      	ldr	r0, [pc, #68]	; (b4518 <setup+0x110>)
   b44d2:	f000 fadb 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b44d6:	b158      	cbz	r0, b44f0 <setup+0xe8>
        client.publish("power/get","hello world");
   b44d8:	4a11      	ldr	r2, [pc, #68]	; (b4520 <setup+0x118>)
   b44da:	4912      	ldr	r1, [pc, #72]	; (b4524 <setup+0x11c>)
   b44dc:	480e      	ldr	r0, [pc, #56]	; (b4518 <setup+0x110>)
   b44de:	f000 fc50 	bl	b4d82 <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b44e2:	4911      	ldr	r1, [pc, #68]	; (b4528 <setup+0x120>)
   b44e4:	480c      	ldr	r0, [pc, #48]	; (b4518 <setup+0x110>)
}
   b44e6:	b00a      	add	sp, #40	; 0x28
   b44e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        client.subscribe("power/prices");
   b44ec:	f000 bded 	b.w	b50ca <_ZN4MQTT9subscribeEPKc>
}
   b44f0:	b00a      	add	sp, #40	; 0x28
   b44f2:	bd70      	pop	{r4, r5, r6, pc}
   b44f4:	2003dc78 	.word	0x2003dc78
   b44f8:	000b41e1 	.word	0x000b41e1
   b44fc:	000b4101 	.word	0x000b4101
   b4500:	000b9dce 	.word	0x000b9dce
   b4504:	000b40c5 	.word	0x000b40c5
   b4508:	000b9d8b 	.word	0x000b9d8b
   b450c:	000b9d96 	.word	0x000b9d96
   b4510:	000b9def 	.word	0x000b9def
   b4514:	000b9d9c 	.word	0x000b9d9c
   b4518:	2003d9c0 	.word	0x2003d9c0
   b451c:	000b9da1 	.word	0x000b9da1
   b4520:	000b9db2 	.word	0x000b9db2
   b4524:	000b9dbe 	.word	0x000b9dbe
   b4528:	000b9dc8 	.word	0x000b9dc8

000b452c <_Z10check_mqttv>:

/** @brief Reconnects MQTT client if disconnected
 */
void check_mqtt(void)
{
   b452c:	b500      	push	{lr}
    if (client.isConnected())
   b452e:	481b      	ldr	r0, [pc, #108]	; (b459c <_Z10check_mqttv+0x70>)
{
   b4530:	b089      	sub	sp, #36	; 0x24
    if (client.isConnected())
   b4532:	f000 faab 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b4536:	b128      	cbz	r0, b4544 <_Z10check_mqttv+0x18>
    {
        client.loop();
   b4538:	4818      	ldr	r0, [pc, #96]	; (b459c <_Z10check_mqttv+0x70>)
        {
            Serial.printf("Client reconnected\n");
        }
    }
    
}
   b453a:	b009      	add	sp, #36	; 0x24
   b453c:	f85d eb04 	ldr.w	lr, [sp], #4
        client.loop();
   b4540:	f000 bc7b 	b.w	b4e3a <_ZN4MQTT4loopEv>
        Serial.printf("Client disconnected\n");
   b4544:	f001 ffb6 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4548:	4915      	ldr	r1, [pc, #84]	; (b45a0 <_Z10check_mqttv+0x74>)
   b454a:	f7ff fdcb 	bl	b40e4 <_ZN5Print6printfEPKcz>
	StringSumHelper(const char *p) : String(p) {}
   b454e:	4915      	ldr	r1, [pc, #84]	; (b45a4 <_Z10check_mqttv+0x78>)
   b4550:	4668      	mov	r0, sp
   b4552:	f001 f96a 	bl	b582a <_ZN6StringC1EPK19__FlashStringHelper>
        client.connect("sparkclient_" + String(Time.now()),"mqtt","mqtt");
   b4556:	f001 fb22 	bl	b5b9e <_ZN9TimeClass3nowEv>
   b455a:	220a      	movs	r2, #10
   b455c:	4601      	mov	r1, r0
   b455e:	a804      	add	r0, sp, #16
   b4560:	f001 f989 	bl	b5876 <_ZN6StringC1Elh>
   b4564:	a904      	add	r1, sp, #16
   b4566:	4668      	mov	r0, sp
   b4568:	f001 f9b3 	bl	b58d2 <_ZplRK15StringSumHelperRK6String>
   b456c:	4b0e      	ldr	r3, [pc, #56]	; (b45a8 <_Z10check_mqttv+0x7c>)
   b456e:	6801      	ldr	r1, [r0, #0]
   b4570:	480a      	ldr	r0, [pc, #40]	; (b459c <_Z10check_mqttv+0x70>)
   b4572:	461a      	mov	r2, r3
   b4574:	f000 fb7a 	bl	b4c6c <_ZN4MQTT7connectEPKcS1_S1_>
   b4578:	a804      	add	r0, sp, #16
   b457a:	f001 f90b 	bl	b5794 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b457e:	4668      	mov	r0, sp
   b4580:	f001 f908 	bl	b5794 <_ZN6StringD1Ev>
        if (client.isConnected())
   b4584:	4805      	ldr	r0, [pc, #20]	; (b459c <_Z10check_mqttv+0x70>)
   b4586:	f000 fa81 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b458a:	b120      	cbz	r0, b4596 <_Z10check_mqttv+0x6a>
            Serial.printf("Client reconnected\n");
   b458c:	f001 ff92 	bl	b64b4 <_Z16_fetch_usbserialv>
   b4590:	4906      	ldr	r1, [pc, #24]	; (b45ac <_Z10check_mqttv+0x80>)
   b4592:	f7ff fda7 	bl	b40e4 <_ZN5Print6printfEPKcz>
}
   b4596:	b009      	add	sp, #36	; 0x24
   b4598:	f85d fb04 	ldr.w	pc, [sp], #4
   b459c:	2003d9c0 	.word	0x2003d9c0
   b45a0:	000b9dd5 	.word	0x000b9dd5
   b45a4:	000b9dea 	.word	0x000b9dea
   b45a8:	000b9d9c 	.word	0x000b9d9c
   b45ac:	000b9df7 	.word	0x000b9df7

000b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b45b0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b45b2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b45b4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b45b6:	b17c      	cbz	r4, b45d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b45b8:	6863      	ldr	r3, [r4, #4]
   b45ba:	3b01      	subs	r3, #1
   b45bc:	6063      	str	r3, [r4, #4]
   b45be:	b95b      	cbnz	r3, b45d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b45c0:	6823      	ldr	r3, [r4, #0]
   b45c2:	4620      	mov	r0, r4
   b45c4:	689b      	ldr	r3, [r3, #8]
   b45c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b45c8:	68a3      	ldr	r3, [r4, #8]
   b45ca:	3b01      	subs	r3, #1
   b45cc:	60a3      	str	r3, [r4, #8]
   b45ce:	b91b      	cbnz	r3, b45d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b45d0:	6823      	ldr	r3, [r4, #0]
   b45d2:	4620      	mov	r0, r4
   b45d4:	68db      	ldr	r3, [r3, #12]
   b45d6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b45d8:	4628      	mov	r0, r5
   b45da:	bd38      	pop	{r3, r4, r5, pc}

000b45dc <_Z8get_datai>:

/** @brief Puplishes a formatted command string to Particle cloud that fires off a webhook
 *  @param day
 */
void get_data(int day)
{
   b45dc:	b510      	push	{r4, lr}
    range = MAX_RANGE;
   b45de:	4b16      	ldr	r3, [pc, #88]	; (b4638 <_Z8get_datai+0x5c>)
   b45e0:	2230      	movs	r2, #48	; 0x30
   b45e2:	601a      	str	r2, [r3, #0]
    temp[0] = 0;
   b45e4:	4b15      	ldr	r3, [pc, #84]	; (b463c <_Z8get_datai+0x60>)
   b45e6:	2200      	movs	r2, #0
{
   b45e8:	b08c      	sub	sp, #48	; 0x30
    temp[0] = 0;
   b45ea:	701a      	strb	r2, [r3, #0]
{
   b45ec:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
   b45ee:	f001 fb13 	bl	b5c18 <_ZN9TimeClass4yearEv>
   b45f2:	9005      	str	r0, [sp, #20]
   b45f4:	f001 fb08 	bl	b5c08 <_ZN9TimeClass5monthEv>
   b45f8:	9004      	str	r0, [sp, #16]
   b45fa:	f001 fae1 	bl	b5bc0 <_ZN9TimeClass4hourEv>
   b45fe:	1ca1      	adds	r1, r4, #2
   b4600:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b4604:	e9cd 4100 	strd	r4, r1, [sp]
   b4608:	9002      	str	r0, [sp, #8]
   b460a:	490d      	ldr	r1, [pc, #52]	; (b4640 <_Z8get_datai+0x64>)
   b460c:	a808      	add	r0, sp, #32
   b460e:	f001 f96d 	bl	b58ec <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4612:	4b0c      	ldr	r3, [pc, #48]	; (b4644 <_Z8get_datai+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4614:	9a08      	ldr	r2, [sp, #32]
   b4616:	781b      	ldrb	r3, [r3, #0]
   b4618:	490b      	ldr	r1, [pc, #44]	; (b4648 <_Z8get_datai+0x6c>)
   b461a:	f88d 3000 	strb.w	r3, [sp]
   b461e:	a806      	add	r0, sp, #24
   b4620:	233c      	movs	r3, #60	; 0x3c
   b4622:	f001 fcf3 	bl	b600c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4626:	a807      	add	r0, sp, #28
   b4628:	f7ff ffc2 	bl	b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b462c:	a808      	add	r0, sp, #32
   b462e:	f001 f8b1 	bl	b5794 <_ZN6StringD1Ev>
    
    // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
   b4632:	b00c      	add	sp, #48	; 0x30
   b4634:	bd10      	pop	{r4, pc}
   b4636:	bf00      	nop
   b4638:	2003d76c 	.word	0x2003d76c
   b463c:	2003dc79 	.word	0x2003dc79
   b4640:	000b9e0b 	.word	0x000b9e0b
   b4644:	2003d950 	.word	0x2003d950
   b4648:	000b9e5e 	.word	0x000b9e5e

000b464c <loop>:
{
   b464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4650:	b08a      	sub	sp, #40	; 0x28
    int currentHour = Time.hour();
   b4652:	f001 fab5 	bl	b5bc0 <_ZN9TimeClass4hourEv>
    if (( currentHour == PULL_TIME_1 || currentHour == PULL_TIME_2) && currentHour != oneShotGuard)
   b4656:	2817      	cmp	r0, #23
   b4658:	4c51      	ldr	r4, [pc, #324]	; (b47a0 <loop+0x154>)
   b465a:	d001      	beq.n	b4660 <loop+0x14>
   b465c:	280b      	cmp	r0, #11
   b465e:	d10d      	bne.n	b467c <loop+0x30>
   b4660:	4b50      	ldr	r3, [pc, #320]	; (b47a4 <loop+0x158>)
   b4662:	681a      	ldr	r2, [r3, #0]
   b4664:	4282      	cmp	r2, r0
   b4666:	d009      	beq.n	b467c <loop+0x30>
        oneShotGuard = currentHour;
   b4668:	6018      	str	r0, [r3, #0]
            digitalWrite(state, LOW);
   b466a:	2100      	movs	r1, #0
   b466c:	7820      	ldrb	r0, [r4, #0]
   b466e:	f002 fc22 	bl	b6eb6 <digitalWrite>
        state = GET_DATA;
   b4672:	2101      	movs	r1, #1
            digitalWrite(state, HIGH);
   b4674:	4608      	mov	r0, r1
        state = GET_DATA;
   b4676:	7021      	strb	r1, [r4, #0]
            digitalWrite(state, HIGH);
   b4678:	f002 fc1d 	bl	b6eb6 <digitalWrite>
    check_mqtt();
   b467c:	f7ff ff56 	bl	b452c <_Z10check_mqttv>
    if (state == GET_DATA)
   b4680:	7825      	ldrb	r5, [r4, #0]
   b4682:	2d01      	cmp	r5, #1
   b4684:	d10c      	bne.n	b46a0 <loop+0x54>
            digitalWrite(state, LOW);
   b4686:	2100      	movs	r1, #0
   b4688:	4628      	mov	r0, r5
   b468a:	f002 fc14 	bl	b6eb6 <digitalWrite>
        state = AWAITING_DATA;
   b468e:	2006      	movs	r0, #6
            digitalWrite(state, HIGH);
   b4690:	4629      	mov	r1, r5
        state = AWAITING_DATA;
   b4692:	7020      	strb	r0, [r4, #0]
            digitalWrite(state, HIGH);
   b4694:	f002 fc0f 	bl	b6eb6 <digitalWrite>
        get_data(Time.day());
   b4698:	f001 faaa 	bl	b5bf0 <_ZN9TimeClass3dayEv>
   b469c:	f7ff ff9e 	bl	b45dc <_Z8get_datai>
    if (state == CALCULATE)
   b46a0:	7823      	ldrb	r3, [r4, #0]
   b46a2:	2b02      	cmp	r3, #2
   b46a4:	d116      	bne.n	b46d4 <loop+0x88>
        cnt = calc_low(start_stop, cost, cost_hour, range);
   b46a6:	4b40      	ldr	r3, [pc, #256]	; (b47a8 <loop+0x15c>)
   b46a8:	4a40      	ldr	r2, [pc, #256]	; (b47ac <loop+0x160>)
   b46aa:	4941      	ldr	r1, [pc, #260]	; (b47b0 <loop+0x164>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	4841      	ldr	r0, [pc, #260]	; (b47b4 <loop+0x168>)
   b46b0:	f7ff fdd2 	bl	b4258 <_Z8calc_lowPA2_iPdPii>
   b46b4:	4b40      	ldr	r3, [pc, #256]	; (b47b8 <loop+0x16c>)
   b46b6:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b46b8:	f001 fefc 	bl	b64b4 <_Z16_fetch_usbserialv>
   b46bc:	4605      	mov	r5, r0
   b46be:	f001 fa7f 	bl	b5bc0 <_ZN9TimeClass4hourEv>
   b46c2:	4606      	mov	r6, r0
   b46c4:	f001 fa88 	bl	b5bd8 <_ZN9TimeClass6minuteEv>
   b46c8:	493c      	ldr	r1, [pc, #240]	; (b47bc <loop+0x170>)
   b46ca:	4603      	mov	r3, r0
   b46cc:	1cb2      	adds	r2, r6, #2
   b46ce:	4628      	mov	r0, r5
   b46d0:	f7ff fd08 	bl	b40e4 <_ZN5Print6printfEPKcz>
    if (state == TRANSMIT_PRICE)
   b46d4:	7823      	ldrb	r3, [r4, #0]
   b46d6:	2b03      	cmp	r3, #3
   b46d8:	d143      	bne.n	b4762 <loop+0x116>
        Serial.printf("In work\n");
   b46da:	f001 feeb 	bl	b64b4 <_Z16_fetch_usbserialv>
   b46de:	4938      	ldr	r1, [pc, #224]	; (b47c0 <loop+0x174>)
   b46e0:	4d34      	ldr	r5, [pc, #208]	; (b47b4 <loop+0x168>)
        for (int z = 0; z < cnt; z++)
   b46e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; b47b8 <loop+0x16c>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b46e6:	4f37      	ldr	r7, [pc, #220]	; (b47c4 <loop+0x178>)
        Serial.printf("In work\n");
   b46e8:	f7ff fcfc 	bl	b40e4 <_ZN5Print6printfEPKcz>
        String data = "Cheap(ish) hours of the day: ";
   b46ec:	4936      	ldr	r1, [pc, #216]	; (b47c8 <loop+0x17c>)
   b46ee:	a802      	add	r0, sp, #8
   b46f0:	f001 f89b 	bl	b582a <_ZN6StringC1EPK19__FlashStringHelper>
        for (int z = 0; z < cnt; z++)
   b46f4:	2600      	movs	r6, #0
   b46f6:	f8d8 3000 	ldr.w	r3, [r8]
   b46fa:	42b3      	cmp	r3, r6
   b46fc:	f105 0508 	add.w	r5, r5, #8
   b4700:	dd0e      	ble.n	b4720 <loop+0xd4>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b4702:	e955 2302 	ldrd	r2, r3, [r5, #-8]
   b4706:	4639      	mov	r1, r7
   b4708:	a806      	add	r0, sp, #24
   b470a:	f001 f8ef 	bl	b58ec <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b470e:	a906      	add	r1, sp, #24
   b4710:	a802      	add	r0, sp, #8
   b4712:	f001 f8da 	bl	b58ca <_ZN6String6concatERKS_>
   b4716:	a806      	add	r0, sp, #24
   b4718:	f001 f83c 	bl	b5794 <_ZN6StringD1Ev>
        for (int z = 0; z < cnt; z++)
   b471c:	3601      	adds	r6, #1
   b471e:	e7ea      	b.n	b46f6 <loop+0xaa>
   b4720:	4b2a      	ldr	r3, [pc, #168]	; (b47cc <loop+0x180>)
   b4722:	9a02      	ldr	r2, [sp, #8]
   b4724:	781b      	ldrb	r3, [r3, #0]
   b4726:	492a      	ldr	r1, [pc, #168]	; (b47d0 <loop+0x184>)
   b4728:	f88d 3000 	strb.w	r3, [sp]
   b472c:	a806      	add	r0, sp, #24
   b472e:	233c      	movs	r3, #60	; 0x3c
   b4730:	f001 fc6c 	bl	b600c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4734:	a807      	add	r0, sp, #28
   b4736:	f7ff ff3b 	bl	b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        client.publish("prices", data);
   b473a:	9a02      	ldr	r2, [sp, #8]
   b473c:	4925      	ldr	r1, [pc, #148]	; (b47d4 <loop+0x188>)
   b473e:	4826      	ldr	r0, [pc, #152]	; (b47d8 <loop+0x18c>)
   b4740:	f000 fb1f 	bl	b4d82 <_ZN4MQTT7publishEPKcS1_>
        client.loop();
   b4744:	4824      	ldr	r0, [pc, #144]	; (b47d8 <loop+0x18c>)
   b4746:	f000 fb78 	bl	b4e3a <_ZN4MQTT4loopEv>
            digitalWrite(state, LOW);
   b474a:	7820      	ldrb	r0, [r4, #0]
   b474c:	2100      	movs	r1, #0
   b474e:	f002 fbb2 	bl	b6eb6 <digitalWrite>
        state = SLEEP_STATE;
   b4752:	2005      	movs	r0, #5
            digitalWrite(state, HIGH);
   b4754:	2101      	movs	r1, #1
        state = SLEEP_STATE;
   b4756:	7020      	strb	r0, [r4, #0]
            digitalWrite(state, HIGH);
   b4758:	f002 fbad 	bl	b6eb6 <digitalWrite>
        String data = "Cheap(ish) hours of the day: ";
   b475c:	a802      	add	r0, sp, #8
   b475e:	f001 f819 	bl	b5794 <_ZN6StringD1Ev>
    if (state == TRANSMIT_SENSOR) // Did we receive a request for updated values
   b4762:	7823      	ldrb	r3, [r4, #0]
   b4764:	2b04      	cmp	r3, #4
   b4766:	d118      	bne.n	b479a <loop+0x14e>
        Serial.printf("Received power/get\n");
   b4768:	f001 fea4 	bl	b64b4 <_Z16_fetch_usbserialv>
   b476c:	491b      	ldr	r1, [pc, #108]	; (b47dc <loop+0x190>)
   b476e:	f7ff fcb9 	bl	b40e4 <_ZN5Print6printfEPKcz>
        sprintf(values,"%d", calc_power);
   b4772:	4b1b      	ldr	r3, [pc, #108]	; (b47e0 <loop+0x194>)
   b4774:	491b      	ldr	r1, [pc, #108]	; (b47e4 <loop+0x198>)
   b4776:	681a      	ldr	r2, [r3, #0]
   b4778:	a806      	add	r0, sp, #24
   b477a:	f000 ff25 	bl	b55c8 <sprintf>
        client.publish("power",values);
   b477e:	491a      	ldr	r1, [pc, #104]	; (b47e8 <loop+0x19c>)
   b4780:	4815      	ldr	r0, [pc, #84]	; (b47d8 <loop+0x18c>)
   b4782:	aa06      	add	r2, sp, #24
   b4784:	f000 fafd 	bl	b4d82 <_ZN4MQTT7publishEPKcS1_>
            digitalWrite(state, LOW);
   b4788:	7820      	ldrb	r0, [r4, #0]
   b478a:	2100      	movs	r1, #0
   b478c:	f002 fb93 	bl	b6eb6 <digitalWrite>
        state = SLEEP_STATE;
   b4790:	2005      	movs	r0, #5
            digitalWrite(state, HIGH);
   b4792:	2101      	movs	r1, #1
        state = SLEEP_STATE;
   b4794:	7020      	strb	r0, [r4, #0]
            digitalWrite(state, HIGH);
   b4796:	f002 fb8e 	bl	b6eb6 <digitalWrite>
}
   b479a:	b00a      	add	sp, #40	; 0x28
   b479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b47a0:	2003dc78 	.word	0x2003dc78
   b47a4:	2003d768 	.word	0x2003d768
   b47a8:	2003d76c 	.word	0x2003d76c
   b47ac:	2003dbb8 	.word	0x2003dbb8
   b47b0:	2003da38 	.word	0x2003da38
   b47b4:	2003d958 	.word	0x2003d958
   b47b8:	2003d9b8 	.word	0x2003d9b8
   b47bc:	000b9e67 	.word	0x000b9e67
   b47c0:	000b9e81 	.word	0x000b9e81
   b47c4:	000b9ea8 	.word	0x000b9ea8
   b47c8:	000b9e8a 	.word	0x000b9e8a
   b47cc:	2003d950 	.word	0x2003d950
   b47d0:	000b9eb7 	.word	0x000b9eb7
   b47d4:	000b9dce 	.word	0x000b9dce
   b47d8:	2003d9c0 	.word	0x2003d9c0
   b47dc:	000b9ec7 	.word	0x000b9ec7
   b47e0:	2003d9bc 	.word	0x2003d9bc
   b47e4:	000b9daf 	.word	0x000b9daf
   b47e8:	000b9edb 	.word	0x000b9edb

000b47ec <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii>:
   b47ec:	b530      	push	{r4, r5, lr}
        val_(val) {
   b47ee:	4b11      	ldr	r3, [pc, #68]	; (b4834 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x48>)
MQTT client("192.168.0.103", PORT, 512, 30, callback);
   b47f0:	4911      	ldr	r1, [pc, #68]	; (b4838 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x4c>)
   b47f2:	4812      	ldr	r0, [pc, #72]	; (b483c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x50>)
   b47f4:	b085      	sub	sp, #20
   b47f6:	2501      	movs	r5, #1
   b47f8:	701d      	strb	r5, [r3, #0]
MQTT client("192.168.0.103", PORT, 512, 30, callback);
   b47fa:	4b11      	ldr	r3, [pc, #68]	; (b4840 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x54>)
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	2400      	movs	r4, #0
   b4800:	231e      	movs	r3, #30
   b4802:	9300      	str	r3, [sp, #0]
   b4804:	9402      	str	r4, [sp, #8]
   b4806:	f44f 7300 	mov.w	r3, #512	; 0x200
   b480a:	f240 725b 	movw	r2, #1883	; 0x75b
   b480e:	f000 f861 	bl	b48d4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b4812:	4b0c      	ldr	r3, [pc, #48]	; (b4844 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x58>)
   b4814:	1d1a      	adds	r2, r3, #4
   b4816:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b4818:	4a0b      	ldr	r2, [pc, #44]	; (b4848 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x5c>)
   b481a:	605a      	str	r2, [r3, #4]
SYSTEM_THREAD(ENABLED);
   b481c:	4621      	mov	r1, r4
   b481e:	4628      	mov	r0, r5
              valid_(true) {
   b4820:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4824:	611c      	str	r4, [r3, #16]
   b4826:	751d      	strb	r5, [r3, #20]
   b4828:	b005      	add	sp, #20
   b482a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
SYSTEM_THREAD(ENABLED);
   b482e:	f000 bde7 	b.w	b5400 <system_thread_set_state>
   b4832:	bf00      	nop
   b4834:	2003d950 	.word	0x2003d950
   b4838:	000b9ee1 	.word	0x000b9ee1
   b483c:	2003d9c0 	.word	0x2003d9c0
   b4840:	000b40b9 	.word	0x000b40b9
   b4844:	2003da20 	.word	0x2003da20
   b4848:	00030010 	.word	0x00030010

000b484c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b484c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4850:	b510      	push	{r4, lr}
   b4852:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4854:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4856:	b113      	cbz	r3, b485e <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4858:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b485a:	f000 fca1 	bl	b51a0 <os_mutex_lock>
#endif
#endif
#endif
        }
   b485e:	4620      	mov	r0, r4
   b4860:	bd10      	pop	{r4, pc}

000b4862 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b4862:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4864:	6803      	ldr	r3, [r0, #0]
   b4866:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b486a:	4604      	mov	r4, r0
            if (mqtt->thread)
   b486c:	b112      	cbz	r2, b4874 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b486e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4870:	f000 fc9e 	bl	b51b0 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4874:	4620      	mov	r0, r4
   b4876:	bd10      	pop	{r4, pc}

000b4878 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b487a:	461f      	mov	r7, r3
   b487c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4880:	4604      	mov	r4, r0
   b4882:	460d      	mov	r5, r1
   b4884:	4616      	mov	r6, r2
    if (thread) {
   b4886:	b12b      	cbz	r3, b4894 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4888:	2301      	movs	r3, #1
   b488a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b488e:	3058      	adds	r0, #88	; 0x58
   b4890:	f000 fc7e 	bl	b5190 <os_mutex_create>
    }
    this->callback = callback;
   b4894:	9b08      	ldr	r3, [sp, #32]
   b4896:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4898:	2300      	movs	r3, #0
   b489a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b489c:	b106      	cbz	r6, b48a0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b489e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b48a0:	b125      	cbz	r5, b48ac <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b48a2:	4629      	mov	r1, r5
   b48a4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b48a8:	f000 ffd3 	bl	b5852 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b48ac:	9b06      	ldr	r3, [sp, #24]
   b48ae:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b48b0:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b48b2:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b48b4:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b48b8:	2bff      	cmp	r3, #255	; 0xff
   b48ba:	bfb8      	it	lt
   b48bc:	23ff      	movlt	r3, #255	; 0xff
   b48be:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b48c2:	b108      	cbz	r0, b48c8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b48c4:	f7ff fbeb 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b48c8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b48cc:	f7ff fbe5 	bl	b409a <_Znaj>
   b48d0:	61e0      	str	r0, [r4, #28]
}
   b48d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b48d4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b48d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b48d8:	4604      	mov	r4, r0
            bool thread) {
   b48da:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b48dc:	4617      	mov	r7, r2
   b48de:	4698      	mov	r8, r3
   b48e0:	460e      	mov	r6, r1
            bool thread) {
   b48e2:	f002 f995 	bl	b6c10 <_ZN9TCPClientC1Ev>
   b48e6:	490d      	ldr	r1, [pc, #52]	; (b491c <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b48e8:	61e5      	str	r5, [r4, #28]
   b48ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b48ee:	f000 ff9c 	bl	b582a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b48f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b48f6:	9303      	str	r3, [sp, #12]
   b48f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b48fa:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b48fc:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b4900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4902:	9300      	str	r3, [sp, #0]
   b4904:	4620      	mov	r0, r4
            bool thread) {
   b4906:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b490a:	463b      	mov	r3, r7
   b490c:	462a      	mov	r2, r5
   b490e:	4631      	mov	r1, r6
   b4910:	f7ff ffb2 	bl	b4878 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4914:	4620      	mov	r0, r4
   b4916:	b004      	add	sp, #16
   b4918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b491c:	000b9d7c 	.word	0x000b9d7c

000b4920 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4920:	b510      	push	{r4, lr}
   b4922:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4924:	4620      	mov	r0, r4
   b4926:	f002 f8cf 	bl	b6ac8 <_ZN9TCPClient9availableEv>
   b492a:	2800      	cmp	r0, #0
   b492c:	d0fa      	beq.n	b4924 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b492e:	4620      	mov	r0, r4
   b4930:	f001 fed8 	bl	b66e4 <_ZN9TCPClient4readEv>
}
   b4934:	b2c0      	uxtb	r0, r0
   b4936:	bd10      	pop	{r4, pc}

000b4938 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b493c:	4605      	mov	r5, r0
   b493e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4940:	f7ff ffee 	bl	b4920 <_ZN4MQTT8readByteEv>
   b4944:	69eb      	ldr	r3, [r5, #28]
   b4946:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4948:	69eb      	ldr	r3, [r5, #28]
   b494a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b494e:	f04f 0901 	mov.w	r9, #1
   b4952:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4956:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4958:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b495a:	4628      	mov	r0, r5
   b495c:	f7ff ffe0 	bl	b4920 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4960:	4626      	mov	r6, r4
   b4962:	69eb      	ldr	r3, [r5, #28]
   b4964:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4966:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b496a:	fb13 f309 	smulbb	r3, r3, r9
   b496e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4970:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b4972:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b4974:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b4976:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4978:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b497c:	d4ed      	bmi.n	b495a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b497e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4980:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b4984:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4988:	d11e      	bne.n	b49c8 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b498a:	4628      	mov	r0, r5
   b498c:	f7ff ffc8 	bl	b4920 <_ZN4MQTT8readByteEv>
   b4990:	69eb      	ldr	r3, [r5, #28]
   b4992:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b4994:	4628      	mov	r0, r5
   b4996:	f7ff ffc3 	bl	b4920 <_ZN4MQTT8readByteEv>
   b499a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b499c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b499e:	b2b6      	uxth	r6, r6
   b49a0:	69eb      	ldr	r3, [r5, #28]
   b49a2:	b2a4      	uxth	r4, r4
   b49a4:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b49a6:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b49a8:	b2b6      	uxth	r6, r6
   b49aa:	42be      	cmp	r6, r7
   b49ac:	d20e      	bcs.n	b49cc <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b49ae:	4628      	mov	r0, r5
   b49b0:	f7ff ffb6 	bl	b4920 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b49b4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b49b8:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b49ba:	bf84      	itt	hi
   b49bc:	69eb      	ldrhi	r3, [r5, #28]
   b49be:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b49c0:	3401      	adds	r4, #1
   b49c2:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b49c4:	3601      	adds	r6, #1
   b49c6:	e7ef      	b.n	b49a8 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b49c8:	2600      	movs	r6, #0
   b49ca:	e7ed      	b.n	b49a8 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b49cc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b49d0:	42a3      	cmp	r3, r4
   b49d2:	bf2c      	ite	cs
   b49d4:	4620      	movcs	r0, r4
   b49d6:	2000      	movcc	r0, #0
   b49d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b49dc <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b49dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b49e0:	4615      	mov	r5, r2
   b49e2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b49e4:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b49e6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b49e8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b49ea:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b49ec:	a802      	add	r0, sp, #8
        digit = len % 128;
   b49ee:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b49f2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b49f6:	f103 0401 	add.w	r4, r3, #1
   b49fa:	4403      	add	r3, r0
            digit |= 0x80;
   b49fc:	bf88      	it	hi
   b49fe:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b4a02:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4a06:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4a0a:	b2e4      	uxtb	r4, r4
   b4a0c:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4a10:	d81e      	bhi.n	b4a50 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b4a12:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b4a16:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4a1a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4a1c:	4622      	mov	r2, r4
   b4a1e:	a901      	add	r1, sp, #4
   b4a20:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4a22:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4a26:	f003 f8a8 	bl	b7b7a <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4a2a:	1c72      	adds	r2, r6, #1
   b4a2c:	4422      	add	r2, r4
   b4a2e:	4641      	mov	r1, r8
   b4a30:	4638      	mov	r0, r7
   b4a32:	f001 fe42 	bl	b66ba <_ZN9TCPClient5writeEPKhj>
   b4a36:	4605      	mov	r5, r0
   b4a38:	f000 fb92 	bl	b5160 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4a3c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b4a3e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4a40:	4432      	add	r2, r6
   b4a42:	b2a8      	uxth	r0, r5
}
   b4a44:	1a13      	subs	r3, r2, r0
   b4a46:	4258      	negs	r0, r3
   b4a48:	4158      	adcs	r0, r3
   b4a4a:	b002      	add	sp, #8
   b4a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4a50:	4623      	mov	r3, r4
   b4a52:	e7ca      	b.n	b49ea <_ZN4MQTT5writeEhPht+0xe>

000b4a54 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4a54:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4a56:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a58:	4605      	mov	r5, r0
    pos += 2;
   b4a5a:	b298      	uxth	r0, r3
   b4a5c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b4a5e:	5cce      	ldrb	r6, [r1, r3]
   b4a60:	b29c      	uxth	r4, r3
   b4a62:	b156      	cbz	r6, b4a7a <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4a64:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4a68:	4584      	cmp	ip, r0
   b4a6a:	f103 0701 	add.w	r7, r3, #1
   b4a6e:	d904      	bls.n	b4a7a <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b4a70:	1c44      	adds	r4, r0, #1
   b4a72:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b4a74:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b4a76:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4a78:	e7f1      	b.n	b4a5e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b4a7a:	b299      	uxth	r1, r3
   b4a7c:	1a41      	subs	r1, r0, r1
   b4a7e:	440a      	add	r2, r1
   b4a80:	0a21      	lsrs	r1, r4, #8
   b4a82:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4a86:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b4a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4a8c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4a8c:	b538      	push	{r3, r4, r5, lr}
   b4a8e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4a90:	f001 ff3c 	bl	b690c <_ZN9TCPClient9connectedEv>
   b4a94:	2800      	cmp	r0, #0
   b4a96:	bf14      	ite	ne
   b4a98:	2501      	movne	r5, #1
   b4a9a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4a9c:	d102      	bne.n	b4aa4 <_ZN4MQTT11isConnectedEv+0x18>
   b4a9e:	4620      	mov	r0, r4
   b4aa0:	f002 f86c 	bl	b6b7c <_ZN9TCPClient4stopEv>
    return rc;
}
   b4aa4:	4628      	mov	r0, r5
   b4aa6:	bd38      	pop	{r3, r4, r5, pc}

000b4aa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4aac:	b088      	sub	sp, #32
   b4aae:	4604      	mov	r4, r0
   b4ab0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4ab4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4ab8:	4689      	mov	r9, r1
   b4aba:	4617      	mov	r7, r2
   b4abc:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4abe:	f7ff ffe5 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b4ac2:	4605      	mov	r5, r0
   b4ac4:	2800      	cmp	r0, #0
   b4ac6:	f040 80cd 	bne.w	b4c64 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4aca:	4621      	mov	r1, r4
   b4acc:	a801      	add	r0, sp, #4
   b4ace:	f7ff febd 	bl	b484c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4ad2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4ad4:	2900      	cmp	r1, #0
   b4ad6:	f040 8088 	bne.w	b4bea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4ada:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4ade:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4ae0:	462b      	mov	r3, r5
   b4ae2:	4620      	mov	r0, r4
   b4ae4:	f001 fe94 	bl	b6810 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4ae8:	2800      	cmp	r0, #0
   b4aea:	d07a      	beq.n	b4be2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4aec:	2301      	movs	r3, #1
   b4aee:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4af0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4af4:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4af6:	2b04      	cmp	r3, #4
   b4af8:	4b5b      	ldr	r3, [pc, #364]	; (b4c68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4afa:	f040 8081 	bne.w	b4c00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4afe:	6818      	ldr	r0, [r3, #0]
   b4b00:	8899      	ldrh	r1, [r3, #4]
   b4b02:	799b      	ldrb	r3, [r3, #6]
   b4b04:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4b08:	f88d 300e 	strb.w	r3, [sp, #14]
   b4b0c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4b0e:	f8c2 0005 	str.w	r0, [r2, #5]
   b4b12:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4b16:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4b1a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4b1e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4b20:	230c      	movs	r3, #12
            if (willTopic) {
   b4b22:	f1b8 0f00 	cmp.w	r8, #0
   b4b26:	f000 8081 	beq.w	b4c2c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4b2a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b4b2e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4b32:	0140      	lsls	r0, r0, #5
   b4b34:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4b38:	f040 0006 	orr.w	r0, r0, #6
   b4b3c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b4b3e:	f1ba 0f00 	cmp.w	sl, #0
   b4b42:	d101      	bne.n	b4b48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4b44:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4b48:	b11f      	cbz	r7, b4b52 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4b4a:	2e00      	cmp	r6, #0
   b4b4c:	d170      	bne.n	b4c30 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b4b4e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4b52:	69e2      	ldr	r2, [r4, #28]
   b4b54:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4b56:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4b58:	69e1      	ldr	r1, [r4, #28]
   b4b5a:	1c58      	adds	r0, r3, #1
   b4b5c:	1212      	asrs	r2, r2, #8
   b4b5e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b4b60:	1c9a      	adds	r2, r3, #2
   b4b62:	69e1      	ldr	r1, [r4, #28]
   b4b64:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4b66:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4b68:	3303      	adds	r3, #3
   b4b6a:	69e2      	ldr	r2, [r4, #28]
   b4b6c:	4649      	mov	r1, r9
   b4b6e:	4620      	mov	r0, r4
   b4b70:	f7ff ff70 	bl	b4a54 <_ZN4MQTT11writeStringEPKcPht>
   b4b74:	4603      	mov	r3, r0
            if (willTopic) {
   b4b76:	f1b8 0f00 	cmp.w	r8, #0
   b4b7a:	d00b      	beq.n	b4b94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4b7c:	69e2      	ldr	r2, [r4, #28]
   b4b7e:	4641      	mov	r1, r8
   b4b80:	4620      	mov	r0, r4
   b4b82:	f7ff ff67 	bl	b4a54 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b4b86:	69e2      	ldr	r2, [r4, #28]
   b4b88:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4b8a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4b8c:	4620      	mov	r0, r4
   b4b8e:	f7ff ff61 	bl	b4a54 <_ZN4MQTT11writeStringEPKcPht>
   b4b92:	4603      	mov	r3, r0
            if(user != NULL) {
   b4b94:	b167      	cbz	r7, b4bb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b4b96:	69e2      	ldr	r2, [r4, #28]
   b4b98:	4639      	mov	r1, r7
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	f7ff ff5a 	bl	b4a54 <_ZN4MQTT11writeStringEPKcPht>
   b4ba0:	4603      	mov	r3, r0
                if(pass != NULL) {
   b4ba2:	b12e      	cbz	r6, b4bb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b4ba4:	69e2      	ldr	r2, [r4, #28]
   b4ba6:	4631      	mov	r1, r6
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f7ff ff53 	bl	b4a54 <_ZN4MQTT11writeStringEPKcPht>
   b4bae:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4bb0:	3b05      	subs	r3, #5
   b4bb2:	69e2      	ldr	r2, [r4, #28]
   b4bb4:	b29b      	uxth	r3, r3
   b4bb6:	2110      	movs	r1, #16
   b4bb8:	4620      	mov	r0, r4
   b4bba:	f7ff ff0f 	bl	b49dc <_ZN4MQTT5writeEhPht>
   b4bbe:	f000 facf 	bl	b5160 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4bc2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4bc6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4bca:	4620      	mov	r0, r4
   b4bcc:	f001 ff7c 	bl	b6ac8 <_ZN9TCPClient9availableEv>
   b4bd0:	bb88      	cbnz	r0, b4c36 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b4bd2:	f000 fac5 	bl	b5160 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4bd8:	1ac0      	subs	r0, r0, r3
   b4bda:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4bdc:	4373      	muls	r3, r6
   b4bde:	4298      	cmp	r0, r3
   b4be0:	d9f3      	bls.n	b4bca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b4be2:	4620      	mov	r0, r4
   b4be4:	f001 ffca 	bl	b6b7c <_ZN9TCPClient4stopEv>
   b4be8:	e035      	b.n	b4c56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4bea:	a802      	add	r0, sp, #8
   b4bec:	f001 fbf8 	bl	b63e0 <_ZN9IPAddressC1EPKh>
   b4bf0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4bf4:	462b      	mov	r3, r5
   b4bf6:	a902      	add	r1, sp, #8
   b4bf8:	4620      	mov	r0, r4
   b4bfa:	f001 fee9 	bl	b69d0 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4bfe:	e773      	b.n	b4ae8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4c00:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4c04:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4c08:	7bdb      	ldrb	r3, [r3, #15]
   b4c0a:	f10d 0c08 	add.w	ip, sp, #8
   b4c0e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b4c12:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b4c16:	ab02      	add	r3, sp, #8
   b4c18:	cb03      	ldmia	r3!, {r0, r1}
   b4c1a:	f8c2 0005 	str.w	r0, [r2, #5]
   b4c1e:	f8c2 1009 	str.w	r1, [r2, #9]
   b4c22:	f89c 3000 	ldrb.w	r3, [ip]
   b4c26:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b4c28:	230e      	movs	r3, #14
   b4c2a:	e77a      	b.n	b4b22 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b4c2c:	2002      	movs	r0, #2
   b4c2e:	e786      	b.n	b4b3e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b4c30:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4c34:	e78d      	b.n	b4b52 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4c36:	a902      	add	r1, sp, #8
   b4c38:	4620      	mov	r0, r4
   b4c3a:	f7ff fe7d 	bl	b4938 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b4c3e:	2804      	cmp	r0, #4
   b4c40:	d1cf      	bne.n	b4be2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b4c42:	69e3      	ldr	r3, [r4, #28]
   b4c44:	78de      	ldrb	r6, [r3, #3]
   b4c46:	2e00      	cmp	r6, #0
   b4c48:	d1cb      	bne.n	b4be2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b4c4a:	f000 fa89 	bl	b5160 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b4c4e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b4c50:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b4c52:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4c56:	a801      	add	r0, sp, #4
   b4c58:	f7ff fe03 	bl	b4862 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4c5c:	4628      	mov	r0, r5
   b4c5e:	b008      	add	sp, #32
   b4c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b4c64:	2500      	movs	r5, #0
   b4c66:	e7f9      	b.n	b4c5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4c68:	000b9eef 	.word	0x000b9eef

000b4c6c <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4c6c:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4c6e:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4c72:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4c74:	2401      	movs	r4, #1
   b4c76:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b4c7a:	2400      	movs	r4, #0
   b4c7c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b4c80:	e9cd 4400 	strd	r4, r4, [sp]
   b4c84:	f7ff ff10 	bl	b4aa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b4c88:	b006      	add	sp, #24
   b4c8a:	bd10      	pop	{r4, pc}

000b4c8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c90:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b4c94:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b4c98:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4c9c:	4604      	mov	r4, r0
   b4c9e:	468b      	mov	fp, r1
   b4ca0:	4616      	mov	r6, r2
   b4ca2:	461f      	mov	r7, r3
    if (isConnected()) {
   b4ca4:	f7ff fef2 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b4ca8:	4682      	mov	sl, r0
   b4caa:	2800      	cmp	r0, #0
   b4cac:	d051      	beq.n	b4d52 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4cae:	4621      	mov	r1, r4
   b4cb0:	a801      	add	r0, sp, #4
   b4cb2:	f7ff fdcb 	bl	b484c <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b4cb6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b4cba:	69e0      	ldr	r0, [r4, #28]
   b4cbc:	2100      	movs	r1, #0
   b4cbe:	f002 ff6a 	bl	b7b96 <memset>
        length = writeString(topic, buffer, length);
   b4cc2:	2305      	movs	r3, #5
   b4cc4:	69e2      	ldr	r2, [r4, #28]
   b4cc6:	4659      	mov	r1, fp
   b4cc8:	4620      	mov	r0, r4
   b4cca:	f7ff fec3 	bl	b4a54 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4cce:	1e6b      	subs	r3, r5, #1
   b4cd0:	2b01      	cmp	r3, #1
   b4cd2:	d815      	bhi.n	b4d00 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4cd4:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4cd6:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4cd8:	3101      	adds	r1, #1
   b4cda:	b289      	uxth	r1, r1
   b4cdc:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4cde:	0a09      	lsrs	r1, r1, #8
   b4ce0:	5419      	strb	r1, [r3, r0]
   b4ce2:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4ce4:	69e3      	ldr	r3, [r4, #28]
   b4ce6:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4ce8:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4cea:	3002      	adds	r0, #2
   b4cec:	5499      	strb	r1, [r3, r2]
   b4cee:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4cf0:	f1b8 0f00 	cmp.w	r8, #0
   b4cf4:	d004      	beq.n	b4d00 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b4cf6:	8c23      	ldrh	r3, [r4, #32]
   b4cf8:	1c5a      	adds	r2, r3, #1
   b4cfa:	8422      	strh	r2, [r4, #32]
   b4cfc:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4d00:	2100      	movs	r1, #0
   b4d02:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4d04:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b4d06:	69e2      	ldr	r2, [r4, #28]
   b4d08:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4d0a:	d90a      	bls.n	b4d22 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4d0c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4d10:	459c      	cmp	ip, r3
   b4d12:	d906      	bls.n	b4d22 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4d14:	f816 c001 	ldrb.w	ip, [r6, r1]
   b4d18:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4d1c:	3101      	adds	r1, #1
   b4d1e:	b289      	uxth	r1, r1
   b4d20:	e7ef      	b.n	b4d02 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b4d22:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b4d26:	2900      	cmp	r1, #0
   b4d28:	bf0c      	ite	eq
   b4d2a:	2130      	moveq	r1, #48	; 0x30
   b4d2c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b4d2e:	f1b9 0f00 	cmp.w	r9, #0
   b4d32:	d001      	beq.n	b4d38 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4d34:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b4d38:	2d02      	cmp	r5, #2
   b4d3a:	d10e      	bne.n	b4d5a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b4d3c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b4d40:	3b05      	subs	r3, #5
   b4d42:	b29b      	uxth	r3, r3
   b4d44:	4620      	mov	r0, r4
   b4d46:	f7ff fe49 	bl	b49dc <_ZN4MQTT5writeEhPht>
   b4d4a:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4d4c:	a801      	add	r0, sp, #4
   b4d4e:	f7ff fd88 	bl	b4862 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4d52:	4650      	mov	r0, sl
   b4d54:	b003      	add	sp, #12
   b4d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b4d5a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b4d5c:	bf08      	it	eq
   b4d5e:	f041 0102 	orreq.w	r1, r1, #2
   b4d62:	e7ed      	b.n	b4d40 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b4d64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b4d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b4d66:	9c08      	ldr	r4, [sp, #32]
   b4d68:	9403      	str	r4, [sp, #12]
   b4d6a:	2400      	movs	r4, #0
   b4d6c:	9402      	str	r4, [sp, #8]
   b4d6e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b4d72:	9401      	str	r4, [sp, #4]
   b4d74:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b4d78:	9400      	str	r4, [sp, #0]
   b4d7a:	f7ff ff87 	bl	b4c8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b4d7e:	b004      	add	sp, #16
   b4d80:	bd10      	pop	{r4, pc}

000b4d82 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b4d82:	b530      	push	{r4, r5, lr}
   b4d84:	b087      	sub	sp, #28
   b4d86:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4d88:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b4d8a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4d8c:	9204      	str	r2, [sp, #16]
   b4d8e:	f002 ff78 	bl	b7c82 <strlen>
   b4d92:	2500      	movs	r5, #0
   b4d94:	4603      	mov	r3, r0
   b4d96:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4d9a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4d9e:	9500      	str	r5, [sp, #0]
   b4da0:	4620      	mov	r0, r4
   b4da2:	f7ff ffdf 	bl	b4d64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b4da6:	b007      	add	sp, #28
   b4da8:	bd30      	pop	{r4, r5, pc}

000b4daa <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b4daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4dac:	4604      	mov	r4, r0
   b4dae:	460e      	mov	r6, r1
    if (isConnected()) {
   b4db0:	f7ff fe6c 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b4db4:	4605      	mov	r5, r0
   b4db6:	b1c8      	cbz	r0, b4dec <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4db8:	4621      	mov	r1, r4
   b4dba:	a801      	add	r0, sp, #4
   b4dbc:	f7ff fd46 	bl	b484c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4dc0:	69e3      	ldr	r3, [r4, #28]
   b4dc2:	2262      	movs	r2, #98	; 0x62
   b4dc4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4dc6:	69e3      	ldr	r3, [r4, #28]
   b4dc8:	2202      	movs	r2, #2
   b4dca:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4dcc:	69e3      	ldr	r3, [r4, #28]
   b4dce:	0a32      	lsrs	r2, r6, #8
   b4dd0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4dd2:	69e3      	ldr	r3, [r4, #28]
   b4dd4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4dd6:	69e1      	ldr	r1, [r4, #28]
   b4dd8:	2204      	movs	r2, #4
   b4dda:	4620      	mov	r0, r4
   b4ddc:	f001 fc6d 	bl	b66ba <_ZN9TCPClient5writeEPKhj>
   b4de0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4de2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4de4:	bf18      	it	ne
   b4de6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4de8:	f7ff fd3b 	bl	b4862 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4dec:	4628      	mov	r0, r5
   b4dee:	b002      	add	sp, #8
   b4df0:	bd70      	pop	{r4, r5, r6, pc}

000b4df2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b4df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4df4:	4604      	mov	r4, r0
   b4df6:	460e      	mov	r6, r1
    if (isConnected()) {
   b4df8:	f7ff fe48 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b4dfc:	4605      	mov	r5, r0
   b4dfe:	b1c8      	cbz	r0, b4e34 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4e00:	4621      	mov	r1, r4
   b4e02:	a801      	add	r0, sp, #4
   b4e04:	f7ff fd22 	bl	b484c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4e08:	69e3      	ldr	r3, [r4, #28]
   b4e0a:	2272      	movs	r2, #114	; 0x72
   b4e0c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4e0e:	69e3      	ldr	r3, [r4, #28]
   b4e10:	2202      	movs	r2, #2
   b4e12:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4e14:	69e3      	ldr	r3, [r4, #28]
   b4e16:	0a32      	lsrs	r2, r6, #8
   b4e18:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4e1a:	69e3      	ldr	r3, [r4, #28]
   b4e1c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4e1e:	69e1      	ldr	r1, [r4, #28]
   b4e20:	2204      	movs	r2, #4
   b4e22:	4620      	mov	r0, r4
   b4e24:	f001 fc49 	bl	b66ba <_ZN9TCPClient5writeEPKhj>
   b4e28:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4e2a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4e2c:	bf18      	it	ne
   b4e2e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4e30:	f7ff fd17 	bl	b4862 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4e34:	4628      	mov	r0, r5
   b4e36:	b002      	add	sp, #8
   b4e38:	bd70      	pop	{r4, r5, r6, pc}

000b4e3a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b4e3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e3e:	ed2d 8b02 	vpush	{d8}
   b4e42:	b087      	sub	sp, #28
   b4e44:	af00      	add	r7, sp, #0
   b4e46:	4604      	mov	r4, r0
    if (isConnected()) {
   b4e48:	f7ff fe20 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b4e4c:	4681      	mov	r9, r0
   b4e4e:	b1f8      	cbz	r0, b4e90 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b4e50:	4621      	mov	r1, r4
   b4e52:	f107 0014 	add.w	r0, r7, #20
   b4e56:	f7ff fcf9 	bl	b484c <_ZN4MQTT11MutexLockerC1EPS_>
   b4e5a:	f000 f981 	bl	b5160 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b4e5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4e64:	4353      	muls	r3, r2
   b4e66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4e68:	1a82      	subs	r2, r0, r2
   b4e6a:	429a      	cmp	r2, r3
   b4e6c:	4606      	mov	r6, r0
   b4e6e:	d803      	bhi.n	b4e78 <_ZN4MQTT4loopEv+0x3e>
   b4e70:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4e72:	1a82      	subs	r2, r0, r2
   b4e74:	4293      	cmp	r3, r2
   b4e76:	d221      	bcs.n	b4ebc <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b4e78:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4e7c:	b17b      	cbz	r3, b4e9e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b4e7e:	4620      	mov	r0, r4
   b4e80:	f001 fe7c 	bl	b6b7c <_ZN9TCPClient4stopEv>
                return false;
   b4e84:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b4e88:	f107 0014 	add.w	r0, r7, #20
   b4e8c:	f7ff fce9 	bl	b4862 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4e90:	4648      	mov	r0, r9
   b4e92:	371c      	adds	r7, #28
   b4e94:	46bd      	mov	sp, r7
   b4e96:	ecbd 8b02 	vpop	{d8}
   b4e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4e9e:	69e2      	ldr	r2, [r4, #28]
   b4ea0:	21c0      	movs	r1, #192	; 0xc0
   b4ea2:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4ea4:	69e2      	ldr	r2, [r4, #28]
   b4ea6:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b4ea8:	69e1      	ldr	r1, [r4, #28]
   b4eaa:	2202      	movs	r2, #2
   b4eac:	4620      	mov	r0, r4
   b4eae:	f001 fc04 	bl	b66ba <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4eb2:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4eb6:	2301      	movs	r3, #1
   b4eb8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	f001 fe03 	bl	b6ac8 <_ZN9TCPClient9availableEv>
   b4ec2:	2800      	cmp	r0, #0
   b4ec4:	d0e0      	beq.n	b4e88 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4ec6:	f107 0113 	add.w	r1, r7, #19
   b4eca:	4620      	mov	r0, r4
   b4ecc:	f7ff fd34 	bl	b4938 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4ed0:	4683      	mov	fp, r0
   b4ed2:	2800      	cmp	r0, #0
   b4ed4:	d0d8      	beq.n	b4e88 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4ed6:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4ed8:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4eda:	7819      	ldrb	r1, [r3, #0]
   b4edc:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4ee0:	2a30      	cmp	r2, #48	; 0x30
   b4ee2:	d17f      	bne.n	b4fe4 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4ee4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4ee8:	f1ba 0f00 	cmp.w	sl, #0
   b4eec:	d0cc      	beq.n	b4e88 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4eee:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4ef2:	466a      	mov	r2, sp
   b4ef4:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4ef8:	eb03 020c 	add.w	r2, r3, ip
   b4efc:	7851      	ldrb	r1, [r2, #1]
   b4efe:	7895      	ldrb	r5, [r2, #2]
   b4f00:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4f04:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b4f06:	f105 0208 	add.w	r2, r5, #8
   b4f0a:	4669      	mov	r1, sp
   b4f0c:	08d2      	lsrs	r2, r2, #3
   b4f0e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4f12:	4695      	mov	sp, r2
   b4f14:	f10c 0203 	add.w	r2, ip, #3
   b4f18:	60fa      	str	r2, [r7, #12]
   b4f1a:	eb03 0e02 	add.w	lr, r3, r2
   b4f1e:	eb0d 0205 	add.w	r2, sp, r5
   b4f22:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4f24:	f8c7 d008 	str.w	sp, [r7, #8]
   b4f28:	607a      	str	r2, [r7, #4]
   b4f2a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b4f2e:	428a      	cmp	r2, r1
   b4f30:	d006      	beq.n	b4f40 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b4f32:	460a      	mov	r2, r1
   b4f34:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b4f38:	f802 8b01 	strb.w	r8, [r2], #1
   b4f3c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b4f3e:	e7f4      	b.n	b4f2a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b4f40:	2200      	movs	r2, #0
   b4f42:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4f44:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f48:	68f9      	ldr	r1, [r7, #12]
   b4f4a:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4f4e:	ebab 020c 	sub.w	r2, fp, ip
   b4f52:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4f54:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b4f58:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f5c:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4f5e:	d125      	bne.n	b4fac <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f60:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4f64:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4f66:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f68:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b4f6c:	f10c 0105 	add.w	r1, ip, #5
   b4f70:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4f72:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f74:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4f78:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4f7a:	69e3      	ldr	r3, [r4, #28]
   b4f7c:	2240      	movs	r2, #64	; 0x40
   b4f7e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4f80:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f82:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4f86:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4f8a:	69e3      	ldr	r3, [r4, #28]
   b4f8c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4f90:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4f92:	69e3      	ldr	r3, [r4, #28]
   b4f94:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4f98:	69e1      	ldr	r1, [r4, #28]
   b4f9a:	2204      	movs	r2, #4
   b4f9c:	4620      	mov	r0, r4
   b4f9e:	f001 fb8c 	bl	b66ba <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4fa2:	6266      	str	r6, [r4, #36]	; 0x24
   b4fa4:	ee18 3a10 	vmov	r3, s16
   b4fa8:	469d      	mov	sp, r3
   b4faa:	e76d      	b.n	b4e88 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4fac:	f1b8 0f04 	cmp.w	r8, #4
   b4fb0:	d115      	bne.n	b4fde <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4fb2:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4fb6:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4fb8:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4fba:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4fbe:	f10c 0105 	add.w	r1, ip, #5
   b4fc2:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4fc4:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4fc6:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4fca:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4fcc:	69e3      	ldr	r3, [r4, #28]
   b4fce:	2250      	movs	r2, #80	; 0x50
   b4fd0:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4fd2:	69e3      	ldr	r3, [r4, #28]
   b4fd4:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4fd6:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4fda:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4fdc:	e7d5      	b.n	b4f8a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4fde:	4419      	add	r1, r3
   b4fe0:	47d0      	blx	sl
   b4fe2:	e7df      	b.n	b4fa4 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4fe4:	2a50      	cmp	r2, #80	; 0x50
   b4fe6:	d108      	bne.n	b4ffa <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4fe8:	789a      	ldrb	r2, [r3, #2]
   b4fea:	78d9      	ldrb	r1, [r3, #3]
   b4fec:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4ff0:	b289      	uxth	r1, r1
   b4ff2:	4620      	mov	r0, r4
   b4ff4:	f7ff fed9 	bl	b4daa <_ZN4MQTT14publishReleaseEt>
   b4ff8:	e746      	b.n	b4e88 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4ffa:	2a40      	cmp	r2, #64	; 0x40
   b4ffc:	d112      	bne.n	b5024 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4ffe:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5000:	2a00      	cmp	r2, #0
   b5002:	f43f af41 	beq.w	b4e88 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5006:	f1bb 0f04 	cmp.w	fp, #4
   b500a:	f47f af3d 	bne.w	b4e88 <_ZN4MQTT4loopEv+0x4e>
   b500e:	f011 0f06 	tst.w	r1, #6
   b5012:	f47f af39 	bne.w	b4e88 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5016:	7899      	ldrb	r1, [r3, #2]
   b5018:	78d8      	ldrb	r0, [r3, #3]
   b501a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b501e:	b280      	uxth	r0, r0
   b5020:	4790      	blx	r2
   b5022:	e731      	b.n	b4e88 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5024:	2a60      	cmp	r2, #96	; 0x60
   b5026:	d108      	bne.n	b503a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5028:	789a      	ldrb	r2, [r3, #2]
   b502a:	78d9      	ldrb	r1, [r3, #3]
   b502c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5030:	b289      	uxth	r1, r1
   b5032:	4620      	mov	r0, r4
   b5034:	f7ff fedd 	bl	b4df2 <_ZN4MQTT15publishCompleteEt>
   b5038:	e726      	b.n	b4e88 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b503a:	2a70      	cmp	r2, #112	; 0x70
   b503c:	d0df      	beq.n	b4ffe <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b503e:	2a90      	cmp	r2, #144	; 0x90
   b5040:	f43f af22 	beq.w	b4e88 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5044:	2ac0      	cmp	r2, #192	; 0xc0
   b5046:	d10a      	bne.n	b505e <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5048:	22d0      	movs	r2, #208	; 0xd0
   b504a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b504c:	69e3      	ldr	r3, [r4, #28]
   b504e:	2200      	movs	r2, #0
   b5050:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5052:	69e1      	ldr	r1, [r4, #28]
   b5054:	2202      	movs	r2, #2
   b5056:	4620      	mov	r0, r4
   b5058:	f001 fb2f 	bl	b66ba <_ZN9TCPClient5writeEPKhj>
   b505c:	e714      	b.n	b4e88 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b505e:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5060:	bf04      	itt	eq
   b5062:	2300      	moveq	r3, #0
   b5064:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5068:	e70e      	b.n	b4e88 <_ZN4MQTT4loopEv+0x4e>

000b506a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b506a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b506c:	4604      	mov	r4, r0
   b506e:	460f      	mov	r7, r1
   b5070:	4616      	mov	r6, r2
    if (isConnected()) {
   b5072:	f7ff fd0b 	bl	b4a8c <_ZN4MQTT11isConnectedEv>
   b5076:	4605      	mov	r5, r0
   b5078:	b310      	cbz	r0, b50c0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b507a:	4621      	mov	r1, r4
   b507c:	a801      	add	r0, sp, #4
   b507e:	f7ff fbe5 	bl	b484c <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5082:	8c23      	ldrh	r3, [r4, #32]
   b5084:	3301      	adds	r3, #1
   b5086:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5088:	b1eb      	cbz	r3, b50c6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b508a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b508c:	8c23      	ldrh	r3, [r4, #32]
   b508e:	69e2      	ldr	r2, [r4, #28]
   b5090:	0a1b      	lsrs	r3, r3, #8
   b5092:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5094:	69e3      	ldr	r3, [r4, #28]
   b5096:	8c22      	ldrh	r2, [r4, #32]
   b5098:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b509a:	69e2      	ldr	r2, [r4, #28]
   b509c:	2307      	movs	r3, #7
   b509e:	4639      	mov	r1, r7
   b50a0:	4620      	mov	r0, r4
   b50a2:	f7ff fcd7 	bl	b4a54 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b50a6:	69e3      	ldr	r3, [r4, #28]
   b50a8:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b50aa:	3804      	subs	r0, #4
   b50ac:	b283      	uxth	r3, r0
   b50ae:	69e2      	ldr	r2, [r4, #28]
   b50b0:	2182      	movs	r1, #130	; 0x82
   b50b2:	4620      	mov	r0, r4
   b50b4:	f7ff fc92 	bl	b49dc <_ZN4MQTT5writeEhPht>
   b50b8:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b50ba:	a801      	add	r0, sp, #4
   b50bc:	f7ff fbd1 	bl	b4862 <_ZN4MQTT11MutexLockerD1Ev>
}
   b50c0:	4628      	mov	r0, r5
   b50c2:	b003      	add	sp, #12
   b50c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b50c6:	2301      	movs	r3, #1
   b50c8:	e7df      	b.n	b508a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b50ca <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b50ca:	2200      	movs	r2, #0
   b50cc:	f7ff bfcd 	b.w	b506a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b50d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <netdb_freeaddrinfo+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	689b      	ldr	r3, [r3, #8]
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	00030268 	.word	0x00030268

000b50e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <netdb_getaddrinfo+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	68db      	ldr	r3, [r3, #12]
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	00030268 	.word	0x00030268

000b50f0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <HAL_Pin_Mode+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	689b      	ldr	r3, [r3, #8]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	0003022c 	.word	0x0003022c

000b5100 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <HAL_Get_Pin_Mode+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	68db      	ldr	r3, [r3, #12]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	0003022c 	.word	0x0003022c

000b5110 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <HAL_GPIO_Write+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	691b      	ldr	r3, [r3, #16]
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	0003022c 	.word	0x0003022c

000b5120 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <HAL_Interrupts_Attach+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	699b      	ldr	r3, [r3, #24]
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	0003022c 	.word	0x0003022c

000b5130 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <HAL_Interrupts_Detach+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	69db      	ldr	r3, [r3, #28]
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	0003022c 	.word	0x0003022c

000b5140 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <if_index_to_name+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	695b      	ldr	r3, [r3, #20]
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	0003026c 	.word	0x0003026c

000b5150 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <HAL_RNG_GetRandomNumber+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	685b      	ldr	r3, [r3, #4]
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	00030218 	.word	0x00030218

000b5160 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b02      	ldr	r3, [pc, #8]	; (b516c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	695b      	ldr	r3, [r3, #20]
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	bd08      	pop	{r3, pc}
   b516c:	00030218 	.word	0x00030218

000b5170 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5170:	b508      	push	{r3, lr}
   b5172:	4b02      	ldr	r3, [pc, #8]	; (b517c <hal_rtc_time_is_valid+0xc>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5178:	9301      	str	r3, [sp, #4]
   b517a:	bd08      	pop	{r3, pc}
   b517c:	00030218 	.word	0x00030218

000b5180 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5180:	b508      	push	{r3, lr}
   b5182:	4b02      	ldr	r3, [pc, #8]	; (b518c <hal_rtc_get_time+0xc>)
   b5184:	681b      	ldr	r3, [r3, #0]
   b5186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5188:	9301      	str	r3, [sp, #4]
   b518a:	bd08      	pop	{r3, pc}
   b518c:	00030218 	.word	0x00030218

000b5190 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5190:	b508      	push	{r3, lr}
   b5192:	4b02      	ldr	r3, [pc, #8]	; (b519c <os_mutex_create+0xc>)
   b5194:	681b      	ldr	r3, [r3, #0]
   b5196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5198:	9301      	str	r3, [sp, #4]
   b519a:	bd08      	pop	{r3, pc}
   b519c:	00030248 	.word	0x00030248

000b51a0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b51a0:	b508      	push	{r3, lr}
   b51a2:	4b02      	ldr	r3, [pc, #8]	; (b51ac <os_mutex_lock+0xc>)
   b51a4:	681b      	ldr	r3, [r3, #0]
   b51a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b51a8:	9301      	str	r3, [sp, #4]
   b51aa:	bd08      	pop	{r3, pc}
   b51ac:	00030248 	.word	0x00030248

000b51b0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b51b0:	b508      	push	{r3, lr}
   b51b2:	4b02      	ldr	r3, [pc, #8]	; (b51bc <os_mutex_unlock+0xc>)
   b51b4:	681b      	ldr	r3, [r3, #0]
   b51b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51b8:	9301      	str	r3, [sp, #4]
   b51ba:	bd08      	pop	{r3, pc}
   b51bc:	00030248 	.word	0x00030248

000b51c0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b51c0:	b508      	push	{r3, lr}
   b51c2:	4b02      	ldr	r3, [pc, #8]	; (b51cc <os_mutex_recursive_create+0xc>)
   b51c4:	681b      	ldr	r3, [r3, #0]
   b51c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51c8:	9301      	str	r3, [sp, #4]
   b51ca:	bd08      	pop	{r3, pc}
   b51cc:	00030248 	.word	0x00030248

000b51d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b51d0:	b508      	push	{r3, lr}
   b51d2:	4b02      	ldr	r3, [pc, #8]	; (b51dc <inet_inet_ntop+0xc>)
   b51d4:	681b      	ldr	r3, [r3, #0]
   b51d6:	695b      	ldr	r3, [r3, #20]
   b51d8:	9301      	str	r3, [sp, #4]
   b51da:	bd08      	pop	{r3, pc}
   b51dc:	00030264 	.word	0x00030264

000b51e0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b51e0:	b508      	push	{r3, lr}
   b51e2:	4b02      	ldr	r3, [pc, #8]	; (b51ec <inet_htonl+0xc>)
   b51e4:	681b      	ldr	r3, [r3, #0]
   b51e6:	6a1b      	ldr	r3, [r3, #32]
   b51e8:	9301      	str	r3, [sp, #4]
   b51ea:	bd08      	pop	{r3, pc}
   b51ec:	00030264 	.word	0x00030264

000b51f0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b51f0:	b508      	push	{r3, lr}
   b51f2:	4b02      	ldr	r3, [pc, #8]	; (b51fc <inet_htons+0xc>)
   b51f4:	681b      	ldr	r3, [r3, #0]
   b51f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51f8:	9301      	str	r3, [sp, #4]
   b51fa:	bd08      	pop	{r3, pc}
   b51fc:	00030264 	.word	0x00030264

000b5200 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5200:	b508      	push	{r3, lr}
   b5202:	4b02      	ldr	r3, [pc, #8]	; (b520c <hal_usart_write+0xc>)
   b5204:	681b      	ldr	r3, [r3, #0]
   b5206:	68db      	ldr	r3, [r3, #12]
   b5208:	9301      	str	r3, [sp, #4]
   b520a:	bd08      	pop	{r3, pc}
   b520c:	0003023c 	.word	0x0003023c

000b5210 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b02      	ldr	r3, [pc, #8]	; (b521c <hal_usart_available+0xc>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	691b      	ldr	r3, [r3, #16]
   b5218:	9301      	str	r3, [sp, #4]
   b521a:	bd08      	pop	{r3, pc}
   b521c:	0003023c 	.word	0x0003023c

000b5220 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5220:	b508      	push	{r3, lr}
   b5222:	4b02      	ldr	r3, [pc, #8]	; (b522c <hal_usart_read+0xc>)
   b5224:	681b      	ldr	r3, [r3, #0]
   b5226:	695b      	ldr	r3, [r3, #20]
   b5228:	9301      	str	r3, [sp, #4]
   b522a:	bd08      	pop	{r3, pc}
   b522c:	0003023c 	.word	0x0003023c

000b5230 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b02      	ldr	r3, [pc, #8]	; (b523c <hal_usart_peek+0xc>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	699b      	ldr	r3, [r3, #24]
   b5238:	9301      	str	r3, [sp, #4]
   b523a:	bd08      	pop	{r3, pc}
   b523c:	0003023c 	.word	0x0003023c

000b5240 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b02      	ldr	r3, [pc, #8]	; (b524c <hal_usart_flush+0xc>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	69db      	ldr	r3, [r3, #28]
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	bd08      	pop	{r3, pc}
   b524c:	0003023c 	.word	0x0003023c

000b5250 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5250:	b508      	push	{r3, lr}
   b5252:	4b02      	ldr	r3, [pc, #8]	; (b525c <hal_usart_is_enabled+0xc>)
   b5254:	681b      	ldr	r3, [r3, #0]
   b5256:	6a1b      	ldr	r3, [r3, #32]
   b5258:	9301      	str	r3, [sp, #4]
   b525a:	bd08      	pop	{r3, pc}
   b525c:	0003023c 	.word	0x0003023c

000b5260 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5260:	b508      	push	{r3, lr}
   b5262:	4b02      	ldr	r3, [pc, #8]	; (b526c <hal_usart_available_data_for_write+0xc>)
   b5264:	681b      	ldr	r3, [r3, #0]
   b5266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5268:	9301      	str	r3, [sp, #4]
   b526a:	bd08      	pop	{r3, pc}
   b526c:	0003023c 	.word	0x0003023c

000b5270 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5270:	b508      	push	{r3, lr}
   b5272:	4b02      	ldr	r3, [pc, #8]	; (b527c <hal_usart_init_ex+0xc>)
   b5274:	681b      	ldr	r3, [r3, #0]
   b5276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5278:	9301      	str	r3, [sp, #4]
   b527a:	bd08      	pop	{r3, pc}
   b527c:	0003023c 	.word	0x0003023c

000b5280 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5280:	b508      	push	{r3, lr}
   b5282:	4b02      	ldr	r3, [pc, #8]	; (b528c <hal_i2c_write+0xc>)
   b5284:	681b      	ldr	r3, [r3, #0]
   b5286:	6a1b      	ldr	r3, [r3, #32]
   b5288:	9301      	str	r3, [sp, #4]
   b528a:	bd08      	pop	{r3, pc}
   b528c:	00030228 	.word	0x00030228

000b5290 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b02      	ldr	r3, [pc, #8]	; (b529c <hal_i2c_available+0xc>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5298:	9301      	str	r3, [sp, #4]
   b529a:	bd08      	pop	{r3, pc}
   b529c:	00030228 	.word	0x00030228

000b52a0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b52a0:	b508      	push	{r3, lr}
   b52a2:	4b02      	ldr	r3, [pc, #8]	; (b52ac <hal_i2c_read+0xc>)
   b52a4:	681b      	ldr	r3, [r3, #0]
   b52a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b52a8:	9301      	str	r3, [sp, #4]
   b52aa:	bd08      	pop	{r3, pc}
   b52ac:	00030228 	.word	0x00030228

000b52b0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <hal_i2c_peek+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	00030228 	.word	0x00030228

000b52c0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <hal_i2c_flush+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	00030228 	.word	0x00030228

000b52d0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <hal_i2c_is_enabled+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	00030228 	.word	0x00030228

000b52e0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b02      	ldr	r3, [pc, #8]	; (b52ec <hal_i2c_init+0xc>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	bd08      	pop	{r3, pc}
   b52ec:	00030228 	.word	0x00030228

000b52f0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4b02      	ldr	r3, [pc, #8]	; (b52fc <sock_setsockopt+0xc>)
   b52f4:	681b      	ldr	r3, [r3, #0]
   b52f6:	699b      	ldr	r3, [r3, #24]
   b52f8:	9301      	str	r3, [sp, #4]
   b52fa:	bd08      	pop	{r3, pc}
   b52fc:	00030238 	.word	0x00030238

000b5300 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5300:	b508      	push	{r3, lr}
   b5302:	4b02      	ldr	r3, [pc, #8]	; (b530c <sock_close+0xc>)
   b5304:	681b      	ldr	r3, [r3, #0]
   b5306:	69db      	ldr	r3, [r3, #28]
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	bd08      	pop	{r3, pc}
   b530c:	00030238 	.word	0x00030238

000b5310 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5310:	b508      	push	{r3, lr}
   b5312:	4b02      	ldr	r3, [pc, #8]	; (b531c <sock_connect+0xc>)
   b5314:	681b      	ldr	r3, [r3, #0]
   b5316:	6a1b      	ldr	r3, [r3, #32]
   b5318:	9301      	str	r3, [sp, #4]
   b531a:	bd08      	pop	{r3, pc}
   b531c:	00030238 	.word	0x00030238

000b5320 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5320:	b508      	push	{r3, lr}
   b5322:	4b02      	ldr	r3, [pc, #8]	; (b532c <sock_recv+0xc>)
   b5324:	681b      	ldr	r3, [r3, #0]
   b5326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5328:	9301      	str	r3, [sp, #4]
   b532a:	bd08      	pop	{r3, pc}
   b532c:	00030238 	.word	0x00030238

000b5330 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b02      	ldr	r3, [pc, #8]	; (b533c <sock_send+0xc>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5338:	9301      	str	r3, [sp, #4]
   b533a:	bd08      	pop	{r3, pc}
   b533c:	00030238 	.word	0x00030238

000b5340 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5340:	b508      	push	{r3, lr}
   b5342:	4b02      	ldr	r3, [pc, #8]	; (b534c <sock_socket+0xc>)
   b5344:	681b      	ldr	r3, [r3, #0]
   b5346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5348:	9301      	str	r3, [sp, #4]
   b534a:	bd08      	pop	{r3, pc}
   b534c:	00030238 	.word	0x00030238

000b5350 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <hal_spi_init+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	69db      	ldr	r3, [r3, #28]
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	00030230 	.word	0x00030230

000b5360 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <hal_spi_is_enabled+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	6a1b      	ldr	r3, [r3, #32]
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	00030230 	.word	0x00030230

000b5370 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <HAL_USB_USART_Init+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	681b      	ldr	r3, [r3, #0]
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	0003024c 	.word	0x0003024c

000b5380 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <HAL_USB_USART_Available_Data+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	691b      	ldr	r3, [r3, #16]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	0003024c 	.word	0x0003024c

000b5390 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	695b      	ldr	r3, [r3, #20]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	0003024c 	.word	0x0003024c

000b53a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <HAL_USB_USART_Receive_Data+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	699b      	ldr	r3, [r3, #24]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	0003024c 	.word	0x0003024c

000b53b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <HAL_USB_USART_Send_Data+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	69db      	ldr	r3, [r3, #28]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	0003024c 	.word	0x0003024c

000b53c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <HAL_USB_USART_Flush_Data+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	6a1b      	ldr	r3, [r3, #32]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	0003024c 	.word	0x0003024c

000b53d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <log_message+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	00030260 	.word	0x00030260

000b53e0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <system_mode+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	681b      	ldr	r3, [r3, #0]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030220 	.word	0x00030220

000b53f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <set_system_mode+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	685b      	ldr	r3, [r3, #4]
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030220 	.word	0x00030220

000b5400 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <system_thread_set_state+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030220 	.word	0x00030220

000b5410 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <application_thread_current+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030220 	.word	0x00030220

000b5420 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <application_thread_invoke+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030220 	.word	0x00030220

000b5430 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <system_thread_get_state+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030220 	.word	0x00030220

000b5440 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b03      	ldr	r3, [pc, #12]	; (b5450 <system_ctrl_set_app_request_handler+0x10>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b544a:	9301      	str	r3, [sp, #4]
   b544c:	bd08      	pop	{r3, pc}
   b544e:	0000      	.short	0x0000
   b5450:	00030220 	.word	0x00030220

000b5454 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b03      	ldr	r3, [pc, #12]	; (b5464 <system_ctrl_set_result+0x10>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b545e:	9301      	str	r3, [sp, #4]
   b5460:	bd08      	pop	{r3, pc}
   b5462:	0000      	.short	0x0000
   b5464:	00030220 	.word	0x00030220

000b5468 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5468:	b508      	push	{r3, lr}
   b546a:	4b02      	ldr	r3, [pc, #8]	; (b5474 <network_connect+0xc>)
   b546c:	681b      	ldr	r3, [r3, #0]
   b546e:	685b      	ldr	r3, [r3, #4]
   b5470:	9301      	str	r3, [sp, #4]
   b5472:	bd08      	pop	{r3, pc}
   b5474:	00030240 	.word	0x00030240

000b5478 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5478:	b508      	push	{r3, lr}
   b547a:	4b02      	ldr	r3, [pc, #8]	; (b5484 <network_connecting+0xc>)
   b547c:	681b      	ldr	r3, [r3, #0]
   b547e:	689b      	ldr	r3, [r3, #8]
   b5480:	9301      	str	r3, [sp, #4]
   b5482:	bd08      	pop	{r3, pc}
   b5484:	00030240 	.word	0x00030240

000b5488 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5488:	b508      	push	{r3, lr}
   b548a:	4b02      	ldr	r3, [pc, #8]	; (b5494 <network_disconnect+0xc>)
   b548c:	681b      	ldr	r3, [r3, #0]
   b548e:	68db      	ldr	r3, [r3, #12]
   b5490:	9301      	str	r3, [sp, #4]
   b5492:	bd08      	pop	{r3, pc}
   b5494:	00030240 	.word	0x00030240

000b5498 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5498:	b508      	push	{r3, lr}
   b549a:	4b02      	ldr	r3, [pc, #8]	; (b54a4 <network_ready+0xc>)
   b549c:	681b      	ldr	r3, [r3, #0]
   b549e:	691b      	ldr	r3, [r3, #16]
   b54a0:	9301      	str	r3, [sp, #4]
   b54a2:	bd08      	pop	{r3, pc}
   b54a4:	00030240 	.word	0x00030240

000b54a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b54a8:	b508      	push	{r3, lr}
   b54aa:	4b02      	ldr	r3, [pc, #8]	; (b54b4 <network_on+0xc>)
   b54ac:	681b      	ldr	r3, [r3, #0]
   b54ae:	695b      	ldr	r3, [r3, #20]
   b54b0:	9301      	str	r3, [sp, #4]
   b54b2:	bd08      	pop	{r3, pc}
   b54b4:	00030240 	.word	0x00030240

000b54b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b54b8:	b508      	push	{r3, lr}
   b54ba:	4b02      	ldr	r3, [pc, #8]	; (b54c4 <network_off+0xc>)
   b54bc:	681b      	ldr	r3, [r3, #0]
   b54be:	699b      	ldr	r3, [r3, #24]
   b54c0:	9301      	str	r3, [sp, #4]
   b54c2:	bd08      	pop	{r3, pc}
   b54c4:	00030240 	.word	0x00030240

000b54c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b54c8:	b508      	push	{r3, lr}
   b54ca:	4b02      	ldr	r3, [pc, #8]	; (b54d4 <network_listen+0xc>)
   b54cc:	681b      	ldr	r3, [r3, #0]
   b54ce:	69db      	ldr	r3, [r3, #28]
   b54d0:	9301      	str	r3, [sp, #4]
   b54d2:	bd08      	pop	{r3, pc}
   b54d4:	00030240 	.word	0x00030240

000b54d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b54d8:	b508      	push	{r3, lr}
   b54da:	4b02      	ldr	r3, [pc, #8]	; (b54e4 <network_listening+0xc>)
   b54dc:	681b      	ldr	r3, [r3, #0]
   b54de:	6a1b      	ldr	r3, [r3, #32]
   b54e0:	9301      	str	r3, [sp, #4]
   b54e2:	bd08      	pop	{r3, pc}
   b54e4:	00030240 	.word	0x00030240

000b54e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b54e8:	b508      	push	{r3, lr}
   b54ea:	4b02      	ldr	r3, [pc, #8]	; (b54f4 <network_set_listen_timeout+0xc>)
   b54ec:	681b      	ldr	r3, [r3, #0]
   b54ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b54f0:	9301      	str	r3, [sp, #4]
   b54f2:	bd08      	pop	{r3, pc}
   b54f4:	00030240 	.word	0x00030240

000b54f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b54f8:	b508      	push	{r3, lr}
   b54fa:	4b02      	ldr	r3, [pc, #8]	; (b5504 <network_get_listen_timeout+0xc>)
   b54fc:	681b      	ldr	r3, [r3, #0]
   b54fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5500:	9301      	str	r3, [sp, #4]
   b5502:	bd08      	pop	{r3, pc}
   b5504:	00030240 	.word	0x00030240

000b5508 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5508:	b508      	push	{r3, lr}
   b550a:	4b02      	ldr	r3, [pc, #8]	; (b5514 <network_is_on+0xc>)
   b550c:	681b      	ldr	r3, [r3, #0]
   b550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5510:	9301      	str	r3, [sp, #4]
   b5512:	bd08      	pop	{r3, pc}
   b5514:	00030240 	.word	0x00030240

000b5518 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5518:	b508      	push	{r3, lr}
   b551a:	4b02      	ldr	r3, [pc, #8]	; (b5524 <network_is_off+0xc>)
   b551c:	681b      	ldr	r3, [r3, #0]
   b551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5520:	9301      	str	r3, [sp, #4]
   b5522:	bd08      	pop	{r3, pc}
   b5524:	00030240 	.word	0x00030240

000b5528 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b5528:	b508      	push	{r3, lr}
   b552a:	4b02      	ldr	r3, [pc, #8]	; (b5534 <spark_variable+0xc>)
   b552c:	681b      	ldr	r3, [r3, #0]
   b552e:	681b      	ldr	r3, [r3, #0]
   b5530:	9301      	str	r3, [sp, #4]
   b5532:	bd08      	pop	{r3, pc}
   b5534:	00030244 	.word	0x00030244

000b5538 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5538:	b508      	push	{r3, lr}
   b553a:	4b02      	ldr	r3, [pc, #8]	; (b5544 <spark_process+0xc>)
   b553c:	681b      	ldr	r3, [r3, #0]
   b553e:	689b      	ldr	r3, [r3, #8]
   b5540:	9301      	str	r3, [sp, #4]
   b5542:	bd08      	pop	{r3, pc}
   b5544:	00030244 	.word	0x00030244

000b5548 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5548:	b508      	push	{r3, lr}
   b554a:	4b02      	ldr	r3, [pc, #8]	; (b5554 <spark_cloud_flag_connected+0xc>)
   b554c:	681b      	ldr	r3, [r3, #0]
   b554e:	695b      	ldr	r3, [r3, #20]
   b5550:	9301      	str	r3, [sp, #4]
   b5552:	bd08      	pop	{r3, pc}
   b5554:	00030244 	.word	0x00030244

000b5558 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5558:	b508      	push	{r3, lr}
   b555a:	4b02      	ldr	r3, [pc, #8]	; (b5564 <spark_send_event+0xc>)
   b555c:	681b      	ldr	r3, [r3, #0]
   b555e:	6a1b      	ldr	r3, [r3, #32]
   b5560:	9301      	str	r3, [sp, #4]
   b5562:	bd08      	pop	{r3, pc}
   b5564:	00030244 	.word	0x00030244

000b5568 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5568:	b508      	push	{r3, lr}
   b556a:	4b02      	ldr	r3, [pc, #8]	; (b5574 <spark_subscribe+0xc>)
   b556c:	681b      	ldr	r3, [r3, #0]
   b556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5570:	9301      	str	r3, [sp, #4]
   b5572:	bd08      	pop	{r3, pc}
   b5574:	00030244 	.word	0x00030244

000b5578 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5578:	b508      	push	{r3, lr}
   b557a:	4b02      	ldr	r3, [pc, #8]	; (b5584 <spark_sync_time_pending+0xc>)
   b557c:	681b      	ldr	r3, [r3, #0]
   b557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5580:	9301      	str	r3, [sp, #4]
   b5582:	bd08      	pop	{r3, pc}
   b5584:	00030244 	.word	0x00030244

000b5588 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5588:	b508      	push	{r3, lr}
   b558a:	4b02      	ldr	r3, [pc, #8]	; (b5594 <spark_set_random_seed_from_cloud_handler+0xc>)
   b558c:	681b      	ldr	r3, [r3, #0]
   b558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5590:	9301      	str	r3, [sp, #4]
   b5592:	bd08      	pop	{r3, pc}
   b5594:	00030244 	.word	0x00030244

000b5598 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5598:	b508      	push	{r3, lr}
   b559a:	4b02      	ldr	r3, [pc, #8]	; (b55a4 <malloc+0xc>)
   b559c:	681b      	ldr	r3, [r3, #0]
   b559e:	681b      	ldr	r3, [r3, #0]
   b55a0:	9301      	str	r3, [sp, #4]
   b55a2:	bd08      	pop	{r3, pc}
   b55a4:	0003021c 	.word	0x0003021c

000b55a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b55a8:	b508      	push	{r3, lr}
   b55aa:	4b02      	ldr	r3, [pc, #8]	; (b55b4 <free+0xc>)
   b55ac:	681b      	ldr	r3, [r3, #0]
   b55ae:	685b      	ldr	r3, [r3, #4]
   b55b0:	9301      	str	r3, [sp, #4]
   b55b2:	bd08      	pop	{r3, pc}
   b55b4:	0003021c 	.word	0x0003021c

000b55b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b55b8:	b508      	push	{r3, lr}
   b55ba:	4b02      	ldr	r3, [pc, #8]	; (b55c4 <realloc+0xc>)
   b55bc:	681b      	ldr	r3, [r3, #0]
   b55be:	689b      	ldr	r3, [r3, #8]
   b55c0:	9301      	str	r3, [sp, #4]
   b55c2:	bd08      	pop	{r3, pc}
   b55c4:	0003021c 	.word	0x0003021c

000b55c8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b55c8:	b508      	push	{r3, lr}
   b55ca:	4b02      	ldr	r3, [pc, #8]	; (b55d4 <sprintf+0xc>)
   b55cc:	681b      	ldr	r3, [r3, #0]
   b55ce:	68db      	ldr	r3, [r3, #12]
   b55d0:	9301      	str	r3, [sp, #4]
   b55d2:	bd08      	pop	{r3, pc}
   b55d4:	0003021c 	.word	0x0003021c

000b55d8 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b55d8:	b508      	push	{r3, lr}
   b55da:	4b02      	ldr	r3, [pc, #8]	; (b55e4 <sscanf+0xc>)
   b55dc:	681b      	ldr	r3, [r3, #0]
   b55de:	695b      	ldr	r3, [r3, #20]
   b55e0:	9301      	str	r3, [sp, #4]
   b55e2:	bd08      	pop	{r3, pc}
   b55e4:	0003021c 	.word	0x0003021c

000b55e8 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b55e8:	b508      	push	{r3, lr}
   b55ea:	4b02      	ldr	r3, [pc, #8]	; (b55f4 <vsnprintf+0xc>)
   b55ec:	681b      	ldr	r3, [r3, #0]
   b55ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b55f0:	9301      	str	r3, [sp, #4]
   b55f2:	bd08      	pop	{r3, pc}
   b55f4:	0003021c 	.word	0x0003021c

000b55f8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b55f8:	b508      	push	{r3, lr}
   b55fa:	4b02      	ldr	r3, [pc, #8]	; (b5604 <abort+0xc>)
   b55fc:	681b      	ldr	r3, [r3, #0]
   b55fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5600:	9301      	str	r3, [sp, #4]
   b5602:	bd08      	pop	{r3, pc}
   b5604:	0003021c 	.word	0x0003021c

000b5608 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5608:	b508      	push	{r3, lr}
   b560a:	4b02      	ldr	r3, [pc, #8]	; (b5614 <_malloc_r+0xc>)
   b560c:	681b      	ldr	r3, [r3, #0]
   b560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5610:	9301      	str	r3, [sp, #4]
   b5612:	bd08      	pop	{r3, pc}
   b5614:	0003021c 	.word	0x0003021c

000b5618 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5618:	b508      	push	{r3, lr}
   b561a:	4b02      	ldr	r3, [pc, #8]	; (b5624 <__errno+0xc>)
   b561c:	681b      	ldr	r3, [r3, #0]
   b561e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5620:	9301      	str	r3, [sp, #4]
   b5622:	bd08      	pop	{r3, pc}
   b5624:	0003021c 	.word	0x0003021c

000b5628 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5628:	b508      	push	{r3, lr}
   b562a:	4b02      	ldr	r3, [pc, #8]	; (b5634 <__assert_func+0xc>)
   b562c:	681b      	ldr	r3, [r3, #0]
   b562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5630:	9301      	str	r3, [sp, #4]
   b5632:	bd08      	pop	{r3, pc}
   b5634:	0003021c 	.word	0x0003021c

000b5638 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5638:	b508      	push	{r3, lr}
   b563a:	4b02      	ldr	r3, [pc, #8]	; (b5644 <newlib_impure_ptr_callback+0xc>)
   b563c:	681b      	ldr	r3, [r3, #0]
   b563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5640:	9301      	str	r3, [sp, #4]
   b5642:	bd08      	pop	{r3, pc}
   b5644:	0003021c 	.word	0x0003021c

000b5648 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5648:	b508      	push	{r3, lr}
   b564a:	4b02      	ldr	r3, [pc, #8]	; (b5654 <localtime_r+0xc>)
   b564c:	681b      	ldr	r3, [r3, #0]
   b564e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5650:	9301      	str	r3, [sp, #4]
   b5652:	bd08      	pop	{r3, pc}
   b5654:	0003021c 	.word	0x0003021c

000b5658 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5658:	2200      	movs	r2, #0
   b565a:	6840      	ldr	r0, [r0, #4]
   b565c:	4611      	mov	r1, r2
   b565e:	f7ff bf3b 	b.w	b54d8 <network_listening>

000b5662 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5662:	2200      	movs	r2, #0
   b5664:	6840      	ldr	r0, [r0, #4]
   b5666:	4611      	mov	r1, r2
   b5668:	f7ff bf46 	b.w	b54f8 <network_get_listen_timeout>

000b566c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b566c:	6840      	ldr	r0, [r0, #4]
   b566e:	2200      	movs	r2, #0
   b5670:	f7ff bf3a 	b.w	b54e8 <network_set_listen_timeout>

000b5674 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5674:	6840      	ldr	r0, [r0, #4]
   b5676:	2200      	movs	r2, #0
   b5678:	f081 0101 	eor.w	r1, r1, #1
   b567c:	f7ff bf24 	b.w	b54c8 <network_listen>

000b5680 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5680:	2300      	movs	r3, #0
   b5682:	6840      	ldr	r0, [r0, #4]
   b5684:	461a      	mov	r2, r3
   b5686:	4619      	mov	r1, r3
   b5688:	f7ff bf16 	b.w	b54b8 <network_off>

000b568c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b568c:	2300      	movs	r3, #0
   b568e:	6840      	ldr	r0, [r0, #4]
   b5690:	461a      	mov	r2, r3
   b5692:	4619      	mov	r1, r3
   b5694:	f7ff bf08 	b.w	b54a8 <network_on>

000b5698 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5698:	2200      	movs	r2, #0
   b569a:	6840      	ldr	r0, [r0, #4]
   b569c:	4611      	mov	r1, r2
   b569e:	f7ff befb 	b.w	b5498 <network_ready>

000b56a2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b56a2:	2200      	movs	r2, #0
   b56a4:	6840      	ldr	r0, [r0, #4]
   b56a6:	4611      	mov	r1, r2
   b56a8:	f7ff bee6 	b.w	b5478 <network_connecting>

000b56ac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b56ac:	6840      	ldr	r0, [r0, #4]
   b56ae:	2200      	movs	r2, #0
   b56b0:	2102      	movs	r1, #2
   b56b2:	f7ff bee9 	b.w	b5488 <network_disconnect>

000b56b6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b56b6:	2300      	movs	r3, #0
   b56b8:	6840      	ldr	r0, [r0, #4]
   b56ba:	461a      	mov	r2, r3
   b56bc:	f7ff bed4 	b.w	b5468 <network_connect>

000b56c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b56c0:	4b02      	ldr	r3, [pc, #8]	; (b56cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b56c2:	2203      	movs	r2, #3
   b56c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b56c6:	4a02      	ldr	r2, [pc, #8]	; (b56d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b56c8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b56ca:	4770      	bx	lr
   b56cc:	2003e680 	.word	0x2003e680
   b56d0:	000b9f08 	.word	0x000b9f08

000b56d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b56d4:	b510      	push	{r4, lr}
   b56d6:	4604      	mov	r4, r0
   b56d8:	4608      	mov	r0, r1
{
    _spi = spi;
   b56da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b56dc:	f7ff fe38 	bl	b5350 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b56e0:	2300      	movs	r3, #0
   b56e2:	6063      	str	r3, [r4, #4]
}
   b56e4:	4620      	mov	r0, r4
   b56e6:	bd10      	pop	{r4, pc}

000b56e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b56e8:	4b05      	ldr	r3, [pc, #20]	; (b5700 <_GLOBAL__sub_I_System+0x18>)
   b56ea:	2202      	movs	r2, #2
   b56ec:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b56ee:	4b05      	ldr	r3, [pc, #20]	; (b5704 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b56f0:	4a05      	ldr	r2, [pc, #20]	; (b5708 <_GLOBAL__sub_I_System+0x20>)
   b56f2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b56f4:	2000      	movs	r0, #0
   b56f6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b56fa:	f7ff be79 	b.w	b53f0 <set_system_mode>
   b56fe:	bf00      	nop
   b5700:	2003e694 	.word	0x2003e694
   b5704:	2003e688 	.word	0x2003e688
   b5708:	ffff0000 	.word	0xffff0000

000b570c <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b570c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b5710:	1e93      	subs	r3, r2, #2
{
   b5712:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b5714:	2b22      	cmp	r3, #34	; 0x22
   b5716:	f04f 0300 	mov.w	r3, #0
{
   b571a:	460d      	mov	r5, r1
   b571c:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b571e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b5722:	d927      	bls.n	b5774 <ltoa+0x68>

      if (10 == base && N < 0L)
   b5724:	2800      	cmp	r0, #0
   b5726:	da2a      	bge.n	b577e <ltoa+0x72>
      {
            *head++ = '-';
   b5728:	462e      	mov	r6, r5
   b572a:	232d      	movs	r3, #45	; 0x2d
   b572c:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5730:	4240      	negs	r0, r0
   b5732:	240a      	movs	r4, #10
      *tail-- = '\0';
   b5734:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b5738:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b573c:	4622      	mov	r2, r4
   b573e:	4601      	mov	r1, r0
   b5740:	a801      	add	r0, sp, #4
   b5742:	f002 fa06 	bl	b7b52 <ldiv>
   b5746:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b5748:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b574a:	2b09      	cmp	r3, #9
   b574c:	bfcc      	ite	gt
   b574e:	2237      	movgt	r2, #55	; 0x37
   b5750:	2230      	movle	r2, #48	; 0x30
   b5752:	fa52 f383 	uxtab	r3, r2, r3
   b5756:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b575a:	f108 0801 	add.w	r8, r8, #1
   b575e:	2800      	cmp	r0, #0
   b5760:	d1ec      	bne.n	b573c <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5762:	4642      	mov	r2, r8
   b5764:	1c79      	adds	r1, r7, #1
   b5766:	4630      	mov	r0, r6
   b5768:	f002 fa07 	bl	b7b7a <memcpy>
      return str;
}
   b576c:	4628      	mov	r0, r5
   b576e:	b00c      	add	sp, #48	; 0x30
   b5770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b5774:	2a0a      	cmp	r2, #10
   b5776:	d0d5      	beq.n	b5724 <ltoa+0x18>
      if (uarg)
   b5778:	b118      	cbz	r0, b5782 <ltoa+0x76>
   b577a:	462e      	mov	r6, r5
   b577c:	e7da      	b.n	b5734 <ltoa+0x28>
   b577e:	240a      	movs	r4, #10
   b5780:	e7fa      	b.n	b5778 <ltoa+0x6c>
      else  *tail-- = '0';
   b5782:	2330      	movs	r3, #48	; 0x30
   b5784:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b5788:	462e      	mov	r6, r5
   b578a:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b578e:	f04f 0802 	mov.w	r8, #2
   b5792:	e7e6      	b.n	b5762 <ltoa+0x56>

000b5794 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5794:	b510      	push	{r4, lr}
   b5796:	4604      	mov	r4, r0
{
	free(buffer);
   b5798:	6800      	ldr	r0, [r0, #0]
   b579a:	f7ff ff05 	bl	b55a8 <free>
}
   b579e:	4620      	mov	r0, r4
   b57a0:	bd10      	pop	{r4, pc}

000b57a2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b57a2:	b510      	push	{r4, lr}
   b57a4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b57a6:	6800      	ldr	r0, [r0, #0]
   b57a8:	b108      	cbz	r0, b57ae <_ZN6String10invalidateEv+0xc>
   b57aa:	f7ff fefd 	bl	b55a8 <free>
	buffer = NULL;
   b57ae:	2300      	movs	r3, #0
	capacity = len = 0;
   b57b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b57b4:	6023      	str	r3, [r4, #0]
}
   b57b6:	bd10      	pop	{r4, pc}

000b57b8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b57b8:	b538      	push	{r3, r4, r5, lr}
   b57ba:	4604      	mov	r4, r0
   b57bc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b57be:	6800      	ldr	r0, [r0, #0]
   b57c0:	3101      	adds	r1, #1
   b57c2:	f7ff fef9 	bl	b55b8 <realloc>
	if (newbuffer) {
   b57c6:	b110      	cbz	r0, b57ce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b57c8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b57cc:	2001      	movs	r0, #1
	}
	return 0;
}
   b57ce:	bd38      	pop	{r3, r4, r5, pc}

000b57d0 <_ZN6String7reserveEj>:
{
   b57d0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b57d2:	6803      	ldr	r3, [r0, #0]
{
   b57d4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b57d6:	b123      	cbz	r3, b57e2 <_ZN6String7reserveEj+0x12>
   b57d8:	6843      	ldr	r3, [r0, #4]
   b57da:	428b      	cmp	r3, r1
   b57dc:	d301      	bcc.n	b57e2 <_ZN6String7reserveEj+0x12>
   b57de:	2001      	movs	r0, #1
}
   b57e0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b57e2:	4620      	mov	r0, r4
   b57e4:	f7ff ffe8 	bl	b57b8 <_ZN6String12changeBufferEj>
   b57e8:	2800      	cmp	r0, #0
   b57ea:	d0f9      	beq.n	b57e0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b57ec:	68a3      	ldr	r3, [r4, #8]
   b57ee:	2b00      	cmp	r3, #0
   b57f0:	d1f5      	bne.n	b57de <_ZN6String7reserveEj+0xe>
   b57f2:	6822      	ldr	r2, [r4, #0]
   b57f4:	7013      	strb	r3, [r2, #0]
   b57f6:	e7f2      	b.n	b57de <_ZN6String7reserveEj+0xe>

000b57f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b57f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b57fa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b57fc:	4611      	mov	r1, r2
   b57fe:	9201      	str	r2, [sp, #4]
{
   b5800:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5802:	f7ff ffe5 	bl	b57d0 <_ZN6String7reserveEj>
   b5806:	9a01      	ldr	r2, [sp, #4]
   b5808:	b928      	cbnz	r0, b5816 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b580a:	4620      	mov	r0, r4
   b580c:	f7ff ffc9 	bl	b57a2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5810:	4620      	mov	r0, r4
   b5812:	b003      	add	sp, #12
   b5814:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5816:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5818:	4629      	mov	r1, r5
   b581a:	6820      	ldr	r0, [r4, #0]
   b581c:	f002 f9ad 	bl	b7b7a <memcpy>
	buffer[len] = 0;
   b5820:	6822      	ldr	r2, [r4, #0]
   b5822:	68a3      	ldr	r3, [r4, #8]
   b5824:	2100      	movs	r1, #0
   b5826:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5828:	e7f2      	b.n	b5810 <_ZN6String4copyEPKcj+0x18>

000b582a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b582a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b582c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b582e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5832:	4604      	mov	r4, r0
	len = 0;
   b5834:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5836:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5838:	b141      	cbz	r1, b584c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b583a:	4608      	mov	r0, r1
   b583c:	9101      	str	r1, [sp, #4]
   b583e:	f002 fa20 	bl	b7c82 <strlen>
   b5842:	9901      	ldr	r1, [sp, #4]
   b5844:	4602      	mov	r2, r0
   b5846:	4620      	mov	r0, r4
   b5848:	f7ff ffd6 	bl	b57f8 <_ZN6String4copyEPKcj>
}
   b584c:	4620      	mov	r0, r4
   b584e:	b002      	add	sp, #8
   b5850:	bd10      	pop	{r4, pc}

000b5852 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5852:	b513      	push	{r0, r1, r4, lr}
   b5854:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5856:	b159      	cbz	r1, b5870 <_ZN6StringaSEPKc+0x1e>
   b5858:	4608      	mov	r0, r1
   b585a:	9101      	str	r1, [sp, #4]
   b585c:	f002 fa11 	bl	b7c82 <strlen>
   b5860:	9901      	ldr	r1, [sp, #4]
   b5862:	4602      	mov	r2, r0
   b5864:	4620      	mov	r0, r4
   b5866:	f7ff ffc7 	bl	b57f8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b586a:	4620      	mov	r0, r4
   b586c:	b002      	add	sp, #8
   b586e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5870:	f7ff ff97 	bl	b57a2 <_ZN6String10invalidateEv>
   b5874:	e7f9      	b.n	b586a <_ZN6StringaSEPKc+0x18>

000b5876 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b5876:	b510      	push	{r4, lr}
   b5878:	4604      	mov	r4, r0
   b587a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b587c:	2300      	movs	r3, #0
	capacity = 0;
   b587e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5882:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5884:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b5886:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b5888:	a901      	add	r1, sp, #4
   b588a:	f7ff ff3f 	bl	b570c <ltoa>
	*this = buf;
   b588e:	a901      	add	r1, sp, #4
   b5890:	4620      	mov	r0, r4
   b5892:	f7ff ffde 	bl	b5852 <_ZN6StringaSEPKc>
}
   b5896:	4620      	mov	r0, r4
   b5898:	b00a      	add	sp, #40	; 0x28
   b589a:	bd10      	pop	{r4, pc}

000b589c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b589c:	b570      	push	{r4, r5, r6, lr}
   b589e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b58a0:	460e      	mov	r6, r1
   b58a2:	b909      	cbnz	r1, b58a8 <_ZN6String6concatEPKcj+0xc>
   b58a4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b58a6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b58a8:	b16a      	cbz	r2, b58c6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b58aa:	6884      	ldr	r4, [r0, #8]
   b58ac:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b58ae:	4621      	mov	r1, r4
   b58b0:	f7ff ff8e 	bl	b57d0 <_ZN6String7reserveEj>
   b58b4:	2800      	cmp	r0, #0
   b58b6:	d0f5      	beq.n	b58a4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b58b8:	6828      	ldr	r0, [r5, #0]
   b58ba:	68ab      	ldr	r3, [r5, #8]
   b58bc:	4631      	mov	r1, r6
   b58be:	4418      	add	r0, r3
   b58c0:	f002 f9b9 	bl	b7c36 <strcpy>
	len = newlen;
   b58c4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b58c6:	2001      	movs	r0, #1
   b58c8:	e7ed      	b.n	b58a6 <_ZN6String6concatEPKcj+0xa>

000b58ca <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b58ca:	688a      	ldr	r2, [r1, #8]
   b58cc:	6809      	ldr	r1, [r1, #0]
   b58ce:	f7ff bfe5 	b.w	b589c <_ZN6String6concatEPKcj>

000b58d2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b58d2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b58d4:	688a      	ldr	r2, [r1, #8]
   b58d6:	6809      	ldr	r1, [r1, #0]
{
   b58d8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b58da:	f7ff ffdf 	bl	b589c <_ZN6String6concatEPKcj>
   b58de:	b910      	cbnz	r0, b58e6 <_ZplRK15StringSumHelperRK6String+0x14>
   b58e0:	4620      	mov	r0, r4
   b58e2:	f7ff ff5e 	bl	b57a2 <_ZN6String10invalidateEv>
	return a;
}
   b58e6:	4620      	mov	r0, r4
   b58e8:	bd10      	pop	{r4, pc}
	...

000b58ec <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b58ec:	b40e      	push	{r1, r2, r3}
   b58ee:	b570      	push	{r4, r5, r6, lr}
   b58f0:	b087      	sub	sp, #28
   b58f2:	ad0b      	add	r5, sp, #44	; 0x2c
   b58f4:	4604      	mov	r4, r0
   b58f6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b58fa:	9201      	str	r2, [sp, #4]
   b58fc:	462b      	mov	r3, r5
   b58fe:	2105      	movs	r1, #5
   b5900:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b5902:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5904:	f7ff fe70 	bl	b55e8 <vsnprintf>
    va_end(marker);

    String result;
   b5908:	490b      	ldr	r1, [pc, #44]	; (b5938 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b590a:	4606      	mov	r6, r0
    String result;
   b590c:	4620      	mov	r0, r4
   b590e:	f7ff ff8c 	bl	b582a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b5912:	4631      	mov	r1, r6
   b5914:	4620      	mov	r0, r4
   b5916:	f7ff ff5b 	bl	b57d0 <_ZN6String7reserveEj>
    if (result.buffer) {
   b591a:	6820      	ldr	r0, [r4, #0]
   b591c:	b130      	cbz	r0, b592c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b591e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b5920:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5922:	462b      	mov	r3, r5
   b5924:	1c71      	adds	r1, r6, #1
   b5926:	f7ff fe5f 	bl	b55e8 <vsnprintf>
        va_end(marker);
        result.len = n;
   b592a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b592c:	4620      	mov	r0, r4
   b592e:	b007      	add	sp, #28
   b5930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5934:	b003      	add	sp, #12
   b5936:	4770      	bx	lr
   b5938:	000b9d7c 	.word	0x000b9d7c

000b593c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b593c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b593e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5940:	4604      	mov	r4, r0
      if (_M_manager)
   b5942:	b113      	cbz	r3, b594a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5944:	2203      	movs	r2, #3
   b5946:	4601      	mov	r1, r0
   b5948:	4798      	blx	r3
    }
   b594a:	4620      	mov	r0, r4
   b594c:	bd10      	pop	{r4, pc}

000b594e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b594e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5950:	6843      	ldr	r3, [r0, #4]
   b5952:	3b01      	subs	r3, #1
    {
   b5954:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5956:	6043      	str	r3, [r0, #4]
   b5958:	b963      	cbnz	r3, b5974 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b595a:	6803      	ldr	r3, [r0, #0]
   b595c:	689b      	ldr	r3, [r3, #8]
   b595e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5960:	68a3      	ldr	r3, [r4, #8]
   b5962:	3b01      	subs	r3, #1
   b5964:	60a3      	str	r3, [r4, #8]
   b5966:	b92b      	cbnz	r3, b5974 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5968:	6823      	ldr	r3, [r4, #0]
   b596a:	4620      	mov	r0, r4
   b596c:	68db      	ldr	r3, [r3, #12]
    }
   b596e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5972:	4718      	bx	r3
    }
   b5974:	bd10      	pop	{r4, pc}

000b5976 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5976:	b513      	push	{r0, r1, r4, lr}
   b5978:	460b      	mov	r3, r1
   b597a:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b597c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5980:	466c      	mov	r4, sp
   b5982:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5986:	e893 0003 	ldmia.w	r3, {r0, r1}
   b598a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b598e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5992:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5996:	b002      	add	sp, #8
   b5998:	bd10      	pop	{r4, pc}
	...

000b599c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b599c:	4802      	ldr	r0, [pc, #8]	; (b59a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b599e:	2300      	movs	r3, #0
   b59a0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b59a2:	f7ff bc0d 	b.w	b51c0 <os_mutex_recursive_create>
   b59a6:	bf00      	nop
   b59a8:	2003e698 	.word	0x2003e698

000b59ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b59ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59ae:	4606      	mov	r6, r0
   b59b0:	460d      	mov	r5, r1
  size_t n = 0;
   b59b2:	188f      	adds	r7, r1, r2
   b59b4:	2400      	movs	r4, #0
  while (size--) {
   b59b6:	42bd      	cmp	r5, r7
   b59b8:	d00c      	beq.n	b59d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b59ba:	6833      	ldr	r3, [r6, #0]
   b59bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b59c0:	689b      	ldr	r3, [r3, #8]
   b59c2:	4630      	mov	r0, r6
   b59c4:	4798      	blx	r3
     if (chunk>=0)
   b59c6:	1e03      	subs	r3, r0, #0
   b59c8:	db01      	blt.n	b59ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b59ca:	441c      	add	r4, r3
  while (size--) {
   b59cc:	e7f3      	b.n	b59b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b59ce:	2c00      	cmp	r4, #0
   b59d0:	bf08      	it	eq
   b59d2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b59d4:	4620      	mov	r0, r4
   b59d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b59d8:	b513      	push	{r0, r1, r4, lr}
   b59da:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b59dc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b59de:	b159      	cbz	r1, b59f8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b59e0:	9101      	str	r1, [sp, #4]
   b59e2:	f002 f94e 	bl	b7c82 <strlen>
   b59e6:	6823      	ldr	r3, [r4, #0]
   b59e8:	9901      	ldr	r1, [sp, #4]
   b59ea:	68db      	ldr	r3, [r3, #12]
   b59ec:	4602      	mov	r2, r0
   b59ee:	4620      	mov	r0, r4
    }
   b59f0:	b002      	add	sp, #8
   b59f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b59f6:	4718      	bx	r3
    }
   b59f8:	b002      	add	sp, #8
   b59fa:	bd10      	pop	{r4, pc}

000b59fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b59fc:	6803      	ldr	r3, [r0, #0]
   b59fe:	689b      	ldr	r3, [r3, #8]
   b5a00:	4718      	bx	r3

000b5a02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5a02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5a04:	210d      	movs	r1, #13
{
   b5a06:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5a08:	f7ff fff8 	bl	b59fc <_ZN5Print5printEc>
  n += print('\n');
   b5a0c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5a0e:	4604      	mov	r4, r0
  n += print('\n');
   b5a10:	4628      	mov	r0, r5
   b5a12:	f7ff fff3 	bl	b59fc <_ZN5Print5printEc>
  return n;
}
   b5a16:	4420      	add	r0, r4
   b5a18:	bd38      	pop	{r3, r4, r5, pc}

000b5a1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5a1a:	b530      	push	{r4, r5, lr}
   b5a1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5a1e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5a20:	2a01      	cmp	r2, #1
  *str = '\0';
   b5a22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5a26:	bf98      	it	ls
   b5a28:	220a      	movls	r2, #10
   b5a2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5a2c:	460d      	mov	r5, r1
   b5a2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5a32:	fb01 5312 	mls	r3, r1, r2, r5
   b5a36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a3a:	2b09      	cmp	r3, #9
   b5a3c:	bf94      	ite	ls
   b5a3e:	3330      	addls	r3, #48	; 0x30
   b5a40:	3337      	addhi	r3, #55	; 0x37
   b5a42:	b2db      	uxtb	r3, r3
  } while(n);
   b5a44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5a4a:	d9ef      	bls.n	b5a2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5a4c:	4621      	mov	r1, r4
   b5a4e:	f7ff ffc3 	bl	b59d8 <_ZN5Print5writeEPKc>
}
   b5a52:	b00b      	add	sp, #44	; 0x2c
   b5a54:	bd30      	pop	{r4, r5, pc}

000b5a56 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a5a:	b086      	sub	sp, #24
   b5a5c:	af00      	add	r7, sp, #0
   b5a5e:	4605      	mov	r5, r0
   b5a60:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5a62:	1d38      	adds	r0, r7, #4
   b5a64:	2114      	movs	r1, #20
{
   b5a66:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5a68:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5a6a:	f7ff fdbd 	bl	b55e8 <vsnprintf>

    if (n<bufsize)
   b5a6e:	2813      	cmp	r0, #19
   b5a70:	d80e      	bhi.n	b5a90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5a72:	1d39      	adds	r1, r7, #4
   b5a74:	4628      	mov	r0, r5
   b5a76:	f7ff ffaf 	bl	b59d8 <_ZN5Print5writeEPKc>
   b5a7a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5a7c:	b11e      	cbz	r6, b5a86 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5a7e:	4628      	mov	r0, r5
   b5a80:	f7ff ffbf 	bl	b5a02 <_ZN5Print7printlnEv>
   b5a84:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5a86:	4620      	mov	r0, r4
   b5a88:	3718      	adds	r7, #24
   b5a8a:	46bd      	mov	sp, r7
   b5a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5a90:	f100 0308 	add.w	r3, r0, #8
   b5a94:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5a98:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5a9a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5a9e:	4622      	mov	r2, r4
   b5aa0:	1c41      	adds	r1, r0, #1
   b5aa2:	683b      	ldr	r3, [r7, #0]
   b5aa4:	4668      	mov	r0, sp
   b5aa6:	f7ff fd9f 	bl	b55e8 <vsnprintf>
  return write(str);
   b5aaa:	4669      	mov	r1, sp
   b5aac:	4628      	mov	r0, r5
   b5aae:	f7ff ff93 	bl	b59d8 <_ZN5Print5writeEPKc>
   b5ab2:	4604      	mov	r4, r0
   b5ab4:	46c5      	mov	sp, r8
   b5ab6:	e7e1      	b.n	b5a7c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5ab8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5ab8:	4b01      	ldr	r3, [pc, #4]	; (b5ac0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5aba:	4a02      	ldr	r2, [pc, #8]	; (b5ac4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5abc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5abe:	4770      	bx	lr
   b5ac0:	2003e69c 	.word	0x2003e69c
   b5ac4:	000b9f44 	.word	0x000b9f44

000b5ac8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b5ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b5acc:	4a15      	ldr	r2, [pc, #84]	; (b5b24 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b5ace:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5b30 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b5ad2:	e9d2 6300 	ldrd	r6, r3, [r2]
   b5ad6:	1980      	adds	r0, r0, r6
   b5ad8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b5adc:	4b12      	ldr	r3, [pc, #72]	; (b5b28 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b5ade:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b5ae2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b5ae6:	1986      	adds	r6, r0, r6
   b5ae8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b5aec:	42bb      	cmp	r3, r7
   b5aee:	bf08      	it	eq
   b5af0:	42b2      	cmpeq	r2, r6
{
   b5af2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b5af4:	d013      	beq.n	b5b1e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b5af6:	a903      	add	r1, sp, #12
   b5af8:	4668      	mov	r0, sp
   b5afa:	e9cd 6700 	strd	r6, r7, [sp]
   b5afe:	f7ff fda3 	bl	b5648 <localtime_r>
	calendar_time.tm_year += 1900;
   b5b02:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5b04:	4d09      	ldr	r5, [pc, #36]	; (b5b2c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b5b06:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5b0a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b5b0c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b5b16:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5b1a:	6823      	ldr	r3, [r4, #0]
   b5b1c:	602b      	str	r3, [r5, #0]
    }
}
   b5b1e:	b00c      	add	sp, #48	; 0x30
   b5b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5b24:	2003e6d0 	.word	0x2003e6d0
   b5b28:	2003e6c8 	.word	0x2003e6c8
   b5b2c:	2003e6a4 	.word	0x2003e6a4
   b5b30:	2003e6d8 	.word	0x2003e6d8

000b5b34 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5b34:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5b36:	2000      	movs	r0, #0
   b5b38:	f7ff fd1e 	bl	b5578 <spark_sync_time_pending>
   b5b3c:	b128      	cbz	r0, b5b4a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5b3e:	f7ff fd03 	bl	b5548 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5b42:	f080 0001 	eor.w	r0, r0, #1
   b5b46:	b2c0      	uxtb	r0, r0
    }
   b5b48:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5b4a:	2001      	movs	r0, #1
   b5b4c:	e7fc      	b.n	b5b48 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5b50 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b5b50:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b5b52:	f7ff ffb9 	bl	b5ac8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b5b56:	4b02      	ldr	r3, [pc, #8]	; (b5b60 <_ZN9TimeClass5monthEx+0x10>)
   b5b58:	6918      	ldr	r0, [r3, #16]
}
   b5b5a:	3001      	adds	r0, #1
   b5b5c:	bd08      	pop	{r3, pc}
   b5b5e:	bf00      	nop
   b5b60:	2003e6a4 	.word	0x2003e6a4

000b5b64 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5b64:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5b66:	2000      	movs	r0, #0
   b5b68:	f7ff fb02 	bl	b5170 <hal_rtc_time_is_valid>
    if (rtcstate)
   b5b6c:	4604      	mov	r4, r0
   b5b6e:	b9a0      	cbnz	r0, b5b9a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5b70:	f7ff fc36 	bl	b53e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5b74:	2801      	cmp	r0, #1
   b5b76:	d110      	bne.n	b5b9a <_ZN9TimeClass7isValidEv+0x36>
   b5b78:	4620      	mov	r0, r4
   b5b7a:	f7ff fc59 	bl	b5430 <system_thread_get_state>
   b5b7e:	b960      	cbnz	r0, b5b9a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5b80:	f7ff ffd8 	bl	b5b34 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5b84:	b910      	cbnz	r0, b5b8c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5b86:	f7ff fcd7 	bl	b5538 <spark_process>
        while (_while() && !_condition()) {
   b5b8a:	e7f9      	b.n	b5b80 <_ZN9TimeClass7isValidEv+0x1c>
   b5b8c:	f7ff ffd2 	bl	b5b34 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5b94:	2000      	movs	r0, #0
   b5b96:	f7ff baeb 	b.w	b5170 <hal_rtc_time_is_valid>
}
   b5b9a:	4620      	mov	r0, r4
   b5b9c:	bd10      	pop	{r4, pc}

000b5b9e <_ZN9TimeClass3nowEv>:
{
   b5b9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5ba0:	f7ff ffe0 	bl	b5b64 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5ba4:	2210      	movs	r2, #16
   b5ba6:	2100      	movs	r1, #0
   b5ba8:	4668      	mov	r0, sp
   b5baa:	f001 fff4 	bl	b7b96 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5bae:	2100      	movs	r1, #0
   b5bb0:	4668      	mov	r0, sp
   b5bb2:	f7ff fae5 	bl	b5180 <hal_rtc_get_time>
}
   b5bb6:	9800      	ldr	r0, [sp, #0]
   b5bb8:	b005      	add	sp, #20
   b5bba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5bc0 <_ZN9TimeClass4hourEv>:
{
   b5bc0:	b508      	push	{r3, lr}
	return hour(now());
   b5bc2:	f7ff ffec 	bl	b5b9e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5bc6:	17c1      	asrs	r1, r0, #31
   b5bc8:	f7ff ff7e 	bl	b5ac8 <_ZL22Refresh_UnixTime_Cachex>
}
   b5bcc:	4b01      	ldr	r3, [pc, #4]	; (b5bd4 <_ZN9TimeClass4hourEv+0x14>)
   b5bce:	6898      	ldr	r0, [r3, #8]
   b5bd0:	bd08      	pop	{r3, pc}
   b5bd2:	bf00      	nop
   b5bd4:	2003e6a4 	.word	0x2003e6a4

000b5bd8 <_ZN9TimeClass6minuteEv>:
{
   b5bd8:	b508      	push	{r3, lr}
	return minute(now());
   b5bda:	f7ff ffe0 	bl	b5b9e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5bde:	17c1      	asrs	r1, r0, #31
   b5be0:	f7ff ff72 	bl	b5ac8 <_ZL22Refresh_UnixTime_Cachex>
}
   b5be4:	4b01      	ldr	r3, [pc, #4]	; (b5bec <_ZN9TimeClass6minuteEv+0x14>)
   b5be6:	6858      	ldr	r0, [r3, #4]
   b5be8:	bd08      	pop	{r3, pc}
   b5bea:	bf00      	nop
   b5bec:	2003e6a4 	.word	0x2003e6a4

000b5bf0 <_ZN9TimeClass3dayEv>:
{
   b5bf0:	b508      	push	{r3, lr}
	return day(now());
   b5bf2:	f7ff ffd4 	bl	b5b9e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5bf6:	17c1      	asrs	r1, r0, #31
   b5bf8:	f7ff ff66 	bl	b5ac8 <_ZL22Refresh_UnixTime_Cachex>
}
   b5bfc:	4b01      	ldr	r3, [pc, #4]	; (b5c04 <_ZN9TimeClass3dayEv+0x14>)
   b5bfe:	68d8      	ldr	r0, [r3, #12]
   b5c00:	bd08      	pop	{r3, pc}
   b5c02:	bf00      	nop
   b5c04:	2003e6a4 	.word	0x2003e6a4

000b5c08 <_ZN9TimeClass5monthEv>:
{
   b5c08:	b508      	push	{r3, lr}
	return month(now());
   b5c0a:	f7ff ffc8 	bl	b5b9e <_ZN9TimeClass3nowEv>
}
   b5c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b5c12:	17c1      	asrs	r1, r0, #31
   b5c14:	f7ff bf9c 	b.w	b5b50 <_ZN9TimeClass5monthEx>

000b5c18 <_ZN9TimeClass4yearEv>:
{
   b5c18:	b508      	push	{r3, lr}
	return year(now());
   b5c1a:	f7ff ffc0 	bl	b5b9e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5c1e:	17c1      	asrs	r1, r0, #31
   b5c20:	f7ff ff52 	bl	b5ac8 <_ZL22Refresh_UnixTime_Cachex>
}
   b5c24:	4b01      	ldr	r3, [pc, #4]	; (b5c2c <_ZN9TimeClass4yearEv+0x14>)
   b5c26:	6958      	ldr	r0, [r3, #20]
   b5c28:	bd08      	pop	{r3, pc}
   b5c2a:	bf00      	nop
   b5c2c:	2003e6a4 	.word	0x2003e6a4

000b5c30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5c30:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5c32:	681a      	ldr	r2, [r3, #0]
   b5c34:	4b02      	ldr	r3, [pc, #8]	; (b5c40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5c36:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5c38:	4770      	bx	lr
   b5c3a:	bf00      	nop
   b5c3c:	2003d770 	.word	0x2003d770
   b5c40:	2003e6a0 	.word	0x2003e6a0

000b5c44 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5c44:	b510      	push	{r4, lr}
   b5c46:	4b04      	ldr	r3, [pc, #16]	; (b5c58 <_ZN9TCPClientD1Ev+0x14>)
   b5c48:	6003      	str	r3, [r0, #0]
   b5c4a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5c4c:	6980      	ldr	r0, [r0, #24]
   b5c4e:	b108      	cbz	r0, b5c54 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5c50:	f7ff fe7d 	bl	b594e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b5c54:	4620      	mov	r0, r4
   b5c56:	bd10      	pop	{r4, pc}
   b5c58:	000ba058 	.word	0x000ba058

000b5c5c <_ZN9TCPClientD0Ev>:
   b5c5c:	b510      	push	{r4, lr}
   b5c5e:	4604      	mov	r4, r0
   b5c60:	f7ff fff0 	bl	b5c44 <_ZN9TCPClientD1Ev>
   b5c64:	4620      	mov	r0, r4
   b5c66:	211c      	movs	r1, #28
   b5c68:	f7fe fa1b 	bl	b40a2 <_ZdlPvj>
   b5c6c:	4620      	mov	r0, r4
   b5c6e:	bd10      	pop	{r4, pc}

000b5c70 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5c70:	4b01      	ldr	r3, [pc, #4]	; (b5c78 <_GLOBAL__sub_I_RGB+0x8>)
   b5c72:	2200      	movs	r2, #0
   b5c74:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5c76:	4770      	bx	lr
   b5c78:	2003e6e0 	.word	0x2003e6e0

000b5c7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5c7c:	4b01      	ldr	r3, [pc, #4]	; (b5c84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5c7e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5c80:	4770      	bx	lr
   b5c82:	bf00      	nop
   b5c84:	2003d774 	.word	0x2003d774

000b5c88 <serialEventRun>:
{
   b5c88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5c8a:	4b0b      	ldr	r3, [pc, #44]	; (b5cb8 <serialEventRun+0x30>)
   b5c8c:	b143      	cbz	r3, b5ca0 <serialEventRun+0x18>
   b5c8e:	f000 fc11 	bl	b64b4 <_Z16_fetch_usbserialv>
   b5c92:	6803      	ldr	r3, [r0, #0]
   b5c94:	691b      	ldr	r3, [r3, #16]
   b5c96:	4798      	blx	r3
   b5c98:	2800      	cmp	r0, #0
   b5c9a:	dd01      	ble.n	b5ca0 <serialEventRun+0x18>
        serialEvent();
   b5c9c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5ca0:	4b06      	ldr	r3, [pc, #24]	; (b5cbc <serialEventRun+0x34>)
   b5ca2:	b143      	cbz	r3, b5cb6 <serialEventRun+0x2e>
   b5ca4:	f001 f93c 	bl	b6f20 <_Z22__fetch_global_Serial1v>
   b5ca8:	6803      	ldr	r3, [r0, #0]
   b5caa:	691b      	ldr	r3, [r3, #16]
   b5cac:	4798      	blx	r3
   b5cae:	2800      	cmp	r0, #0
   b5cb0:	dd01      	ble.n	b5cb6 <serialEventRun+0x2e>
        serialEvent1();
   b5cb2:	f3af 8000 	nop.w
}
   b5cb6:	bd08      	pop	{r3, pc}
	...

000b5cc0 <_post_loop>:
{
   b5cc0:	b508      	push	{r3, lr}
	serialEventRun();
   b5cc2:	f7ff ffe1 	bl	b5c88 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5cc6:	f7ff fa4b 	bl	b5160 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5cca:	4b01      	ldr	r3, [pc, #4]	; (b5cd0 <_post_loop+0x10>)
   b5ccc:	6018      	str	r0, [r3, #0]
}
   b5cce:	bd08      	pop	{r3, pc}
   b5cd0:	2003e744 	.word	0x2003e744

000b5cd4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5cd4:	4805      	ldr	r0, [pc, #20]	; (b5cec <_Z33system_initialize_user_backup_ramv+0x18>)
   b5cd6:	4a06      	ldr	r2, [pc, #24]	; (b5cf0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5cd8:	4906      	ldr	r1, [pc, #24]	; (b5cf4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5cda:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5cdc:	1a12      	subs	r2, r2, r0
   b5cde:	f001 ff4c 	bl	b7b7a <memcpy>
    __backup_sram_signature = signature;
   b5ce2:	4b05      	ldr	r3, [pc, #20]	; (b5cf8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5ce4:	4a05      	ldr	r2, [pc, #20]	; (b5cfc <_Z33system_initialize_user_backup_ramv+0x28>)
   b5ce6:	601a      	str	r2, [r3, #0]
}
   b5ce8:	bd08      	pop	{r3, pc}
   b5cea:	bf00      	nop
   b5cec:	2003f400 	.word	0x2003f400
   b5cf0:	2003f404 	.word	0x2003f404
   b5cf4:	000ba6f4 	.word	0x000ba6f4
   b5cf8:	2003f400 	.word	0x2003f400
   b5cfc:	9a271c1e 	.word	0x9a271c1e

000b5d00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5d00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5d02:	2300      	movs	r3, #0
   b5d04:	9300      	str	r3, [sp, #0]
   b5d06:	461a      	mov	r2, r3
   b5d08:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5d0c:	f7ff fba2 	bl	b5454 <system_ctrl_set_result>
}
   b5d10:	b003      	add	sp, #12
   b5d12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5d18 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5d18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5d1a:	8843      	ldrh	r3, [r0, #2]
   b5d1c:	2b0a      	cmp	r3, #10
   b5d1e:	d008      	beq.n	b5d32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5d20:	2b50      	cmp	r3, #80	; 0x50
   b5d22:	d10b      	bne.n	b5d3c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5d24:	4b09      	ldr	r3, [pc, #36]	; (b5d4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5d26:	681b      	ldr	r3, [r3, #0]
   b5d28:	b14b      	cbz	r3, b5d3e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5d2a:	b003      	add	sp, #12
   b5d2c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5d30:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5d32:	f7ff ffe5 	bl	b5d00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5d36:	b003      	add	sp, #12
   b5d38:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5d3c:	2300      	movs	r3, #0
   b5d3e:	9300      	str	r3, [sp, #0]
   b5d40:	461a      	mov	r2, r3
   b5d42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5d46:	f7ff fb85 	bl	b5454 <system_ctrl_set_result>
}
   b5d4a:	e7f4      	b.n	b5d36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5d4c:	2003e6f4 	.word	0x2003e6f4

000b5d50 <module_user_init_hook>:
{
   b5d50:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5d52:	4812      	ldr	r0, [pc, #72]	; (b5d9c <module_user_init_hook+0x4c>)
   b5d54:	2100      	movs	r1, #0
   b5d56:	f7ff fc6f 	bl	b5638 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5d5a:	4b11      	ldr	r3, [pc, #68]	; (b5da0 <module_user_init_hook+0x50>)
   b5d5c:	681a      	ldr	r2, [r3, #0]
   b5d5e:	4b11      	ldr	r3, [pc, #68]	; (b5da4 <module_user_init_hook+0x54>)
   b5d60:	429a      	cmp	r2, r3
   b5d62:	4b11      	ldr	r3, [pc, #68]	; (b5da8 <module_user_init_hook+0x58>)
   b5d64:	bf0c      	ite	eq
   b5d66:	2201      	moveq	r2, #1
   b5d68:	2200      	movne	r2, #0
   b5d6a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5d6c:	d001      	beq.n	b5d72 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5d6e:	f7ff ffb1 	bl	b5cd4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5d72:	f7ff f9ed 	bl	b5150 <HAL_RNG_GetRandomNumber>
   b5d76:	4604      	mov	r4, r0
    srand(seed);
   b5d78:	f001 ff16 	bl	b7ba8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5d7c:	4b0b      	ldr	r3, [pc, #44]	; (b5dac <module_user_init_hook+0x5c>)
   b5d7e:	b113      	cbz	r3, b5d86 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5d80:	4620      	mov	r0, r4
   b5d82:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5d86:	2100      	movs	r1, #0
   b5d88:	4808      	ldr	r0, [pc, #32]	; (b5dac <module_user_init_hook+0x5c>)
   b5d8a:	f7ff fbfd 	bl	b5588 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5d92:	4807      	ldr	r0, [pc, #28]	; (b5db0 <module_user_init_hook+0x60>)
   b5d94:	2100      	movs	r1, #0
   b5d96:	f7ff bb53 	b.w	b5440 <system_ctrl_set_app_request_handler>
   b5d9a:	bf00      	nop
   b5d9c:	000b5c7d 	.word	0x000b5c7d
   b5da0:	2003f400 	.word	0x2003f400
   b5da4:	9a271c1e 	.word	0x9a271c1e
   b5da8:	2003e6f0 	.word	0x2003e6f0
   b5dac:	00000000 	.word	0x00000000
   b5db0:	000b5d19 	.word	0x000b5d19

000b5db4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5db4:	4770      	bx	lr

000b5db6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5db6:	2000      	movs	r0, #0
   b5db8:	4770      	bx	lr

000b5dba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5dba:	b510      	push	{r4, lr}
   b5dbc:	2110      	movs	r1, #16
   b5dbe:	4604      	mov	r4, r0
   b5dc0:	f7fe f96f 	bl	b40a2 <_ZdlPvj>
   b5dc4:	4620      	mov	r0, r4
   b5dc6:	bd10      	pop	{r4, pc}

000b5dc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5dc8:	b508      	push	{r3, lr}
      { delete this; }
   b5dca:	f7ff fff6 	bl	b5dba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5dce:	bd08      	pop	{r3, pc}

000b5dd0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5dd0:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5dd2:	2200      	movs	r2, #0
   b5dd4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5dd8:	6002      	str	r2, [r0, #0]
   b5dda:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5ddc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5dde:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5de0:	680c      	ldr	r4, [r1, #0]
   b5de2:	8085      	strh	r5, [r0, #4]
   b5de4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5de6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5de8:	bd30      	pop	{r4, r5, pc}

000b5dea <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5dea:	b510      	push	{r4, lr}
   b5dec:	4604      	mov	r4, r0
    free((void*)msg_);
   b5dee:	6800      	ldr	r0, [r0, #0]
   b5df0:	f7ff fbda 	bl	b55a8 <free>
}
   b5df4:	4620      	mov	r0, r4
   b5df6:	bd10      	pop	{r4, pc}

000b5df8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5df8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5dfa:	68c4      	ldr	r4, [r0, #12]
   b5dfc:	b1f4      	cbz	r4, b5e3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5dfe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5e00:	2b02      	cmp	r3, #2
   b5e02:	d103      	bne.n	b5e0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5e04:	f104 000c 	add.w	r0, r4, #12
   b5e08:	f7ff ffef 	bl	b5dea <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5e0c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5e0e:	b135      	cbz	r5, b5e1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5e10:	4628      	mov	r0, r5
   b5e12:	f7ff fd93 	bl	b593c <_ZNSt14_Function_baseD1Ev>
   b5e16:	2110      	movs	r1, #16
   b5e18:	4628      	mov	r0, r5
   b5e1a:	f7fe f942 	bl	b40a2 <_ZdlPvj>
   b5e1e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5e20:	b135      	cbz	r5, b5e30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5e22:	4628      	mov	r0, r5
   b5e24:	f7ff fd8a 	bl	b593c <_ZNSt14_Function_baseD1Ev>
   b5e28:	2110      	movs	r1, #16
   b5e2a:	4628      	mov	r0, r5
   b5e2c:	f7fe f939 	bl	b40a2 <_ZdlPvj>
   b5e30:	4620      	mov	r0, r4
   b5e32:	2114      	movs	r1, #20
   b5e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5e38:	f7fe b933 	b.w	b40a2 <_ZdlPvj>
   b5e3c:	bd38      	pop	{r3, r4, r5, pc}

000b5e3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5e3e:	680b      	ldr	r3, [r1, #0]
   b5e40:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5e42:	684b      	ldr	r3, [r1, #4]
   b5e44:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5e46:	b113      	cbz	r3, b5e4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5e48:	685a      	ldr	r2, [r3, #4]
   b5e4a:	3201      	adds	r2, #1
   b5e4c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5e4e:	4770      	bx	lr

000b5e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5e52:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5e54:	4668      	mov	r0, sp
   b5e56:	460d      	mov	r5, r1
   b5e58:	f7ff fff1 	bl	b5e3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5e5c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5e5e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5e60:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5e62:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5e64:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5e66:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5e68:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5e6a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5e6c:	f7fe fba0 	bl	b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5e70:	b135      	cbz	r5, b5e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5e72:	1d28      	adds	r0, r5, #4
   b5e74:	f7fe fb9c 	bl	b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5e78:	2108      	movs	r1, #8
   b5e7a:	4628      	mov	r0, r5
   b5e7c:	f7fe f911 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b5e80:	4620      	mov	r0, r4
   b5e82:	b003      	add	sp, #12
   b5e84:	bd30      	pop	{r4, r5, pc}

000b5e86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5e86:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5e88:	b510      	push	{r4, lr}
      if (_M_empty())
   b5e8a:	b90a      	cbnz	r2, b5e90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5e8c:	f001 f8aa 	bl	b6fe4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5e94:	68c3      	ldr	r3, [r0, #12]
   b5e96:	4718      	bx	r3

000b5e98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5e98:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5e9a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5e9c:	f100 0110 	add.w	r1, r0, #16
   b5ea0:	f7ff fff1 	bl	b5e86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5ea4:	bd08      	pop	{r3, pc}

000b5ea6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5ea6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5ea8:	b510      	push	{r4, lr}
      if (_M_empty())
   b5eaa:	b90a      	cbnz	r2, b5eb0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5eac:	f001 f89a 	bl	b6fe4 <_ZSt25__throw_bad_function_callv>
    }
   b5eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5eb4:	68c3      	ldr	r3, [r0, #12]
   b5eb6:	4718      	bx	r3

000b5eb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5eb8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5eba:	6800      	ldr	r0, [r0, #0]
   b5ebc:	f100 0110 	add.w	r1, r0, #16
   b5ec0:	f7ff fff1 	bl	b5ea6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5ec4:	bd08      	pop	{r3, pc}
	...

000b5ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5ec8:	b538      	push	{r3, r4, r5, lr}
   b5eca:	2300      	movs	r3, #0
   b5ecc:	4604      	mov	r4, r0
   b5ece:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5ed0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5ed2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5ed4:	f7fe f8df 	bl	b4096 <_Znwj>
   b5ed8:	b128      	cbz	r0, b5ee6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5eda:	2301      	movs	r3, #1
   b5edc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5ee0:	4b02      	ldr	r3, [pc, #8]	; (b5eec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5ee2:	6003      	str	r3, [r0, #0]
   b5ee4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5ee6:	6020      	str	r0, [r4, #0]
	}
   b5ee8:	4620      	mov	r0, r4
   b5eea:	bd38      	pop	{r3, r4, r5, pc}
   b5eec:	000b9f6c 	.word	0x000b9f6c

000b5ef0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5ef0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5ef2:	2300      	movs	r3, #0
   b5ef4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5ef6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5ef8:	4604      	mov	r4, r0
   b5efa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5efc:	b12b      	cbz	r3, b5f0a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5efe:	2202      	movs	r2, #2
   b5f00:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5f02:	68eb      	ldr	r3, [r5, #12]
   b5f04:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5f06:	68ab      	ldr	r3, [r5, #8]
   b5f08:	60a3      	str	r3, [r4, #8]
    }
   b5f0a:	4620      	mov	r0, r4
   b5f0c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5f12:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5f14:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5f16:	4668      	mov	r0, sp
   b5f18:	f7ff ff5a 	bl	b5dd0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5f1c:	f04f 0302 	mov.w	r3, #2
   b5f20:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5f24:	2a00      	cmp	r2, #0
   b5f26:	d103      	bne.n	b5f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5f28:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5f2c:	2900      	cmp	r1, #0
   b5f2e:	d1f7      	bne.n	b5f20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5f30:	d125      	bne.n	b5f7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5f32:	f104 050c 	add.w	r5, r4, #12
   b5f36:	4669      	mov	r1, sp
   b5f38:	4628      	mov	r0, r5
   b5f3a:	f7ff ff49 	bl	b5dd0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5f3e:	f3bf 8f5b 	dmb	ish
   b5f42:	2301      	movs	r3, #1
   b5f44:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5f46:	2000      	movs	r0, #0
   b5f48:	f104 0308 	add.w	r3, r4, #8
   b5f4c:	f3bf 8f5b 	dmb	ish
   b5f50:	e853 6f00 	ldrex	r6, [r3]
   b5f54:	e843 0200 	strex	r2, r0, [r3]
   b5f58:	2a00      	cmp	r2, #0
   b5f5a:	d1f9      	bne.n	b5f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5f5c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5f60:	b16e      	cbz	r6, b5f7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5f62:	f7ff fa55 	bl	b5410 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5f66:	b178      	cbz	r0, b5f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5f68:	4629      	mov	r1, r5
   b5f6a:	4630      	mov	r0, r6
   b5f6c:	f7ff ff8b 	bl	b5e86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5f70:	4630      	mov	r0, r6
   b5f72:	f7ff fce3 	bl	b593c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5f76:	2110      	movs	r1, #16
   b5f78:	4630      	mov	r0, r6
   b5f7a:	f7fe f892 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b5f7e:	4668      	mov	r0, sp
   b5f80:	f7ff ff33 	bl	b5dea <_ZN8particle5ErrorD1Ev>
    }
   b5f84:	b009      	add	sp, #36	; 0x24
   b5f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5f88:	4631      	mov	r1, r6
   b5f8a:	a802      	add	r0, sp, #8
   b5f8c:	f7ff ffb0 	bl	b5ef0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5f90:	68e0      	ldr	r0, [r4, #12]
   b5f92:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5f96:	b108      	cbz	r0, b5f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5f98:	f001 fe56 	bl	b7c48 <strdup>
        type_(type) {
   b5f9c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5f9e:	2010      	movs	r0, #16
   b5fa0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5fa4:	f7fe f877 	bl	b4096 <_Znwj>
   b5fa8:	4605      	mov	r5, r0
   b5faa:	b1e8      	cbz	r0, b5fe8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5fac:	2700      	movs	r7, #0
   b5fae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5fb0:	2018      	movs	r0, #24
   b5fb2:	f7fe f870 	bl	b4096 <_Znwj>
   b5fb6:	4604      	mov	r4, r0
   b5fb8:	b188      	cbz	r0, b5fde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5fba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5fbc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5fbe:	a802      	add	r0, sp, #8
   b5fc0:	f7ff fcd9 	bl	b5976 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5fc4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5fc6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5fc8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5fca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5fcc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5fce:	a906      	add	r1, sp, #24
   b5fd0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5fd2:	60e3      	str	r3, [r4, #12]
   b5fd4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5fd8:	9205      	str	r2, [sp, #20]
   b5fda:	f7ff fef9 	bl	b5dd0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5fde:	4b08      	ldr	r3, [pc, #32]	; (b6000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5fe0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5fe2:	4b08      	ldr	r3, [pc, #32]	; (b6004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5fe4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5fe6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5fe8:	a806      	add	r0, sp, #24
   b5fea:	f7ff fefe 	bl	b5dea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5fee:	a802      	add	r0, sp, #8
   b5ff0:	f7ff fca4 	bl	b593c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5ff4:	2200      	movs	r2, #0
   b5ff6:	4629      	mov	r1, r5
   b5ff8:	4803      	ldr	r0, [pc, #12]	; (b6008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5ffa:	f7ff fa11 	bl	b5420 <application_thread_invoke>
   b5ffe:	e7b7      	b.n	b5f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6000:	000b5e99 	.word	0x000b5e99
   b6004:	000b611d 	.word	0x000b611d
   b6008:	000b65fd 	.word	0x000b65fd

000b600c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6010:	b08b      	sub	sp, #44	; 0x2c
   b6012:	4605      	mov	r5, r0
   b6014:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6018:	460f      	mov	r7, r1
   b601a:	4690      	mov	r8, r2
   b601c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b601e:	f7ff fa93 	bl	b5548 <spark_cloud_flag_connected>
   b6022:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6024:	4683      	mov	fp, r0
   b6026:	bb38      	cbnz	r0, b6078 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6028:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b602c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b602e:	a905      	add	r1, sp, #20
   b6030:	4630      	mov	r0, r6
   b6032:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6036:	f7ff fecb 	bl	b5dd0 <_ZN8particle5ErrorC1EOS0_>
   b603a:	2014      	movs	r0, #20
   b603c:	f7fe f82b 	bl	b4096 <_Znwj>
   b6040:	4604      	mov	r4, r0
   b6042:	b148      	cbz	r0, b6058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6044:	2302      	movs	r3, #2
   b6046:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6048:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b604a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b604e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6050:	4631      	mov	r1, r6
   b6052:	300c      	adds	r0, #12
   b6054:	f7ff febc 	bl	b5dd0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6058:	4628      	mov	r0, r5
	: __shared_count(__p)
   b605a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b605c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6060:	f7ff ff32 	bl	b5ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6064:	4630      	mov	r0, r6
   b6066:	f7ff fec0 	bl	b5dea <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b606a:	a805      	add	r0, sp, #20
   b606c:	f7ff febd 	bl	b5dea <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6070:	4628      	mov	r0, r5
   b6072:	b00b      	add	sp, #44	; 0x2c
   b6074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6078:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b607a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b607c:	2014      	movs	r0, #20
   b607e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6082:	9307      	str	r3, [sp, #28]
   b6084:	f7fe f807 	bl	b4096 <_Znwj>
   b6088:	4601      	mov	r1, r0
   b608a:	b118      	cbz	r0, b6094 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b608c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6090:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6092:	7044      	strb	r4, [r0, #1]
   b6094:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6096:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6098:	f7ff ff16 	bl	b5ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b609c:	4b1e      	ldr	r3, [pc, #120]	; (b6118 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b609e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b60a0:	2008      	movs	r0, #8
   b60a2:	f7fd fff8 	bl	b4096 <_Znwj>
   b60a6:	4604      	mov	r4, r0
   b60a8:	b110      	cbz	r0, b60b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b60aa:	a903      	add	r1, sp, #12
   b60ac:	f7ff fec7 	bl	b5e3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b60b0:	9600      	str	r6, [sp, #0]
   b60b2:	fa5f f38a 	uxtb.w	r3, sl
   b60b6:	464a      	mov	r2, r9
   b60b8:	4641      	mov	r1, r8
   b60ba:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b60bc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b60be:	f7ff fa4b 	bl	b5558 <spark_send_event>
   b60c2:	b9b8      	cbnz	r0, b60f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b60c4:	9b03      	ldr	r3, [sp, #12]
   b60c6:	785b      	ldrb	r3, [r3, #1]
   b60c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b60cc:	b993      	cbnz	r3, b60f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b60ce:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b60d2:	a905      	add	r1, sp, #20
   b60d4:	a803      	add	r0, sp, #12
   b60d6:	9205      	str	r2, [sp, #20]
   b60d8:	f8ad 3018 	strh.w	r3, [sp, #24]
   b60dc:	f7ff ff18 	bl	b5f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b60e0:	a805      	add	r0, sp, #20
   b60e2:	f7ff fe82 	bl	b5dea <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b60e6:	a805      	add	r0, sp, #20
   b60e8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b60ea:	f7ff feb1 	bl	b5e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b60ee:	a806      	add	r0, sp, #24
   b60f0:	f7fe fa5e 	bl	b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b60f4:	a903      	add	r1, sp, #12
   b60f6:	a805      	add	r0, sp, #20
   b60f8:	f7ff fea1 	bl	b5e3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b60fc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b60fe:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6100:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6102:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6104:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6106:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6108:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b610a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b610c:	f7fe fa50 	bl	b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6110:	a804      	add	r0, sp, #16
   b6112:	f7fe fa4d 	bl	b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6116:	e7ab      	b.n	b6070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6118:	000b6199 	.word	0x000b6199

000b611c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b611c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b611e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6120:	4605      	mov	r5, r0
	switch (__op)
   b6122:	d103      	bne.n	b612c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6124:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6126:	6003      	str	r3, [r0, #0]
      }
   b6128:	2000      	movs	r0, #0
   b612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b612c:	2a02      	cmp	r2, #2
   b612e:	d010      	beq.n	b6152 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6130:	2a03      	cmp	r2, #3
   b6132:	d1f9      	bne.n	b6128 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6134:	6804      	ldr	r4, [r0, #0]
   b6136:	2c00      	cmp	r4, #0
   b6138:	d0f6      	beq.n	b6128 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b613a:	f104 0010 	add.w	r0, r4, #16
   b613e:	f7ff fe54 	bl	b5dea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6142:	4620      	mov	r0, r4
   b6144:	f7ff fbfa 	bl	b593c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6148:	2118      	movs	r1, #24
   b614a:	4620      	mov	r0, r4
   b614c:	f7fd ffa9 	bl	b40a2 <_ZdlPvj>
   b6150:	e7ea      	b.n	b6128 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6152:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6154:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6156:	f7fd ff9e 	bl	b4096 <_Znwj>
   b615a:	4604      	mov	r4, r0
   b615c:	b150      	cbz	r0, b6174 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b615e:	4631      	mov	r1, r6
   b6160:	f7ff fec6 	bl	b5ef0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6164:	6930      	ldr	r0, [r6, #16]
   b6166:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b616a:	b108      	cbz	r0, b6170 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b616c:	f001 fd6c 	bl	b7c48 <strdup>
        type_(type) {
   b6170:	6120      	str	r0, [r4, #16]
   b6172:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6174:	602c      	str	r4, [r5, #0]
	}
   b6176:	e7d7      	b.n	b6128 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6178 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6178:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b617a:	2300      	movs	r3, #0
   b617c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b617e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6180:	4604      	mov	r4, r0
   b6182:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6184:	b12b      	cbz	r3, b6192 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6186:	2202      	movs	r2, #2
   b6188:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b618a:	68eb      	ldr	r3, [r5, #12]
   b618c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b618e:	68ab      	ldr	r3, [r5, #8]
   b6190:	60a3      	str	r3, [r4, #8]
    }
   b6192:	4620      	mov	r0, r4
   b6194:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6198 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6198:	b5f0      	push	{r4, r5, r6, r7, lr}
   b619a:	b089      	sub	sp, #36	; 0x24
   b619c:	4604      	mov	r4, r0
   b619e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b61a0:	a801      	add	r0, sp, #4
   b61a2:	4611      	mov	r1, r2
   b61a4:	f7ff fe54 	bl	b5e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b61a8:	b1a4      	cbz	r4, b61d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b61aa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b61ac:	b11d      	cbz	r5, b61b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b61ae:	4628      	mov	r0, r5
   b61b0:	f001 fd4a 	bl	b7c48 <strdup>
   b61b4:	4605      	mov	r5, r0
   b61b6:	a801      	add	r0, sp, #4
   b61b8:	a903      	add	r1, sp, #12
        type_(type) {
   b61ba:	9503      	str	r5, [sp, #12]
   b61bc:	f8ad 4010 	strh.w	r4, [sp, #16]
   b61c0:	f7ff fea6 	bl	b5f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b61c4:	a803      	add	r0, sp, #12
   b61c6:	f7ff fe10 	bl	b5dea <_ZN8particle5ErrorD1Ev>
   b61ca:	a802      	add	r0, sp, #8
   b61cc:	f7fe f9f0 	bl	b45b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61d0:	b009      	add	sp, #36	; 0x24
   b61d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b61d4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b61d6:	2301      	movs	r3, #1
   b61d8:	e8d5 2f4f 	ldrexb	r2, [r5]
   b61dc:	2a00      	cmp	r2, #0
   b61de:	d103      	bne.n	b61e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b61e0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b61e4:	2900      	cmp	r1, #0
   b61e6:	d1f7      	bne.n	b61d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b61e8:	d1ef      	bne.n	b61ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b61ea:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b61ec:	f3bf 8f5b 	dmb	ish
   b61f0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b61f2:	1d2b      	adds	r3, r5, #4
   b61f4:	f3bf 8f5b 	dmb	ish
   b61f8:	e853 6f00 	ldrex	r6, [r3]
   b61fc:	e843 4200 	strex	r2, r4, [r3]
   b6200:	2a00      	cmp	r2, #0
   b6202:	d1f9      	bne.n	b61f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6204:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6208:	2e00      	cmp	r6, #0
   b620a:	d0de      	beq.n	b61ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b620c:	4620      	mov	r0, r4
   b620e:	f7ff f8ff 	bl	b5410 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6212:	4607      	mov	r7, r0
   b6214:	b160      	cbz	r0, b6230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6216:	f105 010c 	add.w	r1, r5, #12
   b621a:	4630      	mov	r0, r6
   b621c:	f7ff fe43 	bl	b5ea6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6220:	4630      	mov	r0, r6
   b6222:	f7ff fb8b 	bl	b593c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6226:	2110      	movs	r1, #16
   b6228:	4630      	mov	r0, r6
   b622a:	f7fd ff3a 	bl	b40a2 <_ZdlPvj>
   b622e:	e7cc      	b.n	b61ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6230:	4631      	mov	r1, r6
   b6232:	a803      	add	r0, sp, #12
   b6234:	f7ff ffa0 	bl	b6178 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6238:	7b2b      	ldrb	r3, [r5, #12]
   b623a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b623e:	2010      	movs	r0, #16
   b6240:	f7fd ff29 	bl	b4096 <_Znwj>
   b6244:	4605      	mov	r5, r0
   b6246:	b1d0      	cbz	r0, b627e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6248:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b624a:	2014      	movs	r0, #20
   b624c:	f7fd ff23 	bl	b4096 <_Znwj>
   b6250:	4604      	mov	r4, r0
   b6252:	b178      	cbz	r0, b6274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6254:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6256:	4601      	mov	r1, r0
   b6258:	a803      	add	r0, sp, #12
   b625a:	f7ff fb8c 	bl	b5976 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b625e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6260:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6262:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6264:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6266:	9205      	str	r2, [sp, #20]
   b6268:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b626a:	60e3      	str	r3, [r4, #12]
   b626c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6270:	9206      	str	r2, [sp, #24]
   b6272:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6274:	4b06      	ldr	r3, [pc, #24]	; (b6290 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6276:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6278:	4b06      	ldr	r3, [pc, #24]	; (b6294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b627a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b627c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b627e:	a803      	add	r0, sp, #12
   b6280:	f7ff fb5c 	bl	b593c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6284:	2200      	movs	r2, #0
   b6286:	4629      	mov	r1, r5
   b6288:	4803      	ldr	r0, [pc, #12]	; (b6298 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b628a:	f7ff f8c9 	bl	b5420 <application_thread_invoke>
   b628e:	e7c7      	b.n	b6220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6290:	000b5eb9 	.word	0x000b5eb9
   b6294:	000b629d 	.word	0x000b629d
   b6298:	000b65fd 	.word	0x000b65fd

000b629c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b629c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b629e:	b570      	push	{r4, r5, r6, lr}
   b62a0:	4604      	mov	r4, r0
	switch (__op)
   b62a2:	d103      	bne.n	b62ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b62a4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b62a6:	6003      	str	r3, [r0, #0]
      }
   b62a8:	2000      	movs	r0, #0
   b62aa:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b62ac:	2a02      	cmp	r2, #2
   b62ae:	d00c      	beq.n	b62ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b62b0:	2a03      	cmp	r2, #3
   b62b2:	d1f9      	bne.n	b62a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b62b4:	6804      	ldr	r4, [r0, #0]
   b62b6:	2c00      	cmp	r4, #0
   b62b8:	d0f6      	beq.n	b62a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b62ba:	4620      	mov	r0, r4
   b62bc:	f7ff fb3e 	bl	b593c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b62c0:	2114      	movs	r1, #20
   b62c2:	4620      	mov	r0, r4
   b62c4:	f7fd feed 	bl	b40a2 <_ZdlPvj>
   b62c8:	e7ee      	b.n	b62a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b62ca:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b62cc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b62ce:	f7fd fee2 	bl	b4096 <_Znwj>
   b62d2:	4605      	mov	r5, r0
   b62d4:	b120      	cbz	r0, b62e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b62d6:	4631      	mov	r1, r6
   b62d8:	f7ff ff4e 	bl	b6178 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b62dc:	7c33      	ldrb	r3, [r6, #16]
   b62de:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b62e0:	6025      	str	r5, [r4, #0]
	}
   b62e2:	e7e1      	b.n	b62a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b62e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b62e4:	4770      	bx	lr

000b62e6 <_ZN9IPAddressD0Ev>:
   b62e6:	b510      	push	{r4, lr}
   b62e8:	2118      	movs	r1, #24
   b62ea:	4604      	mov	r4, r0
   b62ec:	f7fd fed9 	bl	b40a2 <_ZdlPvj>
   b62f0:	4620      	mov	r0, r4
   b62f2:	bd10      	pop	{r4, pc}

000b62f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b62f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b62f6:	7d03      	ldrb	r3, [r0, #20]
   b62f8:	2b06      	cmp	r3, #6
{
   b62fa:	b08d      	sub	sp, #52	; 0x34
   b62fc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62fe:	f100 0704 	add.w	r7, r0, #4
   b6302:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6306:	d012      	beq.n	b632e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6308:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b630c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6310:	220a      	movs	r2, #10
   b6312:	4630      	mov	r0, r6
   b6314:	f7ff fb81 	bl	b5a1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6318:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b631a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b631c:	d019      	beq.n	b6352 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b631e:	2c00      	cmp	r4, #0
   b6320:	d0f4      	beq.n	b630c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6322:	212e      	movs	r1, #46	; 0x2e
   b6324:	4630      	mov	r0, r6
   b6326:	f7ff fb69 	bl	b59fc <_ZN5Print5printEc>
   b632a:	4404      	add	r4, r0
   b632c:	e7ee      	b.n	b630c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b632e:	232f      	movs	r3, #47	; 0x2f
   b6330:	466a      	mov	r2, sp
   b6332:	4639      	mov	r1, r7
   b6334:	200a      	movs	r0, #10
		buf[0] = 0;
   b6336:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b633a:	f7fe ff49 	bl	b51d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b633e:	4668      	mov	r0, sp
   b6340:	f001 fc9f 	bl	b7c82 <strlen>
   b6344:	6833      	ldr	r3, [r6, #0]
   b6346:	4602      	mov	r2, r0
   b6348:	68db      	ldr	r3, [r3, #12]
   b634a:	4669      	mov	r1, sp
   b634c:	4630      	mov	r0, r6
   b634e:	4798      	blx	r3
   b6350:	4604      	mov	r4, r0
    }
    return n;
}
   b6352:	4620      	mov	r0, r4
   b6354:	b00d      	add	sp, #52	; 0x34
   b6356:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6358 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6358:	b510      	push	{r4, lr}
   b635a:	4b05      	ldr	r3, [pc, #20]	; (b6370 <_ZN9IPAddressC1Ev+0x18>)
   b635c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b635e:	2211      	movs	r2, #17
   b6360:	f840 3b04 	str.w	r3, [r0], #4
   b6364:	2100      	movs	r1, #0
   b6366:	f001 fc16 	bl	b7b96 <memset>
}
   b636a:	4620      	mov	r0, r4
   b636c:	bd10      	pop	{r4, pc}
   b636e:	bf00      	nop
   b6370:	000b9f88 	.word	0x000b9f88

000b6374 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6374:	4603      	mov	r3, r0
   b6376:	4a07      	ldr	r2, [pc, #28]	; (b6394 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6378:	b510      	push	{r4, lr}
   b637a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b637e:	f101 0210 	add.w	r2, r1, #16
   b6382:	f851 4b04 	ldr.w	r4, [r1], #4
   b6386:	f843 4b04 	str.w	r4, [r3], #4
   b638a:	4291      	cmp	r1, r2
   b638c:	d1f9      	bne.n	b6382 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b638e:	780a      	ldrb	r2, [r1, #0]
   b6390:	701a      	strb	r2, [r3, #0]
}
   b6392:	bd10      	pop	{r4, pc}
   b6394:	000b9f88 	.word	0x000b9f88

000b6398 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6398:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b639a:	2b04      	cmp	r3, #4
   b639c:	d104      	bne.n	b63a8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b639e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b63a0:	3800      	subs	r0, #0
   b63a2:	bf18      	it	ne
   b63a4:	2001      	movne	r0, #1
   b63a6:	4770      	bx	lr
    } else if (version() == 6) {
   b63a8:	2b06      	cmp	r3, #6
   b63aa:	d107      	bne.n	b63bc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b63ac:	6843      	ldr	r3, [r0, #4]
   b63ae:	b93b      	cbnz	r3, b63c0 <_ZNK9IPAddresscvbEv+0x28>
   b63b0:	6883      	ldr	r3, [r0, #8]
   b63b2:	b92b      	cbnz	r3, b63c0 <_ZNK9IPAddresscvbEv+0x28>
   b63b4:	68c3      	ldr	r3, [r0, #12]
   b63b6:	b91b      	cbnz	r3, b63c0 <_ZNK9IPAddresscvbEv+0x28>
   b63b8:	6900      	ldr	r0, [r0, #16]
   b63ba:	e7f1      	b.n	b63a0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b63bc:	2000      	movs	r0, #0
   b63be:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b63c0:	2001      	movs	r0, #1
}
   b63c2:	4770      	bx	lr

000b63c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b63c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b63c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b63ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b63ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b63d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b63d6:	2304      	movs	r3, #4
   b63d8:	6041      	str	r1, [r0, #4]
   b63da:	7503      	strb	r3, [r0, #20]
}
   b63dc:	bd10      	pop	{r4, pc}
	...

000b63e0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b63e0:	b507      	push	{r0, r1, r2, lr}
   b63e2:	4b06      	ldr	r3, [pc, #24]	; (b63fc <_ZN9IPAddressC1EPKh+0x1c>)
   b63e4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b63e6:	78cb      	ldrb	r3, [r1, #3]
   b63e8:	9300      	str	r3, [sp, #0]
   b63ea:	788b      	ldrb	r3, [r1, #2]
   b63ec:	784a      	ldrb	r2, [r1, #1]
   b63ee:	7809      	ldrb	r1, [r1, #0]
   b63f0:	f7ff ffe8 	bl	b63c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b63f4:	b003      	add	sp, #12
   b63f6:	f85d fb04 	ldr.w	pc, [sp], #4
   b63fa:	bf00      	nop
   b63fc:	000b9f88 	.word	0x000b9f88

000b6400 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6400:	7441      	strb	r1, [r0, #17]
}
   b6402:	4770      	bx	lr

000b6404 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6404:	4770      	bx	lr

000b6406 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6406:	4770      	bx	lr

000b6408 <_ZN9USBSerial4readEv>:
{
   b6408:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b640a:	2100      	movs	r1, #0
   b640c:	7c00      	ldrb	r0, [r0, #16]
   b640e:	f7fe ffc7 	bl	b53a0 <HAL_USB_USART_Receive_Data>
}
   b6412:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6416:	bd08      	pop	{r3, pc}

000b6418 <_ZN9USBSerial4peekEv>:
{
   b6418:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b641a:	2101      	movs	r1, #1
   b641c:	7c00      	ldrb	r0, [r0, #16]
   b641e:	f7fe ffbf 	bl	b53a0 <HAL_USB_USART_Receive_Data>
}
   b6422:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6426:	bd08      	pop	{r3, pc}

000b6428 <_ZN9USBSerial17availableForWriteEv>:
{
   b6428:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b642a:	7c00      	ldrb	r0, [r0, #16]
   b642c:	f7fe ffb0 	bl	b5390 <HAL_USB_USART_Available_Data_For_Write>
}
   b6430:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6434:	bd08      	pop	{r3, pc}

000b6436 <_ZN9USBSerial9availableEv>:
{
   b6436:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6438:	7c00      	ldrb	r0, [r0, #16]
   b643a:	f7fe ffa1 	bl	b5380 <HAL_USB_USART_Available_Data>
}
   b643e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6442:	bd08      	pop	{r3, pc}

000b6444 <_ZN9USBSerial5writeEh>:
{
   b6444:	b513      	push	{r0, r1, r4, lr}
   b6446:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6448:	7c00      	ldrb	r0, [r0, #16]
{
   b644a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b644c:	f7fe ffa0 	bl	b5390 <HAL_USB_USART_Available_Data_For_Write>
   b6450:	2800      	cmp	r0, #0
   b6452:	9901      	ldr	r1, [sp, #4]
   b6454:	dc01      	bgt.n	b645a <_ZN9USBSerial5writeEh+0x16>
   b6456:	7c60      	ldrb	r0, [r4, #17]
   b6458:	b120      	cbz	r0, b6464 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b645a:	7c20      	ldrb	r0, [r4, #16]
   b645c:	f7fe ffa8 	bl	b53b0 <HAL_USB_USART_Send_Data>
   b6460:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6464:	b002      	add	sp, #8
   b6466:	bd10      	pop	{r4, pc}

000b6468 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6468:	7c00      	ldrb	r0, [r0, #16]
   b646a:	f7fe bfa9 	b.w	b53c0 <HAL_USB_USART_Flush_Data>

000b646e <_ZN9USBSerialD0Ev>:
   b646e:	b510      	push	{r4, lr}
   b6470:	2114      	movs	r1, #20
   b6472:	4604      	mov	r4, r0
   b6474:	f7fd fe15 	bl	b40a2 <_ZdlPvj>
   b6478:	4620      	mov	r0, r4
   b647a:	bd10      	pop	{r4, pc}

000b647c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b647c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b647e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6482:	4604      	mov	r4, r0
   b6484:	4608      	mov	r0, r1
   b6486:	2100      	movs	r1, #0
   b6488:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b648c:	4b04      	ldr	r3, [pc, #16]	; (b64a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b648e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6490:	2301      	movs	r3, #1
  _serial = serial;
   b6492:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6494:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6496:	4611      	mov	r1, r2
   b6498:	f7fe ff6a 	bl	b5370 <HAL_USB_USART_Init>
}
   b649c:	4620      	mov	r0, r4
   b649e:	bd10      	pop	{r4, pc}
   b64a0:	000b9f9c 	.word	0x000b9f9c

000b64a4 <_Z19acquireSerialBufferv>:
{
   b64a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b64a6:	2214      	movs	r2, #20
{
   b64a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b64aa:	2100      	movs	r1, #0
   b64ac:	f001 fb73 	bl	b7b96 <memset>
}
   b64b0:	4620      	mov	r0, r4
   b64b2:	bd10      	pop	{r4, pc}

000b64b4 <_Z16_fetch_usbserialv>:
{
   b64b4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64b6:	4c0f      	ldr	r4, [pc, #60]	; (b64f4 <_Z16_fetch_usbserialv+0x40>)
{
   b64b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b64ba:	a803      	add	r0, sp, #12
   b64bc:	f7ff fff2 	bl	b64a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64c0:	7821      	ldrb	r1, [r4, #0]
   b64c2:	f3bf 8f5b 	dmb	ish
   b64c6:	f011 0101 	ands.w	r1, r1, #1
   b64ca:	d10f      	bne.n	b64ec <_Z16_fetch_usbserialv+0x38>
   b64cc:	4620      	mov	r0, r4
   b64ce:	9101      	str	r1, [sp, #4]
   b64d0:	f7fd fde9 	bl	b40a6 <__cxa_guard_acquire>
   b64d4:	9901      	ldr	r1, [sp, #4]
   b64d6:	b148      	cbz	r0, b64ec <_Z16_fetch_usbserialv+0x38>
   b64d8:	aa03      	add	r2, sp, #12
   b64da:	4807      	ldr	r0, [pc, #28]	; (b64f8 <_Z16_fetch_usbserialv+0x44>)
   b64dc:	f7ff ffce 	bl	b647c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b64e0:	4620      	mov	r0, r4
   b64e2:	f7fd fde5 	bl	b40b0 <__cxa_guard_release>
   b64e6:	4805      	ldr	r0, [pc, #20]	; (b64fc <_Z16_fetch_usbserialv+0x48>)
   b64e8:	f001 fb26 	bl	b7b38 <atexit>
	return _usbserial;
}
   b64ec:	4802      	ldr	r0, [pc, #8]	; (b64f8 <_Z16_fetch_usbserialv+0x44>)
   b64ee:	b008      	add	sp, #32
   b64f0:	bd10      	pop	{r4, pc}
   b64f2:	bf00      	nop
   b64f4:	2003e6f8 	.word	0x2003e6f8
   b64f8:	2003e6fc 	.word	0x2003e6fc
   b64fc:	000b6405 	.word	0x000b6405

000b6500 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b6500:	4700      	bx	r0
	...

000b6504 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b6504:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b6508:	2400      	movs	r4, #0
{
   b650a:	461d      	mov	r5, r3
   b650c:	460f      	mov	r7, r1
   b650e:	4690      	mov	r8, r2
   b6510:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b6512:	f7fe fe0d 	bl	b5130 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b6516:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6518:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b651c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6520:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b6524:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b6528:	bfa2      	ittt	ge
   b652a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b652e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b6532:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6534:	4907      	ldr	r1, [pc, #28]	; (b6554 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b6536:	9400      	str	r4, [sp, #0]
   b6538:	4643      	mov	r3, r8
   b653a:	463a      	mov	r2, r7
   b653c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b653e:	bfa8      	it	ge
   b6540:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6544:	f7fe fdec 	bl	b5120 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b6548:	fab0 f080 	clz	r0, r0
   b654c:	0940      	lsrs	r0, r0, #5
   b654e:	b004      	add	sp, #16
   b6550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6554:	000b6501 	.word	0x000b6501

000b6558 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6558:	4770      	bx	lr

000b655a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b655a:	7441      	strb	r1, [r0, #17]
}
   b655c:	4770      	bx	lr

000b655e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b655e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6560:	7c00      	ldrb	r0, [r0, #16]
   b6562:	f7fe fe7d 	bl	b5260 <hal_usart_available_data_for_write>
}
   b6566:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b656a:	bd08      	pop	{r3, pc}

000b656c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b656c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b656e:	7c00      	ldrb	r0, [r0, #16]
   b6570:	f7fe fe4e 	bl	b5210 <hal_usart_available>
}
   b6574:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6578:	bd08      	pop	{r3, pc}

000b657a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b657a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b657c:	7c00      	ldrb	r0, [r0, #16]
   b657e:	f7fe fe57 	bl	b5230 <hal_usart_peek>
}
   b6582:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6586:	bd08      	pop	{r3, pc}

000b6588 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6588:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b658a:	7c00      	ldrb	r0, [r0, #16]
   b658c:	f7fe fe48 	bl	b5220 <hal_usart_read>
}
   b6590:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6594:	bd08      	pop	{r3, pc}

000b6596 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6596:	7c00      	ldrb	r0, [r0, #16]
   b6598:	f7fe be52 	b.w	b5240 <hal_usart_flush>

000b659c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b659c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b659e:	7c45      	ldrb	r5, [r0, #17]
{
   b65a0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b65a2:	b12d      	cbz	r5, b65b0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b65a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b65a6:	b003      	add	sp, #12
   b65a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b65ac:	f7fe be28 	b.w	b5200 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b65b0:	7c00      	ldrb	r0, [r0, #16]
   b65b2:	9101      	str	r1, [sp, #4]
   b65b4:	f7fe fe54 	bl	b5260 <hal_usart_available_data_for_write>
   b65b8:	2800      	cmp	r0, #0
   b65ba:	9901      	ldr	r1, [sp, #4]
   b65bc:	dcf2      	bgt.n	b65a4 <_ZN11USARTSerial5writeEh+0x8>
}
   b65be:	4628      	mov	r0, r5
   b65c0:	b003      	add	sp, #12
   b65c2:	bd30      	pop	{r4, r5, pc}

000b65c4 <_ZN11USARTSerialD0Ev>:
   b65c4:	b510      	push	{r4, lr}
   b65c6:	2114      	movs	r1, #20
   b65c8:	4604      	mov	r4, r0
   b65ca:	f7fd fd6a 	bl	b40a2 <_ZdlPvj>
   b65ce:	4620      	mov	r0, r4
   b65d0:	bd10      	pop	{r4, pc}
	...

000b65d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b65d4:	b510      	push	{r4, lr}
   b65d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65da:	4604      	mov	r4, r0
   b65dc:	4608      	mov	r0, r1
   b65de:	4611      	mov	r1, r2
   b65e0:	2200      	movs	r2, #0
   b65e2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65e6:	4b04      	ldr	r3, [pc, #16]	; (b65f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b65e8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b65ea:	2301      	movs	r3, #1
  _serial = serial;
   b65ec:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b65ee:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b65f0:	f7fe fe3e 	bl	b5270 <hal_usart_init_ex>
}
   b65f4:	4620      	mov	r0, r4
   b65f6:	bd10      	pop	{r4, pc}
   b65f8:	000b9fcc 	.word	0x000b9fcc

000b65fc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b65fc:	b510      	push	{r4, lr}
      if (_M_empty())
   b65fe:	6883      	ldr	r3, [r0, #8]
   b6600:	4604      	mov	r4, r0
   b6602:	b90b      	cbnz	r3, b6608 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6604:	f000 fcee 	bl	b6fe4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6608:	68c3      	ldr	r3, [r0, #12]
   b660a:	4798      	blx	r3
      if (_M_manager)
   b660c:	68a3      	ldr	r3, [r4, #8]
   b660e:	b11b      	cbz	r3, b6618 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6610:	2203      	movs	r2, #3
   b6612:	4621      	mov	r1, r4
   b6614:	4620      	mov	r0, r4
   b6616:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6618:	4620      	mov	r0, r4
   b661a:	2110      	movs	r1, #16
}
   b661c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6620:	f7fd bd3f 	b.w	b40a2 <_ZdlPvj>

000b6624 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6624:	4770      	bx	lr

000b6626 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6628:	4606      	mov	r6, r0
   b662a:	4615      	mov	r5, r2
   b662c:	460c      	mov	r4, r1
   b662e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6630:	42bc      	cmp	r4, r7
   b6632:	d006      	beq.n	b6642 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6634:	6833      	ldr	r3, [r6, #0]
   b6636:	f814 1b01 	ldrb.w	r1, [r4], #1
   b663a:	689b      	ldr	r3, [r3, #8]
   b663c:	4630      	mov	r0, r6
   b663e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6640:	e7f6      	b.n	b6630 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6642:	4628      	mov	r0, r5
   b6644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6646 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6646:	7c00      	ldrb	r0, [r0, #16]
   b6648:	2200      	movs	r2, #0
   b664a:	f7fe be19 	b.w	b5280 <hal_i2c_write>

000b664e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b664e:	7c00      	ldrb	r0, [r0, #16]
   b6650:	2100      	movs	r1, #0
   b6652:	f7fe be1d 	b.w	b5290 <hal_i2c_available>

000b6656 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6656:	7c00      	ldrb	r0, [r0, #16]
   b6658:	2100      	movs	r1, #0
   b665a:	f7fe be21 	b.w	b52a0 <hal_i2c_read>

000b665e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b665e:	7c00      	ldrb	r0, [r0, #16]
   b6660:	2100      	movs	r1, #0
   b6662:	f7fe be25 	b.w	b52b0 <hal_i2c_peek>

000b6666 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6666:	7c00      	ldrb	r0, [r0, #16]
   b6668:	2100      	movs	r1, #0
   b666a:	f7fe be29 	b.w	b52c0 <hal_i2c_flush>

000b666e <_ZN7TwoWireD0Ev>:
   b666e:	b510      	push	{r4, lr}
   b6670:	2114      	movs	r1, #20
   b6672:	4604      	mov	r4, r0
   b6674:	f7fd fd15 	bl	b40a2 <_ZdlPvj>
   b6678:	4620      	mov	r0, r4
   b667a:	bd10      	pop	{r4, pc}

000b667c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b667c:	b510      	push	{r4, lr}
   b667e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6682:	4604      	mov	r4, r0
   b6684:	4608      	mov	r0, r1
   b6686:	2100      	movs	r1, #0
   b6688:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b668c:	4b03      	ldr	r3, [pc, #12]	; (b669c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b668e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6690:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6692:	4611      	mov	r1, r2
   b6694:	f7fe fe24 	bl	b52e0 <hal_i2c_init>
}
   b6698:	4620      	mov	r0, r4
   b669a:	bd10      	pop	{r4, pc}
   b669c:	000b9ffc 	.word	0x000b9ffc

000b66a0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b66a0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b66a2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b66a4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b66a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b66aa:	2201      	movs	r2, #1
   b66ac:	f04f 33ff 	mov.w	r3, #4294967295
   b66b0:	f10d 0107 	add.w	r1, sp, #7
   b66b4:	47a0      	blx	r4
}
   b66b6:	b002      	add	sp, #8
   b66b8:	bd10      	pop	{r4, pc}

000b66ba <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b66ba:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b66bc:	6803      	ldr	r3, [r0, #0]
   b66be:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b66c0:	f04f 33ff 	mov.w	r3, #4294967295
   b66c4:	46a4      	mov	ip, r4
}
   b66c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b66ca:	4760      	bx	ip

000b66cc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b66cc:	b513      	push	{r0, r1, r4, lr}
   b66ce:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b66d0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b66d2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b66d6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b66d8:	f10d 0107 	add.w	r1, sp, #7
   b66dc:	2201      	movs	r2, #1
   b66de:	47a0      	blx	r4
}
   b66e0:	b002      	add	sp, #8
   b66e2:	bd10      	pop	{r4, pc}

000b66e4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b66e4:	b510      	push	{r4, lr}
   b66e6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66e8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b66ec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b66f0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b66f2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66f4:	d008      	beq.n	b6708 <_ZN9TCPClient4readEv+0x24>
   b66f6:	6963      	ldr	r3, [r4, #20]
   b66f8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b66fc:	1c51      	adds	r1, r2, #1
   b66fe:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6702:	4413      	add	r3, r2
   b6704:	7918      	ldrb	r0, [r3, #4]
}
   b6706:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6708:	6803      	ldr	r3, [r0, #0]
   b670a:	691b      	ldr	r3, [r3, #16]
   b670c:	4798      	blx	r3
   b670e:	2800      	cmp	r0, #0
   b6710:	d1f1      	bne.n	b66f6 <_ZN9TCPClient4readEv+0x12>
   b6712:	f04f 30ff 	mov.w	r0, #4294967295
   b6716:	e7f6      	b.n	b6706 <_ZN9TCPClient4readEv+0x22>

000b6718 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6718:	4770      	bx	lr

000b671a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b671a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b671c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b671e:	43c0      	mvns	r0, r0
   b6720:	0fc0      	lsrs	r0, r0, #31
   b6722:	4770      	bx	lr

000b6724 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6724:	4770      	bx	lr
	...

000b6728 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6728:	4b06      	ldr	r3, [pc, #24]	; (b6744 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b672a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b672c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b672e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6732:	d005      	beq.n	b6740 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6734:	4608      	mov	r0, r1
   b6736:	f000 fc59 	bl	b6fec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b673a:	2800      	cmp	r0, #0
   b673c:	bf08      	it	eq
   b673e:	2400      	moveq	r4, #0
      }
   b6740:	4620      	mov	r0, r4
   b6742:	bd10      	pop	{r4, pc}
   b6744:	000b9f3c 	.word	0x000b9f3c

000b6748 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6748:	b510      	push	{r4, lr}
   b674a:	21ac      	movs	r1, #172	; 0xac
   b674c:	4604      	mov	r4, r0
   b674e:	f7fd fca8 	bl	b40a2 <_ZdlPvj>
   b6752:	4620      	mov	r0, r4
   b6754:	bd10      	pop	{r4, pc}

000b6756 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6756:	21ac      	movs	r1, #172	; 0xac
   b6758:	f7fd bca3 	b.w	b40a2 <_ZdlPvj>

000b675c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6760:	f04f 0800 	mov.w	r8, #0
   b6764:	b086      	sub	sp, #24
   b6766:	461c      	mov	r4, r3
   b6768:	f8c0 8004 	str.w	r8, [r0, #4]
   b676c:	4605      	mov	r5, r0
   b676e:	460e      	mov	r6, r1
   b6770:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6772:	4641      	mov	r1, r8
   b6774:	2210      	movs	r2, #16
   b6776:	a802      	add	r0, sp, #8
   b6778:	f001 fa0d 	bl	b7b96 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b677c:	1c63      	adds	r3, r4, #1
   b677e:	d009      	beq.n	b6794 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6784:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6788:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b678c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6790:	435c      	muls	r4, r3
   b6792:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6794:	6968      	ldr	r0, [r5, #20]
   b6796:	2310      	movs	r3, #16
   b6798:	9300      	str	r3, [sp, #0]
   b679a:	6800      	ldr	r0, [r0, #0]
   b679c:	ab02      	add	r3, sp, #8
   b679e:	f241 0205 	movw	r2, #4101	; 0x1005
   b67a2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b67a6:	f7fe fda3 	bl	b52f0 <sock_setsockopt>
    if (ret < 0) {
   b67aa:	2800      	cmp	r0, #0
   b67ac:	da07      	bge.n	b67be <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b67ae:	f7fe ff33 	bl	b5618 <__errno>
   b67b2:	6803      	ldr	r3, [r0, #0]
   b67b4:	606b      	str	r3, [r5, #4]
        return 0;
   b67b6:	2000      	movs	r0, #0
}
   b67b8:	b006      	add	sp, #24
   b67ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b67be:	6968      	ldr	r0, [r5, #20]
   b67c0:	2300      	movs	r3, #0
   b67c2:	6800      	ldr	r0, [r0, #0]
   b67c4:	463a      	mov	r2, r7
   b67c6:	4631      	mov	r1, r6
   b67c8:	f7fe fdb2 	bl	b5330 <sock_send>
    if (ret < 0) {
   b67cc:	1e03      	subs	r3, r0, #0
   b67ce:	dbee      	blt.n	b67ae <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b67d0:	4618      	mov	r0, r3
   b67d2:	e7f1      	b.n	b67b8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b67d4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b67d4:	b530      	push	{r4, r5, lr}
   b67d6:	b087      	sub	sp, #28
   b67d8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b67da:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b67dc:	4668      	mov	r0, sp
   b67de:	f7ff fdff 	bl	b63e0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b67e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67e4:	3404      	adds	r4, #4
   b67e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67e8:	682b      	ldr	r3, [r5, #0]
   b67ea:	7023      	strb	r3, [r4, #0]
    }
   b67ec:	b007      	add	sp, #28
   b67ee:	bd30      	pop	{r4, r5, pc}

000b67f0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b67f0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b67f2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b67f4:	4b05      	ldr	r3, [pc, #20]	; (b680c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b67f6:	4604      	mov	r4, r0
   b67f8:	358c      	adds	r5, #140	; 0x8c
   b67fa:	f844 3b04 	str.w	r3, [r4], #4
   b67fe:	4606      	mov	r6, r0
   b6800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6804:	682b      	ldr	r3, [r5, #0]
   b6806:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6808:	4630      	mov	r0, r6
   b680a:	bd70      	pop	{r4, r5, r6, pc}
   b680c:	000b9f88 	.word	0x000b9f88

000b6810 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6814:	4698      	mov	r8, r3
    stop();
   b6816:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6818:	b093      	sub	sp, #76	; 0x4c
   b681a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b681c:	2400      	movs	r4, #0
    stop();
   b681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6820:	4606      	mov	r6, r0
   b6822:	4617      	mov	r7, r2
    stop();
   b6824:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6826:	4628      	mov	r0, r5
   b6828:	466b      	mov	r3, sp
   b682a:	4622      	mov	r2, r4
   b682c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b682e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6830:	f7fe fc56 	bl	b50e0 <netdb_getaddrinfo>
   b6834:	4605      	mov	r5, r0
   b6836:	2800      	cmp	r0, #0
   b6838:	d163      	bne.n	b6902 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b683a:	9b00      	ldr	r3, [sp, #0]
   b683c:	2b00      	cmp	r3, #0
   b683e:	d04b      	beq.n	b68d8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6840:	695b      	ldr	r3, [r3, #20]
   b6842:	2b00      	cmp	r3, #0
   b6844:	d048      	beq.n	b68d8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6846:	a806      	add	r0, sp, #24
   b6848:	f7ff fd86 	bl	b6358 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b684c:	9b00      	ldr	r3, [sp, #0]
   b684e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6850:	7863      	ldrb	r3, [r4, #1]
   b6852:	2b02      	cmp	r3, #2
   b6854:	d104      	bne.n	b6860 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6856:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6858:	a806      	add	r0, sp, #24
   b685a:	f7ff ffbb 	bl	b67d4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b685e:	e026      	b.n	b68ae <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6860:	2b0a      	cmp	r3, #10
   b6862:	d124      	bne.n	b68ae <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6864:	2211      	movs	r2, #17
   b6866:	4629      	mov	r1, r5
   b6868:	a801      	add	r0, sp, #4
   b686a:	f001 f994 	bl	b7b96 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b686e:	68a3      	ldr	r3, [r4, #8]
   b6870:	2b00      	cmp	r3, #0
   b6872:	d038      	beq.n	b68e6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6874:	f104 0308 	add.w	r3, r4, #8
   b6878:	f10d 0c04 	add.w	ip, sp, #4
   b687c:	3418      	adds	r4, #24
   b687e:	6818      	ldr	r0, [r3, #0]
   b6880:	6859      	ldr	r1, [r3, #4]
   b6882:	4662      	mov	r2, ip
   b6884:	c203      	stmia	r2!, {r0, r1}
   b6886:	3308      	adds	r3, #8
   b6888:	42a3      	cmp	r3, r4
   b688a:	4694      	mov	ip, r2
   b688c:	d1f7      	bne.n	b687e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b688e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6890:	a901      	add	r1, sp, #4
   b6892:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6894:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6898:	f7ff fd6c 	bl	b6374 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b689c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b68a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b68a4:	ac07      	add	r4, sp, #28
   b68a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68a8:	f8dc 3000 	ldr.w	r3, [ip]
   b68ac:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b68ae:	a806      	add	r0, sp, #24
   b68b0:	f7ff fd72 	bl	b6398 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b68b4:	b180      	cbz	r0, b68d8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b68b6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b68b8:	ad07      	add	r5, sp, #28
   b68ba:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b68be:	4b12      	ldr	r3, [pc, #72]	; (b6908 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b68c0:	930c      	str	r3, [sp, #48]	; 0x30
   b68c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68c4:	ac0d      	add	r4, sp, #52	; 0x34
   b68c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68c8:	682b      	ldr	r3, [r5, #0]
   b68ca:	7023      	strb	r3, [r4, #0]
   b68cc:	463a      	mov	r2, r7
   b68ce:	4643      	mov	r3, r8
   b68d0:	a90c      	add	r1, sp, #48	; 0x30
   b68d2:	4630      	mov	r0, r6
   b68d4:	47c8      	blx	r9
   b68d6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b68d8:	9800      	ldr	r0, [sp, #0]
   b68da:	f7fe fbf9 	bl	b50d0 <netdb_freeaddrinfo>
}
   b68de:	4628      	mov	r0, r5
   b68e0:	b013      	add	sp, #76	; 0x4c
   b68e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b68e6:	68e3      	ldr	r3, [r4, #12]
   b68e8:	2b00      	cmp	r3, #0
   b68ea:	d1c3      	bne.n	b6874 <_ZN9TCPClient7connectEPKctm+0x64>
   b68ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b68f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b68f4:	f7fe fc74 	bl	b51e0 <inet_htonl>
   b68f8:	4581      	cmp	r9, r0
   b68fa:	d1bb      	bne.n	b6874 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b68fc:	f104 0114 	add.w	r1, r4, #20
   b6900:	e7aa      	b.n	b6858 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6902:	4625      	mov	r5, r4
   b6904:	e7e8      	b.n	b68d8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6906:	bf00      	nop
   b6908:	000b9f88 	.word	0x000b9f88

000b690c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b690c:	b538      	push	{r3, r4, r5, lr}
   b690e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6910:	681a      	ldr	r2, [r3, #0]
   b6912:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6914:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6916:	da10      	bge.n	b693a <_ZN9TCPClient9connectedEv+0x2e>
   b6918:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b691c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6920:	429a      	cmp	r2, r3
   b6922:	d10a      	bne.n	b693a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6924:	6803      	ldr	r3, [r0, #0]
   b6926:	691b      	ldr	r3, [r3, #16]
   b6928:	4798      	blx	r3
        if (!rv) {
   b692a:	4604      	mov	r4, r0
   b692c:	b928      	cbnz	r0, b693a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b692e:	682b      	ldr	r3, [r5, #0]
   b6930:	4628      	mov	r0, r5
   b6932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6934:	4798      	blx	r3
        rv = available();
   b6936:	4620      	mov	r0, r4
}
   b6938:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b693a:	2001      	movs	r0, #1
   b693c:	e7fc      	b.n	b6938 <_ZN9TCPClient9connectedEv+0x2c>

000b693e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b693e:	b510      	push	{r4, lr}
   b6940:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6942:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6946:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b694a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b694c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b694e:	d005      	beq.n	b695c <_ZN9TCPClient4peekEv+0x1e>
   b6950:	6963      	ldr	r3, [r4, #20]
   b6952:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6956:	4413      	add	r3, r2
   b6958:	7918      	ldrb	r0, [r3, #4]
}
   b695a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b695c:	6803      	ldr	r3, [r0, #0]
   b695e:	691b      	ldr	r3, [r3, #16]
   b6960:	4798      	blx	r3
   b6962:	2800      	cmp	r0, #0
   b6964:	d1f4      	bne.n	b6950 <_ZN9TCPClient4peekEv+0x12>
   b6966:	f04f 30ff 	mov.w	r0, #4294967295
   b696a:	e7f6      	b.n	b695a <_ZN9TCPClient4peekEv+0x1c>

000b696c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b696e:	6943      	ldr	r3, [r0, #20]
   b6970:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6972:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6976:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b697a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b697c:	4605      	mov	r5, r0
   b697e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6980:	d016      	beq.n	b69b0 <_ZN9TCPClient4readEPhj+0x44>
   b6982:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6984:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6988:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b698c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b698e:	42bc      	cmp	r4, r7
   b6990:	bf28      	it	cs
   b6992:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6994:	3304      	adds	r3, #4
   b6996:	4622      	mov	r2, r4
   b6998:	4419      	add	r1, r3
   b699a:	4630      	mov	r0, r6
   b699c:	f001 f8ed 	bl	b7b7a <memcpy>
   b69a0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b69a2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b69a6:	4423      	add	r3, r4
   b69a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b69ac:	4620      	mov	r0, r4
   b69ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b69b0:	6803      	ldr	r3, [r0, #0]
   b69b2:	691b      	ldr	r3, [r3, #16]
   b69b4:	4798      	blx	r3
   b69b6:	2800      	cmp	r0, #0
   b69b8:	d1e3      	bne.n	b6982 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b69ba:	f04f 34ff 	mov.w	r4, #4294967295
   b69be:	e7f5      	b.n	b69ac <_ZN9TCPClient4readEPhj+0x40>

000b69c0 <_ZN9TCPClient12flush_bufferEv>:
   b69c0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b69c2:	2300      	movs	r3, #0
   b69c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b69c8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b69ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b69ce:	4770      	bx	lr

000b69d0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b69d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69d4:	461f      	mov	r7, r3
    stop();
   b69d6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b69d8:	460c      	mov	r4, r1
    stop();
   b69da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b69dc:	b08a      	sub	sp, #40	; 0x28
   b69de:	4605      	mov	r5, r0
   b69e0:	4616      	mov	r6, r2
    stop();
   b69e2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b69e4:	7d23      	ldrb	r3, [r4, #20]
   b69e6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b69ea:	2b04      	cmp	r3, #4
   b69ec:	bf0c      	ite	eq
   b69ee:	2002      	moveq	r0, #2
   b69f0:	200a      	movne	r0, #10
   b69f2:	2206      	movs	r2, #6
   b69f4:	2101      	movs	r1, #1
   b69f6:	f7fe fca3 	bl	b5340 <sock_socket>
   b69fa:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b69fe:	696b      	ldr	r3, [r5, #20]
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	2b00      	cmp	r3, #0
   b6a04:	da08      	bge.n	b6a18 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6a06:	682b      	ldr	r3, [r5, #0]
   b6a08:	4628      	mov	r0, r5
   b6a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6a0c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6a0e:	4798      	blx	r3
}
   b6a10:	4620      	mov	r0, r4
   b6a12:	b00a      	add	sp, #40	; 0x28
   b6a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6a18:	4628      	mov	r0, r5
   b6a1a:	f7ff ffd1 	bl	b69c0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6a1e:	b1b7      	cbz	r7, b6a4e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6a20:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6a22:	a903      	add	r1, sp, #12
   b6a24:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6a26:	9303      	str	r3, [sp, #12]
   b6a28:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6a2c:	f7fe fb88 	bl	b5140 <if_index_to_name>
   b6a30:	2800      	cmp	r0, #0
   b6a32:	d1e8      	bne.n	b6a06 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6a34:	6968      	ldr	r0, [r5, #20]
   b6a36:	2306      	movs	r3, #6
   b6a38:	9300      	str	r3, [sp, #0]
   b6a3a:	6800      	ldr	r0, [r0, #0]
   b6a3c:	ab03      	add	r3, sp, #12
   b6a3e:	f241 020b 	movw	r2, #4107	; 0x100b
   b6a42:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6a46:	f7fe fc53 	bl	b52f0 <sock_setsockopt>
   b6a4a:	2800      	cmp	r0, #0
   b6a4c:	d1db      	bne.n	b6a06 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6a4e:	221c      	movs	r2, #28
   b6a50:	2100      	movs	r1, #0
   b6a52:	a803      	add	r0, sp, #12
   b6a54:	f001 f89f 	bl	b7b96 <memset>
    if (ip.version() == 4) {
   b6a58:	7d23      	ldrb	r3, [r4, #20]
   b6a5a:	2b04      	cmp	r3, #4
   b6a5c:	d11d      	bne.n	b6a9a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6a5e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6a62:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6a64:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6a68:	f7fe fbc2 	bl	b51f0 <inet_htons>
   b6a6c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6a70:	6860      	ldr	r0, [r4, #4]
   b6a72:	f7fe fbb5 	bl	b51e0 <inet_htonl>
   b6a76:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6a78:	696b      	ldr	r3, [r5, #20]
   b6a7a:	221c      	movs	r2, #28
   b6a7c:	6818      	ldr	r0, [r3, #0]
   b6a7e:	a903      	add	r1, sp, #12
   b6a80:	f7fe fc46 	bl	b5310 <sock_connect>
   b6a84:	2800      	cmp	r0, #0
   b6a86:	d1be      	bne.n	b6a06 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6a88:	3404      	adds	r4, #4
   b6a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6a8c:	696d      	ldr	r5, [r5, #20]
   b6a8e:	358c      	adds	r5, #140	; 0x8c
   b6a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6a92:	6823      	ldr	r3, [r4, #0]
   b6a94:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6a96:	2401      	movs	r4, #1
   b6a98:	e7ba      	b.n	b6a10 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6a9a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6a9e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6aa0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6aa4:	f7fe fba4 	bl	b51f0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6aa8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6aaa:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6aae:	1d23      	adds	r3, r4, #4
   b6ab0:	f104 0714 	add.w	r7, r4, #20
   b6ab4:	6818      	ldr	r0, [r3, #0]
   b6ab6:	6859      	ldr	r1, [r3, #4]
   b6ab8:	4632      	mov	r2, r6
   b6aba:	c203      	stmia	r2!, {r0, r1}
   b6abc:	3308      	adds	r3, #8
   b6abe:	42bb      	cmp	r3, r7
   b6ac0:	4616      	mov	r6, r2
   b6ac2:	d1f7      	bne.n	b6ab4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6ac4:	e7d8      	b.n	b6a78 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6ac8 <_ZN9TCPClient9availableEv>:
{
   b6ac8:	b530      	push	{r4, r5, lr}
   b6aca:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6acc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6ad0:	b08b      	sub	sp, #44	; 0x2c
   b6ad2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6ad4:	b12b      	cbz	r3, b6ae2 <_ZN9TCPClient9availableEv+0x1a>
   b6ad6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6ada:	429a      	cmp	r2, r3
   b6adc:	d101      	bne.n	b6ae2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6ade:	f7ff ff6f 	bl	b69c0 <_ZN9TCPClient12flush_bufferEv>
   b6ae2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6ae4:	6808      	ldr	r0, [r1, #0]
   b6ae6:	2800      	cmp	r0, #0
   b6ae8:	db18      	blt.n	b6b1c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6aea:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6aee:	2d7f      	cmp	r5, #127	; 0x7f
   b6af0:	d814      	bhi.n	b6b1c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6af2:	3104      	adds	r1, #4
   b6af4:	2308      	movs	r3, #8
   b6af6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6afa:	4429      	add	r1, r5
   b6afc:	f7fe fc10 	bl	b5320 <sock_recv>
            if (ret > 0) {
   b6b00:	2800      	cmp	r0, #0
   b6b02:	dd13      	ble.n	b6b2c <_ZN9TCPClient9availableEv+0x64>
   b6b04:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6b06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6b0a:	b90a      	cbnz	r2, b6b10 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6b0c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6b10:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6b12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6b16:	4410      	add	r0, r2
   b6b18:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6b1c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6b1e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6b22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6b26:	1ac0      	subs	r0, r0, r3
   b6b28:	b00b      	add	sp, #44	; 0x2c
   b6b2a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6b2c:	f7fe fd74 	bl	b5618 <__errno>
   b6b30:	6803      	ldr	r3, [r0, #0]
   b6b32:	2b0b      	cmp	r3, #11
   b6b34:	d0f2      	beq.n	b6b1c <_ZN9TCPClient9availableEv+0x54>
   b6b36:	f7fe fd6f 	bl	b5618 <__errno>
   b6b3a:	6803      	ldr	r3, [r0, #0]
   b6b3c:	2b0b      	cmp	r3, #11
   b6b3e:	d0ed      	beq.n	b6b1c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6b40:	2320      	movs	r3, #32
   b6b42:	2500      	movs	r5, #0
   b6b44:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6b48:	f7fe fd66 	bl	b5618 <__errno>
   b6b4c:	6803      	ldr	r3, [r0, #0]
   b6b4e:	9301      	str	r3, [sp, #4]
   b6b50:	4b08      	ldr	r3, [pc, #32]	; (b6b74 <_ZN9TCPClient9availableEv+0xac>)
   b6b52:	4909      	ldr	r1, [pc, #36]	; (b6b78 <_ZN9TCPClient9availableEv+0xb0>)
   b6b54:	9300      	str	r3, [sp, #0]
   b6b56:	aa02      	add	r2, sp, #8
   b6b58:	462b      	mov	r3, r5
   b6b5a:	2032      	movs	r0, #50	; 0x32
   b6b5c:	f7fe fc38 	bl	b53d0 <log_message>
                    sock_close(d_->sock);
   b6b60:	6963      	ldr	r3, [r4, #20]
   b6b62:	6818      	ldr	r0, [r3, #0]
   b6b64:	f7fe fbcc 	bl	b5300 <sock_close>
   b6b68:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6b6a:	f04f 32ff 	mov.w	r2, #4294967295
   b6b6e:	601a      	str	r2, [r3, #0]
   b6b70:	e7d4      	b.n	b6b1c <_ZN9TCPClient9availableEv+0x54>
   b6b72:	bf00      	nop
   b6b74:	000ba023 	.word	0x000ba023
   b6b78:	000ba01c 	.word	0x000ba01c

000b6b7c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6b7c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6b7e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6b80:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6b82:	6818      	ldr	r0, [r3, #0]
   b6b84:	2800      	cmp	r0, #0
   b6b86:	db01      	blt.n	b6b8c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6b88:	f7fe fbba 	bl	b5300 <sock_close>
   b6b8c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6b8e:	f04f 32ff 	mov.w	r2, #4294967295
   b6b92:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6b94:	6960      	ldr	r0, [r4, #20]
   b6b96:	2211      	movs	r2, #17
   b6b98:	2100      	movs	r1, #0
   b6b9a:	308c      	adds	r0, #140	; 0x8c
   b6b9c:	f000 fffb 	bl	b7b96 <memset>
    flush_buffer();
   b6ba0:	4620      	mov	r0, r4
}
   b6ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6ba6:	f7ff bf0b 	b.w	b69c0 <_ZN9TCPClient12flush_bufferEv>

000b6baa <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6baa:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6bac:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6bae:	4604      	mov	r4, r0
          total(0) {
   b6bb0:	6001      	str	r1, [r0, #0]
   b6bb2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6bb6:	3088      	adds	r0, #136	; 0x88
   b6bb8:	f7ff fbce 	bl	b6358 <_ZN9IPAddressC1Ev>
}
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	bd10      	pop	{r4, pc}

000b6bc0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6bc2:	2300      	movs	r3, #0
   b6bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6bc8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6bcc:	4a0e      	ldr	r2, [pc, #56]	; (b6c08 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6bce:	6103      	str	r3, [r0, #16]
   b6bd0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6bd2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6bd4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6bd6:	20ac      	movs	r0, #172	; 0xac
   b6bd8:	9101      	str	r1, [sp, #4]
   b6bda:	f7fd fa5c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6bde:	1e05      	subs	r5, r0, #0
   b6be0:	f105 060c 	add.w	r6, r5, #12
   b6be4:	d008      	beq.n	b6bf8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6be6:	2301      	movs	r3, #1
   b6be8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6bec:	4b07      	ldr	r3, [pc, #28]	; (b6c0c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6bee:	9901      	ldr	r1, [sp, #4]
   b6bf0:	602b      	str	r3, [r5, #0]
   b6bf2:	4630      	mov	r0, r6
   b6bf4:	f7ff ffd9 	bl	b6baa <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6bf8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6bfa:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6bfe:	f7ff fedf 	bl	b69c0 <_ZN9TCPClient12flush_bufferEv>
}
   b6c02:	b002      	add	sp, #8
   b6c04:	bd70      	pop	{r4, r5, r6, pc}
   b6c06:	bf00      	nop
   b6c08:	000ba058 	.word	0x000ba058
   b6c0c:	000ba03c 	.word	0x000ba03c

000b6c10 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6c10:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6c12:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6c16:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6c18:	f7ff ffd2 	bl	b6bc0 <_ZN9TCPClientC1Ei>
}
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	bd10      	pop	{r4, pc}

000b6c20 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6c20:	b510      	push	{r4, lr}
   b6c22:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6c24:	6800      	ldr	r0, [r0, #0]
   b6c26:	2800      	cmp	r0, #0
   b6c28:	db01      	blt.n	b6c2e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6c2a:	f7fe fb69 	bl	b5300 <sock_close>
    }
}
   b6c2e:	4620      	mov	r0, r4
   b6c30:	bd10      	pop	{r4, pc}

000b6c32 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6c32:	300c      	adds	r0, #12
   b6c34:	f7ff bff4 	b.w	b6c20 <_ZN9TCPClient4DataD1Ev>

000b6c38 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6c38:	2200      	movs	r2, #0
   b6c3a:	6840      	ldr	r0, [r0, #4]
   b6c3c:	4611      	mov	r1, r2
   b6c3e:	f7fe bc2b 	b.w	b5498 <network_ready>

000b6c42 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6c42:	2200      	movs	r2, #0
   b6c44:	6840      	ldr	r0, [r0, #4]
   b6c46:	4611      	mov	r1, r2
   b6c48:	f7fe bc46 	b.w	b54d8 <network_listening>

000b6c4c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6c4c:	2200      	movs	r2, #0
   b6c4e:	6840      	ldr	r0, [r0, #4]
   b6c50:	4611      	mov	r1, r2
   b6c52:	f7fe bc51 	b.w	b54f8 <network_get_listen_timeout>

000b6c56 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6c56:	6840      	ldr	r0, [r0, #4]
   b6c58:	2200      	movs	r2, #0
   b6c5a:	f7fe bc45 	b.w	b54e8 <network_set_listen_timeout>

000b6c5e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6c5e:	6840      	ldr	r0, [r0, #4]
   b6c60:	2200      	movs	r2, #0
   b6c62:	f081 0101 	eor.w	r1, r1, #1
   b6c66:	f7fe bc2f 	b.w	b54c8 <network_listen>

000b6c6a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6c6a:	2300      	movs	r3, #0
   b6c6c:	6840      	ldr	r0, [r0, #4]
   b6c6e:	461a      	mov	r2, r3
   b6c70:	4619      	mov	r1, r3
   b6c72:	f7fe bc21 	b.w	b54b8 <network_off>

000b6c76 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6c76:	2300      	movs	r3, #0
   b6c78:	6840      	ldr	r0, [r0, #4]
   b6c7a:	461a      	mov	r2, r3
   b6c7c:	4619      	mov	r1, r3
   b6c7e:	f7fe bc13 	b.w	b54a8 <network_on>

000b6c82 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6c82:	2200      	movs	r2, #0
   b6c84:	6840      	ldr	r0, [r0, #4]
   b6c86:	4611      	mov	r1, r2
   b6c88:	f7fe bbf6 	b.w	b5478 <network_connecting>

000b6c8c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6c8c:	6840      	ldr	r0, [r0, #4]
   b6c8e:	2200      	movs	r2, #0
   b6c90:	2102      	movs	r1, #2
   b6c92:	f7fe bbf9 	b.w	b5488 <network_disconnect>

000b6c96 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6c96:	2300      	movs	r3, #0
   b6c98:	6840      	ldr	r0, [r0, #4]
   b6c9a:	461a      	mov	r2, r3
   b6c9c:	f7fe bbe4 	b.w	b5468 <network_connect>

000b6ca0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6ca0:	4b02      	ldr	r3, [pc, #8]	; (b6cac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6ca2:	2204      	movs	r2, #4
   b6ca4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6ca6:	4a02      	ldr	r2, [pc, #8]	; (b6cb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6ca8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6caa:	4770      	bx	lr
   b6cac:	2003e710 	.word	0x2003e710
   b6cb0:	000ba0a4 	.word	0x000ba0a4

000b6cb4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6cb4:	2300      	movs	r3, #0
   b6cb6:	6840      	ldr	r0, [r0, #4]
   b6cb8:	461a      	mov	r2, r3
   b6cba:	f7fe bbd5 	b.w	b5468 <network_connect>

000b6cbe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6cbe:	6840      	ldr	r0, [r0, #4]
   b6cc0:	2200      	movs	r2, #0
   b6cc2:	2102      	movs	r1, #2
   b6cc4:	f7fe bbe0 	b.w	b5488 <network_disconnect>

000b6cc8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6cc8:	2200      	movs	r2, #0
   b6cca:	6840      	ldr	r0, [r0, #4]
   b6ccc:	4611      	mov	r1, r2
   b6cce:	f7fe bbd3 	b.w	b5478 <network_connecting>

000b6cd2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6cd2:	2200      	movs	r2, #0
   b6cd4:	6840      	ldr	r0, [r0, #4]
   b6cd6:	4611      	mov	r1, r2
   b6cd8:	f7fe bbde 	b.w	b5498 <network_ready>

000b6cdc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6cdc:	2300      	movs	r3, #0
   b6cde:	6840      	ldr	r0, [r0, #4]
   b6ce0:	461a      	mov	r2, r3
   b6ce2:	4619      	mov	r1, r3
   b6ce4:	f7fe bbe0 	b.w	b54a8 <network_on>

000b6ce8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6ce8:	2300      	movs	r3, #0
   b6cea:	6840      	ldr	r0, [r0, #4]
   b6cec:	461a      	mov	r2, r3
   b6cee:	4619      	mov	r1, r3
   b6cf0:	f7fe bbe2 	b.w	b54b8 <network_off>

000b6cf4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6cf4:	6840      	ldr	r0, [r0, #4]
   b6cf6:	2100      	movs	r1, #0
   b6cf8:	f7fe bc06 	b.w	b5508 <network_is_on>

000b6cfc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6cfc:	6840      	ldr	r0, [r0, #4]
   b6cfe:	2100      	movs	r1, #0
   b6d00:	f7fe bc0a 	b.w	b5518 <network_is_off>

000b6d04 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6d04:	6840      	ldr	r0, [r0, #4]
   b6d06:	2200      	movs	r2, #0
   b6d08:	f081 0101 	eor.w	r1, r1, #1
   b6d0c:	f7fe bbdc 	b.w	b54c8 <network_listen>

000b6d10 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6d10:	6840      	ldr	r0, [r0, #4]
   b6d12:	2200      	movs	r2, #0
   b6d14:	f7fe bbe8 	b.w	b54e8 <network_set_listen_timeout>

000b6d18 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6d18:	2200      	movs	r2, #0
   b6d1a:	6840      	ldr	r0, [r0, #4]
   b6d1c:	4611      	mov	r1, r2
   b6d1e:	f7fe bbeb 	b.w	b54f8 <network_get_listen_timeout>

000b6d22 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6d22:	2200      	movs	r2, #0
   b6d24:	6840      	ldr	r0, [r0, #4]
   b6d26:	4611      	mov	r1, r2
   b6d28:	f7fe bbd6 	b.w	b54d8 <network_listening>

000b6d2c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6d30:	b095      	sub	sp, #84	; 0x54
   b6d32:	4614      	mov	r4, r2
   b6d34:	460d      	mov	r5, r1
   b6d36:	4607      	mov	r7, r0
    IPAddress addr;
   b6d38:	f7ff fb0e 	bl	b6358 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6d3c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6d3e:	221c      	movs	r2, #28
   b6d40:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6d42:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6d44:	f000 ff27 	bl	b7b96 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6d48:	2340      	movs	r3, #64	; 0x40
   b6d4a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6d4c:	4620      	mov	r0, r4
   b6d4e:	466b      	mov	r3, sp
   b6d50:	aa0c      	add	r2, sp, #48	; 0x30
   b6d52:	2100      	movs	r1, #0
   b6d54:	f7fe f9c4 	bl	b50e0 <netdb_getaddrinfo>
    if (!r) {
   b6d58:	4604      	mov	r4, r0
   b6d5a:	2800      	cmp	r0, #0
   b6d5c:	d14b      	bne.n	b6df6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6d5e:	4602      	mov	r2, r0
   b6d60:	2101      	movs	r1, #1
   b6d62:	6868      	ldr	r0, [r5, #4]
   b6d64:	f7fe fb98 	bl	b5498 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d68:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6d6a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d6c:	4622      	mov	r2, r4
   b6d6e:	6868      	ldr	r0, [r5, #4]
   b6d70:	f7fe fb92 	bl	b5498 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d74:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d76:	4681      	mov	r9, r0
        bool ok = false;
   b6d78:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d7a:	2e00      	cmp	r6, #0
   b6d7c:	d03b      	beq.n	b6df6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6d7e:	2900      	cmp	r1, #0
   b6d80:	d139      	bne.n	b6df6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6d82:	6873      	ldr	r3, [r6, #4]
   b6d84:	2b02      	cmp	r3, #2
   b6d86:	d003      	beq.n	b6d90 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6d88:	2b0a      	cmp	r3, #10
   b6d8a:	d011      	beq.n	b6db0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d8c:	69f6      	ldr	r6, [r6, #28]
   b6d8e:	e7f4      	b.n	b6d7a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6d90:	f1b8 0f00 	cmp.w	r8, #0
   b6d94:	d0fa      	beq.n	b6d8c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6d96:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6d98:	a806      	add	r0, sp, #24
   b6d9a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6d9c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6d9e:	f7ff fb1f 	bl	b63e0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6da4:	1d3c      	adds	r4, r7, #4
   b6da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6da8:	682b      	ldr	r3, [r5, #0]
   b6daa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6dac:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6dae:	e7ed      	b.n	b6d8c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6db0:	f1b9 0f00 	cmp.w	r9, #0
   b6db4:	d0ea      	beq.n	b6d8c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6db6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6db8:	2210      	movs	r2, #16
   b6dba:	a801      	add	r0, sp, #4
   b6dbc:	f000 feeb 	bl	b7b96 <memset>
                    a.v = 6;
   b6dc0:	2306      	movs	r3, #6
   b6dc2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6dc6:	ad01      	add	r5, sp, #4
   b6dc8:	f104 0308 	add.w	r3, r4, #8
   b6dcc:	3418      	adds	r4, #24
   b6dce:	6818      	ldr	r0, [r3, #0]
   b6dd0:	6859      	ldr	r1, [r3, #4]
   b6dd2:	462a      	mov	r2, r5
   b6dd4:	c203      	stmia	r2!, {r0, r1}
   b6dd6:	3308      	adds	r3, #8
   b6dd8:	42a3      	cmp	r3, r4
   b6dda:	4615      	mov	r5, r2
   b6ddc:	d1f7      	bne.n	b6dce <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6dde:	a901      	add	r1, sp, #4
   b6de0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6de2:	ad07      	add	r5, sp, #28
   b6de4:	f7ff fac6 	bl	b6374 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6dea:	1d3c      	adds	r4, r7, #4
   b6dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6dee:	682b      	ldr	r3, [r5, #0]
   b6df0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6df2:	4649      	mov	r1, r9
   b6df4:	e7ca      	b.n	b6d8c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6df6:	9800      	ldr	r0, [sp, #0]
   b6df8:	f7fe f96a 	bl	b50d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6dfc:	4638      	mov	r0, r7
   b6dfe:	b015      	add	sp, #84	; 0x54
   b6e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6e04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6e04:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6e06:	4a03      	ldr	r2, [pc, #12]	; (b6e14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6e08:	601a      	str	r2, [r3, #0]
   b6e0a:	2200      	movs	r2, #0
   b6e0c:	605a      	str	r2, [r3, #4]

} // spark
   b6e0e:	4770      	bx	lr
   b6e10:	2003e718 	.word	0x2003e718
   b6e14:	000ba0e0 	.word	0x000ba0e0

000b6e18 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6e18:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6e1a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6e1c:	d902      	bls.n	b6e24 <pinAvailable+0xc>
    return false;
   b6e1e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6e20:	b002      	add	sp, #8
   b6e22:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6e24:	f1a0 030b 	sub.w	r3, r0, #11
   b6e28:	2b02      	cmp	r3, #2
   b6e2a:	d81a      	bhi.n	b6e62 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6e2c:	4c17      	ldr	r4, [pc, #92]	; (b6e8c <pinAvailable+0x74>)
   b6e2e:	7821      	ldrb	r1, [r4, #0]
   b6e30:	f3bf 8f5b 	dmb	ish
   b6e34:	f011 0101 	ands.w	r1, r1, #1
   b6e38:	d10b      	bne.n	b6e52 <pinAvailable+0x3a>
   b6e3a:	4620      	mov	r0, r4
   b6e3c:	9101      	str	r1, [sp, #4]
   b6e3e:	f7fd f932 	bl	b40a6 <__cxa_guard_acquire>
   b6e42:	9901      	ldr	r1, [sp, #4]
   b6e44:	b128      	cbz	r0, b6e52 <pinAvailable+0x3a>
   b6e46:	4812      	ldr	r0, [pc, #72]	; (b6e90 <pinAvailable+0x78>)
   b6e48:	f7fe fc44 	bl	b56d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6e4c:	4620      	mov	r0, r4
   b6e4e:	f7fd f92f 	bl	b40b0 <__cxa_guard_release>
   b6e52:	4b0f      	ldr	r3, [pc, #60]	; (b6e90 <pinAvailable+0x78>)
   b6e54:	7818      	ldrb	r0, [r3, #0]
   b6e56:	f7fe fa83 	bl	b5360 <hal_spi_is_enabled>
   b6e5a:	2800      	cmp	r0, #0
   b6e5c:	d1df      	bne.n	b6e1e <pinAvailable+0x6>
  return true; // 'pin' is available
   b6e5e:	2001      	movs	r0, #1
   b6e60:	e7de      	b.n	b6e20 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6e62:	2801      	cmp	r0, #1
   b6e64:	d809      	bhi.n	b6e7a <pinAvailable+0x62>
   b6e66:	f000 f897 	bl	b6f98 <_Z19__fetch_global_Wirev>
   b6e6a:	2100      	movs	r1, #0
   b6e6c:	7c00      	ldrb	r0, [r0, #16]
   b6e6e:	f7fe fa2f 	bl	b52d0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6e72:	f080 0001 	eor.w	r0, r0, #1
   b6e76:	b2c0      	uxtb	r0, r0
   b6e78:	e7d2      	b.n	b6e20 <pinAvailable+0x8>
   b6e7a:	3809      	subs	r0, #9
   b6e7c:	2801      	cmp	r0, #1
   b6e7e:	d8ee      	bhi.n	b6e5e <pinAvailable+0x46>
   b6e80:	f000 f84e 	bl	b6f20 <_Z22__fetch_global_Serial1v>
   b6e84:	7c00      	ldrb	r0, [r0, #16]
   b6e86:	f7fe f9e3 	bl	b5250 <hal_usart_is_enabled>
   b6e8a:	e7f2      	b.n	b6e72 <pinAvailable+0x5a>
   b6e8c:	2003e720 	.word	0x2003e720
   b6e90:	2003e724 	.word	0x2003e724

000b6e94 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6e94:	2823      	cmp	r0, #35	; 0x23
{
   b6e96:	b538      	push	{r3, r4, r5, lr}
   b6e98:	4604      	mov	r4, r0
   b6e9a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6e9c:	d80a      	bhi.n	b6eb4 <pinMode+0x20>
   b6e9e:	29ff      	cmp	r1, #255	; 0xff
   b6ea0:	d008      	beq.n	b6eb4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6ea2:	f7ff ffb9 	bl	b6e18 <pinAvailable>
   b6ea6:	b128      	cbz	r0, b6eb4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6ea8:	4629      	mov	r1, r5
   b6eaa:	4620      	mov	r0, r4
}
   b6eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6eb0:	f7fe b91e 	b.w	b50f0 <HAL_Pin_Mode>
}
   b6eb4:	bd38      	pop	{r3, r4, r5, pc}

000b6eb6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6eb6:	b538      	push	{r3, r4, r5, lr}
   b6eb8:	4604      	mov	r4, r0
   b6eba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6ebc:	f7fe f920 	bl	b5100 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6ec0:	28ff      	cmp	r0, #255	; 0xff
   b6ec2:	d010      	beq.n	b6ee6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6ec4:	2806      	cmp	r0, #6
   b6ec6:	d804      	bhi.n	b6ed2 <digitalWrite+0x1c>
   b6ec8:	234d      	movs	r3, #77	; 0x4d
   b6eca:	fa23 f000 	lsr.w	r0, r3, r0
   b6ece:	07c3      	lsls	r3, r0, #31
   b6ed0:	d409      	bmi.n	b6ee6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6ed2:	4620      	mov	r0, r4
   b6ed4:	f7ff ffa0 	bl	b6e18 <pinAvailable>
   b6ed8:	b128      	cbz	r0, b6ee6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6eda:	4629      	mov	r1, r5
   b6edc:	4620      	mov	r0, r4
}
   b6ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6ee2:	f7fe b915 	b.w	b5110 <HAL_GPIO_Write>
}
   b6ee6:	bd38      	pop	{r3, r4, r5, pc}

000b6ee8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6ee8:	4770      	bx	lr
	...

000b6eec <_Z20acquireSerial1Bufferv>:
{
   b6eec:	b538      	push	{r3, r4, r5, lr}
   b6eee:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6ef0:	2514      	movs	r5, #20
   b6ef2:	462a      	mov	r2, r5
   b6ef4:	2100      	movs	r1, #0
   b6ef6:	f000 fe4e 	bl	b7b96 <memset>
   b6efa:	8025      	strh	r5, [r4, #0]
   b6efc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6efe:	4907      	ldr	r1, [pc, #28]	; (b6f1c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6f00:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f02:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6f04:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f06:	f000 f86b 	bl	b6fe0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f0a:	4904      	ldr	r1, [pc, #16]	; (b6f1c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6f0c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f0e:	4628      	mov	r0, r5
   b6f10:	f000 f866 	bl	b6fe0 <_ZnajRKSt9nothrow_t>
    };
   b6f14:	60e0      	str	r0, [r4, #12]
}
   b6f16:	4620      	mov	r0, r4
   b6f18:	bd38      	pop	{r3, r4, r5, pc}
   b6f1a:	bf00      	nop
   b6f1c:	000ba114 	.word	0x000ba114

000b6f20 <_Z22__fetch_global_Serial1v>:
{
   b6f20:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f22:	4d0e      	ldr	r5, [pc, #56]	; (b6f5c <_Z22__fetch_global_Serial1v+0x3c>)
   b6f24:	7829      	ldrb	r1, [r5, #0]
   b6f26:	f3bf 8f5b 	dmb	ish
   b6f2a:	f011 0401 	ands.w	r4, r1, #1
{
   b6f2e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f30:	d111      	bne.n	b6f56 <_Z22__fetch_global_Serial1v+0x36>
   b6f32:	4628      	mov	r0, r5
   b6f34:	f7fd f8b7 	bl	b40a6 <__cxa_guard_acquire>
   b6f38:	b168      	cbz	r0, b6f56 <_Z22__fetch_global_Serial1v+0x36>
   b6f3a:	a801      	add	r0, sp, #4
   b6f3c:	f7ff ffd6 	bl	b6eec <_Z20acquireSerial1Bufferv>
   b6f40:	aa01      	add	r2, sp, #4
   b6f42:	4621      	mov	r1, r4
   b6f44:	4806      	ldr	r0, [pc, #24]	; (b6f60 <_Z22__fetch_global_Serial1v+0x40>)
   b6f46:	f7ff fb45 	bl	b65d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6f4a:	4628      	mov	r0, r5
   b6f4c:	f7fd f8b0 	bl	b40b0 <__cxa_guard_release>
   b6f50:	4804      	ldr	r0, [pc, #16]	; (b6f64 <_Z22__fetch_global_Serial1v+0x44>)
   b6f52:	f000 fdf1 	bl	b7b38 <atexit>
    return serial1;
}
   b6f56:	4802      	ldr	r0, [pc, #8]	; (b6f60 <_Z22__fetch_global_Serial1v+0x40>)
   b6f58:	b007      	add	sp, #28
   b6f5a:	bd30      	pop	{r4, r5, pc}
   b6f5c:	2003e72c 	.word	0x2003e72c
   b6f60:	2003e730 	.word	0x2003e730
   b6f64:	000b6ee9 	.word	0x000b6ee9

000b6f68 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6f68:	4770      	bx	lr
	...

000b6f6c <_Z17acquireWireBufferv>:
{
   b6f6c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6f6e:	2520      	movs	r5, #32
   b6f70:	2314      	movs	r3, #20
{
   b6f72:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6f74:	6003      	str	r3, [r0, #0]
   b6f76:	6085      	str	r5, [r0, #8]
   b6f78:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6f7a:	4906      	ldr	r1, [pc, #24]	; (b6f94 <_Z17acquireWireBufferv+0x28>)
   b6f7c:	4628      	mov	r0, r5
   b6f7e:	f000 f82f 	bl	b6fe0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6f82:	4904      	ldr	r1, [pc, #16]	; (b6f94 <_Z17acquireWireBufferv+0x28>)
	};
   b6f84:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6f86:	4628      	mov	r0, r5
   b6f88:	f000 f82a 	bl	b6fe0 <_ZnajRKSt9nothrow_t>
	};
   b6f8c:	60e0      	str	r0, [r4, #12]
}
   b6f8e:	4620      	mov	r0, r4
   b6f90:	bd38      	pop	{r3, r4, r5, pc}
   b6f92:	bf00      	nop
   b6f94:	000ba114 	.word	0x000ba114

000b6f98 <_Z19__fetch_global_Wirev>:
{
   b6f98:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6f9a:	4d0e      	ldr	r5, [pc, #56]	; (b6fd4 <_Z19__fetch_global_Wirev+0x3c>)
   b6f9c:	7829      	ldrb	r1, [r5, #0]
   b6f9e:	f3bf 8f5b 	dmb	ish
   b6fa2:	f011 0401 	ands.w	r4, r1, #1
{
   b6fa6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6fa8:	d111      	bne.n	b6fce <_Z19__fetch_global_Wirev+0x36>
   b6faa:	4628      	mov	r0, r5
   b6fac:	f7fd f87b 	bl	b40a6 <__cxa_guard_acquire>
   b6fb0:	b168      	cbz	r0, b6fce <_Z19__fetch_global_Wirev+0x36>
   b6fb2:	a801      	add	r0, sp, #4
   b6fb4:	f7ff ffda 	bl	b6f6c <_Z17acquireWireBufferv>
   b6fb8:	aa01      	add	r2, sp, #4
   b6fba:	4621      	mov	r1, r4
   b6fbc:	4806      	ldr	r0, [pc, #24]	; (b6fd8 <_Z19__fetch_global_Wirev+0x40>)
   b6fbe:	f7ff fb5d 	bl	b667c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6fc2:	4628      	mov	r0, r5
   b6fc4:	f7fd f874 	bl	b40b0 <__cxa_guard_release>
   b6fc8:	4804      	ldr	r0, [pc, #16]	; (b6fdc <_Z19__fetch_global_Wirev+0x44>)
   b6fca:	f000 fdb5 	bl	b7b38 <atexit>
	return wire;
}
   b6fce:	4802      	ldr	r0, [pc, #8]	; (b6fd8 <_Z19__fetch_global_Wirev+0x40>)
   b6fd0:	b007      	add	sp, #28
   b6fd2:	bd30      	pop	{r4, r5, pc}
   b6fd4:	2003e748 	.word	0x2003e748
   b6fd8:	2003e74c 	.word	0x2003e74c
   b6fdc:	000b6f69 	.word	0x000b6f69

000b6fe0 <_ZnajRKSt9nothrow_t>:
   b6fe0:	f7fd b85b 	b.w	b409a <_Znaj>

000b6fe4 <_ZSt25__throw_bad_function_callv>:
   b6fe4:	b508      	push	{r3, lr}
   b6fe6:	f7fe fb07 	bl	b55f8 <abort>
	...

000b6fec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6fec:	4901      	ldr	r1, [pc, #4]	; (b6ff4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6fee:	f000 b8f9 	b.w	b71e4 <_ZNKSt9type_infoeqERKS_>
   b6ff2:	bf00      	nop
   b6ff4:	000ba130 	.word	0x000ba130

000b6ff8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6ff8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6ffa:	2400      	movs	r4, #0
   b6ffc:	2310      	movs	r3, #16
   b6ffe:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7002:	6803      	ldr	r3, [r0, #0]
   b7004:	4615      	mov	r5, r2
   b7006:	699e      	ldr	r6, [r3, #24]
   b7008:	6812      	ldr	r2, [r2, #0]
   b700a:	466b      	mov	r3, sp
   b700c:	e9cd 4400 	strd	r4, r4, [sp]
   b7010:	47b0      	blx	r6
   b7012:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7016:	f003 0306 	and.w	r3, r3, #6
   b701a:	2b06      	cmp	r3, #6
   b701c:	bf03      	ittte	eq
   b701e:	9b00      	ldreq	r3, [sp, #0]
   b7020:	602b      	streq	r3, [r5, #0]
   b7022:	2001      	moveq	r0, #1
   b7024:	4620      	movne	r0, r4
   b7026:	b004      	add	sp, #16
   b7028:	bd70      	pop	{r4, r5, r6, pc}

000b702a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b702a:	9800      	ldr	r0, [sp, #0]
   b702c:	4290      	cmp	r0, r2
   b702e:	bf14      	ite	ne
   b7030:	2001      	movne	r0, #1
   b7032:	2006      	moveq	r0, #6
   b7034:	4770      	bx	lr
	...

000b7038 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7038:	b510      	push	{r4, lr}
   b703a:	4b03      	ldr	r3, [pc, #12]	; (b7048 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b703c:	6003      	str	r3, [r0, #0]
   b703e:	4604      	mov	r4, r0
   b7040:	f000 f8cd 	bl	b71de <_ZNSt9type_infoD1Ev>
   b7044:	4620      	mov	r0, r4
   b7046:	bd10      	pop	{r4, pc}
   b7048:	000ba170 	.word	0x000ba170

000b704c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b704c:	b510      	push	{r4, lr}
   b704e:	4604      	mov	r4, r0
   b7050:	f7ff fff2 	bl	b7038 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7054:	4620      	mov	r0, r4
   b7056:	2108      	movs	r1, #8
   b7058:	f7fd f823 	bl	b40a2 <_ZdlPvj>
   b705c:	4620      	mov	r0, r4
   b705e:	bd10      	pop	{r4, pc}

000b7060 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7064:	461f      	mov	r7, r3
   b7066:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b706a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b706e:	4598      	cmp	r8, r3
   b7070:	4606      	mov	r6, r0
   b7072:	4615      	mov	r5, r2
   b7074:	d107      	bne.n	b7086 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7076:	9907      	ldr	r1, [sp, #28]
   b7078:	f000 f8b4 	bl	b71e4 <_ZNKSt9type_infoeqERKS_>
   b707c:	b118      	cbz	r0, b7086 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b707e:	7165      	strb	r5, [r4, #5]
   b7080:	2000      	movs	r0, #0
   b7082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7086:	4639      	mov	r1, r7
   b7088:	4630      	mov	r0, r6
   b708a:	f000 f8ab 	bl	b71e4 <_ZNKSt9type_infoeqERKS_>
   b708e:	2800      	cmp	r0, #0
   b7090:	d0f6      	beq.n	b7080 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7092:	2301      	movs	r3, #1
   b7094:	f8c4 8000 	str.w	r8, [r4]
   b7098:	7125      	strb	r5, [r4, #4]
   b709a:	71a3      	strb	r3, [r4, #6]
   b709c:	e7f0      	b.n	b7080 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b709e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b709e:	b538      	push	{r3, r4, r5, lr}
   b70a0:	4615      	mov	r5, r2
   b70a2:	461c      	mov	r4, r3
   b70a4:	f000 f89e 	bl	b71e4 <_ZNKSt9type_infoeqERKS_>
   b70a8:	b120      	cbz	r0, b70b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b70aa:	2308      	movs	r3, #8
   b70ac:	60e3      	str	r3, [r4, #12]
   b70ae:	2306      	movs	r3, #6
   b70b0:	6025      	str	r5, [r4, #0]
   b70b2:	7123      	strb	r3, [r4, #4]
   b70b4:	bd38      	pop	{r3, r4, r5, pc}

000b70b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b70b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b70b8:	4605      	mov	r5, r0
   b70ba:	460c      	mov	r4, r1
   b70bc:	9201      	str	r2, [sp, #4]
   b70be:	461e      	mov	r6, r3
   b70c0:	f000 f890 	bl	b71e4 <_ZNKSt9type_infoeqERKS_>
   b70c4:	b950      	cbnz	r0, b70dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b70c6:	2e03      	cmp	r6, #3
   b70c8:	d808      	bhi.n	b70dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b70ca:	6823      	ldr	r3, [r4, #0]
   b70cc:	9a01      	ldr	r2, [sp, #4]
   b70ce:	695b      	ldr	r3, [r3, #20]
   b70d0:	4629      	mov	r1, r5
   b70d2:	4620      	mov	r0, r4
   b70d4:	b002      	add	sp, #8
   b70d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b70da:	4718      	bx	r3
   b70dc:	b002      	add	sp, #8
   b70de:	bd70      	pop	{r4, r5, r6, pc}

000b70e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b70e0:	b510      	push	{r4, lr}
   b70e2:	4b03      	ldr	r3, [pc, #12]	; (b70f0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b70e4:	6003      	str	r3, [r0, #0]
   b70e6:	4604      	mov	r4, r0
   b70e8:	f7ff ffa6 	bl	b7038 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b70ec:	4620      	mov	r0, r4
   b70ee:	bd10      	pop	{r4, pc}
   b70f0:	000ba1d0 	.word	0x000ba1d0

000b70f4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b70f4:	b510      	push	{r4, lr}
   b70f6:	4604      	mov	r4, r0
   b70f8:	f7ff fff2 	bl	b70e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b70fc:	4620      	mov	r0, r4
   b70fe:	210c      	movs	r1, #12
   b7100:	f7fc ffcf 	bl	b40a2 <_ZdlPvj>
   b7104:	4620      	mov	r0, r4
   b7106:	bd10      	pop	{r4, pc}

000b7108 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b710a:	9f08      	ldr	r7, [sp, #32]
   b710c:	4297      	cmp	r7, r2
   b710e:	4605      	mov	r5, r0
   b7110:	460e      	mov	r6, r1
   b7112:	4614      	mov	r4, r2
   b7114:	d00a      	beq.n	b712c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7116:	68a8      	ldr	r0, [r5, #8]
   b7118:	6802      	ldr	r2, [r0, #0]
   b711a:	9708      	str	r7, [sp, #32]
   b711c:	6a15      	ldr	r5, [r2, #32]
   b711e:	4631      	mov	r1, r6
   b7120:	4622      	mov	r2, r4
   b7122:	46ac      	mov	ip, r5
   b7124:	b003      	add	sp, #12
   b7126:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b712a:	4760      	bx	ip
   b712c:	4619      	mov	r1, r3
   b712e:	9301      	str	r3, [sp, #4]
   b7130:	f000 f858 	bl	b71e4 <_ZNKSt9type_infoeqERKS_>
   b7134:	9b01      	ldr	r3, [sp, #4]
   b7136:	2800      	cmp	r0, #0
   b7138:	d0ed      	beq.n	b7116 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b713a:	2006      	movs	r0, #6
   b713c:	b003      	add	sp, #12
   b713e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7140 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7140:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7144:	460d      	mov	r5, r1
   b7146:	4619      	mov	r1, r3
   b7148:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b714c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7150:	4681      	mov	r9, r0
   b7152:	4617      	mov	r7, r2
   b7154:	4698      	mov	r8, r3
   b7156:	f000 f845 	bl	b71e4 <_ZNKSt9type_infoeqERKS_>
   b715a:	b190      	cbz	r0, b7182 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b715c:	2d00      	cmp	r5, #0
   b715e:	6034      	str	r4, [r6, #0]
   b7160:	7137      	strb	r7, [r6, #4]
   b7162:	db09      	blt.n	b7178 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7164:	1961      	adds	r1, r4, r5
   b7166:	458a      	cmp	sl, r1
   b7168:	bf0c      	ite	eq
   b716a:	2106      	moveq	r1, #6
   b716c:	2101      	movne	r1, #1
   b716e:	71b1      	strb	r1, [r6, #6]
   b7170:	2000      	movs	r0, #0
   b7172:	b001      	add	sp, #4
   b7174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7178:	3502      	adds	r5, #2
   b717a:	d1f9      	bne.n	b7170 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b717c:	2301      	movs	r3, #1
   b717e:	71b3      	strb	r3, [r6, #6]
   b7180:	e7f6      	b.n	b7170 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7182:	4554      	cmp	r4, sl
   b7184:	d106      	bne.n	b7194 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7186:	4659      	mov	r1, fp
   b7188:	4648      	mov	r0, r9
   b718a:	f000 f82b 	bl	b71e4 <_ZNKSt9type_infoeqERKS_>
   b718e:	b108      	cbz	r0, b7194 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7190:	7177      	strb	r7, [r6, #5]
   b7192:	e7ed      	b.n	b7170 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7194:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7198:	6803      	ldr	r3, [r0, #0]
   b719a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b719e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b71a2:	69dc      	ldr	r4, [r3, #28]
   b71a4:	463a      	mov	r2, r7
   b71a6:	4643      	mov	r3, r8
   b71a8:	4629      	mov	r1, r5
   b71aa:	46a4      	mov	ip, r4
   b71ac:	b001      	add	sp, #4
   b71ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71b2:	4760      	bx	ip

000b71b4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b71b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b71b8:	4607      	mov	r7, r0
   b71ba:	460c      	mov	r4, r1
   b71bc:	4615      	mov	r5, r2
   b71be:	461e      	mov	r6, r3
   b71c0:	f7ff ff6d 	bl	b709e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b71c4:	b948      	cbnz	r0, b71da <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b71c6:	68b8      	ldr	r0, [r7, #8]
   b71c8:	6803      	ldr	r3, [r0, #0]
   b71ca:	699f      	ldr	r7, [r3, #24]
   b71cc:	462a      	mov	r2, r5
   b71ce:	4633      	mov	r3, r6
   b71d0:	4621      	mov	r1, r4
   b71d2:	46bc      	mov	ip, r7
   b71d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b71d8:	4760      	bx	ip
   b71da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b71de <_ZNSt9type_infoD1Ev>:
   b71de:	4770      	bx	lr

000b71e0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b71e0:	2000      	movs	r0, #0
   b71e2:	4770      	bx	lr

000b71e4 <_ZNKSt9type_infoeqERKS_>:
   b71e4:	4281      	cmp	r1, r0
   b71e6:	b508      	push	{r3, lr}
   b71e8:	d00e      	beq.n	b7208 <_ZNKSt9type_infoeqERKS_+0x24>
   b71ea:	6840      	ldr	r0, [r0, #4]
   b71ec:	7803      	ldrb	r3, [r0, #0]
   b71ee:	2b2a      	cmp	r3, #42	; 0x2a
   b71f0:	d00c      	beq.n	b720c <_ZNKSt9type_infoeqERKS_+0x28>
   b71f2:	6849      	ldr	r1, [r1, #4]
   b71f4:	780b      	ldrb	r3, [r1, #0]
   b71f6:	2b2a      	cmp	r3, #42	; 0x2a
   b71f8:	bf08      	it	eq
   b71fa:	3101      	addeq	r1, #1
   b71fc:	f000 fd11 	bl	b7c22 <strcmp>
   b7200:	fab0 f080 	clz	r0, r0
   b7204:	0940      	lsrs	r0, r0, #5
   b7206:	bd08      	pop	{r3, pc}
   b7208:	2001      	movs	r0, #1
   b720a:	e7fc      	b.n	b7206 <_ZNKSt9type_infoeqERKS_+0x22>
   b720c:	2000      	movs	r0, #0
   b720e:	e7fa      	b.n	b7206 <_ZNKSt9type_infoeqERKS_+0x22>

000b7210 <__aeabi_drsub>:
   b7210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7214:	e002      	b.n	b721c <__adddf3>
   b7216:	bf00      	nop

000b7218 <__aeabi_dsub>:
   b7218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b721c <__adddf3>:
   b721c:	b530      	push	{r4, r5, lr}
   b721e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7222:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7226:	ea94 0f05 	teq	r4, r5
   b722a:	bf08      	it	eq
   b722c:	ea90 0f02 	teqeq	r0, r2
   b7230:	bf1f      	itttt	ne
   b7232:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7236:	ea55 0c02 	orrsne.w	ip, r5, r2
   b723a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b723e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7242:	f000 80e2 	beq.w	b740a <__adddf3+0x1ee>
   b7246:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b724a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b724e:	bfb8      	it	lt
   b7250:	426d      	neglt	r5, r5
   b7252:	dd0c      	ble.n	b726e <__adddf3+0x52>
   b7254:	442c      	add	r4, r5
   b7256:	ea80 0202 	eor.w	r2, r0, r2
   b725a:	ea81 0303 	eor.w	r3, r1, r3
   b725e:	ea82 0000 	eor.w	r0, r2, r0
   b7262:	ea83 0101 	eor.w	r1, r3, r1
   b7266:	ea80 0202 	eor.w	r2, r0, r2
   b726a:	ea81 0303 	eor.w	r3, r1, r3
   b726e:	2d36      	cmp	r5, #54	; 0x36
   b7270:	bf88      	it	hi
   b7272:	bd30      	pophi	{r4, r5, pc}
   b7274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7278:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b727c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7284:	d002      	beq.n	b728c <__adddf3+0x70>
   b7286:	4240      	negs	r0, r0
   b7288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b728c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7290:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7298:	d002      	beq.n	b72a0 <__adddf3+0x84>
   b729a:	4252      	negs	r2, r2
   b729c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b72a0:	ea94 0f05 	teq	r4, r5
   b72a4:	f000 80a7 	beq.w	b73f6 <__adddf3+0x1da>
   b72a8:	f1a4 0401 	sub.w	r4, r4, #1
   b72ac:	f1d5 0e20 	rsbs	lr, r5, #32
   b72b0:	db0d      	blt.n	b72ce <__adddf3+0xb2>
   b72b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b72b6:	fa22 f205 	lsr.w	r2, r2, r5
   b72ba:	1880      	adds	r0, r0, r2
   b72bc:	f141 0100 	adc.w	r1, r1, #0
   b72c0:	fa03 f20e 	lsl.w	r2, r3, lr
   b72c4:	1880      	adds	r0, r0, r2
   b72c6:	fa43 f305 	asr.w	r3, r3, r5
   b72ca:	4159      	adcs	r1, r3
   b72cc:	e00e      	b.n	b72ec <__adddf3+0xd0>
   b72ce:	f1a5 0520 	sub.w	r5, r5, #32
   b72d2:	f10e 0e20 	add.w	lr, lr, #32
   b72d6:	2a01      	cmp	r2, #1
   b72d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b72dc:	bf28      	it	cs
   b72de:	f04c 0c02 	orrcs.w	ip, ip, #2
   b72e2:	fa43 f305 	asr.w	r3, r3, r5
   b72e6:	18c0      	adds	r0, r0, r3
   b72e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b72ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b72f0:	d507      	bpl.n	b7302 <__adddf3+0xe6>
   b72f2:	f04f 0e00 	mov.w	lr, #0
   b72f6:	f1dc 0c00 	rsbs	ip, ip, #0
   b72fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   b72fe:	eb6e 0101 	sbc.w	r1, lr, r1
   b7302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7306:	d31b      	bcc.n	b7340 <__adddf3+0x124>
   b7308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b730c:	d30c      	bcc.n	b7328 <__adddf3+0x10c>
   b730e:	0849      	lsrs	r1, r1, #1
   b7310:	ea5f 0030 	movs.w	r0, r0, rrx
   b7314:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7318:	f104 0401 	add.w	r4, r4, #1
   b731c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7324:	f080 809a 	bcs.w	b745c <__adddf3+0x240>
   b7328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b732c:	bf08      	it	eq
   b732e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7332:	f150 0000 	adcs.w	r0, r0, #0
   b7336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b733a:	ea41 0105 	orr.w	r1, r1, r5
   b733e:	bd30      	pop	{r4, r5, pc}
   b7340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7344:	4140      	adcs	r0, r0
   b7346:	eb41 0101 	adc.w	r1, r1, r1
   b734a:	3c01      	subs	r4, #1
   b734c:	bf28      	it	cs
   b734e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7352:	d2e9      	bcs.n	b7328 <__adddf3+0x10c>
   b7354:	f091 0f00 	teq	r1, #0
   b7358:	bf04      	itt	eq
   b735a:	4601      	moveq	r1, r0
   b735c:	2000      	moveq	r0, #0
   b735e:	fab1 f381 	clz	r3, r1
   b7362:	bf08      	it	eq
   b7364:	3320      	addeq	r3, #32
   b7366:	f1a3 030b 	sub.w	r3, r3, #11
   b736a:	f1b3 0220 	subs.w	r2, r3, #32
   b736e:	da0c      	bge.n	b738a <__adddf3+0x16e>
   b7370:	320c      	adds	r2, #12
   b7372:	dd08      	ble.n	b7386 <__adddf3+0x16a>
   b7374:	f102 0c14 	add.w	ip, r2, #20
   b7378:	f1c2 020c 	rsb	r2, r2, #12
   b737c:	fa01 f00c 	lsl.w	r0, r1, ip
   b7380:	fa21 f102 	lsr.w	r1, r1, r2
   b7384:	e00c      	b.n	b73a0 <__adddf3+0x184>
   b7386:	f102 0214 	add.w	r2, r2, #20
   b738a:	bfd8      	it	le
   b738c:	f1c2 0c20 	rsble	ip, r2, #32
   b7390:	fa01 f102 	lsl.w	r1, r1, r2
   b7394:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7398:	bfdc      	itt	le
   b739a:	ea41 010c 	orrle.w	r1, r1, ip
   b739e:	4090      	lslle	r0, r2
   b73a0:	1ae4      	subs	r4, r4, r3
   b73a2:	bfa2      	ittt	ge
   b73a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b73a8:	4329      	orrge	r1, r5
   b73aa:	bd30      	popge	{r4, r5, pc}
   b73ac:	ea6f 0404 	mvn.w	r4, r4
   b73b0:	3c1f      	subs	r4, #31
   b73b2:	da1c      	bge.n	b73ee <__adddf3+0x1d2>
   b73b4:	340c      	adds	r4, #12
   b73b6:	dc0e      	bgt.n	b73d6 <__adddf3+0x1ba>
   b73b8:	f104 0414 	add.w	r4, r4, #20
   b73bc:	f1c4 0220 	rsb	r2, r4, #32
   b73c0:	fa20 f004 	lsr.w	r0, r0, r4
   b73c4:	fa01 f302 	lsl.w	r3, r1, r2
   b73c8:	ea40 0003 	orr.w	r0, r0, r3
   b73cc:	fa21 f304 	lsr.w	r3, r1, r4
   b73d0:	ea45 0103 	orr.w	r1, r5, r3
   b73d4:	bd30      	pop	{r4, r5, pc}
   b73d6:	f1c4 040c 	rsb	r4, r4, #12
   b73da:	f1c4 0220 	rsb	r2, r4, #32
   b73de:	fa20 f002 	lsr.w	r0, r0, r2
   b73e2:	fa01 f304 	lsl.w	r3, r1, r4
   b73e6:	ea40 0003 	orr.w	r0, r0, r3
   b73ea:	4629      	mov	r1, r5
   b73ec:	bd30      	pop	{r4, r5, pc}
   b73ee:	fa21 f004 	lsr.w	r0, r1, r4
   b73f2:	4629      	mov	r1, r5
   b73f4:	bd30      	pop	{r4, r5, pc}
   b73f6:	f094 0f00 	teq	r4, #0
   b73fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b73fe:	bf06      	itte	eq
   b7400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7404:	3401      	addeq	r4, #1
   b7406:	3d01      	subne	r5, #1
   b7408:	e74e      	b.n	b72a8 <__adddf3+0x8c>
   b740a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b740e:	bf18      	it	ne
   b7410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7414:	d029      	beq.n	b746a <__adddf3+0x24e>
   b7416:	ea94 0f05 	teq	r4, r5
   b741a:	bf08      	it	eq
   b741c:	ea90 0f02 	teqeq	r0, r2
   b7420:	d005      	beq.n	b742e <__adddf3+0x212>
   b7422:	ea54 0c00 	orrs.w	ip, r4, r0
   b7426:	bf04      	itt	eq
   b7428:	4619      	moveq	r1, r3
   b742a:	4610      	moveq	r0, r2
   b742c:	bd30      	pop	{r4, r5, pc}
   b742e:	ea91 0f03 	teq	r1, r3
   b7432:	bf1e      	ittt	ne
   b7434:	2100      	movne	r1, #0
   b7436:	2000      	movne	r0, #0
   b7438:	bd30      	popne	{r4, r5, pc}
   b743a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b743e:	d105      	bne.n	b744c <__adddf3+0x230>
   b7440:	0040      	lsls	r0, r0, #1
   b7442:	4149      	adcs	r1, r1
   b7444:	bf28      	it	cs
   b7446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b744a:	bd30      	pop	{r4, r5, pc}
   b744c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7450:	bf3c      	itt	cc
   b7452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7456:	bd30      	popcc	{r4, r5, pc}
   b7458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b745c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7464:	f04f 0000 	mov.w	r0, #0
   b7468:	bd30      	pop	{r4, r5, pc}
   b746a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b746e:	bf1a      	itte	ne
   b7470:	4619      	movne	r1, r3
   b7472:	4610      	movne	r0, r2
   b7474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7478:	bf1c      	itt	ne
   b747a:	460b      	movne	r3, r1
   b747c:	4602      	movne	r2, r0
   b747e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7482:	bf06      	itte	eq
   b7484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7488:	ea91 0f03 	teqeq	r1, r3
   b748c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7490:	bd30      	pop	{r4, r5, pc}
   b7492:	bf00      	nop

000b7494 <__aeabi_ui2d>:
   b7494:	f090 0f00 	teq	r0, #0
   b7498:	bf04      	itt	eq
   b749a:	2100      	moveq	r1, #0
   b749c:	4770      	bxeq	lr
   b749e:	b530      	push	{r4, r5, lr}
   b74a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b74a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b74a8:	f04f 0500 	mov.w	r5, #0
   b74ac:	f04f 0100 	mov.w	r1, #0
   b74b0:	e750      	b.n	b7354 <__adddf3+0x138>
   b74b2:	bf00      	nop

000b74b4 <__aeabi_i2d>:
   b74b4:	f090 0f00 	teq	r0, #0
   b74b8:	bf04      	itt	eq
   b74ba:	2100      	moveq	r1, #0
   b74bc:	4770      	bxeq	lr
   b74be:	b530      	push	{r4, r5, lr}
   b74c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b74c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b74c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b74cc:	bf48      	it	mi
   b74ce:	4240      	negmi	r0, r0
   b74d0:	f04f 0100 	mov.w	r1, #0
   b74d4:	e73e      	b.n	b7354 <__adddf3+0x138>
   b74d6:	bf00      	nop

000b74d8 <__aeabi_f2d>:
   b74d8:	0042      	lsls	r2, r0, #1
   b74da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b74de:	ea4f 0131 	mov.w	r1, r1, rrx
   b74e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b74e6:	bf1f      	itttt	ne
   b74e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b74ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b74f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b74f4:	4770      	bxne	lr
   b74f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b74fa:	bf08      	it	eq
   b74fc:	4770      	bxeq	lr
   b74fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7502:	bf04      	itt	eq
   b7504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7508:	4770      	bxeq	lr
   b750a:	b530      	push	{r4, r5, lr}
   b750c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7518:	e71c      	b.n	b7354 <__adddf3+0x138>
   b751a:	bf00      	nop

000b751c <__aeabi_ul2d>:
   b751c:	ea50 0201 	orrs.w	r2, r0, r1
   b7520:	bf08      	it	eq
   b7522:	4770      	bxeq	lr
   b7524:	b530      	push	{r4, r5, lr}
   b7526:	f04f 0500 	mov.w	r5, #0
   b752a:	e00a      	b.n	b7542 <__aeabi_l2d+0x16>

000b752c <__aeabi_l2d>:
   b752c:	ea50 0201 	orrs.w	r2, r0, r1
   b7530:	bf08      	it	eq
   b7532:	4770      	bxeq	lr
   b7534:	b530      	push	{r4, r5, lr}
   b7536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b753a:	d502      	bpl.n	b7542 <__aeabi_l2d+0x16>
   b753c:	4240      	negs	r0, r0
   b753e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7542:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7546:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b754a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b754e:	f43f aed8 	beq.w	b7302 <__adddf3+0xe6>
   b7552:	f04f 0203 	mov.w	r2, #3
   b7556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b755a:	bf18      	it	ne
   b755c:	3203      	addne	r2, #3
   b755e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7562:	bf18      	it	ne
   b7564:	3203      	addne	r2, #3
   b7566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b756a:	f1c2 0320 	rsb	r3, r2, #32
   b756e:	fa00 fc03 	lsl.w	ip, r0, r3
   b7572:	fa20 f002 	lsr.w	r0, r0, r2
   b7576:	fa01 fe03 	lsl.w	lr, r1, r3
   b757a:	ea40 000e 	orr.w	r0, r0, lr
   b757e:	fa21 f102 	lsr.w	r1, r1, r2
   b7582:	4414      	add	r4, r2
   b7584:	e6bd      	b.n	b7302 <__adddf3+0xe6>
   b7586:	bf00      	nop

000b7588 <__aeabi_dmul>:
   b7588:	b570      	push	{r4, r5, r6, lr}
   b758a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b758e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7596:	bf1d      	ittte	ne
   b7598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b759c:	ea94 0f0c 	teqne	r4, ip
   b75a0:	ea95 0f0c 	teqne	r5, ip
   b75a4:	f000 f8de 	bleq	b7764 <__aeabi_dmul+0x1dc>
   b75a8:	442c      	add	r4, r5
   b75aa:	ea81 0603 	eor.w	r6, r1, r3
   b75ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b75b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b75b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b75ba:	bf18      	it	ne
   b75bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b75c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b75c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b75c8:	d038      	beq.n	b763c <__aeabi_dmul+0xb4>
   b75ca:	fba0 ce02 	umull	ip, lr, r0, r2
   b75ce:	f04f 0500 	mov.w	r5, #0
   b75d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b75d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b75da:	fbe0 e503 	umlal	lr, r5, r0, r3
   b75de:	f04f 0600 	mov.w	r6, #0
   b75e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b75e6:	f09c 0f00 	teq	ip, #0
   b75ea:	bf18      	it	ne
   b75ec:	f04e 0e01 	orrne.w	lr, lr, #1
   b75f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b75f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b75f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b75fc:	d204      	bcs.n	b7608 <__aeabi_dmul+0x80>
   b75fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7602:	416d      	adcs	r5, r5
   b7604:	eb46 0606 	adc.w	r6, r6, r6
   b7608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b760c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b761c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7620:	bf88      	it	hi
   b7622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7626:	d81e      	bhi.n	b7666 <__aeabi_dmul+0xde>
   b7628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b762c:	bf08      	it	eq
   b762e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7632:	f150 0000 	adcs.w	r0, r0, #0
   b7636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b763a:	bd70      	pop	{r4, r5, r6, pc}
   b763c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7640:	ea46 0101 	orr.w	r1, r6, r1
   b7644:	ea40 0002 	orr.w	r0, r0, r2
   b7648:	ea81 0103 	eor.w	r1, r1, r3
   b764c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7650:	bfc2      	ittt	gt
   b7652:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b765a:	bd70      	popgt	{r4, r5, r6, pc}
   b765c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7660:	f04f 0e00 	mov.w	lr, #0
   b7664:	3c01      	subs	r4, #1
   b7666:	f300 80ab 	bgt.w	b77c0 <__aeabi_dmul+0x238>
   b766a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b766e:	bfde      	ittt	le
   b7670:	2000      	movle	r0, #0
   b7672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7676:	bd70      	pople	{r4, r5, r6, pc}
   b7678:	f1c4 0400 	rsb	r4, r4, #0
   b767c:	3c20      	subs	r4, #32
   b767e:	da35      	bge.n	b76ec <__aeabi_dmul+0x164>
   b7680:	340c      	adds	r4, #12
   b7682:	dc1b      	bgt.n	b76bc <__aeabi_dmul+0x134>
   b7684:	f104 0414 	add.w	r4, r4, #20
   b7688:	f1c4 0520 	rsb	r5, r4, #32
   b768c:	fa00 f305 	lsl.w	r3, r0, r5
   b7690:	fa20 f004 	lsr.w	r0, r0, r4
   b7694:	fa01 f205 	lsl.w	r2, r1, r5
   b7698:	ea40 0002 	orr.w	r0, r0, r2
   b769c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b76a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b76a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b76a8:	fa21 f604 	lsr.w	r6, r1, r4
   b76ac:	eb42 0106 	adc.w	r1, r2, r6
   b76b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b76b4:	bf08      	it	eq
   b76b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b76ba:	bd70      	pop	{r4, r5, r6, pc}
   b76bc:	f1c4 040c 	rsb	r4, r4, #12
   b76c0:	f1c4 0520 	rsb	r5, r4, #32
   b76c4:	fa00 f304 	lsl.w	r3, r0, r4
   b76c8:	fa20 f005 	lsr.w	r0, r0, r5
   b76cc:	fa01 f204 	lsl.w	r2, r1, r4
   b76d0:	ea40 0002 	orr.w	r0, r0, r2
   b76d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b76d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b76dc:	f141 0100 	adc.w	r1, r1, #0
   b76e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b76e4:	bf08      	it	eq
   b76e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b76ea:	bd70      	pop	{r4, r5, r6, pc}
   b76ec:	f1c4 0520 	rsb	r5, r4, #32
   b76f0:	fa00 f205 	lsl.w	r2, r0, r5
   b76f4:	ea4e 0e02 	orr.w	lr, lr, r2
   b76f8:	fa20 f304 	lsr.w	r3, r0, r4
   b76fc:	fa01 f205 	lsl.w	r2, r1, r5
   b7700:	ea43 0302 	orr.w	r3, r3, r2
   b7704:	fa21 f004 	lsr.w	r0, r1, r4
   b7708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b770c:	fa21 f204 	lsr.w	r2, r1, r4
   b7710:	ea20 0002 	bic.w	r0, r0, r2
   b7714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b771c:	bf08      	it	eq
   b771e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7722:	bd70      	pop	{r4, r5, r6, pc}
   b7724:	f094 0f00 	teq	r4, #0
   b7728:	d10f      	bne.n	b774a <__aeabi_dmul+0x1c2>
   b772a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b772e:	0040      	lsls	r0, r0, #1
   b7730:	eb41 0101 	adc.w	r1, r1, r1
   b7734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7738:	bf08      	it	eq
   b773a:	3c01      	subeq	r4, #1
   b773c:	d0f7      	beq.n	b772e <__aeabi_dmul+0x1a6>
   b773e:	ea41 0106 	orr.w	r1, r1, r6
   b7742:	f095 0f00 	teq	r5, #0
   b7746:	bf18      	it	ne
   b7748:	4770      	bxne	lr
   b774a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b774e:	0052      	lsls	r2, r2, #1
   b7750:	eb43 0303 	adc.w	r3, r3, r3
   b7754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7758:	bf08      	it	eq
   b775a:	3d01      	subeq	r5, #1
   b775c:	d0f7      	beq.n	b774e <__aeabi_dmul+0x1c6>
   b775e:	ea43 0306 	orr.w	r3, r3, r6
   b7762:	4770      	bx	lr
   b7764:	ea94 0f0c 	teq	r4, ip
   b7768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b776c:	bf18      	it	ne
   b776e:	ea95 0f0c 	teqne	r5, ip
   b7772:	d00c      	beq.n	b778e <__aeabi_dmul+0x206>
   b7774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7778:	bf18      	it	ne
   b777a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b777e:	d1d1      	bne.n	b7724 <__aeabi_dmul+0x19c>
   b7780:	ea81 0103 	eor.w	r1, r1, r3
   b7784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7788:	f04f 0000 	mov.w	r0, #0
   b778c:	bd70      	pop	{r4, r5, r6, pc}
   b778e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7792:	bf06      	itte	eq
   b7794:	4610      	moveq	r0, r2
   b7796:	4619      	moveq	r1, r3
   b7798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b779c:	d019      	beq.n	b77d2 <__aeabi_dmul+0x24a>
   b779e:	ea94 0f0c 	teq	r4, ip
   b77a2:	d102      	bne.n	b77aa <__aeabi_dmul+0x222>
   b77a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b77a8:	d113      	bne.n	b77d2 <__aeabi_dmul+0x24a>
   b77aa:	ea95 0f0c 	teq	r5, ip
   b77ae:	d105      	bne.n	b77bc <__aeabi_dmul+0x234>
   b77b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b77b4:	bf1c      	itt	ne
   b77b6:	4610      	movne	r0, r2
   b77b8:	4619      	movne	r1, r3
   b77ba:	d10a      	bne.n	b77d2 <__aeabi_dmul+0x24a>
   b77bc:	ea81 0103 	eor.w	r1, r1, r3
   b77c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b77c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b77c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b77cc:	f04f 0000 	mov.w	r0, #0
   b77d0:	bd70      	pop	{r4, r5, r6, pc}
   b77d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b77d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b77da:	bd70      	pop	{r4, r5, r6, pc}

000b77dc <__aeabi_ddiv>:
   b77dc:	b570      	push	{r4, r5, r6, lr}
   b77de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b77e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b77e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b77ea:	bf1d      	ittte	ne
   b77ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b77f0:	ea94 0f0c 	teqne	r4, ip
   b77f4:	ea95 0f0c 	teqne	r5, ip
   b77f8:	f000 f8a7 	bleq	b794a <__aeabi_ddiv+0x16e>
   b77fc:	eba4 0405 	sub.w	r4, r4, r5
   b7800:	ea81 0e03 	eor.w	lr, r1, r3
   b7804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7808:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b780c:	f000 8088 	beq.w	b7920 <__aeabi_ddiv+0x144>
   b7810:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b781c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7820:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b782c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7834:	429d      	cmp	r5, r3
   b7836:	bf08      	it	eq
   b7838:	4296      	cmpeq	r6, r2
   b783a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b783e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7842:	d202      	bcs.n	b784a <__aeabi_ddiv+0x6e>
   b7844:	085b      	lsrs	r3, r3, #1
   b7846:	ea4f 0232 	mov.w	r2, r2, rrx
   b784a:	1ab6      	subs	r6, r6, r2
   b784c:	eb65 0503 	sbc.w	r5, r5, r3
   b7850:	085b      	lsrs	r3, r3, #1
   b7852:	ea4f 0232 	mov.w	r2, r2, rrx
   b7856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b785a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b785e:	ebb6 0e02 	subs.w	lr, r6, r2
   b7862:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7866:	bf22      	ittt	cs
   b7868:	1ab6      	subcs	r6, r6, r2
   b786a:	4675      	movcs	r5, lr
   b786c:	ea40 000c 	orrcs.w	r0, r0, ip
   b7870:	085b      	lsrs	r3, r3, #1
   b7872:	ea4f 0232 	mov.w	r2, r2, rrx
   b7876:	ebb6 0e02 	subs.w	lr, r6, r2
   b787a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b787e:	bf22      	ittt	cs
   b7880:	1ab6      	subcs	r6, r6, r2
   b7882:	4675      	movcs	r5, lr
   b7884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7888:	085b      	lsrs	r3, r3, #1
   b788a:	ea4f 0232 	mov.w	r2, r2, rrx
   b788e:	ebb6 0e02 	subs.w	lr, r6, r2
   b7892:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7896:	bf22      	ittt	cs
   b7898:	1ab6      	subcs	r6, r6, r2
   b789a:	4675      	movcs	r5, lr
   b789c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b78a0:	085b      	lsrs	r3, r3, #1
   b78a2:	ea4f 0232 	mov.w	r2, r2, rrx
   b78a6:	ebb6 0e02 	subs.w	lr, r6, r2
   b78aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b78ae:	bf22      	ittt	cs
   b78b0:	1ab6      	subcs	r6, r6, r2
   b78b2:	4675      	movcs	r5, lr
   b78b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b78b8:	ea55 0e06 	orrs.w	lr, r5, r6
   b78bc:	d018      	beq.n	b78f0 <__aeabi_ddiv+0x114>
   b78be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b78c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b78c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b78ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b78ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b78d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b78d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b78da:	d1c0      	bne.n	b785e <__aeabi_ddiv+0x82>
   b78dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b78e0:	d10b      	bne.n	b78fa <__aeabi_ddiv+0x11e>
   b78e2:	ea41 0100 	orr.w	r1, r1, r0
   b78e6:	f04f 0000 	mov.w	r0, #0
   b78ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b78ee:	e7b6      	b.n	b785e <__aeabi_ddiv+0x82>
   b78f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b78f4:	bf04      	itt	eq
   b78f6:	4301      	orreq	r1, r0
   b78f8:	2000      	moveq	r0, #0
   b78fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b78fe:	bf88      	it	hi
   b7900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7904:	f63f aeaf 	bhi.w	b7666 <__aeabi_dmul+0xde>
   b7908:	ebb5 0c03 	subs.w	ip, r5, r3
   b790c:	bf04      	itt	eq
   b790e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7916:	f150 0000 	adcs.w	r0, r0, #0
   b791a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b791e:	bd70      	pop	{r4, r5, r6, pc}
   b7920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b792c:	bfc2      	ittt	gt
   b792e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7936:	bd70      	popgt	{r4, r5, r6, pc}
   b7938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b793c:	f04f 0e00 	mov.w	lr, #0
   b7940:	3c01      	subs	r4, #1
   b7942:	e690      	b.n	b7666 <__aeabi_dmul+0xde>
   b7944:	ea45 0e06 	orr.w	lr, r5, r6
   b7948:	e68d      	b.n	b7666 <__aeabi_dmul+0xde>
   b794a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b794e:	ea94 0f0c 	teq	r4, ip
   b7952:	bf08      	it	eq
   b7954:	ea95 0f0c 	teqeq	r5, ip
   b7958:	f43f af3b 	beq.w	b77d2 <__aeabi_dmul+0x24a>
   b795c:	ea94 0f0c 	teq	r4, ip
   b7960:	d10a      	bne.n	b7978 <__aeabi_ddiv+0x19c>
   b7962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7966:	f47f af34 	bne.w	b77d2 <__aeabi_dmul+0x24a>
   b796a:	ea95 0f0c 	teq	r5, ip
   b796e:	f47f af25 	bne.w	b77bc <__aeabi_dmul+0x234>
   b7972:	4610      	mov	r0, r2
   b7974:	4619      	mov	r1, r3
   b7976:	e72c      	b.n	b77d2 <__aeabi_dmul+0x24a>
   b7978:	ea95 0f0c 	teq	r5, ip
   b797c:	d106      	bne.n	b798c <__aeabi_ddiv+0x1b0>
   b797e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7982:	f43f aefd 	beq.w	b7780 <__aeabi_dmul+0x1f8>
   b7986:	4610      	mov	r0, r2
   b7988:	4619      	mov	r1, r3
   b798a:	e722      	b.n	b77d2 <__aeabi_dmul+0x24a>
   b798c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7990:	bf18      	it	ne
   b7992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7996:	f47f aec5 	bne.w	b7724 <__aeabi_dmul+0x19c>
   b799a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b799e:	f47f af0d 	bne.w	b77bc <__aeabi_dmul+0x234>
   b79a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b79a6:	f47f aeeb 	bne.w	b7780 <__aeabi_dmul+0x1f8>
   b79aa:	e712      	b.n	b77d2 <__aeabi_dmul+0x24a>

000b79ac <__gedf2>:
   b79ac:	f04f 3cff 	mov.w	ip, #4294967295
   b79b0:	e006      	b.n	b79c0 <__cmpdf2+0x4>
   b79b2:	bf00      	nop

000b79b4 <__ledf2>:
   b79b4:	f04f 0c01 	mov.w	ip, #1
   b79b8:	e002      	b.n	b79c0 <__cmpdf2+0x4>
   b79ba:	bf00      	nop

000b79bc <__cmpdf2>:
   b79bc:	f04f 0c01 	mov.w	ip, #1
   b79c0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b79c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b79c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b79cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b79d0:	bf18      	it	ne
   b79d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b79d6:	d01b      	beq.n	b7a10 <__cmpdf2+0x54>
   b79d8:	b001      	add	sp, #4
   b79da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b79de:	bf0c      	ite	eq
   b79e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b79e4:	ea91 0f03 	teqne	r1, r3
   b79e8:	bf02      	ittt	eq
   b79ea:	ea90 0f02 	teqeq	r0, r2
   b79ee:	2000      	moveq	r0, #0
   b79f0:	4770      	bxeq	lr
   b79f2:	f110 0f00 	cmn.w	r0, #0
   b79f6:	ea91 0f03 	teq	r1, r3
   b79fa:	bf58      	it	pl
   b79fc:	4299      	cmppl	r1, r3
   b79fe:	bf08      	it	eq
   b7a00:	4290      	cmpeq	r0, r2
   b7a02:	bf2c      	ite	cs
   b7a04:	17d8      	asrcs	r0, r3, #31
   b7a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7a0a:	f040 0001 	orr.w	r0, r0, #1
   b7a0e:	4770      	bx	lr
   b7a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7a18:	d102      	bne.n	b7a20 <__cmpdf2+0x64>
   b7a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7a1e:	d107      	bne.n	b7a30 <__cmpdf2+0x74>
   b7a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7a28:	d1d6      	bne.n	b79d8 <__cmpdf2+0x1c>
   b7a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7a2e:	d0d3      	beq.n	b79d8 <__cmpdf2+0x1c>
   b7a30:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7a34:	4770      	bx	lr
   b7a36:	bf00      	nop

000b7a38 <__aeabi_cdrcmple>:
   b7a38:	4684      	mov	ip, r0
   b7a3a:	4610      	mov	r0, r2
   b7a3c:	4662      	mov	r2, ip
   b7a3e:	468c      	mov	ip, r1
   b7a40:	4619      	mov	r1, r3
   b7a42:	4663      	mov	r3, ip
   b7a44:	e000      	b.n	b7a48 <__aeabi_cdcmpeq>
   b7a46:	bf00      	nop

000b7a48 <__aeabi_cdcmpeq>:
   b7a48:	b501      	push	{r0, lr}
   b7a4a:	f7ff ffb7 	bl	b79bc <__cmpdf2>
   b7a4e:	2800      	cmp	r0, #0
   b7a50:	bf48      	it	mi
   b7a52:	f110 0f00 	cmnmi.w	r0, #0
   b7a56:	bd01      	pop	{r0, pc}

000b7a58 <__aeabi_dcmpeq>:
   b7a58:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a5c:	f7ff fff4 	bl	b7a48 <__aeabi_cdcmpeq>
   b7a60:	bf0c      	ite	eq
   b7a62:	2001      	moveq	r0, #1
   b7a64:	2000      	movne	r0, #0
   b7a66:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a6a:	bf00      	nop

000b7a6c <__aeabi_dcmplt>:
   b7a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a70:	f7ff ffea 	bl	b7a48 <__aeabi_cdcmpeq>
   b7a74:	bf34      	ite	cc
   b7a76:	2001      	movcc	r0, #1
   b7a78:	2000      	movcs	r0, #0
   b7a7a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a7e:	bf00      	nop

000b7a80 <__aeabi_dcmple>:
   b7a80:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a84:	f7ff ffe0 	bl	b7a48 <__aeabi_cdcmpeq>
   b7a88:	bf94      	ite	ls
   b7a8a:	2001      	movls	r0, #1
   b7a8c:	2000      	movhi	r0, #0
   b7a8e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a92:	bf00      	nop

000b7a94 <__aeabi_dcmpge>:
   b7a94:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a98:	f7ff ffce 	bl	b7a38 <__aeabi_cdrcmple>
   b7a9c:	bf94      	ite	ls
   b7a9e:	2001      	movls	r0, #1
   b7aa0:	2000      	movhi	r0, #0
   b7aa2:	f85d fb08 	ldr.w	pc, [sp], #8
   b7aa6:	bf00      	nop

000b7aa8 <__aeabi_dcmpgt>:
   b7aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7aac:	f7ff ffc4 	bl	b7a38 <__aeabi_cdrcmple>
   b7ab0:	bf34      	ite	cc
   b7ab2:	2001      	movcc	r0, #1
   b7ab4:	2000      	movcs	r0, #0
   b7ab6:	f85d fb08 	ldr.w	pc, [sp], #8
   b7aba:	bf00      	nop

000b7abc <__aeabi_d2uiz>:
   b7abc:	004a      	lsls	r2, r1, #1
   b7abe:	d211      	bcs.n	b7ae4 <__aeabi_d2uiz+0x28>
   b7ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7ac4:	d211      	bcs.n	b7aea <__aeabi_d2uiz+0x2e>
   b7ac6:	d50d      	bpl.n	b7ae4 <__aeabi_d2uiz+0x28>
   b7ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7ad0:	d40e      	bmi.n	b7af0 <__aeabi_d2uiz+0x34>
   b7ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7ade:	fa23 f002 	lsr.w	r0, r3, r2
   b7ae2:	4770      	bx	lr
   b7ae4:	f04f 0000 	mov.w	r0, #0
   b7ae8:	4770      	bx	lr
   b7aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7aee:	d102      	bne.n	b7af6 <__aeabi_d2uiz+0x3a>
   b7af0:	f04f 30ff 	mov.w	r0, #4294967295
   b7af4:	4770      	bx	lr
   b7af6:	f04f 0000 	mov.w	r0, #0
   b7afa:	4770      	bx	lr

000b7afc <__aeabi_d2ulz>:
   b7afc:	b5d0      	push	{r4, r6, r7, lr}
   b7afe:	4b0c      	ldr	r3, [pc, #48]	; (b7b30 <__aeabi_d2ulz+0x34>)
   b7b00:	2200      	movs	r2, #0
   b7b02:	4606      	mov	r6, r0
   b7b04:	460f      	mov	r7, r1
   b7b06:	f7ff fd3f 	bl	b7588 <__aeabi_dmul>
   b7b0a:	f7ff ffd7 	bl	b7abc <__aeabi_d2uiz>
   b7b0e:	4604      	mov	r4, r0
   b7b10:	f7ff fcc0 	bl	b7494 <__aeabi_ui2d>
   b7b14:	4b07      	ldr	r3, [pc, #28]	; (b7b34 <__aeabi_d2ulz+0x38>)
   b7b16:	2200      	movs	r2, #0
   b7b18:	f7ff fd36 	bl	b7588 <__aeabi_dmul>
   b7b1c:	4602      	mov	r2, r0
   b7b1e:	460b      	mov	r3, r1
   b7b20:	4630      	mov	r0, r6
   b7b22:	4639      	mov	r1, r7
   b7b24:	f7ff fb78 	bl	b7218 <__aeabi_dsub>
   b7b28:	f7ff ffc8 	bl	b7abc <__aeabi_d2uiz>
   b7b2c:	4621      	mov	r1, r4
   b7b2e:	bdd0      	pop	{r4, r6, r7, pc}
   b7b30:	3df00000 	.word	0x3df00000
   b7b34:	41f00000 	.word	0x41f00000

000b7b38 <atexit>:
   b7b38:	2300      	movs	r3, #0
   b7b3a:	4601      	mov	r1, r0
   b7b3c:	461a      	mov	r2, r3
   b7b3e:	4618      	mov	r0, r3
   b7b40:	f000 bfd4 	b.w	b8aec <__register_exitproc>

000b7b44 <atof>:
   b7b44:	2100      	movs	r1, #0
   b7b46:	f000 bedd 	b.w	b8904 <strtod>

000b7b4a <atoi>:
   b7b4a:	220a      	movs	r2, #10
   b7b4c:	2100      	movs	r1, #0
   b7b4e:	f000 bfc3 	b.w	b8ad8 <strtol>

000b7b52 <ldiv>:
   b7b52:	2900      	cmp	r1, #0
   b7b54:	b510      	push	{r4, lr}
   b7b56:	fb91 f4f2 	sdiv	r4, r1, r2
   b7b5a:	fb02 1314 	mls	r3, r2, r4, r1
   b7b5e:	db06      	blt.n	b7b6e <ldiv+0x1c>
   b7b60:	2b00      	cmp	r3, #0
   b7b62:	da01      	bge.n	b7b68 <ldiv+0x16>
   b7b64:	3401      	adds	r4, #1
   b7b66:	1a9b      	subs	r3, r3, r2
   b7b68:	e9c0 4300 	strd	r4, r3, [r0]
   b7b6c:	bd10      	pop	{r4, pc}
   b7b6e:	2b00      	cmp	r3, #0
   b7b70:	bfc4      	itt	gt
   b7b72:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b7b76:	189b      	addgt	r3, r3, r2
   b7b78:	e7f6      	b.n	b7b68 <ldiv+0x16>

000b7b7a <memcpy>:
   b7b7a:	440a      	add	r2, r1
   b7b7c:	4291      	cmp	r1, r2
   b7b7e:	f100 33ff 	add.w	r3, r0, #4294967295
   b7b82:	d100      	bne.n	b7b86 <memcpy+0xc>
   b7b84:	4770      	bx	lr
   b7b86:	b510      	push	{r4, lr}
   b7b88:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7b90:	4291      	cmp	r1, r2
   b7b92:	d1f9      	bne.n	b7b88 <memcpy+0xe>
   b7b94:	bd10      	pop	{r4, pc}

000b7b96 <memset>:
   b7b96:	4402      	add	r2, r0
   b7b98:	4603      	mov	r3, r0
   b7b9a:	4293      	cmp	r3, r2
   b7b9c:	d100      	bne.n	b7ba0 <memset+0xa>
   b7b9e:	4770      	bx	lr
   b7ba0:	f803 1b01 	strb.w	r1, [r3], #1
   b7ba4:	e7f9      	b.n	b7b9a <memset+0x4>
	...

000b7ba8 <srand>:
   b7ba8:	b538      	push	{r3, r4, r5, lr}
   b7baa:	4b10      	ldr	r3, [pc, #64]	; (b7bec <srand+0x44>)
   b7bac:	681d      	ldr	r5, [r3, #0]
   b7bae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7bb0:	4604      	mov	r4, r0
   b7bb2:	b9b3      	cbnz	r3, b7be2 <srand+0x3a>
   b7bb4:	2018      	movs	r0, #24
   b7bb6:	f7fd fcef 	bl	b5598 <malloc>
   b7bba:	4602      	mov	r2, r0
   b7bbc:	63a8      	str	r0, [r5, #56]	; 0x38
   b7bbe:	b920      	cbnz	r0, b7bca <srand+0x22>
   b7bc0:	4b0b      	ldr	r3, [pc, #44]	; (b7bf0 <srand+0x48>)
   b7bc2:	480c      	ldr	r0, [pc, #48]	; (b7bf4 <srand+0x4c>)
   b7bc4:	2142      	movs	r1, #66	; 0x42
   b7bc6:	f7fd fd2f 	bl	b5628 <__assert_func>
   b7bca:	490b      	ldr	r1, [pc, #44]	; (b7bf8 <srand+0x50>)
   b7bcc:	4b0b      	ldr	r3, [pc, #44]	; (b7bfc <srand+0x54>)
   b7bce:	e9c0 1300 	strd	r1, r3, [r0]
   b7bd2:	4b0b      	ldr	r3, [pc, #44]	; (b7c00 <srand+0x58>)
   b7bd4:	6083      	str	r3, [r0, #8]
   b7bd6:	230b      	movs	r3, #11
   b7bd8:	8183      	strh	r3, [r0, #12]
   b7bda:	2100      	movs	r1, #0
   b7bdc:	2001      	movs	r0, #1
   b7bde:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7be2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7be4:	2200      	movs	r2, #0
   b7be6:	611c      	str	r4, [r3, #16]
   b7be8:	615a      	str	r2, [r3, #20]
   b7bea:	bd38      	pop	{r3, r4, r5, pc}
   b7bec:	2003d774 	.word	0x2003d774
   b7bf0:	000ba209 	.word	0x000ba209
   b7bf4:	000ba220 	.word	0x000ba220
   b7bf8:	abcd330e 	.word	0xabcd330e
   b7bfc:	e66d1234 	.word	0xe66d1234
   b7c00:	0005deec 	.word	0x0005deec

000b7c04 <strcat>:
   b7c04:	b510      	push	{r4, lr}
   b7c06:	4602      	mov	r2, r0
   b7c08:	7814      	ldrb	r4, [r2, #0]
   b7c0a:	4613      	mov	r3, r2
   b7c0c:	3201      	adds	r2, #1
   b7c0e:	2c00      	cmp	r4, #0
   b7c10:	d1fa      	bne.n	b7c08 <strcat+0x4>
   b7c12:	3b01      	subs	r3, #1
   b7c14:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7c18:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7c1c:	2a00      	cmp	r2, #0
   b7c1e:	d1f9      	bne.n	b7c14 <strcat+0x10>
   b7c20:	bd10      	pop	{r4, pc}

000b7c22 <strcmp>:
   b7c22:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7c26:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7c2a:	2a01      	cmp	r2, #1
   b7c2c:	bf28      	it	cs
   b7c2e:	429a      	cmpcs	r2, r3
   b7c30:	d0f7      	beq.n	b7c22 <strcmp>
   b7c32:	1ad0      	subs	r0, r2, r3
   b7c34:	4770      	bx	lr

000b7c36 <strcpy>:
   b7c36:	4603      	mov	r3, r0
   b7c38:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7c3c:	f803 2b01 	strb.w	r2, [r3], #1
   b7c40:	2a00      	cmp	r2, #0
   b7c42:	d1f9      	bne.n	b7c38 <strcpy+0x2>
   b7c44:	4770      	bx	lr
	...

000b7c48 <strdup>:
   b7c48:	4b02      	ldr	r3, [pc, #8]	; (b7c54 <strdup+0xc>)
   b7c4a:	4601      	mov	r1, r0
   b7c4c:	6818      	ldr	r0, [r3, #0]
   b7c4e:	f000 b803 	b.w	b7c58 <_strdup_r>
   b7c52:	bf00      	nop
   b7c54:	2003d774 	.word	0x2003d774

000b7c58 <_strdup_r>:
   b7c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c5a:	4604      	mov	r4, r0
   b7c5c:	4608      	mov	r0, r1
   b7c5e:	460d      	mov	r5, r1
   b7c60:	f000 f80f 	bl	b7c82 <strlen>
   b7c64:	1c42      	adds	r2, r0, #1
   b7c66:	4611      	mov	r1, r2
   b7c68:	4620      	mov	r0, r4
   b7c6a:	9201      	str	r2, [sp, #4]
   b7c6c:	f7fd fccc 	bl	b5608 <_malloc_r>
   b7c70:	4604      	mov	r4, r0
   b7c72:	b118      	cbz	r0, b7c7c <_strdup_r+0x24>
   b7c74:	9a01      	ldr	r2, [sp, #4]
   b7c76:	4629      	mov	r1, r5
   b7c78:	f7ff ff7f 	bl	b7b7a <memcpy>
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	b003      	add	sp, #12
   b7c80:	bd30      	pop	{r4, r5, pc}

000b7c82 <strlen>:
   b7c82:	4603      	mov	r3, r0
   b7c84:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7c88:	2a00      	cmp	r2, #0
   b7c8a:	d1fb      	bne.n	b7c84 <strlen+0x2>
   b7c8c:	1a18      	subs	r0, r3, r0
   b7c8e:	3801      	subs	r0, #1
   b7c90:	4770      	bx	lr

000b7c92 <strncmp>:
   b7c92:	b510      	push	{r4, lr}
   b7c94:	b17a      	cbz	r2, b7cb6 <strncmp+0x24>
   b7c96:	4603      	mov	r3, r0
   b7c98:	3901      	subs	r1, #1
   b7c9a:	1884      	adds	r4, r0, r2
   b7c9c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7ca0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7ca4:	4290      	cmp	r0, r2
   b7ca6:	d101      	bne.n	b7cac <strncmp+0x1a>
   b7ca8:	42a3      	cmp	r3, r4
   b7caa:	d101      	bne.n	b7cb0 <strncmp+0x1e>
   b7cac:	1a80      	subs	r0, r0, r2
   b7cae:	bd10      	pop	{r4, pc}
   b7cb0:	2800      	cmp	r0, #0
   b7cb2:	d1f3      	bne.n	b7c9c <strncmp+0xa>
   b7cb4:	e7fa      	b.n	b7cac <strncmp+0x1a>
   b7cb6:	4610      	mov	r0, r2
   b7cb8:	e7f9      	b.n	b7cae <strncmp+0x1c>

000b7cba <sulp>:
   b7cba:	b570      	push	{r4, r5, r6, lr}
   b7cbc:	4604      	mov	r4, r0
   b7cbe:	460d      	mov	r5, r1
   b7cc0:	ec45 4b10 	vmov	d0, r4, r5
   b7cc4:	4616      	mov	r6, r2
   b7cc6:	f001 fe6b 	bl	b99a0 <__ulp>
   b7cca:	ec51 0b10 	vmov	r0, r1, d0
   b7cce:	b17e      	cbz	r6, b7cf0 <sulp+0x36>
   b7cd0:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b7cd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7cd8:	2b00      	cmp	r3, #0
   b7cda:	dd09      	ble.n	b7cf0 <sulp+0x36>
   b7cdc:	051b      	lsls	r3, r3, #20
   b7cde:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b7ce2:	2400      	movs	r4, #0
   b7ce4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7ce8:	4622      	mov	r2, r4
   b7cea:	462b      	mov	r3, r5
   b7cec:	f7ff fc4c 	bl	b7588 <__aeabi_dmul>
   b7cf0:	bd70      	pop	{r4, r5, r6, pc}
   b7cf2:	0000      	movs	r0, r0
   b7cf4:	0000      	movs	r0, r0
	...

000b7cf8 <_strtod_l>:
   b7cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cfc:	ed2d 8b02 	vpush	{d8}
   b7d00:	b09d      	sub	sp, #116	; 0x74
   b7d02:	461f      	mov	r7, r3
   b7d04:	2300      	movs	r3, #0
   b7d06:	9318      	str	r3, [sp, #96]	; 0x60
   b7d08:	4ba2      	ldr	r3, [pc, #648]	; (b7f94 <_strtod_l+0x29c>)
   b7d0a:	9213      	str	r2, [sp, #76]	; 0x4c
   b7d0c:	681b      	ldr	r3, [r3, #0]
   b7d0e:	9305      	str	r3, [sp, #20]
   b7d10:	4604      	mov	r4, r0
   b7d12:	4618      	mov	r0, r3
   b7d14:	4688      	mov	r8, r1
   b7d16:	f7ff ffb4 	bl	b7c82 <strlen>
   b7d1a:	f04f 0a00 	mov.w	sl, #0
   b7d1e:	4605      	mov	r5, r0
   b7d20:	f04f 0b00 	mov.w	fp, #0
   b7d24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7d28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7d2a:	781a      	ldrb	r2, [r3, #0]
   b7d2c:	2a2b      	cmp	r2, #43	; 0x2b
   b7d2e:	d04e      	beq.n	b7dce <_strtod_l+0xd6>
   b7d30:	d83b      	bhi.n	b7daa <_strtod_l+0xb2>
   b7d32:	2a0d      	cmp	r2, #13
   b7d34:	d834      	bhi.n	b7da0 <_strtod_l+0xa8>
   b7d36:	2a08      	cmp	r2, #8
   b7d38:	d834      	bhi.n	b7da4 <_strtod_l+0xac>
   b7d3a:	2a00      	cmp	r2, #0
   b7d3c:	d03e      	beq.n	b7dbc <_strtod_l+0xc4>
   b7d3e:	2300      	movs	r3, #0
   b7d40:	930a      	str	r3, [sp, #40]	; 0x28
   b7d42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b7d44:	7833      	ldrb	r3, [r6, #0]
   b7d46:	2b30      	cmp	r3, #48	; 0x30
   b7d48:	f040 80b0 	bne.w	b7eac <_strtod_l+0x1b4>
   b7d4c:	7873      	ldrb	r3, [r6, #1]
   b7d4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7d52:	2b58      	cmp	r3, #88	; 0x58
   b7d54:	d168      	bne.n	b7e28 <_strtod_l+0x130>
   b7d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7d58:	9301      	str	r3, [sp, #4]
   b7d5a:	ab18      	add	r3, sp, #96	; 0x60
   b7d5c:	9702      	str	r7, [sp, #8]
   b7d5e:	9300      	str	r3, [sp, #0]
   b7d60:	4a8d      	ldr	r2, [pc, #564]	; (b7f98 <_strtod_l+0x2a0>)
   b7d62:	ab19      	add	r3, sp, #100	; 0x64
   b7d64:	a917      	add	r1, sp, #92	; 0x5c
   b7d66:	4620      	mov	r0, r4
   b7d68:	f000 ff8a 	bl	b8c80 <__gethex>
   b7d6c:	f010 0707 	ands.w	r7, r0, #7
   b7d70:	4605      	mov	r5, r0
   b7d72:	d005      	beq.n	b7d80 <_strtod_l+0x88>
   b7d74:	2f06      	cmp	r7, #6
   b7d76:	d12c      	bne.n	b7dd2 <_strtod_l+0xda>
   b7d78:	3601      	adds	r6, #1
   b7d7a:	2300      	movs	r3, #0
   b7d7c:	9617      	str	r6, [sp, #92]	; 0x5c
   b7d7e:	930a      	str	r3, [sp, #40]	; 0x28
   b7d80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7d82:	2b00      	cmp	r3, #0
   b7d84:	f040 8590 	bne.w	b88a8 <_strtod_l+0xbb0>
   b7d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7d8a:	b1eb      	cbz	r3, b7dc8 <_strtod_l+0xd0>
   b7d8c:	4652      	mov	r2, sl
   b7d8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b7d92:	ec43 2b10 	vmov	d0, r2, r3
   b7d96:	b01d      	add	sp, #116	; 0x74
   b7d98:	ecbd 8b02 	vpop	{d8}
   b7d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7da0:	2a20      	cmp	r2, #32
   b7da2:	d1cc      	bne.n	b7d3e <_strtod_l+0x46>
   b7da4:	3301      	adds	r3, #1
   b7da6:	9317      	str	r3, [sp, #92]	; 0x5c
   b7da8:	e7be      	b.n	b7d28 <_strtod_l+0x30>
   b7daa:	2a2d      	cmp	r2, #45	; 0x2d
   b7dac:	d1c7      	bne.n	b7d3e <_strtod_l+0x46>
   b7dae:	2201      	movs	r2, #1
   b7db0:	920a      	str	r2, [sp, #40]	; 0x28
   b7db2:	1c5a      	adds	r2, r3, #1
   b7db4:	9217      	str	r2, [sp, #92]	; 0x5c
   b7db6:	785b      	ldrb	r3, [r3, #1]
   b7db8:	2b00      	cmp	r3, #0
   b7dba:	d1c2      	bne.n	b7d42 <_strtod_l+0x4a>
   b7dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7dbe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7dc2:	2b00      	cmp	r3, #0
   b7dc4:	f040 856e 	bne.w	b88a4 <_strtod_l+0xbac>
   b7dc8:	4652      	mov	r2, sl
   b7dca:	465b      	mov	r3, fp
   b7dcc:	e7e1      	b.n	b7d92 <_strtod_l+0x9a>
   b7dce:	2200      	movs	r2, #0
   b7dd0:	e7ee      	b.n	b7db0 <_strtod_l+0xb8>
   b7dd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7dd4:	b13a      	cbz	r2, b7de6 <_strtod_l+0xee>
   b7dd6:	2135      	movs	r1, #53	; 0x35
   b7dd8:	a81a      	add	r0, sp, #104	; 0x68
   b7dda:	f001 feec 	bl	b9bb6 <__copybits>
   b7dde:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7de0:	4620      	mov	r0, r4
   b7de2:	f001 faab 	bl	b933c <_Bfree>
   b7de6:	3f01      	subs	r7, #1
   b7de8:	2f04      	cmp	r7, #4
   b7dea:	d806      	bhi.n	b7dfa <_strtod_l+0x102>
   b7dec:	e8df f007 	tbb	[pc, r7]
   b7df0:	1714030a 	.word	0x1714030a
   b7df4:	0a          	.byte	0x0a
   b7df5:	00          	.byte	0x00
   b7df6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b7dfa:	0728      	lsls	r0, r5, #28
   b7dfc:	d5c0      	bpl.n	b7d80 <_strtod_l+0x88>
   b7dfe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b7e02:	e7bd      	b.n	b7d80 <_strtod_l+0x88>
   b7e04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7e08:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b7e0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b7e0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b7e12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b7e16:	e7f0      	b.n	b7dfa <_strtod_l+0x102>
   b7e18:	f8df b180 	ldr.w	fp, [pc, #384]	; b7f9c <_strtod_l+0x2a4>
   b7e1c:	e7ed      	b.n	b7dfa <_strtod_l+0x102>
   b7e1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b7e22:	f04f 3aff 	mov.w	sl, #4294967295
   b7e26:	e7e8      	b.n	b7dfa <_strtod_l+0x102>
   b7e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e2a:	1c5a      	adds	r2, r3, #1
   b7e2c:	9217      	str	r2, [sp, #92]	; 0x5c
   b7e2e:	785b      	ldrb	r3, [r3, #1]
   b7e30:	2b30      	cmp	r3, #48	; 0x30
   b7e32:	d0f9      	beq.n	b7e28 <_strtod_l+0x130>
   b7e34:	2b00      	cmp	r3, #0
   b7e36:	d0a3      	beq.n	b7d80 <_strtod_l+0x88>
   b7e38:	2301      	movs	r3, #1
   b7e3a:	f04f 0900 	mov.w	r9, #0
   b7e3e:	9304      	str	r3, [sp, #16]
   b7e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e42:	9308      	str	r3, [sp, #32]
   b7e44:	f8cd 901c 	str.w	r9, [sp, #28]
   b7e48:	464f      	mov	r7, r9
   b7e4a:	220a      	movs	r2, #10
   b7e4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b7e4e:	7806      	ldrb	r6, [r0, #0]
   b7e50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b7e54:	b2d9      	uxtb	r1, r3
   b7e56:	2909      	cmp	r1, #9
   b7e58:	d92a      	bls.n	b7eb0 <_strtod_l+0x1b8>
   b7e5a:	9905      	ldr	r1, [sp, #20]
   b7e5c:	462a      	mov	r2, r5
   b7e5e:	f7ff ff18 	bl	b7c92 <strncmp>
   b7e62:	b398      	cbz	r0, b7ecc <_strtod_l+0x1d4>
   b7e64:	2000      	movs	r0, #0
   b7e66:	4632      	mov	r2, r6
   b7e68:	463d      	mov	r5, r7
   b7e6a:	9005      	str	r0, [sp, #20]
   b7e6c:	4603      	mov	r3, r0
   b7e6e:	2a65      	cmp	r2, #101	; 0x65
   b7e70:	d001      	beq.n	b7e76 <_strtod_l+0x17e>
   b7e72:	2a45      	cmp	r2, #69	; 0x45
   b7e74:	d118      	bne.n	b7ea8 <_strtod_l+0x1b0>
   b7e76:	b91d      	cbnz	r5, b7e80 <_strtod_l+0x188>
   b7e78:	9a04      	ldr	r2, [sp, #16]
   b7e7a:	4302      	orrs	r2, r0
   b7e7c:	d09e      	beq.n	b7dbc <_strtod_l+0xc4>
   b7e7e:	2500      	movs	r5, #0
   b7e80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b7e84:	f108 0201 	add.w	r2, r8, #1
   b7e88:	9217      	str	r2, [sp, #92]	; 0x5c
   b7e8a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b7e8e:	2a2b      	cmp	r2, #43	; 0x2b
   b7e90:	d075      	beq.n	b7f7e <_strtod_l+0x286>
   b7e92:	2a2d      	cmp	r2, #45	; 0x2d
   b7e94:	d07b      	beq.n	b7f8e <_strtod_l+0x296>
   b7e96:	f04f 0c00 	mov.w	ip, #0
   b7e9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b7e9e:	2909      	cmp	r1, #9
   b7ea0:	f240 8082 	bls.w	b7fa8 <_strtod_l+0x2b0>
   b7ea4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7ea8:	2600      	movs	r6, #0
   b7eaa:	e09d      	b.n	b7fe8 <_strtod_l+0x2f0>
   b7eac:	2300      	movs	r3, #0
   b7eae:	e7c4      	b.n	b7e3a <_strtod_l+0x142>
   b7eb0:	2f08      	cmp	r7, #8
   b7eb2:	bfd8      	it	le
   b7eb4:	9907      	ldrle	r1, [sp, #28]
   b7eb6:	f100 0001 	add.w	r0, r0, #1
   b7eba:	bfda      	itte	le
   b7ebc:	fb02 3301 	mlale	r3, r2, r1, r3
   b7ec0:	9307      	strle	r3, [sp, #28]
   b7ec2:	fb02 3909 	mlagt	r9, r2, r9, r3
   b7ec6:	3701      	adds	r7, #1
   b7ec8:	9017      	str	r0, [sp, #92]	; 0x5c
   b7eca:	e7bf      	b.n	b7e4c <_strtod_l+0x154>
   b7ecc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7ece:	195a      	adds	r2, r3, r5
   b7ed0:	9217      	str	r2, [sp, #92]	; 0x5c
   b7ed2:	5d5a      	ldrb	r2, [r3, r5]
   b7ed4:	2f00      	cmp	r7, #0
   b7ed6:	d037      	beq.n	b7f48 <_strtod_l+0x250>
   b7ed8:	9005      	str	r0, [sp, #20]
   b7eda:	463d      	mov	r5, r7
   b7edc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7ee0:	2b09      	cmp	r3, #9
   b7ee2:	d912      	bls.n	b7f0a <_strtod_l+0x212>
   b7ee4:	2301      	movs	r3, #1
   b7ee6:	e7c2      	b.n	b7e6e <_strtod_l+0x176>
   b7ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7eea:	1c5a      	adds	r2, r3, #1
   b7eec:	9217      	str	r2, [sp, #92]	; 0x5c
   b7eee:	785a      	ldrb	r2, [r3, #1]
   b7ef0:	3001      	adds	r0, #1
   b7ef2:	2a30      	cmp	r2, #48	; 0x30
   b7ef4:	d0f8      	beq.n	b7ee8 <_strtod_l+0x1f0>
   b7ef6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b7efa:	2b08      	cmp	r3, #8
   b7efc:	f200 84d9 	bhi.w	b88b2 <_strtod_l+0xbba>
   b7f00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7f02:	9005      	str	r0, [sp, #20]
   b7f04:	2000      	movs	r0, #0
   b7f06:	9308      	str	r3, [sp, #32]
   b7f08:	4605      	mov	r5, r0
   b7f0a:	3a30      	subs	r2, #48	; 0x30
   b7f0c:	f100 0301 	add.w	r3, r0, #1
   b7f10:	d014      	beq.n	b7f3c <_strtod_l+0x244>
   b7f12:	9905      	ldr	r1, [sp, #20]
   b7f14:	4419      	add	r1, r3
   b7f16:	9105      	str	r1, [sp, #20]
   b7f18:	462b      	mov	r3, r5
   b7f1a:	eb00 0e05 	add.w	lr, r0, r5
   b7f1e:	210a      	movs	r1, #10
   b7f20:	4573      	cmp	r3, lr
   b7f22:	d113      	bne.n	b7f4c <_strtod_l+0x254>
   b7f24:	182b      	adds	r3, r5, r0
   b7f26:	2b08      	cmp	r3, #8
   b7f28:	f105 0501 	add.w	r5, r5, #1
   b7f2c:	4405      	add	r5, r0
   b7f2e:	dc1c      	bgt.n	b7f6a <_strtod_l+0x272>
   b7f30:	9907      	ldr	r1, [sp, #28]
   b7f32:	230a      	movs	r3, #10
   b7f34:	fb03 2301 	mla	r3, r3, r1, r2
   b7f38:	9307      	str	r3, [sp, #28]
   b7f3a:	2300      	movs	r3, #0
   b7f3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7f3e:	1c51      	adds	r1, r2, #1
   b7f40:	9117      	str	r1, [sp, #92]	; 0x5c
   b7f42:	7852      	ldrb	r2, [r2, #1]
   b7f44:	4618      	mov	r0, r3
   b7f46:	e7c9      	b.n	b7edc <_strtod_l+0x1e4>
   b7f48:	4638      	mov	r0, r7
   b7f4a:	e7d2      	b.n	b7ef2 <_strtod_l+0x1fa>
   b7f4c:	2b08      	cmp	r3, #8
   b7f4e:	dc04      	bgt.n	b7f5a <_strtod_l+0x262>
   b7f50:	9e07      	ldr	r6, [sp, #28]
   b7f52:	434e      	muls	r6, r1
   b7f54:	9607      	str	r6, [sp, #28]
   b7f56:	3301      	adds	r3, #1
   b7f58:	e7e2      	b.n	b7f20 <_strtod_l+0x228>
   b7f5a:	f103 0c01 	add.w	ip, r3, #1
   b7f5e:	f1bc 0f10 	cmp.w	ip, #16
   b7f62:	bfd8      	it	le
   b7f64:	fb01 f909 	mulle.w	r9, r1, r9
   b7f68:	e7f5      	b.n	b7f56 <_strtod_l+0x25e>
   b7f6a:	2d10      	cmp	r5, #16
   b7f6c:	bfdc      	itt	le
   b7f6e:	230a      	movle	r3, #10
   b7f70:	fb03 2909 	mlale	r9, r3, r9, r2
   b7f74:	e7e1      	b.n	b7f3a <_strtod_l+0x242>
   b7f76:	2300      	movs	r3, #0
   b7f78:	9305      	str	r3, [sp, #20]
   b7f7a:	2301      	movs	r3, #1
   b7f7c:	e77c      	b.n	b7e78 <_strtod_l+0x180>
   b7f7e:	f04f 0c00 	mov.w	ip, #0
   b7f82:	f108 0202 	add.w	r2, r8, #2
   b7f86:	9217      	str	r2, [sp, #92]	; 0x5c
   b7f88:	f898 2002 	ldrb.w	r2, [r8, #2]
   b7f8c:	e785      	b.n	b7e9a <_strtod_l+0x1a2>
   b7f8e:	f04f 0c01 	mov.w	ip, #1
   b7f92:	e7f6      	b.n	b7f82 <_strtod_l+0x28a>
   b7f94:	000ba518 	.word	0x000ba518
   b7f98:	000ba2ac 	.word	0x000ba2ac
   b7f9c:	7ff00000 	.word	0x7ff00000
   b7fa0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7fa2:	1c51      	adds	r1, r2, #1
   b7fa4:	9117      	str	r1, [sp, #92]	; 0x5c
   b7fa6:	7852      	ldrb	r2, [r2, #1]
   b7fa8:	2a30      	cmp	r2, #48	; 0x30
   b7faa:	d0f9      	beq.n	b7fa0 <_strtod_l+0x2a8>
   b7fac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b7fb0:	2908      	cmp	r1, #8
   b7fb2:	f63f af79 	bhi.w	b7ea8 <_strtod_l+0x1b0>
   b7fb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b7fba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7fbc:	9206      	str	r2, [sp, #24]
   b7fbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7fc0:	1c51      	adds	r1, r2, #1
   b7fc2:	9117      	str	r1, [sp, #92]	; 0x5c
   b7fc4:	7852      	ldrb	r2, [r2, #1]
   b7fc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b7fca:	2e09      	cmp	r6, #9
   b7fcc:	d937      	bls.n	b803e <_strtod_l+0x346>
   b7fce:	9e06      	ldr	r6, [sp, #24]
   b7fd0:	1b89      	subs	r1, r1, r6
   b7fd2:	2908      	cmp	r1, #8
   b7fd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7fd8:	dc02      	bgt.n	b7fe0 <_strtod_l+0x2e8>
   b7fda:	4576      	cmp	r6, lr
   b7fdc:	bfa8      	it	ge
   b7fde:	4676      	movge	r6, lr
   b7fe0:	f1bc 0f00 	cmp.w	ip, #0
   b7fe4:	d000      	beq.n	b7fe8 <_strtod_l+0x2f0>
   b7fe6:	4276      	negs	r6, r6
   b7fe8:	2d00      	cmp	r5, #0
   b7fea:	d14d      	bne.n	b8088 <_strtod_l+0x390>
   b7fec:	9904      	ldr	r1, [sp, #16]
   b7fee:	4301      	orrs	r1, r0
   b7ff0:	f47f aec6 	bne.w	b7d80 <_strtod_l+0x88>
   b7ff4:	2b00      	cmp	r3, #0
   b7ff6:	f47f aee1 	bne.w	b7dbc <_strtod_l+0xc4>
   b7ffa:	2a69      	cmp	r2, #105	; 0x69
   b7ffc:	d027      	beq.n	b804e <_strtod_l+0x356>
   b7ffe:	dc24      	bgt.n	b804a <_strtod_l+0x352>
   b8000:	2a49      	cmp	r2, #73	; 0x49
   b8002:	d024      	beq.n	b804e <_strtod_l+0x356>
   b8004:	2a4e      	cmp	r2, #78	; 0x4e
   b8006:	f47f aed9 	bne.w	b7dbc <_strtod_l+0xc4>
   b800a:	499f      	ldr	r1, [pc, #636]	; (b8288 <_strtod_l+0x590>)
   b800c:	a817      	add	r0, sp, #92	; 0x5c
   b800e:	f001 f88f 	bl	b9130 <__match>
   b8012:	2800      	cmp	r0, #0
   b8014:	f43f aed2 	beq.w	b7dbc <_strtod_l+0xc4>
   b8018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b801a:	781b      	ldrb	r3, [r3, #0]
   b801c:	2b28      	cmp	r3, #40	; 0x28
   b801e:	d12d      	bne.n	b807c <_strtod_l+0x384>
   b8020:	499a      	ldr	r1, [pc, #616]	; (b828c <_strtod_l+0x594>)
   b8022:	aa1a      	add	r2, sp, #104	; 0x68
   b8024:	a817      	add	r0, sp, #92	; 0x5c
   b8026:	f001 f897 	bl	b9158 <__hexnan>
   b802a:	2805      	cmp	r0, #5
   b802c:	d126      	bne.n	b807c <_strtod_l+0x384>
   b802e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b8030:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b8034:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b8038:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b803c:	e6a0      	b.n	b7d80 <_strtod_l+0x88>
   b803e:	210a      	movs	r1, #10
   b8040:	fb01 2e0e 	mla	lr, r1, lr, r2
   b8044:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b8048:	e7b9      	b.n	b7fbe <_strtod_l+0x2c6>
   b804a:	2a6e      	cmp	r2, #110	; 0x6e
   b804c:	e7db      	b.n	b8006 <_strtod_l+0x30e>
   b804e:	4990      	ldr	r1, [pc, #576]	; (b8290 <_strtod_l+0x598>)
   b8050:	a817      	add	r0, sp, #92	; 0x5c
   b8052:	f001 f86d 	bl	b9130 <__match>
   b8056:	2800      	cmp	r0, #0
   b8058:	f43f aeb0 	beq.w	b7dbc <_strtod_l+0xc4>
   b805c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b805e:	498d      	ldr	r1, [pc, #564]	; (b8294 <_strtod_l+0x59c>)
   b8060:	3b01      	subs	r3, #1
   b8062:	a817      	add	r0, sp, #92	; 0x5c
   b8064:	9317      	str	r3, [sp, #92]	; 0x5c
   b8066:	f001 f863 	bl	b9130 <__match>
   b806a:	b910      	cbnz	r0, b8072 <_strtod_l+0x37a>
   b806c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b806e:	3301      	adds	r3, #1
   b8070:	9317      	str	r3, [sp, #92]	; 0x5c
   b8072:	f8df b230 	ldr.w	fp, [pc, #560]	; b82a4 <_strtod_l+0x5ac>
   b8076:	f04f 0a00 	mov.w	sl, #0
   b807a:	e681      	b.n	b7d80 <_strtod_l+0x88>
   b807c:	4886      	ldr	r0, [pc, #536]	; (b8298 <_strtod_l+0x5a0>)
   b807e:	f001 fdef 	bl	b9c60 <nan>
   b8082:	ec5b ab10 	vmov	sl, fp, d0
   b8086:	e67b      	b.n	b7d80 <_strtod_l+0x88>
   b8088:	9b05      	ldr	r3, [sp, #20]
   b808a:	9807      	ldr	r0, [sp, #28]
   b808c:	1af3      	subs	r3, r6, r3
   b808e:	2f00      	cmp	r7, #0
   b8090:	bf08      	it	eq
   b8092:	462f      	moveq	r7, r5
   b8094:	2d10      	cmp	r5, #16
   b8096:	9306      	str	r3, [sp, #24]
   b8098:	46a8      	mov	r8, r5
   b809a:	bfa8      	it	ge
   b809c:	f04f 0810 	movge.w	r8, #16
   b80a0:	f7ff f9f8 	bl	b7494 <__aeabi_ui2d>
   b80a4:	2d09      	cmp	r5, #9
   b80a6:	4682      	mov	sl, r0
   b80a8:	468b      	mov	fp, r1
   b80aa:	dd13      	ble.n	b80d4 <_strtod_l+0x3dc>
   b80ac:	4b7b      	ldr	r3, [pc, #492]	; (b829c <_strtod_l+0x5a4>)
   b80ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b80b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b80b6:	f7ff fa67 	bl	b7588 <__aeabi_dmul>
   b80ba:	4682      	mov	sl, r0
   b80bc:	4648      	mov	r0, r9
   b80be:	468b      	mov	fp, r1
   b80c0:	f7ff f9e8 	bl	b7494 <__aeabi_ui2d>
   b80c4:	4602      	mov	r2, r0
   b80c6:	460b      	mov	r3, r1
   b80c8:	4650      	mov	r0, sl
   b80ca:	4659      	mov	r1, fp
   b80cc:	f7ff f8a6 	bl	b721c <__adddf3>
   b80d0:	4682      	mov	sl, r0
   b80d2:	468b      	mov	fp, r1
   b80d4:	2d0f      	cmp	r5, #15
   b80d6:	dc38      	bgt.n	b814a <_strtod_l+0x452>
   b80d8:	9b06      	ldr	r3, [sp, #24]
   b80da:	2b00      	cmp	r3, #0
   b80dc:	f43f ae50 	beq.w	b7d80 <_strtod_l+0x88>
   b80e0:	dd24      	ble.n	b812c <_strtod_l+0x434>
   b80e2:	2b16      	cmp	r3, #22
   b80e4:	dc0b      	bgt.n	b80fe <_strtod_l+0x406>
   b80e6:	496d      	ldr	r1, [pc, #436]	; (b829c <_strtod_l+0x5a4>)
   b80e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b80ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   b80f0:	4652      	mov	r2, sl
   b80f2:	465b      	mov	r3, fp
   b80f4:	f7ff fa48 	bl	b7588 <__aeabi_dmul>
   b80f8:	4682      	mov	sl, r0
   b80fa:	468b      	mov	fp, r1
   b80fc:	e640      	b.n	b7d80 <_strtod_l+0x88>
   b80fe:	9a06      	ldr	r2, [sp, #24]
   b8100:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b8104:	4293      	cmp	r3, r2
   b8106:	db20      	blt.n	b814a <_strtod_l+0x452>
   b8108:	4c64      	ldr	r4, [pc, #400]	; (b829c <_strtod_l+0x5a4>)
   b810a:	f1c5 050f 	rsb	r5, r5, #15
   b810e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b8112:	4652      	mov	r2, sl
   b8114:	465b      	mov	r3, fp
   b8116:	e9d1 0100 	ldrd	r0, r1, [r1]
   b811a:	f7ff fa35 	bl	b7588 <__aeabi_dmul>
   b811e:	9b06      	ldr	r3, [sp, #24]
   b8120:	1b5d      	subs	r5, r3, r5
   b8122:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b8126:	e9d4 2300 	ldrd	r2, r3, [r4]
   b812a:	e7e3      	b.n	b80f4 <_strtod_l+0x3fc>
   b812c:	9b06      	ldr	r3, [sp, #24]
   b812e:	3316      	adds	r3, #22
   b8130:	db0b      	blt.n	b814a <_strtod_l+0x452>
   b8132:	9b05      	ldr	r3, [sp, #20]
   b8134:	1b9e      	subs	r6, r3, r6
   b8136:	4b59      	ldr	r3, [pc, #356]	; (b829c <_strtod_l+0x5a4>)
   b8138:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b813c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b8140:	4650      	mov	r0, sl
   b8142:	4659      	mov	r1, fp
   b8144:	f7ff fb4a 	bl	b77dc <__aeabi_ddiv>
   b8148:	e7d6      	b.n	b80f8 <_strtod_l+0x400>
   b814a:	9b06      	ldr	r3, [sp, #24]
   b814c:	eba5 0808 	sub.w	r8, r5, r8
   b8150:	4498      	add	r8, r3
   b8152:	f1b8 0f00 	cmp.w	r8, #0
   b8156:	dd74      	ble.n	b8242 <_strtod_l+0x54a>
   b8158:	f018 030f 	ands.w	r3, r8, #15
   b815c:	d00a      	beq.n	b8174 <_strtod_l+0x47c>
   b815e:	494f      	ldr	r1, [pc, #316]	; (b829c <_strtod_l+0x5a4>)
   b8160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8164:	4652      	mov	r2, sl
   b8166:	465b      	mov	r3, fp
   b8168:	e9d1 0100 	ldrd	r0, r1, [r1]
   b816c:	f7ff fa0c 	bl	b7588 <__aeabi_dmul>
   b8170:	4682      	mov	sl, r0
   b8172:	468b      	mov	fp, r1
   b8174:	f038 080f 	bics.w	r8, r8, #15
   b8178:	d04f      	beq.n	b821a <_strtod_l+0x522>
   b817a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b817e:	dd22      	ble.n	b81c6 <_strtod_l+0x4ce>
   b8180:	2500      	movs	r5, #0
   b8182:	462e      	mov	r6, r5
   b8184:	9507      	str	r5, [sp, #28]
   b8186:	9505      	str	r5, [sp, #20]
   b8188:	2322      	movs	r3, #34	; 0x22
   b818a:	f8df b118 	ldr.w	fp, [pc, #280]	; b82a4 <_strtod_l+0x5ac>
   b818e:	6023      	str	r3, [r4, #0]
   b8190:	f04f 0a00 	mov.w	sl, #0
   b8194:	9b07      	ldr	r3, [sp, #28]
   b8196:	2b00      	cmp	r3, #0
   b8198:	f43f adf2 	beq.w	b7d80 <_strtod_l+0x88>
   b819c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b819e:	4620      	mov	r0, r4
   b81a0:	f001 f8cc 	bl	b933c <_Bfree>
   b81a4:	9905      	ldr	r1, [sp, #20]
   b81a6:	4620      	mov	r0, r4
   b81a8:	f001 f8c8 	bl	b933c <_Bfree>
   b81ac:	4631      	mov	r1, r6
   b81ae:	4620      	mov	r0, r4
   b81b0:	f001 f8c4 	bl	b933c <_Bfree>
   b81b4:	9907      	ldr	r1, [sp, #28]
   b81b6:	4620      	mov	r0, r4
   b81b8:	f001 f8c0 	bl	b933c <_Bfree>
   b81bc:	4629      	mov	r1, r5
   b81be:	4620      	mov	r0, r4
   b81c0:	f001 f8bc 	bl	b933c <_Bfree>
   b81c4:	e5dc      	b.n	b7d80 <_strtod_l+0x88>
   b81c6:	4b36      	ldr	r3, [pc, #216]	; (b82a0 <_strtod_l+0x5a8>)
   b81c8:	9304      	str	r3, [sp, #16]
   b81ca:	2300      	movs	r3, #0
   b81cc:	ea4f 1828 	mov.w	r8, r8, asr #4
   b81d0:	4650      	mov	r0, sl
   b81d2:	4659      	mov	r1, fp
   b81d4:	4699      	mov	r9, r3
   b81d6:	f1b8 0f01 	cmp.w	r8, #1
   b81da:	dc21      	bgt.n	b8220 <_strtod_l+0x528>
   b81dc:	b10b      	cbz	r3, b81e2 <_strtod_l+0x4ea>
   b81de:	4682      	mov	sl, r0
   b81e0:	468b      	mov	fp, r1
   b81e2:	4b2f      	ldr	r3, [pc, #188]	; (b82a0 <_strtod_l+0x5a8>)
   b81e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b81e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b81ec:	4652      	mov	r2, sl
   b81ee:	465b      	mov	r3, fp
   b81f0:	e9d9 0100 	ldrd	r0, r1, [r9]
   b81f4:	f7ff f9c8 	bl	b7588 <__aeabi_dmul>
   b81f8:	4b2a      	ldr	r3, [pc, #168]	; (b82a4 <_strtod_l+0x5ac>)
   b81fa:	460a      	mov	r2, r1
   b81fc:	400b      	ands	r3, r1
   b81fe:	492a      	ldr	r1, [pc, #168]	; (b82a8 <_strtod_l+0x5b0>)
   b8200:	428b      	cmp	r3, r1
   b8202:	4682      	mov	sl, r0
   b8204:	d8bc      	bhi.n	b8180 <_strtod_l+0x488>
   b8206:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b820a:	428b      	cmp	r3, r1
   b820c:	bf86      	itte	hi
   b820e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b82ac <_strtod_l+0x5b4>
   b8212:	f04f 3aff 	movhi.w	sl, #4294967295
   b8216:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b821a:	2300      	movs	r3, #0
   b821c:	9304      	str	r3, [sp, #16]
   b821e:	e084      	b.n	b832a <_strtod_l+0x632>
   b8220:	f018 0f01 	tst.w	r8, #1
   b8224:	d005      	beq.n	b8232 <_strtod_l+0x53a>
   b8226:	9b04      	ldr	r3, [sp, #16]
   b8228:	e9d3 2300 	ldrd	r2, r3, [r3]
   b822c:	f7ff f9ac 	bl	b7588 <__aeabi_dmul>
   b8230:	2301      	movs	r3, #1
   b8232:	9a04      	ldr	r2, [sp, #16]
   b8234:	3208      	adds	r2, #8
   b8236:	f109 0901 	add.w	r9, r9, #1
   b823a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b823e:	9204      	str	r2, [sp, #16]
   b8240:	e7c9      	b.n	b81d6 <_strtod_l+0x4de>
   b8242:	d0ea      	beq.n	b821a <_strtod_l+0x522>
   b8244:	f1c8 0800 	rsb	r8, r8, #0
   b8248:	f018 020f 	ands.w	r2, r8, #15
   b824c:	d00a      	beq.n	b8264 <_strtod_l+0x56c>
   b824e:	4b13      	ldr	r3, [pc, #76]	; (b829c <_strtod_l+0x5a4>)
   b8250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b8254:	4650      	mov	r0, sl
   b8256:	4659      	mov	r1, fp
   b8258:	e9d3 2300 	ldrd	r2, r3, [r3]
   b825c:	f7ff fabe 	bl	b77dc <__aeabi_ddiv>
   b8260:	4682      	mov	sl, r0
   b8262:	468b      	mov	fp, r1
   b8264:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8268:	d0d7      	beq.n	b821a <_strtod_l+0x522>
   b826a:	f1b8 0f1f 	cmp.w	r8, #31
   b826e:	dd1f      	ble.n	b82b0 <_strtod_l+0x5b8>
   b8270:	2500      	movs	r5, #0
   b8272:	462e      	mov	r6, r5
   b8274:	9507      	str	r5, [sp, #28]
   b8276:	9505      	str	r5, [sp, #20]
   b8278:	2322      	movs	r3, #34	; 0x22
   b827a:	f04f 0a00 	mov.w	sl, #0
   b827e:	f04f 0b00 	mov.w	fp, #0
   b8282:	6023      	str	r3, [r4, #0]
   b8284:	e786      	b.n	b8194 <_strtod_l+0x49c>
   b8286:	bf00      	nop
   b8288:	000ba2a6 	.word	0x000ba2a6
   b828c:	000ba2c0 	.word	0x000ba2c0
   b8290:	000ba29d 	.word	0x000ba29d
   b8294:	000ba2a0 	.word	0x000ba2a0
   b8298:	000b9d7c 	.word	0x000b9d7c
   b829c:	000ba5d8 	.word	0x000ba5d8
   b82a0:	000ba5b0 	.word	0x000ba5b0
   b82a4:	7ff00000 	.word	0x7ff00000
   b82a8:	7ca00000 	.word	0x7ca00000
   b82ac:	7fefffff 	.word	0x7fefffff
   b82b0:	f018 0310 	ands.w	r3, r8, #16
   b82b4:	bf18      	it	ne
   b82b6:	236a      	movne	r3, #106	; 0x6a
   b82b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8668 <_strtod_l+0x970>
   b82bc:	9304      	str	r3, [sp, #16]
   b82be:	4650      	mov	r0, sl
   b82c0:	4659      	mov	r1, fp
   b82c2:	2300      	movs	r3, #0
   b82c4:	f018 0f01 	tst.w	r8, #1
   b82c8:	d004      	beq.n	b82d4 <_strtod_l+0x5dc>
   b82ca:	e9d9 2300 	ldrd	r2, r3, [r9]
   b82ce:	f7ff f95b 	bl	b7588 <__aeabi_dmul>
   b82d2:	2301      	movs	r3, #1
   b82d4:	ea5f 0868 	movs.w	r8, r8, asr #1
   b82d8:	f109 0908 	add.w	r9, r9, #8
   b82dc:	d1f2      	bne.n	b82c4 <_strtod_l+0x5cc>
   b82de:	b10b      	cbz	r3, b82e4 <_strtod_l+0x5ec>
   b82e0:	4682      	mov	sl, r0
   b82e2:	468b      	mov	fp, r1
   b82e4:	9b04      	ldr	r3, [sp, #16]
   b82e6:	b1c3      	cbz	r3, b831a <_strtod_l+0x622>
   b82e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b82ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b82f0:	2b00      	cmp	r3, #0
   b82f2:	4659      	mov	r1, fp
   b82f4:	dd11      	ble.n	b831a <_strtod_l+0x622>
   b82f6:	2b1f      	cmp	r3, #31
   b82f8:	f340 8124 	ble.w	b8544 <_strtod_l+0x84c>
   b82fc:	2b34      	cmp	r3, #52	; 0x34
   b82fe:	bfde      	ittt	le
   b8300:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8304:	f04f 33ff 	movle.w	r3, #4294967295
   b8308:	fa03 f202 	lslle.w	r2, r3, r2
   b830c:	f04f 0a00 	mov.w	sl, #0
   b8310:	bfcc      	ite	gt
   b8312:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8316:	ea02 0b01 	andle.w	fp, r2, r1
   b831a:	2200      	movs	r2, #0
   b831c:	2300      	movs	r3, #0
   b831e:	4650      	mov	r0, sl
   b8320:	4659      	mov	r1, fp
   b8322:	f7ff fb99 	bl	b7a58 <__aeabi_dcmpeq>
   b8326:	2800      	cmp	r0, #0
   b8328:	d1a2      	bne.n	b8270 <_strtod_l+0x578>
   b832a:	9b07      	ldr	r3, [sp, #28]
   b832c:	9300      	str	r3, [sp, #0]
   b832e:	9908      	ldr	r1, [sp, #32]
   b8330:	462b      	mov	r3, r5
   b8332:	463a      	mov	r2, r7
   b8334:	4620      	mov	r0, r4
   b8336:	f001 f869 	bl	b940c <__s2b>
   b833a:	9007      	str	r0, [sp, #28]
   b833c:	2800      	cmp	r0, #0
   b833e:	f43f af1f 	beq.w	b8180 <_strtod_l+0x488>
   b8342:	9b05      	ldr	r3, [sp, #20]
   b8344:	1b9e      	subs	r6, r3, r6
   b8346:	9b06      	ldr	r3, [sp, #24]
   b8348:	2b00      	cmp	r3, #0
   b834a:	bfb4      	ite	lt
   b834c:	4633      	movlt	r3, r6
   b834e:	2300      	movge	r3, #0
   b8350:	930c      	str	r3, [sp, #48]	; 0x30
   b8352:	9b06      	ldr	r3, [sp, #24]
   b8354:	2500      	movs	r5, #0
   b8356:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b835a:	9312      	str	r3, [sp, #72]	; 0x48
   b835c:	462e      	mov	r6, r5
   b835e:	9b07      	ldr	r3, [sp, #28]
   b8360:	4620      	mov	r0, r4
   b8362:	6859      	ldr	r1, [r3, #4]
   b8364:	f000 ffaa 	bl	b92bc <_Balloc>
   b8368:	9005      	str	r0, [sp, #20]
   b836a:	2800      	cmp	r0, #0
   b836c:	f43f af0c 	beq.w	b8188 <_strtod_l+0x490>
   b8370:	9b07      	ldr	r3, [sp, #28]
   b8372:	691a      	ldr	r2, [r3, #16]
   b8374:	3202      	adds	r2, #2
   b8376:	f103 010c 	add.w	r1, r3, #12
   b837a:	0092      	lsls	r2, r2, #2
   b837c:	300c      	adds	r0, #12
   b837e:	f7ff fbfc 	bl	b7b7a <memcpy>
   b8382:	ec4b ab10 	vmov	d0, sl, fp
   b8386:	aa1a      	add	r2, sp, #104	; 0x68
   b8388:	a919      	add	r1, sp, #100	; 0x64
   b838a:	4620      	mov	r0, r4
   b838c:	f001 fb84 	bl	b9a98 <__d2b>
   b8390:	ec4b ab18 	vmov	d8, sl, fp
   b8394:	9018      	str	r0, [sp, #96]	; 0x60
   b8396:	2800      	cmp	r0, #0
   b8398:	f43f aef6 	beq.w	b8188 <_strtod_l+0x490>
   b839c:	2101      	movs	r1, #1
   b839e:	4620      	mov	r0, r4
   b83a0:	f001 f8ce 	bl	b9540 <__i2b>
   b83a4:	4606      	mov	r6, r0
   b83a6:	2800      	cmp	r0, #0
   b83a8:	f43f aeee 	beq.w	b8188 <_strtod_l+0x490>
   b83ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b83ae:	9904      	ldr	r1, [sp, #16]
   b83b0:	2b00      	cmp	r3, #0
   b83b2:	bfab      	itete	ge
   b83b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b83b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b83b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b83ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b83be:	bfac      	ite	ge
   b83c0:	eb03 0902 	addge.w	r9, r3, r2
   b83c4:	1ad7      	sublt	r7, r2, r3
   b83c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b83c8:	eba3 0801 	sub.w	r8, r3, r1
   b83cc:	4490      	add	r8, r2
   b83ce:	4ba1      	ldr	r3, [pc, #644]	; (b8654 <_strtod_l+0x95c>)
   b83d0:	f108 38ff 	add.w	r8, r8, #4294967295
   b83d4:	4598      	cmp	r8, r3
   b83d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b83da:	f280 80c7 	bge.w	b856c <_strtod_l+0x874>
   b83de:	eba3 0308 	sub.w	r3, r3, r8
   b83e2:	2b1f      	cmp	r3, #31
   b83e4:	eba2 0203 	sub.w	r2, r2, r3
   b83e8:	f04f 0101 	mov.w	r1, #1
   b83ec:	f300 80b1 	bgt.w	b8552 <_strtod_l+0x85a>
   b83f0:	fa01 f303 	lsl.w	r3, r1, r3
   b83f4:	930d      	str	r3, [sp, #52]	; 0x34
   b83f6:	2300      	movs	r3, #0
   b83f8:	9308      	str	r3, [sp, #32]
   b83fa:	eb09 0802 	add.w	r8, r9, r2
   b83fe:	9b04      	ldr	r3, [sp, #16]
   b8400:	45c1      	cmp	r9, r8
   b8402:	4417      	add	r7, r2
   b8404:	441f      	add	r7, r3
   b8406:	464b      	mov	r3, r9
   b8408:	bfa8      	it	ge
   b840a:	4643      	movge	r3, r8
   b840c:	42bb      	cmp	r3, r7
   b840e:	bfa8      	it	ge
   b8410:	463b      	movge	r3, r7
   b8412:	2b00      	cmp	r3, #0
   b8414:	bfc2      	ittt	gt
   b8416:	eba8 0803 	subgt.w	r8, r8, r3
   b841a:	1aff      	subgt	r7, r7, r3
   b841c:	eba9 0903 	subgt.w	r9, r9, r3
   b8420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8422:	2b00      	cmp	r3, #0
   b8424:	dd17      	ble.n	b8456 <_strtod_l+0x75e>
   b8426:	4631      	mov	r1, r6
   b8428:	461a      	mov	r2, r3
   b842a:	4620      	mov	r0, r4
   b842c:	f001 f948 	bl	b96c0 <__pow5mult>
   b8430:	4606      	mov	r6, r0
   b8432:	2800      	cmp	r0, #0
   b8434:	f43f aea8 	beq.w	b8188 <_strtod_l+0x490>
   b8438:	4601      	mov	r1, r0
   b843a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b843c:	4620      	mov	r0, r4
   b843e:	f001 f895 	bl	b956c <__multiply>
   b8442:	900b      	str	r0, [sp, #44]	; 0x2c
   b8444:	2800      	cmp	r0, #0
   b8446:	f43f ae9f 	beq.w	b8188 <_strtod_l+0x490>
   b844a:	9918      	ldr	r1, [sp, #96]	; 0x60
   b844c:	4620      	mov	r0, r4
   b844e:	f000 ff75 	bl	b933c <_Bfree>
   b8452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8454:	9318      	str	r3, [sp, #96]	; 0x60
   b8456:	f1b8 0f00 	cmp.w	r8, #0
   b845a:	f300 808c 	bgt.w	b8576 <_strtod_l+0x87e>
   b845e:	9b06      	ldr	r3, [sp, #24]
   b8460:	2b00      	cmp	r3, #0
   b8462:	dd08      	ble.n	b8476 <_strtod_l+0x77e>
   b8464:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8466:	9905      	ldr	r1, [sp, #20]
   b8468:	4620      	mov	r0, r4
   b846a:	f001 f929 	bl	b96c0 <__pow5mult>
   b846e:	9005      	str	r0, [sp, #20]
   b8470:	2800      	cmp	r0, #0
   b8472:	f43f ae89 	beq.w	b8188 <_strtod_l+0x490>
   b8476:	2f00      	cmp	r7, #0
   b8478:	dd08      	ble.n	b848c <_strtod_l+0x794>
   b847a:	9905      	ldr	r1, [sp, #20]
   b847c:	463a      	mov	r2, r7
   b847e:	4620      	mov	r0, r4
   b8480:	f001 f978 	bl	b9774 <__lshift>
   b8484:	9005      	str	r0, [sp, #20]
   b8486:	2800      	cmp	r0, #0
   b8488:	f43f ae7e 	beq.w	b8188 <_strtod_l+0x490>
   b848c:	f1b9 0f00 	cmp.w	r9, #0
   b8490:	dd08      	ble.n	b84a4 <_strtod_l+0x7ac>
   b8492:	4631      	mov	r1, r6
   b8494:	464a      	mov	r2, r9
   b8496:	4620      	mov	r0, r4
   b8498:	f001 f96c 	bl	b9774 <__lshift>
   b849c:	4606      	mov	r6, r0
   b849e:	2800      	cmp	r0, #0
   b84a0:	f43f ae72 	beq.w	b8188 <_strtod_l+0x490>
   b84a4:	9a05      	ldr	r2, [sp, #20]
   b84a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b84a8:	4620      	mov	r0, r4
   b84aa:	f001 f9ef 	bl	b988c <__mdiff>
   b84ae:	4605      	mov	r5, r0
   b84b0:	2800      	cmp	r0, #0
   b84b2:	f43f ae69 	beq.w	b8188 <_strtod_l+0x490>
   b84b6:	68c3      	ldr	r3, [r0, #12]
   b84b8:	930b      	str	r3, [sp, #44]	; 0x2c
   b84ba:	2300      	movs	r3, #0
   b84bc:	60c3      	str	r3, [r0, #12]
   b84be:	4631      	mov	r1, r6
   b84c0:	f001 f9c8 	bl	b9854 <__mcmp>
   b84c4:	2800      	cmp	r0, #0
   b84c6:	da60      	bge.n	b858a <_strtod_l+0x892>
   b84c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b84ca:	ea53 030a 	orrs.w	r3, r3, sl
   b84ce:	f040 8082 	bne.w	b85d6 <_strtod_l+0x8de>
   b84d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b84d6:	2b00      	cmp	r3, #0
   b84d8:	d17d      	bne.n	b85d6 <_strtod_l+0x8de>
   b84da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b84de:	0d1b      	lsrs	r3, r3, #20
   b84e0:	051b      	lsls	r3, r3, #20
   b84e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b84e6:	d976      	bls.n	b85d6 <_strtod_l+0x8de>
   b84e8:	696b      	ldr	r3, [r5, #20]
   b84ea:	b913      	cbnz	r3, b84f2 <_strtod_l+0x7fa>
   b84ec:	692b      	ldr	r3, [r5, #16]
   b84ee:	2b01      	cmp	r3, #1
   b84f0:	dd71      	ble.n	b85d6 <_strtod_l+0x8de>
   b84f2:	4629      	mov	r1, r5
   b84f4:	2201      	movs	r2, #1
   b84f6:	4620      	mov	r0, r4
   b84f8:	f001 f93c 	bl	b9774 <__lshift>
   b84fc:	4631      	mov	r1, r6
   b84fe:	4605      	mov	r5, r0
   b8500:	f001 f9a8 	bl	b9854 <__mcmp>
   b8504:	2800      	cmp	r0, #0
   b8506:	dd66      	ble.n	b85d6 <_strtod_l+0x8de>
   b8508:	9904      	ldr	r1, [sp, #16]
   b850a:	4a53      	ldr	r2, [pc, #332]	; (b8658 <_strtod_l+0x960>)
   b850c:	465b      	mov	r3, fp
   b850e:	2900      	cmp	r1, #0
   b8510:	f000 8081 	beq.w	b8616 <_strtod_l+0x91e>
   b8514:	ea02 010b 	and.w	r1, r2, fp
   b8518:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b851c:	dc7b      	bgt.n	b8616 <_strtod_l+0x91e>
   b851e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8522:	f77f aea9 	ble.w	b8278 <_strtod_l+0x580>
   b8526:	4b4d      	ldr	r3, [pc, #308]	; (b865c <_strtod_l+0x964>)
   b8528:	4650      	mov	r0, sl
   b852a:	4659      	mov	r1, fp
   b852c:	2200      	movs	r2, #0
   b852e:	f7ff f82b 	bl	b7588 <__aeabi_dmul>
   b8532:	460b      	mov	r3, r1
   b8534:	4303      	orrs	r3, r0
   b8536:	bf08      	it	eq
   b8538:	2322      	moveq	r3, #34	; 0x22
   b853a:	4682      	mov	sl, r0
   b853c:	468b      	mov	fp, r1
   b853e:	bf08      	it	eq
   b8540:	6023      	streq	r3, [r4, #0]
   b8542:	e62b      	b.n	b819c <_strtod_l+0x4a4>
   b8544:	f04f 32ff 	mov.w	r2, #4294967295
   b8548:	fa02 f303 	lsl.w	r3, r2, r3
   b854c:	ea03 0a0a 	and.w	sl, r3, sl
   b8550:	e6e3      	b.n	b831a <_strtod_l+0x622>
   b8552:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8556:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b855a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b855e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8562:	fa01 f308 	lsl.w	r3, r1, r8
   b8566:	9308      	str	r3, [sp, #32]
   b8568:	910d      	str	r1, [sp, #52]	; 0x34
   b856a:	e746      	b.n	b83fa <_strtod_l+0x702>
   b856c:	2300      	movs	r3, #0
   b856e:	9308      	str	r3, [sp, #32]
   b8570:	2301      	movs	r3, #1
   b8572:	930d      	str	r3, [sp, #52]	; 0x34
   b8574:	e741      	b.n	b83fa <_strtod_l+0x702>
   b8576:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8578:	4642      	mov	r2, r8
   b857a:	4620      	mov	r0, r4
   b857c:	f001 f8fa 	bl	b9774 <__lshift>
   b8580:	9018      	str	r0, [sp, #96]	; 0x60
   b8582:	2800      	cmp	r0, #0
   b8584:	f47f af6b 	bne.w	b845e <_strtod_l+0x766>
   b8588:	e5fe      	b.n	b8188 <_strtod_l+0x490>
   b858a:	465f      	mov	r7, fp
   b858c:	d16e      	bne.n	b866c <_strtod_l+0x974>
   b858e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8590:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8594:	b342      	cbz	r2, b85e8 <_strtod_l+0x8f0>
   b8596:	4a32      	ldr	r2, [pc, #200]	; (b8660 <_strtod_l+0x968>)
   b8598:	4293      	cmp	r3, r2
   b859a:	d128      	bne.n	b85ee <_strtod_l+0x8f6>
   b859c:	9b04      	ldr	r3, [sp, #16]
   b859e:	4651      	mov	r1, sl
   b85a0:	b1eb      	cbz	r3, b85de <_strtod_l+0x8e6>
   b85a2:	4b2d      	ldr	r3, [pc, #180]	; (b8658 <_strtod_l+0x960>)
   b85a4:	403b      	ands	r3, r7
   b85a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b85aa:	f04f 32ff 	mov.w	r2, #4294967295
   b85ae:	d819      	bhi.n	b85e4 <_strtod_l+0x8ec>
   b85b0:	0d1b      	lsrs	r3, r3, #20
   b85b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b85b6:	fa02 f303 	lsl.w	r3, r2, r3
   b85ba:	4299      	cmp	r1, r3
   b85bc:	d117      	bne.n	b85ee <_strtod_l+0x8f6>
   b85be:	4b29      	ldr	r3, [pc, #164]	; (b8664 <_strtod_l+0x96c>)
   b85c0:	429f      	cmp	r7, r3
   b85c2:	d102      	bne.n	b85ca <_strtod_l+0x8d2>
   b85c4:	3101      	adds	r1, #1
   b85c6:	f43f addf 	beq.w	b8188 <_strtod_l+0x490>
   b85ca:	4b23      	ldr	r3, [pc, #140]	; (b8658 <_strtod_l+0x960>)
   b85cc:	403b      	ands	r3, r7
   b85ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b85d2:	f04f 0a00 	mov.w	sl, #0
   b85d6:	9b04      	ldr	r3, [sp, #16]
   b85d8:	2b00      	cmp	r3, #0
   b85da:	d1a4      	bne.n	b8526 <_strtod_l+0x82e>
   b85dc:	e5de      	b.n	b819c <_strtod_l+0x4a4>
   b85de:	f04f 33ff 	mov.w	r3, #4294967295
   b85e2:	e7ea      	b.n	b85ba <_strtod_l+0x8c2>
   b85e4:	4613      	mov	r3, r2
   b85e6:	e7e8      	b.n	b85ba <_strtod_l+0x8c2>
   b85e8:	ea53 030a 	orrs.w	r3, r3, sl
   b85ec:	d08c      	beq.n	b8508 <_strtod_l+0x810>
   b85ee:	9b08      	ldr	r3, [sp, #32]
   b85f0:	b1db      	cbz	r3, b862a <_strtod_l+0x932>
   b85f2:	423b      	tst	r3, r7
   b85f4:	d0ef      	beq.n	b85d6 <_strtod_l+0x8de>
   b85f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b85f8:	9a04      	ldr	r2, [sp, #16]
   b85fa:	4650      	mov	r0, sl
   b85fc:	4659      	mov	r1, fp
   b85fe:	b1c3      	cbz	r3, b8632 <_strtod_l+0x93a>
   b8600:	f7ff fb5b 	bl	b7cba <sulp>
   b8604:	4602      	mov	r2, r0
   b8606:	460b      	mov	r3, r1
   b8608:	ec51 0b18 	vmov	r0, r1, d8
   b860c:	f7fe fe06 	bl	b721c <__adddf3>
   b8610:	4682      	mov	sl, r0
   b8612:	468b      	mov	fp, r1
   b8614:	e7df      	b.n	b85d6 <_strtod_l+0x8de>
   b8616:	4013      	ands	r3, r2
   b8618:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b861c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8620:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8624:	f04f 3aff 	mov.w	sl, #4294967295
   b8628:	e7d5      	b.n	b85d6 <_strtod_l+0x8de>
   b862a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b862c:	ea13 0f0a 	tst.w	r3, sl
   b8630:	e7e0      	b.n	b85f4 <_strtod_l+0x8fc>
   b8632:	f7ff fb42 	bl	b7cba <sulp>
   b8636:	4602      	mov	r2, r0
   b8638:	460b      	mov	r3, r1
   b863a:	ec51 0b18 	vmov	r0, r1, d8
   b863e:	f7fe fdeb 	bl	b7218 <__aeabi_dsub>
   b8642:	2200      	movs	r2, #0
   b8644:	2300      	movs	r3, #0
   b8646:	4682      	mov	sl, r0
   b8648:	468b      	mov	fp, r1
   b864a:	f7ff fa05 	bl	b7a58 <__aeabi_dcmpeq>
   b864e:	2800      	cmp	r0, #0
   b8650:	d0c1      	beq.n	b85d6 <_strtod_l+0x8de>
   b8652:	e611      	b.n	b8278 <_strtod_l+0x580>
   b8654:	fffffc02 	.word	0xfffffc02
   b8658:	7ff00000 	.word	0x7ff00000
   b865c:	39500000 	.word	0x39500000
   b8660:	000fffff 	.word	0x000fffff
   b8664:	7fefffff 	.word	0x7fefffff
   b8668:	000ba2d8 	.word	0x000ba2d8
   b866c:	4631      	mov	r1, r6
   b866e:	4628      	mov	r0, r5
   b8670:	f001 fa6e 	bl	b9b50 <__ratio>
   b8674:	ec59 8b10 	vmov	r8, r9, d0
   b8678:	ee10 0a10 	vmov	r0, s0
   b867c:	2200      	movs	r2, #0
   b867e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8682:	4649      	mov	r1, r9
   b8684:	f7ff f9fc 	bl	b7a80 <__aeabi_dcmple>
   b8688:	2800      	cmp	r0, #0
   b868a:	d07a      	beq.n	b8782 <_strtod_l+0xa8a>
   b868c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b868e:	2b00      	cmp	r3, #0
   b8690:	d04a      	beq.n	b8728 <_strtod_l+0xa30>
   b8692:	4b95      	ldr	r3, [pc, #596]	; (b88e8 <_strtod_l+0xbf0>)
   b8694:	2200      	movs	r2, #0
   b8696:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b869a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b88e8 <_strtod_l+0xbf0>
   b869e:	f04f 0800 	mov.w	r8, #0
   b86a2:	4b92      	ldr	r3, [pc, #584]	; (b88ec <_strtod_l+0xbf4>)
   b86a4:	403b      	ands	r3, r7
   b86a6:	930d      	str	r3, [sp, #52]	; 0x34
   b86a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b86aa:	4b91      	ldr	r3, [pc, #580]	; (b88f0 <_strtod_l+0xbf8>)
   b86ac:	429a      	cmp	r2, r3
   b86ae:	f040 80b0 	bne.w	b8812 <_strtod_l+0xb1a>
   b86b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b86b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b86ba:	ec4b ab10 	vmov	d0, sl, fp
   b86be:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b86c2:	f001 f96d 	bl	b99a0 <__ulp>
   b86c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b86ca:	ec53 2b10 	vmov	r2, r3, d0
   b86ce:	f7fe ff5b 	bl	b7588 <__aeabi_dmul>
   b86d2:	4652      	mov	r2, sl
   b86d4:	465b      	mov	r3, fp
   b86d6:	f7fe fda1 	bl	b721c <__adddf3>
   b86da:	460b      	mov	r3, r1
   b86dc:	4983      	ldr	r1, [pc, #524]	; (b88ec <_strtod_l+0xbf4>)
   b86de:	4a85      	ldr	r2, [pc, #532]	; (b88f4 <_strtod_l+0xbfc>)
   b86e0:	4019      	ands	r1, r3
   b86e2:	4291      	cmp	r1, r2
   b86e4:	4682      	mov	sl, r0
   b86e6:	d960      	bls.n	b87aa <_strtod_l+0xab2>
   b86e8:	ee18 3a90 	vmov	r3, s17
   b86ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b86f0:	4293      	cmp	r3, r2
   b86f2:	d104      	bne.n	b86fe <_strtod_l+0xa06>
   b86f4:	ee18 3a10 	vmov	r3, s16
   b86f8:	3301      	adds	r3, #1
   b86fa:	f43f ad45 	beq.w	b8188 <_strtod_l+0x490>
   b86fe:	f8df b200 	ldr.w	fp, [pc, #512]	; b8900 <_strtod_l+0xc08>
   b8702:	f04f 3aff 	mov.w	sl, #4294967295
   b8706:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8708:	4620      	mov	r0, r4
   b870a:	f000 fe17 	bl	b933c <_Bfree>
   b870e:	9905      	ldr	r1, [sp, #20]
   b8710:	4620      	mov	r0, r4
   b8712:	f000 fe13 	bl	b933c <_Bfree>
   b8716:	4631      	mov	r1, r6
   b8718:	4620      	mov	r0, r4
   b871a:	f000 fe0f 	bl	b933c <_Bfree>
   b871e:	4629      	mov	r1, r5
   b8720:	4620      	mov	r0, r4
   b8722:	f000 fe0b 	bl	b933c <_Bfree>
   b8726:	e61a      	b.n	b835e <_strtod_l+0x666>
   b8728:	f1ba 0f00 	cmp.w	sl, #0
   b872c:	d11b      	bne.n	b8766 <_strtod_l+0xa6e>
   b872e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8732:	b9f3      	cbnz	r3, b8772 <_strtod_l+0xa7a>
   b8734:	4b6c      	ldr	r3, [pc, #432]	; (b88e8 <_strtod_l+0xbf0>)
   b8736:	2200      	movs	r2, #0
   b8738:	4640      	mov	r0, r8
   b873a:	4649      	mov	r1, r9
   b873c:	f7ff f996 	bl	b7a6c <__aeabi_dcmplt>
   b8740:	b9d0      	cbnz	r0, b8778 <_strtod_l+0xa80>
   b8742:	4640      	mov	r0, r8
   b8744:	4649      	mov	r1, r9
   b8746:	4b6c      	ldr	r3, [pc, #432]	; (b88f8 <_strtod_l+0xc00>)
   b8748:	2200      	movs	r2, #0
   b874a:	f7fe ff1d 	bl	b7588 <__aeabi_dmul>
   b874e:	4680      	mov	r8, r0
   b8750:	4689      	mov	r9, r1
   b8752:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b8756:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b875a:	9315      	str	r3, [sp, #84]	; 0x54
   b875c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b8760:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8764:	e79d      	b.n	b86a2 <_strtod_l+0x9aa>
   b8766:	f1ba 0f01 	cmp.w	sl, #1
   b876a:	d102      	bne.n	b8772 <_strtod_l+0xa7a>
   b876c:	2f00      	cmp	r7, #0
   b876e:	f43f ad83 	beq.w	b8278 <_strtod_l+0x580>
   b8772:	4b62      	ldr	r3, [pc, #392]	; (b88fc <_strtod_l+0xc04>)
   b8774:	2200      	movs	r2, #0
   b8776:	e78e      	b.n	b8696 <_strtod_l+0x99e>
   b8778:	f8df 917c 	ldr.w	r9, [pc, #380]	; b88f8 <_strtod_l+0xc00>
   b877c:	f04f 0800 	mov.w	r8, #0
   b8780:	e7e7      	b.n	b8752 <_strtod_l+0xa5a>
   b8782:	4b5d      	ldr	r3, [pc, #372]	; (b88f8 <_strtod_l+0xc00>)
   b8784:	4640      	mov	r0, r8
   b8786:	4649      	mov	r1, r9
   b8788:	2200      	movs	r2, #0
   b878a:	f7fe fefd 	bl	b7588 <__aeabi_dmul>
   b878e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8790:	4680      	mov	r8, r0
   b8792:	4689      	mov	r9, r1
   b8794:	b933      	cbnz	r3, b87a4 <_strtod_l+0xaac>
   b8796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b879a:	900e      	str	r0, [sp, #56]	; 0x38
   b879c:	930f      	str	r3, [sp, #60]	; 0x3c
   b879e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b87a2:	e7dd      	b.n	b8760 <_strtod_l+0xa68>
   b87a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b87a8:	e7f9      	b.n	b879e <_strtod_l+0xaa6>
   b87aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b87ae:	9b04      	ldr	r3, [sp, #16]
   b87b0:	2b00      	cmp	r3, #0
   b87b2:	d1a8      	bne.n	b8706 <_strtod_l+0xa0e>
   b87b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b87b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b87ba:	0d1b      	lsrs	r3, r3, #20
   b87bc:	051b      	lsls	r3, r3, #20
   b87be:	429a      	cmp	r2, r3
   b87c0:	d1a1      	bne.n	b8706 <_strtod_l+0xa0e>
   b87c2:	4640      	mov	r0, r8
   b87c4:	4649      	mov	r1, r9
   b87c6:	f001 fa61 	bl	b9c8c <__aeabi_d2lz>
   b87ca:	f7fe feaf 	bl	b752c <__aeabi_l2d>
   b87ce:	4602      	mov	r2, r0
   b87d0:	460b      	mov	r3, r1
   b87d2:	4640      	mov	r0, r8
   b87d4:	4649      	mov	r1, r9
   b87d6:	f7fe fd1f 	bl	b7218 <__aeabi_dsub>
   b87da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b87dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b87e0:	ea43 030a 	orr.w	r3, r3, sl
   b87e4:	4313      	orrs	r3, r2
   b87e6:	4680      	mov	r8, r0
   b87e8:	4689      	mov	r9, r1
   b87ea:	d055      	beq.n	b8898 <_strtod_l+0xba0>
   b87ec:	a336      	add	r3, pc, #216	; (adr r3, b88c8 <_strtod_l+0xbd0>)
   b87ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87f2:	f7ff f93b 	bl	b7a6c <__aeabi_dcmplt>
   b87f6:	2800      	cmp	r0, #0
   b87f8:	f47f acd0 	bne.w	b819c <_strtod_l+0x4a4>
   b87fc:	a334      	add	r3, pc, #208	; (adr r3, b88d0 <_strtod_l+0xbd8>)
   b87fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8802:	4640      	mov	r0, r8
   b8804:	4649      	mov	r1, r9
   b8806:	f7ff f94f 	bl	b7aa8 <__aeabi_dcmpgt>
   b880a:	2800      	cmp	r0, #0
   b880c:	f43f af7b 	beq.w	b8706 <_strtod_l+0xa0e>
   b8810:	e4c4      	b.n	b819c <_strtod_l+0x4a4>
   b8812:	9b04      	ldr	r3, [sp, #16]
   b8814:	b333      	cbz	r3, b8864 <_strtod_l+0xb6c>
   b8816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8818:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b881c:	d822      	bhi.n	b8864 <_strtod_l+0xb6c>
   b881e:	a32e      	add	r3, pc, #184	; (adr r3, b88d8 <_strtod_l+0xbe0>)
   b8820:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8824:	4640      	mov	r0, r8
   b8826:	4649      	mov	r1, r9
   b8828:	f7ff f92a 	bl	b7a80 <__aeabi_dcmple>
   b882c:	b1a0      	cbz	r0, b8858 <_strtod_l+0xb60>
   b882e:	4649      	mov	r1, r9
   b8830:	4640      	mov	r0, r8
   b8832:	f7ff f943 	bl	b7abc <__aeabi_d2uiz>
   b8836:	2801      	cmp	r0, #1
   b8838:	bf38      	it	cc
   b883a:	2001      	movcc	r0, #1
   b883c:	f7fe fe2a 	bl	b7494 <__aeabi_ui2d>
   b8840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8842:	4680      	mov	r8, r0
   b8844:	4689      	mov	r9, r1
   b8846:	bb23      	cbnz	r3, b8892 <_strtod_l+0xb9a>
   b8848:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b884c:	9010      	str	r0, [sp, #64]	; 0x40
   b884e:	9311      	str	r3, [sp, #68]	; 0x44
   b8850:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b8854:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8858:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b885a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b885c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b8860:	1a9b      	subs	r3, r3, r2
   b8862:	9309      	str	r3, [sp, #36]	; 0x24
   b8864:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8868:	eeb0 0a48 	vmov.f32	s0, s16
   b886c:	eef0 0a68 	vmov.f32	s1, s17
   b8870:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8874:	f001 f894 	bl	b99a0 <__ulp>
   b8878:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b887c:	ec53 2b10 	vmov	r2, r3, d0
   b8880:	f7fe fe82 	bl	b7588 <__aeabi_dmul>
   b8884:	ec53 2b18 	vmov	r2, r3, d8
   b8888:	f7fe fcc8 	bl	b721c <__adddf3>
   b888c:	4682      	mov	sl, r0
   b888e:	468b      	mov	fp, r1
   b8890:	e78d      	b.n	b87ae <_strtod_l+0xab6>
   b8892:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b8896:	e7db      	b.n	b8850 <_strtod_l+0xb58>
   b8898:	a311      	add	r3, pc, #68	; (adr r3, b88e0 <_strtod_l+0xbe8>)
   b889a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b889e:	f7ff f8e5 	bl	b7a6c <__aeabi_dcmplt>
   b88a2:	e7b2      	b.n	b880a <_strtod_l+0xb12>
   b88a4:	2300      	movs	r3, #0
   b88a6:	930a      	str	r3, [sp, #40]	; 0x28
   b88a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b88aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b88ac:	6013      	str	r3, [r2, #0]
   b88ae:	f7ff ba6b 	b.w	b7d88 <_strtod_l+0x90>
   b88b2:	2a65      	cmp	r2, #101	; 0x65
   b88b4:	f43f ab5f 	beq.w	b7f76 <_strtod_l+0x27e>
   b88b8:	2a45      	cmp	r2, #69	; 0x45
   b88ba:	f43f ab5c 	beq.w	b7f76 <_strtod_l+0x27e>
   b88be:	2301      	movs	r3, #1
   b88c0:	f7ff bb94 	b.w	b7fec <_strtod_l+0x2f4>
   b88c4:	f3af 8000 	nop.w
   b88c8:	94a03595 	.word	0x94a03595
   b88cc:	3fdfffff 	.word	0x3fdfffff
   b88d0:	35afe535 	.word	0x35afe535
   b88d4:	3fe00000 	.word	0x3fe00000
   b88d8:	ffc00000 	.word	0xffc00000
   b88dc:	41dfffff 	.word	0x41dfffff
   b88e0:	94a03595 	.word	0x94a03595
   b88e4:	3fcfffff 	.word	0x3fcfffff
   b88e8:	3ff00000 	.word	0x3ff00000
   b88ec:	7ff00000 	.word	0x7ff00000
   b88f0:	7fe00000 	.word	0x7fe00000
   b88f4:	7c9fffff 	.word	0x7c9fffff
   b88f8:	3fe00000 	.word	0x3fe00000
   b88fc:	bff00000 	.word	0xbff00000
   b8900:	7fefffff 	.word	0x7fefffff

000b8904 <strtod>:
   b8904:	460a      	mov	r2, r1
   b8906:	4601      	mov	r1, r0
   b8908:	4802      	ldr	r0, [pc, #8]	; (b8914 <strtod+0x10>)
   b890a:	4b03      	ldr	r3, [pc, #12]	; (b8918 <strtod+0x14>)
   b890c:	6800      	ldr	r0, [r0, #0]
   b890e:	f7ff b9f3 	b.w	b7cf8 <_strtod_l>
   b8912:	bf00      	nop
   b8914:	2003d774 	.word	0x2003d774
   b8918:	2003d7e0 	.word	0x2003d7e0

000b891c <strtok>:
   b891c:	4b16      	ldr	r3, [pc, #88]	; (b8978 <strtok+0x5c>)
   b891e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8920:	681e      	ldr	r6, [r3, #0]
   b8922:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b8924:	4605      	mov	r5, r0
   b8926:	b9fc      	cbnz	r4, b8968 <strtok+0x4c>
   b8928:	2050      	movs	r0, #80	; 0x50
   b892a:	9101      	str	r1, [sp, #4]
   b892c:	f7fc fe34 	bl	b5598 <malloc>
   b8930:	9901      	ldr	r1, [sp, #4]
   b8932:	65b0      	str	r0, [r6, #88]	; 0x58
   b8934:	4602      	mov	r2, r0
   b8936:	b920      	cbnz	r0, b8942 <strtok+0x26>
   b8938:	4b10      	ldr	r3, [pc, #64]	; (b897c <strtok+0x60>)
   b893a:	4811      	ldr	r0, [pc, #68]	; (b8980 <strtok+0x64>)
   b893c:	2157      	movs	r1, #87	; 0x57
   b893e:	f7fc fe73 	bl	b5628 <__assert_func>
   b8942:	e9c0 4400 	strd	r4, r4, [r0]
   b8946:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b894a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b894e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b8952:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b8956:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b895a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b895e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b8962:	6184      	str	r4, [r0, #24]
   b8964:	7704      	strb	r4, [r0, #28]
   b8966:	6244      	str	r4, [r0, #36]	; 0x24
   b8968:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b896a:	2301      	movs	r3, #1
   b896c:	4628      	mov	r0, r5
   b896e:	b002      	add	sp, #8
   b8970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8974:	f000 b806 	b.w	b8984 <__strtok_r>
   b8978:	2003d774 	.word	0x2003d774
   b897c:	000ba209 	.word	0x000ba209
   b8980:	000ba300 	.word	0x000ba300

000b8984 <__strtok_r>:
   b8984:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8986:	b908      	cbnz	r0, b898c <__strtok_r+0x8>
   b8988:	6810      	ldr	r0, [r2, #0]
   b898a:	b188      	cbz	r0, b89b0 <__strtok_r+0x2c>
   b898c:	4604      	mov	r4, r0
   b898e:	4620      	mov	r0, r4
   b8990:	f814 5b01 	ldrb.w	r5, [r4], #1
   b8994:	460f      	mov	r7, r1
   b8996:	f817 6b01 	ldrb.w	r6, [r7], #1
   b899a:	b91e      	cbnz	r6, b89a4 <__strtok_r+0x20>
   b899c:	b965      	cbnz	r5, b89b8 <__strtok_r+0x34>
   b899e:	6015      	str	r5, [r2, #0]
   b89a0:	4628      	mov	r0, r5
   b89a2:	e005      	b.n	b89b0 <__strtok_r+0x2c>
   b89a4:	42b5      	cmp	r5, r6
   b89a6:	d1f6      	bne.n	b8996 <__strtok_r+0x12>
   b89a8:	2b00      	cmp	r3, #0
   b89aa:	d1f0      	bne.n	b898e <__strtok_r+0xa>
   b89ac:	6014      	str	r4, [r2, #0]
   b89ae:	7003      	strb	r3, [r0, #0]
   b89b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b89b2:	461c      	mov	r4, r3
   b89b4:	e00c      	b.n	b89d0 <__strtok_r+0x4c>
   b89b6:	b915      	cbnz	r5, b89be <__strtok_r+0x3a>
   b89b8:	f814 3b01 	ldrb.w	r3, [r4], #1
   b89bc:	460e      	mov	r6, r1
   b89be:	f816 5b01 	ldrb.w	r5, [r6], #1
   b89c2:	42ab      	cmp	r3, r5
   b89c4:	d1f7      	bne.n	b89b6 <__strtok_r+0x32>
   b89c6:	2b00      	cmp	r3, #0
   b89c8:	d0f3      	beq.n	b89b2 <__strtok_r+0x2e>
   b89ca:	2300      	movs	r3, #0
   b89cc:	f804 3c01 	strb.w	r3, [r4, #-1]
   b89d0:	6014      	str	r4, [r2, #0]
   b89d2:	e7ed      	b.n	b89b0 <__strtok_r+0x2c>

000b89d4 <_strtol_l.constprop.0>:
   b89d4:	2b01      	cmp	r3, #1
   b89d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b89da:	d001      	beq.n	b89e0 <_strtol_l.constprop.0+0xc>
   b89dc:	2b24      	cmp	r3, #36	; 0x24
   b89de:	d906      	bls.n	b89ee <_strtol_l.constprop.0+0x1a>
   b89e0:	f7fc fe1a 	bl	b5618 <__errno>
   b89e4:	2316      	movs	r3, #22
   b89e6:	6003      	str	r3, [r0, #0]
   b89e8:	2000      	movs	r0, #0
   b89ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b89ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8ad4 <_strtol_l.constprop.0+0x100>
   b89f2:	460d      	mov	r5, r1
   b89f4:	462e      	mov	r6, r5
   b89f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b89fa:	f814 700c 	ldrb.w	r7, [r4, ip]
   b89fe:	f017 0708 	ands.w	r7, r7, #8
   b8a02:	d1f7      	bne.n	b89f4 <_strtol_l.constprop.0+0x20>
   b8a04:	2c2d      	cmp	r4, #45	; 0x2d
   b8a06:	d132      	bne.n	b8a6e <_strtol_l.constprop.0+0x9a>
   b8a08:	782c      	ldrb	r4, [r5, #0]
   b8a0a:	2701      	movs	r7, #1
   b8a0c:	1cb5      	adds	r5, r6, #2
   b8a0e:	2b00      	cmp	r3, #0
   b8a10:	d05b      	beq.n	b8aca <_strtol_l.constprop.0+0xf6>
   b8a12:	2b10      	cmp	r3, #16
   b8a14:	d109      	bne.n	b8a2a <_strtol_l.constprop.0+0x56>
   b8a16:	2c30      	cmp	r4, #48	; 0x30
   b8a18:	d107      	bne.n	b8a2a <_strtol_l.constprop.0+0x56>
   b8a1a:	782c      	ldrb	r4, [r5, #0]
   b8a1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8a20:	2c58      	cmp	r4, #88	; 0x58
   b8a22:	d14d      	bne.n	b8ac0 <_strtol_l.constprop.0+0xec>
   b8a24:	786c      	ldrb	r4, [r5, #1]
   b8a26:	2310      	movs	r3, #16
   b8a28:	3502      	adds	r5, #2
   b8a2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8a2e:	f108 38ff 	add.w	r8, r8, #4294967295
   b8a32:	f04f 0c00 	mov.w	ip, #0
   b8a36:	fbb8 f9f3 	udiv	r9, r8, r3
   b8a3a:	4666      	mov	r6, ip
   b8a3c:	fb03 8a19 	mls	sl, r3, r9, r8
   b8a40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8a44:	f1be 0f09 	cmp.w	lr, #9
   b8a48:	d816      	bhi.n	b8a78 <_strtol_l.constprop.0+0xa4>
   b8a4a:	4674      	mov	r4, lr
   b8a4c:	42a3      	cmp	r3, r4
   b8a4e:	dd24      	ble.n	b8a9a <_strtol_l.constprop.0+0xc6>
   b8a50:	f1bc 0f00 	cmp.w	ip, #0
   b8a54:	db1e      	blt.n	b8a94 <_strtol_l.constprop.0+0xc0>
   b8a56:	45b1      	cmp	r9, r6
   b8a58:	d31c      	bcc.n	b8a94 <_strtol_l.constprop.0+0xc0>
   b8a5a:	d101      	bne.n	b8a60 <_strtol_l.constprop.0+0x8c>
   b8a5c:	45a2      	cmp	sl, r4
   b8a5e:	db19      	blt.n	b8a94 <_strtol_l.constprop.0+0xc0>
   b8a60:	fb06 4603 	mla	r6, r6, r3, r4
   b8a64:	f04f 0c01 	mov.w	ip, #1
   b8a68:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8a6c:	e7e8      	b.n	b8a40 <_strtol_l.constprop.0+0x6c>
   b8a6e:	2c2b      	cmp	r4, #43	; 0x2b
   b8a70:	bf04      	itt	eq
   b8a72:	782c      	ldrbeq	r4, [r5, #0]
   b8a74:	1cb5      	addeq	r5, r6, #2
   b8a76:	e7ca      	b.n	b8a0e <_strtol_l.constprop.0+0x3a>
   b8a78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8a7c:	f1be 0f19 	cmp.w	lr, #25
   b8a80:	d801      	bhi.n	b8a86 <_strtol_l.constprop.0+0xb2>
   b8a82:	3c37      	subs	r4, #55	; 0x37
   b8a84:	e7e2      	b.n	b8a4c <_strtol_l.constprop.0+0x78>
   b8a86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8a8a:	f1be 0f19 	cmp.w	lr, #25
   b8a8e:	d804      	bhi.n	b8a9a <_strtol_l.constprop.0+0xc6>
   b8a90:	3c57      	subs	r4, #87	; 0x57
   b8a92:	e7db      	b.n	b8a4c <_strtol_l.constprop.0+0x78>
   b8a94:	f04f 3cff 	mov.w	ip, #4294967295
   b8a98:	e7e6      	b.n	b8a68 <_strtol_l.constprop.0+0x94>
   b8a9a:	f1bc 0f00 	cmp.w	ip, #0
   b8a9e:	da05      	bge.n	b8aac <_strtol_l.constprop.0+0xd8>
   b8aa0:	2322      	movs	r3, #34	; 0x22
   b8aa2:	6003      	str	r3, [r0, #0]
   b8aa4:	4646      	mov	r6, r8
   b8aa6:	b942      	cbnz	r2, b8aba <_strtol_l.constprop.0+0xe6>
   b8aa8:	4630      	mov	r0, r6
   b8aaa:	e79e      	b.n	b89ea <_strtol_l.constprop.0+0x16>
   b8aac:	b107      	cbz	r7, b8ab0 <_strtol_l.constprop.0+0xdc>
   b8aae:	4276      	negs	r6, r6
   b8ab0:	2a00      	cmp	r2, #0
   b8ab2:	d0f9      	beq.n	b8aa8 <_strtol_l.constprop.0+0xd4>
   b8ab4:	f1bc 0f00 	cmp.w	ip, #0
   b8ab8:	d000      	beq.n	b8abc <_strtol_l.constprop.0+0xe8>
   b8aba:	1e69      	subs	r1, r5, #1
   b8abc:	6011      	str	r1, [r2, #0]
   b8abe:	e7f3      	b.n	b8aa8 <_strtol_l.constprop.0+0xd4>
   b8ac0:	2430      	movs	r4, #48	; 0x30
   b8ac2:	2b00      	cmp	r3, #0
   b8ac4:	d1b1      	bne.n	b8a2a <_strtol_l.constprop.0+0x56>
   b8ac6:	2308      	movs	r3, #8
   b8ac8:	e7af      	b.n	b8a2a <_strtol_l.constprop.0+0x56>
   b8aca:	2c30      	cmp	r4, #48	; 0x30
   b8acc:	d0a5      	beq.n	b8a1a <_strtol_l.constprop.0+0x46>
   b8ace:	230a      	movs	r3, #10
   b8ad0:	e7ab      	b.n	b8a2a <_strtol_l.constprop.0+0x56>
   b8ad2:	bf00      	nop
   b8ad4:	000ba380 	.word	0x000ba380

000b8ad8 <strtol>:
   b8ad8:	4613      	mov	r3, r2
   b8ada:	460a      	mov	r2, r1
   b8adc:	4601      	mov	r1, r0
   b8ade:	4802      	ldr	r0, [pc, #8]	; (b8ae8 <strtol+0x10>)
   b8ae0:	6800      	ldr	r0, [r0, #0]
   b8ae2:	f7ff bf77 	b.w	b89d4 <_strtol_l.constprop.0>
   b8ae6:	bf00      	nop
   b8ae8:	2003d774 	.word	0x2003d774

000b8aec <__register_exitproc>:
   b8aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8af0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8bac <__register_exitproc+0xc0>
   b8af4:	4606      	mov	r6, r0
   b8af6:	f8d8 0000 	ldr.w	r0, [r8]
   b8afa:	461f      	mov	r7, r3
   b8afc:	460d      	mov	r5, r1
   b8afe:	4691      	mov	r9, r2
   b8b00:	f000 fbc6 	bl	b9290 <__retarget_lock_acquire_recursive>
   b8b04:	4b25      	ldr	r3, [pc, #148]	; (b8b9c <__register_exitproc+0xb0>)
   b8b06:	681c      	ldr	r4, [r3, #0]
   b8b08:	b934      	cbnz	r4, b8b18 <__register_exitproc+0x2c>
   b8b0a:	4c25      	ldr	r4, [pc, #148]	; (b8ba0 <__register_exitproc+0xb4>)
   b8b0c:	601c      	str	r4, [r3, #0]
   b8b0e:	4b25      	ldr	r3, [pc, #148]	; (b8ba4 <__register_exitproc+0xb8>)
   b8b10:	b113      	cbz	r3, b8b18 <__register_exitproc+0x2c>
   b8b12:	681b      	ldr	r3, [r3, #0]
   b8b14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8b18:	6863      	ldr	r3, [r4, #4]
   b8b1a:	2b1f      	cmp	r3, #31
   b8b1c:	dd07      	ble.n	b8b2e <__register_exitproc+0x42>
   b8b1e:	f8d8 0000 	ldr.w	r0, [r8]
   b8b22:	f000 fbb7 	bl	b9294 <__retarget_lock_release_recursive>
   b8b26:	f04f 30ff 	mov.w	r0, #4294967295
   b8b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8b2e:	b34e      	cbz	r6, b8b84 <__register_exitproc+0x98>
   b8b30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8b34:	b988      	cbnz	r0, b8b5a <__register_exitproc+0x6e>
   b8b36:	4b1c      	ldr	r3, [pc, #112]	; (b8ba8 <__register_exitproc+0xbc>)
   b8b38:	b923      	cbnz	r3, b8b44 <__register_exitproc+0x58>
   b8b3a:	f8d8 0000 	ldr.w	r0, [r8]
   b8b3e:	f000 fba8 	bl	b9292 <__retarget_lock_release>
   b8b42:	e7f0      	b.n	b8b26 <__register_exitproc+0x3a>
   b8b44:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8b48:	f7fc fd26 	bl	b5598 <malloc>
   b8b4c:	2800      	cmp	r0, #0
   b8b4e:	d0f4      	beq.n	b8b3a <__register_exitproc+0x4e>
   b8b50:	2300      	movs	r3, #0
   b8b52:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8b56:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8b5a:	6863      	ldr	r3, [r4, #4]
   b8b5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8b60:	2201      	movs	r2, #1
   b8b62:	409a      	lsls	r2, r3
   b8b64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8b68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8b6c:	4313      	orrs	r3, r2
   b8b6e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8b72:	2e02      	cmp	r6, #2
   b8b74:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8b78:	bf02      	ittt	eq
   b8b7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8b7e:	4313      	orreq	r3, r2
   b8b80:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8b84:	6863      	ldr	r3, [r4, #4]
   b8b86:	f8d8 0000 	ldr.w	r0, [r8]
   b8b8a:	1c5a      	adds	r2, r3, #1
   b8b8c:	3302      	adds	r3, #2
   b8b8e:	6062      	str	r2, [r4, #4]
   b8b90:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8b94:	f000 fb7e 	bl	b9294 <__retarget_lock_release_recursive>
   b8b98:	2000      	movs	r0, #0
   b8b9a:	e7c6      	b.n	b8b2a <__register_exitproc+0x3e>
   b8b9c:	2003e7ec 	.word	0x2003e7ec
   b8ba0:	2003e760 	.word	0x2003e760
   b8ba4:	00000000 	.word	0x00000000
   b8ba8:	000b5599 	.word	0x000b5599
   b8bac:	2003d7d8 	.word	0x2003d7d8

000b8bb0 <rshift>:
   b8bb0:	6903      	ldr	r3, [r0, #16]
   b8bb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b8bb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8bba:	ea4f 1261 	mov.w	r2, r1, asr #5
   b8bbe:	f100 0414 	add.w	r4, r0, #20
   b8bc2:	dd45      	ble.n	b8c50 <rshift+0xa0>
   b8bc4:	f011 011f 	ands.w	r1, r1, #31
   b8bc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b8bcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b8bd0:	d10c      	bne.n	b8bec <rshift+0x3c>
   b8bd2:	f100 0710 	add.w	r7, r0, #16
   b8bd6:	4629      	mov	r1, r5
   b8bd8:	42b1      	cmp	r1, r6
   b8bda:	d334      	bcc.n	b8c46 <rshift+0x96>
   b8bdc:	1a9b      	subs	r3, r3, r2
   b8bde:	009b      	lsls	r3, r3, #2
   b8be0:	1eea      	subs	r2, r5, #3
   b8be2:	4296      	cmp	r6, r2
   b8be4:	bf38      	it	cc
   b8be6:	2300      	movcc	r3, #0
   b8be8:	4423      	add	r3, r4
   b8bea:	e015      	b.n	b8c18 <rshift+0x68>
   b8bec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b8bf0:	f1c1 0820 	rsb	r8, r1, #32
   b8bf4:	40cf      	lsrs	r7, r1
   b8bf6:	f105 0e04 	add.w	lr, r5, #4
   b8bfa:	46a1      	mov	r9, r4
   b8bfc:	4576      	cmp	r6, lr
   b8bfe:	46f4      	mov	ip, lr
   b8c00:	d815      	bhi.n	b8c2e <rshift+0x7e>
   b8c02:	1a9a      	subs	r2, r3, r2
   b8c04:	0092      	lsls	r2, r2, #2
   b8c06:	3a04      	subs	r2, #4
   b8c08:	3501      	adds	r5, #1
   b8c0a:	42ae      	cmp	r6, r5
   b8c0c:	bf38      	it	cc
   b8c0e:	2200      	movcc	r2, #0
   b8c10:	18a3      	adds	r3, r4, r2
   b8c12:	50a7      	str	r7, [r4, r2]
   b8c14:	b107      	cbz	r7, b8c18 <rshift+0x68>
   b8c16:	3304      	adds	r3, #4
   b8c18:	1b1a      	subs	r2, r3, r4
   b8c1a:	42a3      	cmp	r3, r4
   b8c1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b8c20:	bf08      	it	eq
   b8c22:	2300      	moveq	r3, #0
   b8c24:	6102      	str	r2, [r0, #16]
   b8c26:	bf08      	it	eq
   b8c28:	6143      	streq	r3, [r0, #20]
   b8c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8c2e:	f8dc c000 	ldr.w	ip, [ip]
   b8c32:	fa0c fc08 	lsl.w	ip, ip, r8
   b8c36:	ea4c 0707 	orr.w	r7, ip, r7
   b8c3a:	f849 7b04 	str.w	r7, [r9], #4
   b8c3e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b8c42:	40cf      	lsrs	r7, r1
   b8c44:	e7da      	b.n	b8bfc <rshift+0x4c>
   b8c46:	f851 cb04 	ldr.w	ip, [r1], #4
   b8c4a:	f847 cf04 	str.w	ip, [r7, #4]!
   b8c4e:	e7c3      	b.n	b8bd8 <rshift+0x28>
   b8c50:	4623      	mov	r3, r4
   b8c52:	e7e1      	b.n	b8c18 <rshift+0x68>

000b8c54 <__hexdig_fun>:
   b8c54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8c58:	2b09      	cmp	r3, #9
   b8c5a:	d802      	bhi.n	b8c62 <__hexdig_fun+0xe>
   b8c5c:	3820      	subs	r0, #32
   b8c5e:	b2c0      	uxtb	r0, r0
   b8c60:	4770      	bx	lr
   b8c62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8c66:	2b05      	cmp	r3, #5
   b8c68:	d801      	bhi.n	b8c6e <__hexdig_fun+0x1a>
   b8c6a:	3847      	subs	r0, #71	; 0x47
   b8c6c:	e7f7      	b.n	b8c5e <__hexdig_fun+0xa>
   b8c6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8c72:	2b05      	cmp	r3, #5
   b8c74:	d801      	bhi.n	b8c7a <__hexdig_fun+0x26>
   b8c76:	3827      	subs	r0, #39	; 0x27
   b8c78:	e7f1      	b.n	b8c5e <__hexdig_fun+0xa>
   b8c7a:	2000      	movs	r0, #0
   b8c7c:	4770      	bx	lr
	...

000b8c80 <__gethex>:
   b8c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c84:	ed2d 8b02 	vpush	{d8}
   b8c88:	b089      	sub	sp, #36	; 0x24
   b8c8a:	ee08 0a10 	vmov	s16, r0
   b8c8e:	9304      	str	r3, [sp, #16]
   b8c90:	4bb4      	ldr	r3, [pc, #720]	; (b8f64 <__gethex+0x2e4>)
   b8c92:	681b      	ldr	r3, [r3, #0]
   b8c94:	9301      	str	r3, [sp, #4]
   b8c96:	4618      	mov	r0, r3
   b8c98:	468b      	mov	fp, r1
   b8c9a:	4690      	mov	r8, r2
   b8c9c:	f7fe fff1 	bl	b7c82 <strlen>
   b8ca0:	9b01      	ldr	r3, [sp, #4]
   b8ca2:	f8db 2000 	ldr.w	r2, [fp]
   b8ca6:	4403      	add	r3, r0
   b8ca8:	4682      	mov	sl, r0
   b8caa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b8cae:	9305      	str	r3, [sp, #20]
   b8cb0:	1c93      	adds	r3, r2, #2
   b8cb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b8cb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b8cba:	32fe      	adds	r2, #254	; 0xfe
   b8cbc:	18d1      	adds	r1, r2, r3
   b8cbe:	461f      	mov	r7, r3
   b8cc0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8cc4:	9100      	str	r1, [sp, #0]
   b8cc6:	2830      	cmp	r0, #48	; 0x30
   b8cc8:	d0f8      	beq.n	b8cbc <__gethex+0x3c>
   b8cca:	f7ff ffc3 	bl	b8c54 <__hexdig_fun>
   b8cce:	4604      	mov	r4, r0
   b8cd0:	2800      	cmp	r0, #0
   b8cd2:	d13a      	bne.n	b8d4a <__gethex+0xca>
   b8cd4:	9901      	ldr	r1, [sp, #4]
   b8cd6:	4652      	mov	r2, sl
   b8cd8:	4638      	mov	r0, r7
   b8cda:	f7fe ffda 	bl	b7c92 <strncmp>
   b8cde:	4605      	mov	r5, r0
   b8ce0:	2800      	cmp	r0, #0
   b8ce2:	d168      	bne.n	b8db6 <__gethex+0x136>
   b8ce4:	f817 000a 	ldrb.w	r0, [r7, sl]
   b8ce8:	eb07 060a 	add.w	r6, r7, sl
   b8cec:	f7ff ffb2 	bl	b8c54 <__hexdig_fun>
   b8cf0:	2800      	cmp	r0, #0
   b8cf2:	d062      	beq.n	b8dba <__gethex+0x13a>
   b8cf4:	4633      	mov	r3, r6
   b8cf6:	7818      	ldrb	r0, [r3, #0]
   b8cf8:	2830      	cmp	r0, #48	; 0x30
   b8cfa:	461f      	mov	r7, r3
   b8cfc:	f103 0301 	add.w	r3, r3, #1
   b8d00:	d0f9      	beq.n	b8cf6 <__gethex+0x76>
   b8d02:	f7ff ffa7 	bl	b8c54 <__hexdig_fun>
   b8d06:	2301      	movs	r3, #1
   b8d08:	fab0 f480 	clz	r4, r0
   b8d0c:	0964      	lsrs	r4, r4, #5
   b8d0e:	4635      	mov	r5, r6
   b8d10:	9300      	str	r3, [sp, #0]
   b8d12:	463a      	mov	r2, r7
   b8d14:	4616      	mov	r6, r2
   b8d16:	3201      	adds	r2, #1
   b8d18:	7830      	ldrb	r0, [r6, #0]
   b8d1a:	f7ff ff9b 	bl	b8c54 <__hexdig_fun>
   b8d1e:	2800      	cmp	r0, #0
   b8d20:	d1f8      	bne.n	b8d14 <__gethex+0x94>
   b8d22:	9901      	ldr	r1, [sp, #4]
   b8d24:	4652      	mov	r2, sl
   b8d26:	4630      	mov	r0, r6
   b8d28:	f7fe ffb3 	bl	b7c92 <strncmp>
   b8d2c:	b980      	cbnz	r0, b8d50 <__gethex+0xd0>
   b8d2e:	b94d      	cbnz	r5, b8d44 <__gethex+0xc4>
   b8d30:	eb06 050a 	add.w	r5, r6, sl
   b8d34:	462a      	mov	r2, r5
   b8d36:	4616      	mov	r6, r2
   b8d38:	3201      	adds	r2, #1
   b8d3a:	7830      	ldrb	r0, [r6, #0]
   b8d3c:	f7ff ff8a 	bl	b8c54 <__hexdig_fun>
   b8d40:	2800      	cmp	r0, #0
   b8d42:	d1f8      	bne.n	b8d36 <__gethex+0xb6>
   b8d44:	1bad      	subs	r5, r5, r6
   b8d46:	00ad      	lsls	r5, r5, #2
   b8d48:	e004      	b.n	b8d54 <__gethex+0xd4>
   b8d4a:	2400      	movs	r4, #0
   b8d4c:	4625      	mov	r5, r4
   b8d4e:	e7e0      	b.n	b8d12 <__gethex+0x92>
   b8d50:	2d00      	cmp	r5, #0
   b8d52:	d1f7      	bne.n	b8d44 <__gethex+0xc4>
   b8d54:	7833      	ldrb	r3, [r6, #0]
   b8d56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8d5a:	2b50      	cmp	r3, #80	; 0x50
   b8d5c:	d13b      	bne.n	b8dd6 <__gethex+0x156>
   b8d5e:	7873      	ldrb	r3, [r6, #1]
   b8d60:	2b2b      	cmp	r3, #43	; 0x2b
   b8d62:	d02c      	beq.n	b8dbe <__gethex+0x13e>
   b8d64:	2b2d      	cmp	r3, #45	; 0x2d
   b8d66:	d02e      	beq.n	b8dc6 <__gethex+0x146>
   b8d68:	1c71      	adds	r1, r6, #1
   b8d6a:	f04f 0900 	mov.w	r9, #0
   b8d6e:	7808      	ldrb	r0, [r1, #0]
   b8d70:	f7ff ff70 	bl	b8c54 <__hexdig_fun>
   b8d74:	1e43      	subs	r3, r0, #1
   b8d76:	b2db      	uxtb	r3, r3
   b8d78:	2b18      	cmp	r3, #24
   b8d7a:	d82c      	bhi.n	b8dd6 <__gethex+0x156>
   b8d7c:	f1a0 0210 	sub.w	r2, r0, #16
   b8d80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b8d84:	f7ff ff66 	bl	b8c54 <__hexdig_fun>
   b8d88:	1e43      	subs	r3, r0, #1
   b8d8a:	b2db      	uxtb	r3, r3
   b8d8c:	2b18      	cmp	r3, #24
   b8d8e:	d91d      	bls.n	b8dcc <__gethex+0x14c>
   b8d90:	f1b9 0f00 	cmp.w	r9, #0
   b8d94:	d000      	beq.n	b8d98 <__gethex+0x118>
   b8d96:	4252      	negs	r2, r2
   b8d98:	4415      	add	r5, r2
   b8d9a:	f8cb 1000 	str.w	r1, [fp]
   b8d9e:	b1e4      	cbz	r4, b8dda <__gethex+0x15a>
   b8da0:	9b00      	ldr	r3, [sp, #0]
   b8da2:	2b00      	cmp	r3, #0
   b8da4:	bf14      	ite	ne
   b8da6:	2700      	movne	r7, #0
   b8da8:	2706      	moveq	r7, #6
   b8daa:	4638      	mov	r0, r7
   b8dac:	b009      	add	sp, #36	; 0x24
   b8dae:	ecbd 8b02 	vpop	{d8}
   b8db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8db6:	463e      	mov	r6, r7
   b8db8:	4625      	mov	r5, r4
   b8dba:	2401      	movs	r4, #1
   b8dbc:	e7ca      	b.n	b8d54 <__gethex+0xd4>
   b8dbe:	f04f 0900 	mov.w	r9, #0
   b8dc2:	1cb1      	adds	r1, r6, #2
   b8dc4:	e7d3      	b.n	b8d6e <__gethex+0xee>
   b8dc6:	f04f 0901 	mov.w	r9, #1
   b8dca:	e7fa      	b.n	b8dc2 <__gethex+0x142>
   b8dcc:	230a      	movs	r3, #10
   b8dce:	fb03 0202 	mla	r2, r3, r2, r0
   b8dd2:	3a10      	subs	r2, #16
   b8dd4:	e7d4      	b.n	b8d80 <__gethex+0x100>
   b8dd6:	4631      	mov	r1, r6
   b8dd8:	e7df      	b.n	b8d9a <__gethex+0x11a>
   b8dda:	1bf3      	subs	r3, r6, r7
   b8ddc:	3b01      	subs	r3, #1
   b8dde:	4621      	mov	r1, r4
   b8de0:	2b07      	cmp	r3, #7
   b8de2:	dc0b      	bgt.n	b8dfc <__gethex+0x17c>
   b8de4:	ee18 0a10 	vmov	r0, s16
   b8de8:	f000 fa68 	bl	b92bc <_Balloc>
   b8dec:	4604      	mov	r4, r0
   b8dee:	b940      	cbnz	r0, b8e02 <__gethex+0x182>
   b8df0:	4b5d      	ldr	r3, [pc, #372]	; (b8f68 <__gethex+0x2e8>)
   b8df2:	4602      	mov	r2, r0
   b8df4:	21de      	movs	r1, #222	; 0xde
   b8df6:	485d      	ldr	r0, [pc, #372]	; (b8f6c <__gethex+0x2ec>)
   b8df8:	f7fc fc16 	bl	b5628 <__assert_func>
   b8dfc:	3101      	adds	r1, #1
   b8dfe:	105b      	asrs	r3, r3, #1
   b8e00:	e7ee      	b.n	b8de0 <__gethex+0x160>
   b8e02:	f100 0914 	add.w	r9, r0, #20
   b8e06:	f04f 0b00 	mov.w	fp, #0
   b8e0a:	f1ca 0301 	rsb	r3, sl, #1
   b8e0e:	f8cd 9008 	str.w	r9, [sp, #8]
   b8e12:	f8cd b000 	str.w	fp, [sp]
   b8e16:	9306      	str	r3, [sp, #24]
   b8e18:	42b7      	cmp	r7, r6
   b8e1a:	d340      	bcc.n	b8e9e <__gethex+0x21e>
   b8e1c:	9802      	ldr	r0, [sp, #8]
   b8e1e:	9b00      	ldr	r3, [sp, #0]
   b8e20:	f840 3b04 	str.w	r3, [r0], #4
   b8e24:	eba0 0009 	sub.w	r0, r0, r9
   b8e28:	1080      	asrs	r0, r0, #2
   b8e2a:	0146      	lsls	r6, r0, #5
   b8e2c:	6120      	str	r0, [r4, #16]
   b8e2e:	4618      	mov	r0, r3
   b8e30:	f000 fb36 	bl	b94a0 <__hi0bits>
   b8e34:	1a30      	subs	r0, r6, r0
   b8e36:	f8d8 6000 	ldr.w	r6, [r8]
   b8e3a:	42b0      	cmp	r0, r6
   b8e3c:	dd63      	ble.n	b8f06 <__gethex+0x286>
   b8e3e:	1b87      	subs	r7, r0, r6
   b8e40:	4639      	mov	r1, r7
   b8e42:	4620      	mov	r0, r4
   b8e44:	f000 feda 	bl	b9bfc <__any_on>
   b8e48:	4682      	mov	sl, r0
   b8e4a:	b1a8      	cbz	r0, b8e78 <__gethex+0x1f8>
   b8e4c:	1e7b      	subs	r3, r7, #1
   b8e4e:	1159      	asrs	r1, r3, #5
   b8e50:	f003 021f 	and.w	r2, r3, #31
   b8e54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b8e58:	f04f 0a01 	mov.w	sl, #1
   b8e5c:	fa0a f202 	lsl.w	r2, sl, r2
   b8e60:	420a      	tst	r2, r1
   b8e62:	d009      	beq.n	b8e78 <__gethex+0x1f8>
   b8e64:	4553      	cmp	r3, sl
   b8e66:	dd05      	ble.n	b8e74 <__gethex+0x1f4>
   b8e68:	1eb9      	subs	r1, r7, #2
   b8e6a:	4620      	mov	r0, r4
   b8e6c:	f000 fec6 	bl	b9bfc <__any_on>
   b8e70:	2800      	cmp	r0, #0
   b8e72:	d145      	bne.n	b8f00 <__gethex+0x280>
   b8e74:	f04f 0a02 	mov.w	sl, #2
   b8e78:	4639      	mov	r1, r7
   b8e7a:	4620      	mov	r0, r4
   b8e7c:	f7ff fe98 	bl	b8bb0 <rshift>
   b8e80:	443d      	add	r5, r7
   b8e82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8e86:	42ab      	cmp	r3, r5
   b8e88:	da4c      	bge.n	b8f24 <__gethex+0x2a4>
   b8e8a:	ee18 0a10 	vmov	r0, s16
   b8e8e:	4621      	mov	r1, r4
   b8e90:	f000 fa54 	bl	b933c <_Bfree>
   b8e94:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8e96:	2300      	movs	r3, #0
   b8e98:	6013      	str	r3, [r2, #0]
   b8e9a:	27a3      	movs	r7, #163	; 0xa3
   b8e9c:	e785      	b.n	b8daa <__gethex+0x12a>
   b8e9e:	1e73      	subs	r3, r6, #1
   b8ea0:	9a05      	ldr	r2, [sp, #20]
   b8ea2:	9303      	str	r3, [sp, #12]
   b8ea4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b8ea8:	4293      	cmp	r3, r2
   b8eaa:	d019      	beq.n	b8ee0 <__gethex+0x260>
   b8eac:	f1bb 0f20 	cmp.w	fp, #32
   b8eb0:	d107      	bne.n	b8ec2 <__gethex+0x242>
   b8eb2:	9b02      	ldr	r3, [sp, #8]
   b8eb4:	9a00      	ldr	r2, [sp, #0]
   b8eb6:	f843 2b04 	str.w	r2, [r3], #4
   b8eba:	9302      	str	r3, [sp, #8]
   b8ebc:	2300      	movs	r3, #0
   b8ebe:	9300      	str	r3, [sp, #0]
   b8ec0:	469b      	mov	fp, r3
   b8ec2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b8ec6:	f7ff fec5 	bl	b8c54 <__hexdig_fun>
   b8eca:	9b00      	ldr	r3, [sp, #0]
   b8ecc:	f000 000f 	and.w	r0, r0, #15
   b8ed0:	fa00 f00b 	lsl.w	r0, r0, fp
   b8ed4:	4303      	orrs	r3, r0
   b8ed6:	9300      	str	r3, [sp, #0]
   b8ed8:	f10b 0b04 	add.w	fp, fp, #4
   b8edc:	9b03      	ldr	r3, [sp, #12]
   b8ede:	e00d      	b.n	b8efc <__gethex+0x27c>
   b8ee0:	9b03      	ldr	r3, [sp, #12]
   b8ee2:	9a06      	ldr	r2, [sp, #24]
   b8ee4:	4413      	add	r3, r2
   b8ee6:	42bb      	cmp	r3, r7
   b8ee8:	d3e0      	bcc.n	b8eac <__gethex+0x22c>
   b8eea:	4618      	mov	r0, r3
   b8eec:	9901      	ldr	r1, [sp, #4]
   b8eee:	9307      	str	r3, [sp, #28]
   b8ef0:	4652      	mov	r2, sl
   b8ef2:	f7fe fece 	bl	b7c92 <strncmp>
   b8ef6:	9b07      	ldr	r3, [sp, #28]
   b8ef8:	2800      	cmp	r0, #0
   b8efa:	d1d7      	bne.n	b8eac <__gethex+0x22c>
   b8efc:	461e      	mov	r6, r3
   b8efe:	e78b      	b.n	b8e18 <__gethex+0x198>
   b8f00:	f04f 0a03 	mov.w	sl, #3
   b8f04:	e7b8      	b.n	b8e78 <__gethex+0x1f8>
   b8f06:	da0a      	bge.n	b8f1e <__gethex+0x29e>
   b8f08:	1a37      	subs	r7, r6, r0
   b8f0a:	4621      	mov	r1, r4
   b8f0c:	ee18 0a10 	vmov	r0, s16
   b8f10:	463a      	mov	r2, r7
   b8f12:	f000 fc2f 	bl	b9774 <__lshift>
   b8f16:	1bed      	subs	r5, r5, r7
   b8f18:	4604      	mov	r4, r0
   b8f1a:	f100 0914 	add.w	r9, r0, #20
   b8f1e:	f04f 0a00 	mov.w	sl, #0
   b8f22:	e7ae      	b.n	b8e82 <__gethex+0x202>
   b8f24:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b8f28:	42a8      	cmp	r0, r5
   b8f2a:	dd72      	ble.n	b9012 <__gethex+0x392>
   b8f2c:	1b45      	subs	r5, r0, r5
   b8f2e:	42ae      	cmp	r6, r5
   b8f30:	dc36      	bgt.n	b8fa0 <__gethex+0x320>
   b8f32:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8f36:	2b02      	cmp	r3, #2
   b8f38:	d02a      	beq.n	b8f90 <__gethex+0x310>
   b8f3a:	2b03      	cmp	r3, #3
   b8f3c:	d02c      	beq.n	b8f98 <__gethex+0x318>
   b8f3e:	2b01      	cmp	r3, #1
   b8f40:	d11c      	bne.n	b8f7c <__gethex+0x2fc>
   b8f42:	42ae      	cmp	r6, r5
   b8f44:	d11a      	bne.n	b8f7c <__gethex+0x2fc>
   b8f46:	2e01      	cmp	r6, #1
   b8f48:	d112      	bne.n	b8f70 <__gethex+0x2f0>
   b8f4a:	9a04      	ldr	r2, [sp, #16]
   b8f4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8f50:	6013      	str	r3, [r2, #0]
   b8f52:	2301      	movs	r3, #1
   b8f54:	6123      	str	r3, [r4, #16]
   b8f56:	f8c9 3000 	str.w	r3, [r9]
   b8f5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8f5c:	2762      	movs	r7, #98	; 0x62
   b8f5e:	601c      	str	r4, [r3, #0]
   b8f60:	e723      	b.n	b8daa <__gethex+0x12a>
   b8f62:	bf00      	nop
   b8f64:	000ba518 	.word	0x000ba518
   b8f68:	000ba480 	.word	0x000ba480
   b8f6c:	000ba491 	.word	0x000ba491
   b8f70:	1e71      	subs	r1, r6, #1
   b8f72:	4620      	mov	r0, r4
   b8f74:	f000 fe42 	bl	b9bfc <__any_on>
   b8f78:	2800      	cmp	r0, #0
   b8f7a:	d1e6      	bne.n	b8f4a <__gethex+0x2ca>
   b8f7c:	ee18 0a10 	vmov	r0, s16
   b8f80:	4621      	mov	r1, r4
   b8f82:	f000 f9db 	bl	b933c <_Bfree>
   b8f86:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8f88:	2300      	movs	r3, #0
   b8f8a:	6013      	str	r3, [r2, #0]
   b8f8c:	2750      	movs	r7, #80	; 0x50
   b8f8e:	e70c      	b.n	b8daa <__gethex+0x12a>
   b8f90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8f92:	2b00      	cmp	r3, #0
   b8f94:	d1f2      	bne.n	b8f7c <__gethex+0x2fc>
   b8f96:	e7d8      	b.n	b8f4a <__gethex+0x2ca>
   b8f98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8f9a:	2b00      	cmp	r3, #0
   b8f9c:	d1d5      	bne.n	b8f4a <__gethex+0x2ca>
   b8f9e:	e7ed      	b.n	b8f7c <__gethex+0x2fc>
   b8fa0:	1e6f      	subs	r7, r5, #1
   b8fa2:	f1ba 0f00 	cmp.w	sl, #0
   b8fa6:	d131      	bne.n	b900c <__gethex+0x38c>
   b8fa8:	b127      	cbz	r7, b8fb4 <__gethex+0x334>
   b8faa:	4639      	mov	r1, r7
   b8fac:	4620      	mov	r0, r4
   b8fae:	f000 fe25 	bl	b9bfc <__any_on>
   b8fb2:	4682      	mov	sl, r0
   b8fb4:	117b      	asrs	r3, r7, #5
   b8fb6:	2101      	movs	r1, #1
   b8fb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b8fbc:	f007 071f 	and.w	r7, r7, #31
   b8fc0:	fa01 f707 	lsl.w	r7, r1, r7
   b8fc4:	421f      	tst	r7, r3
   b8fc6:	4629      	mov	r1, r5
   b8fc8:	4620      	mov	r0, r4
   b8fca:	bf18      	it	ne
   b8fcc:	f04a 0a02 	orrne.w	sl, sl, #2
   b8fd0:	1b76      	subs	r6, r6, r5
   b8fd2:	f7ff fded 	bl	b8bb0 <rshift>
   b8fd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b8fda:	2702      	movs	r7, #2
   b8fdc:	f1ba 0f00 	cmp.w	sl, #0
   b8fe0:	d048      	beq.n	b9074 <__gethex+0x3f4>
   b8fe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8fe6:	2b02      	cmp	r3, #2
   b8fe8:	d015      	beq.n	b9016 <__gethex+0x396>
   b8fea:	2b03      	cmp	r3, #3
   b8fec:	d017      	beq.n	b901e <__gethex+0x39e>
   b8fee:	2b01      	cmp	r3, #1
   b8ff0:	d109      	bne.n	b9006 <__gethex+0x386>
   b8ff2:	f01a 0f02 	tst.w	sl, #2
   b8ff6:	d006      	beq.n	b9006 <__gethex+0x386>
   b8ff8:	f8d9 0000 	ldr.w	r0, [r9]
   b8ffc:	ea4a 0a00 	orr.w	sl, sl, r0
   b9000:	f01a 0f01 	tst.w	sl, #1
   b9004:	d10e      	bne.n	b9024 <__gethex+0x3a4>
   b9006:	f047 0710 	orr.w	r7, r7, #16
   b900a:	e033      	b.n	b9074 <__gethex+0x3f4>
   b900c:	f04f 0a01 	mov.w	sl, #1
   b9010:	e7d0      	b.n	b8fb4 <__gethex+0x334>
   b9012:	2701      	movs	r7, #1
   b9014:	e7e2      	b.n	b8fdc <__gethex+0x35c>
   b9016:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9018:	f1c3 0301 	rsb	r3, r3, #1
   b901c:	9315      	str	r3, [sp, #84]	; 0x54
   b901e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9020:	2b00      	cmp	r3, #0
   b9022:	d0f0      	beq.n	b9006 <__gethex+0x386>
   b9024:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b9028:	f104 0314 	add.w	r3, r4, #20
   b902c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b9030:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b9034:	f04f 0c00 	mov.w	ip, #0
   b9038:	4618      	mov	r0, r3
   b903a:	f853 2b04 	ldr.w	r2, [r3], #4
   b903e:	f1b2 3fff 	cmp.w	r2, #4294967295
   b9042:	d01c      	beq.n	b907e <__gethex+0x3fe>
   b9044:	3201      	adds	r2, #1
   b9046:	6002      	str	r2, [r0, #0]
   b9048:	2f02      	cmp	r7, #2
   b904a:	f104 0314 	add.w	r3, r4, #20
   b904e:	d13f      	bne.n	b90d0 <__gethex+0x450>
   b9050:	f8d8 2000 	ldr.w	r2, [r8]
   b9054:	3a01      	subs	r2, #1
   b9056:	42b2      	cmp	r2, r6
   b9058:	d10a      	bne.n	b9070 <__gethex+0x3f0>
   b905a:	1171      	asrs	r1, r6, #5
   b905c:	2201      	movs	r2, #1
   b905e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b9062:	f006 061f 	and.w	r6, r6, #31
   b9066:	fa02 f606 	lsl.w	r6, r2, r6
   b906a:	421e      	tst	r6, r3
   b906c:	bf18      	it	ne
   b906e:	4617      	movne	r7, r2
   b9070:	f047 0720 	orr.w	r7, r7, #32
   b9074:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9076:	601c      	str	r4, [r3, #0]
   b9078:	9b04      	ldr	r3, [sp, #16]
   b907a:	601d      	str	r5, [r3, #0]
   b907c:	e695      	b.n	b8daa <__gethex+0x12a>
   b907e:	4299      	cmp	r1, r3
   b9080:	f843 cc04 	str.w	ip, [r3, #-4]
   b9084:	d8d8      	bhi.n	b9038 <__gethex+0x3b8>
   b9086:	68a3      	ldr	r3, [r4, #8]
   b9088:	459b      	cmp	fp, r3
   b908a:	db19      	blt.n	b90c0 <__gethex+0x440>
   b908c:	6861      	ldr	r1, [r4, #4]
   b908e:	ee18 0a10 	vmov	r0, s16
   b9092:	3101      	adds	r1, #1
   b9094:	f000 f912 	bl	b92bc <_Balloc>
   b9098:	4681      	mov	r9, r0
   b909a:	b918      	cbnz	r0, b90a4 <__gethex+0x424>
   b909c:	4b1a      	ldr	r3, [pc, #104]	; (b9108 <__gethex+0x488>)
   b909e:	4602      	mov	r2, r0
   b90a0:	2184      	movs	r1, #132	; 0x84
   b90a2:	e6a8      	b.n	b8df6 <__gethex+0x176>
   b90a4:	6922      	ldr	r2, [r4, #16]
   b90a6:	3202      	adds	r2, #2
   b90a8:	f104 010c 	add.w	r1, r4, #12
   b90ac:	0092      	lsls	r2, r2, #2
   b90ae:	300c      	adds	r0, #12
   b90b0:	f7fe fd63 	bl	b7b7a <memcpy>
   b90b4:	4621      	mov	r1, r4
   b90b6:	ee18 0a10 	vmov	r0, s16
   b90ba:	f000 f93f 	bl	b933c <_Bfree>
   b90be:	464c      	mov	r4, r9
   b90c0:	6923      	ldr	r3, [r4, #16]
   b90c2:	1c5a      	adds	r2, r3, #1
   b90c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b90c8:	6122      	str	r2, [r4, #16]
   b90ca:	2201      	movs	r2, #1
   b90cc:	615a      	str	r2, [r3, #20]
   b90ce:	e7bb      	b.n	b9048 <__gethex+0x3c8>
   b90d0:	6922      	ldr	r2, [r4, #16]
   b90d2:	455a      	cmp	r2, fp
   b90d4:	dd0b      	ble.n	b90ee <__gethex+0x46e>
   b90d6:	2101      	movs	r1, #1
   b90d8:	4620      	mov	r0, r4
   b90da:	f7ff fd69 	bl	b8bb0 <rshift>
   b90de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b90e2:	3501      	adds	r5, #1
   b90e4:	42ab      	cmp	r3, r5
   b90e6:	f6ff aed0 	blt.w	b8e8a <__gethex+0x20a>
   b90ea:	2701      	movs	r7, #1
   b90ec:	e7c0      	b.n	b9070 <__gethex+0x3f0>
   b90ee:	f016 061f 	ands.w	r6, r6, #31
   b90f2:	d0fa      	beq.n	b90ea <__gethex+0x46a>
   b90f4:	4453      	add	r3, sl
   b90f6:	f1c6 0620 	rsb	r6, r6, #32
   b90fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b90fe:	f000 f9cf 	bl	b94a0 <__hi0bits>
   b9102:	42b0      	cmp	r0, r6
   b9104:	dbe7      	blt.n	b90d6 <__gethex+0x456>
   b9106:	e7f0      	b.n	b90ea <__gethex+0x46a>
   b9108:	000ba480 	.word	0x000ba480

000b910c <L_shift>:
   b910c:	f1c2 0208 	rsb	r2, r2, #8
   b9110:	0092      	lsls	r2, r2, #2
   b9112:	b570      	push	{r4, r5, r6, lr}
   b9114:	f1c2 0620 	rsb	r6, r2, #32
   b9118:	6843      	ldr	r3, [r0, #4]
   b911a:	6804      	ldr	r4, [r0, #0]
   b911c:	fa03 f506 	lsl.w	r5, r3, r6
   b9120:	432c      	orrs	r4, r5
   b9122:	40d3      	lsrs	r3, r2
   b9124:	6004      	str	r4, [r0, #0]
   b9126:	f840 3f04 	str.w	r3, [r0, #4]!
   b912a:	4288      	cmp	r0, r1
   b912c:	d3f4      	bcc.n	b9118 <L_shift+0xc>
   b912e:	bd70      	pop	{r4, r5, r6, pc}

000b9130 <__match>:
   b9130:	b530      	push	{r4, r5, lr}
   b9132:	6803      	ldr	r3, [r0, #0]
   b9134:	3301      	adds	r3, #1
   b9136:	f811 4b01 	ldrb.w	r4, [r1], #1
   b913a:	b914      	cbnz	r4, b9142 <__match+0x12>
   b913c:	6003      	str	r3, [r0, #0]
   b913e:	2001      	movs	r0, #1
   b9140:	bd30      	pop	{r4, r5, pc}
   b9142:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9146:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b914a:	2d19      	cmp	r5, #25
   b914c:	bf98      	it	ls
   b914e:	3220      	addls	r2, #32
   b9150:	42a2      	cmp	r2, r4
   b9152:	d0f0      	beq.n	b9136 <__match+0x6>
   b9154:	2000      	movs	r0, #0
   b9156:	e7f3      	b.n	b9140 <__match+0x10>

000b9158 <__hexnan>:
   b9158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b915c:	680b      	ldr	r3, [r1, #0]
   b915e:	115e      	asrs	r6, r3, #5
   b9160:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b9164:	f013 031f 	ands.w	r3, r3, #31
   b9168:	b087      	sub	sp, #28
   b916a:	bf18      	it	ne
   b916c:	3604      	addne	r6, #4
   b916e:	2500      	movs	r5, #0
   b9170:	1f37      	subs	r7, r6, #4
   b9172:	4690      	mov	r8, r2
   b9174:	6802      	ldr	r2, [r0, #0]
   b9176:	9301      	str	r3, [sp, #4]
   b9178:	4682      	mov	sl, r0
   b917a:	f846 5c04 	str.w	r5, [r6, #-4]
   b917e:	46b9      	mov	r9, r7
   b9180:	463c      	mov	r4, r7
   b9182:	9502      	str	r5, [sp, #8]
   b9184:	46ab      	mov	fp, r5
   b9186:	7851      	ldrb	r1, [r2, #1]
   b9188:	1c53      	adds	r3, r2, #1
   b918a:	9303      	str	r3, [sp, #12]
   b918c:	b341      	cbz	r1, b91e0 <__hexnan+0x88>
   b918e:	4608      	mov	r0, r1
   b9190:	9205      	str	r2, [sp, #20]
   b9192:	9104      	str	r1, [sp, #16]
   b9194:	f7ff fd5e 	bl	b8c54 <__hexdig_fun>
   b9198:	2800      	cmp	r0, #0
   b919a:	d14f      	bne.n	b923c <__hexnan+0xe4>
   b919c:	9904      	ldr	r1, [sp, #16]
   b919e:	9a05      	ldr	r2, [sp, #20]
   b91a0:	2920      	cmp	r1, #32
   b91a2:	d818      	bhi.n	b91d6 <__hexnan+0x7e>
   b91a4:	9b02      	ldr	r3, [sp, #8]
   b91a6:	459b      	cmp	fp, r3
   b91a8:	dd13      	ble.n	b91d2 <__hexnan+0x7a>
   b91aa:	454c      	cmp	r4, r9
   b91ac:	d206      	bcs.n	b91bc <__hexnan+0x64>
   b91ae:	2d07      	cmp	r5, #7
   b91b0:	dc04      	bgt.n	b91bc <__hexnan+0x64>
   b91b2:	462a      	mov	r2, r5
   b91b4:	4649      	mov	r1, r9
   b91b6:	4620      	mov	r0, r4
   b91b8:	f7ff ffa8 	bl	b910c <L_shift>
   b91bc:	4544      	cmp	r4, r8
   b91be:	d950      	bls.n	b9262 <__hexnan+0x10a>
   b91c0:	2300      	movs	r3, #0
   b91c2:	f1a4 0904 	sub.w	r9, r4, #4
   b91c6:	f844 3c04 	str.w	r3, [r4, #-4]
   b91ca:	f8cd b008 	str.w	fp, [sp, #8]
   b91ce:	464c      	mov	r4, r9
   b91d0:	461d      	mov	r5, r3
   b91d2:	9a03      	ldr	r2, [sp, #12]
   b91d4:	e7d7      	b.n	b9186 <__hexnan+0x2e>
   b91d6:	2929      	cmp	r1, #41	; 0x29
   b91d8:	d156      	bne.n	b9288 <__hexnan+0x130>
   b91da:	3202      	adds	r2, #2
   b91dc:	f8ca 2000 	str.w	r2, [sl]
   b91e0:	f1bb 0f00 	cmp.w	fp, #0
   b91e4:	d050      	beq.n	b9288 <__hexnan+0x130>
   b91e6:	454c      	cmp	r4, r9
   b91e8:	d206      	bcs.n	b91f8 <__hexnan+0xa0>
   b91ea:	2d07      	cmp	r5, #7
   b91ec:	dc04      	bgt.n	b91f8 <__hexnan+0xa0>
   b91ee:	462a      	mov	r2, r5
   b91f0:	4649      	mov	r1, r9
   b91f2:	4620      	mov	r0, r4
   b91f4:	f7ff ff8a 	bl	b910c <L_shift>
   b91f8:	4544      	cmp	r4, r8
   b91fa:	d934      	bls.n	b9266 <__hexnan+0x10e>
   b91fc:	f1a8 0204 	sub.w	r2, r8, #4
   b9200:	4623      	mov	r3, r4
   b9202:	f853 1b04 	ldr.w	r1, [r3], #4
   b9206:	f842 1f04 	str.w	r1, [r2, #4]!
   b920a:	429f      	cmp	r7, r3
   b920c:	d2f9      	bcs.n	b9202 <__hexnan+0xaa>
   b920e:	1b3b      	subs	r3, r7, r4
   b9210:	f023 0303 	bic.w	r3, r3, #3
   b9214:	3304      	adds	r3, #4
   b9216:	3401      	adds	r4, #1
   b9218:	3e03      	subs	r6, #3
   b921a:	42b4      	cmp	r4, r6
   b921c:	bf88      	it	hi
   b921e:	2304      	movhi	r3, #4
   b9220:	4443      	add	r3, r8
   b9222:	2200      	movs	r2, #0
   b9224:	f843 2b04 	str.w	r2, [r3], #4
   b9228:	429f      	cmp	r7, r3
   b922a:	d2fb      	bcs.n	b9224 <__hexnan+0xcc>
   b922c:	683b      	ldr	r3, [r7, #0]
   b922e:	b91b      	cbnz	r3, b9238 <__hexnan+0xe0>
   b9230:	4547      	cmp	r7, r8
   b9232:	d127      	bne.n	b9284 <__hexnan+0x12c>
   b9234:	2301      	movs	r3, #1
   b9236:	603b      	str	r3, [r7, #0]
   b9238:	2005      	movs	r0, #5
   b923a:	e026      	b.n	b928a <__hexnan+0x132>
   b923c:	3501      	adds	r5, #1
   b923e:	2d08      	cmp	r5, #8
   b9240:	f10b 0b01 	add.w	fp, fp, #1
   b9244:	dd06      	ble.n	b9254 <__hexnan+0xfc>
   b9246:	4544      	cmp	r4, r8
   b9248:	d9c3      	bls.n	b91d2 <__hexnan+0x7a>
   b924a:	2300      	movs	r3, #0
   b924c:	f844 3c04 	str.w	r3, [r4, #-4]
   b9250:	2501      	movs	r5, #1
   b9252:	3c04      	subs	r4, #4
   b9254:	6822      	ldr	r2, [r4, #0]
   b9256:	f000 000f 	and.w	r0, r0, #15
   b925a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b925e:	6022      	str	r2, [r4, #0]
   b9260:	e7b7      	b.n	b91d2 <__hexnan+0x7a>
   b9262:	2508      	movs	r5, #8
   b9264:	e7b5      	b.n	b91d2 <__hexnan+0x7a>
   b9266:	9b01      	ldr	r3, [sp, #4]
   b9268:	2b00      	cmp	r3, #0
   b926a:	d0df      	beq.n	b922c <__hexnan+0xd4>
   b926c:	f04f 32ff 	mov.w	r2, #4294967295
   b9270:	f1c3 0320 	rsb	r3, r3, #32
   b9274:	fa22 f303 	lsr.w	r3, r2, r3
   b9278:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b927c:	401a      	ands	r2, r3
   b927e:	f846 2c04 	str.w	r2, [r6, #-4]
   b9282:	e7d3      	b.n	b922c <__hexnan+0xd4>
   b9284:	3f04      	subs	r7, #4
   b9286:	e7d1      	b.n	b922c <__hexnan+0xd4>
   b9288:	2004      	movs	r0, #4
   b928a:	b007      	add	sp, #28
   b928c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9290 <__retarget_lock_acquire_recursive>:
   b9290:	4770      	bx	lr

000b9292 <__retarget_lock_release>:
   b9292:	4770      	bx	lr

000b9294 <__retarget_lock_release_recursive>:
   b9294:	4770      	bx	lr

000b9296 <__ascii_mbtowc>:
   b9296:	b082      	sub	sp, #8
   b9298:	b901      	cbnz	r1, b929c <__ascii_mbtowc+0x6>
   b929a:	a901      	add	r1, sp, #4
   b929c:	b142      	cbz	r2, b92b0 <__ascii_mbtowc+0x1a>
   b929e:	b14b      	cbz	r3, b92b4 <__ascii_mbtowc+0x1e>
   b92a0:	7813      	ldrb	r3, [r2, #0]
   b92a2:	600b      	str	r3, [r1, #0]
   b92a4:	7812      	ldrb	r2, [r2, #0]
   b92a6:	1e10      	subs	r0, r2, #0
   b92a8:	bf18      	it	ne
   b92aa:	2001      	movne	r0, #1
   b92ac:	b002      	add	sp, #8
   b92ae:	4770      	bx	lr
   b92b0:	4610      	mov	r0, r2
   b92b2:	e7fb      	b.n	b92ac <__ascii_mbtowc+0x16>
   b92b4:	f06f 0001 	mvn.w	r0, #1
   b92b8:	e7f8      	b.n	b92ac <__ascii_mbtowc+0x16>
	...

000b92bc <_Balloc>:
   b92bc:	b570      	push	{r4, r5, r6, lr}
   b92be:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b92c0:	4604      	mov	r4, r0
   b92c2:	460d      	mov	r5, r1
   b92c4:	b976      	cbnz	r6, b92e4 <_Balloc+0x28>
   b92c6:	2010      	movs	r0, #16
   b92c8:	f7fc f966 	bl	b5598 <malloc>
   b92cc:	4602      	mov	r2, r0
   b92ce:	6260      	str	r0, [r4, #36]	; 0x24
   b92d0:	b920      	cbnz	r0, b92dc <_Balloc+0x20>
   b92d2:	4b18      	ldr	r3, [pc, #96]	; (b9334 <_Balloc+0x78>)
   b92d4:	4818      	ldr	r0, [pc, #96]	; (b9338 <_Balloc+0x7c>)
   b92d6:	2166      	movs	r1, #102	; 0x66
   b92d8:	f7fc f9a6 	bl	b5628 <__assert_func>
   b92dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b92e0:	6006      	str	r6, [r0, #0]
   b92e2:	60c6      	str	r6, [r0, #12]
   b92e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b92e6:	68f3      	ldr	r3, [r6, #12]
   b92e8:	b183      	cbz	r3, b930c <_Balloc+0x50>
   b92ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b92ec:	68db      	ldr	r3, [r3, #12]
   b92ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b92f2:	b9b8      	cbnz	r0, b9324 <_Balloc+0x68>
   b92f4:	2101      	movs	r1, #1
   b92f6:	fa01 f605 	lsl.w	r6, r1, r5
   b92fa:	1d72      	adds	r2, r6, #5
   b92fc:	0092      	lsls	r2, r2, #2
   b92fe:	4620      	mov	r0, r4
   b9300:	f000 fc9d 	bl	b9c3e <_calloc_r>
   b9304:	b160      	cbz	r0, b9320 <_Balloc+0x64>
   b9306:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b930a:	e00e      	b.n	b932a <_Balloc+0x6e>
   b930c:	2221      	movs	r2, #33	; 0x21
   b930e:	2104      	movs	r1, #4
   b9310:	4620      	mov	r0, r4
   b9312:	f000 fc94 	bl	b9c3e <_calloc_r>
   b9316:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9318:	60f0      	str	r0, [r6, #12]
   b931a:	68db      	ldr	r3, [r3, #12]
   b931c:	2b00      	cmp	r3, #0
   b931e:	d1e4      	bne.n	b92ea <_Balloc+0x2e>
   b9320:	2000      	movs	r0, #0
   b9322:	bd70      	pop	{r4, r5, r6, pc}
   b9324:	6802      	ldr	r2, [r0, #0]
   b9326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b932a:	2300      	movs	r3, #0
   b932c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b9330:	e7f7      	b.n	b9322 <_Balloc+0x66>
   b9332:	bf00      	nop
   b9334:	000ba209 	.word	0x000ba209
   b9338:	000ba52c 	.word	0x000ba52c

000b933c <_Bfree>:
   b933c:	b570      	push	{r4, r5, r6, lr}
   b933e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9340:	4605      	mov	r5, r0
   b9342:	460c      	mov	r4, r1
   b9344:	b976      	cbnz	r6, b9364 <_Bfree+0x28>
   b9346:	2010      	movs	r0, #16
   b9348:	f7fc f926 	bl	b5598 <malloc>
   b934c:	4602      	mov	r2, r0
   b934e:	6268      	str	r0, [r5, #36]	; 0x24
   b9350:	b920      	cbnz	r0, b935c <_Bfree+0x20>
   b9352:	4b09      	ldr	r3, [pc, #36]	; (b9378 <_Bfree+0x3c>)
   b9354:	4809      	ldr	r0, [pc, #36]	; (b937c <_Bfree+0x40>)
   b9356:	218a      	movs	r1, #138	; 0x8a
   b9358:	f7fc f966 	bl	b5628 <__assert_func>
   b935c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9360:	6006      	str	r6, [r0, #0]
   b9362:	60c6      	str	r6, [r0, #12]
   b9364:	b13c      	cbz	r4, b9376 <_Bfree+0x3a>
   b9366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9368:	6862      	ldr	r2, [r4, #4]
   b936a:	68db      	ldr	r3, [r3, #12]
   b936c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9370:	6021      	str	r1, [r4, #0]
   b9372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9376:	bd70      	pop	{r4, r5, r6, pc}
   b9378:	000ba209 	.word	0x000ba209
   b937c:	000ba52c 	.word	0x000ba52c

000b9380 <__multadd>:
   b9380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9384:	690d      	ldr	r5, [r1, #16]
   b9386:	4607      	mov	r7, r0
   b9388:	460c      	mov	r4, r1
   b938a:	461e      	mov	r6, r3
   b938c:	f101 0c14 	add.w	ip, r1, #20
   b9390:	2000      	movs	r0, #0
   b9392:	f8dc 3000 	ldr.w	r3, [ip]
   b9396:	b299      	uxth	r1, r3
   b9398:	fb02 6101 	mla	r1, r2, r1, r6
   b939c:	0c1e      	lsrs	r6, r3, #16
   b939e:	0c0b      	lsrs	r3, r1, #16
   b93a0:	fb02 3306 	mla	r3, r2, r6, r3
   b93a4:	b289      	uxth	r1, r1
   b93a6:	3001      	adds	r0, #1
   b93a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b93ac:	4285      	cmp	r5, r0
   b93ae:	f84c 1b04 	str.w	r1, [ip], #4
   b93b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b93b6:	dcec      	bgt.n	b9392 <__multadd+0x12>
   b93b8:	b30e      	cbz	r6, b93fe <__multadd+0x7e>
   b93ba:	68a3      	ldr	r3, [r4, #8]
   b93bc:	42ab      	cmp	r3, r5
   b93be:	dc19      	bgt.n	b93f4 <__multadd+0x74>
   b93c0:	6861      	ldr	r1, [r4, #4]
   b93c2:	4638      	mov	r0, r7
   b93c4:	3101      	adds	r1, #1
   b93c6:	f7ff ff79 	bl	b92bc <_Balloc>
   b93ca:	4680      	mov	r8, r0
   b93cc:	b928      	cbnz	r0, b93da <__multadd+0x5a>
   b93ce:	4602      	mov	r2, r0
   b93d0:	4b0c      	ldr	r3, [pc, #48]	; (b9404 <__multadd+0x84>)
   b93d2:	480d      	ldr	r0, [pc, #52]	; (b9408 <__multadd+0x88>)
   b93d4:	21b5      	movs	r1, #181	; 0xb5
   b93d6:	f7fc f927 	bl	b5628 <__assert_func>
   b93da:	6922      	ldr	r2, [r4, #16]
   b93dc:	3202      	adds	r2, #2
   b93de:	f104 010c 	add.w	r1, r4, #12
   b93e2:	0092      	lsls	r2, r2, #2
   b93e4:	300c      	adds	r0, #12
   b93e6:	f7fe fbc8 	bl	b7b7a <memcpy>
   b93ea:	4621      	mov	r1, r4
   b93ec:	4638      	mov	r0, r7
   b93ee:	f7ff ffa5 	bl	b933c <_Bfree>
   b93f2:	4644      	mov	r4, r8
   b93f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b93f8:	3501      	adds	r5, #1
   b93fa:	615e      	str	r6, [r3, #20]
   b93fc:	6125      	str	r5, [r4, #16]
   b93fe:	4620      	mov	r0, r4
   b9400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9404:	000ba480 	.word	0x000ba480
   b9408:	000ba52c 	.word	0x000ba52c

000b940c <__s2b>:
   b940c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9410:	460c      	mov	r4, r1
   b9412:	4615      	mov	r5, r2
   b9414:	461f      	mov	r7, r3
   b9416:	2209      	movs	r2, #9
   b9418:	3308      	adds	r3, #8
   b941a:	4606      	mov	r6, r0
   b941c:	fb93 f3f2 	sdiv	r3, r3, r2
   b9420:	2100      	movs	r1, #0
   b9422:	2201      	movs	r2, #1
   b9424:	429a      	cmp	r2, r3
   b9426:	db09      	blt.n	b943c <__s2b+0x30>
   b9428:	4630      	mov	r0, r6
   b942a:	f7ff ff47 	bl	b92bc <_Balloc>
   b942e:	b940      	cbnz	r0, b9442 <__s2b+0x36>
   b9430:	4602      	mov	r2, r0
   b9432:	4b19      	ldr	r3, [pc, #100]	; (b9498 <__s2b+0x8c>)
   b9434:	4819      	ldr	r0, [pc, #100]	; (b949c <__s2b+0x90>)
   b9436:	21ce      	movs	r1, #206	; 0xce
   b9438:	f7fc f8f6 	bl	b5628 <__assert_func>
   b943c:	0052      	lsls	r2, r2, #1
   b943e:	3101      	adds	r1, #1
   b9440:	e7f0      	b.n	b9424 <__s2b+0x18>
   b9442:	9b08      	ldr	r3, [sp, #32]
   b9444:	6143      	str	r3, [r0, #20]
   b9446:	2d09      	cmp	r5, #9
   b9448:	f04f 0301 	mov.w	r3, #1
   b944c:	6103      	str	r3, [r0, #16]
   b944e:	dd16      	ble.n	b947e <__s2b+0x72>
   b9450:	f104 0909 	add.w	r9, r4, #9
   b9454:	46c8      	mov	r8, r9
   b9456:	442c      	add	r4, r5
   b9458:	f818 3b01 	ldrb.w	r3, [r8], #1
   b945c:	4601      	mov	r1, r0
   b945e:	3b30      	subs	r3, #48	; 0x30
   b9460:	220a      	movs	r2, #10
   b9462:	4630      	mov	r0, r6
   b9464:	f7ff ff8c 	bl	b9380 <__multadd>
   b9468:	45a0      	cmp	r8, r4
   b946a:	d1f5      	bne.n	b9458 <__s2b+0x4c>
   b946c:	f1a5 0408 	sub.w	r4, r5, #8
   b9470:	444c      	add	r4, r9
   b9472:	1b2d      	subs	r5, r5, r4
   b9474:	1963      	adds	r3, r4, r5
   b9476:	42bb      	cmp	r3, r7
   b9478:	db04      	blt.n	b9484 <__s2b+0x78>
   b947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b947e:	340a      	adds	r4, #10
   b9480:	2509      	movs	r5, #9
   b9482:	e7f6      	b.n	b9472 <__s2b+0x66>
   b9484:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9488:	4601      	mov	r1, r0
   b948a:	3b30      	subs	r3, #48	; 0x30
   b948c:	220a      	movs	r2, #10
   b948e:	4630      	mov	r0, r6
   b9490:	f7ff ff76 	bl	b9380 <__multadd>
   b9494:	e7ee      	b.n	b9474 <__s2b+0x68>
   b9496:	bf00      	nop
   b9498:	000ba480 	.word	0x000ba480
   b949c:	000ba52c 	.word	0x000ba52c

000b94a0 <__hi0bits>:
   b94a0:	0c03      	lsrs	r3, r0, #16
   b94a2:	041b      	lsls	r3, r3, #16
   b94a4:	b9d3      	cbnz	r3, b94dc <__hi0bits+0x3c>
   b94a6:	0400      	lsls	r0, r0, #16
   b94a8:	2310      	movs	r3, #16
   b94aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b94ae:	bf04      	itt	eq
   b94b0:	0200      	lsleq	r0, r0, #8
   b94b2:	3308      	addeq	r3, #8
   b94b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b94b8:	bf04      	itt	eq
   b94ba:	0100      	lsleq	r0, r0, #4
   b94bc:	3304      	addeq	r3, #4
   b94be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b94c2:	bf04      	itt	eq
   b94c4:	0080      	lsleq	r0, r0, #2
   b94c6:	3302      	addeq	r3, #2
   b94c8:	2800      	cmp	r0, #0
   b94ca:	db05      	blt.n	b94d8 <__hi0bits+0x38>
   b94cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b94d0:	f103 0301 	add.w	r3, r3, #1
   b94d4:	bf08      	it	eq
   b94d6:	2320      	moveq	r3, #32
   b94d8:	4618      	mov	r0, r3
   b94da:	4770      	bx	lr
   b94dc:	2300      	movs	r3, #0
   b94de:	e7e4      	b.n	b94aa <__hi0bits+0xa>

000b94e0 <__lo0bits>:
   b94e0:	6803      	ldr	r3, [r0, #0]
   b94e2:	f013 0207 	ands.w	r2, r3, #7
   b94e6:	4601      	mov	r1, r0
   b94e8:	d00b      	beq.n	b9502 <__lo0bits+0x22>
   b94ea:	07da      	lsls	r2, r3, #31
   b94ec:	d423      	bmi.n	b9536 <__lo0bits+0x56>
   b94ee:	0798      	lsls	r0, r3, #30
   b94f0:	bf49      	itett	mi
   b94f2:	085b      	lsrmi	r3, r3, #1
   b94f4:	089b      	lsrpl	r3, r3, #2
   b94f6:	2001      	movmi	r0, #1
   b94f8:	600b      	strmi	r3, [r1, #0]
   b94fa:	bf5c      	itt	pl
   b94fc:	600b      	strpl	r3, [r1, #0]
   b94fe:	2002      	movpl	r0, #2
   b9500:	4770      	bx	lr
   b9502:	b298      	uxth	r0, r3
   b9504:	b9a8      	cbnz	r0, b9532 <__lo0bits+0x52>
   b9506:	0c1b      	lsrs	r3, r3, #16
   b9508:	2010      	movs	r0, #16
   b950a:	b2da      	uxtb	r2, r3
   b950c:	b90a      	cbnz	r2, b9512 <__lo0bits+0x32>
   b950e:	3008      	adds	r0, #8
   b9510:	0a1b      	lsrs	r3, r3, #8
   b9512:	071a      	lsls	r2, r3, #28
   b9514:	bf04      	itt	eq
   b9516:	091b      	lsreq	r3, r3, #4
   b9518:	3004      	addeq	r0, #4
   b951a:	079a      	lsls	r2, r3, #30
   b951c:	bf04      	itt	eq
   b951e:	089b      	lsreq	r3, r3, #2
   b9520:	3002      	addeq	r0, #2
   b9522:	07da      	lsls	r2, r3, #31
   b9524:	d403      	bmi.n	b952e <__lo0bits+0x4e>
   b9526:	085b      	lsrs	r3, r3, #1
   b9528:	f100 0001 	add.w	r0, r0, #1
   b952c:	d005      	beq.n	b953a <__lo0bits+0x5a>
   b952e:	600b      	str	r3, [r1, #0]
   b9530:	4770      	bx	lr
   b9532:	4610      	mov	r0, r2
   b9534:	e7e9      	b.n	b950a <__lo0bits+0x2a>
   b9536:	2000      	movs	r0, #0
   b9538:	4770      	bx	lr
   b953a:	2020      	movs	r0, #32
   b953c:	4770      	bx	lr
	...

000b9540 <__i2b>:
   b9540:	b510      	push	{r4, lr}
   b9542:	460c      	mov	r4, r1
   b9544:	2101      	movs	r1, #1
   b9546:	f7ff feb9 	bl	b92bc <_Balloc>
   b954a:	4602      	mov	r2, r0
   b954c:	b928      	cbnz	r0, b955a <__i2b+0x1a>
   b954e:	4b05      	ldr	r3, [pc, #20]	; (b9564 <__i2b+0x24>)
   b9550:	4805      	ldr	r0, [pc, #20]	; (b9568 <__i2b+0x28>)
   b9552:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9556:	f7fc f867 	bl	b5628 <__assert_func>
   b955a:	2301      	movs	r3, #1
   b955c:	6144      	str	r4, [r0, #20]
   b955e:	6103      	str	r3, [r0, #16]
   b9560:	bd10      	pop	{r4, pc}
   b9562:	bf00      	nop
   b9564:	000ba480 	.word	0x000ba480
   b9568:	000ba52c 	.word	0x000ba52c

000b956c <__multiply>:
   b956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9570:	4691      	mov	r9, r2
   b9572:	690a      	ldr	r2, [r1, #16]
   b9574:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9578:	429a      	cmp	r2, r3
   b957a:	bfb8      	it	lt
   b957c:	460b      	movlt	r3, r1
   b957e:	460c      	mov	r4, r1
   b9580:	bfbc      	itt	lt
   b9582:	464c      	movlt	r4, r9
   b9584:	4699      	movlt	r9, r3
   b9586:	6927      	ldr	r7, [r4, #16]
   b9588:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b958c:	68a3      	ldr	r3, [r4, #8]
   b958e:	6861      	ldr	r1, [r4, #4]
   b9590:	eb07 060a 	add.w	r6, r7, sl
   b9594:	42b3      	cmp	r3, r6
   b9596:	b085      	sub	sp, #20
   b9598:	bfb8      	it	lt
   b959a:	3101      	addlt	r1, #1
   b959c:	f7ff fe8e 	bl	b92bc <_Balloc>
   b95a0:	b930      	cbnz	r0, b95b0 <__multiply+0x44>
   b95a2:	4602      	mov	r2, r0
   b95a4:	4b44      	ldr	r3, [pc, #272]	; (b96b8 <__multiply+0x14c>)
   b95a6:	4845      	ldr	r0, [pc, #276]	; (b96bc <__multiply+0x150>)
   b95a8:	f240 115d 	movw	r1, #349	; 0x15d
   b95ac:	f7fc f83c 	bl	b5628 <__assert_func>
   b95b0:	f100 0514 	add.w	r5, r0, #20
   b95b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b95b8:	462b      	mov	r3, r5
   b95ba:	2200      	movs	r2, #0
   b95bc:	4543      	cmp	r3, r8
   b95be:	d321      	bcc.n	b9604 <__multiply+0x98>
   b95c0:	f104 0314 	add.w	r3, r4, #20
   b95c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b95c8:	f109 0314 	add.w	r3, r9, #20
   b95cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b95d0:	9202      	str	r2, [sp, #8]
   b95d2:	1b3a      	subs	r2, r7, r4
   b95d4:	3a15      	subs	r2, #21
   b95d6:	f022 0203 	bic.w	r2, r2, #3
   b95da:	3204      	adds	r2, #4
   b95dc:	f104 0115 	add.w	r1, r4, #21
   b95e0:	428f      	cmp	r7, r1
   b95e2:	bf38      	it	cc
   b95e4:	2204      	movcc	r2, #4
   b95e6:	9201      	str	r2, [sp, #4]
   b95e8:	9a02      	ldr	r2, [sp, #8]
   b95ea:	9303      	str	r3, [sp, #12]
   b95ec:	429a      	cmp	r2, r3
   b95ee:	d80c      	bhi.n	b960a <__multiply+0x9e>
   b95f0:	2e00      	cmp	r6, #0
   b95f2:	dd03      	ble.n	b95fc <__multiply+0x90>
   b95f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b95f8:	2b00      	cmp	r3, #0
   b95fa:	d05a      	beq.n	b96b2 <__multiply+0x146>
   b95fc:	6106      	str	r6, [r0, #16]
   b95fe:	b005      	add	sp, #20
   b9600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9604:	f843 2b04 	str.w	r2, [r3], #4
   b9608:	e7d8      	b.n	b95bc <__multiply+0x50>
   b960a:	f8b3 a000 	ldrh.w	sl, [r3]
   b960e:	f1ba 0f00 	cmp.w	sl, #0
   b9612:	d024      	beq.n	b965e <__multiply+0xf2>
   b9614:	f104 0e14 	add.w	lr, r4, #20
   b9618:	46a9      	mov	r9, r5
   b961a:	f04f 0c00 	mov.w	ip, #0
   b961e:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9622:	f8d9 1000 	ldr.w	r1, [r9]
   b9626:	fa1f fb82 	uxth.w	fp, r2
   b962a:	b289      	uxth	r1, r1
   b962c:	fb0a 110b 	mla	r1, sl, fp, r1
   b9630:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9634:	f8d9 2000 	ldr.w	r2, [r9]
   b9638:	4461      	add	r1, ip
   b963a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b963e:	fb0a c20b 	mla	r2, sl, fp, ip
   b9642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9646:	b289      	uxth	r1, r1
   b9648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b964c:	4577      	cmp	r7, lr
   b964e:	f849 1b04 	str.w	r1, [r9], #4
   b9652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9656:	d8e2      	bhi.n	b961e <__multiply+0xb2>
   b9658:	9a01      	ldr	r2, [sp, #4]
   b965a:	f845 c002 	str.w	ip, [r5, r2]
   b965e:	9a03      	ldr	r2, [sp, #12]
   b9660:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9664:	3304      	adds	r3, #4
   b9666:	f1b9 0f00 	cmp.w	r9, #0
   b966a:	d020      	beq.n	b96ae <__multiply+0x142>
   b966c:	6829      	ldr	r1, [r5, #0]
   b966e:	f104 0c14 	add.w	ip, r4, #20
   b9672:	46ae      	mov	lr, r5
   b9674:	f04f 0a00 	mov.w	sl, #0
   b9678:	f8bc b000 	ldrh.w	fp, [ip]
   b967c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9680:	fb09 220b 	mla	r2, r9, fp, r2
   b9684:	4492      	add	sl, r2
   b9686:	b289      	uxth	r1, r1
   b9688:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b968c:	f84e 1b04 	str.w	r1, [lr], #4
   b9690:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9694:	f8be 1000 	ldrh.w	r1, [lr]
   b9698:	0c12      	lsrs	r2, r2, #16
   b969a:	fb09 1102 	mla	r1, r9, r2, r1
   b969e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b96a2:	4567      	cmp	r7, ip
   b96a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b96a8:	d8e6      	bhi.n	b9678 <__multiply+0x10c>
   b96aa:	9a01      	ldr	r2, [sp, #4]
   b96ac:	50a9      	str	r1, [r5, r2]
   b96ae:	3504      	adds	r5, #4
   b96b0:	e79a      	b.n	b95e8 <__multiply+0x7c>
   b96b2:	3e01      	subs	r6, #1
   b96b4:	e79c      	b.n	b95f0 <__multiply+0x84>
   b96b6:	bf00      	nop
   b96b8:	000ba480 	.word	0x000ba480
   b96bc:	000ba52c 	.word	0x000ba52c

000b96c0 <__pow5mult>:
   b96c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b96c4:	4615      	mov	r5, r2
   b96c6:	f012 0203 	ands.w	r2, r2, #3
   b96ca:	4606      	mov	r6, r0
   b96cc:	460f      	mov	r7, r1
   b96ce:	d007      	beq.n	b96e0 <__pow5mult+0x20>
   b96d0:	4c25      	ldr	r4, [pc, #148]	; (b9768 <__pow5mult+0xa8>)
   b96d2:	3a01      	subs	r2, #1
   b96d4:	2300      	movs	r3, #0
   b96d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b96da:	f7ff fe51 	bl	b9380 <__multadd>
   b96de:	4607      	mov	r7, r0
   b96e0:	10ad      	asrs	r5, r5, #2
   b96e2:	d03d      	beq.n	b9760 <__pow5mult+0xa0>
   b96e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b96e6:	b97c      	cbnz	r4, b9708 <__pow5mult+0x48>
   b96e8:	2010      	movs	r0, #16
   b96ea:	f7fb ff55 	bl	b5598 <malloc>
   b96ee:	4602      	mov	r2, r0
   b96f0:	6270      	str	r0, [r6, #36]	; 0x24
   b96f2:	b928      	cbnz	r0, b9700 <__pow5mult+0x40>
   b96f4:	4b1d      	ldr	r3, [pc, #116]	; (b976c <__pow5mult+0xac>)
   b96f6:	481e      	ldr	r0, [pc, #120]	; (b9770 <__pow5mult+0xb0>)
   b96f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b96fc:	f7fb ff94 	bl	b5628 <__assert_func>
   b9700:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9704:	6004      	str	r4, [r0, #0]
   b9706:	60c4      	str	r4, [r0, #12]
   b9708:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b970c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9710:	b94c      	cbnz	r4, b9726 <__pow5mult+0x66>
   b9712:	f240 2171 	movw	r1, #625	; 0x271
   b9716:	4630      	mov	r0, r6
   b9718:	f7ff ff12 	bl	b9540 <__i2b>
   b971c:	2300      	movs	r3, #0
   b971e:	f8c8 0008 	str.w	r0, [r8, #8]
   b9722:	4604      	mov	r4, r0
   b9724:	6003      	str	r3, [r0, #0]
   b9726:	f04f 0900 	mov.w	r9, #0
   b972a:	07eb      	lsls	r3, r5, #31
   b972c:	d50a      	bpl.n	b9744 <__pow5mult+0x84>
   b972e:	4639      	mov	r1, r7
   b9730:	4622      	mov	r2, r4
   b9732:	4630      	mov	r0, r6
   b9734:	f7ff ff1a 	bl	b956c <__multiply>
   b9738:	4639      	mov	r1, r7
   b973a:	4680      	mov	r8, r0
   b973c:	4630      	mov	r0, r6
   b973e:	f7ff fdfd 	bl	b933c <_Bfree>
   b9742:	4647      	mov	r7, r8
   b9744:	106d      	asrs	r5, r5, #1
   b9746:	d00b      	beq.n	b9760 <__pow5mult+0xa0>
   b9748:	6820      	ldr	r0, [r4, #0]
   b974a:	b938      	cbnz	r0, b975c <__pow5mult+0x9c>
   b974c:	4622      	mov	r2, r4
   b974e:	4621      	mov	r1, r4
   b9750:	4630      	mov	r0, r6
   b9752:	f7ff ff0b 	bl	b956c <__multiply>
   b9756:	6020      	str	r0, [r4, #0]
   b9758:	f8c0 9000 	str.w	r9, [r0]
   b975c:	4604      	mov	r4, r0
   b975e:	e7e4      	b.n	b972a <__pow5mult+0x6a>
   b9760:	4638      	mov	r0, r7
   b9762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9766:	bf00      	nop
   b9768:	000ba6a0 	.word	0x000ba6a0
   b976c:	000ba209 	.word	0x000ba209
   b9770:	000ba52c 	.word	0x000ba52c

000b9774 <__lshift>:
   b9774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9778:	460c      	mov	r4, r1
   b977a:	6849      	ldr	r1, [r1, #4]
   b977c:	6923      	ldr	r3, [r4, #16]
   b977e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9782:	68a3      	ldr	r3, [r4, #8]
   b9784:	4607      	mov	r7, r0
   b9786:	4691      	mov	r9, r2
   b9788:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b978c:	f108 0601 	add.w	r6, r8, #1
   b9790:	42b3      	cmp	r3, r6
   b9792:	db0b      	blt.n	b97ac <__lshift+0x38>
   b9794:	4638      	mov	r0, r7
   b9796:	f7ff fd91 	bl	b92bc <_Balloc>
   b979a:	4605      	mov	r5, r0
   b979c:	b948      	cbnz	r0, b97b2 <__lshift+0x3e>
   b979e:	4602      	mov	r2, r0
   b97a0:	4b2a      	ldr	r3, [pc, #168]	; (b984c <__lshift+0xd8>)
   b97a2:	482b      	ldr	r0, [pc, #172]	; (b9850 <__lshift+0xdc>)
   b97a4:	f240 11d9 	movw	r1, #473	; 0x1d9
   b97a8:	f7fb ff3e 	bl	b5628 <__assert_func>
   b97ac:	3101      	adds	r1, #1
   b97ae:	005b      	lsls	r3, r3, #1
   b97b0:	e7ee      	b.n	b9790 <__lshift+0x1c>
   b97b2:	2300      	movs	r3, #0
   b97b4:	f100 0114 	add.w	r1, r0, #20
   b97b8:	f100 0210 	add.w	r2, r0, #16
   b97bc:	4618      	mov	r0, r3
   b97be:	4553      	cmp	r3, sl
   b97c0:	db37      	blt.n	b9832 <__lshift+0xbe>
   b97c2:	6920      	ldr	r0, [r4, #16]
   b97c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b97c8:	f104 0314 	add.w	r3, r4, #20
   b97cc:	f019 091f 	ands.w	r9, r9, #31
   b97d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b97d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b97d8:	d02f      	beq.n	b983a <__lshift+0xc6>
   b97da:	f1c9 0e20 	rsb	lr, r9, #32
   b97de:	468a      	mov	sl, r1
   b97e0:	f04f 0c00 	mov.w	ip, #0
   b97e4:	681a      	ldr	r2, [r3, #0]
   b97e6:	fa02 f209 	lsl.w	r2, r2, r9
   b97ea:	ea42 020c 	orr.w	r2, r2, ip
   b97ee:	f84a 2b04 	str.w	r2, [sl], #4
   b97f2:	f853 2b04 	ldr.w	r2, [r3], #4
   b97f6:	4298      	cmp	r0, r3
   b97f8:	fa22 fc0e 	lsr.w	ip, r2, lr
   b97fc:	d8f2      	bhi.n	b97e4 <__lshift+0x70>
   b97fe:	1b03      	subs	r3, r0, r4
   b9800:	3b15      	subs	r3, #21
   b9802:	f023 0303 	bic.w	r3, r3, #3
   b9806:	3304      	adds	r3, #4
   b9808:	f104 0215 	add.w	r2, r4, #21
   b980c:	4290      	cmp	r0, r2
   b980e:	bf38      	it	cc
   b9810:	2304      	movcc	r3, #4
   b9812:	f841 c003 	str.w	ip, [r1, r3]
   b9816:	f1bc 0f00 	cmp.w	ip, #0
   b981a:	d001      	beq.n	b9820 <__lshift+0xac>
   b981c:	f108 0602 	add.w	r6, r8, #2
   b9820:	3e01      	subs	r6, #1
   b9822:	4638      	mov	r0, r7
   b9824:	612e      	str	r6, [r5, #16]
   b9826:	4621      	mov	r1, r4
   b9828:	f7ff fd88 	bl	b933c <_Bfree>
   b982c:	4628      	mov	r0, r5
   b982e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9832:	f842 0f04 	str.w	r0, [r2, #4]!
   b9836:	3301      	adds	r3, #1
   b9838:	e7c1      	b.n	b97be <__lshift+0x4a>
   b983a:	3904      	subs	r1, #4
   b983c:	f853 2b04 	ldr.w	r2, [r3], #4
   b9840:	f841 2f04 	str.w	r2, [r1, #4]!
   b9844:	4298      	cmp	r0, r3
   b9846:	d8f9      	bhi.n	b983c <__lshift+0xc8>
   b9848:	e7ea      	b.n	b9820 <__lshift+0xac>
   b984a:	bf00      	nop
   b984c:	000ba480 	.word	0x000ba480
   b9850:	000ba52c 	.word	0x000ba52c

000b9854 <__mcmp>:
   b9854:	b530      	push	{r4, r5, lr}
   b9856:	6902      	ldr	r2, [r0, #16]
   b9858:	690c      	ldr	r4, [r1, #16]
   b985a:	1b12      	subs	r2, r2, r4
   b985c:	d10e      	bne.n	b987c <__mcmp+0x28>
   b985e:	f100 0314 	add.w	r3, r0, #20
   b9862:	3114      	adds	r1, #20
   b9864:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9868:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b986c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9870:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9874:	42a5      	cmp	r5, r4
   b9876:	d003      	beq.n	b9880 <__mcmp+0x2c>
   b9878:	d305      	bcc.n	b9886 <__mcmp+0x32>
   b987a:	2201      	movs	r2, #1
   b987c:	4610      	mov	r0, r2
   b987e:	bd30      	pop	{r4, r5, pc}
   b9880:	4283      	cmp	r3, r0
   b9882:	d3f3      	bcc.n	b986c <__mcmp+0x18>
   b9884:	e7fa      	b.n	b987c <__mcmp+0x28>
   b9886:	f04f 32ff 	mov.w	r2, #4294967295
   b988a:	e7f7      	b.n	b987c <__mcmp+0x28>

000b988c <__mdiff>:
   b988c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9890:	460c      	mov	r4, r1
   b9892:	4606      	mov	r6, r0
   b9894:	4611      	mov	r1, r2
   b9896:	4620      	mov	r0, r4
   b9898:	4690      	mov	r8, r2
   b989a:	f7ff ffdb 	bl	b9854 <__mcmp>
   b989e:	1e05      	subs	r5, r0, #0
   b98a0:	d110      	bne.n	b98c4 <__mdiff+0x38>
   b98a2:	4629      	mov	r1, r5
   b98a4:	4630      	mov	r0, r6
   b98a6:	f7ff fd09 	bl	b92bc <_Balloc>
   b98aa:	b930      	cbnz	r0, b98ba <__mdiff+0x2e>
   b98ac:	4b3a      	ldr	r3, [pc, #232]	; (b9998 <__mdiff+0x10c>)
   b98ae:	4602      	mov	r2, r0
   b98b0:	f240 2132 	movw	r1, #562	; 0x232
   b98b4:	4839      	ldr	r0, [pc, #228]	; (b999c <__mdiff+0x110>)
   b98b6:	f7fb feb7 	bl	b5628 <__assert_func>
   b98ba:	2301      	movs	r3, #1
   b98bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b98c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b98c4:	bfa4      	itt	ge
   b98c6:	4643      	movge	r3, r8
   b98c8:	46a0      	movge	r8, r4
   b98ca:	4630      	mov	r0, r6
   b98cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b98d0:	bfa6      	itte	ge
   b98d2:	461c      	movge	r4, r3
   b98d4:	2500      	movge	r5, #0
   b98d6:	2501      	movlt	r5, #1
   b98d8:	f7ff fcf0 	bl	b92bc <_Balloc>
   b98dc:	b920      	cbnz	r0, b98e8 <__mdiff+0x5c>
   b98de:	4b2e      	ldr	r3, [pc, #184]	; (b9998 <__mdiff+0x10c>)
   b98e0:	4602      	mov	r2, r0
   b98e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   b98e6:	e7e5      	b.n	b98b4 <__mdiff+0x28>
   b98e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b98ec:	6926      	ldr	r6, [r4, #16]
   b98ee:	60c5      	str	r5, [r0, #12]
   b98f0:	f104 0914 	add.w	r9, r4, #20
   b98f4:	f108 0514 	add.w	r5, r8, #20
   b98f8:	f100 0e14 	add.w	lr, r0, #20
   b98fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9900:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b9904:	f108 0210 	add.w	r2, r8, #16
   b9908:	46f2      	mov	sl, lr
   b990a:	2100      	movs	r1, #0
   b990c:	f859 3b04 	ldr.w	r3, [r9], #4
   b9910:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b9914:	fa1f f883 	uxth.w	r8, r3
   b9918:	fa11 f18b 	uxtah	r1, r1, fp
   b991c:	0c1b      	lsrs	r3, r3, #16
   b991e:	eba1 0808 	sub.w	r8, r1, r8
   b9922:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b9926:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b992a:	fa1f f888 	uxth.w	r8, r8
   b992e:	1419      	asrs	r1, r3, #16
   b9930:	454e      	cmp	r6, r9
   b9932:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b9936:	f84a 3b04 	str.w	r3, [sl], #4
   b993a:	d8e7      	bhi.n	b990c <__mdiff+0x80>
   b993c:	1b33      	subs	r3, r6, r4
   b993e:	3b15      	subs	r3, #21
   b9940:	f023 0303 	bic.w	r3, r3, #3
   b9944:	3304      	adds	r3, #4
   b9946:	3415      	adds	r4, #21
   b9948:	42a6      	cmp	r6, r4
   b994a:	bf38      	it	cc
   b994c:	2304      	movcc	r3, #4
   b994e:	441d      	add	r5, r3
   b9950:	4473      	add	r3, lr
   b9952:	469e      	mov	lr, r3
   b9954:	462e      	mov	r6, r5
   b9956:	4566      	cmp	r6, ip
   b9958:	d30e      	bcc.n	b9978 <__mdiff+0xec>
   b995a:	f10c 0203 	add.w	r2, ip, #3
   b995e:	1b52      	subs	r2, r2, r5
   b9960:	f022 0203 	bic.w	r2, r2, #3
   b9964:	3d03      	subs	r5, #3
   b9966:	45ac      	cmp	ip, r5
   b9968:	bf38      	it	cc
   b996a:	2200      	movcc	r2, #0
   b996c:	441a      	add	r2, r3
   b996e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b9972:	b17b      	cbz	r3, b9994 <__mdiff+0x108>
   b9974:	6107      	str	r7, [r0, #16]
   b9976:	e7a3      	b.n	b98c0 <__mdiff+0x34>
   b9978:	f856 8b04 	ldr.w	r8, [r6], #4
   b997c:	fa11 f288 	uxtah	r2, r1, r8
   b9980:	1414      	asrs	r4, r2, #16
   b9982:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b9986:	b292      	uxth	r2, r2
   b9988:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b998c:	f84e 2b04 	str.w	r2, [lr], #4
   b9990:	1421      	asrs	r1, r4, #16
   b9992:	e7e0      	b.n	b9956 <__mdiff+0xca>
   b9994:	3f01      	subs	r7, #1
   b9996:	e7ea      	b.n	b996e <__mdiff+0xe2>
   b9998:	000ba480 	.word	0x000ba480
   b999c:	000ba52c 	.word	0x000ba52c

000b99a0 <__ulp>:
   b99a0:	b082      	sub	sp, #8
   b99a2:	ed8d 0b00 	vstr	d0, [sp]
   b99a6:	9b01      	ldr	r3, [sp, #4]
   b99a8:	4912      	ldr	r1, [pc, #72]	; (b99f4 <__ulp+0x54>)
   b99aa:	4019      	ands	r1, r3
   b99ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b99b0:	2900      	cmp	r1, #0
   b99b2:	dd05      	ble.n	b99c0 <__ulp+0x20>
   b99b4:	2200      	movs	r2, #0
   b99b6:	460b      	mov	r3, r1
   b99b8:	ec43 2b10 	vmov	d0, r2, r3
   b99bc:	b002      	add	sp, #8
   b99be:	4770      	bx	lr
   b99c0:	4249      	negs	r1, r1
   b99c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b99c6:	ea4f 5021 	mov.w	r0, r1, asr #20
   b99ca:	f04f 0200 	mov.w	r2, #0
   b99ce:	f04f 0300 	mov.w	r3, #0
   b99d2:	da04      	bge.n	b99de <__ulp+0x3e>
   b99d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b99d8:	fa41 f300 	asr.w	r3, r1, r0
   b99dc:	e7ec      	b.n	b99b8 <__ulp+0x18>
   b99de:	f1a0 0114 	sub.w	r1, r0, #20
   b99e2:	291e      	cmp	r1, #30
   b99e4:	bfda      	itte	le
   b99e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b99ea:	fa20 f101 	lsrle.w	r1, r0, r1
   b99ee:	2101      	movgt	r1, #1
   b99f0:	460a      	mov	r2, r1
   b99f2:	e7e1      	b.n	b99b8 <__ulp+0x18>
   b99f4:	7ff00000 	.word	0x7ff00000

000b99f8 <__b2d>:
   b99f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99fa:	6905      	ldr	r5, [r0, #16]
   b99fc:	f100 0714 	add.w	r7, r0, #20
   b9a00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b9a04:	1f2e      	subs	r6, r5, #4
   b9a06:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b9a0a:	4620      	mov	r0, r4
   b9a0c:	f7ff fd48 	bl	b94a0 <__hi0bits>
   b9a10:	f1c0 0320 	rsb	r3, r0, #32
   b9a14:	280a      	cmp	r0, #10
   b9a16:	f8df c07c 	ldr.w	ip, [pc, #124]	; b9a94 <__b2d+0x9c>
   b9a1a:	600b      	str	r3, [r1, #0]
   b9a1c:	dc14      	bgt.n	b9a48 <__b2d+0x50>
   b9a1e:	f1c0 0e0b 	rsb	lr, r0, #11
   b9a22:	fa24 f10e 	lsr.w	r1, r4, lr
   b9a26:	42b7      	cmp	r7, r6
   b9a28:	ea41 030c 	orr.w	r3, r1, ip
   b9a2c:	bf34      	ite	cc
   b9a2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9a32:	2100      	movcs	r1, #0
   b9a34:	3015      	adds	r0, #21
   b9a36:	fa04 f000 	lsl.w	r0, r4, r0
   b9a3a:	fa21 f10e 	lsr.w	r1, r1, lr
   b9a3e:	ea40 0201 	orr.w	r2, r0, r1
   b9a42:	ec43 2b10 	vmov	d0, r2, r3
   b9a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9a48:	42b7      	cmp	r7, r6
   b9a4a:	bf3a      	itte	cc
   b9a4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9a50:	f1a5 0608 	subcc.w	r6, r5, #8
   b9a54:	2100      	movcs	r1, #0
   b9a56:	380b      	subs	r0, #11
   b9a58:	d017      	beq.n	b9a8a <__b2d+0x92>
   b9a5a:	f1c0 0c20 	rsb	ip, r0, #32
   b9a5e:	fa04 f500 	lsl.w	r5, r4, r0
   b9a62:	42be      	cmp	r6, r7
   b9a64:	fa21 f40c 	lsr.w	r4, r1, ip
   b9a68:	ea45 0504 	orr.w	r5, r5, r4
   b9a6c:	bf8c      	ite	hi
   b9a6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b9a72:	2400      	movls	r4, #0
   b9a74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b9a78:	fa01 f000 	lsl.w	r0, r1, r0
   b9a7c:	fa24 f40c 	lsr.w	r4, r4, ip
   b9a80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b9a84:	ea40 0204 	orr.w	r2, r0, r4
   b9a88:	e7db      	b.n	b9a42 <__b2d+0x4a>
   b9a8a:	ea44 030c 	orr.w	r3, r4, ip
   b9a8e:	460a      	mov	r2, r1
   b9a90:	e7d7      	b.n	b9a42 <__b2d+0x4a>
   b9a92:	bf00      	nop
   b9a94:	3ff00000 	.word	0x3ff00000

000b9a98 <__d2b>:
   b9a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9a9c:	4689      	mov	r9, r1
   b9a9e:	2101      	movs	r1, #1
   b9aa0:	ec57 6b10 	vmov	r6, r7, d0
   b9aa4:	4690      	mov	r8, r2
   b9aa6:	f7ff fc09 	bl	b92bc <_Balloc>
   b9aaa:	4604      	mov	r4, r0
   b9aac:	b930      	cbnz	r0, b9abc <__d2b+0x24>
   b9aae:	4602      	mov	r2, r0
   b9ab0:	4b25      	ldr	r3, [pc, #148]	; (b9b48 <__d2b+0xb0>)
   b9ab2:	4826      	ldr	r0, [pc, #152]	; (b9b4c <__d2b+0xb4>)
   b9ab4:	f240 310a 	movw	r1, #778	; 0x30a
   b9ab8:	f7fb fdb6 	bl	b5628 <__assert_func>
   b9abc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b9ac0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b9ac4:	bb35      	cbnz	r5, b9b14 <__d2b+0x7c>
   b9ac6:	2e00      	cmp	r6, #0
   b9ac8:	9301      	str	r3, [sp, #4]
   b9aca:	d028      	beq.n	b9b1e <__d2b+0x86>
   b9acc:	4668      	mov	r0, sp
   b9ace:	9600      	str	r6, [sp, #0]
   b9ad0:	f7ff fd06 	bl	b94e0 <__lo0bits>
   b9ad4:	9900      	ldr	r1, [sp, #0]
   b9ad6:	b300      	cbz	r0, b9b1a <__d2b+0x82>
   b9ad8:	9a01      	ldr	r2, [sp, #4]
   b9ada:	f1c0 0320 	rsb	r3, r0, #32
   b9ade:	fa02 f303 	lsl.w	r3, r2, r3
   b9ae2:	430b      	orrs	r3, r1
   b9ae4:	40c2      	lsrs	r2, r0
   b9ae6:	6163      	str	r3, [r4, #20]
   b9ae8:	9201      	str	r2, [sp, #4]
   b9aea:	9b01      	ldr	r3, [sp, #4]
   b9aec:	61a3      	str	r3, [r4, #24]
   b9aee:	2b00      	cmp	r3, #0
   b9af0:	bf14      	ite	ne
   b9af2:	2202      	movne	r2, #2
   b9af4:	2201      	moveq	r2, #1
   b9af6:	6122      	str	r2, [r4, #16]
   b9af8:	b1d5      	cbz	r5, b9b30 <__d2b+0x98>
   b9afa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b9afe:	4405      	add	r5, r0
   b9b00:	f8c9 5000 	str.w	r5, [r9]
   b9b04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b9b08:	f8c8 0000 	str.w	r0, [r8]
   b9b0c:	4620      	mov	r0, r4
   b9b0e:	b003      	add	sp, #12
   b9b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9b18:	e7d5      	b.n	b9ac6 <__d2b+0x2e>
   b9b1a:	6161      	str	r1, [r4, #20]
   b9b1c:	e7e5      	b.n	b9aea <__d2b+0x52>
   b9b1e:	a801      	add	r0, sp, #4
   b9b20:	f7ff fcde 	bl	b94e0 <__lo0bits>
   b9b24:	9b01      	ldr	r3, [sp, #4]
   b9b26:	6163      	str	r3, [r4, #20]
   b9b28:	2201      	movs	r2, #1
   b9b2a:	6122      	str	r2, [r4, #16]
   b9b2c:	3020      	adds	r0, #32
   b9b2e:	e7e3      	b.n	b9af8 <__d2b+0x60>
   b9b30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b9b34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b9b38:	f8c9 0000 	str.w	r0, [r9]
   b9b3c:	6918      	ldr	r0, [r3, #16]
   b9b3e:	f7ff fcaf 	bl	b94a0 <__hi0bits>
   b9b42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b9b46:	e7df      	b.n	b9b08 <__d2b+0x70>
   b9b48:	000ba480 	.word	0x000ba480
   b9b4c:	000ba52c 	.word	0x000ba52c

000b9b50 <__ratio>:
   b9b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b54:	4688      	mov	r8, r1
   b9b56:	4669      	mov	r1, sp
   b9b58:	4681      	mov	r9, r0
   b9b5a:	f7ff ff4d 	bl	b99f8 <__b2d>
   b9b5e:	a901      	add	r1, sp, #4
   b9b60:	4640      	mov	r0, r8
   b9b62:	ec55 4b10 	vmov	r4, r5, d0
   b9b66:	f7ff ff47 	bl	b99f8 <__b2d>
   b9b6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9b6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b9b72:	eba3 0c02 	sub.w	ip, r3, r2
   b9b76:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9b7a:	1a9b      	subs	r3, r3, r2
   b9b7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b9b80:	ec51 0b10 	vmov	r0, r1, d0
   b9b84:	2b00      	cmp	r3, #0
   b9b86:	bfd6      	itet	le
   b9b88:	460a      	movle	r2, r1
   b9b8a:	462a      	movgt	r2, r5
   b9b8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b9b90:	468b      	mov	fp, r1
   b9b92:	462f      	mov	r7, r5
   b9b94:	bfd4      	ite	le
   b9b96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b9b9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b9b9e:	4620      	mov	r0, r4
   b9ba0:	ee10 2a10 	vmov	r2, s0
   b9ba4:	465b      	mov	r3, fp
   b9ba6:	4639      	mov	r1, r7
   b9ba8:	f7fd fe18 	bl	b77dc <__aeabi_ddiv>
   b9bac:	ec41 0b10 	vmov	d0, r0, r1
   b9bb0:	b003      	add	sp, #12
   b9bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9bb6 <__copybits>:
   b9bb6:	3901      	subs	r1, #1
   b9bb8:	b570      	push	{r4, r5, r6, lr}
   b9bba:	1149      	asrs	r1, r1, #5
   b9bbc:	6914      	ldr	r4, [r2, #16]
   b9bbe:	3101      	adds	r1, #1
   b9bc0:	f102 0314 	add.w	r3, r2, #20
   b9bc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9bc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b9bcc:	1f05      	subs	r5, r0, #4
   b9bce:	42a3      	cmp	r3, r4
   b9bd0:	d30c      	bcc.n	b9bec <__copybits+0x36>
   b9bd2:	1aa3      	subs	r3, r4, r2
   b9bd4:	3b11      	subs	r3, #17
   b9bd6:	f023 0303 	bic.w	r3, r3, #3
   b9bda:	3211      	adds	r2, #17
   b9bdc:	42a2      	cmp	r2, r4
   b9bde:	bf88      	it	hi
   b9be0:	2300      	movhi	r3, #0
   b9be2:	4418      	add	r0, r3
   b9be4:	2300      	movs	r3, #0
   b9be6:	4288      	cmp	r0, r1
   b9be8:	d305      	bcc.n	b9bf6 <__copybits+0x40>
   b9bea:	bd70      	pop	{r4, r5, r6, pc}
   b9bec:	f853 6b04 	ldr.w	r6, [r3], #4
   b9bf0:	f845 6f04 	str.w	r6, [r5, #4]!
   b9bf4:	e7eb      	b.n	b9bce <__copybits+0x18>
   b9bf6:	f840 3b04 	str.w	r3, [r0], #4
   b9bfa:	e7f4      	b.n	b9be6 <__copybits+0x30>

000b9bfc <__any_on>:
   b9bfc:	f100 0214 	add.w	r2, r0, #20
   b9c00:	6900      	ldr	r0, [r0, #16]
   b9c02:	114b      	asrs	r3, r1, #5
   b9c04:	4298      	cmp	r0, r3
   b9c06:	b510      	push	{r4, lr}
   b9c08:	db11      	blt.n	b9c2e <__any_on+0x32>
   b9c0a:	dd0a      	ble.n	b9c22 <__any_on+0x26>
   b9c0c:	f011 011f 	ands.w	r1, r1, #31
   b9c10:	d007      	beq.n	b9c22 <__any_on+0x26>
   b9c12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b9c16:	fa24 f001 	lsr.w	r0, r4, r1
   b9c1a:	fa00 f101 	lsl.w	r1, r0, r1
   b9c1e:	428c      	cmp	r4, r1
   b9c20:	d10b      	bne.n	b9c3a <__any_on+0x3e>
   b9c22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b9c26:	4293      	cmp	r3, r2
   b9c28:	d803      	bhi.n	b9c32 <__any_on+0x36>
   b9c2a:	2000      	movs	r0, #0
   b9c2c:	bd10      	pop	{r4, pc}
   b9c2e:	4603      	mov	r3, r0
   b9c30:	e7f7      	b.n	b9c22 <__any_on+0x26>
   b9c32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b9c36:	2900      	cmp	r1, #0
   b9c38:	d0f5      	beq.n	b9c26 <__any_on+0x2a>
   b9c3a:	2001      	movs	r0, #1
   b9c3c:	e7f6      	b.n	b9c2c <__any_on+0x30>

000b9c3e <_calloc_r>:
   b9c3e:	b513      	push	{r0, r1, r4, lr}
   b9c40:	434a      	muls	r2, r1
   b9c42:	4611      	mov	r1, r2
   b9c44:	9201      	str	r2, [sp, #4]
   b9c46:	f7fb fcdf 	bl	b5608 <_malloc_r>
   b9c4a:	4604      	mov	r4, r0
   b9c4c:	b118      	cbz	r0, b9c56 <_calloc_r+0x18>
   b9c4e:	9a01      	ldr	r2, [sp, #4]
   b9c50:	2100      	movs	r1, #0
   b9c52:	f7fd ffa0 	bl	b7b96 <memset>
   b9c56:	4620      	mov	r0, r4
   b9c58:	b002      	add	sp, #8
   b9c5a:	bd10      	pop	{r4, pc}
   b9c5c:	0000      	movs	r0, r0
	...

000b9c60 <nan>:
   b9c60:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9c68 <nan+0x8>
   b9c64:	4770      	bx	lr
   b9c66:	bf00      	nop
   b9c68:	00000000 	.word	0x00000000
   b9c6c:	7ff80000 	.word	0x7ff80000

000b9c70 <__ascii_wctomb>:
   b9c70:	b149      	cbz	r1, b9c86 <__ascii_wctomb+0x16>
   b9c72:	2aff      	cmp	r2, #255	; 0xff
   b9c74:	bf85      	ittet	hi
   b9c76:	238a      	movhi	r3, #138	; 0x8a
   b9c78:	6003      	strhi	r3, [r0, #0]
   b9c7a:	700a      	strbls	r2, [r1, #0]
   b9c7c:	f04f 30ff 	movhi.w	r0, #4294967295
   b9c80:	bf98      	it	ls
   b9c82:	2001      	movls	r0, #1
   b9c84:	4770      	bx	lr
   b9c86:	4608      	mov	r0, r1
   b9c88:	4770      	bx	lr
	...

000b9c8c <__aeabi_d2lz>:
   b9c8c:	b538      	push	{r3, r4, r5, lr}
   b9c8e:	2200      	movs	r2, #0
   b9c90:	2300      	movs	r3, #0
   b9c92:	4604      	mov	r4, r0
   b9c94:	460d      	mov	r5, r1
   b9c96:	f7fd fee9 	bl	b7a6c <__aeabi_dcmplt>
   b9c9a:	b928      	cbnz	r0, b9ca8 <__aeabi_d2lz+0x1c>
   b9c9c:	4620      	mov	r0, r4
   b9c9e:	4629      	mov	r1, r5
   b9ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9ca4:	f7fd bf2a 	b.w	b7afc <__aeabi_d2ulz>
   b9ca8:	4620      	mov	r0, r4
   b9caa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b9cae:	f7fd ff25 	bl	b7afc <__aeabi_d2ulz>
   b9cb2:	4240      	negs	r0, r0
   b9cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9cb8:	bd38      	pop	{r3, r4, r5, pc}
   b9cba:	bf00      	nop

000b9cbc <dynalib_user>:
   b9cbc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9ccc:	0000 0000 7270 6369 7365 002f 7325 000a     ....prices/.%s..
   b9cdc:	212c 2500 642a 252d 642a 252d 642a 2554     ,!.%*d-%*d-%*dT%
   b9cec:	3a64 2a25 3a64 2a25 0064 6e49 6920 746e     d:%*d:%*d.In int
   b9cfc:	7265 7572 7470 000a 6948 6867 7365 2074     errupt..Highest 
   b9d0c:	7270 6369 2065 666f 7420 6568 6420 7961     price of the day
   b9d1c:	203a 6625 000a 6f4c 6577 7473 7020 6972     : %f..Lowest pri
   b9d2c:	6563 6f20 2066 6874 2065 6164 3a79 2520     ce of the day: %
   b9d3c:	0a66 4800 756f 7372 6f20 2066 6874 2065     f..Hours of the 
   b9d4c:	6164 2079 6877 7265 2065 6c65 6365 7274     day where electr
   b9d5c:	6369 7469 2079 7369 7720 7469 6968 206e     icity is within 
   b9d6c:	6361 6563 7470 6465 7220 6e61 6567 0a3a     accepted range:.
   b9d7c:	2500 3230 2064 6f74 2520 3230 0a64 6700     .%02d to %02d..g
   b9d8c:	7465 705f 6972 6563 0073 7453 7461 0065     et_prices.State.
   b9d9c:	716d 7474 5200 7465 7275 206e 6176 756c     mqtt.Return valu
   b9dac:	3a65 2520 0064 6568 6c6c 206f 6f77 6c72     e: %d.hello worl
   b9dbc:	0064 6f70 6577 2f72 6567 0074 6f70 6577     d.power/get.powe
   b9dcc:	2f72 7270 6369 7365 4300 696c 6e65 2074     r/prices.Client 
   b9ddc:	6964 6373 6e6f 656e 7463 6465 000a 7073     disconnected..sp
   b9dec:	7261 636b 696c 6e65 5f74 4300 696c 6e65     arkclient_.Clien
   b9dfc:	2074 6572 6f63 6e6e 6365 6574 0a64 7b00     t reconnected..{
   b9e0c:	2220 6579 7261 3a22 2220 6425 2c22 2220      "year": "%d", "
   b9e1c:	6f6d 746e 2268 223a 3025 6432 2c22 2220     month":"%02d", "
   b9e2c:	6164 2279 203a 2522 3230 2264 202c 6422     day": "%02d", "d
   b9e3c:	7961 745f 6f77 3a22 2220 3025 6432 2c22     ay_two": "%02d",
   b9e4c:	2220 6f68 7275 3a22 2220 3025 6432 2022      "hour": "%02d" 
   b9e5c:	007d 6c65 7270 7369 7265 4300 7275 6572     }.elpriser.Curre
   b9e6c:	746e 4820 3a48 4d4d 203a 3025 6432 253a     nt HH:MM: %02d:%
   b9e7c:	3230 0a64 4900 206e 6f77 6b72 000a 6843     02d..In work..Ch
   b9e8c:	6165 2870 7369 2968 6820 756f 7372 6f20     eap(ish) hours o
   b9e9c:	2066 6874 2065 6164 3a79 0020 3025 6432     f the day: .%02d
   b9eac:	7420 206f 3025 6432 202c 4c00 776f 7020      to %02d, .Low p
   b9ebc:	6972 6563 6820 756f 7372 5200 6365 6965     rice hours.Recei
   b9ecc:	6576 2064 6f70 6577 2f72 6567 0a74 7000     ved power/get..p
   b9edc:	776f 7265 3100 3239 312e 3836 302e 312e     ower.192.168.0.1
   b9eec:	3330 0000 4d04 5451 0454 0600 514d 7349     03...MQTT...MQIs
   b9efc:	7064 0003                                   dp..

000b9f00 <_ZTVN5spark13EthernetClassE>:
	...
   b9f08:	56b7 000b 56ad 000b 56a3 000b 5699 000b     .V...V...V...V..
   b9f18:	568d 000b 5681 000b 6cf5 000b 6cfd 000b     .V...V...l...l..
   b9f28:	5675 000b 566d 000b 5663 000b 5659 000b     uV..mV..cV..YV..
   b9f38:	6d2d 000b                                   -m..

000b9f3c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9f44:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b9f54:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9f64 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9f6c:	5db5 000b 5dbb 000b 5df9 000b 5dc9 000b     .]...]...]...]..
   b9f7c:	5db7 000b                                   .]..

000b9f80 <_ZTV9IPAddress>:
	...
   b9f88:	62f5 000b 62e5 000b 62e7 000b               .b...b...b..

000b9f94 <_ZTV9USBSerial>:
	...
   b9f9c:	6407 000b 646f 000b 6445 000b 59ad 000b     .d..od..Ed...Y..
   b9fac:	6437 000b 6409 000b 6419 000b 6469 000b     7d...d...d..id..
   b9fbc:	6429 000b 6401 000b                         )d...d..

000b9fc4 <_ZTV11USARTSerial>:
	...
   b9fcc:	6559 000b 65c5 000b 659d 000b 59ad 000b     Ye...e...e...Y..
   b9fdc:	656d 000b 6589 000b 657b 000b 6597 000b     me...e..{e...e..
   b9fec:	655b 000b 655f 000b                         [e.._e..

000b9ff4 <_ZTV7TwoWire>:
	...
   b9ffc:	6625 000b 666f 000b 6647 000b 6627 000b     %f..of..Gf..'f..
   ba00c:	664f 000b 6657 000b 665f 000b 6667 000b     Of..Wf.._f..gf..
   ba01c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   ba02c:	2072 203d 6425 0000                         r = %d..

000ba034 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba03c:	6725 000b 6749 000b 6c33 000b 6757 000b     %g..Ig..3l..Wg..
   ba04c:	6729 000b                                   )g..

000ba050 <_ZTV9TCPClient>:
	...
   ba058:	5c45 000b 5c5d 000b 66a1 000b 66bb 000b     E\..]\...f...f..
   ba068:	6ac9 000b 66e5 000b 693f 000b 6719 000b     .j...f..?i...g..
   ba078:	69d1 000b 6811 000b 696d 000b 6b7d 000b     .i...h..mi..}k..
   ba088:	690d 000b 671b 000b 66cd 000b 675d 000b     .i...g...f..]g..
   ba098:	67f1 000b                                   .g..

000ba09c <_ZTVN5spark9WiFiClassE>:
	...
   ba0a4:	6c97 000b 6c8d 000b 6c83 000b 6c39 000b     .l...l...l..9l..
   ba0b4:	6c77 000b 6c6b 000b 6cf5 000b 6cfd 000b     wl..kl...l...l..
   ba0c4:	6c5f 000b 6c57 000b 6c4d 000b 6c43 000b     _l..Wl..Ml..Cl..
   ba0d4:	6d2d 000b                                   -m..

000ba0d8 <_ZTVN5spark12NetworkClassE>:
	...
   ba0e0:	6cb5 000b 6cbf 000b 6cc9 000b 6cd3 000b     .l...l...l...l..
   ba0f0:	6cdd 000b 6ce9 000b 6cf5 000b 6cfd 000b     .l...l...l...l..
   ba100:	6d05 000b 6d11 000b 6d19 000b 6d23 000b     .m...m...m..#m..
   ba110:	6d2d 000b                                   -m..

000ba114 <_ZSt7nothrow>:
	...

000ba115 <_ZTSSt19_Sp_make_shared_tag>:
   ba115:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   ba125:	6572 5f64 6174 0067 0000                     red_tag....

000ba130 <_ZTISt19_Sp_make_shared_tag>:
   ba130:	a170 000b a115 000b                         p.......

000ba138 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba138:	a1d0 000b a144 000b a1f4 000b               ....D.......

000ba144 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba144:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ba154:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ba164:	0045 0000                                   E...

000ba168 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba168:	0000 0000 a138 000b 7039 000b 704d 000b     ....8...9p..Mp..
   ba178:	71e1 000b 71e1 000b 70b7 000b 6ff9 000b     .q...q...p...o..
   ba188:	709f 000b 7061 000b 702b 000b               .p..ap..+p..

000ba194 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba194:	a1d0 000b a1a0 000b a138 000b               ........8...

000ba1a0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba1a0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba1b0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba1c0:	666e 456f 0000 0000                         nfoE....

000ba1c8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba1c8:	0000 0000 a194 000b 70e1 000b 70f5 000b     .........p...p..
   ba1d8:	71e1 000b 71e1 000b 70b7 000b 6ff9 000b     .q...q...p...o..
   ba1e8:	71b5 000b 7141 000b 7109 000b               .q..Aq...q..

000ba1f4 <_ZTISt9type_info>:
   ba1f4:	a170 000b a1fc 000b                         p.......

000ba1fc <_ZTSSt9type_info>:
   ba1fc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba20c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba21c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   ba22c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba23c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba24c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba25c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba26c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba27c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba28c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   ba29c:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000ba2ac <fpi.1>:
   ba2ac:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ba2bc:	0000 0000                                   ....

000ba2c0 <fpinan.0>:
   ba2c0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000ba2d8 <tinytens>:
   ba2d8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ba2e8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ba2f8:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   ba308:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   ba318:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   ba328:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   ba338:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   ba348:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   ba358:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   ba368:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   ba378:	7472 6b6f 632e                               rtok.c.

000ba37f <_ctype_>:
   ba37f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba38f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba39f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba3af:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba3bf:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba3cf:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba3df:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba3ef:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba3ff:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   ba47f:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   ba48f:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   ba49f:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   ba4af:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   ba4bf:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   ba4cf:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   ba4df:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   ba4ef:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   ba4ff:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   ba50f:	6874 7865 632e 2e00                          thex.c...

000ba518 <_C_numeric_locale>:
   ba518:	a516 000b 9d7c 000b d7dc 2003 0043 4f50     ....|...... C.PO
   ba528:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   ba538:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba548:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba558:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba568:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba578:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba588:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba598:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   ba5a8:	0063 0000 0000 0000                         c.......

000ba5b0 <__mprec_bigtens>:
   ba5b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ba5c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ba5d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ba5d8 <__mprec_tens>:
   ba5d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ba5e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ba5f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ba608:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ba618:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ba628:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ba638:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ba648:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ba658:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ba668:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ba678:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ba688:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ba698:	9db4 79d9 7843 44ea                         ...yCx.D

000ba6a0 <p05.0>:
   ba6a0:	0005 0000 0019 0000 007d 0000               ........}...

000ba6ac <link_const_variable_data_end>:
   ba6ac:	000b47ed 	.word	0x000b47ed
   ba6b0:	000b56c1 	.word	0x000b56c1
   ba6b4:	000b56e9 	.word	0x000b56e9
   ba6b8:	000b599d 	.word	0x000b599d
   ba6bc:	000b5ab9 	.word	0x000b5ab9
   ba6c0:	000b5c31 	.word	0x000b5c31
   ba6c4:	000b5c71 	.word	0x000b5c71
   ba6c8:	000b6ca1 	.word	0x000b6ca1
   ba6cc:	000b6e05 	.word	0x000b6e05
