
c:/Users/mathi/Desktop/IOT/ElecPrice/target/4.0.0/argon/ElecPrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004fc0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8fe0  000b8fe0  00008fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9004  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  2003cd48  000b9008  0001cd48  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000018c4  2003cf30  2003cf30  0002cf30  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b91f0  000b91f0  000291f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9218  000b9218  00029218  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010dd76  00000000  00000000  0002921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000123f7  00000000  00000000  00136f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038e56  00000000  00000000  00149389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a88  00000000  00000000  001821df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a2e0  00000000  00000000  00184c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003740c  00000000  00000000  0018ef47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b715  00000000  00000000  001c6353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001346a6  00000000  00000000  00201a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000080e8  00000000  00000000  00336110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fb3e 	bl	b66b2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fb46 	bl	b66ce <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003cd48 	.word	0x2003cd48
   b404c:	000b9008 	.word	0x000b9008
   b4050:	2003cf30 	.word	0x2003cf30
   b4054:	2003cf30 	.word	0x2003cf30
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 f833 	bl	b50cc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b8fb4 	.word	0x000b8fb4
   b4080:	000b8fd8 	.word	0x000b8fd8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba9e 	b.w	b45c4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9e3 	bl	b4454 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bfd3 	b.w	b503c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bce1 	b.w	b4a5c <malloc>

000b409a <_Znaj>:
   b409a:	f000 bcdf 	b.w	b4a5c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bce5 	b.w	b4a6c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_Z13handle_sensorv>:
    Particle.subscribe("prices", myHandler, MY_DEVICES);
    Particle.subscribe("get_prices", myPriceHandler, MY_DEVICES);
}

void handle_sensor(void)
{
   b40b4:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40b6:	f000 fb15 	bl	b46e4 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta;
    unsigned long current_reading = millis();
    //erial.printf("millis now: %ld\tlast millis: %ld\n",current_reading, last_read);
    if ((delta = current_reading-last_read) > 100)
   b40ba:	4907      	ldr	r1, [pc, #28]	; (b40d8 <_Z13handle_sensorv+0x24>)
   b40bc:	680b      	ldr	r3, [r1, #0]
   b40be:	1ac3      	subs	r3, r0, r3
   b40c0:	2b64      	cmp	r3, #100	; 0x64
   b40c2:	d908      	bls.n	b40d6 <_Z13handle_sensorv+0x22>
    {
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40c4:	4a05      	ldr	r2, [pc, #20]	; (b40dc <_Z13handle_sensorv+0x28>)
   b40c6:	fbb2 f3f3 	udiv	r3, r2, r3
   b40ca:	4a05      	ldr	r2, [pc, #20]	; (b40e0 <_Z13handle_sensorv+0x2c>)
        last_read = current_reading;
   b40cc:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40ce:	6013      	str	r3, [r2, #0]
        printer = true; // Just a debuging flag
   b40d0:	4b04      	ldr	r3, [pc, #16]	; (b40e4 <_Z13handle_sensorv+0x30>)
   b40d2:	2201      	movs	r2, #1
   b40d4:	701a      	strb	r2, [r3, #0]
    }
}
   b40d6:	bd08      	pop	{r3, pc}
   b40d8:	2003d1a0 	.word	0x2003d1a0
   b40dc:	0036ee80 	.word	0x0036ee80
   b40e0:	2003cf38 	.word	0x2003cf38
   b40e4:	2003d205 	.word	0x2003d205

000b40e8 <_Z9myHandlerPKcS0_>:

void myHandler(const char *event, const char *data)
{
   b40e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    populate = false;
    rec_cnt++;
   b40ec:	4e33      	ldr	r6, [pc, #204]	; (b41bc <_Z9myHandlerPKcS0_+0xd4>)
    populate = false;
   b40ee:	4d34      	ldr	r5, [pc, #208]	; (b41c0 <_Z9myHandlerPKcS0_+0xd8>)
   b40f0:	2300      	movs	r3, #0
   b40f2:	702b      	strb	r3, [r5, #0]
    rec_cnt++;
   b40f4:	7833      	ldrb	r3, [r6, #0]
{
   b40f6:	b085      	sub	sp, #20
    rec_cnt++;
   b40f8:	3301      	adds	r3, #1
{
   b40fa:	4680      	mov	r8, r0

    /* When transmission are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
    */
    int transmission_size = strlen(data);
   b40fc:	4608      	mov	r0, r1
    rec_cnt++;
   b40fe:	7033      	strb	r3, [r6, #0]
{
   b4100:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b4102:	f002 fb50 	bl	b67a6 <strlen>
    
    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str,event);
   b4106:	4641      	mov	r1, r8
    int transmission_size = strlen(data);
   b4108:	4607      	mov	r7, r0
    strcpy(event_str,event);
   b410a:	a801      	add	r0, sp, #4
   b410c:	f002 fb25 	bl	b675a <strcpy>
    //Serial.printf("%s\n",event_str);
    //Serial.printf("%s\n",data);
    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "rec_data"
    strcpy(rec_data[atoi(strtok(event_str,"prices/"))],data);
   b4110:	492c      	ldr	r1, [pc, #176]	; (b41c4 <_Z9myHandlerPKcS0_+0xdc>)
   b4112:	a801      	add	r0, sp, #4
   b4114:	f003 f992 	bl	b743c <strtok>
   b4118:	f002 fac7 	bl	b66aa <atoi>
   b411c:	eb00 2340 	add.w	r3, r0, r0, lsl #9
   b4120:	4829      	ldr	r0, [pc, #164]	; (b41c8 <_Z9myHandlerPKcS0_+0xe0>)
   b4122:	4621      	mov	r1, r4
   b4124:	4418      	add	r0, r3
   b4126:	f002 fb18 	bl	b675a <strcpy>
    
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b412a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   b412e:	d210      	bcs.n	b4152 <_Z9myHandlerPKcS0_+0x6a>
    {
        populate = true;
   b4130:	2301      	movs	r3, #1
   b4132:	702b      	strb	r3, [r5, #0]
    }

    if (populate)
   b4134:	4c24      	ldr	r4, [pc, #144]	; (b41c8 <_Z9myHandlerPKcS0_+0xe0>)
        // Serial.printf("%s\n\n",temp);

        // Concatenate all transmission into one string
        for (int i = 0; i <= rec_cnt; i++)
        {
            strcat(temp,rec_data[i]);
   b4136:	4b25      	ldr	r3, [pc, #148]	; (b41cc <_Z9myHandlerPKcS0_+0xe4>)
{
   b4138:	2500      	movs	r5, #0
        for (int i = 0; i <= rec_cnt; i++)
   b413a:	7832      	ldrb	r2, [r6, #0]
   b413c:	42aa      	cmp	r2, r5
   b413e:	db0e      	blt.n	b415e <_Z9myHandlerPKcS0_+0x76>
            strcat(temp,rec_data[i]);
   b4140:	4621      	mov	r1, r4
   b4142:	4618      	mov	r0, r3
   b4144:	f002 fafa 	bl	b673c <strcat>
        for (int i = 0; i <= rec_cnt; i++)
   b4148:	3501      	adds	r5, #1
            strcat(temp,rec_data[i]);
   b414a:	4603      	mov	r3, r0
        for (int i = 0; i <= rec_cnt; i++)
   b414c:	f204 2401 	addw	r4, r4, #513	; 0x201
   b4150:	e7f3      	b.n	b413a <_Z9myHandlerPKcS0_+0x52>
    if (populate)
   b4152:	782b      	ldrb	r3, [r5, #0]
   b4154:	2b00      	cmp	r3, #0
   b4156:	d1ed      	bne.n	b4134 <_Z9myHandlerPKcS0_+0x4c>
                range = i;  // Update range, such that the rest of program flow is aware of size
                break;      // Break the while loop
            }
        }
    }
}
   b4158:	b005      	add	sp, #20
   b415a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        token = strtok(temp, ",!");
   b415e:	491c      	ldr	r1, [pc, #112]	; (b41d0 <_Z9myHandlerPKcS0_+0xe8>)
   b4160:	481a      	ldr	r0, [pc, #104]	; (b41cc <_Z9myHandlerPKcS0_+0xe4>)
   b4162:	4d1c      	ldr	r5, [pc, #112]	; (b41d4 <_Z9myHandlerPKcS0_+0xec>)
        for (int i = 0; i < range; i++)
   b4164:	f8df 807c 	ldr.w	r8, [pc, #124]	; b41e4 <_Z9myHandlerPKcS0_+0xfc>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b4168:	f8df 907c 	ldr.w	r9, [pc, #124]	; b41e8 <_Z9myHandlerPKcS0_+0x100>
            cost[i] = atof(token) / 1000;
   b416c:	4f1a      	ldr	r7, [pc, #104]	; (b41d8 <_Z9myHandlerPKcS0_+0xf0>)
        token = strtok(temp, ",!");
   b416e:	f003 f965 	bl	b743c <strtok>
        for (int i = 0; i < range; i++)
   b4172:	2400      	movs	r4, #0
            cost[i] = atof(token) / 1000;
   b4174:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b4176:	f8d8 3000 	ldr.w	r3, [r8]
   b417a:	42a3      	cmp	r3, r4
   b417c:	ddec      	ble.n	b4158 <_Z9myHandlerPKcS0_+0x70>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b417e:	4a17      	ldr	r2, [pc, #92]	; (b41dc <_Z9myHandlerPKcS0_+0xf4>)
   b4180:	4917      	ldr	r1, [pc, #92]	; (b41e0 <_Z9myHandlerPKcS0_+0xf8>)
   b4182:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   b4186:	f000 fc81 	bl	b4a8c <sscanf>
            token = strtok(NULL, ",!");
   b418a:	4911      	ldr	r1, [pc, #68]	; (b41d0 <_Z9myHandlerPKcS0_+0xe8>)
   b418c:	2000      	movs	r0, #0
   b418e:	f003 f955 	bl	b743c <strtok>
            cost[i] = atof(token) / 1000;
   b4192:	f002 fa87 	bl	b66a4 <atof>
   b4196:	4632      	mov	r2, r6
   b4198:	ec51 0b10 	vmov	r0, r1, d0
   b419c:	463b      	mov	r3, r7
   b419e:	f002 f8cd 	bl	b633c <__aeabi_ddiv>
   b41a2:	e8e5 0102 	strd	r0, r1, [r5], #8
            if((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b41a6:	490a      	ldr	r1, [pc, #40]	; (b41d0 <_Z9myHandlerPKcS0_+0xe8>)
   b41a8:	2000      	movs	r0, #0
   b41aa:	f003 f947 	bl	b743c <strtok>
   b41ae:	b910      	cbnz	r0, b41b6 <_Z9myHandlerPKcS0_+0xce>
                range = i;  // Update range, such that the rest of program flow is aware of size
   b41b0:	f8c8 4000 	str.w	r4, [r8]
                break;      // Break the while loop
   b41b4:	e7d0      	b.n	b4158 <_Z9myHandlerPKcS0_+0x70>
        for (int i = 0; i < range; i++)
   b41b6:	3401      	adds	r4, #1
   b41b8:	e7dd      	b.n	b4176 <_Z9myHandlerPKcS0_+0x8e>
   b41ba:	bf00      	nop
   b41bc:	2003d206 	.word	0x2003d206
   b41c0:	2003d204 	.word	0x2003d204
   b41c4:	000b87f0 	.word	0x000b87f0
   b41c8:	2003d207 	.word	0x2003d207
   b41cc:	2003dc78 	.word	0x2003dc78
   b41d0:	000b87f8 	.word	0x000b87f8
   b41d4:	2003cf40 	.word	0x2003cf40
   b41d8:	408f4000 	.word	0x408f4000
   b41dc:	2003d180 	.word	0x2003d180
   b41e0:	000b87fb 	.word	0x000b87fb
   b41e4:	2003cd50 	.word	0x2003cd50
   b41e8:	2003d0c0 	.word	0x2003d0c0

000b41ec <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41ec:	b40e      	push	{r1, r2, r3}
   b41ee:	b503      	push	{r0, r1, lr}
   b41f0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b41f2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41f4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b41f8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b41fa:	f000 fdfc 	bl	b4df6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b41fe:	b002      	add	sp, #8
   b4200:	f85d eb04 	ldr.w	lr, [sp], #4
   b4204:	b003      	add	sp, #12
   b4206:	4770      	bx	lr

000b4208 <_Z8calc_lowv>:
    // Wait 10 seconds
    delay(5000);
}

void calc_low(void)
{
   b4208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (int i = 0; i < range; i++)
   b420c:	4b72      	ldr	r3, [pc, #456]	; (b43d8 <_Z8calc_lowv+0x1d0>)
{
   b420e:	b087      	sub	sp, #28
    for (int i = 0; i < range; i++)
   b4210:	681b      	ldr	r3, [r3, #0]
   b4212:	9304      	str	r3, [sp, #16]
   b4214:	4b71      	ldr	r3, [pc, #452]	; (b43dc <_Z8calc_lowv+0x1d4>)
   b4216:	ed93 7b00 	vldr	d7, [r3]
   b421a:	4b71      	ldr	r3, [pc, #452]	; (b43e0 <_Z8calc_lowv+0x1d8>)
   b421c:	681e      	ldr	r6, [r3, #0]
   b421e:	4b71      	ldr	r3, [pc, #452]	; (b43e4 <_Z8calc_lowv+0x1dc>)
   b4220:	ed8d 7b00 	vstr	d7, [sp]
   b4224:	ed93 7b00 	vldr	d7, [r3]
   b4228:	4b6f      	ldr	r3, [pc, #444]	; (b43e8 <_Z8calc_lowv+0x1e0>)
   b422a:	ed8d 7b02 	vstr	d7, [sp, #8]
   b422e:	f8d3 9000 	ldr.w	r9, [r3]
   b4232:	4b6e      	ldr	r3, [pc, #440]	; (b43ec <_Z8calc_lowv+0x1e4>)
   b4234:	9305      	str	r3, [sp, #20]
   b4236:	2500      	movs	r5, #0
   b4238:	4698      	mov	r8, r3
   b423a:	462f      	mov	r7, r5
   b423c:	462c      	mov	r4, r5
   b423e:	9b04      	ldr	r3, [sp, #16]
   b4240:	42a3      	cmp	r3, r4
   b4242:	dd19      	ble.n	b4278 <_Z8calc_lowv+0x70>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4244:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
   b4248:	e9dd 2300 	ldrd	r2, r3, [sp]
   b424c:	4650      	mov	r0, sl
   b424e:	4659      	mov	r1, fp
   b4250:	f002 f9da 	bl	b6608 <__aeabi_dcmpgt>
   b4254:	b118      	cbz	r0, b425e <_Z8calc_lowv+0x56>
        {
            big_idx = i;
            last_big = cost[i];
   b4256:	e9cd ab00 	strd	sl, fp, [sp]
        if (cost[i] > last_big)
   b425a:	4626      	mov	r6, r4
   b425c:	2701      	movs	r7, #1
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b425e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4262:	4650      	mov	r0, sl
   b4264:	4659      	mov	r1, fp
   b4266:	f002 f9b1 	bl	b65cc <__aeabi_dcmplt>
   b426a:	b118      	cbz	r0, b4274 <_Z8calc_lowv+0x6c>
        {
            small_idx = i;
            last_small = cost[i];
   b426c:	e9cd ab02 	strd	sl, fp, [sp, #8]
        if (cost[i] < last_small)
   b4270:	46a1      	mov	r9, r4
   b4272:	2501      	movs	r5, #1
    for (int i = 0; i < range; i++)
   b4274:	3401      	adds	r4, #1
   b4276:	e7e2      	b.n	b423e <_Z8calc_lowv+0x36>
   b4278:	b137      	cbz	r7, b4288 <_Z8calc_lowv+0x80>
   b427a:	ed9d 7b00 	vldr	d7, [sp]
   b427e:	4b57      	ldr	r3, [pc, #348]	; (b43dc <_Z8calc_lowv+0x1d4>)
   b4280:	ed83 7b00 	vstr	d7, [r3]
   b4284:	4b56      	ldr	r3, [pc, #344]	; (b43e0 <_Z8calc_lowv+0x1d8>)
   b4286:	601e      	str	r6, [r3, #0]
   b4288:	b13d      	cbz	r5, b429a <_Z8calc_lowv+0x92>
   b428a:	ed9d 7b02 	vldr	d7, [sp, #8]
   b428e:	4b55      	ldr	r3, [pc, #340]	; (b43e4 <_Z8calc_lowv+0x1dc>)
   b4290:	ed83 7b00 	vstr	d7, [r3]
   b4294:	4b54      	ldr	r3, [pc, #336]	; (b43e8 <_Z8calc_lowv+0x1e0>)
   b4296:	f8c3 9000 	str.w	r9, [r3]
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b429a:	4b52      	ldr	r3, [pc, #328]	; (b43e4 <_Z8calc_lowv+0x1dc>)
   b429c:	494f      	ldr	r1, [pc, #316]	; (b43dc <_Z8calc_lowv+0x1d4>)
   b429e:	4e54      	ldr	r6, [pc, #336]	; (b43f0 <_Z8calc_lowv+0x1e8>)
   b42a0:	f8df 8178 	ldr.w	r8, [pc, #376]	; b441c <_Z8calc_lowv+0x214>
    for (int i = 0; i <= range; i++)
    {
        //Serial.printf("cost[%d]: %f\tcost_hour[%d]: %d\n",i,cost[i],i,cost_hour[i]);
        if (cost[i] < small_offset)
        {
            low_range_hour[idx] = cost_hour[i];
   b42a4:	f8df a178 	ldr.w	sl, [pc, #376]	; b4420 <_Z8calc_lowv+0x218>
   b42a8:	f8df b178 	ldr.w	fp, [pc, #376]	; b4424 <_Z8calc_lowv+0x21c>
    delta = last_big - last_small;
   b42ac:	e9d3 4500 	ldrd	r4, r5, [r3]
   b42b0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b42b4:	4622      	mov	r2, r4
   b42b6:	462b      	mov	r3, r5
   b42b8:	f001 fd5e 	bl	b5d78 <__aeabi_dsub>
   b42bc:	4602      	mov	r2, r0
   b42be:	460b      	mov	r3, r1
   b42c0:	e9c6 2300 	strd	r2, r3, [r6]
    small_offset = last_small + delta * DELTA_OFFSET;
   b42c4:	a342      	add	r3, pc, #264	; (adr r3, b43d0 <_Z8calc_lowv+0x1c8>)
   b42c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42ca:	f001 ff0d 	bl	b60e8 <__aeabi_dmul>
   b42ce:	462b      	mov	r3, r5
   b42d0:	4622      	mov	r2, r4
   b42d2:	f001 fd53 	bl	b5d7c <__adddf3>
   b42d6:	4b47      	ldr	r3, [pc, #284]	; (b43f4 <_Z8calc_lowv+0x1ec>)
   b42d8:	f8d8 4000 	ldr.w	r4, [r8]
   b42dc:	4606      	mov	r6, r0
   b42de:	460f      	mov	r7, r1
   b42e0:	e9c3 6700 	strd	r6, r7, [r3]
   b42e4:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i <= range; i++)
   b42e8:	464d      	mov	r5, r9
   b42ea:	9b04      	ldr	r3, [sp, #16]
   b42ec:	42ab      	cmp	r3, r5
   b42ee:	db11      	blt.n	b4314 <_Z8calc_lowv+0x10c>
        if (cost[i] < small_offset)
   b42f0:	9905      	ldr	r1, [sp, #20]
   b42f2:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   b42f6:	4630      	mov	r0, r6
   b42f8:	9105      	str	r1, [sp, #20]
   b42fa:	4639      	mov	r1, r7
   b42fc:	f002 f984 	bl	b6608 <__aeabi_dcmpgt>
   b4300:	b130      	cbz	r0, b4310 <_Z8calc_lowv+0x108>
            low_range_hour[idx] = cost_hour[i];
   b4302:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
   b4306:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
            //Serial.printf("low_range_hour[%d]: %d\tcost_hour[%d]: %d\n",idx,low_range_hour[idx],i,cost_hour[i]);
            idx++;
   b430a:	f04f 0901 	mov.w	r9, #1
   b430e:	3401      	adds	r4, #1
    for (int i = 0; i <= range; i++)
   b4310:	3501      	adds	r5, #1
   b4312:	e7ea      	b.n	b42ea <_Z8calc_lowv+0xe2>
   b4314:	f1b9 0f00 	cmp.w	r9, #0
   b4318:	d001      	beq.n	b431e <_Z8calc_lowv+0x116>
   b431a:	f8c8 4000 	str.w	r4, [r8]
        }
    }

    // Calculations have been done - clear flag
    populate = false;
   b431e:	4b36      	ldr	r3, [pc, #216]	; (b43f8 <_Z8calc_lowv+0x1f0>)
    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
    Serial.printf("Lowest price of the day: %f\n", last_small);
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
    Serial.printf("cnt: %d\n",cnt);
   b4320:	4d36      	ldr	r5, [pc, #216]	; (b43fc <_Z8calc_lowv+0x1f4>)
    populate = false;
   b4322:	2400      	movs	r4, #0
   b4324:	701c      	strb	r4, [r3, #0]
    Serial.printf("Highest price of the day: %f\n", last_big);
   b4326:	f001 fa6d 	bl	b5804 <_Z16_fetch_usbserialv>
   b432a:	4b2c      	ldr	r3, [pc, #176]	; (b43dc <_Z8calc_lowv+0x1d4>)
   b432c:	4934      	ldr	r1, [pc, #208]	; (b4400 <_Z8calc_lowv+0x1f8>)
   b432e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4332:	f7ff ff5b 	bl	b41ec <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b4336:	f001 fa65 	bl	b5804 <_Z16_fetch_usbserialv>
   b433a:	4b2a      	ldr	r3, [pc, #168]	; (b43e4 <_Z8calc_lowv+0x1dc>)
   b433c:	4931      	ldr	r1, [pc, #196]	; (b4404 <_Z8calc_lowv+0x1fc>)
   b433e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4342:	f7ff ff53 	bl	b41ec <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4346:	f001 fa5d 	bl	b5804 <_Z16_fetch_usbserialv>
   b434a:	492f      	ldr	r1, [pc, #188]	; (b4408 <_Z8calc_lowv+0x200>)
   b434c:	f7ff ff4e 	bl	b41ec <_ZN5Print6printfEPKcz>
    Serial.printf("cnt: %d\n",cnt);
   b4350:	f001 fa58 	bl	b5804 <_Z16_fetch_usbserialv>
   b4354:	682a      	ldr	r2, [r5, #0]
   b4356:	492d      	ldr	r1, [pc, #180]	; (b440c <_Z8calc_lowv+0x204>)
   b4358:	f7ff ff48 	bl	b41ec <_ZN5Print6printfEPKcz>
    int i = 0;
    if (idx > 0)
   b435c:	f8d8 7000 	ldr.w	r7, [r8]
   b4360:	42a7      	cmp	r7, r4
   b4362:	dd1c      	ble.n	b439e <_Z8calc_lowv+0x196>
   b4364:	6829      	ldr	r1, [r5, #0]
   b4366:	4a2a      	ldr	r2, [pc, #168]	; (b4410 <_Z8calc_lowv+0x208>)
    {
        while (i <= idx)
        {
            start_stop[cnt][0] = low_range_hour[i];
   b4368:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4420 <_Z8calc_lowv+0x218>
   b436c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    int i = 0;
   b4370:	4623      	mov	r3, r4
            start_stop[cnt][0] = low_range_hour[i];
   b4372:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   b4376:	6010      	str	r0, [r2, #0]
   b4378:	eb0c 0683 	add.w	r6, ip, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b437c:	6830      	ldr	r0, [r6, #0]
   b437e:	f856 4f04 	ldr.w	r4, [r6, #4]!
   b4382:	3c01      	subs	r4, #1
   b4384:	42a0      	cmp	r0, r4
   b4386:	f103 0301 	add.w	r3, r3, #1
   b438a:	d0f7      	beq.n	b437c <_Z8calc_lowv+0x174>
            {
                i++;
            }
            
            start_stop[cnt][1] = low_range_hour[i]+1;
   b438c:	3001      	adds	r0, #1
        while (i <= idx)
   b438e:	429f      	cmp	r7, r3
            start_stop[cnt][1] = low_range_hour[i]+1;
   b4390:	6050      	str	r0, [r2, #4]
            
            cnt++;
   b4392:	f101 0001 	add.w	r0, r1, #1
        while (i <= idx)
   b4396:	f102 0208 	add.w	r2, r2, #8
   b439a:	da11      	bge.n	b43c0 <_Z8calc_lowv+0x1b8>
            i++;
        }
        cnt--;
   b439c:	6029      	str	r1, [r5, #0]
   b439e:	4c1c      	ldr	r4, [pc, #112]	; (b4410 <_Z8calc_lowv+0x208>)
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",start_stop[z][0],start_stop[z][1]);
   b43a0:	4f1c      	ldr	r7, [pc, #112]	; (b4414 <_Z8calc_lowv+0x20c>)
            cnt++;
   b43a2:	2600      	movs	r6, #0
    for (int z = 0; z < cnt; z++)
   b43a4:	682b      	ldr	r3, [r5, #0]
   b43a6:	42b3      	cmp	r3, r6
   b43a8:	f104 0408 	add.w	r4, r4, #8
   b43ac:	dd0a      	ble.n	b43c4 <_Z8calc_lowv+0x1bc>
        Serial.printf("%02d to %02d\n",start_stop[z][0],start_stop[z][1]);
   b43ae:	f001 fa29 	bl	b5804 <_Z16_fetch_usbserialv>
   b43b2:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b43b6:	4639      	mov	r1, r7
   b43b8:	f7ff ff18 	bl	b41ec <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b43bc:	3601      	adds	r6, #1
   b43be:	e7f1      	b.n	b43a4 <_Z8calc_lowv+0x19c>
            cnt++;
   b43c0:	4601      	mov	r1, r0
   b43c2:	e7d6      	b.n	b4372 <_Z8calc_lowv+0x16a>
    }

    work = true;
   b43c4:	4b14      	ldr	r3, [pc, #80]	; (b4418 <_Z8calc_lowv+0x210>)
   b43c6:	2201      	movs	r2, #1
   b43c8:	701a      	strb	r2, [r3, #0]
}
   b43ca:	b007      	add	sp, #28
   b43cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b43d0:	33333333 	.word	0x33333333
   b43d4:	3fd33333 	.word	0x3fd33333
   b43d8:	2003cd50 	.word	0x2003cd50
   b43dc:	2003d198 	.word	0x2003d198
   b43e0:	2003cf34 	.word	0x2003cf34
   b43e4:	2003cd48 	.word	0x2003cd48
   b43e8:	2003dc0c 	.word	0x2003dc0c
   b43ec:	2003cf40 	.word	0x2003cf40
   b43f0:	2003d188 	.word	0x2003d188
   b43f4:	2003dc10 	.word	0x2003dc10
   b43f8:	2003d204 	.word	0x2003d204
   b43fc:	2003cf3c 	.word	0x2003cf3c
   b4400:	000b8811 	.word	0x000b8811
   b4404:	000b882f 	.word	0x000b882f
   b4408:	000b884c 	.word	0x000b884c
   b440c:	000b888a 	.word	0x000b888a
   b4410:	2003dc18 	.word	0x2003dc18
   b4414:	000b8893 	.word	0x000b8893
   b4418:	2003e67d 	.word	0x2003e67d
   b441c:	2003d190 	.word	0x2003d190
   b4420:	2003d1a4 	.word	0x2003d1a4
   b4424:	2003d0c0 	.word	0x2003d0c0

000b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4428:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b442a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b442c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b442e:	b17c      	cbz	r4, b4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4430:	6863      	ldr	r3, [r4, #4]
   b4432:	3b01      	subs	r3, #1
   b4434:	6063      	str	r3, [r4, #4]
   b4436:	b95b      	cbnz	r3, b4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4438:	6823      	ldr	r3, [r4, #0]
   b443a:	4620      	mov	r0, r4
   b443c:	689b      	ldr	r3, [r3, #8]
   b443e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4440:	68a3      	ldr	r3, [r4, #8]
   b4442:	3b01      	subs	r3, #1
   b4444:	60a3      	str	r3, [r4, #8]
   b4446:	b91b      	cbnz	r3, b4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4448:	6823      	ldr	r3, [r4, #0]
   b444a:	4620      	mov	r0, r4
   b444c:	68db      	ldr	r3, [r3, #12]
   b444e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4450:	4628      	mov	r0, r5
   b4452:	bd38      	pop	{r3, r4, r5, pc}

000b4454 <loop>:
{
   b4454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (printer) // Debugging flag set in interrupt handler
   b4458:	4c2c      	ldr	r4, [pc, #176]	; (b450c <loop+0xb8>)
   b445a:	7823      	ldrb	r3, [r4, #0]
{
   b445c:	b08a      	sub	sp, #40	; 0x28
    if (printer) // Debugging flag set in interrupt handler
   b445e:	b143      	cbz	r3, b4472 <loop+0x1e>
        Serial.printf("Light: %d\n",calc_power);
   b4460:	f001 f9d0 	bl	b5804 <_Z16_fetch_usbserialv>
   b4464:	4b2a      	ldr	r3, [pc, #168]	; (b4510 <loop+0xbc>)
   b4466:	492b      	ldr	r1, [pc, #172]	; (b4514 <loop+0xc0>)
   b4468:	681a      	ldr	r2, [r3, #0]
   b446a:	f7ff febf 	bl	b41ec <_ZN5Print6printfEPKcz>
        printer = false;
   b446e:	2300      	movs	r3, #0
   b4470:	7023      	strb	r3, [r4, #0]
    if (populate)
   b4472:	4b29      	ldr	r3, [pc, #164]	; (b4518 <loop+0xc4>)
   b4474:	781b      	ldrb	r3, [r3, #0]
   b4476:	b17b      	cbz	r3, b4498 <loop+0x44>
        calc_low();
   b4478:	f7ff fec6 	bl	b4208 <_Z8calc_lowv>
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b447c:	f001 f9c2 	bl	b5804 <_Z16_fetch_usbserialv>
   b4480:	4604      	mov	r4, r0
   b4482:	f000 fd6d 	bl	b4f60 <_ZN9TimeClass4hourEv>
   b4486:	4605      	mov	r5, r0
   b4488:	f000 fd76 	bl	b4f78 <_ZN9TimeClass6minuteEv>
   b448c:	4923      	ldr	r1, [pc, #140]	; (b451c <loop+0xc8>)
   b448e:	4603      	mov	r3, r0
   b4490:	1caa      	adds	r2, r5, #2
   b4492:	4620      	mov	r0, r4
   b4494:	f7ff feaa 	bl	b41ec <_ZN5Print6printfEPKcz>
    if (work)
   b4498:	4e21      	ldr	r6, [pc, #132]	; (b4520 <loop+0xcc>)
   b449a:	7833      	ldrb	r3, [r6, #0]
   b449c:	b37b      	cbz	r3, b44fe <loop+0xaa>
        String data = "Cheap(ish) hours of the day: ";
   b449e:	4921      	ldr	r1, [pc, #132]	; (b4524 <loop+0xd0>)
   b44a0:	4c21      	ldr	r4, [pc, #132]	; (b4528 <loop+0xd4>)
        for (int z = 0; z < cnt; z++)
   b44a2:	f8df 8094 	ldr.w	r8, [pc, #148]	; b4538 <loop+0xe4>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b44a6:	4f21      	ldr	r7, [pc, #132]	; (b452c <loop+0xd8>)
        String data = "Cheap(ish) hours of the day: ";
   b44a8:	a802      	add	r0, sp, #8
   b44aa:	f000 fbd4 	bl	b4c56 <_ZN6StringC1EPK19__FlashStringHelper>
        for (int z = 0; z < cnt; z++)
   b44ae:	2500      	movs	r5, #0
   b44b0:	f8d8 3000 	ldr.w	r3, [r8]
   b44b4:	42ab      	cmp	r3, r5
   b44b6:	f104 0408 	add.w	r4, r4, #8
   b44ba:	dd0e      	ble.n	b44da <loop+0x86>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b44bc:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b44c0:	4639      	mov	r1, r7
   b44c2:	a806      	add	r0, sp, #24
   b44c4:	f000 fbf6 	bl	b4cb4 <_ZN6String6formatEPKcz>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b44c8:	a906      	add	r1, sp, #24
   b44ca:	a802      	add	r0, sp, #8
   b44cc:	f000 fbee 	bl	b4cac <_ZN6String6concatERKS_>
   b44d0:	a806      	add	r0, sp, #24
   b44d2:	f000 fb75 	bl	b4bc0 <_ZN6StringD1Ev>
        for (int z = 0; z < cnt; z++)
   b44d6:	3501      	adds	r5, #1
   b44d8:	e7ea      	b.n	b44b0 <loop+0x5c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b44da:	4b15      	ldr	r3, [pc, #84]	; (b4530 <loop+0xdc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b44dc:	9a02      	ldr	r2, [sp, #8]
   b44de:	781b      	ldrb	r3, [r3, #0]
   b44e0:	4914      	ldr	r1, [pc, #80]	; (b4534 <loop+0xe0>)
   b44e2:	f88d 3000 	strb.w	r3, [sp]
   b44e6:	a806      	add	r0, sp, #24
   b44e8:	233c      	movs	r3, #60	; 0x3c
   b44ea:	f000 ff4d 	bl	b5388 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b44ee:	a807      	add	r0, sp, #28
   b44f0:	f7ff ff9a 	bl	b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        work = false;
   b44f4:	2300      	movs	r3, #0
        String data = "Cheap(ish) hours of the day: ";
   b44f6:	a802      	add	r0, sp, #8
        work = false;
   b44f8:	7033      	strb	r3, [r6, #0]
        String data = "Cheap(ish) hours of the day: ";
   b44fa:	f000 fb61 	bl	b4bc0 <_ZN6StringD1Ev>
    delay(5000);
   b44fe:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b4502:	b00a      	add	sp, #40	; 0x28
   b4504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(5000);
   b4508:	f000 bd6c 	b.w	b4fe4 <delay>
   b450c:	2003d205 	.word	0x2003d205
   b4510:	2003cf38 	.word	0x2003cf38
   b4514:	000b88a1 	.word	0x000b88a1
   b4518:	2003d204 	.word	0x2003d204
   b451c:	000b88ac 	.word	0x000b88ac
   b4520:	2003e67d 	.word	0x2003e67d
   b4524:	000b88c6 	.word	0x000b88c6
   b4528:	2003dc18 	.word	0x2003dc18
   b452c:	000b88e4 	.word	0x000b88e4
   b4530:	2003cf30 	.word	0x2003cf30
   b4534:	000b88f3 	.word	0x000b88f3
   b4538:	2003cf3c 	.word	0x2003cf3c

000b453c <_Z8get_datai>:

void get_data(int day)
{
    rec_cnt = 0;
   b453c:	4a19      	ldr	r2, [pc, #100]	; (b45a4 <_Z8get_datai+0x68>)
   b453e:	2300      	movs	r3, #0
{
   b4540:	b510      	push	{r4, lr}
    rec_cnt = 0;
   b4542:	7013      	strb	r3, [r2, #0]
    range = 48;
   b4544:	4a18      	ldr	r2, [pc, #96]	; (b45a8 <_Z8get_datai+0x6c>)
   b4546:	2130      	movs	r1, #48	; 0x30
   b4548:	6011      	str	r1, [r2, #0]
    idx = 0;
   b454a:	4a18      	ldr	r2, [pc, #96]	; (b45ac <_Z8get_datai+0x70>)
   b454c:	6013      	str	r3, [r2, #0]
    cnt = 0;
   b454e:	4a18      	ldr	r2, [pc, #96]	; (b45b0 <_Z8get_datai+0x74>)
   b4550:	6013      	str	r3, [r2, #0]
    temp[0] = 0;
   b4552:	4a18      	ldr	r2, [pc, #96]	; (b45b4 <_Z8get_datai+0x78>)
{
   b4554:	b08c      	sub	sp, #48	; 0x30
    temp[0] = 0;
   b4556:	7013      	strb	r3, [r2, #0]
{
   b4558:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
   b455a:	f000 fd2d 	bl	b4fb8 <_ZN9TimeClass4yearEv>
   b455e:	9005      	str	r0, [sp, #20]
   b4560:	f000 fd22 	bl	b4fa8 <_ZN9TimeClass5monthEv>
   b4564:	9004      	str	r0, [sp, #16]
   b4566:	f000 fcfb 	bl	b4f60 <_ZN9TimeClass4hourEv>
   b456a:	1ca1      	adds	r1, r4, #2
   b456c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b4570:	e9cd 4100 	strd	r4, r1, [sp]
   b4574:	9002      	str	r0, [sp, #8]
   b4576:	4910      	ldr	r1, [pc, #64]	; (b45b8 <_Z8get_datai+0x7c>)
   b4578:	a808      	add	r0, sp, #32
   b457a:	f000 fb9b 	bl	b4cb4 <_ZN6String6formatEPKcz>
   b457e:	4b0f      	ldr	r3, [pc, #60]	; (b45bc <_Z8get_datai+0x80>)
   b4580:	9a08      	ldr	r2, [sp, #32]
   b4582:	781b      	ldrb	r3, [r3, #0]
   b4584:	490e      	ldr	r1, [pc, #56]	; (b45c0 <_Z8get_datai+0x84>)
   b4586:	f88d 3000 	strb.w	r3, [sp]
   b458a:	a806      	add	r0, sp, #24
   b458c:	233c      	movs	r3, #60	; 0x3c
   b458e:	f000 fefb 	bl	b5388 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4592:	a807      	add	r0, sp, #28
   b4594:	f7ff ff48 	bl	b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4598:	a808      	add	r0, sp, #32
   b459a:	f000 fb11 	bl	b4bc0 <_ZN6StringD1Ev>
    //Serial.printf("%s\n", data.c_str());
     // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
   b459e:	b00c      	add	sp, #48	; 0x30
   b45a0:	bd10      	pop	{r4, pc}
   b45a2:	bf00      	nop
   b45a4:	2003d206 	.word	0x2003d206
   b45a8:	2003cd50 	.word	0x2003cd50
   b45ac:	2003d190 	.word	0x2003d190
   b45b0:	2003cf3c 	.word	0x2003cf3c
   b45b4:	2003dc78 	.word	0x2003dc78
   b45b8:	000b8903 	.word	0x000b8903
   b45bc:	2003cf30 	.word	0x2003cf30
   b45c0:	000b8956 	.word	0x000b8956

000b45c4 <setup>:
{
   b45c4:	b513      	push	{r0, r1, r4, lr}
   b45c6:	f000 f88d 	bl	b46e4 <HAL_Timer_Get_Milli_Seconds>
    last_read = millis(); //Give it an initial value
   b45ca:	4b1b      	ldr	r3, [pc, #108]	; (b4638 <setup+0x74>)
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b45cc:	2400      	movs	r4, #0
    last_read = millis(); //Give it an initial value
   b45ce:	6018      	str	r0, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                 //Setup pinmode for LDR pin
   b45d0:	2103      	movs	r1, #3
   b45d2:	2006      	movs	r0, #6
   b45d4:	f001 fb3a 	bl	b5c4c <pinMode>
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b45d8:	4918      	ldr	r1, [pc, #96]	; (b463c <setup+0x78>)
   b45da:	9400      	str	r4, [sp, #0]
   b45dc:	f04f 33ff 	mov.w	r3, #4294967295
   b45e0:	2201      	movs	r2, #1
   b45e2:	2006      	movs	r0, #6
   b45e4:	f001 f936 	bl	b5854 <_Z15attachInterrupttPFvvE13InterruptModeah>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b45e8:	4623      	mov	r3, r4
   b45ea:	4915      	ldr	r1, [pc, #84]	; (b4640 <setup+0x7c>)
   b45ec:	4815      	ldr	r0, [pc, #84]	; (b4644 <setup+0x80>)
   b45ee:	2209      	movs	r2, #9
   b45f0:	f000 f9fc 	bl	b49ec <spark_variable>
   b45f4:	4623      	mov	r3, r4
   b45f6:	4914      	ldr	r1, [pc, #80]	; (b4648 <setup+0x84>)
   b45f8:	4814      	ldr	r0, [pc, #80]	; (b464c <setup+0x88>)
   b45fa:	2209      	movs	r2, #9
   b45fc:	f000 f9f6 	bl	b49ec <spark_variable>
   b4600:	4623      	mov	r3, r4
   b4602:	4913      	ldr	r1, [pc, #76]	; (b4650 <setup+0x8c>)
   b4604:	4813      	ldr	r0, [pc, #76]	; (b4654 <setup+0x90>)
   b4606:	2202      	movs	r2, #2
   b4608:	f000 f9f0 	bl	b49ec <spark_variable>
    get_data(Time.day());
   b460c:	f000 fcc0 	bl	b4f90 <_ZN9TimeClass3dayEv>
   b4610:	f7ff ff94 	bl	b453c <_Z8get_datai>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4614:	4623      	mov	r3, r4
   b4616:	4622      	mov	r2, r4
   b4618:	e9cd 4400 	strd	r4, r4, [sp]
   b461c:	490e      	ldr	r1, [pc, #56]	; (b4658 <setup+0x94>)
   b461e:	480f      	ldr	r0, [pc, #60]	; (b465c <setup+0x98>)
   b4620:	f000 fa04 	bl	b4a2c <spark_subscribe>
   b4624:	e9cd 4400 	strd	r4, r4, [sp]
   b4628:	490d      	ldr	r1, [pc, #52]	; (b4660 <setup+0x9c>)
   b462a:	480e      	ldr	r0, [pc, #56]	; (b4664 <setup+0xa0>)
   b462c:	4623      	mov	r3, r4
   b462e:	4622      	mov	r2, r4
   b4630:	f000 f9fc 	bl	b4a2c <spark_subscribe>
}
   b4634:	b002      	add	sp, #8
   b4636:	bd10      	pop	{r4, pc}
   b4638:	2003d1a0 	.word	0x2003d1a0
   b463c:	000b40b5 	.word	0x000b40b5
   b4640:	2003d198 	.word	0x2003d198
   b4644:	000b895f 	.word	0x000b895f
   b4648:	2003cd48 	.word	0x2003cd48
   b464c:	000b8967 	.word	0x000b8967
   b4650:	2003cf38 	.word	0x2003cf38
   b4654:	000b8970 	.word	0x000b8970
   b4658:	000b40e9 	.word	0x000b40e9
   b465c:	000b897a 	.word	0x000b897a
   b4660:	000b4669 	.word	0x000b4669
   b4664:	000b8976 	.word	0x000b8976

000b4668 <_Z14myPriceHandlerPKcS0_>:
{
   b4668:	b508      	push	{r3, lr}
    get_data(Time.day());
   b466a:	f000 fc91 	bl	b4f90 <_ZN9TimeClass3dayEv>
}
   b466e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    get_data(Time.day());
   b4672:	f7ff bf63 	b.w	b453c <_Z8get_datai>
	...

000b4678 <_GLOBAL__sub_I_cost>:
        val_(val) {
   b4678:	4b01      	ldr	r3, [pc, #4]	; (b4680 <_GLOBAL__sub_I_cost+0x8>)
   b467a:	2201      	movs	r2, #1
   b467c:	701a      	strb	r2, [r3, #0]
   b467e:	4770      	bx	lr
   b4680:	2003cf30 	.word	0x2003cf30

000b4684 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <netdb_freeaddrinfo+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	689b      	ldr	r3, [r3, #8]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030268 	.word	0x00030268

000b4694 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <netdb_getaddrinfo+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	68db      	ldr	r3, [r3, #12]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030268 	.word	0x00030268

000b46a4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <HAL_Pin_Mode+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	689b      	ldr	r3, [r3, #8]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	0003022c 	.word	0x0003022c

000b46b4 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <HAL_Interrupts_Attach+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	699b      	ldr	r3, [r3, #24]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	0003022c 	.word	0x0003022c

000b46c4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <HAL_Interrupts_Detach+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	69db      	ldr	r3, [r3, #28]
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	0003022c 	.word	0x0003022c

000b46d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <HAL_RNG_GetRandomNumber+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	685b      	ldr	r3, [r3, #4]
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	00030218 	.word	0x00030218

000b46e4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	695b      	ldr	r3, [r3, #20]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030218 	.word	0x00030218

000b46f4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <hal_rtc_time_is_valid+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030218 	.word	0x00030218

000b4704 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <hal_rtc_get_time+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030218 	.word	0x00030218

000b4714 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <os_mutex_recursive_create+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030248 	.word	0x00030248

000b4724 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <inet_inet_ntop+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	695b      	ldr	r3, [r3, #20]
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030264 	.word	0x00030264

000b4734 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <hal_usart_write+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	68db      	ldr	r3, [r3, #12]
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	0003023c 	.word	0x0003023c

000b4744 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <hal_usart_available+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	691b      	ldr	r3, [r3, #16]
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	0003023c 	.word	0x0003023c

000b4754 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <hal_usart_read+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	695b      	ldr	r3, [r3, #20]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	0003023c 	.word	0x0003023c

000b4764 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <hal_usart_peek+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	699b      	ldr	r3, [r3, #24]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	0003023c 	.word	0x0003023c

000b4774 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <hal_usart_flush+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	69db      	ldr	r3, [r3, #28]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	0003023c 	.word	0x0003023c

000b4784 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <hal_usart_is_enabled+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	6a1b      	ldr	r3, [r3, #32]
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	0003023c 	.word	0x0003023c

000b4794 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <hal_usart_available_data_for_write+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	0003023c 	.word	0x0003023c

000b47a4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <hal_usart_init_ex+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003023c 	.word	0x0003023c

000b47b4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <hal_i2c_write+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	6a1b      	ldr	r3, [r3, #32]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	00030228 	.word	0x00030228

000b47c4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <hal_i2c_available+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	00030228 	.word	0x00030228

000b47d4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <hal_i2c_read+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	00030228 	.word	0x00030228

000b47e4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <hal_i2c_peek+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	00030228 	.word	0x00030228

000b47f4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <hal_i2c_flush+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	00030228 	.word	0x00030228

000b4804 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <hal_i2c_is_enabled+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	00030228 	.word	0x00030228

000b4814 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <hal_i2c_init+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030228 	.word	0x00030228

000b4824 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <hal_spi_init+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	69db      	ldr	r3, [r3, #28]
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030230 	.word	0x00030230

000b4834 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <hal_spi_is_enabled+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	6a1b      	ldr	r3, [r3, #32]
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030230 	.word	0x00030230

000b4844 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <HAL_USB_USART_Init+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	681b      	ldr	r3, [r3, #0]
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	0003024c 	.word	0x0003024c

000b4854 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <HAL_USB_USART_Available_Data+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	691b      	ldr	r3, [r3, #16]
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	0003024c 	.word	0x0003024c

000b4864 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	695b      	ldr	r3, [r3, #20]
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	0003024c 	.word	0x0003024c

000b4874 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <HAL_USB_USART_Receive_Data+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	699b      	ldr	r3, [r3, #24]
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	0003024c 	.word	0x0003024c

000b4884 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <HAL_USB_USART_Send_Data+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	69db      	ldr	r3, [r3, #28]
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	0003024c 	.word	0x0003024c

000b4894 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <HAL_USB_USART_Flush_Data+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	6a1b      	ldr	r3, [r3, #32]
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	0003024c 	.word	0x0003024c

000b48a4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <system_mode+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	681b      	ldr	r3, [r3, #0]
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	00030220 	.word	0x00030220

000b48b4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <set_system_mode+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	685b      	ldr	r3, [r3, #4]
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	00030220 	.word	0x00030220

000b48c4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <system_delay_ms+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	695b      	ldr	r3, [r3, #20]
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	00030220 	.word	0x00030220

000b48d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <application_thread_current+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	00030220 	.word	0x00030220

000b48e4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <application_thread_invoke+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	00030220 	.word	0x00030220

000b48f4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <system_thread_get_state+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	00030220 	.word	0x00030220

000b4904 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b03      	ldr	r3, [pc, #12]	; (b4914 <system_ctrl_set_app_request_handler+0x10>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b490e:	9301      	str	r3, [sp, #4]
   b4910:	bd08      	pop	{r3, pc}
   b4912:	0000      	.short	0x0000
   b4914:	00030220 	.word	0x00030220

000b4918 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b03      	ldr	r3, [pc, #12]	; (b4928 <system_ctrl_set_result+0x10>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4922:	9301      	str	r3, [sp, #4]
   b4924:	bd08      	pop	{r3, pc}
   b4926:	0000      	.short	0x0000
   b4928:	00030220 	.word	0x00030220

000b492c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <network_connect+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	685b      	ldr	r3, [r3, #4]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	00030240 	.word	0x00030240

000b493c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <network_connecting+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	689b      	ldr	r3, [r3, #8]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	00030240 	.word	0x00030240

000b494c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <network_disconnect+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	68db      	ldr	r3, [r3, #12]
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	00030240 	.word	0x00030240

000b495c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <network_ready+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	691b      	ldr	r3, [r3, #16]
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	00030240 	.word	0x00030240

000b496c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <network_on+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	695b      	ldr	r3, [r3, #20]
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	00030240 	.word	0x00030240

000b497c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <network_off+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	699b      	ldr	r3, [r3, #24]
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	00030240 	.word	0x00030240

000b498c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <network_listen+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	69db      	ldr	r3, [r3, #28]
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	00030240 	.word	0x00030240

000b499c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <network_listening+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	6a1b      	ldr	r3, [r3, #32]
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	00030240 	.word	0x00030240

000b49ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <network_set_listen_timeout+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	00030240 	.word	0x00030240

000b49bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <network_get_listen_timeout+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	00030240 	.word	0x00030240

000b49cc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <network_is_on+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	00030240 	.word	0x00030240

000b49dc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <network_is_off+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	00030240 	.word	0x00030240

000b49ec <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <spark_variable+0xc>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	681b      	ldr	r3, [r3, #0]
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	00030244 	.word	0x00030244

000b49fc <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <spark_process+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	689b      	ldr	r3, [r3, #8]
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	00030244 	.word	0x00030244

000b4a0c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <spark_cloud_flag_connected+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	695b      	ldr	r3, [r3, #20]
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	00030244 	.word	0x00030244

000b4a1c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <spark_send_event+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	6a1b      	ldr	r3, [r3, #32]
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	00030244 	.word	0x00030244

000b4a2c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <spark_subscribe+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	00030244 	.word	0x00030244

000b4a3c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <spark_sync_time_pending+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	00030244 	.word	0x00030244

000b4a4c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	00030244 	.word	0x00030244

000b4a5c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <malloc+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	681b      	ldr	r3, [r3, #0]
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	0003021c 	.word	0x0003021c

000b4a6c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <free+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	685b      	ldr	r3, [r3, #4]
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	0003021c 	.word	0x0003021c

000b4a7c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <realloc+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	689b      	ldr	r3, [r3, #8]
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	0003021c 	.word	0x0003021c

000b4a8c <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <sscanf+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	695b      	ldr	r3, [r3, #20]
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	0003021c 	.word	0x0003021c

000b4a9c <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <vsnprintf+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	0003021c 	.word	0x0003021c

000b4aac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <abort+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	0003021c 	.word	0x0003021c

000b4abc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b02      	ldr	r3, [pc, #8]	; (b4ac8 <_malloc_r+0xc>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ac4:	9301      	str	r3, [sp, #4]
   b4ac6:	bd08      	pop	{r3, pc}
   b4ac8:	0003021c 	.word	0x0003021c

000b4acc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <__errno+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	0003021c 	.word	0x0003021c

000b4adc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b02      	ldr	r3, [pc, #8]	; (b4ae8 <__assert_func+0xc>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ae4:	9301      	str	r3, [sp, #4]
   b4ae6:	bd08      	pop	{r3, pc}
   b4ae8:	0003021c 	.word	0x0003021c

000b4aec <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4aec:	b508      	push	{r3, lr}
   b4aee:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <newlib_impure_ptr_callback+0xc>)
   b4af0:	681b      	ldr	r3, [r3, #0]
   b4af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4af4:	9301      	str	r3, [sp, #4]
   b4af6:	bd08      	pop	{r3, pc}
   b4af8:	0003021c 	.word	0x0003021c

000b4afc <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <localtime_r+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	0003021c 	.word	0x0003021c

000b4b0c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4b0c:	2200      	movs	r2, #0
   b4b0e:	6840      	ldr	r0, [r0, #4]
   b4b10:	4611      	mov	r1, r2
   b4b12:	f7ff bf43 	b.w	b499c <network_listening>

000b4b16 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b16:	2200      	movs	r2, #0
   b4b18:	6840      	ldr	r0, [r0, #4]
   b4b1a:	4611      	mov	r1, r2
   b4b1c:	f7ff bf4e 	b.w	b49bc <network_get_listen_timeout>

000b4b20 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b20:	6840      	ldr	r0, [r0, #4]
   b4b22:	2200      	movs	r2, #0
   b4b24:	f7ff bf42 	b.w	b49ac <network_set_listen_timeout>

000b4b28 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b28:	6840      	ldr	r0, [r0, #4]
   b4b2a:	2200      	movs	r2, #0
   b4b2c:	f081 0101 	eor.w	r1, r1, #1
   b4b30:	f7ff bf2c 	b.w	b498c <network_listen>

000b4b34 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4b34:	2300      	movs	r3, #0
   b4b36:	6840      	ldr	r0, [r0, #4]
   b4b38:	461a      	mov	r2, r3
   b4b3a:	4619      	mov	r1, r3
   b4b3c:	f7ff bf1e 	b.w	b497c <network_off>

000b4b40 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4b40:	2300      	movs	r3, #0
   b4b42:	6840      	ldr	r0, [r0, #4]
   b4b44:	461a      	mov	r2, r3
   b4b46:	4619      	mov	r1, r3
   b4b48:	f7ff bf10 	b.w	b496c <network_on>

000b4b4c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4b4c:	2200      	movs	r2, #0
   b4b4e:	6840      	ldr	r0, [r0, #4]
   b4b50:	4611      	mov	r1, r2
   b4b52:	f7ff bf03 	b.w	b495c <network_ready>

000b4b56 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4b56:	2200      	movs	r2, #0
   b4b58:	6840      	ldr	r0, [r0, #4]
   b4b5a:	4611      	mov	r1, r2
   b4b5c:	f7ff beee 	b.w	b493c <network_connecting>

000b4b60 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b60:	6840      	ldr	r0, [r0, #4]
   b4b62:	2200      	movs	r2, #0
   b4b64:	2102      	movs	r1, #2
   b4b66:	f7ff bef1 	b.w	b494c <network_disconnect>

000b4b6a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b6a:	2300      	movs	r3, #0
   b4b6c:	6840      	ldr	r0, [r0, #4]
   b4b6e:	461a      	mov	r2, r3
   b4b70:	f7ff bedc 	b.w	b492c <network_connect>

000b4b74 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4b74:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4b76:	2203      	movs	r2, #3
   b4b78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4b7a:	4a02      	ldr	r2, [pc, #8]	; (b4b84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4b7c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4b7e:	4770      	bx	lr
   b4b80:	2003e680 	.word	0x2003e680
   b4b84:	000b898c 	.word	0x000b898c

000b4b88 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4b88:	b510      	push	{r4, lr}
   b4b8a:	4604      	mov	r4, r0
   b4b8c:	4608      	mov	r0, r1
{
    _spi = spi;
   b4b8e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4b90:	f7ff fe48 	bl	b4824 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4b94:	2300      	movs	r3, #0
   b4b96:	6063      	str	r3, [r4, #4]
}
   b4b98:	4620      	mov	r0, r4
   b4b9a:	bd10      	pop	{r4, pc}

000b4b9c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4b9c:	4b05      	ldr	r3, [pc, #20]	; (b4bb4 <_GLOBAL__sub_I_System+0x18>)
   b4b9e:	2202      	movs	r2, #2
   b4ba0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4ba2:	4b05      	ldr	r3, [pc, #20]	; (b4bb8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ba4:	4a05      	ldr	r2, [pc, #20]	; (b4bbc <_GLOBAL__sub_I_System+0x20>)
   b4ba6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ba8:	2000      	movs	r0, #0
   b4baa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4bae:	f7ff be81 	b.w	b48b4 <set_system_mode>
   b4bb2:	bf00      	nop
   b4bb4:	2003e694 	.word	0x2003e694
   b4bb8:	2003e688 	.word	0x2003e688
   b4bbc:	ffff0000 	.word	0xffff0000

000b4bc0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4bc0:	b510      	push	{r4, lr}
   b4bc2:	4604      	mov	r4, r0
{
	free(buffer);
   b4bc4:	6800      	ldr	r0, [r0, #0]
   b4bc6:	f7ff ff51 	bl	b4a6c <free>
}
   b4bca:	4620      	mov	r0, r4
   b4bcc:	bd10      	pop	{r4, pc}

000b4bce <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4bce:	b510      	push	{r4, lr}
   b4bd0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4bd2:	6800      	ldr	r0, [r0, #0]
   b4bd4:	b108      	cbz	r0, b4bda <_ZN6String10invalidateEv+0xc>
   b4bd6:	f7ff ff49 	bl	b4a6c <free>
	buffer = NULL;
   b4bda:	2300      	movs	r3, #0
	capacity = len = 0;
   b4bdc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4be0:	6023      	str	r3, [r4, #0]
}
   b4be2:	bd10      	pop	{r4, pc}

000b4be4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4be4:	b538      	push	{r3, r4, r5, lr}
   b4be6:	4604      	mov	r4, r0
   b4be8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4bea:	6800      	ldr	r0, [r0, #0]
   b4bec:	3101      	adds	r1, #1
   b4bee:	f7ff ff45 	bl	b4a7c <realloc>
	if (newbuffer) {
   b4bf2:	b110      	cbz	r0, b4bfa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4bf4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4bf8:	2001      	movs	r0, #1
	}
	return 0;
}
   b4bfa:	bd38      	pop	{r3, r4, r5, pc}

000b4bfc <_ZN6String7reserveEj>:
{
   b4bfc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4bfe:	6803      	ldr	r3, [r0, #0]
{
   b4c00:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4c02:	b123      	cbz	r3, b4c0e <_ZN6String7reserveEj+0x12>
   b4c04:	6843      	ldr	r3, [r0, #4]
   b4c06:	428b      	cmp	r3, r1
   b4c08:	d301      	bcc.n	b4c0e <_ZN6String7reserveEj+0x12>
   b4c0a:	2001      	movs	r0, #1
}
   b4c0c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4c0e:	4620      	mov	r0, r4
   b4c10:	f7ff ffe8 	bl	b4be4 <_ZN6String12changeBufferEj>
   b4c14:	2800      	cmp	r0, #0
   b4c16:	d0f9      	beq.n	b4c0c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4c18:	68a3      	ldr	r3, [r4, #8]
   b4c1a:	2b00      	cmp	r3, #0
   b4c1c:	d1f5      	bne.n	b4c0a <_ZN6String7reserveEj+0xe>
   b4c1e:	6822      	ldr	r2, [r4, #0]
   b4c20:	7013      	strb	r3, [r2, #0]
   b4c22:	e7f2      	b.n	b4c0a <_ZN6String7reserveEj+0xe>

000b4c24 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c26:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4c28:	4611      	mov	r1, r2
   b4c2a:	9201      	str	r2, [sp, #4]
{
   b4c2c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4c2e:	f7ff ffe5 	bl	b4bfc <_ZN6String7reserveEj>
   b4c32:	9a01      	ldr	r2, [sp, #4]
   b4c34:	b928      	cbnz	r0, b4c42 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4c36:	4620      	mov	r0, r4
   b4c38:	f7ff ffc9 	bl	b4bce <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4c3c:	4620      	mov	r0, r4
   b4c3e:	b003      	add	sp, #12
   b4c40:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4c42:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4c44:	4629      	mov	r1, r5
   b4c46:	6820      	ldr	r0, [r4, #0]
   b4c48:	f001 fd33 	bl	b66b2 <memcpy>
	buffer[len] = 0;
   b4c4c:	6822      	ldr	r2, [r4, #0]
   b4c4e:	68a3      	ldr	r3, [r4, #8]
   b4c50:	2100      	movs	r1, #0
   b4c52:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4c54:	e7f2      	b.n	b4c3c <_ZN6String4copyEPKcj+0x18>

000b4c56 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4c56:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4c58:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4c5a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4c5e:	4604      	mov	r4, r0
	len = 0;
   b4c60:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4c62:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4c64:	b141      	cbz	r1, b4c78 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4c66:	4608      	mov	r0, r1
   b4c68:	9101      	str	r1, [sp, #4]
   b4c6a:	f001 fd9c 	bl	b67a6 <strlen>
   b4c6e:	9901      	ldr	r1, [sp, #4]
   b4c70:	4602      	mov	r2, r0
   b4c72:	4620      	mov	r0, r4
   b4c74:	f7ff ffd6 	bl	b4c24 <_ZN6String4copyEPKcj>
}
   b4c78:	4620      	mov	r0, r4
   b4c7a:	b002      	add	sp, #8
   b4c7c:	bd10      	pop	{r4, pc}

000b4c7e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4c7e:	b570      	push	{r4, r5, r6, lr}
   b4c80:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4c82:	460e      	mov	r6, r1
   b4c84:	b909      	cbnz	r1, b4c8a <_ZN6String6concatEPKcj+0xc>
   b4c86:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4c88:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4c8a:	b16a      	cbz	r2, b4ca8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4c8c:	6884      	ldr	r4, [r0, #8]
   b4c8e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4c90:	4621      	mov	r1, r4
   b4c92:	f7ff ffb3 	bl	b4bfc <_ZN6String7reserveEj>
   b4c96:	2800      	cmp	r0, #0
   b4c98:	d0f5      	beq.n	b4c86 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4c9a:	6828      	ldr	r0, [r5, #0]
   b4c9c:	68ab      	ldr	r3, [r5, #8]
   b4c9e:	4631      	mov	r1, r6
   b4ca0:	4418      	add	r0, r3
   b4ca2:	f001 fd5a 	bl	b675a <strcpy>
	len = newlen;
   b4ca6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4ca8:	2001      	movs	r0, #1
   b4caa:	e7ed      	b.n	b4c88 <_ZN6String6concatEPKcj+0xa>

000b4cac <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b4cac:	688a      	ldr	r2, [r1, #8]
   b4cae:	6809      	ldr	r1, [r1, #0]
   b4cb0:	f7ff bfe5 	b.w	b4c7e <_ZN6String6concatEPKcj>

000b4cb4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b4cb4:	b40e      	push	{r1, r2, r3}
   b4cb6:	b570      	push	{r4, r5, r6, lr}
   b4cb8:	b087      	sub	sp, #28
   b4cba:	ad0b      	add	r5, sp, #44	; 0x2c
   b4cbc:	4604      	mov	r4, r0
   b4cbe:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4cc2:	9201      	str	r2, [sp, #4]
   b4cc4:	462b      	mov	r3, r5
   b4cc6:	2105      	movs	r1, #5
   b4cc8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b4cca:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4ccc:	f7ff fee6 	bl	b4a9c <vsnprintf>
    va_end(marker);

    String result;
   b4cd0:	490b      	ldr	r1, [pc, #44]	; (b4d00 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4cd2:	4606      	mov	r6, r0
    String result;
   b4cd4:	4620      	mov	r0, r4
   b4cd6:	f7ff ffbe 	bl	b4c56 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b4cda:	4631      	mov	r1, r6
   b4cdc:	4620      	mov	r0, r4
   b4cde:	f7ff ff8d 	bl	b4bfc <_ZN6String7reserveEj>
    if (result.buffer) {
   b4ce2:	6820      	ldr	r0, [r4, #0]
   b4ce4:	b130      	cbz	r0, b4cf4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4ce6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b4ce8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4cea:	462b      	mov	r3, r5
   b4cec:	1c71      	adds	r1, r6, #1
   b4cee:	f7ff fed5 	bl	b4a9c <vsnprintf>
        va_end(marker);
        result.len = n;
   b4cf2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b4cf4:	4620      	mov	r0, r4
   b4cf6:	b007      	add	sp, #28
   b4cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b4cfc:	b003      	add	sp, #12
   b4cfe:	4770      	bx	lr
   b4d00:	000b8889 	.word	0x000b8889

000b4d04 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4d04:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4d06:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d08:	4604      	mov	r4, r0
      if (_M_manager)
   b4d0a:	b113      	cbz	r3, b4d12 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d0c:	2203      	movs	r2, #3
   b4d0e:	4601      	mov	r1, r0
   b4d10:	4798      	blx	r3
    }
   b4d12:	4620      	mov	r0, r4
   b4d14:	bd10      	pop	{r4, pc}

000b4d16 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4d16:	b513      	push	{r0, r1, r4, lr}
   b4d18:	460b      	mov	r3, r1
   b4d1a:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d1c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4d20:	466c      	mov	r4, sp
   b4d22:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4d26:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4d2a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4d2e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4d32:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4d36:	b002      	add	sp, #8
   b4d38:	bd10      	pop	{r4, pc}
	...

000b4d3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4d3c:	4802      	ldr	r0, [pc, #8]	; (b4d48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4d3e:	2300      	movs	r3, #0
   b4d40:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4d42:	f7ff bce7 	b.w	b4714 <os_mutex_recursive_create>
   b4d46:	bf00      	nop
   b4d48:	2003e698 	.word	0x2003e698

000b4d4c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d4e:	4606      	mov	r6, r0
   b4d50:	460d      	mov	r5, r1
  size_t n = 0;
   b4d52:	188f      	adds	r7, r1, r2
   b4d54:	2400      	movs	r4, #0
  while (size--) {
   b4d56:	42bd      	cmp	r5, r7
   b4d58:	d00c      	beq.n	b4d74 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4d5a:	6833      	ldr	r3, [r6, #0]
   b4d5c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4d60:	689b      	ldr	r3, [r3, #8]
   b4d62:	4630      	mov	r0, r6
   b4d64:	4798      	blx	r3
     if (chunk>=0)
   b4d66:	1e03      	subs	r3, r0, #0
   b4d68:	db01      	blt.n	b4d6e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4d6a:	441c      	add	r4, r3
  while (size--) {
   b4d6c:	e7f3      	b.n	b4d56 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4d6e:	2c00      	cmp	r4, #0
   b4d70:	bf08      	it	eq
   b4d72:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4d74:	4620      	mov	r0, r4
   b4d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d78 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4d78:	b513      	push	{r0, r1, r4, lr}
   b4d7a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4d7c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4d7e:	b159      	cbz	r1, b4d98 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4d80:	9101      	str	r1, [sp, #4]
   b4d82:	f001 fd10 	bl	b67a6 <strlen>
   b4d86:	6823      	ldr	r3, [r4, #0]
   b4d88:	9901      	ldr	r1, [sp, #4]
   b4d8a:	68db      	ldr	r3, [r3, #12]
   b4d8c:	4602      	mov	r2, r0
   b4d8e:	4620      	mov	r0, r4
    }
   b4d90:	b002      	add	sp, #8
   b4d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4d96:	4718      	bx	r3
    }
   b4d98:	b002      	add	sp, #8
   b4d9a:	bd10      	pop	{r4, pc}

000b4d9c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4d9c:	6803      	ldr	r3, [r0, #0]
   b4d9e:	689b      	ldr	r3, [r3, #8]
   b4da0:	4718      	bx	r3

000b4da2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4da2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4da4:	210d      	movs	r1, #13
{
   b4da6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4da8:	f7ff fff8 	bl	b4d9c <_ZN5Print5printEc>
  n += print('\n');
   b4dac:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4dae:	4604      	mov	r4, r0
  n += print('\n');
   b4db0:	4628      	mov	r0, r5
   b4db2:	f7ff fff3 	bl	b4d9c <_ZN5Print5printEc>
  return n;
}
   b4db6:	4420      	add	r0, r4
   b4db8:	bd38      	pop	{r3, r4, r5, pc}

000b4dba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4dba:	b530      	push	{r4, r5, lr}
   b4dbc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4dbe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4dc0:	2a01      	cmp	r2, #1
  *str = '\0';
   b4dc2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4dc6:	bf98      	it	ls
   b4dc8:	220a      	movls	r2, #10
   b4dca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4dcc:	460d      	mov	r5, r1
   b4dce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4dd2:	fb01 5312 	mls	r3, r1, r2, r5
   b4dd6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4dda:	2b09      	cmp	r3, #9
   b4ddc:	bf94      	ite	ls
   b4dde:	3330      	addls	r3, #48	; 0x30
   b4de0:	3337      	addhi	r3, #55	; 0x37
   b4de2:	b2db      	uxtb	r3, r3
  } while(n);
   b4de4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4de6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4dea:	d9ef      	bls.n	b4dcc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4dec:	4621      	mov	r1, r4
   b4dee:	f7ff ffc3 	bl	b4d78 <_ZN5Print5writeEPKc>
}
   b4df2:	b00b      	add	sp, #44	; 0x2c
   b4df4:	bd30      	pop	{r4, r5, pc}

000b4df6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4dfa:	b086      	sub	sp, #24
   b4dfc:	af00      	add	r7, sp, #0
   b4dfe:	4605      	mov	r5, r0
   b4e00:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4e02:	1d38      	adds	r0, r7, #4
   b4e04:	2114      	movs	r1, #20
{
   b4e06:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4e08:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4e0a:	f7ff fe47 	bl	b4a9c <vsnprintf>

    if (n<bufsize)
   b4e0e:	2813      	cmp	r0, #19
   b4e10:	d80e      	bhi.n	b4e30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4e12:	1d39      	adds	r1, r7, #4
   b4e14:	4628      	mov	r0, r5
   b4e16:	f7ff ffaf 	bl	b4d78 <_ZN5Print5writeEPKc>
   b4e1a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4e1c:	b11e      	cbz	r6, b4e26 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4e1e:	4628      	mov	r0, r5
   b4e20:	f7ff ffbf 	bl	b4da2 <_ZN5Print7printlnEv>
   b4e24:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4e26:	4620      	mov	r0, r4
   b4e28:	3718      	adds	r7, #24
   b4e2a:	46bd      	mov	sp, r7
   b4e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4e30:	f100 0308 	add.w	r3, r0, #8
   b4e34:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4e38:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4e3a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4e3e:	4622      	mov	r2, r4
   b4e40:	1c41      	adds	r1, r0, #1
   b4e42:	683b      	ldr	r3, [r7, #0]
   b4e44:	4668      	mov	r0, sp
   b4e46:	f7ff fe29 	bl	b4a9c <vsnprintf>
  return write(str);
   b4e4a:	4669      	mov	r1, sp
   b4e4c:	4628      	mov	r0, r5
   b4e4e:	f7ff ff93 	bl	b4d78 <_ZN5Print5writeEPKc>
   b4e52:	4604      	mov	r4, r0
   b4e54:	46c5      	mov	sp, r8
   b4e56:	e7e1      	b.n	b4e1c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4e58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4e58:	4b01      	ldr	r3, [pc, #4]	; (b4e60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4e5a:	4a02      	ldr	r2, [pc, #8]	; (b4e64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4e5c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4e5e:	4770      	bx	lr
   b4e60:	2003e69c 	.word	0x2003e69c
   b4e64:	000b89c0 	.word	0x000b89c0

000b4e68 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b4e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b4e6c:	4a15      	ldr	r2, [pc, #84]	; (b4ec4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b4e6e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b4ed0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b4e72:	e9d2 6300 	ldrd	r6, r3, [r2]
   b4e76:	1980      	adds	r0, r0, r6
   b4e78:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b4e7c:	4b12      	ldr	r3, [pc, #72]	; (b4ec8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b4e7e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b4e82:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b4e86:	1986      	adds	r6, r0, r6
   b4e88:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b4e8c:	42bb      	cmp	r3, r7
   b4e8e:	bf08      	it	eq
   b4e90:	42b2      	cmpeq	r2, r6
{
   b4e92:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b4e94:	d013      	beq.n	b4ebe <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b4e96:	a903      	add	r1, sp, #12
   b4e98:	4668      	mov	r0, sp
   b4e9a:	e9cd 6700 	strd	r6, r7, [sp]
   b4e9e:	f7ff fe2d 	bl	b4afc <localtime_r>
	calendar_time.tm_year += 1900;
   b4ea2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b4ea4:	4d09      	ldr	r5, [pc, #36]	; (b4ecc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b4ea6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b4eaa:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b4eac:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b4eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b4eb6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b4eba:	6823      	ldr	r3, [r4, #0]
   b4ebc:	602b      	str	r3, [r5, #0]
    }
}
   b4ebe:	b00c      	add	sp, #48	; 0x30
   b4ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4ec4:	2003e6d0 	.word	0x2003e6d0
   b4ec8:	2003e6c8 	.word	0x2003e6c8
   b4ecc:	2003e6a4 	.word	0x2003e6a4
   b4ed0:	2003e6d8 	.word	0x2003e6d8

000b4ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b4ed4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4ed6:	2000      	movs	r0, #0
   b4ed8:	f7ff fdb0 	bl	b4a3c <spark_sync_time_pending>
   b4edc:	b128      	cbz	r0, b4eea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4ede:	f7ff fd95 	bl	b4a0c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4ee2:	f080 0001 	eor.w	r0, r0, #1
   b4ee6:	b2c0      	uxtb	r0, r0
    }
   b4ee8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b4eea:	2001      	movs	r0, #1
   b4eec:	e7fc      	b.n	b4ee8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b4ef0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b4ef0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b4ef2:	f7ff ffb9 	bl	b4e68 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <_ZN9TimeClass5monthEx+0x10>)
   b4ef8:	6918      	ldr	r0, [r3, #16]
}
   b4efa:	3001      	adds	r0, #1
   b4efc:	bd08      	pop	{r3, pc}
   b4efe:	bf00      	nop
   b4f00:	2003e6a4 	.word	0x2003e6a4

000b4f04 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b4f04:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b4f06:	2000      	movs	r0, #0
   b4f08:	f7ff fbf4 	bl	b46f4 <hal_rtc_time_is_valid>
    if (rtcstate)
   b4f0c:	4604      	mov	r4, r0
   b4f0e:	b9a0      	cbnz	r0, b4f3a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b4f10:	f7ff fcc8 	bl	b48a4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b4f14:	2801      	cmp	r0, #1
   b4f16:	d110      	bne.n	b4f3a <_ZN9TimeClass7isValidEv+0x36>
   b4f18:	4620      	mov	r0, r4
   b4f1a:	f7ff fceb 	bl	b48f4 <system_thread_get_state>
   b4f1e:	b960      	cbnz	r0, b4f3a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b4f20:	f7ff ffd8 	bl	b4ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4f24:	b910      	cbnz	r0, b4f2c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b4f26:	f7ff fd69 	bl	b49fc <spark_process>
        while (_while() && !_condition()) {
   b4f2a:	e7f9      	b.n	b4f20 <_ZN9TimeClass7isValidEv+0x1c>
   b4f2c:	f7ff ffd2 	bl	b4ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b4f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b4f34:	2000      	movs	r0, #0
   b4f36:	f7ff bbdd 	b.w	b46f4 <hal_rtc_time_is_valid>
}
   b4f3a:	4620      	mov	r0, r4
   b4f3c:	bd10      	pop	{r4, pc}

000b4f3e <_ZN9TimeClass3nowEv>:
{
   b4f3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b4f40:	f7ff ffe0 	bl	b4f04 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b4f44:	2210      	movs	r2, #16
   b4f46:	2100      	movs	r1, #0
   b4f48:	4668      	mov	r0, sp
   b4f4a:	f001 fbc0 	bl	b66ce <memset>
    hal_rtc_get_time(&tv, nullptr);
   b4f4e:	2100      	movs	r1, #0
   b4f50:	4668      	mov	r0, sp
   b4f52:	f7ff fbd7 	bl	b4704 <hal_rtc_get_time>
}
   b4f56:	9800      	ldr	r0, [sp, #0]
   b4f58:	b005      	add	sp, #20
   b4f5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f60 <_ZN9TimeClass4hourEv>:
{
   b4f60:	b508      	push	{r3, lr}
	return hour(now());
   b4f62:	f7ff ffec 	bl	b4f3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b4f66:	17c1      	asrs	r1, r0, #31
   b4f68:	f7ff ff7e 	bl	b4e68 <_ZL22Refresh_UnixTime_Cachex>
}
   b4f6c:	4b01      	ldr	r3, [pc, #4]	; (b4f74 <_ZN9TimeClass4hourEv+0x14>)
   b4f6e:	6898      	ldr	r0, [r3, #8]
   b4f70:	bd08      	pop	{r3, pc}
   b4f72:	bf00      	nop
   b4f74:	2003e6a4 	.word	0x2003e6a4

000b4f78 <_ZN9TimeClass6minuteEv>:
{
   b4f78:	b508      	push	{r3, lr}
	return minute(now());
   b4f7a:	f7ff ffe0 	bl	b4f3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b4f7e:	17c1      	asrs	r1, r0, #31
   b4f80:	f7ff ff72 	bl	b4e68 <_ZL22Refresh_UnixTime_Cachex>
}
   b4f84:	4b01      	ldr	r3, [pc, #4]	; (b4f8c <_ZN9TimeClass6minuteEv+0x14>)
   b4f86:	6858      	ldr	r0, [r3, #4]
   b4f88:	bd08      	pop	{r3, pc}
   b4f8a:	bf00      	nop
   b4f8c:	2003e6a4 	.word	0x2003e6a4

000b4f90 <_ZN9TimeClass3dayEv>:
{
   b4f90:	b508      	push	{r3, lr}
	return day(now());
   b4f92:	f7ff ffd4 	bl	b4f3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b4f96:	17c1      	asrs	r1, r0, #31
   b4f98:	f7ff ff66 	bl	b4e68 <_ZL22Refresh_UnixTime_Cachex>
}
   b4f9c:	4b01      	ldr	r3, [pc, #4]	; (b4fa4 <_ZN9TimeClass3dayEv+0x14>)
   b4f9e:	68d8      	ldr	r0, [r3, #12]
   b4fa0:	bd08      	pop	{r3, pc}
   b4fa2:	bf00      	nop
   b4fa4:	2003e6a4 	.word	0x2003e6a4

000b4fa8 <_ZN9TimeClass5monthEv>:
{
   b4fa8:	b508      	push	{r3, lr}
	return month(now());
   b4faa:	f7ff ffc8 	bl	b4f3e <_ZN9TimeClass3nowEv>
}
   b4fae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b4fb2:	17c1      	asrs	r1, r0, #31
   b4fb4:	f7ff bf9c 	b.w	b4ef0 <_ZN9TimeClass5monthEx>

000b4fb8 <_ZN9TimeClass4yearEv>:
{
   b4fb8:	b508      	push	{r3, lr}
	return year(now());
   b4fba:	f7ff ffc0 	bl	b4f3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b4fbe:	17c1      	asrs	r1, r0, #31
   b4fc0:	f7ff ff52 	bl	b4e68 <_ZL22Refresh_UnixTime_Cachex>
}
   b4fc4:	4b01      	ldr	r3, [pc, #4]	; (b4fcc <_ZN9TimeClass4yearEv+0x14>)
   b4fc6:	6958      	ldr	r0, [r3, #20]
   b4fc8:	bd08      	pop	{r3, pc}
   b4fca:	bf00      	nop
   b4fcc:	2003e6a4 	.word	0x2003e6a4

000b4fd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4fd0:	4b02      	ldr	r3, [pc, #8]	; (b4fdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4fd2:	681a      	ldr	r2, [r3, #0]
   b4fd4:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4fd6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4fd8:	4770      	bx	lr
   b4fda:	bf00      	nop
   b4fdc:	2003cd54 	.word	0x2003cd54
   b4fe0:	2003e6a0 	.word	0x2003e6a0

000b4fe4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4fe4:	2100      	movs	r1, #0
   b4fe6:	f7ff bc6d 	b.w	b48c4 <system_delay_ms>
	...

000b4fec <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4fec:	4b01      	ldr	r3, [pc, #4]	; (b4ff4 <_GLOBAL__sub_I_RGB+0x8>)
   b4fee:	2200      	movs	r2, #0
   b4ff0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4ff2:	4770      	bx	lr
   b4ff4:	2003e6e0 	.word	0x2003e6e0

000b4ff8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4ff8:	4b01      	ldr	r3, [pc, #4]	; (b5000 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4ffa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4ffc:	4770      	bx	lr
   b4ffe:	bf00      	nop
   b5000:	2003cd58 	.word	0x2003cd58

000b5004 <serialEventRun>:
{
   b5004:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5006:	4b0b      	ldr	r3, [pc, #44]	; (b5034 <serialEventRun+0x30>)
   b5008:	b143      	cbz	r3, b501c <serialEventRun+0x18>
   b500a:	f000 fbfb 	bl	b5804 <_Z16_fetch_usbserialv>
   b500e:	6803      	ldr	r3, [r0, #0]
   b5010:	691b      	ldr	r3, [r3, #16]
   b5012:	4798      	blx	r3
   b5014:	2800      	cmp	r0, #0
   b5016:	dd01      	ble.n	b501c <serialEventRun+0x18>
        serialEvent();
   b5018:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b501c:	4b06      	ldr	r3, [pc, #24]	; (b5038 <serialEventRun+0x34>)
   b501e:	b143      	cbz	r3, b5032 <serialEventRun+0x2e>
   b5020:	f000 fe40 	bl	b5ca4 <_Z22__fetch_global_Serial1v>
   b5024:	6803      	ldr	r3, [r0, #0]
   b5026:	691b      	ldr	r3, [r3, #16]
   b5028:	4798      	blx	r3
   b502a:	2800      	cmp	r0, #0
   b502c:	dd01      	ble.n	b5032 <serialEventRun+0x2e>
        serialEvent1();
   b502e:	f3af 8000 	nop.w
}
   b5032:	bd08      	pop	{r3, pc}
	...

000b503c <_post_loop>:
{
   b503c:	b508      	push	{r3, lr}
	serialEventRun();
   b503e:	f7ff ffe1 	bl	b5004 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5042:	f7ff fb4f 	bl	b46e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5046:	4b01      	ldr	r3, [pc, #4]	; (b504c <_post_loop+0x10>)
   b5048:	6018      	str	r0, [r3, #0]
}
   b504a:	bd08      	pop	{r3, pc}
   b504c:	2003e744 	.word	0x2003e744

000b5050 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5050:	4805      	ldr	r0, [pc, #20]	; (b5068 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5052:	4a06      	ldr	r2, [pc, #24]	; (b506c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5054:	4906      	ldr	r1, [pc, #24]	; (b5070 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5056:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5058:	1a12      	subs	r2, r2, r0
   b505a:	f001 fb2a 	bl	b66b2 <memcpy>
    __backup_sram_signature = signature;
   b505e:	4b05      	ldr	r3, [pc, #20]	; (b5074 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5060:	4a05      	ldr	r2, [pc, #20]	; (b5078 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5062:	601a      	str	r2, [r3, #0]
}
   b5064:	bd08      	pop	{r3, pc}
   b5066:	bf00      	nop
   b5068:	2003f400 	.word	0x2003f400
   b506c:	2003f404 	.word	0x2003f404
   b5070:	000b9004 	.word	0x000b9004
   b5074:	2003f400 	.word	0x2003f400
   b5078:	9a271c1e 	.word	0x9a271c1e

000b507c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b507c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b507e:	2300      	movs	r3, #0
   b5080:	9300      	str	r3, [sp, #0]
   b5082:	461a      	mov	r2, r3
   b5084:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5088:	f7ff fc46 	bl	b4918 <system_ctrl_set_result>
}
   b508c:	b003      	add	sp, #12
   b508e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5094 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5094:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5096:	8843      	ldrh	r3, [r0, #2]
   b5098:	2b0a      	cmp	r3, #10
   b509a:	d008      	beq.n	b50ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b509c:	2b50      	cmp	r3, #80	; 0x50
   b509e:	d10b      	bne.n	b50b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b50a0:	4b09      	ldr	r3, [pc, #36]	; (b50c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b50a2:	681b      	ldr	r3, [r3, #0]
   b50a4:	b14b      	cbz	r3, b50ba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b50a6:	b003      	add	sp, #12
   b50a8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b50ac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b50ae:	f7ff ffe5 	bl	b507c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b50b2:	b003      	add	sp, #12
   b50b4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b50b8:	2300      	movs	r3, #0
   b50ba:	9300      	str	r3, [sp, #0]
   b50bc:	461a      	mov	r2, r3
   b50be:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b50c2:	f7ff fc29 	bl	b4918 <system_ctrl_set_result>
}
   b50c6:	e7f4      	b.n	b50b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b50c8:	2003e6f4 	.word	0x2003e6f4

000b50cc <module_user_init_hook>:
{
   b50cc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b50ce:	4812      	ldr	r0, [pc, #72]	; (b5118 <module_user_init_hook+0x4c>)
   b50d0:	2100      	movs	r1, #0
   b50d2:	f7ff fd0b 	bl	b4aec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b50d6:	4b11      	ldr	r3, [pc, #68]	; (b511c <module_user_init_hook+0x50>)
   b50d8:	681a      	ldr	r2, [r3, #0]
   b50da:	4b11      	ldr	r3, [pc, #68]	; (b5120 <module_user_init_hook+0x54>)
   b50dc:	429a      	cmp	r2, r3
   b50de:	4b11      	ldr	r3, [pc, #68]	; (b5124 <module_user_init_hook+0x58>)
   b50e0:	bf0c      	ite	eq
   b50e2:	2201      	moveq	r2, #1
   b50e4:	2200      	movne	r2, #0
   b50e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b50e8:	d001      	beq.n	b50ee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b50ea:	f7ff ffb1 	bl	b5050 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b50ee:	f7ff faf1 	bl	b46d4 <HAL_RNG_GetRandomNumber>
   b50f2:	4604      	mov	r4, r0
    srand(seed);
   b50f4:	f001 faf4 	bl	b66e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b50f8:	4b0b      	ldr	r3, [pc, #44]	; (b5128 <module_user_init_hook+0x5c>)
   b50fa:	b113      	cbz	r3, b5102 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b50fc:	4620      	mov	r0, r4
   b50fe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5102:	2100      	movs	r1, #0
   b5104:	4808      	ldr	r0, [pc, #32]	; (b5128 <module_user_init_hook+0x5c>)
   b5106:	f7ff fca1 	bl	b4a4c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b510e:	4807      	ldr	r0, [pc, #28]	; (b512c <module_user_init_hook+0x60>)
   b5110:	2100      	movs	r1, #0
   b5112:	f7ff bbf7 	b.w	b4904 <system_ctrl_set_app_request_handler>
   b5116:	bf00      	nop
   b5118:	000b4ff9 	.word	0x000b4ff9
   b511c:	2003f400 	.word	0x2003f400
   b5120:	9a271c1e 	.word	0x9a271c1e
   b5124:	2003e6f0 	.word	0x2003e6f0
   b5128:	00000000 	.word	0x00000000
   b512c:	000b5095 	.word	0x000b5095

000b5130 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5130:	4770      	bx	lr

000b5132 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5132:	2000      	movs	r0, #0
   b5134:	4770      	bx	lr

000b5136 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5136:	b510      	push	{r4, lr}
   b5138:	2110      	movs	r1, #16
   b513a:	4604      	mov	r4, r0
   b513c:	f7fe ffaf 	bl	b409e <_ZdlPvj>
   b5140:	4620      	mov	r0, r4
   b5142:	bd10      	pop	{r4, pc}

000b5144 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5144:	b508      	push	{r3, lr}
      { delete this; }
   b5146:	f7ff fff6 	bl	b5136 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b514a:	bd08      	pop	{r3, pc}

000b514c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b514c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b514e:	2200      	movs	r2, #0
   b5150:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5154:	6002      	str	r2, [r0, #0]
   b5156:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5158:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b515a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b515c:	680c      	ldr	r4, [r1, #0]
   b515e:	8085      	strh	r5, [r0, #4]
   b5160:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5162:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5164:	bd30      	pop	{r4, r5, pc}

000b5166 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5166:	b510      	push	{r4, lr}
   b5168:	4604      	mov	r4, r0
    free((void*)msg_);
   b516a:	6800      	ldr	r0, [r0, #0]
   b516c:	f7ff fc7e 	bl	b4a6c <free>
}
   b5170:	4620      	mov	r0, r4
   b5172:	bd10      	pop	{r4, pc}

000b5174 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5174:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5176:	68c4      	ldr	r4, [r0, #12]
   b5178:	b1f4      	cbz	r4, b51b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b517a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b517c:	2b02      	cmp	r3, #2
   b517e:	d103      	bne.n	b5188 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5180:	f104 000c 	add.w	r0, r4, #12
   b5184:	f7ff ffef 	bl	b5166 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5188:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b518a:	b135      	cbz	r5, b519a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b518c:	4628      	mov	r0, r5
   b518e:	f7ff fdb9 	bl	b4d04 <_ZNSt14_Function_baseD1Ev>
   b5192:	2110      	movs	r1, #16
   b5194:	4628      	mov	r0, r5
   b5196:	f7fe ff82 	bl	b409e <_ZdlPvj>
   b519a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b519c:	b135      	cbz	r5, b51ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b519e:	4628      	mov	r0, r5
   b51a0:	f7ff fdb0 	bl	b4d04 <_ZNSt14_Function_baseD1Ev>
   b51a4:	2110      	movs	r1, #16
   b51a6:	4628      	mov	r0, r5
   b51a8:	f7fe ff79 	bl	b409e <_ZdlPvj>
   b51ac:	4620      	mov	r0, r4
   b51ae:	2114      	movs	r1, #20
   b51b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b51b4:	f7fe bf73 	b.w	b409e <_ZdlPvj>
   b51b8:	bd38      	pop	{r3, r4, r5, pc}

000b51ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b51ba:	680b      	ldr	r3, [r1, #0]
   b51bc:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b51be:	684b      	ldr	r3, [r1, #4]
   b51c0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b51c2:	b113      	cbz	r3, b51ca <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b51c4:	685a      	ldr	r2, [r3, #4]
   b51c6:	3201      	adds	r2, #1
   b51c8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b51ca:	4770      	bx	lr

000b51cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b51cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b51ce:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b51d0:	4668      	mov	r0, sp
   b51d2:	460d      	mov	r5, r1
   b51d4:	f7ff fff1 	bl	b51ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b51d8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b51da:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b51dc:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b51de:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b51e0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b51e2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b51e4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b51e6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b51e8:	f7ff f91e 	bl	b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b51ec:	b135      	cbz	r5, b51fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b51ee:	1d28      	adds	r0, r5, #4
   b51f0:	f7ff f91a 	bl	b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b51f4:	2108      	movs	r1, #8
   b51f6:	4628      	mov	r0, r5
   b51f8:	f7fe ff51 	bl	b409e <_ZdlPvj>
        return p;
    }
   b51fc:	4620      	mov	r0, r4
   b51fe:	b003      	add	sp, #12
   b5200:	bd30      	pop	{r4, r5, pc}

000b5202 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5202:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5204:	b510      	push	{r4, lr}
      if (_M_empty())
   b5206:	b90a      	cbnz	r2, b520c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5208:	f000 fdae 	bl	b5d68 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5210:	68c3      	ldr	r3, [r0, #12]
   b5212:	4718      	bx	r3

000b5214 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5214:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5216:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5218:	f100 0110 	add.w	r1, r0, #16
   b521c:	f7ff fff1 	bl	b5202 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5220:	bd08      	pop	{r3, pc}

000b5222 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5222:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5224:	b510      	push	{r4, lr}
      if (_M_empty())
   b5226:	b90a      	cbnz	r2, b522c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5228:	f000 fd9e 	bl	b5d68 <_ZSt25__throw_bad_function_callv>
    }
   b522c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5230:	68c3      	ldr	r3, [r0, #12]
   b5232:	4718      	bx	r3

000b5234 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5234:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5236:	6800      	ldr	r0, [r0, #0]
   b5238:	f100 0110 	add.w	r1, r0, #16
   b523c:	f7ff fff1 	bl	b5222 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5240:	bd08      	pop	{r3, pc}
	...

000b5244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5244:	b538      	push	{r3, r4, r5, lr}
   b5246:	2300      	movs	r3, #0
   b5248:	4604      	mov	r4, r0
   b524a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b524c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b524e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5250:	f7fe ff21 	bl	b4096 <_Znwj>
   b5254:	b128      	cbz	r0, b5262 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5256:	2301      	movs	r3, #1
   b5258:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b525c:	4b02      	ldr	r3, [pc, #8]	; (b5268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b525e:	6003      	str	r3, [r0, #0]
   b5260:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5262:	6020      	str	r0, [r4, #0]
	}
   b5264:	4620      	mov	r0, r4
   b5266:	bd38      	pop	{r3, r4, r5, pc}
   b5268:	000b89e8 	.word	0x000b89e8

000b526c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b526c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b526e:	2300      	movs	r3, #0
   b5270:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5272:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5274:	4604      	mov	r4, r0
   b5276:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5278:	b12b      	cbz	r3, b5286 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b527a:	2202      	movs	r2, #2
   b527c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b527e:	68eb      	ldr	r3, [r5, #12]
   b5280:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5282:	68ab      	ldr	r3, [r5, #8]
   b5284:	60a3      	str	r3, [r4, #8]
    }
   b5286:	4620      	mov	r0, r4
   b5288:	bd38      	pop	{r3, r4, r5, pc}
	...

000b528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b528c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b528e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5290:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5292:	4668      	mov	r0, sp
   b5294:	f7ff ff5a 	bl	b514c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5298:	f04f 0302 	mov.w	r3, #2
   b529c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b52a0:	2a00      	cmp	r2, #0
   b52a2:	d103      	bne.n	b52ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b52a4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b52a8:	2900      	cmp	r1, #0
   b52aa:	d1f7      	bne.n	b529c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b52ac:	d125      	bne.n	b52fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b52ae:	f104 050c 	add.w	r5, r4, #12
   b52b2:	4669      	mov	r1, sp
   b52b4:	4628      	mov	r0, r5
   b52b6:	f7ff ff49 	bl	b514c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b52ba:	f3bf 8f5b 	dmb	ish
   b52be:	2301      	movs	r3, #1
   b52c0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b52c2:	2000      	movs	r0, #0
   b52c4:	f104 0308 	add.w	r3, r4, #8
   b52c8:	f3bf 8f5b 	dmb	ish
   b52cc:	e853 6f00 	ldrex	r6, [r3]
   b52d0:	e843 0200 	strex	r2, r0, [r3]
   b52d4:	2a00      	cmp	r2, #0
   b52d6:	d1f9      	bne.n	b52cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b52d8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b52dc:	b16e      	cbz	r6, b52fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b52de:	f7ff faf9 	bl	b48d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b52e2:	b178      	cbz	r0, b5304 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b52e4:	4629      	mov	r1, r5
   b52e6:	4630      	mov	r0, r6
   b52e8:	f7ff ff8b 	bl	b5202 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b52ec:	4630      	mov	r0, r6
   b52ee:	f7ff fd09 	bl	b4d04 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b52f2:	2110      	movs	r1, #16
   b52f4:	4630      	mov	r0, r6
   b52f6:	f7fe fed2 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b52fa:	4668      	mov	r0, sp
   b52fc:	f7ff ff33 	bl	b5166 <_ZN8particle5ErrorD1Ev>
    }
   b5300:	b009      	add	sp, #36	; 0x24
   b5302:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5304:	4631      	mov	r1, r6
   b5306:	a802      	add	r0, sp, #8
   b5308:	f7ff ffb0 	bl	b526c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b530c:	68e0      	ldr	r0, [r4, #12]
   b530e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5312:	b108      	cbz	r0, b5318 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5314:	f001 fa2a 	bl	b676c <strdup>
        type_(type) {
   b5318:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b531a:	2010      	movs	r0, #16
   b531c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5320:	f7fe feb9 	bl	b4096 <_Znwj>
   b5324:	4605      	mov	r5, r0
   b5326:	b1e8      	cbz	r0, b5364 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5328:	2700      	movs	r7, #0
   b532a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b532c:	2018      	movs	r0, #24
   b532e:	f7fe feb2 	bl	b4096 <_Znwj>
   b5332:	4604      	mov	r4, r0
   b5334:	b188      	cbz	r0, b535a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5336:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5338:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b533a:	a802      	add	r0, sp, #8
   b533c:	f7ff fceb 	bl	b4d16 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5340:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5342:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5344:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5346:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5348:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b534a:	a906      	add	r1, sp, #24
   b534c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b534e:	60e3      	str	r3, [r4, #12]
   b5350:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5354:	9205      	str	r2, [sp, #20]
   b5356:	f7ff fef9 	bl	b514c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b535a:	4b08      	ldr	r3, [pc, #32]	; (b537c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b535c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b535e:	4b08      	ldr	r3, [pc, #32]	; (b5380 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5360:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5362:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5364:	a806      	add	r0, sp, #24
   b5366:	f7ff fefe 	bl	b5166 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b536a:	a802      	add	r0, sp, #8
   b536c:	f7ff fcca 	bl	b4d04 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5370:	2200      	movs	r2, #0
   b5372:	4629      	mov	r1, r5
   b5374:	4803      	ldr	r0, [pc, #12]	; (b5384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5376:	f7ff fab5 	bl	b48e4 <application_thread_invoke>
   b537a:	e7b7      	b.n	b52ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b537c:	000b5215 	.word	0x000b5215
   b5380:	000b5499 	.word	0x000b5499
   b5384:	000b594d 	.word	0x000b594d

000b5388 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b538c:	b08b      	sub	sp, #44	; 0x2c
   b538e:	4605      	mov	r5, r0
   b5390:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5394:	460f      	mov	r7, r1
   b5396:	4690      	mov	r8, r2
   b5398:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b539a:	f7ff fb37 	bl	b4a0c <spark_cloud_flag_connected>
   b539e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b53a0:	4683      	mov	fp, r0
   b53a2:	bb38      	cbnz	r0, b53f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b53a4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b53a8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b53aa:	a905      	add	r1, sp, #20
   b53ac:	4630      	mov	r0, r6
   b53ae:	f8ad 3018 	strh.w	r3, [sp, #24]
   b53b2:	f7ff fecb 	bl	b514c <_ZN8particle5ErrorC1EOS0_>
   b53b6:	2014      	movs	r0, #20
   b53b8:	f7fe fe6d 	bl	b4096 <_Znwj>
   b53bc:	4604      	mov	r4, r0
   b53be:	b148      	cbz	r0, b53d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b53c0:	2302      	movs	r3, #2
   b53c2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b53c4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b53c6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b53ca:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b53cc:	4631      	mov	r1, r6
   b53ce:	300c      	adds	r0, #12
   b53d0:	f7ff febc 	bl	b514c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b53d4:	4628      	mov	r0, r5
	: __shared_count(__p)
   b53d6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b53d8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b53dc:	f7ff ff32 	bl	b5244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b53e0:	4630      	mov	r0, r6
   b53e2:	f7ff fec0 	bl	b5166 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b53e6:	a805      	add	r0, sp, #20
   b53e8:	f7ff febd 	bl	b5166 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b53ec:	4628      	mov	r0, r5
   b53ee:	b00b      	add	sp, #44	; 0x2c
   b53f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b53f4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b53f6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b53f8:	2014      	movs	r0, #20
   b53fa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b53fe:	9307      	str	r3, [sp, #28]
   b5400:	f7fe fe49 	bl	b4096 <_Znwj>
   b5404:	4601      	mov	r1, r0
   b5406:	b118      	cbz	r0, b5410 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5408:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b540c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b540e:	7044      	strb	r4, [r0, #1]
   b5410:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5412:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5414:	f7ff ff16 	bl	b5244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5418:	4b1e      	ldr	r3, [pc, #120]	; (b5494 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b541a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b541c:	2008      	movs	r0, #8
   b541e:	f7fe fe3a 	bl	b4096 <_Znwj>
   b5422:	4604      	mov	r4, r0
   b5424:	b110      	cbz	r0, b542c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5426:	a903      	add	r1, sp, #12
   b5428:	f7ff fec7 	bl	b51ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b542c:	9600      	str	r6, [sp, #0]
   b542e:	fa5f f38a 	uxtb.w	r3, sl
   b5432:	464a      	mov	r2, r9
   b5434:	4641      	mov	r1, r8
   b5436:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5438:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b543a:	f7ff faef 	bl	b4a1c <spark_send_event>
   b543e:	b9b8      	cbnz	r0, b5470 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5440:	9b03      	ldr	r3, [sp, #12]
   b5442:	785b      	ldrb	r3, [r3, #1]
   b5444:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5448:	b993      	cbnz	r3, b5470 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b544a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b544e:	a905      	add	r1, sp, #20
   b5450:	a803      	add	r0, sp, #12
   b5452:	9205      	str	r2, [sp, #20]
   b5454:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5458:	f7ff ff18 	bl	b528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b545c:	a805      	add	r0, sp, #20
   b545e:	f7ff fe82 	bl	b5166 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5462:	a805      	add	r0, sp, #20
   b5464:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5466:	f7ff feb1 	bl	b51cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b546a:	a806      	add	r0, sp, #24
   b546c:	f7fe ffdc 	bl	b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5470:	a903      	add	r1, sp, #12
   b5472:	a805      	add	r0, sp, #20
   b5474:	f7ff fea1 	bl	b51ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5478:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b547a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b547c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b547e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5480:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5482:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5484:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5486:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5488:	f7fe ffce 	bl	b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b548c:	a804      	add	r0, sp, #16
   b548e:	f7fe ffcb 	bl	b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5492:	e7ab      	b.n	b53ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5494:	000b5515 	.word	0x000b5515

000b5498 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5498:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b549a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b549c:	4605      	mov	r5, r0
	switch (__op)
   b549e:	d103      	bne.n	b54a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b54a0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b54a2:	6003      	str	r3, [r0, #0]
      }
   b54a4:	2000      	movs	r0, #0
   b54a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b54a8:	2a02      	cmp	r2, #2
   b54aa:	d010      	beq.n	b54ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b54ac:	2a03      	cmp	r2, #3
   b54ae:	d1f9      	bne.n	b54a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b54b0:	6804      	ldr	r4, [r0, #0]
   b54b2:	2c00      	cmp	r4, #0
   b54b4:	d0f6      	beq.n	b54a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b54b6:	f104 0010 	add.w	r0, r4, #16
   b54ba:	f7ff fe54 	bl	b5166 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b54be:	4620      	mov	r0, r4
   b54c0:	f7ff fc20 	bl	b4d04 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b54c4:	2118      	movs	r1, #24
   b54c6:	4620      	mov	r0, r4
   b54c8:	f7fe fde9 	bl	b409e <_ZdlPvj>
   b54cc:	e7ea      	b.n	b54a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b54ce:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b54d0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b54d2:	f7fe fde0 	bl	b4096 <_Znwj>
   b54d6:	4604      	mov	r4, r0
   b54d8:	b150      	cbz	r0, b54f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b54da:	4631      	mov	r1, r6
   b54dc:	f7ff fec6 	bl	b526c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b54e0:	6930      	ldr	r0, [r6, #16]
   b54e2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b54e6:	b108      	cbz	r0, b54ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b54e8:	f001 f940 	bl	b676c <strdup>
        type_(type) {
   b54ec:	6120      	str	r0, [r4, #16]
   b54ee:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b54f0:	602c      	str	r4, [r5, #0]
	}
   b54f2:	e7d7      	b.n	b54a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b54f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b54f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b54f6:	2300      	movs	r3, #0
   b54f8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b54fa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b54fc:	4604      	mov	r4, r0
   b54fe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5500:	b12b      	cbz	r3, b550e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5502:	2202      	movs	r2, #2
   b5504:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5506:	68eb      	ldr	r3, [r5, #12]
   b5508:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b550a:	68ab      	ldr	r3, [r5, #8]
   b550c:	60a3      	str	r3, [r4, #8]
    }
   b550e:	4620      	mov	r0, r4
   b5510:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5514 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5514:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5516:	b089      	sub	sp, #36	; 0x24
   b5518:	4604      	mov	r4, r0
   b551a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b551c:	a801      	add	r0, sp, #4
   b551e:	4611      	mov	r1, r2
   b5520:	f7ff fe54 	bl	b51cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5524:	b1a4      	cbz	r4, b5550 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5526:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5528:	b11d      	cbz	r5, b5532 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b552a:	4628      	mov	r0, r5
   b552c:	f001 f91e 	bl	b676c <strdup>
   b5530:	4605      	mov	r5, r0
   b5532:	a801      	add	r0, sp, #4
   b5534:	a903      	add	r1, sp, #12
        type_(type) {
   b5536:	9503      	str	r5, [sp, #12]
   b5538:	f8ad 4010 	strh.w	r4, [sp, #16]
   b553c:	f7ff fea6 	bl	b528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5540:	a803      	add	r0, sp, #12
   b5542:	f7ff fe10 	bl	b5166 <_ZN8particle5ErrorD1Ev>
   b5546:	a802      	add	r0, sp, #8
   b5548:	f7fe ff6e 	bl	b4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b554c:	b009      	add	sp, #36	; 0x24
   b554e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5550:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5552:	2301      	movs	r3, #1
   b5554:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5558:	2a00      	cmp	r2, #0
   b555a:	d103      	bne.n	b5564 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b555c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5560:	2900      	cmp	r1, #0
   b5562:	d1f7      	bne.n	b5554 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5564:	d1ef      	bne.n	b5546 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5566:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5568:	f3bf 8f5b 	dmb	ish
   b556c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b556e:	1d2b      	adds	r3, r5, #4
   b5570:	f3bf 8f5b 	dmb	ish
   b5574:	e853 6f00 	ldrex	r6, [r3]
   b5578:	e843 4200 	strex	r2, r4, [r3]
   b557c:	2a00      	cmp	r2, #0
   b557e:	d1f9      	bne.n	b5574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5580:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5584:	2e00      	cmp	r6, #0
   b5586:	d0de      	beq.n	b5546 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5588:	4620      	mov	r0, r4
   b558a:	f7ff f9a3 	bl	b48d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b558e:	4607      	mov	r7, r0
   b5590:	b160      	cbz	r0, b55ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5592:	f105 010c 	add.w	r1, r5, #12
   b5596:	4630      	mov	r0, r6
   b5598:	f7ff fe43 	bl	b5222 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b559c:	4630      	mov	r0, r6
   b559e:	f7ff fbb1 	bl	b4d04 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b55a2:	2110      	movs	r1, #16
   b55a4:	4630      	mov	r0, r6
   b55a6:	f7fe fd7a 	bl	b409e <_ZdlPvj>
   b55aa:	e7cc      	b.n	b5546 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b55ac:	4631      	mov	r1, r6
   b55ae:	a803      	add	r0, sp, #12
   b55b0:	f7ff ffa0 	bl	b54f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b55b4:	7b2b      	ldrb	r3, [r5, #12]
   b55b6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b55ba:	2010      	movs	r0, #16
   b55bc:	f7fe fd6b 	bl	b4096 <_Znwj>
   b55c0:	4605      	mov	r5, r0
   b55c2:	b1d0      	cbz	r0, b55fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b55c4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b55c6:	2014      	movs	r0, #20
   b55c8:	f7fe fd65 	bl	b4096 <_Znwj>
   b55cc:	4604      	mov	r4, r0
   b55ce:	b178      	cbz	r0, b55f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b55d0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b55d2:	4601      	mov	r1, r0
   b55d4:	a803      	add	r0, sp, #12
   b55d6:	f7ff fb9e 	bl	b4d16 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55da:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b55dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b55de:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55e0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b55e2:	9205      	str	r2, [sp, #20]
   b55e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b55e6:	60e3      	str	r3, [r4, #12]
   b55e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b55ec:	9206      	str	r2, [sp, #24]
   b55ee:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b55f0:	4b06      	ldr	r3, [pc, #24]	; (b560c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b55f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b55f4:	4b06      	ldr	r3, [pc, #24]	; (b5610 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b55f6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b55f8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b55fa:	a803      	add	r0, sp, #12
   b55fc:	f7ff fb82 	bl	b4d04 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5600:	2200      	movs	r2, #0
   b5602:	4629      	mov	r1, r5
   b5604:	4803      	ldr	r0, [pc, #12]	; (b5614 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5606:	f7ff f96d 	bl	b48e4 <application_thread_invoke>
   b560a:	e7c7      	b.n	b559c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b560c:	000b5235 	.word	0x000b5235
   b5610:	000b5619 	.word	0x000b5619
   b5614:	000b594d 	.word	0x000b594d

000b5618 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5618:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b561a:	b570      	push	{r4, r5, r6, lr}
   b561c:	4604      	mov	r4, r0
	switch (__op)
   b561e:	d103      	bne.n	b5628 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5620:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5622:	6003      	str	r3, [r0, #0]
      }
   b5624:	2000      	movs	r0, #0
   b5626:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5628:	2a02      	cmp	r2, #2
   b562a:	d00c      	beq.n	b5646 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b562c:	2a03      	cmp	r2, #3
   b562e:	d1f9      	bne.n	b5624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5630:	6804      	ldr	r4, [r0, #0]
   b5632:	2c00      	cmp	r4, #0
   b5634:	d0f6      	beq.n	b5624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5636:	4620      	mov	r0, r4
   b5638:	f7ff fb64 	bl	b4d04 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b563c:	2114      	movs	r1, #20
   b563e:	4620      	mov	r0, r4
   b5640:	f7fe fd2d 	bl	b409e <_ZdlPvj>
   b5644:	e7ee      	b.n	b5624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5646:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5648:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b564a:	f7fe fd24 	bl	b4096 <_Znwj>
   b564e:	4605      	mov	r5, r0
   b5650:	b120      	cbz	r0, b565c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5652:	4631      	mov	r1, r6
   b5654:	f7ff ff4e 	bl	b54f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5658:	7c33      	ldrb	r3, [r6, #16]
   b565a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b565c:	6025      	str	r5, [r4, #0]
	}
   b565e:	e7e1      	b.n	b5624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5660 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5660:	4770      	bx	lr

000b5662 <_ZN9IPAddressD0Ev>:
   b5662:	b510      	push	{r4, lr}
   b5664:	2118      	movs	r1, #24
   b5666:	4604      	mov	r4, r0
   b5668:	f7fe fd19 	bl	b409e <_ZdlPvj>
   b566c:	4620      	mov	r0, r4
   b566e:	bd10      	pop	{r4, pc}

000b5670 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5670:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5672:	7d03      	ldrb	r3, [r0, #20]
   b5674:	2b06      	cmp	r3, #6
{
   b5676:	b08d      	sub	sp, #52	; 0x34
   b5678:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b567a:	f100 0704 	add.w	r7, r0, #4
   b567e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5682:	d012      	beq.n	b56aa <_ZNK9IPAddress7printToER5Print+0x3a>
   b5684:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5688:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b568c:	220a      	movs	r2, #10
   b568e:	4630      	mov	r0, r6
   b5690:	f7ff fb93 	bl	b4dba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5694:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5696:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5698:	d019      	beq.n	b56ce <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b569a:	2c00      	cmp	r4, #0
   b569c:	d0f4      	beq.n	b5688 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b569e:	212e      	movs	r1, #46	; 0x2e
   b56a0:	4630      	mov	r0, r6
   b56a2:	f7ff fb7b 	bl	b4d9c <_ZN5Print5printEc>
   b56a6:	4404      	add	r4, r0
   b56a8:	e7ee      	b.n	b5688 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b56aa:	232f      	movs	r3, #47	; 0x2f
   b56ac:	466a      	mov	r2, sp
   b56ae:	4639      	mov	r1, r7
   b56b0:	200a      	movs	r0, #10
		buf[0] = 0;
   b56b2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b56b6:	f7ff f835 	bl	b4724 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b56ba:	4668      	mov	r0, sp
   b56bc:	f001 f873 	bl	b67a6 <strlen>
   b56c0:	6833      	ldr	r3, [r6, #0]
   b56c2:	4602      	mov	r2, r0
   b56c4:	68db      	ldr	r3, [r3, #12]
   b56c6:	4669      	mov	r1, sp
   b56c8:	4630      	mov	r0, r6
   b56ca:	4798      	blx	r3
   b56cc:	4604      	mov	r4, r0
    }
    return n;
}
   b56ce:	4620      	mov	r0, r4
   b56d0:	b00d      	add	sp, #52	; 0x34
   b56d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b56d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b56d4:	b510      	push	{r4, lr}
   b56d6:	4b05      	ldr	r3, [pc, #20]	; (b56ec <_ZN9IPAddressC1Ev+0x18>)
   b56d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b56da:	2211      	movs	r2, #17
   b56dc:	f840 3b04 	str.w	r3, [r0], #4
   b56e0:	2100      	movs	r1, #0
   b56e2:	f000 fff4 	bl	b66ce <memset>
}
   b56e6:	4620      	mov	r0, r4
   b56e8:	bd10      	pop	{r4, pc}
   b56ea:	bf00      	nop
   b56ec:	000b8a04 	.word	0x000b8a04

000b56f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b56f0:	4603      	mov	r3, r0
   b56f2:	4a07      	ldr	r2, [pc, #28]	; (b5710 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b56f4:	b510      	push	{r4, lr}
   b56f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b56fa:	f101 0210 	add.w	r2, r1, #16
   b56fe:	f851 4b04 	ldr.w	r4, [r1], #4
   b5702:	f843 4b04 	str.w	r4, [r3], #4
   b5706:	4291      	cmp	r1, r2
   b5708:	d1f9      	bne.n	b56fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b570a:	780a      	ldrb	r2, [r1, #0]
   b570c:	701a      	strb	r2, [r3, #0]
}
   b570e:	bd10      	pop	{r4, pc}
   b5710:	000b8a04 	.word	0x000b8a04

000b5714 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5714:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5716:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b571a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b571e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5722:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5726:	2304      	movs	r3, #4
   b5728:	6041      	str	r1, [r0, #4]
   b572a:	7503      	strb	r3, [r0, #20]
}
   b572c:	bd10      	pop	{r4, pc}
	...

000b5730 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5730:	b507      	push	{r0, r1, r2, lr}
   b5732:	4b06      	ldr	r3, [pc, #24]	; (b574c <_ZN9IPAddressC1EPKh+0x1c>)
   b5734:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5736:	78cb      	ldrb	r3, [r1, #3]
   b5738:	9300      	str	r3, [sp, #0]
   b573a:	788b      	ldrb	r3, [r1, #2]
   b573c:	784a      	ldrb	r2, [r1, #1]
   b573e:	7809      	ldrb	r1, [r1, #0]
   b5740:	f7ff ffe8 	bl	b5714 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5744:	b003      	add	sp, #12
   b5746:	f85d fb04 	ldr.w	pc, [sp], #4
   b574a:	bf00      	nop
   b574c:	000b8a04 	.word	0x000b8a04

000b5750 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5750:	7441      	strb	r1, [r0, #17]
}
   b5752:	4770      	bx	lr

000b5754 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5754:	4770      	bx	lr

000b5756 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5756:	4770      	bx	lr

000b5758 <_ZN9USBSerial4readEv>:
{
   b5758:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b575a:	2100      	movs	r1, #0
   b575c:	7c00      	ldrb	r0, [r0, #16]
   b575e:	f7ff f889 	bl	b4874 <HAL_USB_USART_Receive_Data>
}
   b5762:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5766:	bd08      	pop	{r3, pc}

000b5768 <_ZN9USBSerial4peekEv>:
{
   b5768:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b576a:	2101      	movs	r1, #1
   b576c:	7c00      	ldrb	r0, [r0, #16]
   b576e:	f7ff f881 	bl	b4874 <HAL_USB_USART_Receive_Data>
}
   b5772:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5776:	bd08      	pop	{r3, pc}

000b5778 <_ZN9USBSerial17availableForWriteEv>:
{
   b5778:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b577a:	7c00      	ldrb	r0, [r0, #16]
   b577c:	f7ff f872 	bl	b4864 <HAL_USB_USART_Available_Data_For_Write>
}
   b5780:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5784:	bd08      	pop	{r3, pc}

000b5786 <_ZN9USBSerial9availableEv>:
{
   b5786:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5788:	7c00      	ldrb	r0, [r0, #16]
   b578a:	f7ff f863 	bl	b4854 <HAL_USB_USART_Available_Data>
}
   b578e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5792:	bd08      	pop	{r3, pc}

000b5794 <_ZN9USBSerial5writeEh>:
{
   b5794:	b513      	push	{r0, r1, r4, lr}
   b5796:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5798:	7c00      	ldrb	r0, [r0, #16]
{
   b579a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b579c:	f7ff f862 	bl	b4864 <HAL_USB_USART_Available_Data_For_Write>
   b57a0:	2800      	cmp	r0, #0
   b57a2:	9901      	ldr	r1, [sp, #4]
   b57a4:	dc01      	bgt.n	b57aa <_ZN9USBSerial5writeEh+0x16>
   b57a6:	7c60      	ldrb	r0, [r4, #17]
   b57a8:	b120      	cbz	r0, b57b4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b57aa:	7c20      	ldrb	r0, [r4, #16]
   b57ac:	f7ff f86a 	bl	b4884 <HAL_USB_USART_Send_Data>
   b57b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b57b4:	b002      	add	sp, #8
   b57b6:	bd10      	pop	{r4, pc}

000b57b8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b57b8:	7c00      	ldrb	r0, [r0, #16]
   b57ba:	f7ff b86b 	b.w	b4894 <HAL_USB_USART_Flush_Data>

000b57be <_ZN9USBSerialD0Ev>:
   b57be:	b510      	push	{r4, lr}
   b57c0:	2114      	movs	r1, #20
   b57c2:	4604      	mov	r4, r0
   b57c4:	f7fe fc6b 	bl	b409e <_ZdlPvj>
   b57c8:	4620      	mov	r0, r4
   b57ca:	bd10      	pop	{r4, pc}

000b57cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b57cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b57ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57d2:	4604      	mov	r4, r0
   b57d4:	4608      	mov	r0, r1
   b57d6:	2100      	movs	r1, #0
   b57d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b57dc:	4b04      	ldr	r3, [pc, #16]	; (b57f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b57de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b57e0:	2301      	movs	r3, #1
  _serial = serial;
   b57e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b57e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b57e6:	4611      	mov	r1, r2
   b57e8:	f7ff f82c 	bl	b4844 <HAL_USB_USART_Init>
}
   b57ec:	4620      	mov	r0, r4
   b57ee:	bd10      	pop	{r4, pc}
   b57f0:	000b8a18 	.word	0x000b8a18

000b57f4 <_Z19acquireSerialBufferv>:
{
   b57f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b57f6:	2214      	movs	r2, #20
{
   b57f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b57fa:	2100      	movs	r1, #0
   b57fc:	f000 ff67 	bl	b66ce <memset>
}
   b5800:	4620      	mov	r0, r4
   b5802:	bd10      	pop	{r4, pc}

000b5804 <_Z16_fetch_usbserialv>:
{
   b5804:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5806:	4c0f      	ldr	r4, [pc, #60]	; (b5844 <_Z16_fetch_usbserialv+0x40>)
{
   b5808:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b580a:	a803      	add	r0, sp, #12
   b580c:	f7ff fff2 	bl	b57f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5810:	7821      	ldrb	r1, [r4, #0]
   b5812:	f3bf 8f5b 	dmb	ish
   b5816:	f011 0101 	ands.w	r1, r1, #1
   b581a:	d10f      	bne.n	b583c <_Z16_fetch_usbserialv+0x38>
   b581c:	4620      	mov	r0, r4
   b581e:	9101      	str	r1, [sp, #4]
   b5820:	f7fe fc3f 	bl	b40a2 <__cxa_guard_acquire>
   b5824:	9901      	ldr	r1, [sp, #4]
   b5826:	b148      	cbz	r0, b583c <_Z16_fetch_usbserialv+0x38>
   b5828:	aa03      	add	r2, sp, #12
   b582a:	4807      	ldr	r0, [pc, #28]	; (b5848 <_Z16_fetch_usbserialv+0x44>)
   b582c:	f7ff ffce 	bl	b57cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5830:	4620      	mov	r0, r4
   b5832:	f7fe fc3b 	bl	b40ac <__cxa_guard_release>
   b5836:	4805      	ldr	r0, [pc, #20]	; (b584c <_Z16_fetch_usbserialv+0x48>)
   b5838:	f000 ff2e 	bl	b6698 <atexit>
	return _usbserial;
}
   b583c:	4802      	ldr	r0, [pc, #8]	; (b5848 <_Z16_fetch_usbserialv+0x44>)
   b583e:	b008      	add	sp, #32
   b5840:	bd10      	pop	{r4, pc}
   b5842:	bf00      	nop
   b5844:	2003e6f8 	.word	0x2003e6f8
   b5848:	2003e6fc 	.word	0x2003e6fc
   b584c:	000b5755 	.word	0x000b5755

000b5850 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b5850:	4700      	bx	r0
	...

000b5854 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b5854:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b5858:	2400      	movs	r4, #0
{
   b585a:	461d      	mov	r5, r3
   b585c:	460f      	mov	r7, r1
   b585e:	4690      	mov	r8, r2
   b5860:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b5862:	f7fe ff2f 	bl	b46c4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b5866:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5868:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b586c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5870:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b5874:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b5878:	bfa2      	ittt	ge
   b587a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b587e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b5882:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5884:	4907      	ldr	r1, [pc, #28]	; (b58a4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b5886:	9400      	str	r4, [sp, #0]
   b5888:	4643      	mov	r3, r8
   b588a:	463a      	mov	r2, r7
   b588c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b588e:	bfa8      	it	ge
   b5890:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5894:	f7fe ff0e 	bl	b46b4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b5898:	fab0 f080 	clz	r0, r0
   b589c:	0940      	lsrs	r0, r0, #5
   b589e:	b004      	add	sp, #16
   b58a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b58a4:	000b5851 	.word	0x000b5851

000b58a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b58a8:	4770      	bx	lr

000b58aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b58aa:	7441      	strb	r1, [r0, #17]
}
   b58ac:	4770      	bx	lr

000b58ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b58ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b58b0:	7c00      	ldrb	r0, [r0, #16]
   b58b2:	f7fe ff6f 	bl	b4794 <hal_usart_available_data_for_write>
}
   b58b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b58ba:	bd08      	pop	{r3, pc}

000b58bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b58bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b58be:	7c00      	ldrb	r0, [r0, #16]
   b58c0:	f7fe ff40 	bl	b4744 <hal_usart_available>
}
   b58c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b58c8:	bd08      	pop	{r3, pc}

000b58ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b58ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b58cc:	7c00      	ldrb	r0, [r0, #16]
   b58ce:	f7fe ff49 	bl	b4764 <hal_usart_peek>
}
   b58d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b58d6:	bd08      	pop	{r3, pc}

000b58d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b58d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b58da:	7c00      	ldrb	r0, [r0, #16]
   b58dc:	f7fe ff3a 	bl	b4754 <hal_usart_read>
}
   b58e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b58e4:	bd08      	pop	{r3, pc}

000b58e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b58e6:	7c00      	ldrb	r0, [r0, #16]
   b58e8:	f7fe bf44 	b.w	b4774 <hal_usart_flush>

000b58ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b58ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b58ee:	7c45      	ldrb	r5, [r0, #17]
{
   b58f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b58f2:	b12d      	cbz	r5, b5900 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b58f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b58f6:	b003      	add	sp, #12
   b58f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b58fc:	f7fe bf1a 	b.w	b4734 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5900:	7c00      	ldrb	r0, [r0, #16]
   b5902:	9101      	str	r1, [sp, #4]
   b5904:	f7fe ff46 	bl	b4794 <hal_usart_available_data_for_write>
   b5908:	2800      	cmp	r0, #0
   b590a:	9901      	ldr	r1, [sp, #4]
   b590c:	dcf2      	bgt.n	b58f4 <_ZN11USARTSerial5writeEh+0x8>
}
   b590e:	4628      	mov	r0, r5
   b5910:	b003      	add	sp, #12
   b5912:	bd30      	pop	{r4, r5, pc}

000b5914 <_ZN11USARTSerialD0Ev>:
   b5914:	b510      	push	{r4, lr}
   b5916:	2114      	movs	r1, #20
   b5918:	4604      	mov	r4, r0
   b591a:	f7fe fbc0 	bl	b409e <_ZdlPvj>
   b591e:	4620      	mov	r0, r4
   b5920:	bd10      	pop	{r4, pc}
	...

000b5924 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5924:	b510      	push	{r4, lr}
   b5926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b592a:	4604      	mov	r4, r0
   b592c:	4608      	mov	r0, r1
   b592e:	4611      	mov	r1, r2
   b5930:	2200      	movs	r2, #0
   b5932:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5936:	4b04      	ldr	r3, [pc, #16]	; (b5948 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5938:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b593a:	2301      	movs	r3, #1
  _serial = serial;
   b593c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b593e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5940:	f7fe ff30 	bl	b47a4 <hal_usart_init_ex>
}
   b5944:	4620      	mov	r0, r4
   b5946:	bd10      	pop	{r4, pc}
   b5948:	000b8a48 	.word	0x000b8a48

000b594c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b594c:	b510      	push	{r4, lr}
      if (_M_empty())
   b594e:	6883      	ldr	r3, [r0, #8]
   b5950:	4604      	mov	r4, r0
   b5952:	b90b      	cbnz	r3, b5958 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5954:	f000 fa08 	bl	b5d68 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5958:	68c3      	ldr	r3, [r0, #12]
   b595a:	4798      	blx	r3
      if (_M_manager)
   b595c:	68a3      	ldr	r3, [r4, #8]
   b595e:	b11b      	cbz	r3, b5968 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5960:	2203      	movs	r2, #3
   b5962:	4621      	mov	r1, r4
   b5964:	4620      	mov	r0, r4
   b5966:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5968:	4620      	mov	r0, r4
   b596a:	2110      	movs	r1, #16
}
   b596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5970:	f7fe bb95 	b.w	b409e <_ZdlPvj>

000b5974 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5974:	4770      	bx	lr

000b5976 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5978:	4606      	mov	r6, r0
   b597a:	4615      	mov	r5, r2
   b597c:	460c      	mov	r4, r1
   b597e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5980:	42bc      	cmp	r4, r7
   b5982:	d006      	beq.n	b5992 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5984:	6833      	ldr	r3, [r6, #0]
   b5986:	f814 1b01 	ldrb.w	r1, [r4], #1
   b598a:	689b      	ldr	r3, [r3, #8]
   b598c:	4630      	mov	r0, r6
   b598e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5990:	e7f6      	b.n	b5980 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5992:	4628      	mov	r0, r5
   b5994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5996 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5996:	7c00      	ldrb	r0, [r0, #16]
   b5998:	2200      	movs	r2, #0
   b599a:	f7fe bf0b 	b.w	b47b4 <hal_i2c_write>

000b599e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b599e:	7c00      	ldrb	r0, [r0, #16]
   b59a0:	2100      	movs	r1, #0
   b59a2:	f7fe bf0f 	b.w	b47c4 <hal_i2c_available>

000b59a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b59a6:	7c00      	ldrb	r0, [r0, #16]
   b59a8:	2100      	movs	r1, #0
   b59aa:	f7fe bf13 	b.w	b47d4 <hal_i2c_read>

000b59ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b59ae:	7c00      	ldrb	r0, [r0, #16]
   b59b0:	2100      	movs	r1, #0
   b59b2:	f7fe bf17 	b.w	b47e4 <hal_i2c_peek>

000b59b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b59b6:	7c00      	ldrb	r0, [r0, #16]
   b59b8:	2100      	movs	r1, #0
   b59ba:	f7fe bf1b 	b.w	b47f4 <hal_i2c_flush>

000b59be <_ZN7TwoWireD0Ev>:
   b59be:	b510      	push	{r4, lr}
   b59c0:	2114      	movs	r1, #20
   b59c2:	4604      	mov	r4, r0
   b59c4:	f7fe fb6b 	bl	b409e <_ZdlPvj>
   b59c8:	4620      	mov	r0, r4
   b59ca:	bd10      	pop	{r4, pc}

000b59cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b59cc:	b510      	push	{r4, lr}
   b59ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b59d2:	4604      	mov	r4, r0
   b59d4:	4608      	mov	r0, r1
   b59d6:	2100      	movs	r1, #0
   b59d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b59dc:	4b03      	ldr	r3, [pc, #12]	; (b59ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b59de:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b59e0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b59e2:	4611      	mov	r1, r2
   b59e4:	f7fe ff16 	bl	b4814 <hal_i2c_init>
}
   b59e8:	4620      	mov	r0, r4
   b59ea:	bd10      	pop	{r4, pc}
   b59ec:	000b8a78 	.word	0x000b8a78

000b59f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b59f0:	2200      	movs	r2, #0
   b59f2:	6840      	ldr	r0, [r0, #4]
   b59f4:	4611      	mov	r1, r2
   b59f6:	f7fe bfb1 	b.w	b495c <network_ready>

000b59fa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b59fa:	2200      	movs	r2, #0
   b59fc:	6840      	ldr	r0, [r0, #4]
   b59fe:	4611      	mov	r1, r2
   b5a00:	f7fe bfcc 	b.w	b499c <network_listening>

000b5a04 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5a04:	2200      	movs	r2, #0
   b5a06:	6840      	ldr	r0, [r0, #4]
   b5a08:	4611      	mov	r1, r2
   b5a0a:	f7fe bfd7 	b.w	b49bc <network_get_listen_timeout>

000b5a0e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5a0e:	6840      	ldr	r0, [r0, #4]
   b5a10:	2200      	movs	r2, #0
   b5a12:	f7fe bfcb 	b.w	b49ac <network_set_listen_timeout>

000b5a16 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a16:	6840      	ldr	r0, [r0, #4]
   b5a18:	2200      	movs	r2, #0
   b5a1a:	f081 0101 	eor.w	r1, r1, #1
   b5a1e:	f7fe bfb5 	b.w	b498c <network_listen>

000b5a22 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5a22:	2300      	movs	r3, #0
   b5a24:	6840      	ldr	r0, [r0, #4]
   b5a26:	461a      	mov	r2, r3
   b5a28:	4619      	mov	r1, r3
   b5a2a:	f7fe bfa7 	b.w	b497c <network_off>

000b5a2e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5a2e:	2300      	movs	r3, #0
   b5a30:	6840      	ldr	r0, [r0, #4]
   b5a32:	461a      	mov	r2, r3
   b5a34:	4619      	mov	r1, r3
   b5a36:	f7fe bf99 	b.w	b496c <network_on>

000b5a3a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5a3a:	2200      	movs	r2, #0
   b5a3c:	6840      	ldr	r0, [r0, #4]
   b5a3e:	4611      	mov	r1, r2
   b5a40:	f7fe bf7c 	b.w	b493c <network_connecting>

000b5a44 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5a44:	6840      	ldr	r0, [r0, #4]
   b5a46:	2200      	movs	r2, #0
   b5a48:	2102      	movs	r1, #2
   b5a4a:	f7fe bf7f 	b.w	b494c <network_disconnect>

000b5a4e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a4e:	2300      	movs	r3, #0
   b5a50:	6840      	ldr	r0, [r0, #4]
   b5a52:	461a      	mov	r2, r3
   b5a54:	f7fe bf6a 	b.w	b492c <network_connect>

000b5a58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5a58:	4b02      	ldr	r3, [pc, #8]	; (b5a64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5a5a:	2204      	movs	r2, #4
   b5a5c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5a5e:	4a02      	ldr	r2, [pc, #8]	; (b5a68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5a60:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5a62:	4770      	bx	lr
   b5a64:	2003e710 	.word	0x2003e710
   b5a68:	000b8aa0 	.word	0x000b8aa0

000b5a6c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5a6c:	2300      	movs	r3, #0
   b5a6e:	6840      	ldr	r0, [r0, #4]
   b5a70:	461a      	mov	r2, r3
   b5a72:	f7fe bf5b 	b.w	b492c <network_connect>

000b5a76 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5a76:	6840      	ldr	r0, [r0, #4]
   b5a78:	2200      	movs	r2, #0
   b5a7a:	2102      	movs	r1, #2
   b5a7c:	f7fe bf66 	b.w	b494c <network_disconnect>

000b5a80 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5a80:	2200      	movs	r2, #0
   b5a82:	6840      	ldr	r0, [r0, #4]
   b5a84:	4611      	mov	r1, r2
   b5a86:	f7fe bf59 	b.w	b493c <network_connecting>

000b5a8a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5a8a:	2200      	movs	r2, #0
   b5a8c:	6840      	ldr	r0, [r0, #4]
   b5a8e:	4611      	mov	r1, r2
   b5a90:	f7fe bf64 	b.w	b495c <network_ready>

000b5a94 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5a94:	2300      	movs	r3, #0
   b5a96:	6840      	ldr	r0, [r0, #4]
   b5a98:	461a      	mov	r2, r3
   b5a9a:	4619      	mov	r1, r3
   b5a9c:	f7fe bf66 	b.w	b496c <network_on>

000b5aa0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5aa0:	2300      	movs	r3, #0
   b5aa2:	6840      	ldr	r0, [r0, #4]
   b5aa4:	461a      	mov	r2, r3
   b5aa6:	4619      	mov	r1, r3
   b5aa8:	f7fe bf68 	b.w	b497c <network_off>

000b5aac <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5aac:	6840      	ldr	r0, [r0, #4]
   b5aae:	2100      	movs	r1, #0
   b5ab0:	f7fe bf8c 	b.w	b49cc <network_is_on>

000b5ab4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5ab4:	6840      	ldr	r0, [r0, #4]
   b5ab6:	2100      	movs	r1, #0
   b5ab8:	f7fe bf90 	b.w	b49dc <network_is_off>

000b5abc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5abc:	6840      	ldr	r0, [r0, #4]
   b5abe:	2200      	movs	r2, #0
   b5ac0:	f081 0101 	eor.w	r1, r1, #1
   b5ac4:	f7fe bf62 	b.w	b498c <network_listen>

000b5ac8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5ac8:	6840      	ldr	r0, [r0, #4]
   b5aca:	2200      	movs	r2, #0
   b5acc:	f7fe bf6e 	b.w	b49ac <network_set_listen_timeout>

000b5ad0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5ad0:	2200      	movs	r2, #0
   b5ad2:	6840      	ldr	r0, [r0, #4]
   b5ad4:	4611      	mov	r1, r2
   b5ad6:	f7fe bf71 	b.w	b49bc <network_get_listen_timeout>

000b5ada <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5ada:	2200      	movs	r2, #0
   b5adc:	6840      	ldr	r0, [r0, #4]
   b5ade:	4611      	mov	r1, r2
   b5ae0:	f7fe bf5c 	b.w	b499c <network_listening>

000b5ae4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5ae8:	b095      	sub	sp, #84	; 0x54
   b5aea:	4614      	mov	r4, r2
   b5aec:	460d      	mov	r5, r1
   b5aee:	4607      	mov	r7, r0
    IPAddress addr;
   b5af0:	f7ff fdf0 	bl	b56d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5af4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5af6:	221c      	movs	r2, #28
   b5af8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5afa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5afc:	f000 fde7 	bl	b66ce <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5b00:	2340      	movs	r3, #64	; 0x40
   b5b02:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5b04:	4620      	mov	r0, r4
   b5b06:	466b      	mov	r3, sp
   b5b08:	aa0c      	add	r2, sp, #48	; 0x30
   b5b0a:	2100      	movs	r1, #0
   b5b0c:	f7fe fdc2 	bl	b4694 <netdb_getaddrinfo>
    if (!r) {
   b5b10:	4604      	mov	r4, r0
   b5b12:	2800      	cmp	r0, #0
   b5b14:	d14b      	bne.n	b5bae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b16:	4602      	mov	r2, r0
   b5b18:	2101      	movs	r1, #1
   b5b1a:	6868      	ldr	r0, [r5, #4]
   b5b1c:	f7fe ff1e 	bl	b495c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b20:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b22:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b24:	4622      	mov	r2, r4
   b5b26:	6868      	ldr	r0, [r5, #4]
   b5b28:	f7fe ff18 	bl	b495c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b2c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b2e:	4681      	mov	r9, r0
        bool ok = false;
   b5b30:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b32:	2e00      	cmp	r6, #0
   b5b34:	d03b      	beq.n	b5bae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5b36:	2900      	cmp	r1, #0
   b5b38:	d139      	bne.n	b5bae <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5b3a:	6873      	ldr	r3, [r6, #4]
   b5b3c:	2b02      	cmp	r3, #2
   b5b3e:	d003      	beq.n	b5b48 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5b40:	2b0a      	cmp	r3, #10
   b5b42:	d011      	beq.n	b5b68 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b44:	69f6      	ldr	r6, [r6, #28]
   b5b46:	e7f4      	b.n	b5b32 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5b48:	f1b8 0f00 	cmp.w	r8, #0
   b5b4c:	d0fa      	beq.n	b5b44 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5b4e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5b50:	a806      	add	r0, sp, #24
   b5b52:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5b54:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5b56:	f7ff fdeb 	bl	b5730 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b5c:	1d3c      	adds	r4, r7, #4
   b5b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b60:	682b      	ldr	r3, [r5, #0]
   b5b62:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b64:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5b66:	e7ed      	b.n	b5b44 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5b68:	f1b9 0f00 	cmp.w	r9, #0
   b5b6c:	d0ea      	beq.n	b5b44 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5b6e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5b70:	2210      	movs	r2, #16
   b5b72:	a801      	add	r0, sp, #4
   b5b74:	f000 fdab 	bl	b66ce <memset>
                    a.v = 6;
   b5b78:	2306      	movs	r3, #6
   b5b7a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b7e:	ad01      	add	r5, sp, #4
   b5b80:	f104 0308 	add.w	r3, r4, #8
   b5b84:	3418      	adds	r4, #24
   b5b86:	6818      	ldr	r0, [r3, #0]
   b5b88:	6859      	ldr	r1, [r3, #4]
   b5b8a:	462a      	mov	r2, r5
   b5b8c:	c203      	stmia	r2!, {r0, r1}
   b5b8e:	3308      	adds	r3, #8
   b5b90:	42a3      	cmp	r3, r4
   b5b92:	4615      	mov	r5, r2
   b5b94:	d1f7      	bne.n	b5b86 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5b96:	a901      	add	r1, sp, #4
   b5b98:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5b9a:	ad07      	add	r5, sp, #28
   b5b9c:	f7ff fda8 	bl	b56f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ba2:	1d3c      	adds	r4, r7, #4
   b5ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ba6:	682b      	ldr	r3, [r5, #0]
   b5ba8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5baa:	4649      	mov	r1, r9
   b5bac:	e7ca      	b.n	b5b44 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5bae:	9800      	ldr	r0, [sp, #0]
   b5bb0:	f7fe fd68 	bl	b4684 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5bb4:	4638      	mov	r0, r7
   b5bb6:	b015      	add	sp, #84	; 0x54
   b5bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5bbc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5bbc:	4b02      	ldr	r3, [pc, #8]	; (b5bc8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5bbe:	4a03      	ldr	r2, [pc, #12]	; (b5bcc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5bc0:	601a      	str	r2, [r3, #0]
   b5bc2:	2200      	movs	r2, #0
   b5bc4:	605a      	str	r2, [r3, #4]

} // spark
   b5bc6:	4770      	bx	lr
   b5bc8:	2003e718 	.word	0x2003e718
   b5bcc:	000b8adc 	.word	0x000b8adc

000b5bd0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5bd0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5bd2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5bd4:	d902      	bls.n	b5bdc <pinAvailable+0xc>
    return false;
   b5bd6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5bd8:	b002      	add	sp, #8
   b5bda:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5bdc:	f1a0 030b 	sub.w	r3, r0, #11
   b5be0:	2b02      	cmp	r3, #2
   b5be2:	d81a      	bhi.n	b5c1a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5be4:	4c17      	ldr	r4, [pc, #92]	; (b5c44 <pinAvailable+0x74>)
   b5be6:	7821      	ldrb	r1, [r4, #0]
   b5be8:	f3bf 8f5b 	dmb	ish
   b5bec:	f011 0101 	ands.w	r1, r1, #1
   b5bf0:	d10b      	bne.n	b5c0a <pinAvailable+0x3a>
   b5bf2:	4620      	mov	r0, r4
   b5bf4:	9101      	str	r1, [sp, #4]
   b5bf6:	f7fe fa54 	bl	b40a2 <__cxa_guard_acquire>
   b5bfa:	9901      	ldr	r1, [sp, #4]
   b5bfc:	b128      	cbz	r0, b5c0a <pinAvailable+0x3a>
   b5bfe:	4812      	ldr	r0, [pc, #72]	; (b5c48 <pinAvailable+0x78>)
   b5c00:	f7fe ffc2 	bl	b4b88 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5c04:	4620      	mov	r0, r4
   b5c06:	f7fe fa51 	bl	b40ac <__cxa_guard_release>
   b5c0a:	4b0f      	ldr	r3, [pc, #60]	; (b5c48 <pinAvailable+0x78>)
   b5c0c:	7818      	ldrb	r0, [r3, #0]
   b5c0e:	f7fe fe11 	bl	b4834 <hal_spi_is_enabled>
   b5c12:	2800      	cmp	r0, #0
   b5c14:	d1df      	bne.n	b5bd6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5c16:	2001      	movs	r0, #1
   b5c18:	e7de      	b.n	b5bd8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5c1a:	2801      	cmp	r0, #1
   b5c1c:	d809      	bhi.n	b5c32 <pinAvailable+0x62>
   b5c1e:	f000 f87d 	bl	b5d1c <_Z19__fetch_global_Wirev>
   b5c22:	2100      	movs	r1, #0
   b5c24:	7c00      	ldrb	r0, [r0, #16]
   b5c26:	f7fe fded 	bl	b4804 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5c2a:	f080 0001 	eor.w	r0, r0, #1
   b5c2e:	b2c0      	uxtb	r0, r0
   b5c30:	e7d2      	b.n	b5bd8 <pinAvailable+0x8>
   b5c32:	3809      	subs	r0, #9
   b5c34:	2801      	cmp	r0, #1
   b5c36:	d8ee      	bhi.n	b5c16 <pinAvailable+0x46>
   b5c38:	f000 f834 	bl	b5ca4 <_Z22__fetch_global_Serial1v>
   b5c3c:	7c00      	ldrb	r0, [r0, #16]
   b5c3e:	f7fe fda1 	bl	b4784 <hal_usart_is_enabled>
   b5c42:	e7f2      	b.n	b5c2a <pinAvailable+0x5a>
   b5c44:	2003e720 	.word	0x2003e720
   b5c48:	2003e724 	.word	0x2003e724

000b5c4c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5c4c:	2823      	cmp	r0, #35	; 0x23
{
   b5c4e:	b538      	push	{r3, r4, r5, lr}
   b5c50:	4604      	mov	r4, r0
   b5c52:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5c54:	d80a      	bhi.n	b5c6c <pinMode+0x20>
   b5c56:	29ff      	cmp	r1, #255	; 0xff
   b5c58:	d008      	beq.n	b5c6c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5c5a:	f7ff ffb9 	bl	b5bd0 <pinAvailable>
   b5c5e:	b128      	cbz	r0, b5c6c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5c60:	4629      	mov	r1, r5
   b5c62:	4620      	mov	r0, r4
}
   b5c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5c68:	f7fe bd1c 	b.w	b46a4 <HAL_Pin_Mode>
}
   b5c6c:	bd38      	pop	{r3, r4, r5, pc}

000b5c6e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c6e:	4770      	bx	lr

000b5c70 <_Z20acquireSerial1Bufferv>:
{
   b5c70:	b538      	push	{r3, r4, r5, lr}
   b5c72:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5c74:	2514      	movs	r5, #20
   b5c76:	462a      	mov	r2, r5
   b5c78:	2100      	movs	r1, #0
   b5c7a:	f000 fd28 	bl	b66ce <memset>
   b5c7e:	8025      	strh	r5, [r4, #0]
   b5c80:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c82:	4907      	ldr	r1, [pc, #28]	; (b5ca0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5c84:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c86:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5c88:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c8a:	f000 f86b 	bl	b5d64 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c8e:	4904      	ldr	r1, [pc, #16]	; (b5ca0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5c90:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c92:	4628      	mov	r0, r5
   b5c94:	f000 f866 	bl	b5d64 <_ZnajRKSt9nothrow_t>
    };
   b5c98:	60e0      	str	r0, [r4, #12]
}
   b5c9a:	4620      	mov	r0, r4
   b5c9c:	bd38      	pop	{r3, r4, r5, pc}
   b5c9e:	bf00      	nop
   b5ca0:	000b8b10 	.word	0x000b8b10

000b5ca4 <_Z22__fetch_global_Serial1v>:
{
   b5ca4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ca6:	4d0e      	ldr	r5, [pc, #56]	; (b5ce0 <_Z22__fetch_global_Serial1v+0x3c>)
   b5ca8:	7829      	ldrb	r1, [r5, #0]
   b5caa:	f3bf 8f5b 	dmb	ish
   b5cae:	f011 0401 	ands.w	r4, r1, #1
{
   b5cb2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5cb4:	d111      	bne.n	b5cda <_Z22__fetch_global_Serial1v+0x36>
   b5cb6:	4628      	mov	r0, r5
   b5cb8:	f7fe f9f3 	bl	b40a2 <__cxa_guard_acquire>
   b5cbc:	b168      	cbz	r0, b5cda <_Z22__fetch_global_Serial1v+0x36>
   b5cbe:	a801      	add	r0, sp, #4
   b5cc0:	f7ff ffd6 	bl	b5c70 <_Z20acquireSerial1Bufferv>
   b5cc4:	aa01      	add	r2, sp, #4
   b5cc6:	4621      	mov	r1, r4
   b5cc8:	4806      	ldr	r0, [pc, #24]	; (b5ce4 <_Z22__fetch_global_Serial1v+0x40>)
   b5cca:	f7ff fe2b 	bl	b5924 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5cce:	4628      	mov	r0, r5
   b5cd0:	f7fe f9ec 	bl	b40ac <__cxa_guard_release>
   b5cd4:	4804      	ldr	r0, [pc, #16]	; (b5ce8 <_Z22__fetch_global_Serial1v+0x44>)
   b5cd6:	f000 fcdf 	bl	b6698 <atexit>
    return serial1;
}
   b5cda:	4802      	ldr	r0, [pc, #8]	; (b5ce4 <_Z22__fetch_global_Serial1v+0x40>)
   b5cdc:	b007      	add	sp, #28
   b5cde:	bd30      	pop	{r4, r5, pc}
   b5ce0:	2003e72c 	.word	0x2003e72c
   b5ce4:	2003e730 	.word	0x2003e730
   b5ce8:	000b5c6f 	.word	0x000b5c6f

000b5cec <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5cec:	4770      	bx	lr
	...

000b5cf0 <_Z17acquireWireBufferv>:
{
   b5cf0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5cf2:	2520      	movs	r5, #32
   b5cf4:	2314      	movs	r3, #20
{
   b5cf6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5cf8:	6003      	str	r3, [r0, #0]
   b5cfa:	6085      	str	r5, [r0, #8]
   b5cfc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5cfe:	4906      	ldr	r1, [pc, #24]	; (b5d18 <_Z17acquireWireBufferv+0x28>)
   b5d00:	4628      	mov	r0, r5
   b5d02:	f000 f82f 	bl	b5d64 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5d06:	4904      	ldr	r1, [pc, #16]	; (b5d18 <_Z17acquireWireBufferv+0x28>)
	};
   b5d08:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5d0a:	4628      	mov	r0, r5
   b5d0c:	f000 f82a 	bl	b5d64 <_ZnajRKSt9nothrow_t>
	};
   b5d10:	60e0      	str	r0, [r4, #12]
}
   b5d12:	4620      	mov	r0, r4
   b5d14:	bd38      	pop	{r3, r4, r5, pc}
   b5d16:	bf00      	nop
   b5d18:	000b8b10 	.word	0x000b8b10

000b5d1c <_Z19__fetch_global_Wirev>:
{
   b5d1c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5d1e:	4d0e      	ldr	r5, [pc, #56]	; (b5d58 <_Z19__fetch_global_Wirev+0x3c>)
   b5d20:	7829      	ldrb	r1, [r5, #0]
   b5d22:	f3bf 8f5b 	dmb	ish
   b5d26:	f011 0401 	ands.w	r4, r1, #1
{
   b5d2a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5d2c:	d111      	bne.n	b5d52 <_Z19__fetch_global_Wirev+0x36>
   b5d2e:	4628      	mov	r0, r5
   b5d30:	f7fe f9b7 	bl	b40a2 <__cxa_guard_acquire>
   b5d34:	b168      	cbz	r0, b5d52 <_Z19__fetch_global_Wirev+0x36>
   b5d36:	a801      	add	r0, sp, #4
   b5d38:	f7ff ffda 	bl	b5cf0 <_Z17acquireWireBufferv>
   b5d3c:	aa01      	add	r2, sp, #4
   b5d3e:	4621      	mov	r1, r4
   b5d40:	4806      	ldr	r0, [pc, #24]	; (b5d5c <_Z19__fetch_global_Wirev+0x40>)
   b5d42:	f7ff fe43 	bl	b59cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5d46:	4628      	mov	r0, r5
   b5d48:	f7fe f9b0 	bl	b40ac <__cxa_guard_release>
   b5d4c:	4804      	ldr	r0, [pc, #16]	; (b5d60 <_Z19__fetch_global_Wirev+0x44>)
   b5d4e:	f000 fca3 	bl	b6698 <atexit>
	return wire;
}
   b5d52:	4802      	ldr	r0, [pc, #8]	; (b5d5c <_Z19__fetch_global_Wirev+0x40>)
   b5d54:	b007      	add	sp, #28
   b5d56:	bd30      	pop	{r4, r5, pc}
   b5d58:	2003e748 	.word	0x2003e748
   b5d5c:	2003e74c 	.word	0x2003e74c
   b5d60:	000b5ced 	.word	0x000b5ced

000b5d64 <_ZnajRKSt9nothrow_t>:
   b5d64:	f7fe b999 	b.w	b409a <_Znaj>

000b5d68 <_ZSt25__throw_bad_function_callv>:
   b5d68:	b508      	push	{r3, lr}
   b5d6a:	f7fe fe9f 	bl	b4aac <abort>
	...

000b5d70 <__aeabi_drsub>:
   b5d70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b5d74:	e002      	b.n	b5d7c <__adddf3>
   b5d76:	bf00      	nop

000b5d78 <__aeabi_dsub>:
   b5d78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5d7c <__adddf3>:
   b5d7c:	b530      	push	{r4, r5, lr}
   b5d7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b5d82:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b5d86:	ea94 0f05 	teq	r4, r5
   b5d8a:	bf08      	it	eq
   b5d8c:	ea90 0f02 	teqeq	r0, r2
   b5d90:	bf1f      	itttt	ne
   b5d92:	ea54 0c00 	orrsne.w	ip, r4, r0
   b5d96:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5d9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5d9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5da2:	f000 80e2 	beq.w	b5f6a <__adddf3+0x1ee>
   b5da6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5daa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5dae:	bfb8      	it	lt
   b5db0:	426d      	neglt	r5, r5
   b5db2:	dd0c      	ble.n	b5dce <__adddf3+0x52>
   b5db4:	442c      	add	r4, r5
   b5db6:	ea80 0202 	eor.w	r2, r0, r2
   b5dba:	ea81 0303 	eor.w	r3, r1, r3
   b5dbe:	ea82 0000 	eor.w	r0, r2, r0
   b5dc2:	ea83 0101 	eor.w	r1, r3, r1
   b5dc6:	ea80 0202 	eor.w	r2, r0, r2
   b5dca:	ea81 0303 	eor.w	r3, r1, r3
   b5dce:	2d36      	cmp	r5, #54	; 0x36
   b5dd0:	bf88      	it	hi
   b5dd2:	bd30      	pophi	{r4, r5, pc}
   b5dd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5dd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5ddc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5de0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5de4:	d002      	beq.n	b5dec <__adddf3+0x70>
   b5de6:	4240      	negs	r0, r0
   b5de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5dec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5df0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5df4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5df8:	d002      	beq.n	b5e00 <__adddf3+0x84>
   b5dfa:	4252      	negs	r2, r2
   b5dfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5e00:	ea94 0f05 	teq	r4, r5
   b5e04:	f000 80a7 	beq.w	b5f56 <__adddf3+0x1da>
   b5e08:	f1a4 0401 	sub.w	r4, r4, #1
   b5e0c:	f1d5 0e20 	rsbs	lr, r5, #32
   b5e10:	db0d      	blt.n	b5e2e <__adddf3+0xb2>
   b5e12:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5e16:	fa22 f205 	lsr.w	r2, r2, r5
   b5e1a:	1880      	adds	r0, r0, r2
   b5e1c:	f141 0100 	adc.w	r1, r1, #0
   b5e20:	fa03 f20e 	lsl.w	r2, r3, lr
   b5e24:	1880      	adds	r0, r0, r2
   b5e26:	fa43 f305 	asr.w	r3, r3, r5
   b5e2a:	4159      	adcs	r1, r3
   b5e2c:	e00e      	b.n	b5e4c <__adddf3+0xd0>
   b5e2e:	f1a5 0520 	sub.w	r5, r5, #32
   b5e32:	f10e 0e20 	add.w	lr, lr, #32
   b5e36:	2a01      	cmp	r2, #1
   b5e38:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5e3c:	bf28      	it	cs
   b5e3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5e42:	fa43 f305 	asr.w	r3, r3, r5
   b5e46:	18c0      	adds	r0, r0, r3
   b5e48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5e4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5e50:	d507      	bpl.n	b5e62 <__adddf3+0xe6>
   b5e52:	f04f 0e00 	mov.w	lr, #0
   b5e56:	f1dc 0c00 	rsbs	ip, ip, #0
   b5e5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5e5e:	eb6e 0101 	sbc.w	r1, lr, r1
   b5e62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b5e66:	d31b      	bcc.n	b5ea0 <__adddf3+0x124>
   b5e68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5e6c:	d30c      	bcc.n	b5e88 <__adddf3+0x10c>
   b5e6e:	0849      	lsrs	r1, r1, #1
   b5e70:	ea5f 0030 	movs.w	r0, r0, rrx
   b5e74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5e78:	f104 0401 	add.w	r4, r4, #1
   b5e7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5e80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b5e84:	f080 809a 	bcs.w	b5fbc <__adddf3+0x240>
   b5e88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5e8c:	bf08      	it	eq
   b5e8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5e92:	f150 0000 	adcs.w	r0, r0, #0
   b5e96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5e9a:	ea41 0105 	orr.w	r1, r1, r5
   b5e9e:	bd30      	pop	{r4, r5, pc}
   b5ea0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b5ea4:	4140      	adcs	r0, r0
   b5ea6:	eb41 0101 	adc.w	r1, r1, r1
   b5eaa:	3c01      	subs	r4, #1
   b5eac:	bf28      	it	cs
   b5eae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b5eb2:	d2e9      	bcs.n	b5e88 <__adddf3+0x10c>
   b5eb4:	f091 0f00 	teq	r1, #0
   b5eb8:	bf04      	itt	eq
   b5eba:	4601      	moveq	r1, r0
   b5ebc:	2000      	moveq	r0, #0
   b5ebe:	fab1 f381 	clz	r3, r1
   b5ec2:	bf08      	it	eq
   b5ec4:	3320      	addeq	r3, #32
   b5ec6:	f1a3 030b 	sub.w	r3, r3, #11
   b5eca:	f1b3 0220 	subs.w	r2, r3, #32
   b5ece:	da0c      	bge.n	b5eea <__adddf3+0x16e>
   b5ed0:	320c      	adds	r2, #12
   b5ed2:	dd08      	ble.n	b5ee6 <__adddf3+0x16a>
   b5ed4:	f102 0c14 	add.w	ip, r2, #20
   b5ed8:	f1c2 020c 	rsb	r2, r2, #12
   b5edc:	fa01 f00c 	lsl.w	r0, r1, ip
   b5ee0:	fa21 f102 	lsr.w	r1, r1, r2
   b5ee4:	e00c      	b.n	b5f00 <__adddf3+0x184>
   b5ee6:	f102 0214 	add.w	r2, r2, #20
   b5eea:	bfd8      	it	le
   b5eec:	f1c2 0c20 	rsble	ip, r2, #32
   b5ef0:	fa01 f102 	lsl.w	r1, r1, r2
   b5ef4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5ef8:	bfdc      	itt	le
   b5efa:	ea41 010c 	orrle.w	r1, r1, ip
   b5efe:	4090      	lslle	r0, r2
   b5f00:	1ae4      	subs	r4, r4, r3
   b5f02:	bfa2      	ittt	ge
   b5f04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5f08:	4329      	orrge	r1, r5
   b5f0a:	bd30      	popge	{r4, r5, pc}
   b5f0c:	ea6f 0404 	mvn.w	r4, r4
   b5f10:	3c1f      	subs	r4, #31
   b5f12:	da1c      	bge.n	b5f4e <__adddf3+0x1d2>
   b5f14:	340c      	adds	r4, #12
   b5f16:	dc0e      	bgt.n	b5f36 <__adddf3+0x1ba>
   b5f18:	f104 0414 	add.w	r4, r4, #20
   b5f1c:	f1c4 0220 	rsb	r2, r4, #32
   b5f20:	fa20 f004 	lsr.w	r0, r0, r4
   b5f24:	fa01 f302 	lsl.w	r3, r1, r2
   b5f28:	ea40 0003 	orr.w	r0, r0, r3
   b5f2c:	fa21 f304 	lsr.w	r3, r1, r4
   b5f30:	ea45 0103 	orr.w	r1, r5, r3
   b5f34:	bd30      	pop	{r4, r5, pc}
   b5f36:	f1c4 040c 	rsb	r4, r4, #12
   b5f3a:	f1c4 0220 	rsb	r2, r4, #32
   b5f3e:	fa20 f002 	lsr.w	r0, r0, r2
   b5f42:	fa01 f304 	lsl.w	r3, r1, r4
   b5f46:	ea40 0003 	orr.w	r0, r0, r3
   b5f4a:	4629      	mov	r1, r5
   b5f4c:	bd30      	pop	{r4, r5, pc}
   b5f4e:	fa21 f004 	lsr.w	r0, r1, r4
   b5f52:	4629      	mov	r1, r5
   b5f54:	bd30      	pop	{r4, r5, pc}
   b5f56:	f094 0f00 	teq	r4, #0
   b5f5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5f5e:	bf06      	itte	eq
   b5f60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5f64:	3401      	addeq	r4, #1
   b5f66:	3d01      	subne	r5, #1
   b5f68:	e74e      	b.n	b5e08 <__adddf3+0x8c>
   b5f6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5f6e:	bf18      	it	ne
   b5f70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5f74:	d029      	beq.n	b5fca <__adddf3+0x24e>
   b5f76:	ea94 0f05 	teq	r4, r5
   b5f7a:	bf08      	it	eq
   b5f7c:	ea90 0f02 	teqeq	r0, r2
   b5f80:	d005      	beq.n	b5f8e <__adddf3+0x212>
   b5f82:	ea54 0c00 	orrs.w	ip, r4, r0
   b5f86:	bf04      	itt	eq
   b5f88:	4619      	moveq	r1, r3
   b5f8a:	4610      	moveq	r0, r2
   b5f8c:	bd30      	pop	{r4, r5, pc}
   b5f8e:	ea91 0f03 	teq	r1, r3
   b5f92:	bf1e      	ittt	ne
   b5f94:	2100      	movne	r1, #0
   b5f96:	2000      	movne	r0, #0
   b5f98:	bd30      	popne	{r4, r5, pc}
   b5f9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5f9e:	d105      	bne.n	b5fac <__adddf3+0x230>
   b5fa0:	0040      	lsls	r0, r0, #1
   b5fa2:	4149      	adcs	r1, r1
   b5fa4:	bf28      	it	cs
   b5fa6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5faa:	bd30      	pop	{r4, r5, pc}
   b5fac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5fb0:	bf3c      	itt	cc
   b5fb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b5fb6:	bd30      	popcc	{r4, r5, pc}
   b5fb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5fbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5fc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5fc4:	f04f 0000 	mov.w	r0, #0
   b5fc8:	bd30      	pop	{r4, r5, pc}
   b5fca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5fce:	bf1a      	itte	ne
   b5fd0:	4619      	movne	r1, r3
   b5fd2:	4610      	movne	r0, r2
   b5fd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5fd8:	bf1c      	itt	ne
   b5fda:	460b      	movne	r3, r1
   b5fdc:	4602      	movne	r2, r0
   b5fde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5fe2:	bf06      	itte	eq
   b5fe4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5fe8:	ea91 0f03 	teqeq	r1, r3
   b5fec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5ff0:	bd30      	pop	{r4, r5, pc}
   b5ff2:	bf00      	nop

000b5ff4 <__aeabi_ui2d>:
   b5ff4:	f090 0f00 	teq	r0, #0
   b5ff8:	bf04      	itt	eq
   b5ffa:	2100      	moveq	r1, #0
   b5ffc:	4770      	bxeq	lr
   b5ffe:	b530      	push	{r4, r5, lr}
   b6000:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6004:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6008:	f04f 0500 	mov.w	r5, #0
   b600c:	f04f 0100 	mov.w	r1, #0
   b6010:	e750      	b.n	b5eb4 <__adddf3+0x138>
   b6012:	bf00      	nop

000b6014 <__aeabi_i2d>:
   b6014:	f090 0f00 	teq	r0, #0
   b6018:	bf04      	itt	eq
   b601a:	2100      	moveq	r1, #0
   b601c:	4770      	bxeq	lr
   b601e:	b530      	push	{r4, r5, lr}
   b6020:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6024:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6028:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b602c:	bf48      	it	mi
   b602e:	4240      	negmi	r0, r0
   b6030:	f04f 0100 	mov.w	r1, #0
   b6034:	e73e      	b.n	b5eb4 <__adddf3+0x138>
   b6036:	bf00      	nop

000b6038 <__aeabi_f2d>:
   b6038:	0042      	lsls	r2, r0, #1
   b603a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b603e:	ea4f 0131 	mov.w	r1, r1, rrx
   b6042:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6046:	bf1f      	itttt	ne
   b6048:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b604c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6050:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6054:	4770      	bxne	lr
   b6056:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b605a:	bf08      	it	eq
   b605c:	4770      	bxeq	lr
   b605e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6062:	bf04      	itt	eq
   b6064:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6068:	4770      	bxeq	lr
   b606a:	b530      	push	{r4, r5, lr}
   b606c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6070:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6074:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6078:	e71c      	b.n	b5eb4 <__adddf3+0x138>
   b607a:	bf00      	nop

000b607c <__aeabi_ul2d>:
   b607c:	ea50 0201 	orrs.w	r2, r0, r1
   b6080:	bf08      	it	eq
   b6082:	4770      	bxeq	lr
   b6084:	b530      	push	{r4, r5, lr}
   b6086:	f04f 0500 	mov.w	r5, #0
   b608a:	e00a      	b.n	b60a2 <__aeabi_l2d+0x16>

000b608c <__aeabi_l2d>:
   b608c:	ea50 0201 	orrs.w	r2, r0, r1
   b6090:	bf08      	it	eq
   b6092:	4770      	bxeq	lr
   b6094:	b530      	push	{r4, r5, lr}
   b6096:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b609a:	d502      	bpl.n	b60a2 <__aeabi_l2d+0x16>
   b609c:	4240      	negs	r0, r0
   b609e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b60a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b60a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b60aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b60ae:	f43f aed8 	beq.w	b5e62 <__adddf3+0xe6>
   b60b2:	f04f 0203 	mov.w	r2, #3
   b60b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b60ba:	bf18      	it	ne
   b60bc:	3203      	addne	r2, #3
   b60be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b60c2:	bf18      	it	ne
   b60c4:	3203      	addne	r2, #3
   b60c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b60ca:	f1c2 0320 	rsb	r3, r2, #32
   b60ce:	fa00 fc03 	lsl.w	ip, r0, r3
   b60d2:	fa20 f002 	lsr.w	r0, r0, r2
   b60d6:	fa01 fe03 	lsl.w	lr, r1, r3
   b60da:	ea40 000e 	orr.w	r0, r0, lr
   b60de:	fa21 f102 	lsr.w	r1, r1, r2
   b60e2:	4414      	add	r4, r2
   b60e4:	e6bd      	b.n	b5e62 <__adddf3+0xe6>
   b60e6:	bf00      	nop

000b60e8 <__aeabi_dmul>:
   b60e8:	b570      	push	{r4, r5, r6, lr}
   b60ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b60ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b60f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b60f6:	bf1d      	ittte	ne
   b60f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b60fc:	ea94 0f0c 	teqne	r4, ip
   b6100:	ea95 0f0c 	teqne	r5, ip
   b6104:	f000 f8de 	bleq	b62c4 <__aeabi_dmul+0x1dc>
   b6108:	442c      	add	r4, r5
   b610a:	ea81 0603 	eor.w	r6, r1, r3
   b610e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6112:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6116:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b611a:	bf18      	it	ne
   b611c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6120:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6128:	d038      	beq.n	b619c <__aeabi_dmul+0xb4>
   b612a:	fba0 ce02 	umull	ip, lr, r0, r2
   b612e:	f04f 0500 	mov.w	r5, #0
   b6132:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6136:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b613a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b613e:	f04f 0600 	mov.w	r6, #0
   b6142:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6146:	f09c 0f00 	teq	ip, #0
   b614a:	bf18      	it	ne
   b614c:	f04e 0e01 	orrne.w	lr, lr, #1
   b6150:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6154:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6158:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b615c:	d204      	bcs.n	b6168 <__aeabi_dmul+0x80>
   b615e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6162:	416d      	adcs	r5, r5
   b6164:	eb46 0606 	adc.w	r6, r6, r6
   b6168:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b616c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6170:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6174:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6178:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b617c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6180:	bf88      	it	hi
   b6182:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6186:	d81e      	bhi.n	b61c6 <__aeabi_dmul+0xde>
   b6188:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b618c:	bf08      	it	eq
   b618e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6192:	f150 0000 	adcs.w	r0, r0, #0
   b6196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b619a:	bd70      	pop	{r4, r5, r6, pc}
   b619c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b61a0:	ea46 0101 	orr.w	r1, r6, r1
   b61a4:	ea40 0002 	orr.w	r0, r0, r2
   b61a8:	ea81 0103 	eor.w	r1, r1, r3
   b61ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b61b0:	bfc2      	ittt	gt
   b61b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b61b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b61ba:	bd70      	popgt	{r4, r5, r6, pc}
   b61bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b61c0:	f04f 0e00 	mov.w	lr, #0
   b61c4:	3c01      	subs	r4, #1
   b61c6:	f300 80ab 	bgt.w	b6320 <__aeabi_dmul+0x238>
   b61ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b61ce:	bfde      	ittt	le
   b61d0:	2000      	movle	r0, #0
   b61d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b61d6:	bd70      	pople	{r4, r5, r6, pc}
   b61d8:	f1c4 0400 	rsb	r4, r4, #0
   b61dc:	3c20      	subs	r4, #32
   b61de:	da35      	bge.n	b624c <__aeabi_dmul+0x164>
   b61e0:	340c      	adds	r4, #12
   b61e2:	dc1b      	bgt.n	b621c <__aeabi_dmul+0x134>
   b61e4:	f104 0414 	add.w	r4, r4, #20
   b61e8:	f1c4 0520 	rsb	r5, r4, #32
   b61ec:	fa00 f305 	lsl.w	r3, r0, r5
   b61f0:	fa20 f004 	lsr.w	r0, r0, r4
   b61f4:	fa01 f205 	lsl.w	r2, r1, r5
   b61f8:	ea40 0002 	orr.w	r0, r0, r2
   b61fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6200:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6204:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6208:	fa21 f604 	lsr.w	r6, r1, r4
   b620c:	eb42 0106 	adc.w	r1, r2, r6
   b6210:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6214:	bf08      	it	eq
   b6216:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b621a:	bd70      	pop	{r4, r5, r6, pc}
   b621c:	f1c4 040c 	rsb	r4, r4, #12
   b6220:	f1c4 0520 	rsb	r5, r4, #32
   b6224:	fa00 f304 	lsl.w	r3, r0, r4
   b6228:	fa20 f005 	lsr.w	r0, r0, r5
   b622c:	fa01 f204 	lsl.w	r2, r1, r4
   b6230:	ea40 0002 	orr.w	r0, r0, r2
   b6234:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b623c:	f141 0100 	adc.w	r1, r1, #0
   b6240:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6244:	bf08      	it	eq
   b6246:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b624a:	bd70      	pop	{r4, r5, r6, pc}
   b624c:	f1c4 0520 	rsb	r5, r4, #32
   b6250:	fa00 f205 	lsl.w	r2, r0, r5
   b6254:	ea4e 0e02 	orr.w	lr, lr, r2
   b6258:	fa20 f304 	lsr.w	r3, r0, r4
   b625c:	fa01 f205 	lsl.w	r2, r1, r5
   b6260:	ea43 0302 	orr.w	r3, r3, r2
   b6264:	fa21 f004 	lsr.w	r0, r1, r4
   b6268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b626c:	fa21 f204 	lsr.w	r2, r1, r4
   b6270:	ea20 0002 	bic.w	r0, r0, r2
   b6274:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b627c:	bf08      	it	eq
   b627e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6282:	bd70      	pop	{r4, r5, r6, pc}
   b6284:	f094 0f00 	teq	r4, #0
   b6288:	d10f      	bne.n	b62aa <__aeabi_dmul+0x1c2>
   b628a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b628e:	0040      	lsls	r0, r0, #1
   b6290:	eb41 0101 	adc.w	r1, r1, r1
   b6294:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6298:	bf08      	it	eq
   b629a:	3c01      	subeq	r4, #1
   b629c:	d0f7      	beq.n	b628e <__aeabi_dmul+0x1a6>
   b629e:	ea41 0106 	orr.w	r1, r1, r6
   b62a2:	f095 0f00 	teq	r5, #0
   b62a6:	bf18      	it	ne
   b62a8:	4770      	bxne	lr
   b62aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b62ae:	0052      	lsls	r2, r2, #1
   b62b0:	eb43 0303 	adc.w	r3, r3, r3
   b62b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b62b8:	bf08      	it	eq
   b62ba:	3d01      	subeq	r5, #1
   b62bc:	d0f7      	beq.n	b62ae <__aeabi_dmul+0x1c6>
   b62be:	ea43 0306 	orr.w	r3, r3, r6
   b62c2:	4770      	bx	lr
   b62c4:	ea94 0f0c 	teq	r4, ip
   b62c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b62cc:	bf18      	it	ne
   b62ce:	ea95 0f0c 	teqne	r5, ip
   b62d2:	d00c      	beq.n	b62ee <__aeabi_dmul+0x206>
   b62d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b62d8:	bf18      	it	ne
   b62da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b62de:	d1d1      	bne.n	b6284 <__aeabi_dmul+0x19c>
   b62e0:	ea81 0103 	eor.w	r1, r1, r3
   b62e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b62e8:	f04f 0000 	mov.w	r0, #0
   b62ec:	bd70      	pop	{r4, r5, r6, pc}
   b62ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b62f2:	bf06      	itte	eq
   b62f4:	4610      	moveq	r0, r2
   b62f6:	4619      	moveq	r1, r3
   b62f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b62fc:	d019      	beq.n	b6332 <__aeabi_dmul+0x24a>
   b62fe:	ea94 0f0c 	teq	r4, ip
   b6302:	d102      	bne.n	b630a <__aeabi_dmul+0x222>
   b6304:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6308:	d113      	bne.n	b6332 <__aeabi_dmul+0x24a>
   b630a:	ea95 0f0c 	teq	r5, ip
   b630e:	d105      	bne.n	b631c <__aeabi_dmul+0x234>
   b6310:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6314:	bf1c      	itt	ne
   b6316:	4610      	movne	r0, r2
   b6318:	4619      	movne	r1, r3
   b631a:	d10a      	bne.n	b6332 <__aeabi_dmul+0x24a>
   b631c:	ea81 0103 	eor.w	r1, r1, r3
   b6320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6324:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6328:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b632c:	f04f 0000 	mov.w	r0, #0
   b6330:	bd70      	pop	{r4, r5, r6, pc}
   b6332:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6336:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b633a:	bd70      	pop	{r4, r5, r6, pc}

000b633c <__aeabi_ddiv>:
   b633c:	b570      	push	{r4, r5, r6, lr}
   b633e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6342:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6346:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b634a:	bf1d      	ittte	ne
   b634c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6350:	ea94 0f0c 	teqne	r4, ip
   b6354:	ea95 0f0c 	teqne	r5, ip
   b6358:	f000 f8a7 	bleq	b64aa <__aeabi_ddiv+0x16e>
   b635c:	eba4 0405 	sub.w	r4, r4, r5
   b6360:	ea81 0e03 	eor.w	lr, r1, r3
   b6364:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6368:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b636c:	f000 8088 	beq.w	b6480 <__aeabi_ddiv+0x144>
   b6370:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6374:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6378:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b637c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6380:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6384:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6388:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b638c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6390:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6394:	429d      	cmp	r5, r3
   b6396:	bf08      	it	eq
   b6398:	4296      	cmpeq	r6, r2
   b639a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b639e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b63a2:	d202      	bcs.n	b63aa <__aeabi_ddiv+0x6e>
   b63a4:	085b      	lsrs	r3, r3, #1
   b63a6:	ea4f 0232 	mov.w	r2, r2, rrx
   b63aa:	1ab6      	subs	r6, r6, r2
   b63ac:	eb65 0503 	sbc.w	r5, r5, r3
   b63b0:	085b      	lsrs	r3, r3, #1
   b63b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b63b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b63ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b63be:	ebb6 0e02 	subs.w	lr, r6, r2
   b63c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b63c6:	bf22      	ittt	cs
   b63c8:	1ab6      	subcs	r6, r6, r2
   b63ca:	4675      	movcs	r5, lr
   b63cc:	ea40 000c 	orrcs.w	r0, r0, ip
   b63d0:	085b      	lsrs	r3, r3, #1
   b63d2:	ea4f 0232 	mov.w	r2, r2, rrx
   b63d6:	ebb6 0e02 	subs.w	lr, r6, r2
   b63da:	eb75 0e03 	sbcs.w	lr, r5, r3
   b63de:	bf22      	ittt	cs
   b63e0:	1ab6      	subcs	r6, r6, r2
   b63e2:	4675      	movcs	r5, lr
   b63e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b63e8:	085b      	lsrs	r3, r3, #1
   b63ea:	ea4f 0232 	mov.w	r2, r2, rrx
   b63ee:	ebb6 0e02 	subs.w	lr, r6, r2
   b63f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b63f6:	bf22      	ittt	cs
   b63f8:	1ab6      	subcs	r6, r6, r2
   b63fa:	4675      	movcs	r5, lr
   b63fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6400:	085b      	lsrs	r3, r3, #1
   b6402:	ea4f 0232 	mov.w	r2, r2, rrx
   b6406:	ebb6 0e02 	subs.w	lr, r6, r2
   b640a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b640e:	bf22      	ittt	cs
   b6410:	1ab6      	subcs	r6, r6, r2
   b6412:	4675      	movcs	r5, lr
   b6414:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6418:	ea55 0e06 	orrs.w	lr, r5, r6
   b641c:	d018      	beq.n	b6450 <__aeabi_ddiv+0x114>
   b641e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6422:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6426:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b642a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b642e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6432:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6436:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b643a:	d1c0      	bne.n	b63be <__aeabi_ddiv+0x82>
   b643c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6440:	d10b      	bne.n	b645a <__aeabi_ddiv+0x11e>
   b6442:	ea41 0100 	orr.w	r1, r1, r0
   b6446:	f04f 0000 	mov.w	r0, #0
   b644a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b644e:	e7b6      	b.n	b63be <__aeabi_ddiv+0x82>
   b6450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6454:	bf04      	itt	eq
   b6456:	4301      	orreq	r1, r0
   b6458:	2000      	moveq	r0, #0
   b645a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b645e:	bf88      	it	hi
   b6460:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6464:	f63f aeaf 	bhi.w	b61c6 <__aeabi_dmul+0xde>
   b6468:	ebb5 0c03 	subs.w	ip, r5, r3
   b646c:	bf04      	itt	eq
   b646e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6472:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6476:	f150 0000 	adcs.w	r0, r0, #0
   b647a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b647e:	bd70      	pop	{r4, r5, r6, pc}
   b6480:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6484:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6488:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b648c:	bfc2      	ittt	gt
   b648e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6492:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6496:	bd70      	popgt	{r4, r5, r6, pc}
   b6498:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b649c:	f04f 0e00 	mov.w	lr, #0
   b64a0:	3c01      	subs	r4, #1
   b64a2:	e690      	b.n	b61c6 <__aeabi_dmul+0xde>
   b64a4:	ea45 0e06 	orr.w	lr, r5, r6
   b64a8:	e68d      	b.n	b61c6 <__aeabi_dmul+0xde>
   b64aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b64ae:	ea94 0f0c 	teq	r4, ip
   b64b2:	bf08      	it	eq
   b64b4:	ea95 0f0c 	teqeq	r5, ip
   b64b8:	f43f af3b 	beq.w	b6332 <__aeabi_dmul+0x24a>
   b64bc:	ea94 0f0c 	teq	r4, ip
   b64c0:	d10a      	bne.n	b64d8 <__aeabi_ddiv+0x19c>
   b64c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b64c6:	f47f af34 	bne.w	b6332 <__aeabi_dmul+0x24a>
   b64ca:	ea95 0f0c 	teq	r5, ip
   b64ce:	f47f af25 	bne.w	b631c <__aeabi_dmul+0x234>
   b64d2:	4610      	mov	r0, r2
   b64d4:	4619      	mov	r1, r3
   b64d6:	e72c      	b.n	b6332 <__aeabi_dmul+0x24a>
   b64d8:	ea95 0f0c 	teq	r5, ip
   b64dc:	d106      	bne.n	b64ec <__aeabi_ddiv+0x1b0>
   b64de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b64e2:	f43f aefd 	beq.w	b62e0 <__aeabi_dmul+0x1f8>
   b64e6:	4610      	mov	r0, r2
   b64e8:	4619      	mov	r1, r3
   b64ea:	e722      	b.n	b6332 <__aeabi_dmul+0x24a>
   b64ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b64f0:	bf18      	it	ne
   b64f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b64f6:	f47f aec5 	bne.w	b6284 <__aeabi_dmul+0x19c>
   b64fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b64fe:	f47f af0d 	bne.w	b631c <__aeabi_dmul+0x234>
   b6502:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6506:	f47f aeeb 	bne.w	b62e0 <__aeabi_dmul+0x1f8>
   b650a:	e712      	b.n	b6332 <__aeabi_dmul+0x24a>

000b650c <__gedf2>:
   b650c:	f04f 3cff 	mov.w	ip, #4294967295
   b6510:	e006      	b.n	b6520 <__cmpdf2+0x4>
   b6512:	bf00      	nop

000b6514 <__ledf2>:
   b6514:	f04f 0c01 	mov.w	ip, #1
   b6518:	e002      	b.n	b6520 <__cmpdf2+0x4>
   b651a:	bf00      	nop

000b651c <__cmpdf2>:
   b651c:	f04f 0c01 	mov.w	ip, #1
   b6520:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6524:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6528:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b652c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6530:	bf18      	it	ne
   b6532:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6536:	d01b      	beq.n	b6570 <__cmpdf2+0x54>
   b6538:	b001      	add	sp, #4
   b653a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b653e:	bf0c      	ite	eq
   b6540:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6544:	ea91 0f03 	teqne	r1, r3
   b6548:	bf02      	ittt	eq
   b654a:	ea90 0f02 	teqeq	r0, r2
   b654e:	2000      	moveq	r0, #0
   b6550:	4770      	bxeq	lr
   b6552:	f110 0f00 	cmn.w	r0, #0
   b6556:	ea91 0f03 	teq	r1, r3
   b655a:	bf58      	it	pl
   b655c:	4299      	cmppl	r1, r3
   b655e:	bf08      	it	eq
   b6560:	4290      	cmpeq	r0, r2
   b6562:	bf2c      	ite	cs
   b6564:	17d8      	asrcs	r0, r3, #31
   b6566:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b656a:	f040 0001 	orr.w	r0, r0, #1
   b656e:	4770      	bx	lr
   b6570:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6574:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6578:	d102      	bne.n	b6580 <__cmpdf2+0x64>
   b657a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b657e:	d107      	bne.n	b6590 <__cmpdf2+0x74>
   b6580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6588:	d1d6      	bne.n	b6538 <__cmpdf2+0x1c>
   b658a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b658e:	d0d3      	beq.n	b6538 <__cmpdf2+0x1c>
   b6590:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6594:	4770      	bx	lr
   b6596:	bf00      	nop

000b6598 <__aeabi_cdrcmple>:
   b6598:	4684      	mov	ip, r0
   b659a:	4610      	mov	r0, r2
   b659c:	4662      	mov	r2, ip
   b659e:	468c      	mov	ip, r1
   b65a0:	4619      	mov	r1, r3
   b65a2:	4663      	mov	r3, ip
   b65a4:	e000      	b.n	b65a8 <__aeabi_cdcmpeq>
   b65a6:	bf00      	nop

000b65a8 <__aeabi_cdcmpeq>:
   b65a8:	b501      	push	{r0, lr}
   b65aa:	f7ff ffb7 	bl	b651c <__cmpdf2>
   b65ae:	2800      	cmp	r0, #0
   b65b0:	bf48      	it	mi
   b65b2:	f110 0f00 	cmnmi.w	r0, #0
   b65b6:	bd01      	pop	{r0, pc}

000b65b8 <__aeabi_dcmpeq>:
   b65b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b65bc:	f7ff fff4 	bl	b65a8 <__aeabi_cdcmpeq>
   b65c0:	bf0c      	ite	eq
   b65c2:	2001      	moveq	r0, #1
   b65c4:	2000      	movne	r0, #0
   b65c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b65ca:	bf00      	nop

000b65cc <__aeabi_dcmplt>:
   b65cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b65d0:	f7ff ffea 	bl	b65a8 <__aeabi_cdcmpeq>
   b65d4:	bf34      	ite	cc
   b65d6:	2001      	movcc	r0, #1
   b65d8:	2000      	movcs	r0, #0
   b65da:	f85d fb08 	ldr.w	pc, [sp], #8
   b65de:	bf00      	nop

000b65e0 <__aeabi_dcmple>:
   b65e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b65e4:	f7ff ffe0 	bl	b65a8 <__aeabi_cdcmpeq>
   b65e8:	bf94      	ite	ls
   b65ea:	2001      	movls	r0, #1
   b65ec:	2000      	movhi	r0, #0
   b65ee:	f85d fb08 	ldr.w	pc, [sp], #8
   b65f2:	bf00      	nop

000b65f4 <__aeabi_dcmpge>:
   b65f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b65f8:	f7ff ffce 	bl	b6598 <__aeabi_cdrcmple>
   b65fc:	bf94      	ite	ls
   b65fe:	2001      	movls	r0, #1
   b6600:	2000      	movhi	r0, #0
   b6602:	f85d fb08 	ldr.w	pc, [sp], #8
   b6606:	bf00      	nop

000b6608 <__aeabi_dcmpgt>:
   b6608:	f84d ed08 	str.w	lr, [sp, #-8]!
   b660c:	f7ff ffc4 	bl	b6598 <__aeabi_cdrcmple>
   b6610:	bf34      	ite	cc
   b6612:	2001      	movcc	r0, #1
   b6614:	2000      	movcs	r0, #0
   b6616:	f85d fb08 	ldr.w	pc, [sp], #8
   b661a:	bf00      	nop

000b661c <__aeabi_d2uiz>:
   b661c:	004a      	lsls	r2, r1, #1
   b661e:	d211      	bcs.n	b6644 <__aeabi_d2uiz+0x28>
   b6620:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6624:	d211      	bcs.n	b664a <__aeabi_d2uiz+0x2e>
   b6626:	d50d      	bpl.n	b6644 <__aeabi_d2uiz+0x28>
   b6628:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b662c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6630:	d40e      	bmi.n	b6650 <__aeabi_d2uiz+0x34>
   b6632:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b663a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b663e:	fa23 f002 	lsr.w	r0, r3, r2
   b6642:	4770      	bx	lr
   b6644:	f04f 0000 	mov.w	r0, #0
   b6648:	4770      	bx	lr
   b664a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b664e:	d102      	bne.n	b6656 <__aeabi_d2uiz+0x3a>
   b6650:	f04f 30ff 	mov.w	r0, #4294967295
   b6654:	4770      	bx	lr
   b6656:	f04f 0000 	mov.w	r0, #0
   b665a:	4770      	bx	lr

000b665c <__aeabi_d2ulz>:
   b665c:	b5d0      	push	{r4, r6, r7, lr}
   b665e:	4b0c      	ldr	r3, [pc, #48]	; (b6690 <__aeabi_d2ulz+0x34>)
   b6660:	2200      	movs	r2, #0
   b6662:	4606      	mov	r6, r0
   b6664:	460f      	mov	r7, r1
   b6666:	f7ff fd3f 	bl	b60e8 <__aeabi_dmul>
   b666a:	f7ff ffd7 	bl	b661c <__aeabi_d2uiz>
   b666e:	4604      	mov	r4, r0
   b6670:	f7ff fcc0 	bl	b5ff4 <__aeabi_ui2d>
   b6674:	4b07      	ldr	r3, [pc, #28]	; (b6694 <__aeabi_d2ulz+0x38>)
   b6676:	2200      	movs	r2, #0
   b6678:	f7ff fd36 	bl	b60e8 <__aeabi_dmul>
   b667c:	4602      	mov	r2, r0
   b667e:	460b      	mov	r3, r1
   b6680:	4630      	mov	r0, r6
   b6682:	4639      	mov	r1, r7
   b6684:	f7ff fb78 	bl	b5d78 <__aeabi_dsub>
   b6688:	f7ff ffc8 	bl	b661c <__aeabi_d2uiz>
   b668c:	4621      	mov	r1, r4
   b668e:	bdd0      	pop	{r4, r6, r7, pc}
   b6690:	3df00000 	.word	0x3df00000
   b6694:	41f00000 	.word	0x41f00000

000b6698 <atexit>:
   b6698:	2300      	movs	r3, #0
   b669a:	4601      	mov	r1, r0
   b669c:	461a      	mov	r2, r3
   b669e:	4618      	mov	r0, r3
   b66a0:	f000 bfb4 	b.w	b760c <__register_exitproc>

000b66a4 <atof>:
   b66a4:	2100      	movs	r1, #0
   b66a6:	f000 bebd 	b.w	b7424 <strtod>

000b66aa <atoi>:
   b66aa:	220a      	movs	r2, #10
   b66ac:	2100      	movs	r1, #0
   b66ae:	f000 bfa3 	b.w	b75f8 <strtol>

000b66b2 <memcpy>:
   b66b2:	440a      	add	r2, r1
   b66b4:	4291      	cmp	r1, r2
   b66b6:	f100 33ff 	add.w	r3, r0, #4294967295
   b66ba:	d100      	bne.n	b66be <memcpy+0xc>
   b66bc:	4770      	bx	lr
   b66be:	b510      	push	{r4, lr}
   b66c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   b66c4:	f803 4f01 	strb.w	r4, [r3, #1]!
   b66c8:	4291      	cmp	r1, r2
   b66ca:	d1f9      	bne.n	b66c0 <memcpy+0xe>
   b66cc:	bd10      	pop	{r4, pc}

000b66ce <memset>:
   b66ce:	4402      	add	r2, r0
   b66d0:	4603      	mov	r3, r0
   b66d2:	4293      	cmp	r3, r2
   b66d4:	d100      	bne.n	b66d8 <memset+0xa>
   b66d6:	4770      	bx	lr
   b66d8:	f803 1b01 	strb.w	r1, [r3], #1
   b66dc:	e7f9      	b.n	b66d2 <memset+0x4>
	...

000b66e0 <srand>:
   b66e0:	b538      	push	{r3, r4, r5, lr}
   b66e2:	4b10      	ldr	r3, [pc, #64]	; (b6724 <srand+0x44>)
   b66e4:	681d      	ldr	r5, [r3, #0]
   b66e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b66e8:	4604      	mov	r4, r0
   b66ea:	b9b3      	cbnz	r3, b671a <srand+0x3a>
   b66ec:	2018      	movs	r0, #24
   b66ee:	f7fe f9b5 	bl	b4a5c <malloc>
   b66f2:	4602      	mov	r2, r0
   b66f4:	63a8      	str	r0, [r5, #56]	; 0x38
   b66f6:	b920      	cbnz	r0, b6702 <srand+0x22>
   b66f8:	4b0b      	ldr	r3, [pc, #44]	; (b6728 <srand+0x48>)
   b66fa:	480c      	ldr	r0, [pc, #48]	; (b672c <srand+0x4c>)
   b66fc:	2142      	movs	r1, #66	; 0x42
   b66fe:	f7fe f9ed 	bl	b4adc <__assert_func>
   b6702:	490b      	ldr	r1, [pc, #44]	; (b6730 <srand+0x50>)
   b6704:	4b0b      	ldr	r3, [pc, #44]	; (b6734 <srand+0x54>)
   b6706:	e9c0 1300 	strd	r1, r3, [r0]
   b670a:	4b0b      	ldr	r3, [pc, #44]	; (b6738 <srand+0x58>)
   b670c:	6083      	str	r3, [r0, #8]
   b670e:	230b      	movs	r3, #11
   b6710:	8183      	strh	r3, [r0, #12]
   b6712:	2100      	movs	r1, #0
   b6714:	2001      	movs	r0, #1
   b6716:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b671a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b671c:	2200      	movs	r2, #0
   b671e:	611c      	str	r4, [r3, #16]
   b6720:	615a      	str	r2, [r3, #20]
   b6722:	bd38      	pop	{r3, r4, r5, pc}
   b6724:	2003cd58 	.word	0x2003cd58
   b6728:	000b8b11 	.word	0x000b8b11
   b672c:	000b8b28 	.word	0x000b8b28
   b6730:	abcd330e 	.word	0xabcd330e
   b6734:	e66d1234 	.word	0xe66d1234
   b6738:	0005deec 	.word	0x0005deec

000b673c <strcat>:
   b673c:	b510      	push	{r4, lr}
   b673e:	4602      	mov	r2, r0
   b6740:	7814      	ldrb	r4, [r2, #0]
   b6742:	4613      	mov	r3, r2
   b6744:	3201      	adds	r2, #1
   b6746:	2c00      	cmp	r4, #0
   b6748:	d1fa      	bne.n	b6740 <strcat+0x4>
   b674a:	3b01      	subs	r3, #1
   b674c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6750:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6754:	2a00      	cmp	r2, #0
   b6756:	d1f9      	bne.n	b674c <strcat+0x10>
   b6758:	bd10      	pop	{r4, pc}

000b675a <strcpy>:
   b675a:	4603      	mov	r3, r0
   b675c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6760:	f803 2b01 	strb.w	r2, [r3], #1
   b6764:	2a00      	cmp	r2, #0
   b6766:	d1f9      	bne.n	b675c <strcpy+0x2>
   b6768:	4770      	bx	lr
	...

000b676c <strdup>:
   b676c:	4b02      	ldr	r3, [pc, #8]	; (b6778 <strdup+0xc>)
   b676e:	4601      	mov	r1, r0
   b6770:	6818      	ldr	r0, [r3, #0]
   b6772:	f000 b803 	b.w	b677c <_strdup_r>
   b6776:	bf00      	nop
   b6778:	2003cd58 	.word	0x2003cd58

000b677c <_strdup_r>:
   b677c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b677e:	4604      	mov	r4, r0
   b6780:	4608      	mov	r0, r1
   b6782:	460d      	mov	r5, r1
   b6784:	f000 f80f 	bl	b67a6 <strlen>
   b6788:	1c42      	adds	r2, r0, #1
   b678a:	4611      	mov	r1, r2
   b678c:	4620      	mov	r0, r4
   b678e:	9201      	str	r2, [sp, #4]
   b6790:	f7fe f994 	bl	b4abc <_malloc_r>
   b6794:	4604      	mov	r4, r0
   b6796:	b118      	cbz	r0, b67a0 <_strdup_r+0x24>
   b6798:	9a01      	ldr	r2, [sp, #4]
   b679a:	4629      	mov	r1, r5
   b679c:	f7ff ff89 	bl	b66b2 <memcpy>
   b67a0:	4620      	mov	r0, r4
   b67a2:	b003      	add	sp, #12
   b67a4:	bd30      	pop	{r4, r5, pc}

000b67a6 <strlen>:
   b67a6:	4603      	mov	r3, r0
   b67a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b67ac:	2a00      	cmp	r2, #0
   b67ae:	d1fb      	bne.n	b67a8 <strlen+0x2>
   b67b0:	1a18      	subs	r0, r3, r0
   b67b2:	3801      	subs	r0, #1
   b67b4:	4770      	bx	lr

000b67b6 <strncmp>:
   b67b6:	b510      	push	{r4, lr}
   b67b8:	b17a      	cbz	r2, b67da <strncmp+0x24>
   b67ba:	4603      	mov	r3, r0
   b67bc:	3901      	subs	r1, #1
   b67be:	1884      	adds	r4, r0, r2
   b67c0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b67c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b67c8:	4290      	cmp	r0, r2
   b67ca:	d101      	bne.n	b67d0 <strncmp+0x1a>
   b67cc:	42a3      	cmp	r3, r4
   b67ce:	d101      	bne.n	b67d4 <strncmp+0x1e>
   b67d0:	1a80      	subs	r0, r0, r2
   b67d2:	bd10      	pop	{r4, pc}
   b67d4:	2800      	cmp	r0, #0
   b67d6:	d1f3      	bne.n	b67c0 <strncmp+0xa>
   b67d8:	e7fa      	b.n	b67d0 <strncmp+0x1a>
   b67da:	4610      	mov	r0, r2
   b67dc:	e7f9      	b.n	b67d2 <strncmp+0x1c>

000b67de <sulp>:
   b67de:	b570      	push	{r4, r5, r6, lr}
   b67e0:	4604      	mov	r4, r0
   b67e2:	460d      	mov	r5, r1
   b67e4:	ec45 4b10 	vmov	d0, r4, r5
   b67e8:	4616      	mov	r6, r2
   b67ea:	f001 fe69 	bl	b84c0 <__ulp>
   b67ee:	ec51 0b10 	vmov	r0, r1, d0
   b67f2:	b17e      	cbz	r6, b6814 <sulp+0x36>
   b67f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b67f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b67fc:	2b00      	cmp	r3, #0
   b67fe:	dd09      	ble.n	b6814 <sulp+0x36>
   b6800:	051b      	lsls	r3, r3, #20
   b6802:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b6806:	2400      	movs	r4, #0
   b6808:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b680c:	4622      	mov	r2, r4
   b680e:	462b      	mov	r3, r5
   b6810:	f7ff fc6a 	bl	b60e8 <__aeabi_dmul>
   b6814:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6818 <_strtod_l>:
   b6818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b681c:	ed2d 8b02 	vpush	{d8}
   b6820:	b09d      	sub	sp, #116	; 0x74
   b6822:	461f      	mov	r7, r3
   b6824:	2300      	movs	r3, #0
   b6826:	9318      	str	r3, [sp, #96]	; 0x60
   b6828:	4ba2      	ldr	r3, [pc, #648]	; (b6ab4 <_strtod_l+0x29c>)
   b682a:	9213      	str	r2, [sp, #76]	; 0x4c
   b682c:	681b      	ldr	r3, [r3, #0]
   b682e:	9305      	str	r3, [sp, #20]
   b6830:	4604      	mov	r4, r0
   b6832:	4618      	mov	r0, r3
   b6834:	4688      	mov	r8, r1
   b6836:	f7ff ffb6 	bl	b67a6 <strlen>
   b683a:	f04f 0a00 	mov.w	sl, #0
   b683e:	4605      	mov	r5, r0
   b6840:	f04f 0b00 	mov.w	fp, #0
   b6844:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b6848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b684a:	781a      	ldrb	r2, [r3, #0]
   b684c:	2a2b      	cmp	r2, #43	; 0x2b
   b684e:	d04e      	beq.n	b68ee <_strtod_l+0xd6>
   b6850:	d83b      	bhi.n	b68ca <_strtod_l+0xb2>
   b6852:	2a0d      	cmp	r2, #13
   b6854:	d834      	bhi.n	b68c0 <_strtod_l+0xa8>
   b6856:	2a08      	cmp	r2, #8
   b6858:	d834      	bhi.n	b68c4 <_strtod_l+0xac>
   b685a:	2a00      	cmp	r2, #0
   b685c:	d03e      	beq.n	b68dc <_strtod_l+0xc4>
   b685e:	2300      	movs	r3, #0
   b6860:	930a      	str	r3, [sp, #40]	; 0x28
   b6862:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b6864:	7833      	ldrb	r3, [r6, #0]
   b6866:	2b30      	cmp	r3, #48	; 0x30
   b6868:	f040 80b0 	bne.w	b69cc <_strtod_l+0x1b4>
   b686c:	7873      	ldrb	r3, [r6, #1]
   b686e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b6872:	2b58      	cmp	r3, #88	; 0x58
   b6874:	d168      	bne.n	b6948 <_strtod_l+0x130>
   b6876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6878:	9301      	str	r3, [sp, #4]
   b687a:	ab18      	add	r3, sp, #96	; 0x60
   b687c:	9702      	str	r7, [sp, #8]
   b687e:	9300      	str	r3, [sp, #0]
   b6880:	4a8d      	ldr	r2, [pc, #564]	; (b6ab8 <_strtod_l+0x2a0>)
   b6882:	ab19      	add	r3, sp, #100	; 0x64
   b6884:	a917      	add	r1, sp, #92	; 0x5c
   b6886:	4620      	mov	r0, r4
   b6888:	f000 ff8a 	bl	b77a0 <__gethex>
   b688c:	f010 0707 	ands.w	r7, r0, #7
   b6890:	4605      	mov	r5, r0
   b6892:	d005      	beq.n	b68a0 <_strtod_l+0x88>
   b6894:	2f06      	cmp	r7, #6
   b6896:	d12c      	bne.n	b68f2 <_strtod_l+0xda>
   b6898:	3601      	adds	r6, #1
   b689a:	2300      	movs	r3, #0
   b689c:	9617      	str	r6, [sp, #92]	; 0x5c
   b689e:	930a      	str	r3, [sp, #40]	; 0x28
   b68a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b68a2:	2b00      	cmp	r3, #0
   b68a4:	f040 8590 	bne.w	b73c8 <_strtod_l+0xbb0>
   b68a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b68aa:	b1eb      	cbz	r3, b68e8 <_strtod_l+0xd0>
   b68ac:	4652      	mov	r2, sl
   b68ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b68b2:	ec43 2b10 	vmov	d0, r2, r3
   b68b6:	b01d      	add	sp, #116	; 0x74
   b68b8:	ecbd 8b02 	vpop	{d8}
   b68bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b68c0:	2a20      	cmp	r2, #32
   b68c2:	d1cc      	bne.n	b685e <_strtod_l+0x46>
   b68c4:	3301      	adds	r3, #1
   b68c6:	9317      	str	r3, [sp, #92]	; 0x5c
   b68c8:	e7be      	b.n	b6848 <_strtod_l+0x30>
   b68ca:	2a2d      	cmp	r2, #45	; 0x2d
   b68cc:	d1c7      	bne.n	b685e <_strtod_l+0x46>
   b68ce:	2201      	movs	r2, #1
   b68d0:	920a      	str	r2, [sp, #40]	; 0x28
   b68d2:	1c5a      	adds	r2, r3, #1
   b68d4:	9217      	str	r2, [sp, #92]	; 0x5c
   b68d6:	785b      	ldrb	r3, [r3, #1]
   b68d8:	2b00      	cmp	r3, #0
   b68da:	d1c2      	bne.n	b6862 <_strtod_l+0x4a>
   b68dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b68de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b68e2:	2b00      	cmp	r3, #0
   b68e4:	f040 856e 	bne.w	b73c4 <_strtod_l+0xbac>
   b68e8:	4652      	mov	r2, sl
   b68ea:	465b      	mov	r3, fp
   b68ec:	e7e1      	b.n	b68b2 <_strtod_l+0x9a>
   b68ee:	2200      	movs	r2, #0
   b68f0:	e7ee      	b.n	b68d0 <_strtod_l+0xb8>
   b68f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b68f4:	b13a      	cbz	r2, b6906 <_strtod_l+0xee>
   b68f6:	2135      	movs	r1, #53	; 0x35
   b68f8:	a81a      	add	r0, sp, #104	; 0x68
   b68fa:	f001 feec 	bl	b86d6 <__copybits>
   b68fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6900:	4620      	mov	r0, r4
   b6902:	f001 faab 	bl	b7e5c <_Bfree>
   b6906:	3f01      	subs	r7, #1
   b6908:	2f04      	cmp	r7, #4
   b690a:	d806      	bhi.n	b691a <_strtod_l+0x102>
   b690c:	e8df f007 	tbb	[pc, r7]
   b6910:	1714030a 	.word	0x1714030a
   b6914:	0a          	.byte	0x0a
   b6915:	00          	.byte	0x00
   b6916:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b691a:	0728      	lsls	r0, r5, #28
   b691c:	d5c0      	bpl.n	b68a0 <_strtod_l+0x88>
   b691e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b6922:	e7bd      	b.n	b68a0 <_strtod_l+0x88>
   b6924:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b6928:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b692a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b692e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b6932:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b6936:	e7f0      	b.n	b691a <_strtod_l+0x102>
   b6938:	f8df b180 	ldr.w	fp, [pc, #384]	; b6abc <_strtod_l+0x2a4>
   b693c:	e7ed      	b.n	b691a <_strtod_l+0x102>
   b693e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b6942:	f04f 3aff 	mov.w	sl, #4294967295
   b6946:	e7e8      	b.n	b691a <_strtod_l+0x102>
   b6948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b694a:	1c5a      	adds	r2, r3, #1
   b694c:	9217      	str	r2, [sp, #92]	; 0x5c
   b694e:	785b      	ldrb	r3, [r3, #1]
   b6950:	2b30      	cmp	r3, #48	; 0x30
   b6952:	d0f9      	beq.n	b6948 <_strtod_l+0x130>
   b6954:	2b00      	cmp	r3, #0
   b6956:	d0a3      	beq.n	b68a0 <_strtod_l+0x88>
   b6958:	2301      	movs	r3, #1
   b695a:	f04f 0900 	mov.w	r9, #0
   b695e:	9304      	str	r3, [sp, #16]
   b6960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6962:	9308      	str	r3, [sp, #32]
   b6964:	f8cd 901c 	str.w	r9, [sp, #28]
   b6968:	464f      	mov	r7, r9
   b696a:	220a      	movs	r2, #10
   b696c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b696e:	7806      	ldrb	r6, [r0, #0]
   b6970:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b6974:	b2d9      	uxtb	r1, r3
   b6976:	2909      	cmp	r1, #9
   b6978:	d92a      	bls.n	b69d0 <_strtod_l+0x1b8>
   b697a:	9905      	ldr	r1, [sp, #20]
   b697c:	462a      	mov	r2, r5
   b697e:	f7ff ff1a 	bl	b67b6 <strncmp>
   b6982:	b398      	cbz	r0, b69ec <_strtod_l+0x1d4>
   b6984:	2000      	movs	r0, #0
   b6986:	4632      	mov	r2, r6
   b6988:	463d      	mov	r5, r7
   b698a:	9005      	str	r0, [sp, #20]
   b698c:	4603      	mov	r3, r0
   b698e:	2a65      	cmp	r2, #101	; 0x65
   b6990:	d001      	beq.n	b6996 <_strtod_l+0x17e>
   b6992:	2a45      	cmp	r2, #69	; 0x45
   b6994:	d118      	bne.n	b69c8 <_strtod_l+0x1b0>
   b6996:	b91d      	cbnz	r5, b69a0 <_strtod_l+0x188>
   b6998:	9a04      	ldr	r2, [sp, #16]
   b699a:	4302      	orrs	r2, r0
   b699c:	d09e      	beq.n	b68dc <_strtod_l+0xc4>
   b699e:	2500      	movs	r5, #0
   b69a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b69a4:	f108 0201 	add.w	r2, r8, #1
   b69a8:	9217      	str	r2, [sp, #92]	; 0x5c
   b69aa:	f898 2001 	ldrb.w	r2, [r8, #1]
   b69ae:	2a2b      	cmp	r2, #43	; 0x2b
   b69b0:	d075      	beq.n	b6a9e <_strtod_l+0x286>
   b69b2:	2a2d      	cmp	r2, #45	; 0x2d
   b69b4:	d07b      	beq.n	b6aae <_strtod_l+0x296>
   b69b6:	f04f 0c00 	mov.w	ip, #0
   b69ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b69be:	2909      	cmp	r1, #9
   b69c0:	f240 8082 	bls.w	b6ac8 <_strtod_l+0x2b0>
   b69c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b69c8:	2600      	movs	r6, #0
   b69ca:	e09d      	b.n	b6b08 <_strtod_l+0x2f0>
   b69cc:	2300      	movs	r3, #0
   b69ce:	e7c4      	b.n	b695a <_strtod_l+0x142>
   b69d0:	2f08      	cmp	r7, #8
   b69d2:	bfd8      	it	le
   b69d4:	9907      	ldrle	r1, [sp, #28]
   b69d6:	f100 0001 	add.w	r0, r0, #1
   b69da:	bfda      	itte	le
   b69dc:	fb02 3301 	mlale	r3, r2, r1, r3
   b69e0:	9307      	strle	r3, [sp, #28]
   b69e2:	fb02 3909 	mlagt	r9, r2, r9, r3
   b69e6:	3701      	adds	r7, #1
   b69e8:	9017      	str	r0, [sp, #92]	; 0x5c
   b69ea:	e7bf      	b.n	b696c <_strtod_l+0x154>
   b69ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b69ee:	195a      	adds	r2, r3, r5
   b69f0:	9217      	str	r2, [sp, #92]	; 0x5c
   b69f2:	5d5a      	ldrb	r2, [r3, r5]
   b69f4:	2f00      	cmp	r7, #0
   b69f6:	d037      	beq.n	b6a68 <_strtod_l+0x250>
   b69f8:	9005      	str	r0, [sp, #20]
   b69fa:	463d      	mov	r5, r7
   b69fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b6a00:	2b09      	cmp	r3, #9
   b6a02:	d912      	bls.n	b6a2a <_strtod_l+0x212>
   b6a04:	2301      	movs	r3, #1
   b6a06:	e7c2      	b.n	b698e <_strtod_l+0x176>
   b6a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6a0a:	1c5a      	adds	r2, r3, #1
   b6a0c:	9217      	str	r2, [sp, #92]	; 0x5c
   b6a0e:	785a      	ldrb	r2, [r3, #1]
   b6a10:	3001      	adds	r0, #1
   b6a12:	2a30      	cmp	r2, #48	; 0x30
   b6a14:	d0f8      	beq.n	b6a08 <_strtod_l+0x1f0>
   b6a16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b6a1a:	2b08      	cmp	r3, #8
   b6a1c:	f200 84d9 	bhi.w	b73d2 <_strtod_l+0xbba>
   b6a20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6a22:	9005      	str	r0, [sp, #20]
   b6a24:	2000      	movs	r0, #0
   b6a26:	9308      	str	r3, [sp, #32]
   b6a28:	4605      	mov	r5, r0
   b6a2a:	3a30      	subs	r2, #48	; 0x30
   b6a2c:	f100 0301 	add.w	r3, r0, #1
   b6a30:	d014      	beq.n	b6a5c <_strtod_l+0x244>
   b6a32:	9905      	ldr	r1, [sp, #20]
   b6a34:	4419      	add	r1, r3
   b6a36:	9105      	str	r1, [sp, #20]
   b6a38:	462b      	mov	r3, r5
   b6a3a:	eb00 0e05 	add.w	lr, r0, r5
   b6a3e:	210a      	movs	r1, #10
   b6a40:	4573      	cmp	r3, lr
   b6a42:	d113      	bne.n	b6a6c <_strtod_l+0x254>
   b6a44:	182b      	adds	r3, r5, r0
   b6a46:	2b08      	cmp	r3, #8
   b6a48:	f105 0501 	add.w	r5, r5, #1
   b6a4c:	4405      	add	r5, r0
   b6a4e:	dc1c      	bgt.n	b6a8a <_strtod_l+0x272>
   b6a50:	9907      	ldr	r1, [sp, #28]
   b6a52:	230a      	movs	r3, #10
   b6a54:	fb03 2301 	mla	r3, r3, r1, r2
   b6a58:	9307      	str	r3, [sp, #28]
   b6a5a:	2300      	movs	r3, #0
   b6a5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b6a5e:	1c51      	adds	r1, r2, #1
   b6a60:	9117      	str	r1, [sp, #92]	; 0x5c
   b6a62:	7852      	ldrb	r2, [r2, #1]
   b6a64:	4618      	mov	r0, r3
   b6a66:	e7c9      	b.n	b69fc <_strtod_l+0x1e4>
   b6a68:	4638      	mov	r0, r7
   b6a6a:	e7d2      	b.n	b6a12 <_strtod_l+0x1fa>
   b6a6c:	2b08      	cmp	r3, #8
   b6a6e:	dc04      	bgt.n	b6a7a <_strtod_l+0x262>
   b6a70:	9e07      	ldr	r6, [sp, #28]
   b6a72:	434e      	muls	r6, r1
   b6a74:	9607      	str	r6, [sp, #28]
   b6a76:	3301      	adds	r3, #1
   b6a78:	e7e2      	b.n	b6a40 <_strtod_l+0x228>
   b6a7a:	f103 0c01 	add.w	ip, r3, #1
   b6a7e:	f1bc 0f10 	cmp.w	ip, #16
   b6a82:	bfd8      	it	le
   b6a84:	fb01 f909 	mulle.w	r9, r1, r9
   b6a88:	e7f5      	b.n	b6a76 <_strtod_l+0x25e>
   b6a8a:	2d10      	cmp	r5, #16
   b6a8c:	bfdc      	itt	le
   b6a8e:	230a      	movle	r3, #10
   b6a90:	fb03 2909 	mlale	r9, r3, r9, r2
   b6a94:	e7e1      	b.n	b6a5a <_strtod_l+0x242>
   b6a96:	2300      	movs	r3, #0
   b6a98:	9305      	str	r3, [sp, #20]
   b6a9a:	2301      	movs	r3, #1
   b6a9c:	e77c      	b.n	b6998 <_strtod_l+0x180>
   b6a9e:	f04f 0c00 	mov.w	ip, #0
   b6aa2:	f108 0202 	add.w	r2, r8, #2
   b6aa6:	9217      	str	r2, [sp, #92]	; 0x5c
   b6aa8:	f898 2002 	ldrb.w	r2, [r8, #2]
   b6aac:	e785      	b.n	b69ba <_strtod_l+0x1a2>
   b6aae:	f04f 0c01 	mov.w	ip, #1
   b6ab2:	e7f6      	b.n	b6aa2 <_strtod_l+0x28a>
   b6ab4:	000b8e20 	.word	0x000b8e20
   b6ab8:	000b8bb4 	.word	0x000b8bb4
   b6abc:	7ff00000 	.word	0x7ff00000
   b6ac0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b6ac2:	1c51      	adds	r1, r2, #1
   b6ac4:	9117      	str	r1, [sp, #92]	; 0x5c
   b6ac6:	7852      	ldrb	r2, [r2, #1]
   b6ac8:	2a30      	cmp	r2, #48	; 0x30
   b6aca:	d0f9      	beq.n	b6ac0 <_strtod_l+0x2a8>
   b6acc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b6ad0:	2908      	cmp	r1, #8
   b6ad2:	f63f af79 	bhi.w	b69c8 <_strtod_l+0x1b0>
   b6ad6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b6ada:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b6adc:	9206      	str	r2, [sp, #24]
   b6ade:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b6ae0:	1c51      	adds	r1, r2, #1
   b6ae2:	9117      	str	r1, [sp, #92]	; 0x5c
   b6ae4:	7852      	ldrb	r2, [r2, #1]
   b6ae6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b6aea:	2e09      	cmp	r6, #9
   b6aec:	d937      	bls.n	b6b5e <_strtod_l+0x346>
   b6aee:	9e06      	ldr	r6, [sp, #24]
   b6af0:	1b89      	subs	r1, r1, r6
   b6af2:	2908      	cmp	r1, #8
   b6af4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b6af8:	dc02      	bgt.n	b6b00 <_strtod_l+0x2e8>
   b6afa:	4576      	cmp	r6, lr
   b6afc:	bfa8      	it	ge
   b6afe:	4676      	movge	r6, lr
   b6b00:	f1bc 0f00 	cmp.w	ip, #0
   b6b04:	d000      	beq.n	b6b08 <_strtod_l+0x2f0>
   b6b06:	4276      	negs	r6, r6
   b6b08:	2d00      	cmp	r5, #0
   b6b0a:	d14d      	bne.n	b6ba8 <_strtod_l+0x390>
   b6b0c:	9904      	ldr	r1, [sp, #16]
   b6b0e:	4301      	orrs	r1, r0
   b6b10:	f47f aec6 	bne.w	b68a0 <_strtod_l+0x88>
   b6b14:	2b00      	cmp	r3, #0
   b6b16:	f47f aee1 	bne.w	b68dc <_strtod_l+0xc4>
   b6b1a:	2a69      	cmp	r2, #105	; 0x69
   b6b1c:	d027      	beq.n	b6b6e <_strtod_l+0x356>
   b6b1e:	dc24      	bgt.n	b6b6a <_strtod_l+0x352>
   b6b20:	2a49      	cmp	r2, #73	; 0x49
   b6b22:	d024      	beq.n	b6b6e <_strtod_l+0x356>
   b6b24:	2a4e      	cmp	r2, #78	; 0x4e
   b6b26:	f47f aed9 	bne.w	b68dc <_strtod_l+0xc4>
   b6b2a:	499f      	ldr	r1, [pc, #636]	; (b6da8 <_strtod_l+0x590>)
   b6b2c:	a817      	add	r0, sp, #92	; 0x5c
   b6b2e:	f001 f88f 	bl	b7c50 <__match>
   b6b32:	2800      	cmp	r0, #0
   b6b34:	f43f aed2 	beq.w	b68dc <_strtod_l+0xc4>
   b6b38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6b3a:	781b      	ldrb	r3, [r3, #0]
   b6b3c:	2b28      	cmp	r3, #40	; 0x28
   b6b3e:	d12d      	bne.n	b6b9c <_strtod_l+0x384>
   b6b40:	499a      	ldr	r1, [pc, #616]	; (b6dac <_strtod_l+0x594>)
   b6b42:	aa1a      	add	r2, sp, #104	; 0x68
   b6b44:	a817      	add	r0, sp, #92	; 0x5c
   b6b46:	f001 f897 	bl	b7c78 <__hexnan>
   b6b4a:	2805      	cmp	r0, #5
   b6b4c:	d126      	bne.n	b6b9c <_strtod_l+0x384>
   b6b4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b6b50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b6b54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b6b58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b6b5c:	e6a0      	b.n	b68a0 <_strtod_l+0x88>
   b6b5e:	210a      	movs	r1, #10
   b6b60:	fb01 2e0e 	mla	lr, r1, lr, r2
   b6b64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b6b68:	e7b9      	b.n	b6ade <_strtod_l+0x2c6>
   b6b6a:	2a6e      	cmp	r2, #110	; 0x6e
   b6b6c:	e7db      	b.n	b6b26 <_strtod_l+0x30e>
   b6b6e:	4990      	ldr	r1, [pc, #576]	; (b6db0 <_strtod_l+0x598>)
   b6b70:	a817      	add	r0, sp, #92	; 0x5c
   b6b72:	f001 f86d 	bl	b7c50 <__match>
   b6b76:	2800      	cmp	r0, #0
   b6b78:	f43f aeb0 	beq.w	b68dc <_strtod_l+0xc4>
   b6b7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6b7e:	498d      	ldr	r1, [pc, #564]	; (b6db4 <_strtod_l+0x59c>)
   b6b80:	3b01      	subs	r3, #1
   b6b82:	a817      	add	r0, sp, #92	; 0x5c
   b6b84:	9317      	str	r3, [sp, #92]	; 0x5c
   b6b86:	f001 f863 	bl	b7c50 <__match>
   b6b8a:	b910      	cbnz	r0, b6b92 <_strtod_l+0x37a>
   b6b8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6b8e:	3301      	adds	r3, #1
   b6b90:	9317      	str	r3, [sp, #92]	; 0x5c
   b6b92:	f8df b230 	ldr.w	fp, [pc, #560]	; b6dc4 <_strtod_l+0x5ac>
   b6b96:	f04f 0a00 	mov.w	sl, #0
   b6b9a:	e681      	b.n	b68a0 <_strtod_l+0x88>
   b6b9c:	4886      	ldr	r0, [pc, #536]	; (b6db8 <_strtod_l+0x5a0>)
   b6b9e:	f001 fdef 	bl	b8780 <nan>
   b6ba2:	ec5b ab10 	vmov	sl, fp, d0
   b6ba6:	e67b      	b.n	b68a0 <_strtod_l+0x88>
   b6ba8:	9b05      	ldr	r3, [sp, #20]
   b6baa:	9807      	ldr	r0, [sp, #28]
   b6bac:	1af3      	subs	r3, r6, r3
   b6bae:	2f00      	cmp	r7, #0
   b6bb0:	bf08      	it	eq
   b6bb2:	462f      	moveq	r7, r5
   b6bb4:	2d10      	cmp	r5, #16
   b6bb6:	9306      	str	r3, [sp, #24]
   b6bb8:	46a8      	mov	r8, r5
   b6bba:	bfa8      	it	ge
   b6bbc:	f04f 0810 	movge.w	r8, #16
   b6bc0:	f7ff fa18 	bl	b5ff4 <__aeabi_ui2d>
   b6bc4:	2d09      	cmp	r5, #9
   b6bc6:	4682      	mov	sl, r0
   b6bc8:	468b      	mov	fp, r1
   b6bca:	dd13      	ble.n	b6bf4 <_strtod_l+0x3dc>
   b6bcc:	4b7b      	ldr	r3, [pc, #492]	; (b6dbc <_strtod_l+0x5a4>)
   b6bce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b6bd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b6bd6:	f7ff fa87 	bl	b60e8 <__aeabi_dmul>
   b6bda:	4682      	mov	sl, r0
   b6bdc:	4648      	mov	r0, r9
   b6bde:	468b      	mov	fp, r1
   b6be0:	f7ff fa08 	bl	b5ff4 <__aeabi_ui2d>
   b6be4:	4602      	mov	r2, r0
   b6be6:	460b      	mov	r3, r1
   b6be8:	4650      	mov	r0, sl
   b6bea:	4659      	mov	r1, fp
   b6bec:	f7ff f8c6 	bl	b5d7c <__adddf3>
   b6bf0:	4682      	mov	sl, r0
   b6bf2:	468b      	mov	fp, r1
   b6bf4:	2d0f      	cmp	r5, #15
   b6bf6:	dc38      	bgt.n	b6c6a <_strtod_l+0x452>
   b6bf8:	9b06      	ldr	r3, [sp, #24]
   b6bfa:	2b00      	cmp	r3, #0
   b6bfc:	f43f ae50 	beq.w	b68a0 <_strtod_l+0x88>
   b6c00:	dd24      	ble.n	b6c4c <_strtod_l+0x434>
   b6c02:	2b16      	cmp	r3, #22
   b6c04:	dc0b      	bgt.n	b6c1e <_strtod_l+0x406>
   b6c06:	496d      	ldr	r1, [pc, #436]	; (b6dbc <_strtod_l+0x5a4>)
   b6c08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b6c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6c10:	4652      	mov	r2, sl
   b6c12:	465b      	mov	r3, fp
   b6c14:	f7ff fa68 	bl	b60e8 <__aeabi_dmul>
   b6c18:	4682      	mov	sl, r0
   b6c1a:	468b      	mov	fp, r1
   b6c1c:	e640      	b.n	b68a0 <_strtod_l+0x88>
   b6c1e:	9a06      	ldr	r2, [sp, #24]
   b6c20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b6c24:	4293      	cmp	r3, r2
   b6c26:	db20      	blt.n	b6c6a <_strtod_l+0x452>
   b6c28:	4c64      	ldr	r4, [pc, #400]	; (b6dbc <_strtod_l+0x5a4>)
   b6c2a:	f1c5 050f 	rsb	r5, r5, #15
   b6c2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b6c32:	4652      	mov	r2, sl
   b6c34:	465b      	mov	r3, fp
   b6c36:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6c3a:	f7ff fa55 	bl	b60e8 <__aeabi_dmul>
   b6c3e:	9b06      	ldr	r3, [sp, #24]
   b6c40:	1b5d      	subs	r5, r3, r5
   b6c42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b6c46:	e9d4 2300 	ldrd	r2, r3, [r4]
   b6c4a:	e7e3      	b.n	b6c14 <_strtod_l+0x3fc>
   b6c4c:	9b06      	ldr	r3, [sp, #24]
   b6c4e:	3316      	adds	r3, #22
   b6c50:	db0b      	blt.n	b6c6a <_strtod_l+0x452>
   b6c52:	9b05      	ldr	r3, [sp, #20]
   b6c54:	1b9e      	subs	r6, r3, r6
   b6c56:	4b59      	ldr	r3, [pc, #356]	; (b6dbc <_strtod_l+0x5a4>)
   b6c58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b6c5c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b6c60:	4650      	mov	r0, sl
   b6c62:	4659      	mov	r1, fp
   b6c64:	f7ff fb6a 	bl	b633c <__aeabi_ddiv>
   b6c68:	e7d6      	b.n	b6c18 <_strtod_l+0x400>
   b6c6a:	9b06      	ldr	r3, [sp, #24]
   b6c6c:	eba5 0808 	sub.w	r8, r5, r8
   b6c70:	4498      	add	r8, r3
   b6c72:	f1b8 0f00 	cmp.w	r8, #0
   b6c76:	dd74      	ble.n	b6d62 <_strtod_l+0x54a>
   b6c78:	f018 030f 	ands.w	r3, r8, #15
   b6c7c:	d00a      	beq.n	b6c94 <_strtod_l+0x47c>
   b6c7e:	494f      	ldr	r1, [pc, #316]	; (b6dbc <_strtod_l+0x5a4>)
   b6c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b6c84:	4652      	mov	r2, sl
   b6c86:	465b      	mov	r3, fp
   b6c88:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6c8c:	f7ff fa2c 	bl	b60e8 <__aeabi_dmul>
   b6c90:	4682      	mov	sl, r0
   b6c92:	468b      	mov	fp, r1
   b6c94:	f038 080f 	bics.w	r8, r8, #15
   b6c98:	d04f      	beq.n	b6d3a <_strtod_l+0x522>
   b6c9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b6c9e:	dd22      	ble.n	b6ce6 <_strtod_l+0x4ce>
   b6ca0:	2500      	movs	r5, #0
   b6ca2:	462e      	mov	r6, r5
   b6ca4:	9507      	str	r5, [sp, #28]
   b6ca6:	9505      	str	r5, [sp, #20]
   b6ca8:	2322      	movs	r3, #34	; 0x22
   b6caa:	f8df b118 	ldr.w	fp, [pc, #280]	; b6dc4 <_strtod_l+0x5ac>
   b6cae:	6023      	str	r3, [r4, #0]
   b6cb0:	f04f 0a00 	mov.w	sl, #0
   b6cb4:	9b07      	ldr	r3, [sp, #28]
   b6cb6:	2b00      	cmp	r3, #0
   b6cb8:	f43f adf2 	beq.w	b68a0 <_strtod_l+0x88>
   b6cbc:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6cbe:	4620      	mov	r0, r4
   b6cc0:	f001 f8cc 	bl	b7e5c <_Bfree>
   b6cc4:	9905      	ldr	r1, [sp, #20]
   b6cc6:	4620      	mov	r0, r4
   b6cc8:	f001 f8c8 	bl	b7e5c <_Bfree>
   b6ccc:	4631      	mov	r1, r6
   b6cce:	4620      	mov	r0, r4
   b6cd0:	f001 f8c4 	bl	b7e5c <_Bfree>
   b6cd4:	9907      	ldr	r1, [sp, #28]
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	f001 f8c0 	bl	b7e5c <_Bfree>
   b6cdc:	4629      	mov	r1, r5
   b6cde:	4620      	mov	r0, r4
   b6ce0:	f001 f8bc 	bl	b7e5c <_Bfree>
   b6ce4:	e5dc      	b.n	b68a0 <_strtod_l+0x88>
   b6ce6:	4b36      	ldr	r3, [pc, #216]	; (b6dc0 <_strtod_l+0x5a8>)
   b6ce8:	9304      	str	r3, [sp, #16]
   b6cea:	2300      	movs	r3, #0
   b6cec:	ea4f 1828 	mov.w	r8, r8, asr #4
   b6cf0:	4650      	mov	r0, sl
   b6cf2:	4659      	mov	r1, fp
   b6cf4:	4699      	mov	r9, r3
   b6cf6:	f1b8 0f01 	cmp.w	r8, #1
   b6cfa:	dc21      	bgt.n	b6d40 <_strtod_l+0x528>
   b6cfc:	b10b      	cbz	r3, b6d02 <_strtod_l+0x4ea>
   b6cfe:	4682      	mov	sl, r0
   b6d00:	468b      	mov	fp, r1
   b6d02:	4b2f      	ldr	r3, [pc, #188]	; (b6dc0 <_strtod_l+0x5a8>)
   b6d04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b6d08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b6d0c:	4652      	mov	r2, sl
   b6d0e:	465b      	mov	r3, fp
   b6d10:	e9d9 0100 	ldrd	r0, r1, [r9]
   b6d14:	f7ff f9e8 	bl	b60e8 <__aeabi_dmul>
   b6d18:	4b2a      	ldr	r3, [pc, #168]	; (b6dc4 <_strtod_l+0x5ac>)
   b6d1a:	460a      	mov	r2, r1
   b6d1c:	400b      	ands	r3, r1
   b6d1e:	492a      	ldr	r1, [pc, #168]	; (b6dc8 <_strtod_l+0x5b0>)
   b6d20:	428b      	cmp	r3, r1
   b6d22:	4682      	mov	sl, r0
   b6d24:	d8bc      	bhi.n	b6ca0 <_strtod_l+0x488>
   b6d26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b6d2a:	428b      	cmp	r3, r1
   b6d2c:	bf86      	itte	hi
   b6d2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b6dcc <_strtod_l+0x5b4>
   b6d32:	f04f 3aff 	movhi.w	sl, #4294967295
   b6d36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b6d3a:	2300      	movs	r3, #0
   b6d3c:	9304      	str	r3, [sp, #16]
   b6d3e:	e084      	b.n	b6e4a <_strtod_l+0x632>
   b6d40:	f018 0f01 	tst.w	r8, #1
   b6d44:	d005      	beq.n	b6d52 <_strtod_l+0x53a>
   b6d46:	9b04      	ldr	r3, [sp, #16]
   b6d48:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d4c:	f7ff f9cc 	bl	b60e8 <__aeabi_dmul>
   b6d50:	2301      	movs	r3, #1
   b6d52:	9a04      	ldr	r2, [sp, #16]
   b6d54:	3208      	adds	r2, #8
   b6d56:	f109 0901 	add.w	r9, r9, #1
   b6d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b6d5e:	9204      	str	r2, [sp, #16]
   b6d60:	e7c9      	b.n	b6cf6 <_strtod_l+0x4de>
   b6d62:	d0ea      	beq.n	b6d3a <_strtod_l+0x522>
   b6d64:	f1c8 0800 	rsb	r8, r8, #0
   b6d68:	f018 020f 	ands.w	r2, r8, #15
   b6d6c:	d00a      	beq.n	b6d84 <_strtod_l+0x56c>
   b6d6e:	4b13      	ldr	r3, [pc, #76]	; (b6dbc <_strtod_l+0x5a4>)
   b6d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b6d74:	4650      	mov	r0, sl
   b6d76:	4659      	mov	r1, fp
   b6d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d7c:	f7ff fade 	bl	b633c <__aeabi_ddiv>
   b6d80:	4682      	mov	sl, r0
   b6d82:	468b      	mov	fp, r1
   b6d84:	ea5f 1828 	movs.w	r8, r8, asr #4
   b6d88:	d0d7      	beq.n	b6d3a <_strtod_l+0x522>
   b6d8a:	f1b8 0f1f 	cmp.w	r8, #31
   b6d8e:	dd1f      	ble.n	b6dd0 <_strtod_l+0x5b8>
   b6d90:	2500      	movs	r5, #0
   b6d92:	462e      	mov	r6, r5
   b6d94:	9507      	str	r5, [sp, #28]
   b6d96:	9505      	str	r5, [sp, #20]
   b6d98:	2322      	movs	r3, #34	; 0x22
   b6d9a:	f04f 0a00 	mov.w	sl, #0
   b6d9e:	f04f 0b00 	mov.w	fp, #0
   b6da2:	6023      	str	r3, [r4, #0]
   b6da4:	e786      	b.n	b6cb4 <_strtod_l+0x49c>
   b6da6:	bf00      	nop
   b6da8:	000b8bae 	.word	0x000b8bae
   b6dac:	000b8bc8 	.word	0x000b8bc8
   b6db0:	000b8ba5 	.word	0x000b8ba5
   b6db4:	000b8ba8 	.word	0x000b8ba8
   b6db8:	000b8889 	.word	0x000b8889
   b6dbc:	000b8ee0 	.word	0x000b8ee0
   b6dc0:	000b8eb8 	.word	0x000b8eb8
   b6dc4:	7ff00000 	.word	0x7ff00000
   b6dc8:	7ca00000 	.word	0x7ca00000
   b6dcc:	7fefffff 	.word	0x7fefffff
   b6dd0:	f018 0310 	ands.w	r3, r8, #16
   b6dd4:	bf18      	it	ne
   b6dd6:	236a      	movne	r3, #106	; 0x6a
   b6dd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b7188 <_strtod_l+0x970>
   b6ddc:	9304      	str	r3, [sp, #16]
   b6dde:	4650      	mov	r0, sl
   b6de0:	4659      	mov	r1, fp
   b6de2:	2300      	movs	r3, #0
   b6de4:	f018 0f01 	tst.w	r8, #1
   b6de8:	d004      	beq.n	b6df4 <_strtod_l+0x5dc>
   b6dea:	e9d9 2300 	ldrd	r2, r3, [r9]
   b6dee:	f7ff f97b 	bl	b60e8 <__aeabi_dmul>
   b6df2:	2301      	movs	r3, #1
   b6df4:	ea5f 0868 	movs.w	r8, r8, asr #1
   b6df8:	f109 0908 	add.w	r9, r9, #8
   b6dfc:	d1f2      	bne.n	b6de4 <_strtod_l+0x5cc>
   b6dfe:	b10b      	cbz	r3, b6e04 <_strtod_l+0x5ec>
   b6e00:	4682      	mov	sl, r0
   b6e02:	468b      	mov	fp, r1
   b6e04:	9b04      	ldr	r3, [sp, #16]
   b6e06:	b1c3      	cbz	r3, b6e3a <_strtod_l+0x622>
   b6e08:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b6e0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b6e10:	2b00      	cmp	r3, #0
   b6e12:	4659      	mov	r1, fp
   b6e14:	dd11      	ble.n	b6e3a <_strtod_l+0x622>
   b6e16:	2b1f      	cmp	r3, #31
   b6e18:	f340 8124 	ble.w	b7064 <_strtod_l+0x84c>
   b6e1c:	2b34      	cmp	r3, #52	; 0x34
   b6e1e:	bfde      	ittt	le
   b6e20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b6e24:	f04f 33ff 	movle.w	r3, #4294967295
   b6e28:	fa03 f202 	lslle.w	r2, r3, r2
   b6e2c:	f04f 0a00 	mov.w	sl, #0
   b6e30:	bfcc      	ite	gt
   b6e32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b6e36:	ea02 0b01 	andle.w	fp, r2, r1
   b6e3a:	2200      	movs	r2, #0
   b6e3c:	2300      	movs	r3, #0
   b6e3e:	4650      	mov	r0, sl
   b6e40:	4659      	mov	r1, fp
   b6e42:	f7ff fbb9 	bl	b65b8 <__aeabi_dcmpeq>
   b6e46:	2800      	cmp	r0, #0
   b6e48:	d1a2      	bne.n	b6d90 <_strtod_l+0x578>
   b6e4a:	9b07      	ldr	r3, [sp, #28]
   b6e4c:	9300      	str	r3, [sp, #0]
   b6e4e:	9908      	ldr	r1, [sp, #32]
   b6e50:	462b      	mov	r3, r5
   b6e52:	463a      	mov	r2, r7
   b6e54:	4620      	mov	r0, r4
   b6e56:	f001 f869 	bl	b7f2c <__s2b>
   b6e5a:	9007      	str	r0, [sp, #28]
   b6e5c:	2800      	cmp	r0, #0
   b6e5e:	f43f af1f 	beq.w	b6ca0 <_strtod_l+0x488>
   b6e62:	9b05      	ldr	r3, [sp, #20]
   b6e64:	1b9e      	subs	r6, r3, r6
   b6e66:	9b06      	ldr	r3, [sp, #24]
   b6e68:	2b00      	cmp	r3, #0
   b6e6a:	bfb4      	ite	lt
   b6e6c:	4633      	movlt	r3, r6
   b6e6e:	2300      	movge	r3, #0
   b6e70:	930c      	str	r3, [sp, #48]	; 0x30
   b6e72:	9b06      	ldr	r3, [sp, #24]
   b6e74:	2500      	movs	r5, #0
   b6e76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b6e7a:	9312      	str	r3, [sp, #72]	; 0x48
   b6e7c:	462e      	mov	r6, r5
   b6e7e:	9b07      	ldr	r3, [sp, #28]
   b6e80:	4620      	mov	r0, r4
   b6e82:	6859      	ldr	r1, [r3, #4]
   b6e84:	f000 ffaa 	bl	b7ddc <_Balloc>
   b6e88:	9005      	str	r0, [sp, #20]
   b6e8a:	2800      	cmp	r0, #0
   b6e8c:	f43f af0c 	beq.w	b6ca8 <_strtod_l+0x490>
   b6e90:	9b07      	ldr	r3, [sp, #28]
   b6e92:	691a      	ldr	r2, [r3, #16]
   b6e94:	3202      	adds	r2, #2
   b6e96:	f103 010c 	add.w	r1, r3, #12
   b6e9a:	0092      	lsls	r2, r2, #2
   b6e9c:	300c      	adds	r0, #12
   b6e9e:	f7ff fc08 	bl	b66b2 <memcpy>
   b6ea2:	ec4b ab10 	vmov	d0, sl, fp
   b6ea6:	aa1a      	add	r2, sp, #104	; 0x68
   b6ea8:	a919      	add	r1, sp, #100	; 0x64
   b6eaa:	4620      	mov	r0, r4
   b6eac:	f001 fb84 	bl	b85b8 <__d2b>
   b6eb0:	ec4b ab18 	vmov	d8, sl, fp
   b6eb4:	9018      	str	r0, [sp, #96]	; 0x60
   b6eb6:	2800      	cmp	r0, #0
   b6eb8:	f43f aef6 	beq.w	b6ca8 <_strtod_l+0x490>
   b6ebc:	2101      	movs	r1, #1
   b6ebe:	4620      	mov	r0, r4
   b6ec0:	f001 f8ce 	bl	b8060 <__i2b>
   b6ec4:	4606      	mov	r6, r0
   b6ec6:	2800      	cmp	r0, #0
   b6ec8:	f43f aeee 	beq.w	b6ca8 <_strtod_l+0x490>
   b6ecc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b6ece:	9904      	ldr	r1, [sp, #16]
   b6ed0:	2b00      	cmp	r3, #0
   b6ed2:	bfab      	itete	ge
   b6ed4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b6ed6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b6ed8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b6eda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b6ede:	bfac      	ite	ge
   b6ee0:	eb03 0902 	addge.w	r9, r3, r2
   b6ee4:	1ad7      	sublt	r7, r2, r3
   b6ee6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b6ee8:	eba3 0801 	sub.w	r8, r3, r1
   b6eec:	4490      	add	r8, r2
   b6eee:	4ba1      	ldr	r3, [pc, #644]	; (b7174 <_strtod_l+0x95c>)
   b6ef0:	f108 38ff 	add.w	r8, r8, #4294967295
   b6ef4:	4598      	cmp	r8, r3
   b6ef6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b6efa:	f280 80c7 	bge.w	b708c <_strtod_l+0x874>
   b6efe:	eba3 0308 	sub.w	r3, r3, r8
   b6f02:	2b1f      	cmp	r3, #31
   b6f04:	eba2 0203 	sub.w	r2, r2, r3
   b6f08:	f04f 0101 	mov.w	r1, #1
   b6f0c:	f300 80b1 	bgt.w	b7072 <_strtod_l+0x85a>
   b6f10:	fa01 f303 	lsl.w	r3, r1, r3
   b6f14:	930d      	str	r3, [sp, #52]	; 0x34
   b6f16:	2300      	movs	r3, #0
   b6f18:	9308      	str	r3, [sp, #32]
   b6f1a:	eb09 0802 	add.w	r8, r9, r2
   b6f1e:	9b04      	ldr	r3, [sp, #16]
   b6f20:	45c1      	cmp	r9, r8
   b6f22:	4417      	add	r7, r2
   b6f24:	441f      	add	r7, r3
   b6f26:	464b      	mov	r3, r9
   b6f28:	bfa8      	it	ge
   b6f2a:	4643      	movge	r3, r8
   b6f2c:	42bb      	cmp	r3, r7
   b6f2e:	bfa8      	it	ge
   b6f30:	463b      	movge	r3, r7
   b6f32:	2b00      	cmp	r3, #0
   b6f34:	bfc2      	ittt	gt
   b6f36:	eba8 0803 	subgt.w	r8, r8, r3
   b6f3a:	1aff      	subgt	r7, r7, r3
   b6f3c:	eba9 0903 	subgt.w	r9, r9, r3
   b6f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6f42:	2b00      	cmp	r3, #0
   b6f44:	dd17      	ble.n	b6f76 <_strtod_l+0x75e>
   b6f46:	4631      	mov	r1, r6
   b6f48:	461a      	mov	r2, r3
   b6f4a:	4620      	mov	r0, r4
   b6f4c:	f001 f948 	bl	b81e0 <__pow5mult>
   b6f50:	4606      	mov	r6, r0
   b6f52:	2800      	cmp	r0, #0
   b6f54:	f43f aea8 	beq.w	b6ca8 <_strtod_l+0x490>
   b6f58:	4601      	mov	r1, r0
   b6f5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b6f5c:	4620      	mov	r0, r4
   b6f5e:	f001 f895 	bl	b808c <__multiply>
   b6f62:	900b      	str	r0, [sp, #44]	; 0x2c
   b6f64:	2800      	cmp	r0, #0
   b6f66:	f43f ae9f 	beq.w	b6ca8 <_strtod_l+0x490>
   b6f6a:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6f6c:	4620      	mov	r0, r4
   b6f6e:	f000 ff75 	bl	b7e5c <_Bfree>
   b6f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6f74:	9318      	str	r3, [sp, #96]	; 0x60
   b6f76:	f1b8 0f00 	cmp.w	r8, #0
   b6f7a:	f300 808c 	bgt.w	b7096 <_strtod_l+0x87e>
   b6f7e:	9b06      	ldr	r3, [sp, #24]
   b6f80:	2b00      	cmp	r3, #0
   b6f82:	dd08      	ble.n	b6f96 <_strtod_l+0x77e>
   b6f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b6f86:	9905      	ldr	r1, [sp, #20]
   b6f88:	4620      	mov	r0, r4
   b6f8a:	f001 f929 	bl	b81e0 <__pow5mult>
   b6f8e:	9005      	str	r0, [sp, #20]
   b6f90:	2800      	cmp	r0, #0
   b6f92:	f43f ae89 	beq.w	b6ca8 <_strtod_l+0x490>
   b6f96:	2f00      	cmp	r7, #0
   b6f98:	dd08      	ble.n	b6fac <_strtod_l+0x794>
   b6f9a:	9905      	ldr	r1, [sp, #20]
   b6f9c:	463a      	mov	r2, r7
   b6f9e:	4620      	mov	r0, r4
   b6fa0:	f001 f978 	bl	b8294 <__lshift>
   b6fa4:	9005      	str	r0, [sp, #20]
   b6fa6:	2800      	cmp	r0, #0
   b6fa8:	f43f ae7e 	beq.w	b6ca8 <_strtod_l+0x490>
   b6fac:	f1b9 0f00 	cmp.w	r9, #0
   b6fb0:	dd08      	ble.n	b6fc4 <_strtod_l+0x7ac>
   b6fb2:	4631      	mov	r1, r6
   b6fb4:	464a      	mov	r2, r9
   b6fb6:	4620      	mov	r0, r4
   b6fb8:	f001 f96c 	bl	b8294 <__lshift>
   b6fbc:	4606      	mov	r6, r0
   b6fbe:	2800      	cmp	r0, #0
   b6fc0:	f43f ae72 	beq.w	b6ca8 <_strtod_l+0x490>
   b6fc4:	9a05      	ldr	r2, [sp, #20]
   b6fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6fc8:	4620      	mov	r0, r4
   b6fca:	f001 f9ef 	bl	b83ac <__mdiff>
   b6fce:	4605      	mov	r5, r0
   b6fd0:	2800      	cmp	r0, #0
   b6fd2:	f43f ae69 	beq.w	b6ca8 <_strtod_l+0x490>
   b6fd6:	68c3      	ldr	r3, [r0, #12]
   b6fd8:	930b      	str	r3, [sp, #44]	; 0x2c
   b6fda:	2300      	movs	r3, #0
   b6fdc:	60c3      	str	r3, [r0, #12]
   b6fde:	4631      	mov	r1, r6
   b6fe0:	f001 f9c8 	bl	b8374 <__mcmp>
   b6fe4:	2800      	cmp	r0, #0
   b6fe6:	da60      	bge.n	b70aa <_strtod_l+0x892>
   b6fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6fea:	ea53 030a 	orrs.w	r3, r3, sl
   b6fee:	f040 8082 	bne.w	b70f6 <_strtod_l+0x8de>
   b6ff2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b6ff6:	2b00      	cmp	r3, #0
   b6ff8:	d17d      	bne.n	b70f6 <_strtod_l+0x8de>
   b6ffa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b6ffe:	0d1b      	lsrs	r3, r3, #20
   b7000:	051b      	lsls	r3, r3, #20
   b7002:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b7006:	d976      	bls.n	b70f6 <_strtod_l+0x8de>
   b7008:	696b      	ldr	r3, [r5, #20]
   b700a:	b913      	cbnz	r3, b7012 <_strtod_l+0x7fa>
   b700c:	692b      	ldr	r3, [r5, #16]
   b700e:	2b01      	cmp	r3, #1
   b7010:	dd71      	ble.n	b70f6 <_strtod_l+0x8de>
   b7012:	4629      	mov	r1, r5
   b7014:	2201      	movs	r2, #1
   b7016:	4620      	mov	r0, r4
   b7018:	f001 f93c 	bl	b8294 <__lshift>
   b701c:	4631      	mov	r1, r6
   b701e:	4605      	mov	r5, r0
   b7020:	f001 f9a8 	bl	b8374 <__mcmp>
   b7024:	2800      	cmp	r0, #0
   b7026:	dd66      	ble.n	b70f6 <_strtod_l+0x8de>
   b7028:	9904      	ldr	r1, [sp, #16]
   b702a:	4a53      	ldr	r2, [pc, #332]	; (b7178 <_strtod_l+0x960>)
   b702c:	465b      	mov	r3, fp
   b702e:	2900      	cmp	r1, #0
   b7030:	f000 8081 	beq.w	b7136 <_strtod_l+0x91e>
   b7034:	ea02 010b 	and.w	r1, r2, fp
   b7038:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b703c:	dc7b      	bgt.n	b7136 <_strtod_l+0x91e>
   b703e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b7042:	f77f aea9 	ble.w	b6d98 <_strtod_l+0x580>
   b7046:	4b4d      	ldr	r3, [pc, #308]	; (b717c <_strtod_l+0x964>)
   b7048:	4650      	mov	r0, sl
   b704a:	4659      	mov	r1, fp
   b704c:	2200      	movs	r2, #0
   b704e:	f7ff f84b 	bl	b60e8 <__aeabi_dmul>
   b7052:	460b      	mov	r3, r1
   b7054:	4303      	orrs	r3, r0
   b7056:	bf08      	it	eq
   b7058:	2322      	moveq	r3, #34	; 0x22
   b705a:	4682      	mov	sl, r0
   b705c:	468b      	mov	fp, r1
   b705e:	bf08      	it	eq
   b7060:	6023      	streq	r3, [r4, #0]
   b7062:	e62b      	b.n	b6cbc <_strtod_l+0x4a4>
   b7064:	f04f 32ff 	mov.w	r2, #4294967295
   b7068:	fa02 f303 	lsl.w	r3, r2, r3
   b706c:	ea03 0a0a 	and.w	sl, r3, sl
   b7070:	e6e3      	b.n	b6e3a <_strtod_l+0x622>
   b7072:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b7076:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b707a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b707e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b7082:	fa01 f308 	lsl.w	r3, r1, r8
   b7086:	9308      	str	r3, [sp, #32]
   b7088:	910d      	str	r1, [sp, #52]	; 0x34
   b708a:	e746      	b.n	b6f1a <_strtod_l+0x702>
   b708c:	2300      	movs	r3, #0
   b708e:	9308      	str	r3, [sp, #32]
   b7090:	2301      	movs	r3, #1
   b7092:	930d      	str	r3, [sp, #52]	; 0x34
   b7094:	e741      	b.n	b6f1a <_strtod_l+0x702>
   b7096:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7098:	4642      	mov	r2, r8
   b709a:	4620      	mov	r0, r4
   b709c:	f001 f8fa 	bl	b8294 <__lshift>
   b70a0:	9018      	str	r0, [sp, #96]	; 0x60
   b70a2:	2800      	cmp	r0, #0
   b70a4:	f47f af6b 	bne.w	b6f7e <_strtod_l+0x766>
   b70a8:	e5fe      	b.n	b6ca8 <_strtod_l+0x490>
   b70aa:	465f      	mov	r7, fp
   b70ac:	d16e      	bne.n	b718c <_strtod_l+0x974>
   b70ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b70b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b70b4:	b342      	cbz	r2, b7108 <_strtod_l+0x8f0>
   b70b6:	4a32      	ldr	r2, [pc, #200]	; (b7180 <_strtod_l+0x968>)
   b70b8:	4293      	cmp	r3, r2
   b70ba:	d128      	bne.n	b710e <_strtod_l+0x8f6>
   b70bc:	9b04      	ldr	r3, [sp, #16]
   b70be:	4651      	mov	r1, sl
   b70c0:	b1eb      	cbz	r3, b70fe <_strtod_l+0x8e6>
   b70c2:	4b2d      	ldr	r3, [pc, #180]	; (b7178 <_strtod_l+0x960>)
   b70c4:	403b      	ands	r3, r7
   b70c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b70ca:	f04f 32ff 	mov.w	r2, #4294967295
   b70ce:	d819      	bhi.n	b7104 <_strtod_l+0x8ec>
   b70d0:	0d1b      	lsrs	r3, r3, #20
   b70d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b70d6:	fa02 f303 	lsl.w	r3, r2, r3
   b70da:	4299      	cmp	r1, r3
   b70dc:	d117      	bne.n	b710e <_strtod_l+0x8f6>
   b70de:	4b29      	ldr	r3, [pc, #164]	; (b7184 <_strtod_l+0x96c>)
   b70e0:	429f      	cmp	r7, r3
   b70e2:	d102      	bne.n	b70ea <_strtod_l+0x8d2>
   b70e4:	3101      	adds	r1, #1
   b70e6:	f43f addf 	beq.w	b6ca8 <_strtod_l+0x490>
   b70ea:	4b23      	ldr	r3, [pc, #140]	; (b7178 <_strtod_l+0x960>)
   b70ec:	403b      	ands	r3, r7
   b70ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b70f2:	f04f 0a00 	mov.w	sl, #0
   b70f6:	9b04      	ldr	r3, [sp, #16]
   b70f8:	2b00      	cmp	r3, #0
   b70fa:	d1a4      	bne.n	b7046 <_strtod_l+0x82e>
   b70fc:	e5de      	b.n	b6cbc <_strtod_l+0x4a4>
   b70fe:	f04f 33ff 	mov.w	r3, #4294967295
   b7102:	e7ea      	b.n	b70da <_strtod_l+0x8c2>
   b7104:	4613      	mov	r3, r2
   b7106:	e7e8      	b.n	b70da <_strtod_l+0x8c2>
   b7108:	ea53 030a 	orrs.w	r3, r3, sl
   b710c:	d08c      	beq.n	b7028 <_strtod_l+0x810>
   b710e:	9b08      	ldr	r3, [sp, #32]
   b7110:	b1db      	cbz	r3, b714a <_strtod_l+0x932>
   b7112:	423b      	tst	r3, r7
   b7114:	d0ef      	beq.n	b70f6 <_strtod_l+0x8de>
   b7116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7118:	9a04      	ldr	r2, [sp, #16]
   b711a:	4650      	mov	r0, sl
   b711c:	4659      	mov	r1, fp
   b711e:	b1c3      	cbz	r3, b7152 <_strtod_l+0x93a>
   b7120:	f7ff fb5d 	bl	b67de <sulp>
   b7124:	4602      	mov	r2, r0
   b7126:	460b      	mov	r3, r1
   b7128:	ec51 0b18 	vmov	r0, r1, d8
   b712c:	f7fe fe26 	bl	b5d7c <__adddf3>
   b7130:	4682      	mov	sl, r0
   b7132:	468b      	mov	fp, r1
   b7134:	e7df      	b.n	b70f6 <_strtod_l+0x8de>
   b7136:	4013      	ands	r3, r2
   b7138:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b713c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b7140:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b7144:	f04f 3aff 	mov.w	sl, #4294967295
   b7148:	e7d5      	b.n	b70f6 <_strtod_l+0x8de>
   b714a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b714c:	ea13 0f0a 	tst.w	r3, sl
   b7150:	e7e0      	b.n	b7114 <_strtod_l+0x8fc>
   b7152:	f7ff fb44 	bl	b67de <sulp>
   b7156:	4602      	mov	r2, r0
   b7158:	460b      	mov	r3, r1
   b715a:	ec51 0b18 	vmov	r0, r1, d8
   b715e:	f7fe fe0b 	bl	b5d78 <__aeabi_dsub>
   b7162:	2200      	movs	r2, #0
   b7164:	2300      	movs	r3, #0
   b7166:	4682      	mov	sl, r0
   b7168:	468b      	mov	fp, r1
   b716a:	f7ff fa25 	bl	b65b8 <__aeabi_dcmpeq>
   b716e:	2800      	cmp	r0, #0
   b7170:	d0c1      	beq.n	b70f6 <_strtod_l+0x8de>
   b7172:	e611      	b.n	b6d98 <_strtod_l+0x580>
   b7174:	fffffc02 	.word	0xfffffc02
   b7178:	7ff00000 	.word	0x7ff00000
   b717c:	39500000 	.word	0x39500000
   b7180:	000fffff 	.word	0x000fffff
   b7184:	7fefffff 	.word	0x7fefffff
   b7188:	000b8be0 	.word	0x000b8be0
   b718c:	4631      	mov	r1, r6
   b718e:	4628      	mov	r0, r5
   b7190:	f001 fa6e 	bl	b8670 <__ratio>
   b7194:	ec59 8b10 	vmov	r8, r9, d0
   b7198:	ee10 0a10 	vmov	r0, s0
   b719c:	2200      	movs	r2, #0
   b719e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b71a2:	4649      	mov	r1, r9
   b71a4:	f7ff fa1c 	bl	b65e0 <__aeabi_dcmple>
   b71a8:	2800      	cmp	r0, #0
   b71aa:	d07a      	beq.n	b72a2 <_strtod_l+0xa8a>
   b71ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b71ae:	2b00      	cmp	r3, #0
   b71b0:	d04a      	beq.n	b7248 <_strtod_l+0xa30>
   b71b2:	4b95      	ldr	r3, [pc, #596]	; (b7408 <_strtod_l+0xbf0>)
   b71b4:	2200      	movs	r2, #0
   b71b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b71ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; b7408 <_strtod_l+0xbf0>
   b71be:	f04f 0800 	mov.w	r8, #0
   b71c2:	4b92      	ldr	r3, [pc, #584]	; (b740c <_strtod_l+0xbf4>)
   b71c4:	403b      	ands	r3, r7
   b71c6:	930d      	str	r3, [sp, #52]	; 0x34
   b71c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b71ca:	4b91      	ldr	r3, [pc, #580]	; (b7410 <_strtod_l+0xbf8>)
   b71cc:	429a      	cmp	r2, r3
   b71ce:	f040 80b0 	bne.w	b7332 <_strtod_l+0xb1a>
   b71d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b71d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b71da:	ec4b ab10 	vmov	d0, sl, fp
   b71de:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b71e2:	f001 f96d 	bl	b84c0 <__ulp>
   b71e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b71ea:	ec53 2b10 	vmov	r2, r3, d0
   b71ee:	f7fe ff7b 	bl	b60e8 <__aeabi_dmul>
   b71f2:	4652      	mov	r2, sl
   b71f4:	465b      	mov	r3, fp
   b71f6:	f7fe fdc1 	bl	b5d7c <__adddf3>
   b71fa:	460b      	mov	r3, r1
   b71fc:	4983      	ldr	r1, [pc, #524]	; (b740c <_strtod_l+0xbf4>)
   b71fe:	4a85      	ldr	r2, [pc, #532]	; (b7414 <_strtod_l+0xbfc>)
   b7200:	4019      	ands	r1, r3
   b7202:	4291      	cmp	r1, r2
   b7204:	4682      	mov	sl, r0
   b7206:	d960      	bls.n	b72ca <_strtod_l+0xab2>
   b7208:	ee18 3a90 	vmov	r3, s17
   b720c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b7210:	4293      	cmp	r3, r2
   b7212:	d104      	bne.n	b721e <_strtod_l+0xa06>
   b7214:	ee18 3a10 	vmov	r3, s16
   b7218:	3301      	adds	r3, #1
   b721a:	f43f ad45 	beq.w	b6ca8 <_strtod_l+0x490>
   b721e:	f8df b200 	ldr.w	fp, [pc, #512]	; b7420 <_strtod_l+0xc08>
   b7222:	f04f 3aff 	mov.w	sl, #4294967295
   b7226:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7228:	4620      	mov	r0, r4
   b722a:	f000 fe17 	bl	b7e5c <_Bfree>
   b722e:	9905      	ldr	r1, [sp, #20]
   b7230:	4620      	mov	r0, r4
   b7232:	f000 fe13 	bl	b7e5c <_Bfree>
   b7236:	4631      	mov	r1, r6
   b7238:	4620      	mov	r0, r4
   b723a:	f000 fe0f 	bl	b7e5c <_Bfree>
   b723e:	4629      	mov	r1, r5
   b7240:	4620      	mov	r0, r4
   b7242:	f000 fe0b 	bl	b7e5c <_Bfree>
   b7246:	e61a      	b.n	b6e7e <_strtod_l+0x666>
   b7248:	f1ba 0f00 	cmp.w	sl, #0
   b724c:	d11b      	bne.n	b7286 <_strtod_l+0xa6e>
   b724e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7252:	b9f3      	cbnz	r3, b7292 <_strtod_l+0xa7a>
   b7254:	4b6c      	ldr	r3, [pc, #432]	; (b7408 <_strtod_l+0xbf0>)
   b7256:	2200      	movs	r2, #0
   b7258:	4640      	mov	r0, r8
   b725a:	4649      	mov	r1, r9
   b725c:	f7ff f9b6 	bl	b65cc <__aeabi_dcmplt>
   b7260:	b9d0      	cbnz	r0, b7298 <_strtod_l+0xa80>
   b7262:	4640      	mov	r0, r8
   b7264:	4649      	mov	r1, r9
   b7266:	4b6c      	ldr	r3, [pc, #432]	; (b7418 <_strtod_l+0xc00>)
   b7268:	2200      	movs	r2, #0
   b726a:	f7fe ff3d 	bl	b60e8 <__aeabi_dmul>
   b726e:	4680      	mov	r8, r0
   b7270:	4689      	mov	r9, r1
   b7272:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b7276:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b727a:	9315      	str	r3, [sp, #84]	; 0x54
   b727c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b7280:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7284:	e79d      	b.n	b71c2 <_strtod_l+0x9aa>
   b7286:	f1ba 0f01 	cmp.w	sl, #1
   b728a:	d102      	bne.n	b7292 <_strtod_l+0xa7a>
   b728c:	2f00      	cmp	r7, #0
   b728e:	f43f ad83 	beq.w	b6d98 <_strtod_l+0x580>
   b7292:	4b62      	ldr	r3, [pc, #392]	; (b741c <_strtod_l+0xc04>)
   b7294:	2200      	movs	r2, #0
   b7296:	e78e      	b.n	b71b6 <_strtod_l+0x99e>
   b7298:	f8df 917c 	ldr.w	r9, [pc, #380]	; b7418 <_strtod_l+0xc00>
   b729c:	f04f 0800 	mov.w	r8, #0
   b72a0:	e7e7      	b.n	b7272 <_strtod_l+0xa5a>
   b72a2:	4b5d      	ldr	r3, [pc, #372]	; (b7418 <_strtod_l+0xc00>)
   b72a4:	4640      	mov	r0, r8
   b72a6:	4649      	mov	r1, r9
   b72a8:	2200      	movs	r2, #0
   b72aa:	f7fe ff1d 	bl	b60e8 <__aeabi_dmul>
   b72ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b72b0:	4680      	mov	r8, r0
   b72b2:	4689      	mov	r9, r1
   b72b4:	b933      	cbnz	r3, b72c4 <_strtod_l+0xaac>
   b72b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b72ba:	900e      	str	r0, [sp, #56]	; 0x38
   b72bc:	930f      	str	r3, [sp, #60]	; 0x3c
   b72be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b72c2:	e7dd      	b.n	b7280 <_strtod_l+0xa68>
   b72c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b72c8:	e7f9      	b.n	b72be <_strtod_l+0xaa6>
   b72ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b72ce:	9b04      	ldr	r3, [sp, #16]
   b72d0:	2b00      	cmp	r3, #0
   b72d2:	d1a8      	bne.n	b7226 <_strtod_l+0xa0e>
   b72d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b72d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b72da:	0d1b      	lsrs	r3, r3, #20
   b72dc:	051b      	lsls	r3, r3, #20
   b72de:	429a      	cmp	r2, r3
   b72e0:	d1a1      	bne.n	b7226 <_strtod_l+0xa0e>
   b72e2:	4640      	mov	r0, r8
   b72e4:	4649      	mov	r1, r9
   b72e6:	f001 fa61 	bl	b87ac <__aeabi_d2lz>
   b72ea:	f7fe fecf 	bl	b608c <__aeabi_l2d>
   b72ee:	4602      	mov	r2, r0
   b72f0:	460b      	mov	r3, r1
   b72f2:	4640      	mov	r0, r8
   b72f4:	4649      	mov	r1, r9
   b72f6:	f7fe fd3f 	bl	b5d78 <__aeabi_dsub>
   b72fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b72fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7300:	ea43 030a 	orr.w	r3, r3, sl
   b7304:	4313      	orrs	r3, r2
   b7306:	4680      	mov	r8, r0
   b7308:	4689      	mov	r9, r1
   b730a:	d055      	beq.n	b73b8 <_strtod_l+0xba0>
   b730c:	a336      	add	r3, pc, #216	; (adr r3, b73e8 <_strtod_l+0xbd0>)
   b730e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7312:	f7ff f95b 	bl	b65cc <__aeabi_dcmplt>
   b7316:	2800      	cmp	r0, #0
   b7318:	f47f acd0 	bne.w	b6cbc <_strtod_l+0x4a4>
   b731c:	a334      	add	r3, pc, #208	; (adr r3, b73f0 <_strtod_l+0xbd8>)
   b731e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7322:	4640      	mov	r0, r8
   b7324:	4649      	mov	r1, r9
   b7326:	f7ff f96f 	bl	b6608 <__aeabi_dcmpgt>
   b732a:	2800      	cmp	r0, #0
   b732c:	f43f af7b 	beq.w	b7226 <_strtod_l+0xa0e>
   b7330:	e4c4      	b.n	b6cbc <_strtod_l+0x4a4>
   b7332:	9b04      	ldr	r3, [sp, #16]
   b7334:	b333      	cbz	r3, b7384 <_strtod_l+0xb6c>
   b7336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7338:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b733c:	d822      	bhi.n	b7384 <_strtod_l+0xb6c>
   b733e:	a32e      	add	r3, pc, #184	; (adr r3, b73f8 <_strtod_l+0xbe0>)
   b7340:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7344:	4640      	mov	r0, r8
   b7346:	4649      	mov	r1, r9
   b7348:	f7ff f94a 	bl	b65e0 <__aeabi_dcmple>
   b734c:	b1a0      	cbz	r0, b7378 <_strtod_l+0xb60>
   b734e:	4649      	mov	r1, r9
   b7350:	4640      	mov	r0, r8
   b7352:	f7ff f963 	bl	b661c <__aeabi_d2uiz>
   b7356:	2801      	cmp	r0, #1
   b7358:	bf38      	it	cc
   b735a:	2001      	movcc	r0, #1
   b735c:	f7fe fe4a 	bl	b5ff4 <__aeabi_ui2d>
   b7360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7362:	4680      	mov	r8, r0
   b7364:	4689      	mov	r9, r1
   b7366:	bb23      	cbnz	r3, b73b2 <_strtod_l+0xb9a>
   b7368:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b736c:	9010      	str	r0, [sp, #64]	; 0x40
   b736e:	9311      	str	r3, [sp, #68]	; 0x44
   b7370:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b7374:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7378:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b737a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b737c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b7380:	1a9b      	subs	r3, r3, r2
   b7382:	9309      	str	r3, [sp, #36]	; 0x24
   b7384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7388:	eeb0 0a48 	vmov.f32	s0, s16
   b738c:	eef0 0a68 	vmov.f32	s1, s17
   b7390:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b7394:	f001 f894 	bl	b84c0 <__ulp>
   b7398:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b739c:	ec53 2b10 	vmov	r2, r3, d0
   b73a0:	f7fe fea2 	bl	b60e8 <__aeabi_dmul>
   b73a4:	ec53 2b18 	vmov	r2, r3, d8
   b73a8:	f7fe fce8 	bl	b5d7c <__adddf3>
   b73ac:	4682      	mov	sl, r0
   b73ae:	468b      	mov	fp, r1
   b73b0:	e78d      	b.n	b72ce <_strtod_l+0xab6>
   b73b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b73b6:	e7db      	b.n	b7370 <_strtod_l+0xb58>
   b73b8:	a311      	add	r3, pc, #68	; (adr r3, b7400 <_strtod_l+0xbe8>)
   b73ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73be:	f7ff f905 	bl	b65cc <__aeabi_dcmplt>
   b73c2:	e7b2      	b.n	b732a <_strtod_l+0xb12>
   b73c4:	2300      	movs	r3, #0
   b73c6:	930a      	str	r3, [sp, #40]	; 0x28
   b73c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b73ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b73cc:	6013      	str	r3, [r2, #0]
   b73ce:	f7ff ba6b 	b.w	b68a8 <_strtod_l+0x90>
   b73d2:	2a65      	cmp	r2, #101	; 0x65
   b73d4:	f43f ab5f 	beq.w	b6a96 <_strtod_l+0x27e>
   b73d8:	2a45      	cmp	r2, #69	; 0x45
   b73da:	f43f ab5c 	beq.w	b6a96 <_strtod_l+0x27e>
   b73de:	2301      	movs	r3, #1
   b73e0:	f7ff bb94 	b.w	b6b0c <_strtod_l+0x2f4>
   b73e4:	f3af 8000 	nop.w
   b73e8:	94a03595 	.word	0x94a03595
   b73ec:	3fdfffff 	.word	0x3fdfffff
   b73f0:	35afe535 	.word	0x35afe535
   b73f4:	3fe00000 	.word	0x3fe00000
   b73f8:	ffc00000 	.word	0xffc00000
   b73fc:	41dfffff 	.word	0x41dfffff
   b7400:	94a03595 	.word	0x94a03595
   b7404:	3fcfffff 	.word	0x3fcfffff
   b7408:	3ff00000 	.word	0x3ff00000
   b740c:	7ff00000 	.word	0x7ff00000
   b7410:	7fe00000 	.word	0x7fe00000
   b7414:	7c9fffff 	.word	0x7c9fffff
   b7418:	3fe00000 	.word	0x3fe00000
   b741c:	bff00000 	.word	0xbff00000
   b7420:	7fefffff 	.word	0x7fefffff

000b7424 <strtod>:
   b7424:	460a      	mov	r2, r1
   b7426:	4601      	mov	r1, r0
   b7428:	4802      	ldr	r0, [pc, #8]	; (b7434 <strtod+0x10>)
   b742a:	4b03      	ldr	r3, [pc, #12]	; (b7438 <strtod+0x14>)
   b742c:	6800      	ldr	r0, [r0, #0]
   b742e:	f7ff b9f3 	b.w	b6818 <_strtod_l>
   b7432:	bf00      	nop
   b7434:	2003cd58 	.word	0x2003cd58
   b7438:	2003cdc4 	.word	0x2003cdc4

000b743c <strtok>:
   b743c:	4b16      	ldr	r3, [pc, #88]	; (b7498 <strtok+0x5c>)
   b743e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7440:	681e      	ldr	r6, [r3, #0]
   b7442:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b7444:	4605      	mov	r5, r0
   b7446:	b9fc      	cbnz	r4, b7488 <strtok+0x4c>
   b7448:	2050      	movs	r0, #80	; 0x50
   b744a:	9101      	str	r1, [sp, #4]
   b744c:	f7fd fb06 	bl	b4a5c <malloc>
   b7450:	9901      	ldr	r1, [sp, #4]
   b7452:	65b0      	str	r0, [r6, #88]	; 0x58
   b7454:	4602      	mov	r2, r0
   b7456:	b920      	cbnz	r0, b7462 <strtok+0x26>
   b7458:	4b10      	ldr	r3, [pc, #64]	; (b749c <strtok+0x60>)
   b745a:	4811      	ldr	r0, [pc, #68]	; (b74a0 <strtok+0x64>)
   b745c:	2157      	movs	r1, #87	; 0x57
   b745e:	f7fd fb3d 	bl	b4adc <__assert_func>
   b7462:	e9c0 4400 	strd	r4, r4, [r0]
   b7466:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b746a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b746e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b7472:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b7476:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b747a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b747e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b7482:	6184      	str	r4, [r0, #24]
   b7484:	7704      	strb	r4, [r0, #28]
   b7486:	6244      	str	r4, [r0, #36]	; 0x24
   b7488:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b748a:	2301      	movs	r3, #1
   b748c:	4628      	mov	r0, r5
   b748e:	b002      	add	sp, #8
   b7490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7494:	f000 b806 	b.w	b74a4 <__strtok_r>
   b7498:	2003cd58 	.word	0x2003cd58
   b749c:	000b8b11 	.word	0x000b8b11
   b74a0:	000b8c08 	.word	0x000b8c08

000b74a4 <__strtok_r>:
   b74a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b74a6:	b908      	cbnz	r0, b74ac <__strtok_r+0x8>
   b74a8:	6810      	ldr	r0, [r2, #0]
   b74aa:	b188      	cbz	r0, b74d0 <__strtok_r+0x2c>
   b74ac:	4604      	mov	r4, r0
   b74ae:	4620      	mov	r0, r4
   b74b0:	f814 5b01 	ldrb.w	r5, [r4], #1
   b74b4:	460f      	mov	r7, r1
   b74b6:	f817 6b01 	ldrb.w	r6, [r7], #1
   b74ba:	b91e      	cbnz	r6, b74c4 <__strtok_r+0x20>
   b74bc:	b965      	cbnz	r5, b74d8 <__strtok_r+0x34>
   b74be:	6015      	str	r5, [r2, #0]
   b74c0:	4628      	mov	r0, r5
   b74c2:	e005      	b.n	b74d0 <__strtok_r+0x2c>
   b74c4:	42b5      	cmp	r5, r6
   b74c6:	d1f6      	bne.n	b74b6 <__strtok_r+0x12>
   b74c8:	2b00      	cmp	r3, #0
   b74ca:	d1f0      	bne.n	b74ae <__strtok_r+0xa>
   b74cc:	6014      	str	r4, [r2, #0]
   b74ce:	7003      	strb	r3, [r0, #0]
   b74d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b74d2:	461c      	mov	r4, r3
   b74d4:	e00c      	b.n	b74f0 <__strtok_r+0x4c>
   b74d6:	b915      	cbnz	r5, b74de <__strtok_r+0x3a>
   b74d8:	f814 3b01 	ldrb.w	r3, [r4], #1
   b74dc:	460e      	mov	r6, r1
   b74de:	f816 5b01 	ldrb.w	r5, [r6], #1
   b74e2:	42ab      	cmp	r3, r5
   b74e4:	d1f7      	bne.n	b74d6 <__strtok_r+0x32>
   b74e6:	2b00      	cmp	r3, #0
   b74e8:	d0f3      	beq.n	b74d2 <__strtok_r+0x2e>
   b74ea:	2300      	movs	r3, #0
   b74ec:	f804 3c01 	strb.w	r3, [r4, #-1]
   b74f0:	6014      	str	r4, [r2, #0]
   b74f2:	e7ed      	b.n	b74d0 <__strtok_r+0x2c>

000b74f4 <_strtol_l.constprop.0>:
   b74f4:	2b01      	cmp	r3, #1
   b74f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b74fa:	d001      	beq.n	b7500 <_strtol_l.constprop.0+0xc>
   b74fc:	2b24      	cmp	r3, #36	; 0x24
   b74fe:	d906      	bls.n	b750e <_strtol_l.constprop.0+0x1a>
   b7500:	f7fd fae4 	bl	b4acc <__errno>
   b7504:	2316      	movs	r3, #22
   b7506:	6003      	str	r3, [r0, #0]
   b7508:	2000      	movs	r0, #0
   b750a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b750e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b75f4 <_strtol_l.constprop.0+0x100>
   b7512:	460d      	mov	r5, r1
   b7514:	462e      	mov	r6, r5
   b7516:	f815 4b01 	ldrb.w	r4, [r5], #1
   b751a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b751e:	f017 0708 	ands.w	r7, r7, #8
   b7522:	d1f7      	bne.n	b7514 <_strtol_l.constprop.0+0x20>
   b7524:	2c2d      	cmp	r4, #45	; 0x2d
   b7526:	d132      	bne.n	b758e <_strtol_l.constprop.0+0x9a>
   b7528:	782c      	ldrb	r4, [r5, #0]
   b752a:	2701      	movs	r7, #1
   b752c:	1cb5      	adds	r5, r6, #2
   b752e:	2b00      	cmp	r3, #0
   b7530:	d05b      	beq.n	b75ea <_strtol_l.constprop.0+0xf6>
   b7532:	2b10      	cmp	r3, #16
   b7534:	d109      	bne.n	b754a <_strtol_l.constprop.0+0x56>
   b7536:	2c30      	cmp	r4, #48	; 0x30
   b7538:	d107      	bne.n	b754a <_strtol_l.constprop.0+0x56>
   b753a:	782c      	ldrb	r4, [r5, #0]
   b753c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7540:	2c58      	cmp	r4, #88	; 0x58
   b7542:	d14d      	bne.n	b75e0 <_strtol_l.constprop.0+0xec>
   b7544:	786c      	ldrb	r4, [r5, #1]
   b7546:	2310      	movs	r3, #16
   b7548:	3502      	adds	r5, #2
   b754a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b754e:	f108 38ff 	add.w	r8, r8, #4294967295
   b7552:	f04f 0c00 	mov.w	ip, #0
   b7556:	fbb8 f9f3 	udiv	r9, r8, r3
   b755a:	4666      	mov	r6, ip
   b755c:	fb03 8a19 	mls	sl, r3, r9, r8
   b7560:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7564:	f1be 0f09 	cmp.w	lr, #9
   b7568:	d816      	bhi.n	b7598 <_strtol_l.constprop.0+0xa4>
   b756a:	4674      	mov	r4, lr
   b756c:	42a3      	cmp	r3, r4
   b756e:	dd24      	ble.n	b75ba <_strtol_l.constprop.0+0xc6>
   b7570:	f1bc 0f00 	cmp.w	ip, #0
   b7574:	db1e      	blt.n	b75b4 <_strtol_l.constprop.0+0xc0>
   b7576:	45b1      	cmp	r9, r6
   b7578:	d31c      	bcc.n	b75b4 <_strtol_l.constprop.0+0xc0>
   b757a:	d101      	bne.n	b7580 <_strtol_l.constprop.0+0x8c>
   b757c:	45a2      	cmp	sl, r4
   b757e:	db19      	blt.n	b75b4 <_strtol_l.constprop.0+0xc0>
   b7580:	fb06 4603 	mla	r6, r6, r3, r4
   b7584:	f04f 0c01 	mov.w	ip, #1
   b7588:	f815 4b01 	ldrb.w	r4, [r5], #1
   b758c:	e7e8      	b.n	b7560 <_strtol_l.constprop.0+0x6c>
   b758e:	2c2b      	cmp	r4, #43	; 0x2b
   b7590:	bf04      	itt	eq
   b7592:	782c      	ldrbeq	r4, [r5, #0]
   b7594:	1cb5      	addeq	r5, r6, #2
   b7596:	e7ca      	b.n	b752e <_strtol_l.constprop.0+0x3a>
   b7598:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b759c:	f1be 0f19 	cmp.w	lr, #25
   b75a0:	d801      	bhi.n	b75a6 <_strtol_l.constprop.0+0xb2>
   b75a2:	3c37      	subs	r4, #55	; 0x37
   b75a4:	e7e2      	b.n	b756c <_strtol_l.constprop.0+0x78>
   b75a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b75aa:	f1be 0f19 	cmp.w	lr, #25
   b75ae:	d804      	bhi.n	b75ba <_strtol_l.constprop.0+0xc6>
   b75b0:	3c57      	subs	r4, #87	; 0x57
   b75b2:	e7db      	b.n	b756c <_strtol_l.constprop.0+0x78>
   b75b4:	f04f 3cff 	mov.w	ip, #4294967295
   b75b8:	e7e6      	b.n	b7588 <_strtol_l.constprop.0+0x94>
   b75ba:	f1bc 0f00 	cmp.w	ip, #0
   b75be:	da05      	bge.n	b75cc <_strtol_l.constprop.0+0xd8>
   b75c0:	2322      	movs	r3, #34	; 0x22
   b75c2:	6003      	str	r3, [r0, #0]
   b75c4:	4646      	mov	r6, r8
   b75c6:	b942      	cbnz	r2, b75da <_strtol_l.constprop.0+0xe6>
   b75c8:	4630      	mov	r0, r6
   b75ca:	e79e      	b.n	b750a <_strtol_l.constprop.0+0x16>
   b75cc:	b107      	cbz	r7, b75d0 <_strtol_l.constprop.0+0xdc>
   b75ce:	4276      	negs	r6, r6
   b75d0:	2a00      	cmp	r2, #0
   b75d2:	d0f9      	beq.n	b75c8 <_strtol_l.constprop.0+0xd4>
   b75d4:	f1bc 0f00 	cmp.w	ip, #0
   b75d8:	d000      	beq.n	b75dc <_strtol_l.constprop.0+0xe8>
   b75da:	1e69      	subs	r1, r5, #1
   b75dc:	6011      	str	r1, [r2, #0]
   b75de:	e7f3      	b.n	b75c8 <_strtol_l.constprop.0+0xd4>
   b75e0:	2430      	movs	r4, #48	; 0x30
   b75e2:	2b00      	cmp	r3, #0
   b75e4:	d1b1      	bne.n	b754a <_strtol_l.constprop.0+0x56>
   b75e6:	2308      	movs	r3, #8
   b75e8:	e7af      	b.n	b754a <_strtol_l.constprop.0+0x56>
   b75ea:	2c30      	cmp	r4, #48	; 0x30
   b75ec:	d0a5      	beq.n	b753a <_strtol_l.constprop.0+0x46>
   b75ee:	230a      	movs	r3, #10
   b75f0:	e7ab      	b.n	b754a <_strtol_l.constprop.0+0x56>
   b75f2:	bf00      	nop
   b75f4:	000b8c88 	.word	0x000b8c88

000b75f8 <strtol>:
   b75f8:	4613      	mov	r3, r2
   b75fa:	460a      	mov	r2, r1
   b75fc:	4601      	mov	r1, r0
   b75fe:	4802      	ldr	r0, [pc, #8]	; (b7608 <strtol+0x10>)
   b7600:	6800      	ldr	r0, [r0, #0]
   b7602:	f7ff bf77 	b.w	b74f4 <_strtol_l.constprop.0>
   b7606:	bf00      	nop
   b7608:	2003cd58 	.word	0x2003cd58

000b760c <__register_exitproc>:
   b760c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7610:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b76cc <__register_exitproc+0xc0>
   b7614:	4606      	mov	r6, r0
   b7616:	f8d8 0000 	ldr.w	r0, [r8]
   b761a:	461f      	mov	r7, r3
   b761c:	460d      	mov	r5, r1
   b761e:	4691      	mov	r9, r2
   b7620:	f000 fbc6 	bl	b7db0 <__retarget_lock_acquire_recursive>
   b7624:	4b25      	ldr	r3, [pc, #148]	; (b76bc <__register_exitproc+0xb0>)
   b7626:	681c      	ldr	r4, [r3, #0]
   b7628:	b934      	cbnz	r4, b7638 <__register_exitproc+0x2c>
   b762a:	4c25      	ldr	r4, [pc, #148]	; (b76c0 <__register_exitproc+0xb4>)
   b762c:	601c      	str	r4, [r3, #0]
   b762e:	4b25      	ldr	r3, [pc, #148]	; (b76c4 <__register_exitproc+0xb8>)
   b7630:	b113      	cbz	r3, b7638 <__register_exitproc+0x2c>
   b7632:	681b      	ldr	r3, [r3, #0]
   b7634:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7638:	6863      	ldr	r3, [r4, #4]
   b763a:	2b1f      	cmp	r3, #31
   b763c:	dd07      	ble.n	b764e <__register_exitproc+0x42>
   b763e:	f8d8 0000 	ldr.w	r0, [r8]
   b7642:	f000 fbb7 	bl	b7db4 <__retarget_lock_release_recursive>
   b7646:	f04f 30ff 	mov.w	r0, #4294967295
   b764a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b764e:	b34e      	cbz	r6, b76a4 <__register_exitproc+0x98>
   b7650:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7654:	b988      	cbnz	r0, b767a <__register_exitproc+0x6e>
   b7656:	4b1c      	ldr	r3, [pc, #112]	; (b76c8 <__register_exitproc+0xbc>)
   b7658:	b923      	cbnz	r3, b7664 <__register_exitproc+0x58>
   b765a:	f8d8 0000 	ldr.w	r0, [r8]
   b765e:	f000 fba8 	bl	b7db2 <__retarget_lock_release>
   b7662:	e7f0      	b.n	b7646 <__register_exitproc+0x3a>
   b7664:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7668:	f7fd f9f8 	bl	b4a5c <malloc>
   b766c:	2800      	cmp	r0, #0
   b766e:	d0f4      	beq.n	b765a <__register_exitproc+0x4e>
   b7670:	2300      	movs	r3, #0
   b7672:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7676:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b767a:	6863      	ldr	r3, [r4, #4]
   b767c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7680:	2201      	movs	r2, #1
   b7682:	409a      	lsls	r2, r3
   b7684:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7688:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b768c:	4313      	orrs	r3, r2
   b768e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7692:	2e02      	cmp	r6, #2
   b7694:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7698:	bf02      	ittt	eq
   b769a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b769e:	4313      	orreq	r3, r2
   b76a0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b76a4:	6863      	ldr	r3, [r4, #4]
   b76a6:	f8d8 0000 	ldr.w	r0, [r8]
   b76aa:	1c5a      	adds	r2, r3, #1
   b76ac:	3302      	adds	r3, #2
   b76ae:	6062      	str	r2, [r4, #4]
   b76b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b76b4:	f000 fb7e 	bl	b7db4 <__retarget_lock_release_recursive>
   b76b8:	2000      	movs	r0, #0
   b76ba:	e7c6      	b.n	b764a <__register_exitproc+0x3e>
   b76bc:	2003e7ec 	.word	0x2003e7ec
   b76c0:	2003e760 	.word	0x2003e760
   b76c4:	00000000 	.word	0x00000000
   b76c8:	000b4a5d 	.word	0x000b4a5d
   b76cc:	2003cdbc 	.word	0x2003cdbc

000b76d0 <rshift>:
   b76d0:	6903      	ldr	r3, [r0, #16]
   b76d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b76d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76da:	ea4f 1261 	mov.w	r2, r1, asr #5
   b76de:	f100 0414 	add.w	r4, r0, #20
   b76e2:	dd45      	ble.n	b7770 <rshift+0xa0>
   b76e4:	f011 011f 	ands.w	r1, r1, #31
   b76e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b76ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b76f0:	d10c      	bne.n	b770c <rshift+0x3c>
   b76f2:	f100 0710 	add.w	r7, r0, #16
   b76f6:	4629      	mov	r1, r5
   b76f8:	42b1      	cmp	r1, r6
   b76fa:	d334      	bcc.n	b7766 <rshift+0x96>
   b76fc:	1a9b      	subs	r3, r3, r2
   b76fe:	009b      	lsls	r3, r3, #2
   b7700:	1eea      	subs	r2, r5, #3
   b7702:	4296      	cmp	r6, r2
   b7704:	bf38      	it	cc
   b7706:	2300      	movcc	r3, #0
   b7708:	4423      	add	r3, r4
   b770a:	e015      	b.n	b7738 <rshift+0x68>
   b770c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b7710:	f1c1 0820 	rsb	r8, r1, #32
   b7714:	40cf      	lsrs	r7, r1
   b7716:	f105 0e04 	add.w	lr, r5, #4
   b771a:	46a1      	mov	r9, r4
   b771c:	4576      	cmp	r6, lr
   b771e:	46f4      	mov	ip, lr
   b7720:	d815      	bhi.n	b774e <rshift+0x7e>
   b7722:	1a9a      	subs	r2, r3, r2
   b7724:	0092      	lsls	r2, r2, #2
   b7726:	3a04      	subs	r2, #4
   b7728:	3501      	adds	r5, #1
   b772a:	42ae      	cmp	r6, r5
   b772c:	bf38      	it	cc
   b772e:	2200      	movcc	r2, #0
   b7730:	18a3      	adds	r3, r4, r2
   b7732:	50a7      	str	r7, [r4, r2]
   b7734:	b107      	cbz	r7, b7738 <rshift+0x68>
   b7736:	3304      	adds	r3, #4
   b7738:	1b1a      	subs	r2, r3, r4
   b773a:	42a3      	cmp	r3, r4
   b773c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b7740:	bf08      	it	eq
   b7742:	2300      	moveq	r3, #0
   b7744:	6102      	str	r2, [r0, #16]
   b7746:	bf08      	it	eq
   b7748:	6143      	streq	r3, [r0, #20]
   b774a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b774e:	f8dc c000 	ldr.w	ip, [ip]
   b7752:	fa0c fc08 	lsl.w	ip, ip, r8
   b7756:	ea4c 0707 	orr.w	r7, ip, r7
   b775a:	f849 7b04 	str.w	r7, [r9], #4
   b775e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b7762:	40cf      	lsrs	r7, r1
   b7764:	e7da      	b.n	b771c <rshift+0x4c>
   b7766:	f851 cb04 	ldr.w	ip, [r1], #4
   b776a:	f847 cf04 	str.w	ip, [r7, #4]!
   b776e:	e7c3      	b.n	b76f8 <rshift+0x28>
   b7770:	4623      	mov	r3, r4
   b7772:	e7e1      	b.n	b7738 <rshift+0x68>

000b7774 <__hexdig_fun>:
   b7774:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7778:	2b09      	cmp	r3, #9
   b777a:	d802      	bhi.n	b7782 <__hexdig_fun+0xe>
   b777c:	3820      	subs	r0, #32
   b777e:	b2c0      	uxtb	r0, r0
   b7780:	4770      	bx	lr
   b7782:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7786:	2b05      	cmp	r3, #5
   b7788:	d801      	bhi.n	b778e <__hexdig_fun+0x1a>
   b778a:	3847      	subs	r0, #71	; 0x47
   b778c:	e7f7      	b.n	b777e <__hexdig_fun+0xa>
   b778e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7792:	2b05      	cmp	r3, #5
   b7794:	d801      	bhi.n	b779a <__hexdig_fun+0x26>
   b7796:	3827      	subs	r0, #39	; 0x27
   b7798:	e7f1      	b.n	b777e <__hexdig_fun+0xa>
   b779a:	2000      	movs	r0, #0
   b779c:	4770      	bx	lr
	...

000b77a0 <__gethex>:
   b77a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b77a4:	ed2d 8b02 	vpush	{d8}
   b77a8:	b089      	sub	sp, #36	; 0x24
   b77aa:	ee08 0a10 	vmov	s16, r0
   b77ae:	9304      	str	r3, [sp, #16]
   b77b0:	4bb4      	ldr	r3, [pc, #720]	; (b7a84 <__gethex+0x2e4>)
   b77b2:	681b      	ldr	r3, [r3, #0]
   b77b4:	9301      	str	r3, [sp, #4]
   b77b6:	4618      	mov	r0, r3
   b77b8:	468b      	mov	fp, r1
   b77ba:	4690      	mov	r8, r2
   b77bc:	f7fe fff3 	bl	b67a6 <strlen>
   b77c0:	9b01      	ldr	r3, [sp, #4]
   b77c2:	f8db 2000 	ldr.w	r2, [fp]
   b77c6:	4403      	add	r3, r0
   b77c8:	4682      	mov	sl, r0
   b77ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b77ce:	9305      	str	r3, [sp, #20]
   b77d0:	1c93      	adds	r3, r2, #2
   b77d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b77d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b77da:	32fe      	adds	r2, #254	; 0xfe
   b77dc:	18d1      	adds	r1, r2, r3
   b77de:	461f      	mov	r7, r3
   b77e0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b77e4:	9100      	str	r1, [sp, #0]
   b77e6:	2830      	cmp	r0, #48	; 0x30
   b77e8:	d0f8      	beq.n	b77dc <__gethex+0x3c>
   b77ea:	f7ff ffc3 	bl	b7774 <__hexdig_fun>
   b77ee:	4604      	mov	r4, r0
   b77f0:	2800      	cmp	r0, #0
   b77f2:	d13a      	bne.n	b786a <__gethex+0xca>
   b77f4:	9901      	ldr	r1, [sp, #4]
   b77f6:	4652      	mov	r2, sl
   b77f8:	4638      	mov	r0, r7
   b77fa:	f7fe ffdc 	bl	b67b6 <strncmp>
   b77fe:	4605      	mov	r5, r0
   b7800:	2800      	cmp	r0, #0
   b7802:	d168      	bne.n	b78d6 <__gethex+0x136>
   b7804:	f817 000a 	ldrb.w	r0, [r7, sl]
   b7808:	eb07 060a 	add.w	r6, r7, sl
   b780c:	f7ff ffb2 	bl	b7774 <__hexdig_fun>
   b7810:	2800      	cmp	r0, #0
   b7812:	d062      	beq.n	b78da <__gethex+0x13a>
   b7814:	4633      	mov	r3, r6
   b7816:	7818      	ldrb	r0, [r3, #0]
   b7818:	2830      	cmp	r0, #48	; 0x30
   b781a:	461f      	mov	r7, r3
   b781c:	f103 0301 	add.w	r3, r3, #1
   b7820:	d0f9      	beq.n	b7816 <__gethex+0x76>
   b7822:	f7ff ffa7 	bl	b7774 <__hexdig_fun>
   b7826:	2301      	movs	r3, #1
   b7828:	fab0 f480 	clz	r4, r0
   b782c:	0964      	lsrs	r4, r4, #5
   b782e:	4635      	mov	r5, r6
   b7830:	9300      	str	r3, [sp, #0]
   b7832:	463a      	mov	r2, r7
   b7834:	4616      	mov	r6, r2
   b7836:	3201      	adds	r2, #1
   b7838:	7830      	ldrb	r0, [r6, #0]
   b783a:	f7ff ff9b 	bl	b7774 <__hexdig_fun>
   b783e:	2800      	cmp	r0, #0
   b7840:	d1f8      	bne.n	b7834 <__gethex+0x94>
   b7842:	9901      	ldr	r1, [sp, #4]
   b7844:	4652      	mov	r2, sl
   b7846:	4630      	mov	r0, r6
   b7848:	f7fe ffb5 	bl	b67b6 <strncmp>
   b784c:	b980      	cbnz	r0, b7870 <__gethex+0xd0>
   b784e:	b94d      	cbnz	r5, b7864 <__gethex+0xc4>
   b7850:	eb06 050a 	add.w	r5, r6, sl
   b7854:	462a      	mov	r2, r5
   b7856:	4616      	mov	r6, r2
   b7858:	3201      	adds	r2, #1
   b785a:	7830      	ldrb	r0, [r6, #0]
   b785c:	f7ff ff8a 	bl	b7774 <__hexdig_fun>
   b7860:	2800      	cmp	r0, #0
   b7862:	d1f8      	bne.n	b7856 <__gethex+0xb6>
   b7864:	1bad      	subs	r5, r5, r6
   b7866:	00ad      	lsls	r5, r5, #2
   b7868:	e004      	b.n	b7874 <__gethex+0xd4>
   b786a:	2400      	movs	r4, #0
   b786c:	4625      	mov	r5, r4
   b786e:	e7e0      	b.n	b7832 <__gethex+0x92>
   b7870:	2d00      	cmp	r5, #0
   b7872:	d1f7      	bne.n	b7864 <__gethex+0xc4>
   b7874:	7833      	ldrb	r3, [r6, #0]
   b7876:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b787a:	2b50      	cmp	r3, #80	; 0x50
   b787c:	d13b      	bne.n	b78f6 <__gethex+0x156>
   b787e:	7873      	ldrb	r3, [r6, #1]
   b7880:	2b2b      	cmp	r3, #43	; 0x2b
   b7882:	d02c      	beq.n	b78de <__gethex+0x13e>
   b7884:	2b2d      	cmp	r3, #45	; 0x2d
   b7886:	d02e      	beq.n	b78e6 <__gethex+0x146>
   b7888:	1c71      	adds	r1, r6, #1
   b788a:	f04f 0900 	mov.w	r9, #0
   b788e:	7808      	ldrb	r0, [r1, #0]
   b7890:	f7ff ff70 	bl	b7774 <__hexdig_fun>
   b7894:	1e43      	subs	r3, r0, #1
   b7896:	b2db      	uxtb	r3, r3
   b7898:	2b18      	cmp	r3, #24
   b789a:	d82c      	bhi.n	b78f6 <__gethex+0x156>
   b789c:	f1a0 0210 	sub.w	r2, r0, #16
   b78a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b78a4:	f7ff ff66 	bl	b7774 <__hexdig_fun>
   b78a8:	1e43      	subs	r3, r0, #1
   b78aa:	b2db      	uxtb	r3, r3
   b78ac:	2b18      	cmp	r3, #24
   b78ae:	d91d      	bls.n	b78ec <__gethex+0x14c>
   b78b0:	f1b9 0f00 	cmp.w	r9, #0
   b78b4:	d000      	beq.n	b78b8 <__gethex+0x118>
   b78b6:	4252      	negs	r2, r2
   b78b8:	4415      	add	r5, r2
   b78ba:	f8cb 1000 	str.w	r1, [fp]
   b78be:	b1e4      	cbz	r4, b78fa <__gethex+0x15a>
   b78c0:	9b00      	ldr	r3, [sp, #0]
   b78c2:	2b00      	cmp	r3, #0
   b78c4:	bf14      	ite	ne
   b78c6:	2700      	movne	r7, #0
   b78c8:	2706      	moveq	r7, #6
   b78ca:	4638      	mov	r0, r7
   b78cc:	b009      	add	sp, #36	; 0x24
   b78ce:	ecbd 8b02 	vpop	{d8}
   b78d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b78d6:	463e      	mov	r6, r7
   b78d8:	4625      	mov	r5, r4
   b78da:	2401      	movs	r4, #1
   b78dc:	e7ca      	b.n	b7874 <__gethex+0xd4>
   b78de:	f04f 0900 	mov.w	r9, #0
   b78e2:	1cb1      	adds	r1, r6, #2
   b78e4:	e7d3      	b.n	b788e <__gethex+0xee>
   b78e6:	f04f 0901 	mov.w	r9, #1
   b78ea:	e7fa      	b.n	b78e2 <__gethex+0x142>
   b78ec:	230a      	movs	r3, #10
   b78ee:	fb03 0202 	mla	r2, r3, r2, r0
   b78f2:	3a10      	subs	r2, #16
   b78f4:	e7d4      	b.n	b78a0 <__gethex+0x100>
   b78f6:	4631      	mov	r1, r6
   b78f8:	e7df      	b.n	b78ba <__gethex+0x11a>
   b78fa:	1bf3      	subs	r3, r6, r7
   b78fc:	3b01      	subs	r3, #1
   b78fe:	4621      	mov	r1, r4
   b7900:	2b07      	cmp	r3, #7
   b7902:	dc0b      	bgt.n	b791c <__gethex+0x17c>
   b7904:	ee18 0a10 	vmov	r0, s16
   b7908:	f000 fa68 	bl	b7ddc <_Balloc>
   b790c:	4604      	mov	r4, r0
   b790e:	b940      	cbnz	r0, b7922 <__gethex+0x182>
   b7910:	4b5d      	ldr	r3, [pc, #372]	; (b7a88 <__gethex+0x2e8>)
   b7912:	4602      	mov	r2, r0
   b7914:	21de      	movs	r1, #222	; 0xde
   b7916:	485d      	ldr	r0, [pc, #372]	; (b7a8c <__gethex+0x2ec>)
   b7918:	f7fd f8e0 	bl	b4adc <__assert_func>
   b791c:	3101      	adds	r1, #1
   b791e:	105b      	asrs	r3, r3, #1
   b7920:	e7ee      	b.n	b7900 <__gethex+0x160>
   b7922:	f100 0914 	add.w	r9, r0, #20
   b7926:	f04f 0b00 	mov.w	fp, #0
   b792a:	f1ca 0301 	rsb	r3, sl, #1
   b792e:	f8cd 9008 	str.w	r9, [sp, #8]
   b7932:	f8cd b000 	str.w	fp, [sp]
   b7936:	9306      	str	r3, [sp, #24]
   b7938:	42b7      	cmp	r7, r6
   b793a:	d340      	bcc.n	b79be <__gethex+0x21e>
   b793c:	9802      	ldr	r0, [sp, #8]
   b793e:	9b00      	ldr	r3, [sp, #0]
   b7940:	f840 3b04 	str.w	r3, [r0], #4
   b7944:	eba0 0009 	sub.w	r0, r0, r9
   b7948:	1080      	asrs	r0, r0, #2
   b794a:	0146      	lsls	r6, r0, #5
   b794c:	6120      	str	r0, [r4, #16]
   b794e:	4618      	mov	r0, r3
   b7950:	f000 fb36 	bl	b7fc0 <__hi0bits>
   b7954:	1a30      	subs	r0, r6, r0
   b7956:	f8d8 6000 	ldr.w	r6, [r8]
   b795a:	42b0      	cmp	r0, r6
   b795c:	dd63      	ble.n	b7a26 <__gethex+0x286>
   b795e:	1b87      	subs	r7, r0, r6
   b7960:	4639      	mov	r1, r7
   b7962:	4620      	mov	r0, r4
   b7964:	f000 feda 	bl	b871c <__any_on>
   b7968:	4682      	mov	sl, r0
   b796a:	b1a8      	cbz	r0, b7998 <__gethex+0x1f8>
   b796c:	1e7b      	subs	r3, r7, #1
   b796e:	1159      	asrs	r1, r3, #5
   b7970:	f003 021f 	and.w	r2, r3, #31
   b7974:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b7978:	f04f 0a01 	mov.w	sl, #1
   b797c:	fa0a f202 	lsl.w	r2, sl, r2
   b7980:	420a      	tst	r2, r1
   b7982:	d009      	beq.n	b7998 <__gethex+0x1f8>
   b7984:	4553      	cmp	r3, sl
   b7986:	dd05      	ble.n	b7994 <__gethex+0x1f4>
   b7988:	1eb9      	subs	r1, r7, #2
   b798a:	4620      	mov	r0, r4
   b798c:	f000 fec6 	bl	b871c <__any_on>
   b7990:	2800      	cmp	r0, #0
   b7992:	d145      	bne.n	b7a20 <__gethex+0x280>
   b7994:	f04f 0a02 	mov.w	sl, #2
   b7998:	4639      	mov	r1, r7
   b799a:	4620      	mov	r0, r4
   b799c:	f7ff fe98 	bl	b76d0 <rshift>
   b79a0:	443d      	add	r5, r7
   b79a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b79a6:	42ab      	cmp	r3, r5
   b79a8:	da4c      	bge.n	b7a44 <__gethex+0x2a4>
   b79aa:	ee18 0a10 	vmov	r0, s16
   b79ae:	4621      	mov	r1, r4
   b79b0:	f000 fa54 	bl	b7e5c <_Bfree>
   b79b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b79b6:	2300      	movs	r3, #0
   b79b8:	6013      	str	r3, [r2, #0]
   b79ba:	27a3      	movs	r7, #163	; 0xa3
   b79bc:	e785      	b.n	b78ca <__gethex+0x12a>
   b79be:	1e73      	subs	r3, r6, #1
   b79c0:	9a05      	ldr	r2, [sp, #20]
   b79c2:	9303      	str	r3, [sp, #12]
   b79c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b79c8:	4293      	cmp	r3, r2
   b79ca:	d019      	beq.n	b7a00 <__gethex+0x260>
   b79cc:	f1bb 0f20 	cmp.w	fp, #32
   b79d0:	d107      	bne.n	b79e2 <__gethex+0x242>
   b79d2:	9b02      	ldr	r3, [sp, #8]
   b79d4:	9a00      	ldr	r2, [sp, #0]
   b79d6:	f843 2b04 	str.w	r2, [r3], #4
   b79da:	9302      	str	r3, [sp, #8]
   b79dc:	2300      	movs	r3, #0
   b79de:	9300      	str	r3, [sp, #0]
   b79e0:	469b      	mov	fp, r3
   b79e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b79e6:	f7ff fec5 	bl	b7774 <__hexdig_fun>
   b79ea:	9b00      	ldr	r3, [sp, #0]
   b79ec:	f000 000f 	and.w	r0, r0, #15
   b79f0:	fa00 f00b 	lsl.w	r0, r0, fp
   b79f4:	4303      	orrs	r3, r0
   b79f6:	9300      	str	r3, [sp, #0]
   b79f8:	f10b 0b04 	add.w	fp, fp, #4
   b79fc:	9b03      	ldr	r3, [sp, #12]
   b79fe:	e00d      	b.n	b7a1c <__gethex+0x27c>
   b7a00:	9b03      	ldr	r3, [sp, #12]
   b7a02:	9a06      	ldr	r2, [sp, #24]
   b7a04:	4413      	add	r3, r2
   b7a06:	42bb      	cmp	r3, r7
   b7a08:	d3e0      	bcc.n	b79cc <__gethex+0x22c>
   b7a0a:	4618      	mov	r0, r3
   b7a0c:	9901      	ldr	r1, [sp, #4]
   b7a0e:	9307      	str	r3, [sp, #28]
   b7a10:	4652      	mov	r2, sl
   b7a12:	f7fe fed0 	bl	b67b6 <strncmp>
   b7a16:	9b07      	ldr	r3, [sp, #28]
   b7a18:	2800      	cmp	r0, #0
   b7a1a:	d1d7      	bne.n	b79cc <__gethex+0x22c>
   b7a1c:	461e      	mov	r6, r3
   b7a1e:	e78b      	b.n	b7938 <__gethex+0x198>
   b7a20:	f04f 0a03 	mov.w	sl, #3
   b7a24:	e7b8      	b.n	b7998 <__gethex+0x1f8>
   b7a26:	da0a      	bge.n	b7a3e <__gethex+0x29e>
   b7a28:	1a37      	subs	r7, r6, r0
   b7a2a:	4621      	mov	r1, r4
   b7a2c:	ee18 0a10 	vmov	r0, s16
   b7a30:	463a      	mov	r2, r7
   b7a32:	f000 fc2f 	bl	b8294 <__lshift>
   b7a36:	1bed      	subs	r5, r5, r7
   b7a38:	4604      	mov	r4, r0
   b7a3a:	f100 0914 	add.w	r9, r0, #20
   b7a3e:	f04f 0a00 	mov.w	sl, #0
   b7a42:	e7ae      	b.n	b79a2 <__gethex+0x202>
   b7a44:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7a48:	42a8      	cmp	r0, r5
   b7a4a:	dd72      	ble.n	b7b32 <__gethex+0x392>
   b7a4c:	1b45      	subs	r5, r0, r5
   b7a4e:	42ae      	cmp	r6, r5
   b7a50:	dc36      	bgt.n	b7ac0 <__gethex+0x320>
   b7a52:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b7a56:	2b02      	cmp	r3, #2
   b7a58:	d02a      	beq.n	b7ab0 <__gethex+0x310>
   b7a5a:	2b03      	cmp	r3, #3
   b7a5c:	d02c      	beq.n	b7ab8 <__gethex+0x318>
   b7a5e:	2b01      	cmp	r3, #1
   b7a60:	d11c      	bne.n	b7a9c <__gethex+0x2fc>
   b7a62:	42ae      	cmp	r6, r5
   b7a64:	d11a      	bne.n	b7a9c <__gethex+0x2fc>
   b7a66:	2e01      	cmp	r6, #1
   b7a68:	d112      	bne.n	b7a90 <__gethex+0x2f0>
   b7a6a:	9a04      	ldr	r2, [sp, #16]
   b7a6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7a70:	6013      	str	r3, [r2, #0]
   b7a72:	2301      	movs	r3, #1
   b7a74:	6123      	str	r3, [r4, #16]
   b7a76:	f8c9 3000 	str.w	r3, [r9]
   b7a7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b7a7c:	2762      	movs	r7, #98	; 0x62
   b7a7e:	601c      	str	r4, [r3, #0]
   b7a80:	e723      	b.n	b78ca <__gethex+0x12a>
   b7a82:	bf00      	nop
   b7a84:	000b8e20 	.word	0x000b8e20
   b7a88:	000b8d88 	.word	0x000b8d88
   b7a8c:	000b8d99 	.word	0x000b8d99
   b7a90:	1e71      	subs	r1, r6, #1
   b7a92:	4620      	mov	r0, r4
   b7a94:	f000 fe42 	bl	b871c <__any_on>
   b7a98:	2800      	cmp	r0, #0
   b7a9a:	d1e6      	bne.n	b7a6a <__gethex+0x2ca>
   b7a9c:	ee18 0a10 	vmov	r0, s16
   b7aa0:	4621      	mov	r1, r4
   b7aa2:	f000 f9db 	bl	b7e5c <_Bfree>
   b7aa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b7aa8:	2300      	movs	r3, #0
   b7aaa:	6013      	str	r3, [r2, #0]
   b7aac:	2750      	movs	r7, #80	; 0x50
   b7aae:	e70c      	b.n	b78ca <__gethex+0x12a>
   b7ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7ab2:	2b00      	cmp	r3, #0
   b7ab4:	d1f2      	bne.n	b7a9c <__gethex+0x2fc>
   b7ab6:	e7d8      	b.n	b7a6a <__gethex+0x2ca>
   b7ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7aba:	2b00      	cmp	r3, #0
   b7abc:	d1d5      	bne.n	b7a6a <__gethex+0x2ca>
   b7abe:	e7ed      	b.n	b7a9c <__gethex+0x2fc>
   b7ac0:	1e6f      	subs	r7, r5, #1
   b7ac2:	f1ba 0f00 	cmp.w	sl, #0
   b7ac6:	d131      	bne.n	b7b2c <__gethex+0x38c>
   b7ac8:	b127      	cbz	r7, b7ad4 <__gethex+0x334>
   b7aca:	4639      	mov	r1, r7
   b7acc:	4620      	mov	r0, r4
   b7ace:	f000 fe25 	bl	b871c <__any_on>
   b7ad2:	4682      	mov	sl, r0
   b7ad4:	117b      	asrs	r3, r7, #5
   b7ad6:	2101      	movs	r1, #1
   b7ad8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b7adc:	f007 071f 	and.w	r7, r7, #31
   b7ae0:	fa01 f707 	lsl.w	r7, r1, r7
   b7ae4:	421f      	tst	r7, r3
   b7ae6:	4629      	mov	r1, r5
   b7ae8:	4620      	mov	r0, r4
   b7aea:	bf18      	it	ne
   b7aec:	f04a 0a02 	orrne.w	sl, sl, #2
   b7af0:	1b76      	subs	r6, r6, r5
   b7af2:	f7ff fded 	bl	b76d0 <rshift>
   b7af6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b7afa:	2702      	movs	r7, #2
   b7afc:	f1ba 0f00 	cmp.w	sl, #0
   b7b00:	d048      	beq.n	b7b94 <__gethex+0x3f4>
   b7b02:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b7b06:	2b02      	cmp	r3, #2
   b7b08:	d015      	beq.n	b7b36 <__gethex+0x396>
   b7b0a:	2b03      	cmp	r3, #3
   b7b0c:	d017      	beq.n	b7b3e <__gethex+0x39e>
   b7b0e:	2b01      	cmp	r3, #1
   b7b10:	d109      	bne.n	b7b26 <__gethex+0x386>
   b7b12:	f01a 0f02 	tst.w	sl, #2
   b7b16:	d006      	beq.n	b7b26 <__gethex+0x386>
   b7b18:	f8d9 0000 	ldr.w	r0, [r9]
   b7b1c:	ea4a 0a00 	orr.w	sl, sl, r0
   b7b20:	f01a 0f01 	tst.w	sl, #1
   b7b24:	d10e      	bne.n	b7b44 <__gethex+0x3a4>
   b7b26:	f047 0710 	orr.w	r7, r7, #16
   b7b2a:	e033      	b.n	b7b94 <__gethex+0x3f4>
   b7b2c:	f04f 0a01 	mov.w	sl, #1
   b7b30:	e7d0      	b.n	b7ad4 <__gethex+0x334>
   b7b32:	2701      	movs	r7, #1
   b7b34:	e7e2      	b.n	b7afc <__gethex+0x35c>
   b7b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7b38:	f1c3 0301 	rsb	r3, r3, #1
   b7b3c:	9315      	str	r3, [sp, #84]	; 0x54
   b7b3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7b40:	2b00      	cmp	r3, #0
   b7b42:	d0f0      	beq.n	b7b26 <__gethex+0x386>
   b7b44:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b7b48:	f104 0314 	add.w	r3, r4, #20
   b7b4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b7b50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b7b54:	f04f 0c00 	mov.w	ip, #0
   b7b58:	4618      	mov	r0, r3
   b7b5a:	f853 2b04 	ldr.w	r2, [r3], #4
   b7b5e:	f1b2 3fff 	cmp.w	r2, #4294967295
   b7b62:	d01c      	beq.n	b7b9e <__gethex+0x3fe>
   b7b64:	3201      	adds	r2, #1
   b7b66:	6002      	str	r2, [r0, #0]
   b7b68:	2f02      	cmp	r7, #2
   b7b6a:	f104 0314 	add.w	r3, r4, #20
   b7b6e:	d13f      	bne.n	b7bf0 <__gethex+0x450>
   b7b70:	f8d8 2000 	ldr.w	r2, [r8]
   b7b74:	3a01      	subs	r2, #1
   b7b76:	42b2      	cmp	r2, r6
   b7b78:	d10a      	bne.n	b7b90 <__gethex+0x3f0>
   b7b7a:	1171      	asrs	r1, r6, #5
   b7b7c:	2201      	movs	r2, #1
   b7b7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b7b82:	f006 061f 	and.w	r6, r6, #31
   b7b86:	fa02 f606 	lsl.w	r6, r2, r6
   b7b8a:	421e      	tst	r6, r3
   b7b8c:	bf18      	it	ne
   b7b8e:	4617      	movne	r7, r2
   b7b90:	f047 0720 	orr.w	r7, r7, #32
   b7b94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b7b96:	601c      	str	r4, [r3, #0]
   b7b98:	9b04      	ldr	r3, [sp, #16]
   b7b9a:	601d      	str	r5, [r3, #0]
   b7b9c:	e695      	b.n	b78ca <__gethex+0x12a>
   b7b9e:	4299      	cmp	r1, r3
   b7ba0:	f843 cc04 	str.w	ip, [r3, #-4]
   b7ba4:	d8d8      	bhi.n	b7b58 <__gethex+0x3b8>
   b7ba6:	68a3      	ldr	r3, [r4, #8]
   b7ba8:	459b      	cmp	fp, r3
   b7baa:	db19      	blt.n	b7be0 <__gethex+0x440>
   b7bac:	6861      	ldr	r1, [r4, #4]
   b7bae:	ee18 0a10 	vmov	r0, s16
   b7bb2:	3101      	adds	r1, #1
   b7bb4:	f000 f912 	bl	b7ddc <_Balloc>
   b7bb8:	4681      	mov	r9, r0
   b7bba:	b918      	cbnz	r0, b7bc4 <__gethex+0x424>
   b7bbc:	4b1a      	ldr	r3, [pc, #104]	; (b7c28 <__gethex+0x488>)
   b7bbe:	4602      	mov	r2, r0
   b7bc0:	2184      	movs	r1, #132	; 0x84
   b7bc2:	e6a8      	b.n	b7916 <__gethex+0x176>
   b7bc4:	6922      	ldr	r2, [r4, #16]
   b7bc6:	3202      	adds	r2, #2
   b7bc8:	f104 010c 	add.w	r1, r4, #12
   b7bcc:	0092      	lsls	r2, r2, #2
   b7bce:	300c      	adds	r0, #12
   b7bd0:	f7fe fd6f 	bl	b66b2 <memcpy>
   b7bd4:	4621      	mov	r1, r4
   b7bd6:	ee18 0a10 	vmov	r0, s16
   b7bda:	f000 f93f 	bl	b7e5c <_Bfree>
   b7bde:	464c      	mov	r4, r9
   b7be0:	6923      	ldr	r3, [r4, #16]
   b7be2:	1c5a      	adds	r2, r3, #1
   b7be4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b7be8:	6122      	str	r2, [r4, #16]
   b7bea:	2201      	movs	r2, #1
   b7bec:	615a      	str	r2, [r3, #20]
   b7bee:	e7bb      	b.n	b7b68 <__gethex+0x3c8>
   b7bf0:	6922      	ldr	r2, [r4, #16]
   b7bf2:	455a      	cmp	r2, fp
   b7bf4:	dd0b      	ble.n	b7c0e <__gethex+0x46e>
   b7bf6:	2101      	movs	r1, #1
   b7bf8:	4620      	mov	r0, r4
   b7bfa:	f7ff fd69 	bl	b76d0 <rshift>
   b7bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b7c02:	3501      	adds	r5, #1
   b7c04:	42ab      	cmp	r3, r5
   b7c06:	f6ff aed0 	blt.w	b79aa <__gethex+0x20a>
   b7c0a:	2701      	movs	r7, #1
   b7c0c:	e7c0      	b.n	b7b90 <__gethex+0x3f0>
   b7c0e:	f016 061f 	ands.w	r6, r6, #31
   b7c12:	d0fa      	beq.n	b7c0a <__gethex+0x46a>
   b7c14:	4453      	add	r3, sl
   b7c16:	f1c6 0620 	rsb	r6, r6, #32
   b7c1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b7c1e:	f000 f9cf 	bl	b7fc0 <__hi0bits>
   b7c22:	42b0      	cmp	r0, r6
   b7c24:	dbe7      	blt.n	b7bf6 <__gethex+0x456>
   b7c26:	e7f0      	b.n	b7c0a <__gethex+0x46a>
   b7c28:	000b8d88 	.word	0x000b8d88

000b7c2c <L_shift>:
   b7c2c:	f1c2 0208 	rsb	r2, r2, #8
   b7c30:	0092      	lsls	r2, r2, #2
   b7c32:	b570      	push	{r4, r5, r6, lr}
   b7c34:	f1c2 0620 	rsb	r6, r2, #32
   b7c38:	6843      	ldr	r3, [r0, #4]
   b7c3a:	6804      	ldr	r4, [r0, #0]
   b7c3c:	fa03 f506 	lsl.w	r5, r3, r6
   b7c40:	432c      	orrs	r4, r5
   b7c42:	40d3      	lsrs	r3, r2
   b7c44:	6004      	str	r4, [r0, #0]
   b7c46:	f840 3f04 	str.w	r3, [r0, #4]!
   b7c4a:	4288      	cmp	r0, r1
   b7c4c:	d3f4      	bcc.n	b7c38 <L_shift+0xc>
   b7c4e:	bd70      	pop	{r4, r5, r6, pc}

000b7c50 <__match>:
   b7c50:	b530      	push	{r4, r5, lr}
   b7c52:	6803      	ldr	r3, [r0, #0]
   b7c54:	3301      	adds	r3, #1
   b7c56:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7c5a:	b914      	cbnz	r4, b7c62 <__match+0x12>
   b7c5c:	6003      	str	r3, [r0, #0]
   b7c5e:	2001      	movs	r0, #1
   b7c60:	bd30      	pop	{r4, r5, pc}
   b7c62:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7c66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b7c6a:	2d19      	cmp	r5, #25
   b7c6c:	bf98      	it	ls
   b7c6e:	3220      	addls	r2, #32
   b7c70:	42a2      	cmp	r2, r4
   b7c72:	d0f0      	beq.n	b7c56 <__match+0x6>
   b7c74:	2000      	movs	r0, #0
   b7c76:	e7f3      	b.n	b7c60 <__match+0x10>

000b7c78 <__hexnan>:
   b7c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c7c:	680b      	ldr	r3, [r1, #0]
   b7c7e:	115e      	asrs	r6, r3, #5
   b7c80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b7c84:	f013 031f 	ands.w	r3, r3, #31
   b7c88:	b087      	sub	sp, #28
   b7c8a:	bf18      	it	ne
   b7c8c:	3604      	addne	r6, #4
   b7c8e:	2500      	movs	r5, #0
   b7c90:	1f37      	subs	r7, r6, #4
   b7c92:	4690      	mov	r8, r2
   b7c94:	6802      	ldr	r2, [r0, #0]
   b7c96:	9301      	str	r3, [sp, #4]
   b7c98:	4682      	mov	sl, r0
   b7c9a:	f846 5c04 	str.w	r5, [r6, #-4]
   b7c9e:	46b9      	mov	r9, r7
   b7ca0:	463c      	mov	r4, r7
   b7ca2:	9502      	str	r5, [sp, #8]
   b7ca4:	46ab      	mov	fp, r5
   b7ca6:	7851      	ldrb	r1, [r2, #1]
   b7ca8:	1c53      	adds	r3, r2, #1
   b7caa:	9303      	str	r3, [sp, #12]
   b7cac:	b341      	cbz	r1, b7d00 <__hexnan+0x88>
   b7cae:	4608      	mov	r0, r1
   b7cb0:	9205      	str	r2, [sp, #20]
   b7cb2:	9104      	str	r1, [sp, #16]
   b7cb4:	f7ff fd5e 	bl	b7774 <__hexdig_fun>
   b7cb8:	2800      	cmp	r0, #0
   b7cba:	d14f      	bne.n	b7d5c <__hexnan+0xe4>
   b7cbc:	9904      	ldr	r1, [sp, #16]
   b7cbe:	9a05      	ldr	r2, [sp, #20]
   b7cc0:	2920      	cmp	r1, #32
   b7cc2:	d818      	bhi.n	b7cf6 <__hexnan+0x7e>
   b7cc4:	9b02      	ldr	r3, [sp, #8]
   b7cc6:	459b      	cmp	fp, r3
   b7cc8:	dd13      	ble.n	b7cf2 <__hexnan+0x7a>
   b7cca:	454c      	cmp	r4, r9
   b7ccc:	d206      	bcs.n	b7cdc <__hexnan+0x64>
   b7cce:	2d07      	cmp	r5, #7
   b7cd0:	dc04      	bgt.n	b7cdc <__hexnan+0x64>
   b7cd2:	462a      	mov	r2, r5
   b7cd4:	4649      	mov	r1, r9
   b7cd6:	4620      	mov	r0, r4
   b7cd8:	f7ff ffa8 	bl	b7c2c <L_shift>
   b7cdc:	4544      	cmp	r4, r8
   b7cde:	d950      	bls.n	b7d82 <__hexnan+0x10a>
   b7ce0:	2300      	movs	r3, #0
   b7ce2:	f1a4 0904 	sub.w	r9, r4, #4
   b7ce6:	f844 3c04 	str.w	r3, [r4, #-4]
   b7cea:	f8cd b008 	str.w	fp, [sp, #8]
   b7cee:	464c      	mov	r4, r9
   b7cf0:	461d      	mov	r5, r3
   b7cf2:	9a03      	ldr	r2, [sp, #12]
   b7cf4:	e7d7      	b.n	b7ca6 <__hexnan+0x2e>
   b7cf6:	2929      	cmp	r1, #41	; 0x29
   b7cf8:	d156      	bne.n	b7da8 <__hexnan+0x130>
   b7cfa:	3202      	adds	r2, #2
   b7cfc:	f8ca 2000 	str.w	r2, [sl]
   b7d00:	f1bb 0f00 	cmp.w	fp, #0
   b7d04:	d050      	beq.n	b7da8 <__hexnan+0x130>
   b7d06:	454c      	cmp	r4, r9
   b7d08:	d206      	bcs.n	b7d18 <__hexnan+0xa0>
   b7d0a:	2d07      	cmp	r5, #7
   b7d0c:	dc04      	bgt.n	b7d18 <__hexnan+0xa0>
   b7d0e:	462a      	mov	r2, r5
   b7d10:	4649      	mov	r1, r9
   b7d12:	4620      	mov	r0, r4
   b7d14:	f7ff ff8a 	bl	b7c2c <L_shift>
   b7d18:	4544      	cmp	r4, r8
   b7d1a:	d934      	bls.n	b7d86 <__hexnan+0x10e>
   b7d1c:	f1a8 0204 	sub.w	r2, r8, #4
   b7d20:	4623      	mov	r3, r4
   b7d22:	f853 1b04 	ldr.w	r1, [r3], #4
   b7d26:	f842 1f04 	str.w	r1, [r2, #4]!
   b7d2a:	429f      	cmp	r7, r3
   b7d2c:	d2f9      	bcs.n	b7d22 <__hexnan+0xaa>
   b7d2e:	1b3b      	subs	r3, r7, r4
   b7d30:	f023 0303 	bic.w	r3, r3, #3
   b7d34:	3304      	adds	r3, #4
   b7d36:	3401      	adds	r4, #1
   b7d38:	3e03      	subs	r6, #3
   b7d3a:	42b4      	cmp	r4, r6
   b7d3c:	bf88      	it	hi
   b7d3e:	2304      	movhi	r3, #4
   b7d40:	4443      	add	r3, r8
   b7d42:	2200      	movs	r2, #0
   b7d44:	f843 2b04 	str.w	r2, [r3], #4
   b7d48:	429f      	cmp	r7, r3
   b7d4a:	d2fb      	bcs.n	b7d44 <__hexnan+0xcc>
   b7d4c:	683b      	ldr	r3, [r7, #0]
   b7d4e:	b91b      	cbnz	r3, b7d58 <__hexnan+0xe0>
   b7d50:	4547      	cmp	r7, r8
   b7d52:	d127      	bne.n	b7da4 <__hexnan+0x12c>
   b7d54:	2301      	movs	r3, #1
   b7d56:	603b      	str	r3, [r7, #0]
   b7d58:	2005      	movs	r0, #5
   b7d5a:	e026      	b.n	b7daa <__hexnan+0x132>
   b7d5c:	3501      	adds	r5, #1
   b7d5e:	2d08      	cmp	r5, #8
   b7d60:	f10b 0b01 	add.w	fp, fp, #1
   b7d64:	dd06      	ble.n	b7d74 <__hexnan+0xfc>
   b7d66:	4544      	cmp	r4, r8
   b7d68:	d9c3      	bls.n	b7cf2 <__hexnan+0x7a>
   b7d6a:	2300      	movs	r3, #0
   b7d6c:	f844 3c04 	str.w	r3, [r4, #-4]
   b7d70:	2501      	movs	r5, #1
   b7d72:	3c04      	subs	r4, #4
   b7d74:	6822      	ldr	r2, [r4, #0]
   b7d76:	f000 000f 	and.w	r0, r0, #15
   b7d7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b7d7e:	6022      	str	r2, [r4, #0]
   b7d80:	e7b7      	b.n	b7cf2 <__hexnan+0x7a>
   b7d82:	2508      	movs	r5, #8
   b7d84:	e7b5      	b.n	b7cf2 <__hexnan+0x7a>
   b7d86:	9b01      	ldr	r3, [sp, #4]
   b7d88:	2b00      	cmp	r3, #0
   b7d8a:	d0df      	beq.n	b7d4c <__hexnan+0xd4>
   b7d8c:	f04f 32ff 	mov.w	r2, #4294967295
   b7d90:	f1c3 0320 	rsb	r3, r3, #32
   b7d94:	fa22 f303 	lsr.w	r3, r2, r3
   b7d98:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b7d9c:	401a      	ands	r2, r3
   b7d9e:	f846 2c04 	str.w	r2, [r6, #-4]
   b7da2:	e7d3      	b.n	b7d4c <__hexnan+0xd4>
   b7da4:	3f04      	subs	r7, #4
   b7da6:	e7d1      	b.n	b7d4c <__hexnan+0xd4>
   b7da8:	2004      	movs	r0, #4
   b7daa:	b007      	add	sp, #28
   b7dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7db0 <__retarget_lock_acquire_recursive>:
   b7db0:	4770      	bx	lr

000b7db2 <__retarget_lock_release>:
   b7db2:	4770      	bx	lr

000b7db4 <__retarget_lock_release_recursive>:
   b7db4:	4770      	bx	lr

000b7db6 <__ascii_mbtowc>:
   b7db6:	b082      	sub	sp, #8
   b7db8:	b901      	cbnz	r1, b7dbc <__ascii_mbtowc+0x6>
   b7dba:	a901      	add	r1, sp, #4
   b7dbc:	b142      	cbz	r2, b7dd0 <__ascii_mbtowc+0x1a>
   b7dbe:	b14b      	cbz	r3, b7dd4 <__ascii_mbtowc+0x1e>
   b7dc0:	7813      	ldrb	r3, [r2, #0]
   b7dc2:	600b      	str	r3, [r1, #0]
   b7dc4:	7812      	ldrb	r2, [r2, #0]
   b7dc6:	1e10      	subs	r0, r2, #0
   b7dc8:	bf18      	it	ne
   b7dca:	2001      	movne	r0, #1
   b7dcc:	b002      	add	sp, #8
   b7dce:	4770      	bx	lr
   b7dd0:	4610      	mov	r0, r2
   b7dd2:	e7fb      	b.n	b7dcc <__ascii_mbtowc+0x16>
   b7dd4:	f06f 0001 	mvn.w	r0, #1
   b7dd8:	e7f8      	b.n	b7dcc <__ascii_mbtowc+0x16>
	...

000b7ddc <_Balloc>:
   b7ddc:	b570      	push	{r4, r5, r6, lr}
   b7dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b7de0:	4604      	mov	r4, r0
   b7de2:	460d      	mov	r5, r1
   b7de4:	b976      	cbnz	r6, b7e04 <_Balloc+0x28>
   b7de6:	2010      	movs	r0, #16
   b7de8:	f7fc fe38 	bl	b4a5c <malloc>
   b7dec:	4602      	mov	r2, r0
   b7dee:	6260      	str	r0, [r4, #36]	; 0x24
   b7df0:	b920      	cbnz	r0, b7dfc <_Balloc+0x20>
   b7df2:	4b18      	ldr	r3, [pc, #96]	; (b7e54 <_Balloc+0x78>)
   b7df4:	4818      	ldr	r0, [pc, #96]	; (b7e58 <_Balloc+0x7c>)
   b7df6:	2166      	movs	r1, #102	; 0x66
   b7df8:	f7fc fe70 	bl	b4adc <__assert_func>
   b7dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b7e00:	6006      	str	r6, [r0, #0]
   b7e02:	60c6      	str	r6, [r0, #12]
   b7e04:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b7e06:	68f3      	ldr	r3, [r6, #12]
   b7e08:	b183      	cbz	r3, b7e2c <_Balloc+0x50>
   b7e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7e0c:	68db      	ldr	r3, [r3, #12]
   b7e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b7e12:	b9b8      	cbnz	r0, b7e44 <_Balloc+0x68>
   b7e14:	2101      	movs	r1, #1
   b7e16:	fa01 f605 	lsl.w	r6, r1, r5
   b7e1a:	1d72      	adds	r2, r6, #5
   b7e1c:	0092      	lsls	r2, r2, #2
   b7e1e:	4620      	mov	r0, r4
   b7e20:	f000 fc9d 	bl	b875e <_calloc_r>
   b7e24:	b160      	cbz	r0, b7e40 <_Balloc+0x64>
   b7e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b7e2a:	e00e      	b.n	b7e4a <_Balloc+0x6e>
   b7e2c:	2221      	movs	r2, #33	; 0x21
   b7e2e:	2104      	movs	r1, #4
   b7e30:	4620      	mov	r0, r4
   b7e32:	f000 fc94 	bl	b875e <_calloc_r>
   b7e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7e38:	60f0      	str	r0, [r6, #12]
   b7e3a:	68db      	ldr	r3, [r3, #12]
   b7e3c:	2b00      	cmp	r3, #0
   b7e3e:	d1e4      	bne.n	b7e0a <_Balloc+0x2e>
   b7e40:	2000      	movs	r0, #0
   b7e42:	bd70      	pop	{r4, r5, r6, pc}
   b7e44:	6802      	ldr	r2, [r0, #0]
   b7e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b7e4a:	2300      	movs	r3, #0
   b7e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b7e50:	e7f7      	b.n	b7e42 <_Balloc+0x66>
   b7e52:	bf00      	nop
   b7e54:	000b8b11 	.word	0x000b8b11
   b7e58:	000b8e34 	.word	0x000b8e34

000b7e5c <_Bfree>:
   b7e5c:	b570      	push	{r4, r5, r6, lr}
   b7e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b7e60:	4605      	mov	r5, r0
   b7e62:	460c      	mov	r4, r1
   b7e64:	b976      	cbnz	r6, b7e84 <_Bfree+0x28>
   b7e66:	2010      	movs	r0, #16
   b7e68:	f7fc fdf8 	bl	b4a5c <malloc>
   b7e6c:	4602      	mov	r2, r0
   b7e6e:	6268      	str	r0, [r5, #36]	; 0x24
   b7e70:	b920      	cbnz	r0, b7e7c <_Bfree+0x20>
   b7e72:	4b09      	ldr	r3, [pc, #36]	; (b7e98 <_Bfree+0x3c>)
   b7e74:	4809      	ldr	r0, [pc, #36]	; (b7e9c <_Bfree+0x40>)
   b7e76:	218a      	movs	r1, #138	; 0x8a
   b7e78:	f7fc fe30 	bl	b4adc <__assert_func>
   b7e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b7e80:	6006      	str	r6, [r0, #0]
   b7e82:	60c6      	str	r6, [r0, #12]
   b7e84:	b13c      	cbz	r4, b7e96 <_Bfree+0x3a>
   b7e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7e88:	6862      	ldr	r2, [r4, #4]
   b7e8a:	68db      	ldr	r3, [r3, #12]
   b7e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b7e90:	6021      	str	r1, [r4, #0]
   b7e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b7e96:	bd70      	pop	{r4, r5, r6, pc}
   b7e98:	000b8b11 	.word	0x000b8b11
   b7e9c:	000b8e34 	.word	0x000b8e34

000b7ea0 <__multadd>:
   b7ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ea4:	690d      	ldr	r5, [r1, #16]
   b7ea6:	4607      	mov	r7, r0
   b7ea8:	460c      	mov	r4, r1
   b7eaa:	461e      	mov	r6, r3
   b7eac:	f101 0c14 	add.w	ip, r1, #20
   b7eb0:	2000      	movs	r0, #0
   b7eb2:	f8dc 3000 	ldr.w	r3, [ip]
   b7eb6:	b299      	uxth	r1, r3
   b7eb8:	fb02 6101 	mla	r1, r2, r1, r6
   b7ebc:	0c1e      	lsrs	r6, r3, #16
   b7ebe:	0c0b      	lsrs	r3, r1, #16
   b7ec0:	fb02 3306 	mla	r3, r2, r6, r3
   b7ec4:	b289      	uxth	r1, r1
   b7ec6:	3001      	adds	r0, #1
   b7ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b7ecc:	4285      	cmp	r5, r0
   b7ece:	f84c 1b04 	str.w	r1, [ip], #4
   b7ed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b7ed6:	dcec      	bgt.n	b7eb2 <__multadd+0x12>
   b7ed8:	b30e      	cbz	r6, b7f1e <__multadd+0x7e>
   b7eda:	68a3      	ldr	r3, [r4, #8]
   b7edc:	42ab      	cmp	r3, r5
   b7ede:	dc19      	bgt.n	b7f14 <__multadd+0x74>
   b7ee0:	6861      	ldr	r1, [r4, #4]
   b7ee2:	4638      	mov	r0, r7
   b7ee4:	3101      	adds	r1, #1
   b7ee6:	f7ff ff79 	bl	b7ddc <_Balloc>
   b7eea:	4680      	mov	r8, r0
   b7eec:	b928      	cbnz	r0, b7efa <__multadd+0x5a>
   b7eee:	4602      	mov	r2, r0
   b7ef0:	4b0c      	ldr	r3, [pc, #48]	; (b7f24 <__multadd+0x84>)
   b7ef2:	480d      	ldr	r0, [pc, #52]	; (b7f28 <__multadd+0x88>)
   b7ef4:	21b5      	movs	r1, #181	; 0xb5
   b7ef6:	f7fc fdf1 	bl	b4adc <__assert_func>
   b7efa:	6922      	ldr	r2, [r4, #16]
   b7efc:	3202      	adds	r2, #2
   b7efe:	f104 010c 	add.w	r1, r4, #12
   b7f02:	0092      	lsls	r2, r2, #2
   b7f04:	300c      	adds	r0, #12
   b7f06:	f7fe fbd4 	bl	b66b2 <memcpy>
   b7f0a:	4621      	mov	r1, r4
   b7f0c:	4638      	mov	r0, r7
   b7f0e:	f7ff ffa5 	bl	b7e5c <_Bfree>
   b7f12:	4644      	mov	r4, r8
   b7f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b7f18:	3501      	adds	r5, #1
   b7f1a:	615e      	str	r6, [r3, #20]
   b7f1c:	6125      	str	r5, [r4, #16]
   b7f1e:	4620      	mov	r0, r4
   b7f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7f24:	000b8d88 	.word	0x000b8d88
   b7f28:	000b8e34 	.word	0x000b8e34

000b7f2c <__s2b>:
   b7f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f30:	460c      	mov	r4, r1
   b7f32:	4615      	mov	r5, r2
   b7f34:	461f      	mov	r7, r3
   b7f36:	2209      	movs	r2, #9
   b7f38:	3308      	adds	r3, #8
   b7f3a:	4606      	mov	r6, r0
   b7f3c:	fb93 f3f2 	sdiv	r3, r3, r2
   b7f40:	2100      	movs	r1, #0
   b7f42:	2201      	movs	r2, #1
   b7f44:	429a      	cmp	r2, r3
   b7f46:	db09      	blt.n	b7f5c <__s2b+0x30>
   b7f48:	4630      	mov	r0, r6
   b7f4a:	f7ff ff47 	bl	b7ddc <_Balloc>
   b7f4e:	b940      	cbnz	r0, b7f62 <__s2b+0x36>
   b7f50:	4602      	mov	r2, r0
   b7f52:	4b19      	ldr	r3, [pc, #100]	; (b7fb8 <__s2b+0x8c>)
   b7f54:	4819      	ldr	r0, [pc, #100]	; (b7fbc <__s2b+0x90>)
   b7f56:	21ce      	movs	r1, #206	; 0xce
   b7f58:	f7fc fdc0 	bl	b4adc <__assert_func>
   b7f5c:	0052      	lsls	r2, r2, #1
   b7f5e:	3101      	adds	r1, #1
   b7f60:	e7f0      	b.n	b7f44 <__s2b+0x18>
   b7f62:	9b08      	ldr	r3, [sp, #32]
   b7f64:	6143      	str	r3, [r0, #20]
   b7f66:	2d09      	cmp	r5, #9
   b7f68:	f04f 0301 	mov.w	r3, #1
   b7f6c:	6103      	str	r3, [r0, #16]
   b7f6e:	dd16      	ble.n	b7f9e <__s2b+0x72>
   b7f70:	f104 0909 	add.w	r9, r4, #9
   b7f74:	46c8      	mov	r8, r9
   b7f76:	442c      	add	r4, r5
   b7f78:	f818 3b01 	ldrb.w	r3, [r8], #1
   b7f7c:	4601      	mov	r1, r0
   b7f7e:	3b30      	subs	r3, #48	; 0x30
   b7f80:	220a      	movs	r2, #10
   b7f82:	4630      	mov	r0, r6
   b7f84:	f7ff ff8c 	bl	b7ea0 <__multadd>
   b7f88:	45a0      	cmp	r8, r4
   b7f8a:	d1f5      	bne.n	b7f78 <__s2b+0x4c>
   b7f8c:	f1a5 0408 	sub.w	r4, r5, #8
   b7f90:	444c      	add	r4, r9
   b7f92:	1b2d      	subs	r5, r5, r4
   b7f94:	1963      	adds	r3, r4, r5
   b7f96:	42bb      	cmp	r3, r7
   b7f98:	db04      	blt.n	b7fa4 <__s2b+0x78>
   b7f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7f9e:	340a      	adds	r4, #10
   b7fa0:	2509      	movs	r5, #9
   b7fa2:	e7f6      	b.n	b7f92 <__s2b+0x66>
   b7fa4:	f814 3b01 	ldrb.w	r3, [r4], #1
   b7fa8:	4601      	mov	r1, r0
   b7faa:	3b30      	subs	r3, #48	; 0x30
   b7fac:	220a      	movs	r2, #10
   b7fae:	4630      	mov	r0, r6
   b7fb0:	f7ff ff76 	bl	b7ea0 <__multadd>
   b7fb4:	e7ee      	b.n	b7f94 <__s2b+0x68>
   b7fb6:	bf00      	nop
   b7fb8:	000b8d88 	.word	0x000b8d88
   b7fbc:	000b8e34 	.word	0x000b8e34

000b7fc0 <__hi0bits>:
   b7fc0:	0c03      	lsrs	r3, r0, #16
   b7fc2:	041b      	lsls	r3, r3, #16
   b7fc4:	b9d3      	cbnz	r3, b7ffc <__hi0bits+0x3c>
   b7fc6:	0400      	lsls	r0, r0, #16
   b7fc8:	2310      	movs	r3, #16
   b7fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b7fce:	bf04      	itt	eq
   b7fd0:	0200      	lsleq	r0, r0, #8
   b7fd2:	3308      	addeq	r3, #8
   b7fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b7fd8:	bf04      	itt	eq
   b7fda:	0100      	lsleq	r0, r0, #4
   b7fdc:	3304      	addeq	r3, #4
   b7fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b7fe2:	bf04      	itt	eq
   b7fe4:	0080      	lsleq	r0, r0, #2
   b7fe6:	3302      	addeq	r3, #2
   b7fe8:	2800      	cmp	r0, #0
   b7fea:	db05      	blt.n	b7ff8 <__hi0bits+0x38>
   b7fec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b7ff0:	f103 0301 	add.w	r3, r3, #1
   b7ff4:	bf08      	it	eq
   b7ff6:	2320      	moveq	r3, #32
   b7ff8:	4618      	mov	r0, r3
   b7ffa:	4770      	bx	lr
   b7ffc:	2300      	movs	r3, #0
   b7ffe:	e7e4      	b.n	b7fca <__hi0bits+0xa>

000b8000 <__lo0bits>:
   b8000:	6803      	ldr	r3, [r0, #0]
   b8002:	f013 0207 	ands.w	r2, r3, #7
   b8006:	4601      	mov	r1, r0
   b8008:	d00b      	beq.n	b8022 <__lo0bits+0x22>
   b800a:	07da      	lsls	r2, r3, #31
   b800c:	d423      	bmi.n	b8056 <__lo0bits+0x56>
   b800e:	0798      	lsls	r0, r3, #30
   b8010:	bf49      	itett	mi
   b8012:	085b      	lsrmi	r3, r3, #1
   b8014:	089b      	lsrpl	r3, r3, #2
   b8016:	2001      	movmi	r0, #1
   b8018:	600b      	strmi	r3, [r1, #0]
   b801a:	bf5c      	itt	pl
   b801c:	600b      	strpl	r3, [r1, #0]
   b801e:	2002      	movpl	r0, #2
   b8020:	4770      	bx	lr
   b8022:	b298      	uxth	r0, r3
   b8024:	b9a8      	cbnz	r0, b8052 <__lo0bits+0x52>
   b8026:	0c1b      	lsrs	r3, r3, #16
   b8028:	2010      	movs	r0, #16
   b802a:	b2da      	uxtb	r2, r3
   b802c:	b90a      	cbnz	r2, b8032 <__lo0bits+0x32>
   b802e:	3008      	adds	r0, #8
   b8030:	0a1b      	lsrs	r3, r3, #8
   b8032:	071a      	lsls	r2, r3, #28
   b8034:	bf04      	itt	eq
   b8036:	091b      	lsreq	r3, r3, #4
   b8038:	3004      	addeq	r0, #4
   b803a:	079a      	lsls	r2, r3, #30
   b803c:	bf04      	itt	eq
   b803e:	089b      	lsreq	r3, r3, #2
   b8040:	3002      	addeq	r0, #2
   b8042:	07da      	lsls	r2, r3, #31
   b8044:	d403      	bmi.n	b804e <__lo0bits+0x4e>
   b8046:	085b      	lsrs	r3, r3, #1
   b8048:	f100 0001 	add.w	r0, r0, #1
   b804c:	d005      	beq.n	b805a <__lo0bits+0x5a>
   b804e:	600b      	str	r3, [r1, #0]
   b8050:	4770      	bx	lr
   b8052:	4610      	mov	r0, r2
   b8054:	e7e9      	b.n	b802a <__lo0bits+0x2a>
   b8056:	2000      	movs	r0, #0
   b8058:	4770      	bx	lr
   b805a:	2020      	movs	r0, #32
   b805c:	4770      	bx	lr
	...

000b8060 <__i2b>:
   b8060:	b510      	push	{r4, lr}
   b8062:	460c      	mov	r4, r1
   b8064:	2101      	movs	r1, #1
   b8066:	f7ff feb9 	bl	b7ddc <_Balloc>
   b806a:	4602      	mov	r2, r0
   b806c:	b928      	cbnz	r0, b807a <__i2b+0x1a>
   b806e:	4b05      	ldr	r3, [pc, #20]	; (b8084 <__i2b+0x24>)
   b8070:	4805      	ldr	r0, [pc, #20]	; (b8088 <__i2b+0x28>)
   b8072:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b8076:	f7fc fd31 	bl	b4adc <__assert_func>
   b807a:	2301      	movs	r3, #1
   b807c:	6144      	str	r4, [r0, #20]
   b807e:	6103      	str	r3, [r0, #16]
   b8080:	bd10      	pop	{r4, pc}
   b8082:	bf00      	nop
   b8084:	000b8d88 	.word	0x000b8d88
   b8088:	000b8e34 	.word	0x000b8e34

000b808c <__multiply>:
   b808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8090:	4691      	mov	r9, r2
   b8092:	690a      	ldr	r2, [r1, #16]
   b8094:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b8098:	429a      	cmp	r2, r3
   b809a:	bfb8      	it	lt
   b809c:	460b      	movlt	r3, r1
   b809e:	460c      	mov	r4, r1
   b80a0:	bfbc      	itt	lt
   b80a2:	464c      	movlt	r4, r9
   b80a4:	4699      	movlt	r9, r3
   b80a6:	6927      	ldr	r7, [r4, #16]
   b80a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b80ac:	68a3      	ldr	r3, [r4, #8]
   b80ae:	6861      	ldr	r1, [r4, #4]
   b80b0:	eb07 060a 	add.w	r6, r7, sl
   b80b4:	42b3      	cmp	r3, r6
   b80b6:	b085      	sub	sp, #20
   b80b8:	bfb8      	it	lt
   b80ba:	3101      	addlt	r1, #1
   b80bc:	f7ff fe8e 	bl	b7ddc <_Balloc>
   b80c0:	b930      	cbnz	r0, b80d0 <__multiply+0x44>
   b80c2:	4602      	mov	r2, r0
   b80c4:	4b44      	ldr	r3, [pc, #272]	; (b81d8 <__multiply+0x14c>)
   b80c6:	4845      	ldr	r0, [pc, #276]	; (b81dc <__multiply+0x150>)
   b80c8:	f240 115d 	movw	r1, #349	; 0x15d
   b80cc:	f7fc fd06 	bl	b4adc <__assert_func>
   b80d0:	f100 0514 	add.w	r5, r0, #20
   b80d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b80d8:	462b      	mov	r3, r5
   b80da:	2200      	movs	r2, #0
   b80dc:	4543      	cmp	r3, r8
   b80de:	d321      	bcc.n	b8124 <__multiply+0x98>
   b80e0:	f104 0314 	add.w	r3, r4, #20
   b80e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b80e8:	f109 0314 	add.w	r3, r9, #20
   b80ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b80f0:	9202      	str	r2, [sp, #8]
   b80f2:	1b3a      	subs	r2, r7, r4
   b80f4:	3a15      	subs	r2, #21
   b80f6:	f022 0203 	bic.w	r2, r2, #3
   b80fa:	3204      	adds	r2, #4
   b80fc:	f104 0115 	add.w	r1, r4, #21
   b8100:	428f      	cmp	r7, r1
   b8102:	bf38      	it	cc
   b8104:	2204      	movcc	r2, #4
   b8106:	9201      	str	r2, [sp, #4]
   b8108:	9a02      	ldr	r2, [sp, #8]
   b810a:	9303      	str	r3, [sp, #12]
   b810c:	429a      	cmp	r2, r3
   b810e:	d80c      	bhi.n	b812a <__multiply+0x9e>
   b8110:	2e00      	cmp	r6, #0
   b8112:	dd03      	ble.n	b811c <__multiply+0x90>
   b8114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b8118:	2b00      	cmp	r3, #0
   b811a:	d05a      	beq.n	b81d2 <__multiply+0x146>
   b811c:	6106      	str	r6, [r0, #16]
   b811e:	b005      	add	sp, #20
   b8120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8124:	f843 2b04 	str.w	r2, [r3], #4
   b8128:	e7d8      	b.n	b80dc <__multiply+0x50>
   b812a:	f8b3 a000 	ldrh.w	sl, [r3]
   b812e:	f1ba 0f00 	cmp.w	sl, #0
   b8132:	d024      	beq.n	b817e <__multiply+0xf2>
   b8134:	f104 0e14 	add.w	lr, r4, #20
   b8138:	46a9      	mov	r9, r5
   b813a:	f04f 0c00 	mov.w	ip, #0
   b813e:	f85e 2b04 	ldr.w	r2, [lr], #4
   b8142:	f8d9 1000 	ldr.w	r1, [r9]
   b8146:	fa1f fb82 	uxth.w	fp, r2
   b814a:	b289      	uxth	r1, r1
   b814c:	fb0a 110b 	mla	r1, sl, fp, r1
   b8150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b8154:	f8d9 2000 	ldr.w	r2, [r9]
   b8158:	4461      	add	r1, ip
   b815a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b815e:	fb0a c20b 	mla	r2, sl, fp, ip
   b8162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b8166:	b289      	uxth	r1, r1
   b8168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b816c:	4577      	cmp	r7, lr
   b816e:	f849 1b04 	str.w	r1, [r9], #4
   b8172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b8176:	d8e2      	bhi.n	b813e <__multiply+0xb2>
   b8178:	9a01      	ldr	r2, [sp, #4]
   b817a:	f845 c002 	str.w	ip, [r5, r2]
   b817e:	9a03      	ldr	r2, [sp, #12]
   b8180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b8184:	3304      	adds	r3, #4
   b8186:	f1b9 0f00 	cmp.w	r9, #0
   b818a:	d020      	beq.n	b81ce <__multiply+0x142>
   b818c:	6829      	ldr	r1, [r5, #0]
   b818e:	f104 0c14 	add.w	ip, r4, #20
   b8192:	46ae      	mov	lr, r5
   b8194:	f04f 0a00 	mov.w	sl, #0
   b8198:	f8bc b000 	ldrh.w	fp, [ip]
   b819c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b81a0:	fb09 220b 	mla	r2, r9, fp, r2
   b81a4:	4492      	add	sl, r2
   b81a6:	b289      	uxth	r1, r1
   b81a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b81ac:	f84e 1b04 	str.w	r1, [lr], #4
   b81b0:	f85c 2b04 	ldr.w	r2, [ip], #4
   b81b4:	f8be 1000 	ldrh.w	r1, [lr]
   b81b8:	0c12      	lsrs	r2, r2, #16
   b81ba:	fb09 1102 	mla	r1, r9, r2, r1
   b81be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b81c2:	4567      	cmp	r7, ip
   b81c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b81c8:	d8e6      	bhi.n	b8198 <__multiply+0x10c>
   b81ca:	9a01      	ldr	r2, [sp, #4]
   b81cc:	50a9      	str	r1, [r5, r2]
   b81ce:	3504      	adds	r5, #4
   b81d0:	e79a      	b.n	b8108 <__multiply+0x7c>
   b81d2:	3e01      	subs	r6, #1
   b81d4:	e79c      	b.n	b8110 <__multiply+0x84>
   b81d6:	bf00      	nop
   b81d8:	000b8d88 	.word	0x000b8d88
   b81dc:	000b8e34 	.word	0x000b8e34

000b81e0 <__pow5mult>:
   b81e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b81e4:	4615      	mov	r5, r2
   b81e6:	f012 0203 	ands.w	r2, r2, #3
   b81ea:	4606      	mov	r6, r0
   b81ec:	460f      	mov	r7, r1
   b81ee:	d007      	beq.n	b8200 <__pow5mult+0x20>
   b81f0:	4c25      	ldr	r4, [pc, #148]	; (b8288 <__pow5mult+0xa8>)
   b81f2:	3a01      	subs	r2, #1
   b81f4:	2300      	movs	r3, #0
   b81f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b81fa:	f7ff fe51 	bl	b7ea0 <__multadd>
   b81fe:	4607      	mov	r7, r0
   b8200:	10ad      	asrs	r5, r5, #2
   b8202:	d03d      	beq.n	b8280 <__pow5mult+0xa0>
   b8204:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b8206:	b97c      	cbnz	r4, b8228 <__pow5mult+0x48>
   b8208:	2010      	movs	r0, #16
   b820a:	f7fc fc27 	bl	b4a5c <malloc>
   b820e:	4602      	mov	r2, r0
   b8210:	6270      	str	r0, [r6, #36]	; 0x24
   b8212:	b928      	cbnz	r0, b8220 <__pow5mult+0x40>
   b8214:	4b1d      	ldr	r3, [pc, #116]	; (b828c <__pow5mult+0xac>)
   b8216:	481e      	ldr	r0, [pc, #120]	; (b8290 <__pow5mult+0xb0>)
   b8218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b821c:	f7fc fc5e 	bl	b4adc <__assert_func>
   b8220:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8224:	6004      	str	r4, [r0, #0]
   b8226:	60c4      	str	r4, [r0, #12]
   b8228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b822c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b8230:	b94c      	cbnz	r4, b8246 <__pow5mult+0x66>
   b8232:	f240 2171 	movw	r1, #625	; 0x271
   b8236:	4630      	mov	r0, r6
   b8238:	f7ff ff12 	bl	b8060 <__i2b>
   b823c:	2300      	movs	r3, #0
   b823e:	f8c8 0008 	str.w	r0, [r8, #8]
   b8242:	4604      	mov	r4, r0
   b8244:	6003      	str	r3, [r0, #0]
   b8246:	f04f 0900 	mov.w	r9, #0
   b824a:	07eb      	lsls	r3, r5, #31
   b824c:	d50a      	bpl.n	b8264 <__pow5mult+0x84>
   b824e:	4639      	mov	r1, r7
   b8250:	4622      	mov	r2, r4
   b8252:	4630      	mov	r0, r6
   b8254:	f7ff ff1a 	bl	b808c <__multiply>
   b8258:	4639      	mov	r1, r7
   b825a:	4680      	mov	r8, r0
   b825c:	4630      	mov	r0, r6
   b825e:	f7ff fdfd 	bl	b7e5c <_Bfree>
   b8262:	4647      	mov	r7, r8
   b8264:	106d      	asrs	r5, r5, #1
   b8266:	d00b      	beq.n	b8280 <__pow5mult+0xa0>
   b8268:	6820      	ldr	r0, [r4, #0]
   b826a:	b938      	cbnz	r0, b827c <__pow5mult+0x9c>
   b826c:	4622      	mov	r2, r4
   b826e:	4621      	mov	r1, r4
   b8270:	4630      	mov	r0, r6
   b8272:	f7ff ff0b 	bl	b808c <__multiply>
   b8276:	6020      	str	r0, [r4, #0]
   b8278:	f8c0 9000 	str.w	r9, [r0]
   b827c:	4604      	mov	r4, r0
   b827e:	e7e4      	b.n	b824a <__pow5mult+0x6a>
   b8280:	4638      	mov	r0, r7
   b8282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8286:	bf00      	nop
   b8288:	000b8fa8 	.word	0x000b8fa8
   b828c:	000b8b11 	.word	0x000b8b11
   b8290:	000b8e34 	.word	0x000b8e34

000b8294 <__lshift>:
   b8294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8298:	460c      	mov	r4, r1
   b829a:	6849      	ldr	r1, [r1, #4]
   b829c:	6923      	ldr	r3, [r4, #16]
   b829e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b82a2:	68a3      	ldr	r3, [r4, #8]
   b82a4:	4607      	mov	r7, r0
   b82a6:	4691      	mov	r9, r2
   b82a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b82ac:	f108 0601 	add.w	r6, r8, #1
   b82b0:	42b3      	cmp	r3, r6
   b82b2:	db0b      	blt.n	b82cc <__lshift+0x38>
   b82b4:	4638      	mov	r0, r7
   b82b6:	f7ff fd91 	bl	b7ddc <_Balloc>
   b82ba:	4605      	mov	r5, r0
   b82bc:	b948      	cbnz	r0, b82d2 <__lshift+0x3e>
   b82be:	4602      	mov	r2, r0
   b82c0:	4b2a      	ldr	r3, [pc, #168]	; (b836c <__lshift+0xd8>)
   b82c2:	482b      	ldr	r0, [pc, #172]	; (b8370 <__lshift+0xdc>)
   b82c4:	f240 11d9 	movw	r1, #473	; 0x1d9
   b82c8:	f7fc fc08 	bl	b4adc <__assert_func>
   b82cc:	3101      	adds	r1, #1
   b82ce:	005b      	lsls	r3, r3, #1
   b82d0:	e7ee      	b.n	b82b0 <__lshift+0x1c>
   b82d2:	2300      	movs	r3, #0
   b82d4:	f100 0114 	add.w	r1, r0, #20
   b82d8:	f100 0210 	add.w	r2, r0, #16
   b82dc:	4618      	mov	r0, r3
   b82de:	4553      	cmp	r3, sl
   b82e0:	db37      	blt.n	b8352 <__lshift+0xbe>
   b82e2:	6920      	ldr	r0, [r4, #16]
   b82e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b82e8:	f104 0314 	add.w	r3, r4, #20
   b82ec:	f019 091f 	ands.w	r9, r9, #31
   b82f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b82f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b82f8:	d02f      	beq.n	b835a <__lshift+0xc6>
   b82fa:	f1c9 0e20 	rsb	lr, r9, #32
   b82fe:	468a      	mov	sl, r1
   b8300:	f04f 0c00 	mov.w	ip, #0
   b8304:	681a      	ldr	r2, [r3, #0]
   b8306:	fa02 f209 	lsl.w	r2, r2, r9
   b830a:	ea42 020c 	orr.w	r2, r2, ip
   b830e:	f84a 2b04 	str.w	r2, [sl], #4
   b8312:	f853 2b04 	ldr.w	r2, [r3], #4
   b8316:	4298      	cmp	r0, r3
   b8318:	fa22 fc0e 	lsr.w	ip, r2, lr
   b831c:	d8f2      	bhi.n	b8304 <__lshift+0x70>
   b831e:	1b03      	subs	r3, r0, r4
   b8320:	3b15      	subs	r3, #21
   b8322:	f023 0303 	bic.w	r3, r3, #3
   b8326:	3304      	adds	r3, #4
   b8328:	f104 0215 	add.w	r2, r4, #21
   b832c:	4290      	cmp	r0, r2
   b832e:	bf38      	it	cc
   b8330:	2304      	movcc	r3, #4
   b8332:	f841 c003 	str.w	ip, [r1, r3]
   b8336:	f1bc 0f00 	cmp.w	ip, #0
   b833a:	d001      	beq.n	b8340 <__lshift+0xac>
   b833c:	f108 0602 	add.w	r6, r8, #2
   b8340:	3e01      	subs	r6, #1
   b8342:	4638      	mov	r0, r7
   b8344:	612e      	str	r6, [r5, #16]
   b8346:	4621      	mov	r1, r4
   b8348:	f7ff fd88 	bl	b7e5c <_Bfree>
   b834c:	4628      	mov	r0, r5
   b834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8352:	f842 0f04 	str.w	r0, [r2, #4]!
   b8356:	3301      	adds	r3, #1
   b8358:	e7c1      	b.n	b82de <__lshift+0x4a>
   b835a:	3904      	subs	r1, #4
   b835c:	f853 2b04 	ldr.w	r2, [r3], #4
   b8360:	f841 2f04 	str.w	r2, [r1, #4]!
   b8364:	4298      	cmp	r0, r3
   b8366:	d8f9      	bhi.n	b835c <__lshift+0xc8>
   b8368:	e7ea      	b.n	b8340 <__lshift+0xac>
   b836a:	bf00      	nop
   b836c:	000b8d88 	.word	0x000b8d88
   b8370:	000b8e34 	.word	0x000b8e34

000b8374 <__mcmp>:
   b8374:	b530      	push	{r4, r5, lr}
   b8376:	6902      	ldr	r2, [r0, #16]
   b8378:	690c      	ldr	r4, [r1, #16]
   b837a:	1b12      	subs	r2, r2, r4
   b837c:	d10e      	bne.n	b839c <__mcmp+0x28>
   b837e:	f100 0314 	add.w	r3, r0, #20
   b8382:	3114      	adds	r1, #20
   b8384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b8388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b838c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b8390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b8394:	42a5      	cmp	r5, r4
   b8396:	d003      	beq.n	b83a0 <__mcmp+0x2c>
   b8398:	d305      	bcc.n	b83a6 <__mcmp+0x32>
   b839a:	2201      	movs	r2, #1
   b839c:	4610      	mov	r0, r2
   b839e:	bd30      	pop	{r4, r5, pc}
   b83a0:	4283      	cmp	r3, r0
   b83a2:	d3f3      	bcc.n	b838c <__mcmp+0x18>
   b83a4:	e7fa      	b.n	b839c <__mcmp+0x28>
   b83a6:	f04f 32ff 	mov.w	r2, #4294967295
   b83aa:	e7f7      	b.n	b839c <__mcmp+0x28>

000b83ac <__mdiff>:
   b83ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b83b0:	460c      	mov	r4, r1
   b83b2:	4606      	mov	r6, r0
   b83b4:	4611      	mov	r1, r2
   b83b6:	4620      	mov	r0, r4
   b83b8:	4690      	mov	r8, r2
   b83ba:	f7ff ffdb 	bl	b8374 <__mcmp>
   b83be:	1e05      	subs	r5, r0, #0
   b83c0:	d110      	bne.n	b83e4 <__mdiff+0x38>
   b83c2:	4629      	mov	r1, r5
   b83c4:	4630      	mov	r0, r6
   b83c6:	f7ff fd09 	bl	b7ddc <_Balloc>
   b83ca:	b930      	cbnz	r0, b83da <__mdiff+0x2e>
   b83cc:	4b3a      	ldr	r3, [pc, #232]	; (b84b8 <__mdiff+0x10c>)
   b83ce:	4602      	mov	r2, r0
   b83d0:	f240 2132 	movw	r1, #562	; 0x232
   b83d4:	4839      	ldr	r0, [pc, #228]	; (b84bc <__mdiff+0x110>)
   b83d6:	f7fc fb81 	bl	b4adc <__assert_func>
   b83da:	2301      	movs	r3, #1
   b83dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b83e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b83e4:	bfa4      	itt	ge
   b83e6:	4643      	movge	r3, r8
   b83e8:	46a0      	movge	r8, r4
   b83ea:	4630      	mov	r0, r6
   b83ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b83f0:	bfa6      	itte	ge
   b83f2:	461c      	movge	r4, r3
   b83f4:	2500      	movge	r5, #0
   b83f6:	2501      	movlt	r5, #1
   b83f8:	f7ff fcf0 	bl	b7ddc <_Balloc>
   b83fc:	b920      	cbnz	r0, b8408 <__mdiff+0x5c>
   b83fe:	4b2e      	ldr	r3, [pc, #184]	; (b84b8 <__mdiff+0x10c>)
   b8400:	4602      	mov	r2, r0
   b8402:	f44f 7110 	mov.w	r1, #576	; 0x240
   b8406:	e7e5      	b.n	b83d4 <__mdiff+0x28>
   b8408:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b840c:	6926      	ldr	r6, [r4, #16]
   b840e:	60c5      	str	r5, [r0, #12]
   b8410:	f104 0914 	add.w	r9, r4, #20
   b8414:	f108 0514 	add.w	r5, r8, #20
   b8418:	f100 0e14 	add.w	lr, r0, #20
   b841c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b8420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b8424:	f108 0210 	add.w	r2, r8, #16
   b8428:	46f2      	mov	sl, lr
   b842a:	2100      	movs	r1, #0
   b842c:	f859 3b04 	ldr.w	r3, [r9], #4
   b8430:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b8434:	fa1f f883 	uxth.w	r8, r3
   b8438:	fa11 f18b 	uxtah	r1, r1, fp
   b843c:	0c1b      	lsrs	r3, r3, #16
   b843e:	eba1 0808 	sub.w	r8, r1, r8
   b8442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b8446:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b844a:	fa1f f888 	uxth.w	r8, r8
   b844e:	1419      	asrs	r1, r3, #16
   b8450:	454e      	cmp	r6, r9
   b8452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b8456:	f84a 3b04 	str.w	r3, [sl], #4
   b845a:	d8e7      	bhi.n	b842c <__mdiff+0x80>
   b845c:	1b33      	subs	r3, r6, r4
   b845e:	3b15      	subs	r3, #21
   b8460:	f023 0303 	bic.w	r3, r3, #3
   b8464:	3304      	adds	r3, #4
   b8466:	3415      	adds	r4, #21
   b8468:	42a6      	cmp	r6, r4
   b846a:	bf38      	it	cc
   b846c:	2304      	movcc	r3, #4
   b846e:	441d      	add	r5, r3
   b8470:	4473      	add	r3, lr
   b8472:	469e      	mov	lr, r3
   b8474:	462e      	mov	r6, r5
   b8476:	4566      	cmp	r6, ip
   b8478:	d30e      	bcc.n	b8498 <__mdiff+0xec>
   b847a:	f10c 0203 	add.w	r2, ip, #3
   b847e:	1b52      	subs	r2, r2, r5
   b8480:	f022 0203 	bic.w	r2, r2, #3
   b8484:	3d03      	subs	r5, #3
   b8486:	45ac      	cmp	ip, r5
   b8488:	bf38      	it	cc
   b848a:	2200      	movcc	r2, #0
   b848c:	441a      	add	r2, r3
   b848e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b8492:	b17b      	cbz	r3, b84b4 <__mdiff+0x108>
   b8494:	6107      	str	r7, [r0, #16]
   b8496:	e7a3      	b.n	b83e0 <__mdiff+0x34>
   b8498:	f856 8b04 	ldr.w	r8, [r6], #4
   b849c:	fa11 f288 	uxtah	r2, r1, r8
   b84a0:	1414      	asrs	r4, r2, #16
   b84a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b84a6:	b292      	uxth	r2, r2
   b84a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b84ac:	f84e 2b04 	str.w	r2, [lr], #4
   b84b0:	1421      	asrs	r1, r4, #16
   b84b2:	e7e0      	b.n	b8476 <__mdiff+0xca>
   b84b4:	3f01      	subs	r7, #1
   b84b6:	e7ea      	b.n	b848e <__mdiff+0xe2>
   b84b8:	000b8d88 	.word	0x000b8d88
   b84bc:	000b8e34 	.word	0x000b8e34

000b84c0 <__ulp>:
   b84c0:	b082      	sub	sp, #8
   b84c2:	ed8d 0b00 	vstr	d0, [sp]
   b84c6:	9b01      	ldr	r3, [sp, #4]
   b84c8:	4912      	ldr	r1, [pc, #72]	; (b8514 <__ulp+0x54>)
   b84ca:	4019      	ands	r1, r3
   b84cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b84d0:	2900      	cmp	r1, #0
   b84d2:	dd05      	ble.n	b84e0 <__ulp+0x20>
   b84d4:	2200      	movs	r2, #0
   b84d6:	460b      	mov	r3, r1
   b84d8:	ec43 2b10 	vmov	d0, r2, r3
   b84dc:	b002      	add	sp, #8
   b84de:	4770      	bx	lr
   b84e0:	4249      	negs	r1, r1
   b84e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b84e6:	ea4f 5021 	mov.w	r0, r1, asr #20
   b84ea:	f04f 0200 	mov.w	r2, #0
   b84ee:	f04f 0300 	mov.w	r3, #0
   b84f2:	da04      	bge.n	b84fe <__ulp+0x3e>
   b84f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b84f8:	fa41 f300 	asr.w	r3, r1, r0
   b84fc:	e7ec      	b.n	b84d8 <__ulp+0x18>
   b84fe:	f1a0 0114 	sub.w	r1, r0, #20
   b8502:	291e      	cmp	r1, #30
   b8504:	bfda      	itte	le
   b8506:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b850a:	fa20 f101 	lsrle.w	r1, r0, r1
   b850e:	2101      	movgt	r1, #1
   b8510:	460a      	mov	r2, r1
   b8512:	e7e1      	b.n	b84d8 <__ulp+0x18>
   b8514:	7ff00000 	.word	0x7ff00000

000b8518 <__b2d>:
   b8518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b851a:	6905      	ldr	r5, [r0, #16]
   b851c:	f100 0714 	add.w	r7, r0, #20
   b8520:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b8524:	1f2e      	subs	r6, r5, #4
   b8526:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b852a:	4620      	mov	r0, r4
   b852c:	f7ff fd48 	bl	b7fc0 <__hi0bits>
   b8530:	f1c0 0320 	rsb	r3, r0, #32
   b8534:	280a      	cmp	r0, #10
   b8536:	f8df c07c 	ldr.w	ip, [pc, #124]	; b85b4 <__b2d+0x9c>
   b853a:	600b      	str	r3, [r1, #0]
   b853c:	dc14      	bgt.n	b8568 <__b2d+0x50>
   b853e:	f1c0 0e0b 	rsb	lr, r0, #11
   b8542:	fa24 f10e 	lsr.w	r1, r4, lr
   b8546:	42b7      	cmp	r7, r6
   b8548:	ea41 030c 	orr.w	r3, r1, ip
   b854c:	bf34      	ite	cc
   b854e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8552:	2100      	movcs	r1, #0
   b8554:	3015      	adds	r0, #21
   b8556:	fa04 f000 	lsl.w	r0, r4, r0
   b855a:	fa21 f10e 	lsr.w	r1, r1, lr
   b855e:	ea40 0201 	orr.w	r2, r0, r1
   b8562:	ec43 2b10 	vmov	d0, r2, r3
   b8566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8568:	42b7      	cmp	r7, r6
   b856a:	bf3a      	itte	cc
   b856c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8570:	f1a5 0608 	subcc.w	r6, r5, #8
   b8574:	2100      	movcs	r1, #0
   b8576:	380b      	subs	r0, #11
   b8578:	d017      	beq.n	b85aa <__b2d+0x92>
   b857a:	f1c0 0c20 	rsb	ip, r0, #32
   b857e:	fa04 f500 	lsl.w	r5, r4, r0
   b8582:	42be      	cmp	r6, r7
   b8584:	fa21 f40c 	lsr.w	r4, r1, ip
   b8588:	ea45 0504 	orr.w	r5, r5, r4
   b858c:	bf8c      	ite	hi
   b858e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b8592:	2400      	movls	r4, #0
   b8594:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b8598:	fa01 f000 	lsl.w	r0, r1, r0
   b859c:	fa24 f40c 	lsr.w	r4, r4, ip
   b85a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b85a4:	ea40 0204 	orr.w	r2, r0, r4
   b85a8:	e7db      	b.n	b8562 <__b2d+0x4a>
   b85aa:	ea44 030c 	orr.w	r3, r4, ip
   b85ae:	460a      	mov	r2, r1
   b85b0:	e7d7      	b.n	b8562 <__b2d+0x4a>
   b85b2:	bf00      	nop
   b85b4:	3ff00000 	.word	0x3ff00000

000b85b8 <__d2b>:
   b85b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b85bc:	4689      	mov	r9, r1
   b85be:	2101      	movs	r1, #1
   b85c0:	ec57 6b10 	vmov	r6, r7, d0
   b85c4:	4690      	mov	r8, r2
   b85c6:	f7ff fc09 	bl	b7ddc <_Balloc>
   b85ca:	4604      	mov	r4, r0
   b85cc:	b930      	cbnz	r0, b85dc <__d2b+0x24>
   b85ce:	4602      	mov	r2, r0
   b85d0:	4b25      	ldr	r3, [pc, #148]	; (b8668 <__d2b+0xb0>)
   b85d2:	4826      	ldr	r0, [pc, #152]	; (b866c <__d2b+0xb4>)
   b85d4:	f240 310a 	movw	r1, #778	; 0x30a
   b85d8:	f7fc fa80 	bl	b4adc <__assert_func>
   b85dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b85e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b85e4:	bb35      	cbnz	r5, b8634 <__d2b+0x7c>
   b85e6:	2e00      	cmp	r6, #0
   b85e8:	9301      	str	r3, [sp, #4]
   b85ea:	d028      	beq.n	b863e <__d2b+0x86>
   b85ec:	4668      	mov	r0, sp
   b85ee:	9600      	str	r6, [sp, #0]
   b85f0:	f7ff fd06 	bl	b8000 <__lo0bits>
   b85f4:	9900      	ldr	r1, [sp, #0]
   b85f6:	b300      	cbz	r0, b863a <__d2b+0x82>
   b85f8:	9a01      	ldr	r2, [sp, #4]
   b85fa:	f1c0 0320 	rsb	r3, r0, #32
   b85fe:	fa02 f303 	lsl.w	r3, r2, r3
   b8602:	430b      	orrs	r3, r1
   b8604:	40c2      	lsrs	r2, r0
   b8606:	6163      	str	r3, [r4, #20]
   b8608:	9201      	str	r2, [sp, #4]
   b860a:	9b01      	ldr	r3, [sp, #4]
   b860c:	61a3      	str	r3, [r4, #24]
   b860e:	2b00      	cmp	r3, #0
   b8610:	bf14      	ite	ne
   b8612:	2202      	movne	r2, #2
   b8614:	2201      	moveq	r2, #1
   b8616:	6122      	str	r2, [r4, #16]
   b8618:	b1d5      	cbz	r5, b8650 <__d2b+0x98>
   b861a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b861e:	4405      	add	r5, r0
   b8620:	f8c9 5000 	str.w	r5, [r9]
   b8624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b8628:	f8c8 0000 	str.w	r0, [r8]
   b862c:	4620      	mov	r0, r4
   b862e:	b003      	add	sp, #12
   b8630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8638:	e7d5      	b.n	b85e6 <__d2b+0x2e>
   b863a:	6161      	str	r1, [r4, #20]
   b863c:	e7e5      	b.n	b860a <__d2b+0x52>
   b863e:	a801      	add	r0, sp, #4
   b8640:	f7ff fcde 	bl	b8000 <__lo0bits>
   b8644:	9b01      	ldr	r3, [sp, #4]
   b8646:	6163      	str	r3, [r4, #20]
   b8648:	2201      	movs	r2, #1
   b864a:	6122      	str	r2, [r4, #16]
   b864c:	3020      	adds	r0, #32
   b864e:	e7e3      	b.n	b8618 <__d2b+0x60>
   b8650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b8654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b8658:	f8c9 0000 	str.w	r0, [r9]
   b865c:	6918      	ldr	r0, [r3, #16]
   b865e:	f7ff fcaf 	bl	b7fc0 <__hi0bits>
   b8662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b8666:	e7df      	b.n	b8628 <__d2b+0x70>
   b8668:	000b8d88 	.word	0x000b8d88
   b866c:	000b8e34 	.word	0x000b8e34

000b8670 <__ratio>:
   b8670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8674:	4688      	mov	r8, r1
   b8676:	4669      	mov	r1, sp
   b8678:	4681      	mov	r9, r0
   b867a:	f7ff ff4d 	bl	b8518 <__b2d>
   b867e:	a901      	add	r1, sp, #4
   b8680:	4640      	mov	r0, r8
   b8682:	ec55 4b10 	vmov	r4, r5, d0
   b8686:	f7ff ff47 	bl	b8518 <__b2d>
   b868a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b868e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b8692:	eba3 0c02 	sub.w	ip, r3, r2
   b8696:	e9dd 3200 	ldrd	r3, r2, [sp]
   b869a:	1a9b      	subs	r3, r3, r2
   b869c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b86a0:	ec51 0b10 	vmov	r0, r1, d0
   b86a4:	2b00      	cmp	r3, #0
   b86a6:	bfd6      	itet	le
   b86a8:	460a      	movle	r2, r1
   b86aa:	462a      	movgt	r2, r5
   b86ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b86b0:	468b      	mov	fp, r1
   b86b2:	462f      	mov	r7, r5
   b86b4:	bfd4      	ite	le
   b86b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b86ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b86be:	4620      	mov	r0, r4
   b86c0:	ee10 2a10 	vmov	r2, s0
   b86c4:	465b      	mov	r3, fp
   b86c6:	4639      	mov	r1, r7
   b86c8:	f7fd fe38 	bl	b633c <__aeabi_ddiv>
   b86cc:	ec41 0b10 	vmov	d0, r0, r1
   b86d0:	b003      	add	sp, #12
   b86d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b86d6 <__copybits>:
   b86d6:	3901      	subs	r1, #1
   b86d8:	b570      	push	{r4, r5, r6, lr}
   b86da:	1149      	asrs	r1, r1, #5
   b86dc:	6914      	ldr	r4, [r2, #16]
   b86de:	3101      	adds	r1, #1
   b86e0:	f102 0314 	add.w	r3, r2, #20
   b86e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b86e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b86ec:	1f05      	subs	r5, r0, #4
   b86ee:	42a3      	cmp	r3, r4
   b86f0:	d30c      	bcc.n	b870c <__copybits+0x36>
   b86f2:	1aa3      	subs	r3, r4, r2
   b86f4:	3b11      	subs	r3, #17
   b86f6:	f023 0303 	bic.w	r3, r3, #3
   b86fa:	3211      	adds	r2, #17
   b86fc:	42a2      	cmp	r2, r4
   b86fe:	bf88      	it	hi
   b8700:	2300      	movhi	r3, #0
   b8702:	4418      	add	r0, r3
   b8704:	2300      	movs	r3, #0
   b8706:	4288      	cmp	r0, r1
   b8708:	d305      	bcc.n	b8716 <__copybits+0x40>
   b870a:	bd70      	pop	{r4, r5, r6, pc}
   b870c:	f853 6b04 	ldr.w	r6, [r3], #4
   b8710:	f845 6f04 	str.w	r6, [r5, #4]!
   b8714:	e7eb      	b.n	b86ee <__copybits+0x18>
   b8716:	f840 3b04 	str.w	r3, [r0], #4
   b871a:	e7f4      	b.n	b8706 <__copybits+0x30>

000b871c <__any_on>:
   b871c:	f100 0214 	add.w	r2, r0, #20
   b8720:	6900      	ldr	r0, [r0, #16]
   b8722:	114b      	asrs	r3, r1, #5
   b8724:	4298      	cmp	r0, r3
   b8726:	b510      	push	{r4, lr}
   b8728:	db11      	blt.n	b874e <__any_on+0x32>
   b872a:	dd0a      	ble.n	b8742 <__any_on+0x26>
   b872c:	f011 011f 	ands.w	r1, r1, #31
   b8730:	d007      	beq.n	b8742 <__any_on+0x26>
   b8732:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b8736:	fa24 f001 	lsr.w	r0, r4, r1
   b873a:	fa00 f101 	lsl.w	r1, r0, r1
   b873e:	428c      	cmp	r4, r1
   b8740:	d10b      	bne.n	b875a <__any_on+0x3e>
   b8742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b8746:	4293      	cmp	r3, r2
   b8748:	d803      	bhi.n	b8752 <__any_on+0x36>
   b874a:	2000      	movs	r0, #0
   b874c:	bd10      	pop	{r4, pc}
   b874e:	4603      	mov	r3, r0
   b8750:	e7f7      	b.n	b8742 <__any_on+0x26>
   b8752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b8756:	2900      	cmp	r1, #0
   b8758:	d0f5      	beq.n	b8746 <__any_on+0x2a>
   b875a:	2001      	movs	r0, #1
   b875c:	e7f6      	b.n	b874c <__any_on+0x30>

000b875e <_calloc_r>:
   b875e:	b513      	push	{r0, r1, r4, lr}
   b8760:	434a      	muls	r2, r1
   b8762:	4611      	mov	r1, r2
   b8764:	9201      	str	r2, [sp, #4]
   b8766:	f7fc f9a9 	bl	b4abc <_malloc_r>
   b876a:	4604      	mov	r4, r0
   b876c:	b118      	cbz	r0, b8776 <_calloc_r+0x18>
   b876e:	9a01      	ldr	r2, [sp, #4]
   b8770:	2100      	movs	r1, #0
   b8772:	f7fd ffac 	bl	b66ce <memset>
   b8776:	4620      	mov	r0, r4
   b8778:	b002      	add	sp, #8
   b877a:	bd10      	pop	{r4, pc}
   b877c:	0000      	movs	r0, r0
	...

000b8780 <nan>:
   b8780:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8788 <nan+0x8>
   b8784:	4770      	bx	lr
   b8786:	bf00      	nop
   b8788:	00000000 	.word	0x00000000
   b878c:	7ff80000 	.word	0x7ff80000

000b8790 <__ascii_wctomb>:
   b8790:	b149      	cbz	r1, b87a6 <__ascii_wctomb+0x16>
   b8792:	2aff      	cmp	r2, #255	; 0xff
   b8794:	bf85      	ittet	hi
   b8796:	238a      	movhi	r3, #138	; 0x8a
   b8798:	6003      	strhi	r3, [r0, #0]
   b879a:	700a      	strbls	r2, [r1, #0]
   b879c:	f04f 30ff 	movhi.w	r0, #4294967295
   b87a0:	bf98      	it	ls
   b87a2:	2001      	movls	r0, #1
   b87a4:	4770      	bx	lr
   b87a6:	4608      	mov	r0, r1
   b87a8:	4770      	bx	lr
	...

000b87ac <__aeabi_d2lz>:
   b87ac:	b538      	push	{r3, r4, r5, lr}
   b87ae:	2200      	movs	r2, #0
   b87b0:	2300      	movs	r3, #0
   b87b2:	4604      	mov	r4, r0
   b87b4:	460d      	mov	r5, r1
   b87b6:	f7fd ff09 	bl	b65cc <__aeabi_dcmplt>
   b87ba:	b928      	cbnz	r0, b87c8 <__aeabi_d2lz+0x1c>
   b87bc:	4620      	mov	r0, r4
   b87be:	4629      	mov	r1, r5
   b87c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b87c4:	f7fd bf4a 	b.w	b665c <__aeabi_d2ulz>
   b87c8:	4620      	mov	r0, r4
   b87ca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b87ce:	f7fd ff45 	bl	b665c <__aeabi_d2ulz>
   b87d2:	4240      	negs	r0, r0
   b87d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b87d8:	bd38      	pop	{r3, r4, r5, pc}
   b87da:	bf00      	nop

000b87dc <dynalib_user>:
   b87dc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b87ec:	0000 0000 7270 6369 7365 002f 212c 2500     ....prices/.,!.%
   b87fc:	642a 252d 642a 252d 5464 6425 253a 642a     *d-%*d-%dT%d:%*d
   b880c:	253a 642a 4800 6769 6568 7473 7020 6972     :%*d.Highest pri
   b881c:	6563 6f20 2066 6874 2065 6164 3a79 2520     ce of the day: %
   b882c:	0a66 4c00 776f 7365 2074 7270 6369 2065     f..Lowest price 
   b883c:	666f 7420 6568 6420 7961 203a 6625 000a     of the day: %f..
   b884c:	6f48 7275 2073 666f 7420 6568 6420 7961     Hours of the day
   b885c:	7720 6568 6572 6520 656c 7463 6972 6963      where electrici
   b886c:	7974 6920 2073 6977 6874 6e69 6120 6363     ty is within acc
   b887c:	7065 6574 2064 6172 676e 3a65 000a 6e63     epted range:..cn
   b888c:	3a74 2520 0a64 2500 3230 2064 6f74 2520     t: %d..%02d to %
   b889c:	3230 0a64 4c00 6769 7468 203a 6425 000a     02d..Light: %d..
   b88ac:	7543 7272 6e65 2074 4848 4d3a 3a4d 2520     Current HH:MM: %
   b88bc:	3230 3a64 3025 6432 000a 6843 6165 2870     02d:%02d..Cheap(
   b88cc:	7369 2968 6820 756f 7372 6f20 2066 6874     ish) hours of th
   b88dc:	2065 6164 3a79 0020 3025 6432 7420 206f     e day: .%02d to 
   b88ec:	3025 6432 202c 4c00 776f 7020 6972 6563     %02d, .Low price
   b88fc:	6820 756f 7372 7b00 2220 6579 7261 3a22      hours.{ "year":
   b890c:	2220 6425 2c22 2220 6f6d 746e 2268 223a      "%d", "month":"
   b891c:	3025 6432 2c22 2220 6164 2279 203a 2522     %02d", "day": "%
   b892c:	3230 2264 202c 6422 7961 745f 6f77 3a22     02d", "day_two":
   b893c:	2220 3025 6432 2c22 2220 6f68 7275 3a22      "%02d", "hour":
   b894c:	2220 3025 6432 2022 007d 6c65 7270 7369      "%02d" }.elpris
   b895c:	7265 4200 6769 6567 7473 5300 616d 6c6c     er.Biggest.Small
   b896c:	7365 0074 6f50 6577 0072 6567 5f74 7270     est.Power.get_pr
   b897c:	6369 7365 0000 0000                         ices....

000b8984 <_ZTVN5spark13EthernetClassE>:
	...
   b898c:	4b6b 000b 4b61 000b 4b57 000b 4b4d 000b     kK..aK..WK..MK..
   b899c:	4b41 000b 4b35 000b 5aad 000b 5ab5 000b     AK..5K...Z...Z..
   b89ac:	4b29 000b 4b21 000b 4b17 000b 4b0d 000b     )K..!K...K...K..
   b89bc:	5ae5 000b 7061 0070 5925 252d 2d6d 6425     .Z..app.%Y-%m-%d
   b89cc:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b89dc:	6d69 0065                                   ime.

000b89e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b89e8:	5131 000b 5137 000b 5175 000b 5145 000b     1Q..7Q..uQ..EQ..
   b89f8:	5133 000b                                   3Q..

000b89fc <_ZTV9IPAddress>:
	...
   b8a04:	5671 000b 5661 000b 5663 000b               qV..aV..cV..

000b8a10 <_ZTV9USBSerial>:
	...
   b8a18:	5757 000b 57bf 000b 5795 000b 4d4d 000b     WW...W...W..MM..
   b8a28:	5787 000b 5759 000b 5769 000b 57b9 000b     .W..YW..iW...W..
   b8a38:	5779 000b 5751 000b                         yW..QW..

000b8a40 <_ZTV11USARTSerial>:
	...
   b8a48:	58a9 000b 5915 000b 58ed 000b 4d4d 000b     .X...Y...X..MM..
   b8a58:	58bd 000b 58d9 000b 58cb 000b 58e7 000b     .X...X...X...X..
   b8a68:	58ab 000b 58af 000b                         .X...X..

000b8a70 <_ZTV7TwoWire>:
	...
   b8a78:	5975 000b 59bf 000b 5997 000b 5977 000b     uY...Y...Y..wY..
   b8a88:	599f 000b 59a7 000b 59af 000b 59b7 000b     .Y...Y...Y...Y..

000b8a98 <_ZTVN5spark9WiFiClassE>:
	...
   b8aa0:	5a4f 000b 5a45 000b 5a3b 000b 59f1 000b     OZ..EZ..;Z...Y..
   b8ab0:	5a2f 000b 5a23 000b 5aad 000b 5ab5 000b     /Z..#Z...Z...Z..
   b8ac0:	5a17 000b 5a0f 000b 5a05 000b 59fb 000b     .Z...Z...Z...Y..
   b8ad0:	5ae5 000b                                   .Z..

000b8ad4 <_ZTVN5spark12NetworkClassE>:
	...
   b8adc:	5a6d 000b 5a77 000b 5a81 000b 5a8b 000b     mZ..wZ...Z...Z..
   b8aec:	5a95 000b 5aa1 000b 5aad 000b 5ab5 000b     .Z...Z...Z...Z..
   b8afc:	5abd 000b 5ac9 000b 5ad1 000b 5adb 000b     .Z...Z...Z...Z..
   b8b0c:	5ae5 000b                                   .Z..

000b8b10 <_ZSt7nothrow>:
   b8b10:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8b20:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b8b30:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b8b40:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b8b50:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b8b60:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b8b70:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b8b80:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b8b90:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b8ba0:	646e 632e 6e00 0066 6e69 7469 0079 6e61     nd.c.nf.inity.an
   b8bb0:	0000 0000                                   ....

000b8bb4 <fpi.1>:
   b8bb4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b8bc4:	0000 0000                                   ....

000b8bc8 <fpinan.0>:
   b8bc8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000b8be0 <tinytens>:
   b8be0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b8bf0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b8c00:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   b8c10:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b8c20:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b8c30:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b8c40:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b8c50:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b8c60:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b8c70:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   b8c80:	7472 6b6f 632e                               rtok.c.

000b8c87 <_ctype_>:
   b8c87:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8c97:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8ca7:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8cb7:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8cc7:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8cd7:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8ce7:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8cf7:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8d07:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   b8d87:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   b8d97:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   b8da7:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   b8db7:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   b8dc7:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   b8dd7:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   b8de7:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   b8df7:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   b8e07:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   b8e17:	6874 7865 632e 2e00                          thex.c...

000b8e20 <_C_numeric_locale>:
   b8e20:	8e1e 000b 8889 000b cdc0 2003 0043 4f50     ........... C.PO
   b8e30:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   b8e40:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8e50:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8e60:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8e70:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8e80:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8e90:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8ea0:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   b8eb0:	0063 0000 0000 0000                         c.......

000b8eb8 <__mprec_bigtens>:
   b8eb8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b8ec8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b8ed8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b8ee0 <__mprec_tens>:
   b8ee0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b8ef0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b8f00:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b8f10:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b8f20:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b8f30:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b8f40:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b8f50:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b8f60:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b8f70:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b8f80:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b8f90:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b8fa0:	9db4 79d9 7843 44ea                         ...yCx.D

000b8fa8 <p05.0>:
   b8fa8:	0005 0000 0019 0000 007d 0000               ........}...

000b8fb4 <link_const_variable_data_end>:
   b8fb4:	000b4679 	.word	0x000b4679
   b8fb8:	000b4b75 	.word	0x000b4b75
   b8fbc:	000b4b9d 	.word	0x000b4b9d
   b8fc0:	000b4d3d 	.word	0x000b4d3d
   b8fc4:	000b4e59 	.word	0x000b4e59
   b8fc8:	000b4fd1 	.word	0x000b4fd1
   b8fcc:	000b4fed 	.word	0x000b4fed
   b8fd0:	000b5a59 	.word	0x000b5a59
   b8fd4:	000b5bbd 	.word	0x000b5bbd

000b8fd8 <link_constructors_end>:
	...
