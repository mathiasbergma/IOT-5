
c:/Users/mathi/Desktop/IOT/ElecPrice/target/4.0.0/argon/ElecPrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006550  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba570  000ba570  0000a570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba594  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003cd0c  000ba598  0001cd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001904  2003cef0  2003cef0  0002cef0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ba778  000ba778  0002a778  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba7a0  000ba7a0  0002a7a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013168c  00000000  00000000  0002a7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015628  00000000  00000000  0015be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003fab8  00000000  00000000  00171458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003150  00000000  00000000  001b0f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b388  00000000  00000000  001b4060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b705  00000000  00000000  001bf3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044964  00000000  00000000  001faaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a144  00000000  00000000  0023f451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000957c  00000000  00000000  00379598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fd10 	bl	b7a56 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fd18 	bl	b7a72 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003cd0c 	.word	0x2003cd0c
   b404c:	000ba598 	.word	0x000ba598
   b4050:	2003ceec 	.word	0x2003ceec
   b4054:	2003cef0 	.word	0x2003cef0
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fdfd 	bl	b5c60 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba544 	.word	0x000ba544
   b4080:	000ba568 	.word	0x000ba568

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bae2 	b.w	b464c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9f9 	bl	b4480 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bd9d 	b.w	b5bd0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 ba03 	b.w	b54a0 <malloc>

000b409a <_Znaj>:
   b409a:	f001 ba01 	b.w	b54a0 <malloc>

000b409e <_ZdaPv>:
   b409e:	f001 ba07 	b.w	b54b0 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f001 ba05 	b.w	b54b0 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z13handle_sensorv>:
    }
    
}

void handle_sensor(void)
{
   b40b8:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40ba:	f000 ffdd 	bl	b5078 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta;
    unsigned long current_reading = millis();
    
    if ((delta = current_reading-last_read) > 100)
   b40be:	4908      	ldr	r1, [pc, #32]	; (b40e0 <_Z13handle_sensorv+0x28>)
   b40c0:	680b      	ldr	r3, [r1, #0]
   b40c2:	1ac3      	subs	r3, r0, r3
   b40c4:	2b64      	cmp	r3, #100	; 0x64
   b40c6:	d90a      	bls.n	b40de <_Z13handle_sensorv+0x26>
    {
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40c8:	4a06      	ldr	r2, [pc, #24]	; (b40e4 <_Z13handle_sensorv+0x2c>)
   b40ca:	fbb2 f3f3 	udiv	r3, r2, r3
   b40ce:	4a06      	ldr	r2, [pc, #24]	; (b40e8 <_Z13handle_sensorv+0x30>)
        last_read = current_reading;
   b40d0:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40d2:	6013      	str	r3, [r2, #0]
        printer = true; // Just a debuging flag
   b40d4:	4a05      	ldr	r2, [pc, #20]	; (b40ec <_Z13handle_sensorv+0x34>)
   b40d6:	2301      	movs	r3, #1
   b40d8:	7013      	strb	r3, [r2, #0]
        transmit_value = true;
   b40da:	4a05      	ldr	r2, [pc, #20]	; (b40f0 <_Z13handle_sensorv+0x38>)
   b40dc:	7013      	strb	r3, [r2, #0]
    }
}
   b40de:	bd08      	pop	{r3, pc}
   b40e0:	2003d1a4 	.word	0x2003d1a4
   b40e4:	0036ee80 	.word	0x0036ee80
   b40e8:	2003cef8 	.word	0x2003cef8
   b40ec:	2003d209 	.word	0x2003d209
   b40f0:	2003e679 	.word	0x2003e679

000b40f4 <_Z8callbackPcPhj>:
{
   b40f4:	b508      	push	{r3, lr}
    if (!strcmp(topic,"power/prices"))
   b40f6:	4904      	ldr	r1, [pc, #16]	; (b4108 <_Z8callbackPcPhj+0x14>)
   b40f8:	f003 fd01 	bl	b7afe <strcmp>
   b40fc:	b910      	cbnz	r0, b4104 <_Z8callbackPcPhj+0x10>
        work = true;
   b40fe:	4b03      	ldr	r3, [pc, #12]	; (b410c <_Z8callbackPcPhj+0x18>)
   b4100:	2201      	movs	r2, #1
   b4102:	701a      	strb	r2, [r3, #0]
}
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	000b9ba8 	.word	0x000b9ba8
   b410c:	2003e67a 	.word	0x2003e67a

000b4110 <_Z9myHandlerPKcS0_>:

void myHandler(const char *event, const char *data)
{
   b4110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    populate = false;
    rec_cnt++;
   b4114:	4e33      	ldr	r6, [pc, #204]	; (b41e4 <_Z9myHandlerPKcS0_+0xd4>)
    populate = false;
   b4116:	4d34      	ldr	r5, [pc, #208]	; (b41e8 <_Z9myHandlerPKcS0_+0xd8>)
   b4118:	2300      	movs	r3, #0
   b411a:	702b      	strb	r3, [r5, #0]
    rec_cnt++;
   b411c:	7833      	ldrb	r3, [r6, #0]
{
   b411e:	b085      	sub	sp, #20
    rec_cnt++;
   b4120:	3301      	adds	r3, #1
{
   b4122:	4680      	mov	r8, r0

    /* When transmission are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
    */
    int transmission_size = strlen(data);
   b4124:	4608      	mov	r0, r1
    rec_cnt++;
   b4126:	7033      	strb	r3, [r6, #0]
{
   b4128:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b412a:	f003 fd18 	bl	b7b5e <strlen>
    
    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str,event);
   b412e:	4641      	mov	r1, r8
    int transmission_size = strlen(data);
   b4130:	4607      	mov	r7, r0
    strcpy(event_str,event);
   b4132:	a801      	add	r0, sp, #4
   b4134:	f003 fced 	bl	b7b12 <strcpy>

    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "rec_data"
    strcpy(rec_data[atoi(strtok(event_str,"prices/"))],data);
   b4138:	492c      	ldr	r1, [pc, #176]	; (b41ec <_Z9myHandlerPKcS0_+0xdc>)
   b413a:	a801      	add	r0, sp, #4
   b413c:	f004 fb5a 	bl	b87f4 <strtok>
   b4140:	f003 fc71 	bl	b7a26 <atoi>
   b4144:	eb00 2340 	add.w	r3, r0, r0, lsl #9
   b4148:	4829      	ldr	r0, [pc, #164]	; (b41f0 <_Z9myHandlerPKcS0_+0xe0>)
   b414a:	4621      	mov	r1, r4
   b414c:	4418      	add	r0, r3
   b414e:	f003 fce0 	bl	b7b12 <strcpy>
    
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b4152:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   b4156:	d210      	bcs.n	b417a <_Z9myHandlerPKcS0_+0x6a>
    {
        populate = true;
   b4158:	2301      	movs	r3, #1
   b415a:	702b      	strb	r3, [r5, #0]
    }

    if (populate)
   b415c:	4c24      	ldr	r4, [pc, #144]	; (b41f0 <_Z9myHandlerPKcS0_+0xe0>)
    {
        // Concatenate all transmission into one string
        for (int i = 0; i <= rec_cnt; i++)
        {
            strcat(temp,rec_data[i]);
   b415e:	4b25      	ldr	r3, [pc, #148]	; (b41f4 <_Z9myHandlerPKcS0_+0xe4>)
{
   b4160:	2500      	movs	r5, #0
        for (int i = 0; i <= rec_cnt; i++)
   b4162:	7832      	ldrb	r2, [r6, #0]
   b4164:	42aa      	cmp	r2, r5
   b4166:	db0e      	blt.n	b4186 <_Z9myHandlerPKcS0_+0x76>
            strcat(temp,rec_data[i]);
   b4168:	4621      	mov	r1, r4
   b416a:	4618      	mov	r0, r3
   b416c:	f003 fcb8 	bl	b7ae0 <strcat>
        for (int i = 0; i <= rec_cnt; i++)
   b4170:	3501      	adds	r5, #1
            strcat(temp,rec_data[i]);
   b4172:	4603      	mov	r3, r0
        for (int i = 0; i <= rec_cnt; i++)
   b4174:	f204 2401 	addw	r4, r4, #513	; 0x201
   b4178:	e7f3      	b.n	b4162 <_Z9myHandlerPKcS0_+0x52>
    if (populate)
   b417a:	782b      	ldrb	r3, [r5, #0]
   b417c:	2b00      	cmp	r3, #0
   b417e:	d1ed      	bne.n	b415c <_Z9myHandlerPKcS0_+0x4c>
                range = i;  // Update range, such that the rest of program flow is aware of size
                break;      // Break the while loop
            }
        }
    }
}
   b4180:	b005      	add	sp, #20
   b4182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        token = strtok(temp, ",!");
   b4186:	491c      	ldr	r1, [pc, #112]	; (b41f8 <_Z9myHandlerPKcS0_+0xe8>)
   b4188:	481a      	ldr	r0, [pc, #104]	; (b41f4 <_Z9myHandlerPKcS0_+0xe4>)
   b418a:	4d1c      	ldr	r5, [pc, #112]	; (b41fc <_Z9myHandlerPKcS0_+0xec>)
        for (int i = 0; i < range; i++)
   b418c:	f8df 807c 	ldr.w	r8, [pc, #124]	; b420c <_Z9myHandlerPKcS0_+0xfc>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b4190:	f8df 907c 	ldr.w	r9, [pc, #124]	; b4210 <_Z9myHandlerPKcS0_+0x100>
            cost[i] = atof(token) / 1000;
   b4194:	4f1a      	ldr	r7, [pc, #104]	; (b4200 <_Z9myHandlerPKcS0_+0xf0>)
        token = strtok(temp, ",!");
   b4196:	f004 fb2d 	bl	b87f4 <strtok>
        for (int i = 0; i < range; i++)
   b419a:	2400      	movs	r4, #0
            cost[i] = atof(token) / 1000;
   b419c:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b419e:	f8d8 3000 	ldr.w	r3, [r8]
   b41a2:	42a3      	cmp	r3, r4
   b41a4:	ddec      	ble.n	b4180 <_Z9myHandlerPKcS0_+0x70>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b41a6:	4a17      	ldr	r2, [pc, #92]	; (b4204 <_Z9myHandlerPKcS0_+0xf4>)
   b41a8:	4917      	ldr	r1, [pc, #92]	; (b4208 <_Z9myHandlerPKcS0_+0xf8>)
   b41aa:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   b41ae:	f001 f997 	bl	b54e0 <sscanf>
            token = strtok(NULL, ",!");
   b41b2:	4911      	ldr	r1, [pc, #68]	; (b41f8 <_Z9myHandlerPKcS0_+0xe8>)
   b41b4:	2000      	movs	r0, #0
   b41b6:	f004 fb1d 	bl	b87f4 <strtok>
            cost[i] = atof(token) / 1000;
   b41ba:	f003 fc31 	bl	b7a20 <atof>
   b41be:	4632      	mov	r2, r6
   b41c0:	ec51 0b10 	vmov	r0, r1, d0
   b41c4:	463b      	mov	r3, r7
   b41c6:	f003 fa77 	bl	b76b8 <__aeabi_ddiv>
   b41ca:	e8e5 0102 	strd	r0, r1, [r5], #8
            if((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b41ce:	490a      	ldr	r1, [pc, #40]	; (b41f8 <_Z9myHandlerPKcS0_+0xe8>)
   b41d0:	2000      	movs	r0, #0
   b41d2:	f004 fb0f 	bl	b87f4 <strtok>
   b41d6:	b910      	cbnz	r0, b41de <_Z9myHandlerPKcS0_+0xce>
                range = i;  // Update range, such that the rest of program flow is aware of size
   b41d8:	f8c8 4000 	str.w	r4, [r8]
                break;      // Break the while loop
   b41dc:	e7d0      	b.n	b4180 <_Z9myHandlerPKcS0_+0x70>
        for (int i = 0; i < range; i++)
   b41de:	3401      	adds	r4, #1
   b41e0:	e7dd      	b.n	b419e <_Z9myHandlerPKcS0_+0x8e>
   b41e2:	bf00      	nop
   b41e4:	2003d20a 	.word	0x2003d20a
   b41e8:	2003d208 	.word	0x2003d208
   b41ec:	000b9bb5 	.word	0x000b9bb5
   b41f0:	2003d20b 	.word	0x2003d20b
   b41f4:	2003dc74 	.word	0x2003dc74
   b41f8:	000b9bbd 	.word	0x000b9bbd
   b41fc:	2003cf60 	.word	0x2003cf60
   b4200:	408f4000 	.word	0x408f4000
   b4204:	2003d1a0 	.word	0x2003d1a0
   b4208:	000b9bc0 	.word	0x000b9bc0
   b420c:	2003cd0c 	.word	0x2003cd0c
   b4210:	2003d0e0 	.word	0x2003d0e0

000b4214 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4214:	b40e      	push	{r1, r2, r3}
   b4216:	b503      	push	{r0, r1, lr}
   b4218:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b421a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b421c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4220:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4222:	f001 fb9c 	bl	b595e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4226:	b002      	add	sp, #8
   b4228:	f85d eb04 	ldr.w	lr, [sp], #4
   b422c:	b003      	add	sp, #12
   b422e:	4770      	bx	lr

000b4230 <_Z9reconnectv>:
    // Wait 2 second
    delay(2000);
}

void reconnect(void)
{
   b4230:	b500      	push	{lr}
   b4232:	b089      	sub	sp, #36	; 0x24

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4234:	490e      	ldr	r1, [pc, #56]	; (b4270 <_Z9reconnectv+0x40>)
   b4236:	a804      	add	r0, sp, #16
   b4238:	f001 fa7b 	bl	b5732 <_ZN6StringC1EPK19__FlashStringHelper>
    client.connect("sparkclient_" + String(Time.now()),"mqtt","mqtt");
   b423c:	f001 fc33 	bl	b5aa6 <_ZN9TimeClass3nowEv>
   b4240:	220a      	movs	r2, #10
   b4242:	4601      	mov	r1, r0
   b4244:	4668      	mov	r0, sp
   b4246:	f001 fa9a 	bl	b577e <_ZN6StringC1Elh>
   b424a:	4669      	mov	r1, sp
   b424c:	a804      	add	r0, sp, #16
   b424e:	f001 fac4 	bl	b57da <_ZplRK15StringSumHelperRK6String>
   b4252:	4b08      	ldr	r3, [pc, #32]	; (b4274 <_Z9reconnectv+0x44>)
   b4254:	6801      	ldr	r1, [r0, #0]
   b4256:	4808      	ldr	r0, [pc, #32]	; (b4278 <_Z9reconnectv+0x48>)
   b4258:	461a      	mov	r2, r3
   b425a:	f000 fca3 	bl	b4ba4 <_ZN4MQTT7connectEPKcS1_S1_>
   b425e:	4668      	mov	r0, sp
   b4260:	f001 fa1c 	bl	b569c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4264:	a804      	add	r0, sp, #16
   b4266:	f001 fa19 	bl	b569c <_ZN6StringD1Ev>
}
   b426a:	b009      	add	sp, #36	; 0x24
   b426c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4270:	000b9bd6 	.word	0x000b9bd6
   b4274:	000b9be3 	.word	0x000b9be3
   b4278:	2003cefc 	.word	0x2003cefc
   b427c:	00000000 	.word	0x00000000

000b4280 <_Z8calc_lowv>:
/** Purpose of the function is to identify the hours at which the highest and lowest cost are.
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
*/
void calc_low(void)
{
   b4280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4284:	ed2d 8b02 	vpush	{d8}
    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value

    for (int i = 0; i < range; i++)
   b4288:	4b63      	ldr	r3, [pc, #396]	; (b4418 <_Z8calc_lowv+0x198>)
    double last_small = 100; // Assign any absurdly high value
   b428a:	4f64      	ldr	r7, [pc, #400]	; (b441c <_Z8calc_lowv+0x19c>)
    for (int i = 0; i < range; i++)
   b428c:	681b      	ldr	r3, [r3, #0]
{
   b428e:	b085      	sub	sp, #20
    double last_big = 0;
   b4290:	ed9f 7b5d 	vldr	d7, [pc, #372]	; b4408 <_Z8calc_lowv+0x188>
    for (int i = 0; i < range; i++)
   b4294:	9301      	str	r3, [sp, #4]
   b4296:	4b62      	ldr	r3, [pc, #392]	; (b4420 <_Z8calc_lowv+0x1a0>)
    double last_big = 0;
   b4298:	eeb0 8a47 	vmov.f32	s16, s14
   b429c:	eef0 8a67 	vmov.f32	s17, s15
   b42a0:	681b      	ldr	r3, [r3, #0]
   b42a2:	9300      	str	r3, [sp, #0]
   b42a4:	4b5f      	ldr	r3, [pc, #380]	; (b4424 <_Z8calc_lowv+0x1a4>)
   b42a6:	f8d3 b000 	ldr.w	fp, [r3]
   b42aa:	4b5f      	ldr	r3, [pc, #380]	; (b4428 <_Z8calc_lowv+0x1a8>)
   b42ac:	9303      	str	r3, [sp, #12]
    for (int i = 0; i < range; i++)
   b42ae:	2500      	movs	r5, #0
   b42b0:	469a      	mov	sl, r3
   b42b2:	9502      	str	r5, [sp, #8]
   b42b4:	462c      	mov	r4, r5
    double last_small = 100; // Assign any absurdly high value
   b42b6:	2600      	movs	r6, #0
    for (int i = 0; i < range; i++)
   b42b8:	9b01      	ldr	r3, [sp, #4]
   b42ba:	42a3      	cmp	r3, r4
   b42bc:	dd1a      	ble.n	b42f4 <_Z8calc_lowv+0x74>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b42be:	e8fa 8902 	ldrd	r8, r9, [sl], #8
   b42c2:	ec53 2b18 	vmov	r2, r3, d8
   b42c6:	4640      	mov	r0, r8
   b42c8:	4649      	mov	r1, r9
   b42ca:	f003 fb5b 	bl	b7984 <__aeabi_dcmpgt>
   b42ce:	b120      	cbz	r0, b42da <_Z8calc_lowv+0x5a>
   b42d0:	2301      	movs	r3, #1
        {
            big_idx = i;
            last_big = cost[i];
   b42d2:	ec49 8b18 	vmov	d8, r8, r9
        if (cost[i] > last_big)
   b42d6:	9400      	str	r4, [sp, #0]
   b42d8:	9302      	str	r3, [sp, #8]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b42da:	4632      	mov	r2, r6
   b42dc:	463b      	mov	r3, r7
   b42de:	4640      	mov	r0, r8
   b42e0:	4649      	mov	r1, r9
   b42e2:	f003 fb31 	bl	b7948 <__aeabi_dcmplt>
   b42e6:	b118      	cbz	r0, b42f0 <_Z8calc_lowv+0x70>
   b42e8:	46a3      	mov	fp, r4
        {
            small_idx = i;
            last_small = cost[i];
   b42ea:	4646      	mov	r6, r8
   b42ec:	464f      	mov	r7, r9
        if (cost[i] < last_small)
   b42ee:	2501      	movs	r5, #1
    for (int i = 0; i < range; i++)
   b42f0:	3401      	adds	r4, #1
   b42f2:	e7e1      	b.n	b42b8 <_Z8calc_lowv+0x38>
   b42f4:	9b02      	ldr	r3, [sp, #8]
   b42f6:	b113      	cbz	r3, b42fe <_Z8calc_lowv+0x7e>
   b42f8:	4b49      	ldr	r3, [pc, #292]	; (b4420 <_Z8calc_lowv+0x1a0>)
   b42fa:	9a00      	ldr	r2, [sp, #0]
   b42fc:	601a      	str	r2, [r3, #0]
   b42fe:	b115      	cbz	r5, b4306 <_Z8calc_lowv+0x86>
   b4300:	4b48      	ldr	r3, [pc, #288]	; (b4424 <_Z8calc_lowv+0x1a4>)
   b4302:	f8c3 b000 	str.w	fp, [r3]
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b4306:	4632      	mov	r2, r6
   b4308:	463b      	mov	r3, r7
   b430a:	ec51 0b18 	vmov	r0, r1, d8
   b430e:	f002 fef1 	bl	b70f4 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4312:	a33f      	add	r3, pc, #252	; (adr r3, b4410 <_Z8calc_lowv+0x190>)
   b4314:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4318:	f003 f8a4 	bl	b7464 <__aeabi_dmul>
   b431c:	4632      	mov	r2, r6
   b431e:	463b      	mov	r3, r7
   b4320:	f002 feea 	bl	b70f8 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= range; i++)
   b4324:	2500      	movs	r5, #0
    {
        
        if (cost[i] < small_offset)
        {
            low_range_hour[idx] = cost_hour[i];
   b4326:	f8df a124 	ldr.w	sl, [pc, #292]	; b444c <_Z8calc_lowv+0x1cc>
   b432a:	f8df b124 	ldr.w	fp, [pc, #292]	; b4450 <_Z8calc_lowv+0x1d0>
    int idx = 0;
   b432e:	9500      	str	r5, [sp, #0]
    small_offset = last_small + delta * DELTA_OFFSET;
   b4330:	4680      	mov	r8, r0
   b4332:	4689      	mov	r9, r1
    for (int i = 0; i <= range; i++)
   b4334:	9b01      	ldr	r3, [sp, #4]
   b4336:	42ab      	cmp	r3, r5
   b4338:	db12      	blt.n	b4360 <_Z8calc_lowv+0xe0>
        if (cost[i] < small_offset)
   b433a:	9c03      	ldr	r4, [sp, #12]
   b433c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   b4340:	4642      	mov	r2, r8
   b4342:	464b      	mov	r3, r9
   b4344:	9403      	str	r4, [sp, #12]
   b4346:	f003 faff 	bl	b7948 <__aeabi_dcmplt>
   b434a:	b138      	cbz	r0, b435c <_Z8calc_lowv+0xdc>
            low_range_hour[idx] = cost_hour[i];
   b434c:	9a00      	ldr	r2, [sp, #0]
   b434e:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
   b4352:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
            
            idx++;
   b4356:	4613      	mov	r3, r2
   b4358:	3301      	adds	r3, #1
   b435a:	9300      	str	r3, [sp, #0]
    for (int i = 0; i <= range; i++)
   b435c:	3501      	adds	r5, #1
   b435e:	e7e9      	b.n	b4334 <_Z8calc_lowv+0xb4>
        }
    }

    // Calculations have been done - clear flag
    populate = false;
   b4360:	4b32      	ldr	r3, [pc, #200]	; (b442c <_Z8calc_lowv+0x1ac>)
   b4362:	2500      	movs	r5, #0
   b4364:	701d      	strb	r5, [r3, #0]
    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b4366:	f002 f82d 	bl	b63c4 <_Z16_fetch_usbserialv>
   b436a:	ec53 2b18 	vmov	r2, r3, d8
   b436e:	4930      	ldr	r1, [pc, #192]	; (b4430 <_Z8calc_lowv+0x1b0>)
   b4370:	f7ff ff50 	bl	b4214 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b4374:	f002 f826 	bl	b63c4 <_Z16_fetch_usbserialv>
   b4378:	4632      	mov	r2, r6
   b437a:	463b      	mov	r3, r7
   b437c:	492d      	ldr	r1, [pc, #180]	; (b4434 <_Z8calc_lowv+0x1b4>)
   b437e:	4e2e      	ldr	r6, [pc, #184]	; (b4438 <_Z8calc_lowv+0x1b8>)
   b4380:	f7ff ff48 	bl	b4214 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4384:	f002 f81e 	bl	b63c4 <_Z16_fetch_usbserialv>
   b4388:	492c      	ldr	r1, [pc, #176]	; (b443c <_Z8calc_lowv+0x1bc>)
   b438a:	f7ff ff43 	bl	b4214 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b438e:	9b00      	ldr	r3, [sp, #0]
   b4390:	b1eb      	cbz	r3, b43ce <_Z8calc_lowv+0x14e>
   b4392:	6831      	ldr	r1, [r6, #0]
   b4394:	4a2a      	ldr	r2, [pc, #168]	; (b4440 <_Z8calc_lowv+0x1c0>)
    {
        while (i <= idx)
        {
            start_stop[cnt][0] = low_range_hour[i];
   b4396:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b444c <_Z8calc_lowv+0x1cc>
   b439a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    int i = 0;
   b439e:	462b      	mov	r3, r5
            start_stop[cnt][0] = low_range_hour[i];
   b43a0:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   b43a4:	6010      	str	r0, [r2, #0]
   b43a6:	eb0c 0783 	add.w	r7, ip, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b43aa:	6838      	ldr	r0, [r7, #0]
   b43ac:	f857 5f04 	ldr.w	r5, [r7, #4]!
   b43b0:	3d01      	subs	r5, #1
   b43b2:	42a8      	cmp	r0, r5
   b43b4:	f103 0301 	add.w	r3, r3, #1
   b43b8:	d0f7      	beq.n	b43aa <_Z8calc_lowv+0x12a>
        while (i <= idx)
   b43ba:	9c00      	ldr	r4, [sp, #0]
            {
                i++;
            }
            
            start_stop[cnt][1] = low_range_hour[i]+1;
   b43bc:	3001      	adds	r0, #1
        while (i <= idx)
   b43be:	42a3      	cmp	r3, r4
            start_stop[cnt][1] = low_range_hour[i]+1;
   b43c0:	6050      	str	r0, [r2, #4]
            
            cnt++;
   b43c2:	f101 0001 	add.w	r0, r1, #1
        while (i <= idx)
   b43c6:	f102 0208 	add.w	r2, r2, #8
   b43ca:	dd11      	ble.n	b43f0 <_Z8calc_lowv+0x170>
            i++;
        }
        cnt--;
   b43cc:	6031      	str	r1, [r6, #0]
   b43ce:	4c1c      	ldr	r4, [pc, #112]	; (b4440 <_Z8calc_lowv+0x1c0>)
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",start_stop[z][0],start_stop[z][1]);
   b43d0:	4f1c      	ldr	r7, [pc, #112]	; (b4444 <_Z8calc_lowv+0x1c4>)
            cnt++;
   b43d2:	2500      	movs	r5, #0
    for (int z = 0; z < cnt; z++)
   b43d4:	6833      	ldr	r3, [r6, #0]
   b43d6:	42ab      	cmp	r3, r5
   b43d8:	f104 0408 	add.w	r4, r4, #8
   b43dc:	dd0a      	ble.n	b43f4 <_Z8calc_lowv+0x174>
        Serial.printf("%02d to %02d\n",start_stop[z][0],start_stop[z][1]);
   b43de:	f001 fff1 	bl	b63c4 <_Z16_fetch_usbserialv>
   b43e2:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b43e6:	4639      	mov	r1, r7
   b43e8:	f7ff ff14 	bl	b4214 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b43ec:	3501      	adds	r5, #1
   b43ee:	e7f1      	b.n	b43d4 <_Z8calc_lowv+0x154>
            cnt++;
   b43f0:	4601      	mov	r1, r0
   b43f2:	e7d5      	b.n	b43a0 <_Z8calc_lowv+0x120>
    }

    work = true;
   b43f4:	4b14      	ldr	r3, [pc, #80]	; (b4448 <_Z8calc_lowv+0x1c8>)
   b43f6:	2201      	movs	r2, #1
   b43f8:	701a      	strb	r2, [r3, #0]
}
   b43fa:	b005      	add	sp, #20
   b43fc:	ecbd 8b02 	vpop	{d8}
   b4400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4404:	f3af 8000 	nop.w
	...
   b4410:	33333333 	.word	0x33333333
   b4414:	3fd33333 	.word	0x3fd33333
   b4418:	2003cd0c 	.word	0x2003cd0c
   b441c:	40590000 	.word	0x40590000
   b4420:	2003cef4 	.word	0x2003cef4
   b4424:	2003dc10 	.word	0x2003dc10
   b4428:	2003cf60 	.word	0x2003cf60
   b442c:	2003d208 	.word	0x2003d208
   b4430:	000b9be8 	.word	0x000b9be8
   b4434:	000b9c06 	.word	0x000b9c06
   b4438:	2003cf5c 	.word	0x2003cf5c
   b443c:	000b9c23 	.word	0x000b9c23
   b4440:	2003dc14 	.word	0x2003dc14
   b4444:	000b9c61 	.word	0x000b9c61
   b4448:	2003e67a 	.word	0x2003e67a
   b444c:	2003d1a8 	.word	0x2003d1a8
   b4450:	2003d0e0 	.word	0x2003d0e0

000b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4454:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4456:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4458:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b445a:	b17c      	cbz	r4, b447c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b445c:	6863      	ldr	r3, [r4, #4]
   b445e:	3b01      	subs	r3, #1
   b4460:	6063      	str	r3, [r4, #4]
   b4462:	b95b      	cbnz	r3, b447c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4464:	6823      	ldr	r3, [r4, #0]
   b4466:	4620      	mov	r0, r4
   b4468:	689b      	ldr	r3, [r3, #8]
   b446a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b446c:	68a3      	ldr	r3, [r4, #8]
   b446e:	3b01      	subs	r3, #1
   b4470:	60a3      	str	r3, [r4, #8]
   b4472:	b91b      	cbnz	r3, b447c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4474:	6823      	ldr	r3, [r4, #0]
   b4476:	4620      	mov	r0, r4
   b4478:	68db      	ldr	r3, [r3, #12]
   b447a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b447c:	4628      	mov	r0, r5
   b447e:	bd38      	pop	{r3, r4, r5, pc}

000b4480 <loop>:
{
   b4480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (client.isConnected())
   b4484:	483f      	ldr	r0, [pc, #252]	; (b4584 <loop+0x104>)
{
   b4486:	b08a      	sub	sp, #40	; 0x28
    if (client.isConnected())
   b4488:	f000 fa9c 	bl	b49c4 <_ZN4MQTT11isConnectedEv>
   b448c:	2800      	cmp	r0, #0
   b448e:	d043      	beq.n	b4518 <loop+0x98>
        client.loop();
   b4490:	483c      	ldr	r0, [pc, #240]	; (b4584 <loop+0x104>)
   b4492:	f000 fc6e 	bl	b4d72 <_ZN4MQTT4loopEv>
    if (printer) // Debugging flag set in interrupt handler
   b4496:	4c3c      	ldr	r4, [pc, #240]	; (b4588 <loop+0x108>)
   b4498:	7823      	ldrb	r3, [r4, #0]
   b449a:	b143      	cbz	r3, b44ae <loop+0x2e>
        Serial.printf("Light: %d\n",calc_power);
   b449c:	f001 ff92 	bl	b63c4 <_Z16_fetch_usbserialv>
   b44a0:	4b3a      	ldr	r3, [pc, #232]	; (b458c <loop+0x10c>)
   b44a2:	493b      	ldr	r1, [pc, #236]	; (b4590 <loop+0x110>)
   b44a4:	681a      	ldr	r2, [r3, #0]
   b44a6:	f7ff feb5 	bl	b4214 <_ZN5Print6printfEPKcz>
        printer = false;
   b44aa:	2300      	movs	r3, #0
   b44ac:	7023      	strb	r3, [r4, #0]
    if (populate)
   b44ae:	4b39      	ldr	r3, [pc, #228]	; (b4594 <loop+0x114>)
   b44b0:	781b      	ldrb	r3, [r3, #0]
   b44b2:	b17b      	cbz	r3, b44d4 <loop+0x54>
        calc_low();
   b44b4:	f7ff fee4 	bl	b4280 <_Z8calc_lowv>
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b44b8:	f001 ff84 	bl	b63c4 <_Z16_fetch_usbserialv>
   b44bc:	4604      	mov	r4, r0
   b44be:	f001 fb03 	bl	b5ac8 <_ZN9TimeClass4hourEv>
   b44c2:	4605      	mov	r5, r0
   b44c4:	f001 fb0c 	bl	b5ae0 <_ZN9TimeClass6minuteEv>
   b44c8:	4933      	ldr	r1, [pc, #204]	; (b4598 <loop+0x118>)
   b44ca:	4603      	mov	r3, r0
   b44cc:	1caa      	adds	r2, r5, #2
   b44ce:	4620      	mov	r0, r4
   b44d0:	f7ff fea0 	bl	b4214 <_ZN5Print6printfEPKcz>
    if (work)
   b44d4:	4e31      	ldr	r6, [pc, #196]	; (b459c <loop+0x11c>)
   b44d6:	7833      	ldrb	r3, [r6, #0]
   b44d8:	2b00      	cmp	r3, #0
   b44da:	d037      	beq.n	b454c <loop+0xcc>
        String data = "Cheap(ish) hours of the day: ";
   b44dc:	4930      	ldr	r1, [pc, #192]	; (b45a0 <loop+0x120>)
   b44de:	4c31      	ldr	r4, [pc, #196]	; (b45a4 <loop+0x124>)
        for (int z = 0; z < cnt; z++)
   b44e0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b45c8 <loop+0x148>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b44e4:	4f30      	ldr	r7, [pc, #192]	; (b45a8 <loop+0x128>)
        String data = "Cheap(ish) hours of the day: ";
   b44e6:	a802      	add	r0, sp, #8
   b44e8:	f001 f923 	bl	b5732 <_ZN6StringC1EPK19__FlashStringHelper>
        for (int z = 0; z < cnt; z++)
   b44ec:	2500      	movs	r5, #0
   b44ee:	f8d8 3000 	ldr.w	r3, [r8]
   b44f2:	42ab      	cmp	r3, r5
   b44f4:	f104 0408 	add.w	r4, r4, #8
   b44f8:	dd11      	ble.n	b451e <loop+0x9e>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b44fa:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b44fe:	4639      	mov	r1, r7
   b4500:	a806      	add	r0, sp, #24
   b4502:	f001 f977 	bl	b57f4 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4506:	a906      	add	r1, sp, #24
   b4508:	a802      	add	r0, sp, #8
   b450a:	f001 f962 	bl	b57d2 <_ZN6String6concatERKS_>
   b450e:	a806      	add	r0, sp, #24
   b4510:	f001 f8c4 	bl	b569c <_ZN6StringD1Ev>
        for (int z = 0; z < cnt; z++)
   b4514:	3501      	adds	r5, #1
   b4516:	e7ea      	b.n	b44ee <loop+0x6e>
        reconnect();
   b4518:	f7ff fe8a 	bl	b4230 <_Z9reconnectv>
   b451c:	e7bb      	b.n	b4496 <loop+0x16>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b451e:	4b23      	ldr	r3, [pc, #140]	; (b45ac <loop+0x12c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4520:	9a02      	ldr	r2, [sp, #8]
   b4522:	781b      	ldrb	r3, [r3, #0]
   b4524:	4922      	ldr	r1, [pc, #136]	; (b45b0 <loop+0x130>)
   b4526:	f88d 3000 	strb.w	r3, [sp]
   b452a:	a806      	add	r0, sp, #24
   b452c:	233c      	movs	r3, #60	; 0x3c
   b452e:	f001 fcf5 	bl	b5f1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4532:	a807      	add	r0, sp, #28
   b4534:	f7ff ff8e 	bl	b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        client.publish("prices", data);
   b4538:	9a02      	ldr	r2, [sp, #8]
   b453a:	491e      	ldr	r1, [pc, #120]	; (b45b4 <loop+0x134>)
   b453c:	4811      	ldr	r0, [pc, #68]	; (b4584 <loop+0x104>)
   b453e:	f000 fbbc 	bl	b4cba <_ZN4MQTT7publishEPKcS1_>
        work = false;
   b4542:	2300      	movs	r3, #0
        String data = "Cheap(ish) hours of the day: ";
   b4544:	a802      	add	r0, sp, #8
        work = false;
   b4546:	7033      	strb	r3, [r6, #0]
        String data = "Cheap(ish) hours of the day: ";
   b4548:	f001 f8a8 	bl	b569c <_ZN6StringD1Ev>
    if (transmit_value) // Did we receive a request for updated values
   b454c:	4c1a      	ldr	r4, [pc, #104]	; (b45b8 <loop+0x138>)
   b454e:	7823      	ldrb	r3, [r4, #0]
   b4550:	b18b      	cbz	r3, b4576 <loop+0xf6>
        Serial.printf("Received power/get\n");
   b4552:	f001 ff37 	bl	b63c4 <_Z16_fetch_usbserialv>
   b4556:	4919      	ldr	r1, [pc, #100]	; (b45bc <loop+0x13c>)
   b4558:	f7ff fe5c 	bl	b4214 <_ZN5Print6printfEPKcz>
        sprintf(values,"%d", calc_power);
   b455c:	4b0b      	ldr	r3, [pc, #44]	; (b458c <loop+0x10c>)
   b455e:	4918      	ldr	r1, [pc, #96]	; (b45c0 <loop+0x140>)
   b4560:	681a      	ldr	r2, [r3, #0]
   b4562:	a806      	add	r0, sp, #24
   b4564:	f000 ffb4 	bl	b54d0 <sprintf>
        client.publish("power",values);
   b4568:	4916      	ldr	r1, [pc, #88]	; (b45c4 <loop+0x144>)
   b456a:	4806      	ldr	r0, [pc, #24]	; (b4584 <loop+0x104>)
   b456c:	aa06      	add	r2, sp, #24
   b456e:	f000 fba4 	bl	b4cba <_ZN4MQTT7publishEPKcS1_>
        transmit_value = false;
   b4572:	2300      	movs	r3, #0
   b4574:	7023      	strb	r3, [r4, #0]
    delay(2000);
   b4576:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   b457a:	b00a      	add	sp, #40	; 0x28
   b457c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(2000);
   b4580:	f001 bae4 	b.w	b5b4c <delay>
   b4584:	2003cefc 	.word	0x2003cefc
   b4588:	2003d209 	.word	0x2003d209
   b458c:	2003cef8 	.word	0x2003cef8
   b4590:	000b9c6f 	.word	0x000b9c6f
   b4594:	2003d208 	.word	0x2003d208
   b4598:	000b9c7a 	.word	0x000b9c7a
   b459c:	2003e67a 	.word	0x2003e67a
   b45a0:	000b9c94 	.word	0x000b9c94
   b45a4:	2003dc14 	.word	0x2003dc14
   b45a8:	000b9cb2 	.word	0x000b9cb2
   b45ac:	2003cef0 	.word	0x2003cef0
   b45b0:	000b9cc1 	.word	0x000b9cc1
   b45b4:	000b9bae 	.word	0x000b9bae
   b45b8:	2003e679 	.word	0x2003e679
   b45bc:	000b9cd1 	.word	0x000b9cd1
   b45c0:	000b9d60 	.word	0x000b9d60
   b45c4:	000b9ce5 	.word	0x000b9ce5
   b45c8:	2003cf5c 	.word	0x2003cf5c

000b45cc <_Z8get_datai>:

void get_data(int day)
{
    rec_cnt = 0;
   b45cc:	4a18      	ldr	r2, [pc, #96]	; (b4630 <_Z8get_datai+0x64>)
   b45ce:	2300      	movs	r3, #0
{
   b45d0:	b510      	push	{r4, lr}
    rec_cnt = 0;
   b45d2:	7013      	strb	r3, [r2, #0]
    range = 48;
   b45d4:	4a17      	ldr	r2, [pc, #92]	; (b4634 <_Z8get_datai+0x68>)
   b45d6:	2130      	movs	r1, #48	; 0x30
   b45d8:	6011      	str	r1, [r2, #0]
    cnt = 0;
   b45da:	4a17      	ldr	r2, [pc, #92]	; (b4638 <_Z8get_datai+0x6c>)
   b45dc:	6013      	str	r3, [r2, #0]
    temp[0] = 0;
   b45de:	4a17      	ldr	r2, [pc, #92]	; (b463c <_Z8get_datai+0x70>)
{
   b45e0:	b08c      	sub	sp, #48	; 0x30
    temp[0] = 0;
   b45e2:	7013      	strb	r3, [r2, #0]
{
   b45e4:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
   b45e6:	f001 fa9b 	bl	b5b20 <_ZN9TimeClass4yearEv>
   b45ea:	9005      	str	r0, [sp, #20]
   b45ec:	f001 fa90 	bl	b5b10 <_ZN9TimeClass5monthEv>
   b45f0:	9004      	str	r0, [sp, #16]
   b45f2:	f001 fa69 	bl	b5ac8 <_ZN9TimeClass4hourEv>
   b45f6:	1ca1      	adds	r1, r4, #2
   b45f8:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b45fc:	e9cd 4100 	strd	r4, r1, [sp]
   b4600:	9002      	str	r0, [sp, #8]
   b4602:	490f      	ldr	r1, [pc, #60]	; (b4640 <_Z8get_datai+0x74>)
   b4604:	a808      	add	r0, sp, #32
   b4606:	f001 f8f5 	bl	b57f4 <_ZN6String6formatEPKcz>
   b460a:	4b0e      	ldr	r3, [pc, #56]	; (b4644 <_Z8get_datai+0x78>)
   b460c:	9a08      	ldr	r2, [sp, #32]
   b460e:	781b      	ldrb	r3, [r3, #0]
   b4610:	490d      	ldr	r1, [pc, #52]	; (b4648 <_Z8get_datai+0x7c>)
   b4612:	f88d 3000 	strb.w	r3, [sp]
   b4616:	a806      	add	r0, sp, #24
   b4618:	233c      	movs	r3, #60	; 0x3c
   b461a:	f001 fc7f 	bl	b5f1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b461e:	a807      	add	r0, sp, #28
   b4620:	f7ff ff18 	bl	b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4624:	a808      	add	r0, sp, #32
   b4626:	f001 f839 	bl	b569c <_ZN6StringD1Ev>
    
     // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
   b462a:	b00c      	add	sp, #48	; 0x30
   b462c:	bd10      	pop	{r4, pc}
   b462e:	bf00      	nop
   b4630:	2003d20a 	.word	0x2003d20a
   b4634:	2003cd0c 	.word	0x2003cd0c
   b4638:	2003cf5c 	.word	0x2003cf5c
   b463c:	2003dc74 	.word	0x2003dc74
   b4640:	000b9ceb 	.word	0x000b9ceb
   b4644:	2003cef0 	.word	0x2003cef0
   b4648:	000b9d3e 	.word	0x000b9d3e

000b464c <setup>:
{
   b464c:	b510      	push	{r4, lr}
   b464e:	b08a      	sub	sp, #40	; 0x28
   b4650:	f000 fd12 	bl	b5078 <HAL_Timer_Get_Milli_Seconds>
    last_read = millis(); //Give it an initial value
   b4654:	4b2b      	ldr	r3, [pc, #172]	; (b4704 <setup+0xb8>)
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b4656:	2400      	movs	r4, #0
    last_read = millis(); //Give it an initial value
   b4658:	6018      	str	r0, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                 //Setup pinmode for LDR pin
   b465a:	2103      	movs	r1, #3
   b465c:	2006      	movs	r0, #6
   b465e:	f002 fba1 	bl	b6da4 <pinMode>
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b4662:	4929      	ldr	r1, [pc, #164]	; (b4708 <setup+0xbc>)
   b4664:	9400      	str	r4, [sp, #0]
   b4666:	f04f 33ff 	mov.w	r3, #4294967295
   b466a:	2201      	movs	r2, #1
   b466c:	2006      	movs	r0, #6
   b466e:	f001 fed1 	bl	b6414 <_Z15attachInterrupttPFvvE13InterruptModeah>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4672:	4623      	mov	r3, r4
   b4674:	4622      	mov	r2, r4
   b4676:	e9cd 4400 	strd	r4, r4, [sp]
   b467a:	4924      	ldr	r1, [pc, #144]	; (b470c <setup+0xc0>)
   b467c:	4824      	ldr	r0, [pc, #144]	; (b4710 <setup+0xc4>)
   b467e:	f000 fef7 	bl	b5470 <spark_subscribe>
   b4682:	4623      	mov	r3, r4
   b4684:	4622      	mov	r2, r4
   b4686:	4923      	ldr	r1, [pc, #140]	; (b4714 <setup+0xc8>)
   b4688:	4823      	ldr	r0, [pc, #140]	; (b4718 <setup+0xcc>)
   b468a:	e9cd 4400 	strd	r4, r4, [sp]
   b468e:	f000 feef 	bl	b5470 <spark_subscribe>
    get_data(Time.day());
   b4692:	f001 fa31 	bl	b5af8 <_ZN9TimeClass3dayEv>
   b4696:	f7ff ff99 	bl	b45cc <_Z8get_datai>
    Serial.printf("Return value: %d",client.connect("sparkclient_" + String(Time.now()),"mqtt","mqtt"));
   b469a:	f001 fe93 	bl	b63c4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b469e:	491f      	ldr	r1, [pc, #124]	; (b471c <setup+0xd0>)
   b46a0:	4604      	mov	r4, r0
   b46a2:	a806      	add	r0, sp, #24
   b46a4:	f001 f845 	bl	b5732 <_ZN6StringC1EPK19__FlashStringHelper>
   b46a8:	f001 f9fd 	bl	b5aa6 <_ZN9TimeClass3nowEv>
   b46ac:	220a      	movs	r2, #10
   b46ae:	4601      	mov	r1, r0
   b46b0:	a802      	add	r0, sp, #8
   b46b2:	f001 f864 	bl	b577e <_ZN6StringC1Elh>
   b46b6:	a902      	add	r1, sp, #8
   b46b8:	a806      	add	r0, sp, #24
   b46ba:	f001 f88e 	bl	b57da <_ZplRK15StringSumHelperRK6String>
   b46be:	4b18      	ldr	r3, [pc, #96]	; (b4720 <setup+0xd4>)
   b46c0:	6801      	ldr	r1, [r0, #0]
   b46c2:	4818      	ldr	r0, [pc, #96]	; (b4724 <setup+0xd8>)
   b46c4:	461a      	mov	r2, r3
   b46c6:	f000 fa6d 	bl	b4ba4 <_ZN4MQTT7connectEPKcS1_S1_>
   b46ca:	4917      	ldr	r1, [pc, #92]	; (b4728 <setup+0xdc>)
   b46cc:	4602      	mov	r2, r0
   b46ce:	4620      	mov	r0, r4
   b46d0:	f7ff fda0 	bl	b4214 <_ZN5Print6printfEPKcz>
   b46d4:	a802      	add	r0, sp, #8
   b46d6:	f000 ffe1 	bl	b569c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b46da:	a806      	add	r0, sp, #24
   b46dc:	f000 ffde 	bl	b569c <_ZN6StringD1Ev>
    if (client.isConnected()) 
   b46e0:	4810      	ldr	r0, [pc, #64]	; (b4724 <setup+0xd8>)
   b46e2:	f000 f96f 	bl	b49c4 <_ZN4MQTT11isConnectedEv>
   b46e6:	b158      	cbz	r0, b4700 <setup+0xb4>
        client.publish("power/get","hello world");
   b46e8:	4a10      	ldr	r2, [pc, #64]	; (b472c <setup+0xe0>)
   b46ea:	4911      	ldr	r1, [pc, #68]	; (b4730 <setup+0xe4>)
   b46ec:	480d      	ldr	r0, [pc, #52]	; (b4724 <setup+0xd8>)
   b46ee:	f000 fae4 	bl	b4cba <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b46f2:	4910      	ldr	r1, [pc, #64]	; (b4734 <setup+0xe8>)
   b46f4:	480b      	ldr	r0, [pc, #44]	; (b4724 <setup+0xd8>)
}
   b46f6:	b00a      	add	sp, #40	; 0x28
   b46f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        client.subscribe("power/prices");
   b46fc:	f000 bc81 	b.w	b5002 <_ZN4MQTT9subscribeEPKc>
}
   b4700:	b00a      	add	sp, #40	; 0x28
   b4702:	bd10      	pop	{r4, pc}
   b4704:	2003d1a4 	.word	0x2003d1a4
   b4708:	000b40b9 	.word	0x000b40b9
   b470c:	000b4111 	.word	0x000b4111
   b4710:	000b9bae 	.word	0x000b9bae
   b4714:	000b4739 	.word	0x000b4739
   b4718:	000b9d47 	.word	0x000b9d47
   b471c:	000b9bd6 	.word	0x000b9bd6
   b4720:	000b9be3 	.word	0x000b9be3
   b4724:	2003cefc 	.word	0x2003cefc
   b4728:	000b9d52 	.word	0x000b9d52
   b472c:	000b9d63 	.word	0x000b9d63
   b4730:	000b9d6f 	.word	0x000b9d6f
   b4734:	000b9ba8 	.word	0x000b9ba8

000b4738 <_Z14myPriceHandlerPKcS0_>:
{
   b4738:	b508      	push	{r3, lr}
    get_data(Time.day());
   b473a:	f001 f9dd 	bl	b5af8 <_ZN9TimeClass3dayEv>
}
   b473e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    get_data(Time.day());
   b4742:	f7ff bf43 	b.w	b45cc <_Z8get_datai>
	...

000b4748 <_GLOBAL__sub_I_cost>:
   b4748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
   b474a:	4b0a      	ldr	r3, [pc, #40]	; (b4774 <_GLOBAL__sub_I_cost+0x2c>)
MQTT client("192.168.0.103", PORT, 512, 30, callback);
   b474c:	490a      	ldr	r1, [pc, #40]	; (b4778 <_GLOBAL__sub_I_cost+0x30>)
   b474e:	480b      	ldr	r0, [pc, #44]	; (b477c <_GLOBAL__sub_I_cost+0x34>)
   b4750:	2201      	movs	r2, #1
   b4752:	701a      	strb	r2, [r3, #0]
   b4754:	2300      	movs	r3, #0
   b4756:	9302      	str	r3, [sp, #8]
   b4758:	4b09      	ldr	r3, [pc, #36]	; (b4780 <_GLOBAL__sub_I_cost+0x38>)
   b475a:	9301      	str	r3, [sp, #4]
   b475c:	231e      	movs	r3, #30
   b475e:	9300      	str	r3, [sp, #0]
   b4760:	f240 725b 	movw	r2, #1883	; 0x75b
   b4764:	f44f 7300 	mov.w	r3, #512	; 0x200
   b4768:	f000 f850 	bl	b480c <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
   b476c:	b005      	add	sp, #20
   b476e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4772:	bf00      	nop
   b4774:	2003cef0 	.word	0x2003cef0
   b4778:	000b9d79 	.word	0x000b9d79
   b477c:	2003cefc 	.word	0x2003cefc
   b4780:	000b40f5 	.word	0x000b40f5

000b4784 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4784:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4788:	b510      	push	{r4, lr}
   b478a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b478c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b478e:	b113      	cbz	r3, b4796 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4790:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4792:	f000 fc91 	bl	b50b8 <os_mutex_lock>
#endif
#endif
#endif
        }
   b4796:	4620      	mov	r0, r4
   b4798:	bd10      	pop	{r4, pc}

000b479a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b479a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b479c:	6803      	ldr	r3, [r0, #0]
   b479e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b47a2:	4604      	mov	r4, r0
            if (mqtt->thread)
   b47a4:	b112      	cbz	r2, b47ac <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b47a6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b47a8:	f000 fc8e 	bl	b50c8 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b47ac:	4620      	mov	r0, r4
   b47ae:	bd10      	pop	{r4, pc}

000b47b0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b47b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b47b2:	461f      	mov	r7, r3
   b47b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b47b8:	4604      	mov	r4, r0
   b47ba:	460d      	mov	r5, r1
   b47bc:	4616      	mov	r6, r2
    if (thread) {
   b47be:	b12b      	cbz	r3, b47cc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b47c0:	2301      	movs	r3, #1
   b47c2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b47c6:	3058      	adds	r0, #88	; 0x58
   b47c8:	f000 fc6e 	bl	b50a8 <os_mutex_create>
    }
    this->callback = callback;
   b47cc:	9b08      	ldr	r3, [sp, #32]
   b47ce:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b47d0:	2300      	movs	r3, #0
   b47d2:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b47d4:	b106      	cbz	r6, b47d8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b47d6:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b47d8:	b125      	cbz	r5, b47e4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b47da:	4629      	mov	r1, r5
   b47dc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b47e0:	f000 ffbb 	bl	b575a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b47e4:	9b06      	ldr	r3, [sp, #24]
   b47e6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b47e8:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b47ea:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b47ec:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b47f0:	2bff      	cmp	r3, #255	; 0xff
   b47f2:	bfb8      	it	lt
   b47f4:	23ff      	movlt	r3, #255	; 0xff
   b47f6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b47fa:	b108      	cbz	r0, b4800 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b47fc:	f7ff fc4f 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4800:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4804:	f7ff fc49 	bl	b409a <_Znaj>
   b4808:	61e0      	str	r0, [r4, #28]
}
   b480a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b480c <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b480c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4810:	4604      	mov	r4, r0
            bool thread) {
   b4812:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b4814:	4617      	mov	r7, r2
   b4816:	4698      	mov	r8, r3
   b4818:	460e      	mov	r6, r1
            bool thread) {
   b481a:	f002 f981 	bl	b6b20 <_ZN9TCPClientC1Ev>
   b481e:	490d      	ldr	r1, [pc, #52]	; (b4854 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b4820:	61e5      	str	r5, [r4, #28]
   b4822:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4826:	f000 ff84 	bl	b5732 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b482a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b482e:	9303      	str	r3, [sp, #12]
   b4830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b4832:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4834:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b4838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b483a:	9300      	str	r3, [sp, #0]
   b483c:	4620      	mov	r0, r4
            bool thread) {
   b483e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4842:	463b      	mov	r3, r7
   b4844:	462a      	mov	r2, r5
   b4846:	4631      	mov	r1, r6
   b4848:	f7ff ffb2 	bl	b47b0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b484c:	4620      	mov	r0, r4
   b484e:	b004      	add	sp, #16
   b4850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4854:	000b9c60 	.word	0x000b9c60

000b4858 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4858:	b510      	push	{r4, lr}
   b485a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b485c:	4620      	mov	r0, r4
   b485e:	f002 f8bb 	bl	b69d8 <_ZN9TCPClient9availableEv>
   b4862:	2800      	cmp	r0, #0
   b4864:	d0fa      	beq.n	b485c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b4866:	4620      	mov	r0, r4
   b4868:	f001 fec4 	bl	b65f4 <_ZN9TCPClient4readEv>
}
   b486c:	b2c0      	uxtb	r0, r0
   b486e:	bd10      	pop	{r4, pc}

000b4870 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4874:	4605      	mov	r5, r0
   b4876:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4878:	f7ff ffee 	bl	b4858 <_ZN4MQTT8readByteEv>
   b487c:	69eb      	ldr	r3, [r5, #28]
   b487e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4880:	69eb      	ldr	r3, [r5, #28]
   b4882:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b4886:	f04f 0901 	mov.w	r9, #1
   b488a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b488e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4890:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4892:	4628      	mov	r0, r5
   b4894:	f7ff ffe0 	bl	b4858 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4898:	4626      	mov	r6, r4
   b489a:	69eb      	ldr	r3, [r5, #28]
   b489c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b489e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b48a2:	fb13 f309 	smulbb	r3, r3, r9
   b48a6:	441f      	add	r7, r3
        buffer[len++] = digit;
   b48a8:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b48aa:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b48ac:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b48ae:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b48b0:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b48b4:	d4ed      	bmi.n	b4892 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b48b6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b48b8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b48bc:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b48c0:	d11e      	bne.n	b4900 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b48c2:	4628      	mov	r0, r5
   b48c4:	f7ff ffc8 	bl	b4858 <_ZN4MQTT8readByteEv>
   b48c8:	69eb      	ldr	r3, [r5, #28]
   b48ca:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b48cc:	4628      	mov	r0, r5
   b48ce:	f7ff ffc3 	bl	b4858 <_ZN4MQTT8readByteEv>
   b48d2:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b48d4:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b48d6:	b2b6      	uxth	r6, r6
   b48d8:	69eb      	ldr	r3, [r5, #28]
   b48da:	b2a4      	uxth	r4, r4
   b48dc:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b48de:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b48e0:	b2b6      	uxth	r6, r6
   b48e2:	42be      	cmp	r6, r7
   b48e4:	d20e      	bcs.n	b4904 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b48e6:	4628      	mov	r0, r5
   b48e8:	f7ff ffb6 	bl	b4858 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b48ec:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b48f0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b48f2:	bf84      	itt	hi
   b48f4:	69eb      	ldrhi	r3, [r5, #28]
   b48f6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b48f8:	3401      	adds	r4, #1
   b48fa:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b48fc:	3601      	adds	r6, #1
   b48fe:	e7ef      	b.n	b48e0 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4900:	2600      	movs	r6, #0
   b4902:	e7ed      	b.n	b48e0 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4904:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b4908:	42a3      	cmp	r3, r4
   b490a:	bf2c      	ite	cs
   b490c:	4620      	movcs	r0, r4
   b490e:	2000      	movcc	r0, #0
   b4910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4914 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4918:	4615      	mov	r5, r2
   b491a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b491c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b491e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4920:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4922:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4924:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4926:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b492a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b492e:	f103 0401 	add.w	r4, r3, #1
   b4932:	4403      	add	r3, r0
            digit |= 0x80;
   b4934:	bf88      	it	hi
   b4936:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b493a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b493e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4942:	b2e4      	uxtb	r4, r4
   b4944:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4948:	d81e      	bhi.n	b4988 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b494a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b494e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4952:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4954:	4622      	mov	r2, r4
   b4956:	a901      	add	r1, sp, #4
   b4958:	4428      	add	r0, r5
    buf[4-llen] = header;
   b495a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b495e:	f003 f87a 	bl	b7a56 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4962:	1c72      	adds	r2, r6, #1
   b4964:	4422      	add	r2, r4
   b4966:	4641      	mov	r1, r8
   b4968:	4638      	mov	r0, r7
   b496a:	f001 fe2e 	bl	b65ca <_ZN9TCPClient5writeEPKhj>
   b496e:	4605      	mov	r5, r0
   b4970:	f000 fb82 	bl	b5078 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4974:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b4976:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4978:	4432      	add	r2, r6
   b497a:	b2a8      	uxth	r0, r5
}
   b497c:	1a13      	subs	r3, r2, r0
   b497e:	4258      	negs	r0, r3
   b4980:	4158      	adcs	r0, r3
   b4982:	b002      	add	sp, #8
   b4984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4988:	4623      	mov	r3, r4
   b498a:	e7ca      	b.n	b4922 <_ZN4MQTT5writeEhPht+0xe>

000b498c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b498c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b498e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4990:	4605      	mov	r5, r0
    pos += 2;
   b4992:	b298      	uxth	r0, r3
   b4994:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b4996:	5cce      	ldrb	r6, [r1, r3]
   b4998:	b29c      	uxth	r4, r3
   b499a:	b156      	cbz	r6, b49b2 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b499c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b49a0:	4584      	cmp	ip, r0
   b49a2:	f103 0701 	add.w	r7, r3, #1
   b49a6:	d904      	bls.n	b49b2 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b49a8:	1c44      	adds	r4, r0, #1
   b49aa:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b49ac:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b49ae:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b49b0:	e7f1      	b.n	b4996 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b49b2:	b299      	uxth	r1, r3
   b49b4:	1a41      	subs	r1, r0, r1
   b49b6:	440a      	add	r2, r1
   b49b8:	0a21      	lsrs	r1, r4, #8
   b49ba:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b49be:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b49c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b49c4 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b49c4:	b538      	push	{r3, r4, r5, lr}
   b49c6:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b49c8:	f001 ff28 	bl	b681c <_ZN9TCPClient9connectedEv>
   b49cc:	2800      	cmp	r0, #0
   b49ce:	bf14      	ite	ne
   b49d0:	2501      	movne	r5, #1
   b49d2:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b49d4:	d102      	bne.n	b49dc <_ZN4MQTT11isConnectedEv+0x18>
   b49d6:	4620      	mov	r0, r4
   b49d8:	f002 f858 	bl	b6a8c <_ZN9TCPClient4stopEv>
    return rc;
}
   b49dc:	4628      	mov	r0, r5
   b49de:	bd38      	pop	{r3, r4, r5, pc}

000b49e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b49e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b49e4:	b088      	sub	sp, #32
   b49e6:	4604      	mov	r4, r0
   b49e8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b49ec:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b49f0:	4689      	mov	r9, r1
   b49f2:	4617      	mov	r7, r2
   b49f4:	461e      	mov	r6, r3
    if (!isConnected()) {
   b49f6:	f7ff ffe5 	bl	b49c4 <_ZN4MQTT11isConnectedEv>
   b49fa:	4605      	mov	r5, r0
   b49fc:	2800      	cmp	r0, #0
   b49fe:	f040 80cd 	bne.w	b4b9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4a02:	4621      	mov	r1, r4
   b4a04:	a801      	add	r0, sp, #4
   b4a06:	f7ff febd 	bl	b4784 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4a0a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4a0c:	2900      	cmp	r1, #0
   b4a0e:	f040 8088 	bne.w	b4b22 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4a12:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4a16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4a18:	462b      	mov	r3, r5
   b4a1a:	4620      	mov	r0, r4
   b4a1c:	f001 fe80 	bl	b6720 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4a20:	2800      	cmp	r0, #0
   b4a22:	d07a      	beq.n	b4b1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4a24:	2301      	movs	r3, #1
   b4a26:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4a28:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4a2c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4a2e:	2b04      	cmp	r3, #4
   b4a30:	4b5b      	ldr	r3, [pc, #364]	; (b4ba0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4a32:	f040 8081 	bne.w	b4b38 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4a36:	6818      	ldr	r0, [r3, #0]
   b4a38:	8899      	ldrh	r1, [r3, #4]
   b4a3a:	799b      	ldrb	r3, [r3, #6]
   b4a3c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4a40:	f88d 300e 	strb.w	r3, [sp, #14]
   b4a44:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4a46:	f8c2 0005 	str.w	r0, [r2, #5]
   b4a4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4a4e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4a52:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4a56:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4a58:	230c      	movs	r3, #12
            if (willTopic) {
   b4a5a:	f1b8 0f00 	cmp.w	r8, #0
   b4a5e:	f000 8081 	beq.w	b4b64 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4a62:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b4a66:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4a6a:	0140      	lsls	r0, r0, #5
   b4a6c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4a70:	f040 0006 	orr.w	r0, r0, #6
   b4a74:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b4a76:	f1ba 0f00 	cmp.w	sl, #0
   b4a7a:	d101      	bne.n	b4a80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4a7c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4a80:	b11f      	cbz	r7, b4a8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4a82:	2e00      	cmp	r6, #0
   b4a84:	d170      	bne.n	b4b68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b4a86:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4a8a:	69e2      	ldr	r2, [r4, #28]
   b4a8c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4a8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4a90:	69e1      	ldr	r1, [r4, #28]
   b4a92:	1c58      	adds	r0, r3, #1
   b4a94:	1212      	asrs	r2, r2, #8
   b4a96:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b4a98:	1c9a      	adds	r2, r3, #2
   b4a9a:	69e1      	ldr	r1, [r4, #28]
   b4a9c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4a9e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4aa0:	3303      	adds	r3, #3
   b4aa2:	69e2      	ldr	r2, [r4, #28]
   b4aa4:	4649      	mov	r1, r9
   b4aa6:	4620      	mov	r0, r4
   b4aa8:	f7ff ff70 	bl	b498c <_ZN4MQTT11writeStringEPKcPht>
   b4aac:	4603      	mov	r3, r0
            if (willTopic) {
   b4aae:	f1b8 0f00 	cmp.w	r8, #0
   b4ab2:	d00b      	beq.n	b4acc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4ab4:	69e2      	ldr	r2, [r4, #28]
   b4ab6:	4641      	mov	r1, r8
   b4ab8:	4620      	mov	r0, r4
   b4aba:	f7ff ff67 	bl	b498c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b4abe:	69e2      	ldr	r2, [r4, #28]
   b4ac0:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4ac2:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4ac4:	4620      	mov	r0, r4
   b4ac6:	f7ff ff61 	bl	b498c <_ZN4MQTT11writeStringEPKcPht>
   b4aca:	4603      	mov	r3, r0
            if(user != NULL) {
   b4acc:	b167      	cbz	r7, b4ae8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b4ace:	69e2      	ldr	r2, [r4, #28]
   b4ad0:	4639      	mov	r1, r7
   b4ad2:	4620      	mov	r0, r4
   b4ad4:	f7ff ff5a 	bl	b498c <_ZN4MQTT11writeStringEPKcPht>
   b4ad8:	4603      	mov	r3, r0
                if(pass != NULL) {
   b4ada:	b12e      	cbz	r6, b4ae8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b4adc:	69e2      	ldr	r2, [r4, #28]
   b4ade:	4631      	mov	r1, r6
   b4ae0:	4620      	mov	r0, r4
   b4ae2:	f7ff ff53 	bl	b498c <_ZN4MQTT11writeStringEPKcPht>
   b4ae6:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4ae8:	3b05      	subs	r3, #5
   b4aea:	69e2      	ldr	r2, [r4, #28]
   b4aec:	b29b      	uxth	r3, r3
   b4aee:	2110      	movs	r1, #16
   b4af0:	4620      	mov	r0, r4
   b4af2:	f7ff ff0f 	bl	b4914 <_ZN4MQTT5writeEhPht>
   b4af6:	f000 fabf 	bl	b5078 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4afa:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4afe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4b02:	4620      	mov	r0, r4
   b4b04:	f001 ff68 	bl	b69d8 <_ZN9TCPClient9availableEv>
   b4b08:	bb88      	cbnz	r0, b4b6e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b4b0a:	f000 fab5 	bl	b5078 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4b0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4b10:	1ac0      	subs	r0, r0, r3
   b4b12:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4b14:	4373      	muls	r3, r6
   b4b16:	4298      	cmp	r0, r3
   b4b18:	d9f3      	bls.n	b4b02 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b4b1a:	4620      	mov	r0, r4
   b4b1c:	f001 ffb6 	bl	b6a8c <_ZN9TCPClient4stopEv>
   b4b20:	e035      	b.n	b4b8e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4b22:	a802      	add	r0, sp, #8
   b4b24:	f001 fbe4 	bl	b62f0 <_ZN9IPAddressC1EPKh>
   b4b28:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4b2c:	462b      	mov	r3, r5
   b4b2e:	a902      	add	r1, sp, #8
   b4b30:	4620      	mov	r0, r4
   b4b32:	f001 fed5 	bl	b68e0 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4b36:	e773      	b.n	b4a20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4b38:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4b3c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4b40:	7bdb      	ldrb	r3, [r3, #15]
   b4b42:	f10d 0c08 	add.w	ip, sp, #8
   b4b46:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b4b4a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b4b4e:	ab02      	add	r3, sp, #8
   b4b50:	cb03      	ldmia	r3!, {r0, r1}
   b4b52:	f8c2 0005 	str.w	r0, [r2, #5]
   b4b56:	f8c2 1009 	str.w	r1, [r2, #9]
   b4b5a:	f89c 3000 	ldrb.w	r3, [ip]
   b4b5e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b4b60:	230e      	movs	r3, #14
   b4b62:	e77a      	b.n	b4a5a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b4b64:	2002      	movs	r0, #2
   b4b66:	e786      	b.n	b4a76 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b4b68:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4b6c:	e78d      	b.n	b4a8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4b6e:	a902      	add	r1, sp, #8
   b4b70:	4620      	mov	r0, r4
   b4b72:	f7ff fe7d 	bl	b4870 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b4b76:	2804      	cmp	r0, #4
   b4b78:	d1cf      	bne.n	b4b1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b4b7a:	69e3      	ldr	r3, [r4, #28]
   b4b7c:	78de      	ldrb	r6, [r3, #3]
   b4b7e:	2e00      	cmp	r6, #0
   b4b80:	d1cb      	bne.n	b4b1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b4b82:	f000 fa79 	bl	b5078 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b4b86:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b4b88:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b4b8a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4b8e:	a801      	add	r0, sp, #4
   b4b90:	f7ff fe03 	bl	b479a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4b94:	4628      	mov	r0, r5
   b4b96:	b008      	add	sp, #32
   b4b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b4b9c:	2500      	movs	r5, #0
   b4b9e:	e7f9      	b.n	b4b94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4ba0:	000b9d87 	.word	0x000b9d87

000b4ba4 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4ba4:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4ba6:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4baa:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4bac:	2401      	movs	r4, #1
   b4bae:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b4bb2:	2400      	movs	r4, #0
   b4bb4:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b4bb8:	e9cd 4400 	strd	r4, r4, [sp]
   b4bbc:	f7ff ff10 	bl	b49e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b4bc0:	b006      	add	sp, #24
   b4bc2:	bd10      	pop	{r4, pc}

000b4bc4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4bc8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b4bcc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b4bd0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4bd4:	4604      	mov	r4, r0
   b4bd6:	468b      	mov	fp, r1
   b4bd8:	4616      	mov	r6, r2
   b4bda:	461f      	mov	r7, r3
    if (isConnected()) {
   b4bdc:	f7ff fef2 	bl	b49c4 <_ZN4MQTT11isConnectedEv>
   b4be0:	4682      	mov	sl, r0
   b4be2:	2800      	cmp	r0, #0
   b4be4:	d051      	beq.n	b4c8a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4be6:	4621      	mov	r1, r4
   b4be8:	a801      	add	r0, sp, #4
   b4bea:	f7ff fdcb 	bl	b4784 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b4bee:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b4bf2:	69e0      	ldr	r0, [r4, #28]
   b4bf4:	2100      	movs	r1, #0
   b4bf6:	f002 ff3c 	bl	b7a72 <memset>
        length = writeString(topic, buffer, length);
   b4bfa:	2305      	movs	r3, #5
   b4bfc:	69e2      	ldr	r2, [r4, #28]
   b4bfe:	4659      	mov	r1, fp
   b4c00:	4620      	mov	r0, r4
   b4c02:	f7ff fec3 	bl	b498c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4c06:	1e6b      	subs	r3, r5, #1
   b4c08:	2b01      	cmp	r3, #1
   b4c0a:	d815      	bhi.n	b4c38 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4c0c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4c0e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4c10:	3101      	adds	r1, #1
   b4c12:	b289      	uxth	r1, r1
   b4c14:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4c16:	0a09      	lsrs	r1, r1, #8
   b4c18:	5419      	strb	r1, [r3, r0]
   b4c1a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4c1c:	69e3      	ldr	r3, [r4, #28]
   b4c1e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4c20:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4c22:	3002      	adds	r0, #2
   b4c24:	5499      	strb	r1, [r3, r2]
   b4c26:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4c28:	f1b8 0f00 	cmp.w	r8, #0
   b4c2c:	d004      	beq.n	b4c38 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b4c2e:	8c23      	ldrh	r3, [r4, #32]
   b4c30:	1c5a      	adds	r2, r3, #1
   b4c32:	8422      	strh	r2, [r4, #32]
   b4c34:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4c38:	2100      	movs	r1, #0
   b4c3a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4c3c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b4c3e:	69e2      	ldr	r2, [r4, #28]
   b4c40:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4c42:	d90a      	bls.n	b4c5a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4c44:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4c48:	459c      	cmp	ip, r3
   b4c4a:	d906      	bls.n	b4c5a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4c4c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b4c50:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4c54:	3101      	adds	r1, #1
   b4c56:	b289      	uxth	r1, r1
   b4c58:	e7ef      	b.n	b4c3a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b4c5a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b4c5e:	2900      	cmp	r1, #0
   b4c60:	bf0c      	ite	eq
   b4c62:	2130      	moveq	r1, #48	; 0x30
   b4c64:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b4c66:	f1b9 0f00 	cmp.w	r9, #0
   b4c6a:	d001      	beq.n	b4c70 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4c6c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b4c70:	2d02      	cmp	r5, #2
   b4c72:	d10e      	bne.n	b4c92 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b4c74:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b4c78:	3b05      	subs	r3, #5
   b4c7a:	b29b      	uxth	r3, r3
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	f7ff fe49 	bl	b4914 <_ZN4MQTT5writeEhPht>
   b4c82:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4c84:	a801      	add	r0, sp, #4
   b4c86:	f7ff fd88 	bl	b479a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4c8a:	4650      	mov	r0, sl
   b4c8c:	b003      	add	sp, #12
   b4c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b4c92:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b4c94:	bf08      	it	eq
   b4c96:	f041 0102 	orreq.w	r1, r1, #2
   b4c9a:	e7ed      	b.n	b4c78 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b4c9c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b4c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b4c9e:	9c08      	ldr	r4, [sp, #32]
   b4ca0:	9403      	str	r4, [sp, #12]
   b4ca2:	2400      	movs	r4, #0
   b4ca4:	9402      	str	r4, [sp, #8]
   b4ca6:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b4caa:	9401      	str	r4, [sp, #4]
   b4cac:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b4cb0:	9400      	str	r4, [sp, #0]
   b4cb2:	f7ff ff87 	bl	b4bc4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b4cb6:	b004      	add	sp, #16
   b4cb8:	bd10      	pop	{r4, pc}

000b4cba <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b4cba:	b530      	push	{r4, r5, lr}
   b4cbc:	b087      	sub	sp, #28
   b4cbe:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4cc0:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b4cc2:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4cc4:	9204      	str	r2, [sp, #16]
   b4cc6:	f002 ff4a 	bl	b7b5e <strlen>
   b4cca:	2500      	movs	r5, #0
   b4ccc:	4603      	mov	r3, r0
   b4cce:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4cd2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4cd6:	9500      	str	r5, [sp, #0]
   b4cd8:	4620      	mov	r0, r4
   b4cda:	f7ff ffdf 	bl	b4c9c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b4cde:	b007      	add	sp, #28
   b4ce0:	bd30      	pop	{r4, r5, pc}

000b4ce2 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b4ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4ce4:	4604      	mov	r4, r0
   b4ce6:	460e      	mov	r6, r1
    if (isConnected()) {
   b4ce8:	f7ff fe6c 	bl	b49c4 <_ZN4MQTT11isConnectedEv>
   b4cec:	4605      	mov	r5, r0
   b4cee:	b1c8      	cbz	r0, b4d24 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4cf0:	4621      	mov	r1, r4
   b4cf2:	a801      	add	r0, sp, #4
   b4cf4:	f7ff fd46 	bl	b4784 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4cf8:	69e3      	ldr	r3, [r4, #28]
   b4cfa:	2262      	movs	r2, #98	; 0x62
   b4cfc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4cfe:	69e3      	ldr	r3, [r4, #28]
   b4d00:	2202      	movs	r2, #2
   b4d02:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4d04:	69e3      	ldr	r3, [r4, #28]
   b4d06:	0a32      	lsrs	r2, r6, #8
   b4d08:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4d0a:	69e3      	ldr	r3, [r4, #28]
   b4d0c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4d0e:	69e1      	ldr	r1, [r4, #28]
   b4d10:	2204      	movs	r2, #4
   b4d12:	4620      	mov	r0, r4
   b4d14:	f001 fc59 	bl	b65ca <_ZN9TCPClient5writeEPKhj>
   b4d18:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4d1a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4d1c:	bf18      	it	ne
   b4d1e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4d20:	f7ff fd3b 	bl	b479a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4d24:	4628      	mov	r0, r5
   b4d26:	b002      	add	sp, #8
   b4d28:	bd70      	pop	{r4, r5, r6, pc}

000b4d2a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b4d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4d2c:	4604      	mov	r4, r0
   b4d2e:	460e      	mov	r6, r1
    if (isConnected()) {
   b4d30:	f7ff fe48 	bl	b49c4 <_ZN4MQTT11isConnectedEv>
   b4d34:	4605      	mov	r5, r0
   b4d36:	b1c8      	cbz	r0, b4d6c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4d38:	4621      	mov	r1, r4
   b4d3a:	a801      	add	r0, sp, #4
   b4d3c:	f7ff fd22 	bl	b4784 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4d40:	69e3      	ldr	r3, [r4, #28]
   b4d42:	2272      	movs	r2, #114	; 0x72
   b4d44:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4d46:	69e3      	ldr	r3, [r4, #28]
   b4d48:	2202      	movs	r2, #2
   b4d4a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4d4c:	69e3      	ldr	r3, [r4, #28]
   b4d4e:	0a32      	lsrs	r2, r6, #8
   b4d50:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4d52:	69e3      	ldr	r3, [r4, #28]
   b4d54:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4d56:	69e1      	ldr	r1, [r4, #28]
   b4d58:	2204      	movs	r2, #4
   b4d5a:	4620      	mov	r0, r4
   b4d5c:	f001 fc35 	bl	b65ca <_ZN9TCPClient5writeEPKhj>
   b4d60:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4d62:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4d64:	bf18      	it	ne
   b4d66:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4d68:	f7ff fd17 	bl	b479a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4d6c:	4628      	mov	r0, r5
   b4d6e:	b002      	add	sp, #8
   b4d70:	bd70      	pop	{r4, r5, r6, pc}

000b4d72 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b4d72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d76:	ed2d 8b02 	vpush	{d8}
   b4d7a:	b087      	sub	sp, #28
   b4d7c:	af00      	add	r7, sp, #0
   b4d7e:	4604      	mov	r4, r0
    if (isConnected()) {
   b4d80:	f7ff fe20 	bl	b49c4 <_ZN4MQTT11isConnectedEv>
   b4d84:	4681      	mov	r9, r0
   b4d86:	b1f8      	cbz	r0, b4dc8 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b4d88:	4621      	mov	r1, r4
   b4d8a:	f107 0014 	add.w	r0, r7, #20
   b4d8e:	f7ff fcf9 	bl	b4784 <_ZN4MQTT11MutexLockerC1EPS_>
   b4d92:	f000 f971 	bl	b5078 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b4d96:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4d9c:	4353      	muls	r3, r2
   b4d9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4da0:	1a82      	subs	r2, r0, r2
   b4da2:	429a      	cmp	r2, r3
   b4da4:	4606      	mov	r6, r0
   b4da6:	d803      	bhi.n	b4db0 <_ZN4MQTT4loopEv+0x3e>
   b4da8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4daa:	1a82      	subs	r2, r0, r2
   b4dac:	4293      	cmp	r3, r2
   b4dae:	d221      	bcs.n	b4df4 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b4db0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4db4:	b17b      	cbz	r3, b4dd6 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b4db6:	4620      	mov	r0, r4
   b4db8:	f001 fe68 	bl	b6a8c <_ZN9TCPClient4stopEv>
                return false;
   b4dbc:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b4dc0:	f107 0014 	add.w	r0, r7, #20
   b4dc4:	f7ff fce9 	bl	b479a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4dc8:	4648      	mov	r0, r9
   b4dca:	371c      	adds	r7, #28
   b4dcc:	46bd      	mov	sp, r7
   b4dce:	ecbd 8b02 	vpop	{d8}
   b4dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4dd6:	69e2      	ldr	r2, [r4, #28]
   b4dd8:	21c0      	movs	r1, #192	; 0xc0
   b4dda:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4ddc:	69e2      	ldr	r2, [r4, #28]
   b4dde:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b4de0:	69e1      	ldr	r1, [r4, #28]
   b4de2:	2202      	movs	r2, #2
   b4de4:	4620      	mov	r0, r4
   b4de6:	f001 fbf0 	bl	b65ca <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4dea:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4dee:	2301      	movs	r3, #1
   b4df0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4df4:	4620      	mov	r0, r4
   b4df6:	f001 fdef 	bl	b69d8 <_ZN9TCPClient9availableEv>
   b4dfa:	2800      	cmp	r0, #0
   b4dfc:	d0e0      	beq.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4dfe:	f107 0113 	add.w	r1, r7, #19
   b4e02:	4620      	mov	r0, r4
   b4e04:	f7ff fd34 	bl	b4870 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4e08:	4683      	mov	fp, r0
   b4e0a:	2800      	cmp	r0, #0
   b4e0c:	d0d8      	beq.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4e0e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4e10:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4e12:	7819      	ldrb	r1, [r3, #0]
   b4e14:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4e18:	2a30      	cmp	r2, #48	; 0x30
   b4e1a:	d17f      	bne.n	b4f1c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4e1c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4e20:	f1ba 0f00 	cmp.w	sl, #0
   b4e24:	d0cc      	beq.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4e26:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4e2a:	466a      	mov	r2, sp
   b4e2c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4e30:	eb03 020c 	add.w	r2, r3, ip
   b4e34:	7851      	ldrb	r1, [r2, #1]
   b4e36:	7895      	ldrb	r5, [r2, #2]
   b4e38:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4e3c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b4e3e:	f105 0208 	add.w	r2, r5, #8
   b4e42:	4669      	mov	r1, sp
   b4e44:	08d2      	lsrs	r2, r2, #3
   b4e46:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4e4a:	4695      	mov	sp, r2
   b4e4c:	f10c 0203 	add.w	r2, ip, #3
   b4e50:	60fa      	str	r2, [r7, #12]
   b4e52:	eb03 0e02 	add.w	lr, r3, r2
   b4e56:	eb0d 0205 	add.w	r2, sp, r5
   b4e5a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4e5c:	f8c7 d008 	str.w	sp, [r7, #8]
   b4e60:	607a      	str	r2, [r7, #4]
   b4e62:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b4e66:	428a      	cmp	r2, r1
   b4e68:	d006      	beq.n	b4e78 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b4e6a:	460a      	mov	r2, r1
   b4e6c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b4e70:	f802 8b01 	strb.w	r8, [r2], #1
   b4e74:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b4e76:	e7f4      	b.n	b4e62 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b4e78:	2200      	movs	r2, #0
   b4e7a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4e7c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e80:	68f9      	ldr	r1, [r7, #12]
   b4e82:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4e86:	ebab 020c 	sub.w	r2, fp, ip
   b4e8a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4e8c:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b4e90:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e94:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4e96:	d125      	bne.n	b4ee4 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e98:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4e9c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4e9e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4ea0:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b4ea4:	f10c 0105 	add.w	r1, ip, #5
   b4ea8:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4eaa:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4eac:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4eb0:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4eb2:	69e3      	ldr	r3, [r4, #28]
   b4eb4:	2240      	movs	r2, #64	; 0x40
   b4eb6:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4eb8:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4eba:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4ebe:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4ec2:	69e3      	ldr	r3, [r4, #28]
   b4ec4:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4ec8:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4eca:	69e3      	ldr	r3, [r4, #28]
   b4ecc:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4ed0:	69e1      	ldr	r1, [r4, #28]
   b4ed2:	2204      	movs	r2, #4
   b4ed4:	4620      	mov	r0, r4
   b4ed6:	f001 fb78 	bl	b65ca <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4eda:	6266      	str	r6, [r4, #36]	; 0x24
   b4edc:	ee18 3a10 	vmov	r3, s16
   b4ee0:	469d      	mov	sp, r3
   b4ee2:	e76d      	b.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4ee4:	f1b8 0f04 	cmp.w	r8, #4
   b4ee8:	d115      	bne.n	b4f16 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4eea:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4eee:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4ef0:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4ef2:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4ef6:	f10c 0105 	add.w	r1, ip, #5
   b4efa:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4efc:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4efe:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4f02:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4f04:	69e3      	ldr	r3, [r4, #28]
   b4f06:	2250      	movs	r2, #80	; 0x50
   b4f08:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4f0a:	69e3      	ldr	r3, [r4, #28]
   b4f0c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4f0e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4f12:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4f14:	e7d5      	b.n	b4ec2 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4f16:	4419      	add	r1, r3
   b4f18:	47d0      	blx	sl
   b4f1a:	e7df      	b.n	b4edc <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4f1c:	2a50      	cmp	r2, #80	; 0x50
   b4f1e:	d108      	bne.n	b4f32 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4f20:	789a      	ldrb	r2, [r3, #2]
   b4f22:	78d9      	ldrb	r1, [r3, #3]
   b4f24:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4f28:	b289      	uxth	r1, r1
   b4f2a:	4620      	mov	r0, r4
   b4f2c:	f7ff fed9 	bl	b4ce2 <_ZN4MQTT14publishReleaseEt>
   b4f30:	e746      	b.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4f32:	2a40      	cmp	r2, #64	; 0x40
   b4f34:	d112      	bne.n	b4f5c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4f36:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4f38:	2a00      	cmp	r2, #0
   b4f3a:	f43f af41 	beq.w	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b4f3e:	f1bb 0f04 	cmp.w	fp, #4
   b4f42:	f47f af3d 	bne.w	b4dc0 <_ZN4MQTT4loopEv+0x4e>
   b4f46:	f011 0f06 	tst.w	r1, #6
   b4f4a:	f47f af39 	bne.w	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b4f4e:	7899      	ldrb	r1, [r3, #2]
   b4f50:	78d8      	ldrb	r0, [r3, #3]
   b4f52:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b4f56:	b280      	uxth	r0, r0
   b4f58:	4790      	blx	r2
   b4f5a:	e731      	b.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b4f5c:	2a60      	cmp	r2, #96	; 0x60
   b4f5e:	d108      	bne.n	b4f72 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b4f60:	789a      	ldrb	r2, [r3, #2]
   b4f62:	78d9      	ldrb	r1, [r3, #3]
   b4f64:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b4f68:	b289      	uxth	r1, r1
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	f7ff fedd 	bl	b4d2a <_ZN4MQTT15publishCompleteEt>
   b4f70:	e726      	b.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b4f72:	2a70      	cmp	r2, #112	; 0x70
   b4f74:	d0df      	beq.n	b4f36 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b4f76:	2a90      	cmp	r2, #144	; 0x90
   b4f78:	f43f af22 	beq.w	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b4f7c:	2ac0      	cmp	r2, #192	; 0xc0
   b4f7e:	d10a      	bne.n	b4f96 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b4f80:	22d0      	movs	r2, #208	; 0xd0
   b4f82:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b4f84:	69e3      	ldr	r3, [r4, #28]
   b4f86:	2200      	movs	r2, #0
   b4f88:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4f8a:	69e1      	ldr	r1, [r4, #28]
   b4f8c:	2202      	movs	r2, #2
   b4f8e:	4620      	mov	r0, r4
   b4f90:	f001 fb1b 	bl	b65ca <_ZN9TCPClient5writeEPKhj>
   b4f94:	e714      	b.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4f96:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4f98:	bf04      	itt	eq
   b4f9a:	2300      	moveq	r3, #0
   b4f9c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b4fa0:	e70e      	b.n	b4dc0 <_ZN4MQTT4loopEv+0x4e>

000b4fa2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b4fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4fa4:	4604      	mov	r4, r0
   b4fa6:	460f      	mov	r7, r1
   b4fa8:	4616      	mov	r6, r2
    if (isConnected()) {
   b4faa:	f7ff fd0b 	bl	b49c4 <_ZN4MQTT11isConnectedEv>
   b4fae:	4605      	mov	r5, r0
   b4fb0:	b310      	cbz	r0, b4ff8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b4fb2:	4621      	mov	r1, r4
   b4fb4:	a801      	add	r0, sp, #4
   b4fb6:	f7ff fbe5 	bl	b4784 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4fba:	8c23      	ldrh	r3, [r4, #32]
   b4fbc:	3301      	adds	r3, #1
   b4fbe:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b4fc0:	b1eb      	cbz	r3, b4ffe <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b4fc2:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b4fc4:	8c23      	ldrh	r3, [r4, #32]
   b4fc6:	69e2      	ldr	r2, [r4, #28]
   b4fc8:	0a1b      	lsrs	r3, r3, #8
   b4fca:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4fcc:	69e3      	ldr	r3, [r4, #28]
   b4fce:	8c22      	ldrh	r2, [r4, #32]
   b4fd0:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b4fd2:	69e2      	ldr	r2, [r4, #28]
   b4fd4:	2307      	movs	r3, #7
   b4fd6:	4639      	mov	r1, r7
   b4fd8:	4620      	mov	r0, r4
   b4fda:	f7ff fcd7 	bl	b498c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4fde:	69e3      	ldr	r3, [r4, #28]
   b4fe0:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b4fe2:	3804      	subs	r0, #4
   b4fe4:	b283      	uxth	r3, r0
   b4fe6:	69e2      	ldr	r2, [r4, #28]
   b4fe8:	2182      	movs	r1, #130	; 0x82
   b4fea:	4620      	mov	r0, r4
   b4fec:	f7ff fc92 	bl	b4914 <_ZN4MQTT5writeEhPht>
   b4ff0:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b4ff2:	a801      	add	r0, sp, #4
   b4ff4:	f7ff fbd1 	bl	b479a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4ff8:	4628      	mov	r0, r5
   b4ffa:	b003      	add	sp, #12
   b4ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4ffe:	2301      	movs	r3, #1
   b5000:	e7df      	b.n	b4fc2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5002 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5002:	2200      	movs	r2, #0
   b5004:	f7ff bfcd 	b.w	b4fa2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5008 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <netdb_freeaddrinfo+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	689b      	ldr	r3, [r3, #8]
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030268 	.word	0x00030268

000b5018 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <netdb_getaddrinfo+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	68db      	ldr	r3, [r3, #12]
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	00030268 	.word	0x00030268

000b5028 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b02      	ldr	r3, [pc, #8]	; (b5034 <HAL_Pin_Mode+0xc>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	689b      	ldr	r3, [r3, #8]
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	bd08      	pop	{r3, pc}
   b5034:	0003022c 	.word	0x0003022c

000b5038 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5038:	b508      	push	{r3, lr}
   b503a:	4b02      	ldr	r3, [pc, #8]	; (b5044 <HAL_Interrupts_Attach+0xc>)
   b503c:	681b      	ldr	r3, [r3, #0]
   b503e:	699b      	ldr	r3, [r3, #24]
   b5040:	9301      	str	r3, [sp, #4]
   b5042:	bd08      	pop	{r3, pc}
   b5044:	0003022c 	.word	0x0003022c

000b5048 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <HAL_Interrupts_Detach+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	69db      	ldr	r3, [r3, #28]
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	0003022c 	.word	0x0003022c

000b5058 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <if_index_to_name+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	695b      	ldr	r3, [r3, #20]
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	0003026c 	.word	0x0003026c

000b5068 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b02      	ldr	r3, [pc, #8]	; (b5074 <HAL_RNG_GetRandomNumber+0xc>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	685b      	ldr	r3, [r3, #4]
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	bd08      	pop	{r3, pc}
   b5074:	00030218 	.word	0x00030218

000b5078 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5078:	b508      	push	{r3, lr}
   b507a:	4b02      	ldr	r3, [pc, #8]	; (b5084 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b507c:	681b      	ldr	r3, [r3, #0]
   b507e:	695b      	ldr	r3, [r3, #20]
   b5080:	9301      	str	r3, [sp, #4]
   b5082:	bd08      	pop	{r3, pc}
   b5084:	00030218 	.word	0x00030218

000b5088 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5088:	b508      	push	{r3, lr}
   b508a:	4b02      	ldr	r3, [pc, #8]	; (b5094 <hal_rtc_time_is_valid+0xc>)
   b508c:	681b      	ldr	r3, [r3, #0]
   b508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5090:	9301      	str	r3, [sp, #4]
   b5092:	bd08      	pop	{r3, pc}
   b5094:	00030218 	.word	0x00030218

000b5098 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5098:	b508      	push	{r3, lr}
   b509a:	4b02      	ldr	r3, [pc, #8]	; (b50a4 <hal_rtc_get_time+0xc>)
   b509c:	681b      	ldr	r3, [r3, #0]
   b509e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b50a0:	9301      	str	r3, [sp, #4]
   b50a2:	bd08      	pop	{r3, pc}
   b50a4:	00030218 	.word	0x00030218

000b50a8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <os_mutex_create+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	00030248 	.word	0x00030248

000b50b8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <os_mutex_lock+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	00030248 	.word	0x00030248

000b50c8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <os_mutex_unlock+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	00030248 	.word	0x00030248

000b50d8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <os_mutex_recursive_create+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	00030248 	.word	0x00030248

000b50e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <inet_inet_ntop+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	695b      	ldr	r3, [r3, #20]
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	00030264 	.word	0x00030264

000b50f8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b02      	ldr	r3, [pc, #8]	; (b5104 <inet_htonl+0xc>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	6a1b      	ldr	r3, [r3, #32]
   b5100:	9301      	str	r3, [sp, #4]
   b5102:	bd08      	pop	{r3, pc}
   b5104:	00030264 	.word	0x00030264

000b5108 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <inet_htons+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	00030264 	.word	0x00030264

000b5118 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5118:	b508      	push	{r3, lr}
   b511a:	4b02      	ldr	r3, [pc, #8]	; (b5124 <hal_usart_write+0xc>)
   b511c:	681b      	ldr	r3, [r3, #0]
   b511e:	68db      	ldr	r3, [r3, #12]
   b5120:	9301      	str	r3, [sp, #4]
   b5122:	bd08      	pop	{r3, pc}
   b5124:	0003023c 	.word	0x0003023c

000b5128 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <hal_usart_available+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	691b      	ldr	r3, [r3, #16]
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	0003023c 	.word	0x0003023c

000b5138 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <hal_usart_read+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	695b      	ldr	r3, [r3, #20]
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	0003023c 	.word	0x0003023c

000b5148 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <hal_usart_peek+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	699b      	ldr	r3, [r3, #24]
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	0003023c 	.word	0x0003023c

000b5158 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <hal_usart_flush+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	69db      	ldr	r3, [r3, #28]
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	0003023c 	.word	0x0003023c

000b5168 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <hal_usart_is_enabled+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	6a1b      	ldr	r3, [r3, #32]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	0003023c 	.word	0x0003023c

000b5178 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <hal_usart_available_data_for_write+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	0003023c 	.word	0x0003023c

000b5188 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <hal_usart_init_ex+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	0003023c 	.word	0x0003023c

000b5198 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <hal_i2c_write+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	6a1b      	ldr	r3, [r3, #32]
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	00030228 	.word	0x00030228

000b51a8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <hal_i2c_available+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030228 	.word	0x00030228

000b51b8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <hal_i2c_read+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	00030228 	.word	0x00030228

000b51c8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <hal_i2c_peek+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	00030228 	.word	0x00030228

000b51d8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <hal_i2c_flush+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	00030228 	.word	0x00030228

000b51e8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <hal_i2c_is_enabled+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	00030228 	.word	0x00030228

000b51f8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <hal_i2c_init+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	00030228 	.word	0x00030228

000b5208 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <sock_setsockopt+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	699b      	ldr	r3, [r3, #24]
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	00030238 	.word	0x00030238

000b5218 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <sock_close+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	69db      	ldr	r3, [r3, #28]
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	00030238 	.word	0x00030238

000b5228 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <sock_connect+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	6a1b      	ldr	r3, [r3, #32]
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	00030238 	.word	0x00030238

000b5238 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <sock_recv+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	00030238 	.word	0x00030238

000b5248 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <sock_send+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	00030238 	.word	0x00030238

000b5258 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <sock_socket+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	00030238 	.word	0x00030238

000b5268 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <hal_spi_init+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	69db      	ldr	r3, [r3, #28]
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	00030230 	.word	0x00030230

000b5278 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <hal_spi_is_enabled+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	6a1b      	ldr	r3, [r3, #32]
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	00030230 	.word	0x00030230

000b5288 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <HAL_USB_USART_Init+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	681b      	ldr	r3, [r3, #0]
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	0003024c 	.word	0x0003024c

000b5298 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <HAL_USB_USART_Available_Data+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	691b      	ldr	r3, [r3, #16]
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	0003024c 	.word	0x0003024c

000b52a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	695b      	ldr	r3, [r3, #20]
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	0003024c 	.word	0x0003024c

000b52b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <HAL_USB_USART_Receive_Data+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	699b      	ldr	r3, [r3, #24]
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	0003024c 	.word	0x0003024c

000b52c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <HAL_USB_USART_Send_Data+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	69db      	ldr	r3, [r3, #28]
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	0003024c 	.word	0x0003024c

000b52d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <HAL_USB_USART_Flush_Data+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	6a1b      	ldr	r3, [r3, #32]
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	0003024c 	.word	0x0003024c

000b52e8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <log_message+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	00030260 	.word	0x00030260

000b52f8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <system_mode+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	681b      	ldr	r3, [r3, #0]
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	00030220 	.word	0x00030220

000b5308 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b02      	ldr	r3, [pc, #8]	; (b5314 <set_system_mode+0xc>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	685b      	ldr	r3, [r3, #4]
   b5310:	9301      	str	r3, [sp, #4]
   b5312:	bd08      	pop	{r3, pc}
   b5314:	00030220 	.word	0x00030220

000b5318 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5318:	b508      	push	{r3, lr}
   b531a:	4b02      	ldr	r3, [pc, #8]	; (b5324 <system_delay_ms+0xc>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	695b      	ldr	r3, [r3, #20]
   b5320:	9301      	str	r3, [sp, #4]
   b5322:	bd08      	pop	{r3, pc}
   b5324:	00030220 	.word	0x00030220

000b5328 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5328:	b508      	push	{r3, lr}
   b532a:	4b02      	ldr	r3, [pc, #8]	; (b5334 <application_thread_current+0xc>)
   b532c:	681b      	ldr	r3, [r3, #0]
   b532e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5330:	9301      	str	r3, [sp, #4]
   b5332:	bd08      	pop	{r3, pc}
   b5334:	00030220 	.word	0x00030220

000b5338 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5338:	b508      	push	{r3, lr}
   b533a:	4b02      	ldr	r3, [pc, #8]	; (b5344 <application_thread_invoke+0xc>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5340:	9301      	str	r3, [sp, #4]
   b5342:	bd08      	pop	{r3, pc}
   b5344:	00030220 	.word	0x00030220

000b5348 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5348:	b508      	push	{r3, lr}
   b534a:	4b02      	ldr	r3, [pc, #8]	; (b5354 <system_thread_get_state+0xc>)
   b534c:	681b      	ldr	r3, [r3, #0]
   b534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5350:	9301      	str	r3, [sp, #4]
   b5352:	bd08      	pop	{r3, pc}
   b5354:	00030220 	.word	0x00030220

000b5358 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5358:	b508      	push	{r3, lr}
   b535a:	4b03      	ldr	r3, [pc, #12]	; (b5368 <system_ctrl_set_app_request_handler+0x10>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5362:	9301      	str	r3, [sp, #4]
   b5364:	bd08      	pop	{r3, pc}
   b5366:	0000      	.short	0x0000
   b5368:	00030220 	.word	0x00030220

000b536c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b536c:	b508      	push	{r3, lr}
   b536e:	4b03      	ldr	r3, [pc, #12]	; (b537c <system_ctrl_set_result+0x10>)
   b5370:	681b      	ldr	r3, [r3, #0]
   b5372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5376:	9301      	str	r3, [sp, #4]
   b5378:	bd08      	pop	{r3, pc}
   b537a:	0000      	.short	0x0000
   b537c:	00030220 	.word	0x00030220

000b5380 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <network_connect+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	685b      	ldr	r3, [r3, #4]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	00030240 	.word	0x00030240

000b5390 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <network_connecting+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	689b      	ldr	r3, [r3, #8]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030240 	.word	0x00030240

000b53a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <network_disconnect+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	68db      	ldr	r3, [r3, #12]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030240 	.word	0x00030240

000b53b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <network_ready+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	691b      	ldr	r3, [r3, #16]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030240 	.word	0x00030240

000b53c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <network_on+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	695b      	ldr	r3, [r3, #20]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	00030240 	.word	0x00030240

000b53d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <network_off+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	699b      	ldr	r3, [r3, #24]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	00030240 	.word	0x00030240

000b53e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <network_listen+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	69db      	ldr	r3, [r3, #28]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030240 	.word	0x00030240

000b53f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <network_listening+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	6a1b      	ldr	r3, [r3, #32]
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030240 	.word	0x00030240

000b5400 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <network_set_listen_timeout+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030240 	.word	0x00030240

000b5410 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <network_get_listen_timeout+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030240 	.word	0x00030240

000b5420 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <network_is_on+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030240 	.word	0x00030240

000b5430 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <network_is_off+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030240 	.word	0x00030240

000b5440 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <spark_process+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	689b      	ldr	r3, [r3, #8]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	00030244 	.word	0x00030244

000b5450 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <spark_cloud_flag_connected+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	695b      	ldr	r3, [r3, #20]
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	00030244 	.word	0x00030244

000b5460 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <spark_send_event+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	6a1b      	ldr	r3, [r3, #32]
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030244 	.word	0x00030244

000b5470 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <spark_subscribe+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030244 	.word	0x00030244

000b5480 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <spark_sync_time_pending+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	00030244 	.word	0x00030244

000b5490 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	00030244 	.word	0x00030244

000b54a0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <malloc+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	681b      	ldr	r3, [r3, #0]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003021c 	.word	0x0003021c

000b54b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <free+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	685b      	ldr	r3, [r3, #4]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	0003021c 	.word	0x0003021c

000b54c0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <realloc+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	689b      	ldr	r3, [r3, #8]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	0003021c 	.word	0x0003021c

000b54d0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <sprintf+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	68db      	ldr	r3, [r3, #12]
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	0003021c 	.word	0x0003021c

000b54e0 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <sscanf+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	695b      	ldr	r3, [r3, #20]
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	0003021c 	.word	0x0003021c

000b54f0 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <vsnprintf+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	0003021c 	.word	0x0003021c

000b5500 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <abort+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	0003021c 	.word	0x0003021c

000b5510 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <_malloc_r+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	0003021c 	.word	0x0003021c

000b5520 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <__errno+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	0003021c 	.word	0x0003021c

000b5530 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <__assert_func+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	0003021c 	.word	0x0003021c

000b5540 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <newlib_impure_ptr_callback+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	0003021c 	.word	0x0003021c

000b5550 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <localtime_r+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	0003021c 	.word	0x0003021c

000b5560 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5560:	2200      	movs	r2, #0
   b5562:	6840      	ldr	r0, [r0, #4]
   b5564:	4611      	mov	r1, r2
   b5566:	f7ff bf43 	b.w	b53f0 <network_listening>

000b556a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b556a:	2200      	movs	r2, #0
   b556c:	6840      	ldr	r0, [r0, #4]
   b556e:	4611      	mov	r1, r2
   b5570:	f7ff bf4e 	b.w	b5410 <network_get_listen_timeout>

000b5574 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5574:	6840      	ldr	r0, [r0, #4]
   b5576:	2200      	movs	r2, #0
   b5578:	f7ff bf42 	b.w	b5400 <network_set_listen_timeout>

000b557c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b557c:	6840      	ldr	r0, [r0, #4]
   b557e:	2200      	movs	r2, #0
   b5580:	f081 0101 	eor.w	r1, r1, #1
   b5584:	f7ff bf2c 	b.w	b53e0 <network_listen>

000b5588 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5588:	2300      	movs	r3, #0
   b558a:	6840      	ldr	r0, [r0, #4]
   b558c:	461a      	mov	r2, r3
   b558e:	4619      	mov	r1, r3
   b5590:	f7ff bf1e 	b.w	b53d0 <network_off>

000b5594 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5594:	2300      	movs	r3, #0
   b5596:	6840      	ldr	r0, [r0, #4]
   b5598:	461a      	mov	r2, r3
   b559a:	4619      	mov	r1, r3
   b559c:	f7ff bf10 	b.w	b53c0 <network_on>

000b55a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b55a0:	2200      	movs	r2, #0
   b55a2:	6840      	ldr	r0, [r0, #4]
   b55a4:	4611      	mov	r1, r2
   b55a6:	f7ff bf03 	b.w	b53b0 <network_ready>

000b55aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b55aa:	2200      	movs	r2, #0
   b55ac:	6840      	ldr	r0, [r0, #4]
   b55ae:	4611      	mov	r1, r2
   b55b0:	f7ff beee 	b.w	b5390 <network_connecting>

000b55b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b55b4:	6840      	ldr	r0, [r0, #4]
   b55b6:	2200      	movs	r2, #0
   b55b8:	2102      	movs	r1, #2
   b55ba:	f7ff bef1 	b.w	b53a0 <network_disconnect>

000b55be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b55be:	2300      	movs	r3, #0
   b55c0:	6840      	ldr	r0, [r0, #4]
   b55c2:	461a      	mov	r2, r3
   b55c4:	f7ff bedc 	b.w	b5380 <network_connect>

000b55c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b55c8:	4b02      	ldr	r3, [pc, #8]	; (b55d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b55ca:	2203      	movs	r2, #3
   b55cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b55ce:	4a02      	ldr	r2, [pc, #8]	; (b55d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b55d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b55d2:	4770      	bx	lr
   b55d4:	2003e67c 	.word	0x2003e67c
   b55d8:	000b9da0 	.word	0x000b9da0

000b55dc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b55dc:	b510      	push	{r4, lr}
   b55de:	4604      	mov	r4, r0
   b55e0:	4608      	mov	r0, r1
{
    _spi = spi;
   b55e2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b55e4:	f7ff fe40 	bl	b5268 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b55e8:	2300      	movs	r3, #0
   b55ea:	6063      	str	r3, [r4, #4]
}
   b55ec:	4620      	mov	r0, r4
   b55ee:	bd10      	pop	{r4, pc}

000b55f0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b55f0:	4b05      	ldr	r3, [pc, #20]	; (b5608 <_GLOBAL__sub_I_System+0x18>)
   b55f2:	2202      	movs	r2, #2
   b55f4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b55f6:	4b05      	ldr	r3, [pc, #20]	; (b560c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b55f8:	4a05      	ldr	r2, [pc, #20]	; (b5610 <_GLOBAL__sub_I_System+0x20>)
   b55fa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b55fc:	2000      	movs	r0, #0
   b55fe:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5602:	f7ff be81 	b.w	b5308 <set_system_mode>
   b5606:	bf00      	nop
   b5608:	2003e690 	.word	0x2003e690
   b560c:	2003e684 	.word	0x2003e684
   b5610:	ffff0000 	.word	0xffff0000

000b5614 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b5614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b5618:	1e93      	subs	r3, r2, #2
{
   b561a:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b561c:	2b22      	cmp	r3, #34	; 0x22
   b561e:	f04f 0300 	mov.w	r3, #0
{
   b5622:	460d      	mov	r5, r1
   b5624:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b5626:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b562a:	d927      	bls.n	b567c <ltoa+0x68>

      if (10 == base && N < 0L)
   b562c:	2800      	cmp	r0, #0
   b562e:	da2a      	bge.n	b5686 <ltoa+0x72>
      {
            *head++ = '-';
   b5630:	462e      	mov	r6, r5
   b5632:	232d      	movs	r3, #45	; 0x2d
   b5634:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5638:	4240      	negs	r0, r0
   b563a:	240a      	movs	r4, #10
      *tail-- = '\0';
   b563c:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b5640:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b5644:	4622      	mov	r2, r4
   b5646:	4601      	mov	r1, r0
   b5648:	a801      	add	r0, sp, #4
   b564a:	f002 f9f0 	bl	b7a2e <ldiv>
   b564e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b5650:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b5652:	2b09      	cmp	r3, #9
   b5654:	bfcc      	ite	gt
   b5656:	2237      	movgt	r2, #55	; 0x37
   b5658:	2230      	movle	r2, #48	; 0x30
   b565a:	fa52 f383 	uxtab	r3, r2, r3
   b565e:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b5662:	f108 0801 	add.w	r8, r8, #1
   b5666:	2800      	cmp	r0, #0
   b5668:	d1ec      	bne.n	b5644 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b566a:	4642      	mov	r2, r8
   b566c:	1c79      	adds	r1, r7, #1
   b566e:	4630      	mov	r0, r6
   b5670:	f002 f9f1 	bl	b7a56 <memcpy>
      return str;
}
   b5674:	4628      	mov	r0, r5
   b5676:	b00c      	add	sp, #48	; 0x30
   b5678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b567c:	2a0a      	cmp	r2, #10
   b567e:	d0d5      	beq.n	b562c <ltoa+0x18>
      if (uarg)
   b5680:	b118      	cbz	r0, b568a <ltoa+0x76>
   b5682:	462e      	mov	r6, r5
   b5684:	e7da      	b.n	b563c <ltoa+0x28>
   b5686:	240a      	movs	r4, #10
   b5688:	e7fa      	b.n	b5680 <ltoa+0x6c>
      else  *tail-- = '0';
   b568a:	2330      	movs	r3, #48	; 0x30
   b568c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b5690:	462e      	mov	r6, r5
   b5692:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b5696:	f04f 0802 	mov.w	r8, #2
   b569a:	e7e6      	b.n	b566a <ltoa+0x56>

000b569c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b569c:	b510      	push	{r4, lr}
   b569e:	4604      	mov	r4, r0
{
	free(buffer);
   b56a0:	6800      	ldr	r0, [r0, #0]
   b56a2:	f7ff ff05 	bl	b54b0 <free>
}
   b56a6:	4620      	mov	r0, r4
   b56a8:	bd10      	pop	{r4, pc}

000b56aa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b56aa:	b510      	push	{r4, lr}
   b56ac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b56ae:	6800      	ldr	r0, [r0, #0]
   b56b0:	b108      	cbz	r0, b56b6 <_ZN6String10invalidateEv+0xc>
   b56b2:	f7ff fefd 	bl	b54b0 <free>
	buffer = NULL;
   b56b6:	2300      	movs	r3, #0
	capacity = len = 0;
   b56b8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b56bc:	6023      	str	r3, [r4, #0]
}
   b56be:	bd10      	pop	{r4, pc}

000b56c0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b56c0:	b538      	push	{r3, r4, r5, lr}
   b56c2:	4604      	mov	r4, r0
   b56c4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b56c6:	6800      	ldr	r0, [r0, #0]
   b56c8:	3101      	adds	r1, #1
   b56ca:	f7ff fef9 	bl	b54c0 <realloc>
	if (newbuffer) {
   b56ce:	b110      	cbz	r0, b56d6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b56d0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b56d4:	2001      	movs	r0, #1
	}
	return 0;
}
   b56d6:	bd38      	pop	{r3, r4, r5, pc}

000b56d8 <_ZN6String7reserveEj>:
{
   b56d8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b56da:	6803      	ldr	r3, [r0, #0]
{
   b56dc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b56de:	b123      	cbz	r3, b56ea <_ZN6String7reserveEj+0x12>
   b56e0:	6843      	ldr	r3, [r0, #4]
   b56e2:	428b      	cmp	r3, r1
   b56e4:	d301      	bcc.n	b56ea <_ZN6String7reserveEj+0x12>
   b56e6:	2001      	movs	r0, #1
}
   b56e8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b56ea:	4620      	mov	r0, r4
   b56ec:	f7ff ffe8 	bl	b56c0 <_ZN6String12changeBufferEj>
   b56f0:	2800      	cmp	r0, #0
   b56f2:	d0f9      	beq.n	b56e8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b56f4:	68a3      	ldr	r3, [r4, #8]
   b56f6:	2b00      	cmp	r3, #0
   b56f8:	d1f5      	bne.n	b56e6 <_ZN6String7reserveEj+0xe>
   b56fa:	6822      	ldr	r2, [r4, #0]
   b56fc:	7013      	strb	r3, [r2, #0]
   b56fe:	e7f2      	b.n	b56e6 <_ZN6String7reserveEj+0xe>

000b5700 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5700:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5702:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5704:	4611      	mov	r1, r2
   b5706:	9201      	str	r2, [sp, #4]
{
   b5708:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b570a:	f7ff ffe5 	bl	b56d8 <_ZN6String7reserveEj>
   b570e:	9a01      	ldr	r2, [sp, #4]
   b5710:	b928      	cbnz	r0, b571e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5712:	4620      	mov	r0, r4
   b5714:	f7ff ffc9 	bl	b56aa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5718:	4620      	mov	r0, r4
   b571a:	b003      	add	sp, #12
   b571c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b571e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5720:	4629      	mov	r1, r5
   b5722:	6820      	ldr	r0, [r4, #0]
   b5724:	f002 f997 	bl	b7a56 <memcpy>
	buffer[len] = 0;
   b5728:	6822      	ldr	r2, [r4, #0]
   b572a:	68a3      	ldr	r3, [r4, #8]
   b572c:	2100      	movs	r1, #0
   b572e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5730:	e7f2      	b.n	b5718 <_ZN6String4copyEPKcj+0x18>

000b5732 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5732:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5734:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5736:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b573a:	4604      	mov	r4, r0
	len = 0;
   b573c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b573e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5740:	b141      	cbz	r1, b5754 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5742:	4608      	mov	r0, r1
   b5744:	9101      	str	r1, [sp, #4]
   b5746:	f002 fa0a 	bl	b7b5e <strlen>
   b574a:	9901      	ldr	r1, [sp, #4]
   b574c:	4602      	mov	r2, r0
   b574e:	4620      	mov	r0, r4
   b5750:	f7ff ffd6 	bl	b5700 <_ZN6String4copyEPKcj>
}
   b5754:	4620      	mov	r0, r4
   b5756:	b002      	add	sp, #8
   b5758:	bd10      	pop	{r4, pc}

000b575a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b575a:	b513      	push	{r0, r1, r4, lr}
   b575c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b575e:	b159      	cbz	r1, b5778 <_ZN6StringaSEPKc+0x1e>
   b5760:	4608      	mov	r0, r1
   b5762:	9101      	str	r1, [sp, #4]
   b5764:	f002 f9fb 	bl	b7b5e <strlen>
   b5768:	9901      	ldr	r1, [sp, #4]
   b576a:	4602      	mov	r2, r0
   b576c:	4620      	mov	r0, r4
   b576e:	f7ff ffc7 	bl	b5700 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5772:	4620      	mov	r0, r4
   b5774:	b002      	add	sp, #8
   b5776:	bd10      	pop	{r4, pc}
	else invalidate();
   b5778:	f7ff ff97 	bl	b56aa <_ZN6String10invalidateEv>
   b577c:	e7f9      	b.n	b5772 <_ZN6StringaSEPKc+0x18>

000b577e <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b577e:	b510      	push	{r4, lr}
   b5780:	4604      	mov	r4, r0
   b5782:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5784:	2300      	movs	r3, #0
	capacity = 0;
   b5786:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b578a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b578c:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b578e:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b5790:	a901      	add	r1, sp, #4
   b5792:	f7ff ff3f 	bl	b5614 <ltoa>
	*this = buf;
   b5796:	a901      	add	r1, sp, #4
   b5798:	4620      	mov	r0, r4
   b579a:	f7ff ffde 	bl	b575a <_ZN6StringaSEPKc>
}
   b579e:	4620      	mov	r0, r4
   b57a0:	b00a      	add	sp, #40	; 0x28
   b57a2:	bd10      	pop	{r4, pc}

000b57a4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b57a4:	b570      	push	{r4, r5, r6, lr}
   b57a6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b57a8:	460e      	mov	r6, r1
   b57aa:	b909      	cbnz	r1, b57b0 <_ZN6String6concatEPKcj+0xc>
   b57ac:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b57ae:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b57b0:	b16a      	cbz	r2, b57ce <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b57b2:	6884      	ldr	r4, [r0, #8]
   b57b4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b57b6:	4621      	mov	r1, r4
   b57b8:	f7ff ff8e 	bl	b56d8 <_ZN6String7reserveEj>
   b57bc:	2800      	cmp	r0, #0
   b57be:	d0f5      	beq.n	b57ac <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b57c0:	6828      	ldr	r0, [r5, #0]
   b57c2:	68ab      	ldr	r3, [r5, #8]
   b57c4:	4631      	mov	r1, r6
   b57c6:	4418      	add	r0, r3
   b57c8:	f002 f9a3 	bl	b7b12 <strcpy>
	len = newlen;
   b57cc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b57ce:	2001      	movs	r0, #1
   b57d0:	e7ed      	b.n	b57ae <_ZN6String6concatEPKcj+0xa>

000b57d2 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b57d2:	688a      	ldr	r2, [r1, #8]
   b57d4:	6809      	ldr	r1, [r1, #0]
   b57d6:	f7ff bfe5 	b.w	b57a4 <_ZN6String6concatEPKcj>

000b57da <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b57da:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b57dc:	688a      	ldr	r2, [r1, #8]
   b57de:	6809      	ldr	r1, [r1, #0]
{
   b57e0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b57e2:	f7ff ffdf 	bl	b57a4 <_ZN6String6concatEPKcj>
   b57e6:	b910      	cbnz	r0, b57ee <_ZplRK15StringSumHelperRK6String+0x14>
   b57e8:	4620      	mov	r0, r4
   b57ea:	f7ff ff5e 	bl	b56aa <_ZN6String10invalidateEv>
	return a;
}
   b57ee:	4620      	mov	r0, r4
   b57f0:	bd10      	pop	{r4, pc}
	...

000b57f4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b57f4:	b40e      	push	{r1, r2, r3}
   b57f6:	b570      	push	{r4, r5, r6, lr}
   b57f8:	b087      	sub	sp, #28
   b57fa:	ad0b      	add	r5, sp, #44	; 0x2c
   b57fc:	4604      	mov	r4, r0
   b57fe:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5802:	9201      	str	r2, [sp, #4]
   b5804:	462b      	mov	r3, r5
   b5806:	2105      	movs	r1, #5
   b5808:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b580a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b580c:	f7ff fe70 	bl	b54f0 <vsnprintf>
    va_end(marker);

    String result;
   b5810:	490b      	ldr	r1, [pc, #44]	; (b5840 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b5812:	4606      	mov	r6, r0
    String result;
   b5814:	4620      	mov	r0, r4
   b5816:	f7ff ff8c 	bl	b5732 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b581a:	4631      	mov	r1, r6
   b581c:	4620      	mov	r0, r4
   b581e:	f7ff ff5b 	bl	b56d8 <_ZN6String7reserveEj>
    if (result.buffer) {
   b5822:	6820      	ldr	r0, [r4, #0]
   b5824:	b130      	cbz	r0, b5834 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b5826:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b5828:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b582a:	462b      	mov	r3, r5
   b582c:	1c71      	adds	r1, r6, #1
   b582e:	f7ff fe5f 	bl	b54f0 <vsnprintf>
        va_end(marker);
        result.len = n;
   b5832:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b5834:	4620      	mov	r0, r4
   b5836:	b007      	add	sp, #28
   b5838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b583c:	b003      	add	sp, #12
   b583e:	4770      	bx	lr
   b5840:	000b9c60 	.word	0x000b9c60

000b5844 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5844:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5846:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5848:	4604      	mov	r4, r0
      if (_M_manager)
   b584a:	b113      	cbz	r3, b5852 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b584c:	2203      	movs	r2, #3
   b584e:	4601      	mov	r1, r0
   b5850:	4798      	blx	r3
    }
   b5852:	4620      	mov	r0, r4
   b5854:	bd10      	pop	{r4, pc}

000b5856 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5856:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5858:	6843      	ldr	r3, [r0, #4]
   b585a:	3b01      	subs	r3, #1
    {
   b585c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b585e:	6043      	str	r3, [r0, #4]
   b5860:	b963      	cbnz	r3, b587c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5862:	6803      	ldr	r3, [r0, #0]
   b5864:	689b      	ldr	r3, [r3, #8]
   b5866:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5868:	68a3      	ldr	r3, [r4, #8]
   b586a:	3b01      	subs	r3, #1
   b586c:	60a3      	str	r3, [r4, #8]
   b586e:	b92b      	cbnz	r3, b587c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5870:	6823      	ldr	r3, [r4, #0]
   b5872:	4620      	mov	r0, r4
   b5874:	68db      	ldr	r3, [r3, #12]
    }
   b5876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b587a:	4718      	bx	r3
    }
   b587c:	bd10      	pop	{r4, pc}

000b587e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b587e:	b513      	push	{r0, r1, r4, lr}
   b5880:	460b      	mov	r3, r1
   b5882:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5884:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5888:	466c      	mov	r4, sp
   b588a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b588e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5892:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5896:	e894 0003 	ldmia.w	r4, {r0, r1}
   b589a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b589e:	b002      	add	sp, #8
   b58a0:	bd10      	pop	{r4, pc}
	...

000b58a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b58a4:	4802      	ldr	r0, [pc, #8]	; (b58b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b58a6:	2300      	movs	r3, #0
   b58a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b58aa:	f7ff bc15 	b.w	b50d8 <os_mutex_recursive_create>
   b58ae:	bf00      	nop
   b58b0:	2003e694 	.word	0x2003e694

000b58b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b58b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b58b6:	4606      	mov	r6, r0
   b58b8:	460d      	mov	r5, r1
  size_t n = 0;
   b58ba:	188f      	adds	r7, r1, r2
   b58bc:	2400      	movs	r4, #0
  while (size--) {
   b58be:	42bd      	cmp	r5, r7
   b58c0:	d00c      	beq.n	b58dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b58c2:	6833      	ldr	r3, [r6, #0]
   b58c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b58c8:	689b      	ldr	r3, [r3, #8]
   b58ca:	4630      	mov	r0, r6
   b58cc:	4798      	blx	r3
     if (chunk>=0)
   b58ce:	1e03      	subs	r3, r0, #0
   b58d0:	db01      	blt.n	b58d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b58d2:	441c      	add	r4, r3
  while (size--) {
   b58d4:	e7f3      	b.n	b58be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b58d6:	2c00      	cmp	r4, #0
   b58d8:	bf08      	it	eq
   b58da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b58dc:	4620      	mov	r0, r4
   b58de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b58e0:	b513      	push	{r0, r1, r4, lr}
   b58e2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b58e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b58e6:	b159      	cbz	r1, b5900 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b58e8:	9101      	str	r1, [sp, #4]
   b58ea:	f002 f938 	bl	b7b5e <strlen>
   b58ee:	6823      	ldr	r3, [r4, #0]
   b58f0:	9901      	ldr	r1, [sp, #4]
   b58f2:	68db      	ldr	r3, [r3, #12]
   b58f4:	4602      	mov	r2, r0
   b58f6:	4620      	mov	r0, r4
    }
   b58f8:	b002      	add	sp, #8
   b58fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b58fe:	4718      	bx	r3
    }
   b5900:	b002      	add	sp, #8
   b5902:	bd10      	pop	{r4, pc}

000b5904 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5904:	6803      	ldr	r3, [r0, #0]
   b5906:	689b      	ldr	r3, [r3, #8]
   b5908:	4718      	bx	r3

000b590a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b590a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b590c:	210d      	movs	r1, #13
{
   b590e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5910:	f7ff fff8 	bl	b5904 <_ZN5Print5printEc>
  n += print('\n');
   b5914:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5916:	4604      	mov	r4, r0
  n += print('\n');
   b5918:	4628      	mov	r0, r5
   b591a:	f7ff fff3 	bl	b5904 <_ZN5Print5printEc>
  return n;
}
   b591e:	4420      	add	r0, r4
   b5920:	bd38      	pop	{r3, r4, r5, pc}

000b5922 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5922:	b530      	push	{r4, r5, lr}
   b5924:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5926:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5928:	2a01      	cmp	r2, #1
  *str = '\0';
   b592a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b592e:	bf98      	it	ls
   b5930:	220a      	movls	r2, #10
   b5932:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5934:	460d      	mov	r5, r1
   b5936:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b593a:	fb01 5312 	mls	r3, r1, r2, r5
   b593e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5942:	2b09      	cmp	r3, #9
   b5944:	bf94      	ite	ls
   b5946:	3330      	addls	r3, #48	; 0x30
   b5948:	3337      	addhi	r3, #55	; 0x37
   b594a:	b2db      	uxtb	r3, r3
  } while(n);
   b594c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b594e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5952:	d9ef      	bls.n	b5934 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5954:	4621      	mov	r1, r4
   b5956:	f7ff ffc3 	bl	b58e0 <_ZN5Print5writeEPKc>
}
   b595a:	b00b      	add	sp, #44	; 0x2c
   b595c:	bd30      	pop	{r4, r5, pc}

000b595e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b595e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5962:	b086      	sub	sp, #24
   b5964:	af00      	add	r7, sp, #0
   b5966:	4605      	mov	r5, r0
   b5968:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b596a:	1d38      	adds	r0, r7, #4
   b596c:	2114      	movs	r1, #20
{
   b596e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5970:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5972:	f7ff fdbd 	bl	b54f0 <vsnprintf>

    if (n<bufsize)
   b5976:	2813      	cmp	r0, #19
   b5978:	d80e      	bhi.n	b5998 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b597a:	1d39      	adds	r1, r7, #4
   b597c:	4628      	mov	r0, r5
   b597e:	f7ff ffaf 	bl	b58e0 <_ZN5Print5writeEPKc>
   b5982:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5984:	b11e      	cbz	r6, b598e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5986:	4628      	mov	r0, r5
   b5988:	f7ff ffbf 	bl	b590a <_ZN5Print7printlnEv>
   b598c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b598e:	4620      	mov	r0, r4
   b5990:	3718      	adds	r7, #24
   b5992:	46bd      	mov	sp, r7
   b5994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5998:	f100 0308 	add.w	r3, r0, #8
   b599c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b59a0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b59a2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b59a6:	4622      	mov	r2, r4
   b59a8:	1c41      	adds	r1, r0, #1
   b59aa:	683b      	ldr	r3, [r7, #0]
   b59ac:	4668      	mov	r0, sp
   b59ae:	f7ff fd9f 	bl	b54f0 <vsnprintf>
  return write(str);
   b59b2:	4669      	mov	r1, sp
   b59b4:	4628      	mov	r0, r5
   b59b6:	f7ff ff93 	bl	b58e0 <_ZN5Print5writeEPKc>
   b59ba:	4604      	mov	r4, r0
   b59bc:	46c5      	mov	sp, r8
   b59be:	e7e1      	b.n	b5984 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b59c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b59c0:	4b01      	ldr	r3, [pc, #4]	; (b59c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b59c2:	4a02      	ldr	r2, [pc, #8]	; (b59cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b59c4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b59c6:	4770      	bx	lr
   b59c8:	2003e698 	.word	0x2003e698
   b59cc:	000b9ddc 	.word	0x000b9ddc

000b59d0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b59d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b59d4:	4a15      	ldr	r2, [pc, #84]	; (b5a2c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b59d6:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5a38 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b59da:	e9d2 6300 	ldrd	r6, r3, [r2]
   b59de:	1980      	adds	r0, r0, r6
   b59e0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b59e4:	4b12      	ldr	r3, [pc, #72]	; (b5a30 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b59e6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b59ea:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b59ee:	1986      	adds	r6, r0, r6
   b59f0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b59f4:	42bb      	cmp	r3, r7
   b59f6:	bf08      	it	eq
   b59f8:	42b2      	cmpeq	r2, r6
{
   b59fa:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b59fc:	d013      	beq.n	b5a26 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b59fe:	a903      	add	r1, sp, #12
   b5a00:	4668      	mov	r0, sp
   b5a02:	e9cd 6700 	strd	r6, r7, [sp]
   b5a06:	f7ff fda3 	bl	b5550 <localtime_r>
	calendar_time.tm_year += 1900;
   b5a0a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5a0c:	4d09      	ldr	r5, [pc, #36]	; (b5a34 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b5a0e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5a12:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b5a14:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b5a1e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5a22:	6823      	ldr	r3, [r4, #0]
   b5a24:	602b      	str	r3, [r5, #0]
    }
}
   b5a26:	b00c      	add	sp, #48	; 0x30
   b5a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5a2c:	2003e6d0 	.word	0x2003e6d0
   b5a30:	2003e6c8 	.word	0x2003e6c8
   b5a34:	2003e6a0 	.word	0x2003e6a0
   b5a38:	2003e6d8 	.word	0x2003e6d8

000b5a3c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5a3c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5a3e:	2000      	movs	r0, #0
   b5a40:	f7ff fd1e 	bl	b5480 <spark_sync_time_pending>
   b5a44:	b128      	cbz	r0, b5a52 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5a46:	f7ff fd03 	bl	b5450 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5a4a:	f080 0001 	eor.w	r0, r0, #1
   b5a4e:	b2c0      	uxtb	r0, r0
    }
   b5a50:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5a52:	2001      	movs	r0, #1
   b5a54:	e7fc      	b.n	b5a50 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5a58 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b5a58:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b5a5a:	f7ff ffb9 	bl	b59d0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b5a5e:	4b02      	ldr	r3, [pc, #8]	; (b5a68 <_ZN9TimeClass5monthEx+0x10>)
   b5a60:	6918      	ldr	r0, [r3, #16]
}
   b5a62:	3001      	adds	r0, #1
   b5a64:	bd08      	pop	{r3, pc}
   b5a66:	bf00      	nop
   b5a68:	2003e6a0 	.word	0x2003e6a0

000b5a6c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5a6c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5a6e:	2000      	movs	r0, #0
   b5a70:	f7ff fb0a 	bl	b5088 <hal_rtc_time_is_valid>
    if (rtcstate)
   b5a74:	4604      	mov	r4, r0
   b5a76:	b9a0      	cbnz	r0, b5aa2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5a78:	f7ff fc3e 	bl	b52f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5a7c:	2801      	cmp	r0, #1
   b5a7e:	d110      	bne.n	b5aa2 <_ZN9TimeClass7isValidEv+0x36>
   b5a80:	4620      	mov	r0, r4
   b5a82:	f7ff fc61 	bl	b5348 <system_thread_get_state>
   b5a86:	b960      	cbnz	r0, b5aa2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5a88:	f7ff ffd8 	bl	b5a3c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5a8c:	b910      	cbnz	r0, b5a94 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5a8e:	f7ff fcd7 	bl	b5440 <spark_process>
        while (_while() && !_condition()) {
   b5a92:	e7f9      	b.n	b5a88 <_ZN9TimeClass7isValidEv+0x1c>
   b5a94:	f7ff ffd2 	bl	b5a3c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5a9c:	2000      	movs	r0, #0
   b5a9e:	f7ff baf3 	b.w	b5088 <hal_rtc_time_is_valid>
}
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	bd10      	pop	{r4, pc}

000b5aa6 <_ZN9TimeClass3nowEv>:
{
   b5aa6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5aa8:	f7ff ffe0 	bl	b5a6c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5aac:	2210      	movs	r2, #16
   b5aae:	2100      	movs	r1, #0
   b5ab0:	4668      	mov	r0, sp
   b5ab2:	f001 ffde 	bl	b7a72 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5ab6:	2100      	movs	r1, #0
   b5ab8:	4668      	mov	r0, sp
   b5aba:	f7ff faed 	bl	b5098 <hal_rtc_get_time>
}
   b5abe:	9800      	ldr	r0, [sp, #0]
   b5ac0:	b005      	add	sp, #20
   b5ac2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5ac8 <_ZN9TimeClass4hourEv>:
{
   b5ac8:	b508      	push	{r3, lr}
	return hour(now());
   b5aca:	f7ff ffec 	bl	b5aa6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5ace:	17c1      	asrs	r1, r0, #31
   b5ad0:	f7ff ff7e 	bl	b59d0 <_ZL22Refresh_UnixTime_Cachex>
}
   b5ad4:	4b01      	ldr	r3, [pc, #4]	; (b5adc <_ZN9TimeClass4hourEv+0x14>)
   b5ad6:	6898      	ldr	r0, [r3, #8]
   b5ad8:	bd08      	pop	{r3, pc}
   b5ada:	bf00      	nop
   b5adc:	2003e6a0 	.word	0x2003e6a0

000b5ae0 <_ZN9TimeClass6minuteEv>:
{
   b5ae0:	b508      	push	{r3, lr}
	return minute(now());
   b5ae2:	f7ff ffe0 	bl	b5aa6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5ae6:	17c1      	asrs	r1, r0, #31
   b5ae8:	f7ff ff72 	bl	b59d0 <_ZL22Refresh_UnixTime_Cachex>
}
   b5aec:	4b01      	ldr	r3, [pc, #4]	; (b5af4 <_ZN9TimeClass6minuteEv+0x14>)
   b5aee:	6858      	ldr	r0, [r3, #4]
   b5af0:	bd08      	pop	{r3, pc}
   b5af2:	bf00      	nop
   b5af4:	2003e6a0 	.word	0x2003e6a0

000b5af8 <_ZN9TimeClass3dayEv>:
{
   b5af8:	b508      	push	{r3, lr}
	return day(now());
   b5afa:	f7ff ffd4 	bl	b5aa6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5afe:	17c1      	asrs	r1, r0, #31
   b5b00:	f7ff ff66 	bl	b59d0 <_ZL22Refresh_UnixTime_Cachex>
}
   b5b04:	4b01      	ldr	r3, [pc, #4]	; (b5b0c <_ZN9TimeClass3dayEv+0x14>)
   b5b06:	68d8      	ldr	r0, [r3, #12]
   b5b08:	bd08      	pop	{r3, pc}
   b5b0a:	bf00      	nop
   b5b0c:	2003e6a0 	.word	0x2003e6a0

000b5b10 <_ZN9TimeClass5monthEv>:
{
   b5b10:	b508      	push	{r3, lr}
	return month(now());
   b5b12:	f7ff ffc8 	bl	b5aa6 <_ZN9TimeClass3nowEv>
}
   b5b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b5b1a:	17c1      	asrs	r1, r0, #31
   b5b1c:	f7ff bf9c 	b.w	b5a58 <_ZN9TimeClass5monthEx>

000b5b20 <_ZN9TimeClass4yearEv>:
{
   b5b20:	b508      	push	{r3, lr}
	return year(now());
   b5b22:	f7ff ffc0 	bl	b5aa6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5b26:	17c1      	asrs	r1, r0, #31
   b5b28:	f7ff ff52 	bl	b59d0 <_ZL22Refresh_UnixTime_Cachex>
}
   b5b2c:	4b01      	ldr	r3, [pc, #4]	; (b5b34 <_ZN9TimeClass4yearEv+0x14>)
   b5b2e:	6958      	ldr	r0, [r3, #20]
   b5b30:	bd08      	pop	{r3, pc}
   b5b32:	bf00      	nop
   b5b34:	2003e6a0 	.word	0x2003e6a0

000b5b38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5b38:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5b3a:	681a      	ldr	r2, [r3, #0]
   b5b3c:	4b02      	ldr	r3, [pc, #8]	; (b5b48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5b3e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5b40:	4770      	bx	lr
   b5b42:	bf00      	nop
   b5b44:	2003cd10 	.word	0x2003cd10
   b5b48:	2003e69c 	.word	0x2003e69c

000b5b4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5b4c:	2100      	movs	r1, #0
   b5b4e:	f7ff bbe3 	b.w	b5318 <system_delay_ms>
	...

000b5b54 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5b54:	b510      	push	{r4, lr}
   b5b56:	4b04      	ldr	r3, [pc, #16]	; (b5b68 <_ZN9TCPClientD1Ev+0x14>)
   b5b58:	6003      	str	r3, [r0, #0]
   b5b5a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5b5c:	6980      	ldr	r0, [r0, #24]
   b5b5e:	b108      	cbz	r0, b5b64 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5b60:	f7ff fe79 	bl	b5856 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b5b64:	4620      	mov	r0, r4
   b5b66:	bd10      	pop	{r4, pc}
   b5b68:	000b9ef0 	.word	0x000b9ef0

000b5b6c <_ZN9TCPClientD0Ev>:
   b5b6c:	b510      	push	{r4, lr}
   b5b6e:	4604      	mov	r4, r0
   b5b70:	f7ff fff0 	bl	b5b54 <_ZN9TCPClientD1Ev>
   b5b74:	4620      	mov	r0, r4
   b5b76:	211c      	movs	r1, #28
   b5b78:	f7fe fa93 	bl	b40a2 <_ZdlPvj>
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	bd10      	pop	{r4, pc}

000b5b80 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5b80:	4b01      	ldr	r3, [pc, #4]	; (b5b88 <_GLOBAL__sub_I_RGB+0x8>)
   b5b82:	2200      	movs	r2, #0
   b5b84:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5b86:	4770      	bx	lr
   b5b88:	2003e6e0 	.word	0x2003e6e0

000b5b8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5b8c:	4b01      	ldr	r3, [pc, #4]	; (b5b94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5b8e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5b90:	4770      	bx	lr
   b5b92:	bf00      	nop
   b5b94:	2003cd14 	.word	0x2003cd14

000b5b98 <serialEventRun>:
{
   b5b98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5b9a:	4b0b      	ldr	r3, [pc, #44]	; (b5bc8 <serialEventRun+0x30>)
   b5b9c:	b143      	cbz	r3, b5bb0 <serialEventRun+0x18>
   b5b9e:	f000 fc11 	bl	b63c4 <_Z16_fetch_usbserialv>
   b5ba2:	6803      	ldr	r3, [r0, #0]
   b5ba4:	691b      	ldr	r3, [r3, #16]
   b5ba6:	4798      	blx	r3
   b5ba8:	2800      	cmp	r0, #0
   b5baa:	dd01      	ble.n	b5bb0 <serialEventRun+0x18>
        serialEvent();
   b5bac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5bb0:	4b06      	ldr	r3, [pc, #24]	; (b5bcc <serialEventRun+0x34>)
   b5bb2:	b143      	cbz	r3, b5bc6 <serialEventRun+0x2e>
   b5bb4:	f001 f922 	bl	b6dfc <_Z22__fetch_global_Serial1v>
   b5bb8:	6803      	ldr	r3, [r0, #0]
   b5bba:	691b      	ldr	r3, [r3, #16]
   b5bbc:	4798      	blx	r3
   b5bbe:	2800      	cmp	r0, #0
   b5bc0:	dd01      	ble.n	b5bc6 <serialEventRun+0x2e>
        serialEvent1();
   b5bc2:	f3af 8000 	nop.w
}
   b5bc6:	bd08      	pop	{r3, pc}
	...

000b5bd0 <_post_loop>:
{
   b5bd0:	b508      	push	{r3, lr}
	serialEventRun();
   b5bd2:	f7ff ffe1 	bl	b5b98 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5bd6:	f7ff fa4f 	bl	b5078 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5bda:	4b01      	ldr	r3, [pc, #4]	; (b5be0 <_post_loop+0x10>)
   b5bdc:	6018      	str	r0, [r3, #0]
}
   b5bde:	bd08      	pop	{r3, pc}
   b5be0:	2003e744 	.word	0x2003e744

000b5be4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5be4:	4805      	ldr	r0, [pc, #20]	; (b5bfc <_Z33system_initialize_user_backup_ramv+0x18>)
   b5be6:	4a06      	ldr	r2, [pc, #24]	; (b5c00 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5be8:	4906      	ldr	r1, [pc, #24]	; (b5c04 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5bea:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5bec:	1a12      	subs	r2, r2, r0
   b5bee:	f001 ff32 	bl	b7a56 <memcpy>
    __backup_sram_signature = signature;
   b5bf2:	4b05      	ldr	r3, [pc, #20]	; (b5c08 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5bf4:	4a05      	ldr	r2, [pc, #20]	; (b5c0c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5bf6:	601a      	str	r2, [r3, #0]
}
   b5bf8:	bd08      	pop	{r3, pc}
   b5bfa:	bf00      	nop
   b5bfc:	2003f400 	.word	0x2003f400
   b5c00:	2003f404 	.word	0x2003f404
   b5c04:	000ba594 	.word	0x000ba594
   b5c08:	2003f400 	.word	0x2003f400
   b5c0c:	9a271c1e 	.word	0x9a271c1e

000b5c10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5c10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c12:	2300      	movs	r3, #0
   b5c14:	9300      	str	r3, [sp, #0]
   b5c16:	461a      	mov	r2, r3
   b5c18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c1c:	f7ff fba6 	bl	b536c <system_ctrl_set_result>
}
   b5c20:	b003      	add	sp, #12
   b5c22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5c28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5c28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5c2a:	8843      	ldrh	r3, [r0, #2]
   b5c2c:	2b0a      	cmp	r3, #10
   b5c2e:	d008      	beq.n	b5c42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5c30:	2b50      	cmp	r3, #80	; 0x50
   b5c32:	d10b      	bne.n	b5c4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5c34:	4b09      	ldr	r3, [pc, #36]	; (b5c5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5c36:	681b      	ldr	r3, [r3, #0]
   b5c38:	b14b      	cbz	r3, b5c4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5c3a:	b003      	add	sp, #12
   b5c3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5c40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5c42:	f7ff ffe5 	bl	b5c10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5c46:	b003      	add	sp, #12
   b5c48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c4c:	2300      	movs	r3, #0
   b5c4e:	9300      	str	r3, [sp, #0]
   b5c50:	461a      	mov	r2, r3
   b5c52:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c56:	f7ff fb89 	bl	b536c <system_ctrl_set_result>
}
   b5c5a:	e7f4      	b.n	b5c46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5c5c:	2003e6f4 	.word	0x2003e6f4

000b5c60 <module_user_init_hook>:
{
   b5c60:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5c62:	4812      	ldr	r0, [pc, #72]	; (b5cac <module_user_init_hook+0x4c>)
   b5c64:	2100      	movs	r1, #0
   b5c66:	f7ff fc6b 	bl	b5540 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5c6a:	4b11      	ldr	r3, [pc, #68]	; (b5cb0 <module_user_init_hook+0x50>)
   b5c6c:	681a      	ldr	r2, [r3, #0]
   b5c6e:	4b11      	ldr	r3, [pc, #68]	; (b5cb4 <module_user_init_hook+0x54>)
   b5c70:	429a      	cmp	r2, r3
   b5c72:	4b11      	ldr	r3, [pc, #68]	; (b5cb8 <module_user_init_hook+0x58>)
   b5c74:	bf0c      	ite	eq
   b5c76:	2201      	moveq	r2, #1
   b5c78:	2200      	movne	r2, #0
   b5c7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5c7c:	d001      	beq.n	b5c82 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5c7e:	f7ff ffb1 	bl	b5be4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5c82:	f7ff f9f1 	bl	b5068 <HAL_RNG_GetRandomNumber>
   b5c86:	4604      	mov	r4, r0
    srand(seed);
   b5c88:	f001 fefc 	bl	b7a84 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5c8c:	4b0b      	ldr	r3, [pc, #44]	; (b5cbc <module_user_init_hook+0x5c>)
   b5c8e:	b113      	cbz	r3, b5c96 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5c90:	4620      	mov	r0, r4
   b5c92:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5c96:	2100      	movs	r1, #0
   b5c98:	4808      	ldr	r0, [pc, #32]	; (b5cbc <module_user_init_hook+0x5c>)
   b5c9a:	f7ff fbf9 	bl	b5490 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5ca2:	4807      	ldr	r0, [pc, #28]	; (b5cc0 <module_user_init_hook+0x60>)
   b5ca4:	2100      	movs	r1, #0
   b5ca6:	f7ff bb57 	b.w	b5358 <system_ctrl_set_app_request_handler>
   b5caa:	bf00      	nop
   b5cac:	000b5b8d 	.word	0x000b5b8d
   b5cb0:	2003f400 	.word	0x2003f400
   b5cb4:	9a271c1e 	.word	0x9a271c1e
   b5cb8:	2003e6f0 	.word	0x2003e6f0
   b5cbc:	00000000 	.word	0x00000000
   b5cc0:	000b5c29 	.word	0x000b5c29

000b5cc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5cc4:	4770      	bx	lr

000b5cc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5cc6:	2000      	movs	r0, #0
   b5cc8:	4770      	bx	lr

000b5cca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5cca:	b510      	push	{r4, lr}
   b5ccc:	2110      	movs	r1, #16
   b5cce:	4604      	mov	r4, r0
   b5cd0:	f7fe f9e7 	bl	b40a2 <_ZdlPvj>
   b5cd4:	4620      	mov	r0, r4
   b5cd6:	bd10      	pop	{r4, pc}

000b5cd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5cd8:	b508      	push	{r3, lr}
      { delete this; }
   b5cda:	f7ff fff6 	bl	b5cca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5cde:	bd08      	pop	{r3, pc}

000b5ce0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5ce0:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5ce2:	2200      	movs	r2, #0
   b5ce4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5ce8:	6002      	str	r2, [r0, #0]
   b5cea:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5cec:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5cee:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5cf0:	680c      	ldr	r4, [r1, #0]
   b5cf2:	8085      	strh	r5, [r0, #4]
   b5cf4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5cf6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5cf8:	bd30      	pop	{r4, r5, pc}

000b5cfa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5cfa:	b510      	push	{r4, lr}
   b5cfc:	4604      	mov	r4, r0
    free((void*)msg_);
   b5cfe:	6800      	ldr	r0, [r0, #0]
   b5d00:	f7ff fbd6 	bl	b54b0 <free>
}
   b5d04:	4620      	mov	r0, r4
   b5d06:	bd10      	pop	{r4, pc}

000b5d08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5d08:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5d0a:	68c4      	ldr	r4, [r0, #12]
   b5d0c:	b1f4      	cbz	r4, b5d4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5d0e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5d10:	2b02      	cmp	r3, #2
   b5d12:	d103      	bne.n	b5d1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5d14:	f104 000c 	add.w	r0, r4, #12
   b5d18:	f7ff ffef 	bl	b5cfa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5d1c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5d1e:	b135      	cbz	r5, b5d2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5d20:	4628      	mov	r0, r5
   b5d22:	f7ff fd8f 	bl	b5844 <_ZNSt14_Function_baseD1Ev>
   b5d26:	2110      	movs	r1, #16
   b5d28:	4628      	mov	r0, r5
   b5d2a:	f7fe f9ba 	bl	b40a2 <_ZdlPvj>
   b5d2e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5d30:	b135      	cbz	r5, b5d40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5d32:	4628      	mov	r0, r5
   b5d34:	f7ff fd86 	bl	b5844 <_ZNSt14_Function_baseD1Ev>
   b5d38:	2110      	movs	r1, #16
   b5d3a:	4628      	mov	r0, r5
   b5d3c:	f7fe f9b1 	bl	b40a2 <_ZdlPvj>
   b5d40:	4620      	mov	r0, r4
   b5d42:	2114      	movs	r1, #20
   b5d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5d48:	f7fe b9ab 	b.w	b40a2 <_ZdlPvj>
   b5d4c:	bd38      	pop	{r3, r4, r5, pc}

000b5d4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5d4e:	680b      	ldr	r3, [r1, #0]
   b5d50:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5d52:	684b      	ldr	r3, [r1, #4]
   b5d54:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5d56:	b113      	cbz	r3, b5d5e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5d58:	685a      	ldr	r2, [r3, #4]
   b5d5a:	3201      	adds	r2, #1
   b5d5c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5d5e:	4770      	bx	lr

000b5d60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d62:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5d64:	4668      	mov	r0, sp
   b5d66:	460d      	mov	r5, r1
   b5d68:	f7ff fff1 	bl	b5d4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5d6c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5d6e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5d70:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5d72:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5d74:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5d76:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5d78:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5d7a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5d7c:	f7fe fb6a 	bl	b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5d80:	b135      	cbz	r5, b5d90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5d82:	1d28      	adds	r0, r5, #4
   b5d84:	f7fe fb66 	bl	b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d88:	2108      	movs	r1, #8
   b5d8a:	4628      	mov	r0, r5
   b5d8c:	f7fe f989 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b5d90:	4620      	mov	r0, r4
   b5d92:	b003      	add	sp, #12
   b5d94:	bd30      	pop	{r4, r5, pc}

000b5d96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5d96:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5d98:	b510      	push	{r4, lr}
      if (_M_empty())
   b5d9a:	b90a      	cbnz	r2, b5da0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5d9c:	f001 f890 	bl	b6ec0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5da4:	68c3      	ldr	r3, [r0, #12]
   b5da6:	4718      	bx	r3

000b5da8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5da8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5daa:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5dac:	f100 0110 	add.w	r1, r0, #16
   b5db0:	f7ff fff1 	bl	b5d96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5db4:	bd08      	pop	{r3, pc}

000b5db6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5db6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5db8:	b510      	push	{r4, lr}
      if (_M_empty())
   b5dba:	b90a      	cbnz	r2, b5dc0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5dbc:	f001 f880 	bl	b6ec0 <_ZSt25__throw_bad_function_callv>
    }
   b5dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5dc4:	68c3      	ldr	r3, [r0, #12]
   b5dc6:	4718      	bx	r3

000b5dc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5dc8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5dca:	6800      	ldr	r0, [r0, #0]
   b5dcc:	f100 0110 	add.w	r1, r0, #16
   b5dd0:	f7ff fff1 	bl	b5db6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5dd4:	bd08      	pop	{r3, pc}
	...

000b5dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5dd8:	b538      	push	{r3, r4, r5, lr}
   b5dda:	2300      	movs	r3, #0
   b5ddc:	4604      	mov	r4, r0
   b5dde:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5de0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5de2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5de4:	f7fe f957 	bl	b4096 <_Znwj>
   b5de8:	b128      	cbz	r0, b5df6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5dea:	2301      	movs	r3, #1
   b5dec:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5df0:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5df2:	6003      	str	r3, [r0, #0]
   b5df4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5df6:	6020      	str	r0, [r4, #0]
	}
   b5df8:	4620      	mov	r0, r4
   b5dfa:	bd38      	pop	{r3, r4, r5, pc}
   b5dfc:	000b9e04 	.word	0x000b9e04

000b5e00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5e00:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5e02:	2300      	movs	r3, #0
   b5e04:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5e06:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5e08:	4604      	mov	r4, r0
   b5e0a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5e0c:	b12b      	cbz	r3, b5e1a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5e0e:	2202      	movs	r2, #2
   b5e10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5e12:	68eb      	ldr	r3, [r5, #12]
   b5e14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5e16:	68ab      	ldr	r3, [r5, #8]
   b5e18:	60a3      	str	r3, [r4, #8]
    }
   b5e1a:	4620      	mov	r0, r4
   b5e1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5e20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e22:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5e24:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5e26:	4668      	mov	r0, sp
   b5e28:	f7ff ff5a 	bl	b5ce0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5e2c:	f04f 0302 	mov.w	r3, #2
   b5e30:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5e34:	2a00      	cmp	r2, #0
   b5e36:	d103      	bne.n	b5e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5e38:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5e3c:	2900      	cmp	r1, #0
   b5e3e:	d1f7      	bne.n	b5e30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5e40:	d125      	bne.n	b5e8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5e42:	f104 050c 	add.w	r5, r4, #12
   b5e46:	4669      	mov	r1, sp
   b5e48:	4628      	mov	r0, r5
   b5e4a:	f7ff ff49 	bl	b5ce0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5e4e:	f3bf 8f5b 	dmb	ish
   b5e52:	2301      	movs	r3, #1
   b5e54:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5e56:	2000      	movs	r0, #0
   b5e58:	f104 0308 	add.w	r3, r4, #8
   b5e5c:	f3bf 8f5b 	dmb	ish
   b5e60:	e853 6f00 	ldrex	r6, [r3]
   b5e64:	e843 0200 	strex	r2, r0, [r3]
   b5e68:	2a00      	cmp	r2, #0
   b5e6a:	d1f9      	bne.n	b5e60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5e6c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5e70:	b16e      	cbz	r6, b5e8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5e72:	f7ff fa59 	bl	b5328 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5e76:	b178      	cbz	r0, b5e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5e78:	4629      	mov	r1, r5
   b5e7a:	4630      	mov	r0, r6
   b5e7c:	f7ff ff8b 	bl	b5d96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5e80:	4630      	mov	r0, r6
   b5e82:	f7ff fcdf 	bl	b5844 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5e86:	2110      	movs	r1, #16
   b5e88:	4630      	mov	r0, r6
   b5e8a:	f7fe f90a 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b5e8e:	4668      	mov	r0, sp
   b5e90:	f7ff ff33 	bl	b5cfa <_ZN8particle5ErrorD1Ev>
    }
   b5e94:	b009      	add	sp, #36	; 0x24
   b5e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5e98:	4631      	mov	r1, r6
   b5e9a:	a802      	add	r0, sp, #8
   b5e9c:	f7ff ffb0 	bl	b5e00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5ea0:	68e0      	ldr	r0, [r4, #12]
   b5ea2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5ea6:	b108      	cbz	r0, b5eac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5ea8:	f001 fe3c 	bl	b7b24 <strdup>
        type_(type) {
   b5eac:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5eae:	2010      	movs	r0, #16
   b5eb0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5eb4:	f7fe f8ef 	bl	b4096 <_Znwj>
   b5eb8:	4605      	mov	r5, r0
   b5eba:	b1e8      	cbz	r0, b5ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5ebc:	2700      	movs	r7, #0
   b5ebe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ec0:	2018      	movs	r0, #24
   b5ec2:	f7fe f8e8 	bl	b4096 <_Znwj>
   b5ec6:	4604      	mov	r4, r0
   b5ec8:	b188      	cbz	r0, b5eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5eca:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5ecc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5ece:	a802      	add	r0, sp, #8
   b5ed0:	f7ff fcd5 	bl	b587e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ed4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5ed6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ed8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5eda:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5edc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5ede:	a906      	add	r1, sp, #24
   b5ee0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ee2:	60e3      	str	r3, [r4, #12]
   b5ee4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5ee8:	9205      	str	r2, [sp, #20]
   b5eea:	f7ff fef9 	bl	b5ce0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5eee:	4b08      	ldr	r3, [pc, #32]	; (b5f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5ef0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5ef2:	4b08      	ldr	r3, [pc, #32]	; (b5f14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ef4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5ef6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5ef8:	a806      	add	r0, sp, #24
   b5efa:	f7ff fefe 	bl	b5cfa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5efe:	a802      	add	r0, sp, #8
   b5f00:	f7ff fca0 	bl	b5844 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5f04:	2200      	movs	r2, #0
   b5f06:	4629      	mov	r1, r5
   b5f08:	4803      	ldr	r0, [pc, #12]	; (b5f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5f0a:	f7ff fa15 	bl	b5338 <application_thread_invoke>
   b5f0e:	e7b7      	b.n	b5e80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5f10:	000b5da9 	.word	0x000b5da9
   b5f14:	000b602d 	.word	0x000b602d
   b5f18:	000b650d 	.word	0x000b650d

000b5f1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f20:	b08b      	sub	sp, #44	; 0x2c
   b5f22:	4605      	mov	r5, r0
   b5f24:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5f28:	460f      	mov	r7, r1
   b5f2a:	4690      	mov	r8, r2
   b5f2c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5f2e:	f7ff fa8f 	bl	b5450 <spark_cloud_flag_connected>
   b5f32:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5f34:	4683      	mov	fp, r0
   b5f36:	bb38      	cbnz	r0, b5f88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5f38:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5f3c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5f3e:	a905      	add	r1, sp, #20
   b5f40:	4630      	mov	r0, r6
   b5f42:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5f46:	f7ff fecb 	bl	b5ce0 <_ZN8particle5ErrorC1EOS0_>
   b5f4a:	2014      	movs	r0, #20
   b5f4c:	f7fe f8a3 	bl	b4096 <_Znwj>
   b5f50:	4604      	mov	r4, r0
   b5f52:	b148      	cbz	r0, b5f68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5f54:	2302      	movs	r3, #2
   b5f56:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5f58:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5f5a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5f5e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5f60:	4631      	mov	r1, r6
   b5f62:	300c      	adds	r0, #12
   b5f64:	f7ff febc 	bl	b5ce0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5f68:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5f6a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5f6c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5f70:	f7ff ff32 	bl	b5dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5f74:	4630      	mov	r0, r6
   b5f76:	f7ff fec0 	bl	b5cfa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5f7a:	a805      	add	r0, sp, #20
   b5f7c:	f7ff febd 	bl	b5cfa <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5f80:	4628      	mov	r0, r5
   b5f82:	b00b      	add	sp, #44	; 0x2c
   b5f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5f88:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5f8a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5f8c:	2014      	movs	r0, #20
   b5f8e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5f92:	9307      	str	r3, [sp, #28]
   b5f94:	f7fe f87f 	bl	b4096 <_Znwj>
   b5f98:	4601      	mov	r1, r0
   b5f9a:	b118      	cbz	r0, b5fa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5f9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5fa0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5fa2:	7044      	strb	r4, [r0, #1]
   b5fa4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5fa6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5fa8:	f7ff ff16 	bl	b5dd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5fac:	4b1e      	ldr	r3, [pc, #120]	; (b6028 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5fae:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5fb0:	2008      	movs	r0, #8
   b5fb2:	f7fe f870 	bl	b4096 <_Znwj>
   b5fb6:	4604      	mov	r4, r0
   b5fb8:	b110      	cbz	r0, b5fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5fba:	a903      	add	r1, sp, #12
   b5fbc:	f7ff fec7 	bl	b5d4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5fc0:	9600      	str	r6, [sp, #0]
   b5fc2:	fa5f f38a 	uxtb.w	r3, sl
   b5fc6:	464a      	mov	r2, r9
   b5fc8:	4641      	mov	r1, r8
   b5fca:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5fcc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5fce:	f7ff fa47 	bl	b5460 <spark_send_event>
   b5fd2:	b9b8      	cbnz	r0, b6004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5fd4:	9b03      	ldr	r3, [sp, #12]
   b5fd6:	785b      	ldrb	r3, [r3, #1]
   b5fd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5fdc:	b993      	cbnz	r3, b6004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5fde:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5fe2:	a905      	add	r1, sp, #20
   b5fe4:	a803      	add	r0, sp, #12
   b5fe6:	9205      	str	r2, [sp, #20]
   b5fe8:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5fec:	f7ff ff18 	bl	b5e20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5ff0:	a805      	add	r0, sp, #20
   b5ff2:	f7ff fe82 	bl	b5cfa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5ff6:	a805      	add	r0, sp, #20
   b5ff8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5ffa:	f7ff feb1 	bl	b5d60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5ffe:	a806      	add	r0, sp, #24
   b6000:	f7fe fa28 	bl	b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6004:	a903      	add	r1, sp, #12
   b6006:	a805      	add	r0, sp, #20
   b6008:	f7ff fea1 	bl	b5d4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b600c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b600e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6010:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6012:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6014:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6016:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6018:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b601a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b601c:	f7fe fa1a 	bl	b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6020:	a804      	add	r0, sp, #16
   b6022:	f7fe fa17 	bl	b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6026:	e7ab      	b.n	b5f80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6028:	000b60a9 	.word	0x000b60a9

000b602c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b602c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6030:	4605      	mov	r5, r0
	switch (__op)
   b6032:	d103      	bne.n	b603c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6034:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6036:	6003      	str	r3, [r0, #0]
      }
   b6038:	2000      	movs	r0, #0
   b603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b603c:	2a02      	cmp	r2, #2
   b603e:	d010      	beq.n	b6062 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6040:	2a03      	cmp	r2, #3
   b6042:	d1f9      	bne.n	b6038 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6044:	6804      	ldr	r4, [r0, #0]
   b6046:	2c00      	cmp	r4, #0
   b6048:	d0f6      	beq.n	b6038 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b604a:	f104 0010 	add.w	r0, r4, #16
   b604e:	f7ff fe54 	bl	b5cfa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6052:	4620      	mov	r0, r4
   b6054:	f7ff fbf6 	bl	b5844 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6058:	2118      	movs	r1, #24
   b605a:	4620      	mov	r0, r4
   b605c:	f7fe f821 	bl	b40a2 <_ZdlPvj>
   b6060:	e7ea      	b.n	b6038 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6062:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6064:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6066:	f7fe f816 	bl	b4096 <_Znwj>
   b606a:	4604      	mov	r4, r0
   b606c:	b150      	cbz	r0, b6084 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b606e:	4631      	mov	r1, r6
   b6070:	f7ff fec6 	bl	b5e00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6074:	6930      	ldr	r0, [r6, #16]
   b6076:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b607a:	b108      	cbz	r0, b6080 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b607c:	f001 fd52 	bl	b7b24 <strdup>
        type_(type) {
   b6080:	6120      	str	r0, [r4, #16]
   b6082:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6084:	602c      	str	r4, [r5, #0]
	}
   b6086:	e7d7      	b.n	b6038 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6088 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6088:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b608a:	2300      	movs	r3, #0
   b608c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b608e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6090:	4604      	mov	r4, r0
   b6092:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6094:	b12b      	cbz	r3, b60a2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6096:	2202      	movs	r2, #2
   b6098:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b609a:	68eb      	ldr	r3, [r5, #12]
   b609c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b609e:	68ab      	ldr	r3, [r5, #8]
   b60a0:	60a3      	str	r3, [r4, #8]
    }
   b60a2:	4620      	mov	r0, r4
   b60a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b60a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b60a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b60aa:	b089      	sub	sp, #36	; 0x24
   b60ac:	4604      	mov	r4, r0
   b60ae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b60b0:	a801      	add	r0, sp, #4
   b60b2:	4611      	mov	r1, r2
   b60b4:	f7ff fe54 	bl	b5d60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b60b8:	b1a4      	cbz	r4, b60e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b60ba:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b60bc:	b11d      	cbz	r5, b60c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b60be:	4628      	mov	r0, r5
   b60c0:	f001 fd30 	bl	b7b24 <strdup>
   b60c4:	4605      	mov	r5, r0
   b60c6:	a801      	add	r0, sp, #4
   b60c8:	a903      	add	r1, sp, #12
        type_(type) {
   b60ca:	9503      	str	r5, [sp, #12]
   b60cc:	f8ad 4010 	strh.w	r4, [sp, #16]
   b60d0:	f7ff fea6 	bl	b5e20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b60d4:	a803      	add	r0, sp, #12
   b60d6:	f7ff fe10 	bl	b5cfa <_ZN8particle5ErrorD1Ev>
   b60da:	a802      	add	r0, sp, #8
   b60dc:	f7fe f9ba 	bl	b4454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b60e0:	b009      	add	sp, #36	; 0x24
   b60e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b60e4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b60e6:	2301      	movs	r3, #1
   b60e8:	e8d5 2f4f 	ldrexb	r2, [r5]
   b60ec:	2a00      	cmp	r2, #0
   b60ee:	d103      	bne.n	b60f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b60f0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b60f4:	2900      	cmp	r1, #0
   b60f6:	d1f7      	bne.n	b60e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b60f8:	d1ef      	bne.n	b60da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b60fa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b60fc:	f3bf 8f5b 	dmb	ish
   b6100:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6102:	1d2b      	adds	r3, r5, #4
   b6104:	f3bf 8f5b 	dmb	ish
   b6108:	e853 6f00 	ldrex	r6, [r3]
   b610c:	e843 4200 	strex	r2, r4, [r3]
   b6110:	2a00      	cmp	r2, #0
   b6112:	d1f9      	bne.n	b6108 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6114:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6118:	2e00      	cmp	r6, #0
   b611a:	d0de      	beq.n	b60da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b611c:	4620      	mov	r0, r4
   b611e:	f7ff f903 	bl	b5328 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6122:	4607      	mov	r7, r0
   b6124:	b160      	cbz	r0, b6140 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6126:	f105 010c 	add.w	r1, r5, #12
   b612a:	4630      	mov	r0, r6
   b612c:	f7ff fe43 	bl	b5db6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6130:	4630      	mov	r0, r6
   b6132:	f7ff fb87 	bl	b5844 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6136:	2110      	movs	r1, #16
   b6138:	4630      	mov	r0, r6
   b613a:	f7fd ffb2 	bl	b40a2 <_ZdlPvj>
   b613e:	e7cc      	b.n	b60da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6140:	4631      	mov	r1, r6
   b6142:	a803      	add	r0, sp, #12
   b6144:	f7ff ffa0 	bl	b6088 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6148:	7b2b      	ldrb	r3, [r5, #12]
   b614a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b614e:	2010      	movs	r0, #16
   b6150:	f7fd ffa1 	bl	b4096 <_Znwj>
   b6154:	4605      	mov	r5, r0
   b6156:	b1d0      	cbz	r0, b618e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6158:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b615a:	2014      	movs	r0, #20
   b615c:	f7fd ff9b 	bl	b4096 <_Znwj>
   b6160:	4604      	mov	r4, r0
   b6162:	b178      	cbz	r0, b6184 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6164:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6166:	4601      	mov	r1, r0
   b6168:	a803      	add	r0, sp, #12
   b616a:	f7ff fb88 	bl	b587e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b616e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6170:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6172:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6174:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6176:	9205      	str	r2, [sp, #20]
   b6178:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b617a:	60e3      	str	r3, [r4, #12]
   b617c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6180:	9206      	str	r2, [sp, #24]
   b6182:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6184:	4b06      	ldr	r3, [pc, #24]	; (b61a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6186:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6188:	4b06      	ldr	r3, [pc, #24]	; (b61a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b618a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b618c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b618e:	a803      	add	r0, sp, #12
   b6190:	f7ff fb58 	bl	b5844 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6194:	2200      	movs	r2, #0
   b6196:	4629      	mov	r1, r5
   b6198:	4803      	ldr	r0, [pc, #12]	; (b61a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b619a:	f7ff f8cd 	bl	b5338 <application_thread_invoke>
   b619e:	e7c7      	b.n	b6130 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b61a0:	000b5dc9 	.word	0x000b5dc9
   b61a4:	000b61ad 	.word	0x000b61ad
   b61a8:	000b650d 	.word	0x000b650d

000b61ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b61ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b61ae:	b570      	push	{r4, r5, r6, lr}
   b61b0:	4604      	mov	r4, r0
	switch (__op)
   b61b2:	d103      	bne.n	b61bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b61b4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b61b6:	6003      	str	r3, [r0, #0]
      }
   b61b8:	2000      	movs	r0, #0
   b61ba:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b61bc:	2a02      	cmp	r2, #2
   b61be:	d00c      	beq.n	b61da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b61c0:	2a03      	cmp	r2, #3
   b61c2:	d1f9      	bne.n	b61b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b61c4:	6804      	ldr	r4, [r0, #0]
   b61c6:	2c00      	cmp	r4, #0
   b61c8:	d0f6      	beq.n	b61b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b61ca:	4620      	mov	r0, r4
   b61cc:	f7ff fb3a 	bl	b5844 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b61d0:	2114      	movs	r1, #20
   b61d2:	4620      	mov	r0, r4
   b61d4:	f7fd ff65 	bl	b40a2 <_ZdlPvj>
   b61d8:	e7ee      	b.n	b61b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b61da:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b61dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b61de:	f7fd ff5a 	bl	b4096 <_Znwj>
   b61e2:	4605      	mov	r5, r0
   b61e4:	b120      	cbz	r0, b61f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b61e6:	4631      	mov	r1, r6
   b61e8:	f7ff ff4e 	bl	b6088 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b61ec:	7c33      	ldrb	r3, [r6, #16]
   b61ee:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b61f0:	6025      	str	r5, [r4, #0]
	}
   b61f2:	e7e1      	b.n	b61b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b61f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b61f4:	4770      	bx	lr

000b61f6 <_ZN9IPAddressD0Ev>:
   b61f6:	b510      	push	{r4, lr}
   b61f8:	2118      	movs	r1, #24
   b61fa:	4604      	mov	r4, r0
   b61fc:	f7fd ff51 	bl	b40a2 <_ZdlPvj>
   b6200:	4620      	mov	r0, r4
   b6202:	bd10      	pop	{r4, pc}

000b6204 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6204:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6206:	7d03      	ldrb	r3, [r0, #20]
   b6208:	2b06      	cmp	r3, #6
{
   b620a:	b08d      	sub	sp, #52	; 0x34
   b620c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b620e:	f100 0704 	add.w	r7, r0, #4
   b6212:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6216:	d012      	beq.n	b623e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6218:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b621c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6220:	220a      	movs	r2, #10
   b6222:	4630      	mov	r0, r6
   b6224:	f7ff fb7d 	bl	b5922 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6228:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b622a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b622c:	d019      	beq.n	b6262 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b622e:	2c00      	cmp	r4, #0
   b6230:	d0f4      	beq.n	b621c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6232:	212e      	movs	r1, #46	; 0x2e
   b6234:	4630      	mov	r0, r6
   b6236:	f7ff fb65 	bl	b5904 <_ZN5Print5printEc>
   b623a:	4404      	add	r4, r0
   b623c:	e7ee      	b.n	b621c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b623e:	232f      	movs	r3, #47	; 0x2f
   b6240:	466a      	mov	r2, sp
   b6242:	4639      	mov	r1, r7
   b6244:	200a      	movs	r0, #10
		buf[0] = 0;
   b6246:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b624a:	f7fe ff4d 	bl	b50e8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b624e:	4668      	mov	r0, sp
   b6250:	f001 fc85 	bl	b7b5e <strlen>
   b6254:	6833      	ldr	r3, [r6, #0]
   b6256:	4602      	mov	r2, r0
   b6258:	68db      	ldr	r3, [r3, #12]
   b625a:	4669      	mov	r1, sp
   b625c:	4630      	mov	r0, r6
   b625e:	4798      	blx	r3
   b6260:	4604      	mov	r4, r0
    }
    return n;
}
   b6262:	4620      	mov	r0, r4
   b6264:	b00d      	add	sp, #52	; 0x34
   b6266:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6268 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6268:	b510      	push	{r4, lr}
   b626a:	4b05      	ldr	r3, [pc, #20]	; (b6280 <_ZN9IPAddressC1Ev+0x18>)
   b626c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b626e:	2211      	movs	r2, #17
   b6270:	f840 3b04 	str.w	r3, [r0], #4
   b6274:	2100      	movs	r1, #0
   b6276:	f001 fbfc 	bl	b7a72 <memset>
}
   b627a:	4620      	mov	r0, r4
   b627c:	bd10      	pop	{r4, pc}
   b627e:	bf00      	nop
   b6280:	000b9e20 	.word	0x000b9e20

000b6284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6284:	4603      	mov	r3, r0
   b6286:	4a07      	ldr	r2, [pc, #28]	; (b62a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6288:	b510      	push	{r4, lr}
   b628a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b628e:	f101 0210 	add.w	r2, r1, #16
   b6292:	f851 4b04 	ldr.w	r4, [r1], #4
   b6296:	f843 4b04 	str.w	r4, [r3], #4
   b629a:	4291      	cmp	r1, r2
   b629c:	d1f9      	bne.n	b6292 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b629e:	780a      	ldrb	r2, [r1, #0]
   b62a0:	701a      	strb	r2, [r3, #0]
}
   b62a2:	bd10      	pop	{r4, pc}
   b62a4:	000b9e20 	.word	0x000b9e20

000b62a8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b62a8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b62aa:	2b04      	cmp	r3, #4
   b62ac:	d104      	bne.n	b62b8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b62ae:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b62b0:	3800      	subs	r0, #0
   b62b2:	bf18      	it	ne
   b62b4:	2001      	movne	r0, #1
   b62b6:	4770      	bx	lr
    } else if (version() == 6) {
   b62b8:	2b06      	cmp	r3, #6
   b62ba:	d107      	bne.n	b62cc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b62bc:	6843      	ldr	r3, [r0, #4]
   b62be:	b93b      	cbnz	r3, b62d0 <_ZNK9IPAddresscvbEv+0x28>
   b62c0:	6883      	ldr	r3, [r0, #8]
   b62c2:	b92b      	cbnz	r3, b62d0 <_ZNK9IPAddresscvbEv+0x28>
   b62c4:	68c3      	ldr	r3, [r0, #12]
   b62c6:	b91b      	cbnz	r3, b62d0 <_ZNK9IPAddresscvbEv+0x28>
   b62c8:	6900      	ldr	r0, [r0, #16]
   b62ca:	e7f1      	b.n	b62b0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b62cc:	2000      	movs	r0, #0
   b62ce:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b62d0:	2001      	movs	r0, #1
}
   b62d2:	4770      	bx	lr

000b62d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b62d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b62d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b62da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b62de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b62e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b62e6:	2304      	movs	r3, #4
   b62e8:	6041      	str	r1, [r0, #4]
   b62ea:	7503      	strb	r3, [r0, #20]
}
   b62ec:	bd10      	pop	{r4, pc}
	...

000b62f0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b62f0:	b507      	push	{r0, r1, r2, lr}
   b62f2:	4b06      	ldr	r3, [pc, #24]	; (b630c <_ZN9IPAddressC1EPKh+0x1c>)
   b62f4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b62f6:	78cb      	ldrb	r3, [r1, #3]
   b62f8:	9300      	str	r3, [sp, #0]
   b62fa:	788b      	ldrb	r3, [r1, #2]
   b62fc:	784a      	ldrb	r2, [r1, #1]
   b62fe:	7809      	ldrb	r1, [r1, #0]
   b6300:	f7ff ffe8 	bl	b62d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6304:	b003      	add	sp, #12
   b6306:	f85d fb04 	ldr.w	pc, [sp], #4
   b630a:	bf00      	nop
   b630c:	000b9e20 	.word	0x000b9e20

000b6310 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6310:	7441      	strb	r1, [r0, #17]
}
   b6312:	4770      	bx	lr

000b6314 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6314:	4770      	bx	lr

000b6316 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6316:	4770      	bx	lr

000b6318 <_ZN9USBSerial4readEv>:
{
   b6318:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b631a:	2100      	movs	r1, #0
   b631c:	7c00      	ldrb	r0, [r0, #16]
   b631e:	f7fe ffcb 	bl	b52b8 <HAL_USB_USART_Receive_Data>
}
   b6322:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6326:	bd08      	pop	{r3, pc}

000b6328 <_ZN9USBSerial4peekEv>:
{
   b6328:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b632a:	2101      	movs	r1, #1
   b632c:	7c00      	ldrb	r0, [r0, #16]
   b632e:	f7fe ffc3 	bl	b52b8 <HAL_USB_USART_Receive_Data>
}
   b6332:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6336:	bd08      	pop	{r3, pc}

000b6338 <_ZN9USBSerial17availableForWriteEv>:
{
   b6338:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b633a:	7c00      	ldrb	r0, [r0, #16]
   b633c:	f7fe ffb4 	bl	b52a8 <HAL_USB_USART_Available_Data_For_Write>
}
   b6340:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6344:	bd08      	pop	{r3, pc}

000b6346 <_ZN9USBSerial9availableEv>:
{
   b6346:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6348:	7c00      	ldrb	r0, [r0, #16]
   b634a:	f7fe ffa5 	bl	b5298 <HAL_USB_USART_Available_Data>
}
   b634e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6352:	bd08      	pop	{r3, pc}

000b6354 <_ZN9USBSerial5writeEh>:
{
   b6354:	b513      	push	{r0, r1, r4, lr}
   b6356:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6358:	7c00      	ldrb	r0, [r0, #16]
{
   b635a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b635c:	f7fe ffa4 	bl	b52a8 <HAL_USB_USART_Available_Data_For_Write>
   b6360:	2800      	cmp	r0, #0
   b6362:	9901      	ldr	r1, [sp, #4]
   b6364:	dc01      	bgt.n	b636a <_ZN9USBSerial5writeEh+0x16>
   b6366:	7c60      	ldrb	r0, [r4, #17]
   b6368:	b120      	cbz	r0, b6374 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b636a:	7c20      	ldrb	r0, [r4, #16]
   b636c:	f7fe ffac 	bl	b52c8 <HAL_USB_USART_Send_Data>
   b6370:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6374:	b002      	add	sp, #8
   b6376:	bd10      	pop	{r4, pc}

000b6378 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6378:	7c00      	ldrb	r0, [r0, #16]
   b637a:	f7fe bfad 	b.w	b52d8 <HAL_USB_USART_Flush_Data>

000b637e <_ZN9USBSerialD0Ev>:
   b637e:	b510      	push	{r4, lr}
   b6380:	2114      	movs	r1, #20
   b6382:	4604      	mov	r4, r0
   b6384:	f7fd fe8d 	bl	b40a2 <_ZdlPvj>
   b6388:	4620      	mov	r0, r4
   b638a:	bd10      	pop	{r4, pc}

000b638c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b638c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b638e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6392:	4604      	mov	r4, r0
   b6394:	4608      	mov	r0, r1
   b6396:	2100      	movs	r1, #0
   b6398:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b639c:	4b04      	ldr	r3, [pc, #16]	; (b63b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b639e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b63a0:	2301      	movs	r3, #1
  _serial = serial;
   b63a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b63a4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b63a6:	4611      	mov	r1, r2
   b63a8:	f7fe ff6e 	bl	b5288 <HAL_USB_USART_Init>
}
   b63ac:	4620      	mov	r0, r4
   b63ae:	bd10      	pop	{r4, pc}
   b63b0:	000b9e34 	.word	0x000b9e34

000b63b4 <_Z19acquireSerialBufferv>:
{
   b63b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b63b6:	2214      	movs	r2, #20
{
   b63b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b63ba:	2100      	movs	r1, #0
   b63bc:	f001 fb59 	bl	b7a72 <memset>
}
   b63c0:	4620      	mov	r0, r4
   b63c2:	bd10      	pop	{r4, pc}

000b63c4 <_Z16_fetch_usbserialv>:
{
   b63c4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63c6:	4c0f      	ldr	r4, [pc, #60]	; (b6404 <_Z16_fetch_usbserialv+0x40>)
{
   b63c8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b63ca:	a803      	add	r0, sp, #12
   b63cc:	f7ff fff2 	bl	b63b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63d0:	7821      	ldrb	r1, [r4, #0]
   b63d2:	f3bf 8f5b 	dmb	ish
   b63d6:	f011 0101 	ands.w	r1, r1, #1
   b63da:	d10f      	bne.n	b63fc <_Z16_fetch_usbserialv+0x38>
   b63dc:	4620      	mov	r0, r4
   b63de:	9101      	str	r1, [sp, #4]
   b63e0:	f7fd fe61 	bl	b40a6 <__cxa_guard_acquire>
   b63e4:	9901      	ldr	r1, [sp, #4]
   b63e6:	b148      	cbz	r0, b63fc <_Z16_fetch_usbserialv+0x38>
   b63e8:	aa03      	add	r2, sp, #12
   b63ea:	4807      	ldr	r0, [pc, #28]	; (b6408 <_Z16_fetch_usbserialv+0x44>)
   b63ec:	f7ff ffce 	bl	b638c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b63f0:	4620      	mov	r0, r4
   b63f2:	f7fd fe5d 	bl	b40b0 <__cxa_guard_release>
   b63f6:	4805      	ldr	r0, [pc, #20]	; (b640c <_Z16_fetch_usbserialv+0x48>)
   b63f8:	f001 fb0c 	bl	b7a14 <atexit>
	return _usbserial;
}
   b63fc:	4802      	ldr	r0, [pc, #8]	; (b6408 <_Z16_fetch_usbserialv+0x44>)
   b63fe:	b008      	add	sp, #32
   b6400:	bd10      	pop	{r4, pc}
   b6402:	bf00      	nop
   b6404:	2003e6f8 	.word	0x2003e6f8
   b6408:	2003e6fc 	.word	0x2003e6fc
   b640c:	000b6315 	.word	0x000b6315

000b6410 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b6410:	4700      	bx	r0
	...

000b6414 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b6414:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b6418:	2400      	movs	r4, #0
{
   b641a:	461d      	mov	r5, r3
   b641c:	460f      	mov	r7, r1
   b641e:	4690      	mov	r8, r2
   b6420:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b6422:	f7fe fe11 	bl	b5048 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b6426:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6428:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b642c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6430:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b6434:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b6438:	bfa2      	ittt	ge
   b643a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b643e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b6442:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6444:	4907      	ldr	r1, [pc, #28]	; (b6464 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b6446:	9400      	str	r4, [sp, #0]
   b6448:	4643      	mov	r3, r8
   b644a:	463a      	mov	r2, r7
   b644c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b644e:	bfa8      	it	ge
   b6450:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6454:	f7fe fdf0 	bl	b5038 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b6458:	fab0 f080 	clz	r0, r0
   b645c:	0940      	lsrs	r0, r0, #5
   b645e:	b004      	add	sp, #16
   b6460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6464:	000b6411 	.word	0x000b6411

000b6468 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6468:	4770      	bx	lr

000b646a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b646a:	7441      	strb	r1, [r0, #17]
}
   b646c:	4770      	bx	lr

000b646e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b646e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6470:	7c00      	ldrb	r0, [r0, #16]
   b6472:	f7fe fe81 	bl	b5178 <hal_usart_available_data_for_write>
}
   b6476:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b647a:	bd08      	pop	{r3, pc}

000b647c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b647c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b647e:	7c00      	ldrb	r0, [r0, #16]
   b6480:	f7fe fe52 	bl	b5128 <hal_usart_available>
}
   b6484:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6488:	bd08      	pop	{r3, pc}

000b648a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b648a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b648c:	7c00      	ldrb	r0, [r0, #16]
   b648e:	f7fe fe5b 	bl	b5148 <hal_usart_peek>
}
   b6492:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6496:	bd08      	pop	{r3, pc}

000b6498 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6498:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b649a:	7c00      	ldrb	r0, [r0, #16]
   b649c:	f7fe fe4c 	bl	b5138 <hal_usart_read>
}
   b64a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b64a4:	bd08      	pop	{r3, pc}

000b64a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b64a6:	7c00      	ldrb	r0, [r0, #16]
   b64a8:	f7fe be56 	b.w	b5158 <hal_usart_flush>

000b64ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b64ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b64ae:	7c45      	ldrb	r5, [r0, #17]
{
   b64b0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b64b2:	b12d      	cbz	r5, b64c0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b64b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b64b6:	b003      	add	sp, #12
   b64b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b64bc:	f7fe be2c 	b.w	b5118 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b64c0:	7c00      	ldrb	r0, [r0, #16]
   b64c2:	9101      	str	r1, [sp, #4]
   b64c4:	f7fe fe58 	bl	b5178 <hal_usart_available_data_for_write>
   b64c8:	2800      	cmp	r0, #0
   b64ca:	9901      	ldr	r1, [sp, #4]
   b64cc:	dcf2      	bgt.n	b64b4 <_ZN11USARTSerial5writeEh+0x8>
}
   b64ce:	4628      	mov	r0, r5
   b64d0:	b003      	add	sp, #12
   b64d2:	bd30      	pop	{r4, r5, pc}

000b64d4 <_ZN11USARTSerialD0Ev>:
   b64d4:	b510      	push	{r4, lr}
   b64d6:	2114      	movs	r1, #20
   b64d8:	4604      	mov	r4, r0
   b64da:	f7fd fde2 	bl	b40a2 <_ZdlPvj>
   b64de:	4620      	mov	r0, r4
   b64e0:	bd10      	pop	{r4, pc}
	...

000b64e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b64e4:	b510      	push	{r4, lr}
   b64e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b64ea:	4604      	mov	r4, r0
   b64ec:	4608      	mov	r0, r1
   b64ee:	4611      	mov	r1, r2
   b64f0:	2200      	movs	r2, #0
   b64f2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b64f6:	4b04      	ldr	r3, [pc, #16]	; (b6508 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b64f8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b64fa:	2301      	movs	r3, #1
  _serial = serial;
   b64fc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b64fe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6500:	f7fe fe42 	bl	b5188 <hal_usart_init_ex>
}
   b6504:	4620      	mov	r0, r4
   b6506:	bd10      	pop	{r4, pc}
   b6508:	000b9e64 	.word	0x000b9e64

000b650c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b650c:	b510      	push	{r4, lr}
      if (_M_empty())
   b650e:	6883      	ldr	r3, [r0, #8]
   b6510:	4604      	mov	r4, r0
   b6512:	b90b      	cbnz	r3, b6518 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6514:	f000 fcd4 	bl	b6ec0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6518:	68c3      	ldr	r3, [r0, #12]
   b651a:	4798      	blx	r3
      if (_M_manager)
   b651c:	68a3      	ldr	r3, [r4, #8]
   b651e:	b11b      	cbz	r3, b6528 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6520:	2203      	movs	r2, #3
   b6522:	4621      	mov	r1, r4
   b6524:	4620      	mov	r0, r4
   b6526:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6528:	4620      	mov	r0, r4
   b652a:	2110      	movs	r1, #16
}
   b652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6530:	f7fd bdb7 	b.w	b40a2 <_ZdlPvj>

000b6534 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6534:	4770      	bx	lr

000b6536 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6538:	4606      	mov	r6, r0
   b653a:	4615      	mov	r5, r2
   b653c:	460c      	mov	r4, r1
   b653e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6540:	42bc      	cmp	r4, r7
   b6542:	d006      	beq.n	b6552 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6544:	6833      	ldr	r3, [r6, #0]
   b6546:	f814 1b01 	ldrb.w	r1, [r4], #1
   b654a:	689b      	ldr	r3, [r3, #8]
   b654c:	4630      	mov	r0, r6
   b654e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6550:	e7f6      	b.n	b6540 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6552:	4628      	mov	r0, r5
   b6554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6556 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6556:	7c00      	ldrb	r0, [r0, #16]
   b6558:	2200      	movs	r2, #0
   b655a:	f7fe be1d 	b.w	b5198 <hal_i2c_write>

000b655e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b655e:	7c00      	ldrb	r0, [r0, #16]
   b6560:	2100      	movs	r1, #0
   b6562:	f7fe be21 	b.w	b51a8 <hal_i2c_available>

000b6566 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6566:	7c00      	ldrb	r0, [r0, #16]
   b6568:	2100      	movs	r1, #0
   b656a:	f7fe be25 	b.w	b51b8 <hal_i2c_read>

000b656e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b656e:	7c00      	ldrb	r0, [r0, #16]
   b6570:	2100      	movs	r1, #0
   b6572:	f7fe be29 	b.w	b51c8 <hal_i2c_peek>

000b6576 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6576:	7c00      	ldrb	r0, [r0, #16]
   b6578:	2100      	movs	r1, #0
   b657a:	f7fe be2d 	b.w	b51d8 <hal_i2c_flush>

000b657e <_ZN7TwoWireD0Ev>:
   b657e:	b510      	push	{r4, lr}
   b6580:	2114      	movs	r1, #20
   b6582:	4604      	mov	r4, r0
   b6584:	f7fd fd8d 	bl	b40a2 <_ZdlPvj>
   b6588:	4620      	mov	r0, r4
   b658a:	bd10      	pop	{r4, pc}

000b658c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b658c:	b510      	push	{r4, lr}
   b658e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6592:	4604      	mov	r4, r0
   b6594:	4608      	mov	r0, r1
   b6596:	2100      	movs	r1, #0
   b6598:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b659c:	4b03      	ldr	r3, [pc, #12]	; (b65ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b659e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b65a0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b65a2:	4611      	mov	r1, r2
   b65a4:	f7fe fe28 	bl	b51f8 <hal_i2c_init>
}
   b65a8:	4620      	mov	r0, r4
   b65aa:	bd10      	pop	{r4, pc}
   b65ac:	000b9e94 	.word	0x000b9e94

000b65b0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b65b0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b65b2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b65b4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b65b8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b65ba:	2201      	movs	r2, #1
   b65bc:	f04f 33ff 	mov.w	r3, #4294967295
   b65c0:	f10d 0107 	add.w	r1, sp, #7
   b65c4:	47a0      	blx	r4
}
   b65c6:	b002      	add	sp, #8
   b65c8:	bd10      	pop	{r4, pc}

000b65ca <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b65ca:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b65cc:	6803      	ldr	r3, [r0, #0]
   b65ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b65d0:	f04f 33ff 	mov.w	r3, #4294967295
   b65d4:	46a4      	mov	ip, r4
}
   b65d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b65da:	4760      	bx	ip

000b65dc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b65dc:	b513      	push	{r0, r1, r4, lr}
   b65de:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b65e0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b65e2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b65e6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b65e8:	f10d 0107 	add.w	r1, sp, #7
   b65ec:	2201      	movs	r2, #1
   b65ee:	47a0      	blx	r4
}
   b65f0:	b002      	add	sp, #8
   b65f2:	bd10      	pop	{r4, pc}

000b65f4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b65f4:	b510      	push	{r4, lr}
   b65f6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b65f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b65fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6600:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6602:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6604:	d008      	beq.n	b6618 <_ZN9TCPClient4readEv+0x24>
   b6606:	6963      	ldr	r3, [r4, #20]
   b6608:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b660c:	1c51      	adds	r1, r2, #1
   b660e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6612:	4413      	add	r3, r2
   b6614:	7918      	ldrb	r0, [r3, #4]
}
   b6616:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6618:	6803      	ldr	r3, [r0, #0]
   b661a:	691b      	ldr	r3, [r3, #16]
   b661c:	4798      	blx	r3
   b661e:	2800      	cmp	r0, #0
   b6620:	d1f1      	bne.n	b6606 <_ZN9TCPClient4readEv+0x12>
   b6622:	f04f 30ff 	mov.w	r0, #4294967295
   b6626:	e7f6      	b.n	b6616 <_ZN9TCPClient4readEv+0x22>

000b6628 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6628:	4770      	bx	lr

000b662a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b662a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b662c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b662e:	43c0      	mvns	r0, r0
   b6630:	0fc0      	lsrs	r0, r0, #31
   b6632:	4770      	bx	lr

000b6634 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6634:	4770      	bx	lr
	...

000b6638 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6638:	4b06      	ldr	r3, [pc, #24]	; (b6654 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b663a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b663c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b663e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6642:	d005      	beq.n	b6650 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6644:	4608      	mov	r0, r1
   b6646:	f000 fc3f 	bl	b6ec8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b664a:	2800      	cmp	r0, #0
   b664c:	bf08      	it	eq
   b664e:	2400      	moveq	r4, #0
      }
   b6650:	4620      	mov	r0, r4
   b6652:	bd10      	pop	{r4, pc}
   b6654:	000b9dd4 	.word	0x000b9dd4

000b6658 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6658:	b510      	push	{r4, lr}
   b665a:	21ac      	movs	r1, #172	; 0xac
   b665c:	4604      	mov	r4, r0
   b665e:	f7fd fd20 	bl	b40a2 <_ZdlPvj>
   b6662:	4620      	mov	r0, r4
   b6664:	bd10      	pop	{r4, pc}

000b6666 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6666:	21ac      	movs	r1, #172	; 0xac
   b6668:	f7fd bd1b 	b.w	b40a2 <_ZdlPvj>

000b666c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6670:	f04f 0800 	mov.w	r8, #0
   b6674:	b086      	sub	sp, #24
   b6676:	461c      	mov	r4, r3
   b6678:	f8c0 8004 	str.w	r8, [r0, #4]
   b667c:	4605      	mov	r5, r0
   b667e:	460e      	mov	r6, r1
   b6680:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6682:	4641      	mov	r1, r8
   b6684:	2210      	movs	r2, #16
   b6686:	a802      	add	r0, sp, #8
   b6688:	f001 f9f3 	bl	b7a72 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b668c:	1c63      	adds	r3, r4, #1
   b668e:	d009      	beq.n	b66a4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6694:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6698:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b669c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b66a0:	435c      	muls	r4, r3
   b66a2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b66a4:	6968      	ldr	r0, [r5, #20]
   b66a6:	2310      	movs	r3, #16
   b66a8:	9300      	str	r3, [sp, #0]
   b66aa:	6800      	ldr	r0, [r0, #0]
   b66ac:	ab02      	add	r3, sp, #8
   b66ae:	f241 0205 	movw	r2, #4101	; 0x1005
   b66b2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b66b6:	f7fe fda7 	bl	b5208 <sock_setsockopt>
    if (ret < 0) {
   b66ba:	2800      	cmp	r0, #0
   b66bc:	da07      	bge.n	b66ce <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b66be:	f7fe ff2f 	bl	b5520 <__errno>
   b66c2:	6803      	ldr	r3, [r0, #0]
   b66c4:	606b      	str	r3, [r5, #4]
        return 0;
   b66c6:	2000      	movs	r0, #0
}
   b66c8:	b006      	add	sp, #24
   b66ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b66ce:	6968      	ldr	r0, [r5, #20]
   b66d0:	2300      	movs	r3, #0
   b66d2:	6800      	ldr	r0, [r0, #0]
   b66d4:	463a      	mov	r2, r7
   b66d6:	4631      	mov	r1, r6
   b66d8:	f7fe fdb6 	bl	b5248 <sock_send>
    if (ret < 0) {
   b66dc:	1e03      	subs	r3, r0, #0
   b66de:	dbee      	blt.n	b66be <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b66e0:	4618      	mov	r0, r3
   b66e2:	e7f1      	b.n	b66c8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b66e4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b66e4:	b530      	push	{r4, r5, lr}
   b66e6:	b087      	sub	sp, #28
   b66e8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b66ea:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b66ec:	4668      	mov	r0, sp
   b66ee:	f7ff fdff 	bl	b62f0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b66f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66f4:	3404      	adds	r4, #4
   b66f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66f8:	682b      	ldr	r3, [r5, #0]
   b66fa:	7023      	strb	r3, [r4, #0]
    }
   b66fc:	b007      	add	sp, #28
   b66fe:	bd30      	pop	{r4, r5, pc}

000b6700 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6700:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6702:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6704:	4b05      	ldr	r3, [pc, #20]	; (b671c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6706:	4604      	mov	r4, r0
   b6708:	358c      	adds	r5, #140	; 0x8c
   b670a:	f844 3b04 	str.w	r3, [r4], #4
   b670e:	4606      	mov	r6, r0
   b6710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6714:	682b      	ldr	r3, [r5, #0]
   b6716:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6718:	4630      	mov	r0, r6
   b671a:	bd70      	pop	{r4, r5, r6, pc}
   b671c:	000b9e20 	.word	0x000b9e20

000b6720 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6724:	4698      	mov	r8, r3
    stop();
   b6726:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6728:	b093      	sub	sp, #76	; 0x4c
   b672a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b672c:	2400      	movs	r4, #0
    stop();
   b672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6730:	4606      	mov	r6, r0
   b6732:	4617      	mov	r7, r2
    stop();
   b6734:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6736:	4628      	mov	r0, r5
   b6738:	466b      	mov	r3, sp
   b673a:	4622      	mov	r2, r4
   b673c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b673e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6740:	f7fe fc6a 	bl	b5018 <netdb_getaddrinfo>
   b6744:	4605      	mov	r5, r0
   b6746:	2800      	cmp	r0, #0
   b6748:	d163      	bne.n	b6812 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b674a:	9b00      	ldr	r3, [sp, #0]
   b674c:	2b00      	cmp	r3, #0
   b674e:	d04b      	beq.n	b67e8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6750:	695b      	ldr	r3, [r3, #20]
   b6752:	2b00      	cmp	r3, #0
   b6754:	d048      	beq.n	b67e8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6756:	a806      	add	r0, sp, #24
   b6758:	f7ff fd86 	bl	b6268 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b675c:	9b00      	ldr	r3, [sp, #0]
   b675e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6760:	7863      	ldrb	r3, [r4, #1]
   b6762:	2b02      	cmp	r3, #2
   b6764:	d104      	bne.n	b6770 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6766:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6768:	a806      	add	r0, sp, #24
   b676a:	f7ff ffbb 	bl	b66e4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b676e:	e026      	b.n	b67be <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6770:	2b0a      	cmp	r3, #10
   b6772:	d124      	bne.n	b67be <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6774:	2211      	movs	r2, #17
   b6776:	4629      	mov	r1, r5
   b6778:	a801      	add	r0, sp, #4
   b677a:	f001 f97a 	bl	b7a72 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b677e:	68a3      	ldr	r3, [r4, #8]
   b6780:	2b00      	cmp	r3, #0
   b6782:	d038      	beq.n	b67f6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6784:	f104 0308 	add.w	r3, r4, #8
   b6788:	f10d 0c04 	add.w	ip, sp, #4
   b678c:	3418      	adds	r4, #24
   b678e:	6818      	ldr	r0, [r3, #0]
   b6790:	6859      	ldr	r1, [r3, #4]
   b6792:	4662      	mov	r2, ip
   b6794:	c203      	stmia	r2!, {r0, r1}
   b6796:	3308      	adds	r3, #8
   b6798:	42a3      	cmp	r3, r4
   b679a:	4694      	mov	ip, r2
   b679c:	d1f7      	bne.n	b678e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b679e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b67a0:	a901      	add	r1, sp, #4
   b67a2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b67a4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b67a8:	f7ff fd6c 	bl	b6284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b67ac:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b67b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b67b4:	ac07      	add	r4, sp, #28
   b67b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67b8:	f8dc 3000 	ldr.w	r3, [ip]
   b67bc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b67be:	a806      	add	r0, sp, #24
   b67c0:	f7ff fd72 	bl	b62a8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b67c4:	b180      	cbz	r0, b67e8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b67c6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b67c8:	ad07      	add	r5, sp, #28
   b67ca:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b67ce:	4b12      	ldr	r3, [pc, #72]	; (b6818 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b67d0:	930c      	str	r3, [sp, #48]	; 0x30
   b67d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67d4:	ac0d      	add	r4, sp, #52	; 0x34
   b67d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67d8:	682b      	ldr	r3, [r5, #0]
   b67da:	7023      	strb	r3, [r4, #0]
   b67dc:	463a      	mov	r2, r7
   b67de:	4643      	mov	r3, r8
   b67e0:	a90c      	add	r1, sp, #48	; 0x30
   b67e2:	4630      	mov	r0, r6
   b67e4:	47c8      	blx	r9
   b67e6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b67e8:	9800      	ldr	r0, [sp, #0]
   b67ea:	f7fe fc0d 	bl	b5008 <netdb_freeaddrinfo>
}
   b67ee:	4628      	mov	r0, r5
   b67f0:	b013      	add	sp, #76	; 0x4c
   b67f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b67f6:	68e3      	ldr	r3, [r4, #12]
   b67f8:	2b00      	cmp	r3, #0
   b67fa:	d1c3      	bne.n	b6784 <_ZN9TCPClient7connectEPKctm+0x64>
   b67fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6800:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6804:	f7fe fc78 	bl	b50f8 <inet_htonl>
   b6808:	4581      	cmp	r9, r0
   b680a:	d1bb      	bne.n	b6784 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b680c:	f104 0114 	add.w	r1, r4, #20
   b6810:	e7aa      	b.n	b6768 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6812:	4625      	mov	r5, r4
   b6814:	e7e8      	b.n	b67e8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6816:	bf00      	nop
   b6818:	000b9e20 	.word	0x000b9e20

000b681c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b681c:	b538      	push	{r3, r4, r5, lr}
   b681e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6820:	681a      	ldr	r2, [r3, #0]
   b6822:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6824:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6826:	da10      	bge.n	b684a <_ZN9TCPClient9connectedEv+0x2e>
   b6828:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b682c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6830:	429a      	cmp	r2, r3
   b6832:	d10a      	bne.n	b684a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6834:	6803      	ldr	r3, [r0, #0]
   b6836:	691b      	ldr	r3, [r3, #16]
   b6838:	4798      	blx	r3
        if (!rv) {
   b683a:	4604      	mov	r4, r0
   b683c:	b928      	cbnz	r0, b684a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b683e:	682b      	ldr	r3, [r5, #0]
   b6840:	4628      	mov	r0, r5
   b6842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6844:	4798      	blx	r3
        rv = available();
   b6846:	4620      	mov	r0, r4
}
   b6848:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b684a:	2001      	movs	r0, #1
   b684c:	e7fc      	b.n	b6848 <_ZN9TCPClient9connectedEv+0x2c>

000b684e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b684e:	b510      	push	{r4, lr}
   b6850:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6852:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6856:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b685a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b685c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b685e:	d005      	beq.n	b686c <_ZN9TCPClient4peekEv+0x1e>
   b6860:	6963      	ldr	r3, [r4, #20]
   b6862:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6866:	4413      	add	r3, r2
   b6868:	7918      	ldrb	r0, [r3, #4]
}
   b686a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b686c:	6803      	ldr	r3, [r0, #0]
   b686e:	691b      	ldr	r3, [r3, #16]
   b6870:	4798      	blx	r3
   b6872:	2800      	cmp	r0, #0
   b6874:	d1f4      	bne.n	b6860 <_ZN9TCPClient4peekEv+0x12>
   b6876:	f04f 30ff 	mov.w	r0, #4294967295
   b687a:	e7f6      	b.n	b686a <_ZN9TCPClient4peekEv+0x1c>

000b687c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b687e:	6943      	ldr	r3, [r0, #20]
   b6880:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6882:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6886:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b688a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b688c:	4605      	mov	r5, r0
   b688e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6890:	d016      	beq.n	b68c0 <_ZN9TCPClient4readEPhj+0x44>
   b6892:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6894:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6898:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b689c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b689e:	42bc      	cmp	r4, r7
   b68a0:	bf28      	it	cs
   b68a2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b68a4:	3304      	adds	r3, #4
   b68a6:	4622      	mov	r2, r4
   b68a8:	4419      	add	r1, r3
   b68aa:	4630      	mov	r0, r6
   b68ac:	f001 f8d3 	bl	b7a56 <memcpy>
   b68b0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b68b2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b68b6:	4423      	add	r3, r4
   b68b8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b68bc:	4620      	mov	r0, r4
   b68be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b68c0:	6803      	ldr	r3, [r0, #0]
   b68c2:	691b      	ldr	r3, [r3, #16]
   b68c4:	4798      	blx	r3
   b68c6:	2800      	cmp	r0, #0
   b68c8:	d1e3      	bne.n	b6892 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b68ca:	f04f 34ff 	mov.w	r4, #4294967295
   b68ce:	e7f5      	b.n	b68bc <_ZN9TCPClient4readEPhj+0x40>

000b68d0 <_ZN9TCPClient12flush_bufferEv>:
   b68d0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b68d2:	2300      	movs	r3, #0
   b68d4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b68d8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b68da:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b68de:	4770      	bx	lr

000b68e0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b68e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b68e4:	461f      	mov	r7, r3
    stop();
   b68e6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b68e8:	460c      	mov	r4, r1
    stop();
   b68ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b68ec:	b08a      	sub	sp, #40	; 0x28
   b68ee:	4605      	mov	r5, r0
   b68f0:	4616      	mov	r6, r2
    stop();
   b68f2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b68f4:	7d23      	ldrb	r3, [r4, #20]
   b68f6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b68fa:	2b04      	cmp	r3, #4
   b68fc:	bf0c      	ite	eq
   b68fe:	2002      	moveq	r0, #2
   b6900:	200a      	movne	r0, #10
   b6902:	2206      	movs	r2, #6
   b6904:	2101      	movs	r1, #1
   b6906:	f7fe fca7 	bl	b5258 <sock_socket>
   b690a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b690e:	696b      	ldr	r3, [r5, #20]
   b6910:	681b      	ldr	r3, [r3, #0]
   b6912:	2b00      	cmp	r3, #0
   b6914:	da08      	bge.n	b6928 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6916:	682b      	ldr	r3, [r5, #0]
   b6918:	4628      	mov	r0, r5
   b691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b691c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b691e:	4798      	blx	r3
}
   b6920:	4620      	mov	r0, r4
   b6922:	b00a      	add	sp, #40	; 0x28
   b6924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6928:	4628      	mov	r0, r5
   b692a:	f7ff ffd1 	bl	b68d0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b692e:	b1b7      	cbz	r7, b695e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6930:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6932:	a903      	add	r1, sp, #12
   b6934:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6936:	9303      	str	r3, [sp, #12]
   b6938:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b693c:	f7fe fb8c 	bl	b5058 <if_index_to_name>
   b6940:	2800      	cmp	r0, #0
   b6942:	d1e8      	bne.n	b6916 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6944:	6968      	ldr	r0, [r5, #20]
   b6946:	2306      	movs	r3, #6
   b6948:	9300      	str	r3, [sp, #0]
   b694a:	6800      	ldr	r0, [r0, #0]
   b694c:	ab03      	add	r3, sp, #12
   b694e:	f241 020b 	movw	r2, #4107	; 0x100b
   b6952:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6956:	f7fe fc57 	bl	b5208 <sock_setsockopt>
   b695a:	2800      	cmp	r0, #0
   b695c:	d1db      	bne.n	b6916 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b695e:	221c      	movs	r2, #28
   b6960:	2100      	movs	r1, #0
   b6962:	a803      	add	r0, sp, #12
   b6964:	f001 f885 	bl	b7a72 <memset>
    if (ip.version() == 4) {
   b6968:	7d23      	ldrb	r3, [r4, #20]
   b696a:	2b04      	cmp	r3, #4
   b696c:	d11d      	bne.n	b69aa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b696e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6972:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6974:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6978:	f7fe fbc6 	bl	b5108 <inet_htons>
   b697c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6980:	6860      	ldr	r0, [r4, #4]
   b6982:	f7fe fbb9 	bl	b50f8 <inet_htonl>
   b6986:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6988:	696b      	ldr	r3, [r5, #20]
   b698a:	221c      	movs	r2, #28
   b698c:	6818      	ldr	r0, [r3, #0]
   b698e:	a903      	add	r1, sp, #12
   b6990:	f7fe fc4a 	bl	b5228 <sock_connect>
   b6994:	2800      	cmp	r0, #0
   b6996:	d1be      	bne.n	b6916 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6998:	3404      	adds	r4, #4
   b699a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b699c:	696d      	ldr	r5, [r5, #20]
   b699e:	358c      	adds	r5, #140	; 0x8c
   b69a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b69a2:	6823      	ldr	r3, [r4, #0]
   b69a4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b69a6:	2401      	movs	r4, #1
   b69a8:	e7ba      	b.n	b6920 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b69aa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b69ae:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b69b0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b69b4:	f7fe fba8 	bl	b5108 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b69b8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b69ba:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b69be:	1d23      	adds	r3, r4, #4
   b69c0:	f104 0714 	add.w	r7, r4, #20
   b69c4:	6818      	ldr	r0, [r3, #0]
   b69c6:	6859      	ldr	r1, [r3, #4]
   b69c8:	4632      	mov	r2, r6
   b69ca:	c203      	stmia	r2!, {r0, r1}
   b69cc:	3308      	adds	r3, #8
   b69ce:	42bb      	cmp	r3, r7
   b69d0:	4616      	mov	r6, r2
   b69d2:	d1f7      	bne.n	b69c4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b69d4:	e7d8      	b.n	b6988 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b69d8 <_ZN9TCPClient9availableEv>:
{
   b69d8:	b530      	push	{r4, r5, lr}
   b69da:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b69dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b69e0:	b08b      	sub	sp, #44	; 0x2c
   b69e2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b69e4:	b12b      	cbz	r3, b69f2 <_ZN9TCPClient9availableEv+0x1a>
   b69e6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b69ea:	429a      	cmp	r2, r3
   b69ec:	d101      	bne.n	b69f2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b69ee:	f7ff ff6f 	bl	b68d0 <_ZN9TCPClient12flush_bufferEv>
   b69f2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b69f4:	6808      	ldr	r0, [r1, #0]
   b69f6:	2800      	cmp	r0, #0
   b69f8:	db18      	blt.n	b6a2c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b69fa:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b69fe:	2d7f      	cmp	r5, #127	; 0x7f
   b6a00:	d814      	bhi.n	b6a2c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6a02:	3104      	adds	r1, #4
   b6a04:	2308      	movs	r3, #8
   b6a06:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6a0a:	4429      	add	r1, r5
   b6a0c:	f7fe fc14 	bl	b5238 <sock_recv>
            if (ret > 0) {
   b6a10:	2800      	cmp	r0, #0
   b6a12:	dd13      	ble.n	b6a3c <_ZN9TCPClient9availableEv+0x64>
   b6a14:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6a16:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a1a:	b90a      	cbnz	r2, b6a20 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6a1c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6a20:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6a22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a26:	4410      	add	r0, r2
   b6a28:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6a2c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6a2e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6a32:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6a36:	1ac0      	subs	r0, r0, r3
   b6a38:	b00b      	add	sp, #44	; 0x2c
   b6a3a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6a3c:	f7fe fd70 	bl	b5520 <__errno>
   b6a40:	6803      	ldr	r3, [r0, #0]
   b6a42:	2b0b      	cmp	r3, #11
   b6a44:	d0f2      	beq.n	b6a2c <_ZN9TCPClient9availableEv+0x54>
   b6a46:	f7fe fd6b 	bl	b5520 <__errno>
   b6a4a:	6803      	ldr	r3, [r0, #0]
   b6a4c:	2b0b      	cmp	r3, #11
   b6a4e:	d0ed      	beq.n	b6a2c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6a50:	2320      	movs	r3, #32
   b6a52:	2500      	movs	r5, #0
   b6a54:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6a58:	f7fe fd62 	bl	b5520 <__errno>
   b6a5c:	6803      	ldr	r3, [r0, #0]
   b6a5e:	9301      	str	r3, [sp, #4]
   b6a60:	4b08      	ldr	r3, [pc, #32]	; (b6a84 <_ZN9TCPClient9availableEv+0xac>)
   b6a62:	4909      	ldr	r1, [pc, #36]	; (b6a88 <_ZN9TCPClient9availableEv+0xb0>)
   b6a64:	9300      	str	r3, [sp, #0]
   b6a66:	aa02      	add	r2, sp, #8
   b6a68:	462b      	mov	r3, r5
   b6a6a:	2032      	movs	r0, #50	; 0x32
   b6a6c:	f7fe fc3c 	bl	b52e8 <log_message>
                    sock_close(d_->sock);
   b6a70:	6963      	ldr	r3, [r4, #20]
   b6a72:	6818      	ldr	r0, [r3, #0]
   b6a74:	f7fe fbd0 	bl	b5218 <sock_close>
   b6a78:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6a7a:	f04f 32ff 	mov.w	r2, #4294967295
   b6a7e:	601a      	str	r2, [r3, #0]
   b6a80:	e7d4      	b.n	b6a2c <_ZN9TCPClient9availableEv+0x54>
   b6a82:	bf00      	nop
   b6a84:	000b9ebb 	.word	0x000b9ebb
   b6a88:	000b9eb4 	.word	0x000b9eb4

000b6a8c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6a8c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6a8e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6a90:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6a92:	6818      	ldr	r0, [r3, #0]
   b6a94:	2800      	cmp	r0, #0
   b6a96:	db01      	blt.n	b6a9c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6a98:	f7fe fbbe 	bl	b5218 <sock_close>
   b6a9c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6a9e:	f04f 32ff 	mov.w	r2, #4294967295
   b6aa2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6aa4:	6960      	ldr	r0, [r4, #20]
   b6aa6:	2211      	movs	r2, #17
   b6aa8:	2100      	movs	r1, #0
   b6aaa:	308c      	adds	r0, #140	; 0x8c
   b6aac:	f000 ffe1 	bl	b7a72 <memset>
    flush_buffer();
   b6ab0:	4620      	mov	r0, r4
}
   b6ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6ab6:	f7ff bf0b 	b.w	b68d0 <_ZN9TCPClient12flush_bufferEv>

000b6aba <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6aba:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6abc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6abe:	4604      	mov	r4, r0
          total(0) {
   b6ac0:	6001      	str	r1, [r0, #0]
   b6ac2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6ac6:	3088      	adds	r0, #136	; 0x88
   b6ac8:	f7ff fbce 	bl	b6268 <_ZN9IPAddressC1Ev>
}
   b6acc:	4620      	mov	r0, r4
   b6ace:	bd10      	pop	{r4, pc}

000b6ad0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6ad2:	2300      	movs	r3, #0
   b6ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6ad8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6adc:	4a0e      	ldr	r2, [pc, #56]	; (b6b18 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6ade:	6103      	str	r3, [r0, #16]
   b6ae0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6ae2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6ae4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6ae6:	20ac      	movs	r0, #172	; 0xac
   b6ae8:	9101      	str	r1, [sp, #4]
   b6aea:	f7fd fad4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6aee:	1e05      	subs	r5, r0, #0
   b6af0:	f105 060c 	add.w	r6, r5, #12
   b6af4:	d008      	beq.n	b6b08 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6af6:	2301      	movs	r3, #1
   b6af8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6afc:	4b07      	ldr	r3, [pc, #28]	; (b6b1c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6afe:	9901      	ldr	r1, [sp, #4]
   b6b00:	602b      	str	r3, [r5, #0]
   b6b02:	4630      	mov	r0, r6
   b6b04:	f7ff ffd9 	bl	b6aba <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6b08:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6b0a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6b0e:	f7ff fedf 	bl	b68d0 <_ZN9TCPClient12flush_bufferEv>
}
   b6b12:	b002      	add	sp, #8
   b6b14:	bd70      	pop	{r4, r5, r6, pc}
   b6b16:	bf00      	nop
   b6b18:	000b9ef0 	.word	0x000b9ef0
   b6b1c:	000b9ed4 	.word	0x000b9ed4

000b6b20 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6b20:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6b22:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6b26:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6b28:	f7ff ffd2 	bl	b6ad0 <_ZN9TCPClientC1Ei>
}
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	bd10      	pop	{r4, pc}

000b6b30 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6b30:	b510      	push	{r4, lr}
   b6b32:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6b34:	6800      	ldr	r0, [r0, #0]
   b6b36:	2800      	cmp	r0, #0
   b6b38:	db01      	blt.n	b6b3e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6b3a:	f7fe fb6d 	bl	b5218 <sock_close>
    }
}
   b6b3e:	4620      	mov	r0, r4
   b6b40:	bd10      	pop	{r4, pc}

000b6b42 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6b42:	300c      	adds	r0, #12
   b6b44:	f7ff bff4 	b.w	b6b30 <_ZN9TCPClient4DataD1Ev>

000b6b48 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6b48:	2200      	movs	r2, #0
   b6b4a:	6840      	ldr	r0, [r0, #4]
   b6b4c:	4611      	mov	r1, r2
   b6b4e:	f7fe bc2f 	b.w	b53b0 <network_ready>

000b6b52 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6b52:	2200      	movs	r2, #0
   b6b54:	6840      	ldr	r0, [r0, #4]
   b6b56:	4611      	mov	r1, r2
   b6b58:	f7fe bc4a 	b.w	b53f0 <network_listening>

000b6b5c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6b5c:	2200      	movs	r2, #0
   b6b5e:	6840      	ldr	r0, [r0, #4]
   b6b60:	4611      	mov	r1, r2
   b6b62:	f7fe bc55 	b.w	b5410 <network_get_listen_timeout>

000b6b66 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6b66:	6840      	ldr	r0, [r0, #4]
   b6b68:	2200      	movs	r2, #0
   b6b6a:	f7fe bc49 	b.w	b5400 <network_set_listen_timeout>

000b6b6e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6b6e:	6840      	ldr	r0, [r0, #4]
   b6b70:	2200      	movs	r2, #0
   b6b72:	f081 0101 	eor.w	r1, r1, #1
   b6b76:	f7fe bc33 	b.w	b53e0 <network_listen>

000b6b7a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6b7a:	2300      	movs	r3, #0
   b6b7c:	6840      	ldr	r0, [r0, #4]
   b6b7e:	461a      	mov	r2, r3
   b6b80:	4619      	mov	r1, r3
   b6b82:	f7fe bc25 	b.w	b53d0 <network_off>

000b6b86 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6b86:	2300      	movs	r3, #0
   b6b88:	6840      	ldr	r0, [r0, #4]
   b6b8a:	461a      	mov	r2, r3
   b6b8c:	4619      	mov	r1, r3
   b6b8e:	f7fe bc17 	b.w	b53c0 <network_on>

000b6b92 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6b92:	2200      	movs	r2, #0
   b6b94:	6840      	ldr	r0, [r0, #4]
   b6b96:	4611      	mov	r1, r2
   b6b98:	f7fe bbfa 	b.w	b5390 <network_connecting>

000b6b9c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6b9c:	6840      	ldr	r0, [r0, #4]
   b6b9e:	2200      	movs	r2, #0
   b6ba0:	2102      	movs	r1, #2
   b6ba2:	f7fe bbfd 	b.w	b53a0 <network_disconnect>

000b6ba6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6ba6:	2300      	movs	r3, #0
   b6ba8:	6840      	ldr	r0, [r0, #4]
   b6baa:	461a      	mov	r2, r3
   b6bac:	f7fe bbe8 	b.w	b5380 <network_connect>

000b6bb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6bb0:	4b02      	ldr	r3, [pc, #8]	; (b6bbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6bb2:	2204      	movs	r2, #4
   b6bb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6bb6:	4a02      	ldr	r2, [pc, #8]	; (b6bc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6bb8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6bba:	4770      	bx	lr
   b6bbc:	2003e710 	.word	0x2003e710
   b6bc0:	000b9f3c 	.word	0x000b9f3c

000b6bc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6bc4:	2300      	movs	r3, #0
   b6bc6:	6840      	ldr	r0, [r0, #4]
   b6bc8:	461a      	mov	r2, r3
   b6bca:	f7fe bbd9 	b.w	b5380 <network_connect>

000b6bce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6bce:	6840      	ldr	r0, [r0, #4]
   b6bd0:	2200      	movs	r2, #0
   b6bd2:	2102      	movs	r1, #2
   b6bd4:	f7fe bbe4 	b.w	b53a0 <network_disconnect>

000b6bd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6bd8:	2200      	movs	r2, #0
   b6bda:	6840      	ldr	r0, [r0, #4]
   b6bdc:	4611      	mov	r1, r2
   b6bde:	f7fe bbd7 	b.w	b5390 <network_connecting>

000b6be2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6be2:	2200      	movs	r2, #0
   b6be4:	6840      	ldr	r0, [r0, #4]
   b6be6:	4611      	mov	r1, r2
   b6be8:	f7fe bbe2 	b.w	b53b0 <network_ready>

000b6bec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6bec:	2300      	movs	r3, #0
   b6bee:	6840      	ldr	r0, [r0, #4]
   b6bf0:	461a      	mov	r2, r3
   b6bf2:	4619      	mov	r1, r3
   b6bf4:	f7fe bbe4 	b.w	b53c0 <network_on>

000b6bf8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6bf8:	2300      	movs	r3, #0
   b6bfa:	6840      	ldr	r0, [r0, #4]
   b6bfc:	461a      	mov	r2, r3
   b6bfe:	4619      	mov	r1, r3
   b6c00:	f7fe bbe6 	b.w	b53d0 <network_off>

000b6c04 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6c04:	6840      	ldr	r0, [r0, #4]
   b6c06:	2100      	movs	r1, #0
   b6c08:	f7fe bc0a 	b.w	b5420 <network_is_on>

000b6c0c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6c0c:	6840      	ldr	r0, [r0, #4]
   b6c0e:	2100      	movs	r1, #0
   b6c10:	f7fe bc0e 	b.w	b5430 <network_is_off>

000b6c14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6c14:	6840      	ldr	r0, [r0, #4]
   b6c16:	2200      	movs	r2, #0
   b6c18:	f081 0101 	eor.w	r1, r1, #1
   b6c1c:	f7fe bbe0 	b.w	b53e0 <network_listen>

000b6c20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6c20:	6840      	ldr	r0, [r0, #4]
   b6c22:	2200      	movs	r2, #0
   b6c24:	f7fe bbec 	b.w	b5400 <network_set_listen_timeout>

000b6c28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6c28:	2200      	movs	r2, #0
   b6c2a:	6840      	ldr	r0, [r0, #4]
   b6c2c:	4611      	mov	r1, r2
   b6c2e:	f7fe bbef 	b.w	b5410 <network_get_listen_timeout>

000b6c32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6c32:	2200      	movs	r2, #0
   b6c34:	6840      	ldr	r0, [r0, #4]
   b6c36:	4611      	mov	r1, r2
   b6c38:	f7fe bbda 	b.w	b53f0 <network_listening>

000b6c3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c40:	b095      	sub	sp, #84	; 0x54
   b6c42:	4614      	mov	r4, r2
   b6c44:	460d      	mov	r5, r1
   b6c46:	4607      	mov	r7, r0
    IPAddress addr;
   b6c48:	f7ff fb0e 	bl	b6268 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6c4c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6c4e:	221c      	movs	r2, #28
   b6c50:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6c52:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6c54:	f000 ff0d 	bl	b7a72 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6c58:	2340      	movs	r3, #64	; 0x40
   b6c5a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6c5c:	4620      	mov	r0, r4
   b6c5e:	466b      	mov	r3, sp
   b6c60:	aa0c      	add	r2, sp, #48	; 0x30
   b6c62:	2100      	movs	r1, #0
   b6c64:	f7fe f9d8 	bl	b5018 <netdb_getaddrinfo>
    if (!r) {
   b6c68:	4604      	mov	r4, r0
   b6c6a:	2800      	cmp	r0, #0
   b6c6c:	d14b      	bne.n	b6d06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c6e:	4602      	mov	r2, r0
   b6c70:	2101      	movs	r1, #1
   b6c72:	6868      	ldr	r0, [r5, #4]
   b6c74:	f7fe fb9c 	bl	b53b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c78:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c7a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c7c:	4622      	mov	r2, r4
   b6c7e:	6868      	ldr	r0, [r5, #4]
   b6c80:	f7fe fb96 	bl	b53b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c84:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c86:	4681      	mov	r9, r0
        bool ok = false;
   b6c88:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c8a:	2e00      	cmp	r6, #0
   b6c8c:	d03b      	beq.n	b6d06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6c8e:	2900      	cmp	r1, #0
   b6c90:	d139      	bne.n	b6d06 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6c92:	6873      	ldr	r3, [r6, #4]
   b6c94:	2b02      	cmp	r3, #2
   b6c96:	d003      	beq.n	b6ca0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6c98:	2b0a      	cmp	r3, #10
   b6c9a:	d011      	beq.n	b6cc0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c9c:	69f6      	ldr	r6, [r6, #28]
   b6c9e:	e7f4      	b.n	b6c8a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6ca0:	f1b8 0f00 	cmp.w	r8, #0
   b6ca4:	d0fa      	beq.n	b6c9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6ca6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6ca8:	a806      	add	r0, sp, #24
   b6caa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6cac:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6cae:	f7ff fb1f 	bl	b62f0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cb4:	1d3c      	adds	r4, r7, #4
   b6cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cb8:	682b      	ldr	r3, [r5, #0]
   b6cba:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6cbc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6cbe:	e7ed      	b.n	b6c9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6cc0:	f1b9 0f00 	cmp.w	r9, #0
   b6cc4:	d0ea      	beq.n	b6c9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6cc6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6cc8:	2210      	movs	r2, #16
   b6cca:	a801      	add	r0, sp, #4
   b6ccc:	f000 fed1 	bl	b7a72 <memset>
                    a.v = 6;
   b6cd0:	2306      	movs	r3, #6
   b6cd2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6cd6:	ad01      	add	r5, sp, #4
   b6cd8:	f104 0308 	add.w	r3, r4, #8
   b6cdc:	3418      	adds	r4, #24
   b6cde:	6818      	ldr	r0, [r3, #0]
   b6ce0:	6859      	ldr	r1, [r3, #4]
   b6ce2:	462a      	mov	r2, r5
   b6ce4:	c203      	stmia	r2!, {r0, r1}
   b6ce6:	3308      	adds	r3, #8
   b6ce8:	42a3      	cmp	r3, r4
   b6cea:	4615      	mov	r5, r2
   b6cec:	d1f7      	bne.n	b6cde <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6cee:	a901      	add	r1, sp, #4
   b6cf0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6cf2:	ad07      	add	r5, sp, #28
   b6cf4:	f7ff fac6 	bl	b6284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cfa:	1d3c      	adds	r4, r7, #4
   b6cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cfe:	682b      	ldr	r3, [r5, #0]
   b6d00:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d02:	4649      	mov	r1, r9
   b6d04:	e7ca      	b.n	b6c9c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6d06:	9800      	ldr	r0, [sp, #0]
   b6d08:	f7fe f97e 	bl	b5008 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6d0c:	4638      	mov	r0, r7
   b6d0e:	b015      	add	sp, #84	; 0x54
   b6d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6d14 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6d14:	4b02      	ldr	r3, [pc, #8]	; (b6d20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6d16:	4a03      	ldr	r2, [pc, #12]	; (b6d24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6d18:	601a      	str	r2, [r3, #0]
   b6d1a:	2200      	movs	r2, #0
   b6d1c:	605a      	str	r2, [r3, #4]

} // spark
   b6d1e:	4770      	bx	lr
   b6d20:	2003e718 	.word	0x2003e718
   b6d24:	000b9f78 	.word	0x000b9f78

000b6d28 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6d28:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6d2a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6d2c:	d902      	bls.n	b6d34 <pinAvailable+0xc>
    return false;
   b6d2e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6d30:	b002      	add	sp, #8
   b6d32:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6d34:	f1a0 030b 	sub.w	r3, r0, #11
   b6d38:	2b02      	cmp	r3, #2
   b6d3a:	d81a      	bhi.n	b6d72 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6d3c:	4c17      	ldr	r4, [pc, #92]	; (b6d9c <pinAvailable+0x74>)
   b6d3e:	7821      	ldrb	r1, [r4, #0]
   b6d40:	f3bf 8f5b 	dmb	ish
   b6d44:	f011 0101 	ands.w	r1, r1, #1
   b6d48:	d10b      	bne.n	b6d62 <pinAvailable+0x3a>
   b6d4a:	4620      	mov	r0, r4
   b6d4c:	9101      	str	r1, [sp, #4]
   b6d4e:	f7fd f9aa 	bl	b40a6 <__cxa_guard_acquire>
   b6d52:	9901      	ldr	r1, [sp, #4]
   b6d54:	b128      	cbz	r0, b6d62 <pinAvailable+0x3a>
   b6d56:	4812      	ldr	r0, [pc, #72]	; (b6da0 <pinAvailable+0x78>)
   b6d58:	f7fe fc40 	bl	b55dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6d5c:	4620      	mov	r0, r4
   b6d5e:	f7fd f9a7 	bl	b40b0 <__cxa_guard_release>
   b6d62:	4b0f      	ldr	r3, [pc, #60]	; (b6da0 <pinAvailable+0x78>)
   b6d64:	7818      	ldrb	r0, [r3, #0]
   b6d66:	f7fe fa87 	bl	b5278 <hal_spi_is_enabled>
   b6d6a:	2800      	cmp	r0, #0
   b6d6c:	d1df      	bne.n	b6d2e <pinAvailable+0x6>
  return true; // 'pin' is available
   b6d6e:	2001      	movs	r0, #1
   b6d70:	e7de      	b.n	b6d30 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6d72:	2801      	cmp	r0, #1
   b6d74:	d809      	bhi.n	b6d8a <pinAvailable+0x62>
   b6d76:	f000 f87d 	bl	b6e74 <_Z19__fetch_global_Wirev>
   b6d7a:	2100      	movs	r1, #0
   b6d7c:	7c00      	ldrb	r0, [r0, #16]
   b6d7e:	f7fe fa33 	bl	b51e8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6d82:	f080 0001 	eor.w	r0, r0, #1
   b6d86:	b2c0      	uxtb	r0, r0
   b6d88:	e7d2      	b.n	b6d30 <pinAvailable+0x8>
   b6d8a:	3809      	subs	r0, #9
   b6d8c:	2801      	cmp	r0, #1
   b6d8e:	d8ee      	bhi.n	b6d6e <pinAvailable+0x46>
   b6d90:	f000 f834 	bl	b6dfc <_Z22__fetch_global_Serial1v>
   b6d94:	7c00      	ldrb	r0, [r0, #16]
   b6d96:	f7fe f9e7 	bl	b5168 <hal_usart_is_enabled>
   b6d9a:	e7f2      	b.n	b6d82 <pinAvailable+0x5a>
   b6d9c:	2003e720 	.word	0x2003e720
   b6da0:	2003e724 	.word	0x2003e724

000b6da4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6da4:	2823      	cmp	r0, #35	; 0x23
{
   b6da6:	b538      	push	{r3, r4, r5, lr}
   b6da8:	4604      	mov	r4, r0
   b6daa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6dac:	d80a      	bhi.n	b6dc4 <pinMode+0x20>
   b6dae:	29ff      	cmp	r1, #255	; 0xff
   b6db0:	d008      	beq.n	b6dc4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6db2:	f7ff ffb9 	bl	b6d28 <pinAvailable>
   b6db6:	b128      	cbz	r0, b6dc4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6db8:	4629      	mov	r1, r5
   b6dba:	4620      	mov	r0, r4
}
   b6dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6dc0:	f7fe b932 	b.w	b5028 <HAL_Pin_Mode>
}
   b6dc4:	bd38      	pop	{r3, r4, r5, pc}

000b6dc6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6dc6:	4770      	bx	lr

000b6dc8 <_Z20acquireSerial1Bufferv>:
{
   b6dc8:	b538      	push	{r3, r4, r5, lr}
   b6dca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6dcc:	2514      	movs	r5, #20
   b6dce:	462a      	mov	r2, r5
   b6dd0:	2100      	movs	r1, #0
   b6dd2:	f000 fe4e 	bl	b7a72 <memset>
   b6dd6:	8025      	strh	r5, [r4, #0]
   b6dd8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6dda:	4907      	ldr	r1, [pc, #28]	; (b6df8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6ddc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6dde:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6de0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6de2:	f000 f86b 	bl	b6ebc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6de6:	4904      	ldr	r1, [pc, #16]	; (b6df8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6de8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6dea:	4628      	mov	r0, r5
   b6dec:	f000 f866 	bl	b6ebc <_ZnajRKSt9nothrow_t>
    };
   b6df0:	60e0      	str	r0, [r4, #12]
}
   b6df2:	4620      	mov	r0, r4
   b6df4:	bd38      	pop	{r3, r4, r5, pc}
   b6df6:	bf00      	nop
   b6df8:	000b9fac 	.word	0x000b9fac

000b6dfc <_Z22__fetch_global_Serial1v>:
{
   b6dfc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6dfe:	4d0e      	ldr	r5, [pc, #56]	; (b6e38 <_Z22__fetch_global_Serial1v+0x3c>)
   b6e00:	7829      	ldrb	r1, [r5, #0]
   b6e02:	f3bf 8f5b 	dmb	ish
   b6e06:	f011 0401 	ands.w	r4, r1, #1
{
   b6e0a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6e0c:	d111      	bne.n	b6e32 <_Z22__fetch_global_Serial1v+0x36>
   b6e0e:	4628      	mov	r0, r5
   b6e10:	f7fd f949 	bl	b40a6 <__cxa_guard_acquire>
   b6e14:	b168      	cbz	r0, b6e32 <_Z22__fetch_global_Serial1v+0x36>
   b6e16:	a801      	add	r0, sp, #4
   b6e18:	f7ff ffd6 	bl	b6dc8 <_Z20acquireSerial1Bufferv>
   b6e1c:	aa01      	add	r2, sp, #4
   b6e1e:	4621      	mov	r1, r4
   b6e20:	4806      	ldr	r0, [pc, #24]	; (b6e3c <_Z22__fetch_global_Serial1v+0x40>)
   b6e22:	f7ff fb5f 	bl	b64e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6e26:	4628      	mov	r0, r5
   b6e28:	f7fd f942 	bl	b40b0 <__cxa_guard_release>
   b6e2c:	4804      	ldr	r0, [pc, #16]	; (b6e40 <_Z22__fetch_global_Serial1v+0x44>)
   b6e2e:	f000 fdf1 	bl	b7a14 <atexit>
    return serial1;
}
   b6e32:	4802      	ldr	r0, [pc, #8]	; (b6e3c <_Z22__fetch_global_Serial1v+0x40>)
   b6e34:	b007      	add	sp, #28
   b6e36:	bd30      	pop	{r4, r5, pc}
   b6e38:	2003e72c 	.word	0x2003e72c
   b6e3c:	2003e730 	.word	0x2003e730
   b6e40:	000b6dc7 	.word	0x000b6dc7

000b6e44 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6e44:	4770      	bx	lr
	...

000b6e48 <_Z17acquireWireBufferv>:
{
   b6e48:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6e4a:	2520      	movs	r5, #32
   b6e4c:	2314      	movs	r3, #20
{
   b6e4e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6e50:	6003      	str	r3, [r0, #0]
   b6e52:	6085      	str	r5, [r0, #8]
   b6e54:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6e56:	4906      	ldr	r1, [pc, #24]	; (b6e70 <_Z17acquireWireBufferv+0x28>)
   b6e58:	4628      	mov	r0, r5
   b6e5a:	f000 f82f 	bl	b6ebc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6e5e:	4904      	ldr	r1, [pc, #16]	; (b6e70 <_Z17acquireWireBufferv+0x28>)
	};
   b6e60:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6e62:	4628      	mov	r0, r5
   b6e64:	f000 f82a 	bl	b6ebc <_ZnajRKSt9nothrow_t>
	};
   b6e68:	60e0      	str	r0, [r4, #12]
}
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	bd38      	pop	{r3, r4, r5, pc}
   b6e6e:	bf00      	nop
   b6e70:	000b9fac 	.word	0x000b9fac

000b6e74 <_Z19__fetch_global_Wirev>:
{
   b6e74:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6e76:	4d0e      	ldr	r5, [pc, #56]	; (b6eb0 <_Z19__fetch_global_Wirev+0x3c>)
   b6e78:	7829      	ldrb	r1, [r5, #0]
   b6e7a:	f3bf 8f5b 	dmb	ish
   b6e7e:	f011 0401 	ands.w	r4, r1, #1
{
   b6e82:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6e84:	d111      	bne.n	b6eaa <_Z19__fetch_global_Wirev+0x36>
   b6e86:	4628      	mov	r0, r5
   b6e88:	f7fd f90d 	bl	b40a6 <__cxa_guard_acquire>
   b6e8c:	b168      	cbz	r0, b6eaa <_Z19__fetch_global_Wirev+0x36>
   b6e8e:	a801      	add	r0, sp, #4
   b6e90:	f7ff ffda 	bl	b6e48 <_Z17acquireWireBufferv>
   b6e94:	aa01      	add	r2, sp, #4
   b6e96:	4621      	mov	r1, r4
   b6e98:	4806      	ldr	r0, [pc, #24]	; (b6eb4 <_Z19__fetch_global_Wirev+0x40>)
   b6e9a:	f7ff fb77 	bl	b658c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6e9e:	4628      	mov	r0, r5
   b6ea0:	f7fd f906 	bl	b40b0 <__cxa_guard_release>
   b6ea4:	4804      	ldr	r0, [pc, #16]	; (b6eb8 <_Z19__fetch_global_Wirev+0x44>)
   b6ea6:	f000 fdb5 	bl	b7a14 <atexit>
	return wire;
}
   b6eaa:	4802      	ldr	r0, [pc, #8]	; (b6eb4 <_Z19__fetch_global_Wirev+0x40>)
   b6eac:	b007      	add	sp, #28
   b6eae:	bd30      	pop	{r4, r5, pc}
   b6eb0:	2003e748 	.word	0x2003e748
   b6eb4:	2003e74c 	.word	0x2003e74c
   b6eb8:	000b6e45 	.word	0x000b6e45

000b6ebc <_ZnajRKSt9nothrow_t>:
   b6ebc:	f7fd b8ed 	b.w	b409a <_Znaj>

000b6ec0 <_ZSt25__throw_bad_function_callv>:
   b6ec0:	b508      	push	{r3, lr}
   b6ec2:	f7fe fb1d 	bl	b5500 <abort>
	...

000b6ec8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6ec8:	4901      	ldr	r1, [pc, #4]	; (b6ed0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6eca:	f000 b8f9 	b.w	b70c0 <_ZNKSt9type_infoeqERKS_>
   b6ece:	bf00      	nop
   b6ed0:	000b9fc8 	.word	0x000b9fc8

000b6ed4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6ed6:	2400      	movs	r4, #0
   b6ed8:	2310      	movs	r3, #16
   b6eda:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6ede:	6803      	ldr	r3, [r0, #0]
   b6ee0:	4615      	mov	r5, r2
   b6ee2:	699e      	ldr	r6, [r3, #24]
   b6ee4:	6812      	ldr	r2, [r2, #0]
   b6ee6:	466b      	mov	r3, sp
   b6ee8:	e9cd 4400 	strd	r4, r4, [sp]
   b6eec:	47b0      	blx	r6
   b6eee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6ef2:	f003 0306 	and.w	r3, r3, #6
   b6ef6:	2b06      	cmp	r3, #6
   b6ef8:	bf03      	ittte	eq
   b6efa:	9b00      	ldreq	r3, [sp, #0]
   b6efc:	602b      	streq	r3, [r5, #0]
   b6efe:	2001      	moveq	r0, #1
   b6f00:	4620      	movne	r0, r4
   b6f02:	b004      	add	sp, #16
   b6f04:	bd70      	pop	{r4, r5, r6, pc}

000b6f06 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6f06:	9800      	ldr	r0, [sp, #0]
   b6f08:	4290      	cmp	r0, r2
   b6f0a:	bf14      	ite	ne
   b6f0c:	2001      	movne	r0, #1
   b6f0e:	2006      	moveq	r0, #6
   b6f10:	4770      	bx	lr
	...

000b6f14 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6f14:	b510      	push	{r4, lr}
   b6f16:	4b03      	ldr	r3, [pc, #12]	; (b6f24 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6f18:	6003      	str	r3, [r0, #0]
   b6f1a:	4604      	mov	r4, r0
   b6f1c:	f000 f8cd 	bl	b70ba <_ZNSt9type_infoD1Ev>
   b6f20:	4620      	mov	r0, r4
   b6f22:	bd10      	pop	{r4, pc}
   b6f24:	000ba008 	.word	0x000ba008

000b6f28 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6f28:	b510      	push	{r4, lr}
   b6f2a:	4604      	mov	r4, r0
   b6f2c:	f7ff fff2 	bl	b6f14 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6f30:	4620      	mov	r0, r4
   b6f32:	2108      	movs	r1, #8
   b6f34:	f7fd f8b5 	bl	b40a2 <_ZdlPvj>
   b6f38:	4620      	mov	r0, r4
   b6f3a:	bd10      	pop	{r4, pc}

000b6f3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6f40:	461f      	mov	r7, r3
   b6f42:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6f46:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6f4a:	4598      	cmp	r8, r3
   b6f4c:	4606      	mov	r6, r0
   b6f4e:	4615      	mov	r5, r2
   b6f50:	d107      	bne.n	b6f62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6f52:	9907      	ldr	r1, [sp, #28]
   b6f54:	f000 f8b4 	bl	b70c0 <_ZNKSt9type_infoeqERKS_>
   b6f58:	b118      	cbz	r0, b6f62 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6f5a:	7165      	strb	r5, [r4, #5]
   b6f5c:	2000      	movs	r0, #0
   b6f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6f62:	4639      	mov	r1, r7
   b6f64:	4630      	mov	r0, r6
   b6f66:	f000 f8ab 	bl	b70c0 <_ZNKSt9type_infoeqERKS_>
   b6f6a:	2800      	cmp	r0, #0
   b6f6c:	d0f6      	beq.n	b6f5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6f6e:	2301      	movs	r3, #1
   b6f70:	f8c4 8000 	str.w	r8, [r4]
   b6f74:	7125      	strb	r5, [r4, #4]
   b6f76:	71a3      	strb	r3, [r4, #6]
   b6f78:	e7f0      	b.n	b6f5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6f7a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6f7a:	b538      	push	{r3, r4, r5, lr}
   b6f7c:	4615      	mov	r5, r2
   b6f7e:	461c      	mov	r4, r3
   b6f80:	f000 f89e 	bl	b70c0 <_ZNKSt9type_infoeqERKS_>
   b6f84:	b120      	cbz	r0, b6f90 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6f86:	2308      	movs	r3, #8
   b6f88:	60e3      	str	r3, [r4, #12]
   b6f8a:	2306      	movs	r3, #6
   b6f8c:	6025      	str	r5, [r4, #0]
   b6f8e:	7123      	strb	r3, [r4, #4]
   b6f90:	bd38      	pop	{r3, r4, r5, pc}

000b6f92 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f94:	4605      	mov	r5, r0
   b6f96:	460c      	mov	r4, r1
   b6f98:	9201      	str	r2, [sp, #4]
   b6f9a:	461e      	mov	r6, r3
   b6f9c:	f000 f890 	bl	b70c0 <_ZNKSt9type_infoeqERKS_>
   b6fa0:	b950      	cbnz	r0, b6fb8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6fa2:	2e03      	cmp	r6, #3
   b6fa4:	d808      	bhi.n	b6fb8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6fa6:	6823      	ldr	r3, [r4, #0]
   b6fa8:	9a01      	ldr	r2, [sp, #4]
   b6faa:	695b      	ldr	r3, [r3, #20]
   b6fac:	4629      	mov	r1, r5
   b6fae:	4620      	mov	r0, r4
   b6fb0:	b002      	add	sp, #8
   b6fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6fb6:	4718      	bx	r3
   b6fb8:	b002      	add	sp, #8
   b6fba:	bd70      	pop	{r4, r5, r6, pc}

000b6fbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6fbc:	b510      	push	{r4, lr}
   b6fbe:	4b03      	ldr	r3, [pc, #12]	; (b6fcc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6fc0:	6003      	str	r3, [r0, #0]
   b6fc2:	4604      	mov	r4, r0
   b6fc4:	f7ff ffa6 	bl	b6f14 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6fc8:	4620      	mov	r0, r4
   b6fca:	bd10      	pop	{r4, pc}
   b6fcc:	000ba068 	.word	0x000ba068

000b6fd0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6fd0:	b510      	push	{r4, lr}
   b6fd2:	4604      	mov	r4, r0
   b6fd4:	f7ff fff2 	bl	b6fbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6fd8:	4620      	mov	r0, r4
   b6fda:	210c      	movs	r1, #12
   b6fdc:	f7fd f861 	bl	b40a2 <_ZdlPvj>
   b6fe0:	4620      	mov	r0, r4
   b6fe2:	bd10      	pop	{r4, pc}

000b6fe4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6fe6:	9f08      	ldr	r7, [sp, #32]
   b6fe8:	4297      	cmp	r7, r2
   b6fea:	4605      	mov	r5, r0
   b6fec:	460e      	mov	r6, r1
   b6fee:	4614      	mov	r4, r2
   b6ff0:	d00a      	beq.n	b7008 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6ff2:	68a8      	ldr	r0, [r5, #8]
   b6ff4:	6802      	ldr	r2, [r0, #0]
   b6ff6:	9708      	str	r7, [sp, #32]
   b6ff8:	6a15      	ldr	r5, [r2, #32]
   b6ffa:	4631      	mov	r1, r6
   b6ffc:	4622      	mov	r2, r4
   b6ffe:	46ac      	mov	ip, r5
   b7000:	b003      	add	sp, #12
   b7002:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7006:	4760      	bx	ip
   b7008:	4619      	mov	r1, r3
   b700a:	9301      	str	r3, [sp, #4]
   b700c:	f000 f858 	bl	b70c0 <_ZNKSt9type_infoeqERKS_>
   b7010:	9b01      	ldr	r3, [sp, #4]
   b7012:	2800      	cmp	r0, #0
   b7014:	d0ed      	beq.n	b6ff2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7016:	2006      	movs	r0, #6
   b7018:	b003      	add	sp, #12
   b701a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b701c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b701c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7020:	460d      	mov	r5, r1
   b7022:	4619      	mov	r1, r3
   b7024:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7028:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b702c:	4681      	mov	r9, r0
   b702e:	4617      	mov	r7, r2
   b7030:	4698      	mov	r8, r3
   b7032:	f000 f845 	bl	b70c0 <_ZNKSt9type_infoeqERKS_>
   b7036:	b190      	cbz	r0, b705e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7038:	2d00      	cmp	r5, #0
   b703a:	6034      	str	r4, [r6, #0]
   b703c:	7137      	strb	r7, [r6, #4]
   b703e:	db09      	blt.n	b7054 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7040:	1961      	adds	r1, r4, r5
   b7042:	458a      	cmp	sl, r1
   b7044:	bf0c      	ite	eq
   b7046:	2106      	moveq	r1, #6
   b7048:	2101      	movne	r1, #1
   b704a:	71b1      	strb	r1, [r6, #6]
   b704c:	2000      	movs	r0, #0
   b704e:	b001      	add	sp, #4
   b7050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7054:	3502      	adds	r5, #2
   b7056:	d1f9      	bne.n	b704c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7058:	2301      	movs	r3, #1
   b705a:	71b3      	strb	r3, [r6, #6]
   b705c:	e7f6      	b.n	b704c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b705e:	4554      	cmp	r4, sl
   b7060:	d106      	bne.n	b7070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7062:	4659      	mov	r1, fp
   b7064:	4648      	mov	r0, r9
   b7066:	f000 f82b 	bl	b70c0 <_ZNKSt9type_infoeqERKS_>
   b706a:	b108      	cbz	r0, b7070 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b706c:	7177      	strb	r7, [r6, #5]
   b706e:	e7ed      	b.n	b704c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7070:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7074:	6803      	ldr	r3, [r0, #0]
   b7076:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b707a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b707e:	69dc      	ldr	r4, [r3, #28]
   b7080:	463a      	mov	r2, r7
   b7082:	4643      	mov	r3, r8
   b7084:	4629      	mov	r1, r5
   b7086:	46a4      	mov	ip, r4
   b7088:	b001      	add	sp, #4
   b708a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b708e:	4760      	bx	ip

000b7090 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7094:	4607      	mov	r7, r0
   b7096:	460c      	mov	r4, r1
   b7098:	4615      	mov	r5, r2
   b709a:	461e      	mov	r6, r3
   b709c:	f7ff ff6d 	bl	b6f7a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b70a0:	b948      	cbnz	r0, b70b6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b70a2:	68b8      	ldr	r0, [r7, #8]
   b70a4:	6803      	ldr	r3, [r0, #0]
   b70a6:	699f      	ldr	r7, [r3, #24]
   b70a8:	462a      	mov	r2, r5
   b70aa:	4633      	mov	r3, r6
   b70ac:	4621      	mov	r1, r4
   b70ae:	46bc      	mov	ip, r7
   b70b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b70b4:	4760      	bx	ip
   b70b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b70ba <_ZNSt9type_infoD1Ev>:
   b70ba:	4770      	bx	lr

000b70bc <_ZNKSt9type_info14__is_pointer_pEv>:
   b70bc:	2000      	movs	r0, #0
   b70be:	4770      	bx	lr

000b70c0 <_ZNKSt9type_infoeqERKS_>:
   b70c0:	4281      	cmp	r1, r0
   b70c2:	b508      	push	{r3, lr}
   b70c4:	d00e      	beq.n	b70e4 <_ZNKSt9type_infoeqERKS_+0x24>
   b70c6:	6840      	ldr	r0, [r0, #4]
   b70c8:	7803      	ldrb	r3, [r0, #0]
   b70ca:	2b2a      	cmp	r3, #42	; 0x2a
   b70cc:	d00c      	beq.n	b70e8 <_ZNKSt9type_infoeqERKS_+0x28>
   b70ce:	6849      	ldr	r1, [r1, #4]
   b70d0:	780b      	ldrb	r3, [r1, #0]
   b70d2:	2b2a      	cmp	r3, #42	; 0x2a
   b70d4:	bf08      	it	eq
   b70d6:	3101      	addeq	r1, #1
   b70d8:	f000 fd11 	bl	b7afe <strcmp>
   b70dc:	fab0 f080 	clz	r0, r0
   b70e0:	0940      	lsrs	r0, r0, #5
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	2001      	movs	r0, #1
   b70e6:	e7fc      	b.n	b70e2 <_ZNKSt9type_infoeqERKS_+0x22>
   b70e8:	2000      	movs	r0, #0
   b70ea:	e7fa      	b.n	b70e2 <_ZNKSt9type_infoeqERKS_+0x22>

000b70ec <__aeabi_drsub>:
   b70ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b70f0:	e002      	b.n	b70f8 <__adddf3>
   b70f2:	bf00      	nop

000b70f4 <__aeabi_dsub>:
   b70f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b70f8 <__adddf3>:
   b70f8:	b530      	push	{r4, r5, lr}
   b70fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b70fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7102:	ea94 0f05 	teq	r4, r5
   b7106:	bf08      	it	eq
   b7108:	ea90 0f02 	teqeq	r0, r2
   b710c:	bf1f      	itttt	ne
   b710e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7112:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7116:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b711a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b711e:	f000 80e2 	beq.w	b72e6 <__adddf3+0x1ee>
   b7122:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7126:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b712a:	bfb8      	it	lt
   b712c:	426d      	neglt	r5, r5
   b712e:	dd0c      	ble.n	b714a <__adddf3+0x52>
   b7130:	442c      	add	r4, r5
   b7132:	ea80 0202 	eor.w	r2, r0, r2
   b7136:	ea81 0303 	eor.w	r3, r1, r3
   b713a:	ea82 0000 	eor.w	r0, r2, r0
   b713e:	ea83 0101 	eor.w	r1, r3, r1
   b7142:	ea80 0202 	eor.w	r2, r0, r2
   b7146:	ea81 0303 	eor.w	r3, r1, r3
   b714a:	2d36      	cmp	r5, #54	; 0x36
   b714c:	bf88      	it	hi
   b714e:	bd30      	pophi	{r4, r5, pc}
   b7150:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7154:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7158:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b715c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7160:	d002      	beq.n	b7168 <__adddf3+0x70>
   b7162:	4240      	negs	r0, r0
   b7164:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7168:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b716c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7170:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7174:	d002      	beq.n	b717c <__adddf3+0x84>
   b7176:	4252      	negs	r2, r2
   b7178:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b717c:	ea94 0f05 	teq	r4, r5
   b7180:	f000 80a7 	beq.w	b72d2 <__adddf3+0x1da>
   b7184:	f1a4 0401 	sub.w	r4, r4, #1
   b7188:	f1d5 0e20 	rsbs	lr, r5, #32
   b718c:	db0d      	blt.n	b71aa <__adddf3+0xb2>
   b718e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7192:	fa22 f205 	lsr.w	r2, r2, r5
   b7196:	1880      	adds	r0, r0, r2
   b7198:	f141 0100 	adc.w	r1, r1, #0
   b719c:	fa03 f20e 	lsl.w	r2, r3, lr
   b71a0:	1880      	adds	r0, r0, r2
   b71a2:	fa43 f305 	asr.w	r3, r3, r5
   b71a6:	4159      	adcs	r1, r3
   b71a8:	e00e      	b.n	b71c8 <__adddf3+0xd0>
   b71aa:	f1a5 0520 	sub.w	r5, r5, #32
   b71ae:	f10e 0e20 	add.w	lr, lr, #32
   b71b2:	2a01      	cmp	r2, #1
   b71b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b71b8:	bf28      	it	cs
   b71ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   b71be:	fa43 f305 	asr.w	r3, r3, r5
   b71c2:	18c0      	adds	r0, r0, r3
   b71c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b71c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b71cc:	d507      	bpl.n	b71de <__adddf3+0xe6>
   b71ce:	f04f 0e00 	mov.w	lr, #0
   b71d2:	f1dc 0c00 	rsbs	ip, ip, #0
   b71d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b71da:	eb6e 0101 	sbc.w	r1, lr, r1
   b71de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b71e2:	d31b      	bcc.n	b721c <__adddf3+0x124>
   b71e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b71e8:	d30c      	bcc.n	b7204 <__adddf3+0x10c>
   b71ea:	0849      	lsrs	r1, r1, #1
   b71ec:	ea5f 0030 	movs.w	r0, r0, rrx
   b71f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b71f4:	f104 0401 	add.w	r4, r4, #1
   b71f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b71fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7200:	f080 809a 	bcs.w	b7338 <__adddf3+0x240>
   b7204:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7208:	bf08      	it	eq
   b720a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b720e:	f150 0000 	adcs.w	r0, r0, #0
   b7212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7216:	ea41 0105 	orr.w	r1, r1, r5
   b721a:	bd30      	pop	{r4, r5, pc}
   b721c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7220:	4140      	adcs	r0, r0
   b7222:	eb41 0101 	adc.w	r1, r1, r1
   b7226:	3c01      	subs	r4, #1
   b7228:	bf28      	it	cs
   b722a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b722e:	d2e9      	bcs.n	b7204 <__adddf3+0x10c>
   b7230:	f091 0f00 	teq	r1, #0
   b7234:	bf04      	itt	eq
   b7236:	4601      	moveq	r1, r0
   b7238:	2000      	moveq	r0, #0
   b723a:	fab1 f381 	clz	r3, r1
   b723e:	bf08      	it	eq
   b7240:	3320      	addeq	r3, #32
   b7242:	f1a3 030b 	sub.w	r3, r3, #11
   b7246:	f1b3 0220 	subs.w	r2, r3, #32
   b724a:	da0c      	bge.n	b7266 <__adddf3+0x16e>
   b724c:	320c      	adds	r2, #12
   b724e:	dd08      	ble.n	b7262 <__adddf3+0x16a>
   b7250:	f102 0c14 	add.w	ip, r2, #20
   b7254:	f1c2 020c 	rsb	r2, r2, #12
   b7258:	fa01 f00c 	lsl.w	r0, r1, ip
   b725c:	fa21 f102 	lsr.w	r1, r1, r2
   b7260:	e00c      	b.n	b727c <__adddf3+0x184>
   b7262:	f102 0214 	add.w	r2, r2, #20
   b7266:	bfd8      	it	le
   b7268:	f1c2 0c20 	rsble	ip, r2, #32
   b726c:	fa01 f102 	lsl.w	r1, r1, r2
   b7270:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7274:	bfdc      	itt	le
   b7276:	ea41 010c 	orrle.w	r1, r1, ip
   b727a:	4090      	lslle	r0, r2
   b727c:	1ae4      	subs	r4, r4, r3
   b727e:	bfa2      	ittt	ge
   b7280:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7284:	4329      	orrge	r1, r5
   b7286:	bd30      	popge	{r4, r5, pc}
   b7288:	ea6f 0404 	mvn.w	r4, r4
   b728c:	3c1f      	subs	r4, #31
   b728e:	da1c      	bge.n	b72ca <__adddf3+0x1d2>
   b7290:	340c      	adds	r4, #12
   b7292:	dc0e      	bgt.n	b72b2 <__adddf3+0x1ba>
   b7294:	f104 0414 	add.w	r4, r4, #20
   b7298:	f1c4 0220 	rsb	r2, r4, #32
   b729c:	fa20 f004 	lsr.w	r0, r0, r4
   b72a0:	fa01 f302 	lsl.w	r3, r1, r2
   b72a4:	ea40 0003 	orr.w	r0, r0, r3
   b72a8:	fa21 f304 	lsr.w	r3, r1, r4
   b72ac:	ea45 0103 	orr.w	r1, r5, r3
   b72b0:	bd30      	pop	{r4, r5, pc}
   b72b2:	f1c4 040c 	rsb	r4, r4, #12
   b72b6:	f1c4 0220 	rsb	r2, r4, #32
   b72ba:	fa20 f002 	lsr.w	r0, r0, r2
   b72be:	fa01 f304 	lsl.w	r3, r1, r4
   b72c2:	ea40 0003 	orr.w	r0, r0, r3
   b72c6:	4629      	mov	r1, r5
   b72c8:	bd30      	pop	{r4, r5, pc}
   b72ca:	fa21 f004 	lsr.w	r0, r1, r4
   b72ce:	4629      	mov	r1, r5
   b72d0:	bd30      	pop	{r4, r5, pc}
   b72d2:	f094 0f00 	teq	r4, #0
   b72d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b72da:	bf06      	itte	eq
   b72dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b72e0:	3401      	addeq	r4, #1
   b72e2:	3d01      	subne	r5, #1
   b72e4:	e74e      	b.n	b7184 <__adddf3+0x8c>
   b72e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b72ea:	bf18      	it	ne
   b72ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b72f0:	d029      	beq.n	b7346 <__adddf3+0x24e>
   b72f2:	ea94 0f05 	teq	r4, r5
   b72f6:	bf08      	it	eq
   b72f8:	ea90 0f02 	teqeq	r0, r2
   b72fc:	d005      	beq.n	b730a <__adddf3+0x212>
   b72fe:	ea54 0c00 	orrs.w	ip, r4, r0
   b7302:	bf04      	itt	eq
   b7304:	4619      	moveq	r1, r3
   b7306:	4610      	moveq	r0, r2
   b7308:	bd30      	pop	{r4, r5, pc}
   b730a:	ea91 0f03 	teq	r1, r3
   b730e:	bf1e      	ittt	ne
   b7310:	2100      	movne	r1, #0
   b7312:	2000      	movne	r0, #0
   b7314:	bd30      	popne	{r4, r5, pc}
   b7316:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b731a:	d105      	bne.n	b7328 <__adddf3+0x230>
   b731c:	0040      	lsls	r0, r0, #1
   b731e:	4149      	adcs	r1, r1
   b7320:	bf28      	it	cs
   b7322:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7326:	bd30      	pop	{r4, r5, pc}
   b7328:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b732c:	bf3c      	itt	cc
   b732e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7332:	bd30      	popcc	{r4, r5, pc}
   b7334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7338:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b733c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7340:	f04f 0000 	mov.w	r0, #0
   b7344:	bd30      	pop	{r4, r5, pc}
   b7346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b734a:	bf1a      	itte	ne
   b734c:	4619      	movne	r1, r3
   b734e:	4610      	movne	r0, r2
   b7350:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7354:	bf1c      	itt	ne
   b7356:	460b      	movne	r3, r1
   b7358:	4602      	movne	r2, r0
   b735a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b735e:	bf06      	itte	eq
   b7360:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7364:	ea91 0f03 	teqeq	r1, r3
   b7368:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b736c:	bd30      	pop	{r4, r5, pc}
   b736e:	bf00      	nop

000b7370 <__aeabi_ui2d>:
   b7370:	f090 0f00 	teq	r0, #0
   b7374:	bf04      	itt	eq
   b7376:	2100      	moveq	r1, #0
   b7378:	4770      	bxeq	lr
   b737a:	b530      	push	{r4, r5, lr}
   b737c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7380:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7384:	f04f 0500 	mov.w	r5, #0
   b7388:	f04f 0100 	mov.w	r1, #0
   b738c:	e750      	b.n	b7230 <__adddf3+0x138>
   b738e:	bf00      	nop

000b7390 <__aeabi_i2d>:
   b7390:	f090 0f00 	teq	r0, #0
   b7394:	bf04      	itt	eq
   b7396:	2100      	moveq	r1, #0
   b7398:	4770      	bxeq	lr
   b739a:	b530      	push	{r4, r5, lr}
   b739c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b73a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b73a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b73a8:	bf48      	it	mi
   b73aa:	4240      	negmi	r0, r0
   b73ac:	f04f 0100 	mov.w	r1, #0
   b73b0:	e73e      	b.n	b7230 <__adddf3+0x138>
   b73b2:	bf00      	nop

000b73b4 <__aeabi_f2d>:
   b73b4:	0042      	lsls	r2, r0, #1
   b73b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b73ba:	ea4f 0131 	mov.w	r1, r1, rrx
   b73be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b73c2:	bf1f      	itttt	ne
   b73c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b73c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b73cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b73d0:	4770      	bxne	lr
   b73d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b73d6:	bf08      	it	eq
   b73d8:	4770      	bxeq	lr
   b73da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b73de:	bf04      	itt	eq
   b73e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b73e4:	4770      	bxeq	lr
   b73e6:	b530      	push	{r4, r5, lr}
   b73e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b73ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b73f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b73f4:	e71c      	b.n	b7230 <__adddf3+0x138>
   b73f6:	bf00      	nop

000b73f8 <__aeabi_ul2d>:
   b73f8:	ea50 0201 	orrs.w	r2, r0, r1
   b73fc:	bf08      	it	eq
   b73fe:	4770      	bxeq	lr
   b7400:	b530      	push	{r4, r5, lr}
   b7402:	f04f 0500 	mov.w	r5, #0
   b7406:	e00a      	b.n	b741e <__aeabi_l2d+0x16>

000b7408 <__aeabi_l2d>:
   b7408:	ea50 0201 	orrs.w	r2, r0, r1
   b740c:	bf08      	it	eq
   b740e:	4770      	bxeq	lr
   b7410:	b530      	push	{r4, r5, lr}
   b7412:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7416:	d502      	bpl.n	b741e <__aeabi_l2d+0x16>
   b7418:	4240      	negs	r0, r0
   b741a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b741e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7422:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7426:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b742a:	f43f aed8 	beq.w	b71de <__adddf3+0xe6>
   b742e:	f04f 0203 	mov.w	r2, #3
   b7432:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7436:	bf18      	it	ne
   b7438:	3203      	addne	r2, #3
   b743a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b743e:	bf18      	it	ne
   b7440:	3203      	addne	r2, #3
   b7442:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7446:	f1c2 0320 	rsb	r3, r2, #32
   b744a:	fa00 fc03 	lsl.w	ip, r0, r3
   b744e:	fa20 f002 	lsr.w	r0, r0, r2
   b7452:	fa01 fe03 	lsl.w	lr, r1, r3
   b7456:	ea40 000e 	orr.w	r0, r0, lr
   b745a:	fa21 f102 	lsr.w	r1, r1, r2
   b745e:	4414      	add	r4, r2
   b7460:	e6bd      	b.n	b71de <__adddf3+0xe6>
   b7462:	bf00      	nop

000b7464 <__aeabi_dmul>:
   b7464:	b570      	push	{r4, r5, r6, lr}
   b7466:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b746a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b746e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7472:	bf1d      	ittte	ne
   b7474:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7478:	ea94 0f0c 	teqne	r4, ip
   b747c:	ea95 0f0c 	teqne	r5, ip
   b7480:	f000 f8de 	bleq	b7640 <__aeabi_dmul+0x1dc>
   b7484:	442c      	add	r4, r5
   b7486:	ea81 0603 	eor.w	r6, r1, r3
   b748a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b748e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7492:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7496:	bf18      	it	ne
   b7498:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b749c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b74a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b74a4:	d038      	beq.n	b7518 <__aeabi_dmul+0xb4>
   b74a6:	fba0 ce02 	umull	ip, lr, r0, r2
   b74aa:	f04f 0500 	mov.w	r5, #0
   b74ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   b74b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b74b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b74ba:	f04f 0600 	mov.w	r6, #0
   b74be:	fbe1 5603 	umlal	r5, r6, r1, r3
   b74c2:	f09c 0f00 	teq	ip, #0
   b74c6:	bf18      	it	ne
   b74c8:	f04e 0e01 	orrne.w	lr, lr, #1
   b74cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b74d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b74d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b74d8:	d204      	bcs.n	b74e4 <__aeabi_dmul+0x80>
   b74da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b74de:	416d      	adcs	r5, r5
   b74e0:	eb46 0606 	adc.w	r6, r6, r6
   b74e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b74e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b74ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b74f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b74f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b74f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b74fc:	bf88      	it	hi
   b74fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7502:	d81e      	bhi.n	b7542 <__aeabi_dmul+0xde>
   b7504:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7508:	bf08      	it	eq
   b750a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b750e:	f150 0000 	adcs.w	r0, r0, #0
   b7512:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7516:	bd70      	pop	{r4, r5, r6, pc}
   b7518:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b751c:	ea46 0101 	orr.w	r1, r6, r1
   b7520:	ea40 0002 	orr.w	r0, r0, r2
   b7524:	ea81 0103 	eor.w	r1, r1, r3
   b7528:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b752c:	bfc2      	ittt	gt
   b752e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7532:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7536:	bd70      	popgt	{r4, r5, r6, pc}
   b7538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b753c:	f04f 0e00 	mov.w	lr, #0
   b7540:	3c01      	subs	r4, #1
   b7542:	f300 80ab 	bgt.w	b769c <__aeabi_dmul+0x238>
   b7546:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b754a:	bfde      	ittt	le
   b754c:	2000      	movle	r0, #0
   b754e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7552:	bd70      	pople	{r4, r5, r6, pc}
   b7554:	f1c4 0400 	rsb	r4, r4, #0
   b7558:	3c20      	subs	r4, #32
   b755a:	da35      	bge.n	b75c8 <__aeabi_dmul+0x164>
   b755c:	340c      	adds	r4, #12
   b755e:	dc1b      	bgt.n	b7598 <__aeabi_dmul+0x134>
   b7560:	f104 0414 	add.w	r4, r4, #20
   b7564:	f1c4 0520 	rsb	r5, r4, #32
   b7568:	fa00 f305 	lsl.w	r3, r0, r5
   b756c:	fa20 f004 	lsr.w	r0, r0, r4
   b7570:	fa01 f205 	lsl.w	r2, r1, r5
   b7574:	ea40 0002 	orr.w	r0, r0, r2
   b7578:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b757c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7580:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7584:	fa21 f604 	lsr.w	r6, r1, r4
   b7588:	eb42 0106 	adc.w	r1, r2, r6
   b758c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7590:	bf08      	it	eq
   b7592:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7596:	bd70      	pop	{r4, r5, r6, pc}
   b7598:	f1c4 040c 	rsb	r4, r4, #12
   b759c:	f1c4 0520 	rsb	r5, r4, #32
   b75a0:	fa00 f304 	lsl.w	r3, r0, r4
   b75a4:	fa20 f005 	lsr.w	r0, r0, r5
   b75a8:	fa01 f204 	lsl.w	r2, r1, r4
   b75ac:	ea40 0002 	orr.w	r0, r0, r2
   b75b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b75b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b75b8:	f141 0100 	adc.w	r1, r1, #0
   b75bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b75c0:	bf08      	it	eq
   b75c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b75c6:	bd70      	pop	{r4, r5, r6, pc}
   b75c8:	f1c4 0520 	rsb	r5, r4, #32
   b75cc:	fa00 f205 	lsl.w	r2, r0, r5
   b75d0:	ea4e 0e02 	orr.w	lr, lr, r2
   b75d4:	fa20 f304 	lsr.w	r3, r0, r4
   b75d8:	fa01 f205 	lsl.w	r2, r1, r5
   b75dc:	ea43 0302 	orr.w	r3, r3, r2
   b75e0:	fa21 f004 	lsr.w	r0, r1, r4
   b75e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b75e8:	fa21 f204 	lsr.w	r2, r1, r4
   b75ec:	ea20 0002 	bic.w	r0, r0, r2
   b75f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b75f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b75f8:	bf08      	it	eq
   b75fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b75fe:	bd70      	pop	{r4, r5, r6, pc}
   b7600:	f094 0f00 	teq	r4, #0
   b7604:	d10f      	bne.n	b7626 <__aeabi_dmul+0x1c2>
   b7606:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b760a:	0040      	lsls	r0, r0, #1
   b760c:	eb41 0101 	adc.w	r1, r1, r1
   b7610:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7614:	bf08      	it	eq
   b7616:	3c01      	subeq	r4, #1
   b7618:	d0f7      	beq.n	b760a <__aeabi_dmul+0x1a6>
   b761a:	ea41 0106 	orr.w	r1, r1, r6
   b761e:	f095 0f00 	teq	r5, #0
   b7622:	bf18      	it	ne
   b7624:	4770      	bxne	lr
   b7626:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b762a:	0052      	lsls	r2, r2, #1
   b762c:	eb43 0303 	adc.w	r3, r3, r3
   b7630:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7634:	bf08      	it	eq
   b7636:	3d01      	subeq	r5, #1
   b7638:	d0f7      	beq.n	b762a <__aeabi_dmul+0x1c6>
   b763a:	ea43 0306 	orr.w	r3, r3, r6
   b763e:	4770      	bx	lr
   b7640:	ea94 0f0c 	teq	r4, ip
   b7644:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7648:	bf18      	it	ne
   b764a:	ea95 0f0c 	teqne	r5, ip
   b764e:	d00c      	beq.n	b766a <__aeabi_dmul+0x206>
   b7650:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7654:	bf18      	it	ne
   b7656:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b765a:	d1d1      	bne.n	b7600 <__aeabi_dmul+0x19c>
   b765c:	ea81 0103 	eor.w	r1, r1, r3
   b7660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7664:	f04f 0000 	mov.w	r0, #0
   b7668:	bd70      	pop	{r4, r5, r6, pc}
   b766a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b766e:	bf06      	itte	eq
   b7670:	4610      	moveq	r0, r2
   b7672:	4619      	moveq	r1, r3
   b7674:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7678:	d019      	beq.n	b76ae <__aeabi_dmul+0x24a>
   b767a:	ea94 0f0c 	teq	r4, ip
   b767e:	d102      	bne.n	b7686 <__aeabi_dmul+0x222>
   b7680:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7684:	d113      	bne.n	b76ae <__aeabi_dmul+0x24a>
   b7686:	ea95 0f0c 	teq	r5, ip
   b768a:	d105      	bne.n	b7698 <__aeabi_dmul+0x234>
   b768c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7690:	bf1c      	itt	ne
   b7692:	4610      	movne	r0, r2
   b7694:	4619      	movne	r1, r3
   b7696:	d10a      	bne.n	b76ae <__aeabi_dmul+0x24a>
   b7698:	ea81 0103 	eor.w	r1, r1, r3
   b769c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b76a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b76a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b76a8:	f04f 0000 	mov.w	r0, #0
   b76ac:	bd70      	pop	{r4, r5, r6, pc}
   b76ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b76b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b76b6:	bd70      	pop	{r4, r5, r6, pc}

000b76b8 <__aeabi_ddiv>:
   b76b8:	b570      	push	{r4, r5, r6, lr}
   b76ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b76be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b76c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b76c6:	bf1d      	ittte	ne
   b76c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b76cc:	ea94 0f0c 	teqne	r4, ip
   b76d0:	ea95 0f0c 	teqne	r5, ip
   b76d4:	f000 f8a7 	bleq	b7826 <__aeabi_ddiv+0x16e>
   b76d8:	eba4 0405 	sub.w	r4, r4, r5
   b76dc:	ea81 0e03 	eor.w	lr, r1, r3
   b76e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b76e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b76e8:	f000 8088 	beq.w	b77fc <__aeabi_ddiv+0x144>
   b76ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b76f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b76f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b76f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b76fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7700:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7704:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7708:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b770c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7710:	429d      	cmp	r5, r3
   b7712:	bf08      	it	eq
   b7714:	4296      	cmpeq	r6, r2
   b7716:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b771a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b771e:	d202      	bcs.n	b7726 <__aeabi_ddiv+0x6e>
   b7720:	085b      	lsrs	r3, r3, #1
   b7722:	ea4f 0232 	mov.w	r2, r2, rrx
   b7726:	1ab6      	subs	r6, r6, r2
   b7728:	eb65 0503 	sbc.w	r5, r5, r3
   b772c:	085b      	lsrs	r3, r3, #1
   b772e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7732:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7736:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b773a:	ebb6 0e02 	subs.w	lr, r6, r2
   b773e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7742:	bf22      	ittt	cs
   b7744:	1ab6      	subcs	r6, r6, r2
   b7746:	4675      	movcs	r5, lr
   b7748:	ea40 000c 	orrcs.w	r0, r0, ip
   b774c:	085b      	lsrs	r3, r3, #1
   b774e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7752:	ebb6 0e02 	subs.w	lr, r6, r2
   b7756:	eb75 0e03 	sbcs.w	lr, r5, r3
   b775a:	bf22      	ittt	cs
   b775c:	1ab6      	subcs	r6, r6, r2
   b775e:	4675      	movcs	r5, lr
   b7760:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7764:	085b      	lsrs	r3, r3, #1
   b7766:	ea4f 0232 	mov.w	r2, r2, rrx
   b776a:	ebb6 0e02 	subs.w	lr, r6, r2
   b776e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7772:	bf22      	ittt	cs
   b7774:	1ab6      	subcs	r6, r6, r2
   b7776:	4675      	movcs	r5, lr
   b7778:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b777c:	085b      	lsrs	r3, r3, #1
   b777e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7782:	ebb6 0e02 	subs.w	lr, r6, r2
   b7786:	eb75 0e03 	sbcs.w	lr, r5, r3
   b778a:	bf22      	ittt	cs
   b778c:	1ab6      	subcs	r6, r6, r2
   b778e:	4675      	movcs	r5, lr
   b7790:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7794:	ea55 0e06 	orrs.w	lr, r5, r6
   b7798:	d018      	beq.n	b77cc <__aeabi_ddiv+0x114>
   b779a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b779e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b77a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b77a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b77aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b77ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b77b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b77b6:	d1c0      	bne.n	b773a <__aeabi_ddiv+0x82>
   b77b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b77bc:	d10b      	bne.n	b77d6 <__aeabi_ddiv+0x11e>
   b77be:	ea41 0100 	orr.w	r1, r1, r0
   b77c2:	f04f 0000 	mov.w	r0, #0
   b77c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b77ca:	e7b6      	b.n	b773a <__aeabi_ddiv+0x82>
   b77cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b77d0:	bf04      	itt	eq
   b77d2:	4301      	orreq	r1, r0
   b77d4:	2000      	moveq	r0, #0
   b77d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b77da:	bf88      	it	hi
   b77dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b77e0:	f63f aeaf 	bhi.w	b7542 <__aeabi_dmul+0xde>
   b77e4:	ebb5 0c03 	subs.w	ip, r5, r3
   b77e8:	bf04      	itt	eq
   b77ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   b77ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b77f2:	f150 0000 	adcs.w	r0, r0, #0
   b77f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b77fa:	bd70      	pop	{r4, r5, r6, pc}
   b77fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7800:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7804:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7808:	bfc2      	ittt	gt
   b780a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b780e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7812:	bd70      	popgt	{r4, r5, r6, pc}
   b7814:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7818:	f04f 0e00 	mov.w	lr, #0
   b781c:	3c01      	subs	r4, #1
   b781e:	e690      	b.n	b7542 <__aeabi_dmul+0xde>
   b7820:	ea45 0e06 	orr.w	lr, r5, r6
   b7824:	e68d      	b.n	b7542 <__aeabi_dmul+0xde>
   b7826:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b782a:	ea94 0f0c 	teq	r4, ip
   b782e:	bf08      	it	eq
   b7830:	ea95 0f0c 	teqeq	r5, ip
   b7834:	f43f af3b 	beq.w	b76ae <__aeabi_dmul+0x24a>
   b7838:	ea94 0f0c 	teq	r4, ip
   b783c:	d10a      	bne.n	b7854 <__aeabi_ddiv+0x19c>
   b783e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7842:	f47f af34 	bne.w	b76ae <__aeabi_dmul+0x24a>
   b7846:	ea95 0f0c 	teq	r5, ip
   b784a:	f47f af25 	bne.w	b7698 <__aeabi_dmul+0x234>
   b784e:	4610      	mov	r0, r2
   b7850:	4619      	mov	r1, r3
   b7852:	e72c      	b.n	b76ae <__aeabi_dmul+0x24a>
   b7854:	ea95 0f0c 	teq	r5, ip
   b7858:	d106      	bne.n	b7868 <__aeabi_ddiv+0x1b0>
   b785a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b785e:	f43f aefd 	beq.w	b765c <__aeabi_dmul+0x1f8>
   b7862:	4610      	mov	r0, r2
   b7864:	4619      	mov	r1, r3
   b7866:	e722      	b.n	b76ae <__aeabi_dmul+0x24a>
   b7868:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b786c:	bf18      	it	ne
   b786e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7872:	f47f aec5 	bne.w	b7600 <__aeabi_dmul+0x19c>
   b7876:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b787a:	f47f af0d 	bne.w	b7698 <__aeabi_dmul+0x234>
   b787e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7882:	f47f aeeb 	bne.w	b765c <__aeabi_dmul+0x1f8>
   b7886:	e712      	b.n	b76ae <__aeabi_dmul+0x24a>

000b7888 <__gedf2>:
   b7888:	f04f 3cff 	mov.w	ip, #4294967295
   b788c:	e006      	b.n	b789c <__cmpdf2+0x4>
   b788e:	bf00      	nop

000b7890 <__ledf2>:
   b7890:	f04f 0c01 	mov.w	ip, #1
   b7894:	e002      	b.n	b789c <__cmpdf2+0x4>
   b7896:	bf00      	nop

000b7898 <__cmpdf2>:
   b7898:	f04f 0c01 	mov.w	ip, #1
   b789c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b78a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b78a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b78a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b78ac:	bf18      	it	ne
   b78ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b78b2:	d01b      	beq.n	b78ec <__cmpdf2+0x54>
   b78b4:	b001      	add	sp, #4
   b78b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b78ba:	bf0c      	ite	eq
   b78bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b78c0:	ea91 0f03 	teqne	r1, r3
   b78c4:	bf02      	ittt	eq
   b78c6:	ea90 0f02 	teqeq	r0, r2
   b78ca:	2000      	moveq	r0, #0
   b78cc:	4770      	bxeq	lr
   b78ce:	f110 0f00 	cmn.w	r0, #0
   b78d2:	ea91 0f03 	teq	r1, r3
   b78d6:	bf58      	it	pl
   b78d8:	4299      	cmppl	r1, r3
   b78da:	bf08      	it	eq
   b78dc:	4290      	cmpeq	r0, r2
   b78de:	bf2c      	ite	cs
   b78e0:	17d8      	asrcs	r0, r3, #31
   b78e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b78e6:	f040 0001 	orr.w	r0, r0, #1
   b78ea:	4770      	bx	lr
   b78ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b78f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b78f4:	d102      	bne.n	b78fc <__cmpdf2+0x64>
   b78f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b78fa:	d107      	bne.n	b790c <__cmpdf2+0x74>
   b78fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7904:	d1d6      	bne.n	b78b4 <__cmpdf2+0x1c>
   b7906:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b790a:	d0d3      	beq.n	b78b4 <__cmpdf2+0x1c>
   b790c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7910:	4770      	bx	lr
   b7912:	bf00      	nop

000b7914 <__aeabi_cdrcmple>:
   b7914:	4684      	mov	ip, r0
   b7916:	4610      	mov	r0, r2
   b7918:	4662      	mov	r2, ip
   b791a:	468c      	mov	ip, r1
   b791c:	4619      	mov	r1, r3
   b791e:	4663      	mov	r3, ip
   b7920:	e000      	b.n	b7924 <__aeabi_cdcmpeq>
   b7922:	bf00      	nop

000b7924 <__aeabi_cdcmpeq>:
   b7924:	b501      	push	{r0, lr}
   b7926:	f7ff ffb7 	bl	b7898 <__cmpdf2>
   b792a:	2800      	cmp	r0, #0
   b792c:	bf48      	it	mi
   b792e:	f110 0f00 	cmnmi.w	r0, #0
   b7932:	bd01      	pop	{r0, pc}

000b7934 <__aeabi_dcmpeq>:
   b7934:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7938:	f7ff fff4 	bl	b7924 <__aeabi_cdcmpeq>
   b793c:	bf0c      	ite	eq
   b793e:	2001      	moveq	r0, #1
   b7940:	2000      	movne	r0, #0
   b7942:	f85d fb08 	ldr.w	pc, [sp], #8
   b7946:	bf00      	nop

000b7948 <__aeabi_dcmplt>:
   b7948:	f84d ed08 	str.w	lr, [sp, #-8]!
   b794c:	f7ff ffea 	bl	b7924 <__aeabi_cdcmpeq>
   b7950:	bf34      	ite	cc
   b7952:	2001      	movcc	r0, #1
   b7954:	2000      	movcs	r0, #0
   b7956:	f85d fb08 	ldr.w	pc, [sp], #8
   b795a:	bf00      	nop

000b795c <__aeabi_dcmple>:
   b795c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7960:	f7ff ffe0 	bl	b7924 <__aeabi_cdcmpeq>
   b7964:	bf94      	ite	ls
   b7966:	2001      	movls	r0, #1
   b7968:	2000      	movhi	r0, #0
   b796a:	f85d fb08 	ldr.w	pc, [sp], #8
   b796e:	bf00      	nop

000b7970 <__aeabi_dcmpge>:
   b7970:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7974:	f7ff ffce 	bl	b7914 <__aeabi_cdrcmple>
   b7978:	bf94      	ite	ls
   b797a:	2001      	movls	r0, #1
   b797c:	2000      	movhi	r0, #0
   b797e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7982:	bf00      	nop

000b7984 <__aeabi_dcmpgt>:
   b7984:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7988:	f7ff ffc4 	bl	b7914 <__aeabi_cdrcmple>
   b798c:	bf34      	ite	cc
   b798e:	2001      	movcc	r0, #1
   b7990:	2000      	movcs	r0, #0
   b7992:	f85d fb08 	ldr.w	pc, [sp], #8
   b7996:	bf00      	nop

000b7998 <__aeabi_d2uiz>:
   b7998:	004a      	lsls	r2, r1, #1
   b799a:	d211      	bcs.n	b79c0 <__aeabi_d2uiz+0x28>
   b799c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b79a0:	d211      	bcs.n	b79c6 <__aeabi_d2uiz+0x2e>
   b79a2:	d50d      	bpl.n	b79c0 <__aeabi_d2uiz+0x28>
   b79a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b79a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b79ac:	d40e      	bmi.n	b79cc <__aeabi_d2uiz+0x34>
   b79ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b79b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b79b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b79ba:	fa23 f002 	lsr.w	r0, r3, r2
   b79be:	4770      	bx	lr
   b79c0:	f04f 0000 	mov.w	r0, #0
   b79c4:	4770      	bx	lr
   b79c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b79ca:	d102      	bne.n	b79d2 <__aeabi_d2uiz+0x3a>
   b79cc:	f04f 30ff 	mov.w	r0, #4294967295
   b79d0:	4770      	bx	lr
   b79d2:	f04f 0000 	mov.w	r0, #0
   b79d6:	4770      	bx	lr

000b79d8 <__aeabi_d2ulz>:
   b79d8:	b5d0      	push	{r4, r6, r7, lr}
   b79da:	4b0c      	ldr	r3, [pc, #48]	; (b7a0c <__aeabi_d2ulz+0x34>)
   b79dc:	2200      	movs	r2, #0
   b79de:	4606      	mov	r6, r0
   b79e0:	460f      	mov	r7, r1
   b79e2:	f7ff fd3f 	bl	b7464 <__aeabi_dmul>
   b79e6:	f7ff ffd7 	bl	b7998 <__aeabi_d2uiz>
   b79ea:	4604      	mov	r4, r0
   b79ec:	f7ff fcc0 	bl	b7370 <__aeabi_ui2d>
   b79f0:	4b07      	ldr	r3, [pc, #28]	; (b7a10 <__aeabi_d2ulz+0x38>)
   b79f2:	2200      	movs	r2, #0
   b79f4:	f7ff fd36 	bl	b7464 <__aeabi_dmul>
   b79f8:	4602      	mov	r2, r0
   b79fa:	460b      	mov	r3, r1
   b79fc:	4630      	mov	r0, r6
   b79fe:	4639      	mov	r1, r7
   b7a00:	f7ff fb78 	bl	b70f4 <__aeabi_dsub>
   b7a04:	f7ff ffc8 	bl	b7998 <__aeabi_d2uiz>
   b7a08:	4621      	mov	r1, r4
   b7a0a:	bdd0      	pop	{r4, r6, r7, pc}
   b7a0c:	3df00000 	.word	0x3df00000
   b7a10:	41f00000 	.word	0x41f00000

000b7a14 <atexit>:
   b7a14:	2300      	movs	r3, #0
   b7a16:	4601      	mov	r1, r0
   b7a18:	461a      	mov	r2, r3
   b7a1a:	4618      	mov	r0, r3
   b7a1c:	f000 bfd2 	b.w	b89c4 <__register_exitproc>

000b7a20 <atof>:
   b7a20:	2100      	movs	r1, #0
   b7a22:	f000 bedb 	b.w	b87dc <strtod>

000b7a26 <atoi>:
   b7a26:	220a      	movs	r2, #10
   b7a28:	2100      	movs	r1, #0
   b7a2a:	f000 bfc1 	b.w	b89b0 <strtol>

000b7a2e <ldiv>:
   b7a2e:	2900      	cmp	r1, #0
   b7a30:	b510      	push	{r4, lr}
   b7a32:	fb91 f4f2 	sdiv	r4, r1, r2
   b7a36:	fb02 1314 	mls	r3, r2, r4, r1
   b7a3a:	db06      	blt.n	b7a4a <ldiv+0x1c>
   b7a3c:	2b00      	cmp	r3, #0
   b7a3e:	da01      	bge.n	b7a44 <ldiv+0x16>
   b7a40:	3401      	adds	r4, #1
   b7a42:	1a9b      	subs	r3, r3, r2
   b7a44:	e9c0 4300 	strd	r4, r3, [r0]
   b7a48:	bd10      	pop	{r4, pc}
   b7a4a:	2b00      	cmp	r3, #0
   b7a4c:	bfc4      	itt	gt
   b7a4e:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b7a52:	189b      	addgt	r3, r3, r2
   b7a54:	e7f6      	b.n	b7a44 <ldiv+0x16>

000b7a56 <memcpy>:
   b7a56:	440a      	add	r2, r1
   b7a58:	4291      	cmp	r1, r2
   b7a5a:	f100 33ff 	add.w	r3, r0, #4294967295
   b7a5e:	d100      	bne.n	b7a62 <memcpy+0xc>
   b7a60:	4770      	bx	lr
   b7a62:	b510      	push	{r4, lr}
   b7a64:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7a68:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7a6c:	4291      	cmp	r1, r2
   b7a6e:	d1f9      	bne.n	b7a64 <memcpy+0xe>
   b7a70:	bd10      	pop	{r4, pc}

000b7a72 <memset>:
   b7a72:	4402      	add	r2, r0
   b7a74:	4603      	mov	r3, r0
   b7a76:	4293      	cmp	r3, r2
   b7a78:	d100      	bne.n	b7a7c <memset+0xa>
   b7a7a:	4770      	bx	lr
   b7a7c:	f803 1b01 	strb.w	r1, [r3], #1
   b7a80:	e7f9      	b.n	b7a76 <memset+0x4>
	...

000b7a84 <srand>:
   b7a84:	b538      	push	{r3, r4, r5, lr}
   b7a86:	4b10      	ldr	r3, [pc, #64]	; (b7ac8 <srand+0x44>)
   b7a88:	681d      	ldr	r5, [r3, #0]
   b7a8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a8c:	4604      	mov	r4, r0
   b7a8e:	b9b3      	cbnz	r3, b7abe <srand+0x3a>
   b7a90:	2018      	movs	r0, #24
   b7a92:	f7fd fd05 	bl	b54a0 <malloc>
   b7a96:	4602      	mov	r2, r0
   b7a98:	63a8      	str	r0, [r5, #56]	; 0x38
   b7a9a:	b920      	cbnz	r0, b7aa6 <srand+0x22>
   b7a9c:	4b0b      	ldr	r3, [pc, #44]	; (b7acc <srand+0x48>)
   b7a9e:	480c      	ldr	r0, [pc, #48]	; (b7ad0 <srand+0x4c>)
   b7aa0:	2142      	movs	r1, #66	; 0x42
   b7aa2:	f7fd fd45 	bl	b5530 <__assert_func>
   b7aa6:	490b      	ldr	r1, [pc, #44]	; (b7ad4 <srand+0x50>)
   b7aa8:	4b0b      	ldr	r3, [pc, #44]	; (b7ad8 <srand+0x54>)
   b7aaa:	e9c0 1300 	strd	r1, r3, [r0]
   b7aae:	4b0b      	ldr	r3, [pc, #44]	; (b7adc <srand+0x58>)
   b7ab0:	6083      	str	r3, [r0, #8]
   b7ab2:	230b      	movs	r3, #11
   b7ab4:	8183      	strh	r3, [r0, #12]
   b7ab6:	2100      	movs	r1, #0
   b7ab8:	2001      	movs	r0, #1
   b7aba:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7abe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ac0:	2200      	movs	r2, #0
   b7ac2:	611c      	str	r4, [r3, #16]
   b7ac4:	615a      	str	r2, [r3, #20]
   b7ac6:	bd38      	pop	{r3, r4, r5, pc}
   b7ac8:	2003cd14 	.word	0x2003cd14
   b7acc:	000ba0a1 	.word	0x000ba0a1
   b7ad0:	000ba0b8 	.word	0x000ba0b8
   b7ad4:	abcd330e 	.word	0xabcd330e
   b7ad8:	e66d1234 	.word	0xe66d1234
   b7adc:	0005deec 	.word	0x0005deec

000b7ae0 <strcat>:
   b7ae0:	b510      	push	{r4, lr}
   b7ae2:	4602      	mov	r2, r0
   b7ae4:	7814      	ldrb	r4, [r2, #0]
   b7ae6:	4613      	mov	r3, r2
   b7ae8:	3201      	adds	r2, #1
   b7aea:	2c00      	cmp	r4, #0
   b7aec:	d1fa      	bne.n	b7ae4 <strcat+0x4>
   b7aee:	3b01      	subs	r3, #1
   b7af0:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7af4:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7af8:	2a00      	cmp	r2, #0
   b7afa:	d1f9      	bne.n	b7af0 <strcat+0x10>
   b7afc:	bd10      	pop	{r4, pc}

000b7afe <strcmp>:
   b7afe:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7b02:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7b06:	2a01      	cmp	r2, #1
   b7b08:	bf28      	it	cs
   b7b0a:	429a      	cmpcs	r2, r3
   b7b0c:	d0f7      	beq.n	b7afe <strcmp>
   b7b0e:	1ad0      	subs	r0, r2, r3
   b7b10:	4770      	bx	lr

000b7b12 <strcpy>:
   b7b12:	4603      	mov	r3, r0
   b7b14:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7b18:	f803 2b01 	strb.w	r2, [r3], #1
   b7b1c:	2a00      	cmp	r2, #0
   b7b1e:	d1f9      	bne.n	b7b14 <strcpy+0x2>
   b7b20:	4770      	bx	lr
	...

000b7b24 <strdup>:
   b7b24:	4b02      	ldr	r3, [pc, #8]	; (b7b30 <strdup+0xc>)
   b7b26:	4601      	mov	r1, r0
   b7b28:	6818      	ldr	r0, [r3, #0]
   b7b2a:	f000 b803 	b.w	b7b34 <_strdup_r>
   b7b2e:	bf00      	nop
   b7b30:	2003cd14 	.word	0x2003cd14

000b7b34 <_strdup_r>:
   b7b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7b36:	4604      	mov	r4, r0
   b7b38:	4608      	mov	r0, r1
   b7b3a:	460d      	mov	r5, r1
   b7b3c:	f000 f80f 	bl	b7b5e <strlen>
   b7b40:	1c42      	adds	r2, r0, #1
   b7b42:	4611      	mov	r1, r2
   b7b44:	4620      	mov	r0, r4
   b7b46:	9201      	str	r2, [sp, #4]
   b7b48:	f7fd fce2 	bl	b5510 <_malloc_r>
   b7b4c:	4604      	mov	r4, r0
   b7b4e:	b118      	cbz	r0, b7b58 <_strdup_r+0x24>
   b7b50:	9a01      	ldr	r2, [sp, #4]
   b7b52:	4629      	mov	r1, r5
   b7b54:	f7ff ff7f 	bl	b7a56 <memcpy>
   b7b58:	4620      	mov	r0, r4
   b7b5a:	b003      	add	sp, #12
   b7b5c:	bd30      	pop	{r4, r5, pc}

000b7b5e <strlen>:
   b7b5e:	4603      	mov	r3, r0
   b7b60:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7b64:	2a00      	cmp	r2, #0
   b7b66:	d1fb      	bne.n	b7b60 <strlen+0x2>
   b7b68:	1a18      	subs	r0, r3, r0
   b7b6a:	3801      	subs	r0, #1
   b7b6c:	4770      	bx	lr

000b7b6e <strncmp>:
   b7b6e:	b510      	push	{r4, lr}
   b7b70:	b17a      	cbz	r2, b7b92 <strncmp+0x24>
   b7b72:	4603      	mov	r3, r0
   b7b74:	3901      	subs	r1, #1
   b7b76:	1884      	adds	r4, r0, r2
   b7b78:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7b7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7b80:	4290      	cmp	r0, r2
   b7b82:	d101      	bne.n	b7b88 <strncmp+0x1a>
   b7b84:	42a3      	cmp	r3, r4
   b7b86:	d101      	bne.n	b7b8c <strncmp+0x1e>
   b7b88:	1a80      	subs	r0, r0, r2
   b7b8a:	bd10      	pop	{r4, pc}
   b7b8c:	2800      	cmp	r0, #0
   b7b8e:	d1f3      	bne.n	b7b78 <strncmp+0xa>
   b7b90:	e7fa      	b.n	b7b88 <strncmp+0x1a>
   b7b92:	4610      	mov	r0, r2
   b7b94:	e7f9      	b.n	b7b8a <strncmp+0x1c>

000b7b96 <sulp>:
   b7b96:	b570      	push	{r4, r5, r6, lr}
   b7b98:	4604      	mov	r4, r0
   b7b9a:	460d      	mov	r5, r1
   b7b9c:	ec45 4b10 	vmov	d0, r4, r5
   b7ba0:	4616      	mov	r6, r2
   b7ba2:	f001 fe69 	bl	b9878 <__ulp>
   b7ba6:	ec51 0b10 	vmov	r0, r1, d0
   b7baa:	b17e      	cbz	r6, b7bcc <sulp+0x36>
   b7bac:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b7bb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7bb4:	2b00      	cmp	r3, #0
   b7bb6:	dd09      	ble.n	b7bcc <sulp+0x36>
   b7bb8:	051b      	lsls	r3, r3, #20
   b7bba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b7bbe:	2400      	movs	r4, #0
   b7bc0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7bc4:	4622      	mov	r2, r4
   b7bc6:	462b      	mov	r3, r5
   b7bc8:	f7ff fc4c 	bl	b7464 <__aeabi_dmul>
   b7bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7bd0 <_strtod_l>:
   b7bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7bd4:	ed2d 8b02 	vpush	{d8}
   b7bd8:	b09d      	sub	sp, #116	; 0x74
   b7bda:	461f      	mov	r7, r3
   b7bdc:	2300      	movs	r3, #0
   b7bde:	9318      	str	r3, [sp, #96]	; 0x60
   b7be0:	4ba2      	ldr	r3, [pc, #648]	; (b7e6c <_strtod_l+0x29c>)
   b7be2:	9213      	str	r2, [sp, #76]	; 0x4c
   b7be4:	681b      	ldr	r3, [r3, #0]
   b7be6:	9305      	str	r3, [sp, #20]
   b7be8:	4604      	mov	r4, r0
   b7bea:	4618      	mov	r0, r3
   b7bec:	4688      	mov	r8, r1
   b7bee:	f7ff ffb6 	bl	b7b5e <strlen>
   b7bf2:	f04f 0a00 	mov.w	sl, #0
   b7bf6:	4605      	mov	r5, r0
   b7bf8:	f04f 0b00 	mov.w	fp, #0
   b7bfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7c02:	781a      	ldrb	r2, [r3, #0]
   b7c04:	2a2b      	cmp	r2, #43	; 0x2b
   b7c06:	d04e      	beq.n	b7ca6 <_strtod_l+0xd6>
   b7c08:	d83b      	bhi.n	b7c82 <_strtod_l+0xb2>
   b7c0a:	2a0d      	cmp	r2, #13
   b7c0c:	d834      	bhi.n	b7c78 <_strtod_l+0xa8>
   b7c0e:	2a08      	cmp	r2, #8
   b7c10:	d834      	bhi.n	b7c7c <_strtod_l+0xac>
   b7c12:	2a00      	cmp	r2, #0
   b7c14:	d03e      	beq.n	b7c94 <_strtod_l+0xc4>
   b7c16:	2300      	movs	r3, #0
   b7c18:	930a      	str	r3, [sp, #40]	; 0x28
   b7c1a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b7c1c:	7833      	ldrb	r3, [r6, #0]
   b7c1e:	2b30      	cmp	r3, #48	; 0x30
   b7c20:	f040 80b0 	bne.w	b7d84 <_strtod_l+0x1b4>
   b7c24:	7873      	ldrb	r3, [r6, #1]
   b7c26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7c2a:	2b58      	cmp	r3, #88	; 0x58
   b7c2c:	d168      	bne.n	b7d00 <_strtod_l+0x130>
   b7c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	ab18      	add	r3, sp, #96	; 0x60
   b7c34:	9702      	str	r7, [sp, #8]
   b7c36:	9300      	str	r3, [sp, #0]
   b7c38:	4a8d      	ldr	r2, [pc, #564]	; (b7e70 <_strtod_l+0x2a0>)
   b7c3a:	ab19      	add	r3, sp, #100	; 0x64
   b7c3c:	a917      	add	r1, sp, #92	; 0x5c
   b7c3e:	4620      	mov	r0, r4
   b7c40:	f000 ff8a 	bl	b8b58 <__gethex>
   b7c44:	f010 0707 	ands.w	r7, r0, #7
   b7c48:	4605      	mov	r5, r0
   b7c4a:	d005      	beq.n	b7c58 <_strtod_l+0x88>
   b7c4c:	2f06      	cmp	r7, #6
   b7c4e:	d12c      	bne.n	b7caa <_strtod_l+0xda>
   b7c50:	3601      	adds	r6, #1
   b7c52:	2300      	movs	r3, #0
   b7c54:	9617      	str	r6, [sp, #92]	; 0x5c
   b7c56:	930a      	str	r3, [sp, #40]	; 0x28
   b7c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7c5a:	2b00      	cmp	r3, #0
   b7c5c:	f040 8590 	bne.w	b8780 <_strtod_l+0xbb0>
   b7c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7c62:	b1eb      	cbz	r3, b7ca0 <_strtod_l+0xd0>
   b7c64:	4652      	mov	r2, sl
   b7c66:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b7c6a:	ec43 2b10 	vmov	d0, r2, r3
   b7c6e:	b01d      	add	sp, #116	; 0x74
   b7c70:	ecbd 8b02 	vpop	{d8}
   b7c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7c78:	2a20      	cmp	r2, #32
   b7c7a:	d1cc      	bne.n	b7c16 <_strtod_l+0x46>
   b7c7c:	3301      	adds	r3, #1
   b7c7e:	9317      	str	r3, [sp, #92]	; 0x5c
   b7c80:	e7be      	b.n	b7c00 <_strtod_l+0x30>
   b7c82:	2a2d      	cmp	r2, #45	; 0x2d
   b7c84:	d1c7      	bne.n	b7c16 <_strtod_l+0x46>
   b7c86:	2201      	movs	r2, #1
   b7c88:	920a      	str	r2, [sp, #40]	; 0x28
   b7c8a:	1c5a      	adds	r2, r3, #1
   b7c8c:	9217      	str	r2, [sp, #92]	; 0x5c
   b7c8e:	785b      	ldrb	r3, [r3, #1]
   b7c90:	2b00      	cmp	r3, #0
   b7c92:	d1c2      	bne.n	b7c1a <_strtod_l+0x4a>
   b7c94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7c96:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7c9a:	2b00      	cmp	r3, #0
   b7c9c:	f040 856e 	bne.w	b877c <_strtod_l+0xbac>
   b7ca0:	4652      	mov	r2, sl
   b7ca2:	465b      	mov	r3, fp
   b7ca4:	e7e1      	b.n	b7c6a <_strtod_l+0x9a>
   b7ca6:	2200      	movs	r2, #0
   b7ca8:	e7ee      	b.n	b7c88 <_strtod_l+0xb8>
   b7caa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7cac:	b13a      	cbz	r2, b7cbe <_strtod_l+0xee>
   b7cae:	2135      	movs	r1, #53	; 0x35
   b7cb0:	a81a      	add	r0, sp, #104	; 0x68
   b7cb2:	f001 feec 	bl	b9a8e <__copybits>
   b7cb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7cb8:	4620      	mov	r0, r4
   b7cba:	f001 faab 	bl	b9214 <_Bfree>
   b7cbe:	3f01      	subs	r7, #1
   b7cc0:	2f04      	cmp	r7, #4
   b7cc2:	d806      	bhi.n	b7cd2 <_strtod_l+0x102>
   b7cc4:	e8df f007 	tbb	[pc, r7]
   b7cc8:	1714030a 	.word	0x1714030a
   b7ccc:	0a          	.byte	0x0a
   b7ccd:	00          	.byte	0x00
   b7cce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b7cd2:	0728      	lsls	r0, r5, #28
   b7cd4:	d5c0      	bpl.n	b7c58 <_strtod_l+0x88>
   b7cd6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b7cda:	e7bd      	b.n	b7c58 <_strtod_l+0x88>
   b7cdc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7ce0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b7ce2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b7ce6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b7cea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b7cee:	e7f0      	b.n	b7cd2 <_strtod_l+0x102>
   b7cf0:	f8df b180 	ldr.w	fp, [pc, #384]	; b7e74 <_strtod_l+0x2a4>
   b7cf4:	e7ed      	b.n	b7cd2 <_strtod_l+0x102>
   b7cf6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b7cfa:	f04f 3aff 	mov.w	sl, #4294967295
   b7cfe:	e7e8      	b.n	b7cd2 <_strtod_l+0x102>
   b7d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7d02:	1c5a      	adds	r2, r3, #1
   b7d04:	9217      	str	r2, [sp, #92]	; 0x5c
   b7d06:	785b      	ldrb	r3, [r3, #1]
   b7d08:	2b30      	cmp	r3, #48	; 0x30
   b7d0a:	d0f9      	beq.n	b7d00 <_strtod_l+0x130>
   b7d0c:	2b00      	cmp	r3, #0
   b7d0e:	d0a3      	beq.n	b7c58 <_strtod_l+0x88>
   b7d10:	2301      	movs	r3, #1
   b7d12:	f04f 0900 	mov.w	r9, #0
   b7d16:	9304      	str	r3, [sp, #16]
   b7d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7d1a:	9308      	str	r3, [sp, #32]
   b7d1c:	f8cd 901c 	str.w	r9, [sp, #28]
   b7d20:	464f      	mov	r7, r9
   b7d22:	220a      	movs	r2, #10
   b7d24:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b7d26:	7806      	ldrb	r6, [r0, #0]
   b7d28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b7d2c:	b2d9      	uxtb	r1, r3
   b7d2e:	2909      	cmp	r1, #9
   b7d30:	d92a      	bls.n	b7d88 <_strtod_l+0x1b8>
   b7d32:	9905      	ldr	r1, [sp, #20]
   b7d34:	462a      	mov	r2, r5
   b7d36:	f7ff ff1a 	bl	b7b6e <strncmp>
   b7d3a:	b398      	cbz	r0, b7da4 <_strtod_l+0x1d4>
   b7d3c:	2000      	movs	r0, #0
   b7d3e:	4632      	mov	r2, r6
   b7d40:	463d      	mov	r5, r7
   b7d42:	9005      	str	r0, [sp, #20]
   b7d44:	4603      	mov	r3, r0
   b7d46:	2a65      	cmp	r2, #101	; 0x65
   b7d48:	d001      	beq.n	b7d4e <_strtod_l+0x17e>
   b7d4a:	2a45      	cmp	r2, #69	; 0x45
   b7d4c:	d118      	bne.n	b7d80 <_strtod_l+0x1b0>
   b7d4e:	b91d      	cbnz	r5, b7d58 <_strtod_l+0x188>
   b7d50:	9a04      	ldr	r2, [sp, #16]
   b7d52:	4302      	orrs	r2, r0
   b7d54:	d09e      	beq.n	b7c94 <_strtod_l+0xc4>
   b7d56:	2500      	movs	r5, #0
   b7d58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b7d5c:	f108 0201 	add.w	r2, r8, #1
   b7d60:	9217      	str	r2, [sp, #92]	; 0x5c
   b7d62:	f898 2001 	ldrb.w	r2, [r8, #1]
   b7d66:	2a2b      	cmp	r2, #43	; 0x2b
   b7d68:	d075      	beq.n	b7e56 <_strtod_l+0x286>
   b7d6a:	2a2d      	cmp	r2, #45	; 0x2d
   b7d6c:	d07b      	beq.n	b7e66 <_strtod_l+0x296>
   b7d6e:	f04f 0c00 	mov.w	ip, #0
   b7d72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b7d76:	2909      	cmp	r1, #9
   b7d78:	f240 8082 	bls.w	b7e80 <_strtod_l+0x2b0>
   b7d7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7d80:	2600      	movs	r6, #0
   b7d82:	e09d      	b.n	b7ec0 <_strtod_l+0x2f0>
   b7d84:	2300      	movs	r3, #0
   b7d86:	e7c4      	b.n	b7d12 <_strtod_l+0x142>
   b7d88:	2f08      	cmp	r7, #8
   b7d8a:	bfd8      	it	le
   b7d8c:	9907      	ldrle	r1, [sp, #28]
   b7d8e:	f100 0001 	add.w	r0, r0, #1
   b7d92:	bfda      	itte	le
   b7d94:	fb02 3301 	mlale	r3, r2, r1, r3
   b7d98:	9307      	strle	r3, [sp, #28]
   b7d9a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b7d9e:	3701      	adds	r7, #1
   b7da0:	9017      	str	r0, [sp, #92]	; 0x5c
   b7da2:	e7bf      	b.n	b7d24 <_strtod_l+0x154>
   b7da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7da6:	195a      	adds	r2, r3, r5
   b7da8:	9217      	str	r2, [sp, #92]	; 0x5c
   b7daa:	5d5a      	ldrb	r2, [r3, r5]
   b7dac:	2f00      	cmp	r7, #0
   b7dae:	d037      	beq.n	b7e20 <_strtod_l+0x250>
   b7db0:	9005      	str	r0, [sp, #20]
   b7db2:	463d      	mov	r5, r7
   b7db4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7db8:	2b09      	cmp	r3, #9
   b7dba:	d912      	bls.n	b7de2 <_strtod_l+0x212>
   b7dbc:	2301      	movs	r3, #1
   b7dbe:	e7c2      	b.n	b7d46 <_strtod_l+0x176>
   b7dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7dc2:	1c5a      	adds	r2, r3, #1
   b7dc4:	9217      	str	r2, [sp, #92]	; 0x5c
   b7dc6:	785a      	ldrb	r2, [r3, #1]
   b7dc8:	3001      	adds	r0, #1
   b7dca:	2a30      	cmp	r2, #48	; 0x30
   b7dcc:	d0f8      	beq.n	b7dc0 <_strtod_l+0x1f0>
   b7dce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b7dd2:	2b08      	cmp	r3, #8
   b7dd4:	f200 84d9 	bhi.w	b878a <_strtod_l+0xbba>
   b7dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7dda:	9005      	str	r0, [sp, #20]
   b7ddc:	2000      	movs	r0, #0
   b7dde:	9308      	str	r3, [sp, #32]
   b7de0:	4605      	mov	r5, r0
   b7de2:	3a30      	subs	r2, #48	; 0x30
   b7de4:	f100 0301 	add.w	r3, r0, #1
   b7de8:	d014      	beq.n	b7e14 <_strtod_l+0x244>
   b7dea:	9905      	ldr	r1, [sp, #20]
   b7dec:	4419      	add	r1, r3
   b7dee:	9105      	str	r1, [sp, #20]
   b7df0:	462b      	mov	r3, r5
   b7df2:	eb00 0e05 	add.w	lr, r0, r5
   b7df6:	210a      	movs	r1, #10
   b7df8:	4573      	cmp	r3, lr
   b7dfa:	d113      	bne.n	b7e24 <_strtod_l+0x254>
   b7dfc:	182b      	adds	r3, r5, r0
   b7dfe:	2b08      	cmp	r3, #8
   b7e00:	f105 0501 	add.w	r5, r5, #1
   b7e04:	4405      	add	r5, r0
   b7e06:	dc1c      	bgt.n	b7e42 <_strtod_l+0x272>
   b7e08:	9907      	ldr	r1, [sp, #28]
   b7e0a:	230a      	movs	r3, #10
   b7e0c:	fb03 2301 	mla	r3, r3, r1, r2
   b7e10:	9307      	str	r3, [sp, #28]
   b7e12:	2300      	movs	r3, #0
   b7e14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7e16:	1c51      	adds	r1, r2, #1
   b7e18:	9117      	str	r1, [sp, #92]	; 0x5c
   b7e1a:	7852      	ldrb	r2, [r2, #1]
   b7e1c:	4618      	mov	r0, r3
   b7e1e:	e7c9      	b.n	b7db4 <_strtod_l+0x1e4>
   b7e20:	4638      	mov	r0, r7
   b7e22:	e7d2      	b.n	b7dca <_strtod_l+0x1fa>
   b7e24:	2b08      	cmp	r3, #8
   b7e26:	dc04      	bgt.n	b7e32 <_strtod_l+0x262>
   b7e28:	9e07      	ldr	r6, [sp, #28]
   b7e2a:	434e      	muls	r6, r1
   b7e2c:	9607      	str	r6, [sp, #28]
   b7e2e:	3301      	adds	r3, #1
   b7e30:	e7e2      	b.n	b7df8 <_strtod_l+0x228>
   b7e32:	f103 0c01 	add.w	ip, r3, #1
   b7e36:	f1bc 0f10 	cmp.w	ip, #16
   b7e3a:	bfd8      	it	le
   b7e3c:	fb01 f909 	mulle.w	r9, r1, r9
   b7e40:	e7f5      	b.n	b7e2e <_strtod_l+0x25e>
   b7e42:	2d10      	cmp	r5, #16
   b7e44:	bfdc      	itt	le
   b7e46:	230a      	movle	r3, #10
   b7e48:	fb03 2909 	mlale	r9, r3, r9, r2
   b7e4c:	e7e1      	b.n	b7e12 <_strtod_l+0x242>
   b7e4e:	2300      	movs	r3, #0
   b7e50:	9305      	str	r3, [sp, #20]
   b7e52:	2301      	movs	r3, #1
   b7e54:	e77c      	b.n	b7d50 <_strtod_l+0x180>
   b7e56:	f04f 0c00 	mov.w	ip, #0
   b7e5a:	f108 0202 	add.w	r2, r8, #2
   b7e5e:	9217      	str	r2, [sp, #92]	; 0x5c
   b7e60:	f898 2002 	ldrb.w	r2, [r8, #2]
   b7e64:	e785      	b.n	b7d72 <_strtod_l+0x1a2>
   b7e66:	f04f 0c01 	mov.w	ip, #1
   b7e6a:	e7f6      	b.n	b7e5a <_strtod_l+0x28a>
   b7e6c:	000ba3b0 	.word	0x000ba3b0
   b7e70:	000ba144 	.word	0x000ba144
   b7e74:	7ff00000 	.word	0x7ff00000
   b7e78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7e7a:	1c51      	adds	r1, r2, #1
   b7e7c:	9117      	str	r1, [sp, #92]	; 0x5c
   b7e7e:	7852      	ldrb	r2, [r2, #1]
   b7e80:	2a30      	cmp	r2, #48	; 0x30
   b7e82:	d0f9      	beq.n	b7e78 <_strtod_l+0x2a8>
   b7e84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b7e88:	2908      	cmp	r1, #8
   b7e8a:	f63f af79 	bhi.w	b7d80 <_strtod_l+0x1b0>
   b7e8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b7e92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7e94:	9206      	str	r2, [sp, #24]
   b7e96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7e98:	1c51      	adds	r1, r2, #1
   b7e9a:	9117      	str	r1, [sp, #92]	; 0x5c
   b7e9c:	7852      	ldrb	r2, [r2, #1]
   b7e9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b7ea2:	2e09      	cmp	r6, #9
   b7ea4:	d937      	bls.n	b7f16 <_strtod_l+0x346>
   b7ea6:	9e06      	ldr	r6, [sp, #24]
   b7ea8:	1b89      	subs	r1, r1, r6
   b7eaa:	2908      	cmp	r1, #8
   b7eac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7eb0:	dc02      	bgt.n	b7eb8 <_strtod_l+0x2e8>
   b7eb2:	4576      	cmp	r6, lr
   b7eb4:	bfa8      	it	ge
   b7eb6:	4676      	movge	r6, lr
   b7eb8:	f1bc 0f00 	cmp.w	ip, #0
   b7ebc:	d000      	beq.n	b7ec0 <_strtod_l+0x2f0>
   b7ebe:	4276      	negs	r6, r6
   b7ec0:	2d00      	cmp	r5, #0
   b7ec2:	d14d      	bne.n	b7f60 <_strtod_l+0x390>
   b7ec4:	9904      	ldr	r1, [sp, #16]
   b7ec6:	4301      	orrs	r1, r0
   b7ec8:	f47f aec6 	bne.w	b7c58 <_strtod_l+0x88>
   b7ecc:	2b00      	cmp	r3, #0
   b7ece:	f47f aee1 	bne.w	b7c94 <_strtod_l+0xc4>
   b7ed2:	2a69      	cmp	r2, #105	; 0x69
   b7ed4:	d027      	beq.n	b7f26 <_strtod_l+0x356>
   b7ed6:	dc24      	bgt.n	b7f22 <_strtod_l+0x352>
   b7ed8:	2a49      	cmp	r2, #73	; 0x49
   b7eda:	d024      	beq.n	b7f26 <_strtod_l+0x356>
   b7edc:	2a4e      	cmp	r2, #78	; 0x4e
   b7ede:	f47f aed9 	bne.w	b7c94 <_strtod_l+0xc4>
   b7ee2:	499f      	ldr	r1, [pc, #636]	; (b8160 <_strtod_l+0x590>)
   b7ee4:	a817      	add	r0, sp, #92	; 0x5c
   b7ee6:	f001 f88f 	bl	b9008 <__match>
   b7eea:	2800      	cmp	r0, #0
   b7eec:	f43f aed2 	beq.w	b7c94 <_strtod_l+0xc4>
   b7ef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7ef2:	781b      	ldrb	r3, [r3, #0]
   b7ef4:	2b28      	cmp	r3, #40	; 0x28
   b7ef6:	d12d      	bne.n	b7f54 <_strtod_l+0x384>
   b7ef8:	499a      	ldr	r1, [pc, #616]	; (b8164 <_strtod_l+0x594>)
   b7efa:	aa1a      	add	r2, sp, #104	; 0x68
   b7efc:	a817      	add	r0, sp, #92	; 0x5c
   b7efe:	f001 f897 	bl	b9030 <__hexnan>
   b7f02:	2805      	cmp	r0, #5
   b7f04:	d126      	bne.n	b7f54 <_strtod_l+0x384>
   b7f06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b7f08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b7f0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b7f10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b7f14:	e6a0      	b.n	b7c58 <_strtod_l+0x88>
   b7f16:	210a      	movs	r1, #10
   b7f18:	fb01 2e0e 	mla	lr, r1, lr, r2
   b7f1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b7f20:	e7b9      	b.n	b7e96 <_strtod_l+0x2c6>
   b7f22:	2a6e      	cmp	r2, #110	; 0x6e
   b7f24:	e7db      	b.n	b7ede <_strtod_l+0x30e>
   b7f26:	4990      	ldr	r1, [pc, #576]	; (b8168 <_strtod_l+0x598>)
   b7f28:	a817      	add	r0, sp, #92	; 0x5c
   b7f2a:	f001 f86d 	bl	b9008 <__match>
   b7f2e:	2800      	cmp	r0, #0
   b7f30:	f43f aeb0 	beq.w	b7c94 <_strtod_l+0xc4>
   b7f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7f36:	498d      	ldr	r1, [pc, #564]	; (b816c <_strtod_l+0x59c>)
   b7f38:	3b01      	subs	r3, #1
   b7f3a:	a817      	add	r0, sp, #92	; 0x5c
   b7f3c:	9317      	str	r3, [sp, #92]	; 0x5c
   b7f3e:	f001 f863 	bl	b9008 <__match>
   b7f42:	b910      	cbnz	r0, b7f4a <_strtod_l+0x37a>
   b7f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7f46:	3301      	adds	r3, #1
   b7f48:	9317      	str	r3, [sp, #92]	; 0x5c
   b7f4a:	f8df b230 	ldr.w	fp, [pc, #560]	; b817c <_strtod_l+0x5ac>
   b7f4e:	f04f 0a00 	mov.w	sl, #0
   b7f52:	e681      	b.n	b7c58 <_strtod_l+0x88>
   b7f54:	4886      	ldr	r0, [pc, #536]	; (b8170 <_strtod_l+0x5a0>)
   b7f56:	f001 fdef 	bl	b9b38 <nan>
   b7f5a:	ec5b ab10 	vmov	sl, fp, d0
   b7f5e:	e67b      	b.n	b7c58 <_strtod_l+0x88>
   b7f60:	9b05      	ldr	r3, [sp, #20]
   b7f62:	9807      	ldr	r0, [sp, #28]
   b7f64:	1af3      	subs	r3, r6, r3
   b7f66:	2f00      	cmp	r7, #0
   b7f68:	bf08      	it	eq
   b7f6a:	462f      	moveq	r7, r5
   b7f6c:	2d10      	cmp	r5, #16
   b7f6e:	9306      	str	r3, [sp, #24]
   b7f70:	46a8      	mov	r8, r5
   b7f72:	bfa8      	it	ge
   b7f74:	f04f 0810 	movge.w	r8, #16
   b7f78:	f7ff f9fa 	bl	b7370 <__aeabi_ui2d>
   b7f7c:	2d09      	cmp	r5, #9
   b7f7e:	4682      	mov	sl, r0
   b7f80:	468b      	mov	fp, r1
   b7f82:	dd13      	ble.n	b7fac <_strtod_l+0x3dc>
   b7f84:	4b7b      	ldr	r3, [pc, #492]	; (b8174 <_strtod_l+0x5a4>)
   b7f86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b7f8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b7f8e:	f7ff fa69 	bl	b7464 <__aeabi_dmul>
   b7f92:	4682      	mov	sl, r0
   b7f94:	4648      	mov	r0, r9
   b7f96:	468b      	mov	fp, r1
   b7f98:	f7ff f9ea 	bl	b7370 <__aeabi_ui2d>
   b7f9c:	4602      	mov	r2, r0
   b7f9e:	460b      	mov	r3, r1
   b7fa0:	4650      	mov	r0, sl
   b7fa2:	4659      	mov	r1, fp
   b7fa4:	f7ff f8a8 	bl	b70f8 <__adddf3>
   b7fa8:	4682      	mov	sl, r0
   b7faa:	468b      	mov	fp, r1
   b7fac:	2d0f      	cmp	r5, #15
   b7fae:	dc38      	bgt.n	b8022 <_strtod_l+0x452>
   b7fb0:	9b06      	ldr	r3, [sp, #24]
   b7fb2:	2b00      	cmp	r3, #0
   b7fb4:	f43f ae50 	beq.w	b7c58 <_strtod_l+0x88>
   b7fb8:	dd24      	ble.n	b8004 <_strtod_l+0x434>
   b7fba:	2b16      	cmp	r3, #22
   b7fbc:	dc0b      	bgt.n	b7fd6 <_strtod_l+0x406>
   b7fbe:	496d      	ldr	r1, [pc, #436]	; (b8174 <_strtod_l+0x5a4>)
   b7fc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b7fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7fc8:	4652      	mov	r2, sl
   b7fca:	465b      	mov	r3, fp
   b7fcc:	f7ff fa4a 	bl	b7464 <__aeabi_dmul>
   b7fd0:	4682      	mov	sl, r0
   b7fd2:	468b      	mov	fp, r1
   b7fd4:	e640      	b.n	b7c58 <_strtod_l+0x88>
   b7fd6:	9a06      	ldr	r2, [sp, #24]
   b7fd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b7fdc:	4293      	cmp	r3, r2
   b7fde:	db20      	blt.n	b8022 <_strtod_l+0x452>
   b7fe0:	4c64      	ldr	r4, [pc, #400]	; (b8174 <_strtod_l+0x5a4>)
   b7fe2:	f1c5 050f 	rsb	r5, r5, #15
   b7fe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b7fea:	4652      	mov	r2, sl
   b7fec:	465b      	mov	r3, fp
   b7fee:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7ff2:	f7ff fa37 	bl	b7464 <__aeabi_dmul>
   b7ff6:	9b06      	ldr	r3, [sp, #24]
   b7ff8:	1b5d      	subs	r5, r3, r5
   b7ffa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b7ffe:	e9d4 2300 	ldrd	r2, r3, [r4]
   b8002:	e7e3      	b.n	b7fcc <_strtod_l+0x3fc>
   b8004:	9b06      	ldr	r3, [sp, #24]
   b8006:	3316      	adds	r3, #22
   b8008:	db0b      	blt.n	b8022 <_strtod_l+0x452>
   b800a:	9b05      	ldr	r3, [sp, #20]
   b800c:	1b9e      	subs	r6, r3, r6
   b800e:	4b59      	ldr	r3, [pc, #356]	; (b8174 <_strtod_l+0x5a4>)
   b8010:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b8014:	e9d6 2300 	ldrd	r2, r3, [r6]
   b8018:	4650      	mov	r0, sl
   b801a:	4659      	mov	r1, fp
   b801c:	f7ff fb4c 	bl	b76b8 <__aeabi_ddiv>
   b8020:	e7d6      	b.n	b7fd0 <_strtod_l+0x400>
   b8022:	9b06      	ldr	r3, [sp, #24]
   b8024:	eba5 0808 	sub.w	r8, r5, r8
   b8028:	4498      	add	r8, r3
   b802a:	f1b8 0f00 	cmp.w	r8, #0
   b802e:	dd74      	ble.n	b811a <_strtod_l+0x54a>
   b8030:	f018 030f 	ands.w	r3, r8, #15
   b8034:	d00a      	beq.n	b804c <_strtod_l+0x47c>
   b8036:	494f      	ldr	r1, [pc, #316]	; (b8174 <_strtod_l+0x5a4>)
   b8038:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b803c:	4652      	mov	r2, sl
   b803e:	465b      	mov	r3, fp
   b8040:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8044:	f7ff fa0e 	bl	b7464 <__aeabi_dmul>
   b8048:	4682      	mov	sl, r0
   b804a:	468b      	mov	fp, r1
   b804c:	f038 080f 	bics.w	r8, r8, #15
   b8050:	d04f      	beq.n	b80f2 <_strtod_l+0x522>
   b8052:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b8056:	dd22      	ble.n	b809e <_strtod_l+0x4ce>
   b8058:	2500      	movs	r5, #0
   b805a:	462e      	mov	r6, r5
   b805c:	9507      	str	r5, [sp, #28]
   b805e:	9505      	str	r5, [sp, #20]
   b8060:	2322      	movs	r3, #34	; 0x22
   b8062:	f8df b118 	ldr.w	fp, [pc, #280]	; b817c <_strtod_l+0x5ac>
   b8066:	6023      	str	r3, [r4, #0]
   b8068:	f04f 0a00 	mov.w	sl, #0
   b806c:	9b07      	ldr	r3, [sp, #28]
   b806e:	2b00      	cmp	r3, #0
   b8070:	f43f adf2 	beq.w	b7c58 <_strtod_l+0x88>
   b8074:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8076:	4620      	mov	r0, r4
   b8078:	f001 f8cc 	bl	b9214 <_Bfree>
   b807c:	9905      	ldr	r1, [sp, #20]
   b807e:	4620      	mov	r0, r4
   b8080:	f001 f8c8 	bl	b9214 <_Bfree>
   b8084:	4631      	mov	r1, r6
   b8086:	4620      	mov	r0, r4
   b8088:	f001 f8c4 	bl	b9214 <_Bfree>
   b808c:	9907      	ldr	r1, [sp, #28]
   b808e:	4620      	mov	r0, r4
   b8090:	f001 f8c0 	bl	b9214 <_Bfree>
   b8094:	4629      	mov	r1, r5
   b8096:	4620      	mov	r0, r4
   b8098:	f001 f8bc 	bl	b9214 <_Bfree>
   b809c:	e5dc      	b.n	b7c58 <_strtod_l+0x88>
   b809e:	4b36      	ldr	r3, [pc, #216]	; (b8178 <_strtod_l+0x5a8>)
   b80a0:	9304      	str	r3, [sp, #16]
   b80a2:	2300      	movs	r3, #0
   b80a4:	ea4f 1828 	mov.w	r8, r8, asr #4
   b80a8:	4650      	mov	r0, sl
   b80aa:	4659      	mov	r1, fp
   b80ac:	4699      	mov	r9, r3
   b80ae:	f1b8 0f01 	cmp.w	r8, #1
   b80b2:	dc21      	bgt.n	b80f8 <_strtod_l+0x528>
   b80b4:	b10b      	cbz	r3, b80ba <_strtod_l+0x4ea>
   b80b6:	4682      	mov	sl, r0
   b80b8:	468b      	mov	fp, r1
   b80ba:	4b2f      	ldr	r3, [pc, #188]	; (b8178 <_strtod_l+0x5a8>)
   b80bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b80c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b80c4:	4652      	mov	r2, sl
   b80c6:	465b      	mov	r3, fp
   b80c8:	e9d9 0100 	ldrd	r0, r1, [r9]
   b80cc:	f7ff f9ca 	bl	b7464 <__aeabi_dmul>
   b80d0:	4b2a      	ldr	r3, [pc, #168]	; (b817c <_strtod_l+0x5ac>)
   b80d2:	460a      	mov	r2, r1
   b80d4:	400b      	ands	r3, r1
   b80d6:	492a      	ldr	r1, [pc, #168]	; (b8180 <_strtod_l+0x5b0>)
   b80d8:	428b      	cmp	r3, r1
   b80da:	4682      	mov	sl, r0
   b80dc:	d8bc      	bhi.n	b8058 <_strtod_l+0x488>
   b80de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b80e2:	428b      	cmp	r3, r1
   b80e4:	bf86      	itte	hi
   b80e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8184 <_strtod_l+0x5b4>
   b80ea:	f04f 3aff 	movhi.w	sl, #4294967295
   b80ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b80f2:	2300      	movs	r3, #0
   b80f4:	9304      	str	r3, [sp, #16]
   b80f6:	e084      	b.n	b8202 <_strtod_l+0x632>
   b80f8:	f018 0f01 	tst.w	r8, #1
   b80fc:	d005      	beq.n	b810a <_strtod_l+0x53a>
   b80fe:	9b04      	ldr	r3, [sp, #16]
   b8100:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8104:	f7ff f9ae 	bl	b7464 <__aeabi_dmul>
   b8108:	2301      	movs	r3, #1
   b810a:	9a04      	ldr	r2, [sp, #16]
   b810c:	3208      	adds	r2, #8
   b810e:	f109 0901 	add.w	r9, r9, #1
   b8112:	ea4f 0868 	mov.w	r8, r8, asr #1
   b8116:	9204      	str	r2, [sp, #16]
   b8118:	e7c9      	b.n	b80ae <_strtod_l+0x4de>
   b811a:	d0ea      	beq.n	b80f2 <_strtod_l+0x522>
   b811c:	f1c8 0800 	rsb	r8, r8, #0
   b8120:	f018 020f 	ands.w	r2, r8, #15
   b8124:	d00a      	beq.n	b813c <_strtod_l+0x56c>
   b8126:	4b13      	ldr	r3, [pc, #76]	; (b8174 <_strtod_l+0x5a4>)
   b8128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b812c:	4650      	mov	r0, sl
   b812e:	4659      	mov	r1, fp
   b8130:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8134:	f7ff fac0 	bl	b76b8 <__aeabi_ddiv>
   b8138:	4682      	mov	sl, r0
   b813a:	468b      	mov	fp, r1
   b813c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8140:	d0d7      	beq.n	b80f2 <_strtod_l+0x522>
   b8142:	f1b8 0f1f 	cmp.w	r8, #31
   b8146:	dd1f      	ble.n	b8188 <_strtod_l+0x5b8>
   b8148:	2500      	movs	r5, #0
   b814a:	462e      	mov	r6, r5
   b814c:	9507      	str	r5, [sp, #28]
   b814e:	9505      	str	r5, [sp, #20]
   b8150:	2322      	movs	r3, #34	; 0x22
   b8152:	f04f 0a00 	mov.w	sl, #0
   b8156:	f04f 0b00 	mov.w	fp, #0
   b815a:	6023      	str	r3, [r4, #0]
   b815c:	e786      	b.n	b806c <_strtod_l+0x49c>
   b815e:	bf00      	nop
   b8160:	000ba13e 	.word	0x000ba13e
   b8164:	000ba158 	.word	0x000ba158
   b8168:	000ba135 	.word	0x000ba135
   b816c:	000ba138 	.word	0x000ba138
   b8170:	000b9c60 	.word	0x000b9c60
   b8174:	000ba470 	.word	0x000ba470
   b8178:	000ba448 	.word	0x000ba448
   b817c:	7ff00000 	.word	0x7ff00000
   b8180:	7ca00000 	.word	0x7ca00000
   b8184:	7fefffff 	.word	0x7fefffff
   b8188:	f018 0310 	ands.w	r3, r8, #16
   b818c:	bf18      	it	ne
   b818e:	236a      	movne	r3, #106	; 0x6a
   b8190:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8540 <_strtod_l+0x970>
   b8194:	9304      	str	r3, [sp, #16]
   b8196:	4650      	mov	r0, sl
   b8198:	4659      	mov	r1, fp
   b819a:	2300      	movs	r3, #0
   b819c:	f018 0f01 	tst.w	r8, #1
   b81a0:	d004      	beq.n	b81ac <_strtod_l+0x5dc>
   b81a2:	e9d9 2300 	ldrd	r2, r3, [r9]
   b81a6:	f7ff f95d 	bl	b7464 <__aeabi_dmul>
   b81aa:	2301      	movs	r3, #1
   b81ac:	ea5f 0868 	movs.w	r8, r8, asr #1
   b81b0:	f109 0908 	add.w	r9, r9, #8
   b81b4:	d1f2      	bne.n	b819c <_strtod_l+0x5cc>
   b81b6:	b10b      	cbz	r3, b81bc <_strtod_l+0x5ec>
   b81b8:	4682      	mov	sl, r0
   b81ba:	468b      	mov	fp, r1
   b81bc:	9b04      	ldr	r3, [sp, #16]
   b81be:	b1c3      	cbz	r3, b81f2 <_strtod_l+0x622>
   b81c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b81c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b81c8:	2b00      	cmp	r3, #0
   b81ca:	4659      	mov	r1, fp
   b81cc:	dd11      	ble.n	b81f2 <_strtod_l+0x622>
   b81ce:	2b1f      	cmp	r3, #31
   b81d0:	f340 8124 	ble.w	b841c <_strtod_l+0x84c>
   b81d4:	2b34      	cmp	r3, #52	; 0x34
   b81d6:	bfde      	ittt	le
   b81d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b81dc:	f04f 33ff 	movle.w	r3, #4294967295
   b81e0:	fa03 f202 	lslle.w	r2, r3, r2
   b81e4:	f04f 0a00 	mov.w	sl, #0
   b81e8:	bfcc      	ite	gt
   b81ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b81ee:	ea02 0b01 	andle.w	fp, r2, r1
   b81f2:	2200      	movs	r2, #0
   b81f4:	2300      	movs	r3, #0
   b81f6:	4650      	mov	r0, sl
   b81f8:	4659      	mov	r1, fp
   b81fa:	f7ff fb9b 	bl	b7934 <__aeabi_dcmpeq>
   b81fe:	2800      	cmp	r0, #0
   b8200:	d1a2      	bne.n	b8148 <_strtod_l+0x578>
   b8202:	9b07      	ldr	r3, [sp, #28]
   b8204:	9300      	str	r3, [sp, #0]
   b8206:	9908      	ldr	r1, [sp, #32]
   b8208:	462b      	mov	r3, r5
   b820a:	463a      	mov	r2, r7
   b820c:	4620      	mov	r0, r4
   b820e:	f001 f869 	bl	b92e4 <__s2b>
   b8212:	9007      	str	r0, [sp, #28]
   b8214:	2800      	cmp	r0, #0
   b8216:	f43f af1f 	beq.w	b8058 <_strtod_l+0x488>
   b821a:	9b05      	ldr	r3, [sp, #20]
   b821c:	1b9e      	subs	r6, r3, r6
   b821e:	9b06      	ldr	r3, [sp, #24]
   b8220:	2b00      	cmp	r3, #0
   b8222:	bfb4      	ite	lt
   b8224:	4633      	movlt	r3, r6
   b8226:	2300      	movge	r3, #0
   b8228:	930c      	str	r3, [sp, #48]	; 0x30
   b822a:	9b06      	ldr	r3, [sp, #24]
   b822c:	2500      	movs	r5, #0
   b822e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b8232:	9312      	str	r3, [sp, #72]	; 0x48
   b8234:	462e      	mov	r6, r5
   b8236:	9b07      	ldr	r3, [sp, #28]
   b8238:	4620      	mov	r0, r4
   b823a:	6859      	ldr	r1, [r3, #4]
   b823c:	f000 ffaa 	bl	b9194 <_Balloc>
   b8240:	9005      	str	r0, [sp, #20]
   b8242:	2800      	cmp	r0, #0
   b8244:	f43f af0c 	beq.w	b8060 <_strtod_l+0x490>
   b8248:	9b07      	ldr	r3, [sp, #28]
   b824a:	691a      	ldr	r2, [r3, #16]
   b824c:	3202      	adds	r2, #2
   b824e:	f103 010c 	add.w	r1, r3, #12
   b8252:	0092      	lsls	r2, r2, #2
   b8254:	300c      	adds	r0, #12
   b8256:	f7ff fbfe 	bl	b7a56 <memcpy>
   b825a:	ec4b ab10 	vmov	d0, sl, fp
   b825e:	aa1a      	add	r2, sp, #104	; 0x68
   b8260:	a919      	add	r1, sp, #100	; 0x64
   b8262:	4620      	mov	r0, r4
   b8264:	f001 fb84 	bl	b9970 <__d2b>
   b8268:	ec4b ab18 	vmov	d8, sl, fp
   b826c:	9018      	str	r0, [sp, #96]	; 0x60
   b826e:	2800      	cmp	r0, #0
   b8270:	f43f aef6 	beq.w	b8060 <_strtod_l+0x490>
   b8274:	2101      	movs	r1, #1
   b8276:	4620      	mov	r0, r4
   b8278:	f001 f8ce 	bl	b9418 <__i2b>
   b827c:	4606      	mov	r6, r0
   b827e:	2800      	cmp	r0, #0
   b8280:	f43f aeee 	beq.w	b8060 <_strtod_l+0x490>
   b8284:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8286:	9904      	ldr	r1, [sp, #16]
   b8288:	2b00      	cmp	r3, #0
   b828a:	bfab      	itete	ge
   b828c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b828e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8290:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8292:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8296:	bfac      	ite	ge
   b8298:	eb03 0902 	addge.w	r9, r3, r2
   b829c:	1ad7      	sublt	r7, r2, r3
   b829e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b82a0:	eba3 0801 	sub.w	r8, r3, r1
   b82a4:	4490      	add	r8, r2
   b82a6:	4ba1      	ldr	r3, [pc, #644]	; (b852c <_strtod_l+0x95c>)
   b82a8:	f108 38ff 	add.w	r8, r8, #4294967295
   b82ac:	4598      	cmp	r8, r3
   b82ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b82b2:	f280 80c7 	bge.w	b8444 <_strtod_l+0x874>
   b82b6:	eba3 0308 	sub.w	r3, r3, r8
   b82ba:	2b1f      	cmp	r3, #31
   b82bc:	eba2 0203 	sub.w	r2, r2, r3
   b82c0:	f04f 0101 	mov.w	r1, #1
   b82c4:	f300 80b1 	bgt.w	b842a <_strtod_l+0x85a>
   b82c8:	fa01 f303 	lsl.w	r3, r1, r3
   b82cc:	930d      	str	r3, [sp, #52]	; 0x34
   b82ce:	2300      	movs	r3, #0
   b82d0:	9308      	str	r3, [sp, #32]
   b82d2:	eb09 0802 	add.w	r8, r9, r2
   b82d6:	9b04      	ldr	r3, [sp, #16]
   b82d8:	45c1      	cmp	r9, r8
   b82da:	4417      	add	r7, r2
   b82dc:	441f      	add	r7, r3
   b82de:	464b      	mov	r3, r9
   b82e0:	bfa8      	it	ge
   b82e2:	4643      	movge	r3, r8
   b82e4:	42bb      	cmp	r3, r7
   b82e6:	bfa8      	it	ge
   b82e8:	463b      	movge	r3, r7
   b82ea:	2b00      	cmp	r3, #0
   b82ec:	bfc2      	ittt	gt
   b82ee:	eba8 0803 	subgt.w	r8, r8, r3
   b82f2:	1aff      	subgt	r7, r7, r3
   b82f4:	eba9 0903 	subgt.w	r9, r9, r3
   b82f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b82fa:	2b00      	cmp	r3, #0
   b82fc:	dd17      	ble.n	b832e <_strtod_l+0x75e>
   b82fe:	4631      	mov	r1, r6
   b8300:	461a      	mov	r2, r3
   b8302:	4620      	mov	r0, r4
   b8304:	f001 f948 	bl	b9598 <__pow5mult>
   b8308:	4606      	mov	r6, r0
   b830a:	2800      	cmp	r0, #0
   b830c:	f43f aea8 	beq.w	b8060 <_strtod_l+0x490>
   b8310:	4601      	mov	r1, r0
   b8312:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8314:	4620      	mov	r0, r4
   b8316:	f001 f895 	bl	b9444 <__multiply>
   b831a:	900b      	str	r0, [sp, #44]	; 0x2c
   b831c:	2800      	cmp	r0, #0
   b831e:	f43f ae9f 	beq.w	b8060 <_strtod_l+0x490>
   b8322:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8324:	4620      	mov	r0, r4
   b8326:	f000 ff75 	bl	b9214 <_Bfree>
   b832a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b832c:	9318      	str	r3, [sp, #96]	; 0x60
   b832e:	f1b8 0f00 	cmp.w	r8, #0
   b8332:	f300 808c 	bgt.w	b844e <_strtod_l+0x87e>
   b8336:	9b06      	ldr	r3, [sp, #24]
   b8338:	2b00      	cmp	r3, #0
   b833a:	dd08      	ble.n	b834e <_strtod_l+0x77e>
   b833c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b833e:	9905      	ldr	r1, [sp, #20]
   b8340:	4620      	mov	r0, r4
   b8342:	f001 f929 	bl	b9598 <__pow5mult>
   b8346:	9005      	str	r0, [sp, #20]
   b8348:	2800      	cmp	r0, #0
   b834a:	f43f ae89 	beq.w	b8060 <_strtod_l+0x490>
   b834e:	2f00      	cmp	r7, #0
   b8350:	dd08      	ble.n	b8364 <_strtod_l+0x794>
   b8352:	9905      	ldr	r1, [sp, #20]
   b8354:	463a      	mov	r2, r7
   b8356:	4620      	mov	r0, r4
   b8358:	f001 f978 	bl	b964c <__lshift>
   b835c:	9005      	str	r0, [sp, #20]
   b835e:	2800      	cmp	r0, #0
   b8360:	f43f ae7e 	beq.w	b8060 <_strtod_l+0x490>
   b8364:	f1b9 0f00 	cmp.w	r9, #0
   b8368:	dd08      	ble.n	b837c <_strtod_l+0x7ac>
   b836a:	4631      	mov	r1, r6
   b836c:	464a      	mov	r2, r9
   b836e:	4620      	mov	r0, r4
   b8370:	f001 f96c 	bl	b964c <__lshift>
   b8374:	4606      	mov	r6, r0
   b8376:	2800      	cmp	r0, #0
   b8378:	f43f ae72 	beq.w	b8060 <_strtod_l+0x490>
   b837c:	9a05      	ldr	r2, [sp, #20]
   b837e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8380:	4620      	mov	r0, r4
   b8382:	f001 f9ef 	bl	b9764 <__mdiff>
   b8386:	4605      	mov	r5, r0
   b8388:	2800      	cmp	r0, #0
   b838a:	f43f ae69 	beq.w	b8060 <_strtod_l+0x490>
   b838e:	68c3      	ldr	r3, [r0, #12]
   b8390:	930b      	str	r3, [sp, #44]	; 0x2c
   b8392:	2300      	movs	r3, #0
   b8394:	60c3      	str	r3, [r0, #12]
   b8396:	4631      	mov	r1, r6
   b8398:	f001 f9c8 	bl	b972c <__mcmp>
   b839c:	2800      	cmp	r0, #0
   b839e:	da60      	bge.n	b8462 <_strtod_l+0x892>
   b83a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b83a2:	ea53 030a 	orrs.w	r3, r3, sl
   b83a6:	f040 8082 	bne.w	b84ae <_strtod_l+0x8de>
   b83aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b83ae:	2b00      	cmp	r3, #0
   b83b0:	d17d      	bne.n	b84ae <_strtod_l+0x8de>
   b83b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b83b6:	0d1b      	lsrs	r3, r3, #20
   b83b8:	051b      	lsls	r3, r3, #20
   b83ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b83be:	d976      	bls.n	b84ae <_strtod_l+0x8de>
   b83c0:	696b      	ldr	r3, [r5, #20]
   b83c2:	b913      	cbnz	r3, b83ca <_strtod_l+0x7fa>
   b83c4:	692b      	ldr	r3, [r5, #16]
   b83c6:	2b01      	cmp	r3, #1
   b83c8:	dd71      	ble.n	b84ae <_strtod_l+0x8de>
   b83ca:	4629      	mov	r1, r5
   b83cc:	2201      	movs	r2, #1
   b83ce:	4620      	mov	r0, r4
   b83d0:	f001 f93c 	bl	b964c <__lshift>
   b83d4:	4631      	mov	r1, r6
   b83d6:	4605      	mov	r5, r0
   b83d8:	f001 f9a8 	bl	b972c <__mcmp>
   b83dc:	2800      	cmp	r0, #0
   b83de:	dd66      	ble.n	b84ae <_strtod_l+0x8de>
   b83e0:	9904      	ldr	r1, [sp, #16]
   b83e2:	4a53      	ldr	r2, [pc, #332]	; (b8530 <_strtod_l+0x960>)
   b83e4:	465b      	mov	r3, fp
   b83e6:	2900      	cmp	r1, #0
   b83e8:	f000 8081 	beq.w	b84ee <_strtod_l+0x91e>
   b83ec:	ea02 010b 	and.w	r1, r2, fp
   b83f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b83f4:	dc7b      	bgt.n	b84ee <_strtod_l+0x91e>
   b83f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b83fa:	f77f aea9 	ble.w	b8150 <_strtod_l+0x580>
   b83fe:	4b4d      	ldr	r3, [pc, #308]	; (b8534 <_strtod_l+0x964>)
   b8400:	4650      	mov	r0, sl
   b8402:	4659      	mov	r1, fp
   b8404:	2200      	movs	r2, #0
   b8406:	f7ff f82d 	bl	b7464 <__aeabi_dmul>
   b840a:	460b      	mov	r3, r1
   b840c:	4303      	orrs	r3, r0
   b840e:	bf08      	it	eq
   b8410:	2322      	moveq	r3, #34	; 0x22
   b8412:	4682      	mov	sl, r0
   b8414:	468b      	mov	fp, r1
   b8416:	bf08      	it	eq
   b8418:	6023      	streq	r3, [r4, #0]
   b841a:	e62b      	b.n	b8074 <_strtod_l+0x4a4>
   b841c:	f04f 32ff 	mov.w	r2, #4294967295
   b8420:	fa02 f303 	lsl.w	r3, r2, r3
   b8424:	ea03 0a0a 	and.w	sl, r3, sl
   b8428:	e6e3      	b.n	b81f2 <_strtod_l+0x622>
   b842a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b842e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b8432:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b8436:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b843a:	fa01 f308 	lsl.w	r3, r1, r8
   b843e:	9308      	str	r3, [sp, #32]
   b8440:	910d      	str	r1, [sp, #52]	; 0x34
   b8442:	e746      	b.n	b82d2 <_strtod_l+0x702>
   b8444:	2300      	movs	r3, #0
   b8446:	9308      	str	r3, [sp, #32]
   b8448:	2301      	movs	r3, #1
   b844a:	930d      	str	r3, [sp, #52]	; 0x34
   b844c:	e741      	b.n	b82d2 <_strtod_l+0x702>
   b844e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8450:	4642      	mov	r2, r8
   b8452:	4620      	mov	r0, r4
   b8454:	f001 f8fa 	bl	b964c <__lshift>
   b8458:	9018      	str	r0, [sp, #96]	; 0x60
   b845a:	2800      	cmp	r0, #0
   b845c:	f47f af6b 	bne.w	b8336 <_strtod_l+0x766>
   b8460:	e5fe      	b.n	b8060 <_strtod_l+0x490>
   b8462:	465f      	mov	r7, fp
   b8464:	d16e      	bne.n	b8544 <_strtod_l+0x974>
   b8466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8468:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b846c:	b342      	cbz	r2, b84c0 <_strtod_l+0x8f0>
   b846e:	4a32      	ldr	r2, [pc, #200]	; (b8538 <_strtod_l+0x968>)
   b8470:	4293      	cmp	r3, r2
   b8472:	d128      	bne.n	b84c6 <_strtod_l+0x8f6>
   b8474:	9b04      	ldr	r3, [sp, #16]
   b8476:	4651      	mov	r1, sl
   b8478:	b1eb      	cbz	r3, b84b6 <_strtod_l+0x8e6>
   b847a:	4b2d      	ldr	r3, [pc, #180]	; (b8530 <_strtod_l+0x960>)
   b847c:	403b      	ands	r3, r7
   b847e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8482:	f04f 32ff 	mov.w	r2, #4294967295
   b8486:	d819      	bhi.n	b84bc <_strtod_l+0x8ec>
   b8488:	0d1b      	lsrs	r3, r3, #20
   b848a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b848e:	fa02 f303 	lsl.w	r3, r2, r3
   b8492:	4299      	cmp	r1, r3
   b8494:	d117      	bne.n	b84c6 <_strtod_l+0x8f6>
   b8496:	4b29      	ldr	r3, [pc, #164]	; (b853c <_strtod_l+0x96c>)
   b8498:	429f      	cmp	r7, r3
   b849a:	d102      	bne.n	b84a2 <_strtod_l+0x8d2>
   b849c:	3101      	adds	r1, #1
   b849e:	f43f addf 	beq.w	b8060 <_strtod_l+0x490>
   b84a2:	4b23      	ldr	r3, [pc, #140]	; (b8530 <_strtod_l+0x960>)
   b84a4:	403b      	ands	r3, r7
   b84a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b84aa:	f04f 0a00 	mov.w	sl, #0
   b84ae:	9b04      	ldr	r3, [sp, #16]
   b84b0:	2b00      	cmp	r3, #0
   b84b2:	d1a4      	bne.n	b83fe <_strtod_l+0x82e>
   b84b4:	e5de      	b.n	b8074 <_strtod_l+0x4a4>
   b84b6:	f04f 33ff 	mov.w	r3, #4294967295
   b84ba:	e7ea      	b.n	b8492 <_strtod_l+0x8c2>
   b84bc:	4613      	mov	r3, r2
   b84be:	e7e8      	b.n	b8492 <_strtod_l+0x8c2>
   b84c0:	ea53 030a 	orrs.w	r3, r3, sl
   b84c4:	d08c      	beq.n	b83e0 <_strtod_l+0x810>
   b84c6:	9b08      	ldr	r3, [sp, #32]
   b84c8:	b1db      	cbz	r3, b8502 <_strtod_l+0x932>
   b84ca:	423b      	tst	r3, r7
   b84cc:	d0ef      	beq.n	b84ae <_strtod_l+0x8de>
   b84ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b84d0:	9a04      	ldr	r2, [sp, #16]
   b84d2:	4650      	mov	r0, sl
   b84d4:	4659      	mov	r1, fp
   b84d6:	b1c3      	cbz	r3, b850a <_strtod_l+0x93a>
   b84d8:	f7ff fb5d 	bl	b7b96 <sulp>
   b84dc:	4602      	mov	r2, r0
   b84de:	460b      	mov	r3, r1
   b84e0:	ec51 0b18 	vmov	r0, r1, d8
   b84e4:	f7fe fe08 	bl	b70f8 <__adddf3>
   b84e8:	4682      	mov	sl, r0
   b84ea:	468b      	mov	fp, r1
   b84ec:	e7df      	b.n	b84ae <_strtod_l+0x8de>
   b84ee:	4013      	ands	r3, r2
   b84f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b84f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b84f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b84fc:	f04f 3aff 	mov.w	sl, #4294967295
   b8500:	e7d5      	b.n	b84ae <_strtod_l+0x8de>
   b8502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8504:	ea13 0f0a 	tst.w	r3, sl
   b8508:	e7e0      	b.n	b84cc <_strtod_l+0x8fc>
   b850a:	f7ff fb44 	bl	b7b96 <sulp>
   b850e:	4602      	mov	r2, r0
   b8510:	460b      	mov	r3, r1
   b8512:	ec51 0b18 	vmov	r0, r1, d8
   b8516:	f7fe fded 	bl	b70f4 <__aeabi_dsub>
   b851a:	2200      	movs	r2, #0
   b851c:	2300      	movs	r3, #0
   b851e:	4682      	mov	sl, r0
   b8520:	468b      	mov	fp, r1
   b8522:	f7ff fa07 	bl	b7934 <__aeabi_dcmpeq>
   b8526:	2800      	cmp	r0, #0
   b8528:	d0c1      	beq.n	b84ae <_strtod_l+0x8de>
   b852a:	e611      	b.n	b8150 <_strtod_l+0x580>
   b852c:	fffffc02 	.word	0xfffffc02
   b8530:	7ff00000 	.word	0x7ff00000
   b8534:	39500000 	.word	0x39500000
   b8538:	000fffff 	.word	0x000fffff
   b853c:	7fefffff 	.word	0x7fefffff
   b8540:	000ba170 	.word	0x000ba170
   b8544:	4631      	mov	r1, r6
   b8546:	4628      	mov	r0, r5
   b8548:	f001 fa6e 	bl	b9a28 <__ratio>
   b854c:	ec59 8b10 	vmov	r8, r9, d0
   b8550:	ee10 0a10 	vmov	r0, s0
   b8554:	2200      	movs	r2, #0
   b8556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b855a:	4649      	mov	r1, r9
   b855c:	f7ff f9fe 	bl	b795c <__aeabi_dcmple>
   b8560:	2800      	cmp	r0, #0
   b8562:	d07a      	beq.n	b865a <_strtod_l+0xa8a>
   b8564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8566:	2b00      	cmp	r3, #0
   b8568:	d04a      	beq.n	b8600 <_strtod_l+0xa30>
   b856a:	4b95      	ldr	r3, [pc, #596]	; (b87c0 <_strtod_l+0xbf0>)
   b856c:	2200      	movs	r2, #0
   b856e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8572:	f8df 924c 	ldr.w	r9, [pc, #588]	; b87c0 <_strtod_l+0xbf0>
   b8576:	f04f 0800 	mov.w	r8, #0
   b857a:	4b92      	ldr	r3, [pc, #584]	; (b87c4 <_strtod_l+0xbf4>)
   b857c:	403b      	ands	r3, r7
   b857e:	930d      	str	r3, [sp, #52]	; 0x34
   b8580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8582:	4b91      	ldr	r3, [pc, #580]	; (b87c8 <_strtod_l+0xbf8>)
   b8584:	429a      	cmp	r2, r3
   b8586:	f040 80b0 	bne.w	b86ea <_strtod_l+0xb1a>
   b858a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b858e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b8592:	ec4b ab10 	vmov	d0, sl, fp
   b8596:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b859a:	f001 f96d 	bl	b9878 <__ulp>
   b859e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b85a2:	ec53 2b10 	vmov	r2, r3, d0
   b85a6:	f7fe ff5d 	bl	b7464 <__aeabi_dmul>
   b85aa:	4652      	mov	r2, sl
   b85ac:	465b      	mov	r3, fp
   b85ae:	f7fe fda3 	bl	b70f8 <__adddf3>
   b85b2:	460b      	mov	r3, r1
   b85b4:	4983      	ldr	r1, [pc, #524]	; (b87c4 <_strtod_l+0xbf4>)
   b85b6:	4a85      	ldr	r2, [pc, #532]	; (b87cc <_strtod_l+0xbfc>)
   b85b8:	4019      	ands	r1, r3
   b85ba:	4291      	cmp	r1, r2
   b85bc:	4682      	mov	sl, r0
   b85be:	d960      	bls.n	b8682 <_strtod_l+0xab2>
   b85c0:	ee18 3a90 	vmov	r3, s17
   b85c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b85c8:	4293      	cmp	r3, r2
   b85ca:	d104      	bne.n	b85d6 <_strtod_l+0xa06>
   b85cc:	ee18 3a10 	vmov	r3, s16
   b85d0:	3301      	adds	r3, #1
   b85d2:	f43f ad45 	beq.w	b8060 <_strtod_l+0x490>
   b85d6:	f8df b200 	ldr.w	fp, [pc, #512]	; b87d8 <_strtod_l+0xc08>
   b85da:	f04f 3aff 	mov.w	sl, #4294967295
   b85de:	9918      	ldr	r1, [sp, #96]	; 0x60
   b85e0:	4620      	mov	r0, r4
   b85e2:	f000 fe17 	bl	b9214 <_Bfree>
   b85e6:	9905      	ldr	r1, [sp, #20]
   b85e8:	4620      	mov	r0, r4
   b85ea:	f000 fe13 	bl	b9214 <_Bfree>
   b85ee:	4631      	mov	r1, r6
   b85f0:	4620      	mov	r0, r4
   b85f2:	f000 fe0f 	bl	b9214 <_Bfree>
   b85f6:	4629      	mov	r1, r5
   b85f8:	4620      	mov	r0, r4
   b85fa:	f000 fe0b 	bl	b9214 <_Bfree>
   b85fe:	e61a      	b.n	b8236 <_strtod_l+0x666>
   b8600:	f1ba 0f00 	cmp.w	sl, #0
   b8604:	d11b      	bne.n	b863e <_strtod_l+0xa6e>
   b8606:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b860a:	b9f3      	cbnz	r3, b864a <_strtod_l+0xa7a>
   b860c:	4b6c      	ldr	r3, [pc, #432]	; (b87c0 <_strtod_l+0xbf0>)
   b860e:	2200      	movs	r2, #0
   b8610:	4640      	mov	r0, r8
   b8612:	4649      	mov	r1, r9
   b8614:	f7ff f998 	bl	b7948 <__aeabi_dcmplt>
   b8618:	b9d0      	cbnz	r0, b8650 <_strtod_l+0xa80>
   b861a:	4640      	mov	r0, r8
   b861c:	4649      	mov	r1, r9
   b861e:	4b6c      	ldr	r3, [pc, #432]	; (b87d0 <_strtod_l+0xc00>)
   b8620:	2200      	movs	r2, #0
   b8622:	f7fe ff1f 	bl	b7464 <__aeabi_dmul>
   b8626:	4680      	mov	r8, r0
   b8628:	4689      	mov	r9, r1
   b862a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b862e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b8632:	9315      	str	r3, [sp, #84]	; 0x54
   b8634:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b8638:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b863c:	e79d      	b.n	b857a <_strtod_l+0x9aa>
   b863e:	f1ba 0f01 	cmp.w	sl, #1
   b8642:	d102      	bne.n	b864a <_strtod_l+0xa7a>
   b8644:	2f00      	cmp	r7, #0
   b8646:	f43f ad83 	beq.w	b8150 <_strtod_l+0x580>
   b864a:	4b62      	ldr	r3, [pc, #392]	; (b87d4 <_strtod_l+0xc04>)
   b864c:	2200      	movs	r2, #0
   b864e:	e78e      	b.n	b856e <_strtod_l+0x99e>
   b8650:	f8df 917c 	ldr.w	r9, [pc, #380]	; b87d0 <_strtod_l+0xc00>
   b8654:	f04f 0800 	mov.w	r8, #0
   b8658:	e7e7      	b.n	b862a <_strtod_l+0xa5a>
   b865a:	4b5d      	ldr	r3, [pc, #372]	; (b87d0 <_strtod_l+0xc00>)
   b865c:	4640      	mov	r0, r8
   b865e:	4649      	mov	r1, r9
   b8660:	2200      	movs	r2, #0
   b8662:	f7fe feff 	bl	b7464 <__aeabi_dmul>
   b8666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8668:	4680      	mov	r8, r0
   b866a:	4689      	mov	r9, r1
   b866c:	b933      	cbnz	r3, b867c <_strtod_l+0xaac>
   b866e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8672:	900e      	str	r0, [sp, #56]	; 0x38
   b8674:	930f      	str	r3, [sp, #60]	; 0x3c
   b8676:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b867a:	e7dd      	b.n	b8638 <_strtod_l+0xa68>
   b867c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b8680:	e7f9      	b.n	b8676 <_strtod_l+0xaa6>
   b8682:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b8686:	9b04      	ldr	r3, [sp, #16]
   b8688:	2b00      	cmp	r3, #0
   b868a:	d1a8      	bne.n	b85de <_strtod_l+0xa0e>
   b868c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8692:	0d1b      	lsrs	r3, r3, #20
   b8694:	051b      	lsls	r3, r3, #20
   b8696:	429a      	cmp	r2, r3
   b8698:	d1a1      	bne.n	b85de <_strtod_l+0xa0e>
   b869a:	4640      	mov	r0, r8
   b869c:	4649      	mov	r1, r9
   b869e:	f001 fa61 	bl	b9b64 <__aeabi_d2lz>
   b86a2:	f7fe feb1 	bl	b7408 <__aeabi_l2d>
   b86a6:	4602      	mov	r2, r0
   b86a8:	460b      	mov	r3, r1
   b86aa:	4640      	mov	r0, r8
   b86ac:	4649      	mov	r1, r9
   b86ae:	f7fe fd21 	bl	b70f4 <__aeabi_dsub>
   b86b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b86b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b86b8:	ea43 030a 	orr.w	r3, r3, sl
   b86bc:	4313      	orrs	r3, r2
   b86be:	4680      	mov	r8, r0
   b86c0:	4689      	mov	r9, r1
   b86c2:	d055      	beq.n	b8770 <_strtod_l+0xba0>
   b86c4:	a336      	add	r3, pc, #216	; (adr r3, b87a0 <_strtod_l+0xbd0>)
   b86c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86ca:	f7ff f93d 	bl	b7948 <__aeabi_dcmplt>
   b86ce:	2800      	cmp	r0, #0
   b86d0:	f47f acd0 	bne.w	b8074 <_strtod_l+0x4a4>
   b86d4:	a334      	add	r3, pc, #208	; (adr r3, b87a8 <_strtod_l+0xbd8>)
   b86d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86da:	4640      	mov	r0, r8
   b86dc:	4649      	mov	r1, r9
   b86de:	f7ff f951 	bl	b7984 <__aeabi_dcmpgt>
   b86e2:	2800      	cmp	r0, #0
   b86e4:	f43f af7b 	beq.w	b85de <_strtod_l+0xa0e>
   b86e8:	e4c4      	b.n	b8074 <_strtod_l+0x4a4>
   b86ea:	9b04      	ldr	r3, [sp, #16]
   b86ec:	b333      	cbz	r3, b873c <_strtod_l+0xb6c>
   b86ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b86f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b86f4:	d822      	bhi.n	b873c <_strtod_l+0xb6c>
   b86f6:	a32e      	add	r3, pc, #184	; (adr r3, b87b0 <_strtod_l+0xbe0>)
   b86f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86fc:	4640      	mov	r0, r8
   b86fe:	4649      	mov	r1, r9
   b8700:	f7ff f92c 	bl	b795c <__aeabi_dcmple>
   b8704:	b1a0      	cbz	r0, b8730 <_strtod_l+0xb60>
   b8706:	4649      	mov	r1, r9
   b8708:	4640      	mov	r0, r8
   b870a:	f7ff f945 	bl	b7998 <__aeabi_d2uiz>
   b870e:	2801      	cmp	r0, #1
   b8710:	bf38      	it	cc
   b8712:	2001      	movcc	r0, #1
   b8714:	f7fe fe2c 	bl	b7370 <__aeabi_ui2d>
   b8718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b871a:	4680      	mov	r8, r0
   b871c:	4689      	mov	r9, r1
   b871e:	bb23      	cbnz	r3, b876a <_strtod_l+0xb9a>
   b8720:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8724:	9010      	str	r0, [sp, #64]	; 0x40
   b8726:	9311      	str	r3, [sp, #68]	; 0x44
   b8728:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b872c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8730:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8734:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b8738:	1a9b      	subs	r3, r3, r2
   b873a:	9309      	str	r3, [sp, #36]	; 0x24
   b873c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8740:	eeb0 0a48 	vmov.f32	s0, s16
   b8744:	eef0 0a68 	vmov.f32	s1, s17
   b8748:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b874c:	f001 f894 	bl	b9878 <__ulp>
   b8750:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8754:	ec53 2b10 	vmov	r2, r3, d0
   b8758:	f7fe fe84 	bl	b7464 <__aeabi_dmul>
   b875c:	ec53 2b18 	vmov	r2, r3, d8
   b8760:	f7fe fcca 	bl	b70f8 <__adddf3>
   b8764:	4682      	mov	sl, r0
   b8766:	468b      	mov	fp, r1
   b8768:	e78d      	b.n	b8686 <_strtod_l+0xab6>
   b876a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b876e:	e7db      	b.n	b8728 <_strtod_l+0xb58>
   b8770:	a311      	add	r3, pc, #68	; (adr r3, b87b8 <_strtod_l+0xbe8>)
   b8772:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8776:	f7ff f8e7 	bl	b7948 <__aeabi_dcmplt>
   b877a:	e7b2      	b.n	b86e2 <_strtod_l+0xb12>
   b877c:	2300      	movs	r3, #0
   b877e:	930a      	str	r3, [sp, #40]	; 0x28
   b8780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b8782:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8784:	6013      	str	r3, [r2, #0]
   b8786:	f7ff ba6b 	b.w	b7c60 <_strtod_l+0x90>
   b878a:	2a65      	cmp	r2, #101	; 0x65
   b878c:	f43f ab5f 	beq.w	b7e4e <_strtod_l+0x27e>
   b8790:	2a45      	cmp	r2, #69	; 0x45
   b8792:	f43f ab5c 	beq.w	b7e4e <_strtod_l+0x27e>
   b8796:	2301      	movs	r3, #1
   b8798:	f7ff bb94 	b.w	b7ec4 <_strtod_l+0x2f4>
   b879c:	f3af 8000 	nop.w
   b87a0:	94a03595 	.word	0x94a03595
   b87a4:	3fdfffff 	.word	0x3fdfffff
   b87a8:	35afe535 	.word	0x35afe535
   b87ac:	3fe00000 	.word	0x3fe00000
   b87b0:	ffc00000 	.word	0xffc00000
   b87b4:	41dfffff 	.word	0x41dfffff
   b87b8:	94a03595 	.word	0x94a03595
   b87bc:	3fcfffff 	.word	0x3fcfffff
   b87c0:	3ff00000 	.word	0x3ff00000
   b87c4:	7ff00000 	.word	0x7ff00000
   b87c8:	7fe00000 	.word	0x7fe00000
   b87cc:	7c9fffff 	.word	0x7c9fffff
   b87d0:	3fe00000 	.word	0x3fe00000
   b87d4:	bff00000 	.word	0xbff00000
   b87d8:	7fefffff 	.word	0x7fefffff

000b87dc <strtod>:
   b87dc:	460a      	mov	r2, r1
   b87de:	4601      	mov	r1, r0
   b87e0:	4802      	ldr	r0, [pc, #8]	; (b87ec <strtod+0x10>)
   b87e2:	4b03      	ldr	r3, [pc, #12]	; (b87f0 <strtod+0x14>)
   b87e4:	6800      	ldr	r0, [r0, #0]
   b87e6:	f7ff b9f3 	b.w	b7bd0 <_strtod_l>
   b87ea:	bf00      	nop
   b87ec:	2003cd14 	.word	0x2003cd14
   b87f0:	2003cd80 	.word	0x2003cd80

000b87f4 <strtok>:
   b87f4:	4b16      	ldr	r3, [pc, #88]	; (b8850 <strtok+0x5c>)
   b87f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b87f8:	681e      	ldr	r6, [r3, #0]
   b87fa:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b87fc:	4605      	mov	r5, r0
   b87fe:	b9fc      	cbnz	r4, b8840 <strtok+0x4c>
   b8800:	2050      	movs	r0, #80	; 0x50
   b8802:	9101      	str	r1, [sp, #4]
   b8804:	f7fc fe4c 	bl	b54a0 <malloc>
   b8808:	9901      	ldr	r1, [sp, #4]
   b880a:	65b0      	str	r0, [r6, #88]	; 0x58
   b880c:	4602      	mov	r2, r0
   b880e:	b920      	cbnz	r0, b881a <strtok+0x26>
   b8810:	4b10      	ldr	r3, [pc, #64]	; (b8854 <strtok+0x60>)
   b8812:	4811      	ldr	r0, [pc, #68]	; (b8858 <strtok+0x64>)
   b8814:	2157      	movs	r1, #87	; 0x57
   b8816:	f7fc fe8b 	bl	b5530 <__assert_func>
   b881a:	e9c0 4400 	strd	r4, r4, [r0]
   b881e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b8822:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b8826:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b882a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b882e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b8832:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b8836:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b883a:	6184      	str	r4, [r0, #24]
   b883c:	7704      	strb	r4, [r0, #28]
   b883e:	6244      	str	r4, [r0, #36]	; 0x24
   b8840:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b8842:	2301      	movs	r3, #1
   b8844:	4628      	mov	r0, r5
   b8846:	b002      	add	sp, #8
   b8848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b884c:	f000 b806 	b.w	b885c <__strtok_r>
   b8850:	2003cd14 	.word	0x2003cd14
   b8854:	000ba0a1 	.word	0x000ba0a1
   b8858:	000ba198 	.word	0x000ba198

000b885c <__strtok_r>:
   b885c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b885e:	b908      	cbnz	r0, b8864 <__strtok_r+0x8>
   b8860:	6810      	ldr	r0, [r2, #0]
   b8862:	b188      	cbz	r0, b8888 <__strtok_r+0x2c>
   b8864:	4604      	mov	r4, r0
   b8866:	4620      	mov	r0, r4
   b8868:	f814 5b01 	ldrb.w	r5, [r4], #1
   b886c:	460f      	mov	r7, r1
   b886e:	f817 6b01 	ldrb.w	r6, [r7], #1
   b8872:	b91e      	cbnz	r6, b887c <__strtok_r+0x20>
   b8874:	b965      	cbnz	r5, b8890 <__strtok_r+0x34>
   b8876:	6015      	str	r5, [r2, #0]
   b8878:	4628      	mov	r0, r5
   b887a:	e005      	b.n	b8888 <__strtok_r+0x2c>
   b887c:	42b5      	cmp	r5, r6
   b887e:	d1f6      	bne.n	b886e <__strtok_r+0x12>
   b8880:	2b00      	cmp	r3, #0
   b8882:	d1f0      	bne.n	b8866 <__strtok_r+0xa>
   b8884:	6014      	str	r4, [r2, #0]
   b8886:	7003      	strb	r3, [r0, #0]
   b8888:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b888a:	461c      	mov	r4, r3
   b888c:	e00c      	b.n	b88a8 <__strtok_r+0x4c>
   b888e:	b915      	cbnz	r5, b8896 <__strtok_r+0x3a>
   b8890:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8894:	460e      	mov	r6, r1
   b8896:	f816 5b01 	ldrb.w	r5, [r6], #1
   b889a:	42ab      	cmp	r3, r5
   b889c:	d1f7      	bne.n	b888e <__strtok_r+0x32>
   b889e:	2b00      	cmp	r3, #0
   b88a0:	d0f3      	beq.n	b888a <__strtok_r+0x2e>
   b88a2:	2300      	movs	r3, #0
   b88a4:	f804 3c01 	strb.w	r3, [r4, #-1]
   b88a8:	6014      	str	r4, [r2, #0]
   b88aa:	e7ed      	b.n	b8888 <__strtok_r+0x2c>

000b88ac <_strtol_l.constprop.0>:
   b88ac:	2b01      	cmp	r3, #1
   b88ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b88b2:	d001      	beq.n	b88b8 <_strtol_l.constprop.0+0xc>
   b88b4:	2b24      	cmp	r3, #36	; 0x24
   b88b6:	d906      	bls.n	b88c6 <_strtol_l.constprop.0+0x1a>
   b88b8:	f7fc fe32 	bl	b5520 <__errno>
   b88bc:	2316      	movs	r3, #22
   b88be:	6003      	str	r3, [r0, #0]
   b88c0:	2000      	movs	r0, #0
   b88c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b88c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b89ac <_strtol_l.constprop.0+0x100>
   b88ca:	460d      	mov	r5, r1
   b88cc:	462e      	mov	r6, r5
   b88ce:	f815 4b01 	ldrb.w	r4, [r5], #1
   b88d2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b88d6:	f017 0708 	ands.w	r7, r7, #8
   b88da:	d1f7      	bne.n	b88cc <_strtol_l.constprop.0+0x20>
   b88dc:	2c2d      	cmp	r4, #45	; 0x2d
   b88de:	d132      	bne.n	b8946 <_strtol_l.constprop.0+0x9a>
   b88e0:	782c      	ldrb	r4, [r5, #0]
   b88e2:	2701      	movs	r7, #1
   b88e4:	1cb5      	adds	r5, r6, #2
   b88e6:	2b00      	cmp	r3, #0
   b88e8:	d05b      	beq.n	b89a2 <_strtol_l.constprop.0+0xf6>
   b88ea:	2b10      	cmp	r3, #16
   b88ec:	d109      	bne.n	b8902 <_strtol_l.constprop.0+0x56>
   b88ee:	2c30      	cmp	r4, #48	; 0x30
   b88f0:	d107      	bne.n	b8902 <_strtol_l.constprop.0+0x56>
   b88f2:	782c      	ldrb	r4, [r5, #0]
   b88f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b88f8:	2c58      	cmp	r4, #88	; 0x58
   b88fa:	d14d      	bne.n	b8998 <_strtol_l.constprop.0+0xec>
   b88fc:	786c      	ldrb	r4, [r5, #1]
   b88fe:	2310      	movs	r3, #16
   b8900:	3502      	adds	r5, #2
   b8902:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8906:	f108 38ff 	add.w	r8, r8, #4294967295
   b890a:	f04f 0c00 	mov.w	ip, #0
   b890e:	fbb8 f9f3 	udiv	r9, r8, r3
   b8912:	4666      	mov	r6, ip
   b8914:	fb03 8a19 	mls	sl, r3, r9, r8
   b8918:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b891c:	f1be 0f09 	cmp.w	lr, #9
   b8920:	d816      	bhi.n	b8950 <_strtol_l.constprop.0+0xa4>
   b8922:	4674      	mov	r4, lr
   b8924:	42a3      	cmp	r3, r4
   b8926:	dd24      	ble.n	b8972 <_strtol_l.constprop.0+0xc6>
   b8928:	f1bc 0f00 	cmp.w	ip, #0
   b892c:	db1e      	blt.n	b896c <_strtol_l.constprop.0+0xc0>
   b892e:	45b1      	cmp	r9, r6
   b8930:	d31c      	bcc.n	b896c <_strtol_l.constprop.0+0xc0>
   b8932:	d101      	bne.n	b8938 <_strtol_l.constprop.0+0x8c>
   b8934:	45a2      	cmp	sl, r4
   b8936:	db19      	blt.n	b896c <_strtol_l.constprop.0+0xc0>
   b8938:	fb06 4603 	mla	r6, r6, r3, r4
   b893c:	f04f 0c01 	mov.w	ip, #1
   b8940:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8944:	e7e8      	b.n	b8918 <_strtol_l.constprop.0+0x6c>
   b8946:	2c2b      	cmp	r4, #43	; 0x2b
   b8948:	bf04      	itt	eq
   b894a:	782c      	ldrbeq	r4, [r5, #0]
   b894c:	1cb5      	addeq	r5, r6, #2
   b894e:	e7ca      	b.n	b88e6 <_strtol_l.constprop.0+0x3a>
   b8950:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8954:	f1be 0f19 	cmp.w	lr, #25
   b8958:	d801      	bhi.n	b895e <_strtol_l.constprop.0+0xb2>
   b895a:	3c37      	subs	r4, #55	; 0x37
   b895c:	e7e2      	b.n	b8924 <_strtol_l.constprop.0+0x78>
   b895e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8962:	f1be 0f19 	cmp.w	lr, #25
   b8966:	d804      	bhi.n	b8972 <_strtol_l.constprop.0+0xc6>
   b8968:	3c57      	subs	r4, #87	; 0x57
   b896a:	e7db      	b.n	b8924 <_strtol_l.constprop.0+0x78>
   b896c:	f04f 3cff 	mov.w	ip, #4294967295
   b8970:	e7e6      	b.n	b8940 <_strtol_l.constprop.0+0x94>
   b8972:	f1bc 0f00 	cmp.w	ip, #0
   b8976:	da05      	bge.n	b8984 <_strtol_l.constprop.0+0xd8>
   b8978:	2322      	movs	r3, #34	; 0x22
   b897a:	6003      	str	r3, [r0, #0]
   b897c:	4646      	mov	r6, r8
   b897e:	b942      	cbnz	r2, b8992 <_strtol_l.constprop.0+0xe6>
   b8980:	4630      	mov	r0, r6
   b8982:	e79e      	b.n	b88c2 <_strtol_l.constprop.0+0x16>
   b8984:	b107      	cbz	r7, b8988 <_strtol_l.constprop.0+0xdc>
   b8986:	4276      	negs	r6, r6
   b8988:	2a00      	cmp	r2, #0
   b898a:	d0f9      	beq.n	b8980 <_strtol_l.constprop.0+0xd4>
   b898c:	f1bc 0f00 	cmp.w	ip, #0
   b8990:	d000      	beq.n	b8994 <_strtol_l.constprop.0+0xe8>
   b8992:	1e69      	subs	r1, r5, #1
   b8994:	6011      	str	r1, [r2, #0]
   b8996:	e7f3      	b.n	b8980 <_strtol_l.constprop.0+0xd4>
   b8998:	2430      	movs	r4, #48	; 0x30
   b899a:	2b00      	cmp	r3, #0
   b899c:	d1b1      	bne.n	b8902 <_strtol_l.constprop.0+0x56>
   b899e:	2308      	movs	r3, #8
   b89a0:	e7af      	b.n	b8902 <_strtol_l.constprop.0+0x56>
   b89a2:	2c30      	cmp	r4, #48	; 0x30
   b89a4:	d0a5      	beq.n	b88f2 <_strtol_l.constprop.0+0x46>
   b89a6:	230a      	movs	r3, #10
   b89a8:	e7ab      	b.n	b8902 <_strtol_l.constprop.0+0x56>
   b89aa:	bf00      	nop
   b89ac:	000ba218 	.word	0x000ba218

000b89b0 <strtol>:
   b89b0:	4613      	mov	r3, r2
   b89b2:	460a      	mov	r2, r1
   b89b4:	4601      	mov	r1, r0
   b89b6:	4802      	ldr	r0, [pc, #8]	; (b89c0 <strtol+0x10>)
   b89b8:	6800      	ldr	r0, [r0, #0]
   b89ba:	f7ff bf77 	b.w	b88ac <_strtol_l.constprop.0>
   b89be:	bf00      	nop
   b89c0:	2003cd14 	.word	0x2003cd14

000b89c4 <__register_exitproc>:
   b89c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b89c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8a84 <__register_exitproc+0xc0>
   b89cc:	4606      	mov	r6, r0
   b89ce:	f8d8 0000 	ldr.w	r0, [r8]
   b89d2:	461f      	mov	r7, r3
   b89d4:	460d      	mov	r5, r1
   b89d6:	4691      	mov	r9, r2
   b89d8:	f000 fbc6 	bl	b9168 <__retarget_lock_acquire_recursive>
   b89dc:	4b25      	ldr	r3, [pc, #148]	; (b8a74 <__register_exitproc+0xb0>)
   b89de:	681c      	ldr	r4, [r3, #0]
   b89e0:	b934      	cbnz	r4, b89f0 <__register_exitproc+0x2c>
   b89e2:	4c25      	ldr	r4, [pc, #148]	; (b8a78 <__register_exitproc+0xb4>)
   b89e4:	601c      	str	r4, [r3, #0]
   b89e6:	4b25      	ldr	r3, [pc, #148]	; (b8a7c <__register_exitproc+0xb8>)
   b89e8:	b113      	cbz	r3, b89f0 <__register_exitproc+0x2c>
   b89ea:	681b      	ldr	r3, [r3, #0]
   b89ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b89f0:	6863      	ldr	r3, [r4, #4]
   b89f2:	2b1f      	cmp	r3, #31
   b89f4:	dd07      	ble.n	b8a06 <__register_exitproc+0x42>
   b89f6:	f8d8 0000 	ldr.w	r0, [r8]
   b89fa:	f000 fbb7 	bl	b916c <__retarget_lock_release_recursive>
   b89fe:	f04f 30ff 	mov.w	r0, #4294967295
   b8a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8a06:	b34e      	cbz	r6, b8a5c <__register_exitproc+0x98>
   b8a08:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8a0c:	b988      	cbnz	r0, b8a32 <__register_exitproc+0x6e>
   b8a0e:	4b1c      	ldr	r3, [pc, #112]	; (b8a80 <__register_exitproc+0xbc>)
   b8a10:	b923      	cbnz	r3, b8a1c <__register_exitproc+0x58>
   b8a12:	f8d8 0000 	ldr.w	r0, [r8]
   b8a16:	f000 fba8 	bl	b916a <__retarget_lock_release>
   b8a1a:	e7f0      	b.n	b89fe <__register_exitproc+0x3a>
   b8a1c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8a20:	f7fc fd3e 	bl	b54a0 <malloc>
   b8a24:	2800      	cmp	r0, #0
   b8a26:	d0f4      	beq.n	b8a12 <__register_exitproc+0x4e>
   b8a28:	2300      	movs	r3, #0
   b8a2a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8a2e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8a32:	6863      	ldr	r3, [r4, #4]
   b8a34:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8a38:	2201      	movs	r2, #1
   b8a3a:	409a      	lsls	r2, r3
   b8a3c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8a40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8a44:	4313      	orrs	r3, r2
   b8a46:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8a4a:	2e02      	cmp	r6, #2
   b8a4c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8a50:	bf02      	ittt	eq
   b8a52:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8a56:	4313      	orreq	r3, r2
   b8a58:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8a5c:	6863      	ldr	r3, [r4, #4]
   b8a5e:	f8d8 0000 	ldr.w	r0, [r8]
   b8a62:	1c5a      	adds	r2, r3, #1
   b8a64:	3302      	adds	r3, #2
   b8a66:	6062      	str	r2, [r4, #4]
   b8a68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8a6c:	f000 fb7e 	bl	b916c <__retarget_lock_release_recursive>
   b8a70:	2000      	movs	r0, #0
   b8a72:	e7c6      	b.n	b8a02 <__register_exitproc+0x3e>
   b8a74:	2003e7ec 	.word	0x2003e7ec
   b8a78:	2003e760 	.word	0x2003e760
   b8a7c:	00000000 	.word	0x00000000
   b8a80:	000b54a1 	.word	0x000b54a1
   b8a84:	2003cd78 	.word	0x2003cd78

000b8a88 <rshift>:
   b8a88:	6903      	ldr	r3, [r0, #16]
   b8a8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b8a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8a92:	ea4f 1261 	mov.w	r2, r1, asr #5
   b8a96:	f100 0414 	add.w	r4, r0, #20
   b8a9a:	dd45      	ble.n	b8b28 <rshift+0xa0>
   b8a9c:	f011 011f 	ands.w	r1, r1, #31
   b8aa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b8aa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b8aa8:	d10c      	bne.n	b8ac4 <rshift+0x3c>
   b8aaa:	f100 0710 	add.w	r7, r0, #16
   b8aae:	4629      	mov	r1, r5
   b8ab0:	42b1      	cmp	r1, r6
   b8ab2:	d334      	bcc.n	b8b1e <rshift+0x96>
   b8ab4:	1a9b      	subs	r3, r3, r2
   b8ab6:	009b      	lsls	r3, r3, #2
   b8ab8:	1eea      	subs	r2, r5, #3
   b8aba:	4296      	cmp	r6, r2
   b8abc:	bf38      	it	cc
   b8abe:	2300      	movcc	r3, #0
   b8ac0:	4423      	add	r3, r4
   b8ac2:	e015      	b.n	b8af0 <rshift+0x68>
   b8ac4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b8ac8:	f1c1 0820 	rsb	r8, r1, #32
   b8acc:	40cf      	lsrs	r7, r1
   b8ace:	f105 0e04 	add.w	lr, r5, #4
   b8ad2:	46a1      	mov	r9, r4
   b8ad4:	4576      	cmp	r6, lr
   b8ad6:	46f4      	mov	ip, lr
   b8ad8:	d815      	bhi.n	b8b06 <rshift+0x7e>
   b8ada:	1a9a      	subs	r2, r3, r2
   b8adc:	0092      	lsls	r2, r2, #2
   b8ade:	3a04      	subs	r2, #4
   b8ae0:	3501      	adds	r5, #1
   b8ae2:	42ae      	cmp	r6, r5
   b8ae4:	bf38      	it	cc
   b8ae6:	2200      	movcc	r2, #0
   b8ae8:	18a3      	adds	r3, r4, r2
   b8aea:	50a7      	str	r7, [r4, r2]
   b8aec:	b107      	cbz	r7, b8af0 <rshift+0x68>
   b8aee:	3304      	adds	r3, #4
   b8af0:	1b1a      	subs	r2, r3, r4
   b8af2:	42a3      	cmp	r3, r4
   b8af4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b8af8:	bf08      	it	eq
   b8afa:	2300      	moveq	r3, #0
   b8afc:	6102      	str	r2, [r0, #16]
   b8afe:	bf08      	it	eq
   b8b00:	6143      	streq	r3, [r0, #20]
   b8b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8b06:	f8dc c000 	ldr.w	ip, [ip]
   b8b0a:	fa0c fc08 	lsl.w	ip, ip, r8
   b8b0e:	ea4c 0707 	orr.w	r7, ip, r7
   b8b12:	f849 7b04 	str.w	r7, [r9], #4
   b8b16:	f85e 7b04 	ldr.w	r7, [lr], #4
   b8b1a:	40cf      	lsrs	r7, r1
   b8b1c:	e7da      	b.n	b8ad4 <rshift+0x4c>
   b8b1e:	f851 cb04 	ldr.w	ip, [r1], #4
   b8b22:	f847 cf04 	str.w	ip, [r7, #4]!
   b8b26:	e7c3      	b.n	b8ab0 <rshift+0x28>
   b8b28:	4623      	mov	r3, r4
   b8b2a:	e7e1      	b.n	b8af0 <rshift+0x68>

000b8b2c <__hexdig_fun>:
   b8b2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8b30:	2b09      	cmp	r3, #9
   b8b32:	d802      	bhi.n	b8b3a <__hexdig_fun+0xe>
   b8b34:	3820      	subs	r0, #32
   b8b36:	b2c0      	uxtb	r0, r0
   b8b38:	4770      	bx	lr
   b8b3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8b3e:	2b05      	cmp	r3, #5
   b8b40:	d801      	bhi.n	b8b46 <__hexdig_fun+0x1a>
   b8b42:	3847      	subs	r0, #71	; 0x47
   b8b44:	e7f7      	b.n	b8b36 <__hexdig_fun+0xa>
   b8b46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8b4a:	2b05      	cmp	r3, #5
   b8b4c:	d801      	bhi.n	b8b52 <__hexdig_fun+0x26>
   b8b4e:	3827      	subs	r0, #39	; 0x27
   b8b50:	e7f1      	b.n	b8b36 <__hexdig_fun+0xa>
   b8b52:	2000      	movs	r0, #0
   b8b54:	4770      	bx	lr
	...

000b8b58 <__gethex>:
   b8b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b5c:	ed2d 8b02 	vpush	{d8}
   b8b60:	b089      	sub	sp, #36	; 0x24
   b8b62:	ee08 0a10 	vmov	s16, r0
   b8b66:	9304      	str	r3, [sp, #16]
   b8b68:	4bb4      	ldr	r3, [pc, #720]	; (b8e3c <__gethex+0x2e4>)
   b8b6a:	681b      	ldr	r3, [r3, #0]
   b8b6c:	9301      	str	r3, [sp, #4]
   b8b6e:	4618      	mov	r0, r3
   b8b70:	468b      	mov	fp, r1
   b8b72:	4690      	mov	r8, r2
   b8b74:	f7fe fff3 	bl	b7b5e <strlen>
   b8b78:	9b01      	ldr	r3, [sp, #4]
   b8b7a:	f8db 2000 	ldr.w	r2, [fp]
   b8b7e:	4403      	add	r3, r0
   b8b80:	4682      	mov	sl, r0
   b8b82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b8b86:	9305      	str	r3, [sp, #20]
   b8b88:	1c93      	adds	r3, r2, #2
   b8b8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b8b8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b8b92:	32fe      	adds	r2, #254	; 0xfe
   b8b94:	18d1      	adds	r1, r2, r3
   b8b96:	461f      	mov	r7, r3
   b8b98:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8b9c:	9100      	str	r1, [sp, #0]
   b8b9e:	2830      	cmp	r0, #48	; 0x30
   b8ba0:	d0f8      	beq.n	b8b94 <__gethex+0x3c>
   b8ba2:	f7ff ffc3 	bl	b8b2c <__hexdig_fun>
   b8ba6:	4604      	mov	r4, r0
   b8ba8:	2800      	cmp	r0, #0
   b8baa:	d13a      	bne.n	b8c22 <__gethex+0xca>
   b8bac:	9901      	ldr	r1, [sp, #4]
   b8bae:	4652      	mov	r2, sl
   b8bb0:	4638      	mov	r0, r7
   b8bb2:	f7fe ffdc 	bl	b7b6e <strncmp>
   b8bb6:	4605      	mov	r5, r0
   b8bb8:	2800      	cmp	r0, #0
   b8bba:	d168      	bne.n	b8c8e <__gethex+0x136>
   b8bbc:	f817 000a 	ldrb.w	r0, [r7, sl]
   b8bc0:	eb07 060a 	add.w	r6, r7, sl
   b8bc4:	f7ff ffb2 	bl	b8b2c <__hexdig_fun>
   b8bc8:	2800      	cmp	r0, #0
   b8bca:	d062      	beq.n	b8c92 <__gethex+0x13a>
   b8bcc:	4633      	mov	r3, r6
   b8bce:	7818      	ldrb	r0, [r3, #0]
   b8bd0:	2830      	cmp	r0, #48	; 0x30
   b8bd2:	461f      	mov	r7, r3
   b8bd4:	f103 0301 	add.w	r3, r3, #1
   b8bd8:	d0f9      	beq.n	b8bce <__gethex+0x76>
   b8bda:	f7ff ffa7 	bl	b8b2c <__hexdig_fun>
   b8bde:	2301      	movs	r3, #1
   b8be0:	fab0 f480 	clz	r4, r0
   b8be4:	0964      	lsrs	r4, r4, #5
   b8be6:	4635      	mov	r5, r6
   b8be8:	9300      	str	r3, [sp, #0]
   b8bea:	463a      	mov	r2, r7
   b8bec:	4616      	mov	r6, r2
   b8bee:	3201      	adds	r2, #1
   b8bf0:	7830      	ldrb	r0, [r6, #0]
   b8bf2:	f7ff ff9b 	bl	b8b2c <__hexdig_fun>
   b8bf6:	2800      	cmp	r0, #0
   b8bf8:	d1f8      	bne.n	b8bec <__gethex+0x94>
   b8bfa:	9901      	ldr	r1, [sp, #4]
   b8bfc:	4652      	mov	r2, sl
   b8bfe:	4630      	mov	r0, r6
   b8c00:	f7fe ffb5 	bl	b7b6e <strncmp>
   b8c04:	b980      	cbnz	r0, b8c28 <__gethex+0xd0>
   b8c06:	b94d      	cbnz	r5, b8c1c <__gethex+0xc4>
   b8c08:	eb06 050a 	add.w	r5, r6, sl
   b8c0c:	462a      	mov	r2, r5
   b8c0e:	4616      	mov	r6, r2
   b8c10:	3201      	adds	r2, #1
   b8c12:	7830      	ldrb	r0, [r6, #0]
   b8c14:	f7ff ff8a 	bl	b8b2c <__hexdig_fun>
   b8c18:	2800      	cmp	r0, #0
   b8c1a:	d1f8      	bne.n	b8c0e <__gethex+0xb6>
   b8c1c:	1bad      	subs	r5, r5, r6
   b8c1e:	00ad      	lsls	r5, r5, #2
   b8c20:	e004      	b.n	b8c2c <__gethex+0xd4>
   b8c22:	2400      	movs	r4, #0
   b8c24:	4625      	mov	r5, r4
   b8c26:	e7e0      	b.n	b8bea <__gethex+0x92>
   b8c28:	2d00      	cmp	r5, #0
   b8c2a:	d1f7      	bne.n	b8c1c <__gethex+0xc4>
   b8c2c:	7833      	ldrb	r3, [r6, #0]
   b8c2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8c32:	2b50      	cmp	r3, #80	; 0x50
   b8c34:	d13b      	bne.n	b8cae <__gethex+0x156>
   b8c36:	7873      	ldrb	r3, [r6, #1]
   b8c38:	2b2b      	cmp	r3, #43	; 0x2b
   b8c3a:	d02c      	beq.n	b8c96 <__gethex+0x13e>
   b8c3c:	2b2d      	cmp	r3, #45	; 0x2d
   b8c3e:	d02e      	beq.n	b8c9e <__gethex+0x146>
   b8c40:	1c71      	adds	r1, r6, #1
   b8c42:	f04f 0900 	mov.w	r9, #0
   b8c46:	7808      	ldrb	r0, [r1, #0]
   b8c48:	f7ff ff70 	bl	b8b2c <__hexdig_fun>
   b8c4c:	1e43      	subs	r3, r0, #1
   b8c4e:	b2db      	uxtb	r3, r3
   b8c50:	2b18      	cmp	r3, #24
   b8c52:	d82c      	bhi.n	b8cae <__gethex+0x156>
   b8c54:	f1a0 0210 	sub.w	r2, r0, #16
   b8c58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b8c5c:	f7ff ff66 	bl	b8b2c <__hexdig_fun>
   b8c60:	1e43      	subs	r3, r0, #1
   b8c62:	b2db      	uxtb	r3, r3
   b8c64:	2b18      	cmp	r3, #24
   b8c66:	d91d      	bls.n	b8ca4 <__gethex+0x14c>
   b8c68:	f1b9 0f00 	cmp.w	r9, #0
   b8c6c:	d000      	beq.n	b8c70 <__gethex+0x118>
   b8c6e:	4252      	negs	r2, r2
   b8c70:	4415      	add	r5, r2
   b8c72:	f8cb 1000 	str.w	r1, [fp]
   b8c76:	b1e4      	cbz	r4, b8cb2 <__gethex+0x15a>
   b8c78:	9b00      	ldr	r3, [sp, #0]
   b8c7a:	2b00      	cmp	r3, #0
   b8c7c:	bf14      	ite	ne
   b8c7e:	2700      	movne	r7, #0
   b8c80:	2706      	moveq	r7, #6
   b8c82:	4638      	mov	r0, r7
   b8c84:	b009      	add	sp, #36	; 0x24
   b8c86:	ecbd 8b02 	vpop	{d8}
   b8c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8c8e:	463e      	mov	r6, r7
   b8c90:	4625      	mov	r5, r4
   b8c92:	2401      	movs	r4, #1
   b8c94:	e7ca      	b.n	b8c2c <__gethex+0xd4>
   b8c96:	f04f 0900 	mov.w	r9, #0
   b8c9a:	1cb1      	adds	r1, r6, #2
   b8c9c:	e7d3      	b.n	b8c46 <__gethex+0xee>
   b8c9e:	f04f 0901 	mov.w	r9, #1
   b8ca2:	e7fa      	b.n	b8c9a <__gethex+0x142>
   b8ca4:	230a      	movs	r3, #10
   b8ca6:	fb03 0202 	mla	r2, r3, r2, r0
   b8caa:	3a10      	subs	r2, #16
   b8cac:	e7d4      	b.n	b8c58 <__gethex+0x100>
   b8cae:	4631      	mov	r1, r6
   b8cb0:	e7df      	b.n	b8c72 <__gethex+0x11a>
   b8cb2:	1bf3      	subs	r3, r6, r7
   b8cb4:	3b01      	subs	r3, #1
   b8cb6:	4621      	mov	r1, r4
   b8cb8:	2b07      	cmp	r3, #7
   b8cba:	dc0b      	bgt.n	b8cd4 <__gethex+0x17c>
   b8cbc:	ee18 0a10 	vmov	r0, s16
   b8cc0:	f000 fa68 	bl	b9194 <_Balloc>
   b8cc4:	4604      	mov	r4, r0
   b8cc6:	b940      	cbnz	r0, b8cda <__gethex+0x182>
   b8cc8:	4b5d      	ldr	r3, [pc, #372]	; (b8e40 <__gethex+0x2e8>)
   b8cca:	4602      	mov	r2, r0
   b8ccc:	21de      	movs	r1, #222	; 0xde
   b8cce:	485d      	ldr	r0, [pc, #372]	; (b8e44 <__gethex+0x2ec>)
   b8cd0:	f7fc fc2e 	bl	b5530 <__assert_func>
   b8cd4:	3101      	adds	r1, #1
   b8cd6:	105b      	asrs	r3, r3, #1
   b8cd8:	e7ee      	b.n	b8cb8 <__gethex+0x160>
   b8cda:	f100 0914 	add.w	r9, r0, #20
   b8cde:	f04f 0b00 	mov.w	fp, #0
   b8ce2:	f1ca 0301 	rsb	r3, sl, #1
   b8ce6:	f8cd 9008 	str.w	r9, [sp, #8]
   b8cea:	f8cd b000 	str.w	fp, [sp]
   b8cee:	9306      	str	r3, [sp, #24]
   b8cf0:	42b7      	cmp	r7, r6
   b8cf2:	d340      	bcc.n	b8d76 <__gethex+0x21e>
   b8cf4:	9802      	ldr	r0, [sp, #8]
   b8cf6:	9b00      	ldr	r3, [sp, #0]
   b8cf8:	f840 3b04 	str.w	r3, [r0], #4
   b8cfc:	eba0 0009 	sub.w	r0, r0, r9
   b8d00:	1080      	asrs	r0, r0, #2
   b8d02:	0146      	lsls	r6, r0, #5
   b8d04:	6120      	str	r0, [r4, #16]
   b8d06:	4618      	mov	r0, r3
   b8d08:	f000 fb36 	bl	b9378 <__hi0bits>
   b8d0c:	1a30      	subs	r0, r6, r0
   b8d0e:	f8d8 6000 	ldr.w	r6, [r8]
   b8d12:	42b0      	cmp	r0, r6
   b8d14:	dd63      	ble.n	b8dde <__gethex+0x286>
   b8d16:	1b87      	subs	r7, r0, r6
   b8d18:	4639      	mov	r1, r7
   b8d1a:	4620      	mov	r0, r4
   b8d1c:	f000 feda 	bl	b9ad4 <__any_on>
   b8d20:	4682      	mov	sl, r0
   b8d22:	b1a8      	cbz	r0, b8d50 <__gethex+0x1f8>
   b8d24:	1e7b      	subs	r3, r7, #1
   b8d26:	1159      	asrs	r1, r3, #5
   b8d28:	f003 021f 	and.w	r2, r3, #31
   b8d2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b8d30:	f04f 0a01 	mov.w	sl, #1
   b8d34:	fa0a f202 	lsl.w	r2, sl, r2
   b8d38:	420a      	tst	r2, r1
   b8d3a:	d009      	beq.n	b8d50 <__gethex+0x1f8>
   b8d3c:	4553      	cmp	r3, sl
   b8d3e:	dd05      	ble.n	b8d4c <__gethex+0x1f4>
   b8d40:	1eb9      	subs	r1, r7, #2
   b8d42:	4620      	mov	r0, r4
   b8d44:	f000 fec6 	bl	b9ad4 <__any_on>
   b8d48:	2800      	cmp	r0, #0
   b8d4a:	d145      	bne.n	b8dd8 <__gethex+0x280>
   b8d4c:	f04f 0a02 	mov.w	sl, #2
   b8d50:	4639      	mov	r1, r7
   b8d52:	4620      	mov	r0, r4
   b8d54:	f7ff fe98 	bl	b8a88 <rshift>
   b8d58:	443d      	add	r5, r7
   b8d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8d5e:	42ab      	cmp	r3, r5
   b8d60:	da4c      	bge.n	b8dfc <__gethex+0x2a4>
   b8d62:	ee18 0a10 	vmov	r0, s16
   b8d66:	4621      	mov	r1, r4
   b8d68:	f000 fa54 	bl	b9214 <_Bfree>
   b8d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8d6e:	2300      	movs	r3, #0
   b8d70:	6013      	str	r3, [r2, #0]
   b8d72:	27a3      	movs	r7, #163	; 0xa3
   b8d74:	e785      	b.n	b8c82 <__gethex+0x12a>
   b8d76:	1e73      	subs	r3, r6, #1
   b8d78:	9a05      	ldr	r2, [sp, #20]
   b8d7a:	9303      	str	r3, [sp, #12]
   b8d7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b8d80:	4293      	cmp	r3, r2
   b8d82:	d019      	beq.n	b8db8 <__gethex+0x260>
   b8d84:	f1bb 0f20 	cmp.w	fp, #32
   b8d88:	d107      	bne.n	b8d9a <__gethex+0x242>
   b8d8a:	9b02      	ldr	r3, [sp, #8]
   b8d8c:	9a00      	ldr	r2, [sp, #0]
   b8d8e:	f843 2b04 	str.w	r2, [r3], #4
   b8d92:	9302      	str	r3, [sp, #8]
   b8d94:	2300      	movs	r3, #0
   b8d96:	9300      	str	r3, [sp, #0]
   b8d98:	469b      	mov	fp, r3
   b8d9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b8d9e:	f7ff fec5 	bl	b8b2c <__hexdig_fun>
   b8da2:	9b00      	ldr	r3, [sp, #0]
   b8da4:	f000 000f 	and.w	r0, r0, #15
   b8da8:	fa00 f00b 	lsl.w	r0, r0, fp
   b8dac:	4303      	orrs	r3, r0
   b8dae:	9300      	str	r3, [sp, #0]
   b8db0:	f10b 0b04 	add.w	fp, fp, #4
   b8db4:	9b03      	ldr	r3, [sp, #12]
   b8db6:	e00d      	b.n	b8dd4 <__gethex+0x27c>
   b8db8:	9b03      	ldr	r3, [sp, #12]
   b8dba:	9a06      	ldr	r2, [sp, #24]
   b8dbc:	4413      	add	r3, r2
   b8dbe:	42bb      	cmp	r3, r7
   b8dc0:	d3e0      	bcc.n	b8d84 <__gethex+0x22c>
   b8dc2:	4618      	mov	r0, r3
   b8dc4:	9901      	ldr	r1, [sp, #4]
   b8dc6:	9307      	str	r3, [sp, #28]
   b8dc8:	4652      	mov	r2, sl
   b8dca:	f7fe fed0 	bl	b7b6e <strncmp>
   b8dce:	9b07      	ldr	r3, [sp, #28]
   b8dd0:	2800      	cmp	r0, #0
   b8dd2:	d1d7      	bne.n	b8d84 <__gethex+0x22c>
   b8dd4:	461e      	mov	r6, r3
   b8dd6:	e78b      	b.n	b8cf0 <__gethex+0x198>
   b8dd8:	f04f 0a03 	mov.w	sl, #3
   b8ddc:	e7b8      	b.n	b8d50 <__gethex+0x1f8>
   b8dde:	da0a      	bge.n	b8df6 <__gethex+0x29e>
   b8de0:	1a37      	subs	r7, r6, r0
   b8de2:	4621      	mov	r1, r4
   b8de4:	ee18 0a10 	vmov	r0, s16
   b8de8:	463a      	mov	r2, r7
   b8dea:	f000 fc2f 	bl	b964c <__lshift>
   b8dee:	1bed      	subs	r5, r5, r7
   b8df0:	4604      	mov	r4, r0
   b8df2:	f100 0914 	add.w	r9, r0, #20
   b8df6:	f04f 0a00 	mov.w	sl, #0
   b8dfa:	e7ae      	b.n	b8d5a <__gethex+0x202>
   b8dfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b8e00:	42a8      	cmp	r0, r5
   b8e02:	dd72      	ble.n	b8eea <__gethex+0x392>
   b8e04:	1b45      	subs	r5, r0, r5
   b8e06:	42ae      	cmp	r6, r5
   b8e08:	dc36      	bgt.n	b8e78 <__gethex+0x320>
   b8e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8e0e:	2b02      	cmp	r3, #2
   b8e10:	d02a      	beq.n	b8e68 <__gethex+0x310>
   b8e12:	2b03      	cmp	r3, #3
   b8e14:	d02c      	beq.n	b8e70 <__gethex+0x318>
   b8e16:	2b01      	cmp	r3, #1
   b8e18:	d11c      	bne.n	b8e54 <__gethex+0x2fc>
   b8e1a:	42ae      	cmp	r6, r5
   b8e1c:	d11a      	bne.n	b8e54 <__gethex+0x2fc>
   b8e1e:	2e01      	cmp	r6, #1
   b8e20:	d112      	bne.n	b8e48 <__gethex+0x2f0>
   b8e22:	9a04      	ldr	r2, [sp, #16]
   b8e24:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8e28:	6013      	str	r3, [r2, #0]
   b8e2a:	2301      	movs	r3, #1
   b8e2c:	6123      	str	r3, [r4, #16]
   b8e2e:	f8c9 3000 	str.w	r3, [r9]
   b8e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8e34:	2762      	movs	r7, #98	; 0x62
   b8e36:	601c      	str	r4, [r3, #0]
   b8e38:	e723      	b.n	b8c82 <__gethex+0x12a>
   b8e3a:	bf00      	nop
   b8e3c:	000ba3b0 	.word	0x000ba3b0
   b8e40:	000ba318 	.word	0x000ba318
   b8e44:	000ba329 	.word	0x000ba329
   b8e48:	1e71      	subs	r1, r6, #1
   b8e4a:	4620      	mov	r0, r4
   b8e4c:	f000 fe42 	bl	b9ad4 <__any_on>
   b8e50:	2800      	cmp	r0, #0
   b8e52:	d1e6      	bne.n	b8e22 <__gethex+0x2ca>
   b8e54:	ee18 0a10 	vmov	r0, s16
   b8e58:	4621      	mov	r1, r4
   b8e5a:	f000 f9db 	bl	b9214 <_Bfree>
   b8e5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8e60:	2300      	movs	r3, #0
   b8e62:	6013      	str	r3, [r2, #0]
   b8e64:	2750      	movs	r7, #80	; 0x50
   b8e66:	e70c      	b.n	b8c82 <__gethex+0x12a>
   b8e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8e6a:	2b00      	cmp	r3, #0
   b8e6c:	d1f2      	bne.n	b8e54 <__gethex+0x2fc>
   b8e6e:	e7d8      	b.n	b8e22 <__gethex+0x2ca>
   b8e70:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8e72:	2b00      	cmp	r3, #0
   b8e74:	d1d5      	bne.n	b8e22 <__gethex+0x2ca>
   b8e76:	e7ed      	b.n	b8e54 <__gethex+0x2fc>
   b8e78:	1e6f      	subs	r7, r5, #1
   b8e7a:	f1ba 0f00 	cmp.w	sl, #0
   b8e7e:	d131      	bne.n	b8ee4 <__gethex+0x38c>
   b8e80:	b127      	cbz	r7, b8e8c <__gethex+0x334>
   b8e82:	4639      	mov	r1, r7
   b8e84:	4620      	mov	r0, r4
   b8e86:	f000 fe25 	bl	b9ad4 <__any_on>
   b8e8a:	4682      	mov	sl, r0
   b8e8c:	117b      	asrs	r3, r7, #5
   b8e8e:	2101      	movs	r1, #1
   b8e90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b8e94:	f007 071f 	and.w	r7, r7, #31
   b8e98:	fa01 f707 	lsl.w	r7, r1, r7
   b8e9c:	421f      	tst	r7, r3
   b8e9e:	4629      	mov	r1, r5
   b8ea0:	4620      	mov	r0, r4
   b8ea2:	bf18      	it	ne
   b8ea4:	f04a 0a02 	orrne.w	sl, sl, #2
   b8ea8:	1b76      	subs	r6, r6, r5
   b8eaa:	f7ff fded 	bl	b8a88 <rshift>
   b8eae:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b8eb2:	2702      	movs	r7, #2
   b8eb4:	f1ba 0f00 	cmp.w	sl, #0
   b8eb8:	d048      	beq.n	b8f4c <__gethex+0x3f4>
   b8eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8ebe:	2b02      	cmp	r3, #2
   b8ec0:	d015      	beq.n	b8eee <__gethex+0x396>
   b8ec2:	2b03      	cmp	r3, #3
   b8ec4:	d017      	beq.n	b8ef6 <__gethex+0x39e>
   b8ec6:	2b01      	cmp	r3, #1
   b8ec8:	d109      	bne.n	b8ede <__gethex+0x386>
   b8eca:	f01a 0f02 	tst.w	sl, #2
   b8ece:	d006      	beq.n	b8ede <__gethex+0x386>
   b8ed0:	f8d9 0000 	ldr.w	r0, [r9]
   b8ed4:	ea4a 0a00 	orr.w	sl, sl, r0
   b8ed8:	f01a 0f01 	tst.w	sl, #1
   b8edc:	d10e      	bne.n	b8efc <__gethex+0x3a4>
   b8ede:	f047 0710 	orr.w	r7, r7, #16
   b8ee2:	e033      	b.n	b8f4c <__gethex+0x3f4>
   b8ee4:	f04f 0a01 	mov.w	sl, #1
   b8ee8:	e7d0      	b.n	b8e8c <__gethex+0x334>
   b8eea:	2701      	movs	r7, #1
   b8eec:	e7e2      	b.n	b8eb4 <__gethex+0x35c>
   b8eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8ef0:	f1c3 0301 	rsb	r3, r3, #1
   b8ef4:	9315      	str	r3, [sp, #84]	; 0x54
   b8ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8ef8:	2b00      	cmp	r3, #0
   b8efa:	d0f0      	beq.n	b8ede <__gethex+0x386>
   b8efc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b8f00:	f104 0314 	add.w	r3, r4, #20
   b8f04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b8f08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b8f0c:	f04f 0c00 	mov.w	ip, #0
   b8f10:	4618      	mov	r0, r3
   b8f12:	f853 2b04 	ldr.w	r2, [r3], #4
   b8f16:	f1b2 3fff 	cmp.w	r2, #4294967295
   b8f1a:	d01c      	beq.n	b8f56 <__gethex+0x3fe>
   b8f1c:	3201      	adds	r2, #1
   b8f1e:	6002      	str	r2, [r0, #0]
   b8f20:	2f02      	cmp	r7, #2
   b8f22:	f104 0314 	add.w	r3, r4, #20
   b8f26:	d13f      	bne.n	b8fa8 <__gethex+0x450>
   b8f28:	f8d8 2000 	ldr.w	r2, [r8]
   b8f2c:	3a01      	subs	r2, #1
   b8f2e:	42b2      	cmp	r2, r6
   b8f30:	d10a      	bne.n	b8f48 <__gethex+0x3f0>
   b8f32:	1171      	asrs	r1, r6, #5
   b8f34:	2201      	movs	r2, #1
   b8f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b8f3a:	f006 061f 	and.w	r6, r6, #31
   b8f3e:	fa02 f606 	lsl.w	r6, r2, r6
   b8f42:	421e      	tst	r6, r3
   b8f44:	bf18      	it	ne
   b8f46:	4617      	movne	r7, r2
   b8f48:	f047 0720 	orr.w	r7, r7, #32
   b8f4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8f4e:	601c      	str	r4, [r3, #0]
   b8f50:	9b04      	ldr	r3, [sp, #16]
   b8f52:	601d      	str	r5, [r3, #0]
   b8f54:	e695      	b.n	b8c82 <__gethex+0x12a>
   b8f56:	4299      	cmp	r1, r3
   b8f58:	f843 cc04 	str.w	ip, [r3, #-4]
   b8f5c:	d8d8      	bhi.n	b8f10 <__gethex+0x3b8>
   b8f5e:	68a3      	ldr	r3, [r4, #8]
   b8f60:	459b      	cmp	fp, r3
   b8f62:	db19      	blt.n	b8f98 <__gethex+0x440>
   b8f64:	6861      	ldr	r1, [r4, #4]
   b8f66:	ee18 0a10 	vmov	r0, s16
   b8f6a:	3101      	adds	r1, #1
   b8f6c:	f000 f912 	bl	b9194 <_Balloc>
   b8f70:	4681      	mov	r9, r0
   b8f72:	b918      	cbnz	r0, b8f7c <__gethex+0x424>
   b8f74:	4b1a      	ldr	r3, [pc, #104]	; (b8fe0 <__gethex+0x488>)
   b8f76:	4602      	mov	r2, r0
   b8f78:	2184      	movs	r1, #132	; 0x84
   b8f7a:	e6a8      	b.n	b8cce <__gethex+0x176>
   b8f7c:	6922      	ldr	r2, [r4, #16]
   b8f7e:	3202      	adds	r2, #2
   b8f80:	f104 010c 	add.w	r1, r4, #12
   b8f84:	0092      	lsls	r2, r2, #2
   b8f86:	300c      	adds	r0, #12
   b8f88:	f7fe fd65 	bl	b7a56 <memcpy>
   b8f8c:	4621      	mov	r1, r4
   b8f8e:	ee18 0a10 	vmov	r0, s16
   b8f92:	f000 f93f 	bl	b9214 <_Bfree>
   b8f96:	464c      	mov	r4, r9
   b8f98:	6923      	ldr	r3, [r4, #16]
   b8f9a:	1c5a      	adds	r2, r3, #1
   b8f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b8fa0:	6122      	str	r2, [r4, #16]
   b8fa2:	2201      	movs	r2, #1
   b8fa4:	615a      	str	r2, [r3, #20]
   b8fa6:	e7bb      	b.n	b8f20 <__gethex+0x3c8>
   b8fa8:	6922      	ldr	r2, [r4, #16]
   b8faa:	455a      	cmp	r2, fp
   b8fac:	dd0b      	ble.n	b8fc6 <__gethex+0x46e>
   b8fae:	2101      	movs	r1, #1
   b8fb0:	4620      	mov	r0, r4
   b8fb2:	f7ff fd69 	bl	b8a88 <rshift>
   b8fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8fba:	3501      	adds	r5, #1
   b8fbc:	42ab      	cmp	r3, r5
   b8fbe:	f6ff aed0 	blt.w	b8d62 <__gethex+0x20a>
   b8fc2:	2701      	movs	r7, #1
   b8fc4:	e7c0      	b.n	b8f48 <__gethex+0x3f0>
   b8fc6:	f016 061f 	ands.w	r6, r6, #31
   b8fca:	d0fa      	beq.n	b8fc2 <__gethex+0x46a>
   b8fcc:	4453      	add	r3, sl
   b8fce:	f1c6 0620 	rsb	r6, r6, #32
   b8fd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b8fd6:	f000 f9cf 	bl	b9378 <__hi0bits>
   b8fda:	42b0      	cmp	r0, r6
   b8fdc:	dbe7      	blt.n	b8fae <__gethex+0x456>
   b8fde:	e7f0      	b.n	b8fc2 <__gethex+0x46a>
   b8fe0:	000ba318 	.word	0x000ba318

000b8fe4 <L_shift>:
   b8fe4:	f1c2 0208 	rsb	r2, r2, #8
   b8fe8:	0092      	lsls	r2, r2, #2
   b8fea:	b570      	push	{r4, r5, r6, lr}
   b8fec:	f1c2 0620 	rsb	r6, r2, #32
   b8ff0:	6843      	ldr	r3, [r0, #4]
   b8ff2:	6804      	ldr	r4, [r0, #0]
   b8ff4:	fa03 f506 	lsl.w	r5, r3, r6
   b8ff8:	432c      	orrs	r4, r5
   b8ffa:	40d3      	lsrs	r3, r2
   b8ffc:	6004      	str	r4, [r0, #0]
   b8ffe:	f840 3f04 	str.w	r3, [r0, #4]!
   b9002:	4288      	cmp	r0, r1
   b9004:	d3f4      	bcc.n	b8ff0 <L_shift+0xc>
   b9006:	bd70      	pop	{r4, r5, r6, pc}

000b9008 <__match>:
   b9008:	b530      	push	{r4, r5, lr}
   b900a:	6803      	ldr	r3, [r0, #0]
   b900c:	3301      	adds	r3, #1
   b900e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9012:	b914      	cbnz	r4, b901a <__match+0x12>
   b9014:	6003      	str	r3, [r0, #0]
   b9016:	2001      	movs	r0, #1
   b9018:	bd30      	pop	{r4, r5, pc}
   b901a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b901e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b9022:	2d19      	cmp	r5, #25
   b9024:	bf98      	it	ls
   b9026:	3220      	addls	r2, #32
   b9028:	42a2      	cmp	r2, r4
   b902a:	d0f0      	beq.n	b900e <__match+0x6>
   b902c:	2000      	movs	r0, #0
   b902e:	e7f3      	b.n	b9018 <__match+0x10>

000b9030 <__hexnan>:
   b9030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9034:	680b      	ldr	r3, [r1, #0]
   b9036:	115e      	asrs	r6, r3, #5
   b9038:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b903c:	f013 031f 	ands.w	r3, r3, #31
   b9040:	b087      	sub	sp, #28
   b9042:	bf18      	it	ne
   b9044:	3604      	addne	r6, #4
   b9046:	2500      	movs	r5, #0
   b9048:	1f37      	subs	r7, r6, #4
   b904a:	4690      	mov	r8, r2
   b904c:	6802      	ldr	r2, [r0, #0]
   b904e:	9301      	str	r3, [sp, #4]
   b9050:	4682      	mov	sl, r0
   b9052:	f846 5c04 	str.w	r5, [r6, #-4]
   b9056:	46b9      	mov	r9, r7
   b9058:	463c      	mov	r4, r7
   b905a:	9502      	str	r5, [sp, #8]
   b905c:	46ab      	mov	fp, r5
   b905e:	7851      	ldrb	r1, [r2, #1]
   b9060:	1c53      	adds	r3, r2, #1
   b9062:	9303      	str	r3, [sp, #12]
   b9064:	b341      	cbz	r1, b90b8 <__hexnan+0x88>
   b9066:	4608      	mov	r0, r1
   b9068:	9205      	str	r2, [sp, #20]
   b906a:	9104      	str	r1, [sp, #16]
   b906c:	f7ff fd5e 	bl	b8b2c <__hexdig_fun>
   b9070:	2800      	cmp	r0, #0
   b9072:	d14f      	bne.n	b9114 <__hexnan+0xe4>
   b9074:	9904      	ldr	r1, [sp, #16]
   b9076:	9a05      	ldr	r2, [sp, #20]
   b9078:	2920      	cmp	r1, #32
   b907a:	d818      	bhi.n	b90ae <__hexnan+0x7e>
   b907c:	9b02      	ldr	r3, [sp, #8]
   b907e:	459b      	cmp	fp, r3
   b9080:	dd13      	ble.n	b90aa <__hexnan+0x7a>
   b9082:	454c      	cmp	r4, r9
   b9084:	d206      	bcs.n	b9094 <__hexnan+0x64>
   b9086:	2d07      	cmp	r5, #7
   b9088:	dc04      	bgt.n	b9094 <__hexnan+0x64>
   b908a:	462a      	mov	r2, r5
   b908c:	4649      	mov	r1, r9
   b908e:	4620      	mov	r0, r4
   b9090:	f7ff ffa8 	bl	b8fe4 <L_shift>
   b9094:	4544      	cmp	r4, r8
   b9096:	d950      	bls.n	b913a <__hexnan+0x10a>
   b9098:	2300      	movs	r3, #0
   b909a:	f1a4 0904 	sub.w	r9, r4, #4
   b909e:	f844 3c04 	str.w	r3, [r4, #-4]
   b90a2:	f8cd b008 	str.w	fp, [sp, #8]
   b90a6:	464c      	mov	r4, r9
   b90a8:	461d      	mov	r5, r3
   b90aa:	9a03      	ldr	r2, [sp, #12]
   b90ac:	e7d7      	b.n	b905e <__hexnan+0x2e>
   b90ae:	2929      	cmp	r1, #41	; 0x29
   b90b0:	d156      	bne.n	b9160 <__hexnan+0x130>
   b90b2:	3202      	adds	r2, #2
   b90b4:	f8ca 2000 	str.w	r2, [sl]
   b90b8:	f1bb 0f00 	cmp.w	fp, #0
   b90bc:	d050      	beq.n	b9160 <__hexnan+0x130>
   b90be:	454c      	cmp	r4, r9
   b90c0:	d206      	bcs.n	b90d0 <__hexnan+0xa0>
   b90c2:	2d07      	cmp	r5, #7
   b90c4:	dc04      	bgt.n	b90d0 <__hexnan+0xa0>
   b90c6:	462a      	mov	r2, r5
   b90c8:	4649      	mov	r1, r9
   b90ca:	4620      	mov	r0, r4
   b90cc:	f7ff ff8a 	bl	b8fe4 <L_shift>
   b90d0:	4544      	cmp	r4, r8
   b90d2:	d934      	bls.n	b913e <__hexnan+0x10e>
   b90d4:	f1a8 0204 	sub.w	r2, r8, #4
   b90d8:	4623      	mov	r3, r4
   b90da:	f853 1b04 	ldr.w	r1, [r3], #4
   b90de:	f842 1f04 	str.w	r1, [r2, #4]!
   b90e2:	429f      	cmp	r7, r3
   b90e4:	d2f9      	bcs.n	b90da <__hexnan+0xaa>
   b90e6:	1b3b      	subs	r3, r7, r4
   b90e8:	f023 0303 	bic.w	r3, r3, #3
   b90ec:	3304      	adds	r3, #4
   b90ee:	3401      	adds	r4, #1
   b90f0:	3e03      	subs	r6, #3
   b90f2:	42b4      	cmp	r4, r6
   b90f4:	bf88      	it	hi
   b90f6:	2304      	movhi	r3, #4
   b90f8:	4443      	add	r3, r8
   b90fa:	2200      	movs	r2, #0
   b90fc:	f843 2b04 	str.w	r2, [r3], #4
   b9100:	429f      	cmp	r7, r3
   b9102:	d2fb      	bcs.n	b90fc <__hexnan+0xcc>
   b9104:	683b      	ldr	r3, [r7, #0]
   b9106:	b91b      	cbnz	r3, b9110 <__hexnan+0xe0>
   b9108:	4547      	cmp	r7, r8
   b910a:	d127      	bne.n	b915c <__hexnan+0x12c>
   b910c:	2301      	movs	r3, #1
   b910e:	603b      	str	r3, [r7, #0]
   b9110:	2005      	movs	r0, #5
   b9112:	e026      	b.n	b9162 <__hexnan+0x132>
   b9114:	3501      	adds	r5, #1
   b9116:	2d08      	cmp	r5, #8
   b9118:	f10b 0b01 	add.w	fp, fp, #1
   b911c:	dd06      	ble.n	b912c <__hexnan+0xfc>
   b911e:	4544      	cmp	r4, r8
   b9120:	d9c3      	bls.n	b90aa <__hexnan+0x7a>
   b9122:	2300      	movs	r3, #0
   b9124:	f844 3c04 	str.w	r3, [r4, #-4]
   b9128:	2501      	movs	r5, #1
   b912a:	3c04      	subs	r4, #4
   b912c:	6822      	ldr	r2, [r4, #0]
   b912e:	f000 000f 	and.w	r0, r0, #15
   b9132:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b9136:	6022      	str	r2, [r4, #0]
   b9138:	e7b7      	b.n	b90aa <__hexnan+0x7a>
   b913a:	2508      	movs	r5, #8
   b913c:	e7b5      	b.n	b90aa <__hexnan+0x7a>
   b913e:	9b01      	ldr	r3, [sp, #4]
   b9140:	2b00      	cmp	r3, #0
   b9142:	d0df      	beq.n	b9104 <__hexnan+0xd4>
   b9144:	f04f 32ff 	mov.w	r2, #4294967295
   b9148:	f1c3 0320 	rsb	r3, r3, #32
   b914c:	fa22 f303 	lsr.w	r3, r2, r3
   b9150:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b9154:	401a      	ands	r2, r3
   b9156:	f846 2c04 	str.w	r2, [r6, #-4]
   b915a:	e7d3      	b.n	b9104 <__hexnan+0xd4>
   b915c:	3f04      	subs	r7, #4
   b915e:	e7d1      	b.n	b9104 <__hexnan+0xd4>
   b9160:	2004      	movs	r0, #4
   b9162:	b007      	add	sp, #28
   b9164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9168 <__retarget_lock_acquire_recursive>:
   b9168:	4770      	bx	lr

000b916a <__retarget_lock_release>:
   b916a:	4770      	bx	lr

000b916c <__retarget_lock_release_recursive>:
   b916c:	4770      	bx	lr

000b916e <__ascii_mbtowc>:
   b916e:	b082      	sub	sp, #8
   b9170:	b901      	cbnz	r1, b9174 <__ascii_mbtowc+0x6>
   b9172:	a901      	add	r1, sp, #4
   b9174:	b142      	cbz	r2, b9188 <__ascii_mbtowc+0x1a>
   b9176:	b14b      	cbz	r3, b918c <__ascii_mbtowc+0x1e>
   b9178:	7813      	ldrb	r3, [r2, #0]
   b917a:	600b      	str	r3, [r1, #0]
   b917c:	7812      	ldrb	r2, [r2, #0]
   b917e:	1e10      	subs	r0, r2, #0
   b9180:	bf18      	it	ne
   b9182:	2001      	movne	r0, #1
   b9184:	b002      	add	sp, #8
   b9186:	4770      	bx	lr
   b9188:	4610      	mov	r0, r2
   b918a:	e7fb      	b.n	b9184 <__ascii_mbtowc+0x16>
   b918c:	f06f 0001 	mvn.w	r0, #1
   b9190:	e7f8      	b.n	b9184 <__ascii_mbtowc+0x16>
	...

000b9194 <_Balloc>:
   b9194:	b570      	push	{r4, r5, r6, lr}
   b9196:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9198:	4604      	mov	r4, r0
   b919a:	460d      	mov	r5, r1
   b919c:	b976      	cbnz	r6, b91bc <_Balloc+0x28>
   b919e:	2010      	movs	r0, #16
   b91a0:	f7fc f97e 	bl	b54a0 <malloc>
   b91a4:	4602      	mov	r2, r0
   b91a6:	6260      	str	r0, [r4, #36]	; 0x24
   b91a8:	b920      	cbnz	r0, b91b4 <_Balloc+0x20>
   b91aa:	4b18      	ldr	r3, [pc, #96]	; (b920c <_Balloc+0x78>)
   b91ac:	4818      	ldr	r0, [pc, #96]	; (b9210 <_Balloc+0x7c>)
   b91ae:	2166      	movs	r1, #102	; 0x66
   b91b0:	f7fc f9be 	bl	b5530 <__assert_func>
   b91b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b91b8:	6006      	str	r6, [r0, #0]
   b91ba:	60c6      	str	r6, [r0, #12]
   b91bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b91be:	68f3      	ldr	r3, [r6, #12]
   b91c0:	b183      	cbz	r3, b91e4 <_Balloc+0x50>
   b91c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b91c4:	68db      	ldr	r3, [r3, #12]
   b91c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b91ca:	b9b8      	cbnz	r0, b91fc <_Balloc+0x68>
   b91cc:	2101      	movs	r1, #1
   b91ce:	fa01 f605 	lsl.w	r6, r1, r5
   b91d2:	1d72      	adds	r2, r6, #5
   b91d4:	0092      	lsls	r2, r2, #2
   b91d6:	4620      	mov	r0, r4
   b91d8:	f000 fc9d 	bl	b9b16 <_calloc_r>
   b91dc:	b160      	cbz	r0, b91f8 <_Balloc+0x64>
   b91de:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b91e2:	e00e      	b.n	b9202 <_Balloc+0x6e>
   b91e4:	2221      	movs	r2, #33	; 0x21
   b91e6:	2104      	movs	r1, #4
   b91e8:	4620      	mov	r0, r4
   b91ea:	f000 fc94 	bl	b9b16 <_calloc_r>
   b91ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b91f0:	60f0      	str	r0, [r6, #12]
   b91f2:	68db      	ldr	r3, [r3, #12]
   b91f4:	2b00      	cmp	r3, #0
   b91f6:	d1e4      	bne.n	b91c2 <_Balloc+0x2e>
   b91f8:	2000      	movs	r0, #0
   b91fa:	bd70      	pop	{r4, r5, r6, pc}
   b91fc:	6802      	ldr	r2, [r0, #0]
   b91fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b9202:	2300      	movs	r3, #0
   b9204:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b9208:	e7f7      	b.n	b91fa <_Balloc+0x66>
   b920a:	bf00      	nop
   b920c:	000ba0a1 	.word	0x000ba0a1
   b9210:	000ba3c4 	.word	0x000ba3c4

000b9214 <_Bfree>:
   b9214:	b570      	push	{r4, r5, r6, lr}
   b9216:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9218:	4605      	mov	r5, r0
   b921a:	460c      	mov	r4, r1
   b921c:	b976      	cbnz	r6, b923c <_Bfree+0x28>
   b921e:	2010      	movs	r0, #16
   b9220:	f7fc f93e 	bl	b54a0 <malloc>
   b9224:	4602      	mov	r2, r0
   b9226:	6268      	str	r0, [r5, #36]	; 0x24
   b9228:	b920      	cbnz	r0, b9234 <_Bfree+0x20>
   b922a:	4b09      	ldr	r3, [pc, #36]	; (b9250 <_Bfree+0x3c>)
   b922c:	4809      	ldr	r0, [pc, #36]	; (b9254 <_Bfree+0x40>)
   b922e:	218a      	movs	r1, #138	; 0x8a
   b9230:	f7fc f97e 	bl	b5530 <__assert_func>
   b9234:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9238:	6006      	str	r6, [r0, #0]
   b923a:	60c6      	str	r6, [r0, #12]
   b923c:	b13c      	cbz	r4, b924e <_Bfree+0x3a>
   b923e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9240:	6862      	ldr	r2, [r4, #4]
   b9242:	68db      	ldr	r3, [r3, #12]
   b9244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9248:	6021      	str	r1, [r4, #0]
   b924a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b924e:	bd70      	pop	{r4, r5, r6, pc}
   b9250:	000ba0a1 	.word	0x000ba0a1
   b9254:	000ba3c4 	.word	0x000ba3c4

000b9258 <__multadd>:
   b9258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b925c:	690d      	ldr	r5, [r1, #16]
   b925e:	4607      	mov	r7, r0
   b9260:	460c      	mov	r4, r1
   b9262:	461e      	mov	r6, r3
   b9264:	f101 0c14 	add.w	ip, r1, #20
   b9268:	2000      	movs	r0, #0
   b926a:	f8dc 3000 	ldr.w	r3, [ip]
   b926e:	b299      	uxth	r1, r3
   b9270:	fb02 6101 	mla	r1, r2, r1, r6
   b9274:	0c1e      	lsrs	r6, r3, #16
   b9276:	0c0b      	lsrs	r3, r1, #16
   b9278:	fb02 3306 	mla	r3, r2, r6, r3
   b927c:	b289      	uxth	r1, r1
   b927e:	3001      	adds	r0, #1
   b9280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9284:	4285      	cmp	r5, r0
   b9286:	f84c 1b04 	str.w	r1, [ip], #4
   b928a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b928e:	dcec      	bgt.n	b926a <__multadd+0x12>
   b9290:	b30e      	cbz	r6, b92d6 <__multadd+0x7e>
   b9292:	68a3      	ldr	r3, [r4, #8]
   b9294:	42ab      	cmp	r3, r5
   b9296:	dc19      	bgt.n	b92cc <__multadd+0x74>
   b9298:	6861      	ldr	r1, [r4, #4]
   b929a:	4638      	mov	r0, r7
   b929c:	3101      	adds	r1, #1
   b929e:	f7ff ff79 	bl	b9194 <_Balloc>
   b92a2:	4680      	mov	r8, r0
   b92a4:	b928      	cbnz	r0, b92b2 <__multadd+0x5a>
   b92a6:	4602      	mov	r2, r0
   b92a8:	4b0c      	ldr	r3, [pc, #48]	; (b92dc <__multadd+0x84>)
   b92aa:	480d      	ldr	r0, [pc, #52]	; (b92e0 <__multadd+0x88>)
   b92ac:	21b5      	movs	r1, #181	; 0xb5
   b92ae:	f7fc f93f 	bl	b5530 <__assert_func>
   b92b2:	6922      	ldr	r2, [r4, #16]
   b92b4:	3202      	adds	r2, #2
   b92b6:	f104 010c 	add.w	r1, r4, #12
   b92ba:	0092      	lsls	r2, r2, #2
   b92bc:	300c      	adds	r0, #12
   b92be:	f7fe fbca 	bl	b7a56 <memcpy>
   b92c2:	4621      	mov	r1, r4
   b92c4:	4638      	mov	r0, r7
   b92c6:	f7ff ffa5 	bl	b9214 <_Bfree>
   b92ca:	4644      	mov	r4, r8
   b92cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b92d0:	3501      	adds	r5, #1
   b92d2:	615e      	str	r6, [r3, #20]
   b92d4:	6125      	str	r5, [r4, #16]
   b92d6:	4620      	mov	r0, r4
   b92d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b92dc:	000ba318 	.word	0x000ba318
   b92e0:	000ba3c4 	.word	0x000ba3c4

000b92e4 <__s2b>:
   b92e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b92e8:	460c      	mov	r4, r1
   b92ea:	4615      	mov	r5, r2
   b92ec:	461f      	mov	r7, r3
   b92ee:	2209      	movs	r2, #9
   b92f0:	3308      	adds	r3, #8
   b92f2:	4606      	mov	r6, r0
   b92f4:	fb93 f3f2 	sdiv	r3, r3, r2
   b92f8:	2100      	movs	r1, #0
   b92fa:	2201      	movs	r2, #1
   b92fc:	429a      	cmp	r2, r3
   b92fe:	db09      	blt.n	b9314 <__s2b+0x30>
   b9300:	4630      	mov	r0, r6
   b9302:	f7ff ff47 	bl	b9194 <_Balloc>
   b9306:	b940      	cbnz	r0, b931a <__s2b+0x36>
   b9308:	4602      	mov	r2, r0
   b930a:	4b19      	ldr	r3, [pc, #100]	; (b9370 <__s2b+0x8c>)
   b930c:	4819      	ldr	r0, [pc, #100]	; (b9374 <__s2b+0x90>)
   b930e:	21ce      	movs	r1, #206	; 0xce
   b9310:	f7fc f90e 	bl	b5530 <__assert_func>
   b9314:	0052      	lsls	r2, r2, #1
   b9316:	3101      	adds	r1, #1
   b9318:	e7f0      	b.n	b92fc <__s2b+0x18>
   b931a:	9b08      	ldr	r3, [sp, #32]
   b931c:	6143      	str	r3, [r0, #20]
   b931e:	2d09      	cmp	r5, #9
   b9320:	f04f 0301 	mov.w	r3, #1
   b9324:	6103      	str	r3, [r0, #16]
   b9326:	dd16      	ble.n	b9356 <__s2b+0x72>
   b9328:	f104 0909 	add.w	r9, r4, #9
   b932c:	46c8      	mov	r8, r9
   b932e:	442c      	add	r4, r5
   b9330:	f818 3b01 	ldrb.w	r3, [r8], #1
   b9334:	4601      	mov	r1, r0
   b9336:	3b30      	subs	r3, #48	; 0x30
   b9338:	220a      	movs	r2, #10
   b933a:	4630      	mov	r0, r6
   b933c:	f7ff ff8c 	bl	b9258 <__multadd>
   b9340:	45a0      	cmp	r8, r4
   b9342:	d1f5      	bne.n	b9330 <__s2b+0x4c>
   b9344:	f1a5 0408 	sub.w	r4, r5, #8
   b9348:	444c      	add	r4, r9
   b934a:	1b2d      	subs	r5, r5, r4
   b934c:	1963      	adds	r3, r4, r5
   b934e:	42bb      	cmp	r3, r7
   b9350:	db04      	blt.n	b935c <__s2b+0x78>
   b9352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9356:	340a      	adds	r4, #10
   b9358:	2509      	movs	r5, #9
   b935a:	e7f6      	b.n	b934a <__s2b+0x66>
   b935c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9360:	4601      	mov	r1, r0
   b9362:	3b30      	subs	r3, #48	; 0x30
   b9364:	220a      	movs	r2, #10
   b9366:	4630      	mov	r0, r6
   b9368:	f7ff ff76 	bl	b9258 <__multadd>
   b936c:	e7ee      	b.n	b934c <__s2b+0x68>
   b936e:	bf00      	nop
   b9370:	000ba318 	.word	0x000ba318
   b9374:	000ba3c4 	.word	0x000ba3c4

000b9378 <__hi0bits>:
   b9378:	0c03      	lsrs	r3, r0, #16
   b937a:	041b      	lsls	r3, r3, #16
   b937c:	b9d3      	cbnz	r3, b93b4 <__hi0bits+0x3c>
   b937e:	0400      	lsls	r0, r0, #16
   b9380:	2310      	movs	r3, #16
   b9382:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9386:	bf04      	itt	eq
   b9388:	0200      	lsleq	r0, r0, #8
   b938a:	3308      	addeq	r3, #8
   b938c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9390:	bf04      	itt	eq
   b9392:	0100      	lsleq	r0, r0, #4
   b9394:	3304      	addeq	r3, #4
   b9396:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b939a:	bf04      	itt	eq
   b939c:	0080      	lsleq	r0, r0, #2
   b939e:	3302      	addeq	r3, #2
   b93a0:	2800      	cmp	r0, #0
   b93a2:	db05      	blt.n	b93b0 <__hi0bits+0x38>
   b93a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b93a8:	f103 0301 	add.w	r3, r3, #1
   b93ac:	bf08      	it	eq
   b93ae:	2320      	moveq	r3, #32
   b93b0:	4618      	mov	r0, r3
   b93b2:	4770      	bx	lr
   b93b4:	2300      	movs	r3, #0
   b93b6:	e7e4      	b.n	b9382 <__hi0bits+0xa>

000b93b8 <__lo0bits>:
   b93b8:	6803      	ldr	r3, [r0, #0]
   b93ba:	f013 0207 	ands.w	r2, r3, #7
   b93be:	4601      	mov	r1, r0
   b93c0:	d00b      	beq.n	b93da <__lo0bits+0x22>
   b93c2:	07da      	lsls	r2, r3, #31
   b93c4:	d423      	bmi.n	b940e <__lo0bits+0x56>
   b93c6:	0798      	lsls	r0, r3, #30
   b93c8:	bf49      	itett	mi
   b93ca:	085b      	lsrmi	r3, r3, #1
   b93cc:	089b      	lsrpl	r3, r3, #2
   b93ce:	2001      	movmi	r0, #1
   b93d0:	600b      	strmi	r3, [r1, #0]
   b93d2:	bf5c      	itt	pl
   b93d4:	600b      	strpl	r3, [r1, #0]
   b93d6:	2002      	movpl	r0, #2
   b93d8:	4770      	bx	lr
   b93da:	b298      	uxth	r0, r3
   b93dc:	b9a8      	cbnz	r0, b940a <__lo0bits+0x52>
   b93de:	0c1b      	lsrs	r3, r3, #16
   b93e0:	2010      	movs	r0, #16
   b93e2:	b2da      	uxtb	r2, r3
   b93e4:	b90a      	cbnz	r2, b93ea <__lo0bits+0x32>
   b93e6:	3008      	adds	r0, #8
   b93e8:	0a1b      	lsrs	r3, r3, #8
   b93ea:	071a      	lsls	r2, r3, #28
   b93ec:	bf04      	itt	eq
   b93ee:	091b      	lsreq	r3, r3, #4
   b93f0:	3004      	addeq	r0, #4
   b93f2:	079a      	lsls	r2, r3, #30
   b93f4:	bf04      	itt	eq
   b93f6:	089b      	lsreq	r3, r3, #2
   b93f8:	3002      	addeq	r0, #2
   b93fa:	07da      	lsls	r2, r3, #31
   b93fc:	d403      	bmi.n	b9406 <__lo0bits+0x4e>
   b93fe:	085b      	lsrs	r3, r3, #1
   b9400:	f100 0001 	add.w	r0, r0, #1
   b9404:	d005      	beq.n	b9412 <__lo0bits+0x5a>
   b9406:	600b      	str	r3, [r1, #0]
   b9408:	4770      	bx	lr
   b940a:	4610      	mov	r0, r2
   b940c:	e7e9      	b.n	b93e2 <__lo0bits+0x2a>
   b940e:	2000      	movs	r0, #0
   b9410:	4770      	bx	lr
   b9412:	2020      	movs	r0, #32
   b9414:	4770      	bx	lr
	...

000b9418 <__i2b>:
   b9418:	b510      	push	{r4, lr}
   b941a:	460c      	mov	r4, r1
   b941c:	2101      	movs	r1, #1
   b941e:	f7ff feb9 	bl	b9194 <_Balloc>
   b9422:	4602      	mov	r2, r0
   b9424:	b928      	cbnz	r0, b9432 <__i2b+0x1a>
   b9426:	4b05      	ldr	r3, [pc, #20]	; (b943c <__i2b+0x24>)
   b9428:	4805      	ldr	r0, [pc, #20]	; (b9440 <__i2b+0x28>)
   b942a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b942e:	f7fc f87f 	bl	b5530 <__assert_func>
   b9432:	2301      	movs	r3, #1
   b9434:	6144      	str	r4, [r0, #20]
   b9436:	6103      	str	r3, [r0, #16]
   b9438:	bd10      	pop	{r4, pc}
   b943a:	bf00      	nop
   b943c:	000ba318 	.word	0x000ba318
   b9440:	000ba3c4 	.word	0x000ba3c4

000b9444 <__multiply>:
   b9444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9448:	4691      	mov	r9, r2
   b944a:	690a      	ldr	r2, [r1, #16]
   b944c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9450:	429a      	cmp	r2, r3
   b9452:	bfb8      	it	lt
   b9454:	460b      	movlt	r3, r1
   b9456:	460c      	mov	r4, r1
   b9458:	bfbc      	itt	lt
   b945a:	464c      	movlt	r4, r9
   b945c:	4699      	movlt	r9, r3
   b945e:	6927      	ldr	r7, [r4, #16]
   b9460:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9464:	68a3      	ldr	r3, [r4, #8]
   b9466:	6861      	ldr	r1, [r4, #4]
   b9468:	eb07 060a 	add.w	r6, r7, sl
   b946c:	42b3      	cmp	r3, r6
   b946e:	b085      	sub	sp, #20
   b9470:	bfb8      	it	lt
   b9472:	3101      	addlt	r1, #1
   b9474:	f7ff fe8e 	bl	b9194 <_Balloc>
   b9478:	b930      	cbnz	r0, b9488 <__multiply+0x44>
   b947a:	4602      	mov	r2, r0
   b947c:	4b44      	ldr	r3, [pc, #272]	; (b9590 <__multiply+0x14c>)
   b947e:	4845      	ldr	r0, [pc, #276]	; (b9594 <__multiply+0x150>)
   b9480:	f240 115d 	movw	r1, #349	; 0x15d
   b9484:	f7fc f854 	bl	b5530 <__assert_func>
   b9488:	f100 0514 	add.w	r5, r0, #20
   b948c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9490:	462b      	mov	r3, r5
   b9492:	2200      	movs	r2, #0
   b9494:	4543      	cmp	r3, r8
   b9496:	d321      	bcc.n	b94dc <__multiply+0x98>
   b9498:	f104 0314 	add.w	r3, r4, #20
   b949c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b94a0:	f109 0314 	add.w	r3, r9, #20
   b94a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b94a8:	9202      	str	r2, [sp, #8]
   b94aa:	1b3a      	subs	r2, r7, r4
   b94ac:	3a15      	subs	r2, #21
   b94ae:	f022 0203 	bic.w	r2, r2, #3
   b94b2:	3204      	adds	r2, #4
   b94b4:	f104 0115 	add.w	r1, r4, #21
   b94b8:	428f      	cmp	r7, r1
   b94ba:	bf38      	it	cc
   b94bc:	2204      	movcc	r2, #4
   b94be:	9201      	str	r2, [sp, #4]
   b94c0:	9a02      	ldr	r2, [sp, #8]
   b94c2:	9303      	str	r3, [sp, #12]
   b94c4:	429a      	cmp	r2, r3
   b94c6:	d80c      	bhi.n	b94e2 <__multiply+0x9e>
   b94c8:	2e00      	cmp	r6, #0
   b94ca:	dd03      	ble.n	b94d4 <__multiply+0x90>
   b94cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b94d0:	2b00      	cmp	r3, #0
   b94d2:	d05a      	beq.n	b958a <__multiply+0x146>
   b94d4:	6106      	str	r6, [r0, #16]
   b94d6:	b005      	add	sp, #20
   b94d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b94dc:	f843 2b04 	str.w	r2, [r3], #4
   b94e0:	e7d8      	b.n	b9494 <__multiply+0x50>
   b94e2:	f8b3 a000 	ldrh.w	sl, [r3]
   b94e6:	f1ba 0f00 	cmp.w	sl, #0
   b94ea:	d024      	beq.n	b9536 <__multiply+0xf2>
   b94ec:	f104 0e14 	add.w	lr, r4, #20
   b94f0:	46a9      	mov	r9, r5
   b94f2:	f04f 0c00 	mov.w	ip, #0
   b94f6:	f85e 2b04 	ldr.w	r2, [lr], #4
   b94fa:	f8d9 1000 	ldr.w	r1, [r9]
   b94fe:	fa1f fb82 	uxth.w	fp, r2
   b9502:	b289      	uxth	r1, r1
   b9504:	fb0a 110b 	mla	r1, sl, fp, r1
   b9508:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b950c:	f8d9 2000 	ldr.w	r2, [r9]
   b9510:	4461      	add	r1, ip
   b9512:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9516:	fb0a c20b 	mla	r2, sl, fp, ip
   b951a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b951e:	b289      	uxth	r1, r1
   b9520:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b9524:	4577      	cmp	r7, lr
   b9526:	f849 1b04 	str.w	r1, [r9], #4
   b952a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b952e:	d8e2      	bhi.n	b94f6 <__multiply+0xb2>
   b9530:	9a01      	ldr	r2, [sp, #4]
   b9532:	f845 c002 	str.w	ip, [r5, r2]
   b9536:	9a03      	ldr	r2, [sp, #12]
   b9538:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b953c:	3304      	adds	r3, #4
   b953e:	f1b9 0f00 	cmp.w	r9, #0
   b9542:	d020      	beq.n	b9586 <__multiply+0x142>
   b9544:	6829      	ldr	r1, [r5, #0]
   b9546:	f104 0c14 	add.w	ip, r4, #20
   b954a:	46ae      	mov	lr, r5
   b954c:	f04f 0a00 	mov.w	sl, #0
   b9550:	f8bc b000 	ldrh.w	fp, [ip]
   b9554:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9558:	fb09 220b 	mla	r2, r9, fp, r2
   b955c:	4492      	add	sl, r2
   b955e:	b289      	uxth	r1, r1
   b9560:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9564:	f84e 1b04 	str.w	r1, [lr], #4
   b9568:	f85c 2b04 	ldr.w	r2, [ip], #4
   b956c:	f8be 1000 	ldrh.w	r1, [lr]
   b9570:	0c12      	lsrs	r2, r2, #16
   b9572:	fb09 1102 	mla	r1, r9, r2, r1
   b9576:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b957a:	4567      	cmp	r7, ip
   b957c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9580:	d8e6      	bhi.n	b9550 <__multiply+0x10c>
   b9582:	9a01      	ldr	r2, [sp, #4]
   b9584:	50a9      	str	r1, [r5, r2]
   b9586:	3504      	adds	r5, #4
   b9588:	e79a      	b.n	b94c0 <__multiply+0x7c>
   b958a:	3e01      	subs	r6, #1
   b958c:	e79c      	b.n	b94c8 <__multiply+0x84>
   b958e:	bf00      	nop
   b9590:	000ba318 	.word	0x000ba318
   b9594:	000ba3c4 	.word	0x000ba3c4

000b9598 <__pow5mult>:
   b9598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b959c:	4615      	mov	r5, r2
   b959e:	f012 0203 	ands.w	r2, r2, #3
   b95a2:	4606      	mov	r6, r0
   b95a4:	460f      	mov	r7, r1
   b95a6:	d007      	beq.n	b95b8 <__pow5mult+0x20>
   b95a8:	4c25      	ldr	r4, [pc, #148]	; (b9640 <__pow5mult+0xa8>)
   b95aa:	3a01      	subs	r2, #1
   b95ac:	2300      	movs	r3, #0
   b95ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b95b2:	f7ff fe51 	bl	b9258 <__multadd>
   b95b6:	4607      	mov	r7, r0
   b95b8:	10ad      	asrs	r5, r5, #2
   b95ba:	d03d      	beq.n	b9638 <__pow5mult+0xa0>
   b95bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b95be:	b97c      	cbnz	r4, b95e0 <__pow5mult+0x48>
   b95c0:	2010      	movs	r0, #16
   b95c2:	f7fb ff6d 	bl	b54a0 <malloc>
   b95c6:	4602      	mov	r2, r0
   b95c8:	6270      	str	r0, [r6, #36]	; 0x24
   b95ca:	b928      	cbnz	r0, b95d8 <__pow5mult+0x40>
   b95cc:	4b1d      	ldr	r3, [pc, #116]	; (b9644 <__pow5mult+0xac>)
   b95ce:	481e      	ldr	r0, [pc, #120]	; (b9648 <__pow5mult+0xb0>)
   b95d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b95d4:	f7fb ffac 	bl	b5530 <__assert_func>
   b95d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b95dc:	6004      	str	r4, [r0, #0]
   b95de:	60c4      	str	r4, [r0, #12]
   b95e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b95e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b95e8:	b94c      	cbnz	r4, b95fe <__pow5mult+0x66>
   b95ea:	f240 2171 	movw	r1, #625	; 0x271
   b95ee:	4630      	mov	r0, r6
   b95f0:	f7ff ff12 	bl	b9418 <__i2b>
   b95f4:	2300      	movs	r3, #0
   b95f6:	f8c8 0008 	str.w	r0, [r8, #8]
   b95fa:	4604      	mov	r4, r0
   b95fc:	6003      	str	r3, [r0, #0]
   b95fe:	f04f 0900 	mov.w	r9, #0
   b9602:	07eb      	lsls	r3, r5, #31
   b9604:	d50a      	bpl.n	b961c <__pow5mult+0x84>
   b9606:	4639      	mov	r1, r7
   b9608:	4622      	mov	r2, r4
   b960a:	4630      	mov	r0, r6
   b960c:	f7ff ff1a 	bl	b9444 <__multiply>
   b9610:	4639      	mov	r1, r7
   b9612:	4680      	mov	r8, r0
   b9614:	4630      	mov	r0, r6
   b9616:	f7ff fdfd 	bl	b9214 <_Bfree>
   b961a:	4647      	mov	r7, r8
   b961c:	106d      	asrs	r5, r5, #1
   b961e:	d00b      	beq.n	b9638 <__pow5mult+0xa0>
   b9620:	6820      	ldr	r0, [r4, #0]
   b9622:	b938      	cbnz	r0, b9634 <__pow5mult+0x9c>
   b9624:	4622      	mov	r2, r4
   b9626:	4621      	mov	r1, r4
   b9628:	4630      	mov	r0, r6
   b962a:	f7ff ff0b 	bl	b9444 <__multiply>
   b962e:	6020      	str	r0, [r4, #0]
   b9630:	f8c0 9000 	str.w	r9, [r0]
   b9634:	4604      	mov	r4, r0
   b9636:	e7e4      	b.n	b9602 <__pow5mult+0x6a>
   b9638:	4638      	mov	r0, r7
   b963a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b963e:	bf00      	nop
   b9640:	000ba538 	.word	0x000ba538
   b9644:	000ba0a1 	.word	0x000ba0a1
   b9648:	000ba3c4 	.word	0x000ba3c4

000b964c <__lshift>:
   b964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9650:	460c      	mov	r4, r1
   b9652:	6849      	ldr	r1, [r1, #4]
   b9654:	6923      	ldr	r3, [r4, #16]
   b9656:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b965a:	68a3      	ldr	r3, [r4, #8]
   b965c:	4607      	mov	r7, r0
   b965e:	4691      	mov	r9, r2
   b9660:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9664:	f108 0601 	add.w	r6, r8, #1
   b9668:	42b3      	cmp	r3, r6
   b966a:	db0b      	blt.n	b9684 <__lshift+0x38>
   b966c:	4638      	mov	r0, r7
   b966e:	f7ff fd91 	bl	b9194 <_Balloc>
   b9672:	4605      	mov	r5, r0
   b9674:	b948      	cbnz	r0, b968a <__lshift+0x3e>
   b9676:	4602      	mov	r2, r0
   b9678:	4b2a      	ldr	r3, [pc, #168]	; (b9724 <__lshift+0xd8>)
   b967a:	482b      	ldr	r0, [pc, #172]	; (b9728 <__lshift+0xdc>)
   b967c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9680:	f7fb ff56 	bl	b5530 <__assert_func>
   b9684:	3101      	adds	r1, #1
   b9686:	005b      	lsls	r3, r3, #1
   b9688:	e7ee      	b.n	b9668 <__lshift+0x1c>
   b968a:	2300      	movs	r3, #0
   b968c:	f100 0114 	add.w	r1, r0, #20
   b9690:	f100 0210 	add.w	r2, r0, #16
   b9694:	4618      	mov	r0, r3
   b9696:	4553      	cmp	r3, sl
   b9698:	db37      	blt.n	b970a <__lshift+0xbe>
   b969a:	6920      	ldr	r0, [r4, #16]
   b969c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b96a0:	f104 0314 	add.w	r3, r4, #20
   b96a4:	f019 091f 	ands.w	r9, r9, #31
   b96a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b96ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b96b0:	d02f      	beq.n	b9712 <__lshift+0xc6>
   b96b2:	f1c9 0e20 	rsb	lr, r9, #32
   b96b6:	468a      	mov	sl, r1
   b96b8:	f04f 0c00 	mov.w	ip, #0
   b96bc:	681a      	ldr	r2, [r3, #0]
   b96be:	fa02 f209 	lsl.w	r2, r2, r9
   b96c2:	ea42 020c 	orr.w	r2, r2, ip
   b96c6:	f84a 2b04 	str.w	r2, [sl], #4
   b96ca:	f853 2b04 	ldr.w	r2, [r3], #4
   b96ce:	4298      	cmp	r0, r3
   b96d0:	fa22 fc0e 	lsr.w	ip, r2, lr
   b96d4:	d8f2      	bhi.n	b96bc <__lshift+0x70>
   b96d6:	1b03      	subs	r3, r0, r4
   b96d8:	3b15      	subs	r3, #21
   b96da:	f023 0303 	bic.w	r3, r3, #3
   b96de:	3304      	adds	r3, #4
   b96e0:	f104 0215 	add.w	r2, r4, #21
   b96e4:	4290      	cmp	r0, r2
   b96e6:	bf38      	it	cc
   b96e8:	2304      	movcc	r3, #4
   b96ea:	f841 c003 	str.w	ip, [r1, r3]
   b96ee:	f1bc 0f00 	cmp.w	ip, #0
   b96f2:	d001      	beq.n	b96f8 <__lshift+0xac>
   b96f4:	f108 0602 	add.w	r6, r8, #2
   b96f8:	3e01      	subs	r6, #1
   b96fa:	4638      	mov	r0, r7
   b96fc:	612e      	str	r6, [r5, #16]
   b96fe:	4621      	mov	r1, r4
   b9700:	f7ff fd88 	bl	b9214 <_Bfree>
   b9704:	4628      	mov	r0, r5
   b9706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b970a:	f842 0f04 	str.w	r0, [r2, #4]!
   b970e:	3301      	adds	r3, #1
   b9710:	e7c1      	b.n	b9696 <__lshift+0x4a>
   b9712:	3904      	subs	r1, #4
   b9714:	f853 2b04 	ldr.w	r2, [r3], #4
   b9718:	f841 2f04 	str.w	r2, [r1, #4]!
   b971c:	4298      	cmp	r0, r3
   b971e:	d8f9      	bhi.n	b9714 <__lshift+0xc8>
   b9720:	e7ea      	b.n	b96f8 <__lshift+0xac>
   b9722:	bf00      	nop
   b9724:	000ba318 	.word	0x000ba318
   b9728:	000ba3c4 	.word	0x000ba3c4

000b972c <__mcmp>:
   b972c:	b530      	push	{r4, r5, lr}
   b972e:	6902      	ldr	r2, [r0, #16]
   b9730:	690c      	ldr	r4, [r1, #16]
   b9732:	1b12      	subs	r2, r2, r4
   b9734:	d10e      	bne.n	b9754 <__mcmp+0x28>
   b9736:	f100 0314 	add.w	r3, r0, #20
   b973a:	3114      	adds	r1, #20
   b973c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9740:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b9744:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9748:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b974c:	42a5      	cmp	r5, r4
   b974e:	d003      	beq.n	b9758 <__mcmp+0x2c>
   b9750:	d305      	bcc.n	b975e <__mcmp+0x32>
   b9752:	2201      	movs	r2, #1
   b9754:	4610      	mov	r0, r2
   b9756:	bd30      	pop	{r4, r5, pc}
   b9758:	4283      	cmp	r3, r0
   b975a:	d3f3      	bcc.n	b9744 <__mcmp+0x18>
   b975c:	e7fa      	b.n	b9754 <__mcmp+0x28>
   b975e:	f04f 32ff 	mov.w	r2, #4294967295
   b9762:	e7f7      	b.n	b9754 <__mcmp+0x28>

000b9764 <__mdiff>:
   b9764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9768:	460c      	mov	r4, r1
   b976a:	4606      	mov	r6, r0
   b976c:	4611      	mov	r1, r2
   b976e:	4620      	mov	r0, r4
   b9770:	4690      	mov	r8, r2
   b9772:	f7ff ffdb 	bl	b972c <__mcmp>
   b9776:	1e05      	subs	r5, r0, #0
   b9778:	d110      	bne.n	b979c <__mdiff+0x38>
   b977a:	4629      	mov	r1, r5
   b977c:	4630      	mov	r0, r6
   b977e:	f7ff fd09 	bl	b9194 <_Balloc>
   b9782:	b930      	cbnz	r0, b9792 <__mdiff+0x2e>
   b9784:	4b3a      	ldr	r3, [pc, #232]	; (b9870 <__mdiff+0x10c>)
   b9786:	4602      	mov	r2, r0
   b9788:	f240 2132 	movw	r1, #562	; 0x232
   b978c:	4839      	ldr	r0, [pc, #228]	; (b9874 <__mdiff+0x110>)
   b978e:	f7fb fecf 	bl	b5530 <__assert_func>
   b9792:	2301      	movs	r3, #1
   b9794:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b979c:	bfa4      	itt	ge
   b979e:	4643      	movge	r3, r8
   b97a0:	46a0      	movge	r8, r4
   b97a2:	4630      	mov	r0, r6
   b97a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b97a8:	bfa6      	itte	ge
   b97aa:	461c      	movge	r4, r3
   b97ac:	2500      	movge	r5, #0
   b97ae:	2501      	movlt	r5, #1
   b97b0:	f7ff fcf0 	bl	b9194 <_Balloc>
   b97b4:	b920      	cbnz	r0, b97c0 <__mdiff+0x5c>
   b97b6:	4b2e      	ldr	r3, [pc, #184]	; (b9870 <__mdiff+0x10c>)
   b97b8:	4602      	mov	r2, r0
   b97ba:	f44f 7110 	mov.w	r1, #576	; 0x240
   b97be:	e7e5      	b.n	b978c <__mdiff+0x28>
   b97c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b97c4:	6926      	ldr	r6, [r4, #16]
   b97c6:	60c5      	str	r5, [r0, #12]
   b97c8:	f104 0914 	add.w	r9, r4, #20
   b97cc:	f108 0514 	add.w	r5, r8, #20
   b97d0:	f100 0e14 	add.w	lr, r0, #20
   b97d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b97d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b97dc:	f108 0210 	add.w	r2, r8, #16
   b97e0:	46f2      	mov	sl, lr
   b97e2:	2100      	movs	r1, #0
   b97e4:	f859 3b04 	ldr.w	r3, [r9], #4
   b97e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b97ec:	fa1f f883 	uxth.w	r8, r3
   b97f0:	fa11 f18b 	uxtah	r1, r1, fp
   b97f4:	0c1b      	lsrs	r3, r3, #16
   b97f6:	eba1 0808 	sub.w	r8, r1, r8
   b97fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b97fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b9802:	fa1f f888 	uxth.w	r8, r8
   b9806:	1419      	asrs	r1, r3, #16
   b9808:	454e      	cmp	r6, r9
   b980a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b980e:	f84a 3b04 	str.w	r3, [sl], #4
   b9812:	d8e7      	bhi.n	b97e4 <__mdiff+0x80>
   b9814:	1b33      	subs	r3, r6, r4
   b9816:	3b15      	subs	r3, #21
   b9818:	f023 0303 	bic.w	r3, r3, #3
   b981c:	3304      	adds	r3, #4
   b981e:	3415      	adds	r4, #21
   b9820:	42a6      	cmp	r6, r4
   b9822:	bf38      	it	cc
   b9824:	2304      	movcc	r3, #4
   b9826:	441d      	add	r5, r3
   b9828:	4473      	add	r3, lr
   b982a:	469e      	mov	lr, r3
   b982c:	462e      	mov	r6, r5
   b982e:	4566      	cmp	r6, ip
   b9830:	d30e      	bcc.n	b9850 <__mdiff+0xec>
   b9832:	f10c 0203 	add.w	r2, ip, #3
   b9836:	1b52      	subs	r2, r2, r5
   b9838:	f022 0203 	bic.w	r2, r2, #3
   b983c:	3d03      	subs	r5, #3
   b983e:	45ac      	cmp	ip, r5
   b9840:	bf38      	it	cc
   b9842:	2200      	movcc	r2, #0
   b9844:	441a      	add	r2, r3
   b9846:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b984a:	b17b      	cbz	r3, b986c <__mdiff+0x108>
   b984c:	6107      	str	r7, [r0, #16]
   b984e:	e7a3      	b.n	b9798 <__mdiff+0x34>
   b9850:	f856 8b04 	ldr.w	r8, [r6], #4
   b9854:	fa11 f288 	uxtah	r2, r1, r8
   b9858:	1414      	asrs	r4, r2, #16
   b985a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b985e:	b292      	uxth	r2, r2
   b9860:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b9864:	f84e 2b04 	str.w	r2, [lr], #4
   b9868:	1421      	asrs	r1, r4, #16
   b986a:	e7e0      	b.n	b982e <__mdiff+0xca>
   b986c:	3f01      	subs	r7, #1
   b986e:	e7ea      	b.n	b9846 <__mdiff+0xe2>
   b9870:	000ba318 	.word	0x000ba318
   b9874:	000ba3c4 	.word	0x000ba3c4

000b9878 <__ulp>:
   b9878:	b082      	sub	sp, #8
   b987a:	ed8d 0b00 	vstr	d0, [sp]
   b987e:	9b01      	ldr	r3, [sp, #4]
   b9880:	4912      	ldr	r1, [pc, #72]	; (b98cc <__ulp+0x54>)
   b9882:	4019      	ands	r1, r3
   b9884:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b9888:	2900      	cmp	r1, #0
   b988a:	dd05      	ble.n	b9898 <__ulp+0x20>
   b988c:	2200      	movs	r2, #0
   b988e:	460b      	mov	r3, r1
   b9890:	ec43 2b10 	vmov	d0, r2, r3
   b9894:	b002      	add	sp, #8
   b9896:	4770      	bx	lr
   b9898:	4249      	negs	r1, r1
   b989a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b989e:	ea4f 5021 	mov.w	r0, r1, asr #20
   b98a2:	f04f 0200 	mov.w	r2, #0
   b98a6:	f04f 0300 	mov.w	r3, #0
   b98aa:	da04      	bge.n	b98b6 <__ulp+0x3e>
   b98ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b98b0:	fa41 f300 	asr.w	r3, r1, r0
   b98b4:	e7ec      	b.n	b9890 <__ulp+0x18>
   b98b6:	f1a0 0114 	sub.w	r1, r0, #20
   b98ba:	291e      	cmp	r1, #30
   b98bc:	bfda      	itte	le
   b98be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b98c2:	fa20 f101 	lsrle.w	r1, r0, r1
   b98c6:	2101      	movgt	r1, #1
   b98c8:	460a      	mov	r2, r1
   b98ca:	e7e1      	b.n	b9890 <__ulp+0x18>
   b98cc:	7ff00000 	.word	0x7ff00000

000b98d0 <__b2d>:
   b98d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b98d2:	6905      	ldr	r5, [r0, #16]
   b98d4:	f100 0714 	add.w	r7, r0, #20
   b98d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b98dc:	1f2e      	subs	r6, r5, #4
   b98de:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b98e2:	4620      	mov	r0, r4
   b98e4:	f7ff fd48 	bl	b9378 <__hi0bits>
   b98e8:	f1c0 0320 	rsb	r3, r0, #32
   b98ec:	280a      	cmp	r0, #10
   b98ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; b996c <__b2d+0x9c>
   b98f2:	600b      	str	r3, [r1, #0]
   b98f4:	dc14      	bgt.n	b9920 <__b2d+0x50>
   b98f6:	f1c0 0e0b 	rsb	lr, r0, #11
   b98fa:	fa24 f10e 	lsr.w	r1, r4, lr
   b98fe:	42b7      	cmp	r7, r6
   b9900:	ea41 030c 	orr.w	r3, r1, ip
   b9904:	bf34      	ite	cc
   b9906:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b990a:	2100      	movcs	r1, #0
   b990c:	3015      	adds	r0, #21
   b990e:	fa04 f000 	lsl.w	r0, r4, r0
   b9912:	fa21 f10e 	lsr.w	r1, r1, lr
   b9916:	ea40 0201 	orr.w	r2, r0, r1
   b991a:	ec43 2b10 	vmov	d0, r2, r3
   b991e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9920:	42b7      	cmp	r7, r6
   b9922:	bf3a      	itte	cc
   b9924:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9928:	f1a5 0608 	subcc.w	r6, r5, #8
   b992c:	2100      	movcs	r1, #0
   b992e:	380b      	subs	r0, #11
   b9930:	d017      	beq.n	b9962 <__b2d+0x92>
   b9932:	f1c0 0c20 	rsb	ip, r0, #32
   b9936:	fa04 f500 	lsl.w	r5, r4, r0
   b993a:	42be      	cmp	r6, r7
   b993c:	fa21 f40c 	lsr.w	r4, r1, ip
   b9940:	ea45 0504 	orr.w	r5, r5, r4
   b9944:	bf8c      	ite	hi
   b9946:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b994a:	2400      	movls	r4, #0
   b994c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b9950:	fa01 f000 	lsl.w	r0, r1, r0
   b9954:	fa24 f40c 	lsr.w	r4, r4, ip
   b9958:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b995c:	ea40 0204 	orr.w	r2, r0, r4
   b9960:	e7db      	b.n	b991a <__b2d+0x4a>
   b9962:	ea44 030c 	orr.w	r3, r4, ip
   b9966:	460a      	mov	r2, r1
   b9968:	e7d7      	b.n	b991a <__b2d+0x4a>
   b996a:	bf00      	nop
   b996c:	3ff00000 	.word	0x3ff00000

000b9970 <__d2b>:
   b9970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9974:	4689      	mov	r9, r1
   b9976:	2101      	movs	r1, #1
   b9978:	ec57 6b10 	vmov	r6, r7, d0
   b997c:	4690      	mov	r8, r2
   b997e:	f7ff fc09 	bl	b9194 <_Balloc>
   b9982:	4604      	mov	r4, r0
   b9984:	b930      	cbnz	r0, b9994 <__d2b+0x24>
   b9986:	4602      	mov	r2, r0
   b9988:	4b25      	ldr	r3, [pc, #148]	; (b9a20 <__d2b+0xb0>)
   b998a:	4826      	ldr	r0, [pc, #152]	; (b9a24 <__d2b+0xb4>)
   b998c:	f240 310a 	movw	r1, #778	; 0x30a
   b9990:	f7fb fdce 	bl	b5530 <__assert_func>
   b9994:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b9998:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b999c:	bb35      	cbnz	r5, b99ec <__d2b+0x7c>
   b999e:	2e00      	cmp	r6, #0
   b99a0:	9301      	str	r3, [sp, #4]
   b99a2:	d028      	beq.n	b99f6 <__d2b+0x86>
   b99a4:	4668      	mov	r0, sp
   b99a6:	9600      	str	r6, [sp, #0]
   b99a8:	f7ff fd06 	bl	b93b8 <__lo0bits>
   b99ac:	9900      	ldr	r1, [sp, #0]
   b99ae:	b300      	cbz	r0, b99f2 <__d2b+0x82>
   b99b0:	9a01      	ldr	r2, [sp, #4]
   b99b2:	f1c0 0320 	rsb	r3, r0, #32
   b99b6:	fa02 f303 	lsl.w	r3, r2, r3
   b99ba:	430b      	orrs	r3, r1
   b99bc:	40c2      	lsrs	r2, r0
   b99be:	6163      	str	r3, [r4, #20]
   b99c0:	9201      	str	r2, [sp, #4]
   b99c2:	9b01      	ldr	r3, [sp, #4]
   b99c4:	61a3      	str	r3, [r4, #24]
   b99c6:	2b00      	cmp	r3, #0
   b99c8:	bf14      	ite	ne
   b99ca:	2202      	movne	r2, #2
   b99cc:	2201      	moveq	r2, #1
   b99ce:	6122      	str	r2, [r4, #16]
   b99d0:	b1d5      	cbz	r5, b9a08 <__d2b+0x98>
   b99d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b99d6:	4405      	add	r5, r0
   b99d8:	f8c9 5000 	str.w	r5, [r9]
   b99dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b99e0:	f8c8 0000 	str.w	r0, [r8]
   b99e4:	4620      	mov	r0, r4
   b99e6:	b003      	add	sp, #12
   b99e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b99ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b99f0:	e7d5      	b.n	b999e <__d2b+0x2e>
   b99f2:	6161      	str	r1, [r4, #20]
   b99f4:	e7e5      	b.n	b99c2 <__d2b+0x52>
   b99f6:	a801      	add	r0, sp, #4
   b99f8:	f7ff fcde 	bl	b93b8 <__lo0bits>
   b99fc:	9b01      	ldr	r3, [sp, #4]
   b99fe:	6163      	str	r3, [r4, #20]
   b9a00:	2201      	movs	r2, #1
   b9a02:	6122      	str	r2, [r4, #16]
   b9a04:	3020      	adds	r0, #32
   b9a06:	e7e3      	b.n	b99d0 <__d2b+0x60>
   b9a08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b9a0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b9a10:	f8c9 0000 	str.w	r0, [r9]
   b9a14:	6918      	ldr	r0, [r3, #16]
   b9a16:	f7ff fcaf 	bl	b9378 <__hi0bits>
   b9a1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b9a1e:	e7df      	b.n	b99e0 <__d2b+0x70>
   b9a20:	000ba318 	.word	0x000ba318
   b9a24:	000ba3c4 	.word	0x000ba3c4

000b9a28 <__ratio>:
   b9a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a2c:	4688      	mov	r8, r1
   b9a2e:	4669      	mov	r1, sp
   b9a30:	4681      	mov	r9, r0
   b9a32:	f7ff ff4d 	bl	b98d0 <__b2d>
   b9a36:	a901      	add	r1, sp, #4
   b9a38:	4640      	mov	r0, r8
   b9a3a:	ec55 4b10 	vmov	r4, r5, d0
   b9a3e:	f7ff ff47 	bl	b98d0 <__b2d>
   b9a42:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9a46:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b9a4a:	eba3 0c02 	sub.w	ip, r3, r2
   b9a4e:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9a52:	1a9b      	subs	r3, r3, r2
   b9a54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b9a58:	ec51 0b10 	vmov	r0, r1, d0
   b9a5c:	2b00      	cmp	r3, #0
   b9a5e:	bfd6      	itet	le
   b9a60:	460a      	movle	r2, r1
   b9a62:	462a      	movgt	r2, r5
   b9a64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b9a68:	468b      	mov	fp, r1
   b9a6a:	462f      	mov	r7, r5
   b9a6c:	bfd4      	ite	le
   b9a6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b9a72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b9a76:	4620      	mov	r0, r4
   b9a78:	ee10 2a10 	vmov	r2, s0
   b9a7c:	465b      	mov	r3, fp
   b9a7e:	4639      	mov	r1, r7
   b9a80:	f7fd fe1a 	bl	b76b8 <__aeabi_ddiv>
   b9a84:	ec41 0b10 	vmov	d0, r0, r1
   b9a88:	b003      	add	sp, #12
   b9a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9a8e <__copybits>:
   b9a8e:	3901      	subs	r1, #1
   b9a90:	b570      	push	{r4, r5, r6, lr}
   b9a92:	1149      	asrs	r1, r1, #5
   b9a94:	6914      	ldr	r4, [r2, #16]
   b9a96:	3101      	adds	r1, #1
   b9a98:	f102 0314 	add.w	r3, r2, #20
   b9a9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9aa0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b9aa4:	1f05      	subs	r5, r0, #4
   b9aa6:	42a3      	cmp	r3, r4
   b9aa8:	d30c      	bcc.n	b9ac4 <__copybits+0x36>
   b9aaa:	1aa3      	subs	r3, r4, r2
   b9aac:	3b11      	subs	r3, #17
   b9aae:	f023 0303 	bic.w	r3, r3, #3
   b9ab2:	3211      	adds	r2, #17
   b9ab4:	42a2      	cmp	r2, r4
   b9ab6:	bf88      	it	hi
   b9ab8:	2300      	movhi	r3, #0
   b9aba:	4418      	add	r0, r3
   b9abc:	2300      	movs	r3, #0
   b9abe:	4288      	cmp	r0, r1
   b9ac0:	d305      	bcc.n	b9ace <__copybits+0x40>
   b9ac2:	bd70      	pop	{r4, r5, r6, pc}
   b9ac4:	f853 6b04 	ldr.w	r6, [r3], #4
   b9ac8:	f845 6f04 	str.w	r6, [r5, #4]!
   b9acc:	e7eb      	b.n	b9aa6 <__copybits+0x18>
   b9ace:	f840 3b04 	str.w	r3, [r0], #4
   b9ad2:	e7f4      	b.n	b9abe <__copybits+0x30>

000b9ad4 <__any_on>:
   b9ad4:	f100 0214 	add.w	r2, r0, #20
   b9ad8:	6900      	ldr	r0, [r0, #16]
   b9ada:	114b      	asrs	r3, r1, #5
   b9adc:	4298      	cmp	r0, r3
   b9ade:	b510      	push	{r4, lr}
   b9ae0:	db11      	blt.n	b9b06 <__any_on+0x32>
   b9ae2:	dd0a      	ble.n	b9afa <__any_on+0x26>
   b9ae4:	f011 011f 	ands.w	r1, r1, #31
   b9ae8:	d007      	beq.n	b9afa <__any_on+0x26>
   b9aea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b9aee:	fa24 f001 	lsr.w	r0, r4, r1
   b9af2:	fa00 f101 	lsl.w	r1, r0, r1
   b9af6:	428c      	cmp	r4, r1
   b9af8:	d10b      	bne.n	b9b12 <__any_on+0x3e>
   b9afa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b9afe:	4293      	cmp	r3, r2
   b9b00:	d803      	bhi.n	b9b0a <__any_on+0x36>
   b9b02:	2000      	movs	r0, #0
   b9b04:	bd10      	pop	{r4, pc}
   b9b06:	4603      	mov	r3, r0
   b9b08:	e7f7      	b.n	b9afa <__any_on+0x26>
   b9b0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b9b0e:	2900      	cmp	r1, #0
   b9b10:	d0f5      	beq.n	b9afe <__any_on+0x2a>
   b9b12:	2001      	movs	r0, #1
   b9b14:	e7f6      	b.n	b9b04 <__any_on+0x30>

000b9b16 <_calloc_r>:
   b9b16:	b513      	push	{r0, r1, r4, lr}
   b9b18:	434a      	muls	r2, r1
   b9b1a:	4611      	mov	r1, r2
   b9b1c:	9201      	str	r2, [sp, #4]
   b9b1e:	f7fb fcf7 	bl	b5510 <_malloc_r>
   b9b22:	4604      	mov	r4, r0
   b9b24:	b118      	cbz	r0, b9b2e <_calloc_r+0x18>
   b9b26:	9a01      	ldr	r2, [sp, #4]
   b9b28:	2100      	movs	r1, #0
   b9b2a:	f7fd ffa2 	bl	b7a72 <memset>
   b9b2e:	4620      	mov	r0, r4
   b9b30:	b002      	add	sp, #8
   b9b32:	bd10      	pop	{r4, pc}
   b9b34:	0000      	movs	r0, r0
	...

000b9b38 <nan>:
   b9b38:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9b40 <nan+0x8>
   b9b3c:	4770      	bx	lr
   b9b3e:	bf00      	nop
   b9b40:	00000000 	.word	0x00000000
   b9b44:	7ff80000 	.word	0x7ff80000

000b9b48 <__ascii_wctomb>:
   b9b48:	b149      	cbz	r1, b9b5e <__ascii_wctomb+0x16>
   b9b4a:	2aff      	cmp	r2, #255	; 0xff
   b9b4c:	bf85      	ittet	hi
   b9b4e:	238a      	movhi	r3, #138	; 0x8a
   b9b50:	6003      	strhi	r3, [r0, #0]
   b9b52:	700a      	strbls	r2, [r1, #0]
   b9b54:	f04f 30ff 	movhi.w	r0, #4294967295
   b9b58:	bf98      	it	ls
   b9b5a:	2001      	movls	r0, #1
   b9b5c:	4770      	bx	lr
   b9b5e:	4608      	mov	r0, r1
   b9b60:	4770      	bx	lr
	...

000b9b64 <__aeabi_d2lz>:
   b9b64:	b538      	push	{r3, r4, r5, lr}
   b9b66:	2200      	movs	r2, #0
   b9b68:	2300      	movs	r3, #0
   b9b6a:	4604      	mov	r4, r0
   b9b6c:	460d      	mov	r5, r1
   b9b6e:	f7fd feeb 	bl	b7948 <__aeabi_dcmplt>
   b9b72:	b928      	cbnz	r0, b9b80 <__aeabi_d2lz+0x1c>
   b9b74:	4620      	mov	r0, r4
   b9b76:	4629      	mov	r1, r5
   b9b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9b7c:	f7fd bf2c 	b.w	b79d8 <__aeabi_d2ulz>
   b9b80:	4620      	mov	r0, r4
   b9b82:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b9b86:	f7fd ff27 	bl	b79d8 <__aeabi_d2ulz>
   b9b8a:	4240      	negs	r0, r0
   b9b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9b90:	bd38      	pop	{r3, r4, r5, pc}
   b9b92:	bf00      	nop

000b9b94 <dynalib_user>:
   b9b94:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9ba4:	0000 0000 6f70 6577 2f72 7270 6369 7365     ....power/prices
   b9bb4:	7000 6972 6563 2f73 2c00 0021 2a25 2d64     .prices/.,!.%*d-
   b9bc4:	2a25 2d64 6425 2554 3a64 2a25 3a64 2a25     %*d-%dT%d:%*d:%*
   b9bd4:	0064 7073 7261 636b 696c 6e65 5f74 6d00     d.sparkclient_.m
   b9be4:	7471 0074 6948 6867 7365 2074 7270 6369     qtt.Highest pric
   b9bf4:	2065 666f 7420 6568 6420 7961 203a 6625     e of the day: %f
   b9c04:	000a 6f4c 6577 7473 7020 6972 6563 6f20     ..Lowest price o
   b9c14:	2066 6874 2065 6164 3a79 2520 0a66 4800     f the day: %f..H
   b9c24:	756f 7372 6f20 2066 6874 2065 6164 2079     ours of the day 
   b9c34:	6877 7265 2065 6c65 6365 7274 6369 7469     where electricit
   b9c44:	2079 7369 7720 7469 6968 206e 6361 6563     y is within acce
   b9c54:	7470 6465 7220 6e61 6567 0a3a 2500 3230     pted range:..%02
   b9c64:	2064 6f74 2520 3230 0a64 4c00 6769 7468     d to %02d..Light
   b9c74:	203a 6425 000a 7543 7272 6e65 2074 4848     : %d..Current HH
   b9c84:	4d3a 3a4d 2520 3230 3a64 3025 6432 000a     :MM: %02d:%02d..
   b9c94:	6843 6165 2870 7369 2968 6820 756f 7372     Cheap(ish) hours
   b9ca4:	6f20 2066 6874 2065 6164 3a79 0020 3025      of the day: .%0
   b9cb4:	6432 7420 206f 3025 6432 202c 4c00 776f     2d to %02d, .Low
   b9cc4:	7020 6972 6563 6820 756f 7372 5200 6365      price hours.Rec
   b9cd4:	6965 6576 2064 6f70 6577 2f72 6567 0a74     eived power/get.
   b9ce4:	7000 776f 7265 7b00 2220 6579 7261 3a22     .power.{ "year":
   b9cf4:	2220 6425 2c22 2220 6f6d 746e 2268 223a      "%d", "month":"
   b9d04:	3025 6432 2c22 2220 6164 2279 203a 2522     %02d", "day": "%
   b9d14:	3230 2264 202c 6422 7961 745f 6f77 3a22     02d", "day_two":
   b9d24:	2220 3025 6432 2c22 2220 6f68 7275 3a22      "%02d", "hour":
   b9d34:	2220 3025 6432 2022 007d 6c65 7270 7369      "%02d" }.elpris
   b9d44:	7265 6700 7465 705f 6972 6563 0073 6552     er.get_prices.Re
   b9d54:	7574 6e72 7620 6c61 6575 203a 6425 6800     turn value: %d.h
   b9d64:	6c65 6f6c 7720 726f 646c 7000 776f 7265     ello world.power
   b9d74:	672f 7465 3100 3239 312e 3836 302e 312e     /get.192.168.0.1
   b9d84:	3330 0000 4d04 5451 0454 0600 514d 7349     03...MQTT...MQIs
   b9d94:	7064 0003                                   dp..

000b9d98 <_ZTVN5spark13EthernetClassE>:
	...
   b9da0:	55bf 000b 55b5 000b 55ab 000b 55a1 000b     .U...U...U...U..
   b9db0:	5595 000b 5589 000b 6c05 000b 6c0d 000b     .U...U...l...l..
   b9dc0:	557d 000b 5575 000b 556b 000b 5561 000b     }U..uU..kU..aU..
   b9dd0:	6c3d 000b                                   =l..

000b9dd4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9ddc:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b9dec:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9dfc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9e04:	5cc5 000b 5ccb 000b 5d09 000b 5cd9 000b     .\...\...]...\..
   b9e14:	5cc7 000b                                   .\..

000b9e18 <_ZTV9IPAddress>:
	...
   b9e20:	6205 000b 61f5 000b 61f7 000b               .b...a...a..

000b9e2c <_ZTV9USBSerial>:
	...
   b9e34:	6317 000b 637f 000b 6355 000b 58b5 000b     .c...c..Uc...X..
   b9e44:	6347 000b 6319 000b 6329 000b 6379 000b     Gc...c..)c..yc..
   b9e54:	6339 000b 6311 000b                         9c...c..

000b9e5c <_ZTV11USARTSerial>:
	...
   b9e64:	6469 000b 64d5 000b 64ad 000b 58b5 000b     id...d...d...X..
   b9e74:	647d 000b 6499 000b 648b 000b 64a7 000b     }d...d...d...d..
   b9e84:	646b 000b 646f 000b                         kd..od..

000b9e8c <_ZTV7TwoWire>:
	...
   b9e94:	6535 000b 657f 000b 6557 000b 6537 000b     5e...e..We..7e..
   b9ea4:	655f 000b 6567 000b 656f 000b 6577 000b     _e..ge..oe..we..
   b9eb4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b9ec4:	2072 203d 6425 0000                         r = %d..

000b9ecc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9ed4:	6635 000b 6659 000b 6b43 000b 6667 000b     5f..Yf..Ck..gf..
   b9ee4:	6639 000b                                   9f..

000b9ee8 <_ZTV9TCPClient>:
	...
   b9ef0:	5b55 000b 5b6d 000b 65b1 000b 65cb 000b     U[..m[...e...e..
   b9f00:	69d9 000b 65f5 000b 684f 000b 6629 000b     .i...e..Oh..)f..
   b9f10:	68e1 000b 6721 000b 687d 000b 6a8d 000b     .h..!g..}h...j..
   b9f20:	681d 000b 662b 000b 65dd 000b 666d 000b     .h..+f...e..mf..
   b9f30:	6701 000b                                   .g..

000b9f34 <_ZTVN5spark9WiFiClassE>:
	...
   b9f3c:	6ba7 000b 6b9d 000b 6b93 000b 6b49 000b     .k...k...k..Ik..
   b9f4c:	6b87 000b 6b7b 000b 6c05 000b 6c0d 000b     .k..{k...l...l..
   b9f5c:	6b6f 000b 6b67 000b 6b5d 000b 6b53 000b     ok..gk..]k..Sk..
   b9f6c:	6c3d 000b                                   =l..

000b9f70 <_ZTVN5spark12NetworkClassE>:
	...
   b9f78:	6bc5 000b 6bcf 000b 6bd9 000b 6be3 000b     .k...k...k...k..
   b9f88:	6bed 000b 6bf9 000b 6c05 000b 6c0d 000b     .k...k...l...l..
   b9f98:	6c15 000b 6c21 000b 6c29 000b 6c33 000b     .l..!l..)l..3l..
   b9fa8:	6c3d 000b                                   =l..

000b9fac <_ZSt7nothrow>:
	...

000b9fad <_ZTSSt19_Sp_make_shared_tag>:
   b9fad:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9fbd:	6572 5f64 6174 0067 0000                     red_tag....

000b9fc8 <_ZTISt19_Sp_make_shared_tag>:
   b9fc8:	a008 000b 9fad 000b                         ........

000b9fd0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9fd0:	a068 000b 9fdc 000b a08c 000b               h...........

000b9fdc <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9fdc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9fec:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9ffc:	0045 0000                                   E...

000ba000 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba000:	0000 0000 9fd0 000b 6f15 000b 6f29 000b     .........o..)o..
   ba010:	70bd 000b 70bd 000b 6f93 000b 6ed5 000b     .p...p...o...n..
   ba020:	6f7b 000b 6f3d 000b 6f07 000b               {o..=o...o..

000ba02c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba02c:	a068 000b a038 000b 9fd0 000b               h...8.......

000ba038 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba038:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba048:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba058:	666e 456f 0000 0000                         nfoE....

000ba060 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba060:	0000 0000 a02c 000b 6fbd 000b 6fd1 000b     ....,....o...o..
   ba070:	70bd 000b 70bd 000b 6f93 000b 6ed5 000b     .p...p...o...n..
   ba080:	7091 000b 701d 000b 6fe5 000b               .p...p...o..

000ba08c <_ZTISt9type_info>:
   ba08c:	a008 000b a094 000b                         ........

000ba094 <_ZTSSt9type_info>:
   ba094:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba0a4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba0b4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   ba0c4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba0d4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba0e4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba0f4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba104:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba114:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba124:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   ba134:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000ba144 <fpi.1>:
   ba144:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ba154:	0000 0000                                   ....

000ba158 <fpinan.0>:
   ba158:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000ba170 <tinytens>:
   ba170:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ba180:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ba190:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   ba1a0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   ba1b0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   ba1c0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   ba1d0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   ba1e0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   ba1f0:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   ba200:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   ba210:	7472 6b6f 632e                               rtok.c.

000ba217 <_ctype_>:
   ba217:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba227:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba237:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba247:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba257:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba267:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba277:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba287:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba297:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   ba317:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   ba327:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   ba337:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   ba347:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   ba357:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   ba367:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   ba377:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   ba387:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   ba397:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   ba3a7:	6874 7865 632e 2e00                          thex.c...

000ba3b0 <_C_numeric_locale>:
   ba3b0:	a3ae 000b 9c60 000b cd7c 2003 0043 4f50     ....`...|.. C.PO
   ba3c0:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   ba3d0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba3e0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba3f0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba400:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba410:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba420:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba430:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   ba440:	0063 0000 0000 0000                         c.......

000ba448 <__mprec_bigtens>:
   ba448:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ba458:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ba468:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ba470 <__mprec_tens>:
   ba470:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ba480:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ba490:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ba4a0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ba4b0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ba4c0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ba4d0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ba4e0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ba4f0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ba500:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ba510:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ba520:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ba530:	9db4 79d9 7843 44ea                         ...yCx.D

000ba538 <p05.0>:
   ba538:	0005 0000 0019 0000 007d 0000               ........}...

000ba544 <link_const_variable_data_end>:
   ba544:	000b4749 	.word	0x000b4749
   ba548:	000b55c9 	.word	0x000b55c9
   ba54c:	000b55f1 	.word	0x000b55f1
   ba550:	000b58a5 	.word	0x000b58a5
   ba554:	000b59c1 	.word	0x000b59c1
   ba558:	000b5b39 	.word	0x000b5b39
   ba55c:	000b5b81 	.word	0x000b5b81
   ba560:	000b6bb1 	.word	0x000b6bb1
   ba564:	000b6d15 	.word	0x000b6d15

000ba568 <link_constructors_end>:
	...
