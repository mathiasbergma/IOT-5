
c:/Users/mathi/Desktop/IOT/ElecPrice/target/4.0.0/argon/ElecPrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006610  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba630  000ba630  0000a630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba654  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  2003cce8  000ba658  0001cce8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001924  2003ced0  2003ced0  0002ced0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ba840  000ba840  0002a840  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba868  000ba868  0002a868  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00131d16  00000000  00000000  0002a86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001564e  00000000  00000000  0015c582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003fb74  00000000  00000000  00171bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003150  00000000  00000000  001b1744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b3b0  00000000  00000000  001b4894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b6ff  00000000  00000000  001bfc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000449e2  00000000  00000000  001fb343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a384  00000000  00000000  0023fd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000956c  00000000  00000000  0037a0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fd68 	bl	b7b06 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fd70 	bl	b7b22 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003cce8 	.word	0x2003cce8
   b404c:	000ba658 	.word	0x000ba658
   b4050:	2003ced0 	.word	0x2003ced0
   b4054:	2003ced0 	.word	0x2003ced0
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fe55 	bl	b5d10 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba60c 	.word	0x000ba60c
   b4080:	000ba630 	.word	0x000ba630

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bb10 	b.w	b46a8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa21 	bl	b44d0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bdf5 	b.w	b5c80 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 ba5b 	b.w	b5550 <malloc>

000b409a <_Znaj>:
   b409a:	f001 ba59 	b.w	b5550 <malloc>

000b409e <_ZdaPv>:
   b409e:	f001 ba5f 	b.w	b5560 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f001 ba5d 	b.w	b5560 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z13handle_sensorv>:
    }
    
}

void handle_sensor(void)
{
   b40b8:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40ba:	f001 f82d 	bl	b5118 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta;
    unsigned long current_reading = millis();
    //erial.printf("millis now: %ld\tlast millis: %ld\n",current_reading, last_read);
    if ((delta = current_reading-last_read) > 100)
   b40be:	4907      	ldr	r1, [pc, #28]	; (b40dc <_Z13handle_sensorv+0x24>)
   b40c0:	680b      	ldr	r3, [r1, #0]
   b40c2:	1ac3      	subs	r3, r0, r3
   b40c4:	2b64      	cmp	r3, #100	; 0x64
   b40c6:	d908      	bls.n	b40da <_Z13handle_sensorv+0x22>
    {
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40c8:	4a05      	ldr	r2, [pc, #20]	; (b40e0 <_Z13handle_sensorv+0x28>)
   b40ca:	fbb2 f3f3 	udiv	r3, r2, r3
   b40ce:	4a05      	ldr	r2, [pc, #20]	; (b40e4 <_Z13handle_sensorv+0x2c>)
        last_read = current_reading;
   b40d0:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40d2:	6013      	str	r3, [r2, #0]
        printer = true; // Just a debuging flag
   b40d4:	4b04      	ldr	r3, [pc, #16]	; (b40e8 <_Z13handle_sensorv+0x30>)
   b40d6:	2201      	movs	r2, #1
   b40d8:	701a      	strb	r2, [r3, #0]
    }
}
   b40da:	bd08      	pop	{r3, pc}
   b40dc:	2003d1a0 	.word	0x2003d1a0
   b40e0:	0036ee80 	.word	0x0036ee80
   b40e4:	2003ced8 	.word	0x2003ced8
   b40e8:	2003d205 	.word	0x2003d205

000b40ec <_Z8callbackPcPhj>:
{
   b40ec:	b510      	push	{r4, lr}
    if (!strcmp(topic,"power/prices"))
   b40ee:	4908      	ldr	r1, [pc, #32]	; (b4110 <_Z8callbackPcPhj+0x24>)
{
   b40f0:	4604      	mov	r4, r0
    if (!strcmp(topic,"power/prices"))
   b40f2:	f003 fd5c 	bl	b7bae <strcmp>
   b40f6:	b918      	cbnz	r0, b4100 <_Z8callbackPcPhj+0x14>
        work = true;
   b40f8:	4b06      	ldr	r3, [pc, #24]	; (b4114 <_Z8callbackPcPhj+0x28>)
        transmit_value = true;
   b40fa:	2201      	movs	r2, #1
   b40fc:	701a      	strb	r2, [r3, #0]
}
   b40fe:	bd10      	pop	{r4, pc}
    else if (!strcmp(topic,"power/get"))
   b4100:	4905      	ldr	r1, [pc, #20]	; (b4118 <_Z8callbackPcPhj+0x2c>)
   b4102:	4620      	mov	r0, r4
   b4104:	f003 fd53 	bl	b7bae <strcmp>
   b4108:	2800      	cmp	r0, #0
   b410a:	d1f8      	bne.n	b40fe <_Z8callbackPcPhj+0x12>
        transmit_value = true;
   b410c:	4b03      	ldr	r3, [pc, #12]	; (b411c <_Z8callbackPcPhj+0x30>)
   b410e:	e7f4      	b.n	b40fa <_Z8callbackPcPhj+0xe>
   b4110:	000b9c58 	.word	0x000b9c58
   b4114:	2003e67e 	.word	0x2003e67e
   b4118:	000b9c65 	.word	0x000b9c65
   b411c:	2003e67d 	.word	0x2003e67d

000b4120 <_Z9myHandlerPKcS0_>:

void myHandler(const char *event, const char *data)
{
   b4120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    populate = false;
    rec_cnt++;
   b4124:	4e33      	ldr	r6, [pc, #204]	; (b41f4 <_Z9myHandlerPKcS0_+0xd4>)
    populate = false;
   b4126:	4d34      	ldr	r5, [pc, #208]	; (b41f8 <_Z9myHandlerPKcS0_+0xd8>)
   b4128:	2300      	movs	r3, #0
   b412a:	702b      	strb	r3, [r5, #0]
    rec_cnt++;
   b412c:	7833      	ldrb	r3, [r6, #0]
{
   b412e:	b085      	sub	sp, #20
    rec_cnt++;
   b4130:	3301      	adds	r3, #1
{
   b4132:	4680      	mov	r8, r0

    /* When transmission are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
    */
    int transmission_size = strlen(data);
   b4134:	4608      	mov	r0, r1
    rec_cnt++;
   b4136:	7033      	strb	r3, [r6, #0]
{
   b4138:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b413a:	f003 fd68 	bl	b7c0e <strlen>
    
    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str,event);
   b413e:	4641      	mov	r1, r8
    int transmission_size = strlen(data);
   b4140:	4607      	mov	r7, r0
    strcpy(event_str,event);
   b4142:	a801      	add	r0, sp, #4
   b4144:	f003 fd3d 	bl	b7bc2 <strcpy>
    //Serial.printf("%s\n",event_str);
    //Serial.printf("%s\n",data);
    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "rec_data"
    strcpy(rec_data[atoi(strtok(event_str,"prices/"))],data);
   b4148:	492c      	ldr	r1, [pc, #176]	; (b41fc <_Z9myHandlerPKcS0_+0xdc>)
   b414a:	a801      	add	r0, sp, #4
   b414c:	f004 fbaa 	bl	b88a4 <strtok>
   b4150:	f003 fcc1 	bl	b7ad6 <atoi>
   b4154:	eb00 2340 	add.w	r3, r0, r0, lsl #9
   b4158:	4829      	ldr	r0, [pc, #164]	; (b4200 <_Z9myHandlerPKcS0_+0xe0>)
   b415a:	4621      	mov	r1, r4
   b415c:	4418      	add	r0, r3
   b415e:	f003 fd30 	bl	b7bc2 <strcpy>
    
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b4162:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   b4166:	d210      	bcs.n	b418a <_Z9myHandlerPKcS0_+0x6a>
    {
        populate = true;
   b4168:	2301      	movs	r3, #1
   b416a:	702b      	strb	r3, [r5, #0]
    }

    if (populate)
   b416c:	4c24      	ldr	r4, [pc, #144]	; (b4200 <_Z9myHandlerPKcS0_+0xe0>)
        // Serial.printf("%s\n\n",temp);

        // Concatenate all transmission into one string
        for (int i = 0; i <= rec_cnt; i++)
        {
            strcat(temp,rec_data[i]);
   b416e:	4b25      	ldr	r3, [pc, #148]	; (b4204 <_Z9myHandlerPKcS0_+0xe4>)
{
   b4170:	2500      	movs	r5, #0
        for (int i = 0; i <= rec_cnt; i++)
   b4172:	7832      	ldrb	r2, [r6, #0]
   b4174:	42aa      	cmp	r2, r5
   b4176:	db0e      	blt.n	b4196 <_Z9myHandlerPKcS0_+0x76>
            strcat(temp,rec_data[i]);
   b4178:	4621      	mov	r1, r4
   b417a:	4618      	mov	r0, r3
   b417c:	f003 fd08 	bl	b7b90 <strcat>
        for (int i = 0; i <= rec_cnt; i++)
   b4180:	3501      	adds	r5, #1
            strcat(temp,rec_data[i]);
   b4182:	4603      	mov	r3, r0
        for (int i = 0; i <= rec_cnt; i++)
   b4184:	f204 2401 	addw	r4, r4, #513	; 0x201
   b4188:	e7f3      	b.n	b4172 <_Z9myHandlerPKcS0_+0x52>
    if (populate)
   b418a:	782b      	ldrb	r3, [r5, #0]
   b418c:	2b00      	cmp	r3, #0
   b418e:	d1ed      	bne.n	b416c <_Z9myHandlerPKcS0_+0x4c>
                range = i;  // Update range, such that the rest of program flow is aware of size
                break;      // Break the while loop
            }
        }
    }
}
   b4190:	b005      	add	sp, #20
   b4192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        token = strtok(temp, ",!");
   b4196:	491c      	ldr	r1, [pc, #112]	; (b4208 <_Z9myHandlerPKcS0_+0xe8>)
   b4198:	481a      	ldr	r0, [pc, #104]	; (b4204 <_Z9myHandlerPKcS0_+0xe4>)
   b419a:	4d1c      	ldr	r5, [pc, #112]	; (b420c <_Z9myHandlerPKcS0_+0xec>)
        for (int i = 0; i < range; i++)
   b419c:	f8df 807c 	ldr.w	r8, [pc, #124]	; b421c <_Z9myHandlerPKcS0_+0xfc>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b41a0:	f8df 907c 	ldr.w	r9, [pc, #124]	; b4220 <_Z9myHandlerPKcS0_+0x100>
            cost[i] = atof(token) / 1000;
   b41a4:	4f1a      	ldr	r7, [pc, #104]	; (b4210 <_Z9myHandlerPKcS0_+0xf0>)
        token = strtok(temp, ",!");
   b41a6:	f004 fb7d 	bl	b88a4 <strtok>
        for (int i = 0; i < range; i++)
   b41aa:	2400      	movs	r4, #0
            cost[i] = atof(token) / 1000;
   b41ac:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b41ae:	f8d8 3000 	ldr.w	r3, [r8]
   b41b2:	42a3      	cmp	r3, r4
   b41b4:	ddec      	ble.n	b4190 <_Z9myHandlerPKcS0_+0x70>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b41b6:	4a17      	ldr	r2, [pc, #92]	; (b4214 <_Z9myHandlerPKcS0_+0xf4>)
   b41b8:	4917      	ldr	r1, [pc, #92]	; (b4218 <_Z9myHandlerPKcS0_+0xf8>)
   b41ba:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   b41be:	f001 f9e7 	bl	b5590 <sscanf>
            token = strtok(NULL, ",!");
   b41c2:	4911      	ldr	r1, [pc, #68]	; (b4208 <_Z9myHandlerPKcS0_+0xe8>)
   b41c4:	2000      	movs	r0, #0
   b41c6:	f004 fb6d 	bl	b88a4 <strtok>
            cost[i] = atof(token) / 1000;
   b41ca:	f003 fc81 	bl	b7ad0 <atof>
   b41ce:	4632      	mov	r2, r6
   b41d0:	ec51 0b10 	vmov	r0, r1, d0
   b41d4:	463b      	mov	r3, r7
   b41d6:	f003 fac7 	bl	b7768 <__aeabi_ddiv>
   b41da:	e8e5 0102 	strd	r0, r1, [r5], #8
            if((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b41de:	490a      	ldr	r1, [pc, #40]	; (b4208 <_Z9myHandlerPKcS0_+0xe8>)
   b41e0:	2000      	movs	r0, #0
   b41e2:	f004 fb5f 	bl	b88a4 <strtok>
   b41e6:	b910      	cbnz	r0, b41ee <_Z9myHandlerPKcS0_+0xce>
                range = i;  // Update range, such that the rest of program flow is aware of size
   b41e8:	f8c8 4000 	str.w	r4, [r8]
                break;      // Break the while loop
   b41ec:	e7d0      	b.n	b4190 <_Z9myHandlerPKcS0_+0x70>
        for (int i = 0; i < range; i++)
   b41ee:	3401      	adds	r4, #1
   b41f0:	e7dd      	b.n	b41ae <_Z9myHandlerPKcS0_+0x8e>
   b41f2:	bf00      	nop
   b41f4:	2003d206 	.word	0x2003d206
   b41f8:	2003d204 	.word	0x2003d204
   b41fc:	000b9c6f 	.word	0x000b9c6f
   b4200:	2003d207 	.word	0x2003d207
   b4204:	2003dc78 	.word	0x2003dc78
   b4208:	000b9c77 	.word	0x000b9c77
   b420c:	2003cf40 	.word	0x2003cf40
   b4210:	408f4000 	.word	0x408f4000
   b4214:	2003d180 	.word	0x2003d180
   b4218:	000b9c7a 	.word	0x000b9c7a
   b421c:	2003ccf0 	.word	0x2003ccf0
   b4220:	2003d0c0 	.word	0x2003d0c0

000b4224 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4224:	b40e      	push	{r1, r2, r3}
   b4226:	b503      	push	{r0, r1, lr}
   b4228:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b422a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b422c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4230:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4232:	f001 fbec 	bl	b5a0e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4236:	b002      	add	sp, #8
   b4238:	f85d eb04 	ldr.w	lr, [sp], #4
   b423c:	b003      	add	sp, #12
   b423e:	4770      	bx	lr

000b4240 <_Z9reconnectv>:
    // Wait 2 second
    delay(2000);
}

void reconnect(void)
{
   b4240:	b500      	push	{lr}
   b4242:	b089      	sub	sp, #36	; 0x24

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4244:	490e      	ldr	r1, [pc, #56]	; (b4280 <_Z9reconnectv+0x40>)
   b4246:	a804      	add	r0, sp, #16
   b4248:	f001 facb 	bl	b57e2 <_ZN6StringC1EPK19__FlashStringHelper>
    client.connect("sparkclient_" + String(Time.now()),"mqtt","mqtt");
   b424c:	f001 fc83 	bl	b5b56 <_ZN9TimeClass3nowEv>
   b4250:	220a      	movs	r2, #10
   b4252:	4601      	mov	r1, r0
   b4254:	4668      	mov	r0, sp
   b4256:	f001 faea 	bl	b582e <_ZN6StringC1Elh>
   b425a:	4669      	mov	r1, sp
   b425c:	a804      	add	r0, sp, #16
   b425e:	f001 fb14 	bl	b588a <_ZplRK15StringSumHelperRK6String>
   b4262:	4b08      	ldr	r3, [pc, #32]	; (b4284 <_Z9reconnectv+0x44>)
   b4264:	6801      	ldr	r1, [r0, #0]
   b4266:	4808      	ldr	r0, [pc, #32]	; (b4288 <_Z9reconnectv+0x48>)
   b4268:	461a      	mov	r2, r3
   b426a:	f000 fceb 	bl	b4c44 <_ZN4MQTT7connectEPKcS1_S1_>
   b426e:	4668      	mov	r0, sp
   b4270:	f001 fa6c 	bl	b574c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4274:	a804      	add	r0, sp, #16
   b4276:	f001 fa69 	bl	b574c <_ZN6StringD1Ev>
}
   b427a:	b009      	add	sp, #36	; 0x24
   b427c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4280:	000b9c90 	.word	0x000b9c90
   b4284:	000b9c9d 	.word	0x000b9c9d
   b4288:	2003cedc 	.word	0x2003cedc
   b428c:	00000000 	.word	0x00000000

000b4290 <_Z8calc_lowv>:
void calc_low(void)
{
   b4290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (int i = 0; i < range; i++)
   b4294:	4b70      	ldr	r3, [pc, #448]	; (b4458 <_Z8calc_lowv+0x1c8>)
{
   b4296:	b087      	sub	sp, #28
    for (int i = 0; i < range; i++)
   b4298:	681b      	ldr	r3, [r3, #0]
   b429a:	9304      	str	r3, [sp, #16]
   b429c:	4b6f      	ldr	r3, [pc, #444]	; (b445c <_Z8calc_lowv+0x1cc>)
   b429e:	ed93 7b00 	vldr	d7, [r3]
   b42a2:	4b6f      	ldr	r3, [pc, #444]	; (b4460 <_Z8calc_lowv+0x1d0>)
   b42a4:	681e      	ldr	r6, [r3, #0]
   b42a6:	4b6f      	ldr	r3, [pc, #444]	; (b4464 <_Z8calc_lowv+0x1d4>)
   b42a8:	ed8d 7b00 	vstr	d7, [sp]
   b42ac:	ed93 7b00 	vldr	d7, [r3]
   b42b0:	4b6d      	ldr	r3, [pc, #436]	; (b4468 <_Z8calc_lowv+0x1d8>)
   b42b2:	ed8d 7b02 	vstr	d7, [sp, #8]
   b42b6:	f8d3 9000 	ldr.w	r9, [r3]
   b42ba:	4b6c      	ldr	r3, [pc, #432]	; (b446c <_Z8calc_lowv+0x1dc>)
   b42bc:	9305      	str	r3, [sp, #20]
   b42be:	2500      	movs	r5, #0
   b42c0:	4698      	mov	r8, r3
   b42c2:	462f      	mov	r7, r5
   b42c4:	462c      	mov	r4, r5
   b42c6:	9b04      	ldr	r3, [sp, #16]
   b42c8:	42a3      	cmp	r3, r4
   b42ca:	dd19      	ble.n	b4300 <_Z8calc_lowv+0x70>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b42cc:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
   b42d0:	e9dd 2300 	ldrd	r2, r3, [sp]
   b42d4:	4650      	mov	r0, sl
   b42d6:	4659      	mov	r1, fp
   b42d8:	f003 fbac 	bl	b7a34 <__aeabi_dcmpgt>
   b42dc:	b118      	cbz	r0, b42e6 <_Z8calc_lowv+0x56>
        {
            big_idx = i;
            last_big = cost[i];
   b42de:	e9cd ab00 	strd	sl, fp, [sp]
        if (cost[i] > last_big)
   b42e2:	4626      	mov	r6, r4
   b42e4:	2701      	movs	r7, #1
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b42e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b42ea:	4650      	mov	r0, sl
   b42ec:	4659      	mov	r1, fp
   b42ee:	f003 fb83 	bl	b79f8 <__aeabi_dcmplt>
   b42f2:	b118      	cbz	r0, b42fc <_Z8calc_lowv+0x6c>
        {
            small_idx = i;
            last_small = cost[i];
   b42f4:	e9cd ab02 	strd	sl, fp, [sp, #8]
        if (cost[i] < last_small)
   b42f8:	46a1      	mov	r9, r4
   b42fa:	2501      	movs	r5, #1
    for (int i = 0; i < range; i++)
   b42fc:	3401      	adds	r4, #1
   b42fe:	e7e2      	b.n	b42c6 <_Z8calc_lowv+0x36>
   b4300:	b137      	cbz	r7, b4310 <_Z8calc_lowv+0x80>
   b4302:	ed9d 7b00 	vldr	d7, [sp]
   b4306:	4b55      	ldr	r3, [pc, #340]	; (b445c <_Z8calc_lowv+0x1cc>)
   b4308:	ed83 7b00 	vstr	d7, [r3]
   b430c:	4b54      	ldr	r3, [pc, #336]	; (b4460 <_Z8calc_lowv+0x1d0>)
   b430e:	601e      	str	r6, [r3, #0]
   b4310:	b13d      	cbz	r5, b4322 <_Z8calc_lowv+0x92>
   b4312:	ed9d 7b02 	vldr	d7, [sp, #8]
   b4316:	4b53      	ldr	r3, [pc, #332]	; (b4464 <_Z8calc_lowv+0x1d4>)
   b4318:	ed83 7b00 	vstr	d7, [r3]
   b431c:	4b52      	ldr	r3, [pc, #328]	; (b4468 <_Z8calc_lowv+0x1d8>)
   b431e:	f8c3 9000 	str.w	r9, [r3]
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b4322:	4b50      	ldr	r3, [pc, #320]	; (b4464 <_Z8calc_lowv+0x1d4>)
   b4324:	494d      	ldr	r1, [pc, #308]	; (b445c <_Z8calc_lowv+0x1cc>)
   b4326:	4e52      	ldr	r6, [pc, #328]	; (b4470 <_Z8calc_lowv+0x1e0>)
   b4328:	f8df 816c 	ldr.w	r8, [pc, #364]	; b4498 <_Z8calc_lowv+0x208>
    for (int i = 0; i <= range; i++)
    {
        //Serial.printf("cost[%d]: %f\tcost_hour[%d]: %d\n",i,cost[i],i,cost_hour[i]);
        if (cost[i] < small_offset)
        {
            low_range_hour[idx] = cost_hour[i];
   b432c:	f8df a16c 	ldr.w	sl, [pc, #364]	; b449c <_Z8calc_lowv+0x20c>
   b4330:	f8df b16c 	ldr.w	fp, [pc, #364]	; b44a0 <_Z8calc_lowv+0x210>
    delta = last_big - last_small;
   b4334:	e9d3 4500 	ldrd	r4, r5, [r3]
   b4338:	e9d1 0100 	ldrd	r0, r1, [r1]
   b433c:	4622      	mov	r2, r4
   b433e:	462b      	mov	r3, r5
   b4340:	f002 ff30 	bl	b71a4 <__aeabi_dsub>
   b4344:	4602      	mov	r2, r0
   b4346:	460b      	mov	r3, r1
   b4348:	e9c6 2300 	strd	r2, r3, [r6]
    small_offset = last_small + delta * DELTA_OFFSET;
   b434c:	a340      	add	r3, pc, #256	; (adr r3, b4450 <_Z8calc_lowv+0x1c0>)
   b434e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4352:	f003 f8df 	bl	b7514 <__aeabi_dmul>
   b4356:	462b      	mov	r3, r5
   b4358:	4622      	mov	r2, r4
   b435a:	f002 ff25 	bl	b71a8 <__adddf3>
   b435e:	4b45      	ldr	r3, [pc, #276]	; (b4474 <_Z8calc_lowv+0x1e4>)
   b4360:	f8d8 4000 	ldr.w	r4, [r8]
   b4364:	4606      	mov	r6, r0
   b4366:	460f      	mov	r7, r1
   b4368:	e9c3 6700 	strd	r6, r7, [r3]
   b436c:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i <= range; i++)
   b4370:	464d      	mov	r5, r9
   b4372:	9b04      	ldr	r3, [sp, #16]
   b4374:	42ab      	cmp	r3, r5
   b4376:	db11      	blt.n	b439c <_Z8calc_lowv+0x10c>
        if (cost[i] < small_offset)
   b4378:	9905      	ldr	r1, [sp, #20]
   b437a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   b437e:	4630      	mov	r0, r6
   b4380:	9105      	str	r1, [sp, #20]
   b4382:	4639      	mov	r1, r7
   b4384:	f003 fb56 	bl	b7a34 <__aeabi_dcmpgt>
   b4388:	b130      	cbz	r0, b4398 <_Z8calc_lowv+0x108>
            low_range_hour[idx] = cost_hour[i];
   b438a:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
   b438e:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
            //Serial.printf("low_range_hour[%d]: %d\tcost_hour[%d]: %d\n",idx,low_range_hour[idx],i,cost_hour[i]);
            idx++;
   b4392:	f04f 0901 	mov.w	r9, #1
   b4396:	3401      	adds	r4, #1
    for (int i = 0; i <= range; i++)
   b4398:	3501      	adds	r5, #1
   b439a:	e7ea      	b.n	b4372 <_Z8calc_lowv+0xe2>
   b439c:	f1b9 0f00 	cmp.w	r9, #0
   b43a0:	d001      	beq.n	b43a6 <_Z8calc_lowv+0x116>
   b43a2:	f8c8 4000 	str.w	r4, [r8]
        }
    }

    // Calculations have been done - clear flag
    populate = false;
   b43a6:	4b34      	ldr	r3, [pc, #208]	; (b4478 <_Z8calc_lowv+0x1e8>)
   b43a8:	4d34      	ldr	r5, [pc, #208]	; (b447c <_Z8calc_lowv+0x1ec>)
   b43aa:	2400      	movs	r4, #0
   b43ac:	701c      	strb	r4, [r3, #0]
    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b43ae:	f002 f861 	bl	b6474 <_Z16_fetch_usbserialv>
   b43b2:	4b2a      	ldr	r3, [pc, #168]	; (b445c <_Z8calc_lowv+0x1cc>)
   b43b4:	4932      	ldr	r1, [pc, #200]	; (b4480 <_Z8calc_lowv+0x1f0>)
   b43b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43ba:	f7ff ff33 	bl	b4224 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b43be:	f002 f859 	bl	b6474 <_Z16_fetch_usbserialv>
   b43c2:	4b28      	ldr	r3, [pc, #160]	; (b4464 <_Z8calc_lowv+0x1d4>)
   b43c4:	492f      	ldr	r1, [pc, #188]	; (b4484 <_Z8calc_lowv+0x1f4>)
   b43c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b43ca:	f7ff ff2b 	bl	b4224 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b43ce:	f002 f851 	bl	b6474 <_Z16_fetch_usbserialv>
   b43d2:	492d      	ldr	r1, [pc, #180]	; (b4488 <_Z8calc_lowv+0x1f8>)
   b43d4:	f7ff ff26 	bl	b4224 <_ZN5Print6printfEPKcz>
    //Serial.printf("cnt: %d\n",cnt);
    int i = 0;
    if (idx > 0)
   b43d8:	f8d8 7000 	ldr.w	r7, [r8]
   b43dc:	42a7      	cmp	r7, r4
   b43de:	dd1c      	ble.n	b441a <_Z8calc_lowv+0x18a>
   b43e0:	6829      	ldr	r1, [r5, #0]
   b43e2:	4a2a      	ldr	r2, [pc, #168]	; (b448c <_Z8calc_lowv+0x1fc>)
    {
        while (i <= idx)
        {
            start_stop[cnt][0] = low_range_hour[i];
   b43e4:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b449c <_Z8calc_lowv+0x20c>
   b43e8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    int i = 0;
   b43ec:	4623      	mov	r3, r4
            start_stop[cnt][0] = low_range_hour[i];
   b43ee:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   b43f2:	6010      	str	r0, [r2, #0]
   b43f4:	eb0c 0683 	add.w	r6, ip, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b43f8:	6830      	ldr	r0, [r6, #0]
   b43fa:	f856 4f04 	ldr.w	r4, [r6, #4]!
   b43fe:	3c01      	subs	r4, #1
   b4400:	42a0      	cmp	r0, r4
   b4402:	f103 0301 	add.w	r3, r3, #1
   b4406:	d0f7      	beq.n	b43f8 <_Z8calc_lowv+0x168>
            {
                i++;
            }
            
            start_stop[cnt][1] = low_range_hour[i]+1;
   b4408:	3001      	adds	r0, #1
        while (i <= idx)
   b440a:	429f      	cmp	r7, r3
            start_stop[cnt][1] = low_range_hour[i]+1;
   b440c:	6050      	str	r0, [r2, #4]
            
            cnt++;
   b440e:	f101 0001 	add.w	r0, r1, #1
        while (i <= idx)
   b4412:	f102 0208 	add.w	r2, r2, #8
   b4416:	da11      	bge.n	b443c <_Z8calc_lowv+0x1ac>
            i++;
        }
        cnt--;
   b4418:	6029      	str	r1, [r5, #0]
   b441a:	4c1c      	ldr	r4, [pc, #112]	; (b448c <_Z8calc_lowv+0x1fc>)
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",start_stop[z][0],start_stop[z][1]);
   b441c:	4f1c      	ldr	r7, [pc, #112]	; (b4490 <_Z8calc_lowv+0x200>)
            cnt++;
   b441e:	2600      	movs	r6, #0
    for (int z = 0; z < cnt; z++)
   b4420:	682b      	ldr	r3, [r5, #0]
   b4422:	42b3      	cmp	r3, r6
   b4424:	f104 0408 	add.w	r4, r4, #8
   b4428:	dd0a      	ble.n	b4440 <_Z8calc_lowv+0x1b0>
        Serial.printf("%02d to %02d\n",start_stop[z][0],start_stop[z][1]);
   b442a:	f002 f823 	bl	b6474 <_Z16_fetch_usbserialv>
   b442e:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b4432:	4639      	mov	r1, r7
   b4434:	f7ff fef6 	bl	b4224 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b4438:	3601      	adds	r6, #1
   b443a:	e7f1      	b.n	b4420 <_Z8calc_lowv+0x190>
            cnt++;
   b443c:	4601      	mov	r1, r0
   b443e:	e7d6      	b.n	b43ee <_Z8calc_lowv+0x15e>
    }

    work = true;
   b4440:	4b14      	ldr	r3, [pc, #80]	; (b4494 <_Z8calc_lowv+0x204>)
   b4442:	2201      	movs	r2, #1
   b4444:	701a      	strb	r2, [r3, #0]
}
   b4446:	b007      	add	sp, #28
   b4448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b444c:	f3af 8000 	nop.w
   b4450:	33333333 	.word	0x33333333
   b4454:	3fd33333 	.word	0x3fd33333
   b4458:	2003ccf0 	.word	0x2003ccf0
   b445c:	2003d198 	.word	0x2003d198
   b4460:	2003ced4 	.word	0x2003ced4
   b4464:	2003cce8 	.word	0x2003cce8
   b4468:	2003dc0c 	.word	0x2003dc0c
   b446c:	2003cf40 	.word	0x2003cf40
   b4470:	2003d188 	.word	0x2003d188
   b4474:	2003dc10 	.word	0x2003dc10
   b4478:	2003d204 	.word	0x2003d204
   b447c:	2003cf3c 	.word	0x2003cf3c
   b4480:	000b9ca2 	.word	0x000b9ca2
   b4484:	000b9cc0 	.word	0x000b9cc0
   b4488:	000b9cdd 	.word	0x000b9cdd
   b448c:	2003dc18 	.word	0x2003dc18
   b4490:	000b9d1b 	.word	0x000b9d1b
   b4494:	2003e67e 	.word	0x2003e67e
   b4498:	2003d190 	.word	0x2003d190
   b449c:	2003d1a4 	.word	0x2003d1a4
   b44a0:	2003d0c0 	.word	0x2003d0c0

000b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b44a4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b44a6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b44a8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b44aa:	b17c      	cbz	r4, b44cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b44ac:	6863      	ldr	r3, [r4, #4]
   b44ae:	3b01      	subs	r3, #1
   b44b0:	6063      	str	r3, [r4, #4]
   b44b2:	b95b      	cbnz	r3, b44cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b44b4:	6823      	ldr	r3, [r4, #0]
   b44b6:	4620      	mov	r0, r4
   b44b8:	689b      	ldr	r3, [r3, #8]
   b44ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b44bc:	68a3      	ldr	r3, [r4, #8]
   b44be:	3b01      	subs	r3, #1
   b44c0:	60a3      	str	r3, [r4, #8]
   b44c2:	b91b      	cbnz	r3, b44cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b44c4:	6823      	ldr	r3, [r4, #0]
   b44c6:	4620      	mov	r0, r4
   b44c8:	68db      	ldr	r3, [r3, #12]
   b44ca:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b44cc:	4628      	mov	r0, r5
   b44ce:	bd38      	pop	{r3, r4, r5, pc}

000b44d0 <loop>:
{
   b44d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!client.isConnected())
   b44d4:	4840      	ldr	r0, [pc, #256]	; (b45d8 <loop+0x108>)
{
   b44d6:	b08a      	sub	sp, #40	; 0x28
    if (!client.isConnected())
   b44d8:	f000 fac4 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b44dc:	b908      	cbnz	r0, b44e2 <loop+0x12>
        reconnect();
   b44de:	f7ff feaf 	bl	b4240 <_Z9reconnectv>
    if (client.isConnected()) 
   b44e2:	483d      	ldr	r0, [pc, #244]	; (b45d8 <loop+0x108>)
   b44e4:	f000 fabe 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b44e8:	b110      	cbz	r0, b44f0 <loop+0x20>
        client.loop();
   b44ea:	483b      	ldr	r0, [pc, #236]	; (b45d8 <loop+0x108>)
   b44ec:	f000 fc91 	bl	b4e12 <_ZN4MQTT4loopEv>
    if (printer) // Debugging flag set in interrupt handler
   b44f0:	4c3a      	ldr	r4, [pc, #232]	; (b45dc <loop+0x10c>)
   b44f2:	7823      	ldrb	r3, [r4, #0]
   b44f4:	b143      	cbz	r3, b4508 <loop+0x38>
        Serial.printf("Light: %d\n",calc_power);
   b44f6:	f001 ffbd 	bl	b6474 <_Z16_fetch_usbserialv>
   b44fa:	4b39      	ldr	r3, [pc, #228]	; (b45e0 <loop+0x110>)
   b44fc:	4939      	ldr	r1, [pc, #228]	; (b45e4 <loop+0x114>)
   b44fe:	681a      	ldr	r2, [r3, #0]
   b4500:	f7ff fe90 	bl	b4224 <_ZN5Print6printfEPKcz>
        printer = false;
   b4504:	2300      	movs	r3, #0
   b4506:	7023      	strb	r3, [r4, #0]
    if (populate)
   b4508:	4b37      	ldr	r3, [pc, #220]	; (b45e8 <loop+0x118>)
   b450a:	781b      	ldrb	r3, [r3, #0]
   b450c:	b17b      	cbz	r3, b452e <loop+0x5e>
        calc_low();
   b450e:	f7ff febf 	bl	b4290 <_Z8calc_lowv>
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b4512:	f001 ffaf 	bl	b6474 <_Z16_fetch_usbserialv>
   b4516:	4604      	mov	r4, r0
   b4518:	f001 fb2e 	bl	b5b78 <_ZN9TimeClass4hourEv>
   b451c:	4605      	mov	r5, r0
   b451e:	f001 fb37 	bl	b5b90 <_ZN9TimeClass6minuteEv>
   b4522:	4932      	ldr	r1, [pc, #200]	; (b45ec <loop+0x11c>)
   b4524:	4603      	mov	r3, r0
   b4526:	1caa      	adds	r2, r5, #2
   b4528:	4620      	mov	r0, r4
   b452a:	f7ff fe7b 	bl	b4224 <_ZN5Print6printfEPKcz>
    if (work)
   b452e:	4e30      	ldr	r6, [pc, #192]	; (b45f0 <loop+0x120>)
   b4530:	7833      	ldrb	r3, [r6, #0]
   b4532:	2b00      	cmp	r3, #0
   b4534:	d034      	beq.n	b45a0 <loop+0xd0>
        String data = "Cheap(ish) hours of the day: ";
   b4536:	492f      	ldr	r1, [pc, #188]	; (b45f4 <loop+0x124>)
   b4538:	4c2f      	ldr	r4, [pc, #188]	; (b45f8 <loop+0x128>)
        for (int z = 0; z < cnt; z++)
   b453a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b461c <loop+0x14c>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b453e:	4f2f      	ldr	r7, [pc, #188]	; (b45fc <loop+0x12c>)
        String data = "Cheap(ish) hours of the day: ";
   b4540:	a802      	add	r0, sp, #8
   b4542:	f001 f94e 	bl	b57e2 <_ZN6StringC1EPK19__FlashStringHelper>
        for (int z = 0; z < cnt; z++)
   b4546:	2500      	movs	r5, #0
   b4548:	f8d8 3000 	ldr.w	r3, [r8]
   b454c:	42ab      	cmp	r3, r5
   b454e:	f104 0408 	add.w	r4, r4, #8
   b4552:	dd0e      	ble.n	b4572 <loop+0xa2>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b4554:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b4558:	4639      	mov	r1, r7
   b455a:	a806      	add	r0, sp, #24
   b455c:	f001 f9a2 	bl	b58a4 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4560:	a906      	add	r1, sp, #24
   b4562:	a802      	add	r0, sp, #8
   b4564:	f001 f98d 	bl	b5882 <_ZN6String6concatERKS_>
   b4568:	a806      	add	r0, sp, #24
   b456a:	f001 f8ef 	bl	b574c <_ZN6StringD1Ev>
        for (int z = 0; z < cnt; z++)
   b456e:	3501      	adds	r5, #1
   b4570:	e7ea      	b.n	b4548 <loop+0x78>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4572:	4b23      	ldr	r3, [pc, #140]	; (b4600 <loop+0x130>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4574:	9a02      	ldr	r2, [sp, #8]
   b4576:	781b      	ldrb	r3, [r3, #0]
   b4578:	4922      	ldr	r1, [pc, #136]	; (b4604 <loop+0x134>)
   b457a:	f88d 3000 	strb.w	r3, [sp]
   b457e:	a806      	add	r0, sp, #24
   b4580:	233c      	movs	r3, #60	; 0x3c
   b4582:	f001 fd23 	bl	b5fcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4586:	a807      	add	r0, sp, #28
   b4588:	f7ff ff8c 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        client.publish("prices", data);
   b458c:	9a02      	ldr	r2, [sp, #8]
   b458e:	491e      	ldr	r1, [pc, #120]	; (b4608 <loop+0x138>)
   b4590:	4811      	ldr	r0, [pc, #68]	; (b45d8 <loop+0x108>)
   b4592:	f000 fbe2 	bl	b4d5a <_ZN4MQTT7publishEPKcS1_>
        work = false;
   b4596:	2300      	movs	r3, #0
        String data = "Cheap(ish) hours of the day: ";
   b4598:	a802      	add	r0, sp, #8
        work = false;
   b459a:	7033      	strb	r3, [r6, #0]
        String data = "Cheap(ish) hours of the day: ";
   b459c:	f001 f8d6 	bl	b574c <_ZN6StringD1Ev>
    if (transmit_value) // Did we receive a request for updated values
   b45a0:	4c1a      	ldr	r4, [pc, #104]	; (b460c <loop+0x13c>)
   b45a2:	7823      	ldrb	r3, [r4, #0]
   b45a4:	b18b      	cbz	r3, b45ca <loop+0xfa>
        Serial.printf("Received power/get\n");
   b45a6:	f001 ff65 	bl	b6474 <_Z16_fetch_usbserialv>
   b45aa:	4919      	ldr	r1, [pc, #100]	; (b4610 <loop+0x140>)
   b45ac:	f7ff fe3a 	bl	b4224 <_ZN5Print6printfEPKcz>
        sprintf(values,"%d", calc_power);
   b45b0:	4b0b      	ldr	r3, [pc, #44]	; (b45e0 <loop+0x110>)
   b45b2:	4918      	ldr	r1, [pc, #96]	; (b4614 <loop+0x144>)
   b45b4:	681a      	ldr	r2, [r3, #0]
   b45b6:	a806      	add	r0, sp, #24
   b45b8:	f000 ffe2 	bl	b5580 <sprintf>
        client.publish("power",values);
   b45bc:	4916      	ldr	r1, [pc, #88]	; (b4618 <loop+0x148>)
   b45be:	4806      	ldr	r0, [pc, #24]	; (b45d8 <loop+0x108>)
   b45c0:	aa06      	add	r2, sp, #24
   b45c2:	f000 fbca 	bl	b4d5a <_ZN4MQTT7publishEPKcS1_>
        transmit_value = false;
   b45c6:	2300      	movs	r3, #0
   b45c8:	7023      	strb	r3, [r4, #0]
    delay(2000);
   b45ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   b45ce:	b00a      	add	sp, #40	; 0x28
   b45d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(2000);
   b45d4:	f001 bb12 	b.w	b5bfc <delay>
   b45d8:	2003cedc 	.word	0x2003cedc
   b45dc:	2003d205 	.word	0x2003d205
   b45e0:	2003ced8 	.word	0x2003ced8
   b45e4:	000b9d29 	.word	0x000b9d29
   b45e8:	2003d204 	.word	0x2003d204
   b45ec:	000b9d34 	.word	0x000b9d34
   b45f0:	2003e67e 	.word	0x2003e67e
   b45f4:	000b9d4e 	.word	0x000b9d4e
   b45f8:	2003dc18 	.word	0x2003dc18
   b45fc:	000b9d6c 	.word	0x000b9d6c
   b4600:	2003ced0 	.word	0x2003ced0
   b4604:	000b9d7b 	.word	0x000b9d7b
   b4608:	000b9c5e 	.word	0x000b9c5e
   b460c:	2003e67d 	.word	0x2003e67d
   b4610:	000b9d8b 	.word	0x000b9d8b
   b4614:	000b9e31 	.word	0x000b9e31
   b4618:	000b9d9f 	.word	0x000b9d9f
   b461c:	2003cf3c 	.word	0x2003cf3c

000b4620 <_Z8get_datai>:

void get_data(int day)
{
    rec_cnt = 0;
   b4620:	4a19      	ldr	r2, [pc, #100]	; (b4688 <_Z8get_datai+0x68>)
   b4622:	2300      	movs	r3, #0
{
   b4624:	b510      	push	{r4, lr}
    rec_cnt = 0;
   b4626:	7013      	strb	r3, [r2, #0]
    range = 48;
   b4628:	4a18      	ldr	r2, [pc, #96]	; (b468c <_Z8get_datai+0x6c>)
   b462a:	2130      	movs	r1, #48	; 0x30
   b462c:	6011      	str	r1, [r2, #0]
    idx = 0;
   b462e:	4a18      	ldr	r2, [pc, #96]	; (b4690 <_Z8get_datai+0x70>)
   b4630:	6013      	str	r3, [r2, #0]
    cnt = 0;
   b4632:	4a18      	ldr	r2, [pc, #96]	; (b4694 <_Z8get_datai+0x74>)
   b4634:	6013      	str	r3, [r2, #0]
    temp[0] = 0;
   b4636:	4a18      	ldr	r2, [pc, #96]	; (b4698 <_Z8get_datai+0x78>)
{
   b4638:	b08c      	sub	sp, #48	; 0x30
    temp[0] = 0;
   b463a:	7013      	strb	r3, [r2, #0]
{
   b463c:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
   b463e:	f001 fac7 	bl	b5bd0 <_ZN9TimeClass4yearEv>
   b4642:	9005      	str	r0, [sp, #20]
   b4644:	f001 fabc 	bl	b5bc0 <_ZN9TimeClass5monthEv>
   b4648:	9004      	str	r0, [sp, #16]
   b464a:	f001 fa95 	bl	b5b78 <_ZN9TimeClass4hourEv>
   b464e:	1ca1      	adds	r1, r4, #2
   b4650:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b4654:	e9cd 4100 	strd	r4, r1, [sp]
   b4658:	9002      	str	r0, [sp, #8]
   b465a:	4910      	ldr	r1, [pc, #64]	; (b469c <_Z8get_datai+0x7c>)
   b465c:	a808      	add	r0, sp, #32
   b465e:	f001 f921 	bl	b58a4 <_ZN6String6formatEPKcz>
   b4662:	4b0f      	ldr	r3, [pc, #60]	; (b46a0 <_Z8get_datai+0x80>)
   b4664:	9a08      	ldr	r2, [sp, #32]
   b4666:	781b      	ldrb	r3, [r3, #0]
   b4668:	490e      	ldr	r1, [pc, #56]	; (b46a4 <_Z8get_datai+0x84>)
   b466a:	f88d 3000 	strb.w	r3, [sp]
   b466e:	a806      	add	r0, sp, #24
   b4670:	233c      	movs	r3, #60	; 0x3c
   b4672:	f001 fcab 	bl	b5fcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4676:	a807      	add	r0, sp, #28
   b4678:	f7ff ff14 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b467c:	a808      	add	r0, sp, #32
   b467e:	f001 f865 	bl	b574c <_ZN6StringD1Ev>
    //Serial.printf("%s\n", data.c_str());
     // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
   b4682:	b00c      	add	sp, #48	; 0x30
   b4684:	bd10      	pop	{r4, pc}
   b4686:	bf00      	nop
   b4688:	2003d206 	.word	0x2003d206
   b468c:	2003ccf0 	.word	0x2003ccf0
   b4690:	2003d190 	.word	0x2003d190
   b4694:	2003cf3c 	.word	0x2003cf3c
   b4698:	2003dc78 	.word	0x2003dc78
   b469c:	000b9da5 	.word	0x000b9da5
   b46a0:	2003ced0 	.word	0x2003ced0
   b46a4:	000b9df8 	.word	0x000b9df8

000b46a8 <setup>:
{
   b46a8:	b510      	push	{r4, lr}
   b46aa:	b08a      	sub	sp, #40	; 0x28
   b46ac:	f000 fd34 	bl	b5118 <HAL_Timer_Get_Milli_Seconds>
    last_read = millis(); //Give it an initial value
   b46b0:	4b36      	ldr	r3, [pc, #216]	; (b478c <setup+0xe4>)
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b46b2:	2400      	movs	r4, #0
    last_read = millis(); //Give it an initial value
   b46b4:	6018      	str	r0, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                 //Setup pinmode for LDR pin
   b46b6:	2103      	movs	r1, #3
   b46b8:	2006      	movs	r0, #6
   b46ba:	f002 fbcb 	bl	b6e54 <pinMode>
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b46be:	4934      	ldr	r1, [pc, #208]	; (b4790 <setup+0xe8>)
   b46c0:	9400      	str	r4, [sp, #0]
   b46c2:	f04f 33ff 	mov.w	r3, #4294967295
   b46c6:	2201      	movs	r2, #1
   b46c8:	2006      	movs	r0, #6
   b46ca:	f001 fefb 	bl	b64c4 <_Z15attachInterrupttPFvvE13InterruptModeah>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b46ce:	4623      	mov	r3, r4
   b46d0:	4930      	ldr	r1, [pc, #192]	; (b4794 <setup+0xec>)
   b46d2:	4831      	ldr	r0, [pc, #196]	; (b4798 <setup+0xf0>)
   b46d4:	2209      	movs	r2, #9
   b46d6:	f000 ff03 	bl	b54e0 <spark_variable>
   b46da:	4623      	mov	r3, r4
   b46dc:	492f      	ldr	r1, [pc, #188]	; (b479c <setup+0xf4>)
   b46de:	4830      	ldr	r0, [pc, #192]	; (b47a0 <setup+0xf8>)
   b46e0:	2209      	movs	r2, #9
   b46e2:	f000 fefd 	bl	b54e0 <spark_variable>
   b46e6:	4623      	mov	r3, r4
   b46e8:	492e      	ldr	r1, [pc, #184]	; (b47a4 <setup+0xfc>)
   b46ea:	482f      	ldr	r0, [pc, #188]	; (b47a8 <setup+0x100>)
   b46ec:	2202      	movs	r2, #2
   b46ee:	f000 fef7 	bl	b54e0 <spark_variable>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b46f2:	4623      	mov	r3, r4
   b46f4:	4622      	mov	r2, r4
   b46f6:	e9cd 4400 	strd	r4, r4, [sp]
   b46fa:	492c      	ldr	r1, [pc, #176]	; (b47ac <setup+0x104>)
   b46fc:	482c      	ldr	r0, [pc, #176]	; (b47b0 <setup+0x108>)
   b46fe:	f000 ff0f 	bl	b5520 <spark_subscribe>
   b4702:	4623      	mov	r3, r4
   b4704:	4622      	mov	r2, r4
   b4706:	492b      	ldr	r1, [pc, #172]	; (b47b4 <setup+0x10c>)
   b4708:	482b      	ldr	r0, [pc, #172]	; (b47b8 <setup+0x110>)
   b470a:	e9cd 4400 	strd	r4, r4, [sp]
   b470e:	f000 ff07 	bl	b5520 <spark_subscribe>
    get_data(Time.day());
   b4712:	f001 fa49 	bl	b5ba8 <_ZN9TimeClass3dayEv>
   b4716:	f7ff ff83 	bl	b4620 <_Z8get_datai>
    Serial.printf("Return value: %d",client.connect("sparkclient_" + String(Time.now()),"mqtt","mqtt"));
   b471a:	f001 feab 	bl	b6474 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b471e:	4927      	ldr	r1, [pc, #156]	; (b47bc <setup+0x114>)
   b4720:	4604      	mov	r4, r0
   b4722:	a806      	add	r0, sp, #24
   b4724:	f001 f85d 	bl	b57e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4728:	f001 fa15 	bl	b5b56 <_ZN9TimeClass3nowEv>
   b472c:	220a      	movs	r2, #10
   b472e:	4601      	mov	r1, r0
   b4730:	a802      	add	r0, sp, #8
   b4732:	f001 f87c 	bl	b582e <_ZN6StringC1Elh>
   b4736:	a902      	add	r1, sp, #8
   b4738:	a806      	add	r0, sp, #24
   b473a:	f001 f8a6 	bl	b588a <_ZplRK15StringSumHelperRK6String>
   b473e:	4b20      	ldr	r3, [pc, #128]	; (b47c0 <setup+0x118>)
   b4740:	6801      	ldr	r1, [r0, #0]
   b4742:	4820      	ldr	r0, [pc, #128]	; (b47c4 <setup+0x11c>)
   b4744:	461a      	mov	r2, r3
   b4746:	f000 fa7d 	bl	b4c44 <_ZN4MQTT7connectEPKcS1_S1_>
   b474a:	491f      	ldr	r1, [pc, #124]	; (b47c8 <setup+0x120>)
   b474c:	4602      	mov	r2, r0
   b474e:	4620      	mov	r0, r4
   b4750:	f7ff fd68 	bl	b4224 <_ZN5Print6printfEPKcz>
   b4754:	a802      	add	r0, sp, #8
   b4756:	f000 fff9 	bl	b574c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b475a:	a806      	add	r0, sp, #24
   b475c:	f000 fff6 	bl	b574c <_ZN6StringD1Ev>
    if (client.isConnected()) 
   b4760:	4818      	ldr	r0, [pc, #96]	; (b47c4 <setup+0x11c>)
   b4762:	f000 f97f 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b4766:	b178      	cbz	r0, b4788 <setup+0xe0>
        client.publish("power/get","hello world");
   b4768:	4a18      	ldr	r2, [pc, #96]	; (b47cc <setup+0x124>)
   b476a:	4919      	ldr	r1, [pc, #100]	; (b47d0 <setup+0x128>)
   b476c:	4815      	ldr	r0, [pc, #84]	; (b47c4 <setup+0x11c>)
   b476e:	f000 faf4 	bl	b4d5a <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/get");
   b4772:	4917      	ldr	r1, [pc, #92]	; (b47d0 <setup+0x128>)
   b4774:	4813      	ldr	r0, [pc, #76]	; (b47c4 <setup+0x11c>)
   b4776:	f000 fc94 	bl	b50a2 <_ZN4MQTT9subscribeEPKc>
        client.subscribe("power/prices");
   b477a:	4916      	ldr	r1, [pc, #88]	; (b47d4 <setup+0x12c>)
   b477c:	4811      	ldr	r0, [pc, #68]	; (b47c4 <setup+0x11c>)
}
   b477e:	b00a      	add	sp, #40	; 0x28
   b4780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        client.subscribe("power/prices");
   b4784:	f000 bc8d 	b.w	b50a2 <_ZN4MQTT9subscribeEPKc>
}
   b4788:	b00a      	add	sp, #40	; 0x28
   b478a:	bd10      	pop	{r4, pc}
   b478c:	2003d1a0 	.word	0x2003d1a0
   b4790:	000b40b9 	.word	0x000b40b9
   b4794:	2003d198 	.word	0x2003d198
   b4798:	000b9e01 	.word	0x000b9e01
   b479c:	2003cce8 	.word	0x2003cce8
   b47a0:	000b9e09 	.word	0x000b9e09
   b47a4:	2003ced8 	.word	0x2003ced8
   b47a8:	000b9e12 	.word	0x000b9e12
   b47ac:	000b4121 	.word	0x000b4121
   b47b0:	000b9c5e 	.word	0x000b9c5e
   b47b4:	000b47d9 	.word	0x000b47d9
   b47b8:	000b9e18 	.word	0x000b9e18
   b47bc:	000b9c90 	.word	0x000b9c90
   b47c0:	000b9c9d 	.word	0x000b9c9d
   b47c4:	2003cedc 	.word	0x2003cedc
   b47c8:	000b9e23 	.word	0x000b9e23
   b47cc:	000b9e34 	.word	0x000b9e34
   b47d0:	000b9c65 	.word	0x000b9c65
   b47d4:	000b9c58 	.word	0x000b9c58

000b47d8 <_Z14myPriceHandlerPKcS0_>:
{
   b47d8:	b508      	push	{r3, lr}
    get_data(Time.day());
   b47da:	f001 f9e5 	bl	b5ba8 <_ZN9TimeClass3dayEv>
}
   b47de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    get_data(Time.day());
   b47e2:	f7ff bf1d 	b.w	b4620 <_Z8get_datai>
	...

000b47e8 <_GLOBAL__sub_I_cost>:
   b47e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
   b47ea:	4b0a      	ldr	r3, [pc, #40]	; (b4814 <_GLOBAL__sub_I_cost+0x2c>)
MQTT client("192.168.0.103", 1883, 512, 30, callback);
   b47ec:	490a      	ldr	r1, [pc, #40]	; (b4818 <_GLOBAL__sub_I_cost+0x30>)
   b47ee:	480b      	ldr	r0, [pc, #44]	; (b481c <_GLOBAL__sub_I_cost+0x34>)
   b47f0:	2201      	movs	r2, #1
   b47f2:	701a      	strb	r2, [r3, #0]
   b47f4:	2300      	movs	r3, #0
   b47f6:	9302      	str	r3, [sp, #8]
   b47f8:	4b09      	ldr	r3, [pc, #36]	; (b4820 <_GLOBAL__sub_I_cost+0x38>)
   b47fa:	9301      	str	r3, [sp, #4]
   b47fc:	231e      	movs	r3, #30
   b47fe:	9300      	str	r3, [sp, #0]
   b4800:	f240 725b 	movw	r2, #1883	; 0x75b
   b4804:	f44f 7300 	mov.w	r3, #512	; 0x200
   b4808:	f000 f850 	bl	b48ac <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
   b480c:	b005      	add	sp, #20
   b480e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4812:	bf00      	nop
   b4814:	2003ced0 	.word	0x2003ced0
   b4818:	000b9e40 	.word	0x000b9e40
   b481c:	2003cedc 	.word	0x2003cedc
   b4820:	000b40ed 	.word	0x000b40ed

000b4824 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4824:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4828:	b510      	push	{r4, lr}
   b482a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b482c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b482e:	b113      	cbz	r3, b4836 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4830:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4832:	f000 fc91 	bl	b5158 <os_mutex_lock>
#endif
#endif
#endif
        }
   b4836:	4620      	mov	r0, r4
   b4838:	bd10      	pop	{r4, pc}

000b483a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b483a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b483c:	6803      	ldr	r3, [r0, #0]
   b483e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4842:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4844:	b112      	cbz	r2, b484c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b4846:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4848:	f000 fc8e 	bl	b5168 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b484c:	4620      	mov	r0, r4
   b484e:	bd10      	pop	{r4, pc}

000b4850 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4852:	461f      	mov	r7, r3
   b4854:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4858:	4604      	mov	r4, r0
   b485a:	460d      	mov	r5, r1
   b485c:	4616      	mov	r6, r2
    if (thread) {
   b485e:	b12b      	cbz	r3, b486c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4860:	2301      	movs	r3, #1
   b4862:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4866:	3058      	adds	r0, #88	; 0x58
   b4868:	f000 fc6e 	bl	b5148 <os_mutex_create>
    }
    this->callback = callback;
   b486c:	9b08      	ldr	r3, [sp, #32]
   b486e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4870:	2300      	movs	r3, #0
   b4872:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4874:	b106      	cbz	r6, b4878 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b4876:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4878:	b125      	cbz	r5, b4884 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b487a:	4629      	mov	r1, r5
   b487c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4880:	f000 ffc3 	bl	b580a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4884:	9b06      	ldr	r3, [sp, #24]
   b4886:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4888:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b488a:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b488c:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4890:	2bff      	cmp	r3, #255	; 0xff
   b4892:	bfb8      	it	lt
   b4894:	23ff      	movlt	r3, #255	; 0xff
   b4896:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b489a:	b108      	cbz	r0, b48a0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b489c:	f7ff fbff 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b48a0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b48a4:	f7ff fbf9 	bl	b409a <_Znaj>
   b48a8:	61e0      	str	r0, [r4, #28]
}
   b48aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b48ac <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b48ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b48b0:	4604      	mov	r4, r0
            bool thread) {
   b48b2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b48b4:	4617      	mov	r7, r2
   b48b6:	4698      	mov	r8, r3
   b48b8:	460e      	mov	r6, r1
            bool thread) {
   b48ba:	f002 f989 	bl	b6bd0 <_ZN9TCPClientC1Ev>
   b48be:	490d      	ldr	r1, [pc, #52]	; (b48f4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b48c0:	61e5      	str	r5, [r4, #28]
   b48c2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b48c6:	f000 ff8c 	bl	b57e2 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b48ca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b48ce:	9303      	str	r3, [sp, #12]
   b48d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b48d2:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b48d4:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b48d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b48da:	9300      	str	r3, [sp, #0]
   b48dc:	4620      	mov	r0, r4
            bool thread) {
   b48de:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b48e2:	463b      	mov	r3, r7
   b48e4:	462a      	mov	r2, r5
   b48e6:	4631      	mov	r1, r6
   b48e8:	f7ff ffb2 	bl	b4850 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b48ec:	4620      	mov	r0, r4
   b48ee:	b004      	add	sp, #16
   b48f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48f4:	000b9d1a 	.word	0x000b9d1a

000b48f8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b48f8:	b510      	push	{r4, lr}
   b48fa:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b48fc:	4620      	mov	r0, r4
   b48fe:	f002 f8c3 	bl	b6a88 <_ZN9TCPClient9availableEv>
   b4902:	2800      	cmp	r0, #0
   b4904:	d0fa      	beq.n	b48fc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b4906:	4620      	mov	r0, r4
   b4908:	f001 fecc 	bl	b66a4 <_ZN9TCPClient4readEv>
}
   b490c:	b2c0      	uxtb	r0, r0
   b490e:	bd10      	pop	{r4, pc}

000b4910 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4914:	4605      	mov	r5, r0
   b4916:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4918:	f7ff ffee 	bl	b48f8 <_ZN4MQTT8readByteEv>
   b491c:	69eb      	ldr	r3, [r5, #28]
   b491e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4920:	69eb      	ldr	r3, [r5, #28]
   b4922:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b4926:	f04f 0901 	mov.w	r9, #1
   b492a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b492e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4930:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4932:	4628      	mov	r0, r5
   b4934:	f7ff ffe0 	bl	b48f8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4938:	4626      	mov	r6, r4
   b493a:	69eb      	ldr	r3, [r5, #28]
   b493c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b493e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b4942:	fb13 f309 	smulbb	r3, r3, r9
   b4946:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4948:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b494a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b494c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b494e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4950:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b4954:	d4ed      	bmi.n	b4932 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b4956:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4958:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b495c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4960:	d11e      	bne.n	b49a0 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b4962:	4628      	mov	r0, r5
   b4964:	f7ff ffc8 	bl	b48f8 <_ZN4MQTT8readByteEv>
   b4968:	69eb      	ldr	r3, [r5, #28]
   b496a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b496c:	4628      	mov	r0, r5
   b496e:	f7ff ffc3 	bl	b48f8 <_ZN4MQTT8readByteEv>
   b4972:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b4974:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b4976:	b2b6      	uxth	r6, r6
   b4978:	69eb      	ldr	r3, [r5, #28]
   b497a:	b2a4      	uxth	r4, r4
   b497c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b497e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4980:	b2b6      	uxth	r6, r6
   b4982:	42be      	cmp	r6, r7
   b4984:	d20e      	bcs.n	b49a4 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b4986:	4628      	mov	r0, r5
   b4988:	f7ff ffb6 	bl	b48f8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b498c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4990:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b4992:	bf84      	itt	hi
   b4994:	69eb      	ldrhi	r3, [r5, #28]
   b4996:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4998:	3401      	adds	r4, #1
   b499a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b499c:	3601      	adds	r6, #1
   b499e:	e7ef      	b.n	b4980 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b49a0:	2600      	movs	r6, #0
   b49a2:	e7ed      	b.n	b4980 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b49a4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b49a8:	42a3      	cmp	r3, r4
   b49aa:	bf2c      	ite	cs
   b49ac:	4620      	movcs	r0, r4
   b49ae:	2000      	movcc	r0, #0
   b49b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b49b4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b49b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b49b8:	4615      	mov	r5, r2
   b49ba:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b49bc:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b49be:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b49c0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b49c2:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b49c4:	a802      	add	r0, sp, #8
        digit = len % 128;
   b49c6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b49ca:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b49ce:	f103 0401 	add.w	r4, r3, #1
   b49d2:	4403      	add	r3, r0
            digit |= 0x80;
   b49d4:	bf88      	it	hi
   b49d6:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b49da:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b49de:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b49e2:	b2e4      	uxtb	r4, r4
   b49e4:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b49e8:	d81e      	bhi.n	b4a28 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b49ea:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b49ee:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b49f2:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b49f4:	4622      	mov	r2, r4
   b49f6:	a901      	add	r1, sp, #4
   b49f8:	4428      	add	r0, r5
    buf[4-llen] = header;
   b49fa:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b49fe:	f003 f882 	bl	b7b06 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4a02:	1c72      	adds	r2, r6, #1
   b4a04:	4422      	add	r2, r4
   b4a06:	4641      	mov	r1, r8
   b4a08:	4638      	mov	r0, r7
   b4a0a:	f001 fe36 	bl	b667a <_ZN9TCPClient5writeEPKhj>
   b4a0e:	4605      	mov	r5, r0
   b4a10:	f000 fb82 	bl	b5118 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4a14:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b4a16:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4a18:	4432      	add	r2, r6
   b4a1a:	b2a8      	uxth	r0, r5
}
   b4a1c:	1a13      	subs	r3, r2, r0
   b4a1e:	4258      	negs	r0, r3
   b4a20:	4158      	adcs	r0, r3
   b4a22:	b002      	add	sp, #8
   b4a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4a28:	4623      	mov	r3, r4
   b4a2a:	e7ca      	b.n	b49c2 <_ZN4MQTT5writeEhPht+0xe>

000b4a2c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4a2c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a30:	4605      	mov	r5, r0
    pos += 2;
   b4a32:	b298      	uxth	r0, r3
   b4a34:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b4a36:	5cce      	ldrb	r6, [r1, r3]
   b4a38:	b29c      	uxth	r4, r3
   b4a3a:	b156      	cbz	r6, b4a52 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4a3c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4a40:	4584      	cmp	ip, r0
   b4a42:	f103 0701 	add.w	r7, r3, #1
   b4a46:	d904      	bls.n	b4a52 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b4a48:	1c44      	adds	r4, r0, #1
   b4a4a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b4a4c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b4a4e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4a50:	e7f1      	b.n	b4a36 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b4a52:	b299      	uxth	r1, r3
   b4a54:	1a41      	subs	r1, r0, r1
   b4a56:	440a      	add	r2, r1
   b4a58:	0a21      	lsrs	r1, r4, #8
   b4a5a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4a5e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b4a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4a64 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4a64:	b538      	push	{r3, r4, r5, lr}
   b4a66:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4a68:	f001 ff30 	bl	b68cc <_ZN9TCPClient9connectedEv>
   b4a6c:	2800      	cmp	r0, #0
   b4a6e:	bf14      	ite	ne
   b4a70:	2501      	movne	r5, #1
   b4a72:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4a74:	d102      	bne.n	b4a7c <_ZN4MQTT11isConnectedEv+0x18>
   b4a76:	4620      	mov	r0, r4
   b4a78:	f002 f860 	bl	b6b3c <_ZN9TCPClient4stopEv>
    return rc;
}
   b4a7c:	4628      	mov	r0, r5
   b4a7e:	bd38      	pop	{r3, r4, r5, pc}

000b4a80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4a84:	b088      	sub	sp, #32
   b4a86:	4604      	mov	r4, r0
   b4a88:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4a8c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4a90:	4689      	mov	r9, r1
   b4a92:	4617      	mov	r7, r2
   b4a94:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4a96:	f7ff ffe5 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b4a9a:	4605      	mov	r5, r0
   b4a9c:	2800      	cmp	r0, #0
   b4a9e:	f040 80cd 	bne.w	b4c3c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4aa2:	4621      	mov	r1, r4
   b4aa4:	a801      	add	r0, sp, #4
   b4aa6:	f7ff febd 	bl	b4824 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4aaa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4aac:	2900      	cmp	r1, #0
   b4aae:	f040 8088 	bne.w	b4bc2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4ab2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4ab6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4ab8:	462b      	mov	r3, r5
   b4aba:	4620      	mov	r0, r4
   b4abc:	f001 fe88 	bl	b67d0 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4ac0:	2800      	cmp	r0, #0
   b4ac2:	d07a      	beq.n	b4bba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4ac4:	2301      	movs	r3, #1
   b4ac6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4ac8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4acc:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4ace:	2b04      	cmp	r3, #4
   b4ad0:	4b5b      	ldr	r3, [pc, #364]	; (b4c40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4ad2:	f040 8081 	bne.w	b4bd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4ad6:	6818      	ldr	r0, [r3, #0]
   b4ad8:	8899      	ldrh	r1, [r3, #4]
   b4ada:	799b      	ldrb	r3, [r3, #6]
   b4adc:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4ae0:	f88d 300e 	strb.w	r3, [sp, #14]
   b4ae4:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4ae6:	f8c2 0005 	str.w	r0, [r2, #5]
   b4aea:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4aee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4af2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4af6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4af8:	230c      	movs	r3, #12
            if (willTopic) {
   b4afa:	f1b8 0f00 	cmp.w	r8, #0
   b4afe:	f000 8081 	beq.w	b4c04 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4b02:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b4b06:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4b0a:	0140      	lsls	r0, r0, #5
   b4b0c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4b10:	f040 0006 	orr.w	r0, r0, #6
   b4b14:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b4b16:	f1ba 0f00 	cmp.w	sl, #0
   b4b1a:	d101      	bne.n	b4b20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4b1c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4b20:	b11f      	cbz	r7, b4b2a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4b22:	2e00      	cmp	r6, #0
   b4b24:	d170      	bne.n	b4c08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b4b26:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4b2a:	69e2      	ldr	r2, [r4, #28]
   b4b2c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4b2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4b30:	69e1      	ldr	r1, [r4, #28]
   b4b32:	1c58      	adds	r0, r3, #1
   b4b34:	1212      	asrs	r2, r2, #8
   b4b36:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b4b38:	1c9a      	adds	r2, r3, #2
   b4b3a:	69e1      	ldr	r1, [r4, #28]
   b4b3c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4b3e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4b40:	3303      	adds	r3, #3
   b4b42:	69e2      	ldr	r2, [r4, #28]
   b4b44:	4649      	mov	r1, r9
   b4b46:	4620      	mov	r0, r4
   b4b48:	f7ff ff70 	bl	b4a2c <_ZN4MQTT11writeStringEPKcPht>
   b4b4c:	4603      	mov	r3, r0
            if (willTopic) {
   b4b4e:	f1b8 0f00 	cmp.w	r8, #0
   b4b52:	d00b      	beq.n	b4b6c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4b54:	69e2      	ldr	r2, [r4, #28]
   b4b56:	4641      	mov	r1, r8
   b4b58:	4620      	mov	r0, r4
   b4b5a:	f7ff ff67 	bl	b4a2c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b4b5e:	69e2      	ldr	r2, [r4, #28]
   b4b60:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4b62:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4b64:	4620      	mov	r0, r4
   b4b66:	f7ff ff61 	bl	b4a2c <_ZN4MQTT11writeStringEPKcPht>
   b4b6a:	4603      	mov	r3, r0
            if(user != NULL) {
   b4b6c:	b167      	cbz	r7, b4b88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b4b6e:	69e2      	ldr	r2, [r4, #28]
   b4b70:	4639      	mov	r1, r7
   b4b72:	4620      	mov	r0, r4
   b4b74:	f7ff ff5a 	bl	b4a2c <_ZN4MQTT11writeStringEPKcPht>
   b4b78:	4603      	mov	r3, r0
                if(pass != NULL) {
   b4b7a:	b12e      	cbz	r6, b4b88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b4b7c:	69e2      	ldr	r2, [r4, #28]
   b4b7e:	4631      	mov	r1, r6
   b4b80:	4620      	mov	r0, r4
   b4b82:	f7ff ff53 	bl	b4a2c <_ZN4MQTT11writeStringEPKcPht>
   b4b86:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4b88:	3b05      	subs	r3, #5
   b4b8a:	69e2      	ldr	r2, [r4, #28]
   b4b8c:	b29b      	uxth	r3, r3
   b4b8e:	2110      	movs	r1, #16
   b4b90:	4620      	mov	r0, r4
   b4b92:	f7ff ff0f 	bl	b49b4 <_ZN4MQTT5writeEhPht>
   b4b96:	f000 fabf 	bl	b5118 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4b9a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4b9e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4ba2:	4620      	mov	r0, r4
   b4ba4:	f001 ff70 	bl	b6a88 <_ZN9TCPClient9availableEv>
   b4ba8:	bb88      	cbnz	r0, b4c0e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b4baa:	f000 fab5 	bl	b5118 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4bae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4bb0:	1ac0      	subs	r0, r0, r3
   b4bb2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4bb4:	4373      	muls	r3, r6
   b4bb6:	4298      	cmp	r0, r3
   b4bb8:	d9f3      	bls.n	b4ba2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b4bba:	4620      	mov	r0, r4
   b4bbc:	f001 ffbe 	bl	b6b3c <_ZN9TCPClient4stopEv>
   b4bc0:	e035      	b.n	b4c2e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4bc2:	a802      	add	r0, sp, #8
   b4bc4:	f001 fbec 	bl	b63a0 <_ZN9IPAddressC1EPKh>
   b4bc8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4bcc:	462b      	mov	r3, r5
   b4bce:	a902      	add	r1, sp, #8
   b4bd0:	4620      	mov	r0, r4
   b4bd2:	f001 fedd 	bl	b6990 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4bd6:	e773      	b.n	b4ac0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4bd8:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4bdc:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4be0:	7bdb      	ldrb	r3, [r3, #15]
   b4be2:	f10d 0c08 	add.w	ip, sp, #8
   b4be6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b4bea:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b4bee:	ab02      	add	r3, sp, #8
   b4bf0:	cb03      	ldmia	r3!, {r0, r1}
   b4bf2:	f8c2 0005 	str.w	r0, [r2, #5]
   b4bf6:	f8c2 1009 	str.w	r1, [r2, #9]
   b4bfa:	f89c 3000 	ldrb.w	r3, [ip]
   b4bfe:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b4c00:	230e      	movs	r3, #14
   b4c02:	e77a      	b.n	b4afa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b4c04:	2002      	movs	r0, #2
   b4c06:	e786      	b.n	b4b16 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b4c08:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4c0c:	e78d      	b.n	b4b2a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4c0e:	a902      	add	r1, sp, #8
   b4c10:	4620      	mov	r0, r4
   b4c12:	f7ff fe7d 	bl	b4910 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b4c16:	2804      	cmp	r0, #4
   b4c18:	d1cf      	bne.n	b4bba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b4c1a:	69e3      	ldr	r3, [r4, #28]
   b4c1c:	78de      	ldrb	r6, [r3, #3]
   b4c1e:	2e00      	cmp	r6, #0
   b4c20:	d1cb      	bne.n	b4bba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b4c22:	f000 fa79 	bl	b5118 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b4c26:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b4c28:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b4c2a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4c2e:	a801      	add	r0, sp, #4
   b4c30:	f7ff fe03 	bl	b483a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4c34:	4628      	mov	r0, r5
   b4c36:	b008      	add	sp, #32
   b4c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b4c3c:	2500      	movs	r5, #0
   b4c3e:	e7f9      	b.n	b4c34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4c40:	000b9e4e 	.word	0x000b9e4e

000b4c44 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4c44:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4c46:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4c4a:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4c4c:	2401      	movs	r4, #1
   b4c4e:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b4c52:	2400      	movs	r4, #0
   b4c54:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b4c58:	e9cd 4400 	strd	r4, r4, [sp]
   b4c5c:	f7ff ff10 	bl	b4a80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b4c60:	b006      	add	sp, #24
   b4c62:	bd10      	pop	{r4, pc}

000b4c64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c68:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b4c6c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b4c70:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4c74:	4604      	mov	r4, r0
   b4c76:	468b      	mov	fp, r1
   b4c78:	4616      	mov	r6, r2
   b4c7a:	461f      	mov	r7, r3
    if (isConnected()) {
   b4c7c:	f7ff fef2 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b4c80:	4682      	mov	sl, r0
   b4c82:	2800      	cmp	r0, #0
   b4c84:	d051      	beq.n	b4d2a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4c86:	4621      	mov	r1, r4
   b4c88:	a801      	add	r0, sp, #4
   b4c8a:	f7ff fdcb 	bl	b4824 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b4c8e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b4c92:	69e0      	ldr	r0, [r4, #28]
   b4c94:	2100      	movs	r1, #0
   b4c96:	f002 ff44 	bl	b7b22 <memset>
        length = writeString(topic, buffer, length);
   b4c9a:	2305      	movs	r3, #5
   b4c9c:	69e2      	ldr	r2, [r4, #28]
   b4c9e:	4659      	mov	r1, fp
   b4ca0:	4620      	mov	r0, r4
   b4ca2:	f7ff fec3 	bl	b4a2c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4ca6:	1e6b      	subs	r3, r5, #1
   b4ca8:	2b01      	cmp	r3, #1
   b4caa:	d815      	bhi.n	b4cd8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4cac:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4cae:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4cb0:	3101      	adds	r1, #1
   b4cb2:	b289      	uxth	r1, r1
   b4cb4:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4cb6:	0a09      	lsrs	r1, r1, #8
   b4cb8:	5419      	strb	r1, [r3, r0]
   b4cba:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4cbc:	69e3      	ldr	r3, [r4, #28]
   b4cbe:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4cc0:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4cc2:	3002      	adds	r0, #2
   b4cc4:	5499      	strb	r1, [r3, r2]
   b4cc6:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4cc8:	f1b8 0f00 	cmp.w	r8, #0
   b4ccc:	d004      	beq.n	b4cd8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b4cce:	8c23      	ldrh	r3, [r4, #32]
   b4cd0:	1c5a      	adds	r2, r3, #1
   b4cd2:	8422      	strh	r2, [r4, #32]
   b4cd4:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4cd8:	2100      	movs	r1, #0
   b4cda:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4cdc:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b4cde:	69e2      	ldr	r2, [r4, #28]
   b4ce0:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4ce2:	d90a      	bls.n	b4cfa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4ce4:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4ce8:	459c      	cmp	ip, r3
   b4cea:	d906      	bls.n	b4cfa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4cec:	f816 c001 	ldrb.w	ip, [r6, r1]
   b4cf0:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4cf4:	3101      	adds	r1, #1
   b4cf6:	b289      	uxth	r1, r1
   b4cf8:	e7ef      	b.n	b4cda <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b4cfa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b4cfe:	2900      	cmp	r1, #0
   b4d00:	bf0c      	ite	eq
   b4d02:	2130      	moveq	r1, #48	; 0x30
   b4d04:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b4d06:	f1b9 0f00 	cmp.w	r9, #0
   b4d0a:	d001      	beq.n	b4d10 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4d0c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b4d10:	2d02      	cmp	r5, #2
   b4d12:	d10e      	bne.n	b4d32 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b4d14:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b4d18:	3b05      	subs	r3, #5
   b4d1a:	b29b      	uxth	r3, r3
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	f7ff fe49 	bl	b49b4 <_ZN4MQTT5writeEhPht>
   b4d22:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4d24:	a801      	add	r0, sp, #4
   b4d26:	f7ff fd88 	bl	b483a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4d2a:	4650      	mov	r0, sl
   b4d2c:	b003      	add	sp, #12
   b4d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b4d32:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b4d34:	bf08      	it	eq
   b4d36:	f041 0102 	orreq.w	r1, r1, #2
   b4d3a:	e7ed      	b.n	b4d18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b4d3c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b4d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b4d3e:	9c08      	ldr	r4, [sp, #32]
   b4d40:	9403      	str	r4, [sp, #12]
   b4d42:	2400      	movs	r4, #0
   b4d44:	9402      	str	r4, [sp, #8]
   b4d46:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b4d4a:	9401      	str	r4, [sp, #4]
   b4d4c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b4d50:	9400      	str	r4, [sp, #0]
   b4d52:	f7ff ff87 	bl	b4c64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b4d56:	b004      	add	sp, #16
   b4d58:	bd10      	pop	{r4, pc}

000b4d5a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b4d5a:	b530      	push	{r4, r5, lr}
   b4d5c:	b087      	sub	sp, #28
   b4d5e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4d60:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b4d62:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4d64:	9204      	str	r2, [sp, #16]
   b4d66:	f002 ff52 	bl	b7c0e <strlen>
   b4d6a:	2500      	movs	r5, #0
   b4d6c:	4603      	mov	r3, r0
   b4d6e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4d72:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4d76:	9500      	str	r5, [sp, #0]
   b4d78:	4620      	mov	r0, r4
   b4d7a:	f7ff ffdf 	bl	b4d3c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b4d7e:	b007      	add	sp, #28
   b4d80:	bd30      	pop	{r4, r5, pc}

000b4d82 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b4d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4d84:	4604      	mov	r4, r0
   b4d86:	460e      	mov	r6, r1
    if (isConnected()) {
   b4d88:	f7ff fe6c 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b4d8c:	4605      	mov	r5, r0
   b4d8e:	b1c8      	cbz	r0, b4dc4 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4d90:	4621      	mov	r1, r4
   b4d92:	a801      	add	r0, sp, #4
   b4d94:	f7ff fd46 	bl	b4824 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4d98:	69e3      	ldr	r3, [r4, #28]
   b4d9a:	2262      	movs	r2, #98	; 0x62
   b4d9c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4d9e:	69e3      	ldr	r3, [r4, #28]
   b4da0:	2202      	movs	r2, #2
   b4da2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4da4:	69e3      	ldr	r3, [r4, #28]
   b4da6:	0a32      	lsrs	r2, r6, #8
   b4da8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4daa:	69e3      	ldr	r3, [r4, #28]
   b4dac:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4dae:	69e1      	ldr	r1, [r4, #28]
   b4db0:	2204      	movs	r2, #4
   b4db2:	4620      	mov	r0, r4
   b4db4:	f001 fc61 	bl	b667a <_ZN9TCPClient5writeEPKhj>
   b4db8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4dba:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4dbc:	bf18      	it	ne
   b4dbe:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4dc0:	f7ff fd3b 	bl	b483a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4dc4:	4628      	mov	r0, r5
   b4dc6:	b002      	add	sp, #8
   b4dc8:	bd70      	pop	{r4, r5, r6, pc}

000b4dca <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b4dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4dcc:	4604      	mov	r4, r0
   b4dce:	460e      	mov	r6, r1
    if (isConnected()) {
   b4dd0:	f7ff fe48 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b4dd4:	4605      	mov	r5, r0
   b4dd6:	b1c8      	cbz	r0, b4e0c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4dd8:	4621      	mov	r1, r4
   b4dda:	a801      	add	r0, sp, #4
   b4ddc:	f7ff fd22 	bl	b4824 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4de0:	69e3      	ldr	r3, [r4, #28]
   b4de2:	2272      	movs	r2, #114	; 0x72
   b4de4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4de6:	69e3      	ldr	r3, [r4, #28]
   b4de8:	2202      	movs	r2, #2
   b4dea:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4dec:	69e3      	ldr	r3, [r4, #28]
   b4dee:	0a32      	lsrs	r2, r6, #8
   b4df0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4df2:	69e3      	ldr	r3, [r4, #28]
   b4df4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4df6:	69e1      	ldr	r1, [r4, #28]
   b4df8:	2204      	movs	r2, #4
   b4dfa:	4620      	mov	r0, r4
   b4dfc:	f001 fc3d 	bl	b667a <_ZN9TCPClient5writeEPKhj>
   b4e00:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4e02:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4e04:	bf18      	it	ne
   b4e06:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4e08:	f7ff fd17 	bl	b483a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4e0c:	4628      	mov	r0, r5
   b4e0e:	b002      	add	sp, #8
   b4e10:	bd70      	pop	{r4, r5, r6, pc}

000b4e12 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b4e12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e16:	ed2d 8b02 	vpush	{d8}
   b4e1a:	b087      	sub	sp, #28
   b4e1c:	af00      	add	r7, sp, #0
   b4e1e:	4604      	mov	r4, r0
    if (isConnected()) {
   b4e20:	f7ff fe20 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b4e24:	4681      	mov	r9, r0
   b4e26:	b1f8      	cbz	r0, b4e68 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b4e28:	4621      	mov	r1, r4
   b4e2a:	f107 0014 	add.w	r0, r7, #20
   b4e2e:	f7ff fcf9 	bl	b4824 <_ZN4MQTT11MutexLockerC1EPS_>
   b4e32:	f000 f971 	bl	b5118 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b4e36:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4e3c:	4353      	muls	r3, r2
   b4e3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4e40:	1a82      	subs	r2, r0, r2
   b4e42:	429a      	cmp	r2, r3
   b4e44:	4606      	mov	r6, r0
   b4e46:	d803      	bhi.n	b4e50 <_ZN4MQTT4loopEv+0x3e>
   b4e48:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4e4a:	1a82      	subs	r2, r0, r2
   b4e4c:	4293      	cmp	r3, r2
   b4e4e:	d221      	bcs.n	b4e94 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b4e50:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4e54:	b17b      	cbz	r3, b4e76 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b4e56:	4620      	mov	r0, r4
   b4e58:	f001 fe70 	bl	b6b3c <_ZN9TCPClient4stopEv>
                return false;
   b4e5c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b4e60:	f107 0014 	add.w	r0, r7, #20
   b4e64:	f7ff fce9 	bl	b483a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4e68:	4648      	mov	r0, r9
   b4e6a:	371c      	adds	r7, #28
   b4e6c:	46bd      	mov	sp, r7
   b4e6e:	ecbd 8b02 	vpop	{d8}
   b4e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4e76:	69e2      	ldr	r2, [r4, #28]
   b4e78:	21c0      	movs	r1, #192	; 0xc0
   b4e7a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4e7c:	69e2      	ldr	r2, [r4, #28]
   b4e7e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b4e80:	69e1      	ldr	r1, [r4, #28]
   b4e82:	2202      	movs	r2, #2
   b4e84:	4620      	mov	r0, r4
   b4e86:	f001 fbf8 	bl	b667a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4e8a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4e8e:	2301      	movs	r3, #1
   b4e90:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4e94:	4620      	mov	r0, r4
   b4e96:	f001 fdf7 	bl	b6a88 <_ZN9TCPClient9availableEv>
   b4e9a:	2800      	cmp	r0, #0
   b4e9c:	d0e0      	beq.n	b4e60 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4e9e:	f107 0113 	add.w	r1, r7, #19
   b4ea2:	4620      	mov	r0, r4
   b4ea4:	f7ff fd34 	bl	b4910 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4ea8:	4683      	mov	fp, r0
   b4eaa:	2800      	cmp	r0, #0
   b4eac:	d0d8      	beq.n	b4e60 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4eae:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4eb0:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4eb2:	7819      	ldrb	r1, [r3, #0]
   b4eb4:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4eb8:	2a30      	cmp	r2, #48	; 0x30
   b4eba:	d17f      	bne.n	b4fbc <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4ebc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4ec0:	f1ba 0f00 	cmp.w	sl, #0
   b4ec4:	d0cc      	beq.n	b4e60 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4ec6:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4eca:	466a      	mov	r2, sp
   b4ecc:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4ed0:	eb03 020c 	add.w	r2, r3, ip
   b4ed4:	7851      	ldrb	r1, [r2, #1]
   b4ed6:	7895      	ldrb	r5, [r2, #2]
   b4ed8:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4edc:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b4ede:	f105 0208 	add.w	r2, r5, #8
   b4ee2:	4669      	mov	r1, sp
   b4ee4:	08d2      	lsrs	r2, r2, #3
   b4ee6:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4eea:	4695      	mov	sp, r2
   b4eec:	f10c 0203 	add.w	r2, ip, #3
   b4ef0:	60fa      	str	r2, [r7, #12]
   b4ef2:	eb03 0e02 	add.w	lr, r3, r2
   b4ef6:	eb0d 0205 	add.w	r2, sp, r5
   b4efa:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4efc:	f8c7 d008 	str.w	sp, [r7, #8]
   b4f00:	607a      	str	r2, [r7, #4]
   b4f02:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b4f06:	428a      	cmp	r2, r1
   b4f08:	d006      	beq.n	b4f18 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b4f0a:	460a      	mov	r2, r1
   b4f0c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b4f10:	f802 8b01 	strb.w	r8, [r2], #1
   b4f14:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b4f16:	e7f4      	b.n	b4f02 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b4f18:	2200      	movs	r2, #0
   b4f1a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4f1c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f20:	68f9      	ldr	r1, [r7, #12]
   b4f22:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4f26:	ebab 020c 	sub.w	r2, fp, ip
   b4f2a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4f2c:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b4f30:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f34:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4f36:	d125      	bne.n	b4f84 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f38:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4f3c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4f3e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f40:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b4f44:	f10c 0105 	add.w	r1, ip, #5
   b4f48:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4f4a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f4c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4f50:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4f52:	69e3      	ldr	r3, [r4, #28]
   b4f54:	2240      	movs	r2, #64	; 0x40
   b4f56:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4f58:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4f5a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4f5e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4f62:	69e3      	ldr	r3, [r4, #28]
   b4f64:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4f68:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4f6a:	69e3      	ldr	r3, [r4, #28]
   b4f6c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4f70:	69e1      	ldr	r1, [r4, #28]
   b4f72:	2204      	movs	r2, #4
   b4f74:	4620      	mov	r0, r4
   b4f76:	f001 fb80 	bl	b667a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4f7a:	6266      	str	r6, [r4, #36]	; 0x24
   b4f7c:	ee18 3a10 	vmov	r3, s16
   b4f80:	469d      	mov	sp, r3
   b4f82:	e76d      	b.n	b4e60 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4f84:	f1b8 0f04 	cmp.w	r8, #4
   b4f88:	d115      	bne.n	b4fb6 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4f8a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4f8e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4f90:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4f92:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4f96:	f10c 0105 	add.w	r1, ip, #5
   b4f9a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4f9c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4f9e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4fa2:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4fa4:	69e3      	ldr	r3, [r4, #28]
   b4fa6:	2250      	movs	r2, #80	; 0x50
   b4fa8:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4faa:	69e3      	ldr	r3, [r4, #28]
   b4fac:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4fae:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4fb2:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4fb4:	e7d5      	b.n	b4f62 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4fb6:	4419      	add	r1, r3
   b4fb8:	47d0      	blx	sl
   b4fba:	e7df      	b.n	b4f7c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4fbc:	2a50      	cmp	r2, #80	; 0x50
   b4fbe:	d108      	bne.n	b4fd2 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4fc0:	789a      	ldrb	r2, [r3, #2]
   b4fc2:	78d9      	ldrb	r1, [r3, #3]
   b4fc4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4fc8:	b289      	uxth	r1, r1
   b4fca:	4620      	mov	r0, r4
   b4fcc:	f7ff fed9 	bl	b4d82 <_ZN4MQTT14publishReleaseEt>
   b4fd0:	e746      	b.n	b4e60 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4fd2:	2a40      	cmp	r2, #64	; 0x40
   b4fd4:	d112      	bne.n	b4ffc <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4fd6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4fd8:	2a00      	cmp	r2, #0
   b4fda:	f43f af41 	beq.w	b4e60 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b4fde:	f1bb 0f04 	cmp.w	fp, #4
   b4fe2:	f47f af3d 	bne.w	b4e60 <_ZN4MQTT4loopEv+0x4e>
   b4fe6:	f011 0f06 	tst.w	r1, #6
   b4fea:	f47f af39 	bne.w	b4e60 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b4fee:	7899      	ldrb	r1, [r3, #2]
   b4ff0:	78d8      	ldrb	r0, [r3, #3]
   b4ff2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b4ff6:	b280      	uxth	r0, r0
   b4ff8:	4790      	blx	r2
   b4ffa:	e731      	b.n	b4e60 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b4ffc:	2a60      	cmp	r2, #96	; 0x60
   b4ffe:	d108      	bne.n	b5012 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5000:	789a      	ldrb	r2, [r3, #2]
   b5002:	78d9      	ldrb	r1, [r3, #3]
   b5004:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5008:	b289      	uxth	r1, r1
   b500a:	4620      	mov	r0, r4
   b500c:	f7ff fedd 	bl	b4dca <_ZN4MQTT15publishCompleteEt>
   b5010:	e726      	b.n	b4e60 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5012:	2a70      	cmp	r2, #112	; 0x70
   b5014:	d0df      	beq.n	b4fd6 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5016:	2a90      	cmp	r2, #144	; 0x90
   b5018:	f43f af22 	beq.w	b4e60 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b501c:	2ac0      	cmp	r2, #192	; 0xc0
   b501e:	d10a      	bne.n	b5036 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5020:	22d0      	movs	r2, #208	; 0xd0
   b5022:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5024:	69e3      	ldr	r3, [r4, #28]
   b5026:	2200      	movs	r2, #0
   b5028:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b502a:	69e1      	ldr	r1, [r4, #28]
   b502c:	2202      	movs	r2, #2
   b502e:	4620      	mov	r0, r4
   b5030:	f001 fb23 	bl	b667a <_ZN9TCPClient5writeEPKhj>
   b5034:	e714      	b.n	b4e60 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5036:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5038:	bf04      	itt	eq
   b503a:	2300      	moveq	r3, #0
   b503c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5040:	e70e      	b.n	b4e60 <_ZN4MQTT4loopEv+0x4e>

000b5042 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5044:	4604      	mov	r4, r0
   b5046:	460f      	mov	r7, r1
   b5048:	4616      	mov	r6, r2
    if (isConnected()) {
   b504a:	f7ff fd0b 	bl	b4a64 <_ZN4MQTT11isConnectedEv>
   b504e:	4605      	mov	r5, r0
   b5050:	b310      	cbz	r0, b5098 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5052:	4621      	mov	r1, r4
   b5054:	a801      	add	r0, sp, #4
   b5056:	f7ff fbe5 	bl	b4824 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b505a:	8c23      	ldrh	r3, [r4, #32]
   b505c:	3301      	adds	r3, #1
   b505e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5060:	b1eb      	cbz	r3, b509e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5062:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5064:	8c23      	ldrh	r3, [r4, #32]
   b5066:	69e2      	ldr	r2, [r4, #28]
   b5068:	0a1b      	lsrs	r3, r3, #8
   b506a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b506c:	69e3      	ldr	r3, [r4, #28]
   b506e:	8c22      	ldrh	r2, [r4, #32]
   b5070:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5072:	69e2      	ldr	r2, [r4, #28]
   b5074:	2307      	movs	r3, #7
   b5076:	4639      	mov	r1, r7
   b5078:	4620      	mov	r0, r4
   b507a:	f7ff fcd7 	bl	b4a2c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b507e:	69e3      	ldr	r3, [r4, #28]
   b5080:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5082:	3804      	subs	r0, #4
   b5084:	b283      	uxth	r3, r0
   b5086:	69e2      	ldr	r2, [r4, #28]
   b5088:	2182      	movs	r1, #130	; 0x82
   b508a:	4620      	mov	r0, r4
   b508c:	f7ff fc92 	bl	b49b4 <_ZN4MQTT5writeEhPht>
   b5090:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5092:	a801      	add	r0, sp, #4
   b5094:	f7ff fbd1 	bl	b483a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5098:	4628      	mov	r0, r5
   b509a:	b003      	add	sp, #12
   b509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b509e:	2301      	movs	r3, #1
   b50a0:	e7df      	b.n	b5062 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b50a2 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b50a2:	2200      	movs	r2, #0
   b50a4:	f7ff bfcd 	b.w	b5042 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b50a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <netdb_freeaddrinfo+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	689b      	ldr	r3, [r3, #8]
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	00030268 	.word	0x00030268

000b50b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <netdb_getaddrinfo+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	68db      	ldr	r3, [r3, #12]
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	00030268 	.word	0x00030268

000b50c8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <HAL_Pin_Mode+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	689b      	ldr	r3, [r3, #8]
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	0003022c 	.word	0x0003022c

000b50d8 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <HAL_Interrupts_Attach+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	699b      	ldr	r3, [r3, #24]
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	0003022c 	.word	0x0003022c

000b50e8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <HAL_Interrupts_Detach+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	69db      	ldr	r3, [r3, #28]
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	0003022c 	.word	0x0003022c

000b50f8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b02      	ldr	r3, [pc, #8]	; (b5104 <if_index_to_name+0xc>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	695b      	ldr	r3, [r3, #20]
   b5100:	9301      	str	r3, [sp, #4]
   b5102:	bd08      	pop	{r3, pc}
   b5104:	0003026c 	.word	0x0003026c

000b5108 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <HAL_RNG_GetRandomNumber+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	685b      	ldr	r3, [r3, #4]
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	00030218 	.word	0x00030218

000b5118 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5118:	b508      	push	{r3, lr}
   b511a:	4b02      	ldr	r3, [pc, #8]	; (b5124 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b511c:	681b      	ldr	r3, [r3, #0]
   b511e:	695b      	ldr	r3, [r3, #20]
   b5120:	9301      	str	r3, [sp, #4]
   b5122:	bd08      	pop	{r3, pc}
   b5124:	00030218 	.word	0x00030218

000b5128 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <hal_rtc_time_is_valid+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	00030218 	.word	0x00030218

000b5138 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <hal_rtc_get_time+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	00030218 	.word	0x00030218

000b5148 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <os_mutex_create+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	00030248 	.word	0x00030248

000b5158 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <os_mutex_lock+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	00030248 	.word	0x00030248

000b5168 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <os_mutex_unlock+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	00030248 	.word	0x00030248

000b5178 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <os_mutex_recursive_create+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	00030248 	.word	0x00030248

000b5188 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <inet_inet_ntop+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	695b      	ldr	r3, [r3, #20]
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	00030264 	.word	0x00030264

000b5198 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <inet_htonl+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	6a1b      	ldr	r3, [r3, #32]
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	00030264 	.word	0x00030264

000b51a8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <inet_htons+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030264 	.word	0x00030264

000b51b8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <hal_usart_write+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	68db      	ldr	r3, [r3, #12]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	0003023c 	.word	0x0003023c

000b51c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <hal_usart_available+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	691b      	ldr	r3, [r3, #16]
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	0003023c 	.word	0x0003023c

000b51d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <hal_usart_read+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	695b      	ldr	r3, [r3, #20]
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	0003023c 	.word	0x0003023c

000b51e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <hal_usart_peek+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	699b      	ldr	r3, [r3, #24]
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	0003023c 	.word	0x0003023c

000b51f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <hal_usart_flush+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	69db      	ldr	r3, [r3, #28]
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	0003023c 	.word	0x0003023c

000b5208 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <hal_usart_is_enabled+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	6a1b      	ldr	r3, [r3, #32]
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	0003023c 	.word	0x0003023c

000b5218 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <hal_usart_available_data_for_write+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	0003023c 	.word	0x0003023c

000b5228 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <hal_usart_init_ex+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	0003023c 	.word	0x0003023c

000b5238 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <hal_i2c_write+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	6a1b      	ldr	r3, [r3, #32]
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	00030228 	.word	0x00030228

000b5248 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <hal_i2c_available+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	00030228 	.word	0x00030228

000b5258 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <hal_i2c_read+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	00030228 	.word	0x00030228

000b5268 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <hal_i2c_peek+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	00030228 	.word	0x00030228

000b5278 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <hal_i2c_flush+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	00030228 	.word	0x00030228

000b5288 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <hal_i2c_is_enabled+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	00030228 	.word	0x00030228

000b5298 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <hal_i2c_init+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	00030228 	.word	0x00030228

000b52a8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <sock_setsockopt+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	699b      	ldr	r3, [r3, #24]
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	00030238 	.word	0x00030238

000b52b8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <sock_close+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	69db      	ldr	r3, [r3, #28]
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	00030238 	.word	0x00030238

000b52c8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <sock_connect+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	6a1b      	ldr	r3, [r3, #32]
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	00030238 	.word	0x00030238

000b52d8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <sock_recv+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	00030238 	.word	0x00030238

000b52e8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <sock_send+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	00030238 	.word	0x00030238

000b52f8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <sock_socket+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	00030238 	.word	0x00030238

000b5308 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b02      	ldr	r3, [pc, #8]	; (b5314 <hal_spi_init+0xc>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	69db      	ldr	r3, [r3, #28]
   b5310:	9301      	str	r3, [sp, #4]
   b5312:	bd08      	pop	{r3, pc}
   b5314:	00030230 	.word	0x00030230

000b5318 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5318:	b508      	push	{r3, lr}
   b531a:	4b02      	ldr	r3, [pc, #8]	; (b5324 <hal_spi_is_enabled+0xc>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	6a1b      	ldr	r3, [r3, #32]
   b5320:	9301      	str	r3, [sp, #4]
   b5322:	bd08      	pop	{r3, pc}
   b5324:	00030230 	.word	0x00030230

000b5328 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5328:	b508      	push	{r3, lr}
   b532a:	4b02      	ldr	r3, [pc, #8]	; (b5334 <HAL_USB_USART_Init+0xc>)
   b532c:	681b      	ldr	r3, [r3, #0]
   b532e:	681b      	ldr	r3, [r3, #0]
   b5330:	9301      	str	r3, [sp, #4]
   b5332:	bd08      	pop	{r3, pc}
   b5334:	0003024c 	.word	0x0003024c

000b5338 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5338:	b508      	push	{r3, lr}
   b533a:	4b02      	ldr	r3, [pc, #8]	; (b5344 <HAL_USB_USART_Available_Data+0xc>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	691b      	ldr	r3, [r3, #16]
   b5340:	9301      	str	r3, [sp, #4]
   b5342:	bd08      	pop	{r3, pc}
   b5344:	0003024c 	.word	0x0003024c

000b5348 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5348:	b508      	push	{r3, lr}
   b534a:	4b02      	ldr	r3, [pc, #8]	; (b5354 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b534c:	681b      	ldr	r3, [r3, #0]
   b534e:	695b      	ldr	r3, [r3, #20]
   b5350:	9301      	str	r3, [sp, #4]
   b5352:	bd08      	pop	{r3, pc}
   b5354:	0003024c 	.word	0x0003024c

000b5358 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5358:	b508      	push	{r3, lr}
   b535a:	4b02      	ldr	r3, [pc, #8]	; (b5364 <HAL_USB_USART_Receive_Data+0xc>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	699b      	ldr	r3, [r3, #24]
   b5360:	9301      	str	r3, [sp, #4]
   b5362:	bd08      	pop	{r3, pc}
   b5364:	0003024c 	.word	0x0003024c

000b5368 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5368:	b508      	push	{r3, lr}
   b536a:	4b02      	ldr	r3, [pc, #8]	; (b5374 <HAL_USB_USART_Send_Data+0xc>)
   b536c:	681b      	ldr	r3, [r3, #0]
   b536e:	69db      	ldr	r3, [r3, #28]
   b5370:	9301      	str	r3, [sp, #4]
   b5372:	bd08      	pop	{r3, pc}
   b5374:	0003024c 	.word	0x0003024c

000b5378 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5378:	b508      	push	{r3, lr}
   b537a:	4b02      	ldr	r3, [pc, #8]	; (b5384 <HAL_USB_USART_Flush_Data+0xc>)
   b537c:	681b      	ldr	r3, [r3, #0]
   b537e:	6a1b      	ldr	r3, [r3, #32]
   b5380:	9301      	str	r3, [sp, #4]
   b5382:	bd08      	pop	{r3, pc}
   b5384:	0003024c 	.word	0x0003024c

000b5388 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5388:	b508      	push	{r3, lr}
   b538a:	4b02      	ldr	r3, [pc, #8]	; (b5394 <log_message+0xc>)
   b538c:	681b      	ldr	r3, [r3, #0]
   b538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5390:	9301      	str	r3, [sp, #4]
   b5392:	bd08      	pop	{r3, pc}
   b5394:	00030260 	.word	0x00030260

000b5398 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5398:	b508      	push	{r3, lr}
   b539a:	4b02      	ldr	r3, [pc, #8]	; (b53a4 <system_mode+0xc>)
   b539c:	681b      	ldr	r3, [r3, #0]
   b539e:	681b      	ldr	r3, [r3, #0]
   b53a0:	9301      	str	r3, [sp, #4]
   b53a2:	bd08      	pop	{r3, pc}
   b53a4:	00030220 	.word	0x00030220

000b53a8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b53a8:	b508      	push	{r3, lr}
   b53aa:	4b02      	ldr	r3, [pc, #8]	; (b53b4 <set_system_mode+0xc>)
   b53ac:	681b      	ldr	r3, [r3, #0]
   b53ae:	685b      	ldr	r3, [r3, #4]
   b53b0:	9301      	str	r3, [sp, #4]
   b53b2:	bd08      	pop	{r3, pc}
   b53b4:	00030220 	.word	0x00030220

000b53b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b53b8:	b508      	push	{r3, lr}
   b53ba:	4b02      	ldr	r3, [pc, #8]	; (b53c4 <system_delay_ms+0xc>)
   b53bc:	681b      	ldr	r3, [r3, #0]
   b53be:	695b      	ldr	r3, [r3, #20]
   b53c0:	9301      	str	r3, [sp, #4]
   b53c2:	bd08      	pop	{r3, pc}
   b53c4:	00030220 	.word	0x00030220

000b53c8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b53c8:	b508      	push	{r3, lr}
   b53ca:	4b02      	ldr	r3, [pc, #8]	; (b53d4 <application_thread_current+0xc>)
   b53cc:	681b      	ldr	r3, [r3, #0]
   b53ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b53d0:	9301      	str	r3, [sp, #4]
   b53d2:	bd08      	pop	{r3, pc}
   b53d4:	00030220 	.word	0x00030220

000b53d8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b53d8:	b508      	push	{r3, lr}
   b53da:	4b02      	ldr	r3, [pc, #8]	; (b53e4 <application_thread_invoke+0xc>)
   b53dc:	681b      	ldr	r3, [r3, #0]
   b53de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b53e0:	9301      	str	r3, [sp, #4]
   b53e2:	bd08      	pop	{r3, pc}
   b53e4:	00030220 	.word	0x00030220

000b53e8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b53e8:	b508      	push	{r3, lr}
   b53ea:	4b02      	ldr	r3, [pc, #8]	; (b53f4 <system_thread_get_state+0xc>)
   b53ec:	681b      	ldr	r3, [r3, #0]
   b53ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b53f0:	9301      	str	r3, [sp, #4]
   b53f2:	bd08      	pop	{r3, pc}
   b53f4:	00030220 	.word	0x00030220

000b53f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b53f8:	b508      	push	{r3, lr}
   b53fa:	4b03      	ldr	r3, [pc, #12]	; (b5408 <system_ctrl_set_app_request_handler+0x10>)
   b53fc:	681b      	ldr	r3, [r3, #0]
   b53fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5402:	9301      	str	r3, [sp, #4]
   b5404:	bd08      	pop	{r3, pc}
   b5406:	0000      	.short	0x0000
   b5408:	00030220 	.word	0x00030220

000b540c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b540c:	b508      	push	{r3, lr}
   b540e:	4b03      	ldr	r3, [pc, #12]	; (b541c <system_ctrl_set_result+0x10>)
   b5410:	681b      	ldr	r3, [r3, #0]
   b5412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5416:	9301      	str	r3, [sp, #4]
   b5418:	bd08      	pop	{r3, pc}
   b541a:	0000      	.short	0x0000
   b541c:	00030220 	.word	0x00030220

000b5420 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <network_connect+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	685b      	ldr	r3, [r3, #4]
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030240 	.word	0x00030240

000b5430 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <network_connecting+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	689b      	ldr	r3, [r3, #8]
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030240 	.word	0x00030240

000b5440 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <network_disconnect+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	68db      	ldr	r3, [r3, #12]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	00030240 	.word	0x00030240

000b5450 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <network_ready+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	691b      	ldr	r3, [r3, #16]
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	00030240 	.word	0x00030240

000b5460 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <network_on+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	695b      	ldr	r3, [r3, #20]
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	00030240 	.word	0x00030240

000b5470 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <network_off+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	699b      	ldr	r3, [r3, #24]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	00030240 	.word	0x00030240

000b5480 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <network_listen+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	69db      	ldr	r3, [r3, #28]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	00030240 	.word	0x00030240

000b5490 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <network_listening+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6a1b      	ldr	r3, [r3, #32]
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	00030240 	.word	0x00030240

000b54a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <network_set_listen_timeout+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	00030240 	.word	0x00030240

000b54b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <network_get_listen_timeout+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	00030240 	.word	0x00030240

000b54c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <network_is_on+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	00030240 	.word	0x00030240

000b54d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <network_is_off+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	00030240 	.word	0x00030240

000b54e0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <spark_variable+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	681b      	ldr	r3, [r3, #0]
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	00030244 	.word	0x00030244

000b54f0 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <spark_process+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	689b      	ldr	r3, [r3, #8]
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	00030244 	.word	0x00030244

000b5500 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <spark_cloud_flag_connected+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	695b      	ldr	r3, [r3, #20]
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	00030244 	.word	0x00030244

000b5510 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <spark_send_event+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	6a1b      	ldr	r3, [r3, #32]
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	00030244 	.word	0x00030244

000b5520 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <spark_subscribe+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	00030244 	.word	0x00030244

000b5530 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <spark_sync_time_pending+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	00030244 	.word	0x00030244

000b5540 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	00030244 	.word	0x00030244

000b5550 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <malloc+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	681b      	ldr	r3, [r3, #0]
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	0003021c 	.word	0x0003021c

000b5560 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <free+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	685b      	ldr	r3, [r3, #4]
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	0003021c 	.word	0x0003021c

000b5570 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <realloc+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	689b      	ldr	r3, [r3, #8]
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	0003021c 	.word	0x0003021c

000b5580 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <sprintf+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	68db      	ldr	r3, [r3, #12]
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	0003021c 	.word	0x0003021c

000b5590 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b5590:	b508      	push	{r3, lr}
   b5592:	4b02      	ldr	r3, [pc, #8]	; (b559c <sscanf+0xc>)
   b5594:	681b      	ldr	r3, [r3, #0]
   b5596:	695b      	ldr	r3, [r3, #20]
   b5598:	9301      	str	r3, [sp, #4]
   b559a:	bd08      	pop	{r3, pc}
   b559c:	0003021c 	.word	0x0003021c

000b55a0 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b55a0:	b508      	push	{r3, lr}
   b55a2:	4b02      	ldr	r3, [pc, #8]	; (b55ac <vsnprintf+0xc>)
   b55a4:	681b      	ldr	r3, [r3, #0]
   b55a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b55a8:	9301      	str	r3, [sp, #4]
   b55aa:	bd08      	pop	{r3, pc}
   b55ac:	0003021c 	.word	0x0003021c

000b55b0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b55b0:	b508      	push	{r3, lr}
   b55b2:	4b02      	ldr	r3, [pc, #8]	; (b55bc <abort+0xc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b55b8:	9301      	str	r3, [sp, #4]
   b55ba:	bd08      	pop	{r3, pc}
   b55bc:	0003021c 	.word	0x0003021c

000b55c0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b55c0:	b508      	push	{r3, lr}
   b55c2:	4b02      	ldr	r3, [pc, #8]	; (b55cc <_malloc_r+0xc>)
   b55c4:	681b      	ldr	r3, [r3, #0]
   b55c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b55c8:	9301      	str	r3, [sp, #4]
   b55ca:	bd08      	pop	{r3, pc}
   b55cc:	0003021c 	.word	0x0003021c

000b55d0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b02      	ldr	r3, [pc, #8]	; (b55dc <__errno+0xc>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b55d8:	9301      	str	r3, [sp, #4]
   b55da:	bd08      	pop	{r3, pc}
   b55dc:	0003021c 	.word	0x0003021c

000b55e0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b55e0:	b508      	push	{r3, lr}
   b55e2:	4b02      	ldr	r3, [pc, #8]	; (b55ec <__assert_func+0xc>)
   b55e4:	681b      	ldr	r3, [r3, #0]
   b55e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b55e8:	9301      	str	r3, [sp, #4]
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	0003021c 	.word	0x0003021c

000b55f0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <newlib_impure_ptr_callback+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	0003021c 	.word	0x0003021c

000b5600 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <localtime_r+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	0003021c 	.word	0x0003021c

000b5610 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5610:	2200      	movs	r2, #0
   b5612:	6840      	ldr	r0, [r0, #4]
   b5614:	4611      	mov	r1, r2
   b5616:	f7ff bf3b 	b.w	b5490 <network_listening>

000b561a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b561a:	2200      	movs	r2, #0
   b561c:	6840      	ldr	r0, [r0, #4]
   b561e:	4611      	mov	r1, r2
   b5620:	f7ff bf46 	b.w	b54b0 <network_get_listen_timeout>

000b5624 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5624:	6840      	ldr	r0, [r0, #4]
   b5626:	2200      	movs	r2, #0
   b5628:	f7ff bf3a 	b.w	b54a0 <network_set_listen_timeout>

000b562c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b562c:	6840      	ldr	r0, [r0, #4]
   b562e:	2200      	movs	r2, #0
   b5630:	f081 0101 	eor.w	r1, r1, #1
   b5634:	f7ff bf24 	b.w	b5480 <network_listen>

000b5638 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5638:	2300      	movs	r3, #0
   b563a:	6840      	ldr	r0, [r0, #4]
   b563c:	461a      	mov	r2, r3
   b563e:	4619      	mov	r1, r3
   b5640:	f7ff bf16 	b.w	b5470 <network_off>

000b5644 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5644:	2300      	movs	r3, #0
   b5646:	6840      	ldr	r0, [r0, #4]
   b5648:	461a      	mov	r2, r3
   b564a:	4619      	mov	r1, r3
   b564c:	f7ff bf08 	b.w	b5460 <network_on>

000b5650 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5650:	2200      	movs	r2, #0
   b5652:	6840      	ldr	r0, [r0, #4]
   b5654:	4611      	mov	r1, r2
   b5656:	f7ff befb 	b.w	b5450 <network_ready>

000b565a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b565a:	2200      	movs	r2, #0
   b565c:	6840      	ldr	r0, [r0, #4]
   b565e:	4611      	mov	r1, r2
   b5660:	f7ff bee6 	b.w	b5430 <network_connecting>

000b5664 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5664:	6840      	ldr	r0, [r0, #4]
   b5666:	2200      	movs	r2, #0
   b5668:	2102      	movs	r1, #2
   b566a:	f7ff bee9 	b.w	b5440 <network_disconnect>

000b566e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b566e:	2300      	movs	r3, #0
   b5670:	6840      	ldr	r0, [r0, #4]
   b5672:	461a      	mov	r2, r3
   b5674:	f7ff bed4 	b.w	b5420 <network_connect>

000b5678 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5678:	4b02      	ldr	r3, [pc, #8]	; (b5684 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b567a:	2203      	movs	r2, #3
   b567c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b567e:	4a02      	ldr	r2, [pc, #8]	; (b5688 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5680:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5682:	4770      	bx	lr
   b5684:	2003e680 	.word	0x2003e680
   b5688:	000b9e68 	.word	0x000b9e68

000b568c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b568c:	b510      	push	{r4, lr}
   b568e:	4604      	mov	r4, r0
   b5690:	4608      	mov	r0, r1
{
    _spi = spi;
   b5692:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5694:	f7ff fe38 	bl	b5308 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5698:	2300      	movs	r3, #0
   b569a:	6063      	str	r3, [r4, #4]
}
   b569c:	4620      	mov	r0, r4
   b569e:	bd10      	pop	{r4, pc}

000b56a0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b56a0:	4b05      	ldr	r3, [pc, #20]	; (b56b8 <_GLOBAL__sub_I_System+0x18>)
   b56a2:	2202      	movs	r2, #2
   b56a4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b56a6:	4b05      	ldr	r3, [pc, #20]	; (b56bc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b56a8:	4a05      	ldr	r2, [pc, #20]	; (b56c0 <_GLOBAL__sub_I_System+0x20>)
   b56aa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b56ac:	2000      	movs	r0, #0
   b56ae:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b56b2:	f7ff be79 	b.w	b53a8 <set_system_mode>
   b56b6:	bf00      	nop
   b56b8:	2003e694 	.word	0x2003e694
   b56bc:	2003e688 	.word	0x2003e688
   b56c0:	ffff0000 	.word	0xffff0000

000b56c4 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b56c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b56c8:	1e93      	subs	r3, r2, #2
{
   b56ca:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b56cc:	2b22      	cmp	r3, #34	; 0x22
   b56ce:	f04f 0300 	mov.w	r3, #0
{
   b56d2:	460d      	mov	r5, r1
   b56d4:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b56d6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b56da:	d927      	bls.n	b572c <ltoa+0x68>

      if (10 == base && N < 0L)
   b56dc:	2800      	cmp	r0, #0
   b56de:	da2a      	bge.n	b5736 <ltoa+0x72>
      {
            *head++ = '-';
   b56e0:	462e      	mov	r6, r5
   b56e2:	232d      	movs	r3, #45	; 0x2d
   b56e4:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b56e8:	4240      	negs	r0, r0
   b56ea:	240a      	movs	r4, #10
      *tail-- = '\0';
   b56ec:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b56f0:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b56f4:	4622      	mov	r2, r4
   b56f6:	4601      	mov	r1, r0
   b56f8:	a801      	add	r0, sp, #4
   b56fa:	f002 f9f0 	bl	b7ade <ldiv>
   b56fe:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b5700:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b5702:	2b09      	cmp	r3, #9
   b5704:	bfcc      	ite	gt
   b5706:	2237      	movgt	r2, #55	; 0x37
   b5708:	2230      	movle	r2, #48	; 0x30
   b570a:	fa52 f383 	uxtab	r3, r2, r3
   b570e:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b5712:	f108 0801 	add.w	r8, r8, #1
   b5716:	2800      	cmp	r0, #0
   b5718:	d1ec      	bne.n	b56f4 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b571a:	4642      	mov	r2, r8
   b571c:	1c79      	adds	r1, r7, #1
   b571e:	4630      	mov	r0, r6
   b5720:	f002 f9f1 	bl	b7b06 <memcpy>
      return str;
}
   b5724:	4628      	mov	r0, r5
   b5726:	b00c      	add	sp, #48	; 0x30
   b5728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b572c:	2a0a      	cmp	r2, #10
   b572e:	d0d5      	beq.n	b56dc <ltoa+0x18>
      if (uarg)
   b5730:	b118      	cbz	r0, b573a <ltoa+0x76>
   b5732:	462e      	mov	r6, r5
   b5734:	e7da      	b.n	b56ec <ltoa+0x28>
   b5736:	240a      	movs	r4, #10
   b5738:	e7fa      	b.n	b5730 <ltoa+0x6c>
      else  *tail-- = '0';
   b573a:	2330      	movs	r3, #48	; 0x30
   b573c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b5740:	462e      	mov	r6, r5
   b5742:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b5746:	f04f 0802 	mov.w	r8, #2
   b574a:	e7e6      	b.n	b571a <ltoa+0x56>

000b574c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b574c:	b510      	push	{r4, lr}
   b574e:	4604      	mov	r4, r0
{
	free(buffer);
   b5750:	6800      	ldr	r0, [r0, #0]
   b5752:	f7ff ff05 	bl	b5560 <free>
}
   b5756:	4620      	mov	r0, r4
   b5758:	bd10      	pop	{r4, pc}

000b575a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b575a:	b510      	push	{r4, lr}
   b575c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b575e:	6800      	ldr	r0, [r0, #0]
   b5760:	b108      	cbz	r0, b5766 <_ZN6String10invalidateEv+0xc>
   b5762:	f7ff fefd 	bl	b5560 <free>
	buffer = NULL;
   b5766:	2300      	movs	r3, #0
	capacity = len = 0;
   b5768:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b576c:	6023      	str	r3, [r4, #0]
}
   b576e:	bd10      	pop	{r4, pc}

000b5770 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5770:	b538      	push	{r3, r4, r5, lr}
   b5772:	4604      	mov	r4, r0
   b5774:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5776:	6800      	ldr	r0, [r0, #0]
   b5778:	3101      	adds	r1, #1
   b577a:	f7ff fef9 	bl	b5570 <realloc>
	if (newbuffer) {
   b577e:	b110      	cbz	r0, b5786 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5780:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5784:	2001      	movs	r0, #1
	}
	return 0;
}
   b5786:	bd38      	pop	{r3, r4, r5, pc}

000b5788 <_ZN6String7reserveEj>:
{
   b5788:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b578a:	6803      	ldr	r3, [r0, #0]
{
   b578c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b578e:	b123      	cbz	r3, b579a <_ZN6String7reserveEj+0x12>
   b5790:	6843      	ldr	r3, [r0, #4]
   b5792:	428b      	cmp	r3, r1
   b5794:	d301      	bcc.n	b579a <_ZN6String7reserveEj+0x12>
   b5796:	2001      	movs	r0, #1
}
   b5798:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b579a:	4620      	mov	r0, r4
   b579c:	f7ff ffe8 	bl	b5770 <_ZN6String12changeBufferEj>
   b57a0:	2800      	cmp	r0, #0
   b57a2:	d0f9      	beq.n	b5798 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b57a4:	68a3      	ldr	r3, [r4, #8]
   b57a6:	2b00      	cmp	r3, #0
   b57a8:	d1f5      	bne.n	b5796 <_ZN6String7reserveEj+0xe>
   b57aa:	6822      	ldr	r2, [r4, #0]
   b57ac:	7013      	strb	r3, [r2, #0]
   b57ae:	e7f2      	b.n	b5796 <_ZN6String7reserveEj+0xe>

000b57b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b57b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b57b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b57b4:	4611      	mov	r1, r2
   b57b6:	9201      	str	r2, [sp, #4]
{
   b57b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b57ba:	f7ff ffe5 	bl	b5788 <_ZN6String7reserveEj>
   b57be:	9a01      	ldr	r2, [sp, #4]
   b57c0:	b928      	cbnz	r0, b57ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b57c2:	4620      	mov	r0, r4
   b57c4:	f7ff ffc9 	bl	b575a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b57c8:	4620      	mov	r0, r4
   b57ca:	b003      	add	sp, #12
   b57cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b57ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b57d0:	4629      	mov	r1, r5
   b57d2:	6820      	ldr	r0, [r4, #0]
   b57d4:	f002 f997 	bl	b7b06 <memcpy>
	buffer[len] = 0;
   b57d8:	6822      	ldr	r2, [r4, #0]
   b57da:	68a3      	ldr	r3, [r4, #8]
   b57dc:	2100      	movs	r1, #0
   b57de:	54d1      	strb	r1, [r2, r3]
	return *this;
   b57e0:	e7f2      	b.n	b57c8 <_ZN6String4copyEPKcj+0x18>

000b57e2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b57e2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b57e4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b57e6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b57ea:	4604      	mov	r4, r0
	len = 0;
   b57ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   b57ee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b57f0:	b141      	cbz	r1, b5804 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b57f2:	4608      	mov	r0, r1
   b57f4:	9101      	str	r1, [sp, #4]
   b57f6:	f002 fa0a 	bl	b7c0e <strlen>
   b57fa:	9901      	ldr	r1, [sp, #4]
   b57fc:	4602      	mov	r2, r0
   b57fe:	4620      	mov	r0, r4
   b5800:	f7ff ffd6 	bl	b57b0 <_ZN6String4copyEPKcj>
}
   b5804:	4620      	mov	r0, r4
   b5806:	b002      	add	sp, #8
   b5808:	bd10      	pop	{r4, pc}

000b580a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b580a:	b513      	push	{r0, r1, r4, lr}
   b580c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b580e:	b159      	cbz	r1, b5828 <_ZN6StringaSEPKc+0x1e>
   b5810:	4608      	mov	r0, r1
   b5812:	9101      	str	r1, [sp, #4]
   b5814:	f002 f9fb 	bl	b7c0e <strlen>
   b5818:	9901      	ldr	r1, [sp, #4]
   b581a:	4602      	mov	r2, r0
   b581c:	4620      	mov	r0, r4
   b581e:	f7ff ffc7 	bl	b57b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5822:	4620      	mov	r0, r4
   b5824:	b002      	add	sp, #8
   b5826:	bd10      	pop	{r4, pc}
	else invalidate();
   b5828:	f7ff ff97 	bl	b575a <_ZN6String10invalidateEv>
   b582c:	e7f9      	b.n	b5822 <_ZN6StringaSEPKc+0x18>

000b582e <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b582e:	b510      	push	{r4, lr}
   b5830:	4604      	mov	r4, r0
   b5832:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5834:	2300      	movs	r3, #0
	capacity = 0;
   b5836:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b583a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b583c:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b583e:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b5840:	a901      	add	r1, sp, #4
   b5842:	f7ff ff3f 	bl	b56c4 <ltoa>
	*this = buf;
   b5846:	a901      	add	r1, sp, #4
   b5848:	4620      	mov	r0, r4
   b584a:	f7ff ffde 	bl	b580a <_ZN6StringaSEPKc>
}
   b584e:	4620      	mov	r0, r4
   b5850:	b00a      	add	sp, #40	; 0x28
   b5852:	bd10      	pop	{r4, pc}

000b5854 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5854:	b570      	push	{r4, r5, r6, lr}
   b5856:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5858:	460e      	mov	r6, r1
   b585a:	b909      	cbnz	r1, b5860 <_ZN6String6concatEPKcj+0xc>
   b585c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b585e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5860:	b16a      	cbz	r2, b587e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5862:	6884      	ldr	r4, [r0, #8]
   b5864:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5866:	4621      	mov	r1, r4
   b5868:	f7ff ff8e 	bl	b5788 <_ZN6String7reserveEj>
   b586c:	2800      	cmp	r0, #0
   b586e:	d0f5      	beq.n	b585c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5870:	6828      	ldr	r0, [r5, #0]
   b5872:	68ab      	ldr	r3, [r5, #8]
   b5874:	4631      	mov	r1, r6
   b5876:	4418      	add	r0, r3
   b5878:	f002 f9a3 	bl	b7bc2 <strcpy>
	len = newlen;
   b587c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b587e:	2001      	movs	r0, #1
   b5880:	e7ed      	b.n	b585e <_ZN6String6concatEPKcj+0xa>

000b5882 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b5882:	688a      	ldr	r2, [r1, #8]
   b5884:	6809      	ldr	r1, [r1, #0]
   b5886:	f7ff bfe5 	b.w	b5854 <_ZN6String6concatEPKcj>

000b588a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b588a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b588c:	688a      	ldr	r2, [r1, #8]
   b588e:	6809      	ldr	r1, [r1, #0]
{
   b5890:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5892:	f7ff ffdf 	bl	b5854 <_ZN6String6concatEPKcj>
   b5896:	b910      	cbnz	r0, b589e <_ZplRK15StringSumHelperRK6String+0x14>
   b5898:	4620      	mov	r0, r4
   b589a:	f7ff ff5e 	bl	b575a <_ZN6String10invalidateEv>
	return a;
}
   b589e:	4620      	mov	r0, r4
   b58a0:	bd10      	pop	{r4, pc}
	...

000b58a4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b58a4:	b40e      	push	{r1, r2, r3}
   b58a6:	b570      	push	{r4, r5, r6, lr}
   b58a8:	b087      	sub	sp, #28
   b58aa:	ad0b      	add	r5, sp, #44	; 0x2c
   b58ac:	4604      	mov	r4, r0
   b58ae:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b58b2:	9201      	str	r2, [sp, #4]
   b58b4:	462b      	mov	r3, r5
   b58b6:	2105      	movs	r1, #5
   b58b8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b58ba:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b58bc:	f7ff fe70 	bl	b55a0 <vsnprintf>
    va_end(marker);

    String result;
   b58c0:	490b      	ldr	r1, [pc, #44]	; (b58f0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b58c2:	4606      	mov	r6, r0
    String result;
   b58c4:	4620      	mov	r0, r4
   b58c6:	f7ff ff8c 	bl	b57e2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b58ca:	4631      	mov	r1, r6
   b58cc:	4620      	mov	r0, r4
   b58ce:	f7ff ff5b 	bl	b5788 <_ZN6String7reserveEj>
    if (result.buffer) {
   b58d2:	6820      	ldr	r0, [r4, #0]
   b58d4:	b130      	cbz	r0, b58e4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b58d6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b58d8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b58da:	462b      	mov	r3, r5
   b58dc:	1c71      	adds	r1, r6, #1
   b58de:	f7ff fe5f 	bl	b55a0 <vsnprintf>
        va_end(marker);
        result.len = n;
   b58e2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b58e4:	4620      	mov	r0, r4
   b58e6:	b007      	add	sp, #28
   b58e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b58ec:	b003      	add	sp, #12
   b58ee:	4770      	bx	lr
   b58f0:	000b9d1a 	.word	0x000b9d1a

000b58f4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b58f4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b58f6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b58f8:	4604      	mov	r4, r0
      if (_M_manager)
   b58fa:	b113      	cbz	r3, b5902 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b58fc:	2203      	movs	r2, #3
   b58fe:	4601      	mov	r1, r0
   b5900:	4798      	blx	r3
    }
   b5902:	4620      	mov	r0, r4
   b5904:	bd10      	pop	{r4, pc}

000b5906 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5906:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5908:	6843      	ldr	r3, [r0, #4]
   b590a:	3b01      	subs	r3, #1
    {
   b590c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b590e:	6043      	str	r3, [r0, #4]
   b5910:	b963      	cbnz	r3, b592c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5912:	6803      	ldr	r3, [r0, #0]
   b5914:	689b      	ldr	r3, [r3, #8]
   b5916:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5918:	68a3      	ldr	r3, [r4, #8]
   b591a:	3b01      	subs	r3, #1
   b591c:	60a3      	str	r3, [r4, #8]
   b591e:	b92b      	cbnz	r3, b592c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5920:	6823      	ldr	r3, [r4, #0]
   b5922:	4620      	mov	r0, r4
   b5924:	68db      	ldr	r3, [r3, #12]
    }
   b5926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b592a:	4718      	bx	r3
    }
   b592c:	bd10      	pop	{r4, pc}

000b592e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b592e:	b513      	push	{r0, r1, r4, lr}
   b5930:	460b      	mov	r3, r1
   b5932:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5934:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5938:	466c      	mov	r4, sp
   b593a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b593e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5942:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5946:	e894 0003 	ldmia.w	r4, {r0, r1}
   b594a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b594e:	b002      	add	sp, #8
   b5950:	bd10      	pop	{r4, pc}
	...

000b5954 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5954:	4802      	ldr	r0, [pc, #8]	; (b5960 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5956:	2300      	movs	r3, #0
   b5958:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b595a:	f7ff bc0d 	b.w	b5178 <os_mutex_recursive_create>
   b595e:	bf00      	nop
   b5960:	2003e698 	.word	0x2003e698

000b5964 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5966:	4606      	mov	r6, r0
   b5968:	460d      	mov	r5, r1
  size_t n = 0;
   b596a:	188f      	adds	r7, r1, r2
   b596c:	2400      	movs	r4, #0
  while (size--) {
   b596e:	42bd      	cmp	r5, r7
   b5970:	d00c      	beq.n	b598c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5972:	6833      	ldr	r3, [r6, #0]
   b5974:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5978:	689b      	ldr	r3, [r3, #8]
   b597a:	4630      	mov	r0, r6
   b597c:	4798      	blx	r3
     if (chunk>=0)
   b597e:	1e03      	subs	r3, r0, #0
   b5980:	db01      	blt.n	b5986 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5982:	441c      	add	r4, r3
  while (size--) {
   b5984:	e7f3      	b.n	b596e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5986:	2c00      	cmp	r4, #0
   b5988:	bf08      	it	eq
   b598a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b598c:	4620      	mov	r0, r4
   b598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5990 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5990:	b513      	push	{r0, r1, r4, lr}
   b5992:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5994:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5996:	b159      	cbz	r1, b59b0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5998:	9101      	str	r1, [sp, #4]
   b599a:	f002 f938 	bl	b7c0e <strlen>
   b599e:	6823      	ldr	r3, [r4, #0]
   b59a0:	9901      	ldr	r1, [sp, #4]
   b59a2:	68db      	ldr	r3, [r3, #12]
   b59a4:	4602      	mov	r2, r0
   b59a6:	4620      	mov	r0, r4
    }
   b59a8:	b002      	add	sp, #8
   b59aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b59ae:	4718      	bx	r3
    }
   b59b0:	b002      	add	sp, #8
   b59b2:	bd10      	pop	{r4, pc}

000b59b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b59b4:	6803      	ldr	r3, [r0, #0]
   b59b6:	689b      	ldr	r3, [r3, #8]
   b59b8:	4718      	bx	r3

000b59ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b59ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b59bc:	210d      	movs	r1, #13
{
   b59be:	4605      	mov	r5, r0
  size_t n = print('\r');
   b59c0:	f7ff fff8 	bl	b59b4 <_ZN5Print5printEc>
  n += print('\n');
   b59c4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b59c6:	4604      	mov	r4, r0
  n += print('\n');
   b59c8:	4628      	mov	r0, r5
   b59ca:	f7ff fff3 	bl	b59b4 <_ZN5Print5printEc>
  return n;
}
   b59ce:	4420      	add	r0, r4
   b59d0:	bd38      	pop	{r3, r4, r5, pc}

000b59d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b59d2:	b530      	push	{r4, r5, lr}
   b59d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b59d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b59d8:	2a01      	cmp	r2, #1
  *str = '\0';
   b59da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b59de:	bf98      	it	ls
   b59e0:	220a      	movls	r2, #10
   b59e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b59e4:	460d      	mov	r5, r1
   b59e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b59ea:	fb01 5312 	mls	r3, r1, r2, r5
   b59ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b59f2:	2b09      	cmp	r3, #9
   b59f4:	bf94      	ite	ls
   b59f6:	3330      	addls	r3, #48	; 0x30
   b59f8:	3337      	addhi	r3, #55	; 0x37
   b59fa:	b2db      	uxtb	r3, r3
  } while(n);
   b59fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b59fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5a02:	d9ef      	bls.n	b59e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5a04:	4621      	mov	r1, r4
   b5a06:	f7ff ffc3 	bl	b5990 <_ZN5Print5writeEPKc>
}
   b5a0a:	b00b      	add	sp, #44	; 0x2c
   b5a0c:	bd30      	pop	{r4, r5, pc}

000b5a0e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a12:	b086      	sub	sp, #24
   b5a14:	af00      	add	r7, sp, #0
   b5a16:	4605      	mov	r5, r0
   b5a18:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5a1a:	1d38      	adds	r0, r7, #4
   b5a1c:	2114      	movs	r1, #20
{
   b5a1e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5a20:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5a22:	f7ff fdbd 	bl	b55a0 <vsnprintf>

    if (n<bufsize)
   b5a26:	2813      	cmp	r0, #19
   b5a28:	d80e      	bhi.n	b5a48 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5a2a:	1d39      	adds	r1, r7, #4
   b5a2c:	4628      	mov	r0, r5
   b5a2e:	f7ff ffaf 	bl	b5990 <_ZN5Print5writeEPKc>
   b5a32:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5a34:	b11e      	cbz	r6, b5a3e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5a36:	4628      	mov	r0, r5
   b5a38:	f7ff ffbf 	bl	b59ba <_ZN5Print7printlnEv>
   b5a3c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5a3e:	4620      	mov	r0, r4
   b5a40:	3718      	adds	r7, #24
   b5a42:	46bd      	mov	sp, r7
   b5a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5a48:	f100 0308 	add.w	r3, r0, #8
   b5a4c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5a50:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5a52:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5a56:	4622      	mov	r2, r4
   b5a58:	1c41      	adds	r1, r0, #1
   b5a5a:	683b      	ldr	r3, [r7, #0]
   b5a5c:	4668      	mov	r0, sp
   b5a5e:	f7ff fd9f 	bl	b55a0 <vsnprintf>
  return write(str);
   b5a62:	4669      	mov	r1, sp
   b5a64:	4628      	mov	r0, r5
   b5a66:	f7ff ff93 	bl	b5990 <_ZN5Print5writeEPKc>
   b5a6a:	4604      	mov	r4, r0
   b5a6c:	46c5      	mov	sp, r8
   b5a6e:	e7e1      	b.n	b5a34 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5a70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5a70:	4b01      	ldr	r3, [pc, #4]	; (b5a78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5a72:	4a02      	ldr	r2, [pc, #8]	; (b5a7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5a74:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5a76:	4770      	bx	lr
   b5a78:	2003e69c 	.word	0x2003e69c
   b5a7c:	000b9ea4 	.word	0x000b9ea4

000b5a80 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b5a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b5a84:	4a15      	ldr	r2, [pc, #84]	; (b5adc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b5a86:	f8df 8060 	ldr.w	r8, [pc, #96]	; b5ae8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b5a8a:	e9d2 6300 	ldrd	r6, r3, [r2]
   b5a8e:	1980      	adds	r0, r0, r6
   b5a90:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b5a94:	4b12      	ldr	r3, [pc, #72]	; (b5ae0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b5a96:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b5a9a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b5a9e:	1986      	adds	r6, r0, r6
   b5aa0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b5aa4:	42bb      	cmp	r3, r7
   b5aa6:	bf08      	it	eq
   b5aa8:	42b2      	cmpeq	r2, r6
{
   b5aaa:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b5aac:	d013      	beq.n	b5ad6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b5aae:	a903      	add	r1, sp, #12
   b5ab0:	4668      	mov	r0, sp
   b5ab2:	e9cd 6700 	strd	r6, r7, [sp]
   b5ab6:	f7ff fda3 	bl	b5600 <localtime_r>
	calendar_time.tm_year += 1900;
   b5aba:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5abc:	4d09      	ldr	r5, [pc, #36]	; (b5ae4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b5abe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5ac2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b5ac4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b5ace:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b5ad2:	6823      	ldr	r3, [r4, #0]
   b5ad4:	602b      	str	r3, [r5, #0]
    }
}
   b5ad6:	b00c      	add	sp, #48	; 0x30
   b5ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5adc:	2003e6d0 	.word	0x2003e6d0
   b5ae0:	2003e6c8 	.word	0x2003e6c8
   b5ae4:	2003e6a4 	.word	0x2003e6a4
   b5ae8:	2003e6d8 	.word	0x2003e6d8

000b5aec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b5aec:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5aee:	2000      	movs	r0, #0
   b5af0:	f7ff fd1e 	bl	b5530 <spark_sync_time_pending>
   b5af4:	b128      	cbz	r0, b5b02 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5af6:	f7ff fd03 	bl	b5500 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5afa:	f080 0001 	eor.w	r0, r0, #1
   b5afe:	b2c0      	uxtb	r0, r0
    }
   b5b00:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5b02:	2001      	movs	r0, #1
   b5b04:	e7fc      	b.n	b5b00 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5b08 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b5b08:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b5b0a:	f7ff ffb9 	bl	b5a80 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b5b0e:	4b02      	ldr	r3, [pc, #8]	; (b5b18 <_ZN9TimeClass5monthEx+0x10>)
   b5b10:	6918      	ldr	r0, [r3, #16]
}
   b5b12:	3001      	adds	r0, #1
   b5b14:	bd08      	pop	{r3, pc}
   b5b16:	bf00      	nop
   b5b18:	2003e6a4 	.word	0x2003e6a4

000b5b1c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5b1c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5b1e:	2000      	movs	r0, #0
   b5b20:	f7ff fb02 	bl	b5128 <hal_rtc_time_is_valid>
    if (rtcstate)
   b5b24:	4604      	mov	r4, r0
   b5b26:	b9a0      	cbnz	r0, b5b52 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5b28:	f7ff fc36 	bl	b5398 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5b2c:	2801      	cmp	r0, #1
   b5b2e:	d110      	bne.n	b5b52 <_ZN9TimeClass7isValidEv+0x36>
   b5b30:	4620      	mov	r0, r4
   b5b32:	f7ff fc59 	bl	b53e8 <system_thread_get_state>
   b5b36:	b960      	cbnz	r0, b5b52 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5b38:	f7ff ffd8 	bl	b5aec <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5b3c:	b910      	cbnz	r0, b5b44 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5b3e:	f7ff fcd7 	bl	b54f0 <spark_process>
        while (_while() && !_condition()) {
   b5b42:	e7f9      	b.n	b5b38 <_ZN9TimeClass7isValidEv+0x1c>
   b5b44:	f7ff ffd2 	bl	b5aec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5b4c:	2000      	movs	r0, #0
   b5b4e:	f7ff baeb 	b.w	b5128 <hal_rtc_time_is_valid>
}
   b5b52:	4620      	mov	r0, r4
   b5b54:	bd10      	pop	{r4, pc}

000b5b56 <_ZN9TimeClass3nowEv>:
{
   b5b56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5b58:	f7ff ffe0 	bl	b5b1c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5b5c:	2210      	movs	r2, #16
   b5b5e:	2100      	movs	r1, #0
   b5b60:	4668      	mov	r0, sp
   b5b62:	f001 ffde 	bl	b7b22 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5b66:	2100      	movs	r1, #0
   b5b68:	4668      	mov	r0, sp
   b5b6a:	f7ff fae5 	bl	b5138 <hal_rtc_get_time>
}
   b5b6e:	9800      	ldr	r0, [sp, #0]
   b5b70:	b005      	add	sp, #20
   b5b72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5b78 <_ZN9TimeClass4hourEv>:
{
   b5b78:	b508      	push	{r3, lr}
	return hour(now());
   b5b7a:	f7ff ffec 	bl	b5b56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5b7e:	17c1      	asrs	r1, r0, #31
   b5b80:	f7ff ff7e 	bl	b5a80 <_ZL22Refresh_UnixTime_Cachex>
}
   b5b84:	4b01      	ldr	r3, [pc, #4]	; (b5b8c <_ZN9TimeClass4hourEv+0x14>)
   b5b86:	6898      	ldr	r0, [r3, #8]
   b5b88:	bd08      	pop	{r3, pc}
   b5b8a:	bf00      	nop
   b5b8c:	2003e6a4 	.word	0x2003e6a4

000b5b90 <_ZN9TimeClass6minuteEv>:
{
   b5b90:	b508      	push	{r3, lr}
	return minute(now());
   b5b92:	f7ff ffe0 	bl	b5b56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5b96:	17c1      	asrs	r1, r0, #31
   b5b98:	f7ff ff72 	bl	b5a80 <_ZL22Refresh_UnixTime_Cachex>
}
   b5b9c:	4b01      	ldr	r3, [pc, #4]	; (b5ba4 <_ZN9TimeClass6minuteEv+0x14>)
   b5b9e:	6858      	ldr	r0, [r3, #4]
   b5ba0:	bd08      	pop	{r3, pc}
   b5ba2:	bf00      	nop
   b5ba4:	2003e6a4 	.word	0x2003e6a4

000b5ba8 <_ZN9TimeClass3dayEv>:
{
   b5ba8:	b508      	push	{r3, lr}
	return day(now());
   b5baa:	f7ff ffd4 	bl	b5b56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5bae:	17c1      	asrs	r1, r0, #31
   b5bb0:	f7ff ff66 	bl	b5a80 <_ZL22Refresh_UnixTime_Cachex>
}
   b5bb4:	4b01      	ldr	r3, [pc, #4]	; (b5bbc <_ZN9TimeClass3dayEv+0x14>)
   b5bb6:	68d8      	ldr	r0, [r3, #12]
   b5bb8:	bd08      	pop	{r3, pc}
   b5bba:	bf00      	nop
   b5bbc:	2003e6a4 	.word	0x2003e6a4

000b5bc0 <_ZN9TimeClass5monthEv>:
{
   b5bc0:	b508      	push	{r3, lr}
	return month(now());
   b5bc2:	f7ff ffc8 	bl	b5b56 <_ZN9TimeClass3nowEv>
}
   b5bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b5bca:	17c1      	asrs	r1, r0, #31
   b5bcc:	f7ff bf9c 	b.w	b5b08 <_ZN9TimeClass5monthEx>

000b5bd0 <_ZN9TimeClass4yearEv>:
{
   b5bd0:	b508      	push	{r3, lr}
	return year(now());
   b5bd2:	f7ff ffc0 	bl	b5b56 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5bd6:	17c1      	asrs	r1, r0, #31
   b5bd8:	f7ff ff52 	bl	b5a80 <_ZL22Refresh_UnixTime_Cachex>
}
   b5bdc:	4b01      	ldr	r3, [pc, #4]	; (b5be4 <_ZN9TimeClass4yearEv+0x14>)
   b5bde:	6958      	ldr	r0, [r3, #20]
   b5be0:	bd08      	pop	{r3, pc}
   b5be2:	bf00      	nop
   b5be4:	2003e6a4 	.word	0x2003e6a4

000b5be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5be8:	4b02      	ldr	r3, [pc, #8]	; (b5bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5bea:	681a      	ldr	r2, [r3, #0]
   b5bec:	4b02      	ldr	r3, [pc, #8]	; (b5bf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5bee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5bf0:	4770      	bx	lr
   b5bf2:	bf00      	nop
   b5bf4:	2003ccf4 	.word	0x2003ccf4
   b5bf8:	2003e6a0 	.word	0x2003e6a0

000b5bfc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5bfc:	2100      	movs	r1, #0
   b5bfe:	f7ff bbdb 	b.w	b53b8 <system_delay_ms>
	...

000b5c04 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5c04:	b510      	push	{r4, lr}
   b5c06:	4b04      	ldr	r3, [pc, #16]	; (b5c18 <_ZN9TCPClientD1Ev+0x14>)
   b5c08:	6003      	str	r3, [r0, #0]
   b5c0a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5c0c:	6980      	ldr	r0, [r0, #24]
   b5c0e:	b108      	cbz	r0, b5c14 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5c10:	f7ff fe79 	bl	b5906 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b5c14:	4620      	mov	r0, r4
   b5c16:	bd10      	pop	{r4, pc}
   b5c18:	000b9fb8 	.word	0x000b9fb8

000b5c1c <_ZN9TCPClientD0Ev>:
   b5c1c:	b510      	push	{r4, lr}
   b5c1e:	4604      	mov	r4, r0
   b5c20:	f7ff fff0 	bl	b5c04 <_ZN9TCPClientD1Ev>
   b5c24:	4620      	mov	r0, r4
   b5c26:	211c      	movs	r1, #28
   b5c28:	f7fe fa3b 	bl	b40a2 <_ZdlPvj>
   b5c2c:	4620      	mov	r0, r4
   b5c2e:	bd10      	pop	{r4, pc}

000b5c30 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5c30:	4b01      	ldr	r3, [pc, #4]	; (b5c38 <_GLOBAL__sub_I_RGB+0x8>)
   b5c32:	2200      	movs	r2, #0
   b5c34:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5c36:	4770      	bx	lr
   b5c38:	2003e6e0 	.word	0x2003e6e0

000b5c3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5c3c:	4b01      	ldr	r3, [pc, #4]	; (b5c44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5c3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5c40:	4770      	bx	lr
   b5c42:	bf00      	nop
   b5c44:	2003ccf8 	.word	0x2003ccf8

000b5c48 <serialEventRun>:
{
   b5c48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5c4a:	4b0b      	ldr	r3, [pc, #44]	; (b5c78 <serialEventRun+0x30>)
   b5c4c:	b143      	cbz	r3, b5c60 <serialEventRun+0x18>
   b5c4e:	f000 fc11 	bl	b6474 <_Z16_fetch_usbserialv>
   b5c52:	6803      	ldr	r3, [r0, #0]
   b5c54:	691b      	ldr	r3, [r3, #16]
   b5c56:	4798      	blx	r3
   b5c58:	2800      	cmp	r0, #0
   b5c5a:	dd01      	ble.n	b5c60 <serialEventRun+0x18>
        serialEvent();
   b5c5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5c60:	4b06      	ldr	r3, [pc, #24]	; (b5c7c <serialEventRun+0x34>)
   b5c62:	b143      	cbz	r3, b5c76 <serialEventRun+0x2e>
   b5c64:	f001 f922 	bl	b6eac <_Z22__fetch_global_Serial1v>
   b5c68:	6803      	ldr	r3, [r0, #0]
   b5c6a:	691b      	ldr	r3, [r3, #16]
   b5c6c:	4798      	blx	r3
   b5c6e:	2800      	cmp	r0, #0
   b5c70:	dd01      	ble.n	b5c76 <serialEventRun+0x2e>
        serialEvent1();
   b5c72:	f3af 8000 	nop.w
}
   b5c76:	bd08      	pop	{r3, pc}
	...

000b5c80 <_post_loop>:
{
   b5c80:	b508      	push	{r3, lr}
	serialEventRun();
   b5c82:	f7ff ffe1 	bl	b5c48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5c86:	f7ff fa47 	bl	b5118 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5c8a:	4b01      	ldr	r3, [pc, #4]	; (b5c90 <_post_loop+0x10>)
   b5c8c:	6018      	str	r0, [r3, #0]
}
   b5c8e:	bd08      	pop	{r3, pc}
   b5c90:	2003e744 	.word	0x2003e744

000b5c94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5c94:	4805      	ldr	r0, [pc, #20]	; (b5cac <_Z33system_initialize_user_backup_ramv+0x18>)
   b5c96:	4a06      	ldr	r2, [pc, #24]	; (b5cb0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5c98:	4906      	ldr	r1, [pc, #24]	; (b5cb4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5c9a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5c9c:	1a12      	subs	r2, r2, r0
   b5c9e:	f001 ff32 	bl	b7b06 <memcpy>
    __backup_sram_signature = signature;
   b5ca2:	4b05      	ldr	r3, [pc, #20]	; (b5cb8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5ca4:	4a05      	ldr	r2, [pc, #20]	; (b5cbc <_Z33system_initialize_user_backup_ramv+0x28>)
   b5ca6:	601a      	str	r2, [r3, #0]
}
   b5ca8:	bd08      	pop	{r3, pc}
   b5caa:	bf00      	nop
   b5cac:	2003f400 	.word	0x2003f400
   b5cb0:	2003f404 	.word	0x2003f404
   b5cb4:	000ba654 	.word	0x000ba654
   b5cb8:	2003f400 	.word	0x2003f400
   b5cbc:	9a271c1e 	.word	0x9a271c1e

000b5cc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5cc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5cc2:	2300      	movs	r3, #0
   b5cc4:	9300      	str	r3, [sp, #0]
   b5cc6:	461a      	mov	r2, r3
   b5cc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5ccc:	f7ff fb9e 	bl	b540c <system_ctrl_set_result>
}
   b5cd0:	b003      	add	sp, #12
   b5cd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5cd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5cd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5cda:	8843      	ldrh	r3, [r0, #2]
   b5cdc:	2b0a      	cmp	r3, #10
   b5cde:	d008      	beq.n	b5cf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5ce0:	2b50      	cmp	r3, #80	; 0x50
   b5ce2:	d10b      	bne.n	b5cfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5ce4:	4b09      	ldr	r3, [pc, #36]	; (b5d0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5ce6:	681b      	ldr	r3, [r3, #0]
   b5ce8:	b14b      	cbz	r3, b5cfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5cea:	b003      	add	sp, #12
   b5cec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5cf0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5cf2:	f7ff ffe5 	bl	b5cc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5cf6:	b003      	add	sp, #12
   b5cf8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5cfc:	2300      	movs	r3, #0
   b5cfe:	9300      	str	r3, [sp, #0]
   b5d00:	461a      	mov	r2, r3
   b5d02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5d06:	f7ff fb81 	bl	b540c <system_ctrl_set_result>
}
   b5d0a:	e7f4      	b.n	b5cf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5d0c:	2003e6f4 	.word	0x2003e6f4

000b5d10 <module_user_init_hook>:
{
   b5d10:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5d12:	4812      	ldr	r0, [pc, #72]	; (b5d5c <module_user_init_hook+0x4c>)
   b5d14:	2100      	movs	r1, #0
   b5d16:	f7ff fc6b 	bl	b55f0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5d1a:	4b11      	ldr	r3, [pc, #68]	; (b5d60 <module_user_init_hook+0x50>)
   b5d1c:	681a      	ldr	r2, [r3, #0]
   b5d1e:	4b11      	ldr	r3, [pc, #68]	; (b5d64 <module_user_init_hook+0x54>)
   b5d20:	429a      	cmp	r2, r3
   b5d22:	4b11      	ldr	r3, [pc, #68]	; (b5d68 <module_user_init_hook+0x58>)
   b5d24:	bf0c      	ite	eq
   b5d26:	2201      	moveq	r2, #1
   b5d28:	2200      	movne	r2, #0
   b5d2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5d2c:	d001      	beq.n	b5d32 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5d2e:	f7ff ffb1 	bl	b5c94 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5d32:	f7ff f9e9 	bl	b5108 <HAL_RNG_GetRandomNumber>
   b5d36:	4604      	mov	r4, r0
    srand(seed);
   b5d38:	f001 fefc 	bl	b7b34 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5d3c:	4b0b      	ldr	r3, [pc, #44]	; (b5d6c <module_user_init_hook+0x5c>)
   b5d3e:	b113      	cbz	r3, b5d46 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5d40:	4620      	mov	r0, r4
   b5d42:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5d46:	2100      	movs	r1, #0
   b5d48:	4808      	ldr	r0, [pc, #32]	; (b5d6c <module_user_init_hook+0x5c>)
   b5d4a:	f7ff fbf9 	bl	b5540 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5d52:	4807      	ldr	r0, [pc, #28]	; (b5d70 <module_user_init_hook+0x60>)
   b5d54:	2100      	movs	r1, #0
   b5d56:	f7ff bb4f 	b.w	b53f8 <system_ctrl_set_app_request_handler>
   b5d5a:	bf00      	nop
   b5d5c:	000b5c3d 	.word	0x000b5c3d
   b5d60:	2003f400 	.word	0x2003f400
   b5d64:	9a271c1e 	.word	0x9a271c1e
   b5d68:	2003e6f0 	.word	0x2003e6f0
   b5d6c:	00000000 	.word	0x00000000
   b5d70:	000b5cd9 	.word	0x000b5cd9

000b5d74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5d74:	4770      	bx	lr

000b5d76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5d76:	2000      	movs	r0, #0
   b5d78:	4770      	bx	lr

000b5d7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5d7a:	b510      	push	{r4, lr}
   b5d7c:	2110      	movs	r1, #16
   b5d7e:	4604      	mov	r4, r0
   b5d80:	f7fe f98f 	bl	b40a2 <_ZdlPvj>
   b5d84:	4620      	mov	r0, r4
   b5d86:	bd10      	pop	{r4, pc}

000b5d88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5d88:	b508      	push	{r3, lr}
      { delete this; }
   b5d8a:	f7ff fff6 	bl	b5d7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5d8e:	bd08      	pop	{r3, pc}

000b5d90 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5d90:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5d92:	2200      	movs	r2, #0
   b5d94:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5d98:	6002      	str	r2, [r0, #0]
   b5d9a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5d9c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d9e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5da0:	680c      	ldr	r4, [r1, #0]
   b5da2:	8085      	strh	r5, [r0, #4]
   b5da4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5da6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5da8:	bd30      	pop	{r4, r5, pc}

000b5daa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5daa:	b510      	push	{r4, lr}
   b5dac:	4604      	mov	r4, r0
    free((void*)msg_);
   b5dae:	6800      	ldr	r0, [r0, #0]
   b5db0:	f7ff fbd6 	bl	b5560 <free>
}
   b5db4:	4620      	mov	r0, r4
   b5db6:	bd10      	pop	{r4, pc}

000b5db8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5db8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5dba:	68c4      	ldr	r4, [r0, #12]
   b5dbc:	b1f4      	cbz	r4, b5dfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5dbe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5dc0:	2b02      	cmp	r3, #2
   b5dc2:	d103      	bne.n	b5dcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5dc4:	f104 000c 	add.w	r0, r4, #12
   b5dc8:	f7ff ffef 	bl	b5daa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5dcc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5dce:	b135      	cbz	r5, b5dde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5dd0:	4628      	mov	r0, r5
   b5dd2:	f7ff fd8f 	bl	b58f4 <_ZNSt14_Function_baseD1Ev>
   b5dd6:	2110      	movs	r1, #16
   b5dd8:	4628      	mov	r0, r5
   b5dda:	f7fe f962 	bl	b40a2 <_ZdlPvj>
   b5dde:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5de0:	b135      	cbz	r5, b5df0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5de2:	4628      	mov	r0, r5
   b5de4:	f7ff fd86 	bl	b58f4 <_ZNSt14_Function_baseD1Ev>
   b5de8:	2110      	movs	r1, #16
   b5dea:	4628      	mov	r0, r5
   b5dec:	f7fe f959 	bl	b40a2 <_ZdlPvj>
   b5df0:	4620      	mov	r0, r4
   b5df2:	2114      	movs	r1, #20
   b5df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5df8:	f7fe b953 	b.w	b40a2 <_ZdlPvj>
   b5dfc:	bd38      	pop	{r3, r4, r5, pc}

000b5dfe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5dfe:	680b      	ldr	r3, [r1, #0]
   b5e00:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5e02:	684b      	ldr	r3, [r1, #4]
   b5e04:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5e06:	b113      	cbz	r3, b5e0e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5e08:	685a      	ldr	r2, [r3, #4]
   b5e0a:	3201      	adds	r2, #1
   b5e0c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5e0e:	4770      	bx	lr

000b5e10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5e12:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5e14:	4668      	mov	r0, sp
   b5e16:	460d      	mov	r5, r1
   b5e18:	f7ff fff1 	bl	b5dfe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5e1c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5e1e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5e20:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5e22:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5e24:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5e26:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5e28:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5e2a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5e2c:	f7fe fb3a 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5e30:	b135      	cbz	r5, b5e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5e32:	1d28      	adds	r0, r5, #4
   b5e34:	f7fe fb36 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5e38:	2108      	movs	r1, #8
   b5e3a:	4628      	mov	r0, r5
   b5e3c:	f7fe f931 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b5e40:	4620      	mov	r0, r4
   b5e42:	b003      	add	sp, #12
   b5e44:	bd30      	pop	{r4, r5, pc}

000b5e46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5e46:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5e48:	b510      	push	{r4, lr}
      if (_M_empty())
   b5e4a:	b90a      	cbnz	r2, b5e50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5e4c:	f001 f890 	bl	b6f70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5e54:	68c3      	ldr	r3, [r0, #12]
   b5e56:	4718      	bx	r3

000b5e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5e58:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5e5a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5e5c:	f100 0110 	add.w	r1, r0, #16
   b5e60:	f7ff fff1 	bl	b5e46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5e64:	bd08      	pop	{r3, pc}

000b5e66 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5e66:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5e68:	b510      	push	{r4, lr}
      if (_M_empty())
   b5e6a:	b90a      	cbnz	r2, b5e70 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5e6c:	f001 f880 	bl	b6f70 <_ZSt25__throw_bad_function_callv>
    }
   b5e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5e74:	68c3      	ldr	r3, [r0, #12]
   b5e76:	4718      	bx	r3

000b5e78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5e78:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5e7a:	6800      	ldr	r0, [r0, #0]
   b5e7c:	f100 0110 	add.w	r1, r0, #16
   b5e80:	f7ff fff1 	bl	b5e66 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5e84:	bd08      	pop	{r3, pc}
	...

000b5e88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5e88:	b538      	push	{r3, r4, r5, lr}
   b5e8a:	2300      	movs	r3, #0
   b5e8c:	4604      	mov	r4, r0
   b5e8e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5e90:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5e92:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5e94:	f7fe f8ff 	bl	b4096 <_Znwj>
   b5e98:	b128      	cbz	r0, b5ea6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5e9a:	2301      	movs	r3, #1
   b5e9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5ea0:	4b02      	ldr	r3, [pc, #8]	; (b5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5ea2:	6003      	str	r3, [r0, #0]
   b5ea4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5ea6:	6020      	str	r0, [r4, #0]
	}
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	bd38      	pop	{r3, r4, r5, pc}
   b5eac:	000b9ecc 	.word	0x000b9ecc

000b5eb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5eb0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5eb2:	2300      	movs	r3, #0
   b5eb4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5eb6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5eb8:	4604      	mov	r4, r0
   b5eba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5ebc:	b12b      	cbz	r3, b5eca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5ebe:	2202      	movs	r2, #2
   b5ec0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5ec2:	68eb      	ldr	r3, [r5, #12]
   b5ec4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5ec6:	68ab      	ldr	r3, [r5, #8]
   b5ec8:	60a3      	str	r3, [r4, #8]
    }
   b5eca:	4620      	mov	r0, r4
   b5ecc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ed2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5ed4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5ed6:	4668      	mov	r0, sp
   b5ed8:	f7ff ff5a 	bl	b5d90 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5edc:	f04f 0302 	mov.w	r3, #2
   b5ee0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5ee4:	2a00      	cmp	r2, #0
   b5ee6:	d103      	bne.n	b5ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5ee8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5eec:	2900      	cmp	r1, #0
   b5eee:	d1f7      	bne.n	b5ee0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5ef0:	d125      	bne.n	b5f3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5ef2:	f104 050c 	add.w	r5, r4, #12
   b5ef6:	4669      	mov	r1, sp
   b5ef8:	4628      	mov	r0, r5
   b5efa:	f7ff ff49 	bl	b5d90 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5efe:	f3bf 8f5b 	dmb	ish
   b5f02:	2301      	movs	r3, #1
   b5f04:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5f06:	2000      	movs	r0, #0
   b5f08:	f104 0308 	add.w	r3, r4, #8
   b5f0c:	f3bf 8f5b 	dmb	ish
   b5f10:	e853 6f00 	ldrex	r6, [r3]
   b5f14:	e843 0200 	strex	r2, r0, [r3]
   b5f18:	2a00      	cmp	r2, #0
   b5f1a:	d1f9      	bne.n	b5f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5f1c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5f20:	b16e      	cbz	r6, b5f3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5f22:	f7ff fa51 	bl	b53c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5f26:	b178      	cbz	r0, b5f48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5f28:	4629      	mov	r1, r5
   b5f2a:	4630      	mov	r0, r6
   b5f2c:	f7ff ff8b 	bl	b5e46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5f30:	4630      	mov	r0, r6
   b5f32:	f7ff fcdf 	bl	b58f4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5f36:	2110      	movs	r1, #16
   b5f38:	4630      	mov	r0, r6
   b5f3a:	f7fe f8b2 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b5f3e:	4668      	mov	r0, sp
   b5f40:	f7ff ff33 	bl	b5daa <_ZN8particle5ErrorD1Ev>
    }
   b5f44:	b009      	add	sp, #36	; 0x24
   b5f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5f48:	4631      	mov	r1, r6
   b5f4a:	a802      	add	r0, sp, #8
   b5f4c:	f7ff ffb0 	bl	b5eb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5f50:	68e0      	ldr	r0, [r4, #12]
   b5f52:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5f56:	b108      	cbz	r0, b5f5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5f58:	f001 fe3c 	bl	b7bd4 <strdup>
        type_(type) {
   b5f5c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5f5e:	2010      	movs	r0, #16
   b5f60:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5f64:	f7fe f897 	bl	b4096 <_Znwj>
   b5f68:	4605      	mov	r5, r0
   b5f6a:	b1e8      	cbz	r0, b5fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5f6c:	2700      	movs	r7, #0
   b5f6e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5f70:	2018      	movs	r0, #24
   b5f72:	f7fe f890 	bl	b4096 <_Znwj>
   b5f76:	4604      	mov	r4, r0
   b5f78:	b188      	cbz	r0, b5f9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5f7a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5f7c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5f7e:	a802      	add	r0, sp, #8
   b5f80:	f7ff fcd5 	bl	b592e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f84:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5f86:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f88:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f8a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5f8c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5f8e:	a906      	add	r1, sp, #24
   b5f90:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f92:	60e3      	str	r3, [r4, #12]
   b5f94:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5f98:	9205      	str	r2, [sp, #20]
   b5f9a:	f7ff fef9 	bl	b5d90 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5f9e:	4b08      	ldr	r3, [pc, #32]	; (b5fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5fa0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5fa2:	4b08      	ldr	r3, [pc, #32]	; (b5fc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5fa4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5fa6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5fa8:	a806      	add	r0, sp, #24
   b5faa:	f7ff fefe 	bl	b5daa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5fae:	a802      	add	r0, sp, #8
   b5fb0:	f7ff fca0 	bl	b58f4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5fb4:	2200      	movs	r2, #0
   b5fb6:	4629      	mov	r1, r5
   b5fb8:	4803      	ldr	r0, [pc, #12]	; (b5fc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5fba:	f7ff fa0d 	bl	b53d8 <application_thread_invoke>
   b5fbe:	e7b7      	b.n	b5f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5fc0:	000b5e59 	.word	0x000b5e59
   b5fc4:	000b60dd 	.word	0x000b60dd
   b5fc8:	000b65bd 	.word	0x000b65bd

000b5fcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fd0:	b08b      	sub	sp, #44	; 0x2c
   b5fd2:	4605      	mov	r5, r0
   b5fd4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5fd8:	460f      	mov	r7, r1
   b5fda:	4690      	mov	r8, r2
   b5fdc:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5fde:	f7ff fa8f 	bl	b5500 <spark_cloud_flag_connected>
   b5fe2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5fe4:	4683      	mov	fp, r0
   b5fe6:	bb38      	cbnz	r0, b6038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5fe8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5fec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5fee:	a905      	add	r1, sp, #20
   b5ff0:	4630      	mov	r0, r6
   b5ff2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5ff6:	f7ff fecb 	bl	b5d90 <_ZN8particle5ErrorC1EOS0_>
   b5ffa:	2014      	movs	r0, #20
   b5ffc:	f7fe f84b 	bl	b4096 <_Znwj>
   b6000:	4604      	mov	r4, r0
   b6002:	b148      	cbz	r0, b6018 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6004:	2302      	movs	r3, #2
   b6006:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6008:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b600a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b600e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6010:	4631      	mov	r1, r6
   b6012:	300c      	adds	r0, #12
   b6014:	f7ff febc 	bl	b5d90 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6018:	4628      	mov	r0, r5
	: __shared_count(__p)
   b601a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b601c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6020:	f7ff ff32 	bl	b5e88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6024:	4630      	mov	r0, r6
   b6026:	f7ff fec0 	bl	b5daa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b602a:	a805      	add	r0, sp, #20
   b602c:	f7ff febd 	bl	b5daa <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6030:	4628      	mov	r0, r5
   b6032:	b00b      	add	sp, #44	; 0x2c
   b6034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6038:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b603a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b603c:	2014      	movs	r0, #20
   b603e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6042:	9307      	str	r3, [sp, #28]
   b6044:	f7fe f827 	bl	b4096 <_Znwj>
   b6048:	4601      	mov	r1, r0
   b604a:	b118      	cbz	r0, b6054 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b604c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6050:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6052:	7044      	strb	r4, [r0, #1]
   b6054:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6056:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6058:	f7ff ff16 	bl	b5e88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b605c:	4b1e      	ldr	r3, [pc, #120]	; (b60d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b605e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6060:	2008      	movs	r0, #8
   b6062:	f7fe f818 	bl	b4096 <_Znwj>
   b6066:	4604      	mov	r4, r0
   b6068:	b110      	cbz	r0, b6070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b606a:	a903      	add	r1, sp, #12
   b606c:	f7ff fec7 	bl	b5dfe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6070:	9600      	str	r6, [sp, #0]
   b6072:	fa5f f38a 	uxtb.w	r3, sl
   b6076:	464a      	mov	r2, r9
   b6078:	4641      	mov	r1, r8
   b607a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b607c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b607e:	f7ff fa47 	bl	b5510 <spark_send_event>
   b6082:	b9b8      	cbnz	r0, b60b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6084:	9b03      	ldr	r3, [sp, #12]
   b6086:	785b      	ldrb	r3, [r3, #1]
   b6088:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b608c:	b993      	cbnz	r3, b60b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b608e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6092:	a905      	add	r1, sp, #20
   b6094:	a803      	add	r0, sp, #12
   b6096:	9205      	str	r2, [sp, #20]
   b6098:	f8ad 3018 	strh.w	r3, [sp, #24]
   b609c:	f7ff ff18 	bl	b5ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b60a0:	a805      	add	r0, sp, #20
   b60a2:	f7ff fe82 	bl	b5daa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b60a6:	a805      	add	r0, sp, #20
   b60a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b60aa:	f7ff feb1 	bl	b5e10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b60ae:	a806      	add	r0, sp, #24
   b60b0:	f7fe f9f8 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b60b4:	a903      	add	r1, sp, #12
   b60b6:	a805      	add	r0, sp, #20
   b60b8:	f7ff fea1 	bl	b5dfe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b60bc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b60be:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b60c0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b60c2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b60c4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b60c6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b60c8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b60ca:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b60cc:	f7fe f9ea 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b60d0:	a804      	add	r0, sp, #16
   b60d2:	f7fe f9e7 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b60d6:	e7ab      	b.n	b6030 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b60d8:	000b6159 	.word	0x000b6159

000b60dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b60dc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b60de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60e0:	4605      	mov	r5, r0
	switch (__op)
   b60e2:	d103      	bne.n	b60ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b60e4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b60e6:	6003      	str	r3, [r0, #0]
      }
   b60e8:	2000      	movs	r0, #0
   b60ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b60ec:	2a02      	cmp	r2, #2
   b60ee:	d010      	beq.n	b6112 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b60f0:	2a03      	cmp	r2, #3
   b60f2:	d1f9      	bne.n	b60e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b60f4:	6804      	ldr	r4, [r0, #0]
   b60f6:	2c00      	cmp	r4, #0
   b60f8:	d0f6      	beq.n	b60e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b60fa:	f104 0010 	add.w	r0, r4, #16
   b60fe:	f7ff fe54 	bl	b5daa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6102:	4620      	mov	r0, r4
   b6104:	f7ff fbf6 	bl	b58f4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6108:	2118      	movs	r1, #24
   b610a:	4620      	mov	r0, r4
   b610c:	f7fd ffc9 	bl	b40a2 <_ZdlPvj>
   b6110:	e7ea      	b.n	b60e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6112:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6114:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6116:	f7fd ffbe 	bl	b4096 <_Znwj>
   b611a:	4604      	mov	r4, r0
   b611c:	b150      	cbz	r0, b6134 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b611e:	4631      	mov	r1, r6
   b6120:	f7ff fec6 	bl	b5eb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6124:	6930      	ldr	r0, [r6, #16]
   b6126:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b612a:	b108      	cbz	r0, b6130 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b612c:	f001 fd52 	bl	b7bd4 <strdup>
        type_(type) {
   b6130:	6120      	str	r0, [r4, #16]
   b6132:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6134:	602c      	str	r4, [r5, #0]
	}
   b6136:	e7d7      	b.n	b60e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6138 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6138:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b613a:	2300      	movs	r3, #0
   b613c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b613e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6140:	4604      	mov	r4, r0
   b6142:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6144:	b12b      	cbz	r3, b6152 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6146:	2202      	movs	r2, #2
   b6148:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b614a:	68eb      	ldr	r3, [r5, #12]
   b614c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b614e:	68ab      	ldr	r3, [r5, #8]
   b6150:	60a3      	str	r3, [r4, #8]
    }
   b6152:	4620      	mov	r0, r4
   b6154:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6158 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6158:	b5f0      	push	{r4, r5, r6, r7, lr}
   b615a:	b089      	sub	sp, #36	; 0x24
   b615c:	4604      	mov	r4, r0
   b615e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6160:	a801      	add	r0, sp, #4
   b6162:	4611      	mov	r1, r2
   b6164:	f7ff fe54 	bl	b5e10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6168:	b1a4      	cbz	r4, b6194 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b616a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b616c:	b11d      	cbz	r5, b6176 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b616e:	4628      	mov	r0, r5
   b6170:	f001 fd30 	bl	b7bd4 <strdup>
   b6174:	4605      	mov	r5, r0
   b6176:	a801      	add	r0, sp, #4
   b6178:	a903      	add	r1, sp, #12
        type_(type) {
   b617a:	9503      	str	r5, [sp, #12]
   b617c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6180:	f7ff fea6 	bl	b5ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6184:	a803      	add	r0, sp, #12
   b6186:	f7ff fe10 	bl	b5daa <_ZN8particle5ErrorD1Ev>
   b618a:	a802      	add	r0, sp, #8
   b618c:	f7fe f98a 	bl	b44a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6190:	b009      	add	sp, #36	; 0x24
   b6192:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6194:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6196:	2301      	movs	r3, #1
   b6198:	e8d5 2f4f 	ldrexb	r2, [r5]
   b619c:	2a00      	cmp	r2, #0
   b619e:	d103      	bne.n	b61a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b61a0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b61a4:	2900      	cmp	r1, #0
   b61a6:	d1f7      	bne.n	b6198 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b61a8:	d1ef      	bne.n	b618a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b61aa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b61ac:	f3bf 8f5b 	dmb	ish
   b61b0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b61b2:	1d2b      	adds	r3, r5, #4
   b61b4:	f3bf 8f5b 	dmb	ish
   b61b8:	e853 6f00 	ldrex	r6, [r3]
   b61bc:	e843 4200 	strex	r2, r4, [r3]
   b61c0:	2a00      	cmp	r2, #0
   b61c2:	d1f9      	bne.n	b61b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b61c4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b61c8:	2e00      	cmp	r6, #0
   b61ca:	d0de      	beq.n	b618a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b61cc:	4620      	mov	r0, r4
   b61ce:	f7ff f8fb 	bl	b53c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b61d2:	4607      	mov	r7, r0
   b61d4:	b160      	cbz	r0, b61f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b61d6:	f105 010c 	add.w	r1, r5, #12
   b61da:	4630      	mov	r0, r6
   b61dc:	f7ff fe43 	bl	b5e66 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b61e0:	4630      	mov	r0, r6
   b61e2:	f7ff fb87 	bl	b58f4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b61e6:	2110      	movs	r1, #16
   b61e8:	4630      	mov	r0, r6
   b61ea:	f7fd ff5a 	bl	b40a2 <_ZdlPvj>
   b61ee:	e7cc      	b.n	b618a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b61f0:	4631      	mov	r1, r6
   b61f2:	a803      	add	r0, sp, #12
   b61f4:	f7ff ffa0 	bl	b6138 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b61f8:	7b2b      	ldrb	r3, [r5, #12]
   b61fa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b61fe:	2010      	movs	r0, #16
   b6200:	f7fd ff49 	bl	b4096 <_Znwj>
   b6204:	4605      	mov	r5, r0
   b6206:	b1d0      	cbz	r0, b623e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6208:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b620a:	2014      	movs	r0, #20
   b620c:	f7fd ff43 	bl	b4096 <_Znwj>
   b6210:	4604      	mov	r4, r0
   b6212:	b178      	cbz	r0, b6234 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6214:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6216:	4601      	mov	r1, r0
   b6218:	a803      	add	r0, sp, #12
   b621a:	f7ff fb88 	bl	b592e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b621e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6220:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6222:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6224:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6226:	9205      	str	r2, [sp, #20]
   b6228:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b622a:	60e3      	str	r3, [r4, #12]
   b622c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6230:	9206      	str	r2, [sp, #24]
   b6232:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6234:	4b06      	ldr	r3, [pc, #24]	; (b6250 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6236:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6238:	4b06      	ldr	r3, [pc, #24]	; (b6254 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b623a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b623c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b623e:	a803      	add	r0, sp, #12
   b6240:	f7ff fb58 	bl	b58f4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6244:	2200      	movs	r2, #0
   b6246:	4629      	mov	r1, r5
   b6248:	4803      	ldr	r0, [pc, #12]	; (b6258 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b624a:	f7ff f8c5 	bl	b53d8 <application_thread_invoke>
   b624e:	e7c7      	b.n	b61e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6250:	000b5e79 	.word	0x000b5e79
   b6254:	000b625d 	.word	0x000b625d
   b6258:	000b65bd 	.word	0x000b65bd

000b625c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b625c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b625e:	b570      	push	{r4, r5, r6, lr}
   b6260:	4604      	mov	r4, r0
	switch (__op)
   b6262:	d103      	bne.n	b626c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6264:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6266:	6003      	str	r3, [r0, #0]
      }
   b6268:	2000      	movs	r0, #0
   b626a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b626c:	2a02      	cmp	r2, #2
   b626e:	d00c      	beq.n	b628a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6270:	2a03      	cmp	r2, #3
   b6272:	d1f9      	bne.n	b6268 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6274:	6804      	ldr	r4, [r0, #0]
   b6276:	2c00      	cmp	r4, #0
   b6278:	d0f6      	beq.n	b6268 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b627a:	4620      	mov	r0, r4
   b627c:	f7ff fb3a 	bl	b58f4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6280:	2114      	movs	r1, #20
   b6282:	4620      	mov	r0, r4
   b6284:	f7fd ff0d 	bl	b40a2 <_ZdlPvj>
   b6288:	e7ee      	b.n	b6268 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b628a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b628c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b628e:	f7fd ff02 	bl	b4096 <_Znwj>
   b6292:	4605      	mov	r5, r0
   b6294:	b120      	cbz	r0, b62a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6296:	4631      	mov	r1, r6
   b6298:	f7ff ff4e 	bl	b6138 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b629c:	7c33      	ldrb	r3, [r6, #16]
   b629e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b62a0:	6025      	str	r5, [r4, #0]
	}
   b62a2:	e7e1      	b.n	b6268 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b62a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b62a4:	4770      	bx	lr

000b62a6 <_ZN9IPAddressD0Ev>:
   b62a6:	b510      	push	{r4, lr}
   b62a8:	2118      	movs	r1, #24
   b62aa:	4604      	mov	r4, r0
   b62ac:	f7fd fef9 	bl	b40a2 <_ZdlPvj>
   b62b0:	4620      	mov	r0, r4
   b62b2:	bd10      	pop	{r4, pc}

000b62b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b62b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b62b6:	7d03      	ldrb	r3, [r0, #20]
   b62b8:	2b06      	cmp	r3, #6
{
   b62ba:	b08d      	sub	sp, #52	; 0x34
   b62bc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62be:	f100 0704 	add.w	r7, r0, #4
   b62c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b62c6:	d012      	beq.n	b62ee <_ZNK9IPAddress7printToER5Print+0x3a>
   b62c8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b62cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b62d0:	220a      	movs	r2, #10
   b62d2:	4630      	mov	r0, r6
   b62d4:	f7ff fb7d 	bl	b59d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b62d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b62da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b62dc:	d019      	beq.n	b6312 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b62de:	2c00      	cmp	r4, #0
   b62e0:	d0f4      	beq.n	b62cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b62e2:	212e      	movs	r1, #46	; 0x2e
   b62e4:	4630      	mov	r0, r6
   b62e6:	f7ff fb65 	bl	b59b4 <_ZN5Print5printEc>
   b62ea:	4404      	add	r4, r0
   b62ec:	e7ee      	b.n	b62cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62ee:	232f      	movs	r3, #47	; 0x2f
   b62f0:	466a      	mov	r2, sp
   b62f2:	4639      	mov	r1, r7
   b62f4:	200a      	movs	r0, #10
		buf[0] = 0;
   b62f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62fa:	f7fe ff45 	bl	b5188 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b62fe:	4668      	mov	r0, sp
   b6300:	f001 fc85 	bl	b7c0e <strlen>
   b6304:	6833      	ldr	r3, [r6, #0]
   b6306:	4602      	mov	r2, r0
   b6308:	68db      	ldr	r3, [r3, #12]
   b630a:	4669      	mov	r1, sp
   b630c:	4630      	mov	r0, r6
   b630e:	4798      	blx	r3
   b6310:	4604      	mov	r4, r0
    }
    return n;
}
   b6312:	4620      	mov	r0, r4
   b6314:	b00d      	add	sp, #52	; 0x34
   b6316:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6318 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6318:	b510      	push	{r4, lr}
   b631a:	4b05      	ldr	r3, [pc, #20]	; (b6330 <_ZN9IPAddressC1Ev+0x18>)
   b631c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b631e:	2211      	movs	r2, #17
   b6320:	f840 3b04 	str.w	r3, [r0], #4
   b6324:	2100      	movs	r1, #0
   b6326:	f001 fbfc 	bl	b7b22 <memset>
}
   b632a:	4620      	mov	r0, r4
   b632c:	bd10      	pop	{r4, pc}
   b632e:	bf00      	nop
   b6330:	000b9ee8 	.word	0x000b9ee8

000b6334 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6334:	4603      	mov	r3, r0
   b6336:	4a07      	ldr	r2, [pc, #28]	; (b6354 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6338:	b510      	push	{r4, lr}
   b633a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b633e:	f101 0210 	add.w	r2, r1, #16
   b6342:	f851 4b04 	ldr.w	r4, [r1], #4
   b6346:	f843 4b04 	str.w	r4, [r3], #4
   b634a:	4291      	cmp	r1, r2
   b634c:	d1f9      	bne.n	b6342 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b634e:	780a      	ldrb	r2, [r1, #0]
   b6350:	701a      	strb	r2, [r3, #0]
}
   b6352:	bd10      	pop	{r4, pc}
   b6354:	000b9ee8 	.word	0x000b9ee8

000b6358 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6358:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b635a:	2b04      	cmp	r3, #4
   b635c:	d104      	bne.n	b6368 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b635e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6360:	3800      	subs	r0, #0
   b6362:	bf18      	it	ne
   b6364:	2001      	movne	r0, #1
   b6366:	4770      	bx	lr
    } else if (version() == 6) {
   b6368:	2b06      	cmp	r3, #6
   b636a:	d107      	bne.n	b637c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b636c:	6843      	ldr	r3, [r0, #4]
   b636e:	b93b      	cbnz	r3, b6380 <_ZNK9IPAddresscvbEv+0x28>
   b6370:	6883      	ldr	r3, [r0, #8]
   b6372:	b92b      	cbnz	r3, b6380 <_ZNK9IPAddresscvbEv+0x28>
   b6374:	68c3      	ldr	r3, [r0, #12]
   b6376:	b91b      	cbnz	r3, b6380 <_ZNK9IPAddresscvbEv+0x28>
   b6378:	6900      	ldr	r0, [r0, #16]
   b637a:	e7f1      	b.n	b6360 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b637c:	2000      	movs	r0, #0
   b637e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6380:	2001      	movs	r0, #1
}
   b6382:	4770      	bx	lr

000b6384 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6384:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6386:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b638a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b638e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6392:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6396:	2304      	movs	r3, #4
   b6398:	6041      	str	r1, [r0, #4]
   b639a:	7503      	strb	r3, [r0, #20]
}
   b639c:	bd10      	pop	{r4, pc}
	...

000b63a0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b63a0:	b507      	push	{r0, r1, r2, lr}
   b63a2:	4b06      	ldr	r3, [pc, #24]	; (b63bc <_ZN9IPAddressC1EPKh+0x1c>)
   b63a4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b63a6:	78cb      	ldrb	r3, [r1, #3]
   b63a8:	9300      	str	r3, [sp, #0]
   b63aa:	788b      	ldrb	r3, [r1, #2]
   b63ac:	784a      	ldrb	r2, [r1, #1]
   b63ae:	7809      	ldrb	r1, [r1, #0]
   b63b0:	f7ff ffe8 	bl	b6384 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b63b4:	b003      	add	sp, #12
   b63b6:	f85d fb04 	ldr.w	pc, [sp], #4
   b63ba:	bf00      	nop
   b63bc:	000b9ee8 	.word	0x000b9ee8

000b63c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b63c0:	7441      	strb	r1, [r0, #17]
}
   b63c2:	4770      	bx	lr

000b63c4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63c4:	4770      	bx	lr

000b63c6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b63c6:	4770      	bx	lr

000b63c8 <_ZN9USBSerial4readEv>:
{
   b63c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b63ca:	2100      	movs	r1, #0
   b63cc:	7c00      	ldrb	r0, [r0, #16]
   b63ce:	f7fe ffc3 	bl	b5358 <HAL_USB_USART_Receive_Data>
}
   b63d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b63d6:	bd08      	pop	{r3, pc}

000b63d8 <_ZN9USBSerial4peekEv>:
{
   b63d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b63da:	2101      	movs	r1, #1
   b63dc:	7c00      	ldrb	r0, [r0, #16]
   b63de:	f7fe ffbb 	bl	b5358 <HAL_USB_USART_Receive_Data>
}
   b63e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b63e6:	bd08      	pop	{r3, pc}

000b63e8 <_ZN9USBSerial17availableForWriteEv>:
{
   b63e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b63ea:	7c00      	ldrb	r0, [r0, #16]
   b63ec:	f7fe ffac 	bl	b5348 <HAL_USB_USART_Available_Data_For_Write>
}
   b63f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b63f4:	bd08      	pop	{r3, pc}

000b63f6 <_ZN9USBSerial9availableEv>:
{
   b63f6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b63f8:	7c00      	ldrb	r0, [r0, #16]
   b63fa:	f7fe ff9d 	bl	b5338 <HAL_USB_USART_Available_Data>
}
   b63fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6402:	bd08      	pop	{r3, pc}

000b6404 <_ZN9USBSerial5writeEh>:
{
   b6404:	b513      	push	{r0, r1, r4, lr}
   b6406:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6408:	7c00      	ldrb	r0, [r0, #16]
{
   b640a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b640c:	f7fe ff9c 	bl	b5348 <HAL_USB_USART_Available_Data_For_Write>
   b6410:	2800      	cmp	r0, #0
   b6412:	9901      	ldr	r1, [sp, #4]
   b6414:	dc01      	bgt.n	b641a <_ZN9USBSerial5writeEh+0x16>
   b6416:	7c60      	ldrb	r0, [r4, #17]
   b6418:	b120      	cbz	r0, b6424 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b641a:	7c20      	ldrb	r0, [r4, #16]
   b641c:	f7fe ffa4 	bl	b5368 <HAL_USB_USART_Send_Data>
   b6420:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6424:	b002      	add	sp, #8
   b6426:	bd10      	pop	{r4, pc}

000b6428 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6428:	7c00      	ldrb	r0, [r0, #16]
   b642a:	f7fe bfa5 	b.w	b5378 <HAL_USB_USART_Flush_Data>

000b642e <_ZN9USBSerialD0Ev>:
   b642e:	b510      	push	{r4, lr}
   b6430:	2114      	movs	r1, #20
   b6432:	4604      	mov	r4, r0
   b6434:	f7fd fe35 	bl	b40a2 <_ZdlPvj>
   b6438:	4620      	mov	r0, r4
   b643a:	bd10      	pop	{r4, pc}

000b643c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b643c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b643e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6442:	4604      	mov	r4, r0
   b6444:	4608      	mov	r0, r1
   b6446:	2100      	movs	r1, #0
   b6448:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b644c:	4b04      	ldr	r3, [pc, #16]	; (b6460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b644e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6450:	2301      	movs	r3, #1
  _serial = serial;
   b6452:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6454:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6456:	4611      	mov	r1, r2
   b6458:	f7fe ff66 	bl	b5328 <HAL_USB_USART_Init>
}
   b645c:	4620      	mov	r0, r4
   b645e:	bd10      	pop	{r4, pc}
   b6460:	000b9efc 	.word	0x000b9efc

000b6464 <_Z19acquireSerialBufferv>:
{
   b6464:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6466:	2214      	movs	r2, #20
{
   b6468:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b646a:	2100      	movs	r1, #0
   b646c:	f001 fb59 	bl	b7b22 <memset>
}
   b6470:	4620      	mov	r0, r4
   b6472:	bd10      	pop	{r4, pc}

000b6474 <_Z16_fetch_usbserialv>:
{
   b6474:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6476:	4c0f      	ldr	r4, [pc, #60]	; (b64b4 <_Z16_fetch_usbserialv+0x40>)
{
   b6478:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b647a:	a803      	add	r0, sp, #12
   b647c:	f7ff fff2 	bl	b6464 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6480:	7821      	ldrb	r1, [r4, #0]
   b6482:	f3bf 8f5b 	dmb	ish
   b6486:	f011 0101 	ands.w	r1, r1, #1
   b648a:	d10f      	bne.n	b64ac <_Z16_fetch_usbserialv+0x38>
   b648c:	4620      	mov	r0, r4
   b648e:	9101      	str	r1, [sp, #4]
   b6490:	f7fd fe09 	bl	b40a6 <__cxa_guard_acquire>
   b6494:	9901      	ldr	r1, [sp, #4]
   b6496:	b148      	cbz	r0, b64ac <_Z16_fetch_usbserialv+0x38>
   b6498:	aa03      	add	r2, sp, #12
   b649a:	4807      	ldr	r0, [pc, #28]	; (b64b8 <_Z16_fetch_usbserialv+0x44>)
   b649c:	f7ff ffce 	bl	b643c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b64a0:	4620      	mov	r0, r4
   b64a2:	f7fd fe05 	bl	b40b0 <__cxa_guard_release>
   b64a6:	4805      	ldr	r0, [pc, #20]	; (b64bc <_Z16_fetch_usbserialv+0x48>)
   b64a8:	f001 fb0c 	bl	b7ac4 <atexit>
	return _usbserial;
}
   b64ac:	4802      	ldr	r0, [pc, #8]	; (b64b8 <_Z16_fetch_usbserialv+0x44>)
   b64ae:	b008      	add	sp, #32
   b64b0:	bd10      	pop	{r4, pc}
   b64b2:	bf00      	nop
   b64b4:	2003e6f8 	.word	0x2003e6f8
   b64b8:	2003e6fc 	.word	0x2003e6fc
   b64bc:	000b63c5 	.word	0x000b63c5

000b64c0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b64c0:	4700      	bx	r0
	...

000b64c4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b64c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b64c8:	2400      	movs	r4, #0
{
   b64ca:	461d      	mov	r5, r3
   b64cc:	460f      	mov	r7, r1
   b64ce:	4690      	mov	r8, r2
   b64d0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b64d2:	f7fe fe09 	bl	b50e8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b64d6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b64d8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b64dc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b64e0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b64e4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b64e8:	bfa2      	ittt	ge
   b64ea:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b64ee:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b64f2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b64f4:	4907      	ldr	r1, [pc, #28]	; (b6514 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b64f6:	9400      	str	r4, [sp, #0]
   b64f8:	4643      	mov	r3, r8
   b64fa:	463a      	mov	r2, r7
   b64fc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b64fe:	bfa8      	it	ge
   b6500:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6504:	f7fe fde8 	bl	b50d8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b6508:	fab0 f080 	clz	r0, r0
   b650c:	0940      	lsrs	r0, r0, #5
   b650e:	b004      	add	sp, #16
   b6510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6514:	000b64c1 	.word	0x000b64c1

000b6518 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6518:	4770      	bx	lr

000b651a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b651a:	7441      	strb	r1, [r0, #17]
}
   b651c:	4770      	bx	lr

000b651e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b651e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6520:	7c00      	ldrb	r0, [r0, #16]
   b6522:	f7fe fe79 	bl	b5218 <hal_usart_available_data_for_write>
}
   b6526:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b652a:	bd08      	pop	{r3, pc}

000b652c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b652c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b652e:	7c00      	ldrb	r0, [r0, #16]
   b6530:	f7fe fe4a 	bl	b51c8 <hal_usart_available>
}
   b6534:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6538:	bd08      	pop	{r3, pc}

000b653a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b653a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b653c:	7c00      	ldrb	r0, [r0, #16]
   b653e:	f7fe fe53 	bl	b51e8 <hal_usart_peek>
}
   b6542:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6546:	bd08      	pop	{r3, pc}

000b6548 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6548:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b654a:	7c00      	ldrb	r0, [r0, #16]
   b654c:	f7fe fe44 	bl	b51d8 <hal_usart_read>
}
   b6550:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6554:	bd08      	pop	{r3, pc}

000b6556 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6556:	7c00      	ldrb	r0, [r0, #16]
   b6558:	f7fe be4e 	b.w	b51f8 <hal_usart_flush>

000b655c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b655c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b655e:	7c45      	ldrb	r5, [r0, #17]
{
   b6560:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6562:	b12d      	cbz	r5, b6570 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6564:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6566:	b003      	add	sp, #12
   b6568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b656c:	f7fe be24 	b.w	b51b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6570:	7c00      	ldrb	r0, [r0, #16]
   b6572:	9101      	str	r1, [sp, #4]
   b6574:	f7fe fe50 	bl	b5218 <hal_usart_available_data_for_write>
   b6578:	2800      	cmp	r0, #0
   b657a:	9901      	ldr	r1, [sp, #4]
   b657c:	dcf2      	bgt.n	b6564 <_ZN11USARTSerial5writeEh+0x8>
}
   b657e:	4628      	mov	r0, r5
   b6580:	b003      	add	sp, #12
   b6582:	bd30      	pop	{r4, r5, pc}

000b6584 <_ZN11USARTSerialD0Ev>:
   b6584:	b510      	push	{r4, lr}
   b6586:	2114      	movs	r1, #20
   b6588:	4604      	mov	r4, r0
   b658a:	f7fd fd8a 	bl	b40a2 <_ZdlPvj>
   b658e:	4620      	mov	r0, r4
   b6590:	bd10      	pop	{r4, pc}
	...

000b6594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6594:	b510      	push	{r4, lr}
   b6596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b659a:	4604      	mov	r4, r0
   b659c:	4608      	mov	r0, r1
   b659e:	4611      	mov	r1, r2
   b65a0:	2200      	movs	r2, #0
   b65a2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65a6:	4b04      	ldr	r3, [pc, #16]	; (b65b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b65a8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b65aa:	2301      	movs	r3, #1
  _serial = serial;
   b65ac:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b65ae:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b65b0:	f7fe fe3a 	bl	b5228 <hal_usart_init_ex>
}
   b65b4:	4620      	mov	r0, r4
   b65b6:	bd10      	pop	{r4, pc}
   b65b8:	000b9f2c 	.word	0x000b9f2c

000b65bc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b65bc:	b510      	push	{r4, lr}
      if (_M_empty())
   b65be:	6883      	ldr	r3, [r0, #8]
   b65c0:	4604      	mov	r4, r0
   b65c2:	b90b      	cbnz	r3, b65c8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b65c4:	f000 fcd4 	bl	b6f70 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b65c8:	68c3      	ldr	r3, [r0, #12]
   b65ca:	4798      	blx	r3
      if (_M_manager)
   b65cc:	68a3      	ldr	r3, [r4, #8]
   b65ce:	b11b      	cbz	r3, b65d8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b65d0:	2203      	movs	r2, #3
   b65d2:	4621      	mov	r1, r4
   b65d4:	4620      	mov	r0, r4
   b65d6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b65d8:	4620      	mov	r0, r4
   b65da:	2110      	movs	r1, #16
}
   b65dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b65e0:	f7fd bd5f 	b.w	b40a2 <_ZdlPvj>

000b65e4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b65e4:	4770      	bx	lr

000b65e6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b65e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65e8:	4606      	mov	r6, r0
   b65ea:	4615      	mov	r5, r2
   b65ec:	460c      	mov	r4, r1
   b65ee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b65f0:	42bc      	cmp	r4, r7
   b65f2:	d006      	beq.n	b6602 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b65f4:	6833      	ldr	r3, [r6, #0]
   b65f6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b65fa:	689b      	ldr	r3, [r3, #8]
   b65fc:	4630      	mov	r0, r6
   b65fe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6600:	e7f6      	b.n	b65f0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6602:	4628      	mov	r0, r5
   b6604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6606 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6606:	7c00      	ldrb	r0, [r0, #16]
   b6608:	2200      	movs	r2, #0
   b660a:	f7fe be15 	b.w	b5238 <hal_i2c_write>

000b660e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b660e:	7c00      	ldrb	r0, [r0, #16]
   b6610:	2100      	movs	r1, #0
   b6612:	f7fe be19 	b.w	b5248 <hal_i2c_available>

000b6616 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6616:	7c00      	ldrb	r0, [r0, #16]
   b6618:	2100      	movs	r1, #0
   b661a:	f7fe be1d 	b.w	b5258 <hal_i2c_read>

000b661e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b661e:	7c00      	ldrb	r0, [r0, #16]
   b6620:	2100      	movs	r1, #0
   b6622:	f7fe be21 	b.w	b5268 <hal_i2c_peek>

000b6626 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6626:	7c00      	ldrb	r0, [r0, #16]
   b6628:	2100      	movs	r1, #0
   b662a:	f7fe be25 	b.w	b5278 <hal_i2c_flush>

000b662e <_ZN7TwoWireD0Ev>:
   b662e:	b510      	push	{r4, lr}
   b6630:	2114      	movs	r1, #20
   b6632:	4604      	mov	r4, r0
   b6634:	f7fd fd35 	bl	b40a2 <_ZdlPvj>
   b6638:	4620      	mov	r0, r4
   b663a:	bd10      	pop	{r4, pc}

000b663c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b663c:	b510      	push	{r4, lr}
   b663e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6642:	4604      	mov	r4, r0
   b6644:	4608      	mov	r0, r1
   b6646:	2100      	movs	r1, #0
   b6648:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b664c:	4b03      	ldr	r3, [pc, #12]	; (b665c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b664e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6650:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6652:	4611      	mov	r1, r2
   b6654:	f7fe fe20 	bl	b5298 <hal_i2c_init>
}
   b6658:	4620      	mov	r0, r4
   b665a:	bd10      	pop	{r4, pc}
   b665c:	000b9f5c 	.word	0x000b9f5c

000b6660 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6660:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6662:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6664:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6668:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b666a:	2201      	movs	r2, #1
   b666c:	f04f 33ff 	mov.w	r3, #4294967295
   b6670:	f10d 0107 	add.w	r1, sp, #7
   b6674:	47a0      	blx	r4
}
   b6676:	b002      	add	sp, #8
   b6678:	bd10      	pop	{r4, pc}

000b667a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b667a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b667c:	6803      	ldr	r3, [r0, #0]
   b667e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6680:	f04f 33ff 	mov.w	r3, #4294967295
   b6684:	46a4      	mov	ip, r4
}
   b6686:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b668a:	4760      	bx	ip

000b668c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b668c:	b513      	push	{r0, r1, r4, lr}
   b668e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6690:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6692:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6696:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6698:	f10d 0107 	add.w	r1, sp, #7
   b669c:	2201      	movs	r2, #1
   b669e:	47a0      	blx	r4
}
   b66a0:	b002      	add	sp, #8
   b66a2:	bd10      	pop	{r4, pc}

000b66a4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b66a4:	b510      	push	{r4, lr}
   b66a6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66a8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b66ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b66b0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b66b2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66b4:	d008      	beq.n	b66c8 <_ZN9TCPClient4readEv+0x24>
   b66b6:	6963      	ldr	r3, [r4, #20]
   b66b8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b66bc:	1c51      	adds	r1, r2, #1
   b66be:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b66c2:	4413      	add	r3, r2
   b66c4:	7918      	ldrb	r0, [r3, #4]
}
   b66c6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66c8:	6803      	ldr	r3, [r0, #0]
   b66ca:	691b      	ldr	r3, [r3, #16]
   b66cc:	4798      	blx	r3
   b66ce:	2800      	cmp	r0, #0
   b66d0:	d1f1      	bne.n	b66b6 <_ZN9TCPClient4readEv+0x12>
   b66d2:	f04f 30ff 	mov.w	r0, #4294967295
   b66d6:	e7f6      	b.n	b66c6 <_ZN9TCPClient4readEv+0x22>

000b66d8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b66d8:	4770      	bx	lr

000b66da <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b66da:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b66dc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b66de:	43c0      	mvns	r0, r0
   b66e0:	0fc0      	lsrs	r0, r0, #31
   b66e2:	4770      	bx	lr

000b66e4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b66e4:	4770      	bx	lr
	...

000b66e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b66e8:	4b06      	ldr	r3, [pc, #24]	; (b6704 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b66ea:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b66ec:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b66ee:	f100 040c 	add.w	r4, r0, #12
	    ||
   b66f2:	d005      	beq.n	b6700 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b66f4:	4608      	mov	r0, r1
   b66f6:	f000 fc3f 	bl	b6f78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b66fa:	2800      	cmp	r0, #0
   b66fc:	bf08      	it	eq
   b66fe:	2400      	moveq	r4, #0
      }
   b6700:	4620      	mov	r0, r4
   b6702:	bd10      	pop	{r4, pc}
   b6704:	000b9e9c 	.word	0x000b9e9c

000b6708 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6708:	b510      	push	{r4, lr}
   b670a:	21ac      	movs	r1, #172	; 0xac
   b670c:	4604      	mov	r4, r0
   b670e:	f7fd fcc8 	bl	b40a2 <_ZdlPvj>
   b6712:	4620      	mov	r0, r4
   b6714:	bd10      	pop	{r4, pc}

000b6716 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6716:	21ac      	movs	r1, #172	; 0xac
   b6718:	f7fd bcc3 	b.w	b40a2 <_ZdlPvj>

000b671c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6720:	f04f 0800 	mov.w	r8, #0
   b6724:	b086      	sub	sp, #24
   b6726:	461c      	mov	r4, r3
   b6728:	f8c0 8004 	str.w	r8, [r0, #4]
   b672c:	4605      	mov	r5, r0
   b672e:	460e      	mov	r6, r1
   b6730:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6732:	4641      	mov	r1, r8
   b6734:	2210      	movs	r2, #16
   b6736:	a802      	add	r0, sp, #8
   b6738:	f001 f9f3 	bl	b7b22 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b673c:	1c63      	adds	r3, r4, #1
   b673e:	d009      	beq.n	b6754 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6744:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6748:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b674c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6750:	435c      	muls	r4, r3
   b6752:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6754:	6968      	ldr	r0, [r5, #20]
   b6756:	2310      	movs	r3, #16
   b6758:	9300      	str	r3, [sp, #0]
   b675a:	6800      	ldr	r0, [r0, #0]
   b675c:	ab02      	add	r3, sp, #8
   b675e:	f241 0205 	movw	r2, #4101	; 0x1005
   b6762:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6766:	f7fe fd9f 	bl	b52a8 <sock_setsockopt>
    if (ret < 0) {
   b676a:	2800      	cmp	r0, #0
   b676c:	da07      	bge.n	b677e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b676e:	f7fe ff2f 	bl	b55d0 <__errno>
   b6772:	6803      	ldr	r3, [r0, #0]
   b6774:	606b      	str	r3, [r5, #4]
        return 0;
   b6776:	2000      	movs	r0, #0
}
   b6778:	b006      	add	sp, #24
   b677a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b677e:	6968      	ldr	r0, [r5, #20]
   b6780:	2300      	movs	r3, #0
   b6782:	6800      	ldr	r0, [r0, #0]
   b6784:	463a      	mov	r2, r7
   b6786:	4631      	mov	r1, r6
   b6788:	f7fe fdae 	bl	b52e8 <sock_send>
    if (ret < 0) {
   b678c:	1e03      	subs	r3, r0, #0
   b678e:	dbee      	blt.n	b676e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6790:	4618      	mov	r0, r3
   b6792:	e7f1      	b.n	b6778 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6794 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6794:	b530      	push	{r4, r5, lr}
   b6796:	b087      	sub	sp, #28
   b6798:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b679a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b679c:	4668      	mov	r0, sp
   b679e:	f7ff fdff 	bl	b63a0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b67a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67a4:	3404      	adds	r4, #4
   b67a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67a8:	682b      	ldr	r3, [r5, #0]
   b67aa:	7023      	strb	r3, [r4, #0]
    }
   b67ac:	b007      	add	sp, #28
   b67ae:	bd30      	pop	{r4, r5, pc}

000b67b0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b67b0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b67b2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b67b4:	4b05      	ldr	r3, [pc, #20]	; (b67cc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b67b6:	4604      	mov	r4, r0
   b67b8:	358c      	adds	r5, #140	; 0x8c
   b67ba:	f844 3b04 	str.w	r3, [r4], #4
   b67be:	4606      	mov	r6, r0
   b67c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67c4:	682b      	ldr	r3, [r5, #0]
   b67c6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b67c8:	4630      	mov	r0, r6
   b67ca:	bd70      	pop	{r4, r5, r6, pc}
   b67cc:	000b9ee8 	.word	0x000b9ee8

000b67d0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b67d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b67d4:	4698      	mov	r8, r3
    stop();
   b67d6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b67d8:	b093      	sub	sp, #76	; 0x4c
   b67da:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b67dc:	2400      	movs	r4, #0
    stop();
   b67de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b67e0:	4606      	mov	r6, r0
   b67e2:	4617      	mov	r7, r2
    stop();
   b67e4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b67e6:	4628      	mov	r0, r5
   b67e8:	466b      	mov	r3, sp
   b67ea:	4622      	mov	r2, r4
   b67ec:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b67ee:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b67f0:	f7fe fc62 	bl	b50b8 <netdb_getaddrinfo>
   b67f4:	4605      	mov	r5, r0
   b67f6:	2800      	cmp	r0, #0
   b67f8:	d163      	bne.n	b68c2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b67fa:	9b00      	ldr	r3, [sp, #0]
   b67fc:	2b00      	cmp	r3, #0
   b67fe:	d04b      	beq.n	b6898 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6800:	695b      	ldr	r3, [r3, #20]
   b6802:	2b00      	cmp	r3, #0
   b6804:	d048      	beq.n	b6898 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6806:	a806      	add	r0, sp, #24
   b6808:	f7ff fd86 	bl	b6318 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b680c:	9b00      	ldr	r3, [sp, #0]
   b680e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6810:	7863      	ldrb	r3, [r4, #1]
   b6812:	2b02      	cmp	r3, #2
   b6814:	d104      	bne.n	b6820 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6816:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6818:	a806      	add	r0, sp, #24
   b681a:	f7ff ffbb 	bl	b6794 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b681e:	e026      	b.n	b686e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6820:	2b0a      	cmp	r3, #10
   b6822:	d124      	bne.n	b686e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6824:	2211      	movs	r2, #17
   b6826:	4629      	mov	r1, r5
   b6828:	a801      	add	r0, sp, #4
   b682a:	f001 f97a 	bl	b7b22 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b682e:	68a3      	ldr	r3, [r4, #8]
   b6830:	2b00      	cmp	r3, #0
   b6832:	d038      	beq.n	b68a6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6834:	f104 0308 	add.w	r3, r4, #8
   b6838:	f10d 0c04 	add.w	ip, sp, #4
   b683c:	3418      	adds	r4, #24
   b683e:	6818      	ldr	r0, [r3, #0]
   b6840:	6859      	ldr	r1, [r3, #4]
   b6842:	4662      	mov	r2, ip
   b6844:	c203      	stmia	r2!, {r0, r1}
   b6846:	3308      	adds	r3, #8
   b6848:	42a3      	cmp	r3, r4
   b684a:	4694      	mov	ip, r2
   b684c:	d1f7      	bne.n	b683e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b684e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6850:	a901      	add	r1, sp, #4
   b6852:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6854:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6858:	f7ff fd6c 	bl	b6334 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b685c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6860:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6864:	ac07      	add	r4, sp, #28
   b6866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6868:	f8dc 3000 	ldr.w	r3, [ip]
   b686c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b686e:	a806      	add	r0, sp, #24
   b6870:	f7ff fd72 	bl	b6358 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6874:	b180      	cbz	r0, b6898 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6876:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6878:	ad07      	add	r5, sp, #28
   b687a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b687e:	4b12      	ldr	r3, [pc, #72]	; (b68c8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6880:	930c      	str	r3, [sp, #48]	; 0x30
   b6882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6884:	ac0d      	add	r4, sp, #52	; 0x34
   b6886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6888:	682b      	ldr	r3, [r5, #0]
   b688a:	7023      	strb	r3, [r4, #0]
   b688c:	463a      	mov	r2, r7
   b688e:	4643      	mov	r3, r8
   b6890:	a90c      	add	r1, sp, #48	; 0x30
   b6892:	4630      	mov	r0, r6
   b6894:	47c8      	blx	r9
   b6896:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6898:	9800      	ldr	r0, [sp, #0]
   b689a:	f7fe fc05 	bl	b50a8 <netdb_freeaddrinfo>
}
   b689e:	4628      	mov	r0, r5
   b68a0:	b013      	add	sp, #76	; 0x4c
   b68a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b68a6:	68e3      	ldr	r3, [r4, #12]
   b68a8:	2b00      	cmp	r3, #0
   b68aa:	d1c3      	bne.n	b6834 <_ZN9TCPClient7connectEPKctm+0x64>
   b68ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b68b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b68b4:	f7fe fc70 	bl	b5198 <inet_htonl>
   b68b8:	4581      	cmp	r9, r0
   b68ba:	d1bb      	bne.n	b6834 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b68bc:	f104 0114 	add.w	r1, r4, #20
   b68c0:	e7aa      	b.n	b6818 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b68c2:	4625      	mov	r5, r4
   b68c4:	e7e8      	b.n	b6898 <_ZN9TCPClient7connectEPKctm+0xc8>
   b68c6:	bf00      	nop
   b68c8:	000b9ee8 	.word	0x000b9ee8

000b68cc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b68cc:	b538      	push	{r3, r4, r5, lr}
   b68ce:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b68d0:	681a      	ldr	r2, [r3, #0]
   b68d2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b68d4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b68d6:	da10      	bge.n	b68fa <_ZN9TCPClient9connectedEv+0x2e>
   b68d8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b68dc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b68e0:	429a      	cmp	r2, r3
   b68e2:	d10a      	bne.n	b68fa <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b68e4:	6803      	ldr	r3, [r0, #0]
   b68e6:	691b      	ldr	r3, [r3, #16]
   b68e8:	4798      	blx	r3
        if (!rv) {
   b68ea:	4604      	mov	r4, r0
   b68ec:	b928      	cbnz	r0, b68fa <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b68ee:	682b      	ldr	r3, [r5, #0]
   b68f0:	4628      	mov	r0, r5
   b68f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b68f4:	4798      	blx	r3
        rv = available();
   b68f6:	4620      	mov	r0, r4
}
   b68f8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b68fa:	2001      	movs	r0, #1
   b68fc:	e7fc      	b.n	b68f8 <_ZN9TCPClient9connectedEv+0x2c>

000b68fe <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b68fe:	b510      	push	{r4, lr}
   b6900:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6902:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6906:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b690a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b690c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b690e:	d005      	beq.n	b691c <_ZN9TCPClient4peekEv+0x1e>
   b6910:	6963      	ldr	r3, [r4, #20]
   b6912:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6916:	4413      	add	r3, r2
   b6918:	7918      	ldrb	r0, [r3, #4]
}
   b691a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b691c:	6803      	ldr	r3, [r0, #0]
   b691e:	691b      	ldr	r3, [r3, #16]
   b6920:	4798      	blx	r3
   b6922:	2800      	cmp	r0, #0
   b6924:	d1f4      	bne.n	b6910 <_ZN9TCPClient4peekEv+0x12>
   b6926:	f04f 30ff 	mov.w	r0, #4294967295
   b692a:	e7f6      	b.n	b691a <_ZN9TCPClient4peekEv+0x1c>

000b692c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b692e:	6943      	ldr	r3, [r0, #20]
   b6930:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6932:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6936:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b693a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b693c:	4605      	mov	r5, r0
   b693e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6940:	d016      	beq.n	b6970 <_ZN9TCPClient4readEPhj+0x44>
   b6942:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6944:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6948:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b694c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b694e:	42bc      	cmp	r4, r7
   b6950:	bf28      	it	cs
   b6952:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6954:	3304      	adds	r3, #4
   b6956:	4622      	mov	r2, r4
   b6958:	4419      	add	r1, r3
   b695a:	4630      	mov	r0, r6
   b695c:	f001 f8d3 	bl	b7b06 <memcpy>
   b6960:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6962:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6966:	4423      	add	r3, r4
   b6968:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b696c:	4620      	mov	r0, r4
   b696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6970:	6803      	ldr	r3, [r0, #0]
   b6972:	691b      	ldr	r3, [r3, #16]
   b6974:	4798      	blx	r3
   b6976:	2800      	cmp	r0, #0
   b6978:	d1e3      	bne.n	b6942 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b697a:	f04f 34ff 	mov.w	r4, #4294967295
   b697e:	e7f5      	b.n	b696c <_ZN9TCPClient4readEPhj+0x40>

000b6980 <_ZN9TCPClient12flush_bufferEv>:
   b6980:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6982:	2300      	movs	r3, #0
   b6984:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6988:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b698a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b698e:	4770      	bx	lr

000b6990 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6994:	461f      	mov	r7, r3
    stop();
   b6996:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6998:	460c      	mov	r4, r1
    stop();
   b699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b699c:	b08a      	sub	sp, #40	; 0x28
   b699e:	4605      	mov	r5, r0
   b69a0:	4616      	mov	r6, r2
    stop();
   b69a2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b69a4:	7d23      	ldrb	r3, [r4, #20]
   b69a6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b69aa:	2b04      	cmp	r3, #4
   b69ac:	bf0c      	ite	eq
   b69ae:	2002      	moveq	r0, #2
   b69b0:	200a      	movne	r0, #10
   b69b2:	2206      	movs	r2, #6
   b69b4:	2101      	movs	r1, #1
   b69b6:	f7fe fc9f 	bl	b52f8 <sock_socket>
   b69ba:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b69be:	696b      	ldr	r3, [r5, #20]
   b69c0:	681b      	ldr	r3, [r3, #0]
   b69c2:	2b00      	cmp	r3, #0
   b69c4:	da08      	bge.n	b69d8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b69c6:	682b      	ldr	r3, [r5, #0]
   b69c8:	4628      	mov	r0, r5
   b69ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b69cc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b69ce:	4798      	blx	r3
}
   b69d0:	4620      	mov	r0, r4
   b69d2:	b00a      	add	sp, #40	; 0x28
   b69d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b69d8:	4628      	mov	r0, r5
   b69da:	f7ff ffd1 	bl	b6980 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b69de:	b1b7      	cbz	r7, b6a0e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b69e0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b69e2:	a903      	add	r1, sp, #12
   b69e4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b69e6:	9303      	str	r3, [sp, #12]
   b69e8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b69ec:	f7fe fb84 	bl	b50f8 <if_index_to_name>
   b69f0:	2800      	cmp	r0, #0
   b69f2:	d1e8      	bne.n	b69c6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b69f4:	6968      	ldr	r0, [r5, #20]
   b69f6:	2306      	movs	r3, #6
   b69f8:	9300      	str	r3, [sp, #0]
   b69fa:	6800      	ldr	r0, [r0, #0]
   b69fc:	ab03      	add	r3, sp, #12
   b69fe:	f241 020b 	movw	r2, #4107	; 0x100b
   b6a02:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6a06:	f7fe fc4f 	bl	b52a8 <sock_setsockopt>
   b6a0a:	2800      	cmp	r0, #0
   b6a0c:	d1db      	bne.n	b69c6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6a0e:	221c      	movs	r2, #28
   b6a10:	2100      	movs	r1, #0
   b6a12:	a803      	add	r0, sp, #12
   b6a14:	f001 f885 	bl	b7b22 <memset>
    if (ip.version() == 4) {
   b6a18:	7d23      	ldrb	r3, [r4, #20]
   b6a1a:	2b04      	cmp	r3, #4
   b6a1c:	d11d      	bne.n	b6a5a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6a1e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6a22:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6a24:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6a28:	f7fe fbbe 	bl	b51a8 <inet_htons>
   b6a2c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6a30:	6860      	ldr	r0, [r4, #4]
   b6a32:	f7fe fbb1 	bl	b5198 <inet_htonl>
   b6a36:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6a38:	696b      	ldr	r3, [r5, #20]
   b6a3a:	221c      	movs	r2, #28
   b6a3c:	6818      	ldr	r0, [r3, #0]
   b6a3e:	a903      	add	r1, sp, #12
   b6a40:	f7fe fc42 	bl	b52c8 <sock_connect>
   b6a44:	2800      	cmp	r0, #0
   b6a46:	d1be      	bne.n	b69c6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6a48:	3404      	adds	r4, #4
   b6a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6a4c:	696d      	ldr	r5, [r5, #20]
   b6a4e:	358c      	adds	r5, #140	; 0x8c
   b6a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6a52:	6823      	ldr	r3, [r4, #0]
   b6a54:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6a56:	2401      	movs	r4, #1
   b6a58:	e7ba      	b.n	b69d0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6a5a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6a5e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6a60:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6a64:	f7fe fba0 	bl	b51a8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6a68:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6a6a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6a6e:	1d23      	adds	r3, r4, #4
   b6a70:	f104 0714 	add.w	r7, r4, #20
   b6a74:	6818      	ldr	r0, [r3, #0]
   b6a76:	6859      	ldr	r1, [r3, #4]
   b6a78:	4632      	mov	r2, r6
   b6a7a:	c203      	stmia	r2!, {r0, r1}
   b6a7c:	3308      	adds	r3, #8
   b6a7e:	42bb      	cmp	r3, r7
   b6a80:	4616      	mov	r6, r2
   b6a82:	d1f7      	bne.n	b6a74 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6a84:	e7d8      	b.n	b6a38 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6a88 <_ZN9TCPClient9availableEv>:
{
   b6a88:	b530      	push	{r4, r5, lr}
   b6a8a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6a8c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6a90:	b08b      	sub	sp, #44	; 0x2c
   b6a92:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6a94:	b12b      	cbz	r3, b6aa2 <_ZN9TCPClient9availableEv+0x1a>
   b6a96:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6a9a:	429a      	cmp	r2, r3
   b6a9c:	d101      	bne.n	b6aa2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6a9e:	f7ff ff6f 	bl	b6980 <_ZN9TCPClient12flush_bufferEv>
   b6aa2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6aa4:	6808      	ldr	r0, [r1, #0]
   b6aa6:	2800      	cmp	r0, #0
   b6aa8:	db18      	blt.n	b6adc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6aaa:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6aae:	2d7f      	cmp	r5, #127	; 0x7f
   b6ab0:	d814      	bhi.n	b6adc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6ab2:	3104      	adds	r1, #4
   b6ab4:	2308      	movs	r3, #8
   b6ab6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6aba:	4429      	add	r1, r5
   b6abc:	f7fe fc0c 	bl	b52d8 <sock_recv>
            if (ret > 0) {
   b6ac0:	2800      	cmp	r0, #0
   b6ac2:	dd13      	ble.n	b6aec <_ZN9TCPClient9availableEv+0x64>
   b6ac4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6ac6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6aca:	b90a      	cbnz	r2, b6ad0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6acc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6ad0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6ad2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6ad6:	4410      	add	r0, r2
   b6ad8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6adc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6ade:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6ae2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6ae6:	1ac0      	subs	r0, r0, r3
   b6ae8:	b00b      	add	sp, #44	; 0x2c
   b6aea:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6aec:	f7fe fd70 	bl	b55d0 <__errno>
   b6af0:	6803      	ldr	r3, [r0, #0]
   b6af2:	2b0b      	cmp	r3, #11
   b6af4:	d0f2      	beq.n	b6adc <_ZN9TCPClient9availableEv+0x54>
   b6af6:	f7fe fd6b 	bl	b55d0 <__errno>
   b6afa:	6803      	ldr	r3, [r0, #0]
   b6afc:	2b0b      	cmp	r3, #11
   b6afe:	d0ed      	beq.n	b6adc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6b00:	2320      	movs	r3, #32
   b6b02:	2500      	movs	r5, #0
   b6b04:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6b08:	f7fe fd62 	bl	b55d0 <__errno>
   b6b0c:	6803      	ldr	r3, [r0, #0]
   b6b0e:	9301      	str	r3, [sp, #4]
   b6b10:	4b08      	ldr	r3, [pc, #32]	; (b6b34 <_ZN9TCPClient9availableEv+0xac>)
   b6b12:	4909      	ldr	r1, [pc, #36]	; (b6b38 <_ZN9TCPClient9availableEv+0xb0>)
   b6b14:	9300      	str	r3, [sp, #0]
   b6b16:	aa02      	add	r2, sp, #8
   b6b18:	462b      	mov	r3, r5
   b6b1a:	2032      	movs	r0, #50	; 0x32
   b6b1c:	f7fe fc34 	bl	b5388 <log_message>
                    sock_close(d_->sock);
   b6b20:	6963      	ldr	r3, [r4, #20]
   b6b22:	6818      	ldr	r0, [r3, #0]
   b6b24:	f7fe fbc8 	bl	b52b8 <sock_close>
   b6b28:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6b2a:	f04f 32ff 	mov.w	r2, #4294967295
   b6b2e:	601a      	str	r2, [r3, #0]
   b6b30:	e7d4      	b.n	b6adc <_ZN9TCPClient9availableEv+0x54>
   b6b32:	bf00      	nop
   b6b34:	000b9f83 	.word	0x000b9f83
   b6b38:	000b9f7c 	.word	0x000b9f7c

000b6b3c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6b3c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6b3e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6b40:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6b42:	6818      	ldr	r0, [r3, #0]
   b6b44:	2800      	cmp	r0, #0
   b6b46:	db01      	blt.n	b6b4c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6b48:	f7fe fbb6 	bl	b52b8 <sock_close>
   b6b4c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6b4e:	f04f 32ff 	mov.w	r2, #4294967295
   b6b52:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6b54:	6960      	ldr	r0, [r4, #20]
   b6b56:	2211      	movs	r2, #17
   b6b58:	2100      	movs	r1, #0
   b6b5a:	308c      	adds	r0, #140	; 0x8c
   b6b5c:	f000 ffe1 	bl	b7b22 <memset>
    flush_buffer();
   b6b60:	4620      	mov	r0, r4
}
   b6b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6b66:	f7ff bf0b 	b.w	b6980 <_ZN9TCPClient12flush_bufferEv>

000b6b6a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6b6a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6b6c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6b6e:	4604      	mov	r4, r0
          total(0) {
   b6b70:	6001      	str	r1, [r0, #0]
   b6b72:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6b76:	3088      	adds	r0, #136	; 0x88
   b6b78:	f7ff fbce 	bl	b6318 <_ZN9IPAddressC1Ev>
}
   b6b7c:	4620      	mov	r0, r4
   b6b7e:	bd10      	pop	{r4, pc}

000b6b80 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6b80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6b82:	2300      	movs	r3, #0
   b6b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6b88:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6b8c:	4a0e      	ldr	r2, [pc, #56]	; (b6bc8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6b8e:	6103      	str	r3, [r0, #16]
   b6b90:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6b92:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6b94:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6b96:	20ac      	movs	r0, #172	; 0xac
   b6b98:	9101      	str	r1, [sp, #4]
   b6b9a:	f7fd fa7c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6b9e:	1e05      	subs	r5, r0, #0
   b6ba0:	f105 060c 	add.w	r6, r5, #12
   b6ba4:	d008      	beq.n	b6bb8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6ba6:	2301      	movs	r3, #1
   b6ba8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6bac:	4b07      	ldr	r3, [pc, #28]	; (b6bcc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6bae:	9901      	ldr	r1, [sp, #4]
   b6bb0:	602b      	str	r3, [r5, #0]
   b6bb2:	4630      	mov	r0, r6
   b6bb4:	f7ff ffd9 	bl	b6b6a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6bb8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6bba:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6bbe:	f7ff fedf 	bl	b6980 <_ZN9TCPClient12flush_bufferEv>
}
   b6bc2:	b002      	add	sp, #8
   b6bc4:	bd70      	pop	{r4, r5, r6, pc}
   b6bc6:	bf00      	nop
   b6bc8:	000b9fb8 	.word	0x000b9fb8
   b6bcc:	000b9f9c 	.word	0x000b9f9c

000b6bd0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6bd0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6bd2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6bd6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6bd8:	f7ff ffd2 	bl	b6b80 <_ZN9TCPClientC1Ei>
}
   b6bdc:	4620      	mov	r0, r4
   b6bde:	bd10      	pop	{r4, pc}

000b6be0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6be0:	b510      	push	{r4, lr}
   b6be2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6be4:	6800      	ldr	r0, [r0, #0]
   b6be6:	2800      	cmp	r0, #0
   b6be8:	db01      	blt.n	b6bee <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6bea:	f7fe fb65 	bl	b52b8 <sock_close>
    }
}
   b6bee:	4620      	mov	r0, r4
   b6bf0:	bd10      	pop	{r4, pc}

000b6bf2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6bf2:	300c      	adds	r0, #12
   b6bf4:	f7ff bff4 	b.w	b6be0 <_ZN9TCPClient4DataD1Ev>

000b6bf8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6bf8:	2200      	movs	r2, #0
   b6bfa:	6840      	ldr	r0, [r0, #4]
   b6bfc:	4611      	mov	r1, r2
   b6bfe:	f7fe bc27 	b.w	b5450 <network_ready>

000b6c02 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6c02:	2200      	movs	r2, #0
   b6c04:	6840      	ldr	r0, [r0, #4]
   b6c06:	4611      	mov	r1, r2
   b6c08:	f7fe bc42 	b.w	b5490 <network_listening>

000b6c0c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6c0c:	2200      	movs	r2, #0
   b6c0e:	6840      	ldr	r0, [r0, #4]
   b6c10:	4611      	mov	r1, r2
   b6c12:	f7fe bc4d 	b.w	b54b0 <network_get_listen_timeout>

000b6c16 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6c16:	6840      	ldr	r0, [r0, #4]
   b6c18:	2200      	movs	r2, #0
   b6c1a:	f7fe bc41 	b.w	b54a0 <network_set_listen_timeout>

000b6c1e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6c1e:	6840      	ldr	r0, [r0, #4]
   b6c20:	2200      	movs	r2, #0
   b6c22:	f081 0101 	eor.w	r1, r1, #1
   b6c26:	f7fe bc2b 	b.w	b5480 <network_listen>

000b6c2a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6c2a:	2300      	movs	r3, #0
   b6c2c:	6840      	ldr	r0, [r0, #4]
   b6c2e:	461a      	mov	r2, r3
   b6c30:	4619      	mov	r1, r3
   b6c32:	f7fe bc1d 	b.w	b5470 <network_off>

000b6c36 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6c36:	2300      	movs	r3, #0
   b6c38:	6840      	ldr	r0, [r0, #4]
   b6c3a:	461a      	mov	r2, r3
   b6c3c:	4619      	mov	r1, r3
   b6c3e:	f7fe bc0f 	b.w	b5460 <network_on>

000b6c42 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6c42:	2200      	movs	r2, #0
   b6c44:	6840      	ldr	r0, [r0, #4]
   b6c46:	4611      	mov	r1, r2
   b6c48:	f7fe bbf2 	b.w	b5430 <network_connecting>

000b6c4c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6c4c:	6840      	ldr	r0, [r0, #4]
   b6c4e:	2200      	movs	r2, #0
   b6c50:	2102      	movs	r1, #2
   b6c52:	f7fe bbf5 	b.w	b5440 <network_disconnect>

000b6c56 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6c56:	2300      	movs	r3, #0
   b6c58:	6840      	ldr	r0, [r0, #4]
   b6c5a:	461a      	mov	r2, r3
   b6c5c:	f7fe bbe0 	b.w	b5420 <network_connect>

000b6c60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6c60:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6c62:	2204      	movs	r2, #4
   b6c64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6c66:	4a02      	ldr	r2, [pc, #8]	; (b6c70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6c68:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6c6a:	4770      	bx	lr
   b6c6c:	2003e710 	.word	0x2003e710
   b6c70:	000ba004 	.word	0x000ba004

000b6c74 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6c74:	2300      	movs	r3, #0
   b6c76:	6840      	ldr	r0, [r0, #4]
   b6c78:	461a      	mov	r2, r3
   b6c7a:	f7fe bbd1 	b.w	b5420 <network_connect>

000b6c7e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6c7e:	6840      	ldr	r0, [r0, #4]
   b6c80:	2200      	movs	r2, #0
   b6c82:	2102      	movs	r1, #2
   b6c84:	f7fe bbdc 	b.w	b5440 <network_disconnect>

000b6c88 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6c88:	2200      	movs	r2, #0
   b6c8a:	6840      	ldr	r0, [r0, #4]
   b6c8c:	4611      	mov	r1, r2
   b6c8e:	f7fe bbcf 	b.w	b5430 <network_connecting>

000b6c92 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6c92:	2200      	movs	r2, #0
   b6c94:	6840      	ldr	r0, [r0, #4]
   b6c96:	4611      	mov	r1, r2
   b6c98:	f7fe bbda 	b.w	b5450 <network_ready>

000b6c9c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6c9c:	2300      	movs	r3, #0
   b6c9e:	6840      	ldr	r0, [r0, #4]
   b6ca0:	461a      	mov	r2, r3
   b6ca2:	4619      	mov	r1, r3
   b6ca4:	f7fe bbdc 	b.w	b5460 <network_on>

000b6ca8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6ca8:	2300      	movs	r3, #0
   b6caa:	6840      	ldr	r0, [r0, #4]
   b6cac:	461a      	mov	r2, r3
   b6cae:	4619      	mov	r1, r3
   b6cb0:	f7fe bbde 	b.w	b5470 <network_off>

000b6cb4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6cb4:	6840      	ldr	r0, [r0, #4]
   b6cb6:	2100      	movs	r1, #0
   b6cb8:	f7fe bc02 	b.w	b54c0 <network_is_on>

000b6cbc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6cbc:	6840      	ldr	r0, [r0, #4]
   b6cbe:	2100      	movs	r1, #0
   b6cc0:	f7fe bc06 	b.w	b54d0 <network_is_off>

000b6cc4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6cc4:	6840      	ldr	r0, [r0, #4]
   b6cc6:	2200      	movs	r2, #0
   b6cc8:	f081 0101 	eor.w	r1, r1, #1
   b6ccc:	f7fe bbd8 	b.w	b5480 <network_listen>

000b6cd0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6cd0:	6840      	ldr	r0, [r0, #4]
   b6cd2:	2200      	movs	r2, #0
   b6cd4:	f7fe bbe4 	b.w	b54a0 <network_set_listen_timeout>

000b6cd8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6cd8:	2200      	movs	r2, #0
   b6cda:	6840      	ldr	r0, [r0, #4]
   b6cdc:	4611      	mov	r1, r2
   b6cde:	f7fe bbe7 	b.w	b54b0 <network_get_listen_timeout>

000b6ce2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6ce2:	2200      	movs	r2, #0
   b6ce4:	6840      	ldr	r0, [r0, #4]
   b6ce6:	4611      	mov	r1, r2
   b6ce8:	f7fe bbd2 	b.w	b5490 <network_listening>

000b6cec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6cf0:	b095      	sub	sp, #84	; 0x54
   b6cf2:	4614      	mov	r4, r2
   b6cf4:	460d      	mov	r5, r1
   b6cf6:	4607      	mov	r7, r0
    IPAddress addr;
   b6cf8:	f7ff fb0e 	bl	b6318 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6cfc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6cfe:	221c      	movs	r2, #28
   b6d00:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6d02:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6d04:	f000 ff0d 	bl	b7b22 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6d08:	2340      	movs	r3, #64	; 0x40
   b6d0a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6d0c:	4620      	mov	r0, r4
   b6d0e:	466b      	mov	r3, sp
   b6d10:	aa0c      	add	r2, sp, #48	; 0x30
   b6d12:	2100      	movs	r1, #0
   b6d14:	f7fe f9d0 	bl	b50b8 <netdb_getaddrinfo>
    if (!r) {
   b6d18:	4604      	mov	r4, r0
   b6d1a:	2800      	cmp	r0, #0
   b6d1c:	d14b      	bne.n	b6db6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6d1e:	4602      	mov	r2, r0
   b6d20:	2101      	movs	r1, #1
   b6d22:	6868      	ldr	r0, [r5, #4]
   b6d24:	f7fe fb94 	bl	b5450 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d28:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6d2a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d2c:	4622      	mov	r2, r4
   b6d2e:	6868      	ldr	r0, [r5, #4]
   b6d30:	f7fe fb8e 	bl	b5450 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d34:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d36:	4681      	mov	r9, r0
        bool ok = false;
   b6d38:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d3a:	2e00      	cmp	r6, #0
   b6d3c:	d03b      	beq.n	b6db6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6d3e:	2900      	cmp	r1, #0
   b6d40:	d139      	bne.n	b6db6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6d42:	6873      	ldr	r3, [r6, #4]
   b6d44:	2b02      	cmp	r3, #2
   b6d46:	d003      	beq.n	b6d50 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6d48:	2b0a      	cmp	r3, #10
   b6d4a:	d011      	beq.n	b6d70 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d4c:	69f6      	ldr	r6, [r6, #28]
   b6d4e:	e7f4      	b.n	b6d3a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6d50:	f1b8 0f00 	cmp.w	r8, #0
   b6d54:	d0fa      	beq.n	b6d4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6d56:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6d58:	a806      	add	r0, sp, #24
   b6d5a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6d5c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6d5e:	f7ff fb1f 	bl	b63a0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d64:	1d3c      	adds	r4, r7, #4
   b6d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d68:	682b      	ldr	r3, [r5, #0]
   b6d6a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d6c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6d6e:	e7ed      	b.n	b6d4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6d70:	f1b9 0f00 	cmp.w	r9, #0
   b6d74:	d0ea      	beq.n	b6d4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6d76:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6d78:	2210      	movs	r2, #16
   b6d7a:	a801      	add	r0, sp, #4
   b6d7c:	f000 fed1 	bl	b7b22 <memset>
                    a.v = 6;
   b6d80:	2306      	movs	r3, #6
   b6d82:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6d86:	ad01      	add	r5, sp, #4
   b6d88:	f104 0308 	add.w	r3, r4, #8
   b6d8c:	3418      	adds	r4, #24
   b6d8e:	6818      	ldr	r0, [r3, #0]
   b6d90:	6859      	ldr	r1, [r3, #4]
   b6d92:	462a      	mov	r2, r5
   b6d94:	c203      	stmia	r2!, {r0, r1}
   b6d96:	3308      	adds	r3, #8
   b6d98:	42a3      	cmp	r3, r4
   b6d9a:	4615      	mov	r5, r2
   b6d9c:	d1f7      	bne.n	b6d8e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6d9e:	a901      	add	r1, sp, #4
   b6da0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6da2:	ad07      	add	r5, sp, #28
   b6da4:	f7ff fac6 	bl	b6334 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6daa:	1d3c      	adds	r4, r7, #4
   b6dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6dae:	682b      	ldr	r3, [r5, #0]
   b6db0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6db2:	4649      	mov	r1, r9
   b6db4:	e7ca      	b.n	b6d4c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6db6:	9800      	ldr	r0, [sp, #0]
   b6db8:	f7fe f976 	bl	b50a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6dbc:	4638      	mov	r0, r7
   b6dbe:	b015      	add	sp, #84	; 0x54
   b6dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6dc4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6dc4:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6dc6:	4a03      	ldr	r2, [pc, #12]	; (b6dd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6dc8:	601a      	str	r2, [r3, #0]
   b6dca:	2200      	movs	r2, #0
   b6dcc:	605a      	str	r2, [r3, #4]

} // spark
   b6dce:	4770      	bx	lr
   b6dd0:	2003e718 	.word	0x2003e718
   b6dd4:	000ba040 	.word	0x000ba040

000b6dd8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6dd8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6dda:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6ddc:	d902      	bls.n	b6de4 <pinAvailable+0xc>
    return false;
   b6dde:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6de0:	b002      	add	sp, #8
   b6de2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6de4:	f1a0 030b 	sub.w	r3, r0, #11
   b6de8:	2b02      	cmp	r3, #2
   b6dea:	d81a      	bhi.n	b6e22 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6dec:	4c17      	ldr	r4, [pc, #92]	; (b6e4c <pinAvailable+0x74>)
   b6dee:	7821      	ldrb	r1, [r4, #0]
   b6df0:	f3bf 8f5b 	dmb	ish
   b6df4:	f011 0101 	ands.w	r1, r1, #1
   b6df8:	d10b      	bne.n	b6e12 <pinAvailable+0x3a>
   b6dfa:	4620      	mov	r0, r4
   b6dfc:	9101      	str	r1, [sp, #4]
   b6dfe:	f7fd f952 	bl	b40a6 <__cxa_guard_acquire>
   b6e02:	9901      	ldr	r1, [sp, #4]
   b6e04:	b128      	cbz	r0, b6e12 <pinAvailable+0x3a>
   b6e06:	4812      	ldr	r0, [pc, #72]	; (b6e50 <pinAvailable+0x78>)
   b6e08:	f7fe fc40 	bl	b568c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6e0c:	4620      	mov	r0, r4
   b6e0e:	f7fd f94f 	bl	b40b0 <__cxa_guard_release>
   b6e12:	4b0f      	ldr	r3, [pc, #60]	; (b6e50 <pinAvailable+0x78>)
   b6e14:	7818      	ldrb	r0, [r3, #0]
   b6e16:	f7fe fa7f 	bl	b5318 <hal_spi_is_enabled>
   b6e1a:	2800      	cmp	r0, #0
   b6e1c:	d1df      	bne.n	b6dde <pinAvailable+0x6>
  return true; // 'pin' is available
   b6e1e:	2001      	movs	r0, #1
   b6e20:	e7de      	b.n	b6de0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6e22:	2801      	cmp	r0, #1
   b6e24:	d809      	bhi.n	b6e3a <pinAvailable+0x62>
   b6e26:	f000 f87d 	bl	b6f24 <_Z19__fetch_global_Wirev>
   b6e2a:	2100      	movs	r1, #0
   b6e2c:	7c00      	ldrb	r0, [r0, #16]
   b6e2e:	f7fe fa2b 	bl	b5288 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6e32:	f080 0001 	eor.w	r0, r0, #1
   b6e36:	b2c0      	uxtb	r0, r0
   b6e38:	e7d2      	b.n	b6de0 <pinAvailable+0x8>
   b6e3a:	3809      	subs	r0, #9
   b6e3c:	2801      	cmp	r0, #1
   b6e3e:	d8ee      	bhi.n	b6e1e <pinAvailable+0x46>
   b6e40:	f000 f834 	bl	b6eac <_Z22__fetch_global_Serial1v>
   b6e44:	7c00      	ldrb	r0, [r0, #16]
   b6e46:	f7fe f9df 	bl	b5208 <hal_usart_is_enabled>
   b6e4a:	e7f2      	b.n	b6e32 <pinAvailable+0x5a>
   b6e4c:	2003e720 	.word	0x2003e720
   b6e50:	2003e724 	.word	0x2003e724

000b6e54 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6e54:	2823      	cmp	r0, #35	; 0x23
{
   b6e56:	b538      	push	{r3, r4, r5, lr}
   b6e58:	4604      	mov	r4, r0
   b6e5a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6e5c:	d80a      	bhi.n	b6e74 <pinMode+0x20>
   b6e5e:	29ff      	cmp	r1, #255	; 0xff
   b6e60:	d008      	beq.n	b6e74 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6e62:	f7ff ffb9 	bl	b6dd8 <pinAvailable>
   b6e66:	b128      	cbz	r0, b6e74 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6e68:	4629      	mov	r1, r5
   b6e6a:	4620      	mov	r0, r4
}
   b6e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6e70:	f7fe b92a 	b.w	b50c8 <HAL_Pin_Mode>
}
   b6e74:	bd38      	pop	{r3, r4, r5, pc}

000b6e76 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6e76:	4770      	bx	lr

000b6e78 <_Z20acquireSerial1Bufferv>:
{
   b6e78:	b538      	push	{r3, r4, r5, lr}
   b6e7a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6e7c:	2514      	movs	r5, #20
   b6e7e:	462a      	mov	r2, r5
   b6e80:	2100      	movs	r1, #0
   b6e82:	f000 fe4e 	bl	b7b22 <memset>
   b6e86:	8025      	strh	r5, [r4, #0]
   b6e88:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6e8a:	4907      	ldr	r1, [pc, #28]	; (b6ea8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6e8c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6e8e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6e90:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6e92:	f000 f86b 	bl	b6f6c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6e96:	4904      	ldr	r1, [pc, #16]	; (b6ea8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6e98:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6e9a:	4628      	mov	r0, r5
   b6e9c:	f000 f866 	bl	b6f6c <_ZnajRKSt9nothrow_t>
    };
   b6ea0:	60e0      	str	r0, [r4, #12]
}
   b6ea2:	4620      	mov	r0, r4
   b6ea4:	bd38      	pop	{r3, r4, r5, pc}
   b6ea6:	bf00      	nop
   b6ea8:	000ba074 	.word	0x000ba074

000b6eac <_Z22__fetch_global_Serial1v>:
{
   b6eac:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6eae:	4d0e      	ldr	r5, [pc, #56]	; (b6ee8 <_Z22__fetch_global_Serial1v+0x3c>)
   b6eb0:	7829      	ldrb	r1, [r5, #0]
   b6eb2:	f3bf 8f5b 	dmb	ish
   b6eb6:	f011 0401 	ands.w	r4, r1, #1
{
   b6eba:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6ebc:	d111      	bne.n	b6ee2 <_Z22__fetch_global_Serial1v+0x36>
   b6ebe:	4628      	mov	r0, r5
   b6ec0:	f7fd f8f1 	bl	b40a6 <__cxa_guard_acquire>
   b6ec4:	b168      	cbz	r0, b6ee2 <_Z22__fetch_global_Serial1v+0x36>
   b6ec6:	a801      	add	r0, sp, #4
   b6ec8:	f7ff ffd6 	bl	b6e78 <_Z20acquireSerial1Bufferv>
   b6ecc:	aa01      	add	r2, sp, #4
   b6ece:	4621      	mov	r1, r4
   b6ed0:	4806      	ldr	r0, [pc, #24]	; (b6eec <_Z22__fetch_global_Serial1v+0x40>)
   b6ed2:	f7ff fb5f 	bl	b6594 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6ed6:	4628      	mov	r0, r5
   b6ed8:	f7fd f8ea 	bl	b40b0 <__cxa_guard_release>
   b6edc:	4804      	ldr	r0, [pc, #16]	; (b6ef0 <_Z22__fetch_global_Serial1v+0x44>)
   b6ede:	f000 fdf1 	bl	b7ac4 <atexit>
    return serial1;
}
   b6ee2:	4802      	ldr	r0, [pc, #8]	; (b6eec <_Z22__fetch_global_Serial1v+0x40>)
   b6ee4:	b007      	add	sp, #28
   b6ee6:	bd30      	pop	{r4, r5, pc}
   b6ee8:	2003e72c 	.word	0x2003e72c
   b6eec:	2003e730 	.word	0x2003e730
   b6ef0:	000b6e77 	.word	0x000b6e77

000b6ef4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6ef4:	4770      	bx	lr
	...

000b6ef8 <_Z17acquireWireBufferv>:
{
   b6ef8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6efa:	2520      	movs	r5, #32
   b6efc:	2314      	movs	r3, #20
{
   b6efe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6f00:	6003      	str	r3, [r0, #0]
   b6f02:	6085      	str	r5, [r0, #8]
   b6f04:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6f06:	4906      	ldr	r1, [pc, #24]	; (b6f20 <_Z17acquireWireBufferv+0x28>)
   b6f08:	4628      	mov	r0, r5
   b6f0a:	f000 f82f 	bl	b6f6c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6f0e:	4904      	ldr	r1, [pc, #16]	; (b6f20 <_Z17acquireWireBufferv+0x28>)
	};
   b6f10:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6f12:	4628      	mov	r0, r5
   b6f14:	f000 f82a 	bl	b6f6c <_ZnajRKSt9nothrow_t>
	};
   b6f18:	60e0      	str	r0, [r4, #12]
}
   b6f1a:	4620      	mov	r0, r4
   b6f1c:	bd38      	pop	{r3, r4, r5, pc}
   b6f1e:	bf00      	nop
   b6f20:	000ba074 	.word	0x000ba074

000b6f24 <_Z19__fetch_global_Wirev>:
{
   b6f24:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6f26:	4d0e      	ldr	r5, [pc, #56]	; (b6f60 <_Z19__fetch_global_Wirev+0x3c>)
   b6f28:	7829      	ldrb	r1, [r5, #0]
   b6f2a:	f3bf 8f5b 	dmb	ish
   b6f2e:	f011 0401 	ands.w	r4, r1, #1
{
   b6f32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6f34:	d111      	bne.n	b6f5a <_Z19__fetch_global_Wirev+0x36>
   b6f36:	4628      	mov	r0, r5
   b6f38:	f7fd f8b5 	bl	b40a6 <__cxa_guard_acquire>
   b6f3c:	b168      	cbz	r0, b6f5a <_Z19__fetch_global_Wirev+0x36>
   b6f3e:	a801      	add	r0, sp, #4
   b6f40:	f7ff ffda 	bl	b6ef8 <_Z17acquireWireBufferv>
   b6f44:	aa01      	add	r2, sp, #4
   b6f46:	4621      	mov	r1, r4
   b6f48:	4806      	ldr	r0, [pc, #24]	; (b6f64 <_Z19__fetch_global_Wirev+0x40>)
   b6f4a:	f7ff fb77 	bl	b663c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6f4e:	4628      	mov	r0, r5
   b6f50:	f7fd f8ae 	bl	b40b0 <__cxa_guard_release>
   b6f54:	4804      	ldr	r0, [pc, #16]	; (b6f68 <_Z19__fetch_global_Wirev+0x44>)
   b6f56:	f000 fdb5 	bl	b7ac4 <atexit>
	return wire;
}
   b6f5a:	4802      	ldr	r0, [pc, #8]	; (b6f64 <_Z19__fetch_global_Wirev+0x40>)
   b6f5c:	b007      	add	sp, #28
   b6f5e:	bd30      	pop	{r4, r5, pc}
   b6f60:	2003e748 	.word	0x2003e748
   b6f64:	2003e74c 	.word	0x2003e74c
   b6f68:	000b6ef5 	.word	0x000b6ef5

000b6f6c <_ZnajRKSt9nothrow_t>:
   b6f6c:	f7fd b895 	b.w	b409a <_Znaj>

000b6f70 <_ZSt25__throw_bad_function_callv>:
   b6f70:	b508      	push	{r3, lr}
   b6f72:	f7fe fb1d 	bl	b55b0 <abort>
	...

000b6f78 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6f78:	4901      	ldr	r1, [pc, #4]	; (b6f80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6f7a:	f000 b8f9 	b.w	b7170 <_ZNKSt9type_infoeqERKS_>
   b6f7e:	bf00      	nop
   b6f80:	000ba090 	.word	0x000ba090

000b6f84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6f84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6f86:	2400      	movs	r4, #0
   b6f88:	2310      	movs	r3, #16
   b6f8a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6f8e:	6803      	ldr	r3, [r0, #0]
   b6f90:	4615      	mov	r5, r2
   b6f92:	699e      	ldr	r6, [r3, #24]
   b6f94:	6812      	ldr	r2, [r2, #0]
   b6f96:	466b      	mov	r3, sp
   b6f98:	e9cd 4400 	strd	r4, r4, [sp]
   b6f9c:	47b0      	blx	r6
   b6f9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6fa2:	f003 0306 	and.w	r3, r3, #6
   b6fa6:	2b06      	cmp	r3, #6
   b6fa8:	bf03      	ittte	eq
   b6faa:	9b00      	ldreq	r3, [sp, #0]
   b6fac:	602b      	streq	r3, [r5, #0]
   b6fae:	2001      	moveq	r0, #1
   b6fb0:	4620      	movne	r0, r4
   b6fb2:	b004      	add	sp, #16
   b6fb4:	bd70      	pop	{r4, r5, r6, pc}

000b6fb6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6fb6:	9800      	ldr	r0, [sp, #0]
   b6fb8:	4290      	cmp	r0, r2
   b6fba:	bf14      	ite	ne
   b6fbc:	2001      	movne	r0, #1
   b6fbe:	2006      	moveq	r0, #6
   b6fc0:	4770      	bx	lr
	...

000b6fc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6fc4:	b510      	push	{r4, lr}
   b6fc6:	4b03      	ldr	r3, [pc, #12]	; (b6fd4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6fc8:	6003      	str	r3, [r0, #0]
   b6fca:	4604      	mov	r4, r0
   b6fcc:	f000 f8cd 	bl	b716a <_ZNSt9type_infoD1Ev>
   b6fd0:	4620      	mov	r0, r4
   b6fd2:	bd10      	pop	{r4, pc}
   b6fd4:	000ba0d0 	.word	0x000ba0d0

000b6fd8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6fd8:	b510      	push	{r4, lr}
   b6fda:	4604      	mov	r4, r0
   b6fdc:	f7ff fff2 	bl	b6fc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6fe0:	4620      	mov	r0, r4
   b6fe2:	2108      	movs	r1, #8
   b6fe4:	f7fd f85d 	bl	b40a2 <_ZdlPvj>
   b6fe8:	4620      	mov	r0, r4
   b6fea:	bd10      	pop	{r4, pc}

000b6fec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ff0:	461f      	mov	r7, r3
   b6ff2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6ff6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6ffa:	4598      	cmp	r8, r3
   b6ffc:	4606      	mov	r6, r0
   b6ffe:	4615      	mov	r5, r2
   b7000:	d107      	bne.n	b7012 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7002:	9907      	ldr	r1, [sp, #28]
   b7004:	f000 f8b4 	bl	b7170 <_ZNKSt9type_infoeqERKS_>
   b7008:	b118      	cbz	r0, b7012 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b700a:	7165      	strb	r5, [r4, #5]
   b700c:	2000      	movs	r0, #0
   b700e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7012:	4639      	mov	r1, r7
   b7014:	4630      	mov	r0, r6
   b7016:	f000 f8ab 	bl	b7170 <_ZNKSt9type_infoeqERKS_>
   b701a:	2800      	cmp	r0, #0
   b701c:	d0f6      	beq.n	b700c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b701e:	2301      	movs	r3, #1
   b7020:	f8c4 8000 	str.w	r8, [r4]
   b7024:	7125      	strb	r5, [r4, #4]
   b7026:	71a3      	strb	r3, [r4, #6]
   b7028:	e7f0      	b.n	b700c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b702a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b702a:	b538      	push	{r3, r4, r5, lr}
   b702c:	4615      	mov	r5, r2
   b702e:	461c      	mov	r4, r3
   b7030:	f000 f89e 	bl	b7170 <_ZNKSt9type_infoeqERKS_>
   b7034:	b120      	cbz	r0, b7040 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7036:	2308      	movs	r3, #8
   b7038:	60e3      	str	r3, [r4, #12]
   b703a:	2306      	movs	r3, #6
   b703c:	6025      	str	r5, [r4, #0]
   b703e:	7123      	strb	r3, [r4, #4]
   b7040:	bd38      	pop	{r3, r4, r5, pc}

000b7042 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7042:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7044:	4605      	mov	r5, r0
   b7046:	460c      	mov	r4, r1
   b7048:	9201      	str	r2, [sp, #4]
   b704a:	461e      	mov	r6, r3
   b704c:	f000 f890 	bl	b7170 <_ZNKSt9type_infoeqERKS_>
   b7050:	b950      	cbnz	r0, b7068 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7052:	2e03      	cmp	r6, #3
   b7054:	d808      	bhi.n	b7068 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7056:	6823      	ldr	r3, [r4, #0]
   b7058:	9a01      	ldr	r2, [sp, #4]
   b705a:	695b      	ldr	r3, [r3, #20]
   b705c:	4629      	mov	r1, r5
   b705e:	4620      	mov	r0, r4
   b7060:	b002      	add	sp, #8
   b7062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7066:	4718      	bx	r3
   b7068:	b002      	add	sp, #8
   b706a:	bd70      	pop	{r4, r5, r6, pc}

000b706c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b706c:	b510      	push	{r4, lr}
   b706e:	4b03      	ldr	r3, [pc, #12]	; (b707c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7070:	6003      	str	r3, [r0, #0]
   b7072:	4604      	mov	r4, r0
   b7074:	f7ff ffa6 	bl	b6fc4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7078:	4620      	mov	r0, r4
   b707a:	bd10      	pop	{r4, pc}
   b707c:	000ba130 	.word	0x000ba130

000b7080 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7080:	b510      	push	{r4, lr}
   b7082:	4604      	mov	r4, r0
   b7084:	f7ff fff2 	bl	b706c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7088:	4620      	mov	r0, r4
   b708a:	210c      	movs	r1, #12
   b708c:	f7fd f809 	bl	b40a2 <_ZdlPvj>
   b7090:	4620      	mov	r0, r4
   b7092:	bd10      	pop	{r4, pc}

000b7094 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7096:	9f08      	ldr	r7, [sp, #32]
   b7098:	4297      	cmp	r7, r2
   b709a:	4605      	mov	r5, r0
   b709c:	460e      	mov	r6, r1
   b709e:	4614      	mov	r4, r2
   b70a0:	d00a      	beq.n	b70b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b70a2:	68a8      	ldr	r0, [r5, #8]
   b70a4:	6802      	ldr	r2, [r0, #0]
   b70a6:	9708      	str	r7, [sp, #32]
   b70a8:	6a15      	ldr	r5, [r2, #32]
   b70aa:	4631      	mov	r1, r6
   b70ac:	4622      	mov	r2, r4
   b70ae:	46ac      	mov	ip, r5
   b70b0:	b003      	add	sp, #12
   b70b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b70b6:	4760      	bx	ip
   b70b8:	4619      	mov	r1, r3
   b70ba:	9301      	str	r3, [sp, #4]
   b70bc:	f000 f858 	bl	b7170 <_ZNKSt9type_infoeqERKS_>
   b70c0:	9b01      	ldr	r3, [sp, #4]
   b70c2:	2800      	cmp	r0, #0
   b70c4:	d0ed      	beq.n	b70a2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b70c6:	2006      	movs	r0, #6
   b70c8:	b003      	add	sp, #12
   b70ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b70cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b70cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b70d0:	460d      	mov	r5, r1
   b70d2:	4619      	mov	r1, r3
   b70d4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b70d8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b70dc:	4681      	mov	r9, r0
   b70de:	4617      	mov	r7, r2
   b70e0:	4698      	mov	r8, r3
   b70e2:	f000 f845 	bl	b7170 <_ZNKSt9type_infoeqERKS_>
   b70e6:	b190      	cbz	r0, b710e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b70e8:	2d00      	cmp	r5, #0
   b70ea:	6034      	str	r4, [r6, #0]
   b70ec:	7137      	strb	r7, [r6, #4]
   b70ee:	db09      	blt.n	b7104 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b70f0:	1961      	adds	r1, r4, r5
   b70f2:	458a      	cmp	sl, r1
   b70f4:	bf0c      	ite	eq
   b70f6:	2106      	moveq	r1, #6
   b70f8:	2101      	movne	r1, #1
   b70fa:	71b1      	strb	r1, [r6, #6]
   b70fc:	2000      	movs	r0, #0
   b70fe:	b001      	add	sp, #4
   b7100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7104:	3502      	adds	r5, #2
   b7106:	d1f9      	bne.n	b70fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7108:	2301      	movs	r3, #1
   b710a:	71b3      	strb	r3, [r6, #6]
   b710c:	e7f6      	b.n	b70fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b710e:	4554      	cmp	r4, sl
   b7110:	d106      	bne.n	b7120 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7112:	4659      	mov	r1, fp
   b7114:	4648      	mov	r0, r9
   b7116:	f000 f82b 	bl	b7170 <_ZNKSt9type_infoeqERKS_>
   b711a:	b108      	cbz	r0, b7120 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b711c:	7177      	strb	r7, [r6, #5]
   b711e:	e7ed      	b.n	b70fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7120:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7124:	6803      	ldr	r3, [r0, #0]
   b7126:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b712a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b712e:	69dc      	ldr	r4, [r3, #28]
   b7130:	463a      	mov	r2, r7
   b7132:	4643      	mov	r3, r8
   b7134:	4629      	mov	r1, r5
   b7136:	46a4      	mov	ip, r4
   b7138:	b001      	add	sp, #4
   b713a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b713e:	4760      	bx	ip

000b7140 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7144:	4607      	mov	r7, r0
   b7146:	460c      	mov	r4, r1
   b7148:	4615      	mov	r5, r2
   b714a:	461e      	mov	r6, r3
   b714c:	f7ff ff6d 	bl	b702a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7150:	b948      	cbnz	r0, b7166 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7152:	68b8      	ldr	r0, [r7, #8]
   b7154:	6803      	ldr	r3, [r0, #0]
   b7156:	699f      	ldr	r7, [r3, #24]
   b7158:	462a      	mov	r2, r5
   b715a:	4633      	mov	r3, r6
   b715c:	4621      	mov	r1, r4
   b715e:	46bc      	mov	ip, r7
   b7160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7164:	4760      	bx	ip
   b7166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b716a <_ZNSt9type_infoD1Ev>:
   b716a:	4770      	bx	lr

000b716c <_ZNKSt9type_info14__is_pointer_pEv>:
   b716c:	2000      	movs	r0, #0
   b716e:	4770      	bx	lr

000b7170 <_ZNKSt9type_infoeqERKS_>:
   b7170:	4281      	cmp	r1, r0
   b7172:	b508      	push	{r3, lr}
   b7174:	d00e      	beq.n	b7194 <_ZNKSt9type_infoeqERKS_+0x24>
   b7176:	6840      	ldr	r0, [r0, #4]
   b7178:	7803      	ldrb	r3, [r0, #0]
   b717a:	2b2a      	cmp	r3, #42	; 0x2a
   b717c:	d00c      	beq.n	b7198 <_ZNKSt9type_infoeqERKS_+0x28>
   b717e:	6849      	ldr	r1, [r1, #4]
   b7180:	780b      	ldrb	r3, [r1, #0]
   b7182:	2b2a      	cmp	r3, #42	; 0x2a
   b7184:	bf08      	it	eq
   b7186:	3101      	addeq	r1, #1
   b7188:	f000 fd11 	bl	b7bae <strcmp>
   b718c:	fab0 f080 	clz	r0, r0
   b7190:	0940      	lsrs	r0, r0, #5
   b7192:	bd08      	pop	{r3, pc}
   b7194:	2001      	movs	r0, #1
   b7196:	e7fc      	b.n	b7192 <_ZNKSt9type_infoeqERKS_+0x22>
   b7198:	2000      	movs	r0, #0
   b719a:	e7fa      	b.n	b7192 <_ZNKSt9type_infoeqERKS_+0x22>

000b719c <__aeabi_drsub>:
   b719c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b71a0:	e002      	b.n	b71a8 <__adddf3>
   b71a2:	bf00      	nop

000b71a4 <__aeabi_dsub>:
   b71a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b71a8 <__adddf3>:
   b71a8:	b530      	push	{r4, r5, lr}
   b71aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b71ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b71b2:	ea94 0f05 	teq	r4, r5
   b71b6:	bf08      	it	eq
   b71b8:	ea90 0f02 	teqeq	r0, r2
   b71bc:	bf1f      	itttt	ne
   b71be:	ea54 0c00 	orrsne.w	ip, r4, r0
   b71c2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b71c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b71ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b71ce:	f000 80e2 	beq.w	b7396 <__adddf3+0x1ee>
   b71d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b71d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b71da:	bfb8      	it	lt
   b71dc:	426d      	neglt	r5, r5
   b71de:	dd0c      	ble.n	b71fa <__adddf3+0x52>
   b71e0:	442c      	add	r4, r5
   b71e2:	ea80 0202 	eor.w	r2, r0, r2
   b71e6:	ea81 0303 	eor.w	r3, r1, r3
   b71ea:	ea82 0000 	eor.w	r0, r2, r0
   b71ee:	ea83 0101 	eor.w	r1, r3, r1
   b71f2:	ea80 0202 	eor.w	r2, r0, r2
   b71f6:	ea81 0303 	eor.w	r3, r1, r3
   b71fa:	2d36      	cmp	r5, #54	; 0x36
   b71fc:	bf88      	it	hi
   b71fe:	bd30      	pophi	{r4, r5, pc}
   b7200:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7204:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7208:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b720c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7210:	d002      	beq.n	b7218 <__adddf3+0x70>
   b7212:	4240      	negs	r0, r0
   b7214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7218:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b721c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7220:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7224:	d002      	beq.n	b722c <__adddf3+0x84>
   b7226:	4252      	negs	r2, r2
   b7228:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b722c:	ea94 0f05 	teq	r4, r5
   b7230:	f000 80a7 	beq.w	b7382 <__adddf3+0x1da>
   b7234:	f1a4 0401 	sub.w	r4, r4, #1
   b7238:	f1d5 0e20 	rsbs	lr, r5, #32
   b723c:	db0d      	blt.n	b725a <__adddf3+0xb2>
   b723e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7242:	fa22 f205 	lsr.w	r2, r2, r5
   b7246:	1880      	adds	r0, r0, r2
   b7248:	f141 0100 	adc.w	r1, r1, #0
   b724c:	fa03 f20e 	lsl.w	r2, r3, lr
   b7250:	1880      	adds	r0, r0, r2
   b7252:	fa43 f305 	asr.w	r3, r3, r5
   b7256:	4159      	adcs	r1, r3
   b7258:	e00e      	b.n	b7278 <__adddf3+0xd0>
   b725a:	f1a5 0520 	sub.w	r5, r5, #32
   b725e:	f10e 0e20 	add.w	lr, lr, #32
   b7262:	2a01      	cmp	r2, #1
   b7264:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7268:	bf28      	it	cs
   b726a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b726e:	fa43 f305 	asr.w	r3, r3, r5
   b7272:	18c0      	adds	r0, r0, r3
   b7274:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7278:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b727c:	d507      	bpl.n	b728e <__adddf3+0xe6>
   b727e:	f04f 0e00 	mov.w	lr, #0
   b7282:	f1dc 0c00 	rsbs	ip, ip, #0
   b7286:	eb7e 0000 	sbcs.w	r0, lr, r0
   b728a:	eb6e 0101 	sbc.w	r1, lr, r1
   b728e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7292:	d31b      	bcc.n	b72cc <__adddf3+0x124>
   b7294:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7298:	d30c      	bcc.n	b72b4 <__adddf3+0x10c>
   b729a:	0849      	lsrs	r1, r1, #1
   b729c:	ea5f 0030 	movs.w	r0, r0, rrx
   b72a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b72a4:	f104 0401 	add.w	r4, r4, #1
   b72a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b72ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b72b0:	f080 809a 	bcs.w	b73e8 <__adddf3+0x240>
   b72b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b72b8:	bf08      	it	eq
   b72ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b72be:	f150 0000 	adcs.w	r0, r0, #0
   b72c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b72c6:	ea41 0105 	orr.w	r1, r1, r5
   b72ca:	bd30      	pop	{r4, r5, pc}
   b72cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b72d0:	4140      	adcs	r0, r0
   b72d2:	eb41 0101 	adc.w	r1, r1, r1
   b72d6:	3c01      	subs	r4, #1
   b72d8:	bf28      	it	cs
   b72da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b72de:	d2e9      	bcs.n	b72b4 <__adddf3+0x10c>
   b72e0:	f091 0f00 	teq	r1, #0
   b72e4:	bf04      	itt	eq
   b72e6:	4601      	moveq	r1, r0
   b72e8:	2000      	moveq	r0, #0
   b72ea:	fab1 f381 	clz	r3, r1
   b72ee:	bf08      	it	eq
   b72f0:	3320      	addeq	r3, #32
   b72f2:	f1a3 030b 	sub.w	r3, r3, #11
   b72f6:	f1b3 0220 	subs.w	r2, r3, #32
   b72fa:	da0c      	bge.n	b7316 <__adddf3+0x16e>
   b72fc:	320c      	adds	r2, #12
   b72fe:	dd08      	ble.n	b7312 <__adddf3+0x16a>
   b7300:	f102 0c14 	add.w	ip, r2, #20
   b7304:	f1c2 020c 	rsb	r2, r2, #12
   b7308:	fa01 f00c 	lsl.w	r0, r1, ip
   b730c:	fa21 f102 	lsr.w	r1, r1, r2
   b7310:	e00c      	b.n	b732c <__adddf3+0x184>
   b7312:	f102 0214 	add.w	r2, r2, #20
   b7316:	bfd8      	it	le
   b7318:	f1c2 0c20 	rsble	ip, r2, #32
   b731c:	fa01 f102 	lsl.w	r1, r1, r2
   b7320:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7324:	bfdc      	itt	le
   b7326:	ea41 010c 	orrle.w	r1, r1, ip
   b732a:	4090      	lslle	r0, r2
   b732c:	1ae4      	subs	r4, r4, r3
   b732e:	bfa2      	ittt	ge
   b7330:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7334:	4329      	orrge	r1, r5
   b7336:	bd30      	popge	{r4, r5, pc}
   b7338:	ea6f 0404 	mvn.w	r4, r4
   b733c:	3c1f      	subs	r4, #31
   b733e:	da1c      	bge.n	b737a <__adddf3+0x1d2>
   b7340:	340c      	adds	r4, #12
   b7342:	dc0e      	bgt.n	b7362 <__adddf3+0x1ba>
   b7344:	f104 0414 	add.w	r4, r4, #20
   b7348:	f1c4 0220 	rsb	r2, r4, #32
   b734c:	fa20 f004 	lsr.w	r0, r0, r4
   b7350:	fa01 f302 	lsl.w	r3, r1, r2
   b7354:	ea40 0003 	orr.w	r0, r0, r3
   b7358:	fa21 f304 	lsr.w	r3, r1, r4
   b735c:	ea45 0103 	orr.w	r1, r5, r3
   b7360:	bd30      	pop	{r4, r5, pc}
   b7362:	f1c4 040c 	rsb	r4, r4, #12
   b7366:	f1c4 0220 	rsb	r2, r4, #32
   b736a:	fa20 f002 	lsr.w	r0, r0, r2
   b736e:	fa01 f304 	lsl.w	r3, r1, r4
   b7372:	ea40 0003 	orr.w	r0, r0, r3
   b7376:	4629      	mov	r1, r5
   b7378:	bd30      	pop	{r4, r5, pc}
   b737a:	fa21 f004 	lsr.w	r0, r1, r4
   b737e:	4629      	mov	r1, r5
   b7380:	bd30      	pop	{r4, r5, pc}
   b7382:	f094 0f00 	teq	r4, #0
   b7386:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b738a:	bf06      	itte	eq
   b738c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7390:	3401      	addeq	r4, #1
   b7392:	3d01      	subne	r5, #1
   b7394:	e74e      	b.n	b7234 <__adddf3+0x8c>
   b7396:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b739a:	bf18      	it	ne
   b739c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b73a0:	d029      	beq.n	b73f6 <__adddf3+0x24e>
   b73a2:	ea94 0f05 	teq	r4, r5
   b73a6:	bf08      	it	eq
   b73a8:	ea90 0f02 	teqeq	r0, r2
   b73ac:	d005      	beq.n	b73ba <__adddf3+0x212>
   b73ae:	ea54 0c00 	orrs.w	ip, r4, r0
   b73b2:	bf04      	itt	eq
   b73b4:	4619      	moveq	r1, r3
   b73b6:	4610      	moveq	r0, r2
   b73b8:	bd30      	pop	{r4, r5, pc}
   b73ba:	ea91 0f03 	teq	r1, r3
   b73be:	bf1e      	ittt	ne
   b73c0:	2100      	movne	r1, #0
   b73c2:	2000      	movne	r0, #0
   b73c4:	bd30      	popne	{r4, r5, pc}
   b73c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b73ca:	d105      	bne.n	b73d8 <__adddf3+0x230>
   b73cc:	0040      	lsls	r0, r0, #1
   b73ce:	4149      	adcs	r1, r1
   b73d0:	bf28      	it	cs
   b73d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b73d6:	bd30      	pop	{r4, r5, pc}
   b73d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b73dc:	bf3c      	itt	cc
   b73de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b73e2:	bd30      	popcc	{r4, r5, pc}
   b73e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b73e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b73ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b73f0:	f04f 0000 	mov.w	r0, #0
   b73f4:	bd30      	pop	{r4, r5, pc}
   b73f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b73fa:	bf1a      	itte	ne
   b73fc:	4619      	movne	r1, r3
   b73fe:	4610      	movne	r0, r2
   b7400:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7404:	bf1c      	itt	ne
   b7406:	460b      	movne	r3, r1
   b7408:	4602      	movne	r2, r0
   b740a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b740e:	bf06      	itte	eq
   b7410:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7414:	ea91 0f03 	teqeq	r1, r3
   b7418:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b741c:	bd30      	pop	{r4, r5, pc}
   b741e:	bf00      	nop

000b7420 <__aeabi_ui2d>:
   b7420:	f090 0f00 	teq	r0, #0
   b7424:	bf04      	itt	eq
   b7426:	2100      	moveq	r1, #0
   b7428:	4770      	bxeq	lr
   b742a:	b530      	push	{r4, r5, lr}
   b742c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7430:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7434:	f04f 0500 	mov.w	r5, #0
   b7438:	f04f 0100 	mov.w	r1, #0
   b743c:	e750      	b.n	b72e0 <__adddf3+0x138>
   b743e:	bf00      	nop

000b7440 <__aeabi_i2d>:
   b7440:	f090 0f00 	teq	r0, #0
   b7444:	bf04      	itt	eq
   b7446:	2100      	moveq	r1, #0
   b7448:	4770      	bxeq	lr
   b744a:	b530      	push	{r4, r5, lr}
   b744c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7450:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7454:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7458:	bf48      	it	mi
   b745a:	4240      	negmi	r0, r0
   b745c:	f04f 0100 	mov.w	r1, #0
   b7460:	e73e      	b.n	b72e0 <__adddf3+0x138>
   b7462:	bf00      	nop

000b7464 <__aeabi_f2d>:
   b7464:	0042      	lsls	r2, r0, #1
   b7466:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b746a:	ea4f 0131 	mov.w	r1, r1, rrx
   b746e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7472:	bf1f      	itttt	ne
   b7474:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7478:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b747c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7480:	4770      	bxne	lr
   b7482:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7486:	bf08      	it	eq
   b7488:	4770      	bxeq	lr
   b748a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b748e:	bf04      	itt	eq
   b7490:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7494:	4770      	bxeq	lr
   b7496:	b530      	push	{r4, r5, lr}
   b7498:	f44f 7460 	mov.w	r4, #896	; 0x380
   b749c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b74a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b74a4:	e71c      	b.n	b72e0 <__adddf3+0x138>
   b74a6:	bf00      	nop

000b74a8 <__aeabi_ul2d>:
   b74a8:	ea50 0201 	orrs.w	r2, r0, r1
   b74ac:	bf08      	it	eq
   b74ae:	4770      	bxeq	lr
   b74b0:	b530      	push	{r4, r5, lr}
   b74b2:	f04f 0500 	mov.w	r5, #0
   b74b6:	e00a      	b.n	b74ce <__aeabi_l2d+0x16>

000b74b8 <__aeabi_l2d>:
   b74b8:	ea50 0201 	orrs.w	r2, r0, r1
   b74bc:	bf08      	it	eq
   b74be:	4770      	bxeq	lr
   b74c0:	b530      	push	{r4, r5, lr}
   b74c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b74c6:	d502      	bpl.n	b74ce <__aeabi_l2d+0x16>
   b74c8:	4240      	negs	r0, r0
   b74ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b74ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b74d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b74d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b74da:	f43f aed8 	beq.w	b728e <__adddf3+0xe6>
   b74de:	f04f 0203 	mov.w	r2, #3
   b74e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b74e6:	bf18      	it	ne
   b74e8:	3203      	addne	r2, #3
   b74ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b74ee:	bf18      	it	ne
   b74f0:	3203      	addne	r2, #3
   b74f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b74f6:	f1c2 0320 	rsb	r3, r2, #32
   b74fa:	fa00 fc03 	lsl.w	ip, r0, r3
   b74fe:	fa20 f002 	lsr.w	r0, r0, r2
   b7502:	fa01 fe03 	lsl.w	lr, r1, r3
   b7506:	ea40 000e 	orr.w	r0, r0, lr
   b750a:	fa21 f102 	lsr.w	r1, r1, r2
   b750e:	4414      	add	r4, r2
   b7510:	e6bd      	b.n	b728e <__adddf3+0xe6>
   b7512:	bf00      	nop

000b7514 <__aeabi_dmul>:
   b7514:	b570      	push	{r4, r5, r6, lr}
   b7516:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b751a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b751e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7522:	bf1d      	ittte	ne
   b7524:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7528:	ea94 0f0c 	teqne	r4, ip
   b752c:	ea95 0f0c 	teqne	r5, ip
   b7530:	f000 f8de 	bleq	b76f0 <__aeabi_dmul+0x1dc>
   b7534:	442c      	add	r4, r5
   b7536:	ea81 0603 	eor.w	r6, r1, r3
   b753a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b753e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7542:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7546:	bf18      	it	ne
   b7548:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b754c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7554:	d038      	beq.n	b75c8 <__aeabi_dmul+0xb4>
   b7556:	fba0 ce02 	umull	ip, lr, r0, r2
   b755a:	f04f 0500 	mov.w	r5, #0
   b755e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7562:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7566:	fbe0 e503 	umlal	lr, r5, r0, r3
   b756a:	f04f 0600 	mov.w	r6, #0
   b756e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7572:	f09c 0f00 	teq	ip, #0
   b7576:	bf18      	it	ne
   b7578:	f04e 0e01 	orrne.w	lr, lr, #1
   b757c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7580:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7584:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7588:	d204      	bcs.n	b7594 <__aeabi_dmul+0x80>
   b758a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b758e:	416d      	adcs	r5, r5
   b7590:	eb46 0606 	adc.w	r6, r6, r6
   b7594:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7598:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b759c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b75a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b75a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b75a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b75ac:	bf88      	it	hi
   b75ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b75b2:	d81e      	bhi.n	b75f2 <__aeabi_dmul+0xde>
   b75b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b75b8:	bf08      	it	eq
   b75ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b75be:	f150 0000 	adcs.w	r0, r0, #0
   b75c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b75c6:	bd70      	pop	{r4, r5, r6, pc}
   b75c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b75cc:	ea46 0101 	orr.w	r1, r6, r1
   b75d0:	ea40 0002 	orr.w	r0, r0, r2
   b75d4:	ea81 0103 	eor.w	r1, r1, r3
   b75d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b75dc:	bfc2      	ittt	gt
   b75de:	ebd4 050c 	rsbsgt	r5, r4, ip
   b75e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b75e6:	bd70      	popgt	{r4, r5, r6, pc}
   b75e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b75ec:	f04f 0e00 	mov.w	lr, #0
   b75f0:	3c01      	subs	r4, #1
   b75f2:	f300 80ab 	bgt.w	b774c <__aeabi_dmul+0x238>
   b75f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b75fa:	bfde      	ittt	le
   b75fc:	2000      	movle	r0, #0
   b75fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7602:	bd70      	pople	{r4, r5, r6, pc}
   b7604:	f1c4 0400 	rsb	r4, r4, #0
   b7608:	3c20      	subs	r4, #32
   b760a:	da35      	bge.n	b7678 <__aeabi_dmul+0x164>
   b760c:	340c      	adds	r4, #12
   b760e:	dc1b      	bgt.n	b7648 <__aeabi_dmul+0x134>
   b7610:	f104 0414 	add.w	r4, r4, #20
   b7614:	f1c4 0520 	rsb	r5, r4, #32
   b7618:	fa00 f305 	lsl.w	r3, r0, r5
   b761c:	fa20 f004 	lsr.w	r0, r0, r4
   b7620:	fa01 f205 	lsl.w	r2, r1, r5
   b7624:	ea40 0002 	orr.w	r0, r0, r2
   b7628:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b762c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7634:	fa21 f604 	lsr.w	r6, r1, r4
   b7638:	eb42 0106 	adc.w	r1, r2, r6
   b763c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7640:	bf08      	it	eq
   b7642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7646:	bd70      	pop	{r4, r5, r6, pc}
   b7648:	f1c4 040c 	rsb	r4, r4, #12
   b764c:	f1c4 0520 	rsb	r5, r4, #32
   b7650:	fa00 f304 	lsl.w	r3, r0, r4
   b7654:	fa20 f005 	lsr.w	r0, r0, r5
   b7658:	fa01 f204 	lsl.w	r2, r1, r4
   b765c:	ea40 0002 	orr.w	r0, r0, r2
   b7660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7668:	f141 0100 	adc.w	r1, r1, #0
   b766c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7670:	bf08      	it	eq
   b7672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7676:	bd70      	pop	{r4, r5, r6, pc}
   b7678:	f1c4 0520 	rsb	r5, r4, #32
   b767c:	fa00 f205 	lsl.w	r2, r0, r5
   b7680:	ea4e 0e02 	orr.w	lr, lr, r2
   b7684:	fa20 f304 	lsr.w	r3, r0, r4
   b7688:	fa01 f205 	lsl.w	r2, r1, r5
   b768c:	ea43 0302 	orr.w	r3, r3, r2
   b7690:	fa21 f004 	lsr.w	r0, r1, r4
   b7694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7698:	fa21 f204 	lsr.w	r2, r1, r4
   b769c:	ea20 0002 	bic.w	r0, r0, r2
   b76a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b76a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b76a8:	bf08      	it	eq
   b76aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b76ae:	bd70      	pop	{r4, r5, r6, pc}
   b76b0:	f094 0f00 	teq	r4, #0
   b76b4:	d10f      	bne.n	b76d6 <__aeabi_dmul+0x1c2>
   b76b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b76ba:	0040      	lsls	r0, r0, #1
   b76bc:	eb41 0101 	adc.w	r1, r1, r1
   b76c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b76c4:	bf08      	it	eq
   b76c6:	3c01      	subeq	r4, #1
   b76c8:	d0f7      	beq.n	b76ba <__aeabi_dmul+0x1a6>
   b76ca:	ea41 0106 	orr.w	r1, r1, r6
   b76ce:	f095 0f00 	teq	r5, #0
   b76d2:	bf18      	it	ne
   b76d4:	4770      	bxne	lr
   b76d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b76da:	0052      	lsls	r2, r2, #1
   b76dc:	eb43 0303 	adc.w	r3, r3, r3
   b76e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b76e4:	bf08      	it	eq
   b76e6:	3d01      	subeq	r5, #1
   b76e8:	d0f7      	beq.n	b76da <__aeabi_dmul+0x1c6>
   b76ea:	ea43 0306 	orr.w	r3, r3, r6
   b76ee:	4770      	bx	lr
   b76f0:	ea94 0f0c 	teq	r4, ip
   b76f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b76f8:	bf18      	it	ne
   b76fa:	ea95 0f0c 	teqne	r5, ip
   b76fe:	d00c      	beq.n	b771a <__aeabi_dmul+0x206>
   b7700:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7704:	bf18      	it	ne
   b7706:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b770a:	d1d1      	bne.n	b76b0 <__aeabi_dmul+0x19c>
   b770c:	ea81 0103 	eor.w	r1, r1, r3
   b7710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7714:	f04f 0000 	mov.w	r0, #0
   b7718:	bd70      	pop	{r4, r5, r6, pc}
   b771a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b771e:	bf06      	itte	eq
   b7720:	4610      	moveq	r0, r2
   b7722:	4619      	moveq	r1, r3
   b7724:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7728:	d019      	beq.n	b775e <__aeabi_dmul+0x24a>
   b772a:	ea94 0f0c 	teq	r4, ip
   b772e:	d102      	bne.n	b7736 <__aeabi_dmul+0x222>
   b7730:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7734:	d113      	bne.n	b775e <__aeabi_dmul+0x24a>
   b7736:	ea95 0f0c 	teq	r5, ip
   b773a:	d105      	bne.n	b7748 <__aeabi_dmul+0x234>
   b773c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7740:	bf1c      	itt	ne
   b7742:	4610      	movne	r0, r2
   b7744:	4619      	movne	r1, r3
   b7746:	d10a      	bne.n	b775e <__aeabi_dmul+0x24a>
   b7748:	ea81 0103 	eor.w	r1, r1, r3
   b774c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7750:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7758:	f04f 0000 	mov.w	r0, #0
   b775c:	bd70      	pop	{r4, r5, r6, pc}
   b775e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7762:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7766:	bd70      	pop	{r4, r5, r6, pc}

000b7768 <__aeabi_ddiv>:
   b7768:	b570      	push	{r4, r5, r6, lr}
   b776a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b776e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7772:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7776:	bf1d      	ittte	ne
   b7778:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b777c:	ea94 0f0c 	teqne	r4, ip
   b7780:	ea95 0f0c 	teqne	r5, ip
   b7784:	f000 f8a7 	bleq	b78d6 <__aeabi_ddiv+0x16e>
   b7788:	eba4 0405 	sub.w	r4, r4, r5
   b778c:	ea81 0e03 	eor.w	lr, r1, r3
   b7790:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7794:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7798:	f000 8088 	beq.w	b78ac <__aeabi_ddiv+0x144>
   b779c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b77a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b77a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b77a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b77ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b77b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b77b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b77b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b77bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b77c0:	429d      	cmp	r5, r3
   b77c2:	bf08      	it	eq
   b77c4:	4296      	cmpeq	r6, r2
   b77c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b77ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b77ce:	d202      	bcs.n	b77d6 <__aeabi_ddiv+0x6e>
   b77d0:	085b      	lsrs	r3, r3, #1
   b77d2:	ea4f 0232 	mov.w	r2, r2, rrx
   b77d6:	1ab6      	subs	r6, r6, r2
   b77d8:	eb65 0503 	sbc.w	r5, r5, r3
   b77dc:	085b      	lsrs	r3, r3, #1
   b77de:	ea4f 0232 	mov.w	r2, r2, rrx
   b77e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b77e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b77ea:	ebb6 0e02 	subs.w	lr, r6, r2
   b77ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   b77f2:	bf22      	ittt	cs
   b77f4:	1ab6      	subcs	r6, r6, r2
   b77f6:	4675      	movcs	r5, lr
   b77f8:	ea40 000c 	orrcs.w	r0, r0, ip
   b77fc:	085b      	lsrs	r3, r3, #1
   b77fe:	ea4f 0232 	mov.w	r2, r2, rrx
   b7802:	ebb6 0e02 	subs.w	lr, r6, r2
   b7806:	eb75 0e03 	sbcs.w	lr, r5, r3
   b780a:	bf22      	ittt	cs
   b780c:	1ab6      	subcs	r6, r6, r2
   b780e:	4675      	movcs	r5, lr
   b7810:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7814:	085b      	lsrs	r3, r3, #1
   b7816:	ea4f 0232 	mov.w	r2, r2, rrx
   b781a:	ebb6 0e02 	subs.w	lr, r6, r2
   b781e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7822:	bf22      	ittt	cs
   b7824:	1ab6      	subcs	r6, r6, r2
   b7826:	4675      	movcs	r5, lr
   b7828:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b782c:	085b      	lsrs	r3, r3, #1
   b782e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7832:	ebb6 0e02 	subs.w	lr, r6, r2
   b7836:	eb75 0e03 	sbcs.w	lr, r5, r3
   b783a:	bf22      	ittt	cs
   b783c:	1ab6      	subcs	r6, r6, r2
   b783e:	4675      	movcs	r5, lr
   b7840:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7844:	ea55 0e06 	orrs.w	lr, r5, r6
   b7848:	d018      	beq.n	b787c <__aeabi_ddiv+0x114>
   b784a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b784e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7852:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7856:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b785a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b785e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7862:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7866:	d1c0      	bne.n	b77ea <__aeabi_ddiv+0x82>
   b7868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b786c:	d10b      	bne.n	b7886 <__aeabi_ddiv+0x11e>
   b786e:	ea41 0100 	orr.w	r1, r1, r0
   b7872:	f04f 0000 	mov.w	r0, #0
   b7876:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b787a:	e7b6      	b.n	b77ea <__aeabi_ddiv+0x82>
   b787c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7880:	bf04      	itt	eq
   b7882:	4301      	orreq	r1, r0
   b7884:	2000      	moveq	r0, #0
   b7886:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b788a:	bf88      	it	hi
   b788c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7890:	f63f aeaf 	bhi.w	b75f2 <__aeabi_dmul+0xde>
   b7894:	ebb5 0c03 	subs.w	ip, r5, r3
   b7898:	bf04      	itt	eq
   b789a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b789e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b78a2:	f150 0000 	adcs.w	r0, r0, #0
   b78a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b78aa:	bd70      	pop	{r4, r5, r6, pc}
   b78ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b78b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b78b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b78b8:	bfc2      	ittt	gt
   b78ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   b78be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b78c2:	bd70      	popgt	{r4, r5, r6, pc}
   b78c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b78c8:	f04f 0e00 	mov.w	lr, #0
   b78cc:	3c01      	subs	r4, #1
   b78ce:	e690      	b.n	b75f2 <__aeabi_dmul+0xde>
   b78d0:	ea45 0e06 	orr.w	lr, r5, r6
   b78d4:	e68d      	b.n	b75f2 <__aeabi_dmul+0xde>
   b78d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b78da:	ea94 0f0c 	teq	r4, ip
   b78de:	bf08      	it	eq
   b78e0:	ea95 0f0c 	teqeq	r5, ip
   b78e4:	f43f af3b 	beq.w	b775e <__aeabi_dmul+0x24a>
   b78e8:	ea94 0f0c 	teq	r4, ip
   b78ec:	d10a      	bne.n	b7904 <__aeabi_ddiv+0x19c>
   b78ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b78f2:	f47f af34 	bne.w	b775e <__aeabi_dmul+0x24a>
   b78f6:	ea95 0f0c 	teq	r5, ip
   b78fa:	f47f af25 	bne.w	b7748 <__aeabi_dmul+0x234>
   b78fe:	4610      	mov	r0, r2
   b7900:	4619      	mov	r1, r3
   b7902:	e72c      	b.n	b775e <__aeabi_dmul+0x24a>
   b7904:	ea95 0f0c 	teq	r5, ip
   b7908:	d106      	bne.n	b7918 <__aeabi_ddiv+0x1b0>
   b790a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b790e:	f43f aefd 	beq.w	b770c <__aeabi_dmul+0x1f8>
   b7912:	4610      	mov	r0, r2
   b7914:	4619      	mov	r1, r3
   b7916:	e722      	b.n	b775e <__aeabi_dmul+0x24a>
   b7918:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b791c:	bf18      	it	ne
   b791e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7922:	f47f aec5 	bne.w	b76b0 <__aeabi_dmul+0x19c>
   b7926:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b792a:	f47f af0d 	bne.w	b7748 <__aeabi_dmul+0x234>
   b792e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7932:	f47f aeeb 	bne.w	b770c <__aeabi_dmul+0x1f8>
   b7936:	e712      	b.n	b775e <__aeabi_dmul+0x24a>

000b7938 <__gedf2>:
   b7938:	f04f 3cff 	mov.w	ip, #4294967295
   b793c:	e006      	b.n	b794c <__cmpdf2+0x4>
   b793e:	bf00      	nop

000b7940 <__ledf2>:
   b7940:	f04f 0c01 	mov.w	ip, #1
   b7944:	e002      	b.n	b794c <__cmpdf2+0x4>
   b7946:	bf00      	nop

000b7948 <__cmpdf2>:
   b7948:	f04f 0c01 	mov.w	ip, #1
   b794c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b795c:	bf18      	it	ne
   b795e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7962:	d01b      	beq.n	b799c <__cmpdf2+0x54>
   b7964:	b001      	add	sp, #4
   b7966:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b796a:	bf0c      	ite	eq
   b796c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7970:	ea91 0f03 	teqne	r1, r3
   b7974:	bf02      	ittt	eq
   b7976:	ea90 0f02 	teqeq	r0, r2
   b797a:	2000      	moveq	r0, #0
   b797c:	4770      	bxeq	lr
   b797e:	f110 0f00 	cmn.w	r0, #0
   b7982:	ea91 0f03 	teq	r1, r3
   b7986:	bf58      	it	pl
   b7988:	4299      	cmppl	r1, r3
   b798a:	bf08      	it	eq
   b798c:	4290      	cmpeq	r0, r2
   b798e:	bf2c      	ite	cs
   b7990:	17d8      	asrcs	r0, r3, #31
   b7992:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7996:	f040 0001 	orr.w	r0, r0, #1
   b799a:	4770      	bx	lr
   b799c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b79a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b79a4:	d102      	bne.n	b79ac <__cmpdf2+0x64>
   b79a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b79aa:	d107      	bne.n	b79bc <__cmpdf2+0x74>
   b79ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b79b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b79b4:	d1d6      	bne.n	b7964 <__cmpdf2+0x1c>
   b79b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b79ba:	d0d3      	beq.n	b7964 <__cmpdf2+0x1c>
   b79bc:	f85d 0b04 	ldr.w	r0, [sp], #4
   b79c0:	4770      	bx	lr
   b79c2:	bf00      	nop

000b79c4 <__aeabi_cdrcmple>:
   b79c4:	4684      	mov	ip, r0
   b79c6:	4610      	mov	r0, r2
   b79c8:	4662      	mov	r2, ip
   b79ca:	468c      	mov	ip, r1
   b79cc:	4619      	mov	r1, r3
   b79ce:	4663      	mov	r3, ip
   b79d0:	e000      	b.n	b79d4 <__aeabi_cdcmpeq>
   b79d2:	bf00      	nop

000b79d4 <__aeabi_cdcmpeq>:
   b79d4:	b501      	push	{r0, lr}
   b79d6:	f7ff ffb7 	bl	b7948 <__cmpdf2>
   b79da:	2800      	cmp	r0, #0
   b79dc:	bf48      	it	mi
   b79de:	f110 0f00 	cmnmi.w	r0, #0
   b79e2:	bd01      	pop	{r0, pc}

000b79e4 <__aeabi_dcmpeq>:
   b79e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b79e8:	f7ff fff4 	bl	b79d4 <__aeabi_cdcmpeq>
   b79ec:	bf0c      	ite	eq
   b79ee:	2001      	moveq	r0, #1
   b79f0:	2000      	movne	r0, #0
   b79f2:	f85d fb08 	ldr.w	pc, [sp], #8
   b79f6:	bf00      	nop

000b79f8 <__aeabi_dcmplt>:
   b79f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b79fc:	f7ff ffea 	bl	b79d4 <__aeabi_cdcmpeq>
   b7a00:	bf34      	ite	cc
   b7a02:	2001      	movcc	r0, #1
   b7a04:	2000      	movcs	r0, #0
   b7a06:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a0a:	bf00      	nop

000b7a0c <__aeabi_dcmple>:
   b7a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a10:	f7ff ffe0 	bl	b79d4 <__aeabi_cdcmpeq>
   b7a14:	bf94      	ite	ls
   b7a16:	2001      	movls	r0, #1
   b7a18:	2000      	movhi	r0, #0
   b7a1a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a1e:	bf00      	nop

000b7a20 <__aeabi_dcmpge>:
   b7a20:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a24:	f7ff ffce 	bl	b79c4 <__aeabi_cdrcmple>
   b7a28:	bf94      	ite	ls
   b7a2a:	2001      	movls	r0, #1
   b7a2c:	2000      	movhi	r0, #0
   b7a2e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a32:	bf00      	nop

000b7a34 <__aeabi_dcmpgt>:
   b7a34:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a38:	f7ff ffc4 	bl	b79c4 <__aeabi_cdrcmple>
   b7a3c:	bf34      	ite	cc
   b7a3e:	2001      	movcc	r0, #1
   b7a40:	2000      	movcs	r0, #0
   b7a42:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a46:	bf00      	nop

000b7a48 <__aeabi_d2uiz>:
   b7a48:	004a      	lsls	r2, r1, #1
   b7a4a:	d211      	bcs.n	b7a70 <__aeabi_d2uiz+0x28>
   b7a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7a50:	d211      	bcs.n	b7a76 <__aeabi_d2uiz+0x2e>
   b7a52:	d50d      	bpl.n	b7a70 <__aeabi_d2uiz+0x28>
   b7a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7a5c:	d40e      	bmi.n	b7a7c <__aeabi_d2uiz+0x34>
   b7a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7a6a:	fa23 f002 	lsr.w	r0, r3, r2
   b7a6e:	4770      	bx	lr
   b7a70:	f04f 0000 	mov.w	r0, #0
   b7a74:	4770      	bx	lr
   b7a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7a7a:	d102      	bne.n	b7a82 <__aeabi_d2uiz+0x3a>
   b7a7c:	f04f 30ff 	mov.w	r0, #4294967295
   b7a80:	4770      	bx	lr
   b7a82:	f04f 0000 	mov.w	r0, #0
   b7a86:	4770      	bx	lr

000b7a88 <__aeabi_d2ulz>:
   b7a88:	b5d0      	push	{r4, r6, r7, lr}
   b7a8a:	4b0c      	ldr	r3, [pc, #48]	; (b7abc <__aeabi_d2ulz+0x34>)
   b7a8c:	2200      	movs	r2, #0
   b7a8e:	4606      	mov	r6, r0
   b7a90:	460f      	mov	r7, r1
   b7a92:	f7ff fd3f 	bl	b7514 <__aeabi_dmul>
   b7a96:	f7ff ffd7 	bl	b7a48 <__aeabi_d2uiz>
   b7a9a:	4604      	mov	r4, r0
   b7a9c:	f7ff fcc0 	bl	b7420 <__aeabi_ui2d>
   b7aa0:	4b07      	ldr	r3, [pc, #28]	; (b7ac0 <__aeabi_d2ulz+0x38>)
   b7aa2:	2200      	movs	r2, #0
   b7aa4:	f7ff fd36 	bl	b7514 <__aeabi_dmul>
   b7aa8:	4602      	mov	r2, r0
   b7aaa:	460b      	mov	r3, r1
   b7aac:	4630      	mov	r0, r6
   b7aae:	4639      	mov	r1, r7
   b7ab0:	f7ff fb78 	bl	b71a4 <__aeabi_dsub>
   b7ab4:	f7ff ffc8 	bl	b7a48 <__aeabi_d2uiz>
   b7ab8:	4621      	mov	r1, r4
   b7aba:	bdd0      	pop	{r4, r6, r7, pc}
   b7abc:	3df00000 	.word	0x3df00000
   b7ac0:	41f00000 	.word	0x41f00000

000b7ac4 <atexit>:
   b7ac4:	2300      	movs	r3, #0
   b7ac6:	4601      	mov	r1, r0
   b7ac8:	461a      	mov	r2, r3
   b7aca:	4618      	mov	r0, r3
   b7acc:	f000 bfd2 	b.w	b8a74 <__register_exitproc>

000b7ad0 <atof>:
   b7ad0:	2100      	movs	r1, #0
   b7ad2:	f000 bedb 	b.w	b888c <strtod>

000b7ad6 <atoi>:
   b7ad6:	220a      	movs	r2, #10
   b7ad8:	2100      	movs	r1, #0
   b7ada:	f000 bfc1 	b.w	b8a60 <strtol>

000b7ade <ldiv>:
   b7ade:	2900      	cmp	r1, #0
   b7ae0:	b510      	push	{r4, lr}
   b7ae2:	fb91 f4f2 	sdiv	r4, r1, r2
   b7ae6:	fb02 1314 	mls	r3, r2, r4, r1
   b7aea:	db06      	blt.n	b7afa <ldiv+0x1c>
   b7aec:	2b00      	cmp	r3, #0
   b7aee:	da01      	bge.n	b7af4 <ldiv+0x16>
   b7af0:	3401      	adds	r4, #1
   b7af2:	1a9b      	subs	r3, r3, r2
   b7af4:	e9c0 4300 	strd	r4, r3, [r0]
   b7af8:	bd10      	pop	{r4, pc}
   b7afa:	2b00      	cmp	r3, #0
   b7afc:	bfc4      	itt	gt
   b7afe:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b7b02:	189b      	addgt	r3, r3, r2
   b7b04:	e7f6      	b.n	b7af4 <ldiv+0x16>

000b7b06 <memcpy>:
   b7b06:	440a      	add	r2, r1
   b7b08:	4291      	cmp	r1, r2
   b7b0a:	f100 33ff 	add.w	r3, r0, #4294967295
   b7b0e:	d100      	bne.n	b7b12 <memcpy+0xc>
   b7b10:	4770      	bx	lr
   b7b12:	b510      	push	{r4, lr}
   b7b14:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7b18:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7b1c:	4291      	cmp	r1, r2
   b7b1e:	d1f9      	bne.n	b7b14 <memcpy+0xe>
   b7b20:	bd10      	pop	{r4, pc}

000b7b22 <memset>:
   b7b22:	4402      	add	r2, r0
   b7b24:	4603      	mov	r3, r0
   b7b26:	4293      	cmp	r3, r2
   b7b28:	d100      	bne.n	b7b2c <memset+0xa>
   b7b2a:	4770      	bx	lr
   b7b2c:	f803 1b01 	strb.w	r1, [r3], #1
   b7b30:	e7f9      	b.n	b7b26 <memset+0x4>
	...

000b7b34 <srand>:
   b7b34:	b538      	push	{r3, r4, r5, lr}
   b7b36:	4b10      	ldr	r3, [pc, #64]	; (b7b78 <srand+0x44>)
   b7b38:	681d      	ldr	r5, [r3, #0]
   b7b3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b3c:	4604      	mov	r4, r0
   b7b3e:	b9b3      	cbnz	r3, b7b6e <srand+0x3a>
   b7b40:	2018      	movs	r0, #24
   b7b42:	f7fd fd05 	bl	b5550 <malloc>
   b7b46:	4602      	mov	r2, r0
   b7b48:	63a8      	str	r0, [r5, #56]	; 0x38
   b7b4a:	b920      	cbnz	r0, b7b56 <srand+0x22>
   b7b4c:	4b0b      	ldr	r3, [pc, #44]	; (b7b7c <srand+0x48>)
   b7b4e:	480c      	ldr	r0, [pc, #48]	; (b7b80 <srand+0x4c>)
   b7b50:	2142      	movs	r1, #66	; 0x42
   b7b52:	f7fd fd45 	bl	b55e0 <__assert_func>
   b7b56:	490b      	ldr	r1, [pc, #44]	; (b7b84 <srand+0x50>)
   b7b58:	4b0b      	ldr	r3, [pc, #44]	; (b7b88 <srand+0x54>)
   b7b5a:	e9c0 1300 	strd	r1, r3, [r0]
   b7b5e:	4b0b      	ldr	r3, [pc, #44]	; (b7b8c <srand+0x58>)
   b7b60:	6083      	str	r3, [r0, #8]
   b7b62:	230b      	movs	r3, #11
   b7b64:	8183      	strh	r3, [r0, #12]
   b7b66:	2100      	movs	r1, #0
   b7b68:	2001      	movs	r0, #1
   b7b6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7b6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b70:	2200      	movs	r2, #0
   b7b72:	611c      	str	r4, [r3, #16]
   b7b74:	615a      	str	r2, [r3, #20]
   b7b76:	bd38      	pop	{r3, r4, r5, pc}
   b7b78:	2003ccf8 	.word	0x2003ccf8
   b7b7c:	000ba169 	.word	0x000ba169
   b7b80:	000ba180 	.word	0x000ba180
   b7b84:	abcd330e 	.word	0xabcd330e
   b7b88:	e66d1234 	.word	0xe66d1234
   b7b8c:	0005deec 	.word	0x0005deec

000b7b90 <strcat>:
   b7b90:	b510      	push	{r4, lr}
   b7b92:	4602      	mov	r2, r0
   b7b94:	7814      	ldrb	r4, [r2, #0]
   b7b96:	4613      	mov	r3, r2
   b7b98:	3201      	adds	r2, #1
   b7b9a:	2c00      	cmp	r4, #0
   b7b9c:	d1fa      	bne.n	b7b94 <strcat+0x4>
   b7b9e:	3b01      	subs	r3, #1
   b7ba0:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7ba4:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7ba8:	2a00      	cmp	r2, #0
   b7baa:	d1f9      	bne.n	b7ba0 <strcat+0x10>
   b7bac:	bd10      	pop	{r4, pc}

000b7bae <strcmp>:
   b7bae:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7bb6:	2a01      	cmp	r2, #1
   b7bb8:	bf28      	it	cs
   b7bba:	429a      	cmpcs	r2, r3
   b7bbc:	d0f7      	beq.n	b7bae <strcmp>
   b7bbe:	1ad0      	subs	r0, r2, r3
   b7bc0:	4770      	bx	lr

000b7bc2 <strcpy>:
   b7bc2:	4603      	mov	r3, r0
   b7bc4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7bc8:	f803 2b01 	strb.w	r2, [r3], #1
   b7bcc:	2a00      	cmp	r2, #0
   b7bce:	d1f9      	bne.n	b7bc4 <strcpy+0x2>
   b7bd0:	4770      	bx	lr
	...

000b7bd4 <strdup>:
   b7bd4:	4b02      	ldr	r3, [pc, #8]	; (b7be0 <strdup+0xc>)
   b7bd6:	4601      	mov	r1, r0
   b7bd8:	6818      	ldr	r0, [r3, #0]
   b7bda:	f000 b803 	b.w	b7be4 <_strdup_r>
   b7bde:	bf00      	nop
   b7be0:	2003ccf8 	.word	0x2003ccf8

000b7be4 <_strdup_r>:
   b7be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7be6:	4604      	mov	r4, r0
   b7be8:	4608      	mov	r0, r1
   b7bea:	460d      	mov	r5, r1
   b7bec:	f000 f80f 	bl	b7c0e <strlen>
   b7bf0:	1c42      	adds	r2, r0, #1
   b7bf2:	4611      	mov	r1, r2
   b7bf4:	4620      	mov	r0, r4
   b7bf6:	9201      	str	r2, [sp, #4]
   b7bf8:	f7fd fce2 	bl	b55c0 <_malloc_r>
   b7bfc:	4604      	mov	r4, r0
   b7bfe:	b118      	cbz	r0, b7c08 <_strdup_r+0x24>
   b7c00:	9a01      	ldr	r2, [sp, #4]
   b7c02:	4629      	mov	r1, r5
   b7c04:	f7ff ff7f 	bl	b7b06 <memcpy>
   b7c08:	4620      	mov	r0, r4
   b7c0a:	b003      	add	sp, #12
   b7c0c:	bd30      	pop	{r4, r5, pc}

000b7c0e <strlen>:
   b7c0e:	4603      	mov	r3, r0
   b7c10:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7c14:	2a00      	cmp	r2, #0
   b7c16:	d1fb      	bne.n	b7c10 <strlen+0x2>
   b7c18:	1a18      	subs	r0, r3, r0
   b7c1a:	3801      	subs	r0, #1
   b7c1c:	4770      	bx	lr

000b7c1e <strncmp>:
   b7c1e:	b510      	push	{r4, lr}
   b7c20:	b17a      	cbz	r2, b7c42 <strncmp+0x24>
   b7c22:	4603      	mov	r3, r0
   b7c24:	3901      	subs	r1, #1
   b7c26:	1884      	adds	r4, r0, r2
   b7c28:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7c2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7c30:	4290      	cmp	r0, r2
   b7c32:	d101      	bne.n	b7c38 <strncmp+0x1a>
   b7c34:	42a3      	cmp	r3, r4
   b7c36:	d101      	bne.n	b7c3c <strncmp+0x1e>
   b7c38:	1a80      	subs	r0, r0, r2
   b7c3a:	bd10      	pop	{r4, pc}
   b7c3c:	2800      	cmp	r0, #0
   b7c3e:	d1f3      	bne.n	b7c28 <strncmp+0xa>
   b7c40:	e7fa      	b.n	b7c38 <strncmp+0x1a>
   b7c42:	4610      	mov	r0, r2
   b7c44:	e7f9      	b.n	b7c3a <strncmp+0x1c>

000b7c46 <sulp>:
   b7c46:	b570      	push	{r4, r5, r6, lr}
   b7c48:	4604      	mov	r4, r0
   b7c4a:	460d      	mov	r5, r1
   b7c4c:	ec45 4b10 	vmov	d0, r4, r5
   b7c50:	4616      	mov	r6, r2
   b7c52:	f001 fe69 	bl	b9928 <__ulp>
   b7c56:	ec51 0b10 	vmov	r0, r1, d0
   b7c5a:	b17e      	cbz	r6, b7c7c <sulp+0x36>
   b7c5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b7c60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7c64:	2b00      	cmp	r3, #0
   b7c66:	dd09      	ble.n	b7c7c <sulp+0x36>
   b7c68:	051b      	lsls	r3, r3, #20
   b7c6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b7c6e:	2400      	movs	r4, #0
   b7c70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7c74:	4622      	mov	r2, r4
   b7c76:	462b      	mov	r3, r5
   b7c78:	f7ff fc4c 	bl	b7514 <__aeabi_dmul>
   b7c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7c80 <_strtod_l>:
   b7c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c84:	ed2d 8b02 	vpush	{d8}
   b7c88:	b09d      	sub	sp, #116	; 0x74
   b7c8a:	461f      	mov	r7, r3
   b7c8c:	2300      	movs	r3, #0
   b7c8e:	9318      	str	r3, [sp, #96]	; 0x60
   b7c90:	4ba2      	ldr	r3, [pc, #648]	; (b7f1c <_strtod_l+0x29c>)
   b7c92:	9213      	str	r2, [sp, #76]	; 0x4c
   b7c94:	681b      	ldr	r3, [r3, #0]
   b7c96:	9305      	str	r3, [sp, #20]
   b7c98:	4604      	mov	r4, r0
   b7c9a:	4618      	mov	r0, r3
   b7c9c:	4688      	mov	r8, r1
   b7c9e:	f7ff ffb6 	bl	b7c0e <strlen>
   b7ca2:	f04f 0a00 	mov.w	sl, #0
   b7ca6:	4605      	mov	r5, r0
   b7ca8:	f04f 0b00 	mov.w	fp, #0
   b7cac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7cb2:	781a      	ldrb	r2, [r3, #0]
   b7cb4:	2a2b      	cmp	r2, #43	; 0x2b
   b7cb6:	d04e      	beq.n	b7d56 <_strtod_l+0xd6>
   b7cb8:	d83b      	bhi.n	b7d32 <_strtod_l+0xb2>
   b7cba:	2a0d      	cmp	r2, #13
   b7cbc:	d834      	bhi.n	b7d28 <_strtod_l+0xa8>
   b7cbe:	2a08      	cmp	r2, #8
   b7cc0:	d834      	bhi.n	b7d2c <_strtod_l+0xac>
   b7cc2:	2a00      	cmp	r2, #0
   b7cc4:	d03e      	beq.n	b7d44 <_strtod_l+0xc4>
   b7cc6:	2300      	movs	r3, #0
   b7cc8:	930a      	str	r3, [sp, #40]	; 0x28
   b7cca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b7ccc:	7833      	ldrb	r3, [r6, #0]
   b7cce:	2b30      	cmp	r3, #48	; 0x30
   b7cd0:	f040 80b0 	bne.w	b7e34 <_strtod_l+0x1b4>
   b7cd4:	7873      	ldrb	r3, [r6, #1]
   b7cd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7cda:	2b58      	cmp	r3, #88	; 0x58
   b7cdc:	d168      	bne.n	b7db0 <_strtod_l+0x130>
   b7cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7ce0:	9301      	str	r3, [sp, #4]
   b7ce2:	ab18      	add	r3, sp, #96	; 0x60
   b7ce4:	9702      	str	r7, [sp, #8]
   b7ce6:	9300      	str	r3, [sp, #0]
   b7ce8:	4a8d      	ldr	r2, [pc, #564]	; (b7f20 <_strtod_l+0x2a0>)
   b7cea:	ab19      	add	r3, sp, #100	; 0x64
   b7cec:	a917      	add	r1, sp, #92	; 0x5c
   b7cee:	4620      	mov	r0, r4
   b7cf0:	f000 ff8a 	bl	b8c08 <__gethex>
   b7cf4:	f010 0707 	ands.w	r7, r0, #7
   b7cf8:	4605      	mov	r5, r0
   b7cfa:	d005      	beq.n	b7d08 <_strtod_l+0x88>
   b7cfc:	2f06      	cmp	r7, #6
   b7cfe:	d12c      	bne.n	b7d5a <_strtod_l+0xda>
   b7d00:	3601      	adds	r6, #1
   b7d02:	2300      	movs	r3, #0
   b7d04:	9617      	str	r6, [sp, #92]	; 0x5c
   b7d06:	930a      	str	r3, [sp, #40]	; 0x28
   b7d08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7d0a:	2b00      	cmp	r3, #0
   b7d0c:	f040 8590 	bne.w	b8830 <_strtod_l+0xbb0>
   b7d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7d12:	b1eb      	cbz	r3, b7d50 <_strtod_l+0xd0>
   b7d14:	4652      	mov	r2, sl
   b7d16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b7d1a:	ec43 2b10 	vmov	d0, r2, r3
   b7d1e:	b01d      	add	sp, #116	; 0x74
   b7d20:	ecbd 8b02 	vpop	{d8}
   b7d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7d28:	2a20      	cmp	r2, #32
   b7d2a:	d1cc      	bne.n	b7cc6 <_strtod_l+0x46>
   b7d2c:	3301      	adds	r3, #1
   b7d2e:	9317      	str	r3, [sp, #92]	; 0x5c
   b7d30:	e7be      	b.n	b7cb0 <_strtod_l+0x30>
   b7d32:	2a2d      	cmp	r2, #45	; 0x2d
   b7d34:	d1c7      	bne.n	b7cc6 <_strtod_l+0x46>
   b7d36:	2201      	movs	r2, #1
   b7d38:	920a      	str	r2, [sp, #40]	; 0x28
   b7d3a:	1c5a      	adds	r2, r3, #1
   b7d3c:	9217      	str	r2, [sp, #92]	; 0x5c
   b7d3e:	785b      	ldrb	r3, [r3, #1]
   b7d40:	2b00      	cmp	r3, #0
   b7d42:	d1c2      	bne.n	b7cca <_strtod_l+0x4a>
   b7d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7d46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7d4a:	2b00      	cmp	r3, #0
   b7d4c:	f040 856e 	bne.w	b882c <_strtod_l+0xbac>
   b7d50:	4652      	mov	r2, sl
   b7d52:	465b      	mov	r3, fp
   b7d54:	e7e1      	b.n	b7d1a <_strtod_l+0x9a>
   b7d56:	2200      	movs	r2, #0
   b7d58:	e7ee      	b.n	b7d38 <_strtod_l+0xb8>
   b7d5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7d5c:	b13a      	cbz	r2, b7d6e <_strtod_l+0xee>
   b7d5e:	2135      	movs	r1, #53	; 0x35
   b7d60:	a81a      	add	r0, sp, #104	; 0x68
   b7d62:	f001 feec 	bl	b9b3e <__copybits>
   b7d66:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7d68:	4620      	mov	r0, r4
   b7d6a:	f001 faab 	bl	b92c4 <_Bfree>
   b7d6e:	3f01      	subs	r7, #1
   b7d70:	2f04      	cmp	r7, #4
   b7d72:	d806      	bhi.n	b7d82 <_strtod_l+0x102>
   b7d74:	e8df f007 	tbb	[pc, r7]
   b7d78:	1714030a 	.word	0x1714030a
   b7d7c:	0a          	.byte	0x0a
   b7d7d:	00          	.byte	0x00
   b7d7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b7d82:	0728      	lsls	r0, r5, #28
   b7d84:	d5c0      	bpl.n	b7d08 <_strtod_l+0x88>
   b7d86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b7d8a:	e7bd      	b.n	b7d08 <_strtod_l+0x88>
   b7d8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7d90:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b7d92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b7d96:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b7d9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b7d9e:	e7f0      	b.n	b7d82 <_strtod_l+0x102>
   b7da0:	f8df b180 	ldr.w	fp, [pc, #384]	; b7f24 <_strtod_l+0x2a4>
   b7da4:	e7ed      	b.n	b7d82 <_strtod_l+0x102>
   b7da6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b7daa:	f04f 3aff 	mov.w	sl, #4294967295
   b7dae:	e7e8      	b.n	b7d82 <_strtod_l+0x102>
   b7db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7db2:	1c5a      	adds	r2, r3, #1
   b7db4:	9217      	str	r2, [sp, #92]	; 0x5c
   b7db6:	785b      	ldrb	r3, [r3, #1]
   b7db8:	2b30      	cmp	r3, #48	; 0x30
   b7dba:	d0f9      	beq.n	b7db0 <_strtod_l+0x130>
   b7dbc:	2b00      	cmp	r3, #0
   b7dbe:	d0a3      	beq.n	b7d08 <_strtod_l+0x88>
   b7dc0:	2301      	movs	r3, #1
   b7dc2:	f04f 0900 	mov.w	r9, #0
   b7dc6:	9304      	str	r3, [sp, #16]
   b7dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7dca:	9308      	str	r3, [sp, #32]
   b7dcc:	f8cd 901c 	str.w	r9, [sp, #28]
   b7dd0:	464f      	mov	r7, r9
   b7dd2:	220a      	movs	r2, #10
   b7dd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b7dd6:	7806      	ldrb	r6, [r0, #0]
   b7dd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b7ddc:	b2d9      	uxtb	r1, r3
   b7dde:	2909      	cmp	r1, #9
   b7de0:	d92a      	bls.n	b7e38 <_strtod_l+0x1b8>
   b7de2:	9905      	ldr	r1, [sp, #20]
   b7de4:	462a      	mov	r2, r5
   b7de6:	f7ff ff1a 	bl	b7c1e <strncmp>
   b7dea:	b398      	cbz	r0, b7e54 <_strtod_l+0x1d4>
   b7dec:	2000      	movs	r0, #0
   b7dee:	4632      	mov	r2, r6
   b7df0:	463d      	mov	r5, r7
   b7df2:	9005      	str	r0, [sp, #20]
   b7df4:	4603      	mov	r3, r0
   b7df6:	2a65      	cmp	r2, #101	; 0x65
   b7df8:	d001      	beq.n	b7dfe <_strtod_l+0x17e>
   b7dfa:	2a45      	cmp	r2, #69	; 0x45
   b7dfc:	d118      	bne.n	b7e30 <_strtod_l+0x1b0>
   b7dfe:	b91d      	cbnz	r5, b7e08 <_strtod_l+0x188>
   b7e00:	9a04      	ldr	r2, [sp, #16]
   b7e02:	4302      	orrs	r2, r0
   b7e04:	d09e      	beq.n	b7d44 <_strtod_l+0xc4>
   b7e06:	2500      	movs	r5, #0
   b7e08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b7e0c:	f108 0201 	add.w	r2, r8, #1
   b7e10:	9217      	str	r2, [sp, #92]	; 0x5c
   b7e12:	f898 2001 	ldrb.w	r2, [r8, #1]
   b7e16:	2a2b      	cmp	r2, #43	; 0x2b
   b7e18:	d075      	beq.n	b7f06 <_strtod_l+0x286>
   b7e1a:	2a2d      	cmp	r2, #45	; 0x2d
   b7e1c:	d07b      	beq.n	b7f16 <_strtod_l+0x296>
   b7e1e:	f04f 0c00 	mov.w	ip, #0
   b7e22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b7e26:	2909      	cmp	r1, #9
   b7e28:	f240 8082 	bls.w	b7f30 <_strtod_l+0x2b0>
   b7e2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7e30:	2600      	movs	r6, #0
   b7e32:	e09d      	b.n	b7f70 <_strtod_l+0x2f0>
   b7e34:	2300      	movs	r3, #0
   b7e36:	e7c4      	b.n	b7dc2 <_strtod_l+0x142>
   b7e38:	2f08      	cmp	r7, #8
   b7e3a:	bfd8      	it	le
   b7e3c:	9907      	ldrle	r1, [sp, #28]
   b7e3e:	f100 0001 	add.w	r0, r0, #1
   b7e42:	bfda      	itte	le
   b7e44:	fb02 3301 	mlale	r3, r2, r1, r3
   b7e48:	9307      	strle	r3, [sp, #28]
   b7e4a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b7e4e:	3701      	adds	r7, #1
   b7e50:	9017      	str	r0, [sp, #92]	; 0x5c
   b7e52:	e7bf      	b.n	b7dd4 <_strtod_l+0x154>
   b7e54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e56:	195a      	adds	r2, r3, r5
   b7e58:	9217      	str	r2, [sp, #92]	; 0x5c
   b7e5a:	5d5a      	ldrb	r2, [r3, r5]
   b7e5c:	2f00      	cmp	r7, #0
   b7e5e:	d037      	beq.n	b7ed0 <_strtod_l+0x250>
   b7e60:	9005      	str	r0, [sp, #20]
   b7e62:	463d      	mov	r5, r7
   b7e64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7e68:	2b09      	cmp	r3, #9
   b7e6a:	d912      	bls.n	b7e92 <_strtod_l+0x212>
   b7e6c:	2301      	movs	r3, #1
   b7e6e:	e7c2      	b.n	b7df6 <_strtod_l+0x176>
   b7e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e72:	1c5a      	adds	r2, r3, #1
   b7e74:	9217      	str	r2, [sp, #92]	; 0x5c
   b7e76:	785a      	ldrb	r2, [r3, #1]
   b7e78:	3001      	adds	r0, #1
   b7e7a:	2a30      	cmp	r2, #48	; 0x30
   b7e7c:	d0f8      	beq.n	b7e70 <_strtod_l+0x1f0>
   b7e7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b7e82:	2b08      	cmp	r3, #8
   b7e84:	f200 84d9 	bhi.w	b883a <_strtod_l+0xbba>
   b7e88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e8a:	9005      	str	r0, [sp, #20]
   b7e8c:	2000      	movs	r0, #0
   b7e8e:	9308      	str	r3, [sp, #32]
   b7e90:	4605      	mov	r5, r0
   b7e92:	3a30      	subs	r2, #48	; 0x30
   b7e94:	f100 0301 	add.w	r3, r0, #1
   b7e98:	d014      	beq.n	b7ec4 <_strtod_l+0x244>
   b7e9a:	9905      	ldr	r1, [sp, #20]
   b7e9c:	4419      	add	r1, r3
   b7e9e:	9105      	str	r1, [sp, #20]
   b7ea0:	462b      	mov	r3, r5
   b7ea2:	eb00 0e05 	add.w	lr, r0, r5
   b7ea6:	210a      	movs	r1, #10
   b7ea8:	4573      	cmp	r3, lr
   b7eaa:	d113      	bne.n	b7ed4 <_strtod_l+0x254>
   b7eac:	182b      	adds	r3, r5, r0
   b7eae:	2b08      	cmp	r3, #8
   b7eb0:	f105 0501 	add.w	r5, r5, #1
   b7eb4:	4405      	add	r5, r0
   b7eb6:	dc1c      	bgt.n	b7ef2 <_strtod_l+0x272>
   b7eb8:	9907      	ldr	r1, [sp, #28]
   b7eba:	230a      	movs	r3, #10
   b7ebc:	fb03 2301 	mla	r3, r3, r1, r2
   b7ec0:	9307      	str	r3, [sp, #28]
   b7ec2:	2300      	movs	r3, #0
   b7ec4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7ec6:	1c51      	adds	r1, r2, #1
   b7ec8:	9117      	str	r1, [sp, #92]	; 0x5c
   b7eca:	7852      	ldrb	r2, [r2, #1]
   b7ecc:	4618      	mov	r0, r3
   b7ece:	e7c9      	b.n	b7e64 <_strtod_l+0x1e4>
   b7ed0:	4638      	mov	r0, r7
   b7ed2:	e7d2      	b.n	b7e7a <_strtod_l+0x1fa>
   b7ed4:	2b08      	cmp	r3, #8
   b7ed6:	dc04      	bgt.n	b7ee2 <_strtod_l+0x262>
   b7ed8:	9e07      	ldr	r6, [sp, #28]
   b7eda:	434e      	muls	r6, r1
   b7edc:	9607      	str	r6, [sp, #28]
   b7ede:	3301      	adds	r3, #1
   b7ee0:	e7e2      	b.n	b7ea8 <_strtod_l+0x228>
   b7ee2:	f103 0c01 	add.w	ip, r3, #1
   b7ee6:	f1bc 0f10 	cmp.w	ip, #16
   b7eea:	bfd8      	it	le
   b7eec:	fb01 f909 	mulle.w	r9, r1, r9
   b7ef0:	e7f5      	b.n	b7ede <_strtod_l+0x25e>
   b7ef2:	2d10      	cmp	r5, #16
   b7ef4:	bfdc      	itt	le
   b7ef6:	230a      	movle	r3, #10
   b7ef8:	fb03 2909 	mlale	r9, r3, r9, r2
   b7efc:	e7e1      	b.n	b7ec2 <_strtod_l+0x242>
   b7efe:	2300      	movs	r3, #0
   b7f00:	9305      	str	r3, [sp, #20]
   b7f02:	2301      	movs	r3, #1
   b7f04:	e77c      	b.n	b7e00 <_strtod_l+0x180>
   b7f06:	f04f 0c00 	mov.w	ip, #0
   b7f0a:	f108 0202 	add.w	r2, r8, #2
   b7f0e:	9217      	str	r2, [sp, #92]	; 0x5c
   b7f10:	f898 2002 	ldrb.w	r2, [r8, #2]
   b7f14:	e785      	b.n	b7e22 <_strtod_l+0x1a2>
   b7f16:	f04f 0c01 	mov.w	ip, #1
   b7f1a:	e7f6      	b.n	b7f0a <_strtod_l+0x28a>
   b7f1c:	000ba478 	.word	0x000ba478
   b7f20:	000ba20c 	.word	0x000ba20c
   b7f24:	7ff00000 	.word	0x7ff00000
   b7f28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7f2a:	1c51      	adds	r1, r2, #1
   b7f2c:	9117      	str	r1, [sp, #92]	; 0x5c
   b7f2e:	7852      	ldrb	r2, [r2, #1]
   b7f30:	2a30      	cmp	r2, #48	; 0x30
   b7f32:	d0f9      	beq.n	b7f28 <_strtod_l+0x2a8>
   b7f34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b7f38:	2908      	cmp	r1, #8
   b7f3a:	f63f af79 	bhi.w	b7e30 <_strtod_l+0x1b0>
   b7f3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b7f42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7f44:	9206      	str	r2, [sp, #24]
   b7f46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7f48:	1c51      	adds	r1, r2, #1
   b7f4a:	9117      	str	r1, [sp, #92]	; 0x5c
   b7f4c:	7852      	ldrb	r2, [r2, #1]
   b7f4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b7f52:	2e09      	cmp	r6, #9
   b7f54:	d937      	bls.n	b7fc6 <_strtod_l+0x346>
   b7f56:	9e06      	ldr	r6, [sp, #24]
   b7f58:	1b89      	subs	r1, r1, r6
   b7f5a:	2908      	cmp	r1, #8
   b7f5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7f60:	dc02      	bgt.n	b7f68 <_strtod_l+0x2e8>
   b7f62:	4576      	cmp	r6, lr
   b7f64:	bfa8      	it	ge
   b7f66:	4676      	movge	r6, lr
   b7f68:	f1bc 0f00 	cmp.w	ip, #0
   b7f6c:	d000      	beq.n	b7f70 <_strtod_l+0x2f0>
   b7f6e:	4276      	negs	r6, r6
   b7f70:	2d00      	cmp	r5, #0
   b7f72:	d14d      	bne.n	b8010 <_strtod_l+0x390>
   b7f74:	9904      	ldr	r1, [sp, #16]
   b7f76:	4301      	orrs	r1, r0
   b7f78:	f47f aec6 	bne.w	b7d08 <_strtod_l+0x88>
   b7f7c:	2b00      	cmp	r3, #0
   b7f7e:	f47f aee1 	bne.w	b7d44 <_strtod_l+0xc4>
   b7f82:	2a69      	cmp	r2, #105	; 0x69
   b7f84:	d027      	beq.n	b7fd6 <_strtod_l+0x356>
   b7f86:	dc24      	bgt.n	b7fd2 <_strtod_l+0x352>
   b7f88:	2a49      	cmp	r2, #73	; 0x49
   b7f8a:	d024      	beq.n	b7fd6 <_strtod_l+0x356>
   b7f8c:	2a4e      	cmp	r2, #78	; 0x4e
   b7f8e:	f47f aed9 	bne.w	b7d44 <_strtod_l+0xc4>
   b7f92:	499f      	ldr	r1, [pc, #636]	; (b8210 <_strtod_l+0x590>)
   b7f94:	a817      	add	r0, sp, #92	; 0x5c
   b7f96:	f001 f88f 	bl	b90b8 <__match>
   b7f9a:	2800      	cmp	r0, #0
   b7f9c:	f43f aed2 	beq.w	b7d44 <_strtod_l+0xc4>
   b7fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7fa2:	781b      	ldrb	r3, [r3, #0]
   b7fa4:	2b28      	cmp	r3, #40	; 0x28
   b7fa6:	d12d      	bne.n	b8004 <_strtod_l+0x384>
   b7fa8:	499a      	ldr	r1, [pc, #616]	; (b8214 <_strtod_l+0x594>)
   b7faa:	aa1a      	add	r2, sp, #104	; 0x68
   b7fac:	a817      	add	r0, sp, #92	; 0x5c
   b7fae:	f001 f897 	bl	b90e0 <__hexnan>
   b7fb2:	2805      	cmp	r0, #5
   b7fb4:	d126      	bne.n	b8004 <_strtod_l+0x384>
   b7fb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b7fb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b7fbc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b7fc0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b7fc4:	e6a0      	b.n	b7d08 <_strtod_l+0x88>
   b7fc6:	210a      	movs	r1, #10
   b7fc8:	fb01 2e0e 	mla	lr, r1, lr, r2
   b7fcc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b7fd0:	e7b9      	b.n	b7f46 <_strtod_l+0x2c6>
   b7fd2:	2a6e      	cmp	r2, #110	; 0x6e
   b7fd4:	e7db      	b.n	b7f8e <_strtod_l+0x30e>
   b7fd6:	4990      	ldr	r1, [pc, #576]	; (b8218 <_strtod_l+0x598>)
   b7fd8:	a817      	add	r0, sp, #92	; 0x5c
   b7fda:	f001 f86d 	bl	b90b8 <__match>
   b7fde:	2800      	cmp	r0, #0
   b7fe0:	f43f aeb0 	beq.w	b7d44 <_strtod_l+0xc4>
   b7fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7fe6:	498d      	ldr	r1, [pc, #564]	; (b821c <_strtod_l+0x59c>)
   b7fe8:	3b01      	subs	r3, #1
   b7fea:	a817      	add	r0, sp, #92	; 0x5c
   b7fec:	9317      	str	r3, [sp, #92]	; 0x5c
   b7fee:	f001 f863 	bl	b90b8 <__match>
   b7ff2:	b910      	cbnz	r0, b7ffa <_strtod_l+0x37a>
   b7ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7ff6:	3301      	adds	r3, #1
   b7ff8:	9317      	str	r3, [sp, #92]	; 0x5c
   b7ffa:	f8df b230 	ldr.w	fp, [pc, #560]	; b822c <_strtod_l+0x5ac>
   b7ffe:	f04f 0a00 	mov.w	sl, #0
   b8002:	e681      	b.n	b7d08 <_strtod_l+0x88>
   b8004:	4886      	ldr	r0, [pc, #536]	; (b8220 <_strtod_l+0x5a0>)
   b8006:	f001 fdef 	bl	b9be8 <nan>
   b800a:	ec5b ab10 	vmov	sl, fp, d0
   b800e:	e67b      	b.n	b7d08 <_strtod_l+0x88>
   b8010:	9b05      	ldr	r3, [sp, #20]
   b8012:	9807      	ldr	r0, [sp, #28]
   b8014:	1af3      	subs	r3, r6, r3
   b8016:	2f00      	cmp	r7, #0
   b8018:	bf08      	it	eq
   b801a:	462f      	moveq	r7, r5
   b801c:	2d10      	cmp	r5, #16
   b801e:	9306      	str	r3, [sp, #24]
   b8020:	46a8      	mov	r8, r5
   b8022:	bfa8      	it	ge
   b8024:	f04f 0810 	movge.w	r8, #16
   b8028:	f7ff f9fa 	bl	b7420 <__aeabi_ui2d>
   b802c:	2d09      	cmp	r5, #9
   b802e:	4682      	mov	sl, r0
   b8030:	468b      	mov	fp, r1
   b8032:	dd13      	ble.n	b805c <_strtod_l+0x3dc>
   b8034:	4b7b      	ldr	r3, [pc, #492]	; (b8224 <_strtod_l+0x5a4>)
   b8036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b803a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b803e:	f7ff fa69 	bl	b7514 <__aeabi_dmul>
   b8042:	4682      	mov	sl, r0
   b8044:	4648      	mov	r0, r9
   b8046:	468b      	mov	fp, r1
   b8048:	f7ff f9ea 	bl	b7420 <__aeabi_ui2d>
   b804c:	4602      	mov	r2, r0
   b804e:	460b      	mov	r3, r1
   b8050:	4650      	mov	r0, sl
   b8052:	4659      	mov	r1, fp
   b8054:	f7ff f8a8 	bl	b71a8 <__adddf3>
   b8058:	4682      	mov	sl, r0
   b805a:	468b      	mov	fp, r1
   b805c:	2d0f      	cmp	r5, #15
   b805e:	dc38      	bgt.n	b80d2 <_strtod_l+0x452>
   b8060:	9b06      	ldr	r3, [sp, #24]
   b8062:	2b00      	cmp	r3, #0
   b8064:	f43f ae50 	beq.w	b7d08 <_strtod_l+0x88>
   b8068:	dd24      	ble.n	b80b4 <_strtod_l+0x434>
   b806a:	2b16      	cmp	r3, #22
   b806c:	dc0b      	bgt.n	b8086 <_strtod_l+0x406>
   b806e:	496d      	ldr	r1, [pc, #436]	; (b8224 <_strtod_l+0x5a4>)
   b8070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8074:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8078:	4652      	mov	r2, sl
   b807a:	465b      	mov	r3, fp
   b807c:	f7ff fa4a 	bl	b7514 <__aeabi_dmul>
   b8080:	4682      	mov	sl, r0
   b8082:	468b      	mov	fp, r1
   b8084:	e640      	b.n	b7d08 <_strtod_l+0x88>
   b8086:	9a06      	ldr	r2, [sp, #24]
   b8088:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b808c:	4293      	cmp	r3, r2
   b808e:	db20      	blt.n	b80d2 <_strtod_l+0x452>
   b8090:	4c64      	ldr	r4, [pc, #400]	; (b8224 <_strtod_l+0x5a4>)
   b8092:	f1c5 050f 	rsb	r5, r5, #15
   b8096:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b809a:	4652      	mov	r2, sl
   b809c:	465b      	mov	r3, fp
   b809e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b80a2:	f7ff fa37 	bl	b7514 <__aeabi_dmul>
   b80a6:	9b06      	ldr	r3, [sp, #24]
   b80a8:	1b5d      	subs	r5, r3, r5
   b80aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b80ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   b80b2:	e7e3      	b.n	b807c <_strtod_l+0x3fc>
   b80b4:	9b06      	ldr	r3, [sp, #24]
   b80b6:	3316      	adds	r3, #22
   b80b8:	db0b      	blt.n	b80d2 <_strtod_l+0x452>
   b80ba:	9b05      	ldr	r3, [sp, #20]
   b80bc:	1b9e      	subs	r6, r3, r6
   b80be:	4b59      	ldr	r3, [pc, #356]	; (b8224 <_strtod_l+0x5a4>)
   b80c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b80c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   b80c8:	4650      	mov	r0, sl
   b80ca:	4659      	mov	r1, fp
   b80cc:	f7ff fb4c 	bl	b7768 <__aeabi_ddiv>
   b80d0:	e7d6      	b.n	b8080 <_strtod_l+0x400>
   b80d2:	9b06      	ldr	r3, [sp, #24]
   b80d4:	eba5 0808 	sub.w	r8, r5, r8
   b80d8:	4498      	add	r8, r3
   b80da:	f1b8 0f00 	cmp.w	r8, #0
   b80de:	dd74      	ble.n	b81ca <_strtod_l+0x54a>
   b80e0:	f018 030f 	ands.w	r3, r8, #15
   b80e4:	d00a      	beq.n	b80fc <_strtod_l+0x47c>
   b80e6:	494f      	ldr	r1, [pc, #316]	; (b8224 <_strtod_l+0x5a4>)
   b80e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b80ec:	4652      	mov	r2, sl
   b80ee:	465b      	mov	r3, fp
   b80f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b80f4:	f7ff fa0e 	bl	b7514 <__aeabi_dmul>
   b80f8:	4682      	mov	sl, r0
   b80fa:	468b      	mov	fp, r1
   b80fc:	f038 080f 	bics.w	r8, r8, #15
   b8100:	d04f      	beq.n	b81a2 <_strtod_l+0x522>
   b8102:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b8106:	dd22      	ble.n	b814e <_strtod_l+0x4ce>
   b8108:	2500      	movs	r5, #0
   b810a:	462e      	mov	r6, r5
   b810c:	9507      	str	r5, [sp, #28]
   b810e:	9505      	str	r5, [sp, #20]
   b8110:	2322      	movs	r3, #34	; 0x22
   b8112:	f8df b118 	ldr.w	fp, [pc, #280]	; b822c <_strtod_l+0x5ac>
   b8116:	6023      	str	r3, [r4, #0]
   b8118:	f04f 0a00 	mov.w	sl, #0
   b811c:	9b07      	ldr	r3, [sp, #28]
   b811e:	2b00      	cmp	r3, #0
   b8120:	f43f adf2 	beq.w	b7d08 <_strtod_l+0x88>
   b8124:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8126:	4620      	mov	r0, r4
   b8128:	f001 f8cc 	bl	b92c4 <_Bfree>
   b812c:	9905      	ldr	r1, [sp, #20]
   b812e:	4620      	mov	r0, r4
   b8130:	f001 f8c8 	bl	b92c4 <_Bfree>
   b8134:	4631      	mov	r1, r6
   b8136:	4620      	mov	r0, r4
   b8138:	f001 f8c4 	bl	b92c4 <_Bfree>
   b813c:	9907      	ldr	r1, [sp, #28]
   b813e:	4620      	mov	r0, r4
   b8140:	f001 f8c0 	bl	b92c4 <_Bfree>
   b8144:	4629      	mov	r1, r5
   b8146:	4620      	mov	r0, r4
   b8148:	f001 f8bc 	bl	b92c4 <_Bfree>
   b814c:	e5dc      	b.n	b7d08 <_strtod_l+0x88>
   b814e:	4b36      	ldr	r3, [pc, #216]	; (b8228 <_strtod_l+0x5a8>)
   b8150:	9304      	str	r3, [sp, #16]
   b8152:	2300      	movs	r3, #0
   b8154:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8158:	4650      	mov	r0, sl
   b815a:	4659      	mov	r1, fp
   b815c:	4699      	mov	r9, r3
   b815e:	f1b8 0f01 	cmp.w	r8, #1
   b8162:	dc21      	bgt.n	b81a8 <_strtod_l+0x528>
   b8164:	b10b      	cbz	r3, b816a <_strtod_l+0x4ea>
   b8166:	4682      	mov	sl, r0
   b8168:	468b      	mov	fp, r1
   b816a:	4b2f      	ldr	r3, [pc, #188]	; (b8228 <_strtod_l+0x5a8>)
   b816c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8170:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b8174:	4652      	mov	r2, sl
   b8176:	465b      	mov	r3, fp
   b8178:	e9d9 0100 	ldrd	r0, r1, [r9]
   b817c:	f7ff f9ca 	bl	b7514 <__aeabi_dmul>
   b8180:	4b2a      	ldr	r3, [pc, #168]	; (b822c <_strtod_l+0x5ac>)
   b8182:	460a      	mov	r2, r1
   b8184:	400b      	ands	r3, r1
   b8186:	492a      	ldr	r1, [pc, #168]	; (b8230 <_strtod_l+0x5b0>)
   b8188:	428b      	cmp	r3, r1
   b818a:	4682      	mov	sl, r0
   b818c:	d8bc      	bhi.n	b8108 <_strtod_l+0x488>
   b818e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b8192:	428b      	cmp	r3, r1
   b8194:	bf86      	itte	hi
   b8196:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8234 <_strtod_l+0x5b4>
   b819a:	f04f 3aff 	movhi.w	sl, #4294967295
   b819e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b81a2:	2300      	movs	r3, #0
   b81a4:	9304      	str	r3, [sp, #16]
   b81a6:	e084      	b.n	b82b2 <_strtod_l+0x632>
   b81a8:	f018 0f01 	tst.w	r8, #1
   b81ac:	d005      	beq.n	b81ba <_strtod_l+0x53a>
   b81ae:	9b04      	ldr	r3, [sp, #16]
   b81b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b81b4:	f7ff f9ae 	bl	b7514 <__aeabi_dmul>
   b81b8:	2301      	movs	r3, #1
   b81ba:	9a04      	ldr	r2, [sp, #16]
   b81bc:	3208      	adds	r2, #8
   b81be:	f109 0901 	add.w	r9, r9, #1
   b81c2:	ea4f 0868 	mov.w	r8, r8, asr #1
   b81c6:	9204      	str	r2, [sp, #16]
   b81c8:	e7c9      	b.n	b815e <_strtod_l+0x4de>
   b81ca:	d0ea      	beq.n	b81a2 <_strtod_l+0x522>
   b81cc:	f1c8 0800 	rsb	r8, r8, #0
   b81d0:	f018 020f 	ands.w	r2, r8, #15
   b81d4:	d00a      	beq.n	b81ec <_strtod_l+0x56c>
   b81d6:	4b13      	ldr	r3, [pc, #76]	; (b8224 <_strtod_l+0x5a4>)
   b81d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b81dc:	4650      	mov	r0, sl
   b81de:	4659      	mov	r1, fp
   b81e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b81e4:	f7ff fac0 	bl	b7768 <__aeabi_ddiv>
   b81e8:	4682      	mov	sl, r0
   b81ea:	468b      	mov	fp, r1
   b81ec:	ea5f 1828 	movs.w	r8, r8, asr #4
   b81f0:	d0d7      	beq.n	b81a2 <_strtod_l+0x522>
   b81f2:	f1b8 0f1f 	cmp.w	r8, #31
   b81f6:	dd1f      	ble.n	b8238 <_strtod_l+0x5b8>
   b81f8:	2500      	movs	r5, #0
   b81fa:	462e      	mov	r6, r5
   b81fc:	9507      	str	r5, [sp, #28]
   b81fe:	9505      	str	r5, [sp, #20]
   b8200:	2322      	movs	r3, #34	; 0x22
   b8202:	f04f 0a00 	mov.w	sl, #0
   b8206:	f04f 0b00 	mov.w	fp, #0
   b820a:	6023      	str	r3, [r4, #0]
   b820c:	e786      	b.n	b811c <_strtod_l+0x49c>
   b820e:	bf00      	nop
   b8210:	000ba206 	.word	0x000ba206
   b8214:	000ba220 	.word	0x000ba220
   b8218:	000ba1fd 	.word	0x000ba1fd
   b821c:	000ba200 	.word	0x000ba200
   b8220:	000b9d1a 	.word	0x000b9d1a
   b8224:	000ba538 	.word	0x000ba538
   b8228:	000ba510 	.word	0x000ba510
   b822c:	7ff00000 	.word	0x7ff00000
   b8230:	7ca00000 	.word	0x7ca00000
   b8234:	7fefffff 	.word	0x7fefffff
   b8238:	f018 0310 	ands.w	r3, r8, #16
   b823c:	bf18      	it	ne
   b823e:	236a      	movne	r3, #106	; 0x6a
   b8240:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b85f0 <_strtod_l+0x970>
   b8244:	9304      	str	r3, [sp, #16]
   b8246:	4650      	mov	r0, sl
   b8248:	4659      	mov	r1, fp
   b824a:	2300      	movs	r3, #0
   b824c:	f018 0f01 	tst.w	r8, #1
   b8250:	d004      	beq.n	b825c <_strtod_l+0x5dc>
   b8252:	e9d9 2300 	ldrd	r2, r3, [r9]
   b8256:	f7ff f95d 	bl	b7514 <__aeabi_dmul>
   b825a:	2301      	movs	r3, #1
   b825c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8260:	f109 0908 	add.w	r9, r9, #8
   b8264:	d1f2      	bne.n	b824c <_strtod_l+0x5cc>
   b8266:	b10b      	cbz	r3, b826c <_strtod_l+0x5ec>
   b8268:	4682      	mov	sl, r0
   b826a:	468b      	mov	fp, r1
   b826c:	9b04      	ldr	r3, [sp, #16]
   b826e:	b1c3      	cbz	r3, b82a2 <_strtod_l+0x622>
   b8270:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b8274:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8278:	2b00      	cmp	r3, #0
   b827a:	4659      	mov	r1, fp
   b827c:	dd11      	ble.n	b82a2 <_strtod_l+0x622>
   b827e:	2b1f      	cmp	r3, #31
   b8280:	f340 8124 	ble.w	b84cc <_strtod_l+0x84c>
   b8284:	2b34      	cmp	r3, #52	; 0x34
   b8286:	bfde      	ittt	le
   b8288:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b828c:	f04f 33ff 	movle.w	r3, #4294967295
   b8290:	fa03 f202 	lslle.w	r2, r3, r2
   b8294:	f04f 0a00 	mov.w	sl, #0
   b8298:	bfcc      	ite	gt
   b829a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b829e:	ea02 0b01 	andle.w	fp, r2, r1
   b82a2:	2200      	movs	r2, #0
   b82a4:	2300      	movs	r3, #0
   b82a6:	4650      	mov	r0, sl
   b82a8:	4659      	mov	r1, fp
   b82aa:	f7ff fb9b 	bl	b79e4 <__aeabi_dcmpeq>
   b82ae:	2800      	cmp	r0, #0
   b82b0:	d1a2      	bne.n	b81f8 <_strtod_l+0x578>
   b82b2:	9b07      	ldr	r3, [sp, #28]
   b82b4:	9300      	str	r3, [sp, #0]
   b82b6:	9908      	ldr	r1, [sp, #32]
   b82b8:	462b      	mov	r3, r5
   b82ba:	463a      	mov	r2, r7
   b82bc:	4620      	mov	r0, r4
   b82be:	f001 f869 	bl	b9394 <__s2b>
   b82c2:	9007      	str	r0, [sp, #28]
   b82c4:	2800      	cmp	r0, #0
   b82c6:	f43f af1f 	beq.w	b8108 <_strtod_l+0x488>
   b82ca:	9b05      	ldr	r3, [sp, #20]
   b82cc:	1b9e      	subs	r6, r3, r6
   b82ce:	9b06      	ldr	r3, [sp, #24]
   b82d0:	2b00      	cmp	r3, #0
   b82d2:	bfb4      	ite	lt
   b82d4:	4633      	movlt	r3, r6
   b82d6:	2300      	movge	r3, #0
   b82d8:	930c      	str	r3, [sp, #48]	; 0x30
   b82da:	9b06      	ldr	r3, [sp, #24]
   b82dc:	2500      	movs	r5, #0
   b82de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b82e2:	9312      	str	r3, [sp, #72]	; 0x48
   b82e4:	462e      	mov	r6, r5
   b82e6:	9b07      	ldr	r3, [sp, #28]
   b82e8:	4620      	mov	r0, r4
   b82ea:	6859      	ldr	r1, [r3, #4]
   b82ec:	f000 ffaa 	bl	b9244 <_Balloc>
   b82f0:	9005      	str	r0, [sp, #20]
   b82f2:	2800      	cmp	r0, #0
   b82f4:	f43f af0c 	beq.w	b8110 <_strtod_l+0x490>
   b82f8:	9b07      	ldr	r3, [sp, #28]
   b82fa:	691a      	ldr	r2, [r3, #16]
   b82fc:	3202      	adds	r2, #2
   b82fe:	f103 010c 	add.w	r1, r3, #12
   b8302:	0092      	lsls	r2, r2, #2
   b8304:	300c      	adds	r0, #12
   b8306:	f7ff fbfe 	bl	b7b06 <memcpy>
   b830a:	ec4b ab10 	vmov	d0, sl, fp
   b830e:	aa1a      	add	r2, sp, #104	; 0x68
   b8310:	a919      	add	r1, sp, #100	; 0x64
   b8312:	4620      	mov	r0, r4
   b8314:	f001 fb84 	bl	b9a20 <__d2b>
   b8318:	ec4b ab18 	vmov	d8, sl, fp
   b831c:	9018      	str	r0, [sp, #96]	; 0x60
   b831e:	2800      	cmp	r0, #0
   b8320:	f43f aef6 	beq.w	b8110 <_strtod_l+0x490>
   b8324:	2101      	movs	r1, #1
   b8326:	4620      	mov	r0, r4
   b8328:	f001 f8ce 	bl	b94c8 <__i2b>
   b832c:	4606      	mov	r6, r0
   b832e:	2800      	cmp	r0, #0
   b8330:	f43f aeee 	beq.w	b8110 <_strtod_l+0x490>
   b8334:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8336:	9904      	ldr	r1, [sp, #16]
   b8338:	2b00      	cmp	r3, #0
   b833a:	bfab      	itete	ge
   b833c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b833e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8340:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8342:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8346:	bfac      	ite	ge
   b8348:	eb03 0902 	addge.w	r9, r3, r2
   b834c:	1ad7      	sublt	r7, r2, r3
   b834e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8350:	eba3 0801 	sub.w	r8, r3, r1
   b8354:	4490      	add	r8, r2
   b8356:	4ba1      	ldr	r3, [pc, #644]	; (b85dc <_strtod_l+0x95c>)
   b8358:	f108 38ff 	add.w	r8, r8, #4294967295
   b835c:	4598      	cmp	r8, r3
   b835e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8362:	f280 80c7 	bge.w	b84f4 <_strtod_l+0x874>
   b8366:	eba3 0308 	sub.w	r3, r3, r8
   b836a:	2b1f      	cmp	r3, #31
   b836c:	eba2 0203 	sub.w	r2, r2, r3
   b8370:	f04f 0101 	mov.w	r1, #1
   b8374:	f300 80b1 	bgt.w	b84da <_strtod_l+0x85a>
   b8378:	fa01 f303 	lsl.w	r3, r1, r3
   b837c:	930d      	str	r3, [sp, #52]	; 0x34
   b837e:	2300      	movs	r3, #0
   b8380:	9308      	str	r3, [sp, #32]
   b8382:	eb09 0802 	add.w	r8, r9, r2
   b8386:	9b04      	ldr	r3, [sp, #16]
   b8388:	45c1      	cmp	r9, r8
   b838a:	4417      	add	r7, r2
   b838c:	441f      	add	r7, r3
   b838e:	464b      	mov	r3, r9
   b8390:	bfa8      	it	ge
   b8392:	4643      	movge	r3, r8
   b8394:	42bb      	cmp	r3, r7
   b8396:	bfa8      	it	ge
   b8398:	463b      	movge	r3, r7
   b839a:	2b00      	cmp	r3, #0
   b839c:	bfc2      	ittt	gt
   b839e:	eba8 0803 	subgt.w	r8, r8, r3
   b83a2:	1aff      	subgt	r7, r7, r3
   b83a4:	eba9 0903 	subgt.w	r9, r9, r3
   b83a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b83aa:	2b00      	cmp	r3, #0
   b83ac:	dd17      	ble.n	b83de <_strtod_l+0x75e>
   b83ae:	4631      	mov	r1, r6
   b83b0:	461a      	mov	r2, r3
   b83b2:	4620      	mov	r0, r4
   b83b4:	f001 f948 	bl	b9648 <__pow5mult>
   b83b8:	4606      	mov	r6, r0
   b83ba:	2800      	cmp	r0, #0
   b83bc:	f43f aea8 	beq.w	b8110 <_strtod_l+0x490>
   b83c0:	4601      	mov	r1, r0
   b83c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b83c4:	4620      	mov	r0, r4
   b83c6:	f001 f895 	bl	b94f4 <__multiply>
   b83ca:	900b      	str	r0, [sp, #44]	; 0x2c
   b83cc:	2800      	cmp	r0, #0
   b83ce:	f43f ae9f 	beq.w	b8110 <_strtod_l+0x490>
   b83d2:	9918      	ldr	r1, [sp, #96]	; 0x60
   b83d4:	4620      	mov	r0, r4
   b83d6:	f000 ff75 	bl	b92c4 <_Bfree>
   b83da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b83dc:	9318      	str	r3, [sp, #96]	; 0x60
   b83de:	f1b8 0f00 	cmp.w	r8, #0
   b83e2:	f300 808c 	bgt.w	b84fe <_strtod_l+0x87e>
   b83e6:	9b06      	ldr	r3, [sp, #24]
   b83e8:	2b00      	cmp	r3, #0
   b83ea:	dd08      	ble.n	b83fe <_strtod_l+0x77e>
   b83ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b83ee:	9905      	ldr	r1, [sp, #20]
   b83f0:	4620      	mov	r0, r4
   b83f2:	f001 f929 	bl	b9648 <__pow5mult>
   b83f6:	9005      	str	r0, [sp, #20]
   b83f8:	2800      	cmp	r0, #0
   b83fa:	f43f ae89 	beq.w	b8110 <_strtod_l+0x490>
   b83fe:	2f00      	cmp	r7, #0
   b8400:	dd08      	ble.n	b8414 <_strtod_l+0x794>
   b8402:	9905      	ldr	r1, [sp, #20]
   b8404:	463a      	mov	r2, r7
   b8406:	4620      	mov	r0, r4
   b8408:	f001 f978 	bl	b96fc <__lshift>
   b840c:	9005      	str	r0, [sp, #20]
   b840e:	2800      	cmp	r0, #0
   b8410:	f43f ae7e 	beq.w	b8110 <_strtod_l+0x490>
   b8414:	f1b9 0f00 	cmp.w	r9, #0
   b8418:	dd08      	ble.n	b842c <_strtod_l+0x7ac>
   b841a:	4631      	mov	r1, r6
   b841c:	464a      	mov	r2, r9
   b841e:	4620      	mov	r0, r4
   b8420:	f001 f96c 	bl	b96fc <__lshift>
   b8424:	4606      	mov	r6, r0
   b8426:	2800      	cmp	r0, #0
   b8428:	f43f ae72 	beq.w	b8110 <_strtod_l+0x490>
   b842c:	9a05      	ldr	r2, [sp, #20]
   b842e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8430:	4620      	mov	r0, r4
   b8432:	f001 f9ef 	bl	b9814 <__mdiff>
   b8436:	4605      	mov	r5, r0
   b8438:	2800      	cmp	r0, #0
   b843a:	f43f ae69 	beq.w	b8110 <_strtod_l+0x490>
   b843e:	68c3      	ldr	r3, [r0, #12]
   b8440:	930b      	str	r3, [sp, #44]	; 0x2c
   b8442:	2300      	movs	r3, #0
   b8444:	60c3      	str	r3, [r0, #12]
   b8446:	4631      	mov	r1, r6
   b8448:	f001 f9c8 	bl	b97dc <__mcmp>
   b844c:	2800      	cmp	r0, #0
   b844e:	da60      	bge.n	b8512 <_strtod_l+0x892>
   b8450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8452:	ea53 030a 	orrs.w	r3, r3, sl
   b8456:	f040 8082 	bne.w	b855e <_strtod_l+0x8de>
   b845a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b845e:	2b00      	cmp	r3, #0
   b8460:	d17d      	bne.n	b855e <_strtod_l+0x8de>
   b8462:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8466:	0d1b      	lsrs	r3, r3, #20
   b8468:	051b      	lsls	r3, r3, #20
   b846a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b846e:	d976      	bls.n	b855e <_strtod_l+0x8de>
   b8470:	696b      	ldr	r3, [r5, #20]
   b8472:	b913      	cbnz	r3, b847a <_strtod_l+0x7fa>
   b8474:	692b      	ldr	r3, [r5, #16]
   b8476:	2b01      	cmp	r3, #1
   b8478:	dd71      	ble.n	b855e <_strtod_l+0x8de>
   b847a:	4629      	mov	r1, r5
   b847c:	2201      	movs	r2, #1
   b847e:	4620      	mov	r0, r4
   b8480:	f001 f93c 	bl	b96fc <__lshift>
   b8484:	4631      	mov	r1, r6
   b8486:	4605      	mov	r5, r0
   b8488:	f001 f9a8 	bl	b97dc <__mcmp>
   b848c:	2800      	cmp	r0, #0
   b848e:	dd66      	ble.n	b855e <_strtod_l+0x8de>
   b8490:	9904      	ldr	r1, [sp, #16]
   b8492:	4a53      	ldr	r2, [pc, #332]	; (b85e0 <_strtod_l+0x960>)
   b8494:	465b      	mov	r3, fp
   b8496:	2900      	cmp	r1, #0
   b8498:	f000 8081 	beq.w	b859e <_strtod_l+0x91e>
   b849c:	ea02 010b 	and.w	r1, r2, fp
   b84a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b84a4:	dc7b      	bgt.n	b859e <_strtod_l+0x91e>
   b84a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b84aa:	f77f aea9 	ble.w	b8200 <_strtod_l+0x580>
   b84ae:	4b4d      	ldr	r3, [pc, #308]	; (b85e4 <_strtod_l+0x964>)
   b84b0:	4650      	mov	r0, sl
   b84b2:	4659      	mov	r1, fp
   b84b4:	2200      	movs	r2, #0
   b84b6:	f7ff f82d 	bl	b7514 <__aeabi_dmul>
   b84ba:	460b      	mov	r3, r1
   b84bc:	4303      	orrs	r3, r0
   b84be:	bf08      	it	eq
   b84c0:	2322      	moveq	r3, #34	; 0x22
   b84c2:	4682      	mov	sl, r0
   b84c4:	468b      	mov	fp, r1
   b84c6:	bf08      	it	eq
   b84c8:	6023      	streq	r3, [r4, #0]
   b84ca:	e62b      	b.n	b8124 <_strtod_l+0x4a4>
   b84cc:	f04f 32ff 	mov.w	r2, #4294967295
   b84d0:	fa02 f303 	lsl.w	r3, r2, r3
   b84d4:	ea03 0a0a 	and.w	sl, r3, sl
   b84d8:	e6e3      	b.n	b82a2 <_strtod_l+0x622>
   b84da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b84de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b84e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b84e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b84ea:	fa01 f308 	lsl.w	r3, r1, r8
   b84ee:	9308      	str	r3, [sp, #32]
   b84f0:	910d      	str	r1, [sp, #52]	; 0x34
   b84f2:	e746      	b.n	b8382 <_strtod_l+0x702>
   b84f4:	2300      	movs	r3, #0
   b84f6:	9308      	str	r3, [sp, #32]
   b84f8:	2301      	movs	r3, #1
   b84fa:	930d      	str	r3, [sp, #52]	; 0x34
   b84fc:	e741      	b.n	b8382 <_strtod_l+0x702>
   b84fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8500:	4642      	mov	r2, r8
   b8502:	4620      	mov	r0, r4
   b8504:	f001 f8fa 	bl	b96fc <__lshift>
   b8508:	9018      	str	r0, [sp, #96]	; 0x60
   b850a:	2800      	cmp	r0, #0
   b850c:	f47f af6b 	bne.w	b83e6 <_strtod_l+0x766>
   b8510:	e5fe      	b.n	b8110 <_strtod_l+0x490>
   b8512:	465f      	mov	r7, fp
   b8514:	d16e      	bne.n	b85f4 <_strtod_l+0x974>
   b8516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8518:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b851c:	b342      	cbz	r2, b8570 <_strtod_l+0x8f0>
   b851e:	4a32      	ldr	r2, [pc, #200]	; (b85e8 <_strtod_l+0x968>)
   b8520:	4293      	cmp	r3, r2
   b8522:	d128      	bne.n	b8576 <_strtod_l+0x8f6>
   b8524:	9b04      	ldr	r3, [sp, #16]
   b8526:	4651      	mov	r1, sl
   b8528:	b1eb      	cbz	r3, b8566 <_strtod_l+0x8e6>
   b852a:	4b2d      	ldr	r3, [pc, #180]	; (b85e0 <_strtod_l+0x960>)
   b852c:	403b      	ands	r3, r7
   b852e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8532:	f04f 32ff 	mov.w	r2, #4294967295
   b8536:	d819      	bhi.n	b856c <_strtod_l+0x8ec>
   b8538:	0d1b      	lsrs	r3, r3, #20
   b853a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b853e:	fa02 f303 	lsl.w	r3, r2, r3
   b8542:	4299      	cmp	r1, r3
   b8544:	d117      	bne.n	b8576 <_strtod_l+0x8f6>
   b8546:	4b29      	ldr	r3, [pc, #164]	; (b85ec <_strtod_l+0x96c>)
   b8548:	429f      	cmp	r7, r3
   b854a:	d102      	bne.n	b8552 <_strtod_l+0x8d2>
   b854c:	3101      	adds	r1, #1
   b854e:	f43f addf 	beq.w	b8110 <_strtod_l+0x490>
   b8552:	4b23      	ldr	r3, [pc, #140]	; (b85e0 <_strtod_l+0x960>)
   b8554:	403b      	ands	r3, r7
   b8556:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b855a:	f04f 0a00 	mov.w	sl, #0
   b855e:	9b04      	ldr	r3, [sp, #16]
   b8560:	2b00      	cmp	r3, #0
   b8562:	d1a4      	bne.n	b84ae <_strtod_l+0x82e>
   b8564:	e5de      	b.n	b8124 <_strtod_l+0x4a4>
   b8566:	f04f 33ff 	mov.w	r3, #4294967295
   b856a:	e7ea      	b.n	b8542 <_strtod_l+0x8c2>
   b856c:	4613      	mov	r3, r2
   b856e:	e7e8      	b.n	b8542 <_strtod_l+0x8c2>
   b8570:	ea53 030a 	orrs.w	r3, r3, sl
   b8574:	d08c      	beq.n	b8490 <_strtod_l+0x810>
   b8576:	9b08      	ldr	r3, [sp, #32]
   b8578:	b1db      	cbz	r3, b85b2 <_strtod_l+0x932>
   b857a:	423b      	tst	r3, r7
   b857c:	d0ef      	beq.n	b855e <_strtod_l+0x8de>
   b857e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8580:	9a04      	ldr	r2, [sp, #16]
   b8582:	4650      	mov	r0, sl
   b8584:	4659      	mov	r1, fp
   b8586:	b1c3      	cbz	r3, b85ba <_strtod_l+0x93a>
   b8588:	f7ff fb5d 	bl	b7c46 <sulp>
   b858c:	4602      	mov	r2, r0
   b858e:	460b      	mov	r3, r1
   b8590:	ec51 0b18 	vmov	r0, r1, d8
   b8594:	f7fe fe08 	bl	b71a8 <__adddf3>
   b8598:	4682      	mov	sl, r0
   b859a:	468b      	mov	fp, r1
   b859c:	e7df      	b.n	b855e <_strtod_l+0x8de>
   b859e:	4013      	ands	r3, r2
   b85a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b85a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b85a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b85ac:	f04f 3aff 	mov.w	sl, #4294967295
   b85b0:	e7d5      	b.n	b855e <_strtod_l+0x8de>
   b85b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b85b4:	ea13 0f0a 	tst.w	r3, sl
   b85b8:	e7e0      	b.n	b857c <_strtod_l+0x8fc>
   b85ba:	f7ff fb44 	bl	b7c46 <sulp>
   b85be:	4602      	mov	r2, r0
   b85c0:	460b      	mov	r3, r1
   b85c2:	ec51 0b18 	vmov	r0, r1, d8
   b85c6:	f7fe fded 	bl	b71a4 <__aeabi_dsub>
   b85ca:	2200      	movs	r2, #0
   b85cc:	2300      	movs	r3, #0
   b85ce:	4682      	mov	sl, r0
   b85d0:	468b      	mov	fp, r1
   b85d2:	f7ff fa07 	bl	b79e4 <__aeabi_dcmpeq>
   b85d6:	2800      	cmp	r0, #0
   b85d8:	d0c1      	beq.n	b855e <_strtod_l+0x8de>
   b85da:	e611      	b.n	b8200 <_strtod_l+0x580>
   b85dc:	fffffc02 	.word	0xfffffc02
   b85e0:	7ff00000 	.word	0x7ff00000
   b85e4:	39500000 	.word	0x39500000
   b85e8:	000fffff 	.word	0x000fffff
   b85ec:	7fefffff 	.word	0x7fefffff
   b85f0:	000ba238 	.word	0x000ba238
   b85f4:	4631      	mov	r1, r6
   b85f6:	4628      	mov	r0, r5
   b85f8:	f001 fa6e 	bl	b9ad8 <__ratio>
   b85fc:	ec59 8b10 	vmov	r8, r9, d0
   b8600:	ee10 0a10 	vmov	r0, s0
   b8604:	2200      	movs	r2, #0
   b8606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b860a:	4649      	mov	r1, r9
   b860c:	f7ff f9fe 	bl	b7a0c <__aeabi_dcmple>
   b8610:	2800      	cmp	r0, #0
   b8612:	d07a      	beq.n	b870a <_strtod_l+0xa8a>
   b8614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8616:	2b00      	cmp	r3, #0
   b8618:	d04a      	beq.n	b86b0 <_strtod_l+0xa30>
   b861a:	4b95      	ldr	r3, [pc, #596]	; (b8870 <_strtod_l+0xbf0>)
   b861c:	2200      	movs	r2, #0
   b861e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8622:	f8df 924c 	ldr.w	r9, [pc, #588]	; b8870 <_strtod_l+0xbf0>
   b8626:	f04f 0800 	mov.w	r8, #0
   b862a:	4b92      	ldr	r3, [pc, #584]	; (b8874 <_strtod_l+0xbf4>)
   b862c:	403b      	ands	r3, r7
   b862e:	930d      	str	r3, [sp, #52]	; 0x34
   b8630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8632:	4b91      	ldr	r3, [pc, #580]	; (b8878 <_strtod_l+0xbf8>)
   b8634:	429a      	cmp	r2, r3
   b8636:	f040 80b0 	bne.w	b879a <_strtod_l+0xb1a>
   b863a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b863e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b8642:	ec4b ab10 	vmov	d0, sl, fp
   b8646:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b864a:	f001 f96d 	bl	b9928 <__ulp>
   b864e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8652:	ec53 2b10 	vmov	r2, r3, d0
   b8656:	f7fe ff5d 	bl	b7514 <__aeabi_dmul>
   b865a:	4652      	mov	r2, sl
   b865c:	465b      	mov	r3, fp
   b865e:	f7fe fda3 	bl	b71a8 <__adddf3>
   b8662:	460b      	mov	r3, r1
   b8664:	4983      	ldr	r1, [pc, #524]	; (b8874 <_strtod_l+0xbf4>)
   b8666:	4a85      	ldr	r2, [pc, #532]	; (b887c <_strtod_l+0xbfc>)
   b8668:	4019      	ands	r1, r3
   b866a:	4291      	cmp	r1, r2
   b866c:	4682      	mov	sl, r0
   b866e:	d960      	bls.n	b8732 <_strtod_l+0xab2>
   b8670:	ee18 3a90 	vmov	r3, s17
   b8674:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8678:	4293      	cmp	r3, r2
   b867a:	d104      	bne.n	b8686 <_strtod_l+0xa06>
   b867c:	ee18 3a10 	vmov	r3, s16
   b8680:	3301      	adds	r3, #1
   b8682:	f43f ad45 	beq.w	b8110 <_strtod_l+0x490>
   b8686:	f8df b200 	ldr.w	fp, [pc, #512]	; b8888 <_strtod_l+0xc08>
   b868a:	f04f 3aff 	mov.w	sl, #4294967295
   b868e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8690:	4620      	mov	r0, r4
   b8692:	f000 fe17 	bl	b92c4 <_Bfree>
   b8696:	9905      	ldr	r1, [sp, #20]
   b8698:	4620      	mov	r0, r4
   b869a:	f000 fe13 	bl	b92c4 <_Bfree>
   b869e:	4631      	mov	r1, r6
   b86a0:	4620      	mov	r0, r4
   b86a2:	f000 fe0f 	bl	b92c4 <_Bfree>
   b86a6:	4629      	mov	r1, r5
   b86a8:	4620      	mov	r0, r4
   b86aa:	f000 fe0b 	bl	b92c4 <_Bfree>
   b86ae:	e61a      	b.n	b82e6 <_strtod_l+0x666>
   b86b0:	f1ba 0f00 	cmp.w	sl, #0
   b86b4:	d11b      	bne.n	b86ee <_strtod_l+0xa6e>
   b86b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b86ba:	b9f3      	cbnz	r3, b86fa <_strtod_l+0xa7a>
   b86bc:	4b6c      	ldr	r3, [pc, #432]	; (b8870 <_strtod_l+0xbf0>)
   b86be:	2200      	movs	r2, #0
   b86c0:	4640      	mov	r0, r8
   b86c2:	4649      	mov	r1, r9
   b86c4:	f7ff f998 	bl	b79f8 <__aeabi_dcmplt>
   b86c8:	b9d0      	cbnz	r0, b8700 <_strtod_l+0xa80>
   b86ca:	4640      	mov	r0, r8
   b86cc:	4649      	mov	r1, r9
   b86ce:	4b6c      	ldr	r3, [pc, #432]	; (b8880 <_strtod_l+0xc00>)
   b86d0:	2200      	movs	r2, #0
   b86d2:	f7fe ff1f 	bl	b7514 <__aeabi_dmul>
   b86d6:	4680      	mov	r8, r0
   b86d8:	4689      	mov	r9, r1
   b86da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b86de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b86e2:	9315      	str	r3, [sp, #84]	; 0x54
   b86e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b86e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b86ec:	e79d      	b.n	b862a <_strtod_l+0x9aa>
   b86ee:	f1ba 0f01 	cmp.w	sl, #1
   b86f2:	d102      	bne.n	b86fa <_strtod_l+0xa7a>
   b86f4:	2f00      	cmp	r7, #0
   b86f6:	f43f ad83 	beq.w	b8200 <_strtod_l+0x580>
   b86fa:	4b62      	ldr	r3, [pc, #392]	; (b8884 <_strtod_l+0xc04>)
   b86fc:	2200      	movs	r2, #0
   b86fe:	e78e      	b.n	b861e <_strtod_l+0x99e>
   b8700:	f8df 917c 	ldr.w	r9, [pc, #380]	; b8880 <_strtod_l+0xc00>
   b8704:	f04f 0800 	mov.w	r8, #0
   b8708:	e7e7      	b.n	b86da <_strtod_l+0xa5a>
   b870a:	4b5d      	ldr	r3, [pc, #372]	; (b8880 <_strtod_l+0xc00>)
   b870c:	4640      	mov	r0, r8
   b870e:	4649      	mov	r1, r9
   b8710:	2200      	movs	r2, #0
   b8712:	f7fe feff 	bl	b7514 <__aeabi_dmul>
   b8716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8718:	4680      	mov	r8, r0
   b871a:	4689      	mov	r9, r1
   b871c:	b933      	cbnz	r3, b872c <_strtod_l+0xaac>
   b871e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8722:	900e      	str	r0, [sp, #56]	; 0x38
   b8724:	930f      	str	r3, [sp, #60]	; 0x3c
   b8726:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b872a:	e7dd      	b.n	b86e8 <_strtod_l+0xa68>
   b872c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b8730:	e7f9      	b.n	b8726 <_strtod_l+0xaa6>
   b8732:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b8736:	9b04      	ldr	r3, [sp, #16]
   b8738:	2b00      	cmp	r3, #0
   b873a:	d1a8      	bne.n	b868e <_strtod_l+0xa0e>
   b873c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8742:	0d1b      	lsrs	r3, r3, #20
   b8744:	051b      	lsls	r3, r3, #20
   b8746:	429a      	cmp	r2, r3
   b8748:	d1a1      	bne.n	b868e <_strtod_l+0xa0e>
   b874a:	4640      	mov	r0, r8
   b874c:	4649      	mov	r1, r9
   b874e:	f001 fa61 	bl	b9c14 <__aeabi_d2lz>
   b8752:	f7fe feb1 	bl	b74b8 <__aeabi_l2d>
   b8756:	4602      	mov	r2, r0
   b8758:	460b      	mov	r3, r1
   b875a:	4640      	mov	r0, r8
   b875c:	4649      	mov	r1, r9
   b875e:	f7fe fd21 	bl	b71a4 <__aeabi_dsub>
   b8762:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8764:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8768:	ea43 030a 	orr.w	r3, r3, sl
   b876c:	4313      	orrs	r3, r2
   b876e:	4680      	mov	r8, r0
   b8770:	4689      	mov	r9, r1
   b8772:	d055      	beq.n	b8820 <_strtod_l+0xba0>
   b8774:	a336      	add	r3, pc, #216	; (adr r3, b8850 <_strtod_l+0xbd0>)
   b8776:	e9d3 2300 	ldrd	r2, r3, [r3]
   b877a:	f7ff f93d 	bl	b79f8 <__aeabi_dcmplt>
   b877e:	2800      	cmp	r0, #0
   b8780:	f47f acd0 	bne.w	b8124 <_strtod_l+0x4a4>
   b8784:	a334      	add	r3, pc, #208	; (adr r3, b8858 <_strtod_l+0xbd8>)
   b8786:	e9d3 2300 	ldrd	r2, r3, [r3]
   b878a:	4640      	mov	r0, r8
   b878c:	4649      	mov	r1, r9
   b878e:	f7ff f951 	bl	b7a34 <__aeabi_dcmpgt>
   b8792:	2800      	cmp	r0, #0
   b8794:	f43f af7b 	beq.w	b868e <_strtod_l+0xa0e>
   b8798:	e4c4      	b.n	b8124 <_strtod_l+0x4a4>
   b879a:	9b04      	ldr	r3, [sp, #16]
   b879c:	b333      	cbz	r3, b87ec <_strtod_l+0xb6c>
   b879e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b87a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b87a4:	d822      	bhi.n	b87ec <_strtod_l+0xb6c>
   b87a6:	a32e      	add	r3, pc, #184	; (adr r3, b8860 <_strtod_l+0xbe0>)
   b87a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87ac:	4640      	mov	r0, r8
   b87ae:	4649      	mov	r1, r9
   b87b0:	f7ff f92c 	bl	b7a0c <__aeabi_dcmple>
   b87b4:	b1a0      	cbz	r0, b87e0 <_strtod_l+0xb60>
   b87b6:	4649      	mov	r1, r9
   b87b8:	4640      	mov	r0, r8
   b87ba:	f7ff f945 	bl	b7a48 <__aeabi_d2uiz>
   b87be:	2801      	cmp	r0, #1
   b87c0:	bf38      	it	cc
   b87c2:	2001      	movcc	r0, #1
   b87c4:	f7fe fe2c 	bl	b7420 <__aeabi_ui2d>
   b87c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b87ca:	4680      	mov	r8, r0
   b87cc:	4689      	mov	r9, r1
   b87ce:	bb23      	cbnz	r3, b881a <_strtod_l+0xb9a>
   b87d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b87d4:	9010      	str	r0, [sp, #64]	; 0x40
   b87d6:	9311      	str	r3, [sp, #68]	; 0x44
   b87d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b87dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b87e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b87e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b87e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b87e8:	1a9b      	subs	r3, r3, r2
   b87ea:	9309      	str	r3, [sp, #36]	; 0x24
   b87ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b87f0:	eeb0 0a48 	vmov.f32	s0, s16
   b87f4:	eef0 0a68 	vmov.f32	s1, s17
   b87f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b87fc:	f001 f894 	bl	b9928 <__ulp>
   b8800:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8804:	ec53 2b10 	vmov	r2, r3, d0
   b8808:	f7fe fe84 	bl	b7514 <__aeabi_dmul>
   b880c:	ec53 2b18 	vmov	r2, r3, d8
   b8810:	f7fe fcca 	bl	b71a8 <__adddf3>
   b8814:	4682      	mov	sl, r0
   b8816:	468b      	mov	fp, r1
   b8818:	e78d      	b.n	b8736 <_strtod_l+0xab6>
   b881a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b881e:	e7db      	b.n	b87d8 <_strtod_l+0xb58>
   b8820:	a311      	add	r3, pc, #68	; (adr r3, b8868 <_strtod_l+0xbe8>)
   b8822:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8826:	f7ff f8e7 	bl	b79f8 <__aeabi_dcmplt>
   b882a:	e7b2      	b.n	b8792 <_strtod_l+0xb12>
   b882c:	2300      	movs	r3, #0
   b882e:	930a      	str	r3, [sp, #40]	; 0x28
   b8830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b8832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8834:	6013      	str	r3, [r2, #0]
   b8836:	f7ff ba6b 	b.w	b7d10 <_strtod_l+0x90>
   b883a:	2a65      	cmp	r2, #101	; 0x65
   b883c:	f43f ab5f 	beq.w	b7efe <_strtod_l+0x27e>
   b8840:	2a45      	cmp	r2, #69	; 0x45
   b8842:	f43f ab5c 	beq.w	b7efe <_strtod_l+0x27e>
   b8846:	2301      	movs	r3, #1
   b8848:	f7ff bb94 	b.w	b7f74 <_strtod_l+0x2f4>
   b884c:	f3af 8000 	nop.w
   b8850:	94a03595 	.word	0x94a03595
   b8854:	3fdfffff 	.word	0x3fdfffff
   b8858:	35afe535 	.word	0x35afe535
   b885c:	3fe00000 	.word	0x3fe00000
   b8860:	ffc00000 	.word	0xffc00000
   b8864:	41dfffff 	.word	0x41dfffff
   b8868:	94a03595 	.word	0x94a03595
   b886c:	3fcfffff 	.word	0x3fcfffff
   b8870:	3ff00000 	.word	0x3ff00000
   b8874:	7ff00000 	.word	0x7ff00000
   b8878:	7fe00000 	.word	0x7fe00000
   b887c:	7c9fffff 	.word	0x7c9fffff
   b8880:	3fe00000 	.word	0x3fe00000
   b8884:	bff00000 	.word	0xbff00000
   b8888:	7fefffff 	.word	0x7fefffff

000b888c <strtod>:
   b888c:	460a      	mov	r2, r1
   b888e:	4601      	mov	r1, r0
   b8890:	4802      	ldr	r0, [pc, #8]	; (b889c <strtod+0x10>)
   b8892:	4b03      	ldr	r3, [pc, #12]	; (b88a0 <strtod+0x14>)
   b8894:	6800      	ldr	r0, [r0, #0]
   b8896:	f7ff b9f3 	b.w	b7c80 <_strtod_l>
   b889a:	bf00      	nop
   b889c:	2003ccf8 	.word	0x2003ccf8
   b88a0:	2003cd64 	.word	0x2003cd64

000b88a4 <strtok>:
   b88a4:	4b16      	ldr	r3, [pc, #88]	; (b8900 <strtok+0x5c>)
   b88a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b88a8:	681e      	ldr	r6, [r3, #0]
   b88aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b88ac:	4605      	mov	r5, r0
   b88ae:	b9fc      	cbnz	r4, b88f0 <strtok+0x4c>
   b88b0:	2050      	movs	r0, #80	; 0x50
   b88b2:	9101      	str	r1, [sp, #4]
   b88b4:	f7fc fe4c 	bl	b5550 <malloc>
   b88b8:	9901      	ldr	r1, [sp, #4]
   b88ba:	65b0      	str	r0, [r6, #88]	; 0x58
   b88bc:	4602      	mov	r2, r0
   b88be:	b920      	cbnz	r0, b88ca <strtok+0x26>
   b88c0:	4b10      	ldr	r3, [pc, #64]	; (b8904 <strtok+0x60>)
   b88c2:	4811      	ldr	r0, [pc, #68]	; (b8908 <strtok+0x64>)
   b88c4:	2157      	movs	r1, #87	; 0x57
   b88c6:	f7fc fe8b 	bl	b55e0 <__assert_func>
   b88ca:	e9c0 4400 	strd	r4, r4, [r0]
   b88ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b88d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b88d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b88da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b88de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b88e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b88e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b88ea:	6184      	str	r4, [r0, #24]
   b88ec:	7704      	strb	r4, [r0, #28]
   b88ee:	6244      	str	r4, [r0, #36]	; 0x24
   b88f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b88f2:	2301      	movs	r3, #1
   b88f4:	4628      	mov	r0, r5
   b88f6:	b002      	add	sp, #8
   b88f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b88fc:	f000 b806 	b.w	b890c <__strtok_r>
   b8900:	2003ccf8 	.word	0x2003ccf8
   b8904:	000ba169 	.word	0x000ba169
   b8908:	000ba260 	.word	0x000ba260

000b890c <__strtok_r>:
   b890c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b890e:	b908      	cbnz	r0, b8914 <__strtok_r+0x8>
   b8910:	6810      	ldr	r0, [r2, #0]
   b8912:	b188      	cbz	r0, b8938 <__strtok_r+0x2c>
   b8914:	4604      	mov	r4, r0
   b8916:	4620      	mov	r0, r4
   b8918:	f814 5b01 	ldrb.w	r5, [r4], #1
   b891c:	460f      	mov	r7, r1
   b891e:	f817 6b01 	ldrb.w	r6, [r7], #1
   b8922:	b91e      	cbnz	r6, b892c <__strtok_r+0x20>
   b8924:	b965      	cbnz	r5, b8940 <__strtok_r+0x34>
   b8926:	6015      	str	r5, [r2, #0]
   b8928:	4628      	mov	r0, r5
   b892a:	e005      	b.n	b8938 <__strtok_r+0x2c>
   b892c:	42b5      	cmp	r5, r6
   b892e:	d1f6      	bne.n	b891e <__strtok_r+0x12>
   b8930:	2b00      	cmp	r3, #0
   b8932:	d1f0      	bne.n	b8916 <__strtok_r+0xa>
   b8934:	6014      	str	r4, [r2, #0]
   b8936:	7003      	strb	r3, [r0, #0]
   b8938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b893a:	461c      	mov	r4, r3
   b893c:	e00c      	b.n	b8958 <__strtok_r+0x4c>
   b893e:	b915      	cbnz	r5, b8946 <__strtok_r+0x3a>
   b8940:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8944:	460e      	mov	r6, r1
   b8946:	f816 5b01 	ldrb.w	r5, [r6], #1
   b894a:	42ab      	cmp	r3, r5
   b894c:	d1f7      	bne.n	b893e <__strtok_r+0x32>
   b894e:	2b00      	cmp	r3, #0
   b8950:	d0f3      	beq.n	b893a <__strtok_r+0x2e>
   b8952:	2300      	movs	r3, #0
   b8954:	f804 3c01 	strb.w	r3, [r4, #-1]
   b8958:	6014      	str	r4, [r2, #0]
   b895a:	e7ed      	b.n	b8938 <__strtok_r+0x2c>

000b895c <_strtol_l.constprop.0>:
   b895c:	2b01      	cmp	r3, #1
   b895e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8962:	d001      	beq.n	b8968 <_strtol_l.constprop.0+0xc>
   b8964:	2b24      	cmp	r3, #36	; 0x24
   b8966:	d906      	bls.n	b8976 <_strtol_l.constprop.0+0x1a>
   b8968:	f7fc fe32 	bl	b55d0 <__errno>
   b896c:	2316      	movs	r3, #22
   b896e:	6003      	str	r3, [r0, #0]
   b8970:	2000      	movs	r0, #0
   b8972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8976:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8a5c <_strtol_l.constprop.0+0x100>
   b897a:	460d      	mov	r5, r1
   b897c:	462e      	mov	r6, r5
   b897e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8982:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8986:	f017 0708 	ands.w	r7, r7, #8
   b898a:	d1f7      	bne.n	b897c <_strtol_l.constprop.0+0x20>
   b898c:	2c2d      	cmp	r4, #45	; 0x2d
   b898e:	d132      	bne.n	b89f6 <_strtol_l.constprop.0+0x9a>
   b8990:	782c      	ldrb	r4, [r5, #0]
   b8992:	2701      	movs	r7, #1
   b8994:	1cb5      	adds	r5, r6, #2
   b8996:	2b00      	cmp	r3, #0
   b8998:	d05b      	beq.n	b8a52 <_strtol_l.constprop.0+0xf6>
   b899a:	2b10      	cmp	r3, #16
   b899c:	d109      	bne.n	b89b2 <_strtol_l.constprop.0+0x56>
   b899e:	2c30      	cmp	r4, #48	; 0x30
   b89a0:	d107      	bne.n	b89b2 <_strtol_l.constprop.0+0x56>
   b89a2:	782c      	ldrb	r4, [r5, #0]
   b89a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b89a8:	2c58      	cmp	r4, #88	; 0x58
   b89aa:	d14d      	bne.n	b8a48 <_strtol_l.constprop.0+0xec>
   b89ac:	786c      	ldrb	r4, [r5, #1]
   b89ae:	2310      	movs	r3, #16
   b89b0:	3502      	adds	r5, #2
   b89b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b89b6:	f108 38ff 	add.w	r8, r8, #4294967295
   b89ba:	f04f 0c00 	mov.w	ip, #0
   b89be:	fbb8 f9f3 	udiv	r9, r8, r3
   b89c2:	4666      	mov	r6, ip
   b89c4:	fb03 8a19 	mls	sl, r3, r9, r8
   b89c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b89cc:	f1be 0f09 	cmp.w	lr, #9
   b89d0:	d816      	bhi.n	b8a00 <_strtol_l.constprop.0+0xa4>
   b89d2:	4674      	mov	r4, lr
   b89d4:	42a3      	cmp	r3, r4
   b89d6:	dd24      	ble.n	b8a22 <_strtol_l.constprop.0+0xc6>
   b89d8:	f1bc 0f00 	cmp.w	ip, #0
   b89dc:	db1e      	blt.n	b8a1c <_strtol_l.constprop.0+0xc0>
   b89de:	45b1      	cmp	r9, r6
   b89e0:	d31c      	bcc.n	b8a1c <_strtol_l.constprop.0+0xc0>
   b89e2:	d101      	bne.n	b89e8 <_strtol_l.constprop.0+0x8c>
   b89e4:	45a2      	cmp	sl, r4
   b89e6:	db19      	blt.n	b8a1c <_strtol_l.constprop.0+0xc0>
   b89e8:	fb06 4603 	mla	r6, r6, r3, r4
   b89ec:	f04f 0c01 	mov.w	ip, #1
   b89f0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b89f4:	e7e8      	b.n	b89c8 <_strtol_l.constprop.0+0x6c>
   b89f6:	2c2b      	cmp	r4, #43	; 0x2b
   b89f8:	bf04      	itt	eq
   b89fa:	782c      	ldrbeq	r4, [r5, #0]
   b89fc:	1cb5      	addeq	r5, r6, #2
   b89fe:	e7ca      	b.n	b8996 <_strtol_l.constprop.0+0x3a>
   b8a00:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8a04:	f1be 0f19 	cmp.w	lr, #25
   b8a08:	d801      	bhi.n	b8a0e <_strtol_l.constprop.0+0xb2>
   b8a0a:	3c37      	subs	r4, #55	; 0x37
   b8a0c:	e7e2      	b.n	b89d4 <_strtol_l.constprop.0+0x78>
   b8a0e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8a12:	f1be 0f19 	cmp.w	lr, #25
   b8a16:	d804      	bhi.n	b8a22 <_strtol_l.constprop.0+0xc6>
   b8a18:	3c57      	subs	r4, #87	; 0x57
   b8a1a:	e7db      	b.n	b89d4 <_strtol_l.constprop.0+0x78>
   b8a1c:	f04f 3cff 	mov.w	ip, #4294967295
   b8a20:	e7e6      	b.n	b89f0 <_strtol_l.constprop.0+0x94>
   b8a22:	f1bc 0f00 	cmp.w	ip, #0
   b8a26:	da05      	bge.n	b8a34 <_strtol_l.constprop.0+0xd8>
   b8a28:	2322      	movs	r3, #34	; 0x22
   b8a2a:	6003      	str	r3, [r0, #0]
   b8a2c:	4646      	mov	r6, r8
   b8a2e:	b942      	cbnz	r2, b8a42 <_strtol_l.constprop.0+0xe6>
   b8a30:	4630      	mov	r0, r6
   b8a32:	e79e      	b.n	b8972 <_strtol_l.constprop.0+0x16>
   b8a34:	b107      	cbz	r7, b8a38 <_strtol_l.constprop.0+0xdc>
   b8a36:	4276      	negs	r6, r6
   b8a38:	2a00      	cmp	r2, #0
   b8a3a:	d0f9      	beq.n	b8a30 <_strtol_l.constprop.0+0xd4>
   b8a3c:	f1bc 0f00 	cmp.w	ip, #0
   b8a40:	d000      	beq.n	b8a44 <_strtol_l.constprop.0+0xe8>
   b8a42:	1e69      	subs	r1, r5, #1
   b8a44:	6011      	str	r1, [r2, #0]
   b8a46:	e7f3      	b.n	b8a30 <_strtol_l.constprop.0+0xd4>
   b8a48:	2430      	movs	r4, #48	; 0x30
   b8a4a:	2b00      	cmp	r3, #0
   b8a4c:	d1b1      	bne.n	b89b2 <_strtol_l.constprop.0+0x56>
   b8a4e:	2308      	movs	r3, #8
   b8a50:	e7af      	b.n	b89b2 <_strtol_l.constprop.0+0x56>
   b8a52:	2c30      	cmp	r4, #48	; 0x30
   b8a54:	d0a5      	beq.n	b89a2 <_strtol_l.constprop.0+0x46>
   b8a56:	230a      	movs	r3, #10
   b8a58:	e7ab      	b.n	b89b2 <_strtol_l.constprop.0+0x56>
   b8a5a:	bf00      	nop
   b8a5c:	000ba2e0 	.word	0x000ba2e0

000b8a60 <strtol>:
   b8a60:	4613      	mov	r3, r2
   b8a62:	460a      	mov	r2, r1
   b8a64:	4601      	mov	r1, r0
   b8a66:	4802      	ldr	r0, [pc, #8]	; (b8a70 <strtol+0x10>)
   b8a68:	6800      	ldr	r0, [r0, #0]
   b8a6a:	f7ff bf77 	b.w	b895c <_strtol_l.constprop.0>
   b8a6e:	bf00      	nop
   b8a70:	2003ccf8 	.word	0x2003ccf8

000b8a74 <__register_exitproc>:
   b8a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8a78:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8b34 <__register_exitproc+0xc0>
   b8a7c:	4606      	mov	r6, r0
   b8a7e:	f8d8 0000 	ldr.w	r0, [r8]
   b8a82:	461f      	mov	r7, r3
   b8a84:	460d      	mov	r5, r1
   b8a86:	4691      	mov	r9, r2
   b8a88:	f000 fbc6 	bl	b9218 <__retarget_lock_acquire_recursive>
   b8a8c:	4b25      	ldr	r3, [pc, #148]	; (b8b24 <__register_exitproc+0xb0>)
   b8a8e:	681c      	ldr	r4, [r3, #0]
   b8a90:	b934      	cbnz	r4, b8aa0 <__register_exitproc+0x2c>
   b8a92:	4c25      	ldr	r4, [pc, #148]	; (b8b28 <__register_exitproc+0xb4>)
   b8a94:	601c      	str	r4, [r3, #0]
   b8a96:	4b25      	ldr	r3, [pc, #148]	; (b8b2c <__register_exitproc+0xb8>)
   b8a98:	b113      	cbz	r3, b8aa0 <__register_exitproc+0x2c>
   b8a9a:	681b      	ldr	r3, [r3, #0]
   b8a9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8aa0:	6863      	ldr	r3, [r4, #4]
   b8aa2:	2b1f      	cmp	r3, #31
   b8aa4:	dd07      	ble.n	b8ab6 <__register_exitproc+0x42>
   b8aa6:	f8d8 0000 	ldr.w	r0, [r8]
   b8aaa:	f000 fbb7 	bl	b921c <__retarget_lock_release_recursive>
   b8aae:	f04f 30ff 	mov.w	r0, #4294967295
   b8ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8ab6:	b34e      	cbz	r6, b8b0c <__register_exitproc+0x98>
   b8ab8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8abc:	b988      	cbnz	r0, b8ae2 <__register_exitproc+0x6e>
   b8abe:	4b1c      	ldr	r3, [pc, #112]	; (b8b30 <__register_exitproc+0xbc>)
   b8ac0:	b923      	cbnz	r3, b8acc <__register_exitproc+0x58>
   b8ac2:	f8d8 0000 	ldr.w	r0, [r8]
   b8ac6:	f000 fba8 	bl	b921a <__retarget_lock_release>
   b8aca:	e7f0      	b.n	b8aae <__register_exitproc+0x3a>
   b8acc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8ad0:	f7fc fd3e 	bl	b5550 <malloc>
   b8ad4:	2800      	cmp	r0, #0
   b8ad6:	d0f4      	beq.n	b8ac2 <__register_exitproc+0x4e>
   b8ad8:	2300      	movs	r3, #0
   b8ada:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8ade:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8ae2:	6863      	ldr	r3, [r4, #4]
   b8ae4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8ae8:	2201      	movs	r2, #1
   b8aea:	409a      	lsls	r2, r3
   b8aec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8af0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8af4:	4313      	orrs	r3, r2
   b8af6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8afa:	2e02      	cmp	r6, #2
   b8afc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8b00:	bf02      	ittt	eq
   b8b02:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8b06:	4313      	orreq	r3, r2
   b8b08:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8b0c:	6863      	ldr	r3, [r4, #4]
   b8b0e:	f8d8 0000 	ldr.w	r0, [r8]
   b8b12:	1c5a      	adds	r2, r3, #1
   b8b14:	3302      	adds	r3, #2
   b8b16:	6062      	str	r2, [r4, #4]
   b8b18:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8b1c:	f000 fb7e 	bl	b921c <__retarget_lock_release_recursive>
   b8b20:	2000      	movs	r0, #0
   b8b22:	e7c6      	b.n	b8ab2 <__register_exitproc+0x3e>
   b8b24:	2003e7ec 	.word	0x2003e7ec
   b8b28:	2003e760 	.word	0x2003e760
   b8b2c:	00000000 	.word	0x00000000
   b8b30:	000b5551 	.word	0x000b5551
   b8b34:	2003cd5c 	.word	0x2003cd5c

000b8b38 <rshift>:
   b8b38:	6903      	ldr	r3, [r0, #16]
   b8b3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b8b3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8b42:	ea4f 1261 	mov.w	r2, r1, asr #5
   b8b46:	f100 0414 	add.w	r4, r0, #20
   b8b4a:	dd45      	ble.n	b8bd8 <rshift+0xa0>
   b8b4c:	f011 011f 	ands.w	r1, r1, #31
   b8b50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b8b54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b8b58:	d10c      	bne.n	b8b74 <rshift+0x3c>
   b8b5a:	f100 0710 	add.w	r7, r0, #16
   b8b5e:	4629      	mov	r1, r5
   b8b60:	42b1      	cmp	r1, r6
   b8b62:	d334      	bcc.n	b8bce <rshift+0x96>
   b8b64:	1a9b      	subs	r3, r3, r2
   b8b66:	009b      	lsls	r3, r3, #2
   b8b68:	1eea      	subs	r2, r5, #3
   b8b6a:	4296      	cmp	r6, r2
   b8b6c:	bf38      	it	cc
   b8b6e:	2300      	movcc	r3, #0
   b8b70:	4423      	add	r3, r4
   b8b72:	e015      	b.n	b8ba0 <rshift+0x68>
   b8b74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b8b78:	f1c1 0820 	rsb	r8, r1, #32
   b8b7c:	40cf      	lsrs	r7, r1
   b8b7e:	f105 0e04 	add.w	lr, r5, #4
   b8b82:	46a1      	mov	r9, r4
   b8b84:	4576      	cmp	r6, lr
   b8b86:	46f4      	mov	ip, lr
   b8b88:	d815      	bhi.n	b8bb6 <rshift+0x7e>
   b8b8a:	1a9a      	subs	r2, r3, r2
   b8b8c:	0092      	lsls	r2, r2, #2
   b8b8e:	3a04      	subs	r2, #4
   b8b90:	3501      	adds	r5, #1
   b8b92:	42ae      	cmp	r6, r5
   b8b94:	bf38      	it	cc
   b8b96:	2200      	movcc	r2, #0
   b8b98:	18a3      	adds	r3, r4, r2
   b8b9a:	50a7      	str	r7, [r4, r2]
   b8b9c:	b107      	cbz	r7, b8ba0 <rshift+0x68>
   b8b9e:	3304      	adds	r3, #4
   b8ba0:	1b1a      	subs	r2, r3, r4
   b8ba2:	42a3      	cmp	r3, r4
   b8ba4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b8ba8:	bf08      	it	eq
   b8baa:	2300      	moveq	r3, #0
   b8bac:	6102      	str	r2, [r0, #16]
   b8bae:	bf08      	it	eq
   b8bb0:	6143      	streq	r3, [r0, #20]
   b8bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8bb6:	f8dc c000 	ldr.w	ip, [ip]
   b8bba:	fa0c fc08 	lsl.w	ip, ip, r8
   b8bbe:	ea4c 0707 	orr.w	r7, ip, r7
   b8bc2:	f849 7b04 	str.w	r7, [r9], #4
   b8bc6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b8bca:	40cf      	lsrs	r7, r1
   b8bcc:	e7da      	b.n	b8b84 <rshift+0x4c>
   b8bce:	f851 cb04 	ldr.w	ip, [r1], #4
   b8bd2:	f847 cf04 	str.w	ip, [r7, #4]!
   b8bd6:	e7c3      	b.n	b8b60 <rshift+0x28>
   b8bd8:	4623      	mov	r3, r4
   b8bda:	e7e1      	b.n	b8ba0 <rshift+0x68>

000b8bdc <__hexdig_fun>:
   b8bdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8be0:	2b09      	cmp	r3, #9
   b8be2:	d802      	bhi.n	b8bea <__hexdig_fun+0xe>
   b8be4:	3820      	subs	r0, #32
   b8be6:	b2c0      	uxtb	r0, r0
   b8be8:	4770      	bx	lr
   b8bea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8bee:	2b05      	cmp	r3, #5
   b8bf0:	d801      	bhi.n	b8bf6 <__hexdig_fun+0x1a>
   b8bf2:	3847      	subs	r0, #71	; 0x47
   b8bf4:	e7f7      	b.n	b8be6 <__hexdig_fun+0xa>
   b8bf6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8bfa:	2b05      	cmp	r3, #5
   b8bfc:	d801      	bhi.n	b8c02 <__hexdig_fun+0x26>
   b8bfe:	3827      	subs	r0, #39	; 0x27
   b8c00:	e7f1      	b.n	b8be6 <__hexdig_fun+0xa>
   b8c02:	2000      	movs	r0, #0
   b8c04:	4770      	bx	lr
	...

000b8c08 <__gethex>:
   b8c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c0c:	ed2d 8b02 	vpush	{d8}
   b8c10:	b089      	sub	sp, #36	; 0x24
   b8c12:	ee08 0a10 	vmov	s16, r0
   b8c16:	9304      	str	r3, [sp, #16]
   b8c18:	4bb4      	ldr	r3, [pc, #720]	; (b8eec <__gethex+0x2e4>)
   b8c1a:	681b      	ldr	r3, [r3, #0]
   b8c1c:	9301      	str	r3, [sp, #4]
   b8c1e:	4618      	mov	r0, r3
   b8c20:	468b      	mov	fp, r1
   b8c22:	4690      	mov	r8, r2
   b8c24:	f7fe fff3 	bl	b7c0e <strlen>
   b8c28:	9b01      	ldr	r3, [sp, #4]
   b8c2a:	f8db 2000 	ldr.w	r2, [fp]
   b8c2e:	4403      	add	r3, r0
   b8c30:	4682      	mov	sl, r0
   b8c32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b8c36:	9305      	str	r3, [sp, #20]
   b8c38:	1c93      	adds	r3, r2, #2
   b8c3a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b8c3e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b8c42:	32fe      	adds	r2, #254	; 0xfe
   b8c44:	18d1      	adds	r1, r2, r3
   b8c46:	461f      	mov	r7, r3
   b8c48:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8c4c:	9100      	str	r1, [sp, #0]
   b8c4e:	2830      	cmp	r0, #48	; 0x30
   b8c50:	d0f8      	beq.n	b8c44 <__gethex+0x3c>
   b8c52:	f7ff ffc3 	bl	b8bdc <__hexdig_fun>
   b8c56:	4604      	mov	r4, r0
   b8c58:	2800      	cmp	r0, #0
   b8c5a:	d13a      	bne.n	b8cd2 <__gethex+0xca>
   b8c5c:	9901      	ldr	r1, [sp, #4]
   b8c5e:	4652      	mov	r2, sl
   b8c60:	4638      	mov	r0, r7
   b8c62:	f7fe ffdc 	bl	b7c1e <strncmp>
   b8c66:	4605      	mov	r5, r0
   b8c68:	2800      	cmp	r0, #0
   b8c6a:	d168      	bne.n	b8d3e <__gethex+0x136>
   b8c6c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b8c70:	eb07 060a 	add.w	r6, r7, sl
   b8c74:	f7ff ffb2 	bl	b8bdc <__hexdig_fun>
   b8c78:	2800      	cmp	r0, #0
   b8c7a:	d062      	beq.n	b8d42 <__gethex+0x13a>
   b8c7c:	4633      	mov	r3, r6
   b8c7e:	7818      	ldrb	r0, [r3, #0]
   b8c80:	2830      	cmp	r0, #48	; 0x30
   b8c82:	461f      	mov	r7, r3
   b8c84:	f103 0301 	add.w	r3, r3, #1
   b8c88:	d0f9      	beq.n	b8c7e <__gethex+0x76>
   b8c8a:	f7ff ffa7 	bl	b8bdc <__hexdig_fun>
   b8c8e:	2301      	movs	r3, #1
   b8c90:	fab0 f480 	clz	r4, r0
   b8c94:	0964      	lsrs	r4, r4, #5
   b8c96:	4635      	mov	r5, r6
   b8c98:	9300      	str	r3, [sp, #0]
   b8c9a:	463a      	mov	r2, r7
   b8c9c:	4616      	mov	r6, r2
   b8c9e:	3201      	adds	r2, #1
   b8ca0:	7830      	ldrb	r0, [r6, #0]
   b8ca2:	f7ff ff9b 	bl	b8bdc <__hexdig_fun>
   b8ca6:	2800      	cmp	r0, #0
   b8ca8:	d1f8      	bne.n	b8c9c <__gethex+0x94>
   b8caa:	9901      	ldr	r1, [sp, #4]
   b8cac:	4652      	mov	r2, sl
   b8cae:	4630      	mov	r0, r6
   b8cb0:	f7fe ffb5 	bl	b7c1e <strncmp>
   b8cb4:	b980      	cbnz	r0, b8cd8 <__gethex+0xd0>
   b8cb6:	b94d      	cbnz	r5, b8ccc <__gethex+0xc4>
   b8cb8:	eb06 050a 	add.w	r5, r6, sl
   b8cbc:	462a      	mov	r2, r5
   b8cbe:	4616      	mov	r6, r2
   b8cc0:	3201      	adds	r2, #1
   b8cc2:	7830      	ldrb	r0, [r6, #0]
   b8cc4:	f7ff ff8a 	bl	b8bdc <__hexdig_fun>
   b8cc8:	2800      	cmp	r0, #0
   b8cca:	d1f8      	bne.n	b8cbe <__gethex+0xb6>
   b8ccc:	1bad      	subs	r5, r5, r6
   b8cce:	00ad      	lsls	r5, r5, #2
   b8cd0:	e004      	b.n	b8cdc <__gethex+0xd4>
   b8cd2:	2400      	movs	r4, #0
   b8cd4:	4625      	mov	r5, r4
   b8cd6:	e7e0      	b.n	b8c9a <__gethex+0x92>
   b8cd8:	2d00      	cmp	r5, #0
   b8cda:	d1f7      	bne.n	b8ccc <__gethex+0xc4>
   b8cdc:	7833      	ldrb	r3, [r6, #0]
   b8cde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8ce2:	2b50      	cmp	r3, #80	; 0x50
   b8ce4:	d13b      	bne.n	b8d5e <__gethex+0x156>
   b8ce6:	7873      	ldrb	r3, [r6, #1]
   b8ce8:	2b2b      	cmp	r3, #43	; 0x2b
   b8cea:	d02c      	beq.n	b8d46 <__gethex+0x13e>
   b8cec:	2b2d      	cmp	r3, #45	; 0x2d
   b8cee:	d02e      	beq.n	b8d4e <__gethex+0x146>
   b8cf0:	1c71      	adds	r1, r6, #1
   b8cf2:	f04f 0900 	mov.w	r9, #0
   b8cf6:	7808      	ldrb	r0, [r1, #0]
   b8cf8:	f7ff ff70 	bl	b8bdc <__hexdig_fun>
   b8cfc:	1e43      	subs	r3, r0, #1
   b8cfe:	b2db      	uxtb	r3, r3
   b8d00:	2b18      	cmp	r3, #24
   b8d02:	d82c      	bhi.n	b8d5e <__gethex+0x156>
   b8d04:	f1a0 0210 	sub.w	r2, r0, #16
   b8d08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b8d0c:	f7ff ff66 	bl	b8bdc <__hexdig_fun>
   b8d10:	1e43      	subs	r3, r0, #1
   b8d12:	b2db      	uxtb	r3, r3
   b8d14:	2b18      	cmp	r3, #24
   b8d16:	d91d      	bls.n	b8d54 <__gethex+0x14c>
   b8d18:	f1b9 0f00 	cmp.w	r9, #0
   b8d1c:	d000      	beq.n	b8d20 <__gethex+0x118>
   b8d1e:	4252      	negs	r2, r2
   b8d20:	4415      	add	r5, r2
   b8d22:	f8cb 1000 	str.w	r1, [fp]
   b8d26:	b1e4      	cbz	r4, b8d62 <__gethex+0x15a>
   b8d28:	9b00      	ldr	r3, [sp, #0]
   b8d2a:	2b00      	cmp	r3, #0
   b8d2c:	bf14      	ite	ne
   b8d2e:	2700      	movne	r7, #0
   b8d30:	2706      	moveq	r7, #6
   b8d32:	4638      	mov	r0, r7
   b8d34:	b009      	add	sp, #36	; 0x24
   b8d36:	ecbd 8b02 	vpop	{d8}
   b8d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8d3e:	463e      	mov	r6, r7
   b8d40:	4625      	mov	r5, r4
   b8d42:	2401      	movs	r4, #1
   b8d44:	e7ca      	b.n	b8cdc <__gethex+0xd4>
   b8d46:	f04f 0900 	mov.w	r9, #0
   b8d4a:	1cb1      	adds	r1, r6, #2
   b8d4c:	e7d3      	b.n	b8cf6 <__gethex+0xee>
   b8d4e:	f04f 0901 	mov.w	r9, #1
   b8d52:	e7fa      	b.n	b8d4a <__gethex+0x142>
   b8d54:	230a      	movs	r3, #10
   b8d56:	fb03 0202 	mla	r2, r3, r2, r0
   b8d5a:	3a10      	subs	r2, #16
   b8d5c:	e7d4      	b.n	b8d08 <__gethex+0x100>
   b8d5e:	4631      	mov	r1, r6
   b8d60:	e7df      	b.n	b8d22 <__gethex+0x11a>
   b8d62:	1bf3      	subs	r3, r6, r7
   b8d64:	3b01      	subs	r3, #1
   b8d66:	4621      	mov	r1, r4
   b8d68:	2b07      	cmp	r3, #7
   b8d6a:	dc0b      	bgt.n	b8d84 <__gethex+0x17c>
   b8d6c:	ee18 0a10 	vmov	r0, s16
   b8d70:	f000 fa68 	bl	b9244 <_Balloc>
   b8d74:	4604      	mov	r4, r0
   b8d76:	b940      	cbnz	r0, b8d8a <__gethex+0x182>
   b8d78:	4b5d      	ldr	r3, [pc, #372]	; (b8ef0 <__gethex+0x2e8>)
   b8d7a:	4602      	mov	r2, r0
   b8d7c:	21de      	movs	r1, #222	; 0xde
   b8d7e:	485d      	ldr	r0, [pc, #372]	; (b8ef4 <__gethex+0x2ec>)
   b8d80:	f7fc fc2e 	bl	b55e0 <__assert_func>
   b8d84:	3101      	adds	r1, #1
   b8d86:	105b      	asrs	r3, r3, #1
   b8d88:	e7ee      	b.n	b8d68 <__gethex+0x160>
   b8d8a:	f100 0914 	add.w	r9, r0, #20
   b8d8e:	f04f 0b00 	mov.w	fp, #0
   b8d92:	f1ca 0301 	rsb	r3, sl, #1
   b8d96:	f8cd 9008 	str.w	r9, [sp, #8]
   b8d9a:	f8cd b000 	str.w	fp, [sp]
   b8d9e:	9306      	str	r3, [sp, #24]
   b8da0:	42b7      	cmp	r7, r6
   b8da2:	d340      	bcc.n	b8e26 <__gethex+0x21e>
   b8da4:	9802      	ldr	r0, [sp, #8]
   b8da6:	9b00      	ldr	r3, [sp, #0]
   b8da8:	f840 3b04 	str.w	r3, [r0], #4
   b8dac:	eba0 0009 	sub.w	r0, r0, r9
   b8db0:	1080      	asrs	r0, r0, #2
   b8db2:	0146      	lsls	r6, r0, #5
   b8db4:	6120      	str	r0, [r4, #16]
   b8db6:	4618      	mov	r0, r3
   b8db8:	f000 fb36 	bl	b9428 <__hi0bits>
   b8dbc:	1a30      	subs	r0, r6, r0
   b8dbe:	f8d8 6000 	ldr.w	r6, [r8]
   b8dc2:	42b0      	cmp	r0, r6
   b8dc4:	dd63      	ble.n	b8e8e <__gethex+0x286>
   b8dc6:	1b87      	subs	r7, r0, r6
   b8dc8:	4639      	mov	r1, r7
   b8dca:	4620      	mov	r0, r4
   b8dcc:	f000 feda 	bl	b9b84 <__any_on>
   b8dd0:	4682      	mov	sl, r0
   b8dd2:	b1a8      	cbz	r0, b8e00 <__gethex+0x1f8>
   b8dd4:	1e7b      	subs	r3, r7, #1
   b8dd6:	1159      	asrs	r1, r3, #5
   b8dd8:	f003 021f 	and.w	r2, r3, #31
   b8ddc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b8de0:	f04f 0a01 	mov.w	sl, #1
   b8de4:	fa0a f202 	lsl.w	r2, sl, r2
   b8de8:	420a      	tst	r2, r1
   b8dea:	d009      	beq.n	b8e00 <__gethex+0x1f8>
   b8dec:	4553      	cmp	r3, sl
   b8dee:	dd05      	ble.n	b8dfc <__gethex+0x1f4>
   b8df0:	1eb9      	subs	r1, r7, #2
   b8df2:	4620      	mov	r0, r4
   b8df4:	f000 fec6 	bl	b9b84 <__any_on>
   b8df8:	2800      	cmp	r0, #0
   b8dfa:	d145      	bne.n	b8e88 <__gethex+0x280>
   b8dfc:	f04f 0a02 	mov.w	sl, #2
   b8e00:	4639      	mov	r1, r7
   b8e02:	4620      	mov	r0, r4
   b8e04:	f7ff fe98 	bl	b8b38 <rshift>
   b8e08:	443d      	add	r5, r7
   b8e0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8e0e:	42ab      	cmp	r3, r5
   b8e10:	da4c      	bge.n	b8eac <__gethex+0x2a4>
   b8e12:	ee18 0a10 	vmov	r0, s16
   b8e16:	4621      	mov	r1, r4
   b8e18:	f000 fa54 	bl	b92c4 <_Bfree>
   b8e1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8e1e:	2300      	movs	r3, #0
   b8e20:	6013      	str	r3, [r2, #0]
   b8e22:	27a3      	movs	r7, #163	; 0xa3
   b8e24:	e785      	b.n	b8d32 <__gethex+0x12a>
   b8e26:	1e73      	subs	r3, r6, #1
   b8e28:	9a05      	ldr	r2, [sp, #20]
   b8e2a:	9303      	str	r3, [sp, #12]
   b8e2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b8e30:	4293      	cmp	r3, r2
   b8e32:	d019      	beq.n	b8e68 <__gethex+0x260>
   b8e34:	f1bb 0f20 	cmp.w	fp, #32
   b8e38:	d107      	bne.n	b8e4a <__gethex+0x242>
   b8e3a:	9b02      	ldr	r3, [sp, #8]
   b8e3c:	9a00      	ldr	r2, [sp, #0]
   b8e3e:	f843 2b04 	str.w	r2, [r3], #4
   b8e42:	9302      	str	r3, [sp, #8]
   b8e44:	2300      	movs	r3, #0
   b8e46:	9300      	str	r3, [sp, #0]
   b8e48:	469b      	mov	fp, r3
   b8e4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b8e4e:	f7ff fec5 	bl	b8bdc <__hexdig_fun>
   b8e52:	9b00      	ldr	r3, [sp, #0]
   b8e54:	f000 000f 	and.w	r0, r0, #15
   b8e58:	fa00 f00b 	lsl.w	r0, r0, fp
   b8e5c:	4303      	orrs	r3, r0
   b8e5e:	9300      	str	r3, [sp, #0]
   b8e60:	f10b 0b04 	add.w	fp, fp, #4
   b8e64:	9b03      	ldr	r3, [sp, #12]
   b8e66:	e00d      	b.n	b8e84 <__gethex+0x27c>
   b8e68:	9b03      	ldr	r3, [sp, #12]
   b8e6a:	9a06      	ldr	r2, [sp, #24]
   b8e6c:	4413      	add	r3, r2
   b8e6e:	42bb      	cmp	r3, r7
   b8e70:	d3e0      	bcc.n	b8e34 <__gethex+0x22c>
   b8e72:	4618      	mov	r0, r3
   b8e74:	9901      	ldr	r1, [sp, #4]
   b8e76:	9307      	str	r3, [sp, #28]
   b8e78:	4652      	mov	r2, sl
   b8e7a:	f7fe fed0 	bl	b7c1e <strncmp>
   b8e7e:	9b07      	ldr	r3, [sp, #28]
   b8e80:	2800      	cmp	r0, #0
   b8e82:	d1d7      	bne.n	b8e34 <__gethex+0x22c>
   b8e84:	461e      	mov	r6, r3
   b8e86:	e78b      	b.n	b8da0 <__gethex+0x198>
   b8e88:	f04f 0a03 	mov.w	sl, #3
   b8e8c:	e7b8      	b.n	b8e00 <__gethex+0x1f8>
   b8e8e:	da0a      	bge.n	b8ea6 <__gethex+0x29e>
   b8e90:	1a37      	subs	r7, r6, r0
   b8e92:	4621      	mov	r1, r4
   b8e94:	ee18 0a10 	vmov	r0, s16
   b8e98:	463a      	mov	r2, r7
   b8e9a:	f000 fc2f 	bl	b96fc <__lshift>
   b8e9e:	1bed      	subs	r5, r5, r7
   b8ea0:	4604      	mov	r4, r0
   b8ea2:	f100 0914 	add.w	r9, r0, #20
   b8ea6:	f04f 0a00 	mov.w	sl, #0
   b8eaa:	e7ae      	b.n	b8e0a <__gethex+0x202>
   b8eac:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b8eb0:	42a8      	cmp	r0, r5
   b8eb2:	dd72      	ble.n	b8f9a <__gethex+0x392>
   b8eb4:	1b45      	subs	r5, r0, r5
   b8eb6:	42ae      	cmp	r6, r5
   b8eb8:	dc36      	bgt.n	b8f28 <__gethex+0x320>
   b8eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8ebe:	2b02      	cmp	r3, #2
   b8ec0:	d02a      	beq.n	b8f18 <__gethex+0x310>
   b8ec2:	2b03      	cmp	r3, #3
   b8ec4:	d02c      	beq.n	b8f20 <__gethex+0x318>
   b8ec6:	2b01      	cmp	r3, #1
   b8ec8:	d11c      	bne.n	b8f04 <__gethex+0x2fc>
   b8eca:	42ae      	cmp	r6, r5
   b8ecc:	d11a      	bne.n	b8f04 <__gethex+0x2fc>
   b8ece:	2e01      	cmp	r6, #1
   b8ed0:	d112      	bne.n	b8ef8 <__gethex+0x2f0>
   b8ed2:	9a04      	ldr	r2, [sp, #16]
   b8ed4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8ed8:	6013      	str	r3, [r2, #0]
   b8eda:	2301      	movs	r3, #1
   b8edc:	6123      	str	r3, [r4, #16]
   b8ede:	f8c9 3000 	str.w	r3, [r9]
   b8ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8ee4:	2762      	movs	r7, #98	; 0x62
   b8ee6:	601c      	str	r4, [r3, #0]
   b8ee8:	e723      	b.n	b8d32 <__gethex+0x12a>
   b8eea:	bf00      	nop
   b8eec:	000ba478 	.word	0x000ba478
   b8ef0:	000ba3e0 	.word	0x000ba3e0
   b8ef4:	000ba3f1 	.word	0x000ba3f1
   b8ef8:	1e71      	subs	r1, r6, #1
   b8efa:	4620      	mov	r0, r4
   b8efc:	f000 fe42 	bl	b9b84 <__any_on>
   b8f00:	2800      	cmp	r0, #0
   b8f02:	d1e6      	bne.n	b8ed2 <__gethex+0x2ca>
   b8f04:	ee18 0a10 	vmov	r0, s16
   b8f08:	4621      	mov	r1, r4
   b8f0a:	f000 f9db 	bl	b92c4 <_Bfree>
   b8f0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8f10:	2300      	movs	r3, #0
   b8f12:	6013      	str	r3, [r2, #0]
   b8f14:	2750      	movs	r7, #80	; 0x50
   b8f16:	e70c      	b.n	b8d32 <__gethex+0x12a>
   b8f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8f1a:	2b00      	cmp	r3, #0
   b8f1c:	d1f2      	bne.n	b8f04 <__gethex+0x2fc>
   b8f1e:	e7d8      	b.n	b8ed2 <__gethex+0x2ca>
   b8f20:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8f22:	2b00      	cmp	r3, #0
   b8f24:	d1d5      	bne.n	b8ed2 <__gethex+0x2ca>
   b8f26:	e7ed      	b.n	b8f04 <__gethex+0x2fc>
   b8f28:	1e6f      	subs	r7, r5, #1
   b8f2a:	f1ba 0f00 	cmp.w	sl, #0
   b8f2e:	d131      	bne.n	b8f94 <__gethex+0x38c>
   b8f30:	b127      	cbz	r7, b8f3c <__gethex+0x334>
   b8f32:	4639      	mov	r1, r7
   b8f34:	4620      	mov	r0, r4
   b8f36:	f000 fe25 	bl	b9b84 <__any_on>
   b8f3a:	4682      	mov	sl, r0
   b8f3c:	117b      	asrs	r3, r7, #5
   b8f3e:	2101      	movs	r1, #1
   b8f40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b8f44:	f007 071f 	and.w	r7, r7, #31
   b8f48:	fa01 f707 	lsl.w	r7, r1, r7
   b8f4c:	421f      	tst	r7, r3
   b8f4e:	4629      	mov	r1, r5
   b8f50:	4620      	mov	r0, r4
   b8f52:	bf18      	it	ne
   b8f54:	f04a 0a02 	orrne.w	sl, sl, #2
   b8f58:	1b76      	subs	r6, r6, r5
   b8f5a:	f7ff fded 	bl	b8b38 <rshift>
   b8f5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b8f62:	2702      	movs	r7, #2
   b8f64:	f1ba 0f00 	cmp.w	sl, #0
   b8f68:	d048      	beq.n	b8ffc <__gethex+0x3f4>
   b8f6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8f6e:	2b02      	cmp	r3, #2
   b8f70:	d015      	beq.n	b8f9e <__gethex+0x396>
   b8f72:	2b03      	cmp	r3, #3
   b8f74:	d017      	beq.n	b8fa6 <__gethex+0x39e>
   b8f76:	2b01      	cmp	r3, #1
   b8f78:	d109      	bne.n	b8f8e <__gethex+0x386>
   b8f7a:	f01a 0f02 	tst.w	sl, #2
   b8f7e:	d006      	beq.n	b8f8e <__gethex+0x386>
   b8f80:	f8d9 0000 	ldr.w	r0, [r9]
   b8f84:	ea4a 0a00 	orr.w	sl, sl, r0
   b8f88:	f01a 0f01 	tst.w	sl, #1
   b8f8c:	d10e      	bne.n	b8fac <__gethex+0x3a4>
   b8f8e:	f047 0710 	orr.w	r7, r7, #16
   b8f92:	e033      	b.n	b8ffc <__gethex+0x3f4>
   b8f94:	f04f 0a01 	mov.w	sl, #1
   b8f98:	e7d0      	b.n	b8f3c <__gethex+0x334>
   b8f9a:	2701      	movs	r7, #1
   b8f9c:	e7e2      	b.n	b8f64 <__gethex+0x35c>
   b8f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8fa0:	f1c3 0301 	rsb	r3, r3, #1
   b8fa4:	9315      	str	r3, [sp, #84]	; 0x54
   b8fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8fa8:	2b00      	cmp	r3, #0
   b8faa:	d0f0      	beq.n	b8f8e <__gethex+0x386>
   b8fac:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b8fb0:	f104 0314 	add.w	r3, r4, #20
   b8fb4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b8fb8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b8fbc:	f04f 0c00 	mov.w	ip, #0
   b8fc0:	4618      	mov	r0, r3
   b8fc2:	f853 2b04 	ldr.w	r2, [r3], #4
   b8fc6:	f1b2 3fff 	cmp.w	r2, #4294967295
   b8fca:	d01c      	beq.n	b9006 <__gethex+0x3fe>
   b8fcc:	3201      	adds	r2, #1
   b8fce:	6002      	str	r2, [r0, #0]
   b8fd0:	2f02      	cmp	r7, #2
   b8fd2:	f104 0314 	add.w	r3, r4, #20
   b8fd6:	d13f      	bne.n	b9058 <__gethex+0x450>
   b8fd8:	f8d8 2000 	ldr.w	r2, [r8]
   b8fdc:	3a01      	subs	r2, #1
   b8fde:	42b2      	cmp	r2, r6
   b8fe0:	d10a      	bne.n	b8ff8 <__gethex+0x3f0>
   b8fe2:	1171      	asrs	r1, r6, #5
   b8fe4:	2201      	movs	r2, #1
   b8fe6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b8fea:	f006 061f 	and.w	r6, r6, #31
   b8fee:	fa02 f606 	lsl.w	r6, r2, r6
   b8ff2:	421e      	tst	r6, r3
   b8ff4:	bf18      	it	ne
   b8ff6:	4617      	movne	r7, r2
   b8ff8:	f047 0720 	orr.w	r7, r7, #32
   b8ffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8ffe:	601c      	str	r4, [r3, #0]
   b9000:	9b04      	ldr	r3, [sp, #16]
   b9002:	601d      	str	r5, [r3, #0]
   b9004:	e695      	b.n	b8d32 <__gethex+0x12a>
   b9006:	4299      	cmp	r1, r3
   b9008:	f843 cc04 	str.w	ip, [r3, #-4]
   b900c:	d8d8      	bhi.n	b8fc0 <__gethex+0x3b8>
   b900e:	68a3      	ldr	r3, [r4, #8]
   b9010:	459b      	cmp	fp, r3
   b9012:	db19      	blt.n	b9048 <__gethex+0x440>
   b9014:	6861      	ldr	r1, [r4, #4]
   b9016:	ee18 0a10 	vmov	r0, s16
   b901a:	3101      	adds	r1, #1
   b901c:	f000 f912 	bl	b9244 <_Balloc>
   b9020:	4681      	mov	r9, r0
   b9022:	b918      	cbnz	r0, b902c <__gethex+0x424>
   b9024:	4b1a      	ldr	r3, [pc, #104]	; (b9090 <__gethex+0x488>)
   b9026:	4602      	mov	r2, r0
   b9028:	2184      	movs	r1, #132	; 0x84
   b902a:	e6a8      	b.n	b8d7e <__gethex+0x176>
   b902c:	6922      	ldr	r2, [r4, #16]
   b902e:	3202      	adds	r2, #2
   b9030:	f104 010c 	add.w	r1, r4, #12
   b9034:	0092      	lsls	r2, r2, #2
   b9036:	300c      	adds	r0, #12
   b9038:	f7fe fd65 	bl	b7b06 <memcpy>
   b903c:	4621      	mov	r1, r4
   b903e:	ee18 0a10 	vmov	r0, s16
   b9042:	f000 f93f 	bl	b92c4 <_Bfree>
   b9046:	464c      	mov	r4, r9
   b9048:	6923      	ldr	r3, [r4, #16]
   b904a:	1c5a      	adds	r2, r3, #1
   b904c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9050:	6122      	str	r2, [r4, #16]
   b9052:	2201      	movs	r2, #1
   b9054:	615a      	str	r2, [r3, #20]
   b9056:	e7bb      	b.n	b8fd0 <__gethex+0x3c8>
   b9058:	6922      	ldr	r2, [r4, #16]
   b905a:	455a      	cmp	r2, fp
   b905c:	dd0b      	ble.n	b9076 <__gethex+0x46e>
   b905e:	2101      	movs	r1, #1
   b9060:	4620      	mov	r0, r4
   b9062:	f7ff fd69 	bl	b8b38 <rshift>
   b9066:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b906a:	3501      	adds	r5, #1
   b906c:	42ab      	cmp	r3, r5
   b906e:	f6ff aed0 	blt.w	b8e12 <__gethex+0x20a>
   b9072:	2701      	movs	r7, #1
   b9074:	e7c0      	b.n	b8ff8 <__gethex+0x3f0>
   b9076:	f016 061f 	ands.w	r6, r6, #31
   b907a:	d0fa      	beq.n	b9072 <__gethex+0x46a>
   b907c:	4453      	add	r3, sl
   b907e:	f1c6 0620 	rsb	r6, r6, #32
   b9082:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b9086:	f000 f9cf 	bl	b9428 <__hi0bits>
   b908a:	42b0      	cmp	r0, r6
   b908c:	dbe7      	blt.n	b905e <__gethex+0x456>
   b908e:	e7f0      	b.n	b9072 <__gethex+0x46a>
   b9090:	000ba3e0 	.word	0x000ba3e0

000b9094 <L_shift>:
   b9094:	f1c2 0208 	rsb	r2, r2, #8
   b9098:	0092      	lsls	r2, r2, #2
   b909a:	b570      	push	{r4, r5, r6, lr}
   b909c:	f1c2 0620 	rsb	r6, r2, #32
   b90a0:	6843      	ldr	r3, [r0, #4]
   b90a2:	6804      	ldr	r4, [r0, #0]
   b90a4:	fa03 f506 	lsl.w	r5, r3, r6
   b90a8:	432c      	orrs	r4, r5
   b90aa:	40d3      	lsrs	r3, r2
   b90ac:	6004      	str	r4, [r0, #0]
   b90ae:	f840 3f04 	str.w	r3, [r0, #4]!
   b90b2:	4288      	cmp	r0, r1
   b90b4:	d3f4      	bcc.n	b90a0 <L_shift+0xc>
   b90b6:	bd70      	pop	{r4, r5, r6, pc}

000b90b8 <__match>:
   b90b8:	b530      	push	{r4, r5, lr}
   b90ba:	6803      	ldr	r3, [r0, #0]
   b90bc:	3301      	adds	r3, #1
   b90be:	f811 4b01 	ldrb.w	r4, [r1], #1
   b90c2:	b914      	cbnz	r4, b90ca <__match+0x12>
   b90c4:	6003      	str	r3, [r0, #0]
   b90c6:	2001      	movs	r0, #1
   b90c8:	bd30      	pop	{r4, r5, pc}
   b90ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   b90ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b90d2:	2d19      	cmp	r5, #25
   b90d4:	bf98      	it	ls
   b90d6:	3220      	addls	r2, #32
   b90d8:	42a2      	cmp	r2, r4
   b90da:	d0f0      	beq.n	b90be <__match+0x6>
   b90dc:	2000      	movs	r0, #0
   b90de:	e7f3      	b.n	b90c8 <__match+0x10>

000b90e0 <__hexnan>:
   b90e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b90e4:	680b      	ldr	r3, [r1, #0]
   b90e6:	115e      	asrs	r6, r3, #5
   b90e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b90ec:	f013 031f 	ands.w	r3, r3, #31
   b90f0:	b087      	sub	sp, #28
   b90f2:	bf18      	it	ne
   b90f4:	3604      	addne	r6, #4
   b90f6:	2500      	movs	r5, #0
   b90f8:	1f37      	subs	r7, r6, #4
   b90fa:	4690      	mov	r8, r2
   b90fc:	6802      	ldr	r2, [r0, #0]
   b90fe:	9301      	str	r3, [sp, #4]
   b9100:	4682      	mov	sl, r0
   b9102:	f846 5c04 	str.w	r5, [r6, #-4]
   b9106:	46b9      	mov	r9, r7
   b9108:	463c      	mov	r4, r7
   b910a:	9502      	str	r5, [sp, #8]
   b910c:	46ab      	mov	fp, r5
   b910e:	7851      	ldrb	r1, [r2, #1]
   b9110:	1c53      	adds	r3, r2, #1
   b9112:	9303      	str	r3, [sp, #12]
   b9114:	b341      	cbz	r1, b9168 <__hexnan+0x88>
   b9116:	4608      	mov	r0, r1
   b9118:	9205      	str	r2, [sp, #20]
   b911a:	9104      	str	r1, [sp, #16]
   b911c:	f7ff fd5e 	bl	b8bdc <__hexdig_fun>
   b9120:	2800      	cmp	r0, #0
   b9122:	d14f      	bne.n	b91c4 <__hexnan+0xe4>
   b9124:	9904      	ldr	r1, [sp, #16]
   b9126:	9a05      	ldr	r2, [sp, #20]
   b9128:	2920      	cmp	r1, #32
   b912a:	d818      	bhi.n	b915e <__hexnan+0x7e>
   b912c:	9b02      	ldr	r3, [sp, #8]
   b912e:	459b      	cmp	fp, r3
   b9130:	dd13      	ble.n	b915a <__hexnan+0x7a>
   b9132:	454c      	cmp	r4, r9
   b9134:	d206      	bcs.n	b9144 <__hexnan+0x64>
   b9136:	2d07      	cmp	r5, #7
   b9138:	dc04      	bgt.n	b9144 <__hexnan+0x64>
   b913a:	462a      	mov	r2, r5
   b913c:	4649      	mov	r1, r9
   b913e:	4620      	mov	r0, r4
   b9140:	f7ff ffa8 	bl	b9094 <L_shift>
   b9144:	4544      	cmp	r4, r8
   b9146:	d950      	bls.n	b91ea <__hexnan+0x10a>
   b9148:	2300      	movs	r3, #0
   b914a:	f1a4 0904 	sub.w	r9, r4, #4
   b914e:	f844 3c04 	str.w	r3, [r4, #-4]
   b9152:	f8cd b008 	str.w	fp, [sp, #8]
   b9156:	464c      	mov	r4, r9
   b9158:	461d      	mov	r5, r3
   b915a:	9a03      	ldr	r2, [sp, #12]
   b915c:	e7d7      	b.n	b910e <__hexnan+0x2e>
   b915e:	2929      	cmp	r1, #41	; 0x29
   b9160:	d156      	bne.n	b9210 <__hexnan+0x130>
   b9162:	3202      	adds	r2, #2
   b9164:	f8ca 2000 	str.w	r2, [sl]
   b9168:	f1bb 0f00 	cmp.w	fp, #0
   b916c:	d050      	beq.n	b9210 <__hexnan+0x130>
   b916e:	454c      	cmp	r4, r9
   b9170:	d206      	bcs.n	b9180 <__hexnan+0xa0>
   b9172:	2d07      	cmp	r5, #7
   b9174:	dc04      	bgt.n	b9180 <__hexnan+0xa0>
   b9176:	462a      	mov	r2, r5
   b9178:	4649      	mov	r1, r9
   b917a:	4620      	mov	r0, r4
   b917c:	f7ff ff8a 	bl	b9094 <L_shift>
   b9180:	4544      	cmp	r4, r8
   b9182:	d934      	bls.n	b91ee <__hexnan+0x10e>
   b9184:	f1a8 0204 	sub.w	r2, r8, #4
   b9188:	4623      	mov	r3, r4
   b918a:	f853 1b04 	ldr.w	r1, [r3], #4
   b918e:	f842 1f04 	str.w	r1, [r2, #4]!
   b9192:	429f      	cmp	r7, r3
   b9194:	d2f9      	bcs.n	b918a <__hexnan+0xaa>
   b9196:	1b3b      	subs	r3, r7, r4
   b9198:	f023 0303 	bic.w	r3, r3, #3
   b919c:	3304      	adds	r3, #4
   b919e:	3401      	adds	r4, #1
   b91a0:	3e03      	subs	r6, #3
   b91a2:	42b4      	cmp	r4, r6
   b91a4:	bf88      	it	hi
   b91a6:	2304      	movhi	r3, #4
   b91a8:	4443      	add	r3, r8
   b91aa:	2200      	movs	r2, #0
   b91ac:	f843 2b04 	str.w	r2, [r3], #4
   b91b0:	429f      	cmp	r7, r3
   b91b2:	d2fb      	bcs.n	b91ac <__hexnan+0xcc>
   b91b4:	683b      	ldr	r3, [r7, #0]
   b91b6:	b91b      	cbnz	r3, b91c0 <__hexnan+0xe0>
   b91b8:	4547      	cmp	r7, r8
   b91ba:	d127      	bne.n	b920c <__hexnan+0x12c>
   b91bc:	2301      	movs	r3, #1
   b91be:	603b      	str	r3, [r7, #0]
   b91c0:	2005      	movs	r0, #5
   b91c2:	e026      	b.n	b9212 <__hexnan+0x132>
   b91c4:	3501      	adds	r5, #1
   b91c6:	2d08      	cmp	r5, #8
   b91c8:	f10b 0b01 	add.w	fp, fp, #1
   b91cc:	dd06      	ble.n	b91dc <__hexnan+0xfc>
   b91ce:	4544      	cmp	r4, r8
   b91d0:	d9c3      	bls.n	b915a <__hexnan+0x7a>
   b91d2:	2300      	movs	r3, #0
   b91d4:	f844 3c04 	str.w	r3, [r4, #-4]
   b91d8:	2501      	movs	r5, #1
   b91da:	3c04      	subs	r4, #4
   b91dc:	6822      	ldr	r2, [r4, #0]
   b91de:	f000 000f 	and.w	r0, r0, #15
   b91e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b91e6:	6022      	str	r2, [r4, #0]
   b91e8:	e7b7      	b.n	b915a <__hexnan+0x7a>
   b91ea:	2508      	movs	r5, #8
   b91ec:	e7b5      	b.n	b915a <__hexnan+0x7a>
   b91ee:	9b01      	ldr	r3, [sp, #4]
   b91f0:	2b00      	cmp	r3, #0
   b91f2:	d0df      	beq.n	b91b4 <__hexnan+0xd4>
   b91f4:	f04f 32ff 	mov.w	r2, #4294967295
   b91f8:	f1c3 0320 	rsb	r3, r3, #32
   b91fc:	fa22 f303 	lsr.w	r3, r2, r3
   b9200:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b9204:	401a      	ands	r2, r3
   b9206:	f846 2c04 	str.w	r2, [r6, #-4]
   b920a:	e7d3      	b.n	b91b4 <__hexnan+0xd4>
   b920c:	3f04      	subs	r7, #4
   b920e:	e7d1      	b.n	b91b4 <__hexnan+0xd4>
   b9210:	2004      	movs	r0, #4
   b9212:	b007      	add	sp, #28
   b9214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9218 <__retarget_lock_acquire_recursive>:
   b9218:	4770      	bx	lr

000b921a <__retarget_lock_release>:
   b921a:	4770      	bx	lr

000b921c <__retarget_lock_release_recursive>:
   b921c:	4770      	bx	lr

000b921e <__ascii_mbtowc>:
   b921e:	b082      	sub	sp, #8
   b9220:	b901      	cbnz	r1, b9224 <__ascii_mbtowc+0x6>
   b9222:	a901      	add	r1, sp, #4
   b9224:	b142      	cbz	r2, b9238 <__ascii_mbtowc+0x1a>
   b9226:	b14b      	cbz	r3, b923c <__ascii_mbtowc+0x1e>
   b9228:	7813      	ldrb	r3, [r2, #0]
   b922a:	600b      	str	r3, [r1, #0]
   b922c:	7812      	ldrb	r2, [r2, #0]
   b922e:	1e10      	subs	r0, r2, #0
   b9230:	bf18      	it	ne
   b9232:	2001      	movne	r0, #1
   b9234:	b002      	add	sp, #8
   b9236:	4770      	bx	lr
   b9238:	4610      	mov	r0, r2
   b923a:	e7fb      	b.n	b9234 <__ascii_mbtowc+0x16>
   b923c:	f06f 0001 	mvn.w	r0, #1
   b9240:	e7f8      	b.n	b9234 <__ascii_mbtowc+0x16>
	...

000b9244 <_Balloc>:
   b9244:	b570      	push	{r4, r5, r6, lr}
   b9246:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9248:	4604      	mov	r4, r0
   b924a:	460d      	mov	r5, r1
   b924c:	b976      	cbnz	r6, b926c <_Balloc+0x28>
   b924e:	2010      	movs	r0, #16
   b9250:	f7fc f97e 	bl	b5550 <malloc>
   b9254:	4602      	mov	r2, r0
   b9256:	6260      	str	r0, [r4, #36]	; 0x24
   b9258:	b920      	cbnz	r0, b9264 <_Balloc+0x20>
   b925a:	4b18      	ldr	r3, [pc, #96]	; (b92bc <_Balloc+0x78>)
   b925c:	4818      	ldr	r0, [pc, #96]	; (b92c0 <_Balloc+0x7c>)
   b925e:	2166      	movs	r1, #102	; 0x66
   b9260:	f7fc f9be 	bl	b55e0 <__assert_func>
   b9264:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9268:	6006      	str	r6, [r0, #0]
   b926a:	60c6      	str	r6, [r0, #12]
   b926c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b926e:	68f3      	ldr	r3, [r6, #12]
   b9270:	b183      	cbz	r3, b9294 <_Balloc+0x50>
   b9272:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9274:	68db      	ldr	r3, [r3, #12]
   b9276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b927a:	b9b8      	cbnz	r0, b92ac <_Balloc+0x68>
   b927c:	2101      	movs	r1, #1
   b927e:	fa01 f605 	lsl.w	r6, r1, r5
   b9282:	1d72      	adds	r2, r6, #5
   b9284:	0092      	lsls	r2, r2, #2
   b9286:	4620      	mov	r0, r4
   b9288:	f000 fc9d 	bl	b9bc6 <_calloc_r>
   b928c:	b160      	cbz	r0, b92a8 <_Balloc+0x64>
   b928e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b9292:	e00e      	b.n	b92b2 <_Balloc+0x6e>
   b9294:	2221      	movs	r2, #33	; 0x21
   b9296:	2104      	movs	r1, #4
   b9298:	4620      	mov	r0, r4
   b929a:	f000 fc94 	bl	b9bc6 <_calloc_r>
   b929e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b92a0:	60f0      	str	r0, [r6, #12]
   b92a2:	68db      	ldr	r3, [r3, #12]
   b92a4:	2b00      	cmp	r3, #0
   b92a6:	d1e4      	bne.n	b9272 <_Balloc+0x2e>
   b92a8:	2000      	movs	r0, #0
   b92aa:	bd70      	pop	{r4, r5, r6, pc}
   b92ac:	6802      	ldr	r2, [r0, #0]
   b92ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b92b2:	2300      	movs	r3, #0
   b92b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b92b8:	e7f7      	b.n	b92aa <_Balloc+0x66>
   b92ba:	bf00      	nop
   b92bc:	000ba169 	.word	0x000ba169
   b92c0:	000ba48c 	.word	0x000ba48c

000b92c4 <_Bfree>:
   b92c4:	b570      	push	{r4, r5, r6, lr}
   b92c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b92c8:	4605      	mov	r5, r0
   b92ca:	460c      	mov	r4, r1
   b92cc:	b976      	cbnz	r6, b92ec <_Bfree+0x28>
   b92ce:	2010      	movs	r0, #16
   b92d0:	f7fc f93e 	bl	b5550 <malloc>
   b92d4:	4602      	mov	r2, r0
   b92d6:	6268      	str	r0, [r5, #36]	; 0x24
   b92d8:	b920      	cbnz	r0, b92e4 <_Bfree+0x20>
   b92da:	4b09      	ldr	r3, [pc, #36]	; (b9300 <_Bfree+0x3c>)
   b92dc:	4809      	ldr	r0, [pc, #36]	; (b9304 <_Bfree+0x40>)
   b92de:	218a      	movs	r1, #138	; 0x8a
   b92e0:	f7fc f97e 	bl	b55e0 <__assert_func>
   b92e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b92e8:	6006      	str	r6, [r0, #0]
   b92ea:	60c6      	str	r6, [r0, #12]
   b92ec:	b13c      	cbz	r4, b92fe <_Bfree+0x3a>
   b92ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b92f0:	6862      	ldr	r2, [r4, #4]
   b92f2:	68db      	ldr	r3, [r3, #12]
   b92f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b92f8:	6021      	str	r1, [r4, #0]
   b92fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b92fe:	bd70      	pop	{r4, r5, r6, pc}
   b9300:	000ba169 	.word	0x000ba169
   b9304:	000ba48c 	.word	0x000ba48c

000b9308 <__multadd>:
   b9308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b930c:	690d      	ldr	r5, [r1, #16]
   b930e:	4607      	mov	r7, r0
   b9310:	460c      	mov	r4, r1
   b9312:	461e      	mov	r6, r3
   b9314:	f101 0c14 	add.w	ip, r1, #20
   b9318:	2000      	movs	r0, #0
   b931a:	f8dc 3000 	ldr.w	r3, [ip]
   b931e:	b299      	uxth	r1, r3
   b9320:	fb02 6101 	mla	r1, r2, r1, r6
   b9324:	0c1e      	lsrs	r6, r3, #16
   b9326:	0c0b      	lsrs	r3, r1, #16
   b9328:	fb02 3306 	mla	r3, r2, r6, r3
   b932c:	b289      	uxth	r1, r1
   b932e:	3001      	adds	r0, #1
   b9330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9334:	4285      	cmp	r5, r0
   b9336:	f84c 1b04 	str.w	r1, [ip], #4
   b933a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b933e:	dcec      	bgt.n	b931a <__multadd+0x12>
   b9340:	b30e      	cbz	r6, b9386 <__multadd+0x7e>
   b9342:	68a3      	ldr	r3, [r4, #8]
   b9344:	42ab      	cmp	r3, r5
   b9346:	dc19      	bgt.n	b937c <__multadd+0x74>
   b9348:	6861      	ldr	r1, [r4, #4]
   b934a:	4638      	mov	r0, r7
   b934c:	3101      	adds	r1, #1
   b934e:	f7ff ff79 	bl	b9244 <_Balloc>
   b9352:	4680      	mov	r8, r0
   b9354:	b928      	cbnz	r0, b9362 <__multadd+0x5a>
   b9356:	4602      	mov	r2, r0
   b9358:	4b0c      	ldr	r3, [pc, #48]	; (b938c <__multadd+0x84>)
   b935a:	480d      	ldr	r0, [pc, #52]	; (b9390 <__multadd+0x88>)
   b935c:	21b5      	movs	r1, #181	; 0xb5
   b935e:	f7fc f93f 	bl	b55e0 <__assert_func>
   b9362:	6922      	ldr	r2, [r4, #16]
   b9364:	3202      	adds	r2, #2
   b9366:	f104 010c 	add.w	r1, r4, #12
   b936a:	0092      	lsls	r2, r2, #2
   b936c:	300c      	adds	r0, #12
   b936e:	f7fe fbca 	bl	b7b06 <memcpy>
   b9372:	4621      	mov	r1, r4
   b9374:	4638      	mov	r0, r7
   b9376:	f7ff ffa5 	bl	b92c4 <_Bfree>
   b937a:	4644      	mov	r4, r8
   b937c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9380:	3501      	adds	r5, #1
   b9382:	615e      	str	r6, [r3, #20]
   b9384:	6125      	str	r5, [r4, #16]
   b9386:	4620      	mov	r0, r4
   b9388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b938c:	000ba3e0 	.word	0x000ba3e0
   b9390:	000ba48c 	.word	0x000ba48c

000b9394 <__s2b>:
   b9394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9398:	460c      	mov	r4, r1
   b939a:	4615      	mov	r5, r2
   b939c:	461f      	mov	r7, r3
   b939e:	2209      	movs	r2, #9
   b93a0:	3308      	adds	r3, #8
   b93a2:	4606      	mov	r6, r0
   b93a4:	fb93 f3f2 	sdiv	r3, r3, r2
   b93a8:	2100      	movs	r1, #0
   b93aa:	2201      	movs	r2, #1
   b93ac:	429a      	cmp	r2, r3
   b93ae:	db09      	blt.n	b93c4 <__s2b+0x30>
   b93b0:	4630      	mov	r0, r6
   b93b2:	f7ff ff47 	bl	b9244 <_Balloc>
   b93b6:	b940      	cbnz	r0, b93ca <__s2b+0x36>
   b93b8:	4602      	mov	r2, r0
   b93ba:	4b19      	ldr	r3, [pc, #100]	; (b9420 <__s2b+0x8c>)
   b93bc:	4819      	ldr	r0, [pc, #100]	; (b9424 <__s2b+0x90>)
   b93be:	21ce      	movs	r1, #206	; 0xce
   b93c0:	f7fc f90e 	bl	b55e0 <__assert_func>
   b93c4:	0052      	lsls	r2, r2, #1
   b93c6:	3101      	adds	r1, #1
   b93c8:	e7f0      	b.n	b93ac <__s2b+0x18>
   b93ca:	9b08      	ldr	r3, [sp, #32]
   b93cc:	6143      	str	r3, [r0, #20]
   b93ce:	2d09      	cmp	r5, #9
   b93d0:	f04f 0301 	mov.w	r3, #1
   b93d4:	6103      	str	r3, [r0, #16]
   b93d6:	dd16      	ble.n	b9406 <__s2b+0x72>
   b93d8:	f104 0909 	add.w	r9, r4, #9
   b93dc:	46c8      	mov	r8, r9
   b93de:	442c      	add	r4, r5
   b93e0:	f818 3b01 	ldrb.w	r3, [r8], #1
   b93e4:	4601      	mov	r1, r0
   b93e6:	3b30      	subs	r3, #48	; 0x30
   b93e8:	220a      	movs	r2, #10
   b93ea:	4630      	mov	r0, r6
   b93ec:	f7ff ff8c 	bl	b9308 <__multadd>
   b93f0:	45a0      	cmp	r8, r4
   b93f2:	d1f5      	bne.n	b93e0 <__s2b+0x4c>
   b93f4:	f1a5 0408 	sub.w	r4, r5, #8
   b93f8:	444c      	add	r4, r9
   b93fa:	1b2d      	subs	r5, r5, r4
   b93fc:	1963      	adds	r3, r4, r5
   b93fe:	42bb      	cmp	r3, r7
   b9400:	db04      	blt.n	b940c <__s2b+0x78>
   b9402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9406:	340a      	adds	r4, #10
   b9408:	2509      	movs	r5, #9
   b940a:	e7f6      	b.n	b93fa <__s2b+0x66>
   b940c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9410:	4601      	mov	r1, r0
   b9412:	3b30      	subs	r3, #48	; 0x30
   b9414:	220a      	movs	r2, #10
   b9416:	4630      	mov	r0, r6
   b9418:	f7ff ff76 	bl	b9308 <__multadd>
   b941c:	e7ee      	b.n	b93fc <__s2b+0x68>
   b941e:	bf00      	nop
   b9420:	000ba3e0 	.word	0x000ba3e0
   b9424:	000ba48c 	.word	0x000ba48c

000b9428 <__hi0bits>:
   b9428:	0c03      	lsrs	r3, r0, #16
   b942a:	041b      	lsls	r3, r3, #16
   b942c:	b9d3      	cbnz	r3, b9464 <__hi0bits+0x3c>
   b942e:	0400      	lsls	r0, r0, #16
   b9430:	2310      	movs	r3, #16
   b9432:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9436:	bf04      	itt	eq
   b9438:	0200      	lsleq	r0, r0, #8
   b943a:	3308      	addeq	r3, #8
   b943c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9440:	bf04      	itt	eq
   b9442:	0100      	lsleq	r0, r0, #4
   b9444:	3304      	addeq	r3, #4
   b9446:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b944a:	bf04      	itt	eq
   b944c:	0080      	lsleq	r0, r0, #2
   b944e:	3302      	addeq	r3, #2
   b9450:	2800      	cmp	r0, #0
   b9452:	db05      	blt.n	b9460 <__hi0bits+0x38>
   b9454:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9458:	f103 0301 	add.w	r3, r3, #1
   b945c:	bf08      	it	eq
   b945e:	2320      	moveq	r3, #32
   b9460:	4618      	mov	r0, r3
   b9462:	4770      	bx	lr
   b9464:	2300      	movs	r3, #0
   b9466:	e7e4      	b.n	b9432 <__hi0bits+0xa>

000b9468 <__lo0bits>:
   b9468:	6803      	ldr	r3, [r0, #0]
   b946a:	f013 0207 	ands.w	r2, r3, #7
   b946e:	4601      	mov	r1, r0
   b9470:	d00b      	beq.n	b948a <__lo0bits+0x22>
   b9472:	07da      	lsls	r2, r3, #31
   b9474:	d423      	bmi.n	b94be <__lo0bits+0x56>
   b9476:	0798      	lsls	r0, r3, #30
   b9478:	bf49      	itett	mi
   b947a:	085b      	lsrmi	r3, r3, #1
   b947c:	089b      	lsrpl	r3, r3, #2
   b947e:	2001      	movmi	r0, #1
   b9480:	600b      	strmi	r3, [r1, #0]
   b9482:	bf5c      	itt	pl
   b9484:	600b      	strpl	r3, [r1, #0]
   b9486:	2002      	movpl	r0, #2
   b9488:	4770      	bx	lr
   b948a:	b298      	uxth	r0, r3
   b948c:	b9a8      	cbnz	r0, b94ba <__lo0bits+0x52>
   b948e:	0c1b      	lsrs	r3, r3, #16
   b9490:	2010      	movs	r0, #16
   b9492:	b2da      	uxtb	r2, r3
   b9494:	b90a      	cbnz	r2, b949a <__lo0bits+0x32>
   b9496:	3008      	adds	r0, #8
   b9498:	0a1b      	lsrs	r3, r3, #8
   b949a:	071a      	lsls	r2, r3, #28
   b949c:	bf04      	itt	eq
   b949e:	091b      	lsreq	r3, r3, #4
   b94a0:	3004      	addeq	r0, #4
   b94a2:	079a      	lsls	r2, r3, #30
   b94a4:	bf04      	itt	eq
   b94a6:	089b      	lsreq	r3, r3, #2
   b94a8:	3002      	addeq	r0, #2
   b94aa:	07da      	lsls	r2, r3, #31
   b94ac:	d403      	bmi.n	b94b6 <__lo0bits+0x4e>
   b94ae:	085b      	lsrs	r3, r3, #1
   b94b0:	f100 0001 	add.w	r0, r0, #1
   b94b4:	d005      	beq.n	b94c2 <__lo0bits+0x5a>
   b94b6:	600b      	str	r3, [r1, #0]
   b94b8:	4770      	bx	lr
   b94ba:	4610      	mov	r0, r2
   b94bc:	e7e9      	b.n	b9492 <__lo0bits+0x2a>
   b94be:	2000      	movs	r0, #0
   b94c0:	4770      	bx	lr
   b94c2:	2020      	movs	r0, #32
   b94c4:	4770      	bx	lr
	...

000b94c8 <__i2b>:
   b94c8:	b510      	push	{r4, lr}
   b94ca:	460c      	mov	r4, r1
   b94cc:	2101      	movs	r1, #1
   b94ce:	f7ff feb9 	bl	b9244 <_Balloc>
   b94d2:	4602      	mov	r2, r0
   b94d4:	b928      	cbnz	r0, b94e2 <__i2b+0x1a>
   b94d6:	4b05      	ldr	r3, [pc, #20]	; (b94ec <__i2b+0x24>)
   b94d8:	4805      	ldr	r0, [pc, #20]	; (b94f0 <__i2b+0x28>)
   b94da:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b94de:	f7fc f87f 	bl	b55e0 <__assert_func>
   b94e2:	2301      	movs	r3, #1
   b94e4:	6144      	str	r4, [r0, #20]
   b94e6:	6103      	str	r3, [r0, #16]
   b94e8:	bd10      	pop	{r4, pc}
   b94ea:	bf00      	nop
   b94ec:	000ba3e0 	.word	0x000ba3e0
   b94f0:	000ba48c 	.word	0x000ba48c

000b94f4 <__multiply>:
   b94f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b94f8:	4691      	mov	r9, r2
   b94fa:	690a      	ldr	r2, [r1, #16]
   b94fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9500:	429a      	cmp	r2, r3
   b9502:	bfb8      	it	lt
   b9504:	460b      	movlt	r3, r1
   b9506:	460c      	mov	r4, r1
   b9508:	bfbc      	itt	lt
   b950a:	464c      	movlt	r4, r9
   b950c:	4699      	movlt	r9, r3
   b950e:	6927      	ldr	r7, [r4, #16]
   b9510:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9514:	68a3      	ldr	r3, [r4, #8]
   b9516:	6861      	ldr	r1, [r4, #4]
   b9518:	eb07 060a 	add.w	r6, r7, sl
   b951c:	42b3      	cmp	r3, r6
   b951e:	b085      	sub	sp, #20
   b9520:	bfb8      	it	lt
   b9522:	3101      	addlt	r1, #1
   b9524:	f7ff fe8e 	bl	b9244 <_Balloc>
   b9528:	b930      	cbnz	r0, b9538 <__multiply+0x44>
   b952a:	4602      	mov	r2, r0
   b952c:	4b44      	ldr	r3, [pc, #272]	; (b9640 <__multiply+0x14c>)
   b952e:	4845      	ldr	r0, [pc, #276]	; (b9644 <__multiply+0x150>)
   b9530:	f240 115d 	movw	r1, #349	; 0x15d
   b9534:	f7fc f854 	bl	b55e0 <__assert_func>
   b9538:	f100 0514 	add.w	r5, r0, #20
   b953c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9540:	462b      	mov	r3, r5
   b9542:	2200      	movs	r2, #0
   b9544:	4543      	cmp	r3, r8
   b9546:	d321      	bcc.n	b958c <__multiply+0x98>
   b9548:	f104 0314 	add.w	r3, r4, #20
   b954c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9550:	f109 0314 	add.w	r3, r9, #20
   b9554:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9558:	9202      	str	r2, [sp, #8]
   b955a:	1b3a      	subs	r2, r7, r4
   b955c:	3a15      	subs	r2, #21
   b955e:	f022 0203 	bic.w	r2, r2, #3
   b9562:	3204      	adds	r2, #4
   b9564:	f104 0115 	add.w	r1, r4, #21
   b9568:	428f      	cmp	r7, r1
   b956a:	bf38      	it	cc
   b956c:	2204      	movcc	r2, #4
   b956e:	9201      	str	r2, [sp, #4]
   b9570:	9a02      	ldr	r2, [sp, #8]
   b9572:	9303      	str	r3, [sp, #12]
   b9574:	429a      	cmp	r2, r3
   b9576:	d80c      	bhi.n	b9592 <__multiply+0x9e>
   b9578:	2e00      	cmp	r6, #0
   b957a:	dd03      	ble.n	b9584 <__multiply+0x90>
   b957c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9580:	2b00      	cmp	r3, #0
   b9582:	d05a      	beq.n	b963a <__multiply+0x146>
   b9584:	6106      	str	r6, [r0, #16]
   b9586:	b005      	add	sp, #20
   b9588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b958c:	f843 2b04 	str.w	r2, [r3], #4
   b9590:	e7d8      	b.n	b9544 <__multiply+0x50>
   b9592:	f8b3 a000 	ldrh.w	sl, [r3]
   b9596:	f1ba 0f00 	cmp.w	sl, #0
   b959a:	d024      	beq.n	b95e6 <__multiply+0xf2>
   b959c:	f104 0e14 	add.w	lr, r4, #20
   b95a0:	46a9      	mov	r9, r5
   b95a2:	f04f 0c00 	mov.w	ip, #0
   b95a6:	f85e 2b04 	ldr.w	r2, [lr], #4
   b95aa:	f8d9 1000 	ldr.w	r1, [r9]
   b95ae:	fa1f fb82 	uxth.w	fp, r2
   b95b2:	b289      	uxth	r1, r1
   b95b4:	fb0a 110b 	mla	r1, sl, fp, r1
   b95b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b95bc:	f8d9 2000 	ldr.w	r2, [r9]
   b95c0:	4461      	add	r1, ip
   b95c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b95c6:	fb0a c20b 	mla	r2, sl, fp, ip
   b95ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b95ce:	b289      	uxth	r1, r1
   b95d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b95d4:	4577      	cmp	r7, lr
   b95d6:	f849 1b04 	str.w	r1, [r9], #4
   b95da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b95de:	d8e2      	bhi.n	b95a6 <__multiply+0xb2>
   b95e0:	9a01      	ldr	r2, [sp, #4]
   b95e2:	f845 c002 	str.w	ip, [r5, r2]
   b95e6:	9a03      	ldr	r2, [sp, #12]
   b95e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b95ec:	3304      	adds	r3, #4
   b95ee:	f1b9 0f00 	cmp.w	r9, #0
   b95f2:	d020      	beq.n	b9636 <__multiply+0x142>
   b95f4:	6829      	ldr	r1, [r5, #0]
   b95f6:	f104 0c14 	add.w	ip, r4, #20
   b95fa:	46ae      	mov	lr, r5
   b95fc:	f04f 0a00 	mov.w	sl, #0
   b9600:	f8bc b000 	ldrh.w	fp, [ip]
   b9604:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9608:	fb09 220b 	mla	r2, r9, fp, r2
   b960c:	4492      	add	sl, r2
   b960e:	b289      	uxth	r1, r1
   b9610:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9614:	f84e 1b04 	str.w	r1, [lr], #4
   b9618:	f85c 2b04 	ldr.w	r2, [ip], #4
   b961c:	f8be 1000 	ldrh.w	r1, [lr]
   b9620:	0c12      	lsrs	r2, r2, #16
   b9622:	fb09 1102 	mla	r1, r9, r2, r1
   b9626:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b962a:	4567      	cmp	r7, ip
   b962c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9630:	d8e6      	bhi.n	b9600 <__multiply+0x10c>
   b9632:	9a01      	ldr	r2, [sp, #4]
   b9634:	50a9      	str	r1, [r5, r2]
   b9636:	3504      	adds	r5, #4
   b9638:	e79a      	b.n	b9570 <__multiply+0x7c>
   b963a:	3e01      	subs	r6, #1
   b963c:	e79c      	b.n	b9578 <__multiply+0x84>
   b963e:	bf00      	nop
   b9640:	000ba3e0 	.word	0x000ba3e0
   b9644:	000ba48c 	.word	0x000ba48c

000b9648 <__pow5mult>:
   b9648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b964c:	4615      	mov	r5, r2
   b964e:	f012 0203 	ands.w	r2, r2, #3
   b9652:	4606      	mov	r6, r0
   b9654:	460f      	mov	r7, r1
   b9656:	d007      	beq.n	b9668 <__pow5mult+0x20>
   b9658:	4c25      	ldr	r4, [pc, #148]	; (b96f0 <__pow5mult+0xa8>)
   b965a:	3a01      	subs	r2, #1
   b965c:	2300      	movs	r3, #0
   b965e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9662:	f7ff fe51 	bl	b9308 <__multadd>
   b9666:	4607      	mov	r7, r0
   b9668:	10ad      	asrs	r5, r5, #2
   b966a:	d03d      	beq.n	b96e8 <__pow5mult+0xa0>
   b966c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b966e:	b97c      	cbnz	r4, b9690 <__pow5mult+0x48>
   b9670:	2010      	movs	r0, #16
   b9672:	f7fb ff6d 	bl	b5550 <malloc>
   b9676:	4602      	mov	r2, r0
   b9678:	6270      	str	r0, [r6, #36]	; 0x24
   b967a:	b928      	cbnz	r0, b9688 <__pow5mult+0x40>
   b967c:	4b1d      	ldr	r3, [pc, #116]	; (b96f4 <__pow5mult+0xac>)
   b967e:	481e      	ldr	r0, [pc, #120]	; (b96f8 <__pow5mult+0xb0>)
   b9680:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b9684:	f7fb ffac 	bl	b55e0 <__assert_func>
   b9688:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b968c:	6004      	str	r4, [r0, #0]
   b968e:	60c4      	str	r4, [r0, #12]
   b9690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b9694:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9698:	b94c      	cbnz	r4, b96ae <__pow5mult+0x66>
   b969a:	f240 2171 	movw	r1, #625	; 0x271
   b969e:	4630      	mov	r0, r6
   b96a0:	f7ff ff12 	bl	b94c8 <__i2b>
   b96a4:	2300      	movs	r3, #0
   b96a6:	f8c8 0008 	str.w	r0, [r8, #8]
   b96aa:	4604      	mov	r4, r0
   b96ac:	6003      	str	r3, [r0, #0]
   b96ae:	f04f 0900 	mov.w	r9, #0
   b96b2:	07eb      	lsls	r3, r5, #31
   b96b4:	d50a      	bpl.n	b96cc <__pow5mult+0x84>
   b96b6:	4639      	mov	r1, r7
   b96b8:	4622      	mov	r2, r4
   b96ba:	4630      	mov	r0, r6
   b96bc:	f7ff ff1a 	bl	b94f4 <__multiply>
   b96c0:	4639      	mov	r1, r7
   b96c2:	4680      	mov	r8, r0
   b96c4:	4630      	mov	r0, r6
   b96c6:	f7ff fdfd 	bl	b92c4 <_Bfree>
   b96ca:	4647      	mov	r7, r8
   b96cc:	106d      	asrs	r5, r5, #1
   b96ce:	d00b      	beq.n	b96e8 <__pow5mult+0xa0>
   b96d0:	6820      	ldr	r0, [r4, #0]
   b96d2:	b938      	cbnz	r0, b96e4 <__pow5mult+0x9c>
   b96d4:	4622      	mov	r2, r4
   b96d6:	4621      	mov	r1, r4
   b96d8:	4630      	mov	r0, r6
   b96da:	f7ff ff0b 	bl	b94f4 <__multiply>
   b96de:	6020      	str	r0, [r4, #0]
   b96e0:	f8c0 9000 	str.w	r9, [r0]
   b96e4:	4604      	mov	r4, r0
   b96e6:	e7e4      	b.n	b96b2 <__pow5mult+0x6a>
   b96e8:	4638      	mov	r0, r7
   b96ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b96ee:	bf00      	nop
   b96f0:	000ba600 	.word	0x000ba600
   b96f4:	000ba169 	.word	0x000ba169
   b96f8:	000ba48c 	.word	0x000ba48c

000b96fc <__lshift>:
   b96fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9700:	460c      	mov	r4, r1
   b9702:	6849      	ldr	r1, [r1, #4]
   b9704:	6923      	ldr	r3, [r4, #16]
   b9706:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b970a:	68a3      	ldr	r3, [r4, #8]
   b970c:	4607      	mov	r7, r0
   b970e:	4691      	mov	r9, r2
   b9710:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9714:	f108 0601 	add.w	r6, r8, #1
   b9718:	42b3      	cmp	r3, r6
   b971a:	db0b      	blt.n	b9734 <__lshift+0x38>
   b971c:	4638      	mov	r0, r7
   b971e:	f7ff fd91 	bl	b9244 <_Balloc>
   b9722:	4605      	mov	r5, r0
   b9724:	b948      	cbnz	r0, b973a <__lshift+0x3e>
   b9726:	4602      	mov	r2, r0
   b9728:	4b2a      	ldr	r3, [pc, #168]	; (b97d4 <__lshift+0xd8>)
   b972a:	482b      	ldr	r0, [pc, #172]	; (b97d8 <__lshift+0xdc>)
   b972c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9730:	f7fb ff56 	bl	b55e0 <__assert_func>
   b9734:	3101      	adds	r1, #1
   b9736:	005b      	lsls	r3, r3, #1
   b9738:	e7ee      	b.n	b9718 <__lshift+0x1c>
   b973a:	2300      	movs	r3, #0
   b973c:	f100 0114 	add.w	r1, r0, #20
   b9740:	f100 0210 	add.w	r2, r0, #16
   b9744:	4618      	mov	r0, r3
   b9746:	4553      	cmp	r3, sl
   b9748:	db37      	blt.n	b97ba <__lshift+0xbe>
   b974a:	6920      	ldr	r0, [r4, #16]
   b974c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9750:	f104 0314 	add.w	r3, r4, #20
   b9754:	f019 091f 	ands.w	r9, r9, #31
   b9758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b975c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9760:	d02f      	beq.n	b97c2 <__lshift+0xc6>
   b9762:	f1c9 0e20 	rsb	lr, r9, #32
   b9766:	468a      	mov	sl, r1
   b9768:	f04f 0c00 	mov.w	ip, #0
   b976c:	681a      	ldr	r2, [r3, #0]
   b976e:	fa02 f209 	lsl.w	r2, r2, r9
   b9772:	ea42 020c 	orr.w	r2, r2, ip
   b9776:	f84a 2b04 	str.w	r2, [sl], #4
   b977a:	f853 2b04 	ldr.w	r2, [r3], #4
   b977e:	4298      	cmp	r0, r3
   b9780:	fa22 fc0e 	lsr.w	ip, r2, lr
   b9784:	d8f2      	bhi.n	b976c <__lshift+0x70>
   b9786:	1b03      	subs	r3, r0, r4
   b9788:	3b15      	subs	r3, #21
   b978a:	f023 0303 	bic.w	r3, r3, #3
   b978e:	3304      	adds	r3, #4
   b9790:	f104 0215 	add.w	r2, r4, #21
   b9794:	4290      	cmp	r0, r2
   b9796:	bf38      	it	cc
   b9798:	2304      	movcc	r3, #4
   b979a:	f841 c003 	str.w	ip, [r1, r3]
   b979e:	f1bc 0f00 	cmp.w	ip, #0
   b97a2:	d001      	beq.n	b97a8 <__lshift+0xac>
   b97a4:	f108 0602 	add.w	r6, r8, #2
   b97a8:	3e01      	subs	r6, #1
   b97aa:	4638      	mov	r0, r7
   b97ac:	612e      	str	r6, [r5, #16]
   b97ae:	4621      	mov	r1, r4
   b97b0:	f7ff fd88 	bl	b92c4 <_Bfree>
   b97b4:	4628      	mov	r0, r5
   b97b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b97ba:	f842 0f04 	str.w	r0, [r2, #4]!
   b97be:	3301      	adds	r3, #1
   b97c0:	e7c1      	b.n	b9746 <__lshift+0x4a>
   b97c2:	3904      	subs	r1, #4
   b97c4:	f853 2b04 	ldr.w	r2, [r3], #4
   b97c8:	f841 2f04 	str.w	r2, [r1, #4]!
   b97cc:	4298      	cmp	r0, r3
   b97ce:	d8f9      	bhi.n	b97c4 <__lshift+0xc8>
   b97d0:	e7ea      	b.n	b97a8 <__lshift+0xac>
   b97d2:	bf00      	nop
   b97d4:	000ba3e0 	.word	0x000ba3e0
   b97d8:	000ba48c 	.word	0x000ba48c

000b97dc <__mcmp>:
   b97dc:	b530      	push	{r4, r5, lr}
   b97de:	6902      	ldr	r2, [r0, #16]
   b97e0:	690c      	ldr	r4, [r1, #16]
   b97e2:	1b12      	subs	r2, r2, r4
   b97e4:	d10e      	bne.n	b9804 <__mcmp+0x28>
   b97e6:	f100 0314 	add.w	r3, r0, #20
   b97ea:	3114      	adds	r1, #20
   b97ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b97f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b97f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b97f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b97fc:	42a5      	cmp	r5, r4
   b97fe:	d003      	beq.n	b9808 <__mcmp+0x2c>
   b9800:	d305      	bcc.n	b980e <__mcmp+0x32>
   b9802:	2201      	movs	r2, #1
   b9804:	4610      	mov	r0, r2
   b9806:	bd30      	pop	{r4, r5, pc}
   b9808:	4283      	cmp	r3, r0
   b980a:	d3f3      	bcc.n	b97f4 <__mcmp+0x18>
   b980c:	e7fa      	b.n	b9804 <__mcmp+0x28>
   b980e:	f04f 32ff 	mov.w	r2, #4294967295
   b9812:	e7f7      	b.n	b9804 <__mcmp+0x28>

000b9814 <__mdiff>:
   b9814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9818:	460c      	mov	r4, r1
   b981a:	4606      	mov	r6, r0
   b981c:	4611      	mov	r1, r2
   b981e:	4620      	mov	r0, r4
   b9820:	4690      	mov	r8, r2
   b9822:	f7ff ffdb 	bl	b97dc <__mcmp>
   b9826:	1e05      	subs	r5, r0, #0
   b9828:	d110      	bne.n	b984c <__mdiff+0x38>
   b982a:	4629      	mov	r1, r5
   b982c:	4630      	mov	r0, r6
   b982e:	f7ff fd09 	bl	b9244 <_Balloc>
   b9832:	b930      	cbnz	r0, b9842 <__mdiff+0x2e>
   b9834:	4b3a      	ldr	r3, [pc, #232]	; (b9920 <__mdiff+0x10c>)
   b9836:	4602      	mov	r2, r0
   b9838:	f240 2132 	movw	r1, #562	; 0x232
   b983c:	4839      	ldr	r0, [pc, #228]	; (b9924 <__mdiff+0x110>)
   b983e:	f7fb fecf 	bl	b55e0 <__assert_func>
   b9842:	2301      	movs	r3, #1
   b9844:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b984c:	bfa4      	itt	ge
   b984e:	4643      	movge	r3, r8
   b9850:	46a0      	movge	r8, r4
   b9852:	4630      	mov	r0, r6
   b9854:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9858:	bfa6      	itte	ge
   b985a:	461c      	movge	r4, r3
   b985c:	2500      	movge	r5, #0
   b985e:	2501      	movlt	r5, #1
   b9860:	f7ff fcf0 	bl	b9244 <_Balloc>
   b9864:	b920      	cbnz	r0, b9870 <__mdiff+0x5c>
   b9866:	4b2e      	ldr	r3, [pc, #184]	; (b9920 <__mdiff+0x10c>)
   b9868:	4602      	mov	r2, r0
   b986a:	f44f 7110 	mov.w	r1, #576	; 0x240
   b986e:	e7e5      	b.n	b983c <__mdiff+0x28>
   b9870:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b9874:	6926      	ldr	r6, [r4, #16]
   b9876:	60c5      	str	r5, [r0, #12]
   b9878:	f104 0914 	add.w	r9, r4, #20
   b987c:	f108 0514 	add.w	r5, r8, #20
   b9880:	f100 0e14 	add.w	lr, r0, #20
   b9884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9888:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b988c:	f108 0210 	add.w	r2, r8, #16
   b9890:	46f2      	mov	sl, lr
   b9892:	2100      	movs	r1, #0
   b9894:	f859 3b04 	ldr.w	r3, [r9], #4
   b9898:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b989c:	fa1f f883 	uxth.w	r8, r3
   b98a0:	fa11 f18b 	uxtah	r1, r1, fp
   b98a4:	0c1b      	lsrs	r3, r3, #16
   b98a6:	eba1 0808 	sub.w	r8, r1, r8
   b98aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b98ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b98b2:	fa1f f888 	uxth.w	r8, r8
   b98b6:	1419      	asrs	r1, r3, #16
   b98b8:	454e      	cmp	r6, r9
   b98ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b98be:	f84a 3b04 	str.w	r3, [sl], #4
   b98c2:	d8e7      	bhi.n	b9894 <__mdiff+0x80>
   b98c4:	1b33      	subs	r3, r6, r4
   b98c6:	3b15      	subs	r3, #21
   b98c8:	f023 0303 	bic.w	r3, r3, #3
   b98cc:	3304      	adds	r3, #4
   b98ce:	3415      	adds	r4, #21
   b98d0:	42a6      	cmp	r6, r4
   b98d2:	bf38      	it	cc
   b98d4:	2304      	movcc	r3, #4
   b98d6:	441d      	add	r5, r3
   b98d8:	4473      	add	r3, lr
   b98da:	469e      	mov	lr, r3
   b98dc:	462e      	mov	r6, r5
   b98de:	4566      	cmp	r6, ip
   b98e0:	d30e      	bcc.n	b9900 <__mdiff+0xec>
   b98e2:	f10c 0203 	add.w	r2, ip, #3
   b98e6:	1b52      	subs	r2, r2, r5
   b98e8:	f022 0203 	bic.w	r2, r2, #3
   b98ec:	3d03      	subs	r5, #3
   b98ee:	45ac      	cmp	ip, r5
   b98f0:	bf38      	it	cc
   b98f2:	2200      	movcc	r2, #0
   b98f4:	441a      	add	r2, r3
   b98f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b98fa:	b17b      	cbz	r3, b991c <__mdiff+0x108>
   b98fc:	6107      	str	r7, [r0, #16]
   b98fe:	e7a3      	b.n	b9848 <__mdiff+0x34>
   b9900:	f856 8b04 	ldr.w	r8, [r6], #4
   b9904:	fa11 f288 	uxtah	r2, r1, r8
   b9908:	1414      	asrs	r4, r2, #16
   b990a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b990e:	b292      	uxth	r2, r2
   b9910:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b9914:	f84e 2b04 	str.w	r2, [lr], #4
   b9918:	1421      	asrs	r1, r4, #16
   b991a:	e7e0      	b.n	b98de <__mdiff+0xca>
   b991c:	3f01      	subs	r7, #1
   b991e:	e7ea      	b.n	b98f6 <__mdiff+0xe2>
   b9920:	000ba3e0 	.word	0x000ba3e0
   b9924:	000ba48c 	.word	0x000ba48c

000b9928 <__ulp>:
   b9928:	b082      	sub	sp, #8
   b992a:	ed8d 0b00 	vstr	d0, [sp]
   b992e:	9b01      	ldr	r3, [sp, #4]
   b9930:	4912      	ldr	r1, [pc, #72]	; (b997c <__ulp+0x54>)
   b9932:	4019      	ands	r1, r3
   b9934:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b9938:	2900      	cmp	r1, #0
   b993a:	dd05      	ble.n	b9948 <__ulp+0x20>
   b993c:	2200      	movs	r2, #0
   b993e:	460b      	mov	r3, r1
   b9940:	ec43 2b10 	vmov	d0, r2, r3
   b9944:	b002      	add	sp, #8
   b9946:	4770      	bx	lr
   b9948:	4249      	negs	r1, r1
   b994a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b994e:	ea4f 5021 	mov.w	r0, r1, asr #20
   b9952:	f04f 0200 	mov.w	r2, #0
   b9956:	f04f 0300 	mov.w	r3, #0
   b995a:	da04      	bge.n	b9966 <__ulp+0x3e>
   b995c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b9960:	fa41 f300 	asr.w	r3, r1, r0
   b9964:	e7ec      	b.n	b9940 <__ulp+0x18>
   b9966:	f1a0 0114 	sub.w	r1, r0, #20
   b996a:	291e      	cmp	r1, #30
   b996c:	bfda      	itte	le
   b996e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b9972:	fa20 f101 	lsrle.w	r1, r0, r1
   b9976:	2101      	movgt	r1, #1
   b9978:	460a      	mov	r2, r1
   b997a:	e7e1      	b.n	b9940 <__ulp+0x18>
   b997c:	7ff00000 	.word	0x7ff00000

000b9980 <__b2d>:
   b9980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9982:	6905      	ldr	r5, [r0, #16]
   b9984:	f100 0714 	add.w	r7, r0, #20
   b9988:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b998c:	1f2e      	subs	r6, r5, #4
   b998e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b9992:	4620      	mov	r0, r4
   b9994:	f7ff fd48 	bl	b9428 <__hi0bits>
   b9998:	f1c0 0320 	rsb	r3, r0, #32
   b999c:	280a      	cmp	r0, #10
   b999e:	f8df c07c 	ldr.w	ip, [pc, #124]	; b9a1c <__b2d+0x9c>
   b99a2:	600b      	str	r3, [r1, #0]
   b99a4:	dc14      	bgt.n	b99d0 <__b2d+0x50>
   b99a6:	f1c0 0e0b 	rsb	lr, r0, #11
   b99aa:	fa24 f10e 	lsr.w	r1, r4, lr
   b99ae:	42b7      	cmp	r7, r6
   b99b0:	ea41 030c 	orr.w	r3, r1, ip
   b99b4:	bf34      	ite	cc
   b99b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b99ba:	2100      	movcs	r1, #0
   b99bc:	3015      	adds	r0, #21
   b99be:	fa04 f000 	lsl.w	r0, r4, r0
   b99c2:	fa21 f10e 	lsr.w	r1, r1, lr
   b99c6:	ea40 0201 	orr.w	r2, r0, r1
   b99ca:	ec43 2b10 	vmov	d0, r2, r3
   b99ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b99d0:	42b7      	cmp	r7, r6
   b99d2:	bf3a      	itte	cc
   b99d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b99d8:	f1a5 0608 	subcc.w	r6, r5, #8
   b99dc:	2100      	movcs	r1, #0
   b99de:	380b      	subs	r0, #11
   b99e0:	d017      	beq.n	b9a12 <__b2d+0x92>
   b99e2:	f1c0 0c20 	rsb	ip, r0, #32
   b99e6:	fa04 f500 	lsl.w	r5, r4, r0
   b99ea:	42be      	cmp	r6, r7
   b99ec:	fa21 f40c 	lsr.w	r4, r1, ip
   b99f0:	ea45 0504 	orr.w	r5, r5, r4
   b99f4:	bf8c      	ite	hi
   b99f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b99fa:	2400      	movls	r4, #0
   b99fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b9a00:	fa01 f000 	lsl.w	r0, r1, r0
   b9a04:	fa24 f40c 	lsr.w	r4, r4, ip
   b9a08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b9a0c:	ea40 0204 	orr.w	r2, r0, r4
   b9a10:	e7db      	b.n	b99ca <__b2d+0x4a>
   b9a12:	ea44 030c 	orr.w	r3, r4, ip
   b9a16:	460a      	mov	r2, r1
   b9a18:	e7d7      	b.n	b99ca <__b2d+0x4a>
   b9a1a:	bf00      	nop
   b9a1c:	3ff00000 	.word	0x3ff00000

000b9a20 <__d2b>:
   b9a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9a24:	4689      	mov	r9, r1
   b9a26:	2101      	movs	r1, #1
   b9a28:	ec57 6b10 	vmov	r6, r7, d0
   b9a2c:	4690      	mov	r8, r2
   b9a2e:	f7ff fc09 	bl	b9244 <_Balloc>
   b9a32:	4604      	mov	r4, r0
   b9a34:	b930      	cbnz	r0, b9a44 <__d2b+0x24>
   b9a36:	4602      	mov	r2, r0
   b9a38:	4b25      	ldr	r3, [pc, #148]	; (b9ad0 <__d2b+0xb0>)
   b9a3a:	4826      	ldr	r0, [pc, #152]	; (b9ad4 <__d2b+0xb4>)
   b9a3c:	f240 310a 	movw	r1, #778	; 0x30a
   b9a40:	f7fb fdce 	bl	b55e0 <__assert_func>
   b9a44:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b9a48:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b9a4c:	bb35      	cbnz	r5, b9a9c <__d2b+0x7c>
   b9a4e:	2e00      	cmp	r6, #0
   b9a50:	9301      	str	r3, [sp, #4]
   b9a52:	d028      	beq.n	b9aa6 <__d2b+0x86>
   b9a54:	4668      	mov	r0, sp
   b9a56:	9600      	str	r6, [sp, #0]
   b9a58:	f7ff fd06 	bl	b9468 <__lo0bits>
   b9a5c:	9900      	ldr	r1, [sp, #0]
   b9a5e:	b300      	cbz	r0, b9aa2 <__d2b+0x82>
   b9a60:	9a01      	ldr	r2, [sp, #4]
   b9a62:	f1c0 0320 	rsb	r3, r0, #32
   b9a66:	fa02 f303 	lsl.w	r3, r2, r3
   b9a6a:	430b      	orrs	r3, r1
   b9a6c:	40c2      	lsrs	r2, r0
   b9a6e:	6163      	str	r3, [r4, #20]
   b9a70:	9201      	str	r2, [sp, #4]
   b9a72:	9b01      	ldr	r3, [sp, #4]
   b9a74:	61a3      	str	r3, [r4, #24]
   b9a76:	2b00      	cmp	r3, #0
   b9a78:	bf14      	ite	ne
   b9a7a:	2202      	movne	r2, #2
   b9a7c:	2201      	moveq	r2, #1
   b9a7e:	6122      	str	r2, [r4, #16]
   b9a80:	b1d5      	cbz	r5, b9ab8 <__d2b+0x98>
   b9a82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b9a86:	4405      	add	r5, r0
   b9a88:	f8c9 5000 	str.w	r5, [r9]
   b9a8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b9a90:	f8c8 0000 	str.w	r0, [r8]
   b9a94:	4620      	mov	r0, r4
   b9a96:	b003      	add	sp, #12
   b9a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9aa0:	e7d5      	b.n	b9a4e <__d2b+0x2e>
   b9aa2:	6161      	str	r1, [r4, #20]
   b9aa4:	e7e5      	b.n	b9a72 <__d2b+0x52>
   b9aa6:	a801      	add	r0, sp, #4
   b9aa8:	f7ff fcde 	bl	b9468 <__lo0bits>
   b9aac:	9b01      	ldr	r3, [sp, #4]
   b9aae:	6163      	str	r3, [r4, #20]
   b9ab0:	2201      	movs	r2, #1
   b9ab2:	6122      	str	r2, [r4, #16]
   b9ab4:	3020      	adds	r0, #32
   b9ab6:	e7e3      	b.n	b9a80 <__d2b+0x60>
   b9ab8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b9abc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b9ac0:	f8c9 0000 	str.w	r0, [r9]
   b9ac4:	6918      	ldr	r0, [r3, #16]
   b9ac6:	f7ff fcaf 	bl	b9428 <__hi0bits>
   b9aca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b9ace:	e7df      	b.n	b9a90 <__d2b+0x70>
   b9ad0:	000ba3e0 	.word	0x000ba3e0
   b9ad4:	000ba48c 	.word	0x000ba48c

000b9ad8 <__ratio>:
   b9ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9adc:	4688      	mov	r8, r1
   b9ade:	4669      	mov	r1, sp
   b9ae0:	4681      	mov	r9, r0
   b9ae2:	f7ff ff4d 	bl	b9980 <__b2d>
   b9ae6:	a901      	add	r1, sp, #4
   b9ae8:	4640      	mov	r0, r8
   b9aea:	ec55 4b10 	vmov	r4, r5, d0
   b9aee:	f7ff ff47 	bl	b9980 <__b2d>
   b9af2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9af6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b9afa:	eba3 0c02 	sub.w	ip, r3, r2
   b9afe:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9b02:	1a9b      	subs	r3, r3, r2
   b9b04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b9b08:	ec51 0b10 	vmov	r0, r1, d0
   b9b0c:	2b00      	cmp	r3, #0
   b9b0e:	bfd6      	itet	le
   b9b10:	460a      	movle	r2, r1
   b9b12:	462a      	movgt	r2, r5
   b9b14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b9b18:	468b      	mov	fp, r1
   b9b1a:	462f      	mov	r7, r5
   b9b1c:	bfd4      	ite	le
   b9b1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b9b22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b9b26:	4620      	mov	r0, r4
   b9b28:	ee10 2a10 	vmov	r2, s0
   b9b2c:	465b      	mov	r3, fp
   b9b2e:	4639      	mov	r1, r7
   b9b30:	f7fd fe1a 	bl	b7768 <__aeabi_ddiv>
   b9b34:	ec41 0b10 	vmov	d0, r0, r1
   b9b38:	b003      	add	sp, #12
   b9b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9b3e <__copybits>:
   b9b3e:	3901      	subs	r1, #1
   b9b40:	b570      	push	{r4, r5, r6, lr}
   b9b42:	1149      	asrs	r1, r1, #5
   b9b44:	6914      	ldr	r4, [r2, #16]
   b9b46:	3101      	adds	r1, #1
   b9b48:	f102 0314 	add.w	r3, r2, #20
   b9b4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9b50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b9b54:	1f05      	subs	r5, r0, #4
   b9b56:	42a3      	cmp	r3, r4
   b9b58:	d30c      	bcc.n	b9b74 <__copybits+0x36>
   b9b5a:	1aa3      	subs	r3, r4, r2
   b9b5c:	3b11      	subs	r3, #17
   b9b5e:	f023 0303 	bic.w	r3, r3, #3
   b9b62:	3211      	adds	r2, #17
   b9b64:	42a2      	cmp	r2, r4
   b9b66:	bf88      	it	hi
   b9b68:	2300      	movhi	r3, #0
   b9b6a:	4418      	add	r0, r3
   b9b6c:	2300      	movs	r3, #0
   b9b6e:	4288      	cmp	r0, r1
   b9b70:	d305      	bcc.n	b9b7e <__copybits+0x40>
   b9b72:	bd70      	pop	{r4, r5, r6, pc}
   b9b74:	f853 6b04 	ldr.w	r6, [r3], #4
   b9b78:	f845 6f04 	str.w	r6, [r5, #4]!
   b9b7c:	e7eb      	b.n	b9b56 <__copybits+0x18>
   b9b7e:	f840 3b04 	str.w	r3, [r0], #4
   b9b82:	e7f4      	b.n	b9b6e <__copybits+0x30>

000b9b84 <__any_on>:
   b9b84:	f100 0214 	add.w	r2, r0, #20
   b9b88:	6900      	ldr	r0, [r0, #16]
   b9b8a:	114b      	asrs	r3, r1, #5
   b9b8c:	4298      	cmp	r0, r3
   b9b8e:	b510      	push	{r4, lr}
   b9b90:	db11      	blt.n	b9bb6 <__any_on+0x32>
   b9b92:	dd0a      	ble.n	b9baa <__any_on+0x26>
   b9b94:	f011 011f 	ands.w	r1, r1, #31
   b9b98:	d007      	beq.n	b9baa <__any_on+0x26>
   b9b9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b9b9e:	fa24 f001 	lsr.w	r0, r4, r1
   b9ba2:	fa00 f101 	lsl.w	r1, r0, r1
   b9ba6:	428c      	cmp	r4, r1
   b9ba8:	d10b      	bne.n	b9bc2 <__any_on+0x3e>
   b9baa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b9bae:	4293      	cmp	r3, r2
   b9bb0:	d803      	bhi.n	b9bba <__any_on+0x36>
   b9bb2:	2000      	movs	r0, #0
   b9bb4:	bd10      	pop	{r4, pc}
   b9bb6:	4603      	mov	r3, r0
   b9bb8:	e7f7      	b.n	b9baa <__any_on+0x26>
   b9bba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b9bbe:	2900      	cmp	r1, #0
   b9bc0:	d0f5      	beq.n	b9bae <__any_on+0x2a>
   b9bc2:	2001      	movs	r0, #1
   b9bc4:	e7f6      	b.n	b9bb4 <__any_on+0x30>

000b9bc6 <_calloc_r>:
   b9bc6:	b513      	push	{r0, r1, r4, lr}
   b9bc8:	434a      	muls	r2, r1
   b9bca:	4611      	mov	r1, r2
   b9bcc:	9201      	str	r2, [sp, #4]
   b9bce:	f7fb fcf7 	bl	b55c0 <_malloc_r>
   b9bd2:	4604      	mov	r4, r0
   b9bd4:	b118      	cbz	r0, b9bde <_calloc_r+0x18>
   b9bd6:	9a01      	ldr	r2, [sp, #4]
   b9bd8:	2100      	movs	r1, #0
   b9bda:	f7fd ffa2 	bl	b7b22 <memset>
   b9bde:	4620      	mov	r0, r4
   b9be0:	b002      	add	sp, #8
   b9be2:	bd10      	pop	{r4, pc}
   b9be4:	0000      	movs	r0, r0
	...

000b9be8 <nan>:
   b9be8:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9bf0 <nan+0x8>
   b9bec:	4770      	bx	lr
   b9bee:	bf00      	nop
   b9bf0:	00000000 	.word	0x00000000
   b9bf4:	7ff80000 	.word	0x7ff80000

000b9bf8 <__ascii_wctomb>:
   b9bf8:	b149      	cbz	r1, b9c0e <__ascii_wctomb+0x16>
   b9bfa:	2aff      	cmp	r2, #255	; 0xff
   b9bfc:	bf85      	ittet	hi
   b9bfe:	238a      	movhi	r3, #138	; 0x8a
   b9c00:	6003      	strhi	r3, [r0, #0]
   b9c02:	700a      	strbls	r2, [r1, #0]
   b9c04:	f04f 30ff 	movhi.w	r0, #4294967295
   b9c08:	bf98      	it	ls
   b9c0a:	2001      	movls	r0, #1
   b9c0c:	4770      	bx	lr
   b9c0e:	4608      	mov	r0, r1
   b9c10:	4770      	bx	lr
	...

000b9c14 <__aeabi_d2lz>:
   b9c14:	b538      	push	{r3, r4, r5, lr}
   b9c16:	2200      	movs	r2, #0
   b9c18:	2300      	movs	r3, #0
   b9c1a:	4604      	mov	r4, r0
   b9c1c:	460d      	mov	r5, r1
   b9c1e:	f7fd feeb 	bl	b79f8 <__aeabi_dcmplt>
   b9c22:	b928      	cbnz	r0, b9c30 <__aeabi_d2lz+0x1c>
   b9c24:	4620      	mov	r0, r4
   b9c26:	4629      	mov	r1, r5
   b9c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9c2c:	f7fd bf2c 	b.w	b7a88 <__aeabi_d2ulz>
   b9c30:	4620      	mov	r0, r4
   b9c32:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b9c36:	f7fd ff27 	bl	b7a88 <__aeabi_d2ulz>
   b9c3a:	4240      	negs	r0, r0
   b9c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9c40:	bd38      	pop	{r3, r4, r5, pc}
   b9c42:	bf00      	nop

000b9c44 <dynalib_user>:
   b9c44:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9c54:	0000 0000 6f70 6577 2f72 7270 6369 7365     ....power/prices
   b9c64:	7000 776f 7265 672f 7465 7000 6972 6563     .power/get.price
   b9c74:	2f73 2c00 0021 2a25 2d64 2a25 2d64 6425     s/.,!.%*d-%*d-%d
   b9c84:	2554 3a64 2a25 3a64 2a25 0064 7073 7261     T%d:%*d:%*d.spar
   b9c94:	636b 696c 6e65 5f74 6d00 7471 0074 6948     kclient_.mqtt.Hi
   b9ca4:	6867 7365 2074 7270 6369 2065 666f 7420     ghest price of t
   b9cb4:	6568 6420 7961 203a 6625 000a 6f4c 6577     he day: %f..Lowe
   b9cc4:	7473 7020 6972 6563 6f20 2066 6874 2065     st price of the 
   b9cd4:	6164 3a79 2520 0a66 4800 756f 7372 6f20     day: %f..Hours o
   b9ce4:	2066 6874 2065 6164 2079 6877 7265 2065     f the day where 
   b9cf4:	6c65 6365 7274 6369 7469 2079 7369 7720     electricity is w
   b9d04:	7469 6968 206e 6361 6563 7470 6465 7220     ithin accepted r
   b9d14:	6e61 6567 0a3a 2500 3230 2064 6f74 2520     ange:..%02d to %
   b9d24:	3230 0a64 4c00 6769 7468 203a 6425 000a     02d..Light: %d..
   b9d34:	7543 7272 6e65 2074 4848 4d3a 3a4d 2520     Current HH:MM: %
   b9d44:	3230 3a64 3025 6432 000a 6843 6165 2870     02d:%02d..Cheap(
   b9d54:	7369 2968 6820 756f 7372 6f20 2066 6874     ish) hours of th
   b9d64:	2065 6164 3a79 0020 3025 6432 7420 206f     e day: .%02d to 
   b9d74:	3025 6432 202c 4c00 776f 7020 6972 6563     %02d, .Low price
   b9d84:	6820 756f 7372 5200 6365 6965 6576 2064      hours.Received 
   b9d94:	6f70 6577 2f72 6567 0a74 7000 776f 7265     power/get..power
   b9da4:	7b00 2220 6579 7261 3a22 2220 6425 2c22     .{ "year": "%d",
   b9db4:	2220 6f6d 746e 2268 223a 3025 6432 2c22      "month":"%02d",
   b9dc4:	2220 6164 2279 203a 2522 3230 2264 202c      "day": "%02d", 
   b9dd4:	6422 7961 745f 6f77 3a22 2220 3025 6432     "day_two": "%02d
   b9de4:	2c22 2220 6f68 7275 3a22 2220 3025 6432     ", "hour": "%02d
   b9df4:	2022 007d 6c65 7270 7369 7265 4200 6769     " }.elpriser.Big
   b9e04:	6567 7473 5300 616d 6c6c 7365 0074 6f50     gest.Smallest.Po
   b9e14:	6577 0072 6567 5f74 7270 6369 7365 5200     wer.get_prices.R
   b9e24:	7465 7275 206e 6176 756c 3a65 2520 0064     eturn value: %d.
   b9e34:	6568 6c6c 206f 6f77 6c72 0064 3931 2e32     hello world.192.
   b9e44:	3631 2e38 2e30 3031 0033 0400 514d 5454     168.0.103...MQTT
   b9e54:	0004 4d06 4951 6473 0370 0000               ...MQIsdp...

000b9e60 <_ZTVN5spark13EthernetClassE>:
	...
   b9e68:	566f 000b 5665 000b 565b 000b 5651 000b     oV..eV..[V..QV..
   b9e78:	5645 000b 5639 000b 6cb5 000b 6cbd 000b     EV..9V...l...l..
   b9e88:	562d 000b 5625 000b 561b 000b 5611 000b     -V..%V...V...V..
   b9e98:	6ced 000b                                   .l..

000b9e9c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9ea4:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b9eb4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9ec4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9ecc:	5d75 000b 5d7b 000b 5db9 000b 5d89 000b     u]..{]...]...]..
   b9edc:	5d77 000b                                   w]..

000b9ee0 <_ZTV9IPAddress>:
	...
   b9ee8:	62b5 000b 62a5 000b 62a7 000b               .b...b...b..

000b9ef4 <_ZTV9USBSerial>:
	...
   b9efc:	63c7 000b 642f 000b 6405 000b 5965 000b     .c../d...d..eY..
   b9f0c:	63f7 000b 63c9 000b 63d9 000b 6429 000b     .c...c...c..)d..
   b9f1c:	63e9 000b 63c1 000b                         .c...c..

000b9f24 <_ZTV11USARTSerial>:
	...
   b9f2c:	6519 000b 6585 000b 655d 000b 5965 000b     .e...e..]e..eY..
   b9f3c:	652d 000b 6549 000b 653b 000b 6557 000b     -e..Ie..;e..We..
   b9f4c:	651b 000b 651f 000b                         .e...e..

000b9f54 <_ZTV7TwoWire>:
	...
   b9f5c:	65e5 000b 662f 000b 6607 000b 65e7 000b     .e../f...f...e..
   b9f6c:	660f 000b 6617 000b 661f 000b 6627 000b     .f...f...f..'f..
   b9f7c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b9f8c:	2072 203d 6425 0000                         r = %d..

000b9f94 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9f9c:	66e5 000b 6709 000b 6bf3 000b 6717 000b     .f...g...k...g..
   b9fac:	66e9 000b                                   .f..

000b9fb0 <_ZTV9TCPClient>:
	...
   b9fb8:	5c05 000b 5c1d 000b 6661 000b 667b 000b     .\...\..af..{f..
   b9fc8:	6a89 000b 66a5 000b 68ff 000b 66d9 000b     .j...f...h...f..
   b9fd8:	6991 000b 67d1 000b 692d 000b 6b3d 000b     .i...g..-i..=k..
   b9fe8:	68cd 000b 66db 000b 668d 000b 671d 000b     .h...f...f...g..
   b9ff8:	67b1 000b                                   .g..

000b9ffc <_ZTVN5spark9WiFiClassE>:
	...
   ba004:	6c57 000b 6c4d 000b 6c43 000b 6bf9 000b     Wl..Ml..Cl...k..
   ba014:	6c37 000b 6c2b 000b 6cb5 000b 6cbd 000b     7l..+l...l...l..
   ba024:	6c1f 000b 6c17 000b 6c0d 000b 6c03 000b     .l...l...l...l..
   ba034:	6ced 000b                                   .l..

000ba038 <_ZTVN5spark12NetworkClassE>:
	...
   ba040:	6c75 000b 6c7f 000b 6c89 000b 6c93 000b     ul...l...l...l..
   ba050:	6c9d 000b 6ca9 000b 6cb5 000b 6cbd 000b     .l...l...l...l..
   ba060:	6cc5 000b 6cd1 000b 6cd9 000b 6ce3 000b     .l...l...l...l..
   ba070:	6ced 000b                                   .l..

000ba074 <_ZSt7nothrow>:
	...

000ba075 <_ZTSSt19_Sp_make_shared_tag>:
   ba075:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   ba085:	6572 5f64 6174 0067 0000                     red_tag....

000ba090 <_ZTISt19_Sp_make_shared_tag>:
   ba090:	a0d0 000b a075 000b                         ....u...

000ba098 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba098:	a130 000b a0a4 000b a154 000b               0.......T...

000ba0a4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba0a4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ba0b4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ba0c4:	0045 0000                                   E...

000ba0c8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba0c8:	0000 0000 a098 000b 6fc5 000b 6fd9 000b     .........o...o..
   ba0d8:	716d 000b 716d 000b 7043 000b 6f85 000b     mq..mq..Cp...o..
   ba0e8:	702b 000b 6fed 000b 6fb7 000b               +p...o...o..

000ba0f4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba0f4:	a130 000b a100 000b a098 000b               0...........

000ba100 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba100:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba110:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba120:	666e 456f 0000 0000                         nfoE....

000ba128 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba128:	0000 0000 a0f4 000b 706d 000b 7081 000b     ........mp...p..
   ba138:	716d 000b 716d 000b 7043 000b 6f85 000b     mq..mq..Cp...o..
   ba148:	7141 000b 70cd 000b 7095 000b               Aq...p...p..

000ba154 <_ZTISt9type_info>:
   ba154:	a0d0 000b a15c 000b                         ....\...

000ba15c <_ZTSSt9type_info>:
   ba15c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba16c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba17c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   ba18c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba19c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba1ac:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba1bc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba1cc:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba1dc:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba1ec:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   ba1fc:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000ba20c <fpi.1>:
   ba20c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ba21c:	0000 0000                                   ....

000ba220 <fpinan.0>:
   ba220:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000ba238 <tinytens>:
   ba238:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ba248:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ba258:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   ba268:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   ba278:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   ba288:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   ba298:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   ba2a8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   ba2b8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   ba2c8:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   ba2d8:	7472 6b6f 632e                               rtok.c.

000ba2df <_ctype_>:
   ba2df:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba2ef:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba2ff:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba30f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba31f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba32f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba33f:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba34f:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba35f:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   ba3df:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   ba3ef:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   ba3ff:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   ba40f:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   ba41f:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   ba42f:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   ba43f:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   ba44f:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   ba45f:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   ba46f:	6874 7865 632e 2e00                          thex.c...

000ba478 <_C_numeric_locale>:
   ba478:	a476 000b 9d1a 000b cd60 2003 0043 4f50     v.......`.. C.PO
   ba488:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   ba498:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba4a8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba4b8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba4c8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba4d8:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba4e8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba4f8:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   ba508:	0063 0000 0000 0000                         c.......

000ba510 <__mprec_bigtens>:
   ba510:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ba520:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ba530:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ba538 <__mprec_tens>:
   ba538:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ba548:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ba558:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ba568:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ba578:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ba588:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ba598:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ba5a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ba5b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ba5c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ba5d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ba5e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ba5f8:	9db4 79d9 7843 44ea                         ...yCx.D

000ba600 <p05.0>:
   ba600:	0005 0000 0019 0000 007d 0000               ........}...

000ba60c <link_const_variable_data_end>:
   ba60c:	000b47e9 	.word	0x000b47e9
   ba610:	000b5679 	.word	0x000b5679
   ba614:	000b56a1 	.word	0x000b56a1
   ba618:	000b5955 	.word	0x000b5955
   ba61c:	000b5a71 	.word	0x000b5a71
   ba620:	000b5be9 	.word	0x000b5be9
   ba624:	000b5c31 	.word	0x000b5c31
   ba628:	000b6c61 	.word	0x000b6c61
   ba62c:	000b6dc5 	.word	0x000b6dc5
