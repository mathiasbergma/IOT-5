
c:/Users/mathi/Desktop/IOT/ElecPrice/target/4.0.0/argon/ElecPrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007b70  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbb90  000bbb90  0000bb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bbbb4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  2003d218  000bbbb8  0001d218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000013f4  2003d400  2003d400  0002d400  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bbd9c  000bbd9c  0002bd9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bbdc4  000bbdc4  0002bdc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0015d092  00000000  00000000  0002bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019a99  00000000  00000000  00188e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000446db  00000000  00000000  001a28f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003450  00000000  00000000  001e6fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000bca8  00000000  00000000  001ea41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042693  00000000  00000000  001f60c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00052806  00000000  00000000  00238759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013c058  00000000  00000000  0028af5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009f4c  00000000  00000000  003c6fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 ff86 	bl	b8f42 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 ff8e 	bl	b8f5e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d218 	.word	0x2003d218
   b404c:	000bbbb8 	.word	0x000bbbb8
   b4050:	2003d3fc 	.word	0x2003d3fc
   b4054:	2003d400 	.word	0x2003d400
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 f845 	bl	b70f0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bbb5c 	.word	0x000bbb5c
   b4080:	000bbb84 	.word	0x000bbb84

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba7a 	b.w	b457c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fbc7 	bl	b481c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bfe5 	b.w	b7060 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b89d 	b.w	b61d4 <malloc>

000b409a <_Znaj>:
   b409a:	f002 b89b 	b.w	b61d4 <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 b8a1 	b.w	b61e4 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 b89f 	b.w	b61e4 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z14myPriceHandlerPKcS0_>:
#endif
    }
}

void myPriceHandler(const char *event, const char *data)
{
   b40b8:	b510      	push	{r4, lr}
#ifdef STATEDEBUG
    digitalWrite(state, LOW);
   b40ba:	4c06      	ldr	r4, [pc, #24]	; (b40d4 <_Z14myPriceHandlerPKcS0_+0x1c>)
   b40bc:	2100      	movs	r1, #0
   b40be:	7820      	ldrb	r0, [r4, #0]
   b40c0:	f004 f8dd 	bl	b827e <digitalWrite>
#endif
    state = GET_DATA;
   b40c4:	2101      	movs	r1, #1
   b40c6:	7021      	strb	r1, [r4, #0]
#ifdef STATEDEBUG
    digitalWrite(state, HIGH);
   b40c8:	4608      	mov	r0, r1
#endif
}
   b40ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(state, HIGH);
   b40ce:	f004 b8d6 	b.w	b827e <digitalWrite>
   b40d2:	bf00      	nop
   b40d4:	2003d798 	.word	0x2003d798

000b40d8 <_Z8callbackPcPhj>:
    pinMode(AWAITING_DATA, OUTPUT);
    pinMode(STARTUP, OUTPUT);
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b40d8:	b510      	push	{r4, lr}
#ifdef STATEDEBUG
    digitalWrite(state, LOW);
   b40da:	4c06      	ldr	r4, [pc, #24]	; (b40f4 <_Z8callbackPcPhj+0x1c>)
   b40dc:	2100      	movs	r1, #0
   b40de:	7820      	ldrb	r0, [r4, #0]
   b40e0:	f004 f8cd 	bl	b827e <digitalWrite>
#endif
    state = GET_DATA;
   b40e4:	2101      	movs	r1, #1
   b40e6:	7021      	strb	r1, [r4, #0]
#ifdef STATEDEBUG
    digitalWrite(state, HIGH);
   b40e8:	4608      	mov	r0, r1
#endif
}
   b40ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(state, HIGH);
   b40ee:	f004 b8c6 	b.w	b827e <digitalWrite>
   b40f2:	bf00      	nop
   b40f4:	2003d798 	.word	0x2003d798

000b40f8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f8:	b40e      	push	{r1, r2, r3}
   b40fa:	b503      	push	{r0, r1, lr}
   b40fc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40fe:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4100:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4104:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4106:	f002 fe76 	bl	b6df6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b410a:	b002      	add	sp, #8
   b410c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4110:	b003      	add	sp, #12
   b4112:	4770      	bx	lr
   b4114:	0000      	movs	r0, r0
	...

000b4118 <_Z9myHandlerPKcS0_>:
{
   b4118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b411c:	4605      	mov	r5, r0
   b411e:	b087      	sub	sp, #28
    int transmission_size = strlen(data);
   b4120:	4608      	mov	r0, r1
{
   b4122:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b4124:	f004 ff91 	bl	b904a <strlen>
    strcpy(event_str, event);
   b4128:	4629      	mov	r1, r5
    int transmission_size = strlen(data);
   b412a:	4606      	mov	r6, r0
    strcpy(event_str, event);
   b412c:	a803      	add	r0, sp, #12
   b412e:	f004 ff66 	bl	b8ffe <strcpy>
    strcat(&temp[atoi(strtok(event_str, "prices/")) * 512], data);
   b4132:	4943      	ldr	r1, [pc, #268]	; (b4240 <_Z9myHandlerPKcS0_+0x128>)
   b4134:	4d43      	ldr	r5, [pc, #268]	; (b4244 <_Z9myHandlerPKcS0_+0x12c>)
   b4136:	a803      	add	r0, sp, #12
   b4138:	f005 fde4 	bl	b9d04 <strtok>
   b413c:	f004 fee9 	bl	b8f12 <atoi>
   b4140:	4621      	mov	r1, r4
   b4142:	eb05 2040 	add.w	r0, r5, r0, lsl #9
   b4146:	f004 ff41 	bl	b8fcc <strcat>
    if (transmission_size < 512)
   b414a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b414e:	d24a      	bcs.n	b41e6 <_Z9myHandlerPKcS0_+0xce>
        Serial.printf("%s\n", temp);
   b4150:	f003 fb94 	bl	b787c <_Z16_fetch_usbserialv>
   b4154:	462a      	mov	r2, r5
   b4156:	493c      	ldr	r1, [pc, #240]	; (b4248 <_Z9myHandlerPKcS0_+0x130>)
   b4158:	4c3c      	ldr	r4, [pc, #240]	; (b424c <_Z9myHandlerPKcS0_+0x134>)
   b415a:	f8df a104 	ldr.w	sl, [pc, #260]	; b4260 <_Z9myHandlerPKcS0_+0x148>
                cost[i] = (atof(token) / 1000)+transport.medium;
   b415e:	4f3c      	ldr	r7, [pc, #240]	; (b4250 <_Z9myHandlerPKcS0_+0x138>)
        Serial.printf("%s\n", temp);
   b4160:	f7ff ffca 	bl	b40f8 <_ZN5Print6printfEPKcz>
        token = strtok(temp, ",!");
   b4164:	4628      	mov	r0, r5
   b4166:	493b      	ldr	r1, [pc, #236]	; (b4254 <_Z9myHandlerPKcS0_+0x13c>)
   b4168:	f005 fdcc 	bl	b9d04 <strtok>
                cost[i] = (atof(token) / 1000)+transport.high;
   b416c:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
   b4170:	e9d9 8900 	ldrd	r8, r9, [r9]
        for (int i = 0; i < range; i++)
   b4174:	2500      	movs	r5, #0
                cost[i] = (atof(token) / 1000)+transport.medium;
   b4176:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b4178:	f8df b0e8 	ldr.w	fp, [pc, #232]	; b4264 <_Z9myHandlerPKcS0_+0x14c>
   b417c:	f8db 3000 	ldr.w	r3, [fp]
   b4180:	42ab      	cmp	r3, r5
   b4182:	dd26      	ble.n	b41d2 <_Z9myHandlerPKcS0_+0xba>
            sscanf(token, "%*d-%*d-%*dT%d:%*d:%*d", &cost_hour[i]);
   b4184:	4652      	mov	r2, sl
   b4186:	4934      	ldr	r1, [pc, #208]	; (b4258 <_Z9myHandlerPKcS0_+0x140>)
   b4188:	f8cd a004 	str.w	sl, [sp, #4]
   b418c:	f002 f842 	bl	b6214 <sscanf>
            token = strtok(NULL, ",!");
   b4190:	4930      	ldr	r1, [pc, #192]	; (b4254 <_Z9myHandlerPKcS0_+0x13c>)
   b4192:	2000      	movs	r0, #0
   b4194:	f005 fdb6 	bl	b9d04 <strtok>
            if (cost_hour[i] >= 0 && cost_hour[i] < 7)
   b4198:	9b01      	ldr	r3, [sp, #4]
   b419a:	681b      	ldr	r3, [r3, #0]
   b419c:	2b06      	cmp	r3, #6
   b419e:	f10a 0a04 	add.w	sl, sl, #4
   b41a2:	d823      	bhi.n	b41ec <_Z9myHandlerPKcS0_+0xd4>
                 cost[i] = (atof(token) / 1000)+transport.low;
   b41a4:	f004 feb2 	bl	b8f0c <atof>
   b41a8:	4632      	mov	r2, r6
   b41aa:	463b      	mov	r3, r7
   b41ac:	ec51 0b10 	vmov	r0, r1, d0
   b41b0:	f004 fcf8 	bl	b8ba4 <__aeabi_ddiv>
   b41b4:	a31e      	add	r3, pc, #120	; (adr r3, b4230 <_Z9myHandlerPKcS0_+0x118>)
   b41b6:	e9d3 2300 	ldrd	r2, r3, [r3]
                cost[i] = (atof(token) / 1000)+transport.medium;
   b41ba:	f004 fa13 	bl	b85e4 <__adddf3>
   b41be:	e9c4 0100 	strd	r0, r1, [r4]
            if ((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b41c2:	4924      	ldr	r1, [pc, #144]	; (b4254 <_Z9myHandlerPKcS0_+0x13c>)
   b41c4:	2000      	movs	r0, #0
   b41c6:	f005 fd9d 	bl	b9d04 <strtok>
   b41ca:	3408      	adds	r4, #8
   b41cc:	bb40      	cbnz	r0, b4220 <_Z9myHandlerPKcS0_+0x108>
                range = i; // Update range, such that the rest of program flow is aware of size
   b41ce:	f8cb 5000 	str.w	r5, [fp]
        digitalWrite(state, LOW);
   b41d2:	4c22      	ldr	r4, [pc, #136]	; (b425c <_Z9myHandlerPKcS0_+0x144>)
   b41d4:	2100      	movs	r1, #0
   b41d6:	7820      	ldrb	r0, [r4, #0]
   b41d8:	f004 f851 	bl	b827e <digitalWrite>
        state = CALCULATE;
   b41dc:	2002      	movs	r0, #2
        digitalWrite(state, HIGH);
   b41de:	2101      	movs	r1, #1
        state = CALCULATE;
   b41e0:	7020      	strb	r0, [r4, #0]
        digitalWrite(state, HIGH);
   b41e2:	f004 f84c 	bl	b827e <digitalWrite>
}
   b41e6:	b007      	add	sp, #28
   b41e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if (cost_hour[i] > 16 && cost_hour[i] < 22)
   b41ec:	3b11      	subs	r3, #17
   b41ee:	2b04      	cmp	r3, #4
   b41f0:	d80a      	bhi.n	b4208 <_Z9myHandlerPKcS0_+0xf0>
                cost[i] = (atof(token) / 1000)+transport.high;
   b41f2:	f004 fe8b 	bl	b8f0c <atof>
   b41f6:	4632      	mov	r2, r6
   b41f8:	463b      	mov	r3, r7
   b41fa:	ec51 0b10 	vmov	r0, r1, d0
   b41fe:	f004 fcd1 	bl	b8ba4 <__aeabi_ddiv>
   b4202:	4642      	mov	r2, r8
   b4204:	464b      	mov	r3, r9
   b4206:	e7d8      	b.n	b41ba <_Z9myHandlerPKcS0_+0xa2>
                cost[i] = (atof(token) / 1000)+transport.medium;
   b4208:	f004 fe80 	bl	b8f0c <atof>
   b420c:	4632      	mov	r2, r6
   b420e:	463b      	mov	r3, r7
   b4210:	ec51 0b10 	vmov	r0, r1, d0
   b4214:	f004 fcc6 	bl	b8ba4 <__aeabi_ddiv>
   b4218:	a307      	add	r3, pc, #28	; (adr r3, b4238 <_Z9myHandlerPKcS0_+0x120>)
   b421a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b421e:	e7cc      	b.n	b41ba <_Z9myHandlerPKcS0_+0xa2>
        for (int i = 0; i < range; i++)
   b4220:	3501      	adds	r5, #1
   b4222:	e7a9      	b.n	b4178 <_Z9myHandlerPKcS0_+0x60>
   b4224:	f3af 8000 	nop.w
   b4228:	2d0e5604 	.word	0x2d0e5604
   b422c:	3ffe9db2 	.word	0x3ffe9db2
   b4230:	ebedfa44 	.word	0xebedfa44
   b4234:	3fcb39c0 	.word	0x3fcb39c0
   b4238:	42c3c9ef 	.word	0x42c3c9ef
   b423c:	3fe469ad 	.word	0x3fe469ad
   b4240:	000bb0b8 	.word	0x000bb0b8
   b4244:	2003d799 	.word	0x2003d799
   b4248:	000bb0c0 	.word	0x000bb0c0
   b424c:	2003d4e8 	.word	0x2003d4e8
   b4250:	408f4000 	.word	0x408f4000
   b4254:	000bb0c4 	.word	0x000bb0c4
   b4258:	000bb0c7 	.word	0x000bb0c7
   b425c:	2003d798 	.word	0x2003d798
   b4260:	2003d668 	.word	0x2003d668
   b4264:	2003d21c 	.word	0x2003d21c

000b4268 <_Z13handle_sensorv>:
{
   b4268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((delta = current_reading - last_read) > 100)
   b426c:	f8df 8068 	ldr.w	r8, [pc, #104]	; b42d8 <_Z13handle_sensorv+0x70>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4270:	f001 fd74 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>
   b4274:	f8d8 6000 	ldr.w	r6, [r8]
   b4278:	1b86      	subs	r6, r0, r6
   b427a:	2e64      	cmp	r6, #100	; 0x64
   b427c:	4605      	mov	r5, r0
   b427e:	d921      	bls.n	b42c4 <_Z13handle_sensorv+0x5c>
        digitalWrite(state, LOW);
   b4280:	4c11      	ldr	r4, [pc, #68]	; (b42c8 <_Z13handle_sensorv+0x60>)
        Serial.printf("In interrupt\n");
   b4282:	f003 fafb 	bl	b787c <_Z16_fetch_usbserialv>
   b4286:	4911      	ldr	r1, [pc, #68]	; (b42cc <_Z13handle_sensorv+0x64>)
   b4288:	f7ff ff36 	bl	b40f8 <_ZN5Print6printfEPKcz>
        state = SENSOR_READ;
   b428c:	2700      	movs	r7, #0
        digitalWrite(state, LOW);
   b428e:	7820      	ldrb	r0, [r4, #0]
   b4290:	2100      	movs	r1, #0
   b4292:	f003 fff4 	bl	b827e <digitalWrite>
        digitalWrite(state, HIGH);
   b4296:	4638      	mov	r0, r7
   b4298:	2101      	movs	r1, #1
        state = SENSOR_READ;
   b429a:	7027      	strb	r7, [r4, #0]
        digitalWrite(state, HIGH);
   b429c:	f003 ffef 	bl	b827e <digitalWrite>
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b42a0:	4b0b      	ldr	r3, [pc, #44]	; (b42d0 <_Z13handle_sensorv+0x68>)
   b42a2:	fbb3 f6f6 	udiv	r6, r3, r6
   b42a6:	4b0b      	ldr	r3, [pc, #44]	; (b42d4 <_Z13handle_sensorv+0x6c>)
        digitalWrite(state, LOW);
   b42a8:	7820      	ldrb	r0, [r4, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b42aa:	601e      	str	r6, [r3, #0]
        digitalWrite(state, LOW);
   b42ac:	4639      	mov	r1, r7
        last_read = current_reading;
   b42ae:	f8c8 5000 	str.w	r5, [r8]
        digitalWrite(state, LOW);
   b42b2:	f003 ffe4 	bl	b827e <digitalWrite>
        state = TRANSMIT_SENSOR;
   b42b6:	2004      	movs	r0, #4
   b42b8:	7020      	strb	r0, [r4, #0]
        digitalWrite(state, HIGH);
   b42ba:	2101      	movs	r1, #1
}
   b42bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        digitalWrite(state, HIGH);
   b42c0:	f003 bfdd 	b.w	b827e <digitalWrite>
}
   b42c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b42c8:	2003d798 	.word	0x2003d798
   b42cc:	000bb0de 	.word	0x000bb0de
   b42d0:	0036ee80 	.word	0x0036ee80
   b42d4:	2003d46c 	.word	0x2003d46c
   b42d8:	2003d404 	.word	0x2003d404
   b42dc:	00000000 	.word	0x00000000

000b42e0 <_Z8calc_lowPA2_iPdPii>:
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 * @param low_price_intervals 2D array into which to low price times are put
 * @param cost array of costs
*/
int calc_low(int low_price_intervals[12][2], double * cost, int * cost_hour, int size)
{
   b42e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42e4:	ed2d 8b02 	vpush	{d8}
   b42e8:	b09d      	sub	sp, #116	; 0x74
   b42ea:	e9cd 3202 	strd	r3, r2, [sp, #8]
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value
   b42ee:	4f50      	ldr	r7, [pc, #320]	; (b4430 <_Z8calc_lowPA2_iPdPii+0x150>)
{
   b42f0:	4605      	mov	r5, r0
   b42f2:	468b      	mov	fp, r1
   b42f4:	468a      	mov	sl, r1

    for (int i = 0; i < size; i++)
   b42f6:	2400      	movs	r4, #0
    double last_small = 100; // Assign any absurdly high value
   b42f8:	2600      	movs	r6, #0
    double last_big = 0;
   b42fa:	f04f 0800 	mov.w	r8, #0
   b42fe:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < size; i++)
   b4302:	9b02      	ldr	r3, [sp, #8]
   b4304:	429c      	cmp	r4, r3
   b4306:	da17      	bge.n	b4338 <_Z8calc_lowPA2_iPdPii+0x58>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4308:	ecba 7b02 	vldmia	sl!, {d7}
   b430c:	4642      	mov	r2, r8
   b430e:	ec51 0b17 	vmov	r0, r1, d7
   b4312:	464b      	mov	r3, r9
   b4314:	ed8d 7b00 	vstr	d7, [sp]
   b4318:	f004 fdaa 	bl	b8e70 <__aeabi_dcmpgt>
   b431c:	b108      	cbz	r0, b4322 <_Z8calc_lowPA2_iPdPii+0x42>
        {
            last_big = cost[i];
   b431e:	e9dd 8900 	ldrd	r8, r9, [sp]
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b4322:	e9dd 0100 	ldrd	r0, r1, [sp]
   b4326:	4632      	mov	r2, r6
   b4328:	463b      	mov	r3, r7
   b432a:	f004 fd83 	bl	b8e34 <__aeabi_dcmplt>
   b432e:	b108      	cbz	r0, b4334 <_Z8calc_lowPA2_iPdPii+0x54>
        {
            last_small = cost[i];
   b4330:	e9dd 6700 	ldrd	r6, r7, [sp]
    for (int i = 0; i < size; i++)
   b4334:	3401      	adds	r4, #1
   b4336:	e7e4      	b.n	b4302 <_Z8calc_lowPA2_iPdPii+0x22>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b4338:	4632      	mov	r2, r6
   b433a:	463b      	mov	r3, r7
   b433c:	4640      	mov	r0, r8
   b433e:	4649      	mov	r1, r9
   b4340:	f004 f94e 	bl	b85e0 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4344:	a338      	add	r3, pc, #224	; (adr r3, b4428 <_Z8calc_lowPA2_iPdPii+0x148>)
   b4346:	e9d3 2300 	ldrd	r2, r3, [r3]
   b434a:	f004 fb01 	bl	b8950 <__aeabi_dmul>
   b434e:	4632      	mov	r2, r6
   b4350:	463b      	mov	r3, r7
   b4352:	f004 f947 	bl	b85e4 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= size; i++)
   b4356:	f04f 0a00 	mov.w	sl, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b435a:	ec41 0b18 	vmov	d8, r0, r1
    int idx = 0;
   b435e:	4654      	mov	r4, sl
    for (int i = 0; i <= size; i++)
   b4360:	9b02      	ldr	r3, [sp, #8]
   b4362:	459a      	cmp	sl, r3
   b4364:	dc12      	bgt.n	b438c <_Z8calc_lowPA2_iPdPii+0xac>
    {
        
        if (cost[i] < small_offset)
   b4366:	e8fb 0102 	ldrd	r0, r1, [fp], #8
   b436a:	ec53 2b18 	vmov	r2, r3, d8
   b436e:	f004 fd61 	bl	b8e34 <__aeabi_dcmplt>
   b4372:	b140      	cbz	r0, b4386 <_Z8calc_lowPA2_iPdPii+0xa6>
        {
            low_range_hour[idx] = cost_hour[i];
   b4374:	9a03      	ldr	r2, [sp, #12]
   b4376:	ab1c      	add	r3, sp, #112	; 0x70
   b4378:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b437c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
   b4380:	f843 2c60 	str.w	r2, [r3, #-96]
            
            idx++;
   b4384:	3401      	adds	r4, #1
    for (int i = 0; i <= size; i++)
   b4386:	f10a 0a01 	add.w	sl, sl, #1
   b438a:	e7e9      	b.n	b4360 <_Z8calc_lowPA2_iPdPii+0x80>
        }
    }

    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b438c:	f003 fa76 	bl	b787c <_Z16_fetch_usbserialv>
   b4390:	4928      	ldr	r1, [pc, #160]	; (b4434 <_Z8calc_lowPA2_iPdPii+0x154>)
   b4392:	4642      	mov	r2, r8
   b4394:	464b      	mov	r3, r9
   b4396:	f7ff feaf 	bl	b40f8 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b439a:	f003 fa6f 	bl	b787c <_Z16_fetch_usbserialv>
   b439e:	4926      	ldr	r1, [pc, #152]	; (b4438 <_Z8calc_lowPA2_iPdPii+0x158>)
   b43a0:	4632      	mov	r2, r6
   b43a2:	463b      	mov	r3, r7
   b43a4:	f7ff fea8 	bl	b40f8 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b43a8:	f003 fa68 	bl	b787c <_Z16_fetch_usbserialv>
   b43ac:	4923      	ldr	r1, [pc, #140]	; (b443c <_Z8calc_lowPA2_iPdPii+0x15c>)
   b43ae:	f7ff fea3 	bl	b40f8 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b43b2:	b36c      	cbz	r4, b4410 <_Z8calc_lowPA2_iPdPii+0x130>
    int i = 0;
   b43b4:	2300      	movs	r3, #0
    int cnt = 0;
   b43b6:	461e      	mov	r6, r3
   b43b8:	1d2f      	adds	r7, r5, #4
    {
        while (i <= idx)
        {
            low_price_intervals[cnt][0] = low_range_hour[i];
   b43ba:	aa1c      	add	r2, sp, #112	; 0x70
   b43bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   b43c0:	f852 2c60 	ldr.w	r2, [r2, #-96]
   b43c4:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
   b43c8:	aa04      	add	r2, sp, #16
   b43ca:	eb02 0083 	add.w	r0, r2, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b43ce:	6802      	ldr	r2, [r0, #0]
   b43d0:	f850 1f04 	ldr.w	r1, [r0, #4]!
   b43d4:	3901      	subs	r1, #1
   b43d6:	428a      	cmp	r2, r1
   b43d8:	f103 0301 	add.w	r3, r3, #1
   b43dc:	d0f7      	beq.n	b43ce <_Z8calc_lowPA2_iPdPii+0xee>
            {
                i++;
            }
            
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b43de:	3201      	adds	r2, #1
        while (i <= idx)
   b43e0:	42a3      	cmp	r3, r4
            low_price_intervals[cnt][1] = low_range_hour[i]+1;
   b43e2:	f847 2036 	str.w	r2, [r7, r6, lsl #3]
            
            cnt++;
   b43e6:	f106 0201 	add.w	r2, r6, #1
        while (i <= idx)
   b43ea:	dd0f      	ble.n	b440c <_Z8calc_lowPA2_iPdPii+0x12c>
        }
        cnt--;
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b43ec:	f8df 8054 	ldr.w	r8, [pc, #84]	; b4444 <_Z8calc_lowPA2_iPdPii+0x164>
    for (int z = 0; z < cnt; z++)
   b43f0:	2400      	movs	r4, #0
   b43f2:	42b4      	cmp	r4, r6
   b43f4:	d00c      	beq.n	b4410 <_Z8calc_lowPA2_iPdPii+0x130>
        Serial.printf("%02d to %02d\n",low_price_intervals[z][0],low_price_intervals[z][1]);
   b43f6:	f003 fa41 	bl	b787c <_Z16_fetch_usbserialv>
   b43fa:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   b43fe:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4402:	4641      	mov	r1, r8
   b4404:	f7ff fe78 	bl	b40f8 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b4408:	3401      	adds	r4, #1
   b440a:	e7f2      	b.n	b43f2 <_Z8calc_lowPA2_iPdPii+0x112>
            cnt++;
   b440c:	4616      	mov	r6, r2
   b440e:	e7d4      	b.n	b43ba <_Z8calc_lowPA2_iPdPii+0xda>

    // Calculations are done - set state
    #ifdef STATEDEBUG
            digitalWrite(state, LOW);
    #endif
    state = TRANSMIT_PRICE;
   b4410:	4b0b      	ldr	r3, [pc, #44]	; (b4440 <_Z8calc_lowPA2_iPdPii+0x160>)
   b4412:	2203      	movs	r2, #3
    #ifdef STATEDEBUG
            digitalWrite(state, HIGH);
    #endif

    return cnt;
}
   b4414:	4620      	mov	r0, r4
    state = TRANSMIT_PRICE;
   b4416:	701a      	strb	r2, [r3, #0]
}
   b4418:	b01d      	add	sp, #116	; 0x74
   b441a:	ecbd 8b02 	vpop	{d8}
   b441e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4422:	bf00      	nop
   b4424:	f3af 8000 	nop.w
   b4428:	33333333 	.word	0x33333333
   b442c:	3fd33333 	.word	0x3fd33333
   b4430:	40590000 	.word	0x40590000
   b4434:	000bb0ec 	.word	0x000bb0ec
   b4438:	000bb10a 	.word	0x000bb10a
   b443c:	000bb127 	.word	0x000bb127
   b4440:	2003d798 	.word	0x2003d798
   b4444:	000bb165 	.word	0x000bb165

000b4448 <_Z9init_GPIOv>:
{
   b4448:	b508      	push	{r3, lr}
    pinMode(SENSOR_READ, OUTPUT);
   b444a:	2101      	movs	r1, #1
   b444c:	2000      	movs	r0, #0
   b444e:	f003 ff05 	bl	b825c <pinMode>
    pinMode(GET_DATA, OUTPUT);
   b4452:	2101      	movs	r1, #1
   b4454:	4608      	mov	r0, r1
   b4456:	f003 ff01 	bl	b825c <pinMode>
    pinMode(CALCULATE, OUTPUT);
   b445a:	2101      	movs	r1, #1
   b445c:	2002      	movs	r0, #2
   b445e:	f003 fefd 	bl	b825c <pinMode>
    pinMode(TRANSMIT_PRICE, OUTPUT);
   b4462:	2101      	movs	r1, #1
   b4464:	2003      	movs	r0, #3
   b4466:	f003 fef9 	bl	b825c <pinMode>
    pinMode(TRANSMIT_SENSOR, OUTPUT);
   b446a:	2101      	movs	r1, #1
   b446c:	2004      	movs	r0, #4
   b446e:	f003 fef5 	bl	b825c <pinMode>
    pinMode(SLEEP_STATE, OUTPUT);
   b4472:	2101      	movs	r1, #1
   b4474:	2005      	movs	r0, #5
   b4476:	f003 fef1 	bl	b825c <pinMode>
    pinMode(AWAITING_DATA, OUTPUT);
   b447a:	2101      	movs	r1, #1
   b447c:	2006      	movs	r0, #6
   b447e:	f003 feed 	bl	b825c <pinMode>
}
   b4482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pinMode(STARTUP, OUTPUT);
   b4486:	2101      	movs	r1, #1
   b4488:	200a      	movs	r0, #10
   b448a:	f003 bee7 	b.w	b825c <pinMode>
	...

000b4490 <_Z10check_mqttv>:

/** @brief Reconnects MQTT client if disconnected
 */
void check_mqtt(void)
{
   b4490:	b500      	push	{lr}
    if (client.isConnected())
   b4492:	481b      	ldr	r0, [pc, #108]	; (b4500 <_Z10check_mqttv+0x70>)
{
   b4494:	b089      	sub	sp, #36	; 0x24
    if (client.isConnected())
   b4496:	f000 fbac 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b449a:	b128      	cbz	r0, b44a8 <_Z10check_mqttv+0x18>
    {
        client.loop();
   b449c:	4818      	ldr	r0, [pc, #96]	; (b4500 <_Z10check_mqttv+0x70>)
        if (client.isConnected())
        {
            Serial.printf("Client reconnected\n");
        }
    }
}
   b449e:	b009      	add	sp, #36	; 0x24
   b44a0:	f85d eb04 	ldr.w	lr, [sp], #4
        client.loop();
   b44a4:	f000 bd91 	b.w	b4fca <_ZN4MQTT4loopEv>
        Serial.printf("Client disconnected\n");
   b44a8:	f003 f9e8 	bl	b787c <_Z16_fetch_usbserialv>
   b44ac:	4915      	ldr	r1, [pc, #84]	; (b4504 <_Z10check_mqttv+0x74>)
   b44ae:	f7ff fe23 	bl	b40f8 <_ZN5Print6printfEPKcz>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b44b2:	4915      	ldr	r1, [pc, #84]	; (b4508 <_Z10check_mqttv+0x78>)
   b44b4:	4668      	mov	r0, sp
   b44b6:	f002 fb48 	bl	b6b4a <_ZN6StringC1EPK19__FlashStringHelper>
        client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b44ba:	f002 fd40 	bl	b6f3e <_ZN9TimeClass3nowEv>
   b44be:	220a      	movs	r2, #10
   b44c0:	4601      	mov	r1, r0
   b44c2:	a804      	add	r0, sp, #16
   b44c4:	f002 fb67 	bl	b6b96 <_ZN6StringC1Elh>
   b44c8:	a904      	add	r1, sp, #16
   b44ca:	4668      	mov	r0, sp
   b44cc:	f002 fbad 	bl	b6c2a <_ZplRK15StringSumHelperRK6String>
   b44d0:	4b0e      	ldr	r3, [pc, #56]	; (b450c <_Z10check_mqttv+0x7c>)
   b44d2:	6801      	ldr	r1, [r0, #0]
   b44d4:	480a      	ldr	r0, [pc, #40]	; (b4500 <_Z10check_mqttv+0x70>)
   b44d6:	461a      	mov	r2, r3
   b44d8:	f000 fc90 	bl	b4dfc <_ZN4MQTT7connectEPKcS1_S1_>
   b44dc:	a804      	add	r0, sp, #16
   b44de:	f002 fae9 	bl	b6ab4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44e2:	4668      	mov	r0, sp
   b44e4:	f002 fae6 	bl	b6ab4 <_ZN6StringD1Ev>
        if (client.isConnected())
   b44e8:	4805      	ldr	r0, [pc, #20]	; (b4500 <_Z10check_mqttv+0x70>)
   b44ea:	f000 fb82 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b44ee:	b120      	cbz	r0, b44fa <_Z10check_mqttv+0x6a>
            Serial.printf("Client reconnected\n");
   b44f0:	f003 f9c4 	bl	b787c <_Z16_fetch_usbserialv>
   b44f4:	4906      	ldr	r1, [pc, #24]	; (b4510 <_Z10check_mqttv+0x80>)
   b44f6:	f7ff fdff 	bl	b40f8 <_ZN5Print6printfEPKcz>
}
   b44fa:	b009      	add	sp, #36	; 0x24
   b44fc:	f85d fb04 	ldr.w	pc, [sp], #4
   b4500:	2003d470 	.word	0x2003d470
   b4504:	000bb173 	.word	0x000bb173
   b4508:	000bb188 	.word	0x000bb188
   b450c:	000bb195 	.word	0x000bb195
   b4510:	000bb19a 	.word	0x000bb19a

000b4514 <_Z10check_timev>:
#ifdef STATEDEBUG
    digitalWrite(state, HIGH);
#endif
}
void check_time(void)
{
   b4514:	b510      	push	{r4, lr}
    int currentHour = Time.hour();
   b4516:	f002 fd23 	bl	b6f60 <_ZN9TimeClass4hourEv>
    if ((currentHour == PULL_TIME_1 || currentHour == PULL_TIME_2) && currentHour != oneShotGuard)
   b451a:	2817      	cmp	r0, #23
   b451c:	d001      	beq.n	b4522 <_Z10check_timev+0xe>
   b451e:	280b      	cmp	r0, #11
   b4520:	d110      	bne.n	b4544 <_Z10check_timev+0x30>
   b4522:	4b09      	ldr	r3, [pc, #36]	; (b4548 <_Z10check_timev+0x34>)
   b4524:	681a      	ldr	r2, [r3, #0]
   b4526:	4282      	cmp	r2, r0
   b4528:	d00c      	beq.n	b4544 <_Z10check_timev+0x30>
    {
        oneShotGuard = currentHour;
#ifdef STATEDEBUG
        digitalWrite(state, LOW);
   b452a:	4c08      	ldr	r4, [pc, #32]	; (b454c <_Z10check_timev+0x38>)
        oneShotGuard = currentHour;
   b452c:	6018      	str	r0, [r3, #0]
        digitalWrite(state, LOW);
   b452e:	2100      	movs	r1, #0
   b4530:	7820      	ldrb	r0, [r4, #0]
   b4532:	f003 fea4 	bl	b827e <digitalWrite>
#endif
        state = GET_DATA;
   b4536:	2101      	movs	r1, #1
   b4538:	7021      	strb	r1, [r4, #0]
#ifdef STATEDEBUG
        digitalWrite(state, HIGH);
   b453a:	4608      	mov	r0, r1
#endif
    }
   b453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(state, HIGH);
   b4540:	f003 be9d 	b.w	b827e <digitalWrite>
   b4544:	bd10      	pop	{r4, pc}
   b4546:	bf00      	nop
   b4548:	2003d218 	.word	0x2003d218
   b454c:	2003d798 	.word	0x2003d798

000b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4550:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4552:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4554:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4556:	b17c      	cbz	r4, b4578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4558:	6863      	ldr	r3, [r4, #4]
   b455a:	3b01      	subs	r3, #1
   b455c:	6063      	str	r3, [r4, #4]
   b455e:	b95b      	cbnz	r3, b4578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4560:	6823      	ldr	r3, [r4, #0]
   b4562:	4620      	mov	r0, r4
   b4564:	689b      	ldr	r3, [r3, #8]
   b4566:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4568:	68a3      	ldr	r3, [r4, #8]
   b456a:	3b01      	subs	r3, #1
   b456c:	60a3      	str	r3, [r4, #8]
   b456e:	b91b      	cbnz	r3, b4578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4570:	6823      	ldr	r3, [r4, #0]
   b4572:	4620      	mov	r0, r4
   b4574:	68db      	ldr	r3, [r3, #12]
   b4576:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4578:	4628      	mov	r0, r5
   b457a:	bd38      	pop	{r3, r4, r5, pc}

000b457c <setup>:
{
   b457c:	b570      	push	{r4, r5, r6, lr}
    state = STARTUP;
   b457e:	4d4c      	ldr	r5, [pc, #304]	; (b46b0 <setup+0x134>)
{
   b4580:	b090      	sub	sp, #64	; 0x40
    init_GPIO();
   b4582:	f7ff ff61 	bl	b4448 <_Z9init_GPIOv>
    state = STARTUP;
   b4586:	200a      	movs	r0, #10
    digitalWrite(state, LOW);
   b4588:	2100      	movs	r1, #0
    state = STARTUP;
   b458a:	7028      	strb	r0, [r5, #0]
    digitalWrite(state, LOW);
   b458c:	f003 fe77 	bl	b827e <digitalWrite>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4590:	f001 fdf8 	bl	b6184 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4594:	b910      	cbnz	r0, b459c <setup+0x20>
            spark_process();
   b4596:	f001 fded 	bl	b6174 <spark_process>
        while (_while() && !_condition()) {
   b459a:	e7f9      	b.n	b4590 <setup+0x14>
   b459c:	f001 fdf2 	bl	b6184 <spark_cloud_flag_connected>
    state = GET_DATA;
   b45a0:	2601      	movs	r6, #1
    digitalWrite(state, HIGH);
   b45a2:	7828      	ldrb	r0, [r5, #0]
   b45a4:	2101      	movs	r1, #1
   b45a6:	f003 fe6a 	bl	b827e <digitalWrite>
    digitalWrite(state, HIGH);
   b45aa:	4631      	mov	r1, r6
   b45ac:	4630      	mov	r0, r6
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b45ae:	2400      	movs	r4, #0
    state = GET_DATA;
   b45b0:	702e      	strb	r6, [r5, #0]
    digitalWrite(state, HIGH);
   b45b2:	f003 fe64 	bl	b827e <digitalWrite>
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b45b6:	2103      	movs	r1, #3
   b45b8:	2008      	movs	r0, #8
   b45ba:	f003 fe4f 	bl	b825c <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b45be:	f04f 33ff 	mov.w	r3, #4294967295
   b45c2:	493c      	ldr	r1, [pc, #240]	; (b46b4 <setup+0x138>)
   b45c4:	9400      	str	r4, [sp, #0]
   b45c6:	4632      	mov	r2, r6
   b45c8:	2008      	movs	r0, #8
   b45ca:	f003 f97f 	bl	b78cc <_Z15attachInterrupttPFvvE13InterruptModeah>
    IPAddress IP = resolver.search("homeassistant.local");
   b45ce:	4a3a      	ldr	r2, [pc, #232]	; (b46b8 <setup+0x13c>)
   b45d0:	493a      	ldr	r1, [pc, #232]	; (b46bc <setup+0x140>)
   b45d2:	a80a      	add	r0, sp, #40	; 0x28
   b45d4:	f001 fad8 	bl	b5b88 <_ZN12mDNSResolver8Resolver6searchEPKc>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   b45d8:	a90a      	add	r1, sp, #40	; 0x28
   b45da:	a806      	add	r0, sp, #24
   b45dc:	f002 fb32 	bl	b6c44 <_ZN6StringC1ERK9Printable>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b45e0:	4b37      	ldr	r3, [pc, #220]	; (b46c0 <setup+0x144>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b45e2:	9a06      	ldr	r2, [sp, #24]
   b45e4:	781b      	ldrb	r3, [r3, #0]
   b45e6:	4937      	ldr	r1, [pc, #220]	; (b46c4 <setup+0x148>)
   b45e8:	f88d 3000 	strb.w	r3, [sp]
   b45ec:	a802      	add	r0, sp, #8
   b45ee:	233c      	movs	r3, #60	; 0x3c
   b45f0:	f002 fedc 	bl	b73ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b45f4:	a803      	add	r0, sp, #12
   b45f6:	f7ff ffab 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("HA IP", IP.toString());
   b45fa:	a806      	add	r0, sp, #24
   b45fc:	f002 fa5a 	bl	b6ab4 <_ZN6StringD1Ev>
   b4600:	a90a      	add	r1, sp, #40	; 0x28
   b4602:	a806      	add	r0, sp, #24
   b4604:	f002 fb1e 	bl	b6c44 <_ZN6StringC1ERK9Printable>
    client.setBroker(IP.toString(), PORT);
   b4608:	9906      	ldr	r1, [sp, #24]
   b460a:	482f      	ldr	r0, [pc, #188]	; (b46c8 <setup+0x14c>)
   b460c:	f240 725b 	movw	r2, #1883	; 0x75b
   b4610:	f000 fafd 	bl	b4c0e <_ZN4MQTT9setBrokerEPKct>
   b4614:	a806      	add	r0, sp, #24
   b4616:	f002 fa4d 	bl	b6ab4 <_ZN6StringD1Ev>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b461a:	4623      	mov	r3, r4
   b461c:	4622      	mov	r2, r4
   b461e:	e9cd 4400 	strd	r4, r4, [sp]
   b4622:	492a      	ldr	r1, [pc, #168]	; (b46cc <setup+0x150>)
   b4624:	482a      	ldr	r0, [pc, #168]	; (b46d0 <setup+0x154>)
   b4626:	f001 fdbd 	bl	b61a4 <spark_subscribe>
   b462a:	4623      	mov	r3, r4
   b462c:	4622      	mov	r2, r4
   b462e:	e9cd 4400 	strd	r4, r4, [sp]
   b4632:	4928      	ldr	r1, [pc, #160]	; (b46d4 <setup+0x158>)
   b4634:	4828      	ldr	r0, [pc, #160]	; (b46d8 <setup+0x15c>)
   b4636:	f001 fdb5 	bl	b61a4 <spark_subscribe>
        return _variable(name, std::forward<ArgsT>(args)...);
   b463a:	782b      	ldrb	r3, [r5, #0]
   b463c:	9306      	str	r3, [sp, #24]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b463e:	2202      	movs	r2, #2
   b4640:	4623      	mov	r3, r4
   b4642:	a906      	add	r1, sp, #24
   b4644:	4825      	ldr	r0, [pc, #148]	; (b46dc <setup+0x160>)
   b4646:	f001 fd8d 	bl	b6164 <spark_variable>
    Serial.printf("Return value: %d", client.connect("client_" + String(Time.now()), "mqtt", "mqtt"));
   b464a:	f003 f917 	bl	b787c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b464e:	4924      	ldr	r1, [pc, #144]	; (b46e0 <setup+0x164>)
   b4650:	4604      	mov	r4, r0
   b4652:	a806      	add	r0, sp, #24
   b4654:	f002 fa79 	bl	b6b4a <_ZN6StringC1EPK19__FlashStringHelper>
   b4658:	f002 fc71 	bl	b6f3e <_ZN9TimeClass3nowEv>
   b465c:	220a      	movs	r2, #10
   b465e:	4601      	mov	r1, r0
   b4660:	a802      	add	r0, sp, #8
   b4662:	f002 fa98 	bl	b6b96 <_ZN6StringC1Elh>
   b4666:	a902      	add	r1, sp, #8
   b4668:	a806      	add	r0, sp, #24
   b466a:	f002 fade 	bl	b6c2a <_ZplRK15StringSumHelperRK6String>
   b466e:	4b1d      	ldr	r3, [pc, #116]	; (b46e4 <setup+0x168>)
   b4670:	6801      	ldr	r1, [r0, #0]
   b4672:	4815      	ldr	r0, [pc, #84]	; (b46c8 <setup+0x14c>)
   b4674:	461a      	mov	r2, r3
   b4676:	f000 fbc1 	bl	b4dfc <_ZN4MQTT7connectEPKcS1_S1_>
   b467a:	491b      	ldr	r1, [pc, #108]	; (b46e8 <setup+0x16c>)
   b467c:	4602      	mov	r2, r0
   b467e:	4620      	mov	r0, r4
   b4680:	f7ff fd3a 	bl	b40f8 <_ZN5Print6printfEPKcz>
   b4684:	a802      	add	r0, sp, #8
   b4686:	f002 fa15 	bl	b6ab4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b468a:	a806      	add	r0, sp, #24
   b468c:	f002 fa12 	bl	b6ab4 <_ZN6StringD1Ev>
    if (client.isConnected())
   b4690:	480d      	ldr	r0, [pc, #52]	; (b46c8 <setup+0x14c>)
   b4692:	f000 faae 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b4696:	b140      	cbz	r0, b46aa <setup+0x12e>
        client.publish("power/get", "hello world");
   b4698:	4914      	ldr	r1, [pc, #80]	; (b46ec <setup+0x170>)
   b469a:	4a15      	ldr	r2, [pc, #84]	; (b46f0 <setup+0x174>)
   b469c:	480a      	ldr	r0, [pc, #40]	; (b46c8 <setup+0x14c>)
   b469e:	f000 fc38 	bl	b4f12 <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b46a2:	4914      	ldr	r1, [pc, #80]	; (b46f4 <setup+0x178>)
   b46a4:	4808      	ldr	r0, [pc, #32]	; (b46c8 <setup+0x14c>)
   b46a6:	f000 fdd8 	bl	b525a <_ZN4MQTT9subscribeEPKc>
}
   b46aa:	b010      	add	sp, #64	; 0x40
   b46ac:	bd70      	pop	{r4, r5, r6, pc}
   b46ae:	bf00      	nop
   b46b0:	2003d798 	.word	0x2003d798
   b46b4:	000b4269 	.word	0x000b4269
   b46b8:	000bb1ae 	.word	0x000bb1ae
   b46bc:	2003d728 	.word	0x2003d728
   b46c0:	2003d400 	.word	0x2003d400
   b46c4:	000bb1c2 	.word	0x000bb1c2
   b46c8:	2003d470 	.word	0x2003d470
   b46cc:	000b4119 	.word	0x000b4119
   b46d0:	000bb206 	.word	0x000bb206
   b46d4:	000b40b9 	.word	0x000b40b9
   b46d8:	000bb1c8 	.word	0x000bb1c8
   b46dc:	000bb1d3 	.word	0x000bb1d3
   b46e0:	000bb18d 	.word	0x000bb18d
   b46e4:	000bb195 	.word	0x000bb195
   b46e8:	000bb1d9 	.word	0x000bb1d9
   b46ec:	000bb1f6 	.word	0x000bb1f6
   b46f0:	000bb1ea 	.word	0x000bb1ea
   b46f4:	000bb200 	.word	0x000bb200

000b46f8 <_Z8get_datai>:
{
   b46f8:	b510      	push	{r4, lr}
    range = MAX_RANGE;
   b46fa:	4b16      	ldr	r3, [pc, #88]	; (b4754 <_Z8get_datai+0x5c>)
   b46fc:	2230      	movs	r2, #48	; 0x30
   b46fe:	601a      	str	r2, [r3, #0]
    temp[0] = 0;
   b4700:	4b15      	ldr	r3, [pc, #84]	; (b4758 <_Z8get_datai+0x60>)
   b4702:	2200      	movs	r2, #0
{
   b4704:	b08c      	sub	sp, #48	; 0x30
    temp[0] = 0;
   b4706:	701a      	strb	r2, [r3, #0]
{
   b4708:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
   b470a:	f002 fc55 	bl	b6fb8 <_ZN9TimeClass4yearEv>
   b470e:	9005      	str	r0, [sp, #20]
   b4710:	f002 fc4a 	bl	b6fa8 <_ZN9TimeClass5monthEv>
   b4714:	9004      	str	r0, [sp, #16]
   b4716:	f002 fc23 	bl	b6f60 <_ZN9TimeClass4hourEv>
   b471a:	1ca1      	adds	r1, r4, #2
   b471c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b4720:	e9cd 4100 	strd	r4, r1, [sp]
   b4724:	9002      	str	r0, [sp, #8]
   b4726:	490d      	ldr	r1, [pc, #52]	; (b475c <_Z8get_datai+0x64>)
   b4728:	a808      	add	r0, sp, #32
   b472a:	f002 faa5 	bl	b6c78 <_ZN6String6formatEPKcz>
   b472e:	4b0c      	ldr	r3, [pc, #48]	; (b4760 <_Z8get_datai+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4730:	9a08      	ldr	r2, [sp, #32]
   b4732:	781b      	ldrb	r3, [r3, #0]
   b4734:	490b      	ldr	r1, [pc, #44]	; (b4764 <_Z8get_datai+0x6c>)
   b4736:	f88d 3000 	strb.w	r3, [sp]
   b473a:	a806      	add	r0, sp, #24
   b473c:	233c      	movs	r3, #60	; 0x3c
   b473e:	f002 fe35 	bl	b73ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4742:	a807      	add	r0, sp, #28
   b4744:	f7ff ff04 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4748:	a808      	add	r0, sp, #32
   b474a:	f002 f9b3 	bl	b6ab4 <_ZN6StringD1Ev>
}
   b474e:	b00c      	add	sp, #48	; 0x30
   b4750:	bd10      	pop	{r4, pc}
   b4752:	bf00      	nop
   b4754:	2003d21c 	.word	0x2003d21c
   b4758:	2003d799 	.word	0x2003d799
   b475c:	000bb20d 	.word	0x000bb20d
   b4760:	2003d401 	.word	0x2003d401
   b4764:	000bb260 	.word	0x000bb260

000b4768 <_Z15transmit_pricesPA2_ii>:
{
   b4768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b476c:	b08a      	sub	sp, #40	; 0x28
   b476e:	4605      	mov	r5, r0
   b4770:	460e      	mov	r6, r1
    Serial.printf("In work\n");
   b4772:	f003 f883 	bl	b787c <_Z16_fetch_usbserialv>
   b4776:	4921      	ldr	r1, [pc, #132]	; (b47fc <_Z15transmit_pricesPA2_ii+0x94>)
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4778:	4f21      	ldr	r7, [pc, #132]	; (b4800 <_Z15transmit_pricesPA2_ii+0x98>)
    Serial.printf("In work\n");
   b477a:	f7ff fcbd 	bl	b40f8 <_ZN5Print6printfEPKcz>
    String data = "Cheap(ish) hours of the day: ";
   b477e:	4921      	ldr	r1, [pc, #132]	; (b4804 <_Z15transmit_pricesPA2_ii+0x9c>)
   b4780:	a802      	add	r0, sp, #8
   b4782:	f002 f9e2 	bl	b6b4a <_ZN6StringC1EPK19__FlashStringHelper>
    for (int z = 0; z < size; z++)
   b4786:	2400      	movs	r4, #0
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4788:	f105 0804 	add.w	r8, r5, #4
    for (int z = 0; z < size; z++)
   b478c:	42b4      	cmp	r4, r6
   b478e:	da10      	bge.n	b47b2 <_Z15transmit_pricesPA2_ii+0x4a>
        data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4790:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
   b4794:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
   b4798:	4639      	mov	r1, r7
   b479a:	a806      	add	r0, sp, #24
   b479c:	f002 fa6c 	bl	b6c78 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b47a0:	a906      	add	r1, sp, #24
   b47a2:	a802      	add	r0, sp, #8
   b47a4:	f002 fa21 	bl	b6bea <_ZN6String6concatERKS_>
   b47a8:	a806      	add	r0, sp, #24
   b47aa:	f002 f983 	bl	b6ab4 <_ZN6StringD1Ev>
    for (int z = 0; z < size; z++)
   b47ae:	3401      	adds	r4, #1
   b47b0:	e7ec      	b.n	b478c <_Z15transmit_pricesPA2_ii+0x24>
   b47b2:	4b15      	ldr	r3, [pc, #84]	; (b4808 <_Z15transmit_pricesPA2_ii+0xa0>)
   b47b4:	9a02      	ldr	r2, [sp, #8]
   b47b6:	781b      	ldrb	r3, [r3, #0]
   b47b8:	4914      	ldr	r1, [pc, #80]	; (b480c <_Z15transmit_pricesPA2_ii+0xa4>)
   b47ba:	f88d 3000 	strb.w	r3, [sp]
   b47be:	a806      	add	r0, sp, #24
   b47c0:	233c      	movs	r3, #60	; 0x3c
   b47c2:	f002 fdf3 	bl	b73ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b47c6:	a807      	add	r0, sp, #28
   b47c8:	f7ff fec2 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    digitalWrite(state, LOW);
   b47cc:	4c10      	ldr	r4, [pc, #64]	; (b4810 <_Z15transmit_pricesPA2_ii+0xa8>)
    client.publish("prices", data);
   b47ce:	9a02      	ldr	r2, [sp, #8]
   b47d0:	4910      	ldr	r1, [pc, #64]	; (b4814 <_Z15transmit_pricesPA2_ii+0xac>)
   b47d2:	4811      	ldr	r0, [pc, #68]	; (b4818 <_Z15transmit_pricesPA2_ii+0xb0>)
   b47d4:	f000 fb9d 	bl	b4f12 <_ZN4MQTT7publishEPKcS1_>
    client.loop();
   b47d8:	480f      	ldr	r0, [pc, #60]	; (b4818 <_Z15transmit_pricesPA2_ii+0xb0>)
   b47da:	f000 fbf6 	bl	b4fca <_ZN4MQTT4loopEv>
    digitalWrite(state, LOW);
   b47de:	7820      	ldrb	r0, [r4, #0]
   b47e0:	2100      	movs	r1, #0
   b47e2:	f003 fd4c 	bl	b827e <digitalWrite>
    state = SLEEP_STATE;
   b47e6:	2005      	movs	r0, #5
    digitalWrite(state, HIGH);
   b47e8:	2101      	movs	r1, #1
    state = SLEEP_STATE;
   b47ea:	7020      	strb	r0, [r4, #0]
    digitalWrite(state, HIGH);
   b47ec:	f003 fd47 	bl	b827e <digitalWrite>
    String data = "Cheap(ish) hours of the day: ";
   b47f0:	a802      	add	r0, sp, #8
   b47f2:	f002 f95f 	bl	b6ab4 <_ZN6StringD1Ev>
}
   b47f6:	b00a      	add	sp, #40	; 0x28
   b47f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b47fc:	000bb269 	.word	0x000bb269
   b4800:	000bb290 	.word	0x000bb290
   b4804:	000bb272 	.word	0x000bb272
   b4808:	2003d401 	.word	0x2003d401
   b480c:	000bb29f 	.word	0x000bb29f
   b4810:	2003d798 	.word	0x2003d798
   b4814:	000bb206 	.word	0x000bb206
   b4818:	2003d470 	.word	0x2003d470

000b481c <loop>:
{
   b481c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (state == GET_DATA)
   b481e:	4c2a      	ldr	r4, [pc, #168]	; (b48c8 <loop+0xac>)
    check_time();
   b4820:	f7ff fe78 	bl	b4514 <_Z10check_timev>
    check_mqtt();
   b4824:	f7ff fe34 	bl	b4490 <_Z10check_mqttv>
    if (state == GET_DATA)
   b4828:	7825      	ldrb	r5, [r4, #0]
   b482a:	2d01      	cmp	r5, #1
   b482c:	d10c      	bne.n	b4848 <loop+0x2c>
        digitalWrite(state, LOW);
   b482e:	2100      	movs	r1, #0
   b4830:	4628      	mov	r0, r5
   b4832:	f003 fd24 	bl	b827e <digitalWrite>
        state = AWAITING_DATA;
   b4836:	2006      	movs	r0, #6
        digitalWrite(state, HIGH);
   b4838:	4629      	mov	r1, r5
        state = AWAITING_DATA;
   b483a:	7020      	strb	r0, [r4, #0]
        digitalWrite(state, HIGH);
   b483c:	f003 fd1f 	bl	b827e <digitalWrite>
        get_data(Time.day());
   b4840:	f002 fba6 	bl	b6f90 <_ZN9TimeClass3dayEv>
   b4844:	f7ff ff58 	bl	b46f8 <_Z8get_datai>
    if (state == CALCULATE)
   b4848:	7823      	ldrb	r3, [r4, #0]
   b484a:	2b02      	cmp	r3, #2
   b484c:	d116      	bne.n	b487c <loop+0x60>
        cnt = calc_low(start_stop, cost, cost_hour, range);
   b484e:	4b1f      	ldr	r3, [pc, #124]	; (b48cc <loop+0xb0>)
   b4850:	4a1f      	ldr	r2, [pc, #124]	; (b48d0 <loop+0xb4>)
   b4852:	4920      	ldr	r1, [pc, #128]	; (b48d4 <loop+0xb8>)
   b4854:	681b      	ldr	r3, [r3, #0]
   b4856:	4820      	ldr	r0, [pc, #128]	; (b48d8 <loop+0xbc>)
   b4858:	f7ff fd42 	bl	b42e0 <_Z8calc_lowPA2_iPdPii>
   b485c:	4b1f      	ldr	r3, [pc, #124]	; (b48dc <loop+0xc0>)
   b485e:	6018      	str	r0, [r3, #0]
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b4860:	f003 f80c 	bl	b787c <_Z16_fetch_usbserialv>
   b4864:	4605      	mov	r5, r0
   b4866:	f002 fb7b 	bl	b6f60 <_ZN9TimeClass4hourEv>
   b486a:	4606      	mov	r6, r0
   b486c:	f002 fb84 	bl	b6f78 <_ZN9TimeClass6minuteEv>
   b4870:	491b      	ldr	r1, [pc, #108]	; (b48e0 <loop+0xc4>)
   b4872:	4603      	mov	r3, r0
   b4874:	1cb2      	adds	r2, r6, #2
   b4876:	4628      	mov	r0, r5
   b4878:	f7ff fc3e 	bl	b40f8 <_ZN5Print6printfEPKcz>
    if (state == TRANSMIT_PRICE)
   b487c:	7823      	ldrb	r3, [r4, #0]
   b487e:	2b03      	cmp	r3, #3
   b4880:	d104      	bne.n	b488c <loop+0x70>
        transmit_prices(start_stop, cnt);
   b4882:	4b16      	ldr	r3, [pc, #88]	; (b48dc <loop+0xc0>)
   b4884:	4814      	ldr	r0, [pc, #80]	; (b48d8 <loop+0xbc>)
   b4886:	6819      	ldr	r1, [r3, #0]
   b4888:	f7ff ff6e 	bl	b4768 <_Z15transmit_pricesPA2_ii>
    if (state == TRANSMIT_SENSOR) // Did we receive a request for updated values
   b488c:	7823      	ldrb	r3, [r4, #0]
   b488e:	2b04      	cmp	r3, #4
   b4890:	d118      	bne.n	b48c4 <loop+0xa8>
        Serial.printf("Received power/get\n");
   b4892:	f002 fff3 	bl	b787c <_Z16_fetch_usbserialv>
   b4896:	4913      	ldr	r1, [pc, #76]	; (b48e4 <loop+0xc8>)
   b4898:	f7ff fc2e 	bl	b40f8 <_ZN5Print6printfEPKcz>
        sprintf(values, "%d", calc_power);
   b489c:	4b12      	ldr	r3, [pc, #72]	; (b48e8 <loop+0xcc>)
   b489e:	4913      	ldr	r1, [pc, #76]	; (b48ec <loop+0xd0>)
   b48a0:	681a      	ldr	r2, [r3, #0]
   b48a2:	4668      	mov	r0, sp
   b48a4:	f001 fcae 	bl	b6204 <sprintf>
        client.publish("power", values);
   b48a8:	4911      	ldr	r1, [pc, #68]	; (b48f0 <loop+0xd4>)
   b48aa:	4812      	ldr	r0, [pc, #72]	; (b48f4 <loop+0xd8>)
   b48ac:	466a      	mov	r2, sp
   b48ae:	f000 fb30 	bl	b4f12 <_ZN4MQTT7publishEPKcS1_>
        digitalWrite(state, LOW);
   b48b2:	7820      	ldrb	r0, [r4, #0]
   b48b4:	2100      	movs	r1, #0
   b48b6:	f003 fce2 	bl	b827e <digitalWrite>
        state = SLEEP_STATE;
   b48ba:	2005      	movs	r0, #5
        digitalWrite(state, HIGH);
   b48bc:	2101      	movs	r1, #1
        state = SLEEP_STATE;
   b48be:	7020      	strb	r0, [r4, #0]
        digitalWrite(state, HIGH);
   b48c0:	f003 fcdd 	bl	b827e <digitalWrite>
}
   b48c4:	b004      	add	sp, #16
   b48c6:	bd70      	pop	{r4, r5, r6, pc}
   b48c8:	2003d798 	.word	0x2003d798
   b48cc:	2003d21c 	.word	0x2003d21c
   b48d0:	2003d668 	.word	0x2003d668
   b48d4:	2003d4e8 	.word	0x2003d4e8
   b48d8:	2003d408 	.word	0x2003d408
   b48dc:	2003d468 	.word	0x2003d468
   b48e0:	000bb2af 	.word	0x000bb2af
   b48e4:	000bb2c9 	.word	0x000bb2c9
   b48e8:	2003d46c 	.word	0x2003d46c
   b48ec:	000bb1e7 	.word	0x000bb1e7
   b48f0:	000bb2dd 	.word	0x000bb2dd
   b48f4:	2003d470 	.word	0x2003d470

000b48f8 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii>:
   b48f8:	b530      	push	{r4, r5, lr}
        val_(val) {
   b48fa:	4b16      	ldr	r3, [pc, #88]	; (b4954 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x5c>)
MQTT client("192.168.110.6", PORT, 512, 30, callback);
   b48fc:	4916      	ldr	r1, [pc, #88]	; (b4958 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x60>)
   b48fe:	4817      	ldr	r0, [pc, #92]	; (b495c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x64>)
   b4900:	2400      	movs	r4, #0
   b4902:	701c      	strb	r4, [r3, #0]
   b4904:	4b16      	ldr	r3, [pc, #88]	; (b4960 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x68>)
   b4906:	b085      	sub	sp, #20
   b4908:	2501      	movs	r5, #1
   b490a:	701d      	strb	r5, [r3, #0]
MQTT client("192.168.110.6", PORT, 512, 30, callback);
   b490c:	4b15      	ldr	r3, [pc, #84]	; (b4964 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x6c>)
   b490e:	9301      	str	r3, [sp, #4]
   b4910:	231e      	movs	r3, #30
   b4912:	9300      	str	r3, [sp, #0]
   b4914:	9402      	str	r4, [sp, #8]
   b4916:	f44f 7300 	mov.w	r3, #512	; 0x200
   b491a:	f240 725b 	movw	r2, #1883	; 0x75b
   b491e:	f000 f86f 	bl	b4a00 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b4922:	4b11      	ldr	r3, [pc, #68]	; (b4968 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x70>)
UDP udp;
   b4924:	4911      	ldr	r1, [pc, #68]	; (b496c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x74>)
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   b4926:	611c      	str	r4, [r3, #16]
        : config_(config) {
   b4928:	1d1a      	adds	r2, r3, #4
   b492a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b492c:	4a10      	ldr	r2, [pc, #64]	; (b4970 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x78>)
   b492e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4930:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4934:	751d      	strb	r5, [r3, #20]
   b4936:	4608      	mov	r0, r1
   b4938:	f001 fff0 	bl	b691c <_ZN3UDPC1Ev>
mDNSResolver::Resolver resolver(udp);
   b493c:	490b      	ldr	r1, [pc, #44]	; (b496c <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x74>)
   b493e:	480d      	ldr	r0, [pc, #52]	; (b4974 <_GLOBAL__sub_I__Z8calc_lowPA2_iPdPii+0x7c>)
   b4940:	f001 f85a 	bl	b59f8 <_ZN12mDNSResolver8ResolverC1ER3UDP>
SYSTEM_THREAD(ENABLED);
   b4944:	4621      	mov	r1, r4
   b4946:	4628      	mov	r0, r5
   b4948:	b005      	add	sp, #20
   b494a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
SYSTEM_THREAD(ENABLED);
   b494e:	f001 bb75 	b.w	b603c <system_thread_set_state>
   b4952:	bf00      	nop
   b4954:	2003d400 	.word	0x2003d400
   b4958:	000bb2e3 	.word	0x000bb2e3
   b495c:	2003d470 	.word	0x2003d470
   b4960:	2003d401 	.word	0x2003d401
   b4964:	000b40d9 	.word	0x000b40d9
   b4968:	2003d4d0 	.word	0x2003d4d0
   b496c:	2003e1a0 	.word	0x2003e1a0
   b4970:	00030010 	.word	0x00030010
   b4974:	2003d728 	.word	0x2003d728

000b4978 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4978:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b497c:	b510      	push	{r4, lr}
   b497e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4980:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4982:	b113      	cbz	r3, b498a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4984:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4986:	f001 fa09 	bl	b5d9c <os_mutex_lock>
#endif
#endif
#endif
        }
   b498a:	4620      	mov	r0, r4
   b498c:	bd10      	pop	{r4, pc}

000b498e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b498e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4990:	6803      	ldr	r3, [r0, #0]
   b4992:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4996:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4998:	b112      	cbz	r2, b49a0 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b499a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b499c:	f001 fa06 	bl	b5dac <os_mutex_unlock>
#endif
#endif
#endif
        }
   b49a0:	4620      	mov	r0, r4
   b49a2:	bd10      	pop	{r4, pc}

000b49a4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b49a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b49a6:	461f      	mov	r7, r3
   b49a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b49ac:	4604      	mov	r4, r0
   b49ae:	460d      	mov	r5, r1
   b49b0:	4616      	mov	r6, r2
    if (thread) {
   b49b2:	b12b      	cbz	r3, b49c0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b49b4:	2301      	movs	r3, #1
   b49b6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b49ba:	3058      	adds	r0, #88	; 0x58
   b49bc:	f001 f9e6 	bl	b5d8c <os_mutex_create>
    }
    this->callback = callback;
   b49c0:	9b08      	ldr	r3, [sp, #32]
   b49c2:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b49c4:	2300      	movs	r3, #0
   b49c6:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b49c8:	b106      	cbz	r6, b49cc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b49ca:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b49cc:	b125      	cbz	r5, b49d8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b49ce:	4629      	mov	r1, r5
   b49d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b49d4:	f002 f8cd 	bl	b6b72 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b49d8:	9b06      	ldr	r3, [sp, #24]
   b49da:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b49dc:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b49de:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b49e0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b49e4:	2bff      	cmp	r3, #255	; 0xff
   b49e6:	bfb8      	it	lt
   b49e8:	23ff      	movlt	r3, #255	; 0xff
   b49ea:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b49ee:	b108      	cbz	r0, b49f4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b49f0:	f7ff fb55 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b49f4:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b49f8:	f7ff fb4f 	bl	b409a <_Znaj>
   b49fc:	61e0      	str	r0, [r4, #28]
}
   b49fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a00 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b4a00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4a04:	4604      	mov	r4, r0
            bool thread) {
   b4a06:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b4a08:	4617      	mov	r7, r2
   b4a0a:	4698      	mov	r8, r3
   b4a0c:	460e      	mov	r6, r1
            bool thread) {
   b4a0e:	f003 fae3 	bl	b7fd8 <_ZN9TCPClientC1Ev>
   b4a12:	490d      	ldr	r1, [pc, #52]	; (b4a48 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b4a14:	61e5      	str	r5, [r4, #28]
   b4a16:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4a1a:	f002 f896 	bl	b6b4a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4a1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b4a22:	9303      	str	r3, [sp, #12]
   b4a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b4a26:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4a28:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b4a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4a2e:	9300      	str	r3, [sp, #0]
   b4a30:	4620      	mov	r0, r4
            bool thread) {
   b4a32:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b4a36:	463b      	mov	r3, r7
   b4a38:	462a      	mov	r2, r5
   b4a3a:	4631      	mov	r1, r6
   b4a3c:	f7ff ffb2 	bl	b49a4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4a40:	4620      	mov	r0, r4
   b4a42:	b004      	add	sp, #16
   b4a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4a48:	000bb164 	.word	0x000bb164

000b4a4c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4a4c:	b510      	push	{r4, lr}
   b4a4e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4a50:	4620      	mov	r0, r4
   b4a52:	f003 fa1d 	bl	b7e90 <_ZN9TCPClient9availableEv>
   b4a56:	2800      	cmp	r0, #0
   b4a58:	d0fa      	beq.n	b4a50 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b4a5a:	4620      	mov	r0, r4
   b4a5c:	f003 f826 	bl	b7aac <_ZN9TCPClient4readEv>
}
   b4a60:	b2c0      	uxtb	r0, r0
   b4a62:	bd10      	pop	{r4, pc}

000b4a64 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4a68:	4605      	mov	r5, r0
   b4a6a:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4a6c:	f7ff ffee 	bl	b4a4c <_ZN4MQTT8readByteEv>
   b4a70:	69eb      	ldr	r3, [r5, #28]
   b4a72:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4a74:	69eb      	ldr	r3, [r5, #28]
   b4a76:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b4a7a:	f04f 0901 	mov.w	r9, #1
   b4a7e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4a82:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4a84:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4a86:	4628      	mov	r0, r5
   b4a88:	f7ff ffe0 	bl	b4a4c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4a8c:	4626      	mov	r6, r4
   b4a8e:	69eb      	ldr	r3, [r5, #28]
   b4a90:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4a92:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b4a96:	fb13 f309 	smulbb	r3, r3, r9
   b4a9a:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4a9c:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b4a9e:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b4aa0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b4aa2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4aa4:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b4aa8:	d4ed      	bmi.n	b4a86 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b4aaa:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4aac:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b4ab0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4ab4:	d11e      	bne.n	b4af4 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b4ab6:	4628      	mov	r0, r5
   b4ab8:	f7ff ffc8 	bl	b4a4c <_ZN4MQTT8readByteEv>
   b4abc:	69eb      	ldr	r3, [r5, #28]
   b4abe:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b4ac0:	4628      	mov	r0, r5
   b4ac2:	f7ff ffc3 	bl	b4a4c <_ZN4MQTT8readByteEv>
   b4ac6:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b4ac8:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b4aca:	b2b6      	uxth	r6, r6
   b4acc:	69eb      	ldr	r3, [r5, #28]
   b4ace:	b2a4      	uxth	r4, r4
   b4ad0:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b4ad2:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4ad4:	b2b6      	uxth	r6, r6
   b4ad6:	42be      	cmp	r6, r7
   b4ad8:	d20e      	bcs.n	b4af8 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b4ada:	4628      	mov	r0, r5
   b4adc:	f7ff ffb6 	bl	b4a4c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b4ae0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4ae4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b4ae6:	bf84      	itt	hi
   b4ae8:	69eb      	ldrhi	r3, [r5, #28]
   b4aea:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4aec:	3401      	adds	r4, #1
   b4aee:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b4af0:	3601      	adds	r6, #1
   b4af2:	e7ef      	b.n	b4ad4 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4af4:	2600      	movs	r6, #0
   b4af6:	e7ed      	b.n	b4ad4 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4af8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b4afc:	42a3      	cmp	r3, r4
   b4afe:	bf2c      	ite	cs
   b4b00:	4620      	movcs	r0, r4
   b4b02:	2000      	movcc	r0, #0
   b4b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4b08 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4b08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4b0c:	4615      	mov	r5, r2
   b4b0e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b4b10:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4b12:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4b14:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4b16:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4b18:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4b1a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b4b1e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4b22:	f103 0401 	add.w	r4, r3, #1
   b4b26:	4403      	add	r3, r0
            digit |= 0x80;
   b4b28:	bf88      	it	hi
   b4b2a:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b4b2e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4b32:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4b36:	b2e4      	uxtb	r4, r4
   b4b38:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4b3c:	d81e      	bhi.n	b4b7c <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b4b3e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b4b42:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4b46:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4b48:	4622      	mov	r2, r4
   b4b4a:	a901      	add	r1, sp, #4
   b4b4c:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4b4e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4b52:	f004 f9f6 	bl	b8f42 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4b56:	1c72      	adds	r2, r6, #1
   b4b58:	4422      	add	r2, r4
   b4b5a:	4641      	mov	r1, r8
   b4b5c:	4638      	mov	r0, r7
   b4b5e:	f002 ff90 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b4b62:	4605      	mov	r5, r0
   b4b64:	f001 f8fa 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4b68:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b4b6a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4b6c:	4432      	add	r2, r6
   b4b6e:	b2a8      	uxth	r0, r5
}
   b4b70:	1a13      	subs	r3, r2, r0
   b4b72:	4258      	negs	r0, r3
   b4b74:	4158      	adcs	r0, r3
   b4b76:	b002      	add	sp, #8
   b4b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4b7c:	4623      	mov	r3, r4
   b4b7e:	e7ca      	b.n	b4b16 <_ZN4MQTT5writeEhPht+0xe>

000b4b80 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b4b80:	b513      	push	{r0, r1, r4, lr}
   b4b82:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b4b84:	4601      	mov	r1, r0
   b4b86:	a801      	add	r0, sp, #4
   b4b88:	f7ff fef6 	bl	b4978 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b4b8c:	69e3      	ldr	r3, [r4, #28]
   b4b8e:	22e0      	movs	r2, #224	; 0xe0
   b4b90:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b4b92:	69e3      	ldr	r3, [r4, #28]
   b4b94:	2200      	movs	r2, #0
   b4b96:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b4b98:	69e1      	ldr	r1, [r4, #28]
   b4b9a:	2202      	movs	r2, #2
   b4b9c:	4620      	mov	r0, r4
   b4b9e:	f002 ff70 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b4ba2:	4620      	mov	r0, r4
   b4ba4:	f003 f9ce 	bl	b7f44 <_ZN9TCPClient4stopEv>
   b4ba8:	f001 f8d8 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b4bac:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b4bb0:	a801      	add	r0, sp, #4
   b4bb2:	f7ff feec 	bl	b498e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4bb6:	b002      	add	sp, #8
   b4bb8:	bd10      	pop	{r4, pc}

000b4bba <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4bba:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4bbe:	4605      	mov	r5, r0
    pos += 2;
   b4bc0:	b298      	uxth	r0, r3
   b4bc2:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b4bc4:	5cce      	ldrb	r6, [r1, r3]
   b4bc6:	b29c      	uxth	r4, r3
   b4bc8:	b156      	cbz	r6, b4be0 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4bca:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4bce:	4584      	cmp	ip, r0
   b4bd0:	f103 0701 	add.w	r7, r3, #1
   b4bd4:	d904      	bls.n	b4be0 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b4bd6:	1c44      	adds	r4, r0, #1
   b4bd8:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b4bda:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b4bdc:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4bde:	e7f1      	b.n	b4bc4 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b4be0:	b299      	uxth	r1, r3
   b4be2:	1a41      	subs	r1, r0, r1
   b4be4:	440a      	add	r2, r1
   b4be6:	0a21      	lsrs	r1, r4, #8
   b4be8:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4bec:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b4bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4bf2 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4bf2:	b538      	push	{r3, r4, r5, lr}
   b4bf4:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4bf6:	f003 f86d 	bl	b7cd4 <_ZN9TCPClient9connectedEv>
   b4bfa:	2800      	cmp	r0, #0
   b4bfc:	bf14      	ite	ne
   b4bfe:	2501      	movne	r5, #1
   b4c00:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4c02:	d102      	bne.n	b4c0a <_ZN4MQTT11isConnectedEv+0x18>
   b4c04:	4620      	mov	r0, r4
   b4c06:	f003 f99d 	bl	b7f44 <_ZN9TCPClient4stopEv>
    return rc;
}
   b4c0a:	4628      	mov	r0, r5
   b4c0c:	bd38      	pop	{r3, r4, r5, pc}

000b4c0e <_ZN4MQTT9setBrokerEPKct>:
void MQTT::setBroker(const char* domain, uint16_t port) {
   b4c0e:	b570      	push	{r4, r5, r6, lr}
   b4c10:	4604      	mov	r4, r0
   b4c12:	460e      	mov	r6, r1
   b4c14:	4615      	mov	r5, r2
    if(isConnected()) {
   b4c16:	f7ff ffec 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b4c1a:	b110      	cbz	r0, b4c22 <_ZN4MQTT9setBrokerEPKct+0x14>
        disconnect();
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	f7ff ffaf 	bl	b4b80 <_ZN4MQTT10disconnectEv>
    this->domain = domain;
   b4c22:	4631      	mov	r1, r6
   b4c24:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4c28:	f001 ffa3 	bl	b6b72 <_ZN6StringaSEPKc>
    this->ip = NULL;
   b4c2c:	2300      	movs	r3, #0
   b4c2e:	64a3      	str	r3, [r4, #72]	; 0x48
    this->port = port;
   b4c30:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
}
   b4c34:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4c38 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4c3c:	b088      	sub	sp, #32
   b4c3e:	4604      	mov	r4, r0
   b4c40:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4c44:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4c48:	4689      	mov	r9, r1
   b4c4a:	4617      	mov	r7, r2
   b4c4c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4c4e:	f7ff ffd0 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b4c52:	4605      	mov	r5, r0
   b4c54:	2800      	cmp	r0, #0
   b4c56:	f040 80cd 	bne.w	b4df4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4c5a:	4621      	mov	r1, r4
   b4c5c:	a801      	add	r0, sp, #4
   b4c5e:	f7ff fe8b 	bl	b4978 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4c62:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4c64:	2900      	cmp	r1, #0
   b4c66:	f040 8088 	bne.w	b4d7a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4c6a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4c6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4c70:	462b      	mov	r3, r5
   b4c72:	4620      	mov	r0, r4
   b4c74:	f002 ffb0 	bl	b7bd8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4c78:	2800      	cmp	r0, #0
   b4c7a:	d07a      	beq.n	b4d72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4c7c:	2301      	movs	r3, #1
   b4c7e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4c80:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4c84:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4c86:	2b04      	cmp	r3, #4
   b4c88:	4b5b      	ldr	r3, [pc, #364]	; (b4df8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4c8a:	f040 8081 	bne.w	b4d90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4c8e:	6818      	ldr	r0, [r3, #0]
   b4c90:	8899      	ldrh	r1, [r3, #4]
   b4c92:	799b      	ldrb	r3, [r3, #6]
   b4c94:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4c98:	f88d 300e 	strb.w	r3, [sp, #14]
   b4c9c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4c9e:	f8c2 0005 	str.w	r0, [r2, #5]
   b4ca2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4ca6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4caa:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4cae:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4cb0:	230c      	movs	r3, #12
            if (willTopic) {
   b4cb2:	f1b8 0f00 	cmp.w	r8, #0
   b4cb6:	f000 8081 	beq.w	b4dbc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4cba:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b4cbe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4cc2:	0140      	lsls	r0, r0, #5
   b4cc4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4cc8:	f040 0006 	orr.w	r0, r0, #6
   b4ccc:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b4cce:	f1ba 0f00 	cmp.w	sl, #0
   b4cd2:	d101      	bne.n	b4cd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4cd4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4cd8:	b11f      	cbz	r7, b4ce2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4cda:	2e00      	cmp	r6, #0
   b4cdc:	d170      	bne.n	b4dc0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b4cde:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4ce2:	69e2      	ldr	r2, [r4, #28]
   b4ce4:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4ce6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4ce8:	69e1      	ldr	r1, [r4, #28]
   b4cea:	1c58      	adds	r0, r3, #1
   b4cec:	1212      	asrs	r2, r2, #8
   b4cee:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b4cf0:	1c9a      	adds	r2, r3, #2
   b4cf2:	69e1      	ldr	r1, [r4, #28]
   b4cf4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4cf6:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4cf8:	3303      	adds	r3, #3
   b4cfa:	69e2      	ldr	r2, [r4, #28]
   b4cfc:	4649      	mov	r1, r9
   b4cfe:	4620      	mov	r0, r4
   b4d00:	f7ff ff5b 	bl	b4bba <_ZN4MQTT11writeStringEPKcPht>
   b4d04:	4603      	mov	r3, r0
            if (willTopic) {
   b4d06:	f1b8 0f00 	cmp.w	r8, #0
   b4d0a:	d00b      	beq.n	b4d24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4d0c:	69e2      	ldr	r2, [r4, #28]
   b4d0e:	4641      	mov	r1, r8
   b4d10:	4620      	mov	r0, r4
   b4d12:	f7ff ff52 	bl	b4bba <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b4d16:	69e2      	ldr	r2, [r4, #28]
   b4d18:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4d1a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	f7ff ff4c 	bl	b4bba <_ZN4MQTT11writeStringEPKcPht>
   b4d22:	4603      	mov	r3, r0
            if(user != NULL) {
   b4d24:	b167      	cbz	r7, b4d40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b4d26:	69e2      	ldr	r2, [r4, #28]
   b4d28:	4639      	mov	r1, r7
   b4d2a:	4620      	mov	r0, r4
   b4d2c:	f7ff ff45 	bl	b4bba <_ZN4MQTT11writeStringEPKcPht>
   b4d30:	4603      	mov	r3, r0
                if(pass != NULL) {
   b4d32:	b12e      	cbz	r6, b4d40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b4d34:	69e2      	ldr	r2, [r4, #28]
   b4d36:	4631      	mov	r1, r6
   b4d38:	4620      	mov	r0, r4
   b4d3a:	f7ff ff3e 	bl	b4bba <_ZN4MQTT11writeStringEPKcPht>
   b4d3e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4d40:	3b05      	subs	r3, #5
   b4d42:	69e2      	ldr	r2, [r4, #28]
   b4d44:	b29b      	uxth	r3, r3
   b4d46:	2110      	movs	r1, #16
   b4d48:	4620      	mov	r0, r4
   b4d4a:	f7ff fedd 	bl	b4b08 <_ZN4MQTT5writeEhPht>
   b4d4e:	f001 f805 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4d52:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4d56:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4d5a:	4620      	mov	r0, r4
   b4d5c:	f003 f898 	bl	b7e90 <_ZN9TCPClient9availableEv>
   b4d60:	bb88      	cbnz	r0, b4dc6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b4d62:	f000 fffb 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4d68:	1ac0      	subs	r0, r0, r3
   b4d6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4d6c:	4373      	muls	r3, r6
   b4d6e:	4298      	cmp	r0, r3
   b4d70:	d9f3      	bls.n	b4d5a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b4d72:	4620      	mov	r0, r4
   b4d74:	f003 f8e6 	bl	b7f44 <_ZN9TCPClient4stopEv>
   b4d78:	e035      	b.n	b4de6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4d7a:	a802      	add	r0, sp, #8
   b4d7c:	f002 fd14 	bl	b77a8 <_ZN9IPAddressC1EPKh>
   b4d80:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4d84:	462b      	mov	r3, r5
   b4d86:	a902      	add	r1, sp, #8
   b4d88:	4620      	mov	r0, r4
   b4d8a:	f003 f805 	bl	b7d98 <_ZN9TCPClient7connectE9IPAddresstm>
    virtual ~IPAddress() {}
   b4d8e:	e773      	b.n	b4c78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4d90:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4d94:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4d98:	7bdb      	ldrb	r3, [r3, #15]
   b4d9a:	f10d 0c08 	add.w	ip, sp, #8
   b4d9e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b4da2:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b4da6:	ab02      	add	r3, sp, #8
   b4da8:	cb03      	ldmia	r3!, {r0, r1}
   b4daa:	f8c2 0005 	str.w	r0, [r2, #5]
   b4dae:	f8c2 1009 	str.w	r1, [r2, #9]
   b4db2:	f89c 3000 	ldrb.w	r3, [ip]
   b4db6:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b4db8:	230e      	movs	r3, #14
   b4dba:	e77a      	b.n	b4cb2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b4dbc:	2002      	movs	r0, #2
   b4dbe:	e786      	b.n	b4cce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b4dc0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4dc4:	e78d      	b.n	b4ce2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4dc6:	a902      	add	r1, sp, #8
   b4dc8:	4620      	mov	r0, r4
   b4dca:	f7ff fe4b 	bl	b4a64 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b4dce:	2804      	cmp	r0, #4
   b4dd0:	d1cf      	bne.n	b4d72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b4dd2:	69e3      	ldr	r3, [r4, #28]
   b4dd4:	78de      	ldrb	r6, [r3, #3]
   b4dd6:	2e00      	cmp	r6, #0
   b4dd8:	d1cb      	bne.n	b4d72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b4dda:	f000 ffbf 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b4dde:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b4de0:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b4de2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4de6:	a801      	add	r0, sp, #4
   b4de8:	f7ff fdd1 	bl	b498e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4dec:	4628      	mov	r0, r5
   b4dee:	b008      	add	sp, #32
   b4df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b4df4:	2500      	movs	r5, #0
   b4df6:	e7f9      	b.n	b4dec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4df8:	000bb2f1 	.word	0x000bb2f1

000b4dfc <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4dfc:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4dfe:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4e02:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4e04:	2401      	movs	r4, #1
   b4e06:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b4e0a:	2400      	movs	r4, #0
   b4e0c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b4e10:	e9cd 4400 	strd	r4, r4, [sp]
   b4e14:	f7ff ff10 	bl	b4c38 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b4e18:	b006      	add	sp, #24
   b4e1a:	bd10      	pop	{r4, pc}

000b4e1c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e20:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b4e24:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b4e28:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4e2c:	4604      	mov	r4, r0
   b4e2e:	468b      	mov	fp, r1
   b4e30:	4616      	mov	r6, r2
   b4e32:	461f      	mov	r7, r3
    if (isConnected()) {
   b4e34:	f7ff fedd 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b4e38:	4682      	mov	sl, r0
   b4e3a:	2800      	cmp	r0, #0
   b4e3c:	d051      	beq.n	b4ee2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4e3e:	4621      	mov	r1, r4
   b4e40:	a801      	add	r0, sp, #4
   b4e42:	f7ff fd99 	bl	b4978 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b4e46:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b4e4a:	69e0      	ldr	r0, [r4, #28]
   b4e4c:	2100      	movs	r1, #0
   b4e4e:	f004 f886 	bl	b8f5e <memset>
        length = writeString(topic, buffer, length);
   b4e52:	2305      	movs	r3, #5
   b4e54:	69e2      	ldr	r2, [r4, #28]
   b4e56:	4659      	mov	r1, fp
   b4e58:	4620      	mov	r0, r4
   b4e5a:	f7ff feae 	bl	b4bba <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4e5e:	1e6b      	subs	r3, r5, #1
   b4e60:	2b01      	cmp	r3, #1
   b4e62:	d815      	bhi.n	b4e90 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4e64:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4e66:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4e68:	3101      	adds	r1, #1
   b4e6a:	b289      	uxth	r1, r1
   b4e6c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4e6e:	0a09      	lsrs	r1, r1, #8
   b4e70:	5419      	strb	r1, [r3, r0]
   b4e72:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4e74:	69e3      	ldr	r3, [r4, #28]
   b4e76:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4e78:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4e7a:	3002      	adds	r0, #2
   b4e7c:	5499      	strb	r1, [r3, r2]
   b4e7e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4e80:	f1b8 0f00 	cmp.w	r8, #0
   b4e84:	d004      	beq.n	b4e90 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b4e86:	8c23      	ldrh	r3, [r4, #32]
   b4e88:	1c5a      	adds	r2, r3, #1
   b4e8a:	8422      	strh	r2, [r4, #32]
   b4e8c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4e90:	2100      	movs	r1, #0
   b4e92:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4e94:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b4e96:	69e2      	ldr	r2, [r4, #28]
   b4e98:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4e9a:	d90a      	bls.n	b4eb2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4e9c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4ea0:	459c      	cmp	ip, r3
   b4ea2:	d906      	bls.n	b4eb2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4ea4:	f816 c001 	ldrb.w	ip, [r6, r1]
   b4ea8:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4eac:	3101      	adds	r1, #1
   b4eae:	b289      	uxth	r1, r1
   b4eb0:	e7ef      	b.n	b4e92 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b4eb2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b4eb6:	2900      	cmp	r1, #0
   b4eb8:	bf0c      	ite	eq
   b4eba:	2130      	moveq	r1, #48	; 0x30
   b4ebc:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b4ebe:	f1b9 0f00 	cmp.w	r9, #0
   b4ec2:	d001      	beq.n	b4ec8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4ec4:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b4ec8:	2d02      	cmp	r5, #2
   b4eca:	d10e      	bne.n	b4eea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b4ecc:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b4ed0:	3b05      	subs	r3, #5
   b4ed2:	b29b      	uxth	r3, r3
   b4ed4:	4620      	mov	r0, r4
   b4ed6:	f7ff fe17 	bl	b4b08 <_ZN4MQTT5writeEhPht>
   b4eda:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4edc:	a801      	add	r0, sp, #4
   b4ede:	f7ff fd56 	bl	b498e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4ee2:	4650      	mov	r0, sl
   b4ee4:	b003      	add	sp, #12
   b4ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b4eea:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b4eec:	bf08      	it	eq
   b4eee:	f041 0102 	orreq.w	r1, r1, #2
   b4ef2:	e7ed      	b.n	b4ed0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b4ef4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b4ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b4ef6:	9c08      	ldr	r4, [sp, #32]
   b4ef8:	9403      	str	r4, [sp, #12]
   b4efa:	2400      	movs	r4, #0
   b4efc:	9402      	str	r4, [sp, #8]
   b4efe:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b4f02:	9401      	str	r4, [sp, #4]
   b4f04:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b4f08:	9400      	str	r4, [sp, #0]
   b4f0a:	f7ff ff87 	bl	b4e1c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b4f0e:	b004      	add	sp, #16
   b4f10:	bd10      	pop	{r4, pc}

000b4f12 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b4f12:	b530      	push	{r4, r5, lr}
   b4f14:	b087      	sub	sp, #28
   b4f16:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4f18:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b4f1a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4f1c:	9204      	str	r2, [sp, #16]
   b4f1e:	f004 f894 	bl	b904a <strlen>
   b4f22:	2500      	movs	r5, #0
   b4f24:	4603      	mov	r3, r0
   b4f26:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4f2a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4f2e:	9500      	str	r5, [sp, #0]
   b4f30:	4620      	mov	r0, r4
   b4f32:	f7ff ffdf 	bl	b4ef4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b4f36:	b007      	add	sp, #28
   b4f38:	bd30      	pop	{r4, r5, pc}

000b4f3a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b4f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4f3c:	4604      	mov	r4, r0
   b4f3e:	460e      	mov	r6, r1
    if (isConnected()) {
   b4f40:	f7ff fe57 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b4f44:	4605      	mov	r5, r0
   b4f46:	b1c8      	cbz	r0, b4f7c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4f48:	4621      	mov	r1, r4
   b4f4a:	a801      	add	r0, sp, #4
   b4f4c:	f7ff fd14 	bl	b4978 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4f50:	69e3      	ldr	r3, [r4, #28]
   b4f52:	2262      	movs	r2, #98	; 0x62
   b4f54:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4f56:	69e3      	ldr	r3, [r4, #28]
   b4f58:	2202      	movs	r2, #2
   b4f5a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4f5c:	69e3      	ldr	r3, [r4, #28]
   b4f5e:	0a32      	lsrs	r2, r6, #8
   b4f60:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4f62:	69e3      	ldr	r3, [r4, #28]
   b4f64:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4f66:	69e1      	ldr	r1, [r4, #28]
   b4f68:	2204      	movs	r2, #4
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	f002 fd89 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b4f70:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4f72:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4f74:	bf18      	it	ne
   b4f76:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4f78:	f7ff fd09 	bl	b498e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4f7c:	4628      	mov	r0, r5
   b4f7e:	b002      	add	sp, #8
   b4f80:	bd70      	pop	{r4, r5, r6, pc}

000b4f82 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b4f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4f84:	4604      	mov	r4, r0
   b4f86:	460e      	mov	r6, r1
    if (isConnected()) {
   b4f88:	f7ff fe33 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b4f8c:	4605      	mov	r5, r0
   b4f8e:	b1c8      	cbz	r0, b4fc4 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4f90:	4621      	mov	r1, r4
   b4f92:	a801      	add	r0, sp, #4
   b4f94:	f7ff fcf0 	bl	b4978 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4f98:	69e3      	ldr	r3, [r4, #28]
   b4f9a:	2272      	movs	r2, #114	; 0x72
   b4f9c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4f9e:	69e3      	ldr	r3, [r4, #28]
   b4fa0:	2202      	movs	r2, #2
   b4fa2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4fa4:	69e3      	ldr	r3, [r4, #28]
   b4fa6:	0a32      	lsrs	r2, r6, #8
   b4fa8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4faa:	69e3      	ldr	r3, [r4, #28]
   b4fac:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4fae:	69e1      	ldr	r1, [r4, #28]
   b4fb0:	2204      	movs	r2, #4
   b4fb2:	4620      	mov	r0, r4
   b4fb4:	f002 fd65 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b4fb8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4fba:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4fbc:	bf18      	it	ne
   b4fbe:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4fc0:	f7ff fce5 	bl	b498e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4fc4:	4628      	mov	r0, r5
   b4fc6:	b002      	add	sp, #8
   b4fc8:	bd70      	pop	{r4, r5, r6, pc}

000b4fca <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b4fca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fce:	ed2d 8b02 	vpush	{d8}
   b4fd2:	b087      	sub	sp, #28
   b4fd4:	af00      	add	r7, sp, #0
   b4fd6:	4604      	mov	r4, r0
    if (isConnected()) {
   b4fd8:	f7ff fe0b 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b4fdc:	4681      	mov	r9, r0
   b4fde:	b1f8      	cbz	r0, b5020 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b4fe0:	4621      	mov	r1, r4
   b4fe2:	f107 0014 	add.w	r0, r7, #20
   b4fe6:	f7ff fcc7 	bl	b4978 <_ZN4MQTT11MutexLockerC1EPS_>
   b4fea:	f000 feb7 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b4fee:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4ff4:	4353      	muls	r3, r2
   b4ff6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4ff8:	1a82      	subs	r2, r0, r2
   b4ffa:	429a      	cmp	r2, r3
   b4ffc:	4606      	mov	r6, r0
   b4ffe:	d803      	bhi.n	b5008 <_ZN4MQTT4loopEv+0x3e>
   b5000:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5002:	1a82      	subs	r2, r0, r2
   b5004:	4293      	cmp	r3, r2
   b5006:	d221      	bcs.n	b504c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5008:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b500c:	b17b      	cbz	r3, b502e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b500e:	4620      	mov	r0, r4
   b5010:	f002 ff98 	bl	b7f44 <_ZN9TCPClient4stopEv>
                return false;
   b5014:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5018:	f107 0014 	add.w	r0, r7, #20
   b501c:	f7ff fcb7 	bl	b498e <_ZN4MQTT11MutexLockerD1Ev>
}
   b5020:	4648      	mov	r0, r9
   b5022:	371c      	adds	r7, #28
   b5024:	46bd      	mov	sp, r7
   b5026:	ecbd 8b02 	vpop	{d8}
   b502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b502e:	69e2      	ldr	r2, [r4, #28]
   b5030:	21c0      	movs	r1, #192	; 0xc0
   b5032:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5034:	69e2      	ldr	r2, [r4, #28]
   b5036:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5038:	69e1      	ldr	r1, [r4, #28]
   b503a:	2202      	movs	r2, #2
   b503c:	4620      	mov	r0, r4
   b503e:	f002 fd20 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5042:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5046:	2301      	movs	r3, #1
   b5048:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b504c:	4620      	mov	r0, r4
   b504e:	f002 ff1f 	bl	b7e90 <_ZN9TCPClient9availableEv>
   b5052:	2800      	cmp	r0, #0
   b5054:	d0e0      	beq.n	b5018 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5056:	f107 0113 	add.w	r1, r7, #19
   b505a:	4620      	mov	r0, r4
   b505c:	f7ff fd02 	bl	b4a64 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5060:	4683      	mov	fp, r0
   b5062:	2800      	cmp	r0, #0
   b5064:	d0d8      	beq.n	b5018 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5066:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5068:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b506a:	7819      	ldrb	r1, [r3, #0]
   b506c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5070:	2a30      	cmp	r2, #48	; 0x30
   b5072:	d17f      	bne.n	b5174 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5074:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5078:	f1ba 0f00 	cmp.w	sl, #0
   b507c:	d0cc      	beq.n	b5018 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b507e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5082:	466a      	mov	r2, sp
   b5084:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5088:	eb03 020c 	add.w	r2, r3, ip
   b508c:	7851      	ldrb	r1, [r2, #1]
   b508e:	7895      	ldrb	r5, [r2, #2]
   b5090:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5094:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5096:	f105 0208 	add.w	r2, r5, #8
   b509a:	4669      	mov	r1, sp
   b509c:	08d2      	lsrs	r2, r2, #3
   b509e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b50a2:	4695      	mov	sp, r2
   b50a4:	f10c 0203 	add.w	r2, ip, #3
   b50a8:	60fa      	str	r2, [r7, #12]
   b50aa:	eb03 0e02 	add.w	lr, r3, r2
   b50ae:	eb0d 0205 	add.w	r2, sp, r5
   b50b2:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b50b4:	f8c7 d008 	str.w	sp, [r7, #8]
   b50b8:	607a      	str	r2, [r7, #4]
   b50ba:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b50be:	428a      	cmp	r2, r1
   b50c0:	d006      	beq.n	b50d0 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b50c2:	460a      	mov	r2, r1
   b50c4:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b50c8:	f802 8b01 	strb.w	r8, [r2], #1
   b50cc:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b50ce:	e7f4      	b.n	b50ba <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b50d0:	2200      	movs	r2, #0
   b50d2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b50d4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b50d8:	68f9      	ldr	r1, [r7, #12]
   b50da:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b50de:	ebab 020c 	sub.w	r2, fp, ip
   b50e2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b50e4:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b50e8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b50ec:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b50ee:	d125      	bne.n	b513c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b50f0:	f813 e001 	ldrb.w	lr, [r3, r1]
   b50f4:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b50f6:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b50f8:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b50fc:	f10c 0105 	add.w	r1, ip, #5
   b5100:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5102:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5104:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5108:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b510a:	69e3      	ldr	r3, [r4, #28]
   b510c:	2240      	movs	r2, #64	; 0x40
   b510e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5110:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5112:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5116:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b511a:	69e3      	ldr	r3, [r4, #28]
   b511c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5120:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5122:	69e3      	ldr	r3, [r4, #28]
   b5124:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5128:	69e1      	ldr	r1, [r4, #28]
   b512a:	2204      	movs	r2, #4
   b512c:	4620      	mov	r0, r4
   b512e:	f002 fca8 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5132:	6266      	str	r6, [r4, #36]	; 0x24
   b5134:	ee18 3a10 	vmov	r3, s16
   b5138:	469d      	mov	sp, r3
   b513a:	e76d      	b.n	b5018 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b513c:	f1b8 0f04 	cmp.w	r8, #4
   b5140:	d115      	bne.n	b516e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5142:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5146:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5148:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b514a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b514e:	f10c 0105 	add.w	r1, ip, #5
   b5152:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5154:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5156:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b515a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b515c:	69e3      	ldr	r3, [r4, #28]
   b515e:	2250      	movs	r2, #80	; 0x50
   b5160:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5162:	69e3      	ldr	r3, [r4, #28]
   b5164:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5166:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b516a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b516c:	e7d5      	b.n	b511a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b516e:	4419      	add	r1, r3
   b5170:	47d0      	blx	sl
   b5172:	e7df      	b.n	b5134 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5174:	2a50      	cmp	r2, #80	; 0x50
   b5176:	d108      	bne.n	b518a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5178:	789a      	ldrb	r2, [r3, #2]
   b517a:	78d9      	ldrb	r1, [r3, #3]
   b517c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5180:	b289      	uxth	r1, r1
   b5182:	4620      	mov	r0, r4
   b5184:	f7ff fed9 	bl	b4f3a <_ZN4MQTT14publishReleaseEt>
   b5188:	e746      	b.n	b5018 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b518a:	2a40      	cmp	r2, #64	; 0x40
   b518c:	d112      	bne.n	b51b4 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b518e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5190:	2a00      	cmp	r2, #0
   b5192:	f43f af41 	beq.w	b5018 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5196:	f1bb 0f04 	cmp.w	fp, #4
   b519a:	f47f af3d 	bne.w	b5018 <_ZN4MQTT4loopEv+0x4e>
   b519e:	f011 0f06 	tst.w	r1, #6
   b51a2:	f47f af39 	bne.w	b5018 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b51a6:	7899      	ldrb	r1, [r3, #2]
   b51a8:	78d8      	ldrb	r0, [r3, #3]
   b51aa:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b51ae:	b280      	uxth	r0, r0
   b51b0:	4790      	blx	r2
   b51b2:	e731      	b.n	b5018 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b51b4:	2a60      	cmp	r2, #96	; 0x60
   b51b6:	d108      	bne.n	b51ca <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b51b8:	789a      	ldrb	r2, [r3, #2]
   b51ba:	78d9      	ldrb	r1, [r3, #3]
   b51bc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b51c0:	b289      	uxth	r1, r1
   b51c2:	4620      	mov	r0, r4
   b51c4:	f7ff fedd 	bl	b4f82 <_ZN4MQTT15publishCompleteEt>
   b51c8:	e726      	b.n	b5018 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b51ca:	2a70      	cmp	r2, #112	; 0x70
   b51cc:	d0df      	beq.n	b518e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b51ce:	2a90      	cmp	r2, #144	; 0x90
   b51d0:	f43f af22 	beq.w	b5018 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b51d4:	2ac0      	cmp	r2, #192	; 0xc0
   b51d6:	d10a      	bne.n	b51ee <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b51d8:	22d0      	movs	r2, #208	; 0xd0
   b51da:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b51dc:	69e3      	ldr	r3, [r4, #28]
   b51de:	2200      	movs	r2, #0
   b51e0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b51e2:	69e1      	ldr	r1, [r4, #28]
   b51e4:	2202      	movs	r2, #2
   b51e6:	4620      	mov	r0, r4
   b51e8:	f002 fc4b 	bl	b7a82 <_ZN9TCPClient5writeEPKhj>
   b51ec:	e714      	b.n	b5018 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b51ee:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b51f0:	bf04      	itt	eq
   b51f2:	2300      	moveq	r3, #0
   b51f4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b51f8:	e70e      	b.n	b5018 <_ZN4MQTT4loopEv+0x4e>

000b51fa <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b51fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b51fc:	4604      	mov	r4, r0
   b51fe:	460f      	mov	r7, r1
   b5200:	4616      	mov	r6, r2
    if (isConnected()) {
   b5202:	f7ff fcf6 	bl	b4bf2 <_ZN4MQTT11isConnectedEv>
   b5206:	4605      	mov	r5, r0
   b5208:	b310      	cbz	r0, b5250 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b520a:	4621      	mov	r1, r4
   b520c:	a801      	add	r0, sp, #4
   b520e:	f7ff fbb3 	bl	b4978 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5212:	8c23      	ldrh	r3, [r4, #32]
   b5214:	3301      	adds	r3, #1
   b5216:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5218:	b1eb      	cbz	r3, b5256 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b521a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b521c:	8c23      	ldrh	r3, [r4, #32]
   b521e:	69e2      	ldr	r2, [r4, #28]
   b5220:	0a1b      	lsrs	r3, r3, #8
   b5222:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5224:	69e3      	ldr	r3, [r4, #28]
   b5226:	8c22      	ldrh	r2, [r4, #32]
   b5228:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b522a:	69e2      	ldr	r2, [r4, #28]
   b522c:	2307      	movs	r3, #7
   b522e:	4639      	mov	r1, r7
   b5230:	4620      	mov	r0, r4
   b5232:	f7ff fcc2 	bl	b4bba <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5236:	69e3      	ldr	r3, [r4, #28]
   b5238:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b523a:	3804      	subs	r0, #4
   b523c:	b283      	uxth	r3, r0
   b523e:	69e2      	ldr	r2, [r4, #28]
   b5240:	2182      	movs	r1, #130	; 0x82
   b5242:	4620      	mov	r0, r4
   b5244:	f7ff fc60 	bl	b4b08 <_ZN4MQTT5writeEhPht>
   b5248:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b524a:	a801      	add	r0, sp, #4
   b524c:	f7ff fb9f 	bl	b498e <_ZN4MQTT11MutexLockerD1Ev>
}
   b5250:	4628      	mov	r0, r5
   b5252:	b003      	add	sp, #12
   b5254:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5256:	2301      	movs	r3, #1
   b5258:	e7df      	b.n	b521a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b525a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b525a:	2200      	movs	r2, #0
   b525c:	f7ff bfcd 	b.w	b51fa <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5260 <_ZN12mDNSResolver5QueryC1EPKc>:
#include "Query.h"

namespace mDNSResolver {
  Query::Query(const char* name) {
    this->name = name;
   b5260:	6001      	str	r1, [r0, #0]
  }
   b5262:	4770      	bx	lr

000b5264 <_ZN12mDNSResolver5QueryD1Ev>:

  Query::~Query() {}
   b5264:	4770      	bx	lr

000b5266 <_ZN12mDNSResolver5Query12buildDNSNameEPhj>:
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
    buffer[bufferIndex++] = qclass & 0xFF;
  }

  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
    int wordstart = 0, wordend = 0;
   b5266:	2300      	movs	r3, #0
  int Query::buildDNSName(unsigned char *buffer, unsigned int bufferIndex) {
   b5268:	b5f0      	push	{r4, r5, r6, r7, lr}
    int wordstart = 0, wordend = 0;
   b526a:	461c      	mov	r4, r3

    do {
      if(this->name[wordend] == '.' || this->name[wordend] == '\0') {
   b526c:	6805      	ldr	r5, [r0, #0]
   b526e:	5ced      	ldrb	r5, [r5, r3]
   b5270:	2d2e      	cmp	r5, #46	; 0x2e
   b5272:	d000      	beq.n	b5276 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x10>
   b5274:	b9bd      	cbnz	r5, b52a6 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x40>
        const int wordlen = wordend - wordstart;
   b5276:	1b1d      	subs	r5, r3, r4
        buffer[bufferIndex++] = (unsigned char)wordlen;
   b5278:	548d      	strb	r5, [r1, r2]
   b527a:	f102 0c01 	add.w	ip, r2, #1

        for(int i = wordstart; i < wordend; i++) {
   b527e:	4626      	mov	r6, r4
   b5280:	440a      	add	r2, r1
   b5282:	42b3      	cmp	r3, r6
          buffer[bufferIndex++] = this->name[i];
   b5284:	6807      	ldr	r7, [r0, #0]
        for(int i = wordstart; i < wordend; i++) {
   b5286:	dd04      	ble.n	b5292 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x2c>
          buffer[bufferIndex++] = this->name[i];
   b5288:	5dbf      	ldrb	r7, [r7, r6]
   b528a:	f802 7f01 	strb.w	r7, [r2, #1]!
        for(int i = wordstart; i < wordend; i++) {
   b528e:	3601      	adds	r6, #1
   b5290:	e7f7      	b.n	b5282 <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x1c>
   b5292:	429c      	cmp	r4, r3
   b5294:	bfc8      	it	gt
   b5296:	2500      	movgt	r5, #0
        }

        if(this->name[wordend] == '.') {
   b5298:	5cfc      	ldrb	r4, [r7, r3]
   b529a:	2c2e      	cmp	r4, #46	; 0x2e
          wordend++;
   b529c:	bf08      	it	eq
   b529e:	3301      	addeq	r3, #1
   b52a0:	eb05 020c 	add.w	r2, r5, ip
        if(this->name[wordend] == '.') {
   b52a4:	461c      	mov	r4, r3
        }
        wordstart = wordend;
      }

      wordend++;
    } while(this->name[wordstart] != '\0');
   b52a6:	6805      	ldr	r5, [r0, #0]
   b52a8:	5d2d      	ldrb	r5, [r5, r4]
      wordend++;
   b52aa:	3301      	adds	r3, #1
    } while(this->name[wordstart] != '\0');
   b52ac:	2d00      	cmp	r5, #0
   b52ae:	d1dd      	bne.n	b526c <_ZN12mDNSResolver5Query12buildDNSNameEPhj+0x6>

    return bufferIndex;
  }
   b52b0:	4610      	mov	r0, r2
   b52b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b52b4 <_ZN12mDNSResolver5Query14assemblePacketEPhi>:
  void Query::assemblePacket(unsigned char *buffer, int bufferLength) {
   b52b4:	b538      	push	{r3, r4, r5, lr}
   b52b6:	460b      	mov	r3, r1
   b52b8:	4605      	mov	r5, r0
      buffer[i] = 0;
   b52ba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   b52be:	4618      	mov	r0, r3
   b52c0:	2100      	movs	r1, #0
   b52c2:	f003 fe4c 	bl	b8f5e <memset>
    buffer[5] = 0x01;
   b52c6:	2401      	movs	r4, #1
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b52c8:	4601      	mov	r1, r0
    buffer[5] = 0x01;
   b52ca:	7144      	strb	r4, [r0, #5]
    bufferIndex = buildDNSName(buffer, bufferIndex);
   b52cc:	220c      	movs	r2, #12
   b52ce:	4628      	mov	r0, r5
   b52d0:	f7ff ffc9 	bl	b5266 <_ZN12mDNSResolver5Query12buildDNSNameEPhj>
    buffer[bufferIndex++] = '\0';
   b52d4:	2300      	movs	r3, #0
   b52d6:	540b      	strb	r3, [r1, r0]
    buffer[bufferIndex++] = (qtype & 0xFF00) >> 8;
   b52d8:	4401      	add	r1, r0
   b52da:	704b      	strb	r3, [r1, #1]
    buffer[bufferIndex++] = qtype & 0xFF;
   b52dc:	708c      	strb	r4, [r1, #2]
    buffer[bufferIndex++] = (qclass & 0xFF00) >> 8;
   b52de:	70cb      	strb	r3, [r1, #3]
    buffer[bufferIndex++] = qclass & 0xFF;
   b52e0:	710c      	strb	r4, [r1, #4]
  }
   b52e2:	bd38      	pop	{r3, r4, r5, pc}

000b52e4 <_ZN12mDNSResolver5Query10sendPacketER3UDP>:
  void Query::sendPacket(UDP& socket) {
   b52e4:	b5b0      	push	{r4, r5, r7, lr}
   b52e6:	b082      	sub	sp, #8
   b52e8:	4605      	mov	r5, r0
   b52ea:	af00      	add	r7, sp, #0
    int bufferLength = strlen(this->name) + 18;
   b52ec:	6800      	ldr	r0, [r0, #0]
  void Query::sendPacket(UDP& socket) {
   b52ee:	460c      	mov	r4, r1
    int bufferLength = strlen(this->name) + 18;
   b52f0:	f003 feab 	bl	b904a <strlen>
    unsigned char buffer[bufferLength];
   b52f4:	f100 0319 	add.w	r3, r0, #25
   b52f8:	f023 0307 	bic.w	r3, r3, #7
   b52fc:	ebad 0d03 	sub.w	sp, sp, r3
    int bufferLength = strlen(this->name) + 18;
   b5300:	f100 0212 	add.w	r2, r0, #18
    assemblePacket(buffer, bufferLength);
   b5304:	4669      	mov	r1, sp
   b5306:	4628      	mov	r0, r5
   b5308:	607a      	str	r2, [r7, #4]
   b530a:	f7ff ffd3 	bl	b52b4 <_ZN12mDNSResolver5Query14assemblePacketEPhi>
    socket.write(buffer, bufferLength);
   b530e:	6823      	ldr	r3, [r4, #0]
   b5310:	687a      	ldr	r2, [r7, #4]
   b5312:	68db      	ldr	r3, [r3, #12]
   b5314:	4669      	mov	r1, sp
   b5316:	4620      	mov	r0, r4
   b5318:	4798      	blx	r3
	socket.endPacket();
   b531a:	6823      	ldr	r3, [r4, #0]
   b531c:	4620      	mov	r0, r4
   b531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5320:	4798      	blx	r3
  }
   b5322:	3708      	adds	r7, #8
   b5324:	46bd      	mov	sp, r7
   b5326:	bdb0      	pop	{r4, r5, r7, pc}

000b5328 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>:
    resolveCnames(cache);

    return answerResult;
  }

  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b5328:	b5f0      	push	{r4, r5, r6, r7, lr}
   b532a:	b089      	sub	sp, #36	; 0x24
   b532c:	461c      	mov	r4, r3
   b532e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if(dataLen == 4) {
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5330:	6816      	ldr	r6, [r2, #0]
    if(dataLen == 4) {
   b5332:	2b04      	cmp	r3, #4
  MDNS_RESULT Answer::resolveAName(unsigned char *buffer, unsigned int len, unsigned int *offset, Response& response, long ttl, int dataLen) {
   b5334:	4615      	mov	r5, r2
    if(dataLen == 4) {
   b5336:	d11f      	bne.n	b5378 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x50>
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b5338:	1c72      	adds	r2, r6, #1
   b533a:	602a      	str	r2, [r5, #0]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b533c:	1cb3      	adds	r3, r6, #2
      unsigned int a = (unsigned int)*(buffer + (*offset)++);
   b533e:	5d81      	ldrb	r1, [r0, r6]
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5340:	602b      	str	r3, [r5, #0]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5342:	1cf7      	adds	r7, r6, #3
      unsigned int b = (unsigned int)*(buffer + (*offset)++);
   b5344:	5c82      	ldrb	r2, [r0, r2]
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b5346:	602f      	str	r7, [r5, #0]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5348:	3604      	adds	r6, #4
      unsigned int c = (unsigned int)*(buffer + (*offset)++);
   b534a:	5cc3      	ldrb	r3, [r0, r3]
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b534c:	602e      	str	r6, [r5, #0]

      response.resolved = true;
   b534e:	2501      	movs	r5, #1
      unsigned int d = (unsigned int)*(buffer + (*offset)++);
   b5350:	5dc0      	ldrb	r0, [r0, r7]
      response.resolved = true;
   b5352:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
      response.ttl = ttl;
   b5356:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   b5358:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
      response.ipAddress = IPAddress(a, b, c, d);
   b535c:	9000      	str	r0, [sp, #0]
class IPAddress : public Printable {
   b535e:	ad03      	add	r5, sp, #12
   b5360:	a802      	add	r0, sp, #8
   b5362:	f002 fa15 	bl	b7790 <_ZN9IPAddressC1Ehhhh>
   b5366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5368:	f504 7486 	add.w	r4, r4, #268	; 0x10c
   b536c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b536e:	682b      	ldr	r3, [r5, #0]
   b5370:	7023      	strb	r3, [r4, #0]
    } else {
      (*offset) += dataLen;
    }

    return E_MDNS_OK;
  }
   b5372:	2020      	movs	r0, #32
   b5374:	b009      	add	sp, #36	; 0x24
   b5376:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*offset) += dataLen;
   b5378:	4433      	add	r3, r6
   b537a:	6013      	str	r3, [r2, #0]
   b537c:	e7f9      	b.n	b5372 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli+0x4a>

000b537e <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>:

    free(assembled);
    return E_MDNS_OK;
  }

  MDNS_RESULT Answer::parseName(char** name, const char* mapped, unsigned int len) {
   b537e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned int namePointer = 0;
    unsigned int mapPointer = 0;
   b5382:	2500      	movs	r5, #0
    unsigned int namePointer = 0;
   b5384:	462b      	mov	r3, r5

      if(labelLength > 0x3f) {
        return E_MDNS_INVALID_LABEL_LENGTH;
      }

      if(namePointer + labelLength > len - 1) {
   b5386:	f102 3eff 	add.w	lr, r2, #4294967295
        return E_MDNS_PACKET_ERROR;
      }

      if(namePointer != 0) {
        (*name)[namePointer++] = '.';
   b538a:	f04f 082e 	mov.w	r8, #46	; 0x2e
    while(mapPointer < len) {
   b538e:	4295      	cmp	r5, r2
   b5390:	d21d      	bcs.n	b53ce <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x50>
      int labelLength = mapped[mapPointer++];
   b5392:	5d4c      	ldrb	r4, [r1, r5]
      if(labelLength > 0x3f) {
   b5394:	2c3f      	cmp	r4, #63	; 0x3f
      int labelLength = mapped[mapPointer++];
   b5396:	eb01 0705 	add.w	r7, r1, r5
      if(labelLength > 0x3f) {
   b539a:	dc20      	bgt.n	b53de <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x60>
      if(namePointer + labelLength > len - 1) {
   b539c:	18e6      	adds	r6, r4, r3
   b539e:	4576      	cmp	r6, lr
   b53a0:	d81f      	bhi.n	b53e2 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x64>
      if(namePointer != 0) {
   b53a2:	b11b      	cbz	r3, b53ac <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x2e>
        (*name)[namePointer++] = '.';
   b53a4:	6806      	ldr	r6, [r0, #0]
   b53a6:	f806 8003 	strb.w	r8, [r6, r3]
   b53aa:	3301      	adds	r3, #1
   b53ac:	46ba      	mov	sl, r7
   b53ae:	2600      	movs	r6, #0
      }

      for(int i = 0; i < labelLength; i++) {
   b53b0:	42a6      	cmp	r6, r4
   b53b2:	eb06 0c03 	add.w	ip, r6, r3
   b53b6:	db03      	blt.n	b53c0 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x42>
   b53b8:	4423      	add	r3, r4
   b53ba:	3401      	adds	r4, #1
   b53bc:	4425      	add	r5, r4
   b53be:	e7e6      	b.n	b538e <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x10>
        (*name)[namePointer++] = mapped[mapPointer++];
   b53c0:	6807      	ldr	r7, [r0, #0]
   b53c2:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
   b53c6:	f807 900c 	strb.w	r9, [r7, ip]
      for(int i = 0; i < labelLength; i++) {
   b53ca:	3601      	adds	r6, #1
   b53cc:	e7f0      	b.n	b53b0 <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x32>
      }
    }

    (*name)[len - 1] = '\0';
   b53ce:	6803      	ldr	r3, [r0, #0]
   b53d0:	441a      	add	r2, r3
   b53d2:	2300      	movs	r3, #0
   b53d4:	f802 3c01 	strb.w	r3, [r2, #-1]

    return E_MDNS_OK;
   b53d8:	2020      	movs	r0, #32
  }
   b53da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return E_MDNS_INVALID_LABEL_LENGTH;
   b53de:	2026      	movs	r0, #38	; 0x26
   b53e0:	e7fb      	b.n	b53da <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>
        return E_MDNS_PACKET_ERROR;
   b53e2:	2023      	movs	r0, #35	; 0x23
   b53e4:	e7f9      	b.n	b53da <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj+0x5c>

000b53e6 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name, unsigned int maxlen) {
   b53e6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b53ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    unsigned int index = 0;
   b53ec:	2500      	movs	r5, #0
    unsigned int nameLength = 0;

    while(index < maxlen) {
   b53ee:	42a5      	cmp	r5, r4
   b53f0:	d025      	beq.n	b543e <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b53f2:	6816      	ldr	r6, [r2, #0]
   b53f4:	f810 8006 	ldrb.w	r8, [r0, r6]
   b53f8:	f008 0cc0 	and.w	ip, r8, #192	; 0xc0
   b53fc:	f1bc 0fc0 	cmp.w	ip, #192	; 0xc0
   b5400:	eb00 0e06 	add.w	lr, r0, r6
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5404:	f106 0701 	add.w	r7, r6, #1
      if((buffer[*offset] & 0xc0) == 0xc0) {
   b5408:	d120      	bne.n	b544c <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x66>
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b540a:	6017      	str	r7, [r2, #0]
   b540c:	f89e 4000 	ldrb.w	r4, [lr]
   b5410:	3602      	adds	r6, #2
   b5412:	6016      	str	r6, [r2, #0]
   b5414:	5dc2      	ldrb	r2, [r0, r7]
   b5416:	0224      	lsls	r4, r4, #8
   b5418:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
   b541c:	4414      	add	r4, r2
        if(pointerOffset > len) {
   b541e:	428c      	cmp	r4, r1
        unsigned int pointerOffset = ((buffer[(*offset)++] & 0x3f) << 8) + buffer[(*offset)++];
   b5420:	9402      	str	r4, [sp, #8]
        if(pointerOffset > len) {
   b5422:	d80e      	bhi.n	b5442 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x5c>
          // Points to somewhere beyond the packet
          return -1 * E_MDNS_POINTER_OVERFLOW;
        }

        char *namePointer = *name + nameLength;
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	442b      	add	r3, r5
   b5428:	9303      	str	r3, [sp, #12]
        int pointerLen = assembleName(buffer, len, &pointerOffset, &namePointer, MDNS_MAX_NAME_LEN - nameLength);
   b542a:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
   b542e:	9300      	str	r3, [sp, #0]
   b5430:	aa02      	add	r2, sp, #8
   b5432:	ab03      	add	r3, sp, #12
   b5434:	f7ff ffd7 	bl	b53e6 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>

        if(pointerLen < 0) {
   b5438:	2800      	cmp	r0, #0
   b543a:	db04      	blt.n	b5446 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return pointerLen;
        }

        nameLength += pointerLen;
   b543c:	1944      	adds	r4, r0, r5
        (*name)[nameLength++] = buffer[(*offset)++];
      }
      index++;
    }

    return nameLength;
   b543e:	4620      	mov	r0, r4
   b5440:	e001      	b.n	b5446 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x60>
          return -1 * E_MDNS_POINTER_OVERFLOW;
   b5442:	f06f 0021 	mvn.w	r0, #33	; 0x21
  }
   b5446:	b004      	add	sp, #16
   b5448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (*name)[nameLength++] = buffer[(*offset)++];
   b544c:	f105 0c01 	add.w	ip, r5, #1
   b5450:	6017      	str	r7, [r2, #0]
      } else if(buffer[*offset] == '\0') {
   b5452:	f1b8 0f00 	cmp.w	r8, #0
   b5456:	d105      	bne.n	b5464 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x7e>
        (*name)[nameLength++] = buffer[(*offset)++];
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	f89e 2000 	ldrb.w	r2, [lr]
   b545e:	555a      	strb	r2, [r3, r5]
   b5460:	4664      	mov	r4, ip
        break;
   b5462:	e7ec      	b.n	b543e <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x58>
        (*name)[nameLength++] = buffer[(*offset)++];
   b5464:	5d87      	ldrb	r7, [r0, r6]
   b5466:	681e      	ldr	r6, [r3, #0]
   b5468:	5577      	strb	r7, [r6, r5]
        (*name)[nameLength++] = buffer[(*offset)++];
   b546a:	4665      	mov	r5, ip
    while(index < maxlen) {
   b546c:	e7bf      	b.n	b53ee <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj+0x8>

000b546e <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>:

  int Answer::assembleName(unsigned char *buffer, unsigned int len, unsigned int *offset, char **name) {
   b546e:	b513      	push	{r0, r1, r4, lr}
    return assembleName(buffer, len, offset, name, MDNS_MAX_NAME_LEN);
   b5470:	24ff      	movs	r4, #255	; 0xff
   b5472:	9400      	str	r4, [sp, #0]
   b5474:	f7ff ffb7 	bl	b53e6 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
  }
   b5478:	b002      	add	sp, #8
   b547a:	bd10      	pop	{r4, pc}

000b547c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>:
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b547c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5480:	4605      	mov	r5, r0
   b5482:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b5486:	20ff      	movs	r0, #255	; 0xff
  MDNS_RESULT Answer::resolve(unsigned char *buffer, unsigned int len, unsigned int* offset, Cache& cache) {
   b5488:	4688      	mov	r8, r1
   b548a:	4614      	mov	r4, r2
   b548c:	461e      	mov	r6, r3
    char* assembled = (char *)malloc(sizeof(char) * MDNS_MAX_NAME_LEN);
   b548e:	f000 fea1 	bl	b61d4 <malloc>
   b5492:	9004      	str	r0, [sp, #16]
    if(assembled == NULL) {
   b5494:	b1b8      	cbz	r0, b54c6 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4a>
    int nameLen = Answer::assembleName(buffer, len, offset, &assembled);
   b5496:	ab04      	add	r3, sp, #16
   b5498:	4622      	mov	r2, r4
   b549a:	4641      	mov	r1, r8
   b549c:	4628      	mov	r0, r5
   b549e:	f7ff ffe6 	bl	b546e <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPc>
    if(nameLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b54a2:	f110 0f22 	cmn.w	r0, #34	; 0x22
   b54a6:	d107      	bne.n	b54b8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x3c>
        free(assembled);
   b54a8:	9804      	ldr	r0, [sp, #16]
   b54aa:	f000 fe9b 	bl	b61e4 <free>
        return -1 * dataLen;
   b54ae:	2022      	movs	r0, #34	; 0x22
  }
   b54b0:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   b54b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    char *name = (char *)malloc(sizeof(char) * nameLen);
   b54b8:	f000 fe8c 	bl	b61d4 <malloc>
   b54bc:	9005      	str	r0, [sp, #20]
    if(name == NULL) {
   b54be:	b920      	cbnz	r0, b54ca <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x4e>
      free(assembled);
   b54c0:	9804      	ldr	r0, [sp, #16]
   b54c2:	f000 fe8f 	bl	b61e4 <free>
      return E_MDNS_OUT_OF_MEMORY;
   b54c6:	2027      	movs	r0, #39	; 0x27
   b54c8:	e7f2      	b.n	b54b0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    parseName(&name, assembled, strlen(assembled));
   b54ca:	9904      	ldr	r1, [sp, #16]
   b54cc:	9103      	str	r1, [sp, #12]
   b54ce:	4608      	mov	r0, r1
   b54d0:	f003 fdbb 	bl	b904a <strlen>
   b54d4:	9903      	ldr	r1, [sp, #12]
   b54d6:	4602      	mov	r2, r0
   b54d8:	a805      	add	r0, sp, #20
   b54da:	f7ff ff50 	bl	b537e <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
    int cacheIndex = cache.search(name);
   b54de:	9905      	ldr	r1, [sp, #20]
   b54e0:	4630      	mov	r0, r6
   b54e2:	f000 f987 	bl	b57f4 <_ZN12mDNSResolver5Cache6searchEPKc>
   b54e6:	4607      	mov	r7, r0
    free(name);
   b54e8:	9805      	ldr	r0, [sp, #20]
   b54ea:	f000 fe7b 	bl	b61e4 <free>
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b54ee:	6822      	ldr	r2, [r4, #0]
   b54f0:	1c53      	adds	r3, r2, #1
   b54f2:	6023      	str	r3, [r4, #0]
   b54f4:	1c91      	adds	r1, r2, #2
   b54f6:	5ca8      	ldrb	r0, [r5, r2]
   b54f8:	6021      	str	r1, [r4, #0]
   b54fa:	5ce9      	ldrb	r1, [r5, r3]
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b54fc:	1d53      	adds	r3, r2, #5
    unsigned int type = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b54fe:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    unsigned long ttl = (buffer[(*offset)++] << 24) + (buffer[(*offset)++] << 16) + (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5502:	18a8      	adds	r0, r5, r2
   b5504:	6023      	str	r3, [r4, #0]
   b5506:	f890 c004 	ldrb.w	ip, [r0, #4]
   b550a:	1d90      	adds	r0, r2, #6
   b550c:	6020      	str	r0, [r4, #0]
   b550e:	5ceb      	ldrb	r3, [r5, r3]
   b5510:	041b      	lsls	r3, r3, #16
   b5512:	eb03 630c 	add.w	r3, r3, ip, lsl #24
   b5516:	f102 0c07 	add.w	ip, r2, #7
   b551a:	f8c4 c000 	str.w	ip, [r4]
   b551e:	5c28      	ldrb	r0, [r5, r0]
   b5520:	eb03 2300 	add.w	r3, r3, r0, lsl #8
   b5524:	f102 0008 	add.w	r0, r2, #8
   b5528:	6020      	str	r0, [r4, #0]
   b552a:	f815 900c 	ldrb.w	r9, [r5, ip]
   b552e:	4499      	add	r9, r3
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5530:	f102 0309 	add.w	r3, r2, #9
   b5534:	6023      	str	r3, [r4, #0]
   b5536:	320a      	adds	r2, #10
   b5538:	5c28      	ldrb	r0, [r5, r0]
   b553a:	6022      	str	r2, [r4, #0]
   b553c:	f815 a003 	ldrb.w	sl, [r5, r3]
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b5540:	2901      	cmp	r1, #1
    unsigned int dataLen = (buffer[(*offset)++] << 8) + buffer[(*offset)++];
   b5542:	eb0a 2a00 	add.w	sl, sl, r0, lsl #8
    if(type == MDNS_A_RECORD && cacheIndex != -1) {
   b5546:	d112      	bne.n	b556e <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xf2>
   b5548:	1c78      	adds	r0, r7, #1
   b554a:	d077      	beq.n	b563c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      resolveAName(buffer, len, offset, cache[cacheIndex], ttl, dataLen);
   b554c:	4639      	mov	r1, r7
   b554e:	4630      	mov	r0, r6
   b5550:	f000 f94b 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b5554:	e9cd 9a00 	strd	r9, sl, [sp]
   b5558:	4603      	mov	r3, r0
   b555a:	4622      	mov	r2, r4
   b555c:	4641      	mov	r1, r8
   b555e:	4628      	mov	r0, r5
   b5560:	f7ff fee2 	bl	b5328 <_ZN12mDNSResolver6Answer12resolveANameEPhjPjRNS_8ResponseEli>
    free(assembled);
   b5564:	9804      	ldr	r0, [sp, #16]
   b5566:	f000 fe3d 	bl	b61e4 <free>
    return E_MDNS_OK;
   b556a:	2020      	movs	r0, #32
   b556c:	e7a0      	b.n	b54b0 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x34>
    } else if(type == MDNS_CNAME_RECORD && cacheIndex != -1) {
   b556e:	2905      	cmp	r1, #5
   b5570:	d164      	bne.n	b563c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
   b5572:	1c79      	adds	r1, r7, #1
   b5574:	d062      	beq.n	b563c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c0>
      cache[cacheIndex].resolved = false;
   b5576:	4639      	mov	r1, r7
   b5578:	4630      	mov	r0, r6
   b557a:	f000 f936 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b557e:	2300      	movs	r3, #0
   b5580:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
      cache[cacheIndex].ttl = ttl;
   b5584:	4639      	mov	r1, r7
   b5586:	4630      	mov	r0, r6
   b5588:	f000 f92f 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b558c:	f8c0 9100 	str.w	r9, [r0, #256]	; 0x100
      unsigned int dataOffset = (*offset);
   b5590:	6823      	ldr	r3, [r4, #0]
   b5592:	9306      	str	r3, [sp, #24]
      (*offset) += dataLen;
   b5594:	4453      	add	r3, sl
   b5596:	6023      	str	r3, [r4, #0]
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b5598:	4628      	mov	r0, r5
   b559a:	f8cd a000 	str.w	sl, [sp]
   b559e:	ab04      	add	r3, sp, #16
   b55a0:	aa06      	add	r2, sp, #24
   b55a2:	4641      	mov	r1, r8
   b55a4:	f7ff ff1f 	bl	b53e6 <_ZN12mDNSResolver6Answer12assembleNameEPhjPjPPcj>
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b55a8:	f110 0f22 	cmn.w	r0, #34	; 0x22
      dataLen = Answer::assembleName(buffer, len, &dataOffset, &assembled, dataLen);
   b55ac:	4605      	mov	r5, r0
      if(dataLen == -1 * E_MDNS_POINTER_OVERFLOW) {
   b55ae:	f43f af7b 	beq.w	b54a8 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x2c>
      Response r;
   b55b2:	ac08      	add	r4, sp, #32
   b55b4:	4620      	mov	r0, r4
   b55b6:	f000 f9e1 	bl	b597c <_ZN12mDNSResolver8ResponseC1Ev>
      parseName(&responseName, assembled, dataLen - 1);
   b55ba:	9904      	ldr	r1, [sp, #16]
      char* responseName = &*r.name;
   b55bc:	9407      	str	r4, [sp, #28]
      parseName(&responseName, assembled, dataLen - 1);
   b55be:	1e6a      	subs	r2, r5, #1
   b55c0:	a807      	add	r0, sp, #28
   b55c2:	f7ff fedc 	bl	b537e <_ZN12mDNSResolver6Answer9parseNameEPPcPKcj>
      int cnameIndex = cache.search(r);
   b55c6:	4621      	mov	r1, r4
   b55c8:	4630      	mov	r0, r6
   b55ca:	f000 f92b 	bl	b5824 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      if(cnameIndex == -1) {
   b55ce:	1c43      	adds	r3, r0, #1
   b55d0:	d125      	bne.n	b561e <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1a2>
#include "Constants.h"
#include "Particle.h"
// #include <mDNSResolver/IPAddress.h>

namespace mDNSResolver {
  class Response {
   b55d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   b55d6:	4621      	mov	r1, r4
   b55d8:	a851      	add	r0, sp, #324	; 0x144
   b55da:	f003 fcb2 	bl	b8f42 <memcpy>
   b55de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   b55e2:	9391      	str	r3, [sp, #580]	; 0x244
   b55e4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   b55e8:	f88d 3248 	strb.w	r3, [sp, #584]	; 0x248
   b55ec:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   b55f0:	4b14      	ldr	r3, [pc, #80]	; (b5644 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0x1c8>)
   b55f2:	9393      	str	r3, [sp, #588]	; 0x24c
   b55f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b55f8:	ad94      	add	r5, sp, #592	; 0x250
   b55fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b55fc:	f8dc 3000 	ldr.w	r3, [ip]
   b5600:	702b      	strb	r3, [r5, #0]
        cache.insert(r);
   b5602:	a951      	add	r1, sp, #324	; 0x144
   b5604:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   b5608:	9399      	str	r3, [sp, #612]	; 0x264
   b560a:	4630      	mov	r0, r6
   b560c:	f000 f957 	bl	b58be <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b5610:	a851      	add	r0, sp, #324	; 0x144
   b5612:	f000 f9e7 	bl	b59e4 <_ZN12mDNSResolver8ResponseD1Ev>
        cnameIndex = cache.search(r);
   b5616:	4621      	mov	r1, r4
   b5618:	4630      	mov	r0, r6
   b561a:	f000 f903 	bl	b5824 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b561e:	4601      	mov	r1, r0
   b5620:	4630      	mov	r0, r6
   b5622:	f000 f8e2 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b5626:	4639      	mov	r1, r7
   b5628:	4605      	mov	r5, r0
   b562a:	4630      	mov	r0, r6
   b562c:	f000 f8dd 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b5630:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
      Response r;
   b5634:	4620      	mov	r0, r4
   b5636:	f000 f9d5 	bl	b59e4 <_ZN12mDNSResolver8ResponseD1Ev>
      cache[cacheIndex].cname = &cache[cnameIndex];
   b563a:	e793      	b.n	b5564 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
      (*offset) += dataLen;
   b563c:	4452      	add	r2, sl
   b563e:	6022      	str	r2, [r4, #0]
   b5640:	e790      	b.n	b5564 <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE+0xe8>
   b5642:	bf00      	nop
   b5644:	000bb43c 	.word	0x000bb43c

000b5648 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>:

  // Work out how many bytes are dedicated to questions. Since we aren't answering questions, they can be skipped
  // buffer: The mDNS packet we are parsing
  // len: Length of the packet
  // offset: the byte we are up to in the parsing process
  MDNS_RESULT Answer::skipQuestions(unsigned char* buffer, unsigned int len, unsigned int* offset) {
   b5648:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int questionCount = (buffer[4] << 8) + buffer[5];
   b564a:	7903      	ldrb	r3, [r0, #4]
   b564c:	7946      	ldrb	r6, [r0, #5]
   b564e:	eb06 2603 	add.w	r6, r6, r3, lsl #8

    *offset += 12;
   b5652:	6813      	ldr	r3, [r2, #0]
   b5654:	330c      	adds	r3, #12
   b5656:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b5658:	2500      	movs	r5, #0
   b565a:	42ae      	cmp	r6, r5
   b565c:	d016      	beq.n	b568c <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x44>

      while(buffer[*offset] != '\0') {
   b565e:	6813      	ldr	r3, [r2, #0]
   b5660:	5cc4      	ldrb	r4, [r0, r3]
   b5662:	b12c      	cbz	r4, b5670 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x28>
        // If it's a pointer, add two to the counter
        if((buffer[*offset] & 0xc0) == 0xc0) {
   b5664:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   b5668:	2fc0      	cmp	r7, #192	; 0xc0
   b566a:	d106      	bne.n	b567a <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x32>
          (*offset) += 2;
   b566c:	3302      	adds	r3, #2
   b566e:	6013      	str	r3, [r2, #0]
            return E_MDNS_PACKET_ERROR;
          }
        }
      }

      (*offset) += 5; // 2 bytes for the qtypes and 2 bytes qclass + plus one to land us on the next bit
   b5670:	6813      	ldr	r3, [r2, #0]
   b5672:	3305      	adds	r3, #5
   b5674:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < questionCount; i++) {
   b5676:	3501      	adds	r5, #1
   b5678:	e7ef      	b.n	b565a <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x12>
          if(labelLength > 0x3f) {
   b567a:	2c3f      	cmp	r4, #63	; 0x3f
   b567c:	d80c      	bhi.n	b5698 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x50>
          (*offset) += 1; // Increment to move to the next byte
   b567e:	3301      	adds	r3, #1
          (*offset) += labelLength;
   b5680:	4423      	add	r3, r4
          if(*offset > len) {
   b5682:	428b      	cmp	r3, r1
          (*offset) += labelLength;
   b5684:	6013      	str	r3, [r2, #0]
          if(*offset > len) {
   b5686:	d9ea      	bls.n	b565e <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x16>
    }

    if(*offset > len + 1) {
      return E_MDNS_PACKET_ERROR;
   b5688:	2023      	movs	r0, #35	; 0x23
    }

    return E_MDNS_OK;
  }
   b568a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*offset > len + 1) {
   b568c:	6813      	ldr	r3, [r2, #0]
   b568e:	3101      	adds	r1, #1
   b5690:	428b      	cmp	r3, r1
   b5692:	d8f9      	bhi.n	b5688 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x40>
    return E_MDNS_OK;
   b5694:	2020      	movs	r0, #32
   b5696:	e7f8      	b.n	b568a <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>
            return E_MDNS_INVALID_LABEL_LENGTH;
   b5698:	2026      	movs	r0, #38	; 0x26
   b569a:	e7f6      	b.n	b568a <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj+0x42>

000b569c <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>:

  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b569c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for(int i = 0; i < cache.length(); i++) {
   b56a0:	2400      	movs	r4, #0
  MDNS_RESULT Answer::resolveCnames(Cache &cache) {
   b56a2:	4605      	mov	r5, r0
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
        cache[i].ipAddress = cache[i].cname->ipAddress;
        cache[i].resolved = true;
   b56a4:	f04f 0801 	mov.w	r8, #1
        cache[i].cname = NULL;
   b56a8:	46a1      	mov	r9, r4
    for(int i = 0; i < cache.length(); i++) {
   b56aa:	4628      	mov	r0, r5
   b56ac:	f000 f8bc 	bl	b5828 <_ZN12mDNSResolver5Cache6lengthEv>
   b56b0:	42a0      	cmp	r0, r4
   b56b2:	dd2f      	ble.n	b5714 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x78>
      if(cache[i].cname != NULL && cache[i].cname->resolved) {
   b56b4:	4621      	mov	r1, r4
   b56b6:	4628      	mov	r0, r5
   b56b8:	f000 f897 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b56bc:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b56c0:	b333      	cbz	r3, b5710 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
   b56c2:	4621      	mov	r1, r4
   b56c4:	4628      	mov	r0, r5
   b56c6:	f000 f890 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b56ca:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   b56ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
   b56d2:	b1eb      	cbz	r3, b5710 <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0x74>
        cache[i].ipAddress = cache[i].cname->ipAddress;
   b56d4:	4621      	mov	r1, r4
   b56d6:	4628      	mov	r0, r5
   b56d8:	f000 f887 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b56dc:	4621      	mov	r1, r4
   b56de:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
   b56e2:	4628      	mov	r0, r5
   b56e4:	f000 f881 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b56e8:	f507 7786 	add.w	r7, r7, #268	; 0x10c
   b56ec:	f500 7686 	add.w	r6, r0, #268	; 0x10c
   b56f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b56f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b56f4:	683b      	ldr	r3, [r7, #0]
   b56f6:	7033      	strb	r3, [r6, #0]
        cache[i].resolved = true;
   b56f8:	4621      	mov	r1, r4
   b56fa:	4628      	mov	r0, r5
   b56fc:	f000 f875 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
        cache[i].cname = NULL;
   b5700:	4621      	mov	r1, r4
        cache[i].resolved = true;
   b5702:	f880 8104 	strb.w	r8, [r0, #260]	; 0x104
        cache[i].cname = NULL;
   b5706:	4628      	mov	r0, r5
   b5708:	f000 f86f 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b570c:	f8c0 9120 	str.w	r9, [r0, #288]	; 0x120
    for(int i = 0; i < cache.length(); i++) {
   b5710:	3401      	adds	r4, #1
   b5712:	e7ca      	b.n	b56aa <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE+0xe>
      }
    }
    return E_MDNS_OK;
  }
   b5714:	2020      	movs	r0, #32
   b5716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b571a <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>:
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b571a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b571e:	4691      	mov	r9, r2
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b5720:	f990 2002 	ldrsb.w	r2, [r0, #2]
   b5724:	7883      	ldrb	r3, [r0, #2]
   b5726:	2a00      	cmp	r2, #0
  MDNS_RESULT Answer::process(unsigned char* buffer, unsigned int len, Cache& cache) {
   b5728:	4606      	mov	r6, r0
   b572a:	4688      	mov	r8, r1
    if((buffer[2] & 0b10000000) != 0b10000000) {
   b572c:	da28      	bge.n	b5780 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    if(buffer[2] & 0b00000010) {
   b572e:	079b      	lsls	r3, r3, #30
   b5730:	d422      	bmi.n	b5778 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x5e>
    if (buffer[3] & 0b00001111) {
   b5732:	78c5      	ldrb	r5, [r0, #3]
   b5734:	f015 050f 	ands.w	r5, r5, #15
   b5738:	d120      	bne.n	b577c <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x62>
    unsigned int answerCount = (buffer[6] << 8) + buffer[7];
   b573a:	7983      	ldrb	r3, [r0, #6]
   b573c:	79c7      	ldrb	r7, [r0, #7]
    if(answerCount == 0) {
   b573e:	eb17 2703 	adds.w	r7, r7, r3, lsl #8
   b5742:	d01d      	beq.n	b5780 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x66>
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b5744:	aa01      	add	r2, sp, #4
    unsigned int offset = 0;
   b5746:	9501      	str	r5, [sp, #4]
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b5748:	f7ff ff7e 	bl	b5648 <_ZN12mDNSResolver6Answer13skipQuestionsEPhjPj>
    if(questionResult != E_MDNS_OK) {
   b574c:	2820      	cmp	r0, #32
    MDNS_RESULT questionResult = skipQuestions(buffer, len, &offset);
   b574e:	4604      	mov	r4, r0
    if(questionResult != E_MDNS_OK) {
   b5750:	d10e      	bne.n	b5770 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      answerResult = resolve(buffer, len, &offset, cache);
   b5752:	464b      	mov	r3, r9
   b5754:	aa01      	add	r2, sp, #4
   b5756:	4641      	mov	r1, r8
   b5758:	4630      	mov	r0, r6
   b575a:	f7ff fe8f 	bl	b547c <_ZN12mDNSResolver6Answer7resolveEPhjPjRNS_5CacheE>
      if(answerResult != E_MDNS_OK) {
   b575e:	2820      	cmp	r0, #32
      answerResult = resolve(buffer, len, &offset, cache);
   b5760:	4604      	mov	r4, r0
      if(answerResult != E_MDNS_OK) {
   b5762:	d105      	bne.n	b5770 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
    for(int i = 0; i < answerCount; i++) {
   b5764:	3501      	adds	r5, #1
   b5766:	42af      	cmp	r7, r5
   b5768:	d1f3      	bne.n	b5752 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x38>
    resolveCnames(cache);
   b576a:	4648      	mov	r0, r9
   b576c:	f7ff ff96 	bl	b569c <_ZN12mDNSResolver6Answer13resolveCnamesERNS_5CacheE>
  }
   b5770:	4620      	mov	r0, r4
   b5772:	b003      	add	sp, #12
   b5774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return E_MDNS_TRUNCATED;
   b5778:	2425      	movs	r4, #37	; 0x25
   b577a:	e7f9      	b.n	b5770 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_PACKET_ERROR;
   b577c:	2423      	movs	r4, #35	; 0x23
   b577e:	e7f7      	b.n	b5770 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>
      return E_MDNS_OK;
   b5780:	2420      	movs	r4, #32
   b5782:	e7f5      	b.n	b5770 <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE+0x56>

000b5784 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>:
   b5784:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5786:	1e4a      	subs	r2, r1, #1
   b5788:	460d      	mov	r5, r1
   b578a:	4604      	mov	r4, r0
   b578c:	4603      	mov	r3, r0
   b578e:	f500 7180 	add.w	r1, r0, #256	; 0x100
   b5792:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   b5796:	f803 0b01 	strb.w	r0, [r3], #1
   b579a:	428b      	cmp	r3, r1
   b579c:	d1f9      	bne.n	b5792 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0+0xe>
   b579e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b57a2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   b57a6:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   b57aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   b57ae:	f505 7786 	add.w	r7, r5, #268	; 0x10c
   b57b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b57b4:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   b57b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b57ba:	683b      	ldr	r3, [r7, #0]
   b57bc:	7033      	strb	r3, [r6, #0]
   b57be:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   b57c2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   b57c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b57c8 <_ZN12mDNSResolver5CacheC1Ev>:
#include "Cache.h"

namespace mDNSResolver {
  Cache::Cache() {
   b57c8:	b570      	push	{r4, r5, r6, lr}
   b57ca:	4604      	mov	r4, r0
   b57cc:	4605      	mov	r5, r0
   b57ce:	f500 6692 	add.w	r6, r0, #1168	; 0x490
   b57d2:	4628      	mov	r0, r5
   b57d4:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b57d8:	f000 f8d0 	bl	b597c <_ZN12mDNSResolver8ResponseC1Ev>
   b57dc:	42ae      	cmp	r6, r5
   b57de:	d1f8      	bne.n	b57d2 <_ZN12mDNSResolver5CacheC1Ev+0xa>
    this->size = 0;
   b57e0:	2300      	movs	r3, #0
   b57e2:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b57e6:	4620      	mov	r0, r4
   b57e8:	bd70      	pop	{r4, r5, r6, pc}

000b57ea <_ZN12mDNSResolver5CacheixEi>:
  Cache::~Cache() {
  }

  Response& Cache::operator[] (const int index) {
    return this->list[index];
  }
   b57ea:	f44f 7392 	mov.w	r3, #292	; 0x124
   b57ee:	fb03 0001 	mla	r0, r3, r1, r0
   b57f2:	4770      	bx	lr

000b57f4 <_ZN12mDNSResolver5Cache6searchEPKc>:

  int Cache::search(Response& response) {
    return search(response.name);
  }

  int Cache::search(const char* name) {
   b57f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(int i = 0; i < this->size; i++) {
   b57f8:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
  int Cache::search(const char* name) {
   b57fc:	4605      	mov	r5, r0
   b57fe:	4688      	mov	r8, r1
    for(int i = 0; i < this->size; i++) {
   b5800:	2400      	movs	r4, #0
      if(strcmp(this->list[i].name, name) == 0) {
   b5802:	f44f 7792 	mov.w	r7, #292	; 0x124
    for(int i = 0; i < this->size; i++) {
   b5806:	42a6      	cmp	r6, r4
   b5808:	dd07      	ble.n	b581a <_ZN12mDNSResolver5Cache6searchEPKc+0x26>
      if(strcmp(this->list[i].name, name) == 0) {
   b580a:	4641      	mov	r1, r8
   b580c:	fb07 5004 	mla	r0, r7, r4, r5
   b5810:	f003 fbeb 	bl	b8fea <strcmp>
   b5814:	b118      	cbz	r0, b581e <_ZN12mDNSResolver5Cache6searchEPKc+0x2a>
    for(int i = 0; i < this->size; i++) {
   b5816:	3401      	adds	r4, #1
   b5818:	e7f5      	b.n	b5806 <_ZN12mDNSResolver5Cache6searchEPKc+0x12>
        return i;
      }
    }
    return -1;
   b581a:	f04f 34ff 	mov.w	r4, #4294967295
  }
   b581e:	4620      	mov	r0, r4
   b5820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5824 <_ZN12mDNSResolver5Cache6searchERNS_8ResponseE>:
    return search(response.name);
   b5824:	f7ff bfe6 	b.w	b57f4 <_ZN12mDNSResolver5Cache6searchEPKc>

000b5828 <_ZN12mDNSResolver5Cache6lengthEv>:
    }
  }

  int Cache::length() {
    return this->size;
  }
   b5828:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
   b582c:	4770      	bx	lr

000b582e <_ZN12mDNSResolver5Cache6oldestEv>:

  int Cache::oldest() {
   b582e:	b570      	push	{r4, r5, r6, lr}
    if(this->size == 0) {
   b5830:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
   b5834:	b1a4      	cbz	r4, b5860 <_ZN12mDNSResolver5Cache6oldestEv+0x32>
      return -1;
    }

    unsigned long oldestTTL = this->list[0].ttl;
   b5836:	f8d0 5100 	ldr.w	r5, [r0, #256]	; 0x100
    unsigned int oldestIndex = 0;

    for(int i = 1; i < this->size; i++) {
   b583a:	2101      	movs	r1, #1
    unsigned int oldestIndex = 0;
   b583c:	2200      	movs	r2, #0
      if(this->list[i].ttl < oldestTTL) {
   b583e:	f500 7380 	add.w	r3, r0, #256	; 0x100
   b5842:	f44f 7692 	mov.w	r6, #292	; 0x124
    for(int i = 1; i < this->size; i++) {
   b5846:	428c      	cmp	r4, r1
   b5848:	dd08      	ble.n	b585c <_ZN12mDNSResolver5Cache6oldestEv+0x2e>
      if(this->list[i].ttl < oldestTTL) {
   b584a:	fb06 f001 	mul.w	r0, r6, r1
   b584e:	5818      	ldr	r0, [r3, r0]
   b5850:	42a8      	cmp	r0, r5
        oldestTTL = this->list[i].ttl;
        oldestIndex = i;
   b5852:	bf3c      	itt	cc
   b5854:	460a      	movcc	r2, r1
      if(this->list[i].ttl < oldestTTL) {
   b5856:	4605      	movcc	r5, r0
    for(int i = 1; i < this->size; i++) {
   b5858:	3101      	adds	r1, #1
   b585a:	e7f4      	b.n	b5846 <_ZN12mDNSResolver5Cache6oldestEv+0x18>
      }
    }

    return oldestIndex;
   b585c:	4610      	mov	r0, r2
  }
   b585e:	bd70      	pop	{r4, r5, r6, pc}
      return -1;
   b5860:	f04f 30ff 	mov.w	r0, #4294967295
   b5864:	e7fb      	b.n	b585e <_ZN12mDNSResolver5Cache6oldestEv+0x30>

000b5866 <_ZN12mDNSResolver5Cache11removeCnameEi>:

  void Cache::removeCname(int index) {
    Response *response = &this->list[index];
   b5866:	f44f 7392 	mov.w	r3, #292	; 0x124
   b586a:	fb03 0101 	mla	r1, r3, r1, r0
    return this->size;
   b586e:	f8d0 2490 	ldr.w	r2, [r0, #1168]	; 0x490

    for(int i = 0; i < length(); i++) {
   b5872:	2300      	movs	r3, #0
  void Cache::removeCname(int index) {
   b5874:	b530      	push	{r4, r5, lr}
      if(this->list[i].cname == response) {
        this->list[i].cname = NULL;
   b5876:	461c      	mov	r4, r3
    for(int i = 0; i < length(); i++) {
   b5878:	4293      	cmp	r3, r2
   b587a:	da09      	bge.n	b5890 <_ZN12mDNSResolver5Cache11removeCnameEi+0x2a>
      if(this->list[i].cname == response) {
   b587c:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   b5880:	428d      	cmp	r5, r1
        this->list[i].cname = NULL;
   b5882:	bf08      	it	eq
   b5884:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
    for(int i = 0; i < length(); i++) {
   b5888:	3301      	adds	r3, #1
   b588a:	f500 7092 	add.w	r0, r0, #292	; 0x124
   b588e:	e7f3      	b.n	b5878 <_ZN12mDNSResolver5Cache11removeCnameEi+0x12>
      }
    }
  }
   b5890:	bd30      	pop	{r4, r5, pc}

000b5892 <_ZN12mDNSResolver5Cache6removeEi>:

  void Cache::remove(int index) {
   b5892:	b538      	push	{r3, r4, r5, lr}
   b5894:	4604      	mov	r4, r0
   b5896:	460d      	mov	r5, r1
    removeCname(index);
   b5898:	f7ff ffe5 	bl	b5866 <_ZN12mDNSResolver5Cache11removeCnameEi>
    this->list[index] = this->list[this->size - 1];
   b589c:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
   b58a0:	f44f 7092 	mov.w	r0, #292	; 0x124
   b58a4:	3901      	subs	r1, #1
   b58a6:	fb00 4101 	mla	r1, r0, r1, r4
   b58aa:	fb00 4005 	mla	r0, r0, r5, r4
   b58ae:	f7ff ff69 	bl	b5784 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size -= 1;
   b58b2:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b58b6:	3b01      	subs	r3, #1
   b58b8:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b58bc:	bd38      	pop	{r3, r4, r5, pc}

000b58be <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>:
  void Cache::insert(Response response) {
   b58be:	b538      	push	{r3, r4, r5, lr}
   b58c0:	4604      	mov	r4, r0
   b58c2:	460d      	mov	r5, r1
    return search(response.name);
   b58c4:	f7ff ff96 	bl	b57f4 <_ZN12mDNSResolver5Cache6searchEPKc>
    if(existing != -1) {
   b58c8:	1c43      	adds	r3, r0, #1
   b58ca:	d008      	beq.n	b58de <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x20>
      this->list[existing] = response;
   b58cc:	f44f 7392 	mov.w	r3, #292	; 0x124
   b58d0:	4629      	mov	r1, r5
   b58d2:	fb03 4000 	mla	r0, r3, r0, r4
  }
   b58d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      this->list[existing] = response;
   b58da:	f7ff bf53 	b.w	b5784 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    if(this->size == MDNS_RESOLVER_MAX_CACHE) {
   b58de:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b58e2:	2b04      	cmp	r3, #4
   b58e4:	d106      	bne.n	b58f4 <_ZN12mDNSResolver5Cache6insertENS_8ResponseE+0x36>
      int i = oldest();
   b58e6:	4620      	mov	r0, r4
   b58e8:	f7ff ffa1 	bl	b582e <_ZN12mDNSResolver5Cache6oldestEv>
   b58ec:	4601      	mov	r1, r0
      remove(i);
   b58ee:	4620      	mov	r0, r4
   b58f0:	f7ff ffcf 	bl	b5892 <_ZN12mDNSResolver5Cache6removeEi>
    this->list[this->size] = response;
   b58f4:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b58f8:	f44f 7092 	mov.w	r0, #292	; 0x124
   b58fc:	fb00 4003 	mla	r0, r0, r3, r4
   b5900:	4629      	mov	r1, r5
   b5902:	f7ff ff3f 	bl	b5784 <_ZN12mDNSResolver8ResponseaSERKS0_.isra.0>
    this->size += 1;
   b5906:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b590a:	3301      	adds	r3, #1
   b590c:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
  }
   b5910:	bd38      	pop	{r3, r4, r5, pc}

000b5912 <_ZN12mDNSResolver5Cache6expireEv>:
  void Cache::expire() {
   b5912:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5916:	466e      	mov	r6, sp
   b5918:	4604      	mov	r4, r0
   b591a:	4605      	mov	r5, r0
   b591c:	46b0      	mov	r8, r6
    for(int i = 0; i < this->size; i++) {
   b591e:	2700      	movs	r7, #0
   b5920:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5924:	42bb      	cmp	r3, r7
   b5926:	dd0a      	ble.n	b593e <_ZN12mDNSResolver5Cache6expireEv+0x2c>
      this->list[i].decrementTTL();
   b5928:	4628      	mov	r0, r5
   b592a:	f000 f85c 	bl	b59e6 <_ZN12mDNSResolver8Response12decrementTTLEv>
      ttls[i] = this->list[i].ttl;
   b592e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   b5932:	f848 3b04 	str.w	r3, [r8], #4
    for(int i = 0; i < this->size; i++) {
   b5936:	3701      	adds	r7, #1
   b5938:	f505 7592 	add.w	r5, r5, #292	; 0x124
   b593c:	e7f0      	b.n	b5920 <_ZN12mDNSResolver5Cache6expireEv+0xe>
    for(int i = 0; i < this->size; i++) {
   b593e:	2500      	movs	r5, #0
   b5940:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
   b5944:	42ab      	cmp	r3, r5
   b5946:	dd08      	ble.n	b595a <_ZN12mDNSResolver5Cache6expireEv+0x48>
      if(ttls[i] == 0) {
   b5948:	f856 3b04 	ldr.w	r3, [r6], #4
   b594c:	b91b      	cbnz	r3, b5956 <_ZN12mDNSResolver5Cache6expireEv+0x44>
        remove(i);
   b594e:	4629      	mov	r1, r5
   b5950:	4620      	mov	r0, r4
   b5952:	f7ff ff9e 	bl	b5892 <_ZN12mDNSResolver5Cache6removeEi>
    for(int i = 0; i < this->size; i++) {
   b5956:	3501      	adds	r5, #1
   b5958:	e7f2      	b.n	b5940 <_ZN12mDNSResolver5Cache6expireEv+0x2e>
  }
   b595a:	b004      	add	sp, #16
   b595c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5960 <_ZN9IPAddressaSImEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5960:	b530      	push	{r4, r5, lr}
   b5962:	b087      	sub	sp, #28
   b5964:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5966:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5968:	4668      	mov	r0, sp
   b596a:	f001 fee5 	bl	b7738 <_ZN9IPAddressC1Em>
class IPAddress : public Printable {
   b596e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5970:	3404      	adds	r4, #4
   b5972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5974:	682b      	ldr	r3, [r5, #0]
   b5976:	7023      	strb	r3, [r4, #0]
    }
   b5978:	b007      	add	sp, #28
   b597a:	bd30      	pop	{r4, r5, pc}

000b597c <_ZN12mDNSResolver8ResponseC1Ev>:
#include <string.h>
#endif
#include "Particle.h"

namespace mDNSResolver {
  Response::Response() {
   b597c:	b538      	push	{r3, r4, r5, lr}
   b597e:	f500 7584 	add.w	r5, r0, #264	; 0x108
   b5982:	4604      	mov	r4, r0
   b5984:	4628      	mov	r0, r5
   b5986:	f001 feb7 	bl	b76f8 <_ZN9IPAddressC1Ev>
    this->name[0] = '\0';
   b598a:	2300      	movs	r3, #0
    this->resolved = false;
    this->ttl = 0;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b598c:	4628      	mov	r0, r5
    this->name[0] = '\0';
   b598e:	7023      	strb	r3, [r4, #0]
    this->resolved = false;
   b5990:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->ttl = 0;
   b5994:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    this->cname = NULL;
   b5998:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b599c:	f04f 31ff 	mov.w	r1, #4294967295
   b59a0:	f7ff ffde 	bl	b5960 <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b59a4:	4620      	mov	r0, r4
   b59a6:	bd38      	pop	{r3, r4, r5, pc}

000b59a8 <_ZN12mDNSResolver8ResponseC1EPKcm>:
    this->resolved = false;
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
  }

  Response::Response(const char* name, unsigned long ttl) {
   b59a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b59aa:	f500 7684 	add.w	r6, r0, #264	; 0x108
   b59ae:	4604      	mov	r4, r0
   b59b0:	4630      	mov	r0, r6
   b59b2:	4615      	mov	r5, r2
   b59b4:	9101      	str	r1, [sp, #4]
   b59b6:	f001 fe9f 	bl	b76f8 <_ZN9IPAddressC1Ev>
    strncpy(this->name, name, MDNS_MAX_NAME_LEN + 1);
   b59ba:	9901      	ldr	r1, [sp, #4]
   b59bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   b59c0:	4620      	mov	r0, r4
   b59c2:	f003 fb5e 	bl	b9082 <strncpy>
    this->name[MDNS_MAX_NAME_LEN + 1] = '\0';
    this->ttl = ttl;
    this->resolved = false;
   b59c6:	2300      	movs	r3, #0
    this->cname = NULL;
    this->ipAddress = INADDR_NONE;
   b59c8:	4630      	mov	r0, r6
    this->ttl = ttl;
   b59ca:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    this->resolved = false;
   b59ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    this->cname = NULL;
   b59d2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    this->ipAddress = INADDR_NONE;
   b59d6:	f04f 31ff 	mov.w	r1, #4294967295
   b59da:	f7ff ffc1 	bl	b5960 <_ZN9IPAddressaSImEERS_T_.isra.0>
  }
   b59de:	4620      	mov	r0, r4
   b59e0:	b002      	add	sp, #8
   b59e2:	bd70      	pop	{r4, r5, r6, pc}

000b59e4 <_ZN12mDNSResolver8ResponseD1Ev>:

  Response::~Response() {
  }
   b59e4:	4770      	bx	lr

000b59e6 <_ZN12mDNSResolver8Response12decrementTTLEv>:

  void Response::decrementTTL() {
    if(this->ttl > 0) {
   b59e6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b59ea:	2b00      	cmp	r3, #0
      this->ttl--;
   b59ec:	bfc4      	itt	gt
   b59ee:	f103 33ff 	addgt.w	r3, r3, #4294967295
   b59f2:	f8c0 3100 	strgt.w	r3, [r0, #256]	; 0x100
    }
  }
   b59f6:	4770      	bx	lr

000b59f8 <_ZN12mDNSResolver8ResolverC1ER3UDP>:
#endif

namespace mDNSResolver {
  Cache cache;

  Resolver::Resolver(UDP& udp) {
   b59f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59fa:	4604      	mov	r4, r0
   b59fc:	3004      	adds	r0, #4
   b59fe:	460d      	mov	r5, r1
   b5a00:	f000 ff8c 	bl	b691c <_ZN3UDPC1Ev>
   b5a04:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5a08:	f001 fe76 	bl	b76f8 <_ZN9IPAddressC1Ev>
    timeout = 0;
   b5a0c:	2300      	movs	r3, #0
   b5a0e:	66e3      	str	r3, [r4, #108]	; 0x6c
class Print
   b5a10:	686b      	ldr	r3, [r5, #4]
   b5a12:	60a3      	str	r3, [r4, #8]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   b5a14:	68ab      	ldr	r3, [r5, #8]
   b5a16:	60e3      	str	r3, [r4, #12]
   b5a18:	68eb      	ldr	r3, [r5, #12]
   b5a1a:	6123      	str	r3, [r4, #16]
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_printable.h"
#include "spark_wiring_stream.h"
#include "socket_hal.h"

class UDP : public Stream, public Printable {
   b5a1c:	696b      	ldr	r3, [r5, #20]
   b5a1e:	61a3      	str	r3, [r4, #24]
class IPAddress : public Printable {
   b5a20:	f105 0720 	add.w	r7, r5, #32
   b5a24:	8b2b      	ldrh	r3, [r5, #24]
   b5a26:	83a3      	strh	r3, [r4, #28]
   b5a28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5a2a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   b5a2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5a30:	683b      	ldr	r3, [r7, #0]
   b5a32:	7033      	strb	r3, [r6, #0]
   b5a34:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   b5a36:	87a3      	strh	r3, [r4, #60]	; 0x3c
   b5a38:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   b5a3a:	6423      	str	r3, [r4, #64]	; 0x40
   b5a3c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b5a3e:	6463      	str	r3, [r4, #68]	; 0x44
   b5a40:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   b5a42:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   b5a44:	64a3      	str	r3, [r4, #72]	; 0x48
   b5a46:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   b5a4a:	63a2      	str	r2, [r4, #56]	; 0x38
    this->udp = udp;
  }
   b5a4c:	4620      	mov	r0, r4
   b5a4e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
   b5a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a54 <_ZN12mDNSResolver8Resolver5queryEPKc>:
	init = false;
	// Serial.println("Search return 2");
    return INADDR_NONE;
  }

  void Resolver::query(const char* name) {
   b5a54:	b510      	push	{r4, lr}
   b5a56:	b08a      	sub	sp, #40	; 0x28
   b5a58:	4604      	mov	r4, r0
	  // Serial.println("Query");
    Query query(name);
   b5a5a:	a803      	add	r0, sp, #12
   b5a5c:	f7ff fc00 	bl	b5260 <_ZN12mDNSResolver5QueryC1EPKc>
    udp.beginPacket(MDNS_BROADCAST_IP, MDNS_PORT);		//Peet
   b5a60:	23fb      	movs	r3, #251	; 0xfb
   b5a62:	9300      	str	r3, [sp, #0]
   b5a64:	2300      	movs	r3, #0
   b5a66:	461a      	mov	r2, r3
   b5a68:	3404      	adds	r4, #4
   b5a6a:	21e0      	movs	r1, #224	; 0xe0
   b5a6c:	a804      	add	r0, sp, #16
   b5a6e:	f001 fe8f 	bl	b7790 <_ZN9IPAddressC1Ehhhh>
   b5a72:	f241 42e9 	movw	r2, #5353	; 0x14e9
   b5a76:	a904      	add	r1, sp, #16
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f000 ff9d 	bl	b69b8 <_ZN3UDP11beginPacketE9IPAddresst>
    query.sendPacket(udp);
   b5a7e:	4621      	mov	r1, r4
   b5a80:	a803      	add	r0, sp, #12
   b5a82:	f7ff fc2f 	bl	b52e4 <_ZN12mDNSResolver5Query10sendPacketER3UDP>
    udp.endPacket();
   b5a86:	4620      	mov	r0, r4
   b5a88:	f000 fcb2 	bl	b63f0 <_ZN3UDP9endPacketEv>
    Query query(name);
   b5a8c:	a803      	add	r0, sp, #12
   b5a8e:	f7ff fbe9 	bl	b5264 <_ZN12mDNSResolver5QueryD1Ev>
  }
   b5a92:	b00a      	add	sp, #40	; 0x28
   b5a94:	bd10      	pop	{r4, pc}
	...

000b5a98 <_ZN12mDNSResolver8Resolver4readEv>:
      free(buffer);
    }
	// Serial.println("mDNS2");
  }

  MDNS_RESULT Resolver::read() {
   b5a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5a9a:	4605      	mov	r5, r0
   b5a9c:	b089      	sub	sp, #36	; 0x24
    cache.expire();
   b5a9e:	482d      	ldr	r0, [pc, #180]	; (b5b54 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b5aa0:	f7ff ff37 	bl	b5912 <_ZN12mDNSResolver5Cache6expireEv>

    if(!init) {
   b5aa4:	f895 4068 	ldrb.w	r4, [r5, #104]	; 0x68
      init = true;
	  Serial.println("Begin Multicast");
	  udp.begin(5353);
   b5aa8:	1d2f      	adds	r7, r5, #4
    if(!init) {
   b5aaa:	bb54      	cbnz	r4, b5b02 <_ZN12mDNSResolver8Resolver4readEv+0x6a>
      init = true;
   b5aac:	2301      	movs	r3, #1
   b5aae:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	  Serial.println("Begin Multicast");
   b5ab2:	f001 fee3 	bl	b787c <_Z16_fetch_usbserialv>
   b5ab6:	4928      	ldr	r1, [pc, #160]	; (b5b58 <_ZN12mDNSResolver8Resolver4readEv+0xc0>)
   b5ab8:	f001 f975 	bl	b6da6 <_ZN5Print7printlnEPKc>
	  udp.begin(5353);
   b5abc:	4622      	mov	r2, r4
   b5abe:	f241 41e9 	movw	r1, #5353	; 0x14e9
   b5ac2:	4638      	mov	r0, r7
   b5ac4:	f000 fcee 	bl	b64a4 <_ZN3UDP5beginEtm>
      Serial.println(udp.joinMulticast(MDNS_BROADCAST_IP));	  //Peet
   b5ac8:	f001 fed8 	bl	b787c <_Z16_fetch_usbserialv>
   b5acc:	23fb      	movs	r3, #251	; 0xfb
   b5ace:	4622      	mov	r2, r4
   b5ad0:	9300      	str	r3, [sp, #0]
   b5ad2:	21e0      	movs	r1, #224	; 0xe0
   b5ad4:	4623      	mov	r3, r4
   b5ad6:	4606      	mov	r6, r0
   b5ad8:	a802      	add	r0, sp, #8
   b5ada:	f001 fe59 	bl	b7790 <_ZN9IPAddressC1Ehhhh>
   b5ade:	a902      	add	r1, sp, #8
   b5ae0:	4638      	mov	r0, r7
   b5ae2:	f000 ffbd 	bl	b6a60 <_ZN3UDP13joinMulticastERK9IPAddress>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b5ae6:	1e04      	subs	r4, r0, #0
   b5ae8:	da1d      	bge.n	b5b26 <_ZN12mDNSResolver8Resolver4readEv+0x8e>
            t = print('-');
   b5aea:	212d      	movs	r1, #45	; 0x2d
   b5aec:	4630      	mov	r0, r6
   b5aee:	f001 f94b 	bl	b6d88 <_ZN5Print5printEc>
            val = -n;
   b5af2:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5af4:	220a      	movs	r2, #10
   b5af6:	4630      	mov	r0, r6
   b5af8:	f001 f95f 	bl	b6dba <_ZN5Print11printNumberEmh>
        n += println();
   b5afc:	4630      	mov	r0, r6
   b5afe:	f001 f946 	bl	b6d8e <_ZN5Print7printlnEv>
    }

    unsigned int len = udp.parsePacket();
   b5b02:	2100      	movs	r1, #0
   b5b04:	4638      	mov	r0, r7
   b5b06:	f000 ff6e 	bl	b69e6 <_ZN3UDP11parsePacketEm>

    if(len > 0) {
   b5b0a:	4606      	mov	r6, r0
   b5b0c:	b300      	cbz	r0, b5b50 <_ZN12mDNSResolver8Resolver4readEv+0xb8>
      unsigned char *buffer = (unsigned char *)malloc(sizeof(unsigned char) * len);
   b5b0e:	f000 fb61 	bl	b61d4 <malloc>

      if(buffer == NULL) {
   b5b12:	4604      	mov	r4, r0
   b5b14:	b948      	cbnz	r0, b5b2a <_ZN12mDNSResolver8Resolver4readEv+0x92>
        // Out of memory - the packet is probably too big to parse. Probably.
        // Silently bombing out, possibly isn't great, but it'll do for the moment.
		Serial.println("Out of memory");
   b5b16:	f001 feb1 	bl	b787c <_Z16_fetch_usbserialv>
   b5b1a:	4910      	ldr	r1, [pc, #64]	; (b5b5c <_ZN12mDNSResolver8Resolver4readEv+0xc4>)
   b5b1c:	f001 f943 	bl	b6da6 <_ZN5Print7printlnEPKc>
        return E_MDNS_OUT_OF_MEMORY;
   b5b20:	2027      	movs	r0, #39	; 0x27
      return lastResult;
    }
	// Serial.println("Read return 2");
	// init = false;
    return E_MDNS_OK;
  }
   b5b22:	b009      	add	sp, #36	; 0x24
   b5b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b5b26:	4621      	mov	r1, r4
   b5b28:	e7e4      	b.n	b5af4 <_ZN12mDNSResolver8Resolver4readEv+0x5c>
      udp.read(buffer, len);
   b5b2a:	4601      	mov	r1, r0
   b5b2c:	4632      	mov	r2, r6
   b5b2e:	4638      	mov	r0, r7
   b5b30:	f000 fd27 	bl	b6582 <_ZN3UDP4readEPhj>
	  udp.flush();
   b5b34:	4638      	mov	r0, r7
   b5b36:	f000 fca3 	bl	b6480 <_ZN3UDP5flushEv>
      lastResult = Answer::process(buffer, len, cache);
   b5b3a:	4a06      	ldr	r2, [pc, #24]	; (b5b54 <_ZN12mDNSResolver8Resolver4readEv+0xbc>)
   b5b3c:	4631      	mov	r1, r6
   b5b3e:	4620      	mov	r0, r4
   b5b40:	f7ff fdeb 	bl	b571a <_ZN12mDNSResolver6Answer7processEPhjRNS_5CacheE>
   b5b44:	6028      	str	r0, [r5, #0]
      free(buffer);
   b5b46:	4620      	mov	r0, r4
   b5b48:	f000 fb4c 	bl	b61e4 <free>
      return lastResult;
   b5b4c:	6828      	ldr	r0, [r5, #0]
   b5b4e:	e7e8      	b.n	b5b22 <_ZN12mDNSResolver8Resolver4readEv+0x8a>
    return E_MDNS_OK;
   b5b50:	2020      	movs	r0, #32
   b5b52:	e7e6      	b.n	b5b22 <_ZN12mDNSResolver8Resolver4readEv+0x8a>
   b5b54:	2003e1ec 	.word	0x2003e1ec
   b5b58:	000bb301 	.word	0x000bb301
   b5b5c:	000bb311 	.word	0x000bb311

000b5b60 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>:

  bool Resolver::isMDNSName(const char* name) {
   b5b60:	b510      	push	{r4, lr}
    int len = strlen(name);
   b5b62:	4608      	mov	r0, r1
  bool Resolver::isMDNSName(const char* name) {
   b5b64:	460c      	mov	r4, r1
    int len = strlen(name);
   b5b66:	f003 fa70 	bl	b904a <strlen>
    int tldLen = strlen(MDNS_TLD);
	
	// Serial.println("LOll");
    if(len < tldLen) {
   b5b6a:	2805      	cmp	r0, #5
   b5b6c:	d908      	bls.n	b5b80 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x20>
      return false;
    }
	// Serial.println("LOLO");
    return strcmp(name + len - tldLen, MDNS_TLD) == 0;
   b5b6e:	3806      	subs	r0, #6
   b5b70:	4904      	ldr	r1, [pc, #16]	; (b5b84 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x24>)
   b5b72:	4420      	add	r0, r4
   b5b74:	f003 fa39 	bl	b8fea <strcmp>
   b5b78:	fab0 f080 	clz	r0, r0
   b5b7c:	0940      	lsrs	r0, r0, #5
  }
   b5b7e:	bd10      	pop	{r4, pc}
      return false;
   b5b80:	2000      	movs	r0, #0
   b5b82:	e7fc      	b.n	b5b7e <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc+0x1e>
   b5b84:	000bb1bb 	.word	0x000bb1bb

000b5b88 <_ZN12mDNSResolver8Resolver6searchEPKc>:
  IPAddress Resolver::search(const char* name) {
   b5b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5b8c:	460c      	mov	r4, r1
   b5b8e:	b0cd      	sub	sp, #308	; 0x134
   b5b90:	4606      	mov	r6, r0
    if(!isMDNSName(name)) {
   b5b92:	4611      	mov	r1, r2
   b5b94:	4620      	mov	r0, r4
  IPAddress Resolver::search(const char* name) {
   b5b96:	4615      	mov	r5, r2
    if(!isMDNSName(name)) {
   b5b98:	f7ff ffe2 	bl	b5b60 <_ZN12mDNSResolver8Resolver10isMDNSNameEPKc>
   b5b9c:	b950      	cbnz	r0, b5bb4 <_ZN12mDNSResolver8Resolver6searchEPKc+0x2c>
	Serial.println("not valid");
   b5b9e:	f001 fe6d 	bl	b787c <_Z16_fetch_usbserialv>
   b5ba2:	4938      	ldr	r1, [pc, #224]	; (b5c84 <_ZN12mDNSResolver8Resolver6searchEPKc+0xfc>)
   b5ba4:	f001 f8ff 	bl	b6da6 <_ZN5Print7printlnEPKc>
    return INADDR_NONE;
   b5ba8:	f04f 31ff 	mov.w	r1, #4294967295
   b5bac:	4630      	mov	r0, r6
   b5bae:	f001 fdc3 	bl	b7738 <_ZN9IPAddressC1Em>
   b5bb2:	e04d      	b.n	b5c50 <_ZN12mDNSResolver8Resolver6searchEPKc+0xc8>
    cache.expire();
   b5bb4:	4834      	ldr	r0, [pc, #208]	; (b5c88 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
      int index = cache.search(name);
   b5bb6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b5c88 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>
    cache.expire();
   b5bba:	f7ff feaa 	bl	b5912 <_ZN12mDNSResolver5Cache6expireEv>
    int attempts = 0;
   b5bbe:	f04f 0800 	mov.w	r8, #0
      int index = cache.search(name);
   b5bc2:	4629      	mov	r1, r5
   b5bc4:	4648      	mov	r0, r9
   b5bc6:	f7ff fe15 	bl	b57f4 <_ZN12mDNSResolver5Cache6searchEPKc>
      if(index == -1) {
   b5bca:	1c43      	adds	r3, r0, #1
      int index = cache.search(name);
   b5bcc:	4607      	mov	r7, r0
      if(index == -1) {
   b5bce:	d11e      	bne.n	b5c0e <_ZN12mDNSResolver8Resolver6searchEPKc+0x86>
        cache.insert(Response(name, 5));			//ttl = 5
   b5bd0:	2205      	movs	r2, #5
   b5bd2:	4629      	mov	r1, r5
   b5bd4:	a803      	add	r0, sp, #12
   b5bd6:	f7ff fee7 	bl	b59a8 <_ZN12mDNSResolver8ResponseC1EPKcm>
   b5bda:	4648      	mov	r0, r9
   b5bdc:	a903      	add	r1, sp, #12
   b5bde:	f7ff fe6e 	bl	b58be <_ZN12mDNSResolver5Cache6insertENS_8ResponseE>
   b5be2:	a803      	add	r0, sp, #12
   b5be4:	f7ff fefe 	bl	b59e4 <_ZN12mDNSResolver8ResponseD1Ev>
    while(attempts < MDNS_ATTEMPTS) {
   b5be8:	f1b8 0f05 	cmp.w	r8, #5
   b5bec:	d1e9      	bne.n	b5bc2 <_ZN12mDNSResolver8Resolver6searchEPKc+0x3a>
	udp.leaveMulticast(MDNS_BROADCAST_IP);
   b5bee:	23fb      	movs	r3, #251	; 0xfb
   b5bf0:	9300      	str	r3, [sp, #0]
   b5bf2:	2300      	movs	r3, #0
   b5bf4:	461a      	mov	r2, r3
   b5bf6:	21e0      	movs	r1, #224	; 0xe0
   b5bf8:	a803      	add	r0, sp, #12
   b5bfa:	f001 fdc9 	bl	b7790 <_ZN9IPAddressC1Ehhhh>
   b5bfe:	a903      	add	r1, sp, #12
   b5c00:	1d20      	adds	r0, r4, #4
   b5c02:	f000 ff3e 	bl	b6a82 <_ZN3UDP14leaveMulticastERK9IPAddress>
	init = false;
   b5c06:	2300      	movs	r3, #0
   b5c08:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b5c0c:	e7cc      	b.n	b5ba8 <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
      } else if(cache[index].resolved) {
   b5c0e:	4601      	mov	r1, r0
   b5c10:	4648      	mov	r0, r9
   b5c12:	f7ff fdea 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b5c16:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   b5c1a:	b1eb      	cbz	r3, b5c58 <_ZN12mDNSResolver8Resolver6searchEPKc+0xd0>
		  udp.leaveMulticast(MDNS_BROADCAST_IP);
   b5c1c:	23fb      	movs	r3, #251	; 0xfb
   b5c1e:	9300      	str	r3, [sp, #0]
   b5c20:	2300      	movs	r3, #0
   b5c22:	461a      	mov	r2, r3
   b5c24:	21e0      	movs	r1, #224	; 0xe0
   b5c26:	a803      	add	r0, sp, #12
   b5c28:	f001 fdb2 	bl	b7790 <_ZN9IPAddressC1Ehhhh>
   b5c2c:	a903      	add	r1, sp, #12
   b5c2e:	1d20      	adds	r0, r4, #4
   b5c30:	f000 ff27 	bl	b6a82 <_ZN3UDP14leaveMulticastERK9IPAddress>
        return cache[index].ipAddress;
   b5c34:	4639      	mov	r1, r7
   b5c36:	4814      	ldr	r0, [pc, #80]	; (b5c88 <_ZN12mDNSResolver8Resolver6searchEPKc+0x100>)
   b5c38:	f7ff fdd7 	bl	b57ea <_ZN12mDNSResolver5CacheixEi>
   b5c3c:	4634      	mov	r4, r6
   b5c3e:	4b13      	ldr	r3, [pc, #76]	; (b5c8c <_ZN12mDNSResolver8Resolver6searchEPKc+0x104>)
   b5c40:	f844 3b04 	str.w	r3, [r4], #4
   b5c44:	f500 7586 	add.w	r5, r0, #268	; 0x10c
   b5c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c4c:	682b      	ldr	r3, [r5, #0]
   b5c4e:	7023      	strb	r3, [r4, #0]
  }
   b5c50:	4630      	mov	r0, r6
   b5c52:	b04d      	add	sp, #308	; 0x134
   b5c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5c58:	f000 f880 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>
      if(now - timeout > MDNS_RETRY) {
   b5c5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b5c5e:	1ac3      	subs	r3, r0, r3
   b5c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b5c64:	4607      	mov	r7, r0
   b5c66:	dd06      	ble.n	b5c76 <_ZN12mDNSResolver8Resolver6searchEPKc+0xee>
        query(name);
   b5c68:	4629      	mov	r1, r5
   b5c6a:	4620      	mov	r0, r4
   b5c6c:	f7ff fef2 	bl	b5a54 <_ZN12mDNSResolver8Resolver5queryEPKc>
        attempts++;
   b5c70:	f108 0801 	add.w	r8, r8, #1
        timeout = now;
   b5c74:	66e7      	str	r7, [r4, #108]	; 0x6c
      MDNS_RESULT result = read();
   b5c76:	4620      	mov	r0, r4
   b5c78:	f7ff ff0e 	bl	b5a98 <_ZN12mDNSResolver8Resolver4readEv>
      if(result != E_MDNS_OK) {
   b5c7c:	2820      	cmp	r0, #32
   b5c7e:	d0b3      	beq.n	b5be8 <_ZN12mDNSResolver8Resolver6searchEPKc+0x60>
   b5c80:	e792      	b.n	b5ba8 <_ZN12mDNSResolver8Resolver6searchEPKc+0x20>
   b5c82:	bf00      	nop
   b5c84:	000bb31f 	.word	0x000bb31f
   b5c88:	2003e1ec 	.word	0x2003e1ec
   b5c8c:	000bb43c 	.word	0x000bb43c

000b5c90 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE>:
  Cache cache;
   b5c90:	4801      	ldr	r0, [pc, #4]	; (b5c98 <_GLOBAL__sub_I__ZN12mDNSResolver5cacheE+0x8>)
   b5c92:	f7ff bd99 	b.w	b57c8 <_ZN12mDNSResolver5CacheC1Ev>
   b5c96:	bf00      	nop
   b5c98:	2003e1ec 	.word	0x2003e1ec

000b5c9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4b02      	ldr	r3, [pc, #8]	; (b5ca8 <netdb_freeaddrinfo+0xc>)
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	689b      	ldr	r3, [r3, #8]
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	bd08      	pop	{r3, pc}
   b5ca8:	00030268 	.word	0x00030268

000b5cac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5cac:	b508      	push	{r3, lr}
   b5cae:	4b02      	ldr	r3, [pc, #8]	; (b5cb8 <netdb_getaddrinfo+0xc>)
   b5cb0:	681b      	ldr	r3, [r3, #0]
   b5cb2:	68db      	ldr	r3, [r3, #12]
   b5cb4:	9301      	str	r3, [sp, #4]
   b5cb6:	bd08      	pop	{r3, pc}
   b5cb8:	00030268 	.word	0x00030268

000b5cbc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5cbc:	b508      	push	{r3, lr}
   b5cbe:	4b02      	ldr	r3, [pc, #8]	; (b5cc8 <HAL_Pin_Mode+0xc>)
   b5cc0:	681b      	ldr	r3, [r3, #0]
   b5cc2:	689b      	ldr	r3, [r3, #8]
   b5cc4:	9301      	str	r3, [sp, #4]
   b5cc6:	bd08      	pop	{r3, pc}
   b5cc8:	0003022c 	.word	0x0003022c

000b5ccc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5ccc:	b508      	push	{r3, lr}
   b5cce:	4b02      	ldr	r3, [pc, #8]	; (b5cd8 <HAL_Get_Pin_Mode+0xc>)
   b5cd0:	681b      	ldr	r3, [r3, #0]
   b5cd2:	68db      	ldr	r3, [r3, #12]
   b5cd4:	9301      	str	r3, [sp, #4]
   b5cd6:	bd08      	pop	{r3, pc}
   b5cd8:	0003022c 	.word	0x0003022c

000b5cdc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5cdc:	b508      	push	{r3, lr}
   b5cde:	4b02      	ldr	r3, [pc, #8]	; (b5ce8 <HAL_GPIO_Write+0xc>)
   b5ce0:	681b      	ldr	r3, [r3, #0]
   b5ce2:	691b      	ldr	r3, [r3, #16]
   b5ce4:	9301      	str	r3, [sp, #4]
   b5ce6:	bd08      	pop	{r3, pc}
   b5ce8:	0003022c 	.word	0x0003022c

000b5cec <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b5cec:	b508      	push	{r3, lr}
   b5cee:	4b02      	ldr	r3, [pc, #8]	; (b5cf8 <HAL_Interrupts_Attach+0xc>)
   b5cf0:	681b      	ldr	r3, [r3, #0]
   b5cf2:	699b      	ldr	r3, [r3, #24]
   b5cf4:	9301      	str	r3, [sp, #4]
   b5cf6:	bd08      	pop	{r3, pc}
   b5cf8:	0003022c 	.word	0x0003022c

000b5cfc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5cfc:	b508      	push	{r3, lr}
   b5cfe:	4b02      	ldr	r3, [pc, #8]	; (b5d08 <HAL_Interrupts_Detach+0xc>)
   b5d00:	681b      	ldr	r3, [r3, #0]
   b5d02:	69db      	ldr	r3, [r3, #28]
   b5d04:	9301      	str	r3, [sp, #4]
   b5d06:	bd08      	pop	{r3, pc}
   b5d08:	0003022c 	.word	0x0003022c

000b5d0c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5d0c:	b508      	push	{r3, lr}
   b5d0e:	4b02      	ldr	r3, [pc, #8]	; (b5d18 <if_index_to_name+0xc>)
   b5d10:	681b      	ldr	r3, [r3, #0]
   b5d12:	695b      	ldr	r3, [r3, #20]
   b5d14:	9301      	str	r3, [sp, #4]
   b5d16:	bd08      	pop	{r3, pc}
   b5d18:	0003026c 	.word	0x0003026c

000b5d1c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <if_get_by_index+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	699b      	ldr	r3, [r3, #24]
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	0003026c 	.word	0x0003026c

000b5d2c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <if_get_addrs+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	0003026c 	.word	0x0003026c

000b5d3c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <if_free_if_addrs+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	0003026c 	.word	0x0003026c

000b5d4c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <HAL_RNG_GetRandomNumber+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	685b      	ldr	r3, [r3, #4]
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	00030218 	.word	0x00030218

000b5d5c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	695b      	ldr	r3, [r3, #20]
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030218 	.word	0x00030218

000b5d6c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <hal_rtc_time_is_valid+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030218 	.word	0x00030218

000b5d7c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <hal_rtc_get_time+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030218 	.word	0x00030218

000b5d8c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <os_mutex_create+0xc>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d94:	9301      	str	r3, [sp, #4]
   b5d96:	bd08      	pop	{r3, pc}
   b5d98:	00030248 	.word	0x00030248

000b5d9c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <os_mutex_lock+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	00030248 	.word	0x00030248

000b5dac <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <os_mutex_unlock+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	00030248 	.word	0x00030248

000b5dbc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <os_mutex_recursive_create+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	00030248 	.word	0x00030248

000b5dcc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <inet_inet_ntop+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	695b      	ldr	r3, [r3, #20]
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	00030264 	.word	0x00030264

000b5ddc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <inet_htonl+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	6a1b      	ldr	r3, [r3, #32]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	00030264 	.word	0x00030264

000b5dec <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <inet_ntohs+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030264 	.word	0x00030264

000b5dfc <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <inet_htons+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030264 	.word	0x00030264

000b5e0c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <hal_usart_write+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	68db      	ldr	r3, [r3, #12]
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	0003023c 	.word	0x0003023c

000b5e1c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <hal_usart_available+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	691b      	ldr	r3, [r3, #16]
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	0003023c 	.word	0x0003023c

000b5e2c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <hal_usart_read+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	695b      	ldr	r3, [r3, #20]
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	0003023c 	.word	0x0003023c

000b5e3c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <hal_usart_peek+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	699b      	ldr	r3, [r3, #24]
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	0003023c 	.word	0x0003023c

000b5e4c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <hal_usart_flush+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	69db      	ldr	r3, [r3, #28]
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	0003023c 	.word	0x0003023c

000b5e5c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <hal_usart_is_enabled+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	6a1b      	ldr	r3, [r3, #32]
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	0003023c 	.word	0x0003023c

000b5e6c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <hal_usart_available_data_for_write+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	0003023c 	.word	0x0003023c

000b5e7c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <hal_usart_init_ex+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	0003023c 	.word	0x0003023c

000b5e8c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <hal_i2c_write+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	6a1b      	ldr	r3, [r3, #32]
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	00030228 	.word	0x00030228

000b5e9c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <hal_i2c_available+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030228 	.word	0x00030228

000b5eac <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <hal_i2c_read+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	00030228 	.word	0x00030228

000b5ebc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b02      	ldr	r3, [pc, #8]	; (b5ec8 <hal_i2c_peek+0xc>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ec4:	9301      	str	r3, [sp, #4]
   b5ec6:	bd08      	pop	{r3, pc}
   b5ec8:	00030228 	.word	0x00030228

000b5ecc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <hal_i2c_flush+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	00030228 	.word	0x00030228

000b5edc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <hal_i2c_is_enabled+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	00030228 	.word	0x00030228

000b5eec <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <hal_i2c_init+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	00030228 	.word	0x00030228

000b5efc <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <sock_bind+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	685b      	ldr	r3, [r3, #4]
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	00030238 	.word	0x00030238

000b5f0c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <sock_setsockopt+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	699b      	ldr	r3, [r3, #24]
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	00030238 	.word	0x00030238

000b5f1c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <sock_close+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	69db      	ldr	r3, [r3, #28]
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	00030238 	.word	0x00030238

000b5f2c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <sock_connect+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	6a1b      	ldr	r3, [r3, #32]
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	00030238 	.word	0x00030238

000b5f3c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <sock_recv+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	00030238 	.word	0x00030238

000b5f4c <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <sock_recvfrom+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	00030238 	.word	0x00030238

000b5f5c <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <sock_send+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	00030238 	.word	0x00030238

000b5f6c <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <sock_sendto+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	00030238 	.word	0x00030238

000b5f7c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <sock_socket+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	00030238 	.word	0x00030238

000b5f8c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <hal_spi_init+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	69db      	ldr	r3, [r3, #28]
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	00030230 	.word	0x00030230

000b5f9c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <hal_spi_is_enabled+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	6a1b      	ldr	r3, [r3, #32]
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	00030230 	.word	0x00030230

000b5fac <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <HAL_USB_USART_Init+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	681b      	ldr	r3, [r3, #0]
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	0003024c 	.word	0x0003024c

000b5fbc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <HAL_USB_USART_Available_Data+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	691b      	ldr	r3, [r3, #16]
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	0003024c 	.word	0x0003024c

000b5fcc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	695b      	ldr	r3, [r3, #20]
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	0003024c 	.word	0x0003024c

000b5fdc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b02      	ldr	r3, [pc, #8]	; (b5fe8 <HAL_USB_USART_Receive_Data+0xc>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	699b      	ldr	r3, [r3, #24]
   b5fe4:	9301      	str	r3, [sp, #4]
   b5fe6:	bd08      	pop	{r3, pc}
   b5fe8:	0003024c 	.word	0x0003024c

000b5fec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5fec:	b508      	push	{r3, lr}
   b5fee:	4b02      	ldr	r3, [pc, #8]	; (b5ff8 <HAL_USB_USART_Send_Data+0xc>)
   b5ff0:	681b      	ldr	r3, [r3, #0]
   b5ff2:	69db      	ldr	r3, [r3, #28]
   b5ff4:	9301      	str	r3, [sp, #4]
   b5ff6:	bd08      	pop	{r3, pc}
   b5ff8:	0003024c 	.word	0x0003024c

000b5ffc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5ffc:	b508      	push	{r3, lr}
   b5ffe:	4b02      	ldr	r3, [pc, #8]	; (b6008 <HAL_USB_USART_Flush_Data+0xc>)
   b6000:	681b      	ldr	r3, [r3, #0]
   b6002:	6a1b      	ldr	r3, [r3, #32]
   b6004:	9301      	str	r3, [sp, #4]
   b6006:	bd08      	pop	{r3, pc}
   b6008:	0003024c 	.word	0x0003024c

000b600c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b600c:	b508      	push	{r3, lr}
   b600e:	4b02      	ldr	r3, [pc, #8]	; (b6018 <log_message+0xc>)
   b6010:	681b      	ldr	r3, [r3, #0]
   b6012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6014:	9301      	str	r3, [sp, #4]
   b6016:	bd08      	pop	{r3, pc}
   b6018:	00030260 	.word	0x00030260

000b601c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b601c:	b508      	push	{r3, lr}
   b601e:	4b02      	ldr	r3, [pc, #8]	; (b6028 <system_mode+0xc>)
   b6020:	681b      	ldr	r3, [r3, #0]
   b6022:	681b      	ldr	r3, [r3, #0]
   b6024:	9301      	str	r3, [sp, #4]
   b6026:	bd08      	pop	{r3, pc}
   b6028:	00030220 	.word	0x00030220

000b602c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b602c:	b508      	push	{r3, lr}
   b602e:	4b02      	ldr	r3, [pc, #8]	; (b6038 <set_system_mode+0xc>)
   b6030:	681b      	ldr	r3, [r3, #0]
   b6032:	685b      	ldr	r3, [r3, #4]
   b6034:	9301      	str	r3, [sp, #4]
   b6036:	bd08      	pop	{r3, pc}
   b6038:	00030220 	.word	0x00030220

000b603c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b603c:	b508      	push	{r3, lr}
   b603e:	4b02      	ldr	r3, [pc, #8]	; (b6048 <system_thread_set_state+0xc>)
   b6040:	681b      	ldr	r3, [r3, #0]
   b6042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6044:	9301      	str	r3, [sp, #4]
   b6046:	bd08      	pop	{r3, pc}
   b6048:	00030220 	.word	0x00030220

000b604c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b604c:	b508      	push	{r3, lr}
   b604e:	4b02      	ldr	r3, [pc, #8]	; (b6058 <application_thread_current+0xc>)
   b6050:	681b      	ldr	r3, [r3, #0]
   b6052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6054:	9301      	str	r3, [sp, #4]
   b6056:	bd08      	pop	{r3, pc}
   b6058:	00030220 	.word	0x00030220

000b605c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b605c:	b508      	push	{r3, lr}
   b605e:	4b02      	ldr	r3, [pc, #8]	; (b6068 <application_thread_invoke+0xc>)
   b6060:	681b      	ldr	r3, [r3, #0]
   b6062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6064:	9301      	str	r3, [sp, #4]
   b6066:	bd08      	pop	{r3, pc}
   b6068:	00030220 	.word	0x00030220

000b606c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b606c:	b508      	push	{r3, lr}
   b606e:	4b02      	ldr	r3, [pc, #8]	; (b6078 <system_thread_get_state+0xc>)
   b6070:	681b      	ldr	r3, [r3, #0]
   b6072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6074:	9301      	str	r3, [sp, #4]
   b6076:	bd08      	pop	{r3, pc}
   b6078:	00030220 	.word	0x00030220

000b607c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b607c:	b508      	push	{r3, lr}
   b607e:	4b03      	ldr	r3, [pc, #12]	; (b608c <system_ctrl_set_app_request_handler+0x10>)
   b6080:	681b      	ldr	r3, [r3, #0]
   b6082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6086:	9301      	str	r3, [sp, #4]
   b6088:	bd08      	pop	{r3, pc}
   b608a:	0000      	.short	0x0000
   b608c:	00030220 	.word	0x00030220

000b6090 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b03      	ldr	r3, [pc, #12]	; (b60a0 <system_ctrl_set_result+0x10>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b609a:	9301      	str	r3, [sp, #4]
   b609c:	bd08      	pop	{r3, pc}
   b609e:	0000      	.short	0x0000
   b60a0:	00030220 	.word	0x00030220

000b60a4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <network_connect+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	685b      	ldr	r3, [r3, #4]
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	00030240 	.word	0x00030240

000b60b4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <network_connecting+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	689b      	ldr	r3, [r3, #8]
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	00030240 	.word	0x00030240

000b60c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <network_disconnect+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	68db      	ldr	r3, [r3, #12]
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	00030240 	.word	0x00030240

000b60d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <network_ready+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	691b      	ldr	r3, [r3, #16]
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	00030240 	.word	0x00030240

000b60e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <network_on+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	695b      	ldr	r3, [r3, #20]
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	00030240 	.word	0x00030240

000b60f4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <network_off+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	699b      	ldr	r3, [r3, #24]
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	00030240 	.word	0x00030240

000b6104 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <network_listen+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	69db      	ldr	r3, [r3, #28]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	00030240 	.word	0x00030240

000b6114 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <network_listening+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	6a1b      	ldr	r3, [r3, #32]
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030240 	.word	0x00030240

000b6124 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <network_set_listen_timeout+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	00030240 	.word	0x00030240

000b6134 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <network_get_listen_timeout+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030240 	.word	0x00030240

000b6144 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <network_is_on+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030240 	.word	0x00030240

000b6154 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <network_is_off+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030240 	.word	0x00030240

000b6164 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <spark_variable+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	681b      	ldr	r3, [r3, #0]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030244 	.word	0x00030244

000b6174 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <spark_process+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	689b      	ldr	r3, [r3, #8]
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	00030244 	.word	0x00030244

000b6184 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <spark_cloud_flag_connected+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	695b      	ldr	r3, [r3, #20]
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	00030244 	.word	0x00030244

000b6194 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <spark_send_event+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	6a1b      	ldr	r3, [r3, #32]
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	00030244 	.word	0x00030244

000b61a4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <spark_subscribe+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	00030244 	.word	0x00030244

000b61b4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <spark_sync_time_pending+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	00030244 	.word	0x00030244

000b61c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	00030244 	.word	0x00030244

000b61d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <malloc+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	681b      	ldr	r3, [r3, #0]
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	0003021c 	.word	0x0003021c

000b61e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <free+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	685b      	ldr	r3, [r3, #4]
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	0003021c 	.word	0x0003021c

000b61f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <realloc+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	689b      	ldr	r3, [r3, #8]
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	0003021c 	.word	0x0003021c

000b6204 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <sprintf+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	68db      	ldr	r3, [r3, #12]
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	0003021c 	.word	0x0003021c

000b6214 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <sscanf+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	695b      	ldr	r3, [r3, #20]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	0003021c 	.word	0x0003021c

000b6224 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <vsnprintf+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	0003021c 	.word	0x0003021c

000b6234 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <abort+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	0003021c 	.word	0x0003021c

000b6244 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <_malloc_r+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	0003021c 	.word	0x0003021c

000b6254 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <__errno+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	0003021c 	.word	0x0003021c

000b6264 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <__assert_func+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	0003021c 	.word	0x0003021c

000b6274 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <newlib_impure_ptr_callback+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	0003021c 	.word	0x0003021c

000b6284 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <localtime_r+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	0003021c 	.word	0x0003021c

000b6294 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6294:	2200      	movs	r2, #0
   b6296:	6840      	ldr	r0, [r0, #4]
   b6298:	4611      	mov	r1, r2
   b629a:	f7ff bf3b 	b.w	b6114 <network_listening>

000b629e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b629e:	2200      	movs	r2, #0
   b62a0:	6840      	ldr	r0, [r0, #4]
   b62a2:	4611      	mov	r1, r2
   b62a4:	f7ff bf46 	b.w	b6134 <network_get_listen_timeout>

000b62a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b62a8:	6840      	ldr	r0, [r0, #4]
   b62aa:	2200      	movs	r2, #0
   b62ac:	f7ff bf3a 	b.w	b6124 <network_set_listen_timeout>

000b62b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b62b0:	6840      	ldr	r0, [r0, #4]
   b62b2:	2200      	movs	r2, #0
   b62b4:	f081 0101 	eor.w	r1, r1, #1
   b62b8:	f7ff bf24 	b.w	b6104 <network_listen>

000b62bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b62bc:	2300      	movs	r3, #0
   b62be:	6840      	ldr	r0, [r0, #4]
   b62c0:	461a      	mov	r2, r3
   b62c2:	4619      	mov	r1, r3
   b62c4:	f7ff bf16 	b.w	b60f4 <network_off>

000b62c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b62c8:	2300      	movs	r3, #0
   b62ca:	6840      	ldr	r0, [r0, #4]
   b62cc:	461a      	mov	r2, r3
   b62ce:	4619      	mov	r1, r3
   b62d0:	f7ff bf08 	b.w	b60e4 <network_on>

000b62d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b62d4:	2200      	movs	r2, #0
   b62d6:	6840      	ldr	r0, [r0, #4]
   b62d8:	4611      	mov	r1, r2
   b62da:	f7ff befb 	b.w	b60d4 <network_ready>

000b62de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b62de:	2200      	movs	r2, #0
   b62e0:	6840      	ldr	r0, [r0, #4]
   b62e2:	4611      	mov	r1, r2
   b62e4:	f7ff bee6 	b.w	b60b4 <network_connecting>

000b62e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b62e8:	6840      	ldr	r0, [r0, #4]
   b62ea:	2200      	movs	r2, #0
   b62ec:	2102      	movs	r1, #2
   b62ee:	f7ff bee9 	b.w	b60c4 <network_disconnect>

000b62f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b62f2:	2300      	movs	r3, #0
   b62f4:	6840      	ldr	r0, [r0, #4]
   b62f6:	461a      	mov	r2, r3
   b62f8:	f7ff bed4 	b.w	b60a4 <network_connect>

000b62fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b62fc:	4b02      	ldr	r3, [pc, #8]	; (b6308 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b62fe:	2203      	movs	r2, #3
   b6300:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6302:	4a02      	ldr	r2, [pc, #8]	; (b630c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6304:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6306:	4770      	bx	lr
   b6308:	2003e680 	.word	0x2003e680
   b630c:	000bb334 	.word	0x000bb334

000b6310 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6310:	b510      	push	{r4, lr}
   b6312:	4604      	mov	r4, r0
   b6314:	4608      	mov	r0, r1
{
    _spi = spi;
   b6316:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6318:	f7ff fe38 	bl	b5f8c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b631c:	2300      	movs	r3, #0
   b631e:	6063      	str	r3, [r4, #4]
}
   b6320:	4620      	mov	r0, r4
   b6322:	bd10      	pop	{r4, pc}

000b6324 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6324:	4b05      	ldr	r3, [pc, #20]	; (b633c <_GLOBAL__sub_I_System+0x18>)
   b6326:	2202      	movs	r2, #2
   b6328:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b632a:	4b05      	ldr	r3, [pc, #20]	; (b6340 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b632c:	4a05      	ldr	r2, [pc, #20]	; (b6344 <_GLOBAL__sub_I_System+0x20>)
   b632e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6330:	2000      	movs	r0, #0
   b6332:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6336:	f7ff be79 	b.w	b602c <set_system_mode>
   b633a:	bf00      	nop
   b633c:	2003e694 	.word	0x2003e694
   b6340:	2003e688 	.word	0x2003e688
   b6344:	ffff0000 	.word	0xffff0000

000b6348 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b6348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b634c:	1e93      	subs	r3, r2, #2
{
   b634e:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b6350:	2b22      	cmp	r3, #34	; 0x22
   b6352:	f04f 0300 	mov.w	r3, #0
{
   b6356:	460d      	mov	r5, r1
   b6358:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b635a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b635e:	d927      	bls.n	b63b0 <ltoa+0x68>

      if (10 == base && N < 0L)
   b6360:	2800      	cmp	r0, #0
   b6362:	da2a      	bge.n	b63ba <ltoa+0x72>
      {
            *head++ = '-';
   b6364:	462e      	mov	r6, r5
   b6366:	232d      	movs	r3, #45	; 0x2d
   b6368:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b636c:	4240      	negs	r0, r0
   b636e:	240a      	movs	r4, #10
      *tail-- = '\0';
   b6370:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b6374:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b6378:	4622      	mov	r2, r4
   b637a:	4601      	mov	r1, r0
   b637c:	a801      	add	r0, sp, #4
   b637e:	f002 fdcc 	bl	b8f1a <ldiv>
   b6382:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b6384:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b6386:	2b09      	cmp	r3, #9
   b6388:	bfcc      	ite	gt
   b638a:	2237      	movgt	r2, #55	; 0x37
   b638c:	2230      	movle	r2, #48	; 0x30
   b638e:	fa52 f383 	uxtab	r3, r2, r3
   b6392:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b6396:	f108 0801 	add.w	r8, r8, #1
   b639a:	2800      	cmp	r0, #0
   b639c:	d1ec      	bne.n	b6378 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b639e:	4642      	mov	r2, r8
   b63a0:	1c79      	adds	r1, r7, #1
   b63a2:	4630      	mov	r0, r6
   b63a4:	f002 fdcd 	bl	b8f42 <memcpy>
      return str;
}
   b63a8:	4628      	mov	r0, r5
   b63aa:	b00c      	add	sp, #48	; 0x30
   b63ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b63b0:	2a0a      	cmp	r2, #10
   b63b2:	d0d5      	beq.n	b6360 <ltoa+0x18>
      if (uarg)
   b63b4:	b118      	cbz	r0, b63be <ltoa+0x76>
   b63b6:	462e      	mov	r6, r5
   b63b8:	e7da      	b.n	b6370 <ltoa+0x28>
   b63ba:	240a      	movs	r4, #10
   b63bc:	e7fa      	b.n	b63b4 <ltoa+0x6c>
      else  *tail-- = '0';
   b63be:	2330      	movs	r3, #48	; 0x30
   b63c0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b63c4:	462e      	mov	r6, r5
   b63c6:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b63ca:	f04f 0802 	mov.w	r8, #2
   b63ce:	e7e6      	b.n	b639e <ltoa+0x56>

000b63d0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   b63d0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b63d2:	6804      	ldr	r4, [r0, #0]
   b63d4:	6b24      	ldr	r4, [r4, #48]	; 0x30
   b63d6:	46a4      	mov	ip, r4
    }
   b63d8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   b63dc:	4760      	bx	ip

000b63de <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   b63de:	6803      	ldr	r3, [r0, #0]
   b63e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b63e2:	4718      	bx	r3

000b63e4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   b63e4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   b63e6:	4770      	bx	lr

000b63e8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   b63e8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   b63ea:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   b63ec:	1a10      	subs	r0, r2, r0
   b63ee:	4770      	bx	lr

000b63f0 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   b63f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b63f2:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   b63f4:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b63f6:	6a9f      	ldr	r7, [r3, #40]	; 0x28

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b63f8:	4b0c      	ldr	r3, [pc, #48]	; (b642c <_ZN3UDP9endPacketEv+0x3c>)
   b63fa:	9302      	str	r3, [sp, #8]
   b63fc:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   b6400:	4604      	mov	r4, r0
   b6402:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6404:	ad03      	add	r5, sp, #12
   b6406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6408:	6833      	ldr	r3, [r6, #0]
   b640a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b640c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   b640e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   b6410:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b6412:	9300      	str	r3, [sp, #0]
   b6414:	4620      	mov	r0, r4
   b6416:	ab02      	add	r3, sp, #8
   b6418:	47b8      	blx	r7
    flush(); // wait for send to complete
   b641a:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   b641c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   b641e:	69db      	ldr	r3, [r3, #28]
   b6420:	4620      	mov	r0, r4
   b6422:	4798      	blx	r3
    return result;
}
   b6424:	4628      	mov	r0, r5
   b6426:	b009      	add	sp, #36	; 0x24
   b6428:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b642a:	bf00      	nop
   b642c:	000bb43c 	.word	0x000bb43c

000b6430 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   b6430:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   b6432:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   b6434:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   b6438:	68db      	ldr	r3, [r3, #12]
   b643a:	2201      	movs	r2, #1
   b643c:	f10d 0107 	add.w	r1, sp, #7
   b6440:	4798      	blx	r3
}
   b6442:	b003      	add	sp, #12
   b6444:	f85d fb04 	ldr.w	pc, [sp], #4

000b6448 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   b6448:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   b644a:	6803      	ldr	r3, [r0, #0]
   b644c:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   b644e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   b6450:	4798      	blx	r3
   b6452:	b128      	cbz	r0, b6460 <_ZN3UDP4readEv+0x18>
   b6454:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b6456:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6458:	1c59      	adds	r1, r3, #1
   b645a:	86e1      	strh	r1, [r4, #54]	; 0x36
   b645c:	5cd0      	ldrb	r0, [r2, r3]
}
   b645e:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   b6460:	f04f 30ff 	mov.w	r0, #4294967295
   b6464:	e7fb      	b.n	b645e <_ZN3UDP4readEv+0x16>

000b6466 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   b6466:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   b6468:	6803      	ldr	r3, [r0, #0]
   b646a:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   b646c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   b646e:	4798      	blx	r3
   b6470:	b118      	cbz	r0, b647a <_ZN3UDP4peekEv+0x14>
   b6472:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b6474:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6476:	5cd0      	ldrb	r0, [r2, r3]
}
   b6478:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   b647a:	f04f 30ff 	mov.w	r0, #4294967295
   b647e:	e7fb      	b.n	b6478 <_ZN3UDP4peekEv+0x12>

000b6480 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   b6480:	4770      	bx	lr

000b6482 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   b6482:	b410      	push	{r4}
   b6484:	4603      	mov	r3, r0
   b6486:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   b6488:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   b648a:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   b648c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   b648e:	6803      	ldr	r3, [r0, #0]
   b6490:	1a52      	subs	r2, r2, r1
   b6492:	68db      	ldr	r3, [r3, #12]
   b6494:	4421      	add	r1, r4
}
   b6496:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   b649a:	4718      	bx	r3

000b649c <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   b649c:	f1a0 0010 	sub.w	r0, r0, #16
   b64a0:	f7ff bfef 	b.w	b6482 <_ZNK3UDP7printToER5Print>

000b64a4 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b64a4:	b570      	push	{r4, r5, r6, lr}
    stop();
   b64a6:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b64a8:	b08c      	sub	sp, #48	; 0x30
    stop();
   b64aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   b64ac:	4604      	mov	r4, r0
   b64ae:	460e      	mov	r6, r1
   b64b0:	4615      	mov	r5, r2
    stop();
   b64b2:	4798      	blx	r3
    const int one = 1;
   b64b4:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   b64b6:	221c      	movs	r2, #28
   b64b8:	2100      	movs	r1, #0
   b64ba:	a805      	add	r0, sp, #20
    const int one = 1;
   b64bc:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   b64be:	f002 fd4e 	bl	b8f5e <memset>
    saddr.sin6_len = sizeof(saddr);
   b64c2:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   b64c6:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   b64c8:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   b64cc:	f7ff fc96 	bl	b5dfc <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b64d0:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   b64d2:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b64d6:	2102      	movs	r1, #2
   b64d8:	200a      	movs	r0, #10
   b64da:	f7ff fd4f 	bl	b5f7c <sock_socket>
    if (_sock < 0) {
   b64de:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   b64e0:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   b64e2:	db25      	blt.n	b6530 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   b64e4:	2204      	movs	r2, #4
   b64e6:	9200      	str	r2, [sp, #0]
   b64e8:	ab02      	add	r3, sp, #8
   b64ea:	f640 71ff 	movw	r1, #4095	; 0xfff
   b64ee:	f7ff fd0d 	bl	b5f0c <sock_setsockopt>
   b64f2:	b9e8      	cbnz	r0, b6530 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   b64f4:	b195      	cbz	r5, b651c <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   b64f6:	9003      	str	r0, [sp, #12]
   b64f8:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   b64fc:	a903      	add	r1, sp, #12
   b64fe:	b2e8      	uxtb	r0, r5
   b6500:	f7ff fc04 	bl	b5d0c <if_index_to_name>
   b6504:	b9a0      	cbnz	r0, b6530 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   b6506:	2306      	movs	r3, #6
   b6508:	9300      	str	r3, [sp, #0]
   b650a:	6960      	ldr	r0, [r4, #20]
   b650c:	ab03      	add	r3, sp, #12
   b650e:	f241 020b 	movw	r2, #4107	; 0x100b
   b6512:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6516:	f7ff fcf9 	bl	b5f0c <sock_setsockopt>
   b651a:	b948      	cbnz	r0, b6530 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   b651c:	6960      	ldr	r0, [r4, #20]
   b651e:	221c      	movs	r2, #28
   b6520:	a905      	add	r1, sp, #20
   b6522:	f7ff fceb 	bl	b5efc <sock_bind>
   b6526:	b918      	cbnz	r0, b6530 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   b6528:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   b652a:	2001      	movs	r0, #1
}
   b652c:	b00c      	add	sp, #48	; 0x30
   b652e:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   b6530:	6823      	ldr	r3, [r4, #0]
   b6532:	4620      	mov	r0, r4
   b6534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6536:	4798      	blx	r3
   b6538:	2000      	movs	r0, #0
   b653a:	e7f7      	b.n	b652c <_ZN3UDP5beginEtm+0x88>

000b653c <_ZN3UDP4stopEv>:
void UDP::stop() {
   b653c:	b510      	push	{r4, lr}
   b653e:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   b6540:	6940      	ldr	r0, [r0, #20]
   b6542:	2800      	cmp	r0, #0
   b6544:	db01      	blt.n	b654a <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   b6546:	f7ff fce9 	bl	b5f1c <sock_close>
    _sock = -1;
   b654a:	f04f 33ff 	mov.w	r3, #4294967295
   b654e:	6163      	str	r3, [r4, #20]
    _offset = 0;
   b6550:	2300      	movs	r3, #0
   b6552:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b6554:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b6556:	bd10      	pop	{r4, pc}

000b6558 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   b6558:	b570      	push	{r4, r5, r6, lr}
   b655a:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b655c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b655e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   b6560:	b168      	cbz	r0, b657e <_ZN3UDP5writeEPKhj+0x26>
   b6562:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   b6564:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   b6566:	4294      	cmp	r4, r2
   b6568:	bf28      	it	cs
   b656a:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   b656c:	4622      	mov	r2, r4
   b656e:	4430      	add	r0, r6
   b6570:	f002 fce7 	bl	b8f42 <memcpy>
    _offset += size;
   b6574:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   b6576:	4423      	add	r3, r4
   b6578:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   b657a:	4620      	mov	r0, r4
   b657c:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   b657e:	4604      	mov	r4, r0
   b6580:	e7f1      	b.n	b6566 <_ZN3UDP5writeEPKhj+0xe>

000b6582 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   b6582:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   b6584:	6803      	ldr	r3, [r0, #0]
   b6586:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   b6588:	4604      	mov	r4, r0
   b658a:	460f      	mov	r7, r1
   b658c:	4616      	mov	r6, r2
    if (available()) {
   b658e:	4798      	blx	r3
   b6590:	b190      	cbz	r0, b65b8 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   b6592:	6823      	ldr	r3, [r4, #0]
   b6594:	4620      	mov	r0, r4
   b6596:	691b      	ldr	r3, [r3, #16]
   b6598:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   b659a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b659c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b659e:	4286      	cmp	r6, r0
   b65a0:	bfa8      	it	ge
   b65a2:	4606      	movge	r6, r0
   b65a4:	4419      	add	r1, r3
   b65a6:	4632      	mov	r2, r6
   b65a8:	4638      	mov	r0, r7
   b65aa:	f002 fcca 	bl	b8f42 <memcpy>
        _offset += read;
   b65ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   b65b0:	4433      	add	r3, r6
   b65b2:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   b65b4:	4630      	mov	r0, r6
   b65b6:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   b65b8:	f04f 36ff 	mov.w	r6, #4294967295
    return read;
   b65bc:	e7fa      	b.n	b65b4 <_ZN3UDP4readEPhj+0x32>

000b65be <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   b65be:	b530      	push	{r4, r5, lr}
   b65c0:	b087      	sub	sp, #28
   b65c2:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b65c4:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b65c6:	4668      	mov	r0, sp
   b65c8:	f001 f8ee 	bl	b77a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b65cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65ce:	3404      	adds	r4, #4
   b65d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65d2:	682b      	ldr	r3, [r5, #0]
   b65d4:	7023      	strb	r3, [r4, #0]
    }
   b65d6:	b007      	add	sp, #28
   b65d8:	bd30      	pop	{r4, r5, pc}
	...

000b65dc <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b65dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65de:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b65e0:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b65e2:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b65e4:	6a97      	ldr	r7, [r2, #40]	; 0x28
class IPAddress : public Printable {
   b65e6:	4a0a      	ldr	r2, [pc, #40]	; (b6610 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   b65e8:	9202      	str	r2, [sp, #8]
   b65ea:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   b65ec:	468c      	mov	ip, r1
   b65ee:	4606      	mov	r6, r0
   b65f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b65f2:	ad03      	add	r5, sp, #12
   b65f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b65f6:	6823      	ldr	r3, [r4, #0]
   b65f8:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   b65fa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   b65fe:	9300      	str	r3, [sp, #0]
   b6600:	4672      	mov	r2, lr
   b6602:	ab02      	add	r3, sp, #8
   b6604:	4661      	mov	r1, ip
   b6606:	4630      	mov	r0, r6
   b6608:	47b8      	blx	r7
    }
   b660a:	b009      	add	sp, #36	; 0x24
   b660c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b660e:	bf00      	nop
   b6610:	000bb43c 	.word	0x000bb43c

000b6614 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   b6614:	b570      	push	{r4, r5, r6, lr}
   b6616:	4604      	mov	r4, r0
   b6618:	4b05      	ldr	r3, [pc, #20]	; (b6630 <_ZN3UDP8remoteIPEv+0x1c>)
   b661a:	f844 3b04 	str.w	r3, [r4], #4
   b661e:	f101 0520 	add.w	r5, r1, #32
   b6622:	4606      	mov	r6, r0
   b6624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6628:	682b      	ldr	r3, [r5, #0]
   b662a:	7023      	strb	r3, [r4, #0]
   b662c:	4630      	mov	r0, r6
   b662e:	bd70      	pop	{r4, r5, r6, pc}
   b6630:	000bb43c 	.word	0x000bb43c

000b6634 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b6634:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   b6636:	7843      	ldrb	r3, [r0, #1]
   b6638:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   b663a:	b08d      	sub	sp, #52	; 0x34
   b663c:	4605      	mov	r5, r0
   b663e:	460c      	mov	r4, r1
   b6640:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   b6642:	d104      	bne.n	b664e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6644:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6646:	4620      	mov	r0, r4
   b6648:	f7ff ffb9 	bl	b65be <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
   b664c:	e022      	b.n	b6694 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   b664e:	2b0a      	cmp	r3, #10
   b6650:	d125      	bne.n	b669e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   b6652:	2211      	movs	r2, #17
   b6654:	2100      	movs	r1, #0
   b6656:	a801      	add	r0, sp, #4
   b6658:	f002 fc81 	bl	b8f5e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b665c:	68ab      	ldr	r3, [r5, #8]
   b665e:	b303      	cbz	r3, b66a2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6660:	f105 0308 	add.w	r3, r5, #8
   b6664:	ae01      	add	r6, sp, #4
   b6666:	f105 0c18 	add.w	ip, r5, #24
   b666a:	6818      	ldr	r0, [r3, #0]
   b666c:	6859      	ldr	r1, [r3, #4]
   b666e:	4632      	mov	r2, r6
   b6670:	c203      	stmia	r2!, {r0, r1}
   b6672:	3308      	adds	r3, #8
   b6674:	4563      	cmp	r3, ip
   b6676:	4616      	mov	r6, r2
   b6678:	d1f7      	bne.n	b666a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   b667a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b667c:	a901      	add	r1, sp, #4
   b667e:	a806      	add	r0, sp, #24
   b6680:	ae07      	add	r6, sp, #28
            a.v = 6;
   b6682:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6686:	f001 f845 	bl	b7714 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b668a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b668c:	3404      	adds	r4, #4
   b668e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6690:	6833      	ldr	r3, [r6, #0]
   b6692:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   b6694:	b11f      	cbz	r7, b669e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   b6696:	8868      	ldrh	r0, [r5, #2]
   b6698:	f7ff fba8 	bl	b5dec <inet_ntohs>
   b669c:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   b669e:	b00d      	add	sp, #52	; 0x34
   b66a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b66a2:	68eb      	ldr	r3, [r5, #12]
   b66a4:	2b00      	cmp	r3, #0
   b66a6:	d1db      	bne.n	b6660 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   b66a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b66ac:	692e      	ldr	r6, [r5, #16]
   b66ae:	f7ff fb95 	bl	b5ddc <inet_htonl>
   b66b2:	4286      	cmp	r6, r0
   b66b4:	d1d4      	bne.n	b6660 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   b66b6:	f105 0114 	add.w	r1, r5, #20
   b66ba:	e7c4      	b.n	b6646 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000b66bc <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   b66bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b66c0:	4617      	mov	r7, r2
   b66c2:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   b66c4:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   b66c6:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b66c8:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   b66ca:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b66cc:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   b66ce:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   b66d0:	f7ff faec 	bl	b5cac <netdb_getaddrinfo>
   b66d4:	1e04      	subs	r4, r0, #0
   b66d6:	db20      	blt.n	b671a <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   b66d8:	9b01      	ldr	r3, [sp, #4]
   b66da:	b32b      	cbz	r3, b6728 <_ZN3UDP11beginPacketEPKct+0x6c>
   b66dc:	695b      	ldr	r3, [r3, #20]
   b66de:	b31b      	cbz	r3, b6728 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   b66e0:	a802      	add	r0, sp, #8
   b66e2:	f001 f809 	bl	b76f8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b66e6:	9b01      	ldr	r3, [sp, #4]
   b66e8:	2200      	movs	r2, #0
   b66ea:	6958      	ldr	r0, [r3, #20]
   b66ec:	a902      	add	r1, sp, #8
   b66ee:	f7ff ffa1 	bl	b6634 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   b66f2:	a802      	add	r0, sp, #8
   b66f4:	f001 f828 	bl	b7748 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b66f8:	b1b0      	cbz	r0, b6728 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   b66fa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b66fc:	ad03      	add	r5, sp, #12
   b66fe:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   b6702:	4b0b      	ldr	r3, [pc, #44]	; (b6730 <_ZN3UDP11beginPacketEPKct+0x74>)
   b6704:	9308      	str	r3, [sp, #32]
   b6706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6708:	ac09      	add	r4, sp, #36	; 0x24
   b670a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b670c:	682b      	ldr	r3, [r5, #0]
   b670e:	7023      	strb	r3, [r4, #0]
   b6710:	463a      	mov	r2, r7
   b6712:	a908      	add	r1, sp, #32
   b6714:	4630      	mov	r0, r6
   b6716:	47c0      	blx	r8
   b6718:	4604      	mov	r4, r0
    SCOPE_GUARD({
   b671a:	9801      	ldr	r0, [sp, #4]
   b671c:	f7ff fabe 	bl	b5c9c <netdb_freeaddrinfo>
}
   b6720:	4620      	mov	r0, r4
   b6722:	b00e      	add	sp, #56	; 0x38
   b6724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   b6728:	f04f 34ff 	mov.w	r4, #4294967295
   b672c:	e7f5      	b.n	b671a <_ZN3UDP11beginPacketEPKct+0x5e>
   b672e:	bf00      	nop
   b6730:	000bb43c 	.word	0x000bb43c

000b6734 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b6734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   b6738:	f8d0 9014 	ldr.w	r9, [r0, #20]
   b673c:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   b6740:	b090      	sub	sp, #64	; 0x40
   b6742:	4605      	mov	r5, r0
   b6744:	460e      	mov	r6, r1
   b6746:	4690      	mov	r8, r2
   b6748:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   b674a:	db3c      	blt.n	b67c6 <_ZN3UDP13receivePacketEPhjm+0x92>
   b674c:	2900      	cmp	r1, #0
   b674e:	d03a      	beq.n	b67c6 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   b6750:	f04f 0a1c 	mov.w	sl, #28
   b6754:	af09      	add	r7, sp, #36	; 0x24
   b6756:	4652      	mov	r2, sl
   b6758:	2100      	movs	r1, #0
   b675a:	4638      	mov	r0, r7
   b675c:	f002 fbff 	bl	b8f5e <memset>
        socklen_t slen = sizeof(saddr);
   b6760:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   b6764:	b1dc      	cbz	r4, b679e <_ZN3UDP13receivePacketEPhjm+0x6a>
            tv.tv_sec = timeout / 1000;
   b6766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b676a:	fbb4 f2f3 	udiv	r2, r4, r3
            tv.tv_usec = (timeout % 1000) * 1000;
   b676e:	fb03 4412 	mls	r4, r3, r2, r4
            struct timeval tv = {};
   b6772:	2100      	movs	r1, #0
            tv.tv_usec = (timeout % 1000) * 1000;
   b6774:	435c      	muls	r4, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b6776:	2310      	movs	r3, #16
            tv.tv_sec = timeout / 1000;
   b6778:	e9cd 2104 	strd	r2, r1, [sp, #16]
            struct timeval tv = {};
   b677c:	9107      	str	r1, [sp, #28]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b677e:	9300      	str	r3, [sp, #0]
   b6780:	f241 0206 	movw	r2, #4102	; 0x1006
   b6784:	446b      	add	r3, sp
   b6786:	f640 71ff 	movw	r1, #4095	; 0xfff
   b678a:	4648      	mov	r0, r9
            tv.tv_usec = (timeout % 1000) * 1000;
   b678c:	9406      	str	r4, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   b678e:	f7ff fbbd 	bl	b5f0c <sock_setsockopt>
            if (ret) {
   b6792:	4604      	mov	r4, r0
   b6794:	b120      	cbz	r0, b67a0 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   b6796:	4620      	mov	r0, r4
   b6798:	b010      	add	sp, #64	; 0x40
   b679a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   b679e:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   b67a0:	ab03      	add	r3, sp, #12
   b67a2:	e9cd 7300 	strd	r7, r3, [sp]
   b67a6:	6968      	ldr	r0, [r5, #20]
   b67a8:	4623      	mov	r3, r4
   b67aa:	4642      	mov	r2, r8
   b67ac:	4631      	mov	r1, r6
   b67ae:	f7ff fbcd 	bl	b5f4c <sock_recvfrom>
        if (ret >= 0) {
   b67b2:	1e04      	subs	r4, r0, #0
   b67b4:	dbef      	blt.n	b6796 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   b67b6:	f105 0234 	add.w	r2, r5, #52	; 0x34
   b67ba:	f105 011c 	add.w	r1, r5, #28
   b67be:	4638      	mov	r0, r7
   b67c0:	f7ff ff38 	bl	b6634 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   b67c4:	e7e7      	b.n	b6796 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   b67c6:	f04f 34ff 	mov.w	r4, #4294967295
   b67ca:	e7e4      	b.n	b6796 <_ZN3UDP13receivePacketEPhjm+0x62>

000b67cc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b67cc:	b538      	push	{r3, r4, r5, lr}
   b67ce:	4605      	mov	r5, r0
   b67d0:	4614      	mov	r4, r2

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b67d2:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   b67d4:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   b67d6:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   b67d8:	d110      	bne.n	b67fc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   b67da:	f640 231c 	movw	r3, #2588	; 0xa1c
   b67de:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   b67e0:	f7ff fb0c 	bl	b5dfc <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b67e4:	3408      	adds	r4, #8
   b67e6:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   b67e8:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   b67ec:	3514      	adds	r5, #20
   b67ee:	f853 2b04 	ldr.w	r2, [r3], #4
   b67f2:	f844 2b04 	str.w	r2, [r4], #4
   b67f6:	42ab      	cmp	r3, r5
   b67f8:	d1f9      	bne.n	b67ee <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   b67fa:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   b67fc:	2b04      	cmp	r3, #4
   b67fe:	d1fc      	bne.n	b67fa <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   b6800:	f44f 7304 	mov.w	r3, #528	; 0x210
   b6804:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   b6806:	f7ff faf9 	bl	b5dfc <inet_htons>
   b680a:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   b680c:	6868      	ldr	r0, [r5, #4]
   b680e:	f7ff fae5 	bl	b5ddc <inet_htonl>
   b6812:	6060      	str	r0, [r4, #4]
}
   b6814:	e7f1      	b.n	b67fa <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000b6816 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b6816:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b681a:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   b681c:	af03      	add	r7, sp, #12
   b681e:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   b6822:	4698      	mov	r8, r3
   b6824:	4604      	mov	r4, r0
   b6826:	460d      	mov	r5, r1
   b6828:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   b682a:	2100      	movs	r1, #0
   b682c:	464a      	mov	r2, r9
   b682e:	4638      	mov	r0, r7
   b6830:	f002 fb95 	bl	b8f5e <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   b6834:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   b6838:	463a      	mov	r2, r7
   b683a:	4640      	mov	r0, r8
   b683c:	f7ff ffc6 	bl	b67cc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   b6840:	f89d 300d 	ldrb.w	r3, [sp, #13]
   b6844:	b153      	cbz	r3, b685c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   b6846:	e9cd 7900 	strd	r7, r9, [sp]
   b684a:	6960      	ldr	r0, [r4, #20]
   b684c:	2300      	movs	r3, #0
   b684e:	4632      	mov	r2, r6
   b6850:	4629      	mov	r1, r5
   b6852:	f7ff fb8b 	bl	b5f6c <sock_sendto>
}
   b6856:	b00b      	add	sp, #44	; 0x2c
   b6858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   b685c:	f04f 30ff 	mov.w	r0, #4294967295
   b6860:	e7f9      	b.n	b6856 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>

000b6862 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>:
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b6862:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6864:	b091      	sub	sp, #68	; 0x44
   b6866:	460c      	mov	r4, r1
   b6868:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   b686a:	2100      	movs	r1, #0
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b686c:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   b686e:	a809      	add	r0, sp, #36	; 0x24
   b6870:	221c      	movs	r2, #28
int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   b6872:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   b6874:	f002 fb73 	bl	b8f5e <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   b6878:	aa09      	add	r2, sp, #36	; 0x24
   b687a:	2100      	movs	r1, #0
   b687c:	4620      	mov	r0, r4
   b687e:	f7ff ffa5 	bl	b67cc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   b6882:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b6886:	2b02      	cmp	r3, #2
   b6888:	d12d      	bne.n	b68e6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x84>
        struct ip_mreq mreq = {};
   b688a:	2300      	movs	r3, #0
   b688c:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   b688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6890:	9304      	str	r3, [sp, #16]
        if (ifindex != 0) {
   b6892:	b1bd      	cbz	r5, b68c4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
            if (!if_get_by_index(ifindex, &iface)) {
   b6894:	a902      	add	r1, sp, #8
   b6896:	4628      	mov	r0, r5
   b6898:	f7ff fa40 	bl	b5d1c <if_get_by_index>
   b689c:	b990      	cbnz	r0, b68c4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x62>
                struct if_addrs* addrs = nullptr;
   b689e:	9003      	str	r0, [sp, #12]
                if (!if_get_addrs(iface, &addrs)) {
   b68a0:	a903      	add	r1, sp, #12
   b68a2:	9802      	ldr	r0, [sp, #8]
   b68a4:	f7ff fa42 	bl	b5d2c <if_get_addrs>
   b68a8:	b948      	cbnz	r0, b68be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b68aa:	9b03      	ldr	r3, [sp, #12]
   b68ac:	b13b      	cbz	r3, b68be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x5c>
                        auto ifaddr = a->if_addr->addr;
   b68ae:	68da      	ldr	r2, [r3, #12]
   b68b0:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   b68b2:	7851      	ldrb	r1, [r2, #1]
   b68b4:	2902      	cmp	r1, #2
   b68b6:	d114      	bne.n	b68e2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   b68b8:	6852      	ldr	r2, [r2, #4]
   b68ba:	b192      	cbz	r2, b68e2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x80>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   b68bc:	9205      	str	r2, [sp, #20]
                SCOPE_GUARD({
   b68be:	9803      	ldr	r0, [sp, #12]
   b68c0:	f7ff fa3c 	bl	b5d3c <if_free_if_addrs>
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   b68c4:	2f00      	cmp	r7, #0
   b68c6:	f04f 0308 	mov.w	r3, #8
   b68ca:	9300      	str	r3, [sp, #0]
   b68cc:	bf18      	it	ne
   b68ce:	2203      	movne	r2, #3
   b68d0:	ab04      	add	r3, sp, #16
   b68d2:	bf08      	it	eq
   b68d4:	2204      	moveq	r2, #4
   b68d6:	2100      	movs	r1, #0
   b68d8:	4630      	mov	r0, r6
   b68da:	f7ff fb17 	bl	b5f0c <sock_setsockopt>
}
   b68de:	b011      	add	sp, #68	; 0x44
   b68e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    for (auto a = addrs; a != nullptr; a = a->next) {
   b68e2:	681b      	ldr	r3, [r3, #0]
   b68e4:	e7e2      	b.n	b68ac <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x4a>
    } else if (s.ss_family == AF_INET6) {
   b68e6:	2b0a      	cmp	r3, #10
   b68e8:	d115      	bne.n	b6916 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0xb4>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   b68ea:	ab0b      	add	r3, sp, #44	; 0x2c
   b68ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b68ee:	ac04      	add	r4, sp, #16
   b68f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b68f4:	2f00      	cmp	r7, #0
   b68f6:	f04f 0314 	mov.w	r3, #20
   b68fa:	9300      	str	r3, [sp, #0]
   b68fc:	bf18      	it	ne
   b68fe:	220c      	movne	r2, #12
   b6900:	4623      	mov	r3, r4
   b6902:	bf08      	it	eq
   b6904:	220d      	moveq	r2, #13
   b6906:	2129      	movs	r1, #41	; 0x29
   b6908:	4630      	mov	r0, r6
        mreq.ipv6mr_interface = ifindex;
   b690a:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   b690c:	f7ff fafe 	bl	b5f0c <sock_setsockopt>
   b6910:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6914:	e7e3      	b.n	b68de <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>
    return -1;
   b6916:	f04f 30ff 	mov.w	r0, #4294967295
   b691a:	e7e0      	b.n	b68de <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb+0x7c>

000b691c <_ZN3UDPC1Ev>:
UDP::UDP()
   b691c:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b691e:	2500      	movs	r5, #0
   b6920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6924:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   b6928:	4b0b      	ldr	r3, [pc, #44]	; (b6958 <_ZN3UDPC1Ev+0x3c>)
   b692a:	f103 0208 	add.w	r2, r3, #8
   b692e:	336c      	adds	r3, #108	; 0x6c
   b6930:	6103      	str	r3, [r0, #16]
   b6932:	f04f 33ff 	mov.w	r3, #4294967295
UDP::UDP()
   b6936:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   b6938:	6002      	str	r2, [r0, #0]
   b693a:	6143      	str	r3, [r0, #20]
   b693c:	301c      	adds	r0, #28
   b693e:	f000 fedb 	bl	b76f8 <_ZN9IPAddressC1Ev>
   b6942:	f44f 7300 	mov.w	r3, #512	; 0x200
   b6946:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   b694a:	86e5      	strh	r5, [r4, #54]	; 0x36
   b694c:	8725      	strh	r5, [r4, #56]	; 0x38
   b694e:	63e5      	str	r5, [r4, #60]	; 0x3c
   b6950:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   b6954:	4620      	mov	r0, r4
   b6956:	bd38      	pop	{r3, r4, r5, pc}
   b6958:	000bb368 	.word	0x000bb368

000b695c <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   b695c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   b695e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   b6962:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   b6964:	b123      	cbz	r3, b6970 <_ZN3UDP13releaseBufferEv+0x14>
   b6966:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b6968:	b110      	cbz	r0, b6970 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   b696a:	2101      	movs	r1, #1
   b696c:	f7fd fb99 	bl	b40a2 <_ZdlPvj>
    _buffer = NULL;
   b6970:	2300      	movs	r3, #0
   b6972:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   b6974:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   b6978:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   b697a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   b697c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   b697e:	bd10      	pop	{r4, pc}

000b6980 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   b6980:	b570      	push	{r4, r5, r6, lr}
   b6982:	4604      	mov	r4, r0
   b6984:	4616      	mov	r6, r2
   b6986:	460d      	mov	r5, r1
    releaseBuffer();
   b6988:	f7ff ffe8 	bl	b695c <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   b698c:	2300      	movs	r3, #0
    _buffer = buffer;
   b698e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   b6990:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   b6992:	b12e      	cbz	r6, b69a0 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   b6994:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   b6996:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   b6998:	3800      	subs	r0, #0
   b699a:	bf18      	it	ne
   b699c:	2001      	movne	r0, #1
   b699e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   b69a0:	2d00      	cmp	r5, #0
   b69a2:	d0f8      	beq.n	b6996 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   b69a4:	4628      	mov	r0, r5
   b69a6:	f7fd fb78 	bl	b409a <_Znaj>
        _buffer_allocated = true;
   b69aa:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   b69ac:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   b69ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   b69b2:	2800      	cmp	r0, #0
   b69b4:	d0ef      	beq.n	b6996 <_ZN3UDP9setBufferEjPh+0x16>
   b69b6:	e7ed      	b.n	b6994 <_ZN3UDP9setBufferEjPh+0x14>

000b69b8 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b69b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b69ba:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   b69bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   b69be:	4605      	mov	r5, r0
   b69c0:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   b69c2:	b91a      	cbnz	r2, b69cc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   b69c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b69c6:	b109      	cbz	r1, b69cc <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   b69c8:	f7ff ffda 	bl	b6980 <_ZN3UDP9setBufferEjPh>
class IPAddress : public Printable {
   b69cc:	3404      	adds	r4, #4
   b69ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b69d0:	f105 0620 	add.w	r6, r5, #32
   b69d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b69d6:	6823      	ldr	r3, [r4, #0]
   b69d8:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   b69da:	2300      	movs	r3, #0
}
   b69dc:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   b69de:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   b69e0:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   b69e2:	872b      	strh	r3, [r5, #56]	; 0x38
}
   b69e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b69e6 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   b69e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   b69e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   b69ea:	4604      	mov	r4, r0
   b69ec:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   b69ee:	b92a      	cbnz	r2, b69fc <_ZN3UDP11parsePacketEm+0x16>
   b69f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   b69f2:	b119      	cbz	r1, b69fc <_ZN3UDP11parsePacketEm+0x16>
   b69f4:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   b69f6:	f7ff ffc3 	bl	b6980 <_ZN3UDP9setBufferEjPh>
   b69fa:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   b69fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   b69fe:	2200      	movs	r2, #0
   b6a00:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   b6a02:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   b6a04:	b141      	cbz	r1, b6a18 <_ZN3UDP11parsePacketEm+0x32>
   b6a06:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b6a08:	b132      	cbz	r2, b6a18 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   b6a0a:	6820      	ldr	r0, [r4, #0]
   b6a0c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   b6a0e:	4620      	mov	r0, r4
   b6a10:	47a8      	blx	r5
        if (result > 0) {
   b6a12:	2800      	cmp	r0, #0
            _total = result;
   b6a14:	bfc8      	it	gt
   b6a16:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   b6a18:	6823      	ldr	r3, [r4, #0]
   b6a1a:	691b      	ldr	r3, [r3, #16]
   b6a1c:	4620      	mov	r0, r4
}
   b6a1e:	b003      	add	sp, #12
   b6a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   b6a24:	4718      	bx	r3
	...

000b6a28 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   b6a28:	b510      	push	{r4, lr}
   b6a2a:	4b07      	ldr	r3, [pc, #28]	; (b6a48 <_ZN3UDPD1Ev+0x20>)
   b6a2c:	f103 0208 	add.w	r2, r3, #8
   b6a30:	336c      	adds	r3, #108	; 0x6c
   b6a32:	4604      	mov	r4, r0
   b6a34:	6002      	str	r2, [r0, #0]
   b6a36:	6103      	str	r3, [r0, #16]
   b6a38:	f7ff fd80 	bl	b653c <_ZN3UDP4stopEv>
   b6a3c:	4620      	mov	r0, r4
   b6a3e:	f7ff ff8d 	bl	b695c <_ZN3UDP13releaseBufferEv>
   b6a42:	4620      	mov	r0, r4
   b6a44:	bd10      	pop	{r4, pc}
   b6a46:	bf00      	nop
   b6a48:	000bb368 	.word	0x000bb368

000b6a4c <_ZN3UDPD0Ev>:
   b6a4c:	b510      	push	{r4, lr}
   b6a4e:	4604      	mov	r4, r0
   b6a50:	f7ff ffea 	bl	b6a28 <_ZN3UDPD1Ev>
   b6a54:	4620      	mov	r0, r4
   b6a56:	214c      	movs	r1, #76	; 0x4c
   b6a58:	f7fd fb23 	bl	b40a2 <_ZdlPvj>
   b6a5c:	4620      	mov	r0, r4
   b6a5e:	bd10      	pop	{r4, pc}

000b6a60 <_ZN3UDP13joinMulticastERK9IPAddress>:

int UDP::joinMulticast(const IPAddress& ip) {
   b6a60:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b6a62:	6944      	ldr	r4, [r0, #20]
   b6a64:	2c00      	cmp	r4, #0
   b6a66:	db07      	blt.n	b6a78 <_ZN3UDP13joinMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b6a68:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b6a6c:	2301      	movs	r3, #1
   b6a6e:	4620      	mov	r0, r4
}
   b6a70:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, true);
   b6a74:	f7ff bef5 	b.w	b6862 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b6a78:	f04f 30ff 	mov.w	r0, #4294967295
   b6a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6a80:	4770      	bx	lr

000b6a82 <_ZN3UDP14leaveMulticastERK9IPAddress>:

int UDP::leaveMulticast(const IPAddress& ip) {
   b6a82:	b410      	push	{r4}
    if (!isOpen(_sock)) {
   b6a84:	6944      	ldr	r4, [r0, #20]
   b6a86:	2c00      	cmp	r4, #0
   b6a88:	db07      	blt.n	b6a9a <_ZN3UDP14leaveMulticastERK9IPAddress+0x18>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b6a8a:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   b6a8e:	2300      	movs	r3, #0
   b6a90:	4620      	mov	r0, r4
}
   b6a92:	f85d 4b04 	ldr.w	r4, [sp], #4
    return joinLeaveMulticast(_sock, ip, _nif, false);
   b6a96:	f7ff bee4 	b.w	b6862 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb>
}
   b6a9a:	f04f 30ff 	mov.w	r0, #4294967295
   b6a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6aa2:	4770      	bx	lr

000b6aa4 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   b6aa4:	4770      	bx	lr

000b6aa6 <_ZN21StringPrintableHelperD0Ev>:
   b6aa6:	b510      	push	{r4, lr}
   b6aa8:	210c      	movs	r1, #12
   b6aaa:	4604      	mov	r4, r0
   b6aac:	f7fd faf9 	bl	b40a2 <_ZdlPvj>
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	bd10      	pop	{r4, pc}

000b6ab4 <_ZN6StringD1Ev>:
String::~String()
   b6ab4:	b510      	push	{r4, lr}
   b6ab6:	4604      	mov	r4, r0
	free(buffer);
   b6ab8:	6800      	ldr	r0, [r0, #0]
   b6aba:	f7ff fb93 	bl	b61e4 <free>
}
   b6abe:	4620      	mov	r0, r4
   b6ac0:	bd10      	pop	{r4, pc}

000b6ac2 <_ZN6String10invalidateEv>:
{
   b6ac2:	b510      	push	{r4, lr}
   b6ac4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6ac6:	6800      	ldr	r0, [r0, #0]
   b6ac8:	b108      	cbz	r0, b6ace <_ZN6String10invalidateEv+0xc>
   b6aca:	f7ff fb8b 	bl	b61e4 <free>
	buffer = NULL;
   b6ace:	2300      	movs	r3, #0
	capacity = len = 0;
   b6ad0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6ad4:	6023      	str	r3, [r4, #0]
}
   b6ad6:	bd10      	pop	{r4, pc}

000b6ad8 <_ZN6String12changeBufferEj>:
{
   b6ad8:	b538      	push	{r3, r4, r5, lr}
   b6ada:	4604      	mov	r4, r0
   b6adc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6ade:	6800      	ldr	r0, [r0, #0]
   b6ae0:	3101      	adds	r1, #1
   b6ae2:	f7ff fb87 	bl	b61f4 <realloc>
	if (newbuffer) {
   b6ae6:	b110      	cbz	r0, b6aee <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   b6ae8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6aec:	2001      	movs	r0, #1
}
   b6aee:	bd38      	pop	{r3, r4, r5, pc}

000b6af0 <_ZN6String7reserveEj>:
{
   b6af0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6af2:	6803      	ldr	r3, [r0, #0]
{
   b6af4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6af6:	b123      	cbz	r3, b6b02 <_ZN6String7reserveEj+0x12>
   b6af8:	6843      	ldr	r3, [r0, #4]
   b6afa:	428b      	cmp	r3, r1
   b6afc:	d301      	bcc.n	b6b02 <_ZN6String7reserveEj+0x12>
   b6afe:	2001      	movs	r0, #1
}
   b6b00:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6b02:	4620      	mov	r0, r4
   b6b04:	f7ff ffe8 	bl	b6ad8 <_ZN6String12changeBufferEj>
   b6b08:	2800      	cmp	r0, #0
   b6b0a:	d0f9      	beq.n	b6b00 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6b0c:	68a3      	ldr	r3, [r4, #8]
   b6b0e:	2b00      	cmp	r3, #0
   b6b10:	d1f5      	bne.n	b6afe <_ZN6String7reserveEj+0xe>
   b6b12:	6822      	ldr	r2, [r4, #0]
   b6b14:	7013      	strb	r3, [r2, #0]
   b6b16:	e7f2      	b.n	b6afe <_ZN6String7reserveEj+0xe>

000b6b18 <_ZN6String4copyEPKcj>:
{
   b6b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b1a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6b1c:	4611      	mov	r1, r2
   b6b1e:	9201      	str	r2, [sp, #4]
{
   b6b20:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6b22:	f7ff ffe5 	bl	b6af0 <_ZN6String7reserveEj>
   b6b26:	9a01      	ldr	r2, [sp, #4]
   b6b28:	b928      	cbnz	r0, b6b36 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6b2a:	4620      	mov	r0, r4
   b6b2c:	f7ff ffc9 	bl	b6ac2 <_ZN6String10invalidateEv>
}
   b6b30:	4620      	mov	r0, r4
   b6b32:	b003      	add	sp, #12
   b6b34:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6b36:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6b38:	4629      	mov	r1, r5
   b6b3a:	6820      	ldr	r0, [r4, #0]
   b6b3c:	f002 fa01 	bl	b8f42 <memcpy>
	buffer[len] = 0;
   b6b40:	6822      	ldr	r2, [r4, #0]
   b6b42:	68a3      	ldr	r3, [r4, #8]
   b6b44:	2100      	movs	r1, #0
   b6b46:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6b48:	e7f2      	b.n	b6b30 <_ZN6String4copyEPKcj+0x18>

000b6b4a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6b4a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6b4c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6b4e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6b52:	4604      	mov	r4, r0
	len = 0;
   b6b54:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6b56:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6b58:	b141      	cbz	r1, b6b6c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6b5a:	4608      	mov	r0, r1
   b6b5c:	9101      	str	r1, [sp, #4]
   b6b5e:	f002 fa74 	bl	b904a <strlen>
   b6b62:	9901      	ldr	r1, [sp, #4]
   b6b64:	4602      	mov	r2, r0
   b6b66:	4620      	mov	r0, r4
   b6b68:	f7ff ffd6 	bl	b6b18 <_ZN6String4copyEPKcj>
}
   b6b6c:	4620      	mov	r0, r4
   b6b6e:	b002      	add	sp, #8
   b6b70:	bd10      	pop	{r4, pc}

000b6b72 <_ZN6StringaSEPKc>:
{
   b6b72:	b513      	push	{r0, r1, r4, lr}
   b6b74:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6b76:	b159      	cbz	r1, b6b90 <_ZN6StringaSEPKc+0x1e>
   b6b78:	4608      	mov	r0, r1
   b6b7a:	9101      	str	r1, [sp, #4]
   b6b7c:	f002 fa65 	bl	b904a <strlen>
   b6b80:	9901      	ldr	r1, [sp, #4]
   b6b82:	4602      	mov	r2, r0
   b6b84:	4620      	mov	r0, r4
   b6b86:	f7ff ffc7 	bl	b6b18 <_ZN6String4copyEPKcj>
}
   b6b8a:	4620      	mov	r0, r4
   b6b8c:	b002      	add	sp, #8
   b6b8e:	bd10      	pop	{r4, pc}
	else invalidate();
   b6b90:	f7ff ff97 	bl	b6ac2 <_ZN6String10invalidateEv>
   b6b94:	e7f9      	b.n	b6b8a <_ZN6StringaSEPKc+0x18>

000b6b96 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b6b96:	b510      	push	{r4, lr}
   b6b98:	4604      	mov	r4, r0
   b6b9a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6b9c:	2300      	movs	r3, #0
	capacity = 0;
   b6b9e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6ba2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6ba4:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b6ba6:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b6ba8:	a901      	add	r1, sp, #4
   b6baa:	f7ff fbcd 	bl	b6348 <ltoa>
	*this = buf;
   b6bae:	a901      	add	r1, sp, #4
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	f7ff ffde 	bl	b6b72 <_ZN6StringaSEPKc>
}
   b6bb6:	4620      	mov	r0, r4
   b6bb8:	b00a      	add	sp, #40	; 0x28
   b6bba:	bd10      	pop	{r4, pc}

000b6bbc <_ZN6String6concatEPKcj>:
{
   b6bbc:	b570      	push	{r4, r5, r6, lr}
   b6bbe:	4605      	mov	r5, r0
	if (!cstr) return 0;
   b6bc0:	460e      	mov	r6, r1
   b6bc2:	b909      	cbnz	r1, b6bc8 <_ZN6String6concatEPKcj+0xc>
   b6bc4:	2000      	movs	r0, #0
}
   b6bc6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6bc8:	b16a      	cbz	r2, b6be6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6bca:	6884      	ldr	r4, [r0, #8]
   b6bcc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6bce:	4621      	mov	r1, r4
   b6bd0:	f7ff ff8e 	bl	b6af0 <_ZN6String7reserveEj>
   b6bd4:	2800      	cmp	r0, #0
   b6bd6:	d0f5      	beq.n	b6bc4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6bd8:	6828      	ldr	r0, [r5, #0]
   b6bda:	68ab      	ldr	r3, [r5, #8]
   b6bdc:	4631      	mov	r1, r6
   b6bde:	4418      	add	r0, r3
   b6be0:	f002 fa0d 	bl	b8ffe <strcpy>
	len = newlen;
   b6be4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6be6:	2001      	movs	r0, #1
   b6be8:	e7ed      	b.n	b6bc6 <_ZN6String6concatEPKcj+0xa>

000b6bea <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b6bea:	688a      	ldr	r2, [r1, #8]
   b6bec:	6809      	ldr	r1, [r1, #0]
   b6bee:	f7ff bfe5 	b.w	b6bbc <_ZN6String6concatEPKcj>

000b6bf2 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   b6bf2:	b538      	push	{r3, r4, r5, lr}
   b6bf4:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   b6bf6:	6880      	ldr	r0, [r0, #8]
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b6bf8:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   b6bfa:	f7ff ffdf 	bl	b6bbc <_ZN6String6concatEPKcj>
   b6bfe:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   b6c00:	6898      	ldr	r0, [r3, #8]
    }
   b6c02:	1b40      	subs	r0, r0, r5
   b6c04:	bd38      	pop	{r3, r4, r5, pc}

000b6c06 <_ZN6String6concatEc>:
{
   b6c06:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   b6c08:	2300      	movs	r3, #0
	buf[0] = c;
   b6c0a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6c0e:	2201      	movs	r2, #1
   b6c10:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6c12:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6c16:	f7ff ffd1 	bl	b6bbc <_ZN6String6concatEPKcj>
}
   b6c1a:	b003      	add	sp, #12
   b6c1c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6c20 <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   b6c20:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   b6c22:	6880      	ldr	r0, [r0, #8]
   b6c24:	f7ff ffef 	bl	b6c06 <_ZN6String6concatEc>
    }
   b6c28:	bd08      	pop	{r3, pc}

000b6c2a <_ZplRK15StringSumHelperRK6String>:
{
   b6c2a:	b510      	push	{r4, lr}
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6c2c:	688a      	ldr	r2, [r1, #8]
   b6c2e:	6809      	ldr	r1, [r1, #0]
{
   b6c30:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6c32:	f7ff ffc3 	bl	b6bbc <_ZN6String6concatEPKcj>
   b6c36:	b910      	cbnz	r0, b6c3e <_ZplRK15StringSumHelperRK6String+0x14>
   b6c38:	4620      	mov	r0, r4
   b6c3a:	f7ff ff42 	bl	b6ac2 <_ZN6String10invalidateEv>
}
   b6c3e:	4620      	mov	r0, r4
   b6c40:	bd10      	pop	{r4, pc}
	...

000b6c44 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   b6c44:	b530      	push	{r4, r5, lr}
   b6c46:	b085      	sub	sp, #20
	buffer = NULL;
   b6c48:	2300      	movs	r3, #0
String::String(const Printable& printable)
   b6c4a:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b6c4c:	9302      	str	r3, [sp, #8]
	capacity = 0;
   b6c4e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6c52:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c54:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   b6c56:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   b6c58:	4b06      	ldr	r3, [pc, #24]	; (b6c74 <_ZN6StringC1ERK9Printable+0x30>)
   b6c5a:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   b6c5c:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   b6c5e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   b6c60:	f7ff ff46 	bl	b6af0 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   b6c64:	682b      	ldr	r3, [r5, #0]
   b6c66:	a901      	add	r1, sp, #4
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	4628      	mov	r0, r5
   b6c6c:	4798      	blx	r3
}
   b6c6e:	4620      	mov	r0, r4
   b6c70:	b005      	add	sp, #20
   b6c72:	bd30      	pop	{r4, r5, pc}
   b6c74:	000bb3e0 	.word	0x000bb3e0

000b6c78 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
   b6c78:	b40e      	push	{r1, r2, r3}
   b6c7a:	b570      	push	{r4, r5, r6, lr}
   b6c7c:	b087      	sub	sp, #28
   b6c7e:	ad0b      	add	r5, sp, #44	; 0x2c
   b6c80:	4604      	mov	r4, r0
   b6c82:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6c86:	9201      	str	r2, [sp, #4]
   b6c88:	462b      	mov	r3, r5
   b6c8a:	2105      	movs	r1, #5
   b6c8c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6c8e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6c90:	f7ff fac8 	bl	b6224 <vsnprintf>
    va_end(marker);

    String result;
   b6c94:	490b      	ldr	r1, [pc, #44]	; (b6cc4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6c96:	4606      	mov	r6, r0
    String result;
   b6c98:	4620      	mov	r0, r4
   b6c9a:	f7ff ff56 	bl	b6b4a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b6c9e:	4631      	mov	r1, r6
   b6ca0:	4620      	mov	r0, r4
   b6ca2:	f7ff ff25 	bl	b6af0 <_ZN6String7reserveEj>
    if (result.buffer) {
   b6ca6:	6820      	ldr	r0, [r4, #0]
   b6ca8:	b130      	cbz	r0, b6cb8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6caa:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b6cac:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6cae:	462b      	mov	r3, r5
   b6cb0:	1c71      	adds	r1, r6, #1
   b6cb2:	f7ff fab7 	bl	b6224 <vsnprintf>
        va_end(marker);
        result.len = n;
   b6cb6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6cb8:	4620      	mov	r0, r4
   b6cba:	b007      	add	sp, #28
   b6cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6cc0:	b003      	add	sp, #12
   b6cc2:	4770      	bx	lr
   b6cc4:	000bb164 	.word	0x000bb164

000b6cc8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b6cc8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b6cca:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6ccc:	4604      	mov	r4, r0
      if (_M_manager)
   b6cce:	b113      	cbz	r3, b6cd6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6cd0:	2203      	movs	r2, #3
   b6cd2:	4601      	mov	r1, r0
   b6cd4:	4798      	blx	r3
    }
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	bd10      	pop	{r4, pc}

000b6cda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6cda:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6cdc:	6843      	ldr	r3, [r0, #4]
   b6cde:	3b01      	subs	r3, #1
    {
   b6ce0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6ce2:	6043      	str	r3, [r0, #4]
   b6ce4:	b963      	cbnz	r3, b6d00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6ce6:	6803      	ldr	r3, [r0, #0]
   b6ce8:	689b      	ldr	r3, [r3, #8]
   b6cea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6cec:	68a3      	ldr	r3, [r4, #8]
   b6cee:	3b01      	subs	r3, #1
   b6cf0:	60a3      	str	r3, [r4, #8]
   b6cf2:	b92b      	cbnz	r3, b6d00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6cf4:	6823      	ldr	r3, [r4, #0]
   b6cf6:	4620      	mov	r0, r4
   b6cf8:	68db      	ldr	r3, [r3, #12]
    }
   b6cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6cfe:	4718      	bx	r3
    }
   b6d00:	bd10      	pop	{r4, pc}

000b6d02 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6d02:	b513      	push	{r0, r1, r4, lr}
   b6d04:	460b      	mov	r3, r1
   b6d06:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6d08:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6d0c:	466c      	mov	r4, sp
   b6d0e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6d12:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6d16:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6d1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6d22:	b002      	add	sp, #8
   b6d24:	bd10      	pop	{r4, pc}
	...

000b6d28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6d28:	4802      	ldr	r0, [pc, #8]	; (b6d34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6d2a:	2300      	movs	r3, #0
   b6d2c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6d2e:	f7ff b845 	b.w	b5dbc <os_mutex_recursive_create>
   b6d32:	bf00      	nop
   b6d34:	2003e698 	.word	0x2003e698

000b6d38 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d3a:	4606      	mov	r6, r0
   b6d3c:	460d      	mov	r5, r1
  size_t n = 0;
   b6d3e:	188f      	adds	r7, r1, r2
   b6d40:	2400      	movs	r4, #0
  while (size--) {
   b6d42:	42bd      	cmp	r5, r7
   b6d44:	d00c      	beq.n	b6d60 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6d46:	6833      	ldr	r3, [r6, #0]
   b6d48:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6d4c:	689b      	ldr	r3, [r3, #8]
   b6d4e:	4630      	mov	r0, r6
   b6d50:	4798      	blx	r3
     if (chunk>=0)
   b6d52:	1e03      	subs	r3, r0, #0
   b6d54:	db01      	blt.n	b6d5a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6d56:	441c      	add	r4, r3
  while (size--) {
   b6d58:	e7f3      	b.n	b6d42 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6d5a:	2c00      	cmp	r4, #0
   b6d5c:	bf08      	it	eq
   b6d5e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6d60:	4620      	mov	r0, r4
   b6d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d64 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6d64:	b513      	push	{r0, r1, r4, lr}
   b6d66:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6d68:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6d6a:	b159      	cbz	r1, b6d84 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6d6c:	9101      	str	r1, [sp, #4]
   b6d6e:	f002 f96c 	bl	b904a <strlen>
   b6d72:	6823      	ldr	r3, [r4, #0]
   b6d74:	9901      	ldr	r1, [sp, #4]
   b6d76:	68db      	ldr	r3, [r3, #12]
   b6d78:	4602      	mov	r2, r0
   b6d7a:	4620      	mov	r0, r4
    }
   b6d7c:	b002      	add	sp, #8
   b6d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6d82:	4718      	bx	r3
    }
   b6d84:	b002      	add	sp, #8
   b6d86:	bd10      	pop	{r4, pc}

000b6d88 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6d88:	6803      	ldr	r3, [r0, #0]
   b6d8a:	689b      	ldr	r3, [r3, #8]
   b6d8c:	4718      	bx	r3

000b6d8e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6d8e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6d90:	210d      	movs	r1, #13
{
   b6d92:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6d94:	f7ff fff8 	bl	b6d88 <_ZN5Print5printEc>
  n += print('\n');
   b6d98:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6d9a:	4604      	mov	r4, r0
  n += print('\n');
   b6d9c:	4628      	mov	r0, r5
   b6d9e:	f7ff fff3 	bl	b6d88 <_ZN5Print5printEc>
  return n;
}
   b6da2:	4420      	add	r0, r4
   b6da4:	bd38      	pop	{r3, r4, r5, pc}

000b6da6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6da6:	b538      	push	{r3, r4, r5, lr}
   b6da8:	4605      	mov	r5, r0
  return write(str);
   b6daa:	f7ff ffdb 	bl	b6d64 <_ZN5Print5writeEPKc>
   b6dae:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6db0:	4628      	mov	r0, r5
   b6db2:	f7ff ffec 	bl	b6d8e <_ZN5Print7printlnEv>
  return n;
}
   b6db6:	4420      	add	r0, r4
   b6db8:	bd38      	pop	{r3, r4, r5, pc}

000b6dba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6dba:	b530      	push	{r4, r5, lr}
   b6dbc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6dbe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6dc0:	2a01      	cmp	r2, #1
  *str = '\0';
   b6dc2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6dc6:	bf98      	it	ls
   b6dc8:	220a      	movls	r2, #10
   b6dca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6dcc:	460d      	mov	r5, r1
   b6dce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6dd2:	fb01 5312 	mls	r3, r1, r2, r5
   b6dd6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6dda:	2b09      	cmp	r3, #9
   b6ddc:	bf94      	ite	ls
   b6dde:	3330      	addls	r3, #48	; 0x30
   b6de0:	3337      	addhi	r3, #55	; 0x37
   b6de2:	b2db      	uxtb	r3, r3
  } while(n);
   b6de4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6de6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6dea:	d9ef      	bls.n	b6dcc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6dec:	4621      	mov	r1, r4
   b6dee:	f7ff ffb9 	bl	b6d64 <_ZN5Print5writeEPKc>
}
   b6df2:	b00b      	add	sp, #44	; 0x2c
   b6df4:	bd30      	pop	{r4, r5, pc}

000b6df6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6dfa:	b086      	sub	sp, #24
   b6dfc:	af00      	add	r7, sp, #0
   b6dfe:	4605      	mov	r5, r0
   b6e00:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e02:	1d38      	adds	r0, r7, #4
   b6e04:	2114      	movs	r1, #20
{
   b6e06:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6e08:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6e0a:	f7ff fa0b 	bl	b6224 <vsnprintf>

    if (n<bufsize)
   b6e0e:	2813      	cmp	r0, #19
   b6e10:	d80e      	bhi.n	b6e30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6e12:	1d39      	adds	r1, r7, #4
   b6e14:	4628      	mov	r0, r5
   b6e16:	f7ff ffa5 	bl	b6d64 <_ZN5Print5writeEPKc>
   b6e1a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6e1c:	b11e      	cbz	r6, b6e26 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6e1e:	4628      	mov	r0, r5
   b6e20:	f7ff ffb5 	bl	b6d8e <_ZN5Print7printlnEv>
   b6e24:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6e26:	4620      	mov	r0, r4
   b6e28:	3718      	adds	r7, #24
   b6e2a:	46bd      	mov	sp, r7
   b6e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6e30:	f100 0308 	add.w	r3, r0, #8
   b6e34:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6e38:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6e3a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6e3e:	4622      	mov	r2, r4
   b6e40:	1c41      	adds	r1, r0, #1
   b6e42:	683b      	ldr	r3, [r7, #0]
   b6e44:	4668      	mov	r0, sp
   b6e46:	f7ff f9ed 	bl	b6224 <vsnprintf>
  return write(str);
   b6e4a:	4669      	mov	r1, sp
   b6e4c:	4628      	mov	r0, r5
   b6e4e:	f7ff ff89 	bl	b6d64 <_ZN5Print5writeEPKc>
   b6e52:	4604      	mov	r4, r0
   b6e54:	46c5      	mov	sp, r8
   b6e56:	e7e1      	b.n	b6e1c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6e58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6e58:	4b01      	ldr	r3, [pc, #4]	; (b6e60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6e5a:	4a02      	ldr	r2, [pc, #8]	; (b6e64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6e5c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6e5e:	4770      	bx	lr
   b6e60:	2003e69c 	.word	0x2003e69c
   b6e64:	000bb3f8 	.word	0x000bb3f8

000b6e68 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b6e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b6e6c:	4a15      	ldr	r2, [pc, #84]	; (b6ec4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b6e6e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6ed0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b6e72:	e9d2 6300 	ldrd	r6, r3, [r2]
   b6e76:	1980      	adds	r0, r0, r6
   b6e78:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b6e7c:	4b12      	ldr	r3, [pc, #72]	; (b6ec8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b6e7e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b6e82:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b6e86:	1986      	adds	r6, r0, r6
   b6e88:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b6e8c:	42bb      	cmp	r3, r7
   b6e8e:	bf08      	it	eq
   b6e90:	42b2      	cmpeq	r2, r6
{
   b6e92:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b6e94:	d013      	beq.n	b6ebe <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b6e96:	a903      	add	r1, sp, #12
   b6e98:	4668      	mov	r0, sp
   b6e9a:	e9cd 6700 	strd	r6, r7, [sp]
   b6e9e:	f7ff f9f1 	bl	b6284 <localtime_r>
	calendar_time.tm_year += 1900;
   b6ea2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6ea4:	4d09      	ldr	r5, [pc, #36]	; (b6ecc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b6ea6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6eaa:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b6eac:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b6eb6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6eba:	6823      	ldr	r3, [r4, #0]
   b6ebc:	602b      	str	r3, [r5, #0]
    }
}
   b6ebe:	b00c      	add	sp, #48	; 0x30
   b6ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6ec4:	2003e6d0 	.word	0x2003e6d0
   b6ec8:	2003e6c8 	.word	0x2003e6c8
   b6ecc:	2003e6a4 	.word	0x2003e6a4
   b6ed0:	2003e6d8 	.word	0x2003e6d8

000b6ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b6ed4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6ed6:	2000      	movs	r0, #0
   b6ed8:	f7ff f96c 	bl	b61b4 <spark_sync_time_pending>
   b6edc:	b128      	cbz	r0, b6eea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6ede:	f7ff f951 	bl	b6184 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6ee2:	f080 0001 	eor.w	r0, r0, #1
   b6ee6:	b2c0      	uxtb	r0, r0
    }
   b6ee8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6eea:	2001      	movs	r0, #1
   b6eec:	e7fc      	b.n	b6ee8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b6ef0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b6ef0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b6ef2:	f7ff ffb9 	bl	b6e68 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <_ZN9TimeClass5monthEx+0x10>)
   b6ef8:	6918      	ldr	r0, [r3, #16]
}
   b6efa:	3001      	adds	r0, #1
   b6efc:	bd08      	pop	{r3, pc}
   b6efe:	bf00      	nop
   b6f00:	2003e6a4 	.word	0x2003e6a4

000b6f04 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b6f04:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b6f06:	2000      	movs	r0, #0
   b6f08:	f7fe ff30 	bl	b5d6c <hal_rtc_time_is_valid>
    if (rtcstate)
   b6f0c:	4604      	mov	r4, r0
   b6f0e:	b9a0      	cbnz	r0, b6f3a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6f10:	f7ff f884 	bl	b601c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6f14:	2801      	cmp	r0, #1
   b6f16:	d110      	bne.n	b6f3a <_ZN9TimeClass7isValidEv+0x36>
   b6f18:	4620      	mov	r0, r4
   b6f1a:	f7ff f8a7 	bl	b606c <system_thread_get_state>
   b6f1e:	b960      	cbnz	r0, b6f3a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6f20:	f7ff ffd8 	bl	b6ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6f24:	b910      	cbnz	r0, b6f2c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6f26:	f7ff f925 	bl	b6174 <spark_process>
        while (_while() && !_condition()) {
   b6f2a:	e7f9      	b.n	b6f20 <_ZN9TimeClass7isValidEv+0x1c>
   b6f2c:	f7ff ffd2 	bl	b6ed4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b6f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6f34:	2000      	movs	r0, #0
   b6f36:	f7fe bf19 	b.w	b5d6c <hal_rtc_time_is_valid>
}
   b6f3a:	4620      	mov	r0, r4
   b6f3c:	bd10      	pop	{r4, pc}

000b6f3e <_ZN9TimeClass3nowEv>:
{
   b6f3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b6f40:	f7ff ffe0 	bl	b6f04 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6f44:	2210      	movs	r2, #16
   b6f46:	2100      	movs	r1, #0
   b6f48:	4668      	mov	r0, sp
   b6f4a:	f002 f808 	bl	b8f5e <memset>
    hal_rtc_get_time(&tv, nullptr);
   b6f4e:	2100      	movs	r1, #0
   b6f50:	4668      	mov	r0, sp
   b6f52:	f7fe ff13 	bl	b5d7c <hal_rtc_get_time>
}
   b6f56:	9800      	ldr	r0, [sp, #0]
   b6f58:	b005      	add	sp, #20
   b6f5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6f60 <_ZN9TimeClass4hourEv>:
{
   b6f60:	b508      	push	{r3, lr}
	return hour(now());
   b6f62:	f7ff ffec 	bl	b6f3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6f66:	17c1      	asrs	r1, r0, #31
   b6f68:	f7ff ff7e 	bl	b6e68 <_ZL22Refresh_UnixTime_Cachex>
}
   b6f6c:	4b01      	ldr	r3, [pc, #4]	; (b6f74 <_ZN9TimeClass4hourEv+0x14>)
   b6f6e:	6898      	ldr	r0, [r3, #8]
   b6f70:	bd08      	pop	{r3, pc}
   b6f72:	bf00      	nop
   b6f74:	2003e6a4 	.word	0x2003e6a4

000b6f78 <_ZN9TimeClass6minuteEv>:
{
   b6f78:	b508      	push	{r3, lr}
	return minute(now());
   b6f7a:	f7ff ffe0 	bl	b6f3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6f7e:	17c1      	asrs	r1, r0, #31
   b6f80:	f7ff ff72 	bl	b6e68 <_ZL22Refresh_UnixTime_Cachex>
}
   b6f84:	4b01      	ldr	r3, [pc, #4]	; (b6f8c <_ZN9TimeClass6minuteEv+0x14>)
   b6f86:	6858      	ldr	r0, [r3, #4]
   b6f88:	bd08      	pop	{r3, pc}
   b6f8a:	bf00      	nop
   b6f8c:	2003e6a4 	.word	0x2003e6a4

000b6f90 <_ZN9TimeClass3dayEv>:
{
   b6f90:	b508      	push	{r3, lr}
	return day(now());
   b6f92:	f7ff ffd4 	bl	b6f3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6f96:	17c1      	asrs	r1, r0, #31
   b6f98:	f7ff ff66 	bl	b6e68 <_ZL22Refresh_UnixTime_Cachex>
}
   b6f9c:	4b01      	ldr	r3, [pc, #4]	; (b6fa4 <_ZN9TimeClass3dayEv+0x14>)
   b6f9e:	68d8      	ldr	r0, [r3, #12]
   b6fa0:	bd08      	pop	{r3, pc}
   b6fa2:	bf00      	nop
   b6fa4:	2003e6a4 	.word	0x2003e6a4

000b6fa8 <_ZN9TimeClass5monthEv>:
{
   b6fa8:	b508      	push	{r3, lr}
	return month(now());
   b6faa:	f7ff ffc8 	bl	b6f3e <_ZN9TimeClass3nowEv>
}
   b6fae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b6fb2:	17c1      	asrs	r1, r0, #31
   b6fb4:	f7ff bf9c 	b.w	b6ef0 <_ZN9TimeClass5monthEx>

000b6fb8 <_ZN9TimeClass4yearEv>:
{
   b6fb8:	b508      	push	{r3, lr}
	return year(now());
   b6fba:	f7ff ffc0 	bl	b6f3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6fbe:	17c1      	asrs	r1, r0, #31
   b6fc0:	f7ff ff52 	bl	b6e68 <_ZL22Refresh_UnixTime_Cachex>
}
   b6fc4:	4b01      	ldr	r3, [pc, #4]	; (b6fcc <_ZN9TimeClass4yearEv+0x14>)
   b6fc6:	6958      	ldr	r0, [r3, #20]
   b6fc8:	bd08      	pop	{r3, pc}
   b6fca:	bf00      	nop
   b6fcc:	2003e6a4 	.word	0x2003e6a4

000b6fd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6fd0:	4b02      	ldr	r3, [pc, #8]	; (b6fdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6fd2:	681a      	ldr	r2, [r3, #0]
   b6fd4:	4b02      	ldr	r3, [pc, #8]	; (b6fe0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6fd6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6fd8:	4770      	bx	lr
   b6fda:	bf00      	nop
   b6fdc:	2003d220 	.word	0x2003d220
   b6fe0:	2003e6a0 	.word	0x2003e6a0

000b6fe4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6fe4:	b510      	push	{r4, lr}
   b6fe6:	4b04      	ldr	r3, [pc, #16]	; (b6ff8 <_ZN9TCPClientD1Ev+0x14>)
   b6fe8:	6003      	str	r3, [r0, #0]
   b6fea:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6fec:	6980      	ldr	r0, [r0, #24]
   b6fee:	b108      	cbz	r0, b6ff4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b6ff0:	f7ff fe73 	bl	b6cda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b6ff4:	4620      	mov	r0, r4
   b6ff6:	bd10      	pop	{r4, pc}
   b6ff8:	000bb50c 	.word	0x000bb50c

000b6ffc <_ZN9TCPClientD0Ev>:
   b6ffc:	b510      	push	{r4, lr}
   b6ffe:	4604      	mov	r4, r0
   b7000:	f7ff fff0 	bl	b6fe4 <_ZN9TCPClientD1Ev>
   b7004:	4620      	mov	r0, r4
   b7006:	211c      	movs	r1, #28
   b7008:	f7fd f84b 	bl	b40a2 <_ZdlPvj>
   b700c:	4620      	mov	r0, r4
   b700e:	bd10      	pop	{r4, pc}

000b7010 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7010:	4b01      	ldr	r3, [pc, #4]	; (b7018 <_GLOBAL__sub_I_RGB+0x8>)
   b7012:	2200      	movs	r2, #0
   b7014:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7016:	4770      	bx	lr
   b7018:	2003e6e0 	.word	0x2003e6e0

000b701c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b701c:	4b01      	ldr	r3, [pc, #4]	; (b7024 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b701e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7020:	4770      	bx	lr
   b7022:	bf00      	nop
   b7024:	2003d224 	.word	0x2003d224

000b7028 <serialEventRun>:
{
   b7028:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b702a:	4b0b      	ldr	r3, [pc, #44]	; (b7058 <serialEventRun+0x30>)
   b702c:	b143      	cbz	r3, b7040 <serialEventRun+0x18>
   b702e:	f000 fc25 	bl	b787c <_Z16_fetch_usbserialv>
   b7032:	6803      	ldr	r3, [r0, #0]
   b7034:	691b      	ldr	r3, [r3, #16]
   b7036:	4798      	blx	r3
   b7038:	2800      	cmp	r0, #0
   b703a:	dd01      	ble.n	b7040 <serialEventRun+0x18>
        serialEvent();
   b703c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7040:	4b06      	ldr	r3, [pc, #24]	; (b705c <serialEventRun+0x34>)
   b7042:	b143      	cbz	r3, b7056 <serialEventRun+0x2e>
   b7044:	f001 f950 	bl	b82e8 <_Z22__fetch_global_Serial1v>
   b7048:	6803      	ldr	r3, [r0, #0]
   b704a:	691b      	ldr	r3, [r3, #16]
   b704c:	4798      	blx	r3
   b704e:	2800      	cmp	r0, #0
   b7050:	dd01      	ble.n	b7056 <serialEventRun+0x2e>
        serialEvent1();
   b7052:	f3af 8000 	nop.w
}
   b7056:	bd08      	pop	{r3, pc}
	...

000b7060 <_post_loop>:
{
   b7060:	b508      	push	{r3, lr}
	serialEventRun();
   b7062:	f7ff ffe1 	bl	b7028 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7066:	f7fe fe79 	bl	b5d5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b706a:	4b01      	ldr	r3, [pc, #4]	; (b7070 <_post_loop+0x10>)
   b706c:	6018      	str	r0, [r3, #0]
}
   b706e:	bd08      	pop	{r3, pc}
   b7070:	2003e744 	.word	0x2003e744

000b7074 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7074:	4805      	ldr	r0, [pc, #20]	; (b708c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7076:	4a06      	ldr	r2, [pc, #24]	; (b7090 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7078:	4906      	ldr	r1, [pc, #24]	; (b7094 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b707a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b707c:	1a12      	subs	r2, r2, r0
   b707e:	f001 ff60 	bl	b8f42 <memcpy>
    __backup_sram_signature = signature;
   b7082:	4b05      	ldr	r3, [pc, #20]	; (b7098 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7084:	4a05      	ldr	r2, [pc, #20]	; (b709c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7086:	601a      	str	r2, [r3, #0]
}
   b7088:	bd08      	pop	{r3, pc}
   b708a:	bf00      	nop
   b708c:	2003f400 	.word	0x2003f400
   b7090:	2003f404 	.word	0x2003f404
   b7094:	000bbbb4 	.word	0x000bbbb4
   b7098:	2003f400 	.word	0x2003f400
   b709c:	9a271c1e 	.word	0x9a271c1e

000b70a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b70a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b70a2:	2300      	movs	r3, #0
   b70a4:	9300      	str	r3, [sp, #0]
   b70a6:	461a      	mov	r2, r3
   b70a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b70ac:	f7fe fff0 	bl	b6090 <system_ctrl_set_result>
}
   b70b0:	b003      	add	sp, #12
   b70b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b70b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b70b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b70ba:	8843      	ldrh	r3, [r0, #2]
   b70bc:	2b0a      	cmp	r3, #10
   b70be:	d008      	beq.n	b70d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b70c0:	2b50      	cmp	r3, #80	; 0x50
   b70c2:	d10b      	bne.n	b70dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b70c4:	4b09      	ldr	r3, [pc, #36]	; (b70ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b70c6:	681b      	ldr	r3, [r3, #0]
   b70c8:	b14b      	cbz	r3, b70de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b70ca:	b003      	add	sp, #12
   b70cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b70d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b70d2:	f7ff ffe5 	bl	b70a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b70d6:	b003      	add	sp, #12
   b70d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b70dc:	2300      	movs	r3, #0
   b70de:	9300      	str	r3, [sp, #0]
   b70e0:	461a      	mov	r2, r3
   b70e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b70e6:	f7fe ffd3 	bl	b6090 <system_ctrl_set_result>
}
   b70ea:	e7f4      	b.n	b70d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b70ec:	2003e6f4 	.word	0x2003e6f4

000b70f0 <module_user_init_hook>:
{
   b70f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b70f2:	4812      	ldr	r0, [pc, #72]	; (b713c <module_user_init_hook+0x4c>)
   b70f4:	2100      	movs	r1, #0
   b70f6:	f7ff f8bd 	bl	b6274 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b70fa:	4b11      	ldr	r3, [pc, #68]	; (b7140 <module_user_init_hook+0x50>)
   b70fc:	681a      	ldr	r2, [r3, #0]
   b70fe:	4b11      	ldr	r3, [pc, #68]	; (b7144 <module_user_init_hook+0x54>)
   b7100:	429a      	cmp	r2, r3
   b7102:	4b11      	ldr	r3, [pc, #68]	; (b7148 <module_user_init_hook+0x58>)
   b7104:	bf0c      	ite	eq
   b7106:	2201      	moveq	r2, #1
   b7108:	2200      	movne	r2, #0
   b710a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b710c:	d001      	beq.n	b7112 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b710e:	f7ff ffb1 	bl	b7074 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7112:	f7fe fe1b 	bl	b5d4c <HAL_RNG_GetRandomNumber>
   b7116:	4604      	mov	r4, r0
    srand(seed);
   b7118:	f001 ff2a 	bl	b8f70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b711c:	4b0b      	ldr	r3, [pc, #44]	; (b714c <module_user_init_hook+0x5c>)
   b711e:	b113      	cbz	r3, b7126 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7120:	4620      	mov	r0, r4
   b7122:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7126:	2100      	movs	r1, #0
   b7128:	4808      	ldr	r0, [pc, #32]	; (b714c <module_user_init_hook+0x5c>)
   b712a:	f7ff f84b 	bl	b61c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b712e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7132:	4807      	ldr	r0, [pc, #28]	; (b7150 <module_user_init_hook+0x60>)
   b7134:	2100      	movs	r1, #0
   b7136:	f7fe bfa1 	b.w	b607c <system_ctrl_set_app_request_handler>
   b713a:	bf00      	nop
   b713c:	000b701d 	.word	0x000b701d
   b7140:	2003f400 	.word	0x2003f400
   b7144:	9a271c1e 	.word	0x9a271c1e
   b7148:	2003e6f0 	.word	0x2003e6f0
   b714c:	00000000 	.word	0x00000000
   b7150:	000b70b9 	.word	0x000b70b9

000b7154 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b7154:	4770      	bx	lr

000b7156 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b7156:	2000      	movs	r0, #0
   b7158:	4770      	bx	lr

000b715a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b715a:	b510      	push	{r4, lr}
   b715c:	2110      	movs	r1, #16
   b715e:	4604      	mov	r4, r0
   b7160:	f7fc ff9f 	bl	b40a2 <_ZdlPvj>
   b7164:	4620      	mov	r0, r4
   b7166:	bd10      	pop	{r4, pc}

000b7168 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b7168:	b508      	push	{r3, lr}
      { delete this; }
   b716a:	f7ff fff6 	bl	b715a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b716e:	bd08      	pop	{r3, pc}

000b7170 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b7170:	b530      	push	{r4, r5, lr}
        type_(type) {
   b7172:	2200      	movs	r2, #0
   b7174:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b7178:	6002      	str	r2, [r0, #0]
   b717a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b717c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b717e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7180:	680c      	ldr	r4, [r1, #0]
   b7182:	8085      	strh	r5, [r0, #4]
   b7184:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7186:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b7188:	bd30      	pop	{r4, r5, pc}

000b718a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b718a:	b510      	push	{r4, lr}
   b718c:	4604      	mov	r4, r0
    free((void*)msg_);
   b718e:	6800      	ldr	r0, [r0, #0]
   b7190:	f7ff f828 	bl	b61e4 <free>
}
   b7194:	4620      	mov	r0, r4
   b7196:	bd10      	pop	{r4, pc}

000b7198 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7198:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b719a:	68c4      	ldr	r4, [r0, #12]
   b719c:	b1f4      	cbz	r4, b71dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b719e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b71a0:	2b02      	cmp	r3, #2
   b71a2:	d103      	bne.n	b71ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b71a4:	f104 000c 	add.w	r0, r4, #12
   b71a8:	f7ff ffef 	bl	b718a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b71ac:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b71ae:	b135      	cbz	r5, b71be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b71b0:	4628      	mov	r0, r5
   b71b2:	f7ff fd89 	bl	b6cc8 <_ZNSt14_Function_baseD1Ev>
   b71b6:	2110      	movs	r1, #16
   b71b8:	4628      	mov	r0, r5
   b71ba:	f7fc ff72 	bl	b40a2 <_ZdlPvj>
   b71be:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b71c0:	b135      	cbz	r5, b71d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b71c2:	4628      	mov	r0, r5
   b71c4:	f7ff fd80 	bl	b6cc8 <_ZNSt14_Function_baseD1Ev>
   b71c8:	2110      	movs	r1, #16
   b71ca:	4628      	mov	r0, r5
   b71cc:	f7fc ff69 	bl	b40a2 <_ZdlPvj>
   b71d0:	4620      	mov	r0, r4
   b71d2:	2114      	movs	r1, #20
   b71d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b71d8:	f7fc bf63 	b.w	b40a2 <_ZdlPvj>
   b71dc:	bd38      	pop	{r3, r4, r5, pc}

000b71de <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b71de:	680b      	ldr	r3, [r1, #0]
   b71e0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b71e2:	684b      	ldr	r3, [r1, #4]
   b71e4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b71e6:	b113      	cbz	r3, b71ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b71e8:	685a      	ldr	r2, [r3, #4]
   b71ea:	3201      	adds	r2, #1
   b71ec:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b71ee:	4770      	bx	lr

000b71f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b71f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b71f2:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b71f4:	4668      	mov	r0, sp
   b71f6:	460d      	mov	r5, r1
   b71f8:	f7ff fff1 	bl	b71de <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b71fc:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b71fe:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b7200:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b7202:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b7204:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b7206:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b7208:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b720a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b720c:	f7fd f9a0 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b7210:	b135      	cbz	r5, b7220 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b7212:	1d28      	adds	r0, r5, #4
   b7214:	f7fd f99c 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7218:	2108      	movs	r1, #8
   b721a:	4628      	mov	r0, r5
   b721c:	f7fc ff41 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b7220:	4620      	mov	r0, r4
   b7222:	b003      	add	sp, #12
   b7224:	bd30      	pop	{r4, r5, pc}

000b7226 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b7226:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7228:	b510      	push	{r4, lr}
      if (_M_empty())
   b722a:	b90a      	cbnz	r2, b7230 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b722c:	f001 f8be 	bl	b83ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b7230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7234:	68c3      	ldr	r3, [r0, #12]
   b7236:	4718      	bx	r3

000b7238 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7238:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b723a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b723c:	f100 0110 	add.w	r1, r0, #16
   b7240:	f7ff fff1 	bl	b7226 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b7244:	bd08      	pop	{r3, pc}

000b7246 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b7246:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7248:	b510      	push	{r4, lr}
      if (_M_empty())
   b724a:	b90a      	cbnz	r2, b7250 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b724c:	f001 f8ae 	bl	b83ac <_ZSt25__throw_bad_function_callv>
    }
   b7250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7254:	68c3      	ldr	r3, [r0, #12]
   b7256:	4718      	bx	r3

000b7258 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7258:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b725a:	6800      	ldr	r0, [r0, #0]
   b725c:	f100 0110 	add.w	r1, r0, #16
   b7260:	f7ff fff1 	bl	b7246 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b7264:	bd08      	pop	{r3, pc}
	...

000b7268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b7268:	b538      	push	{r3, r4, r5, lr}
   b726a:	2300      	movs	r3, #0
   b726c:	4604      	mov	r4, r0
   b726e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7270:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b7272:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7274:	f7fc ff0f 	bl	b4096 <_Znwj>
   b7278:	b128      	cbz	r0, b7286 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b727a:	2301      	movs	r3, #1
   b727c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b7280:	4b02      	ldr	r3, [pc, #8]	; (b728c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b7282:	6003      	str	r3, [r0, #0]
   b7284:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b7286:	6020      	str	r0, [r4, #0]
	}
   b7288:	4620      	mov	r0, r4
   b728a:	bd38      	pop	{r3, r4, r5, pc}
   b728c:	000bb420 	.word	0x000bb420

000b7290 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b7290:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7292:	2300      	movs	r3, #0
   b7294:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b7296:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7298:	4604      	mov	r4, r0
   b729a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b729c:	b12b      	cbz	r3, b72aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b729e:	2202      	movs	r2, #2
   b72a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b72a2:	68eb      	ldr	r3, [r5, #12]
   b72a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b72a6:	68ab      	ldr	r3, [r5, #8]
   b72a8:	60a3      	str	r3, [r4, #8]
    }
   b72aa:	4620      	mov	r0, r4
   b72ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b72b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b72b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72b2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b72b4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b72b6:	4668      	mov	r0, sp
   b72b8:	f7ff ff5a 	bl	b7170 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b72bc:	f04f 0302 	mov.w	r3, #2
   b72c0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b72c4:	2a00      	cmp	r2, #0
   b72c6:	d103      	bne.n	b72d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b72c8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b72cc:	2900      	cmp	r1, #0
   b72ce:	d1f7      	bne.n	b72c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b72d0:	d125      	bne.n	b731e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b72d2:	f104 050c 	add.w	r5, r4, #12
   b72d6:	4669      	mov	r1, sp
   b72d8:	4628      	mov	r0, r5
   b72da:	f7ff ff49 	bl	b7170 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b72de:	f3bf 8f5b 	dmb	ish
   b72e2:	2301      	movs	r3, #1
   b72e4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b72e6:	2000      	movs	r0, #0
   b72e8:	f104 0308 	add.w	r3, r4, #8
   b72ec:	f3bf 8f5b 	dmb	ish
   b72f0:	e853 6f00 	ldrex	r6, [r3]
   b72f4:	e843 0200 	strex	r2, r0, [r3]
   b72f8:	2a00      	cmp	r2, #0
   b72fa:	d1f9      	bne.n	b72f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b72fc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b7300:	b16e      	cbz	r6, b731e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b7302:	f7fe fea3 	bl	b604c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b7306:	b178      	cbz	r0, b7328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b7308:	4629      	mov	r1, r5
   b730a:	4630      	mov	r0, r6
   b730c:	f7ff ff8b 	bl	b7226 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b7310:	4630      	mov	r0, r6
   b7312:	f7ff fcd9 	bl	b6cc8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b7316:	2110      	movs	r1, #16
   b7318:	4630      	mov	r0, r6
   b731a:	f7fc fec2 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b731e:	4668      	mov	r0, sp
   b7320:	f7ff ff33 	bl	b718a <_ZN8particle5ErrorD1Ev>
    }
   b7324:	b009      	add	sp, #36	; 0x24
   b7326:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7328:	4631      	mov	r1, r6
   b732a:	a802      	add	r0, sp, #8
   b732c:	f7ff ffb0 	bl	b7290 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7330:	68e0      	ldr	r0, [r4, #12]
   b7332:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b7336:	b108      	cbz	r0, b733c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b7338:	f001 fe6a 	bl	b9010 <strdup>
        type_(type) {
   b733c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b733e:	2010      	movs	r0, #16
   b7340:	f8ad 501c 	strh.w	r5, [sp, #28]
   b7344:	f7fc fea7 	bl	b4096 <_Znwj>
   b7348:	4605      	mov	r5, r0
   b734a:	b1e8      	cbz	r0, b7388 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b734c:	2700      	movs	r7, #0
   b734e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7350:	2018      	movs	r0, #24
   b7352:	f7fc fea0 	bl	b4096 <_Znwj>
   b7356:	4604      	mov	r4, r0
   b7358:	b188      	cbz	r0, b737e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b735a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b735c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b735e:	a802      	add	r0, sp, #8
   b7360:	f7ff fccf 	bl	b6d02 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7364:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7366:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7368:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b736a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b736c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b736e:	a906      	add	r1, sp, #24
   b7370:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7372:	60e3      	str	r3, [r4, #12]
   b7374:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b7378:	9205      	str	r2, [sp, #20]
   b737a:	f7ff fef9 	bl	b7170 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b737e:	4b08      	ldr	r3, [pc, #32]	; (b73a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b7380:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7382:	4b08      	ldr	r3, [pc, #32]	; (b73a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7384:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7386:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b7388:	a806      	add	r0, sp, #24
   b738a:	f7ff fefe 	bl	b718a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b738e:	a802      	add	r0, sp, #8
   b7390:	f7ff fc9a 	bl	b6cc8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7394:	2200      	movs	r2, #0
   b7396:	4629      	mov	r1, r5
   b7398:	4803      	ldr	r0, [pc, #12]	; (b73a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b739a:	f7fe fe5f 	bl	b605c <application_thread_invoke>
   b739e:	e7b7      	b.n	b7310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b73a0:	000b7239 	.word	0x000b7239
   b73a4:	000b74bd 	.word	0x000b74bd
   b73a8:	000b79c5 	.word	0x000b79c5

000b73ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b73ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b73b0:	b08b      	sub	sp, #44	; 0x2c
   b73b2:	4605      	mov	r5, r0
   b73b4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b73b8:	460f      	mov	r7, r1
   b73ba:	4690      	mov	r8, r2
   b73bc:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b73be:	f7fe fee1 	bl	b6184 <spark_cloud_flag_connected>
   b73c2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b73c4:	4683      	mov	fp, r0
   b73c6:	bb38      	cbnz	r0, b7418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b73c8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b73cc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b73ce:	a905      	add	r1, sp, #20
   b73d0:	4630      	mov	r0, r6
   b73d2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b73d6:	f7ff fecb 	bl	b7170 <_ZN8particle5ErrorC1EOS0_>
   b73da:	2014      	movs	r0, #20
   b73dc:	f7fc fe5b 	bl	b4096 <_Znwj>
   b73e0:	4604      	mov	r4, r0
   b73e2:	b148      	cbz	r0, b73f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b73e4:	2302      	movs	r3, #2
   b73e6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b73e8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b73ea:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b73ee:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b73f0:	4631      	mov	r1, r6
   b73f2:	300c      	adds	r0, #12
   b73f4:	f7ff febc 	bl	b7170 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b73f8:	4628      	mov	r0, r5
	: __shared_count(__p)
   b73fa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b73fc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b7400:	f7ff ff32 	bl	b7268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b7404:	4630      	mov	r0, r6
   b7406:	f7ff fec0 	bl	b718a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b740a:	a805      	add	r0, sp, #20
   b740c:	f7ff febd 	bl	b718a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b7410:	4628      	mov	r0, r5
   b7412:	b00b      	add	sp, #44	; 0x2c
   b7414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b7418:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b741a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b741c:	2014      	movs	r0, #20
   b741e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b7422:	9307      	str	r3, [sp, #28]
   b7424:	f7fc fe37 	bl	b4096 <_Znwj>
   b7428:	4601      	mov	r1, r0
   b742a:	b118      	cbz	r0, b7434 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b742c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7430:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b7432:	7044      	strb	r4, [r0, #1]
   b7434:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b7436:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b7438:	f7ff ff16 	bl	b7268 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b743c:	4b1e      	ldr	r3, [pc, #120]	; (b74b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b743e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b7440:	2008      	movs	r0, #8
   b7442:	f7fc fe28 	bl	b4096 <_Znwj>
   b7446:	4604      	mov	r4, r0
   b7448:	b110      	cbz	r0, b7450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b744a:	a903      	add	r1, sp, #12
   b744c:	f7ff fec7 	bl	b71de <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b7450:	9600      	str	r6, [sp, #0]
   b7452:	fa5f f38a 	uxtb.w	r3, sl
   b7456:	464a      	mov	r2, r9
   b7458:	4641      	mov	r1, r8
   b745a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b745c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b745e:	f7fe fe99 	bl	b6194 <spark_send_event>
   b7462:	b9b8      	cbnz	r0, b7494 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b7464:	9b03      	ldr	r3, [sp, #12]
   b7466:	785b      	ldrb	r3, [r3, #1]
   b7468:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b746c:	b993      	cbnz	r3, b7494 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b746e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b7472:	a905      	add	r1, sp, #20
   b7474:	a803      	add	r0, sp, #12
   b7476:	9205      	str	r2, [sp, #20]
   b7478:	f8ad 3018 	strh.w	r3, [sp, #24]
   b747c:	f7ff ff18 	bl	b72b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7480:	a805      	add	r0, sp, #20
   b7482:	f7ff fe82 	bl	b718a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b7486:	a805      	add	r0, sp, #20
   b7488:	9909      	ldr	r1, [sp, #36]	; 0x24
   b748a:	f7ff feb1 	bl	b71f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b748e:	a806      	add	r0, sp, #24
   b7490:	f7fd f85e 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7494:	a903      	add	r1, sp, #12
   b7496:	a805      	add	r0, sp, #20
   b7498:	f7ff fea1 	bl	b71de <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b749c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b749e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b74a0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b74a2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b74a4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b74a6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b74a8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b74aa:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b74ac:	f7fd f850 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b74b0:	a804      	add	r0, sp, #16
   b74b2:	f7fd f84d 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b74b6:	e7ab      	b.n	b7410 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b74b8:	000b7539 	.word	0x000b7539

000b74bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b74bc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b74be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b74c0:	4605      	mov	r5, r0
	switch (__op)
   b74c2:	d103      	bne.n	b74cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b74c4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b74c6:	6003      	str	r3, [r0, #0]
      }
   b74c8:	2000      	movs	r0, #0
   b74ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b74cc:	2a02      	cmp	r2, #2
   b74ce:	d010      	beq.n	b74f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b74d0:	2a03      	cmp	r2, #3
   b74d2:	d1f9      	bne.n	b74c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b74d4:	6804      	ldr	r4, [r0, #0]
   b74d6:	2c00      	cmp	r4, #0
   b74d8:	d0f6      	beq.n	b74c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b74da:	f104 0010 	add.w	r0, r4, #16
   b74de:	f7ff fe54 	bl	b718a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b74e2:	4620      	mov	r0, r4
   b74e4:	f7ff fbf0 	bl	b6cc8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b74e8:	2118      	movs	r1, #24
   b74ea:	4620      	mov	r0, r4
   b74ec:	f7fc fdd9 	bl	b40a2 <_ZdlPvj>
   b74f0:	e7ea      	b.n	b74c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b74f2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b74f4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b74f6:	f7fc fdce 	bl	b4096 <_Znwj>
   b74fa:	4604      	mov	r4, r0
   b74fc:	b150      	cbz	r0, b7514 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b74fe:	4631      	mov	r1, r6
   b7500:	f7ff fec6 	bl	b7290 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b7504:	6930      	ldr	r0, [r6, #16]
   b7506:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b750a:	b108      	cbz	r0, b7510 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b750c:	f001 fd80 	bl	b9010 <strdup>
        type_(type) {
   b7510:	6120      	str	r0, [r4, #16]
   b7512:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b7514:	602c      	str	r4, [r5, #0]
	}
   b7516:	e7d7      	b.n	b74c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b7518 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b7518:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b751a:	2300      	movs	r3, #0
   b751c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b751e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b7520:	4604      	mov	r4, r0
   b7522:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b7524:	b12b      	cbz	r3, b7532 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7526:	2202      	movs	r2, #2
   b7528:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b752a:	68eb      	ldr	r3, [r5, #12]
   b752c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b752e:	68ab      	ldr	r3, [r5, #8]
   b7530:	60a3      	str	r3, [r4, #8]
    }
   b7532:	4620      	mov	r0, r4
   b7534:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7538 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b7538:	b5f0      	push	{r4, r5, r6, r7, lr}
   b753a:	b089      	sub	sp, #36	; 0x24
   b753c:	4604      	mov	r4, r0
   b753e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b7540:	a801      	add	r0, sp, #4
   b7542:	4611      	mov	r1, r2
   b7544:	f7ff fe54 	bl	b71f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b7548:	b1a4      	cbz	r4, b7574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b754a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b754c:	b11d      	cbz	r5, b7556 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b754e:	4628      	mov	r0, r5
   b7550:	f001 fd5e 	bl	b9010 <strdup>
   b7554:	4605      	mov	r5, r0
   b7556:	a801      	add	r0, sp, #4
   b7558:	a903      	add	r1, sp, #12
        type_(type) {
   b755a:	9503      	str	r5, [sp, #12]
   b755c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b7560:	f7ff fea6 	bl	b72b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b7564:	a803      	add	r0, sp, #12
   b7566:	f7ff fe10 	bl	b718a <_ZN8particle5ErrorD1Ev>
   b756a:	a802      	add	r0, sp, #8
   b756c:	f7fc fff0 	bl	b4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7570:	b009      	add	sp, #36	; 0x24
   b7572:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b7574:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b7576:	2301      	movs	r3, #1
   b7578:	e8d5 2f4f 	ldrexb	r2, [r5]
   b757c:	2a00      	cmp	r2, #0
   b757e:	d103      	bne.n	b7588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b7580:	e8c5 3f41 	strexb	r1, r3, [r5]
   b7584:	2900      	cmp	r1, #0
   b7586:	d1f7      	bne.n	b7578 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b7588:	d1ef      	bne.n	b756a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b758a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b758c:	f3bf 8f5b 	dmb	ish
   b7590:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b7592:	1d2b      	adds	r3, r5, #4
   b7594:	f3bf 8f5b 	dmb	ish
   b7598:	e853 6f00 	ldrex	r6, [r3]
   b759c:	e843 4200 	strex	r2, r4, [r3]
   b75a0:	2a00      	cmp	r2, #0
   b75a2:	d1f9      	bne.n	b7598 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b75a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b75a8:	2e00      	cmp	r6, #0
   b75aa:	d0de      	beq.n	b756a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b75ac:	4620      	mov	r0, r4
   b75ae:	f7fe fd4d 	bl	b604c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b75b2:	4607      	mov	r7, r0
   b75b4:	b160      	cbz	r0, b75d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b75b6:	f105 010c 	add.w	r1, r5, #12
   b75ba:	4630      	mov	r0, r6
   b75bc:	f7ff fe43 	bl	b7246 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b75c0:	4630      	mov	r0, r6
   b75c2:	f7ff fb81 	bl	b6cc8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b75c6:	2110      	movs	r1, #16
   b75c8:	4630      	mov	r0, r6
   b75ca:	f7fc fd6a 	bl	b40a2 <_ZdlPvj>
   b75ce:	e7cc      	b.n	b756a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b75d0:	4631      	mov	r1, r6
   b75d2:	a803      	add	r0, sp, #12
   b75d4:	f7ff ffa0 	bl	b7518 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b75d8:	7b2b      	ldrb	r3, [r5, #12]
   b75da:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b75de:	2010      	movs	r0, #16
   b75e0:	f7fc fd59 	bl	b4096 <_Znwj>
   b75e4:	4605      	mov	r5, r0
   b75e6:	b1d0      	cbz	r0, b761e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b75e8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b75ea:	2014      	movs	r0, #20
   b75ec:	f7fc fd53 	bl	b4096 <_Znwj>
   b75f0:	4604      	mov	r4, r0
   b75f2:	b178      	cbz	r0, b7614 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b75f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b75f6:	4601      	mov	r1, r0
   b75f8:	a803      	add	r0, sp, #12
   b75fa:	f7ff fb82 	bl	b6d02 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b75fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7600:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7602:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7604:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b7606:	9205      	str	r2, [sp, #20]
   b7608:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b760a:	60e3      	str	r3, [r4, #12]
   b760c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b7610:	9206      	str	r2, [sp, #24]
   b7612:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b7614:	4b06      	ldr	r3, [pc, #24]	; (b7630 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b7616:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7618:	4b06      	ldr	r3, [pc, #24]	; (b7634 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b761a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b761c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b761e:	a803      	add	r0, sp, #12
   b7620:	f7ff fb52 	bl	b6cc8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b7624:	2200      	movs	r2, #0
   b7626:	4629      	mov	r1, r5
   b7628:	4803      	ldr	r0, [pc, #12]	; (b7638 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b762a:	f7fe fd17 	bl	b605c <application_thread_invoke>
   b762e:	e7c7      	b.n	b75c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b7630:	000b7259 	.word	0x000b7259
   b7634:	000b763d 	.word	0x000b763d
   b7638:	000b79c5 	.word	0x000b79c5

000b763c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b763c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b763e:	b570      	push	{r4, r5, r6, lr}
   b7640:	4604      	mov	r4, r0
	switch (__op)
   b7642:	d103      	bne.n	b764c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b7644:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b7646:	6003      	str	r3, [r0, #0]
      }
   b7648:	2000      	movs	r0, #0
   b764a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b764c:	2a02      	cmp	r2, #2
   b764e:	d00c      	beq.n	b766a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b7650:	2a03      	cmp	r2, #3
   b7652:	d1f9      	bne.n	b7648 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b7654:	6804      	ldr	r4, [r0, #0]
   b7656:	2c00      	cmp	r4, #0
   b7658:	d0f6      	beq.n	b7648 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b765a:	4620      	mov	r0, r4
   b765c:	f7ff fb34 	bl	b6cc8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b7660:	2114      	movs	r1, #20
   b7662:	4620      	mov	r0, r4
   b7664:	f7fc fd1d 	bl	b40a2 <_ZdlPvj>
   b7668:	e7ee      	b.n	b7648 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b766a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b766c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b766e:	f7fc fd12 	bl	b4096 <_Znwj>
   b7672:	4605      	mov	r5, r0
   b7674:	b120      	cbz	r0, b7680 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b7676:	4631      	mov	r1, r6
   b7678:	f7ff ff4e 	bl	b7518 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b767c:	7c33      	ldrb	r3, [r6, #16]
   b767e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b7680:	6025      	str	r5, [r4, #0]
	}
   b7682:	e7e1      	b.n	b7648 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b7684 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b7684:	4770      	bx	lr

000b7686 <_ZN9IPAddressD0Ev>:
   b7686:	b510      	push	{r4, lr}
   b7688:	2118      	movs	r1, #24
   b768a:	4604      	mov	r4, r0
   b768c:	f7fc fd09 	bl	b40a2 <_ZdlPvj>
   b7690:	4620      	mov	r0, r4
   b7692:	bd10      	pop	{r4, pc}

000b7694 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7694:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7696:	7d03      	ldrb	r3, [r0, #20]
   b7698:	2b06      	cmp	r3, #6
{
   b769a:	b08d      	sub	sp, #52	; 0x34
   b769c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b769e:	f100 0704 	add.w	r7, r0, #4
   b76a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b76a6:	d012      	beq.n	b76ce <_ZNK9IPAddress7printToER5Print+0x3a>
   b76a8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b76ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b76b0:	220a      	movs	r2, #10
   b76b2:	4630      	mov	r0, r6
   b76b4:	f7ff fb81 	bl	b6dba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b76b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b76ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b76bc:	d019      	beq.n	b76f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b76be:	2c00      	cmp	r4, #0
   b76c0:	d0f4      	beq.n	b76ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b76c2:	212e      	movs	r1, #46	; 0x2e
   b76c4:	4630      	mov	r0, r6
   b76c6:	f7ff fb5f 	bl	b6d88 <_ZN5Print5printEc>
   b76ca:	4404      	add	r4, r0
   b76cc:	e7ee      	b.n	b76ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b76ce:	232f      	movs	r3, #47	; 0x2f
   b76d0:	466a      	mov	r2, sp
   b76d2:	4639      	mov	r1, r7
   b76d4:	200a      	movs	r0, #10
		buf[0] = 0;
   b76d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b76da:	f7fe fb77 	bl	b5dcc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b76de:	4668      	mov	r0, sp
   b76e0:	f001 fcb3 	bl	b904a <strlen>
   b76e4:	6833      	ldr	r3, [r6, #0]
   b76e6:	4602      	mov	r2, r0
   b76e8:	68db      	ldr	r3, [r3, #12]
   b76ea:	4669      	mov	r1, sp
   b76ec:	4630      	mov	r0, r6
   b76ee:	4798      	blx	r3
   b76f0:	4604      	mov	r4, r0
    }
    return n;
}
   b76f2:	4620      	mov	r0, r4
   b76f4:	b00d      	add	sp, #52	; 0x34
   b76f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b76f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b76f8:	b510      	push	{r4, lr}
   b76fa:	4b05      	ldr	r3, [pc, #20]	; (b7710 <_ZN9IPAddressC1Ev+0x18>)
   b76fc:	4604      	mov	r4, r0
    void clear() { memset(&address, 0, sizeof (address)); }
   b76fe:	2211      	movs	r2, #17
   b7700:	f840 3b04 	str.w	r3, [r0], #4
   b7704:	2100      	movs	r1, #0
   b7706:	f001 fc2a 	bl	b8f5e <memset>
}
   b770a:	4620      	mov	r0, r4
   b770c:	bd10      	pop	{r4, pc}
   b770e:	bf00      	nop
   b7710:	000bb43c 	.word	0x000bb43c

000b7714 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7714:	4603      	mov	r3, r0
   b7716:	4a07      	ldr	r2, [pc, #28]	; (b7734 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7718:	b510      	push	{r4, lr}
   b771a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b771e:	f101 0210 	add.w	r2, r1, #16
   b7722:	f851 4b04 	ldr.w	r4, [r1], #4
   b7726:	f843 4b04 	str.w	r4, [r3], #4
   b772a:	4291      	cmp	r1, r2
   b772c:	d1f9      	bne.n	b7722 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b772e:	780a      	ldrb	r2, [r1, #0]
   b7730:	701a      	strb	r2, [r3, #0]
}
   b7732:	bd10      	pop	{r4, pc}
   b7734:	000bb43c 	.word	0x000bb43c

000b7738 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
   b7738:	4a02      	ldr	r2, [pc, #8]	; (b7744 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
   b773a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
   b773e:	2204      	movs	r2, #4
   b7740:	7502      	strb	r2, [r0, #20]
}
   b7742:	4770      	bx	lr
   b7744:	000bb43c 	.word	0x000bb43c

000b7748 <_ZNK9IPAddresscvbEv>:
    		return address.v;
   b7748:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b774a:	2b04      	cmp	r3, #4
   b774c:	d104      	bne.n	b7758 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b774e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7750:	3800      	subs	r0, #0
   b7752:	bf18      	it	ne
   b7754:	2001      	movne	r0, #1
   b7756:	4770      	bx	lr
    } else if (version() == 6) {
   b7758:	2b06      	cmp	r3, #6
   b775a:	d107      	bne.n	b776c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b775c:	6843      	ldr	r3, [r0, #4]
   b775e:	b93b      	cbnz	r3, b7770 <_ZNK9IPAddresscvbEv+0x28>
   b7760:	6883      	ldr	r3, [r0, #8]
   b7762:	b92b      	cbnz	r3, b7770 <_ZNK9IPAddresscvbEv+0x28>
   b7764:	68c3      	ldr	r3, [r0, #12]
   b7766:	b91b      	cbnz	r3, b7770 <_ZNK9IPAddresscvbEv+0x28>
   b7768:	6900      	ldr	r0, [r0, #16]
   b776a:	e7f1      	b.n	b7750 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b776c:	2000      	movs	r0, #0
   b776e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7770:	2001      	movs	r0, #1
}
   b7772:	4770      	bx	lr

000b7774 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7774:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7776:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b777a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b777e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7782:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7786:	2304      	movs	r3, #4
   b7788:	6041      	str	r1, [r0, #4]
   b778a:	7503      	strb	r3, [r0, #20]
}
   b778c:	bd10      	pop	{r4, pc}
	...

000b7790 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b7790:	b513      	push	{r0, r1, r4, lr}
   b7792:	4c04      	ldr	r4, [pc, #16]	; (b77a4 <_ZN9IPAddressC1Ehhhh+0x14>)
   b7794:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b7796:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b779a:	9400      	str	r4, [sp, #0]
   b779c:	f7ff ffea 	bl	b7774 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b77a0:	b002      	add	sp, #8
   b77a2:	bd10      	pop	{r4, pc}
   b77a4:	000bb43c 	.word	0x000bb43c

000b77a8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b77a8:	b507      	push	{r0, r1, r2, lr}
   b77aa:	4b06      	ldr	r3, [pc, #24]	; (b77c4 <_ZN9IPAddressC1EPKh+0x1c>)
   b77ac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b77ae:	78cb      	ldrb	r3, [r1, #3]
   b77b0:	9300      	str	r3, [sp, #0]
   b77b2:	788b      	ldrb	r3, [r1, #2]
   b77b4:	784a      	ldrb	r2, [r1, #1]
   b77b6:	7809      	ldrb	r1, [r1, #0]
   b77b8:	f7ff ffdc 	bl	b7774 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b77bc:	b003      	add	sp, #12
   b77be:	f85d fb04 	ldr.w	pc, [sp], #4
   b77c2:	bf00      	nop
   b77c4:	000bb43c 	.word	0x000bb43c

000b77c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b77c8:	7441      	strb	r1, [r0, #17]
}
   b77ca:	4770      	bx	lr

000b77cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b77cc:	4770      	bx	lr

000b77ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b77ce:	4770      	bx	lr

000b77d0 <_ZN9USBSerial4readEv>:
{
   b77d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b77d2:	2100      	movs	r1, #0
   b77d4:	7c00      	ldrb	r0, [r0, #16]
   b77d6:	f7fe fc01 	bl	b5fdc <HAL_USB_USART_Receive_Data>
}
   b77da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77de:	bd08      	pop	{r3, pc}

000b77e0 <_ZN9USBSerial4peekEv>:
{
   b77e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b77e2:	2101      	movs	r1, #1
   b77e4:	7c00      	ldrb	r0, [r0, #16]
   b77e6:	f7fe fbf9 	bl	b5fdc <HAL_USB_USART_Receive_Data>
}
   b77ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b77ee:	bd08      	pop	{r3, pc}

000b77f0 <_ZN9USBSerial17availableForWriteEv>:
{
   b77f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b77f2:	7c00      	ldrb	r0, [r0, #16]
   b77f4:	f7fe fbea 	bl	b5fcc <HAL_USB_USART_Available_Data_For_Write>
}
   b77f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b77fc:	bd08      	pop	{r3, pc}

000b77fe <_ZN9USBSerial9availableEv>:
{
   b77fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7800:	7c00      	ldrb	r0, [r0, #16]
   b7802:	f7fe fbdb 	bl	b5fbc <HAL_USB_USART_Available_Data>
}
   b7806:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b780a:	bd08      	pop	{r3, pc}

000b780c <_ZN9USBSerial5writeEh>:
{
   b780c:	b513      	push	{r0, r1, r4, lr}
   b780e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7810:	7c00      	ldrb	r0, [r0, #16]
{
   b7812:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7814:	f7fe fbda 	bl	b5fcc <HAL_USB_USART_Available_Data_For_Write>
   b7818:	2800      	cmp	r0, #0
   b781a:	9901      	ldr	r1, [sp, #4]
   b781c:	dc01      	bgt.n	b7822 <_ZN9USBSerial5writeEh+0x16>
   b781e:	7c60      	ldrb	r0, [r4, #17]
   b7820:	b120      	cbz	r0, b782c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7822:	7c20      	ldrb	r0, [r4, #16]
   b7824:	f7fe fbe2 	bl	b5fec <HAL_USB_USART_Send_Data>
   b7828:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b782c:	b002      	add	sp, #8
   b782e:	bd10      	pop	{r4, pc}

000b7830 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7830:	7c00      	ldrb	r0, [r0, #16]
   b7832:	f7fe bbe3 	b.w	b5ffc <HAL_USB_USART_Flush_Data>

000b7836 <_ZN9USBSerialD0Ev>:
   b7836:	b510      	push	{r4, lr}
   b7838:	2114      	movs	r1, #20
   b783a:	4604      	mov	r4, r0
   b783c:	f7fc fc31 	bl	b40a2 <_ZdlPvj>
   b7840:	4620      	mov	r0, r4
   b7842:	bd10      	pop	{r4, pc}

000b7844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7844:	b510      	push	{r4, lr}
   b7846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b784a:	4604      	mov	r4, r0
   b784c:	4608      	mov	r0, r1
   b784e:	2100      	movs	r1, #0
   b7850:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7854:	4b04      	ldr	r3, [pc, #16]	; (b7868 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7856:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7858:	2301      	movs	r3, #1
  _serial = serial;
   b785a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b785c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b785e:	4611      	mov	r1, r2
   b7860:	f7fe fba4 	bl	b5fac <HAL_USB_USART_Init>
}
   b7864:	4620      	mov	r0, r4
   b7866:	bd10      	pop	{r4, pc}
   b7868:	000bb450 	.word	0x000bb450

000b786c <_Z19acquireSerialBufferv>:
{
   b786c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b786e:	2214      	movs	r2, #20
{
   b7870:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7872:	2100      	movs	r1, #0
   b7874:	f001 fb73 	bl	b8f5e <memset>
}
   b7878:	4620      	mov	r0, r4
   b787a:	bd10      	pop	{r4, pc}

000b787c <_Z16_fetch_usbserialv>:
{
   b787c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b787e:	4c0f      	ldr	r4, [pc, #60]	; (b78bc <_Z16_fetch_usbserialv+0x40>)
{
   b7880:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7882:	a803      	add	r0, sp, #12
   b7884:	f7ff fff2 	bl	b786c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7888:	7821      	ldrb	r1, [r4, #0]
   b788a:	f3bf 8f5b 	dmb	ish
   b788e:	f011 0101 	ands.w	r1, r1, #1
   b7892:	d10f      	bne.n	b78b4 <_Z16_fetch_usbserialv+0x38>
   b7894:	4620      	mov	r0, r4
   b7896:	9101      	str	r1, [sp, #4]
   b7898:	f7fc fc05 	bl	b40a6 <__cxa_guard_acquire>
   b789c:	9901      	ldr	r1, [sp, #4]
   b789e:	b148      	cbz	r0, b78b4 <_Z16_fetch_usbserialv+0x38>
   b78a0:	aa03      	add	r2, sp, #12
   b78a2:	4807      	ldr	r0, [pc, #28]	; (b78c0 <_Z16_fetch_usbserialv+0x44>)
   b78a4:	f7ff ffce 	bl	b7844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b78a8:	4620      	mov	r0, r4
   b78aa:	f7fc fc01 	bl	b40b0 <__cxa_guard_release>
   b78ae:	4805      	ldr	r0, [pc, #20]	; (b78c4 <_Z16_fetch_usbserialv+0x48>)
   b78b0:	f001 fb26 	bl	b8f00 <atexit>
	return _usbserial;
}
   b78b4:	4802      	ldr	r0, [pc, #8]	; (b78c0 <_Z16_fetch_usbserialv+0x44>)
   b78b6:	b008      	add	sp, #32
   b78b8:	bd10      	pop	{r4, pc}
   b78ba:	bf00      	nop
   b78bc:	2003e6f8 	.word	0x2003e6f8
   b78c0:	2003e6fc 	.word	0x2003e6fc
   b78c4:	000b77cd 	.word	0x000b77cd

000b78c8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b78c8:	4700      	bx	r0
	...

000b78cc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b78cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b78d0:	2400      	movs	r4, #0
{
   b78d2:	461d      	mov	r5, r3
   b78d4:	460f      	mov	r7, r1
   b78d6:	4690      	mov	r8, r2
   b78d8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b78da:	f7fe fa0f 	bl	b5cfc <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b78de:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b78e0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b78e4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b78e8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b78ec:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b78f0:	bfa2      	ittt	ge
   b78f2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b78f6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b78fa:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b78fc:	4907      	ldr	r1, [pc, #28]	; (b791c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b78fe:	9400      	str	r4, [sp, #0]
   b7900:	4643      	mov	r3, r8
   b7902:	463a      	mov	r2, r7
   b7904:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b7906:	bfa8      	it	ge
   b7908:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b790c:	f7fe f9ee 	bl	b5cec <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b7910:	fab0 f080 	clz	r0, r0
   b7914:	0940      	lsrs	r0, r0, #5
   b7916:	b004      	add	sp, #16
   b7918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b791c:	000b78c9 	.word	0x000b78c9

000b7920 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7920:	4770      	bx	lr

000b7922 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7922:	7441      	strb	r1, [r0, #17]
}
   b7924:	4770      	bx	lr

000b7926 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7926:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7928:	7c00      	ldrb	r0, [r0, #16]
   b792a:	f7fe fa9f 	bl	b5e6c <hal_usart_available_data_for_write>
}
   b792e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7932:	bd08      	pop	{r3, pc}

000b7934 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7934:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7936:	7c00      	ldrb	r0, [r0, #16]
   b7938:	f7fe fa70 	bl	b5e1c <hal_usart_available>
}
   b793c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7940:	bd08      	pop	{r3, pc}

000b7942 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7942:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7944:	7c00      	ldrb	r0, [r0, #16]
   b7946:	f7fe fa79 	bl	b5e3c <hal_usart_peek>
}
   b794a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b794e:	bd08      	pop	{r3, pc}

000b7950 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7950:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7952:	7c00      	ldrb	r0, [r0, #16]
   b7954:	f7fe fa6a 	bl	b5e2c <hal_usart_read>
}
   b7958:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b795c:	bd08      	pop	{r3, pc}

000b795e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b795e:	7c00      	ldrb	r0, [r0, #16]
   b7960:	f7fe ba74 	b.w	b5e4c <hal_usart_flush>

000b7964 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7964:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7966:	7c45      	ldrb	r5, [r0, #17]
{
   b7968:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b796a:	b12d      	cbz	r5, b7978 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b796c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b796e:	b003      	add	sp, #12
   b7970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7974:	f7fe ba4a 	b.w	b5e0c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7978:	7c00      	ldrb	r0, [r0, #16]
   b797a:	9101      	str	r1, [sp, #4]
   b797c:	f7fe fa76 	bl	b5e6c <hal_usart_available_data_for_write>
   b7980:	2800      	cmp	r0, #0
   b7982:	9901      	ldr	r1, [sp, #4]
   b7984:	dcf2      	bgt.n	b796c <_ZN11USARTSerial5writeEh+0x8>
}
   b7986:	4628      	mov	r0, r5
   b7988:	b003      	add	sp, #12
   b798a:	bd30      	pop	{r4, r5, pc}

000b798c <_ZN11USARTSerialD0Ev>:
   b798c:	b510      	push	{r4, lr}
   b798e:	2114      	movs	r1, #20
   b7990:	4604      	mov	r4, r0
   b7992:	f7fc fb86 	bl	b40a2 <_ZdlPvj>
   b7996:	4620      	mov	r0, r4
   b7998:	bd10      	pop	{r4, pc}
	...

000b799c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b799c:	b510      	push	{r4, lr}
   b799e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b79a2:	4604      	mov	r4, r0
   b79a4:	4608      	mov	r0, r1
   b79a6:	4611      	mov	r1, r2
   b79a8:	2200      	movs	r2, #0
   b79aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b79ae:	4b04      	ldr	r3, [pc, #16]	; (b79c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b79b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b79b2:	2301      	movs	r3, #1
  _serial = serial;
   b79b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b79b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b79b8:	f7fe fa60 	bl	b5e7c <hal_usart_init_ex>
}
   b79bc:	4620      	mov	r0, r4
   b79be:	bd10      	pop	{r4, pc}
   b79c0:	000bb480 	.word	0x000bb480

000b79c4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b79c4:	b510      	push	{r4, lr}
      if (_M_empty())
   b79c6:	6883      	ldr	r3, [r0, #8]
   b79c8:	4604      	mov	r4, r0
   b79ca:	b90b      	cbnz	r3, b79d0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b79cc:	f000 fcee 	bl	b83ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b79d0:	68c3      	ldr	r3, [r0, #12]
   b79d2:	4798      	blx	r3
      if (_M_manager)
   b79d4:	68a3      	ldr	r3, [r4, #8]
   b79d6:	b11b      	cbz	r3, b79e0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b79d8:	2203      	movs	r2, #3
   b79da:	4621      	mov	r1, r4
   b79dc:	4620      	mov	r0, r4
   b79de:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b79e0:	4620      	mov	r0, r4
   b79e2:	2110      	movs	r1, #16
}
   b79e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b79e8:	f7fc bb5b 	b.w	b40a2 <_ZdlPvj>

000b79ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b79ec:	4770      	bx	lr

000b79ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b79ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79f0:	4606      	mov	r6, r0
   b79f2:	4615      	mov	r5, r2
   b79f4:	460c      	mov	r4, r1
   b79f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b79f8:	42bc      	cmp	r4, r7
   b79fa:	d006      	beq.n	b7a0a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b79fc:	6833      	ldr	r3, [r6, #0]
   b79fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7a02:	689b      	ldr	r3, [r3, #8]
   b7a04:	4630      	mov	r0, r6
   b7a06:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7a08:	e7f6      	b.n	b79f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7a0a:	4628      	mov	r0, r5
   b7a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7a0e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7a0e:	7c00      	ldrb	r0, [r0, #16]
   b7a10:	2200      	movs	r2, #0
   b7a12:	f7fe ba3b 	b.w	b5e8c <hal_i2c_write>

000b7a16 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7a16:	7c00      	ldrb	r0, [r0, #16]
   b7a18:	2100      	movs	r1, #0
   b7a1a:	f7fe ba3f 	b.w	b5e9c <hal_i2c_available>

000b7a1e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7a1e:	7c00      	ldrb	r0, [r0, #16]
   b7a20:	2100      	movs	r1, #0
   b7a22:	f7fe ba43 	b.w	b5eac <hal_i2c_read>

000b7a26 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7a26:	7c00      	ldrb	r0, [r0, #16]
   b7a28:	2100      	movs	r1, #0
   b7a2a:	f7fe ba47 	b.w	b5ebc <hal_i2c_peek>

000b7a2e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7a2e:	7c00      	ldrb	r0, [r0, #16]
   b7a30:	2100      	movs	r1, #0
   b7a32:	f7fe ba4b 	b.w	b5ecc <hal_i2c_flush>

000b7a36 <_ZN7TwoWireD0Ev>:
   b7a36:	b510      	push	{r4, lr}
   b7a38:	2114      	movs	r1, #20
   b7a3a:	4604      	mov	r4, r0
   b7a3c:	f7fc fb31 	bl	b40a2 <_ZdlPvj>
   b7a40:	4620      	mov	r0, r4
   b7a42:	bd10      	pop	{r4, pc}

000b7a44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7a44:	b510      	push	{r4, lr}
   b7a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7a4a:	4604      	mov	r4, r0
   b7a4c:	4608      	mov	r0, r1
   b7a4e:	2100      	movs	r1, #0
   b7a50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7a54:	4b03      	ldr	r3, [pc, #12]	; (b7a64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7a56:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7a58:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7a5a:	4611      	mov	r1, r2
   b7a5c:	f7fe fa46 	bl	b5eec <hal_i2c_init>
}
   b7a60:	4620      	mov	r0, r4
   b7a62:	bd10      	pop	{r4, pc}
   b7a64:	000bb4b0 	.word	0x000bb4b0

000b7a68 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7a68:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7a6a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7a6c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7a70:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7a72:	2201      	movs	r2, #1
   b7a74:	f04f 33ff 	mov.w	r3, #4294967295
   b7a78:	f10d 0107 	add.w	r1, sp, #7
   b7a7c:	47a0      	blx	r4
}
   b7a7e:	b002      	add	sp, #8
   b7a80:	bd10      	pop	{r4, pc}

000b7a82 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7a82:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7a84:	6803      	ldr	r3, [r0, #0]
   b7a86:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7a88:	f04f 33ff 	mov.w	r3, #4294967295
   b7a8c:	46a4      	mov	ip, r4
}
   b7a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7a92:	4760      	bx	ip

000b7a94 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7a94:	b513      	push	{r0, r1, r4, lr}
   b7a96:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7a98:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7a9a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7a9e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7aa0:	f10d 0107 	add.w	r1, sp, #7
   b7aa4:	2201      	movs	r2, #1
   b7aa6:	47a0      	blx	r4
}
   b7aa8:	b002      	add	sp, #8
   b7aaa:	bd10      	pop	{r4, pc}

000b7aac <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7aac:	b510      	push	{r4, lr}
   b7aae:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7ab0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7ab4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7ab8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7aba:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7abc:	d008      	beq.n	b7ad0 <_ZN9TCPClient4readEv+0x24>
   b7abe:	6963      	ldr	r3, [r4, #20]
   b7ac0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7ac4:	1c51      	adds	r1, r2, #1
   b7ac6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7aca:	4413      	add	r3, r2
   b7acc:	7918      	ldrb	r0, [r3, #4]
}
   b7ace:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7ad0:	6803      	ldr	r3, [r0, #0]
   b7ad2:	691b      	ldr	r3, [r3, #16]
   b7ad4:	4798      	blx	r3
   b7ad6:	2800      	cmp	r0, #0
   b7ad8:	d1f1      	bne.n	b7abe <_ZN9TCPClient4readEv+0x12>
   b7ada:	f04f 30ff 	mov.w	r0, #4294967295
   b7ade:	e7f6      	b.n	b7ace <_ZN9TCPClient4readEv+0x22>

000b7ae0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7ae0:	4770      	bx	lr

000b7ae2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7ae2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7ae4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7ae6:	43c0      	mvns	r0, r0
   b7ae8:	0fc0      	lsrs	r0, r0, #31
   b7aea:	4770      	bx	lr

000b7aec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7aec:	4770      	bx	lr
	...

000b7af0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7af0:	4b06      	ldr	r3, [pc, #24]	; (b7b0c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7af2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7af4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7af6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7afa:	d005      	beq.n	b7b08 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7afc:	4608      	mov	r0, r1
   b7afe:	f000 fc59 	bl	b83b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7b02:	2800      	cmp	r0, #0
   b7b04:	bf08      	it	eq
   b7b06:	2400      	moveq	r4, #0
      }
   b7b08:	4620      	mov	r0, r4
   b7b0a:	bd10      	pop	{r4, pc}
   b7b0c:	000bb3f0 	.word	0x000bb3f0

000b7b10 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7b10:	b510      	push	{r4, lr}
   b7b12:	21ac      	movs	r1, #172	; 0xac
   b7b14:	4604      	mov	r4, r0
   b7b16:	f7fc fac4 	bl	b40a2 <_ZdlPvj>
   b7b1a:	4620      	mov	r0, r4
   b7b1c:	bd10      	pop	{r4, pc}

000b7b1e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7b1e:	21ac      	movs	r1, #172	; 0xac
   b7b20:	f7fc babf 	b.w	b40a2 <_ZdlPvj>

000b7b24 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7b28:	f04f 0800 	mov.w	r8, #0
   b7b2c:	b086      	sub	sp, #24
   b7b2e:	461c      	mov	r4, r3
   b7b30:	f8c0 8004 	str.w	r8, [r0, #4]
   b7b34:	4605      	mov	r5, r0
   b7b36:	460e      	mov	r6, r1
   b7b38:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7b3a:	4641      	mov	r1, r8
   b7b3c:	2210      	movs	r2, #16
   b7b3e:	a802      	add	r0, sp, #8
   b7b40:	f001 fa0d 	bl	b8f5e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7b44:	1c63      	adds	r3, r4, #1
   b7b46:	d009      	beq.n	b7b5c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b4c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7b50:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7b54:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7b58:	435c      	muls	r4, r3
   b7b5a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7b5c:	6968      	ldr	r0, [r5, #20]
   b7b5e:	2310      	movs	r3, #16
   b7b60:	9300      	str	r3, [sp, #0]
   b7b62:	6800      	ldr	r0, [r0, #0]
   b7b64:	ab02      	add	r3, sp, #8
   b7b66:	f241 0205 	movw	r2, #4101	; 0x1005
   b7b6a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7b6e:	f7fe f9cd 	bl	b5f0c <sock_setsockopt>
    if (ret < 0) {
   b7b72:	2800      	cmp	r0, #0
   b7b74:	da07      	bge.n	b7b86 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7b76:	f7fe fb6d 	bl	b6254 <__errno>
   b7b7a:	6803      	ldr	r3, [r0, #0]
   b7b7c:	606b      	str	r3, [r5, #4]
        return 0;
   b7b7e:	2000      	movs	r0, #0
}
   b7b80:	b006      	add	sp, #24
   b7b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7b86:	6968      	ldr	r0, [r5, #20]
   b7b88:	2300      	movs	r3, #0
   b7b8a:	6800      	ldr	r0, [r0, #0]
   b7b8c:	463a      	mov	r2, r7
   b7b8e:	4631      	mov	r1, r6
   b7b90:	f7fe f9e4 	bl	b5f5c <sock_send>
    if (ret < 0) {
   b7b94:	1e03      	subs	r3, r0, #0
   b7b96:	dbee      	blt.n	b7b76 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7b98:	4618      	mov	r0, r3
   b7b9a:	e7f1      	b.n	b7b80 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7b9c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7b9c:	b530      	push	{r4, r5, lr}
   b7b9e:	b087      	sub	sp, #28
   b7ba0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7ba2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7ba4:	4668      	mov	r0, sp
   b7ba6:	f7ff fdff 	bl	b77a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7bac:	3404      	adds	r4, #4
   b7bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7bb0:	682b      	ldr	r3, [r5, #0]
   b7bb2:	7023      	strb	r3, [r4, #0]
    }
   b7bb4:	b007      	add	sp, #28
   b7bb6:	bd30      	pop	{r4, r5, pc}

000b7bb8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7bb8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7bba:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7bbc:	4b05      	ldr	r3, [pc, #20]	; (b7bd4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7bbe:	4604      	mov	r4, r0
   b7bc0:	358c      	adds	r5, #140	; 0x8c
   b7bc2:	f844 3b04 	str.w	r3, [r4], #4
   b7bc6:	4606      	mov	r6, r0
   b7bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7bcc:	682b      	ldr	r3, [r5, #0]
   b7bce:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7bd0:	4630      	mov	r0, r6
   b7bd2:	bd70      	pop	{r4, r5, r6, pc}
   b7bd4:	000bb43c 	.word	0x000bb43c

000b7bd8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7bdc:	4698      	mov	r8, r3
    stop();
   b7bde:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7be0:	b093      	sub	sp, #76	; 0x4c
   b7be2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7be4:	2400      	movs	r4, #0
    stop();
   b7be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7be8:	4606      	mov	r6, r0
   b7bea:	4617      	mov	r7, r2
    stop();
   b7bec:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7bee:	4628      	mov	r0, r5
   b7bf0:	466b      	mov	r3, sp
   b7bf2:	4622      	mov	r2, r4
   b7bf4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7bf6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7bf8:	f7fe f858 	bl	b5cac <netdb_getaddrinfo>
   b7bfc:	4605      	mov	r5, r0
   b7bfe:	2800      	cmp	r0, #0
   b7c00:	d163      	bne.n	b7cca <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7c02:	9b00      	ldr	r3, [sp, #0]
   b7c04:	2b00      	cmp	r3, #0
   b7c06:	d04b      	beq.n	b7ca0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7c08:	695b      	ldr	r3, [r3, #20]
   b7c0a:	2b00      	cmp	r3, #0
   b7c0c:	d048      	beq.n	b7ca0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7c0e:	a806      	add	r0, sp, #24
   b7c10:	f7ff fd72 	bl	b76f8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7c14:	9b00      	ldr	r3, [sp, #0]
   b7c16:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   b7c18:	7863      	ldrb	r3, [r4, #1]
   b7c1a:	2b02      	cmp	r3, #2
   b7c1c:	d104      	bne.n	b7c28 <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7c1e:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   b7c20:	a806      	add	r0, sp, #24
   b7c22:	f7ff ffbb 	bl	b7b9c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        if (port) {
   b7c26:	e026      	b.n	b7c76 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7c28:	2b0a      	cmp	r3, #10
   b7c2a:	d124      	bne.n	b7c76 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7c2c:	2211      	movs	r2, #17
   b7c2e:	4629      	mov	r1, r5
   b7c30:	a801      	add	r0, sp, #4
   b7c32:	f001 f994 	bl	b8f5e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7c36:	68a3      	ldr	r3, [r4, #8]
   b7c38:	2b00      	cmp	r3, #0
   b7c3a:	d038      	beq.n	b7cae <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7c3c:	f104 0308 	add.w	r3, r4, #8
   b7c40:	f10d 0c04 	add.w	ip, sp, #4
   b7c44:	3418      	adds	r4, #24
   b7c46:	6818      	ldr	r0, [r3, #0]
   b7c48:	6859      	ldr	r1, [r3, #4]
   b7c4a:	4662      	mov	r2, ip
   b7c4c:	c203      	stmia	r2!, {r0, r1}
   b7c4e:	3308      	adds	r3, #8
   b7c50:	42a3      	cmp	r3, r4
   b7c52:	4694      	mov	ip, r2
   b7c54:	d1f7      	bne.n	b7c46 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7c56:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7c58:	a901      	add	r1, sp, #4
   b7c5a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7c5c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7c60:	f7ff fd58 	bl	b7714 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7c64:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7c68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7c6c:	ac07      	add	r4, sp, #28
   b7c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7c70:	f8dc 3000 	ldr.w	r3, [ip]
   b7c74:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7c76:	a806      	add	r0, sp, #24
   b7c78:	f7ff fd66 	bl	b7748 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7c7c:	b180      	cbz	r0, b7ca0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7c7e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7c80:	ad07      	add	r5, sp, #28
   b7c82:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7c86:	4b12      	ldr	r3, [pc, #72]	; (b7cd0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7c88:	930c      	str	r3, [sp, #48]	; 0x30
   b7c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7c8c:	ac0d      	add	r4, sp, #52	; 0x34
   b7c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7c90:	682b      	ldr	r3, [r5, #0]
   b7c92:	7023      	strb	r3, [r4, #0]
   b7c94:	463a      	mov	r2, r7
   b7c96:	4643      	mov	r3, r8
   b7c98:	a90c      	add	r1, sp, #48	; 0x30
   b7c9a:	4630      	mov	r0, r6
   b7c9c:	47c8      	blx	r9
   b7c9e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7ca0:	9800      	ldr	r0, [sp, #0]
   b7ca2:	f7fd fffb 	bl	b5c9c <netdb_freeaddrinfo>
}
   b7ca6:	4628      	mov	r0, r5
   b7ca8:	b013      	add	sp, #76	; 0x4c
   b7caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7cae:	68e3      	ldr	r3, [r4, #12]
   b7cb0:	2b00      	cmp	r3, #0
   b7cb2:	d1c3      	bne.n	b7c3c <_ZN9TCPClient7connectEPKctm+0x64>
   b7cb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7cb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7cbc:	f7fe f88e 	bl	b5ddc <inet_htonl>
   b7cc0:	4581      	cmp	r9, r0
   b7cc2:	d1bb      	bne.n	b7c3c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7cc4:	f104 0114 	add.w	r1, r4, #20
   b7cc8:	e7aa      	b.n	b7c20 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7cca:	4625      	mov	r5, r4
   b7ccc:	e7e8      	b.n	b7ca0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7cce:	bf00      	nop
   b7cd0:	000bb43c 	.word	0x000bb43c

000b7cd4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7cd4:	b538      	push	{r3, r4, r5, lr}
   b7cd6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7cd8:	681a      	ldr	r2, [r3, #0]
   b7cda:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7cdc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7cde:	da10      	bge.n	b7d02 <_ZN9TCPClient9connectedEv+0x2e>
   b7ce0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7ce4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7ce8:	429a      	cmp	r2, r3
   b7cea:	d10a      	bne.n	b7d02 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7cec:	6803      	ldr	r3, [r0, #0]
   b7cee:	691b      	ldr	r3, [r3, #16]
   b7cf0:	4798      	blx	r3
        if (!rv) {
   b7cf2:	4604      	mov	r4, r0
   b7cf4:	b928      	cbnz	r0, b7d02 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7cf6:	682b      	ldr	r3, [r5, #0]
   b7cf8:	4628      	mov	r0, r5
   b7cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7cfc:	4798      	blx	r3
        rv = available();
   b7cfe:	4620      	mov	r0, r4
}
   b7d00:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7d02:	2001      	movs	r0, #1
   b7d04:	e7fc      	b.n	b7d00 <_ZN9TCPClient9connectedEv+0x2c>

000b7d06 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7d06:	b510      	push	{r4, lr}
   b7d08:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d0a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d0e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7d12:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7d14:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d16:	d005      	beq.n	b7d24 <_ZN9TCPClient4peekEv+0x1e>
   b7d18:	6963      	ldr	r3, [r4, #20]
   b7d1a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7d1e:	4413      	add	r3, r2
   b7d20:	7918      	ldrb	r0, [r3, #4]
}
   b7d22:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d24:	6803      	ldr	r3, [r0, #0]
   b7d26:	691b      	ldr	r3, [r3, #16]
   b7d28:	4798      	blx	r3
   b7d2a:	2800      	cmp	r0, #0
   b7d2c:	d1f4      	bne.n	b7d18 <_ZN9TCPClient4peekEv+0x12>
   b7d2e:	f04f 30ff 	mov.w	r0, #4294967295
   b7d32:	e7f6      	b.n	b7d22 <_ZN9TCPClient4peekEv+0x1c>

000b7d34 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d36:	6943      	ldr	r3, [r0, #20]
   b7d38:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7d3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d3e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7d42:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7d44:	4605      	mov	r5, r0
   b7d46:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7d48:	d016      	beq.n	b7d78 <_ZN9TCPClient4readEPhj+0x44>
   b7d4a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7d4c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7d50:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7d54:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7d56:	42bc      	cmp	r4, r7
   b7d58:	bf28      	it	cs
   b7d5a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7d5c:	3304      	adds	r3, #4
   b7d5e:	4622      	mov	r2, r4
   b7d60:	4419      	add	r1, r3
   b7d62:	4630      	mov	r0, r6
   b7d64:	f001 f8ed 	bl	b8f42 <memcpy>
   b7d68:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7d6a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7d6e:	4423      	add	r3, r4
   b7d70:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7d74:	4620      	mov	r0, r4
   b7d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7d78:	6803      	ldr	r3, [r0, #0]
   b7d7a:	691b      	ldr	r3, [r3, #16]
   b7d7c:	4798      	blx	r3
   b7d7e:	2800      	cmp	r0, #0
   b7d80:	d1e3      	bne.n	b7d4a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7d82:	f04f 34ff 	mov.w	r4, #4294967295
   b7d86:	e7f5      	b.n	b7d74 <_ZN9TCPClient4readEPhj+0x40>

000b7d88 <_ZN9TCPClient12flush_bufferEv>:
   b7d88:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7d8a:	2300      	movs	r3, #0
   b7d8c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7d90:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7d92:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7d96:	4770      	bx	lr

000b7d98 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d9c:	461f      	mov	r7, r3
    stop();
   b7d9e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7da0:	460c      	mov	r4, r1
    stop();
   b7da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7da4:	b08a      	sub	sp, #40	; 0x28
   b7da6:	4605      	mov	r5, r0
   b7da8:	4616      	mov	r6, r2
    stop();
   b7daa:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7dac:	7d23      	ldrb	r3, [r4, #20]
   b7dae:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7db2:	2b04      	cmp	r3, #4
   b7db4:	bf0c      	ite	eq
   b7db6:	2002      	moveq	r0, #2
   b7db8:	200a      	movne	r0, #10
   b7dba:	2206      	movs	r2, #6
   b7dbc:	2101      	movs	r1, #1
   b7dbe:	f7fe f8dd 	bl	b5f7c <sock_socket>
   b7dc2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7dc6:	696b      	ldr	r3, [r5, #20]
   b7dc8:	681b      	ldr	r3, [r3, #0]
   b7dca:	2b00      	cmp	r3, #0
   b7dcc:	da08      	bge.n	b7de0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7dce:	682b      	ldr	r3, [r5, #0]
   b7dd0:	4628      	mov	r0, r5
   b7dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7dd4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7dd6:	4798      	blx	r3
}
   b7dd8:	4620      	mov	r0, r4
   b7dda:	b00a      	add	sp, #40	; 0x28
   b7ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7de0:	4628      	mov	r0, r5
   b7de2:	f7ff ffd1 	bl	b7d88 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7de6:	b1b7      	cbz	r7, b7e16 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7de8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7dea:	a903      	add	r1, sp, #12
   b7dec:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7dee:	9303      	str	r3, [sp, #12]
   b7df0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7df4:	f7fd ff8a 	bl	b5d0c <if_index_to_name>
   b7df8:	2800      	cmp	r0, #0
   b7dfa:	d1e8      	bne.n	b7dce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7dfc:	6968      	ldr	r0, [r5, #20]
   b7dfe:	2306      	movs	r3, #6
   b7e00:	9300      	str	r3, [sp, #0]
   b7e02:	6800      	ldr	r0, [r0, #0]
   b7e04:	ab03      	add	r3, sp, #12
   b7e06:	f241 020b 	movw	r2, #4107	; 0x100b
   b7e0a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7e0e:	f7fe f87d 	bl	b5f0c <sock_setsockopt>
   b7e12:	2800      	cmp	r0, #0
   b7e14:	d1db      	bne.n	b7dce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7e16:	221c      	movs	r2, #28
   b7e18:	2100      	movs	r1, #0
   b7e1a:	a803      	add	r0, sp, #12
   b7e1c:	f001 f89f 	bl	b8f5e <memset>
    if (ip.version() == 4) {
   b7e20:	7d23      	ldrb	r3, [r4, #20]
   b7e22:	2b04      	cmp	r3, #4
   b7e24:	d11d      	bne.n	b7e62 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7e26:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7e2a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7e2c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7e30:	f7fd ffe4 	bl	b5dfc <inet_htons>
   b7e34:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7e38:	6860      	ldr	r0, [r4, #4]
   b7e3a:	f7fd ffcf 	bl	b5ddc <inet_htonl>
   b7e3e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7e40:	696b      	ldr	r3, [r5, #20]
   b7e42:	221c      	movs	r2, #28
   b7e44:	6818      	ldr	r0, [r3, #0]
   b7e46:	a903      	add	r1, sp, #12
   b7e48:	f7fe f870 	bl	b5f2c <sock_connect>
   b7e4c:	2800      	cmp	r0, #0
   b7e4e:	d1be      	bne.n	b7dce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7e50:	3404      	adds	r4, #4
   b7e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7e54:	696d      	ldr	r5, [r5, #20]
   b7e56:	358c      	adds	r5, #140	; 0x8c
   b7e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7e5a:	6823      	ldr	r3, [r4, #0]
   b7e5c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7e5e:	2401      	movs	r4, #1
   b7e60:	e7ba      	b.n	b7dd8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7e62:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7e66:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7e68:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7e6c:	f7fd ffc6 	bl	b5dfc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7e70:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7e72:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7e76:	1d23      	adds	r3, r4, #4
   b7e78:	f104 0714 	add.w	r7, r4, #20
   b7e7c:	6818      	ldr	r0, [r3, #0]
   b7e7e:	6859      	ldr	r1, [r3, #4]
   b7e80:	4632      	mov	r2, r6
   b7e82:	c203      	stmia	r2!, {r0, r1}
   b7e84:	3308      	adds	r3, #8
   b7e86:	42bb      	cmp	r3, r7
   b7e88:	4616      	mov	r6, r2
   b7e8a:	d1f7      	bne.n	b7e7c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7e8c:	e7d8      	b.n	b7e40 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7e90 <_ZN9TCPClient9availableEv>:
{
   b7e90:	b530      	push	{r4, r5, lr}
   b7e92:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7e94:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7e98:	b08b      	sub	sp, #44	; 0x2c
   b7e9a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7e9c:	b12b      	cbz	r3, b7eaa <_ZN9TCPClient9availableEv+0x1a>
   b7e9e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7ea2:	429a      	cmp	r2, r3
   b7ea4:	d101      	bne.n	b7eaa <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7ea6:	f7ff ff6f 	bl	b7d88 <_ZN9TCPClient12flush_bufferEv>
   b7eaa:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7eac:	6808      	ldr	r0, [r1, #0]
   b7eae:	2800      	cmp	r0, #0
   b7eb0:	db18      	blt.n	b7ee4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7eb2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7eb6:	2d7f      	cmp	r5, #127	; 0x7f
   b7eb8:	d814      	bhi.n	b7ee4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7eba:	3104      	adds	r1, #4
   b7ebc:	2308      	movs	r3, #8
   b7ebe:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7ec2:	4429      	add	r1, r5
   b7ec4:	f7fe f83a 	bl	b5f3c <sock_recv>
            if (ret > 0) {
   b7ec8:	2800      	cmp	r0, #0
   b7eca:	dd13      	ble.n	b7ef4 <_ZN9TCPClient9availableEv+0x64>
   b7ecc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7ece:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7ed2:	b90a      	cbnz	r2, b7ed8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7ed4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7ed8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7eda:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7ede:	4410      	add	r0, r2
   b7ee0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7ee4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7ee6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7eea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7eee:	1ac0      	subs	r0, r0, r3
   b7ef0:	b00b      	add	sp, #44	; 0x2c
   b7ef2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7ef4:	f7fe f9ae 	bl	b6254 <__errno>
   b7ef8:	6803      	ldr	r3, [r0, #0]
   b7efa:	2b0b      	cmp	r3, #11
   b7efc:	d0f2      	beq.n	b7ee4 <_ZN9TCPClient9availableEv+0x54>
   b7efe:	f7fe f9a9 	bl	b6254 <__errno>
   b7f02:	6803      	ldr	r3, [r0, #0]
   b7f04:	2b0b      	cmp	r3, #11
   b7f06:	d0ed      	beq.n	b7ee4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7f08:	2320      	movs	r3, #32
   b7f0a:	2500      	movs	r5, #0
   b7f0c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7f10:	f7fe f9a0 	bl	b6254 <__errno>
   b7f14:	6803      	ldr	r3, [r0, #0]
   b7f16:	9301      	str	r3, [sp, #4]
   b7f18:	4b08      	ldr	r3, [pc, #32]	; (b7f3c <_ZN9TCPClient9availableEv+0xac>)
   b7f1a:	4909      	ldr	r1, [pc, #36]	; (b7f40 <_ZN9TCPClient9availableEv+0xb0>)
   b7f1c:	9300      	str	r3, [sp, #0]
   b7f1e:	aa02      	add	r2, sp, #8
   b7f20:	462b      	mov	r3, r5
   b7f22:	2032      	movs	r0, #50	; 0x32
   b7f24:	f7fe f872 	bl	b600c <log_message>
                    sock_close(d_->sock);
   b7f28:	6963      	ldr	r3, [r4, #20]
   b7f2a:	6818      	ldr	r0, [r3, #0]
   b7f2c:	f7fd fff6 	bl	b5f1c <sock_close>
   b7f30:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7f32:	f04f 32ff 	mov.w	r2, #4294967295
   b7f36:	601a      	str	r2, [r3, #0]
   b7f38:	e7d4      	b.n	b7ee4 <_ZN9TCPClient9availableEv+0x54>
   b7f3a:	bf00      	nop
   b7f3c:	000bb4d7 	.word	0x000bb4d7
   b7f40:	000bb4d0 	.word	0x000bb4d0

000b7f44 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7f44:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7f46:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7f48:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7f4a:	6818      	ldr	r0, [r3, #0]
   b7f4c:	2800      	cmp	r0, #0
   b7f4e:	db01      	blt.n	b7f54 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7f50:	f7fd ffe4 	bl	b5f1c <sock_close>
   b7f54:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7f56:	f04f 32ff 	mov.w	r2, #4294967295
   b7f5a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7f5c:	6960      	ldr	r0, [r4, #20]
   b7f5e:	2211      	movs	r2, #17
   b7f60:	2100      	movs	r1, #0
   b7f62:	308c      	adds	r0, #140	; 0x8c
   b7f64:	f000 fffb 	bl	b8f5e <memset>
    flush_buffer();
   b7f68:	4620      	mov	r0, r4
}
   b7f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7f6e:	f7ff bf0b 	b.w	b7d88 <_ZN9TCPClient12flush_bufferEv>

000b7f72 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7f72:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7f74:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7f76:	4604      	mov	r4, r0
          total(0) {
   b7f78:	6001      	str	r1, [r0, #0]
   b7f7a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7f7e:	3088      	adds	r0, #136	; 0x88
   b7f80:	f7ff fbba 	bl	b76f8 <_ZN9IPAddressC1Ev>
}
   b7f84:	4620      	mov	r0, r4
   b7f86:	bd10      	pop	{r4, pc}

000b7f88 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f8a:	2300      	movs	r3, #0
   b7f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7f90:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7f94:	4a0e      	ldr	r2, [pc, #56]	; (b7fd0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7f96:	6103      	str	r3, [r0, #16]
   b7f98:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7f9a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7f9c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7f9e:	20ac      	movs	r0, #172	; 0xac
   b7fa0:	9101      	str	r1, [sp, #4]
   b7fa2:	f7fc f878 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7fa6:	1e05      	subs	r5, r0, #0
   b7fa8:	f105 060c 	add.w	r6, r5, #12
   b7fac:	d008      	beq.n	b7fc0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7fae:	2301      	movs	r3, #1
   b7fb0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7fb4:	4b07      	ldr	r3, [pc, #28]	; (b7fd4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7fb6:	9901      	ldr	r1, [sp, #4]
   b7fb8:	602b      	str	r3, [r5, #0]
   b7fba:	4630      	mov	r0, r6
   b7fbc:	f7ff ffd9 	bl	b7f72 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7fc0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7fc2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7fc6:	f7ff fedf 	bl	b7d88 <_ZN9TCPClient12flush_bufferEv>
}
   b7fca:	b002      	add	sp, #8
   b7fcc:	bd70      	pop	{r4, r5, r6, pc}
   b7fce:	bf00      	nop
   b7fd0:	000bb50c 	.word	0x000bb50c
   b7fd4:	000bb4f0 	.word	0x000bb4f0

000b7fd8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7fd8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7fda:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7fde:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7fe0:	f7ff ffd2 	bl	b7f88 <_ZN9TCPClientC1Ei>
}
   b7fe4:	4620      	mov	r0, r4
   b7fe6:	bd10      	pop	{r4, pc}

000b7fe8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7fe8:	b510      	push	{r4, lr}
   b7fea:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7fec:	6800      	ldr	r0, [r0, #0]
   b7fee:	2800      	cmp	r0, #0
   b7ff0:	db01      	blt.n	b7ff6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7ff2:	f7fd ff93 	bl	b5f1c <sock_close>
    }
}
   b7ff6:	4620      	mov	r0, r4
   b7ff8:	bd10      	pop	{r4, pc}

000b7ffa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7ffa:	300c      	adds	r0, #12
   b7ffc:	f7ff bff4 	b.w	b7fe8 <_ZN9TCPClient4DataD1Ev>

000b8000 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8000:	2200      	movs	r2, #0
   b8002:	6840      	ldr	r0, [r0, #4]
   b8004:	4611      	mov	r1, r2
   b8006:	f7fe b865 	b.w	b60d4 <network_ready>

000b800a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b800a:	2200      	movs	r2, #0
   b800c:	6840      	ldr	r0, [r0, #4]
   b800e:	4611      	mov	r1, r2
   b8010:	f7fe b880 	b.w	b6114 <network_listening>

000b8014 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8014:	2200      	movs	r2, #0
   b8016:	6840      	ldr	r0, [r0, #4]
   b8018:	4611      	mov	r1, r2
   b801a:	f7fe b88b 	b.w	b6134 <network_get_listen_timeout>

000b801e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b801e:	6840      	ldr	r0, [r0, #4]
   b8020:	2200      	movs	r2, #0
   b8022:	f7fe b87f 	b.w	b6124 <network_set_listen_timeout>

000b8026 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8026:	6840      	ldr	r0, [r0, #4]
   b8028:	2200      	movs	r2, #0
   b802a:	f081 0101 	eor.w	r1, r1, #1
   b802e:	f7fe b869 	b.w	b6104 <network_listen>

000b8032 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8032:	2300      	movs	r3, #0
   b8034:	6840      	ldr	r0, [r0, #4]
   b8036:	461a      	mov	r2, r3
   b8038:	4619      	mov	r1, r3
   b803a:	f7fe b85b 	b.w	b60f4 <network_off>

000b803e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b803e:	2300      	movs	r3, #0
   b8040:	6840      	ldr	r0, [r0, #4]
   b8042:	461a      	mov	r2, r3
   b8044:	4619      	mov	r1, r3
   b8046:	f7fe b84d 	b.w	b60e4 <network_on>

000b804a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b804a:	2200      	movs	r2, #0
   b804c:	6840      	ldr	r0, [r0, #4]
   b804e:	4611      	mov	r1, r2
   b8050:	f7fe b830 	b.w	b60b4 <network_connecting>

000b8054 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8054:	6840      	ldr	r0, [r0, #4]
   b8056:	2200      	movs	r2, #0
   b8058:	2102      	movs	r1, #2
   b805a:	f7fe b833 	b.w	b60c4 <network_disconnect>

000b805e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b805e:	2300      	movs	r3, #0
   b8060:	6840      	ldr	r0, [r0, #4]
   b8062:	461a      	mov	r2, r3
   b8064:	f7fe b81e 	b.w	b60a4 <network_connect>

000b8068 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8068:	4b02      	ldr	r3, [pc, #8]	; (b8074 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b806a:	2204      	movs	r2, #4
   b806c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b806e:	4a02      	ldr	r2, [pc, #8]	; (b8078 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8070:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8072:	4770      	bx	lr
   b8074:	2003e710 	.word	0x2003e710
   b8078:	000bb558 	.word	0x000bb558

000b807c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b807c:	2300      	movs	r3, #0
   b807e:	6840      	ldr	r0, [r0, #4]
   b8080:	461a      	mov	r2, r3
   b8082:	f7fe b80f 	b.w	b60a4 <network_connect>

000b8086 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8086:	6840      	ldr	r0, [r0, #4]
   b8088:	2200      	movs	r2, #0
   b808a:	2102      	movs	r1, #2
   b808c:	f7fe b81a 	b.w	b60c4 <network_disconnect>

000b8090 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8090:	2200      	movs	r2, #0
   b8092:	6840      	ldr	r0, [r0, #4]
   b8094:	4611      	mov	r1, r2
   b8096:	f7fe b80d 	b.w	b60b4 <network_connecting>

000b809a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b809a:	2200      	movs	r2, #0
   b809c:	6840      	ldr	r0, [r0, #4]
   b809e:	4611      	mov	r1, r2
   b80a0:	f7fe b818 	b.w	b60d4 <network_ready>

000b80a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b80a4:	2300      	movs	r3, #0
   b80a6:	6840      	ldr	r0, [r0, #4]
   b80a8:	461a      	mov	r2, r3
   b80aa:	4619      	mov	r1, r3
   b80ac:	f7fe b81a 	b.w	b60e4 <network_on>

000b80b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b80b0:	2300      	movs	r3, #0
   b80b2:	6840      	ldr	r0, [r0, #4]
   b80b4:	461a      	mov	r2, r3
   b80b6:	4619      	mov	r1, r3
   b80b8:	f7fe b81c 	b.w	b60f4 <network_off>

000b80bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b80bc:	6840      	ldr	r0, [r0, #4]
   b80be:	2100      	movs	r1, #0
   b80c0:	f7fe b840 	b.w	b6144 <network_is_on>

000b80c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b80c4:	6840      	ldr	r0, [r0, #4]
   b80c6:	2100      	movs	r1, #0
   b80c8:	f7fe b844 	b.w	b6154 <network_is_off>

000b80cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b80cc:	6840      	ldr	r0, [r0, #4]
   b80ce:	2200      	movs	r2, #0
   b80d0:	f081 0101 	eor.w	r1, r1, #1
   b80d4:	f7fe b816 	b.w	b6104 <network_listen>

000b80d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b80d8:	6840      	ldr	r0, [r0, #4]
   b80da:	2200      	movs	r2, #0
   b80dc:	f7fe b822 	b.w	b6124 <network_set_listen_timeout>

000b80e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b80e0:	2200      	movs	r2, #0
   b80e2:	6840      	ldr	r0, [r0, #4]
   b80e4:	4611      	mov	r1, r2
   b80e6:	f7fe b825 	b.w	b6134 <network_get_listen_timeout>

000b80ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b80ea:	2200      	movs	r2, #0
   b80ec:	6840      	ldr	r0, [r0, #4]
   b80ee:	4611      	mov	r1, r2
   b80f0:	f7fe b810 	b.w	b6114 <network_listening>

000b80f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b80f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b80f8:	b095      	sub	sp, #84	; 0x54
   b80fa:	4614      	mov	r4, r2
   b80fc:	460d      	mov	r5, r1
   b80fe:	4607      	mov	r7, r0
    IPAddress addr;
   b8100:	f7ff fafa 	bl	b76f8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8104:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8106:	221c      	movs	r2, #28
   b8108:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b810a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b810c:	f000 ff27 	bl	b8f5e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8110:	2340      	movs	r3, #64	; 0x40
   b8112:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8114:	4620      	mov	r0, r4
   b8116:	466b      	mov	r3, sp
   b8118:	aa0c      	add	r2, sp, #48	; 0x30
   b811a:	2100      	movs	r1, #0
   b811c:	f7fd fdc6 	bl	b5cac <netdb_getaddrinfo>
    if (!r) {
   b8120:	4604      	mov	r4, r0
   b8122:	2800      	cmp	r0, #0
   b8124:	d14b      	bne.n	b81be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8126:	4602      	mov	r2, r0
   b8128:	2101      	movs	r1, #1
   b812a:	6868      	ldr	r0, [r5, #4]
   b812c:	f7fd ffd2 	bl	b60d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8130:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8132:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8134:	4622      	mov	r2, r4
   b8136:	6868      	ldr	r0, [r5, #4]
   b8138:	f7fd ffcc 	bl	b60d4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b813c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b813e:	4681      	mov	r9, r0
        bool ok = false;
   b8140:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8142:	2e00      	cmp	r6, #0
   b8144:	d03b      	beq.n	b81be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8146:	2900      	cmp	r1, #0
   b8148:	d139      	bne.n	b81be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b814a:	6873      	ldr	r3, [r6, #4]
   b814c:	2b02      	cmp	r3, #2
   b814e:	d003      	beq.n	b8158 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8150:	2b0a      	cmp	r3, #10
   b8152:	d011      	beq.n	b8178 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8154:	69f6      	ldr	r6, [r6, #28]
   b8156:	e7f4      	b.n	b8142 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8158:	f1b8 0f00 	cmp.w	r8, #0
   b815c:	d0fa      	beq.n	b8154 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b815e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8160:	a806      	add	r0, sp, #24
   b8162:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8164:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8166:	f7ff fb1f 	bl	b77a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b816a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b816c:	1d3c      	adds	r4, r7, #4
   b816e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8170:	682b      	ldr	r3, [r5, #0]
   b8172:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8174:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8176:	e7ed      	b.n	b8154 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8178:	f1b9 0f00 	cmp.w	r9, #0
   b817c:	d0ea      	beq.n	b8154 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b817e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8180:	2210      	movs	r2, #16
   b8182:	a801      	add	r0, sp, #4
   b8184:	f000 feeb 	bl	b8f5e <memset>
                    a.v = 6;
   b8188:	2306      	movs	r3, #6
   b818a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b818e:	ad01      	add	r5, sp, #4
   b8190:	f104 0308 	add.w	r3, r4, #8
   b8194:	3418      	adds	r4, #24
   b8196:	6818      	ldr	r0, [r3, #0]
   b8198:	6859      	ldr	r1, [r3, #4]
   b819a:	462a      	mov	r2, r5
   b819c:	c203      	stmia	r2!, {r0, r1}
   b819e:	3308      	adds	r3, #8
   b81a0:	42a3      	cmp	r3, r4
   b81a2:	4615      	mov	r5, r2
   b81a4:	d1f7      	bne.n	b8196 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b81a6:	a901      	add	r1, sp, #4
   b81a8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b81aa:	ad07      	add	r5, sp, #28
   b81ac:	f7ff fab2 	bl	b7714 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b81b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81b2:	1d3c      	adds	r4, r7, #4
   b81b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b81b6:	682b      	ldr	r3, [r5, #0]
   b81b8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b81ba:	4649      	mov	r1, r9
   b81bc:	e7ca      	b.n	b8154 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b81be:	9800      	ldr	r0, [sp, #0]
   b81c0:	f7fd fd6c 	bl	b5c9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b81c4:	4638      	mov	r0, r7
   b81c6:	b015      	add	sp, #84	; 0x54
   b81c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b81cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b81cc:	4b02      	ldr	r3, [pc, #8]	; (b81d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b81ce:	4a03      	ldr	r2, [pc, #12]	; (b81dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b81d0:	601a      	str	r2, [r3, #0]
   b81d2:	2200      	movs	r2, #0
   b81d4:	605a      	str	r2, [r3, #4]

} // spark
   b81d6:	4770      	bx	lr
   b81d8:	2003e718 	.word	0x2003e718
   b81dc:	000bb594 	.word	0x000bb594

000b81e0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b81e0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b81e2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b81e4:	d902      	bls.n	b81ec <pinAvailable+0xc>
    return false;
   b81e6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b81e8:	b002      	add	sp, #8
   b81ea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b81ec:	f1a0 030b 	sub.w	r3, r0, #11
   b81f0:	2b02      	cmp	r3, #2
   b81f2:	d81a      	bhi.n	b822a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b81f4:	4c17      	ldr	r4, [pc, #92]	; (b8254 <pinAvailable+0x74>)
   b81f6:	7821      	ldrb	r1, [r4, #0]
   b81f8:	f3bf 8f5b 	dmb	ish
   b81fc:	f011 0101 	ands.w	r1, r1, #1
   b8200:	d10b      	bne.n	b821a <pinAvailable+0x3a>
   b8202:	4620      	mov	r0, r4
   b8204:	9101      	str	r1, [sp, #4]
   b8206:	f7fb ff4e 	bl	b40a6 <__cxa_guard_acquire>
   b820a:	9901      	ldr	r1, [sp, #4]
   b820c:	b128      	cbz	r0, b821a <pinAvailable+0x3a>
   b820e:	4812      	ldr	r0, [pc, #72]	; (b8258 <pinAvailable+0x78>)
   b8210:	f7fe f87e 	bl	b6310 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8214:	4620      	mov	r0, r4
   b8216:	f7fb ff4b 	bl	b40b0 <__cxa_guard_release>
   b821a:	4b0f      	ldr	r3, [pc, #60]	; (b8258 <pinAvailable+0x78>)
   b821c:	7818      	ldrb	r0, [r3, #0]
   b821e:	f7fd febd 	bl	b5f9c <hal_spi_is_enabled>
   b8222:	2800      	cmp	r0, #0
   b8224:	d1df      	bne.n	b81e6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8226:	2001      	movs	r0, #1
   b8228:	e7de      	b.n	b81e8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b822a:	2801      	cmp	r0, #1
   b822c:	d809      	bhi.n	b8242 <pinAvailable+0x62>
   b822e:	f000 f897 	bl	b8360 <_Z19__fetch_global_Wirev>
   b8232:	2100      	movs	r1, #0
   b8234:	7c00      	ldrb	r0, [r0, #16]
   b8236:	f7fd fe51 	bl	b5edc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b823a:	f080 0001 	eor.w	r0, r0, #1
   b823e:	b2c0      	uxtb	r0, r0
   b8240:	e7d2      	b.n	b81e8 <pinAvailable+0x8>
   b8242:	3809      	subs	r0, #9
   b8244:	2801      	cmp	r0, #1
   b8246:	d8ee      	bhi.n	b8226 <pinAvailable+0x46>
   b8248:	f000 f84e 	bl	b82e8 <_Z22__fetch_global_Serial1v>
   b824c:	7c00      	ldrb	r0, [r0, #16]
   b824e:	f7fd fe05 	bl	b5e5c <hal_usart_is_enabled>
   b8252:	e7f2      	b.n	b823a <pinAvailable+0x5a>
   b8254:	2003e720 	.word	0x2003e720
   b8258:	2003e724 	.word	0x2003e724

000b825c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b825c:	2823      	cmp	r0, #35	; 0x23
{
   b825e:	b538      	push	{r3, r4, r5, lr}
   b8260:	4604      	mov	r4, r0
   b8262:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8264:	d80a      	bhi.n	b827c <pinMode+0x20>
   b8266:	29ff      	cmp	r1, #255	; 0xff
   b8268:	d008      	beq.n	b827c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b826a:	f7ff ffb9 	bl	b81e0 <pinAvailable>
   b826e:	b128      	cbz	r0, b827c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8270:	4629      	mov	r1, r5
   b8272:	4620      	mov	r0, r4
}
   b8274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8278:	f7fd bd20 	b.w	b5cbc <HAL_Pin_Mode>
}
   b827c:	bd38      	pop	{r3, r4, r5, pc}

000b827e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b827e:	b538      	push	{r3, r4, r5, lr}
   b8280:	4604      	mov	r4, r0
   b8282:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8284:	f7fd fd22 	bl	b5ccc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8288:	28ff      	cmp	r0, #255	; 0xff
   b828a:	d010      	beq.n	b82ae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b828c:	2806      	cmp	r0, #6
   b828e:	d804      	bhi.n	b829a <digitalWrite+0x1c>
   b8290:	234d      	movs	r3, #77	; 0x4d
   b8292:	fa23 f000 	lsr.w	r0, r3, r0
   b8296:	07c3      	lsls	r3, r0, #31
   b8298:	d409      	bmi.n	b82ae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b829a:	4620      	mov	r0, r4
   b829c:	f7ff ffa0 	bl	b81e0 <pinAvailable>
   b82a0:	b128      	cbz	r0, b82ae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b82a2:	4629      	mov	r1, r5
   b82a4:	4620      	mov	r0, r4
}
   b82a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b82aa:	f7fd bd17 	b.w	b5cdc <HAL_GPIO_Write>
}
   b82ae:	bd38      	pop	{r3, r4, r5, pc}

000b82b0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b82b0:	4770      	bx	lr
	...

000b82b4 <_Z20acquireSerial1Bufferv>:
{
   b82b4:	b538      	push	{r3, r4, r5, lr}
   b82b6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b82b8:	2514      	movs	r5, #20
   b82ba:	462a      	mov	r2, r5
   b82bc:	2100      	movs	r1, #0
   b82be:	f000 fe4e 	bl	b8f5e <memset>
   b82c2:	8025      	strh	r5, [r4, #0]
   b82c4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82c6:	4907      	ldr	r1, [pc, #28]	; (b82e4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b82c8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82ca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b82cc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82ce:	f000 f86b 	bl	b83a8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82d2:	4904      	ldr	r1, [pc, #16]	; (b82e4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b82d4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b82d6:	4628      	mov	r0, r5
   b82d8:	f000 f866 	bl	b83a8 <_ZnajRKSt9nothrow_t>
    };
   b82dc:	60e0      	str	r0, [r4, #12]
}
   b82de:	4620      	mov	r0, r4
   b82e0:	bd38      	pop	{r3, r4, r5, pc}
   b82e2:	bf00      	nop
   b82e4:	000bb5c8 	.word	0x000bb5c8

000b82e8 <_Z22__fetch_global_Serial1v>:
{
   b82e8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b82ea:	4d0e      	ldr	r5, [pc, #56]	; (b8324 <_Z22__fetch_global_Serial1v+0x3c>)
   b82ec:	7829      	ldrb	r1, [r5, #0]
   b82ee:	f3bf 8f5b 	dmb	ish
   b82f2:	f011 0401 	ands.w	r4, r1, #1
{
   b82f6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b82f8:	d111      	bne.n	b831e <_Z22__fetch_global_Serial1v+0x36>
   b82fa:	4628      	mov	r0, r5
   b82fc:	f7fb fed3 	bl	b40a6 <__cxa_guard_acquire>
   b8300:	b168      	cbz	r0, b831e <_Z22__fetch_global_Serial1v+0x36>
   b8302:	a801      	add	r0, sp, #4
   b8304:	f7ff ffd6 	bl	b82b4 <_Z20acquireSerial1Bufferv>
   b8308:	aa01      	add	r2, sp, #4
   b830a:	4621      	mov	r1, r4
   b830c:	4806      	ldr	r0, [pc, #24]	; (b8328 <_Z22__fetch_global_Serial1v+0x40>)
   b830e:	f7ff fb45 	bl	b799c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8312:	4628      	mov	r0, r5
   b8314:	f7fb fecc 	bl	b40b0 <__cxa_guard_release>
   b8318:	4804      	ldr	r0, [pc, #16]	; (b832c <_Z22__fetch_global_Serial1v+0x44>)
   b831a:	f000 fdf1 	bl	b8f00 <atexit>
    return serial1;
}
   b831e:	4802      	ldr	r0, [pc, #8]	; (b8328 <_Z22__fetch_global_Serial1v+0x40>)
   b8320:	b007      	add	sp, #28
   b8322:	bd30      	pop	{r4, r5, pc}
   b8324:	2003e72c 	.word	0x2003e72c
   b8328:	2003e730 	.word	0x2003e730
   b832c:	000b82b1 	.word	0x000b82b1

000b8330 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8330:	4770      	bx	lr
	...

000b8334 <_Z17acquireWireBufferv>:
{
   b8334:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8336:	2520      	movs	r5, #32
   b8338:	2314      	movs	r3, #20
{
   b833a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b833c:	6003      	str	r3, [r0, #0]
   b833e:	6085      	str	r5, [r0, #8]
   b8340:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8342:	4906      	ldr	r1, [pc, #24]	; (b835c <_Z17acquireWireBufferv+0x28>)
   b8344:	4628      	mov	r0, r5
   b8346:	f000 f82f 	bl	b83a8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b834a:	4904      	ldr	r1, [pc, #16]	; (b835c <_Z17acquireWireBufferv+0x28>)
	};
   b834c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b834e:	4628      	mov	r0, r5
   b8350:	f000 f82a 	bl	b83a8 <_ZnajRKSt9nothrow_t>
	};
   b8354:	60e0      	str	r0, [r4, #12]
}
   b8356:	4620      	mov	r0, r4
   b8358:	bd38      	pop	{r3, r4, r5, pc}
   b835a:	bf00      	nop
   b835c:	000bb5c8 	.word	0x000bb5c8

000b8360 <_Z19__fetch_global_Wirev>:
{
   b8360:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8362:	4d0e      	ldr	r5, [pc, #56]	; (b839c <_Z19__fetch_global_Wirev+0x3c>)
   b8364:	7829      	ldrb	r1, [r5, #0]
   b8366:	f3bf 8f5b 	dmb	ish
   b836a:	f011 0401 	ands.w	r4, r1, #1
{
   b836e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8370:	d111      	bne.n	b8396 <_Z19__fetch_global_Wirev+0x36>
   b8372:	4628      	mov	r0, r5
   b8374:	f7fb fe97 	bl	b40a6 <__cxa_guard_acquire>
   b8378:	b168      	cbz	r0, b8396 <_Z19__fetch_global_Wirev+0x36>
   b837a:	a801      	add	r0, sp, #4
   b837c:	f7ff ffda 	bl	b8334 <_Z17acquireWireBufferv>
   b8380:	aa01      	add	r2, sp, #4
   b8382:	4621      	mov	r1, r4
   b8384:	4806      	ldr	r0, [pc, #24]	; (b83a0 <_Z19__fetch_global_Wirev+0x40>)
   b8386:	f7ff fb5d 	bl	b7a44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b838a:	4628      	mov	r0, r5
   b838c:	f7fb fe90 	bl	b40b0 <__cxa_guard_release>
   b8390:	4804      	ldr	r0, [pc, #16]	; (b83a4 <_Z19__fetch_global_Wirev+0x44>)
   b8392:	f000 fdb5 	bl	b8f00 <atexit>
	return wire;
}
   b8396:	4802      	ldr	r0, [pc, #8]	; (b83a0 <_Z19__fetch_global_Wirev+0x40>)
   b8398:	b007      	add	sp, #28
   b839a:	bd30      	pop	{r4, r5, pc}
   b839c:	2003e748 	.word	0x2003e748
   b83a0:	2003e74c 	.word	0x2003e74c
   b83a4:	000b8331 	.word	0x000b8331

000b83a8 <_ZnajRKSt9nothrow_t>:
   b83a8:	f7fb be77 	b.w	b409a <_Znaj>

000b83ac <_ZSt25__throw_bad_function_callv>:
   b83ac:	b508      	push	{r3, lr}
   b83ae:	f7fd ff41 	bl	b6234 <abort>
	...

000b83b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b83b4:	4901      	ldr	r1, [pc, #4]	; (b83bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b83b6:	f000 b8f9 	b.w	b85ac <_ZNKSt9type_infoeqERKS_>
   b83ba:	bf00      	nop
   b83bc:	000bb5e4 	.word	0x000bb5e4

000b83c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b83c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b83c2:	2400      	movs	r4, #0
   b83c4:	2310      	movs	r3, #16
   b83c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b83ca:	6803      	ldr	r3, [r0, #0]
   b83cc:	4615      	mov	r5, r2
   b83ce:	699e      	ldr	r6, [r3, #24]
   b83d0:	6812      	ldr	r2, [r2, #0]
   b83d2:	466b      	mov	r3, sp
   b83d4:	e9cd 4400 	strd	r4, r4, [sp]
   b83d8:	47b0      	blx	r6
   b83da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b83de:	f003 0306 	and.w	r3, r3, #6
   b83e2:	2b06      	cmp	r3, #6
   b83e4:	bf03      	ittte	eq
   b83e6:	9b00      	ldreq	r3, [sp, #0]
   b83e8:	602b      	streq	r3, [r5, #0]
   b83ea:	2001      	moveq	r0, #1
   b83ec:	4620      	movne	r0, r4
   b83ee:	b004      	add	sp, #16
   b83f0:	bd70      	pop	{r4, r5, r6, pc}

000b83f2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b83f2:	9800      	ldr	r0, [sp, #0]
   b83f4:	4290      	cmp	r0, r2
   b83f6:	bf14      	ite	ne
   b83f8:	2001      	movne	r0, #1
   b83fa:	2006      	moveq	r0, #6
   b83fc:	4770      	bx	lr
	...

000b8400 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8400:	b510      	push	{r4, lr}
   b8402:	4b03      	ldr	r3, [pc, #12]	; (b8410 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8404:	6003      	str	r3, [r0, #0]
   b8406:	4604      	mov	r4, r0
   b8408:	f000 f8cd 	bl	b85a6 <_ZNSt9type_infoD1Ev>
   b840c:	4620      	mov	r0, r4
   b840e:	bd10      	pop	{r4, pc}
   b8410:	000bb624 	.word	0x000bb624

000b8414 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8414:	b510      	push	{r4, lr}
   b8416:	4604      	mov	r4, r0
   b8418:	f7ff fff2 	bl	b8400 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b841c:	4620      	mov	r0, r4
   b841e:	2108      	movs	r1, #8
   b8420:	f7fb fe3f 	bl	b40a2 <_ZdlPvj>
   b8424:	4620      	mov	r0, r4
   b8426:	bd10      	pop	{r4, pc}

000b8428 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b842c:	461f      	mov	r7, r3
   b842e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8432:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8436:	4598      	cmp	r8, r3
   b8438:	4606      	mov	r6, r0
   b843a:	4615      	mov	r5, r2
   b843c:	d107      	bne.n	b844e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b843e:	9907      	ldr	r1, [sp, #28]
   b8440:	f000 f8b4 	bl	b85ac <_ZNKSt9type_infoeqERKS_>
   b8444:	b118      	cbz	r0, b844e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8446:	7165      	strb	r5, [r4, #5]
   b8448:	2000      	movs	r0, #0
   b844a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b844e:	4639      	mov	r1, r7
   b8450:	4630      	mov	r0, r6
   b8452:	f000 f8ab 	bl	b85ac <_ZNKSt9type_infoeqERKS_>
   b8456:	2800      	cmp	r0, #0
   b8458:	d0f6      	beq.n	b8448 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b845a:	2301      	movs	r3, #1
   b845c:	f8c4 8000 	str.w	r8, [r4]
   b8460:	7125      	strb	r5, [r4, #4]
   b8462:	71a3      	strb	r3, [r4, #6]
   b8464:	e7f0      	b.n	b8448 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8466 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8466:	b538      	push	{r3, r4, r5, lr}
   b8468:	4615      	mov	r5, r2
   b846a:	461c      	mov	r4, r3
   b846c:	f000 f89e 	bl	b85ac <_ZNKSt9type_infoeqERKS_>
   b8470:	b120      	cbz	r0, b847c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8472:	2308      	movs	r3, #8
   b8474:	60e3      	str	r3, [r4, #12]
   b8476:	2306      	movs	r3, #6
   b8478:	6025      	str	r5, [r4, #0]
   b847a:	7123      	strb	r3, [r4, #4]
   b847c:	bd38      	pop	{r3, r4, r5, pc}

000b847e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b847e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8480:	4605      	mov	r5, r0
   b8482:	460c      	mov	r4, r1
   b8484:	9201      	str	r2, [sp, #4]
   b8486:	461e      	mov	r6, r3
   b8488:	f000 f890 	bl	b85ac <_ZNKSt9type_infoeqERKS_>
   b848c:	b950      	cbnz	r0, b84a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b848e:	2e03      	cmp	r6, #3
   b8490:	d808      	bhi.n	b84a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8492:	6823      	ldr	r3, [r4, #0]
   b8494:	9a01      	ldr	r2, [sp, #4]
   b8496:	695b      	ldr	r3, [r3, #20]
   b8498:	4629      	mov	r1, r5
   b849a:	4620      	mov	r0, r4
   b849c:	b002      	add	sp, #8
   b849e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b84a2:	4718      	bx	r3
   b84a4:	b002      	add	sp, #8
   b84a6:	bd70      	pop	{r4, r5, r6, pc}

000b84a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b84a8:	b510      	push	{r4, lr}
   b84aa:	4b03      	ldr	r3, [pc, #12]	; (b84b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b84ac:	6003      	str	r3, [r0, #0]
   b84ae:	4604      	mov	r4, r0
   b84b0:	f7ff ffa6 	bl	b8400 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b84b4:	4620      	mov	r0, r4
   b84b6:	bd10      	pop	{r4, pc}
   b84b8:	000bb684 	.word	0x000bb684

000b84bc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b84bc:	b510      	push	{r4, lr}
   b84be:	4604      	mov	r4, r0
   b84c0:	f7ff fff2 	bl	b84a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b84c4:	4620      	mov	r0, r4
   b84c6:	210c      	movs	r1, #12
   b84c8:	f7fb fdeb 	bl	b40a2 <_ZdlPvj>
   b84cc:	4620      	mov	r0, r4
   b84ce:	bd10      	pop	{r4, pc}

000b84d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b84d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b84d2:	9f08      	ldr	r7, [sp, #32]
   b84d4:	4297      	cmp	r7, r2
   b84d6:	4605      	mov	r5, r0
   b84d8:	460e      	mov	r6, r1
   b84da:	4614      	mov	r4, r2
   b84dc:	d00a      	beq.n	b84f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b84de:	68a8      	ldr	r0, [r5, #8]
   b84e0:	6802      	ldr	r2, [r0, #0]
   b84e2:	9708      	str	r7, [sp, #32]
   b84e4:	6a15      	ldr	r5, [r2, #32]
   b84e6:	4631      	mov	r1, r6
   b84e8:	4622      	mov	r2, r4
   b84ea:	46ac      	mov	ip, r5
   b84ec:	b003      	add	sp, #12
   b84ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b84f2:	4760      	bx	ip
   b84f4:	4619      	mov	r1, r3
   b84f6:	9301      	str	r3, [sp, #4]
   b84f8:	f000 f858 	bl	b85ac <_ZNKSt9type_infoeqERKS_>
   b84fc:	9b01      	ldr	r3, [sp, #4]
   b84fe:	2800      	cmp	r0, #0
   b8500:	d0ed      	beq.n	b84de <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8502:	2006      	movs	r0, #6
   b8504:	b003      	add	sp, #12
   b8506:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8508 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8508:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b850c:	460d      	mov	r5, r1
   b850e:	4619      	mov	r1, r3
   b8510:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8514:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8518:	4681      	mov	r9, r0
   b851a:	4617      	mov	r7, r2
   b851c:	4698      	mov	r8, r3
   b851e:	f000 f845 	bl	b85ac <_ZNKSt9type_infoeqERKS_>
   b8522:	b190      	cbz	r0, b854a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8524:	2d00      	cmp	r5, #0
   b8526:	6034      	str	r4, [r6, #0]
   b8528:	7137      	strb	r7, [r6, #4]
   b852a:	db09      	blt.n	b8540 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b852c:	1961      	adds	r1, r4, r5
   b852e:	458a      	cmp	sl, r1
   b8530:	bf0c      	ite	eq
   b8532:	2106      	moveq	r1, #6
   b8534:	2101      	movne	r1, #1
   b8536:	71b1      	strb	r1, [r6, #6]
   b8538:	2000      	movs	r0, #0
   b853a:	b001      	add	sp, #4
   b853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8540:	3502      	adds	r5, #2
   b8542:	d1f9      	bne.n	b8538 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8544:	2301      	movs	r3, #1
   b8546:	71b3      	strb	r3, [r6, #6]
   b8548:	e7f6      	b.n	b8538 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b854a:	4554      	cmp	r4, sl
   b854c:	d106      	bne.n	b855c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b854e:	4659      	mov	r1, fp
   b8550:	4648      	mov	r0, r9
   b8552:	f000 f82b 	bl	b85ac <_ZNKSt9type_infoeqERKS_>
   b8556:	b108      	cbz	r0, b855c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8558:	7177      	strb	r7, [r6, #5]
   b855a:	e7ed      	b.n	b8538 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b855c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8560:	6803      	ldr	r3, [r0, #0]
   b8562:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8566:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b856a:	69dc      	ldr	r4, [r3, #28]
   b856c:	463a      	mov	r2, r7
   b856e:	4643      	mov	r3, r8
   b8570:	4629      	mov	r1, r5
   b8572:	46a4      	mov	ip, r4
   b8574:	b001      	add	sp, #4
   b8576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b857a:	4760      	bx	ip

000b857c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8580:	4607      	mov	r7, r0
   b8582:	460c      	mov	r4, r1
   b8584:	4615      	mov	r5, r2
   b8586:	461e      	mov	r6, r3
   b8588:	f7ff ff6d 	bl	b8466 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b858c:	b948      	cbnz	r0, b85a2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b858e:	68b8      	ldr	r0, [r7, #8]
   b8590:	6803      	ldr	r3, [r0, #0]
   b8592:	699f      	ldr	r7, [r3, #24]
   b8594:	462a      	mov	r2, r5
   b8596:	4633      	mov	r3, r6
   b8598:	4621      	mov	r1, r4
   b859a:	46bc      	mov	ip, r7
   b859c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b85a0:	4760      	bx	ip
   b85a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b85a6 <_ZNSt9type_infoD1Ev>:
   b85a6:	4770      	bx	lr

000b85a8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b85a8:	2000      	movs	r0, #0
   b85aa:	4770      	bx	lr

000b85ac <_ZNKSt9type_infoeqERKS_>:
   b85ac:	4281      	cmp	r1, r0
   b85ae:	b508      	push	{r3, lr}
   b85b0:	d00e      	beq.n	b85d0 <_ZNKSt9type_infoeqERKS_+0x24>
   b85b2:	6840      	ldr	r0, [r0, #4]
   b85b4:	7803      	ldrb	r3, [r0, #0]
   b85b6:	2b2a      	cmp	r3, #42	; 0x2a
   b85b8:	d00c      	beq.n	b85d4 <_ZNKSt9type_infoeqERKS_+0x28>
   b85ba:	6849      	ldr	r1, [r1, #4]
   b85bc:	780b      	ldrb	r3, [r1, #0]
   b85be:	2b2a      	cmp	r3, #42	; 0x2a
   b85c0:	bf08      	it	eq
   b85c2:	3101      	addeq	r1, #1
   b85c4:	f000 fd11 	bl	b8fea <strcmp>
   b85c8:	fab0 f080 	clz	r0, r0
   b85cc:	0940      	lsrs	r0, r0, #5
   b85ce:	bd08      	pop	{r3, pc}
   b85d0:	2001      	movs	r0, #1
   b85d2:	e7fc      	b.n	b85ce <_ZNKSt9type_infoeqERKS_+0x22>
   b85d4:	2000      	movs	r0, #0
   b85d6:	e7fa      	b.n	b85ce <_ZNKSt9type_infoeqERKS_+0x22>

000b85d8 <__aeabi_drsub>:
   b85d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b85dc:	e002      	b.n	b85e4 <__adddf3>
   b85de:	bf00      	nop

000b85e0 <__aeabi_dsub>:
   b85e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b85e4 <__adddf3>:
   b85e4:	b530      	push	{r4, r5, lr}
   b85e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b85ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b85ee:	ea94 0f05 	teq	r4, r5
   b85f2:	bf08      	it	eq
   b85f4:	ea90 0f02 	teqeq	r0, r2
   b85f8:	bf1f      	itttt	ne
   b85fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   b85fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8602:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8606:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b860a:	f000 80e2 	beq.w	b87d2 <__adddf3+0x1ee>
   b860e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8612:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8616:	bfb8      	it	lt
   b8618:	426d      	neglt	r5, r5
   b861a:	dd0c      	ble.n	b8636 <__adddf3+0x52>
   b861c:	442c      	add	r4, r5
   b861e:	ea80 0202 	eor.w	r2, r0, r2
   b8622:	ea81 0303 	eor.w	r3, r1, r3
   b8626:	ea82 0000 	eor.w	r0, r2, r0
   b862a:	ea83 0101 	eor.w	r1, r3, r1
   b862e:	ea80 0202 	eor.w	r2, r0, r2
   b8632:	ea81 0303 	eor.w	r3, r1, r3
   b8636:	2d36      	cmp	r5, #54	; 0x36
   b8638:	bf88      	it	hi
   b863a:	bd30      	pophi	{r4, r5, pc}
   b863c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8640:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8644:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8648:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b864c:	d002      	beq.n	b8654 <__adddf3+0x70>
   b864e:	4240      	negs	r0, r0
   b8650:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8654:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8658:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b865c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8660:	d002      	beq.n	b8668 <__adddf3+0x84>
   b8662:	4252      	negs	r2, r2
   b8664:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8668:	ea94 0f05 	teq	r4, r5
   b866c:	f000 80a7 	beq.w	b87be <__adddf3+0x1da>
   b8670:	f1a4 0401 	sub.w	r4, r4, #1
   b8674:	f1d5 0e20 	rsbs	lr, r5, #32
   b8678:	db0d      	blt.n	b8696 <__adddf3+0xb2>
   b867a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b867e:	fa22 f205 	lsr.w	r2, r2, r5
   b8682:	1880      	adds	r0, r0, r2
   b8684:	f141 0100 	adc.w	r1, r1, #0
   b8688:	fa03 f20e 	lsl.w	r2, r3, lr
   b868c:	1880      	adds	r0, r0, r2
   b868e:	fa43 f305 	asr.w	r3, r3, r5
   b8692:	4159      	adcs	r1, r3
   b8694:	e00e      	b.n	b86b4 <__adddf3+0xd0>
   b8696:	f1a5 0520 	sub.w	r5, r5, #32
   b869a:	f10e 0e20 	add.w	lr, lr, #32
   b869e:	2a01      	cmp	r2, #1
   b86a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   b86a4:	bf28      	it	cs
   b86a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   b86aa:	fa43 f305 	asr.w	r3, r3, r5
   b86ae:	18c0      	adds	r0, r0, r3
   b86b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b86b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b86b8:	d507      	bpl.n	b86ca <__adddf3+0xe6>
   b86ba:	f04f 0e00 	mov.w	lr, #0
   b86be:	f1dc 0c00 	rsbs	ip, ip, #0
   b86c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   b86c6:	eb6e 0101 	sbc.w	r1, lr, r1
   b86ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b86ce:	d31b      	bcc.n	b8708 <__adddf3+0x124>
   b86d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b86d4:	d30c      	bcc.n	b86f0 <__adddf3+0x10c>
   b86d6:	0849      	lsrs	r1, r1, #1
   b86d8:	ea5f 0030 	movs.w	r0, r0, rrx
   b86dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b86e0:	f104 0401 	add.w	r4, r4, #1
   b86e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b86e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b86ec:	f080 809a 	bcs.w	b8824 <__adddf3+0x240>
   b86f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b86f4:	bf08      	it	eq
   b86f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b86fa:	f150 0000 	adcs.w	r0, r0, #0
   b86fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8702:	ea41 0105 	orr.w	r1, r1, r5
   b8706:	bd30      	pop	{r4, r5, pc}
   b8708:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b870c:	4140      	adcs	r0, r0
   b870e:	eb41 0101 	adc.w	r1, r1, r1
   b8712:	3c01      	subs	r4, #1
   b8714:	bf28      	it	cs
   b8716:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b871a:	d2e9      	bcs.n	b86f0 <__adddf3+0x10c>
   b871c:	f091 0f00 	teq	r1, #0
   b8720:	bf04      	itt	eq
   b8722:	4601      	moveq	r1, r0
   b8724:	2000      	moveq	r0, #0
   b8726:	fab1 f381 	clz	r3, r1
   b872a:	bf08      	it	eq
   b872c:	3320      	addeq	r3, #32
   b872e:	f1a3 030b 	sub.w	r3, r3, #11
   b8732:	f1b3 0220 	subs.w	r2, r3, #32
   b8736:	da0c      	bge.n	b8752 <__adddf3+0x16e>
   b8738:	320c      	adds	r2, #12
   b873a:	dd08      	ble.n	b874e <__adddf3+0x16a>
   b873c:	f102 0c14 	add.w	ip, r2, #20
   b8740:	f1c2 020c 	rsb	r2, r2, #12
   b8744:	fa01 f00c 	lsl.w	r0, r1, ip
   b8748:	fa21 f102 	lsr.w	r1, r1, r2
   b874c:	e00c      	b.n	b8768 <__adddf3+0x184>
   b874e:	f102 0214 	add.w	r2, r2, #20
   b8752:	bfd8      	it	le
   b8754:	f1c2 0c20 	rsble	ip, r2, #32
   b8758:	fa01 f102 	lsl.w	r1, r1, r2
   b875c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8760:	bfdc      	itt	le
   b8762:	ea41 010c 	orrle.w	r1, r1, ip
   b8766:	4090      	lslle	r0, r2
   b8768:	1ae4      	subs	r4, r4, r3
   b876a:	bfa2      	ittt	ge
   b876c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8770:	4329      	orrge	r1, r5
   b8772:	bd30      	popge	{r4, r5, pc}
   b8774:	ea6f 0404 	mvn.w	r4, r4
   b8778:	3c1f      	subs	r4, #31
   b877a:	da1c      	bge.n	b87b6 <__adddf3+0x1d2>
   b877c:	340c      	adds	r4, #12
   b877e:	dc0e      	bgt.n	b879e <__adddf3+0x1ba>
   b8780:	f104 0414 	add.w	r4, r4, #20
   b8784:	f1c4 0220 	rsb	r2, r4, #32
   b8788:	fa20 f004 	lsr.w	r0, r0, r4
   b878c:	fa01 f302 	lsl.w	r3, r1, r2
   b8790:	ea40 0003 	orr.w	r0, r0, r3
   b8794:	fa21 f304 	lsr.w	r3, r1, r4
   b8798:	ea45 0103 	orr.w	r1, r5, r3
   b879c:	bd30      	pop	{r4, r5, pc}
   b879e:	f1c4 040c 	rsb	r4, r4, #12
   b87a2:	f1c4 0220 	rsb	r2, r4, #32
   b87a6:	fa20 f002 	lsr.w	r0, r0, r2
   b87aa:	fa01 f304 	lsl.w	r3, r1, r4
   b87ae:	ea40 0003 	orr.w	r0, r0, r3
   b87b2:	4629      	mov	r1, r5
   b87b4:	bd30      	pop	{r4, r5, pc}
   b87b6:	fa21 f004 	lsr.w	r0, r1, r4
   b87ba:	4629      	mov	r1, r5
   b87bc:	bd30      	pop	{r4, r5, pc}
   b87be:	f094 0f00 	teq	r4, #0
   b87c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b87c6:	bf06      	itte	eq
   b87c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b87cc:	3401      	addeq	r4, #1
   b87ce:	3d01      	subne	r5, #1
   b87d0:	e74e      	b.n	b8670 <__adddf3+0x8c>
   b87d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b87d6:	bf18      	it	ne
   b87d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b87dc:	d029      	beq.n	b8832 <__adddf3+0x24e>
   b87de:	ea94 0f05 	teq	r4, r5
   b87e2:	bf08      	it	eq
   b87e4:	ea90 0f02 	teqeq	r0, r2
   b87e8:	d005      	beq.n	b87f6 <__adddf3+0x212>
   b87ea:	ea54 0c00 	orrs.w	ip, r4, r0
   b87ee:	bf04      	itt	eq
   b87f0:	4619      	moveq	r1, r3
   b87f2:	4610      	moveq	r0, r2
   b87f4:	bd30      	pop	{r4, r5, pc}
   b87f6:	ea91 0f03 	teq	r1, r3
   b87fa:	bf1e      	ittt	ne
   b87fc:	2100      	movne	r1, #0
   b87fe:	2000      	movne	r0, #0
   b8800:	bd30      	popne	{r4, r5, pc}
   b8802:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8806:	d105      	bne.n	b8814 <__adddf3+0x230>
   b8808:	0040      	lsls	r0, r0, #1
   b880a:	4149      	adcs	r1, r1
   b880c:	bf28      	it	cs
   b880e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8812:	bd30      	pop	{r4, r5, pc}
   b8814:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8818:	bf3c      	itt	cc
   b881a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b881e:	bd30      	popcc	{r4, r5, pc}
   b8820:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8824:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b882c:	f04f 0000 	mov.w	r0, #0
   b8830:	bd30      	pop	{r4, r5, pc}
   b8832:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8836:	bf1a      	itte	ne
   b8838:	4619      	movne	r1, r3
   b883a:	4610      	movne	r0, r2
   b883c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8840:	bf1c      	itt	ne
   b8842:	460b      	movne	r3, r1
   b8844:	4602      	movne	r2, r0
   b8846:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b884a:	bf06      	itte	eq
   b884c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8850:	ea91 0f03 	teqeq	r1, r3
   b8854:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8858:	bd30      	pop	{r4, r5, pc}
   b885a:	bf00      	nop

000b885c <__aeabi_ui2d>:
   b885c:	f090 0f00 	teq	r0, #0
   b8860:	bf04      	itt	eq
   b8862:	2100      	moveq	r1, #0
   b8864:	4770      	bxeq	lr
   b8866:	b530      	push	{r4, r5, lr}
   b8868:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b886c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8870:	f04f 0500 	mov.w	r5, #0
   b8874:	f04f 0100 	mov.w	r1, #0
   b8878:	e750      	b.n	b871c <__adddf3+0x138>
   b887a:	bf00      	nop

000b887c <__aeabi_i2d>:
   b887c:	f090 0f00 	teq	r0, #0
   b8880:	bf04      	itt	eq
   b8882:	2100      	moveq	r1, #0
   b8884:	4770      	bxeq	lr
   b8886:	b530      	push	{r4, r5, lr}
   b8888:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b888c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8890:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8894:	bf48      	it	mi
   b8896:	4240      	negmi	r0, r0
   b8898:	f04f 0100 	mov.w	r1, #0
   b889c:	e73e      	b.n	b871c <__adddf3+0x138>
   b889e:	bf00      	nop

000b88a0 <__aeabi_f2d>:
   b88a0:	0042      	lsls	r2, r0, #1
   b88a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b88a6:	ea4f 0131 	mov.w	r1, r1, rrx
   b88aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b88ae:	bf1f      	itttt	ne
   b88b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b88b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b88b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b88bc:	4770      	bxne	lr
   b88be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b88c2:	bf08      	it	eq
   b88c4:	4770      	bxeq	lr
   b88c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b88ca:	bf04      	itt	eq
   b88cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b88d0:	4770      	bxeq	lr
   b88d2:	b530      	push	{r4, r5, lr}
   b88d4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b88d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b88dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b88e0:	e71c      	b.n	b871c <__adddf3+0x138>
   b88e2:	bf00      	nop

000b88e4 <__aeabi_ul2d>:
   b88e4:	ea50 0201 	orrs.w	r2, r0, r1
   b88e8:	bf08      	it	eq
   b88ea:	4770      	bxeq	lr
   b88ec:	b530      	push	{r4, r5, lr}
   b88ee:	f04f 0500 	mov.w	r5, #0
   b88f2:	e00a      	b.n	b890a <__aeabi_l2d+0x16>

000b88f4 <__aeabi_l2d>:
   b88f4:	ea50 0201 	orrs.w	r2, r0, r1
   b88f8:	bf08      	it	eq
   b88fa:	4770      	bxeq	lr
   b88fc:	b530      	push	{r4, r5, lr}
   b88fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8902:	d502      	bpl.n	b890a <__aeabi_l2d+0x16>
   b8904:	4240      	negs	r0, r0
   b8906:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b890a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b890e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8912:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8916:	f43f aed8 	beq.w	b86ca <__adddf3+0xe6>
   b891a:	f04f 0203 	mov.w	r2, #3
   b891e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8922:	bf18      	it	ne
   b8924:	3203      	addne	r2, #3
   b8926:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b892a:	bf18      	it	ne
   b892c:	3203      	addne	r2, #3
   b892e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8932:	f1c2 0320 	rsb	r3, r2, #32
   b8936:	fa00 fc03 	lsl.w	ip, r0, r3
   b893a:	fa20 f002 	lsr.w	r0, r0, r2
   b893e:	fa01 fe03 	lsl.w	lr, r1, r3
   b8942:	ea40 000e 	orr.w	r0, r0, lr
   b8946:	fa21 f102 	lsr.w	r1, r1, r2
   b894a:	4414      	add	r4, r2
   b894c:	e6bd      	b.n	b86ca <__adddf3+0xe6>
   b894e:	bf00      	nop

000b8950 <__aeabi_dmul>:
   b8950:	b570      	push	{r4, r5, r6, lr}
   b8952:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8956:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b895a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b895e:	bf1d      	ittte	ne
   b8960:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8964:	ea94 0f0c 	teqne	r4, ip
   b8968:	ea95 0f0c 	teqne	r5, ip
   b896c:	f000 f8de 	bleq	b8b2c <__aeabi_dmul+0x1dc>
   b8970:	442c      	add	r4, r5
   b8972:	ea81 0603 	eor.w	r6, r1, r3
   b8976:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b897a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b897e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8982:	bf18      	it	ne
   b8984:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b898c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8990:	d038      	beq.n	b8a04 <__aeabi_dmul+0xb4>
   b8992:	fba0 ce02 	umull	ip, lr, r0, r2
   b8996:	f04f 0500 	mov.w	r5, #0
   b899a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b899e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b89a2:	fbe0 e503 	umlal	lr, r5, r0, r3
   b89a6:	f04f 0600 	mov.w	r6, #0
   b89aa:	fbe1 5603 	umlal	r5, r6, r1, r3
   b89ae:	f09c 0f00 	teq	ip, #0
   b89b2:	bf18      	it	ne
   b89b4:	f04e 0e01 	orrne.w	lr, lr, #1
   b89b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b89bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b89c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b89c4:	d204      	bcs.n	b89d0 <__aeabi_dmul+0x80>
   b89c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b89ca:	416d      	adcs	r5, r5
   b89cc:	eb46 0606 	adc.w	r6, r6, r6
   b89d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b89d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b89d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b89dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b89e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b89e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b89e8:	bf88      	it	hi
   b89ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b89ee:	d81e      	bhi.n	b8a2e <__aeabi_dmul+0xde>
   b89f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b89f4:	bf08      	it	eq
   b89f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b89fa:	f150 0000 	adcs.w	r0, r0, #0
   b89fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8a02:	bd70      	pop	{r4, r5, r6, pc}
   b8a04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8a08:	ea46 0101 	orr.w	r1, r6, r1
   b8a0c:	ea40 0002 	orr.w	r0, r0, r2
   b8a10:	ea81 0103 	eor.w	r1, r1, r3
   b8a14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8a18:	bfc2      	ittt	gt
   b8a1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8a1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8a22:	bd70      	popgt	{r4, r5, r6, pc}
   b8a24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8a28:	f04f 0e00 	mov.w	lr, #0
   b8a2c:	3c01      	subs	r4, #1
   b8a2e:	f300 80ab 	bgt.w	b8b88 <__aeabi_dmul+0x238>
   b8a32:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8a36:	bfde      	ittt	le
   b8a38:	2000      	movle	r0, #0
   b8a3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8a3e:	bd70      	pople	{r4, r5, r6, pc}
   b8a40:	f1c4 0400 	rsb	r4, r4, #0
   b8a44:	3c20      	subs	r4, #32
   b8a46:	da35      	bge.n	b8ab4 <__aeabi_dmul+0x164>
   b8a48:	340c      	adds	r4, #12
   b8a4a:	dc1b      	bgt.n	b8a84 <__aeabi_dmul+0x134>
   b8a4c:	f104 0414 	add.w	r4, r4, #20
   b8a50:	f1c4 0520 	rsb	r5, r4, #32
   b8a54:	fa00 f305 	lsl.w	r3, r0, r5
   b8a58:	fa20 f004 	lsr.w	r0, r0, r4
   b8a5c:	fa01 f205 	lsl.w	r2, r1, r5
   b8a60:	ea40 0002 	orr.w	r0, r0, r2
   b8a64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8a68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8a6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8a70:	fa21 f604 	lsr.w	r6, r1, r4
   b8a74:	eb42 0106 	adc.w	r1, r2, r6
   b8a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8a7c:	bf08      	it	eq
   b8a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8a82:	bd70      	pop	{r4, r5, r6, pc}
   b8a84:	f1c4 040c 	rsb	r4, r4, #12
   b8a88:	f1c4 0520 	rsb	r5, r4, #32
   b8a8c:	fa00 f304 	lsl.w	r3, r0, r4
   b8a90:	fa20 f005 	lsr.w	r0, r0, r5
   b8a94:	fa01 f204 	lsl.w	r2, r1, r4
   b8a98:	ea40 0002 	orr.w	r0, r0, r2
   b8a9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8aa0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8aa4:	f141 0100 	adc.w	r1, r1, #0
   b8aa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8aac:	bf08      	it	eq
   b8aae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8ab2:	bd70      	pop	{r4, r5, r6, pc}
   b8ab4:	f1c4 0520 	rsb	r5, r4, #32
   b8ab8:	fa00 f205 	lsl.w	r2, r0, r5
   b8abc:	ea4e 0e02 	orr.w	lr, lr, r2
   b8ac0:	fa20 f304 	lsr.w	r3, r0, r4
   b8ac4:	fa01 f205 	lsl.w	r2, r1, r5
   b8ac8:	ea43 0302 	orr.w	r3, r3, r2
   b8acc:	fa21 f004 	lsr.w	r0, r1, r4
   b8ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8ad4:	fa21 f204 	lsr.w	r2, r1, r4
   b8ad8:	ea20 0002 	bic.w	r0, r0, r2
   b8adc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8ae0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8ae4:	bf08      	it	eq
   b8ae6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8aea:	bd70      	pop	{r4, r5, r6, pc}
   b8aec:	f094 0f00 	teq	r4, #0
   b8af0:	d10f      	bne.n	b8b12 <__aeabi_dmul+0x1c2>
   b8af2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8af6:	0040      	lsls	r0, r0, #1
   b8af8:	eb41 0101 	adc.w	r1, r1, r1
   b8afc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8b00:	bf08      	it	eq
   b8b02:	3c01      	subeq	r4, #1
   b8b04:	d0f7      	beq.n	b8af6 <__aeabi_dmul+0x1a6>
   b8b06:	ea41 0106 	orr.w	r1, r1, r6
   b8b0a:	f095 0f00 	teq	r5, #0
   b8b0e:	bf18      	it	ne
   b8b10:	4770      	bxne	lr
   b8b12:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8b16:	0052      	lsls	r2, r2, #1
   b8b18:	eb43 0303 	adc.w	r3, r3, r3
   b8b1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8b20:	bf08      	it	eq
   b8b22:	3d01      	subeq	r5, #1
   b8b24:	d0f7      	beq.n	b8b16 <__aeabi_dmul+0x1c6>
   b8b26:	ea43 0306 	orr.w	r3, r3, r6
   b8b2a:	4770      	bx	lr
   b8b2c:	ea94 0f0c 	teq	r4, ip
   b8b30:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8b34:	bf18      	it	ne
   b8b36:	ea95 0f0c 	teqne	r5, ip
   b8b3a:	d00c      	beq.n	b8b56 <__aeabi_dmul+0x206>
   b8b3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8b40:	bf18      	it	ne
   b8b42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b46:	d1d1      	bne.n	b8aec <__aeabi_dmul+0x19c>
   b8b48:	ea81 0103 	eor.w	r1, r1, r3
   b8b4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8b50:	f04f 0000 	mov.w	r0, #0
   b8b54:	bd70      	pop	{r4, r5, r6, pc}
   b8b56:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8b5a:	bf06      	itte	eq
   b8b5c:	4610      	moveq	r0, r2
   b8b5e:	4619      	moveq	r1, r3
   b8b60:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b64:	d019      	beq.n	b8b9a <__aeabi_dmul+0x24a>
   b8b66:	ea94 0f0c 	teq	r4, ip
   b8b6a:	d102      	bne.n	b8b72 <__aeabi_dmul+0x222>
   b8b6c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8b70:	d113      	bne.n	b8b9a <__aeabi_dmul+0x24a>
   b8b72:	ea95 0f0c 	teq	r5, ip
   b8b76:	d105      	bne.n	b8b84 <__aeabi_dmul+0x234>
   b8b78:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8b7c:	bf1c      	itt	ne
   b8b7e:	4610      	movne	r0, r2
   b8b80:	4619      	movne	r1, r3
   b8b82:	d10a      	bne.n	b8b9a <__aeabi_dmul+0x24a>
   b8b84:	ea81 0103 	eor.w	r1, r1, r3
   b8b88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8b8c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8b90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8b94:	f04f 0000 	mov.w	r0, #0
   b8b98:	bd70      	pop	{r4, r5, r6, pc}
   b8b9a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8b9e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8ba2:	bd70      	pop	{r4, r5, r6, pc}

000b8ba4 <__aeabi_ddiv>:
   b8ba4:	b570      	push	{r4, r5, r6, lr}
   b8ba6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8baa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8bae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8bb2:	bf1d      	ittte	ne
   b8bb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8bb8:	ea94 0f0c 	teqne	r4, ip
   b8bbc:	ea95 0f0c 	teqne	r5, ip
   b8bc0:	f000 f8a7 	bleq	b8d12 <__aeabi_ddiv+0x16e>
   b8bc4:	eba4 0405 	sub.w	r4, r4, r5
   b8bc8:	ea81 0e03 	eor.w	lr, r1, r3
   b8bcc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8bd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8bd4:	f000 8088 	beq.w	b8ce8 <__aeabi_ddiv+0x144>
   b8bd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8bdc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8be0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8be4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8be8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8bec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8bf0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8bf4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8bf8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8bfc:	429d      	cmp	r5, r3
   b8bfe:	bf08      	it	eq
   b8c00:	4296      	cmpeq	r6, r2
   b8c02:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8c06:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8c0a:	d202      	bcs.n	b8c12 <__aeabi_ddiv+0x6e>
   b8c0c:	085b      	lsrs	r3, r3, #1
   b8c0e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c12:	1ab6      	subs	r6, r6, r2
   b8c14:	eb65 0503 	sbc.w	r5, r5, r3
   b8c18:	085b      	lsrs	r3, r3, #1
   b8c1a:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8c22:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8c26:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c2e:	bf22      	ittt	cs
   b8c30:	1ab6      	subcs	r6, r6, r2
   b8c32:	4675      	movcs	r5, lr
   b8c34:	ea40 000c 	orrcs.w	r0, r0, ip
   b8c38:	085b      	lsrs	r3, r3, #1
   b8c3a:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c3e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c42:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c46:	bf22      	ittt	cs
   b8c48:	1ab6      	subcs	r6, r6, r2
   b8c4a:	4675      	movcs	r5, lr
   b8c4c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8c50:	085b      	lsrs	r3, r3, #1
   b8c52:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c56:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c5e:	bf22      	ittt	cs
   b8c60:	1ab6      	subcs	r6, r6, r2
   b8c62:	4675      	movcs	r5, lr
   b8c64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8c68:	085b      	lsrs	r3, r3, #1
   b8c6a:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c6e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c72:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c76:	bf22      	ittt	cs
   b8c78:	1ab6      	subcs	r6, r6, r2
   b8c7a:	4675      	movcs	r5, lr
   b8c7c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8c80:	ea55 0e06 	orrs.w	lr, r5, r6
   b8c84:	d018      	beq.n	b8cb8 <__aeabi_ddiv+0x114>
   b8c86:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8c8a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8c8e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8c92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8c96:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8c9a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8c9e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8ca2:	d1c0      	bne.n	b8c26 <__aeabi_ddiv+0x82>
   b8ca4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8ca8:	d10b      	bne.n	b8cc2 <__aeabi_ddiv+0x11e>
   b8caa:	ea41 0100 	orr.w	r1, r1, r0
   b8cae:	f04f 0000 	mov.w	r0, #0
   b8cb2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8cb6:	e7b6      	b.n	b8c26 <__aeabi_ddiv+0x82>
   b8cb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8cbc:	bf04      	itt	eq
   b8cbe:	4301      	orreq	r1, r0
   b8cc0:	2000      	moveq	r0, #0
   b8cc2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8cc6:	bf88      	it	hi
   b8cc8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8ccc:	f63f aeaf 	bhi.w	b8a2e <__aeabi_dmul+0xde>
   b8cd0:	ebb5 0c03 	subs.w	ip, r5, r3
   b8cd4:	bf04      	itt	eq
   b8cd6:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8cda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8cde:	f150 0000 	adcs.w	r0, r0, #0
   b8ce2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8ce6:	bd70      	pop	{r4, r5, r6, pc}
   b8ce8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8cec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8cf0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8cf4:	bfc2      	ittt	gt
   b8cf6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8cfa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8cfe:	bd70      	popgt	{r4, r5, r6, pc}
   b8d00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8d04:	f04f 0e00 	mov.w	lr, #0
   b8d08:	3c01      	subs	r4, #1
   b8d0a:	e690      	b.n	b8a2e <__aeabi_dmul+0xde>
   b8d0c:	ea45 0e06 	orr.w	lr, r5, r6
   b8d10:	e68d      	b.n	b8a2e <__aeabi_dmul+0xde>
   b8d12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8d16:	ea94 0f0c 	teq	r4, ip
   b8d1a:	bf08      	it	eq
   b8d1c:	ea95 0f0c 	teqeq	r5, ip
   b8d20:	f43f af3b 	beq.w	b8b9a <__aeabi_dmul+0x24a>
   b8d24:	ea94 0f0c 	teq	r4, ip
   b8d28:	d10a      	bne.n	b8d40 <__aeabi_ddiv+0x19c>
   b8d2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8d2e:	f47f af34 	bne.w	b8b9a <__aeabi_dmul+0x24a>
   b8d32:	ea95 0f0c 	teq	r5, ip
   b8d36:	f47f af25 	bne.w	b8b84 <__aeabi_dmul+0x234>
   b8d3a:	4610      	mov	r0, r2
   b8d3c:	4619      	mov	r1, r3
   b8d3e:	e72c      	b.n	b8b9a <__aeabi_dmul+0x24a>
   b8d40:	ea95 0f0c 	teq	r5, ip
   b8d44:	d106      	bne.n	b8d54 <__aeabi_ddiv+0x1b0>
   b8d46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8d4a:	f43f aefd 	beq.w	b8b48 <__aeabi_dmul+0x1f8>
   b8d4e:	4610      	mov	r0, r2
   b8d50:	4619      	mov	r1, r3
   b8d52:	e722      	b.n	b8b9a <__aeabi_dmul+0x24a>
   b8d54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8d58:	bf18      	it	ne
   b8d5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8d5e:	f47f aec5 	bne.w	b8aec <__aeabi_dmul+0x19c>
   b8d62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8d66:	f47f af0d 	bne.w	b8b84 <__aeabi_dmul+0x234>
   b8d6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8d6e:	f47f aeeb 	bne.w	b8b48 <__aeabi_dmul+0x1f8>
   b8d72:	e712      	b.n	b8b9a <__aeabi_dmul+0x24a>

000b8d74 <__gedf2>:
   b8d74:	f04f 3cff 	mov.w	ip, #4294967295
   b8d78:	e006      	b.n	b8d88 <__cmpdf2+0x4>
   b8d7a:	bf00      	nop

000b8d7c <__ledf2>:
   b8d7c:	f04f 0c01 	mov.w	ip, #1
   b8d80:	e002      	b.n	b8d88 <__cmpdf2+0x4>
   b8d82:	bf00      	nop

000b8d84 <__cmpdf2>:
   b8d84:	f04f 0c01 	mov.w	ip, #1
   b8d88:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8d8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8d94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8d98:	bf18      	it	ne
   b8d9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8d9e:	d01b      	beq.n	b8dd8 <__cmpdf2+0x54>
   b8da0:	b001      	add	sp, #4
   b8da2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8da6:	bf0c      	ite	eq
   b8da8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8dac:	ea91 0f03 	teqne	r1, r3
   b8db0:	bf02      	ittt	eq
   b8db2:	ea90 0f02 	teqeq	r0, r2
   b8db6:	2000      	moveq	r0, #0
   b8db8:	4770      	bxeq	lr
   b8dba:	f110 0f00 	cmn.w	r0, #0
   b8dbe:	ea91 0f03 	teq	r1, r3
   b8dc2:	bf58      	it	pl
   b8dc4:	4299      	cmppl	r1, r3
   b8dc6:	bf08      	it	eq
   b8dc8:	4290      	cmpeq	r0, r2
   b8dca:	bf2c      	ite	cs
   b8dcc:	17d8      	asrcs	r0, r3, #31
   b8dce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8dd2:	f040 0001 	orr.w	r0, r0, #1
   b8dd6:	4770      	bx	lr
   b8dd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8ddc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8de0:	d102      	bne.n	b8de8 <__cmpdf2+0x64>
   b8de2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8de6:	d107      	bne.n	b8df8 <__cmpdf2+0x74>
   b8de8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8df0:	d1d6      	bne.n	b8da0 <__cmpdf2+0x1c>
   b8df2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8df6:	d0d3      	beq.n	b8da0 <__cmpdf2+0x1c>
   b8df8:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8dfc:	4770      	bx	lr
   b8dfe:	bf00      	nop

000b8e00 <__aeabi_cdrcmple>:
   b8e00:	4684      	mov	ip, r0
   b8e02:	4610      	mov	r0, r2
   b8e04:	4662      	mov	r2, ip
   b8e06:	468c      	mov	ip, r1
   b8e08:	4619      	mov	r1, r3
   b8e0a:	4663      	mov	r3, ip
   b8e0c:	e000      	b.n	b8e10 <__aeabi_cdcmpeq>
   b8e0e:	bf00      	nop

000b8e10 <__aeabi_cdcmpeq>:
   b8e10:	b501      	push	{r0, lr}
   b8e12:	f7ff ffb7 	bl	b8d84 <__cmpdf2>
   b8e16:	2800      	cmp	r0, #0
   b8e18:	bf48      	it	mi
   b8e1a:	f110 0f00 	cmnmi.w	r0, #0
   b8e1e:	bd01      	pop	{r0, pc}

000b8e20 <__aeabi_dcmpeq>:
   b8e20:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e24:	f7ff fff4 	bl	b8e10 <__aeabi_cdcmpeq>
   b8e28:	bf0c      	ite	eq
   b8e2a:	2001      	moveq	r0, #1
   b8e2c:	2000      	movne	r0, #0
   b8e2e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e32:	bf00      	nop

000b8e34 <__aeabi_dcmplt>:
   b8e34:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e38:	f7ff ffea 	bl	b8e10 <__aeabi_cdcmpeq>
   b8e3c:	bf34      	ite	cc
   b8e3e:	2001      	movcc	r0, #1
   b8e40:	2000      	movcs	r0, #0
   b8e42:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e46:	bf00      	nop

000b8e48 <__aeabi_dcmple>:
   b8e48:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e4c:	f7ff ffe0 	bl	b8e10 <__aeabi_cdcmpeq>
   b8e50:	bf94      	ite	ls
   b8e52:	2001      	movls	r0, #1
   b8e54:	2000      	movhi	r0, #0
   b8e56:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e5a:	bf00      	nop

000b8e5c <__aeabi_dcmpge>:
   b8e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e60:	f7ff ffce 	bl	b8e00 <__aeabi_cdrcmple>
   b8e64:	bf94      	ite	ls
   b8e66:	2001      	movls	r0, #1
   b8e68:	2000      	movhi	r0, #0
   b8e6a:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e6e:	bf00      	nop

000b8e70 <__aeabi_dcmpgt>:
   b8e70:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e74:	f7ff ffc4 	bl	b8e00 <__aeabi_cdrcmple>
   b8e78:	bf34      	ite	cc
   b8e7a:	2001      	movcc	r0, #1
   b8e7c:	2000      	movcs	r0, #0
   b8e7e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e82:	bf00      	nop

000b8e84 <__aeabi_d2uiz>:
   b8e84:	004a      	lsls	r2, r1, #1
   b8e86:	d211      	bcs.n	b8eac <__aeabi_d2uiz+0x28>
   b8e88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8e8c:	d211      	bcs.n	b8eb2 <__aeabi_d2uiz+0x2e>
   b8e8e:	d50d      	bpl.n	b8eac <__aeabi_d2uiz+0x28>
   b8e90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8e94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8e98:	d40e      	bmi.n	b8eb8 <__aeabi_d2uiz+0x34>
   b8e9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8ea2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8ea6:	fa23 f002 	lsr.w	r0, r3, r2
   b8eaa:	4770      	bx	lr
   b8eac:	f04f 0000 	mov.w	r0, #0
   b8eb0:	4770      	bx	lr
   b8eb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8eb6:	d102      	bne.n	b8ebe <__aeabi_d2uiz+0x3a>
   b8eb8:	f04f 30ff 	mov.w	r0, #4294967295
   b8ebc:	4770      	bx	lr
   b8ebe:	f04f 0000 	mov.w	r0, #0
   b8ec2:	4770      	bx	lr

000b8ec4 <__aeabi_d2ulz>:
   b8ec4:	b5d0      	push	{r4, r6, r7, lr}
   b8ec6:	4b0c      	ldr	r3, [pc, #48]	; (b8ef8 <__aeabi_d2ulz+0x34>)
   b8ec8:	2200      	movs	r2, #0
   b8eca:	4606      	mov	r6, r0
   b8ecc:	460f      	mov	r7, r1
   b8ece:	f7ff fd3f 	bl	b8950 <__aeabi_dmul>
   b8ed2:	f7ff ffd7 	bl	b8e84 <__aeabi_d2uiz>
   b8ed6:	4604      	mov	r4, r0
   b8ed8:	f7ff fcc0 	bl	b885c <__aeabi_ui2d>
   b8edc:	4b07      	ldr	r3, [pc, #28]	; (b8efc <__aeabi_d2ulz+0x38>)
   b8ede:	2200      	movs	r2, #0
   b8ee0:	f7ff fd36 	bl	b8950 <__aeabi_dmul>
   b8ee4:	4602      	mov	r2, r0
   b8ee6:	460b      	mov	r3, r1
   b8ee8:	4630      	mov	r0, r6
   b8eea:	4639      	mov	r1, r7
   b8eec:	f7ff fb78 	bl	b85e0 <__aeabi_dsub>
   b8ef0:	f7ff ffc8 	bl	b8e84 <__aeabi_d2uiz>
   b8ef4:	4621      	mov	r1, r4
   b8ef6:	bdd0      	pop	{r4, r6, r7, pc}
   b8ef8:	3df00000 	.word	0x3df00000
   b8efc:	41f00000 	.word	0x41f00000

000b8f00 <atexit>:
   b8f00:	2300      	movs	r3, #0
   b8f02:	4601      	mov	r1, r0
   b8f04:	461a      	mov	r2, r3
   b8f06:	4618      	mov	r0, r3
   b8f08:	f000 bfe4 	b.w	b9ed4 <__register_exitproc>

000b8f0c <atof>:
   b8f0c:	2100      	movs	r1, #0
   b8f0e:	f000 beed 	b.w	b9cec <strtod>

000b8f12 <atoi>:
   b8f12:	220a      	movs	r2, #10
   b8f14:	2100      	movs	r1, #0
   b8f16:	f000 bfd3 	b.w	b9ec0 <strtol>

000b8f1a <ldiv>:
   b8f1a:	2900      	cmp	r1, #0
   b8f1c:	b510      	push	{r4, lr}
   b8f1e:	fb91 f4f2 	sdiv	r4, r1, r2
   b8f22:	fb02 1314 	mls	r3, r2, r4, r1
   b8f26:	db06      	blt.n	b8f36 <ldiv+0x1c>
   b8f28:	2b00      	cmp	r3, #0
   b8f2a:	da01      	bge.n	b8f30 <ldiv+0x16>
   b8f2c:	3401      	adds	r4, #1
   b8f2e:	1a9b      	subs	r3, r3, r2
   b8f30:	e9c0 4300 	strd	r4, r3, [r0]
   b8f34:	bd10      	pop	{r4, pc}
   b8f36:	2b00      	cmp	r3, #0
   b8f38:	bfc4      	itt	gt
   b8f3a:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b8f3e:	189b      	addgt	r3, r3, r2
   b8f40:	e7f6      	b.n	b8f30 <ldiv+0x16>

000b8f42 <memcpy>:
   b8f42:	440a      	add	r2, r1
   b8f44:	4291      	cmp	r1, r2
   b8f46:	f100 33ff 	add.w	r3, r0, #4294967295
   b8f4a:	d100      	bne.n	b8f4e <memcpy+0xc>
   b8f4c:	4770      	bx	lr
   b8f4e:	b510      	push	{r4, lr}
   b8f50:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8f54:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8f58:	4291      	cmp	r1, r2
   b8f5a:	d1f9      	bne.n	b8f50 <memcpy+0xe>
   b8f5c:	bd10      	pop	{r4, pc}

000b8f5e <memset>:
   b8f5e:	4402      	add	r2, r0
   b8f60:	4603      	mov	r3, r0
   b8f62:	4293      	cmp	r3, r2
   b8f64:	d100      	bne.n	b8f68 <memset+0xa>
   b8f66:	4770      	bx	lr
   b8f68:	f803 1b01 	strb.w	r1, [r3], #1
   b8f6c:	e7f9      	b.n	b8f62 <memset+0x4>
	...

000b8f70 <srand>:
   b8f70:	b538      	push	{r3, r4, r5, lr}
   b8f72:	4b10      	ldr	r3, [pc, #64]	; (b8fb4 <srand+0x44>)
   b8f74:	681d      	ldr	r5, [r3, #0]
   b8f76:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f78:	4604      	mov	r4, r0
   b8f7a:	b9b3      	cbnz	r3, b8faa <srand+0x3a>
   b8f7c:	2018      	movs	r0, #24
   b8f7e:	f7fd f929 	bl	b61d4 <malloc>
   b8f82:	4602      	mov	r2, r0
   b8f84:	63a8      	str	r0, [r5, #56]	; 0x38
   b8f86:	b920      	cbnz	r0, b8f92 <srand+0x22>
   b8f88:	4b0b      	ldr	r3, [pc, #44]	; (b8fb8 <srand+0x48>)
   b8f8a:	480c      	ldr	r0, [pc, #48]	; (b8fbc <srand+0x4c>)
   b8f8c:	2142      	movs	r1, #66	; 0x42
   b8f8e:	f7fd f969 	bl	b6264 <__assert_func>
   b8f92:	490b      	ldr	r1, [pc, #44]	; (b8fc0 <srand+0x50>)
   b8f94:	4b0b      	ldr	r3, [pc, #44]	; (b8fc4 <srand+0x54>)
   b8f96:	e9c0 1300 	strd	r1, r3, [r0]
   b8f9a:	4b0b      	ldr	r3, [pc, #44]	; (b8fc8 <srand+0x58>)
   b8f9c:	6083      	str	r3, [r0, #8]
   b8f9e:	230b      	movs	r3, #11
   b8fa0:	8183      	strh	r3, [r0, #12]
   b8fa2:	2100      	movs	r1, #0
   b8fa4:	2001      	movs	r0, #1
   b8fa6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8faa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8fac:	2200      	movs	r2, #0
   b8fae:	611c      	str	r4, [r3, #16]
   b8fb0:	615a      	str	r2, [r3, #20]
   b8fb2:	bd38      	pop	{r3, r4, r5, pc}
   b8fb4:	2003d224 	.word	0x2003d224
   b8fb8:	000bb6bd 	.word	0x000bb6bd
   b8fbc:	000bb6d4 	.word	0x000bb6d4
   b8fc0:	abcd330e 	.word	0xabcd330e
   b8fc4:	e66d1234 	.word	0xe66d1234
   b8fc8:	0005deec 	.word	0x0005deec

000b8fcc <strcat>:
   b8fcc:	b510      	push	{r4, lr}
   b8fce:	4602      	mov	r2, r0
   b8fd0:	7814      	ldrb	r4, [r2, #0]
   b8fd2:	4613      	mov	r3, r2
   b8fd4:	3201      	adds	r2, #1
   b8fd6:	2c00      	cmp	r4, #0
   b8fd8:	d1fa      	bne.n	b8fd0 <strcat+0x4>
   b8fda:	3b01      	subs	r3, #1
   b8fdc:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8fe0:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8fe4:	2a00      	cmp	r2, #0
   b8fe6:	d1f9      	bne.n	b8fdc <strcat+0x10>
   b8fe8:	bd10      	pop	{r4, pc}

000b8fea <strcmp>:
   b8fea:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8fee:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8ff2:	2a01      	cmp	r2, #1
   b8ff4:	bf28      	it	cs
   b8ff6:	429a      	cmpcs	r2, r3
   b8ff8:	d0f7      	beq.n	b8fea <strcmp>
   b8ffa:	1ad0      	subs	r0, r2, r3
   b8ffc:	4770      	bx	lr

000b8ffe <strcpy>:
   b8ffe:	4603      	mov	r3, r0
   b9000:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9004:	f803 2b01 	strb.w	r2, [r3], #1
   b9008:	2a00      	cmp	r2, #0
   b900a:	d1f9      	bne.n	b9000 <strcpy+0x2>
   b900c:	4770      	bx	lr
	...

000b9010 <strdup>:
   b9010:	4b02      	ldr	r3, [pc, #8]	; (b901c <strdup+0xc>)
   b9012:	4601      	mov	r1, r0
   b9014:	6818      	ldr	r0, [r3, #0]
   b9016:	f000 b803 	b.w	b9020 <_strdup_r>
   b901a:	bf00      	nop
   b901c:	2003d224 	.word	0x2003d224

000b9020 <_strdup_r>:
   b9020:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9022:	4604      	mov	r4, r0
   b9024:	4608      	mov	r0, r1
   b9026:	460d      	mov	r5, r1
   b9028:	f000 f80f 	bl	b904a <strlen>
   b902c:	1c42      	adds	r2, r0, #1
   b902e:	4611      	mov	r1, r2
   b9030:	4620      	mov	r0, r4
   b9032:	9201      	str	r2, [sp, #4]
   b9034:	f7fd f906 	bl	b6244 <_malloc_r>
   b9038:	4604      	mov	r4, r0
   b903a:	b118      	cbz	r0, b9044 <_strdup_r+0x24>
   b903c:	9a01      	ldr	r2, [sp, #4]
   b903e:	4629      	mov	r1, r5
   b9040:	f7ff ff7f 	bl	b8f42 <memcpy>
   b9044:	4620      	mov	r0, r4
   b9046:	b003      	add	sp, #12
   b9048:	bd30      	pop	{r4, r5, pc}

000b904a <strlen>:
   b904a:	4603      	mov	r3, r0
   b904c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9050:	2a00      	cmp	r2, #0
   b9052:	d1fb      	bne.n	b904c <strlen+0x2>
   b9054:	1a18      	subs	r0, r3, r0
   b9056:	3801      	subs	r0, #1
   b9058:	4770      	bx	lr

000b905a <strncmp>:
   b905a:	b510      	push	{r4, lr}
   b905c:	b17a      	cbz	r2, b907e <strncmp+0x24>
   b905e:	4603      	mov	r3, r0
   b9060:	3901      	subs	r1, #1
   b9062:	1884      	adds	r4, r0, r2
   b9064:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9068:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b906c:	4290      	cmp	r0, r2
   b906e:	d101      	bne.n	b9074 <strncmp+0x1a>
   b9070:	42a3      	cmp	r3, r4
   b9072:	d101      	bne.n	b9078 <strncmp+0x1e>
   b9074:	1a80      	subs	r0, r0, r2
   b9076:	bd10      	pop	{r4, pc}
   b9078:	2800      	cmp	r0, #0
   b907a:	d1f3      	bne.n	b9064 <strncmp+0xa>
   b907c:	e7fa      	b.n	b9074 <strncmp+0x1a>
   b907e:	4610      	mov	r0, r2
   b9080:	e7f9      	b.n	b9076 <strncmp+0x1c>

000b9082 <strncpy>:
   b9082:	b510      	push	{r4, lr}
   b9084:	3901      	subs	r1, #1
   b9086:	4603      	mov	r3, r0
   b9088:	b132      	cbz	r2, b9098 <strncpy+0x16>
   b908a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b908e:	f803 4b01 	strb.w	r4, [r3], #1
   b9092:	3a01      	subs	r2, #1
   b9094:	2c00      	cmp	r4, #0
   b9096:	d1f7      	bne.n	b9088 <strncpy+0x6>
   b9098:	441a      	add	r2, r3
   b909a:	2100      	movs	r1, #0
   b909c:	4293      	cmp	r3, r2
   b909e:	d100      	bne.n	b90a2 <strncpy+0x20>
   b90a0:	bd10      	pop	{r4, pc}
   b90a2:	f803 1b01 	strb.w	r1, [r3], #1
   b90a6:	e7f9      	b.n	b909c <strncpy+0x1a>

000b90a8 <sulp>:
   b90a8:	b570      	push	{r4, r5, r6, lr}
   b90aa:	4604      	mov	r4, r0
   b90ac:	460d      	mov	r5, r1
   b90ae:	ec45 4b10 	vmov	d0, r4, r5
   b90b2:	4616      	mov	r6, r2
   b90b4:	f001 fe68 	bl	bad88 <__ulp>
   b90b8:	ec51 0b10 	vmov	r0, r1, d0
   b90bc:	b17e      	cbz	r6, b90de <sulp+0x36>
   b90be:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b90c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b90c6:	2b00      	cmp	r3, #0
   b90c8:	dd09      	ble.n	b90de <sulp+0x36>
   b90ca:	051b      	lsls	r3, r3, #20
   b90cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b90d0:	2400      	movs	r4, #0
   b90d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b90d6:	4622      	mov	r2, r4
   b90d8:	462b      	mov	r3, r5
   b90da:	f7ff fc39 	bl	b8950 <__aeabi_dmul>
   b90de:	bd70      	pop	{r4, r5, r6, pc}

000b90e0 <_strtod_l>:
   b90e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b90e4:	ed2d 8b02 	vpush	{d8}
   b90e8:	b09d      	sub	sp, #116	; 0x74
   b90ea:	461f      	mov	r7, r3
   b90ec:	2300      	movs	r3, #0
   b90ee:	9318      	str	r3, [sp, #96]	; 0x60
   b90f0:	4ba2      	ldr	r3, [pc, #648]	; (b937c <_strtod_l+0x29c>)
   b90f2:	9213      	str	r2, [sp, #76]	; 0x4c
   b90f4:	681b      	ldr	r3, [r3, #0]
   b90f6:	9305      	str	r3, [sp, #20]
   b90f8:	4604      	mov	r4, r0
   b90fa:	4618      	mov	r0, r3
   b90fc:	4688      	mov	r8, r1
   b90fe:	f7ff ffa4 	bl	b904a <strlen>
   b9102:	f04f 0a00 	mov.w	sl, #0
   b9106:	4605      	mov	r5, r0
   b9108:	f04f 0b00 	mov.w	fp, #0
   b910c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9112:	781a      	ldrb	r2, [r3, #0]
   b9114:	2a2b      	cmp	r2, #43	; 0x2b
   b9116:	d04e      	beq.n	b91b6 <_strtod_l+0xd6>
   b9118:	d83b      	bhi.n	b9192 <_strtod_l+0xb2>
   b911a:	2a0d      	cmp	r2, #13
   b911c:	d834      	bhi.n	b9188 <_strtod_l+0xa8>
   b911e:	2a08      	cmp	r2, #8
   b9120:	d834      	bhi.n	b918c <_strtod_l+0xac>
   b9122:	2a00      	cmp	r2, #0
   b9124:	d03e      	beq.n	b91a4 <_strtod_l+0xc4>
   b9126:	2300      	movs	r3, #0
   b9128:	930a      	str	r3, [sp, #40]	; 0x28
   b912a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b912c:	7833      	ldrb	r3, [r6, #0]
   b912e:	2b30      	cmp	r3, #48	; 0x30
   b9130:	f040 80b0 	bne.w	b9294 <_strtod_l+0x1b4>
   b9134:	7873      	ldrb	r3, [r6, #1]
   b9136:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b913a:	2b58      	cmp	r3, #88	; 0x58
   b913c:	d168      	bne.n	b9210 <_strtod_l+0x130>
   b913e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9140:	9301      	str	r3, [sp, #4]
   b9142:	ab18      	add	r3, sp, #96	; 0x60
   b9144:	9702      	str	r7, [sp, #8]
   b9146:	9300      	str	r3, [sp, #0]
   b9148:	4a8d      	ldr	r2, [pc, #564]	; (b9380 <_strtod_l+0x2a0>)
   b914a:	ab19      	add	r3, sp, #100	; 0x64
   b914c:	a917      	add	r1, sp, #92	; 0x5c
   b914e:	4620      	mov	r0, r4
   b9150:	f000 ff8a 	bl	ba068 <__gethex>
   b9154:	f010 0707 	ands.w	r7, r0, #7
   b9158:	4605      	mov	r5, r0
   b915a:	d005      	beq.n	b9168 <_strtod_l+0x88>
   b915c:	2f06      	cmp	r7, #6
   b915e:	d12c      	bne.n	b91ba <_strtod_l+0xda>
   b9160:	3601      	adds	r6, #1
   b9162:	2300      	movs	r3, #0
   b9164:	9617      	str	r6, [sp, #92]	; 0x5c
   b9166:	930a      	str	r3, [sp, #40]	; 0x28
   b9168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b916a:	2b00      	cmp	r3, #0
   b916c:	f040 8590 	bne.w	b9c90 <_strtod_l+0xbb0>
   b9170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9172:	b1eb      	cbz	r3, b91b0 <_strtod_l+0xd0>
   b9174:	4652      	mov	r2, sl
   b9176:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b917a:	ec43 2b10 	vmov	d0, r2, r3
   b917e:	b01d      	add	sp, #116	; 0x74
   b9180:	ecbd 8b02 	vpop	{d8}
   b9184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9188:	2a20      	cmp	r2, #32
   b918a:	d1cc      	bne.n	b9126 <_strtod_l+0x46>
   b918c:	3301      	adds	r3, #1
   b918e:	9317      	str	r3, [sp, #92]	; 0x5c
   b9190:	e7be      	b.n	b9110 <_strtod_l+0x30>
   b9192:	2a2d      	cmp	r2, #45	; 0x2d
   b9194:	d1c7      	bne.n	b9126 <_strtod_l+0x46>
   b9196:	2201      	movs	r2, #1
   b9198:	920a      	str	r2, [sp, #40]	; 0x28
   b919a:	1c5a      	adds	r2, r3, #1
   b919c:	9217      	str	r2, [sp, #92]	; 0x5c
   b919e:	785b      	ldrb	r3, [r3, #1]
   b91a0:	2b00      	cmp	r3, #0
   b91a2:	d1c2      	bne.n	b912a <_strtod_l+0x4a>
   b91a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b91a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b91aa:	2b00      	cmp	r3, #0
   b91ac:	f040 856e 	bne.w	b9c8c <_strtod_l+0xbac>
   b91b0:	4652      	mov	r2, sl
   b91b2:	465b      	mov	r3, fp
   b91b4:	e7e1      	b.n	b917a <_strtod_l+0x9a>
   b91b6:	2200      	movs	r2, #0
   b91b8:	e7ee      	b.n	b9198 <_strtod_l+0xb8>
   b91ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b91bc:	b13a      	cbz	r2, b91ce <_strtod_l+0xee>
   b91be:	2135      	movs	r1, #53	; 0x35
   b91c0:	a81a      	add	r0, sp, #104	; 0x68
   b91c2:	f001 feec 	bl	baf9e <__copybits>
   b91c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b91c8:	4620      	mov	r0, r4
   b91ca:	f001 faab 	bl	ba724 <_Bfree>
   b91ce:	3f01      	subs	r7, #1
   b91d0:	2f04      	cmp	r7, #4
   b91d2:	d806      	bhi.n	b91e2 <_strtod_l+0x102>
   b91d4:	e8df f007 	tbb	[pc, r7]
   b91d8:	1714030a 	.word	0x1714030a
   b91dc:	0a          	.byte	0x0a
   b91dd:	00          	.byte	0x00
   b91de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b91e2:	0728      	lsls	r0, r5, #28
   b91e4:	d5c0      	bpl.n	b9168 <_strtod_l+0x88>
   b91e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b91ea:	e7bd      	b.n	b9168 <_strtod_l+0x88>
   b91ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b91f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b91f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b91f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b91fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b91fe:	e7f0      	b.n	b91e2 <_strtod_l+0x102>
   b9200:	f8df b180 	ldr.w	fp, [pc, #384]	; b9384 <_strtod_l+0x2a4>
   b9204:	e7ed      	b.n	b91e2 <_strtod_l+0x102>
   b9206:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b920a:	f04f 3aff 	mov.w	sl, #4294967295
   b920e:	e7e8      	b.n	b91e2 <_strtod_l+0x102>
   b9210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9212:	1c5a      	adds	r2, r3, #1
   b9214:	9217      	str	r2, [sp, #92]	; 0x5c
   b9216:	785b      	ldrb	r3, [r3, #1]
   b9218:	2b30      	cmp	r3, #48	; 0x30
   b921a:	d0f9      	beq.n	b9210 <_strtod_l+0x130>
   b921c:	2b00      	cmp	r3, #0
   b921e:	d0a3      	beq.n	b9168 <_strtod_l+0x88>
   b9220:	2301      	movs	r3, #1
   b9222:	f04f 0900 	mov.w	r9, #0
   b9226:	9304      	str	r3, [sp, #16]
   b9228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b922a:	9308      	str	r3, [sp, #32]
   b922c:	f8cd 901c 	str.w	r9, [sp, #28]
   b9230:	464f      	mov	r7, r9
   b9232:	220a      	movs	r2, #10
   b9234:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b9236:	7806      	ldrb	r6, [r0, #0]
   b9238:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b923c:	b2d9      	uxtb	r1, r3
   b923e:	2909      	cmp	r1, #9
   b9240:	d92a      	bls.n	b9298 <_strtod_l+0x1b8>
   b9242:	9905      	ldr	r1, [sp, #20]
   b9244:	462a      	mov	r2, r5
   b9246:	f7ff ff08 	bl	b905a <strncmp>
   b924a:	b398      	cbz	r0, b92b4 <_strtod_l+0x1d4>
   b924c:	2000      	movs	r0, #0
   b924e:	4632      	mov	r2, r6
   b9250:	463d      	mov	r5, r7
   b9252:	9005      	str	r0, [sp, #20]
   b9254:	4603      	mov	r3, r0
   b9256:	2a65      	cmp	r2, #101	; 0x65
   b9258:	d001      	beq.n	b925e <_strtod_l+0x17e>
   b925a:	2a45      	cmp	r2, #69	; 0x45
   b925c:	d118      	bne.n	b9290 <_strtod_l+0x1b0>
   b925e:	b91d      	cbnz	r5, b9268 <_strtod_l+0x188>
   b9260:	9a04      	ldr	r2, [sp, #16]
   b9262:	4302      	orrs	r2, r0
   b9264:	d09e      	beq.n	b91a4 <_strtod_l+0xc4>
   b9266:	2500      	movs	r5, #0
   b9268:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b926c:	f108 0201 	add.w	r2, r8, #1
   b9270:	9217      	str	r2, [sp, #92]	; 0x5c
   b9272:	f898 2001 	ldrb.w	r2, [r8, #1]
   b9276:	2a2b      	cmp	r2, #43	; 0x2b
   b9278:	d075      	beq.n	b9366 <_strtod_l+0x286>
   b927a:	2a2d      	cmp	r2, #45	; 0x2d
   b927c:	d07b      	beq.n	b9376 <_strtod_l+0x296>
   b927e:	f04f 0c00 	mov.w	ip, #0
   b9282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b9286:	2909      	cmp	r1, #9
   b9288:	f240 8082 	bls.w	b9390 <_strtod_l+0x2b0>
   b928c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9290:	2600      	movs	r6, #0
   b9292:	e09d      	b.n	b93d0 <_strtod_l+0x2f0>
   b9294:	2300      	movs	r3, #0
   b9296:	e7c4      	b.n	b9222 <_strtod_l+0x142>
   b9298:	2f08      	cmp	r7, #8
   b929a:	bfd8      	it	le
   b929c:	9907      	ldrle	r1, [sp, #28]
   b929e:	f100 0001 	add.w	r0, r0, #1
   b92a2:	bfda      	itte	le
   b92a4:	fb02 3301 	mlale	r3, r2, r1, r3
   b92a8:	9307      	strle	r3, [sp, #28]
   b92aa:	fb02 3909 	mlagt	r9, r2, r9, r3
   b92ae:	3701      	adds	r7, #1
   b92b0:	9017      	str	r0, [sp, #92]	; 0x5c
   b92b2:	e7bf      	b.n	b9234 <_strtod_l+0x154>
   b92b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92b6:	195a      	adds	r2, r3, r5
   b92b8:	9217      	str	r2, [sp, #92]	; 0x5c
   b92ba:	5d5a      	ldrb	r2, [r3, r5]
   b92bc:	2f00      	cmp	r7, #0
   b92be:	d037      	beq.n	b9330 <_strtod_l+0x250>
   b92c0:	9005      	str	r0, [sp, #20]
   b92c2:	463d      	mov	r5, r7
   b92c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b92c8:	2b09      	cmp	r3, #9
   b92ca:	d912      	bls.n	b92f2 <_strtod_l+0x212>
   b92cc:	2301      	movs	r3, #1
   b92ce:	e7c2      	b.n	b9256 <_strtod_l+0x176>
   b92d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92d2:	1c5a      	adds	r2, r3, #1
   b92d4:	9217      	str	r2, [sp, #92]	; 0x5c
   b92d6:	785a      	ldrb	r2, [r3, #1]
   b92d8:	3001      	adds	r0, #1
   b92da:	2a30      	cmp	r2, #48	; 0x30
   b92dc:	d0f8      	beq.n	b92d0 <_strtod_l+0x1f0>
   b92de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b92e2:	2b08      	cmp	r3, #8
   b92e4:	f200 84d9 	bhi.w	b9c9a <_strtod_l+0xbba>
   b92e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92ea:	9005      	str	r0, [sp, #20]
   b92ec:	2000      	movs	r0, #0
   b92ee:	9308      	str	r3, [sp, #32]
   b92f0:	4605      	mov	r5, r0
   b92f2:	3a30      	subs	r2, #48	; 0x30
   b92f4:	f100 0301 	add.w	r3, r0, #1
   b92f8:	d014      	beq.n	b9324 <_strtod_l+0x244>
   b92fa:	9905      	ldr	r1, [sp, #20]
   b92fc:	4419      	add	r1, r3
   b92fe:	9105      	str	r1, [sp, #20]
   b9300:	462b      	mov	r3, r5
   b9302:	eb00 0e05 	add.w	lr, r0, r5
   b9306:	210a      	movs	r1, #10
   b9308:	4573      	cmp	r3, lr
   b930a:	d113      	bne.n	b9334 <_strtod_l+0x254>
   b930c:	182b      	adds	r3, r5, r0
   b930e:	2b08      	cmp	r3, #8
   b9310:	f105 0501 	add.w	r5, r5, #1
   b9314:	4405      	add	r5, r0
   b9316:	dc1c      	bgt.n	b9352 <_strtod_l+0x272>
   b9318:	9907      	ldr	r1, [sp, #28]
   b931a:	230a      	movs	r3, #10
   b931c:	fb03 2301 	mla	r3, r3, r1, r2
   b9320:	9307      	str	r3, [sp, #28]
   b9322:	2300      	movs	r3, #0
   b9324:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9326:	1c51      	adds	r1, r2, #1
   b9328:	9117      	str	r1, [sp, #92]	; 0x5c
   b932a:	7852      	ldrb	r2, [r2, #1]
   b932c:	4618      	mov	r0, r3
   b932e:	e7c9      	b.n	b92c4 <_strtod_l+0x1e4>
   b9330:	4638      	mov	r0, r7
   b9332:	e7d2      	b.n	b92da <_strtod_l+0x1fa>
   b9334:	2b08      	cmp	r3, #8
   b9336:	dc04      	bgt.n	b9342 <_strtod_l+0x262>
   b9338:	9e07      	ldr	r6, [sp, #28]
   b933a:	434e      	muls	r6, r1
   b933c:	9607      	str	r6, [sp, #28]
   b933e:	3301      	adds	r3, #1
   b9340:	e7e2      	b.n	b9308 <_strtod_l+0x228>
   b9342:	f103 0c01 	add.w	ip, r3, #1
   b9346:	f1bc 0f10 	cmp.w	ip, #16
   b934a:	bfd8      	it	le
   b934c:	fb01 f909 	mulle.w	r9, r1, r9
   b9350:	e7f5      	b.n	b933e <_strtod_l+0x25e>
   b9352:	2d10      	cmp	r5, #16
   b9354:	bfdc      	itt	le
   b9356:	230a      	movle	r3, #10
   b9358:	fb03 2909 	mlale	r9, r3, r9, r2
   b935c:	e7e1      	b.n	b9322 <_strtod_l+0x242>
   b935e:	2300      	movs	r3, #0
   b9360:	9305      	str	r3, [sp, #20]
   b9362:	2301      	movs	r3, #1
   b9364:	e77c      	b.n	b9260 <_strtod_l+0x180>
   b9366:	f04f 0c00 	mov.w	ip, #0
   b936a:	f108 0202 	add.w	r2, r8, #2
   b936e:	9217      	str	r2, [sp, #92]	; 0x5c
   b9370:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9374:	e785      	b.n	b9282 <_strtod_l+0x1a2>
   b9376:	f04f 0c01 	mov.w	ip, #1
   b937a:	e7f6      	b.n	b936a <_strtod_l+0x28a>
   b937c:	000bb9c8 	.word	0x000bb9c8
   b9380:	000bb760 	.word	0x000bb760
   b9384:	7ff00000 	.word	0x7ff00000
   b9388:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b938a:	1c51      	adds	r1, r2, #1
   b938c:	9117      	str	r1, [sp, #92]	; 0x5c
   b938e:	7852      	ldrb	r2, [r2, #1]
   b9390:	2a30      	cmp	r2, #48	; 0x30
   b9392:	d0f9      	beq.n	b9388 <_strtod_l+0x2a8>
   b9394:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9398:	2908      	cmp	r1, #8
   b939a:	f63f af79 	bhi.w	b9290 <_strtod_l+0x1b0>
   b939e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b93a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b93a4:	9206      	str	r2, [sp, #24]
   b93a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b93a8:	1c51      	adds	r1, r2, #1
   b93aa:	9117      	str	r1, [sp, #92]	; 0x5c
   b93ac:	7852      	ldrb	r2, [r2, #1]
   b93ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b93b2:	2e09      	cmp	r6, #9
   b93b4:	d937      	bls.n	b9426 <_strtod_l+0x346>
   b93b6:	9e06      	ldr	r6, [sp, #24]
   b93b8:	1b89      	subs	r1, r1, r6
   b93ba:	2908      	cmp	r1, #8
   b93bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b93c0:	dc02      	bgt.n	b93c8 <_strtod_l+0x2e8>
   b93c2:	4576      	cmp	r6, lr
   b93c4:	bfa8      	it	ge
   b93c6:	4676      	movge	r6, lr
   b93c8:	f1bc 0f00 	cmp.w	ip, #0
   b93cc:	d000      	beq.n	b93d0 <_strtod_l+0x2f0>
   b93ce:	4276      	negs	r6, r6
   b93d0:	2d00      	cmp	r5, #0
   b93d2:	d14d      	bne.n	b9470 <_strtod_l+0x390>
   b93d4:	9904      	ldr	r1, [sp, #16]
   b93d6:	4301      	orrs	r1, r0
   b93d8:	f47f aec6 	bne.w	b9168 <_strtod_l+0x88>
   b93dc:	2b00      	cmp	r3, #0
   b93de:	f47f aee1 	bne.w	b91a4 <_strtod_l+0xc4>
   b93e2:	2a69      	cmp	r2, #105	; 0x69
   b93e4:	d027      	beq.n	b9436 <_strtod_l+0x356>
   b93e6:	dc24      	bgt.n	b9432 <_strtod_l+0x352>
   b93e8:	2a49      	cmp	r2, #73	; 0x49
   b93ea:	d024      	beq.n	b9436 <_strtod_l+0x356>
   b93ec:	2a4e      	cmp	r2, #78	; 0x4e
   b93ee:	f47f aed9 	bne.w	b91a4 <_strtod_l+0xc4>
   b93f2:	499f      	ldr	r1, [pc, #636]	; (b9670 <_strtod_l+0x590>)
   b93f4:	a817      	add	r0, sp, #92	; 0x5c
   b93f6:	f001 f88f 	bl	ba518 <__match>
   b93fa:	2800      	cmp	r0, #0
   b93fc:	f43f aed2 	beq.w	b91a4 <_strtod_l+0xc4>
   b9400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9402:	781b      	ldrb	r3, [r3, #0]
   b9404:	2b28      	cmp	r3, #40	; 0x28
   b9406:	d12d      	bne.n	b9464 <_strtod_l+0x384>
   b9408:	499a      	ldr	r1, [pc, #616]	; (b9674 <_strtod_l+0x594>)
   b940a:	aa1a      	add	r2, sp, #104	; 0x68
   b940c:	a817      	add	r0, sp, #92	; 0x5c
   b940e:	f001 f897 	bl	ba540 <__hexnan>
   b9412:	2805      	cmp	r0, #5
   b9414:	d126      	bne.n	b9464 <_strtod_l+0x384>
   b9416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9418:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b941c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9420:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9424:	e6a0      	b.n	b9168 <_strtod_l+0x88>
   b9426:	210a      	movs	r1, #10
   b9428:	fb01 2e0e 	mla	lr, r1, lr, r2
   b942c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9430:	e7b9      	b.n	b93a6 <_strtod_l+0x2c6>
   b9432:	2a6e      	cmp	r2, #110	; 0x6e
   b9434:	e7db      	b.n	b93ee <_strtod_l+0x30e>
   b9436:	4990      	ldr	r1, [pc, #576]	; (b9678 <_strtod_l+0x598>)
   b9438:	a817      	add	r0, sp, #92	; 0x5c
   b943a:	f001 f86d 	bl	ba518 <__match>
   b943e:	2800      	cmp	r0, #0
   b9440:	f43f aeb0 	beq.w	b91a4 <_strtod_l+0xc4>
   b9444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9446:	498d      	ldr	r1, [pc, #564]	; (b967c <_strtod_l+0x59c>)
   b9448:	3b01      	subs	r3, #1
   b944a:	a817      	add	r0, sp, #92	; 0x5c
   b944c:	9317      	str	r3, [sp, #92]	; 0x5c
   b944e:	f001 f863 	bl	ba518 <__match>
   b9452:	b910      	cbnz	r0, b945a <_strtod_l+0x37a>
   b9454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9456:	3301      	adds	r3, #1
   b9458:	9317      	str	r3, [sp, #92]	; 0x5c
   b945a:	f8df b230 	ldr.w	fp, [pc, #560]	; b968c <_strtod_l+0x5ac>
   b945e:	f04f 0a00 	mov.w	sl, #0
   b9462:	e681      	b.n	b9168 <_strtod_l+0x88>
   b9464:	4886      	ldr	r0, [pc, #536]	; (b9680 <_strtod_l+0x5a0>)
   b9466:	f001 fdef 	bl	bb048 <nan>
   b946a:	ec5b ab10 	vmov	sl, fp, d0
   b946e:	e67b      	b.n	b9168 <_strtod_l+0x88>
   b9470:	9b05      	ldr	r3, [sp, #20]
   b9472:	9807      	ldr	r0, [sp, #28]
   b9474:	1af3      	subs	r3, r6, r3
   b9476:	2f00      	cmp	r7, #0
   b9478:	bf08      	it	eq
   b947a:	462f      	moveq	r7, r5
   b947c:	2d10      	cmp	r5, #16
   b947e:	9306      	str	r3, [sp, #24]
   b9480:	46a8      	mov	r8, r5
   b9482:	bfa8      	it	ge
   b9484:	f04f 0810 	movge.w	r8, #16
   b9488:	f7ff f9e8 	bl	b885c <__aeabi_ui2d>
   b948c:	2d09      	cmp	r5, #9
   b948e:	4682      	mov	sl, r0
   b9490:	468b      	mov	fp, r1
   b9492:	dd13      	ble.n	b94bc <_strtod_l+0x3dc>
   b9494:	4b7b      	ldr	r3, [pc, #492]	; (b9684 <_strtod_l+0x5a4>)
   b9496:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b949a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b949e:	f7ff fa57 	bl	b8950 <__aeabi_dmul>
   b94a2:	4682      	mov	sl, r0
   b94a4:	4648      	mov	r0, r9
   b94a6:	468b      	mov	fp, r1
   b94a8:	f7ff f9d8 	bl	b885c <__aeabi_ui2d>
   b94ac:	4602      	mov	r2, r0
   b94ae:	460b      	mov	r3, r1
   b94b0:	4650      	mov	r0, sl
   b94b2:	4659      	mov	r1, fp
   b94b4:	f7ff f896 	bl	b85e4 <__adddf3>
   b94b8:	4682      	mov	sl, r0
   b94ba:	468b      	mov	fp, r1
   b94bc:	2d0f      	cmp	r5, #15
   b94be:	dc38      	bgt.n	b9532 <_strtod_l+0x452>
   b94c0:	9b06      	ldr	r3, [sp, #24]
   b94c2:	2b00      	cmp	r3, #0
   b94c4:	f43f ae50 	beq.w	b9168 <_strtod_l+0x88>
   b94c8:	dd24      	ble.n	b9514 <_strtod_l+0x434>
   b94ca:	2b16      	cmp	r3, #22
   b94cc:	dc0b      	bgt.n	b94e6 <_strtod_l+0x406>
   b94ce:	496d      	ldr	r1, [pc, #436]	; (b9684 <_strtod_l+0x5a4>)
   b94d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b94d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b94d8:	4652      	mov	r2, sl
   b94da:	465b      	mov	r3, fp
   b94dc:	f7ff fa38 	bl	b8950 <__aeabi_dmul>
   b94e0:	4682      	mov	sl, r0
   b94e2:	468b      	mov	fp, r1
   b94e4:	e640      	b.n	b9168 <_strtod_l+0x88>
   b94e6:	9a06      	ldr	r2, [sp, #24]
   b94e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b94ec:	4293      	cmp	r3, r2
   b94ee:	db20      	blt.n	b9532 <_strtod_l+0x452>
   b94f0:	4c64      	ldr	r4, [pc, #400]	; (b9684 <_strtod_l+0x5a4>)
   b94f2:	f1c5 050f 	rsb	r5, r5, #15
   b94f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b94fa:	4652      	mov	r2, sl
   b94fc:	465b      	mov	r3, fp
   b94fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9502:	f7ff fa25 	bl	b8950 <__aeabi_dmul>
   b9506:	9b06      	ldr	r3, [sp, #24]
   b9508:	1b5d      	subs	r5, r3, r5
   b950a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b950e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9512:	e7e3      	b.n	b94dc <_strtod_l+0x3fc>
   b9514:	9b06      	ldr	r3, [sp, #24]
   b9516:	3316      	adds	r3, #22
   b9518:	db0b      	blt.n	b9532 <_strtod_l+0x452>
   b951a:	9b05      	ldr	r3, [sp, #20]
   b951c:	1b9e      	subs	r6, r3, r6
   b951e:	4b59      	ldr	r3, [pc, #356]	; (b9684 <_strtod_l+0x5a4>)
   b9520:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9524:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9528:	4650      	mov	r0, sl
   b952a:	4659      	mov	r1, fp
   b952c:	f7ff fb3a 	bl	b8ba4 <__aeabi_ddiv>
   b9530:	e7d6      	b.n	b94e0 <_strtod_l+0x400>
   b9532:	9b06      	ldr	r3, [sp, #24]
   b9534:	eba5 0808 	sub.w	r8, r5, r8
   b9538:	4498      	add	r8, r3
   b953a:	f1b8 0f00 	cmp.w	r8, #0
   b953e:	dd74      	ble.n	b962a <_strtod_l+0x54a>
   b9540:	f018 030f 	ands.w	r3, r8, #15
   b9544:	d00a      	beq.n	b955c <_strtod_l+0x47c>
   b9546:	494f      	ldr	r1, [pc, #316]	; (b9684 <_strtod_l+0x5a4>)
   b9548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b954c:	4652      	mov	r2, sl
   b954e:	465b      	mov	r3, fp
   b9550:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9554:	f7ff f9fc 	bl	b8950 <__aeabi_dmul>
   b9558:	4682      	mov	sl, r0
   b955a:	468b      	mov	fp, r1
   b955c:	f038 080f 	bics.w	r8, r8, #15
   b9560:	d04f      	beq.n	b9602 <_strtod_l+0x522>
   b9562:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9566:	dd22      	ble.n	b95ae <_strtod_l+0x4ce>
   b9568:	2500      	movs	r5, #0
   b956a:	462e      	mov	r6, r5
   b956c:	9507      	str	r5, [sp, #28]
   b956e:	9505      	str	r5, [sp, #20]
   b9570:	2322      	movs	r3, #34	; 0x22
   b9572:	f8df b118 	ldr.w	fp, [pc, #280]	; b968c <_strtod_l+0x5ac>
   b9576:	6023      	str	r3, [r4, #0]
   b9578:	f04f 0a00 	mov.w	sl, #0
   b957c:	9b07      	ldr	r3, [sp, #28]
   b957e:	2b00      	cmp	r3, #0
   b9580:	f43f adf2 	beq.w	b9168 <_strtod_l+0x88>
   b9584:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9586:	4620      	mov	r0, r4
   b9588:	f001 f8cc 	bl	ba724 <_Bfree>
   b958c:	9905      	ldr	r1, [sp, #20]
   b958e:	4620      	mov	r0, r4
   b9590:	f001 f8c8 	bl	ba724 <_Bfree>
   b9594:	4631      	mov	r1, r6
   b9596:	4620      	mov	r0, r4
   b9598:	f001 f8c4 	bl	ba724 <_Bfree>
   b959c:	9907      	ldr	r1, [sp, #28]
   b959e:	4620      	mov	r0, r4
   b95a0:	f001 f8c0 	bl	ba724 <_Bfree>
   b95a4:	4629      	mov	r1, r5
   b95a6:	4620      	mov	r0, r4
   b95a8:	f001 f8bc 	bl	ba724 <_Bfree>
   b95ac:	e5dc      	b.n	b9168 <_strtod_l+0x88>
   b95ae:	4b36      	ldr	r3, [pc, #216]	; (b9688 <_strtod_l+0x5a8>)
   b95b0:	9304      	str	r3, [sp, #16]
   b95b2:	2300      	movs	r3, #0
   b95b4:	ea4f 1828 	mov.w	r8, r8, asr #4
   b95b8:	4650      	mov	r0, sl
   b95ba:	4659      	mov	r1, fp
   b95bc:	4699      	mov	r9, r3
   b95be:	f1b8 0f01 	cmp.w	r8, #1
   b95c2:	dc21      	bgt.n	b9608 <_strtod_l+0x528>
   b95c4:	b10b      	cbz	r3, b95ca <_strtod_l+0x4ea>
   b95c6:	4682      	mov	sl, r0
   b95c8:	468b      	mov	fp, r1
   b95ca:	4b2f      	ldr	r3, [pc, #188]	; (b9688 <_strtod_l+0x5a8>)
   b95cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b95d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b95d4:	4652      	mov	r2, sl
   b95d6:	465b      	mov	r3, fp
   b95d8:	e9d9 0100 	ldrd	r0, r1, [r9]
   b95dc:	f7ff f9b8 	bl	b8950 <__aeabi_dmul>
   b95e0:	4b2a      	ldr	r3, [pc, #168]	; (b968c <_strtod_l+0x5ac>)
   b95e2:	460a      	mov	r2, r1
   b95e4:	400b      	ands	r3, r1
   b95e6:	492a      	ldr	r1, [pc, #168]	; (b9690 <_strtod_l+0x5b0>)
   b95e8:	428b      	cmp	r3, r1
   b95ea:	4682      	mov	sl, r0
   b95ec:	d8bc      	bhi.n	b9568 <_strtod_l+0x488>
   b95ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b95f2:	428b      	cmp	r3, r1
   b95f4:	bf86      	itte	hi
   b95f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9694 <_strtod_l+0x5b4>
   b95fa:	f04f 3aff 	movhi.w	sl, #4294967295
   b95fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9602:	2300      	movs	r3, #0
   b9604:	9304      	str	r3, [sp, #16]
   b9606:	e084      	b.n	b9712 <_strtod_l+0x632>
   b9608:	f018 0f01 	tst.w	r8, #1
   b960c:	d005      	beq.n	b961a <_strtod_l+0x53a>
   b960e:	9b04      	ldr	r3, [sp, #16]
   b9610:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9614:	f7ff f99c 	bl	b8950 <__aeabi_dmul>
   b9618:	2301      	movs	r3, #1
   b961a:	9a04      	ldr	r2, [sp, #16]
   b961c:	3208      	adds	r2, #8
   b961e:	f109 0901 	add.w	r9, r9, #1
   b9622:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9626:	9204      	str	r2, [sp, #16]
   b9628:	e7c9      	b.n	b95be <_strtod_l+0x4de>
   b962a:	d0ea      	beq.n	b9602 <_strtod_l+0x522>
   b962c:	f1c8 0800 	rsb	r8, r8, #0
   b9630:	f018 020f 	ands.w	r2, r8, #15
   b9634:	d00a      	beq.n	b964c <_strtod_l+0x56c>
   b9636:	4b13      	ldr	r3, [pc, #76]	; (b9684 <_strtod_l+0x5a4>)
   b9638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b963c:	4650      	mov	r0, sl
   b963e:	4659      	mov	r1, fp
   b9640:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9644:	f7ff faae 	bl	b8ba4 <__aeabi_ddiv>
   b9648:	4682      	mov	sl, r0
   b964a:	468b      	mov	fp, r1
   b964c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9650:	d0d7      	beq.n	b9602 <_strtod_l+0x522>
   b9652:	f1b8 0f1f 	cmp.w	r8, #31
   b9656:	dd1f      	ble.n	b9698 <_strtod_l+0x5b8>
   b9658:	2500      	movs	r5, #0
   b965a:	462e      	mov	r6, r5
   b965c:	9507      	str	r5, [sp, #28]
   b965e:	9505      	str	r5, [sp, #20]
   b9660:	2322      	movs	r3, #34	; 0x22
   b9662:	f04f 0a00 	mov.w	sl, #0
   b9666:	f04f 0b00 	mov.w	fp, #0
   b966a:	6023      	str	r3, [r4, #0]
   b966c:	e786      	b.n	b957c <_strtod_l+0x49c>
   b966e:	bf00      	nop
   b9670:	000bb75a 	.word	0x000bb75a
   b9674:	000bb774 	.word	0x000bb774
   b9678:	000bb751 	.word	0x000bb751
   b967c:	000bb754 	.word	0x000bb754
   b9680:	000bb164 	.word	0x000bb164
   b9684:	000bba88 	.word	0x000bba88
   b9688:	000bba60 	.word	0x000bba60
   b968c:	7ff00000 	.word	0x7ff00000
   b9690:	7ca00000 	.word	0x7ca00000
   b9694:	7fefffff 	.word	0x7fefffff
   b9698:	f018 0310 	ands.w	r3, r8, #16
   b969c:	bf18      	it	ne
   b969e:	236a      	movne	r3, #106	; 0x6a
   b96a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9a50 <_strtod_l+0x970>
   b96a4:	9304      	str	r3, [sp, #16]
   b96a6:	4650      	mov	r0, sl
   b96a8:	4659      	mov	r1, fp
   b96aa:	2300      	movs	r3, #0
   b96ac:	f018 0f01 	tst.w	r8, #1
   b96b0:	d004      	beq.n	b96bc <_strtod_l+0x5dc>
   b96b2:	e9d9 2300 	ldrd	r2, r3, [r9]
   b96b6:	f7ff f94b 	bl	b8950 <__aeabi_dmul>
   b96ba:	2301      	movs	r3, #1
   b96bc:	ea5f 0868 	movs.w	r8, r8, asr #1
   b96c0:	f109 0908 	add.w	r9, r9, #8
   b96c4:	d1f2      	bne.n	b96ac <_strtod_l+0x5cc>
   b96c6:	b10b      	cbz	r3, b96cc <_strtod_l+0x5ec>
   b96c8:	4682      	mov	sl, r0
   b96ca:	468b      	mov	fp, r1
   b96cc:	9b04      	ldr	r3, [sp, #16]
   b96ce:	b1c3      	cbz	r3, b9702 <_strtod_l+0x622>
   b96d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b96d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b96d8:	2b00      	cmp	r3, #0
   b96da:	4659      	mov	r1, fp
   b96dc:	dd11      	ble.n	b9702 <_strtod_l+0x622>
   b96de:	2b1f      	cmp	r3, #31
   b96e0:	f340 8124 	ble.w	b992c <_strtod_l+0x84c>
   b96e4:	2b34      	cmp	r3, #52	; 0x34
   b96e6:	bfde      	ittt	le
   b96e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b96ec:	f04f 33ff 	movle.w	r3, #4294967295
   b96f0:	fa03 f202 	lslle.w	r2, r3, r2
   b96f4:	f04f 0a00 	mov.w	sl, #0
   b96f8:	bfcc      	ite	gt
   b96fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b96fe:	ea02 0b01 	andle.w	fp, r2, r1
   b9702:	2200      	movs	r2, #0
   b9704:	2300      	movs	r3, #0
   b9706:	4650      	mov	r0, sl
   b9708:	4659      	mov	r1, fp
   b970a:	f7ff fb89 	bl	b8e20 <__aeabi_dcmpeq>
   b970e:	2800      	cmp	r0, #0
   b9710:	d1a2      	bne.n	b9658 <_strtod_l+0x578>
   b9712:	9b07      	ldr	r3, [sp, #28]
   b9714:	9300      	str	r3, [sp, #0]
   b9716:	9908      	ldr	r1, [sp, #32]
   b9718:	462b      	mov	r3, r5
   b971a:	463a      	mov	r2, r7
   b971c:	4620      	mov	r0, r4
   b971e:	f001 f869 	bl	ba7f4 <__s2b>
   b9722:	9007      	str	r0, [sp, #28]
   b9724:	2800      	cmp	r0, #0
   b9726:	f43f af1f 	beq.w	b9568 <_strtod_l+0x488>
   b972a:	9b05      	ldr	r3, [sp, #20]
   b972c:	1b9e      	subs	r6, r3, r6
   b972e:	9b06      	ldr	r3, [sp, #24]
   b9730:	2b00      	cmp	r3, #0
   b9732:	bfb4      	ite	lt
   b9734:	4633      	movlt	r3, r6
   b9736:	2300      	movge	r3, #0
   b9738:	930c      	str	r3, [sp, #48]	; 0x30
   b973a:	9b06      	ldr	r3, [sp, #24]
   b973c:	2500      	movs	r5, #0
   b973e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9742:	9312      	str	r3, [sp, #72]	; 0x48
   b9744:	462e      	mov	r6, r5
   b9746:	9b07      	ldr	r3, [sp, #28]
   b9748:	4620      	mov	r0, r4
   b974a:	6859      	ldr	r1, [r3, #4]
   b974c:	f000 ffaa 	bl	ba6a4 <_Balloc>
   b9750:	9005      	str	r0, [sp, #20]
   b9752:	2800      	cmp	r0, #0
   b9754:	f43f af0c 	beq.w	b9570 <_strtod_l+0x490>
   b9758:	9b07      	ldr	r3, [sp, #28]
   b975a:	691a      	ldr	r2, [r3, #16]
   b975c:	3202      	adds	r2, #2
   b975e:	f103 010c 	add.w	r1, r3, #12
   b9762:	0092      	lsls	r2, r2, #2
   b9764:	300c      	adds	r0, #12
   b9766:	f7ff fbec 	bl	b8f42 <memcpy>
   b976a:	ec4b ab10 	vmov	d0, sl, fp
   b976e:	aa1a      	add	r2, sp, #104	; 0x68
   b9770:	a919      	add	r1, sp, #100	; 0x64
   b9772:	4620      	mov	r0, r4
   b9774:	f001 fb84 	bl	bae80 <__d2b>
   b9778:	ec4b ab18 	vmov	d8, sl, fp
   b977c:	9018      	str	r0, [sp, #96]	; 0x60
   b977e:	2800      	cmp	r0, #0
   b9780:	f43f aef6 	beq.w	b9570 <_strtod_l+0x490>
   b9784:	2101      	movs	r1, #1
   b9786:	4620      	mov	r0, r4
   b9788:	f001 f8ce 	bl	ba928 <__i2b>
   b978c:	4606      	mov	r6, r0
   b978e:	2800      	cmp	r0, #0
   b9790:	f43f aeee 	beq.w	b9570 <_strtod_l+0x490>
   b9794:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9796:	9904      	ldr	r1, [sp, #16]
   b9798:	2b00      	cmp	r3, #0
   b979a:	bfab      	itete	ge
   b979c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b979e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b97a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b97a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b97a6:	bfac      	ite	ge
   b97a8:	eb03 0902 	addge.w	r9, r3, r2
   b97ac:	1ad7      	sublt	r7, r2, r3
   b97ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b97b0:	eba3 0801 	sub.w	r8, r3, r1
   b97b4:	4490      	add	r8, r2
   b97b6:	4ba1      	ldr	r3, [pc, #644]	; (b9a3c <_strtod_l+0x95c>)
   b97b8:	f108 38ff 	add.w	r8, r8, #4294967295
   b97bc:	4598      	cmp	r8, r3
   b97be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b97c2:	f280 80c7 	bge.w	b9954 <_strtod_l+0x874>
   b97c6:	eba3 0308 	sub.w	r3, r3, r8
   b97ca:	2b1f      	cmp	r3, #31
   b97cc:	eba2 0203 	sub.w	r2, r2, r3
   b97d0:	f04f 0101 	mov.w	r1, #1
   b97d4:	f300 80b1 	bgt.w	b993a <_strtod_l+0x85a>
   b97d8:	fa01 f303 	lsl.w	r3, r1, r3
   b97dc:	930d      	str	r3, [sp, #52]	; 0x34
   b97de:	2300      	movs	r3, #0
   b97e0:	9308      	str	r3, [sp, #32]
   b97e2:	eb09 0802 	add.w	r8, r9, r2
   b97e6:	9b04      	ldr	r3, [sp, #16]
   b97e8:	45c1      	cmp	r9, r8
   b97ea:	4417      	add	r7, r2
   b97ec:	441f      	add	r7, r3
   b97ee:	464b      	mov	r3, r9
   b97f0:	bfa8      	it	ge
   b97f2:	4643      	movge	r3, r8
   b97f4:	42bb      	cmp	r3, r7
   b97f6:	bfa8      	it	ge
   b97f8:	463b      	movge	r3, r7
   b97fa:	2b00      	cmp	r3, #0
   b97fc:	bfc2      	ittt	gt
   b97fe:	eba8 0803 	subgt.w	r8, r8, r3
   b9802:	1aff      	subgt	r7, r7, r3
   b9804:	eba9 0903 	subgt.w	r9, r9, r3
   b9808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b980a:	2b00      	cmp	r3, #0
   b980c:	dd17      	ble.n	b983e <_strtod_l+0x75e>
   b980e:	4631      	mov	r1, r6
   b9810:	461a      	mov	r2, r3
   b9812:	4620      	mov	r0, r4
   b9814:	f001 f948 	bl	baaa8 <__pow5mult>
   b9818:	4606      	mov	r6, r0
   b981a:	2800      	cmp	r0, #0
   b981c:	f43f aea8 	beq.w	b9570 <_strtod_l+0x490>
   b9820:	4601      	mov	r1, r0
   b9822:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9824:	4620      	mov	r0, r4
   b9826:	f001 f895 	bl	ba954 <__multiply>
   b982a:	900b      	str	r0, [sp, #44]	; 0x2c
   b982c:	2800      	cmp	r0, #0
   b982e:	f43f ae9f 	beq.w	b9570 <_strtod_l+0x490>
   b9832:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9834:	4620      	mov	r0, r4
   b9836:	f000 ff75 	bl	ba724 <_Bfree>
   b983a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b983c:	9318      	str	r3, [sp, #96]	; 0x60
   b983e:	f1b8 0f00 	cmp.w	r8, #0
   b9842:	f300 808c 	bgt.w	b995e <_strtod_l+0x87e>
   b9846:	9b06      	ldr	r3, [sp, #24]
   b9848:	2b00      	cmp	r3, #0
   b984a:	dd08      	ble.n	b985e <_strtod_l+0x77e>
   b984c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b984e:	9905      	ldr	r1, [sp, #20]
   b9850:	4620      	mov	r0, r4
   b9852:	f001 f929 	bl	baaa8 <__pow5mult>
   b9856:	9005      	str	r0, [sp, #20]
   b9858:	2800      	cmp	r0, #0
   b985a:	f43f ae89 	beq.w	b9570 <_strtod_l+0x490>
   b985e:	2f00      	cmp	r7, #0
   b9860:	dd08      	ble.n	b9874 <_strtod_l+0x794>
   b9862:	9905      	ldr	r1, [sp, #20]
   b9864:	463a      	mov	r2, r7
   b9866:	4620      	mov	r0, r4
   b9868:	f001 f978 	bl	bab5c <__lshift>
   b986c:	9005      	str	r0, [sp, #20]
   b986e:	2800      	cmp	r0, #0
   b9870:	f43f ae7e 	beq.w	b9570 <_strtod_l+0x490>
   b9874:	f1b9 0f00 	cmp.w	r9, #0
   b9878:	dd08      	ble.n	b988c <_strtod_l+0x7ac>
   b987a:	4631      	mov	r1, r6
   b987c:	464a      	mov	r2, r9
   b987e:	4620      	mov	r0, r4
   b9880:	f001 f96c 	bl	bab5c <__lshift>
   b9884:	4606      	mov	r6, r0
   b9886:	2800      	cmp	r0, #0
   b9888:	f43f ae72 	beq.w	b9570 <_strtod_l+0x490>
   b988c:	9a05      	ldr	r2, [sp, #20]
   b988e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9890:	4620      	mov	r0, r4
   b9892:	f001 f9ef 	bl	bac74 <__mdiff>
   b9896:	4605      	mov	r5, r0
   b9898:	2800      	cmp	r0, #0
   b989a:	f43f ae69 	beq.w	b9570 <_strtod_l+0x490>
   b989e:	68c3      	ldr	r3, [r0, #12]
   b98a0:	930b      	str	r3, [sp, #44]	; 0x2c
   b98a2:	2300      	movs	r3, #0
   b98a4:	60c3      	str	r3, [r0, #12]
   b98a6:	4631      	mov	r1, r6
   b98a8:	f001 f9c8 	bl	bac3c <__mcmp>
   b98ac:	2800      	cmp	r0, #0
   b98ae:	da60      	bge.n	b9972 <_strtod_l+0x892>
   b98b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b98b2:	ea53 030a 	orrs.w	r3, r3, sl
   b98b6:	f040 8082 	bne.w	b99be <_strtod_l+0x8de>
   b98ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b98be:	2b00      	cmp	r3, #0
   b98c0:	d17d      	bne.n	b99be <_strtod_l+0x8de>
   b98c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b98c6:	0d1b      	lsrs	r3, r3, #20
   b98c8:	051b      	lsls	r3, r3, #20
   b98ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b98ce:	d976      	bls.n	b99be <_strtod_l+0x8de>
   b98d0:	696b      	ldr	r3, [r5, #20]
   b98d2:	b913      	cbnz	r3, b98da <_strtod_l+0x7fa>
   b98d4:	692b      	ldr	r3, [r5, #16]
   b98d6:	2b01      	cmp	r3, #1
   b98d8:	dd71      	ble.n	b99be <_strtod_l+0x8de>
   b98da:	4629      	mov	r1, r5
   b98dc:	2201      	movs	r2, #1
   b98de:	4620      	mov	r0, r4
   b98e0:	f001 f93c 	bl	bab5c <__lshift>
   b98e4:	4631      	mov	r1, r6
   b98e6:	4605      	mov	r5, r0
   b98e8:	f001 f9a8 	bl	bac3c <__mcmp>
   b98ec:	2800      	cmp	r0, #0
   b98ee:	dd66      	ble.n	b99be <_strtod_l+0x8de>
   b98f0:	9904      	ldr	r1, [sp, #16]
   b98f2:	4a53      	ldr	r2, [pc, #332]	; (b9a40 <_strtod_l+0x960>)
   b98f4:	465b      	mov	r3, fp
   b98f6:	2900      	cmp	r1, #0
   b98f8:	f000 8081 	beq.w	b99fe <_strtod_l+0x91e>
   b98fc:	ea02 010b 	and.w	r1, r2, fp
   b9900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b9904:	dc7b      	bgt.n	b99fe <_strtod_l+0x91e>
   b9906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b990a:	f77f aea9 	ble.w	b9660 <_strtod_l+0x580>
   b990e:	4b4d      	ldr	r3, [pc, #308]	; (b9a44 <_strtod_l+0x964>)
   b9910:	4650      	mov	r0, sl
   b9912:	4659      	mov	r1, fp
   b9914:	2200      	movs	r2, #0
   b9916:	f7ff f81b 	bl	b8950 <__aeabi_dmul>
   b991a:	460b      	mov	r3, r1
   b991c:	4303      	orrs	r3, r0
   b991e:	bf08      	it	eq
   b9920:	2322      	moveq	r3, #34	; 0x22
   b9922:	4682      	mov	sl, r0
   b9924:	468b      	mov	fp, r1
   b9926:	bf08      	it	eq
   b9928:	6023      	streq	r3, [r4, #0]
   b992a:	e62b      	b.n	b9584 <_strtod_l+0x4a4>
   b992c:	f04f 32ff 	mov.w	r2, #4294967295
   b9930:	fa02 f303 	lsl.w	r3, r2, r3
   b9934:	ea03 0a0a 	and.w	sl, r3, sl
   b9938:	e6e3      	b.n	b9702 <_strtod_l+0x622>
   b993a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b993e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b9942:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b9946:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b994a:	fa01 f308 	lsl.w	r3, r1, r8
   b994e:	9308      	str	r3, [sp, #32]
   b9950:	910d      	str	r1, [sp, #52]	; 0x34
   b9952:	e746      	b.n	b97e2 <_strtod_l+0x702>
   b9954:	2300      	movs	r3, #0
   b9956:	9308      	str	r3, [sp, #32]
   b9958:	2301      	movs	r3, #1
   b995a:	930d      	str	r3, [sp, #52]	; 0x34
   b995c:	e741      	b.n	b97e2 <_strtod_l+0x702>
   b995e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9960:	4642      	mov	r2, r8
   b9962:	4620      	mov	r0, r4
   b9964:	f001 f8fa 	bl	bab5c <__lshift>
   b9968:	9018      	str	r0, [sp, #96]	; 0x60
   b996a:	2800      	cmp	r0, #0
   b996c:	f47f af6b 	bne.w	b9846 <_strtod_l+0x766>
   b9970:	e5fe      	b.n	b9570 <_strtod_l+0x490>
   b9972:	465f      	mov	r7, fp
   b9974:	d16e      	bne.n	b9a54 <_strtod_l+0x974>
   b9976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9978:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b997c:	b342      	cbz	r2, b99d0 <_strtod_l+0x8f0>
   b997e:	4a32      	ldr	r2, [pc, #200]	; (b9a48 <_strtod_l+0x968>)
   b9980:	4293      	cmp	r3, r2
   b9982:	d128      	bne.n	b99d6 <_strtod_l+0x8f6>
   b9984:	9b04      	ldr	r3, [sp, #16]
   b9986:	4651      	mov	r1, sl
   b9988:	b1eb      	cbz	r3, b99c6 <_strtod_l+0x8e6>
   b998a:	4b2d      	ldr	r3, [pc, #180]	; (b9a40 <_strtod_l+0x960>)
   b998c:	403b      	ands	r3, r7
   b998e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9992:	f04f 32ff 	mov.w	r2, #4294967295
   b9996:	d819      	bhi.n	b99cc <_strtod_l+0x8ec>
   b9998:	0d1b      	lsrs	r3, r3, #20
   b999a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b999e:	fa02 f303 	lsl.w	r3, r2, r3
   b99a2:	4299      	cmp	r1, r3
   b99a4:	d117      	bne.n	b99d6 <_strtod_l+0x8f6>
   b99a6:	4b29      	ldr	r3, [pc, #164]	; (b9a4c <_strtod_l+0x96c>)
   b99a8:	429f      	cmp	r7, r3
   b99aa:	d102      	bne.n	b99b2 <_strtod_l+0x8d2>
   b99ac:	3101      	adds	r1, #1
   b99ae:	f43f addf 	beq.w	b9570 <_strtod_l+0x490>
   b99b2:	4b23      	ldr	r3, [pc, #140]	; (b9a40 <_strtod_l+0x960>)
   b99b4:	403b      	ands	r3, r7
   b99b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b99ba:	f04f 0a00 	mov.w	sl, #0
   b99be:	9b04      	ldr	r3, [sp, #16]
   b99c0:	2b00      	cmp	r3, #0
   b99c2:	d1a4      	bne.n	b990e <_strtod_l+0x82e>
   b99c4:	e5de      	b.n	b9584 <_strtod_l+0x4a4>
   b99c6:	f04f 33ff 	mov.w	r3, #4294967295
   b99ca:	e7ea      	b.n	b99a2 <_strtod_l+0x8c2>
   b99cc:	4613      	mov	r3, r2
   b99ce:	e7e8      	b.n	b99a2 <_strtod_l+0x8c2>
   b99d0:	ea53 030a 	orrs.w	r3, r3, sl
   b99d4:	d08c      	beq.n	b98f0 <_strtod_l+0x810>
   b99d6:	9b08      	ldr	r3, [sp, #32]
   b99d8:	b1db      	cbz	r3, b9a12 <_strtod_l+0x932>
   b99da:	423b      	tst	r3, r7
   b99dc:	d0ef      	beq.n	b99be <_strtod_l+0x8de>
   b99de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b99e0:	9a04      	ldr	r2, [sp, #16]
   b99e2:	4650      	mov	r0, sl
   b99e4:	4659      	mov	r1, fp
   b99e6:	b1c3      	cbz	r3, b9a1a <_strtod_l+0x93a>
   b99e8:	f7ff fb5e 	bl	b90a8 <sulp>
   b99ec:	4602      	mov	r2, r0
   b99ee:	460b      	mov	r3, r1
   b99f0:	ec51 0b18 	vmov	r0, r1, d8
   b99f4:	f7fe fdf6 	bl	b85e4 <__adddf3>
   b99f8:	4682      	mov	sl, r0
   b99fa:	468b      	mov	fp, r1
   b99fc:	e7df      	b.n	b99be <_strtod_l+0x8de>
   b99fe:	4013      	ands	r3, r2
   b9a00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9a04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9a08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9a0c:	f04f 3aff 	mov.w	sl, #4294967295
   b9a10:	e7d5      	b.n	b99be <_strtod_l+0x8de>
   b9a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9a14:	ea13 0f0a 	tst.w	r3, sl
   b9a18:	e7e0      	b.n	b99dc <_strtod_l+0x8fc>
   b9a1a:	f7ff fb45 	bl	b90a8 <sulp>
   b9a1e:	4602      	mov	r2, r0
   b9a20:	460b      	mov	r3, r1
   b9a22:	ec51 0b18 	vmov	r0, r1, d8
   b9a26:	f7fe fddb 	bl	b85e0 <__aeabi_dsub>
   b9a2a:	2200      	movs	r2, #0
   b9a2c:	2300      	movs	r3, #0
   b9a2e:	4682      	mov	sl, r0
   b9a30:	468b      	mov	fp, r1
   b9a32:	f7ff f9f5 	bl	b8e20 <__aeabi_dcmpeq>
   b9a36:	2800      	cmp	r0, #0
   b9a38:	d0c1      	beq.n	b99be <_strtod_l+0x8de>
   b9a3a:	e611      	b.n	b9660 <_strtod_l+0x580>
   b9a3c:	fffffc02 	.word	0xfffffc02
   b9a40:	7ff00000 	.word	0x7ff00000
   b9a44:	39500000 	.word	0x39500000
   b9a48:	000fffff 	.word	0x000fffff
   b9a4c:	7fefffff 	.word	0x7fefffff
   b9a50:	000bb788 	.word	0x000bb788
   b9a54:	4631      	mov	r1, r6
   b9a56:	4628      	mov	r0, r5
   b9a58:	f001 fa6e 	bl	baf38 <__ratio>
   b9a5c:	ec59 8b10 	vmov	r8, r9, d0
   b9a60:	ee10 0a10 	vmov	r0, s0
   b9a64:	2200      	movs	r2, #0
   b9a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9a6a:	4649      	mov	r1, r9
   b9a6c:	f7ff f9ec 	bl	b8e48 <__aeabi_dcmple>
   b9a70:	2800      	cmp	r0, #0
   b9a72:	d07a      	beq.n	b9b6a <_strtod_l+0xa8a>
   b9a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9a76:	2b00      	cmp	r3, #0
   b9a78:	d04a      	beq.n	b9b10 <_strtod_l+0xa30>
   b9a7a:	4b95      	ldr	r3, [pc, #596]	; (b9cd0 <_strtod_l+0xbf0>)
   b9a7c:	2200      	movs	r2, #0
   b9a7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9a82:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9cd0 <_strtod_l+0xbf0>
   b9a86:	f04f 0800 	mov.w	r8, #0
   b9a8a:	4b92      	ldr	r3, [pc, #584]	; (b9cd4 <_strtod_l+0xbf4>)
   b9a8c:	403b      	ands	r3, r7
   b9a8e:	930d      	str	r3, [sp, #52]	; 0x34
   b9a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9a92:	4b91      	ldr	r3, [pc, #580]	; (b9cd8 <_strtod_l+0xbf8>)
   b9a94:	429a      	cmp	r2, r3
   b9a96:	f040 80b0 	bne.w	b9bfa <_strtod_l+0xb1a>
   b9a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9a9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9aa2:	ec4b ab10 	vmov	d0, sl, fp
   b9aa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9aaa:	f001 f96d 	bl	bad88 <__ulp>
   b9aae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9ab2:	ec53 2b10 	vmov	r2, r3, d0
   b9ab6:	f7fe ff4b 	bl	b8950 <__aeabi_dmul>
   b9aba:	4652      	mov	r2, sl
   b9abc:	465b      	mov	r3, fp
   b9abe:	f7fe fd91 	bl	b85e4 <__adddf3>
   b9ac2:	460b      	mov	r3, r1
   b9ac4:	4983      	ldr	r1, [pc, #524]	; (b9cd4 <_strtod_l+0xbf4>)
   b9ac6:	4a85      	ldr	r2, [pc, #532]	; (b9cdc <_strtod_l+0xbfc>)
   b9ac8:	4019      	ands	r1, r3
   b9aca:	4291      	cmp	r1, r2
   b9acc:	4682      	mov	sl, r0
   b9ace:	d960      	bls.n	b9b92 <_strtod_l+0xab2>
   b9ad0:	ee18 3a90 	vmov	r3, s17
   b9ad4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9ad8:	4293      	cmp	r3, r2
   b9ada:	d104      	bne.n	b9ae6 <_strtod_l+0xa06>
   b9adc:	ee18 3a10 	vmov	r3, s16
   b9ae0:	3301      	adds	r3, #1
   b9ae2:	f43f ad45 	beq.w	b9570 <_strtod_l+0x490>
   b9ae6:	f8df b200 	ldr.w	fp, [pc, #512]	; b9ce8 <_strtod_l+0xc08>
   b9aea:	f04f 3aff 	mov.w	sl, #4294967295
   b9aee:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9af0:	4620      	mov	r0, r4
   b9af2:	f000 fe17 	bl	ba724 <_Bfree>
   b9af6:	9905      	ldr	r1, [sp, #20]
   b9af8:	4620      	mov	r0, r4
   b9afa:	f000 fe13 	bl	ba724 <_Bfree>
   b9afe:	4631      	mov	r1, r6
   b9b00:	4620      	mov	r0, r4
   b9b02:	f000 fe0f 	bl	ba724 <_Bfree>
   b9b06:	4629      	mov	r1, r5
   b9b08:	4620      	mov	r0, r4
   b9b0a:	f000 fe0b 	bl	ba724 <_Bfree>
   b9b0e:	e61a      	b.n	b9746 <_strtod_l+0x666>
   b9b10:	f1ba 0f00 	cmp.w	sl, #0
   b9b14:	d11b      	bne.n	b9b4e <_strtod_l+0xa6e>
   b9b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9b1a:	b9f3      	cbnz	r3, b9b5a <_strtod_l+0xa7a>
   b9b1c:	4b6c      	ldr	r3, [pc, #432]	; (b9cd0 <_strtod_l+0xbf0>)
   b9b1e:	2200      	movs	r2, #0
   b9b20:	4640      	mov	r0, r8
   b9b22:	4649      	mov	r1, r9
   b9b24:	f7ff f986 	bl	b8e34 <__aeabi_dcmplt>
   b9b28:	b9d0      	cbnz	r0, b9b60 <_strtod_l+0xa80>
   b9b2a:	4640      	mov	r0, r8
   b9b2c:	4649      	mov	r1, r9
   b9b2e:	4b6c      	ldr	r3, [pc, #432]	; (b9ce0 <_strtod_l+0xc00>)
   b9b30:	2200      	movs	r2, #0
   b9b32:	f7fe ff0d 	bl	b8950 <__aeabi_dmul>
   b9b36:	4680      	mov	r8, r0
   b9b38:	4689      	mov	r9, r1
   b9b3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b9b3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b9b42:	9315      	str	r3, [sp, #84]	; 0x54
   b9b44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9b4c:	e79d      	b.n	b9a8a <_strtod_l+0x9aa>
   b9b4e:	f1ba 0f01 	cmp.w	sl, #1
   b9b52:	d102      	bne.n	b9b5a <_strtod_l+0xa7a>
   b9b54:	2f00      	cmp	r7, #0
   b9b56:	f43f ad83 	beq.w	b9660 <_strtod_l+0x580>
   b9b5a:	4b62      	ldr	r3, [pc, #392]	; (b9ce4 <_strtod_l+0xc04>)
   b9b5c:	2200      	movs	r2, #0
   b9b5e:	e78e      	b.n	b9a7e <_strtod_l+0x99e>
   b9b60:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9ce0 <_strtod_l+0xc00>
   b9b64:	f04f 0800 	mov.w	r8, #0
   b9b68:	e7e7      	b.n	b9b3a <_strtod_l+0xa5a>
   b9b6a:	4b5d      	ldr	r3, [pc, #372]	; (b9ce0 <_strtod_l+0xc00>)
   b9b6c:	4640      	mov	r0, r8
   b9b6e:	4649      	mov	r1, r9
   b9b70:	2200      	movs	r2, #0
   b9b72:	f7fe feed 	bl	b8950 <__aeabi_dmul>
   b9b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9b78:	4680      	mov	r8, r0
   b9b7a:	4689      	mov	r9, r1
   b9b7c:	b933      	cbnz	r3, b9b8c <_strtod_l+0xaac>
   b9b7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9b82:	900e      	str	r0, [sp, #56]	; 0x38
   b9b84:	930f      	str	r3, [sp, #60]	; 0x3c
   b9b86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9b8a:	e7dd      	b.n	b9b48 <_strtod_l+0xa68>
   b9b8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9b90:	e7f9      	b.n	b9b86 <_strtod_l+0xaa6>
   b9b92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9b96:	9b04      	ldr	r3, [sp, #16]
   b9b98:	2b00      	cmp	r3, #0
   b9b9a:	d1a8      	bne.n	b9aee <_strtod_l+0xa0e>
   b9b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9ba2:	0d1b      	lsrs	r3, r3, #20
   b9ba4:	051b      	lsls	r3, r3, #20
   b9ba6:	429a      	cmp	r2, r3
   b9ba8:	d1a1      	bne.n	b9aee <_strtod_l+0xa0e>
   b9baa:	4640      	mov	r0, r8
   b9bac:	4649      	mov	r1, r9
   b9bae:	f001 fa61 	bl	bb074 <__aeabi_d2lz>
   b9bb2:	f7fe fe9f 	bl	b88f4 <__aeabi_l2d>
   b9bb6:	4602      	mov	r2, r0
   b9bb8:	460b      	mov	r3, r1
   b9bba:	4640      	mov	r0, r8
   b9bbc:	4649      	mov	r1, r9
   b9bbe:	f7fe fd0f 	bl	b85e0 <__aeabi_dsub>
   b9bc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9bc8:	ea43 030a 	orr.w	r3, r3, sl
   b9bcc:	4313      	orrs	r3, r2
   b9bce:	4680      	mov	r8, r0
   b9bd0:	4689      	mov	r9, r1
   b9bd2:	d055      	beq.n	b9c80 <_strtod_l+0xba0>
   b9bd4:	a336      	add	r3, pc, #216	; (adr r3, b9cb0 <_strtod_l+0xbd0>)
   b9bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9bda:	f7ff f92b 	bl	b8e34 <__aeabi_dcmplt>
   b9bde:	2800      	cmp	r0, #0
   b9be0:	f47f acd0 	bne.w	b9584 <_strtod_l+0x4a4>
   b9be4:	a334      	add	r3, pc, #208	; (adr r3, b9cb8 <_strtod_l+0xbd8>)
   b9be6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9bea:	4640      	mov	r0, r8
   b9bec:	4649      	mov	r1, r9
   b9bee:	f7ff f93f 	bl	b8e70 <__aeabi_dcmpgt>
   b9bf2:	2800      	cmp	r0, #0
   b9bf4:	f43f af7b 	beq.w	b9aee <_strtod_l+0xa0e>
   b9bf8:	e4c4      	b.n	b9584 <_strtod_l+0x4a4>
   b9bfa:	9b04      	ldr	r3, [sp, #16]
   b9bfc:	b333      	cbz	r3, b9c4c <_strtod_l+0xb6c>
   b9bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9c00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9c04:	d822      	bhi.n	b9c4c <_strtod_l+0xb6c>
   b9c06:	a32e      	add	r3, pc, #184	; (adr r3, b9cc0 <_strtod_l+0xbe0>)
   b9c08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c0c:	4640      	mov	r0, r8
   b9c0e:	4649      	mov	r1, r9
   b9c10:	f7ff f91a 	bl	b8e48 <__aeabi_dcmple>
   b9c14:	b1a0      	cbz	r0, b9c40 <_strtod_l+0xb60>
   b9c16:	4649      	mov	r1, r9
   b9c18:	4640      	mov	r0, r8
   b9c1a:	f7ff f933 	bl	b8e84 <__aeabi_d2uiz>
   b9c1e:	2801      	cmp	r0, #1
   b9c20:	bf38      	it	cc
   b9c22:	2001      	movcc	r0, #1
   b9c24:	f7fe fe1a 	bl	b885c <__aeabi_ui2d>
   b9c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9c2a:	4680      	mov	r8, r0
   b9c2c:	4689      	mov	r9, r1
   b9c2e:	bb23      	cbnz	r3, b9c7a <_strtod_l+0xb9a>
   b9c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9c34:	9010      	str	r0, [sp, #64]	; 0x40
   b9c36:	9311      	str	r3, [sp, #68]	; 0x44
   b9c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b9c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9c42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9c44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9c48:	1a9b      	subs	r3, r3, r2
   b9c4a:	9309      	str	r3, [sp, #36]	; 0x24
   b9c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9c50:	eeb0 0a48 	vmov.f32	s0, s16
   b9c54:	eef0 0a68 	vmov.f32	s1, s17
   b9c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9c5c:	f001 f894 	bl	bad88 <__ulp>
   b9c60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9c64:	ec53 2b10 	vmov	r2, r3, d0
   b9c68:	f7fe fe72 	bl	b8950 <__aeabi_dmul>
   b9c6c:	ec53 2b18 	vmov	r2, r3, d8
   b9c70:	f7fe fcb8 	bl	b85e4 <__adddf3>
   b9c74:	4682      	mov	sl, r0
   b9c76:	468b      	mov	fp, r1
   b9c78:	e78d      	b.n	b9b96 <_strtod_l+0xab6>
   b9c7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9c7e:	e7db      	b.n	b9c38 <_strtod_l+0xb58>
   b9c80:	a311      	add	r3, pc, #68	; (adr r3, b9cc8 <_strtod_l+0xbe8>)
   b9c82:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c86:	f7ff f8d5 	bl	b8e34 <__aeabi_dcmplt>
   b9c8a:	e7b2      	b.n	b9bf2 <_strtod_l+0xb12>
   b9c8c:	2300      	movs	r3, #0
   b9c8e:	930a      	str	r3, [sp, #40]	; 0x28
   b9c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9c94:	6013      	str	r3, [r2, #0]
   b9c96:	f7ff ba6b 	b.w	b9170 <_strtod_l+0x90>
   b9c9a:	2a65      	cmp	r2, #101	; 0x65
   b9c9c:	f43f ab5f 	beq.w	b935e <_strtod_l+0x27e>
   b9ca0:	2a45      	cmp	r2, #69	; 0x45
   b9ca2:	f43f ab5c 	beq.w	b935e <_strtod_l+0x27e>
   b9ca6:	2301      	movs	r3, #1
   b9ca8:	f7ff bb94 	b.w	b93d4 <_strtod_l+0x2f4>
   b9cac:	f3af 8000 	nop.w
   b9cb0:	94a03595 	.word	0x94a03595
   b9cb4:	3fdfffff 	.word	0x3fdfffff
   b9cb8:	35afe535 	.word	0x35afe535
   b9cbc:	3fe00000 	.word	0x3fe00000
   b9cc0:	ffc00000 	.word	0xffc00000
   b9cc4:	41dfffff 	.word	0x41dfffff
   b9cc8:	94a03595 	.word	0x94a03595
   b9ccc:	3fcfffff 	.word	0x3fcfffff
   b9cd0:	3ff00000 	.word	0x3ff00000
   b9cd4:	7ff00000 	.word	0x7ff00000
   b9cd8:	7fe00000 	.word	0x7fe00000
   b9cdc:	7c9fffff 	.word	0x7c9fffff
   b9ce0:	3fe00000 	.word	0x3fe00000
   b9ce4:	bff00000 	.word	0xbff00000
   b9ce8:	7fefffff 	.word	0x7fefffff

000b9cec <strtod>:
   b9cec:	460a      	mov	r2, r1
   b9cee:	4601      	mov	r1, r0
   b9cf0:	4802      	ldr	r0, [pc, #8]	; (b9cfc <strtod+0x10>)
   b9cf2:	4b03      	ldr	r3, [pc, #12]	; (b9d00 <strtod+0x14>)
   b9cf4:	6800      	ldr	r0, [r0, #0]
   b9cf6:	f7ff b9f3 	b.w	b90e0 <_strtod_l>
   b9cfa:	bf00      	nop
   b9cfc:	2003d224 	.word	0x2003d224
   b9d00:	2003d290 	.word	0x2003d290

000b9d04 <strtok>:
   b9d04:	4b16      	ldr	r3, [pc, #88]	; (b9d60 <strtok+0x5c>)
   b9d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9d08:	681e      	ldr	r6, [r3, #0]
   b9d0a:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b9d0c:	4605      	mov	r5, r0
   b9d0e:	b9fc      	cbnz	r4, b9d50 <strtok+0x4c>
   b9d10:	2050      	movs	r0, #80	; 0x50
   b9d12:	9101      	str	r1, [sp, #4]
   b9d14:	f7fc fa5e 	bl	b61d4 <malloc>
   b9d18:	9901      	ldr	r1, [sp, #4]
   b9d1a:	65b0      	str	r0, [r6, #88]	; 0x58
   b9d1c:	4602      	mov	r2, r0
   b9d1e:	b920      	cbnz	r0, b9d2a <strtok+0x26>
   b9d20:	4b10      	ldr	r3, [pc, #64]	; (b9d64 <strtok+0x60>)
   b9d22:	4811      	ldr	r0, [pc, #68]	; (b9d68 <strtok+0x64>)
   b9d24:	2157      	movs	r1, #87	; 0x57
   b9d26:	f7fc fa9d 	bl	b6264 <__assert_func>
   b9d2a:	e9c0 4400 	strd	r4, r4, [r0]
   b9d2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b9d32:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b9d36:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b9d3a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b9d3e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b9d42:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b9d46:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b9d4a:	6184      	str	r4, [r0, #24]
   b9d4c:	7704      	strb	r4, [r0, #28]
   b9d4e:	6244      	str	r4, [r0, #36]	; 0x24
   b9d50:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b9d52:	2301      	movs	r3, #1
   b9d54:	4628      	mov	r0, r5
   b9d56:	b002      	add	sp, #8
   b9d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9d5c:	f000 b806 	b.w	b9d6c <__strtok_r>
   b9d60:	2003d224 	.word	0x2003d224
   b9d64:	000bb6bd 	.word	0x000bb6bd
   b9d68:	000bb7b0 	.word	0x000bb7b0

000b9d6c <__strtok_r>:
   b9d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9d6e:	b908      	cbnz	r0, b9d74 <__strtok_r+0x8>
   b9d70:	6810      	ldr	r0, [r2, #0]
   b9d72:	b188      	cbz	r0, b9d98 <__strtok_r+0x2c>
   b9d74:	4604      	mov	r4, r0
   b9d76:	4620      	mov	r0, r4
   b9d78:	f814 5b01 	ldrb.w	r5, [r4], #1
   b9d7c:	460f      	mov	r7, r1
   b9d7e:	f817 6b01 	ldrb.w	r6, [r7], #1
   b9d82:	b91e      	cbnz	r6, b9d8c <__strtok_r+0x20>
   b9d84:	b965      	cbnz	r5, b9da0 <__strtok_r+0x34>
   b9d86:	6015      	str	r5, [r2, #0]
   b9d88:	4628      	mov	r0, r5
   b9d8a:	e005      	b.n	b9d98 <__strtok_r+0x2c>
   b9d8c:	42b5      	cmp	r5, r6
   b9d8e:	d1f6      	bne.n	b9d7e <__strtok_r+0x12>
   b9d90:	2b00      	cmp	r3, #0
   b9d92:	d1f0      	bne.n	b9d76 <__strtok_r+0xa>
   b9d94:	6014      	str	r4, [r2, #0]
   b9d96:	7003      	strb	r3, [r0, #0]
   b9d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9d9a:	461c      	mov	r4, r3
   b9d9c:	e00c      	b.n	b9db8 <__strtok_r+0x4c>
   b9d9e:	b915      	cbnz	r5, b9da6 <__strtok_r+0x3a>
   b9da0:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9da4:	460e      	mov	r6, r1
   b9da6:	f816 5b01 	ldrb.w	r5, [r6], #1
   b9daa:	42ab      	cmp	r3, r5
   b9dac:	d1f7      	bne.n	b9d9e <__strtok_r+0x32>
   b9dae:	2b00      	cmp	r3, #0
   b9db0:	d0f3      	beq.n	b9d9a <__strtok_r+0x2e>
   b9db2:	2300      	movs	r3, #0
   b9db4:	f804 3c01 	strb.w	r3, [r4, #-1]
   b9db8:	6014      	str	r4, [r2, #0]
   b9dba:	e7ed      	b.n	b9d98 <__strtok_r+0x2c>

000b9dbc <_strtol_l.constprop.0>:
   b9dbc:	2b01      	cmp	r3, #1
   b9dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9dc2:	d001      	beq.n	b9dc8 <_strtol_l.constprop.0+0xc>
   b9dc4:	2b24      	cmp	r3, #36	; 0x24
   b9dc6:	d906      	bls.n	b9dd6 <_strtol_l.constprop.0+0x1a>
   b9dc8:	f7fc fa44 	bl	b6254 <__errno>
   b9dcc:	2316      	movs	r3, #22
   b9dce:	6003      	str	r3, [r0, #0]
   b9dd0:	2000      	movs	r0, #0
   b9dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9dd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9ebc <_strtol_l.constprop.0+0x100>
   b9dda:	460d      	mov	r5, r1
   b9ddc:	462e      	mov	r6, r5
   b9dde:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9de2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9de6:	f017 0708 	ands.w	r7, r7, #8
   b9dea:	d1f7      	bne.n	b9ddc <_strtol_l.constprop.0+0x20>
   b9dec:	2c2d      	cmp	r4, #45	; 0x2d
   b9dee:	d132      	bne.n	b9e56 <_strtol_l.constprop.0+0x9a>
   b9df0:	782c      	ldrb	r4, [r5, #0]
   b9df2:	2701      	movs	r7, #1
   b9df4:	1cb5      	adds	r5, r6, #2
   b9df6:	2b00      	cmp	r3, #0
   b9df8:	d05b      	beq.n	b9eb2 <_strtol_l.constprop.0+0xf6>
   b9dfa:	2b10      	cmp	r3, #16
   b9dfc:	d109      	bne.n	b9e12 <_strtol_l.constprop.0+0x56>
   b9dfe:	2c30      	cmp	r4, #48	; 0x30
   b9e00:	d107      	bne.n	b9e12 <_strtol_l.constprop.0+0x56>
   b9e02:	782c      	ldrb	r4, [r5, #0]
   b9e04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9e08:	2c58      	cmp	r4, #88	; 0x58
   b9e0a:	d14d      	bne.n	b9ea8 <_strtol_l.constprop.0+0xec>
   b9e0c:	786c      	ldrb	r4, [r5, #1]
   b9e0e:	2310      	movs	r3, #16
   b9e10:	3502      	adds	r5, #2
   b9e12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9e16:	f108 38ff 	add.w	r8, r8, #4294967295
   b9e1a:	f04f 0c00 	mov.w	ip, #0
   b9e1e:	fbb8 f9f3 	udiv	r9, r8, r3
   b9e22:	4666      	mov	r6, ip
   b9e24:	fb03 8a19 	mls	sl, r3, r9, r8
   b9e28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9e2c:	f1be 0f09 	cmp.w	lr, #9
   b9e30:	d816      	bhi.n	b9e60 <_strtol_l.constprop.0+0xa4>
   b9e32:	4674      	mov	r4, lr
   b9e34:	42a3      	cmp	r3, r4
   b9e36:	dd24      	ble.n	b9e82 <_strtol_l.constprop.0+0xc6>
   b9e38:	f1bc 0f00 	cmp.w	ip, #0
   b9e3c:	db1e      	blt.n	b9e7c <_strtol_l.constprop.0+0xc0>
   b9e3e:	45b1      	cmp	r9, r6
   b9e40:	d31c      	bcc.n	b9e7c <_strtol_l.constprop.0+0xc0>
   b9e42:	d101      	bne.n	b9e48 <_strtol_l.constprop.0+0x8c>
   b9e44:	45a2      	cmp	sl, r4
   b9e46:	db19      	blt.n	b9e7c <_strtol_l.constprop.0+0xc0>
   b9e48:	fb06 4603 	mla	r6, r6, r3, r4
   b9e4c:	f04f 0c01 	mov.w	ip, #1
   b9e50:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9e54:	e7e8      	b.n	b9e28 <_strtol_l.constprop.0+0x6c>
   b9e56:	2c2b      	cmp	r4, #43	; 0x2b
   b9e58:	bf04      	itt	eq
   b9e5a:	782c      	ldrbeq	r4, [r5, #0]
   b9e5c:	1cb5      	addeq	r5, r6, #2
   b9e5e:	e7ca      	b.n	b9df6 <_strtol_l.constprop.0+0x3a>
   b9e60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9e64:	f1be 0f19 	cmp.w	lr, #25
   b9e68:	d801      	bhi.n	b9e6e <_strtol_l.constprop.0+0xb2>
   b9e6a:	3c37      	subs	r4, #55	; 0x37
   b9e6c:	e7e2      	b.n	b9e34 <_strtol_l.constprop.0+0x78>
   b9e6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9e72:	f1be 0f19 	cmp.w	lr, #25
   b9e76:	d804      	bhi.n	b9e82 <_strtol_l.constprop.0+0xc6>
   b9e78:	3c57      	subs	r4, #87	; 0x57
   b9e7a:	e7db      	b.n	b9e34 <_strtol_l.constprop.0+0x78>
   b9e7c:	f04f 3cff 	mov.w	ip, #4294967295
   b9e80:	e7e6      	b.n	b9e50 <_strtol_l.constprop.0+0x94>
   b9e82:	f1bc 0f00 	cmp.w	ip, #0
   b9e86:	da05      	bge.n	b9e94 <_strtol_l.constprop.0+0xd8>
   b9e88:	2322      	movs	r3, #34	; 0x22
   b9e8a:	6003      	str	r3, [r0, #0]
   b9e8c:	4646      	mov	r6, r8
   b9e8e:	b942      	cbnz	r2, b9ea2 <_strtol_l.constprop.0+0xe6>
   b9e90:	4630      	mov	r0, r6
   b9e92:	e79e      	b.n	b9dd2 <_strtol_l.constprop.0+0x16>
   b9e94:	b107      	cbz	r7, b9e98 <_strtol_l.constprop.0+0xdc>
   b9e96:	4276      	negs	r6, r6
   b9e98:	2a00      	cmp	r2, #0
   b9e9a:	d0f9      	beq.n	b9e90 <_strtol_l.constprop.0+0xd4>
   b9e9c:	f1bc 0f00 	cmp.w	ip, #0
   b9ea0:	d000      	beq.n	b9ea4 <_strtol_l.constprop.0+0xe8>
   b9ea2:	1e69      	subs	r1, r5, #1
   b9ea4:	6011      	str	r1, [r2, #0]
   b9ea6:	e7f3      	b.n	b9e90 <_strtol_l.constprop.0+0xd4>
   b9ea8:	2430      	movs	r4, #48	; 0x30
   b9eaa:	2b00      	cmp	r3, #0
   b9eac:	d1b1      	bne.n	b9e12 <_strtol_l.constprop.0+0x56>
   b9eae:	2308      	movs	r3, #8
   b9eb0:	e7af      	b.n	b9e12 <_strtol_l.constprop.0+0x56>
   b9eb2:	2c30      	cmp	r4, #48	; 0x30
   b9eb4:	d0a5      	beq.n	b9e02 <_strtol_l.constprop.0+0x46>
   b9eb6:	230a      	movs	r3, #10
   b9eb8:	e7ab      	b.n	b9e12 <_strtol_l.constprop.0+0x56>
   b9eba:	bf00      	nop
   b9ebc:	000bb830 	.word	0x000bb830

000b9ec0 <strtol>:
   b9ec0:	4613      	mov	r3, r2
   b9ec2:	460a      	mov	r2, r1
   b9ec4:	4601      	mov	r1, r0
   b9ec6:	4802      	ldr	r0, [pc, #8]	; (b9ed0 <strtol+0x10>)
   b9ec8:	6800      	ldr	r0, [r0, #0]
   b9eca:	f7ff bf77 	b.w	b9dbc <_strtol_l.constprop.0>
   b9ece:	bf00      	nop
   b9ed0:	2003d224 	.word	0x2003d224

000b9ed4 <__register_exitproc>:
   b9ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9ed8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9f94 <__register_exitproc+0xc0>
   b9edc:	4606      	mov	r6, r0
   b9ede:	f8d8 0000 	ldr.w	r0, [r8]
   b9ee2:	461f      	mov	r7, r3
   b9ee4:	460d      	mov	r5, r1
   b9ee6:	4691      	mov	r9, r2
   b9ee8:	f000 fbc6 	bl	ba678 <__retarget_lock_acquire_recursive>
   b9eec:	4b25      	ldr	r3, [pc, #148]	; (b9f84 <__register_exitproc+0xb0>)
   b9eee:	681c      	ldr	r4, [r3, #0]
   b9ef0:	b934      	cbnz	r4, b9f00 <__register_exitproc+0x2c>
   b9ef2:	4c25      	ldr	r4, [pc, #148]	; (b9f88 <__register_exitproc+0xb4>)
   b9ef4:	601c      	str	r4, [r3, #0]
   b9ef6:	4b25      	ldr	r3, [pc, #148]	; (b9f8c <__register_exitproc+0xb8>)
   b9ef8:	b113      	cbz	r3, b9f00 <__register_exitproc+0x2c>
   b9efa:	681b      	ldr	r3, [r3, #0]
   b9efc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9f00:	6863      	ldr	r3, [r4, #4]
   b9f02:	2b1f      	cmp	r3, #31
   b9f04:	dd07      	ble.n	b9f16 <__register_exitproc+0x42>
   b9f06:	f8d8 0000 	ldr.w	r0, [r8]
   b9f0a:	f000 fbb7 	bl	ba67c <__retarget_lock_release_recursive>
   b9f0e:	f04f 30ff 	mov.w	r0, #4294967295
   b9f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9f16:	b34e      	cbz	r6, b9f6c <__register_exitproc+0x98>
   b9f18:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9f1c:	b988      	cbnz	r0, b9f42 <__register_exitproc+0x6e>
   b9f1e:	4b1c      	ldr	r3, [pc, #112]	; (b9f90 <__register_exitproc+0xbc>)
   b9f20:	b923      	cbnz	r3, b9f2c <__register_exitproc+0x58>
   b9f22:	f8d8 0000 	ldr.w	r0, [r8]
   b9f26:	f000 fba8 	bl	ba67a <__retarget_lock_release>
   b9f2a:	e7f0      	b.n	b9f0e <__register_exitproc+0x3a>
   b9f2c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9f30:	f7fc f950 	bl	b61d4 <malloc>
   b9f34:	2800      	cmp	r0, #0
   b9f36:	d0f4      	beq.n	b9f22 <__register_exitproc+0x4e>
   b9f38:	2300      	movs	r3, #0
   b9f3a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9f3e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9f42:	6863      	ldr	r3, [r4, #4]
   b9f44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9f48:	2201      	movs	r2, #1
   b9f4a:	409a      	lsls	r2, r3
   b9f4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9f50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9f54:	4313      	orrs	r3, r2
   b9f56:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9f5a:	2e02      	cmp	r6, #2
   b9f5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9f60:	bf02      	ittt	eq
   b9f62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9f66:	4313      	orreq	r3, r2
   b9f68:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9f6c:	6863      	ldr	r3, [r4, #4]
   b9f6e:	f8d8 0000 	ldr.w	r0, [r8]
   b9f72:	1c5a      	adds	r2, r3, #1
   b9f74:	3302      	adds	r3, #2
   b9f76:	6062      	str	r2, [r4, #4]
   b9f78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9f7c:	f000 fb7e 	bl	ba67c <__retarget_lock_release_recursive>
   b9f80:	2000      	movs	r0, #0
   b9f82:	e7c6      	b.n	b9f12 <__register_exitproc+0x3e>
   b9f84:	2003e7ec 	.word	0x2003e7ec
   b9f88:	2003e760 	.word	0x2003e760
   b9f8c:	00000000 	.word	0x00000000
   b9f90:	000b61d5 	.word	0x000b61d5
   b9f94:	2003d288 	.word	0x2003d288

000b9f98 <rshift>:
   b9f98:	6903      	ldr	r3, [r0, #16]
   b9f9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9f9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9fa2:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9fa6:	f100 0414 	add.w	r4, r0, #20
   b9faa:	dd45      	ble.n	ba038 <rshift+0xa0>
   b9fac:	f011 011f 	ands.w	r1, r1, #31
   b9fb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9fb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9fb8:	d10c      	bne.n	b9fd4 <rshift+0x3c>
   b9fba:	f100 0710 	add.w	r7, r0, #16
   b9fbe:	4629      	mov	r1, r5
   b9fc0:	42b1      	cmp	r1, r6
   b9fc2:	d334      	bcc.n	ba02e <rshift+0x96>
   b9fc4:	1a9b      	subs	r3, r3, r2
   b9fc6:	009b      	lsls	r3, r3, #2
   b9fc8:	1eea      	subs	r2, r5, #3
   b9fca:	4296      	cmp	r6, r2
   b9fcc:	bf38      	it	cc
   b9fce:	2300      	movcc	r3, #0
   b9fd0:	4423      	add	r3, r4
   b9fd2:	e015      	b.n	ba000 <rshift+0x68>
   b9fd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9fd8:	f1c1 0820 	rsb	r8, r1, #32
   b9fdc:	40cf      	lsrs	r7, r1
   b9fde:	f105 0e04 	add.w	lr, r5, #4
   b9fe2:	46a1      	mov	r9, r4
   b9fe4:	4576      	cmp	r6, lr
   b9fe6:	46f4      	mov	ip, lr
   b9fe8:	d815      	bhi.n	ba016 <rshift+0x7e>
   b9fea:	1a9a      	subs	r2, r3, r2
   b9fec:	0092      	lsls	r2, r2, #2
   b9fee:	3a04      	subs	r2, #4
   b9ff0:	3501      	adds	r5, #1
   b9ff2:	42ae      	cmp	r6, r5
   b9ff4:	bf38      	it	cc
   b9ff6:	2200      	movcc	r2, #0
   b9ff8:	18a3      	adds	r3, r4, r2
   b9ffa:	50a7      	str	r7, [r4, r2]
   b9ffc:	b107      	cbz	r7, ba000 <rshift+0x68>
   b9ffe:	3304      	adds	r3, #4
   ba000:	1b1a      	subs	r2, r3, r4
   ba002:	42a3      	cmp	r3, r4
   ba004:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba008:	bf08      	it	eq
   ba00a:	2300      	moveq	r3, #0
   ba00c:	6102      	str	r2, [r0, #16]
   ba00e:	bf08      	it	eq
   ba010:	6143      	streq	r3, [r0, #20]
   ba012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba016:	f8dc c000 	ldr.w	ip, [ip]
   ba01a:	fa0c fc08 	lsl.w	ip, ip, r8
   ba01e:	ea4c 0707 	orr.w	r7, ip, r7
   ba022:	f849 7b04 	str.w	r7, [r9], #4
   ba026:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba02a:	40cf      	lsrs	r7, r1
   ba02c:	e7da      	b.n	b9fe4 <rshift+0x4c>
   ba02e:	f851 cb04 	ldr.w	ip, [r1], #4
   ba032:	f847 cf04 	str.w	ip, [r7, #4]!
   ba036:	e7c3      	b.n	b9fc0 <rshift+0x28>
   ba038:	4623      	mov	r3, r4
   ba03a:	e7e1      	b.n	ba000 <rshift+0x68>

000ba03c <__hexdig_fun>:
   ba03c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba040:	2b09      	cmp	r3, #9
   ba042:	d802      	bhi.n	ba04a <__hexdig_fun+0xe>
   ba044:	3820      	subs	r0, #32
   ba046:	b2c0      	uxtb	r0, r0
   ba048:	4770      	bx	lr
   ba04a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba04e:	2b05      	cmp	r3, #5
   ba050:	d801      	bhi.n	ba056 <__hexdig_fun+0x1a>
   ba052:	3847      	subs	r0, #71	; 0x47
   ba054:	e7f7      	b.n	ba046 <__hexdig_fun+0xa>
   ba056:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba05a:	2b05      	cmp	r3, #5
   ba05c:	d801      	bhi.n	ba062 <__hexdig_fun+0x26>
   ba05e:	3827      	subs	r0, #39	; 0x27
   ba060:	e7f1      	b.n	ba046 <__hexdig_fun+0xa>
   ba062:	2000      	movs	r0, #0
   ba064:	4770      	bx	lr
	...

000ba068 <__gethex>:
   ba068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba06c:	ed2d 8b02 	vpush	{d8}
   ba070:	b089      	sub	sp, #36	; 0x24
   ba072:	ee08 0a10 	vmov	s16, r0
   ba076:	9304      	str	r3, [sp, #16]
   ba078:	4bb4      	ldr	r3, [pc, #720]	; (ba34c <__gethex+0x2e4>)
   ba07a:	681b      	ldr	r3, [r3, #0]
   ba07c:	9301      	str	r3, [sp, #4]
   ba07e:	4618      	mov	r0, r3
   ba080:	468b      	mov	fp, r1
   ba082:	4690      	mov	r8, r2
   ba084:	f7fe ffe1 	bl	b904a <strlen>
   ba088:	9b01      	ldr	r3, [sp, #4]
   ba08a:	f8db 2000 	ldr.w	r2, [fp]
   ba08e:	4403      	add	r3, r0
   ba090:	4682      	mov	sl, r0
   ba092:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba096:	9305      	str	r3, [sp, #20]
   ba098:	1c93      	adds	r3, r2, #2
   ba09a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba09e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba0a2:	32fe      	adds	r2, #254	; 0xfe
   ba0a4:	18d1      	adds	r1, r2, r3
   ba0a6:	461f      	mov	r7, r3
   ba0a8:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba0ac:	9100      	str	r1, [sp, #0]
   ba0ae:	2830      	cmp	r0, #48	; 0x30
   ba0b0:	d0f8      	beq.n	ba0a4 <__gethex+0x3c>
   ba0b2:	f7ff ffc3 	bl	ba03c <__hexdig_fun>
   ba0b6:	4604      	mov	r4, r0
   ba0b8:	2800      	cmp	r0, #0
   ba0ba:	d13a      	bne.n	ba132 <__gethex+0xca>
   ba0bc:	9901      	ldr	r1, [sp, #4]
   ba0be:	4652      	mov	r2, sl
   ba0c0:	4638      	mov	r0, r7
   ba0c2:	f7fe ffca 	bl	b905a <strncmp>
   ba0c6:	4605      	mov	r5, r0
   ba0c8:	2800      	cmp	r0, #0
   ba0ca:	d168      	bne.n	ba19e <__gethex+0x136>
   ba0cc:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba0d0:	eb07 060a 	add.w	r6, r7, sl
   ba0d4:	f7ff ffb2 	bl	ba03c <__hexdig_fun>
   ba0d8:	2800      	cmp	r0, #0
   ba0da:	d062      	beq.n	ba1a2 <__gethex+0x13a>
   ba0dc:	4633      	mov	r3, r6
   ba0de:	7818      	ldrb	r0, [r3, #0]
   ba0e0:	2830      	cmp	r0, #48	; 0x30
   ba0e2:	461f      	mov	r7, r3
   ba0e4:	f103 0301 	add.w	r3, r3, #1
   ba0e8:	d0f9      	beq.n	ba0de <__gethex+0x76>
   ba0ea:	f7ff ffa7 	bl	ba03c <__hexdig_fun>
   ba0ee:	2301      	movs	r3, #1
   ba0f0:	fab0 f480 	clz	r4, r0
   ba0f4:	0964      	lsrs	r4, r4, #5
   ba0f6:	4635      	mov	r5, r6
   ba0f8:	9300      	str	r3, [sp, #0]
   ba0fa:	463a      	mov	r2, r7
   ba0fc:	4616      	mov	r6, r2
   ba0fe:	3201      	adds	r2, #1
   ba100:	7830      	ldrb	r0, [r6, #0]
   ba102:	f7ff ff9b 	bl	ba03c <__hexdig_fun>
   ba106:	2800      	cmp	r0, #0
   ba108:	d1f8      	bne.n	ba0fc <__gethex+0x94>
   ba10a:	9901      	ldr	r1, [sp, #4]
   ba10c:	4652      	mov	r2, sl
   ba10e:	4630      	mov	r0, r6
   ba110:	f7fe ffa3 	bl	b905a <strncmp>
   ba114:	b980      	cbnz	r0, ba138 <__gethex+0xd0>
   ba116:	b94d      	cbnz	r5, ba12c <__gethex+0xc4>
   ba118:	eb06 050a 	add.w	r5, r6, sl
   ba11c:	462a      	mov	r2, r5
   ba11e:	4616      	mov	r6, r2
   ba120:	3201      	adds	r2, #1
   ba122:	7830      	ldrb	r0, [r6, #0]
   ba124:	f7ff ff8a 	bl	ba03c <__hexdig_fun>
   ba128:	2800      	cmp	r0, #0
   ba12a:	d1f8      	bne.n	ba11e <__gethex+0xb6>
   ba12c:	1bad      	subs	r5, r5, r6
   ba12e:	00ad      	lsls	r5, r5, #2
   ba130:	e004      	b.n	ba13c <__gethex+0xd4>
   ba132:	2400      	movs	r4, #0
   ba134:	4625      	mov	r5, r4
   ba136:	e7e0      	b.n	ba0fa <__gethex+0x92>
   ba138:	2d00      	cmp	r5, #0
   ba13a:	d1f7      	bne.n	ba12c <__gethex+0xc4>
   ba13c:	7833      	ldrb	r3, [r6, #0]
   ba13e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba142:	2b50      	cmp	r3, #80	; 0x50
   ba144:	d13b      	bne.n	ba1be <__gethex+0x156>
   ba146:	7873      	ldrb	r3, [r6, #1]
   ba148:	2b2b      	cmp	r3, #43	; 0x2b
   ba14a:	d02c      	beq.n	ba1a6 <__gethex+0x13e>
   ba14c:	2b2d      	cmp	r3, #45	; 0x2d
   ba14e:	d02e      	beq.n	ba1ae <__gethex+0x146>
   ba150:	1c71      	adds	r1, r6, #1
   ba152:	f04f 0900 	mov.w	r9, #0
   ba156:	7808      	ldrb	r0, [r1, #0]
   ba158:	f7ff ff70 	bl	ba03c <__hexdig_fun>
   ba15c:	1e43      	subs	r3, r0, #1
   ba15e:	b2db      	uxtb	r3, r3
   ba160:	2b18      	cmp	r3, #24
   ba162:	d82c      	bhi.n	ba1be <__gethex+0x156>
   ba164:	f1a0 0210 	sub.w	r2, r0, #16
   ba168:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba16c:	f7ff ff66 	bl	ba03c <__hexdig_fun>
   ba170:	1e43      	subs	r3, r0, #1
   ba172:	b2db      	uxtb	r3, r3
   ba174:	2b18      	cmp	r3, #24
   ba176:	d91d      	bls.n	ba1b4 <__gethex+0x14c>
   ba178:	f1b9 0f00 	cmp.w	r9, #0
   ba17c:	d000      	beq.n	ba180 <__gethex+0x118>
   ba17e:	4252      	negs	r2, r2
   ba180:	4415      	add	r5, r2
   ba182:	f8cb 1000 	str.w	r1, [fp]
   ba186:	b1e4      	cbz	r4, ba1c2 <__gethex+0x15a>
   ba188:	9b00      	ldr	r3, [sp, #0]
   ba18a:	2b00      	cmp	r3, #0
   ba18c:	bf14      	ite	ne
   ba18e:	2700      	movne	r7, #0
   ba190:	2706      	moveq	r7, #6
   ba192:	4638      	mov	r0, r7
   ba194:	b009      	add	sp, #36	; 0x24
   ba196:	ecbd 8b02 	vpop	{d8}
   ba19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba19e:	463e      	mov	r6, r7
   ba1a0:	4625      	mov	r5, r4
   ba1a2:	2401      	movs	r4, #1
   ba1a4:	e7ca      	b.n	ba13c <__gethex+0xd4>
   ba1a6:	f04f 0900 	mov.w	r9, #0
   ba1aa:	1cb1      	adds	r1, r6, #2
   ba1ac:	e7d3      	b.n	ba156 <__gethex+0xee>
   ba1ae:	f04f 0901 	mov.w	r9, #1
   ba1b2:	e7fa      	b.n	ba1aa <__gethex+0x142>
   ba1b4:	230a      	movs	r3, #10
   ba1b6:	fb03 0202 	mla	r2, r3, r2, r0
   ba1ba:	3a10      	subs	r2, #16
   ba1bc:	e7d4      	b.n	ba168 <__gethex+0x100>
   ba1be:	4631      	mov	r1, r6
   ba1c0:	e7df      	b.n	ba182 <__gethex+0x11a>
   ba1c2:	1bf3      	subs	r3, r6, r7
   ba1c4:	3b01      	subs	r3, #1
   ba1c6:	4621      	mov	r1, r4
   ba1c8:	2b07      	cmp	r3, #7
   ba1ca:	dc0b      	bgt.n	ba1e4 <__gethex+0x17c>
   ba1cc:	ee18 0a10 	vmov	r0, s16
   ba1d0:	f000 fa68 	bl	ba6a4 <_Balloc>
   ba1d4:	4604      	mov	r4, r0
   ba1d6:	b940      	cbnz	r0, ba1ea <__gethex+0x182>
   ba1d8:	4b5d      	ldr	r3, [pc, #372]	; (ba350 <__gethex+0x2e8>)
   ba1da:	4602      	mov	r2, r0
   ba1dc:	21de      	movs	r1, #222	; 0xde
   ba1de:	485d      	ldr	r0, [pc, #372]	; (ba354 <__gethex+0x2ec>)
   ba1e0:	f7fc f840 	bl	b6264 <__assert_func>
   ba1e4:	3101      	adds	r1, #1
   ba1e6:	105b      	asrs	r3, r3, #1
   ba1e8:	e7ee      	b.n	ba1c8 <__gethex+0x160>
   ba1ea:	f100 0914 	add.w	r9, r0, #20
   ba1ee:	f04f 0b00 	mov.w	fp, #0
   ba1f2:	f1ca 0301 	rsb	r3, sl, #1
   ba1f6:	f8cd 9008 	str.w	r9, [sp, #8]
   ba1fa:	f8cd b000 	str.w	fp, [sp]
   ba1fe:	9306      	str	r3, [sp, #24]
   ba200:	42b7      	cmp	r7, r6
   ba202:	d340      	bcc.n	ba286 <__gethex+0x21e>
   ba204:	9802      	ldr	r0, [sp, #8]
   ba206:	9b00      	ldr	r3, [sp, #0]
   ba208:	f840 3b04 	str.w	r3, [r0], #4
   ba20c:	eba0 0009 	sub.w	r0, r0, r9
   ba210:	1080      	asrs	r0, r0, #2
   ba212:	0146      	lsls	r6, r0, #5
   ba214:	6120      	str	r0, [r4, #16]
   ba216:	4618      	mov	r0, r3
   ba218:	f000 fb36 	bl	ba888 <__hi0bits>
   ba21c:	1a30      	subs	r0, r6, r0
   ba21e:	f8d8 6000 	ldr.w	r6, [r8]
   ba222:	42b0      	cmp	r0, r6
   ba224:	dd63      	ble.n	ba2ee <__gethex+0x286>
   ba226:	1b87      	subs	r7, r0, r6
   ba228:	4639      	mov	r1, r7
   ba22a:	4620      	mov	r0, r4
   ba22c:	f000 feda 	bl	bafe4 <__any_on>
   ba230:	4682      	mov	sl, r0
   ba232:	b1a8      	cbz	r0, ba260 <__gethex+0x1f8>
   ba234:	1e7b      	subs	r3, r7, #1
   ba236:	1159      	asrs	r1, r3, #5
   ba238:	f003 021f 	and.w	r2, r3, #31
   ba23c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba240:	f04f 0a01 	mov.w	sl, #1
   ba244:	fa0a f202 	lsl.w	r2, sl, r2
   ba248:	420a      	tst	r2, r1
   ba24a:	d009      	beq.n	ba260 <__gethex+0x1f8>
   ba24c:	4553      	cmp	r3, sl
   ba24e:	dd05      	ble.n	ba25c <__gethex+0x1f4>
   ba250:	1eb9      	subs	r1, r7, #2
   ba252:	4620      	mov	r0, r4
   ba254:	f000 fec6 	bl	bafe4 <__any_on>
   ba258:	2800      	cmp	r0, #0
   ba25a:	d145      	bne.n	ba2e8 <__gethex+0x280>
   ba25c:	f04f 0a02 	mov.w	sl, #2
   ba260:	4639      	mov	r1, r7
   ba262:	4620      	mov	r0, r4
   ba264:	f7ff fe98 	bl	b9f98 <rshift>
   ba268:	443d      	add	r5, r7
   ba26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba26e:	42ab      	cmp	r3, r5
   ba270:	da4c      	bge.n	ba30c <__gethex+0x2a4>
   ba272:	ee18 0a10 	vmov	r0, s16
   ba276:	4621      	mov	r1, r4
   ba278:	f000 fa54 	bl	ba724 <_Bfree>
   ba27c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba27e:	2300      	movs	r3, #0
   ba280:	6013      	str	r3, [r2, #0]
   ba282:	27a3      	movs	r7, #163	; 0xa3
   ba284:	e785      	b.n	ba192 <__gethex+0x12a>
   ba286:	1e73      	subs	r3, r6, #1
   ba288:	9a05      	ldr	r2, [sp, #20]
   ba28a:	9303      	str	r3, [sp, #12]
   ba28c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba290:	4293      	cmp	r3, r2
   ba292:	d019      	beq.n	ba2c8 <__gethex+0x260>
   ba294:	f1bb 0f20 	cmp.w	fp, #32
   ba298:	d107      	bne.n	ba2aa <__gethex+0x242>
   ba29a:	9b02      	ldr	r3, [sp, #8]
   ba29c:	9a00      	ldr	r2, [sp, #0]
   ba29e:	f843 2b04 	str.w	r2, [r3], #4
   ba2a2:	9302      	str	r3, [sp, #8]
   ba2a4:	2300      	movs	r3, #0
   ba2a6:	9300      	str	r3, [sp, #0]
   ba2a8:	469b      	mov	fp, r3
   ba2aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba2ae:	f7ff fec5 	bl	ba03c <__hexdig_fun>
   ba2b2:	9b00      	ldr	r3, [sp, #0]
   ba2b4:	f000 000f 	and.w	r0, r0, #15
   ba2b8:	fa00 f00b 	lsl.w	r0, r0, fp
   ba2bc:	4303      	orrs	r3, r0
   ba2be:	9300      	str	r3, [sp, #0]
   ba2c0:	f10b 0b04 	add.w	fp, fp, #4
   ba2c4:	9b03      	ldr	r3, [sp, #12]
   ba2c6:	e00d      	b.n	ba2e4 <__gethex+0x27c>
   ba2c8:	9b03      	ldr	r3, [sp, #12]
   ba2ca:	9a06      	ldr	r2, [sp, #24]
   ba2cc:	4413      	add	r3, r2
   ba2ce:	42bb      	cmp	r3, r7
   ba2d0:	d3e0      	bcc.n	ba294 <__gethex+0x22c>
   ba2d2:	4618      	mov	r0, r3
   ba2d4:	9901      	ldr	r1, [sp, #4]
   ba2d6:	9307      	str	r3, [sp, #28]
   ba2d8:	4652      	mov	r2, sl
   ba2da:	f7fe febe 	bl	b905a <strncmp>
   ba2de:	9b07      	ldr	r3, [sp, #28]
   ba2e0:	2800      	cmp	r0, #0
   ba2e2:	d1d7      	bne.n	ba294 <__gethex+0x22c>
   ba2e4:	461e      	mov	r6, r3
   ba2e6:	e78b      	b.n	ba200 <__gethex+0x198>
   ba2e8:	f04f 0a03 	mov.w	sl, #3
   ba2ec:	e7b8      	b.n	ba260 <__gethex+0x1f8>
   ba2ee:	da0a      	bge.n	ba306 <__gethex+0x29e>
   ba2f0:	1a37      	subs	r7, r6, r0
   ba2f2:	4621      	mov	r1, r4
   ba2f4:	ee18 0a10 	vmov	r0, s16
   ba2f8:	463a      	mov	r2, r7
   ba2fa:	f000 fc2f 	bl	bab5c <__lshift>
   ba2fe:	1bed      	subs	r5, r5, r7
   ba300:	4604      	mov	r4, r0
   ba302:	f100 0914 	add.w	r9, r0, #20
   ba306:	f04f 0a00 	mov.w	sl, #0
   ba30a:	e7ae      	b.n	ba26a <__gethex+0x202>
   ba30c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba310:	42a8      	cmp	r0, r5
   ba312:	dd72      	ble.n	ba3fa <__gethex+0x392>
   ba314:	1b45      	subs	r5, r0, r5
   ba316:	42ae      	cmp	r6, r5
   ba318:	dc36      	bgt.n	ba388 <__gethex+0x320>
   ba31a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba31e:	2b02      	cmp	r3, #2
   ba320:	d02a      	beq.n	ba378 <__gethex+0x310>
   ba322:	2b03      	cmp	r3, #3
   ba324:	d02c      	beq.n	ba380 <__gethex+0x318>
   ba326:	2b01      	cmp	r3, #1
   ba328:	d11c      	bne.n	ba364 <__gethex+0x2fc>
   ba32a:	42ae      	cmp	r6, r5
   ba32c:	d11a      	bne.n	ba364 <__gethex+0x2fc>
   ba32e:	2e01      	cmp	r6, #1
   ba330:	d112      	bne.n	ba358 <__gethex+0x2f0>
   ba332:	9a04      	ldr	r2, [sp, #16]
   ba334:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba338:	6013      	str	r3, [r2, #0]
   ba33a:	2301      	movs	r3, #1
   ba33c:	6123      	str	r3, [r4, #16]
   ba33e:	f8c9 3000 	str.w	r3, [r9]
   ba342:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba344:	2762      	movs	r7, #98	; 0x62
   ba346:	601c      	str	r4, [r3, #0]
   ba348:	e723      	b.n	ba192 <__gethex+0x12a>
   ba34a:	bf00      	nop
   ba34c:	000bb9c8 	.word	0x000bb9c8
   ba350:	000bb930 	.word	0x000bb930
   ba354:	000bb941 	.word	0x000bb941
   ba358:	1e71      	subs	r1, r6, #1
   ba35a:	4620      	mov	r0, r4
   ba35c:	f000 fe42 	bl	bafe4 <__any_on>
   ba360:	2800      	cmp	r0, #0
   ba362:	d1e6      	bne.n	ba332 <__gethex+0x2ca>
   ba364:	ee18 0a10 	vmov	r0, s16
   ba368:	4621      	mov	r1, r4
   ba36a:	f000 f9db 	bl	ba724 <_Bfree>
   ba36e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba370:	2300      	movs	r3, #0
   ba372:	6013      	str	r3, [r2, #0]
   ba374:	2750      	movs	r7, #80	; 0x50
   ba376:	e70c      	b.n	ba192 <__gethex+0x12a>
   ba378:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba37a:	2b00      	cmp	r3, #0
   ba37c:	d1f2      	bne.n	ba364 <__gethex+0x2fc>
   ba37e:	e7d8      	b.n	ba332 <__gethex+0x2ca>
   ba380:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba382:	2b00      	cmp	r3, #0
   ba384:	d1d5      	bne.n	ba332 <__gethex+0x2ca>
   ba386:	e7ed      	b.n	ba364 <__gethex+0x2fc>
   ba388:	1e6f      	subs	r7, r5, #1
   ba38a:	f1ba 0f00 	cmp.w	sl, #0
   ba38e:	d131      	bne.n	ba3f4 <__gethex+0x38c>
   ba390:	b127      	cbz	r7, ba39c <__gethex+0x334>
   ba392:	4639      	mov	r1, r7
   ba394:	4620      	mov	r0, r4
   ba396:	f000 fe25 	bl	bafe4 <__any_on>
   ba39a:	4682      	mov	sl, r0
   ba39c:	117b      	asrs	r3, r7, #5
   ba39e:	2101      	movs	r1, #1
   ba3a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba3a4:	f007 071f 	and.w	r7, r7, #31
   ba3a8:	fa01 f707 	lsl.w	r7, r1, r7
   ba3ac:	421f      	tst	r7, r3
   ba3ae:	4629      	mov	r1, r5
   ba3b0:	4620      	mov	r0, r4
   ba3b2:	bf18      	it	ne
   ba3b4:	f04a 0a02 	orrne.w	sl, sl, #2
   ba3b8:	1b76      	subs	r6, r6, r5
   ba3ba:	f7ff fded 	bl	b9f98 <rshift>
   ba3be:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba3c2:	2702      	movs	r7, #2
   ba3c4:	f1ba 0f00 	cmp.w	sl, #0
   ba3c8:	d048      	beq.n	ba45c <__gethex+0x3f4>
   ba3ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba3ce:	2b02      	cmp	r3, #2
   ba3d0:	d015      	beq.n	ba3fe <__gethex+0x396>
   ba3d2:	2b03      	cmp	r3, #3
   ba3d4:	d017      	beq.n	ba406 <__gethex+0x39e>
   ba3d6:	2b01      	cmp	r3, #1
   ba3d8:	d109      	bne.n	ba3ee <__gethex+0x386>
   ba3da:	f01a 0f02 	tst.w	sl, #2
   ba3de:	d006      	beq.n	ba3ee <__gethex+0x386>
   ba3e0:	f8d9 0000 	ldr.w	r0, [r9]
   ba3e4:	ea4a 0a00 	orr.w	sl, sl, r0
   ba3e8:	f01a 0f01 	tst.w	sl, #1
   ba3ec:	d10e      	bne.n	ba40c <__gethex+0x3a4>
   ba3ee:	f047 0710 	orr.w	r7, r7, #16
   ba3f2:	e033      	b.n	ba45c <__gethex+0x3f4>
   ba3f4:	f04f 0a01 	mov.w	sl, #1
   ba3f8:	e7d0      	b.n	ba39c <__gethex+0x334>
   ba3fa:	2701      	movs	r7, #1
   ba3fc:	e7e2      	b.n	ba3c4 <__gethex+0x35c>
   ba3fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba400:	f1c3 0301 	rsb	r3, r3, #1
   ba404:	9315      	str	r3, [sp, #84]	; 0x54
   ba406:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba408:	2b00      	cmp	r3, #0
   ba40a:	d0f0      	beq.n	ba3ee <__gethex+0x386>
   ba40c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba410:	f104 0314 	add.w	r3, r4, #20
   ba414:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba418:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba41c:	f04f 0c00 	mov.w	ip, #0
   ba420:	4618      	mov	r0, r3
   ba422:	f853 2b04 	ldr.w	r2, [r3], #4
   ba426:	f1b2 3fff 	cmp.w	r2, #4294967295
   ba42a:	d01c      	beq.n	ba466 <__gethex+0x3fe>
   ba42c:	3201      	adds	r2, #1
   ba42e:	6002      	str	r2, [r0, #0]
   ba430:	2f02      	cmp	r7, #2
   ba432:	f104 0314 	add.w	r3, r4, #20
   ba436:	d13f      	bne.n	ba4b8 <__gethex+0x450>
   ba438:	f8d8 2000 	ldr.w	r2, [r8]
   ba43c:	3a01      	subs	r2, #1
   ba43e:	42b2      	cmp	r2, r6
   ba440:	d10a      	bne.n	ba458 <__gethex+0x3f0>
   ba442:	1171      	asrs	r1, r6, #5
   ba444:	2201      	movs	r2, #1
   ba446:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba44a:	f006 061f 	and.w	r6, r6, #31
   ba44e:	fa02 f606 	lsl.w	r6, r2, r6
   ba452:	421e      	tst	r6, r3
   ba454:	bf18      	it	ne
   ba456:	4617      	movne	r7, r2
   ba458:	f047 0720 	orr.w	r7, r7, #32
   ba45c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba45e:	601c      	str	r4, [r3, #0]
   ba460:	9b04      	ldr	r3, [sp, #16]
   ba462:	601d      	str	r5, [r3, #0]
   ba464:	e695      	b.n	ba192 <__gethex+0x12a>
   ba466:	4299      	cmp	r1, r3
   ba468:	f843 cc04 	str.w	ip, [r3, #-4]
   ba46c:	d8d8      	bhi.n	ba420 <__gethex+0x3b8>
   ba46e:	68a3      	ldr	r3, [r4, #8]
   ba470:	459b      	cmp	fp, r3
   ba472:	db19      	blt.n	ba4a8 <__gethex+0x440>
   ba474:	6861      	ldr	r1, [r4, #4]
   ba476:	ee18 0a10 	vmov	r0, s16
   ba47a:	3101      	adds	r1, #1
   ba47c:	f000 f912 	bl	ba6a4 <_Balloc>
   ba480:	4681      	mov	r9, r0
   ba482:	b918      	cbnz	r0, ba48c <__gethex+0x424>
   ba484:	4b1a      	ldr	r3, [pc, #104]	; (ba4f0 <__gethex+0x488>)
   ba486:	4602      	mov	r2, r0
   ba488:	2184      	movs	r1, #132	; 0x84
   ba48a:	e6a8      	b.n	ba1de <__gethex+0x176>
   ba48c:	6922      	ldr	r2, [r4, #16]
   ba48e:	3202      	adds	r2, #2
   ba490:	f104 010c 	add.w	r1, r4, #12
   ba494:	0092      	lsls	r2, r2, #2
   ba496:	300c      	adds	r0, #12
   ba498:	f7fe fd53 	bl	b8f42 <memcpy>
   ba49c:	4621      	mov	r1, r4
   ba49e:	ee18 0a10 	vmov	r0, s16
   ba4a2:	f000 f93f 	bl	ba724 <_Bfree>
   ba4a6:	464c      	mov	r4, r9
   ba4a8:	6923      	ldr	r3, [r4, #16]
   ba4aa:	1c5a      	adds	r2, r3, #1
   ba4ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba4b0:	6122      	str	r2, [r4, #16]
   ba4b2:	2201      	movs	r2, #1
   ba4b4:	615a      	str	r2, [r3, #20]
   ba4b6:	e7bb      	b.n	ba430 <__gethex+0x3c8>
   ba4b8:	6922      	ldr	r2, [r4, #16]
   ba4ba:	455a      	cmp	r2, fp
   ba4bc:	dd0b      	ble.n	ba4d6 <__gethex+0x46e>
   ba4be:	2101      	movs	r1, #1
   ba4c0:	4620      	mov	r0, r4
   ba4c2:	f7ff fd69 	bl	b9f98 <rshift>
   ba4c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba4ca:	3501      	adds	r5, #1
   ba4cc:	42ab      	cmp	r3, r5
   ba4ce:	f6ff aed0 	blt.w	ba272 <__gethex+0x20a>
   ba4d2:	2701      	movs	r7, #1
   ba4d4:	e7c0      	b.n	ba458 <__gethex+0x3f0>
   ba4d6:	f016 061f 	ands.w	r6, r6, #31
   ba4da:	d0fa      	beq.n	ba4d2 <__gethex+0x46a>
   ba4dc:	4453      	add	r3, sl
   ba4de:	f1c6 0620 	rsb	r6, r6, #32
   ba4e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba4e6:	f000 f9cf 	bl	ba888 <__hi0bits>
   ba4ea:	42b0      	cmp	r0, r6
   ba4ec:	dbe7      	blt.n	ba4be <__gethex+0x456>
   ba4ee:	e7f0      	b.n	ba4d2 <__gethex+0x46a>
   ba4f0:	000bb930 	.word	0x000bb930

000ba4f4 <L_shift>:
   ba4f4:	f1c2 0208 	rsb	r2, r2, #8
   ba4f8:	0092      	lsls	r2, r2, #2
   ba4fa:	b570      	push	{r4, r5, r6, lr}
   ba4fc:	f1c2 0620 	rsb	r6, r2, #32
   ba500:	6843      	ldr	r3, [r0, #4]
   ba502:	6804      	ldr	r4, [r0, #0]
   ba504:	fa03 f506 	lsl.w	r5, r3, r6
   ba508:	432c      	orrs	r4, r5
   ba50a:	40d3      	lsrs	r3, r2
   ba50c:	6004      	str	r4, [r0, #0]
   ba50e:	f840 3f04 	str.w	r3, [r0, #4]!
   ba512:	4288      	cmp	r0, r1
   ba514:	d3f4      	bcc.n	ba500 <L_shift+0xc>
   ba516:	bd70      	pop	{r4, r5, r6, pc}

000ba518 <__match>:
   ba518:	b530      	push	{r4, r5, lr}
   ba51a:	6803      	ldr	r3, [r0, #0]
   ba51c:	3301      	adds	r3, #1
   ba51e:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba522:	b914      	cbnz	r4, ba52a <__match+0x12>
   ba524:	6003      	str	r3, [r0, #0]
   ba526:	2001      	movs	r0, #1
   ba528:	bd30      	pop	{r4, r5, pc}
   ba52a:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba52e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba532:	2d19      	cmp	r5, #25
   ba534:	bf98      	it	ls
   ba536:	3220      	addls	r2, #32
   ba538:	42a2      	cmp	r2, r4
   ba53a:	d0f0      	beq.n	ba51e <__match+0x6>
   ba53c:	2000      	movs	r0, #0
   ba53e:	e7f3      	b.n	ba528 <__match+0x10>

000ba540 <__hexnan>:
   ba540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba544:	680b      	ldr	r3, [r1, #0]
   ba546:	115e      	asrs	r6, r3, #5
   ba548:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba54c:	f013 031f 	ands.w	r3, r3, #31
   ba550:	b087      	sub	sp, #28
   ba552:	bf18      	it	ne
   ba554:	3604      	addne	r6, #4
   ba556:	2500      	movs	r5, #0
   ba558:	1f37      	subs	r7, r6, #4
   ba55a:	4690      	mov	r8, r2
   ba55c:	6802      	ldr	r2, [r0, #0]
   ba55e:	9301      	str	r3, [sp, #4]
   ba560:	4682      	mov	sl, r0
   ba562:	f846 5c04 	str.w	r5, [r6, #-4]
   ba566:	46b9      	mov	r9, r7
   ba568:	463c      	mov	r4, r7
   ba56a:	9502      	str	r5, [sp, #8]
   ba56c:	46ab      	mov	fp, r5
   ba56e:	7851      	ldrb	r1, [r2, #1]
   ba570:	1c53      	adds	r3, r2, #1
   ba572:	9303      	str	r3, [sp, #12]
   ba574:	b341      	cbz	r1, ba5c8 <__hexnan+0x88>
   ba576:	4608      	mov	r0, r1
   ba578:	9205      	str	r2, [sp, #20]
   ba57a:	9104      	str	r1, [sp, #16]
   ba57c:	f7ff fd5e 	bl	ba03c <__hexdig_fun>
   ba580:	2800      	cmp	r0, #0
   ba582:	d14f      	bne.n	ba624 <__hexnan+0xe4>
   ba584:	9904      	ldr	r1, [sp, #16]
   ba586:	9a05      	ldr	r2, [sp, #20]
   ba588:	2920      	cmp	r1, #32
   ba58a:	d818      	bhi.n	ba5be <__hexnan+0x7e>
   ba58c:	9b02      	ldr	r3, [sp, #8]
   ba58e:	459b      	cmp	fp, r3
   ba590:	dd13      	ble.n	ba5ba <__hexnan+0x7a>
   ba592:	454c      	cmp	r4, r9
   ba594:	d206      	bcs.n	ba5a4 <__hexnan+0x64>
   ba596:	2d07      	cmp	r5, #7
   ba598:	dc04      	bgt.n	ba5a4 <__hexnan+0x64>
   ba59a:	462a      	mov	r2, r5
   ba59c:	4649      	mov	r1, r9
   ba59e:	4620      	mov	r0, r4
   ba5a0:	f7ff ffa8 	bl	ba4f4 <L_shift>
   ba5a4:	4544      	cmp	r4, r8
   ba5a6:	d950      	bls.n	ba64a <__hexnan+0x10a>
   ba5a8:	2300      	movs	r3, #0
   ba5aa:	f1a4 0904 	sub.w	r9, r4, #4
   ba5ae:	f844 3c04 	str.w	r3, [r4, #-4]
   ba5b2:	f8cd b008 	str.w	fp, [sp, #8]
   ba5b6:	464c      	mov	r4, r9
   ba5b8:	461d      	mov	r5, r3
   ba5ba:	9a03      	ldr	r2, [sp, #12]
   ba5bc:	e7d7      	b.n	ba56e <__hexnan+0x2e>
   ba5be:	2929      	cmp	r1, #41	; 0x29
   ba5c0:	d156      	bne.n	ba670 <__hexnan+0x130>
   ba5c2:	3202      	adds	r2, #2
   ba5c4:	f8ca 2000 	str.w	r2, [sl]
   ba5c8:	f1bb 0f00 	cmp.w	fp, #0
   ba5cc:	d050      	beq.n	ba670 <__hexnan+0x130>
   ba5ce:	454c      	cmp	r4, r9
   ba5d0:	d206      	bcs.n	ba5e0 <__hexnan+0xa0>
   ba5d2:	2d07      	cmp	r5, #7
   ba5d4:	dc04      	bgt.n	ba5e0 <__hexnan+0xa0>
   ba5d6:	462a      	mov	r2, r5
   ba5d8:	4649      	mov	r1, r9
   ba5da:	4620      	mov	r0, r4
   ba5dc:	f7ff ff8a 	bl	ba4f4 <L_shift>
   ba5e0:	4544      	cmp	r4, r8
   ba5e2:	d934      	bls.n	ba64e <__hexnan+0x10e>
   ba5e4:	f1a8 0204 	sub.w	r2, r8, #4
   ba5e8:	4623      	mov	r3, r4
   ba5ea:	f853 1b04 	ldr.w	r1, [r3], #4
   ba5ee:	f842 1f04 	str.w	r1, [r2, #4]!
   ba5f2:	429f      	cmp	r7, r3
   ba5f4:	d2f9      	bcs.n	ba5ea <__hexnan+0xaa>
   ba5f6:	1b3b      	subs	r3, r7, r4
   ba5f8:	f023 0303 	bic.w	r3, r3, #3
   ba5fc:	3304      	adds	r3, #4
   ba5fe:	3401      	adds	r4, #1
   ba600:	3e03      	subs	r6, #3
   ba602:	42b4      	cmp	r4, r6
   ba604:	bf88      	it	hi
   ba606:	2304      	movhi	r3, #4
   ba608:	4443      	add	r3, r8
   ba60a:	2200      	movs	r2, #0
   ba60c:	f843 2b04 	str.w	r2, [r3], #4
   ba610:	429f      	cmp	r7, r3
   ba612:	d2fb      	bcs.n	ba60c <__hexnan+0xcc>
   ba614:	683b      	ldr	r3, [r7, #0]
   ba616:	b91b      	cbnz	r3, ba620 <__hexnan+0xe0>
   ba618:	4547      	cmp	r7, r8
   ba61a:	d127      	bne.n	ba66c <__hexnan+0x12c>
   ba61c:	2301      	movs	r3, #1
   ba61e:	603b      	str	r3, [r7, #0]
   ba620:	2005      	movs	r0, #5
   ba622:	e026      	b.n	ba672 <__hexnan+0x132>
   ba624:	3501      	adds	r5, #1
   ba626:	2d08      	cmp	r5, #8
   ba628:	f10b 0b01 	add.w	fp, fp, #1
   ba62c:	dd06      	ble.n	ba63c <__hexnan+0xfc>
   ba62e:	4544      	cmp	r4, r8
   ba630:	d9c3      	bls.n	ba5ba <__hexnan+0x7a>
   ba632:	2300      	movs	r3, #0
   ba634:	f844 3c04 	str.w	r3, [r4, #-4]
   ba638:	2501      	movs	r5, #1
   ba63a:	3c04      	subs	r4, #4
   ba63c:	6822      	ldr	r2, [r4, #0]
   ba63e:	f000 000f 	and.w	r0, r0, #15
   ba642:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ba646:	6022      	str	r2, [r4, #0]
   ba648:	e7b7      	b.n	ba5ba <__hexnan+0x7a>
   ba64a:	2508      	movs	r5, #8
   ba64c:	e7b5      	b.n	ba5ba <__hexnan+0x7a>
   ba64e:	9b01      	ldr	r3, [sp, #4]
   ba650:	2b00      	cmp	r3, #0
   ba652:	d0df      	beq.n	ba614 <__hexnan+0xd4>
   ba654:	f04f 32ff 	mov.w	r2, #4294967295
   ba658:	f1c3 0320 	rsb	r3, r3, #32
   ba65c:	fa22 f303 	lsr.w	r3, r2, r3
   ba660:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ba664:	401a      	ands	r2, r3
   ba666:	f846 2c04 	str.w	r2, [r6, #-4]
   ba66a:	e7d3      	b.n	ba614 <__hexnan+0xd4>
   ba66c:	3f04      	subs	r7, #4
   ba66e:	e7d1      	b.n	ba614 <__hexnan+0xd4>
   ba670:	2004      	movs	r0, #4
   ba672:	b007      	add	sp, #28
   ba674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba678 <__retarget_lock_acquire_recursive>:
   ba678:	4770      	bx	lr

000ba67a <__retarget_lock_release>:
   ba67a:	4770      	bx	lr

000ba67c <__retarget_lock_release_recursive>:
   ba67c:	4770      	bx	lr

000ba67e <__ascii_mbtowc>:
   ba67e:	b082      	sub	sp, #8
   ba680:	b901      	cbnz	r1, ba684 <__ascii_mbtowc+0x6>
   ba682:	a901      	add	r1, sp, #4
   ba684:	b142      	cbz	r2, ba698 <__ascii_mbtowc+0x1a>
   ba686:	b14b      	cbz	r3, ba69c <__ascii_mbtowc+0x1e>
   ba688:	7813      	ldrb	r3, [r2, #0]
   ba68a:	600b      	str	r3, [r1, #0]
   ba68c:	7812      	ldrb	r2, [r2, #0]
   ba68e:	1e10      	subs	r0, r2, #0
   ba690:	bf18      	it	ne
   ba692:	2001      	movne	r0, #1
   ba694:	b002      	add	sp, #8
   ba696:	4770      	bx	lr
   ba698:	4610      	mov	r0, r2
   ba69a:	e7fb      	b.n	ba694 <__ascii_mbtowc+0x16>
   ba69c:	f06f 0001 	mvn.w	r0, #1
   ba6a0:	e7f8      	b.n	ba694 <__ascii_mbtowc+0x16>
	...

000ba6a4 <_Balloc>:
   ba6a4:	b570      	push	{r4, r5, r6, lr}
   ba6a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba6a8:	4604      	mov	r4, r0
   ba6aa:	460d      	mov	r5, r1
   ba6ac:	b976      	cbnz	r6, ba6cc <_Balloc+0x28>
   ba6ae:	2010      	movs	r0, #16
   ba6b0:	f7fb fd90 	bl	b61d4 <malloc>
   ba6b4:	4602      	mov	r2, r0
   ba6b6:	6260      	str	r0, [r4, #36]	; 0x24
   ba6b8:	b920      	cbnz	r0, ba6c4 <_Balloc+0x20>
   ba6ba:	4b18      	ldr	r3, [pc, #96]	; (ba71c <_Balloc+0x78>)
   ba6bc:	4818      	ldr	r0, [pc, #96]	; (ba720 <_Balloc+0x7c>)
   ba6be:	2166      	movs	r1, #102	; 0x66
   ba6c0:	f7fb fdd0 	bl	b6264 <__assert_func>
   ba6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba6c8:	6006      	str	r6, [r0, #0]
   ba6ca:	60c6      	str	r6, [r0, #12]
   ba6cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba6ce:	68f3      	ldr	r3, [r6, #12]
   ba6d0:	b183      	cbz	r3, ba6f4 <_Balloc+0x50>
   ba6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba6d4:	68db      	ldr	r3, [r3, #12]
   ba6d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ba6da:	b9b8      	cbnz	r0, ba70c <_Balloc+0x68>
   ba6dc:	2101      	movs	r1, #1
   ba6de:	fa01 f605 	lsl.w	r6, r1, r5
   ba6e2:	1d72      	adds	r2, r6, #5
   ba6e4:	0092      	lsls	r2, r2, #2
   ba6e6:	4620      	mov	r0, r4
   ba6e8:	f000 fc9d 	bl	bb026 <_calloc_r>
   ba6ec:	b160      	cbz	r0, ba708 <_Balloc+0x64>
   ba6ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ba6f2:	e00e      	b.n	ba712 <_Balloc+0x6e>
   ba6f4:	2221      	movs	r2, #33	; 0x21
   ba6f6:	2104      	movs	r1, #4
   ba6f8:	4620      	mov	r0, r4
   ba6fa:	f000 fc94 	bl	bb026 <_calloc_r>
   ba6fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba700:	60f0      	str	r0, [r6, #12]
   ba702:	68db      	ldr	r3, [r3, #12]
   ba704:	2b00      	cmp	r3, #0
   ba706:	d1e4      	bne.n	ba6d2 <_Balloc+0x2e>
   ba708:	2000      	movs	r0, #0
   ba70a:	bd70      	pop	{r4, r5, r6, pc}
   ba70c:	6802      	ldr	r2, [r0, #0]
   ba70e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ba712:	2300      	movs	r3, #0
   ba714:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ba718:	e7f7      	b.n	ba70a <_Balloc+0x66>
   ba71a:	bf00      	nop
   ba71c:	000bb6bd 	.word	0x000bb6bd
   ba720:	000bb9dc 	.word	0x000bb9dc

000ba724 <_Bfree>:
   ba724:	b570      	push	{r4, r5, r6, lr}
   ba726:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba728:	4605      	mov	r5, r0
   ba72a:	460c      	mov	r4, r1
   ba72c:	b976      	cbnz	r6, ba74c <_Bfree+0x28>
   ba72e:	2010      	movs	r0, #16
   ba730:	f7fb fd50 	bl	b61d4 <malloc>
   ba734:	4602      	mov	r2, r0
   ba736:	6268      	str	r0, [r5, #36]	; 0x24
   ba738:	b920      	cbnz	r0, ba744 <_Bfree+0x20>
   ba73a:	4b09      	ldr	r3, [pc, #36]	; (ba760 <_Bfree+0x3c>)
   ba73c:	4809      	ldr	r0, [pc, #36]	; (ba764 <_Bfree+0x40>)
   ba73e:	218a      	movs	r1, #138	; 0x8a
   ba740:	f7fb fd90 	bl	b6264 <__assert_func>
   ba744:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba748:	6006      	str	r6, [r0, #0]
   ba74a:	60c6      	str	r6, [r0, #12]
   ba74c:	b13c      	cbz	r4, ba75e <_Bfree+0x3a>
   ba74e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ba750:	6862      	ldr	r2, [r4, #4]
   ba752:	68db      	ldr	r3, [r3, #12]
   ba754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ba758:	6021      	str	r1, [r4, #0]
   ba75a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ba75e:	bd70      	pop	{r4, r5, r6, pc}
   ba760:	000bb6bd 	.word	0x000bb6bd
   ba764:	000bb9dc 	.word	0x000bb9dc

000ba768 <__multadd>:
   ba768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba76c:	690d      	ldr	r5, [r1, #16]
   ba76e:	4607      	mov	r7, r0
   ba770:	460c      	mov	r4, r1
   ba772:	461e      	mov	r6, r3
   ba774:	f101 0c14 	add.w	ip, r1, #20
   ba778:	2000      	movs	r0, #0
   ba77a:	f8dc 3000 	ldr.w	r3, [ip]
   ba77e:	b299      	uxth	r1, r3
   ba780:	fb02 6101 	mla	r1, r2, r1, r6
   ba784:	0c1e      	lsrs	r6, r3, #16
   ba786:	0c0b      	lsrs	r3, r1, #16
   ba788:	fb02 3306 	mla	r3, r2, r6, r3
   ba78c:	b289      	uxth	r1, r1
   ba78e:	3001      	adds	r0, #1
   ba790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   ba794:	4285      	cmp	r5, r0
   ba796:	f84c 1b04 	str.w	r1, [ip], #4
   ba79a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   ba79e:	dcec      	bgt.n	ba77a <__multadd+0x12>
   ba7a0:	b30e      	cbz	r6, ba7e6 <__multadd+0x7e>
   ba7a2:	68a3      	ldr	r3, [r4, #8]
   ba7a4:	42ab      	cmp	r3, r5
   ba7a6:	dc19      	bgt.n	ba7dc <__multadd+0x74>
   ba7a8:	6861      	ldr	r1, [r4, #4]
   ba7aa:	4638      	mov	r0, r7
   ba7ac:	3101      	adds	r1, #1
   ba7ae:	f7ff ff79 	bl	ba6a4 <_Balloc>
   ba7b2:	4680      	mov	r8, r0
   ba7b4:	b928      	cbnz	r0, ba7c2 <__multadd+0x5a>
   ba7b6:	4602      	mov	r2, r0
   ba7b8:	4b0c      	ldr	r3, [pc, #48]	; (ba7ec <__multadd+0x84>)
   ba7ba:	480d      	ldr	r0, [pc, #52]	; (ba7f0 <__multadd+0x88>)
   ba7bc:	21b5      	movs	r1, #181	; 0xb5
   ba7be:	f7fb fd51 	bl	b6264 <__assert_func>
   ba7c2:	6922      	ldr	r2, [r4, #16]
   ba7c4:	3202      	adds	r2, #2
   ba7c6:	f104 010c 	add.w	r1, r4, #12
   ba7ca:	0092      	lsls	r2, r2, #2
   ba7cc:	300c      	adds	r0, #12
   ba7ce:	f7fe fbb8 	bl	b8f42 <memcpy>
   ba7d2:	4621      	mov	r1, r4
   ba7d4:	4638      	mov	r0, r7
   ba7d6:	f7ff ffa5 	bl	ba724 <_Bfree>
   ba7da:	4644      	mov	r4, r8
   ba7dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ba7e0:	3501      	adds	r5, #1
   ba7e2:	615e      	str	r6, [r3, #20]
   ba7e4:	6125      	str	r5, [r4, #16]
   ba7e6:	4620      	mov	r0, r4
   ba7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba7ec:	000bb930 	.word	0x000bb930
   ba7f0:	000bb9dc 	.word	0x000bb9dc

000ba7f4 <__s2b>:
   ba7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba7f8:	460c      	mov	r4, r1
   ba7fa:	4615      	mov	r5, r2
   ba7fc:	461f      	mov	r7, r3
   ba7fe:	2209      	movs	r2, #9
   ba800:	3308      	adds	r3, #8
   ba802:	4606      	mov	r6, r0
   ba804:	fb93 f3f2 	sdiv	r3, r3, r2
   ba808:	2100      	movs	r1, #0
   ba80a:	2201      	movs	r2, #1
   ba80c:	429a      	cmp	r2, r3
   ba80e:	db09      	blt.n	ba824 <__s2b+0x30>
   ba810:	4630      	mov	r0, r6
   ba812:	f7ff ff47 	bl	ba6a4 <_Balloc>
   ba816:	b940      	cbnz	r0, ba82a <__s2b+0x36>
   ba818:	4602      	mov	r2, r0
   ba81a:	4b19      	ldr	r3, [pc, #100]	; (ba880 <__s2b+0x8c>)
   ba81c:	4819      	ldr	r0, [pc, #100]	; (ba884 <__s2b+0x90>)
   ba81e:	21ce      	movs	r1, #206	; 0xce
   ba820:	f7fb fd20 	bl	b6264 <__assert_func>
   ba824:	0052      	lsls	r2, r2, #1
   ba826:	3101      	adds	r1, #1
   ba828:	e7f0      	b.n	ba80c <__s2b+0x18>
   ba82a:	9b08      	ldr	r3, [sp, #32]
   ba82c:	6143      	str	r3, [r0, #20]
   ba82e:	2d09      	cmp	r5, #9
   ba830:	f04f 0301 	mov.w	r3, #1
   ba834:	6103      	str	r3, [r0, #16]
   ba836:	dd16      	ble.n	ba866 <__s2b+0x72>
   ba838:	f104 0909 	add.w	r9, r4, #9
   ba83c:	46c8      	mov	r8, r9
   ba83e:	442c      	add	r4, r5
   ba840:	f818 3b01 	ldrb.w	r3, [r8], #1
   ba844:	4601      	mov	r1, r0
   ba846:	3b30      	subs	r3, #48	; 0x30
   ba848:	220a      	movs	r2, #10
   ba84a:	4630      	mov	r0, r6
   ba84c:	f7ff ff8c 	bl	ba768 <__multadd>
   ba850:	45a0      	cmp	r8, r4
   ba852:	d1f5      	bne.n	ba840 <__s2b+0x4c>
   ba854:	f1a5 0408 	sub.w	r4, r5, #8
   ba858:	444c      	add	r4, r9
   ba85a:	1b2d      	subs	r5, r5, r4
   ba85c:	1963      	adds	r3, r4, r5
   ba85e:	42bb      	cmp	r3, r7
   ba860:	db04      	blt.n	ba86c <__s2b+0x78>
   ba862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba866:	340a      	adds	r4, #10
   ba868:	2509      	movs	r5, #9
   ba86a:	e7f6      	b.n	ba85a <__s2b+0x66>
   ba86c:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba870:	4601      	mov	r1, r0
   ba872:	3b30      	subs	r3, #48	; 0x30
   ba874:	220a      	movs	r2, #10
   ba876:	4630      	mov	r0, r6
   ba878:	f7ff ff76 	bl	ba768 <__multadd>
   ba87c:	e7ee      	b.n	ba85c <__s2b+0x68>
   ba87e:	bf00      	nop
   ba880:	000bb930 	.word	0x000bb930
   ba884:	000bb9dc 	.word	0x000bb9dc

000ba888 <__hi0bits>:
   ba888:	0c03      	lsrs	r3, r0, #16
   ba88a:	041b      	lsls	r3, r3, #16
   ba88c:	b9d3      	cbnz	r3, ba8c4 <__hi0bits+0x3c>
   ba88e:	0400      	lsls	r0, r0, #16
   ba890:	2310      	movs	r3, #16
   ba892:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ba896:	bf04      	itt	eq
   ba898:	0200      	lsleq	r0, r0, #8
   ba89a:	3308      	addeq	r3, #8
   ba89c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ba8a0:	bf04      	itt	eq
   ba8a2:	0100      	lsleq	r0, r0, #4
   ba8a4:	3304      	addeq	r3, #4
   ba8a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ba8aa:	bf04      	itt	eq
   ba8ac:	0080      	lsleq	r0, r0, #2
   ba8ae:	3302      	addeq	r3, #2
   ba8b0:	2800      	cmp	r0, #0
   ba8b2:	db05      	blt.n	ba8c0 <__hi0bits+0x38>
   ba8b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ba8b8:	f103 0301 	add.w	r3, r3, #1
   ba8bc:	bf08      	it	eq
   ba8be:	2320      	moveq	r3, #32
   ba8c0:	4618      	mov	r0, r3
   ba8c2:	4770      	bx	lr
   ba8c4:	2300      	movs	r3, #0
   ba8c6:	e7e4      	b.n	ba892 <__hi0bits+0xa>

000ba8c8 <__lo0bits>:
   ba8c8:	6803      	ldr	r3, [r0, #0]
   ba8ca:	f013 0207 	ands.w	r2, r3, #7
   ba8ce:	4601      	mov	r1, r0
   ba8d0:	d00b      	beq.n	ba8ea <__lo0bits+0x22>
   ba8d2:	07da      	lsls	r2, r3, #31
   ba8d4:	d423      	bmi.n	ba91e <__lo0bits+0x56>
   ba8d6:	0798      	lsls	r0, r3, #30
   ba8d8:	bf49      	itett	mi
   ba8da:	085b      	lsrmi	r3, r3, #1
   ba8dc:	089b      	lsrpl	r3, r3, #2
   ba8de:	2001      	movmi	r0, #1
   ba8e0:	600b      	strmi	r3, [r1, #0]
   ba8e2:	bf5c      	itt	pl
   ba8e4:	600b      	strpl	r3, [r1, #0]
   ba8e6:	2002      	movpl	r0, #2
   ba8e8:	4770      	bx	lr
   ba8ea:	b298      	uxth	r0, r3
   ba8ec:	b9a8      	cbnz	r0, ba91a <__lo0bits+0x52>
   ba8ee:	0c1b      	lsrs	r3, r3, #16
   ba8f0:	2010      	movs	r0, #16
   ba8f2:	b2da      	uxtb	r2, r3
   ba8f4:	b90a      	cbnz	r2, ba8fa <__lo0bits+0x32>
   ba8f6:	3008      	adds	r0, #8
   ba8f8:	0a1b      	lsrs	r3, r3, #8
   ba8fa:	071a      	lsls	r2, r3, #28
   ba8fc:	bf04      	itt	eq
   ba8fe:	091b      	lsreq	r3, r3, #4
   ba900:	3004      	addeq	r0, #4
   ba902:	079a      	lsls	r2, r3, #30
   ba904:	bf04      	itt	eq
   ba906:	089b      	lsreq	r3, r3, #2
   ba908:	3002      	addeq	r0, #2
   ba90a:	07da      	lsls	r2, r3, #31
   ba90c:	d403      	bmi.n	ba916 <__lo0bits+0x4e>
   ba90e:	085b      	lsrs	r3, r3, #1
   ba910:	f100 0001 	add.w	r0, r0, #1
   ba914:	d005      	beq.n	ba922 <__lo0bits+0x5a>
   ba916:	600b      	str	r3, [r1, #0]
   ba918:	4770      	bx	lr
   ba91a:	4610      	mov	r0, r2
   ba91c:	e7e9      	b.n	ba8f2 <__lo0bits+0x2a>
   ba91e:	2000      	movs	r0, #0
   ba920:	4770      	bx	lr
   ba922:	2020      	movs	r0, #32
   ba924:	4770      	bx	lr
	...

000ba928 <__i2b>:
   ba928:	b510      	push	{r4, lr}
   ba92a:	460c      	mov	r4, r1
   ba92c:	2101      	movs	r1, #1
   ba92e:	f7ff feb9 	bl	ba6a4 <_Balloc>
   ba932:	4602      	mov	r2, r0
   ba934:	b928      	cbnz	r0, ba942 <__i2b+0x1a>
   ba936:	4b05      	ldr	r3, [pc, #20]	; (ba94c <__i2b+0x24>)
   ba938:	4805      	ldr	r0, [pc, #20]	; (ba950 <__i2b+0x28>)
   ba93a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   ba93e:	f7fb fc91 	bl	b6264 <__assert_func>
   ba942:	2301      	movs	r3, #1
   ba944:	6144      	str	r4, [r0, #20]
   ba946:	6103      	str	r3, [r0, #16]
   ba948:	bd10      	pop	{r4, pc}
   ba94a:	bf00      	nop
   ba94c:	000bb930 	.word	0x000bb930
   ba950:	000bb9dc 	.word	0x000bb9dc

000ba954 <__multiply>:
   ba954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba958:	4691      	mov	r9, r2
   ba95a:	690a      	ldr	r2, [r1, #16]
   ba95c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba960:	429a      	cmp	r2, r3
   ba962:	bfb8      	it	lt
   ba964:	460b      	movlt	r3, r1
   ba966:	460c      	mov	r4, r1
   ba968:	bfbc      	itt	lt
   ba96a:	464c      	movlt	r4, r9
   ba96c:	4699      	movlt	r9, r3
   ba96e:	6927      	ldr	r7, [r4, #16]
   ba970:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba974:	68a3      	ldr	r3, [r4, #8]
   ba976:	6861      	ldr	r1, [r4, #4]
   ba978:	eb07 060a 	add.w	r6, r7, sl
   ba97c:	42b3      	cmp	r3, r6
   ba97e:	b085      	sub	sp, #20
   ba980:	bfb8      	it	lt
   ba982:	3101      	addlt	r1, #1
   ba984:	f7ff fe8e 	bl	ba6a4 <_Balloc>
   ba988:	b930      	cbnz	r0, ba998 <__multiply+0x44>
   ba98a:	4602      	mov	r2, r0
   ba98c:	4b44      	ldr	r3, [pc, #272]	; (baaa0 <__multiply+0x14c>)
   ba98e:	4845      	ldr	r0, [pc, #276]	; (baaa4 <__multiply+0x150>)
   ba990:	f240 115d 	movw	r1, #349	; 0x15d
   ba994:	f7fb fc66 	bl	b6264 <__assert_func>
   ba998:	f100 0514 	add.w	r5, r0, #20
   ba99c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   ba9a0:	462b      	mov	r3, r5
   ba9a2:	2200      	movs	r2, #0
   ba9a4:	4543      	cmp	r3, r8
   ba9a6:	d321      	bcc.n	ba9ec <__multiply+0x98>
   ba9a8:	f104 0314 	add.w	r3, r4, #20
   ba9ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ba9b0:	f109 0314 	add.w	r3, r9, #20
   ba9b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   ba9b8:	9202      	str	r2, [sp, #8]
   ba9ba:	1b3a      	subs	r2, r7, r4
   ba9bc:	3a15      	subs	r2, #21
   ba9be:	f022 0203 	bic.w	r2, r2, #3
   ba9c2:	3204      	adds	r2, #4
   ba9c4:	f104 0115 	add.w	r1, r4, #21
   ba9c8:	428f      	cmp	r7, r1
   ba9ca:	bf38      	it	cc
   ba9cc:	2204      	movcc	r2, #4
   ba9ce:	9201      	str	r2, [sp, #4]
   ba9d0:	9a02      	ldr	r2, [sp, #8]
   ba9d2:	9303      	str	r3, [sp, #12]
   ba9d4:	429a      	cmp	r2, r3
   ba9d6:	d80c      	bhi.n	ba9f2 <__multiply+0x9e>
   ba9d8:	2e00      	cmp	r6, #0
   ba9da:	dd03      	ble.n	ba9e4 <__multiply+0x90>
   ba9dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ba9e0:	2b00      	cmp	r3, #0
   ba9e2:	d05a      	beq.n	baa9a <__multiply+0x146>
   ba9e4:	6106      	str	r6, [r0, #16]
   ba9e6:	b005      	add	sp, #20
   ba9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba9ec:	f843 2b04 	str.w	r2, [r3], #4
   ba9f0:	e7d8      	b.n	ba9a4 <__multiply+0x50>
   ba9f2:	f8b3 a000 	ldrh.w	sl, [r3]
   ba9f6:	f1ba 0f00 	cmp.w	sl, #0
   ba9fa:	d024      	beq.n	baa46 <__multiply+0xf2>
   ba9fc:	f104 0e14 	add.w	lr, r4, #20
   baa00:	46a9      	mov	r9, r5
   baa02:	f04f 0c00 	mov.w	ip, #0
   baa06:	f85e 2b04 	ldr.w	r2, [lr], #4
   baa0a:	f8d9 1000 	ldr.w	r1, [r9]
   baa0e:	fa1f fb82 	uxth.w	fp, r2
   baa12:	b289      	uxth	r1, r1
   baa14:	fb0a 110b 	mla	r1, sl, fp, r1
   baa18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   baa1c:	f8d9 2000 	ldr.w	r2, [r9]
   baa20:	4461      	add	r1, ip
   baa22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baa26:	fb0a c20b 	mla	r2, sl, fp, ip
   baa2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   baa2e:	b289      	uxth	r1, r1
   baa30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   baa34:	4577      	cmp	r7, lr
   baa36:	f849 1b04 	str.w	r1, [r9], #4
   baa3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baa3e:	d8e2      	bhi.n	baa06 <__multiply+0xb2>
   baa40:	9a01      	ldr	r2, [sp, #4]
   baa42:	f845 c002 	str.w	ip, [r5, r2]
   baa46:	9a03      	ldr	r2, [sp, #12]
   baa48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   baa4c:	3304      	adds	r3, #4
   baa4e:	f1b9 0f00 	cmp.w	r9, #0
   baa52:	d020      	beq.n	baa96 <__multiply+0x142>
   baa54:	6829      	ldr	r1, [r5, #0]
   baa56:	f104 0c14 	add.w	ip, r4, #20
   baa5a:	46ae      	mov	lr, r5
   baa5c:	f04f 0a00 	mov.w	sl, #0
   baa60:	f8bc b000 	ldrh.w	fp, [ip]
   baa64:	f8be 2002 	ldrh.w	r2, [lr, #2]
   baa68:	fb09 220b 	mla	r2, r9, fp, r2
   baa6c:	4492      	add	sl, r2
   baa6e:	b289      	uxth	r1, r1
   baa70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   baa74:	f84e 1b04 	str.w	r1, [lr], #4
   baa78:	f85c 2b04 	ldr.w	r2, [ip], #4
   baa7c:	f8be 1000 	ldrh.w	r1, [lr]
   baa80:	0c12      	lsrs	r2, r2, #16
   baa82:	fb09 1102 	mla	r1, r9, r2, r1
   baa86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   baa8a:	4567      	cmp	r7, ip
   baa8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   baa90:	d8e6      	bhi.n	baa60 <__multiply+0x10c>
   baa92:	9a01      	ldr	r2, [sp, #4]
   baa94:	50a9      	str	r1, [r5, r2]
   baa96:	3504      	adds	r5, #4
   baa98:	e79a      	b.n	ba9d0 <__multiply+0x7c>
   baa9a:	3e01      	subs	r6, #1
   baa9c:	e79c      	b.n	ba9d8 <__multiply+0x84>
   baa9e:	bf00      	nop
   baaa0:	000bb930 	.word	0x000bb930
   baaa4:	000bb9dc 	.word	0x000bb9dc

000baaa8 <__pow5mult>:
   baaa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baaac:	4615      	mov	r5, r2
   baaae:	f012 0203 	ands.w	r2, r2, #3
   baab2:	4606      	mov	r6, r0
   baab4:	460f      	mov	r7, r1
   baab6:	d007      	beq.n	baac8 <__pow5mult+0x20>
   baab8:	4c25      	ldr	r4, [pc, #148]	; (bab50 <__pow5mult+0xa8>)
   baaba:	3a01      	subs	r2, #1
   baabc:	2300      	movs	r3, #0
   baabe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   baac2:	f7ff fe51 	bl	ba768 <__multadd>
   baac6:	4607      	mov	r7, r0
   baac8:	10ad      	asrs	r5, r5, #2
   baaca:	d03d      	beq.n	bab48 <__pow5mult+0xa0>
   baacc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   baace:	b97c      	cbnz	r4, baaf0 <__pow5mult+0x48>
   baad0:	2010      	movs	r0, #16
   baad2:	f7fb fb7f 	bl	b61d4 <malloc>
   baad6:	4602      	mov	r2, r0
   baad8:	6270      	str	r0, [r6, #36]	; 0x24
   baada:	b928      	cbnz	r0, baae8 <__pow5mult+0x40>
   baadc:	4b1d      	ldr	r3, [pc, #116]	; (bab54 <__pow5mult+0xac>)
   baade:	481e      	ldr	r0, [pc, #120]	; (bab58 <__pow5mult+0xb0>)
   baae0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   baae4:	f7fb fbbe 	bl	b6264 <__assert_func>
   baae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   baaec:	6004      	str	r4, [r0, #0]
   baaee:	60c4      	str	r4, [r0, #12]
   baaf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   baaf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   baaf8:	b94c      	cbnz	r4, bab0e <__pow5mult+0x66>
   baafa:	f240 2171 	movw	r1, #625	; 0x271
   baafe:	4630      	mov	r0, r6
   bab00:	f7ff ff12 	bl	ba928 <__i2b>
   bab04:	2300      	movs	r3, #0
   bab06:	f8c8 0008 	str.w	r0, [r8, #8]
   bab0a:	4604      	mov	r4, r0
   bab0c:	6003      	str	r3, [r0, #0]
   bab0e:	f04f 0900 	mov.w	r9, #0
   bab12:	07eb      	lsls	r3, r5, #31
   bab14:	d50a      	bpl.n	bab2c <__pow5mult+0x84>
   bab16:	4639      	mov	r1, r7
   bab18:	4622      	mov	r2, r4
   bab1a:	4630      	mov	r0, r6
   bab1c:	f7ff ff1a 	bl	ba954 <__multiply>
   bab20:	4639      	mov	r1, r7
   bab22:	4680      	mov	r8, r0
   bab24:	4630      	mov	r0, r6
   bab26:	f7ff fdfd 	bl	ba724 <_Bfree>
   bab2a:	4647      	mov	r7, r8
   bab2c:	106d      	asrs	r5, r5, #1
   bab2e:	d00b      	beq.n	bab48 <__pow5mult+0xa0>
   bab30:	6820      	ldr	r0, [r4, #0]
   bab32:	b938      	cbnz	r0, bab44 <__pow5mult+0x9c>
   bab34:	4622      	mov	r2, r4
   bab36:	4621      	mov	r1, r4
   bab38:	4630      	mov	r0, r6
   bab3a:	f7ff ff0b 	bl	ba954 <__multiply>
   bab3e:	6020      	str	r0, [r4, #0]
   bab40:	f8c0 9000 	str.w	r9, [r0]
   bab44:	4604      	mov	r4, r0
   bab46:	e7e4      	b.n	bab12 <__pow5mult+0x6a>
   bab48:	4638      	mov	r0, r7
   bab4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bab4e:	bf00      	nop
   bab50:	000bbb50 	.word	0x000bbb50
   bab54:	000bb6bd 	.word	0x000bb6bd
   bab58:	000bb9dc 	.word	0x000bb9dc

000bab5c <__lshift>:
   bab5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bab60:	460c      	mov	r4, r1
   bab62:	6849      	ldr	r1, [r1, #4]
   bab64:	6923      	ldr	r3, [r4, #16]
   bab66:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bab6a:	68a3      	ldr	r3, [r4, #8]
   bab6c:	4607      	mov	r7, r0
   bab6e:	4691      	mov	r9, r2
   bab70:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bab74:	f108 0601 	add.w	r6, r8, #1
   bab78:	42b3      	cmp	r3, r6
   bab7a:	db0b      	blt.n	bab94 <__lshift+0x38>
   bab7c:	4638      	mov	r0, r7
   bab7e:	f7ff fd91 	bl	ba6a4 <_Balloc>
   bab82:	4605      	mov	r5, r0
   bab84:	b948      	cbnz	r0, bab9a <__lshift+0x3e>
   bab86:	4602      	mov	r2, r0
   bab88:	4b2a      	ldr	r3, [pc, #168]	; (bac34 <__lshift+0xd8>)
   bab8a:	482b      	ldr	r0, [pc, #172]	; (bac38 <__lshift+0xdc>)
   bab8c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bab90:	f7fb fb68 	bl	b6264 <__assert_func>
   bab94:	3101      	adds	r1, #1
   bab96:	005b      	lsls	r3, r3, #1
   bab98:	e7ee      	b.n	bab78 <__lshift+0x1c>
   bab9a:	2300      	movs	r3, #0
   bab9c:	f100 0114 	add.w	r1, r0, #20
   baba0:	f100 0210 	add.w	r2, r0, #16
   baba4:	4618      	mov	r0, r3
   baba6:	4553      	cmp	r3, sl
   baba8:	db37      	blt.n	bac1a <__lshift+0xbe>
   babaa:	6920      	ldr	r0, [r4, #16]
   babac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   babb0:	f104 0314 	add.w	r3, r4, #20
   babb4:	f019 091f 	ands.w	r9, r9, #31
   babb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   babbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   babc0:	d02f      	beq.n	bac22 <__lshift+0xc6>
   babc2:	f1c9 0e20 	rsb	lr, r9, #32
   babc6:	468a      	mov	sl, r1
   babc8:	f04f 0c00 	mov.w	ip, #0
   babcc:	681a      	ldr	r2, [r3, #0]
   babce:	fa02 f209 	lsl.w	r2, r2, r9
   babd2:	ea42 020c 	orr.w	r2, r2, ip
   babd6:	f84a 2b04 	str.w	r2, [sl], #4
   babda:	f853 2b04 	ldr.w	r2, [r3], #4
   babde:	4298      	cmp	r0, r3
   babe0:	fa22 fc0e 	lsr.w	ip, r2, lr
   babe4:	d8f2      	bhi.n	babcc <__lshift+0x70>
   babe6:	1b03      	subs	r3, r0, r4
   babe8:	3b15      	subs	r3, #21
   babea:	f023 0303 	bic.w	r3, r3, #3
   babee:	3304      	adds	r3, #4
   babf0:	f104 0215 	add.w	r2, r4, #21
   babf4:	4290      	cmp	r0, r2
   babf6:	bf38      	it	cc
   babf8:	2304      	movcc	r3, #4
   babfa:	f841 c003 	str.w	ip, [r1, r3]
   babfe:	f1bc 0f00 	cmp.w	ip, #0
   bac02:	d001      	beq.n	bac08 <__lshift+0xac>
   bac04:	f108 0602 	add.w	r6, r8, #2
   bac08:	3e01      	subs	r6, #1
   bac0a:	4638      	mov	r0, r7
   bac0c:	612e      	str	r6, [r5, #16]
   bac0e:	4621      	mov	r1, r4
   bac10:	f7ff fd88 	bl	ba724 <_Bfree>
   bac14:	4628      	mov	r0, r5
   bac16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bac1a:	f842 0f04 	str.w	r0, [r2, #4]!
   bac1e:	3301      	adds	r3, #1
   bac20:	e7c1      	b.n	baba6 <__lshift+0x4a>
   bac22:	3904      	subs	r1, #4
   bac24:	f853 2b04 	ldr.w	r2, [r3], #4
   bac28:	f841 2f04 	str.w	r2, [r1, #4]!
   bac2c:	4298      	cmp	r0, r3
   bac2e:	d8f9      	bhi.n	bac24 <__lshift+0xc8>
   bac30:	e7ea      	b.n	bac08 <__lshift+0xac>
   bac32:	bf00      	nop
   bac34:	000bb930 	.word	0x000bb930
   bac38:	000bb9dc 	.word	0x000bb9dc

000bac3c <__mcmp>:
   bac3c:	b530      	push	{r4, r5, lr}
   bac3e:	6902      	ldr	r2, [r0, #16]
   bac40:	690c      	ldr	r4, [r1, #16]
   bac42:	1b12      	subs	r2, r2, r4
   bac44:	d10e      	bne.n	bac64 <__mcmp+0x28>
   bac46:	f100 0314 	add.w	r3, r0, #20
   bac4a:	3114      	adds	r1, #20
   bac4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bac50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bac54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bac58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bac5c:	42a5      	cmp	r5, r4
   bac5e:	d003      	beq.n	bac68 <__mcmp+0x2c>
   bac60:	d305      	bcc.n	bac6e <__mcmp+0x32>
   bac62:	2201      	movs	r2, #1
   bac64:	4610      	mov	r0, r2
   bac66:	bd30      	pop	{r4, r5, pc}
   bac68:	4283      	cmp	r3, r0
   bac6a:	d3f3      	bcc.n	bac54 <__mcmp+0x18>
   bac6c:	e7fa      	b.n	bac64 <__mcmp+0x28>
   bac6e:	f04f 32ff 	mov.w	r2, #4294967295
   bac72:	e7f7      	b.n	bac64 <__mcmp+0x28>

000bac74 <__mdiff>:
   bac74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac78:	460c      	mov	r4, r1
   bac7a:	4606      	mov	r6, r0
   bac7c:	4611      	mov	r1, r2
   bac7e:	4620      	mov	r0, r4
   bac80:	4690      	mov	r8, r2
   bac82:	f7ff ffdb 	bl	bac3c <__mcmp>
   bac86:	1e05      	subs	r5, r0, #0
   bac88:	d110      	bne.n	bacac <__mdiff+0x38>
   bac8a:	4629      	mov	r1, r5
   bac8c:	4630      	mov	r0, r6
   bac8e:	f7ff fd09 	bl	ba6a4 <_Balloc>
   bac92:	b930      	cbnz	r0, baca2 <__mdiff+0x2e>
   bac94:	4b3a      	ldr	r3, [pc, #232]	; (bad80 <__mdiff+0x10c>)
   bac96:	4602      	mov	r2, r0
   bac98:	f240 2132 	movw	r1, #562	; 0x232
   bac9c:	4839      	ldr	r0, [pc, #228]	; (bad84 <__mdiff+0x110>)
   bac9e:	f7fb fae1 	bl	b6264 <__assert_func>
   baca2:	2301      	movs	r3, #1
   baca4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   baca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bacac:	bfa4      	itt	ge
   bacae:	4643      	movge	r3, r8
   bacb0:	46a0      	movge	r8, r4
   bacb2:	4630      	mov	r0, r6
   bacb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bacb8:	bfa6      	itte	ge
   bacba:	461c      	movge	r4, r3
   bacbc:	2500      	movge	r5, #0
   bacbe:	2501      	movlt	r5, #1
   bacc0:	f7ff fcf0 	bl	ba6a4 <_Balloc>
   bacc4:	b920      	cbnz	r0, bacd0 <__mdiff+0x5c>
   bacc6:	4b2e      	ldr	r3, [pc, #184]	; (bad80 <__mdiff+0x10c>)
   bacc8:	4602      	mov	r2, r0
   bacca:	f44f 7110 	mov.w	r1, #576	; 0x240
   bacce:	e7e5      	b.n	bac9c <__mdiff+0x28>
   bacd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bacd4:	6926      	ldr	r6, [r4, #16]
   bacd6:	60c5      	str	r5, [r0, #12]
   bacd8:	f104 0914 	add.w	r9, r4, #20
   bacdc:	f108 0514 	add.w	r5, r8, #20
   bace0:	f100 0e14 	add.w	lr, r0, #20
   bace4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bace8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bacec:	f108 0210 	add.w	r2, r8, #16
   bacf0:	46f2      	mov	sl, lr
   bacf2:	2100      	movs	r1, #0
   bacf4:	f859 3b04 	ldr.w	r3, [r9], #4
   bacf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bacfc:	fa1f f883 	uxth.w	r8, r3
   bad00:	fa11 f18b 	uxtah	r1, r1, fp
   bad04:	0c1b      	lsrs	r3, r3, #16
   bad06:	eba1 0808 	sub.w	r8, r1, r8
   bad0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bad0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bad12:	fa1f f888 	uxth.w	r8, r8
   bad16:	1419      	asrs	r1, r3, #16
   bad18:	454e      	cmp	r6, r9
   bad1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bad1e:	f84a 3b04 	str.w	r3, [sl], #4
   bad22:	d8e7      	bhi.n	bacf4 <__mdiff+0x80>
   bad24:	1b33      	subs	r3, r6, r4
   bad26:	3b15      	subs	r3, #21
   bad28:	f023 0303 	bic.w	r3, r3, #3
   bad2c:	3304      	adds	r3, #4
   bad2e:	3415      	adds	r4, #21
   bad30:	42a6      	cmp	r6, r4
   bad32:	bf38      	it	cc
   bad34:	2304      	movcc	r3, #4
   bad36:	441d      	add	r5, r3
   bad38:	4473      	add	r3, lr
   bad3a:	469e      	mov	lr, r3
   bad3c:	462e      	mov	r6, r5
   bad3e:	4566      	cmp	r6, ip
   bad40:	d30e      	bcc.n	bad60 <__mdiff+0xec>
   bad42:	f10c 0203 	add.w	r2, ip, #3
   bad46:	1b52      	subs	r2, r2, r5
   bad48:	f022 0203 	bic.w	r2, r2, #3
   bad4c:	3d03      	subs	r5, #3
   bad4e:	45ac      	cmp	ip, r5
   bad50:	bf38      	it	cc
   bad52:	2200      	movcc	r2, #0
   bad54:	441a      	add	r2, r3
   bad56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bad5a:	b17b      	cbz	r3, bad7c <__mdiff+0x108>
   bad5c:	6107      	str	r7, [r0, #16]
   bad5e:	e7a3      	b.n	baca8 <__mdiff+0x34>
   bad60:	f856 8b04 	ldr.w	r8, [r6], #4
   bad64:	fa11 f288 	uxtah	r2, r1, r8
   bad68:	1414      	asrs	r4, r2, #16
   bad6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bad6e:	b292      	uxth	r2, r2
   bad70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bad74:	f84e 2b04 	str.w	r2, [lr], #4
   bad78:	1421      	asrs	r1, r4, #16
   bad7a:	e7e0      	b.n	bad3e <__mdiff+0xca>
   bad7c:	3f01      	subs	r7, #1
   bad7e:	e7ea      	b.n	bad56 <__mdiff+0xe2>
   bad80:	000bb930 	.word	0x000bb930
   bad84:	000bb9dc 	.word	0x000bb9dc

000bad88 <__ulp>:
   bad88:	b082      	sub	sp, #8
   bad8a:	ed8d 0b00 	vstr	d0, [sp]
   bad8e:	9b01      	ldr	r3, [sp, #4]
   bad90:	4912      	ldr	r1, [pc, #72]	; (baddc <__ulp+0x54>)
   bad92:	4019      	ands	r1, r3
   bad94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bad98:	2900      	cmp	r1, #0
   bad9a:	dd05      	ble.n	bada8 <__ulp+0x20>
   bad9c:	2200      	movs	r2, #0
   bad9e:	460b      	mov	r3, r1
   bada0:	ec43 2b10 	vmov	d0, r2, r3
   bada4:	b002      	add	sp, #8
   bada6:	4770      	bx	lr
   bada8:	4249      	negs	r1, r1
   badaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   badae:	ea4f 5021 	mov.w	r0, r1, asr #20
   badb2:	f04f 0200 	mov.w	r2, #0
   badb6:	f04f 0300 	mov.w	r3, #0
   badba:	da04      	bge.n	badc6 <__ulp+0x3e>
   badbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   badc0:	fa41 f300 	asr.w	r3, r1, r0
   badc4:	e7ec      	b.n	bada0 <__ulp+0x18>
   badc6:	f1a0 0114 	sub.w	r1, r0, #20
   badca:	291e      	cmp	r1, #30
   badcc:	bfda      	itte	le
   badce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   badd2:	fa20 f101 	lsrle.w	r1, r0, r1
   badd6:	2101      	movgt	r1, #1
   badd8:	460a      	mov	r2, r1
   badda:	e7e1      	b.n	bada0 <__ulp+0x18>
   baddc:	7ff00000 	.word	0x7ff00000

000bade0 <__b2d>:
   bade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bade2:	6905      	ldr	r5, [r0, #16]
   bade4:	f100 0714 	add.w	r7, r0, #20
   bade8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   badec:	1f2e      	subs	r6, r5, #4
   badee:	f855 4c04 	ldr.w	r4, [r5, #-4]
   badf2:	4620      	mov	r0, r4
   badf4:	f7ff fd48 	bl	ba888 <__hi0bits>
   badf8:	f1c0 0320 	rsb	r3, r0, #32
   badfc:	280a      	cmp	r0, #10
   badfe:	f8df c07c 	ldr.w	ip, [pc, #124]	; bae7c <__b2d+0x9c>
   bae02:	600b      	str	r3, [r1, #0]
   bae04:	dc14      	bgt.n	bae30 <__b2d+0x50>
   bae06:	f1c0 0e0b 	rsb	lr, r0, #11
   bae0a:	fa24 f10e 	lsr.w	r1, r4, lr
   bae0e:	42b7      	cmp	r7, r6
   bae10:	ea41 030c 	orr.w	r3, r1, ip
   bae14:	bf34      	ite	cc
   bae16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bae1a:	2100      	movcs	r1, #0
   bae1c:	3015      	adds	r0, #21
   bae1e:	fa04 f000 	lsl.w	r0, r4, r0
   bae22:	fa21 f10e 	lsr.w	r1, r1, lr
   bae26:	ea40 0201 	orr.w	r2, r0, r1
   bae2a:	ec43 2b10 	vmov	d0, r2, r3
   bae2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bae30:	42b7      	cmp	r7, r6
   bae32:	bf3a      	itte	cc
   bae34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bae38:	f1a5 0608 	subcc.w	r6, r5, #8
   bae3c:	2100      	movcs	r1, #0
   bae3e:	380b      	subs	r0, #11
   bae40:	d017      	beq.n	bae72 <__b2d+0x92>
   bae42:	f1c0 0c20 	rsb	ip, r0, #32
   bae46:	fa04 f500 	lsl.w	r5, r4, r0
   bae4a:	42be      	cmp	r6, r7
   bae4c:	fa21 f40c 	lsr.w	r4, r1, ip
   bae50:	ea45 0504 	orr.w	r5, r5, r4
   bae54:	bf8c      	ite	hi
   bae56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bae5a:	2400      	movls	r4, #0
   bae5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bae60:	fa01 f000 	lsl.w	r0, r1, r0
   bae64:	fa24 f40c 	lsr.w	r4, r4, ip
   bae68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bae6c:	ea40 0204 	orr.w	r2, r0, r4
   bae70:	e7db      	b.n	bae2a <__b2d+0x4a>
   bae72:	ea44 030c 	orr.w	r3, r4, ip
   bae76:	460a      	mov	r2, r1
   bae78:	e7d7      	b.n	bae2a <__b2d+0x4a>
   bae7a:	bf00      	nop
   bae7c:	3ff00000 	.word	0x3ff00000

000bae80 <__d2b>:
   bae80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bae84:	4689      	mov	r9, r1
   bae86:	2101      	movs	r1, #1
   bae88:	ec57 6b10 	vmov	r6, r7, d0
   bae8c:	4690      	mov	r8, r2
   bae8e:	f7ff fc09 	bl	ba6a4 <_Balloc>
   bae92:	4604      	mov	r4, r0
   bae94:	b930      	cbnz	r0, baea4 <__d2b+0x24>
   bae96:	4602      	mov	r2, r0
   bae98:	4b25      	ldr	r3, [pc, #148]	; (baf30 <__d2b+0xb0>)
   bae9a:	4826      	ldr	r0, [pc, #152]	; (baf34 <__d2b+0xb4>)
   bae9c:	f240 310a 	movw	r1, #778	; 0x30a
   baea0:	f7fb f9e0 	bl	b6264 <__assert_func>
   baea4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   baea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   baeac:	bb35      	cbnz	r5, baefc <__d2b+0x7c>
   baeae:	2e00      	cmp	r6, #0
   baeb0:	9301      	str	r3, [sp, #4]
   baeb2:	d028      	beq.n	baf06 <__d2b+0x86>
   baeb4:	4668      	mov	r0, sp
   baeb6:	9600      	str	r6, [sp, #0]
   baeb8:	f7ff fd06 	bl	ba8c8 <__lo0bits>
   baebc:	9900      	ldr	r1, [sp, #0]
   baebe:	b300      	cbz	r0, baf02 <__d2b+0x82>
   baec0:	9a01      	ldr	r2, [sp, #4]
   baec2:	f1c0 0320 	rsb	r3, r0, #32
   baec6:	fa02 f303 	lsl.w	r3, r2, r3
   baeca:	430b      	orrs	r3, r1
   baecc:	40c2      	lsrs	r2, r0
   baece:	6163      	str	r3, [r4, #20]
   baed0:	9201      	str	r2, [sp, #4]
   baed2:	9b01      	ldr	r3, [sp, #4]
   baed4:	61a3      	str	r3, [r4, #24]
   baed6:	2b00      	cmp	r3, #0
   baed8:	bf14      	ite	ne
   baeda:	2202      	movne	r2, #2
   baedc:	2201      	moveq	r2, #1
   baede:	6122      	str	r2, [r4, #16]
   baee0:	b1d5      	cbz	r5, baf18 <__d2b+0x98>
   baee2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   baee6:	4405      	add	r5, r0
   baee8:	f8c9 5000 	str.w	r5, [r9]
   baeec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   baef0:	f8c8 0000 	str.w	r0, [r8]
   baef4:	4620      	mov	r0, r4
   baef6:	b003      	add	sp, #12
   baef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   baefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baf00:	e7d5      	b.n	baeae <__d2b+0x2e>
   baf02:	6161      	str	r1, [r4, #20]
   baf04:	e7e5      	b.n	baed2 <__d2b+0x52>
   baf06:	a801      	add	r0, sp, #4
   baf08:	f7ff fcde 	bl	ba8c8 <__lo0bits>
   baf0c:	9b01      	ldr	r3, [sp, #4]
   baf0e:	6163      	str	r3, [r4, #20]
   baf10:	2201      	movs	r2, #1
   baf12:	6122      	str	r2, [r4, #16]
   baf14:	3020      	adds	r0, #32
   baf16:	e7e3      	b.n	baee0 <__d2b+0x60>
   baf18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   baf1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   baf20:	f8c9 0000 	str.w	r0, [r9]
   baf24:	6918      	ldr	r0, [r3, #16]
   baf26:	f7ff fcaf 	bl	ba888 <__hi0bits>
   baf2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   baf2e:	e7df      	b.n	baef0 <__d2b+0x70>
   baf30:	000bb930 	.word	0x000bb930
   baf34:	000bb9dc 	.word	0x000bb9dc

000baf38 <__ratio>:
   baf38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baf3c:	4688      	mov	r8, r1
   baf3e:	4669      	mov	r1, sp
   baf40:	4681      	mov	r9, r0
   baf42:	f7ff ff4d 	bl	bade0 <__b2d>
   baf46:	a901      	add	r1, sp, #4
   baf48:	4640      	mov	r0, r8
   baf4a:	ec55 4b10 	vmov	r4, r5, d0
   baf4e:	f7ff ff47 	bl	bade0 <__b2d>
   baf52:	f8d9 3010 	ldr.w	r3, [r9, #16]
   baf56:	f8d8 2010 	ldr.w	r2, [r8, #16]
   baf5a:	eba3 0c02 	sub.w	ip, r3, r2
   baf5e:	e9dd 3200 	ldrd	r3, r2, [sp]
   baf62:	1a9b      	subs	r3, r3, r2
   baf64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   baf68:	ec51 0b10 	vmov	r0, r1, d0
   baf6c:	2b00      	cmp	r3, #0
   baf6e:	bfd6      	itet	le
   baf70:	460a      	movle	r2, r1
   baf72:	462a      	movgt	r2, r5
   baf74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   baf78:	468b      	mov	fp, r1
   baf7a:	462f      	mov	r7, r5
   baf7c:	bfd4      	ite	le
   baf7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   baf82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   baf86:	4620      	mov	r0, r4
   baf88:	ee10 2a10 	vmov	r2, s0
   baf8c:	465b      	mov	r3, fp
   baf8e:	4639      	mov	r1, r7
   baf90:	f7fd fe08 	bl	b8ba4 <__aeabi_ddiv>
   baf94:	ec41 0b10 	vmov	d0, r0, r1
   baf98:	b003      	add	sp, #12
   baf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baf9e <__copybits>:
   baf9e:	3901      	subs	r1, #1
   bafa0:	b570      	push	{r4, r5, r6, lr}
   bafa2:	1149      	asrs	r1, r1, #5
   bafa4:	6914      	ldr	r4, [r2, #16]
   bafa6:	3101      	adds	r1, #1
   bafa8:	f102 0314 	add.w	r3, r2, #20
   bafac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bafb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bafb4:	1f05      	subs	r5, r0, #4
   bafb6:	42a3      	cmp	r3, r4
   bafb8:	d30c      	bcc.n	bafd4 <__copybits+0x36>
   bafba:	1aa3      	subs	r3, r4, r2
   bafbc:	3b11      	subs	r3, #17
   bafbe:	f023 0303 	bic.w	r3, r3, #3
   bafc2:	3211      	adds	r2, #17
   bafc4:	42a2      	cmp	r2, r4
   bafc6:	bf88      	it	hi
   bafc8:	2300      	movhi	r3, #0
   bafca:	4418      	add	r0, r3
   bafcc:	2300      	movs	r3, #0
   bafce:	4288      	cmp	r0, r1
   bafd0:	d305      	bcc.n	bafde <__copybits+0x40>
   bafd2:	bd70      	pop	{r4, r5, r6, pc}
   bafd4:	f853 6b04 	ldr.w	r6, [r3], #4
   bafd8:	f845 6f04 	str.w	r6, [r5, #4]!
   bafdc:	e7eb      	b.n	bafb6 <__copybits+0x18>
   bafde:	f840 3b04 	str.w	r3, [r0], #4
   bafe2:	e7f4      	b.n	bafce <__copybits+0x30>

000bafe4 <__any_on>:
   bafe4:	f100 0214 	add.w	r2, r0, #20
   bafe8:	6900      	ldr	r0, [r0, #16]
   bafea:	114b      	asrs	r3, r1, #5
   bafec:	4298      	cmp	r0, r3
   bafee:	b510      	push	{r4, lr}
   baff0:	db11      	blt.n	bb016 <__any_on+0x32>
   baff2:	dd0a      	ble.n	bb00a <__any_on+0x26>
   baff4:	f011 011f 	ands.w	r1, r1, #31
   baff8:	d007      	beq.n	bb00a <__any_on+0x26>
   baffa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   baffe:	fa24 f001 	lsr.w	r0, r4, r1
   bb002:	fa00 f101 	lsl.w	r1, r0, r1
   bb006:	428c      	cmp	r4, r1
   bb008:	d10b      	bne.n	bb022 <__any_on+0x3e>
   bb00a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb00e:	4293      	cmp	r3, r2
   bb010:	d803      	bhi.n	bb01a <__any_on+0x36>
   bb012:	2000      	movs	r0, #0
   bb014:	bd10      	pop	{r4, pc}
   bb016:	4603      	mov	r3, r0
   bb018:	e7f7      	b.n	bb00a <__any_on+0x26>
   bb01a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb01e:	2900      	cmp	r1, #0
   bb020:	d0f5      	beq.n	bb00e <__any_on+0x2a>
   bb022:	2001      	movs	r0, #1
   bb024:	e7f6      	b.n	bb014 <__any_on+0x30>

000bb026 <_calloc_r>:
   bb026:	b513      	push	{r0, r1, r4, lr}
   bb028:	434a      	muls	r2, r1
   bb02a:	4611      	mov	r1, r2
   bb02c:	9201      	str	r2, [sp, #4]
   bb02e:	f7fb f909 	bl	b6244 <_malloc_r>
   bb032:	4604      	mov	r4, r0
   bb034:	b118      	cbz	r0, bb03e <_calloc_r+0x18>
   bb036:	9a01      	ldr	r2, [sp, #4]
   bb038:	2100      	movs	r1, #0
   bb03a:	f7fd ff90 	bl	b8f5e <memset>
   bb03e:	4620      	mov	r0, r4
   bb040:	b002      	add	sp, #8
   bb042:	bd10      	pop	{r4, pc}
   bb044:	0000      	movs	r0, r0
	...

000bb048 <nan>:
   bb048:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb050 <nan+0x8>
   bb04c:	4770      	bx	lr
   bb04e:	bf00      	nop
   bb050:	00000000 	.word	0x00000000
   bb054:	7ff80000 	.word	0x7ff80000

000bb058 <__ascii_wctomb>:
   bb058:	b149      	cbz	r1, bb06e <__ascii_wctomb+0x16>
   bb05a:	2aff      	cmp	r2, #255	; 0xff
   bb05c:	bf85      	ittet	hi
   bb05e:	238a      	movhi	r3, #138	; 0x8a
   bb060:	6003      	strhi	r3, [r0, #0]
   bb062:	700a      	strbls	r2, [r1, #0]
   bb064:	f04f 30ff 	movhi.w	r0, #4294967295
   bb068:	bf98      	it	ls
   bb06a:	2001      	movls	r0, #1
   bb06c:	4770      	bx	lr
   bb06e:	4608      	mov	r0, r1
   bb070:	4770      	bx	lr
	...

000bb074 <__aeabi_d2lz>:
   bb074:	b538      	push	{r3, r4, r5, lr}
   bb076:	2200      	movs	r2, #0
   bb078:	2300      	movs	r3, #0
   bb07a:	4604      	mov	r4, r0
   bb07c:	460d      	mov	r5, r1
   bb07e:	f7fd fed9 	bl	b8e34 <__aeabi_dcmplt>
   bb082:	b928      	cbnz	r0, bb090 <__aeabi_d2lz+0x1c>
   bb084:	4620      	mov	r0, r4
   bb086:	4629      	mov	r1, r5
   bb088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb08c:	f7fd bf1a 	b.w	b8ec4 <__aeabi_d2ulz>
   bb090:	4620      	mov	r0, r4
   bb092:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bb096:	f7fd ff15 	bl	b8ec4 <__aeabi_d2ulz>
   bb09a:	4240      	negs	r0, r0
   bb09c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb0a0:	bd38      	pop	{r3, r4, r5, pc}
   bb0a2:	bf00      	nop

000bb0a4 <dynalib_user>:
   bb0a4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bb0b4:	0000 0000 7270 6369 7365 002f 7325 000a     ....prices/.%s..
   bb0c4:	212c 2500 642a 252d 642a 252d 642a 2554     ,!.%*d-%*d-%*dT%
   bb0d4:	3a64 2a25 3a64 2a25 0064 6e49 6920 746e     d:%*d:%*d.In int
   bb0e4:	7265 7572 7470 000a 6948 6867 7365 2074     errupt..Highest 
   bb0f4:	7270 6369 2065 666f 7420 6568 6420 7961     price of the day
   bb104:	203a 6625 000a 6f4c 6577 7473 7020 6972     : %f..Lowest pri
   bb114:	6563 6f20 2066 6874 2065 6164 3a79 2520     ce of the day: %
   bb124:	0a66 4800 756f 7372 6f20 2066 6874 2065     f..Hours of the 
   bb134:	6164 2079 6877 7265 2065 6c65 6365 7274     day where electr
   bb144:	6369 7469 2079 7369 7720 7469 6968 206e     icity is within 
   bb154:	6361 6563 7470 6465 7220 6e61 6567 0a3a     accepted range:.
   bb164:	2500 3230 2064 6f74 2520 3230 0a64 4300     .%02d to %02d..C
   bb174:	696c 6e65 2074 6964 6373 6e6f 656e 7463     lient disconnect
   bb184:	6465 000a 7073 7261 636b 696c 6e65 5f74     ed..sparkclient_
   bb194:	6d00 7471 0074 6c43 6569 746e 7220 6365     .mqtt.Client rec
   bb1a4:	6e6f 656e 7463 6465 000a 6f68 656d 7361     onnected..homeas
   bb1b4:	6973 7473 6e61 2e74 6f6c 6163 006c 4148     sistant.local.HA
   bb1c4:	4920 0050 6567 5f74 7270 6369 7365 5300      IP.get_prices.S
   bb1d4:	6174 6574 5200 7465 7275 206e 6176 756c     tate.Return valu
   bb1e4:	3a65 2520 0064 6568 6c6c 206f 6f77 6c72     e: %d.hello worl
   bb1f4:	0064 6f70 6577 2f72 6567 0074 6f70 6577     d.power/get.powe
   bb204:	2f72 7270 6369 7365 7b00 2220 6579 7261     r/prices.{ "year
   bb214:	3a22 2220 6425 2c22 2220 6f6d 746e 2268     ": "%d", "month"
   bb224:	223a 3025 6432 2c22 2220 6164 2279 203a     :"%02d", "day": 
   bb234:	2522 3230 2264 202c 6422 7961 745f 6f77     "%02d", "day_two
   bb244:	3a22 2220 3025 6432 2c22 2220 6f68 7275     ": "%02d", "hour
   bb254:	3a22 2220 3025 6432 2022 007d 6c65 7270     ": "%02d" }.elpr
   bb264:	7369 7265 4900 206e 6f77 6b72 000a 6843     iser.In work..Ch
   bb274:	6165 2870 7369 2968 6820 756f 7372 6f20     eap(ish) hours o
   bb284:	2066 6874 2065 6164 3a79 0020 3025 6432     f the day: .%02d
   bb294:	7420 206f 3025 6432 202c 4c00 776f 7020      to %02d, .Low p
   bb2a4:	6972 6563 6820 756f 7372 4300 7275 6572     rice hours.Curre
   bb2b4:	746e 4820 3a48 4d4d 203a 3025 6432 253a     nt HH:MM: %02d:%
   bb2c4:	3230 0a64 5200 6365 6965 6576 2064 6f70     02d..Received po
   bb2d4:	6577 2f72 6567 0a74 7000 776f 7265 3100     wer/get..power.1
   bb2e4:	3239 312e 3836 312e 3031 362e 0000 4d04     92.168.110.6...M
   bb2f4:	5451 0454 0600 514d 7349 7064 4203 6765     QTT...MQIsdp.Beg
   bb304:	6e69 4d20 6c75 6974 6163 7473 4f00 7475     in Multicast.Out
   bb314:	6f20 2066 656d 6f6d 7972 6e00 746f 7620      of memory.not v
   bb324:	6c61 6469 0000 0000                         alid....

000bb32c <_ZTVN5spark13EthernetClassE>:
	...
   bb334:	62f3 000b 62e9 000b 62df 000b 62d5 000b     .b...b...b...b..
   bb344:	62c9 000b 62bd 000b 80bd 000b 80c5 000b     .b...b..........
   bb354:	62b1 000b 62a9 000b 629f 000b 6295 000b     .b...b...b...b..
   bb364:	80f5 000b                                   ....

000bb368 <_ZTV3UDP>:
	...
   bb370:	6a29 000b 6a4d 000b 6431 000b 6559 000b     )j..Mj..1d..Ye..
   bb380:	63e9 000b 6449 000b 6467 000b 6481 000b     .c..Id..gd...d..
   bb390:	64a5 000b 653d 000b 6817 000b 65dd 000b     .d..=e...h...e..
   bb3a0:	6735 000b 63d1 000b 69b9 000b 66bd 000b     5g...c...i...f..
   bb3b0:	63f1 000b 69e7 000b 6583 000b 63df 000b     .c...i...e...c..
   bb3c0:	6615 000b 63e5 000b 6483 000b fff0 ffff     .f...c...d......
   bb3d0:	0000 0000 649d 000b                         .....d..

000bb3d8 <_ZTV21StringPrintableHelper>:
	...
   bb3e0:	6aa5 000b 6aa7 000b 6c21 000b 6bf3 000b     .j...j..!l...k..

000bb3f0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bb3f8:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bb408:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bb418 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb420:	7155 000b 715b 000b 7199 000b 7169 000b     Uq..[q...q..iq..
   bb430:	7157 000b                                   Wq..

000bb434 <_ZTV9IPAddress>:
	...
   bb43c:	7695 000b 7685 000b 7687 000b               .v...v...v..

000bb448 <_ZTV9USBSerial>:
	...
   bb450:	77cf 000b 7837 000b 780d 000b 6d39 000b     .w..7x...x..9m..
   bb460:	77ff 000b 77d1 000b 77e1 000b 7831 000b     .w...w...w..1x..
   bb470:	77f1 000b 77c9 000b                         .w...w..

000bb478 <_ZTV11USARTSerial>:
	...
   bb480:	7921 000b 798d 000b 7965 000b 6d39 000b     !y...y..ey..9m..
   bb490:	7935 000b 7951 000b 7943 000b 795f 000b     5y..Qy..Cy.._y..
   bb4a0:	7923 000b 7927 000b                         #y..'y..

000bb4a8 <_ZTV7TwoWire>:
	...
   bb4b0:	79ed 000b 7a37 000b 7a0f 000b 79ef 000b     .y..7z...z...y..
   bb4c0:	7a17 000b 7a1f 000b 7a27 000b 7a2f 000b     .z...z..'z../z..
   bb4d0:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bb4e0:	2072 203d 6425 0000                         r = %d..

000bb4e8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb4f0:	7aed 000b 7b11 000b 7ffb 000b 7b1f 000b     .z...{.......{..
   bb500:	7af1 000b                                   .z..

000bb504 <_ZTV9TCPClient>:
	...
   bb50c:	6fe5 000b 6ffd 000b 7a69 000b 7a83 000b     .o...o..iz...z..
   bb51c:	7e91 000b 7aad 000b 7d07 000b 7ae1 000b     .~...z...}...z..
   bb52c:	7d99 000b 7bd9 000b 7d35 000b 7f45 000b     .}...{..5}..E...
   bb53c:	7cd5 000b 7ae3 000b 7a95 000b 7b25 000b     .|...z...z..%{..
   bb54c:	7bb9 000b                                   .{..

000bb550 <_ZTVN5spark9WiFiClassE>:
	...
   bb558:	805f 000b 8055 000b 804b 000b 8001 000b     _...U...K.......
   bb568:	803f 000b 8033 000b 80bd 000b 80c5 000b     ?...3...........
   bb578:	8027 000b 801f 000b 8015 000b 800b 000b     '...............
   bb588:	80f5 000b                                   ....

000bb58c <_ZTVN5spark12NetworkClassE>:
	...
   bb594:	807d 000b 8087 000b 8091 000b 809b 000b     }...............
   bb5a4:	80a5 000b 80b1 000b 80bd 000b 80c5 000b     ................
   bb5b4:	80cd 000b 80d9 000b 80e1 000b 80eb 000b     ................
   bb5c4:	80f5 000b                                   ....

000bb5c8 <_ZSt7nothrow>:
	...

000bb5c9 <_ZTSSt19_Sp_make_shared_tag>:
   bb5c9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bb5d9:	6572 5f64 6174 0067 0000                     red_tag....

000bb5e4 <_ZTISt19_Sp_make_shared_tag>:
   bb5e4:	b624 000b b5c9 000b                         $.......

000bb5ec <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb5ec:	b684 000b b5f8 000b b6a8 000b               ............

000bb5f8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb5f8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb608:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb618:	0045 0000                                   E...

000bb61c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb61c:	0000 0000 b5ec 000b 8401 000b 8415 000b     ................
   bb62c:	85a9 000b 85a9 000b 847f 000b 83c1 000b     ................
   bb63c:	8467 000b 8429 000b 83f3 000b               g...).......

000bb648 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb648:	b684 000b b654 000b b5ec 000b               ....T.......

000bb654 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb654:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb664:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb674:	666e 456f 0000 0000                         nfoE....

000bb67c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb67c:	0000 0000 b648 000b 84a9 000b 84bd 000b     ....H...........
   bb68c:	85a9 000b 85a9 000b 847f 000b 83c1 000b     ................
   bb69c:	857d 000b 8509 000b 84d1 000b               }...........

000bb6a8 <_ZTISt9type_info>:
   bb6a8:	b624 000b b6b0 000b                         $.......

000bb6b0 <_ZTSSt9type_info>:
   bb6b0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bb6c0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bb6d0:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bb6e0:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bb6f0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bb700:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bb710:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bb720:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bb730:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bb740:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bb750:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bb760 <fpi.1>:
   bb760:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bb770:	0000 0000                                   ....

000bb774 <fpinan.0>:
   bb774:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bb784:	0000 0000                                   ....

000bb788 <tinytens>:
   bb788:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bb798:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bb7a8:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   bb7b8:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bb7c8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bb7d8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bb7e8:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bb7f8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bb808:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bb818:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   bb828:	7472 6b6f 632e                               rtok.c.

000bb82f <_ctype_>:
   bb82f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb83f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb84f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb85f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb86f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb87f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb88f:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb89f:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb8af:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bb92f:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bb93f:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bb94f:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bb95f:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bb96f:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bb97f:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bb98f:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bb99f:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bb9af:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bb9bf:	6874 7865 632e 2e00                          thex.c...

000bb9c8 <_C_numeric_locale>:
   bb9c8:	b9c6 000b b164 000b d28c 2003 0043 4f50     ....d...... C.PO
   bb9d8:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bb9e8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bb9f8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bba08:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bba18:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bba28:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bba38:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bba48:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bba58:	0063 0000 0000 0000                         c.......

000bba60 <__mprec_bigtens>:
   bba60:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bba70:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bba80:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bba88 <__mprec_tens>:
   bba88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bba98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bbaa8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bbab8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bbac8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bbad8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bbae8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bbaf8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bbb08:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bbb18:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bbb28:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bbb38:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bbb48:	9db4 79d9 7843 44ea                         ...yCx.D

000bbb50 <p05.0>:
   bbb50:	0005 0000 0019 0000 007d 0000               ........}...

000bbb5c <link_const_variable_data_end>:
   bbb5c:	000b48f9 	.word	0x000b48f9
   bbb60:	000b5c91 	.word	0x000b5c91
   bbb64:	000b62fd 	.word	0x000b62fd
   bbb68:	000b6325 	.word	0x000b6325
   bbb6c:	000b6d29 	.word	0x000b6d29
   bbb70:	000b6e59 	.word	0x000b6e59
   bbb74:	000b6fd1 	.word	0x000b6fd1
   bbb78:	000b7011 	.word	0x000b7011
   bbb7c:	000b8069 	.word	0x000b8069
   bbb80:	000b81cd 	.word	0x000b81cd

000bbb84 <link_constructors_end>:
	...
