
c:/Users/mathi/Desktop/IOT/ElecPrice/target/4.0.0/argon/ElecPrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006500  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba520  000ba520  0000a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ba544  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003cd14  000ba548  0001cd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000018fc  2003cef8  2003cef8  0002cef8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ba728  000ba728  0002a728  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ba750  000ba750  0002a750  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00131641  00000000  00000000  0002a754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015614  00000000  00000000  0015bd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003fa9d  00000000  00000000  001713a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003150  00000000  00000000  001b0e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b380  00000000  00000000  001b3f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b705  00000000  00000000  001bf316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044948  00000000  00000000  001faa1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a132  00000000  00000000  0023f363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009584  00000000  00000000  00379498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fcec 	bl	b7a0e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fcf4 	bl	b7a2a <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003cd14 	.word	0x2003cd14
   b404c:	000ba548 	.word	0x000ba548
   b4050:	2003cef4 	.word	0x2003cef4
   b4054:	2003cef8 	.word	0x2003cef8
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fdd9 	bl	b5c18 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba4fc 	.word	0x000ba4fc
   b4080:	000ba520 	.word	0x000ba520

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 babe 	b.w	b4604 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9d5 	bl	b4438 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bd79 	b.w	b5b88 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 b9df 	b.w	b5458 <malloc>

000b409a <_Znaj>:
   b409a:	f001 b9dd 	b.w	b5458 <malloc>

000b409e <_ZdaPv>:
   b409e:	f001 b9e3 	b.w	b5468 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f001 b9e1 	b.w	b5468 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z13handle_sensorv>:
    }
    
}

void handle_sensor(void)
{
   b40b8:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40ba:	f000 ffb9 	bl	b5030 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta;
    unsigned long current_reading = millis();
    
    if ((delta = current_reading-last_read) > 100)
   b40be:	4908      	ldr	r1, [pc, #32]	; (b40e0 <_Z13handle_sensorv+0x28>)
   b40c0:	680b      	ldr	r3, [r1, #0]
   b40c2:	1ac3      	subs	r3, r0, r3
   b40c4:	2b64      	cmp	r3, #100	; 0x64
   b40c6:	d90a      	bls.n	b40de <_Z13handle_sensorv+0x26>
    {
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40c8:	4a06      	ldr	r2, [pc, #24]	; (b40e4 <_Z13handle_sensorv+0x2c>)
   b40ca:	fbb2 f3f3 	udiv	r3, r2, r3
   b40ce:	4a06      	ldr	r2, [pc, #24]	; (b40e8 <_Z13handle_sensorv+0x30>)
        last_read = current_reading;
   b40d0:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b40d2:	6013      	str	r3, [r2, #0]
        printer = true; // Just a debuging flag
   b40d4:	4a05      	ldr	r2, [pc, #20]	; (b40ec <_Z13handle_sensorv+0x34>)
   b40d6:	2301      	movs	r3, #1
   b40d8:	7013      	strb	r3, [r2, #0]
        transmit_value = true;
   b40da:	4a05      	ldr	r2, [pc, #20]	; (b40f0 <_Z13handle_sensorv+0x38>)
   b40dc:	7013      	strb	r3, [r2, #0]
    }
}
   b40de:	bd08      	pop	{r3, pc}
   b40e0:	2003d1ac 	.word	0x2003d1ac
   b40e4:	0036ee80 	.word	0x0036ee80
   b40e8:	2003cefc 	.word	0x2003cefc
   b40ec:	2003d211 	.word	0x2003d211
   b40f0:	2003e67d 	.word	0x2003e67d

000b40f4 <_Z8callbackPcPhj>:
{
   b40f4:	b508      	push	{r3, lr}
    if (!strcmp(topic,"power/prices"))
   b40f6:	4904      	ldr	r1, [pc, #16]	; (b4108 <_Z8callbackPcPhj+0x14>)
   b40f8:	f003 fcdd 	bl	b7ab6 <strcmp>
   b40fc:	b910      	cbnz	r0, b4104 <_Z8callbackPcPhj+0x10>
        work = true;
   b40fe:	4b03      	ldr	r3, [pc, #12]	; (b410c <_Z8callbackPcPhj+0x18>)
   b4100:	2201      	movs	r2, #1
   b4102:	701a      	strb	r2, [r3, #0]
}
   b4104:	bd08      	pop	{r3, pc}
   b4106:	bf00      	nop
   b4108:	000b9b60 	.word	0x000b9b60
   b410c:	2003e67e 	.word	0x2003e67e

000b4110 <_Z9myHandlerPKcS0_>:

void myHandler(const char *event, const char *data)
{
   b4110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    populate = false;
    rec_cnt++;
   b4114:	4e33      	ldr	r6, [pc, #204]	; (b41e4 <_Z9myHandlerPKcS0_+0xd4>)
    populate = false;
   b4116:	4d34      	ldr	r5, [pc, #208]	; (b41e8 <_Z9myHandlerPKcS0_+0xd8>)
   b4118:	2300      	movs	r3, #0
   b411a:	702b      	strb	r3, [r5, #0]
    rec_cnt++;
   b411c:	7833      	ldrb	r3, [r6, #0]
{
   b411e:	b085      	sub	sp, #20
    rec_cnt++;
   b4120:	3301      	adds	r3, #1
{
   b4122:	4680      	mov	r8, r0

    /* When transmission are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
    */
    int transmission_size = strlen(data);
   b4124:	4608      	mov	r0, r1
    rec_cnt++;
   b4126:	7033      	strb	r3, [r6, #0]
{
   b4128:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b412a:	f003 fcf4 	bl	b7b16 <strlen>
    
    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str,event);
   b412e:	4641      	mov	r1, r8
    int transmission_size = strlen(data);
   b4130:	4607      	mov	r7, r0
    strcpy(event_str,event);
   b4132:	a801      	add	r0, sp, #4
   b4134:	f003 fcc9 	bl	b7aca <strcpy>

    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "rec_data"
    strcpy(rec_data[atoi(strtok(event_str,"prices/"))],data);
   b4138:	492c      	ldr	r1, [pc, #176]	; (b41ec <_Z9myHandlerPKcS0_+0xdc>)
   b413a:	a801      	add	r0, sp, #4
   b413c:	f004 fb36 	bl	b87ac <strtok>
   b4140:	f003 fc4d 	bl	b79de <atoi>
   b4144:	eb00 2340 	add.w	r3, r0, r0, lsl #9
   b4148:	4829      	ldr	r0, [pc, #164]	; (b41f0 <_Z9myHandlerPKcS0_+0xe0>)
   b414a:	4621      	mov	r1, r4
   b414c:	4418      	add	r0, r3
   b414e:	f003 fcbc 	bl	b7aca <strcpy>
    
    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b4152:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   b4156:	d210      	bcs.n	b417a <_Z9myHandlerPKcS0_+0x6a>
    {
        populate = true;
   b4158:	2301      	movs	r3, #1
   b415a:	702b      	strb	r3, [r5, #0]
    }

    if (populate)
   b415c:	4c24      	ldr	r4, [pc, #144]	; (b41f0 <_Z9myHandlerPKcS0_+0xe0>)
    {
        // Concatenate all transmission into one string
        for (int i = 0; i <= rec_cnt; i++)
        {
            strcat(temp,rec_data[i]);
   b415e:	4b25      	ldr	r3, [pc, #148]	; (b41f4 <_Z9myHandlerPKcS0_+0xe4>)
{
   b4160:	2500      	movs	r5, #0
        for (int i = 0; i <= rec_cnt; i++)
   b4162:	7832      	ldrb	r2, [r6, #0]
   b4164:	42aa      	cmp	r2, r5
   b4166:	db0e      	blt.n	b4186 <_Z9myHandlerPKcS0_+0x76>
            strcat(temp,rec_data[i]);
   b4168:	4621      	mov	r1, r4
   b416a:	4618      	mov	r0, r3
   b416c:	f003 fc94 	bl	b7a98 <strcat>
        for (int i = 0; i <= rec_cnt; i++)
   b4170:	3501      	adds	r5, #1
            strcat(temp,rec_data[i]);
   b4172:	4603      	mov	r3, r0
        for (int i = 0; i <= rec_cnt; i++)
   b4174:	f204 2401 	addw	r4, r4, #513	; 0x201
   b4178:	e7f3      	b.n	b4162 <_Z9myHandlerPKcS0_+0x52>
    if (populate)
   b417a:	782b      	ldrb	r3, [r5, #0]
   b417c:	2b00      	cmp	r3, #0
   b417e:	d1ed      	bne.n	b415c <_Z9myHandlerPKcS0_+0x4c>
                range = i;  // Update range, such that the rest of program flow is aware of size
                break;      // Break the while loop
            }
        }
    }
}
   b4180:	b005      	add	sp, #20
   b4182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        token = strtok(temp, ",!");
   b4186:	491c      	ldr	r1, [pc, #112]	; (b41f8 <_Z9myHandlerPKcS0_+0xe8>)
   b4188:	481a      	ldr	r0, [pc, #104]	; (b41f4 <_Z9myHandlerPKcS0_+0xe4>)
   b418a:	4d1c      	ldr	r5, [pc, #112]	; (b41fc <_Z9myHandlerPKcS0_+0xec>)
        for (int i = 0; i < range; i++)
   b418c:	f8df 807c 	ldr.w	r8, [pc, #124]	; b420c <_Z9myHandlerPKcS0_+0xfc>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b4190:	f8df 907c 	ldr.w	r9, [pc, #124]	; b4210 <_Z9myHandlerPKcS0_+0x100>
            cost[i] = atof(token) / 1000;
   b4194:	4f1a      	ldr	r7, [pc, #104]	; (b4200 <_Z9myHandlerPKcS0_+0xf0>)
        token = strtok(temp, ",!");
   b4196:	f004 fb09 	bl	b87ac <strtok>
        for (int i = 0; i < range; i++)
   b419a:	2400      	movs	r4, #0
            cost[i] = atof(token) / 1000;
   b419c:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b419e:	f8d8 3000 	ldr.w	r3, [r8]
   b41a2:	42a3      	cmp	r3, r4
   b41a4:	ddec      	ble.n	b4180 <_Z9myHandlerPKcS0_+0x70>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b41a6:	4a17      	ldr	r2, [pc, #92]	; (b4204 <_Z9myHandlerPKcS0_+0xf4>)
   b41a8:	4917      	ldr	r1, [pc, #92]	; (b4208 <_Z9myHandlerPKcS0_+0xf8>)
   b41aa:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   b41ae:	f001 f973 	bl	b5498 <sscanf>
            token = strtok(NULL, ",!");
   b41b2:	4911      	ldr	r1, [pc, #68]	; (b41f8 <_Z9myHandlerPKcS0_+0xe8>)
   b41b4:	2000      	movs	r0, #0
   b41b6:	f004 faf9 	bl	b87ac <strtok>
            cost[i] = atof(token) / 1000;
   b41ba:	f003 fc0d 	bl	b79d8 <atof>
   b41be:	4632      	mov	r2, r6
   b41c0:	ec51 0b10 	vmov	r0, r1, d0
   b41c4:	463b      	mov	r3, r7
   b41c6:	f003 fa53 	bl	b7670 <__aeabi_ddiv>
   b41ca:	e8e5 0102 	strd	r0, r1, [r5], #8
            if((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b41ce:	490a      	ldr	r1, [pc, #40]	; (b41f8 <_Z9myHandlerPKcS0_+0xe8>)
   b41d0:	2000      	movs	r0, #0
   b41d2:	f004 faeb 	bl	b87ac <strtok>
   b41d6:	b910      	cbnz	r0, b41de <_Z9myHandlerPKcS0_+0xce>
                range = i;  // Update range, such that the rest of program flow is aware of size
   b41d8:	f8c8 4000 	str.w	r4, [r8]
                break;      // Break the while loop
   b41dc:	e7d0      	b.n	b4180 <_Z9myHandlerPKcS0_+0x70>
        for (int i = 0; i < range; i++)
   b41de:	3401      	adds	r4, #1
   b41e0:	e7dd      	b.n	b419e <_Z9myHandlerPKcS0_+0x8e>
   b41e2:	bf00      	nop
   b41e4:	2003d212 	.word	0x2003d212
   b41e8:	2003d210 	.word	0x2003d210
   b41ec:	000b9b6d 	.word	0x000b9b6d
   b41f0:	2003d213 	.word	0x2003d213
   b41f4:	2003dc78 	.word	0x2003dc78
   b41f8:	000b9b75 	.word	0x000b9b75
   b41fc:	2003cf68 	.word	0x2003cf68
   b4200:	408f4000 	.word	0x408f4000
   b4204:	2003d1a8 	.word	0x2003d1a8
   b4208:	000b9b78 	.word	0x000b9b78
   b420c:	2003cd14 	.word	0x2003cd14
   b4210:	2003d0e8 	.word	0x2003d0e8

000b4214 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4214:	b40e      	push	{r1, r2, r3}
   b4216:	b503      	push	{r0, r1, lr}
   b4218:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b421a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b421c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4220:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4222:	f001 fb78 	bl	b5916 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4226:	b002      	add	sp, #8
   b4228:	f85d eb04 	ldr.w	lr, [sp], #4
   b422c:	b003      	add	sp, #12
   b422e:	4770      	bx	lr

000b4230 <_Z9reconnectv>:
    // Wait 2 second
    delay(2000);
}

void reconnect(void)
{
   b4230:	b500      	push	{lr}
   b4232:	b089      	sub	sp, #36	; 0x24

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4234:	490e      	ldr	r1, [pc, #56]	; (b4270 <_Z9reconnectv+0x40>)
   b4236:	a804      	add	r0, sp, #16
   b4238:	f001 fa57 	bl	b56ea <_ZN6StringC1EPK19__FlashStringHelper>
    client.connect("sparkclient_" + String(Time.now()),"mqtt","mqtt");
   b423c:	f001 fc0f 	bl	b5a5e <_ZN9TimeClass3nowEv>
   b4240:	220a      	movs	r2, #10
   b4242:	4601      	mov	r1, r0
   b4244:	4668      	mov	r0, sp
   b4246:	f001 fa76 	bl	b5736 <_ZN6StringC1Elh>
   b424a:	4669      	mov	r1, sp
   b424c:	a804      	add	r0, sp, #16
   b424e:	f001 faa0 	bl	b5792 <_ZplRK15StringSumHelperRK6String>
   b4252:	4b08      	ldr	r3, [pc, #32]	; (b4274 <_Z9reconnectv+0x44>)
   b4254:	6801      	ldr	r1, [r0, #0]
   b4256:	4808      	ldr	r0, [pc, #32]	; (b4278 <_Z9reconnectv+0x48>)
   b4258:	461a      	mov	r2, r3
   b425a:	f000 fc7f 	bl	b4b5c <_ZN4MQTT7connectEPKcS1_S1_>
   b425e:	4668      	mov	r0, sp
   b4260:	f001 f9f8 	bl	b5654 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4264:	a804      	add	r0, sp, #16
   b4266:	f001 f9f5 	bl	b5654 <_ZN6StringD1Ev>
}
   b426a:	b009      	add	sp, #36	; 0x24
   b426c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4270:	000b9b8e 	.word	0x000b9b8e
   b4274:	000b9b9b 	.word	0x000b9b9b
   b4278:	2003cf00 	.word	0x2003cf00
   b427c:	00000000 	.word	0x00000000

000b4280 <_Z8calc_lowv>:
/** Purpose of the function is to identify the hours at which the highest and lowest cost are.
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
*/
void calc_low(void)
{
   b4280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4284:	ed2d 8b04 	vpush	{d8-d9}
    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value

    for (int i = 0; i < range; i++)
   b4288:	4b53      	ldr	r3, [pc, #332]	; (b43d8 <_Z8calc_lowv+0x158>)
   b428a:	f8df 8174 	ldr.w	r8, [pc, #372]	; b4400 <_Z8calc_lowv+0x180>
   b428e:	f8d3 b000 	ldr.w	fp, [r3]
    double last_small = 100; // Assign any absurdly high value
   b4292:	4f52      	ldr	r7, [pc, #328]	; (b43dc <_Z8calc_lowv+0x15c>)
    double last_big = 0;
   b4294:	ed9f 7b4c 	vldr	d7, [pc, #304]	; b43c8 <_Z8calc_lowv+0x148>
    for (int i = 0; i < range; i++)
   b4298:	46c2      	mov	sl, r8
   b429a:	f04f 0900 	mov.w	r9, #0
    double last_small = 100; // Assign any absurdly high value
   b429e:	2600      	movs	r6, #0
    double last_big = 0;
   b42a0:	eeb0 8a47 	vmov.f32	s16, s14
   b42a4:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < range; i++)
   b42a8:	45cb      	cmp	fp, r9
   b42aa:	dd16      	ble.n	b42da <_Z8calc_lowv+0x5a>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b42ac:	e8fa 4502 	ldrd	r4, r5, [sl], #8
   b42b0:	ec53 2b18 	vmov	r2, r3, d8
   b42b4:	4620      	mov	r0, r4
   b42b6:	4629      	mov	r1, r5
   b42b8:	f003 fb40 	bl	b793c <__aeabi_dcmpgt>
   b42bc:	b108      	cbz	r0, b42c2 <_Z8calc_lowv+0x42>
        {
            last_big = cost[i];
   b42be:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b42c2:	4632      	mov	r2, r6
   b42c4:	463b      	mov	r3, r7
   b42c6:	4620      	mov	r0, r4
   b42c8:	4629      	mov	r1, r5
   b42ca:	f003 fb19 	bl	b7900 <__aeabi_dcmplt>
   b42ce:	b108      	cbz	r0, b42d4 <_Z8calc_lowv+0x54>
        {
            last_small = cost[i];
   b42d0:	4626      	mov	r6, r4
   b42d2:	462f      	mov	r7, r5
    for (int i = 0; i < range; i++)
   b42d4:	f109 0901 	add.w	r9, r9, #1
   b42d8:	e7e6      	b.n	b42a8 <_Z8calc_lowv+0x28>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b42da:	4632      	mov	r2, r6
   b42dc:	463b      	mov	r3, r7
   b42de:	ec51 0b18 	vmov	r0, r1, d8
   b42e2:	f002 fee3 	bl	b70ac <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b42e6:	a33a      	add	r3, pc, #232	; (adr r3, b43d0 <_Z8calc_lowv+0x150>)
   b42e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42ec:	f003 f896 	bl	b741c <__aeabi_dmul>
   b42f0:	4632      	mov	r2, r6
   b42f2:	463b      	mov	r3, r7
   b42f4:	f002 fedc 	bl	b70b0 <__adddf3>
    
    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= range; i++)
   b42f8:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b42fa:	ec41 0b19 	vmov	d9, r0, r1
    {
        
        if (cost[i] < small_offset)
        {
            low_range_hour[idx] = cost_hour[i];
   b42fe:	f8df 9104 	ldr.w	r9, [pc, #260]	; b4404 <_Z8calc_lowv+0x184>
   b4302:	f8df a104 	ldr.w	sl, [pc, #260]	; b4408 <_Z8calc_lowv+0x188>
    int idx = 0;
   b4306:	462c      	mov	r4, r5
    for (int i = 0; i <= range; i++)
   b4308:	45ab      	cmp	fp, r5
   b430a:	db0d      	blt.n	b4328 <_Z8calc_lowv+0xa8>
        if (cost[i] < small_offset)
   b430c:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   b4310:	ec53 2b19 	vmov	r2, r3, d9
   b4314:	f003 faf4 	bl	b7900 <__aeabi_dcmplt>
   b4318:	b120      	cbz	r0, b4324 <_Z8calc_lowv+0xa4>
            low_range_hour[idx] = cost_hour[i];
   b431a:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   b431e:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
            
            idx++;
   b4322:	3401      	adds	r4, #1
    for (int i = 0; i <= range; i++)
   b4324:	3501      	adds	r5, #1
   b4326:	e7ef      	b.n	b4308 <_Z8calc_lowv+0x88>
        }
    }

    // Calculations have been done - clear flag
    populate = false;
   b4328:	4b2d      	ldr	r3, [pc, #180]	; (b43e0 <_Z8calc_lowv+0x160>)
   b432a:	2500      	movs	r5, #0
   b432c:	701d      	strb	r5, [r3, #0]
    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b432e:	f002 f825 	bl	b637c <_Z16_fetch_usbserialv>
   b4332:	ec53 2b18 	vmov	r2, r3, d8
   b4336:	492b      	ldr	r1, [pc, #172]	; (b43e4 <_Z8calc_lowv+0x164>)
   b4338:	f7ff ff6c 	bl	b4214 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b433c:	f002 f81e 	bl	b637c <_Z16_fetch_usbserialv>
   b4340:	4632      	mov	r2, r6
   b4342:	4929      	ldr	r1, [pc, #164]	; (b43e8 <_Z8calc_lowv+0x168>)
   b4344:	4e29      	ldr	r6, [pc, #164]	; (b43ec <_Z8calc_lowv+0x16c>)
   b4346:	463b      	mov	r3, r7
   b4348:	f7ff ff64 	bl	b4214 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b434c:	f002 f816 	bl	b637c <_Z16_fetch_usbserialv>
   b4350:	4927      	ldr	r1, [pc, #156]	; (b43f0 <_Z8calc_lowv+0x170>)
   b4352:	f7ff ff5f 	bl	b4214 <_ZN5Print6printfEPKcz>
    
    int i = 0;
    if (idx > 0)
   b4356:	b1e4      	cbz	r4, b4392 <_Z8calc_lowv+0x112>
   b4358:	6831      	ldr	r1, [r6, #0]
   b435a:	4a26      	ldr	r2, [pc, #152]	; (b43f4 <_Z8calc_lowv+0x174>)
    {
        while (i <= idx)
        {
            start_stop[cnt][0] = low_range_hour[i];
   b435c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; b4404 <_Z8calc_lowv+0x184>
   b4360:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    int i = 0;
   b4364:	462b      	mov	r3, r5
            start_stop[cnt][0] = low_range_hour[i];
   b4366:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   b436a:	6010      	str	r0, [r2, #0]
   b436c:	eb0c 0783 	add.w	r7, ip, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4370:	6838      	ldr	r0, [r7, #0]
   b4372:	f857 5f04 	ldr.w	r5, [r7, #4]!
   b4376:	3d01      	subs	r5, #1
   b4378:	42a8      	cmp	r0, r5
   b437a:	f103 0301 	add.w	r3, r3, #1
   b437e:	d0f7      	beq.n	b4370 <_Z8calc_lowv+0xf0>
            {
                i++;
            }
            
            start_stop[cnt][1] = low_range_hour[i]+1;
   b4380:	3001      	adds	r0, #1
        while (i <= idx)
   b4382:	42a3      	cmp	r3, r4
            start_stop[cnt][1] = low_range_hour[i]+1;
   b4384:	6050      	str	r0, [r2, #4]
            
            cnt++;
   b4386:	f101 0001 	add.w	r0, r1, #1
        while (i <= idx)
   b438a:	f102 0208 	add.w	r2, r2, #8
   b438e:	dd11      	ble.n	b43b4 <_Z8calc_lowv+0x134>
            i++;
        }
        cnt--;
   b4390:	6031      	str	r1, [r6, #0]
   b4392:	4c18      	ldr	r4, [pc, #96]	; (b43f4 <_Z8calc_lowv+0x174>)
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n",start_stop[z][0],start_stop[z][1]);
   b4394:	4f18      	ldr	r7, [pc, #96]	; (b43f8 <_Z8calc_lowv+0x178>)
            cnt++;
   b4396:	2500      	movs	r5, #0
    for (int z = 0; z < cnt; z++)
   b4398:	6833      	ldr	r3, [r6, #0]
   b439a:	42ab      	cmp	r3, r5
   b439c:	f104 0408 	add.w	r4, r4, #8
   b43a0:	dd0a      	ble.n	b43b8 <_Z8calc_lowv+0x138>
        Serial.printf("%02d to %02d\n",start_stop[z][0],start_stop[z][1]);
   b43a2:	f001 ffeb 	bl	b637c <_Z16_fetch_usbserialv>
   b43a6:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b43aa:	4639      	mov	r1, r7
   b43ac:	f7ff ff32 	bl	b4214 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b43b0:	3501      	adds	r5, #1
   b43b2:	e7f1      	b.n	b4398 <_Z8calc_lowv+0x118>
            cnt++;
   b43b4:	4601      	mov	r1, r0
   b43b6:	e7d6      	b.n	b4366 <_Z8calc_lowv+0xe6>
    }

    work = true;
   b43b8:	4b10      	ldr	r3, [pc, #64]	; (b43fc <_Z8calc_lowv+0x17c>)
   b43ba:	2201      	movs	r2, #1
   b43bc:	701a      	strb	r2, [r3, #0]
}
   b43be:	ecbd 8b04 	vpop	{d8-d9}
   b43c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b43c6:	bf00      	nop
	...
   b43d0:	33333333 	.word	0x33333333
   b43d4:	3fd33333 	.word	0x3fd33333
   b43d8:	2003cd14 	.word	0x2003cd14
   b43dc:	40590000 	.word	0x40590000
   b43e0:	2003d210 	.word	0x2003d210
   b43e4:	000b9ba0 	.word	0x000b9ba0
   b43e8:	000b9bbe 	.word	0x000b9bbe
   b43ec:	2003cf60 	.word	0x2003cf60
   b43f0:	000b9bdb 	.word	0x000b9bdb
   b43f4:	2003dc18 	.word	0x2003dc18
   b43f8:	000b9c19 	.word	0x000b9c19
   b43fc:	2003e67e 	.word	0x2003e67e
   b4400:	2003cf68 	.word	0x2003cf68
   b4404:	2003d1b0 	.word	0x2003d1b0
   b4408:	2003d0e8 	.word	0x2003d0e8

000b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b440c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b440e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4410:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4412:	b17c      	cbz	r4, b4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4414:	6863      	ldr	r3, [r4, #4]
   b4416:	3b01      	subs	r3, #1
   b4418:	6063      	str	r3, [r4, #4]
   b441a:	b95b      	cbnz	r3, b4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b441c:	6823      	ldr	r3, [r4, #0]
   b441e:	4620      	mov	r0, r4
   b4420:	689b      	ldr	r3, [r3, #8]
   b4422:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4424:	68a3      	ldr	r3, [r4, #8]
   b4426:	3b01      	subs	r3, #1
   b4428:	60a3      	str	r3, [r4, #8]
   b442a:	b91b      	cbnz	r3, b4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b442c:	6823      	ldr	r3, [r4, #0]
   b442e:	4620      	mov	r0, r4
   b4430:	68db      	ldr	r3, [r3, #12]
   b4432:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4434:	4628      	mov	r0, r5
   b4436:	bd38      	pop	{r3, r4, r5, pc}

000b4438 <loop>:
{
   b4438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (client.isConnected())
   b443c:	483f      	ldr	r0, [pc, #252]	; (b453c <loop+0x104>)
{
   b443e:	b08a      	sub	sp, #40	; 0x28
    if (client.isConnected())
   b4440:	f000 fa9c 	bl	b497c <_ZN4MQTT11isConnectedEv>
   b4444:	2800      	cmp	r0, #0
   b4446:	d043      	beq.n	b44d0 <loop+0x98>
        client.loop();
   b4448:	483c      	ldr	r0, [pc, #240]	; (b453c <loop+0x104>)
   b444a:	f000 fc6e 	bl	b4d2a <_ZN4MQTT4loopEv>
    if (printer) // Debugging flag set in interrupt handler
   b444e:	4c3c      	ldr	r4, [pc, #240]	; (b4540 <loop+0x108>)
   b4450:	7823      	ldrb	r3, [r4, #0]
   b4452:	b143      	cbz	r3, b4466 <loop+0x2e>
        Serial.printf("Light: %d\n",calc_power);
   b4454:	f001 ff92 	bl	b637c <_Z16_fetch_usbserialv>
   b4458:	4b3a      	ldr	r3, [pc, #232]	; (b4544 <loop+0x10c>)
   b445a:	493b      	ldr	r1, [pc, #236]	; (b4548 <loop+0x110>)
   b445c:	681a      	ldr	r2, [r3, #0]
   b445e:	f7ff fed9 	bl	b4214 <_ZN5Print6printfEPKcz>
        printer = false;
   b4462:	2300      	movs	r3, #0
   b4464:	7023      	strb	r3, [r4, #0]
    if (populate)
   b4466:	4b39      	ldr	r3, [pc, #228]	; (b454c <loop+0x114>)
   b4468:	781b      	ldrb	r3, [r3, #0]
   b446a:	b17b      	cbz	r3, b448c <loop+0x54>
        calc_low();
   b446c:	f7ff ff08 	bl	b4280 <_Z8calc_lowv>
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b4470:	f001 ff84 	bl	b637c <_Z16_fetch_usbserialv>
   b4474:	4604      	mov	r4, r0
   b4476:	f001 fb03 	bl	b5a80 <_ZN9TimeClass4hourEv>
   b447a:	4605      	mov	r5, r0
   b447c:	f001 fb0c 	bl	b5a98 <_ZN9TimeClass6minuteEv>
   b4480:	4933      	ldr	r1, [pc, #204]	; (b4550 <loop+0x118>)
   b4482:	4603      	mov	r3, r0
   b4484:	1caa      	adds	r2, r5, #2
   b4486:	4620      	mov	r0, r4
   b4488:	f7ff fec4 	bl	b4214 <_ZN5Print6printfEPKcz>
    if (work)
   b448c:	4e31      	ldr	r6, [pc, #196]	; (b4554 <loop+0x11c>)
   b448e:	7833      	ldrb	r3, [r6, #0]
   b4490:	2b00      	cmp	r3, #0
   b4492:	d037      	beq.n	b4504 <loop+0xcc>
        String data = "Cheap(ish) hours of the day: ";
   b4494:	4930      	ldr	r1, [pc, #192]	; (b4558 <loop+0x120>)
   b4496:	4c31      	ldr	r4, [pc, #196]	; (b455c <loop+0x124>)
        for (int z = 0; z < cnt; z++)
   b4498:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b4580 <loop+0x148>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b449c:	4f30      	ldr	r7, [pc, #192]	; (b4560 <loop+0x128>)
        String data = "Cheap(ish) hours of the day: ";
   b449e:	a802      	add	r0, sp, #8
   b44a0:	f001 f923 	bl	b56ea <_ZN6StringC1EPK19__FlashStringHelper>
        for (int z = 0; z < cnt; z++)
   b44a4:	2500      	movs	r5, #0
   b44a6:	f8d8 3000 	ldr.w	r3, [r8]
   b44aa:	42ab      	cmp	r3, r5
   b44ac:	f104 0408 	add.w	r4, r4, #8
   b44b0:	dd11      	ble.n	b44d6 <loop+0x9e>
            data += String::format("%02d to %02d, ",start_stop[z][0],start_stop[z][1]);
   b44b2:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b44b6:	4639      	mov	r1, r7
   b44b8:	a806      	add	r0, sp, #24
   b44ba:	f001 f977 	bl	b57ac <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b44be:	a906      	add	r1, sp, #24
   b44c0:	a802      	add	r0, sp, #8
   b44c2:	f001 f962 	bl	b578a <_ZN6String6concatERKS_>
   b44c6:	a806      	add	r0, sp, #24
   b44c8:	f001 f8c4 	bl	b5654 <_ZN6StringD1Ev>
        for (int z = 0; z < cnt; z++)
   b44cc:	3501      	adds	r5, #1
   b44ce:	e7ea      	b.n	b44a6 <loop+0x6e>
        reconnect();
   b44d0:	f7ff feae 	bl	b4230 <_Z9reconnectv>
   b44d4:	e7bb      	b.n	b444e <loop+0x16>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b44d6:	4b23      	ldr	r3, [pc, #140]	; (b4564 <loop+0x12c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b44d8:	9a02      	ldr	r2, [sp, #8]
   b44da:	781b      	ldrb	r3, [r3, #0]
   b44dc:	4922      	ldr	r1, [pc, #136]	; (b4568 <loop+0x130>)
   b44de:	f88d 3000 	strb.w	r3, [sp]
   b44e2:	a806      	add	r0, sp, #24
   b44e4:	233c      	movs	r3, #60	; 0x3c
   b44e6:	f001 fcf5 	bl	b5ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b44ea:	a807      	add	r0, sp, #28
   b44ec:	f7ff ff8e 	bl	b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        client.publish("prices", data);
   b44f0:	9a02      	ldr	r2, [sp, #8]
   b44f2:	491e      	ldr	r1, [pc, #120]	; (b456c <loop+0x134>)
   b44f4:	4811      	ldr	r0, [pc, #68]	; (b453c <loop+0x104>)
   b44f6:	f000 fbbc 	bl	b4c72 <_ZN4MQTT7publishEPKcS1_>
        work = false;
   b44fa:	2300      	movs	r3, #0
        String data = "Cheap(ish) hours of the day: ";
   b44fc:	a802      	add	r0, sp, #8
        work = false;
   b44fe:	7033      	strb	r3, [r6, #0]
        String data = "Cheap(ish) hours of the day: ";
   b4500:	f001 f8a8 	bl	b5654 <_ZN6StringD1Ev>
    if (transmit_value) // Did we receive a request for updated values
   b4504:	4c1a      	ldr	r4, [pc, #104]	; (b4570 <loop+0x138>)
   b4506:	7823      	ldrb	r3, [r4, #0]
   b4508:	b18b      	cbz	r3, b452e <loop+0xf6>
        Serial.printf("Received power/get\n");
   b450a:	f001 ff37 	bl	b637c <_Z16_fetch_usbserialv>
   b450e:	4919      	ldr	r1, [pc, #100]	; (b4574 <loop+0x13c>)
   b4510:	f7ff fe80 	bl	b4214 <_ZN5Print6printfEPKcz>
        sprintf(values,"%d", calc_power);
   b4514:	4b0b      	ldr	r3, [pc, #44]	; (b4544 <loop+0x10c>)
   b4516:	4918      	ldr	r1, [pc, #96]	; (b4578 <loop+0x140>)
   b4518:	681a      	ldr	r2, [r3, #0]
   b451a:	a806      	add	r0, sp, #24
   b451c:	f000 ffb4 	bl	b5488 <sprintf>
        client.publish("power",values);
   b4520:	4916      	ldr	r1, [pc, #88]	; (b457c <loop+0x144>)
   b4522:	4806      	ldr	r0, [pc, #24]	; (b453c <loop+0x104>)
   b4524:	aa06      	add	r2, sp, #24
   b4526:	f000 fba4 	bl	b4c72 <_ZN4MQTT7publishEPKcS1_>
        transmit_value = false;
   b452a:	2300      	movs	r3, #0
   b452c:	7023      	strb	r3, [r4, #0]
    delay(2000);
   b452e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   b4532:	b00a      	add	sp, #40	; 0x28
   b4534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(2000);
   b4538:	f001 bae4 	b.w	b5b04 <delay>
   b453c:	2003cf00 	.word	0x2003cf00
   b4540:	2003d211 	.word	0x2003d211
   b4544:	2003cefc 	.word	0x2003cefc
   b4548:	000b9c27 	.word	0x000b9c27
   b454c:	2003d210 	.word	0x2003d210
   b4550:	000b9c32 	.word	0x000b9c32
   b4554:	2003e67e 	.word	0x2003e67e
   b4558:	000b9c4c 	.word	0x000b9c4c
   b455c:	2003dc18 	.word	0x2003dc18
   b4560:	000b9c6a 	.word	0x000b9c6a
   b4564:	2003cef8 	.word	0x2003cef8
   b4568:	000b9c79 	.word	0x000b9c79
   b456c:	000b9b66 	.word	0x000b9b66
   b4570:	2003e67d 	.word	0x2003e67d
   b4574:	000b9c89 	.word	0x000b9c89
   b4578:	000b9d18 	.word	0x000b9d18
   b457c:	000b9c9d 	.word	0x000b9c9d
   b4580:	2003cf60 	.word	0x2003cf60

000b4584 <_Z8get_datai>:

void get_data(int day)
{
    rec_cnt = 0;
   b4584:	4a18      	ldr	r2, [pc, #96]	; (b45e8 <_Z8get_datai+0x64>)
   b4586:	2300      	movs	r3, #0
{
   b4588:	b510      	push	{r4, lr}
    rec_cnt = 0;
   b458a:	7013      	strb	r3, [r2, #0]
    range = 48;
   b458c:	4a17      	ldr	r2, [pc, #92]	; (b45ec <_Z8get_datai+0x68>)
   b458e:	2130      	movs	r1, #48	; 0x30
   b4590:	6011      	str	r1, [r2, #0]
    cnt = 0;
   b4592:	4a17      	ldr	r2, [pc, #92]	; (b45f0 <_Z8get_datai+0x6c>)
   b4594:	6013      	str	r3, [r2, #0]
    temp[0] = 0;
   b4596:	4a17      	ldr	r2, [pc, #92]	; (b45f4 <_Z8get_datai+0x70>)
{
   b4598:	b08c      	sub	sp, #48	; 0x30
    temp[0] = 0;
   b459a:	7013      	strb	r3, [r2, #0]
{
   b459c:	4604      	mov	r4, r0
    String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
   b459e:	f001 fa9b 	bl	b5ad8 <_ZN9TimeClass4yearEv>
   b45a2:	9005      	str	r0, [sp, #20]
   b45a4:	f001 fa90 	bl	b5ac8 <_ZN9TimeClass5monthEv>
   b45a8:	9004      	str	r0, [sp, #16]
   b45aa:	f001 fa69 	bl	b5a80 <_ZN9TimeClass4hourEv>
   b45ae:	1ca1      	adds	r1, r4, #2
   b45b0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b45b4:	e9cd 4100 	strd	r4, r1, [sp]
   b45b8:	9002      	str	r0, [sp, #8]
   b45ba:	490f      	ldr	r1, [pc, #60]	; (b45f8 <_Z8get_datai+0x74>)
   b45bc:	a808      	add	r0, sp, #32
   b45be:	f001 f8f5 	bl	b57ac <_ZN6String6formatEPKcz>
   b45c2:	4b0e      	ldr	r3, [pc, #56]	; (b45fc <_Z8get_datai+0x78>)
   b45c4:	9a08      	ldr	r2, [sp, #32]
   b45c6:	781b      	ldrb	r3, [r3, #0]
   b45c8:	490d      	ldr	r1, [pc, #52]	; (b4600 <_Z8get_datai+0x7c>)
   b45ca:	f88d 3000 	strb.w	r3, [sp]
   b45ce:	a806      	add	r0, sp, #24
   b45d0:	233c      	movs	r3, #60	; 0x3c
   b45d2:	f001 fc7f 	bl	b5ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b45d6:	a807      	add	r0, sp, #28
   b45d8:	f7ff ff18 	bl	b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b45dc:	a808      	add	r0, sp, #32
   b45de:	f001 f839 	bl	b5654 <_ZN6StringD1Ev>
    
     // Trigger the integration
    Particle.publish("elpriser", data, PRIVATE);
   b45e2:	b00c      	add	sp, #48	; 0x30
   b45e4:	bd10      	pop	{r4, pc}
   b45e6:	bf00      	nop
   b45e8:	2003d212 	.word	0x2003d212
   b45ec:	2003cd14 	.word	0x2003cd14
   b45f0:	2003cf60 	.word	0x2003cf60
   b45f4:	2003dc78 	.word	0x2003dc78
   b45f8:	000b9ca3 	.word	0x000b9ca3
   b45fc:	2003cef8 	.word	0x2003cef8
   b4600:	000b9cf6 	.word	0x000b9cf6

000b4604 <setup>:
{
   b4604:	b510      	push	{r4, lr}
   b4606:	b08a      	sub	sp, #40	; 0x28
   b4608:	f000 fd12 	bl	b5030 <HAL_Timer_Get_Milli_Seconds>
    last_read = millis(); //Give it an initial value
   b460c:	4b2b      	ldr	r3, [pc, #172]	; (b46bc <setup+0xb8>)
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b460e:	2400      	movs	r4, #0
    last_read = millis(); //Give it an initial value
   b4610:	6018      	str	r0, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                 //Setup pinmode for LDR pin
   b4612:	2103      	movs	r1, #3
   b4614:	2006      	movs	r0, #6
   b4616:	f002 fba1 	bl	b6d5c <pinMode>
    attachInterrupt(KW_SENSOR_PIN,handle_sensor,RISING);    //Attach interrup that will be called when rising
   b461a:	4929      	ldr	r1, [pc, #164]	; (b46c0 <setup+0xbc>)
   b461c:	9400      	str	r4, [sp, #0]
   b461e:	f04f 33ff 	mov.w	r3, #4294967295
   b4622:	2201      	movs	r2, #1
   b4624:	2006      	movs	r0, #6
   b4626:	f001 fed1 	bl	b63cc <_Z15attachInterrupttPFvvE13InterruptModeah>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b462a:	4623      	mov	r3, r4
   b462c:	4622      	mov	r2, r4
   b462e:	e9cd 4400 	strd	r4, r4, [sp]
   b4632:	4924      	ldr	r1, [pc, #144]	; (b46c4 <setup+0xc0>)
   b4634:	4824      	ldr	r0, [pc, #144]	; (b46c8 <setup+0xc4>)
   b4636:	f000 fef7 	bl	b5428 <spark_subscribe>
   b463a:	4623      	mov	r3, r4
   b463c:	4622      	mov	r2, r4
   b463e:	4923      	ldr	r1, [pc, #140]	; (b46cc <setup+0xc8>)
   b4640:	4823      	ldr	r0, [pc, #140]	; (b46d0 <setup+0xcc>)
   b4642:	e9cd 4400 	strd	r4, r4, [sp]
   b4646:	f000 feef 	bl	b5428 <spark_subscribe>
    get_data(Time.day());
   b464a:	f001 fa31 	bl	b5ab0 <_ZN9TimeClass3dayEv>
   b464e:	f7ff ff99 	bl	b4584 <_Z8get_datai>
    Serial.printf("Return value: %d",client.connect("sparkclient_" + String(Time.now()),"mqtt","mqtt"));
   b4652:	f001 fe93 	bl	b637c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4656:	491f      	ldr	r1, [pc, #124]	; (b46d4 <setup+0xd0>)
   b4658:	4604      	mov	r4, r0
   b465a:	a806      	add	r0, sp, #24
   b465c:	f001 f845 	bl	b56ea <_ZN6StringC1EPK19__FlashStringHelper>
   b4660:	f001 f9fd 	bl	b5a5e <_ZN9TimeClass3nowEv>
   b4664:	220a      	movs	r2, #10
   b4666:	4601      	mov	r1, r0
   b4668:	a802      	add	r0, sp, #8
   b466a:	f001 f864 	bl	b5736 <_ZN6StringC1Elh>
   b466e:	a902      	add	r1, sp, #8
   b4670:	a806      	add	r0, sp, #24
   b4672:	f001 f88e 	bl	b5792 <_ZplRK15StringSumHelperRK6String>
   b4676:	4b18      	ldr	r3, [pc, #96]	; (b46d8 <setup+0xd4>)
   b4678:	6801      	ldr	r1, [r0, #0]
   b467a:	4818      	ldr	r0, [pc, #96]	; (b46dc <setup+0xd8>)
   b467c:	461a      	mov	r2, r3
   b467e:	f000 fa6d 	bl	b4b5c <_ZN4MQTT7connectEPKcS1_S1_>
   b4682:	4917      	ldr	r1, [pc, #92]	; (b46e0 <setup+0xdc>)
   b4684:	4602      	mov	r2, r0
   b4686:	4620      	mov	r0, r4
   b4688:	f7ff fdc4 	bl	b4214 <_ZN5Print6printfEPKcz>
   b468c:	a802      	add	r0, sp, #8
   b468e:	f000 ffe1 	bl	b5654 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4692:	a806      	add	r0, sp, #24
   b4694:	f000 ffde 	bl	b5654 <_ZN6StringD1Ev>
    if (client.isConnected()) 
   b4698:	4810      	ldr	r0, [pc, #64]	; (b46dc <setup+0xd8>)
   b469a:	f000 f96f 	bl	b497c <_ZN4MQTT11isConnectedEv>
   b469e:	b158      	cbz	r0, b46b8 <setup+0xb4>
        client.publish("power/get","hello world");
   b46a0:	4a10      	ldr	r2, [pc, #64]	; (b46e4 <setup+0xe0>)
   b46a2:	4911      	ldr	r1, [pc, #68]	; (b46e8 <setup+0xe4>)
   b46a4:	480d      	ldr	r0, [pc, #52]	; (b46dc <setup+0xd8>)
   b46a6:	f000 fae4 	bl	b4c72 <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b46aa:	4910      	ldr	r1, [pc, #64]	; (b46ec <setup+0xe8>)
   b46ac:	480b      	ldr	r0, [pc, #44]	; (b46dc <setup+0xd8>)
}
   b46ae:	b00a      	add	sp, #40	; 0x28
   b46b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        client.subscribe("power/prices");
   b46b4:	f000 bc81 	b.w	b4fba <_ZN4MQTT9subscribeEPKc>
}
   b46b8:	b00a      	add	sp, #40	; 0x28
   b46ba:	bd10      	pop	{r4, pc}
   b46bc:	2003d1ac 	.word	0x2003d1ac
   b46c0:	000b40b9 	.word	0x000b40b9
   b46c4:	000b4111 	.word	0x000b4111
   b46c8:	000b9b66 	.word	0x000b9b66
   b46cc:	000b46f1 	.word	0x000b46f1
   b46d0:	000b9cff 	.word	0x000b9cff
   b46d4:	000b9b8e 	.word	0x000b9b8e
   b46d8:	000b9b9b 	.word	0x000b9b9b
   b46dc:	2003cf00 	.word	0x2003cf00
   b46e0:	000b9d0a 	.word	0x000b9d0a
   b46e4:	000b9d1b 	.word	0x000b9d1b
   b46e8:	000b9d27 	.word	0x000b9d27
   b46ec:	000b9b60 	.word	0x000b9b60

000b46f0 <_Z14myPriceHandlerPKcS0_>:
{
   b46f0:	b508      	push	{r3, lr}
    get_data(Time.day());
   b46f2:	f001 f9dd 	bl	b5ab0 <_ZN9TimeClass3dayEv>
}
   b46f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    get_data(Time.day());
   b46fa:	f7ff bf43 	b.w	b4584 <_Z8get_datai>
	...

000b4700 <_GLOBAL__sub_I_cost>:
   b4700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
   b4702:	4b0a      	ldr	r3, [pc, #40]	; (b472c <_GLOBAL__sub_I_cost+0x2c>)
MQTT client("192.168.0.103", PORT, 512, 30, callback);
   b4704:	490a      	ldr	r1, [pc, #40]	; (b4730 <_GLOBAL__sub_I_cost+0x30>)
   b4706:	480b      	ldr	r0, [pc, #44]	; (b4734 <_GLOBAL__sub_I_cost+0x34>)
   b4708:	2201      	movs	r2, #1
   b470a:	701a      	strb	r2, [r3, #0]
   b470c:	2300      	movs	r3, #0
   b470e:	9302      	str	r3, [sp, #8]
   b4710:	4b09      	ldr	r3, [pc, #36]	; (b4738 <_GLOBAL__sub_I_cost+0x38>)
   b4712:	9301      	str	r3, [sp, #4]
   b4714:	231e      	movs	r3, #30
   b4716:	9300      	str	r3, [sp, #0]
   b4718:	f240 725b 	movw	r2, #1883	; 0x75b
   b471c:	f44f 7300 	mov.w	r3, #512	; 0x200
   b4720:	f000 f850 	bl	b47c4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
   b4724:	b005      	add	sp, #20
   b4726:	f85d fb04 	ldr.w	pc, [sp], #4
   b472a:	bf00      	nop
   b472c:	2003cef8 	.word	0x2003cef8
   b4730:	000b9d31 	.word	0x000b9d31
   b4734:	2003cf00 	.word	0x2003cf00
   b4738:	000b40f5 	.word	0x000b40f5

000b473c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b473c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4740:	b510      	push	{r4, lr}
   b4742:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4744:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4746:	b113      	cbz	r3, b474e <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4748:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b474a:	f000 fc91 	bl	b5070 <os_mutex_lock>
#endif
#endif
#endif
        }
   b474e:	4620      	mov	r0, r4
   b4750:	bd10      	pop	{r4, pc}

000b4752 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b4752:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4754:	6803      	ldr	r3, [r0, #0]
   b4756:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b475a:	4604      	mov	r4, r0
            if (mqtt->thread)
   b475c:	b112      	cbz	r2, b4764 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b475e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4760:	f000 fc8e 	bl	b5080 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4764:	4620      	mov	r0, r4
   b4766:	bd10      	pop	{r4, pc}

000b4768 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b476a:	461f      	mov	r7, r3
   b476c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4770:	4604      	mov	r4, r0
   b4772:	460d      	mov	r5, r1
   b4774:	4616      	mov	r6, r2
    if (thread) {
   b4776:	b12b      	cbz	r3, b4784 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4778:	2301      	movs	r3, #1
   b477a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b477e:	3058      	adds	r0, #88	; 0x58
   b4780:	f000 fc6e 	bl	b5060 <os_mutex_create>
    }
    this->callback = callback;
   b4784:	9b08      	ldr	r3, [sp, #32]
   b4786:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4788:	2300      	movs	r3, #0
   b478a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b478c:	b106      	cbz	r6, b4790 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b478e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4790:	b125      	cbz	r5, b479c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b4792:	4629      	mov	r1, r5
   b4794:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4798:	f000 ffbb 	bl	b5712 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b479c:	9b06      	ldr	r3, [sp, #24]
   b479e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b47a0:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b47a2:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b47a4:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b47a8:	2bff      	cmp	r3, #255	; 0xff
   b47aa:	bfb8      	it	lt
   b47ac:	23ff      	movlt	r3, #255	; 0xff
   b47ae:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b47b2:	b108      	cbz	r0, b47b8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b47b4:	f7ff fc73 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b47b8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b47bc:	f7ff fc6d 	bl	b409a <_Znaj>
   b47c0:	61e0      	str	r0, [r4, #28]
}
   b47c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47c4 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b47c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b47c8:	4604      	mov	r4, r0
            bool thread) {
   b47ca:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b47cc:	4617      	mov	r7, r2
   b47ce:	4698      	mov	r8, r3
   b47d0:	460e      	mov	r6, r1
            bool thread) {
   b47d2:	f002 f981 	bl	b6ad8 <_ZN9TCPClientC1Ev>
   b47d6:	490d      	ldr	r1, [pc, #52]	; (b480c <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b47d8:	61e5      	str	r5, [r4, #28]
   b47da:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b47de:	f000 ff84 	bl	b56ea <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b47e2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b47e6:	9303      	str	r3, [sp, #12]
   b47e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b47ea:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b47ec:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b47f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b47f2:	9300      	str	r3, [sp, #0]
   b47f4:	4620      	mov	r0, r4
            bool thread) {
   b47f6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b47fa:	463b      	mov	r3, r7
   b47fc:	462a      	mov	r2, r5
   b47fe:	4631      	mov	r1, r6
   b4800:	f7ff ffb2 	bl	b4768 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4804:	4620      	mov	r0, r4
   b4806:	b004      	add	sp, #16
   b4808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b480c:	000b9c18 	.word	0x000b9c18

000b4810 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4810:	b510      	push	{r4, lr}
   b4812:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4814:	4620      	mov	r0, r4
   b4816:	f002 f8bb 	bl	b6990 <_ZN9TCPClient9availableEv>
   b481a:	2800      	cmp	r0, #0
   b481c:	d0fa      	beq.n	b4814 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b481e:	4620      	mov	r0, r4
   b4820:	f001 fec4 	bl	b65ac <_ZN9TCPClient4readEv>
}
   b4824:	b2c0      	uxtb	r0, r0
   b4826:	bd10      	pop	{r4, pc}

000b4828 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b482c:	4605      	mov	r5, r0
   b482e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4830:	f7ff ffee 	bl	b4810 <_ZN4MQTT8readByteEv>
   b4834:	69eb      	ldr	r3, [r5, #28]
   b4836:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4838:	69eb      	ldr	r3, [r5, #28]
   b483a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b483e:	f04f 0901 	mov.w	r9, #1
   b4842:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4846:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4848:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b484a:	4628      	mov	r0, r5
   b484c:	f7ff ffe0 	bl	b4810 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4850:	4626      	mov	r6, r4
   b4852:	69eb      	ldr	r3, [r5, #28]
   b4854:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4856:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b485a:	fb13 f309 	smulbb	r3, r3, r9
   b485e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4860:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b4862:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b4864:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b4866:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4868:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b486c:	d4ed      	bmi.n	b484a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b486e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4870:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b4874:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4878:	d11e      	bne.n	b48b8 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b487a:	4628      	mov	r0, r5
   b487c:	f7ff ffc8 	bl	b4810 <_ZN4MQTT8readByteEv>
   b4880:	69eb      	ldr	r3, [r5, #28]
   b4882:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b4884:	4628      	mov	r0, r5
   b4886:	f7ff ffc3 	bl	b4810 <_ZN4MQTT8readByteEv>
   b488a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b488c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b488e:	b2b6      	uxth	r6, r6
   b4890:	69eb      	ldr	r3, [r5, #28]
   b4892:	b2a4      	uxth	r4, r4
   b4894:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b4896:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4898:	b2b6      	uxth	r6, r6
   b489a:	42be      	cmp	r6, r7
   b489c:	d20e      	bcs.n	b48bc <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b489e:	4628      	mov	r0, r5
   b48a0:	f7ff ffb6 	bl	b4810 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b48a4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b48a8:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b48aa:	bf84      	itt	hi
   b48ac:	69eb      	ldrhi	r3, [r5, #28]
   b48ae:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b48b0:	3401      	adds	r4, #1
   b48b2:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b48b4:	3601      	adds	r6, #1
   b48b6:	e7ef      	b.n	b4898 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b48b8:	2600      	movs	r6, #0
   b48ba:	e7ed      	b.n	b4898 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b48bc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b48c0:	42a3      	cmp	r3, r4
   b48c2:	bf2c      	ite	cs
   b48c4:	4620      	movcs	r0, r4
   b48c6:	2000      	movcc	r0, #0
   b48c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b48cc <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b48cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b48d0:	4615      	mov	r5, r2
   b48d2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b48d4:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b48d6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b48d8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b48da:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b48dc:	a802      	add	r0, sp, #8
        digit = len % 128;
   b48de:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b48e2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b48e6:	f103 0401 	add.w	r4, r3, #1
   b48ea:	4403      	add	r3, r0
            digit |= 0x80;
   b48ec:	bf88      	it	hi
   b48ee:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b48f2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b48f6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b48fa:	b2e4      	uxtb	r4, r4
   b48fc:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4900:	d81e      	bhi.n	b4940 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b4902:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b4906:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b490a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b490c:	4622      	mov	r2, r4
   b490e:	a901      	add	r1, sp, #4
   b4910:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4912:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4916:	f003 f87a 	bl	b7a0e <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b491a:	1c72      	adds	r2, r6, #1
   b491c:	4422      	add	r2, r4
   b491e:	4641      	mov	r1, r8
   b4920:	4638      	mov	r0, r7
   b4922:	f001 fe2e 	bl	b6582 <_ZN9TCPClient5writeEPKhj>
   b4926:	4605      	mov	r5, r0
   b4928:	f000 fb82 	bl	b5030 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b492c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b492e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4930:	4432      	add	r2, r6
   b4932:	b2a8      	uxth	r0, r5
}
   b4934:	1a13      	subs	r3, r2, r0
   b4936:	4258      	negs	r0, r3
   b4938:	4158      	adcs	r0, r3
   b493a:	b002      	add	sp, #8
   b493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4940:	4623      	mov	r3, r4
   b4942:	e7ca      	b.n	b48da <_ZN4MQTT5writeEhPht+0xe>

000b4944 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4944:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4946:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4948:	4605      	mov	r5, r0
    pos += 2;
   b494a:	b298      	uxth	r0, r3
   b494c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b494e:	5cce      	ldrb	r6, [r1, r3]
   b4950:	b29c      	uxth	r4, r3
   b4952:	b156      	cbz	r6, b496a <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4954:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4958:	4584      	cmp	ip, r0
   b495a:	f103 0701 	add.w	r7, r3, #1
   b495e:	d904      	bls.n	b496a <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b4960:	1c44      	adds	r4, r0, #1
   b4962:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b4964:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b4966:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4968:	e7f1      	b.n	b494e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b496a:	b299      	uxth	r1, r3
   b496c:	1a41      	subs	r1, r0, r1
   b496e:	440a      	add	r2, r1
   b4970:	0a21      	lsrs	r1, r4, #8
   b4972:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4976:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b497a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b497c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b497c:	b538      	push	{r3, r4, r5, lr}
   b497e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4980:	f001 ff28 	bl	b67d4 <_ZN9TCPClient9connectedEv>
   b4984:	2800      	cmp	r0, #0
   b4986:	bf14      	ite	ne
   b4988:	2501      	movne	r5, #1
   b498a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b498c:	d102      	bne.n	b4994 <_ZN4MQTT11isConnectedEv+0x18>
   b498e:	4620      	mov	r0, r4
   b4990:	f002 f858 	bl	b6a44 <_ZN9TCPClient4stopEv>
    return rc;
}
   b4994:	4628      	mov	r0, r5
   b4996:	bd38      	pop	{r3, r4, r5, pc}

000b4998 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b499c:	b088      	sub	sp, #32
   b499e:	4604      	mov	r4, r0
   b49a0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b49a4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b49a8:	4689      	mov	r9, r1
   b49aa:	4617      	mov	r7, r2
   b49ac:	461e      	mov	r6, r3
    if (!isConnected()) {
   b49ae:	f7ff ffe5 	bl	b497c <_ZN4MQTT11isConnectedEv>
   b49b2:	4605      	mov	r5, r0
   b49b4:	2800      	cmp	r0, #0
   b49b6:	f040 80cd 	bne.w	b4b54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b49ba:	4621      	mov	r1, r4
   b49bc:	a801      	add	r0, sp, #4
   b49be:	f7ff febd 	bl	b473c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b49c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b49c4:	2900      	cmp	r1, #0
   b49c6:	f040 8088 	bne.w	b4ada <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b49ca:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b49ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b49d0:	462b      	mov	r3, r5
   b49d2:	4620      	mov	r0, r4
   b49d4:	f001 fe80 	bl	b66d8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b49d8:	2800      	cmp	r0, #0
   b49da:	d07a      	beq.n	b4ad2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b49dc:	2301      	movs	r3, #1
   b49de:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b49e0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b49e4:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b49e6:	2b04      	cmp	r3, #4
   b49e8:	4b5b      	ldr	r3, [pc, #364]	; (b4b58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b49ea:	f040 8081 	bne.w	b4af0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b49ee:	6818      	ldr	r0, [r3, #0]
   b49f0:	8899      	ldrh	r1, [r3, #4]
   b49f2:	799b      	ldrb	r3, [r3, #6]
   b49f4:	f8ad 100c 	strh.w	r1, [sp, #12]
   b49f8:	f88d 300e 	strb.w	r3, [sp, #14]
   b49fc:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b49fe:	f8c2 0005 	str.w	r0, [r2, #5]
   b4a02:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4a06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4a0a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4a0e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4a10:	230c      	movs	r3, #12
            if (willTopic) {
   b4a12:	f1b8 0f00 	cmp.w	r8, #0
   b4a16:	f000 8081 	beq.w	b4b1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4a1a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b4a1e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4a22:	0140      	lsls	r0, r0, #5
   b4a24:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4a28:	f040 0006 	orr.w	r0, r0, #6
   b4a2c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b4a2e:	f1ba 0f00 	cmp.w	sl, #0
   b4a32:	d101      	bne.n	b4a38 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4a34:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4a38:	b11f      	cbz	r7, b4a42 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4a3a:	2e00      	cmp	r6, #0
   b4a3c:	d170      	bne.n	b4b20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b4a3e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4a42:	69e2      	ldr	r2, [r4, #28]
   b4a44:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4a46:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4a48:	69e1      	ldr	r1, [r4, #28]
   b4a4a:	1c58      	adds	r0, r3, #1
   b4a4c:	1212      	asrs	r2, r2, #8
   b4a4e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b4a50:	1c9a      	adds	r2, r3, #2
   b4a52:	69e1      	ldr	r1, [r4, #28]
   b4a54:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4a56:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4a58:	3303      	adds	r3, #3
   b4a5a:	69e2      	ldr	r2, [r4, #28]
   b4a5c:	4649      	mov	r1, r9
   b4a5e:	4620      	mov	r0, r4
   b4a60:	f7ff ff70 	bl	b4944 <_ZN4MQTT11writeStringEPKcPht>
   b4a64:	4603      	mov	r3, r0
            if (willTopic) {
   b4a66:	f1b8 0f00 	cmp.w	r8, #0
   b4a6a:	d00b      	beq.n	b4a84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4a6c:	69e2      	ldr	r2, [r4, #28]
   b4a6e:	4641      	mov	r1, r8
   b4a70:	4620      	mov	r0, r4
   b4a72:	f7ff ff67 	bl	b4944 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b4a76:	69e2      	ldr	r2, [r4, #28]
   b4a78:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4a7a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4a7c:	4620      	mov	r0, r4
   b4a7e:	f7ff ff61 	bl	b4944 <_ZN4MQTT11writeStringEPKcPht>
   b4a82:	4603      	mov	r3, r0
            if(user != NULL) {
   b4a84:	b167      	cbz	r7, b4aa0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b4a86:	69e2      	ldr	r2, [r4, #28]
   b4a88:	4639      	mov	r1, r7
   b4a8a:	4620      	mov	r0, r4
   b4a8c:	f7ff ff5a 	bl	b4944 <_ZN4MQTT11writeStringEPKcPht>
   b4a90:	4603      	mov	r3, r0
                if(pass != NULL) {
   b4a92:	b12e      	cbz	r6, b4aa0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b4a94:	69e2      	ldr	r2, [r4, #28]
   b4a96:	4631      	mov	r1, r6
   b4a98:	4620      	mov	r0, r4
   b4a9a:	f7ff ff53 	bl	b4944 <_ZN4MQTT11writeStringEPKcPht>
   b4a9e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b4aa0:	3b05      	subs	r3, #5
   b4aa2:	69e2      	ldr	r2, [r4, #28]
   b4aa4:	b29b      	uxth	r3, r3
   b4aa6:	2110      	movs	r1, #16
   b4aa8:	4620      	mov	r0, r4
   b4aaa:	f7ff ff0f 	bl	b48cc <_ZN4MQTT5writeEhPht>
   b4aae:	f000 fabf 	bl	b5030 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4ab2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4ab6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4aba:	4620      	mov	r0, r4
   b4abc:	f001 ff68 	bl	b6990 <_ZN9TCPClient9availableEv>
   b4ac0:	bb88      	cbnz	r0, b4b26 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b4ac2:	f000 fab5 	bl	b5030 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4ac8:	1ac0      	subs	r0, r0, r3
   b4aca:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4acc:	4373      	muls	r3, r6
   b4ace:	4298      	cmp	r0, r3
   b4ad0:	d9f3      	bls.n	b4aba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b4ad2:	4620      	mov	r0, r4
   b4ad4:	f001 ffb6 	bl	b6a44 <_ZN9TCPClient4stopEv>
   b4ad8:	e035      	b.n	b4b46 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4ada:	a802      	add	r0, sp, #8
   b4adc:	f001 fbe4 	bl	b62a8 <_ZN9IPAddressC1EPKh>
   b4ae0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4ae4:	462b      	mov	r3, r5
   b4ae6:	a902      	add	r1, sp, #8
   b4ae8:	4620      	mov	r0, r4
   b4aea:	f001 fed5 	bl	b6898 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4aee:	e773      	b.n	b49d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4af0:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4af4:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4af8:	7bdb      	ldrb	r3, [r3, #15]
   b4afa:	f10d 0c08 	add.w	ip, sp, #8
   b4afe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b4b02:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b4b06:	ab02      	add	r3, sp, #8
   b4b08:	cb03      	ldmia	r3!, {r0, r1}
   b4b0a:	f8c2 0005 	str.w	r0, [r2, #5]
   b4b0e:	f8c2 1009 	str.w	r1, [r2, #9]
   b4b12:	f89c 3000 	ldrb.w	r3, [ip]
   b4b16:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b4b18:	230e      	movs	r3, #14
   b4b1a:	e77a      	b.n	b4a12 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b4b1c:	2002      	movs	r0, #2
   b4b1e:	e786      	b.n	b4a2e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b4b20:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4b24:	e78d      	b.n	b4a42 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4b26:	a902      	add	r1, sp, #8
   b4b28:	4620      	mov	r0, r4
   b4b2a:	f7ff fe7d 	bl	b4828 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b4b2e:	2804      	cmp	r0, #4
   b4b30:	d1cf      	bne.n	b4ad2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b4b32:	69e3      	ldr	r3, [r4, #28]
   b4b34:	78de      	ldrb	r6, [r3, #3]
   b4b36:	2e00      	cmp	r6, #0
   b4b38:	d1cb      	bne.n	b4ad2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b4b3a:	f000 fa79 	bl	b5030 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b4b3e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b4b40:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b4b42:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4b46:	a801      	add	r0, sp, #4
   b4b48:	f7ff fe03 	bl	b4752 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4b4c:	4628      	mov	r0, r5
   b4b4e:	b008      	add	sp, #32
   b4b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b4b54:	2500      	movs	r5, #0
   b4b56:	e7f9      	b.n	b4b4c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4b58:	000b9d3f 	.word	0x000b9d3f

000b4b5c <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4b5c:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4b5e:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b4b62:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b4b64:	2401      	movs	r4, #1
   b4b66:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b4b6a:	2400      	movs	r4, #0
   b4b6c:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b4b70:	e9cd 4400 	strd	r4, r4, [sp]
   b4b74:	f7ff ff10 	bl	b4998 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b4b78:	b006      	add	sp, #24
   b4b7a:	bd10      	pop	{r4, pc}

000b4b7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b80:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b4b84:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b4b88:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b4b8c:	4604      	mov	r4, r0
   b4b8e:	468b      	mov	fp, r1
   b4b90:	4616      	mov	r6, r2
   b4b92:	461f      	mov	r7, r3
    if (isConnected()) {
   b4b94:	f7ff fef2 	bl	b497c <_ZN4MQTT11isConnectedEv>
   b4b98:	4682      	mov	sl, r0
   b4b9a:	2800      	cmp	r0, #0
   b4b9c:	d051      	beq.n	b4c42 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b4b9e:	4621      	mov	r1, r4
   b4ba0:	a801      	add	r0, sp, #4
   b4ba2:	f7ff fdcb 	bl	b473c <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b4ba6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b4baa:	69e0      	ldr	r0, [r4, #28]
   b4bac:	2100      	movs	r1, #0
   b4bae:	f002 ff3c 	bl	b7a2a <memset>
        length = writeString(topic, buffer, length);
   b4bb2:	2305      	movs	r3, #5
   b4bb4:	69e2      	ldr	r2, [r4, #28]
   b4bb6:	4659      	mov	r1, fp
   b4bb8:	4620      	mov	r0, r4
   b4bba:	f7ff fec3 	bl	b4944 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4bbe:	1e6b      	subs	r3, r5, #1
   b4bc0:	2b01      	cmp	r3, #1
   b4bc2:	d815      	bhi.n	b4bf0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4bc4:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4bc6:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4bc8:	3101      	adds	r1, #1
   b4bca:	b289      	uxth	r1, r1
   b4bcc:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4bce:	0a09      	lsrs	r1, r1, #8
   b4bd0:	5419      	strb	r1, [r3, r0]
   b4bd2:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4bd4:	69e3      	ldr	r3, [r4, #28]
   b4bd6:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4bd8:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4bda:	3002      	adds	r0, #2
   b4bdc:	5499      	strb	r1, [r3, r2]
   b4bde:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4be0:	f1b8 0f00 	cmp.w	r8, #0
   b4be4:	d004      	beq.n	b4bf0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b4be6:	8c23      	ldrh	r3, [r4, #32]
   b4be8:	1c5a      	adds	r2, r3, #1
   b4bea:	8422      	strh	r2, [r4, #32]
   b4bec:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4bf0:	2100      	movs	r1, #0
   b4bf2:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4bf4:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b4bf6:	69e2      	ldr	r2, [r4, #28]
   b4bf8:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4bfa:	d90a      	bls.n	b4c12 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4bfc:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4c00:	459c      	cmp	ip, r3
   b4c02:	d906      	bls.n	b4c12 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4c04:	f816 c001 	ldrb.w	ip, [r6, r1]
   b4c08:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4c0c:	3101      	adds	r1, #1
   b4c0e:	b289      	uxth	r1, r1
   b4c10:	e7ef      	b.n	b4bf2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b4c12:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b4c16:	2900      	cmp	r1, #0
   b4c18:	bf0c      	ite	eq
   b4c1a:	2130      	moveq	r1, #48	; 0x30
   b4c1c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b4c1e:	f1b9 0f00 	cmp.w	r9, #0
   b4c22:	d001      	beq.n	b4c28 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4c24:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b4c28:	2d02      	cmp	r5, #2
   b4c2a:	d10e      	bne.n	b4c4a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b4c2c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b4c30:	3b05      	subs	r3, #5
   b4c32:	b29b      	uxth	r3, r3
   b4c34:	4620      	mov	r0, r4
   b4c36:	f7ff fe49 	bl	b48cc <_ZN4MQTT5writeEhPht>
   b4c3a:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4c3c:	a801      	add	r0, sp, #4
   b4c3e:	f7ff fd88 	bl	b4752 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4c42:	4650      	mov	r0, sl
   b4c44:	b003      	add	sp, #12
   b4c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b4c4a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b4c4c:	bf08      	it	eq
   b4c4e:	f041 0102 	orreq.w	r1, r1, #2
   b4c52:	e7ed      	b.n	b4c30 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b4c54 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b4c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b4c56:	9c08      	ldr	r4, [sp, #32]
   b4c58:	9403      	str	r4, [sp, #12]
   b4c5a:	2400      	movs	r4, #0
   b4c5c:	9402      	str	r4, [sp, #8]
   b4c5e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b4c62:	9401      	str	r4, [sp, #4]
   b4c64:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b4c68:	9400      	str	r4, [sp, #0]
   b4c6a:	f7ff ff87 	bl	b4b7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b4c6e:	b004      	add	sp, #16
   b4c70:	bd10      	pop	{r4, pc}

000b4c72 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b4c72:	b530      	push	{r4, r5, lr}
   b4c74:	b087      	sub	sp, #28
   b4c76:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4c78:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b4c7a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b4c7c:	9204      	str	r2, [sp, #16]
   b4c7e:	f002 ff4a 	bl	b7b16 <strlen>
   b4c82:	2500      	movs	r5, #0
   b4c84:	4603      	mov	r3, r0
   b4c86:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4c8a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b4c8e:	9500      	str	r5, [sp, #0]
   b4c90:	4620      	mov	r0, r4
   b4c92:	f7ff ffdf 	bl	b4c54 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b4c96:	b007      	add	sp, #28
   b4c98:	bd30      	pop	{r4, r5, pc}

000b4c9a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b4c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4c9c:	4604      	mov	r4, r0
   b4c9e:	460e      	mov	r6, r1
    if (isConnected()) {
   b4ca0:	f7ff fe6c 	bl	b497c <_ZN4MQTT11isConnectedEv>
   b4ca4:	4605      	mov	r5, r0
   b4ca6:	b1c8      	cbz	r0, b4cdc <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b4ca8:	4621      	mov	r1, r4
   b4caa:	a801      	add	r0, sp, #4
   b4cac:	f7ff fd46 	bl	b473c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b4cb0:	69e3      	ldr	r3, [r4, #28]
   b4cb2:	2262      	movs	r2, #98	; 0x62
   b4cb4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4cb6:	69e3      	ldr	r3, [r4, #28]
   b4cb8:	2202      	movs	r2, #2
   b4cba:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4cbc:	69e3      	ldr	r3, [r4, #28]
   b4cbe:	0a32      	lsrs	r2, r6, #8
   b4cc0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4cc2:	69e3      	ldr	r3, [r4, #28]
   b4cc4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4cc6:	69e1      	ldr	r1, [r4, #28]
   b4cc8:	2204      	movs	r2, #4
   b4cca:	4620      	mov	r0, r4
   b4ccc:	f001 fc59 	bl	b6582 <_ZN9TCPClient5writeEPKhj>
   b4cd0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4cd2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4cd4:	bf18      	it	ne
   b4cd6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4cd8:	f7ff fd3b 	bl	b4752 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4cdc:	4628      	mov	r0, r5
   b4cde:	b002      	add	sp, #8
   b4ce0:	bd70      	pop	{r4, r5, r6, pc}

000b4ce2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b4ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4ce4:	4604      	mov	r4, r0
   b4ce6:	460e      	mov	r6, r1
    if (isConnected()) {
   b4ce8:	f7ff fe48 	bl	b497c <_ZN4MQTT11isConnectedEv>
   b4cec:	4605      	mov	r5, r0
   b4cee:	b1c8      	cbz	r0, b4d24 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4cf0:	4621      	mov	r1, r4
   b4cf2:	a801      	add	r0, sp, #4
   b4cf4:	f7ff fd22 	bl	b473c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4cf8:	69e3      	ldr	r3, [r4, #28]
   b4cfa:	2272      	movs	r2, #114	; 0x72
   b4cfc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4cfe:	69e3      	ldr	r3, [r4, #28]
   b4d00:	2202      	movs	r2, #2
   b4d02:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4d04:	69e3      	ldr	r3, [r4, #28]
   b4d06:	0a32      	lsrs	r2, r6, #8
   b4d08:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4d0a:	69e3      	ldr	r3, [r4, #28]
   b4d0c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4d0e:	69e1      	ldr	r1, [r4, #28]
   b4d10:	2204      	movs	r2, #4
   b4d12:	4620      	mov	r0, r4
   b4d14:	f001 fc35 	bl	b6582 <_ZN9TCPClient5writeEPKhj>
   b4d18:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4d1a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4d1c:	bf18      	it	ne
   b4d1e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4d20:	f7ff fd17 	bl	b4752 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4d24:	4628      	mov	r0, r5
   b4d26:	b002      	add	sp, #8
   b4d28:	bd70      	pop	{r4, r5, r6, pc}

000b4d2a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b4d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d2e:	ed2d 8b02 	vpush	{d8}
   b4d32:	b087      	sub	sp, #28
   b4d34:	af00      	add	r7, sp, #0
   b4d36:	4604      	mov	r4, r0
    if (isConnected()) {
   b4d38:	f7ff fe20 	bl	b497c <_ZN4MQTT11isConnectedEv>
   b4d3c:	4681      	mov	r9, r0
   b4d3e:	b1f8      	cbz	r0, b4d80 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b4d40:	4621      	mov	r1, r4
   b4d42:	f107 0014 	add.w	r0, r7, #20
   b4d46:	f7ff fcf9 	bl	b473c <_ZN4MQTT11MutexLockerC1EPS_>
   b4d4a:	f000 f971 	bl	b5030 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b4d4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4d54:	4353      	muls	r3, r2
   b4d56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4d58:	1a82      	subs	r2, r0, r2
   b4d5a:	429a      	cmp	r2, r3
   b4d5c:	4606      	mov	r6, r0
   b4d5e:	d803      	bhi.n	b4d68 <_ZN4MQTT4loopEv+0x3e>
   b4d60:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4d62:	1a82      	subs	r2, r0, r2
   b4d64:	4293      	cmp	r3, r2
   b4d66:	d221      	bcs.n	b4dac <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b4d68:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4d6c:	b17b      	cbz	r3, b4d8e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b4d6e:	4620      	mov	r0, r4
   b4d70:	f001 fe68 	bl	b6a44 <_ZN9TCPClient4stopEv>
                return false;
   b4d74:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b4d78:	f107 0014 	add.w	r0, r7, #20
   b4d7c:	f7ff fce9 	bl	b4752 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4d80:	4648      	mov	r0, r9
   b4d82:	371c      	adds	r7, #28
   b4d84:	46bd      	mov	sp, r7
   b4d86:	ecbd 8b02 	vpop	{d8}
   b4d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4d8e:	69e2      	ldr	r2, [r4, #28]
   b4d90:	21c0      	movs	r1, #192	; 0xc0
   b4d92:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4d94:	69e2      	ldr	r2, [r4, #28]
   b4d96:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b4d98:	69e1      	ldr	r1, [r4, #28]
   b4d9a:	2202      	movs	r2, #2
   b4d9c:	4620      	mov	r0, r4
   b4d9e:	f001 fbf0 	bl	b6582 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4da2:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4da6:	2301      	movs	r3, #1
   b4da8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4dac:	4620      	mov	r0, r4
   b4dae:	f001 fdef 	bl	b6990 <_ZN9TCPClient9availableEv>
   b4db2:	2800      	cmp	r0, #0
   b4db4:	d0e0      	beq.n	b4d78 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4db6:	f107 0113 	add.w	r1, r7, #19
   b4dba:	4620      	mov	r0, r4
   b4dbc:	f7ff fd34 	bl	b4828 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4dc0:	4683      	mov	fp, r0
   b4dc2:	2800      	cmp	r0, #0
   b4dc4:	d0d8      	beq.n	b4d78 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4dc6:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4dc8:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4dca:	7819      	ldrb	r1, [r3, #0]
   b4dcc:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4dd0:	2a30      	cmp	r2, #48	; 0x30
   b4dd2:	d17f      	bne.n	b4ed4 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4dd4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4dd8:	f1ba 0f00 	cmp.w	sl, #0
   b4ddc:	d0cc      	beq.n	b4d78 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4dde:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4de2:	466a      	mov	r2, sp
   b4de4:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4de8:	eb03 020c 	add.w	r2, r3, ip
   b4dec:	7851      	ldrb	r1, [r2, #1]
   b4dee:	7895      	ldrb	r5, [r2, #2]
   b4df0:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4df4:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b4df6:	f105 0208 	add.w	r2, r5, #8
   b4dfa:	4669      	mov	r1, sp
   b4dfc:	08d2      	lsrs	r2, r2, #3
   b4dfe:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4e02:	4695      	mov	sp, r2
   b4e04:	f10c 0203 	add.w	r2, ip, #3
   b4e08:	60fa      	str	r2, [r7, #12]
   b4e0a:	eb03 0e02 	add.w	lr, r3, r2
   b4e0e:	eb0d 0205 	add.w	r2, sp, r5
   b4e12:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4e14:	f8c7 d008 	str.w	sp, [r7, #8]
   b4e18:	607a      	str	r2, [r7, #4]
   b4e1a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b4e1e:	428a      	cmp	r2, r1
   b4e20:	d006      	beq.n	b4e30 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b4e22:	460a      	mov	r2, r1
   b4e24:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b4e28:	f802 8b01 	strb.w	r8, [r2], #1
   b4e2c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b4e2e:	e7f4      	b.n	b4e1a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b4e30:	2200      	movs	r2, #0
   b4e32:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4e34:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e38:	68f9      	ldr	r1, [r7, #12]
   b4e3a:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4e3e:	ebab 020c 	sub.w	r2, fp, ip
   b4e42:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4e44:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b4e48:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e4c:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4e4e:	d125      	bne.n	b4e9c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e50:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4e54:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4e56:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e58:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b4e5c:	f10c 0105 	add.w	r1, ip, #5
   b4e60:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4e62:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e64:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4e68:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4e6a:	69e3      	ldr	r3, [r4, #28]
   b4e6c:	2240      	movs	r2, #64	; 0x40
   b4e6e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4e70:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4e72:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4e76:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4e7a:	69e3      	ldr	r3, [r4, #28]
   b4e7c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4e80:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4e82:	69e3      	ldr	r3, [r4, #28]
   b4e84:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4e88:	69e1      	ldr	r1, [r4, #28]
   b4e8a:	2204      	movs	r2, #4
   b4e8c:	4620      	mov	r0, r4
   b4e8e:	f001 fb78 	bl	b6582 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4e92:	6266      	str	r6, [r4, #36]	; 0x24
   b4e94:	ee18 3a10 	vmov	r3, s16
   b4e98:	469d      	mov	sp, r3
   b4e9a:	e76d      	b.n	b4d78 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4e9c:	f1b8 0f04 	cmp.w	r8, #4
   b4ea0:	d115      	bne.n	b4ece <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4ea2:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4ea6:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4ea8:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4eaa:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4eae:	f10c 0105 	add.w	r1, ip, #5
   b4eb2:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4eb4:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4eb6:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4eba:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4ebc:	69e3      	ldr	r3, [r4, #28]
   b4ebe:	2250      	movs	r2, #80	; 0x50
   b4ec0:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4ec2:	69e3      	ldr	r3, [r4, #28]
   b4ec4:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4ec6:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4eca:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4ecc:	e7d5      	b.n	b4e7a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4ece:	4419      	add	r1, r3
   b4ed0:	47d0      	blx	sl
   b4ed2:	e7df      	b.n	b4e94 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4ed4:	2a50      	cmp	r2, #80	; 0x50
   b4ed6:	d108      	bne.n	b4eea <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4ed8:	789a      	ldrb	r2, [r3, #2]
   b4eda:	78d9      	ldrb	r1, [r3, #3]
   b4edc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4ee0:	b289      	uxth	r1, r1
   b4ee2:	4620      	mov	r0, r4
   b4ee4:	f7ff fed9 	bl	b4c9a <_ZN4MQTT14publishReleaseEt>
   b4ee8:	e746      	b.n	b4d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4eea:	2a40      	cmp	r2, #64	; 0x40
   b4eec:	d112      	bne.n	b4f14 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4eee:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4ef0:	2a00      	cmp	r2, #0
   b4ef2:	f43f af41 	beq.w	b4d78 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b4ef6:	f1bb 0f04 	cmp.w	fp, #4
   b4efa:	f47f af3d 	bne.w	b4d78 <_ZN4MQTT4loopEv+0x4e>
   b4efe:	f011 0f06 	tst.w	r1, #6
   b4f02:	f47f af39 	bne.w	b4d78 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b4f06:	7899      	ldrb	r1, [r3, #2]
   b4f08:	78d8      	ldrb	r0, [r3, #3]
   b4f0a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b4f0e:	b280      	uxth	r0, r0
   b4f10:	4790      	blx	r2
   b4f12:	e731      	b.n	b4d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b4f14:	2a60      	cmp	r2, #96	; 0x60
   b4f16:	d108      	bne.n	b4f2a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b4f18:	789a      	ldrb	r2, [r3, #2]
   b4f1a:	78d9      	ldrb	r1, [r3, #3]
   b4f1c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b4f20:	b289      	uxth	r1, r1
   b4f22:	4620      	mov	r0, r4
   b4f24:	f7ff fedd 	bl	b4ce2 <_ZN4MQTT15publishCompleteEt>
   b4f28:	e726      	b.n	b4d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b4f2a:	2a70      	cmp	r2, #112	; 0x70
   b4f2c:	d0df      	beq.n	b4eee <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b4f2e:	2a90      	cmp	r2, #144	; 0x90
   b4f30:	f43f af22 	beq.w	b4d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b4f34:	2ac0      	cmp	r2, #192	; 0xc0
   b4f36:	d10a      	bne.n	b4f4e <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b4f38:	22d0      	movs	r2, #208	; 0xd0
   b4f3a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b4f3c:	69e3      	ldr	r3, [r4, #28]
   b4f3e:	2200      	movs	r2, #0
   b4f40:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4f42:	69e1      	ldr	r1, [r4, #28]
   b4f44:	2202      	movs	r2, #2
   b4f46:	4620      	mov	r0, r4
   b4f48:	f001 fb1b 	bl	b6582 <_ZN9TCPClient5writeEPKhj>
   b4f4c:	e714      	b.n	b4d78 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4f4e:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4f50:	bf04      	itt	eq
   b4f52:	2300      	moveq	r3, #0
   b4f54:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b4f58:	e70e      	b.n	b4d78 <_ZN4MQTT4loopEv+0x4e>

000b4f5a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b4f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4f5c:	4604      	mov	r4, r0
   b4f5e:	460f      	mov	r7, r1
   b4f60:	4616      	mov	r6, r2
    if (isConnected()) {
   b4f62:	f7ff fd0b 	bl	b497c <_ZN4MQTT11isConnectedEv>
   b4f66:	4605      	mov	r5, r0
   b4f68:	b310      	cbz	r0, b4fb0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b4f6a:	4621      	mov	r1, r4
   b4f6c:	a801      	add	r0, sp, #4
   b4f6e:	f7ff fbe5 	bl	b473c <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4f72:	8c23      	ldrh	r3, [r4, #32]
   b4f74:	3301      	adds	r3, #1
   b4f76:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b4f78:	b1eb      	cbz	r3, b4fb6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b4f7a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b4f7c:	8c23      	ldrh	r3, [r4, #32]
   b4f7e:	69e2      	ldr	r2, [r4, #28]
   b4f80:	0a1b      	lsrs	r3, r3, #8
   b4f82:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4f84:	69e3      	ldr	r3, [r4, #28]
   b4f86:	8c22      	ldrh	r2, [r4, #32]
   b4f88:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b4f8a:	69e2      	ldr	r2, [r4, #28]
   b4f8c:	2307      	movs	r3, #7
   b4f8e:	4639      	mov	r1, r7
   b4f90:	4620      	mov	r0, r4
   b4f92:	f7ff fcd7 	bl	b4944 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4f96:	69e3      	ldr	r3, [r4, #28]
   b4f98:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b4f9a:	3804      	subs	r0, #4
   b4f9c:	b283      	uxth	r3, r0
   b4f9e:	69e2      	ldr	r2, [r4, #28]
   b4fa0:	2182      	movs	r1, #130	; 0x82
   b4fa2:	4620      	mov	r0, r4
   b4fa4:	f7ff fc92 	bl	b48cc <_ZN4MQTT5writeEhPht>
   b4fa8:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b4faa:	a801      	add	r0, sp, #4
   b4fac:	f7ff fbd1 	bl	b4752 <_ZN4MQTT11MutexLockerD1Ev>
}
   b4fb0:	4628      	mov	r0, r5
   b4fb2:	b003      	add	sp, #12
   b4fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4fb6:	2301      	movs	r3, #1
   b4fb8:	e7df      	b.n	b4f7a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b4fba <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b4fba:	2200      	movs	r2, #0
   b4fbc:	f7ff bfcd 	b.w	b4f5a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b4fc0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4fc0:	b508      	push	{r3, lr}
   b4fc2:	4b02      	ldr	r3, [pc, #8]	; (b4fcc <netdb_freeaddrinfo+0xc>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	689b      	ldr	r3, [r3, #8]
   b4fc8:	9301      	str	r3, [sp, #4]
   b4fca:	bd08      	pop	{r3, pc}
   b4fcc:	00030268 	.word	0x00030268

000b4fd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4fd0:	b508      	push	{r3, lr}
   b4fd2:	4b02      	ldr	r3, [pc, #8]	; (b4fdc <netdb_getaddrinfo+0xc>)
   b4fd4:	681b      	ldr	r3, [r3, #0]
   b4fd6:	68db      	ldr	r3, [r3, #12]
   b4fd8:	9301      	str	r3, [sp, #4]
   b4fda:	bd08      	pop	{r3, pc}
   b4fdc:	00030268 	.word	0x00030268

000b4fe0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4fe0:	b508      	push	{r3, lr}
   b4fe2:	4b02      	ldr	r3, [pc, #8]	; (b4fec <HAL_Pin_Mode+0xc>)
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	689b      	ldr	r3, [r3, #8]
   b4fe8:	9301      	str	r3, [sp, #4]
   b4fea:	bd08      	pop	{r3, pc}
   b4fec:	0003022c 	.word	0x0003022c

000b4ff0 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b4ff0:	b508      	push	{r3, lr}
   b4ff2:	4b02      	ldr	r3, [pc, #8]	; (b4ffc <HAL_Interrupts_Attach+0xc>)
   b4ff4:	681b      	ldr	r3, [r3, #0]
   b4ff6:	699b      	ldr	r3, [r3, #24]
   b4ff8:	9301      	str	r3, [sp, #4]
   b4ffa:	bd08      	pop	{r3, pc}
   b4ffc:	0003022c 	.word	0x0003022c

000b5000 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <HAL_Interrupts_Detach+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	69db      	ldr	r3, [r3, #28]
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	0003022c 	.word	0x0003022c

000b5010 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <if_index_to_name+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	695b      	ldr	r3, [r3, #20]
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	0003026c 	.word	0x0003026c

000b5020 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <HAL_RNG_GetRandomNumber+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	685b      	ldr	r3, [r3, #4]
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	00030218 	.word	0x00030218

000b5030 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	695b      	ldr	r3, [r3, #20]
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	00030218 	.word	0x00030218

000b5040 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5040:	b508      	push	{r3, lr}
   b5042:	4b02      	ldr	r3, [pc, #8]	; (b504c <hal_rtc_time_is_valid+0xc>)
   b5044:	681b      	ldr	r3, [r3, #0]
   b5046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5048:	9301      	str	r3, [sp, #4]
   b504a:	bd08      	pop	{r3, pc}
   b504c:	00030218 	.word	0x00030218

000b5050 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b02      	ldr	r3, [pc, #8]	; (b505c <hal_rtc_get_time+0xc>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5058:	9301      	str	r3, [sp, #4]
   b505a:	bd08      	pop	{r3, pc}
   b505c:	00030218 	.word	0x00030218

000b5060 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5060:	b508      	push	{r3, lr}
   b5062:	4b02      	ldr	r3, [pc, #8]	; (b506c <os_mutex_create+0xc>)
   b5064:	681b      	ldr	r3, [r3, #0]
   b5066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5068:	9301      	str	r3, [sp, #4]
   b506a:	bd08      	pop	{r3, pc}
   b506c:	00030248 	.word	0x00030248

000b5070 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5070:	b508      	push	{r3, lr}
   b5072:	4b02      	ldr	r3, [pc, #8]	; (b507c <os_mutex_lock+0xc>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5078:	9301      	str	r3, [sp, #4]
   b507a:	bd08      	pop	{r3, pc}
   b507c:	00030248 	.word	0x00030248

000b5080 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5080:	b508      	push	{r3, lr}
   b5082:	4b02      	ldr	r3, [pc, #8]	; (b508c <os_mutex_unlock+0xc>)
   b5084:	681b      	ldr	r3, [r3, #0]
   b5086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5088:	9301      	str	r3, [sp, #4]
   b508a:	bd08      	pop	{r3, pc}
   b508c:	00030248 	.word	0x00030248

000b5090 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <os_mutex_recursive_create+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	00030248 	.word	0x00030248

000b50a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <inet_inet_ntop+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	695b      	ldr	r3, [r3, #20]
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	00030264 	.word	0x00030264

000b50b0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <inet_htonl+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	6a1b      	ldr	r3, [r3, #32]
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	00030264 	.word	0x00030264

000b50c0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <inet_htons+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	00030264 	.word	0x00030264

000b50d0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <hal_usart_write+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	68db      	ldr	r3, [r3, #12]
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	0003023c 	.word	0x0003023c

000b50e0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <hal_usart_available+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	691b      	ldr	r3, [r3, #16]
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	0003023c 	.word	0x0003023c

000b50f0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <hal_usart_read+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	695b      	ldr	r3, [r3, #20]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	0003023c 	.word	0x0003023c

000b5100 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <hal_usart_peek+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	699b      	ldr	r3, [r3, #24]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	0003023c 	.word	0x0003023c

000b5110 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <hal_usart_flush+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	69db      	ldr	r3, [r3, #28]
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	0003023c 	.word	0x0003023c

000b5120 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <hal_usart_is_enabled+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	6a1b      	ldr	r3, [r3, #32]
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	0003023c 	.word	0x0003023c

000b5130 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <hal_usart_available_data_for_write+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	0003023c 	.word	0x0003023c

000b5140 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <hal_usart_init_ex+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	0003023c 	.word	0x0003023c

000b5150 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <hal_i2c_write+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	6a1b      	ldr	r3, [r3, #32]
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	00030228 	.word	0x00030228

000b5160 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b02      	ldr	r3, [pc, #8]	; (b516c <hal_i2c_available+0xc>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	bd08      	pop	{r3, pc}
   b516c:	00030228 	.word	0x00030228

000b5170 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5170:	b508      	push	{r3, lr}
   b5172:	4b02      	ldr	r3, [pc, #8]	; (b517c <hal_i2c_read+0xc>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5178:	9301      	str	r3, [sp, #4]
   b517a:	bd08      	pop	{r3, pc}
   b517c:	00030228 	.word	0x00030228

000b5180 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5180:	b508      	push	{r3, lr}
   b5182:	4b02      	ldr	r3, [pc, #8]	; (b518c <hal_i2c_peek+0xc>)
   b5184:	681b      	ldr	r3, [r3, #0]
   b5186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5188:	9301      	str	r3, [sp, #4]
   b518a:	bd08      	pop	{r3, pc}
   b518c:	00030228 	.word	0x00030228

000b5190 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5190:	b508      	push	{r3, lr}
   b5192:	4b02      	ldr	r3, [pc, #8]	; (b519c <hal_i2c_flush+0xc>)
   b5194:	681b      	ldr	r3, [r3, #0]
   b5196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5198:	9301      	str	r3, [sp, #4]
   b519a:	bd08      	pop	{r3, pc}
   b519c:	00030228 	.word	0x00030228

000b51a0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b51a0:	b508      	push	{r3, lr}
   b51a2:	4b02      	ldr	r3, [pc, #8]	; (b51ac <hal_i2c_is_enabled+0xc>)
   b51a4:	681b      	ldr	r3, [r3, #0]
   b51a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b51a8:	9301      	str	r3, [sp, #4]
   b51aa:	bd08      	pop	{r3, pc}
   b51ac:	00030228 	.word	0x00030228

000b51b0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b51b0:	b508      	push	{r3, lr}
   b51b2:	4b02      	ldr	r3, [pc, #8]	; (b51bc <hal_i2c_init+0xc>)
   b51b4:	681b      	ldr	r3, [r3, #0]
   b51b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51b8:	9301      	str	r3, [sp, #4]
   b51ba:	bd08      	pop	{r3, pc}
   b51bc:	00030228 	.word	0x00030228

000b51c0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b51c0:	b508      	push	{r3, lr}
   b51c2:	4b02      	ldr	r3, [pc, #8]	; (b51cc <sock_setsockopt+0xc>)
   b51c4:	681b      	ldr	r3, [r3, #0]
   b51c6:	699b      	ldr	r3, [r3, #24]
   b51c8:	9301      	str	r3, [sp, #4]
   b51ca:	bd08      	pop	{r3, pc}
   b51cc:	00030238 	.word	0x00030238

000b51d0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b51d0:	b508      	push	{r3, lr}
   b51d2:	4b02      	ldr	r3, [pc, #8]	; (b51dc <sock_close+0xc>)
   b51d4:	681b      	ldr	r3, [r3, #0]
   b51d6:	69db      	ldr	r3, [r3, #28]
   b51d8:	9301      	str	r3, [sp, #4]
   b51da:	bd08      	pop	{r3, pc}
   b51dc:	00030238 	.word	0x00030238

000b51e0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b51e0:	b508      	push	{r3, lr}
   b51e2:	4b02      	ldr	r3, [pc, #8]	; (b51ec <sock_connect+0xc>)
   b51e4:	681b      	ldr	r3, [r3, #0]
   b51e6:	6a1b      	ldr	r3, [r3, #32]
   b51e8:	9301      	str	r3, [sp, #4]
   b51ea:	bd08      	pop	{r3, pc}
   b51ec:	00030238 	.word	0x00030238

000b51f0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b51f0:	b508      	push	{r3, lr}
   b51f2:	4b02      	ldr	r3, [pc, #8]	; (b51fc <sock_recv+0xc>)
   b51f4:	681b      	ldr	r3, [r3, #0]
   b51f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51f8:	9301      	str	r3, [sp, #4]
   b51fa:	bd08      	pop	{r3, pc}
   b51fc:	00030238 	.word	0x00030238

000b5200 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5200:	b508      	push	{r3, lr}
   b5202:	4b02      	ldr	r3, [pc, #8]	; (b520c <sock_send+0xc>)
   b5204:	681b      	ldr	r3, [r3, #0]
   b5206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5208:	9301      	str	r3, [sp, #4]
   b520a:	bd08      	pop	{r3, pc}
   b520c:	00030238 	.word	0x00030238

000b5210 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b02      	ldr	r3, [pc, #8]	; (b521c <sock_socket+0xc>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5218:	9301      	str	r3, [sp, #4]
   b521a:	bd08      	pop	{r3, pc}
   b521c:	00030238 	.word	0x00030238

000b5220 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5220:	b508      	push	{r3, lr}
   b5222:	4b02      	ldr	r3, [pc, #8]	; (b522c <hal_spi_init+0xc>)
   b5224:	681b      	ldr	r3, [r3, #0]
   b5226:	69db      	ldr	r3, [r3, #28]
   b5228:	9301      	str	r3, [sp, #4]
   b522a:	bd08      	pop	{r3, pc}
   b522c:	00030230 	.word	0x00030230

000b5230 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b02      	ldr	r3, [pc, #8]	; (b523c <hal_spi_is_enabled+0xc>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	6a1b      	ldr	r3, [r3, #32]
   b5238:	9301      	str	r3, [sp, #4]
   b523a:	bd08      	pop	{r3, pc}
   b523c:	00030230 	.word	0x00030230

000b5240 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b02      	ldr	r3, [pc, #8]	; (b524c <HAL_USB_USART_Init+0xc>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	681b      	ldr	r3, [r3, #0]
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	bd08      	pop	{r3, pc}
   b524c:	0003024c 	.word	0x0003024c

000b5250 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5250:	b508      	push	{r3, lr}
   b5252:	4b02      	ldr	r3, [pc, #8]	; (b525c <HAL_USB_USART_Available_Data+0xc>)
   b5254:	681b      	ldr	r3, [r3, #0]
   b5256:	691b      	ldr	r3, [r3, #16]
   b5258:	9301      	str	r3, [sp, #4]
   b525a:	bd08      	pop	{r3, pc}
   b525c:	0003024c 	.word	0x0003024c

000b5260 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5260:	b508      	push	{r3, lr}
   b5262:	4b02      	ldr	r3, [pc, #8]	; (b526c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5264:	681b      	ldr	r3, [r3, #0]
   b5266:	695b      	ldr	r3, [r3, #20]
   b5268:	9301      	str	r3, [sp, #4]
   b526a:	bd08      	pop	{r3, pc}
   b526c:	0003024c 	.word	0x0003024c

000b5270 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5270:	b508      	push	{r3, lr}
   b5272:	4b02      	ldr	r3, [pc, #8]	; (b527c <HAL_USB_USART_Receive_Data+0xc>)
   b5274:	681b      	ldr	r3, [r3, #0]
   b5276:	699b      	ldr	r3, [r3, #24]
   b5278:	9301      	str	r3, [sp, #4]
   b527a:	bd08      	pop	{r3, pc}
   b527c:	0003024c 	.word	0x0003024c

000b5280 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5280:	b508      	push	{r3, lr}
   b5282:	4b02      	ldr	r3, [pc, #8]	; (b528c <HAL_USB_USART_Send_Data+0xc>)
   b5284:	681b      	ldr	r3, [r3, #0]
   b5286:	69db      	ldr	r3, [r3, #28]
   b5288:	9301      	str	r3, [sp, #4]
   b528a:	bd08      	pop	{r3, pc}
   b528c:	0003024c 	.word	0x0003024c

000b5290 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b02      	ldr	r3, [pc, #8]	; (b529c <HAL_USB_USART_Flush_Data+0xc>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	6a1b      	ldr	r3, [r3, #32]
   b5298:	9301      	str	r3, [sp, #4]
   b529a:	bd08      	pop	{r3, pc}
   b529c:	0003024c 	.word	0x0003024c

000b52a0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b52a0:	b508      	push	{r3, lr}
   b52a2:	4b02      	ldr	r3, [pc, #8]	; (b52ac <log_message+0xc>)
   b52a4:	681b      	ldr	r3, [r3, #0]
   b52a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b52a8:	9301      	str	r3, [sp, #4]
   b52aa:	bd08      	pop	{r3, pc}
   b52ac:	00030260 	.word	0x00030260

000b52b0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <system_mode+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	681b      	ldr	r3, [r3, #0]
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	00030220 	.word	0x00030220

000b52c0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <set_system_mode+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	685b      	ldr	r3, [r3, #4]
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	00030220 	.word	0x00030220

000b52d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <system_delay_ms+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	695b      	ldr	r3, [r3, #20]
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	00030220 	.word	0x00030220

000b52e0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b02      	ldr	r3, [pc, #8]	; (b52ec <application_thread_current+0xc>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	bd08      	pop	{r3, pc}
   b52ec:	00030220 	.word	0x00030220

000b52f0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4b02      	ldr	r3, [pc, #8]	; (b52fc <application_thread_invoke+0xc>)
   b52f4:	681b      	ldr	r3, [r3, #0]
   b52f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b52f8:	9301      	str	r3, [sp, #4]
   b52fa:	bd08      	pop	{r3, pc}
   b52fc:	00030220 	.word	0x00030220

000b5300 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5300:	b508      	push	{r3, lr}
   b5302:	4b02      	ldr	r3, [pc, #8]	; (b530c <system_thread_get_state+0xc>)
   b5304:	681b      	ldr	r3, [r3, #0]
   b5306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	bd08      	pop	{r3, pc}
   b530c:	00030220 	.word	0x00030220

000b5310 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5310:	b508      	push	{r3, lr}
   b5312:	4b03      	ldr	r3, [pc, #12]	; (b5320 <system_ctrl_set_app_request_handler+0x10>)
   b5314:	681b      	ldr	r3, [r3, #0]
   b5316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b531a:	9301      	str	r3, [sp, #4]
   b531c:	bd08      	pop	{r3, pc}
   b531e:	0000      	.short	0x0000
   b5320:	00030220 	.word	0x00030220

000b5324 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5324:	b508      	push	{r3, lr}
   b5326:	4b03      	ldr	r3, [pc, #12]	; (b5334 <system_ctrl_set_result+0x10>)
   b5328:	681b      	ldr	r3, [r3, #0]
   b532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b532e:	9301      	str	r3, [sp, #4]
   b5330:	bd08      	pop	{r3, pc}
   b5332:	0000      	.short	0x0000
   b5334:	00030220 	.word	0x00030220

000b5338 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5338:	b508      	push	{r3, lr}
   b533a:	4b02      	ldr	r3, [pc, #8]	; (b5344 <network_connect+0xc>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	685b      	ldr	r3, [r3, #4]
   b5340:	9301      	str	r3, [sp, #4]
   b5342:	bd08      	pop	{r3, pc}
   b5344:	00030240 	.word	0x00030240

000b5348 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5348:	b508      	push	{r3, lr}
   b534a:	4b02      	ldr	r3, [pc, #8]	; (b5354 <network_connecting+0xc>)
   b534c:	681b      	ldr	r3, [r3, #0]
   b534e:	689b      	ldr	r3, [r3, #8]
   b5350:	9301      	str	r3, [sp, #4]
   b5352:	bd08      	pop	{r3, pc}
   b5354:	00030240 	.word	0x00030240

000b5358 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5358:	b508      	push	{r3, lr}
   b535a:	4b02      	ldr	r3, [pc, #8]	; (b5364 <network_disconnect+0xc>)
   b535c:	681b      	ldr	r3, [r3, #0]
   b535e:	68db      	ldr	r3, [r3, #12]
   b5360:	9301      	str	r3, [sp, #4]
   b5362:	bd08      	pop	{r3, pc}
   b5364:	00030240 	.word	0x00030240

000b5368 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5368:	b508      	push	{r3, lr}
   b536a:	4b02      	ldr	r3, [pc, #8]	; (b5374 <network_ready+0xc>)
   b536c:	681b      	ldr	r3, [r3, #0]
   b536e:	691b      	ldr	r3, [r3, #16]
   b5370:	9301      	str	r3, [sp, #4]
   b5372:	bd08      	pop	{r3, pc}
   b5374:	00030240 	.word	0x00030240

000b5378 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5378:	b508      	push	{r3, lr}
   b537a:	4b02      	ldr	r3, [pc, #8]	; (b5384 <network_on+0xc>)
   b537c:	681b      	ldr	r3, [r3, #0]
   b537e:	695b      	ldr	r3, [r3, #20]
   b5380:	9301      	str	r3, [sp, #4]
   b5382:	bd08      	pop	{r3, pc}
   b5384:	00030240 	.word	0x00030240

000b5388 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5388:	b508      	push	{r3, lr}
   b538a:	4b02      	ldr	r3, [pc, #8]	; (b5394 <network_off+0xc>)
   b538c:	681b      	ldr	r3, [r3, #0]
   b538e:	699b      	ldr	r3, [r3, #24]
   b5390:	9301      	str	r3, [sp, #4]
   b5392:	bd08      	pop	{r3, pc}
   b5394:	00030240 	.word	0x00030240

000b5398 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5398:	b508      	push	{r3, lr}
   b539a:	4b02      	ldr	r3, [pc, #8]	; (b53a4 <network_listen+0xc>)
   b539c:	681b      	ldr	r3, [r3, #0]
   b539e:	69db      	ldr	r3, [r3, #28]
   b53a0:	9301      	str	r3, [sp, #4]
   b53a2:	bd08      	pop	{r3, pc}
   b53a4:	00030240 	.word	0x00030240

000b53a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b53a8:	b508      	push	{r3, lr}
   b53aa:	4b02      	ldr	r3, [pc, #8]	; (b53b4 <network_listening+0xc>)
   b53ac:	681b      	ldr	r3, [r3, #0]
   b53ae:	6a1b      	ldr	r3, [r3, #32]
   b53b0:	9301      	str	r3, [sp, #4]
   b53b2:	bd08      	pop	{r3, pc}
   b53b4:	00030240 	.word	0x00030240

000b53b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b53b8:	b508      	push	{r3, lr}
   b53ba:	4b02      	ldr	r3, [pc, #8]	; (b53c4 <network_set_listen_timeout+0xc>)
   b53bc:	681b      	ldr	r3, [r3, #0]
   b53be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b53c0:	9301      	str	r3, [sp, #4]
   b53c2:	bd08      	pop	{r3, pc}
   b53c4:	00030240 	.word	0x00030240

000b53c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b53c8:	b508      	push	{r3, lr}
   b53ca:	4b02      	ldr	r3, [pc, #8]	; (b53d4 <network_get_listen_timeout+0xc>)
   b53cc:	681b      	ldr	r3, [r3, #0]
   b53ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b53d0:	9301      	str	r3, [sp, #4]
   b53d2:	bd08      	pop	{r3, pc}
   b53d4:	00030240 	.word	0x00030240

000b53d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b53d8:	b508      	push	{r3, lr}
   b53da:	4b02      	ldr	r3, [pc, #8]	; (b53e4 <network_is_on+0xc>)
   b53dc:	681b      	ldr	r3, [r3, #0]
   b53de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b53e0:	9301      	str	r3, [sp, #4]
   b53e2:	bd08      	pop	{r3, pc}
   b53e4:	00030240 	.word	0x00030240

000b53e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b53e8:	b508      	push	{r3, lr}
   b53ea:	4b02      	ldr	r3, [pc, #8]	; (b53f4 <network_is_off+0xc>)
   b53ec:	681b      	ldr	r3, [r3, #0]
   b53ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b53f0:	9301      	str	r3, [sp, #4]
   b53f2:	bd08      	pop	{r3, pc}
   b53f4:	00030240 	.word	0x00030240

000b53f8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b53f8:	b508      	push	{r3, lr}
   b53fa:	4b02      	ldr	r3, [pc, #8]	; (b5404 <spark_process+0xc>)
   b53fc:	681b      	ldr	r3, [r3, #0]
   b53fe:	689b      	ldr	r3, [r3, #8]
   b5400:	9301      	str	r3, [sp, #4]
   b5402:	bd08      	pop	{r3, pc}
   b5404:	00030244 	.word	0x00030244

000b5408 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5408:	b508      	push	{r3, lr}
   b540a:	4b02      	ldr	r3, [pc, #8]	; (b5414 <spark_cloud_flag_connected+0xc>)
   b540c:	681b      	ldr	r3, [r3, #0]
   b540e:	695b      	ldr	r3, [r3, #20]
   b5410:	9301      	str	r3, [sp, #4]
   b5412:	bd08      	pop	{r3, pc}
   b5414:	00030244 	.word	0x00030244

000b5418 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5418:	b508      	push	{r3, lr}
   b541a:	4b02      	ldr	r3, [pc, #8]	; (b5424 <spark_send_event+0xc>)
   b541c:	681b      	ldr	r3, [r3, #0]
   b541e:	6a1b      	ldr	r3, [r3, #32]
   b5420:	9301      	str	r3, [sp, #4]
   b5422:	bd08      	pop	{r3, pc}
   b5424:	00030244 	.word	0x00030244

000b5428 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5428:	b508      	push	{r3, lr}
   b542a:	4b02      	ldr	r3, [pc, #8]	; (b5434 <spark_subscribe+0xc>)
   b542c:	681b      	ldr	r3, [r3, #0]
   b542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5430:	9301      	str	r3, [sp, #4]
   b5432:	bd08      	pop	{r3, pc}
   b5434:	00030244 	.word	0x00030244

000b5438 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5438:	b508      	push	{r3, lr}
   b543a:	4b02      	ldr	r3, [pc, #8]	; (b5444 <spark_sync_time_pending+0xc>)
   b543c:	681b      	ldr	r3, [r3, #0]
   b543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5440:	9301      	str	r3, [sp, #4]
   b5442:	bd08      	pop	{r3, pc}
   b5444:	00030244 	.word	0x00030244

000b5448 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5448:	b508      	push	{r3, lr}
   b544a:	4b02      	ldr	r3, [pc, #8]	; (b5454 <spark_set_random_seed_from_cloud_handler+0xc>)
   b544c:	681b      	ldr	r3, [r3, #0]
   b544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5450:	9301      	str	r3, [sp, #4]
   b5452:	bd08      	pop	{r3, pc}
   b5454:	00030244 	.word	0x00030244

000b5458 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5458:	b508      	push	{r3, lr}
   b545a:	4b02      	ldr	r3, [pc, #8]	; (b5464 <malloc+0xc>)
   b545c:	681b      	ldr	r3, [r3, #0]
   b545e:	681b      	ldr	r3, [r3, #0]
   b5460:	9301      	str	r3, [sp, #4]
   b5462:	bd08      	pop	{r3, pc}
   b5464:	0003021c 	.word	0x0003021c

000b5468 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5468:	b508      	push	{r3, lr}
   b546a:	4b02      	ldr	r3, [pc, #8]	; (b5474 <free+0xc>)
   b546c:	681b      	ldr	r3, [r3, #0]
   b546e:	685b      	ldr	r3, [r3, #4]
   b5470:	9301      	str	r3, [sp, #4]
   b5472:	bd08      	pop	{r3, pc}
   b5474:	0003021c 	.word	0x0003021c

000b5478 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5478:	b508      	push	{r3, lr}
   b547a:	4b02      	ldr	r3, [pc, #8]	; (b5484 <realloc+0xc>)
   b547c:	681b      	ldr	r3, [r3, #0]
   b547e:	689b      	ldr	r3, [r3, #8]
   b5480:	9301      	str	r3, [sp, #4]
   b5482:	bd08      	pop	{r3, pc}
   b5484:	0003021c 	.word	0x0003021c

000b5488 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b5488:	b508      	push	{r3, lr}
   b548a:	4b02      	ldr	r3, [pc, #8]	; (b5494 <sprintf+0xc>)
   b548c:	681b      	ldr	r3, [r3, #0]
   b548e:	68db      	ldr	r3, [r3, #12]
   b5490:	9301      	str	r3, [sp, #4]
   b5492:	bd08      	pop	{r3, pc}
   b5494:	0003021c 	.word	0x0003021c

000b5498 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b5498:	b508      	push	{r3, lr}
   b549a:	4b02      	ldr	r3, [pc, #8]	; (b54a4 <sscanf+0xc>)
   b549c:	681b      	ldr	r3, [r3, #0]
   b549e:	695b      	ldr	r3, [r3, #20]
   b54a0:	9301      	str	r3, [sp, #4]
   b54a2:	bd08      	pop	{r3, pc}
   b54a4:	0003021c 	.word	0x0003021c

000b54a8 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b54a8:	b508      	push	{r3, lr}
   b54aa:	4b02      	ldr	r3, [pc, #8]	; (b54b4 <vsnprintf+0xc>)
   b54ac:	681b      	ldr	r3, [r3, #0]
   b54ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54b0:	9301      	str	r3, [sp, #4]
   b54b2:	bd08      	pop	{r3, pc}
   b54b4:	0003021c 	.word	0x0003021c

000b54b8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b54b8:	b508      	push	{r3, lr}
   b54ba:	4b02      	ldr	r3, [pc, #8]	; (b54c4 <abort+0xc>)
   b54bc:	681b      	ldr	r3, [r3, #0]
   b54be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54c0:	9301      	str	r3, [sp, #4]
   b54c2:	bd08      	pop	{r3, pc}
   b54c4:	0003021c 	.word	0x0003021c

000b54c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b54c8:	b508      	push	{r3, lr}
   b54ca:	4b02      	ldr	r3, [pc, #8]	; (b54d4 <_malloc_r+0xc>)
   b54cc:	681b      	ldr	r3, [r3, #0]
   b54ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b54d0:	9301      	str	r3, [sp, #4]
   b54d2:	bd08      	pop	{r3, pc}
   b54d4:	0003021c 	.word	0x0003021c

000b54d8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b54d8:	b508      	push	{r3, lr}
   b54da:	4b02      	ldr	r3, [pc, #8]	; (b54e4 <__errno+0xc>)
   b54dc:	681b      	ldr	r3, [r3, #0]
   b54de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b54e0:	9301      	str	r3, [sp, #4]
   b54e2:	bd08      	pop	{r3, pc}
   b54e4:	0003021c 	.word	0x0003021c

000b54e8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b54e8:	b508      	push	{r3, lr}
   b54ea:	4b02      	ldr	r3, [pc, #8]	; (b54f4 <__assert_func+0xc>)
   b54ec:	681b      	ldr	r3, [r3, #0]
   b54ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54f0:	9301      	str	r3, [sp, #4]
   b54f2:	bd08      	pop	{r3, pc}
   b54f4:	0003021c 	.word	0x0003021c

000b54f8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b54f8:	b508      	push	{r3, lr}
   b54fa:	4b02      	ldr	r3, [pc, #8]	; (b5504 <newlib_impure_ptr_callback+0xc>)
   b54fc:	681b      	ldr	r3, [r3, #0]
   b54fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5500:	9301      	str	r3, [sp, #4]
   b5502:	bd08      	pop	{r3, pc}
   b5504:	0003021c 	.word	0x0003021c

000b5508 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5508:	b508      	push	{r3, lr}
   b550a:	4b02      	ldr	r3, [pc, #8]	; (b5514 <localtime_r+0xc>)
   b550c:	681b      	ldr	r3, [r3, #0]
   b550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5510:	9301      	str	r3, [sp, #4]
   b5512:	bd08      	pop	{r3, pc}
   b5514:	0003021c 	.word	0x0003021c

000b5518 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5518:	2200      	movs	r2, #0
   b551a:	6840      	ldr	r0, [r0, #4]
   b551c:	4611      	mov	r1, r2
   b551e:	f7ff bf43 	b.w	b53a8 <network_listening>

000b5522 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5522:	2200      	movs	r2, #0
   b5524:	6840      	ldr	r0, [r0, #4]
   b5526:	4611      	mov	r1, r2
   b5528:	f7ff bf4e 	b.w	b53c8 <network_get_listen_timeout>

000b552c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b552c:	6840      	ldr	r0, [r0, #4]
   b552e:	2200      	movs	r2, #0
   b5530:	f7ff bf42 	b.w	b53b8 <network_set_listen_timeout>

000b5534 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5534:	6840      	ldr	r0, [r0, #4]
   b5536:	2200      	movs	r2, #0
   b5538:	f081 0101 	eor.w	r1, r1, #1
   b553c:	f7ff bf2c 	b.w	b5398 <network_listen>

000b5540 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5540:	2300      	movs	r3, #0
   b5542:	6840      	ldr	r0, [r0, #4]
   b5544:	461a      	mov	r2, r3
   b5546:	4619      	mov	r1, r3
   b5548:	f7ff bf1e 	b.w	b5388 <network_off>

000b554c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b554c:	2300      	movs	r3, #0
   b554e:	6840      	ldr	r0, [r0, #4]
   b5550:	461a      	mov	r2, r3
   b5552:	4619      	mov	r1, r3
   b5554:	f7ff bf10 	b.w	b5378 <network_on>

000b5558 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5558:	2200      	movs	r2, #0
   b555a:	6840      	ldr	r0, [r0, #4]
   b555c:	4611      	mov	r1, r2
   b555e:	f7ff bf03 	b.w	b5368 <network_ready>

000b5562 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5562:	2200      	movs	r2, #0
   b5564:	6840      	ldr	r0, [r0, #4]
   b5566:	4611      	mov	r1, r2
   b5568:	f7ff beee 	b.w	b5348 <network_connecting>

000b556c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b556c:	6840      	ldr	r0, [r0, #4]
   b556e:	2200      	movs	r2, #0
   b5570:	2102      	movs	r1, #2
   b5572:	f7ff bef1 	b.w	b5358 <network_disconnect>

000b5576 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5576:	2300      	movs	r3, #0
   b5578:	6840      	ldr	r0, [r0, #4]
   b557a:	461a      	mov	r2, r3
   b557c:	f7ff bedc 	b.w	b5338 <network_connect>

000b5580 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5580:	4b02      	ldr	r3, [pc, #8]	; (b558c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5582:	2203      	movs	r2, #3
   b5584:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5586:	4a02      	ldr	r2, [pc, #8]	; (b5590 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5588:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b558a:	4770      	bx	lr
   b558c:	2003e680 	.word	0x2003e680
   b5590:	000b9d58 	.word	0x000b9d58

000b5594 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5594:	b510      	push	{r4, lr}
   b5596:	4604      	mov	r4, r0
   b5598:	4608      	mov	r0, r1
{
    _spi = spi;
   b559a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b559c:	f7ff fe40 	bl	b5220 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b55a0:	2300      	movs	r3, #0
   b55a2:	6063      	str	r3, [r4, #4]
}
   b55a4:	4620      	mov	r0, r4
   b55a6:	bd10      	pop	{r4, pc}

000b55a8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b55a8:	4b05      	ldr	r3, [pc, #20]	; (b55c0 <_GLOBAL__sub_I_System+0x18>)
   b55aa:	2202      	movs	r2, #2
   b55ac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b55ae:	4b05      	ldr	r3, [pc, #20]	; (b55c4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b55b0:	4a05      	ldr	r2, [pc, #20]	; (b55c8 <_GLOBAL__sub_I_System+0x20>)
   b55b2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b55b4:	2000      	movs	r0, #0
   b55b6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b55ba:	f7ff be81 	b.w	b52c0 <set_system_mode>
   b55be:	bf00      	nop
   b55c0:	2003e694 	.word	0x2003e694
   b55c4:	2003e688 	.word	0x2003e688
   b55c8:	ffff0000 	.word	0xffff0000

000b55cc <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b55cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b55d0:	1e93      	subs	r3, r2, #2
{
   b55d2:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b55d4:	2b22      	cmp	r3, #34	; 0x22
   b55d6:	f04f 0300 	mov.w	r3, #0
{
   b55da:	460d      	mov	r5, r1
   b55dc:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b55de:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b55e2:	d927      	bls.n	b5634 <ltoa+0x68>

      if (10 == base && N < 0L)
   b55e4:	2800      	cmp	r0, #0
   b55e6:	da2a      	bge.n	b563e <ltoa+0x72>
      {
            *head++ = '-';
   b55e8:	462e      	mov	r6, r5
   b55ea:	232d      	movs	r3, #45	; 0x2d
   b55ec:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b55f0:	4240      	negs	r0, r0
   b55f2:	240a      	movs	r4, #10
      *tail-- = '\0';
   b55f4:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b55f8:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b55fc:	4622      	mov	r2, r4
   b55fe:	4601      	mov	r1, r0
   b5600:	a801      	add	r0, sp, #4
   b5602:	f002 f9f0 	bl	b79e6 <ldiv>
   b5606:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b5608:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b560a:	2b09      	cmp	r3, #9
   b560c:	bfcc      	ite	gt
   b560e:	2237      	movgt	r2, #55	; 0x37
   b5610:	2230      	movle	r2, #48	; 0x30
   b5612:	fa52 f383 	uxtab	r3, r2, r3
   b5616:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b561a:	f108 0801 	add.w	r8, r8, #1
   b561e:	2800      	cmp	r0, #0
   b5620:	d1ec      	bne.n	b55fc <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b5622:	4642      	mov	r2, r8
   b5624:	1c79      	adds	r1, r7, #1
   b5626:	4630      	mov	r0, r6
   b5628:	f002 f9f1 	bl	b7a0e <memcpy>
      return str;
}
   b562c:	4628      	mov	r0, r5
   b562e:	b00c      	add	sp, #48	; 0x30
   b5630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b5634:	2a0a      	cmp	r2, #10
   b5636:	d0d5      	beq.n	b55e4 <ltoa+0x18>
      if (uarg)
   b5638:	b118      	cbz	r0, b5642 <ltoa+0x76>
   b563a:	462e      	mov	r6, r5
   b563c:	e7da      	b.n	b55f4 <ltoa+0x28>
   b563e:	240a      	movs	r4, #10
   b5640:	e7fa      	b.n	b5638 <ltoa+0x6c>
      else  *tail-- = '0';
   b5642:	2330      	movs	r3, #48	; 0x30
   b5644:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b5648:	462e      	mov	r6, r5
   b564a:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b564e:	f04f 0802 	mov.w	r8, #2
   b5652:	e7e6      	b.n	b5622 <ltoa+0x56>

000b5654 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5654:	b510      	push	{r4, lr}
   b5656:	4604      	mov	r4, r0
{
	free(buffer);
   b5658:	6800      	ldr	r0, [r0, #0]
   b565a:	f7ff ff05 	bl	b5468 <free>
}
   b565e:	4620      	mov	r0, r4
   b5660:	bd10      	pop	{r4, pc}

000b5662 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5662:	b510      	push	{r4, lr}
   b5664:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5666:	6800      	ldr	r0, [r0, #0]
   b5668:	b108      	cbz	r0, b566e <_ZN6String10invalidateEv+0xc>
   b566a:	f7ff fefd 	bl	b5468 <free>
	buffer = NULL;
   b566e:	2300      	movs	r3, #0
	capacity = len = 0;
   b5670:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5674:	6023      	str	r3, [r4, #0]
}
   b5676:	bd10      	pop	{r4, pc}

000b5678 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5678:	b538      	push	{r3, r4, r5, lr}
   b567a:	4604      	mov	r4, r0
   b567c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b567e:	6800      	ldr	r0, [r0, #0]
   b5680:	3101      	adds	r1, #1
   b5682:	f7ff fef9 	bl	b5478 <realloc>
	if (newbuffer) {
   b5686:	b110      	cbz	r0, b568e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5688:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b568c:	2001      	movs	r0, #1
	}
	return 0;
}
   b568e:	bd38      	pop	{r3, r4, r5, pc}

000b5690 <_ZN6String7reserveEj>:
{
   b5690:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5692:	6803      	ldr	r3, [r0, #0]
{
   b5694:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5696:	b123      	cbz	r3, b56a2 <_ZN6String7reserveEj+0x12>
   b5698:	6843      	ldr	r3, [r0, #4]
   b569a:	428b      	cmp	r3, r1
   b569c:	d301      	bcc.n	b56a2 <_ZN6String7reserveEj+0x12>
   b569e:	2001      	movs	r0, #1
}
   b56a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b56a2:	4620      	mov	r0, r4
   b56a4:	f7ff ffe8 	bl	b5678 <_ZN6String12changeBufferEj>
   b56a8:	2800      	cmp	r0, #0
   b56aa:	d0f9      	beq.n	b56a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b56ac:	68a3      	ldr	r3, [r4, #8]
   b56ae:	2b00      	cmp	r3, #0
   b56b0:	d1f5      	bne.n	b569e <_ZN6String7reserveEj+0xe>
   b56b2:	6822      	ldr	r2, [r4, #0]
   b56b4:	7013      	strb	r3, [r2, #0]
   b56b6:	e7f2      	b.n	b569e <_ZN6String7reserveEj+0xe>

000b56b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b56b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b56ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b56bc:	4611      	mov	r1, r2
   b56be:	9201      	str	r2, [sp, #4]
{
   b56c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b56c2:	f7ff ffe5 	bl	b5690 <_ZN6String7reserveEj>
   b56c6:	9a01      	ldr	r2, [sp, #4]
   b56c8:	b928      	cbnz	r0, b56d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b56ca:	4620      	mov	r0, r4
   b56cc:	f7ff ffc9 	bl	b5662 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b56d0:	4620      	mov	r0, r4
   b56d2:	b003      	add	sp, #12
   b56d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b56d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b56d8:	4629      	mov	r1, r5
   b56da:	6820      	ldr	r0, [r4, #0]
   b56dc:	f002 f997 	bl	b7a0e <memcpy>
	buffer[len] = 0;
   b56e0:	6822      	ldr	r2, [r4, #0]
   b56e2:	68a3      	ldr	r3, [r4, #8]
   b56e4:	2100      	movs	r1, #0
   b56e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b56e8:	e7f2      	b.n	b56d0 <_ZN6String4copyEPKcj+0x18>

000b56ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b56ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b56ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b56ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b56f2:	4604      	mov	r4, r0
	len = 0;
   b56f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b56f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b56f8:	b141      	cbz	r1, b570c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b56fa:	4608      	mov	r0, r1
   b56fc:	9101      	str	r1, [sp, #4]
   b56fe:	f002 fa0a 	bl	b7b16 <strlen>
   b5702:	9901      	ldr	r1, [sp, #4]
   b5704:	4602      	mov	r2, r0
   b5706:	4620      	mov	r0, r4
   b5708:	f7ff ffd6 	bl	b56b8 <_ZN6String4copyEPKcj>
}
   b570c:	4620      	mov	r0, r4
   b570e:	b002      	add	sp, #8
   b5710:	bd10      	pop	{r4, pc}

000b5712 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5712:	b513      	push	{r0, r1, r4, lr}
   b5714:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5716:	b159      	cbz	r1, b5730 <_ZN6StringaSEPKc+0x1e>
   b5718:	4608      	mov	r0, r1
   b571a:	9101      	str	r1, [sp, #4]
   b571c:	f002 f9fb 	bl	b7b16 <strlen>
   b5720:	9901      	ldr	r1, [sp, #4]
   b5722:	4602      	mov	r2, r0
   b5724:	4620      	mov	r0, r4
   b5726:	f7ff ffc7 	bl	b56b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b572a:	4620      	mov	r0, r4
   b572c:	b002      	add	sp, #8
   b572e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5730:	f7ff ff97 	bl	b5662 <_ZN6String10invalidateEv>
   b5734:	e7f9      	b.n	b572a <_ZN6StringaSEPKc+0x18>

000b5736 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b5736:	b510      	push	{r4, lr}
   b5738:	4604      	mov	r4, r0
   b573a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b573c:	2300      	movs	r3, #0
	capacity = 0;
   b573e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5742:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5744:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b5746:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b5748:	a901      	add	r1, sp, #4
   b574a:	f7ff ff3f 	bl	b55cc <ltoa>
	*this = buf;
   b574e:	a901      	add	r1, sp, #4
   b5750:	4620      	mov	r0, r4
   b5752:	f7ff ffde 	bl	b5712 <_ZN6StringaSEPKc>
}
   b5756:	4620      	mov	r0, r4
   b5758:	b00a      	add	sp, #40	; 0x28
   b575a:	bd10      	pop	{r4, pc}

000b575c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b575c:	b570      	push	{r4, r5, r6, lr}
   b575e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5760:	460e      	mov	r6, r1
   b5762:	b909      	cbnz	r1, b5768 <_ZN6String6concatEPKcj+0xc>
   b5764:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5766:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5768:	b16a      	cbz	r2, b5786 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b576a:	6884      	ldr	r4, [r0, #8]
   b576c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b576e:	4621      	mov	r1, r4
   b5770:	f7ff ff8e 	bl	b5690 <_ZN6String7reserveEj>
   b5774:	2800      	cmp	r0, #0
   b5776:	d0f5      	beq.n	b5764 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5778:	6828      	ldr	r0, [r5, #0]
   b577a:	68ab      	ldr	r3, [r5, #8]
   b577c:	4631      	mov	r1, r6
   b577e:	4418      	add	r0, r3
   b5780:	f002 f9a3 	bl	b7aca <strcpy>
	len = newlen;
   b5784:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5786:	2001      	movs	r0, #1
   b5788:	e7ed      	b.n	b5766 <_ZN6String6concatEPKcj+0xa>

000b578a <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b578a:	688a      	ldr	r2, [r1, #8]
   b578c:	6809      	ldr	r1, [r1, #0]
   b578e:	f7ff bfe5 	b.w	b575c <_ZN6String6concatEPKcj>

000b5792 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5792:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5794:	688a      	ldr	r2, [r1, #8]
   b5796:	6809      	ldr	r1, [r1, #0]
{
   b5798:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b579a:	f7ff ffdf 	bl	b575c <_ZN6String6concatEPKcj>
   b579e:	b910      	cbnz	r0, b57a6 <_ZplRK15StringSumHelperRK6String+0x14>
   b57a0:	4620      	mov	r0, r4
   b57a2:	f7ff ff5e 	bl	b5662 <_ZN6String10invalidateEv>
	return a;
}
   b57a6:	4620      	mov	r0, r4
   b57a8:	bd10      	pop	{r4, pc}
	...

000b57ac <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b57ac:	b40e      	push	{r1, r2, r3}
   b57ae:	b570      	push	{r4, r5, r6, lr}
   b57b0:	b087      	sub	sp, #28
   b57b2:	ad0b      	add	r5, sp, #44	; 0x2c
   b57b4:	4604      	mov	r4, r0
   b57b6:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b57ba:	9201      	str	r2, [sp, #4]
   b57bc:	462b      	mov	r3, r5
   b57be:	2105      	movs	r1, #5
   b57c0:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b57c2:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b57c4:	f7ff fe70 	bl	b54a8 <vsnprintf>
    va_end(marker);

    String result;
   b57c8:	490b      	ldr	r1, [pc, #44]	; (b57f8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b57ca:	4606      	mov	r6, r0
    String result;
   b57cc:	4620      	mov	r0, r4
   b57ce:	f7ff ff8c 	bl	b56ea <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b57d2:	4631      	mov	r1, r6
   b57d4:	4620      	mov	r0, r4
   b57d6:	f7ff ff5b 	bl	b5690 <_ZN6String7reserveEj>
    if (result.buffer) {
   b57da:	6820      	ldr	r0, [r4, #0]
   b57dc:	b130      	cbz	r0, b57ec <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b57de:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b57e0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b57e2:	462b      	mov	r3, r5
   b57e4:	1c71      	adds	r1, r6, #1
   b57e6:	f7ff fe5f 	bl	b54a8 <vsnprintf>
        va_end(marker);
        result.len = n;
   b57ea:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b57ec:	4620      	mov	r0, r4
   b57ee:	b007      	add	sp, #28
   b57f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b57f4:	b003      	add	sp, #12
   b57f6:	4770      	bx	lr
   b57f8:	000b9c18 	.word	0x000b9c18

000b57fc <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b57fc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b57fe:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5800:	4604      	mov	r4, r0
      if (_M_manager)
   b5802:	b113      	cbz	r3, b580a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5804:	2203      	movs	r2, #3
   b5806:	4601      	mov	r1, r0
   b5808:	4798      	blx	r3
    }
   b580a:	4620      	mov	r0, r4
   b580c:	bd10      	pop	{r4, pc}

000b580e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b580e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5810:	6843      	ldr	r3, [r0, #4]
   b5812:	3b01      	subs	r3, #1
    {
   b5814:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5816:	6043      	str	r3, [r0, #4]
   b5818:	b963      	cbnz	r3, b5834 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b581a:	6803      	ldr	r3, [r0, #0]
   b581c:	689b      	ldr	r3, [r3, #8]
   b581e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5820:	68a3      	ldr	r3, [r4, #8]
   b5822:	3b01      	subs	r3, #1
   b5824:	60a3      	str	r3, [r4, #8]
   b5826:	b92b      	cbnz	r3, b5834 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5828:	6823      	ldr	r3, [r4, #0]
   b582a:	4620      	mov	r0, r4
   b582c:	68db      	ldr	r3, [r3, #12]
    }
   b582e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5832:	4718      	bx	r3
    }
   b5834:	bd10      	pop	{r4, pc}

000b5836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5836:	b513      	push	{r0, r1, r4, lr}
   b5838:	460b      	mov	r3, r1
   b583a:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b583c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5840:	466c      	mov	r4, sp
   b5842:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5846:	e893 0003 	ldmia.w	r3, {r0, r1}
   b584a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b584e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5852:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5856:	b002      	add	sp, #8
   b5858:	bd10      	pop	{r4, pc}
	...

000b585c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b585c:	4802      	ldr	r0, [pc, #8]	; (b5868 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b585e:	2300      	movs	r3, #0
   b5860:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5862:	f7ff bc15 	b.w	b5090 <os_mutex_recursive_create>
   b5866:	bf00      	nop
   b5868:	2003e698 	.word	0x2003e698

000b586c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b586e:	4606      	mov	r6, r0
   b5870:	460d      	mov	r5, r1
  size_t n = 0;
   b5872:	188f      	adds	r7, r1, r2
   b5874:	2400      	movs	r4, #0
  while (size--) {
   b5876:	42bd      	cmp	r5, r7
   b5878:	d00c      	beq.n	b5894 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b587a:	6833      	ldr	r3, [r6, #0]
   b587c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5880:	689b      	ldr	r3, [r3, #8]
   b5882:	4630      	mov	r0, r6
   b5884:	4798      	blx	r3
     if (chunk>=0)
   b5886:	1e03      	subs	r3, r0, #0
   b5888:	db01      	blt.n	b588e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b588a:	441c      	add	r4, r3
  while (size--) {
   b588c:	e7f3      	b.n	b5876 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b588e:	2c00      	cmp	r4, #0
   b5890:	bf08      	it	eq
   b5892:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5894:	4620      	mov	r0, r4
   b5896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5898 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5898:	b513      	push	{r0, r1, r4, lr}
   b589a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b589c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b589e:	b159      	cbz	r1, b58b8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b58a0:	9101      	str	r1, [sp, #4]
   b58a2:	f002 f938 	bl	b7b16 <strlen>
   b58a6:	6823      	ldr	r3, [r4, #0]
   b58a8:	9901      	ldr	r1, [sp, #4]
   b58aa:	68db      	ldr	r3, [r3, #12]
   b58ac:	4602      	mov	r2, r0
   b58ae:	4620      	mov	r0, r4
    }
   b58b0:	b002      	add	sp, #8
   b58b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b58b6:	4718      	bx	r3
    }
   b58b8:	b002      	add	sp, #8
   b58ba:	bd10      	pop	{r4, pc}

000b58bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b58bc:	6803      	ldr	r3, [r0, #0]
   b58be:	689b      	ldr	r3, [r3, #8]
   b58c0:	4718      	bx	r3

000b58c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b58c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b58c4:	210d      	movs	r1, #13
{
   b58c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b58c8:	f7ff fff8 	bl	b58bc <_ZN5Print5printEc>
  n += print('\n');
   b58cc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b58ce:	4604      	mov	r4, r0
  n += print('\n');
   b58d0:	4628      	mov	r0, r5
   b58d2:	f7ff fff3 	bl	b58bc <_ZN5Print5printEc>
  return n;
}
   b58d6:	4420      	add	r0, r4
   b58d8:	bd38      	pop	{r3, r4, r5, pc}

000b58da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b58da:	b530      	push	{r4, r5, lr}
   b58dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b58de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b58e0:	2a01      	cmp	r2, #1
  *str = '\0';
   b58e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b58e6:	bf98      	it	ls
   b58e8:	220a      	movls	r2, #10
   b58ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b58ec:	460d      	mov	r5, r1
   b58ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b58f2:	fb01 5312 	mls	r3, r1, r2, r5
   b58f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b58fa:	2b09      	cmp	r3, #9
   b58fc:	bf94      	ite	ls
   b58fe:	3330      	addls	r3, #48	; 0x30
   b5900:	3337      	addhi	r3, #55	; 0x37
   b5902:	b2db      	uxtb	r3, r3
  } while(n);
   b5904:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5906:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b590a:	d9ef      	bls.n	b58ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b590c:	4621      	mov	r1, r4
   b590e:	f7ff ffc3 	bl	b5898 <_ZN5Print5writeEPKc>
}
   b5912:	b00b      	add	sp, #44	; 0x2c
   b5914:	bd30      	pop	{r4, r5, pc}

000b5916 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b591a:	b086      	sub	sp, #24
   b591c:	af00      	add	r7, sp, #0
   b591e:	4605      	mov	r5, r0
   b5920:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5922:	1d38      	adds	r0, r7, #4
   b5924:	2114      	movs	r1, #20
{
   b5926:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5928:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b592a:	f7ff fdbd 	bl	b54a8 <vsnprintf>

    if (n<bufsize)
   b592e:	2813      	cmp	r0, #19
   b5930:	d80e      	bhi.n	b5950 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5932:	1d39      	adds	r1, r7, #4
   b5934:	4628      	mov	r0, r5
   b5936:	f7ff ffaf 	bl	b5898 <_ZN5Print5writeEPKc>
   b593a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b593c:	b11e      	cbz	r6, b5946 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b593e:	4628      	mov	r0, r5
   b5940:	f7ff ffbf 	bl	b58c2 <_ZN5Print7printlnEv>
   b5944:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5946:	4620      	mov	r0, r4
   b5948:	3718      	adds	r7, #24
   b594a:	46bd      	mov	sp, r7
   b594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5950:	f100 0308 	add.w	r3, r0, #8
   b5954:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5958:	46e8      	mov	r8, sp
        char bigger[n+1];
   b595a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b595e:	4622      	mov	r2, r4
   b5960:	1c41      	adds	r1, r0, #1
   b5962:	683b      	ldr	r3, [r7, #0]
   b5964:	4668      	mov	r0, sp
   b5966:	f7ff fd9f 	bl	b54a8 <vsnprintf>
  return write(str);
   b596a:	4669      	mov	r1, sp
   b596c:	4628      	mov	r0, r5
   b596e:	f7ff ff93 	bl	b5898 <_ZN5Print5writeEPKc>
   b5972:	4604      	mov	r4, r0
   b5974:	46c5      	mov	sp, r8
   b5976:	e7e1      	b.n	b593c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5978 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5978:	4b01      	ldr	r3, [pc, #4]	; (b5980 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b597a:	4a02      	ldr	r2, [pc, #8]	; (b5984 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b597c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b597e:	4770      	bx	lr
   b5980:	2003e69c 	.word	0x2003e69c
   b5984:	000b9d94 	.word	0x000b9d94

000b5988 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b5988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b598c:	4a15      	ldr	r2, [pc, #84]	; (b59e4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b598e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b59f0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b5992:	e9d2 6300 	ldrd	r6, r3, [r2]
   b5996:	1980      	adds	r0, r0, r6
   b5998:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b599c:	4b12      	ldr	r3, [pc, #72]	; (b59e8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b599e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b59a2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b59a6:	1986      	adds	r6, r0, r6
   b59a8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b59ac:	42bb      	cmp	r3, r7
   b59ae:	bf08      	it	eq
   b59b0:	42b2      	cmpeq	r2, r6
{
   b59b2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b59b4:	d013      	beq.n	b59de <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b59b6:	a903      	add	r1, sp, #12
   b59b8:	4668      	mov	r0, sp
   b59ba:	e9cd 6700 	strd	r6, r7, [sp]
   b59be:	f7ff fda3 	bl	b5508 <localtime_r>
	calendar_time.tm_year += 1900;
   b59c2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b59c4:	4d09      	ldr	r5, [pc, #36]	; (b59ec <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b59c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b59ca:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b59cc:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b59ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b59d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b59d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b59d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b59d6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b59da:	6823      	ldr	r3, [r4, #0]
   b59dc:	602b      	str	r3, [r5, #0]
    }
}
   b59de:	b00c      	add	sp, #48	; 0x30
   b59e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b59e4:	2003e6d0 	.word	0x2003e6d0
   b59e8:	2003e6c8 	.word	0x2003e6c8
   b59ec:	2003e6a4 	.word	0x2003e6a4
   b59f0:	2003e6d8 	.word	0x2003e6d8

000b59f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b59f4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b59f6:	2000      	movs	r0, #0
   b59f8:	f7ff fd1e 	bl	b5438 <spark_sync_time_pending>
   b59fc:	b128      	cbz	r0, b5a0a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b59fe:	f7ff fd03 	bl	b5408 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5a02:	f080 0001 	eor.w	r0, r0, #1
   b5a06:	b2c0      	uxtb	r0, r0
    }
   b5a08:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5a0a:	2001      	movs	r0, #1
   b5a0c:	e7fc      	b.n	b5a08 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b5a10 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b5a10:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b5a12:	f7ff ffb9 	bl	b5988 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b5a16:	4b02      	ldr	r3, [pc, #8]	; (b5a20 <_ZN9TimeClass5monthEx+0x10>)
   b5a18:	6918      	ldr	r0, [r3, #16]
}
   b5a1a:	3001      	adds	r0, #1
   b5a1c:	bd08      	pop	{r3, pc}
   b5a1e:	bf00      	nop
   b5a20:	2003e6a4 	.word	0x2003e6a4

000b5a24 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b5a24:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b5a26:	2000      	movs	r0, #0
   b5a28:	f7ff fb0a 	bl	b5040 <hal_rtc_time_is_valid>
    if (rtcstate)
   b5a2c:	4604      	mov	r4, r0
   b5a2e:	b9a0      	cbnz	r0, b5a5a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b5a30:	f7ff fc3e 	bl	b52b0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b5a34:	2801      	cmp	r0, #1
   b5a36:	d110      	bne.n	b5a5a <_ZN9TimeClass7isValidEv+0x36>
   b5a38:	4620      	mov	r0, r4
   b5a3a:	f7ff fc61 	bl	b5300 <system_thread_get_state>
   b5a3e:	b960      	cbnz	r0, b5a5a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b5a40:	f7ff ffd8 	bl	b59f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b5a44:	b910      	cbnz	r0, b5a4c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b5a46:	f7ff fcd7 	bl	b53f8 <spark_process>
        while (_while() && !_condition()) {
   b5a4a:	e7f9      	b.n	b5a40 <_ZN9TimeClass7isValidEv+0x1c>
   b5a4c:	f7ff ffd2 	bl	b59f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b5a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b5a54:	2000      	movs	r0, #0
   b5a56:	f7ff baf3 	b.w	b5040 <hal_rtc_time_is_valid>
}
   b5a5a:	4620      	mov	r0, r4
   b5a5c:	bd10      	pop	{r4, pc}

000b5a5e <_ZN9TimeClass3nowEv>:
{
   b5a5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b5a60:	f7ff ffe0 	bl	b5a24 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b5a64:	2210      	movs	r2, #16
   b5a66:	2100      	movs	r1, #0
   b5a68:	4668      	mov	r0, sp
   b5a6a:	f001 ffde 	bl	b7a2a <memset>
    hal_rtc_get_time(&tv, nullptr);
   b5a6e:	2100      	movs	r1, #0
   b5a70:	4668      	mov	r0, sp
   b5a72:	f7ff faed 	bl	b5050 <hal_rtc_get_time>
}
   b5a76:	9800      	ldr	r0, [sp, #0]
   b5a78:	b005      	add	sp, #20
   b5a7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5a80 <_ZN9TimeClass4hourEv>:
{
   b5a80:	b508      	push	{r3, lr}
	return hour(now());
   b5a82:	f7ff ffec 	bl	b5a5e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5a86:	17c1      	asrs	r1, r0, #31
   b5a88:	f7ff ff7e 	bl	b5988 <_ZL22Refresh_UnixTime_Cachex>
}
   b5a8c:	4b01      	ldr	r3, [pc, #4]	; (b5a94 <_ZN9TimeClass4hourEv+0x14>)
   b5a8e:	6898      	ldr	r0, [r3, #8]
   b5a90:	bd08      	pop	{r3, pc}
   b5a92:	bf00      	nop
   b5a94:	2003e6a4 	.word	0x2003e6a4

000b5a98 <_ZN9TimeClass6minuteEv>:
{
   b5a98:	b508      	push	{r3, lr}
	return minute(now());
   b5a9a:	f7ff ffe0 	bl	b5a5e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5a9e:	17c1      	asrs	r1, r0, #31
   b5aa0:	f7ff ff72 	bl	b5988 <_ZL22Refresh_UnixTime_Cachex>
}
   b5aa4:	4b01      	ldr	r3, [pc, #4]	; (b5aac <_ZN9TimeClass6minuteEv+0x14>)
   b5aa6:	6858      	ldr	r0, [r3, #4]
   b5aa8:	bd08      	pop	{r3, pc}
   b5aaa:	bf00      	nop
   b5aac:	2003e6a4 	.word	0x2003e6a4

000b5ab0 <_ZN9TimeClass3dayEv>:
{
   b5ab0:	b508      	push	{r3, lr}
	return day(now());
   b5ab2:	f7ff ffd4 	bl	b5a5e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5ab6:	17c1      	asrs	r1, r0, #31
   b5ab8:	f7ff ff66 	bl	b5988 <_ZL22Refresh_UnixTime_Cachex>
}
   b5abc:	4b01      	ldr	r3, [pc, #4]	; (b5ac4 <_ZN9TimeClass3dayEv+0x14>)
   b5abe:	68d8      	ldr	r0, [r3, #12]
   b5ac0:	bd08      	pop	{r3, pc}
   b5ac2:	bf00      	nop
   b5ac4:	2003e6a4 	.word	0x2003e6a4

000b5ac8 <_ZN9TimeClass5monthEv>:
{
   b5ac8:	b508      	push	{r3, lr}
	return month(now());
   b5aca:	f7ff ffc8 	bl	b5a5e <_ZN9TimeClass3nowEv>
}
   b5ace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b5ad2:	17c1      	asrs	r1, r0, #31
   b5ad4:	f7ff bf9c 	b.w	b5a10 <_ZN9TimeClass5monthEx>

000b5ad8 <_ZN9TimeClass4yearEv>:
{
   b5ad8:	b508      	push	{r3, lr}
	return year(now());
   b5ada:	f7ff ffc0 	bl	b5a5e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b5ade:	17c1      	asrs	r1, r0, #31
   b5ae0:	f7ff ff52 	bl	b5988 <_ZL22Refresh_UnixTime_Cachex>
}
   b5ae4:	4b01      	ldr	r3, [pc, #4]	; (b5aec <_ZN9TimeClass4yearEv+0x14>)
   b5ae6:	6958      	ldr	r0, [r3, #20]
   b5ae8:	bd08      	pop	{r3, pc}
   b5aea:	bf00      	nop
   b5aec:	2003e6a4 	.word	0x2003e6a4

000b5af0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5af0:	4b02      	ldr	r3, [pc, #8]	; (b5afc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5af2:	681a      	ldr	r2, [r3, #0]
   b5af4:	4b02      	ldr	r3, [pc, #8]	; (b5b00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5af6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5af8:	4770      	bx	lr
   b5afa:	bf00      	nop
   b5afc:	2003cd18 	.word	0x2003cd18
   b5b00:	2003e6a0 	.word	0x2003e6a0

000b5b04 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5b04:	2100      	movs	r1, #0
   b5b06:	f7ff bbe3 	b.w	b52d0 <system_delay_ms>
	...

000b5b0c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5b0c:	b510      	push	{r4, lr}
   b5b0e:	4b04      	ldr	r3, [pc, #16]	; (b5b20 <_ZN9TCPClientD1Ev+0x14>)
   b5b10:	6003      	str	r3, [r0, #0]
   b5b12:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5b14:	6980      	ldr	r0, [r0, #24]
   b5b16:	b108      	cbz	r0, b5b1c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5b18:	f7ff fe79 	bl	b580e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b5b1c:	4620      	mov	r0, r4
   b5b1e:	bd10      	pop	{r4, pc}
   b5b20:	000b9ea8 	.word	0x000b9ea8

000b5b24 <_ZN9TCPClientD0Ev>:
   b5b24:	b510      	push	{r4, lr}
   b5b26:	4604      	mov	r4, r0
   b5b28:	f7ff fff0 	bl	b5b0c <_ZN9TCPClientD1Ev>
   b5b2c:	4620      	mov	r0, r4
   b5b2e:	211c      	movs	r1, #28
   b5b30:	f7fe fab7 	bl	b40a2 <_ZdlPvj>
   b5b34:	4620      	mov	r0, r4
   b5b36:	bd10      	pop	{r4, pc}

000b5b38 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5b38:	4b01      	ldr	r3, [pc, #4]	; (b5b40 <_GLOBAL__sub_I_RGB+0x8>)
   b5b3a:	2200      	movs	r2, #0
   b5b3c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5b3e:	4770      	bx	lr
   b5b40:	2003e6e0 	.word	0x2003e6e0

000b5b44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5b44:	4b01      	ldr	r3, [pc, #4]	; (b5b4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5b46:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5b48:	4770      	bx	lr
   b5b4a:	bf00      	nop
   b5b4c:	2003cd1c 	.word	0x2003cd1c

000b5b50 <serialEventRun>:
{
   b5b50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5b52:	4b0b      	ldr	r3, [pc, #44]	; (b5b80 <serialEventRun+0x30>)
   b5b54:	b143      	cbz	r3, b5b68 <serialEventRun+0x18>
   b5b56:	f000 fc11 	bl	b637c <_Z16_fetch_usbserialv>
   b5b5a:	6803      	ldr	r3, [r0, #0]
   b5b5c:	691b      	ldr	r3, [r3, #16]
   b5b5e:	4798      	blx	r3
   b5b60:	2800      	cmp	r0, #0
   b5b62:	dd01      	ble.n	b5b68 <serialEventRun+0x18>
        serialEvent();
   b5b64:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5b68:	4b06      	ldr	r3, [pc, #24]	; (b5b84 <serialEventRun+0x34>)
   b5b6a:	b143      	cbz	r3, b5b7e <serialEventRun+0x2e>
   b5b6c:	f001 f922 	bl	b6db4 <_Z22__fetch_global_Serial1v>
   b5b70:	6803      	ldr	r3, [r0, #0]
   b5b72:	691b      	ldr	r3, [r3, #16]
   b5b74:	4798      	blx	r3
   b5b76:	2800      	cmp	r0, #0
   b5b78:	dd01      	ble.n	b5b7e <serialEventRun+0x2e>
        serialEvent1();
   b5b7a:	f3af 8000 	nop.w
}
   b5b7e:	bd08      	pop	{r3, pc}
	...

000b5b88 <_post_loop>:
{
   b5b88:	b508      	push	{r3, lr}
	serialEventRun();
   b5b8a:	f7ff ffe1 	bl	b5b50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5b8e:	f7ff fa4f 	bl	b5030 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5b92:	4b01      	ldr	r3, [pc, #4]	; (b5b98 <_post_loop+0x10>)
   b5b94:	6018      	str	r0, [r3, #0]
}
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	2003e744 	.word	0x2003e744

000b5b9c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5b9c:	4805      	ldr	r0, [pc, #20]	; (b5bb4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5b9e:	4a06      	ldr	r2, [pc, #24]	; (b5bb8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5ba0:	4906      	ldr	r1, [pc, #24]	; (b5bbc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5ba2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5ba4:	1a12      	subs	r2, r2, r0
   b5ba6:	f001 ff32 	bl	b7a0e <memcpy>
    __backup_sram_signature = signature;
   b5baa:	4b05      	ldr	r3, [pc, #20]	; (b5bc0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5bac:	4a05      	ldr	r2, [pc, #20]	; (b5bc4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5bae:	601a      	str	r2, [r3, #0]
}
   b5bb0:	bd08      	pop	{r3, pc}
   b5bb2:	bf00      	nop
   b5bb4:	2003f400 	.word	0x2003f400
   b5bb8:	2003f404 	.word	0x2003f404
   b5bbc:	000ba544 	.word	0x000ba544
   b5bc0:	2003f400 	.word	0x2003f400
   b5bc4:	9a271c1e 	.word	0x9a271c1e

000b5bc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5bc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5bca:	2300      	movs	r3, #0
   b5bcc:	9300      	str	r3, [sp, #0]
   b5bce:	461a      	mov	r2, r3
   b5bd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5bd4:	f7ff fba6 	bl	b5324 <system_ctrl_set_result>
}
   b5bd8:	b003      	add	sp, #12
   b5bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5be0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5be0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5be2:	8843      	ldrh	r3, [r0, #2]
   b5be4:	2b0a      	cmp	r3, #10
   b5be6:	d008      	beq.n	b5bfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5be8:	2b50      	cmp	r3, #80	; 0x50
   b5bea:	d10b      	bne.n	b5c04 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5bec:	4b09      	ldr	r3, [pc, #36]	; (b5c14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5bee:	681b      	ldr	r3, [r3, #0]
   b5bf0:	b14b      	cbz	r3, b5c06 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5bf2:	b003      	add	sp, #12
   b5bf4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5bf8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5bfa:	f7ff ffe5 	bl	b5bc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5bfe:	b003      	add	sp, #12
   b5c00:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5c04:	2300      	movs	r3, #0
   b5c06:	9300      	str	r3, [sp, #0]
   b5c08:	461a      	mov	r2, r3
   b5c0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5c0e:	f7ff fb89 	bl	b5324 <system_ctrl_set_result>
}
   b5c12:	e7f4      	b.n	b5bfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5c14:	2003e6f4 	.word	0x2003e6f4

000b5c18 <module_user_init_hook>:
{
   b5c18:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5c1a:	4812      	ldr	r0, [pc, #72]	; (b5c64 <module_user_init_hook+0x4c>)
   b5c1c:	2100      	movs	r1, #0
   b5c1e:	f7ff fc6b 	bl	b54f8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5c22:	4b11      	ldr	r3, [pc, #68]	; (b5c68 <module_user_init_hook+0x50>)
   b5c24:	681a      	ldr	r2, [r3, #0]
   b5c26:	4b11      	ldr	r3, [pc, #68]	; (b5c6c <module_user_init_hook+0x54>)
   b5c28:	429a      	cmp	r2, r3
   b5c2a:	4b11      	ldr	r3, [pc, #68]	; (b5c70 <module_user_init_hook+0x58>)
   b5c2c:	bf0c      	ite	eq
   b5c2e:	2201      	moveq	r2, #1
   b5c30:	2200      	movne	r2, #0
   b5c32:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5c34:	d001      	beq.n	b5c3a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5c36:	f7ff ffb1 	bl	b5b9c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5c3a:	f7ff f9f1 	bl	b5020 <HAL_RNG_GetRandomNumber>
   b5c3e:	4604      	mov	r4, r0
    srand(seed);
   b5c40:	f001 fefc 	bl	b7a3c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5c44:	4b0b      	ldr	r3, [pc, #44]	; (b5c74 <module_user_init_hook+0x5c>)
   b5c46:	b113      	cbz	r3, b5c4e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5c48:	4620      	mov	r0, r4
   b5c4a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5c4e:	2100      	movs	r1, #0
   b5c50:	4808      	ldr	r0, [pc, #32]	; (b5c74 <module_user_init_hook+0x5c>)
   b5c52:	f7ff fbf9 	bl	b5448 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5c5a:	4807      	ldr	r0, [pc, #28]	; (b5c78 <module_user_init_hook+0x60>)
   b5c5c:	2100      	movs	r1, #0
   b5c5e:	f7ff bb57 	b.w	b5310 <system_ctrl_set_app_request_handler>
   b5c62:	bf00      	nop
   b5c64:	000b5b45 	.word	0x000b5b45
   b5c68:	2003f400 	.word	0x2003f400
   b5c6c:	9a271c1e 	.word	0x9a271c1e
   b5c70:	2003e6f0 	.word	0x2003e6f0
   b5c74:	00000000 	.word	0x00000000
   b5c78:	000b5be1 	.word	0x000b5be1

000b5c7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5c7c:	4770      	bx	lr

000b5c7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5c7e:	2000      	movs	r0, #0
   b5c80:	4770      	bx	lr

000b5c82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5c82:	b510      	push	{r4, lr}
   b5c84:	2110      	movs	r1, #16
   b5c86:	4604      	mov	r4, r0
   b5c88:	f7fe fa0b 	bl	b40a2 <_ZdlPvj>
   b5c8c:	4620      	mov	r0, r4
   b5c8e:	bd10      	pop	{r4, pc}

000b5c90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5c90:	b508      	push	{r3, lr}
      { delete this; }
   b5c92:	f7ff fff6 	bl	b5c82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5c96:	bd08      	pop	{r3, pc}

000b5c98 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5c98:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5c9a:	2200      	movs	r2, #0
   b5c9c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5ca0:	6002      	str	r2, [r0, #0]
   b5ca2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5ca4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ca6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5ca8:	680c      	ldr	r4, [r1, #0]
   b5caa:	8085      	strh	r5, [r0, #4]
   b5cac:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5cae:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5cb0:	bd30      	pop	{r4, r5, pc}

000b5cb2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5cb2:	b510      	push	{r4, lr}
   b5cb4:	4604      	mov	r4, r0
    free((void*)msg_);
   b5cb6:	6800      	ldr	r0, [r0, #0]
   b5cb8:	f7ff fbd6 	bl	b5468 <free>
}
   b5cbc:	4620      	mov	r0, r4
   b5cbe:	bd10      	pop	{r4, pc}

000b5cc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5cc0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5cc2:	68c4      	ldr	r4, [r0, #12]
   b5cc4:	b1f4      	cbz	r4, b5d04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5cc6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5cc8:	2b02      	cmp	r3, #2
   b5cca:	d103      	bne.n	b5cd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5ccc:	f104 000c 	add.w	r0, r4, #12
   b5cd0:	f7ff ffef 	bl	b5cb2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5cd4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5cd6:	b135      	cbz	r5, b5ce6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5cd8:	4628      	mov	r0, r5
   b5cda:	f7ff fd8f 	bl	b57fc <_ZNSt14_Function_baseD1Ev>
   b5cde:	2110      	movs	r1, #16
   b5ce0:	4628      	mov	r0, r5
   b5ce2:	f7fe f9de 	bl	b40a2 <_ZdlPvj>
   b5ce6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5ce8:	b135      	cbz	r5, b5cf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5cea:	4628      	mov	r0, r5
   b5cec:	f7ff fd86 	bl	b57fc <_ZNSt14_Function_baseD1Ev>
   b5cf0:	2110      	movs	r1, #16
   b5cf2:	4628      	mov	r0, r5
   b5cf4:	f7fe f9d5 	bl	b40a2 <_ZdlPvj>
   b5cf8:	4620      	mov	r0, r4
   b5cfa:	2114      	movs	r1, #20
   b5cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5d00:	f7fe b9cf 	b.w	b40a2 <_ZdlPvj>
   b5d04:	bd38      	pop	{r3, r4, r5, pc}

000b5d06 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5d06:	680b      	ldr	r3, [r1, #0]
   b5d08:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5d0a:	684b      	ldr	r3, [r1, #4]
   b5d0c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5d0e:	b113      	cbz	r3, b5d16 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5d10:	685a      	ldr	r2, [r3, #4]
   b5d12:	3201      	adds	r2, #1
   b5d14:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5d16:	4770      	bx	lr

000b5d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5d1a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5d1c:	4668      	mov	r0, sp
   b5d1e:	460d      	mov	r5, r1
   b5d20:	f7ff fff1 	bl	b5d06 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5d24:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5d26:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5d28:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5d2a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5d2c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5d2e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5d30:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5d32:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5d34:	f7fe fb6a 	bl	b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5d38:	b135      	cbz	r5, b5d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5d3a:	1d28      	adds	r0, r5, #4
   b5d3c:	f7fe fb66 	bl	b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d40:	2108      	movs	r1, #8
   b5d42:	4628      	mov	r0, r5
   b5d44:	f7fe f9ad 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b5d48:	4620      	mov	r0, r4
   b5d4a:	b003      	add	sp, #12
   b5d4c:	bd30      	pop	{r4, r5, pc}

000b5d4e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5d4e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5d50:	b510      	push	{r4, lr}
      if (_M_empty())
   b5d52:	b90a      	cbnz	r2, b5d58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5d54:	f001 f890 	bl	b6e78 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5d5c:	68c3      	ldr	r3, [r0, #12]
   b5d5e:	4718      	bx	r3

000b5d60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5d60:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5d62:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5d64:	f100 0110 	add.w	r1, r0, #16
   b5d68:	f7ff fff1 	bl	b5d4e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5d6c:	bd08      	pop	{r3, pc}

000b5d6e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5d6e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5d70:	b510      	push	{r4, lr}
      if (_M_empty())
   b5d72:	b90a      	cbnz	r2, b5d78 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5d74:	f001 f880 	bl	b6e78 <_ZSt25__throw_bad_function_callv>
    }
   b5d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5d7c:	68c3      	ldr	r3, [r0, #12]
   b5d7e:	4718      	bx	r3

000b5d80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5d80:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5d82:	6800      	ldr	r0, [r0, #0]
   b5d84:	f100 0110 	add.w	r1, r0, #16
   b5d88:	f7ff fff1 	bl	b5d6e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5d8c:	bd08      	pop	{r3, pc}
	...

000b5d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5d90:	b538      	push	{r3, r4, r5, lr}
   b5d92:	2300      	movs	r3, #0
   b5d94:	4604      	mov	r4, r0
   b5d96:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5d98:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5d9a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5d9c:	f7fe f97b 	bl	b4096 <_Znwj>
   b5da0:	b128      	cbz	r0, b5dae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5da2:	2301      	movs	r3, #1
   b5da4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5da8:	4b02      	ldr	r3, [pc, #8]	; (b5db4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5daa:	6003      	str	r3, [r0, #0]
   b5dac:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5dae:	6020      	str	r0, [r4, #0]
	}
   b5db0:	4620      	mov	r0, r4
   b5db2:	bd38      	pop	{r3, r4, r5, pc}
   b5db4:	000b9dbc 	.word	0x000b9dbc

000b5db8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5db8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5dba:	2300      	movs	r3, #0
   b5dbc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5dbe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5dc0:	4604      	mov	r4, r0
   b5dc2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5dc4:	b12b      	cbz	r3, b5dd2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5dc6:	2202      	movs	r2, #2
   b5dc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5dca:	68eb      	ldr	r3, [r5, #12]
   b5dcc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5dce:	68ab      	ldr	r3, [r5, #8]
   b5dd0:	60a3      	str	r3, [r4, #8]
    }
   b5dd2:	4620      	mov	r0, r4
   b5dd4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5dd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5dda:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5ddc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5dde:	4668      	mov	r0, sp
   b5de0:	f7ff ff5a 	bl	b5c98 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5de4:	f04f 0302 	mov.w	r3, #2
   b5de8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5dec:	2a00      	cmp	r2, #0
   b5dee:	d103      	bne.n	b5df8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5df0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5df4:	2900      	cmp	r1, #0
   b5df6:	d1f7      	bne.n	b5de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5df8:	d125      	bne.n	b5e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5dfa:	f104 050c 	add.w	r5, r4, #12
   b5dfe:	4669      	mov	r1, sp
   b5e00:	4628      	mov	r0, r5
   b5e02:	f7ff ff49 	bl	b5c98 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5e06:	f3bf 8f5b 	dmb	ish
   b5e0a:	2301      	movs	r3, #1
   b5e0c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5e0e:	2000      	movs	r0, #0
   b5e10:	f104 0308 	add.w	r3, r4, #8
   b5e14:	f3bf 8f5b 	dmb	ish
   b5e18:	e853 6f00 	ldrex	r6, [r3]
   b5e1c:	e843 0200 	strex	r2, r0, [r3]
   b5e20:	2a00      	cmp	r2, #0
   b5e22:	d1f9      	bne.n	b5e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5e24:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5e28:	b16e      	cbz	r6, b5e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5e2a:	f7ff fa59 	bl	b52e0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5e2e:	b178      	cbz	r0, b5e50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5e30:	4629      	mov	r1, r5
   b5e32:	4630      	mov	r0, r6
   b5e34:	f7ff ff8b 	bl	b5d4e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5e38:	4630      	mov	r0, r6
   b5e3a:	f7ff fcdf 	bl	b57fc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5e3e:	2110      	movs	r1, #16
   b5e40:	4630      	mov	r0, r6
   b5e42:	f7fe f92e 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b5e46:	4668      	mov	r0, sp
   b5e48:	f7ff ff33 	bl	b5cb2 <_ZN8particle5ErrorD1Ev>
    }
   b5e4c:	b009      	add	sp, #36	; 0x24
   b5e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5e50:	4631      	mov	r1, r6
   b5e52:	a802      	add	r0, sp, #8
   b5e54:	f7ff ffb0 	bl	b5db8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5e58:	68e0      	ldr	r0, [r4, #12]
   b5e5a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5e5e:	b108      	cbz	r0, b5e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5e60:	f001 fe3c 	bl	b7adc <strdup>
        type_(type) {
   b5e64:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5e66:	2010      	movs	r0, #16
   b5e68:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5e6c:	f7fe f913 	bl	b4096 <_Znwj>
   b5e70:	4605      	mov	r5, r0
   b5e72:	b1e8      	cbz	r0, b5eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5e74:	2700      	movs	r7, #0
   b5e76:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5e78:	2018      	movs	r0, #24
   b5e7a:	f7fe f90c 	bl	b4096 <_Znwj>
   b5e7e:	4604      	mov	r4, r0
   b5e80:	b188      	cbz	r0, b5ea6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5e82:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5e84:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5e86:	a802      	add	r0, sp, #8
   b5e88:	f7ff fcd5 	bl	b5836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e8c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5e8e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e90:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e92:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5e94:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5e96:	a906      	add	r1, sp, #24
   b5e98:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e9a:	60e3      	str	r3, [r4, #12]
   b5e9c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5ea0:	9205      	str	r2, [sp, #20]
   b5ea2:	f7ff fef9 	bl	b5c98 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5ea6:	4b08      	ldr	r3, [pc, #32]	; (b5ec8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5ea8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5eaa:	4b08      	ldr	r3, [pc, #32]	; (b5ecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5eac:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5eae:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5eb0:	a806      	add	r0, sp, #24
   b5eb2:	f7ff fefe 	bl	b5cb2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5eb6:	a802      	add	r0, sp, #8
   b5eb8:	f7ff fca0 	bl	b57fc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5ebc:	2200      	movs	r2, #0
   b5ebe:	4629      	mov	r1, r5
   b5ec0:	4803      	ldr	r0, [pc, #12]	; (b5ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5ec2:	f7ff fa15 	bl	b52f0 <application_thread_invoke>
   b5ec6:	e7b7      	b.n	b5e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5ec8:	000b5d61 	.word	0x000b5d61
   b5ecc:	000b5fe5 	.word	0x000b5fe5
   b5ed0:	000b64c5 	.word	0x000b64c5

000b5ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ed8:	b08b      	sub	sp, #44	; 0x2c
   b5eda:	4605      	mov	r5, r0
   b5edc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5ee0:	460f      	mov	r7, r1
   b5ee2:	4690      	mov	r8, r2
   b5ee4:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5ee6:	f7ff fa8f 	bl	b5408 <spark_cloud_flag_connected>
   b5eea:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5eec:	4683      	mov	fp, r0
   b5eee:	bb38      	cbnz	r0, b5f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5ef0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5ef4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5ef6:	a905      	add	r1, sp, #20
   b5ef8:	4630      	mov	r0, r6
   b5efa:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5efe:	f7ff fecb 	bl	b5c98 <_ZN8particle5ErrorC1EOS0_>
   b5f02:	2014      	movs	r0, #20
   b5f04:	f7fe f8c7 	bl	b4096 <_Znwj>
   b5f08:	4604      	mov	r4, r0
   b5f0a:	b148      	cbz	r0, b5f20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5f0c:	2302      	movs	r3, #2
   b5f0e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5f10:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5f12:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5f16:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5f18:	4631      	mov	r1, r6
   b5f1a:	300c      	adds	r0, #12
   b5f1c:	f7ff febc 	bl	b5c98 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5f20:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5f22:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5f24:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5f28:	f7ff ff32 	bl	b5d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5f2c:	4630      	mov	r0, r6
   b5f2e:	f7ff fec0 	bl	b5cb2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5f32:	a805      	add	r0, sp, #20
   b5f34:	f7ff febd 	bl	b5cb2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5f38:	4628      	mov	r0, r5
   b5f3a:	b00b      	add	sp, #44	; 0x2c
   b5f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5f40:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5f42:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5f44:	2014      	movs	r0, #20
   b5f46:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5f4a:	9307      	str	r3, [sp, #28]
   b5f4c:	f7fe f8a3 	bl	b4096 <_Znwj>
   b5f50:	4601      	mov	r1, r0
   b5f52:	b118      	cbz	r0, b5f5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5f54:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5f58:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5f5a:	7044      	strb	r4, [r0, #1]
   b5f5c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5f5e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5f60:	f7ff ff16 	bl	b5d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5f64:	4b1e      	ldr	r3, [pc, #120]	; (b5fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5f66:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5f68:	2008      	movs	r0, #8
   b5f6a:	f7fe f894 	bl	b4096 <_Znwj>
   b5f6e:	4604      	mov	r4, r0
   b5f70:	b110      	cbz	r0, b5f78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5f72:	a903      	add	r1, sp, #12
   b5f74:	f7ff fec7 	bl	b5d06 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5f78:	9600      	str	r6, [sp, #0]
   b5f7a:	fa5f f38a 	uxtb.w	r3, sl
   b5f7e:	464a      	mov	r2, r9
   b5f80:	4641      	mov	r1, r8
   b5f82:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5f84:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5f86:	f7ff fa47 	bl	b5418 <spark_send_event>
   b5f8a:	b9b8      	cbnz	r0, b5fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5f8c:	9b03      	ldr	r3, [sp, #12]
   b5f8e:	785b      	ldrb	r3, [r3, #1]
   b5f90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5f94:	b993      	cbnz	r3, b5fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5f96:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5f9a:	a905      	add	r1, sp, #20
   b5f9c:	a803      	add	r0, sp, #12
   b5f9e:	9205      	str	r2, [sp, #20]
   b5fa0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5fa4:	f7ff ff18 	bl	b5dd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5fa8:	a805      	add	r0, sp, #20
   b5faa:	f7ff fe82 	bl	b5cb2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5fae:	a805      	add	r0, sp, #20
   b5fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5fb2:	f7ff feb1 	bl	b5d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5fb6:	a806      	add	r0, sp, #24
   b5fb8:	f7fe fa28 	bl	b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5fbc:	a903      	add	r1, sp, #12
   b5fbe:	a805      	add	r0, sp, #20
   b5fc0:	f7ff fea1 	bl	b5d06 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5fc4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5fc6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5fc8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5fca:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5fcc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5fce:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5fd0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5fd2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5fd4:	f7fe fa1a 	bl	b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5fd8:	a804      	add	r0, sp, #16
   b5fda:	f7fe fa17 	bl	b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5fde:	e7ab      	b.n	b5f38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5fe0:	000b6061 	.word	0x000b6061

000b5fe4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5fe4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5fe8:	4605      	mov	r5, r0
	switch (__op)
   b5fea:	d103      	bne.n	b5ff4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5fec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5fee:	6003      	str	r3, [r0, #0]
      }
   b5ff0:	2000      	movs	r0, #0
   b5ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5ff4:	2a02      	cmp	r2, #2
   b5ff6:	d010      	beq.n	b601a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5ff8:	2a03      	cmp	r2, #3
   b5ffa:	d1f9      	bne.n	b5ff0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5ffc:	6804      	ldr	r4, [r0, #0]
   b5ffe:	2c00      	cmp	r4, #0
   b6000:	d0f6      	beq.n	b5ff0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6002:	f104 0010 	add.w	r0, r4, #16
   b6006:	f7ff fe54 	bl	b5cb2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b600a:	4620      	mov	r0, r4
   b600c:	f7ff fbf6 	bl	b57fc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6010:	2118      	movs	r1, #24
   b6012:	4620      	mov	r0, r4
   b6014:	f7fe f845 	bl	b40a2 <_ZdlPvj>
   b6018:	e7ea      	b.n	b5ff0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b601a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b601c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b601e:	f7fe f83a 	bl	b4096 <_Znwj>
   b6022:	4604      	mov	r4, r0
   b6024:	b150      	cbz	r0, b603c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6026:	4631      	mov	r1, r6
   b6028:	f7ff fec6 	bl	b5db8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b602c:	6930      	ldr	r0, [r6, #16]
   b602e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6032:	b108      	cbz	r0, b6038 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6034:	f001 fd52 	bl	b7adc <strdup>
        type_(type) {
   b6038:	6120      	str	r0, [r4, #16]
   b603a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b603c:	602c      	str	r4, [r5, #0]
	}
   b603e:	e7d7      	b.n	b5ff0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6040 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6040:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6042:	2300      	movs	r3, #0
   b6044:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6046:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6048:	4604      	mov	r4, r0
   b604a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b604c:	b12b      	cbz	r3, b605a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b604e:	2202      	movs	r2, #2
   b6050:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6052:	68eb      	ldr	r3, [r5, #12]
   b6054:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6056:	68ab      	ldr	r3, [r5, #8]
   b6058:	60a3      	str	r3, [r4, #8]
    }
   b605a:	4620      	mov	r0, r4
   b605c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6060 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6060:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6062:	b089      	sub	sp, #36	; 0x24
   b6064:	4604      	mov	r4, r0
   b6066:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6068:	a801      	add	r0, sp, #4
   b606a:	4611      	mov	r1, r2
   b606c:	f7ff fe54 	bl	b5d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6070:	b1a4      	cbz	r4, b609c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6072:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6074:	b11d      	cbz	r5, b607e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6076:	4628      	mov	r0, r5
   b6078:	f001 fd30 	bl	b7adc <strdup>
   b607c:	4605      	mov	r5, r0
   b607e:	a801      	add	r0, sp, #4
   b6080:	a903      	add	r1, sp, #12
        type_(type) {
   b6082:	9503      	str	r5, [sp, #12]
   b6084:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6088:	f7ff fea6 	bl	b5dd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b608c:	a803      	add	r0, sp, #12
   b608e:	f7ff fe10 	bl	b5cb2 <_ZN8particle5ErrorD1Ev>
   b6092:	a802      	add	r0, sp, #8
   b6094:	f7fe f9ba 	bl	b440c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6098:	b009      	add	sp, #36	; 0x24
   b609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b609c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b609e:	2301      	movs	r3, #1
   b60a0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b60a4:	2a00      	cmp	r2, #0
   b60a6:	d103      	bne.n	b60b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b60a8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b60ac:	2900      	cmp	r1, #0
   b60ae:	d1f7      	bne.n	b60a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b60b0:	d1ef      	bne.n	b6092 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b60b2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b60b4:	f3bf 8f5b 	dmb	ish
   b60b8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b60ba:	1d2b      	adds	r3, r5, #4
   b60bc:	f3bf 8f5b 	dmb	ish
   b60c0:	e853 6f00 	ldrex	r6, [r3]
   b60c4:	e843 4200 	strex	r2, r4, [r3]
   b60c8:	2a00      	cmp	r2, #0
   b60ca:	d1f9      	bne.n	b60c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b60cc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b60d0:	2e00      	cmp	r6, #0
   b60d2:	d0de      	beq.n	b6092 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b60d4:	4620      	mov	r0, r4
   b60d6:	f7ff f903 	bl	b52e0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b60da:	4607      	mov	r7, r0
   b60dc:	b160      	cbz	r0, b60f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b60de:	f105 010c 	add.w	r1, r5, #12
   b60e2:	4630      	mov	r0, r6
   b60e4:	f7ff fe43 	bl	b5d6e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b60e8:	4630      	mov	r0, r6
   b60ea:	f7ff fb87 	bl	b57fc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b60ee:	2110      	movs	r1, #16
   b60f0:	4630      	mov	r0, r6
   b60f2:	f7fd ffd6 	bl	b40a2 <_ZdlPvj>
   b60f6:	e7cc      	b.n	b6092 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b60f8:	4631      	mov	r1, r6
   b60fa:	a803      	add	r0, sp, #12
   b60fc:	f7ff ffa0 	bl	b6040 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6100:	7b2b      	ldrb	r3, [r5, #12]
   b6102:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6106:	2010      	movs	r0, #16
   b6108:	f7fd ffc5 	bl	b4096 <_Znwj>
   b610c:	4605      	mov	r5, r0
   b610e:	b1d0      	cbz	r0, b6146 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6110:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6112:	2014      	movs	r0, #20
   b6114:	f7fd ffbf 	bl	b4096 <_Znwj>
   b6118:	4604      	mov	r4, r0
   b611a:	b178      	cbz	r0, b613c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b611c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b611e:	4601      	mov	r1, r0
   b6120:	a803      	add	r0, sp, #12
   b6122:	f7ff fb88 	bl	b5836 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6126:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6128:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b612a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b612c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b612e:	9205      	str	r2, [sp, #20]
   b6130:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6132:	60e3      	str	r3, [r4, #12]
   b6134:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6138:	9206      	str	r2, [sp, #24]
   b613a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b613c:	4b06      	ldr	r3, [pc, #24]	; (b6158 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b613e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6140:	4b06      	ldr	r3, [pc, #24]	; (b615c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6142:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6144:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6146:	a803      	add	r0, sp, #12
   b6148:	f7ff fb58 	bl	b57fc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b614c:	2200      	movs	r2, #0
   b614e:	4629      	mov	r1, r5
   b6150:	4803      	ldr	r0, [pc, #12]	; (b6160 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6152:	f7ff f8cd 	bl	b52f0 <application_thread_invoke>
   b6156:	e7c7      	b.n	b60e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6158:	000b5d81 	.word	0x000b5d81
   b615c:	000b6165 	.word	0x000b6165
   b6160:	000b64c5 	.word	0x000b64c5

000b6164 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6164:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6166:	b570      	push	{r4, r5, r6, lr}
   b6168:	4604      	mov	r4, r0
	switch (__op)
   b616a:	d103      	bne.n	b6174 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b616c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b616e:	6003      	str	r3, [r0, #0]
      }
   b6170:	2000      	movs	r0, #0
   b6172:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6174:	2a02      	cmp	r2, #2
   b6176:	d00c      	beq.n	b6192 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6178:	2a03      	cmp	r2, #3
   b617a:	d1f9      	bne.n	b6170 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b617c:	6804      	ldr	r4, [r0, #0]
   b617e:	2c00      	cmp	r4, #0
   b6180:	d0f6      	beq.n	b6170 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6182:	4620      	mov	r0, r4
   b6184:	f7ff fb3a 	bl	b57fc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6188:	2114      	movs	r1, #20
   b618a:	4620      	mov	r0, r4
   b618c:	f7fd ff89 	bl	b40a2 <_ZdlPvj>
   b6190:	e7ee      	b.n	b6170 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6192:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6194:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6196:	f7fd ff7e 	bl	b4096 <_Znwj>
   b619a:	4605      	mov	r5, r0
   b619c:	b120      	cbz	r0, b61a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b619e:	4631      	mov	r1, r6
   b61a0:	f7ff ff4e 	bl	b6040 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b61a4:	7c33      	ldrb	r3, [r6, #16]
   b61a6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b61a8:	6025      	str	r5, [r4, #0]
	}
   b61aa:	e7e1      	b.n	b6170 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b61ac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b61ac:	4770      	bx	lr

000b61ae <_ZN9IPAddressD0Ev>:
   b61ae:	b510      	push	{r4, lr}
   b61b0:	2118      	movs	r1, #24
   b61b2:	4604      	mov	r4, r0
   b61b4:	f7fd ff75 	bl	b40a2 <_ZdlPvj>
   b61b8:	4620      	mov	r0, r4
   b61ba:	bd10      	pop	{r4, pc}

000b61bc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b61bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b61be:	7d03      	ldrb	r3, [r0, #20]
   b61c0:	2b06      	cmp	r3, #6
{
   b61c2:	b08d      	sub	sp, #52	; 0x34
   b61c4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b61c6:	f100 0704 	add.w	r7, r0, #4
   b61ca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b61ce:	d012      	beq.n	b61f6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b61d0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b61d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b61d8:	220a      	movs	r2, #10
   b61da:	4630      	mov	r0, r6
   b61dc:	f7ff fb7d 	bl	b58da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b61e0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b61e2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b61e4:	d019      	beq.n	b621a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b61e6:	2c00      	cmp	r4, #0
   b61e8:	d0f4      	beq.n	b61d4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b61ea:	212e      	movs	r1, #46	; 0x2e
   b61ec:	4630      	mov	r0, r6
   b61ee:	f7ff fb65 	bl	b58bc <_ZN5Print5printEc>
   b61f2:	4404      	add	r4, r0
   b61f4:	e7ee      	b.n	b61d4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b61f6:	232f      	movs	r3, #47	; 0x2f
   b61f8:	466a      	mov	r2, sp
   b61fa:	4639      	mov	r1, r7
   b61fc:	200a      	movs	r0, #10
		buf[0] = 0;
   b61fe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6202:	f7fe ff4d 	bl	b50a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6206:	4668      	mov	r0, sp
   b6208:	f001 fc85 	bl	b7b16 <strlen>
   b620c:	6833      	ldr	r3, [r6, #0]
   b620e:	4602      	mov	r2, r0
   b6210:	68db      	ldr	r3, [r3, #12]
   b6212:	4669      	mov	r1, sp
   b6214:	4630      	mov	r0, r6
   b6216:	4798      	blx	r3
   b6218:	4604      	mov	r4, r0
    }
    return n;
}
   b621a:	4620      	mov	r0, r4
   b621c:	b00d      	add	sp, #52	; 0x34
   b621e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6220 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6220:	b510      	push	{r4, lr}
   b6222:	4b05      	ldr	r3, [pc, #20]	; (b6238 <_ZN9IPAddressC1Ev+0x18>)
   b6224:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6226:	2211      	movs	r2, #17
   b6228:	f840 3b04 	str.w	r3, [r0], #4
   b622c:	2100      	movs	r1, #0
   b622e:	f001 fbfc 	bl	b7a2a <memset>
}
   b6232:	4620      	mov	r0, r4
   b6234:	bd10      	pop	{r4, pc}
   b6236:	bf00      	nop
   b6238:	000b9dd8 	.word	0x000b9dd8

000b623c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b623c:	4603      	mov	r3, r0
   b623e:	4a07      	ldr	r2, [pc, #28]	; (b625c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6240:	b510      	push	{r4, lr}
   b6242:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6246:	f101 0210 	add.w	r2, r1, #16
   b624a:	f851 4b04 	ldr.w	r4, [r1], #4
   b624e:	f843 4b04 	str.w	r4, [r3], #4
   b6252:	4291      	cmp	r1, r2
   b6254:	d1f9      	bne.n	b624a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6256:	780a      	ldrb	r2, [r1, #0]
   b6258:	701a      	strb	r2, [r3, #0]
}
   b625a:	bd10      	pop	{r4, pc}
   b625c:	000b9dd8 	.word	0x000b9dd8

000b6260 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6260:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6262:	2b04      	cmp	r3, #4
   b6264:	d104      	bne.n	b6270 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6266:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6268:	3800      	subs	r0, #0
   b626a:	bf18      	it	ne
   b626c:	2001      	movne	r0, #1
   b626e:	4770      	bx	lr
    } else if (version() == 6) {
   b6270:	2b06      	cmp	r3, #6
   b6272:	d107      	bne.n	b6284 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6274:	6843      	ldr	r3, [r0, #4]
   b6276:	b93b      	cbnz	r3, b6288 <_ZNK9IPAddresscvbEv+0x28>
   b6278:	6883      	ldr	r3, [r0, #8]
   b627a:	b92b      	cbnz	r3, b6288 <_ZNK9IPAddresscvbEv+0x28>
   b627c:	68c3      	ldr	r3, [r0, #12]
   b627e:	b91b      	cbnz	r3, b6288 <_ZNK9IPAddresscvbEv+0x28>
   b6280:	6900      	ldr	r0, [r0, #16]
   b6282:	e7f1      	b.n	b6268 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6284:	2000      	movs	r0, #0
   b6286:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6288:	2001      	movs	r0, #1
}
   b628a:	4770      	bx	lr

000b628c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b628c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b628e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6292:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6296:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b629a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b629e:	2304      	movs	r3, #4
   b62a0:	6041      	str	r1, [r0, #4]
   b62a2:	7503      	strb	r3, [r0, #20]
}
   b62a4:	bd10      	pop	{r4, pc}
	...

000b62a8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b62a8:	b507      	push	{r0, r1, r2, lr}
   b62aa:	4b06      	ldr	r3, [pc, #24]	; (b62c4 <_ZN9IPAddressC1EPKh+0x1c>)
   b62ac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b62ae:	78cb      	ldrb	r3, [r1, #3]
   b62b0:	9300      	str	r3, [sp, #0]
   b62b2:	788b      	ldrb	r3, [r1, #2]
   b62b4:	784a      	ldrb	r2, [r1, #1]
   b62b6:	7809      	ldrb	r1, [r1, #0]
   b62b8:	f7ff ffe8 	bl	b628c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b62bc:	b003      	add	sp, #12
   b62be:	f85d fb04 	ldr.w	pc, [sp], #4
   b62c2:	bf00      	nop
   b62c4:	000b9dd8 	.word	0x000b9dd8

000b62c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b62c8:	7441      	strb	r1, [r0, #17]
}
   b62ca:	4770      	bx	lr

000b62cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b62cc:	4770      	bx	lr

000b62ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b62ce:	4770      	bx	lr

000b62d0 <_ZN9USBSerial4readEv>:
{
   b62d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b62d2:	2100      	movs	r1, #0
   b62d4:	7c00      	ldrb	r0, [r0, #16]
   b62d6:	f7fe ffcb 	bl	b5270 <HAL_USB_USART_Receive_Data>
}
   b62da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b62de:	bd08      	pop	{r3, pc}

000b62e0 <_ZN9USBSerial4peekEv>:
{
   b62e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b62e2:	2101      	movs	r1, #1
   b62e4:	7c00      	ldrb	r0, [r0, #16]
   b62e6:	f7fe ffc3 	bl	b5270 <HAL_USB_USART_Receive_Data>
}
   b62ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b62ee:	bd08      	pop	{r3, pc}

000b62f0 <_ZN9USBSerial17availableForWriteEv>:
{
   b62f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b62f2:	7c00      	ldrb	r0, [r0, #16]
   b62f4:	f7fe ffb4 	bl	b5260 <HAL_USB_USART_Available_Data_For_Write>
}
   b62f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b62fc:	bd08      	pop	{r3, pc}

000b62fe <_ZN9USBSerial9availableEv>:
{
   b62fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6300:	7c00      	ldrb	r0, [r0, #16]
   b6302:	f7fe ffa5 	bl	b5250 <HAL_USB_USART_Available_Data>
}
   b6306:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b630a:	bd08      	pop	{r3, pc}

000b630c <_ZN9USBSerial5writeEh>:
{
   b630c:	b513      	push	{r0, r1, r4, lr}
   b630e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6310:	7c00      	ldrb	r0, [r0, #16]
{
   b6312:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6314:	f7fe ffa4 	bl	b5260 <HAL_USB_USART_Available_Data_For_Write>
   b6318:	2800      	cmp	r0, #0
   b631a:	9901      	ldr	r1, [sp, #4]
   b631c:	dc01      	bgt.n	b6322 <_ZN9USBSerial5writeEh+0x16>
   b631e:	7c60      	ldrb	r0, [r4, #17]
   b6320:	b120      	cbz	r0, b632c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6322:	7c20      	ldrb	r0, [r4, #16]
   b6324:	f7fe ffac 	bl	b5280 <HAL_USB_USART_Send_Data>
   b6328:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b632c:	b002      	add	sp, #8
   b632e:	bd10      	pop	{r4, pc}

000b6330 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6330:	7c00      	ldrb	r0, [r0, #16]
   b6332:	f7fe bfad 	b.w	b5290 <HAL_USB_USART_Flush_Data>

000b6336 <_ZN9USBSerialD0Ev>:
   b6336:	b510      	push	{r4, lr}
   b6338:	2114      	movs	r1, #20
   b633a:	4604      	mov	r4, r0
   b633c:	f7fd feb1 	bl	b40a2 <_ZdlPvj>
   b6340:	4620      	mov	r0, r4
   b6342:	bd10      	pop	{r4, pc}

000b6344 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6344:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b634a:	4604      	mov	r4, r0
   b634c:	4608      	mov	r0, r1
   b634e:	2100      	movs	r1, #0
   b6350:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6354:	4b04      	ldr	r3, [pc, #16]	; (b6368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6356:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6358:	2301      	movs	r3, #1
  _serial = serial;
   b635a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b635c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b635e:	4611      	mov	r1, r2
   b6360:	f7fe ff6e 	bl	b5240 <HAL_USB_USART_Init>
}
   b6364:	4620      	mov	r0, r4
   b6366:	bd10      	pop	{r4, pc}
   b6368:	000b9dec 	.word	0x000b9dec

000b636c <_Z19acquireSerialBufferv>:
{
   b636c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b636e:	2214      	movs	r2, #20
{
   b6370:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6372:	2100      	movs	r1, #0
   b6374:	f001 fb59 	bl	b7a2a <memset>
}
   b6378:	4620      	mov	r0, r4
   b637a:	bd10      	pop	{r4, pc}

000b637c <_Z16_fetch_usbserialv>:
{
   b637c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b637e:	4c0f      	ldr	r4, [pc, #60]	; (b63bc <_Z16_fetch_usbserialv+0x40>)
{
   b6380:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6382:	a803      	add	r0, sp, #12
   b6384:	f7ff fff2 	bl	b636c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6388:	7821      	ldrb	r1, [r4, #0]
   b638a:	f3bf 8f5b 	dmb	ish
   b638e:	f011 0101 	ands.w	r1, r1, #1
   b6392:	d10f      	bne.n	b63b4 <_Z16_fetch_usbserialv+0x38>
   b6394:	4620      	mov	r0, r4
   b6396:	9101      	str	r1, [sp, #4]
   b6398:	f7fd fe85 	bl	b40a6 <__cxa_guard_acquire>
   b639c:	9901      	ldr	r1, [sp, #4]
   b639e:	b148      	cbz	r0, b63b4 <_Z16_fetch_usbserialv+0x38>
   b63a0:	aa03      	add	r2, sp, #12
   b63a2:	4807      	ldr	r0, [pc, #28]	; (b63c0 <_Z16_fetch_usbserialv+0x44>)
   b63a4:	f7ff ffce 	bl	b6344 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b63a8:	4620      	mov	r0, r4
   b63aa:	f7fd fe81 	bl	b40b0 <__cxa_guard_release>
   b63ae:	4805      	ldr	r0, [pc, #20]	; (b63c4 <_Z16_fetch_usbserialv+0x48>)
   b63b0:	f001 fb0c 	bl	b79cc <atexit>
	return _usbserial;
}
   b63b4:	4802      	ldr	r0, [pc, #8]	; (b63c0 <_Z16_fetch_usbserialv+0x44>)
   b63b6:	b008      	add	sp, #32
   b63b8:	bd10      	pop	{r4, pc}
   b63ba:	bf00      	nop
   b63bc:	2003e6f8 	.word	0x2003e6f8
   b63c0:	2003e6fc 	.word	0x2003e6fc
   b63c4:	000b62cd 	.word	0x000b62cd

000b63c8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b63c8:	4700      	bx	r0
	...

000b63cc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b63cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b63d0:	2400      	movs	r4, #0
{
   b63d2:	461d      	mov	r5, r3
   b63d4:	460f      	mov	r7, r1
   b63d6:	4690      	mov	r8, r2
   b63d8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b63da:	f7fe fe11 	bl	b5000 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b63de:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b63e0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b63e4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b63e8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b63ec:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b63f0:	bfa2      	ittt	ge
   b63f2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b63f6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b63fa:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b63fc:	4907      	ldr	r1, [pc, #28]	; (b641c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b63fe:	9400      	str	r4, [sp, #0]
   b6400:	4643      	mov	r3, r8
   b6402:	463a      	mov	r2, r7
   b6404:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b6406:	bfa8      	it	ge
   b6408:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b640c:	f7fe fdf0 	bl	b4ff0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b6410:	fab0 f080 	clz	r0, r0
   b6414:	0940      	lsrs	r0, r0, #5
   b6416:	b004      	add	sp, #16
   b6418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b641c:	000b63c9 	.word	0x000b63c9

000b6420 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6420:	4770      	bx	lr

000b6422 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6422:	7441      	strb	r1, [r0, #17]
}
   b6424:	4770      	bx	lr

000b6426 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6426:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6428:	7c00      	ldrb	r0, [r0, #16]
   b642a:	f7fe fe81 	bl	b5130 <hal_usart_available_data_for_write>
}
   b642e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6432:	bd08      	pop	{r3, pc}

000b6434 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6434:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6436:	7c00      	ldrb	r0, [r0, #16]
   b6438:	f7fe fe52 	bl	b50e0 <hal_usart_available>
}
   b643c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6440:	bd08      	pop	{r3, pc}

000b6442 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6442:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6444:	7c00      	ldrb	r0, [r0, #16]
   b6446:	f7fe fe5b 	bl	b5100 <hal_usart_peek>
}
   b644a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b644e:	bd08      	pop	{r3, pc}

000b6450 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6450:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6452:	7c00      	ldrb	r0, [r0, #16]
   b6454:	f7fe fe4c 	bl	b50f0 <hal_usart_read>
}
   b6458:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b645c:	bd08      	pop	{r3, pc}

000b645e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b645e:	7c00      	ldrb	r0, [r0, #16]
   b6460:	f7fe be56 	b.w	b5110 <hal_usart_flush>

000b6464 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6464:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6466:	7c45      	ldrb	r5, [r0, #17]
{
   b6468:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b646a:	b12d      	cbz	r5, b6478 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b646c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b646e:	b003      	add	sp, #12
   b6470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6474:	f7fe be2c 	b.w	b50d0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6478:	7c00      	ldrb	r0, [r0, #16]
   b647a:	9101      	str	r1, [sp, #4]
   b647c:	f7fe fe58 	bl	b5130 <hal_usart_available_data_for_write>
   b6480:	2800      	cmp	r0, #0
   b6482:	9901      	ldr	r1, [sp, #4]
   b6484:	dcf2      	bgt.n	b646c <_ZN11USARTSerial5writeEh+0x8>
}
   b6486:	4628      	mov	r0, r5
   b6488:	b003      	add	sp, #12
   b648a:	bd30      	pop	{r4, r5, pc}

000b648c <_ZN11USARTSerialD0Ev>:
   b648c:	b510      	push	{r4, lr}
   b648e:	2114      	movs	r1, #20
   b6490:	4604      	mov	r4, r0
   b6492:	f7fd fe06 	bl	b40a2 <_ZdlPvj>
   b6496:	4620      	mov	r0, r4
   b6498:	bd10      	pop	{r4, pc}
	...

000b649c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b649c:	b510      	push	{r4, lr}
   b649e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b64a2:	4604      	mov	r4, r0
   b64a4:	4608      	mov	r0, r1
   b64a6:	4611      	mov	r1, r2
   b64a8:	2200      	movs	r2, #0
   b64aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b64ae:	4b04      	ldr	r3, [pc, #16]	; (b64c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b64b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b64b2:	2301      	movs	r3, #1
  _serial = serial;
   b64b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b64b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b64b8:	f7fe fe42 	bl	b5140 <hal_usart_init_ex>
}
   b64bc:	4620      	mov	r0, r4
   b64be:	bd10      	pop	{r4, pc}
   b64c0:	000b9e1c 	.word	0x000b9e1c

000b64c4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b64c4:	b510      	push	{r4, lr}
      if (_M_empty())
   b64c6:	6883      	ldr	r3, [r0, #8]
   b64c8:	4604      	mov	r4, r0
   b64ca:	b90b      	cbnz	r3, b64d0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b64cc:	f000 fcd4 	bl	b6e78 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b64d0:	68c3      	ldr	r3, [r0, #12]
   b64d2:	4798      	blx	r3
      if (_M_manager)
   b64d4:	68a3      	ldr	r3, [r4, #8]
   b64d6:	b11b      	cbz	r3, b64e0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b64d8:	2203      	movs	r2, #3
   b64da:	4621      	mov	r1, r4
   b64dc:	4620      	mov	r0, r4
   b64de:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b64e0:	4620      	mov	r0, r4
   b64e2:	2110      	movs	r1, #16
}
   b64e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b64e8:	f7fd bddb 	b.w	b40a2 <_ZdlPvj>

000b64ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b64ec:	4770      	bx	lr

000b64ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b64ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64f0:	4606      	mov	r6, r0
   b64f2:	4615      	mov	r5, r2
   b64f4:	460c      	mov	r4, r1
   b64f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b64f8:	42bc      	cmp	r4, r7
   b64fa:	d006      	beq.n	b650a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b64fc:	6833      	ldr	r3, [r6, #0]
   b64fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6502:	689b      	ldr	r3, [r3, #8]
   b6504:	4630      	mov	r0, r6
   b6506:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6508:	e7f6      	b.n	b64f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b650a:	4628      	mov	r0, r5
   b650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b650e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b650e:	7c00      	ldrb	r0, [r0, #16]
   b6510:	2200      	movs	r2, #0
   b6512:	f7fe be1d 	b.w	b5150 <hal_i2c_write>

000b6516 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6516:	7c00      	ldrb	r0, [r0, #16]
   b6518:	2100      	movs	r1, #0
   b651a:	f7fe be21 	b.w	b5160 <hal_i2c_available>

000b651e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b651e:	7c00      	ldrb	r0, [r0, #16]
   b6520:	2100      	movs	r1, #0
   b6522:	f7fe be25 	b.w	b5170 <hal_i2c_read>

000b6526 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6526:	7c00      	ldrb	r0, [r0, #16]
   b6528:	2100      	movs	r1, #0
   b652a:	f7fe be29 	b.w	b5180 <hal_i2c_peek>

000b652e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b652e:	7c00      	ldrb	r0, [r0, #16]
   b6530:	2100      	movs	r1, #0
   b6532:	f7fe be2d 	b.w	b5190 <hal_i2c_flush>

000b6536 <_ZN7TwoWireD0Ev>:
   b6536:	b510      	push	{r4, lr}
   b6538:	2114      	movs	r1, #20
   b653a:	4604      	mov	r4, r0
   b653c:	f7fd fdb1 	bl	b40a2 <_ZdlPvj>
   b6540:	4620      	mov	r0, r4
   b6542:	bd10      	pop	{r4, pc}

000b6544 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6544:	b510      	push	{r4, lr}
   b6546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b654a:	4604      	mov	r4, r0
   b654c:	4608      	mov	r0, r1
   b654e:	2100      	movs	r1, #0
   b6550:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6554:	4b03      	ldr	r3, [pc, #12]	; (b6564 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6556:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6558:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b655a:	4611      	mov	r1, r2
   b655c:	f7fe fe28 	bl	b51b0 <hal_i2c_init>
}
   b6560:	4620      	mov	r0, r4
   b6562:	bd10      	pop	{r4, pc}
   b6564:	000b9e4c 	.word	0x000b9e4c

000b6568 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6568:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b656a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b656c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6570:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6572:	2201      	movs	r2, #1
   b6574:	f04f 33ff 	mov.w	r3, #4294967295
   b6578:	f10d 0107 	add.w	r1, sp, #7
   b657c:	47a0      	blx	r4
}
   b657e:	b002      	add	sp, #8
   b6580:	bd10      	pop	{r4, pc}

000b6582 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6582:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6584:	6803      	ldr	r3, [r0, #0]
   b6586:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6588:	f04f 33ff 	mov.w	r3, #4294967295
   b658c:	46a4      	mov	ip, r4
}
   b658e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6592:	4760      	bx	ip

000b6594 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6594:	b513      	push	{r0, r1, r4, lr}
   b6596:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6598:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b659a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b659e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b65a0:	f10d 0107 	add.w	r1, sp, #7
   b65a4:	2201      	movs	r2, #1
   b65a6:	47a0      	blx	r4
}
   b65a8:	b002      	add	sp, #8
   b65aa:	bd10      	pop	{r4, pc}

000b65ac <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b65ac:	b510      	push	{r4, lr}
   b65ae:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b65b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b65b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b65b8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b65ba:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b65bc:	d008      	beq.n	b65d0 <_ZN9TCPClient4readEv+0x24>
   b65be:	6963      	ldr	r3, [r4, #20]
   b65c0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b65c4:	1c51      	adds	r1, r2, #1
   b65c6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b65ca:	4413      	add	r3, r2
   b65cc:	7918      	ldrb	r0, [r3, #4]
}
   b65ce:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b65d0:	6803      	ldr	r3, [r0, #0]
   b65d2:	691b      	ldr	r3, [r3, #16]
   b65d4:	4798      	blx	r3
   b65d6:	2800      	cmp	r0, #0
   b65d8:	d1f1      	bne.n	b65be <_ZN9TCPClient4readEv+0x12>
   b65da:	f04f 30ff 	mov.w	r0, #4294967295
   b65de:	e7f6      	b.n	b65ce <_ZN9TCPClient4readEv+0x22>

000b65e0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b65e0:	4770      	bx	lr

000b65e2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b65e2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b65e4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b65e6:	43c0      	mvns	r0, r0
   b65e8:	0fc0      	lsrs	r0, r0, #31
   b65ea:	4770      	bx	lr

000b65ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65ec:	4770      	bx	lr
	...

000b65f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b65f0:	4b06      	ldr	r3, [pc, #24]	; (b660c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b65f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b65f4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b65f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b65fa:	d005      	beq.n	b6608 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b65fc:	4608      	mov	r0, r1
   b65fe:	f000 fc3f 	bl	b6e80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6602:	2800      	cmp	r0, #0
   b6604:	bf08      	it	eq
   b6606:	2400      	moveq	r4, #0
      }
   b6608:	4620      	mov	r0, r4
   b660a:	bd10      	pop	{r4, pc}
   b660c:	000b9d8c 	.word	0x000b9d8c

000b6610 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6610:	b510      	push	{r4, lr}
   b6612:	21ac      	movs	r1, #172	; 0xac
   b6614:	4604      	mov	r4, r0
   b6616:	f7fd fd44 	bl	b40a2 <_ZdlPvj>
   b661a:	4620      	mov	r0, r4
   b661c:	bd10      	pop	{r4, pc}

000b661e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b661e:	21ac      	movs	r1, #172	; 0xac
   b6620:	f7fd bd3f 	b.w	b40a2 <_ZdlPvj>

000b6624 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6628:	f04f 0800 	mov.w	r8, #0
   b662c:	b086      	sub	sp, #24
   b662e:	461c      	mov	r4, r3
   b6630:	f8c0 8004 	str.w	r8, [r0, #4]
   b6634:	4605      	mov	r5, r0
   b6636:	460e      	mov	r6, r1
   b6638:	4617      	mov	r7, r2
    struct timeval tv = {};
   b663a:	4641      	mov	r1, r8
   b663c:	2210      	movs	r2, #16
   b663e:	a802      	add	r0, sp, #8
   b6640:	f001 f9f3 	bl	b7a2a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6644:	1c63      	adds	r3, r4, #1
   b6646:	d009      	beq.n	b665c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b664c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6650:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6654:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6658:	435c      	muls	r4, r3
   b665a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b665c:	6968      	ldr	r0, [r5, #20]
   b665e:	2310      	movs	r3, #16
   b6660:	9300      	str	r3, [sp, #0]
   b6662:	6800      	ldr	r0, [r0, #0]
   b6664:	ab02      	add	r3, sp, #8
   b6666:	f241 0205 	movw	r2, #4101	; 0x1005
   b666a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b666e:	f7fe fda7 	bl	b51c0 <sock_setsockopt>
    if (ret < 0) {
   b6672:	2800      	cmp	r0, #0
   b6674:	da07      	bge.n	b6686 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6676:	f7fe ff2f 	bl	b54d8 <__errno>
   b667a:	6803      	ldr	r3, [r0, #0]
   b667c:	606b      	str	r3, [r5, #4]
        return 0;
   b667e:	2000      	movs	r0, #0
}
   b6680:	b006      	add	sp, #24
   b6682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6686:	6968      	ldr	r0, [r5, #20]
   b6688:	2300      	movs	r3, #0
   b668a:	6800      	ldr	r0, [r0, #0]
   b668c:	463a      	mov	r2, r7
   b668e:	4631      	mov	r1, r6
   b6690:	f7fe fdb6 	bl	b5200 <sock_send>
    if (ret < 0) {
   b6694:	1e03      	subs	r3, r0, #0
   b6696:	dbee      	blt.n	b6676 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6698:	4618      	mov	r0, r3
   b669a:	e7f1      	b.n	b6680 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b669c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b669c:	b530      	push	{r4, r5, lr}
   b669e:	b087      	sub	sp, #28
   b66a0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b66a2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b66a4:	4668      	mov	r0, sp
   b66a6:	f7ff fdff 	bl	b62a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b66aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66ac:	3404      	adds	r4, #4
   b66ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66b0:	682b      	ldr	r3, [r5, #0]
   b66b2:	7023      	strb	r3, [r4, #0]
    }
   b66b4:	b007      	add	sp, #28
   b66b6:	bd30      	pop	{r4, r5, pc}

000b66b8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b66b8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b66ba:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b66bc:	4b05      	ldr	r3, [pc, #20]	; (b66d4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b66be:	4604      	mov	r4, r0
   b66c0:	358c      	adds	r5, #140	; 0x8c
   b66c2:	f844 3b04 	str.w	r3, [r4], #4
   b66c6:	4606      	mov	r6, r0
   b66c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66cc:	682b      	ldr	r3, [r5, #0]
   b66ce:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b66d0:	4630      	mov	r0, r6
   b66d2:	bd70      	pop	{r4, r5, r6, pc}
   b66d4:	000b9dd8 	.word	0x000b9dd8

000b66d8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b66dc:	4698      	mov	r8, r3
    stop();
   b66de:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66e0:	b093      	sub	sp, #76	; 0x4c
   b66e2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b66e4:	2400      	movs	r4, #0
    stop();
   b66e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66e8:	4606      	mov	r6, r0
   b66ea:	4617      	mov	r7, r2
    stop();
   b66ec:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b66ee:	4628      	mov	r0, r5
   b66f0:	466b      	mov	r3, sp
   b66f2:	4622      	mov	r2, r4
   b66f4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b66f6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b66f8:	f7fe fc6a 	bl	b4fd0 <netdb_getaddrinfo>
   b66fc:	4605      	mov	r5, r0
   b66fe:	2800      	cmp	r0, #0
   b6700:	d163      	bne.n	b67ca <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6702:	9b00      	ldr	r3, [sp, #0]
   b6704:	2b00      	cmp	r3, #0
   b6706:	d04b      	beq.n	b67a0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6708:	695b      	ldr	r3, [r3, #20]
   b670a:	2b00      	cmp	r3, #0
   b670c:	d048      	beq.n	b67a0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b670e:	a806      	add	r0, sp, #24
   b6710:	f7ff fd86 	bl	b6220 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6714:	9b00      	ldr	r3, [sp, #0]
   b6716:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6718:	7863      	ldrb	r3, [r4, #1]
   b671a:	2b02      	cmp	r3, #2
   b671c:	d104      	bne.n	b6728 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b671e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6720:	a806      	add	r0, sp, #24
   b6722:	f7ff ffbb 	bl	b669c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6726:	e026      	b.n	b6776 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6728:	2b0a      	cmp	r3, #10
   b672a:	d124      	bne.n	b6776 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b672c:	2211      	movs	r2, #17
   b672e:	4629      	mov	r1, r5
   b6730:	a801      	add	r0, sp, #4
   b6732:	f001 f97a 	bl	b7a2a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6736:	68a3      	ldr	r3, [r4, #8]
   b6738:	2b00      	cmp	r3, #0
   b673a:	d038      	beq.n	b67ae <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b673c:	f104 0308 	add.w	r3, r4, #8
   b6740:	f10d 0c04 	add.w	ip, sp, #4
   b6744:	3418      	adds	r4, #24
   b6746:	6818      	ldr	r0, [r3, #0]
   b6748:	6859      	ldr	r1, [r3, #4]
   b674a:	4662      	mov	r2, ip
   b674c:	c203      	stmia	r2!, {r0, r1}
   b674e:	3308      	adds	r3, #8
   b6750:	42a3      	cmp	r3, r4
   b6752:	4694      	mov	ip, r2
   b6754:	d1f7      	bne.n	b6746 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6756:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6758:	a901      	add	r1, sp, #4
   b675a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b675c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6760:	f7ff fd6c 	bl	b623c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6764:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6768:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b676c:	ac07      	add	r4, sp, #28
   b676e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6770:	f8dc 3000 	ldr.w	r3, [ip]
   b6774:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6776:	a806      	add	r0, sp, #24
   b6778:	f7ff fd72 	bl	b6260 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b677c:	b180      	cbz	r0, b67a0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b677e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6780:	ad07      	add	r5, sp, #28
   b6782:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6786:	4b12      	ldr	r3, [pc, #72]	; (b67d0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6788:	930c      	str	r3, [sp, #48]	; 0x30
   b678a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b678c:	ac0d      	add	r4, sp, #52	; 0x34
   b678e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6790:	682b      	ldr	r3, [r5, #0]
   b6792:	7023      	strb	r3, [r4, #0]
   b6794:	463a      	mov	r2, r7
   b6796:	4643      	mov	r3, r8
   b6798:	a90c      	add	r1, sp, #48	; 0x30
   b679a:	4630      	mov	r0, r6
   b679c:	47c8      	blx	r9
   b679e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b67a0:	9800      	ldr	r0, [sp, #0]
   b67a2:	f7fe fc0d 	bl	b4fc0 <netdb_freeaddrinfo>
}
   b67a6:	4628      	mov	r0, r5
   b67a8:	b013      	add	sp, #76	; 0x4c
   b67aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b67ae:	68e3      	ldr	r3, [r4, #12]
   b67b0:	2b00      	cmp	r3, #0
   b67b2:	d1c3      	bne.n	b673c <_ZN9TCPClient7connectEPKctm+0x64>
   b67b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b67b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b67bc:	f7fe fc78 	bl	b50b0 <inet_htonl>
   b67c0:	4581      	cmp	r9, r0
   b67c2:	d1bb      	bne.n	b673c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b67c4:	f104 0114 	add.w	r1, r4, #20
   b67c8:	e7aa      	b.n	b6720 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b67ca:	4625      	mov	r5, r4
   b67cc:	e7e8      	b.n	b67a0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b67ce:	bf00      	nop
   b67d0:	000b9dd8 	.word	0x000b9dd8

000b67d4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b67d4:	b538      	push	{r3, r4, r5, lr}
   b67d6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b67d8:	681a      	ldr	r2, [r3, #0]
   b67da:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b67dc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b67de:	da10      	bge.n	b6802 <_ZN9TCPClient9connectedEv+0x2e>
   b67e0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b67e4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b67e8:	429a      	cmp	r2, r3
   b67ea:	d10a      	bne.n	b6802 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b67ec:	6803      	ldr	r3, [r0, #0]
   b67ee:	691b      	ldr	r3, [r3, #16]
   b67f0:	4798      	blx	r3
        if (!rv) {
   b67f2:	4604      	mov	r4, r0
   b67f4:	b928      	cbnz	r0, b6802 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b67f6:	682b      	ldr	r3, [r5, #0]
   b67f8:	4628      	mov	r0, r5
   b67fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b67fc:	4798      	blx	r3
        rv = available();
   b67fe:	4620      	mov	r0, r4
}
   b6800:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6802:	2001      	movs	r0, #1
   b6804:	e7fc      	b.n	b6800 <_ZN9TCPClient9connectedEv+0x2c>

000b6806 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6806:	b510      	push	{r4, lr}
   b6808:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b680a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b680e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6812:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6814:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6816:	d005      	beq.n	b6824 <_ZN9TCPClient4peekEv+0x1e>
   b6818:	6963      	ldr	r3, [r4, #20]
   b681a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b681e:	4413      	add	r3, r2
   b6820:	7918      	ldrb	r0, [r3, #4]
}
   b6822:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6824:	6803      	ldr	r3, [r0, #0]
   b6826:	691b      	ldr	r3, [r3, #16]
   b6828:	4798      	blx	r3
   b682a:	2800      	cmp	r0, #0
   b682c:	d1f4      	bne.n	b6818 <_ZN9TCPClient4peekEv+0x12>
   b682e:	f04f 30ff 	mov.w	r0, #4294967295
   b6832:	e7f6      	b.n	b6822 <_ZN9TCPClient4peekEv+0x1c>

000b6834 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6836:	6943      	ldr	r3, [r0, #20]
   b6838:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b683a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b683e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6842:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6844:	4605      	mov	r5, r0
   b6846:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6848:	d016      	beq.n	b6878 <_ZN9TCPClient4readEPhj+0x44>
   b684a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b684c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6850:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6854:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6856:	42bc      	cmp	r4, r7
   b6858:	bf28      	it	cs
   b685a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b685c:	3304      	adds	r3, #4
   b685e:	4622      	mov	r2, r4
   b6860:	4419      	add	r1, r3
   b6862:	4630      	mov	r0, r6
   b6864:	f001 f8d3 	bl	b7a0e <memcpy>
   b6868:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b686a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b686e:	4423      	add	r3, r4
   b6870:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6874:	4620      	mov	r0, r4
   b6876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6878:	6803      	ldr	r3, [r0, #0]
   b687a:	691b      	ldr	r3, [r3, #16]
   b687c:	4798      	blx	r3
   b687e:	2800      	cmp	r0, #0
   b6880:	d1e3      	bne.n	b684a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6882:	f04f 34ff 	mov.w	r4, #4294967295
   b6886:	e7f5      	b.n	b6874 <_ZN9TCPClient4readEPhj+0x40>

000b6888 <_ZN9TCPClient12flush_bufferEv>:
   b6888:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b688a:	2300      	movs	r3, #0
   b688c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6890:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6892:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6896:	4770      	bx	lr

000b6898 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b689c:	461f      	mov	r7, r3
    stop();
   b689e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b68a0:	460c      	mov	r4, r1
    stop();
   b68a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b68a4:	b08a      	sub	sp, #40	; 0x28
   b68a6:	4605      	mov	r5, r0
   b68a8:	4616      	mov	r6, r2
    stop();
   b68aa:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b68ac:	7d23      	ldrb	r3, [r4, #20]
   b68ae:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b68b2:	2b04      	cmp	r3, #4
   b68b4:	bf0c      	ite	eq
   b68b6:	2002      	moveq	r0, #2
   b68b8:	200a      	movne	r0, #10
   b68ba:	2206      	movs	r2, #6
   b68bc:	2101      	movs	r1, #1
   b68be:	f7fe fca7 	bl	b5210 <sock_socket>
   b68c2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b68c6:	696b      	ldr	r3, [r5, #20]
   b68c8:	681b      	ldr	r3, [r3, #0]
   b68ca:	2b00      	cmp	r3, #0
   b68cc:	da08      	bge.n	b68e0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b68ce:	682b      	ldr	r3, [r5, #0]
   b68d0:	4628      	mov	r0, r5
   b68d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68d4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b68d6:	4798      	blx	r3
}
   b68d8:	4620      	mov	r0, r4
   b68da:	b00a      	add	sp, #40	; 0x28
   b68dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b68e0:	4628      	mov	r0, r5
   b68e2:	f7ff ffd1 	bl	b6888 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b68e6:	b1b7      	cbz	r7, b6916 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b68e8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68ea:	a903      	add	r1, sp, #12
   b68ec:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b68ee:	9303      	str	r3, [sp, #12]
   b68f0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68f4:	f7fe fb8c 	bl	b5010 <if_index_to_name>
   b68f8:	2800      	cmp	r0, #0
   b68fa:	d1e8      	bne.n	b68ce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b68fc:	6968      	ldr	r0, [r5, #20]
   b68fe:	2306      	movs	r3, #6
   b6900:	9300      	str	r3, [sp, #0]
   b6902:	6800      	ldr	r0, [r0, #0]
   b6904:	ab03      	add	r3, sp, #12
   b6906:	f241 020b 	movw	r2, #4107	; 0x100b
   b690a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b690e:	f7fe fc57 	bl	b51c0 <sock_setsockopt>
   b6912:	2800      	cmp	r0, #0
   b6914:	d1db      	bne.n	b68ce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6916:	221c      	movs	r2, #28
   b6918:	2100      	movs	r1, #0
   b691a:	a803      	add	r0, sp, #12
   b691c:	f001 f885 	bl	b7a2a <memset>
    if (ip.version() == 4) {
   b6920:	7d23      	ldrb	r3, [r4, #20]
   b6922:	2b04      	cmp	r3, #4
   b6924:	d11d      	bne.n	b6962 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6926:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b692a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b692c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6930:	f7fe fbc6 	bl	b50c0 <inet_htons>
   b6934:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6938:	6860      	ldr	r0, [r4, #4]
   b693a:	f7fe fbb9 	bl	b50b0 <inet_htonl>
   b693e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6940:	696b      	ldr	r3, [r5, #20]
   b6942:	221c      	movs	r2, #28
   b6944:	6818      	ldr	r0, [r3, #0]
   b6946:	a903      	add	r1, sp, #12
   b6948:	f7fe fc4a 	bl	b51e0 <sock_connect>
   b694c:	2800      	cmp	r0, #0
   b694e:	d1be      	bne.n	b68ce <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6950:	3404      	adds	r4, #4
   b6952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6954:	696d      	ldr	r5, [r5, #20]
   b6956:	358c      	adds	r5, #140	; 0x8c
   b6958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b695a:	6823      	ldr	r3, [r4, #0]
   b695c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b695e:	2401      	movs	r4, #1
   b6960:	e7ba      	b.n	b68d8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6962:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6966:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6968:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b696c:	f7fe fba8 	bl	b50c0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6970:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6972:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6976:	1d23      	adds	r3, r4, #4
   b6978:	f104 0714 	add.w	r7, r4, #20
   b697c:	6818      	ldr	r0, [r3, #0]
   b697e:	6859      	ldr	r1, [r3, #4]
   b6980:	4632      	mov	r2, r6
   b6982:	c203      	stmia	r2!, {r0, r1}
   b6984:	3308      	adds	r3, #8
   b6986:	42bb      	cmp	r3, r7
   b6988:	4616      	mov	r6, r2
   b698a:	d1f7      	bne.n	b697c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b698c:	e7d8      	b.n	b6940 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6990 <_ZN9TCPClient9availableEv>:
{
   b6990:	b530      	push	{r4, r5, lr}
   b6992:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6994:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6998:	b08b      	sub	sp, #44	; 0x2c
   b699a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b699c:	b12b      	cbz	r3, b69aa <_ZN9TCPClient9availableEv+0x1a>
   b699e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b69a2:	429a      	cmp	r2, r3
   b69a4:	d101      	bne.n	b69aa <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b69a6:	f7ff ff6f 	bl	b6888 <_ZN9TCPClient12flush_bufferEv>
   b69aa:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b69ac:	6808      	ldr	r0, [r1, #0]
   b69ae:	2800      	cmp	r0, #0
   b69b0:	db18      	blt.n	b69e4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b69b2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b69b6:	2d7f      	cmp	r5, #127	; 0x7f
   b69b8:	d814      	bhi.n	b69e4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b69ba:	3104      	adds	r1, #4
   b69bc:	2308      	movs	r3, #8
   b69be:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b69c2:	4429      	add	r1, r5
   b69c4:	f7fe fc14 	bl	b51f0 <sock_recv>
            if (ret > 0) {
   b69c8:	2800      	cmp	r0, #0
   b69ca:	dd13      	ble.n	b69f4 <_ZN9TCPClient9availableEv+0x64>
   b69cc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b69ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b69d2:	b90a      	cbnz	r2, b69d8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b69d4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b69d8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b69da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b69de:	4410      	add	r0, r2
   b69e0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b69e4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b69e6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b69ea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b69ee:	1ac0      	subs	r0, r0, r3
   b69f0:	b00b      	add	sp, #44	; 0x2c
   b69f2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b69f4:	f7fe fd70 	bl	b54d8 <__errno>
   b69f8:	6803      	ldr	r3, [r0, #0]
   b69fa:	2b0b      	cmp	r3, #11
   b69fc:	d0f2      	beq.n	b69e4 <_ZN9TCPClient9availableEv+0x54>
   b69fe:	f7fe fd6b 	bl	b54d8 <__errno>
   b6a02:	6803      	ldr	r3, [r0, #0]
   b6a04:	2b0b      	cmp	r3, #11
   b6a06:	d0ed      	beq.n	b69e4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6a08:	2320      	movs	r3, #32
   b6a0a:	2500      	movs	r5, #0
   b6a0c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6a10:	f7fe fd62 	bl	b54d8 <__errno>
   b6a14:	6803      	ldr	r3, [r0, #0]
   b6a16:	9301      	str	r3, [sp, #4]
   b6a18:	4b08      	ldr	r3, [pc, #32]	; (b6a3c <_ZN9TCPClient9availableEv+0xac>)
   b6a1a:	4909      	ldr	r1, [pc, #36]	; (b6a40 <_ZN9TCPClient9availableEv+0xb0>)
   b6a1c:	9300      	str	r3, [sp, #0]
   b6a1e:	aa02      	add	r2, sp, #8
   b6a20:	462b      	mov	r3, r5
   b6a22:	2032      	movs	r0, #50	; 0x32
   b6a24:	f7fe fc3c 	bl	b52a0 <log_message>
                    sock_close(d_->sock);
   b6a28:	6963      	ldr	r3, [r4, #20]
   b6a2a:	6818      	ldr	r0, [r3, #0]
   b6a2c:	f7fe fbd0 	bl	b51d0 <sock_close>
   b6a30:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6a32:	f04f 32ff 	mov.w	r2, #4294967295
   b6a36:	601a      	str	r2, [r3, #0]
   b6a38:	e7d4      	b.n	b69e4 <_ZN9TCPClient9availableEv+0x54>
   b6a3a:	bf00      	nop
   b6a3c:	000b9e73 	.word	0x000b9e73
   b6a40:	000b9e6c 	.word	0x000b9e6c

000b6a44 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6a44:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6a46:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6a48:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6a4a:	6818      	ldr	r0, [r3, #0]
   b6a4c:	2800      	cmp	r0, #0
   b6a4e:	db01      	blt.n	b6a54 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6a50:	f7fe fbbe 	bl	b51d0 <sock_close>
   b6a54:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6a56:	f04f 32ff 	mov.w	r2, #4294967295
   b6a5a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6a5c:	6960      	ldr	r0, [r4, #20]
   b6a5e:	2211      	movs	r2, #17
   b6a60:	2100      	movs	r1, #0
   b6a62:	308c      	adds	r0, #140	; 0x8c
   b6a64:	f000 ffe1 	bl	b7a2a <memset>
    flush_buffer();
   b6a68:	4620      	mov	r0, r4
}
   b6a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6a6e:	f7ff bf0b 	b.w	b6888 <_ZN9TCPClient12flush_bufferEv>

000b6a72 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6a72:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6a74:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6a76:	4604      	mov	r4, r0
          total(0) {
   b6a78:	6001      	str	r1, [r0, #0]
   b6a7a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6a7e:	3088      	adds	r0, #136	; 0x88
   b6a80:	f7ff fbce 	bl	b6220 <_ZN9IPAddressC1Ev>
}
   b6a84:	4620      	mov	r0, r4
   b6a86:	bd10      	pop	{r4, pc}

000b6a88 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a8a:	2300      	movs	r3, #0
   b6a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6a90:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6a94:	4a0e      	ldr	r2, [pc, #56]	; (b6ad0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6a96:	6103      	str	r3, [r0, #16]
   b6a98:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6a9a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6a9c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6a9e:	20ac      	movs	r0, #172	; 0xac
   b6aa0:	9101      	str	r1, [sp, #4]
   b6aa2:	f7fd faf8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6aa6:	1e05      	subs	r5, r0, #0
   b6aa8:	f105 060c 	add.w	r6, r5, #12
   b6aac:	d008      	beq.n	b6ac0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6aae:	2301      	movs	r3, #1
   b6ab0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6ab4:	4b07      	ldr	r3, [pc, #28]	; (b6ad4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6ab6:	9901      	ldr	r1, [sp, #4]
   b6ab8:	602b      	str	r3, [r5, #0]
   b6aba:	4630      	mov	r0, r6
   b6abc:	f7ff ffd9 	bl	b6a72 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6ac0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6ac2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6ac6:	f7ff fedf 	bl	b6888 <_ZN9TCPClient12flush_bufferEv>
}
   b6aca:	b002      	add	sp, #8
   b6acc:	bd70      	pop	{r4, r5, r6, pc}
   b6ace:	bf00      	nop
   b6ad0:	000b9ea8 	.word	0x000b9ea8
   b6ad4:	000b9e8c 	.word	0x000b9e8c

000b6ad8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6ad8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6ada:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6ade:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6ae0:	f7ff ffd2 	bl	b6a88 <_ZN9TCPClientC1Ei>
}
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	bd10      	pop	{r4, pc}

000b6ae8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6ae8:	b510      	push	{r4, lr}
   b6aea:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6aec:	6800      	ldr	r0, [r0, #0]
   b6aee:	2800      	cmp	r0, #0
   b6af0:	db01      	blt.n	b6af6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6af2:	f7fe fb6d 	bl	b51d0 <sock_close>
    }
}
   b6af6:	4620      	mov	r0, r4
   b6af8:	bd10      	pop	{r4, pc}

000b6afa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6afa:	300c      	adds	r0, #12
   b6afc:	f7ff bff4 	b.w	b6ae8 <_ZN9TCPClient4DataD1Ev>

000b6b00 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6b00:	2200      	movs	r2, #0
   b6b02:	6840      	ldr	r0, [r0, #4]
   b6b04:	4611      	mov	r1, r2
   b6b06:	f7fe bc2f 	b.w	b5368 <network_ready>

000b6b0a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6b0a:	2200      	movs	r2, #0
   b6b0c:	6840      	ldr	r0, [r0, #4]
   b6b0e:	4611      	mov	r1, r2
   b6b10:	f7fe bc4a 	b.w	b53a8 <network_listening>

000b6b14 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6b14:	2200      	movs	r2, #0
   b6b16:	6840      	ldr	r0, [r0, #4]
   b6b18:	4611      	mov	r1, r2
   b6b1a:	f7fe bc55 	b.w	b53c8 <network_get_listen_timeout>

000b6b1e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6b1e:	6840      	ldr	r0, [r0, #4]
   b6b20:	2200      	movs	r2, #0
   b6b22:	f7fe bc49 	b.w	b53b8 <network_set_listen_timeout>

000b6b26 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6b26:	6840      	ldr	r0, [r0, #4]
   b6b28:	2200      	movs	r2, #0
   b6b2a:	f081 0101 	eor.w	r1, r1, #1
   b6b2e:	f7fe bc33 	b.w	b5398 <network_listen>

000b6b32 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6b32:	2300      	movs	r3, #0
   b6b34:	6840      	ldr	r0, [r0, #4]
   b6b36:	461a      	mov	r2, r3
   b6b38:	4619      	mov	r1, r3
   b6b3a:	f7fe bc25 	b.w	b5388 <network_off>

000b6b3e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6b3e:	2300      	movs	r3, #0
   b6b40:	6840      	ldr	r0, [r0, #4]
   b6b42:	461a      	mov	r2, r3
   b6b44:	4619      	mov	r1, r3
   b6b46:	f7fe bc17 	b.w	b5378 <network_on>

000b6b4a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6b4a:	2200      	movs	r2, #0
   b6b4c:	6840      	ldr	r0, [r0, #4]
   b6b4e:	4611      	mov	r1, r2
   b6b50:	f7fe bbfa 	b.w	b5348 <network_connecting>

000b6b54 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6b54:	6840      	ldr	r0, [r0, #4]
   b6b56:	2200      	movs	r2, #0
   b6b58:	2102      	movs	r1, #2
   b6b5a:	f7fe bbfd 	b.w	b5358 <network_disconnect>

000b6b5e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6b5e:	2300      	movs	r3, #0
   b6b60:	6840      	ldr	r0, [r0, #4]
   b6b62:	461a      	mov	r2, r3
   b6b64:	f7fe bbe8 	b.w	b5338 <network_connect>

000b6b68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6b68:	4b02      	ldr	r3, [pc, #8]	; (b6b74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6b6a:	2204      	movs	r2, #4
   b6b6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6b6e:	4a02      	ldr	r2, [pc, #8]	; (b6b78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6b70:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6b72:	4770      	bx	lr
   b6b74:	2003e710 	.word	0x2003e710
   b6b78:	000b9ef4 	.word	0x000b9ef4

000b6b7c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6b7c:	2300      	movs	r3, #0
   b6b7e:	6840      	ldr	r0, [r0, #4]
   b6b80:	461a      	mov	r2, r3
   b6b82:	f7fe bbd9 	b.w	b5338 <network_connect>

000b6b86 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6b86:	6840      	ldr	r0, [r0, #4]
   b6b88:	2200      	movs	r2, #0
   b6b8a:	2102      	movs	r1, #2
   b6b8c:	f7fe bbe4 	b.w	b5358 <network_disconnect>

000b6b90 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6b90:	2200      	movs	r2, #0
   b6b92:	6840      	ldr	r0, [r0, #4]
   b6b94:	4611      	mov	r1, r2
   b6b96:	f7fe bbd7 	b.w	b5348 <network_connecting>

000b6b9a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6b9a:	2200      	movs	r2, #0
   b6b9c:	6840      	ldr	r0, [r0, #4]
   b6b9e:	4611      	mov	r1, r2
   b6ba0:	f7fe bbe2 	b.w	b5368 <network_ready>

000b6ba4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6ba4:	2300      	movs	r3, #0
   b6ba6:	6840      	ldr	r0, [r0, #4]
   b6ba8:	461a      	mov	r2, r3
   b6baa:	4619      	mov	r1, r3
   b6bac:	f7fe bbe4 	b.w	b5378 <network_on>

000b6bb0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6bb0:	2300      	movs	r3, #0
   b6bb2:	6840      	ldr	r0, [r0, #4]
   b6bb4:	461a      	mov	r2, r3
   b6bb6:	4619      	mov	r1, r3
   b6bb8:	f7fe bbe6 	b.w	b5388 <network_off>

000b6bbc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6bbc:	6840      	ldr	r0, [r0, #4]
   b6bbe:	2100      	movs	r1, #0
   b6bc0:	f7fe bc0a 	b.w	b53d8 <network_is_on>

000b6bc4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6bc4:	6840      	ldr	r0, [r0, #4]
   b6bc6:	2100      	movs	r1, #0
   b6bc8:	f7fe bc0e 	b.w	b53e8 <network_is_off>

000b6bcc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6bcc:	6840      	ldr	r0, [r0, #4]
   b6bce:	2200      	movs	r2, #0
   b6bd0:	f081 0101 	eor.w	r1, r1, #1
   b6bd4:	f7fe bbe0 	b.w	b5398 <network_listen>

000b6bd8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6bd8:	6840      	ldr	r0, [r0, #4]
   b6bda:	2200      	movs	r2, #0
   b6bdc:	f7fe bbec 	b.w	b53b8 <network_set_listen_timeout>

000b6be0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6be0:	2200      	movs	r2, #0
   b6be2:	6840      	ldr	r0, [r0, #4]
   b6be4:	4611      	mov	r1, r2
   b6be6:	f7fe bbef 	b.w	b53c8 <network_get_listen_timeout>

000b6bea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6bea:	2200      	movs	r2, #0
   b6bec:	6840      	ldr	r0, [r0, #4]
   b6bee:	4611      	mov	r1, r2
   b6bf0:	f7fe bbda 	b.w	b53a8 <network_listening>

000b6bf4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6bf8:	b095      	sub	sp, #84	; 0x54
   b6bfa:	4614      	mov	r4, r2
   b6bfc:	460d      	mov	r5, r1
   b6bfe:	4607      	mov	r7, r0
    IPAddress addr;
   b6c00:	f7ff fb0e 	bl	b6220 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6c04:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6c06:	221c      	movs	r2, #28
   b6c08:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6c0a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6c0c:	f000 ff0d 	bl	b7a2a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6c10:	2340      	movs	r3, #64	; 0x40
   b6c12:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6c14:	4620      	mov	r0, r4
   b6c16:	466b      	mov	r3, sp
   b6c18:	aa0c      	add	r2, sp, #48	; 0x30
   b6c1a:	2100      	movs	r1, #0
   b6c1c:	f7fe f9d8 	bl	b4fd0 <netdb_getaddrinfo>
    if (!r) {
   b6c20:	4604      	mov	r4, r0
   b6c22:	2800      	cmp	r0, #0
   b6c24:	d14b      	bne.n	b6cbe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c26:	4602      	mov	r2, r0
   b6c28:	2101      	movs	r1, #1
   b6c2a:	6868      	ldr	r0, [r5, #4]
   b6c2c:	f7fe fb9c 	bl	b5368 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c30:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6c32:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c34:	4622      	mov	r2, r4
   b6c36:	6868      	ldr	r0, [r5, #4]
   b6c38:	f7fe fb96 	bl	b5368 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c3c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6c3e:	4681      	mov	r9, r0
        bool ok = false;
   b6c40:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c42:	2e00      	cmp	r6, #0
   b6c44:	d03b      	beq.n	b6cbe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6c46:	2900      	cmp	r1, #0
   b6c48:	d139      	bne.n	b6cbe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6c4a:	6873      	ldr	r3, [r6, #4]
   b6c4c:	2b02      	cmp	r3, #2
   b6c4e:	d003      	beq.n	b6c58 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6c50:	2b0a      	cmp	r3, #10
   b6c52:	d011      	beq.n	b6c78 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6c54:	69f6      	ldr	r6, [r6, #28]
   b6c56:	e7f4      	b.n	b6c42 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6c58:	f1b8 0f00 	cmp.w	r8, #0
   b6c5c:	d0fa      	beq.n	b6c54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6c5e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6c60:	a806      	add	r0, sp, #24
   b6c62:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6c64:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6c66:	f7ff fb1f 	bl	b62a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c6c:	1d3c      	adds	r4, r7, #4
   b6c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c70:	682b      	ldr	r3, [r5, #0]
   b6c72:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c74:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6c76:	e7ed      	b.n	b6c54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6c78:	f1b9 0f00 	cmp.w	r9, #0
   b6c7c:	d0ea      	beq.n	b6c54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6c7e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6c80:	2210      	movs	r2, #16
   b6c82:	a801      	add	r0, sp, #4
   b6c84:	f000 fed1 	bl	b7a2a <memset>
                    a.v = 6;
   b6c88:	2306      	movs	r3, #6
   b6c8a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6c8e:	ad01      	add	r5, sp, #4
   b6c90:	f104 0308 	add.w	r3, r4, #8
   b6c94:	3418      	adds	r4, #24
   b6c96:	6818      	ldr	r0, [r3, #0]
   b6c98:	6859      	ldr	r1, [r3, #4]
   b6c9a:	462a      	mov	r2, r5
   b6c9c:	c203      	stmia	r2!, {r0, r1}
   b6c9e:	3308      	adds	r3, #8
   b6ca0:	42a3      	cmp	r3, r4
   b6ca2:	4615      	mov	r5, r2
   b6ca4:	d1f7      	bne.n	b6c96 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6ca6:	a901      	add	r1, sp, #4
   b6ca8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6caa:	ad07      	add	r5, sp, #28
   b6cac:	f7ff fac6 	bl	b623c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6cb2:	1d3c      	adds	r4, r7, #4
   b6cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6cb6:	682b      	ldr	r3, [r5, #0]
   b6cb8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6cba:	4649      	mov	r1, r9
   b6cbc:	e7ca      	b.n	b6c54 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6cbe:	9800      	ldr	r0, [sp, #0]
   b6cc0:	f7fe f97e 	bl	b4fc0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6cc4:	4638      	mov	r0, r7
   b6cc6:	b015      	add	sp, #84	; 0x54
   b6cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6ccc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6ccc:	4b02      	ldr	r3, [pc, #8]	; (b6cd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6cce:	4a03      	ldr	r2, [pc, #12]	; (b6cdc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6cd0:	601a      	str	r2, [r3, #0]
   b6cd2:	2200      	movs	r2, #0
   b6cd4:	605a      	str	r2, [r3, #4]

} // spark
   b6cd6:	4770      	bx	lr
   b6cd8:	2003e718 	.word	0x2003e718
   b6cdc:	000b9f30 	.word	0x000b9f30

000b6ce0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6ce0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6ce2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6ce4:	d902      	bls.n	b6cec <pinAvailable+0xc>
    return false;
   b6ce6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6ce8:	b002      	add	sp, #8
   b6cea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6cec:	f1a0 030b 	sub.w	r3, r0, #11
   b6cf0:	2b02      	cmp	r3, #2
   b6cf2:	d81a      	bhi.n	b6d2a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6cf4:	4c17      	ldr	r4, [pc, #92]	; (b6d54 <pinAvailable+0x74>)
   b6cf6:	7821      	ldrb	r1, [r4, #0]
   b6cf8:	f3bf 8f5b 	dmb	ish
   b6cfc:	f011 0101 	ands.w	r1, r1, #1
   b6d00:	d10b      	bne.n	b6d1a <pinAvailable+0x3a>
   b6d02:	4620      	mov	r0, r4
   b6d04:	9101      	str	r1, [sp, #4]
   b6d06:	f7fd f9ce 	bl	b40a6 <__cxa_guard_acquire>
   b6d0a:	9901      	ldr	r1, [sp, #4]
   b6d0c:	b128      	cbz	r0, b6d1a <pinAvailable+0x3a>
   b6d0e:	4812      	ldr	r0, [pc, #72]	; (b6d58 <pinAvailable+0x78>)
   b6d10:	f7fe fc40 	bl	b5594 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6d14:	4620      	mov	r0, r4
   b6d16:	f7fd f9cb 	bl	b40b0 <__cxa_guard_release>
   b6d1a:	4b0f      	ldr	r3, [pc, #60]	; (b6d58 <pinAvailable+0x78>)
   b6d1c:	7818      	ldrb	r0, [r3, #0]
   b6d1e:	f7fe fa87 	bl	b5230 <hal_spi_is_enabled>
   b6d22:	2800      	cmp	r0, #0
   b6d24:	d1df      	bne.n	b6ce6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6d26:	2001      	movs	r0, #1
   b6d28:	e7de      	b.n	b6ce8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6d2a:	2801      	cmp	r0, #1
   b6d2c:	d809      	bhi.n	b6d42 <pinAvailable+0x62>
   b6d2e:	f000 f87d 	bl	b6e2c <_Z19__fetch_global_Wirev>
   b6d32:	2100      	movs	r1, #0
   b6d34:	7c00      	ldrb	r0, [r0, #16]
   b6d36:	f7fe fa33 	bl	b51a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6d3a:	f080 0001 	eor.w	r0, r0, #1
   b6d3e:	b2c0      	uxtb	r0, r0
   b6d40:	e7d2      	b.n	b6ce8 <pinAvailable+0x8>
   b6d42:	3809      	subs	r0, #9
   b6d44:	2801      	cmp	r0, #1
   b6d46:	d8ee      	bhi.n	b6d26 <pinAvailable+0x46>
   b6d48:	f000 f834 	bl	b6db4 <_Z22__fetch_global_Serial1v>
   b6d4c:	7c00      	ldrb	r0, [r0, #16]
   b6d4e:	f7fe f9e7 	bl	b5120 <hal_usart_is_enabled>
   b6d52:	e7f2      	b.n	b6d3a <pinAvailable+0x5a>
   b6d54:	2003e720 	.word	0x2003e720
   b6d58:	2003e724 	.word	0x2003e724

000b6d5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6d5c:	2823      	cmp	r0, #35	; 0x23
{
   b6d5e:	b538      	push	{r3, r4, r5, lr}
   b6d60:	4604      	mov	r4, r0
   b6d62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6d64:	d80a      	bhi.n	b6d7c <pinMode+0x20>
   b6d66:	29ff      	cmp	r1, #255	; 0xff
   b6d68:	d008      	beq.n	b6d7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6d6a:	f7ff ffb9 	bl	b6ce0 <pinAvailable>
   b6d6e:	b128      	cbz	r0, b6d7c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6d70:	4629      	mov	r1, r5
   b6d72:	4620      	mov	r0, r4
}
   b6d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6d78:	f7fe b932 	b.w	b4fe0 <HAL_Pin_Mode>
}
   b6d7c:	bd38      	pop	{r3, r4, r5, pc}

000b6d7e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d7e:	4770      	bx	lr

000b6d80 <_Z20acquireSerial1Bufferv>:
{
   b6d80:	b538      	push	{r3, r4, r5, lr}
   b6d82:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6d84:	2514      	movs	r5, #20
   b6d86:	462a      	mov	r2, r5
   b6d88:	2100      	movs	r1, #0
   b6d8a:	f000 fe4e 	bl	b7a2a <memset>
   b6d8e:	8025      	strh	r5, [r4, #0]
   b6d90:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d92:	4907      	ldr	r1, [pc, #28]	; (b6db0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6d94:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d96:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6d98:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d9a:	f000 f86b 	bl	b6e74 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d9e:	4904      	ldr	r1, [pc, #16]	; (b6db0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6da0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6da2:	4628      	mov	r0, r5
   b6da4:	f000 f866 	bl	b6e74 <_ZnajRKSt9nothrow_t>
    };
   b6da8:	60e0      	str	r0, [r4, #12]
}
   b6daa:	4620      	mov	r0, r4
   b6dac:	bd38      	pop	{r3, r4, r5, pc}
   b6dae:	bf00      	nop
   b6db0:	000b9f64 	.word	0x000b9f64

000b6db4 <_Z22__fetch_global_Serial1v>:
{
   b6db4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6db6:	4d0e      	ldr	r5, [pc, #56]	; (b6df0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6db8:	7829      	ldrb	r1, [r5, #0]
   b6dba:	f3bf 8f5b 	dmb	ish
   b6dbe:	f011 0401 	ands.w	r4, r1, #1
{
   b6dc2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6dc4:	d111      	bne.n	b6dea <_Z22__fetch_global_Serial1v+0x36>
   b6dc6:	4628      	mov	r0, r5
   b6dc8:	f7fd f96d 	bl	b40a6 <__cxa_guard_acquire>
   b6dcc:	b168      	cbz	r0, b6dea <_Z22__fetch_global_Serial1v+0x36>
   b6dce:	a801      	add	r0, sp, #4
   b6dd0:	f7ff ffd6 	bl	b6d80 <_Z20acquireSerial1Bufferv>
   b6dd4:	aa01      	add	r2, sp, #4
   b6dd6:	4621      	mov	r1, r4
   b6dd8:	4806      	ldr	r0, [pc, #24]	; (b6df4 <_Z22__fetch_global_Serial1v+0x40>)
   b6dda:	f7ff fb5f 	bl	b649c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6dde:	4628      	mov	r0, r5
   b6de0:	f7fd f966 	bl	b40b0 <__cxa_guard_release>
   b6de4:	4804      	ldr	r0, [pc, #16]	; (b6df8 <_Z22__fetch_global_Serial1v+0x44>)
   b6de6:	f000 fdf1 	bl	b79cc <atexit>
    return serial1;
}
   b6dea:	4802      	ldr	r0, [pc, #8]	; (b6df4 <_Z22__fetch_global_Serial1v+0x40>)
   b6dec:	b007      	add	sp, #28
   b6dee:	bd30      	pop	{r4, r5, pc}
   b6df0:	2003e72c 	.word	0x2003e72c
   b6df4:	2003e730 	.word	0x2003e730
   b6df8:	000b6d7f 	.word	0x000b6d7f

000b6dfc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6dfc:	4770      	bx	lr
	...

000b6e00 <_Z17acquireWireBufferv>:
{
   b6e00:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6e02:	2520      	movs	r5, #32
   b6e04:	2314      	movs	r3, #20
{
   b6e06:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6e08:	6003      	str	r3, [r0, #0]
   b6e0a:	6085      	str	r5, [r0, #8]
   b6e0c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6e0e:	4906      	ldr	r1, [pc, #24]	; (b6e28 <_Z17acquireWireBufferv+0x28>)
   b6e10:	4628      	mov	r0, r5
   b6e12:	f000 f82f 	bl	b6e74 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6e16:	4904      	ldr	r1, [pc, #16]	; (b6e28 <_Z17acquireWireBufferv+0x28>)
	};
   b6e18:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6e1a:	4628      	mov	r0, r5
   b6e1c:	f000 f82a 	bl	b6e74 <_ZnajRKSt9nothrow_t>
	};
   b6e20:	60e0      	str	r0, [r4, #12]
}
   b6e22:	4620      	mov	r0, r4
   b6e24:	bd38      	pop	{r3, r4, r5, pc}
   b6e26:	bf00      	nop
   b6e28:	000b9f64 	.word	0x000b9f64

000b6e2c <_Z19__fetch_global_Wirev>:
{
   b6e2c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6e2e:	4d0e      	ldr	r5, [pc, #56]	; (b6e68 <_Z19__fetch_global_Wirev+0x3c>)
   b6e30:	7829      	ldrb	r1, [r5, #0]
   b6e32:	f3bf 8f5b 	dmb	ish
   b6e36:	f011 0401 	ands.w	r4, r1, #1
{
   b6e3a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6e3c:	d111      	bne.n	b6e62 <_Z19__fetch_global_Wirev+0x36>
   b6e3e:	4628      	mov	r0, r5
   b6e40:	f7fd f931 	bl	b40a6 <__cxa_guard_acquire>
   b6e44:	b168      	cbz	r0, b6e62 <_Z19__fetch_global_Wirev+0x36>
   b6e46:	a801      	add	r0, sp, #4
   b6e48:	f7ff ffda 	bl	b6e00 <_Z17acquireWireBufferv>
   b6e4c:	aa01      	add	r2, sp, #4
   b6e4e:	4621      	mov	r1, r4
   b6e50:	4806      	ldr	r0, [pc, #24]	; (b6e6c <_Z19__fetch_global_Wirev+0x40>)
   b6e52:	f7ff fb77 	bl	b6544 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6e56:	4628      	mov	r0, r5
   b6e58:	f7fd f92a 	bl	b40b0 <__cxa_guard_release>
   b6e5c:	4804      	ldr	r0, [pc, #16]	; (b6e70 <_Z19__fetch_global_Wirev+0x44>)
   b6e5e:	f000 fdb5 	bl	b79cc <atexit>
	return wire;
}
   b6e62:	4802      	ldr	r0, [pc, #8]	; (b6e6c <_Z19__fetch_global_Wirev+0x40>)
   b6e64:	b007      	add	sp, #28
   b6e66:	bd30      	pop	{r4, r5, pc}
   b6e68:	2003e748 	.word	0x2003e748
   b6e6c:	2003e74c 	.word	0x2003e74c
   b6e70:	000b6dfd 	.word	0x000b6dfd

000b6e74 <_ZnajRKSt9nothrow_t>:
   b6e74:	f7fd b911 	b.w	b409a <_Znaj>

000b6e78 <_ZSt25__throw_bad_function_callv>:
   b6e78:	b508      	push	{r3, lr}
   b6e7a:	f7fe fb1d 	bl	b54b8 <abort>
	...

000b6e80 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6e80:	4901      	ldr	r1, [pc, #4]	; (b6e88 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6e82:	f000 b8f9 	b.w	b7078 <_ZNKSt9type_infoeqERKS_>
   b6e86:	bf00      	nop
   b6e88:	000b9f80 	.word	0x000b9f80

000b6e8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6e8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6e8e:	2400      	movs	r4, #0
   b6e90:	2310      	movs	r3, #16
   b6e92:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6e96:	6803      	ldr	r3, [r0, #0]
   b6e98:	4615      	mov	r5, r2
   b6e9a:	699e      	ldr	r6, [r3, #24]
   b6e9c:	6812      	ldr	r2, [r2, #0]
   b6e9e:	466b      	mov	r3, sp
   b6ea0:	e9cd 4400 	strd	r4, r4, [sp]
   b6ea4:	47b0      	blx	r6
   b6ea6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6eaa:	f003 0306 	and.w	r3, r3, #6
   b6eae:	2b06      	cmp	r3, #6
   b6eb0:	bf03      	ittte	eq
   b6eb2:	9b00      	ldreq	r3, [sp, #0]
   b6eb4:	602b      	streq	r3, [r5, #0]
   b6eb6:	2001      	moveq	r0, #1
   b6eb8:	4620      	movne	r0, r4
   b6eba:	b004      	add	sp, #16
   b6ebc:	bd70      	pop	{r4, r5, r6, pc}

000b6ebe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6ebe:	9800      	ldr	r0, [sp, #0]
   b6ec0:	4290      	cmp	r0, r2
   b6ec2:	bf14      	ite	ne
   b6ec4:	2001      	movne	r0, #1
   b6ec6:	2006      	moveq	r0, #6
   b6ec8:	4770      	bx	lr
	...

000b6ecc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6ecc:	b510      	push	{r4, lr}
   b6ece:	4b03      	ldr	r3, [pc, #12]	; (b6edc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6ed0:	6003      	str	r3, [r0, #0]
   b6ed2:	4604      	mov	r4, r0
   b6ed4:	f000 f8cd 	bl	b7072 <_ZNSt9type_infoD1Ev>
   b6ed8:	4620      	mov	r0, r4
   b6eda:	bd10      	pop	{r4, pc}
   b6edc:	000b9fc0 	.word	0x000b9fc0

000b6ee0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6ee0:	b510      	push	{r4, lr}
   b6ee2:	4604      	mov	r4, r0
   b6ee4:	f7ff fff2 	bl	b6ecc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6ee8:	4620      	mov	r0, r4
   b6eea:	2108      	movs	r1, #8
   b6eec:	f7fd f8d9 	bl	b40a2 <_ZdlPvj>
   b6ef0:	4620      	mov	r0, r4
   b6ef2:	bd10      	pop	{r4, pc}

000b6ef4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ef8:	461f      	mov	r7, r3
   b6efa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6efe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6f02:	4598      	cmp	r8, r3
   b6f04:	4606      	mov	r6, r0
   b6f06:	4615      	mov	r5, r2
   b6f08:	d107      	bne.n	b6f1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6f0a:	9907      	ldr	r1, [sp, #28]
   b6f0c:	f000 f8b4 	bl	b7078 <_ZNKSt9type_infoeqERKS_>
   b6f10:	b118      	cbz	r0, b6f1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6f12:	7165      	strb	r5, [r4, #5]
   b6f14:	2000      	movs	r0, #0
   b6f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6f1a:	4639      	mov	r1, r7
   b6f1c:	4630      	mov	r0, r6
   b6f1e:	f000 f8ab 	bl	b7078 <_ZNKSt9type_infoeqERKS_>
   b6f22:	2800      	cmp	r0, #0
   b6f24:	d0f6      	beq.n	b6f14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6f26:	2301      	movs	r3, #1
   b6f28:	f8c4 8000 	str.w	r8, [r4]
   b6f2c:	7125      	strb	r5, [r4, #4]
   b6f2e:	71a3      	strb	r3, [r4, #6]
   b6f30:	e7f0      	b.n	b6f14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6f32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6f32:	b538      	push	{r3, r4, r5, lr}
   b6f34:	4615      	mov	r5, r2
   b6f36:	461c      	mov	r4, r3
   b6f38:	f000 f89e 	bl	b7078 <_ZNKSt9type_infoeqERKS_>
   b6f3c:	b120      	cbz	r0, b6f48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6f3e:	2308      	movs	r3, #8
   b6f40:	60e3      	str	r3, [r4, #12]
   b6f42:	2306      	movs	r3, #6
   b6f44:	6025      	str	r5, [r4, #0]
   b6f46:	7123      	strb	r3, [r4, #4]
   b6f48:	bd38      	pop	{r3, r4, r5, pc}

000b6f4a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f4c:	4605      	mov	r5, r0
   b6f4e:	460c      	mov	r4, r1
   b6f50:	9201      	str	r2, [sp, #4]
   b6f52:	461e      	mov	r6, r3
   b6f54:	f000 f890 	bl	b7078 <_ZNKSt9type_infoeqERKS_>
   b6f58:	b950      	cbnz	r0, b6f70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6f5a:	2e03      	cmp	r6, #3
   b6f5c:	d808      	bhi.n	b6f70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6f5e:	6823      	ldr	r3, [r4, #0]
   b6f60:	9a01      	ldr	r2, [sp, #4]
   b6f62:	695b      	ldr	r3, [r3, #20]
   b6f64:	4629      	mov	r1, r5
   b6f66:	4620      	mov	r0, r4
   b6f68:	b002      	add	sp, #8
   b6f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6f6e:	4718      	bx	r3
   b6f70:	b002      	add	sp, #8
   b6f72:	bd70      	pop	{r4, r5, r6, pc}

000b6f74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6f74:	b510      	push	{r4, lr}
   b6f76:	4b03      	ldr	r3, [pc, #12]	; (b6f84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6f78:	6003      	str	r3, [r0, #0]
   b6f7a:	4604      	mov	r4, r0
   b6f7c:	f7ff ffa6 	bl	b6ecc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6f80:	4620      	mov	r0, r4
   b6f82:	bd10      	pop	{r4, pc}
   b6f84:	000ba020 	.word	0x000ba020

000b6f88 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6f88:	b510      	push	{r4, lr}
   b6f8a:	4604      	mov	r4, r0
   b6f8c:	f7ff fff2 	bl	b6f74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6f90:	4620      	mov	r0, r4
   b6f92:	210c      	movs	r1, #12
   b6f94:	f7fd f885 	bl	b40a2 <_ZdlPvj>
   b6f98:	4620      	mov	r0, r4
   b6f9a:	bd10      	pop	{r4, pc}

000b6f9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6f9e:	9f08      	ldr	r7, [sp, #32]
   b6fa0:	4297      	cmp	r7, r2
   b6fa2:	4605      	mov	r5, r0
   b6fa4:	460e      	mov	r6, r1
   b6fa6:	4614      	mov	r4, r2
   b6fa8:	d00a      	beq.n	b6fc0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6faa:	68a8      	ldr	r0, [r5, #8]
   b6fac:	6802      	ldr	r2, [r0, #0]
   b6fae:	9708      	str	r7, [sp, #32]
   b6fb0:	6a15      	ldr	r5, [r2, #32]
   b6fb2:	4631      	mov	r1, r6
   b6fb4:	4622      	mov	r2, r4
   b6fb6:	46ac      	mov	ip, r5
   b6fb8:	b003      	add	sp, #12
   b6fba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6fbe:	4760      	bx	ip
   b6fc0:	4619      	mov	r1, r3
   b6fc2:	9301      	str	r3, [sp, #4]
   b6fc4:	f000 f858 	bl	b7078 <_ZNKSt9type_infoeqERKS_>
   b6fc8:	9b01      	ldr	r3, [sp, #4]
   b6fca:	2800      	cmp	r0, #0
   b6fcc:	d0ed      	beq.n	b6faa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6fce:	2006      	movs	r0, #6
   b6fd0:	b003      	add	sp, #12
   b6fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6fd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6fd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6fd8:	460d      	mov	r5, r1
   b6fda:	4619      	mov	r1, r3
   b6fdc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6fe0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6fe4:	4681      	mov	r9, r0
   b6fe6:	4617      	mov	r7, r2
   b6fe8:	4698      	mov	r8, r3
   b6fea:	f000 f845 	bl	b7078 <_ZNKSt9type_infoeqERKS_>
   b6fee:	b190      	cbz	r0, b7016 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6ff0:	2d00      	cmp	r5, #0
   b6ff2:	6034      	str	r4, [r6, #0]
   b6ff4:	7137      	strb	r7, [r6, #4]
   b6ff6:	db09      	blt.n	b700c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6ff8:	1961      	adds	r1, r4, r5
   b6ffa:	458a      	cmp	sl, r1
   b6ffc:	bf0c      	ite	eq
   b6ffe:	2106      	moveq	r1, #6
   b7000:	2101      	movne	r1, #1
   b7002:	71b1      	strb	r1, [r6, #6]
   b7004:	2000      	movs	r0, #0
   b7006:	b001      	add	sp, #4
   b7008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b700c:	3502      	adds	r5, #2
   b700e:	d1f9      	bne.n	b7004 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7010:	2301      	movs	r3, #1
   b7012:	71b3      	strb	r3, [r6, #6]
   b7014:	e7f6      	b.n	b7004 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7016:	4554      	cmp	r4, sl
   b7018:	d106      	bne.n	b7028 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b701a:	4659      	mov	r1, fp
   b701c:	4648      	mov	r0, r9
   b701e:	f000 f82b 	bl	b7078 <_ZNKSt9type_infoeqERKS_>
   b7022:	b108      	cbz	r0, b7028 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7024:	7177      	strb	r7, [r6, #5]
   b7026:	e7ed      	b.n	b7004 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7028:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b702c:	6803      	ldr	r3, [r0, #0]
   b702e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7032:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7036:	69dc      	ldr	r4, [r3, #28]
   b7038:	463a      	mov	r2, r7
   b703a:	4643      	mov	r3, r8
   b703c:	4629      	mov	r1, r5
   b703e:	46a4      	mov	ip, r4
   b7040:	b001      	add	sp, #4
   b7042:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7046:	4760      	bx	ip

000b7048 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b704c:	4607      	mov	r7, r0
   b704e:	460c      	mov	r4, r1
   b7050:	4615      	mov	r5, r2
   b7052:	461e      	mov	r6, r3
   b7054:	f7ff ff6d 	bl	b6f32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7058:	b948      	cbnz	r0, b706e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b705a:	68b8      	ldr	r0, [r7, #8]
   b705c:	6803      	ldr	r3, [r0, #0]
   b705e:	699f      	ldr	r7, [r3, #24]
   b7060:	462a      	mov	r2, r5
   b7062:	4633      	mov	r3, r6
   b7064:	4621      	mov	r1, r4
   b7066:	46bc      	mov	ip, r7
   b7068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b706c:	4760      	bx	ip
   b706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7072 <_ZNSt9type_infoD1Ev>:
   b7072:	4770      	bx	lr

000b7074 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7074:	2000      	movs	r0, #0
   b7076:	4770      	bx	lr

000b7078 <_ZNKSt9type_infoeqERKS_>:
   b7078:	4281      	cmp	r1, r0
   b707a:	b508      	push	{r3, lr}
   b707c:	d00e      	beq.n	b709c <_ZNKSt9type_infoeqERKS_+0x24>
   b707e:	6840      	ldr	r0, [r0, #4]
   b7080:	7803      	ldrb	r3, [r0, #0]
   b7082:	2b2a      	cmp	r3, #42	; 0x2a
   b7084:	d00c      	beq.n	b70a0 <_ZNKSt9type_infoeqERKS_+0x28>
   b7086:	6849      	ldr	r1, [r1, #4]
   b7088:	780b      	ldrb	r3, [r1, #0]
   b708a:	2b2a      	cmp	r3, #42	; 0x2a
   b708c:	bf08      	it	eq
   b708e:	3101      	addeq	r1, #1
   b7090:	f000 fd11 	bl	b7ab6 <strcmp>
   b7094:	fab0 f080 	clz	r0, r0
   b7098:	0940      	lsrs	r0, r0, #5
   b709a:	bd08      	pop	{r3, pc}
   b709c:	2001      	movs	r0, #1
   b709e:	e7fc      	b.n	b709a <_ZNKSt9type_infoeqERKS_+0x22>
   b70a0:	2000      	movs	r0, #0
   b70a2:	e7fa      	b.n	b709a <_ZNKSt9type_infoeqERKS_+0x22>

000b70a4 <__aeabi_drsub>:
   b70a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b70a8:	e002      	b.n	b70b0 <__adddf3>
   b70aa:	bf00      	nop

000b70ac <__aeabi_dsub>:
   b70ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b70b0 <__adddf3>:
   b70b0:	b530      	push	{r4, r5, lr}
   b70b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b70b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b70ba:	ea94 0f05 	teq	r4, r5
   b70be:	bf08      	it	eq
   b70c0:	ea90 0f02 	teqeq	r0, r2
   b70c4:	bf1f      	itttt	ne
   b70c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b70ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   b70ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b70d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b70d6:	f000 80e2 	beq.w	b729e <__adddf3+0x1ee>
   b70da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b70de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b70e2:	bfb8      	it	lt
   b70e4:	426d      	neglt	r5, r5
   b70e6:	dd0c      	ble.n	b7102 <__adddf3+0x52>
   b70e8:	442c      	add	r4, r5
   b70ea:	ea80 0202 	eor.w	r2, r0, r2
   b70ee:	ea81 0303 	eor.w	r3, r1, r3
   b70f2:	ea82 0000 	eor.w	r0, r2, r0
   b70f6:	ea83 0101 	eor.w	r1, r3, r1
   b70fa:	ea80 0202 	eor.w	r2, r0, r2
   b70fe:	ea81 0303 	eor.w	r3, r1, r3
   b7102:	2d36      	cmp	r5, #54	; 0x36
   b7104:	bf88      	it	hi
   b7106:	bd30      	pophi	{r4, r5, pc}
   b7108:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b710c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7110:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7114:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7118:	d002      	beq.n	b7120 <__adddf3+0x70>
   b711a:	4240      	negs	r0, r0
   b711c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7120:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7124:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7128:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b712c:	d002      	beq.n	b7134 <__adddf3+0x84>
   b712e:	4252      	negs	r2, r2
   b7130:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7134:	ea94 0f05 	teq	r4, r5
   b7138:	f000 80a7 	beq.w	b728a <__adddf3+0x1da>
   b713c:	f1a4 0401 	sub.w	r4, r4, #1
   b7140:	f1d5 0e20 	rsbs	lr, r5, #32
   b7144:	db0d      	blt.n	b7162 <__adddf3+0xb2>
   b7146:	fa02 fc0e 	lsl.w	ip, r2, lr
   b714a:	fa22 f205 	lsr.w	r2, r2, r5
   b714e:	1880      	adds	r0, r0, r2
   b7150:	f141 0100 	adc.w	r1, r1, #0
   b7154:	fa03 f20e 	lsl.w	r2, r3, lr
   b7158:	1880      	adds	r0, r0, r2
   b715a:	fa43 f305 	asr.w	r3, r3, r5
   b715e:	4159      	adcs	r1, r3
   b7160:	e00e      	b.n	b7180 <__adddf3+0xd0>
   b7162:	f1a5 0520 	sub.w	r5, r5, #32
   b7166:	f10e 0e20 	add.w	lr, lr, #32
   b716a:	2a01      	cmp	r2, #1
   b716c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7170:	bf28      	it	cs
   b7172:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7176:	fa43 f305 	asr.w	r3, r3, r5
   b717a:	18c0      	adds	r0, r0, r3
   b717c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7180:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7184:	d507      	bpl.n	b7196 <__adddf3+0xe6>
   b7186:	f04f 0e00 	mov.w	lr, #0
   b718a:	f1dc 0c00 	rsbs	ip, ip, #0
   b718e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7192:	eb6e 0101 	sbc.w	r1, lr, r1
   b7196:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b719a:	d31b      	bcc.n	b71d4 <__adddf3+0x124>
   b719c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b71a0:	d30c      	bcc.n	b71bc <__adddf3+0x10c>
   b71a2:	0849      	lsrs	r1, r1, #1
   b71a4:	ea5f 0030 	movs.w	r0, r0, rrx
   b71a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b71ac:	f104 0401 	add.w	r4, r4, #1
   b71b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b71b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b71b8:	f080 809a 	bcs.w	b72f0 <__adddf3+0x240>
   b71bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b71c0:	bf08      	it	eq
   b71c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b71c6:	f150 0000 	adcs.w	r0, r0, #0
   b71ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b71ce:	ea41 0105 	orr.w	r1, r1, r5
   b71d2:	bd30      	pop	{r4, r5, pc}
   b71d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b71d8:	4140      	adcs	r0, r0
   b71da:	eb41 0101 	adc.w	r1, r1, r1
   b71de:	3c01      	subs	r4, #1
   b71e0:	bf28      	it	cs
   b71e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b71e6:	d2e9      	bcs.n	b71bc <__adddf3+0x10c>
   b71e8:	f091 0f00 	teq	r1, #0
   b71ec:	bf04      	itt	eq
   b71ee:	4601      	moveq	r1, r0
   b71f0:	2000      	moveq	r0, #0
   b71f2:	fab1 f381 	clz	r3, r1
   b71f6:	bf08      	it	eq
   b71f8:	3320      	addeq	r3, #32
   b71fa:	f1a3 030b 	sub.w	r3, r3, #11
   b71fe:	f1b3 0220 	subs.w	r2, r3, #32
   b7202:	da0c      	bge.n	b721e <__adddf3+0x16e>
   b7204:	320c      	adds	r2, #12
   b7206:	dd08      	ble.n	b721a <__adddf3+0x16a>
   b7208:	f102 0c14 	add.w	ip, r2, #20
   b720c:	f1c2 020c 	rsb	r2, r2, #12
   b7210:	fa01 f00c 	lsl.w	r0, r1, ip
   b7214:	fa21 f102 	lsr.w	r1, r1, r2
   b7218:	e00c      	b.n	b7234 <__adddf3+0x184>
   b721a:	f102 0214 	add.w	r2, r2, #20
   b721e:	bfd8      	it	le
   b7220:	f1c2 0c20 	rsble	ip, r2, #32
   b7224:	fa01 f102 	lsl.w	r1, r1, r2
   b7228:	fa20 fc0c 	lsr.w	ip, r0, ip
   b722c:	bfdc      	itt	le
   b722e:	ea41 010c 	orrle.w	r1, r1, ip
   b7232:	4090      	lslle	r0, r2
   b7234:	1ae4      	subs	r4, r4, r3
   b7236:	bfa2      	ittt	ge
   b7238:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b723c:	4329      	orrge	r1, r5
   b723e:	bd30      	popge	{r4, r5, pc}
   b7240:	ea6f 0404 	mvn.w	r4, r4
   b7244:	3c1f      	subs	r4, #31
   b7246:	da1c      	bge.n	b7282 <__adddf3+0x1d2>
   b7248:	340c      	adds	r4, #12
   b724a:	dc0e      	bgt.n	b726a <__adddf3+0x1ba>
   b724c:	f104 0414 	add.w	r4, r4, #20
   b7250:	f1c4 0220 	rsb	r2, r4, #32
   b7254:	fa20 f004 	lsr.w	r0, r0, r4
   b7258:	fa01 f302 	lsl.w	r3, r1, r2
   b725c:	ea40 0003 	orr.w	r0, r0, r3
   b7260:	fa21 f304 	lsr.w	r3, r1, r4
   b7264:	ea45 0103 	orr.w	r1, r5, r3
   b7268:	bd30      	pop	{r4, r5, pc}
   b726a:	f1c4 040c 	rsb	r4, r4, #12
   b726e:	f1c4 0220 	rsb	r2, r4, #32
   b7272:	fa20 f002 	lsr.w	r0, r0, r2
   b7276:	fa01 f304 	lsl.w	r3, r1, r4
   b727a:	ea40 0003 	orr.w	r0, r0, r3
   b727e:	4629      	mov	r1, r5
   b7280:	bd30      	pop	{r4, r5, pc}
   b7282:	fa21 f004 	lsr.w	r0, r1, r4
   b7286:	4629      	mov	r1, r5
   b7288:	bd30      	pop	{r4, r5, pc}
   b728a:	f094 0f00 	teq	r4, #0
   b728e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7292:	bf06      	itte	eq
   b7294:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7298:	3401      	addeq	r4, #1
   b729a:	3d01      	subne	r5, #1
   b729c:	e74e      	b.n	b713c <__adddf3+0x8c>
   b729e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b72a2:	bf18      	it	ne
   b72a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b72a8:	d029      	beq.n	b72fe <__adddf3+0x24e>
   b72aa:	ea94 0f05 	teq	r4, r5
   b72ae:	bf08      	it	eq
   b72b0:	ea90 0f02 	teqeq	r0, r2
   b72b4:	d005      	beq.n	b72c2 <__adddf3+0x212>
   b72b6:	ea54 0c00 	orrs.w	ip, r4, r0
   b72ba:	bf04      	itt	eq
   b72bc:	4619      	moveq	r1, r3
   b72be:	4610      	moveq	r0, r2
   b72c0:	bd30      	pop	{r4, r5, pc}
   b72c2:	ea91 0f03 	teq	r1, r3
   b72c6:	bf1e      	ittt	ne
   b72c8:	2100      	movne	r1, #0
   b72ca:	2000      	movne	r0, #0
   b72cc:	bd30      	popne	{r4, r5, pc}
   b72ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b72d2:	d105      	bne.n	b72e0 <__adddf3+0x230>
   b72d4:	0040      	lsls	r0, r0, #1
   b72d6:	4149      	adcs	r1, r1
   b72d8:	bf28      	it	cs
   b72da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b72de:	bd30      	pop	{r4, r5, pc}
   b72e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b72e4:	bf3c      	itt	cc
   b72e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b72ea:	bd30      	popcc	{r4, r5, pc}
   b72ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b72f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b72f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b72f8:	f04f 0000 	mov.w	r0, #0
   b72fc:	bd30      	pop	{r4, r5, pc}
   b72fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7302:	bf1a      	itte	ne
   b7304:	4619      	movne	r1, r3
   b7306:	4610      	movne	r0, r2
   b7308:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b730c:	bf1c      	itt	ne
   b730e:	460b      	movne	r3, r1
   b7310:	4602      	movne	r2, r0
   b7312:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7316:	bf06      	itte	eq
   b7318:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b731c:	ea91 0f03 	teqeq	r1, r3
   b7320:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7324:	bd30      	pop	{r4, r5, pc}
   b7326:	bf00      	nop

000b7328 <__aeabi_ui2d>:
   b7328:	f090 0f00 	teq	r0, #0
   b732c:	bf04      	itt	eq
   b732e:	2100      	moveq	r1, #0
   b7330:	4770      	bxeq	lr
   b7332:	b530      	push	{r4, r5, lr}
   b7334:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7338:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b733c:	f04f 0500 	mov.w	r5, #0
   b7340:	f04f 0100 	mov.w	r1, #0
   b7344:	e750      	b.n	b71e8 <__adddf3+0x138>
   b7346:	bf00      	nop

000b7348 <__aeabi_i2d>:
   b7348:	f090 0f00 	teq	r0, #0
   b734c:	bf04      	itt	eq
   b734e:	2100      	moveq	r1, #0
   b7350:	4770      	bxeq	lr
   b7352:	b530      	push	{r4, r5, lr}
   b7354:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7358:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b735c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7360:	bf48      	it	mi
   b7362:	4240      	negmi	r0, r0
   b7364:	f04f 0100 	mov.w	r1, #0
   b7368:	e73e      	b.n	b71e8 <__adddf3+0x138>
   b736a:	bf00      	nop

000b736c <__aeabi_f2d>:
   b736c:	0042      	lsls	r2, r0, #1
   b736e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7372:	ea4f 0131 	mov.w	r1, r1, rrx
   b7376:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b737a:	bf1f      	itttt	ne
   b737c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7380:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7384:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7388:	4770      	bxne	lr
   b738a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b738e:	bf08      	it	eq
   b7390:	4770      	bxeq	lr
   b7392:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7396:	bf04      	itt	eq
   b7398:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b739c:	4770      	bxeq	lr
   b739e:	b530      	push	{r4, r5, lr}
   b73a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b73a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b73a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b73ac:	e71c      	b.n	b71e8 <__adddf3+0x138>
   b73ae:	bf00      	nop

000b73b0 <__aeabi_ul2d>:
   b73b0:	ea50 0201 	orrs.w	r2, r0, r1
   b73b4:	bf08      	it	eq
   b73b6:	4770      	bxeq	lr
   b73b8:	b530      	push	{r4, r5, lr}
   b73ba:	f04f 0500 	mov.w	r5, #0
   b73be:	e00a      	b.n	b73d6 <__aeabi_l2d+0x16>

000b73c0 <__aeabi_l2d>:
   b73c0:	ea50 0201 	orrs.w	r2, r0, r1
   b73c4:	bf08      	it	eq
   b73c6:	4770      	bxeq	lr
   b73c8:	b530      	push	{r4, r5, lr}
   b73ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b73ce:	d502      	bpl.n	b73d6 <__aeabi_l2d+0x16>
   b73d0:	4240      	negs	r0, r0
   b73d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b73d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b73da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b73de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b73e2:	f43f aed8 	beq.w	b7196 <__adddf3+0xe6>
   b73e6:	f04f 0203 	mov.w	r2, #3
   b73ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b73ee:	bf18      	it	ne
   b73f0:	3203      	addne	r2, #3
   b73f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b73f6:	bf18      	it	ne
   b73f8:	3203      	addne	r2, #3
   b73fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b73fe:	f1c2 0320 	rsb	r3, r2, #32
   b7402:	fa00 fc03 	lsl.w	ip, r0, r3
   b7406:	fa20 f002 	lsr.w	r0, r0, r2
   b740a:	fa01 fe03 	lsl.w	lr, r1, r3
   b740e:	ea40 000e 	orr.w	r0, r0, lr
   b7412:	fa21 f102 	lsr.w	r1, r1, r2
   b7416:	4414      	add	r4, r2
   b7418:	e6bd      	b.n	b7196 <__adddf3+0xe6>
   b741a:	bf00      	nop

000b741c <__aeabi_dmul>:
   b741c:	b570      	push	{r4, r5, r6, lr}
   b741e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7422:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7426:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b742a:	bf1d      	ittte	ne
   b742c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7430:	ea94 0f0c 	teqne	r4, ip
   b7434:	ea95 0f0c 	teqne	r5, ip
   b7438:	f000 f8de 	bleq	b75f8 <__aeabi_dmul+0x1dc>
   b743c:	442c      	add	r4, r5
   b743e:	ea81 0603 	eor.w	r6, r1, r3
   b7442:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7446:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b744a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b744e:	bf18      	it	ne
   b7450:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7454:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b745c:	d038      	beq.n	b74d0 <__aeabi_dmul+0xb4>
   b745e:	fba0 ce02 	umull	ip, lr, r0, r2
   b7462:	f04f 0500 	mov.w	r5, #0
   b7466:	fbe1 e502 	umlal	lr, r5, r1, r2
   b746a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b746e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7472:	f04f 0600 	mov.w	r6, #0
   b7476:	fbe1 5603 	umlal	r5, r6, r1, r3
   b747a:	f09c 0f00 	teq	ip, #0
   b747e:	bf18      	it	ne
   b7480:	f04e 0e01 	orrne.w	lr, lr, #1
   b7484:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7488:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b748c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7490:	d204      	bcs.n	b749c <__aeabi_dmul+0x80>
   b7492:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7496:	416d      	adcs	r5, r5
   b7498:	eb46 0606 	adc.w	r6, r6, r6
   b749c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b74a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b74a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b74a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b74ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b74b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b74b4:	bf88      	it	hi
   b74b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b74ba:	d81e      	bhi.n	b74fa <__aeabi_dmul+0xde>
   b74bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b74c0:	bf08      	it	eq
   b74c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b74c6:	f150 0000 	adcs.w	r0, r0, #0
   b74ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b74ce:	bd70      	pop	{r4, r5, r6, pc}
   b74d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b74d4:	ea46 0101 	orr.w	r1, r6, r1
   b74d8:	ea40 0002 	orr.w	r0, r0, r2
   b74dc:	ea81 0103 	eor.w	r1, r1, r3
   b74e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b74e4:	bfc2      	ittt	gt
   b74e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b74ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b74ee:	bd70      	popgt	{r4, r5, r6, pc}
   b74f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b74f4:	f04f 0e00 	mov.w	lr, #0
   b74f8:	3c01      	subs	r4, #1
   b74fa:	f300 80ab 	bgt.w	b7654 <__aeabi_dmul+0x238>
   b74fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7502:	bfde      	ittt	le
   b7504:	2000      	movle	r0, #0
   b7506:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b750a:	bd70      	pople	{r4, r5, r6, pc}
   b750c:	f1c4 0400 	rsb	r4, r4, #0
   b7510:	3c20      	subs	r4, #32
   b7512:	da35      	bge.n	b7580 <__aeabi_dmul+0x164>
   b7514:	340c      	adds	r4, #12
   b7516:	dc1b      	bgt.n	b7550 <__aeabi_dmul+0x134>
   b7518:	f104 0414 	add.w	r4, r4, #20
   b751c:	f1c4 0520 	rsb	r5, r4, #32
   b7520:	fa00 f305 	lsl.w	r3, r0, r5
   b7524:	fa20 f004 	lsr.w	r0, r0, r4
   b7528:	fa01 f205 	lsl.w	r2, r1, r5
   b752c:	ea40 0002 	orr.w	r0, r0, r2
   b7530:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7538:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b753c:	fa21 f604 	lsr.w	r6, r1, r4
   b7540:	eb42 0106 	adc.w	r1, r2, r6
   b7544:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7548:	bf08      	it	eq
   b754a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b754e:	bd70      	pop	{r4, r5, r6, pc}
   b7550:	f1c4 040c 	rsb	r4, r4, #12
   b7554:	f1c4 0520 	rsb	r5, r4, #32
   b7558:	fa00 f304 	lsl.w	r3, r0, r4
   b755c:	fa20 f005 	lsr.w	r0, r0, r5
   b7560:	fa01 f204 	lsl.w	r2, r1, r4
   b7564:	ea40 0002 	orr.w	r0, r0, r2
   b7568:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b756c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7570:	f141 0100 	adc.w	r1, r1, #0
   b7574:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7578:	bf08      	it	eq
   b757a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b757e:	bd70      	pop	{r4, r5, r6, pc}
   b7580:	f1c4 0520 	rsb	r5, r4, #32
   b7584:	fa00 f205 	lsl.w	r2, r0, r5
   b7588:	ea4e 0e02 	orr.w	lr, lr, r2
   b758c:	fa20 f304 	lsr.w	r3, r0, r4
   b7590:	fa01 f205 	lsl.w	r2, r1, r5
   b7594:	ea43 0302 	orr.w	r3, r3, r2
   b7598:	fa21 f004 	lsr.w	r0, r1, r4
   b759c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b75a0:	fa21 f204 	lsr.w	r2, r1, r4
   b75a4:	ea20 0002 	bic.w	r0, r0, r2
   b75a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b75ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b75b0:	bf08      	it	eq
   b75b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b75b6:	bd70      	pop	{r4, r5, r6, pc}
   b75b8:	f094 0f00 	teq	r4, #0
   b75bc:	d10f      	bne.n	b75de <__aeabi_dmul+0x1c2>
   b75be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b75c2:	0040      	lsls	r0, r0, #1
   b75c4:	eb41 0101 	adc.w	r1, r1, r1
   b75c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b75cc:	bf08      	it	eq
   b75ce:	3c01      	subeq	r4, #1
   b75d0:	d0f7      	beq.n	b75c2 <__aeabi_dmul+0x1a6>
   b75d2:	ea41 0106 	orr.w	r1, r1, r6
   b75d6:	f095 0f00 	teq	r5, #0
   b75da:	bf18      	it	ne
   b75dc:	4770      	bxne	lr
   b75de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b75e2:	0052      	lsls	r2, r2, #1
   b75e4:	eb43 0303 	adc.w	r3, r3, r3
   b75e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b75ec:	bf08      	it	eq
   b75ee:	3d01      	subeq	r5, #1
   b75f0:	d0f7      	beq.n	b75e2 <__aeabi_dmul+0x1c6>
   b75f2:	ea43 0306 	orr.w	r3, r3, r6
   b75f6:	4770      	bx	lr
   b75f8:	ea94 0f0c 	teq	r4, ip
   b75fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7600:	bf18      	it	ne
   b7602:	ea95 0f0c 	teqne	r5, ip
   b7606:	d00c      	beq.n	b7622 <__aeabi_dmul+0x206>
   b7608:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b760c:	bf18      	it	ne
   b760e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7612:	d1d1      	bne.n	b75b8 <__aeabi_dmul+0x19c>
   b7614:	ea81 0103 	eor.w	r1, r1, r3
   b7618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b761c:	f04f 0000 	mov.w	r0, #0
   b7620:	bd70      	pop	{r4, r5, r6, pc}
   b7622:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7626:	bf06      	itte	eq
   b7628:	4610      	moveq	r0, r2
   b762a:	4619      	moveq	r1, r3
   b762c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7630:	d019      	beq.n	b7666 <__aeabi_dmul+0x24a>
   b7632:	ea94 0f0c 	teq	r4, ip
   b7636:	d102      	bne.n	b763e <__aeabi_dmul+0x222>
   b7638:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b763c:	d113      	bne.n	b7666 <__aeabi_dmul+0x24a>
   b763e:	ea95 0f0c 	teq	r5, ip
   b7642:	d105      	bne.n	b7650 <__aeabi_dmul+0x234>
   b7644:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7648:	bf1c      	itt	ne
   b764a:	4610      	movne	r0, r2
   b764c:	4619      	movne	r1, r3
   b764e:	d10a      	bne.n	b7666 <__aeabi_dmul+0x24a>
   b7650:	ea81 0103 	eor.w	r1, r1, r3
   b7654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7658:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b765c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7660:	f04f 0000 	mov.w	r0, #0
   b7664:	bd70      	pop	{r4, r5, r6, pc}
   b7666:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b766a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b766e:	bd70      	pop	{r4, r5, r6, pc}

000b7670 <__aeabi_ddiv>:
   b7670:	b570      	push	{r4, r5, r6, lr}
   b7672:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b767a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b767e:	bf1d      	ittte	ne
   b7680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7684:	ea94 0f0c 	teqne	r4, ip
   b7688:	ea95 0f0c 	teqne	r5, ip
   b768c:	f000 f8a7 	bleq	b77de <__aeabi_ddiv+0x16e>
   b7690:	eba4 0405 	sub.w	r4, r4, r5
   b7694:	ea81 0e03 	eor.w	lr, r1, r3
   b7698:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b769c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b76a0:	f000 8088 	beq.w	b77b4 <__aeabi_ddiv+0x144>
   b76a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b76a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b76ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b76b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b76b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b76b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b76bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b76c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b76c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b76c8:	429d      	cmp	r5, r3
   b76ca:	bf08      	it	eq
   b76cc:	4296      	cmpeq	r6, r2
   b76ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b76d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b76d6:	d202      	bcs.n	b76de <__aeabi_ddiv+0x6e>
   b76d8:	085b      	lsrs	r3, r3, #1
   b76da:	ea4f 0232 	mov.w	r2, r2, rrx
   b76de:	1ab6      	subs	r6, r6, r2
   b76e0:	eb65 0503 	sbc.w	r5, r5, r3
   b76e4:	085b      	lsrs	r3, r3, #1
   b76e6:	ea4f 0232 	mov.w	r2, r2, rrx
   b76ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b76ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b76f2:	ebb6 0e02 	subs.w	lr, r6, r2
   b76f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b76fa:	bf22      	ittt	cs
   b76fc:	1ab6      	subcs	r6, r6, r2
   b76fe:	4675      	movcs	r5, lr
   b7700:	ea40 000c 	orrcs.w	r0, r0, ip
   b7704:	085b      	lsrs	r3, r3, #1
   b7706:	ea4f 0232 	mov.w	r2, r2, rrx
   b770a:	ebb6 0e02 	subs.w	lr, r6, r2
   b770e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7712:	bf22      	ittt	cs
   b7714:	1ab6      	subcs	r6, r6, r2
   b7716:	4675      	movcs	r5, lr
   b7718:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b771c:	085b      	lsrs	r3, r3, #1
   b771e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7722:	ebb6 0e02 	subs.w	lr, r6, r2
   b7726:	eb75 0e03 	sbcs.w	lr, r5, r3
   b772a:	bf22      	ittt	cs
   b772c:	1ab6      	subcs	r6, r6, r2
   b772e:	4675      	movcs	r5, lr
   b7730:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7734:	085b      	lsrs	r3, r3, #1
   b7736:	ea4f 0232 	mov.w	r2, r2, rrx
   b773a:	ebb6 0e02 	subs.w	lr, r6, r2
   b773e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7742:	bf22      	ittt	cs
   b7744:	1ab6      	subcs	r6, r6, r2
   b7746:	4675      	movcs	r5, lr
   b7748:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b774c:	ea55 0e06 	orrs.w	lr, r5, r6
   b7750:	d018      	beq.n	b7784 <__aeabi_ddiv+0x114>
   b7752:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7756:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b775a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b775e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7762:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7766:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b776a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b776e:	d1c0      	bne.n	b76f2 <__aeabi_ddiv+0x82>
   b7770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7774:	d10b      	bne.n	b778e <__aeabi_ddiv+0x11e>
   b7776:	ea41 0100 	orr.w	r1, r1, r0
   b777a:	f04f 0000 	mov.w	r0, #0
   b777e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7782:	e7b6      	b.n	b76f2 <__aeabi_ddiv+0x82>
   b7784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7788:	bf04      	itt	eq
   b778a:	4301      	orreq	r1, r0
   b778c:	2000      	moveq	r0, #0
   b778e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7792:	bf88      	it	hi
   b7794:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7798:	f63f aeaf 	bhi.w	b74fa <__aeabi_dmul+0xde>
   b779c:	ebb5 0c03 	subs.w	ip, r5, r3
   b77a0:	bf04      	itt	eq
   b77a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b77a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b77aa:	f150 0000 	adcs.w	r0, r0, #0
   b77ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b77b2:	bd70      	pop	{r4, r5, r6, pc}
   b77b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b77b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b77bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b77c0:	bfc2      	ittt	gt
   b77c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b77c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b77ca:	bd70      	popgt	{r4, r5, r6, pc}
   b77cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b77d0:	f04f 0e00 	mov.w	lr, #0
   b77d4:	3c01      	subs	r4, #1
   b77d6:	e690      	b.n	b74fa <__aeabi_dmul+0xde>
   b77d8:	ea45 0e06 	orr.w	lr, r5, r6
   b77dc:	e68d      	b.n	b74fa <__aeabi_dmul+0xde>
   b77de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b77e2:	ea94 0f0c 	teq	r4, ip
   b77e6:	bf08      	it	eq
   b77e8:	ea95 0f0c 	teqeq	r5, ip
   b77ec:	f43f af3b 	beq.w	b7666 <__aeabi_dmul+0x24a>
   b77f0:	ea94 0f0c 	teq	r4, ip
   b77f4:	d10a      	bne.n	b780c <__aeabi_ddiv+0x19c>
   b77f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b77fa:	f47f af34 	bne.w	b7666 <__aeabi_dmul+0x24a>
   b77fe:	ea95 0f0c 	teq	r5, ip
   b7802:	f47f af25 	bne.w	b7650 <__aeabi_dmul+0x234>
   b7806:	4610      	mov	r0, r2
   b7808:	4619      	mov	r1, r3
   b780a:	e72c      	b.n	b7666 <__aeabi_dmul+0x24a>
   b780c:	ea95 0f0c 	teq	r5, ip
   b7810:	d106      	bne.n	b7820 <__aeabi_ddiv+0x1b0>
   b7812:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7816:	f43f aefd 	beq.w	b7614 <__aeabi_dmul+0x1f8>
   b781a:	4610      	mov	r0, r2
   b781c:	4619      	mov	r1, r3
   b781e:	e722      	b.n	b7666 <__aeabi_dmul+0x24a>
   b7820:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7824:	bf18      	it	ne
   b7826:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b782a:	f47f aec5 	bne.w	b75b8 <__aeabi_dmul+0x19c>
   b782e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7832:	f47f af0d 	bne.w	b7650 <__aeabi_dmul+0x234>
   b7836:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b783a:	f47f aeeb 	bne.w	b7614 <__aeabi_dmul+0x1f8>
   b783e:	e712      	b.n	b7666 <__aeabi_dmul+0x24a>

000b7840 <__gedf2>:
   b7840:	f04f 3cff 	mov.w	ip, #4294967295
   b7844:	e006      	b.n	b7854 <__cmpdf2+0x4>
   b7846:	bf00      	nop

000b7848 <__ledf2>:
   b7848:	f04f 0c01 	mov.w	ip, #1
   b784c:	e002      	b.n	b7854 <__cmpdf2+0x4>
   b784e:	bf00      	nop

000b7850 <__cmpdf2>:
   b7850:	f04f 0c01 	mov.w	ip, #1
   b7854:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7858:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b785c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7864:	bf18      	it	ne
   b7866:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b786a:	d01b      	beq.n	b78a4 <__cmpdf2+0x54>
   b786c:	b001      	add	sp, #4
   b786e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7872:	bf0c      	ite	eq
   b7874:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7878:	ea91 0f03 	teqne	r1, r3
   b787c:	bf02      	ittt	eq
   b787e:	ea90 0f02 	teqeq	r0, r2
   b7882:	2000      	moveq	r0, #0
   b7884:	4770      	bxeq	lr
   b7886:	f110 0f00 	cmn.w	r0, #0
   b788a:	ea91 0f03 	teq	r1, r3
   b788e:	bf58      	it	pl
   b7890:	4299      	cmppl	r1, r3
   b7892:	bf08      	it	eq
   b7894:	4290      	cmpeq	r0, r2
   b7896:	bf2c      	ite	cs
   b7898:	17d8      	asrcs	r0, r3, #31
   b789a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b789e:	f040 0001 	orr.w	r0, r0, #1
   b78a2:	4770      	bx	lr
   b78a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b78a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b78ac:	d102      	bne.n	b78b4 <__cmpdf2+0x64>
   b78ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b78b2:	d107      	bne.n	b78c4 <__cmpdf2+0x74>
   b78b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b78b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b78bc:	d1d6      	bne.n	b786c <__cmpdf2+0x1c>
   b78be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b78c2:	d0d3      	beq.n	b786c <__cmpdf2+0x1c>
   b78c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b78c8:	4770      	bx	lr
   b78ca:	bf00      	nop

000b78cc <__aeabi_cdrcmple>:
   b78cc:	4684      	mov	ip, r0
   b78ce:	4610      	mov	r0, r2
   b78d0:	4662      	mov	r2, ip
   b78d2:	468c      	mov	ip, r1
   b78d4:	4619      	mov	r1, r3
   b78d6:	4663      	mov	r3, ip
   b78d8:	e000      	b.n	b78dc <__aeabi_cdcmpeq>
   b78da:	bf00      	nop

000b78dc <__aeabi_cdcmpeq>:
   b78dc:	b501      	push	{r0, lr}
   b78de:	f7ff ffb7 	bl	b7850 <__cmpdf2>
   b78e2:	2800      	cmp	r0, #0
   b78e4:	bf48      	it	mi
   b78e6:	f110 0f00 	cmnmi.w	r0, #0
   b78ea:	bd01      	pop	{r0, pc}

000b78ec <__aeabi_dcmpeq>:
   b78ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   b78f0:	f7ff fff4 	bl	b78dc <__aeabi_cdcmpeq>
   b78f4:	bf0c      	ite	eq
   b78f6:	2001      	moveq	r0, #1
   b78f8:	2000      	movne	r0, #0
   b78fa:	f85d fb08 	ldr.w	pc, [sp], #8
   b78fe:	bf00      	nop

000b7900 <__aeabi_dcmplt>:
   b7900:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7904:	f7ff ffea 	bl	b78dc <__aeabi_cdcmpeq>
   b7908:	bf34      	ite	cc
   b790a:	2001      	movcc	r0, #1
   b790c:	2000      	movcs	r0, #0
   b790e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7912:	bf00      	nop

000b7914 <__aeabi_dcmple>:
   b7914:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7918:	f7ff ffe0 	bl	b78dc <__aeabi_cdcmpeq>
   b791c:	bf94      	ite	ls
   b791e:	2001      	movls	r0, #1
   b7920:	2000      	movhi	r0, #0
   b7922:	f85d fb08 	ldr.w	pc, [sp], #8
   b7926:	bf00      	nop

000b7928 <__aeabi_dcmpge>:
   b7928:	f84d ed08 	str.w	lr, [sp, #-8]!
   b792c:	f7ff ffce 	bl	b78cc <__aeabi_cdrcmple>
   b7930:	bf94      	ite	ls
   b7932:	2001      	movls	r0, #1
   b7934:	2000      	movhi	r0, #0
   b7936:	f85d fb08 	ldr.w	pc, [sp], #8
   b793a:	bf00      	nop

000b793c <__aeabi_dcmpgt>:
   b793c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7940:	f7ff ffc4 	bl	b78cc <__aeabi_cdrcmple>
   b7944:	bf34      	ite	cc
   b7946:	2001      	movcc	r0, #1
   b7948:	2000      	movcs	r0, #0
   b794a:	f85d fb08 	ldr.w	pc, [sp], #8
   b794e:	bf00      	nop

000b7950 <__aeabi_d2uiz>:
   b7950:	004a      	lsls	r2, r1, #1
   b7952:	d211      	bcs.n	b7978 <__aeabi_d2uiz+0x28>
   b7954:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7958:	d211      	bcs.n	b797e <__aeabi_d2uiz+0x2e>
   b795a:	d50d      	bpl.n	b7978 <__aeabi_d2uiz+0x28>
   b795c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7960:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7964:	d40e      	bmi.n	b7984 <__aeabi_d2uiz+0x34>
   b7966:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b796a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b796e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7972:	fa23 f002 	lsr.w	r0, r3, r2
   b7976:	4770      	bx	lr
   b7978:	f04f 0000 	mov.w	r0, #0
   b797c:	4770      	bx	lr
   b797e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7982:	d102      	bne.n	b798a <__aeabi_d2uiz+0x3a>
   b7984:	f04f 30ff 	mov.w	r0, #4294967295
   b7988:	4770      	bx	lr
   b798a:	f04f 0000 	mov.w	r0, #0
   b798e:	4770      	bx	lr

000b7990 <__aeabi_d2ulz>:
   b7990:	b5d0      	push	{r4, r6, r7, lr}
   b7992:	4b0c      	ldr	r3, [pc, #48]	; (b79c4 <__aeabi_d2ulz+0x34>)
   b7994:	2200      	movs	r2, #0
   b7996:	4606      	mov	r6, r0
   b7998:	460f      	mov	r7, r1
   b799a:	f7ff fd3f 	bl	b741c <__aeabi_dmul>
   b799e:	f7ff ffd7 	bl	b7950 <__aeabi_d2uiz>
   b79a2:	4604      	mov	r4, r0
   b79a4:	f7ff fcc0 	bl	b7328 <__aeabi_ui2d>
   b79a8:	4b07      	ldr	r3, [pc, #28]	; (b79c8 <__aeabi_d2ulz+0x38>)
   b79aa:	2200      	movs	r2, #0
   b79ac:	f7ff fd36 	bl	b741c <__aeabi_dmul>
   b79b0:	4602      	mov	r2, r0
   b79b2:	460b      	mov	r3, r1
   b79b4:	4630      	mov	r0, r6
   b79b6:	4639      	mov	r1, r7
   b79b8:	f7ff fb78 	bl	b70ac <__aeabi_dsub>
   b79bc:	f7ff ffc8 	bl	b7950 <__aeabi_d2uiz>
   b79c0:	4621      	mov	r1, r4
   b79c2:	bdd0      	pop	{r4, r6, r7, pc}
   b79c4:	3df00000 	.word	0x3df00000
   b79c8:	41f00000 	.word	0x41f00000

000b79cc <atexit>:
   b79cc:	2300      	movs	r3, #0
   b79ce:	4601      	mov	r1, r0
   b79d0:	461a      	mov	r2, r3
   b79d2:	4618      	mov	r0, r3
   b79d4:	f000 bfd2 	b.w	b897c <__register_exitproc>

000b79d8 <atof>:
   b79d8:	2100      	movs	r1, #0
   b79da:	f000 bedb 	b.w	b8794 <strtod>

000b79de <atoi>:
   b79de:	220a      	movs	r2, #10
   b79e0:	2100      	movs	r1, #0
   b79e2:	f000 bfc1 	b.w	b8968 <strtol>

000b79e6 <ldiv>:
   b79e6:	2900      	cmp	r1, #0
   b79e8:	b510      	push	{r4, lr}
   b79ea:	fb91 f4f2 	sdiv	r4, r1, r2
   b79ee:	fb02 1314 	mls	r3, r2, r4, r1
   b79f2:	db06      	blt.n	b7a02 <ldiv+0x1c>
   b79f4:	2b00      	cmp	r3, #0
   b79f6:	da01      	bge.n	b79fc <ldiv+0x16>
   b79f8:	3401      	adds	r4, #1
   b79fa:	1a9b      	subs	r3, r3, r2
   b79fc:	e9c0 4300 	strd	r4, r3, [r0]
   b7a00:	bd10      	pop	{r4, pc}
   b7a02:	2b00      	cmp	r3, #0
   b7a04:	bfc4      	itt	gt
   b7a06:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b7a0a:	189b      	addgt	r3, r3, r2
   b7a0c:	e7f6      	b.n	b79fc <ldiv+0x16>

000b7a0e <memcpy>:
   b7a0e:	440a      	add	r2, r1
   b7a10:	4291      	cmp	r1, r2
   b7a12:	f100 33ff 	add.w	r3, r0, #4294967295
   b7a16:	d100      	bne.n	b7a1a <memcpy+0xc>
   b7a18:	4770      	bx	lr
   b7a1a:	b510      	push	{r4, lr}
   b7a1c:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7a20:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7a24:	4291      	cmp	r1, r2
   b7a26:	d1f9      	bne.n	b7a1c <memcpy+0xe>
   b7a28:	bd10      	pop	{r4, pc}

000b7a2a <memset>:
   b7a2a:	4402      	add	r2, r0
   b7a2c:	4603      	mov	r3, r0
   b7a2e:	4293      	cmp	r3, r2
   b7a30:	d100      	bne.n	b7a34 <memset+0xa>
   b7a32:	4770      	bx	lr
   b7a34:	f803 1b01 	strb.w	r1, [r3], #1
   b7a38:	e7f9      	b.n	b7a2e <memset+0x4>
	...

000b7a3c <srand>:
   b7a3c:	b538      	push	{r3, r4, r5, lr}
   b7a3e:	4b10      	ldr	r3, [pc, #64]	; (b7a80 <srand+0x44>)
   b7a40:	681d      	ldr	r5, [r3, #0]
   b7a42:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a44:	4604      	mov	r4, r0
   b7a46:	b9b3      	cbnz	r3, b7a76 <srand+0x3a>
   b7a48:	2018      	movs	r0, #24
   b7a4a:	f7fd fd05 	bl	b5458 <malloc>
   b7a4e:	4602      	mov	r2, r0
   b7a50:	63a8      	str	r0, [r5, #56]	; 0x38
   b7a52:	b920      	cbnz	r0, b7a5e <srand+0x22>
   b7a54:	4b0b      	ldr	r3, [pc, #44]	; (b7a84 <srand+0x48>)
   b7a56:	480c      	ldr	r0, [pc, #48]	; (b7a88 <srand+0x4c>)
   b7a58:	2142      	movs	r1, #66	; 0x42
   b7a5a:	f7fd fd45 	bl	b54e8 <__assert_func>
   b7a5e:	490b      	ldr	r1, [pc, #44]	; (b7a8c <srand+0x50>)
   b7a60:	4b0b      	ldr	r3, [pc, #44]	; (b7a90 <srand+0x54>)
   b7a62:	e9c0 1300 	strd	r1, r3, [r0]
   b7a66:	4b0b      	ldr	r3, [pc, #44]	; (b7a94 <srand+0x58>)
   b7a68:	6083      	str	r3, [r0, #8]
   b7a6a:	230b      	movs	r3, #11
   b7a6c:	8183      	strh	r3, [r0, #12]
   b7a6e:	2100      	movs	r1, #0
   b7a70:	2001      	movs	r0, #1
   b7a72:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7a76:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a78:	2200      	movs	r2, #0
   b7a7a:	611c      	str	r4, [r3, #16]
   b7a7c:	615a      	str	r2, [r3, #20]
   b7a7e:	bd38      	pop	{r3, r4, r5, pc}
   b7a80:	2003cd1c 	.word	0x2003cd1c
   b7a84:	000ba059 	.word	0x000ba059
   b7a88:	000ba070 	.word	0x000ba070
   b7a8c:	abcd330e 	.word	0xabcd330e
   b7a90:	e66d1234 	.word	0xe66d1234
   b7a94:	0005deec 	.word	0x0005deec

000b7a98 <strcat>:
   b7a98:	b510      	push	{r4, lr}
   b7a9a:	4602      	mov	r2, r0
   b7a9c:	7814      	ldrb	r4, [r2, #0]
   b7a9e:	4613      	mov	r3, r2
   b7aa0:	3201      	adds	r2, #1
   b7aa2:	2c00      	cmp	r4, #0
   b7aa4:	d1fa      	bne.n	b7a9c <strcat+0x4>
   b7aa6:	3b01      	subs	r3, #1
   b7aa8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7aac:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7ab0:	2a00      	cmp	r2, #0
   b7ab2:	d1f9      	bne.n	b7aa8 <strcat+0x10>
   b7ab4:	bd10      	pop	{r4, pc}

000b7ab6 <strcmp>:
   b7ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7aba:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7abe:	2a01      	cmp	r2, #1
   b7ac0:	bf28      	it	cs
   b7ac2:	429a      	cmpcs	r2, r3
   b7ac4:	d0f7      	beq.n	b7ab6 <strcmp>
   b7ac6:	1ad0      	subs	r0, r2, r3
   b7ac8:	4770      	bx	lr

000b7aca <strcpy>:
   b7aca:	4603      	mov	r3, r0
   b7acc:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7ad0:	f803 2b01 	strb.w	r2, [r3], #1
   b7ad4:	2a00      	cmp	r2, #0
   b7ad6:	d1f9      	bne.n	b7acc <strcpy+0x2>
   b7ad8:	4770      	bx	lr
	...

000b7adc <strdup>:
   b7adc:	4b02      	ldr	r3, [pc, #8]	; (b7ae8 <strdup+0xc>)
   b7ade:	4601      	mov	r1, r0
   b7ae0:	6818      	ldr	r0, [r3, #0]
   b7ae2:	f000 b803 	b.w	b7aec <_strdup_r>
   b7ae6:	bf00      	nop
   b7ae8:	2003cd1c 	.word	0x2003cd1c

000b7aec <_strdup_r>:
   b7aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7aee:	4604      	mov	r4, r0
   b7af0:	4608      	mov	r0, r1
   b7af2:	460d      	mov	r5, r1
   b7af4:	f000 f80f 	bl	b7b16 <strlen>
   b7af8:	1c42      	adds	r2, r0, #1
   b7afa:	4611      	mov	r1, r2
   b7afc:	4620      	mov	r0, r4
   b7afe:	9201      	str	r2, [sp, #4]
   b7b00:	f7fd fce2 	bl	b54c8 <_malloc_r>
   b7b04:	4604      	mov	r4, r0
   b7b06:	b118      	cbz	r0, b7b10 <_strdup_r+0x24>
   b7b08:	9a01      	ldr	r2, [sp, #4]
   b7b0a:	4629      	mov	r1, r5
   b7b0c:	f7ff ff7f 	bl	b7a0e <memcpy>
   b7b10:	4620      	mov	r0, r4
   b7b12:	b003      	add	sp, #12
   b7b14:	bd30      	pop	{r4, r5, pc}

000b7b16 <strlen>:
   b7b16:	4603      	mov	r3, r0
   b7b18:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7b1c:	2a00      	cmp	r2, #0
   b7b1e:	d1fb      	bne.n	b7b18 <strlen+0x2>
   b7b20:	1a18      	subs	r0, r3, r0
   b7b22:	3801      	subs	r0, #1
   b7b24:	4770      	bx	lr

000b7b26 <strncmp>:
   b7b26:	b510      	push	{r4, lr}
   b7b28:	b17a      	cbz	r2, b7b4a <strncmp+0x24>
   b7b2a:	4603      	mov	r3, r0
   b7b2c:	3901      	subs	r1, #1
   b7b2e:	1884      	adds	r4, r0, r2
   b7b30:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7b34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7b38:	4290      	cmp	r0, r2
   b7b3a:	d101      	bne.n	b7b40 <strncmp+0x1a>
   b7b3c:	42a3      	cmp	r3, r4
   b7b3e:	d101      	bne.n	b7b44 <strncmp+0x1e>
   b7b40:	1a80      	subs	r0, r0, r2
   b7b42:	bd10      	pop	{r4, pc}
   b7b44:	2800      	cmp	r0, #0
   b7b46:	d1f3      	bne.n	b7b30 <strncmp+0xa>
   b7b48:	e7fa      	b.n	b7b40 <strncmp+0x1a>
   b7b4a:	4610      	mov	r0, r2
   b7b4c:	e7f9      	b.n	b7b42 <strncmp+0x1c>

000b7b4e <sulp>:
   b7b4e:	b570      	push	{r4, r5, r6, lr}
   b7b50:	4604      	mov	r4, r0
   b7b52:	460d      	mov	r5, r1
   b7b54:	ec45 4b10 	vmov	d0, r4, r5
   b7b58:	4616      	mov	r6, r2
   b7b5a:	f001 fe69 	bl	b9830 <__ulp>
   b7b5e:	ec51 0b10 	vmov	r0, r1, d0
   b7b62:	b17e      	cbz	r6, b7b84 <sulp+0x36>
   b7b64:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b7b68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7b6c:	2b00      	cmp	r3, #0
   b7b6e:	dd09      	ble.n	b7b84 <sulp+0x36>
   b7b70:	051b      	lsls	r3, r3, #20
   b7b72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b7b76:	2400      	movs	r4, #0
   b7b78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7b7c:	4622      	mov	r2, r4
   b7b7e:	462b      	mov	r3, r5
   b7b80:	f7ff fc4c 	bl	b741c <__aeabi_dmul>
   b7b84:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7b88 <_strtod_l>:
   b7b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b8c:	ed2d 8b02 	vpush	{d8}
   b7b90:	b09d      	sub	sp, #116	; 0x74
   b7b92:	461f      	mov	r7, r3
   b7b94:	2300      	movs	r3, #0
   b7b96:	9318      	str	r3, [sp, #96]	; 0x60
   b7b98:	4ba2      	ldr	r3, [pc, #648]	; (b7e24 <_strtod_l+0x29c>)
   b7b9a:	9213      	str	r2, [sp, #76]	; 0x4c
   b7b9c:	681b      	ldr	r3, [r3, #0]
   b7b9e:	9305      	str	r3, [sp, #20]
   b7ba0:	4604      	mov	r4, r0
   b7ba2:	4618      	mov	r0, r3
   b7ba4:	4688      	mov	r8, r1
   b7ba6:	f7ff ffb6 	bl	b7b16 <strlen>
   b7baa:	f04f 0a00 	mov.w	sl, #0
   b7bae:	4605      	mov	r5, r0
   b7bb0:	f04f 0b00 	mov.w	fp, #0
   b7bb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7bba:	781a      	ldrb	r2, [r3, #0]
   b7bbc:	2a2b      	cmp	r2, #43	; 0x2b
   b7bbe:	d04e      	beq.n	b7c5e <_strtod_l+0xd6>
   b7bc0:	d83b      	bhi.n	b7c3a <_strtod_l+0xb2>
   b7bc2:	2a0d      	cmp	r2, #13
   b7bc4:	d834      	bhi.n	b7c30 <_strtod_l+0xa8>
   b7bc6:	2a08      	cmp	r2, #8
   b7bc8:	d834      	bhi.n	b7c34 <_strtod_l+0xac>
   b7bca:	2a00      	cmp	r2, #0
   b7bcc:	d03e      	beq.n	b7c4c <_strtod_l+0xc4>
   b7bce:	2300      	movs	r3, #0
   b7bd0:	930a      	str	r3, [sp, #40]	; 0x28
   b7bd2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b7bd4:	7833      	ldrb	r3, [r6, #0]
   b7bd6:	2b30      	cmp	r3, #48	; 0x30
   b7bd8:	f040 80b0 	bne.w	b7d3c <_strtod_l+0x1b4>
   b7bdc:	7873      	ldrb	r3, [r6, #1]
   b7bde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7be2:	2b58      	cmp	r3, #88	; 0x58
   b7be4:	d168      	bne.n	b7cb8 <_strtod_l+0x130>
   b7be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7be8:	9301      	str	r3, [sp, #4]
   b7bea:	ab18      	add	r3, sp, #96	; 0x60
   b7bec:	9702      	str	r7, [sp, #8]
   b7bee:	9300      	str	r3, [sp, #0]
   b7bf0:	4a8d      	ldr	r2, [pc, #564]	; (b7e28 <_strtod_l+0x2a0>)
   b7bf2:	ab19      	add	r3, sp, #100	; 0x64
   b7bf4:	a917      	add	r1, sp, #92	; 0x5c
   b7bf6:	4620      	mov	r0, r4
   b7bf8:	f000 ff8a 	bl	b8b10 <__gethex>
   b7bfc:	f010 0707 	ands.w	r7, r0, #7
   b7c00:	4605      	mov	r5, r0
   b7c02:	d005      	beq.n	b7c10 <_strtod_l+0x88>
   b7c04:	2f06      	cmp	r7, #6
   b7c06:	d12c      	bne.n	b7c62 <_strtod_l+0xda>
   b7c08:	3601      	adds	r6, #1
   b7c0a:	2300      	movs	r3, #0
   b7c0c:	9617      	str	r6, [sp, #92]	; 0x5c
   b7c0e:	930a      	str	r3, [sp, #40]	; 0x28
   b7c10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7c12:	2b00      	cmp	r3, #0
   b7c14:	f040 8590 	bne.w	b8738 <_strtod_l+0xbb0>
   b7c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7c1a:	b1eb      	cbz	r3, b7c58 <_strtod_l+0xd0>
   b7c1c:	4652      	mov	r2, sl
   b7c1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b7c22:	ec43 2b10 	vmov	d0, r2, r3
   b7c26:	b01d      	add	sp, #116	; 0x74
   b7c28:	ecbd 8b02 	vpop	{d8}
   b7c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7c30:	2a20      	cmp	r2, #32
   b7c32:	d1cc      	bne.n	b7bce <_strtod_l+0x46>
   b7c34:	3301      	adds	r3, #1
   b7c36:	9317      	str	r3, [sp, #92]	; 0x5c
   b7c38:	e7be      	b.n	b7bb8 <_strtod_l+0x30>
   b7c3a:	2a2d      	cmp	r2, #45	; 0x2d
   b7c3c:	d1c7      	bne.n	b7bce <_strtod_l+0x46>
   b7c3e:	2201      	movs	r2, #1
   b7c40:	920a      	str	r2, [sp, #40]	; 0x28
   b7c42:	1c5a      	adds	r2, r3, #1
   b7c44:	9217      	str	r2, [sp, #92]	; 0x5c
   b7c46:	785b      	ldrb	r3, [r3, #1]
   b7c48:	2b00      	cmp	r3, #0
   b7c4a:	d1c2      	bne.n	b7bd2 <_strtod_l+0x4a>
   b7c4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7c4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7c52:	2b00      	cmp	r3, #0
   b7c54:	f040 856e 	bne.w	b8734 <_strtod_l+0xbac>
   b7c58:	4652      	mov	r2, sl
   b7c5a:	465b      	mov	r3, fp
   b7c5c:	e7e1      	b.n	b7c22 <_strtod_l+0x9a>
   b7c5e:	2200      	movs	r2, #0
   b7c60:	e7ee      	b.n	b7c40 <_strtod_l+0xb8>
   b7c62:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7c64:	b13a      	cbz	r2, b7c76 <_strtod_l+0xee>
   b7c66:	2135      	movs	r1, #53	; 0x35
   b7c68:	a81a      	add	r0, sp, #104	; 0x68
   b7c6a:	f001 feec 	bl	b9a46 <__copybits>
   b7c6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7c70:	4620      	mov	r0, r4
   b7c72:	f001 faab 	bl	b91cc <_Bfree>
   b7c76:	3f01      	subs	r7, #1
   b7c78:	2f04      	cmp	r7, #4
   b7c7a:	d806      	bhi.n	b7c8a <_strtod_l+0x102>
   b7c7c:	e8df f007 	tbb	[pc, r7]
   b7c80:	1714030a 	.word	0x1714030a
   b7c84:	0a          	.byte	0x0a
   b7c85:	00          	.byte	0x00
   b7c86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b7c8a:	0728      	lsls	r0, r5, #28
   b7c8c:	d5c0      	bpl.n	b7c10 <_strtod_l+0x88>
   b7c8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b7c92:	e7bd      	b.n	b7c10 <_strtod_l+0x88>
   b7c94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7c98:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b7c9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b7c9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b7ca2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b7ca6:	e7f0      	b.n	b7c8a <_strtod_l+0x102>
   b7ca8:	f8df b180 	ldr.w	fp, [pc, #384]	; b7e2c <_strtod_l+0x2a4>
   b7cac:	e7ed      	b.n	b7c8a <_strtod_l+0x102>
   b7cae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b7cb2:	f04f 3aff 	mov.w	sl, #4294967295
   b7cb6:	e7e8      	b.n	b7c8a <_strtod_l+0x102>
   b7cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7cba:	1c5a      	adds	r2, r3, #1
   b7cbc:	9217      	str	r2, [sp, #92]	; 0x5c
   b7cbe:	785b      	ldrb	r3, [r3, #1]
   b7cc0:	2b30      	cmp	r3, #48	; 0x30
   b7cc2:	d0f9      	beq.n	b7cb8 <_strtod_l+0x130>
   b7cc4:	2b00      	cmp	r3, #0
   b7cc6:	d0a3      	beq.n	b7c10 <_strtod_l+0x88>
   b7cc8:	2301      	movs	r3, #1
   b7cca:	f04f 0900 	mov.w	r9, #0
   b7cce:	9304      	str	r3, [sp, #16]
   b7cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7cd2:	9308      	str	r3, [sp, #32]
   b7cd4:	f8cd 901c 	str.w	r9, [sp, #28]
   b7cd8:	464f      	mov	r7, r9
   b7cda:	220a      	movs	r2, #10
   b7cdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b7cde:	7806      	ldrb	r6, [r0, #0]
   b7ce0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b7ce4:	b2d9      	uxtb	r1, r3
   b7ce6:	2909      	cmp	r1, #9
   b7ce8:	d92a      	bls.n	b7d40 <_strtod_l+0x1b8>
   b7cea:	9905      	ldr	r1, [sp, #20]
   b7cec:	462a      	mov	r2, r5
   b7cee:	f7ff ff1a 	bl	b7b26 <strncmp>
   b7cf2:	b398      	cbz	r0, b7d5c <_strtod_l+0x1d4>
   b7cf4:	2000      	movs	r0, #0
   b7cf6:	4632      	mov	r2, r6
   b7cf8:	463d      	mov	r5, r7
   b7cfa:	9005      	str	r0, [sp, #20]
   b7cfc:	4603      	mov	r3, r0
   b7cfe:	2a65      	cmp	r2, #101	; 0x65
   b7d00:	d001      	beq.n	b7d06 <_strtod_l+0x17e>
   b7d02:	2a45      	cmp	r2, #69	; 0x45
   b7d04:	d118      	bne.n	b7d38 <_strtod_l+0x1b0>
   b7d06:	b91d      	cbnz	r5, b7d10 <_strtod_l+0x188>
   b7d08:	9a04      	ldr	r2, [sp, #16]
   b7d0a:	4302      	orrs	r2, r0
   b7d0c:	d09e      	beq.n	b7c4c <_strtod_l+0xc4>
   b7d0e:	2500      	movs	r5, #0
   b7d10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b7d14:	f108 0201 	add.w	r2, r8, #1
   b7d18:	9217      	str	r2, [sp, #92]	; 0x5c
   b7d1a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b7d1e:	2a2b      	cmp	r2, #43	; 0x2b
   b7d20:	d075      	beq.n	b7e0e <_strtod_l+0x286>
   b7d22:	2a2d      	cmp	r2, #45	; 0x2d
   b7d24:	d07b      	beq.n	b7e1e <_strtod_l+0x296>
   b7d26:	f04f 0c00 	mov.w	ip, #0
   b7d2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b7d2e:	2909      	cmp	r1, #9
   b7d30:	f240 8082 	bls.w	b7e38 <_strtod_l+0x2b0>
   b7d34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7d38:	2600      	movs	r6, #0
   b7d3a:	e09d      	b.n	b7e78 <_strtod_l+0x2f0>
   b7d3c:	2300      	movs	r3, #0
   b7d3e:	e7c4      	b.n	b7cca <_strtod_l+0x142>
   b7d40:	2f08      	cmp	r7, #8
   b7d42:	bfd8      	it	le
   b7d44:	9907      	ldrle	r1, [sp, #28]
   b7d46:	f100 0001 	add.w	r0, r0, #1
   b7d4a:	bfda      	itte	le
   b7d4c:	fb02 3301 	mlale	r3, r2, r1, r3
   b7d50:	9307      	strle	r3, [sp, #28]
   b7d52:	fb02 3909 	mlagt	r9, r2, r9, r3
   b7d56:	3701      	adds	r7, #1
   b7d58:	9017      	str	r0, [sp, #92]	; 0x5c
   b7d5a:	e7bf      	b.n	b7cdc <_strtod_l+0x154>
   b7d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7d5e:	195a      	adds	r2, r3, r5
   b7d60:	9217      	str	r2, [sp, #92]	; 0x5c
   b7d62:	5d5a      	ldrb	r2, [r3, r5]
   b7d64:	2f00      	cmp	r7, #0
   b7d66:	d037      	beq.n	b7dd8 <_strtod_l+0x250>
   b7d68:	9005      	str	r0, [sp, #20]
   b7d6a:	463d      	mov	r5, r7
   b7d6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7d70:	2b09      	cmp	r3, #9
   b7d72:	d912      	bls.n	b7d9a <_strtod_l+0x212>
   b7d74:	2301      	movs	r3, #1
   b7d76:	e7c2      	b.n	b7cfe <_strtod_l+0x176>
   b7d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7d7a:	1c5a      	adds	r2, r3, #1
   b7d7c:	9217      	str	r2, [sp, #92]	; 0x5c
   b7d7e:	785a      	ldrb	r2, [r3, #1]
   b7d80:	3001      	adds	r0, #1
   b7d82:	2a30      	cmp	r2, #48	; 0x30
   b7d84:	d0f8      	beq.n	b7d78 <_strtod_l+0x1f0>
   b7d86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b7d8a:	2b08      	cmp	r3, #8
   b7d8c:	f200 84d9 	bhi.w	b8742 <_strtod_l+0xbba>
   b7d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7d92:	9005      	str	r0, [sp, #20]
   b7d94:	2000      	movs	r0, #0
   b7d96:	9308      	str	r3, [sp, #32]
   b7d98:	4605      	mov	r5, r0
   b7d9a:	3a30      	subs	r2, #48	; 0x30
   b7d9c:	f100 0301 	add.w	r3, r0, #1
   b7da0:	d014      	beq.n	b7dcc <_strtod_l+0x244>
   b7da2:	9905      	ldr	r1, [sp, #20]
   b7da4:	4419      	add	r1, r3
   b7da6:	9105      	str	r1, [sp, #20]
   b7da8:	462b      	mov	r3, r5
   b7daa:	eb00 0e05 	add.w	lr, r0, r5
   b7dae:	210a      	movs	r1, #10
   b7db0:	4573      	cmp	r3, lr
   b7db2:	d113      	bne.n	b7ddc <_strtod_l+0x254>
   b7db4:	182b      	adds	r3, r5, r0
   b7db6:	2b08      	cmp	r3, #8
   b7db8:	f105 0501 	add.w	r5, r5, #1
   b7dbc:	4405      	add	r5, r0
   b7dbe:	dc1c      	bgt.n	b7dfa <_strtod_l+0x272>
   b7dc0:	9907      	ldr	r1, [sp, #28]
   b7dc2:	230a      	movs	r3, #10
   b7dc4:	fb03 2301 	mla	r3, r3, r1, r2
   b7dc8:	9307      	str	r3, [sp, #28]
   b7dca:	2300      	movs	r3, #0
   b7dcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7dce:	1c51      	adds	r1, r2, #1
   b7dd0:	9117      	str	r1, [sp, #92]	; 0x5c
   b7dd2:	7852      	ldrb	r2, [r2, #1]
   b7dd4:	4618      	mov	r0, r3
   b7dd6:	e7c9      	b.n	b7d6c <_strtod_l+0x1e4>
   b7dd8:	4638      	mov	r0, r7
   b7dda:	e7d2      	b.n	b7d82 <_strtod_l+0x1fa>
   b7ddc:	2b08      	cmp	r3, #8
   b7dde:	dc04      	bgt.n	b7dea <_strtod_l+0x262>
   b7de0:	9e07      	ldr	r6, [sp, #28]
   b7de2:	434e      	muls	r6, r1
   b7de4:	9607      	str	r6, [sp, #28]
   b7de6:	3301      	adds	r3, #1
   b7de8:	e7e2      	b.n	b7db0 <_strtod_l+0x228>
   b7dea:	f103 0c01 	add.w	ip, r3, #1
   b7dee:	f1bc 0f10 	cmp.w	ip, #16
   b7df2:	bfd8      	it	le
   b7df4:	fb01 f909 	mulle.w	r9, r1, r9
   b7df8:	e7f5      	b.n	b7de6 <_strtod_l+0x25e>
   b7dfa:	2d10      	cmp	r5, #16
   b7dfc:	bfdc      	itt	le
   b7dfe:	230a      	movle	r3, #10
   b7e00:	fb03 2909 	mlale	r9, r3, r9, r2
   b7e04:	e7e1      	b.n	b7dca <_strtod_l+0x242>
   b7e06:	2300      	movs	r3, #0
   b7e08:	9305      	str	r3, [sp, #20]
   b7e0a:	2301      	movs	r3, #1
   b7e0c:	e77c      	b.n	b7d08 <_strtod_l+0x180>
   b7e0e:	f04f 0c00 	mov.w	ip, #0
   b7e12:	f108 0202 	add.w	r2, r8, #2
   b7e16:	9217      	str	r2, [sp, #92]	; 0x5c
   b7e18:	f898 2002 	ldrb.w	r2, [r8, #2]
   b7e1c:	e785      	b.n	b7d2a <_strtod_l+0x1a2>
   b7e1e:	f04f 0c01 	mov.w	ip, #1
   b7e22:	e7f6      	b.n	b7e12 <_strtod_l+0x28a>
   b7e24:	000ba368 	.word	0x000ba368
   b7e28:	000ba0fc 	.word	0x000ba0fc
   b7e2c:	7ff00000 	.word	0x7ff00000
   b7e30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7e32:	1c51      	adds	r1, r2, #1
   b7e34:	9117      	str	r1, [sp, #92]	; 0x5c
   b7e36:	7852      	ldrb	r2, [r2, #1]
   b7e38:	2a30      	cmp	r2, #48	; 0x30
   b7e3a:	d0f9      	beq.n	b7e30 <_strtod_l+0x2a8>
   b7e3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b7e40:	2908      	cmp	r1, #8
   b7e42:	f63f af79 	bhi.w	b7d38 <_strtod_l+0x1b0>
   b7e46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b7e4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7e4c:	9206      	str	r2, [sp, #24]
   b7e4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7e50:	1c51      	adds	r1, r2, #1
   b7e52:	9117      	str	r1, [sp, #92]	; 0x5c
   b7e54:	7852      	ldrb	r2, [r2, #1]
   b7e56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b7e5a:	2e09      	cmp	r6, #9
   b7e5c:	d937      	bls.n	b7ece <_strtod_l+0x346>
   b7e5e:	9e06      	ldr	r6, [sp, #24]
   b7e60:	1b89      	subs	r1, r1, r6
   b7e62:	2908      	cmp	r1, #8
   b7e64:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7e68:	dc02      	bgt.n	b7e70 <_strtod_l+0x2e8>
   b7e6a:	4576      	cmp	r6, lr
   b7e6c:	bfa8      	it	ge
   b7e6e:	4676      	movge	r6, lr
   b7e70:	f1bc 0f00 	cmp.w	ip, #0
   b7e74:	d000      	beq.n	b7e78 <_strtod_l+0x2f0>
   b7e76:	4276      	negs	r6, r6
   b7e78:	2d00      	cmp	r5, #0
   b7e7a:	d14d      	bne.n	b7f18 <_strtod_l+0x390>
   b7e7c:	9904      	ldr	r1, [sp, #16]
   b7e7e:	4301      	orrs	r1, r0
   b7e80:	f47f aec6 	bne.w	b7c10 <_strtod_l+0x88>
   b7e84:	2b00      	cmp	r3, #0
   b7e86:	f47f aee1 	bne.w	b7c4c <_strtod_l+0xc4>
   b7e8a:	2a69      	cmp	r2, #105	; 0x69
   b7e8c:	d027      	beq.n	b7ede <_strtod_l+0x356>
   b7e8e:	dc24      	bgt.n	b7eda <_strtod_l+0x352>
   b7e90:	2a49      	cmp	r2, #73	; 0x49
   b7e92:	d024      	beq.n	b7ede <_strtod_l+0x356>
   b7e94:	2a4e      	cmp	r2, #78	; 0x4e
   b7e96:	f47f aed9 	bne.w	b7c4c <_strtod_l+0xc4>
   b7e9a:	499f      	ldr	r1, [pc, #636]	; (b8118 <_strtod_l+0x590>)
   b7e9c:	a817      	add	r0, sp, #92	; 0x5c
   b7e9e:	f001 f88f 	bl	b8fc0 <__match>
   b7ea2:	2800      	cmp	r0, #0
   b7ea4:	f43f aed2 	beq.w	b7c4c <_strtod_l+0xc4>
   b7ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7eaa:	781b      	ldrb	r3, [r3, #0]
   b7eac:	2b28      	cmp	r3, #40	; 0x28
   b7eae:	d12d      	bne.n	b7f0c <_strtod_l+0x384>
   b7eb0:	499a      	ldr	r1, [pc, #616]	; (b811c <_strtod_l+0x594>)
   b7eb2:	aa1a      	add	r2, sp, #104	; 0x68
   b7eb4:	a817      	add	r0, sp, #92	; 0x5c
   b7eb6:	f001 f897 	bl	b8fe8 <__hexnan>
   b7eba:	2805      	cmp	r0, #5
   b7ebc:	d126      	bne.n	b7f0c <_strtod_l+0x384>
   b7ebe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b7ec0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b7ec4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b7ec8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b7ecc:	e6a0      	b.n	b7c10 <_strtod_l+0x88>
   b7ece:	210a      	movs	r1, #10
   b7ed0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b7ed4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b7ed8:	e7b9      	b.n	b7e4e <_strtod_l+0x2c6>
   b7eda:	2a6e      	cmp	r2, #110	; 0x6e
   b7edc:	e7db      	b.n	b7e96 <_strtod_l+0x30e>
   b7ede:	4990      	ldr	r1, [pc, #576]	; (b8120 <_strtod_l+0x598>)
   b7ee0:	a817      	add	r0, sp, #92	; 0x5c
   b7ee2:	f001 f86d 	bl	b8fc0 <__match>
   b7ee6:	2800      	cmp	r0, #0
   b7ee8:	f43f aeb0 	beq.w	b7c4c <_strtod_l+0xc4>
   b7eec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7eee:	498d      	ldr	r1, [pc, #564]	; (b8124 <_strtod_l+0x59c>)
   b7ef0:	3b01      	subs	r3, #1
   b7ef2:	a817      	add	r0, sp, #92	; 0x5c
   b7ef4:	9317      	str	r3, [sp, #92]	; 0x5c
   b7ef6:	f001 f863 	bl	b8fc0 <__match>
   b7efa:	b910      	cbnz	r0, b7f02 <_strtod_l+0x37a>
   b7efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7efe:	3301      	adds	r3, #1
   b7f00:	9317      	str	r3, [sp, #92]	; 0x5c
   b7f02:	f8df b230 	ldr.w	fp, [pc, #560]	; b8134 <_strtod_l+0x5ac>
   b7f06:	f04f 0a00 	mov.w	sl, #0
   b7f0a:	e681      	b.n	b7c10 <_strtod_l+0x88>
   b7f0c:	4886      	ldr	r0, [pc, #536]	; (b8128 <_strtod_l+0x5a0>)
   b7f0e:	f001 fdef 	bl	b9af0 <nan>
   b7f12:	ec5b ab10 	vmov	sl, fp, d0
   b7f16:	e67b      	b.n	b7c10 <_strtod_l+0x88>
   b7f18:	9b05      	ldr	r3, [sp, #20]
   b7f1a:	9807      	ldr	r0, [sp, #28]
   b7f1c:	1af3      	subs	r3, r6, r3
   b7f1e:	2f00      	cmp	r7, #0
   b7f20:	bf08      	it	eq
   b7f22:	462f      	moveq	r7, r5
   b7f24:	2d10      	cmp	r5, #16
   b7f26:	9306      	str	r3, [sp, #24]
   b7f28:	46a8      	mov	r8, r5
   b7f2a:	bfa8      	it	ge
   b7f2c:	f04f 0810 	movge.w	r8, #16
   b7f30:	f7ff f9fa 	bl	b7328 <__aeabi_ui2d>
   b7f34:	2d09      	cmp	r5, #9
   b7f36:	4682      	mov	sl, r0
   b7f38:	468b      	mov	fp, r1
   b7f3a:	dd13      	ble.n	b7f64 <_strtod_l+0x3dc>
   b7f3c:	4b7b      	ldr	r3, [pc, #492]	; (b812c <_strtod_l+0x5a4>)
   b7f3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b7f42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b7f46:	f7ff fa69 	bl	b741c <__aeabi_dmul>
   b7f4a:	4682      	mov	sl, r0
   b7f4c:	4648      	mov	r0, r9
   b7f4e:	468b      	mov	fp, r1
   b7f50:	f7ff f9ea 	bl	b7328 <__aeabi_ui2d>
   b7f54:	4602      	mov	r2, r0
   b7f56:	460b      	mov	r3, r1
   b7f58:	4650      	mov	r0, sl
   b7f5a:	4659      	mov	r1, fp
   b7f5c:	f7ff f8a8 	bl	b70b0 <__adddf3>
   b7f60:	4682      	mov	sl, r0
   b7f62:	468b      	mov	fp, r1
   b7f64:	2d0f      	cmp	r5, #15
   b7f66:	dc38      	bgt.n	b7fda <_strtod_l+0x452>
   b7f68:	9b06      	ldr	r3, [sp, #24]
   b7f6a:	2b00      	cmp	r3, #0
   b7f6c:	f43f ae50 	beq.w	b7c10 <_strtod_l+0x88>
   b7f70:	dd24      	ble.n	b7fbc <_strtod_l+0x434>
   b7f72:	2b16      	cmp	r3, #22
   b7f74:	dc0b      	bgt.n	b7f8e <_strtod_l+0x406>
   b7f76:	496d      	ldr	r1, [pc, #436]	; (b812c <_strtod_l+0x5a4>)
   b7f78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b7f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7f80:	4652      	mov	r2, sl
   b7f82:	465b      	mov	r3, fp
   b7f84:	f7ff fa4a 	bl	b741c <__aeabi_dmul>
   b7f88:	4682      	mov	sl, r0
   b7f8a:	468b      	mov	fp, r1
   b7f8c:	e640      	b.n	b7c10 <_strtod_l+0x88>
   b7f8e:	9a06      	ldr	r2, [sp, #24]
   b7f90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b7f94:	4293      	cmp	r3, r2
   b7f96:	db20      	blt.n	b7fda <_strtod_l+0x452>
   b7f98:	4c64      	ldr	r4, [pc, #400]	; (b812c <_strtod_l+0x5a4>)
   b7f9a:	f1c5 050f 	rsb	r5, r5, #15
   b7f9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b7fa2:	4652      	mov	r2, sl
   b7fa4:	465b      	mov	r3, fp
   b7fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7faa:	f7ff fa37 	bl	b741c <__aeabi_dmul>
   b7fae:	9b06      	ldr	r3, [sp, #24]
   b7fb0:	1b5d      	subs	r5, r3, r5
   b7fb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b7fb6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b7fba:	e7e3      	b.n	b7f84 <_strtod_l+0x3fc>
   b7fbc:	9b06      	ldr	r3, [sp, #24]
   b7fbe:	3316      	adds	r3, #22
   b7fc0:	db0b      	blt.n	b7fda <_strtod_l+0x452>
   b7fc2:	9b05      	ldr	r3, [sp, #20]
   b7fc4:	1b9e      	subs	r6, r3, r6
   b7fc6:	4b59      	ldr	r3, [pc, #356]	; (b812c <_strtod_l+0x5a4>)
   b7fc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b7fcc:	e9d6 2300 	ldrd	r2, r3, [r6]
   b7fd0:	4650      	mov	r0, sl
   b7fd2:	4659      	mov	r1, fp
   b7fd4:	f7ff fb4c 	bl	b7670 <__aeabi_ddiv>
   b7fd8:	e7d6      	b.n	b7f88 <_strtod_l+0x400>
   b7fda:	9b06      	ldr	r3, [sp, #24]
   b7fdc:	eba5 0808 	sub.w	r8, r5, r8
   b7fe0:	4498      	add	r8, r3
   b7fe2:	f1b8 0f00 	cmp.w	r8, #0
   b7fe6:	dd74      	ble.n	b80d2 <_strtod_l+0x54a>
   b7fe8:	f018 030f 	ands.w	r3, r8, #15
   b7fec:	d00a      	beq.n	b8004 <_strtod_l+0x47c>
   b7fee:	494f      	ldr	r1, [pc, #316]	; (b812c <_strtod_l+0x5a4>)
   b7ff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b7ff4:	4652      	mov	r2, sl
   b7ff6:	465b      	mov	r3, fp
   b7ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7ffc:	f7ff fa0e 	bl	b741c <__aeabi_dmul>
   b8000:	4682      	mov	sl, r0
   b8002:	468b      	mov	fp, r1
   b8004:	f038 080f 	bics.w	r8, r8, #15
   b8008:	d04f      	beq.n	b80aa <_strtod_l+0x522>
   b800a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b800e:	dd22      	ble.n	b8056 <_strtod_l+0x4ce>
   b8010:	2500      	movs	r5, #0
   b8012:	462e      	mov	r6, r5
   b8014:	9507      	str	r5, [sp, #28]
   b8016:	9505      	str	r5, [sp, #20]
   b8018:	2322      	movs	r3, #34	; 0x22
   b801a:	f8df b118 	ldr.w	fp, [pc, #280]	; b8134 <_strtod_l+0x5ac>
   b801e:	6023      	str	r3, [r4, #0]
   b8020:	f04f 0a00 	mov.w	sl, #0
   b8024:	9b07      	ldr	r3, [sp, #28]
   b8026:	2b00      	cmp	r3, #0
   b8028:	f43f adf2 	beq.w	b7c10 <_strtod_l+0x88>
   b802c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b802e:	4620      	mov	r0, r4
   b8030:	f001 f8cc 	bl	b91cc <_Bfree>
   b8034:	9905      	ldr	r1, [sp, #20]
   b8036:	4620      	mov	r0, r4
   b8038:	f001 f8c8 	bl	b91cc <_Bfree>
   b803c:	4631      	mov	r1, r6
   b803e:	4620      	mov	r0, r4
   b8040:	f001 f8c4 	bl	b91cc <_Bfree>
   b8044:	9907      	ldr	r1, [sp, #28]
   b8046:	4620      	mov	r0, r4
   b8048:	f001 f8c0 	bl	b91cc <_Bfree>
   b804c:	4629      	mov	r1, r5
   b804e:	4620      	mov	r0, r4
   b8050:	f001 f8bc 	bl	b91cc <_Bfree>
   b8054:	e5dc      	b.n	b7c10 <_strtod_l+0x88>
   b8056:	4b36      	ldr	r3, [pc, #216]	; (b8130 <_strtod_l+0x5a8>)
   b8058:	9304      	str	r3, [sp, #16]
   b805a:	2300      	movs	r3, #0
   b805c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8060:	4650      	mov	r0, sl
   b8062:	4659      	mov	r1, fp
   b8064:	4699      	mov	r9, r3
   b8066:	f1b8 0f01 	cmp.w	r8, #1
   b806a:	dc21      	bgt.n	b80b0 <_strtod_l+0x528>
   b806c:	b10b      	cbz	r3, b8072 <_strtod_l+0x4ea>
   b806e:	4682      	mov	sl, r0
   b8070:	468b      	mov	fp, r1
   b8072:	4b2f      	ldr	r3, [pc, #188]	; (b8130 <_strtod_l+0x5a8>)
   b8074:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8078:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b807c:	4652      	mov	r2, sl
   b807e:	465b      	mov	r3, fp
   b8080:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8084:	f7ff f9ca 	bl	b741c <__aeabi_dmul>
   b8088:	4b2a      	ldr	r3, [pc, #168]	; (b8134 <_strtod_l+0x5ac>)
   b808a:	460a      	mov	r2, r1
   b808c:	400b      	ands	r3, r1
   b808e:	492a      	ldr	r1, [pc, #168]	; (b8138 <_strtod_l+0x5b0>)
   b8090:	428b      	cmp	r3, r1
   b8092:	4682      	mov	sl, r0
   b8094:	d8bc      	bhi.n	b8010 <_strtod_l+0x488>
   b8096:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b809a:	428b      	cmp	r3, r1
   b809c:	bf86      	itte	hi
   b809e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b813c <_strtod_l+0x5b4>
   b80a2:	f04f 3aff 	movhi.w	sl, #4294967295
   b80a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b80aa:	2300      	movs	r3, #0
   b80ac:	9304      	str	r3, [sp, #16]
   b80ae:	e084      	b.n	b81ba <_strtod_l+0x632>
   b80b0:	f018 0f01 	tst.w	r8, #1
   b80b4:	d005      	beq.n	b80c2 <_strtod_l+0x53a>
   b80b6:	9b04      	ldr	r3, [sp, #16]
   b80b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b80bc:	f7ff f9ae 	bl	b741c <__aeabi_dmul>
   b80c0:	2301      	movs	r3, #1
   b80c2:	9a04      	ldr	r2, [sp, #16]
   b80c4:	3208      	adds	r2, #8
   b80c6:	f109 0901 	add.w	r9, r9, #1
   b80ca:	ea4f 0868 	mov.w	r8, r8, asr #1
   b80ce:	9204      	str	r2, [sp, #16]
   b80d0:	e7c9      	b.n	b8066 <_strtod_l+0x4de>
   b80d2:	d0ea      	beq.n	b80aa <_strtod_l+0x522>
   b80d4:	f1c8 0800 	rsb	r8, r8, #0
   b80d8:	f018 020f 	ands.w	r2, r8, #15
   b80dc:	d00a      	beq.n	b80f4 <_strtod_l+0x56c>
   b80de:	4b13      	ldr	r3, [pc, #76]	; (b812c <_strtod_l+0x5a4>)
   b80e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b80e4:	4650      	mov	r0, sl
   b80e6:	4659      	mov	r1, fp
   b80e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b80ec:	f7ff fac0 	bl	b7670 <__aeabi_ddiv>
   b80f0:	4682      	mov	sl, r0
   b80f2:	468b      	mov	fp, r1
   b80f4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b80f8:	d0d7      	beq.n	b80aa <_strtod_l+0x522>
   b80fa:	f1b8 0f1f 	cmp.w	r8, #31
   b80fe:	dd1f      	ble.n	b8140 <_strtod_l+0x5b8>
   b8100:	2500      	movs	r5, #0
   b8102:	462e      	mov	r6, r5
   b8104:	9507      	str	r5, [sp, #28]
   b8106:	9505      	str	r5, [sp, #20]
   b8108:	2322      	movs	r3, #34	; 0x22
   b810a:	f04f 0a00 	mov.w	sl, #0
   b810e:	f04f 0b00 	mov.w	fp, #0
   b8112:	6023      	str	r3, [r4, #0]
   b8114:	e786      	b.n	b8024 <_strtod_l+0x49c>
   b8116:	bf00      	nop
   b8118:	000ba0f6 	.word	0x000ba0f6
   b811c:	000ba110 	.word	0x000ba110
   b8120:	000ba0ed 	.word	0x000ba0ed
   b8124:	000ba0f0 	.word	0x000ba0f0
   b8128:	000b9c18 	.word	0x000b9c18
   b812c:	000ba428 	.word	0x000ba428
   b8130:	000ba400 	.word	0x000ba400
   b8134:	7ff00000 	.word	0x7ff00000
   b8138:	7ca00000 	.word	0x7ca00000
   b813c:	7fefffff 	.word	0x7fefffff
   b8140:	f018 0310 	ands.w	r3, r8, #16
   b8144:	bf18      	it	ne
   b8146:	236a      	movne	r3, #106	; 0x6a
   b8148:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b84f8 <_strtod_l+0x970>
   b814c:	9304      	str	r3, [sp, #16]
   b814e:	4650      	mov	r0, sl
   b8150:	4659      	mov	r1, fp
   b8152:	2300      	movs	r3, #0
   b8154:	f018 0f01 	tst.w	r8, #1
   b8158:	d004      	beq.n	b8164 <_strtod_l+0x5dc>
   b815a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b815e:	f7ff f95d 	bl	b741c <__aeabi_dmul>
   b8162:	2301      	movs	r3, #1
   b8164:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8168:	f109 0908 	add.w	r9, r9, #8
   b816c:	d1f2      	bne.n	b8154 <_strtod_l+0x5cc>
   b816e:	b10b      	cbz	r3, b8174 <_strtod_l+0x5ec>
   b8170:	4682      	mov	sl, r0
   b8172:	468b      	mov	fp, r1
   b8174:	9b04      	ldr	r3, [sp, #16]
   b8176:	b1c3      	cbz	r3, b81aa <_strtod_l+0x622>
   b8178:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b817c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8180:	2b00      	cmp	r3, #0
   b8182:	4659      	mov	r1, fp
   b8184:	dd11      	ble.n	b81aa <_strtod_l+0x622>
   b8186:	2b1f      	cmp	r3, #31
   b8188:	f340 8124 	ble.w	b83d4 <_strtod_l+0x84c>
   b818c:	2b34      	cmp	r3, #52	; 0x34
   b818e:	bfde      	ittt	le
   b8190:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8194:	f04f 33ff 	movle.w	r3, #4294967295
   b8198:	fa03 f202 	lslle.w	r2, r3, r2
   b819c:	f04f 0a00 	mov.w	sl, #0
   b81a0:	bfcc      	ite	gt
   b81a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b81a6:	ea02 0b01 	andle.w	fp, r2, r1
   b81aa:	2200      	movs	r2, #0
   b81ac:	2300      	movs	r3, #0
   b81ae:	4650      	mov	r0, sl
   b81b0:	4659      	mov	r1, fp
   b81b2:	f7ff fb9b 	bl	b78ec <__aeabi_dcmpeq>
   b81b6:	2800      	cmp	r0, #0
   b81b8:	d1a2      	bne.n	b8100 <_strtod_l+0x578>
   b81ba:	9b07      	ldr	r3, [sp, #28]
   b81bc:	9300      	str	r3, [sp, #0]
   b81be:	9908      	ldr	r1, [sp, #32]
   b81c0:	462b      	mov	r3, r5
   b81c2:	463a      	mov	r2, r7
   b81c4:	4620      	mov	r0, r4
   b81c6:	f001 f869 	bl	b929c <__s2b>
   b81ca:	9007      	str	r0, [sp, #28]
   b81cc:	2800      	cmp	r0, #0
   b81ce:	f43f af1f 	beq.w	b8010 <_strtod_l+0x488>
   b81d2:	9b05      	ldr	r3, [sp, #20]
   b81d4:	1b9e      	subs	r6, r3, r6
   b81d6:	9b06      	ldr	r3, [sp, #24]
   b81d8:	2b00      	cmp	r3, #0
   b81da:	bfb4      	ite	lt
   b81dc:	4633      	movlt	r3, r6
   b81de:	2300      	movge	r3, #0
   b81e0:	930c      	str	r3, [sp, #48]	; 0x30
   b81e2:	9b06      	ldr	r3, [sp, #24]
   b81e4:	2500      	movs	r5, #0
   b81e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b81ea:	9312      	str	r3, [sp, #72]	; 0x48
   b81ec:	462e      	mov	r6, r5
   b81ee:	9b07      	ldr	r3, [sp, #28]
   b81f0:	4620      	mov	r0, r4
   b81f2:	6859      	ldr	r1, [r3, #4]
   b81f4:	f000 ffaa 	bl	b914c <_Balloc>
   b81f8:	9005      	str	r0, [sp, #20]
   b81fa:	2800      	cmp	r0, #0
   b81fc:	f43f af0c 	beq.w	b8018 <_strtod_l+0x490>
   b8200:	9b07      	ldr	r3, [sp, #28]
   b8202:	691a      	ldr	r2, [r3, #16]
   b8204:	3202      	adds	r2, #2
   b8206:	f103 010c 	add.w	r1, r3, #12
   b820a:	0092      	lsls	r2, r2, #2
   b820c:	300c      	adds	r0, #12
   b820e:	f7ff fbfe 	bl	b7a0e <memcpy>
   b8212:	ec4b ab10 	vmov	d0, sl, fp
   b8216:	aa1a      	add	r2, sp, #104	; 0x68
   b8218:	a919      	add	r1, sp, #100	; 0x64
   b821a:	4620      	mov	r0, r4
   b821c:	f001 fb84 	bl	b9928 <__d2b>
   b8220:	ec4b ab18 	vmov	d8, sl, fp
   b8224:	9018      	str	r0, [sp, #96]	; 0x60
   b8226:	2800      	cmp	r0, #0
   b8228:	f43f aef6 	beq.w	b8018 <_strtod_l+0x490>
   b822c:	2101      	movs	r1, #1
   b822e:	4620      	mov	r0, r4
   b8230:	f001 f8ce 	bl	b93d0 <__i2b>
   b8234:	4606      	mov	r6, r0
   b8236:	2800      	cmp	r0, #0
   b8238:	f43f aeee 	beq.w	b8018 <_strtod_l+0x490>
   b823c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b823e:	9904      	ldr	r1, [sp, #16]
   b8240:	2b00      	cmp	r3, #0
   b8242:	bfab      	itete	ge
   b8244:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8246:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8248:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b824a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b824e:	bfac      	ite	ge
   b8250:	eb03 0902 	addge.w	r9, r3, r2
   b8254:	1ad7      	sublt	r7, r2, r3
   b8256:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8258:	eba3 0801 	sub.w	r8, r3, r1
   b825c:	4490      	add	r8, r2
   b825e:	4ba1      	ldr	r3, [pc, #644]	; (b84e4 <_strtod_l+0x95c>)
   b8260:	f108 38ff 	add.w	r8, r8, #4294967295
   b8264:	4598      	cmp	r8, r3
   b8266:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b826a:	f280 80c7 	bge.w	b83fc <_strtod_l+0x874>
   b826e:	eba3 0308 	sub.w	r3, r3, r8
   b8272:	2b1f      	cmp	r3, #31
   b8274:	eba2 0203 	sub.w	r2, r2, r3
   b8278:	f04f 0101 	mov.w	r1, #1
   b827c:	f300 80b1 	bgt.w	b83e2 <_strtod_l+0x85a>
   b8280:	fa01 f303 	lsl.w	r3, r1, r3
   b8284:	930d      	str	r3, [sp, #52]	; 0x34
   b8286:	2300      	movs	r3, #0
   b8288:	9308      	str	r3, [sp, #32]
   b828a:	eb09 0802 	add.w	r8, r9, r2
   b828e:	9b04      	ldr	r3, [sp, #16]
   b8290:	45c1      	cmp	r9, r8
   b8292:	4417      	add	r7, r2
   b8294:	441f      	add	r7, r3
   b8296:	464b      	mov	r3, r9
   b8298:	bfa8      	it	ge
   b829a:	4643      	movge	r3, r8
   b829c:	42bb      	cmp	r3, r7
   b829e:	bfa8      	it	ge
   b82a0:	463b      	movge	r3, r7
   b82a2:	2b00      	cmp	r3, #0
   b82a4:	bfc2      	ittt	gt
   b82a6:	eba8 0803 	subgt.w	r8, r8, r3
   b82aa:	1aff      	subgt	r7, r7, r3
   b82ac:	eba9 0903 	subgt.w	r9, r9, r3
   b82b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b82b2:	2b00      	cmp	r3, #0
   b82b4:	dd17      	ble.n	b82e6 <_strtod_l+0x75e>
   b82b6:	4631      	mov	r1, r6
   b82b8:	461a      	mov	r2, r3
   b82ba:	4620      	mov	r0, r4
   b82bc:	f001 f948 	bl	b9550 <__pow5mult>
   b82c0:	4606      	mov	r6, r0
   b82c2:	2800      	cmp	r0, #0
   b82c4:	f43f aea8 	beq.w	b8018 <_strtod_l+0x490>
   b82c8:	4601      	mov	r1, r0
   b82ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b82cc:	4620      	mov	r0, r4
   b82ce:	f001 f895 	bl	b93fc <__multiply>
   b82d2:	900b      	str	r0, [sp, #44]	; 0x2c
   b82d4:	2800      	cmp	r0, #0
   b82d6:	f43f ae9f 	beq.w	b8018 <_strtod_l+0x490>
   b82da:	9918      	ldr	r1, [sp, #96]	; 0x60
   b82dc:	4620      	mov	r0, r4
   b82de:	f000 ff75 	bl	b91cc <_Bfree>
   b82e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b82e4:	9318      	str	r3, [sp, #96]	; 0x60
   b82e6:	f1b8 0f00 	cmp.w	r8, #0
   b82ea:	f300 808c 	bgt.w	b8406 <_strtod_l+0x87e>
   b82ee:	9b06      	ldr	r3, [sp, #24]
   b82f0:	2b00      	cmp	r3, #0
   b82f2:	dd08      	ble.n	b8306 <_strtod_l+0x77e>
   b82f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b82f6:	9905      	ldr	r1, [sp, #20]
   b82f8:	4620      	mov	r0, r4
   b82fa:	f001 f929 	bl	b9550 <__pow5mult>
   b82fe:	9005      	str	r0, [sp, #20]
   b8300:	2800      	cmp	r0, #0
   b8302:	f43f ae89 	beq.w	b8018 <_strtod_l+0x490>
   b8306:	2f00      	cmp	r7, #0
   b8308:	dd08      	ble.n	b831c <_strtod_l+0x794>
   b830a:	9905      	ldr	r1, [sp, #20]
   b830c:	463a      	mov	r2, r7
   b830e:	4620      	mov	r0, r4
   b8310:	f001 f978 	bl	b9604 <__lshift>
   b8314:	9005      	str	r0, [sp, #20]
   b8316:	2800      	cmp	r0, #0
   b8318:	f43f ae7e 	beq.w	b8018 <_strtod_l+0x490>
   b831c:	f1b9 0f00 	cmp.w	r9, #0
   b8320:	dd08      	ble.n	b8334 <_strtod_l+0x7ac>
   b8322:	4631      	mov	r1, r6
   b8324:	464a      	mov	r2, r9
   b8326:	4620      	mov	r0, r4
   b8328:	f001 f96c 	bl	b9604 <__lshift>
   b832c:	4606      	mov	r6, r0
   b832e:	2800      	cmp	r0, #0
   b8330:	f43f ae72 	beq.w	b8018 <_strtod_l+0x490>
   b8334:	9a05      	ldr	r2, [sp, #20]
   b8336:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8338:	4620      	mov	r0, r4
   b833a:	f001 f9ef 	bl	b971c <__mdiff>
   b833e:	4605      	mov	r5, r0
   b8340:	2800      	cmp	r0, #0
   b8342:	f43f ae69 	beq.w	b8018 <_strtod_l+0x490>
   b8346:	68c3      	ldr	r3, [r0, #12]
   b8348:	930b      	str	r3, [sp, #44]	; 0x2c
   b834a:	2300      	movs	r3, #0
   b834c:	60c3      	str	r3, [r0, #12]
   b834e:	4631      	mov	r1, r6
   b8350:	f001 f9c8 	bl	b96e4 <__mcmp>
   b8354:	2800      	cmp	r0, #0
   b8356:	da60      	bge.n	b841a <_strtod_l+0x892>
   b8358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b835a:	ea53 030a 	orrs.w	r3, r3, sl
   b835e:	f040 8082 	bne.w	b8466 <_strtod_l+0x8de>
   b8362:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8366:	2b00      	cmp	r3, #0
   b8368:	d17d      	bne.n	b8466 <_strtod_l+0x8de>
   b836a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b836e:	0d1b      	lsrs	r3, r3, #20
   b8370:	051b      	lsls	r3, r3, #20
   b8372:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8376:	d976      	bls.n	b8466 <_strtod_l+0x8de>
   b8378:	696b      	ldr	r3, [r5, #20]
   b837a:	b913      	cbnz	r3, b8382 <_strtod_l+0x7fa>
   b837c:	692b      	ldr	r3, [r5, #16]
   b837e:	2b01      	cmp	r3, #1
   b8380:	dd71      	ble.n	b8466 <_strtod_l+0x8de>
   b8382:	4629      	mov	r1, r5
   b8384:	2201      	movs	r2, #1
   b8386:	4620      	mov	r0, r4
   b8388:	f001 f93c 	bl	b9604 <__lshift>
   b838c:	4631      	mov	r1, r6
   b838e:	4605      	mov	r5, r0
   b8390:	f001 f9a8 	bl	b96e4 <__mcmp>
   b8394:	2800      	cmp	r0, #0
   b8396:	dd66      	ble.n	b8466 <_strtod_l+0x8de>
   b8398:	9904      	ldr	r1, [sp, #16]
   b839a:	4a53      	ldr	r2, [pc, #332]	; (b84e8 <_strtod_l+0x960>)
   b839c:	465b      	mov	r3, fp
   b839e:	2900      	cmp	r1, #0
   b83a0:	f000 8081 	beq.w	b84a6 <_strtod_l+0x91e>
   b83a4:	ea02 010b 	and.w	r1, r2, fp
   b83a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b83ac:	dc7b      	bgt.n	b84a6 <_strtod_l+0x91e>
   b83ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b83b2:	f77f aea9 	ble.w	b8108 <_strtod_l+0x580>
   b83b6:	4b4d      	ldr	r3, [pc, #308]	; (b84ec <_strtod_l+0x964>)
   b83b8:	4650      	mov	r0, sl
   b83ba:	4659      	mov	r1, fp
   b83bc:	2200      	movs	r2, #0
   b83be:	f7ff f82d 	bl	b741c <__aeabi_dmul>
   b83c2:	460b      	mov	r3, r1
   b83c4:	4303      	orrs	r3, r0
   b83c6:	bf08      	it	eq
   b83c8:	2322      	moveq	r3, #34	; 0x22
   b83ca:	4682      	mov	sl, r0
   b83cc:	468b      	mov	fp, r1
   b83ce:	bf08      	it	eq
   b83d0:	6023      	streq	r3, [r4, #0]
   b83d2:	e62b      	b.n	b802c <_strtod_l+0x4a4>
   b83d4:	f04f 32ff 	mov.w	r2, #4294967295
   b83d8:	fa02 f303 	lsl.w	r3, r2, r3
   b83dc:	ea03 0a0a 	and.w	sl, r3, sl
   b83e0:	e6e3      	b.n	b81aa <_strtod_l+0x622>
   b83e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b83e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b83ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b83ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b83f2:	fa01 f308 	lsl.w	r3, r1, r8
   b83f6:	9308      	str	r3, [sp, #32]
   b83f8:	910d      	str	r1, [sp, #52]	; 0x34
   b83fa:	e746      	b.n	b828a <_strtod_l+0x702>
   b83fc:	2300      	movs	r3, #0
   b83fe:	9308      	str	r3, [sp, #32]
   b8400:	2301      	movs	r3, #1
   b8402:	930d      	str	r3, [sp, #52]	; 0x34
   b8404:	e741      	b.n	b828a <_strtod_l+0x702>
   b8406:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8408:	4642      	mov	r2, r8
   b840a:	4620      	mov	r0, r4
   b840c:	f001 f8fa 	bl	b9604 <__lshift>
   b8410:	9018      	str	r0, [sp, #96]	; 0x60
   b8412:	2800      	cmp	r0, #0
   b8414:	f47f af6b 	bne.w	b82ee <_strtod_l+0x766>
   b8418:	e5fe      	b.n	b8018 <_strtod_l+0x490>
   b841a:	465f      	mov	r7, fp
   b841c:	d16e      	bne.n	b84fc <_strtod_l+0x974>
   b841e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8420:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8424:	b342      	cbz	r2, b8478 <_strtod_l+0x8f0>
   b8426:	4a32      	ldr	r2, [pc, #200]	; (b84f0 <_strtod_l+0x968>)
   b8428:	4293      	cmp	r3, r2
   b842a:	d128      	bne.n	b847e <_strtod_l+0x8f6>
   b842c:	9b04      	ldr	r3, [sp, #16]
   b842e:	4651      	mov	r1, sl
   b8430:	b1eb      	cbz	r3, b846e <_strtod_l+0x8e6>
   b8432:	4b2d      	ldr	r3, [pc, #180]	; (b84e8 <_strtod_l+0x960>)
   b8434:	403b      	ands	r3, r7
   b8436:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b843a:	f04f 32ff 	mov.w	r2, #4294967295
   b843e:	d819      	bhi.n	b8474 <_strtod_l+0x8ec>
   b8440:	0d1b      	lsrs	r3, r3, #20
   b8442:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8446:	fa02 f303 	lsl.w	r3, r2, r3
   b844a:	4299      	cmp	r1, r3
   b844c:	d117      	bne.n	b847e <_strtod_l+0x8f6>
   b844e:	4b29      	ldr	r3, [pc, #164]	; (b84f4 <_strtod_l+0x96c>)
   b8450:	429f      	cmp	r7, r3
   b8452:	d102      	bne.n	b845a <_strtod_l+0x8d2>
   b8454:	3101      	adds	r1, #1
   b8456:	f43f addf 	beq.w	b8018 <_strtod_l+0x490>
   b845a:	4b23      	ldr	r3, [pc, #140]	; (b84e8 <_strtod_l+0x960>)
   b845c:	403b      	ands	r3, r7
   b845e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8462:	f04f 0a00 	mov.w	sl, #0
   b8466:	9b04      	ldr	r3, [sp, #16]
   b8468:	2b00      	cmp	r3, #0
   b846a:	d1a4      	bne.n	b83b6 <_strtod_l+0x82e>
   b846c:	e5de      	b.n	b802c <_strtod_l+0x4a4>
   b846e:	f04f 33ff 	mov.w	r3, #4294967295
   b8472:	e7ea      	b.n	b844a <_strtod_l+0x8c2>
   b8474:	4613      	mov	r3, r2
   b8476:	e7e8      	b.n	b844a <_strtod_l+0x8c2>
   b8478:	ea53 030a 	orrs.w	r3, r3, sl
   b847c:	d08c      	beq.n	b8398 <_strtod_l+0x810>
   b847e:	9b08      	ldr	r3, [sp, #32]
   b8480:	b1db      	cbz	r3, b84ba <_strtod_l+0x932>
   b8482:	423b      	tst	r3, r7
   b8484:	d0ef      	beq.n	b8466 <_strtod_l+0x8de>
   b8486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8488:	9a04      	ldr	r2, [sp, #16]
   b848a:	4650      	mov	r0, sl
   b848c:	4659      	mov	r1, fp
   b848e:	b1c3      	cbz	r3, b84c2 <_strtod_l+0x93a>
   b8490:	f7ff fb5d 	bl	b7b4e <sulp>
   b8494:	4602      	mov	r2, r0
   b8496:	460b      	mov	r3, r1
   b8498:	ec51 0b18 	vmov	r0, r1, d8
   b849c:	f7fe fe08 	bl	b70b0 <__adddf3>
   b84a0:	4682      	mov	sl, r0
   b84a2:	468b      	mov	fp, r1
   b84a4:	e7df      	b.n	b8466 <_strtod_l+0x8de>
   b84a6:	4013      	ands	r3, r2
   b84a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b84ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b84b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b84b4:	f04f 3aff 	mov.w	sl, #4294967295
   b84b8:	e7d5      	b.n	b8466 <_strtod_l+0x8de>
   b84ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b84bc:	ea13 0f0a 	tst.w	r3, sl
   b84c0:	e7e0      	b.n	b8484 <_strtod_l+0x8fc>
   b84c2:	f7ff fb44 	bl	b7b4e <sulp>
   b84c6:	4602      	mov	r2, r0
   b84c8:	460b      	mov	r3, r1
   b84ca:	ec51 0b18 	vmov	r0, r1, d8
   b84ce:	f7fe fded 	bl	b70ac <__aeabi_dsub>
   b84d2:	2200      	movs	r2, #0
   b84d4:	2300      	movs	r3, #0
   b84d6:	4682      	mov	sl, r0
   b84d8:	468b      	mov	fp, r1
   b84da:	f7ff fa07 	bl	b78ec <__aeabi_dcmpeq>
   b84de:	2800      	cmp	r0, #0
   b84e0:	d0c1      	beq.n	b8466 <_strtod_l+0x8de>
   b84e2:	e611      	b.n	b8108 <_strtod_l+0x580>
   b84e4:	fffffc02 	.word	0xfffffc02
   b84e8:	7ff00000 	.word	0x7ff00000
   b84ec:	39500000 	.word	0x39500000
   b84f0:	000fffff 	.word	0x000fffff
   b84f4:	7fefffff 	.word	0x7fefffff
   b84f8:	000ba128 	.word	0x000ba128
   b84fc:	4631      	mov	r1, r6
   b84fe:	4628      	mov	r0, r5
   b8500:	f001 fa6e 	bl	b99e0 <__ratio>
   b8504:	ec59 8b10 	vmov	r8, r9, d0
   b8508:	ee10 0a10 	vmov	r0, s0
   b850c:	2200      	movs	r2, #0
   b850e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8512:	4649      	mov	r1, r9
   b8514:	f7ff f9fe 	bl	b7914 <__aeabi_dcmple>
   b8518:	2800      	cmp	r0, #0
   b851a:	d07a      	beq.n	b8612 <_strtod_l+0xa8a>
   b851c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b851e:	2b00      	cmp	r3, #0
   b8520:	d04a      	beq.n	b85b8 <_strtod_l+0xa30>
   b8522:	4b95      	ldr	r3, [pc, #596]	; (b8778 <_strtod_l+0xbf0>)
   b8524:	2200      	movs	r2, #0
   b8526:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b852a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b8778 <_strtod_l+0xbf0>
   b852e:	f04f 0800 	mov.w	r8, #0
   b8532:	4b92      	ldr	r3, [pc, #584]	; (b877c <_strtod_l+0xbf4>)
   b8534:	403b      	ands	r3, r7
   b8536:	930d      	str	r3, [sp, #52]	; 0x34
   b8538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b853a:	4b91      	ldr	r3, [pc, #580]	; (b8780 <_strtod_l+0xbf8>)
   b853c:	429a      	cmp	r2, r3
   b853e:	f040 80b0 	bne.w	b86a2 <_strtod_l+0xb1a>
   b8542:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8546:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b854a:	ec4b ab10 	vmov	d0, sl, fp
   b854e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8552:	f001 f96d 	bl	b9830 <__ulp>
   b8556:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b855a:	ec53 2b10 	vmov	r2, r3, d0
   b855e:	f7fe ff5d 	bl	b741c <__aeabi_dmul>
   b8562:	4652      	mov	r2, sl
   b8564:	465b      	mov	r3, fp
   b8566:	f7fe fda3 	bl	b70b0 <__adddf3>
   b856a:	460b      	mov	r3, r1
   b856c:	4983      	ldr	r1, [pc, #524]	; (b877c <_strtod_l+0xbf4>)
   b856e:	4a85      	ldr	r2, [pc, #532]	; (b8784 <_strtod_l+0xbfc>)
   b8570:	4019      	ands	r1, r3
   b8572:	4291      	cmp	r1, r2
   b8574:	4682      	mov	sl, r0
   b8576:	d960      	bls.n	b863a <_strtod_l+0xab2>
   b8578:	ee18 3a90 	vmov	r3, s17
   b857c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8580:	4293      	cmp	r3, r2
   b8582:	d104      	bne.n	b858e <_strtod_l+0xa06>
   b8584:	ee18 3a10 	vmov	r3, s16
   b8588:	3301      	adds	r3, #1
   b858a:	f43f ad45 	beq.w	b8018 <_strtod_l+0x490>
   b858e:	f8df b200 	ldr.w	fp, [pc, #512]	; b8790 <_strtod_l+0xc08>
   b8592:	f04f 3aff 	mov.w	sl, #4294967295
   b8596:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8598:	4620      	mov	r0, r4
   b859a:	f000 fe17 	bl	b91cc <_Bfree>
   b859e:	9905      	ldr	r1, [sp, #20]
   b85a0:	4620      	mov	r0, r4
   b85a2:	f000 fe13 	bl	b91cc <_Bfree>
   b85a6:	4631      	mov	r1, r6
   b85a8:	4620      	mov	r0, r4
   b85aa:	f000 fe0f 	bl	b91cc <_Bfree>
   b85ae:	4629      	mov	r1, r5
   b85b0:	4620      	mov	r0, r4
   b85b2:	f000 fe0b 	bl	b91cc <_Bfree>
   b85b6:	e61a      	b.n	b81ee <_strtod_l+0x666>
   b85b8:	f1ba 0f00 	cmp.w	sl, #0
   b85bc:	d11b      	bne.n	b85f6 <_strtod_l+0xa6e>
   b85be:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b85c2:	b9f3      	cbnz	r3, b8602 <_strtod_l+0xa7a>
   b85c4:	4b6c      	ldr	r3, [pc, #432]	; (b8778 <_strtod_l+0xbf0>)
   b85c6:	2200      	movs	r2, #0
   b85c8:	4640      	mov	r0, r8
   b85ca:	4649      	mov	r1, r9
   b85cc:	f7ff f998 	bl	b7900 <__aeabi_dcmplt>
   b85d0:	b9d0      	cbnz	r0, b8608 <_strtod_l+0xa80>
   b85d2:	4640      	mov	r0, r8
   b85d4:	4649      	mov	r1, r9
   b85d6:	4b6c      	ldr	r3, [pc, #432]	; (b8788 <_strtod_l+0xc00>)
   b85d8:	2200      	movs	r2, #0
   b85da:	f7fe ff1f 	bl	b741c <__aeabi_dmul>
   b85de:	4680      	mov	r8, r0
   b85e0:	4689      	mov	r9, r1
   b85e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b85e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b85ea:	9315      	str	r3, [sp, #84]	; 0x54
   b85ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b85f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b85f4:	e79d      	b.n	b8532 <_strtod_l+0x9aa>
   b85f6:	f1ba 0f01 	cmp.w	sl, #1
   b85fa:	d102      	bne.n	b8602 <_strtod_l+0xa7a>
   b85fc:	2f00      	cmp	r7, #0
   b85fe:	f43f ad83 	beq.w	b8108 <_strtod_l+0x580>
   b8602:	4b62      	ldr	r3, [pc, #392]	; (b878c <_strtod_l+0xc04>)
   b8604:	2200      	movs	r2, #0
   b8606:	e78e      	b.n	b8526 <_strtod_l+0x99e>
   b8608:	f8df 917c 	ldr.w	r9, [pc, #380]	; b8788 <_strtod_l+0xc00>
   b860c:	f04f 0800 	mov.w	r8, #0
   b8610:	e7e7      	b.n	b85e2 <_strtod_l+0xa5a>
   b8612:	4b5d      	ldr	r3, [pc, #372]	; (b8788 <_strtod_l+0xc00>)
   b8614:	4640      	mov	r0, r8
   b8616:	4649      	mov	r1, r9
   b8618:	2200      	movs	r2, #0
   b861a:	f7fe feff 	bl	b741c <__aeabi_dmul>
   b861e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8620:	4680      	mov	r8, r0
   b8622:	4689      	mov	r9, r1
   b8624:	b933      	cbnz	r3, b8634 <_strtod_l+0xaac>
   b8626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b862a:	900e      	str	r0, [sp, #56]	; 0x38
   b862c:	930f      	str	r3, [sp, #60]	; 0x3c
   b862e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b8632:	e7dd      	b.n	b85f0 <_strtod_l+0xa68>
   b8634:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b8638:	e7f9      	b.n	b862e <_strtod_l+0xaa6>
   b863a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b863e:	9b04      	ldr	r3, [sp, #16]
   b8640:	2b00      	cmp	r3, #0
   b8642:	d1a8      	bne.n	b8596 <_strtod_l+0xa0e>
   b8644:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b864a:	0d1b      	lsrs	r3, r3, #20
   b864c:	051b      	lsls	r3, r3, #20
   b864e:	429a      	cmp	r2, r3
   b8650:	d1a1      	bne.n	b8596 <_strtod_l+0xa0e>
   b8652:	4640      	mov	r0, r8
   b8654:	4649      	mov	r1, r9
   b8656:	f001 fa61 	bl	b9b1c <__aeabi_d2lz>
   b865a:	f7fe feb1 	bl	b73c0 <__aeabi_l2d>
   b865e:	4602      	mov	r2, r0
   b8660:	460b      	mov	r3, r1
   b8662:	4640      	mov	r0, r8
   b8664:	4649      	mov	r1, r9
   b8666:	f7fe fd21 	bl	b70ac <__aeabi_dsub>
   b866a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b866c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8670:	ea43 030a 	orr.w	r3, r3, sl
   b8674:	4313      	orrs	r3, r2
   b8676:	4680      	mov	r8, r0
   b8678:	4689      	mov	r9, r1
   b867a:	d055      	beq.n	b8728 <_strtod_l+0xba0>
   b867c:	a336      	add	r3, pc, #216	; (adr r3, b8758 <_strtod_l+0xbd0>)
   b867e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8682:	f7ff f93d 	bl	b7900 <__aeabi_dcmplt>
   b8686:	2800      	cmp	r0, #0
   b8688:	f47f acd0 	bne.w	b802c <_strtod_l+0x4a4>
   b868c:	a334      	add	r3, pc, #208	; (adr r3, b8760 <_strtod_l+0xbd8>)
   b868e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8692:	4640      	mov	r0, r8
   b8694:	4649      	mov	r1, r9
   b8696:	f7ff f951 	bl	b793c <__aeabi_dcmpgt>
   b869a:	2800      	cmp	r0, #0
   b869c:	f43f af7b 	beq.w	b8596 <_strtod_l+0xa0e>
   b86a0:	e4c4      	b.n	b802c <_strtod_l+0x4a4>
   b86a2:	9b04      	ldr	r3, [sp, #16]
   b86a4:	b333      	cbz	r3, b86f4 <_strtod_l+0xb6c>
   b86a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b86a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b86ac:	d822      	bhi.n	b86f4 <_strtod_l+0xb6c>
   b86ae:	a32e      	add	r3, pc, #184	; (adr r3, b8768 <_strtod_l+0xbe0>)
   b86b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86b4:	4640      	mov	r0, r8
   b86b6:	4649      	mov	r1, r9
   b86b8:	f7ff f92c 	bl	b7914 <__aeabi_dcmple>
   b86bc:	b1a0      	cbz	r0, b86e8 <_strtod_l+0xb60>
   b86be:	4649      	mov	r1, r9
   b86c0:	4640      	mov	r0, r8
   b86c2:	f7ff f945 	bl	b7950 <__aeabi_d2uiz>
   b86c6:	2801      	cmp	r0, #1
   b86c8:	bf38      	it	cc
   b86ca:	2001      	movcc	r0, #1
   b86cc:	f7fe fe2c 	bl	b7328 <__aeabi_ui2d>
   b86d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b86d2:	4680      	mov	r8, r0
   b86d4:	4689      	mov	r9, r1
   b86d6:	bb23      	cbnz	r3, b8722 <_strtod_l+0xb9a>
   b86d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b86dc:	9010      	str	r0, [sp, #64]	; 0x40
   b86de:	9311      	str	r3, [sp, #68]	; 0x44
   b86e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b86e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b86e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b86ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b86ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b86f0:	1a9b      	subs	r3, r3, r2
   b86f2:	9309      	str	r3, [sp, #36]	; 0x24
   b86f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b86f8:	eeb0 0a48 	vmov.f32	s0, s16
   b86fc:	eef0 0a68 	vmov.f32	s1, s17
   b8700:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8704:	f001 f894 	bl	b9830 <__ulp>
   b8708:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b870c:	ec53 2b10 	vmov	r2, r3, d0
   b8710:	f7fe fe84 	bl	b741c <__aeabi_dmul>
   b8714:	ec53 2b18 	vmov	r2, r3, d8
   b8718:	f7fe fcca 	bl	b70b0 <__adddf3>
   b871c:	4682      	mov	sl, r0
   b871e:	468b      	mov	fp, r1
   b8720:	e78d      	b.n	b863e <_strtod_l+0xab6>
   b8722:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b8726:	e7db      	b.n	b86e0 <_strtod_l+0xb58>
   b8728:	a311      	add	r3, pc, #68	; (adr r3, b8770 <_strtod_l+0xbe8>)
   b872a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b872e:	f7ff f8e7 	bl	b7900 <__aeabi_dcmplt>
   b8732:	e7b2      	b.n	b869a <_strtod_l+0xb12>
   b8734:	2300      	movs	r3, #0
   b8736:	930a      	str	r3, [sp, #40]	; 0x28
   b8738:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b873a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b873c:	6013      	str	r3, [r2, #0]
   b873e:	f7ff ba6b 	b.w	b7c18 <_strtod_l+0x90>
   b8742:	2a65      	cmp	r2, #101	; 0x65
   b8744:	f43f ab5f 	beq.w	b7e06 <_strtod_l+0x27e>
   b8748:	2a45      	cmp	r2, #69	; 0x45
   b874a:	f43f ab5c 	beq.w	b7e06 <_strtod_l+0x27e>
   b874e:	2301      	movs	r3, #1
   b8750:	f7ff bb94 	b.w	b7e7c <_strtod_l+0x2f4>
   b8754:	f3af 8000 	nop.w
   b8758:	94a03595 	.word	0x94a03595
   b875c:	3fdfffff 	.word	0x3fdfffff
   b8760:	35afe535 	.word	0x35afe535
   b8764:	3fe00000 	.word	0x3fe00000
   b8768:	ffc00000 	.word	0xffc00000
   b876c:	41dfffff 	.word	0x41dfffff
   b8770:	94a03595 	.word	0x94a03595
   b8774:	3fcfffff 	.word	0x3fcfffff
   b8778:	3ff00000 	.word	0x3ff00000
   b877c:	7ff00000 	.word	0x7ff00000
   b8780:	7fe00000 	.word	0x7fe00000
   b8784:	7c9fffff 	.word	0x7c9fffff
   b8788:	3fe00000 	.word	0x3fe00000
   b878c:	bff00000 	.word	0xbff00000
   b8790:	7fefffff 	.word	0x7fefffff

000b8794 <strtod>:
   b8794:	460a      	mov	r2, r1
   b8796:	4601      	mov	r1, r0
   b8798:	4802      	ldr	r0, [pc, #8]	; (b87a4 <strtod+0x10>)
   b879a:	4b03      	ldr	r3, [pc, #12]	; (b87a8 <strtod+0x14>)
   b879c:	6800      	ldr	r0, [r0, #0]
   b879e:	f7ff b9f3 	b.w	b7b88 <_strtod_l>
   b87a2:	bf00      	nop
   b87a4:	2003cd1c 	.word	0x2003cd1c
   b87a8:	2003cd88 	.word	0x2003cd88

000b87ac <strtok>:
   b87ac:	4b16      	ldr	r3, [pc, #88]	; (b8808 <strtok+0x5c>)
   b87ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b87b0:	681e      	ldr	r6, [r3, #0]
   b87b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b87b4:	4605      	mov	r5, r0
   b87b6:	b9fc      	cbnz	r4, b87f8 <strtok+0x4c>
   b87b8:	2050      	movs	r0, #80	; 0x50
   b87ba:	9101      	str	r1, [sp, #4]
   b87bc:	f7fc fe4c 	bl	b5458 <malloc>
   b87c0:	9901      	ldr	r1, [sp, #4]
   b87c2:	65b0      	str	r0, [r6, #88]	; 0x58
   b87c4:	4602      	mov	r2, r0
   b87c6:	b920      	cbnz	r0, b87d2 <strtok+0x26>
   b87c8:	4b10      	ldr	r3, [pc, #64]	; (b880c <strtok+0x60>)
   b87ca:	4811      	ldr	r0, [pc, #68]	; (b8810 <strtok+0x64>)
   b87cc:	2157      	movs	r1, #87	; 0x57
   b87ce:	f7fc fe8b 	bl	b54e8 <__assert_func>
   b87d2:	e9c0 4400 	strd	r4, r4, [r0]
   b87d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b87da:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b87de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b87e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b87e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b87ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b87ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b87f2:	6184      	str	r4, [r0, #24]
   b87f4:	7704      	strb	r4, [r0, #28]
   b87f6:	6244      	str	r4, [r0, #36]	; 0x24
   b87f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b87fa:	2301      	movs	r3, #1
   b87fc:	4628      	mov	r0, r5
   b87fe:	b002      	add	sp, #8
   b8800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8804:	f000 b806 	b.w	b8814 <__strtok_r>
   b8808:	2003cd1c 	.word	0x2003cd1c
   b880c:	000ba059 	.word	0x000ba059
   b8810:	000ba150 	.word	0x000ba150

000b8814 <__strtok_r>:
   b8814:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8816:	b908      	cbnz	r0, b881c <__strtok_r+0x8>
   b8818:	6810      	ldr	r0, [r2, #0]
   b881a:	b188      	cbz	r0, b8840 <__strtok_r+0x2c>
   b881c:	4604      	mov	r4, r0
   b881e:	4620      	mov	r0, r4
   b8820:	f814 5b01 	ldrb.w	r5, [r4], #1
   b8824:	460f      	mov	r7, r1
   b8826:	f817 6b01 	ldrb.w	r6, [r7], #1
   b882a:	b91e      	cbnz	r6, b8834 <__strtok_r+0x20>
   b882c:	b965      	cbnz	r5, b8848 <__strtok_r+0x34>
   b882e:	6015      	str	r5, [r2, #0]
   b8830:	4628      	mov	r0, r5
   b8832:	e005      	b.n	b8840 <__strtok_r+0x2c>
   b8834:	42b5      	cmp	r5, r6
   b8836:	d1f6      	bne.n	b8826 <__strtok_r+0x12>
   b8838:	2b00      	cmp	r3, #0
   b883a:	d1f0      	bne.n	b881e <__strtok_r+0xa>
   b883c:	6014      	str	r4, [r2, #0]
   b883e:	7003      	strb	r3, [r0, #0]
   b8840:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8842:	461c      	mov	r4, r3
   b8844:	e00c      	b.n	b8860 <__strtok_r+0x4c>
   b8846:	b915      	cbnz	r5, b884e <__strtok_r+0x3a>
   b8848:	f814 3b01 	ldrb.w	r3, [r4], #1
   b884c:	460e      	mov	r6, r1
   b884e:	f816 5b01 	ldrb.w	r5, [r6], #1
   b8852:	42ab      	cmp	r3, r5
   b8854:	d1f7      	bne.n	b8846 <__strtok_r+0x32>
   b8856:	2b00      	cmp	r3, #0
   b8858:	d0f3      	beq.n	b8842 <__strtok_r+0x2e>
   b885a:	2300      	movs	r3, #0
   b885c:	f804 3c01 	strb.w	r3, [r4, #-1]
   b8860:	6014      	str	r4, [r2, #0]
   b8862:	e7ed      	b.n	b8840 <__strtok_r+0x2c>

000b8864 <_strtol_l.constprop.0>:
   b8864:	2b01      	cmp	r3, #1
   b8866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b886a:	d001      	beq.n	b8870 <_strtol_l.constprop.0+0xc>
   b886c:	2b24      	cmp	r3, #36	; 0x24
   b886e:	d906      	bls.n	b887e <_strtol_l.constprop.0+0x1a>
   b8870:	f7fc fe32 	bl	b54d8 <__errno>
   b8874:	2316      	movs	r3, #22
   b8876:	6003      	str	r3, [r0, #0]
   b8878:	2000      	movs	r0, #0
   b887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b887e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8964 <_strtol_l.constprop.0+0x100>
   b8882:	460d      	mov	r5, r1
   b8884:	462e      	mov	r6, r5
   b8886:	f815 4b01 	ldrb.w	r4, [r5], #1
   b888a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b888e:	f017 0708 	ands.w	r7, r7, #8
   b8892:	d1f7      	bne.n	b8884 <_strtol_l.constprop.0+0x20>
   b8894:	2c2d      	cmp	r4, #45	; 0x2d
   b8896:	d132      	bne.n	b88fe <_strtol_l.constprop.0+0x9a>
   b8898:	782c      	ldrb	r4, [r5, #0]
   b889a:	2701      	movs	r7, #1
   b889c:	1cb5      	adds	r5, r6, #2
   b889e:	2b00      	cmp	r3, #0
   b88a0:	d05b      	beq.n	b895a <_strtol_l.constprop.0+0xf6>
   b88a2:	2b10      	cmp	r3, #16
   b88a4:	d109      	bne.n	b88ba <_strtol_l.constprop.0+0x56>
   b88a6:	2c30      	cmp	r4, #48	; 0x30
   b88a8:	d107      	bne.n	b88ba <_strtol_l.constprop.0+0x56>
   b88aa:	782c      	ldrb	r4, [r5, #0]
   b88ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b88b0:	2c58      	cmp	r4, #88	; 0x58
   b88b2:	d14d      	bne.n	b8950 <_strtol_l.constprop.0+0xec>
   b88b4:	786c      	ldrb	r4, [r5, #1]
   b88b6:	2310      	movs	r3, #16
   b88b8:	3502      	adds	r5, #2
   b88ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b88be:	f108 38ff 	add.w	r8, r8, #4294967295
   b88c2:	f04f 0c00 	mov.w	ip, #0
   b88c6:	fbb8 f9f3 	udiv	r9, r8, r3
   b88ca:	4666      	mov	r6, ip
   b88cc:	fb03 8a19 	mls	sl, r3, r9, r8
   b88d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b88d4:	f1be 0f09 	cmp.w	lr, #9
   b88d8:	d816      	bhi.n	b8908 <_strtol_l.constprop.0+0xa4>
   b88da:	4674      	mov	r4, lr
   b88dc:	42a3      	cmp	r3, r4
   b88de:	dd24      	ble.n	b892a <_strtol_l.constprop.0+0xc6>
   b88e0:	f1bc 0f00 	cmp.w	ip, #0
   b88e4:	db1e      	blt.n	b8924 <_strtol_l.constprop.0+0xc0>
   b88e6:	45b1      	cmp	r9, r6
   b88e8:	d31c      	bcc.n	b8924 <_strtol_l.constprop.0+0xc0>
   b88ea:	d101      	bne.n	b88f0 <_strtol_l.constprop.0+0x8c>
   b88ec:	45a2      	cmp	sl, r4
   b88ee:	db19      	blt.n	b8924 <_strtol_l.constprop.0+0xc0>
   b88f0:	fb06 4603 	mla	r6, r6, r3, r4
   b88f4:	f04f 0c01 	mov.w	ip, #1
   b88f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b88fc:	e7e8      	b.n	b88d0 <_strtol_l.constprop.0+0x6c>
   b88fe:	2c2b      	cmp	r4, #43	; 0x2b
   b8900:	bf04      	itt	eq
   b8902:	782c      	ldrbeq	r4, [r5, #0]
   b8904:	1cb5      	addeq	r5, r6, #2
   b8906:	e7ca      	b.n	b889e <_strtol_l.constprop.0+0x3a>
   b8908:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b890c:	f1be 0f19 	cmp.w	lr, #25
   b8910:	d801      	bhi.n	b8916 <_strtol_l.constprop.0+0xb2>
   b8912:	3c37      	subs	r4, #55	; 0x37
   b8914:	e7e2      	b.n	b88dc <_strtol_l.constprop.0+0x78>
   b8916:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b891a:	f1be 0f19 	cmp.w	lr, #25
   b891e:	d804      	bhi.n	b892a <_strtol_l.constprop.0+0xc6>
   b8920:	3c57      	subs	r4, #87	; 0x57
   b8922:	e7db      	b.n	b88dc <_strtol_l.constprop.0+0x78>
   b8924:	f04f 3cff 	mov.w	ip, #4294967295
   b8928:	e7e6      	b.n	b88f8 <_strtol_l.constprop.0+0x94>
   b892a:	f1bc 0f00 	cmp.w	ip, #0
   b892e:	da05      	bge.n	b893c <_strtol_l.constprop.0+0xd8>
   b8930:	2322      	movs	r3, #34	; 0x22
   b8932:	6003      	str	r3, [r0, #0]
   b8934:	4646      	mov	r6, r8
   b8936:	b942      	cbnz	r2, b894a <_strtol_l.constprop.0+0xe6>
   b8938:	4630      	mov	r0, r6
   b893a:	e79e      	b.n	b887a <_strtol_l.constprop.0+0x16>
   b893c:	b107      	cbz	r7, b8940 <_strtol_l.constprop.0+0xdc>
   b893e:	4276      	negs	r6, r6
   b8940:	2a00      	cmp	r2, #0
   b8942:	d0f9      	beq.n	b8938 <_strtol_l.constprop.0+0xd4>
   b8944:	f1bc 0f00 	cmp.w	ip, #0
   b8948:	d000      	beq.n	b894c <_strtol_l.constprop.0+0xe8>
   b894a:	1e69      	subs	r1, r5, #1
   b894c:	6011      	str	r1, [r2, #0]
   b894e:	e7f3      	b.n	b8938 <_strtol_l.constprop.0+0xd4>
   b8950:	2430      	movs	r4, #48	; 0x30
   b8952:	2b00      	cmp	r3, #0
   b8954:	d1b1      	bne.n	b88ba <_strtol_l.constprop.0+0x56>
   b8956:	2308      	movs	r3, #8
   b8958:	e7af      	b.n	b88ba <_strtol_l.constprop.0+0x56>
   b895a:	2c30      	cmp	r4, #48	; 0x30
   b895c:	d0a5      	beq.n	b88aa <_strtol_l.constprop.0+0x46>
   b895e:	230a      	movs	r3, #10
   b8960:	e7ab      	b.n	b88ba <_strtol_l.constprop.0+0x56>
   b8962:	bf00      	nop
   b8964:	000ba1d0 	.word	0x000ba1d0

000b8968 <strtol>:
   b8968:	4613      	mov	r3, r2
   b896a:	460a      	mov	r2, r1
   b896c:	4601      	mov	r1, r0
   b896e:	4802      	ldr	r0, [pc, #8]	; (b8978 <strtol+0x10>)
   b8970:	6800      	ldr	r0, [r0, #0]
   b8972:	f7ff bf77 	b.w	b8864 <_strtol_l.constprop.0>
   b8976:	bf00      	nop
   b8978:	2003cd1c 	.word	0x2003cd1c

000b897c <__register_exitproc>:
   b897c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8980:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8a3c <__register_exitproc+0xc0>
   b8984:	4606      	mov	r6, r0
   b8986:	f8d8 0000 	ldr.w	r0, [r8]
   b898a:	461f      	mov	r7, r3
   b898c:	460d      	mov	r5, r1
   b898e:	4691      	mov	r9, r2
   b8990:	f000 fbc6 	bl	b9120 <__retarget_lock_acquire_recursive>
   b8994:	4b25      	ldr	r3, [pc, #148]	; (b8a2c <__register_exitproc+0xb0>)
   b8996:	681c      	ldr	r4, [r3, #0]
   b8998:	b934      	cbnz	r4, b89a8 <__register_exitproc+0x2c>
   b899a:	4c25      	ldr	r4, [pc, #148]	; (b8a30 <__register_exitproc+0xb4>)
   b899c:	601c      	str	r4, [r3, #0]
   b899e:	4b25      	ldr	r3, [pc, #148]	; (b8a34 <__register_exitproc+0xb8>)
   b89a0:	b113      	cbz	r3, b89a8 <__register_exitproc+0x2c>
   b89a2:	681b      	ldr	r3, [r3, #0]
   b89a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b89a8:	6863      	ldr	r3, [r4, #4]
   b89aa:	2b1f      	cmp	r3, #31
   b89ac:	dd07      	ble.n	b89be <__register_exitproc+0x42>
   b89ae:	f8d8 0000 	ldr.w	r0, [r8]
   b89b2:	f000 fbb7 	bl	b9124 <__retarget_lock_release_recursive>
   b89b6:	f04f 30ff 	mov.w	r0, #4294967295
   b89ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b89be:	b34e      	cbz	r6, b8a14 <__register_exitproc+0x98>
   b89c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b89c4:	b988      	cbnz	r0, b89ea <__register_exitproc+0x6e>
   b89c6:	4b1c      	ldr	r3, [pc, #112]	; (b8a38 <__register_exitproc+0xbc>)
   b89c8:	b923      	cbnz	r3, b89d4 <__register_exitproc+0x58>
   b89ca:	f8d8 0000 	ldr.w	r0, [r8]
   b89ce:	f000 fba8 	bl	b9122 <__retarget_lock_release>
   b89d2:	e7f0      	b.n	b89b6 <__register_exitproc+0x3a>
   b89d4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b89d8:	f7fc fd3e 	bl	b5458 <malloc>
   b89dc:	2800      	cmp	r0, #0
   b89de:	d0f4      	beq.n	b89ca <__register_exitproc+0x4e>
   b89e0:	2300      	movs	r3, #0
   b89e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b89e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b89ea:	6863      	ldr	r3, [r4, #4]
   b89ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b89f0:	2201      	movs	r2, #1
   b89f2:	409a      	lsls	r2, r3
   b89f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b89f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b89fc:	4313      	orrs	r3, r2
   b89fe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8a02:	2e02      	cmp	r6, #2
   b8a04:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8a08:	bf02      	ittt	eq
   b8a0a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8a0e:	4313      	orreq	r3, r2
   b8a10:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8a14:	6863      	ldr	r3, [r4, #4]
   b8a16:	f8d8 0000 	ldr.w	r0, [r8]
   b8a1a:	1c5a      	adds	r2, r3, #1
   b8a1c:	3302      	adds	r3, #2
   b8a1e:	6062      	str	r2, [r4, #4]
   b8a20:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8a24:	f000 fb7e 	bl	b9124 <__retarget_lock_release_recursive>
   b8a28:	2000      	movs	r0, #0
   b8a2a:	e7c6      	b.n	b89ba <__register_exitproc+0x3e>
   b8a2c:	2003e7ec 	.word	0x2003e7ec
   b8a30:	2003e760 	.word	0x2003e760
   b8a34:	00000000 	.word	0x00000000
   b8a38:	000b5459 	.word	0x000b5459
   b8a3c:	2003cd80 	.word	0x2003cd80

000b8a40 <rshift>:
   b8a40:	6903      	ldr	r3, [r0, #16]
   b8a42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b8a46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8a4a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b8a4e:	f100 0414 	add.w	r4, r0, #20
   b8a52:	dd45      	ble.n	b8ae0 <rshift+0xa0>
   b8a54:	f011 011f 	ands.w	r1, r1, #31
   b8a58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b8a5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b8a60:	d10c      	bne.n	b8a7c <rshift+0x3c>
   b8a62:	f100 0710 	add.w	r7, r0, #16
   b8a66:	4629      	mov	r1, r5
   b8a68:	42b1      	cmp	r1, r6
   b8a6a:	d334      	bcc.n	b8ad6 <rshift+0x96>
   b8a6c:	1a9b      	subs	r3, r3, r2
   b8a6e:	009b      	lsls	r3, r3, #2
   b8a70:	1eea      	subs	r2, r5, #3
   b8a72:	4296      	cmp	r6, r2
   b8a74:	bf38      	it	cc
   b8a76:	2300      	movcc	r3, #0
   b8a78:	4423      	add	r3, r4
   b8a7a:	e015      	b.n	b8aa8 <rshift+0x68>
   b8a7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b8a80:	f1c1 0820 	rsb	r8, r1, #32
   b8a84:	40cf      	lsrs	r7, r1
   b8a86:	f105 0e04 	add.w	lr, r5, #4
   b8a8a:	46a1      	mov	r9, r4
   b8a8c:	4576      	cmp	r6, lr
   b8a8e:	46f4      	mov	ip, lr
   b8a90:	d815      	bhi.n	b8abe <rshift+0x7e>
   b8a92:	1a9a      	subs	r2, r3, r2
   b8a94:	0092      	lsls	r2, r2, #2
   b8a96:	3a04      	subs	r2, #4
   b8a98:	3501      	adds	r5, #1
   b8a9a:	42ae      	cmp	r6, r5
   b8a9c:	bf38      	it	cc
   b8a9e:	2200      	movcc	r2, #0
   b8aa0:	18a3      	adds	r3, r4, r2
   b8aa2:	50a7      	str	r7, [r4, r2]
   b8aa4:	b107      	cbz	r7, b8aa8 <rshift+0x68>
   b8aa6:	3304      	adds	r3, #4
   b8aa8:	1b1a      	subs	r2, r3, r4
   b8aaa:	42a3      	cmp	r3, r4
   b8aac:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b8ab0:	bf08      	it	eq
   b8ab2:	2300      	moveq	r3, #0
   b8ab4:	6102      	str	r2, [r0, #16]
   b8ab6:	bf08      	it	eq
   b8ab8:	6143      	streq	r3, [r0, #20]
   b8aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8abe:	f8dc c000 	ldr.w	ip, [ip]
   b8ac2:	fa0c fc08 	lsl.w	ip, ip, r8
   b8ac6:	ea4c 0707 	orr.w	r7, ip, r7
   b8aca:	f849 7b04 	str.w	r7, [r9], #4
   b8ace:	f85e 7b04 	ldr.w	r7, [lr], #4
   b8ad2:	40cf      	lsrs	r7, r1
   b8ad4:	e7da      	b.n	b8a8c <rshift+0x4c>
   b8ad6:	f851 cb04 	ldr.w	ip, [r1], #4
   b8ada:	f847 cf04 	str.w	ip, [r7, #4]!
   b8ade:	e7c3      	b.n	b8a68 <rshift+0x28>
   b8ae0:	4623      	mov	r3, r4
   b8ae2:	e7e1      	b.n	b8aa8 <rshift+0x68>

000b8ae4 <__hexdig_fun>:
   b8ae4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8ae8:	2b09      	cmp	r3, #9
   b8aea:	d802      	bhi.n	b8af2 <__hexdig_fun+0xe>
   b8aec:	3820      	subs	r0, #32
   b8aee:	b2c0      	uxtb	r0, r0
   b8af0:	4770      	bx	lr
   b8af2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8af6:	2b05      	cmp	r3, #5
   b8af8:	d801      	bhi.n	b8afe <__hexdig_fun+0x1a>
   b8afa:	3847      	subs	r0, #71	; 0x47
   b8afc:	e7f7      	b.n	b8aee <__hexdig_fun+0xa>
   b8afe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8b02:	2b05      	cmp	r3, #5
   b8b04:	d801      	bhi.n	b8b0a <__hexdig_fun+0x26>
   b8b06:	3827      	subs	r0, #39	; 0x27
   b8b08:	e7f1      	b.n	b8aee <__hexdig_fun+0xa>
   b8b0a:	2000      	movs	r0, #0
   b8b0c:	4770      	bx	lr
	...

000b8b10 <__gethex>:
   b8b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b14:	ed2d 8b02 	vpush	{d8}
   b8b18:	b089      	sub	sp, #36	; 0x24
   b8b1a:	ee08 0a10 	vmov	s16, r0
   b8b1e:	9304      	str	r3, [sp, #16]
   b8b20:	4bb4      	ldr	r3, [pc, #720]	; (b8df4 <__gethex+0x2e4>)
   b8b22:	681b      	ldr	r3, [r3, #0]
   b8b24:	9301      	str	r3, [sp, #4]
   b8b26:	4618      	mov	r0, r3
   b8b28:	468b      	mov	fp, r1
   b8b2a:	4690      	mov	r8, r2
   b8b2c:	f7fe fff3 	bl	b7b16 <strlen>
   b8b30:	9b01      	ldr	r3, [sp, #4]
   b8b32:	f8db 2000 	ldr.w	r2, [fp]
   b8b36:	4403      	add	r3, r0
   b8b38:	4682      	mov	sl, r0
   b8b3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b8b3e:	9305      	str	r3, [sp, #20]
   b8b40:	1c93      	adds	r3, r2, #2
   b8b42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b8b46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b8b4a:	32fe      	adds	r2, #254	; 0xfe
   b8b4c:	18d1      	adds	r1, r2, r3
   b8b4e:	461f      	mov	r7, r3
   b8b50:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8b54:	9100      	str	r1, [sp, #0]
   b8b56:	2830      	cmp	r0, #48	; 0x30
   b8b58:	d0f8      	beq.n	b8b4c <__gethex+0x3c>
   b8b5a:	f7ff ffc3 	bl	b8ae4 <__hexdig_fun>
   b8b5e:	4604      	mov	r4, r0
   b8b60:	2800      	cmp	r0, #0
   b8b62:	d13a      	bne.n	b8bda <__gethex+0xca>
   b8b64:	9901      	ldr	r1, [sp, #4]
   b8b66:	4652      	mov	r2, sl
   b8b68:	4638      	mov	r0, r7
   b8b6a:	f7fe ffdc 	bl	b7b26 <strncmp>
   b8b6e:	4605      	mov	r5, r0
   b8b70:	2800      	cmp	r0, #0
   b8b72:	d168      	bne.n	b8c46 <__gethex+0x136>
   b8b74:	f817 000a 	ldrb.w	r0, [r7, sl]
   b8b78:	eb07 060a 	add.w	r6, r7, sl
   b8b7c:	f7ff ffb2 	bl	b8ae4 <__hexdig_fun>
   b8b80:	2800      	cmp	r0, #0
   b8b82:	d062      	beq.n	b8c4a <__gethex+0x13a>
   b8b84:	4633      	mov	r3, r6
   b8b86:	7818      	ldrb	r0, [r3, #0]
   b8b88:	2830      	cmp	r0, #48	; 0x30
   b8b8a:	461f      	mov	r7, r3
   b8b8c:	f103 0301 	add.w	r3, r3, #1
   b8b90:	d0f9      	beq.n	b8b86 <__gethex+0x76>
   b8b92:	f7ff ffa7 	bl	b8ae4 <__hexdig_fun>
   b8b96:	2301      	movs	r3, #1
   b8b98:	fab0 f480 	clz	r4, r0
   b8b9c:	0964      	lsrs	r4, r4, #5
   b8b9e:	4635      	mov	r5, r6
   b8ba0:	9300      	str	r3, [sp, #0]
   b8ba2:	463a      	mov	r2, r7
   b8ba4:	4616      	mov	r6, r2
   b8ba6:	3201      	adds	r2, #1
   b8ba8:	7830      	ldrb	r0, [r6, #0]
   b8baa:	f7ff ff9b 	bl	b8ae4 <__hexdig_fun>
   b8bae:	2800      	cmp	r0, #0
   b8bb0:	d1f8      	bne.n	b8ba4 <__gethex+0x94>
   b8bb2:	9901      	ldr	r1, [sp, #4]
   b8bb4:	4652      	mov	r2, sl
   b8bb6:	4630      	mov	r0, r6
   b8bb8:	f7fe ffb5 	bl	b7b26 <strncmp>
   b8bbc:	b980      	cbnz	r0, b8be0 <__gethex+0xd0>
   b8bbe:	b94d      	cbnz	r5, b8bd4 <__gethex+0xc4>
   b8bc0:	eb06 050a 	add.w	r5, r6, sl
   b8bc4:	462a      	mov	r2, r5
   b8bc6:	4616      	mov	r6, r2
   b8bc8:	3201      	adds	r2, #1
   b8bca:	7830      	ldrb	r0, [r6, #0]
   b8bcc:	f7ff ff8a 	bl	b8ae4 <__hexdig_fun>
   b8bd0:	2800      	cmp	r0, #0
   b8bd2:	d1f8      	bne.n	b8bc6 <__gethex+0xb6>
   b8bd4:	1bad      	subs	r5, r5, r6
   b8bd6:	00ad      	lsls	r5, r5, #2
   b8bd8:	e004      	b.n	b8be4 <__gethex+0xd4>
   b8bda:	2400      	movs	r4, #0
   b8bdc:	4625      	mov	r5, r4
   b8bde:	e7e0      	b.n	b8ba2 <__gethex+0x92>
   b8be0:	2d00      	cmp	r5, #0
   b8be2:	d1f7      	bne.n	b8bd4 <__gethex+0xc4>
   b8be4:	7833      	ldrb	r3, [r6, #0]
   b8be6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8bea:	2b50      	cmp	r3, #80	; 0x50
   b8bec:	d13b      	bne.n	b8c66 <__gethex+0x156>
   b8bee:	7873      	ldrb	r3, [r6, #1]
   b8bf0:	2b2b      	cmp	r3, #43	; 0x2b
   b8bf2:	d02c      	beq.n	b8c4e <__gethex+0x13e>
   b8bf4:	2b2d      	cmp	r3, #45	; 0x2d
   b8bf6:	d02e      	beq.n	b8c56 <__gethex+0x146>
   b8bf8:	1c71      	adds	r1, r6, #1
   b8bfa:	f04f 0900 	mov.w	r9, #0
   b8bfe:	7808      	ldrb	r0, [r1, #0]
   b8c00:	f7ff ff70 	bl	b8ae4 <__hexdig_fun>
   b8c04:	1e43      	subs	r3, r0, #1
   b8c06:	b2db      	uxtb	r3, r3
   b8c08:	2b18      	cmp	r3, #24
   b8c0a:	d82c      	bhi.n	b8c66 <__gethex+0x156>
   b8c0c:	f1a0 0210 	sub.w	r2, r0, #16
   b8c10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b8c14:	f7ff ff66 	bl	b8ae4 <__hexdig_fun>
   b8c18:	1e43      	subs	r3, r0, #1
   b8c1a:	b2db      	uxtb	r3, r3
   b8c1c:	2b18      	cmp	r3, #24
   b8c1e:	d91d      	bls.n	b8c5c <__gethex+0x14c>
   b8c20:	f1b9 0f00 	cmp.w	r9, #0
   b8c24:	d000      	beq.n	b8c28 <__gethex+0x118>
   b8c26:	4252      	negs	r2, r2
   b8c28:	4415      	add	r5, r2
   b8c2a:	f8cb 1000 	str.w	r1, [fp]
   b8c2e:	b1e4      	cbz	r4, b8c6a <__gethex+0x15a>
   b8c30:	9b00      	ldr	r3, [sp, #0]
   b8c32:	2b00      	cmp	r3, #0
   b8c34:	bf14      	ite	ne
   b8c36:	2700      	movne	r7, #0
   b8c38:	2706      	moveq	r7, #6
   b8c3a:	4638      	mov	r0, r7
   b8c3c:	b009      	add	sp, #36	; 0x24
   b8c3e:	ecbd 8b02 	vpop	{d8}
   b8c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8c46:	463e      	mov	r6, r7
   b8c48:	4625      	mov	r5, r4
   b8c4a:	2401      	movs	r4, #1
   b8c4c:	e7ca      	b.n	b8be4 <__gethex+0xd4>
   b8c4e:	f04f 0900 	mov.w	r9, #0
   b8c52:	1cb1      	adds	r1, r6, #2
   b8c54:	e7d3      	b.n	b8bfe <__gethex+0xee>
   b8c56:	f04f 0901 	mov.w	r9, #1
   b8c5a:	e7fa      	b.n	b8c52 <__gethex+0x142>
   b8c5c:	230a      	movs	r3, #10
   b8c5e:	fb03 0202 	mla	r2, r3, r2, r0
   b8c62:	3a10      	subs	r2, #16
   b8c64:	e7d4      	b.n	b8c10 <__gethex+0x100>
   b8c66:	4631      	mov	r1, r6
   b8c68:	e7df      	b.n	b8c2a <__gethex+0x11a>
   b8c6a:	1bf3      	subs	r3, r6, r7
   b8c6c:	3b01      	subs	r3, #1
   b8c6e:	4621      	mov	r1, r4
   b8c70:	2b07      	cmp	r3, #7
   b8c72:	dc0b      	bgt.n	b8c8c <__gethex+0x17c>
   b8c74:	ee18 0a10 	vmov	r0, s16
   b8c78:	f000 fa68 	bl	b914c <_Balloc>
   b8c7c:	4604      	mov	r4, r0
   b8c7e:	b940      	cbnz	r0, b8c92 <__gethex+0x182>
   b8c80:	4b5d      	ldr	r3, [pc, #372]	; (b8df8 <__gethex+0x2e8>)
   b8c82:	4602      	mov	r2, r0
   b8c84:	21de      	movs	r1, #222	; 0xde
   b8c86:	485d      	ldr	r0, [pc, #372]	; (b8dfc <__gethex+0x2ec>)
   b8c88:	f7fc fc2e 	bl	b54e8 <__assert_func>
   b8c8c:	3101      	adds	r1, #1
   b8c8e:	105b      	asrs	r3, r3, #1
   b8c90:	e7ee      	b.n	b8c70 <__gethex+0x160>
   b8c92:	f100 0914 	add.w	r9, r0, #20
   b8c96:	f04f 0b00 	mov.w	fp, #0
   b8c9a:	f1ca 0301 	rsb	r3, sl, #1
   b8c9e:	f8cd 9008 	str.w	r9, [sp, #8]
   b8ca2:	f8cd b000 	str.w	fp, [sp]
   b8ca6:	9306      	str	r3, [sp, #24]
   b8ca8:	42b7      	cmp	r7, r6
   b8caa:	d340      	bcc.n	b8d2e <__gethex+0x21e>
   b8cac:	9802      	ldr	r0, [sp, #8]
   b8cae:	9b00      	ldr	r3, [sp, #0]
   b8cb0:	f840 3b04 	str.w	r3, [r0], #4
   b8cb4:	eba0 0009 	sub.w	r0, r0, r9
   b8cb8:	1080      	asrs	r0, r0, #2
   b8cba:	0146      	lsls	r6, r0, #5
   b8cbc:	6120      	str	r0, [r4, #16]
   b8cbe:	4618      	mov	r0, r3
   b8cc0:	f000 fb36 	bl	b9330 <__hi0bits>
   b8cc4:	1a30      	subs	r0, r6, r0
   b8cc6:	f8d8 6000 	ldr.w	r6, [r8]
   b8cca:	42b0      	cmp	r0, r6
   b8ccc:	dd63      	ble.n	b8d96 <__gethex+0x286>
   b8cce:	1b87      	subs	r7, r0, r6
   b8cd0:	4639      	mov	r1, r7
   b8cd2:	4620      	mov	r0, r4
   b8cd4:	f000 feda 	bl	b9a8c <__any_on>
   b8cd8:	4682      	mov	sl, r0
   b8cda:	b1a8      	cbz	r0, b8d08 <__gethex+0x1f8>
   b8cdc:	1e7b      	subs	r3, r7, #1
   b8cde:	1159      	asrs	r1, r3, #5
   b8ce0:	f003 021f 	and.w	r2, r3, #31
   b8ce4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b8ce8:	f04f 0a01 	mov.w	sl, #1
   b8cec:	fa0a f202 	lsl.w	r2, sl, r2
   b8cf0:	420a      	tst	r2, r1
   b8cf2:	d009      	beq.n	b8d08 <__gethex+0x1f8>
   b8cf4:	4553      	cmp	r3, sl
   b8cf6:	dd05      	ble.n	b8d04 <__gethex+0x1f4>
   b8cf8:	1eb9      	subs	r1, r7, #2
   b8cfa:	4620      	mov	r0, r4
   b8cfc:	f000 fec6 	bl	b9a8c <__any_on>
   b8d00:	2800      	cmp	r0, #0
   b8d02:	d145      	bne.n	b8d90 <__gethex+0x280>
   b8d04:	f04f 0a02 	mov.w	sl, #2
   b8d08:	4639      	mov	r1, r7
   b8d0a:	4620      	mov	r0, r4
   b8d0c:	f7ff fe98 	bl	b8a40 <rshift>
   b8d10:	443d      	add	r5, r7
   b8d12:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8d16:	42ab      	cmp	r3, r5
   b8d18:	da4c      	bge.n	b8db4 <__gethex+0x2a4>
   b8d1a:	ee18 0a10 	vmov	r0, s16
   b8d1e:	4621      	mov	r1, r4
   b8d20:	f000 fa54 	bl	b91cc <_Bfree>
   b8d24:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8d26:	2300      	movs	r3, #0
   b8d28:	6013      	str	r3, [r2, #0]
   b8d2a:	27a3      	movs	r7, #163	; 0xa3
   b8d2c:	e785      	b.n	b8c3a <__gethex+0x12a>
   b8d2e:	1e73      	subs	r3, r6, #1
   b8d30:	9a05      	ldr	r2, [sp, #20]
   b8d32:	9303      	str	r3, [sp, #12]
   b8d34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b8d38:	4293      	cmp	r3, r2
   b8d3a:	d019      	beq.n	b8d70 <__gethex+0x260>
   b8d3c:	f1bb 0f20 	cmp.w	fp, #32
   b8d40:	d107      	bne.n	b8d52 <__gethex+0x242>
   b8d42:	9b02      	ldr	r3, [sp, #8]
   b8d44:	9a00      	ldr	r2, [sp, #0]
   b8d46:	f843 2b04 	str.w	r2, [r3], #4
   b8d4a:	9302      	str	r3, [sp, #8]
   b8d4c:	2300      	movs	r3, #0
   b8d4e:	9300      	str	r3, [sp, #0]
   b8d50:	469b      	mov	fp, r3
   b8d52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b8d56:	f7ff fec5 	bl	b8ae4 <__hexdig_fun>
   b8d5a:	9b00      	ldr	r3, [sp, #0]
   b8d5c:	f000 000f 	and.w	r0, r0, #15
   b8d60:	fa00 f00b 	lsl.w	r0, r0, fp
   b8d64:	4303      	orrs	r3, r0
   b8d66:	9300      	str	r3, [sp, #0]
   b8d68:	f10b 0b04 	add.w	fp, fp, #4
   b8d6c:	9b03      	ldr	r3, [sp, #12]
   b8d6e:	e00d      	b.n	b8d8c <__gethex+0x27c>
   b8d70:	9b03      	ldr	r3, [sp, #12]
   b8d72:	9a06      	ldr	r2, [sp, #24]
   b8d74:	4413      	add	r3, r2
   b8d76:	42bb      	cmp	r3, r7
   b8d78:	d3e0      	bcc.n	b8d3c <__gethex+0x22c>
   b8d7a:	4618      	mov	r0, r3
   b8d7c:	9901      	ldr	r1, [sp, #4]
   b8d7e:	9307      	str	r3, [sp, #28]
   b8d80:	4652      	mov	r2, sl
   b8d82:	f7fe fed0 	bl	b7b26 <strncmp>
   b8d86:	9b07      	ldr	r3, [sp, #28]
   b8d88:	2800      	cmp	r0, #0
   b8d8a:	d1d7      	bne.n	b8d3c <__gethex+0x22c>
   b8d8c:	461e      	mov	r6, r3
   b8d8e:	e78b      	b.n	b8ca8 <__gethex+0x198>
   b8d90:	f04f 0a03 	mov.w	sl, #3
   b8d94:	e7b8      	b.n	b8d08 <__gethex+0x1f8>
   b8d96:	da0a      	bge.n	b8dae <__gethex+0x29e>
   b8d98:	1a37      	subs	r7, r6, r0
   b8d9a:	4621      	mov	r1, r4
   b8d9c:	ee18 0a10 	vmov	r0, s16
   b8da0:	463a      	mov	r2, r7
   b8da2:	f000 fc2f 	bl	b9604 <__lshift>
   b8da6:	1bed      	subs	r5, r5, r7
   b8da8:	4604      	mov	r4, r0
   b8daa:	f100 0914 	add.w	r9, r0, #20
   b8dae:	f04f 0a00 	mov.w	sl, #0
   b8db2:	e7ae      	b.n	b8d12 <__gethex+0x202>
   b8db4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b8db8:	42a8      	cmp	r0, r5
   b8dba:	dd72      	ble.n	b8ea2 <__gethex+0x392>
   b8dbc:	1b45      	subs	r5, r0, r5
   b8dbe:	42ae      	cmp	r6, r5
   b8dc0:	dc36      	bgt.n	b8e30 <__gethex+0x320>
   b8dc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8dc6:	2b02      	cmp	r3, #2
   b8dc8:	d02a      	beq.n	b8e20 <__gethex+0x310>
   b8dca:	2b03      	cmp	r3, #3
   b8dcc:	d02c      	beq.n	b8e28 <__gethex+0x318>
   b8dce:	2b01      	cmp	r3, #1
   b8dd0:	d11c      	bne.n	b8e0c <__gethex+0x2fc>
   b8dd2:	42ae      	cmp	r6, r5
   b8dd4:	d11a      	bne.n	b8e0c <__gethex+0x2fc>
   b8dd6:	2e01      	cmp	r6, #1
   b8dd8:	d112      	bne.n	b8e00 <__gethex+0x2f0>
   b8dda:	9a04      	ldr	r2, [sp, #16]
   b8ddc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8de0:	6013      	str	r3, [r2, #0]
   b8de2:	2301      	movs	r3, #1
   b8de4:	6123      	str	r3, [r4, #16]
   b8de6:	f8c9 3000 	str.w	r3, [r9]
   b8dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8dec:	2762      	movs	r7, #98	; 0x62
   b8dee:	601c      	str	r4, [r3, #0]
   b8df0:	e723      	b.n	b8c3a <__gethex+0x12a>
   b8df2:	bf00      	nop
   b8df4:	000ba368 	.word	0x000ba368
   b8df8:	000ba2d0 	.word	0x000ba2d0
   b8dfc:	000ba2e1 	.word	0x000ba2e1
   b8e00:	1e71      	subs	r1, r6, #1
   b8e02:	4620      	mov	r0, r4
   b8e04:	f000 fe42 	bl	b9a8c <__any_on>
   b8e08:	2800      	cmp	r0, #0
   b8e0a:	d1e6      	bne.n	b8dda <__gethex+0x2ca>
   b8e0c:	ee18 0a10 	vmov	r0, s16
   b8e10:	4621      	mov	r1, r4
   b8e12:	f000 f9db 	bl	b91cc <_Bfree>
   b8e16:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8e18:	2300      	movs	r3, #0
   b8e1a:	6013      	str	r3, [r2, #0]
   b8e1c:	2750      	movs	r7, #80	; 0x50
   b8e1e:	e70c      	b.n	b8c3a <__gethex+0x12a>
   b8e20:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8e22:	2b00      	cmp	r3, #0
   b8e24:	d1f2      	bne.n	b8e0c <__gethex+0x2fc>
   b8e26:	e7d8      	b.n	b8dda <__gethex+0x2ca>
   b8e28:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8e2a:	2b00      	cmp	r3, #0
   b8e2c:	d1d5      	bne.n	b8dda <__gethex+0x2ca>
   b8e2e:	e7ed      	b.n	b8e0c <__gethex+0x2fc>
   b8e30:	1e6f      	subs	r7, r5, #1
   b8e32:	f1ba 0f00 	cmp.w	sl, #0
   b8e36:	d131      	bne.n	b8e9c <__gethex+0x38c>
   b8e38:	b127      	cbz	r7, b8e44 <__gethex+0x334>
   b8e3a:	4639      	mov	r1, r7
   b8e3c:	4620      	mov	r0, r4
   b8e3e:	f000 fe25 	bl	b9a8c <__any_on>
   b8e42:	4682      	mov	sl, r0
   b8e44:	117b      	asrs	r3, r7, #5
   b8e46:	2101      	movs	r1, #1
   b8e48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b8e4c:	f007 071f 	and.w	r7, r7, #31
   b8e50:	fa01 f707 	lsl.w	r7, r1, r7
   b8e54:	421f      	tst	r7, r3
   b8e56:	4629      	mov	r1, r5
   b8e58:	4620      	mov	r0, r4
   b8e5a:	bf18      	it	ne
   b8e5c:	f04a 0a02 	orrne.w	sl, sl, #2
   b8e60:	1b76      	subs	r6, r6, r5
   b8e62:	f7ff fded 	bl	b8a40 <rshift>
   b8e66:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b8e6a:	2702      	movs	r7, #2
   b8e6c:	f1ba 0f00 	cmp.w	sl, #0
   b8e70:	d048      	beq.n	b8f04 <__gethex+0x3f4>
   b8e72:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8e76:	2b02      	cmp	r3, #2
   b8e78:	d015      	beq.n	b8ea6 <__gethex+0x396>
   b8e7a:	2b03      	cmp	r3, #3
   b8e7c:	d017      	beq.n	b8eae <__gethex+0x39e>
   b8e7e:	2b01      	cmp	r3, #1
   b8e80:	d109      	bne.n	b8e96 <__gethex+0x386>
   b8e82:	f01a 0f02 	tst.w	sl, #2
   b8e86:	d006      	beq.n	b8e96 <__gethex+0x386>
   b8e88:	f8d9 0000 	ldr.w	r0, [r9]
   b8e8c:	ea4a 0a00 	orr.w	sl, sl, r0
   b8e90:	f01a 0f01 	tst.w	sl, #1
   b8e94:	d10e      	bne.n	b8eb4 <__gethex+0x3a4>
   b8e96:	f047 0710 	orr.w	r7, r7, #16
   b8e9a:	e033      	b.n	b8f04 <__gethex+0x3f4>
   b8e9c:	f04f 0a01 	mov.w	sl, #1
   b8ea0:	e7d0      	b.n	b8e44 <__gethex+0x334>
   b8ea2:	2701      	movs	r7, #1
   b8ea4:	e7e2      	b.n	b8e6c <__gethex+0x35c>
   b8ea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8ea8:	f1c3 0301 	rsb	r3, r3, #1
   b8eac:	9315      	str	r3, [sp, #84]	; 0x54
   b8eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8eb0:	2b00      	cmp	r3, #0
   b8eb2:	d0f0      	beq.n	b8e96 <__gethex+0x386>
   b8eb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b8eb8:	f104 0314 	add.w	r3, r4, #20
   b8ebc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b8ec0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b8ec4:	f04f 0c00 	mov.w	ip, #0
   b8ec8:	4618      	mov	r0, r3
   b8eca:	f853 2b04 	ldr.w	r2, [r3], #4
   b8ece:	f1b2 3fff 	cmp.w	r2, #4294967295
   b8ed2:	d01c      	beq.n	b8f0e <__gethex+0x3fe>
   b8ed4:	3201      	adds	r2, #1
   b8ed6:	6002      	str	r2, [r0, #0]
   b8ed8:	2f02      	cmp	r7, #2
   b8eda:	f104 0314 	add.w	r3, r4, #20
   b8ede:	d13f      	bne.n	b8f60 <__gethex+0x450>
   b8ee0:	f8d8 2000 	ldr.w	r2, [r8]
   b8ee4:	3a01      	subs	r2, #1
   b8ee6:	42b2      	cmp	r2, r6
   b8ee8:	d10a      	bne.n	b8f00 <__gethex+0x3f0>
   b8eea:	1171      	asrs	r1, r6, #5
   b8eec:	2201      	movs	r2, #1
   b8eee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b8ef2:	f006 061f 	and.w	r6, r6, #31
   b8ef6:	fa02 f606 	lsl.w	r6, r2, r6
   b8efa:	421e      	tst	r6, r3
   b8efc:	bf18      	it	ne
   b8efe:	4617      	movne	r7, r2
   b8f00:	f047 0720 	orr.w	r7, r7, #32
   b8f04:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8f06:	601c      	str	r4, [r3, #0]
   b8f08:	9b04      	ldr	r3, [sp, #16]
   b8f0a:	601d      	str	r5, [r3, #0]
   b8f0c:	e695      	b.n	b8c3a <__gethex+0x12a>
   b8f0e:	4299      	cmp	r1, r3
   b8f10:	f843 cc04 	str.w	ip, [r3, #-4]
   b8f14:	d8d8      	bhi.n	b8ec8 <__gethex+0x3b8>
   b8f16:	68a3      	ldr	r3, [r4, #8]
   b8f18:	459b      	cmp	fp, r3
   b8f1a:	db19      	blt.n	b8f50 <__gethex+0x440>
   b8f1c:	6861      	ldr	r1, [r4, #4]
   b8f1e:	ee18 0a10 	vmov	r0, s16
   b8f22:	3101      	adds	r1, #1
   b8f24:	f000 f912 	bl	b914c <_Balloc>
   b8f28:	4681      	mov	r9, r0
   b8f2a:	b918      	cbnz	r0, b8f34 <__gethex+0x424>
   b8f2c:	4b1a      	ldr	r3, [pc, #104]	; (b8f98 <__gethex+0x488>)
   b8f2e:	4602      	mov	r2, r0
   b8f30:	2184      	movs	r1, #132	; 0x84
   b8f32:	e6a8      	b.n	b8c86 <__gethex+0x176>
   b8f34:	6922      	ldr	r2, [r4, #16]
   b8f36:	3202      	adds	r2, #2
   b8f38:	f104 010c 	add.w	r1, r4, #12
   b8f3c:	0092      	lsls	r2, r2, #2
   b8f3e:	300c      	adds	r0, #12
   b8f40:	f7fe fd65 	bl	b7a0e <memcpy>
   b8f44:	4621      	mov	r1, r4
   b8f46:	ee18 0a10 	vmov	r0, s16
   b8f4a:	f000 f93f 	bl	b91cc <_Bfree>
   b8f4e:	464c      	mov	r4, r9
   b8f50:	6923      	ldr	r3, [r4, #16]
   b8f52:	1c5a      	adds	r2, r3, #1
   b8f54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b8f58:	6122      	str	r2, [r4, #16]
   b8f5a:	2201      	movs	r2, #1
   b8f5c:	615a      	str	r2, [r3, #20]
   b8f5e:	e7bb      	b.n	b8ed8 <__gethex+0x3c8>
   b8f60:	6922      	ldr	r2, [r4, #16]
   b8f62:	455a      	cmp	r2, fp
   b8f64:	dd0b      	ble.n	b8f7e <__gethex+0x46e>
   b8f66:	2101      	movs	r1, #1
   b8f68:	4620      	mov	r0, r4
   b8f6a:	f7ff fd69 	bl	b8a40 <rshift>
   b8f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8f72:	3501      	adds	r5, #1
   b8f74:	42ab      	cmp	r3, r5
   b8f76:	f6ff aed0 	blt.w	b8d1a <__gethex+0x20a>
   b8f7a:	2701      	movs	r7, #1
   b8f7c:	e7c0      	b.n	b8f00 <__gethex+0x3f0>
   b8f7e:	f016 061f 	ands.w	r6, r6, #31
   b8f82:	d0fa      	beq.n	b8f7a <__gethex+0x46a>
   b8f84:	4453      	add	r3, sl
   b8f86:	f1c6 0620 	rsb	r6, r6, #32
   b8f8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b8f8e:	f000 f9cf 	bl	b9330 <__hi0bits>
   b8f92:	42b0      	cmp	r0, r6
   b8f94:	dbe7      	blt.n	b8f66 <__gethex+0x456>
   b8f96:	e7f0      	b.n	b8f7a <__gethex+0x46a>
   b8f98:	000ba2d0 	.word	0x000ba2d0

000b8f9c <L_shift>:
   b8f9c:	f1c2 0208 	rsb	r2, r2, #8
   b8fa0:	0092      	lsls	r2, r2, #2
   b8fa2:	b570      	push	{r4, r5, r6, lr}
   b8fa4:	f1c2 0620 	rsb	r6, r2, #32
   b8fa8:	6843      	ldr	r3, [r0, #4]
   b8faa:	6804      	ldr	r4, [r0, #0]
   b8fac:	fa03 f506 	lsl.w	r5, r3, r6
   b8fb0:	432c      	orrs	r4, r5
   b8fb2:	40d3      	lsrs	r3, r2
   b8fb4:	6004      	str	r4, [r0, #0]
   b8fb6:	f840 3f04 	str.w	r3, [r0, #4]!
   b8fba:	4288      	cmp	r0, r1
   b8fbc:	d3f4      	bcc.n	b8fa8 <L_shift+0xc>
   b8fbe:	bd70      	pop	{r4, r5, r6, pc}

000b8fc0 <__match>:
   b8fc0:	b530      	push	{r4, r5, lr}
   b8fc2:	6803      	ldr	r3, [r0, #0]
   b8fc4:	3301      	adds	r3, #1
   b8fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8fca:	b914      	cbnz	r4, b8fd2 <__match+0x12>
   b8fcc:	6003      	str	r3, [r0, #0]
   b8fce:	2001      	movs	r0, #1
   b8fd0:	bd30      	pop	{r4, r5, pc}
   b8fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8fd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b8fda:	2d19      	cmp	r5, #25
   b8fdc:	bf98      	it	ls
   b8fde:	3220      	addls	r2, #32
   b8fe0:	42a2      	cmp	r2, r4
   b8fe2:	d0f0      	beq.n	b8fc6 <__match+0x6>
   b8fe4:	2000      	movs	r0, #0
   b8fe6:	e7f3      	b.n	b8fd0 <__match+0x10>

000b8fe8 <__hexnan>:
   b8fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8fec:	680b      	ldr	r3, [r1, #0]
   b8fee:	115e      	asrs	r6, r3, #5
   b8ff0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b8ff4:	f013 031f 	ands.w	r3, r3, #31
   b8ff8:	b087      	sub	sp, #28
   b8ffa:	bf18      	it	ne
   b8ffc:	3604      	addne	r6, #4
   b8ffe:	2500      	movs	r5, #0
   b9000:	1f37      	subs	r7, r6, #4
   b9002:	4690      	mov	r8, r2
   b9004:	6802      	ldr	r2, [r0, #0]
   b9006:	9301      	str	r3, [sp, #4]
   b9008:	4682      	mov	sl, r0
   b900a:	f846 5c04 	str.w	r5, [r6, #-4]
   b900e:	46b9      	mov	r9, r7
   b9010:	463c      	mov	r4, r7
   b9012:	9502      	str	r5, [sp, #8]
   b9014:	46ab      	mov	fp, r5
   b9016:	7851      	ldrb	r1, [r2, #1]
   b9018:	1c53      	adds	r3, r2, #1
   b901a:	9303      	str	r3, [sp, #12]
   b901c:	b341      	cbz	r1, b9070 <__hexnan+0x88>
   b901e:	4608      	mov	r0, r1
   b9020:	9205      	str	r2, [sp, #20]
   b9022:	9104      	str	r1, [sp, #16]
   b9024:	f7ff fd5e 	bl	b8ae4 <__hexdig_fun>
   b9028:	2800      	cmp	r0, #0
   b902a:	d14f      	bne.n	b90cc <__hexnan+0xe4>
   b902c:	9904      	ldr	r1, [sp, #16]
   b902e:	9a05      	ldr	r2, [sp, #20]
   b9030:	2920      	cmp	r1, #32
   b9032:	d818      	bhi.n	b9066 <__hexnan+0x7e>
   b9034:	9b02      	ldr	r3, [sp, #8]
   b9036:	459b      	cmp	fp, r3
   b9038:	dd13      	ble.n	b9062 <__hexnan+0x7a>
   b903a:	454c      	cmp	r4, r9
   b903c:	d206      	bcs.n	b904c <__hexnan+0x64>
   b903e:	2d07      	cmp	r5, #7
   b9040:	dc04      	bgt.n	b904c <__hexnan+0x64>
   b9042:	462a      	mov	r2, r5
   b9044:	4649      	mov	r1, r9
   b9046:	4620      	mov	r0, r4
   b9048:	f7ff ffa8 	bl	b8f9c <L_shift>
   b904c:	4544      	cmp	r4, r8
   b904e:	d950      	bls.n	b90f2 <__hexnan+0x10a>
   b9050:	2300      	movs	r3, #0
   b9052:	f1a4 0904 	sub.w	r9, r4, #4
   b9056:	f844 3c04 	str.w	r3, [r4, #-4]
   b905a:	f8cd b008 	str.w	fp, [sp, #8]
   b905e:	464c      	mov	r4, r9
   b9060:	461d      	mov	r5, r3
   b9062:	9a03      	ldr	r2, [sp, #12]
   b9064:	e7d7      	b.n	b9016 <__hexnan+0x2e>
   b9066:	2929      	cmp	r1, #41	; 0x29
   b9068:	d156      	bne.n	b9118 <__hexnan+0x130>
   b906a:	3202      	adds	r2, #2
   b906c:	f8ca 2000 	str.w	r2, [sl]
   b9070:	f1bb 0f00 	cmp.w	fp, #0
   b9074:	d050      	beq.n	b9118 <__hexnan+0x130>
   b9076:	454c      	cmp	r4, r9
   b9078:	d206      	bcs.n	b9088 <__hexnan+0xa0>
   b907a:	2d07      	cmp	r5, #7
   b907c:	dc04      	bgt.n	b9088 <__hexnan+0xa0>
   b907e:	462a      	mov	r2, r5
   b9080:	4649      	mov	r1, r9
   b9082:	4620      	mov	r0, r4
   b9084:	f7ff ff8a 	bl	b8f9c <L_shift>
   b9088:	4544      	cmp	r4, r8
   b908a:	d934      	bls.n	b90f6 <__hexnan+0x10e>
   b908c:	f1a8 0204 	sub.w	r2, r8, #4
   b9090:	4623      	mov	r3, r4
   b9092:	f853 1b04 	ldr.w	r1, [r3], #4
   b9096:	f842 1f04 	str.w	r1, [r2, #4]!
   b909a:	429f      	cmp	r7, r3
   b909c:	d2f9      	bcs.n	b9092 <__hexnan+0xaa>
   b909e:	1b3b      	subs	r3, r7, r4
   b90a0:	f023 0303 	bic.w	r3, r3, #3
   b90a4:	3304      	adds	r3, #4
   b90a6:	3401      	adds	r4, #1
   b90a8:	3e03      	subs	r6, #3
   b90aa:	42b4      	cmp	r4, r6
   b90ac:	bf88      	it	hi
   b90ae:	2304      	movhi	r3, #4
   b90b0:	4443      	add	r3, r8
   b90b2:	2200      	movs	r2, #0
   b90b4:	f843 2b04 	str.w	r2, [r3], #4
   b90b8:	429f      	cmp	r7, r3
   b90ba:	d2fb      	bcs.n	b90b4 <__hexnan+0xcc>
   b90bc:	683b      	ldr	r3, [r7, #0]
   b90be:	b91b      	cbnz	r3, b90c8 <__hexnan+0xe0>
   b90c0:	4547      	cmp	r7, r8
   b90c2:	d127      	bne.n	b9114 <__hexnan+0x12c>
   b90c4:	2301      	movs	r3, #1
   b90c6:	603b      	str	r3, [r7, #0]
   b90c8:	2005      	movs	r0, #5
   b90ca:	e026      	b.n	b911a <__hexnan+0x132>
   b90cc:	3501      	adds	r5, #1
   b90ce:	2d08      	cmp	r5, #8
   b90d0:	f10b 0b01 	add.w	fp, fp, #1
   b90d4:	dd06      	ble.n	b90e4 <__hexnan+0xfc>
   b90d6:	4544      	cmp	r4, r8
   b90d8:	d9c3      	bls.n	b9062 <__hexnan+0x7a>
   b90da:	2300      	movs	r3, #0
   b90dc:	f844 3c04 	str.w	r3, [r4, #-4]
   b90e0:	2501      	movs	r5, #1
   b90e2:	3c04      	subs	r4, #4
   b90e4:	6822      	ldr	r2, [r4, #0]
   b90e6:	f000 000f 	and.w	r0, r0, #15
   b90ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b90ee:	6022      	str	r2, [r4, #0]
   b90f0:	e7b7      	b.n	b9062 <__hexnan+0x7a>
   b90f2:	2508      	movs	r5, #8
   b90f4:	e7b5      	b.n	b9062 <__hexnan+0x7a>
   b90f6:	9b01      	ldr	r3, [sp, #4]
   b90f8:	2b00      	cmp	r3, #0
   b90fa:	d0df      	beq.n	b90bc <__hexnan+0xd4>
   b90fc:	f04f 32ff 	mov.w	r2, #4294967295
   b9100:	f1c3 0320 	rsb	r3, r3, #32
   b9104:	fa22 f303 	lsr.w	r3, r2, r3
   b9108:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b910c:	401a      	ands	r2, r3
   b910e:	f846 2c04 	str.w	r2, [r6, #-4]
   b9112:	e7d3      	b.n	b90bc <__hexnan+0xd4>
   b9114:	3f04      	subs	r7, #4
   b9116:	e7d1      	b.n	b90bc <__hexnan+0xd4>
   b9118:	2004      	movs	r0, #4
   b911a:	b007      	add	sp, #28
   b911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9120 <__retarget_lock_acquire_recursive>:
   b9120:	4770      	bx	lr

000b9122 <__retarget_lock_release>:
   b9122:	4770      	bx	lr

000b9124 <__retarget_lock_release_recursive>:
   b9124:	4770      	bx	lr

000b9126 <__ascii_mbtowc>:
   b9126:	b082      	sub	sp, #8
   b9128:	b901      	cbnz	r1, b912c <__ascii_mbtowc+0x6>
   b912a:	a901      	add	r1, sp, #4
   b912c:	b142      	cbz	r2, b9140 <__ascii_mbtowc+0x1a>
   b912e:	b14b      	cbz	r3, b9144 <__ascii_mbtowc+0x1e>
   b9130:	7813      	ldrb	r3, [r2, #0]
   b9132:	600b      	str	r3, [r1, #0]
   b9134:	7812      	ldrb	r2, [r2, #0]
   b9136:	1e10      	subs	r0, r2, #0
   b9138:	bf18      	it	ne
   b913a:	2001      	movne	r0, #1
   b913c:	b002      	add	sp, #8
   b913e:	4770      	bx	lr
   b9140:	4610      	mov	r0, r2
   b9142:	e7fb      	b.n	b913c <__ascii_mbtowc+0x16>
   b9144:	f06f 0001 	mvn.w	r0, #1
   b9148:	e7f8      	b.n	b913c <__ascii_mbtowc+0x16>
	...

000b914c <_Balloc>:
   b914c:	b570      	push	{r4, r5, r6, lr}
   b914e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9150:	4604      	mov	r4, r0
   b9152:	460d      	mov	r5, r1
   b9154:	b976      	cbnz	r6, b9174 <_Balloc+0x28>
   b9156:	2010      	movs	r0, #16
   b9158:	f7fc f97e 	bl	b5458 <malloc>
   b915c:	4602      	mov	r2, r0
   b915e:	6260      	str	r0, [r4, #36]	; 0x24
   b9160:	b920      	cbnz	r0, b916c <_Balloc+0x20>
   b9162:	4b18      	ldr	r3, [pc, #96]	; (b91c4 <_Balloc+0x78>)
   b9164:	4818      	ldr	r0, [pc, #96]	; (b91c8 <_Balloc+0x7c>)
   b9166:	2166      	movs	r1, #102	; 0x66
   b9168:	f7fc f9be 	bl	b54e8 <__assert_func>
   b916c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9170:	6006      	str	r6, [r0, #0]
   b9172:	60c6      	str	r6, [r0, #12]
   b9174:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9176:	68f3      	ldr	r3, [r6, #12]
   b9178:	b183      	cbz	r3, b919c <_Balloc+0x50>
   b917a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b917c:	68db      	ldr	r3, [r3, #12]
   b917e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b9182:	b9b8      	cbnz	r0, b91b4 <_Balloc+0x68>
   b9184:	2101      	movs	r1, #1
   b9186:	fa01 f605 	lsl.w	r6, r1, r5
   b918a:	1d72      	adds	r2, r6, #5
   b918c:	0092      	lsls	r2, r2, #2
   b918e:	4620      	mov	r0, r4
   b9190:	f000 fc9d 	bl	b9ace <_calloc_r>
   b9194:	b160      	cbz	r0, b91b0 <_Balloc+0x64>
   b9196:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b919a:	e00e      	b.n	b91ba <_Balloc+0x6e>
   b919c:	2221      	movs	r2, #33	; 0x21
   b919e:	2104      	movs	r1, #4
   b91a0:	4620      	mov	r0, r4
   b91a2:	f000 fc94 	bl	b9ace <_calloc_r>
   b91a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b91a8:	60f0      	str	r0, [r6, #12]
   b91aa:	68db      	ldr	r3, [r3, #12]
   b91ac:	2b00      	cmp	r3, #0
   b91ae:	d1e4      	bne.n	b917a <_Balloc+0x2e>
   b91b0:	2000      	movs	r0, #0
   b91b2:	bd70      	pop	{r4, r5, r6, pc}
   b91b4:	6802      	ldr	r2, [r0, #0]
   b91b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b91ba:	2300      	movs	r3, #0
   b91bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b91c0:	e7f7      	b.n	b91b2 <_Balloc+0x66>
   b91c2:	bf00      	nop
   b91c4:	000ba059 	.word	0x000ba059
   b91c8:	000ba37c 	.word	0x000ba37c

000b91cc <_Bfree>:
   b91cc:	b570      	push	{r4, r5, r6, lr}
   b91ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b91d0:	4605      	mov	r5, r0
   b91d2:	460c      	mov	r4, r1
   b91d4:	b976      	cbnz	r6, b91f4 <_Bfree+0x28>
   b91d6:	2010      	movs	r0, #16
   b91d8:	f7fc f93e 	bl	b5458 <malloc>
   b91dc:	4602      	mov	r2, r0
   b91de:	6268      	str	r0, [r5, #36]	; 0x24
   b91e0:	b920      	cbnz	r0, b91ec <_Bfree+0x20>
   b91e2:	4b09      	ldr	r3, [pc, #36]	; (b9208 <_Bfree+0x3c>)
   b91e4:	4809      	ldr	r0, [pc, #36]	; (b920c <_Bfree+0x40>)
   b91e6:	218a      	movs	r1, #138	; 0x8a
   b91e8:	f7fc f97e 	bl	b54e8 <__assert_func>
   b91ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b91f0:	6006      	str	r6, [r0, #0]
   b91f2:	60c6      	str	r6, [r0, #12]
   b91f4:	b13c      	cbz	r4, b9206 <_Bfree+0x3a>
   b91f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b91f8:	6862      	ldr	r2, [r4, #4]
   b91fa:	68db      	ldr	r3, [r3, #12]
   b91fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9200:	6021      	str	r1, [r4, #0]
   b9202:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9206:	bd70      	pop	{r4, r5, r6, pc}
   b9208:	000ba059 	.word	0x000ba059
   b920c:	000ba37c 	.word	0x000ba37c

000b9210 <__multadd>:
   b9210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9214:	690d      	ldr	r5, [r1, #16]
   b9216:	4607      	mov	r7, r0
   b9218:	460c      	mov	r4, r1
   b921a:	461e      	mov	r6, r3
   b921c:	f101 0c14 	add.w	ip, r1, #20
   b9220:	2000      	movs	r0, #0
   b9222:	f8dc 3000 	ldr.w	r3, [ip]
   b9226:	b299      	uxth	r1, r3
   b9228:	fb02 6101 	mla	r1, r2, r1, r6
   b922c:	0c1e      	lsrs	r6, r3, #16
   b922e:	0c0b      	lsrs	r3, r1, #16
   b9230:	fb02 3306 	mla	r3, r2, r6, r3
   b9234:	b289      	uxth	r1, r1
   b9236:	3001      	adds	r0, #1
   b9238:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b923c:	4285      	cmp	r5, r0
   b923e:	f84c 1b04 	str.w	r1, [ip], #4
   b9242:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9246:	dcec      	bgt.n	b9222 <__multadd+0x12>
   b9248:	b30e      	cbz	r6, b928e <__multadd+0x7e>
   b924a:	68a3      	ldr	r3, [r4, #8]
   b924c:	42ab      	cmp	r3, r5
   b924e:	dc19      	bgt.n	b9284 <__multadd+0x74>
   b9250:	6861      	ldr	r1, [r4, #4]
   b9252:	4638      	mov	r0, r7
   b9254:	3101      	adds	r1, #1
   b9256:	f7ff ff79 	bl	b914c <_Balloc>
   b925a:	4680      	mov	r8, r0
   b925c:	b928      	cbnz	r0, b926a <__multadd+0x5a>
   b925e:	4602      	mov	r2, r0
   b9260:	4b0c      	ldr	r3, [pc, #48]	; (b9294 <__multadd+0x84>)
   b9262:	480d      	ldr	r0, [pc, #52]	; (b9298 <__multadd+0x88>)
   b9264:	21b5      	movs	r1, #181	; 0xb5
   b9266:	f7fc f93f 	bl	b54e8 <__assert_func>
   b926a:	6922      	ldr	r2, [r4, #16]
   b926c:	3202      	adds	r2, #2
   b926e:	f104 010c 	add.w	r1, r4, #12
   b9272:	0092      	lsls	r2, r2, #2
   b9274:	300c      	adds	r0, #12
   b9276:	f7fe fbca 	bl	b7a0e <memcpy>
   b927a:	4621      	mov	r1, r4
   b927c:	4638      	mov	r0, r7
   b927e:	f7ff ffa5 	bl	b91cc <_Bfree>
   b9282:	4644      	mov	r4, r8
   b9284:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9288:	3501      	adds	r5, #1
   b928a:	615e      	str	r6, [r3, #20]
   b928c:	6125      	str	r5, [r4, #16]
   b928e:	4620      	mov	r0, r4
   b9290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9294:	000ba2d0 	.word	0x000ba2d0
   b9298:	000ba37c 	.word	0x000ba37c

000b929c <__s2b>:
   b929c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b92a0:	460c      	mov	r4, r1
   b92a2:	4615      	mov	r5, r2
   b92a4:	461f      	mov	r7, r3
   b92a6:	2209      	movs	r2, #9
   b92a8:	3308      	adds	r3, #8
   b92aa:	4606      	mov	r6, r0
   b92ac:	fb93 f3f2 	sdiv	r3, r3, r2
   b92b0:	2100      	movs	r1, #0
   b92b2:	2201      	movs	r2, #1
   b92b4:	429a      	cmp	r2, r3
   b92b6:	db09      	blt.n	b92cc <__s2b+0x30>
   b92b8:	4630      	mov	r0, r6
   b92ba:	f7ff ff47 	bl	b914c <_Balloc>
   b92be:	b940      	cbnz	r0, b92d2 <__s2b+0x36>
   b92c0:	4602      	mov	r2, r0
   b92c2:	4b19      	ldr	r3, [pc, #100]	; (b9328 <__s2b+0x8c>)
   b92c4:	4819      	ldr	r0, [pc, #100]	; (b932c <__s2b+0x90>)
   b92c6:	21ce      	movs	r1, #206	; 0xce
   b92c8:	f7fc f90e 	bl	b54e8 <__assert_func>
   b92cc:	0052      	lsls	r2, r2, #1
   b92ce:	3101      	adds	r1, #1
   b92d0:	e7f0      	b.n	b92b4 <__s2b+0x18>
   b92d2:	9b08      	ldr	r3, [sp, #32]
   b92d4:	6143      	str	r3, [r0, #20]
   b92d6:	2d09      	cmp	r5, #9
   b92d8:	f04f 0301 	mov.w	r3, #1
   b92dc:	6103      	str	r3, [r0, #16]
   b92de:	dd16      	ble.n	b930e <__s2b+0x72>
   b92e0:	f104 0909 	add.w	r9, r4, #9
   b92e4:	46c8      	mov	r8, r9
   b92e6:	442c      	add	r4, r5
   b92e8:	f818 3b01 	ldrb.w	r3, [r8], #1
   b92ec:	4601      	mov	r1, r0
   b92ee:	3b30      	subs	r3, #48	; 0x30
   b92f0:	220a      	movs	r2, #10
   b92f2:	4630      	mov	r0, r6
   b92f4:	f7ff ff8c 	bl	b9210 <__multadd>
   b92f8:	45a0      	cmp	r8, r4
   b92fa:	d1f5      	bne.n	b92e8 <__s2b+0x4c>
   b92fc:	f1a5 0408 	sub.w	r4, r5, #8
   b9300:	444c      	add	r4, r9
   b9302:	1b2d      	subs	r5, r5, r4
   b9304:	1963      	adds	r3, r4, r5
   b9306:	42bb      	cmp	r3, r7
   b9308:	db04      	blt.n	b9314 <__s2b+0x78>
   b930a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b930e:	340a      	adds	r4, #10
   b9310:	2509      	movs	r5, #9
   b9312:	e7f6      	b.n	b9302 <__s2b+0x66>
   b9314:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9318:	4601      	mov	r1, r0
   b931a:	3b30      	subs	r3, #48	; 0x30
   b931c:	220a      	movs	r2, #10
   b931e:	4630      	mov	r0, r6
   b9320:	f7ff ff76 	bl	b9210 <__multadd>
   b9324:	e7ee      	b.n	b9304 <__s2b+0x68>
   b9326:	bf00      	nop
   b9328:	000ba2d0 	.word	0x000ba2d0
   b932c:	000ba37c 	.word	0x000ba37c

000b9330 <__hi0bits>:
   b9330:	0c03      	lsrs	r3, r0, #16
   b9332:	041b      	lsls	r3, r3, #16
   b9334:	b9d3      	cbnz	r3, b936c <__hi0bits+0x3c>
   b9336:	0400      	lsls	r0, r0, #16
   b9338:	2310      	movs	r3, #16
   b933a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b933e:	bf04      	itt	eq
   b9340:	0200      	lsleq	r0, r0, #8
   b9342:	3308      	addeq	r3, #8
   b9344:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9348:	bf04      	itt	eq
   b934a:	0100      	lsleq	r0, r0, #4
   b934c:	3304      	addeq	r3, #4
   b934e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9352:	bf04      	itt	eq
   b9354:	0080      	lsleq	r0, r0, #2
   b9356:	3302      	addeq	r3, #2
   b9358:	2800      	cmp	r0, #0
   b935a:	db05      	blt.n	b9368 <__hi0bits+0x38>
   b935c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9360:	f103 0301 	add.w	r3, r3, #1
   b9364:	bf08      	it	eq
   b9366:	2320      	moveq	r3, #32
   b9368:	4618      	mov	r0, r3
   b936a:	4770      	bx	lr
   b936c:	2300      	movs	r3, #0
   b936e:	e7e4      	b.n	b933a <__hi0bits+0xa>

000b9370 <__lo0bits>:
   b9370:	6803      	ldr	r3, [r0, #0]
   b9372:	f013 0207 	ands.w	r2, r3, #7
   b9376:	4601      	mov	r1, r0
   b9378:	d00b      	beq.n	b9392 <__lo0bits+0x22>
   b937a:	07da      	lsls	r2, r3, #31
   b937c:	d423      	bmi.n	b93c6 <__lo0bits+0x56>
   b937e:	0798      	lsls	r0, r3, #30
   b9380:	bf49      	itett	mi
   b9382:	085b      	lsrmi	r3, r3, #1
   b9384:	089b      	lsrpl	r3, r3, #2
   b9386:	2001      	movmi	r0, #1
   b9388:	600b      	strmi	r3, [r1, #0]
   b938a:	bf5c      	itt	pl
   b938c:	600b      	strpl	r3, [r1, #0]
   b938e:	2002      	movpl	r0, #2
   b9390:	4770      	bx	lr
   b9392:	b298      	uxth	r0, r3
   b9394:	b9a8      	cbnz	r0, b93c2 <__lo0bits+0x52>
   b9396:	0c1b      	lsrs	r3, r3, #16
   b9398:	2010      	movs	r0, #16
   b939a:	b2da      	uxtb	r2, r3
   b939c:	b90a      	cbnz	r2, b93a2 <__lo0bits+0x32>
   b939e:	3008      	adds	r0, #8
   b93a0:	0a1b      	lsrs	r3, r3, #8
   b93a2:	071a      	lsls	r2, r3, #28
   b93a4:	bf04      	itt	eq
   b93a6:	091b      	lsreq	r3, r3, #4
   b93a8:	3004      	addeq	r0, #4
   b93aa:	079a      	lsls	r2, r3, #30
   b93ac:	bf04      	itt	eq
   b93ae:	089b      	lsreq	r3, r3, #2
   b93b0:	3002      	addeq	r0, #2
   b93b2:	07da      	lsls	r2, r3, #31
   b93b4:	d403      	bmi.n	b93be <__lo0bits+0x4e>
   b93b6:	085b      	lsrs	r3, r3, #1
   b93b8:	f100 0001 	add.w	r0, r0, #1
   b93bc:	d005      	beq.n	b93ca <__lo0bits+0x5a>
   b93be:	600b      	str	r3, [r1, #0]
   b93c0:	4770      	bx	lr
   b93c2:	4610      	mov	r0, r2
   b93c4:	e7e9      	b.n	b939a <__lo0bits+0x2a>
   b93c6:	2000      	movs	r0, #0
   b93c8:	4770      	bx	lr
   b93ca:	2020      	movs	r0, #32
   b93cc:	4770      	bx	lr
	...

000b93d0 <__i2b>:
   b93d0:	b510      	push	{r4, lr}
   b93d2:	460c      	mov	r4, r1
   b93d4:	2101      	movs	r1, #1
   b93d6:	f7ff feb9 	bl	b914c <_Balloc>
   b93da:	4602      	mov	r2, r0
   b93dc:	b928      	cbnz	r0, b93ea <__i2b+0x1a>
   b93de:	4b05      	ldr	r3, [pc, #20]	; (b93f4 <__i2b+0x24>)
   b93e0:	4805      	ldr	r0, [pc, #20]	; (b93f8 <__i2b+0x28>)
   b93e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b93e6:	f7fc f87f 	bl	b54e8 <__assert_func>
   b93ea:	2301      	movs	r3, #1
   b93ec:	6144      	str	r4, [r0, #20]
   b93ee:	6103      	str	r3, [r0, #16]
   b93f0:	bd10      	pop	{r4, pc}
   b93f2:	bf00      	nop
   b93f4:	000ba2d0 	.word	0x000ba2d0
   b93f8:	000ba37c 	.word	0x000ba37c

000b93fc <__multiply>:
   b93fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9400:	4691      	mov	r9, r2
   b9402:	690a      	ldr	r2, [r1, #16]
   b9404:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9408:	429a      	cmp	r2, r3
   b940a:	bfb8      	it	lt
   b940c:	460b      	movlt	r3, r1
   b940e:	460c      	mov	r4, r1
   b9410:	bfbc      	itt	lt
   b9412:	464c      	movlt	r4, r9
   b9414:	4699      	movlt	r9, r3
   b9416:	6927      	ldr	r7, [r4, #16]
   b9418:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b941c:	68a3      	ldr	r3, [r4, #8]
   b941e:	6861      	ldr	r1, [r4, #4]
   b9420:	eb07 060a 	add.w	r6, r7, sl
   b9424:	42b3      	cmp	r3, r6
   b9426:	b085      	sub	sp, #20
   b9428:	bfb8      	it	lt
   b942a:	3101      	addlt	r1, #1
   b942c:	f7ff fe8e 	bl	b914c <_Balloc>
   b9430:	b930      	cbnz	r0, b9440 <__multiply+0x44>
   b9432:	4602      	mov	r2, r0
   b9434:	4b44      	ldr	r3, [pc, #272]	; (b9548 <__multiply+0x14c>)
   b9436:	4845      	ldr	r0, [pc, #276]	; (b954c <__multiply+0x150>)
   b9438:	f240 115d 	movw	r1, #349	; 0x15d
   b943c:	f7fc f854 	bl	b54e8 <__assert_func>
   b9440:	f100 0514 	add.w	r5, r0, #20
   b9444:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9448:	462b      	mov	r3, r5
   b944a:	2200      	movs	r2, #0
   b944c:	4543      	cmp	r3, r8
   b944e:	d321      	bcc.n	b9494 <__multiply+0x98>
   b9450:	f104 0314 	add.w	r3, r4, #20
   b9454:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9458:	f109 0314 	add.w	r3, r9, #20
   b945c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9460:	9202      	str	r2, [sp, #8]
   b9462:	1b3a      	subs	r2, r7, r4
   b9464:	3a15      	subs	r2, #21
   b9466:	f022 0203 	bic.w	r2, r2, #3
   b946a:	3204      	adds	r2, #4
   b946c:	f104 0115 	add.w	r1, r4, #21
   b9470:	428f      	cmp	r7, r1
   b9472:	bf38      	it	cc
   b9474:	2204      	movcc	r2, #4
   b9476:	9201      	str	r2, [sp, #4]
   b9478:	9a02      	ldr	r2, [sp, #8]
   b947a:	9303      	str	r3, [sp, #12]
   b947c:	429a      	cmp	r2, r3
   b947e:	d80c      	bhi.n	b949a <__multiply+0x9e>
   b9480:	2e00      	cmp	r6, #0
   b9482:	dd03      	ble.n	b948c <__multiply+0x90>
   b9484:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9488:	2b00      	cmp	r3, #0
   b948a:	d05a      	beq.n	b9542 <__multiply+0x146>
   b948c:	6106      	str	r6, [r0, #16]
   b948e:	b005      	add	sp, #20
   b9490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9494:	f843 2b04 	str.w	r2, [r3], #4
   b9498:	e7d8      	b.n	b944c <__multiply+0x50>
   b949a:	f8b3 a000 	ldrh.w	sl, [r3]
   b949e:	f1ba 0f00 	cmp.w	sl, #0
   b94a2:	d024      	beq.n	b94ee <__multiply+0xf2>
   b94a4:	f104 0e14 	add.w	lr, r4, #20
   b94a8:	46a9      	mov	r9, r5
   b94aa:	f04f 0c00 	mov.w	ip, #0
   b94ae:	f85e 2b04 	ldr.w	r2, [lr], #4
   b94b2:	f8d9 1000 	ldr.w	r1, [r9]
   b94b6:	fa1f fb82 	uxth.w	fp, r2
   b94ba:	b289      	uxth	r1, r1
   b94bc:	fb0a 110b 	mla	r1, sl, fp, r1
   b94c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b94c4:	f8d9 2000 	ldr.w	r2, [r9]
   b94c8:	4461      	add	r1, ip
   b94ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b94ce:	fb0a c20b 	mla	r2, sl, fp, ip
   b94d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b94d6:	b289      	uxth	r1, r1
   b94d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b94dc:	4577      	cmp	r7, lr
   b94de:	f849 1b04 	str.w	r1, [r9], #4
   b94e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b94e6:	d8e2      	bhi.n	b94ae <__multiply+0xb2>
   b94e8:	9a01      	ldr	r2, [sp, #4]
   b94ea:	f845 c002 	str.w	ip, [r5, r2]
   b94ee:	9a03      	ldr	r2, [sp, #12]
   b94f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b94f4:	3304      	adds	r3, #4
   b94f6:	f1b9 0f00 	cmp.w	r9, #0
   b94fa:	d020      	beq.n	b953e <__multiply+0x142>
   b94fc:	6829      	ldr	r1, [r5, #0]
   b94fe:	f104 0c14 	add.w	ip, r4, #20
   b9502:	46ae      	mov	lr, r5
   b9504:	f04f 0a00 	mov.w	sl, #0
   b9508:	f8bc b000 	ldrh.w	fp, [ip]
   b950c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9510:	fb09 220b 	mla	r2, r9, fp, r2
   b9514:	4492      	add	sl, r2
   b9516:	b289      	uxth	r1, r1
   b9518:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b951c:	f84e 1b04 	str.w	r1, [lr], #4
   b9520:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9524:	f8be 1000 	ldrh.w	r1, [lr]
   b9528:	0c12      	lsrs	r2, r2, #16
   b952a:	fb09 1102 	mla	r1, r9, r2, r1
   b952e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9532:	4567      	cmp	r7, ip
   b9534:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9538:	d8e6      	bhi.n	b9508 <__multiply+0x10c>
   b953a:	9a01      	ldr	r2, [sp, #4]
   b953c:	50a9      	str	r1, [r5, r2]
   b953e:	3504      	adds	r5, #4
   b9540:	e79a      	b.n	b9478 <__multiply+0x7c>
   b9542:	3e01      	subs	r6, #1
   b9544:	e79c      	b.n	b9480 <__multiply+0x84>
   b9546:	bf00      	nop
   b9548:	000ba2d0 	.word	0x000ba2d0
   b954c:	000ba37c 	.word	0x000ba37c

000b9550 <__pow5mult>:
   b9550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9554:	4615      	mov	r5, r2
   b9556:	f012 0203 	ands.w	r2, r2, #3
   b955a:	4606      	mov	r6, r0
   b955c:	460f      	mov	r7, r1
   b955e:	d007      	beq.n	b9570 <__pow5mult+0x20>
   b9560:	4c25      	ldr	r4, [pc, #148]	; (b95f8 <__pow5mult+0xa8>)
   b9562:	3a01      	subs	r2, #1
   b9564:	2300      	movs	r3, #0
   b9566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b956a:	f7ff fe51 	bl	b9210 <__multadd>
   b956e:	4607      	mov	r7, r0
   b9570:	10ad      	asrs	r5, r5, #2
   b9572:	d03d      	beq.n	b95f0 <__pow5mult+0xa0>
   b9574:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9576:	b97c      	cbnz	r4, b9598 <__pow5mult+0x48>
   b9578:	2010      	movs	r0, #16
   b957a:	f7fb ff6d 	bl	b5458 <malloc>
   b957e:	4602      	mov	r2, r0
   b9580:	6270      	str	r0, [r6, #36]	; 0x24
   b9582:	b928      	cbnz	r0, b9590 <__pow5mult+0x40>
   b9584:	4b1d      	ldr	r3, [pc, #116]	; (b95fc <__pow5mult+0xac>)
   b9586:	481e      	ldr	r0, [pc, #120]	; (b9600 <__pow5mult+0xb0>)
   b9588:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b958c:	f7fb ffac 	bl	b54e8 <__assert_func>
   b9590:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9594:	6004      	str	r4, [r0, #0]
   b9596:	60c4      	str	r4, [r0, #12]
   b9598:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b959c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b95a0:	b94c      	cbnz	r4, b95b6 <__pow5mult+0x66>
   b95a2:	f240 2171 	movw	r1, #625	; 0x271
   b95a6:	4630      	mov	r0, r6
   b95a8:	f7ff ff12 	bl	b93d0 <__i2b>
   b95ac:	2300      	movs	r3, #0
   b95ae:	f8c8 0008 	str.w	r0, [r8, #8]
   b95b2:	4604      	mov	r4, r0
   b95b4:	6003      	str	r3, [r0, #0]
   b95b6:	f04f 0900 	mov.w	r9, #0
   b95ba:	07eb      	lsls	r3, r5, #31
   b95bc:	d50a      	bpl.n	b95d4 <__pow5mult+0x84>
   b95be:	4639      	mov	r1, r7
   b95c0:	4622      	mov	r2, r4
   b95c2:	4630      	mov	r0, r6
   b95c4:	f7ff ff1a 	bl	b93fc <__multiply>
   b95c8:	4639      	mov	r1, r7
   b95ca:	4680      	mov	r8, r0
   b95cc:	4630      	mov	r0, r6
   b95ce:	f7ff fdfd 	bl	b91cc <_Bfree>
   b95d2:	4647      	mov	r7, r8
   b95d4:	106d      	asrs	r5, r5, #1
   b95d6:	d00b      	beq.n	b95f0 <__pow5mult+0xa0>
   b95d8:	6820      	ldr	r0, [r4, #0]
   b95da:	b938      	cbnz	r0, b95ec <__pow5mult+0x9c>
   b95dc:	4622      	mov	r2, r4
   b95de:	4621      	mov	r1, r4
   b95e0:	4630      	mov	r0, r6
   b95e2:	f7ff ff0b 	bl	b93fc <__multiply>
   b95e6:	6020      	str	r0, [r4, #0]
   b95e8:	f8c0 9000 	str.w	r9, [r0]
   b95ec:	4604      	mov	r4, r0
   b95ee:	e7e4      	b.n	b95ba <__pow5mult+0x6a>
   b95f0:	4638      	mov	r0, r7
   b95f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b95f6:	bf00      	nop
   b95f8:	000ba4f0 	.word	0x000ba4f0
   b95fc:	000ba059 	.word	0x000ba059
   b9600:	000ba37c 	.word	0x000ba37c

000b9604 <__lshift>:
   b9604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9608:	460c      	mov	r4, r1
   b960a:	6849      	ldr	r1, [r1, #4]
   b960c:	6923      	ldr	r3, [r4, #16]
   b960e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9612:	68a3      	ldr	r3, [r4, #8]
   b9614:	4607      	mov	r7, r0
   b9616:	4691      	mov	r9, r2
   b9618:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b961c:	f108 0601 	add.w	r6, r8, #1
   b9620:	42b3      	cmp	r3, r6
   b9622:	db0b      	blt.n	b963c <__lshift+0x38>
   b9624:	4638      	mov	r0, r7
   b9626:	f7ff fd91 	bl	b914c <_Balloc>
   b962a:	4605      	mov	r5, r0
   b962c:	b948      	cbnz	r0, b9642 <__lshift+0x3e>
   b962e:	4602      	mov	r2, r0
   b9630:	4b2a      	ldr	r3, [pc, #168]	; (b96dc <__lshift+0xd8>)
   b9632:	482b      	ldr	r0, [pc, #172]	; (b96e0 <__lshift+0xdc>)
   b9634:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9638:	f7fb ff56 	bl	b54e8 <__assert_func>
   b963c:	3101      	adds	r1, #1
   b963e:	005b      	lsls	r3, r3, #1
   b9640:	e7ee      	b.n	b9620 <__lshift+0x1c>
   b9642:	2300      	movs	r3, #0
   b9644:	f100 0114 	add.w	r1, r0, #20
   b9648:	f100 0210 	add.w	r2, r0, #16
   b964c:	4618      	mov	r0, r3
   b964e:	4553      	cmp	r3, sl
   b9650:	db37      	blt.n	b96c2 <__lshift+0xbe>
   b9652:	6920      	ldr	r0, [r4, #16]
   b9654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9658:	f104 0314 	add.w	r3, r4, #20
   b965c:	f019 091f 	ands.w	r9, r9, #31
   b9660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9664:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9668:	d02f      	beq.n	b96ca <__lshift+0xc6>
   b966a:	f1c9 0e20 	rsb	lr, r9, #32
   b966e:	468a      	mov	sl, r1
   b9670:	f04f 0c00 	mov.w	ip, #0
   b9674:	681a      	ldr	r2, [r3, #0]
   b9676:	fa02 f209 	lsl.w	r2, r2, r9
   b967a:	ea42 020c 	orr.w	r2, r2, ip
   b967e:	f84a 2b04 	str.w	r2, [sl], #4
   b9682:	f853 2b04 	ldr.w	r2, [r3], #4
   b9686:	4298      	cmp	r0, r3
   b9688:	fa22 fc0e 	lsr.w	ip, r2, lr
   b968c:	d8f2      	bhi.n	b9674 <__lshift+0x70>
   b968e:	1b03      	subs	r3, r0, r4
   b9690:	3b15      	subs	r3, #21
   b9692:	f023 0303 	bic.w	r3, r3, #3
   b9696:	3304      	adds	r3, #4
   b9698:	f104 0215 	add.w	r2, r4, #21
   b969c:	4290      	cmp	r0, r2
   b969e:	bf38      	it	cc
   b96a0:	2304      	movcc	r3, #4
   b96a2:	f841 c003 	str.w	ip, [r1, r3]
   b96a6:	f1bc 0f00 	cmp.w	ip, #0
   b96aa:	d001      	beq.n	b96b0 <__lshift+0xac>
   b96ac:	f108 0602 	add.w	r6, r8, #2
   b96b0:	3e01      	subs	r6, #1
   b96b2:	4638      	mov	r0, r7
   b96b4:	612e      	str	r6, [r5, #16]
   b96b6:	4621      	mov	r1, r4
   b96b8:	f7ff fd88 	bl	b91cc <_Bfree>
   b96bc:	4628      	mov	r0, r5
   b96be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b96c2:	f842 0f04 	str.w	r0, [r2, #4]!
   b96c6:	3301      	adds	r3, #1
   b96c8:	e7c1      	b.n	b964e <__lshift+0x4a>
   b96ca:	3904      	subs	r1, #4
   b96cc:	f853 2b04 	ldr.w	r2, [r3], #4
   b96d0:	f841 2f04 	str.w	r2, [r1, #4]!
   b96d4:	4298      	cmp	r0, r3
   b96d6:	d8f9      	bhi.n	b96cc <__lshift+0xc8>
   b96d8:	e7ea      	b.n	b96b0 <__lshift+0xac>
   b96da:	bf00      	nop
   b96dc:	000ba2d0 	.word	0x000ba2d0
   b96e0:	000ba37c 	.word	0x000ba37c

000b96e4 <__mcmp>:
   b96e4:	b530      	push	{r4, r5, lr}
   b96e6:	6902      	ldr	r2, [r0, #16]
   b96e8:	690c      	ldr	r4, [r1, #16]
   b96ea:	1b12      	subs	r2, r2, r4
   b96ec:	d10e      	bne.n	b970c <__mcmp+0x28>
   b96ee:	f100 0314 	add.w	r3, r0, #20
   b96f2:	3114      	adds	r1, #20
   b96f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b96f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b96fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9700:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9704:	42a5      	cmp	r5, r4
   b9706:	d003      	beq.n	b9710 <__mcmp+0x2c>
   b9708:	d305      	bcc.n	b9716 <__mcmp+0x32>
   b970a:	2201      	movs	r2, #1
   b970c:	4610      	mov	r0, r2
   b970e:	bd30      	pop	{r4, r5, pc}
   b9710:	4283      	cmp	r3, r0
   b9712:	d3f3      	bcc.n	b96fc <__mcmp+0x18>
   b9714:	e7fa      	b.n	b970c <__mcmp+0x28>
   b9716:	f04f 32ff 	mov.w	r2, #4294967295
   b971a:	e7f7      	b.n	b970c <__mcmp+0x28>

000b971c <__mdiff>:
   b971c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9720:	460c      	mov	r4, r1
   b9722:	4606      	mov	r6, r0
   b9724:	4611      	mov	r1, r2
   b9726:	4620      	mov	r0, r4
   b9728:	4690      	mov	r8, r2
   b972a:	f7ff ffdb 	bl	b96e4 <__mcmp>
   b972e:	1e05      	subs	r5, r0, #0
   b9730:	d110      	bne.n	b9754 <__mdiff+0x38>
   b9732:	4629      	mov	r1, r5
   b9734:	4630      	mov	r0, r6
   b9736:	f7ff fd09 	bl	b914c <_Balloc>
   b973a:	b930      	cbnz	r0, b974a <__mdiff+0x2e>
   b973c:	4b3a      	ldr	r3, [pc, #232]	; (b9828 <__mdiff+0x10c>)
   b973e:	4602      	mov	r2, r0
   b9740:	f240 2132 	movw	r1, #562	; 0x232
   b9744:	4839      	ldr	r0, [pc, #228]	; (b982c <__mdiff+0x110>)
   b9746:	f7fb fecf 	bl	b54e8 <__assert_func>
   b974a:	2301      	movs	r3, #1
   b974c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9754:	bfa4      	itt	ge
   b9756:	4643      	movge	r3, r8
   b9758:	46a0      	movge	r8, r4
   b975a:	4630      	mov	r0, r6
   b975c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9760:	bfa6      	itte	ge
   b9762:	461c      	movge	r4, r3
   b9764:	2500      	movge	r5, #0
   b9766:	2501      	movlt	r5, #1
   b9768:	f7ff fcf0 	bl	b914c <_Balloc>
   b976c:	b920      	cbnz	r0, b9778 <__mdiff+0x5c>
   b976e:	4b2e      	ldr	r3, [pc, #184]	; (b9828 <__mdiff+0x10c>)
   b9770:	4602      	mov	r2, r0
   b9772:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9776:	e7e5      	b.n	b9744 <__mdiff+0x28>
   b9778:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b977c:	6926      	ldr	r6, [r4, #16]
   b977e:	60c5      	str	r5, [r0, #12]
   b9780:	f104 0914 	add.w	r9, r4, #20
   b9784:	f108 0514 	add.w	r5, r8, #20
   b9788:	f100 0e14 	add.w	lr, r0, #20
   b978c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9790:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b9794:	f108 0210 	add.w	r2, r8, #16
   b9798:	46f2      	mov	sl, lr
   b979a:	2100      	movs	r1, #0
   b979c:	f859 3b04 	ldr.w	r3, [r9], #4
   b97a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b97a4:	fa1f f883 	uxth.w	r8, r3
   b97a8:	fa11 f18b 	uxtah	r1, r1, fp
   b97ac:	0c1b      	lsrs	r3, r3, #16
   b97ae:	eba1 0808 	sub.w	r8, r1, r8
   b97b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b97b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b97ba:	fa1f f888 	uxth.w	r8, r8
   b97be:	1419      	asrs	r1, r3, #16
   b97c0:	454e      	cmp	r6, r9
   b97c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b97c6:	f84a 3b04 	str.w	r3, [sl], #4
   b97ca:	d8e7      	bhi.n	b979c <__mdiff+0x80>
   b97cc:	1b33      	subs	r3, r6, r4
   b97ce:	3b15      	subs	r3, #21
   b97d0:	f023 0303 	bic.w	r3, r3, #3
   b97d4:	3304      	adds	r3, #4
   b97d6:	3415      	adds	r4, #21
   b97d8:	42a6      	cmp	r6, r4
   b97da:	bf38      	it	cc
   b97dc:	2304      	movcc	r3, #4
   b97de:	441d      	add	r5, r3
   b97e0:	4473      	add	r3, lr
   b97e2:	469e      	mov	lr, r3
   b97e4:	462e      	mov	r6, r5
   b97e6:	4566      	cmp	r6, ip
   b97e8:	d30e      	bcc.n	b9808 <__mdiff+0xec>
   b97ea:	f10c 0203 	add.w	r2, ip, #3
   b97ee:	1b52      	subs	r2, r2, r5
   b97f0:	f022 0203 	bic.w	r2, r2, #3
   b97f4:	3d03      	subs	r5, #3
   b97f6:	45ac      	cmp	ip, r5
   b97f8:	bf38      	it	cc
   b97fa:	2200      	movcc	r2, #0
   b97fc:	441a      	add	r2, r3
   b97fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b9802:	b17b      	cbz	r3, b9824 <__mdiff+0x108>
   b9804:	6107      	str	r7, [r0, #16]
   b9806:	e7a3      	b.n	b9750 <__mdiff+0x34>
   b9808:	f856 8b04 	ldr.w	r8, [r6], #4
   b980c:	fa11 f288 	uxtah	r2, r1, r8
   b9810:	1414      	asrs	r4, r2, #16
   b9812:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b9816:	b292      	uxth	r2, r2
   b9818:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b981c:	f84e 2b04 	str.w	r2, [lr], #4
   b9820:	1421      	asrs	r1, r4, #16
   b9822:	e7e0      	b.n	b97e6 <__mdiff+0xca>
   b9824:	3f01      	subs	r7, #1
   b9826:	e7ea      	b.n	b97fe <__mdiff+0xe2>
   b9828:	000ba2d0 	.word	0x000ba2d0
   b982c:	000ba37c 	.word	0x000ba37c

000b9830 <__ulp>:
   b9830:	b082      	sub	sp, #8
   b9832:	ed8d 0b00 	vstr	d0, [sp]
   b9836:	9b01      	ldr	r3, [sp, #4]
   b9838:	4912      	ldr	r1, [pc, #72]	; (b9884 <__ulp+0x54>)
   b983a:	4019      	ands	r1, r3
   b983c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b9840:	2900      	cmp	r1, #0
   b9842:	dd05      	ble.n	b9850 <__ulp+0x20>
   b9844:	2200      	movs	r2, #0
   b9846:	460b      	mov	r3, r1
   b9848:	ec43 2b10 	vmov	d0, r2, r3
   b984c:	b002      	add	sp, #8
   b984e:	4770      	bx	lr
   b9850:	4249      	negs	r1, r1
   b9852:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b9856:	ea4f 5021 	mov.w	r0, r1, asr #20
   b985a:	f04f 0200 	mov.w	r2, #0
   b985e:	f04f 0300 	mov.w	r3, #0
   b9862:	da04      	bge.n	b986e <__ulp+0x3e>
   b9864:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b9868:	fa41 f300 	asr.w	r3, r1, r0
   b986c:	e7ec      	b.n	b9848 <__ulp+0x18>
   b986e:	f1a0 0114 	sub.w	r1, r0, #20
   b9872:	291e      	cmp	r1, #30
   b9874:	bfda      	itte	le
   b9876:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b987a:	fa20 f101 	lsrle.w	r1, r0, r1
   b987e:	2101      	movgt	r1, #1
   b9880:	460a      	mov	r2, r1
   b9882:	e7e1      	b.n	b9848 <__ulp+0x18>
   b9884:	7ff00000 	.word	0x7ff00000

000b9888 <__b2d>:
   b9888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b988a:	6905      	ldr	r5, [r0, #16]
   b988c:	f100 0714 	add.w	r7, r0, #20
   b9890:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b9894:	1f2e      	subs	r6, r5, #4
   b9896:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b989a:	4620      	mov	r0, r4
   b989c:	f7ff fd48 	bl	b9330 <__hi0bits>
   b98a0:	f1c0 0320 	rsb	r3, r0, #32
   b98a4:	280a      	cmp	r0, #10
   b98a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; b9924 <__b2d+0x9c>
   b98aa:	600b      	str	r3, [r1, #0]
   b98ac:	dc14      	bgt.n	b98d8 <__b2d+0x50>
   b98ae:	f1c0 0e0b 	rsb	lr, r0, #11
   b98b2:	fa24 f10e 	lsr.w	r1, r4, lr
   b98b6:	42b7      	cmp	r7, r6
   b98b8:	ea41 030c 	orr.w	r3, r1, ip
   b98bc:	bf34      	ite	cc
   b98be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b98c2:	2100      	movcs	r1, #0
   b98c4:	3015      	adds	r0, #21
   b98c6:	fa04 f000 	lsl.w	r0, r4, r0
   b98ca:	fa21 f10e 	lsr.w	r1, r1, lr
   b98ce:	ea40 0201 	orr.w	r2, r0, r1
   b98d2:	ec43 2b10 	vmov	d0, r2, r3
   b98d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b98d8:	42b7      	cmp	r7, r6
   b98da:	bf3a      	itte	cc
   b98dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b98e0:	f1a5 0608 	subcc.w	r6, r5, #8
   b98e4:	2100      	movcs	r1, #0
   b98e6:	380b      	subs	r0, #11
   b98e8:	d017      	beq.n	b991a <__b2d+0x92>
   b98ea:	f1c0 0c20 	rsb	ip, r0, #32
   b98ee:	fa04 f500 	lsl.w	r5, r4, r0
   b98f2:	42be      	cmp	r6, r7
   b98f4:	fa21 f40c 	lsr.w	r4, r1, ip
   b98f8:	ea45 0504 	orr.w	r5, r5, r4
   b98fc:	bf8c      	ite	hi
   b98fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b9902:	2400      	movls	r4, #0
   b9904:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b9908:	fa01 f000 	lsl.w	r0, r1, r0
   b990c:	fa24 f40c 	lsr.w	r4, r4, ip
   b9910:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b9914:	ea40 0204 	orr.w	r2, r0, r4
   b9918:	e7db      	b.n	b98d2 <__b2d+0x4a>
   b991a:	ea44 030c 	orr.w	r3, r4, ip
   b991e:	460a      	mov	r2, r1
   b9920:	e7d7      	b.n	b98d2 <__b2d+0x4a>
   b9922:	bf00      	nop
   b9924:	3ff00000 	.word	0x3ff00000

000b9928 <__d2b>:
   b9928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b992c:	4689      	mov	r9, r1
   b992e:	2101      	movs	r1, #1
   b9930:	ec57 6b10 	vmov	r6, r7, d0
   b9934:	4690      	mov	r8, r2
   b9936:	f7ff fc09 	bl	b914c <_Balloc>
   b993a:	4604      	mov	r4, r0
   b993c:	b930      	cbnz	r0, b994c <__d2b+0x24>
   b993e:	4602      	mov	r2, r0
   b9940:	4b25      	ldr	r3, [pc, #148]	; (b99d8 <__d2b+0xb0>)
   b9942:	4826      	ldr	r0, [pc, #152]	; (b99dc <__d2b+0xb4>)
   b9944:	f240 310a 	movw	r1, #778	; 0x30a
   b9948:	f7fb fdce 	bl	b54e8 <__assert_func>
   b994c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b9950:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b9954:	bb35      	cbnz	r5, b99a4 <__d2b+0x7c>
   b9956:	2e00      	cmp	r6, #0
   b9958:	9301      	str	r3, [sp, #4]
   b995a:	d028      	beq.n	b99ae <__d2b+0x86>
   b995c:	4668      	mov	r0, sp
   b995e:	9600      	str	r6, [sp, #0]
   b9960:	f7ff fd06 	bl	b9370 <__lo0bits>
   b9964:	9900      	ldr	r1, [sp, #0]
   b9966:	b300      	cbz	r0, b99aa <__d2b+0x82>
   b9968:	9a01      	ldr	r2, [sp, #4]
   b996a:	f1c0 0320 	rsb	r3, r0, #32
   b996e:	fa02 f303 	lsl.w	r3, r2, r3
   b9972:	430b      	orrs	r3, r1
   b9974:	40c2      	lsrs	r2, r0
   b9976:	6163      	str	r3, [r4, #20]
   b9978:	9201      	str	r2, [sp, #4]
   b997a:	9b01      	ldr	r3, [sp, #4]
   b997c:	61a3      	str	r3, [r4, #24]
   b997e:	2b00      	cmp	r3, #0
   b9980:	bf14      	ite	ne
   b9982:	2202      	movne	r2, #2
   b9984:	2201      	moveq	r2, #1
   b9986:	6122      	str	r2, [r4, #16]
   b9988:	b1d5      	cbz	r5, b99c0 <__d2b+0x98>
   b998a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b998e:	4405      	add	r5, r0
   b9990:	f8c9 5000 	str.w	r5, [r9]
   b9994:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b9998:	f8c8 0000 	str.w	r0, [r8]
   b999c:	4620      	mov	r0, r4
   b999e:	b003      	add	sp, #12
   b99a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b99a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b99a8:	e7d5      	b.n	b9956 <__d2b+0x2e>
   b99aa:	6161      	str	r1, [r4, #20]
   b99ac:	e7e5      	b.n	b997a <__d2b+0x52>
   b99ae:	a801      	add	r0, sp, #4
   b99b0:	f7ff fcde 	bl	b9370 <__lo0bits>
   b99b4:	9b01      	ldr	r3, [sp, #4]
   b99b6:	6163      	str	r3, [r4, #20]
   b99b8:	2201      	movs	r2, #1
   b99ba:	6122      	str	r2, [r4, #16]
   b99bc:	3020      	adds	r0, #32
   b99be:	e7e3      	b.n	b9988 <__d2b+0x60>
   b99c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b99c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b99c8:	f8c9 0000 	str.w	r0, [r9]
   b99cc:	6918      	ldr	r0, [r3, #16]
   b99ce:	f7ff fcaf 	bl	b9330 <__hi0bits>
   b99d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b99d6:	e7df      	b.n	b9998 <__d2b+0x70>
   b99d8:	000ba2d0 	.word	0x000ba2d0
   b99dc:	000ba37c 	.word	0x000ba37c

000b99e0 <__ratio>:
   b99e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b99e4:	4688      	mov	r8, r1
   b99e6:	4669      	mov	r1, sp
   b99e8:	4681      	mov	r9, r0
   b99ea:	f7ff ff4d 	bl	b9888 <__b2d>
   b99ee:	a901      	add	r1, sp, #4
   b99f0:	4640      	mov	r0, r8
   b99f2:	ec55 4b10 	vmov	r4, r5, d0
   b99f6:	f7ff ff47 	bl	b9888 <__b2d>
   b99fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b99fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b9a02:	eba3 0c02 	sub.w	ip, r3, r2
   b9a06:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9a0a:	1a9b      	subs	r3, r3, r2
   b9a0c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b9a10:	ec51 0b10 	vmov	r0, r1, d0
   b9a14:	2b00      	cmp	r3, #0
   b9a16:	bfd6      	itet	le
   b9a18:	460a      	movle	r2, r1
   b9a1a:	462a      	movgt	r2, r5
   b9a1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b9a20:	468b      	mov	fp, r1
   b9a22:	462f      	mov	r7, r5
   b9a24:	bfd4      	ite	le
   b9a26:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b9a2a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b9a2e:	4620      	mov	r0, r4
   b9a30:	ee10 2a10 	vmov	r2, s0
   b9a34:	465b      	mov	r3, fp
   b9a36:	4639      	mov	r1, r7
   b9a38:	f7fd fe1a 	bl	b7670 <__aeabi_ddiv>
   b9a3c:	ec41 0b10 	vmov	d0, r0, r1
   b9a40:	b003      	add	sp, #12
   b9a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9a46 <__copybits>:
   b9a46:	3901      	subs	r1, #1
   b9a48:	b570      	push	{r4, r5, r6, lr}
   b9a4a:	1149      	asrs	r1, r1, #5
   b9a4c:	6914      	ldr	r4, [r2, #16]
   b9a4e:	3101      	adds	r1, #1
   b9a50:	f102 0314 	add.w	r3, r2, #20
   b9a54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9a58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b9a5c:	1f05      	subs	r5, r0, #4
   b9a5e:	42a3      	cmp	r3, r4
   b9a60:	d30c      	bcc.n	b9a7c <__copybits+0x36>
   b9a62:	1aa3      	subs	r3, r4, r2
   b9a64:	3b11      	subs	r3, #17
   b9a66:	f023 0303 	bic.w	r3, r3, #3
   b9a6a:	3211      	adds	r2, #17
   b9a6c:	42a2      	cmp	r2, r4
   b9a6e:	bf88      	it	hi
   b9a70:	2300      	movhi	r3, #0
   b9a72:	4418      	add	r0, r3
   b9a74:	2300      	movs	r3, #0
   b9a76:	4288      	cmp	r0, r1
   b9a78:	d305      	bcc.n	b9a86 <__copybits+0x40>
   b9a7a:	bd70      	pop	{r4, r5, r6, pc}
   b9a7c:	f853 6b04 	ldr.w	r6, [r3], #4
   b9a80:	f845 6f04 	str.w	r6, [r5, #4]!
   b9a84:	e7eb      	b.n	b9a5e <__copybits+0x18>
   b9a86:	f840 3b04 	str.w	r3, [r0], #4
   b9a8a:	e7f4      	b.n	b9a76 <__copybits+0x30>

000b9a8c <__any_on>:
   b9a8c:	f100 0214 	add.w	r2, r0, #20
   b9a90:	6900      	ldr	r0, [r0, #16]
   b9a92:	114b      	asrs	r3, r1, #5
   b9a94:	4298      	cmp	r0, r3
   b9a96:	b510      	push	{r4, lr}
   b9a98:	db11      	blt.n	b9abe <__any_on+0x32>
   b9a9a:	dd0a      	ble.n	b9ab2 <__any_on+0x26>
   b9a9c:	f011 011f 	ands.w	r1, r1, #31
   b9aa0:	d007      	beq.n	b9ab2 <__any_on+0x26>
   b9aa2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b9aa6:	fa24 f001 	lsr.w	r0, r4, r1
   b9aaa:	fa00 f101 	lsl.w	r1, r0, r1
   b9aae:	428c      	cmp	r4, r1
   b9ab0:	d10b      	bne.n	b9aca <__any_on+0x3e>
   b9ab2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b9ab6:	4293      	cmp	r3, r2
   b9ab8:	d803      	bhi.n	b9ac2 <__any_on+0x36>
   b9aba:	2000      	movs	r0, #0
   b9abc:	bd10      	pop	{r4, pc}
   b9abe:	4603      	mov	r3, r0
   b9ac0:	e7f7      	b.n	b9ab2 <__any_on+0x26>
   b9ac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b9ac6:	2900      	cmp	r1, #0
   b9ac8:	d0f5      	beq.n	b9ab6 <__any_on+0x2a>
   b9aca:	2001      	movs	r0, #1
   b9acc:	e7f6      	b.n	b9abc <__any_on+0x30>

000b9ace <_calloc_r>:
   b9ace:	b513      	push	{r0, r1, r4, lr}
   b9ad0:	434a      	muls	r2, r1
   b9ad2:	4611      	mov	r1, r2
   b9ad4:	9201      	str	r2, [sp, #4]
   b9ad6:	f7fb fcf7 	bl	b54c8 <_malloc_r>
   b9ada:	4604      	mov	r4, r0
   b9adc:	b118      	cbz	r0, b9ae6 <_calloc_r+0x18>
   b9ade:	9a01      	ldr	r2, [sp, #4]
   b9ae0:	2100      	movs	r1, #0
   b9ae2:	f7fd ffa2 	bl	b7a2a <memset>
   b9ae6:	4620      	mov	r0, r4
   b9ae8:	b002      	add	sp, #8
   b9aea:	bd10      	pop	{r4, pc}
   b9aec:	0000      	movs	r0, r0
	...

000b9af0 <nan>:
   b9af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9af8 <nan+0x8>
   b9af4:	4770      	bx	lr
   b9af6:	bf00      	nop
   b9af8:	00000000 	.word	0x00000000
   b9afc:	7ff80000 	.word	0x7ff80000

000b9b00 <__ascii_wctomb>:
   b9b00:	b149      	cbz	r1, b9b16 <__ascii_wctomb+0x16>
   b9b02:	2aff      	cmp	r2, #255	; 0xff
   b9b04:	bf85      	ittet	hi
   b9b06:	238a      	movhi	r3, #138	; 0x8a
   b9b08:	6003      	strhi	r3, [r0, #0]
   b9b0a:	700a      	strbls	r2, [r1, #0]
   b9b0c:	f04f 30ff 	movhi.w	r0, #4294967295
   b9b10:	bf98      	it	ls
   b9b12:	2001      	movls	r0, #1
   b9b14:	4770      	bx	lr
   b9b16:	4608      	mov	r0, r1
   b9b18:	4770      	bx	lr
	...

000b9b1c <__aeabi_d2lz>:
   b9b1c:	b538      	push	{r3, r4, r5, lr}
   b9b1e:	2200      	movs	r2, #0
   b9b20:	2300      	movs	r3, #0
   b9b22:	4604      	mov	r4, r0
   b9b24:	460d      	mov	r5, r1
   b9b26:	f7fd feeb 	bl	b7900 <__aeabi_dcmplt>
   b9b2a:	b928      	cbnz	r0, b9b38 <__aeabi_d2lz+0x1c>
   b9b2c:	4620      	mov	r0, r4
   b9b2e:	4629      	mov	r1, r5
   b9b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9b34:	f7fd bf2c 	b.w	b7990 <__aeabi_d2ulz>
   b9b38:	4620      	mov	r0, r4
   b9b3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b9b3e:	f7fd ff27 	bl	b7990 <__aeabi_d2ulz>
   b9b42:	4240      	negs	r0, r0
   b9b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9b48:	bd38      	pop	{r3, r4, r5, pc}
   b9b4a:	bf00      	nop

000b9b4c <dynalib_user>:
   b9b4c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9b5c:	0000 0000 6f70 6577 2f72 7270 6369 7365     ....power/prices
   b9b6c:	7000 6972 6563 2f73 2c00 0021 2a25 2d64     .prices/.,!.%*d-
   b9b7c:	2a25 2d64 6425 2554 3a64 2a25 3a64 2a25     %*d-%dT%d:%*d:%*
   b9b8c:	0064 7073 7261 636b 696c 6e65 5f74 6d00     d.sparkclient_.m
   b9b9c:	7471 0074 6948 6867 7365 2074 7270 6369     qtt.Highest pric
   b9bac:	2065 666f 7420 6568 6420 7961 203a 6625     e of the day: %f
   b9bbc:	000a 6f4c 6577 7473 7020 6972 6563 6f20     ..Lowest price o
   b9bcc:	2066 6874 2065 6164 3a79 2520 0a66 4800     f the day: %f..H
   b9bdc:	756f 7372 6f20 2066 6874 2065 6164 2079     ours of the day 
   b9bec:	6877 7265 2065 6c65 6365 7274 6369 7469     where electricit
   b9bfc:	2079 7369 7720 7469 6968 206e 6361 6563     y is within acce
   b9c0c:	7470 6465 7220 6e61 6567 0a3a 2500 3230     pted range:..%02
   b9c1c:	2064 6f74 2520 3230 0a64 4c00 6769 7468     d to %02d..Light
   b9c2c:	203a 6425 000a 7543 7272 6e65 2074 4848     : %d..Current HH
   b9c3c:	4d3a 3a4d 2520 3230 3a64 3025 6432 000a     :MM: %02d:%02d..
   b9c4c:	6843 6165 2870 7369 2968 6820 756f 7372     Cheap(ish) hours
   b9c5c:	6f20 2066 6874 2065 6164 3a79 0020 3025      of the day: .%0
   b9c6c:	6432 7420 206f 3025 6432 202c 4c00 776f     2d to %02d, .Low
   b9c7c:	7020 6972 6563 6820 756f 7372 5200 6365      price hours.Rec
   b9c8c:	6965 6576 2064 6f70 6577 2f72 6567 0a74     eived power/get.
   b9c9c:	7000 776f 7265 7b00 2220 6579 7261 3a22     .power.{ "year":
   b9cac:	2220 6425 2c22 2220 6f6d 746e 2268 223a      "%d", "month":"
   b9cbc:	3025 6432 2c22 2220 6164 2279 203a 2522     %02d", "day": "%
   b9ccc:	3230 2264 202c 6422 7961 745f 6f77 3a22     02d", "day_two":
   b9cdc:	2220 3025 6432 2c22 2220 6f68 7275 3a22      "%02d", "hour":
   b9cec:	2220 3025 6432 2022 007d 6c65 7270 7369      "%02d" }.elpris
   b9cfc:	7265 6700 7465 705f 6972 6563 0073 6552     er.get_prices.Re
   b9d0c:	7574 6e72 7620 6c61 6575 203a 6425 6800     turn value: %d.h
   b9d1c:	6c65 6f6c 7720 726f 646c 7000 776f 7265     ello world.power
   b9d2c:	672f 7465 3100 3239 312e 3836 302e 312e     /get.192.168.0.1
   b9d3c:	3330 0000 4d04 5451 0454 0600 514d 7349     03...MQTT...MQIs
   b9d4c:	7064 0003                                   dp..

000b9d50 <_ZTVN5spark13EthernetClassE>:
	...
   b9d58:	5577 000b 556d 000b 5563 000b 5559 000b     wU..mU..cU..YU..
   b9d68:	554d 000b 5541 000b 6bbd 000b 6bc5 000b     MU..AU...k...k..
   b9d78:	5535 000b 552d 000b 5523 000b 5519 000b     5U..-U..#U...U..
   b9d88:	6bf5 000b                                   .k..

000b9d8c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9d94:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b9da4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9db4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9dbc:	5c7d 000b 5c83 000b 5cc1 000b 5c91 000b     }\...\...\...\..
   b9dcc:	5c7f 000b                                   .\..

000b9dd0 <_ZTV9IPAddress>:
	...
   b9dd8:	61bd 000b 61ad 000b 61af 000b               .a...a...a..

000b9de4 <_ZTV9USBSerial>:
	...
   b9dec:	62cf 000b 6337 000b 630d 000b 586d 000b     .b..7c...c..mX..
   b9dfc:	62ff 000b 62d1 000b 62e1 000b 6331 000b     .b...b...b..1c..
   b9e0c:	62f1 000b 62c9 000b                         .b...b..

000b9e14 <_ZTV11USARTSerial>:
	...
   b9e1c:	6421 000b 648d 000b 6465 000b 586d 000b     !d...d..ed..mX..
   b9e2c:	6435 000b 6451 000b 6443 000b 645f 000b     5d..Qd..Cd.._d..
   b9e3c:	6423 000b 6427 000b                         #d..'d..

000b9e44 <_ZTV7TwoWire>:
	...
   b9e4c:	64ed 000b 6537 000b 650f 000b 64ef 000b     .d..7e...e...d..
   b9e5c:	6517 000b 651f 000b 6527 000b 652f 000b     .e...e..'e../e..
   b9e6c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b9e7c:	2072 203d 6425 0000                         r = %d..

000b9e84 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9e8c:	65ed 000b 6611 000b 6afb 000b 661f 000b     .e...f...j...f..
   b9e9c:	65f1 000b                                   .e..

000b9ea0 <_ZTV9TCPClient>:
	...
   b9ea8:	5b0d 000b 5b25 000b 6569 000b 6583 000b     .[..%[..ie...e..
   b9eb8:	6991 000b 65ad 000b 6807 000b 65e1 000b     .i...e...h...e..
   b9ec8:	6899 000b 66d9 000b 6835 000b 6a45 000b     .h...f..5h..Ej..
   b9ed8:	67d5 000b 65e3 000b 6595 000b 6625 000b     .g...e...e..%f..
   b9ee8:	66b9 000b                                   .f..

000b9eec <_ZTVN5spark9WiFiClassE>:
	...
   b9ef4:	6b5f 000b 6b55 000b 6b4b 000b 6b01 000b     _k..Uk..Kk...k..
   b9f04:	6b3f 000b 6b33 000b 6bbd 000b 6bc5 000b     ?k..3k...k...k..
   b9f14:	6b27 000b 6b1f 000b 6b15 000b 6b0b 000b     'k...k...k...k..
   b9f24:	6bf5 000b                                   .k..

000b9f28 <_ZTVN5spark12NetworkClassE>:
	...
   b9f30:	6b7d 000b 6b87 000b 6b91 000b 6b9b 000b     }k...k...k...k..
   b9f40:	6ba5 000b 6bb1 000b 6bbd 000b 6bc5 000b     .k...k...k...k..
   b9f50:	6bcd 000b 6bd9 000b 6be1 000b 6beb 000b     .k...k...k...k..
   b9f60:	6bf5 000b                                   .k..

000b9f64 <_ZSt7nothrow>:
	...

000b9f65 <_ZTSSt19_Sp_make_shared_tag>:
   b9f65:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9f75:	6572 5f64 6174 0067 0000                     red_tag....

000b9f80 <_ZTISt19_Sp_make_shared_tag>:
   b9f80:	9fc0 000b 9f65 000b                         ....e...

000b9f88 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9f88:	a020 000b 9f94 000b a044 000b                .......D...

000b9f94 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9f94:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9fa4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9fb4:	0045 0000                                   E...

000b9fb8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9fb8:	0000 0000 9f88 000b 6ecd 000b 6ee1 000b     .........n...n..
   b9fc8:	7075 000b 7075 000b 6f4b 000b 6e8d 000b     up..up..Ko...n..
   b9fd8:	6f33 000b 6ef5 000b 6ebf 000b               3o...n...n..

000b9fe4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9fe4:	a020 000b 9ff0 000b 9f88 000b                ...........

000b9ff0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9ff0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba000:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba010:	666e 456f 0000 0000                         nfoE....

000ba018 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba018:	0000 0000 9fe4 000b 6f75 000b 6f89 000b     ........uo...o..
   ba028:	7075 000b 7075 000b 6f4b 000b 6e8d 000b     up..up..Ko...n..
   ba038:	7049 000b 6fd5 000b 6f9d 000b               Ip...o...o..

000ba044 <_ZTISt9type_info>:
   ba044:	9fc0 000b a04c 000b                         ....L...

000ba04c <_ZTSSt9type_info>:
   ba04c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba05c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba06c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   ba07c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba08c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba09c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba0ac:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba0bc:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba0cc:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba0dc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   ba0ec:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000ba0fc <fpi.1>:
   ba0fc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ba10c:	0000 0000                                   ....

000ba110 <fpinan.0>:
   ba110:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000ba128 <tinytens>:
   ba128:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ba138:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ba148:	6f43 64ac 0628 1168 6d2f 746e 772f 726f     Co.d(.h./mnt/wor
   ba158:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   ba168:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   ba178:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   ba188:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   ba198:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   ba1a8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   ba1b8:	2f62 696c 6362 732f 7274 6e69 2f67 7473     b/libc/string/st
   ba1c8:	7472 6b6f 632e                               rtok.c.

000ba1cf <_ctype_>:
   ba1cf:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba1df:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba1ef:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba1ff:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba20f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba21f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba22f:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba23f:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba24f:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   ba2cf:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   ba2df:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   ba2ef:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   ba2ff:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   ba30f:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   ba31f:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   ba32f:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   ba33f:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   ba34f:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   ba35f:	6874 7865 632e 2e00                          thex.c...

000ba368 <_C_numeric_locale>:
   ba368:	a366 000b 9c18 000b cd84 2003 0043 4f50     f.......... C.PO
   ba378:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   ba388:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   ba398:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   ba3a8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   ba3b8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   ba3c8:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   ba3d8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   ba3e8:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   ba3f8:	0063 0000 0000 0000                         c.......

000ba400 <__mprec_bigtens>:
   ba400:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ba410:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ba420:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ba428 <__mprec_tens>:
   ba428:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   ba438:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ba448:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ba458:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ba468:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ba478:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ba488:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ba498:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ba4a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ba4b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ba4c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ba4d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ba4e8:	9db4 79d9 7843 44ea                         ...yCx.D

000ba4f0 <p05.0>:
   ba4f0:	0005 0000 0019 0000 007d 0000               ........}...

000ba4fc <link_const_variable_data_end>:
   ba4fc:	000b4701 	.word	0x000b4701
   ba500:	000b5581 	.word	0x000b5581
   ba504:	000b55a9 	.word	0x000b55a9
   ba508:	000b585d 	.word	0x000b585d
   ba50c:	000b5979 	.word	0x000b5979
   ba510:	000b5af1 	.word	0x000b5af1
   ba514:	000b5b39 	.word	0x000b5b39
   ba518:	000b6b69 	.word	0x000b6b69
   ba51c:	000b6ccd 	.word	0x000b6ccd
