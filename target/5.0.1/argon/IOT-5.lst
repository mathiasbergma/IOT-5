
c:/Users/Anders/Documents/ParticleProjects/IOT2/IOT-5/target/5.0.1/argon/IOT-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006714  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba734  000ba734  0000a734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001e0  2003cd14  000ba758  0000cd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000018fc  2003cef8  2003cef8  0001cef8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000ba938  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000ba93c  000ba93c  0001a93c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000ba942  000ba942  0001a942  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000ba966  000ba966  0001a966  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0013fe3e  00000000  00000000  0001a96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001674c  00000000  00000000  0015a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00040341  00000000  00000000  00170ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000031d8  00000000  00000000  001b1235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b618  00000000  00000000  001b440d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d086  00000000  00000000  001bfa25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00047cc2  00000000  00000000  001fcaab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013ac20  00000000  00000000  0024476d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000096c8  00000000  00000000  0037f390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2ulz>:
   b490c:	b5d0      	push	{r4, r6, r7, lr}
   b490e:	4b0c      	ldr	r3, [pc, #48]	; (b4940 <__aeabi_d2ulz+0x34>)
   b4910:	2200      	movs	r2, #0
   b4912:	4606      	mov	r6, r0
   b4914:	460f      	mov	r7, r1
   b4916:	f7ff fd3f 	bl	b4398 <__aeabi_dmul>
   b491a:	f7ff ffd7 	bl	b48cc <__aeabi_d2uiz>
   b491e:	4604      	mov	r4, r0
   b4920:	f7ff fcc0 	bl	b42a4 <__aeabi_ui2d>
   b4924:	4b07      	ldr	r3, [pc, #28]	; (b4944 <__aeabi_d2ulz+0x38>)
   b4926:	2200      	movs	r2, #0
   b4928:	f7ff fd36 	bl	b4398 <__aeabi_dmul>
   b492c:	4602      	mov	r2, r0
   b492e:	460b      	mov	r3, r1
   b4930:	4630      	mov	r0, r6
   b4932:	4639      	mov	r1, r7
   b4934:	f7ff fb78 	bl	b4028 <__aeabi_dsub>
   b4938:	f7ff ffc8 	bl	b48cc <__aeabi_d2uiz>
   b493c:	4621      	mov	r1, r4
   b493e:	bdd0      	pop	{r4, r6, r7, pc}
   b4940:	3df00000 	.word	0x3df00000
   b4944:	41f00000 	.word	0x41f00000

000b4948 <strcmp>:
   b4948:	f810 2b01 	ldrb.w	r2, [r0], #1
   b494c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4950:	2a01      	cmp	r2, #1
   b4952:	bf28      	it	cs
   b4954:	429a      	cmpcs	r2, r3
   b4956:	d0f7      	beq.n	b4948 <strcmp>
   b4958:	1ad0      	subs	r0, r2, r3
   b495a:	4770      	bx	lr

000b495c <strlen>:
   b495c:	4603      	mov	r3, r0
   b495e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4962:	2a00      	cmp	r2, #0
   b4964:	d1fb      	bne.n	b495e <strlen+0x2>
   b4966:	1a18      	subs	r0, r3, r0
   b4968:	3801      	subs	r0, #1
   b496a:	4770      	bx	lr

000b496c <__aeabi_d2lz>:
   b496c:	b538      	push	{r3, r4, r5, lr}
   b496e:	2200      	movs	r2, #0
   b4970:	2300      	movs	r3, #0
   b4972:	4604      	mov	r4, r0
   b4974:	460d      	mov	r5, r1
   b4976:	f7ff ff81 	bl	b487c <__aeabi_dcmplt>
   b497a:	b928      	cbnz	r0, b4988 <__aeabi_d2lz+0x1c>
   b497c:	4620      	mov	r0, r4
   b497e:	4629      	mov	r1, r5
   b4980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4984:	f7ff bfc2 	b.w	b490c <__aeabi_d2ulz>
   b4988:	4620      	mov	r0, r4
   b498a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b498e:	f7ff ffbd 	bl	b490c <__aeabi_d2ulz>
   b4992:	4240      	negs	r0, r0
   b4994:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4998:	bd38      	pop	{r3, r4, r5, pc}
   b499a:	bf00      	nop

000b499c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b499c:	4809      	ldr	r0, [pc, #36]	; (b49c4 <module_user_pre_init+0x28>)
   b499e:	490a      	ldr	r1, [pc, #40]	; (b49c8 <module_user_pre_init+0x2c>)
   b49a0:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49a2:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49a4:	d005      	beq.n	b49b2 <module_user_pre_init+0x16>
   b49a6:	4a09      	ldr	r2, [pc, #36]	; (b49cc <module_user_pre_init+0x30>)
   b49a8:	4282      	cmp	r2, r0
   b49aa:	d002      	beq.n	b49b2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49ac:	1a12      	subs	r2, r2, r0
   b49ae:	f003 f94e 	bl	b7c4e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49b2:	4807      	ldr	r0, [pc, #28]	; (b49d0 <module_user_pre_init+0x34>)
   b49b4:	4a07      	ldr	r2, [pc, #28]	; (b49d4 <module_user_pre_init+0x38>)
   b49b6:	2100      	movs	r1, #0
   b49b8:	1a12      	subs	r2, r2, r0
   b49ba:	f003 f956 	bl	b7c6a <memset>
    return &link_global_data_start;
}
   b49be:	4801      	ldr	r0, [pc, #4]	; (b49c4 <module_user_pre_init+0x28>)
   b49c0:	bd08      	pop	{r3, pc}
   b49c2:	bf00      	nop
   b49c4:	2003cd14 	.word	0x2003cd14
   b49c8:	000ba758 	.word	0x000ba758
   b49cc:	2003cef4 	.word	0x2003cef4
   b49d0:	2003cef8 	.word	0x2003cef8
   b49d4:	2003e7f4 	.word	0x2003e7f4

000b49d8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49d8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49da:	4e07      	ldr	r6, [pc, #28]	; (b49f8 <module_user_init+0x20>)
   b49dc:	4c07      	ldr	r4, [pc, #28]	; (b49fc <module_user_init+0x24>)
    module_user_init_hook();
   b49de:	f001 fecf 	bl	b6780 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49e2:	1ba4      	subs	r4, r4, r6
   b49e4:	08a4      	lsrs	r4, r4, #2
   b49e6:	2500      	movs	r5, #0
   b49e8:	42ac      	cmp	r4, r5
   b49ea:	d100      	bne.n	b49ee <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49ec:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49ee:	f856 3b04 	ldr.w	r3, [r6], #4
   b49f2:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49f4:	3501      	adds	r5, #1
   b49f6:	e7f7      	b.n	b49e8 <module_user_init+0x10>
   b49f8:	000ba70c 	.word	0x000ba70c
   b49fc:	000ba734 	.word	0x000ba734

000b4a00 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a00:	f000 bb12 	b.w	b5028 <setup>

000b4a04 <module_user_loop>:
}

void module_user_loop() {
   b4a04:	b508      	push	{r3, lr}
    loop();
   b4a06:	f000 f9cb 	bl	b4da0 <loop>
    _post_loop();
}
   b4a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a0e:	f001 be6f 	b.w	b66f0 <_post_loop>

000b4a12 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4a12:	f001 ba3d 	b.w	b5e90 <malloc>

000b4a16 <_Znaj>:
   b4a16:	f001 ba3b 	b.w	b5e90 <malloc>

000b4a1a <_ZdaPv>:
   b4a1a:	f001 ba41 	b.w	b5ea0 <free>

000b4a1e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a1e:	f001 ba3f 	b.w	b5ea0 <free>

000b4a22 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a22:	7800      	ldrb	r0, [r0, #0]
   b4a24:	fab0 f080 	clz	r0, r0
   b4a28:	0940      	lsrs	r0, r0, #5
   b4a2a:	4770      	bx	lr

000b4a2c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a2c:	2301      	movs	r3, #1
   b4a2e:	7003      	strb	r3, [r0, #0]
   b4a30:	4770      	bx	lr
	...

000b4a34 <_Z8callbackPcPhj>:
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    */

    work = true;
   b4a34:	4b01      	ldr	r3, [pc, #4]	; (b4a3c <_Z8callbackPcPhj+0x8>)
   b4a36:	2201      	movs	r2, #1
   b4a38:	701a      	strb	r2, [r3, #0]
}
   b4a3a:	4770      	bx	lr
   b4a3c:	2003e67e 	.word	0x2003e67e

000b4a40 <_Z13handle_sensorv>:

void handle_sensor(void)
{
   b4a40:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4a42:	f001 f811 	bl	b5a68 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta;
    unsigned long current_reading = millis();

    if ((delta = current_reading - last_read) > 100)
   b4a46:	4908      	ldr	r1, [pc, #32]	; (b4a68 <_Z13handle_sensorv+0x28>)
   b4a48:	680b      	ldr	r3, [r1, #0]
   b4a4a:	1ac3      	subs	r3, r0, r3
   b4a4c:	2b64      	cmp	r3, #100	; 0x64
   b4a4e:	d90a      	bls.n	b4a66 <_Z13handle_sensorv+0x26>
    {
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4a50:	4a06      	ldr	r2, [pc, #24]	; (b4a6c <_Z13handle_sensorv+0x2c>)
   b4a52:	fbb2 f3f3 	udiv	r3, r2, r3
   b4a56:	4a06      	ldr	r2, [pc, #24]	; (b4a70 <_Z13handle_sensorv+0x30>)
        last_read = current_reading;
   b4a58:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4a5a:	6013      	str	r3, [r2, #0]
        printer = true; // Just a debuging flag
   b4a5c:	4a05      	ldr	r2, [pc, #20]	; (b4a74 <_Z13handle_sensorv+0x34>)
   b4a5e:	2301      	movs	r3, #1
   b4a60:	7013      	strb	r3, [r2, #0]
        transmit_value = true;
   b4a62:	4a05      	ldr	r2, [pc, #20]	; (b4a78 <_Z13handle_sensorv+0x38>)
   b4a64:	7013      	strb	r3, [r2, #0]
    }
}
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	2003d1ac 	.word	0x2003d1ac
   b4a6c:	0036ee80 	.word	0x0036ee80
   b4a70:	2003cefc 	.word	0x2003cefc
   b4a74:	2003d211 	.word	0x2003d211
   b4a78:	2003e67d 	.word	0x2003e67d

000b4a7c <_Z9myHandlerPKcS0_>:

void myHandler(const char *event, const char *data)
{
   b4a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    populate = false;
    rec_cnt++;
   b4a80:	4e33      	ldr	r6, [pc, #204]	; (b4b50 <_Z9myHandlerPKcS0_+0xd4>)
    populate = false;
   b4a82:	4d34      	ldr	r5, [pc, #208]	; (b4b54 <_Z9myHandlerPKcS0_+0xd8>)
   b4a84:	2300      	movs	r3, #0
   b4a86:	702b      	strb	r3, [r5, #0]
    rec_cnt++;
   b4a88:	7833      	ldrb	r3, [r6, #0]
{
   b4a8a:	b085      	sub	sp, #20
    rec_cnt++;
   b4a8c:	3301      	adds	r3, #1
{
   b4a8e:	4680      	mov	r8, r0

    /* When transmission are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b4a90:	4608      	mov	r0, r1
    rec_cnt++;
   b4a92:	7033      	strb	r3, [r6, #0]
{
   b4a94:	460c      	mov	r4, r1
    int transmission_size = strlen(data);
   b4a96:	f7ff ff61 	bl	b495c <strlen>

    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b4a9a:	4641      	mov	r1, r8
    int transmission_size = strlen(data);
   b4a9c:	4607      	mov	r7, r0
    strcpy(event_str, event);
   b4a9e:	a801      	add	r0, sp, #4
   b4aa0:	f003 f929 	bl	b7cf6 <strcpy>

    // Token used for strtok()
    char *token = NULL;
    // Extract the numbered part of eventname and use it for indexing "rec_data"
    strcpy(rec_data[atoi(strtok(event_str, "prices/"))], data);
   b4aa4:	492c      	ldr	r1, [pc, #176]	; (b4b58 <_Z9myHandlerPKcS0_+0xdc>)
   b4aa6:	a801      	add	r0, sp, #4
   b4aa8:	f003 ff90 	bl	b89cc <strtok>
   b4aac:	f003 f8b7 	bl	b7c1e <atoi>
   b4ab0:	eb00 2340 	add.w	r3, r0, r0, lsl #9
   b4ab4:	4829      	ldr	r0, [pc, #164]	; (b4b5c <_Z9myHandlerPKcS0_+0xe0>)
   b4ab6:	4621      	mov	r1, r4
   b4ab8:	4418      	add	r0, r3
   b4aba:	f003 f91c 	bl	b7cf6 <strcpy>

    // If transmission size is less than 512 = last transmission received
    if (transmission_size < 512)
   b4abe:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   b4ac2:	d210      	bcs.n	b4ae6 <_Z9myHandlerPKcS0_+0x6a>
    {
        populate = true;
   b4ac4:	2301      	movs	r3, #1
   b4ac6:	702b      	strb	r3, [r5, #0]
    }

    if (populate)
   b4ac8:	4c24      	ldr	r4, [pc, #144]	; (b4b5c <_Z9myHandlerPKcS0_+0xe0>)
    {
        // Concatenate all transmission into one string
        for (int i = 0; i <= rec_cnt; i++)
        {
            strcat(temp, rec_data[i]);
   b4aca:	4b25      	ldr	r3, [pc, #148]	; (b4b60 <_Z9myHandlerPKcS0_+0xe4>)
{
   b4acc:	2500      	movs	r5, #0
        for (int i = 0; i <= rec_cnt; i++)
   b4ace:	7832      	ldrb	r2, [r6, #0]
   b4ad0:	42aa      	cmp	r2, r5
   b4ad2:	db0e      	blt.n	b4af2 <_Z9myHandlerPKcS0_+0x76>
            strcat(temp, rec_data[i]);
   b4ad4:	4621      	mov	r1, r4
   b4ad6:	4618      	mov	r0, r3
   b4ad8:	f003 f8fe 	bl	b7cd8 <strcat>
        for (int i = 0; i <= rec_cnt; i++)
   b4adc:	3501      	adds	r5, #1
            strcat(temp, rec_data[i]);
   b4ade:	4603      	mov	r3, r0
        for (int i = 0; i <= rec_cnt; i++)
   b4ae0:	f204 2401 	addw	r4, r4, #513	; 0x201
   b4ae4:	e7f3      	b.n	b4ace <_Z9myHandlerPKcS0_+0x52>
    if (populate)
   b4ae6:	782b      	ldrb	r3, [r5, #0]
   b4ae8:	2b00      	cmp	r3, #0
   b4aea:	d1ed      	bne.n	b4ac8 <_Z9myHandlerPKcS0_+0x4c>
                range = i; // Update range, such that the rest of program flow is aware of size
                break;     // Break the while loop
            }
        }
    }
}
   b4aec:	b005      	add	sp, #20
   b4aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        token = strtok(temp, ",!");
   b4af2:	491c      	ldr	r1, [pc, #112]	; (b4b64 <_Z9myHandlerPKcS0_+0xe8>)
   b4af4:	481a      	ldr	r0, [pc, #104]	; (b4b60 <_Z9myHandlerPKcS0_+0xe4>)
   b4af6:	4d1c      	ldr	r5, [pc, #112]	; (b4b68 <_Z9myHandlerPKcS0_+0xec>)
        for (int i = 0; i < range; i++)
   b4af8:	f8df 807c 	ldr.w	r8, [pc, #124]	; b4b78 <_Z9myHandlerPKcS0_+0xfc>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b4afc:	f8df 907c 	ldr.w	r9, [pc, #124]	; b4b7c <_Z9myHandlerPKcS0_+0x100>
            cost[i] = atof(token) / 1000;
   b4b00:	4f1a      	ldr	r7, [pc, #104]	; (b4b6c <_Z9myHandlerPKcS0_+0xf0>)
        token = strtok(temp, ",!");
   b4b02:	f003 ff63 	bl	b89cc <strtok>
        for (int i = 0; i < range; i++)
   b4b06:	2400      	movs	r4, #0
            cost[i] = atof(token) / 1000;
   b4b08:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b4b0a:	f8d8 3000 	ldr.w	r3, [r8]
   b4b0e:	42a3      	cmp	r3, r4
   b4b10:	ddec      	ble.n	b4aec <_Z9myHandlerPKcS0_+0x70>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b4b12:	4a17      	ldr	r2, [pc, #92]	; (b4b70 <_Z9myHandlerPKcS0_+0xf4>)
   b4b14:	4917      	ldr	r1, [pc, #92]	; (b4b74 <_Z9myHandlerPKcS0_+0xf8>)
   b4b16:	eb09 0384 	add.w	r3, r9, r4, lsl #2
   b4b1a:	f001 f9d9 	bl	b5ed0 <sscanf>
            token = strtok(NULL, ",!");
   b4b1e:	4911      	ldr	r1, [pc, #68]	; (b4b64 <_Z9myHandlerPKcS0_+0xe8>)
   b4b20:	2000      	movs	r0, #0
   b4b22:	f003 ff53 	bl	b89cc <strtok>
            cost[i] = atof(token) / 1000;
   b4b26:	f003 f877 	bl	b7c18 <atof>
   b4b2a:	4632      	mov	r2, r6
   b4b2c:	ec51 0b10 	vmov	r0, r1, d0
   b4b30:	463b      	mov	r3, r7
   b4b32:	f7ff fd5b 	bl	b45ec <__aeabi_ddiv>
   b4b36:	e8e5 0102 	strd	r0, r1, [r5], #8
            if ((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b4b3a:	490a      	ldr	r1, [pc, #40]	; (b4b64 <_Z9myHandlerPKcS0_+0xe8>)
   b4b3c:	2000      	movs	r0, #0
   b4b3e:	f003 ff45 	bl	b89cc <strtok>
   b4b42:	b910      	cbnz	r0, b4b4a <_Z9myHandlerPKcS0_+0xce>
                range = i; // Update range, such that the rest of program flow is aware of size
   b4b44:	f8c8 4000 	str.w	r4, [r8]
                break;     // Break the while loop
   b4b48:	e7d0      	b.n	b4aec <_Z9myHandlerPKcS0_+0x70>
        for (int i = 0; i < range; i++)
   b4b4a:	3401      	adds	r4, #1
   b4b4c:	e7dd      	b.n	b4b0a <_Z9myHandlerPKcS0_+0x8e>
   b4b4e:	bf00      	nop
   b4b50:	2003d212 	.word	0x2003d212
   b4b54:	2003d210 	.word	0x2003d210
   b4b58:	000b9d60 	.word	0x000b9d60
   b4b5c:	2003d213 	.word	0x2003d213
   b4b60:	2003dc78 	.word	0x2003dc78
   b4b64:	000b9d68 	.word	0x000b9d68
   b4b68:	2003cf68 	.word	0x2003cf68
   b4b6c:	408f4000 	.word	0x408f4000
   b4b70:	2003d1a8 	.word	0x2003d1a8
   b4b74:	000b9d6b 	.word	0x000b9d6b
   b4b78:	2003cd14 	.word	0x2003cd14
   b4b7c:	2003d0e8 	.word	0x2003d0e8

000b4b80 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b80:	b40e      	push	{r1, r2, r3}
   b4b82:	b503      	push	{r0, r1, lr}
   b4b84:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4b86:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b88:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b8c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4b8e:	f001 fc76 	bl	b647e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4b92:	b002      	add	sp, #8
   b4b94:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b98:	b003      	add	sp, #12
   b4b9a:	4770      	bx	lr

000b4b9c <_Z9reconnectv>:
    // Wait 1 second
    delay(1000);
}

void reconnect(void)
{
   b4b9c:	b500      	push	{lr}
   b4b9e:	b089      	sub	sp, #36	; 0x24

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4ba0:	490e      	ldr	r1, [pc, #56]	; (b4bdc <_Z9reconnectv+0x40>)
   b4ba2:	a804      	add	r0, sp, #16
   b4ba4:	f001 fb09 	bl	b61ba <_ZN6StringC1EPK19__FlashStringHelper>
    client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b4ba8:	f001 fd0d 	bl	b65c6 <_ZN9TimeClass3nowEv>
   b4bac:	220a      	movs	r2, #10
   b4bae:	4601      	mov	r1, r0
   b4bb0:	4668      	mov	r0, sp
   b4bb2:	f001 fb55 	bl	b6260 <_ZN6StringC1Elh>
   b4bb6:	4669      	mov	r1, sp
   b4bb8:	a804      	add	r0, sp, #16
   b4bba:	f001 fb7f 	bl	b62bc <_ZplRK15StringSumHelperRK6String>
   b4bbe:	4b08      	ldr	r3, [pc, #32]	; (b4be0 <_Z9reconnectv+0x44>)
   b4bc0:	6801      	ldr	r1, [r0, #0]
   b4bc2:	4808      	ldr	r0, [pc, #32]	; (b4be4 <_Z9reconnectv+0x48>)
   b4bc4:	461a      	mov	r2, r3
   b4bc6:	f000 fcdf 	bl	b5588 <_ZN4MQTT7connectEPKcS1_S1_>
   b4bca:	4668      	mov	r0, sp
   b4bcc:	f001 faaa 	bl	b6124 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4bd0:	a804      	add	r0, sp, #16
   b4bd2:	f001 faa7 	bl	b6124 <_ZN6StringD1Ev>
}
   b4bd6:	b009      	add	sp, #36	; 0x24
   b4bd8:	f85d fb04 	ldr.w	pc, [sp], #4
   b4bdc:	000b9d81 	.word	0x000b9d81
   b4be0:	000b9d8e 	.word	0x000b9d8e
   b4be4:	2003cf00 	.word	0x2003cf00

000b4be8 <_Z8calc_lowv>:

/** @brief The purpose of the function is to identify the hours at which the highest and lowest cost are.
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 */
void calc_low(void)
{
   b4be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4bec:	ed2d 8b04 	vpush	{d8-d9}
    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value

    for (int i = 0; i < range; i++)
   b4bf0:	4b53      	ldr	r3, [pc, #332]	; (b4d40 <_Z8calc_lowv+0x158>)
   b4bf2:	f8df 8174 	ldr.w	r8, [pc, #372]	; b4d68 <_Z8calc_lowv+0x180>
   b4bf6:	f8d3 b000 	ldr.w	fp, [r3]
    double last_small = 100; // Assign any absurdly high value
   b4bfa:	4f52      	ldr	r7, [pc, #328]	; (b4d44 <_Z8calc_lowv+0x15c>)
    double last_big = 0;
   b4bfc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; b4d30 <_Z8calc_lowv+0x148>
    for (int i = 0; i < range; i++)
   b4c00:	46c2      	mov	sl, r8
   b4c02:	f04f 0900 	mov.w	r9, #0
    double last_small = 100; // Assign any absurdly high value
   b4c06:	2600      	movs	r6, #0
    double last_big = 0;
   b4c08:	eeb0 8a47 	vmov.f32	s16, s14
   b4c0c:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < range; i++)
   b4c10:	45cb      	cmp	fp, r9
   b4c12:	dd16      	ble.n	b4c42 <_Z8calc_lowv+0x5a>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4c14:	e8fa 4502 	ldrd	r4, r5, [sl], #8
   b4c18:	ec53 2b18 	vmov	r2, r3, d8
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	4629      	mov	r1, r5
   b4c20:	f7ff fe4a 	bl	b48b8 <__aeabi_dcmpgt>
   b4c24:	b108      	cbz	r0, b4c2a <_Z8calc_lowv+0x42>
        {
            last_big = cost[i];
   b4c26:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b4c2a:	4632      	mov	r2, r6
   b4c2c:	463b      	mov	r3, r7
   b4c2e:	4620      	mov	r0, r4
   b4c30:	4629      	mov	r1, r5
   b4c32:	f7ff fe23 	bl	b487c <__aeabi_dcmplt>
   b4c36:	b108      	cbz	r0, b4c3c <_Z8calc_lowv+0x54>
        {
            last_small = cost[i];
   b4c38:	4626      	mov	r6, r4
   b4c3a:	462f      	mov	r7, r5
    for (int i = 0; i < range; i++)
   b4c3c:	f109 0901 	add.w	r9, r9, #1
   b4c40:	e7e6      	b.n	b4c10 <_Z8calc_lowv+0x28>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b4c42:	4632      	mov	r2, r6
   b4c44:	463b      	mov	r3, r7
   b4c46:	ec51 0b18 	vmov	r0, r1, d8
   b4c4a:	f7ff f9ed 	bl	b4028 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4c4e:	a33a      	add	r3, pc, #232	; (adr r3, b4d38 <_Z8calc_lowv+0x150>)
   b4c50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c54:	f7ff fba0 	bl	b4398 <__aeabi_dmul>
   b4c58:	4632      	mov	r2, r6
   b4c5a:	463b      	mov	r3, r7
   b4c5c:	f7ff f9e6 	bl	b402c <__adddf3>

    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= range; i++)
   b4c60:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4c62:	ec41 0b19 	vmov	d9, r0, r1
    {

        if (cost[i] < small_offset)
        {
            low_range_hour[idx] = cost_hour[i];
   b4c66:	f8df 9104 	ldr.w	r9, [pc, #260]	; b4d6c <_Z8calc_lowv+0x184>
   b4c6a:	f8df a104 	ldr.w	sl, [pc, #260]	; b4d70 <_Z8calc_lowv+0x188>
    int idx = 0;
   b4c6e:	462c      	mov	r4, r5
    for (int i = 0; i <= range; i++)
   b4c70:	45ab      	cmp	fp, r5
   b4c72:	db0d      	blt.n	b4c90 <_Z8calc_lowv+0xa8>
        if (cost[i] < small_offset)
   b4c74:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   b4c78:	ec53 2b19 	vmov	r2, r3, d9
   b4c7c:	f7ff fdfe 	bl	b487c <__aeabi_dcmplt>
   b4c80:	b120      	cbz	r0, b4c8c <_Z8calc_lowv+0xa4>
            low_range_hour[idx] = cost_hour[i];
   b4c82:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   b4c86:	f849 3024 	str.w	r3, [r9, r4, lsl #2]

            idx++;
   b4c8a:	3401      	adds	r4, #1
    for (int i = 0; i <= range; i++)
   b4c8c:	3501      	adds	r5, #1
   b4c8e:	e7ef      	b.n	b4c70 <_Z8calc_lowv+0x88>
        }
    }

    // Calculations have been done - clear flag
    populate = false;
   b4c90:	4b2d      	ldr	r3, [pc, #180]	; (b4d48 <_Z8calc_lowv+0x160>)
   b4c92:	2500      	movs	r5, #0
   b4c94:	701d      	strb	r5, [r3, #0]
    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b4c96:	f002 f925 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4c9a:	ec53 2b18 	vmov	r2, r3, d8
   b4c9e:	492b      	ldr	r1, [pc, #172]	; (b4d4c <_Z8calc_lowv+0x164>)
   b4ca0:	f7ff ff6e 	bl	b4b80 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b4ca4:	f002 f91e 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4ca8:	4632      	mov	r2, r6
   b4caa:	4929      	ldr	r1, [pc, #164]	; (b4d50 <_Z8calc_lowv+0x168>)
   b4cac:	4e29      	ldr	r6, [pc, #164]	; (b4d54 <_Z8calc_lowv+0x16c>)
   b4cae:	463b      	mov	r3, r7
   b4cb0:	f7ff ff66 	bl	b4b80 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4cb4:	f002 f916 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4cb8:	4927      	ldr	r1, [pc, #156]	; (b4d58 <_Z8calc_lowv+0x170>)
   b4cba:	f7ff ff61 	bl	b4b80 <_ZN5Print6printfEPKcz>

    int i = 0;
    if (idx > 0)
   b4cbe:	b1e4      	cbz	r4, b4cfa <_Z8calc_lowv+0x112>
   b4cc0:	6831      	ldr	r1, [r6, #0]
   b4cc2:	4a26      	ldr	r2, [pc, #152]	; (b4d5c <_Z8calc_lowv+0x174>)
    {
        while (i <= idx)
        {
            start_stop[cnt][0] = low_range_hour[i];
   b4cc4:	f8df c0a4 	ldr.w	ip, [pc, #164]	; b4d6c <_Z8calc_lowv+0x184>
   b4cc8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    int i = 0;
   b4ccc:	462b      	mov	r3, r5
            start_stop[cnt][0] = low_range_hour[i];
   b4cce:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   b4cd2:	6010      	str	r0, [r2, #0]
   b4cd4:	eb0c 0783 	add.w	r7, ip, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4cd8:	6838      	ldr	r0, [r7, #0]
   b4cda:	f857 5f04 	ldr.w	r5, [r7, #4]!
   b4cde:	3d01      	subs	r5, #1
   b4ce0:	42a8      	cmp	r0, r5
   b4ce2:	f103 0301 	add.w	r3, r3, #1
   b4ce6:	d0f7      	beq.n	b4cd8 <_Z8calc_lowv+0xf0>
            {
                i++;
            }

            start_stop[cnt][1] = low_range_hour[i] + 1;
   b4ce8:	3001      	adds	r0, #1
        while (i <= idx)
   b4cea:	42a3      	cmp	r3, r4
            start_stop[cnt][1] = low_range_hour[i] + 1;
   b4cec:	6050      	str	r0, [r2, #4]

            cnt++;
   b4cee:	f101 0001 	add.w	r0, r1, #1
        while (i <= idx)
   b4cf2:	f102 0208 	add.w	r2, r2, #8
   b4cf6:	dd11      	ble.n	b4d1c <_Z8calc_lowv+0x134>
            i++;
        }
        cnt--;
   b4cf8:	6031      	str	r1, [r6, #0]
   b4cfa:	4c18      	ldr	r4, [pc, #96]	; (b4d5c <_Z8calc_lowv+0x174>)
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n", start_stop[z][0], start_stop[z][1]);
   b4cfc:	4f18      	ldr	r7, [pc, #96]	; (b4d60 <_Z8calc_lowv+0x178>)
            cnt++;
   b4cfe:	2500      	movs	r5, #0
    for (int z = 0; z < cnt; z++)
   b4d00:	6833      	ldr	r3, [r6, #0]
   b4d02:	42ab      	cmp	r3, r5
   b4d04:	f104 0408 	add.w	r4, r4, #8
   b4d08:	dd0a      	ble.n	b4d20 <_Z8calc_lowv+0x138>
        Serial.printf("%02d to %02d\n", start_stop[z][0], start_stop[z][1]);
   b4d0a:	f002 f8eb 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4d0e:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b4d12:	4639      	mov	r1, r7
   b4d14:	f7ff ff34 	bl	b4b80 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b4d18:	3501      	adds	r5, #1
   b4d1a:	e7f1      	b.n	b4d00 <_Z8calc_lowv+0x118>
            cnt++;
   b4d1c:	4601      	mov	r1, r0
   b4d1e:	e7d6      	b.n	b4cce <_Z8calc_lowv+0xe6>
    }

    work = true;
   b4d20:	4b10      	ldr	r3, [pc, #64]	; (b4d64 <_Z8calc_lowv+0x17c>)
   b4d22:	2201      	movs	r2, #1
   b4d24:	701a      	strb	r2, [r3, #0]
}
   b4d26:	ecbd 8b04 	vpop	{d8-d9}
   b4d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4d2e:	bf00      	nop
	...
   b4d38:	33333333 	.word	0x33333333
   b4d3c:	3fd33333 	.word	0x3fd33333
   b4d40:	2003cd14 	.word	0x2003cd14
   b4d44:	40590000 	.word	0x40590000
   b4d48:	2003d210 	.word	0x2003d210
   b4d4c:	000b9d93 	.word	0x000b9d93
   b4d50:	000b9db1 	.word	0x000b9db1
   b4d54:	2003cf60 	.word	0x2003cf60
   b4d58:	000b9dce 	.word	0x000b9dce
   b4d5c:	2003dc18 	.word	0x2003dc18
   b4d60:	000b9e0c 	.word	0x000b9e0c
   b4d64:	2003e67e 	.word	0x2003e67e
   b4d68:	2003cf68 	.word	0x2003cf68
   b4d6c:	2003d1b0 	.word	0x2003d1b0
   b4d70:	2003d0e8 	.word	0x2003d0e8

000b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4d74:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4d76:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4d78:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4d7a:	b17c      	cbz	r4, b4d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4d7c:	6863      	ldr	r3, [r4, #4]
   b4d7e:	3b01      	subs	r3, #1
   b4d80:	6063      	str	r3, [r4, #4]
   b4d82:	b95b      	cbnz	r3, b4d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4d84:	6823      	ldr	r3, [r4, #0]
   b4d86:	4620      	mov	r0, r4
   b4d88:	689b      	ldr	r3, [r3, #8]
   b4d8a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4d8c:	68a3      	ldr	r3, [r4, #8]
   b4d8e:	3b01      	subs	r3, #1
   b4d90:	60a3      	str	r3, [r4, #8]
   b4d92:	b91b      	cbnz	r3, b4d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4d94:	6823      	ldr	r3, [r4, #0]
   b4d96:	4620      	mov	r0, r4
   b4d98:	68db      	ldr	r3, [r3, #12]
   b4d9a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4d9c:	4628      	mov	r0, r5
   b4d9e:	bd38      	pop	{r3, r4, r5, pc}

000b4da0 <loop>:
{
   b4da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (client.isConnected())
   b4da4:	4844      	ldr	r0, [pc, #272]	; (b4eb8 <loop+0x118>)
{
   b4da6:	b08a      	sub	sp, #40	; 0x28
    if (client.isConnected())
   b4da8:	f000 fafe 	bl	b53a8 <_ZN4MQTT11isConnectedEv>
   b4dac:	2800      	cmp	r0, #0
   b4dae:	d048      	beq.n	b4e42 <loop+0xa2>
        client.loop();
   b4db0:	4841      	ldr	r0, [pc, #260]	; (b4eb8 <loop+0x118>)
   b4db2:	f000 fcd0 	bl	b5756 <_ZN4MQTT4loopEv>
    if (printer) // Debugging flag set in interrupt handler
   b4db6:	4c41      	ldr	r4, [pc, #260]	; (b4ebc <loop+0x11c>)
   b4db8:	7823      	ldrb	r3, [r4, #0]
   b4dba:	b143      	cbz	r3, b4dce <loop+0x2e>
        Serial.printf("Light: %d\n", calc_power);
   b4dbc:	f002 f892 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4dc0:	4b3f      	ldr	r3, [pc, #252]	; (b4ec0 <loop+0x120>)
   b4dc2:	4940      	ldr	r1, [pc, #256]	; (b4ec4 <loop+0x124>)
   b4dc4:	681a      	ldr	r2, [r3, #0]
   b4dc6:	f7ff fedb 	bl	b4b80 <_ZN5Print6printfEPKcz>
        printer = false;
   b4dca:	2300      	movs	r3, #0
   b4dcc:	7023      	strb	r3, [r4, #0]
    if (populate)
   b4dce:	4b3e      	ldr	r3, [pc, #248]	; (b4ec8 <loop+0x128>)
   b4dd0:	781b      	ldrb	r3, [r3, #0]
   b4dd2:	b17b      	cbz	r3, b4df4 <loop+0x54>
        calc_low();
   b4dd4:	f7ff ff08 	bl	b4be8 <_Z8calc_lowv>
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b4dd8:	f002 f884 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4ddc:	4604      	mov	r4, r0
   b4dde:	f001 fc03 	bl	b65e8 <_ZN9TimeClass4hourEv>
   b4de2:	4605      	mov	r5, r0
   b4de4:	f001 fc0c 	bl	b6600 <_ZN9TimeClass6minuteEv>
   b4de8:	4938      	ldr	r1, [pc, #224]	; (b4ecc <loop+0x12c>)
   b4dea:	4603      	mov	r3, r0
   b4dec:	1caa      	adds	r2, r5, #2
   b4dee:	4620      	mov	r0, r4
   b4df0:	f7ff fec6 	bl	b4b80 <_ZN5Print6printfEPKcz>
    if (work)
   b4df4:	4e36      	ldr	r6, [pc, #216]	; (b4ed0 <loop+0x130>)
   b4df6:	7833      	ldrb	r3, [r6, #0]
   b4df8:	2b00      	cmp	r3, #0
   b4dfa:	d041      	beq.n	b4e80 <loop+0xe0>
        Serial.printf("In work\n");
   b4dfc:	f002 f872 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4e00:	4934      	ldr	r1, [pc, #208]	; (b4ed4 <loop+0x134>)
   b4e02:	4c35      	ldr	r4, [pc, #212]	; (b4ed8 <loop+0x138>)
        for (int z = 0; z < cnt; z++)
   b4e04:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b4f04 <loop+0x164>
            data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4e08:	4f34      	ldr	r7, [pc, #208]	; (b4edc <loop+0x13c>)
        Serial.printf("In work\n");
   b4e0a:	f7ff feb9 	bl	b4b80 <_ZN5Print6printfEPKcz>
        String data = "Cheap(ish) hours of the day: ";
   b4e0e:	4934      	ldr	r1, [pc, #208]	; (b4ee0 <loop+0x140>)
   b4e10:	a802      	add	r0, sp, #8
   b4e12:	f001 f9d2 	bl	b61ba <_ZN6StringC1EPK19__FlashStringHelper>
        for (int z = 0; z < cnt; z++)
   b4e16:	2500      	movs	r5, #0
   b4e18:	f8d8 3000 	ldr.w	r3, [r8]
   b4e1c:	42ab      	cmp	r3, r5
   b4e1e:	f104 0408 	add.w	r4, r4, #8
   b4e22:	dd16      	ble.n	b4e52 <loop+0xb2>
            data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b4e24:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b4e28:	4639      	mov	r1, r7
   b4e2a:	a806      	add	r0, sp, #24
   b4e2c:	f001 fa68 	bl	b6300 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4e30:	a906      	add	r1, sp, #24
   b4e32:	a802      	add	r0, sp, #8
   b4e34:	f001 fa3e 	bl	b62b4 <_ZN6String6concatERKS_>
   b4e38:	a806      	add	r0, sp, #24
   b4e3a:	f001 f973 	bl	b6124 <_ZN6StringD1Ev>
        for (int z = 0; z < cnt; z++)
   b4e3e:	3501      	adds	r5, #1
   b4e40:	e7ea      	b.n	b4e18 <loop+0x78>
        Serial.printf("Client disconnected\n");
   b4e42:	f002 f84f 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4e46:	4927      	ldr	r1, [pc, #156]	; (b4ee4 <loop+0x144>)
   b4e48:	f7ff fe9a 	bl	b4b80 <_ZN5Print6printfEPKcz>
        reconnect();
   b4e4c:	f7ff fea6 	bl	b4b9c <_Z9reconnectv>
   b4e50:	e7b1      	b.n	b4db6 <loop+0x16>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4e52:	4b25      	ldr	r3, [pc, #148]	; (b4ee8 <loop+0x148>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4e54:	9a02      	ldr	r2, [sp, #8]
   b4e56:	781b      	ldrb	r3, [r3, #0]
   b4e58:	4924      	ldr	r1, [pc, #144]	; (b4eec <loop+0x14c>)
   b4e5a:	f88d 3000 	strb.w	r3, [sp]
   b4e5e:	a806      	add	r0, sp, #24
   b4e60:	233c      	movs	r3, #60	; 0x3c
   b4e62:	f001 fdeb 	bl	b6a3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4e66:	a807      	add	r0, sp, #28
   b4e68:	f7ff ff84 	bl	b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        client.publish("prices", data);
   b4e6c:	9a02      	ldr	r2, [sp, #8]
   b4e6e:	4920      	ldr	r1, [pc, #128]	; (b4ef0 <loop+0x150>)
   b4e70:	4811      	ldr	r0, [pc, #68]	; (b4eb8 <loop+0x118>)
   b4e72:	f000 fc14 	bl	b569e <_ZN4MQTT7publishEPKcS1_>
        work = false;
   b4e76:	2300      	movs	r3, #0
        String data = "Cheap(ish) hours of the day: ";
   b4e78:	a802      	add	r0, sp, #8
        work = false;
   b4e7a:	7033      	strb	r3, [r6, #0]
        String data = "Cheap(ish) hours of the day: ";
   b4e7c:	f001 f952 	bl	b6124 <_ZN6StringD1Ev>
    if (transmit_value) // Did we receive a request for updated values
   b4e80:	4c1c      	ldr	r4, [pc, #112]	; (b4ef4 <loop+0x154>)
   b4e82:	7823      	ldrb	r3, [r4, #0]
   b4e84:	b18b      	cbz	r3, b4eaa <loop+0x10a>
        Serial.printf("Received power/get\n");
   b4e86:	f002 f82d 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4e8a:	491b      	ldr	r1, [pc, #108]	; (b4ef8 <loop+0x158>)
   b4e8c:	f7ff fe78 	bl	b4b80 <_ZN5Print6printfEPKcz>
        sprintf(values, "%d", calc_power);
   b4e90:	4b0b      	ldr	r3, [pc, #44]	; (b4ec0 <loop+0x120>)
   b4e92:	491a      	ldr	r1, [pc, #104]	; (b4efc <loop+0x15c>)
   b4e94:	681a      	ldr	r2, [r3, #0]
   b4e96:	a806      	add	r0, sp, #24
   b4e98:	f001 f812 	bl	b5ec0 <sprintf>
        client.publish("power", values);
   b4e9c:	4918      	ldr	r1, [pc, #96]	; (b4f00 <loop+0x160>)
   b4e9e:	4806      	ldr	r0, [pc, #24]	; (b4eb8 <loop+0x118>)
   b4ea0:	aa06      	add	r2, sp, #24
   b4ea2:	f000 fbfc 	bl	b569e <_ZN4MQTT7publishEPKcS1_>
        transmit_value = false;
   b4ea6:	2300      	movs	r3, #0
   b4ea8:	7023      	strb	r3, [r4, #0]
    delay(1000);
   b4eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b4eae:	b00a      	add	sp, #40	; 0x28
   b4eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(1000);
   b4eb4:	f001 bbda 	b.w	b666c <delay>
   b4eb8:	2003cf00 	.word	0x2003cf00
   b4ebc:	2003d211 	.word	0x2003d211
   b4ec0:	2003cefc 	.word	0x2003cefc
   b4ec4:	000b9e2f 	.word	0x000b9e2f
   b4ec8:	2003d210 	.word	0x2003d210
   b4ecc:	000b9e3a 	.word	0x000b9e3a
   b4ed0:	2003e67e 	.word	0x2003e67e
   b4ed4:	000b9e54 	.word	0x000b9e54
   b4ed8:	2003dc18 	.word	0x2003dc18
   b4edc:	000b9e7b 	.word	0x000b9e7b
   b4ee0:	000b9e5d 	.word	0x000b9e5d
   b4ee4:	000b9e1a 	.word	0x000b9e1a
   b4ee8:	2003cef9 	.word	0x2003cef9
   b4eec:	000b9e8a 	.word	0x000b9e8a
   b4ef0:	000b9f48 	.word	0x000b9f48
   b4ef4:	2003e67d 	.word	0x2003e67d
   b4ef8:	000b9e9a 	.word	0x000b9e9a
   b4efc:	000b9f29 	.word	0x000b9f29
   b4f00:	000b9eae 	.word	0x000b9eae
   b4f04:	2003cf60 	.word	0x2003cf60

000b4f08 <_Z8get_datai>:

/** @brief Puplishes a formatted command string to Particle cloud that fires off a webhook
 */
void get_data(int day)
{
    rec_cnt = 0;
   b4f08:	4a3b      	ldr	r2, [pc, #236]	; (b4ff8 <_Z8get_datai+0xf0>)
   b4f0a:	2300      	movs	r3, #0
{
   b4f0c:	b530      	push	{r4, r5, lr}
    rec_cnt = 0;
   b4f0e:	7013      	strb	r3, [r2, #0]
    range = 48;
   b4f10:	4a3a      	ldr	r2, [pc, #232]	; (b4ffc <_Z8get_datai+0xf4>)
   b4f12:	2130      	movs	r1, #48	; 0x30
   b4f14:	6011      	str	r1, [r2, #0]
    cnt = 0;
   b4f16:	4a3a      	ldr	r2, [pc, #232]	; (b5000 <_Z8get_datai+0xf8>)
	StringSumHelper(const char *p) : String(p) {}
   b4f18:	493a      	ldr	r1, [pc, #232]	; (b5004 <_Z8get_datai+0xfc>)
   b4f1a:	6013      	str	r3, [r2, #0]
    temp[0] = 0;
   b4f1c:	4a3a      	ldr	r2, [pc, #232]	; (b5008 <_Z8get_datai+0x100>)
{
   b4f1e:	b09f      	sub	sp, #124	; 0x7c
    temp[0] = 0;
   b4f20:	7013      	strb	r3, [r2, #0]
{
   b4f22:	4604      	mov	r4, r0
   b4f24:	a80a      	add	r0, sp, #40	; 0x28
   b4f26:	f001 f948 	bl	b61ba <_ZN6StringC1EPK19__FlashStringHelper>
    // data += String::format("\"day\": \"%02d\", ", day);
    // data += String::format("\"day_two\": \"%02d\", ", (day + 2));
    // data += String::format("\"hour\": \"%02d\" }" + Time.hour());
    
  
    String data = "{ \"year\": \"" + (String)Time.year()  + "\", " +
   b4f2a:	f001 fb89 	bl	b6640 <_ZN9TimeClass4yearEv>
   b4f2e:	220a      	movs	r2, #10
   b4f30:	4601      	mov	r1, r0
   b4f32:	a806      	add	r0, sp, #24
   b4f34:	f001 f981 	bl	b623a <_ZN6StringC1Eih>
   b4f38:	a906      	add	r1, sp, #24
   b4f3a:	a80a      	add	r0, sp, #40	; 0x28
   b4f3c:	f001 f9be 	bl	b62bc <_ZplRK15StringSumHelperRK6String>
   b4f40:	4932      	ldr	r1, [pc, #200]	; (b500c <_Z8get_datai+0x104>)
   b4f42:	f001 f9c7 	bl	b62d4 <_ZplRK15StringSumHelperPKc>
   b4f46:	4605      	mov	r5, r0
        String::format("\"month\": \"%02d\", ", Time.month()) + 
   b4f48:	f001 fb72 	bl	b6630 <_ZN9TimeClass5monthEv>
   b4f4c:	4930      	ldr	r1, [pc, #192]	; (b5010 <_Z8get_datai+0x108>)
   b4f4e:	4602      	mov	r2, r0
   b4f50:	a80e      	add	r0, sp, #56	; 0x38
   b4f52:	f001 f9d5 	bl	b6300 <_ZN6String6formatEPKcz>
   b4f56:	a90e      	add	r1, sp, #56	; 0x38
   b4f58:	4628      	mov	r0, r5
   b4f5a:	f001 f9af 	bl	b62bc <_ZplRK15StringSumHelperRK6String>
        String::format("\"day\": \"%02d\", ", day) +
   b4f5e:	4622      	mov	r2, r4
        String::format("\"month\": \"%02d\", ", Time.month()) + 
   b4f60:	4605      	mov	r5, r0
        String::format("\"day\": \"%02d\", ", day) +
   b4f62:	492c      	ldr	r1, [pc, #176]	; (b5014 <_Z8get_datai+0x10c>)
   b4f64:	a812      	add	r0, sp, #72	; 0x48
   b4f66:	f001 f9cb 	bl	b6300 <_ZN6String6formatEPKcz>
   b4f6a:	a912      	add	r1, sp, #72	; 0x48
   b4f6c:	4628      	mov	r0, r5
   b4f6e:	f001 f9a5 	bl	b62bc <_ZplRK15StringSumHelperRK6String>
        String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b4f72:	1ca2      	adds	r2, r4, #2
        String::format("\"day\": \"%02d\", ", day) +
   b4f74:	4605      	mov	r5, r0
        String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b4f76:	4928      	ldr	r1, [pc, #160]	; (b5018 <_Z8get_datai+0x110>)
   b4f78:	a816      	add	r0, sp, #88	; 0x58
   b4f7a:	f001 f9c1 	bl	b6300 <_ZN6String6formatEPKcz>
   b4f7e:	a916      	add	r1, sp, #88	; 0x58
   b4f80:	4628      	mov	r0, r5
   b4f82:	f001 f99b 	bl	b62bc <_ZplRK15StringSumHelperRK6String>
   b4f86:	4604      	mov	r4, r0
        String::format("\"hour\": \"%02d\" }", Time.hour());
   b4f88:	f001 fb2e 	bl	b65e8 <_ZN9TimeClass4hourEv>
   b4f8c:	4923      	ldr	r1, [pc, #140]	; (b501c <_Z8get_datai+0x114>)
   b4f8e:	4602      	mov	r2, r0
   b4f90:	a81a      	add	r0, sp, #104	; 0x68
   b4f92:	f001 f9b5 	bl	b6300 <_ZN6String6formatEPKcz>
   b4f96:	a91a      	add	r1, sp, #104	; 0x68
   b4f98:	4620      	mov	r0, r4
   b4f9a:	f001 f98f 	bl	b62bc <_ZplRK15StringSumHelperRK6String>
   b4f9e:	4601      	mov	r1, r0
   b4fa0:	a802      	add	r0, sp, #8
   b4fa2:	f001 f92d 	bl	b6200 <_ZN6StringC1ERKS_>
   b4fa6:	a81a      	add	r0, sp, #104	; 0x68
   b4fa8:	f001 f8bc 	bl	b6124 <_ZN6StringD1Ev>
   b4fac:	a816      	add	r0, sp, #88	; 0x58
   b4fae:	f001 f8b9 	bl	b6124 <_ZN6StringD1Ev>
   b4fb2:	a812      	add	r0, sp, #72	; 0x48
   b4fb4:	f001 f8b6 	bl	b6124 <_ZN6StringD1Ev>
   b4fb8:	a80e      	add	r0, sp, #56	; 0x38
   b4fba:	f001 f8b3 	bl	b6124 <_ZN6StringD1Ev>
   b4fbe:	a806      	add	r0, sp, #24
   b4fc0:	f001 f8b0 	bl	b6124 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4fc4:	a80a      	add	r0, sp, #40	; 0x28
   b4fc6:	f001 f8ad 	bl	b6124 <_ZN6StringD1Ev>
   b4fca:	4b15      	ldr	r3, [pc, #84]	; (b5020 <_Z8get_datai+0x118>)
   b4fcc:	9a02      	ldr	r2, [sp, #8]
   b4fce:	781b      	ldrb	r3, [r3, #0]
   b4fd0:	4914      	ldr	r1, [pc, #80]	; (b5024 <_Z8get_datai+0x11c>)
   b4fd2:	f88d 3000 	strb.w	r3, [sp]
   b4fd6:	a81a      	add	r0, sp, #104	; 0x68
   b4fd8:	233c      	movs	r3, #60	; 0x3c
   b4fda:	f001 fd2f 	bl	b6a3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4fde:	a81b      	add	r0, sp, #108	; 0x6c
   b4fe0:	f7ff fec8 	bl	b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    


    // Trigger the integration
    Particle.publish("elpriser", data);
     Serial.println(data);
   b4fe4:	f001 ff7e 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b4fe8:	9902      	ldr	r1, [sp, #8]
   b4fea:	f001 fa20 	bl	b642e <_ZN5Print7printlnEPKc>
        String::format("\"hour\": \"%02d\" }", Time.hour());
   b4fee:	a802      	add	r0, sp, #8
   b4ff0:	f001 f898 	bl	b6124 <_ZN6StringD1Ev>
   b4ff4:	b01f      	add	sp, #124	; 0x7c
   b4ff6:	bd30      	pop	{r4, r5, pc}
   b4ff8:	2003d212 	.word	0x2003d212
   b4ffc:	2003cd14 	.word	0x2003cd14
   b5000:	2003cf60 	.word	0x2003cf60
   b5004:	000b9eb4 	.word	0x000b9eb4
   b5008:	2003dc78 	.word	0x2003dc78
   b500c:	000b9ece 	.word	0x000b9ece
   b5010:	000b9ec0 	.word	0x000b9ec0
   b5014:	000b9ed2 	.word	0x000b9ed2
   b5018:	000b9ee2 	.word	0x000b9ee2
   b501c:	000b9ef6 	.word	0x000b9ef6
   b5020:	2003cef8 	.word	0x2003cef8
   b5024:	000b9f07 	.word	0x000b9f07

000b5028 <setup>:
{
   b5028:	b510      	push	{r4, lr}
   b502a:	b08a      	sub	sp, #40	; 0x28
   b502c:	f000 fd1c 	bl	b5a68 <HAL_Timer_Get_Milli_Seconds>
    last_read = millis();                                  // Give it an initial value
   b5030:	4b2b      	ldr	r3, [pc, #172]	; (b50e0 <setup+0xb8>)
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b5032:	2400      	movs	r4, #0
    last_read = millis();                                  // Give it an initial value
   b5034:	6018      	str	r0, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b5036:	2103      	movs	r1, #3
   b5038:	2006      	movs	r0, #6
   b503a:	f002 fc43 	bl	b78c4 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b503e:	4929      	ldr	r1, [pc, #164]	; (b50e4 <setup+0xbc>)
   b5040:	9400      	str	r4, [sp, #0]
   b5042:	f04f 33ff 	mov.w	r3, #4294967295
   b5046:	2201      	movs	r2, #1
   b5048:	2006      	movs	r0, #6
   b504a:	f001 ff73 	bl	b6f34 <_Z15attachInterrupttPFvvE13InterruptModeah>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b504e:	4623      	mov	r3, r4
   b5050:	4622      	mov	r2, r4
   b5052:	e9cd 4400 	strd	r4, r4, [sp]
   b5056:	4924      	ldr	r1, [pc, #144]	; (b50e8 <setup+0xc0>)
   b5058:	4824      	ldr	r0, [pc, #144]	; (b50ec <setup+0xc4>)
   b505a:	f000 ff01 	bl	b5e60 <spark_subscribe>
   b505e:	4623      	mov	r3, r4
   b5060:	4622      	mov	r2, r4
   b5062:	4923      	ldr	r1, [pc, #140]	; (b50f0 <setup+0xc8>)
   b5064:	4823      	ldr	r0, [pc, #140]	; (b50f4 <setup+0xcc>)
   b5066:	e9cd 4400 	strd	r4, r4, [sp]
   b506a:	f000 fef9 	bl	b5e60 <spark_subscribe>
    get_data(Time.day());
   b506e:	f001 fad3 	bl	b6618 <_ZN9TimeClass3dayEv>
   b5072:	f7ff ff49 	bl	b4f08 <_Z8get_datai>
    Serial.printf("Return value: %d", client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt"));
   b5076:	f001 ff35 	bl	b6ee4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b507a:	491f      	ldr	r1, [pc, #124]	; (b50f8 <setup+0xd0>)
   b507c:	4604      	mov	r4, r0
   b507e:	a806      	add	r0, sp, #24
   b5080:	f001 f89b 	bl	b61ba <_ZN6StringC1EPK19__FlashStringHelper>
   b5084:	f001 fa9f 	bl	b65c6 <_ZN9TimeClass3nowEv>
   b5088:	220a      	movs	r2, #10
   b508a:	4601      	mov	r1, r0
   b508c:	a802      	add	r0, sp, #8
   b508e:	f001 f8e7 	bl	b6260 <_ZN6StringC1Elh>
   b5092:	a902      	add	r1, sp, #8
   b5094:	a806      	add	r0, sp, #24
   b5096:	f001 f911 	bl	b62bc <_ZplRK15StringSumHelperRK6String>
   b509a:	4b18      	ldr	r3, [pc, #96]	; (b50fc <setup+0xd4>)
   b509c:	6801      	ldr	r1, [r0, #0]
   b509e:	4818      	ldr	r0, [pc, #96]	; (b5100 <setup+0xd8>)
   b50a0:	461a      	mov	r2, r3
   b50a2:	f000 fa71 	bl	b5588 <_ZN4MQTT7connectEPKcS1_S1_>
   b50a6:	4917      	ldr	r1, [pc, #92]	; (b5104 <setup+0xdc>)
   b50a8:	4602      	mov	r2, r0
   b50aa:	4620      	mov	r0, r4
   b50ac:	f7ff fd68 	bl	b4b80 <_ZN5Print6printfEPKcz>
   b50b0:	a802      	add	r0, sp, #8
   b50b2:	f001 f837 	bl	b6124 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b50b6:	a806      	add	r0, sp, #24
   b50b8:	f001 f834 	bl	b6124 <_ZN6StringD1Ev>
    if (client.isConnected())
   b50bc:	4810      	ldr	r0, [pc, #64]	; (b5100 <setup+0xd8>)
   b50be:	f000 f973 	bl	b53a8 <_ZN4MQTT11isConnectedEv>
   b50c2:	b158      	cbz	r0, b50dc <setup+0xb4>
        client.publish("power/get", "hello world");
   b50c4:	4a10      	ldr	r2, [pc, #64]	; (b5108 <setup+0xe0>)
   b50c6:	4911      	ldr	r1, [pc, #68]	; (b510c <setup+0xe4>)
   b50c8:	480d      	ldr	r0, [pc, #52]	; (b5100 <setup+0xd8>)
   b50ca:	f000 fae8 	bl	b569e <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b50ce:	4910      	ldr	r1, [pc, #64]	; (b5110 <setup+0xe8>)
   b50d0:	480b      	ldr	r0, [pc, #44]	; (b5100 <setup+0xd8>)
}
   b50d2:	b00a      	add	sp, #40	; 0x28
   b50d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        client.subscribe("power/prices");
   b50d8:	f000 bc85 	b.w	b59e6 <_ZN4MQTT9subscribeEPKc>
}
   b50dc:	b00a      	add	sp, #40	; 0x28
   b50de:	bd10      	pop	{r4, pc}
   b50e0:	2003d1ac 	.word	0x2003d1ac
   b50e4:	000b4a41 	.word	0x000b4a41
   b50e8:	000b4a7d 	.word	0x000b4a7d
   b50ec:	000b9f48 	.word	0x000b9f48
   b50f0:	000b5115 	.word	0x000b5115
   b50f4:	000b9f10 	.word	0x000b9f10
   b50f8:	000b9d81 	.word	0x000b9d81
   b50fc:	000b9d8e 	.word	0x000b9d8e
   b5100:	2003cf00 	.word	0x2003cf00
   b5104:	000b9f1b 	.word	0x000b9f1b
   b5108:	000b9f2c 	.word	0x000b9f2c
   b510c:	000b9f38 	.word	0x000b9f38
   b5110:	000b9f42 	.word	0x000b9f42

000b5114 <_Z14myPriceHandlerPKcS0_>:
{
   b5114:	b508      	push	{r3, lr}
    get_data(Time.day());
   b5116:	f001 fa7f 	bl	b6618 <_ZN9TimeClass3dayEv>
}
   b511a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    get_data(Time.day());
   b511e:	f7ff bef3 	b.w	b4f08 <_Z8get_datai>
	...

000b5124 <_GLOBAL__sub_I_cost>:
   b5124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
   b5126:	4a0b      	ldr	r2, [pc, #44]	; (b5154 <_GLOBAL__sub_I_cost+0x30>)
MQTT client(HOST, PORT, 512, 30, callback);
   b5128:	480b      	ldr	r0, [pc, #44]	; (b5158 <_GLOBAL__sub_I_cost+0x34>)
   b512a:	2300      	movs	r3, #0
   b512c:	7013      	strb	r3, [r2, #0]
   b512e:	4a0b      	ldr	r2, [pc, #44]	; (b515c <_GLOBAL__sub_I_cost+0x38>)
   b5130:	2101      	movs	r1, #1
   b5132:	7011      	strb	r1, [r2, #0]
   b5134:	9302      	str	r3, [sp, #8]
   b5136:	4b0a      	ldr	r3, [pc, #40]	; (b5160 <_GLOBAL__sub_I_cost+0x3c>)
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	231e      	movs	r3, #30
   b513c:	9300      	str	r3, [sp, #0]
   b513e:	4909      	ldr	r1, [pc, #36]	; (b5164 <_GLOBAL__sub_I_cost+0x40>)
   b5140:	f44f 7300 	mov.w	r3, #512	; 0x200
   b5144:	f240 725b 	movw	r2, #1883	; 0x75b
   b5148:	f000 f852 	bl	b51f0 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
   b514c:	b005      	add	sp, #20
   b514e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5152:	bf00      	nop
   b5154:	2003cef8 	.word	0x2003cef8
   b5158:	2003cf00 	.word	0x2003cf00
   b515c:	2003cef9 	.word	0x2003cef9
   b5160:	000b4a35 	.word	0x000b4a35
   b5164:	000b9f4f 	.word	0x000b9f4f

000b5168 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5168:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b516c:	b510      	push	{r4, lr}
   b516e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5170:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5172:	b113      	cbz	r3, b517a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5174:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5176:	f000 fc97 	bl	b5aa8 <os_mutex_lock>
#endif
#endif
#endif
        }
   b517a:	4620      	mov	r0, r4
   b517c:	bd10      	pop	{r4, pc}

000b517e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b517e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5180:	6803      	ldr	r3, [r0, #0]
   b5182:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5186:	4604      	mov	r4, r0
            if (mqtt->thread)
   b5188:	b112      	cbz	r2, b5190 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b518a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b518c:	f000 fc94 	bl	b5ab8 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5190:	4620      	mov	r0, r4
   b5192:	bd10      	pop	{r4, pc}

000b5194 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5196:	461f      	mov	r7, r3
   b5198:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b519c:	4604      	mov	r4, r0
   b519e:	460d      	mov	r5, r1
   b51a0:	4616      	mov	r6, r2
    if (thread) {
   b51a2:	b12b      	cbz	r3, b51b0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b51a4:	2301      	movs	r3, #1
   b51a6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b51aa:	3058      	adds	r0, #88	; 0x58
   b51ac:	f000 fc74 	bl	b5a98 <os_mutex_create>
    }
    this->callback = callback;
   b51b0:	9b08      	ldr	r3, [sp, #32]
   b51b2:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b51b4:	2300      	movs	r3, #0
   b51b6:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b51b8:	b106      	cbz	r6, b51bc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b51ba:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b51bc:	b125      	cbz	r5, b51c8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b51be:	4629      	mov	r1, r5
   b51c0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b51c4:	f001 f827 	bl	b6216 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b51c8:	9b06      	ldr	r3, [sp, #24]
   b51ca:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b51cc:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b51ce:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b51d0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b51d4:	2bff      	cmp	r3, #255	; 0xff
   b51d6:	bfb8      	it	lt
   b51d8:	23ff      	movlt	r3, #255	; 0xff
   b51da:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b51de:	b108      	cbz	r0, b51e4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b51e0:	f7ff fc1b 	bl	b4a1a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b51e4:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b51e8:	f7ff fc15 	bl	b4a16 <_Znaj>
   b51ec:	61e0      	str	r0, [r4, #28]
}
   b51ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51f0 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b51f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b51f4:	4604      	mov	r4, r0
            bool thread) {
   b51f6:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b51f8:	4617      	mov	r7, r2
   b51fa:	4698      	mov	r8, r3
   b51fc:	460e      	mov	r6, r1
            bool thread) {
   b51fe:	f002 fa1f 	bl	b7640 <_ZN9TCPClientC1Ev>
   b5202:	490d      	ldr	r1, [pc, #52]	; (b5238 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b5204:	61e5      	str	r5, [r4, #28]
   b5206:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b520a:	f000 ffd6 	bl	b61ba <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b520e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b5212:	9303      	str	r3, [sp, #12]
   b5214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b5216:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5218:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b521c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b521e:	9300      	str	r3, [sp, #0]
   b5220:	4620      	mov	r0, r4
            bool thread) {
   b5222:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5226:	463b      	mov	r3, r7
   b5228:	462a      	mov	r2, r5
   b522a:	4631      	mov	r1, r6
   b522c:	f7ff ffb2 	bl	b5194 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5230:	4620      	mov	r0, r4
   b5232:	b004      	add	sp, #16
   b5234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5238:	000b9e0b 	.word	0x000b9e0b

000b523c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b523c:	b510      	push	{r4, lr}
   b523e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5240:	4620      	mov	r0, r4
   b5242:	f002 f959 	bl	b74f8 <_ZN9TCPClient9availableEv>
   b5246:	2800      	cmp	r0, #0
   b5248:	d0fa      	beq.n	b5240 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b524a:	4620      	mov	r0, r4
   b524c:	f001 ff62 	bl	b7114 <_ZN9TCPClient4readEv>
}
   b5250:	b2c0      	uxtb	r0, r0
   b5252:	bd10      	pop	{r4, pc}

000b5254 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5258:	4605      	mov	r5, r0
   b525a:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b525c:	f7ff ffee 	bl	b523c <_ZN4MQTT8readByteEv>
   b5260:	69eb      	ldr	r3, [r5, #28]
   b5262:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5264:	69eb      	ldr	r3, [r5, #28]
   b5266:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b526a:	f04f 0901 	mov.w	r9, #1
   b526e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5272:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5274:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5276:	4628      	mov	r0, r5
   b5278:	f7ff ffe0 	bl	b523c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b527c:	4626      	mov	r6, r4
   b527e:	69eb      	ldr	r3, [r5, #28]
   b5280:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5282:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b5286:	fb13 f309 	smulbb	r3, r3, r9
   b528a:	441f      	add	r7, r3
        buffer[len++] = digit;
   b528c:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b528e:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5290:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5292:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5294:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5298:	d4ed      	bmi.n	b5276 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b529a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b529c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b52a0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b52a4:	d11e      	bne.n	b52e4 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b52a6:	4628      	mov	r0, r5
   b52a8:	f7ff ffc8 	bl	b523c <_ZN4MQTT8readByteEv>
   b52ac:	69eb      	ldr	r3, [r5, #28]
   b52ae:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b52b0:	4628      	mov	r0, r5
   b52b2:	f7ff ffc3 	bl	b523c <_ZN4MQTT8readByteEv>
   b52b6:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b52b8:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b52ba:	b2b6      	uxth	r6, r6
   b52bc:	69eb      	ldr	r3, [r5, #28]
   b52be:	b2a4      	uxth	r4, r4
   b52c0:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b52c2:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b52c4:	b2b6      	uxth	r6, r6
   b52c6:	42be      	cmp	r6, r7
   b52c8:	d20e      	bcs.n	b52e8 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b52ca:	4628      	mov	r0, r5
   b52cc:	f7ff ffb6 	bl	b523c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b52d0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b52d4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b52d6:	bf84      	itt	hi
   b52d8:	69eb      	ldrhi	r3, [r5, #28]
   b52da:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b52dc:	3401      	adds	r4, #1
   b52de:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b52e0:	3601      	adds	r6, #1
   b52e2:	e7ef      	b.n	b52c4 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b52e4:	2600      	movs	r6, #0
   b52e6:	e7ed      	b.n	b52c4 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b52e8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b52ec:	42a3      	cmp	r3, r4
   b52ee:	bf2c      	ite	cs
   b52f0:	4620      	movcs	r0, r4
   b52f2:	2000      	movcc	r0, #0
   b52f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b52f8 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b52f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b52fc:	4615      	mov	r5, r2
   b52fe:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5300:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5302:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5304:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5306:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5308:	a802      	add	r0, sp, #8
        digit = len % 128;
   b530a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b530e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5312:	f103 0401 	add.w	r4, r3, #1
   b5316:	4403      	add	r3, r0
            digit |= 0x80;
   b5318:	bf88      	it	hi
   b531a:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b531e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b5322:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b5326:	b2e4      	uxtb	r4, r4
   b5328:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b532c:	d81e      	bhi.n	b536c <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b532e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5332:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b5336:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5338:	4622      	mov	r2, r4
   b533a:	a901      	add	r1, sp, #4
   b533c:	4428      	add	r0, r5
    buf[4-llen] = header;
   b533e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5342:	f002 fc84 	bl	b7c4e <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b5346:	1c72      	adds	r2, r6, #1
   b5348:	4422      	add	r2, r4
   b534a:	4641      	mov	r1, r8
   b534c:	4638      	mov	r0, r7
   b534e:	f001 fecc 	bl	b70ea <_ZN9TCPClient5writeEPKhj>
   b5352:	4605      	mov	r5, r0
   b5354:	f000 fb88 	bl	b5a68 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5358:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b535a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b535c:	4432      	add	r2, r6
   b535e:	b2a8      	uxth	r0, r5
}
   b5360:	1a13      	subs	r3, r2, r0
   b5362:	4258      	negs	r0, r3
   b5364:	4158      	adcs	r0, r3
   b5366:	b002      	add	sp, #8
   b5368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b536c:	4623      	mov	r3, r4
   b536e:	e7ca      	b.n	b5306 <_ZN4MQTT5writeEhPht+0xe>

000b5370 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5370:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5372:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5374:	4605      	mov	r5, r0
    pos += 2;
   b5376:	b298      	uxth	r0, r3
   b5378:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b537a:	5cce      	ldrb	r6, [r1, r3]
   b537c:	b29c      	uxth	r4, r3
   b537e:	b156      	cbz	r6, b5396 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5380:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b5384:	4584      	cmp	ip, r0
   b5386:	f103 0701 	add.w	r7, r3, #1
   b538a:	d904      	bls.n	b5396 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b538c:	1c44      	adds	r4, r0, #1
   b538e:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5390:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b5392:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b5394:	e7f1      	b.n	b537a <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b5396:	b299      	uxth	r1, r3
   b5398:	1a41      	subs	r1, r0, r1
   b539a:	440a      	add	r2, r1
   b539c:	0a21      	lsrs	r1, r4, #8
   b539e:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b53a2:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b53a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b53a8 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b53a8:	b538      	push	{r3, r4, r5, lr}
   b53aa:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b53ac:	f001 ffc6 	bl	b733c <_ZN9TCPClient9connectedEv>
   b53b0:	2800      	cmp	r0, #0
   b53b2:	bf14      	ite	ne
   b53b4:	2501      	movne	r5, #1
   b53b6:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b53b8:	d102      	bne.n	b53c0 <_ZN4MQTT11isConnectedEv+0x18>
   b53ba:	4620      	mov	r0, r4
   b53bc:	f002 f8f6 	bl	b75ac <_ZN9TCPClient4stopEv>
    return rc;
}
   b53c0:	4628      	mov	r0, r5
   b53c2:	bd38      	pop	{r3, r4, r5, pc}

000b53c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b53c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b53c8:	b088      	sub	sp, #32
   b53ca:	4604      	mov	r4, r0
   b53cc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b53d0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b53d4:	4689      	mov	r9, r1
   b53d6:	4617      	mov	r7, r2
   b53d8:	461e      	mov	r6, r3
    if (!isConnected()) {
   b53da:	f7ff ffe5 	bl	b53a8 <_ZN4MQTT11isConnectedEv>
   b53de:	4605      	mov	r5, r0
   b53e0:	2800      	cmp	r0, #0
   b53e2:	f040 80cd 	bne.w	b5580 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b53e6:	4621      	mov	r1, r4
   b53e8:	a801      	add	r0, sp, #4
   b53ea:	f7ff febd 	bl	b5168 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b53ee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b53f0:	2900      	cmp	r1, #0
   b53f2:	f040 8088 	bne.w	b5506 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b53f6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b53fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b53fc:	462b      	mov	r3, r5
   b53fe:	4620      	mov	r0, r4
   b5400:	f001 ff1e 	bl	b7240 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5404:	2800      	cmp	r0, #0
   b5406:	d07a      	beq.n	b54fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5408:	2301      	movs	r3, #1
   b540a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b540c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5410:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b5412:	2b04      	cmp	r3, #4
   b5414:	4b5b      	ldr	r3, [pc, #364]	; (b5584 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b5416:	f040 8081 	bne.w	b551c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b541a:	6818      	ldr	r0, [r3, #0]
   b541c:	8899      	ldrh	r1, [r3, #4]
   b541e:	799b      	ldrb	r3, [r3, #6]
   b5420:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5424:	f88d 300e 	strb.w	r3, [sp, #14]
   b5428:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b542a:	f8c2 0005 	str.w	r0, [r2, #5]
   b542e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5432:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5436:	f8a2 1009 	strh.w	r1, [r2, #9]
   b543a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b543c:	230c      	movs	r3, #12
            if (willTopic) {
   b543e:	f1b8 0f00 	cmp.w	r8, #0
   b5442:	f000 8081 	beq.w	b5548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5446:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b544a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b544e:	0140      	lsls	r0, r0, #5
   b5450:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5454:	f040 0006 	orr.w	r0, r0, #6
   b5458:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b545a:	f1ba 0f00 	cmp.w	sl, #0
   b545e:	d101      	bne.n	b5464 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5460:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5464:	b11f      	cbz	r7, b546e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5466:	2e00      	cmp	r6, #0
   b5468:	d170      	bne.n	b554c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b546a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b546e:	69e2      	ldr	r2, [r4, #28]
   b5470:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b5472:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5474:	69e1      	ldr	r1, [r4, #28]
   b5476:	1c58      	adds	r0, r3, #1
   b5478:	1212      	asrs	r2, r2, #8
   b547a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b547c:	1c9a      	adds	r2, r3, #2
   b547e:	69e1      	ldr	r1, [r4, #28]
   b5480:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5482:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5484:	3303      	adds	r3, #3
   b5486:	69e2      	ldr	r2, [r4, #28]
   b5488:	4649      	mov	r1, r9
   b548a:	4620      	mov	r0, r4
   b548c:	f7ff ff70 	bl	b5370 <_ZN4MQTT11writeStringEPKcPht>
   b5490:	4603      	mov	r3, r0
            if (willTopic) {
   b5492:	f1b8 0f00 	cmp.w	r8, #0
   b5496:	d00b      	beq.n	b54b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5498:	69e2      	ldr	r2, [r4, #28]
   b549a:	4641      	mov	r1, r8
   b549c:	4620      	mov	r0, r4
   b549e:	f7ff ff67 	bl	b5370 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b54a2:	69e2      	ldr	r2, [r4, #28]
   b54a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b54a6:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b54a8:	4620      	mov	r0, r4
   b54aa:	f7ff ff61 	bl	b5370 <_ZN4MQTT11writeStringEPKcPht>
   b54ae:	4603      	mov	r3, r0
            if(user != NULL) {
   b54b0:	b167      	cbz	r7, b54cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b54b2:	69e2      	ldr	r2, [r4, #28]
   b54b4:	4639      	mov	r1, r7
   b54b6:	4620      	mov	r0, r4
   b54b8:	f7ff ff5a 	bl	b5370 <_ZN4MQTT11writeStringEPKcPht>
   b54bc:	4603      	mov	r3, r0
                if(pass != NULL) {
   b54be:	b12e      	cbz	r6, b54cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b54c0:	69e2      	ldr	r2, [r4, #28]
   b54c2:	4631      	mov	r1, r6
   b54c4:	4620      	mov	r0, r4
   b54c6:	f7ff ff53 	bl	b5370 <_ZN4MQTT11writeStringEPKcPht>
   b54ca:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b54cc:	3b05      	subs	r3, #5
   b54ce:	69e2      	ldr	r2, [r4, #28]
   b54d0:	b29b      	uxth	r3, r3
   b54d2:	2110      	movs	r1, #16
   b54d4:	4620      	mov	r0, r4
   b54d6:	f7ff ff0f 	bl	b52f8 <_ZN4MQTT5writeEhPht>
   b54da:	f000 fac5 	bl	b5a68 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b54de:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b54e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b54e6:	4620      	mov	r0, r4
   b54e8:	f002 f806 	bl	b74f8 <_ZN9TCPClient9availableEv>
   b54ec:	bb88      	cbnz	r0, b5552 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b54ee:	f000 fabb 	bl	b5a68 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b54f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b54f4:	1ac0      	subs	r0, r0, r3
   b54f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b54f8:	4373      	muls	r3, r6
   b54fa:	4298      	cmp	r0, r3
   b54fc:	d9f3      	bls.n	b54e6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b54fe:	4620      	mov	r0, r4
   b5500:	f002 f854 	bl	b75ac <_ZN9TCPClient4stopEv>
   b5504:	e035      	b.n	b5572 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5506:	a802      	add	r0, sp, #8
   b5508:	f001 fc82 	bl	b6e10 <_ZN9IPAddressC1EPKh>
   b550c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5510:	462b      	mov	r3, r5
   b5512:	a902      	add	r1, sp, #8
   b5514:	4620      	mov	r0, r4
   b5516:	f001 ff73 	bl	b7400 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b551a:	e773      	b.n	b5404 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b551c:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5520:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5524:	7bdb      	ldrb	r3, [r3, #15]
   b5526:	f10d 0c08 	add.w	ip, sp, #8
   b552a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b552e:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5532:	ab02      	add	r3, sp, #8
   b5534:	cb03      	ldmia	r3!, {r0, r1}
   b5536:	f8c2 0005 	str.w	r0, [r2, #5]
   b553a:	f8c2 1009 	str.w	r1, [r2, #9]
   b553e:	f89c 3000 	ldrb.w	r3, [ip]
   b5542:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5544:	230e      	movs	r3, #14
   b5546:	e77a      	b.n	b543e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5548:	2002      	movs	r0, #2
   b554a:	e786      	b.n	b545a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b554c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5550:	e78d      	b.n	b546e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5552:	a902      	add	r1, sp, #8
   b5554:	4620      	mov	r0, r4
   b5556:	f7ff fe7d 	bl	b5254 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b555a:	2804      	cmp	r0, #4
   b555c:	d1cf      	bne.n	b54fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b555e:	69e3      	ldr	r3, [r4, #28]
   b5560:	78de      	ldrb	r6, [r3, #3]
   b5562:	2e00      	cmp	r6, #0
   b5564:	d1cb      	bne.n	b54fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b5566:	f000 fa7f 	bl	b5a68 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b556a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b556c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b556e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b5572:	a801      	add	r0, sp, #4
   b5574:	f7ff fe03 	bl	b517e <_ZN4MQTT11MutexLockerD1Ev>
}
   b5578:	4628      	mov	r0, r5
   b557a:	b008      	add	sp, #32
   b557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5580:	2500      	movs	r5, #0
   b5582:	e7f9      	b.n	b5578 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b5584:	000b9d3c 	.word	0x000b9d3c

000b5588 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b5588:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b558a:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b558e:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b5590:	2401      	movs	r4, #1
   b5592:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b5596:	2400      	movs	r4, #0
   b5598:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b559c:	e9cd 4400 	strd	r4, r4, [sp]
   b55a0:	f7ff ff10 	bl	b53c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b55a4:	b006      	add	sp, #24
   b55a6:	bd10      	pop	{r4, pc}

000b55a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b55a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55ac:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b55b0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b55b4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b55b8:	4604      	mov	r4, r0
   b55ba:	468b      	mov	fp, r1
   b55bc:	4616      	mov	r6, r2
   b55be:	461f      	mov	r7, r3
    if (isConnected()) {
   b55c0:	f7ff fef2 	bl	b53a8 <_ZN4MQTT11isConnectedEv>
   b55c4:	4682      	mov	sl, r0
   b55c6:	2800      	cmp	r0, #0
   b55c8:	d051      	beq.n	b566e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b55ca:	4621      	mov	r1, r4
   b55cc:	a801      	add	r0, sp, #4
   b55ce:	f7ff fdcb 	bl	b5168 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b55d2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b55d6:	69e0      	ldr	r0, [r4, #28]
   b55d8:	2100      	movs	r1, #0
   b55da:	f002 fb46 	bl	b7c6a <memset>
        length = writeString(topic, buffer, length);
   b55de:	2305      	movs	r3, #5
   b55e0:	69e2      	ldr	r2, [r4, #28]
   b55e2:	4659      	mov	r1, fp
   b55e4:	4620      	mov	r0, r4
   b55e6:	f7ff fec3 	bl	b5370 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b55ea:	1e6b      	subs	r3, r5, #1
   b55ec:	2b01      	cmp	r3, #1
   b55ee:	d815      	bhi.n	b561c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b55f0:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b55f2:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b55f4:	3101      	adds	r1, #1
   b55f6:	b289      	uxth	r1, r1
   b55f8:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b55fa:	0a09      	lsrs	r1, r1, #8
   b55fc:	5419      	strb	r1, [r3, r0]
   b55fe:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5600:	69e3      	ldr	r3, [r4, #28]
   b5602:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5604:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5606:	3002      	adds	r0, #2
   b5608:	5499      	strb	r1, [r3, r2]
   b560a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b560c:	f1b8 0f00 	cmp.w	r8, #0
   b5610:	d004      	beq.n	b561c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b5612:	8c23      	ldrh	r3, [r4, #32]
   b5614:	1c5a      	adds	r2, r3, #1
   b5616:	8422      	strh	r2, [r4, #32]
   b5618:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b561c:	2100      	movs	r1, #0
   b561e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5620:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b5622:	69e2      	ldr	r2, [r4, #28]
   b5624:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5626:	d90a      	bls.n	b563e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5628:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b562c:	459c      	cmp	ip, r3
   b562e:	d906      	bls.n	b563e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5630:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5634:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5638:	3101      	adds	r1, #1
   b563a:	b289      	uxth	r1, r1
   b563c:	e7ef      	b.n	b561e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b563e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b5642:	2900      	cmp	r1, #0
   b5644:	bf0c      	ite	eq
   b5646:	2130      	moveq	r1, #48	; 0x30
   b5648:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b564a:	f1b9 0f00 	cmp.w	r9, #0
   b564e:	d001      	beq.n	b5654 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5650:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b5654:	2d02      	cmp	r5, #2
   b5656:	d10e      	bne.n	b5676 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b5658:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b565c:	3b05      	subs	r3, #5
   b565e:	b29b      	uxth	r3, r3
   b5660:	4620      	mov	r0, r4
   b5662:	f7ff fe49 	bl	b52f8 <_ZN4MQTT5writeEhPht>
   b5666:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b5668:	a801      	add	r0, sp, #4
   b566a:	f7ff fd88 	bl	b517e <_ZN4MQTT11MutexLockerD1Ev>
}
   b566e:	4650      	mov	r0, sl
   b5670:	b003      	add	sp, #12
   b5672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b5676:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b5678:	bf08      	it	eq
   b567a:	f041 0102 	orreq.w	r1, r1, #2
   b567e:	e7ed      	b.n	b565c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b5680 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b5680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b5682:	9c08      	ldr	r4, [sp, #32]
   b5684:	9403      	str	r4, [sp, #12]
   b5686:	2400      	movs	r4, #0
   b5688:	9402      	str	r4, [sp, #8]
   b568a:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b568e:	9401      	str	r4, [sp, #4]
   b5690:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b5694:	9400      	str	r4, [sp, #0]
   b5696:	f7ff ff87 	bl	b55a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b569a:	b004      	add	sp, #16
   b569c:	bd10      	pop	{r4, pc}

000b569e <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b569e:	b530      	push	{r4, r5, lr}
   b56a0:	b087      	sub	sp, #28
   b56a2:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b56a4:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b56a6:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b56a8:	9204      	str	r2, [sp, #16]
   b56aa:	f7ff f957 	bl	b495c <strlen>
   b56ae:	2500      	movs	r5, #0
   b56b0:	4603      	mov	r3, r0
   b56b2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b56b6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b56ba:	9500      	str	r5, [sp, #0]
   b56bc:	4620      	mov	r0, r4
   b56be:	f7ff ffdf 	bl	b5680 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b56c2:	b007      	add	sp, #28
   b56c4:	bd30      	pop	{r4, r5, pc}

000b56c6 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b56c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b56c8:	4604      	mov	r4, r0
   b56ca:	460e      	mov	r6, r1
    if (isConnected()) {
   b56cc:	f7ff fe6c 	bl	b53a8 <_ZN4MQTT11isConnectedEv>
   b56d0:	4605      	mov	r5, r0
   b56d2:	b1c8      	cbz	r0, b5708 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b56d4:	4621      	mov	r1, r4
   b56d6:	a801      	add	r0, sp, #4
   b56d8:	f7ff fd46 	bl	b5168 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b56dc:	69e3      	ldr	r3, [r4, #28]
   b56de:	2262      	movs	r2, #98	; 0x62
   b56e0:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b56e2:	69e3      	ldr	r3, [r4, #28]
   b56e4:	2202      	movs	r2, #2
   b56e6:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b56e8:	69e3      	ldr	r3, [r4, #28]
   b56ea:	0a32      	lsrs	r2, r6, #8
   b56ec:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b56ee:	69e3      	ldr	r3, [r4, #28]
   b56f0:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b56f2:	69e1      	ldr	r1, [r4, #28]
   b56f4:	2204      	movs	r2, #4
   b56f6:	4620      	mov	r0, r4
   b56f8:	f001 fcf7 	bl	b70ea <_ZN9TCPClient5writeEPKhj>
   b56fc:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b56fe:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5700:	bf18      	it	ne
   b5702:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5704:	f7ff fd3b 	bl	b517e <_ZN4MQTT11MutexLockerD1Ev>
}
   b5708:	4628      	mov	r0, r5
   b570a:	b002      	add	sp, #8
   b570c:	bd70      	pop	{r4, r5, r6, pc}

000b570e <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b570e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5710:	4604      	mov	r4, r0
   b5712:	460e      	mov	r6, r1
    if (isConnected()) {
   b5714:	f7ff fe48 	bl	b53a8 <_ZN4MQTT11isConnectedEv>
   b5718:	4605      	mov	r5, r0
   b571a:	b1c8      	cbz	r0, b5750 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b571c:	4621      	mov	r1, r4
   b571e:	a801      	add	r0, sp, #4
   b5720:	f7ff fd22 	bl	b5168 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5724:	69e3      	ldr	r3, [r4, #28]
   b5726:	2272      	movs	r2, #114	; 0x72
   b5728:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b572a:	69e3      	ldr	r3, [r4, #28]
   b572c:	2202      	movs	r2, #2
   b572e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5730:	69e3      	ldr	r3, [r4, #28]
   b5732:	0a32      	lsrs	r2, r6, #8
   b5734:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5736:	69e3      	ldr	r3, [r4, #28]
   b5738:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b573a:	69e1      	ldr	r1, [r4, #28]
   b573c:	2204      	movs	r2, #4
   b573e:	4620      	mov	r0, r4
   b5740:	f001 fcd3 	bl	b70ea <_ZN9TCPClient5writeEPKhj>
   b5744:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5746:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5748:	bf18      	it	ne
   b574a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b574c:	f7ff fd17 	bl	b517e <_ZN4MQTT11MutexLockerD1Ev>
}
   b5750:	4628      	mov	r0, r5
   b5752:	b002      	add	sp, #8
   b5754:	bd70      	pop	{r4, r5, r6, pc}

000b5756 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b575a:	ed2d 8b02 	vpush	{d8}
   b575e:	b087      	sub	sp, #28
   b5760:	af00      	add	r7, sp, #0
   b5762:	4604      	mov	r4, r0
    if (isConnected()) {
   b5764:	f7ff fe20 	bl	b53a8 <_ZN4MQTT11isConnectedEv>
   b5768:	4681      	mov	r9, r0
   b576a:	b1f8      	cbz	r0, b57ac <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b576c:	4621      	mov	r1, r4
   b576e:	f107 0014 	add.w	r0, r7, #20
   b5772:	f7ff fcf9 	bl	b5168 <_ZN4MQTT11MutexLockerC1EPS_>
   b5776:	f000 f977 	bl	b5a68 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b577a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b577c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5780:	4353      	muls	r3, r2
   b5782:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5784:	1a82      	subs	r2, r0, r2
   b5786:	429a      	cmp	r2, r3
   b5788:	4606      	mov	r6, r0
   b578a:	d803      	bhi.n	b5794 <_ZN4MQTT4loopEv+0x3e>
   b578c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b578e:	1a82      	subs	r2, r0, r2
   b5790:	4293      	cmp	r3, r2
   b5792:	d221      	bcs.n	b57d8 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5794:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5798:	b17b      	cbz	r3, b57ba <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b579a:	4620      	mov	r0, r4
   b579c:	f001 ff06 	bl	b75ac <_ZN9TCPClient4stopEv>
                return false;
   b57a0:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b57a4:	f107 0014 	add.w	r0, r7, #20
   b57a8:	f7ff fce9 	bl	b517e <_ZN4MQTT11MutexLockerD1Ev>
}
   b57ac:	4648      	mov	r0, r9
   b57ae:	371c      	adds	r7, #28
   b57b0:	46bd      	mov	sp, r7
   b57b2:	ecbd 8b02 	vpop	{d8}
   b57b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b57ba:	69e2      	ldr	r2, [r4, #28]
   b57bc:	21c0      	movs	r1, #192	; 0xc0
   b57be:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b57c0:	69e2      	ldr	r2, [r4, #28]
   b57c2:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b57c4:	69e1      	ldr	r1, [r4, #28]
   b57c6:	2202      	movs	r2, #2
   b57c8:	4620      	mov	r0, r4
   b57ca:	f001 fc8e 	bl	b70ea <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b57ce:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b57d2:	2301      	movs	r3, #1
   b57d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b57d8:	4620      	mov	r0, r4
   b57da:	f001 fe8d 	bl	b74f8 <_ZN9TCPClient9availableEv>
   b57de:	2800      	cmp	r0, #0
   b57e0:	d0e0      	beq.n	b57a4 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b57e2:	f107 0113 	add.w	r1, r7, #19
   b57e6:	4620      	mov	r0, r4
   b57e8:	f7ff fd34 	bl	b5254 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b57ec:	4683      	mov	fp, r0
   b57ee:	2800      	cmp	r0, #0
   b57f0:	d0d8      	beq.n	b57a4 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b57f2:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b57f4:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b57f6:	7819      	ldrb	r1, [r3, #0]
   b57f8:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b57fc:	2a30      	cmp	r2, #48	; 0x30
   b57fe:	d17f      	bne.n	b5900 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5800:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5804:	f1ba 0f00 	cmp.w	sl, #0
   b5808:	d0cc      	beq.n	b57a4 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b580a:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b580e:	466a      	mov	r2, sp
   b5810:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5814:	eb03 020c 	add.w	r2, r3, ip
   b5818:	7851      	ldrb	r1, [r2, #1]
   b581a:	7895      	ldrb	r5, [r2, #2]
   b581c:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5820:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5822:	f105 0208 	add.w	r2, r5, #8
   b5826:	4669      	mov	r1, sp
   b5828:	08d2      	lsrs	r2, r2, #3
   b582a:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b582e:	4695      	mov	sp, r2
   b5830:	f10c 0203 	add.w	r2, ip, #3
   b5834:	60fa      	str	r2, [r7, #12]
   b5836:	eb03 0e02 	add.w	lr, r3, r2
   b583a:	eb0d 0205 	add.w	r2, sp, r5
   b583e:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5840:	f8c7 d008 	str.w	sp, [r7, #8]
   b5844:	607a      	str	r2, [r7, #4]
   b5846:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b584a:	428a      	cmp	r2, r1
   b584c:	d006      	beq.n	b585c <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b584e:	460a      	mov	r2, r1
   b5850:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5854:	f802 8b01 	strb.w	r8, [r2], #1
   b5858:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b585a:	e7f4      	b.n	b5846 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b585c:	2200      	movs	r2, #0
   b585e:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5860:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5864:	68f9      	ldr	r1, [r7, #12]
   b5866:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b586a:	ebab 020c 	sub.w	r2, fp, ip
   b586e:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5870:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5874:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5878:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b587a:	d125      	bne.n	b58c8 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b587c:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5880:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5882:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5884:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5888:	f10c 0105 	add.w	r1, ip, #5
   b588c:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b588e:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5890:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5894:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5896:	69e3      	ldr	r3, [r4, #28]
   b5898:	2240      	movs	r2, #64	; 0x40
   b589a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b589c:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b589e:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b58a2:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b58a6:	69e3      	ldr	r3, [r4, #28]
   b58a8:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b58ac:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b58ae:	69e3      	ldr	r3, [r4, #28]
   b58b0:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b58b4:	69e1      	ldr	r1, [r4, #28]
   b58b6:	2204      	movs	r2, #4
   b58b8:	4620      	mov	r0, r4
   b58ba:	f001 fc16 	bl	b70ea <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b58be:	6266      	str	r6, [r4, #36]	; 0x24
   b58c0:	ee18 3a10 	vmov	r3, s16
   b58c4:	469d      	mov	sp, r3
   b58c6:	e76d      	b.n	b57a4 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b58c8:	f1b8 0f04 	cmp.w	r8, #4
   b58cc:	d115      	bne.n	b58fa <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b58ce:	f813 e001 	ldrb.w	lr, [r3, r1]
   b58d2:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b58d4:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b58d6:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b58da:	f10c 0105 	add.w	r1, ip, #5
   b58de:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b58e0:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b58e2:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b58e6:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b58e8:	69e3      	ldr	r3, [r4, #28]
   b58ea:	2250      	movs	r2, #80	; 0x50
   b58ec:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b58ee:	69e3      	ldr	r3, [r4, #28]
   b58f0:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b58f2:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b58f6:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b58f8:	e7d5      	b.n	b58a6 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b58fa:	4419      	add	r1, r3
   b58fc:	47d0      	blx	sl
   b58fe:	e7df      	b.n	b58c0 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5900:	2a50      	cmp	r2, #80	; 0x50
   b5902:	d108      	bne.n	b5916 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5904:	789a      	ldrb	r2, [r3, #2]
   b5906:	78d9      	ldrb	r1, [r3, #3]
   b5908:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b590c:	b289      	uxth	r1, r1
   b590e:	4620      	mov	r0, r4
   b5910:	f7ff fed9 	bl	b56c6 <_ZN4MQTT14publishReleaseEt>
   b5914:	e746      	b.n	b57a4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5916:	2a40      	cmp	r2, #64	; 0x40
   b5918:	d112      	bne.n	b5940 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b591a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b591c:	2a00      	cmp	r2, #0
   b591e:	f43f af41 	beq.w	b57a4 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5922:	f1bb 0f04 	cmp.w	fp, #4
   b5926:	f47f af3d 	bne.w	b57a4 <_ZN4MQTT4loopEv+0x4e>
   b592a:	f011 0f06 	tst.w	r1, #6
   b592e:	f47f af39 	bne.w	b57a4 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5932:	7899      	ldrb	r1, [r3, #2]
   b5934:	78d8      	ldrb	r0, [r3, #3]
   b5936:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b593a:	b280      	uxth	r0, r0
   b593c:	4790      	blx	r2
   b593e:	e731      	b.n	b57a4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5940:	2a60      	cmp	r2, #96	; 0x60
   b5942:	d108      	bne.n	b5956 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5944:	789a      	ldrb	r2, [r3, #2]
   b5946:	78d9      	ldrb	r1, [r3, #3]
   b5948:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b594c:	b289      	uxth	r1, r1
   b594e:	4620      	mov	r0, r4
   b5950:	f7ff fedd 	bl	b570e <_ZN4MQTT15publishCompleteEt>
   b5954:	e726      	b.n	b57a4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5956:	2a70      	cmp	r2, #112	; 0x70
   b5958:	d0df      	beq.n	b591a <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b595a:	2a90      	cmp	r2, #144	; 0x90
   b595c:	f43f af22 	beq.w	b57a4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5960:	2ac0      	cmp	r2, #192	; 0xc0
   b5962:	d10a      	bne.n	b597a <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5964:	22d0      	movs	r2, #208	; 0xd0
   b5966:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5968:	69e3      	ldr	r3, [r4, #28]
   b596a:	2200      	movs	r2, #0
   b596c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b596e:	69e1      	ldr	r1, [r4, #28]
   b5970:	2202      	movs	r2, #2
   b5972:	4620      	mov	r0, r4
   b5974:	f001 fbb9 	bl	b70ea <_ZN9TCPClient5writeEPKhj>
   b5978:	e714      	b.n	b57a4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b597a:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b597c:	bf04      	itt	eq
   b597e:	2300      	moveq	r3, #0
   b5980:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5984:	e70e      	b.n	b57a4 <_ZN4MQTT4loopEv+0x4e>

000b5986 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5988:	4604      	mov	r4, r0
   b598a:	460f      	mov	r7, r1
   b598c:	4616      	mov	r6, r2
    if (isConnected()) {
   b598e:	f7ff fd0b 	bl	b53a8 <_ZN4MQTT11isConnectedEv>
   b5992:	4605      	mov	r5, r0
   b5994:	b310      	cbz	r0, b59dc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5996:	4621      	mov	r1, r4
   b5998:	a801      	add	r0, sp, #4
   b599a:	f7ff fbe5 	bl	b5168 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b599e:	8c23      	ldrh	r3, [r4, #32]
   b59a0:	3301      	adds	r3, #1
   b59a2:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b59a4:	b1eb      	cbz	r3, b59e2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b59a6:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b59a8:	8c23      	ldrh	r3, [r4, #32]
   b59aa:	69e2      	ldr	r2, [r4, #28]
   b59ac:	0a1b      	lsrs	r3, r3, #8
   b59ae:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b59b0:	69e3      	ldr	r3, [r4, #28]
   b59b2:	8c22      	ldrh	r2, [r4, #32]
   b59b4:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b59b6:	69e2      	ldr	r2, [r4, #28]
   b59b8:	2307      	movs	r3, #7
   b59ba:	4639      	mov	r1, r7
   b59bc:	4620      	mov	r0, r4
   b59be:	f7ff fcd7 	bl	b5370 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b59c2:	69e3      	ldr	r3, [r4, #28]
   b59c4:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b59c6:	3804      	subs	r0, #4
   b59c8:	b283      	uxth	r3, r0
   b59ca:	69e2      	ldr	r2, [r4, #28]
   b59cc:	2182      	movs	r1, #130	; 0x82
   b59ce:	4620      	mov	r0, r4
   b59d0:	f7ff fc92 	bl	b52f8 <_ZN4MQTT5writeEhPht>
   b59d4:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b59d6:	a801      	add	r0, sp, #4
   b59d8:	f7ff fbd1 	bl	b517e <_ZN4MQTT11MutexLockerD1Ev>
}
   b59dc:	4628      	mov	r0, r5
   b59de:	b003      	add	sp, #12
   b59e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b59e2:	2301      	movs	r3, #1
   b59e4:	e7df      	b.n	b59a6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b59e6 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b59e6:	2200      	movs	r2, #0
   b59e8:	f7ff bfcd 	b.w	b5986 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b59ec <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
   b59ec:	4b01      	ldr	r3, [pc, #4]	; (b59f4 <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b59ee:	2200      	movs	r2, #0
   b59f0:	701a      	strb	r2, [r3, #0]
    else
        Serial.println("Particle Not Connected.");
    
}

   b59f2:	4770      	bx	lr
   b59f4:	2003e67f 	.word	0x2003e67f

000b59f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b59f8:	b508      	push	{r3, lr}
   b59fa:	4b02      	ldr	r3, [pc, #8]	; (b5a04 <netdb_freeaddrinfo+0xc>)
   b59fc:	681b      	ldr	r3, [r3, #0]
   b59fe:	689b      	ldr	r3, [r3, #8]
   b5a00:	9301      	str	r3, [sp, #4]
   b5a02:	bd08      	pop	{r3, pc}
   b5a04:	00030268 	.word	0x00030268

000b5a08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5a08:	b508      	push	{r3, lr}
   b5a0a:	4b02      	ldr	r3, [pc, #8]	; (b5a14 <netdb_getaddrinfo+0xc>)
   b5a0c:	681b      	ldr	r3, [r3, #0]
   b5a0e:	68db      	ldr	r3, [r3, #12]
   b5a10:	9301      	str	r3, [sp, #4]
   b5a12:	bd08      	pop	{r3, pc}
   b5a14:	00030268 	.word	0x00030268

000b5a18 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5a18:	b508      	push	{r3, lr}
   b5a1a:	4b02      	ldr	r3, [pc, #8]	; (b5a24 <hal_gpio_mode+0xc>)
   b5a1c:	681b      	ldr	r3, [r3, #0]
   b5a1e:	689b      	ldr	r3, [r3, #8]
   b5a20:	9301      	str	r3, [sp, #4]
   b5a22:	bd08      	pop	{r3, pc}
   b5a24:	0003022c 	.word	0x0003022c

000b5a28 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5a28:	b508      	push	{r3, lr}
   b5a2a:	4b02      	ldr	r3, [pc, #8]	; (b5a34 <hal_interrupt_attach+0xc>)
   b5a2c:	681b      	ldr	r3, [r3, #0]
   b5a2e:	699b      	ldr	r3, [r3, #24]
   b5a30:	9301      	str	r3, [sp, #4]
   b5a32:	bd08      	pop	{r3, pc}
   b5a34:	0003022c 	.word	0x0003022c

000b5a38 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5a38:	b508      	push	{r3, lr}
   b5a3a:	4b02      	ldr	r3, [pc, #8]	; (b5a44 <hal_interrupt_detach+0xc>)
   b5a3c:	681b      	ldr	r3, [r3, #0]
   b5a3e:	69db      	ldr	r3, [r3, #28]
   b5a40:	9301      	str	r3, [sp, #4]
   b5a42:	bd08      	pop	{r3, pc}
   b5a44:	0003022c 	.word	0x0003022c

000b5a48 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5a48:	b508      	push	{r3, lr}
   b5a4a:	4b02      	ldr	r3, [pc, #8]	; (b5a54 <if_index_to_name+0xc>)
   b5a4c:	681b      	ldr	r3, [r3, #0]
   b5a4e:	695b      	ldr	r3, [r3, #20]
   b5a50:	9301      	str	r3, [sp, #4]
   b5a52:	bd08      	pop	{r3, pc}
   b5a54:	0003026c 	.word	0x0003026c

000b5a58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5a58:	b508      	push	{r3, lr}
   b5a5a:	4b02      	ldr	r3, [pc, #8]	; (b5a64 <HAL_RNG_GetRandomNumber+0xc>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
   b5a5e:	685b      	ldr	r3, [r3, #4]
   b5a60:	9301      	str	r3, [sp, #4]
   b5a62:	bd08      	pop	{r3, pc}
   b5a64:	00030218 	.word	0x00030218

000b5a68 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5a68:	b508      	push	{r3, lr}
   b5a6a:	4b02      	ldr	r3, [pc, #8]	; (b5a74 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5a6c:	681b      	ldr	r3, [r3, #0]
   b5a6e:	695b      	ldr	r3, [r3, #20]
   b5a70:	9301      	str	r3, [sp, #4]
   b5a72:	bd08      	pop	{r3, pc}
   b5a74:	00030218 	.word	0x00030218

000b5a78 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5a78:	b508      	push	{r3, lr}
   b5a7a:	4b02      	ldr	r3, [pc, #8]	; (b5a84 <hal_rtc_time_is_valid+0xc>)
   b5a7c:	681b      	ldr	r3, [r3, #0]
   b5a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5a80:	9301      	str	r3, [sp, #4]
   b5a82:	bd08      	pop	{r3, pc}
   b5a84:	00030218 	.word	0x00030218

000b5a88 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5a88:	b508      	push	{r3, lr}
   b5a8a:	4b02      	ldr	r3, [pc, #8]	; (b5a94 <hal_rtc_get_time+0xc>)
   b5a8c:	681b      	ldr	r3, [r3, #0]
   b5a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5a90:	9301      	str	r3, [sp, #4]
   b5a92:	bd08      	pop	{r3, pc}
   b5a94:	00030218 	.word	0x00030218

000b5a98 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5a98:	b508      	push	{r3, lr}
   b5a9a:	4b02      	ldr	r3, [pc, #8]	; (b5aa4 <os_mutex_create+0xc>)
   b5a9c:	681b      	ldr	r3, [r3, #0]
   b5a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5aa0:	9301      	str	r3, [sp, #4]
   b5aa2:	bd08      	pop	{r3, pc}
   b5aa4:	00030248 	.word	0x00030248

000b5aa8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5aa8:	b508      	push	{r3, lr}
   b5aaa:	4b02      	ldr	r3, [pc, #8]	; (b5ab4 <os_mutex_lock+0xc>)
   b5aac:	681b      	ldr	r3, [r3, #0]
   b5aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5ab0:	9301      	str	r3, [sp, #4]
   b5ab2:	bd08      	pop	{r3, pc}
   b5ab4:	00030248 	.word	0x00030248

000b5ab8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5ab8:	b508      	push	{r3, lr}
   b5aba:	4b02      	ldr	r3, [pc, #8]	; (b5ac4 <os_mutex_unlock+0xc>)
   b5abc:	681b      	ldr	r3, [r3, #0]
   b5abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ac0:	9301      	str	r3, [sp, #4]
   b5ac2:	bd08      	pop	{r3, pc}
   b5ac4:	00030248 	.word	0x00030248

000b5ac8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5ac8:	b508      	push	{r3, lr}
   b5aca:	4b02      	ldr	r3, [pc, #8]	; (b5ad4 <os_mutex_recursive_create+0xc>)
   b5acc:	681b      	ldr	r3, [r3, #0]
   b5ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ad0:	9301      	str	r3, [sp, #4]
   b5ad2:	bd08      	pop	{r3, pc}
   b5ad4:	00030248 	.word	0x00030248

000b5ad8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ad8:	b508      	push	{r3, lr}
   b5ada:	4b02      	ldr	r3, [pc, #8]	; (b5ae4 <inet_inet_ntop+0xc>)
   b5adc:	681b      	ldr	r3, [r3, #0]
   b5ade:	695b      	ldr	r3, [r3, #20]
   b5ae0:	9301      	str	r3, [sp, #4]
   b5ae2:	bd08      	pop	{r3, pc}
   b5ae4:	00030264 	.word	0x00030264

000b5ae8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5ae8:	b508      	push	{r3, lr}
   b5aea:	4b02      	ldr	r3, [pc, #8]	; (b5af4 <inet_htonl+0xc>)
   b5aec:	681b      	ldr	r3, [r3, #0]
   b5aee:	6a1b      	ldr	r3, [r3, #32]
   b5af0:	9301      	str	r3, [sp, #4]
   b5af2:	bd08      	pop	{r3, pc}
   b5af4:	00030264 	.word	0x00030264

000b5af8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5af8:	b508      	push	{r3, lr}
   b5afa:	4b02      	ldr	r3, [pc, #8]	; (b5b04 <inet_htons+0xc>)
   b5afc:	681b      	ldr	r3, [r3, #0]
   b5afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b00:	9301      	str	r3, [sp, #4]
   b5b02:	bd08      	pop	{r3, pc}
   b5b04:	00030264 	.word	0x00030264

000b5b08 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5b08:	b508      	push	{r3, lr}
   b5b0a:	4b02      	ldr	r3, [pc, #8]	; (b5b14 <hal_usart_write+0xc>)
   b5b0c:	681b      	ldr	r3, [r3, #0]
   b5b0e:	68db      	ldr	r3, [r3, #12]
   b5b10:	9301      	str	r3, [sp, #4]
   b5b12:	bd08      	pop	{r3, pc}
   b5b14:	0003023c 	.word	0x0003023c

000b5b18 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5b18:	b508      	push	{r3, lr}
   b5b1a:	4b02      	ldr	r3, [pc, #8]	; (b5b24 <hal_usart_available+0xc>)
   b5b1c:	681b      	ldr	r3, [r3, #0]
   b5b1e:	691b      	ldr	r3, [r3, #16]
   b5b20:	9301      	str	r3, [sp, #4]
   b5b22:	bd08      	pop	{r3, pc}
   b5b24:	0003023c 	.word	0x0003023c

000b5b28 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5b28:	b508      	push	{r3, lr}
   b5b2a:	4b02      	ldr	r3, [pc, #8]	; (b5b34 <hal_usart_read+0xc>)
   b5b2c:	681b      	ldr	r3, [r3, #0]
   b5b2e:	695b      	ldr	r3, [r3, #20]
   b5b30:	9301      	str	r3, [sp, #4]
   b5b32:	bd08      	pop	{r3, pc}
   b5b34:	0003023c 	.word	0x0003023c

000b5b38 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <hal_usart_peek+0xc>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	699b      	ldr	r3, [r3, #24]
   b5b40:	9301      	str	r3, [sp, #4]
   b5b42:	bd08      	pop	{r3, pc}
   b5b44:	0003023c 	.word	0x0003023c

000b5b48 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5b48:	b508      	push	{r3, lr}
   b5b4a:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <hal_usart_flush+0xc>)
   b5b4c:	681b      	ldr	r3, [r3, #0]
   b5b4e:	69db      	ldr	r3, [r3, #28]
   b5b50:	9301      	str	r3, [sp, #4]
   b5b52:	bd08      	pop	{r3, pc}
   b5b54:	0003023c 	.word	0x0003023c

000b5b58 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5b58:	b508      	push	{r3, lr}
   b5b5a:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <hal_usart_is_enabled+0xc>)
   b5b5c:	681b      	ldr	r3, [r3, #0]
   b5b5e:	6a1b      	ldr	r3, [r3, #32]
   b5b60:	9301      	str	r3, [sp, #4]
   b5b62:	bd08      	pop	{r3, pc}
   b5b64:	0003023c 	.word	0x0003023c

000b5b68 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5b68:	b508      	push	{r3, lr}
   b5b6a:	4b02      	ldr	r3, [pc, #8]	; (b5b74 <hal_usart_available_data_for_write+0xc>)
   b5b6c:	681b      	ldr	r3, [r3, #0]
   b5b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b70:	9301      	str	r3, [sp, #4]
   b5b72:	bd08      	pop	{r3, pc}
   b5b74:	0003023c 	.word	0x0003023c

000b5b78 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5b78:	b508      	push	{r3, lr}
   b5b7a:	4b02      	ldr	r3, [pc, #8]	; (b5b84 <hal_usart_init_ex+0xc>)
   b5b7c:	681b      	ldr	r3, [r3, #0]
   b5b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b80:	9301      	str	r3, [sp, #4]
   b5b82:	bd08      	pop	{r3, pc}
   b5b84:	0003023c 	.word	0x0003023c

000b5b88 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5b88:	b508      	push	{r3, lr}
   b5b8a:	4b02      	ldr	r3, [pc, #8]	; (b5b94 <hal_i2c_write+0xc>)
   b5b8c:	681b      	ldr	r3, [r3, #0]
   b5b8e:	6a1b      	ldr	r3, [r3, #32]
   b5b90:	9301      	str	r3, [sp, #4]
   b5b92:	bd08      	pop	{r3, pc}
   b5b94:	00030228 	.word	0x00030228

000b5b98 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5b98:	b508      	push	{r3, lr}
   b5b9a:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <hal_i2c_available+0xc>)
   b5b9c:	681b      	ldr	r3, [r3, #0]
   b5b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ba0:	9301      	str	r3, [sp, #4]
   b5ba2:	bd08      	pop	{r3, pc}
   b5ba4:	00030228 	.word	0x00030228

000b5ba8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5ba8:	b508      	push	{r3, lr}
   b5baa:	4b02      	ldr	r3, [pc, #8]	; (b5bb4 <hal_i2c_read+0xc>)
   b5bac:	681b      	ldr	r3, [r3, #0]
   b5bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5bb0:	9301      	str	r3, [sp, #4]
   b5bb2:	bd08      	pop	{r3, pc}
   b5bb4:	00030228 	.word	0x00030228

000b5bb8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5bb8:	b508      	push	{r3, lr}
   b5bba:	4b02      	ldr	r3, [pc, #8]	; (b5bc4 <hal_i2c_peek+0xc>)
   b5bbc:	681b      	ldr	r3, [r3, #0]
   b5bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5bc0:	9301      	str	r3, [sp, #4]
   b5bc2:	bd08      	pop	{r3, pc}
   b5bc4:	00030228 	.word	0x00030228

000b5bc8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <hal_i2c_flush+0xc>)
   b5bcc:	681b      	ldr	r3, [r3, #0]
   b5bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5bd0:	9301      	str	r3, [sp, #4]
   b5bd2:	bd08      	pop	{r3, pc}
   b5bd4:	00030228 	.word	0x00030228

000b5bd8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5bd8:	b508      	push	{r3, lr}
   b5bda:	4b02      	ldr	r3, [pc, #8]	; (b5be4 <hal_i2c_is_enabled+0xc>)
   b5bdc:	681b      	ldr	r3, [r3, #0]
   b5bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5be0:	9301      	str	r3, [sp, #4]
   b5be2:	bd08      	pop	{r3, pc}
   b5be4:	00030228 	.word	0x00030228

000b5be8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5be8:	b508      	push	{r3, lr}
   b5bea:	4b02      	ldr	r3, [pc, #8]	; (b5bf4 <hal_i2c_init+0xc>)
   b5bec:	681b      	ldr	r3, [r3, #0]
   b5bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bf0:	9301      	str	r3, [sp, #4]
   b5bf2:	bd08      	pop	{r3, pc}
   b5bf4:	00030228 	.word	0x00030228

000b5bf8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5bf8:	b508      	push	{r3, lr}
   b5bfa:	4b02      	ldr	r3, [pc, #8]	; (b5c04 <sock_setsockopt+0xc>)
   b5bfc:	681b      	ldr	r3, [r3, #0]
   b5bfe:	699b      	ldr	r3, [r3, #24]
   b5c00:	9301      	str	r3, [sp, #4]
   b5c02:	bd08      	pop	{r3, pc}
   b5c04:	00030238 	.word	0x00030238

000b5c08 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5c08:	b508      	push	{r3, lr}
   b5c0a:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <sock_close+0xc>)
   b5c0c:	681b      	ldr	r3, [r3, #0]
   b5c0e:	69db      	ldr	r3, [r3, #28]
   b5c10:	9301      	str	r3, [sp, #4]
   b5c12:	bd08      	pop	{r3, pc}
   b5c14:	00030238 	.word	0x00030238

000b5c18 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5c18:	b508      	push	{r3, lr}
   b5c1a:	4b02      	ldr	r3, [pc, #8]	; (b5c24 <sock_connect+0xc>)
   b5c1c:	681b      	ldr	r3, [r3, #0]
   b5c1e:	6a1b      	ldr	r3, [r3, #32]
   b5c20:	9301      	str	r3, [sp, #4]
   b5c22:	bd08      	pop	{r3, pc}
   b5c24:	00030238 	.word	0x00030238

000b5c28 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5c28:	b508      	push	{r3, lr}
   b5c2a:	4b02      	ldr	r3, [pc, #8]	; (b5c34 <sock_recv+0xc>)
   b5c2c:	681b      	ldr	r3, [r3, #0]
   b5c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c30:	9301      	str	r3, [sp, #4]
   b5c32:	bd08      	pop	{r3, pc}
   b5c34:	00030238 	.word	0x00030238

000b5c38 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5c38:	b508      	push	{r3, lr}
   b5c3a:	4b02      	ldr	r3, [pc, #8]	; (b5c44 <sock_send+0xc>)
   b5c3c:	681b      	ldr	r3, [r3, #0]
   b5c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c40:	9301      	str	r3, [sp, #4]
   b5c42:	bd08      	pop	{r3, pc}
   b5c44:	00030238 	.word	0x00030238

000b5c48 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5c48:	b508      	push	{r3, lr}
   b5c4a:	4b02      	ldr	r3, [pc, #8]	; (b5c54 <sock_socket+0xc>)
   b5c4c:	681b      	ldr	r3, [r3, #0]
   b5c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5c50:	9301      	str	r3, [sp, #4]
   b5c52:	bd08      	pop	{r3, pc}
   b5c54:	00030238 	.word	0x00030238

000b5c58 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5c58:	b508      	push	{r3, lr}
   b5c5a:	4b02      	ldr	r3, [pc, #8]	; (b5c64 <hal_spi_init+0xc>)
   b5c5c:	681b      	ldr	r3, [r3, #0]
   b5c5e:	69db      	ldr	r3, [r3, #28]
   b5c60:	9301      	str	r3, [sp, #4]
   b5c62:	bd08      	pop	{r3, pc}
   b5c64:	00030230 	.word	0x00030230

000b5c68 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5c68:	b508      	push	{r3, lr}
   b5c6a:	4b02      	ldr	r3, [pc, #8]	; (b5c74 <hal_spi_is_enabled+0xc>)
   b5c6c:	681b      	ldr	r3, [r3, #0]
   b5c6e:	6a1b      	ldr	r3, [r3, #32]
   b5c70:	9301      	str	r3, [sp, #4]
   b5c72:	bd08      	pop	{r3, pc}
   b5c74:	00030230 	.word	0x00030230

000b5c78 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5c78:	b508      	push	{r3, lr}
   b5c7a:	4b02      	ldr	r3, [pc, #8]	; (b5c84 <HAL_USB_USART_Init+0xc>)
   b5c7c:	681b      	ldr	r3, [r3, #0]
   b5c7e:	681b      	ldr	r3, [r3, #0]
   b5c80:	9301      	str	r3, [sp, #4]
   b5c82:	bd08      	pop	{r3, pc}
   b5c84:	0003024c 	.word	0x0003024c

000b5c88 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5c88:	b508      	push	{r3, lr}
   b5c8a:	4b02      	ldr	r3, [pc, #8]	; (b5c94 <HAL_USB_USART_Available_Data+0xc>)
   b5c8c:	681b      	ldr	r3, [r3, #0]
   b5c8e:	691b      	ldr	r3, [r3, #16]
   b5c90:	9301      	str	r3, [sp, #4]
   b5c92:	bd08      	pop	{r3, pc}
   b5c94:	0003024c 	.word	0x0003024c

000b5c98 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5c98:	b508      	push	{r3, lr}
   b5c9a:	4b02      	ldr	r3, [pc, #8]	; (b5ca4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5c9c:	681b      	ldr	r3, [r3, #0]
   b5c9e:	695b      	ldr	r3, [r3, #20]
   b5ca0:	9301      	str	r3, [sp, #4]
   b5ca2:	bd08      	pop	{r3, pc}
   b5ca4:	0003024c 	.word	0x0003024c

000b5ca8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5ca8:	b508      	push	{r3, lr}
   b5caa:	4b02      	ldr	r3, [pc, #8]	; (b5cb4 <HAL_USB_USART_Receive_Data+0xc>)
   b5cac:	681b      	ldr	r3, [r3, #0]
   b5cae:	699b      	ldr	r3, [r3, #24]
   b5cb0:	9301      	str	r3, [sp, #4]
   b5cb2:	bd08      	pop	{r3, pc}
   b5cb4:	0003024c 	.word	0x0003024c

000b5cb8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5cb8:	b508      	push	{r3, lr}
   b5cba:	4b02      	ldr	r3, [pc, #8]	; (b5cc4 <HAL_USB_USART_Send_Data+0xc>)
   b5cbc:	681b      	ldr	r3, [r3, #0]
   b5cbe:	69db      	ldr	r3, [r3, #28]
   b5cc0:	9301      	str	r3, [sp, #4]
   b5cc2:	bd08      	pop	{r3, pc}
   b5cc4:	0003024c 	.word	0x0003024c

000b5cc8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5cc8:	b508      	push	{r3, lr}
   b5cca:	4b02      	ldr	r3, [pc, #8]	; (b5cd4 <HAL_USB_USART_Flush_Data+0xc>)
   b5ccc:	681b      	ldr	r3, [r3, #0]
   b5cce:	6a1b      	ldr	r3, [r3, #32]
   b5cd0:	9301      	str	r3, [sp, #4]
   b5cd2:	bd08      	pop	{r3, pc}
   b5cd4:	0003024c 	.word	0x0003024c

000b5cd8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5cd8:	b508      	push	{r3, lr}
   b5cda:	4b02      	ldr	r3, [pc, #8]	; (b5ce4 <log_message+0xc>)
   b5cdc:	681b      	ldr	r3, [r3, #0]
   b5cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5ce0:	9301      	str	r3, [sp, #4]
   b5ce2:	bd08      	pop	{r3, pc}
   b5ce4:	00030260 	.word	0x00030260

000b5ce8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5ce8:	b508      	push	{r3, lr}
   b5cea:	4b02      	ldr	r3, [pc, #8]	; (b5cf4 <system_mode+0xc>)
   b5cec:	681b      	ldr	r3, [r3, #0]
   b5cee:	681b      	ldr	r3, [r3, #0]
   b5cf0:	9301      	str	r3, [sp, #4]
   b5cf2:	bd08      	pop	{r3, pc}
   b5cf4:	00030220 	.word	0x00030220

000b5cf8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5cf8:	b508      	push	{r3, lr}
   b5cfa:	4b02      	ldr	r3, [pc, #8]	; (b5d04 <set_system_mode+0xc>)
   b5cfc:	681b      	ldr	r3, [r3, #0]
   b5cfe:	685b      	ldr	r3, [r3, #4]
   b5d00:	9301      	str	r3, [sp, #4]
   b5d02:	bd08      	pop	{r3, pc}
   b5d04:	00030220 	.word	0x00030220

000b5d08 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5d08:	b508      	push	{r3, lr}
   b5d0a:	4b02      	ldr	r3, [pc, #8]	; (b5d14 <system_delay_ms+0xc>)
   b5d0c:	681b      	ldr	r3, [r3, #0]
   b5d0e:	695b      	ldr	r3, [r3, #20]
   b5d10:	9301      	str	r3, [sp, #4]
   b5d12:	bd08      	pop	{r3, pc}
   b5d14:	00030220 	.word	0x00030220

000b5d18 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5d18:	b508      	push	{r3, lr}
   b5d1a:	4b02      	ldr	r3, [pc, #8]	; (b5d24 <application_thread_current+0xc>)
   b5d1c:	681b      	ldr	r3, [r3, #0]
   b5d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5d20:	9301      	str	r3, [sp, #4]
   b5d22:	bd08      	pop	{r3, pc}
   b5d24:	00030220 	.word	0x00030220

000b5d28 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5d28:	b508      	push	{r3, lr}
   b5d2a:	4b02      	ldr	r3, [pc, #8]	; (b5d34 <application_thread_invoke+0xc>)
   b5d2c:	681b      	ldr	r3, [r3, #0]
   b5d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5d30:	9301      	str	r3, [sp, #4]
   b5d32:	bd08      	pop	{r3, pc}
   b5d34:	00030220 	.word	0x00030220

000b5d38 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b5d38:	b508      	push	{r3, lr}
   b5d3a:	4b02      	ldr	r3, [pc, #8]	; (b5d44 <system_thread_get_state+0xc>)
   b5d3c:	681b      	ldr	r3, [r3, #0]
   b5d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d40:	9301      	str	r3, [sp, #4]
   b5d42:	bd08      	pop	{r3, pc}
   b5d44:	00030220 	.word	0x00030220

000b5d48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5d48:	b508      	push	{r3, lr}
   b5d4a:	4b03      	ldr	r3, [pc, #12]	; (b5d58 <system_ctrl_set_app_request_handler+0x10>)
   b5d4c:	681b      	ldr	r3, [r3, #0]
   b5d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5d52:	9301      	str	r3, [sp, #4]
   b5d54:	bd08      	pop	{r3, pc}
   b5d56:	0000      	.short	0x0000
   b5d58:	00030220 	.word	0x00030220

000b5d5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b03      	ldr	r3, [pc, #12]	; (b5d6c <system_ctrl_set_result+0x10>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5d66:	9301      	str	r3, [sp, #4]
   b5d68:	bd08      	pop	{r3, pc}
   b5d6a:	0000      	.short	0x0000
   b5d6c:	00030220 	.word	0x00030220

000b5d70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <network_connect+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	685b      	ldr	r3, [r3, #4]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	00030240 	.word	0x00030240

000b5d80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <network_connecting+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	689b      	ldr	r3, [r3, #8]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	00030240 	.word	0x00030240

000b5d90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <network_disconnect+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	68db      	ldr	r3, [r3, #12]
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	00030240 	.word	0x00030240

000b5da0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <network_ready+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	691b      	ldr	r3, [r3, #16]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	00030240 	.word	0x00030240

000b5db0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <network_on+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	695b      	ldr	r3, [r3, #20]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	00030240 	.word	0x00030240

000b5dc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <network_off+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	699b      	ldr	r3, [r3, #24]
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	00030240 	.word	0x00030240

000b5dd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <network_listen+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	69db      	ldr	r3, [r3, #28]
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	00030240 	.word	0x00030240

000b5de0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <network_listening+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	6a1b      	ldr	r3, [r3, #32]
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	00030240 	.word	0x00030240

000b5df0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <network_set_listen_timeout+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	00030240 	.word	0x00030240

000b5e00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <network_get_listen_timeout+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	00030240 	.word	0x00030240

000b5e10 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <network_is_on+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	00030240 	.word	0x00030240

000b5e20 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <network_is_off+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	00030240 	.word	0x00030240

000b5e30 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <spark_process+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	689b      	ldr	r3, [r3, #8]
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	00030244 	.word	0x00030244

000b5e40 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <spark_cloud_flag_connected+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	695b      	ldr	r3, [r3, #20]
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	00030244 	.word	0x00030244

000b5e50 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <spark_send_event+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	6a1b      	ldr	r3, [r3, #32]
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	00030244 	.word	0x00030244

000b5e60 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <spark_subscribe+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	00030244 	.word	0x00030244

000b5e70 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <spark_sync_time_pending+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	00030244 	.word	0x00030244

000b5e80 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5e88:	9301      	str	r3, [sp, #4]
   b5e8a:	bd08      	pop	{r3, pc}
   b5e8c:	00030244 	.word	0x00030244

000b5e90 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <malloc+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	681b      	ldr	r3, [r3, #0]
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	0003021c 	.word	0x0003021c

000b5ea0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <free+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	685b      	ldr	r3, [r3, #4]
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	0003021c 	.word	0x0003021c

000b5eb0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <realloc+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	689b      	ldr	r3, [r3, #8]
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	0003021c 	.word	0x0003021c

000b5ec0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <sprintf+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	68db      	ldr	r3, [r3, #12]
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	0003021c 	.word	0x0003021c

000b5ed0 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <sscanf+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	695b      	ldr	r3, [r3, #20]
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	0003021c 	.word	0x0003021c

000b5ee0 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b02      	ldr	r3, [pc, #8]	; (b5eec <vsnprintf+0xc>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ee8:	9301      	str	r3, [sp, #4]
   b5eea:	bd08      	pop	{r3, pc}
   b5eec:	0003021c 	.word	0x0003021c

000b5ef0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5ef0:	b508      	push	{r3, lr}
   b5ef2:	4b02      	ldr	r3, [pc, #8]	; (b5efc <abort+0xc>)
   b5ef4:	681b      	ldr	r3, [r3, #0]
   b5ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ef8:	9301      	str	r3, [sp, #4]
   b5efa:	bd08      	pop	{r3, pc}
   b5efc:	0003021c 	.word	0x0003021c

000b5f00 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <_malloc_r+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	0003021c 	.word	0x0003021c

000b5f10 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <__errno+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	0003021c 	.word	0x0003021c

000b5f20 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <__assert_func+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	0003021c 	.word	0x0003021c

000b5f30 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <newlib_impure_ptr_callback+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	0003021c 	.word	0x0003021c

000b5f40 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <localtime_r+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	0003021c 	.word	0x0003021c

000b5f50 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5f50:	2200      	movs	r2, #0
   b5f52:	6840      	ldr	r0, [r0, #4]
   b5f54:	4611      	mov	r1, r2
   b5f56:	f7ff bf43 	b.w	b5de0 <network_listening>

000b5f5a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5f5a:	2200      	movs	r2, #0
   b5f5c:	6840      	ldr	r0, [r0, #4]
   b5f5e:	4611      	mov	r1, r2
   b5f60:	f7ff bf4e 	b.w	b5e00 <network_get_listen_timeout>

000b5f64 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5f64:	6840      	ldr	r0, [r0, #4]
   b5f66:	2200      	movs	r2, #0
   b5f68:	f7ff bf42 	b.w	b5df0 <network_set_listen_timeout>

000b5f6c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5f6c:	6840      	ldr	r0, [r0, #4]
   b5f6e:	2200      	movs	r2, #0
   b5f70:	f081 0101 	eor.w	r1, r1, #1
   b5f74:	f7ff bf2c 	b.w	b5dd0 <network_listen>

000b5f78 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5f78:	2300      	movs	r3, #0
   b5f7a:	6840      	ldr	r0, [r0, #4]
   b5f7c:	461a      	mov	r2, r3
   b5f7e:	4619      	mov	r1, r3
   b5f80:	f7ff bf1e 	b.w	b5dc0 <network_off>

000b5f84 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5f84:	2300      	movs	r3, #0
   b5f86:	6840      	ldr	r0, [r0, #4]
   b5f88:	461a      	mov	r2, r3
   b5f8a:	4619      	mov	r1, r3
   b5f8c:	f7ff bf10 	b.w	b5db0 <network_on>

000b5f90 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5f90:	2200      	movs	r2, #0
   b5f92:	6840      	ldr	r0, [r0, #4]
   b5f94:	4611      	mov	r1, r2
   b5f96:	f7ff bf03 	b.w	b5da0 <network_ready>

000b5f9a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5f9a:	2200      	movs	r2, #0
   b5f9c:	6840      	ldr	r0, [r0, #4]
   b5f9e:	4611      	mov	r1, r2
   b5fa0:	f7ff beee 	b.w	b5d80 <network_connecting>

000b5fa4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5fa4:	6840      	ldr	r0, [r0, #4]
   b5fa6:	2200      	movs	r2, #0
   b5fa8:	2102      	movs	r1, #2
   b5faa:	f7ff bef1 	b.w	b5d90 <network_disconnect>

000b5fae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5fae:	2300      	movs	r3, #0
   b5fb0:	6840      	ldr	r0, [r0, #4]
   b5fb2:	461a      	mov	r2, r3
   b5fb4:	f7ff bedc 	b.w	b5d70 <network_connect>

000b5fb8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5fb8:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5fba:	2203      	movs	r2, #3
   b5fbc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5fbe:	4a02      	ldr	r2, [pc, #8]	; (b5fc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5fc0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5fc2:	4770      	bx	lr
   b5fc4:	2003e680 	.word	0x2003e680
   b5fc8:	000b9f68 	.word	0x000b9f68

000b5fcc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5fcc:	b510      	push	{r4, lr}
   b5fce:	4604      	mov	r4, r0
   b5fd0:	4608      	mov	r0, r1
{
    _spi = spi;
   b5fd2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5fd4:	f7ff fe40 	bl	b5c58 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5fd8:	2300      	movs	r3, #0
   b5fda:	6063      	str	r3, [r4, #4]
}
   b5fdc:	4620      	mov	r0, r4
   b5fde:	bd10      	pop	{r4, pc}

000b5fe0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5fe0:	4b05      	ldr	r3, [pc, #20]	; (b5ff8 <_GLOBAL__sub_I_System+0x18>)
   b5fe2:	2202      	movs	r2, #2
   b5fe4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5fe6:	4b05      	ldr	r3, [pc, #20]	; (b5ffc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5fe8:	4a05      	ldr	r2, [pc, #20]	; (b6000 <_GLOBAL__sub_I_System+0x20>)
   b5fea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5fec:	2000      	movs	r0, #0
   b5fee:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5ff2:	f7ff be81 	b.w	b5cf8 <set_system_mode>
   b5ff6:	bf00      	nop
   b5ff8:	2003e694 	.word	0x2003e694
   b5ffc:	2003e688 	.word	0x2003e688
   b6000:	ffff0000 	.word	0xffff0000

000b6004 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6004:	b510      	push	{r4, lr}
   b6006:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6008:	f7fe fca8 	bl	b495c <strlen>
   b600c:	3801      	subs	r0, #1
   b600e:	1823      	adds	r3, r4, r0
   b6010:	4620      	mov	r0, r4
	while(i<j){
   b6012:	4283      	cmp	r3, r0
   b6014:	d906      	bls.n	b6024 <_Z11str_reversePc+0x20>
		c = *i;
   b6016:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6018:	7819      	ldrb	r1, [r3, #0]
   b601a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b601e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6022:	e7f6      	b.n	b6012 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6024:	bd10      	pop	{r4, pc}

000b6026 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b6026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b602a:	1e93      	subs	r3, r2, #2
{
   b602c:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b602e:	2b22      	cmp	r3, #34	; 0x22
   b6030:	f04f 0300 	mov.w	r3, #0
{
   b6034:	460d      	mov	r5, r1
   b6036:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b6038:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b603c:	d927      	bls.n	b608e <ltoa+0x68>

      if (10 == base && N < 0L)
   b603e:	2800      	cmp	r0, #0
   b6040:	da2a      	bge.n	b6098 <ltoa+0x72>
      {
            *head++ = '-';
   b6042:	462e      	mov	r6, r5
   b6044:	232d      	movs	r3, #45	; 0x2d
   b6046:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b604a:	4240      	negs	r0, r0
   b604c:	240a      	movs	r4, #10
      *tail-- = '\0';
   b604e:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b6052:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b6056:	4622      	mov	r2, r4
   b6058:	4601      	mov	r1, r0
   b605a:	a801      	add	r0, sp, #4
   b605c:	f001 fde3 	bl	b7c26 <ldiv>
   b6060:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b6062:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b6064:	2b09      	cmp	r3, #9
   b6066:	bfcc      	ite	gt
   b6068:	2237      	movgt	r2, #55	; 0x37
   b606a:	2230      	movle	r2, #48	; 0x30
   b606c:	fa52 f383 	uxtab	r3, r2, r3
   b6070:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b6074:	f108 0801 	add.w	r8, r8, #1
   b6078:	2800      	cmp	r0, #0
   b607a:	d1ec      	bne.n	b6056 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b607c:	4642      	mov	r2, r8
   b607e:	1c79      	adds	r1, r7, #1
   b6080:	4630      	mov	r0, r6
   b6082:	f001 fde4 	bl	b7c4e <memcpy>
      return str;
}
   b6086:	4628      	mov	r0, r5
   b6088:	b00c      	add	sp, #48	; 0x30
   b608a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b608e:	2a0a      	cmp	r2, #10
   b6090:	d0d5      	beq.n	b603e <ltoa+0x18>
      if (uarg)
   b6092:	b118      	cbz	r0, b609c <ltoa+0x76>
   b6094:	462e      	mov	r6, r5
   b6096:	e7da      	b.n	b604e <ltoa+0x28>
   b6098:	240a      	movs	r4, #10
   b609a:	e7fa      	b.n	b6092 <ltoa+0x6c>
      else  *tail-- = '0';
   b609c:	2330      	movs	r3, #48	; 0x30
   b609e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b60a2:	462e      	mov	r6, r5
   b60a4:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b60a8:	f04f 0802 	mov.w	r8, #2
   b60ac:	e7e6      	b.n	b607c <ltoa+0x56>

000b60ae <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b60ae:	b570      	push	{r4, r5, r6, lr}
   b60b0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b60b2:	1e91      	subs	r1, r2, #2
   b60b4:	2922      	cmp	r1, #34	; 0x22
   b60b6:	d81d      	bhi.n	b60f4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b60b8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b60ba:	b930      	cbnz	r0, b60ca <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b60bc:	4423      	add	r3, r4
            *ptr++ = '0';
   b60be:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b60c0:	429d      	cmp	r5, r3
   b60c2:	d210      	bcs.n	b60e6 <ultoa+0x38>
            *ptr++ = '0';
   b60c4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b60c8:	e7fa      	b.n	b60c0 <ultoa+0x12>
            result.quot = a/radix;
   b60ca:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b60ce:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b60d2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b60d4:	2809      	cmp	r0, #9
                *ptr += '0';
   b60d6:	bf94      	ite	ls
   b60d8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b60da:	3157      	addhi	r1, #87	; 0x57
   b60dc:	b2c9      	uxtb	r1, r1
   b60de:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b60e2:	4630      	mov	r0, r6
	while(a){
   b60e4:	e7e9      	b.n	b60ba <ultoa+0xc>

	*ptr = '\0';
   b60e6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b60e8:	4620      	mov	r0, r4
	*ptr = '\0';
   b60ea:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b60ec:	f7ff ff8a 	bl	b6004 <_Z11str_reversePc>
	return buffer;
   b60f0:	4620      	mov	r0, r4
}
   b60f2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b60f4:	2000      	movs	r0, #0
   b60f6:	e7fc      	b.n	b60f2 <ultoa+0x44>

000b60f8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b60f8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b60fa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b60fc:	460c      	mov	r4, r1
   b60fe:	4615      	mov	r5, r2
	if(a<0){
   b6100:	da0e      	bge.n	b6120 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b6106:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b610a:	bf14      	ite	ne
   b610c:	4258      	negne	r0, r3
   b610e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b6110:	2301      	movs	r3, #1
		*buffer = '-';
   b6112:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6114:	462a      	mov	r2, r5
   b6116:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b6118:	f7ff ffc9 	bl	b60ae <ultoa>
	}
	return buffer;
}
   b611c:	4620      	mov	r0, r4
   b611e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b6120:	2301      	movs	r3, #1
   b6122:	e7f9      	b.n	b6118 <itoa+0x20>

000b6124 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6124:	b510      	push	{r4, lr}
   b6126:	4604      	mov	r4, r0
{
	free(buffer);
   b6128:	6800      	ldr	r0, [r0, #0]
   b612a:	f7ff feb9 	bl	b5ea0 <free>
}
   b612e:	4620      	mov	r0, r4
   b6130:	bd10      	pop	{r4, pc}

000b6132 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6132:	b510      	push	{r4, lr}
   b6134:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6136:	6800      	ldr	r0, [r0, #0]
   b6138:	b108      	cbz	r0, b613e <_ZN6String10invalidateEv+0xc>
   b613a:	f7ff feb1 	bl	b5ea0 <free>
	buffer = NULL;
   b613e:	2300      	movs	r3, #0
	capacity = len = 0;
   b6140:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6144:	6023      	str	r3, [r4, #0]
}
   b6146:	bd10      	pop	{r4, pc}

000b6148 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6148:	b538      	push	{r3, r4, r5, lr}
   b614a:	4604      	mov	r4, r0
   b614c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b614e:	6800      	ldr	r0, [r0, #0]
   b6150:	3101      	adds	r1, #1
   b6152:	f7ff fead 	bl	b5eb0 <realloc>
	if (newbuffer) {
   b6156:	b110      	cbz	r0, b615e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6158:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b615c:	2001      	movs	r0, #1
	}
	return 0;
}
   b615e:	bd38      	pop	{r3, r4, r5, pc}

000b6160 <_ZN6String7reserveEj>:
{
   b6160:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6162:	6803      	ldr	r3, [r0, #0]
{
   b6164:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6166:	b123      	cbz	r3, b6172 <_ZN6String7reserveEj+0x12>
   b6168:	6843      	ldr	r3, [r0, #4]
   b616a:	428b      	cmp	r3, r1
   b616c:	d301      	bcc.n	b6172 <_ZN6String7reserveEj+0x12>
   b616e:	2001      	movs	r0, #1
}
   b6170:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6172:	4620      	mov	r0, r4
   b6174:	f7ff ffe8 	bl	b6148 <_ZN6String12changeBufferEj>
   b6178:	2800      	cmp	r0, #0
   b617a:	d0f9      	beq.n	b6170 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b617c:	68a3      	ldr	r3, [r4, #8]
   b617e:	2b00      	cmp	r3, #0
   b6180:	d1f5      	bne.n	b616e <_ZN6String7reserveEj+0xe>
   b6182:	6822      	ldr	r2, [r4, #0]
   b6184:	7013      	strb	r3, [r2, #0]
   b6186:	e7f2      	b.n	b616e <_ZN6String7reserveEj+0xe>

000b6188 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6188:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b618a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b618c:	4611      	mov	r1, r2
   b618e:	9201      	str	r2, [sp, #4]
{
   b6190:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6192:	f7ff ffe5 	bl	b6160 <_ZN6String7reserveEj>
   b6196:	9a01      	ldr	r2, [sp, #4]
   b6198:	b928      	cbnz	r0, b61a6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b619a:	4620      	mov	r0, r4
   b619c:	f7ff ffc9 	bl	b6132 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b61a0:	4620      	mov	r0, r4
   b61a2:	b003      	add	sp, #12
   b61a4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b61a6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b61a8:	4629      	mov	r1, r5
   b61aa:	6820      	ldr	r0, [r4, #0]
   b61ac:	f001 fd4f 	bl	b7c4e <memcpy>
	buffer[len] = 0;
   b61b0:	6822      	ldr	r2, [r4, #0]
   b61b2:	68a3      	ldr	r3, [r4, #8]
   b61b4:	2100      	movs	r1, #0
   b61b6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b61b8:	e7f2      	b.n	b61a0 <_ZN6String4copyEPKcj+0x18>

000b61ba <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b61ba:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b61bc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b61be:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b61c2:	4604      	mov	r4, r0
	len = 0;
   b61c4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b61c6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b61c8:	b141      	cbz	r1, b61dc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b61ca:	4608      	mov	r0, r1
   b61cc:	9101      	str	r1, [sp, #4]
   b61ce:	f7fe fbc5 	bl	b495c <strlen>
   b61d2:	9901      	ldr	r1, [sp, #4]
   b61d4:	4602      	mov	r2, r0
   b61d6:	4620      	mov	r0, r4
   b61d8:	f7ff ffd6 	bl	b6188 <_ZN6String4copyEPKcj>
}
   b61dc:	4620      	mov	r0, r4
   b61de:	b002      	add	sp, #8
   b61e0:	bd10      	pop	{r4, pc}

000b61e2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b61e2:	4288      	cmp	r0, r1
{
   b61e4:	b510      	push	{r4, lr}
   b61e6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b61e8:	d005      	beq.n	b61f6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b61ea:	680b      	ldr	r3, [r1, #0]
   b61ec:	b12b      	cbz	r3, b61fa <_ZN6StringaSERKS_+0x18>
   b61ee:	688a      	ldr	r2, [r1, #8]
   b61f0:	4619      	mov	r1, r3
   b61f2:	f7ff ffc9 	bl	b6188 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b61f6:	4620      	mov	r0, r4
   b61f8:	bd10      	pop	{r4, pc}
	else invalidate();
   b61fa:	f7ff ff9a 	bl	b6132 <_ZN6String10invalidateEv>
   b61fe:	e7fa      	b.n	b61f6 <_ZN6StringaSERKS_+0x14>

000b6200 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6200:	b510      	push	{r4, lr}
	buffer = NULL;
   b6202:	2300      	movs	r3, #0
String::String(const String &value)
   b6204:	4604      	mov	r4, r0
	capacity = 0;
   b6206:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b620a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b620c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b620e:	f7ff ffe8 	bl	b61e2 <_ZN6StringaSERKS_>
}
   b6212:	4620      	mov	r0, r4
   b6214:	bd10      	pop	{r4, pc}

000b6216 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6216:	b513      	push	{r0, r1, r4, lr}
   b6218:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b621a:	b159      	cbz	r1, b6234 <_ZN6StringaSEPKc+0x1e>
   b621c:	4608      	mov	r0, r1
   b621e:	9101      	str	r1, [sp, #4]
   b6220:	f7fe fb9c 	bl	b495c <strlen>
   b6224:	9901      	ldr	r1, [sp, #4]
   b6226:	4602      	mov	r2, r0
   b6228:	4620      	mov	r0, r4
   b622a:	f7ff ffad 	bl	b6188 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b622e:	4620      	mov	r0, r4
   b6230:	b002      	add	sp, #8
   b6232:	bd10      	pop	{r4, pc}
	else invalidate();
   b6234:	f7ff ff7d 	bl	b6132 <_ZN6String10invalidateEv>
   b6238:	e7f9      	b.n	b622e <_ZN6StringaSEPKc+0x18>

000b623a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b623a:	b510      	push	{r4, lr}
   b623c:	4604      	mov	r4, r0
   b623e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6240:	2300      	movs	r3, #0
	capacity = 0;
   b6242:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6246:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6248:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b624a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b624c:	a901      	add	r1, sp, #4
   b624e:	f7ff ff53 	bl	b60f8 <itoa>
	*this = buf;
   b6252:	a901      	add	r1, sp, #4
   b6254:	4620      	mov	r0, r4
   b6256:	f7ff ffde 	bl	b6216 <_ZN6StringaSEPKc>
}
   b625a:	4620      	mov	r0, r4
   b625c:	b00a      	add	sp, #40	; 0x28
   b625e:	bd10      	pop	{r4, pc}

000b6260 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b6260:	b510      	push	{r4, lr}
   b6262:	4604      	mov	r4, r0
   b6264:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6266:	2300      	movs	r3, #0
	capacity = 0;
   b6268:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b626c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b626e:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b6270:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b6272:	a901      	add	r1, sp, #4
   b6274:	f7ff fed7 	bl	b6026 <ltoa>
	*this = buf;
   b6278:	a901      	add	r1, sp, #4
   b627a:	4620      	mov	r0, r4
   b627c:	f7ff ffcb 	bl	b6216 <_ZN6StringaSEPKc>
}
   b6280:	4620      	mov	r0, r4
   b6282:	b00a      	add	sp, #40	; 0x28
   b6284:	bd10      	pop	{r4, pc}

000b6286 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6286:	b570      	push	{r4, r5, r6, lr}
   b6288:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b628a:	460e      	mov	r6, r1
   b628c:	b909      	cbnz	r1, b6292 <_ZN6String6concatEPKcj+0xc>
   b628e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6290:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6292:	b16a      	cbz	r2, b62b0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6294:	6884      	ldr	r4, [r0, #8]
   b6296:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6298:	4621      	mov	r1, r4
   b629a:	f7ff ff61 	bl	b6160 <_ZN6String7reserveEj>
   b629e:	2800      	cmp	r0, #0
   b62a0:	d0f5      	beq.n	b628e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b62a2:	6828      	ldr	r0, [r5, #0]
   b62a4:	68ab      	ldr	r3, [r5, #8]
   b62a6:	4631      	mov	r1, r6
   b62a8:	4418      	add	r0, r3
   b62aa:	f001 fd24 	bl	b7cf6 <strcpy>
	len = newlen;
   b62ae:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b62b0:	2001      	movs	r0, #1
   b62b2:	e7ed      	b.n	b6290 <_ZN6String6concatEPKcj+0xa>

000b62b4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b62b4:	688a      	ldr	r2, [r1, #8]
   b62b6:	6809      	ldr	r1, [r1, #0]
   b62b8:	f7ff bfe5 	b.w	b6286 <_ZN6String6concatEPKcj>

000b62bc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b62bc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b62be:	688a      	ldr	r2, [r1, #8]
   b62c0:	6809      	ldr	r1, [r1, #0]
{
   b62c2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b62c4:	f7ff ffdf 	bl	b6286 <_ZN6String6concatEPKcj>
   b62c8:	b910      	cbnz	r0, b62d0 <_ZplRK15StringSumHelperRK6String+0x14>
   b62ca:	4620      	mov	r0, r4
   b62cc:	f7ff ff31 	bl	b6132 <_ZN6String10invalidateEv>
	return a;
}
   b62d0:	4620      	mov	r0, r4
   b62d2:	bd10      	pop	{r4, pc}

000b62d4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b62d4:	b513      	push	{r0, r1, r4, lr}
   b62d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b62d8:	b929      	cbnz	r1, b62e6 <_ZplRK15StringSumHelperPKc+0x12>
   b62da:	4620      	mov	r0, r4
   b62dc:	f7ff ff29 	bl	b6132 <_ZN6String10invalidateEv>
	return a;
}
   b62e0:	4620      	mov	r0, r4
   b62e2:	b002      	add	sp, #8
   b62e4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b62e6:	4608      	mov	r0, r1
   b62e8:	9101      	str	r1, [sp, #4]
   b62ea:	f7fe fb37 	bl	b495c <strlen>
   b62ee:	9901      	ldr	r1, [sp, #4]
   b62f0:	4602      	mov	r2, r0
   b62f2:	4620      	mov	r0, r4
   b62f4:	f7ff ffc7 	bl	b6286 <_ZN6String6concatEPKcj>
   b62f8:	2800      	cmp	r0, #0
   b62fa:	d0ee      	beq.n	b62da <_ZplRK15StringSumHelperPKc+0x6>
   b62fc:	e7f0      	b.n	b62e0 <_ZplRK15StringSumHelperPKc+0xc>
	...

000b6300 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6300:	b40e      	push	{r1, r2, r3}
   b6302:	b570      	push	{r4, r5, r6, lr}
   b6304:	b087      	sub	sp, #28
   b6306:	ad0b      	add	r5, sp, #44	; 0x2c
   b6308:	4604      	mov	r4, r0
   b630a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b630e:	9201      	str	r2, [sp, #4]
   b6310:	462b      	mov	r3, r5
   b6312:	2105      	movs	r1, #5
   b6314:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6316:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6318:	f7ff fde2 	bl	b5ee0 <vsnprintf>
    va_end(marker);

    String result;
   b631c:	490b      	ldr	r1, [pc, #44]	; (b634c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b631e:	4606      	mov	r6, r0
    String result;
   b6320:	4620      	mov	r0, r4
   b6322:	f7ff ff4a 	bl	b61ba <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b6326:	4631      	mov	r1, r6
   b6328:	4620      	mov	r0, r4
   b632a:	f7ff ff19 	bl	b6160 <_ZN6String7reserveEj>
    if (result.buffer) {
   b632e:	6820      	ldr	r0, [r4, #0]
   b6330:	b130      	cbz	r0, b6340 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6332:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b6334:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6336:	462b      	mov	r3, r5
   b6338:	1c71      	adds	r1, r6, #1
   b633a:	f7ff fdd1 	bl	b5ee0 <vsnprintf>
        va_end(marker);
        result.len = n;
   b633e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6340:	4620      	mov	r0, r4
   b6342:	b007      	add	sp, #28
   b6344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6348:	b003      	add	sp, #12
   b634a:	4770      	bx	lr
   b634c:	000b9e0b 	.word	0x000b9e0b

000b6350 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b6350:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b6352:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6354:	4604      	mov	r4, r0
      if (_M_manager)
   b6356:	b113      	cbz	r3, b635e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6358:	2203      	movs	r2, #3
   b635a:	4601      	mov	r1, r0
   b635c:	4798      	blx	r3
    }
   b635e:	4620      	mov	r0, r4
   b6360:	bd10      	pop	{r4, pc}

000b6362 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6362:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6364:	6843      	ldr	r3, [r0, #4]
   b6366:	3b01      	subs	r3, #1
    {
   b6368:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b636a:	6043      	str	r3, [r0, #4]
   b636c:	b963      	cbnz	r3, b6388 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b636e:	6803      	ldr	r3, [r0, #0]
   b6370:	689b      	ldr	r3, [r3, #8]
   b6372:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6374:	68a3      	ldr	r3, [r4, #8]
   b6376:	3b01      	subs	r3, #1
   b6378:	60a3      	str	r3, [r4, #8]
   b637a:	b92b      	cbnz	r3, b6388 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b637c:	6823      	ldr	r3, [r4, #0]
   b637e:	4620      	mov	r0, r4
   b6380:	68db      	ldr	r3, [r3, #12]
    }
   b6382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6386:	4718      	bx	r3
    }
   b6388:	bd10      	pop	{r4, pc}

000b638a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b638a:	b513      	push	{r0, r1, r4, lr}
   b638c:	460b      	mov	r3, r1
   b638e:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6390:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6394:	466c      	mov	r4, sp
   b6396:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b639a:	e893 0003 	ldmia.w	r3, {r0, r1}
   b639e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b63a2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b63a6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b63aa:	b002      	add	sp, #8
   b63ac:	bd10      	pop	{r4, pc}
	...

000b63b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b63b0:	4802      	ldr	r0, [pc, #8]	; (b63bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b63b2:	2300      	movs	r3, #0
   b63b4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b63b6:	f7ff bb87 	b.w	b5ac8 <os_mutex_recursive_create>
   b63ba:	bf00      	nop
   b63bc:	2003e698 	.word	0x2003e698

000b63c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b63c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63c2:	4606      	mov	r6, r0
   b63c4:	460d      	mov	r5, r1
  size_t n = 0;
   b63c6:	188f      	adds	r7, r1, r2
   b63c8:	2400      	movs	r4, #0
  while (size--) {
   b63ca:	42bd      	cmp	r5, r7
   b63cc:	d00c      	beq.n	b63e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b63ce:	6833      	ldr	r3, [r6, #0]
   b63d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b63d4:	689b      	ldr	r3, [r3, #8]
   b63d6:	4630      	mov	r0, r6
   b63d8:	4798      	blx	r3
     if (chunk>=0)
   b63da:	1e03      	subs	r3, r0, #0
   b63dc:	db01      	blt.n	b63e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b63de:	441c      	add	r4, r3
  while (size--) {
   b63e0:	e7f3      	b.n	b63ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b63e2:	2c00      	cmp	r4, #0
   b63e4:	bf08      	it	eq
   b63e6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b63e8:	4620      	mov	r0, r4
   b63ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63ec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b63ec:	b513      	push	{r0, r1, r4, lr}
   b63ee:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b63f0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b63f2:	b159      	cbz	r1, b640c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b63f4:	9101      	str	r1, [sp, #4]
   b63f6:	f7fe fab1 	bl	b495c <strlen>
   b63fa:	6823      	ldr	r3, [r4, #0]
   b63fc:	9901      	ldr	r1, [sp, #4]
   b63fe:	68db      	ldr	r3, [r3, #12]
   b6400:	4602      	mov	r2, r0
   b6402:	4620      	mov	r0, r4
    }
   b6404:	b002      	add	sp, #8
   b6406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b640a:	4718      	bx	r3
    }
   b640c:	b002      	add	sp, #8
   b640e:	bd10      	pop	{r4, pc}

000b6410 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6410:	6803      	ldr	r3, [r0, #0]
   b6412:	689b      	ldr	r3, [r3, #8]
   b6414:	4718      	bx	r3

000b6416 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6416:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6418:	210d      	movs	r1, #13
{
   b641a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b641c:	f7ff fff8 	bl	b6410 <_ZN5Print5printEc>
  n += print('\n');
   b6420:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6422:	4604      	mov	r4, r0
  n += print('\n');
   b6424:	4628      	mov	r0, r5
   b6426:	f7ff fff3 	bl	b6410 <_ZN5Print5printEc>
  return n;
}
   b642a:	4420      	add	r0, r4
   b642c:	bd38      	pop	{r3, r4, r5, pc}

000b642e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b642e:	b538      	push	{r3, r4, r5, lr}
   b6430:	4605      	mov	r5, r0
  return write(str);
   b6432:	f7ff ffdb 	bl	b63ec <_ZN5Print5writeEPKc>
   b6436:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6438:	4628      	mov	r0, r5
   b643a:	f7ff ffec 	bl	b6416 <_ZN5Print7printlnEv>
  return n;
}
   b643e:	4420      	add	r0, r4
   b6440:	bd38      	pop	{r3, r4, r5, pc}

000b6442 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6442:	b530      	push	{r4, r5, lr}
   b6444:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6446:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6448:	2a01      	cmp	r2, #1
  *str = '\0';
   b644a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b644e:	bf98      	it	ls
   b6450:	220a      	movls	r2, #10
   b6452:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6454:	460d      	mov	r5, r1
   b6456:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b645a:	fb01 5312 	mls	r3, r1, r2, r5
   b645e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6462:	2b09      	cmp	r3, #9
   b6464:	bf94      	ite	ls
   b6466:	3330      	addls	r3, #48	; 0x30
   b6468:	3337      	addhi	r3, #55	; 0x37
   b646a:	b2db      	uxtb	r3, r3
  } while(n);
   b646c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b646e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6472:	d9ef      	bls.n	b6454 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6474:	4621      	mov	r1, r4
   b6476:	f7ff ffb9 	bl	b63ec <_ZN5Print5writeEPKc>
}
   b647a:	b00b      	add	sp, #44	; 0x2c
   b647c:	bd30      	pop	{r4, r5, pc}

000b647e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b647e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6482:	b086      	sub	sp, #24
   b6484:	af00      	add	r7, sp, #0
   b6486:	4605      	mov	r5, r0
   b6488:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b648a:	1d38      	adds	r0, r7, #4
   b648c:	2114      	movs	r1, #20
{
   b648e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6490:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6492:	f7ff fd25 	bl	b5ee0 <vsnprintf>

    if (n<bufsize)
   b6496:	2813      	cmp	r0, #19
   b6498:	d80e      	bhi.n	b64b8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b649a:	1d39      	adds	r1, r7, #4
   b649c:	4628      	mov	r0, r5
   b649e:	f7ff ffa5 	bl	b63ec <_ZN5Print5writeEPKc>
   b64a2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b64a4:	b11e      	cbz	r6, b64ae <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b64a6:	4628      	mov	r0, r5
   b64a8:	f7ff ffb5 	bl	b6416 <_ZN5Print7printlnEv>
   b64ac:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b64ae:	4620      	mov	r0, r4
   b64b0:	3718      	adds	r7, #24
   b64b2:	46bd      	mov	sp, r7
   b64b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b64b8:	f100 0308 	add.w	r3, r0, #8
   b64bc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b64c0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b64c2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b64c6:	4622      	mov	r2, r4
   b64c8:	1c41      	adds	r1, r0, #1
   b64ca:	683b      	ldr	r3, [r7, #0]
   b64cc:	4668      	mov	r0, sp
   b64ce:	f7ff fd07 	bl	b5ee0 <vsnprintf>
  return write(str);
   b64d2:	4669      	mov	r1, sp
   b64d4:	4628      	mov	r0, r5
   b64d6:	f7ff ff89 	bl	b63ec <_ZN5Print5writeEPKc>
   b64da:	4604      	mov	r4, r0
   b64dc:	46c5      	mov	sp, r8
   b64de:	e7e1      	b.n	b64a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b64e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b64e0:	4b01      	ldr	r3, [pc, #4]	; (b64e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b64e2:	4a02      	ldr	r2, [pc, #8]	; (b64ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b64e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b64e6:	4770      	bx	lr
   b64e8:	2003e69c 	.word	0x2003e69c
   b64ec:	000b9fa4 	.word	0x000b9fa4

000b64f0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b64f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b64f4:	4a15      	ldr	r2, [pc, #84]	; (b654c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b64f6:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6558 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b64fa:	e9d2 6300 	ldrd	r6, r3, [r2]
   b64fe:	1980      	adds	r0, r0, r6
   b6500:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b6504:	4b12      	ldr	r3, [pc, #72]	; (b6550 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b6506:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b650a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b650e:	1986      	adds	r6, r0, r6
   b6510:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b6514:	42bb      	cmp	r3, r7
   b6516:	bf08      	it	eq
   b6518:	42b2      	cmpeq	r2, r6
{
   b651a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b651c:	d013      	beq.n	b6546 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b651e:	a903      	add	r1, sp, #12
   b6520:	4668      	mov	r0, sp
   b6522:	e9cd 6700 	strd	r6, r7, [sp]
   b6526:	f7ff fd0b 	bl	b5f40 <localtime_r>
	calendar_time.tm_year += 1900;
   b652a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b652c:	4d09      	ldr	r5, [pc, #36]	; (b6554 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b652e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6532:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b6534:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b653a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b653c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b653e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6542:	6823      	ldr	r3, [r4, #0]
   b6544:	602b      	str	r3, [r5, #0]
    }
}
   b6546:	b00c      	add	sp, #48	; 0x30
   b6548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b654c:	2003e6d0 	.word	0x2003e6d0
   b6550:	2003e6c8 	.word	0x2003e6c8
   b6554:	2003e6a4 	.word	0x2003e6a4
   b6558:	2003e6d8 	.word	0x2003e6d8

000b655c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b655c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b655e:	2000      	movs	r0, #0
   b6560:	f7ff fc86 	bl	b5e70 <spark_sync_time_pending>
   b6564:	b128      	cbz	r0, b6572 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6566:	f7ff fc6b 	bl	b5e40 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b656a:	f080 0001 	eor.w	r0, r0, #1
   b656e:	b2c0      	uxtb	r0, r0
    }
   b6570:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6572:	2001      	movs	r0, #1
   b6574:	e7fc      	b.n	b6570 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b6578 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b6578:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b657a:	f7ff ffb9 	bl	b64f0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b657e:	4b02      	ldr	r3, [pc, #8]	; (b6588 <_ZN9TimeClass5monthEx+0x10>)
   b6580:	6918      	ldr	r0, [r3, #16]
}
   b6582:	3001      	adds	r0, #1
   b6584:	bd08      	pop	{r3, pc}
   b6586:	bf00      	nop
   b6588:	2003e6a4 	.word	0x2003e6a4

000b658c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b658c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b658e:	2000      	movs	r0, #0
   b6590:	f7ff fa72 	bl	b5a78 <hal_rtc_time_is_valid>
    if (rtcstate)
   b6594:	4604      	mov	r4, r0
   b6596:	b9a0      	cbnz	r0, b65c2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6598:	f7ff fba6 	bl	b5ce8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b659c:	2801      	cmp	r0, #1
   b659e:	d110      	bne.n	b65c2 <_ZN9TimeClass7isValidEv+0x36>
   b65a0:	4620      	mov	r0, r4
   b65a2:	f7ff fbc9 	bl	b5d38 <system_thread_get_state>
   b65a6:	b960      	cbnz	r0, b65c2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b65a8:	f7ff ffd8 	bl	b655c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b65ac:	b910      	cbnz	r0, b65b4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b65ae:	f7ff fc3f 	bl	b5e30 <spark_process>
        while (_while() && !_condition()) {
   b65b2:	e7f9      	b.n	b65a8 <_ZN9TimeClass7isValidEv+0x1c>
   b65b4:	f7ff ffd2 	bl	b655c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b65b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b65bc:	2000      	movs	r0, #0
   b65be:	f7ff ba5b 	b.w	b5a78 <hal_rtc_time_is_valid>
}
   b65c2:	4620      	mov	r0, r4
   b65c4:	bd10      	pop	{r4, pc}

000b65c6 <_ZN9TimeClass3nowEv>:
{
   b65c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b65c8:	f7ff ffe0 	bl	b658c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b65cc:	2210      	movs	r2, #16
   b65ce:	2100      	movs	r1, #0
   b65d0:	4668      	mov	r0, sp
   b65d2:	f001 fb4a 	bl	b7c6a <memset>
    hal_rtc_get_time(&tv, nullptr);
   b65d6:	2100      	movs	r1, #0
   b65d8:	4668      	mov	r0, sp
   b65da:	f7ff fa55 	bl	b5a88 <hal_rtc_get_time>
}
   b65de:	9800      	ldr	r0, [sp, #0]
   b65e0:	b005      	add	sp, #20
   b65e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b65e8 <_ZN9TimeClass4hourEv>:
{
   b65e8:	b508      	push	{r3, lr}
	return hour(now());
   b65ea:	f7ff ffec 	bl	b65c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b65ee:	17c1      	asrs	r1, r0, #31
   b65f0:	f7ff ff7e 	bl	b64f0 <_ZL22Refresh_UnixTime_Cachex>
}
   b65f4:	4b01      	ldr	r3, [pc, #4]	; (b65fc <_ZN9TimeClass4hourEv+0x14>)
   b65f6:	6898      	ldr	r0, [r3, #8]
   b65f8:	bd08      	pop	{r3, pc}
   b65fa:	bf00      	nop
   b65fc:	2003e6a4 	.word	0x2003e6a4

000b6600 <_ZN9TimeClass6minuteEv>:
{
   b6600:	b508      	push	{r3, lr}
	return minute(now());
   b6602:	f7ff ffe0 	bl	b65c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6606:	17c1      	asrs	r1, r0, #31
   b6608:	f7ff ff72 	bl	b64f0 <_ZL22Refresh_UnixTime_Cachex>
}
   b660c:	4b01      	ldr	r3, [pc, #4]	; (b6614 <_ZN9TimeClass6minuteEv+0x14>)
   b660e:	6858      	ldr	r0, [r3, #4]
   b6610:	bd08      	pop	{r3, pc}
   b6612:	bf00      	nop
   b6614:	2003e6a4 	.word	0x2003e6a4

000b6618 <_ZN9TimeClass3dayEv>:
{
   b6618:	b508      	push	{r3, lr}
	return day(now());
   b661a:	f7ff ffd4 	bl	b65c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b661e:	17c1      	asrs	r1, r0, #31
   b6620:	f7ff ff66 	bl	b64f0 <_ZL22Refresh_UnixTime_Cachex>
}
   b6624:	4b01      	ldr	r3, [pc, #4]	; (b662c <_ZN9TimeClass3dayEv+0x14>)
   b6626:	68d8      	ldr	r0, [r3, #12]
   b6628:	bd08      	pop	{r3, pc}
   b662a:	bf00      	nop
   b662c:	2003e6a4 	.word	0x2003e6a4

000b6630 <_ZN9TimeClass5monthEv>:
{
   b6630:	b508      	push	{r3, lr}
	return month(now());
   b6632:	f7ff ffc8 	bl	b65c6 <_ZN9TimeClass3nowEv>
}
   b6636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b663a:	17c1      	asrs	r1, r0, #31
   b663c:	f7ff bf9c 	b.w	b6578 <_ZN9TimeClass5monthEx>

000b6640 <_ZN9TimeClass4yearEv>:
{
   b6640:	b508      	push	{r3, lr}
	return year(now());
   b6642:	f7ff ffc0 	bl	b65c6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6646:	17c1      	asrs	r1, r0, #31
   b6648:	f7ff ff52 	bl	b64f0 <_ZL22Refresh_UnixTime_Cachex>
}
   b664c:	4b01      	ldr	r3, [pc, #4]	; (b6654 <_ZN9TimeClass4yearEv+0x14>)
   b664e:	6958      	ldr	r0, [r3, #20]
   b6650:	bd08      	pop	{r3, pc}
   b6652:	bf00      	nop
   b6654:	2003e6a4 	.word	0x2003e6a4

000b6658 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6658:	4b02      	ldr	r3, [pc, #8]	; (b6664 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b665a:	681a      	ldr	r2, [r3, #0]
   b665c:	4b02      	ldr	r3, [pc, #8]	; (b6668 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b665e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6660:	4770      	bx	lr
   b6662:	bf00      	nop
   b6664:	2003cd18 	.word	0x2003cd18
   b6668:	2003e6a0 	.word	0x2003e6a0

000b666c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b666c:	2100      	movs	r1, #0
   b666e:	f7ff bb4b 	b.w	b5d08 <system_delay_ms>
	...

000b6674 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6674:	b510      	push	{r4, lr}
   b6676:	4b04      	ldr	r3, [pc, #16]	; (b6688 <_ZN9TCPClientD1Ev+0x14>)
   b6678:	6003      	str	r3, [r0, #0]
   b667a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b667c:	6980      	ldr	r0, [r0, #24]
   b667e:	b108      	cbz	r0, b6684 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b6680:	f7ff fe6f 	bl	b6362 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b6684:	4620      	mov	r0, r4
   b6686:	bd10      	pop	{r4, pc}
   b6688:	000ba0b8 	.word	0x000ba0b8

000b668c <_ZN9TCPClientD0Ev>:
   b668c:	b510      	push	{r4, lr}
   b668e:	4604      	mov	r4, r0
   b6690:	f7ff fff0 	bl	b6674 <_ZN9TCPClientD1Ev>
   b6694:	4620      	mov	r0, r4
   b6696:	211c      	movs	r1, #28
   b6698:	f7fe f9c1 	bl	b4a1e <_ZdlPvj>
   b669c:	4620      	mov	r0, r4
   b669e:	bd10      	pop	{r4, pc}

000b66a0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b66a0:	4b01      	ldr	r3, [pc, #4]	; (b66a8 <_GLOBAL__sub_I_RGB+0x8>)
   b66a2:	2200      	movs	r2, #0
   b66a4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b66a6:	4770      	bx	lr
   b66a8:	2003e6e0 	.word	0x2003e6e0

000b66ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b66ac:	4b01      	ldr	r3, [pc, #4]	; (b66b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b66ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b66b0:	4770      	bx	lr
   b66b2:	bf00      	nop
   b66b4:	2003cd1c 	.word	0x2003cd1c

000b66b8 <serialEventRun>:
{
   b66b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b66ba:	4b0b      	ldr	r3, [pc, #44]	; (b66e8 <serialEventRun+0x30>)
   b66bc:	b143      	cbz	r3, b66d0 <serialEventRun+0x18>
   b66be:	f000 fc11 	bl	b6ee4 <_Z16_fetch_usbserialv>
   b66c2:	6803      	ldr	r3, [r0, #0]
   b66c4:	691b      	ldr	r3, [r3, #16]
   b66c6:	4798      	blx	r3
   b66c8:	2800      	cmp	r0, #0
   b66ca:	dd01      	ble.n	b66d0 <serialEventRun+0x18>
        serialEvent();
   b66cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b66d0:	4b06      	ldr	r3, [pc, #24]	; (b66ec <serialEventRun+0x34>)
   b66d2:	b143      	cbz	r3, b66e6 <serialEventRun+0x2e>
   b66d4:	f001 f922 	bl	b791c <_Z22__fetch_global_Serial1v>
   b66d8:	6803      	ldr	r3, [r0, #0]
   b66da:	691b      	ldr	r3, [r3, #16]
   b66dc:	4798      	blx	r3
   b66de:	2800      	cmp	r0, #0
   b66e0:	dd01      	ble.n	b66e6 <serialEventRun+0x2e>
        serialEvent1();
   b66e2:	f3af 8000 	nop.w
}
   b66e6:	bd08      	pop	{r3, pc}
	...

000b66f0 <_post_loop>:
{
   b66f0:	b508      	push	{r3, lr}
	serialEventRun();
   b66f2:	f7ff ffe1 	bl	b66b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b66f6:	f7ff f9b7 	bl	b5a68 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b66fa:	4b01      	ldr	r3, [pc, #4]	; (b6700 <_post_loop+0x10>)
   b66fc:	6018      	str	r0, [r3, #0]
}
   b66fe:	bd08      	pop	{r3, pc}
   b6700:	2003e744 	.word	0x2003e744

000b6704 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6704:	4805      	ldr	r0, [pc, #20]	; (b671c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6706:	4a06      	ldr	r2, [pc, #24]	; (b6720 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6708:	4906      	ldr	r1, [pc, #24]	; (b6724 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b670a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b670c:	1a12      	subs	r2, r2, r0
   b670e:	f001 fa9e 	bl	b7c4e <memcpy>
    __backup_sram_signature = signature;
   b6712:	4b05      	ldr	r3, [pc, #20]	; (b6728 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6714:	4a05      	ldr	r2, [pc, #20]	; (b672c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6716:	601a      	str	r2, [r3, #0]
}
   b6718:	bd08      	pop	{r3, pc}
   b671a:	bf00      	nop
   b671c:	2003f400 	.word	0x2003f400
   b6720:	2003f404 	.word	0x2003f404
   b6724:	000ba938 	.word	0x000ba938
   b6728:	2003f400 	.word	0x2003f400
   b672c:	9a271c1e 	.word	0x9a271c1e

000b6730 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6730:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6732:	2300      	movs	r3, #0
   b6734:	9300      	str	r3, [sp, #0]
   b6736:	461a      	mov	r2, r3
   b6738:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b673c:	f7ff fb0e 	bl	b5d5c <system_ctrl_set_result>
}
   b6740:	b003      	add	sp, #12
   b6742:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6748 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6748:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b674a:	8843      	ldrh	r3, [r0, #2]
   b674c:	2b0a      	cmp	r3, #10
   b674e:	d008      	beq.n	b6762 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6750:	2b50      	cmp	r3, #80	; 0x50
   b6752:	d10b      	bne.n	b676c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6754:	4b09      	ldr	r3, [pc, #36]	; (b677c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6756:	681b      	ldr	r3, [r3, #0]
   b6758:	b14b      	cbz	r3, b676e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b675a:	b003      	add	sp, #12
   b675c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6760:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6762:	f7ff ffe5 	bl	b6730 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6766:	b003      	add	sp, #12
   b6768:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b676c:	2300      	movs	r3, #0
   b676e:	9300      	str	r3, [sp, #0]
   b6770:	461a      	mov	r2, r3
   b6772:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6776:	f7ff faf1 	bl	b5d5c <system_ctrl_set_result>
}
   b677a:	e7f4      	b.n	b6766 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b677c:	2003e6f4 	.word	0x2003e6f4

000b6780 <module_user_init_hook>:
{
   b6780:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6782:	4812      	ldr	r0, [pc, #72]	; (b67cc <module_user_init_hook+0x4c>)
   b6784:	2100      	movs	r1, #0
   b6786:	f7ff fbd3 	bl	b5f30 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b678a:	4b11      	ldr	r3, [pc, #68]	; (b67d0 <module_user_init_hook+0x50>)
   b678c:	681a      	ldr	r2, [r3, #0]
   b678e:	4b11      	ldr	r3, [pc, #68]	; (b67d4 <module_user_init_hook+0x54>)
   b6790:	429a      	cmp	r2, r3
   b6792:	4b11      	ldr	r3, [pc, #68]	; (b67d8 <module_user_init_hook+0x58>)
   b6794:	bf0c      	ite	eq
   b6796:	2201      	moveq	r2, #1
   b6798:	2200      	movne	r2, #0
   b679a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b679c:	d001      	beq.n	b67a2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b679e:	f7ff ffb1 	bl	b6704 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b67a2:	f7ff f959 	bl	b5a58 <HAL_RNG_GetRandomNumber>
   b67a6:	4604      	mov	r4, r0
    srand(seed);
   b67a8:	f001 fa68 	bl	b7c7c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b67ac:	4b0b      	ldr	r3, [pc, #44]	; (b67dc <module_user_init_hook+0x5c>)
   b67ae:	b113      	cbz	r3, b67b6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b67b0:	4620      	mov	r0, r4
   b67b2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b67b6:	2100      	movs	r1, #0
   b67b8:	4808      	ldr	r0, [pc, #32]	; (b67dc <module_user_init_hook+0x5c>)
   b67ba:	f7ff fb61 	bl	b5e80 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b67be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b67c2:	4807      	ldr	r0, [pc, #28]	; (b67e0 <module_user_init_hook+0x60>)
   b67c4:	2100      	movs	r1, #0
   b67c6:	f7ff babf 	b.w	b5d48 <system_ctrl_set_app_request_handler>
   b67ca:	bf00      	nop
   b67cc:	000b66ad 	.word	0x000b66ad
   b67d0:	2003f400 	.word	0x2003f400
   b67d4:	9a271c1e 	.word	0x9a271c1e
   b67d8:	2003e6f0 	.word	0x2003e6f0
   b67dc:	00000000 	.word	0x00000000
   b67e0:	000b6749 	.word	0x000b6749

000b67e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b67e4:	4770      	bx	lr

000b67e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b67e6:	2000      	movs	r0, #0
   b67e8:	4770      	bx	lr

000b67ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b67ea:	b510      	push	{r4, lr}
   b67ec:	2110      	movs	r1, #16
   b67ee:	4604      	mov	r4, r0
   b67f0:	f7fe f915 	bl	b4a1e <_ZdlPvj>
   b67f4:	4620      	mov	r0, r4
   b67f6:	bd10      	pop	{r4, pc}

000b67f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b67f8:	b508      	push	{r3, lr}
      { delete this; }
   b67fa:	f7ff fff6 	bl	b67ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b67fe:	bd08      	pop	{r3, pc}

000b6800 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6800:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6802:	2200      	movs	r2, #0
   b6804:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6808:	6002      	str	r2, [r0, #0]
   b680a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b680c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b680e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6810:	680c      	ldr	r4, [r1, #0]
   b6812:	8085      	strh	r5, [r0, #4]
   b6814:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6816:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6818:	bd30      	pop	{r4, r5, pc}

000b681a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b681a:	b510      	push	{r4, lr}
   b681c:	4604      	mov	r4, r0
    free((void*)msg_);
   b681e:	6800      	ldr	r0, [r0, #0]
   b6820:	f7ff fb3e 	bl	b5ea0 <free>
}
   b6824:	4620      	mov	r0, r4
   b6826:	bd10      	pop	{r4, pc}

000b6828 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6828:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b682a:	68c4      	ldr	r4, [r0, #12]
   b682c:	b1f4      	cbz	r4, b686c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b682e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6830:	2b02      	cmp	r3, #2
   b6832:	d103      	bne.n	b683c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6834:	f104 000c 	add.w	r0, r4, #12
   b6838:	f7ff ffef 	bl	b681a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b683c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b683e:	b135      	cbz	r5, b684e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6840:	4628      	mov	r0, r5
   b6842:	f7ff fd85 	bl	b6350 <_ZNSt14_Function_baseD1Ev>
   b6846:	2110      	movs	r1, #16
   b6848:	4628      	mov	r0, r5
   b684a:	f7fe f8e8 	bl	b4a1e <_ZdlPvj>
   b684e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6850:	b135      	cbz	r5, b6860 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6852:	4628      	mov	r0, r5
   b6854:	f7ff fd7c 	bl	b6350 <_ZNSt14_Function_baseD1Ev>
   b6858:	2110      	movs	r1, #16
   b685a:	4628      	mov	r0, r5
   b685c:	f7fe f8df 	bl	b4a1e <_ZdlPvj>
   b6860:	4620      	mov	r0, r4
   b6862:	2114      	movs	r1, #20
   b6864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6868:	f7fe b8d9 	b.w	b4a1e <_ZdlPvj>
   b686c:	bd38      	pop	{r3, r4, r5, pc}

000b686e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b686e:	680b      	ldr	r3, [r1, #0]
   b6870:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6872:	684b      	ldr	r3, [r1, #4]
   b6874:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6876:	b113      	cbz	r3, b687e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6878:	685a      	ldr	r2, [r3, #4]
   b687a:	3201      	adds	r2, #1
   b687c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b687e:	4770      	bx	lr

000b6880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6880:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6882:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6884:	4668      	mov	r0, sp
   b6886:	460d      	mov	r5, r1
   b6888:	f7ff fff1 	bl	b686e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b688c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b688e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6890:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6892:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6894:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6896:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6898:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b689a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b689c:	f7fe fa6a 	bl	b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b68a0:	b135      	cbz	r5, b68b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b68a2:	1d28      	adds	r0, r5, #4
   b68a4:	f7fe fa66 	bl	b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68a8:	2108      	movs	r1, #8
   b68aa:	4628      	mov	r0, r5
   b68ac:	f7fe f8b7 	bl	b4a1e <_ZdlPvj>
        return p;
    }
   b68b0:	4620      	mov	r0, r4
   b68b2:	b003      	add	sp, #12
   b68b4:	bd30      	pop	{r4, r5, pc}

000b68b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b68b6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b68b8:	b510      	push	{r4, lr}
      if (_M_empty())
   b68ba:	b90a      	cbnz	r2, b68c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b68bc:	f001 f890 	bl	b79e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b68c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b68c4:	68c3      	ldr	r3, [r0, #12]
   b68c6:	4718      	bx	r3

000b68c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b68c8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b68ca:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b68cc:	f100 0110 	add.w	r1, r0, #16
   b68d0:	f7ff fff1 	bl	b68b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b68d4:	bd08      	pop	{r3, pc}

000b68d6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b68d6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b68d8:	b510      	push	{r4, lr}
      if (_M_empty())
   b68da:	b90a      	cbnz	r2, b68e0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b68dc:	f001 f880 	bl	b79e0 <_ZSt25__throw_bad_function_callv>
    }
   b68e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b68e4:	68c3      	ldr	r3, [r0, #12]
   b68e6:	4718      	bx	r3

000b68e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b68e8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b68ea:	6800      	ldr	r0, [r0, #0]
   b68ec:	f100 0110 	add.w	r1, r0, #16
   b68f0:	f7ff fff1 	bl	b68d6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b68f4:	bd08      	pop	{r3, pc}
	...

000b68f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b68f8:	b538      	push	{r3, r4, r5, lr}
   b68fa:	2300      	movs	r3, #0
   b68fc:	4604      	mov	r4, r0
   b68fe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6900:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6902:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6904:	f7fe f885 	bl	b4a12 <_Znwj>
   b6908:	b128      	cbz	r0, b6916 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b690a:	2301      	movs	r3, #1
   b690c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6910:	4b02      	ldr	r3, [pc, #8]	; (b691c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6912:	6003      	str	r3, [r0, #0]
   b6914:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6916:	6020      	str	r0, [r4, #0]
	}
   b6918:	4620      	mov	r0, r4
   b691a:	bd38      	pop	{r3, r4, r5, pc}
   b691c:	000b9fcc 	.word	0x000b9fcc

000b6920 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6920:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6922:	2300      	movs	r3, #0
   b6924:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6926:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6928:	4604      	mov	r4, r0
   b692a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b692c:	b12b      	cbz	r3, b693a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b692e:	2202      	movs	r2, #2
   b6930:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6932:	68eb      	ldr	r3, [r5, #12]
   b6934:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6936:	68ab      	ldr	r3, [r5, #8]
   b6938:	60a3      	str	r3, [r4, #8]
    }
   b693a:	4620      	mov	r0, r4
   b693c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6940:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6942:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6944:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6946:	4668      	mov	r0, sp
   b6948:	f7ff ff5a 	bl	b6800 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b694c:	f04f 0302 	mov.w	r3, #2
   b6950:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6954:	2a00      	cmp	r2, #0
   b6956:	d103      	bne.n	b6960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6958:	e8c4 3f41 	strexb	r1, r3, [r4]
   b695c:	2900      	cmp	r1, #0
   b695e:	d1f7      	bne.n	b6950 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6960:	d125      	bne.n	b69ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6962:	f104 050c 	add.w	r5, r4, #12
   b6966:	4669      	mov	r1, sp
   b6968:	4628      	mov	r0, r5
   b696a:	f7ff ff49 	bl	b6800 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b696e:	f3bf 8f5b 	dmb	ish
   b6972:	2301      	movs	r3, #1
   b6974:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6976:	2000      	movs	r0, #0
   b6978:	f104 0308 	add.w	r3, r4, #8
   b697c:	f3bf 8f5b 	dmb	ish
   b6980:	e853 6f00 	ldrex	r6, [r3]
   b6984:	e843 0200 	strex	r2, r0, [r3]
   b6988:	2a00      	cmp	r2, #0
   b698a:	d1f9      	bne.n	b6980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b698c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6990:	b16e      	cbz	r6, b69ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6992:	f7ff f9c1 	bl	b5d18 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6996:	b178      	cbz	r0, b69b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6998:	4629      	mov	r1, r5
   b699a:	4630      	mov	r0, r6
   b699c:	f7ff ff8b 	bl	b68b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b69a0:	4630      	mov	r0, r6
   b69a2:	f7ff fcd5 	bl	b6350 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b69a6:	2110      	movs	r1, #16
   b69a8:	4630      	mov	r0, r6
   b69aa:	f7fe f838 	bl	b4a1e <_ZdlPvj>
        p_->setError(std::move(error));
   b69ae:	4668      	mov	r0, sp
   b69b0:	f7ff ff33 	bl	b681a <_ZN8particle5ErrorD1Ev>
    }
   b69b4:	b009      	add	sp, #36	; 0x24
   b69b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b69b8:	4631      	mov	r1, r6
   b69ba:	a802      	add	r0, sp, #8
   b69bc:	f7ff ffb0 	bl	b6920 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b69c0:	68e0      	ldr	r0, [r4, #12]
   b69c2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b69c6:	b108      	cbz	r0, b69cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b69c8:	f001 f99e 	bl	b7d08 <strdup>
        type_(type) {
   b69cc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b69ce:	2010      	movs	r0, #16
   b69d0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b69d4:	f7fe f81d 	bl	b4a12 <_Znwj>
   b69d8:	4605      	mov	r5, r0
   b69da:	b1e8      	cbz	r0, b6a18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b69dc:	2700      	movs	r7, #0
   b69de:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b69e0:	2018      	movs	r0, #24
   b69e2:	f7fe f816 	bl	b4a12 <_Znwj>
   b69e6:	4604      	mov	r4, r0
   b69e8:	b188      	cbz	r0, b6a0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b69ea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b69ec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b69ee:	a802      	add	r0, sp, #8
   b69f0:	f7ff fccb 	bl	b638a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69f4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b69f6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b69f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69fa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b69fc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b69fe:	a906      	add	r1, sp, #24
   b6a00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a02:	60e3      	str	r3, [r4, #12]
   b6a04:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6a08:	9205      	str	r2, [sp, #20]
   b6a0a:	f7ff fef9 	bl	b6800 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6a0e:	4b08      	ldr	r3, [pc, #32]	; (b6a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6a10:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6a12:	4b08      	ldr	r3, [pc, #32]	; (b6a34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6a14:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6a16:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6a18:	a806      	add	r0, sp, #24
   b6a1a:	f7ff fefe 	bl	b681a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6a1e:	a802      	add	r0, sp, #8
   b6a20:	f7ff fc96 	bl	b6350 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6a24:	2200      	movs	r2, #0
   b6a26:	4629      	mov	r1, r5
   b6a28:	4803      	ldr	r0, [pc, #12]	; (b6a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6a2a:	f7ff f97d 	bl	b5d28 <application_thread_invoke>
   b6a2e:	e7b7      	b.n	b69a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6a30:	000b68c9 	.word	0x000b68c9
   b6a34:	000b6b4d 	.word	0x000b6b4d
   b6a38:	000b702d 	.word	0x000b702d

000b6a3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a40:	b08b      	sub	sp, #44	; 0x2c
   b6a42:	4605      	mov	r5, r0
   b6a44:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6a48:	460f      	mov	r7, r1
   b6a4a:	4690      	mov	r8, r2
   b6a4c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6a4e:	f7ff f9f7 	bl	b5e40 <spark_cloud_flag_connected>
   b6a52:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6a54:	4683      	mov	fp, r0
   b6a56:	bb38      	cbnz	r0, b6aa8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6a58:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6a5c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6a5e:	a905      	add	r1, sp, #20
   b6a60:	4630      	mov	r0, r6
   b6a62:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6a66:	f7ff fecb 	bl	b6800 <_ZN8particle5ErrorC1EOS0_>
   b6a6a:	2014      	movs	r0, #20
   b6a6c:	f7fd ffd1 	bl	b4a12 <_Znwj>
   b6a70:	4604      	mov	r4, r0
   b6a72:	b148      	cbz	r0, b6a88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6a74:	2302      	movs	r3, #2
   b6a76:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6a78:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6a7a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6a7e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6a80:	4631      	mov	r1, r6
   b6a82:	300c      	adds	r0, #12
   b6a84:	f7ff febc 	bl	b6800 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6a88:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6a8a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6a8c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6a90:	f7ff ff32 	bl	b68f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6a94:	4630      	mov	r0, r6
   b6a96:	f7ff fec0 	bl	b681a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6a9a:	a805      	add	r0, sp, #20
   b6a9c:	f7ff febd 	bl	b681a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6aa0:	4628      	mov	r0, r5
   b6aa2:	b00b      	add	sp, #44	; 0x2c
   b6aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6aa8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6aaa:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6aac:	2014      	movs	r0, #20
   b6aae:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6ab2:	9307      	str	r3, [sp, #28]
   b6ab4:	f7fd ffad 	bl	b4a12 <_Znwj>
   b6ab8:	4601      	mov	r1, r0
   b6aba:	b118      	cbz	r0, b6ac4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6ac0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6ac2:	7044      	strb	r4, [r0, #1]
   b6ac4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6ac6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6ac8:	f7ff ff16 	bl	b68f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6acc:	4b1e      	ldr	r3, [pc, #120]	; (b6b48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6ace:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6ad0:	2008      	movs	r0, #8
   b6ad2:	f7fd ff9e 	bl	b4a12 <_Znwj>
   b6ad6:	4604      	mov	r4, r0
   b6ad8:	b110      	cbz	r0, b6ae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6ada:	a903      	add	r1, sp, #12
   b6adc:	f7ff fec7 	bl	b686e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6ae0:	9600      	str	r6, [sp, #0]
   b6ae2:	fa5f f38a 	uxtb.w	r3, sl
   b6ae6:	464a      	mov	r2, r9
   b6ae8:	4641      	mov	r1, r8
   b6aea:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6aec:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6aee:	f7ff f9af 	bl	b5e50 <spark_send_event>
   b6af2:	b9b8      	cbnz	r0, b6b24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6af4:	9b03      	ldr	r3, [sp, #12]
   b6af6:	785b      	ldrb	r3, [r3, #1]
   b6af8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6afc:	b993      	cbnz	r3, b6b24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6afe:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6b02:	a905      	add	r1, sp, #20
   b6b04:	a803      	add	r0, sp, #12
   b6b06:	9205      	str	r2, [sp, #20]
   b6b08:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6b0c:	f7ff ff18 	bl	b6940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6b10:	a805      	add	r0, sp, #20
   b6b12:	f7ff fe82 	bl	b681a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6b16:	a805      	add	r0, sp, #20
   b6b18:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6b1a:	f7ff feb1 	bl	b6880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6b1e:	a806      	add	r0, sp, #24
   b6b20:	f7fe f928 	bl	b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b24:	a903      	add	r1, sp, #12
   b6b26:	a805      	add	r0, sp, #20
   b6b28:	f7ff fea1 	bl	b686e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6b2c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6b2e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6b30:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6b32:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6b34:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6b36:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6b38:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6b3a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6b3c:	f7fe f91a 	bl	b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b40:	a804      	add	r0, sp, #16
   b6b42:	f7fe f917 	bl	b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6b46:	e7ab      	b.n	b6aa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6b48:	000b6bc9 	.word	0x000b6bc9

000b6b4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6b4c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b50:	4605      	mov	r5, r0
	switch (__op)
   b6b52:	d103      	bne.n	b6b5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6b54:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6b56:	6003      	str	r3, [r0, #0]
      }
   b6b58:	2000      	movs	r0, #0
   b6b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6b5c:	2a02      	cmp	r2, #2
   b6b5e:	d010      	beq.n	b6b82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6b60:	2a03      	cmp	r2, #3
   b6b62:	d1f9      	bne.n	b6b58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6b64:	6804      	ldr	r4, [r0, #0]
   b6b66:	2c00      	cmp	r4, #0
   b6b68:	d0f6      	beq.n	b6b58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6b6a:	f104 0010 	add.w	r0, r4, #16
   b6b6e:	f7ff fe54 	bl	b681a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6b72:	4620      	mov	r0, r4
   b6b74:	f7ff fbec 	bl	b6350 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6b78:	2118      	movs	r1, #24
   b6b7a:	4620      	mov	r0, r4
   b6b7c:	f7fd ff4f 	bl	b4a1e <_ZdlPvj>
   b6b80:	e7ea      	b.n	b6b58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b82:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6b84:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b86:	f7fd ff44 	bl	b4a12 <_Znwj>
   b6b8a:	4604      	mov	r4, r0
   b6b8c:	b150      	cbz	r0, b6ba4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6b8e:	4631      	mov	r1, r6
   b6b90:	f7ff fec6 	bl	b6920 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6b94:	6930      	ldr	r0, [r6, #16]
   b6b96:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6b9a:	b108      	cbz	r0, b6ba0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6b9c:	f001 f8b4 	bl	b7d08 <strdup>
        type_(type) {
   b6ba0:	6120      	str	r0, [r4, #16]
   b6ba2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6ba4:	602c      	str	r4, [r5, #0]
	}
   b6ba6:	e7d7      	b.n	b6b58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6ba8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6baa:	2300      	movs	r3, #0
   b6bac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6bae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6bb0:	4604      	mov	r4, r0
   b6bb2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6bb4:	b12b      	cbz	r3, b6bc2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6bb6:	2202      	movs	r2, #2
   b6bb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6bba:	68eb      	ldr	r3, [r5, #12]
   b6bbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6bbe:	68ab      	ldr	r3, [r5, #8]
   b6bc0:	60a3      	str	r3, [r4, #8]
    }
   b6bc2:	4620      	mov	r0, r4
   b6bc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6bc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bca:	b089      	sub	sp, #36	; 0x24
   b6bcc:	4604      	mov	r4, r0
   b6bce:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6bd0:	a801      	add	r0, sp, #4
   b6bd2:	4611      	mov	r1, r2
   b6bd4:	f7ff fe54 	bl	b6880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6bd8:	b1a4      	cbz	r4, b6c04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6bda:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6bdc:	b11d      	cbz	r5, b6be6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6bde:	4628      	mov	r0, r5
   b6be0:	f001 f892 	bl	b7d08 <strdup>
   b6be4:	4605      	mov	r5, r0
   b6be6:	a801      	add	r0, sp, #4
   b6be8:	a903      	add	r1, sp, #12
        type_(type) {
   b6bea:	9503      	str	r5, [sp, #12]
   b6bec:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6bf0:	f7ff fea6 	bl	b6940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6bf4:	a803      	add	r0, sp, #12
   b6bf6:	f7ff fe10 	bl	b681a <_ZN8particle5ErrorD1Ev>
   b6bfa:	a802      	add	r0, sp, #8
   b6bfc:	f7fe f8ba 	bl	b4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6c00:	b009      	add	sp, #36	; 0x24
   b6c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6c04:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6c06:	2301      	movs	r3, #1
   b6c08:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6c0c:	2a00      	cmp	r2, #0
   b6c0e:	d103      	bne.n	b6c18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6c10:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6c14:	2900      	cmp	r1, #0
   b6c16:	d1f7      	bne.n	b6c08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6c18:	d1ef      	bne.n	b6bfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6c1a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6c1c:	f3bf 8f5b 	dmb	ish
   b6c20:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6c22:	1d2b      	adds	r3, r5, #4
   b6c24:	f3bf 8f5b 	dmb	ish
   b6c28:	e853 6f00 	ldrex	r6, [r3]
   b6c2c:	e843 4200 	strex	r2, r4, [r3]
   b6c30:	2a00      	cmp	r2, #0
   b6c32:	d1f9      	bne.n	b6c28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6c34:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6c38:	2e00      	cmp	r6, #0
   b6c3a:	d0de      	beq.n	b6bfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6c3c:	4620      	mov	r0, r4
   b6c3e:	f7ff f86b 	bl	b5d18 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6c42:	4607      	mov	r7, r0
   b6c44:	b160      	cbz	r0, b6c60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6c46:	f105 010c 	add.w	r1, r5, #12
   b6c4a:	4630      	mov	r0, r6
   b6c4c:	f7ff fe43 	bl	b68d6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6c50:	4630      	mov	r0, r6
   b6c52:	f7ff fb7d 	bl	b6350 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6c56:	2110      	movs	r1, #16
   b6c58:	4630      	mov	r0, r6
   b6c5a:	f7fd fee0 	bl	b4a1e <_ZdlPvj>
   b6c5e:	e7cc      	b.n	b6bfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6c60:	4631      	mov	r1, r6
   b6c62:	a803      	add	r0, sp, #12
   b6c64:	f7ff ffa0 	bl	b6ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6c68:	7b2b      	ldrb	r3, [r5, #12]
   b6c6a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6c6e:	2010      	movs	r0, #16
   b6c70:	f7fd fecf 	bl	b4a12 <_Znwj>
   b6c74:	4605      	mov	r5, r0
   b6c76:	b1d0      	cbz	r0, b6cae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6c78:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c7a:	2014      	movs	r0, #20
   b6c7c:	f7fd fec9 	bl	b4a12 <_Znwj>
   b6c80:	4604      	mov	r4, r0
   b6c82:	b178      	cbz	r0, b6ca4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6c84:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6c86:	4601      	mov	r1, r0
   b6c88:	a803      	add	r0, sp, #12
   b6c8a:	f7ff fb7e 	bl	b638a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c8e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6c90:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c92:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c94:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6c96:	9205      	str	r2, [sp, #20]
   b6c98:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c9a:	60e3      	str	r3, [r4, #12]
   b6c9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6ca0:	9206      	str	r2, [sp, #24]
   b6ca2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6ca4:	4b06      	ldr	r3, [pc, #24]	; (b6cc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6ca6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6ca8:	4b06      	ldr	r3, [pc, #24]	; (b6cc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6caa:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6cac:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6cae:	a803      	add	r0, sp, #12
   b6cb0:	f7ff fb4e 	bl	b6350 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6cb4:	2200      	movs	r2, #0
   b6cb6:	4629      	mov	r1, r5
   b6cb8:	4803      	ldr	r0, [pc, #12]	; (b6cc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6cba:	f7ff f835 	bl	b5d28 <application_thread_invoke>
   b6cbe:	e7c7      	b.n	b6c50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6cc0:	000b68e9 	.word	0x000b68e9
   b6cc4:	000b6ccd 	.word	0x000b6ccd
   b6cc8:	000b702d 	.word	0x000b702d

000b6ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6ccc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6cce:	b570      	push	{r4, r5, r6, lr}
   b6cd0:	4604      	mov	r4, r0
	switch (__op)
   b6cd2:	d103      	bne.n	b6cdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6cd4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6cd6:	6003      	str	r3, [r0, #0]
      }
   b6cd8:	2000      	movs	r0, #0
   b6cda:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6cdc:	2a02      	cmp	r2, #2
   b6cde:	d00c      	beq.n	b6cfa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6ce0:	2a03      	cmp	r2, #3
   b6ce2:	d1f9      	bne.n	b6cd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6ce4:	6804      	ldr	r4, [r0, #0]
   b6ce6:	2c00      	cmp	r4, #0
   b6ce8:	d0f6      	beq.n	b6cd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6cea:	4620      	mov	r0, r4
   b6cec:	f7ff fb30 	bl	b6350 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6cf0:	2114      	movs	r1, #20
   b6cf2:	4620      	mov	r0, r4
   b6cf4:	f7fd fe93 	bl	b4a1e <_ZdlPvj>
   b6cf8:	e7ee      	b.n	b6cd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6cfa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6cfc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6cfe:	f7fd fe88 	bl	b4a12 <_Znwj>
   b6d02:	4605      	mov	r5, r0
   b6d04:	b120      	cbz	r0, b6d10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6d06:	4631      	mov	r1, r6
   b6d08:	f7ff ff4e 	bl	b6ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6d0c:	7c33      	ldrb	r3, [r6, #16]
   b6d0e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6d10:	6025      	str	r5, [r4, #0]
	}
   b6d12:	e7e1      	b.n	b6cd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6d14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d14:	4770      	bx	lr

000b6d16 <_ZN9IPAddressD0Ev>:
   b6d16:	b510      	push	{r4, lr}
   b6d18:	2118      	movs	r1, #24
   b6d1a:	4604      	mov	r4, r0
   b6d1c:	f7fd fe7f 	bl	b4a1e <_ZdlPvj>
   b6d20:	4620      	mov	r0, r4
   b6d22:	bd10      	pop	{r4, pc}

000b6d24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d24:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d26:	7d03      	ldrb	r3, [r0, #20]
   b6d28:	2b06      	cmp	r3, #6
{
   b6d2a:	b08d      	sub	sp, #52	; 0x34
   b6d2c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d2e:	f100 0704 	add.w	r7, r0, #4
   b6d32:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6d36:	d012      	beq.n	b6d5e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6d38:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6d3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6d40:	220a      	movs	r2, #10
   b6d42:	4630      	mov	r0, r6
   b6d44:	f7ff fb7d 	bl	b6442 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6d48:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6d4a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6d4c:	d019      	beq.n	b6d82 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6d4e:	2c00      	cmp	r4, #0
   b6d50:	d0f4      	beq.n	b6d3c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6d52:	212e      	movs	r1, #46	; 0x2e
   b6d54:	4630      	mov	r0, r6
   b6d56:	f7ff fb5b 	bl	b6410 <_ZN5Print5printEc>
   b6d5a:	4404      	add	r4, r0
   b6d5c:	e7ee      	b.n	b6d3c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d5e:	232f      	movs	r3, #47	; 0x2f
   b6d60:	466a      	mov	r2, sp
   b6d62:	4639      	mov	r1, r7
   b6d64:	200a      	movs	r0, #10
		buf[0] = 0;
   b6d66:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d6a:	f7fe feb5 	bl	b5ad8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6d6e:	4668      	mov	r0, sp
   b6d70:	f7fd fdf4 	bl	b495c <strlen>
   b6d74:	6833      	ldr	r3, [r6, #0]
   b6d76:	4602      	mov	r2, r0
   b6d78:	68db      	ldr	r3, [r3, #12]
   b6d7a:	4669      	mov	r1, sp
   b6d7c:	4630      	mov	r0, r6
   b6d7e:	4798      	blx	r3
   b6d80:	4604      	mov	r4, r0
    }
    return n;
}
   b6d82:	4620      	mov	r0, r4
   b6d84:	b00d      	add	sp, #52	; 0x34
   b6d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d88 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6d88:	b510      	push	{r4, lr}
   b6d8a:	4b05      	ldr	r3, [pc, #20]	; (b6da0 <_ZN9IPAddressC1Ev+0x18>)
   b6d8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6d8e:	2211      	movs	r2, #17
   b6d90:	f840 3b04 	str.w	r3, [r0], #4
   b6d94:	2100      	movs	r1, #0
   b6d96:	f000 ff68 	bl	b7c6a <memset>
}
   b6d9a:	4620      	mov	r0, r4
   b6d9c:	bd10      	pop	{r4, pc}
   b6d9e:	bf00      	nop
   b6da0:	000b9fe8 	.word	0x000b9fe8

000b6da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6da4:	4603      	mov	r3, r0
   b6da6:	4a07      	ldr	r2, [pc, #28]	; (b6dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6da8:	b510      	push	{r4, lr}
   b6daa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6dae:	f101 0210 	add.w	r2, r1, #16
   b6db2:	f851 4b04 	ldr.w	r4, [r1], #4
   b6db6:	f843 4b04 	str.w	r4, [r3], #4
   b6dba:	4291      	cmp	r1, r2
   b6dbc:	d1f9      	bne.n	b6db2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6dbe:	780a      	ldrb	r2, [r1, #0]
   b6dc0:	701a      	strb	r2, [r3, #0]
}
   b6dc2:	bd10      	pop	{r4, pc}
   b6dc4:	000b9fe8 	.word	0x000b9fe8

000b6dc8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6dc8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6dca:	2b04      	cmp	r3, #4
   b6dcc:	d104      	bne.n	b6dd8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6dce:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6dd0:	3800      	subs	r0, #0
   b6dd2:	bf18      	it	ne
   b6dd4:	2001      	movne	r0, #1
   b6dd6:	4770      	bx	lr
    } else if (version() == 6) {
   b6dd8:	2b06      	cmp	r3, #6
   b6dda:	d107      	bne.n	b6dec <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6ddc:	6843      	ldr	r3, [r0, #4]
   b6dde:	b93b      	cbnz	r3, b6df0 <_ZNK9IPAddresscvbEv+0x28>
   b6de0:	6883      	ldr	r3, [r0, #8]
   b6de2:	b92b      	cbnz	r3, b6df0 <_ZNK9IPAddresscvbEv+0x28>
   b6de4:	68c3      	ldr	r3, [r0, #12]
   b6de6:	b91b      	cbnz	r3, b6df0 <_ZNK9IPAddresscvbEv+0x28>
   b6de8:	6900      	ldr	r0, [r0, #16]
   b6dea:	e7f1      	b.n	b6dd0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6dec:	2000      	movs	r0, #0
   b6dee:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6df0:	2001      	movs	r0, #1
}
   b6df2:	4770      	bx	lr

000b6df4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6df4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6df6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6dfa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6dfe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6e02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6e06:	2304      	movs	r3, #4
   b6e08:	6041      	str	r1, [r0, #4]
   b6e0a:	7503      	strb	r3, [r0, #20]
}
   b6e0c:	bd10      	pop	{r4, pc}
	...

000b6e10 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6e10:	b507      	push	{r0, r1, r2, lr}
   b6e12:	4b06      	ldr	r3, [pc, #24]	; (b6e2c <_ZN9IPAddressC1EPKh+0x1c>)
   b6e14:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6e16:	78cb      	ldrb	r3, [r1, #3]
   b6e18:	9300      	str	r3, [sp, #0]
   b6e1a:	788b      	ldrb	r3, [r1, #2]
   b6e1c:	784a      	ldrb	r2, [r1, #1]
   b6e1e:	7809      	ldrb	r1, [r1, #0]
   b6e20:	f7ff ffe8 	bl	b6df4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6e24:	b003      	add	sp, #12
   b6e26:	f85d fb04 	ldr.w	pc, [sp], #4
   b6e2a:	bf00      	nop
   b6e2c:	000b9fe8 	.word	0x000b9fe8

000b6e30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6e30:	7441      	strb	r1, [r0, #17]
}
   b6e32:	4770      	bx	lr

000b6e34 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6e34:	4770      	bx	lr

000b6e36 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6e36:	4770      	bx	lr

000b6e38 <_ZN9USBSerial4readEv>:
{
   b6e38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6e3a:	2100      	movs	r1, #0
   b6e3c:	7c00      	ldrb	r0, [r0, #16]
   b6e3e:	f7fe ff33 	bl	b5ca8 <HAL_USB_USART_Receive_Data>
}
   b6e42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e46:	bd08      	pop	{r3, pc}

000b6e48 <_ZN9USBSerial4peekEv>:
{
   b6e48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6e4a:	2101      	movs	r1, #1
   b6e4c:	7c00      	ldrb	r0, [r0, #16]
   b6e4e:	f7fe ff2b 	bl	b5ca8 <HAL_USB_USART_Receive_Data>
}
   b6e52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e56:	bd08      	pop	{r3, pc}

000b6e58 <_ZN9USBSerial17availableForWriteEv>:
{
   b6e58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6e5a:	7c00      	ldrb	r0, [r0, #16]
   b6e5c:	f7fe ff1c 	bl	b5c98 <HAL_USB_USART_Available_Data_For_Write>
}
   b6e60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e64:	bd08      	pop	{r3, pc}

000b6e66 <_ZN9USBSerial9availableEv>:
{
   b6e66:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6e68:	7c00      	ldrb	r0, [r0, #16]
   b6e6a:	f7fe ff0d 	bl	b5c88 <HAL_USB_USART_Available_Data>
}
   b6e6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e72:	bd08      	pop	{r3, pc}

000b6e74 <_ZN9USBSerial5writeEh>:
{
   b6e74:	b513      	push	{r0, r1, r4, lr}
   b6e76:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e78:	7c00      	ldrb	r0, [r0, #16]
{
   b6e7a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6e7c:	f7fe ff0c 	bl	b5c98 <HAL_USB_USART_Available_Data_For_Write>
   b6e80:	2800      	cmp	r0, #0
   b6e82:	9901      	ldr	r1, [sp, #4]
   b6e84:	dc01      	bgt.n	b6e8a <_ZN9USBSerial5writeEh+0x16>
   b6e86:	7c60      	ldrb	r0, [r4, #17]
   b6e88:	b120      	cbz	r0, b6e94 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6e8a:	7c20      	ldrb	r0, [r4, #16]
   b6e8c:	f7fe ff14 	bl	b5cb8 <HAL_USB_USART_Send_Data>
   b6e90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6e94:	b002      	add	sp, #8
   b6e96:	bd10      	pop	{r4, pc}

000b6e98 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6e98:	7c00      	ldrb	r0, [r0, #16]
   b6e9a:	f7fe bf15 	b.w	b5cc8 <HAL_USB_USART_Flush_Data>

000b6e9e <_ZN9USBSerialD0Ev>:
   b6e9e:	b510      	push	{r4, lr}
   b6ea0:	2114      	movs	r1, #20
   b6ea2:	4604      	mov	r4, r0
   b6ea4:	f7fd fdbb 	bl	b4a1e <_ZdlPvj>
   b6ea8:	4620      	mov	r0, r4
   b6eaa:	bd10      	pop	{r4, pc}

000b6eac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6eac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6eb2:	4604      	mov	r4, r0
   b6eb4:	4608      	mov	r0, r1
   b6eb6:	2100      	movs	r1, #0
   b6eb8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6ebc:	4b04      	ldr	r3, [pc, #16]	; (b6ed0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6ebe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6ec0:	2301      	movs	r3, #1
  _serial = serial;
   b6ec2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6ec4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6ec6:	4611      	mov	r1, r2
   b6ec8:	f7fe fed6 	bl	b5c78 <HAL_USB_USART_Init>
}
   b6ecc:	4620      	mov	r0, r4
   b6ece:	bd10      	pop	{r4, pc}
   b6ed0:	000b9ffc 	.word	0x000b9ffc

000b6ed4 <_Z19acquireSerialBufferv>:
{
   b6ed4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6ed6:	2214      	movs	r2, #20
{
   b6ed8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6eda:	2100      	movs	r1, #0
   b6edc:	f000 fec5 	bl	b7c6a <memset>
}
   b6ee0:	4620      	mov	r0, r4
   b6ee2:	bd10      	pop	{r4, pc}

000b6ee4 <_Z16_fetch_usbserialv>:
{
   b6ee4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ee6:	4c0f      	ldr	r4, [pc, #60]	; (b6f24 <_Z16_fetch_usbserialv+0x40>)
{
   b6ee8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6eea:	a803      	add	r0, sp, #12
   b6eec:	f7ff fff2 	bl	b6ed4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ef0:	7821      	ldrb	r1, [r4, #0]
   b6ef2:	f3bf 8f5b 	dmb	ish
   b6ef6:	f011 0101 	ands.w	r1, r1, #1
   b6efa:	d10f      	bne.n	b6f1c <_Z16_fetch_usbserialv+0x38>
   b6efc:	4620      	mov	r0, r4
   b6efe:	9101      	str	r1, [sp, #4]
   b6f00:	f7fd fd8f 	bl	b4a22 <__cxa_guard_acquire>
   b6f04:	9901      	ldr	r1, [sp, #4]
   b6f06:	b148      	cbz	r0, b6f1c <_Z16_fetch_usbserialv+0x38>
   b6f08:	aa03      	add	r2, sp, #12
   b6f0a:	4807      	ldr	r0, [pc, #28]	; (b6f28 <_Z16_fetch_usbserialv+0x44>)
   b6f0c:	f7ff ffce 	bl	b6eac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6f10:	4620      	mov	r0, r4
   b6f12:	f7fd fd8b 	bl	b4a2c <__cxa_guard_release>
   b6f16:	4805      	ldr	r0, [pc, #20]	; (b6f2c <_Z16_fetch_usbserialv+0x48>)
   b6f18:	f000 fe78 	bl	b7c0c <atexit>
	return _usbserial;
}
   b6f1c:	4802      	ldr	r0, [pc, #8]	; (b6f28 <_Z16_fetch_usbserialv+0x44>)
   b6f1e:	b008      	add	sp, #32
   b6f20:	bd10      	pop	{r4, pc}
   b6f22:	bf00      	nop
   b6f24:	2003e6f8 	.word	0x2003e6f8
   b6f28:	2003e6fc 	.word	0x2003e6fc
   b6f2c:	000b6e35 	.word	0x000b6e35

000b6f30 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b6f30:	4700      	bx	r0
	...

000b6f34 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b6f34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b6f38:	2400      	movs	r4, #0
{
   b6f3a:	461d      	mov	r5, r3
   b6f3c:	460f      	mov	r7, r1
   b6f3e:	4690      	mov	r8, r2
   b6f40:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b6f42:	f7fe fd79 	bl	b5a38 <hal_interrupt_detach>
  if (priority >= 0) {
   b6f46:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6f48:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b6f4c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b6f50:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b6f54:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b6f58:	bfa2      	ittt	ge
   b6f5a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b6f5e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b6f62:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6f64:	4907      	ldr	r1, [pc, #28]	; (b6f84 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b6f66:	9400      	str	r4, [sp, #0]
   b6f68:	4643      	mov	r3, r8
   b6f6a:	463a      	mov	r2, r7
   b6f6c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b6f6e:	bfa8      	it	ge
   b6f70:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b6f74:	f7fe fd58 	bl	b5a28 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b6f78:	fab0 f080 	clz	r0, r0
   b6f7c:	0940      	lsrs	r0, r0, #5
   b6f7e:	b004      	add	sp, #16
   b6f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6f84:	000b6f31 	.word	0x000b6f31

000b6f88 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6f88:	4770      	bx	lr

000b6f8a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6f8a:	7441      	strb	r1, [r0, #17]
}
   b6f8c:	4770      	bx	lr

000b6f8e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6f8e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6f90:	7c00      	ldrb	r0, [r0, #16]
   b6f92:	f7fe fde9 	bl	b5b68 <hal_usart_available_data_for_write>
}
   b6f96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f9a:	bd08      	pop	{r3, pc}

000b6f9c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6f9c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6f9e:	7c00      	ldrb	r0, [r0, #16]
   b6fa0:	f7fe fdba 	bl	b5b18 <hal_usart_available>
}
   b6fa4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fa8:	bd08      	pop	{r3, pc}

000b6faa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6faa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6fac:	7c00      	ldrb	r0, [r0, #16]
   b6fae:	f7fe fdc3 	bl	b5b38 <hal_usart_peek>
}
   b6fb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fb6:	bd08      	pop	{r3, pc}

000b6fb8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6fb8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6fba:	7c00      	ldrb	r0, [r0, #16]
   b6fbc:	f7fe fdb4 	bl	b5b28 <hal_usart_read>
}
   b6fc0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fc4:	bd08      	pop	{r3, pc}

000b6fc6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6fc6:	7c00      	ldrb	r0, [r0, #16]
   b6fc8:	f7fe bdbe 	b.w	b5b48 <hal_usart_flush>

000b6fcc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fce:	7c45      	ldrb	r5, [r0, #17]
{
   b6fd0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fd2:	b12d      	cbz	r5, b6fe0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6fd4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6fd6:	b003      	add	sp, #12
   b6fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6fdc:	f7fe bd94 	b.w	b5b08 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fe0:	7c00      	ldrb	r0, [r0, #16]
   b6fe2:	9101      	str	r1, [sp, #4]
   b6fe4:	f7fe fdc0 	bl	b5b68 <hal_usart_available_data_for_write>
   b6fe8:	2800      	cmp	r0, #0
   b6fea:	9901      	ldr	r1, [sp, #4]
   b6fec:	dcf2      	bgt.n	b6fd4 <_ZN11USARTSerial5writeEh+0x8>
}
   b6fee:	4628      	mov	r0, r5
   b6ff0:	b003      	add	sp, #12
   b6ff2:	bd30      	pop	{r4, r5, pc}

000b6ff4 <_ZN11USARTSerialD0Ev>:
   b6ff4:	b510      	push	{r4, lr}
   b6ff6:	2114      	movs	r1, #20
   b6ff8:	4604      	mov	r4, r0
   b6ffa:	f7fd fd10 	bl	b4a1e <_ZdlPvj>
   b6ffe:	4620      	mov	r0, r4
   b7000:	bd10      	pop	{r4, pc}
	...

000b7004 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7004:	b510      	push	{r4, lr}
   b7006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b700a:	4604      	mov	r4, r0
   b700c:	4608      	mov	r0, r1
   b700e:	4611      	mov	r1, r2
   b7010:	2200      	movs	r2, #0
   b7012:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7016:	4b04      	ldr	r3, [pc, #16]	; (b7028 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7018:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b701a:	2301      	movs	r3, #1
  _serial = serial;
   b701c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b701e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7020:	f7fe fdaa 	bl	b5b78 <hal_usart_init_ex>
}
   b7024:	4620      	mov	r0, r4
   b7026:	bd10      	pop	{r4, pc}
   b7028:	000ba02c 	.word	0x000ba02c

000b702c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b702c:	b510      	push	{r4, lr}
      if (_M_empty())
   b702e:	6883      	ldr	r3, [r0, #8]
   b7030:	4604      	mov	r4, r0
   b7032:	b90b      	cbnz	r3, b7038 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b7034:	f000 fcd4 	bl	b79e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7038:	68c3      	ldr	r3, [r0, #12]
   b703a:	4798      	blx	r3
      if (_M_manager)
   b703c:	68a3      	ldr	r3, [r4, #8]
   b703e:	b11b      	cbz	r3, b7048 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7040:	2203      	movs	r2, #3
   b7042:	4621      	mov	r1, r4
   b7044:	4620      	mov	r0, r4
   b7046:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7048:	4620      	mov	r0, r4
   b704a:	2110      	movs	r1, #16
}
   b704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7050:	f7fd bce5 	b.w	b4a1e <_ZdlPvj>

000b7054 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7054:	4770      	bx	lr

000b7056 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7058:	4606      	mov	r6, r0
   b705a:	4615      	mov	r5, r2
   b705c:	460c      	mov	r4, r1
   b705e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7060:	42bc      	cmp	r4, r7
   b7062:	d006      	beq.n	b7072 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7064:	6833      	ldr	r3, [r6, #0]
   b7066:	f814 1b01 	ldrb.w	r1, [r4], #1
   b706a:	689b      	ldr	r3, [r3, #8]
   b706c:	4630      	mov	r0, r6
   b706e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7070:	e7f6      	b.n	b7060 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7072:	4628      	mov	r0, r5
   b7074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7076 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7076:	7c00      	ldrb	r0, [r0, #16]
   b7078:	2200      	movs	r2, #0
   b707a:	f7fe bd85 	b.w	b5b88 <hal_i2c_write>

000b707e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b707e:	7c00      	ldrb	r0, [r0, #16]
   b7080:	2100      	movs	r1, #0
   b7082:	f7fe bd89 	b.w	b5b98 <hal_i2c_available>

000b7086 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7086:	7c00      	ldrb	r0, [r0, #16]
   b7088:	2100      	movs	r1, #0
   b708a:	f7fe bd8d 	b.w	b5ba8 <hal_i2c_read>

000b708e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b708e:	7c00      	ldrb	r0, [r0, #16]
   b7090:	2100      	movs	r1, #0
   b7092:	f7fe bd91 	b.w	b5bb8 <hal_i2c_peek>

000b7096 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7096:	7c00      	ldrb	r0, [r0, #16]
   b7098:	2100      	movs	r1, #0
   b709a:	f7fe bd95 	b.w	b5bc8 <hal_i2c_flush>

000b709e <_ZN7TwoWireD0Ev>:
   b709e:	b510      	push	{r4, lr}
   b70a0:	2114      	movs	r1, #20
   b70a2:	4604      	mov	r4, r0
   b70a4:	f7fd fcbb 	bl	b4a1e <_ZdlPvj>
   b70a8:	4620      	mov	r0, r4
   b70aa:	bd10      	pop	{r4, pc}

000b70ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70ac:	b510      	push	{r4, lr}
   b70ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70b2:	4604      	mov	r4, r0
   b70b4:	4608      	mov	r0, r1
   b70b6:	2100      	movs	r1, #0
   b70b8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b70bc:	4b03      	ldr	r3, [pc, #12]	; (b70cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b70be:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b70c0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b70c2:	4611      	mov	r1, r2
   b70c4:	f7fe fd90 	bl	b5be8 <hal_i2c_init>
}
   b70c8:	4620      	mov	r0, r4
   b70ca:	bd10      	pop	{r4, pc}
   b70cc:	000ba05c 	.word	0x000ba05c

000b70d0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b70d0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b70d2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b70d4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b70d8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b70da:	2201      	movs	r2, #1
   b70dc:	f04f 33ff 	mov.w	r3, #4294967295
   b70e0:	f10d 0107 	add.w	r1, sp, #7
   b70e4:	47a0      	blx	r4
}
   b70e6:	b002      	add	sp, #8
   b70e8:	bd10      	pop	{r4, pc}

000b70ea <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b70ea:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b70ec:	6803      	ldr	r3, [r0, #0]
   b70ee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b70f0:	f04f 33ff 	mov.w	r3, #4294967295
   b70f4:	46a4      	mov	ip, r4
}
   b70f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b70fa:	4760      	bx	ip

000b70fc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b70fc:	b513      	push	{r0, r1, r4, lr}
   b70fe:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7100:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7102:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7106:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7108:	f10d 0107 	add.w	r1, sp, #7
   b710c:	2201      	movs	r2, #1
   b710e:	47a0      	blx	r4
}
   b7110:	b002      	add	sp, #8
   b7112:	bd10      	pop	{r4, pc}

000b7114 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7114:	b510      	push	{r4, lr}
   b7116:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7118:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b711c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7120:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7122:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7124:	d008      	beq.n	b7138 <_ZN9TCPClient4readEv+0x24>
   b7126:	6963      	ldr	r3, [r4, #20]
   b7128:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b712c:	1c51      	adds	r1, r2, #1
   b712e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7132:	4413      	add	r3, r2
   b7134:	7918      	ldrb	r0, [r3, #4]
}
   b7136:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7138:	6803      	ldr	r3, [r0, #0]
   b713a:	691b      	ldr	r3, [r3, #16]
   b713c:	4798      	blx	r3
   b713e:	2800      	cmp	r0, #0
   b7140:	d1f1      	bne.n	b7126 <_ZN9TCPClient4readEv+0x12>
   b7142:	f04f 30ff 	mov.w	r0, #4294967295
   b7146:	e7f6      	b.n	b7136 <_ZN9TCPClient4readEv+0x22>

000b7148 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7148:	4770      	bx	lr

000b714a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b714a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b714c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b714e:	43c0      	mvns	r0, r0
   b7150:	0fc0      	lsrs	r0, r0, #31
   b7152:	4770      	bx	lr

000b7154 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7154:	4770      	bx	lr
	...

000b7158 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7158:	4b06      	ldr	r3, [pc, #24]	; (b7174 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b715a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b715c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b715e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7162:	d005      	beq.n	b7170 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7164:	4608      	mov	r0, r1
   b7166:	f000 fc3f 	bl	b79e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b716a:	2800      	cmp	r0, #0
   b716c:	bf08      	it	eq
   b716e:	2400      	moveq	r4, #0
      }
   b7170:	4620      	mov	r0, r4
   b7172:	bd10      	pop	{r4, pc}
   b7174:	000b9f9c 	.word	0x000b9f9c

000b7178 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7178:	b510      	push	{r4, lr}
   b717a:	21ac      	movs	r1, #172	; 0xac
   b717c:	4604      	mov	r4, r0
   b717e:	f7fd fc4e 	bl	b4a1e <_ZdlPvj>
   b7182:	4620      	mov	r0, r4
   b7184:	bd10      	pop	{r4, pc}

000b7186 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7186:	21ac      	movs	r1, #172	; 0xac
   b7188:	f7fd bc49 	b.w	b4a1e <_ZdlPvj>

000b718c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7190:	f04f 0800 	mov.w	r8, #0
   b7194:	b086      	sub	sp, #24
   b7196:	461c      	mov	r4, r3
   b7198:	f8c0 8004 	str.w	r8, [r0, #4]
   b719c:	4605      	mov	r5, r0
   b719e:	460e      	mov	r6, r1
   b71a0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b71a2:	4641      	mov	r1, r8
   b71a4:	2210      	movs	r2, #16
   b71a6:	a802      	add	r0, sp, #8
   b71a8:	f000 fd5f 	bl	b7c6a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b71ac:	1c63      	adds	r3, r4, #1
   b71ae:	d009      	beq.n	b71c4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b71b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b71b4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b71b8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b71bc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b71c0:	435c      	muls	r4, r3
   b71c2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b71c4:	6968      	ldr	r0, [r5, #20]
   b71c6:	2310      	movs	r3, #16
   b71c8:	9300      	str	r3, [sp, #0]
   b71ca:	6800      	ldr	r0, [r0, #0]
   b71cc:	ab02      	add	r3, sp, #8
   b71ce:	f241 0205 	movw	r2, #4101	; 0x1005
   b71d2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b71d6:	f7fe fd0f 	bl	b5bf8 <sock_setsockopt>
    if (ret < 0) {
   b71da:	2800      	cmp	r0, #0
   b71dc:	da07      	bge.n	b71ee <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b71de:	f7fe fe97 	bl	b5f10 <__errno>
   b71e2:	6803      	ldr	r3, [r0, #0]
   b71e4:	606b      	str	r3, [r5, #4]
        return 0;
   b71e6:	2000      	movs	r0, #0
}
   b71e8:	b006      	add	sp, #24
   b71ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b71ee:	6968      	ldr	r0, [r5, #20]
   b71f0:	2300      	movs	r3, #0
   b71f2:	6800      	ldr	r0, [r0, #0]
   b71f4:	463a      	mov	r2, r7
   b71f6:	4631      	mov	r1, r6
   b71f8:	f7fe fd1e 	bl	b5c38 <sock_send>
    if (ret < 0) {
   b71fc:	1e03      	subs	r3, r0, #0
   b71fe:	dbee      	blt.n	b71de <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7200:	4618      	mov	r0, r3
   b7202:	e7f1      	b.n	b71e8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7204 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7204:	b530      	push	{r4, r5, lr}
   b7206:	b087      	sub	sp, #28
   b7208:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b720a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b720c:	4668      	mov	r0, sp
   b720e:	f7ff fdff 	bl	b6e10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7214:	3404      	adds	r4, #4
   b7216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7218:	682b      	ldr	r3, [r5, #0]
   b721a:	7023      	strb	r3, [r4, #0]
    }
   b721c:	b007      	add	sp, #28
   b721e:	bd30      	pop	{r4, r5, pc}

000b7220 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7220:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7222:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7224:	4b05      	ldr	r3, [pc, #20]	; (b723c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7226:	4604      	mov	r4, r0
   b7228:	358c      	adds	r5, #140	; 0x8c
   b722a:	f844 3b04 	str.w	r3, [r4], #4
   b722e:	4606      	mov	r6, r0
   b7230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7234:	682b      	ldr	r3, [r5, #0]
   b7236:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7238:	4630      	mov	r0, r6
   b723a:	bd70      	pop	{r4, r5, r6, pc}
   b723c:	000b9fe8 	.word	0x000b9fe8

000b7240 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7244:	4698      	mov	r8, r3
    stop();
   b7246:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7248:	b093      	sub	sp, #76	; 0x4c
   b724a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b724c:	2400      	movs	r4, #0
    stop();
   b724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7250:	4606      	mov	r6, r0
   b7252:	4617      	mov	r7, r2
    stop();
   b7254:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7256:	4628      	mov	r0, r5
   b7258:	466b      	mov	r3, sp
   b725a:	4622      	mov	r2, r4
   b725c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b725e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7260:	f7fe fbd2 	bl	b5a08 <netdb_getaddrinfo>
   b7264:	4605      	mov	r5, r0
   b7266:	2800      	cmp	r0, #0
   b7268:	d163      	bne.n	b7332 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b726a:	9b00      	ldr	r3, [sp, #0]
   b726c:	2b00      	cmp	r3, #0
   b726e:	d04b      	beq.n	b7308 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7270:	695b      	ldr	r3, [r3, #20]
   b7272:	2b00      	cmp	r3, #0
   b7274:	d048      	beq.n	b7308 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7276:	a806      	add	r0, sp, #24
   b7278:	f7ff fd86 	bl	b6d88 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b727c:	9b00      	ldr	r3, [sp, #0]
   b727e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7280:	7863      	ldrb	r3, [r4, #1]
   b7282:	2b02      	cmp	r3, #2
   b7284:	d104      	bne.n	b7290 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7286:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7288:	a806      	add	r0, sp, #24
   b728a:	f7ff ffbb 	bl	b7204 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b728e:	e026      	b.n	b72de <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7290:	2b0a      	cmp	r3, #10
   b7292:	d124      	bne.n	b72de <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7294:	2211      	movs	r2, #17
   b7296:	4629      	mov	r1, r5
   b7298:	a801      	add	r0, sp, #4
   b729a:	f000 fce6 	bl	b7c6a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b729e:	68a3      	ldr	r3, [r4, #8]
   b72a0:	2b00      	cmp	r3, #0
   b72a2:	d038      	beq.n	b7316 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b72a4:	f104 0308 	add.w	r3, r4, #8
   b72a8:	f10d 0c04 	add.w	ip, sp, #4
   b72ac:	3418      	adds	r4, #24
   b72ae:	6818      	ldr	r0, [r3, #0]
   b72b0:	6859      	ldr	r1, [r3, #4]
   b72b2:	4662      	mov	r2, ip
   b72b4:	c203      	stmia	r2!, {r0, r1}
   b72b6:	3308      	adds	r3, #8
   b72b8:	42a3      	cmp	r3, r4
   b72ba:	4694      	mov	ip, r2
   b72bc:	d1f7      	bne.n	b72ae <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b72be:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b72c0:	a901      	add	r1, sp, #4
   b72c2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b72c4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b72c8:	f7ff fd6c 	bl	b6da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b72cc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b72d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b72d4:	ac07      	add	r4, sp, #28
   b72d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72d8:	f8dc 3000 	ldr.w	r3, [ip]
   b72dc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b72de:	a806      	add	r0, sp, #24
   b72e0:	f7ff fd72 	bl	b6dc8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b72e4:	b180      	cbz	r0, b7308 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b72e6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b72e8:	ad07      	add	r5, sp, #28
   b72ea:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b72ee:	4b12      	ldr	r3, [pc, #72]	; (b7338 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b72f0:	930c      	str	r3, [sp, #48]	; 0x30
   b72f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72f4:	ac0d      	add	r4, sp, #52	; 0x34
   b72f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72f8:	682b      	ldr	r3, [r5, #0]
   b72fa:	7023      	strb	r3, [r4, #0]
   b72fc:	463a      	mov	r2, r7
   b72fe:	4643      	mov	r3, r8
   b7300:	a90c      	add	r1, sp, #48	; 0x30
   b7302:	4630      	mov	r0, r6
   b7304:	47c8      	blx	r9
   b7306:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7308:	9800      	ldr	r0, [sp, #0]
   b730a:	f7fe fb75 	bl	b59f8 <netdb_freeaddrinfo>
}
   b730e:	4628      	mov	r0, r5
   b7310:	b013      	add	sp, #76	; 0x4c
   b7312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7316:	68e3      	ldr	r3, [r4, #12]
   b7318:	2b00      	cmp	r3, #0
   b731a:	d1c3      	bne.n	b72a4 <_ZN9TCPClient7connectEPKctm+0x64>
   b731c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7320:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7324:	f7fe fbe0 	bl	b5ae8 <inet_htonl>
   b7328:	4581      	cmp	r9, r0
   b732a:	d1bb      	bne.n	b72a4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b732c:	f104 0114 	add.w	r1, r4, #20
   b7330:	e7aa      	b.n	b7288 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7332:	4625      	mov	r5, r4
   b7334:	e7e8      	b.n	b7308 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7336:	bf00      	nop
   b7338:	000b9fe8 	.word	0x000b9fe8

000b733c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b733c:	b538      	push	{r3, r4, r5, lr}
   b733e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7340:	681a      	ldr	r2, [r3, #0]
   b7342:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7344:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7346:	da10      	bge.n	b736a <_ZN9TCPClient9connectedEv+0x2e>
   b7348:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b734c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7350:	429a      	cmp	r2, r3
   b7352:	d10a      	bne.n	b736a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7354:	6803      	ldr	r3, [r0, #0]
   b7356:	691b      	ldr	r3, [r3, #16]
   b7358:	4798      	blx	r3
        if (!rv) {
   b735a:	4604      	mov	r4, r0
   b735c:	b928      	cbnz	r0, b736a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b735e:	682b      	ldr	r3, [r5, #0]
   b7360:	4628      	mov	r0, r5
   b7362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7364:	4798      	blx	r3
        rv = available();
   b7366:	4620      	mov	r0, r4
}
   b7368:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b736a:	2001      	movs	r0, #1
   b736c:	e7fc      	b.n	b7368 <_ZN9TCPClient9connectedEv+0x2c>

000b736e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b736e:	b510      	push	{r4, lr}
   b7370:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7372:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7376:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b737a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b737c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b737e:	d005      	beq.n	b738c <_ZN9TCPClient4peekEv+0x1e>
   b7380:	6963      	ldr	r3, [r4, #20]
   b7382:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7386:	4413      	add	r3, r2
   b7388:	7918      	ldrb	r0, [r3, #4]
}
   b738a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b738c:	6803      	ldr	r3, [r0, #0]
   b738e:	691b      	ldr	r3, [r3, #16]
   b7390:	4798      	blx	r3
   b7392:	2800      	cmp	r0, #0
   b7394:	d1f4      	bne.n	b7380 <_ZN9TCPClient4peekEv+0x12>
   b7396:	f04f 30ff 	mov.w	r0, #4294967295
   b739a:	e7f6      	b.n	b738a <_ZN9TCPClient4peekEv+0x1c>

000b739c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b739e:	6943      	ldr	r3, [r0, #20]
   b73a0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b73a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b73a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b73aa:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b73ac:	4605      	mov	r5, r0
   b73ae:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b73b0:	d016      	beq.n	b73e0 <_ZN9TCPClient4readEPhj+0x44>
   b73b2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b73b4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b73b8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b73bc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b73be:	42bc      	cmp	r4, r7
   b73c0:	bf28      	it	cs
   b73c2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b73c4:	3304      	adds	r3, #4
   b73c6:	4622      	mov	r2, r4
   b73c8:	4419      	add	r1, r3
   b73ca:	4630      	mov	r0, r6
   b73cc:	f000 fc3f 	bl	b7c4e <memcpy>
   b73d0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b73d2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b73d6:	4423      	add	r3, r4
   b73d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b73dc:	4620      	mov	r0, r4
   b73de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b73e0:	6803      	ldr	r3, [r0, #0]
   b73e2:	691b      	ldr	r3, [r3, #16]
   b73e4:	4798      	blx	r3
   b73e6:	2800      	cmp	r0, #0
   b73e8:	d1e3      	bne.n	b73b2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b73ea:	f04f 34ff 	mov.w	r4, #4294967295
   b73ee:	e7f5      	b.n	b73dc <_ZN9TCPClient4readEPhj+0x40>

000b73f0 <_ZN9TCPClient12flush_bufferEv>:
   b73f0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b73f2:	2300      	movs	r3, #0
   b73f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b73f8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b73fa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b73fe:	4770      	bx	lr

000b7400 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7404:	461f      	mov	r7, r3
    stop();
   b7406:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7408:	460c      	mov	r4, r1
    stop();
   b740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b740c:	b08a      	sub	sp, #40	; 0x28
   b740e:	4605      	mov	r5, r0
   b7410:	4616      	mov	r6, r2
    stop();
   b7412:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7414:	7d23      	ldrb	r3, [r4, #20]
   b7416:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b741a:	2b04      	cmp	r3, #4
   b741c:	bf0c      	ite	eq
   b741e:	2002      	moveq	r0, #2
   b7420:	200a      	movne	r0, #10
   b7422:	2206      	movs	r2, #6
   b7424:	2101      	movs	r1, #1
   b7426:	f7fe fc0f 	bl	b5c48 <sock_socket>
   b742a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b742e:	696b      	ldr	r3, [r5, #20]
   b7430:	681b      	ldr	r3, [r3, #0]
   b7432:	2b00      	cmp	r3, #0
   b7434:	da08      	bge.n	b7448 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7436:	682b      	ldr	r3, [r5, #0]
   b7438:	4628      	mov	r0, r5
   b743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b743c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b743e:	4798      	blx	r3
}
   b7440:	4620      	mov	r0, r4
   b7442:	b00a      	add	sp, #40	; 0x28
   b7444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7448:	4628      	mov	r0, r5
   b744a:	f7ff ffd1 	bl	b73f0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b744e:	b1b7      	cbz	r7, b747e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7450:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7452:	a903      	add	r1, sp, #12
   b7454:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7456:	9303      	str	r3, [sp, #12]
   b7458:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b745c:	f7fe faf4 	bl	b5a48 <if_index_to_name>
   b7460:	2800      	cmp	r0, #0
   b7462:	d1e8      	bne.n	b7436 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7464:	6968      	ldr	r0, [r5, #20]
   b7466:	2306      	movs	r3, #6
   b7468:	9300      	str	r3, [sp, #0]
   b746a:	6800      	ldr	r0, [r0, #0]
   b746c:	ab03      	add	r3, sp, #12
   b746e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7472:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7476:	f7fe fbbf 	bl	b5bf8 <sock_setsockopt>
   b747a:	2800      	cmp	r0, #0
   b747c:	d1db      	bne.n	b7436 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b747e:	221c      	movs	r2, #28
   b7480:	2100      	movs	r1, #0
   b7482:	a803      	add	r0, sp, #12
   b7484:	f000 fbf1 	bl	b7c6a <memset>
    if (ip.version() == 4) {
   b7488:	7d23      	ldrb	r3, [r4, #20]
   b748a:	2b04      	cmp	r3, #4
   b748c:	d11d      	bne.n	b74ca <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b748e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7492:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7494:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7498:	f7fe fb2e 	bl	b5af8 <inet_htons>
   b749c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b74a0:	6860      	ldr	r0, [r4, #4]
   b74a2:	f7fe fb21 	bl	b5ae8 <inet_htonl>
   b74a6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b74a8:	696b      	ldr	r3, [r5, #20]
   b74aa:	221c      	movs	r2, #28
   b74ac:	6818      	ldr	r0, [r3, #0]
   b74ae:	a903      	add	r1, sp, #12
   b74b0:	f7fe fbb2 	bl	b5c18 <sock_connect>
   b74b4:	2800      	cmp	r0, #0
   b74b6:	d1be      	bne.n	b7436 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b74b8:	3404      	adds	r4, #4
   b74ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b74bc:	696d      	ldr	r5, [r5, #20]
   b74be:	358c      	adds	r5, #140	; 0x8c
   b74c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b74c2:	6823      	ldr	r3, [r4, #0]
   b74c4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b74c6:	2401      	movs	r4, #1
   b74c8:	e7ba      	b.n	b7440 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b74ca:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b74ce:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b74d0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b74d4:	f7fe fb10 	bl	b5af8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b74d8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b74da:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b74de:	1d23      	adds	r3, r4, #4
   b74e0:	f104 0714 	add.w	r7, r4, #20
   b74e4:	6818      	ldr	r0, [r3, #0]
   b74e6:	6859      	ldr	r1, [r3, #4]
   b74e8:	4632      	mov	r2, r6
   b74ea:	c203      	stmia	r2!, {r0, r1}
   b74ec:	3308      	adds	r3, #8
   b74ee:	42bb      	cmp	r3, r7
   b74f0:	4616      	mov	r6, r2
   b74f2:	d1f7      	bne.n	b74e4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b74f4:	e7d8      	b.n	b74a8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b74f8 <_ZN9TCPClient9availableEv>:
{
   b74f8:	b530      	push	{r4, r5, lr}
   b74fa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b74fc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7500:	b08b      	sub	sp, #44	; 0x2c
   b7502:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7504:	b12b      	cbz	r3, b7512 <_ZN9TCPClient9availableEv+0x1a>
   b7506:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b750a:	429a      	cmp	r2, r3
   b750c:	d101      	bne.n	b7512 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b750e:	f7ff ff6f 	bl	b73f0 <_ZN9TCPClient12flush_bufferEv>
   b7512:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7514:	6808      	ldr	r0, [r1, #0]
   b7516:	2800      	cmp	r0, #0
   b7518:	db18      	blt.n	b754c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b751a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b751e:	2d7f      	cmp	r5, #127	; 0x7f
   b7520:	d814      	bhi.n	b754c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7522:	3104      	adds	r1, #4
   b7524:	2308      	movs	r3, #8
   b7526:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b752a:	4429      	add	r1, r5
   b752c:	f7fe fb7c 	bl	b5c28 <sock_recv>
            if (ret > 0) {
   b7530:	2800      	cmp	r0, #0
   b7532:	dd13      	ble.n	b755c <_ZN9TCPClient9availableEv+0x64>
   b7534:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7536:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b753a:	b90a      	cbnz	r2, b7540 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b753c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7540:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7542:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7546:	4410      	add	r0, r2
   b7548:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b754c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b754e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7552:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7556:	1ac0      	subs	r0, r0, r3
   b7558:	b00b      	add	sp, #44	; 0x2c
   b755a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b755c:	f7fe fcd8 	bl	b5f10 <__errno>
   b7560:	6803      	ldr	r3, [r0, #0]
   b7562:	2b0b      	cmp	r3, #11
   b7564:	d0f2      	beq.n	b754c <_ZN9TCPClient9availableEv+0x54>
   b7566:	f7fe fcd3 	bl	b5f10 <__errno>
   b756a:	6803      	ldr	r3, [r0, #0]
   b756c:	2b0b      	cmp	r3, #11
   b756e:	d0ed      	beq.n	b754c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7570:	2320      	movs	r3, #32
   b7572:	2500      	movs	r5, #0
   b7574:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7578:	f7fe fcca 	bl	b5f10 <__errno>
   b757c:	6803      	ldr	r3, [r0, #0]
   b757e:	9301      	str	r3, [sp, #4]
   b7580:	4b08      	ldr	r3, [pc, #32]	; (b75a4 <_ZN9TCPClient9availableEv+0xac>)
   b7582:	4909      	ldr	r1, [pc, #36]	; (b75a8 <_ZN9TCPClient9availableEv+0xb0>)
   b7584:	9300      	str	r3, [sp, #0]
   b7586:	aa02      	add	r2, sp, #8
   b7588:	462b      	mov	r3, r5
   b758a:	2032      	movs	r0, #50	; 0x32
   b758c:	f7fe fba4 	bl	b5cd8 <log_message>
                    sock_close(d_->sock);
   b7590:	6963      	ldr	r3, [r4, #20]
   b7592:	6818      	ldr	r0, [r3, #0]
   b7594:	f7fe fb38 	bl	b5c08 <sock_close>
   b7598:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b759a:	f04f 32ff 	mov.w	r2, #4294967295
   b759e:	601a      	str	r2, [r3, #0]
   b75a0:	e7d4      	b.n	b754c <_ZN9TCPClient9availableEv+0x54>
   b75a2:	bf00      	nop
   b75a4:	000ba083 	.word	0x000ba083
   b75a8:	000ba07c 	.word	0x000ba07c

000b75ac <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b75ac:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b75ae:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b75b0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b75b2:	6818      	ldr	r0, [r3, #0]
   b75b4:	2800      	cmp	r0, #0
   b75b6:	db01      	blt.n	b75bc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b75b8:	f7fe fb26 	bl	b5c08 <sock_close>
   b75bc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b75be:	f04f 32ff 	mov.w	r2, #4294967295
   b75c2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b75c4:	6960      	ldr	r0, [r4, #20]
   b75c6:	2211      	movs	r2, #17
   b75c8:	2100      	movs	r1, #0
   b75ca:	308c      	adds	r0, #140	; 0x8c
   b75cc:	f000 fb4d 	bl	b7c6a <memset>
    flush_buffer();
   b75d0:	4620      	mov	r0, r4
}
   b75d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b75d6:	f7ff bf0b 	b.w	b73f0 <_ZN9TCPClient12flush_bufferEv>

000b75da <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b75da:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b75dc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b75de:	4604      	mov	r4, r0
          total(0) {
   b75e0:	6001      	str	r1, [r0, #0]
   b75e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b75e6:	3088      	adds	r0, #136	; 0x88
   b75e8:	f7ff fbce 	bl	b6d88 <_ZN9IPAddressC1Ev>
}
   b75ec:	4620      	mov	r0, r4
   b75ee:	bd10      	pop	{r4, pc}

000b75f0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b75f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b75f2:	2300      	movs	r3, #0
   b75f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b75f8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b75fc:	4a0e      	ldr	r2, [pc, #56]	; (b7638 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b75fe:	6103      	str	r3, [r0, #16]
   b7600:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7602:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7604:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7606:	20ac      	movs	r0, #172	; 0xac
   b7608:	9101      	str	r1, [sp, #4]
   b760a:	f7fd fa02 	bl	b4a12 <_Znwj>
	  auto __pi = ::new (__mem)
   b760e:	1e05      	subs	r5, r0, #0
   b7610:	f105 060c 	add.w	r6, r5, #12
   b7614:	d008      	beq.n	b7628 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7616:	2301      	movs	r3, #1
   b7618:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b761c:	4b07      	ldr	r3, [pc, #28]	; (b763c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b761e:	9901      	ldr	r1, [sp, #4]
   b7620:	602b      	str	r3, [r5, #0]
   b7622:	4630      	mov	r0, r6
   b7624:	f7ff ffd9 	bl	b75da <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7628:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b762a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b762e:	f7ff fedf 	bl	b73f0 <_ZN9TCPClient12flush_bufferEv>
}
   b7632:	b002      	add	sp, #8
   b7634:	bd70      	pop	{r4, r5, r6, pc}
   b7636:	bf00      	nop
   b7638:	000ba0b8 	.word	0x000ba0b8
   b763c:	000ba09c 	.word	0x000ba09c

000b7640 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7640:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7642:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7646:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7648:	f7ff ffd2 	bl	b75f0 <_ZN9TCPClientC1Ei>
}
   b764c:	4620      	mov	r0, r4
   b764e:	bd10      	pop	{r4, pc}

000b7650 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7650:	b510      	push	{r4, lr}
   b7652:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7654:	6800      	ldr	r0, [r0, #0]
   b7656:	2800      	cmp	r0, #0
   b7658:	db01      	blt.n	b765e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b765a:	f7fe fad5 	bl	b5c08 <sock_close>
    }
}
   b765e:	4620      	mov	r0, r4
   b7660:	bd10      	pop	{r4, pc}

000b7662 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7662:	300c      	adds	r0, #12
   b7664:	f7ff bff4 	b.w	b7650 <_ZN9TCPClient4DataD1Ev>

000b7668 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7668:	2200      	movs	r2, #0
   b766a:	6840      	ldr	r0, [r0, #4]
   b766c:	4611      	mov	r1, r2
   b766e:	f7fe bb97 	b.w	b5da0 <network_ready>

000b7672 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7672:	2200      	movs	r2, #0
   b7674:	6840      	ldr	r0, [r0, #4]
   b7676:	4611      	mov	r1, r2
   b7678:	f7fe bbb2 	b.w	b5de0 <network_listening>

000b767c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b767c:	2200      	movs	r2, #0
   b767e:	6840      	ldr	r0, [r0, #4]
   b7680:	4611      	mov	r1, r2
   b7682:	f7fe bbbd 	b.w	b5e00 <network_get_listen_timeout>

000b7686 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7686:	6840      	ldr	r0, [r0, #4]
   b7688:	2200      	movs	r2, #0
   b768a:	f7fe bbb1 	b.w	b5df0 <network_set_listen_timeout>

000b768e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b768e:	6840      	ldr	r0, [r0, #4]
   b7690:	2200      	movs	r2, #0
   b7692:	f081 0101 	eor.w	r1, r1, #1
   b7696:	f7fe bb9b 	b.w	b5dd0 <network_listen>

000b769a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b769a:	2300      	movs	r3, #0
   b769c:	6840      	ldr	r0, [r0, #4]
   b769e:	461a      	mov	r2, r3
   b76a0:	4619      	mov	r1, r3
   b76a2:	f7fe bb8d 	b.w	b5dc0 <network_off>

000b76a6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b76a6:	2300      	movs	r3, #0
   b76a8:	6840      	ldr	r0, [r0, #4]
   b76aa:	461a      	mov	r2, r3
   b76ac:	4619      	mov	r1, r3
   b76ae:	f7fe bb7f 	b.w	b5db0 <network_on>

000b76b2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b76b2:	2200      	movs	r2, #0
   b76b4:	6840      	ldr	r0, [r0, #4]
   b76b6:	4611      	mov	r1, r2
   b76b8:	f7fe bb62 	b.w	b5d80 <network_connecting>

000b76bc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b76bc:	6840      	ldr	r0, [r0, #4]
   b76be:	2200      	movs	r2, #0
   b76c0:	2102      	movs	r1, #2
   b76c2:	f7fe bb65 	b.w	b5d90 <network_disconnect>

000b76c6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b76c6:	2300      	movs	r3, #0
   b76c8:	6840      	ldr	r0, [r0, #4]
   b76ca:	461a      	mov	r2, r3
   b76cc:	f7fe bb50 	b.w	b5d70 <network_connect>

000b76d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b76d0:	4b02      	ldr	r3, [pc, #8]	; (b76dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b76d2:	2204      	movs	r2, #4
   b76d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b76d6:	4a02      	ldr	r2, [pc, #8]	; (b76e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b76d8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b76da:	4770      	bx	lr
   b76dc:	2003e710 	.word	0x2003e710
   b76e0:	000ba104 	.word	0x000ba104

000b76e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b76e4:	2300      	movs	r3, #0
   b76e6:	6840      	ldr	r0, [r0, #4]
   b76e8:	461a      	mov	r2, r3
   b76ea:	f7fe bb41 	b.w	b5d70 <network_connect>

000b76ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b76ee:	6840      	ldr	r0, [r0, #4]
   b76f0:	2200      	movs	r2, #0
   b76f2:	2102      	movs	r1, #2
   b76f4:	f7fe bb4c 	b.w	b5d90 <network_disconnect>

000b76f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b76f8:	2200      	movs	r2, #0
   b76fa:	6840      	ldr	r0, [r0, #4]
   b76fc:	4611      	mov	r1, r2
   b76fe:	f7fe bb3f 	b.w	b5d80 <network_connecting>

000b7702 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7702:	2200      	movs	r2, #0
   b7704:	6840      	ldr	r0, [r0, #4]
   b7706:	4611      	mov	r1, r2
   b7708:	f7fe bb4a 	b.w	b5da0 <network_ready>

000b770c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b770c:	2300      	movs	r3, #0
   b770e:	6840      	ldr	r0, [r0, #4]
   b7710:	461a      	mov	r2, r3
   b7712:	4619      	mov	r1, r3
   b7714:	f7fe bb4c 	b.w	b5db0 <network_on>

000b7718 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7718:	2300      	movs	r3, #0
   b771a:	6840      	ldr	r0, [r0, #4]
   b771c:	461a      	mov	r2, r3
   b771e:	4619      	mov	r1, r3
   b7720:	f7fe bb4e 	b.w	b5dc0 <network_off>

000b7724 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7724:	6840      	ldr	r0, [r0, #4]
   b7726:	2100      	movs	r1, #0
   b7728:	f7fe bb72 	b.w	b5e10 <network_is_on>

000b772c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b772c:	6840      	ldr	r0, [r0, #4]
   b772e:	2100      	movs	r1, #0
   b7730:	f7fe bb76 	b.w	b5e20 <network_is_off>

000b7734 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7734:	6840      	ldr	r0, [r0, #4]
   b7736:	2200      	movs	r2, #0
   b7738:	f081 0101 	eor.w	r1, r1, #1
   b773c:	f7fe bb48 	b.w	b5dd0 <network_listen>

000b7740 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7740:	6840      	ldr	r0, [r0, #4]
   b7742:	2200      	movs	r2, #0
   b7744:	f7fe bb54 	b.w	b5df0 <network_set_listen_timeout>

000b7748 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7748:	2200      	movs	r2, #0
   b774a:	6840      	ldr	r0, [r0, #4]
   b774c:	4611      	mov	r1, r2
   b774e:	f7fe bb57 	b.w	b5e00 <network_get_listen_timeout>

000b7752 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7752:	2200      	movs	r2, #0
   b7754:	6840      	ldr	r0, [r0, #4]
   b7756:	4611      	mov	r1, r2
   b7758:	f7fe bb42 	b.w	b5de0 <network_listening>

000b775c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b775c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7760:	b095      	sub	sp, #84	; 0x54
   b7762:	4614      	mov	r4, r2
   b7764:	460d      	mov	r5, r1
   b7766:	4607      	mov	r7, r0
    IPAddress addr;
   b7768:	f7ff fb0e 	bl	b6d88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b776c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b776e:	221c      	movs	r2, #28
   b7770:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7772:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7774:	f000 fa79 	bl	b7c6a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7778:	2340      	movs	r3, #64	; 0x40
   b777a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b777c:	4620      	mov	r0, r4
   b777e:	466b      	mov	r3, sp
   b7780:	aa0c      	add	r2, sp, #48	; 0x30
   b7782:	2100      	movs	r1, #0
   b7784:	f7fe f940 	bl	b5a08 <netdb_getaddrinfo>
    if (!r) {
   b7788:	4604      	mov	r4, r0
   b778a:	2800      	cmp	r0, #0
   b778c:	d14b      	bne.n	b7826 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b778e:	4602      	mov	r2, r0
   b7790:	2101      	movs	r1, #1
   b7792:	6868      	ldr	r0, [r5, #4]
   b7794:	f7fe fb04 	bl	b5da0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7798:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b779a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b779c:	4622      	mov	r2, r4
   b779e:	6868      	ldr	r0, [r5, #4]
   b77a0:	f7fe fafe 	bl	b5da0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b77a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b77a6:	4681      	mov	r9, r0
        bool ok = false;
   b77a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b77aa:	2e00      	cmp	r6, #0
   b77ac:	d03b      	beq.n	b7826 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b77ae:	2900      	cmp	r1, #0
   b77b0:	d139      	bne.n	b7826 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b77b2:	6873      	ldr	r3, [r6, #4]
   b77b4:	2b02      	cmp	r3, #2
   b77b6:	d003      	beq.n	b77c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b77b8:	2b0a      	cmp	r3, #10
   b77ba:	d011      	beq.n	b77e0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b77bc:	69f6      	ldr	r6, [r6, #28]
   b77be:	e7f4      	b.n	b77aa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b77c0:	f1b8 0f00 	cmp.w	r8, #0
   b77c4:	d0fa      	beq.n	b77bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b77c6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b77c8:	a806      	add	r0, sp, #24
   b77ca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b77cc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b77ce:	f7ff fb1f 	bl	b6e10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b77d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77d4:	1d3c      	adds	r4, r7, #4
   b77d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77d8:	682b      	ldr	r3, [r5, #0]
   b77da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b77dc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b77de:	e7ed      	b.n	b77bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b77e0:	f1b9 0f00 	cmp.w	r9, #0
   b77e4:	d0ea      	beq.n	b77bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b77e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b77e8:	2210      	movs	r2, #16
   b77ea:	a801      	add	r0, sp, #4
   b77ec:	f000 fa3d 	bl	b7c6a <memset>
                    a.v = 6;
   b77f0:	2306      	movs	r3, #6
   b77f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b77f6:	ad01      	add	r5, sp, #4
   b77f8:	f104 0308 	add.w	r3, r4, #8
   b77fc:	3418      	adds	r4, #24
   b77fe:	6818      	ldr	r0, [r3, #0]
   b7800:	6859      	ldr	r1, [r3, #4]
   b7802:	462a      	mov	r2, r5
   b7804:	c203      	stmia	r2!, {r0, r1}
   b7806:	3308      	adds	r3, #8
   b7808:	42a3      	cmp	r3, r4
   b780a:	4615      	mov	r5, r2
   b780c:	d1f7      	bne.n	b77fe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b780e:	a901      	add	r1, sp, #4
   b7810:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7812:	ad07      	add	r5, sp, #28
   b7814:	f7ff fac6 	bl	b6da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b781a:	1d3c      	adds	r4, r7, #4
   b781c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b781e:	682b      	ldr	r3, [r5, #0]
   b7820:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7822:	4649      	mov	r1, r9
   b7824:	e7ca      	b.n	b77bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7826:	9800      	ldr	r0, [sp, #0]
   b7828:	f7fe f8e6 	bl	b59f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b782c:	4638      	mov	r0, r7
   b782e:	b015      	add	sp, #84	; 0x54
   b7830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7834 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7834:	4b02      	ldr	r3, [pc, #8]	; (b7840 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7836:	4a03      	ldr	r2, [pc, #12]	; (b7844 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7838:	601a      	str	r2, [r3, #0]
   b783a:	2200      	movs	r2, #0
   b783c:	605a      	str	r2, [r3, #4]

} // spark
   b783e:	4770      	bx	lr
   b7840:	2003e718 	.word	0x2003e718
   b7844:	000ba140 	.word	0x000ba140

000b7848 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7848:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b784a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b784c:	d902      	bls.n	b7854 <pinAvailable+0xc>
    return false;
   b784e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7850:	b002      	add	sp, #8
   b7852:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7854:	f1a0 030b 	sub.w	r3, r0, #11
   b7858:	2b02      	cmp	r3, #2
   b785a:	d81a      	bhi.n	b7892 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b785c:	4c17      	ldr	r4, [pc, #92]	; (b78bc <pinAvailable+0x74>)
   b785e:	7821      	ldrb	r1, [r4, #0]
   b7860:	f3bf 8f5b 	dmb	ish
   b7864:	f011 0101 	ands.w	r1, r1, #1
   b7868:	d10b      	bne.n	b7882 <pinAvailable+0x3a>
   b786a:	4620      	mov	r0, r4
   b786c:	9101      	str	r1, [sp, #4]
   b786e:	f7fd f8d8 	bl	b4a22 <__cxa_guard_acquire>
   b7872:	9901      	ldr	r1, [sp, #4]
   b7874:	b128      	cbz	r0, b7882 <pinAvailable+0x3a>
   b7876:	4812      	ldr	r0, [pc, #72]	; (b78c0 <pinAvailable+0x78>)
   b7878:	f7fe fba8 	bl	b5fcc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b787c:	4620      	mov	r0, r4
   b787e:	f7fd f8d5 	bl	b4a2c <__cxa_guard_release>
   b7882:	4b0f      	ldr	r3, [pc, #60]	; (b78c0 <pinAvailable+0x78>)
   b7884:	7818      	ldrb	r0, [r3, #0]
   b7886:	f7fe f9ef 	bl	b5c68 <hal_spi_is_enabled>
   b788a:	2800      	cmp	r0, #0
   b788c:	d1df      	bne.n	b784e <pinAvailable+0x6>
  return true; // 'pin' is available
   b788e:	2001      	movs	r0, #1
   b7890:	e7de      	b.n	b7850 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7892:	2801      	cmp	r0, #1
   b7894:	d809      	bhi.n	b78aa <pinAvailable+0x62>
   b7896:	f000 f87d 	bl	b7994 <_Z19__fetch_global_Wirev>
   b789a:	2100      	movs	r1, #0
   b789c:	7c00      	ldrb	r0, [r0, #16]
   b789e:	f7fe f99b 	bl	b5bd8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b78a2:	f080 0001 	eor.w	r0, r0, #1
   b78a6:	b2c0      	uxtb	r0, r0
   b78a8:	e7d2      	b.n	b7850 <pinAvailable+0x8>
   b78aa:	3809      	subs	r0, #9
   b78ac:	2801      	cmp	r0, #1
   b78ae:	d8ee      	bhi.n	b788e <pinAvailable+0x46>
   b78b0:	f000 f834 	bl	b791c <_Z22__fetch_global_Serial1v>
   b78b4:	7c00      	ldrb	r0, [r0, #16]
   b78b6:	f7fe f94f 	bl	b5b58 <hal_usart_is_enabled>
   b78ba:	e7f2      	b.n	b78a2 <pinAvailable+0x5a>
   b78bc:	2003e720 	.word	0x2003e720
   b78c0:	2003e724 	.word	0x2003e724

000b78c4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b78c4:	2823      	cmp	r0, #35	; 0x23
{
   b78c6:	b538      	push	{r3, r4, r5, lr}
   b78c8:	4604      	mov	r4, r0
   b78ca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b78cc:	d80a      	bhi.n	b78e4 <pinMode+0x20>
   b78ce:	29ff      	cmp	r1, #255	; 0xff
   b78d0:	d008      	beq.n	b78e4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b78d2:	f7ff ffb9 	bl	b7848 <pinAvailable>
   b78d6:	b128      	cbz	r0, b78e4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b78d8:	4629      	mov	r1, r5
   b78da:	4620      	mov	r0, r4
}
   b78dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b78e0:	f7fe b89a 	b.w	b5a18 <hal_gpio_mode>
}
   b78e4:	bd38      	pop	{r3, r4, r5, pc}

000b78e6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78e6:	4770      	bx	lr

000b78e8 <_Z20acquireSerial1Bufferv>:
{
   b78e8:	b538      	push	{r3, r4, r5, lr}
   b78ea:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b78ec:	2514      	movs	r5, #20
   b78ee:	462a      	mov	r2, r5
   b78f0:	2100      	movs	r1, #0
   b78f2:	f000 f9ba 	bl	b7c6a <memset>
   b78f6:	8025      	strh	r5, [r4, #0]
   b78f8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78fa:	4907      	ldr	r1, [pc, #28]	; (b7918 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b78fc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78fe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7900:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7902:	f000 f86b 	bl	b79dc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7906:	4904      	ldr	r1, [pc, #16]	; (b7918 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7908:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b790a:	4628      	mov	r0, r5
   b790c:	f000 f866 	bl	b79dc <_ZnajRKSt9nothrow_t>
    };
   b7910:	60e0      	str	r0, [r4, #12]
}
   b7912:	4620      	mov	r0, r4
   b7914:	bd38      	pop	{r3, r4, r5, pc}
   b7916:	bf00      	nop
   b7918:	000ba174 	.word	0x000ba174

000b791c <_Z22__fetch_global_Serial1v>:
{
   b791c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b791e:	4d0e      	ldr	r5, [pc, #56]	; (b7958 <_Z22__fetch_global_Serial1v+0x3c>)
   b7920:	7829      	ldrb	r1, [r5, #0]
   b7922:	f3bf 8f5b 	dmb	ish
   b7926:	f011 0401 	ands.w	r4, r1, #1
{
   b792a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b792c:	d111      	bne.n	b7952 <_Z22__fetch_global_Serial1v+0x36>
   b792e:	4628      	mov	r0, r5
   b7930:	f7fd f877 	bl	b4a22 <__cxa_guard_acquire>
   b7934:	b168      	cbz	r0, b7952 <_Z22__fetch_global_Serial1v+0x36>
   b7936:	a801      	add	r0, sp, #4
   b7938:	f7ff ffd6 	bl	b78e8 <_Z20acquireSerial1Bufferv>
   b793c:	aa01      	add	r2, sp, #4
   b793e:	4621      	mov	r1, r4
   b7940:	4806      	ldr	r0, [pc, #24]	; (b795c <_Z22__fetch_global_Serial1v+0x40>)
   b7942:	f7ff fb5f 	bl	b7004 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7946:	4628      	mov	r0, r5
   b7948:	f7fd f870 	bl	b4a2c <__cxa_guard_release>
   b794c:	4804      	ldr	r0, [pc, #16]	; (b7960 <_Z22__fetch_global_Serial1v+0x44>)
   b794e:	f000 f95d 	bl	b7c0c <atexit>
    return serial1;
}
   b7952:	4802      	ldr	r0, [pc, #8]	; (b795c <_Z22__fetch_global_Serial1v+0x40>)
   b7954:	b007      	add	sp, #28
   b7956:	bd30      	pop	{r4, r5, pc}
   b7958:	2003e72c 	.word	0x2003e72c
   b795c:	2003e730 	.word	0x2003e730
   b7960:	000b78e7 	.word	0x000b78e7

000b7964 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7964:	4770      	bx	lr
	...

000b7968 <_Z17acquireWireBufferv>:
{
   b7968:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b796a:	2520      	movs	r5, #32
   b796c:	2314      	movs	r3, #20
{
   b796e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7970:	6003      	str	r3, [r0, #0]
   b7972:	6085      	str	r5, [r0, #8]
   b7974:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7976:	4906      	ldr	r1, [pc, #24]	; (b7990 <_Z17acquireWireBufferv+0x28>)
   b7978:	4628      	mov	r0, r5
   b797a:	f000 f82f 	bl	b79dc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b797e:	4904      	ldr	r1, [pc, #16]	; (b7990 <_Z17acquireWireBufferv+0x28>)
	};
   b7980:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7982:	4628      	mov	r0, r5
   b7984:	f000 f82a 	bl	b79dc <_ZnajRKSt9nothrow_t>
	};
   b7988:	60e0      	str	r0, [r4, #12]
}
   b798a:	4620      	mov	r0, r4
   b798c:	bd38      	pop	{r3, r4, r5, pc}
   b798e:	bf00      	nop
   b7990:	000ba174 	.word	0x000ba174

000b7994 <_Z19__fetch_global_Wirev>:
{
   b7994:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7996:	4d0e      	ldr	r5, [pc, #56]	; (b79d0 <_Z19__fetch_global_Wirev+0x3c>)
   b7998:	7829      	ldrb	r1, [r5, #0]
   b799a:	f3bf 8f5b 	dmb	ish
   b799e:	f011 0401 	ands.w	r4, r1, #1
{
   b79a2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79a4:	d111      	bne.n	b79ca <_Z19__fetch_global_Wirev+0x36>
   b79a6:	4628      	mov	r0, r5
   b79a8:	f7fd f83b 	bl	b4a22 <__cxa_guard_acquire>
   b79ac:	b168      	cbz	r0, b79ca <_Z19__fetch_global_Wirev+0x36>
   b79ae:	a801      	add	r0, sp, #4
   b79b0:	f7ff ffda 	bl	b7968 <_Z17acquireWireBufferv>
   b79b4:	aa01      	add	r2, sp, #4
   b79b6:	4621      	mov	r1, r4
   b79b8:	4806      	ldr	r0, [pc, #24]	; (b79d4 <_Z19__fetch_global_Wirev+0x40>)
   b79ba:	f7ff fb77 	bl	b70ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b79be:	4628      	mov	r0, r5
   b79c0:	f7fd f834 	bl	b4a2c <__cxa_guard_release>
   b79c4:	4804      	ldr	r0, [pc, #16]	; (b79d8 <_Z19__fetch_global_Wirev+0x44>)
   b79c6:	f000 f921 	bl	b7c0c <atexit>
	return wire;
}
   b79ca:	4802      	ldr	r0, [pc, #8]	; (b79d4 <_Z19__fetch_global_Wirev+0x40>)
   b79cc:	b007      	add	sp, #28
   b79ce:	bd30      	pop	{r4, r5, pc}
   b79d0:	2003e748 	.word	0x2003e748
   b79d4:	2003e74c 	.word	0x2003e74c
   b79d8:	000b7965 	.word	0x000b7965

000b79dc <_ZnajRKSt9nothrow_t>:
   b79dc:	f7fd b81b 	b.w	b4a16 <_Znaj>

000b79e0 <_ZSt25__throw_bad_function_callv>:
   b79e0:	b508      	push	{r3, lr}
   b79e2:	f7fe fa85 	bl	b5ef0 <abort>
	...

000b79e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b79e8:	4901      	ldr	r1, [pc, #4]	; (b79f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b79ea:	f000 b8f9 	b.w	b7be0 <_ZNKSt9type_infoeqERKS_>
   b79ee:	bf00      	nop
   b79f0:	000ba190 	.word	0x000ba190

000b79f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b79f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b79f6:	2400      	movs	r4, #0
   b79f8:	2310      	movs	r3, #16
   b79fa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b79fe:	6803      	ldr	r3, [r0, #0]
   b7a00:	4615      	mov	r5, r2
   b7a02:	699e      	ldr	r6, [r3, #24]
   b7a04:	6812      	ldr	r2, [r2, #0]
   b7a06:	466b      	mov	r3, sp
   b7a08:	e9cd 4400 	strd	r4, r4, [sp]
   b7a0c:	47b0      	blx	r6
   b7a0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7a12:	f003 0306 	and.w	r3, r3, #6
   b7a16:	2b06      	cmp	r3, #6
   b7a18:	bf03      	ittte	eq
   b7a1a:	9b00      	ldreq	r3, [sp, #0]
   b7a1c:	602b      	streq	r3, [r5, #0]
   b7a1e:	2001      	moveq	r0, #1
   b7a20:	4620      	movne	r0, r4
   b7a22:	b004      	add	sp, #16
   b7a24:	bd70      	pop	{r4, r5, r6, pc}

000b7a26 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7a26:	9800      	ldr	r0, [sp, #0]
   b7a28:	4290      	cmp	r0, r2
   b7a2a:	bf14      	ite	ne
   b7a2c:	2001      	movne	r0, #1
   b7a2e:	2006      	moveq	r0, #6
   b7a30:	4770      	bx	lr
	...

000b7a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7a34:	b510      	push	{r4, lr}
   b7a36:	4b03      	ldr	r3, [pc, #12]	; (b7a44 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7a38:	6003      	str	r3, [r0, #0]
   b7a3a:	4604      	mov	r4, r0
   b7a3c:	f000 f8cd 	bl	b7bda <_ZNSt9type_infoD1Ev>
   b7a40:	4620      	mov	r0, r4
   b7a42:	bd10      	pop	{r4, pc}
   b7a44:	000ba1d0 	.word	0x000ba1d0

000b7a48 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7a48:	b510      	push	{r4, lr}
   b7a4a:	4604      	mov	r4, r0
   b7a4c:	f7ff fff2 	bl	b7a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a50:	4620      	mov	r0, r4
   b7a52:	2108      	movs	r1, #8
   b7a54:	f7fc ffe3 	bl	b4a1e <_ZdlPvj>
   b7a58:	4620      	mov	r0, r4
   b7a5a:	bd10      	pop	{r4, pc}

000b7a5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a60:	461f      	mov	r7, r3
   b7a62:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7a66:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7a6a:	4598      	cmp	r8, r3
   b7a6c:	4606      	mov	r6, r0
   b7a6e:	4615      	mov	r5, r2
   b7a70:	d107      	bne.n	b7a82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7a72:	9907      	ldr	r1, [sp, #28]
   b7a74:	f000 f8b4 	bl	b7be0 <_ZNKSt9type_infoeqERKS_>
   b7a78:	b118      	cbz	r0, b7a82 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7a7a:	7165      	strb	r5, [r4, #5]
   b7a7c:	2000      	movs	r0, #0
   b7a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7a82:	4639      	mov	r1, r7
   b7a84:	4630      	mov	r0, r6
   b7a86:	f000 f8ab 	bl	b7be0 <_ZNKSt9type_infoeqERKS_>
   b7a8a:	2800      	cmp	r0, #0
   b7a8c:	d0f6      	beq.n	b7a7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7a8e:	2301      	movs	r3, #1
   b7a90:	f8c4 8000 	str.w	r8, [r4]
   b7a94:	7125      	strb	r5, [r4, #4]
   b7a96:	71a3      	strb	r3, [r4, #6]
   b7a98:	e7f0      	b.n	b7a7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7a9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7a9a:	b538      	push	{r3, r4, r5, lr}
   b7a9c:	4615      	mov	r5, r2
   b7a9e:	461c      	mov	r4, r3
   b7aa0:	f000 f89e 	bl	b7be0 <_ZNKSt9type_infoeqERKS_>
   b7aa4:	b120      	cbz	r0, b7ab0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7aa6:	2308      	movs	r3, #8
   b7aa8:	60e3      	str	r3, [r4, #12]
   b7aaa:	2306      	movs	r3, #6
   b7aac:	6025      	str	r5, [r4, #0]
   b7aae:	7123      	strb	r3, [r4, #4]
   b7ab0:	bd38      	pop	{r3, r4, r5, pc}

000b7ab2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7ab4:	4605      	mov	r5, r0
   b7ab6:	460c      	mov	r4, r1
   b7ab8:	9201      	str	r2, [sp, #4]
   b7aba:	461e      	mov	r6, r3
   b7abc:	f000 f890 	bl	b7be0 <_ZNKSt9type_infoeqERKS_>
   b7ac0:	b950      	cbnz	r0, b7ad8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7ac2:	2e03      	cmp	r6, #3
   b7ac4:	d808      	bhi.n	b7ad8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7ac6:	6823      	ldr	r3, [r4, #0]
   b7ac8:	9a01      	ldr	r2, [sp, #4]
   b7aca:	695b      	ldr	r3, [r3, #20]
   b7acc:	4629      	mov	r1, r5
   b7ace:	4620      	mov	r0, r4
   b7ad0:	b002      	add	sp, #8
   b7ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7ad6:	4718      	bx	r3
   b7ad8:	b002      	add	sp, #8
   b7ada:	bd70      	pop	{r4, r5, r6, pc}

000b7adc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7adc:	b510      	push	{r4, lr}
   b7ade:	4b03      	ldr	r3, [pc, #12]	; (b7aec <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7ae0:	6003      	str	r3, [r0, #0]
   b7ae2:	4604      	mov	r4, r0
   b7ae4:	f7ff ffa6 	bl	b7a34 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7ae8:	4620      	mov	r0, r4
   b7aea:	bd10      	pop	{r4, pc}
   b7aec:	000ba230 	.word	0x000ba230

000b7af0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7af0:	b510      	push	{r4, lr}
   b7af2:	4604      	mov	r4, r0
   b7af4:	f7ff fff2 	bl	b7adc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7af8:	4620      	mov	r0, r4
   b7afa:	210c      	movs	r1, #12
   b7afc:	f7fc ff8f 	bl	b4a1e <_ZdlPvj>
   b7b00:	4620      	mov	r0, r4
   b7b02:	bd10      	pop	{r4, pc}

000b7b04 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7b06:	9f08      	ldr	r7, [sp, #32]
   b7b08:	4297      	cmp	r7, r2
   b7b0a:	4605      	mov	r5, r0
   b7b0c:	460e      	mov	r6, r1
   b7b0e:	4614      	mov	r4, r2
   b7b10:	d00a      	beq.n	b7b28 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7b12:	68a8      	ldr	r0, [r5, #8]
   b7b14:	6802      	ldr	r2, [r0, #0]
   b7b16:	9708      	str	r7, [sp, #32]
   b7b18:	6a15      	ldr	r5, [r2, #32]
   b7b1a:	4631      	mov	r1, r6
   b7b1c:	4622      	mov	r2, r4
   b7b1e:	46ac      	mov	ip, r5
   b7b20:	b003      	add	sp, #12
   b7b22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7b26:	4760      	bx	ip
   b7b28:	4619      	mov	r1, r3
   b7b2a:	9301      	str	r3, [sp, #4]
   b7b2c:	f000 f858 	bl	b7be0 <_ZNKSt9type_infoeqERKS_>
   b7b30:	9b01      	ldr	r3, [sp, #4]
   b7b32:	2800      	cmp	r0, #0
   b7b34:	d0ed      	beq.n	b7b12 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7b36:	2006      	movs	r0, #6
   b7b38:	b003      	add	sp, #12
   b7b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7b3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7b3c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b40:	460d      	mov	r5, r1
   b7b42:	4619      	mov	r1, r3
   b7b44:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7b48:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7b4c:	4681      	mov	r9, r0
   b7b4e:	4617      	mov	r7, r2
   b7b50:	4698      	mov	r8, r3
   b7b52:	f000 f845 	bl	b7be0 <_ZNKSt9type_infoeqERKS_>
   b7b56:	b190      	cbz	r0, b7b7e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7b58:	2d00      	cmp	r5, #0
   b7b5a:	6034      	str	r4, [r6, #0]
   b7b5c:	7137      	strb	r7, [r6, #4]
   b7b5e:	db09      	blt.n	b7b74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7b60:	1961      	adds	r1, r4, r5
   b7b62:	458a      	cmp	sl, r1
   b7b64:	bf0c      	ite	eq
   b7b66:	2106      	moveq	r1, #6
   b7b68:	2101      	movne	r1, #1
   b7b6a:	71b1      	strb	r1, [r6, #6]
   b7b6c:	2000      	movs	r0, #0
   b7b6e:	b001      	add	sp, #4
   b7b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7b74:	3502      	adds	r5, #2
   b7b76:	d1f9      	bne.n	b7b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b78:	2301      	movs	r3, #1
   b7b7a:	71b3      	strb	r3, [r6, #6]
   b7b7c:	e7f6      	b.n	b7b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b7e:	4554      	cmp	r4, sl
   b7b80:	d106      	bne.n	b7b90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7b82:	4659      	mov	r1, fp
   b7b84:	4648      	mov	r0, r9
   b7b86:	f000 f82b 	bl	b7be0 <_ZNKSt9type_infoeqERKS_>
   b7b8a:	b108      	cbz	r0, b7b90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7b8c:	7177      	strb	r7, [r6, #5]
   b7b8e:	e7ed      	b.n	b7b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b90:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7b94:	6803      	ldr	r3, [r0, #0]
   b7b96:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7b9a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7b9e:	69dc      	ldr	r4, [r3, #28]
   b7ba0:	463a      	mov	r2, r7
   b7ba2:	4643      	mov	r3, r8
   b7ba4:	4629      	mov	r1, r5
   b7ba6:	46a4      	mov	ip, r4
   b7ba8:	b001      	add	sp, #4
   b7baa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7bae:	4760      	bx	ip

000b7bb0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bb4:	4607      	mov	r7, r0
   b7bb6:	460c      	mov	r4, r1
   b7bb8:	4615      	mov	r5, r2
   b7bba:	461e      	mov	r6, r3
   b7bbc:	f7ff ff6d 	bl	b7a9a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7bc0:	b948      	cbnz	r0, b7bd6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7bc2:	68b8      	ldr	r0, [r7, #8]
   b7bc4:	6803      	ldr	r3, [r0, #0]
   b7bc6:	699f      	ldr	r7, [r3, #24]
   b7bc8:	462a      	mov	r2, r5
   b7bca:	4633      	mov	r3, r6
   b7bcc:	4621      	mov	r1, r4
   b7bce:	46bc      	mov	ip, r7
   b7bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7bd4:	4760      	bx	ip
   b7bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7bda <_ZNSt9type_infoD1Ev>:
   b7bda:	4770      	bx	lr

000b7bdc <_ZNKSt9type_info14__is_pointer_pEv>:
   b7bdc:	2000      	movs	r0, #0
   b7bde:	4770      	bx	lr

000b7be0 <_ZNKSt9type_infoeqERKS_>:
   b7be0:	4281      	cmp	r1, r0
   b7be2:	b508      	push	{r3, lr}
   b7be4:	d00e      	beq.n	b7c04 <_ZNKSt9type_infoeqERKS_+0x24>
   b7be6:	6840      	ldr	r0, [r0, #4]
   b7be8:	7803      	ldrb	r3, [r0, #0]
   b7bea:	2b2a      	cmp	r3, #42	; 0x2a
   b7bec:	d00c      	beq.n	b7c08 <_ZNKSt9type_infoeqERKS_+0x28>
   b7bee:	6849      	ldr	r1, [r1, #4]
   b7bf0:	780b      	ldrb	r3, [r1, #0]
   b7bf2:	2b2a      	cmp	r3, #42	; 0x2a
   b7bf4:	bf08      	it	eq
   b7bf6:	3101      	addeq	r1, #1
   b7bf8:	f7fc fea6 	bl	b4948 <strcmp>
   b7bfc:	fab0 f080 	clz	r0, r0
   b7c00:	0940      	lsrs	r0, r0, #5
   b7c02:	bd08      	pop	{r3, pc}
   b7c04:	2001      	movs	r0, #1
   b7c06:	e7fc      	b.n	b7c02 <_ZNKSt9type_infoeqERKS_+0x22>
   b7c08:	2000      	movs	r0, #0
   b7c0a:	e7fa      	b.n	b7c02 <_ZNKSt9type_infoeqERKS_+0x22>

000b7c0c <atexit>:
   b7c0c:	2300      	movs	r3, #0
   b7c0e:	4601      	mov	r1, r0
   b7c10:	461a      	mov	r2, r3
   b7c12:	4618      	mov	r0, r3
   b7c14:	f000 bfc2 	b.w	b8b9c <__register_exitproc>

000b7c18 <atof>:
   b7c18:	2100      	movs	r1, #0
   b7c1a:	f000 becb 	b.w	b89b4 <strtod>

000b7c1e <atoi>:
   b7c1e:	220a      	movs	r2, #10
   b7c20:	2100      	movs	r1, #0
   b7c22:	f000 bfb1 	b.w	b8b88 <strtol>

000b7c26 <ldiv>:
   b7c26:	2900      	cmp	r1, #0
   b7c28:	b510      	push	{r4, lr}
   b7c2a:	fb91 f4f2 	sdiv	r4, r1, r2
   b7c2e:	fb02 1314 	mls	r3, r2, r4, r1
   b7c32:	db06      	blt.n	b7c42 <ldiv+0x1c>
   b7c34:	2b00      	cmp	r3, #0
   b7c36:	da01      	bge.n	b7c3c <ldiv+0x16>
   b7c38:	3401      	adds	r4, #1
   b7c3a:	1a9b      	subs	r3, r3, r2
   b7c3c:	e9c0 4300 	strd	r4, r3, [r0]
   b7c40:	bd10      	pop	{r4, pc}
   b7c42:	2b00      	cmp	r3, #0
   b7c44:	bfc4      	itt	gt
   b7c46:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b7c4a:	189b      	addgt	r3, r3, r2
   b7c4c:	e7f6      	b.n	b7c3c <ldiv+0x16>

000b7c4e <memcpy>:
   b7c4e:	440a      	add	r2, r1
   b7c50:	4291      	cmp	r1, r2
   b7c52:	f100 33ff 	add.w	r3, r0, #4294967295
   b7c56:	d100      	bne.n	b7c5a <memcpy+0xc>
   b7c58:	4770      	bx	lr
   b7c5a:	b510      	push	{r4, lr}
   b7c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7c60:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7c64:	4291      	cmp	r1, r2
   b7c66:	d1f9      	bne.n	b7c5c <memcpy+0xe>
   b7c68:	bd10      	pop	{r4, pc}

000b7c6a <memset>:
   b7c6a:	4402      	add	r2, r0
   b7c6c:	4603      	mov	r3, r0
   b7c6e:	4293      	cmp	r3, r2
   b7c70:	d100      	bne.n	b7c74 <memset+0xa>
   b7c72:	4770      	bx	lr
   b7c74:	f803 1b01 	strb.w	r1, [r3], #1
   b7c78:	e7f9      	b.n	b7c6e <memset+0x4>
	...

000b7c7c <srand>:
   b7c7c:	b538      	push	{r3, r4, r5, lr}
   b7c7e:	4b10      	ldr	r3, [pc, #64]	; (b7cc0 <srand+0x44>)
   b7c80:	681d      	ldr	r5, [r3, #0]
   b7c82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7c84:	4604      	mov	r4, r0
   b7c86:	b9b3      	cbnz	r3, b7cb6 <srand+0x3a>
   b7c88:	2018      	movs	r0, #24
   b7c8a:	f7fe f901 	bl	b5e90 <malloc>
   b7c8e:	4602      	mov	r2, r0
   b7c90:	63a8      	str	r0, [r5, #56]	; 0x38
   b7c92:	b920      	cbnz	r0, b7c9e <srand+0x22>
   b7c94:	4b0b      	ldr	r3, [pc, #44]	; (b7cc4 <srand+0x48>)
   b7c96:	480c      	ldr	r0, [pc, #48]	; (b7cc8 <srand+0x4c>)
   b7c98:	2142      	movs	r1, #66	; 0x42
   b7c9a:	f7fe f941 	bl	b5f20 <__assert_func>
   b7c9e:	490b      	ldr	r1, [pc, #44]	; (b7ccc <srand+0x50>)
   b7ca0:	4b0b      	ldr	r3, [pc, #44]	; (b7cd0 <srand+0x54>)
   b7ca2:	e9c0 1300 	strd	r1, r3, [r0]
   b7ca6:	4b0b      	ldr	r3, [pc, #44]	; (b7cd4 <srand+0x58>)
   b7ca8:	6083      	str	r3, [r0, #8]
   b7caa:	230b      	movs	r3, #11
   b7cac:	8183      	strh	r3, [r0, #12]
   b7cae:	2100      	movs	r1, #0
   b7cb0:	2001      	movs	r0, #1
   b7cb2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7cb6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7cb8:	2200      	movs	r2, #0
   b7cba:	611c      	str	r4, [r3, #16]
   b7cbc:	615a      	str	r2, [r3, #20]
   b7cbe:	bd38      	pop	{r3, r4, r5, pc}
   b7cc0:	2003cd1c 	.word	0x2003cd1c
   b7cc4:	000ba269 	.word	0x000ba269
   b7cc8:	000ba280 	.word	0x000ba280
   b7ccc:	abcd330e 	.word	0xabcd330e
   b7cd0:	e66d1234 	.word	0xe66d1234
   b7cd4:	0005deec 	.word	0x0005deec

000b7cd8 <strcat>:
   b7cd8:	b510      	push	{r4, lr}
   b7cda:	4602      	mov	r2, r0
   b7cdc:	7814      	ldrb	r4, [r2, #0]
   b7cde:	4613      	mov	r3, r2
   b7ce0:	3201      	adds	r2, #1
   b7ce2:	2c00      	cmp	r4, #0
   b7ce4:	d1fa      	bne.n	b7cdc <strcat+0x4>
   b7ce6:	3b01      	subs	r3, #1
   b7ce8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7cec:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7cf0:	2a00      	cmp	r2, #0
   b7cf2:	d1f9      	bne.n	b7ce8 <strcat+0x10>
   b7cf4:	bd10      	pop	{r4, pc}

000b7cf6 <strcpy>:
   b7cf6:	4603      	mov	r3, r0
   b7cf8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7cfc:	f803 2b01 	strb.w	r2, [r3], #1
   b7d00:	2a00      	cmp	r2, #0
   b7d02:	d1f9      	bne.n	b7cf8 <strcpy+0x2>
   b7d04:	4770      	bx	lr
	...

000b7d08 <strdup>:
   b7d08:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <strdup+0xc>)
   b7d0a:	4601      	mov	r1, r0
   b7d0c:	6818      	ldr	r0, [r3, #0]
   b7d0e:	f000 b803 	b.w	b7d18 <_strdup_r>
   b7d12:	bf00      	nop
   b7d14:	2003cd1c 	.word	0x2003cd1c

000b7d18 <_strdup_r>:
   b7d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7d1a:	4604      	mov	r4, r0
   b7d1c:	4608      	mov	r0, r1
   b7d1e:	460d      	mov	r5, r1
   b7d20:	f7fc fe1c 	bl	b495c <strlen>
   b7d24:	1c42      	adds	r2, r0, #1
   b7d26:	4611      	mov	r1, r2
   b7d28:	4620      	mov	r0, r4
   b7d2a:	9201      	str	r2, [sp, #4]
   b7d2c:	f7fe f8e8 	bl	b5f00 <_malloc_r>
   b7d30:	4604      	mov	r4, r0
   b7d32:	b118      	cbz	r0, b7d3c <_strdup_r+0x24>
   b7d34:	9a01      	ldr	r2, [sp, #4]
   b7d36:	4629      	mov	r1, r5
   b7d38:	f7ff ff89 	bl	b7c4e <memcpy>
   b7d3c:	4620      	mov	r0, r4
   b7d3e:	b003      	add	sp, #12
   b7d40:	bd30      	pop	{r4, r5, pc}

000b7d42 <strncmp>:
   b7d42:	b510      	push	{r4, lr}
   b7d44:	b17a      	cbz	r2, b7d66 <strncmp+0x24>
   b7d46:	4603      	mov	r3, r0
   b7d48:	3901      	subs	r1, #1
   b7d4a:	1884      	adds	r4, r0, r2
   b7d4c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7d50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7d54:	4290      	cmp	r0, r2
   b7d56:	d101      	bne.n	b7d5c <strncmp+0x1a>
   b7d58:	42a3      	cmp	r3, r4
   b7d5a:	d101      	bne.n	b7d60 <strncmp+0x1e>
   b7d5c:	1a80      	subs	r0, r0, r2
   b7d5e:	bd10      	pop	{r4, pc}
   b7d60:	2800      	cmp	r0, #0
   b7d62:	d1f3      	bne.n	b7d4c <strncmp+0xa>
   b7d64:	e7fa      	b.n	b7d5c <strncmp+0x1a>
   b7d66:	4610      	mov	r0, r2
   b7d68:	e7f9      	b.n	b7d5e <strncmp+0x1c>

000b7d6a <sulp>:
   b7d6a:	b570      	push	{r4, r5, r6, lr}
   b7d6c:	4604      	mov	r4, r0
   b7d6e:	460d      	mov	r5, r1
   b7d70:	ec45 4b10 	vmov	d0, r4, r5
   b7d74:	4616      	mov	r6, r2
   b7d76:	f001 fe6b 	bl	b9a50 <__ulp>
   b7d7a:	ec51 0b10 	vmov	r0, r1, d0
   b7d7e:	b17e      	cbz	r6, b7da0 <sulp+0x36>
   b7d80:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b7d84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7d88:	2b00      	cmp	r3, #0
   b7d8a:	dd09      	ble.n	b7da0 <sulp+0x36>
   b7d8c:	051b      	lsls	r3, r3, #20
   b7d8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b7d92:	2400      	movs	r4, #0
   b7d94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7d98:	4622      	mov	r2, r4
   b7d9a:	462b      	mov	r3, r5
   b7d9c:	f7fc fafc 	bl	b4398 <__aeabi_dmul>
   b7da0:	bd70      	pop	{r4, r5, r6, pc}
   b7da2:	0000      	movs	r0, r0
   b7da4:	0000      	movs	r0, r0
	...

000b7da8 <_strtod_l>:
   b7da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7dac:	ed2d 8b02 	vpush	{d8}
   b7db0:	b09d      	sub	sp, #116	; 0x74
   b7db2:	461f      	mov	r7, r3
   b7db4:	2300      	movs	r3, #0
   b7db6:	9318      	str	r3, [sp, #96]	; 0x60
   b7db8:	4ba2      	ldr	r3, [pc, #648]	; (b8044 <_strtod_l+0x29c>)
   b7dba:	9213      	str	r2, [sp, #76]	; 0x4c
   b7dbc:	681b      	ldr	r3, [r3, #0]
   b7dbe:	9305      	str	r3, [sp, #20]
   b7dc0:	4604      	mov	r4, r0
   b7dc2:	4618      	mov	r0, r3
   b7dc4:	4688      	mov	r8, r1
   b7dc6:	f7fc fdc9 	bl	b495c <strlen>
   b7dca:	f04f 0a00 	mov.w	sl, #0
   b7dce:	4605      	mov	r5, r0
   b7dd0:	f04f 0b00 	mov.w	fp, #0
   b7dd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7dda:	781a      	ldrb	r2, [r3, #0]
   b7ddc:	2a2b      	cmp	r2, #43	; 0x2b
   b7dde:	d04e      	beq.n	b7e7e <_strtod_l+0xd6>
   b7de0:	d83b      	bhi.n	b7e5a <_strtod_l+0xb2>
   b7de2:	2a0d      	cmp	r2, #13
   b7de4:	d834      	bhi.n	b7e50 <_strtod_l+0xa8>
   b7de6:	2a08      	cmp	r2, #8
   b7de8:	d834      	bhi.n	b7e54 <_strtod_l+0xac>
   b7dea:	2a00      	cmp	r2, #0
   b7dec:	d03e      	beq.n	b7e6c <_strtod_l+0xc4>
   b7dee:	2300      	movs	r3, #0
   b7df0:	930a      	str	r3, [sp, #40]	; 0x28
   b7df2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b7df4:	7833      	ldrb	r3, [r6, #0]
   b7df6:	2b30      	cmp	r3, #48	; 0x30
   b7df8:	f040 80b0 	bne.w	b7f5c <_strtod_l+0x1b4>
   b7dfc:	7873      	ldrb	r3, [r6, #1]
   b7dfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7e02:	2b58      	cmp	r3, #88	; 0x58
   b7e04:	d168      	bne.n	b7ed8 <_strtod_l+0x130>
   b7e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7e08:	9301      	str	r3, [sp, #4]
   b7e0a:	ab18      	add	r3, sp, #96	; 0x60
   b7e0c:	9702      	str	r7, [sp, #8]
   b7e0e:	9300      	str	r3, [sp, #0]
   b7e10:	4a8d      	ldr	r2, [pc, #564]	; (b8048 <_strtod_l+0x2a0>)
   b7e12:	ab19      	add	r3, sp, #100	; 0x64
   b7e14:	a917      	add	r1, sp, #92	; 0x5c
   b7e16:	4620      	mov	r0, r4
   b7e18:	f000 ff8a 	bl	b8d30 <__gethex>
   b7e1c:	f010 0707 	ands.w	r7, r0, #7
   b7e20:	4605      	mov	r5, r0
   b7e22:	d005      	beq.n	b7e30 <_strtod_l+0x88>
   b7e24:	2f06      	cmp	r7, #6
   b7e26:	d12c      	bne.n	b7e82 <_strtod_l+0xda>
   b7e28:	3601      	adds	r6, #1
   b7e2a:	2300      	movs	r3, #0
   b7e2c:	9617      	str	r6, [sp, #92]	; 0x5c
   b7e2e:	930a      	str	r3, [sp, #40]	; 0x28
   b7e30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7e32:	2b00      	cmp	r3, #0
   b7e34:	f040 8590 	bne.w	b8958 <_strtod_l+0xbb0>
   b7e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7e3a:	b1eb      	cbz	r3, b7e78 <_strtod_l+0xd0>
   b7e3c:	4652      	mov	r2, sl
   b7e3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b7e42:	ec43 2b10 	vmov	d0, r2, r3
   b7e46:	b01d      	add	sp, #116	; 0x74
   b7e48:	ecbd 8b02 	vpop	{d8}
   b7e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7e50:	2a20      	cmp	r2, #32
   b7e52:	d1cc      	bne.n	b7dee <_strtod_l+0x46>
   b7e54:	3301      	adds	r3, #1
   b7e56:	9317      	str	r3, [sp, #92]	; 0x5c
   b7e58:	e7be      	b.n	b7dd8 <_strtod_l+0x30>
   b7e5a:	2a2d      	cmp	r2, #45	; 0x2d
   b7e5c:	d1c7      	bne.n	b7dee <_strtod_l+0x46>
   b7e5e:	2201      	movs	r2, #1
   b7e60:	920a      	str	r2, [sp, #40]	; 0x28
   b7e62:	1c5a      	adds	r2, r3, #1
   b7e64:	9217      	str	r2, [sp, #92]	; 0x5c
   b7e66:	785b      	ldrb	r3, [r3, #1]
   b7e68:	2b00      	cmp	r3, #0
   b7e6a:	d1c2      	bne.n	b7df2 <_strtod_l+0x4a>
   b7e6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7e6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7e72:	2b00      	cmp	r3, #0
   b7e74:	f040 856e 	bne.w	b8954 <_strtod_l+0xbac>
   b7e78:	4652      	mov	r2, sl
   b7e7a:	465b      	mov	r3, fp
   b7e7c:	e7e1      	b.n	b7e42 <_strtod_l+0x9a>
   b7e7e:	2200      	movs	r2, #0
   b7e80:	e7ee      	b.n	b7e60 <_strtod_l+0xb8>
   b7e82:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7e84:	b13a      	cbz	r2, b7e96 <_strtod_l+0xee>
   b7e86:	2135      	movs	r1, #53	; 0x35
   b7e88:	a81a      	add	r0, sp, #104	; 0x68
   b7e8a:	f001 feec 	bl	b9c66 <__copybits>
   b7e8e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7e90:	4620      	mov	r0, r4
   b7e92:	f001 faab 	bl	b93ec <_Bfree>
   b7e96:	3f01      	subs	r7, #1
   b7e98:	2f04      	cmp	r7, #4
   b7e9a:	d806      	bhi.n	b7eaa <_strtod_l+0x102>
   b7e9c:	e8df f007 	tbb	[pc, r7]
   b7ea0:	1714030a 	.word	0x1714030a
   b7ea4:	0a          	.byte	0x0a
   b7ea5:	00          	.byte	0x00
   b7ea6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b7eaa:	0728      	lsls	r0, r5, #28
   b7eac:	d5c0      	bpl.n	b7e30 <_strtod_l+0x88>
   b7eae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b7eb2:	e7bd      	b.n	b7e30 <_strtod_l+0x88>
   b7eb4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7eb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b7eba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b7ebe:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b7ec2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b7ec6:	e7f0      	b.n	b7eaa <_strtod_l+0x102>
   b7ec8:	f8df b180 	ldr.w	fp, [pc, #384]	; b804c <_strtod_l+0x2a4>
   b7ecc:	e7ed      	b.n	b7eaa <_strtod_l+0x102>
   b7ece:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b7ed2:	f04f 3aff 	mov.w	sl, #4294967295
   b7ed6:	e7e8      	b.n	b7eaa <_strtod_l+0x102>
   b7ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7eda:	1c5a      	adds	r2, r3, #1
   b7edc:	9217      	str	r2, [sp, #92]	; 0x5c
   b7ede:	785b      	ldrb	r3, [r3, #1]
   b7ee0:	2b30      	cmp	r3, #48	; 0x30
   b7ee2:	d0f9      	beq.n	b7ed8 <_strtod_l+0x130>
   b7ee4:	2b00      	cmp	r3, #0
   b7ee6:	d0a3      	beq.n	b7e30 <_strtod_l+0x88>
   b7ee8:	2301      	movs	r3, #1
   b7eea:	f04f 0900 	mov.w	r9, #0
   b7eee:	9304      	str	r3, [sp, #16]
   b7ef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7ef2:	9308      	str	r3, [sp, #32]
   b7ef4:	f8cd 901c 	str.w	r9, [sp, #28]
   b7ef8:	464f      	mov	r7, r9
   b7efa:	220a      	movs	r2, #10
   b7efc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b7efe:	7806      	ldrb	r6, [r0, #0]
   b7f00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b7f04:	b2d9      	uxtb	r1, r3
   b7f06:	2909      	cmp	r1, #9
   b7f08:	d92a      	bls.n	b7f60 <_strtod_l+0x1b8>
   b7f0a:	9905      	ldr	r1, [sp, #20]
   b7f0c:	462a      	mov	r2, r5
   b7f0e:	f7ff ff18 	bl	b7d42 <strncmp>
   b7f12:	b398      	cbz	r0, b7f7c <_strtod_l+0x1d4>
   b7f14:	2000      	movs	r0, #0
   b7f16:	4632      	mov	r2, r6
   b7f18:	463d      	mov	r5, r7
   b7f1a:	9005      	str	r0, [sp, #20]
   b7f1c:	4603      	mov	r3, r0
   b7f1e:	2a65      	cmp	r2, #101	; 0x65
   b7f20:	d001      	beq.n	b7f26 <_strtod_l+0x17e>
   b7f22:	2a45      	cmp	r2, #69	; 0x45
   b7f24:	d118      	bne.n	b7f58 <_strtod_l+0x1b0>
   b7f26:	b91d      	cbnz	r5, b7f30 <_strtod_l+0x188>
   b7f28:	9a04      	ldr	r2, [sp, #16]
   b7f2a:	4302      	orrs	r2, r0
   b7f2c:	d09e      	beq.n	b7e6c <_strtod_l+0xc4>
   b7f2e:	2500      	movs	r5, #0
   b7f30:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b7f34:	f108 0201 	add.w	r2, r8, #1
   b7f38:	9217      	str	r2, [sp, #92]	; 0x5c
   b7f3a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b7f3e:	2a2b      	cmp	r2, #43	; 0x2b
   b7f40:	d075      	beq.n	b802e <_strtod_l+0x286>
   b7f42:	2a2d      	cmp	r2, #45	; 0x2d
   b7f44:	d07b      	beq.n	b803e <_strtod_l+0x296>
   b7f46:	f04f 0c00 	mov.w	ip, #0
   b7f4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b7f4e:	2909      	cmp	r1, #9
   b7f50:	f240 8082 	bls.w	b8058 <_strtod_l+0x2b0>
   b7f54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7f58:	2600      	movs	r6, #0
   b7f5a:	e09d      	b.n	b8098 <_strtod_l+0x2f0>
   b7f5c:	2300      	movs	r3, #0
   b7f5e:	e7c4      	b.n	b7eea <_strtod_l+0x142>
   b7f60:	2f08      	cmp	r7, #8
   b7f62:	bfd8      	it	le
   b7f64:	9907      	ldrle	r1, [sp, #28]
   b7f66:	f100 0001 	add.w	r0, r0, #1
   b7f6a:	bfda      	itte	le
   b7f6c:	fb02 3301 	mlale	r3, r2, r1, r3
   b7f70:	9307      	strle	r3, [sp, #28]
   b7f72:	fb02 3909 	mlagt	r9, r2, r9, r3
   b7f76:	3701      	adds	r7, #1
   b7f78:	9017      	str	r0, [sp, #92]	; 0x5c
   b7f7a:	e7bf      	b.n	b7efc <_strtod_l+0x154>
   b7f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7f7e:	195a      	adds	r2, r3, r5
   b7f80:	9217      	str	r2, [sp, #92]	; 0x5c
   b7f82:	5d5a      	ldrb	r2, [r3, r5]
   b7f84:	2f00      	cmp	r7, #0
   b7f86:	d037      	beq.n	b7ff8 <_strtod_l+0x250>
   b7f88:	9005      	str	r0, [sp, #20]
   b7f8a:	463d      	mov	r5, r7
   b7f8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7f90:	2b09      	cmp	r3, #9
   b7f92:	d912      	bls.n	b7fba <_strtod_l+0x212>
   b7f94:	2301      	movs	r3, #1
   b7f96:	e7c2      	b.n	b7f1e <_strtod_l+0x176>
   b7f98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7f9a:	1c5a      	adds	r2, r3, #1
   b7f9c:	9217      	str	r2, [sp, #92]	; 0x5c
   b7f9e:	785a      	ldrb	r2, [r3, #1]
   b7fa0:	3001      	adds	r0, #1
   b7fa2:	2a30      	cmp	r2, #48	; 0x30
   b7fa4:	d0f8      	beq.n	b7f98 <_strtod_l+0x1f0>
   b7fa6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b7faa:	2b08      	cmp	r3, #8
   b7fac:	f200 84d9 	bhi.w	b8962 <_strtod_l+0xbba>
   b7fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7fb2:	9005      	str	r0, [sp, #20]
   b7fb4:	2000      	movs	r0, #0
   b7fb6:	9308      	str	r3, [sp, #32]
   b7fb8:	4605      	mov	r5, r0
   b7fba:	3a30      	subs	r2, #48	; 0x30
   b7fbc:	f100 0301 	add.w	r3, r0, #1
   b7fc0:	d014      	beq.n	b7fec <_strtod_l+0x244>
   b7fc2:	9905      	ldr	r1, [sp, #20]
   b7fc4:	4419      	add	r1, r3
   b7fc6:	9105      	str	r1, [sp, #20]
   b7fc8:	462b      	mov	r3, r5
   b7fca:	eb00 0e05 	add.w	lr, r0, r5
   b7fce:	210a      	movs	r1, #10
   b7fd0:	4573      	cmp	r3, lr
   b7fd2:	d113      	bne.n	b7ffc <_strtod_l+0x254>
   b7fd4:	182b      	adds	r3, r5, r0
   b7fd6:	2b08      	cmp	r3, #8
   b7fd8:	f105 0501 	add.w	r5, r5, #1
   b7fdc:	4405      	add	r5, r0
   b7fde:	dc1c      	bgt.n	b801a <_strtod_l+0x272>
   b7fe0:	9907      	ldr	r1, [sp, #28]
   b7fe2:	230a      	movs	r3, #10
   b7fe4:	fb03 2301 	mla	r3, r3, r1, r2
   b7fe8:	9307      	str	r3, [sp, #28]
   b7fea:	2300      	movs	r3, #0
   b7fec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7fee:	1c51      	adds	r1, r2, #1
   b7ff0:	9117      	str	r1, [sp, #92]	; 0x5c
   b7ff2:	7852      	ldrb	r2, [r2, #1]
   b7ff4:	4618      	mov	r0, r3
   b7ff6:	e7c9      	b.n	b7f8c <_strtod_l+0x1e4>
   b7ff8:	4638      	mov	r0, r7
   b7ffa:	e7d2      	b.n	b7fa2 <_strtod_l+0x1fa>
   b7ffc:	2b08      	cmp	r3, #8
   b7ffe:	dc04      	bgt.n	b800a <_strtod_l+0x262>
   b8000:	9e07      	ldr	r6, [sp, #28]
   b8002:	434e      	muls	r6, r1
   b8004:	9607      	str	r6, [sp, #28]
   b8006:	3301      	adds	r3, #1
   b8008:	e7e2      	b.n	b7fd0 <_strtod_l+0x228>
   b800a:	f103 0c01 	add.w	ip, r3, #1
   b800e:	f1bc 0f10 	cmp.w	ip, #16
   b8012:	bfd8      	it	le
   b8014:	fb01 f909 	mulle.w	r9, r1, r9
   b8018:	e7f5      	b.n	b8006 <_strtod_l+0x25e>
   b801a:	2d10      	cmp	r5, #16
   b801c:	bfdc      	itt	le
   b801e:	230a      	movle	r3, #10
   b8020:	fb03 2909 	mlale	r9, r3, r9, r2
   b8024:	e7e1      	b.n	b7fea <_strtod_l+0x242>
   b8026:	2300      	movs	r3, #0
   b8028:	9305      	str	r3, [sp, #20]
   b802a:	2301      	movs	r3, #1
   b802c:	e77c      	b.n	b7f28 <_strtod_l+0x180>
   b802e:	f04f 0c00 	mov.w	ip, #0
   b8032:	f108 0202 	add.w	r2, r8, #2
   b8036:	9217      	str	r2, [sp, #92]	; 0x5c
   b8038:	f898 2002 	ldrb.w	r2, [r8, #2]
   b803c:	e785      	b.n	b7f4a <_strtod_l+0x1a2>
   b803e:	f04f 0c01 	mov.w	ip, #1
   b8042:	e7f6      	b.n	b8032 <_strtod_l+0x28a>
   b8044:	000ba578 	.word	0x000ba578
   b8048:	000ba30c 	.word	0x000ba30c
   b804c:	7ff00000 	.word	0x7ff00000
   b8050:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8052:	1c51      	adds	r1, r2, #1
   b8054:	9117      	str	r1, [sp, #92]	; 0x5c
   b8056:	7852      	ldrb	r2, [r2, #1]
   b8058:	2a30      	cmp	r2, #48	; 0x30
   b805a:	d0f9      	beq.n	b8050 <_strtod_l+0x2a8>
   b805c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8060:	2908      	cmp	r1, #8
   b8062:	f63f af79 	bhi.w	b7f58 <_strtod_l+0x1b0>
   b8066:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b806a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b806c:	9206      	str	r2, [sp, #24]
   b806e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8070:	1c51      	adds	r1, r2, #1
   b8072:	9117      	str	r1, [sp, #92]	; 0x5c
   b8074:	7852      	ldrb	r2, [r2, #1]
   b8076:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b807a:	2e09      	cmp	r6, #9
   b807c:	d937      	bls.n	b80ee <_strtod_l+0x346>
   b807e:	9e06      	ldr	r6, [sp, #24]
   b8080:	1b89      	subs	r1, r1, r6
   b8082:	2908      	cmp	r1, #8
   b8084:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8088:	dc02      	bgt.n	b8090 <_strtod_l+0x2e8>
   b808a:	4576      	cmp	r6, lr
   b808c:	bfa8      	it	ge
   b808e:	4676      	movge	r6, lr
   b8090:	f1bc 0f00 	cmp.w	ip, #0
   b8094:	d000      	beq.n	b8098 <_strtod_l+0x2f0>
   b8096:	4276      	negs	r6, r6
   b8098:	2d00      	cmp	r5, #0
   b809a:	d14d      	bne.n	b8138 <_strtod_l+0x390>
   b809c:	9904      	ldr	r1, [sp, #16]
   b809e:	4301      	orrs	r1, r0
   b80a0:	f47f aec6 	bne.w	b7e30 <_strtod_l+0x88>
   b80a4:	2b00      	cmp	r3, #0
   b80a6:	f47f aee1 	bne.w	b7e6c <_strtod_l+0xc4>
   b80aa:	2a69      	cmp	r2, #105	; 0x69
   b80ac:	d027      	beq.n	b80fe <_strtod_l+0x356>
   b80ae:	dc24      	bgt.n	b80fa <_strtod_l+0x352>
   b80b0:	2a49      	cmp	r2, #73	; 0x49
   b80b2:	d024      	beq.n	b80fe <_strtod_l+0x356>
   b80b4:	2a4e      	cmp	r2, #78	; 0x4e
   b80b6:	f47f aed9 	bne.w	b7e6c <_strtod_l+0xc4>
   b80ba:	499f      	ldr	r1, [pc, #636]	; (b8338 <_strtod_l+0x590>)
   b80bc:	a817      	add	r0, sp, #92	; 0x5c
   b80be:	f001 f88f 	bl	b91e0 <__match>
   b80c2:	2800      	cmp	r0, #0
   b80c4:	f43f aed2 	beq.w	b7e6c <_strtod_l+0xc4>
   b80c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b80ca:	781b      	ldrb	r3, [r3, #0]
   b80cc:	2b28      	cmp	r3, #40	; 0x28
   b80ce:	d12d      	bne.n	b812c <_strtod_l+0x384>
   b80d0:	499a      	ldr	r1, [pc, #616]	; (b833c <_strtod_l+0x594>)
   b80d2:	aa1a      	add	r2, sp, #104	; 0x68
   b80d4:	a817      	add	r0, sp, #92	; 0x5c
   b80d6:	f001 f897 	bl	b9208 <__hexnan>
   b80da:	2805      	cmp	r0, #5
   b80dc:	d126      	bne.n	b812c <_strtod_l+0x384>
   b80de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b80e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b80e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b80e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b80ec:	e6a0      	b.n	b7e30 <_strtod_l+0x88>
   b80ee:	210a      	movs	r1, #10
   b80f0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b80f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b80f8:	e7b9      	b.n	b806e <_strtod_l+0x2c6>
   b80fa:	2a6e      	cmp	r2, #110	; 0x6e
   b80fc:	e7db      	b.n	b80b6 <_strtod_l+0x30e>
   b80fe:	4990      	ldr	r1, [pc, #576]	; (b8340 <_strtod_l+0x598>)
   b8100:	a817      	add	r0, sp, #92	; 0x5c
   b8102:	f001 f86d 	bl	b91e0 <__match>
   b8106:	2800      	cmp	r0, #0
   b8108:	f43f aeb0 	beq.w	b7e6c <_strtod_l+0xc4>
   b810c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b810e:	498d      	ldr	r1, [pc, #564]	; (b8344 <_strtod_l+0x59c>)
   b8110:	3b01      	subs	r3, #1
   b8112:	a817      	add	r0, sp, #92	; 0x5c
   b8114:	9317      	str	r3, [sp, #92]	; 0x5c
   b8116:	f001 f863 	bl	b91e0 <__match>
   b811a:	b910      	cbnz	r0, b8122 <_strtod_l+0x37a>
   b811c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b811e:	3301      	adds	r3, #1
   b8120:	9317      	str	r3, [sp, #92]	; 0x5c
   b8122:	f8df b230 	ldr.w	fp, [pc, #560]	; b8354 <_strtod_l+0x5ac>
   b8126:	f04f 0a00 	mov.w	sl, #0
   b812a:	e681      	b.n	b7e30 <_strtod_l+0x88>
   b812c:	4886      	ldr	r0, [pc, #536]	; (b8348 <_strtod_l+0x5a0>)
   b812e:	f001 fdef 	bl	b9d10 <nan>
   b8132:	ec5b ab10 	vmov	sl, fp, d0
   b8136:	e67b      	b.n	b7e30 <_strtod_l+0x88>
   b8138:	9b05      	ldr	r3, [sp, #20]
   b813a:	9807      	ldr	r0, [sp, #28]
   b813c:	1af3      	subs	r3, r6, r3
   b813e:	2f00      	cmp	r7, #0
   b8140:	bf08      	it	eq
   b8142:	462f      	moveq	r7, r5
   b8144:	2d10      	cmp	r5, #16
   b8146:	9306      	str	r3, [sp, #24]
   b8148:	46a8      	mov	r8, r5
   b814a:	bfa8      	it	ge
   b814c:	f04f 0810 	movge.w	r8, #16
   b8150:	f7fc f8a8 	bl	b42a4 <__aeabi_ui2d>
   b8154:	2d09      	cmp	r5, #9
   b8156:	4682      	mov	sl, r0
   b8158:	468b      	mov	fp, r1
   b815a:	dd13      	ble.n	b8184 <_strtod_l+0x3dc>
   b815c:	4b7b      	ldr	r3, [pc, #492]	; (b834c <_strtod_l+0x5a4>)
   b815e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b8162:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b8166:	f7fc f917 	bl	b4398 <__aeabi_dmul>
   b816a:	4682      	mov	sl, r0
   b816c:	4648      	mov	r0, r9
   b816e:	468b      	mov	fp, r1
   b8170:	f7fc f898 	bl	b42a4 <__aeabi_ui2d>
   b8174:	4602      	mov	r2, r0
   b8176:	460b      	mov	r3, r1
   b8178:	4650      	mov	r0, sl
   b817a:	4659      	mov	r1, fp
   b817c:	f7fb ff56 	bl	b402c <__adddf3>
   b8180:	4682      	mov	sl, r0
   b8182:	468b      	mov	fp, r1
   b8184:	2d0f      	cmp	r5, #15
   b8186:	dc38      	bgt.n	b81fa <_strtod_l+0x452>
   b8188:	9b06      	ldr	r3, [sp, #24]
   b818a:	2b00      	cmp	r3, #0
   b818c:	f43f ae50 	beq.w	b7e30 <_strtod_l+0x88>
   b8190:	dd24      	ble.n	b81dc <_strtod_l+0x434>
   b8192:	2b16      	cmp	r3, #22
   b8194:	dc0b      	bgt.n	b81ae <_strtod_l+0x406>
   b8196:	496d      	ldr	r1, [pc, #436]	; (b834c <_strtod_l+0x5a4>)
   b8198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b819c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b81a0:	4652      	mov	r2, sl
   b81a2:	465b      	mov	r3, fp
   b81a4:	f7fc f8f8 	bl	b4398 <__aeabi_dmul>
   b81a8:	4682      	mov	sl, r0
   b81aa:	468b      	mov	fp, r1
   b81ac:	e640      	b.n	b7e30 <_strtod_l+0x88>
   b81ae:	9a06      	ldr	r2, [sp, #24]
   b81b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b81b4:	4293      	cmp	r3, r2
   b81b6:	db20      	blt.n	b81fa <_strtod_l+0x452>
   b81b8:	4c64      	ldr	r4, [pc, #400]	; (b834c <_strtod_l+0x5a4>)
   b81ba:	f1c5 050f 	rsb	r5, r5, #15
   b81be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b81c2:	4652      	mov	r2, sl
   b81c4:	465b      	mov	r3, fp
   b81c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b81ca:	f7fc f8e5 	bl	b4398 <__aeabi_dmul>
   b81ce:	9b06      	ldr	r3, [sp, #24]
   b81d0:	1b5d      	subs	r5, r3, r5
   b81d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b81d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b81da:	e7e3      	b.n	b81a4 <_strtod_l+0x3fc>
   b81dc:	9b06      	ldr	r3, [sp, #24]
   b81de:	3316      	adds	r3, #22
   b81e0:	db0b      	blt.n	b81fa <_strtod_l+0x452>
   b81e2:	9b05      	ldr	r3, [sp, #20]
   b81e4:	1b9e      	subs	r6, r3, r6
   b81e6:	4b59      	ldr	r3, [pc, #356]	; (b834c <_strtod_l+0x5a4>)
   b81e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b81ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   b81f0:	4650      	mov	r0, sl
   b81f2:	4659      	mov	r1, fp
   b81f4:	f7fc f9fa 	bl	b45ec <__aeabi_ddiv>
   b81f8:	e7d6      	b.n	b81a8 <_strtod_l+0x400>
   b81fa:	9b06      	ldr	r3, [sp, #24]
   b81fc:	eba5 0808 	sub.w	r8, r5, r8
   b8200:	4498      	add	r8, r3
   b8202:	f1b8 0f00 	cmp.w	r8, #0
   b8206:	dd74      	ble.n	b82f2 <_strtod_l+0x54a>
   b8208:	f018 030f 	ands.w	r3, r8, #15
   b820c:	d00a      	beq.n	b8224 <_strtod_l+0x47c>
   b820e:	494f      	ldr	r1, [pc, #316]	; (b834c <_strtod_l+0x5a4>)
   b8210:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8214:	4652      	mov	r2, sl
   b8216:	465b      	mov	r3, fp
   b8218:	e9d1 0100 	ldrd	r0, r1, [r1]
   b821c:	f7fc f8bc 	bl	b4398 <__aeabi_dmul>
   b8220:	4682      	mov	sl, r0
   b8222:	468b      	mov	fp, r1
   b8224:	f038 080f 	bics.w	r8, r8, #15
   b8228:	d04f      	beq.n	b82ca <_strtod_l+0x522>
   b822a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b822e:	dd22      	ble.n	b8276 <_strtod_l+0x4ce>
   b8230:	2500      	movs	r5, #0
   b8232:	462e      	mov	r6, r5
   b8234:	9507      	str	r5, [sp, #28]
   b8236:	9505      	str	r5, [sp, #20]
   b8238:	2322      	movs	r3, #34	; 0x22
   b823a:	f8df b118 	ldr.w	fp, [pc, #280]	; b8354 <_strtod_l+0x5ac>
   b823e:	6023      	str	r3, [r4, #0]
   b8240:	f04f 0a00 	mov.w	sl, #0
   b8244:	9b07      	ldr	r3, [sp, #28]
   b8246:	2b00      	cmp	r3, #0
   b8248:	f43f adf2 	beq.w	b7e30 <_strtod_l+0x88>
   b824c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b824e:	4620      	mov	r0, r4
   b8250:	f001 f8cc 	bl	b93ec <_Bfree>
   b8254:	9905      	ldr	r1, [sp, #20]
   b8256:	4620      	mov	r0, r4
   b8258:	f001 f8c8 	bl	b93ec <_Bfree>
   b825c:	4631      	mov	r1, r6
   b825e:	4620      	mov	r0, r4
   b8260:	f001 f8c4 	bl	b93ec <_Bfree>
   b8264:	9907      	ldr	r1, [sp, #28]
   b8266:	4620      	mov	r0, r4
   b8268:	f001 f8c0 	bl	b93ec <_Bfree>
   b826c:	4629      	mov	r1, r5
   b826e:	4620      	mov	r0, r4
   b8270:	f001 f8bc 	bl	b93ec <_Bfree>
   b8274:	e5dc      	b.n	b7e30 <_strtod_l+0x88>
   b8276:	4b36      	ldr	r3, [pc, #216]	; (b8350 <_strtod_l+0x5a8>)
   b8278:	9304      	str	r3, [sp, #16]
   b827a:	2300      	movs	r3, #0
   b827c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8280:	4650      	mov	r0, sl
   b8282:	4659      	mov	r1, fp
   b8284:	4699      	mov	r9, r3
   b8286:	f1b8 0f01 	cmp.w	r8, #1
   b828a:	dc21      	bgt.n	b82d0 <_strtod_l+0x528>
   b828c:	b10b      	cbz	r3, b8292 <_strtod_l+0x4ea>
   b828e:	4682      	mov	sl, r0
   b8290:	468b      	mov	fp, r1
   b8292:	4b2f      	ldr	r3, [pc, #188]	; (b8350 <_strtod_l+0x5a8>)
   b8294:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8298:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b829c:	4652      	mov	r2, sl
   b829e:	465b      	mov	r3, fp
   b82a0:	e9d9 0100 	ldrd	r0, r1, [r9]
   b82a4:	f7fc f878 	bl	b4398 <__aeabi_dmul>
   b82a8:	4b2a      	ldr	r3, [pc, #168]	; (b8354 <_strtod_l+0x5ac>)
   b82aa:	460a      	mov	r2, r1
   b82ac:	400b      	ands	r3, r1
   b82ae:	492a      	ldr	r1, [pc, #168]	; (b8358 <_strtod_l+0x5b0>)
   b82b0:	428b      	cmp	r3, r1
   b82b2:	4682      	mov	sl, r0
   b82b4:	d8bc      	bhi.n	b8230 <_strtod_l+0x488>
   b82b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b82ba:	428b      	cmp	r3, r1
   b82bc:	bf86      	itte	hi
   b82be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b835c <_strtod_l+0x5b4>
   b82c2:	f04f 3aff 	movhi.w	sl, #4294967295
   b82c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b82ca:	2300      	movs	r3, #0
   b82cc:	9304      	str	r3, [sp, #16]
   b82ce:	e084      	b.n	b83da <_strtod_l+0x632>
   b82d0:	f018 0f01 	tst.w	r8, #1
   b82d4:	d005      	beq.n	b82e2 <_strtod_l+0x53a>
   b82d6:	9b04      	ldr	r3, [sp, #16]
   b82d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b82dc:	f7fc f85c 	bl	b4398 <__aeabi_dmul>
   b82e0:	2301      	movs	r3, #1
   b82e2:	9a04      	ldr	r2, [sp, #16]
   b82e4:	3208      	adds	r2, #8
   b82e6:	f109 0901 	add.w	r9, r9, #1
   b82ea:	ea4f 0868 	mov.w	r8, r8, asr #1
   b82ee:	9204      	str	r2, [sp, #16]
   b82f0:	e7c9      	b.n	b8286 <_strtod_l+0x4de>
   b82f2:	d0ea      	beq.n	b82ca <_strtod_l+0x522>
   b82f4:	f1c8 0800 	rsb	r8, r8, #0
   b82f8:	f018 020f 	ands.w	r2, r8, #15
   b82fc:	d00a      	beq.n	b8314 <_strtod_l+0x56c>
   b82fe:	4b13      	ldr	r3, [pc, #76]	; (b834c <_strtod_l+0x5a4>)
   b8300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b8304:	4650      	mov	r0, sl
   b8306:	4659      	mov	r1, fp
   b8308:	e9d3 2300 	ldrd	r2, r3, [r3]
   b830c:	f7fc f96e 	bl	b45ec <__aeabi_ddiv>
   b8310:	4682      	mov	sl, r0
   b8312:	468b      	mov	fp, r1
   b8314:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8318:	d0d7      	beq.n	b82ca <_strtod_l+0x522>
   b831a:	f1b8 0f1f 	cmp.w	r8, #31
   b831e:	dd1f      	ble.n	b8360 <_strtod_l+0x5b8>
   b8320:	2500      	movs	r5, #0
   b8322:	462e      	mov	r6, r5
   b8324:	9507      	str	r5, [sp, #28]
   b8326:	9505      	str	r5, [sp, #20]
   b8328:	2322      	movs	r3, #34	; 0x22
   b832a:	f04f 0a00 	mov.w	sl, #0
   b832e:	f04f 0b00 	mov.w	fp, #0
   b8332:	6023      	str	r3, [r4, #0]
   b8334:	e786      	b.n	b8244 <_strtod_l+0x49c>
   b8336:	bf00      	nop
   b8338:	000ba306 	.word	0x000ba306
   b833c:	000ba320 	.word	0x000ba320
   b8340:	000ba2fd 	.word	0x000ba2fd
   b8344:	000ba300 	.word	0x000ba300
   b8348:	000b9e0b 	.word	0x000b9e0b
   b834c:	000ba638 	.word	0x000ba638
   b8350:	000ba610 	.word	0x000ba610
   b8354:	7ff00000 	.word	0x7ff00000
   b8358:	7ca00000 	.word	0x7ca00000
   b835c:	7fefffff 	.word	0x7fefffff
   b8360:	f018 0310 	ands.w	r3, r8, #16
   b8364:	bf18      	it	ne
   b8366:	236a      	movne	r3, #106	; 0x6a
   b8368:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8718 <_strtod_l+0x970>
   b836c:	9304      	str	r3, [sp, #16]
   b836e:	4650      	mov	r0, sl
   b8370:	4659      	mov	r1, fp
   b8372:	2300      	movs	r3, #0
   b8374:	f018 0f01 	tst.w	r8, #1
   b8378:	d004      	beq.n	b8384 <_strtod_l+0x5dc>
   b837a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b837e:	f7fc f80b 	bl	b4398 <__aeabi_dmul>
   b8382:	2301      	movs	r3, #1
   b8384:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8388:	f109 0908 	add.w	r9, r9, #8
   b838c:	d1f2      	bne.n	b8374 <_strtod_l+0x5cc>
   b838e:	b10b      	cbz	r3, b8394 <_strtod_l+0x5ec>
   b8390:	4682      	mov	sl, r0
   b8392:	468b      	mov	fp, r1
   b8394:	9b04      	ldr	r3, [sp, #16]
   b8396:	b1c3      	cbz	r3, b83ca <_strtod_l+0x622>
   b8398:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b839c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b83a0:	2b00      	cmp	r3, #0
   b83a2:	4659      	mov	r1, fp
   b83a4:	dd11      	ble.n	b83ca <_strtod_l+0x622>
   b83a6:	2b1f      	cmp	r3, #31
   b83a8:	f340 8124 	ble.w	b85f4 <_strtod_l+0x84c>
   b83ac:	2b34      	cmp	r3, #52	; 0x34
   b83ae:	bfde      	ittt	le
   b83b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b83b4:	f04f 33ff 	movle.w	r3, #4294967295
   b83b8:	fa03 f202 	lslle.w	r2, r3, r2
   b83bc:	f04f 0a00 	mov.w	sl, #0
   b83c0:	bfcc      	ite	gt
   b83c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b83c6:	ea02 0b01 	andle.w	fp, r2, r1
   b83ca:	2200      	movs	r2, #0
   b83cc:	2300      	movs	r3, #0
   b83ce:	4650      	mov	r0, sl
   b83d0:	4659      	mov	r1, fp
   b83d2:	f7fc fa49 	bl	b4868 <__aeabi_dcmpeq>
   b83d6:	2800      	cmp	r0, #0
   b83d8:	d1a2      	bne.n	b8320 <_strtod_l+0x578>
   b83da:	9b07      	ldr	r3, [sp, #28]
   b83dc:	9300      	str	r3, [sp, #0]
   b83de:	9908      	ldr	r1, [sp, #32]
   b83e0:	462b      	mov	r3, r5
   b83e2:	463a      	mov	r2, r7
   b83e4:	4620      	mov	r0, r4
   b83e6:	f001 f869 	bl	b94bc <__s2b>
   b83ea:	9007      	str	r0, [sp, #28]
   b83ec:	2800      	cmp	r0, #0
   b83ee:	f43f af1f 	beq.w	b8230 <_strtod_l+0x488>
   b83f2:	9b05      	ldr	r3, [sp, #20]
   b83f4:	1b9e      	subs	r6, r3, r6
   b83f6:	9b06      	ldr	r3, [sp, #24]
   b83f8:	2b00      	cmp	r3, #0
   b83fa:	bfb4      	ite	lt
   b83fc:	4633      	movlt	r3, r6
   b83fe:	2300      	movge	r3, #0
   b8400:	930c      	str	r3, [sp, #48]	; 0x30
   b8402:	9b06      	ldr	r3, [sp, #24]
   b8404:	2500      	movs	r5, #0
   b8406:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b840a:	9312      	str	r3, [sp, #72]	; 0x48
   b840c:	462e      	mov	r6, r5
   b840e:	9b07      	ldr	r3, [sp, #28]
   b8410:	4620      	mov	r0, r4
   b8412:	6859      	ldr	r1, [r3, #4]
   b8414:	f000 ffaa 	bl	b936c <_Balloc>
   b8418:	9005      	str	r0, [sp, #20]
   b841a:	2800      	cmp	r0, #0
   b841c:	f43f af0c 	beq.w	b8238 <_strtod_l+0x490>
   b8420:	9b07      	ldr	r3, [sp, #28]
   b8422:	691a      	ldr	r2, [r3, #16]
   b8424:	3202      	adds	r2, #2
   b8426:	f103 010c 	add.w	r1, r3, #12
   b842a:	0092      	lsls	r2, r2, #2
   b842c:	300c      	adds	r0, #12
   b842e:	f7ff fc0e 	bl	b7c4e <memcpy>
   b8432:	ec4b ab10 	vmov	d0, sl, fp
   b8436:	aa1a      	add	r2, sp, #104	; 0x68
   b8438:	a919      	add	r1, sp, #100	; 0x64
   b843a:	4620      	mov	r0, r4
   b843c:	f001 fb84 	bl	b9b48 <__d2b>
   b8440:	ec4b ab18 	vmov	d8, sl, fp
   b8444:	9018      	str	r0, [sp, #96]	; 0x60
   b8446:	2800      	cmp	r0, #0
   b8448:	f43f aef6 	beq.w	b8238 <_strtod_l+0x490>
   b844c:	2101      	movs	r1, #1
   b844e:	4620      	mov	r0, r4
   b8450:	f001 f8ce 	bl	b95f0 <__i2b>
   b8454:	4606      	mov	r6, r0
   b8456:	2800      	cmp	r0, #0
   b8458:	f43f aeee 	beq.w	b8238 <_strtod_l+0x490>
   b845c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b845e:	9904      	ldr	r1, [sp, #16]
   b8460:	2b00      	cmp	r3, #0
   b8462:	bfab      	itete	ge
   b8464:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8466:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8468:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b846a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b846e:	bfac      	ite	ge
   b8470:	eb03 0902 	addge.w	r9, r3, r2
   b8474:	1ad7      	sublt	r7, r2, r3
   b8476:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8478:	eba3 0801 	sub.w	r8, r3, r1
   b847c:	4490      	add	r8, r2
   b847e:	4ba1      	ldr	r3, [pc, #644]	; (b8704 <_strtod_l+0x95c>)
   b8480:	f108 38ff 	add.w	r8, r8, #4294967295
   b8484:	4598      	cmp	r8, r3
   b8486:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b848a:	f280 80c7 	bge.w	b861c <_strtod_l+0x874>
   b848e:	eba3 0308 	sub.w	r3, r3, r8
   b8492:	2b1f      	cmp	r3, #31
   b8494:	eba2 0203 	sub.w	r2, r2, r3
   b8498:	f04f 0101 	mov.w	r1, #1
   b849c:	f300 80b1 	bgt.w	b8602 <_strtod_l+0x85a>
   b84a0:	fa01 f303 	lsl.w	r3, r1, r3
   b84a4:	930d      	str	r3, [sp, #52]	; 0x34
   b84a6:	2300      	movs	r3, #0
   b84a8:	9308      	str	r3, [sp, #32]
   b84aa:	eb09 0802 	add.w	r8, r9, r2
   b84ae:	9b04      	ldr	r3, [sp, #16]
   b84b0:	45c1      	cmp	r9, r8
   b84b2:	4417      	add	r7, r2
   b84b4:	441f      	add	r7, r3
   b84b6:	464b      	mov	r3, r9
   b84b8:	bfa8      	it	ge
   b84ba:	4643      	movge	r3, r8
   b84bc:	42bb      	cmp	r3, r7
   b84be:	bfa8      	it	ge
   b84c0:	463b      	movge	r3, r7
   b84c2:	2b00      	cmp	r3, #0
   b84c4:	bfc2      	ittt	gt
   b84c6:	eba8 0803 	subgt.w	r8, r8, r3
   b84ca:	1aff      	subgt	r7, r7, r3
   b84cc:	eba9 0903 	subgt.w	r9, r9, r3
   b84d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b84d2:	2b00      	cmp	r3, #0
   b84d4:	dd17      	ble.n	b8506 <_strtod_l+0x75e>
   b84d6:	4631      	mov	r1, r6
   b84d8:	461a      	mov	r2, r3
   b84da:	4620      	mov	r0, r4
   b84dc:	f001 f948 	bl	b9770 <__pow5mult>
   b84e0:	4606      	mov	r6, r0
   b84e2:	2800      	cmp	r0, #0
   b84e4:	f43f aea8 	beq.w	b8238 <_strtod_l+0x490>
   b84e8:	4601      	mov	r1, r0
   b84ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b84ec:	4620      	mov	r0, r4
   b84ee:	f001 f895 	bl	b961c <__multiply>
   b84f2:	900b      	str	r0, [sp, #44]	; 0x2c
   b84f4:	2800      	cmp	r0, #0
   b84f6:	f43f ae9f 	beq.w	b8238 <_strtod_l+0x490>
   b84fa:	9918      	ldr	r1, [sp, #96]	; 0x60
   b84fc:	4620      	mov	r0, r4
   b84fe:	f000 ff75 	bl	b93ec <_Bfree>
   b8502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8504:	9318      	str	r3, [sp, #96]	; 0x60
   b8506:	f1b8 0f00 	cmp.w	r8, #0
   b850a:	f300 808c 	bgt.w	b8626 <_strtod_l+0x87e>
   b850e:	9b06      	ldr	r3, [sp, #24]
   b8510:	2b00      	cmp	r3, #0
   b8512:	dd08      	ble.n	b8526 <_strtod_l+0x77e>
   b8514:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8516:	9905      	ldr	r1, [sp, #20]
   b8518:	4620      	mov	r0, r4
   b851a:	f001 f929 	bl	b9770 <__pow5mult>
   b851e:	9005      	str	r0, [sp, #20]
   b8520:	2800      	cmp	r0, #0
   b8522:	f43f ae89 	beq.w	b8238 <_strtod_l+0x490>
   b8526:	2f00      	cmp	r7, #0
   b8528:	dd08      	ble.n	b853c <_strtod_l+0x794>
   b852a:	9905      	ldr	r1, [sp, #20]
   b852c:	463a      	mov	r2, r7
   b852e:	4620      	mov	r0, r4
   b8530:	f001 f978 	bl	b9824 <__lshift>
   b8534:	9005      	str	r0, [sp, #20]
   b8536:	2800      	cmp	r0, #0
   b8538:	f43f ae7e 	beq.w	b8238 <_strtod_l+0x490>
   b853c:	f1b9 0f00 	cmp.w	r9, #0
   b8540:	dd08      	ble.n	b8554 <_strtod_l+0x7ac>
   b8542:	4631      	mov	r1, r6
   b8544:	464a      	mov	r2, r9
   b8546:	4620      	mov	r0, r4
   b8548:	f001 f96c 	bl	b9824 <__lshift>
   b854c:	4606      	mov	r6, r0
   b854e:	2800      	cmp	r0, #0
   b8550:	f43f ae72 	beq.w	b8238 <_strtod_l+0x490>
   b8554:	9a05      	ldr	r2, [sp, #20]
   b8556:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8558:	4620      	mov	r0, r4
   b855a:	f001 f9ef 	bl	b993c <__mdiff>
   b855e:	4605      	mov	r5, r0
   b8560:	2800      	cmp	r0, #0
   b8562:	f43f ae69 	beq.w	b8238 <_strtod_l+0x490>
   b8566:	68c3      	ldr	r3, [r0, #12]
   b8568:	930b      	str	r3, [sp, #44]	; 0x2c
   b856a:	2300      	movs	r3, #0
   b856c:	60c3      	str	r3, [r0, #12]
   b856e:	4631      	mov	r1, r6
   b8570:	f001 f9c8 	bl	b9904 <__mcmp>
   b8574:	2800      	cmp	r0, #0
   b8576:	da60      	bge.n	b863a <_strtod_l+0x892>
   b8578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b857a:	ea53 030a 	orrs.w	r3, r3, sl
   b857e:	f040 8082 	bne.w	b8686 <_strtod_l+0x8de>
   b8582:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8586:	2b00      	cmp	r3, #0
   b8588:	d17d      	bne.n	b8686 <_strtod_l+0x8de>
   b858a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b858e:	0d1b      	lsrs	r3, r3, #20
   b8590:	051b      	lsls	r3, r3, #20
   b8592:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8596:	d976      	bls.n	b8686 <_strtod_l+0x8de>
   b8598:	696b      	ldr	r3, [r5, #20]
   b859a:	b913      	cbnz	r3, b85a2 <_strtod_l+0x7fa>
   b859c:	692b      	ldr	r3, [r5, #16]
   b859e:	2b01      	cmp	r3, #1
   b85a0:	dd71      	ble.n	b8686 <_strtod_l+0x8de>
   b85a2:	4629      	mov	r1, r5
   b85a4:	2201      	movs	r2, #1
   b85a6:	4620      	mov	r0, r4
   b85a8:	f001 f93c 	bl	b9824 <__lshift>
   b85ac:	4631      	mov	r1, r6
   b85ae:	4605      	mov	r5, r0
   b85b0:	f001 f9a8 	bl	b9904 <__mcmp>
   b85b4:	2800      	cmp	r0, #0
   b85b6:	dd66      	ble.n	b8686 <_strtod_l+0x8de>
   b85b8:	9904      	ldr	r1, [sp, #16]
   b85ba:	4a53      	ldr	r2, [pc, #332]	; (b8708 <_strtod_l+0x960>)
   b85bc:	465b      	mov	r3, fp
   b85be:	2900      	cmp	r1, #0
   b85c0:	f000 8081 	beq.w	b86c6 <_strtod_l+0x91e>
   b85c4:	ea02 010b 	and.w	r1, r2, fp
   b85c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b85cc:	dc7b      	bgt.n	b86c6 <_strtod_l+0x91e>
   b85ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b85d2:	f77f aea9 	ble.w	b8328 <_strtod_l+0x580>
   b85d6:	4b4d      	ldr	r3, [pc, #308]	; (b870c <_strtod_l+0x964>)
   b85d8:	4650      	mov	r0, sl
   b85da:	4659      	mov	r1, fp
   b85dc:	2200      	movs	r2, #0
   b85de:	f7fb fedb 	bl	b4398 <__aeabi_dmul>
   b85e2:	460b      	mov	r3, r1
   b85e4:	4303      	orrs	r3, r0
   b85e6:	bf08      	it	eq
   b85e8:	2322      	moveq	r3, #34	; 0x22
   b85ea:	4682      	mov	sl, r0
   b85ec:	468b      	mov	fp, r1
   b85ee:	bf08      	it	eq
   b85f0:	6023      	streq	r3, [r4, #0]
   b85f2:	e62b      	b.n	b824c <_strtod_l+0x4a4>
   b85f4:	f04f 32ff 	mov.w	r2, #4294967295
   b85f8:	fa02 f303 	lsl.w	r3, r2, r3
   b85fc:	ea03 0a0a 	and.w	sl, r3, sl
   b8600:	e6e3      	b.n	b83ca <_strtod_l+0x622>
   b8602:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8606:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b860a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b860e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8612:	fa01 f308 	lsl.w	r3, r1, r8
   b8616:	9308      	str	r3, [sp, #32]
   b8618:	910d      	str	r1, [sp, #52]	; 0x34
   b861a:	e746      	b.n	b84aa <_strtod_l+0x702>
   b861c:	2300      	movs	r3, #0
   b861e:	9308      	str	r3, [sp, #32]
   b8620:	2301      	movs	r3, #1
   b8622:	930d      	str	r3, [sp, #52]	; 0x34
   b8624:	e741      	b.n	b84aa <_strtod_l+0x702>
   b8626:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8628:	4642      	mov	r2, r8
   b862a:	4620      	mov	r0, r4
   b862c:	f001 f8fa 	bl	b9824 <__lshift>
   b8630:	9018      	str	r0, [sp, #96]	; 0x60
   b8632:	2800      	cmp	r0, #0
   b8634:	f47f af6b 	bne.w	b850e <_strtod_l+0x766>
   b8638:	e5fe      	b.n	b8238 <_strtod_l+0x490>
   b863a:	465f      	mov	r7, fp
   b863c:	d16e      	bne.n	b871c <_strtod_l+0x974>
   b863e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8640:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8644:	b342      	cbz	r2, b8698 <_strtod_l+0x8f0>
   b8646:	4a32      	ldr	r2, [pc, #200]	; (b8710 <_strtod_l+0x968>)
   b8648:	4293      	cmp	r3, r2
   b864a:	d128      	bne.n	b869e <_strtod_l+0x8f6>
   b864c:	9b04      	ldr	r3, [sp, #16]
   b864e:	4651      	mov	r1, sl
   b8650:	b1eb      	cbz	r3, b868e <_strtod_l+0x8e6>
   b8652:	4b2d      	ldr	r3, [pc, #180]	; (b8708 <_strtod_l+0x960>)
   b8654:	403b      	ands	r3, r7
   b8656:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b865a:	f04f 32ff 	mov.w	r2, #4294967295
   b865e:	d819      	bhi.n	b8694 <_strtod_l+0x8ec>
   b8660:	0d1b      	lsrs	r3, r3, #20
   b8662:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8666:	fa02 f303 	lsl.w	r3, r2, r3
   b866a:	4299      	cmp	r1, r3
   b866c:	d117      	bne.n	b869e <_strtod_l+0x8f6>
   b866e:	4b29      	ldr	r3, [pc, #164]	; (b8714 <_strtod_l+0x96c>)
   b8670:	429f      	cmp	r7, r3
   b8672:	d102      	bne.n	b867a <_strtod_l+0x8d2>
   b8674:	3101      	adds	r1, #1
   b8676:	f43f addf 	beq.w	b8238 <_strtod_l+0x490>
   b867a:	4b23      	ldr	r3, [pc, #140]	; (b8708 <_strtod_l+0x960>)
   b867c:	403b      	ands	r3, r7
   b867e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8682:	f04f 0a00 	mov.w	sl, #0
   b8686:	9b04      	ldr	r3, [sp, #16]
   b8688:	2b00      	cmp	r3, #0
   b868a:	d1a4      	bne.n	b85d6 <_strtod_l+0x82e>
   b868c:	e5de      	b.n	b824c <_strtod_l+0x4a4>
   b868e:	f04f 33ff 	mov.w	r3, #4294967295
   b8692:	e7ea      	b.n	b866a <_strtod_l+0x8c2>
   b8694:	4613      	mov	r3, r2
   b8696:	e7e8      	b.n	b866a <_strtod_l+0x8c2>
   b8698:	ea53 030a 	orrs.w	r3, r3, sl
   b869c:	d08c      	beq.n	b85b8 <_strtod_l+0x810>
   b869e:	9b08      	ldr	r3, [sp, #32]
   b86a0:	b1db      	cbz	r3, b86da <_strtod_l+0x932>
   b86a2:	423b      	tst	r3, r7
   b86a4:	d0ef      	beq.n	b8686 <_strtod_l+0x8de>
   b86a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b86a8:	9a04      	ldr	r2, [sp, #16]
   b86aa:	4650      	mov	r0, sl
   b86ac:	4659      	mov	r1, fp
   b86ae:	b1c3      	cbz	r3, b86e2 <_strtod_l+0x93a>
   b86b0:	f7ff fb5b 	bl	b7d6a <sulp>
   b86b4:	4602      	mov	r2, r0
   b86b6:	460b      	mov	r3, r1
   b86b8:	ec51 0b18 	vmov	r0, r1, d8
   b86bc:	f7fb fcb6 	bl	b402c <__adddf3>
   b86c0:	4682      	mov	sl, r0
   b86c2:	468b      	mov	fp, r1
   b86c4:	e7df      	b.n	b8686 <_strtod_l+0x8de>
   b86c6:	4013      	ands	r3, r2
   b86c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b86cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b86d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b86d4:	f04f 3aff 	mov.w	sl, #4294967295
   b86d8:	e7d5      	b.n	b8686 <_strtod_l+0x8de>
   b86da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b86dc:	ea13 0f0a 	tst.w	r3, sl
   b86e0:	e7e0      	b.n	b86a4 <_strtod_l+0x8fc>
   b86e2:	f7ff fb42 	bl	b7d6a <sulp>
   b86e6:	4602      	mov	r2, r0
   b86e8:	460b      	mov	r3, r1
   b86ea:	ec51 0b18 	vmov	r0, r1, d8
   b86ee:	f7fb fc9b 	bl	b4028 <__aeabi_dsub>
   b86f2:	2200      	movs	r2, #0
   b86f4:	2300      	movs	r3, #0
   b86f6:	4682      	mov	sl, r0
   b86f8:	468b      	mov	fp, r1
   b86fa:	f7fc f8b5 	bl	b4868 <__aeabi_dcmpeq>
   b86fe:	2800      	cmp	r0, #0
   b8700:	d0c1      	beq.n	b8686 <_strtod_l+0x8de>
   b8702:	e611      	b.n	b8328 <_strtod_l+0x580>
   b8704:	fffffc02 	.word	0xfffffc02
   b8708:	7ff00000 	.word	0x7ff00000
   b870c:	39500000 	.word	0x39500000
   b8710:	000fffff 	.word	0x000fffff
   b8714:	7fefffff 	.word	0x7fefffff
   b8718:	000ba338 	.word	0x000ba338
   b871c:	4631      	mov	r1, r6
   b871e:	4628      	mov	r0, r5
   b8720:	f001 fa6e 	bl	b9c00 <__ratio>
   b8724:	ec59 8b10 	vmov	r8, r9, d0
   b8728:	ee10 0a10 	vmov	r0, s0
   b872c:	2200      	movs	r2, #0
   b872e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8732:	4649      	mov	r1, r9
   b8734:	f7fc f8ac 	bl	b4890 <__aeabi_dcmple>
   b8738:	2800      	cmp	r0, #0
   b873a:	d07a      	beq.n	b8832 <_strtod_l+0xa8a>
   b873c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b873e:	2b00      	cmp	r3, #0
   b8740:	d04a      	beq.n	b87d8 <_strtod_l+0xa30>
   b8742:	4b95      	ldr	r3, [pc, #596]	; (b8998 <_strtod_l+0xbf0>)
   b8744:	2200      	movs	r2, #0
   b8746:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b874a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b8998 <_strtod_l+0xbf0>
   b874e:	f04f 0800 	mov.w	r8, #0
   b8752:	4b92      	ldr	r3, [pc, #584]	; (b899c <_strtod_l+0xbf4>)
   b8754:	403b      	ands	r3, r7
   b8756:	930d      	str	r3, [sp, #52]	; 0x34
   b8758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b875a:	4b91      	ldr	r3, [pc, #580]	; (b89a0 <_strtod_l+0xbf8>)
   b875c:	429a      	cmp	r2, r3
   b875e:	f040 80b0 	bne.w	b88c2 <_strtod_l+0xb1a>
   b8762:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8766:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b876a:	ec4b ab10 	vmov	d0, sl, fp
   b876e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8772:	f001 f96d 	bl	b9a50 <__ulp>
   b8776:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b877a:	ec53 2b10 	vmov	r2, r3, d0
   b877e:	f7fb fe0b 	bl	b4398 <__aeabi_dmul>
   b8782:	4652      	mov	r2, sl
   b8784:	465b      	mov	r3, fp
   b8786:	f7fb fc51 	bl	b402c <__adddf3>
   b878a:	460b      	mov	r3, r1
   b878c:	4983      	ldr	r1, [pc, #524]	; (b899c <_strtod_l+0xbf4>)
   b878e:	4a85      	ldr	r2, [pc, #532]	; (b89a4 <_strtod_l+0xbfc>)
   b8790:	4019      	ands	r1, r3
   b8792:	4291      	cmp	r1, r2
   b8794:	4682      	mov	sl, r0
   b8796:	d960      	bls.n	b885a <_strtod_l+0xab2>
   b8798:	ee18 3a90 	vmov	r3, s17
   b879c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b87a0:	4293      	cmp	r3, r2
   b87a2:	d104      	bne.n	b87ae <_strtod_l+0xa06>
   b87a4:	ee18 3a10 	vmov	r3, s16
   b87a8:	3301      	adds	r3, #1
   b87aa:	f43f ad45 	beq.w	b8238 <_strtod_l+0x490>
   b87ae:	f8df b200 	ldr.w	fp, [pc, #512]	; b89b0 <_strtod_l+0xc08>
   b87b2:	f04f 3aff 	mov.w	sl, #4294967295
   b87b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b87b8:	4620      	mov	r0, r4
   b87ba:	f000 fe17 	bl	b93ec <_Bfree>
   b87be:	9905      	ldr	r1, [sp, #20]
   b87c0:	4620      	mov	r0, r4
   b87c2:	f000 fe13 	bl	b93ec <_Bfree>
   b87c6:	4631      	mov	r1, r6
   b87c8:	4620      	mov	r0, r4
   b87ca:	f000 fe0f 	bl	b93ec <_Bfree>
   b87ce:	4629      	mov	r1, r5
   b87d0:	4620      	mov	r0, r4
   b87d2:	f000 fe0b 	bl	b93ec <_Bfree>
   b87d6:	e61a      	b.n	b840e <_strtod_l+0x666>
   b87d8:	f1ba 0f00 	cmp.w	sl, #0
   b87dc:	d11b      	bne.n	b8816 <_strtod_l+0xa6e>
   b87de:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b87e2:	b9f3      	cbnz	r3, b8822 <_strtod_l+0xa7a>
   b87e4:	4b6c      	ldr	r3, [pc, #432]	; (b8998 <_strtod_l+0xbf0>)
   b87e6:	2200      	movs	r2, #0
   b87e8:	4640      	mov	r0, r8
   b87ea:	4649      	mov	r1, r9
   b87ec:	f7fc f846 	bl	b487c <__aeabi_dcmplt>
   b87f0:	b9d0      	cbnz	r0, b8828 <_strtod_l+0xa80>
   b87f2:	4640      	mov	r0, r8
   b87f4:	4649      	mov	r1, r9
   b87f6:	4b6c      	ldr	r3, [pc, #432]	; (b89a8 <_strtod_l+0xc00>)
   b87f8:	2200      	movs	r2, #0
   b87fa:	f7fb fdcd 	bl	b4398 <__aeabi_dmul>
   b87fe:	4680      	mov	r8, r0
   b8800:	4689      	mov	r9, r1
   b8802:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b8806:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b880a:	9315      	str	r3, [sp, #84]	; 0x54
   b880c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b8810:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8814:	e79d      	b.n	b8752 <_strtod_l+0x9aa>
   b8816:	f1ba 0f01 	cmp.w	sl, #1
   b881a:	d102      	bne.n	b8822 <_strtod_l+0xa7a>
   b881c:	2f00      	cmp	r7, #0
   b881e:	f43f ad83 	beq.w	b8328 <_strtod_l+0x580>
   b8822:	4b62      	ldr	r3, [pc, #392]	; (b89ac <_strtod_l+0xc04>)
   b8824:	2200      	movs	r2, #0
   b8826:	e78e      	b.n	b8746 <_strtod_l+0x99e>
   b8828:	f8df 917c 	ldr.w	r9, [pc, #380]	; b89a8 <_strtod_l+0xc00>
   b882c:	f04f 0800 	mov.w	r8, #0
   b8830:	e7e7      	b.n	b8802 <_strtod_l+0xa5a>
   b8832:	4b5d      	ldr	r3, [pc, #372]	; (b89a8 <_strtod_l+0xc00>)
   b8834:	4640      	mov	r0, r8
   b8836:	4649      	mov	r1, r9
   b8838:	2200      	movs	r2, #0
   b883a:	f7fb fdad 	bl	b4398 <__aeabi_dmul>
   b883e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8840:	4680      	mov	r8, r0
   b8842:	4689      	mov	r9, r1
   b8844:	b933      	cbnz	r3, b8854 <_strtod_l+0xaac>
   b8846:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b884a:	900e      	str	r0, [sp, #56]	; 0x38
   b884c:	930f      	str	r3, [sp, #60]	; 0x3c
   b884e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b8852:	e7dd      	b.n	b8810 <_strtod_l+0xa68>
   b8854:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b8858:	e7f9      	b.n	b884e <_strtod_l+0xaa6>
   b885a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b885e:	9b04      	ldr	r3, [sp, #16]
   b8860:	2b00      	cmp	r3, #0
   b8862:	d1a8      	bne.n	b87b6 <_strtod_l+0xa0e>
   b8864:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8868:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b886a:	0d1b      	lsrs	r3, r3, #20
   b886c:	051b      	lsls	r3, r3, #20
   b886e:	429a      	cmp	r2, r3
   b8870:	d1a1      	bne.n	b87b6 <_strtod_l+0xa0e>
   b8872:	4640      	mov	r0, r8
   b8874:	4649      	mov	r1, r9
   b8876:	f7fc f879 	bl	b496c <__aeabi_d2lz>
   b887a:	f7fb fd5f 	bl	b433c <__aeabi_l2d>
   b887e:	4602      	mov	r2, r0
   b8880:	460b      	mov	r3, r1
   b8882:	4640      	mov	r0, r8
   b8884:	4649      	mov	r1, r9
   b8886:	f7fb fbcf 	bl	b4028 <__aeabi_dsub>
   b888a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b888c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8890:	ea43 030a 	orr.w	r3, r3, sl
   b8894:	4313      	orrs	r3, r2
   b8896:	4680      	mov	r8, r0
   b8898:	4689      	mov	r9, r1
   b889a:	d055      	beq.n	b8948 <_strtod_l+0xba0>
   b889c:	a336      	add	r3, pc, #216	; (adr r3, b8978 <_strtod_l+0xbd0>)
   b889e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88a2:	f7fb ffeb 	bl	b487c <__aeabi_dcmplt>
   b88a6:	2800      	cmp	r0, #0
   b88a8:	f47f acd0 	bne.w	b824c <_strtod_l+0x4a4>
   b88ac:	a334      	add	r3, pc, #208	; (adr r3, b8980 <_strtod_l+0xbd8>)
   b88ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88b2:	4640      	mov	r0, r8
   b88b4:	4649      	mov	r1, r9
   b88b6:	f7fb ffff 	bl	b48b8 <__aeabi_dcmpgt>
   b88ba:	2800      	cmp	r0, #0
   b88bc:	f43f af7b 	beq.w	b87b6 <_strtod_l+0xa0e>
   b88c0:	e4c4      	b.n	b824c <_strtod_l+0x4a4>
   b88c2:	9b04      	ldr	r3, [sp, #16]
   b88c4:	b333      	cbz	r3, b8914 <_strtod_l+0xb6c>
   b88c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b88c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b88cc:	d822      	bhi.n	b8914 <_strtod_l+0xb6c>
   b88ce:	a32e      	add	r3, pc, #184	; (adr r3, b8988 <_strtod_l+0xbe0>)
   b88d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88d4:	4640      	mov	r0, r8
   b88d6:	4649      	mov	r1, r9
   b88d8:	f7fb ffda 	bl	b4890 <__aeabi_dcmple>
   b88dc:	b1a0      	cbz	r0, b8908 <_strtod_l+0xb60>
   b88de:	4649      	mov	r1, r9
   b88e0:	4640      	mov	r0, r8
   b88e2:	f7fb fff3 	bl	b48cc <__aeabi_d2uiz>
   b88e6:	2801      	cmp	r0, #1
   b88e8:	bf38      	it	cc
   b88ea:	2001      	movcc	r0, #1
   b88ec:	f7fb fcda 	bl	b42a4 <__aeabi_ui2d>
   b88f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b88f2:	4680      	mov	r8, r0
   b88f4:	4689      	mov	r9, r1
   b88f6:	bb23      	cbnz	r3, b8942 <_strtod_l+0xb9a>
   b88f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b88fc:	9010      	str	r0, [sp, #64]	; 0x40
   b88fe:	9311      	str	r3, [sp, #68]	; 0x44
   b8900:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b8904:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8908:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b890a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b890c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b8910:	1a9b      	subs	r3, r3, r2
   b8912:	9309      	str	r3, [sp, #36]	; 0x24
   b8914:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8918:	eeb0 0a48 	vmov.f32	s0, s16
   b891c:	eef0 0a68 	vmov.f32	s1, s17
   b8920:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8924:	f001 f894 	bl	b9a50 <__ulp>
   b8928:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b892c:	ec53 2b10 	vmov	r2, r3, d0
   b8930:	f7fb fd32 	bl	b4398 <__aeabi_dmul>
   b8934:	ec53 2b18 	vmov	r2, r3, d8
   b8938:	f7fb fb78 	bl	b402c <__adddf3>
   b893c:	4682      	mov	sl, r0
   b893e:	468b      	mov	fp, r1
   b8940:	e78d      	b.n	b885e <_strtod_l+0xab6>
   b8942:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b8946:	e7db      	b.n	b8900 <_strtod_l+0xb58>
   b8948:	a311      	add	r3, pc, #68	; (adr r3, b8990 <_strtod_l+0xbe8>)
   b894a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b894e:	f7fb ff95 	bl	b487c <__aeabi_dcmplt>
   b8952:	e7b2      	b.n	b88ba <_strtod_l+0xb12>
   b8954:	2300      	movs	r3, #0
   b8956:	930a      	str	r3, [sp, #40]	; 0x28
   b8958:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b895a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b895c:	6013      	str	r3, [r2, #0]
   b895e:	f7ff ba6b 	b.w	b7e38 <_strtod_l+0x90>
   b8962:	2a65      	cmp	r2, #101	; 0x65
   b8964:	f43f ab5f 	beq.w	b8026 <_strtod_l+0x27e>
   b8968:	2a45      	cmp	r2, #69	; 0x45
   b896a:	f43f ab5c 	beq.w	b8026 <_strtod_l+0x27e>
   b896e:	2301      	movs	r3, #1
   b8970:	f7ff bb94 	b.w	b809c <_strtod_l+0x2f4>
   b8974:	f3af 8000 	nop.w
   b8978:	94a03595 	.word	0x94a03595
   b897c:	3fdfffff 	.word	0x3fdfffff
   b8980:	35afe535 	.word	0x35afe535
   b8984:	3fe00000 	.word	0x3fe00000
   b8988:	ffc00000 	.word	0xffc00000
   b898c:	41dfffff 	.word	0x41dfffff
   b8990:	94a03595 	.word	0x94a03595
   b8994:	3fcfffff 	.word	0x3fcfffff
   b8998:	3ff00000 	.word	0x3ff00000
   b899c:	7ff00000 	.word	0x7ff00000
   b89a0:	7fe00000 	.word	0x7fe00000
   b89a4:	7c9fffff 	.word	0x7c9fffff
   b89a8:	3fe00000 	.word	0x3fe00000
   b89ac:	bff00000 	.word	0xbff00000
   b89b0:	7fefffff 	.word	0x7fefffff

000b89b4 <strtod>:
   b89b4:	460a      	mov	r2, r1
   b89b6:	4601      	mov	r1, r0
   b89b8:	4802      	ldr	r0, [pc, #8]	; (b89c4 <strtod+0x10>)
   b89ba:	4b03      	ldr	r3, [pc, #12]	; (b89c8 <strtod+0x14>)
   b89bc:	6800      	ldr	r0, [r0, #0]
   b89be:	f7ff b9f3 	b.w	b7da8 <_strtod_l>
   b89c2:	bf00      	nop
   b89c4:	2003cd1c 	.word	0x2003cd1c
   b89c8:	2003cd88 	.word	0x2003cd88

000b89cc <strtok>:
   b89cc:	4b16      	ldr	r3, [pc, #88]	; (b8a28 <strtok+0x5c>)
   b89ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b89d0:	681e      	ldr	r6, [r3, #0]
   b89d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b89d4:	4605      	mov	r5, r0
   b89d6:	b9fc      	cbnz	r4, b8a18 <strtok+0x4c>
   b89d8:	2050      	movs	r0, #80	; 0x50
   b89da:	9101      	str	r1, [sp, #4]
   b89dc:	f7fd fa58 	bl	b5e90 <malloc>
   b89e0:	9901      	ldr	r1, [sp, #4]
   b89e2:	65b0      	str	r0, [r6, #88]	; 0x58
   b89e4:	4602      	mov	r2, r0
   b89e6:	b920      	cbnz	r0, b89f2 <strtok+0x26>
   b89e8:	4b10      	ldr	r3, [pc, #64]	; (b8a2c <strtok+0x60>)
   b89ea:	4811      	ldr	r0, [pc, #68]	; (b8a30 <strtok+0x64>)
   b89ec:	2157      	movs	r1, #87	; 0x57
   b89ee:	f7fd fa97 	bl	b5f20 <__assert_func>
   b89f2:	e9c0 4400 	strd	r4, r4, [r0]
   b89f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b89fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b89fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b8a02:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b8a06:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b8a0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b8a0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b8a12:	6184      	str	r4, [r0, #24]
   b8a14:	7704      	strb	r4, [r0, #28]
   b8a16:	6244      	str	r4, [r0, #36]	; 0x24
   b8a18:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b8a1a:	2301      	movs	r3, #1
   b8a1c:	4628      	mov	r0, r5
   b8a1e:	b002      	add	sp, #8
   b8a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8a24:	f000 b806 	b.w	b8a34 <__strtok_r>
   b8a28:	2003cd1c 	.word	0x2003cd1c
   b8a2c:	000ba269 	.word	0x000ba269
   b8a30:	000ba360 	.word	0x000ba360

000b8a34 <__strtok_r>:
   b8a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8a36:	b908      	cbnz	r0, b8a3c <__strtok_r+0x8>
   b8a38:	6810      	ldr	r0, [r2, #0]
   b8a3a:	b188      	cbz	r0, b8a60 <__strtok_r+0x2c>
   b8a3c:	4604      	mov	r4, r0
   b8a3e:	4620      	mov	r0, r4
   b8a40:	f814 5b01 	ldrb.w	r5, [r4], #1
   b8a44:	460f      	mov	r7, r1
   b8a46:	f817 6b01 	ldrb.w	r6, [r7], #1
   b8a4a:	b91e      	cbnz	r6, b8a54 <__strtok_r+0x20>
   b8a4c:	b965      	cbnz	r5, b8a68 <__strtok_r+0x34>
   b8a4e:	6015      	str	r5, [r2, #0]
   b8a50:	4628      	mov	r0, r5
   b8a52:	e005      	b.n	b8a60 <__strtok_r+0x2c>
   b8a54:	42b5      	cmp	r5, r6
   b8a56:	d1f6      	bne.n	b8a46 <__strtok_r+0x12>
   b8a58:	2b00      	cmp	r3, #0
   b8a5a:	d1f0      	bne.n	b8a3e <__strtok_r+0xa>
   b8a5c:	6014      	str	r4, [r2, #0]
   b8a5e:	7003      	strb	r3, [r0, #0]
   b8a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8a62:	461c      	mov	r4, r3
   b8a64:	e00c      	b.n	b8a80 <__strtok_r+0x4c>
   b8a66:	b915      	cbnz	r5, b8a6e <__strtok_r+0x3a>
   b8a68:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8a6c:	460e      	mov	r6, r1
   b8a6e:	f816 5b01 	ldrb.w	r5, [r6], #1
   b8a72:	42ab      	cmp	r3, r5
   b8a74:	d1f7      	bne.n	b8a66 <__strtok_r+0x32>
   b8a76:	2b00      	cmp	r3, #0
   b8a78:	d0f3      	beq.n	b8a62 <__strtok_r+0x2e>
   b8a7a:	2300      	movs	r3, #0
   b8a7c:	f804 3c01 	strb.w	r3, [r4, #-1]
   b8a80:	6014      	str	r4, [r2, #0]
   b8a82:	e7ed      	b.n	b8a60 <__strtok_r+0x2c>

000b8a84 <_strtol_l.constprop.0>:
   b8a84:	2b01      	cmp	r3, #1
   b8a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8a8a:	d001      	beq.n	b8a90 <_strtol_l.constprop.0+0xc>
   b8a8c:	2b24      	cmp	r3, #36	; 0x24
   b8a8e:	d906      	bls.n	b8a9e <_strtol_l.constprop.0+0x1a>
   b8a90:	f7fd fa3e 	bl	b5f10 <__errno>
   b8a94:	2316      	movs	r3, #22
   b8a96:	6003      	str	r3, [r0, #0]
   b8a98:	2000      	movs	r0, #0
   b8a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8a9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8b84 <_strtol_l.constprop.0+0x100>
   b8aa2:	460d      	mov	r5, r1
   b8aa4:	462e      	mov	r6, r5
   b8aa6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8aaa:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8aae:	f017 0708 	ands.w	r7, r7, #8
   b8ab2:	d1f7      	bne.n	b8aa4 <_strtol_l.constprop.0+0x20>
   b8ab4:	2c2d      	cmp	r4, #45	; 0x2d
   b8ab6:	d132      	bne.n	b8b1e <_strtol_l.constprop.0+0x9a>
   b8ab8:	782c      	ldrb	r4, [r5, #0]
   b8aba:	2701      	movs	r7, #1
   b8abc:	1cb5      	adds	r5, r6, #2
   b8abe:	2b00      	cmp	r3, #0
   b8ac0:	d05b      	beq.n	b8b7a <_strtol_l.constprop.0+0xf6>
   b8ac2:	2b10      	cmp	r3, #16
   b8ac4:	d109      	bne.n	b8ada <_strtol_l.constprop.0+0x56>
   b8ac6:	2c30      	cmp	r4, #48	; 0x30
   b8ac8:	d107      	bne.n	b8ada <_strtol_l.constprop.0+0x56>
   b8aca:	782c      	ldrb	r4, [r5, #0]
   b8acc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8ad0:	2c58      	cmp	r4, #88	; 0x58
   b8ad2:	d14d      	bne.n	b8b70 <_strtol_l.constprop.0+0xec>
   b8ad4:	786c      	ldrb	r4, [r5, #1]
   b8ad6:	2310      	movs	r3, #16
   b8ad8:	3502      	adds	r5, #2
   b8ada:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8ade:	f108 38ff 	add.w	r8, r8, #4294967295
   b8ae2:	f04f 0c00 	mov.w	ip, #0
   b8ae6:	fbb8 f9f3 	udiv	r9, r8, r3
   b8aea:	4666      	mov	r6, ip
   b8aec:	fb03 8a19 	mls	sl, r3, r9, r8
   b8af0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8af4:	f1be 0f09 	cmp.w	lr, #9
   b8af8:	d816      	bhi.n	b8b28 <_strtol_l.constprop.0+0xa4>
   b8afa:	4674      	mov	r4, lr
   b8afc:	42a3      	cmp	r3, r4
   b8afe:	dd24      	ble.n	b8b4a <_strtol_l.constprop.0+0xc6>
   b8b00:	f1bc 0f00 	cmp.w	ip, #0
   b8b04:	db1e      	blt.n	b8b44 <_strtol_l.constprop.0+0xc0>
   b8b06:	45b1      	cmp	r9, r6
   b8b08:	d31c      	bcc.n	b8b44 <_strtol_l.constprop.0+0xc0>
   b8b0a:	d101      	bne.n	b8b10 <_strtol_l.constprop.0+0x8c>
   b8b0c:	45a2      	cmp	sl, r4
   b8b0e:	db19      	blt.n	b8b44 <_strtol_l.constprop.0+0xc0>
   b8b10:	fb06 4603 	mla	r6, r6, r3, r4
   b8b14:	f04f 0c01 	mov.w	ip, #1
   b8b18:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8b1c:	e7e8      	b.n	b8af0 <_strtol_l.constprop.0+0x6c>
   b8b1e:	2c2b      	cmp	r4, #43	; 0x2b
   b8b20:	bf04      	itt	eq
   b8b22:	782c      	ldrbeq	r4, [r5, #0]
   b8b24:	1cb5      	addeq	r5, r6, #2
   b8b26:	e7ca      	b.n	b8abe <_strtol_l.constprop.0+0x3a>
   b8b28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8b2c:	f1be 0f19 	cmp.w	lr, #25
   b8b30:	d801      	bhi.n	b8b36 <_strtol_l.constprop.0+0xb2>
   b8b32:	3c37      	subs	r4, #55	; 0x37
   b8b34:	e7e2      	b.n	b8afc <_strtol_l.constprop.0+0x78>
   b8b36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8b3a:	f1be 0f19 	cmp.w	lr, #25
   b8b3e:	d804      	bhi.n	b8b4a <_strtol_l.constprop.0+0xc6>
   b8b40:	3c57      	subs	r4, #87	; 0x57
   b8b42:	e7db      	b.n	b8afc <_strtol_l.constprop.0+0x78>
   b8b44:	f04f 3cff 	mov.w	ip, #4294967295
   b8b48:	e7e6      	b.n	b8b18 <_strtol_l.constprop.0+0x94>
   b8b4a:	f1bc 0f00 	cmp.w	ip, #0
   b8b4e:	da05      	bge.n	b8b5c <_strtol_l.constprop.0+0xd8>
   b8b50:	2322      	movs	r3, #34	; 0x22
   b8b52:	6003      	str	r3, [r0, #0]
   b8b54:	4646      	mov	r6, r8
   b8b56:	b942      	cbnz	r2, b8b6a <_strtol_l.constprop.0+0xe6>
   b8b58:	4630      	mov	r0, r6
   b8b5a:	e79e      	b.n	b8a9a <_strtol_l.constprop.0+0x16>
   b8b5c:	b107      	cbz	r7, b8b60 <_strtol_l.constprop.0+0xdc>
   b8b5e:	4276      	negs	r6, r6
   b8b60:	2a00      	cmp	r2, #0
   b8b62:	d0f9      	beq.n	b8b58 <_strtol_l.constprop.0+0xd4>
   b8b64:	f1bc 0f00 	cmp.w	ip, #0
   b8b68:	d000      	beq.n	b8b6c <_strtol_l.constprop.0+0xe8>
   b8b6a:	1e69      	subs	r1, r5, #1
   b8b6c:	6011      	str	r1, [r2, #0]
   b8b6e:	e7f3      	b.n	b8b58 <_strtol_l.constprop.0+0xd4>
   b8b70:	2430      	movs	r4, #48	; 0x30
   b8b72:	2b00      	cmp	r3, #0
   b8b74:	d1b1      	bne.n	b8ada <_strtol_l.constprop.0+0x56>
   b8b76:	2308      	movs	r3, #8
   b8b78:	e7af      	b.n	b8ada <_strtol_l.constprop.0+0x56>
   b8b7a:	2c30      	cmp	r4, #48	; 0x30
   b8b7c:	d0a5      	beq.n	b8aca <_strtol_l.constprop.0+0x46>
   b8b7e:	230a      	movs	r3, #10
   b8b80:	e7ab      	b.n	b8ada <_strtol_l.constprop.0+0x56>
   b8b82:	bf00      	nop
   b8b84:	000ba3e0 	.word	0x000ba3e0

000b8b88 <strtol>:
   b8b88:	4613      	mov	r3, r2
   b8b8a:	460a      	mov	r2, r1
   b8b8c:	4601      	mov	r1, r0
   b8b8e:	4802      	ldr	r0, [pc, #8]	; (b8b98 <strtol+0x10>)
   b8b90:	6800      	ldr	r0, [r0, #0]
   b8b92:	f7ff bf77 	b.w	b8a84 <_strtol_l.constprop.0>
   b8b96:	bf00      	nop
   b8b98:	2003cd1c 	.word	0x2003cd1c

000b8b9c <__register_exitproc>:
   b8b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8ba0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8c5c <__register_exitproc+0xc0>
   b8ba4:	4606      	mov	r6, r0
   b8ba6:	f8d8 0000 	ldr.w	r0, [r8]
   b8baa:	461f      	mov	r7, r3
   b8bac:	460d      	mov	r5, r1
   b8bae:	4691      	mov	r9, r2
   b8bb0:	f000 fbc6 	bl	b9340 <__retarget_lock_acquire_recursive>
   b8bb4:	4b25      	ldr	r3, [pc, #148]	; (b8c4c <__register_exitproc+0xb0>)
   b8bb6:	681c      	ldr	r4, [r3, #0]
   b8bb8:	b934      	cbnz	r4, b8bc8 <__register_exitproc+0x2c>
   b8bba:	4c25      	ldr	r4, [pc, #148]	; (b8c50 <__register_exitproc+0xb4>)
   b8bbc:	601c      	str	r4, [r3, #0]
   b8bbe:	4b25      	ldr	r3, [pc, #148]	; (b8c54 <__register_exitproc+0xb8>)
   b8bc0:	b113      	cbz	r3, b8bc8 <__register_exitproc+0x2c>
   b8bc2:	681b      	ldr	r3, [r3, #0]
   b8bc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8bc8:	6863      	ldr	r3, [r4, #4]
   b8bca:	2b1f      	cmp	r3, #31
   b8bcc:	dd07      	ble.n	b8bde <__register_exitproc+0x42>
   b8bce:	f8d8 0000 	ldr.w	r0, [r8]
   b8bd2:	f000 fbb7 	bl	b9344 <__retarget_lock_release_recursive>
   b8bd6:	f04f 30ff 	mov.w	r0, #4294967295
   b8bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8bde:	b34e      	cbz	r6, b8c34 <__register_exitproc+0x98>
   b8be0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8be4:	b988      	cbnz	r0, b8c0a <__register_exitproc+0x6e>
   b8be6:	4b1c      	ldr	r3, [pc, #112]	; (b8c58 <__register_exitproc+0xbc>)
   b8be8:	b923      	cbnz	r3, b8bf4 <__register_exitproc+0x58>
   b8bea:	f8d8 0000 	ldr.w	r0, [r8]
   b8bee:	f000 fba8 	bl	b9342 <__retarget_lock_release>
   b8bf2:	e7f0      	b.n	b8bd6 <__register_exitproc+0x3a>
   b8bf4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8bf8:	f7fd f94a 	bl	b5e90 <malloc>
   b8bfc:	2800      	cmp	r0, #0
   b8bfe:	d0f4      	beq.n	b8bea <__register_exitproc+0x4e>
   b8c00:	2300      	movs	r3, #0
   b8c02:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8c06:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8c0a:	6863      	ldr	r3, [r4, #4]
   b8c0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8c10:	2201      	movs	r2, #1
   b8c12:	409a      	lsls	r2, r3
   b8c14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8c18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8c1c:	4313      	orrs	r3, r2
   b8c1e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8c22:	2e02      	cmp	r6, #2
   b8c24:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8c28:	bf02      	ittt	eq
   b8c2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8c2e:	4313      	orreq	r3, r2
   b8c30:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8c34:	6863      	ldr	r3, [r4, #4]
   b8c36:	f8d8 0000 	ldr.w	r0, [r8]
   b8c3a:	1c5a      	adds	r2, r3, #1
   b8c3c:	3302      	adds	r3, #2
   b8c3e:	6062      	str	r2, [r4, #4]
   b8c40:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8c44:	f000 fb7e 	bl	b9344 <__retarget_lock_release_recursive>
   b8c48:	2000      	movs	r0, #0
   b8c4a:	e7c6      	b.n	b8bda <__register_exitproc+0x3e>
   b8c4c:	2003e7ec 	.word	0x2003e7ec
   b8c50:	2003e760 	.word	0x2003e760
   b8c54:	00000000 	.word	0x00000000
   b8c58:	000b5e91 	.word	0x000b5e91
   b8c5c:	2003cd80 	.word	0x2003cd80

000b8c60 <rshift>:
   b8c60:	6903      	ldr	r3, [r0, #16]
   b8c62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b8c66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8c6a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b8c6e:	f100 0414 	add.w	r4, r0, #20
   b8c72:	dd45      	ble.n	b8d00 <rshift+0xa0>
   b8c74:	f011 011f 	ands.w	r1, r1, #31
   b8c78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b8c7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b8c80:	d10c      	bne.n	b8c9c <rshift+0x3c>
   b8c82:	f100 0710 	add.w	r7, r0, #16
   b8c86:	4629      	mov	r1, r5
   b8c88:	42b1      	cmp	r1, r6
   b8c8a:	d334      	bcc.n	b8cf6 <rshift+0x96>
   b8c8c:	1a9b      	subs	r3, r3, r2
   b8c8e:	009b      	lsls	r3, r3, #2
   b8c90:	1eea      	subs	r2, r5, #3
   b8c92:	4296      	cmp	r6, r2
   b8c94:	bf38      	it	cc
   b8c96:	2300      	movcc	r3, #0
   b8c98:	4423      	add	r3, r4
   b8c9a:	e015      	b.n	b8cc8 <rshift+0x68>
   b8c9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b8ca0:	f1c1 0820 	rsb	r8, r1, #32
   b8ca4:	40cf      	lsrs	r7, r1
   b8ca6:	f105 0e04 	add.w	lr, r5, #4
   b8caa:	46a1      	mov	r9, r4
   b8cac:	4576      	cmp	r6, lr
   b8cae:	46f4      	mov	ip, lr
   b8cb0:	d815      	bhi.n	b8cde <rshift+0x7e>
   b8cb2:	1a9a      	subs	r2, r3, r2
   b8cb4:	0092      	lsls	r2, r2, #2
   b8cb6:	3a04      	subs	r2, #4
   b8cb8:	3501      	adds	r5, #1
   b8cba:	42ae      	cmp	r6, r5
   b8cbc:	bf38      	it	cc
   b8cbe:	2200      	movcc	r2, #0
   b8cc0:	18a3      	adds	r3, r4, r2
   b8cc2:	50a7      	str	r7, [r4, r2]
   b8cc4:	b107      	cbz	r7, b8cc8 <rshift+0x68>
   b8cc6:	3304      	adds	r3, #4
   b8cc8:	1b1a      	subs	r2, r3, r4
   b8cca:	42a3      	cmp	r3, r4
   b8ccc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b8cd0:	bf08      	it	eq
   b8cd2:	2300      	moveq	r3, #0
   b8cd4:	6102      	str	r2, [r0, #16]
   b8cd6:	bf08      	it	eq
   b8cd8:	6143      	streq	r3, [r0, #20]
   b8cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8cde:	f8dc c000 	ldr.w	ip, [ip]
   b8ce2:	fa0c fc08 	lsl.w	ip, ip, r8
   b8ce6:	ea4c 0707 	orr.w	r7, ip, r7
   b8cea:	f849 7b04 	str.w	r7, [r9], #4
   b8cee:	f85e 7b04 	ldr.w	r7, [lr], #4
   b8cf2:	40cf      	lsrs	r7, r1
   b8cf4:	e7da      	b.n	b8cac <rshift+0x4c>
   b8cf6:	f851 cb04 	ldr.w	ip, [r1], #4
   b8cfa:	f847 cf04 	str.w	ip, [r7, #4]!
   b8cfe:	e7c3      	b.n	b8c88 <rshift+0x28>
   b8d00:	4623      	mov	r3, r4
   b8d02:	e7e1      	b.n	b8cc8 <rshift+0x68>

000b8d04 <__hexdig_fun>:
   b8d04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8d08:	2b09      	cmp	r3, #9
   b8d0a:	d802      	bhi.n	b8d12 <__hexdig_fun+0xe>
   b8d0c:	3820      	subs	r0, #32
   b8d0e:	b2c0      	uxtb	r0, r0
   b8d10:	4770      	bx	lr
   b8d12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8d16:	2b05      	cmp	r3, #5
   b8d18:	d801      	bhi.n	b8d1e <__hexdig_fun+0x1a>
   b8d1a:	3847      	subs	r0, #71	; 0x47
   b8d1c:	e7f7      	b.n	b8d0e <__hexdig_fun+0xa>
   b8d1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8d22:	2b05      	cmp	r3, #5
   b8d24:	d801      	bhi.n	b8d2a <__hexdig_fun+0x26>
   b8d26:	3827      	subs	r0, #39	; 0x27
   b8d28:	e7f1      	b.n	b8d0e <__hexdig_fun+0xa>
   b8d2a:	2000      	movs	r0, #0
   b8d2c:	4770      	bx	lr
	...

000b8d30 <__gethex>:
   b8d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d34:	ed2d 8b02 	vpush	{d8}
   b8d38:	b089      	sub	sp, #36	; 0x24
   b8d3a:	ee08 0a10 	vmov	s16, r0
   b8d3e:	9304      	str	r3, [sp, #16]
   b8d40:	4bb4      	ldr	r3, [pc, #720]	; (b9014 <__gethex+0x2e4>)
   b8d42:	681b      	ldr	r3, [r3, #0]
   b8d44:	9301      	str	r3, [sp, #4]
   b8d46:	4618      	mov	r0, r3
   b8d48:	468b      	mov	fp, r1
   b8d4a:	4690      	mov	r8, r2
   b8d4c:	f7fb fe06 	bl	b495c <strlen>
   b8d50:	9b01      	ldr	r3, [sp, #4]
   b8d52:	f8db 2000 	ldr.w	r2, [fp]
   b8d56:	4403      	add	r3, r0
   b8d58:	4682      	mov	sl, r0
   b8d5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b8d5e:	9305      	str	r3, [sp, #20]
   b8d60:	1c93      	adds	r3, r2, #2
   b8d62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b8d66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b8d6a:	32fe      	adds	r2, #254	; 0xfe
   b8d6c:	18d1      	adds	r1, r2, r3
   b8d6e:	461f      	mov	r7, r3
   b8d70:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8d74:	9100      	str	r1, [sp, #0]
   b8d76:	2830      	cmp	r0, #48	; 0x30
   b8d78:	d0f8      	beq.n	b8d6c <__gethex+0x3c>
   b8d7a:	f7ff ffc3 	bl	b8d04 <__hexdig_fun>
   b8d7e:	4604      	mov	r4, r0
   b8d80:	2800      	cmp	r0, #0
   b8d82:	d13a      	bne.n	b8dfa <__gethex+0xca>
   b8d84:	9901      	ldr	r1, [sp, #4]
   b8d86:	4652      	mov	r2, sl
   b8d88:	4638      	mov	r0, r7
   b8d8a:	f7fe ffda 	bl	b7d42 <strncmp>
   b8d8e:	4605      	mov	r5, r0
   b8d90:	2800      	cmp	r0, #0
   b8d92:	d168      	bne.n	b8e66 <__gethex+0x136>
   b8d94:	f817 000a 	ldrb.w	r0, [r7, sl]
   b8d98:	eb07 060a 	add.w	r6, r7, sl
   b8d9c:	f7ff ffb2 	bl	b8d04 <__hexdig_fun>
   b8da0:	2800      	cmp	r0, #0
   b8da2:	d062      	beq.n	b8e6a <__gethex+0x13a>
   b8da4:	4633      	mov	r3, r6
   b8da6:	7818      	ldrb	r0, [r3, #0]
   b8da8:	2830      	cmp	r0, #48	; 0x30
   b8daa:	461f      	mov	r7, r3
   b8dac:	f103 0301 	add.w	r3, r3, #1
   b8db0:	d0f9      	beq.n	b8da6 <__gethex+0x76>
   b8db2:	f7ff ffa7 	bl	b8d04 <__hexdig_fun>
   b8db6:	2301      	movs	r3, #1
   b8db8:	fab0 f480 	clz	r4, r0
   b8dbc:	0964      	lsrs	r4, r4, #5
   b8dbe:	4635      	mov	r5, r6
   b8dc0:	9300      	str	r3, [sp, #0]
   b8dc2:	463a      	mov	r2, r7
   b8dc4:	4616      	mov	r6, r2
   b8dc6:	3201      	adds	r2, #1
   b8dc8:	7830      	ldrb	r0, [r6, #0]
   b8dca:	f7ff ff9b 	bl	b8d04 <__hexdig_fun>
   b8dce:	2800      	cmp	r0, #0
   b8dd0:	d1f8      	bne.n	b8dc4 <__gethex+0x94>
   b8dd2:	9901      	ldr	r1, [sp, #4]
   b8dd4:	4652      	mov	r2, sl
   b8dd6:	4630      	mov	r0, r6
   b8dd8:	f7fe ffb3 	bl	b7d42 <strncmp>
   b8ddc:	b980      	cbnz	r0, b8e00 <__gethex+0xd0>
   b8dde:	b94d      	cbnz	r5, b8df4 <__gethex+0xc4>
   b8de0:	eb06 050a 	add.w	r5, r6, sl
   b8de4:	462a      	mov	r2, r5
   b8de6:	4616      	mov	r6, r2
   b8de8:	3201      	adds	r2, #1
   b8dea:	7830      	ldrb	r0, [r6, #0]
   b8dec:	f7ff ff8a 	bl	b8d04 <__hexdig_fun>
   b8df0:	2800      	cmp	r0, #0
   b8df2:	d1f8      	bne.n	b8de6 <__gethex+0xb6>
   b8df4:	1bad      	subs	r5, r5, r6
   b8df6:	00ad      	lsls	r5, r5, #2
   b8df8:	e004      	b.n	b8e04 <__gethex+0xd4>
   b8dfa:	2400      	movs	r4, #0
   b8dfc:	4625      	mov	r5, r4
   b8dfe:	e7e0      	b.n	b8dc2 <__gethex+0x92>
   b8e00:	2d00      	cmp	r5, #0
   b8e02:	d1f7      	bne.n	b8df4 <__gethex+0xc4>
   b8e04:	7833      	ldrb	r3, [r6, #0]
   b8e06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8e0a:	2b50      	cmp	r3, #80	; 0x50
   b8e0c:	d13b      	bne.n	b8e86 <__gethex+0x156>
   b8e0e:	7873      	ldrb	r3, [r6, #1]
   b8e10:	2b2b      	cmp	r3, #43	; 0x2b
   b8e12:	d02c      	beq.n	b8e6e <__gethex+0x13e>
   b8e14:	2b2d      	cmp	r3, #45	; 0x2d
   b8e16:	d02e      	beq.n	b8e76 <__gethex+0x146>
   b8e18:	1c71      	adds	r1, r6, #1
   b8e1a:	f04f 0900 	mov.w	r9, #0
   b8e1e:	7808      	ldrb	r0, [r1, #0]
   b8e20:	f7ff ff70 	bl	b8d04 <__hexdig_fun>
   b8e24:	1e43      	subs	r3, r0, #1
   b8e26:	b2db      	uxtb	r3, r3
   b8e28:	2b18      	cmp	r3, #24
   b8e2a:	d82c      	bhi.n	b8e86 <__gethex+0x156>
   b8e2c:	f1a0 0210 	sub.w	r2, r0, #16
   b8e30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b8e34:	f7ff ff66 	bl	b8d04 <__hexdig_fun>
   b8e38:	1e43      	subs	r3, r0, #1
   b8e3a:	b2db      	uxtb	r3, r3
   b8e3c:	2b18      	cmp	r3, #24
   b8e3e:	d91d      	bls.n	b8e7c <__gethex+0x14c>
   b8e40:	f1b9 0f00 	cmp.w	r9, #0
   b8e44:	d000      	beq.n	b8e48 <__gethex+0x118>
   b8e46:	4252      	negs	r2, r2
   b8e48:	4415      	add	r5, r2
   b8e4a:	f8cb 1000 	str.w	r1, [fp]
   b8e4e:	b1e4      	cbz	r4, b8e8a <__gethex+0x15a>
   b8e50:	9b00      	ldr	r3, [sp, #0]
   b8e52:	2b00      	cmp	r3, #0
   b8e54:	bf14      	ite	ne
   b8e56:	2700      	movne	r7, #0
   b8e58:	2706      	moveq	r7, #6
   b8e5a:	4638      	mov	r0, r7
   b8e5c:	b009      	add	sp, #36	; 0x24
   b8e5e:	ecbd 8b02 	vpop	{d8}
   b8e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8e66:	463e      	mov	r6, r7
   b8e68:	4625      	mov	r5, r4
   b8e6a:	2401      	movs	r4, #1
   b8e6c:	e7ca      	b.n	b8e04 <__gethex+0xd4>
   b8e6e:	f04f 0900 	mov.w	r9, #0
   b8e72:	1cb1      	adds	r1, r6, #2
   b8e74:	e7d3      	b.n	b8e1e <__gethex+0xee>
   b8e76:	f04f 0901 	mov.w	r9, #1
   b8e7a:	e7fa      	b.n	b8e72 <__gethex+0x142>
   b8e7c:	230a      	movs	r3, #10
   b8e7e:	fb03 0202 	mla	r2, r3, r2, r0
   b8e82:	3a10      	subs	r2, #16
   b8e84:	e7d4      	b.n	b8e30 <__gethex+0x100>
   b8e86:	4631      	mov	r1, r6
   b8e88:	e7df      	b.n	b8e4a <__gethex+0x11a>
   b8e8a:	1bf3      	subs	r3, r6, r7
   b8e8c:	3b01      	subs	r3, #1
   b8e8e:	4621      	mov	r1, r4
   b8e90:	2b07      	cmp	r3, #7
   b8e92:	dc0b      	bgt.n	b8eac <__gethex+0x17c>
   b8e94:	ee18 0a10 	vmov	r0, s16
   b8e98:	f000 fa68 	bl	b936c <_Balloc>
   b8e9c:	4604      	mov	r4, r0
   b8e9e:	b940      	cbnz	r0, b8eb2 <__gethex+0x182>
   b8ea0:	4b5d      	ldr	r3, [pc, #372]	; (b9018 <__gethex+0x2e8>)
   b8ea2:	4602      	mov	r2, r0
   b8ea4:	21de      	movs	r1, #222	; 0xde
   b8ea6:	485d      	ldr	r0, [pc, #372]	; (b901c <__gethex+0x2ec>)
   b8ea8:	f7fd f83a 	bl	b5f20 <__assert_func>
   b8eac:	3101      	adds	r1, #1
   b8eae:	105b      	asrs	r3, r3, #1
   b8eb0:	e7ee      	b.n	b8e90 <__gethex+0x160>
   b8eb2:	f100 0914 	add.w	r9, r0, #20
   b8eb6:	f04f 0b00 	mov.w	fp, #0
   b8eba:	f1ca 0301 	rsb	r3, sl, #1
   b8ebe:	f8cd 9008 	str.w	r9, [sp, #8]
   b8ec2:	f8cd b000 	str.w	fp, [sp]
   b8ec6:	9306      	str	r3, [sp, #24]
   b8ec8:	42b7      	cmp	r7, r6
   b8eca:	d340      	bcc.n	b8f4e <__gethex+0x21e>
   b8ecc:	9802      	ldr	r0, [sp, #8]
   b8ece:	9b00      	ldr	r3, [sp, #0]
   b8ed0:	f840 3b04 	str.w	r3, [r0], #4
   b8ed4:	eba0 0009 	sub.w	r0, r0, r9
   b8ed8:	1080      	asrs	r0, r0, #2
   b8eda:	0146      	lsls	r6, r0, #5
   b8edc:	6120      	str	r0, [r4, #16]
   b8ede:	4618      	mov	r0, r3
   b8ee0:	f000 fb36 	bl	b9550 <__hi0bits>
   b8ee4:	1a30      	subs	r0, r6, r0
   b8ee6:	f8d8 6000 	ldr.w	r6, [r8]
   b8eea:	42b0      	cmp	r0, r6
   b8eec:	dd63      	ble.n	b8fb6 <__gethex+0x286>
   b8eee:	1b87      	subs	r7, r0, r6
   b8ef0:	4639      	mov	r1, r7
   b8ef2:	4620      	mov	r0, r4
   b8ef4:	f000 feda 	bl	b9cac <__any_on>
   b8ef8:	4682      	mov	sl, r0
   b8efa:	b1a8      	cbz	r0, b8f28 <__gethex+0x1f8>
   b8efc:	1e7b      	subs	r3, r7, #1
   b8efe:	1159      	asrs	r1, r3, #5
   b8f00:	f003 021f 	and.w	r2, r3, #31
   b8f04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b8f08:	f04f 0a01 	mov.w	sl, #1
   b8f0c:	fa0a f202 	lsl.w	r2, sl, r2
   b8f10:	420a      	tst	r2, r1
   b8f12:	d009      	beq.n	b8f28 <__gethex+0x1f8>
   b8f14:	4553      	cmp	r3, sl
   b8f16:	dd05      	ble.n	b8f24 <__gethex+0x1f4>
   b8f18:	1eb9      	subs	r1, r7, #2
   b8f1a:	4620      	mov	r0, r4
   b8f1c:	f000 fec6 	bl	b9cac <__any_on>
   b8f20:	2800      	cmp	r0, #0
   b8f22:	d145      	bne.n	b8fb0 <__gethex+0x280>
   b8f24:	f04f 0a02 	mov.w	sl, #2
   b8f28:	4639      	mov	r1, r7
   b8f2a:	4620      	mov	r0, r4
   b8f2c:	f7ff fe98 	bl	b8c60 <rshift>
   b8f30:	443d      	add	r5, r7
   b8f32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8f36:	42ab      	cmp	r3, r5
   b8f38:	da4c      	bge.n	b8fd4 <__gethex+0x2a4>
   b8f3a:	ee18 0a10 	vmov	r0, s16
   b8f3e:	4621      	mov	r1, r4
   b8f40:	f000 fa54 	bl	b93ec <_Bfree>
   b8f44:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8f46:	2300      	movs	r3, #0
   b8f48:	6013      	str	r3, [r2, #0]
   b8f4a:	27a3      	movs	r7, #163	; 0xa3
   b8f4c:	e785      	b.n	b8e5a <__gethex+0x12a>
   b8f4e:	1e73      	subs	r3, r6, #1
   b8f50:	9a05      	ldr	r2, [sp, #20]
   b8f52:	9303      	str	r3, [sp, #12]
   b8f54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b8f58:	4293      	cmp	r3, r2
   b8f5a:	d019      	beq.n	b8f90 <__gethex+0x260>
   b8f5c:	f1bb 0f20 	cmp.w	fp, #32
   b8f60:	d107      	bne.n	b8f72 <__gethex+0x242>
   b8f62:	9b02      	ldr	r3, [sp, #8]
   b8f64:	9a00      	ldr	r2, [sp, #0]
   b8f66:	f843 2b04 	str.w	r2, [r3], #4
   b8f6a:	9302      	str	r3, [sp, #8]
   b8f6c:	2300      	movs	r3, #0
   b8f6e:	9300      	str	r3, [sp, #0]
   b8f70:	469b      	mov	fp, r3
   b8f72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b8f76:	f7ff fec5 	bl	b8d04 <__hexdig_fun>
   b8f7a:	9b00      	ldr	r3, [sp, #0]
   b8f7c:	f000 000f 	and.w	r0, r0, #15
   b8f80:	fa00 f00b 	lsl.w	r0, r0, fp
   b8f84:	4303      	orrs	r3, r0
   b8f86:	9300      	str	r3, [sp, #0]
   b8f88:	f10b 0b04 	add.w	fp, fp, #4
   b8f8c:	9b03      	ldr	r3, [sp, #12]
   b8f8e:	e00d      	b.n	b8fac <__gethex+0x27c>
   b8f90:	9b03      	ldr	r3, [sp, #12]
   b8f92:	9a06      	ldr	r2, [sp, #24]
   b8f94:	4413      	add	r3, r2
   b8f96:	42bb      	cmp	r3, r7
   b8f98:	d3e0      	bcc.n	b8f5c <__gethex+0x22c>
   b8f9a:	4618      	mov	r0, r3
   b8f9c:	9901      	ldr	r1, [sp, #4]
   b8f9e:	9307      	str	r3, [sp, #28]
   b8fa0:	4652      	mov	r2, sl
   b8fa2:	f7fe fece 	bl	b7d42 <strncmp>
   b8fa6:	9b07      	ldr	r3, [sp, #28]
   b8fa8:	2800      	cmp	r0, #0
   b8faa:	d1d7      	bne.n	b8f5c <__gethex+0x22c>
   b8fac:	461e      	mov	r6, r3
   b8fae:	e78b      	b.n	b8ec8 <__gethex+0x198>
   b8fb0:	f04f 0a03 	mov.w	sl, #3
   b8fb4:	e7b8      	b.n	b8f28 <__gethex+0x1f8>
   b8fb6:	da0a      	bge.n	b8fce <__gethex+0x29e>
   b8fb8:	1a37      	subs	r7, r6, r0
   b8fba:	4621      	mov	r1, r4
   b8fbc:	ee18 0a10 	vmov	r0, s16
   b8fc0:	463a      	mov	r2, r7
   b8fc2:	f000 fc2f 	bl	b9824 <__lshift>
   b8fc6:	1bed      	subs	r5, r5, r7
   b8fc8:	4604      	mov	r4, r0
   b8fca:	f100 0914 	add.w	r9, r0, #20
   b8fce:	f04f 0a00 	mov.w	sl, #0
   b8fd2:	e7ae      	b.n	b8f32 <__gethex+0x202>
   b8fd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b8fd8:	42a8      	cmp	r0, r5
   b8fda:	dd72      	ble.n	b90c2 <__gethex+0x392>
   b8fdc:	1b45      	subs	r5, r0, r5
   b8fde:	42ae      	cmp	r6, r5
   b8fe0:	dc36      	bgt.n	b9050 <__gethex+0x320>
   b8fe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8fe6:	2b02      	cmp	r3, #2
   b8fe8:	d02a      	beq.n	b9040 <__gethex+0x310>
   b8fea:	2b03      	cmp	r3, #3
   b8fec:	d02c      	beq.n	b9048 <__gethex+0x318>
   b8fee:	2b01      	cmp	r3, #1
   b8ff0:	d11c      	bne.n	b902c <__gethex+0x2fc>
   b8ff2:	42ae      	cmp	r6, r5
   b8ff4:	d11a      	bne.n	b902c <__gethex+0x2fc>
   b8ff6:	2e01      	cmp	r6, #1
   b8ff8:	d112      	bne.n	b9020 <__gethex+0x2f0>
   b8ffa:	9a04      	ldr	r2, [sp, #16]
   b8ffc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b9000:	6013      	str	r3, [r2, #0]
   b9002:	2301      	movs	r3, #1
   b9004:	6123      	str	r3, [r4, #16]
   b9006:	f8c9 3000 	str.w	r3, [r9]
   b900a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b900c:	2762      	movs	r7, #98	; 0x62
   b900e:	601c      	str	r4, [r3, #0]
   b9010:	e723      	b.n	b8e5a <__gethex+0x12a>
   b9012:	bf00      	nop
   b9014:	000ba578 	.word	0x000ba578
   b9018:	000ba4e0 	.word	0x000ba4e0
   b901c:	000ba4f1 	.word	0x000ba4f1
   b9020:	1e71      	subs	r1, r6, #1
   b9022:	4620      	mov	r0, r4
   b9024:	f000 fe42 	bl	b9cac <__any_on>
   b9028:	2800      	cmp	r0, #0
   b902a:	d1e6      	bne.n	b8ffa <__gethex+0x2ca>
   b902c:	ee18 0a10 	vmov	r0, s16
   b9030:	4621      	mov	r1, r4
   b9032:	f000 f9db 	bl	b93ec <_Bfree>
   b9036:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9038:	2300      	movs	r3, #0
   b903a:	6013      	str	r3, [r2, #0]
   b903c:	2750      	movs	r7, #80	; 0x50
   b903e:	e70c      	b.n	b8e5a <__gethex+0x12a>
   b9040:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9042:	2b00      	cmp	r3, #0
   b9044:	d1f2      	bne.n	b902c <__gethex+0x2fc>
   b9046:	e7d8      	b.n	b8ffa <__gethex+0x2ca>
   b9048:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b904a:	2b00      	cmp	r3, #0
   b904c:	d1d5      	bne.n	b8ffa <__gethex+0x2ca>
   b904e:	e7ed      	b.n	b902c <__gethex+0x2fc>
   b9050:	1e6f      	subs	r7, r5, #1
   b9052:	f1ba 0f00 	cmp.w	sl, #0
   b9056:	d131      	bne.n	b90bc <__gethex+0x38c>
   b9058:	b127      	cbz	r7, b9064 <__gethex+0x334>
   b905a:	4639      	mov	r1, r7
   b905c:	4620      	mov	r0, r4
   b905e:	f000 fe25 	bl	b9cac <__any_on>
   b9062:	4682      	mov	sl, r0
   b9064:	117b      	asrs	r3, r7, #5
   b9066:	2101      	movs	r1, #1
   b9068:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b906c:	f007 071f 	and.w	r7, r7, #31
   b9070:	fa01 f707 	lsl.w	r7, r1, r7
   b9074:	421f      	tst	r7, r3
   b9076:	4629      	mov	r1, r5
   b9078:	4620      	mov	r0, r4
   b907a:	bf18      	it	ne
   b907c:	f04a 0a02 	orrne.w	sl, sl, #2
   b9080:	1b76      	subs	r6, r6, r5
   b9082:	f7ff fded 	bl	b8c60 <rshift>
   b9086:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b908a:	2702      	movs	r7, #2
   b908c:	f1ba 0f00 	cmp.w	sl, #0
   b9090:	d048      	beq.n	b9124 <__gethex+0x3f4>
   b9092:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b9096:	2b02      	cmp	r3, #2
   b9098:	d015      	beq.n	b90c6 <__gethex+0x396>
   b909a:	2b03      	cmp	r3, #3
   b909c:	d017      	beq.n	b90ce <__gethex+0x39e>
   b909e:	2b01      	cmp	r3, #1
   b90a0:	d109      	bne.n	b90b6 <__gethex+0x386>
   b90a2:	f01a 0f02 	tst.w	sl, #2
   b90a6:	d006      	beq.n	b90b6 <__gethex+0x386>
   b90a8:	f8d9 0000 	ldr.w	r0, [r9]
   b90ac:	ea4a 0a00 	orr.w	sl, sl, r0
   b90b0:	f01a 0f01 	tst.w	sl, #1
   b90b4:	d10e      	bne.n	b90d4 <__gethex+0x3a4>
   b90b6:	f047 0710 	orr.w	r7, r7, #16
   b90ba:	e033      	b.n	b9124 <__gethex+0x3f4>
   b90bc:	f04f 0a01 	mov.w	sl, #1
   b90c0:	e7d0      	b.n	b9064 <__gethex+0x334>
   b90c2:	2701      	movs	r7, #1
   b90c4:	e7e2      	b.n	b908c <__gethex+0x35c>
   b90c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b90c8:	f1c3 0301 	rsb	r3, r3, #1
   b90cc:	9315      	str	r3, [sp, #84]	; 0x54
   b90ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b90d0:	2b00      	cmp	r3, #0
   b90d2:	d0f0      	beq.n	b90b6 <__gethex+0x386>
   b90d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b90d8:	f104 0314 	add.w	r3, r4, #20
   b90dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b90e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b90e4:	f04f 0c00 	mov.w	ip, #0
   b90e8:	4618      	mov	r0, r3
   b90ea:	f853 2b04 	ldr.w	r2, [r3], #4
   b90ee:	f1b2 3fff 	cmp.w	r2, #4294967295
   b90f2:	d01c      	beq.n	b912e <__gethex+0x3fe>
   b90f4:	3201      	adds	r2, #1
   b90f6:	6002      	str	r2, [r0, #0]
   b90f8:	2f02      	cmp	r7, #2
   b90fa:	f104 0314 	add.w	r3, r4, #20
   b90fe:	d13f      	bne.n	b9180 <__gethex+0x450>
   b9100:	f8d8 2000 	ldr.w	r2, [r8]
   b9104:	3a01      	subs	r2, #1
   b9106:	42b2      	cmp	r2, r6
   b9108:	d10a      	bne.n	b9120 <__gethex+0x3f0>
   b910a:	1171      	asrs	r1, r6, #5
   b910c:	2201      	movs	r2, #1
   b910e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b9112:	f006 061f 	and.w	r6, r6, #31
   b9116:	fa02 f606 	lsl.w	r6, r2, r6
   b911a:	421e      	tst	r6, r3
   b911c:	bf18      	it	ne
   b911e:	4617      	movne	r7, r2
   b9120:	f047 0720 	orr.w	r7, r7, #32
   b9124:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9126:	601c      	str	r4, [r3, #0]
   b9128:	9b04      	ldr	r3, [sp, #16]
   b912a:	601d      	str	r5, [r3, #0]
   b912c:	e695      	b.n	b8e5a <__gethex+0x12a>
   b912e:	4299      	cmp	r1, r3
   b9130:	f843 cc04 	str.w	ip, [r3, #-4]
   b9134:	d8d8      	bhi.n	b90e8 <__gethex+0x3b8>
   b9136:	68a3      	ldr	r3, [r4, #8]
   b9138:	459b      	cmp	fp, r3
   b913a:	db19      	blt.n	b9170 <__gethex+0x440>
   b913c:	6861      	ldr	r1, [r4, #4]
   b913e:	ee18 0a10 	vmov	r0, s16
   b9142:	3101      	adds	r1, #1
   b9144:	f000 f912 	bl	b936c <_Balloc>
   b9148:	4681      	mov	r9, r0
   b914a:	b918      	cbnz	r0, b9154 <__gethex+0x424>
   b914c:	4b1a      	ldr	r3, [pc, #104]	; (b91b8 <__gethex+0x488>)
   b914e:	4602      	mov	r2, r0
   b9150:	2184      	movs	r1, #132	; 0x84
   b9152:	e6a8      	b.n	b8ea6 <__gethex+0x176>
   b9154:	6922      	ldr	r2, [r4, #16]
   b9156:	3202      	adds	r2, #2
   b9158:	f104 010c 	add.w	r1, r4, #12
   b915c:	0092      	lsls	r2, r2, #2
   b915e:	300c      	adds	r0, #12
   b9160:	f7fe fd75 	bl	b7c4e <memcpy>
   b9164:	4621      	mov	r1, r4
   b9166:	ee18 0a10 	vmov	r0, s16
   b916a:	f000 f93f 	bl	b93ec <_Bfree>
   b916e:	464c      	mov	r4, r9
   b9170:	6923      	ldr	r3, [r4, #16]
   b9172:	1c5a      	adds	r2, r3, #1
   b9174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9178:	6122      	str	r2, [r4, #16]
   b917a:	2201      	movs	r2, #1
   b917c:	615a      	str	r2, [r3, #20]
   b917e:	e7bb      	b.n	b90f8 <__gethex+0x3c8>
   b9180:	6922      	ldr	r2, [r4, #16]
   b9182:	455a      	cmp	r2, fp
   b9184:	dd0b      	ble.n	b919e <__gethex+0x46e>
   b9186:	2101      	movs	r1, #1
   b9188:	4620      	mov	r0, r4
   b918a:	f7ff fd69 	bl	b8c60 <rshift>
   b918e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9192:	3501      	adds	r5, #1
   b9194:	42ab      	cmp	r3, r5
   b9196:	f6ff aed0 	blt.w	b8f3a <__gethex+0x20a>
   b919a:	2701      	movs	r7, #1
   b919c:	e7c0      	b.n	b9120 <__gethex+0x3f0>
   b919e:	f016 061f 	ands.w	r6, r6, #31
   b91a2:	d0fa      	beq.n	b919a <__gethex+0x46a>
   b91a4:	4453      	add	r3, sl
   b91a6:	f1c6 0620 	rsb	r6, r6, #32
   b91aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b91ae:	f000 f9cf 	bl	b9550 <__hi0bits>
   b91b2:	42b0      	cmp	r0, r6
   b91b4:	dbe7      	blt.n	b9186 <__gethex+0x456>
   b91b6:	e7f0      	b.n	b919a <__gethex+0x46a>
   b91b8:	000ba4e0 	.word	0x000ba4e0

000b91bc <L_shift>:
   b91bc:	f1c2 0208 	rsb	r2, r2, #8
   b91c0:	0092      	lsls	r2, r2, #2
   b91c2:	b570      	push	{r4, r5, r6, lr}
   b91c4:	f1c2 0620 	rsb	r6, r2, #32
   b91c8:	6843      	ldr	r3, [r0, #4]
   b91ca:	6804      	ldr	r4, [r0, #0]
   b91cc:	fa03 f506 	lsl.w	r5, r3, r6
   b91d0:	432c      	orrs	r4, r5
   b91d2:	40d3      	lsrs	r3, r2
   b91d4:	6004      	str	r4, [r0, #0]
   b91d6:	f840 3f04 	str.w	r3, [r0, #4]!
   b91da:	4288      	cmp	r0, r1
   b91dc:	d3f4      	bcc.n	b91c8 <L_shift+0xc>
   b91de:	bd70      	pop	{r4, r5, r6, pc}

000b91e0 <__match>:
   b91e0:	b530      	push	{r4, r5, lr}
   b91e2:	6803      	ldr	r3, [r0, #0]
   b91e4:	3301      	adds	r3, #1
   b91e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b91ea:	b914      	cbnz	r4, b91f2 <__match+0x12>
   b91ec:	6003      	str	r3, [r0, #0]
   b91ee:	2001      	movs	r0, #1
   b91f0:	bd30      	pop	{r4, r5, pc}
   b91f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b91f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b91fa:	2d19      	cmp	r5, #25
   b91fc:	bf98      	it	ls
   b91fe:	3220      	addls	r2, #32
   b9200:	42a2      	cmp	r2, r4
   b9202:	d0f0      	beq.n	b91e6 <__match+0x6>
   b9204:	2000      	movs	r0, #0
   b9206:	e7f3      	b.n	b91f0 <__match+0x10>

000b9208 <__hexnan>:
   b9208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b920c:	680b      	ldr	r3, [r1, #0]
   b920e:	115e      	asrs	r6, r3, #5
   b9210:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b9214:	f013 031f 	ands.w	r3, r3, #31
   b9218:	b087      	sub	sp, #28
   b921a:	bf18      	it	ne
   b921c:	3604      	addne	r6, #4
   b921e:	2500      	movs	r5, #0
   b9220:	1f37      	subs	r7, r6, #4
   b9222:	4690      	mov	r8, r2
   b9224:	6802      	ldr	r2, [r0, #0]
   b9226:	9301      	str	r3, [sp, #4]
   b9228:	4682      	mov	sl, r0
   b922a:	f846 5c04 	str.w	r5, [r6, #-4]
   b922e:	46b9      	mov	r9, r7
   b9230:	463c      	mov	r4, r7
   b9232:	9502      	str	r5, [sp, #8]
   b9234:	46ab      	mov	fp, r5
   b9236:	7851      	ldrb	r1, [r2, #1]
   b9238:	1c53      	adds	r3, r2, #1
   b923a:	9303      	str	r3, [sp, #12]
   b923c:	b341      	cbz	r1, b9290 <__hexnan+0x88>
   b923e:	4608      	mov	r0, r1
   b9240:	9205      	str	r2, [sp, #20]
   b9242:	9104      	str	r1, [sp, #16]
   b9244:	f7ff fd5e 	bl	b8d04 <__hexdig_fun>
   b9248:	2800      	cmp	r0, #0
   b924a:	d14f      	bne.n	b92ec <__hexnan+0xe4>
   b924c:	9904      	ldr	r1, [sp, #16]
   b924e:	9a05      	ldr	r2, [sp, #20]
   b9250:	2920      	cmp	r1, #32
   b9252:	d818      	bhi.n	b9286 <__hexnan+0x7e>
   b9254:	9b02      	ldr	r3, [sp, #8]
   b9256:	459b      	cmp	fp, r3
   b9258:	dd13      	ble.n	b9282 <__hexnan+0x7a>
   b925a:	454c      	cmp	r4, r9
   b925c:	d206      	bcs.n	b926c <__hexnan+0x64>
   b925e:	2d07      	cmp	r5, #7
   b9260:	dc04      	bgt.n	b926c <__hexnan+0x64>
   b9262:	462a      	mov	r2, r5
   b9264:	4649      	mov	r1, r9
   b9266:	4620      	mov	r0, r4
   b9268:	f7ff ffa8 	bl	b91bc <L_shift>
   b926c:	4544      	cmp	r4, r8
   b926e:	d950      	bls.n	b9312 <__hexnan+0x10a>
   b9270:	2300      	movs	r3, #0
   b9272:	f1a4 0904 	sub.w	r9, r4, #4
   b9276:	f844 3c04 	str.w	r3, [r4, #-4]
   b927a:	f8cd b008 	str.w	fp, [sp, #8]
   b927e:	464c      	mov	r4, r9
   b9280:	461d      	mov	r5, r3
   b9282:	9a03      	ldr	r2, [sp, #12]
   b9284:	e7d7      	b.n	b9236 <__hexnan+0x2e>
   b9286:	2929      	cmp	r1, #41	; 0x29
   b9288:	d156      	bne.n	b9338 <__hexnan+0x130>
   b928a:	3202      	adds	r2, #2
   b928c:	f8ca 2000 	str.w	r2, [sl]
   b9290:	f1bb 0f00 	cmp.w	fp, #0
   b9294:	d050      	beq.n	b9338 <__hexnan+0x130>
   b9296:	454c      	cmp	r4, r9
   b9298:	d206      	bcs.n	b92a8 <__hexnan+0xa0>
   b929a:	2d07      	cmp	r5, #7
   b929c:	dc04      	bgt.n	b92a8 <__hexnan+0xa0>
   b929e:	462a      	mov	r2, r5
   b92a0:	4649      	mov	r1, r9
   b92a2:	4620      	mov	r0, r4
   b92a4:	f7ff ff8a 	bl	b91bc <L_shift>
   b92a8:	4544      	cmp	r4, r8
   b92aa:	d934      	bls.n	b9316 <__hexnan+0x10e>
   b92ac:	f1a8 0204 	sub.w	r2, r8, #4
   b92b0:	4623      	mov	r3, r4
   b92b2:	f853 1b04 	ldr.w	r1, [r3], #4
   b92b6:	f842 1f04 	str.w	r1, [r2, #4]!
   b92ba:	429f      	cmp	r7, r3
   b92bc:	d2f9      	bcs.n	b92b2 <__hexnan+0xaa>
   b92be:	1b3b      	subs	r3, r7, r4
   b92c0:	f023 0303 	bic.w	r3, r3, #3
   b92c4:	3304      	adds	r3, #4
   b92c6:	3401      	adds	r4, #1
   b92c8:	3e03      	subs	r6, #3
   b92ca:	42b4      	cmp	r4, r6
   b92cc:	bf88      	it	hi
   b92ce:	2304      	movhi	r3, #4
   b92d0:	4443      	add	r3, r8
   b92d2:	2200      	movs	r2, #0
   b92d4:	f843 2b04 	str.w	r2, [r3], #4
   b92d8:	429f      	cmp	r7, r3
   b92da:	d2fb      	bcs.n	b92d4 <__hexnan+0xcc>
   b92dc:	683b      	ldr	r3, [r7, #0]
   b92de:	b91b      	cbnz	r3, b92e8 <__hexnan+0xe0>
   b92e0:	4547      	cmp	r7, r8
   b92e2:	d127      	bne.n	b9334 <__hexnan+0x12c>
   b92e4:	2301      	movs	r3, #1
   b92e6:	603b      	str	r3, [r7, #0]
   b92e8:	2005      	movs	r0, #5
   b92ea:	e026      	b.n	b933a <__hexnan+0x132>
   b92ec:	3501      	adds	r5, #1
   b92ee:	2d08      	cmp	r5, #8
   b92f0:	f10b 0b01 	add.w	fp, fp, #1
   b92f4:	dd06      	ble.n	b9304 <__hexnan+0xfc>
   b92f6:	4544      	cmp	r4, r8
   b92f8:	d9c3      	bls.n	b9282 <__hexnan+0x7a>
   b92fa:	2300      	movs	r3, #0
   b92fc:	f844 3c04 	str.w	r3, [r4, #-4]
   b9300:	2501      	movs	r5, #1
   b9302:	3c04      	subs	r4, #4
   b9304:	6822      	ldr	r2, [r4, #0]
   b9306:	f000 000f 	and.w	r0, r0, #15
   b930a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b930e:	6022      	str	r2, [r4, #0]
   b9310:	e7b7      	b.n	b9282 <__hexnan+0x7a>
   b9312:	2508      	movs	r5, #8
   b9314:	e7b5      	b.n	b9282 <__hexnan+0x7a>
   b9316:	9b01      	ldr	r3, [sp, #4]
   b9318:	2b00      	cmp	r3, #0
   b931a:	d0df      	beq.n	b92dc <__hexnan+0xd4>
   b931c:	f04f 32ff 	mov.w	r2, #4294967295
   b9320:	f1c3 0320 	rsb	r3, r3, #32
   b9324:	fa22 f303 	lsr.w	r3, r2, r3
   b9328:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b932c:	401a      	ands	r2, r3
   b932e:	f846 2c04 	str.w	r2, [r6, #-4]
   b9332:	e7d3      	b.n	b92dc <__hexnan+0xd4>
   b9334:	3f04      	subs	r7, #4
   b9336:	e7d1      	b.n	b92dc <__hexnan+0xd4>
   b9338:	2004      	movs	r0, #4
   b933a:	b007      	add	sp, #28
   b933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9340 <__retarget_lock_acquire_recursive>:
   b9340:	4770      	bx	lr

000b9342 <__retarget_lock_release>:
   b9342:	4770      	bx	lr

000b9344 <__retarget_lock_release_recursive>:
   b9344:	4770      	bx	lr

000b9346 <__ascii_mbtowc>:
   b9346:	b082      	sub	sp, #8
   b9348:	b901      	cbnz	r1, b934c <__ascii_mbtowc+0x6>
   b934a:	a901      	add	r1, sp, #4
   b934c:	b142      	cbz	r2, b9360 <__ascii_mbtowc+0x1a>
   b934e:	b14b      	cbz	r3, b9364 <__ascii_mbtowc+0x1e>
   b9350:	7813      	ldrb	r3, [r2, #0]
   b9352:	600b      	str	r3, [r1, #0]
   b9354:	7812      	ldrb	r2, [r2, #0]
   b9356:	1e10      	subs	r0, r2, #0
   b9358:	bf18      	it	ne
   b935a:	2001      	movne	r0, #1
   b935c:	b002      	add	sp, #8
   b935e:	4770      	bx	lr
   b9360:	4610      	mov	r0, r2
   b9362:	e7fb      	b.n	b935c <__ascii_mbtowc+0x16>
   b9364:	f06f 0001 	mvn.w	r0, #1
   b9368:	e7f8      	b.n	b935c <__ascii_mbtowc+0x16>
	...

000b936c <_Balloc>:
   b936c:	b570      	push	{r4, r5, r6, lr}
   b936e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9370:	4604      	mov	r4, r0
   b9372:	460d      	mov	r5, r1
   b9374:	b976      	cbnz	r6, b9394 <_Balloc+0x28>
   b9376:	2010      	movs	r0, #16
   b9378:	f7fc fd8a 	bl	b5e90 <malloc>
   b937c:	4602      	mov	r2, r0
   b937e:	6260      	str	r0, [r4, #36]	; 0x24
   b9380:	b920      	cbnz	r0, b938c <_Balloc+0x20>
   b9382:	4b18      	ldr	r3, [pc, #96]	; (b93e4 <_Balloc+0x78>)
   b9384:	4818      	ldr	r0, [pc, #96]	; (b93e8 <_Balloc+0x7c>)
   b9386:	2166      	movs	r1, #102	; 0x66
   b9388:	f7fc fdca 	bl	b5f20 <__assert_func>
   b938c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9390:	6006      	str	r6, [r0, #0]
   b9392:	60c6      	str	r6, [r0, #12]
   b9394:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9396:	68f3      	ldr	r3, [r6, #12]
   b9398:	b183      	cbz	r3, b93bc <_Balloc+0x50>
   b939a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b939c:	68db      	ldr	r3, [r3, #12]
   b939e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b93a2:	b9b8      	cbnz	r0, b93d4 <_Balloc+0x68>
   b93a4:	2101      	movs	r1, #1
   b93a6:	fa01 f605 	lsl.w	r6, r1, r5
   b93aa:	1d72      	adds	r2, r6, #5
   b93ac:	0092      	lsls	r2, r2, #2
   b93ae:	4620      	mov	r0, r4
   b93b0:	f000 fc9d 	bl	b9cee <_calloc_r>
   b93b4:	b160      	cbz	r0, b93d0 <_Balloc+0x64>
   b93b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b93ba:	e00e      	b.n	b93da <_Balloc+0x6e>
   b93bc:	2221      	movs	r2, #33	; 0x21
   b93be:	2104      	movs	r1, #4
   b93c0:	4620      	mov	r0, r4
   b93c2:	f000 fc94 	bl	b9cee <_calloc_r>
   b93c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b93c8:	60f0      	str	r0, [r6, #12]
   b93ca:	68db      	ldr	r3, [r3, #12]
   b93cc:	2b00      	cmp	r3, #0
   b93ce:	d1e4      	bne.n	b939a <_Balloc+0x2e>
   b93d0:	2000      	movs	r0, #0
   b93d2:	bd70      	pop	{r4, r5, r6, pc}
   b93d4:	6802      	ldr	r2, [r0, #0]
   b93d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b93da:	2300      	movs	r3, #0
   b93dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b93e0:	e7f7      	b.n	b93d2 <_Balloc+0x66>
   b93e2:	bf00      	nop
   b93e4:	000ba269 	.word	0x000ba269
   b93e8:	000ba58c 	.word	0x000ba58c

000b93ec <_Bfree>:
   b93ec:	b570      	push	{r4, r5, r6, lr}
   b93ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b93f0:	4605      	mov	r5, r0
   b93f2:	460c      	mov	r4, r1
   b93f4:	b976      	cbnz	r6, b9414 <_Bfree+0x28>
   b93f6:	2010      	movs	r0, #16
   b93f8:	f7fc fd4a 	bl	b5e90 <malloc>
   b93fc:	4602      	mov	r2, r0
   b93fe:	6268      	str	r0, [r5, #36]	; 0x24
   b9400:	b920      	cbnz	r0, b940c <_Bfree+0x20>
   b9402:	4b09      	ldr	r3, [pc, #36]	; (b9428 <_Bfree+0x3c>)
   b9404:	4809      	ldr	r0, [pc, #36]	; (b942c <_Bfree+0x40>)
   b9406:	218a      	movs	r1, #138	; 0x8a
   b9408:	f7fc fd8a 	bl	b5f20 <__assert_func>
   b940c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9410:	6006      	str	r6, [r0, #0]
   b9412:	60c6      	str	r6, [r0, #12]
   b9414:	b13c      	cbz	r4, b9426 <_Bfree+0x3a>
   b9416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9418:	6862      	ldr	r2, [r4, #4]
   b941a:	68db      	ldr	r3, [r3, #12]
   b941c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9420:	6021      	str	r1, [r4, #0]
   b9422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9426:	bd70      	pop	{r4, r5, r6, pc}
   b9428:	000ba269 	.word	0x000ba269
   b942c:	000ba58c 	.word	0x000ba58c

000b9430 <__multadd>:
   b9430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9434:	690d      	ldr	r5, [r1, #16]
   b9436:	4607      	mov	r7, r0
   b9438:	460c      	mov	r4, r1
   b943a:	461e      	mov	r6, r3
   b943c:	f101 0c14 	add.w	ip, r1, #20
   b9440:	2000      	movs	r0, #0
   b9442:	f8dc 3000 	ldr.w	r3, [ip]
   b9446:	b299      	uxth	r1, r3
   b9448:	fb02 6101 	mla	r1, r2, r1, r6
   b944c:	0c1e      	lsrs	r6, r3, #16
   b944e:	0c0b      	lsrs	r3, r1, #16
   b9450:	fb02 3306 	mla	r3, r2, r6, r3
   b9454:	b289      	uxth	r1, r1
   b9456:	3001      	adds	r0, #1
   b9458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b945c:	4285      	cmp	r5, r0
   b945e:	f84c 1b04 	str.w	r1, [ip], #4
   b9462:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9466:	dcec      	bgt.n	b9442 <__multadd+0x12>
   b9468:	b30e      	cbz	r6, b94ae <__multadd+0x7e>
   b946a:	68a3      	ldr	r3, [r4, #8]
   b946c:	42ab      	cmp	r3, r5
   b946e:	dc19      	bgt.n	b94a4 <__multadd+0x74>
   b9470:	6861      	ldr	r1, [r4, #4]
   b9472:	4638      	mov	r0, r7
   b9474:	3101      	adds	r1, #1
   b9476:	f7ff ff79 	bl	b936c <_Balloc>
   b947a:	4680      	mov	r8, r0
   b947c:	b928      	cbnz	r0, b948a <__multadd+0x5a>
   b947e:	4602      	mov	r2, r0
   b9480:	4b0c      	ldr	r3, [pc, #48]	; (b94b4 <__multadd+0x84>)
   b9482:	480d      	ldr	r0, [pc, #52]	; (b94b8 <__multadd+0x88>)
   b9484:	21b5      	movs	r1, #181	; 0xb5
   b9486:	f7fc fd4b 	bl	b5f20 <__assert_func>
   b948a:	6922      	ldr	r2, [r4, #16]
   b948c:	3202      	adds	r2, #2
   b948e:	f104 010c 	add.w	r1, r4, #12
   b9492:	0092      	lsls	r2, r2, #2
   b9494:	300c      	adds	r0, #12
   b9496:	f7fe fbda 	bl	b7c4e <memcpy>
   b949a:	4621      	mov	r1, r4
   b949c:	4638      	mov	r0, r7
   b949e:	f7ff ffa5 	bl	b93ec <_Bfree>
   b94a2:	4644      	mov	r4, r8
   b94a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b94a8:	3501      	adds	r5, #1
   b94aa:	615e      	str	r6, [r3, #20]
   b94ac:	6125      	str	r5, [r4, #16]
   b94ae:	4620      	mov	r0, r4
   b94b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b94b4:	000ba4e0 	.word	0x000ba4e0
   b94b8:	000ba58c 	.word	0x000ba58c

000b94bc <__s2b>:
   b94bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b94c0:	460c      	mov	r4, r1
   b94c2:	4615      	mov	r5, r2
   b94c4:	461f      	mov	r7, r3
   b94c6:	2209      	movs	r2, #9
   b94c8:	3308      	adds	r3, #8
   b94ca:	4606      	mov	r6, r0
   b94cc:	fb93 f3f2 	sdiv	r3, r3, r2
   b94d0:	2100      	movs	r1, #0
   b94d2:	2201      	movs	r2, #1
   b94d4:	429a      	cmp	r2, r3
   b94d6:	db09      	blt.n	b94ec <__s2b+0x30>
   b94d8:	4630      	mov	r0, r6
   b94da:	f7ff ff47 	bl	b936c <_Balloc>
   b94de:	b940      	cbnz	r0, b94f2 <__s2b+0x36>
   b94e0:	4602      	mov	r2, r0
   b94e2:	4b19      	ldr	r3, [pc, #100]	; (b9548 <__s2b+0x8c>)
   b94e4:	4819      	ldr	r0, [pc, #100]	; (b954c <__s2b+0x90>)
   b94e6:	21ce      	movs	r1, #206	; 0xce
   b94e8:	f7fc fd1a 	bl	b5f20 <__assert_func>
   b94ec:	0052      	lsls	r2, r2, #1
   b94ee:	3101      	adds	r1, #1
   b94f0:	e7f0      	b.n	b94d4 <__s2b+0x18>
   b94f2:	9b08      	ldr	r3, [sp, #32]
   b94f4:	6143      	str	r3, [r0, #20]
   b94f6:	2d09      	cmp	r5, #9
   b94f8:	f04f 0301 	mov.w	r3, #1
   b94fc:	6103      	str	r3, [r0, #16]
   b94fe:	dd16      	ble.n	b952e <__s2b+0x72>
   b9500:	f104 0909 	add.w	r9, r4, #9
   b9504:	46c8      	mov	r8, r9
   b9506:	442c      	add	r4, r5
   b9508:	f818 3b01 	ldrb.w	r3, [r8], #1
   b950c:	4601      	mov	r1, r0
   b950e:	3b30      	subs	r3, #48	; 0x30
   b9510:	220a      	movs	r2, #10
   b9512:	4630      	mov	r0, r6
   b9514:	f7ff ff8c 	bl	b9430 <__multadd>
   b9518:	45a0      	cmp	r8, r4
   b951a:	d1f5      	bne.n	b9508 <__s2b+0x4c>
   b951c:	f1a5 0408 	sub.w	r4, r5, #8
   b9520:	444c      	add	r4, r9
   b9522:	1b2d      	subs	r5, r5, r4
   b9524:	1963      	adds	r3, r4, r5
   b9526:	42bb      	cmp	r3, r7
   b9528:	db04      	blt.n	b9534 <__s2b+0x78>
   b952a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b952e:	340a      	adds	r4, #10
   b9530:	2509      	movs	r5, #9
   b9532:	e7f6      	b.n	b9522 <__s2b+0x66>
   b9534:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9538:	4601      	mov	r1, r0
   b953a:	3b30      	subs	r3, #48	; 0x30
   b953c:	220a      	movs	r2, #10
   b953e:	4630      	mov	r0, r6
   b9540:	f7ff ff76 	bl	b9430 <__multadd>
   b9544:	e7ee      	b.n	b9524 <__s2b+0x68>
   b9546:	bf00      	nop
   b9548:	000ba4e0 	.word	0x000ba4e0
   b954c:	000ba58c 	.word	0x000ba58c

000b9550 <__hi0bits>:
   b9550:	0c03      	lsrs	r3, r0, #16
   b9552:	041b      	lsls	r3, r3, #16
   b9554:	b9d3      	cbnz	r3, b958c <__hi0bits+0x3c>
   b9556:	0400      	lsls	r0, r0, #16
   b9558:	2310      	movs	r3, #16
   b955a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b955e:	bf04      	itt	eq
   b9560:	0200      	lsleq	r0, r0, #8
   b9562:	3308      	addeq	r3, #8
   b9564:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9568:	bf04      	itt	eq
   b956a:	0100      	lsleq	r0, r0, #4
   b956c:	3304      	addeq	r3, #4
   b956e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9572:	bf04      	itt	eq
   b9574:	0080      	lsleq	r0, r0, #2
   b9576:	3302      	addeq	r3, #2
   b9578:	2800      	cmp	r0, #0
   b957a:	db05      	blt.n	b9588 <__hi0bits+0x38>
   b957c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9580:	f103 0301 	add.w	r3, r3, #1
   b9584:	bf08      	it	eq
   b9586:	2320      	moveq	r3, #32
   b9588:	4618      	mov	r0, r3
   b958a:	4770      	bx	lr
   b958c:	2300      	movs	r3, #0
   b958e:	e7e4      	b.n	b955a <__hi0bits+0xa>

000b9590 <__lo0bits>:
   b9590:	6803      	ldr	r3, [r0, #0]
   b9592:	f013 0207 	ands.w	r2, r3, #7
   b9596:	4601      	mov	r1, r0
   b9598:	d00b      	beq.n	b95b2 <__lo0bits+0x22>
   b959a:	07da      	lsls	r2, r3, #31
   b959c:	d423      	bmi.n	b95e6 <__lo0bits+0x56>
   b959e:	0798      	lsls	r0, r3, #30
   b95a0:	bf49      	itett	mi
   b95a2:	085b      	lsrmi	r3, r3, #1
   b95a4:	089b      	lsrpl	r3, r3, #2
   b95a6:	2001      	movmi	r0, #1
   b95a8:	600b      	strmi	r3, [r1, #0]
   b95aa:	bf5c      	itt	pl
   b95ac:	600b      	strpl	r3, [r1, #0]
   b95ae:	2002      	movpl	r0, #2
   b95b0:	4770      	bx	lr
   b95b2:	b298      	uxth	r0, r3
   b95b4:	b9a8      	cbnz	r0, b95e2 <__lo0bits+0x52>
   b95b6:	0c1b      	lsrs	r3, r3, #16
   b95b8:	2010      	movs	r0, #16
   b95ba:	b2da      	uxtb	r2, r3
   b95bc:	b90a      	cbnz	r2, b95c2 <__lo0bits+0x32>
   b95be:	3008      	adds	r0, #8
   b95c0:	0a1b      	lsrs	r3, r3, #8
   b95c2:	071a      	lsls	r2, r3, #28
   b95c4:	bf04      	itt	eq
   b95c6:	091b      	lsreq	r3, r3, #4
   b95c8:	3004      	addeq	r0, #4
   b95ca:	079a      	lsls	r2, r3, #30
   b95cc:	bf04      	itt	eq
   b95ce:	089b      	lsreq	r3, r3, #2
   b95d0:	3002      	addeq	r0, #2
   b95d2:	07da      	lsls	r2, r3, #31
   b95d4:	d403      	bmi.n	b95de <__lo0bits+0x4e>
   b95d6:	085b      	lsrs	r3, r3, #1
   b95d8:	f100 0001 	add.w	r0, r0, #1
   b95dc:	d005      	beq.n	b95ea <__lo0bits+0x5a>
   b95de:	600b      	str	r3, [r1, #0]
   b95e0:	4770      	bx	lr
   b95e2:	4610      	mov	r0, r2
   b95e4:	e7e9      	b.n	b95ba <__lo0bits+0x2a>
   b95e6:	2000      	movs	r0, #0
   b95e8:	4770      	bx	lr
   b95ea:	2020      	movs	r0, #32
   b95ec:	4770      	bx	lr
	...

000b95f0 <__i2b>:
   b95f0:	b510      	push	{r4, lr}
   b95f2:	460c      	mov	r4, r1
   b95f4:	2101      	movs	r1, #1
   b95f6:	f7ff feb9 	bl	b936c <_Balloc>
   b95fa:	4602      	mov	r2, r0
   b95fc:	b928      	cbnz	r0, b960a <__i2b+0x1a>
   b95fe:	4b05      	ldr	r3, [pc, #20]	; (b9614 <__i2b+0x24>)
   b9600:	4805      	ldr	r0, [pc, #20]	; (b9618 <__i2b+0x28>)
   b9602:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9606:	f7fc fc8b 	bl	b5f20 <__assert_func>
   b960a:	2301      	movs	r3, #1
   b960c:	6144      	str	r4, [r0, #20]
   b960e:	6103      	str	r3, [r0, #16]
   b9610:	bd10      	pop	{r4, pc}
   b9612:	bf00      	nop
   b9614:	000ba4e0 	.word	0x000ba4e0
   b9618:	000ba58c 	.word	0x000ba58c

000b961c <__multiply>:
   b961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9620:	4691      	mov	r9, r2
   b9622:	690a      	ldr	r2, [r1, #16]
   b9624:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9628:	429a      	cmp	r2, r3
   b962a:	bfb8      	it	lt
   b962c:	460b      	movlt	r3, r1
   b962e:	460c      	mov	r4, r1
   b9630:	bfbc      	itt	lt
   b9632:	464c      	movlt	r4, r9
   b9634:	4699      	movlt	r9, r3
   b9636:	6927      	ldr	r7, [r4, #16]
   b9638:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b963c:	68a3      	ldr	r3, [r4, #8]
   b963e:	6861      	ldr	r1, [r4, #4]
   b9640:	eb07 060a 	add.w	r6, r7, sl
   b9644:	42b3      	cmp	r3, r6
   b9646:	b085      	sub	sp, #20
   b9648:	bfb8      	it	lt
   b964a:	3101      	addlt	r1, #1
   b964c:	f7ff fe8e 	bl	b936c <_Balloc>
   b9650:	b930      	cbnz	r0, b9660 <__multiply+0x44>
   b9652:	4602      	mov	r2, r0
   b9654:	4b44      	ldr	r3, [pc, #272]	; (b9768 <__multiply+0x14c>)
   b9656:	4845      	ldr	r0, [pc, #276]	; (b976c <__multiply+0x150>)
   b9658:	f240 115d 	movw	r1, #349	; 0x15d
   b965c:	f7fc fc60 	bl	b5f20 <__assert_func>
   b9660:	f100 0514 	add.w	r5, r0, #20
   b9664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9668:	462b      	mov	r3, r5
   b966a:	2200      	movs	r2, #0
   b966c:	4543      	cmp	r3, r8
   b966e:	d321      	bcc.n	b96b4 <__multiply+0x98>
   b9670:	f104 0314 	add.w	r3, r4, #20
   b9674:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9678:	f109 0314 	add.w	r3, r9, #20
   b967c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9680:	9202      	str	r2, [sp, #8]
   b9682:	1b3a      	subs	r2, r7, r4
   b9684:	3a15      	subs	r2, #21
   b9686:	f022 0203 	bic.w	r2, r2, #3
   b968a:	3204      	adds	r2, #4
   b968c:	f104 0115 	add.w	r1, r4, #21
   b9690:	428f      	cmp	r7, r1
   b9692:	bf38      	it	cc
   b9694:	2204      	movcc	r2, #4
   b9696:	9201      	str	r2, [sp, #4]
   b9698:	9a02      	ldr	r2, [sp, #8]
   b969a:	9303      	str	r3, [sp, #12]
   b969c:	429a      	cmp	r2, r3
   b969e:	d80c      	bhi.n	b96ba <__multiply+0x9e>
   b96a0:	2e00      	cmp	r6, #0
   b96a2:	dd03      	ble.n	b96ac <__multiply+0x90>
   b96a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b96a8:	2b00      	cmp	r3, #0
   b96aa:	d05a      	beq.n	b9762 <__multiply+0x146>
   b96ac:	6106      	str	r6, [r0, #16]
   b96ae:	b005      	add	sp, #20
   b96b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b96b4:	f843 2b04 	str.w	r2, [r3], #4
   b96b8:	e7d8      	b.n	b966c <__multiply+0x50>
   b96ba:	f8b3 a000 	ldrh.w	sl, [r3]
   b96be:	f1ba 0f00 	cmp.w	sl, #0
   b96c2:	d024      	beq.n	b970e <__multiply+0xf2>
   b96c4:	f104 0e14 	add.w	lr, r4, #20
   b96c8:	46a9      	mov	r9, r5
   b96ca:	f04f 0c00 	mov.w	ip, #0
   b96ce:	f85e 2b04 	ldr.w	r2, [lr], #4
   b96d2:	f8d9 1000 	ldr.w	r1, [r9]
   b96d6:	fa1f fb82 	uxth.w	fp, r2
   b96da:	b289      	uxth	r1, r1
   b96dc:	fb0a 110b 	mla	r1, sl, fp, r1
   b96e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b96e4:	f8d9 2000 	ldr.w	r2, [r9]
   b96e8:	4461      	add	r1, ip
   b96ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b96ee:	fb0a c20b 	mla	r2, sl, fp, ip
   b96f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b96f6:	b289      	uxth	r1, r1
   b96f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b96fc:	4577      	cmp	r7, lr
   b96fe:	f849 1b04 	str.w	r1, [r9], #4
   b9702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9706:	d8e2      	bhi.n	b96ce <__multiply+0xb2>
   b9708:	9a01      	ldr	r2, [sp, #4]
   b970a:	f845 c002 	str.w	ip, [r5, r2]
   b970e:	9a03      	ldr	r2, [sp, #12]
   b9710:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9714:	3304      	adds	r3, #4
   b9716:	f1b9 0f00 	cmp.w	r9, #0
   b971a:	d020      	beq.n	b975e <__multiply+0x142>
   b971c:	6829      	ldr	r1, [r5, #0]
   b971e:	f104 0c14 	add.w	ip, r4, #20
   b9722:	46ae      	mov	lr, r5
   b9724:	f04f 0a00 	mov.w	sl, #0
   b9728:	f8bc b000 	ldrh.w	fp, [ip]
   b972c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9730:	fb09 220b 	mla	r2, r9, fp, r2
   b9734:	4492      	add	sl, r2
   b9736:	b289      	uxth	r1, r1
   b9738:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b973c:	f84e 1b04 	str.w	r1, [lr], #4
   b9740:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9744:	f8be 1000 	ldrh.w	r1, [lr]
   b9748:	0c12      	lsrs	r2, r2, #16
   b974a:	fb09 1102 	mla	r1, r9, r2, r1
   b974e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9752:	4567      	cmp	r7, ip
   b9754:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9758:	d8e6      	bhi.n	b9728 <__multiply+0x10c>
   b975a:	9a01      	ldr	r2, [sp, #4]
   b975c:	50a9      	str	r1, [r5, r2]
   b975e:	3504      	adds	r5, #4
   b9760:	e79a      	b.n	b9698 <__multiply+0x7c>
   b9762:	3e01      	subs	r6, #1
   b9764:	e79c      	b.n	b96a0 <__multiply+0x84>
   b9766:	bf00      	nop
   b9768:	000ba4e0 	.word	0x000ba4e0
   b976c:	000ba58c 	.word	0x000ba58c

000b9770 <__pow5mult>:
   b9770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9774:	4615      	mov	r5, r2
   b9776:	f012 0203 	ands.w	r2, r2, #3
   b977a:	4606      	mov	r6, r0
   b977c:	460f      	mov	r7, r1
   b977e:	d007      	beq.n	b9790 <__pow5mult+0x20>
   b9780:	4c25      	ldr	r4, [pc, #148]	; (b9818 <__pow5mult+0xa8>)
   b9782:	3a01      	subs	r2, #1
   b9784:	2300      	movs	r3, #0
   b9786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b978a:	f7ff fe51 	bl	b9430 <__multadd>
   b978e:	4607      	mov	r7, r0
   b9790:	10ad      	asrs	r5, r5, #2
   b9792:	d03d      	beq.n	b9810 <__pow5mult+0xa0>
   b9794:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9796:	b97c      	cbnz	r4, b97b8 <__pow5mult+0x48>
   b9798:	2010      	movs	r0, #16
   b979a:	f7fc fb79 	bl	b5e90 <malloc>
   b979e:	4602      	mov	r2, r0
   b97a0:	6270      	str	r0, [r6, #36]	; 0x24
   b97a2:	b928      	cbnz	r0, b97b0 <__pow5mult+0x40>
   b97a4:	4b1d      	ldr	r3, [pc, #116]	; (b981c <__pow5mult+0xac>)
   b97a6:	481e      	ldr	r0, [pc, #120]	; (b9820 <__pow5mult+0xb0>)
   b97a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b97ac:	f7fc fbb8 	bl	b5f20 <__assert_func>
   b97b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b97b4:	6004      	str	r4, [r0, #0]
   b97b6:	60c4      	str	r4, [r0, #12]
   b97b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b97bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b97c0:	b94c      	cbnz	r4, b97d6 <__pow5mult+0x66>
   b97c2:	f240 2171 	movw	r1, #625	; 0x271
   b97c6:	4630      	mov	r0, r6
   b97c8:	f7ff ff12 	bl	b95f0 <__i2b>
   b97cc:	2300      	movs	r3, #0
   b97ce:	f8c8 0008 	str.w	r0, [r8, #8]
   b97d2:	4604      	mov	r4, r0
   b97d4:	6003      	str	r3, [r0, #0]
   b97d6:	f04f 0900 	mov.w	r9, #0
   b97da:	07eb      	lsls	r3, r5, #31
   b97dc:	d50a      	bpl.n	b97f4 <__pow5mult+0x84>
   b97de:	4639      	mov	r1, r7
   b97e0:	4622      	mov	r2, r4
   b97e2:	4630      	mov	r0, r6
   b97e4:	f7ff ff1a 	bl	b961c <__multiply>
   b97e8:	4639      	mov	r1, r7
   b97ea:	4680      	mov	r8, r0
   b97ec:	4630      	mov	r0, r6
   b97ee:	f7ff fdfd 	bl	b93ec <_Bfree>
   b97f2:	4647      	mov	r7, r8
   b97f4:	106d      	asrs	r5, r5, #1
   b97f6:	d00b      	beq.n	b9810 <__pow5mult+0xa0>
   b97f8:	6820      	ldr	r0, [r4, #0]
   b97fa:	b938      	cbnz	r0, b980c <__pow5mult+0x9c>
   b97fc:	4622      	mov	r2, r4
   b97fe:	4621      	mov	r1, r4
   b9800:	4630      	mov	r0, r6
   b9802:	f7ff ff0b 	bl	b961c <__multiply>
   b9806:	6020      	str	r0, [r4, #0]
   b9808:	f8c0 9000 	str.w	r9, [r0]
   b980c:	4604      	mov	r4, r0
   b980e:	e7e4      	b.n	b97da <__pow5mult+0x6a>
   b9810:	4638      	mov	r0, r7
   b9812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9816:	bf00      	nop
   b9818:	000ba700 	.word	0x000ba700
   b981c:	000ba269 	.word	0x000ba269
   b9820:	000ba58c 	.word	0x000ba58c

000b9824 <__lshift>:
   b9824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9828:	460c      	mov	r4, r1
   b982a:	6849      	ldr	r1, [r1, #4]
   b982c:	6923      	ldr	r3, [r4, #16]
   b982e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9832:	68a3      	ldr	r3, [r4, #8]
   b9834:	4607      	mov	r7, r0
   b9836:	4691      	mov	r9, r2
   b9838:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b983c:	f108 0601 	add.w	r6, r8, #1
   b9840:	42b3      	cmp	r3, r6
   b9842:	db0b      	blt.n	b985c <__lshift+0x38>
   b9844:	4638      	mov	r0, r7
   b9846:	f7ff fd91 	bl	b936c <_Balloc>
   b984a:	4605      	mov	r5, r0
   b984c:	b948      	cbnz	r0, b9862 <__lshift+0x3e>
   b984e:	4602      	mov	r2, r0
   b9850:	4b2a      	ldr	r3, [pc, #168]	; (b98fc <__lshift+0xd8>)
   b9852:	482b      	ldr	r0, [pc, #172]	; (b9900 <__lshift+0xdc>)
   b9854:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9858:	f7fc fb62 	bl	b5f20 <__assert_func>
   b985c:	3101      	adds	r1, #1
   b985e:	005b      	lsls	r3, r3, #1
   b9860:	e7ee      	b.n	b9840 <__lshift+0x1c>
   b9862:	2300      	movs	r3, #0
   b9864:	f100 0114 	add.w	r1, r0, #20
   b9868:	f100 0210 	add.w	r2, r0, #16
   b986c:	4618      	mov	r0, r3
   b986e:	4553      	cmp	r3, sl
   b9870:	db37      	blt.n	b98e2 <__lshift+0xbe>
   b9872:	6920      	ldr	r0, [r4, #16]
   b9874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9878:	f104 0314 	add.w	r3, r4, #20
   b987c:	f019 091f 	ands.w	r9, r9, #31
   b9880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9888:	d02f      	beq.n	b98ea <__lshift+0xc6>
   b988a:	f1c9 0e20 	rsb	lr, r9, #32
   b988e:	468a      	mov	sl, r1
   b9890:	f04f 0c00 	mov.w	ip, #0
   b9894:	681a      	ldr	r2, [r3, #0]
   b9896:	fa02 f209 	lsl.w	r2, r2, r9
   b989a:	ea42 020c 	orr.w	r2, r2, ip
   b989e:	f84a 2b04 	str.w	r2, [sl], #4
   b98a2:	f853 2b04 	ldr.w	r2, [r3], #4
   b98a6:	4298      	cmp	r0, r3
   b98a8:	fa22 fc0e 	lsr.w	ip, r2, lr
   b98ac:	d8f2      	bhi.n	b9894 <__lshift+0x70>
   b98ae:	1b03      	subs	r3, r0, r4
   b98b0:	3b15      	subs	r3, #21
   b98b2:	f023 0303 	bic.w	r3, r3, #3
   b98b6:	3304      	adds	r3, #4
   b98b8:	f104 0215 	add.w	r2, r4, #21
   b98bc:	4290      	cmp	r0, r2
   b98be:	bf38      	it	cc
   b98c0:	2304      	movcc	r3, #4
   b98c2:	f841 c003 	str.w	ip, [r1, r3]
   b98c6:	f1bc 0f00 	cmp.w	ip, #0
   b98ca:	d001      	beq.n	b98d0 <__lshift+0xac>
   b98cc:	f108 0602 	add.w	r6, r8, #2
   b98d0:	3e01      	subs	r6, #1
   b98d2:	4638      	mov	r0, r7
   b98d4:	612e      	str	r6, [r5, #16]
   b98d6:	4621      	mov	r1, r4
   b98d8:	f7ff fd88 	bl	b93ec <_Bfree>
   b98dc:	4628      	mov	r0, r5
   b98de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b98e2:	f842 0f04 	str.w	r0, [r2, #4]!
   b98e6:	3301      	adds	r3, #1
   b98e8:	e7c1      	b.n	b986e <__lshift+0x4a>
   b98ea:	3904      	subs	r1, #4
   b98ec:	f853 2b04 	ldr.w	r2, [r3], #4
   b98f0:	f841 2f04 	str.w	r2, [r1, #4]!
   b98f4:	4298      	cmp	r0, r3
   b98f6:	d8f9      	bhi.n	b98ec <__lshift+0xc8>
   b98f8:	e7ea      	b.n	b98d0 <__lshift+0xac>
   b98fa:	bf00      	nop
   b98fc:	000ba4e0 	.word	0x000ba4e0
   b9900:	000ba58c 	.word	0x000ba58c

000b9904 <__mcmp>:
   b9904:	b530      	push	{r4, r5, lr}
   b9906:	6902      	ldr	r2, [r0, #16]
   b9908:	690c      	ldr	r4, [r1, #16]
   b990a:	1b12      	subs	r2, r2, r4
   b990c:	d10e      	bne.n	b992c <__mcmp+0x28>
   b990e:	f100 0314 	add.w	r3, r0, #20
   b9912:	3114      	adds	r1, #20
   b9914:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9918:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b991c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9920:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9924:	42a5      	cmp	r5, r4
   b9926:	d003      	beq.n	b9930 <__mcmp+0x2c>
   b9928:	d305      	bcc.n	b9936 <__mcmp+0x32>
   b992a:	2201      	movs	r2, #1
   b992c:	4610      	mov	r0, r2
   b992e:	bd30      	pop	{r4, r5, pc}
   b9930:	4283      	cmp	r3, r0
   b9932:	d3f3      	bcc.n	b991c <__mcmp+0x18>
   b9934:	e7fa      	b.n	b992c <__mcmp+0x28>
   b9936:	f04f 32ff 	mov.w	r2, #4294967295
   b993a:	e7f7      	b.n	b992c <__mcmp+0x28>

000b993c <__mdiff>:
   b993c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9940:	460c      	mov	r4, r1
   b9942:	4606      	mov	r6, r0
   b9944:	4611      	mov	r1, r2
   b9946:	4620      	mov	r0, r4
   b9948:	4690      	mov	r8, r2
   b994a:	f7ff ffdb 	bl	b9904 <__mcmp>
   b994e:	1e05      	subs	r5, r0, #0
   b9950:	d110      	bne.n	b9974 <__mdiff+0x38>
   b9952:	4629      	mov	r1, r5
   b9954:	4630      	mov	r0, r6
   b9956:	f7ff fd09 	bl	b936c <_Balloc>
   b995a:	b930      	cbnz	r0, b996a <__mdiff+0x2e>
   b995c:	4b3a      	ldr	r3, [pc, #232]	; (b9a48 <__mdiff+0x10c>)
   b995e:	4602      	mov	r2, r0
   b9960:	f240 2132 	movw	r1, #562	; 0x232
   b9964:	4839      	ldr	r0, [pc, #228]	; (b9a4c <__mdiff+0x110>)
   b9966:	f7fc fadb 	bl	b5f20 <__assert_func>
   b996a:	2301      	movs	r3, #1
   b996c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9974:	bfa4      	itt	ge
   b9976:	4643      	movge	r3, r8
   b9978:	46a0      	movge	r8, r4
   b997a:	4630      	mov	r0, r6
   b997c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9980:	bfa6      	itte	ge
   b9982:	461c      	movge	r4, r3
   b9984:	2500      	movge	r5, #0
   b9986:	2501      	movlt	r5, #1
   b9988:	f7ff fcf0 	bl	b936c <_Balloc>
   b998c:	b920      	cbnz	r0, b9998 <__mdiff+0x5c>
   b998e:	4b2e      	ldr	r3, [pc, #184]	; (b9a48 <__mdiff+0x10c>)
   b9990:	4602      	mov	r2, r0
   b9992:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9996:	e7e5      	b.n	b9964 <__mdiff+0x28>
   b9998:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b999c:	6926      	ldr	r6, [r4, #16]
   b999e:	60c5      	str	r5, [r0, #12]
   b99a0:	f104 0914 	add.w	r9, r4, #20
   b99a4:	f108 0514 	add.w	r5, r8, #20
   b99a8:	f100 0e14 	add.w	lr, r0, #20
   b99ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b99b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b99b4:	f108 0210 	add.w	r2, r8, #16
   b99b8:	46f2      	mov	sl, lr
   b99ba:	2100      	movs	r1, #0
   b99bc:	f859 3b04 	ldr.w	r3, [r9], #4
   b99c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b99c4:	fa1f f883 	uxth.w	r8, r3
   b99c8:	fa11 f18b 	uxtah	r1, r1, fp
   b99cc:	0c1b      	lsrs	r3, r3, #16
   b99ce:	eba1 0808 	sub.w	r8, r1, r8
   b99d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b99d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b99da:	fa1f f888 	uxth.w	r8, r8
   b99de:	1419      	asrs	r1, r3, #16
   b99e0:	454e      	cmp	r6, r9
   b99e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b99e6:	f84a 3b04 	str.w	r3, [sl], #4
   b99ea:	d8e7      	bhi.n	b99bc <__mdiff+0x80>
   b99ec:	1b33      	subs	r3, r6, r4
   b99ee:	3b15      	subs	r3, #21
   b99f0:	f023 0303 	bic.w	r3, r3, #3
   b99f4:	3304      	adds	r3, #4
   b99f6:	3415      	adds	r4, #21
   b99f8:	42a6      	cmp	r6, r4
   b99fa:	bf38      	it	cc
   b99fc:	2304      	movcc	r3, #4
   b99fe:	441d      	add	r5, r3
   b9a00:	4473      	add	r3, lr
   b9a02:	469e      	mov	lr, r3
   b9a04:	462e      	mov	r6, r5
   b9a06:	4566      	cmp	r6, ip
   b9a08:	d30e      	bcc.n	b9a28 <__mdiff+0xec>
   b9a0a:	f10c 0203 	add.w	r2, ip, #3
   b9a0e:	1b52      	subs	r2, r2, r5
   b9a10:	f022 0203 	bic.w	r2, r2, #3
   b9a14:	3d03      	subs	r5, #3
   b9a16:	45ac      	cmp	ip, r5
   b9a18:	bf38      	it	cc
   b9a1a:	2200      	movcc	r2, #0
   b9a1c:	441a      	add	r2, r3
   b9a1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b9a22:	b17b      	cbz	r3, b9a44 <__mdiff+0x108>
   b9a24:	6107      	str	r7, [r0, #16]
   b9a26:	e7a3      	b.n	b9970 <__mdiff+0x34>
   b9a28:	f856 8b04 	ldr.w	r8, [r6], #4
   b9a2c:	fa11 f288 	uxtah	r2, r1, r8
   b9a30:	1414      	asrs	r4, r2, #16
   b9a32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b9a36:	b292      	uxth	r2, r2
   b9a38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b9a3c:	f84e 2b04 	str.w	r2, [lr], #4
   b9a40:	1421      	asrs	r1, r4, #16
   b9a42:	e7e0      	b.n	b9a06 <__mdiff+0xca>
   b9a44:	3f01      	subs	r7, #1
   b9a46:	e7ea      	b.n	b9a1e <__mdiff+0xe2>
   b9a48:	000ba4e0 	.word	0x000ba4e0
   b9a4c:	000ba58c 	.word	0x000ba58c

000b9a50 <__ulp>:
   b9a50:	b082      	sub	sp, #8
   b9a52:	ed8d 0b00 	vstr	d0, [sp]
   b9a56:	9b01      	ldr	r3, [sp, #4]
   b9a58:	4912      	ldr	r1, [pc, #72]	; (b9aa4 <__ulp+0x54>)
   b9a5a:	4019      	ands	r1, r3
   b9a5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b9a60:	2900      	cmp	r1, #0
   b9a62:	dd05      	ble.n	b9a70 <__ulp+0x20>
   b9a64:	2200      	movs	r2, #0
   b9a66:	460b      	mov	r3, r1
   b9a68:	ec43 2b10 	vmov	d0, r2, r3
   b9a6c:	b002      	add	sp, #8
   b9a6e:	4770      	bx	lr
   b9a70:	4249      	negs	r1, r1
   b9a72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b9a76:	ea4f 5021 	mov.w	r0, r1, asr #20
   b9a7a:	f04f 0200 	mov.w	r2, #0
   b9a7e:	f04f 0300 	mov.w	r3, #0
   b9a82:	da04      	bge.n	b9a8e <__ulp+0x3e>
   b9a84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b9a88:	fa41 f300 	asr.w	r3, r1, r0
   b9a8c:	e7ec      	b.n	b9a68 <__ulp+0x18>
   b9a8e:	f1a0 0114 	sub.w	r1, r0, #20
   b9a92:	291e      	cmp	r1, #30
   b9a94:	bfda      	itte	le
   b9a96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b9a9a:	fa20 f101 	lsrle.w	r1, r0, r1
   b9a9e:	2101      	movgt	r1, #1
   b9aa0:	460a      	mov	r2, r1
   b9aa2:	e7e1      	b.n	b9a68 <__ulp+0x18>
   b9aa4:	7ff00000 	.word	0x7ff00000

000b9aa8 <__b2d>:
   b9aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9aaa:	6905      	ldr	r5, [r0, #16]
   b9aac:	f100 0714 	add.w	r7, r0, #20
   b9ab0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b9ab4:	1f2e      	subs	r6, r5, #4
   b9ab6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b9aba:	4620      	mov	r0, r4
   b9abc:	f7ff fd48 	bl	b9550 <__hi0bits>
   b9ac0:	f1c0 0320 	rsb	r3, r0, #32
   b9ac4:	280a      	cmp	r0, #10
   b9ac6:	f8df c07c 	ldr.w	ip, [pc, #124]	; b9b44 <__b2d+0x9c>
   b9aca:	600b      	str	r3, [r1, #0]
   b9acc:	dc14      	bgt.n	b9af8 <__b2d+0x50>
   b9ace:	f1c0 0e0b 	rsb	lr, r0, #11
   b9ad2:	fa24 f10e 	lsr.w	r1, r4, lr
   b9ad6:	42b7      	cmp	r7, r6
   b9ad8:	ea41 030c 	orr.w	r3, r1, ip
   b9adc:	bf34      	ite	cc
   b9ade:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9ae2:	2100      	movcs	r1, #0
   b9ae4:	3015      	adds	r0, #21
   b9ae6:	fa04 f000 	lsl.w	r0, r4, r0
   b9aea:	fa21 f10e 	lsr.w	r1, r1, lr
   b9aee:	ea40 0201 	orr.w	r2, r0, r1
   b9af2:	ec43 2b10 	vmov	d0, r2, r3
   b9af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9af8:	42b7      	cmp	r7, r6
   b9afa:	bf3a      	itte	cc
   b9afc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9b00:	f1a5 0608 	subcc.w	r6, r5, #8
   b9b04:	2100      	movcs	r1, #0
   b9b06:	380b      	subs	r0, #11
   b9b08:	d017      	beq.n	b9b3a <__b2d+0x92>
   b9b0a:	f1c0 0c20 	rsb	ip, r0, #32
   b9b0e:	fa04 f500 	lsl.w	r5, r4, r0
   b9b12:	42be      	cmp	r6, r7
   b9b14:	fa21 f40c 	lsr.w	r4, r1, ip
   b9b18:	ea45 0504 	orr.w	r5, r5, r4
   b9b1c:	bf8c      	ite	hi
   b9b1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b9b22:	2400      	movls	r4, #0
   b9b24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b9b28:	fa01 f000 	lsl.w	r0, r1, r0
   b9b2c:	fa24 f40c 	lsr.w	r4, r4, ip
   b9b30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b9b34:	ea40 0204 	orr.w	r2, r0, r4
   b9b38:	e7db      	b.n	b9af2 <__b2d+0x4a>
   b9b3a:	ea44 030c 	orr.w	r3, r4, ip
   b9b3e:	460a      	mov	r2, r1
   b9b40:	e7d7      	b.n	b9af2 <__b2d+0x4a>
   b9b42:	bf00      	nop
   b9b44:	3ff00000 	.word	0x3ff00000

000b9b48 <__d2b>:
   b9b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9b4c:	4689      	mov	r9, r1
   b9b4e:	2101      	movs	r1, #1
   b9b50:	ec57 6b10 	vmov	r6, r7, d0
   b9b54:	4690      	mov	r8, r2
   b9b56:	f7ff fc09 	bl	b936c <_Balloc>
   b9b5a:	4604      	mov	r4, r0
   b9b5c:	b930      	cbnz	r0, b9b6c <__d2b+0x24>
   b9b5e:	4602      	mov	r2, r0
   b9b60:	4b25      	ldr	r3, [pc, #148]	; (b9bf8 <__d2b+0xb0>)
   b9b62:	4826      	ldr	r0, [pc, #152]	; (b9bfc <__d2b+0xb4>)
   b9b64:	f240 310a 	movw	r1, #778	; 0x30a
   b9b68:	f7fc f9da 	bl	b5f20 <__assert_func>
   b9b6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b9b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b9b74:	bb35      	cbnz	r5, b9bc4 <__d2b+0x7c>
   b9b76:	2e00      	cmp	r6, #0
   b9b78:	9301      	str	r3, [sp, #4]
   b9b7a:	d028      	beq.n	b9bce <__d2b+0x86>
   b9b7c:	4668      	mov	r0, sp
   b9b7e:	9600      	str	r6, [sp, #0]
   b9b80:	f7ff fd06 	bl	b9590 <__lo0bits>
   b9b84:	9900      	ldr	r1, [sp, #0]
   b9b86:	b300      	cbz	r0, b9bca <__d2b+0x82>
   b9b88:	9a01      	ldr	r2, [sp, #4]
   b9b8a:	f1c0 0320 	rsb	r3, r0, #32
   b9b8e:	fa02 f303 	lsl.w	r3, r2, r3
   b9b92:	430b      	orrs	r3, r1
   b9b94:	40c2      	lsrs	r2, r0
   b9b96:	6163      	str	r3, [r4, #20]
   b9b98:	9201      	str	r2, [sp, #4]
   b9b9a:	9b01      	ldr	r3, [sp, #4]
   b9b9c:	61a3      	str	r3, [r4, #24]
   b9b9e:	2b00      	cmp	r3, #0
   b9ba0:	bf14      	ite	ne
   b9ba2:	2202      	movne	r2, #2
   b9ba4:	2201      	moveq	r2, #1
   b9ba6:	6122      	str	r2, [r4, #16]
   b9ba8:	b1d5      	cbz	r5, b9be0 <__d2b+0x98>
   b9baa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b9bae:	4405      	add	r5, r0
   b9bb0:	f8c9 5000 	str.w	r5, [r9]
   b9bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b9bb8:	f8c8 0000 	str.w	r0, [r8]
   b9bbc:	4620      	mov	r0, r4
   b9bbe:	b003      	add	sp, #12
   b9bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9bc8:	e7d5      	b.n	b9b76 <__d2b+0x2e>
   b9bca:	6161      	str	r1, [r4, #20]
   b9bcc:	e7e5      	b.n	b9b9a <__d2b+0x52>
   b9bce:	a801      	add	r0, sp, #4
   b9bd0:	f7ff fcde 	bl	b9590 <__lo0bits>
   b9bd4:	9b01      	ldr	r3, [sp, #4]
   b9bd6:	6163      	str	r3, [r4, #20]
   b9bd8:	2201      	movs	r2, #1
   b9bda:	6122      	str	r2, [r4, #16]
   b9bdc:	3020      	adds	r0, #32
   b9bde:	e7e3      	b.n	b9ba8 <__d2b+0x60>
   b9be0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b9be4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b9be8:	f8c9 0000 	str.w	r0, [r9]
   b9bec:	6918      	ldr	r0, [r3, #16]
   b9bee:	f7ff fcaf 	bl	b9550 <__hi0bits>
   b9bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b9bf6:	e7df      	b.n	b9bb8 <__d2b+0x70>
   b9bf8:	000ba4e0 	.word	0x000ba4e0
   b9bfc:	000ba58c 	.word	0x000ba58c

000b9c00 <__ratio>:
   b9c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c04:	4688      	mov	r8, r1
   b9c06:	4669      	mov	r1, sp
   b9c08:	4681      	mov	r9, r0
   b9c0a:	f7ff ff4d 	bl	b9aa8 <__b2d>
   b9c0e:	a901      	add	r1, sp, #4
   b9c10:	4640      	mov	r0, r8
   b9c12:	ec55 4b10 	vmov	r4, r5, d0
   b9c16:	f7ff ff47 	bl	b9aa8 <__b2d>
   b9c1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9c1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b9c22:	eba3 0c02 	sub.w	ip, r3, r2
   b9c26:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9c2a:	1a9b      	subs	r3, r3, r2
   b9c2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b9c30:	ec51 0b10 	vmov	r0, r1, d0
   b9c34:	2b00      	cmp	r3, #0
   b9c36:	bfd6      	itet	le
   b9c38:	460a      	movle	r2, r1
   b9c3a:	462a      	movgt	r2, r5
   b9c3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b9c40:	468b      	mov	fp, r1
   b9c42:	462f      	mov	r7, r5
   b9c44:	bfd4      	ite	le
   b9c46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b9c4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b9c4e:	4620      	mov	r0, r4
   b9c50:	ee10 2a10 	vmov	r2, s0
   b9c54:	465b      	mov	r3, fp
   b9c56:	4639      	mov	r1, r7
   b9c58:	f7fa fcc8 	bl	b45ec <__aeabi_ddiv>
   b9c5c:	ec41 0b10 	vmov	d0, r0, r1
   b9c60:	b003      	add	sp, #12
   b9c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9c66 <__copybits>:
   b9c66:	3901      	subs	r1, #1
   b9c68:	b570      	push	{r4, r5, r6, lr}
   b9c6a:	1149      	asrs	r1, r1, #5
   b9c6c:	6914      	ldr	r4, [r2, #16]
   b9c6e:	3101      	adds	r1, #1
   b9c70:	f102 0314 	add.w	r3, r2, #20
   b9c74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9c78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b9c7c:	1f05      	subs	r5, r0, #4
   b9c7e:	42a3      	cmp	r3, r4
   b9c80:	d30c      	bcc.n	b9c9c <__copybits+0x36>
   b9c82:	1aa3      	subs	r3, r4, r2
   b9c84:	3b11      	subs	r3, #17
   b9c86:	f023 0303 	bic.w	r3, r3, #3
   b9c8a:	3211      	adds	r2, #17
   b9c8c:	42a2      	cmp	r2, r4
   b9c8e:	bf88      	it	hi
   b9c90:	2300      	movhi	r3, #0
   b9c92:	4418      	add	r0, r3
   b9c94:	2300      	movs	r3, #0
   b9c96:	4288      	cmp	r0, r1
   b9c98:	d305      	bcc.n	b9ca6 <__copybits+0x40>
   b9c9a:	bd70      	pop	{r4, r5, r6, pc}
   b9c9c:	f853 6b04 	ldr.w	r6, [r3], #4
   b9ca0:	f845 6f04 	str.w	r6, [r5, #4]!
   b9ca4:	e7eb      	b.n	b9c7e <__copybits+0x18>
   b9ca6:	f840 3b04 	str.w	r3, [r0], #4
   b9caa:	e7f4      	b.n	b9c96 <__copybits+0x30>

000b9cac <__any_on>:
   b9cac:	f100 0214 	add.w	r2, r0, #20
   b9cb0:	6900      	ldr	r0, [r0, #16]
   b9cb2:	114b      	asrs	r3, r1, #5
   b9cb4:	4298      	cmp	r0, r3
   b9cb6:	b510      	push	{r4, lr}
   b9cb8:	db11      	blt.n	b9cde <__any_on+0x32>
   b9cba:	dd0a      	ble.n	b9cd2 <__any_on+0x26>
   b9cbc:	f011 011f 	ands.w	r1, r1, #31
   b9cc0:	d007      	beq.n	b9cd2 <__any_on+0x26>
   b9cc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b9cc6:	fa24 f001 	lsr.w	r0, r4, r1
   b9cca:	fa00 f101 	lsl.w	r1, r0, r1
   b9cce:	428c      	cmp	r4, r1
   b9cd0:	d10b      	bne.n	b9cea <__any_on+0x3e>
   b9cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b9cd6:	4293      	cmp	r3, r2
   b9cd8:	d803      	bhi.n	b9ce2 <__any_on+0x36>
   b9cda:	2000      	movs	r0, #0
   b9cdc:	bd10      	pop	{r4, pc}
   b9cde:	4603      	mov	r3, r0
   b9ce0:	e7f7      	b.n	b9cd2 <__any_on+0x26>
   b9ce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b9ce6:	2900      	cmp	r1, #0
   b9ce8:	d0f5      	beq.n	b9cd6 <__any_on+0x2a>
   b9cea:	2001      	movs	r0, #1
   b9cec:	e7f6      	b.n	b9cdc <__any_on+0x30>

000b9cee <_calloc_r>:
   b9cee:	b513      	push	{r0, r1, r4, lr}
   b9cf0:	434a      	muls	r2, r1
   b9cf2:	4611      	mov	r1, r2
   b9cf4:	9201      	str	r2, [sp, #4]
   b9cf6:	f7fc f903 	bl	b5f00 <_malloc_r>
   b9cfa:	4604      	mov	r4, r0
   b9cfc:	b118      	cbz	r0, b9d06 <_calloc_r+0x18>
   b9cfe:	9a01      	ldr	r2, [sp, #4]
   b9d00:	2100      	movs	r1, #0
   b9d02:	f7fd ffb2 	bl	b7c6a <memset>
   b9d06:	4620      	mov	r0, r4
   b9d08:	b002      	add	sp, #8
   b9d0a:	bd10      	pop	{r4, pc}
   b9d0c:	0000      	movs	r0, r0
	...

000b9d10 <nan>:
   b9d10:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9d18 <nan+0x8>
   b9d14:	4770      	bx	lr
   b9d16:	bf00      	nop
   b9d18:	00000000 	.word	0x00000000
   b9d1c:	7ff80000 	.word	0x7ff80000

000b9d20 <__ascii_wctomb>:
   b9d20:	b149      	cbz	r1, b9d36 <__ascii_wctomb+0x16>
   b9d22:	2aff      	cmp	r2, #255	; 0xff
   b9d24:	bf85      	ittet	hi
   b9d26:	238a      	movhi	r3, #138	; 0x8a
   b9d28:	6003      	strhi	r3, [r0, #0]
   b9d2a:	700a      	strbls	r2, [r1, #0]
   b9d2c:	f04f 30ff 	movhi.w	r0, #4294967295
   b9d30:	bf98      	it	ls
   b9d32:	2001      	movls	r0, #1
   b9d34:	4770      	bx	lr
   b9d36:	4608      	mov	r0, r1
   b9d38:	4770      	bx	lr

000b9d3a <link_code_end>:
	...

000b9d3c <link_const_data_start>:
   b9d3c:	514d0400 	.word	0x514d0400
   b9d40:	00045454 	.word	0x00045454
   b9d44:	49514d06 	.word	0x49514d06
   b9d48:	03706473 	.word	0x03706473

000b9d4c <dynalib_user>:
   b9d4c:	000b499d 000b49d9 000b4a01 000b4a05     .I...I...J...J..
   b9d5c:	00000000 63697270 002f7365 2500212c     ....prices/.,!.%
   b9d6c:	252d642a 252d642a 64255464 642a253a     *d-%*d-%dT%d:%*d
   b9d7c:	642a253a 61707300 6c636b72 746e6569     :%*d.sparkclient
   b9d8c:	716d005f 48007474 65686769 70207473     _.mqtt.Highest p
   b9d9c:	65636972 20666f20 20656874 3a796164     rice of the day:
   b9dac:	0a662520 776f4c00 20747365 63697270      %f..Lowest pric
   b9dbc:	666f2065 65687420 79616420 6625203a     e of the day: %f
   b9dcc:	6f48000a 20737275 7420666f 64206568     ..Hours of the d
   b9ddc:	77207961 65726568 656c6520 69727463     ay where electri
   b9dec:	79746963 20736920 68746977 61206e69     city is within a
   b9dfc:	70656363 20646574 676e6172 000a3a65     ccepted range:..
   b9e0c:	64323025 206f7420 64323025 6c43000a     %02d to %02d..Cl
   b9e1c:	746e6569 73696420 6e6e6f63 65746365     ient disconnecte
   b9e2c:	4c000a64 74686769 6425203a 7543000a     d..Light: %d..Cu
   b9e3c:	6e657272 48482074 3a4d4d3a 32302520     rrent HH:MM: %02
   b9e4c:	30253a64 000a6432 77206e49 0a6b726f     d:%02d..In work.
   b9e5c:	65684300 69287061 20296873 72756f68     .Cheap(ish) hour
   b9e6c:	666f2073 65687420 79616420 2500203a     s of the day: .%
   b9e7c:	20643230 25206f74 2c643230 6f4c0020     02d to %02d, .Lo
   b9e8c:	72702077 20656369 72756f68 65520073     w price hours.Re
   b9e9c:	76696563 70206465 7265776f 7465672f     ceived power/get
   b9eac:	6f70000a 00726577 7922207b 22726165     ..power.{ "year"
   b9ebc:	0022203a 6e6f6d22 3a226874 30252220     : "."month": "%0
   b9ecc:	2c226432 64220020 3a227961 30252220     2d", ."day": "%0
   b9edc:	2c226432 64220020 745f7961 3a226f77     2d", ."day_two":
   b9eec:	30252220 2c226432 68220020 2272756f      "%02d", ."hour"
   b9efc:	2522203a 22643230 65007d20 6972706c     : "%02d" }.elpri
   b9f0c:	00726573 5f746567 63697270 52007365     ser.get_prices.R
   b9f1c:	72757465 6176206e 3a65756c 00642520     eturn value: %d.
   b9f2c:	6c6c6568 6f77206f 00646c72 65776f70     hello world.powe
   b9f3c:	65672f72 6f700074 2f726577 63697270     r/get.power/pric
   b9f4c:	31007365 312e3239 302e3836 3330312e     es.192.168.0.103
   b9f5c:	00000000                                ....

000b9f60 <_ZTVN5spark13EthernetClassE>:
	...
   b9f68:	000b5faf 000b5fa5 000b5f9b 000b5f91     ._..._..._..._..
   b9f78:	000b5f85 000b5f79 000b7725 000b772d     ._..y_..%w..-w..
   b9f88:	000b5f6d 000b5f65 000b5f5b 000b5f51     m_..e_..[_..Q_..
   b9f98:	000b775d                                ]w..

000b9f9c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9fa4:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   b9fb4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b9fc4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9fcc:	000b67e5 000b67eb 000b6829 000b67f9     .g...g..)h...g..
   b9fdc:	000b67e7                                .g..

000b9fe0 <_ZTV9IPAddress>:
	...
   b9fe8:	000b6d25 000b6d15 000b6d17              %m...m...m..

000b9ff4 <_ZTV9USBSerial>:
	...
   b9ffc:	000b6e37 000b6e9f 000b6e75 000b63c1     7n...n..un...c..
   ba00c:	000b6e67 000b6e39 000b6e49 000b6e99     gn..9n..In...n..
   ba01c:	000b6e59 000b6e31                       Yn..1n..

000ba024 <_ZTV11USARTSerial>:
	...
   ba02c:	000b6f89 000b6ff5 000b6fcd 000b63c1     .o...o...o...c..
   ba03c:	000b6f9d 000b6fb9 000b6fab 000b6fc7     .o...o...o...o..
   ba04c:	000b6f8b 000b6f8f                       .o...o..

000ba054 <_ZTV7TwoWire>:
	...
   ba05c:	000b7055 000b709f 000b7077 000b7057     Up...p..wp..Wp..
   ba06c:	000b707f 000b7087 000b708f 000b7097     .p...p...p...p..
   ba07c:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   ba08c:	203d2072 00006425                       r = %d..

000ba094 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba09c:	000b7155 000b7179 000b7663 000b7187     Uq..yq..cv...q..
   ba0ac:	000b7159                                Yq..

000ba0b0 <_ZTV9TCPClient>:
	...
   ba0b8:	000b6675 000b668d 000b70d1 000b70eb     uf...f...p...p..
   ba0c8:	000b74f9 000b7115 000b736f 000b7149     .t...q..os..Iq..
   ba0d8:	000b7401 000b7241 000b739d 000b75ad     .t..Ar...s...u..
   ba0e8:	000b733d 000b714b 000b70fd 000b718d     =s..Kq...p...q..
   ba0f8:	000b7221                                !r..

000ba0fc <_ZTVN5spark9WiFiClassE>:
	...
   ba104:	000b76c7 000b76bd 000b76b3 000b7669     .v...v...v..iv..
   ba114:	000b76a7 000b769b 000b7725 000b772d     .v...v..%w..-w..
   ba124:	000b768f 000b7687 000b767d 000b7673     .v...v..}v..sv..
   ba134:	000b775d                                ]w..

000ba138 <_ZTVN5spark12NetworkClassE>:
	...
   ba140:	000b76e5 000b76ef 000b76f9 000b7703     .v...v...v...w..
   ba150:	000b770d 000b7719 000b7725 000b772d     .w...w..%w..-w..
   ba160:	000b7735 000b7741 000b7749 000b7753     5w..Aw..Iw..Sw..
   ba170:	000b775d                                ]w..

000ba174 <_ZSt7nothrow>:
	...

000ba175 <_ZTSSt19_Sp_make_shared_tag>:
   ba175:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   ba185:	5f646572 00676174                        red_tag....

000ba190 <_ZTISt19_Sp_make_shared_tag>:
   ba190:	000ba1d0 000ba175                       ....u...

000ba198 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba198:	000ba230 000ba1a4 000ba254              0.......T...

000ba1a4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba1a4:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   ba1b4:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   ba1c4:	00000045                                E...

000ba1c8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba1c8:	00000000 000ba198 000b7a35 000b7a49     ........5z..Iz..
   ba1d8:	000b7bdd 000b7bdd 000b7ab3 000b79f5     .{...{...z...y..
   ba1e8:	000b7a9b 000b7a5d 000b7a27              .z..]z..'z..

000ba1f4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba1f4:	000ba230 000ba200 000ba198              0...........

000ba200 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba200:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   ba210:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   ba220:	456f666e 00000000                       nfoE....

000ba228 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba228:	00000000 000ba1f4 000b7add 000b7af1     .........z...z..
   ba238:	000b7bdd 000b7bdd 000b7ab3 000b79f5     .{...{...z...y..
   ba248:	000b7bb1 000b7b3d 000b7b05              .{..={...{..

000ba254 <_ZTISt9type_info>:
   ba254:	000ba1d0 000ba25c                       ....\...

000ba25c <_ZTSSt9type_info>:
   ba25c:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   ba26c:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   ba27c:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   ba28c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   ba29c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   ba2ac:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   ba2bc:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   ba2cc:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   ba2dc:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   ba2ec:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   ba2fc:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000ba30c <fpi.1>:
   ba30c:	00000035 fffffbce 000003cb 00000001     5...............
   ba31c:	00000000                                ....

000ba320 <fpinan.0>:
   ba320:	00000034 fffffbce 000003cb 00000001     4...............
	...

000ba338 <tinytens>:
   ba338:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   ba348:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   ba358:	64ac6f43 11680628 746e6d2f 726f772f     Co.d(.h./mnt/wor
   ba368:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   ba378:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   ba388:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   ba398:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   ba3a8:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   ba3b8:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   ba3c8:	696c2f62 732f6362 6e697274 74732f67     b/libc/string/st
   ba3d8:	6b6f7472                                 rtok.c.

000ba3df <_ctype_>:
   ba3df:	20202000 20202020 28282020 20282828     .         ((((( 
   ba3ef:	20202020 20202020 20202020 20202020                     
   ba3ff:	10108820 10101010 10101010 10101010      ...............
   ba40f:	04040410 04040404 10040404 10101010     ................
   ba41f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   ba42f:	01010101 01010101 01010101 10101010     ................
   ba43f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   ba44f:	02020202 02020202 02020202 10101010     ................
   ba45f:	00000020 00000000 00000000 00000000      ...............
	...
   ba4df:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   ba4ef:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   ba4ff:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   ba50f:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   ba51f:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   ba52f:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   ba53f:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   ba54f:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   ba55f:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   ba56f:	78656874 2e00632e                        thex.c...

000ba578 <_C_numeric_locale>:
   ba578:	000ba576 000b9e0b 2003cd84 4f500043     v.......... C.PO
   ba588:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   ba598:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   ba5a8:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   ba5b8:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   ba5c8:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   ba5d8:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   ba5e8:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   ba5f8:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   ba608:	00000063 00000000                       c.......

000ba610 <__mprec_bigtens>:
   ba610:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   ba620:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   ba630:	7f73bf3c 75154fdd                       <.s..O.u

000ba638 <__mprec_tens>:
   ba638:	00000000 3ff00000 00000000 40240000     .......?......$@
   ba648:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   ba658:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   ba668:	00000000 412e8480 00000000 416312d0     .......A......cA
   ba678:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   ba688:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   ba698:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   ba6a8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   ba6b8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   ba6c8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   ba6d8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   ba6e8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   ba6f8:	79d99db4 44ea7843                       ...yCx.D

000ba700 <p05.0>:
   ba700:	00000005 00000019 0000007d              ........}...

000ba70c <link_const_data_end>:
   ba70c:	000b5125 	.word	0x000b5125
   ba710:	000b59ed 	.word	0x000b59ed
   ba714:	000b5fb9 	.word	0x000b5fb9
   ba718:	000b5fe1 	.word	0x000b5fe1
   ba71c:	000b63b1 	.word	0x000b63b1
   ba720:	000b64e1 	.word	0x000b64e1
   ba724:	000b6659 	.word	0x000b6659
   ba728:	000b66a1 	.word	0x000b66a1
   ba72c:	000b76d1 	.word	0x000b76d1
   ba730:	000b7835 	.word	0x000b7835
