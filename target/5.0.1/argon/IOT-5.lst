
c:/Users/Anders/Documents/ParticleProjects/IOT2/IOT-5/target/5.0.1/argon/IOT-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006fb4  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bafd4  000bafd4  0000afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001e0  2003ccfc  000baff8  0000ccfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001914  2003cee0  2003cee0  0001cee0  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bb1d8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bb1dc  000bb1dc  0001b1dc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bb1e2  000bb1e2  0001b1e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bb206  000bb206  0001b206  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0014b1c6  00000000  00000000  0001b20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016b5a  00000000  00000000  001663d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00041670  00000000  00000000  0017cf2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000031d8  00000000  00000000  001be59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b9f8  00000000  00000000  001c1772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d0ae  00000000  00000000  001cd16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00048384  00000000  00000000  0020a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001413a5  00000000  00000000  0025259c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000aa98  00000000  00000000  00393944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2uiz>:
   b48f8:	004a      	lsls	r2, r1, #1
   b48fa:	d211      	bcs.n	b4920 <__aeabi_d2uiz+0x28>
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d211      	bcs.n	b4926 <__aeabi_d2uiz+0x2e>
   b4902:	d50d      	bpl.n	b4920 <__aeabi_d2uiz+0x28>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d40e      	bmi.n	b492c <__aeabi_d2uiz+0x34>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	fa23 f002 	lsr.w	r0, r3, r2
   b491e:	4770      	bx	lr
   b4920:	f04f 0000 	mov.w	r0, #0
   b4924:	4770      	bx	lr
   b4926:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b492a:	d102      	bne.n	b4932 <__aeabi_d2uiz+0x3a>
   b492c:	f04f 30ff 	mov.w	r0, #4294967295
   b4930:	4770      	bx	lr
   b4932:	f04f 0000 	mov.w	r0, #0
   b4936:	4770      	bx	lr

000b4938 <__aeabi_d2f>:
   b4938:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b493c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4940:	bf24      	itt	cs
   b4942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b494a:	d90d      	bls.n	b4968 <__aeabi_d2f+0x30>
   b494c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b495c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4960:	bf08      	it	eq
   b4962:	f020 0001 	biceq.w	r0, r0, #1
   b4966:	4770      	bx	lr
   b4968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b496c:	d121      	bne.n	b49b2 <__aeabi_d2f+0x7a>
   b496e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4972:	bfbc      	itt	lt
   b4974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4978:	4770      	bxlt	lr
   b497a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b497e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4982:	f1c2 0218 	rsb	r2, r2, #24
   b4986:	f1c2 0c20 	rsb	ip, r2, #32
   b498a:	fa10 f30c 	lsls.w	r3, r0, ip
   b498e:	fa20 f002 	lsr.w	r0, r0, r2
   b4992:	bf18      	it	ne
   b4994:	f040 0001 	orrne.w	r0, r0, #1
   b4998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b499c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49a4:	ea40 000c 	orr.w	r0, r0, ip
   b49a8:	fa23 f302 	lsr.w	r3, r3, r2
   b49ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b49b0:	e7cc      	b.n	b494c <__aeabi_d2f+0x14>
   b49b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b49b6:	d107      	bne.n	b49c8 <__aeabi_d2f+0x90>
   b49b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49bc:	bf1e      	ittt	ne
   b49be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49c6:	4770      	bxne	lr
   b49c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49d4:	4770      	bx	lr
   b49d6:	bf00      	nop

000b49d8 <__aeabi_d2ulz>:
   b49d8:	b5d0      	push	{r4, r6, r7, lr}
   b49da:	4b0c      	ldr	r3, [pc, #48]	; (b4a0c <__aeabi_d2ulz+0x34>)
   b49dc:	2200      	movs	r2, #0
   b49de:	4606      	mov	r6, r0
   b49e0:	460f      	mov	r7, r1
   b49e2:	f7ff fcd9 	bl	b4398 <__aeabi_dmul>
   b49e6:	f7ff ff87 	bl	b48f8 <__aeabi_d2uiz>
   b49ea:	4604      	mov	r4, r0
   b49ec:	f7ff fc5a 	bl	b42a4 <__aeabi_ui2d>
   b49f0:	4b07      	ldr	r3, [pc, #28]	; (b4a10 <__aeabi_d2ulz+0x38>)
   b49f2:	2200      	movs	r2, #0
   b49f4:	f7ff fcd0 	bl	b4398 <__aeabi_dmul>
   b49f8:	4602      	mov	r2, r0
   b49fa:	460b      	mov	r3, r1
   b49fc:	4630      	mov	r0, r6
   b49fe:	4639      	mov	r1, r7
   b4a00:	f7ff fb12 	bl	b4028 <__aeabi_dsub>
   b4a04:	f7ff ff78 	bl	b48f8 <__aeabi_d2uiz>
   b4a08:	4621      	mov	r1, r4
   b4a0a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a0c:	3df00000 	.word	0x3df00000
   b4a10:	41f00000 	.word	0x41f00000
	...

000b4a20 <memchr>:
   b4a20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a24:	2a10      	cmp	r2, #16
   b4a26:	db2b      	blt.n	b4a80 <memchr+0x60>
   b4a28:	f010 0f07 	tst.w	r0, #7
   b4a2c:	d008      	beq.n	b4a40 <memchr+0x20>
   b4a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a32:	3a01      	subs	r2, #1
   b4a34:	428b      	cmp	r3, r1
   b4a36:	d02d      	beq.n	b4a94 <memchr+0x74>
   b4a38:	f010 0f07 	tst.w	r0, #7
   b4a3c:	b342      	cbz	r2, b4a90 <memchr+0x70>
   b4a3e:	d1f6      	bne.n	b4a2e <memchr+0xe>
   b4a40:	b4f0      	push	{r4, r5, r6, r7}
   b4a42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4a46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b4a4a:	f022 0407 	bic.w	r4, r2, #7
   b4a4e:	f07f 0700 	mvns.w	r7, #0
   b4a52:	2300      	movs	r3, #0
   b4a54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4a58:	3c08      	subs	r4, #8
   b4a5a:	ea85 0501 	eor.w	r5, r5, r1
   b4a5e:	ea86 0601 	eor.w	r6, r6, r1
   b4a62:	fa85 f547 	uadd8	r5, r5, r7
   b4a66:	faa3 f587 	sel	r5, r3, r7
   b4a6a:	fa86 f647 	uadd8	r6, r6, r7
   b4a6e:	faa5 f687 	sel	r6, r5, r7
   b4a72:	b98e      	cbnz	r6, b4a98 <memchr+0x78>
   b4a74:	d1ee      	bne.n	b4a54 <memchr+0x34>
   b4a76:	bcf0      	pop	{r4, r5, r6, r7}
   b4a78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a7c:	f002 0207 	and.w	r2, r2, #7
   b4a80:	b132      	cbz	r2, b4a90 <memchr+0x70>
   b4a82:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a86:	3a01      	subs	r2, #1
   b4a88:	ea83 0301 	eor.w	r3, r3, r1
   b4a8c:	b113      	cbz	r3, b4a94 <memchr+0x74>
   b4a8e:	d1f8      	bne.n	b4a82 <memchr+0x62>
   b4a90:	2000      	movs	r0, #0
   b4a92:	4770      	bx	lr
   b4a94:	3801      	subs	r0, #1
   b4a96:	4770      	bx	lr
   b4a98:	2d00      	cmp	r5, #0
   b4a9a:	bf06      	itte	eq
   b4a9c:	4635      	moveq	r5, r6
   b4a9e:	3803      	subeq	r0, #3
   b4aa0:	3807      	subne	r0, #7
   b4aa2:	f015 0f01 	tst.w	r5, #1
   b4aa6:	d107      	bne.n	b4ab8 <memchr+0x98>
   b4aa8:	3001      	adds	r0, #1
   b4aaa:	f415 7f80 	tst.w	r5, #256	; 0x100
   b4aae:	bf02      	ittt	eq
   b4ab0:	3001      	addeq	r0, #1
   b4ab2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b4ab6:	3001      	addeq	r0, #1
   b4ab8:	bcf0      	pop	{r4, r5, r6, r7}
   b4aba:	3801      	subs	r0, #1
   b4abc:	4770      	bx	lr
   b4abe:	bf00      	nop

000b4ac0 <strcmp>:
   b4ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ac8:	2a01      	cmp	r2, #1
   b4aca:	bf28      	it	cs
   b4acc:	429a      	cmpcs	r2, r3
   b4ace:	d0f7      	beq.n	b4ac0 <strcmp>
   b4ad0:	1ad0      	subs	r0, r2, r3
   b4ad2:	4770      	bx	lr

000b4ad4 <strlen>:
   b4ad4:	4603      	mov	r3, r0
   b4ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4ada:	2a00      	cmp	r2, #0
   b4adc:	d1fb      	bne.n	b4ad6 <strlen+0x2>
   b4ade:	1a18      	subs	r0, r3, r0
   b4ae0:	3801      	subs	r0, #1
   b4ae2:	4770      	bx	lr

000b4ae4 <__aeabi_d2lz>:
   b4ae4:	b538      	push	{r3, r4, r5, lr}
   b4ae6:	2200      	movs	r2, #0
   b4ae8:	2300      	movs	r3, #0
   b4aea:	4604      	mov	r4, r0
   b4aec:	460d      	mov	r5, r1
   b4aee:	f7ff fec5 	bl	b487c <__aeabi_dcmplt>
   b4af2:	b928      	cbnz	r0, b4b00 <__aeabi_d2lz+0x1c>
   b4af4:	4620      	mov	r0, r4
   b4af6:	4629      	mov	r1, r5
   b4af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4afc:	f7ff bf6c 	b.w	b49d8 <__aeabi_d2ulz>
   b4b00:	4620      	mov	r0, r4
   b4b02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4b06:	f7ff ff67 	bl	b49d8 <__aeabi_d2ulz>
   b4b0a:	4240      	negs	r0, r0
   b4b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b10:	bd38      	pop	{r3, r4, r5, pc}
   b4b12:	bf00      	nop

000b4b14 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b14:	4809      	ldr	r0, [pc, #36]	; (b4b3c <module_user_pre_init+0x28>)
   b4b16:	490a      	ldr	r1, [pc, #40]	; (b4b40 <module_user_pre_init+0x2c>)
   b4b18:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4b1a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4b1c:	d005      	beq.n	b4b2a <module_user_pre_init+0x16>
   b4b1e:	4a09      	ldr	r2, [pc, #36]	; (b4b44 <module_user_pre_init+0x30>)
   b4b20:	4282      	cmp	r2, r0
   b4b22:	d002      	beq.n	b4b2a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4b24:	1a12      	subs	r2, r2, r0
   b4b26:	f003 fc03 	bl	b8330 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4b2a:	4807      	ldr	r0, [pc, #28]	; (b4b48 <module_user_pre_init+0x34>)
   b4b2c:	4a07      	ldr	r2, [pc, #28]	; (b4b4c <module_user_pre_init+0x38>)
   b4b2e:	2100      	movs	r1, #0
   b4b30:	1a12      	subs	r2, r2, r0
   b4b32:	f003 fc25 	bl	b8380 <memset>
    return &link_global_data_start;
}
   b4b36:	4801      	ldr	r0, [pc, #4]	; (b4b3c <module_user_pre_init+0x28>)
   b4b38:	bd08      	pop	{r3, pc}
   b4b3a:	bf00      	nop
   b4b3c:	2003ccfc 	.word	0x2003ccfc
   b4b40:	000baff8 	.word	0x000baff8
   b4b44:	2003cedc 	.word	0x2003cedc
   b4b48:	2003cee0 	.word	0x2003cee0
   b4b4c:	2003e7f4 	.word	0x2003e7f4

000b4b50 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4b50:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b52:	4e07      	ldr	r6, [pc, #28]	; (b4b70 <module_user_init+0x20>)
   b4b54:	4c07      	ldr	r4, [pc, #28]	; (b4b74 <module_user_init+0x24>)
    module_user_init_hook();
   b4b56:	f001 ff47 	bl	b69e8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b5a:	1ba4      	subs	r4, r4, r6
   b4b5c:	08a4      	lsrs	r4, r4, #2
   b4b5e:	2500      	movs	r5, #0
   b4b60:	42ac      	cmp	r4, r5
   b4b62:	d100      	bne.n	b4b66 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b64:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b66:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b6a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b6c:	3501      	adds	r5, #1
   b4b6e:	e7f7      	b.n	b4b60 <module_user_init+0x10>
   b4b70:	000bafac 	.word	0x000bafac
   b4b74:	000bafd4 	.word	0x000bafd4

000b4b78 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b78:	f000 bbe8 	b.w	b534c <setup>

000b4b7c <module_user_loop>:
}

void module_user_loop() {
   b4b7c:	b508      	push	{r3, lr}
    loop();
   b4b7e:	f000 faa9 	bl	b50d4 <loop>
    _post_loop();
}
   b4b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b86:	f001 bee7 	b.w	b6958 <_post_loop>

000b4b8a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b8a:	f001 bb2d 	b.w	b61e8 <malloc>

000b4b8e <_Znaj>:
   b4b8e:	f001 bb2b 	b.w	b61e8 <malloc>

000b4b92 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4b92:	f001 bb31 	b.w	b61f8 <free>

000b4b96 <_ZdaPv>:
   b4b96:	f001 bb2f 	b.w	b61f8 <free>

000b4b9a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b9a:	f001 bb2d 	b.w	b61f8 <free>

000b4b9e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b9e:	7800      	ldrb	r0, [r0, #0]
   b4ba0:	fab0 f080 	clz	r0, r0
   b4ba4:	0940      	lsrs	r0, r0, #5
   b4ba6:	4770      	bx	lr

000b4ba8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ba8:	2301      	movs	r3, #1
   b4baa:	7003      	strb	r3, [r0, #0]
   b4bac:	4770      	bx	lr
	...

000b4bb0 <_Z8callbackPcPhj>:
        client.subscribe("power/prices");
    }
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b4bb0:	b508      	push	{r3, lr}
    Serial.println("callback called");
   b4bb2:	f002 facb 	bl	b714c <_Z16_fetch_usbserialv>
   b4bb6:	4903      	ldr	r1, [pc, #12]	; (b4bc4 <_Z8callbackPcPhj+0x14>)
   b4bb8:	f001 fd6d 	bl	b6696 <_ZN5Print7printlnEPKc>
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    */

    work = true;
   b4bbc:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <_Z8callbackPcPhj+0x18>)
   b4bbe:	2201      	movs	r2, #1
   b4bc0:	701a      	strb	r2, [r3, #0]
}
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	000ba444 	.word	0x000ba444
   b4bc8:	2003e67a 	.word	0x2003e67a

000b4bcc <_Z13handle_sensorv>:

void handle_sensor(void)
{
   b4bcc:	b508      	push	{r3, lr}
    Serial.println("handle_sensor called");
   b4bce:	f002 fabd 	bl	b714c <_Z16_fetch_usbserialv>
   b4bd2:	490b      	ldr	r1, [pc, #44]	; (b4c00 <_Z13handle_sensorv+0x34>)
   b4bd4:	f001 fd5f 	bl	b6696 <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4bd8:	f001 f8f2 	bl	b5dc0 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta;
    unsigned long current_reading = millis();

    if ((delta = current_reading - last_read) > 100)
   b4bdc:	4909      	ldr	r1, [pc, #36]	; (b4c04 <_Z13handle_sensorv+0x38>)
   b4bde:	680b      	ldr	r3, [r1, #0]
   b4be0:	1ac3      	subs	r3, r0, r3
   b4be2:	2b64      	cmp	r3, #100	; 0x64
   b4be4:	d90a      	bls.n	b4bfc <_Z13handle_sensorv+0x30>
    {
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4be6:	4a08      	ldr	r2, [pc, #32]	; (b4c08 <_Z13handle_sensorv+0x3c>)
   b4be8:	fbb2 f3f3 	udiv	r3, r2, r3
   b4bec:	4a07      	ldr	r2, [pc, #28]	; (b4c0c <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b4bee:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4bf0:	6013      	str	r3, [r2, #0]
        printer = true; // Just a debuging flag
   b4bf2:	4a07      	ldr	r2, [pc, #28]	; (b4c10 <_Z13handle_sensorv+0x44>)
   b4bf4:	2301      	movs	r3, #1
   b4bf6:	7013      	strb	r3, [r2, #0]
        transmit_value = true;
   b4bf8:	4a06      	ldr	r2, [pc, #24]	; (b4c14 <_Z13handle_sensorv+0x48>)
   b4bfa:	7013      	strb	r3, [r2, #0]
    }
}
   b4bfc:	bd08      	pop	{r3, pc}
   b4bfe:	bf00      	nop
   b4c00:	000ba454 	.word	0x000ba454
   b4c04:	2003d1a8 	.word	0x2003d1a8
   b4c08:	0036ee80 	.word	0x0036ee80
   b4c0c:	2003cefc 	.word	0x2003cefc
   b4c10:	2003d20d 	.word	0x2003d20d
   b4c14:	2003e679 	.word	0x2003e679

000b4c18 <_Z9myHandlerPKcS0_>:

void myHandler(const char *event, const char *data)
{
   b4c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c1c:	ed2d 8b04 	vpush	{d8-d9}
    populate = false;   // We're asuming this isn't the last transmission.
    rec_cnt++;          // increment recieved transmissions counter.
   b4c20:	f8df 9264 	ldr.w	r9, [pc, #612]	; b4e88 <_Z9myHandlerPKcS0_+0x270>
    populate = false;   // We're asuming this isn't the last transmission.
   b4c24:	f8df 8264 	ldr.w	r8, [pc, #612]	; b4e8c <_Z9myHandlerPKcS0_+0x274>
    rec_cnt++;          // increment recieved transmissions counter.
   b4c28:	f899 3000 	ldrb.w	r3, [r9]
{
   b4c2c:	b08d      	sub	sp, #52	; 0x34
    rec_cnt++;          // increment recieved transmissions counter.
   b4c2e:	3301      	adds	r3, #1
    populate = false;   // We're asuming this isn't the last transmission.
   b4c30:	2500      	movs	r5, #0
    rec_cnt++;          // increment recieved transmissions counter.
   b4c32:	f889 3000 	strb.w	r3, [r9]
{
   b4c36:	460e      	mov	r6, r1
   b4c38:	4604      	mov	r4, r0
    populate = false;   // We're asuming this isn't the last transmission.
   b4c3a:	f888 5000 	strb.w	r5, [r8]

    Serial.print("DATA PACKAGE #");
   b4c3e:	f002 fa85 	bl	b714c <_Z16_fetch_usbserialv>
   b4c42:	4983      	ldr	r1, [pc, #524]	; (b4e50 <_Z9myHandlerPKcS0_+0x238>)
   b4c44:	f001 fd14 	bl	b6670 <_ZN5Print5printEPKc>
    Serial.println(rec_cnt);
   b4c48:	f002 fa80 	bl	b714c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4c4c:	220a      	movs	r2, #10
   b4c4e:	f899 1000 	ldrb.w	r1, [r9]
   b4c52:	4607      	mov	r7, r0
   b4c54:	f001 fd29 	bl	b66aa <_ZN5Print11printNumberEmh>
        n += println();
   b4c58:	4638      	mov	r0, r7
   b4c5a:	f001 fd10 	bl	b667e <_ZN5Print7printlnEv>
    Serial.println(data);
   b4c5e:	f002 fa75 	bl	b714c <_Z16_fetch_usbserialv>
   b4c62:	4631      	mov	r1, r6
   b4c64:	f001 fd17 	bl	b6696 <_ZN5Print7printlnEPKc>

    /* When transmission are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b4c68:	4630      	mov	r0, r6
   b4c6a:	f7ff ff33 	bl	b4ad4 <strlen>
   b4c6e:	4607      	mov	r7, r0
    Serial.print("Transmission length: ");
   b4c70:	f002 fa6c 	bl	b714c <_Z16_fetch_usbserialv>
   b4c74:	4977      	ldr	r1, [pc, #476]	; (b4e54 <_Z9myHandlerPKcS0_+0x23c>)
   b4c76:	f001 fcfb 	bl	b6670 <_ZN5Print5printEPKc>
    Serial.println(transmission_size);
   b4c7a:	f002 fa67 	bl	b714c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4c7e:	220a      	movs	r2, #10
   b4c80:	4639      	mov	r1, r7
   b4c82:	4682      	mov	sl, r0
   b4c84:	f001 fd11 	bl	b66aa <_ZN5Print11printNumberEmh>
        n += println();
   b4c88:	4650      	mov	r0, sl
   b4c8a:	f001 fcf8 	bl	b667e <_ZN5Print7printlnEv>
    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b4c8e:	4621      	mov	r1, r4
   b4c90:	a803      	add	r0, sp, #12
   b4c92:	f003 fbab 	bl	b83ec <strcpy>

    Serial.println("############## EVENT #################");
   b4c96:	f002 fa59 	bl	b714c <_Z16_fetch_usbserialv>
   b4c9a:	496f      	ldr	r1, [pc, #444]	; (b4e58 <_Z9myHandlerPKcS0_+0x240>)
   b4c9c:	f001 fcfb 	bl	b6696 <_ZN5Print7printlnEPKc>
    Serial.println(event);
   b4ca0:	f002 fa54 	bl	b714c <_Z16_fetch_usbserialv>
   b4ca4:	4621      	mov	r1, r4
   b4ca6:	f001 fcf6 	bl	b6696 <_ZN5Print7printlnEPKc>
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
	if (this->max_size() - (this->size() - __n1) < __n2)
   b4caa:	4c6c      	ldr	r4, [pc, #432]	; (b4e5c <_Z9myHandlerPKcS0_+0x244>)
    Serial.println("############## EVENT END #####################");
   b4cac:	f002 fa4e 	bl	b714c <_Z16_fetch_usbserialv>
   b4cb0:	496b      	ldr	r1, [pc, #428]	; (b4e60 <_Z9myHandlerPKcS0_+0x248>)
   b4cb2:	f001 fcf0 	bl	b6696 <_ZN5Print7printlnEPKc>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4cb6:	4630      	mov	r0, r6
   b4cb8:	f7ff ff0c 	bl	b4ad4 <strlen>
   b4cbc:	6863      	ldr	r3, [r4, #4]
   b4cbe:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
   b4cc2:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
   b4cc6:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   b4cca:	333f      	adds	r3, #63	; 0x3f
   b4ccc:	4298      	cmp	r0, r3
   b4cce:	4602      	mov	r2, r0
   b4cd0:	d902      	bls.n	b4cd8 <_Z9myHandlerPKcS0_+0xc0>
	  __throw_length_error(__N(__s));
   b4cd2:	4864      	ldr	r0, [pc, #400]	; (b4e64 <_Z9myHandlerPKcS0_+0x24c>)
   b4cd4:	f002 ffc1 	bl	b7c5a <_ZSt20__throw_length_errorPKc>
      append(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	const size_type __n = traits_type::length(__s);
	_M_check_length(size_type(0), __n, "basic_string::append");
	return _M_append(__s, __n);
   b4cd8:	4631      	mov	r1, r6
   b4cda:	4620      	mov	r0, r4
   b4cdc:	f003 f932 	bl	b7f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
    // Extract the numbered part of eventname and use it for indexing "rec_data"
    //strcpy(rec_data[atoi(strtok(event_str, "prices/"))], data);


    // prolly easier to use transmission counter for indexing.
    strcpy(rec_data[(rec_cnt - 1)], data);
   b4ce0:	f899 3000 	ldrb.w	r3, [r9]
   b4ce4:	4860      	ldr	r0, [pc, #384]	; (b4e68 <_Z9myHandlerPKcS0_+0x250>)
   b4ce6:	3b01      	subs	r3, #1
   b4ce8:	eb03 2343 	add.w	r3, r3, r3, lsl #9
   b4cec:	4631      	mov	r1, r6
   b4cee:	4418      	add	r0, r3
   b4cf0:	f003 fb7c 	bl	b83ec <strcpy>
    // if (transmission_size < 512)
    // {
    //     populate = true;
    // }

    if (transmission_size < 512)
   b4cf4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   b4cf8:	f080 80a5 	bcs.w	b4e46 <_Z9myHandlerPKcS0_+0x22e>
    {
        populate = true;
   b4cfc:	2301      	movs	r3, #1
   b4cfe:	f888 3000 	strb.w	r3, [r8]
        
        Serial.println("POPULATEEED!! Im so happy.");
   b4d02:	f002 fa23 	bl	b714c <_Z16_fetch_usbserialv>
   b4d06:	4959      	ldr	r1, [pc, #356]	; (b4e6c <_Z9myHandlerPKcS0_+0x254>)
   b4d08:	f8df 9184 	ldr.w	r9, [pc, #388]	; b4e90 <_Z9myHandlerPKcS0_+0x278>
   b4d0c:	f8df a184 	ldr.w	sl, [pc, #388]	; b4e94 <_Z9myHandlerPKcS0_+0x27c>
        //Iterate over the message, extracting the juicy bits, until no more "!".
        while (bang_index > 0)
        {   
            //date = stoi(message.substr(dd_index, 2));                                   // Date (dd) converted to int (string-to-int)
            cost_hour[idx] = stoi(message.substr(hh_index, 2));                         // Hour (hh) converted to int. 
            cost[idx] = stof(message.substr(pp_index, bang_index - pp_index)) / 1000;   // Price converted to float.
   b4d10:	eddf 8a57 	vldr	s17, [pc, #348]	; b4e70 <_Z9myHandlerPKcS0_+0x258>
        Serial.println("POPULATEEED!! Im so happy.");
   b4d14:	f001 fcbf 	bl	b6696 <_ZN5Print7printlnEPKc>
        Serial.println();
   b4d18:	f002 fa18 	bl	b714c <_Z16_fetch_usbserialv>
   b4d1c:	f001 fcaf 	bl	b667e <_ZN5Print7printlnEv>
      {
	_M_check(__pos, "basic_string::erase");
	if (__n == npos)
	  this->_M_set_length(__pos);
	else if (__n != 0)
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b4d20:	6862      	ldr	r2, [r4, #4]
   b4d22:	2a01      	cmp	r2, #1
   b4d24:	bf28      	it	cs
   b4d26:	2201      	movcs	r2, #1
   b4d28:	4629      	mov	r1, r5
   b4d2a:	4620      	mov	r0, r4
   b4d2c:	f003 f8f5 	bl	b7f1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
        int dd_index = message.find("T") - 2; // Index of the date
   b4d30:	4950      	ldr	r1, [pc, #320]	; (b4e74 <_Z9myHandlerPKcS0_+0x25c>)
   b4d32:	462a      	mov	r2, r5
   b4d34:	4620      	mov	r0, r4
   b4d36:	f003 f958 	bl	b7fea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
        int bang_index = message.find("!") + 1;    // Index of the end of the first part.
   b4d3a:	494f      	ldr	r1, [pc, #316]	; (b4e78 <_Z9myHandlerPKcS0_+0x260>)
   b4d3c:	1c43      	adds	r3, r0, #1
   b4d3e:	f100 070a 	add.w	r7, r0, #10
   b4d42:	462a      	mov	r2, r5
   b4d44:	4620      	mov	r0, r4
   b4d46:	ee09 3a10 	vmov	s18, r3
   b4d4a:	f003 f94e 	bl	b7fea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4d4e:	1c46      	adds	r6, r0, #1
        while (bang_index > 0)
   b4d50:	2e00      	cmp	r6, #0
   b4d52:	dd76      	ble.n	b4e42 <_Z9myHandlerPKcS0_+0x22a>
            cost_hour[idx] = stoi(message.substr(hh_index, 2));                         // Hour (hh) converted to int. 
   b4d54:	ee19 2a10 	vmov	r2, s18
   b4d58:	4621      	mov	r1, r4
   b4d5a:	2302      	movs	r3, #2
   b4d5c:	a806      	add	r0, sp, #24
   b4d5e:	f003 f99d 	bl	b809c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b4d62:	f8dd b018 	ldr.w	fp, [sp, #24]
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b4d66:	f001 fa77 	bl	b6258 <__errno>
   b4d6a:	6803      	ldr	r3, [r0, #0]
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	f001 fa73 	bl	b6258 <__errno>
   b4d72:	2300      	movs	r3, #0
   b4d74:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b4d76:	220a      	movs	r2, #10
   b4d78:	a902      	add	r1, sp, #8
   b4d7a:	4658      	mov	r0, fp
   b4d7c:	f004 fa70 	bl	b9260 <strtol>

      if (__endptr == __str)
   b4d80:	9b02      	ldr	r3, [sp, #8]
   b4d82:	459b      	cmp	fp, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b4d84:	4680      	mov	r8, r0
      if (__endptr == __str)
   b4d86:	d102      	bne.n	b4d8e <_Z9myHandlerPKcS0_+0x176>
	std::__throw_invalid_argument(__name);
   b4d88:	483c      	ldr	r0, [pc, #240]	; (b4e7c <_Z9myHandlerPKcS0_+0x264>)
   b4d8a:	f002 ff63 	bl	b7c54 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
   b4d8e:	f001 fa63 	bl	b6258 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b4d92:	6803      	ldr	r3, [r0, #0]
   b4d94:	2b22      	cmp	r3, #34	; 0x22
   b4d96:	d102      	bne.n	b4d9e <_Z9myHandlerPKcS0_+0x186>
	std::__throw_out_of_range(__name);
   b4d98:	4838      	ldr	r0, [pc, #224]	; (b4e7c <_Z9myHandlerPKcS0_+0x264>)
   b4d9a:	f002 ff61 	bl	b7c60 <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b4d9e:	f001 fa5b 	bl	b6258 <__errno>
   b4da2:	6803      	ldr	r3, [r0, #0]
   b4da4:	b91b      	cbnz	r3, b4dae <_Z9myHandlerPKcS0_+0x196>
   b4da6:	f001 fa57 	bl	b6258 <__errno>
   b4daa:	9b01      	ldr	r3, [sp, #4]
   b4dac:	6003      	str	r3, [r0, #0]
   b4dae:	f84a 8b04 	str.w	r8, [sl], #4
      { _M_dispose(); }
   b4db2:	a806      	add	r0, sp, #24
   b4db4:	f003 f842 	bl	b7e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
            cost[idx] = stof(message.substr(pp_index, bang_index - pp_index)) / 1000;   // Price converted to float.
   b4db8:	1bf3      	subs	r3, r6, r7
   b4dba:	463a      	mov	r2, r7
   b4dbc:	4621      	mov	r1, r4
   b4dbe:	a806      	add	r0, sp, #24
   b4dc0:	f003 f96c 	bl	b809c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b4dc4:	f8dd 8018 	ldr.w	r8, [sp, #24]
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b4dc8:	f001 fa46 	bl	b6258 <__errno>
   b4dcc:	f8d0 b000 	ldr.w	fp, [r0]
   b4dd0:	f001 fa42 	bl	b6258 <__errno>
   b4dd4:	2300      	movs	r3, #0
   b4dd6:	6003      	str	r3, [r0, #0]
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b4dd8:	a902      	add	r1, sp, #8
   b4dda:	4640      	mov	r0, r8
   b4ddc:	f004 f962 	bl	b90a4 <strtof>
      if (__endptr == __str)
   b4de0:	9b02      	ldr	r3, [sp, #8]
   b4de2:	4598      	cmp	r8, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b4de4:	eeb0 8a40 	vmov.f32	s16, s0
      if (__endptr == __str)
   b4de8:	d101      	bne.n	b4dee <_Z9myHandlerPKcS0_+0x1d6>
	std::__throw_invalid_argument(__name);
   b4dea:	4825      	ldr	r0, [pc, #148]	; (b4e80 <_Z9myHandlerPKcS0_+0x268>)
   b4dec:	e7cd      	b.n	b4d8a <_Z9myHandlerPKcS0_+0x172>
      else if (errno == ERANGE
   b4dee:	f001 fa33 	bl	b6258 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b4df2:	6803      	ldr	r3, [r0, #0]
   b4df4:	2b22      	cmp	r3, #34	; 0x22
   b4df6:	d101      	bne.n	b4dfc <_Z9myHandlerPKcS0_+0x1e4>
	std::__throw_out_of_range(__name);
   b4df8:	4821      	ldr	r0, [pc, #132]	; (b4e80 <_Z9myHandlerPKcS0_+0x268>)
   b4dfa:	e7ce      	b.n	b4d9a <_Z9myHandlerPKcS0_+0x182>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b4dfc:	f001 fa2c 	bl	b6258 <__errno>
   b4e00:	6803      	ldr	r3, [r0, #0]
   b4e02:	b91b      	cbnz	r3, b4e0c <_Z9myHandlerPKcS0_+0x1f4>
   b4e04:	f001 fa28 	bl	b6258 <__errno>
   b4e08:	f8c0 b000 	str.w	fp, [r0]
   b4e0c:	eec8 7a28 	vdiv.f32	s15, s16, s17

            message.erase(0, bang_index);           // Erase the part we read, ready for next iteration           
            bang_index = message.find("!") + 1;    // Find index of next "!".
            idx++;                                  // Increment array index.
   b4e10:	3501      	adds	r5, #1
            cost[idx] = stof(message.substr(pp_index, bang_index - pp_index)) / 1000;   // Price converted to float.
   b4e12:	ee17 0a90 	vmov	r0, s15
   b4e16:	f7ff fa67 	bl	b42e8 <__aeabi_f2d>
   b4e1a:	e8e9 0102 	strd	r0, r1, [r9], #8
   b4e1e:	a806      	add	r0, sp, #24
   b4e20:	f003 f80c 	bl	b7e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b4e24:	6862      	ldr	r2, [r4, #4]
   b4e26:	42b2      	cmp	r2, r6
   b4e28:	bf28      	it	cs
   b4e2a:	4632      	movcs	r2, r6
   b4e2c:	2100      	movs	r1, #0
   b4e2e:	4620      	mov	r0, r4
   b4e30:	f003 f873 	bl	b7f1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
            bang_index = message.find("!") + 1;    // Find index of next "!".
   b4e34:	4910      	ldr	r1, [pc, #64]	; (b4e78 <_Z9myHandlerPKcS0_+0x260>)
   b4e36:	2200      	movs	r2, #0
   b4e38:	4620      	mov	r0, r4
   b4e3a:	f003 f8d6 	bl	b7fea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4e3e:	1c46      	adds	r6, r0, #1
        while (bang_index > 0)
   b4e40:	e786      	b.n	b4d50 <_Z9myHandlerPKcS0_+0x138>
        } 

        range = idx;
   b4e42:	4b10      	ldr	r3, [pc, #64]	; (b4e84 <_Z9myHandlerPKcS0_+0x26c>)
   b4e44:	601d      	str	r5, [r3, #0]
    }
}
   b4e46:	b00d      	add	sp, #52	; 0x34
   b4e48:	ecbd 8b04 	vpop	{d8-d9}
   b4e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e50:	000ba469 	.word	0x000ba469
   b4e54:	000ba478 	.word	0x000ba478
   b4e58:	000ba48e 	.word	0x000ba48e
   b4e5c:	2003cee0 	.word	0x2003cee0
   b4e60:	000ba4b5 	.word	0x000ba4b5
   b4e64:	000ba4e4 	.word	0x000ba4e4
   b4e68:	2003d20f 	.word	0x2003d20f
   b4e6c:	000ba4f9 	.word	0x000ba4f9
   b4e70:	447a0000 	.word	0x447a0000
   b4e74:	000ba514 	.word	0x000ba514
   b4e78:	000ba516 	.word	0x000ba516
   b4e7c:	000ba518 	.word	0x000ba518
   b4e80:	000ba51d 	.word	0x000ba51d
   b4e84:	2003ccfc 	.word	0x2003ccfc
   b4e88:	2003d20e 	.word	0x2003d20e
   b4e8c:	2003d20c 	.word	0x2003d20c
   b4e90:	2003cf68 	.word	0x2003cf68
   b4e94:	2003d0e8 	.word	0x2003d0e8

000b4e98 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4e98:	b40e      	push	{r1, r2, r3}
   b4e9a:	b503      	push	{r0, r1, lr}
   b4e9c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4e9e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ea0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4ea4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4ea6:	f001 fc1e 	bl	b66e6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4eaa:	b002      	add	sp, #8
   b4eac:	f85d eb04 	ldr.w	lr, [sp], #4
   b4eb0:	b003      	add	sp, #12
   b4eb2:	4770      	bx	lr

000b4eb4 <_Z9reconnectv>:
    // Wait 1 second
    delay(1000);
}

void reconnect(void)
{
   b4eb4:	b500      	push	{lr}
   b4eb6:	b089      	sub	sp, #36	; 0x24
    Serial.println("Reconnecting");
   b4eb8:	f002 f948 	bl	b714c <_Z16_fetch_usbserialv>
   b4ebc:	4910      	ldr	r1, [pc, #64]	; (b4f00 <_Z9reconnectv+0x4c>)
   b4ebe:	f001 fbea 	bl	b6696 <_ZN5Print7printlnEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4ec2:	4910      	ldr	r1, [pc, #64]	; (b4f04 <_Z9reconnectv+0x50>)
   b4ec4:	a804      	add	r0, sp, #16
   b4ec6:	f001 fad0 	bl	b646a <_ZN6StringC1EPK19__FlashStringHelper>
    client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b4eca:	f001 fcb0 	bl	b682e <_ZN9TimeClass3nowEv>
   b4ece:	220a      	movs	r2, #10
   b4ed0:	4601      	mov	r1, r0
   b4ed2:	4668      	mov	r0, sp
   b4ed4:	f001 fb09 	bl	b64ea <_ZN6StringC1Elh>
   b4ed8:	4669      	mov	r1, sp
   b4eda:	a804      	add	r0, sp, #16
   b4edc:	f001 fb33 	bl	b6546 <_ZplRK15StringSumHelperRK6String>
   b4ee0:	4b09      	ldr	r3, [pc, #36]	; (b4f08 <_Z9reconnectv+0x54>)
   b4ee2:	6801      	ldr	r1, [r0, #0]
   b4ee4:	4809      	ldr	r0, [pc, #36]	; (b4f0c <_Z9reconnectv+0x58>)
   b4ee6:	461a      	mov	r2, r3
   b4ee8:	f000 fd00 	bl	b58ec <_ZN4MQTT7connectEPKcS1_S1_>
   b4eec:	4668      	mov	r0, sp
   b4eee:	f001 fa71 	bl	b63d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4ef2:	a804      	add	r0, sp, #16
   b4ef4:	f001 fa6e 	bl	b63d4 <_ZN6StringD1Ev>
}
   b4ef8:	b009      	add	sp, #36	; 0x24
   b4efa:	f85d fb04 	ldr.w	pc, [sp], #4
   b4efe:	bf00      	nop
   b4f00:	000ba522 	.word	0x000ba522
   b4f04:	000ba52f 	.word	0x000ba52f
   b4f08:	000ba53c 	.word	0x000ba53c
   b4f0c:	2003cf00 	.word	0x2003cf00

000b4f10 <_Z8calc_lowv>:

/** @brief The purpose of the function is to identify the hours at which the highest and lowest cost are.
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 */
void calc_low(void)
{
   b4f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f14:	ed2d 8b04 	vpush	{d8-d9}
    Serial.println("CALCULATING");
   b4f18:	f002 f918 	bl	b714c <_Z16_fetch_usbserialv>
   b4f1c:	4954      	ldr	r1, [pc, #336]	; (b5070 <_Z8calc_lowv+0x160>)
   b4f1e:	f8df 817c 	ldr.w	r8, [pc, #380]	; b509c <_Z8calc_lowv+0x18c>
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value
   b4f22:	4f54      	ldr	r7, [pc, #336]	; (b5074 <_Z8calc_lowv+0x164>)
    Serial.println("CALCULATING");
   b4f24:	f001 fbb7 	bl	b6696 <_ZN5Print7printlnEPKc>

    for (int i = 0; i < range; i++)
   b4f28:	4b53      	ldr	r3, [pc, #332]	; (b5078 <_Z8calc_lowv+0x168>)
    double last_big = 0;
   b4f2a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; b5060 <_Z8calc_lowv+0x150>
    for (int i = 0; i < range; i++)
   b4f2e:	f8d3 b000 	ldr.w	fp, [r3]
    double last_big = 0;
   b4f32:	eeb0 8a47 	vmov.f32	s16, s14
   b4f36:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < range; i++)
   b4f3a:	46c2      	mov	sl, r8
   b4f3c:	f04f 0900 	mov.w	r9, #0
    double last_small = 100; // Assign any absurdly high value
   b4f40:	2600      	movs	r6, #0
    for (int i = 0; i < range; i++)
   b4f42:	45cb      	cmp	fp, r9
   b4f44:	dd16      	ble.n	b4f74 <_Z8calc_lowv+0x64>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4f46:	e8fa 4502 	ldrd	r4, r5, [sl], #8
   b4f4a:	ec53 2b18 	vmov	r2, r3, d8
   b4f4e:	4620      	mov	r0, r4
   b4f50:	4629      	mov	r1, r5
   b4f52:	f7ff fcb1 	bl	b48b8 <__aeabi_dcmpgt>
   b4f56:	b108      	cbz	r0, b4f5c <_Z8calc_lowv+0x4c>
        {
            last_big = cost[i];
   b4f58:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b4f5c:	4632      	mov	r2, r6
   b4f5e:	463b      	mov	r3, r7
   b4f60:	4620      	mov	r0, r4
   b4f62:	4629      	mov	r1, r5
   b4f64:	f7ff fc8a 	bl	b487c <__aeabi_dcmplt>
   b4f68:	b108      	cbz	r0, b4f6e <_Z8calc_lowv+0x5e>
        {
            last_small = cost[i];
   b4f6a:	4626      	mov	r6, r4
   b4f6c:	462f      	mov	r7, r5
    for (int i = 0; i < range; i++)
   b4f6e:	f109 0901 	add.w	r9, r9, #1
   b4f72:	e7e6      	b.n	b4f42 <_Z8calc_lowv+0x32>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b4f74:	4632      	mov	r2, r6
   b4f76:	463b      	mov	r3, r7
   b4f78:	ec51 0b18 	vmov	r0, r1, d8
   b4f7c:	f7ff f854 	bl	b4028 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4f80:	a339      	add	r3, pc, #228	; (adr r3, b5068 <_Z8calc_lowv+0x158>)
   b4f82:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f86:	f7ff fa07 	bl	b4398 <__aeabi_dmul>
   b4f8a:	4632      	mov	r2, r6
   b4f8c:	463b      	mov	r3, r7
   b4f8e:	f7ff f84d 	bl	b402c <__adddf3>

    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= range; i++)
   b4f92:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4f94:	ec41 0b19 	vmov	d9, r0, r1
    {

        if (cost[i] < small_offset)
        {
            low_range_hour[idx] = cost_hour[i];
   b4f98:	f8df 9104 	ldr.w	r9, [pc, #260]	; b50a0 <_Z8calc_lowv+0x190>
   b4f9c:	f8df a104 	ldr.w	sl, [pc, #260]	; b50a4 <_Z8calc_lowv+0x194>
    int idx = 0;
   b4fa0:	462c      	mov	r4, r5
    for (int i = 0; i <= range; i++)
   b4fa2:	45ab      	cmp	fp, r5
   b4fa4:	db0d      	blt.n	b4fc2 <_Z8calc_lowv+0xb2>
        if (cost[i] < small_offset)
   b4fa6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   b4faa:	ec53 2b19 	vmov	r2, r3, d9
   b4fae:	f7ff fc65 	bl	b487c <__aeabi_dcmplt>
   b4fb2:	b120      	cbz	r0, b4fbe <_Z8calc_lowv+0xae>
            low_range_hour[idx] = cost_hour[i];
   b4fb4:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   b4fb8:	f849 3024 	str.w	r3, [r9, r4, lsl #2]

            idx++;
   b4fbc:	3401      	adds	r4, #1
    for (int i = 0; i <= range; i++)
   b4fbe:	3501      	adds	r5, #1
   b4fc0:	e7ef      	b.n	b4fa2 <_Z8calc_lowv+0x92>
        }
    }

    // Calculations have been done - clear flag
    populate = false;
   b4fc2:	4b2e      	ldr	r3, [pc, #184]	; (b507c <_Z8calc_lowv+0x16c>)
   b4fc4:	2500      	movs	r5, #0
   b4fc6:	701d      	strb	r5, [r3, #0]
    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b4fc8:	f002 f8c0 	bl	b714c <_Z16_fetch_usbserialv>
   b4fcc:	ec53 2b18 	vmov	r2, r3, d8
   b4fd0:	492b      	ldr	r1, [pc, #172]	; (b5080 <_Z8calc_lowv+0x170>)
   b4fd2:	f7ff ff61 	bl	b4e98 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b4fd6:	f002 f8b9 	bl	b714c <_Z16_fetch_usbserialv>
   b4fda:	4632      	mov	r2, r6
   b4fdc:	4929      	ldr	r1, [pc, #164]	; (b5084 <_Z8calc_lowv+0x174>)
   b4fde:	4e2a      	ldr	r6, [pc, #168]	; (b5088 <_Z8calc_lowv+0x178>)
   b4fe0:	463b      	mov	r3, r7
   b4fe2:	f7ff ff59 	bl	b4e98 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4fe6:	f002 f8b1 	bl	b714c <_Z16_fetch_usbserialv>
   b4fea:	4928      	ldr	r1, [pc, #160]	; (b508c <_Z8calc_lowv+0x17c>)
   b4fec:	f7ff ff54 	bl	b4e98 <_ZN5Print6printfEPKcz>

    int i = 0;
    if (idx > 0)
   b4ff0:	b1e4      	cbz	r4, b502c <_Z8calc_lowv+0x11c>
   b4ff2:	6831      	ldr	r1, [r6, #0]
   b4ff4:	4a26      	ldr	r2, [pc, #152]	; (b5090 <_Z8calc_lowv+0x180>)
    {
        while (i <= idx)
        {
            start_stop[cnt][0] = low_range_hour[i];
   b4ff6:	f8df c0a8 	ldr.w	ip, [pc, #168]	; b50a0 <_Z8calc_lowv+0x190>
   b4ffa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    int i = 0;
   b4ffe:	462b      	mov	r3, r5
            start_stop[cnt][0] = low_range_hour[i];
   b5000:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   b5004:	6010      	str	r0, [r2, #0]
   b5006:	eb0c 0783 	add.w	r7, ip, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b500a:	6838      	ldr	r0, [r7, #0]
   b500c:	f857 5f04 	ldr.w	r5, [r7, #4]!
   b5010:	3d01      	subs	r5, #1
   b5012:	42a8      	cmp	r0, r5
   b5014:	f103 0301 	add.w	r3, r3, #1
   b5018:	d0f7      	beq.n	b500a <_Z8calc_lowv+0xfa>
            {
                i++;
            }

            start_stop[cnt][1] = low_range_hour[i] + 1;
   b501a:	3001      	adds	r0, #1
        while (i <= idx)
   b501c:	42a3      	cmp	r3, r4
            start_stop[cnt][1] = low_range_hour[i] + 1;
   b501e:	6050      	str	r0, [r2, #4]

            cnt++;
   b5020:	f101 0001 	add.w	r0, r1, #1
        while (i <= idx)
   b5024:	f102 0208 	add.w	r2, r2, #8
   b5028:	dd11      	ble.n	b504e <_Z8calc_lowv+0x13e>
            i++;
        }
        cnt--;
   b502a:	6031      	str	r1, [r6, #0]
   b502c:	4c18      	ldr	r4, [pc, #96]	; (b5090 <_Z8calc_lowv+0x180>)
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n", start_stop[z][0], start_stop[z][1]);
   b502e:	4f19      	ldr	r7, [pc, #100]	; (b5094 <_Z8calc_lowv+0x184>)
            cnt++;
   b5030:	2500      	movs	r5, #0
    for (int z = 0; z < cnt; z++)
   b5032:	6833      	ldr	r3, [r6, #0]
   b5034:	42ab      	cmp	r3, r5
   b5036:	f104 0408 	add.w	r4, r4, #8
   b503a:	dd0a      	ble.n	b5052 <_Z8calc_lowv+0x142>
        Serial.printf("%02d to %02d\n", start_stop[z][0], start_stop[z][1]);
   b503c:	f002 f886 	bl	b714c <_Z16_fetch_usbserialv>
   b5040:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b5044:	4639      	mov	r1, r7
   b5046:	f7ff ff27 	bl	b4e98 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b504a:	3501      	adds	r5, #1
   b504c:	e7f1      	b.n	b5032 <_Z8calc_lowv+0x122>
            cnt++;
   b504e:	4601      	mov	r1, r0
   b5050:	e7d6      	b.n	b5000 <_Z8calc_lowv+0xf0>
    }

    work = true;
   b5052:	4b11      	ldr	r3, [pc, #68]	; (b5098 <_Z8calc_lowv+0x188>)
   b5054:	2201      	movs	r2, #1
   b5056:	701a      	strb	r2, [r3, #0]
}
   b5058:	ecbd 8b04 	vpop	{d8-d9}
   b505c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   b5068:	33333333 	.word	0x33333333
   b506c:	3fd33333 	.word	0x3fd33333
   b5070:	000ba541 	.word	0x000ba541
   b5074:	40590000 	.word	0x40590000
   b5078:	2003ccfc 	.word	0x2003ccfc
   b507c:	2003d20c 	.word	0x2003d20c
   b5080:	000ba54d 	.word	0x000ba54d
   b5084:	000ba56b 	.word	0x000ba56b
   b5088:	2003cf60 	.word	0x2003cf60
   b508c:	000ba588 	.word	0x000ba588
   b5090:	2003dc14 	.word	0x2003dc14
   b5094:	000ba5c6 	.word	0x000ba5c6
   b5098:	2003e67a 	.word	0x2003e67a
   b509c:	2003cf68 	.word	0x2003cf68
   b50a0:	2003d1ac 	.word	0x2003d1ac
   b50a4:	2003d0e8 	.word	0x2003d0e8

000b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b50a8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b50aa:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b50ac:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b50ae:	b17c      	cbz	r4, b50d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b50b0:	6863      	ldr	r3, [r4, #4]
   b50b2:	3b01      	subs	r3, #1
   b50b4:	6063      	str	r3, [r4, #4]
   b50b6:	b95b      	cbnz	r3, b50d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b50b8:	6823      	ldr	r3, [r4, #0]
   b50ba:	4620      	mov	r0, r4
   b50bc:	689b      	ldr	r3, [r3, #8]
   b50be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b50c0:	68a3      	ldr	r3, [r4, #8]
   b50c2:	3b01      	subs	r3, #1
   b50c4:	60a3      	str	r3, [r4, #8]
   b50c6:	b91b      	cbnz	r3, b50d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b50c8:	6823      	ldr	r3, [r4, #0]
   b50ca:	4620      	mov	r0, r4
   b50cc:	68db      	ldr	r3, [r3, #12]
   b50ce:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b50d0:	4628      	mov	r0, r5
   b50d2:	bd38      	pop	{r3, r4, r5, pc}

000b50d4 <loop>:
{
   b50d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (client.isConnected())
   b50d8:	4844      	ldr	r0, [pc, #272]	; (b51ec <loop+0x118>)
{
   b50da:	b08a      	sub	sp, #40	; 0x28
    if (client.isConnected())
   b50dc:	f000 fb16 	bl	b570c <_ZN4MQTT11isConnectedEv>
   b50e0:	2800      	cmp	r0, #0
   b50e2:	d048      	beq.n	b5176 <loop+0xa2>
        client.loop();
   b50e4:	4841      	ldr	r0, [pc, #260]	; (b51ec <loop+0x118>)
   b50e6:	f000 fce8 	bl	b5aba <_ZN4MQTT4loopEv>
    if (printer) // Debugging flag set in interrupt handler
   b50ea:	4c41      	ldr	r4, [pc, #260]	; (b51f0 <loop+0x11c>)
   b50ec:	7823      	ldrb	r3, [r4, #0]
   b50ee:	b143      	cbz	r3, b5102 <loop+0x2e>
        Serial.printf("Light: %d\n", calc_power);
   b50f0:	f002 f82c 	bl	b714c <_Z16_fetch_usbserialv>
   b50f4:	4b3f      	ldr	r3, [pc, #252]	; (b51f4 <loop+0x120>)
   b50f6:	4940      	ldr	r1, [pc, #256]	; (b51f8 <loop+0x124>)
   b50f8:	681a      	ldr	r2, [r3, #0]
   b50fa:	f7ff fecd 	bl	b4e98 <_ZN5Print6printfEPKcz>
        printer = false;
   b50fe:	2300      	movs	r3, #0
   b5100:	7023      	strb	r3, [r4, #0]
    if (populate)
   b5102:	4b3e      	ldr	r3, [pc, #248]	; (b51fc <loop+0x128>)
   b5104:	781b      	ldrb	r3, [r3, #0]
   b5106:	b17b      	cbz	r3, b5128 <loop+0x54>
        calc_low();
   b5108:	f7ff ff02 	bl	b4f10 <_Z8calc_lowv>
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b510c:	f002 f81e 	bl	b714c <_Z16_fetch_usbserialv>
   b5110:	4604      	mov	r4, r0
   b5112:	f001 fb9d 	bl	b6850 <_ZN9TimeClass4hourEv>
   b5116:	4605      	mov	r5, r0
   b5118:	f001 fba6 	bl	b6868 <_ZN9TimeClass6minuteEv>
   b511c:	4938      	ldr	r1, [pc, #224]	; (b5200 <loop+0x12c>)
   b511e:	4603      	mov	r3, r0
   b5120:	1caa      	adds	r2, r5, #2
   b5122:	4620      	mov	r0, r4
   b5124:	f7ff feb8 	bl	b4e98 <_ZN5Print6printfEPKcz>
    if (work)
   b5128:	4e36      	ldr	r6, [pc, #216]	; (b5204 <loop+0x130>)
   b512a:	7833      	ldrb	r3, [r6, #0]
   b512c:	2b00      	cmp	r3, #0
   b512e:	d041      	beq.n	b51b4 <loop+0xe0>
        Serial.printf("In work\n");
   b5130:	f002 f80c 	bl	b714c <_Z16_fetch_usbserialv>
   b5134:	4934      	ldr	r1, [pc, #208]	; (b5208 <loop+0x134>)
   b5136:	4c35      	ldr	r4, [pc, #212]	; (b520c <loop+0x138>)
        for (int z = 0; z < cnt; z++)
   b5138:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b5238 <loop+0x164>
            data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b513c:	4f34      	ldr	r7, [pc, #208]	; (b5210 <loop+0x13c>)
        Serial.printf("In work\n");
   b513e:	f7ff feab 	bl	b4e98 <_ZN5Print6printfEPKcz>
        String data = "Cheap(ish) hours of the day: ";
   b5142:	4934      	ldr	r1, [pc, #208]	; (b5214 <loop+0x140>)
   b5144:	a802      	add	r0, sp, #8
   b5146:	f001 f990 	bl	b646a <_ZN6StringC1EPK19__FlashStringHelper>
        for (int z = 0; z < cnt; z++)
   b514a:	2500      	movs	r5, #0
   b514c:	f8d8 3000 	ldr.w	r3, [r8]
   b5150:	42ab      	cmp	r3, r5
   b5152:	f104 0408 	add.w	r4, r4, #8
   b5156:	dd16      	ble.n	b5186 <loop+0xb2>
            data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b5158:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b515c:	4639      	mov	r1, r7
   b515e:	a806      	add	r0, sp, #24
   b5160:	f001 f9fe 	bl	b6560 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5164:	a906      	add	r1, sp, #24
   b5166:	a802      	add	r0, sp, #8
   b5168:	f001 f9e9 	bl	b653e <_ZN6String6concatERKS_>
   b516c:	a806      	add	r0, sp, #24
   b516e:	f001 f931 	bl	b63d4 <_ZN6StringD1Ev>
        for (int z = 0; z < cnt; z++)
   b5172:	3501      	adds	r5, #1
   b5174:	e7ea      	b.n	b514c <loop+0x78>
        Serial.printf("Client disconnected\n");
   b5176:	f001 ffe9 	bl	b714c <_Z16_fetch_usbserialv>
   b517a:	4927      	ldr	r1, [pc, #156]	; (b5218 <loop+0x144>)
   b517c:	f7ff fe8c 	bl	b4e98 <_ZN5Print6printfEPKcz>
        reconnect();
   b5180:	f7ff fe98 	bl	b4eb4 <_Z9reconnectv>
   b5184:	e7b1      	b.n	b50ea <loop+0x16>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5186:	4b25      	ldr	r3, [pc, #148]	; (b521c <loop+0x148>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5188:	9a02      	ldr	r2, [sp, #8]
   b518a:	781b      	ldrb	r3, [r3, #0]
   b518c:	4924      	ldr	r1, [pc, #144]	; (b5220 <loop+0x14c>)
   b518e:	f88d 3000 	strb.w	r3, [sp]
   b5192:	a806      	add	r0, sp, #24
   b5194:	233c      	movs	r3, #60	; 0x3c
   b5196:	f001 fd85 	bl	b6ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b519a:	a807      	add	r0, sp, #28
   b519c:	f7ff ff84 	bl	b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        client.publish("prices", data);
   b51a0:	9a02      	ldr	r2, [sp, #8]
   b51a2:	4920      	ldr	r1, [pc, #128]	; (b5224 <loop+0x150>)
   b51a4:	4811      	ldr	r0, [pc, #68]	; (b51ec <loop+0x118>)
   b51a6:	f000 fc2c 	bl	b5a02 <_ZN4MQTT7publishEPKcS1_>
        work = false;
   b51aa:	2300      	movs	r3, #0
        String data = "Cheap(ish) hours of the day: ";
   b51ac:	a802      	add	r0, sp, #8
        work = false;
   b51ae:	7033      	strb	r3, [r6, #0]
        String data = "Cheap(ish) hours of the day: ";
   b51b0:	f001 f910 	bl	b63d4 <_ZN6StringD1Ev>
    if (transmit_value) // Did we receive a request for updated values
   b51b4:	4c1c      	ldr	r4, [pc, #112]	; (b5228 <loop+0x154>)
   b51b6:	7823      	ldrb	r3, [r4, #0]
   b51b8:	b18b      	cbz	r3, b51de <loop+0x10a>
        Serial.printf("Received power/get\n");
   b51ba:	f001 ffc7 	bl	b714c <_Z16_fetch_usbserialv>
   b51be:	491b      	ldr	r1, [pc, #108]	; (b522c <loop+0x158>)
   b51c0:	f7ff fe6a 	bl	b4e98 <_ZN5Print6printfEPKcz>
        sprintf(values, "%d", calc_power);
   b51c4:	4b0b      	ldr	r3, [pc, #44]	; (b51f4 <loop+0x120>)
   b51c6:	491a      	ldr	r1, [pc, #104]	; (b5230 <loop+0x15c>)
   b51c8:	681a      	ldr	r2, [r3, #0]
   b51ca:	a806      	add	r0, sp, #24
   b51cc:	f001 f824 	bl	b6218 <sprintf>
        client.publish("power", values);
   b51d0:	4918      	ldr	r1, [pc, #96]	; (b5234 <loop+0x160>)
   b51d2:	4806      	ldr	r0, [pc, #24]	; (b51ec <loop+0x118>)
   b51d4:	aa06      	add	r2, sp, #24
   b51d6:	f000 fc14 	bl	b5a02 <_ZN4MQTT7publishEPKcS1_>
        transmit_value = false;
   b51da:	2300      	movs	r3, #0
   b51dc:	7023      	strb	r3, [r4, #0]
    delay(1000);
   b51de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b51e2:	b00a      	add	sp, #40	; 0x28
   b51e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(1000);
   b51e8:	f001 bb74 	b.w	b68d4 <delay>
   b51ec:	2003cf00 	.word	0x2003cf00
   b51f0:	2003d20d 	.word	0x2003d20d
   b51f4:	2003cefc 	.word	0x2003cefc
   b51f8:	000ba5e9 	.word	0x000ba5e9
   b51fc:	2003d20c 	.word	0x2003d20c
   b5200:	000ba5f4 	.word	0x000ba5f4
   b5204:	2003e67a 	.word	0x2003e67a
   b5208:	000ba60e 	.word	0x000ba60e
   b520c:	2003dc14 	.word	0x2003dc14
   b5210:	000ba635 	.word	0x000ba635
   b5214:	000ba617 	.word	0x000ba617
   b5218:	000ba5d4 	.word	0x000ba5d4
   b521c:	2003cef9 	.word	0x2003cef9
   b5220:	000ba644 	.word	0x000ba644
   b5224:	000ba739 	.word	0x000ba739
   b5228:	2003e679 	.word	0x2003e679
   b522c:	000ba654 	.word	0x000ba654
   b5230:	000ba71a 	.word	0x000ba71a
   b5234:	000ba668 	.word	0x000ba668
   b5238:	2003cf60 	.word	0x2003cf60

000b523c <_Z8get_datai>:

/** @brief Puplishes a formatted command string to Particle cloud that fires off a webhook
 */
void get_data(int day)
{
    rec_cnt = 0;
   b523c:	4a37      	ldr	r2, [pc, #220]	; (b531c <_Z8get_datai+0xe0>)
   b523e:	2300      	movs	r3, #0
{
   b5240:	b530      	push	{r4, r5, lr}
    rec_cnt = 0;
   b5242:	7013      	strb	r3, [r2, #0]
    range = 48;
   b5244:	4a36      	ldr	r2, [pc, #216]	; (b5320 <_Z8get_datai+0xe4>)
   b5246:	2130      	movs	r1, #48	; 0x30
   b5248:	6011      	str	r1, [r2, #0]
    cnt = 0;
   b524a:	4a36      	ldr	r2, [pc, #216]	; (b5324 <_Z8get_datai+0xe8>)
   b524c:	6013      	str	r3, [r2, #0]
    temp[0] = 0;
   b524e:	4a36      	ldr	r2, [pc, #216]	; (b5328 <_Z8get_datai+0xec>)
{
   b5250:	b09f      	sub	sp, #124	; 0x7c
    temp[0] = 0;
   b5252:	7013      	strb	r3, [r2, #0]
{
   b5254:	4604      	mov	r4, r0

    // String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
    // String data = "{ \"year\": \"" + (String)Time.year()  + "\", " +
    String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b5256:	f001 fb27 	bl	b68a8 <_ZN9TimeClass4yearEv>
   b525a:	4934      	ldr	r1, [pc, #208]	; (b532c <_Z8get_datai+0xf0>)
   b525c:	4602      	mov	r2, r0
   b525e:	a806      	add	r0, sp, #24
   b5260:	f001 f97e 	bl	b6560 <_ZN6String6formatEPKcz>
	StringSumHelper(const String &s) : String(s) {}
   b5264:	a906      	add	r1, sp, #24
   b5266:	a80e      	add	r0, sp, #56	; 0x38
   b5268:	f001 f922 	bl	b64b0 <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b526c:	f001 fb14 	bl	b6898 <_ZN9TimeClass5monthEv>
   b5270:	492f      	ldr	r1, [pc, #188]	; (b5330 <_Z8get_datai+0xf4>)
   b5272:	4602      	mov	r2, r0
   b5274:	a80a      	add	r0, sp, #40	; 0x28
   b5276:	f001 f973 	bl	b6560 <_ZN6String6formatEPKcz>
   b527a:	a90a      	add	r1, sp, #40	; 0x28
   b527c:	a80e      	add	r0, sp, #56	; 0x38
   b527e:	f001 f962 	bl	b6546 <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day\": \"%02d\", ", day) +
   b5282:	4622      	mov	r2, r4
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b5284:	4605      	mov	r5, r0
                  String::format("\"day\": \"%02d\", ", day) +
   b5286:	492b      	ldr	r1, [pc, #172]	; (b5334 <_Z8get_datai+0xf8>)
   b5288:	a812      	add	r0, sp, #72	; 0x48
   b528a:	f001 f969 	bl	b6560 <_ZN6String6formatEPKcz>
   b528e:	a912      	add	r1, sp, #72	; 0x48
   b5290:	4628      	mov	r0, r5
   b5292:	f001 f958 	bl	b6546 <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b5296:	1ca2      	adds	r2, r4, #2
                  String::format("\"day\": \"%02d\", ", day) +
   b5298:	4605      	mov	r5, r0
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b529a:	4927      	ldr	r1, [pc, #156]	; (b5338 <_Z8get_datai+0xfc>)
   b529c:	a816      	add	r0, sp, #88	; 0x58
   b529e:	f001 f95f 	bl	b6560 <_ZN6String6formatEPKcz>
   b52a2:	a916      	add	r1, sp, #88	; 0x58
   b52a4:	4628      	mov	r0, r5
   b52a6:	f001 f94e 	bl	b6546 <_ZplRK15StringSumHelperRK6String>
   b52aa:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b52ac:	f001 fad0 	bl	b6850 <_ZN9TimeClass4hourEv>
   b52b0:	4922      	ldr	r1, [pc, #136]	; (b533c <_Z8get_datai+0x100>)
   b52b2:	4602      	mov	r2, r0
   b52b4:	a81a      	add	r0, sp, #104	; 0x68
   b52b6:	f001 f953 	bl	b6560 <_ZN6String6formatEPKcz>
   b52ba:	a91a      	add	r1, sp, #104	; 0x68
   b52bc:	4620      	mov	r0, r4
   b52be:	f001 f942 	bl	b6546 <_ZplRK15StringSumHelperRK6String>
   b52c2:	4601      	mov	r1, r0
   b52c4:	a802      	add	r0, sp, #8
   b52c6:	f001 f8f3 	bl	b64b0 <_ZN6StringC1ERKS_>
   b52ca:	a81a      	add	r0, sp, #104	; 0x68
   b52cc:	f001 f882 	bl	b63d4 <_ZN6StringD1Ev>
   b52d0:	a816      	add	r0, sp, #88	; 0x58
   b52d2:	f001 f87f 	bl	b63d4 <_ZN6StringD1Ev>
   b52d6:	a812      	add	r0, sp, #72	; 0x48
   b52d8:	f001 f87c 	bl	b63d4 <_ZN6StringD1Ev>
   b52dc:	a80a      	add	r0, sp, #40	; 0x28
   b52de:	f001 f879 	bl	b63d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b52e2:	a80e      	add	r0, sp, #56	; 0x38
   b52e4:	f001 f876 	bl	b63d4 <_ZN6StringD1Ev>
   b52e8:	a806      	add	r0, sp, #24
   b52ea:	f001 f873 	bl	b63d4 <_ZN6StringD1Ev>
   b52ee:	4b14      	ldr	r3, [pc, #80]	; (b5340 <_Z8get_datai+0x104>)
   b52f0:	9a02      	ldr	r2, [sp, #8]
   b52f2:	781b      	ldrb	r3, [r3, #0]
   b52f4:	4913      	ldr	r1, [pc, #76]	; (b5344 <_Z8get_datai+0x108>)
   b52f6:	f88d 3000 	strb.w	r3, [sp]
   b52fa:	a81a      	add	r0, sp, #104	; 0x68
   b52fc:	233c      	movs	r3, #60	; 0x3c
   b52fe:	f001 fcd1 	bl	b6ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5302:	a81b      	add	r0, sp, #108	; 0x6c
   b5304:	f7ff fed0 	bl	b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    // Trigger the integration
    Particle.publish("elpriser", data);
    Serial.println("data requested - published \"elpriser\"");
   b5308:	f001 ff20 	bl	b714c <_Z16_fetch_usbserialv>
   b530c:	490e      	ldr	r1, [pc, #56]	; (b5348 <_Z8get_datai+0x10c>)
   b530e:	f001 f9c2 	bl	b6696 <_ZN5Print7printlnEPKc>
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b5312:	a802      	add	r0, sp, #8
   b5314:	f001 f85e 	bl	b63d4 <_ZN6StringD1Ev>
   b5318:	b01f      	add	sp, #124	; 0x7c
   b531a:	bd30      	pop	{r4, r5, pc}
   b531c:	2003d20e 	.word	0x2003d20e
   b5320:	2003ccfc 	.word	0x2003ccfc
   b5324:	2003cf60 	.word	0x2003cf60
   b5328:	2003dc74 	.word	0x2003dc74
   b532c:	000ba66e 	.word	0x000ba66e
   b5330:	000ba67f 	.word	0x000ba67f
   b5334:	000ba691 	.word	0x000ba691
   b5338:	000ba6a1 	.word	0x000ba6a1
   b533c:	000ba6b5 	.word	0x000ba6b5
   b5340:	2003cef8 	.word	0x2003cef8
   b5344:	000ba6c6 	.word	0x000ba6c6
   b5348:	000ba6cf 	.word	0x000ba6cf

000b534c <setup>:
{
   b534c:	b510      	push	{r4, lr}
   b534e:	b08a      	sub	sp, #40	; 0x28
   b5350:	f000 fd36 	bl	b5dc0 <HAL_Timer_Get_Milli_Seconds>
    last_read = millis();                                  // Give it an initial value
   b5354:	4b30      	ldr	r3, [pc, #192]	; (b5418 <setup+0xcc>)
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b5356:	2400      	movs	r4, #0
    last_read = millis();                                  // Give it an initial value
   b5358:	6018      	str	r0, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b535a:	2103      	movs	r1, #3
   b535c:	2006      	movs	r0, #6
   b535e:	f002 fbe5 	bl	b7b2c <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b5362:	492e      	ldr	r1, [pc, #184]	; (b541c <setup+0xd0>)
   b5364:	9400      	str	r4, [sp, #0]
   b5366:	f04f 33ff 	mov.w	r3, #4294967295
   b536a:	2201      	movs	r2, #1
   b536c:	2006      	movs	r0, #6
   b536e:	f001 ff15 	bl	b719c <_Z15attachInterrupttPFvvE13InterruptModeah>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5372:	4622      	mov	r2, r4
   b5374:	e9cd 4400 	strd	r4, r4, [sp]
   b5378:	4929      	ldr	r1, [pc, #164]	; (b5420 <setup+0xd4>)
   b537a:	482a      	ldr	r0, [pc, #168]	; (b5424 <setup+0xd8>)
   b537c:	2301      	movs	r3, #1
   b537e:	f000 ff1b 	bl	b61b8 <spark_subscribe>
   b5382:	2301      	movs	r3, #1
   b5384:	4622      	mov	r2, r4
   b5386:	4928      	ldr	r1, [pc, #160]	; (b5428 <setup+0xdc>)
   b5388:	4828      	ldr	r0, [pc, #160]	; (b542c <setup+0xe0>)
   b538a:	e9cd 4400 	strd	r4, r4, [sp]
   b538e:	f000 ff13 	bl	b61b8 <spark_subscribe>
    Serial.println("subscribed.");
   b5392:	f001 fedb 	bl	b714c <_Z16_fetch_usbserialv>
   b5396:	4926      	ldr	r1, [pc, #152]	; (b5430 <setup+0xe4>)
   b5398:	f001 f97d 	bl	b6696 <_ZN5Print7printlnEPKc>
    get_data(Time.day());
   b539c:	f001 fa70 	bl	b6880 <_ZN9TimeClass3dayEv>
   b53a0:	f7ff ff4c 	bl	b523c <_Z8get_datai>
    Serial.printf("Return value: %d", client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt"));
   b53a4:	f001 fed2 	bl	b714c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b53a8:	4922      	ldr	r1, [pc, #136]	; (b5434 <setup+0xe8>)
   b53aa:	4604      	mov	r4, r0
   b53ac:	a806      	add	r0, sp, #24
   b53ae:	f001 f85c 	bl	b646a <_ZN6StringC1EPK19__FlashStringHelper>
   b53b2:	f001 fa3c 	bl	b682e <_ZN9TimeClass3nowEv>
   b53b6:	220a      	movs	r2, #10
   b53b8:	4601      	mov	r1, r0
   b53ba:	a802      	add	r0, sp, #8
   b53bc:	f001 f895 	bl	b64ea <_ZN6StringC1Elh>
   b53c0:	a902      	add	r1, sp, #8
   b53c2:	a806      	add	r0, sp, #24
   b53c4:	f001 f8bf 	bl	b6546 <_ZplRK15StringSumHelperRK6String>
   b53c8:	4b1b      	ldr	r3, [pc, #108]	; (b5438 <setup+0xec>)
   b53ca:	6801      	ldr	r1, [r0, #0]
   b53cc:	481b      	ldr	r0, [pc, #108]	; (b543c <setup+0xf0>)
   b53ce:	461a      	mov	r2, r3
   b53d0:	f000 fa8c 	bl	b58ec <_ZN4MQTT7connectEPKcS1_S1_>
   b53d4:	491a      	ldr	r1, [pc, #104]	; (b5440 <setup+0xf4>)
   b53d6:	4602      	mov	r2, r0
   b53d8:	4620      	mov	r0, r4
   b53da:	f7ff fd5d 	bl	b4e98 <_ZN5Print6printfEPKcz>
   b53de:	a802      	add	r0, sp, #8
   b53e0:	f000 fff8 	bl	b63d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b53e4:	a806      	add	r0, sp, #24
   b53e6:	f000 fff5 	bl	b63d4 <_ZN6StringD1Ev>
    Serial.println();
   b53ea:	f001 feaf 	bl	b714c <_Z16_fetch_usbserialv>
   b53ee:	f001 f946 	bl	b667e <_ZN5Print7printlnEv>
    if (client.isConnected())
   b53f2:	4812      	ldr	r0, [pc, #72]	; (b543c <setup+0xf0>)
   b53f4:	f000 f98a 	bl	b570c <_ZN4MQTT11isConnectedEv>
   b53f8:	b158      	cbz	r0, b5412 <setup+0xc6>
        client.publish("power/get", "hello world");
   b53fa:	4a12      	ldr	r2, [pc, #72]	; (b5444 <setup+0xf8>)
   b53fc:	4912      	ldr	r1, [pc, #72]	; (b5448 <setup+0xfc>)
   b53fe:	480f      	ldr	r0, [pc, #60]	; (b543c <setup+0xf0>)
   b5400:	f000 faff 	bl	b5a02 <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b5404:	4911      	ldr	r1, [pc, #68]	; (b544c <setup+0x100>)
   b5406:	480d      	ldr	r0, [pc, #52]	; (b543c <setup+0xf0>)
}
   b5408:	b00a      	add	sp, #40	; 0x28
   b540a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        client.subscribe("power/prices");
   b540e:	f000 bc9c 	b.w	b5d4a <_ZN4MQTT9subscribeEPKc>
}
   b5412:	b00a      	add	sp, #40	; 0x28
   b5414:	bd10      	pop	{r4, pc}
   b5416:	bf00      	nop
   b5418:	2003d1a8 	.word	0x2003d1a8
   b541c:	000b4bcd 	.word	0x000b4bcd
   b5420:	000b4c19 	.word	0x000b4c19
   b5424:	000ba739 	.word	0x000ba739
   b5428:	000b5451 	.word	0x000b5451
   b542c:	000ba6f5 	.word	0x000ba6f5
   b5430:	000ba700 	.word	0x000ba700
   b5434:	000ba52f 	.word	0x000ba52f
   b5438:	000ba53c 	.word	0x000ba53c
   b543c:	2003cf00 	.word	0x2003cf00
   b5440:	000ba70c 	.word	0x000ba70c
   b5444:	000ba71d 	.word	0x000ba71d
   b5448:	000ba729 	.word	0x000ba729
   b544c:	000ba733 	.word	0x000ba733

000b5450 <_Z14myPriceHandlerPKcS0_>:
{
   b5450:	b508      	push	{r3, lr}
    Serial.println("myPriceHandler fired");
   b5452:	f001 fe7b 	bl	b714c <_Z16_fetch_usbserialv>
   b5456:	4904      	ldr	r1, [pc, #16]	; (b5468 <_Z14myPriceHandlerPKcS0_+0x18>)
   b5458:	f001 f91d 	bl	b6696 <_ZN5Print7printlnEPKc>
    get_data(Time.day());
   b545c:	f001 fa10 	bl	b6880 <_ZN9TimeClass3dayEv>
}
   b5460:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    get_data(Time.day());
   b5464:	f7ff beea 	b.w	b523c <_Z8get_datai>
   b5468:	000ba740 	.word	0x000ba740

000b546c <_GLOBAL__sub_I__Z7messageB5cxx11>:
   b546c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
   b546e:	4a0e      	ldr	r2, [pc, #56]	; (b54a8 <_GLOBAL__sub_I__Z7messageB5cxx11+0x3c>)
MQTT client(HOST, PORT, 512, 30, callback);
   b5470:	480e      	ldr	r0, [pc, #56]	; (b54ac <_GLOBAL__sub_I__Z7messageB5cxx11+0x40>)
   b5472:	2300      	movs	r3, #0
   b5474:	7013      	strb	r3, [r2, #0]
   b5476:	4a0e      	ldr	r2, [pc, #56]	; (b54b0 <_GLOBAL__sub_I__Z7messageB5cxx11+0x44>)
   b5478:	2101      	movs	r1, #1
   b547a:	7011      	strb	r1, [r2, #0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b547c:	4a0d      	ldr	r2, [pc, #52]	; (b54b4 <_GLOBAL__sub_I__Z7messageB5cxx11+0x48>)
   b547e:	f102 0108 	add.w	r1, r2, #8
      { _M_string_length = __length; }
   b5482:	e9c2 1300 	strd	r1, r3, [r2]
      { __c1 = __c2; }
   b5486:	7213      	strb	r3, [r2, #8]
   b5488:	9302      	str	r3, [sp, #8]
   b548a:	4b0b      	ldr	r3, [pc, #44]	; (b54b8 <_GLOBAL__sub_I__Z7messageB5cxx11+0x4c>)
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	231e      	movs	r3, #30
   b5490:	9300      	str	r3, [sp, #0]
   b5492:	490a      	ldr	r1, [pc, #40]	; (b54bc <_GLOBAL__sub_I__Z7messageB5cxx11+0x50>)
   b5494:	f44f 7300 	mov.w	r3, #512	; 0x200
   b5498:	f240 725b 	movw	r2, #1883	; 0x75b
   b549c:	f000 f85a 	bl	b5554 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
   b54a0:	b005      	add	sp, #20
   b54a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b54a6:	bf00      	nop
   b54a8:	2003cef8 	.word	0x2003cef8
   b54ac:	2003cf00 	.word	0x2003cf00
   b54b0:	2003cef9 	.word	0x2003cef9
   b54b4:	2003cee0 	.word	0x2003cee0
   b54b8:	000b4bb1 	.word	0x000b4bb1
   b54bc:	000ba755 	.word	0x000ba755

000b54c0 <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
   b54c0:	4b01      	ldr	r3, [pc, #4]	; (b54c8 <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b54c2:	2200      	movs	r2, #0
   b54c4:	701a      	strb	r2, [r3, #0]
            idx++;                                  // Increment array index.
        } 
        range = idx;
        
    }
   b54c6:	4770      	bx	lr
   b54c8:	2003e67b 	.word	0x2003e67b

000b54cc <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b54cc:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b54d0:	b510      	push	{r4, lr}
   b54d2:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b54d4:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b54d6:	b113      	cbz	r3, b54de <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b54d8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b54da:	f000 fc91 	bl	b5e00 <os_mutex_lock>
#endif
#endif
#endif
        }
   b54de:	4620      	mov	r0, r4
   b54e0:	bd10      	pop	{r4, pc}

000b54e2 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b54e2:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b54e4:	6803      	ldr	r3, [r0, #0]
   b54e6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b54ea:	4604      	mov	r4, r0
            if (mqtt->thread)
   b54ec:	b112      	cbz	r2, b54f4 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b54ee:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b54f0:	f000 fc8e 	bl	b5e10 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b54f4:	4620      	mov	r0, r4
   b54f6:	bd10      	pop	{r4, pc}

000b54f8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b54f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54fa:	461f      	mov	r7, r3
   b54fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5500:	4604      	mov	r4, r0
   b5502:	460d      	mov	r5, r1
   b5504:	4616      	mov	r6, r2
    if (thread) {
   b5506:	b12b      	cbz	r3, b5514 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5508:	2301      	movs	r3, #1
   b550a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b550e:	3058      	adds	r0, #88	; 0x58
   b5510:	f000 fc6e 	bl	b5df0 <os_mutex_create>
    }
    this->callback = callback;
   b5514:	9b08      	ldr	r3, [sp, #32]
   b5516:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5518:	2300      	movs	r3, #0
   b551a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b551c:	b106      	cbz	r6, b5520 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b551e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5520:	b125      	cbz	r5, b552c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5522:	4629      	mov	r1, r5
   b5524:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5528:	f000 ffcd 	bl	b64c6 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b552c:	9b06      	ldr	r3, [sp, #24]
   b552e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5530:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5532:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5534:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5538:	2bff      	cmp	r3, #255	; 0xff
   b553a:	bfb8      	it	lt
   b553c:	23ff      	movlt	r3, #255	; 0xff
   b553e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5542:	b108      	cbz	r0, b5548 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5544:	f7ff fb27 	bl	b4b96 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5548:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b554c:	f7ff fb1f 	bl	b4b8e <_Znaj>
   b5550:	61e0      	str	r0, [r4, #28]
}
   b5552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5554 <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b5554:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5558:	4604      	mov	r4, r0
            bool thread) {
   b555a:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b555c:	4617      	mov	r7, r2
   b555e:	4698      	mov	r8, r3
   b5560:	460e      	mov	r6, r1
            bool thread) {
   b5562:	f002 f9a1 	bl	b78a8 <_ZN9TCPClientC1Ev>
   b5566:	490d      	ldr	r1, [pc, #52]	; (b559c <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b5568:	61e5      	str	r5, [r4, #28]
   b556a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b556e:	f000 ff7c 	bl	b646a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5572:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b5576:	9303      	str	r3, [sp, #12]
   b5578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b557a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b557c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b5580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5582:	9300      	str	r3, [sp, #0]
   b5584:	4620      	mov	r0, r4
            bool thread) {
   b5586:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b558a:	463b      	mov	r3, r7
   b558c:	462a      	mov	r2, r5
   b558e:	4631      	mov	r1, r6
   b5590:	f7ff ffb2 	bl	b54f8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5594:	4620      	mov	r0, r4
   b5596:	b004      	add	sp, #16
   b5598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b559c:	000ba5c5 	.word	0x000ba5c5

000b55a0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b55a0:	b510      	push	{r4, lr}
   b55a2:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b55a4:	4620      	mov	r0, r4
   b55a6:	f002 f8db 	bl	b7760 <_ZN9TCPClient9availableEv>
   b55aa:	2800      	cmp	r0, #0
   b55ac:	d0fa      	beq.n	b55a4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b55ae:	4620      	mov	r0, r4
   b55b0:	f001 fee4 	bl	b737c <_ZN9TCPClient4readEv>
}
   b55b4:	b2c0      	uxtb	r0, r0
   b55b6:	bd10      	pop	{r4, pc}

000b55b8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b55b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b55bc:	4605      	mov	r5, r0
   b55be:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b55c0:	f7ff ffee 	bl	b55a0 <_ZN4MQTT8readByteEv>
   b55c4:	69eb      	ldr	r3, [r5, #28]
   b55c6:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b55c8:	69eb      	ldr	r3, [r5, #28]
   b55ca:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b55ce:	f04f 0901 	mov.w	r9, #1
   b55d2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b55d6:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b55d8:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b55da:	4628      	mov	r0, r5
   b55dc:	f7ff ffe0 	bl	b55a0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b55e0:	4626      	mov	r6, r4
   b55e2:	69eb      	ldr	r3, [r5, #28]
   b55e4:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b55e6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b55ea:	fb13 f309 	smulbb	r3, r3, r9
   b55ee:	441f      	add	r7, r3
        buffer[len++] = digit;
   b55f0:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b55f2:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b55f4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b55f6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b55f8:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b55fc:	d4ed      	bmi.n	b55da <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b55fe:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5600:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5604:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5608:	d11e      	bne.n	b5648 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b560a:	4628      	mov	r0, r5
   b560c:	f7ff ffc8 	bl	b55a0 <_ZN4MQTT8readByteEv>
   b5610:	69eb      	ldr	r3, [r5, #28]
   b5612:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5614:	4628      	mov	r0, r5
   b5616:	f7ff ffc3 	bl	b55a0 <_ZN4MQTT8readByteEv>
   b561a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b561c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b561e:	b2b6      	uxth	r6, r6
   b5620:	69eb      	ldr	r3, [r5, #28]
   b5622:	b2a4      	uxth	r4, r4
   b5624:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5626:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5628:	b2b6      	uxth	r6, r6
   b562a:	42be      	cmp	r6, r7
   b562c:	d20e      	bcs.n	b564c <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b562e:	4628      	mov	r0, r5
   b5630:	f7ff ffb6 	bl	b55a0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5634:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5638:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b563a:	bf84      	itt	hi
   b563c:	69eb      	ldrhi	r3, [r5, #28]
   b563e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5640:	3401      	adds	r4, #1
   b5642:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5644:	3601      	adds	r6, #1
   b5646:	e7ef      	b.n	b5628 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5648:	2600      	movs	r6, #0
   b564a:	e7ed      	b.n	b5628 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b564c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5650:	42a3      	cmp	r3, r4
   b5652:	bf2c      	ite	cs
   b5654:	4620      	movcs	r0, r4
   b5656:	2000      	movcc	r0, #0
   b5658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b565c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b565c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5660:	4615      	mov	r5, r2
   b5662:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5664:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5666:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5668:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b566a:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b566c:	a802      	add	r0, sp, #8
        digit = len % 128;
   b566e:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5672:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5676:	f103 0401 	add.w	r4, r3, #1
   b567a:	4403      	add	r3, r0
            digit |= 0x80;
   b567c:	bf88      	it	hi
   b567e:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b5682:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b5686:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b568a:	b2e4      	uxtb	r4, r4
   b568c:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5690:	d81e      	bhi.n	b56d0 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5692:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5696:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b569a:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b569c:	4622      	mov	r2, r4
   b569e:	a901      	add	r1, sp, #4
   b56a0:	4428      	add	r0, r5
    buf[4-llen] = header;
   b56a2:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b56a6:	f002 fe43 	bl	b8330 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b56aa:	1c72      	adds	r2, r6, #1
   b56ac:	4422      	add	r2, r4
   b56ae:	4641      	mov	r1, r8
   b56b0:	4638      	mov	r0, r7
   b56b2:	f001 fe4e 	bl	b7352 <_ZN9TCPClient5writeEPKhj>
   b56b6:	4605      	mov	r5, r0
   b56b8:	f000 fb82 	bl	b5dc0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b56bc:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b56be:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b56c0:	4432      	add	r2, r6
   b56c2:	b2a8      	uxth	r0, r5
}
   b56c4:	1a13      	subs	r3, r2, r0
   b56c6:	4258      	negs	r0, r3
   b56c8:	4158      	adcs	r0, r3
   b56ca:	b002      	add	sp, #8
   b56cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b56d0:	4623      	mov	r3, r4
   b56d2:	e7ca      	b.n	b566a <_ZN4MQTT5writeEhPht+0xe>

000b56d4 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b56d4:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b56d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b56d8:	4605      	mov	r5, r0
    pos += 2;
   b56da:	b298      	uxth	r0, r3
   b56dc:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b56de:	5cce      	ldrb	r6, [r1, r3]
   b56e0:	b29c      	uxth	r4, r3
   b56e2:	b156      	cbz	r6, b56fa <_ZN4MQTT11writeStringEPKcPht+0x26>
   b56e4:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b56e8:	4584      	cmp	ip, r0
   b56ea:	f103 0701 	add.w	r7, r3, #1
   b56ee:	d904      	bls.n	b56fa <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b56f0:	1c44      	adds	r4, r0, #1
   b56f2:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b56f4:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b56f6:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b56f8:	e7f1      	b.n	b56de <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b56fa:	b299      	uxth	r1, r3
   b56fc:	1a41      	subs	r1, r0, r1
   b56fe:	440a      	add	r2, r1
   b5700:	0a21      	lsrs	r1, r4, #8
   b5702:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b5706:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b570a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b570c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b570c:	b538      	push	{r3, r4, r5, lr}
   b570e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5710:	f001 ff48 	bl	b75a4 <_ZN9TCPClient9connectedEv>
   b5714:	2800      	cmp	r0, #0
   b5716:	bf14      	ite	ne
   b5718:	2501      	movne	r5, #1
   b571a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b571c:	d102      	bne.n	b5724 <_ZN4MQTT11isConnectedEv+0x18>
   b571e:	4620      	mov	r0, r4
   b5720:	f002 f878 	bl	b7814 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5724:	4628      	mov	r0, r5
   b5726:	bd38      	pop	{r3, r4, r5, pc}

000b5728 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b5728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b572c:	b088      	sub	sp, #32
   b572e:	4604      	mov	r4, r0
   b5730:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5734:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5738:	4689      	mov	r9, r1
   b573a:	4617      	mov	r7, r2
   b573c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b573e:	f7ff ffe5 	bl	b570c <_ZN4MQTT11isConnectedEv>
   b5742:	4605      	mov	r5, r0
   b5744:	2800      	cmp	r0, #0
   b5746:	f040 80cd 	bne.w	b58e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b574a:	4621      	mov	r1, r4
   b574c:	a801      	add	r0, sp, #4
   b574e:	f7ff febd 	bl	b54cc <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b5752:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5754:	2900      	cmp	r1, #0
   b5756:	f040 8088 	bne.w	b586a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b575a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b575e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5760:	462b      	mov	r3, r5
   b5762:	4620      	mov	r0, r4
   b5764:	f001 fea0 	bl	b74a8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5768:	2800      	cmp	r0, #0
   b576a:	d07a      	beq.n	b5862 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b576c:	2301      	movs	r3, #1
   b576e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5770:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5774:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b5776:	2b04      	cmp	r3, #4
   b5778:	4b5b      	ldr	r3, [pc, #364]	; (b58e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b577a:	f040 8081 	bne.w	b5880 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b577e:	6818      	ldr	r0, [r3, #0]
   b5780:	8899      	ldrh	r1, [r3, #4]
   b5782:	799b      	ldrb	r3, [r3, #6]
   b5784:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5788:	f88d 300e 	strb.w	r3, [sp, #14]
   b578c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b578e:	f8c2 0005 	str.w	r0, [r2, #5]
   b5792:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5796:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b579a:	f8a2 1009 	strh.w	r1, [r2, #9]
   b579e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b57a0:	230c      	movs	r3, #12
            if (willTopic) {
   b57a2:	f1b8 0f00 	cmp.w	r8, #0
   b57a6:	f000 8081 	beq.w	b58ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b57aa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b57ae:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b57b2:	0140      	lsls	r0, r0, #5
   b57b4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b57b8:	f040 0006 	orr.w	r0, r0, #6
   b57bc:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b57be:	f1ba 0f00 	cmp.w	sl, #0
   b57c2:	d101      	bne.n	b57c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b57c4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b57c8:	b11f      	cbz	r7, b57d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b57ca:	2e00      	cmp	r6, #0
   b57cc:	d170      	bne.n	b58b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b57ce:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b57d2:	69e2      	ldr	r2, [r4, #28]
   b57d4:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b57d6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b57d8:	69e1      	ldr	r1, [r4, #28]
   b57da:	1c58      	adds	r0, r3, #1
   b57dc:	1212      	asrs	r2, r2, #8
   b57de:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b57e0:	1c9a      	adds	r2, r3, #2
   b57e2:	69e1      	ldr	r1, [r4, #28]
   b57e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b57e6:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b57e8:	3303      	adds	r3, #3
   b57ea:	69e2      	ldr	r2, [r4, #28]
   b57ec:	4649      	mov	r1, r9
   b57ee:	4620      	mov	r0, r4
   b57f0:	f7ff ff70 	bl	b56d4 <_ZN4MQTT11writeStringEPKcPht>
   b57f4:	4603      	mov	r3, r0
            if (willTopic) {
   b57f6:	f1b8 0f00 	cmp.w	r8, #0
   b57fa:	d00b      	beq.n	b5814 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b57fc:	69e2      	ldr	r2, [r4, #28]
   b57fe:	4641      	mov	r1, r8
   b5800:	4620      	mov	r0, r4
   b5802:	f7ff ff67 	bl	b56d4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b5806:	69e2      	ldr	r2, [r4, #28]
   b5808:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b580a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b580c:	4620      	mov	r0, r4
   b580e:	f7ff ff61 	bl	b56d4 <_ZN4MQTT11writeStringEPKcPht>
   b5812:	4603      	mov	r3, r0
            if(user != NULL) {
   b5814:	b167      	cbz	r7, b5830 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5816:	69e2      	ldr	r2, [r4, #28]
   b5818:	4639      	mov	r1, r7
   b581a:	4620      	mov	r0, r4
   b581c:	f7ff ff5a 	bl	b56d4 <_ZN4MQTT11writeStringEPKcPht>
   b5820:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5822:	b12e      	cbz	r6, b5830 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5824:	69e2      	ldr	r2, [r4, #28]
   b5826:	4631      	mov	r1, r6
   b5828:	4620      	mov	r0, r4
   b582a:	f7ff ff53 	bl	b56d4 <_ZN4MQTT11writeStringEPKcPht>
   b582e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5830:	3b05      	subs	r3, #5
   b5832:	69e2      	ldr	r2, [r4, #28]
   b5834:	b29b      	uxth	r3, r3
   b5836:	2110      	movs	r1, #16
   b5838:	4620      	mov	r0, r4
   b583a:	f7ff ff0f 	bl	b565c <_ZN4MQTT5writeEhPht>
   b583e:	f000 fabf 	bl	b5dc0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5842:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5846:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b584a:	4620      	mov	r0, r4
   b584c:	f001 ff88 	bl	b7760 <_ZN9TCPClient9availableEv>
   b5850:	bb88      	cbnz	r0, b58b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5852:	f000 fab5 	bl	b5dc0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5858:	1ac0      	subs	r0, r0, r3
   b585a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b585c:	4373      	muls	r3, r6
   b585e:	4298      	cmp	r0, r3
   b5860:	d9f3      	bls.n	b584a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5862:	4620      	mov	r0, r4
   b5864:	f001 ffd6 	bl	b7814 <_ZN9TCPClient4stopEv>
   b5868:	e035      	b.n	b58d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b586a:	a802      	add	r0, sp, #8
   b586c:	f001 fc04 	bl	b7078 <_ZN9IPAddressC1EPKh>
   b5870:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5874:	462b      	mov	r3, r5
   b5876:	a902      	add	r1, sp, #8
   b5878:	4620      	mov	r0, r4
   b587a:	f001 fef5 	bl	b7668 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b587e:	e773      	b.n	b5768 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5880:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5884:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5888:	7bdb      	ldrb	r3, [r3, #15]
   b588a:	f10d 0c08 	add.w	ip, sp, #8
   b588e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5892:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5896:	ab02      	add	r3, sp, #8
   b5898:	cb03      	ldmia	r3!, {r0, r1}
   b589a:	f8c2 0005 	str.w	r0, [r2, #5]
   b589e:	f8c2 1009 	str.w	r1, [r2, #9]
   b58a2:	f89c 3000 	ldrb.w	r3, [ip]
   b58a6:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b58a8:	230e      	movs	r3, #14
   b58aa:	e77a      	b.n	b57a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b58ac:	2002      	movs	r0, #2
   b58ae:	e786      	b.n	b57be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b58b0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b58b4:	e78d      	b.n	b57d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b58b6:	a902      	add	r1, sp, #8
   b58b8:	4620      	mov	r0, r4
   b58ba:	f7ff fe7d 	bl	b55b8 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b58be:	2804      	cmp	r0, #4
   b58c0:	d1cf      	bne.n	b5862 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b58c2:	69e3      	ldr	r3, [r4, #28]
   b58c4:	78de      	ldrb	r6, [r3, #3]
   b58c6:	2e00      	cmp	r6, #0
   b58c8:	d1cb      	bne.n	b5862 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b58ca:	f000 fa79 	bl	b5dc0 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b58ce:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b58d0:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b58d2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b58d6:	a801      	add	r0, sp, #4
   b58d8:	f7ff fe03 	bl	b54e2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b58dc:	4628      	mov	r0, r5
   b58de:	b008      	add	sp, #32
   b58e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b58e4:	2500      	movs	r5, #0
   b58e6:	e7f9      	b.n	b58dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b58e8:	000ba420 	.word	0x000ba420

000b58ec <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b58ec:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b58ee:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b58f2:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b58f4:	2401      	movs	r4, #1
   b58f6:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b58fa:	2400      	movs	r4, #0
   b58fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b5900:	e9cd 4400 	strd	r4, r4, [sp]
   b5904:	f7ff ff10 	bl	b5728 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b5908:	b006      	add	sp, #24
   b590a:	bd10      	pop	{r4, pc}

000b590c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b590c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5910:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b5914:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5918:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b591c:	4604      	mov	r4, r0
   b591e:	468b      	mov	fp, r1
   b5920:	4616      	mov	r6, r2
   b5922:	461f      	mov	r7, r3
    if (isConnected()) {
   b5924:	f7ff fef2 	bl	b570c <_ZN4MQTT11isConnectedEv>
   b5928:	4682      	mov	sl, r0
   b592a:	2800      	cmp	r0, #0
   b592c:	d051      	beq.n	b59d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b592e:	4621      	mov	r1, r4
   b5930:	a801      	add	r0, sp, #4
   b5932:	f7ff fdcb 	bl	b54cc <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b5936:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b593a:	69e0      	ldr	r0, [r4, #28]
   b593c:	2100      	movs	r1, #0
   b593e:	f002 fd1f 	bl	b8380 <memset>
        length = writeString(topic, buffer, length);
   b5942:	2305      	movs	r3, #5
   b5944:	69e2      	ldr	r2, [r4, #28]
   b5946:	4659      	mov	r1, fp
   b5948:	4620      	mov	r0, r4
   b594a:	f7ff fec3 	bl	b56d4 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b594e:	1e6b      	subs	r3, r5, #1
   b5950:	2b01      	cmp	r3, #1
   b5952:	d815      	bhi.n	b5980 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5954:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5956:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5958:	3101      	adds	r1, #1
   b595a:	b289      	uxth	r1, r1
   b595c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b595e:	0a09      	lsrs	r1, r1, #8
   b5960:	5419      	strb	r1, [r3, r0]
   b5962:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5964:	69e3      	ldr	r3, [r4, #28]
   b5966:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5968:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b596a:	3002      	adds	r0, #2
   b596c:	5499      	strb	r1, [r3, r2]
   b596e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5970:	f1b8 0f00 	cmp.w	r8, #0
   b5974:	d004      	beq.n	b5980 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b5976:	8c23      	ldrh	r3, [r4, #32]
   b5978:	1c5a      	adds	r2, r3, #1
   b597a:	8422      	strh	r2, [r4, #32]
   b597c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5980:	2100      	movs	r1, #0
   b5982:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5984:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b5986:	69e2      	ldr	r2, [r4, #28]
   b5988:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b598a:	d90a      	bls.n	b59a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b598c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5990:	459c      	cmp	ip, r3
   b5992:	d906      	bls.n	b59a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5994:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5998:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b599c:	3101      	adds	r1, #1
   b599e:	b289      	uxth	r1, r1
   b59a0:	e7ef      	b.n	b5982 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b59a2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b59a6:	2900      	cmp	r1, #0
   b59a8:	bf0c      	ite	eq
   b59aa:	2130      	moveq	r1, #48	; 0x30
   b59ac:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b59ae:	f1b9 0f00 	cmp.w	r9, #0
   b59b2:	d001      	beq.n	b59b8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b59b4:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b59b8:	2d02      	cmp	r5, #2
   b59ba:	d10e      	bne.n	b59da <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b59bc:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b59c0:	3b05      	subs	r3, #5
   b59c2:	b29b      	uxth	r3, r3
   b59c4:	4620      	mov	r0, r4
   b59c6:	f7ff fe49 	bl	b565c <_ZN4MQTT5writeEhPht>
   b59ca:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b59cc:	a801      	add	r0, sp, #4
   b59ce:	f7ff fd88 	bl	b54e2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b59d2:	4650      	mov	r0, sl
   b59d4:	b003      	add	sp, #12
   b59d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b59da:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b59dc:	bf08      	it	eq
   b59de:	f041 0102 	orreq.w	r1, r1, #2
   b59e2:	e7ed      	b.n	b59c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b59e4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b59e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b59e6:	9c08      	ldr	r4, [sp, #32]
   b59e8:	9403      	str	r4, [sp, #12]
   b59ea:	2400      	movs	r4, #0
   b59ec:	9402      	str	r4, [sp, #8]
   b59ee:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b59f2:	9401      	str	r4, [sp, #4]
   b59f4:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b59f8:	9400      	str	r4, [sp, #0]
   b59fa:	f7ff ff87 	bl	b590c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b59fe:	b004      	add	sp, #16
   b5a00:	bd10      	pop	{r4, pc}

000b5a02 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b5a02:	b530      	push	{r4, r5, lr}
   b5a04:	b087      	sub	sp, #28
   b5a06:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5a08:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b5a0a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5a0c:	9204      	str	r2, [sp, #16]
   b5a0e:	f7ff f861 	bl	b4ad4 <strlen>
   b5a12:	2500      	movs	r5, #0
   b5a14:	4603      	mov	r3, r0
   b5a16:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5a1a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b5a1e:	9500      	str	r5, [sp, #0]
   b5a20:	4620      	mov	r0, r4
   b5a22:	f7ff ffdf 	bl	b59e4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b5a26:	b007      	add	sp, #28
   b5a28:	bd30      	pop	{r4, r5, pc}

000b5a2a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b5a2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a2c:	4604      	mov	r4, r0
   b5a2e:	460e      	mov	r6, r1
    if (isConnected()) {
   b5a30:	f7ff fe6c 	bl	b570c <_ZN4MQTT11isConnectedEv>
   b5a34:	4605      	mov	r5, r0
   b5a36:	b1c8      	cbz	r0, b5a6c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5a38:	4621      	mov	r1, r4
   b5a3a:	a801      	add	r0, sp, #4
   b5a3c:	f7ff fd46 	bl	b54cc <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5a40:	69e3      	ldr	r3, [r4, #28]
   b5a42:	2262      	movs	r2, #98	; 0x62
   b5a44:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a46:	69e3      	ldr	r3, [r4, #28]
   b5a48:	2202      	movs	r2, #2
   b5a4a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a4c:	69e3      	ldr	r3, [r4, #28]
   b5a4e:	0a32      	lsrs	r2, r6, #8
   b5a50:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a52:	69e3      	ldr	r3, [r4, #28]
   b5a54:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a56:	69e1      	ldr	r1, [r4, #28]
   b5a58:	2204      	movs	r2, #4
   b5a5a:	4620      	mov	r0, r4
   b5a5c:	f001 fc79 	bl	b7352 <_ZN9TCPClient5writeEPKhj>
   b5a60:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a62:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a64:	bf18      	it	ne
   b5a66:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a68:	f7ff fd3b 	bl	b54e2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a6c:	4628      	mov	r0, r5
   b5a6e:	b002      	add	sp, #8
   b5a70:	bd70      	pop	{r4, r5, r6, pc}

000b5a72 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a74:	4604      	mov	r4, r0
   b5a76:	460e      	mov	r6, r1
    if (isConnected()) {
   b5a78:	f7ff fe48 	bl	b570c <_ZN4MQTT11isConnectedEv>
   b5a7c:	4605      	mov	r5, r0
   b5a7e:	b1c8      	cbz	r0, b5ab4 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5a80:	4621      	mov	r1, r4
   b5a82:	a801      	add	r0, sp, #4
   b5a84:	f7ff fd22 	bl	b54cc <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5a88:	69e3      	ldr	r3, [r4, #28]
   b5a8a:	2272      	movs	r2, #114	; 0x72
   b5a8c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a8e:	69e3      	ldr	r3, [r4, #28]
   b5a90:	2202      	movs	r2, #2
   b5a92:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a94:	69e3      	ldr	r3, [r4, #28]
   b5a96:	0a32      	lsrs	r2, r6, #8
   b5a98:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a9a:	69e3      	ldr	r3, [r4, #28]
   b5a9c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a9e:	69e1      	ldr	r1, [r4, #28]
   b5aa0:	2204      	movs	r2, #4
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	f001 fc55 	bl	b7352 <_ZN9TCPClient5writeEPKhj>
   b5aa8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5aaa:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5aac:	bf18      	it	ne
   b5aae:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5ab0:	f7ff fd17 	bl	b54e2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5ab4:	4628      	mov	r0, r5
   b5ab6:	b002      	add	sp, #8
   b5ab8:	bd70      	pop	{r4, r5, r6, pc}

000b5aba <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5aba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5abe:	ed2d 8b02 	vpush	{d8}
   b5ac2:	b087      	sub	sp, #28
   b5ac4:	af00      	add	r7, sp, #0
   b5ac6:	4604      	mov	r4, r0
    if (isConnected()) {
   b5ac8:	f7ff fe20 	bl	b570c <_ZN4MQTT11isConnectedEv>
   b5acc:	4681      	mov	r9, r0
   b5ace:	b1f8      	cbz	r0, b5b10 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5ad0:	4621      	mov	r1, r4
   b5ad2:	f107 0014 	add.w	r0, r7, #20
   b5ad6:	f7ff fcf9 	bl	b54cc <_ZN4MQTT11MutexLockerC1EPS_>
   b5ada:	f000 f971 	bl	b5dc0 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5ade:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5ae4:	4353      	muls	r3, r2
   b5ae6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5ae8:	1a82      	subs	r2, r0, r2
   b5aea:	429a      	cmp	r2, r3
   b5aec:	4606      	mov	r6, r0
   b5aee:	d803      	bhi.n	b5af8 <_ZN4MQTT4loopEv+0x3e>
   b5af0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5af2:	1a82      	subs	r2, r0, r2
   b5af4:	4293      	cmp	r3, r2
   b5af6:	d221      	bcs.n	b5b3c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5af8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5afc:	b17b      	cbz	r3, b5b1e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5afe:	4620      	mov	r0, r4
   b5b00:	f001 fe88 	bl	b7814 <_ZN9TCPClient4stopEv>
                return false;
   b5b04:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5b08:	f107 0014 	add.w	r0, r7, #20
   b5b0c:	f7ff fce9 	bl	b54e2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5b10:	4648      	mov	r0, r9
   b5b12:	371c      	adds	r7, #28
   b5b14:	46bd      	mov	sp, r7
   b5b16:	ecbd 8b02 	vpop	{d8}
   b5b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5b1e:	69e2      	ldr	r2, [r4, #28]
   b5b20:	21c0      	movs	r1, #192	; 0xc0
   b5b22:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5b24:	69e2      	ldr	r2, [r4, #28]
   b5b26:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5b28:	69e1      	ldr	r1, [r4, #28]
   b5b2a:	2202      	movs	r2, #2
   b5b2c:	4620      	mov	r0, r4
   b5b2e:	f001 fc10 	bl	b7352 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5b32:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5b36:	2301      	movs	r3, #1
   b5b38:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5b3c:	4620      	mov	r0, r4
   b5b3e:	f001 fe0f 	bl	b7760 <_ZN9TCPClient9availableEv>
   b5b42:	2800      	cmp	r0, #0
   b5b44:	d0e0      	beq.n	b5b08 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5b46:	f107 0113 	add.w	r1, r7, #19
   b5b4a:	4620      	mov	r0, r4
   b5b4c:	f7ff fd34 	bl	b55b8 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5b50:	4683      	mov	fp, r0
   b5b52:	2800      	cmp	r0, #0
   b5b54:	d0d8      	beq.n	b5b08 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5b56:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5b58:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5b5a:	7819      	ldrb	r1, [r3, #0]
   b5b5c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5b60:	2a30      	cmp	r2, #48	; 0x30
   b5b62:	d17f      	bne.n	b5c64 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5b64:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5b68:	f1ba 0f00 	cmp.w	sl, #0
   b5b6c:	d0cc      	beq.n	b5b08 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b6e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5b72:	466a      	mov	r2, sp
   b5b74:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b78:	eb03 020c 	add.w	r2, r3, ip
   b5b7c:	7851      	ldrb	r1, [r2, #1]
   b5b7e:	7895      	ldrb	r5, [r2, #2]
   b5b80:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5b84:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5b86:	f105 0208 	add.w	r2, r5, #8
   b5b8a:	4669      	mov	r1, sp
   b5b8c:	08d2      	lsrs	r2, r2, #3
   b5b8e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5b92:	4695      	mov	sp, r2
   b5b94:	f10c 0203 	add.w	r2, ip, #3
   b5b98:	60fa      	str	r2, [r7, #12]
   b5b9a:	eb03 0e02 	add.w	lr, r3, r2
   b5b9e:	eb0d 0205 	add.w	r2, sp, r5
   b5ba2:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5ba4:	f8c7 d008 	str.w	sp, [r7, #8]
   b5ba8:	607a      	str	r2, [r7, #4]
   b5baa:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5bae:	428a      	cmp	r2, r1
   b5bb0:	d006      	beq.n	b5bc0 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5bb2:	460a      	mov	r2, r1
   b5bb4:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5bb8:	f802 8b01 	strb.w	r8, [r2], #1
   b5bbc:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5bbe:	e7f4      	b.n	b5baa <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5bc0:	2200      	movs	r2, #0
   b5bc2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5bc4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bc8:	68f9      	ldr	r1, [r7, #12]
   b5bca:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5bce:	ebab 020c 	sub.w	r2, fp, ip
   b5bd2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5bd4:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5bd8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bdc:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5bde:	d125      	bne.n	b5c2c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5be0:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5be4:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5be6:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5be8:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5bec:	f10c 0105 	add.w	r1, ip, #5
   b5bf0:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5bf2:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5bf4:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5bf8:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5bfa:	69e3      	ldr	r3, [r4, #28]
   b5bfc:	2240      	movs	r2, #64	; 0x40
   b5bfe:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5c00:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5c02:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5c06:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5c0a:	69e3      	ldr	r3, [r4, #28]
   b5c0c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5c10:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5c12:	69e3      	ldr	r3, [r4, #28]
   b5c14:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5c18:	69e1      	ldr	r1, [r4, #28]
   b5c1a:	2204      	movs	r2, #4
   b5c1c:	4620      	mov	r0, r4
   b5c1e:	f001 fb98 	bl	b7352 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5c22:	6266      	str	r6, [r4, #36]	; 0x24
   b5c24:	ee18 3a10 	vmov	r3, s16
   b5c28:	469d      	mov	sp, r3
   b5c2a:	e76d      	b.n	b5b08 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5c2c:	f1b8 0f04 	cmp.w	r8, #4
   b5c30:	d115      	bne.n	b5c5e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c32:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5c36:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c38:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c3a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5c3e:	f10c 0105 	add.w	r1, ip, #5
   b5c42:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c44:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c46:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5c4a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5c4c:	69e3      	ldr	r3, [r4, #28]
   b5c4e:	2250      	movs	r2, #80	; 0x50
   b5c50:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5c52:	69e3      	ldr	r3, [r4, #28]
   b5c54:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5c56:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5c5a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5c5c:	e7d5      	b.n	b5c0a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5c5e:	4419      	add	r1, r3
   b5c60:	47d0      	blx	sl
   b5c62:	e7df      	b.n	b5c24 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5c64:	2a50      	cmp	r2, #80	; 0x50
   b5c66:	d108      	bne.n	b5c7a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5c68:	789a      	ldrb	r2, [r3, #2]
   b5c6a:	78d9      	ldrb	r1, [r3, #3]
   b5c6c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5c70:	b289      	uxth	r1, r1
   b5c72:	4620      	mov	r0, r4
   b5c74:	f7ff fed9 	bl	b5a2a <_ZN4MQTT14publishReleaseEt>
   b5c78:	e746      	b.n	b5b08 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5c7a:	2a40      	cmp	r2, #64	; 0x40
   b5c7c:	d112      	bne.n	b5ca4 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5c7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5c80:	2a00      	cmp	r2, #0
   b5c82:	f43f af41 	beq.w	b5b08 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5c86:	f1bb 0f04 	cmp.w	fp, #4
   b5c8a:	f47f af3d 	bne.w	b5b08 <_ZN4MQTT4loopEv+0x4e>
   b5c8e:	f011 0f06 	tst.w	r1, #6
   b5c92:	f47f af39 	bne.w	b5b08 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5c96:	7899      	ldrb	r1, [r3, #2]
   b5c98:	78d8      	ldrb	r0, [r3, #3]
   b5c9a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5c9e:	b280      	uxth	r0, r0
   b5ca0:	4790      	blx	r2
   b5ca2:	e731      	b.n	b5b08 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5ca4:	2a60      	cmp	r2, #96	; 0x60
   b5ca6:	d108      	bne.n	b5cba <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5ca8:	789a      	ldrb	r2, [r3, #2]
   b5caa:	78d9      	ldrb	r1, [r3, #3]
   b5cac:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5cb0:	b289      	uxth	r1, r1
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	f7ff fedd 	bl	b5a72 <_ZN4MQTT15publishCompleteEt>
   b5cb8:	e726      	b.n	b5b08 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5cba:	2a70      	cmp	r2, #112	; 0x70
   b5cbc:	d0df      	beq.n	b5c7e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5cbe:	2a90      	cmp	r2, #144	; 0x90
   b5cc0:	f43f af22 	beq.w	b5b08 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5cc4:	2ac0      	cmp	r2, #192	; 0xc0
   b5cc6:	d10a      	bne.n	b5cde <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5cc8:	22d0      	movs	r2, #208	; 0xd0
   b5cca:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5ccc:	69e3      	ldr	r3, [r4, #28]
   b5cce:	2200      	movs	r2, #0
   b5cd0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5cd2:	69e1      	ldr	r1, [r4, #28]
   b5cd4:	2202      	movs	r2, #2
   b5cd6:	4620      	mov	r0, r4
   b5cd8:	f001 fb3b 	bl	b7352 <_ZN9TCPClient5writeEPKhj>
   b5cdc:	e714      	b.n	b5b08 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5cde:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5ce0:	bf04      	itt	eq
   b5ce2:	2300      	moveq	r3, #0
   b5ce4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5ce8:	e70e      	b.n	b5b08 <_ZN4MQTT4loopEv+0x4e>

000b5cea <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5cec:	4604      	mov	r4, r0
   b5cee:	460f      	mov	r7, r1
   b5cf0:	4616      	mov	r6, r2
    if (isConnected()) {
   b5cf2:	f7ff fd0b 	bl	b570c <_ZN4MQTT11isConnectedEv>
   b5cf6:	4605      	mov	r5, r0
   b5cf8:	b310      	cbz	r0, b5d40 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5cfa:	4621      	mov	r1, r4
   b5cfc:	a801      	add	r0, sp, #4
   b5cfe:	f7ff fbe5 	bl	b54cc <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5d02:	8c23      	ldrh	r3, [r4, #32]
   b5d04:	3301      	adds	r3, #1
   b5d06:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5d08:	b1eb      	cbz	r3, b5d46 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5d0a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5d0c:	8c23      	ldrh	r3, [r4, #32]
   b5d0e:	69e2      	ldr	r2, [r4, #28]
   b5d10:	0a1b      	lsrs	r3, r3, #8
   b5d12:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5d14:	69e3      	ldr	r3, [r4, #28]
   b5d16:	8c22      	ldrh	r2, [r4, #32]
   b5d18:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5d1a:	69e2      	ldr	r2, [r4, #28]
   b5d1c:	2307      	movs	r3, #7
   b5d1e:	4639      	mov	r1, r7
   b5d20:	4620      	mov	r0, r4
   b5d22:	f7ff fcd7 	bl	b56d4 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5d26:	69e3      	ldr	r3, [r4, #28]
   b5d28:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5d2a:	3804      	subs	r0, #4
   b5d2c:	b283      	uxth	r3, r0
   b5d2e:	69e2      	ldr	r2, [r4, #28]
   b5d30:	2182      	movs	r1, #130	; 0x82
   b5d32:	4620      	mov	r0, r4
   b5d34:	f7ff fc92 	bl	b565c <_ZN4MQTT5writeEhPht>
   b5d38:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5d3a:	a801      	add	r0, sp, #4
   b5d3c:	f7ff fbd1 	bl	b54e2 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5d40:	4628      	mov	r0, r5
   b5d42:	b003      	add	sp, #12
   b5d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5d46:	2301      	movs	r3, #1
   b5d48:	e7df      	b.n	b5d0a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5d4a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5d4a:	2200      	movs	r2, #0
   b5d4c:	f7ff bfcd 	b.w	b5cea <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5d50 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <netdb_freeaddrinfo+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	689b      	ldr	r3, [r3, #8]
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	00030268 	.word	0x00030268

000b5d60 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <netdb_getaddrinfo+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	68db      	ldr	r3, [r3, #12]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	00030268 	.word	0x00030268

000b5d70 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <hal_gpio_mode+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	689b      	ldr	r3, [r3, #8]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	0003022c 	.word	0x0003022c

000b5d80 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <hal_interrupt_attach+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	699b      	ldr	r3, [r3, #24]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	0003022c 	.word	0x0003022c

000b5d90 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <hal_interrupt_detach+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	69db      	ldr	r3, [r3, #28]
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	0003022c 	.word	0x0003022c

000b5da0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <if_index_to_name+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	695b      	ldr	r3, [r3, #20]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	0003026c 	.word	0x0003026c

000b5db0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <HAL_RNG_GetRandomNumber+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	685b      	ldr	r3, [r3, #4]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	00030218 	.word	0x00030218

000b5dc0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	695b      	ldr	r3, [r3, #20]
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	00030218 	.word	0x00030218

000b5dd0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <hal_rtc_time_is_valid+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	00030218 	.word	0x00030218

000b5de0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <hal_rtc_get_time+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	00030218 	.word	0x00030218

000b5df0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <os_mutex_create+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	00030248 	.word	0x00030248

000b5e00 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <os_mutex_lock+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	00030248 	.word	0x00030248

000b5e10 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <os_mutex_unlock+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	00030248 	.word	0x00030248

000b5e20 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <os_mutex_recursive_create+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	00030248 	.word	0x00030248

000b5e30 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <inet_inet_ntop+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	695b      	ldr	r3, [r3, #20]
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	00030264 	.word	0x00030264

000b5e40 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <inet_htonl+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	6a1b      	ldr	r3, [r3, #32]
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	00030264 	.word	0x00030264

000b5e50 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <inet_htons+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	00030264 	.word	0x00030264

000b5e60 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <hal_usart_write+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	68db      	ldr	r3, [r3, #12]
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	0003023c 	.word	0x0003023c

000b5e70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <hal_usart_available+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	691b      	ldr	r3, [r3, #16]
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	0003023c 	.word	0x0003023c

000b5e80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <hal_usart_read+0xc>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	695b      	ldr	r3, [r3, #20]
   b5e88:	9301      	str	r3, [sp, #4]
   b5e8a:	bd08      	pop	{r3, pc}
   b5e8c:	0003023c 	.word	0x0003023c

000b5e90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <hal_usart_peek+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	699b      	ldr	r3, [r3, #24]
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	0003023c 	.word	0x0003023c

000b5ea0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <hal_usart_flush+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	69db      	ldr	r3, [r3, #28]
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	0003023c 	.word	0x0003023c

000b5eb0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <hal_usart_is_enabled+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	6a1b      	ldr	r3, [r3, #32]
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	0003023c 	.word	0x0003023c

000b5ec0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <hal_usart_available_data_for_write+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	0003023c 	.word	0x0003023c

000b5ed0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <hal_usart_init_ex+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	0003023c 	.word	0x0003023c

000b5ee0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b02      	ldr	r3, [pc, #8]	; (b5eec <hal_i2c_write+0xc>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	6a1b      	ldr	r3, [r3, #32]
   b5ee8:	9301      	str	r3, [sp, #4]
   b5eea:	bd08      	pop	{r3, pc}
   b5eec:	00030228 	.word	0x00030228

000b5ef0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5ef0:	b508      	push	{r3, lr}
   b5ef2:	4b02      	ldr	r3, [pc, #8]	; (b5efc <hal_i2c_available+0xc>)
   b5ef4:	681b      	ldr	r3, [r3, #0]
   b5ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ef8:	9301      	str	r3, [sp, #4]
   b5efa:	bd08      	pop	{r3, pc}
   b5efc:	00030228 	.word	0x00030228

000b5f00 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <hal_i2c_read+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	00030228 	.word	0x00030228

000b5f10 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <hal_i2c_peek+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	00030228 	.word	0x00030228

000b5f20 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <hal_i2c_flush+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	00030228 	.word	0x00030228

000b5f30 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <hal_i2c_is_enabled+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	00030228 	.word	0x00030228

000b5f40 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <hal_i2c_init+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	00030228 	.word	0x00030228

000b5f50 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <sock_setsockopt+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	699b      	ldr	r3, [r3, #24]
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	00030238 	.word	0x00030238

000b5f60 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <sock_close+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	69db      	ldr	r3, [r3, #28]
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	00030238 	.word	0x00030238

000b5f70 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <sock_connect+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	6a1b      	ldr	r3, [r3, #32]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030238 	.word	0x00030238

000b5f80 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <sock_recv+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030238 	.word	0x00030238

000b5f90 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <sock_send+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030238 	.word	0x00030238

000b5fa0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <sock_socket+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	00030238 	.word	0x00030238

000b5fb0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <hal_spi_init+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	69db      	ldr	r3, [r3, #28]
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	00030230 	.word	0x00030230

000b5fc0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <hal_spi_is_enabled+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	6a1b      	ldr	r3, [r3, #32]
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	00030230 	.word	0x00030230

000b5fd0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <HAL_USB_USART_Init+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	681b      	ldr	r3, [r3, #0]
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	0003024c 	.word	0x0003024c

000b5fe0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <HAL_USB_USART_Available_Data+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	691b      	ldr	r3, [r3, #16]
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	0003024c 	.word	0x0003024c

000b5ff0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	695b      	ldr	r3, [r3, #20]
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	0003024c 	.word	0x0003024c

000b6000 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <HAL_USB_USART_Receive_Data+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	699b      	ldr	r3, [r3, #24]
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	0003024c 	.word	0x0003024c

000b6010 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <HAL_USB_USART_Send_Data+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	69db      	ldr	r3, [r3, #28]
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	0003024c 	.word	0x0003024c

000b6020 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <HAL_USB_USART_Flush_Data+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	6a1b      	ldr	r3, [r3, #32]
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	0003024c 	.word	0x0003024c

000b6030 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <log_message+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	00030260 	.word	0x00030260

000b6040 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <system_mode+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	681b      	ldr	r3, [r3, #0]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	00030220 	.word	0x00030220

000b6050 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <set_system_mode+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	685b      	ldr	r3, [r3, #4]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	00030220 	.word	0x00030220

000b6060 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <system_delay_ms+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	695b      	ldr	r3, [r3, #20]
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	00030220 	.word	0x00030220

000b6070 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <application_thread_current+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	00030220 	.word	0x00030220

000b6080 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <application_thread_invoke+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030220 	.word	0x00030220

000b6090 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <system_thread_get_state+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030220 	.word	0x00030220

000b60a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b03      	ldr	r3, [pc, #12]	; (b60b0 <system_ctrl_set_app_request_handler+0x10>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b60aa:	9301      	str	r3, [sp, #4]
   b60ac:	bd08      	pop	{r3, pc}
   b60ae:	0000      	.short	0x0000
   b60b0:	00030220 	.word	0x00030220

000b60b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b03      	ldr	r3, [pc, #12]	; (b60c4 <system_ctrl_set_result+0x10>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b60be:	9301      	str	r3, [sp, #4]
   b60c0:	bd08      	pop	{r3, pc}
   b60c2:	0000      	.short	0x0000
   b60c4:	00030220 	.word	0x00030220

000b60c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <network_connect+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	685b      	ldr	r3, [r3, #4]
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	00030240 	.word	0x00030240

000b60d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <network_connecting+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	689b      	ldr	r3, [r3, #8]
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	00030240 	.word	0x00030240

000b60e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <network_disconnect+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	68db      	ldr	r3, [r3, #12]
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	00030240 	.word	0x00030240

000b60f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <network_ready+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	691b      	ldr	r3, [r3, #16]
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	00030240 	.word	0x00030240

000b6108 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <network_on+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	695b      	ldr	r3, [r3, #20]
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	00030240 	.word	0x00030240

000b6118 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <network_off+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	699b      	ldr	r3, [r3, #24]
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	00030240 	.word	0x00030240

000b6128 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <network_listen+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	69db      	ldr	r3, [r3, #28]
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	00030240 	.word	0x00030240

000b6138 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <network_listening+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	6a1b      	ldr	r3, [r3, #32]
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	00030240 	.word	0x00030240

000b6148 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <network_set_listen_timeout+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	00030240 	.word	0x00030240

000b6158 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <network_get_listen_timeout+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	00030240 	.word	0x00030240

000b6168 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <network_is_on+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	00030240 	.word	0x00030240

000b6178 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <network_is_off+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	00030240 	.word	0x00030240

000b6188 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <spark_process+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	689b      	ldr	r3, [r3, #8]
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	00030244 	.word	0x00030244

000b6198 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <spark_cloud_flag_connected+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	695b      	ldr	r3, [r3, #20]
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	00030244 	.word	0x00030244

000b61a8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <spark_send_event+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	6a1b      	ldr	r3, [r3, #32]
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	00030244 	.word	0x00030244

000b61b8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <spark_subscribe+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	00030244 	.word	0x00030244

000b61c8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <spark_sync_time_pending+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	00030244 	.word	0x00030244

000b61d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	00030244 	.word	0x00030244

000b61e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <malloc+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	681b      	ldr	r3, [r3, #0]
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	0003021c 	.word	0x0003021c

000b61f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <free+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	685b      	ldr	r3, [r3, #4]
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	0003021c 	.word	0x0003021c

000b6208 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <realloc+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	689b      	ldr	r3, [r3, #8]
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	0003021c 	.word	0x0003021c

000b6218 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <sprintf+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	68db      	ldr	r3, [r3, #12]
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	0003021c 	.word	0x0003021c

000b6228 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <vsnprintf+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	0003021c 	.word	0x0003021c

000b6238 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <abort+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	0003021c 	.word	0x0003021c

000b6248 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <_malloc_r+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	0003021c 	.word	0x0003021c

000b6258 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <__errno+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	0003021c 	.word	0x0003021c

000b6268 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <__assert_func+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	0003021c 	.word	0x0003021c

000b6278 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <newlib_impure_ptr_callback+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	0003021c 	.word	0x0003021c

000b6288 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <localtime_r+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	0003021c 	.word	0x0003021c

000b6298 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6298:	2200      	movs	r2, #0
   b629a:	6840      	ldr	r0, [r0, #4]
   b629c:	4611      	mov	r1, r2
   b629e:	f7ff bf4b 	b.w	b6138 <network_listening>

000b62a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b62a2:	2200      	movs	r2, #0
   b62a4:	6840      	ldr	r0, [r0, #4]
   b62a6:	4611      	mov	r1, r2
   b62a8:	f7ff bf56 	b.w	b6158 <network_get_listen_timeout>

000b62ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b62ac:	6840      	ldr	r0, [r0, #4]
   b62ae:	2200      	movs	r2, #0
   b62b0:	f7ff bf4a 	b.w	b6148 <network_set_listen_timeout>

000b62b4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b62b4:	6840      	ldr	r0, [r0, #4]
   b62b6:	2200      	movs	r2, #0
   b62b8:	f081 0101 	eor.w	r1, r1, #1
   b62bc:	f7ff bf34 	b.w	b6128 <network_listen>

000b62c0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b62c0:	2300      	movs	r3, #0
   b62c2:	6840      	ldr	r0, [r0, #4]
   b62c4:	461a      	mov	r2, r3
   b62c6:	4619      	mov	r1, r3
   b62c8:	f7ff bf26 	b.w	b6118 <network_off>

000b62cc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b62cc:	2300      	movs	r3, #0
   b62ce:	6840      	ldr	r0, [r0, #4]
   b62d0:	461a      	mov	r2, r3
   b62d2:	4619      	mov	r1, r3
   b62d4:	f7ff bf18 	b.w	b6108 <network_on>

000b62d8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b62d8:	2200      	movs	r2, #0
   b62da:	6840      	ldr	r0, [r0, #4]
   b62dc:	4611      	mov	r1, r2
   b62de:	f7ff bf0b 	b.w	b60f8 <network_ready>

000b62e2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b62e2:	2200      	movs	r2, #0
   b62e4:	6840      	ldr	r0, [r0, #4]
   b62e6:	4611      	mov	r1, r2
   b62e8:	f7ff bef6 	b.w	b60d8 <network_connecting>

000b62ec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b62ec:	6840      	ldr	r0, [r0, #4]
   b62ee:	2200      	movs	r2, #0
   b62f0:	2102      	movs	r1, #2
   b62f2:	f7ff bef9 	b.w	b60e8 <network_disconnect>

000b62f6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b62f6:	2300      	movs	r3, #0
   b62f8:	6840      	ldr	r0, [r0, #4]
   b62fa:	461a      	mov	r2, r3
   b62fc:	f7ff bee4 	b.w	b60c8 <network_connect>

000b6300 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6300:	4b02      	ldr	r3, [pc, #8]	; (b630c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6302:	2203      	movs	r2, #3
   b6304:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6306:	4a02      	ldr	r2, [pc, #8]	; (b6310 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6308:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b630a:	4770      	bx	lr
   b630c:	2003e67c 	.word	0x2003e67c
   b6310:	000ba76c 	.word	0x000ba76c

000b6314 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6314:	b510      	push	{r4, lr}
   b6316:	4604      	mov	r4, r0
   b6318:	4608      	mov	r0, r1
{
    _spi = spi;
   b631a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b631c:	f7ff fe48 	bl	b5fb0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6320:	2300      	movs	r3, #0
   b6322:	6063      	str	r3, [r4, #4]
}
   b6324:	4620      	mov	r0, r4
   b6326:	bd10      	pop	{r4, pc}

000b6328 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6328:	4b05      	ldr	r3, [pc, #20]	; (b6340 <_GLOBAL__sub_I_System+0x18>)
   b632a:	2202      	movs	r2, #2
   b632c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b632e:	4b05      	ldr	r3, [pc, #20]	; (b6344 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6330:	4a05      	ldr	r2, [pc, #20]	; (b6348 <_GLOBAL__sub_I_System+0x20>)
   b6332:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6334:	2000      	movs	r0, #0
   b6336:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b633a:	f7ff be89 	b.w	b6050 <set_system_mode>
   b633e:	bf00      	nop
   b6340:	2003e690 	.word	0x2003e690
   b6344:	2003e684 	.word	0x2003e684
   b6348:	ffff0000 	.word	0xffff0000

000b634c <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b6350:	1e93      	subs	r3, r2, #2
{
   b6352:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b6354:	2b22      	cmp	r3, #34	; 0x22
   b6356:	f04f 0300 	mov.w	r3, #0
{
   b635a:	460d      	mov	r5, r1
   b635c:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b635e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b6362:	d927      	bls.n	b63b4 <ltoa+0x68>

      if (10 == base && N < 0L)
   b6364:	2800      	cmp	r0, #0
   b6366:	da2a      	bge.n	b63be <ltoa+0x72>
      {
            *head++ = '-';
   b6368:	462e      	mov	r6, r5
   b636a:	232d      	movs	r3, #45	; 0x2d
   b636c:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b6370:	4240      	negs	r0, r0
   b6372:	240a      	movs	r4, #10
      *tail-- = '\0';
   b6374:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b6378:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b637c:	4622      	mov	r2, r4
   b637e:	4601      	mov	r1, r0
   b6380:	a801      	add	r0, sp, #4
   b6382:	f001 ffb1 	bl	b82e8 <ldiv>
   b6386:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b6388:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b638a:	2b09      	cmp	r3, #9
   b638c:	bfcc      	ite	gt
   b638e:	2237      	movgt	r2, #55	; 0x37
   b6390:	2230      	movle	r2, #48	; 0x30
   b6392:	fa52 f383 	uxtab	r3, r2, r3
   b6396:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b639a:	f108 0801 	add.w	r8, r8, #1
   b639e:	2800      	cmp	r0, #0
   b63a0:	d1ec      	bne.n	b637c <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b63a2:	4642      	mov	r2, r8
   b63a4:	1c79      	adds	r1, r7, #1
   b63a6:	4630      	mov	r0, r6
   b63a8:	f001 ffc2 	bl	b8330 <memcpy>
      return str;
}
   b63ac:	4628      	mov	r0, r5
   b63ae:	b00c      	add	sp, #48	; 0x30
   b63b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b63b4:	2a0a      	cmp	r2, #10
   b63b6:	d0d5      	beq.n	b6364 <ltoa+0x18>
      if (uarg)
   b63b8:	b118      	cbz	r0, b63c2 <ltoa+0x76>
   b63ba:	462e      	mov	r6, r5
   b63bc:	e7da      	b.n	b6374 <ltoa+0x28>
   b63be:	240a      	movs	r4, #10
   b63c0:	e7fa      	b.n	b63b8 <ltoa+0x6c>
      else  *tail-- = '0';
   b63c2:	2330      	movs	r3, #48	; 0x30
   b63c4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b63c8:	462e      	mov	r6, r5
   b63ca:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b63ce:	f04f 0802 	mov.w	r8, #2
   b63d2:	e7e6      	b.n	b63a2 <ltoa+0x56>

000b63d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b63d4:	b510      	push	{r4, lr}
   b63d6:	4604      	mov	r4, r0
{
	free(buffer);
   b63d8:	6800      	ldr	r0, [r0, #0]
   b63da:	f7ff ff0d 	bl	b61f8 <free>
}
   b63de:	4620      	mov	r0, r4
   b63e0:	bd10      	pop	{r4, pc}

000b63e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b63e2:	b510      	push	{r4, lr}
   b63e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b63e6:	6800      	ldr	r0, [r0, #0]
   b63e8:	b108      	cbz	r0, b63ee <_ZN6String10invalidateEv+0xc>
   b63ea:	f7ff ff05 	bl	b61f8 <free>
	buffer = NULL;
   b63ee:	2300      	movs	r3, #0
	capacity = len = 0;
   b63f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b63f4:	6023      	str	r3, [r4, #0]
}
   b63f6:	bd10      	pop	{r4, pc}

000b63f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b63f8:	b538      	push	{r3, r4, r5, lr}
   b63fa:	4604      	mov	r4, r0
   b63fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b63fe:	6800      	ldr	r0, [r0, #0]
   b6400:	3101      	adds	r1, #1
   b6402:	f7ff ff01 	bl	b6208 <realloc>
	if (newbuffer) {
   b6406:	b110      	cbz	r0, b640e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6408:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b640c:	2001      	movs	r0, #1
	}
	return 0;
}
   b640e:	bd38      	pop	{r3, r4, r5, pc}

000b6410 <_ZN6String7reserveEj>:
{
   b6410:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6412:	6803      	ldr	r3, [r0, #0]
{
   b6414:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6416:	b123      	cbz	r3, b6422 <_ZN6String7reserveEj+0x12>
   b6418:	6843      	ldr	r3, [r0, #4]
   b641a:	428b      	cmp	r3, r1
   b641c:	d301      	bcc.n	b6422 <_ZN6String7reserveEj+0x12>
   b641e:	2001      	movs	r0, #1
}
   b6420:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6422:	4620      	mov	r0, r4
   b6424:	f7ff ffe8 	bl	b63f8 <_ZN6String12changeBufferEj>
   b6428:	2800      	cmp	r0, #0
   b642a:	d0f9      	beq.n	b6420 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b642c:	68a3      	ldr	r3, [r4, #8]
   b642e:	2b00      	cmp	r3, #0
   b6430:	d1f5      	bne.n	b641e <_ZN6String7reserveEj+0xe>
   b6432:	6822      	ldr	r2, [r4, #0]
   b6434:	7013      	strb	r3, [r2, #0]
   b6436:	e7f2      	b.n	b641e <_ZN6String7reserveEj+0xe>

000b6438 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6438:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b643a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b643c:	4611      	mov	r1, r2
   b643e:	9201      	str	r2, [sp, #4]
{
   b6440:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6442:	f7ff ffe5 	bl	b6410 <_ZN6String7reserveEj>
   b6446:	9a01      	ldr	r2, [sp, #4]
   b6448:	b928      	cbnz	r0, b6456 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b644a:	4620      	mov	r0, r4
   b644c:	f7ff ffc9 	bl	b63e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6450:	4620      	mov	r0, r4
   b6452:	b003      	add	sp, #12
   b6454:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6456:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6458:	4629      	mov	r1, r5
   b645a:	6820      	ldr	r0, [r4, #0]
   b645c:	f001 ff68 	bl	b8330 <memcpy>
	buffer[len] = 0;
   b6460:	6822      	ldr	r2, [r4, #0]
   b6462:	68a3      	ldr	r3, [r4, #8]
   b6464:	2100      	movs	r1, #0
   b6466:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6468:	e7f2      	b.n	b6450 <_ZN6String4copyEPKcj+0x18>

000b646a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b646a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b646c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b646e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6472:	4604      	mov	r4, r0
	len = 0;
   b6474:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6476:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6478:	b141      	cbz	r1, b648c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b647a:	4608      	mov	r0, r1
   b647c:	9101      	str	r1, [sp, #4]
   b647e:	f7fe fb29 	bl	b4ad4 <strlen>
   b6482:	9901      	ldr	r1, [sp, #4]
   b6484:	4602      	mov	r2, r0
   b6486:	4620      	mov	r0, r4
   b6488:	f7ff ffd6 	bl	b6438 <_ZN6String4copyEPKcj>
}
   b648c:	4620      	mov	r0, r4
   b648e:	b002      	add	sp, #8
   b6490:	bd10      	pop	{r4, pc}

000b6492 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6492:	4288      	cmp	r0, r1
{
   b6494:	b510      	push	{r4, lr}
   b6496:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6498:	d005      	beq.n	b64a6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b649a:	680b      	ldr	r3, [r1, #0]
   b649c:	b12b      	cbz	r3, b64aa <_ZN6StringaSERKS_+0x18>
   b649e:	688a      	ldr	r2, [r1, #8]
   b64a0:	4619      	mov	r1, r3
   b64a2:	f7ff ffc9 	bl	b6438 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b64a6:	4620      	mov	r0, r4
   b64a8:	bd10      	pop	{r4, pc}
	else invalidate();
   b64aa:	f7ff ff9a 	bl	b63e2 <_ZN6String10invalidateEv>
   b64ae:	e7fa      	b.n	b64a6 <_ZN6StringaSERKS_+0x14>

000b64b0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b64b0:	b510      	push	{r4, lr}
	buffer = NULL;
   b64b2:	2300      	movs	r3, #0
String::String(const String &value)
   b64b4:	4604      	mov	r4, r0
	capacity = 0;
   b64b6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b64ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   b64bc:	7303      	strb	r3, [r0, #12]
	*this = value;
   b64be:	f7ff ffe8 	bl	b6492 <_ZN6StringaSERKS_>
}
   b64c2:	4620      	mov	r0, r4
   b64c4:	bd10      	pop	{r4, pc}

000b64c6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b64c6:	b513      	push	{r0, r1, r4, lr}
   b64c8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b64ca:	b159      	cbz	r1, b64e4 <_ZN6StringaSEPKc+0x1e>
   b64cc:	4608      	mov	r0, r1
   b64ce:	9101      	str	r1, [sp, #4]
   b64d0:	f7fe fb00 	bl	b4ad4 <strlen>
   b64d4:	9901      	ldr	r1, [sp, #4]
   b64d6:	4602      	mov	r2, r0
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff ffad 	bl	b6438 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b64de:	4620      	mov	r0, r4
   b64e0:	b002      	add	sp, #8
   b64e2:	bd10      	pop	{r4, pc}
	else invalidate();
   b64e4:	f7ff ff7d 	bl	b63e2 <_ZN6String10invalidateEv>
   b64e8:	e7f9      	b.n	b64de <_ZN6StringaSEPKc+0x18>

000b64ea <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b64ea:	b510      	push	{r4, lr}
   b64ec:	4604      	mov	r4, r0
   b64ee:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b64f0:	2300      	movs	r3, #0
	capacity = 0;
   b64f2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b64f6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b64f8:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b64fa:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b64fc:	a901      	add	r1, sp, #4
   b64fe:	f7ff ff25 	bl	b634c <ltoa>
	*this = buf;
   b6502:	a901      	add	r1, sp, #4
   b6504:	4620      	mov	r0, r4
   b6506:	f7ff ffde 	bl	b64c6 <_ZN6StringaSEPKc>
}
   b650a:	4620      	mov	r0, r4
   b650c:	b00a      	add	sp, #40	; 0x28
   b650e:	bd10      	pop	{r4, pc}

000b6510 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6510:	b570      	push	{r4, r5, r6, lr}
   b6512:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6514:	460e      	mov	r6, r1
   b6516:	b909      	cbnz	r1, b651c <_ZN6String6concatEPKcj+0xc>
   b6518:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b651a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b651c:	b16a      	cbz	r2, b653a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b651e:	6884      	ldr	r4, [r0, #8]
   b6520:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6522:	4621      	mov	r1, r4
   b6524:	f7ff ff74 	bl	b6410 <_ZN6String7reserveEj>
   b6528:	2800      	cmp	r0, #0
   b652a:	d0f5      	beq.n	b6518 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b652c:	6828      	ldr	r0, [r5, #0]
   b652e:	68ab      	ldr	r3, [r5, #8]
   b6530:	4631      	mov	r1, r6
   b6532:	4418      	add	r0, r3
   b6534:	f001 ff5a 	bl	b83ec <strcpy>
	len = newlen;
   b6538:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b653a:	2001      	movs	r0, #1
   b653c:	e7ed      	b.n	b651a <_ZN6String6concatEPKcj+0xa>

000b653e <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b653e:	688a      	ldr	r2, [r1, #8]
   b6540:	6809      	ldr	r1, [r1, #0]
   b6542:	f7ff bfe5 	b.w	b6510 <_ZN6String6concatEPKcj>

000b6546 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6546:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6548:	688a      	ldr	r2, [r1, #8]
   b654a:	6809      	ldr	r1, [r1, #0]
{
   b654c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b654e:	f7ff ffdf 	bl	b6510 <_ZN6String6concatEPKcj>
   b6552:	b910      	cbnz	r0, b655a <_ZplRK15StringSumHelperRK6String+0x14>
   b6554:	4620      	mov	r0, r4
   b6556:	f7ff ff44 	bl	b63e2 <_ZN6String10invalidateEv>
	return a;
}
   b655a:	4620      	mov	r0, r4
   b655c:	bd10      	pop	{r4, pc}
	...

000b6560 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6560:	b40e      	push	{r1, r2, r3}
   b6562:	b570      	push	{r4, r5, r6, lr}
   b6564:	b087      	sub	sp, #28
   b6566:	ad0b      	add	r5, sp, #44	; 0x2c
   b6568:	4604      	mov	r4, r0
   b656a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b656e:	9201      	str	r2, [sp, #4]
   b6570:	462b      	mov	r3, r5
   b6572:	2105      	movs	r1, #5
   b6574:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6576:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6578:	f7ff fe56 	bl	b6228 <vsnprintf>
    va_end(marker);

    String result;
   b657c:	490b      	ldr	r1, [pc, #44]	; (b65ac <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b657e:	4606      	mov	r6, r0
    String result;
   b6580:	4620      	mov	r0, r4
   b6582:	f7ff ff72 	bl	b646a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b6586:	4631      	mov	r1, r6
   b6588:	4620      	mov	r0, r4
   b658a:	f7ff ff41 	bl	b6410 <_ZN6String7reserveEj>
    if (result.buffer) {
   b658e:	6820      	ldr	r0, [r4, #0]
   b6590:	b130      	cbz	r0, b65a0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6592:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b6594:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6596:	462b      	mov	r3, r5
   b6598:	1c71      	adds	r1, r6, #1
   b659a:	f7ff fe45 	bl	b6228 <vsnprintf>
        va_end(marker);
        result.len = n;
   b659e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b65a0:	4620      	mov	r0, r4
   b65a2:	b007      	add	sp, #28
   b65a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b65a8:	b003      	add	sp, #12
   b65aa:	4770      	bx	lr
   b65ac:	000ba5c5 	.word	0x000ba5c5

000b65b0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b65b0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b65b2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b65b4:	4604      	mov	r4, r0
      if (_M_manager)
   b65b6:	b113      	cbz	r3, b65be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b65b8:	2203      	movs	r2, #3
   b65ba:	4601      	mov	r1, r0
   b65bc:	4798      	blx	r3
    }
   b65be:	4620      	mov	r0, r4
   b65c0:	bd10      	pop	{r4, pc}

000b65c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b65c2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b65c4:	6843      	ldr	r3, [r0, #4]
   b65c6:	3b01      	subs	r3, #1
    {
   b65c8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b65ca:	6043      	str	r3, [r0, #4]
   b65cc:	b963      	cbnz	r3, b65e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b65ce:	6803      	ldr	r3, [r0, #0]
   b65d0:	689b      	ldr	r3, [r3, #8]
   b65d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b65d4:	68a3      	ldr	r3, [r4, #8]
   b65d6:	3b01      	subs	r3, #1
   b65d8:	60a3      	str	r3, [r4, #8]
   b65da:	b92b      	cbnz	r3, b65e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b65dc:	6823      	ldr	r3, [r4, #0]
   b65de:	4620      	mov	r0, r4
   b65e0:	68db      	ldr	r3, [r3, #12]
    }
   b65e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b65e6:	4718      	bx	r3
    }
   b65e8:	bd10      	pop	{r4, pc}

000b65ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b65ea:	b513      	push	{r0, r1, r4, lr}
   b65ec:	460b      	mov	r3, r1
   b65ee:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b65f0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b65f4:	466c      	mov	r4, sp
   b65f6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b65fa:	e893 0003 	ldmia.w	r3, {r0, r1}
   b65fe:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6602:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6606:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b660a:	b002      	add	sp, #8
   b660c:	bd10      	pop	{r4, pc}
	...

000b6610 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6610:	4802      	ldr	r0, [pc, #8]	; (b661c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6612:	2300      	movs	r3, #0
   b6614:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6616:	f7ff bc03 	b.w	b5e20 <os_mutex_recursive_create>
   b661a:	bf00      	nop
   b661c:	2003e694 	.word	0x2003e694

000b6620 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6622:	4606      	mov	r6, r0
   b6624:	460d      	mov	r5, r1
  size_t n = 0;
   b6626:	188f      	adds	r7, r1, r2
   b6628:	2400      	movs	r4, #0
  while (size--) {
   b662a:	42bd      	cmp	r5, r7
   b662c:	d00c      	beq.n	b6648 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b662e:	6833      	ldr	r3, [r6, #0]
   b6630:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6634:	689b      	ldr	r3, [r3, #8]
   b6636:	4630      	mov	r0, r6
   b6638:	4798      	blx	r3
     if (chunk>=0)
   b663a:	1e03      	subs	r3, r0, #0
   b663c:	db01      	blt.n	b6642 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b663e:	441c      	add	r4, r3
  while (size--) {
   b6640:	e7f3      	b.n	b662a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6642:	2c00      	cmp	r4, #0
   b6644:	bf08      	it	eq
   b6646:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6648:	4620      	mov	r0, r4
   b664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b664c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b664c:	b513      	push	{r0, r1, r4, lr}
   b664e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6650:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6652:	b159      	cbz	r1, b666c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6654:	9101      	str	r1, [sp, #4]
   b6656:	f7fe fa3d 	bl	b4ad4 <strlen>
   b665a:	6823      	ldr	r3, [r4, #0]
   b665c:	9901      	ldr	r1, [sp, #4]
   b665e:	68db      	ldr	r3, [r3, #12]
   b6660:	4602      	mov	r2, r0
   b6662:	4620      	mov	r0, r4
    }
   b6664:	b002      	add	sp, #8
   b6666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b666a:	4718      	bx	r3
    }
   b666c:	b002      	add	sp, #8
   b666e:	bd10      	pop	{r4, pc}

000b6670 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6670:	b508      	push	{r3, lr}
  return write(str);
   b6672:	f7ff ffeb 	bl	b664c <_ZN5Print5writeEPKc>
}
   b6676:	bd08      	pop	{r3, pc}

000b6678 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6678:	6803      	ldr	r3, [r0, #0]
   b667a:	689b      	ldr	r3, [r3, #8]
   b667c:	4718      	bx	r3

000b667e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b667e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6680:	210d      	movs	r1, #13
{
   b6682:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6684:	f7ff fff8 	bl	b6678 <_ZN5Print5printEc>
  n += print('\n');
   b6688:	210a      	movs	r1, #10
  size_t n = print('\r');
   b668a:	4604      	mov	r4, r0
  n += print('\n');
   b668c:	4628      	mov	r0, r5
   b668e:	f7ff fff3 	bl	b6678 <_ZN5Print5printEc>
  return n;
}
   b6692:	4420      	add	r0, r4
   b6694:	bd38      	pop	{r3, r4, r5, pc}

000b6696 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6696:	b538      	push	{r3, r4, r5, lr}
   b6698:	4605      	mov	r5, r0
  return write(str);
   b669a:	f7ff ffd7 	bl	b664c <_ZN5Print5writeEPKc>
   b669e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b66a0:	4628      	mov	r0, r5
   b66a2:	f7ff ffec 	bl	b667e <_ZN5Print7printlnEv>
  return n;
}
   b66a6:	4420      	add	r0, r4
   b66a8:	bd38      	pop	{r3, r4, r5, pc}

000b66aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b66aa:	b530      	push	{r4, r5, lr}
   b66ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b66ae:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b66b0:	2a01      	cmp	r2, #1
  *str = '\0';
   b66b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b66b6:	bf98      	it	ls
   b66b8:	220a      	movls	r2, #10
   b66ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b66bc:	460d      	mov	r5, r1
   b66be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b66c2:	fb01 5312 	mls	r3, r1, r2, r5
   b66c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b66ca:	2b09      	cmp	r3, #9
   b66cc:	bf94      	ite	ls
   b66ce:	3330      	addls	r3, #48	; 0x30
   b66d0:	3337      	addhi	r3, #55	; 0x37
   b66d2:	b2db      	uxtb	r3, r3
  } while(n);
   b66d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b66d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b66da:	d9ef      	bls.n	b66bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b66dc:	4621      	mov	r1, r4
   b66de:	f7ff ffb5 	bl	b664c <_ZN5Print5writeEPKc>
}
   b66e2:	b00b      	add	sp, #44	; 0x2c
   b66e4:	bd30      	pop	{r4, r5, pc}

000b66e6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b66e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b66ea:	b086      	sub	sp, #24
   b66ec:	af00      	add	r7, sp, #0
   b66ee:	4605      	mov	r5, r0
   b66f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b66f2:	1d38      	adds	r0, r7, #4
   b66f4:	2114      	movs	r1, #20
{
   b66f6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b66f8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b66fa:	f7ff fd95 	bl	b6228 <vsnprintf>

    if (n<bufsize)
   b66fe:	2813      	cmp	r0, #19
   b6700:	d80e      	bhi.n	b6720 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6702:	1d39      	adds	r1, r7, #4
   b6704:	4628      	mov	r0, r5
   b6706:	f7ff ffa1 	bl	b664c <_ZN5Print5writeEPKc>
   b670a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b670c:	b11e      	cbz	r6, b6716 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b670e:	4628      	mov	r0, r5
   b6710:	f7ff ffb5 	bl	b667e <_ZN5Print7printlnEv>
   b6714:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6716:	4620      	mov	r0, r4
   b6718:	3718      	adds	r7, #24
   b671a:	46bd      	mov	sp, r7
   b671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6720:	f100 0308 	add.w	r3, r0, #8
   b6724:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6728:	46e8      	mov	r8, sp
        char bigger[n+1];
   b672a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b672e:	4622      	mov	r2, r4
   b6730:	1c41      	adds	r1, r0, #1
   b6732:	683b      	ldr	r3, [r7, #0]
   b6734:	4668      	mov	r0, sp
   b6736:	f7ff fd77 	bl	b6228 <vsnprintf>
  return write(str);
   b673a:	4669      	mov	r1, sp
   b673c:	4628      	mov	r0, r5
   b673e:	f7ff ff85 	bl	b664c <_ZN5Print5writeEPKc>
   b6742:	4604      	mov	r4, r0
   b6744:	46c5      	mov	sp, r8
   b6746:	e7e1      	b.n	b670c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6748 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6748:	4b01      	ldr	r3, [pc, #4]	; (b6750 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b674a:	4a02      	ldr	r2, [pc, #8]	; (b6754 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b674c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b674e:	4770      	bx	lr
   b6750:	2003e698 	.word	0x2003e698
   b6754:	000ba7a8 	.word	0x000ba7a8

000b6758 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b6758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b675c:	4a15      	ldr	r2, [pc, #84]	; (b67b4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b675e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b67c0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b6762:	e9d2 6300 	ldrd	r6, r3, [r2]
   b6766:	1980      	adds	r0, r0, r6
   b6768:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b676c:	4b12      	ldr	r3, [pc, #72]	; (b67b8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b676e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b6772:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b6776:	1986      	adds	r6, r0, r6
   b6778:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b677c:	42bb      	cmp	r3, r7
   b677e:	bf08      	it	eq
   b6780:	42b2      	cmpeq	r2, r6
{
   b6782:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b6784:	d013      	beq.n	b67ae <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b6786:	a903      	add	r1, sp, #12
   b6788:	4668      	mov	r0, sp
   b678a:	e9cd 6700 	strd	r6, r7, [sp]
   b678e:	f7ff fd7b 	bl	b6288 <localtime_r>
	calendar_time.tm_year += 1900;
   b6792:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6794:	4d09      	ldr	r5, [pc, #36]	; (b67bc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b6796:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b679a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b679c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b679e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b67a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b67a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b67a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b67a6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b67aa:	6823      	ldr	r3, [r4, #0]
   b67ac:	602b      	str	r3, [r5, #0]
    }
}
   b67ae:	b00c      	add	sp, #48	; 0x30
   b67b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b67b4:	2003e6d0 	.word	0x2003e6d0
   b67b8:	2003e6c8 	.word	0x2003e6c8
   b67bc:	2003e6a0 	.word	0x2003e6a0
   b67c0:	2003e6d8 	.word	0x2003e6d8

000b67c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b67c4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b67c6:	2000      	movs	r0, #0
   b67c8:	f7ff fcfe 	bl	b61c8 <spark_sync_time_pending>
   b67cc:	b128      	cbz	r0, b67da <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b67ce:	f7ff fce3 	bl	b6198 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b67d2:	f080 0001 	eor.w	r0, r0, #1
   b67d6:	b2c0      	uxtb	r0, r0
    }
   b67d8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b67da:	2001      	movs	r0, #1
   b67dc:	e7fc      	b.n	b67d8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b67e0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b67e0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b67e2:	f7ff ffb9 	bl	b6758 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b67e6:	4b02      	ldr	r3, [pc, #8]	; (b67f0 <_ZN9TimeClass5monthEx+0x10>)
   b67e8:	6918      	ldr	r0, [r3, #16]
}
   b67ea:	3001      	adds	r0, #1
   b67ec:	bd08      	pop	{r3, pc}
   b67ee:	bf00      	nop
   b67f0:	2003e6a0 	.word	0x2003e6a0

000b67f4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b67f4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b67f6:	2000      	movs	r0, #0
   b67f8:	f7ff faea 	bl	b5dd0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b67fc:	4604      	mov	r4, r0
   b67fe:	b9a0      	cbnz	r0, b682a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b6800:	f7ff fc1e 	bl	b6040 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b6804:	2801      	cmp	r0, #1
   b6806:	d110      	bne.n	b682a <_ZN9TimeClass7isValidEv+0x36>
   b6808:	4620      	mov	r0, r4
   b680a:	f7ff fc41 	bl	b6090 <system_thread_get_state>
   b680e:	b960      	cbnz	r0, b682a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b6810:	f7ff ffd8 	bl	b67c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b6814:	b910      	cbnz	r0, b681c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b6816:	f7ff fcb7 	bl	b6188 <spark_process>
        while (_while() && !_condition()) {
   b681a:	e7f9      	b.n	b6810 <_ZN9TimeClass7isValidEv+0x1c>
   b681c:	f7ff ffd2 	bl	b67c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b6820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b6824:	2000      	movs	r0, #0
   b6826:	f7ff bad3 	b.w	b5dd0 <hal_rtc_time_is_valid>
}
   b682a:	4620      	mov	r0, r4
   b682c:	bd10      	pop	{r4, pc}

000b682e <_ZN9TimeClass3nowEv>:
{
   b682e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b6830:	f7ff ffe0 	bl	b67f4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b6834:	2210      	movs	r2, #16
   b6836:	2100      	movs	r1, #0
   b6838:	4668      	mov	r0, sp
   b683a:	f001 fda1 	bl	b8380 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b683e:	2100      	movs	r1, #0
   b6840:	4668      	mov	r0, sp
   b6842:	f7ff facd 	bl	b5de0 <hal_rtc_get_time>
}
   b6846:	9800      	ldr	r0, [sp, #0]
   b6848:	b005      	add	sp, #20
   b684a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6850 <_ZN9TimeClass4hourEv>:
{
   b6850:	b508      	push	{r3, lr}
	return hour(now());
   b6852:	f7ff ffec 	bl	b682e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6856:	17c1      	asrs	r1, r0, #31
   b6858:	f7ff ff7e 	bl	b6758 <_ZL22Refresh_UnixTime_Cachex>
}
   b685c:	4b01      	ldr	r3, [pc, #4]	; (b6864 <_ZN9TimeClass4hourEv+0x14>)
   b685e:	6898      	ldr	r0, [r3, #8]
   b6860:	bd08      	pop	{r3, pc}
   b6862:	bf00      	nop
   b6864:	2003e6a0 	.word	0x2003e6a0

000b6868 <_ZN9TimeClass6minuteEv>:
{
   b6868:	b508      	push	{r3, lr}
	return minute(now());
   b686a:	f7ff ffe0 	bl	b682e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b686e:	17c1      	asrs	r1, r0, #31
   b6870:	f7ff ff72 	bl	b6758 <_ZL22Refresh_UnixTime_Cachex>
}
   b6874:	4b01      	ldr	r3, [pc, #4]	; (b687c <_ZN9TimeClass6minuteEv+0x14>)
   b6876:	6858      	ldr	r0, [r3, #4]
   b6878:	bd08      	pop	{r3, pc}
   b687a:	bf00      	nop
   b687c:	2003e6a0 	.word	0x2003e6a0

000b6880 <_ZN9TimeClass3dayEv>:
{
   b6880:	b508      	push	{r3, lr}
	return day(now());
   b6882:	f7ff ffd4 	bl	b682e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6886:	17c1      	asrs	r1, r0, #31
   b6888:	f7ff ff66 	bl	b6758 <_ZL22Refresh_UnixTime_Cachex>
}
   b688c:	4b01      	ldr	r3, [pc, #4]	; (b6894 <_ZN9TimeClass3dayEv+0x14>)
   b688e:	68d8      	ldr	r0, [r3, #12]
   b6890:	bd08      	pop	{r3, pc}
   b6892:	bf00      	nop
   b6894:	2003e6a0 	.word	0x2003e6a0

000b6898 <_ZN9TimeClass5monthEv>:
{
   b6898:	b508      	push	{r3, lr}
	return month(now());
   b689a:	f7ff ffc8 	bl	b682e <_ZN9TimeClass3nowEv>
}
   b689e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b68a2:	17c1      	asrs	r1, r0, #31
   b68a4:	f7ff bf9c 	b.w	b67e0 <_ZN9TimeClass5monthEx>

000b68a8 <_ZN9TimeClass4yearEv>:
{
   b68a8:	b508      	push	{r3, lr}
	return year(now());
   b68aa:	f7ff ffc0 	bl	b682e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b68ae:	17c1      	asrs	r1, r0, #31
   b68b0:	f7ff ff52 	bl	b6758 <_ZL22Refresh_UnixTime_Cachex>
}
   b68b4:	4b01      	ldr	r3, [pc, #4]	; (b68bc <_ZN9TimeClass4yearEv+0x14>)
   b68b6:	6958      	ldr	r0, [r3, #20]
   b68b8:	bd08      	pop	{r3, pc}
   b68ba:	bf00      	nop
   b68bc:	2003e6a0 	.word	0x2003e6a0

000b68c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b68c0:	4b02      	ldr	r3, [pc, #8]	; (b68cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b68c2:	681a      	ldr	r2, [r3, #0]
   b68c4:	4b02      	ldr	r3, [pc, #8]	; (b68d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b68c6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b68c8:	4770      	bx	lr
   b68ca:	bf00      	nop
   b68cc:	2003cd00 	.word	0x2003cd00
   b68d0:	2003e69c 	.word	0x2003e69c

000b68d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b68d4:	2100      	movs	r1, #0
   b68d6:	f7ff bbc3 	b.w	b6060 <system_delay_ms>
	...

000b68dc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b68dc:	b510      	push	{r4, lr}
   b68de:	4b04      	ldr	r3, [pc, #16]	; (b68f0 <_ZN9TCPClientD1Ev+0x14>)
   b68e0:	6003      	str	r3, [r0, #0]
   b68e2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b68e4:	6980      	ldr	r0, [r0, #24]
   b68e6:	b108      	cbz	r0, b68ec <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b68e8:	f7ff fe6b 	bl	b65c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b68ec:	4620      	mov	r0, r4
   b68ee:	bd10      	pop	{r4, pc}
   b68f0:	000ba8bc 	.word	0x000ba8bc

000b68f4 <_ZN9TCPClientD0Ev>:
   b68f4:	b510      	push	{r4, lr}
   b68f6:	4604      	mov	r4, r0
   b68f8:	f7ff fff0 	bl	b68dc <_ZN9TCPClientD1Ev>
   b68fc:	4620      	mov	r0, r4
   b68fe:	211c      	movs	r1, #28
   b6900:	f7fe f94b 	bl	b4b9a <_ZdlPvj>
   b6904:	4620      	mov	r0, r4
   b6906:	bd10      	pop	{r4, pc}

000b6908 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6908:	4b01      	ldr	r3, [pc, #4]	; (b6910 <_GLOBAL__sub_I_RGB+0x8>)
   b690a:	2200      	movs	r2, #0
   b690c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b690e:	4770      	bx	lr
   b6910:	2003e6e0 	.word	0x2003e6e0

000b6914 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6914:	4b01      	ldr	r3, [pc, #4]	; (b691c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6916:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6918:	4770      	bx	lr
   b691a:	bf00      	nop
   b691c:	2003cd04 	.word	0x2003cd04

000b6920 <serialEventRun>:
{
   b6920:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6922:	4b0b      	ldr	r3, [pc, #44]	; (b6950 <serialEventRun+0x30>)
   b6924:	b143      	cbz	r3, b6938 <serialEventRun+0x18>
   b6926:	f000 fc11 	bl	b714c <_Z16_fetch_usbserialv>
   b692a:	6803      	ldr	r3, [r0, #0]
   b692c:	691b      	ldr	r3, [r3, #16]
   b692e:	4798      	blx	r3
   b6930:	2800      	cmp	r0, #0
   b6932:	dd01      	ble.n	b6938 <serialEventRun+0x18>
        serialEvent();
   b6934:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6938:	4b06      	ldr	r3, [pc, #24]	; (b6954 <serialEventRun+0x34>)
   b693a:	b143      	cbz	r3, b694e <serialEventRun+0x2e>
   b693c:	f001 f922 	bl	b7b84 <_Z22__fetch_global_Serial1v>
   b6940:	6803      	ldr	r3, [r0, #0]
   b6942:	691b      	ldr	r3, [r3, #16]
   b6944:	4798      	blx	r3
   b6946:	2800      	cmp	r0, #0
   b6948:	dd01      	ble.n	b694e <serialEventRun+0x2e>
        serialEvent1();
   b694a:	f3af 8000 	nop.w
}
   b694e:	bd08      	pop	{r3, pc}
	...

000b6958 <_post_loop>:
{
   b6958:	b508      	push	{r3, lr}
	serialEventRun();
   b695a:	f7ff ffe1 	bl	b6920 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b695e:	f7ff fa2f 	bl	b5dc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6962:	4b01      	ldr	r3, [pc, #4]	; (b6968 <_post_loop+0x10>)
   b6964:	6018      	str	r0, [r3, #0]
}
   b6966:	bd08      	pop	{r3, pc}
   b6968:	2003e744 	.word	0x2003e744

000b696c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b696c:	4805      	ldr	r0, [pc, #20]	; (b6984 <_Z33system_initialize_user_backup_ramv+0x18>)
   b696e:	4a06      	ldr	r2, [pc, #24]	; (b6988 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6970:	4906      	ldr	r1, [pc, #24]	; (b698c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6972:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6974:	1a12      	subs	r2, r2, r0
   b6976:	f001 fcdb 	bl	b8330 <memcpy>
    __backup_sram_signature = signature;
   b697a:	4b05      	ldr	r3, [pc, #20]	; (b6990 <_Z33system_initialize_user_backup_ramv+0x24>)
   b697c:	4a05      	ldr	r2, [pc, #20]	; (b6994 <_Z33system_initialize_user_backup_ramv+0x28>)
   b697e:	601a      	str	r2, [r3, #0]
}
   b6980:	bd08      	pop	{r3, pc}
   b6982:	bf00      	nop
   b6984:	2003f400 	.word	0x2003f400
   b6988:	2003f404 	.word	0x2003f404
   b698c:	000bb1d8 	.word	0x000bb1d8
   b6990:	2003f400 	.word	0x2003f400
   b6994:	9a271c1e 	.word	0x9a271c1e

000b6998 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6998:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b699a:	2300      	movs	r3, #0
   b699c:	9300      	str	r3, [sp, #0]
   b699e:	461a      	mov	r2, r3
   b69a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b69a4:	f7ff fb86 	bl	b60b4 <system_ctrl_set_result>
}
   b69a8:	b003      	add	sp, #12
   b69aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b69b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b69b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b69b2:	8843      	ldrh	r3, [r0, #2]
   b69b4:	2b0a      	cmp	r3, #10
   b69b6:	d008      	beq.n	b69ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b69b8:	2b50      	cmp	r3, #80	; 0x50
   b69ba:	d10b      	bne.n	b69d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b69bc:	4b09      	ldr	r3, [pc, #36]	; (b69e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b69be:	681b      	ldr	r3, [r3, #0]
   b69c0:	b14b      	cbz	r3, b69d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b69c2:	b003      	add	sp, #12
   b69c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b69c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b69ca:	f7ff ffe5 	bl	b6998 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b69ce:	b003      	add	sp, #12
   b69d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b69d4:	2300      	movs	r3, #0
   b69d6:	9300      	str	r3, [sp, #0]
   b69d8:	461a      	mov	r2, r3
   b69da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b69de:	f7ff fb69 	bl	b60b4 <system_ctrl_set_result>
}
   b69e2:	e7f4      	b.n	b69ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b69e4:	2003e6f4 	.word	0x2003e6f4

000b69e8 <module_user_init_hook>:
{
   b69e8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b69ea:	4812      	ldr	r0, [pc, #72]	; (b6a34 <module_user_init_hook+0x4c>)
   b69ec:	2100      	movs	r1, #0
   b69ee:	f7ff fc43 	bl	b6278 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b69f2:	4b11      	ldr	r3, [pc, #68]	; (b6a38 <module_user_init_hook+0x50>)
   b69f4:	681a      	ldr	r2, [r3, #0]
   b69f6:	4b11      	ldr	r3, [pc, #68]	; (b6a3c <module_user_init_hook+0x54>)
   b69f8:	429a      	cmp	r2, r3
   b69fa:	4b11      	ldr	r3, [pc, #68]	; (b6a40 <module_user_init_hook+0x58>)
   b69fc:	bf0c      	ite	eq
   b69fe:	2201      	moveq	r2, #1
   b6a00:	2200      	movne	r2, #0
   b6a02:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6a04:	d001      	beq.n	b6a0a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6a06:	f7ff ffb1 	bl	b696c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6a0a:	f7ff f9d1 	bl	b5db0 <HAL_RNG_GetRandomNumber>
   b6a0e:	4604      	mov	r4, r0
    srand(seed);
   b6a10:	f001 fcbe 	bl	b8390 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6a14:	4b0b      	ldr	r3, [pc, #44]	; (b6a44 <module_user_init_hook+0x5c>)
   b6a16:	b113      	cbz	r3, b6a1e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6a18:	4620      	mov	r0, r4
   b6a1a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6a1e:	2100      	movs	r1, #0
   b6a20:	4808      	ldr	r0, [pc, #32]	; (b6a44 <module_user_init_hook+0x5c>)
   b6a22:	f7ff fbd9 	bl	b61d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6a2a:	4807      	ldr	r0, [pc, #28]	; (b6a48 <module_user_init_hook+0x60>)
   b6a2c:	2100      	movs	r1, #0
   b6a2e:	f7ff bb37 	b.w	b60a0 <system_ctrl_set_app_request_handler>
   b6a32:	bf00      	nop
   b6a34:	000b6915 	.word	0x000b6915
   b6a38:	2003f400 	.word	0x2003f400
   b6a3c:	9a271c1e 	.word	0x9a271c1e
   b6a40:	2003e6f0 	.word	0x2003e6f0
   b6a44:	00000000 	.word	0x00000000
   b6a48:	000b69b1 	.word	0x000b69b1

000b6a4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6a4c:	4770      	bx	lr

000b6a4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6a4e:	2000      	movs	r0, #0
   b6a50:	4770      	bx	lr

000b6a52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6a52:	b510      	push	{r4, lr}
   b6a54:	2110      	movs	r1, #16
   b6a56:	4604      	mov	r4, r0
   b6a58:	f7fe f89f 	bl	b4b9a <_ZdlPvj>
   b6a5c:	4620      	mov	r0, r4
   b6a5e:	bd10      	pop	{r4, pc}

000b6a60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6a60:	b508      	push	{r3, lr}
      { delete this; }
   b6a62:	f7ff fff6 	bl	b6a52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6a66:	bd08      	pop	{r3, pc}

000b6a68 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6a68:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6a6a:	2200      	movs	r2, #0
   b6a6c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6a70:	6002      	str	r2, [r0, #0]
   b6a72:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6a74:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a76:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6a78:	680c      	ldr	r4, [r1, #0]
   b6a7a:	8085      	strh	r5, [r0, #4]
   b6a7c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a7e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6a80:	bd30      	pop	{r4, r5, pc}

000b6a82 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6a82:	b510      	push	{r4, lr}
   b6a84:	4604      	mov	r4, r0
    free((void*)msg_);
   b6a86:	6800      	ldr	r0, [r0, #0]
   b6a88:	f7ff fbb6 	bl	b61f8 <free>
}
   b6a8c:	4620      	mov	r0, r4
   b6a8e:	bd10      	pop	{r4, pc}

000b6a90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6a90:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6a92:	68c4      	ldr	r4, [r0, #12]
   b6a94:	b1f4      	cbz	r4, b6ad4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6a96:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6a98:	2b02      	cmp	r3, #2
   b6a9a:	d103      	bne.n	b6aa4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6a9c:	f104 000c 	add.w	r0, r4, #12
   b6aa0:	f7ff ffef 	bl	b6a82 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6aa4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6aa6:	b135      	cbz	r5, b6ab6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6aa8:	4628      	mov	r0, r5
   b6aaa:	f7ff fd81 	bl	b65b0 <_ZNSt14_Function_baseD1Ev>
   b6aae:	2110      	movs	r1, #16
   b6ab0:	4628      	mov	r0, r5
   b6ab2:	f7fe f872 	bl	b4b9a <_ZdlPvj>
   b6ab6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6ab8:	b135      	cbz	r5, b6ac8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6aba:	4628      	mov	r0, r5
   b6abc:	f7ff fd78 	bl	b65b0 <_ZNSt14_Function_baseD1Ev>
   b6ac0:	2110      	movs	r1, #16
   b6ac2:	4628      	mov	r0, r5
   b6ac4:	f7fe f869 	bl	b4b9a <_ZdlPvj>
   b6ac8:	4620      	mov	r0, r4
   b6aca:	2114      	movs	r1, #20
   b6acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6ad0:	f7fe b863 	b.w	b4b9a <_ZdlPvj>
   b6ad4:	bd38      	pop	{r3, r4, r5, pc}

000b6ad6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6ad6:	680b      	ldr	r3, [r1, #0]
   b6ad8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6ada:	684b      	ldr	r3, [r1, #4]
   b6adc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6ade:	b113      	cbz	r3, b6ae6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6ae0:	685a      	ldr	r2, [r3, #4]
   b6ae2:	3201      	adds	r2, #1
   b6ae4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6ae6:	4770      	bx	lr

000b6ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6aea:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6aec:	4668      	mov	r0, sp
   b6aee:	460d      	mov	r5, r1
   b6af0:	f7ff fff1 	bl	b6ad6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6af4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6af6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6af8:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6afa:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6afc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6afe:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6b00:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6b02:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6b04:	f7fe fad0 	bl	b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6b08:	b135      	cbz	r5, b6b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6b0a:	1d28      	adds	r0, r5, #4
   b6b0c:	f7fe facc 	bl	b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b10:	2108      	movs	r1, #8
   b6b12:	4628      	mov	r0, r5
   b6b14:	f7fe f841 	bl	b4b9a <_ZdlPvj>
        return p;
    }
   b6b18:	4620      	mov	r0, r4
   b6b1a:	b003      	add	sp, #12
   b6b1c:	bd30      	pop	{r4, r5, pc}

000b6b1e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6b1e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6b20:	b510      	push	{r4, lr}
      if (_M_empty())
   b6b22:	b90a      	cbnz	r2, b6b28 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6b24:	f001 f8bb 	bl	b7c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b6b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6b2c:	68c3      	ldr	r3, [r0, #12]
   b6b2e:	4718      	bx	r3

000b6b30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6b30:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6b32:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6b34:	f100 0110 	add.w	r1, r0, #16
   b6b38:	f7ff fff1 	bl	b6b1e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6b3c:	bd08      	pop	{r3, pc}

000b6b3e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6b3e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6b40:	b510      	push	{r4, lr}
      if (_M_empty())
   b6b42:	b90a      	cbnz	r2, b6b48 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6b44:	f001 f8ab 	bl	b7c9e <_ZSt25__throw_bad_function_callv>
    }
   b6b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6b4c:	68c3      	ldr	r3, [r0, #12]
   b6b4e:	4718      	bx	r3

000b6b50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6b50:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6b52:	6800      	ldr	r0, [r0, #0]
   b6b54:	f100 0110 	add.w	r1, r0, #16
   b6b58:	f7ff fff1 	bl	b6b3e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6b5c:	bd08      	pop	{r3, pc}
	...

000b6b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6b60:	b538      	push	{r3, r4, r5, lr}
   b6b62:	2300      	movs	r3, #0
   b6b64:	4604      	mov	r4, r0
   b6b66:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6b68:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6b6a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6b6c:	f7fe f80d 	bl	b4b8a <_Znwj>
   b6b70:	b128      	cbz	r0, b6b7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6b72:	2301      	movs	r3, #1
   b6b74:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6b78:	4b02      	ldr	r3, [pc, #8]	; (b6b84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6b7a:	6003      	str	r3, [r0, #0]
   b6b7c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6b7e:	6020      	str	r0, [r4, #0]
	}
   b6b80:	4620      	mov	r0, r4
   b6b82:	bd38      	pop	{r3, r4, r5, pc}
   b6b84:	000ba7d0 	.word	0x000ba7d0

000b6b88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6b88:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6b8a:	2300      	movs	r3, #0
   b6b8c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6b8e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6b90:	4604      	mov	r4, r0
   b6b92:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6b94:	b12b      	cbz	r3, b6ba2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6b96:	2202      	movs	r2, #2
   b6b98:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6b9a:	68eb      	ldr	r3, [r5, #12]
   b6b9c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6b9e:	68ab      	ldr	r3, [r5, #8]
   b6ba0:	60a3      	str	r3, [r4, #8]
    }
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6baa:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6bac:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6bae:	4668      	mov	r0, sp
   b6bb0:	f7ff ff5a 	bl	b6a68 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6bb4:	f04f 0302 	mov.w	r3, #2
   b6bb8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6bbc:	2a00      	cmp	r2, #0
   b6bbe:	d103      	bne.n	b6bc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6bc0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6bc4:	2900      	cmp	r1, #0
   b6bc6:	d1f7      	bne.n	b6bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6bc8:	d125      	bne.n	b6c16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6bca:	f104 050c 	add.w	r5, r4, #12
   b6bce:	4669      	mov	r1, sp
   b6bd0:	4628      	mov	r0, r5
   b6bd2:	f7ff ff49 	bl	b6a68 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6bd6:	f3bf 8f5b 	dmb	ish
   b6bda:	2301      	movs	r3, #1
   b6bdc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6bde:	2000      	movs	r0, #0
   b6be0:	f104 0308 	add.w	r3, r4, #8
   b6be4:	f3bf 8f5b 	dmb	ish
   b6be8:	e853 6f00 	ldrex	r6, [r3]
   b6bec:	e843 0200 	strex	r2, r0, [r3]
   b6bf0:	2a00      	cmp	r2, #0
   b6bf2:	d1f9      	bne.n	b6be8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6bf4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6bf8:	b16e      	cbz	r6, b6c16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6bfa:	f7ff fa39 	bl	b6070 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6bfe:	b178      	cbz	r0, b6c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6c00:	4629      	mov	r1, r5
   b6c02:	4630      	mov	r0, r6
   b6c04:	f7ff ff8b 	bl	b6b1e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6c08:	4630      	mov	r0, r6
   b6c0a:	f7ff fcd1 	bl	b65b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6c0e:	2110      	movs	r1, #16
   b6c10:	4630      	mov	r0, r6
   b6c12:	f7fd ffc2 	bl	b4b9a <_ZdlPvj>
        p_->setError(std::move(error));
   b6c16:	4668      	mov	r0, sp
   b6c18:	f7ff ff33 	bl	b6a82 <_ZN8particle5ErrorD1Ev>
    }
   b6c1c:	b009      	add	sp, #36	; 0x24
   b6c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6c20:	4631      	mov	r1, r6
   b6c22:	a802      	add	r0, sp, #8
   b6c24:	f7ff ffb0 	bl	b6b88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6c28:	68e0      	ldr	r0, [r4, #12]
   b6c2a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6c2e:	b108      	cbz	r0, b6c34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6c30:	f001 fbe4 	bl	b83fc <strdup>
        type_(type) {
   b6c34:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6c36:	2010      	movs	r0, #16
   b6c38:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6c3c:	f7fd ffa5 	bl	b4b8a <_Znwj>
   b6c40:	4605      	mov	r5, r0
   b6c42:	b1e8      	cbz	r0, b6c80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6c44:	2700      	movs	r7, #0
   b6c46:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c48:	2018      	movs	r0, #24
   b6c4a:	f7fd ff9e 	bl	b4b8a <_Znwj>
   b6c4e:	4604      	mov	r4, r0
   b6c50:	b188      	cbz	r0, b6c76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6c52:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6c54:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6c56:	a802      	add	r0, sp, #8
   b6c58:	f7ff fcc7 	bl	b65ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c5c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6c5e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c60:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c62:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6c64:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6c66:	a906      	add	r1, sp, #24
   b6c68:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c6a:	60e3      	str	r3, [r4, #12]
   b6c6c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6c70:	9205      	str	r2, [sp, #20]
   b6c72:	f7ff fef9 	bl	b6a68 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6c76:	4b08      	ldr	r3, [pc, #32]	; (b6c98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6c78:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6c7a:	4b08      	ldr	r3, [pc, #32]	; (b6c9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c7c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6c7e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6c80:	a806      	add	r0, sp, #24
   b6c82:	f7ff fefe 	bl	b6a82 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6c86:	a802      	add	r0, sp, #8
   b6c88:	f7ff fc92 	bl	b65b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6c8c:	2200      	movs	r2, #0
   b6c8e:	4629      	mov	r1, r5
   b6c90:	4803      	ldr	r0, [pc, #12]	; (b6ca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6c92:	f7ff f9f5 	bl	b6080 <application_thread_invoke>
   b6c96:	e7b7      	b.n	b6c08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6c98:	000b6b31 	.word	0x000b6b31
   b6c9c:	000b6db5 	.word	0x000b6db5
   b6ca0:	000b7295 	.word	0x000b7295

000b6ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ca8:	b08b      	sub	sp, #44	; 0x2c
   b6caa:	4605      	mov	r5, r0
   b6cac:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6cb0:	460f      	mov	r7, r1
   b6cb2:	4690      	mov	r8, r2
   b6cb4:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6cb6:	f7ff fa6f 	bl	b6198 <spark_cloud_flag_connected>
   b6cba:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6cbc:	4683      	mov	fp, r0
   b6cbe:	bb38      	cbnz	r0, b6d10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6cc0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6cc4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6cc6:	a905      	add	r1, sp, #20
   b6cc8:	4630      	mov	r0, r6
   b6cca:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6cce:	f7ff fecb 	bl	b6a68 <_ZN8particle5ErrorC1EOS0_>
   b6cd2:	2014      	movs	r0, #20
   b6cd4:	f7fd ff59 	bl	b4b8a <_Znwj>
   b6cd8:	4604      	mov	r4, r0
   b6cda:	b148      	cbz	r0, b6cf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6cdc:	2302      	movs	r3, #2
   b6cde:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6ce0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6ce2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6ce6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6ce8:	4631      	mov	r1, r6
   b6cea:	300c      	adds	r0, #12
   b6cec:	f7ff febc 	bl	b6a68 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6cf0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6cf2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6cf4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6cf8:	f7ff ff32 	bl	b6b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6cfc:	4630      	mov	r0, r6
   b6cfe:	f7ff fec0 	bl	b6a82 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6d02:	a805      	add	r0, sp, #20
   b6d04:	f7ff febd 	bl	b6a82 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6d08:	4628      	mov	r0, r5
   b6d0a:	b00b      	add	sp, #44	; 0x2c
   b6d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6d10:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6d12:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6d14:	2014      	movs	r0, #20
   b6d16:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6d1a:	9307      	str	r3, [sp, #28]
   b6d1c:	f7fd ff35 	bl	b4b8a <_Znwj>
   b6d20:	4601      	mov	r1, r0
   b6d22:	b118      	cbz	r0, b6d2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6d24:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6d28:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6d2a:	7044      	strb	r4, [r0, #1]
   b6d2c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6d2e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6d30:	f7ff ff16 	bl	b6b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6d34:	4b1e      	ldr	r3, [pc, #120]	; (b6db0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6d36:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6d38:	2008      	movs	r0, #8
   b6d3a:	f7fd ff26 	bl	b4b8a <_Znwj>
   b6d3e:	4604      	mov	r4, r0
   b6d40:	b110      	cbz	r0, b6d48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6d42:	a903      	add	r1, sp, #12
   b6d44:	f7ff fec7 	bl	b6ad6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6d48:	9600      	str	r6, [sp, #0]
   b6d4a:	fa5f f38a 	uxtb.w	r3, sl
   b6d4e:	464a      	mov	r2, r9
   b6d50:	4641      	mov	r1, r8
   b6d52:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6d54:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6d56:	f7ff fa27 	bl	b61a8 <spark_send_event>
   b6d5a:	b9b8      	cbnz	r0, b6d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6d5c:	9b03      	ldr	r3, [sp, #12]
   b6d5e:	785b      	ldrb	r3, [r3, #1]
   b6d60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6d64:	b993      	cbnz	r3, b6d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6d66:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6d6a:	a905      	add	r1, sp, #20
   b6d6c:	a803      	add	r0, sp, #12
   b6d6e:	9205      	str	r2, [sp, #20]
   b6d70:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6d74:	f7ff ff18 	bl	b6ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6d78:	a805      	add	r0, sp, #20
   b6d7a:	f7ff fe82 	bl	b6a82 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6d7e:	a805      	add	r0, sp, #20
   b6d80:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6d82:	f7ff feb1 	bl	b6ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6d86:	a806      	add	r0, sp, #24
   b6d88:	f7fe f98e 	bl	b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6d8c:	a903      	add	r1, sp, #12
   b6d8e:	a805      	add	r0, sp, #20
   b6d90:	f7ff fea1 	bl	b6ad6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6d94:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6d96:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6d98:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6d9a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6d9c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6d9e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6da0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6da2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6da4:	f7fe f980 	bl	b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6da8:	a804      	add	r0, sp, #16
   b6daa:	f7fe f97d 	bl	b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6dae:	e7ab      	b.n	b6d08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6db0:	000b6e31 	.word	0x000b6e31

000b6db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6db4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6db8:	4605      	mov	r5, r0
	switch (__op)
   b6dba:	d103      	bne.n	b6dc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6dbc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6dbe:	6003      	str	r3, [r0, #0]
      }
   b6dc0:	2000      	movs	r0, #0
   b6dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6dc4:	2a02      	cmp	r2, #2
   b6dc6:	d010      	beq.n	b6dea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6dc8:	2a03      	cmp	r2, #3
   b6dca:	d1f9      	bne.n	b6dc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6dcc:	6804      	ldr	r4, [r0, #0]
   b6dce:	2c00      	cmp	r4, #0
   b6dd0:	d0f6      	beq.n	b6dc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6dd2:	f104 0010 	add.w	r0, r4, #16
   b6dd6:	f7ff fe54 	bl	b6a82 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6dda:	4620      	mov	r0, r4
   b6ddc:	f7ff fbe8 	bl	b65b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6de0:	2118      	movs	r1, #24
   b6de2:	4620      	mov	r0, r4
   b6de4:	f7fd fed9 	bl	b4b9a <_ZdlPvj>
   b6de8:	e7ea      	b.n	b6dc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6dea:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6dec:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6dee:	f7fd fecc 	bl	b4b8a <_Znwj>
   b6df2:	4604      	mov	r4, r0
   b6df4:	b150      	cbz	r0, b6e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6df6:	4631      	mov	r1, r6
   b6df8:	f7ff fec6 	bl	b6b88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6dfc:	6930      	ldr	r0, [r6, #16]
   b6dfe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6e02:	b108      	cbz	r0, b6e08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6e04:	f001 fafa 	bl	b83fc <strdup>
        type_(type) {
   b6e08:	6120      	str	r0, [r4, #16]
   b6e0a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6e0c:	602c      	str	r4, [r5, #0]
	}
   b6e0e:	e7d7      	b.n	b6dc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6e10 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6e10:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6e12:	2300      	movs	r3, #0
   b6e14:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6e16:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6e18:	4604      	mov	r4, r0
   b6e1a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6e1c:	b12b      	cbz	r3, b6e2a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6e1e:	2202      	movs	r2, #2
   b6e20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6e22:	68eb      	ldr	r3, [r5, #12]
   b6e24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6e26:	68ab      	ldr	r3, [r5, #8]
   b6e28:	60a3      	str	r3, [r4, #8]
    }
   b6e2a:	4620      	mov	r0, r4
   b6e2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6e30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6e32:	b089      	sub	sp, #36	; 0x24
   b6e34:	4604      	mov	r4, r0
   b6e36:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6e38:	a801      	add	r0, sp, #4
   b6e3a:	4611      	mov	r1, r2
   b6e3c:	f7ff fe54 	bl	b6ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6e40:	b1a4      	cbz	r4, b6e6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6e42:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6e44:	b11d      	cbz	r5, b6e4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6e46:	4628      	mov	r0, r5
   b6e48:	f001 fad8 	bl	b83fc <strdup>
   b6e4c:	4605      	mov	r5, r0
   b6e4e:	a801      	add	r0, sp, #4
   b6e50:	a903      	add	r1, sp, #12
        type_(type) {
   b6e52:	9503      	str	r5, [sp, #12]
   b6e54:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6e58:	f7ff fea6 	bl	b6ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6e5c:	a803      	add	r0, sp, #12
   b6e5e:	f7ff fe10 	bl	b6a82 <_ZN8particle5ErrorD1Ev>
   b6e62:	a802      	add	r0, sp, #8
   b6e64:	f7fe f920 	bl	b50a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6e68:	b009      	add	sp, #36	; 0x24
   b6e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6e6c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6e6e:	2301      	movs	r3, #1
   b6e70:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6e74:	2a00      	cmp	r2, #0
   b6e76:	d103      	bne.n	b6e80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6e78:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6e7c:	2900      	cmp	r1, #0
   b6e7e:	d1f7      	bne.n	b6e70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6e80:	d1ef      	bne.n	b6e62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6e82:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6e84:	f3bf 8f5b 	dmb	ish
   b6e88:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6e8a:	1d2b      	adds	r3, r5, #4
   b6e8c:	f3bf 8f5b 	dmb	ish
   b6e90:	e853 6f00 	ldrex	r6, [r3]
   b6e94:	e843 4200 	strex	r2, r4, [r3]
   b6e98:	2a00      	cmp	r2, #0
   b6e9a:	d1f9      	bne.n	b6e90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6e9c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6ea0:	2e00      	cmp	r6, #0
   b6ea2:	d0de      	beq.n	b6e62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6ea4:	4620      	mov	r0, r4
   b6ea6:	f7ff f8e3 	bl	b6070 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6eaa:	4607      	mov	r7, r0
   b6eac:	b160      	cbz	r0, b6ec8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6eae:	f105 010c 	add.w	r1, r5, #12
   b6eb2:	4630      	mov	r0, r6
   b6eb4:	f7ff fe43 	bl	b6b3e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6eb8:	4630      	mov	r0, r6
   b6eba:	f7ff fb79 	bl	b65b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6ebe:	2110      	movs	r1, #16
   b6ec0:	4630      	mov	r0, r6
   b6ec2:	f7fd fe6a 	bl	b4b9a <_ZdlPvj>
   b6ec6:	e7cc      	b.n	b6e62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6ec8:	4631      	mov	r1, r6
   b6eca:	a803      	add	r0, sp, #12
   b6ecc:	f7ff ffa0 	bl	b6e10 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6ed0:	7b2b      	ldrb	r3, [r5, #12]
   b6ed2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6ed6:	2010      	movs	r0, #16
   b6ed8:	f7fd fe57 	bl	b4b8a <_Znwj>
   b6edc:	4605      	mov	r5, r0
   b6ede:	b1d0      	cbz	r0, b6f16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6ee0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ee2:	2014      	movs	r0, #20
   b6ee4:	f7fd fe51 	bl	b4b8a <_Znwj>
   b6ee8:	4604      	mov	r4, r0
   b6eea:	b178      	cbz	r0, b6f0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6eec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6eee:	4601      	mov	r1, r0
   b6ef0:	a803      	add	r0, sp, #12
   b6ef2:	f7ff fb7a 	bl	b65ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ef6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6ef8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6efa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6efc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6efe:	9205      	str	r2, [sp, #20]
   b6f00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6f02:	60e3      	str	r3, [r4, #12]
   b6f04:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6f08:	9206      	str	r2, [sp, #24]
   b6f0a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6f0c:	4b06      	ldr	r3, [pc, #24]	; (b6f28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6f0e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6f10:	4b06      	ldr	r3, [pc, #24]	; (b6f2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6f12:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6f14:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6f16:	a803      	add	r0, sp, #12
   b6f18:	f7ff fb4a 	bl	b65b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6f1c:	2200      	movs	r2, #0
   b6f1e:	4629      	mov	r1, r5
   b6f20:	4803      	ldr	r0, [pc, #12]	; (b6f30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6f22:	f7ff f8ad 	bl	b6080 <application_thread_invoke>
   b6f26:	e7c7      	b.n	b6eb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6f28:	000b6b51 	.word	0x000b6b51
   b6f2c:	000b6f35 	.word	0x000b6f35
   b6f30:	000b7295 	.word	0x000b7295

000b6f34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6f34:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6f36:	b570      	push	{r4, r5, r6, lr}
   b6f38:	4604      	mov	r4, r0
	switch (__op)
   b6f3a:	d103      	bne.n	b6f44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6f3c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6f3e:	6003      	str	r3, [r0, #0]
      }
   b6f40:	2000      	movs	r0, #0
   b6f42:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6f44:	2a02      	cmp	r2, #2
   b6f46:	d00c      	beq.n	b6f62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6f48:	2a03      	cmp	r2, #3
   b6f4a:	d1f9      	bne.n	b6f40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6f4c:	6804      	ldr	r4, [r0, #0]
   b6f4e:	2c00      	cmp	r4, #0
   b6f50:	d0f6      	beq.n	b6f40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6f52:	4620      	mov	r0, r4
   b6f54:	f7ff fb2c 	bl	b65b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6f58:	2114      	movs	r1, #20
   b6f5a:	4620      	mov	r0, r4
   b6f5c:	f7fd fe1d 	bl	b4b9a <_ZdlPvj>
   b6f60:	e7ee      	b.n	b6f40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f62:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6f64:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f66:	f7fd fe10 	bl	b4b8a <_Znwj>
   b6f6a:	4605      	mov	r5, r0
   b6f6c:	b120      	cbz	r0, b6f78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6f6e:	4631      	mov	r1, r6
   b6f70:	f7ff ff4e 	bl	b6e10 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6f74:	7c33      	ldrb	r3, [r6, #16]
   b6f76:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6f78:	6025      	str	r5, [r4, #0]
	}
   b6f7a:	e7e1      	b.n	b6f40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6f7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6f7c:	4770      	bx	lr

000b6f7e <_ZN9IPAddressD0Ev>:
   b6f7e:	b510      	push	{r4, lr}
   b6f80:	2118      	movs	r1, #24
   b6f82:	4604      	mov	r4, r0
   b6f84:	f7fd fe09 	bl	b4b9a <_ZdlPvj>
   b6f88:	4620      	mov	r0, r4
   b6f8a:	bd10      	pop	{r4, pc}

000b6f8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6f8e:	7d03      	ldrb	r3, [r0, #20]
   b6f90:	2b06      	cmp	r3, #6
{
   b6f92:	b08d      	sub	sp, #52	; 0x34
   b6f94:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6f96:	f100 0704 	add.w	r7, r0, #4
   b6f9a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6f9e:	d012      	beq.n	b6fc6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6fa0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6fa4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6fa8:	220a      	movs	r2, #10
   b6faa:	4630      	mov	r0, r6
   b6fac:	f7ff fb7d 	bl	b66aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6fb0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6fb2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6fb4:	d019      	beq.n	b6fea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6fb6:	2c00      	cmp	r4, #0
   b6fb8:	d0f4      	beq.n	b6fa4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6fba:	212e      	movs	r1, #46	; 0x2e
   b6fbc:	4630      	mov	r0, r6
   b6fbe:	f7ff fb5b 	bl	b6678 <_ZN5Print5printEc>
   b6fc2:	4404      	add	r4, r0
   b6fc4:	e7ee      	b.n	b6fa4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6fc6:	232f      	movs	r3, #47	; 0x2f
   b6fc8:	466a      	mov	r2, sp
   b6fca:	4639      	mov	r1, r7
   b6fcc:	200a      	movs	r0, #10
		buf[0] = 0;
   b6fce:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6fd2:	f7fe ff2d 	bl	b5e30 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6fd6:	4668      	mov	r0, sp
   b6fd8:	f7fd fd7c 	bl	b4ad4 <strlen>
   b6fdc:	6833      	ldr	r3, [r6, #0]
   b6fde:	4602      	mov	r2, r0
   b6fe0:	68db      	ldr	r3, [r3, #12]
   b6fe2:	4669      	mov	r1, sp
   b6fe4:	4630      	mov	r0, r6
   b6fe6:	4798      	blx	r3
   b6fe8:	4604      	mov	r4, r0
    }
    return n;
}
   b6fea:	4620      	mov	r0, r4
   b6fec:	b00d      	add	sp, #52	; 0x34
   b6fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6ff0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6ff0:	b510      	push	{r4, lr}
   b6ff2:	4b05      	ldr	r3, [pc, #20]	; (b7008 <_ZN9IPAddressC1Ev+0x18>)
   b6ff4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6ff6:	2211      	movs	r2, #17
   b6ff8:	f840 3b04 	str.w	r3, [r0], #4
   b6ffc:	2100      	movs	r1, #0
   b6ffe:	f001 f9bf 	bl	b8380 <memset>
}
   b7002:	4620      	mov	r0, r4
   b7004:	bd10      	pop	{r4, pc}
   b7006:	bf00      	nop
   b7008:	000ba7ec 	.word	0x000ba7ec

000b700c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b700c:	4603      	mov	r3, r0
   b700e:	4a07      	ldr	r2, [pc, #28]	; (b702c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7010:	b510      	push	{r4, lr}
   b7012:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7016:	f101 0210 	add.w	r2, r1, #16
   b701a:	f851 4b04 	ldr.w	r4, [r1], #4
   b701e:	f843 4b04 	str.w	r4, [r3], #4
   b7022:	4291      	cmp	r1, r2
   b7024:	d1f9      	bne.n	b701a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7026:	780a      	ldrb	r2, [r1, #0]
   b7028:	701a      	strb	r2, [r3, #0]
}
   b702a:	bd10      	pop	{r4, pc}
   b702c:	000ba7ec 	.word	0x000ba7ec

000b7030 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7030:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7032:	2b04      	cmp	r3, #4
   b7034:	d104      	bne.n	b7040 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7036:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7038:	3800      	subs	r0, #0
   b703a:	bf18      	it	ne
   b703c:	2001      	movne	r0, #1
   b703e:	4770      	bx	lr
    } else if (version() == 6) {
   b7040:	2b06      	cmp	r3, #6
   b7042:	d107      	bne.n	b7054 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7044:	6843      	ldr	r3, [r0, #4]
   b7046:	b93b      	cbnz	r3, b7058 <_ZNK9IPAddresscvbEv+0x28>
   b7048:	6883      	ldr	r3, [r0, #8]
   b704a:	b92b      	cbnz	r3, b7058 <_ZNK9IPAddresscvbEv+0x28>
   b704c:	68c3      	ldr	r3, [r0, #12]
   b704e:	b91b      	cbnz	r3, b7058 <_ZNK9IPAddresscvbEv+0x28>
   b7050:	6900      	ldr	r0, [r0, #16]
   b7052:	e7f1      	b.n	b7038 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7054:	2000      	movs	r0, #0
   b7056:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7058:	2001      	movs	r0, #1
}
   b705a:	4770      	bx	lr

000b705c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b705c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b705e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7062:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7066:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b706a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b706e:	2304      	movs	r3, #4
   b7070:	6041      	str	r1, [r0, #4]
   b7072:	7503      	strb	r3, [r0, #20]
}
   b7074:	bd10      	pop	{r4, pc}
	...

000b7078 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7078:	b507      	push	{r0, r1, r2, lr}
   b707a:	4b06      	ldr	r3, [pc, #24]	; (b7094 <_ZN9IPAddressC1EPKh+0x1c>)
   b707c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b707e:	78cb      	ldrb	r3, [r1, #3]
   b7080:	9300      	str	r3, [sp, #0]
   b7082:	788b      	ldrb	r3, [r1, #2]
   b7084:	784a      	ldrb	r2, [r1, #1]
   b7086:	7809      	ldrb	r1, [r1, #0]
   b7088:	f7ff ffe8 	bl	b705c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b708c:	b003      	add	sp, #12
   b708e:	f85d fb04 	ldr.w	pc, [sp], #4
   b7092:	bf00      	nop
   b7094:	000ba7ec 	.word	0x000ba7ec

000b7098 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7098:	7441      	strb	r1, [r0, #17]
}
   b709a:	4770      	bx	lr

000b709c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b709c:	4770      	bx	lr

000b709e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b709e:	4770      	bx	lr

000b70a0 <_ZN9USBSerial4readEv>:
{
   b70a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b70a2:	2100      	movs	r1, #0
   b70a4:	7c00      	ldrb	r0, [r0, #16]
   b70a6:	f7fe ffab 	bl	b6000 <HAL_USB_USART_Receive_Data>
}
   b70aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b70ae:	bd08      	pop	{r3, pc}

000b70b0 <_ZN9USBSerial4peekEv>:
{
   b70b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b70b2:	2101      	movs	r1, #1
   b70b4:	7c00      	ldrb	r0, [r0, #16]
   b70b6:	f7fe ffa3 	bl	b6000 <HAL_USB_USART_Receive_Data>
}
   b70ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b70be:	bd08      	pop	{r3, pc}

000b70c0 <_ZN9USBSerial17availableForWriteEv>:
{
   b70c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b70c2:	7c00      	ldrb	r0, [r0, #16]
   b70c4:	f7fe ff94 	bl	b5ff0 <HAL_USB_USART_Available_Data_For_Write>
}
   b70c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b70cc:	bd08      	pop	{r3, pc}

000b70ce <_ZN9USBSerial9availableEv>:
{
   b70ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b70d0:	7c00      	ldrb	r0, [r0, #16]
   b70d2:	f7fe ff85 	bl	b5fe0 <HAL_USB_USART_Available_Data>
}
   b70d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b70da:	bd08      	pop	{r3, pc}

000b70dc <_ZN9USBSerial5writeEh>:
{
   b70dc:	b513      	push	{r0, r1, r4, lr}
   b70de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b70e0:	7c00      	ldrb	r0, [r0, #16]
{
   b70e2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b70e4:	f7fe ff84 	bl	b5ff0 <HAL_USB_USART_Available_Data_For_Write>
   b70e8:	2800      	cmp	r0, #0
   b70ea:	9901      	ldr	r1, [sp, #4]
   b70ec:	dc01      	bgt.n	b70f2 <_ZN9USBSerial5writeEh+0x16>
   b70ee:	7c60      	ldrb	r0, [r4, #17]
   b70f0:	b120      	cbz	r0, b70fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b70f2:	7c20      	ldrb	r0, [r4, #16]
   b70f4:	f7fe ff8c 	bl	b6010 <HAL_USB_USART_Send_Data>
   b70f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b70fc:	b002      	add	sp, #8
   b70fe:	bd10      	pop	{r4, pc}

000b7100 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7100:	7c00      	ldrb	r0, [r0, #16]
   b7102:	f7fe bf8d 	b.w	b6020 <HAL_USB_USART_Flush_Data>

000b7106 <_ZN9USBSerialD0Ev>:
   b7106:	b510      	push	{r4, lr}
   b7108:	2114      	movs	r1, #20
   b710a:	4604      	mov	r4, r0
   b710c:	f7fd fd45 	bl	b4b9a <_ZdlPvj>
   b7110:	4620      	mov	r0, r4
   b7112:	bd10      	pop	{r4, pc}

000b7114 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7114:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b711a:	4604      	mov	r4, r0
   b711c:	4608      	mov	r0, r1
   b711e:	2100      	movs	r1, #0
   b7120:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7124:	4b04      	ldr	r3, [pc, #16]	; (b7138 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7126:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7128:	2301      	movs	r3, #1
  _serial = serial;
   b712a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b712c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b712e:	4611      	mov	r1, r2
   b7130:	f7fe ff4e 	bl	b5fd0 <HAL_USB_USART_Init>
}
   b7134:	4620      	mov	r0, r4
   b7136:	bd10      	pop	{r4, pc}
   b7138:	000ba800 	.word	0x000ba800

000b713c <_Z19acquireSerialBufferv>:
{
   b713c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b713e:	2214      	movs	r2, #20
{
   b7140:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7142:	2100      	movs	r1, #0
   b7144:	f001 f91c 	bl	b8380 <memset>
}
   b7148:	4620      	mov	r0, r4
   b714a:	bd10      	pop	{r4, pc}

000b714c <_Z16_fetch_usbserialv>:
{
   b714c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b714e:	4c0f      	ldr	r4, [pc, #60]	; (b718c <_Z16_fetch_usbserialv+0x40>)
{
   b7150:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7152:	a803      	add	r0, sp, #12
   b7154:	f7ff fff2 	bl	b713c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7158:	7821      	ldrb	r1, [r4, #0]
   b715a:	f3bf 8f5b 	dmb	ish
   b715e:	f011 0101 	ands.w	r1, r1, #1
   b7162:	d10f      	bne.n	b7184 <_Z16_fetch_usbserialv+0x38>
   b7164:	4620      	mov	r0, r4
   b7166:	9101      	str	r1, [sp, #4]
   b7168:	f7fd fd19 	bl	b4b9e <__cxa_guard_acquire>
   b716c:	9901      	ldr	r1, [sp, #4]
   b716e:	b148      	cbz	r0, b7184 <_Z16_fetch_usbserialv+0x38>
   b7170:	aa03      	add	r2, sp, #12
   b7172:	4807      	ldr	r0, [pc, #28]	; (b7190 <_Z16_fetch_usbserialv+0x44>)
   b7174:	f7ff ffce 	bl	b7114 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7178:	4620      	mov	r0, r4
   b717a:	f7fd fd15 	bl	b4ba8 <__cxa_guard_release>
   b717e:	4805      	ldr	r0, [pc, #20]	; (b7194 <_Z16_fetch_usbserialv+0x48>)
   b7180:	f001 f8ac 	bl	b82dc <atexit>
	return _usbserial;
}
   b7184:	4802      	ldr	r0, [pc, #8]	; (b7190 <_Z16_fetch_usbserialv+0x44>)
   b7186:	b008      	add	sp, #32
   b7188:	bd10      	pop	{r4, pc}
   b718a:	bf00      	nop
   b718c:	2003e6f8 	.word	0x2003e6f8
   b7190:	2003e6fc 	.word	0x2003e6fc
   b7194:	000b709d 	.word	0x000b709d

000b7198 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b7198:	4700      	bx	r0
	...

000b719c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b719c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b71a0:	2400      	movs	r4, #0
{
   b71a2:	461d      	mov	r5, r3
   b71a4:	460f      	mov	r7, r1
   b71a6:	4690      	mov	r8, r2
   b71a8:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b71aa:	f7fe fdf1 	bl	b5d90 <hal_interrupt_detach>
  if (priority >= 0) {
   b71ae:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b71b0:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b71b4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b71b8:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b71bc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b71c0:	bfa2      	ittt	ge
   b71c2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b71c6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b71ca:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b71cc:	4907      	ldr	r1, [pc, #28]	; (b71ec <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b71ce:	9400      	str	r4, [sp, #0]
   b71d0:	4643      	mov	r3, r8
   b71d2:	463a      	mov	r2, r7
   b71d4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b71d6:	bfa8      	it	ge
   b71d8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b71dc:	f7fe fdd0 	bl	b5d80 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b71e0:	fab0 f080 	clz	r0, r0
   b71e4:	0940      	lsrs	r0, r0, #5
   b71e6:	b004      	add	sp, #16
   b71e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b71ec:	000b7199 	.word	0x000b7199

000b71f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b71f0:	4770      	bx	lr

000b71f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b71f2:	7441      	strb	r1, [r0, #17]
}
   b71f4:	4770      	bx	lr

000b71f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b71f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b71f8:	7c00      	ldrb	r0, [r0, #16]
   b71fa:	f7fe fe61 	bl	b5ec0 <hal_usart_available_data_for_write>
}
   b71fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7202:	bd08      	pop	{r3, pc}

000b7204 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7204:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7206:	7c00      	ldrb	r0, [r0, #16]
   b7208:	f7fe fe32 	bl	b5e70 <hal_usart_available>
}
   b720c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7210:	bd08      	pop	{r3, pc}

000b7212 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7212:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7214:	7c00      	ldrb	r0, [r0, #16]
   b7216:	f7fe fe3b 	bl	b5e90 <hal_usart_peek>
}
   b721a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b721e:	bd08      	pop	{r3, pc}

000b7220 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7220:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7222:	7c00      	ldrb	r0, [r0, #16]
   b7224:	f7fe fe2c 	bl	b5e80 <hal_usart_read>
}
   b7228:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b722c:	bd08      	pop	{r3, pc}

000b722e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b722e:	7c00      	ldrb	r0, [r0, #16]
   b7230:	f7fe be36 	b.w	b5ea0 <hal_usart_flush>

000b7234 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7234:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7236:	7c45      	ldrb	r5, [r0, #17]
{
   b7238:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b723a:	b12d      	cbz	r5, b7248 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b723c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b723e:	b003      	add	sp, #12
   b7240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7244:	f7fe be0c 	b.w	b5e60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7248:	7c00      	ldrb	r0, [r0, #16]
   b724a:	9101      	str	r1, [sp, #4]
   b724c:	f7fe fe38 	bl	b5ec0 <hal_usart_available_data_for_write>
   b7250:	2800      	cmp	r0, #0
   b7252:	9901      	ldr	r1, [sp, #4]
   b7254:	dcf2      	bgt.n	b723c <_ZN11USARTSerial5writeEh+0x8>
}
   b7256:	4628      	mov	r0, r5
   b7258:	b003      	add	sp, #12
   b725a:	bd30      	pop	{r4, r5, pc}

000b725c <_ZN11USARTSerialD0Ev>:
   b725c:	b510      	push	{r4, lr}
   b725e:	2114      	movs	r1, #20
   b7260:	4604      	mov	r4, r0
   b7262:	f7fd fc9a 	bl	b4b9a <_ZdlPvj>
   b7266:	4620      	mov	r0, r4
   b7268:	bd10      	pop	{r4, pc}
	...

000b726c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b726c:	b510      	push	{r4, lr}
   b726e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7272:	4604      	mov	r4, r0
   b7274:	4608      	mov	r0, r1
   b7276:	4611      	mov	r1, r2
   b7278:	2200      	movs	r2, #0
   b727a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b727e:	4b04      	ldr	r3, [pc, #16]	; (b7290 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7280:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7282:	2301      	movs	r3, #1
  _serial = serial;
   b7284:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7286:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7288:	f7fe fe22 	bl	b5ed0 <hal_usart_init_ex>
}
   b728c:	4620      	mov	r0, r4
   b728e:	bd10      	pop	{r4, pc}
   b7290:	000ba830 	.word	0x000ba830

000b7294 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b7294:	b510      	push	{r4, lr}
      if (_M_empty())
   b7296:	6883      	ldr	r3, [r0, #8]
   b7298:	4604      	mov	r4, r0
   b729a:	b90b      	cbnz	r3, b72a0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b729c:	f000 fcff 	bl	b7c9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b72a0:	68c3      	ldr	r3, [r0, #12]
   b72a2:	4798      	blx	r3
      if (_M_manager)
   b72a4:	68a3      	ldr	r3, [r4, #8]
   b72a6:	b11b      	cbz	r3, b72b0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b72a8:	2203      	movs	r2, #3
   b72aa:	4621      	mov	r1, r4
   b72ac:	4620      	mov	r0, r4
   b72ae:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b72b0:	4620      	mov	r0, r4
   b72b2:	2110      	movs	r1, #16
}
   b72b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b72b8:	f7fd bc6f 	b.w	b4b9a <_ZdlPvj>

000b72bc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b72bc:	4770      	bx	lr

000b72be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b72be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72c0:	4606      	mov	r6, r0
   b72c2:	4615      	mov	r5, r2
   b72c4:	460c      	mov	r4, r1
   b72c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b72c8:	42bc      	cmp	r4, r7
   b72ca:	d006      	beq.n	b72da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b72cc:	6833      	ldr	r3, [r6, #0]
   b72ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   b72d2:	689b      	ldr	r3, [r3, #8]
   b72d4:	4630      	mov	r0, r6
   b72d6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b72d8:	e7f6      	b.n	b72c8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b72da:	4628      	mov	r0, r5
   b72dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72de <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b72de:	7c00      	ldrb	r0, [r0, #16]
   b72e0:	2200      	movs	r2, #0
   b72e2:	f7fe bdfd 	b.w	b5ee0 <hal_i2c_write>

000b72e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b72e6:	7c00      	ldrb	r0, [r0, #16]
   b72e8:	2100      	movs	r1, #0
   b72ea:	f7fe be01 	b.w	b5ef0 <hal_i2c_available>

000b72ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b72ee:	7c00      	ldrb	r0, [r0, #16]
   b72f0:	2100      	movs	r1, #0
   b72f2:	f7fe be05 	b.w	b5f00 <hal_i2c_read>

000b72f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b72f6:	7c00      	ldrb	r0, [r0, #16]
   b72f8:	2100      	movs	r1, #0
   b72fa:	f7fe be09 	b.w	b5f10 <hal_i2c_peek>

000b72fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b72fe:	7c00      	ldrb	r0, [r0, #16]
   b7300:	2100      	movs	r1, #0
   b7302:	f7fe be0d 	b.w	b5f20 <hal_i2c_flush>

000b7306 <_ZN7TwoWireD0Ev>:
   b7306:	b510      	push	{r4, lr}
   b7308:	2114      	movs	r1, #20
   b730a:	4604      	mov	r4, r0
   b730c:	f7fd fc45 	bl	b4b9a <_ZdlPvj>
   b7310:	4620      	mov	r0, r4
   b7312:	bd10      	pop	{r4, pc}

000b7314 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7314:	b510      	push	{r4, lr}
   b7316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b731a:	4604      	mov	r4, r0
   b731c:	4608      	mov	r0, r1
   b731e:	2100      	movs	r1, #0
   b7320:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7324:	4b03      	ldr	r3, [pc, #12]	; (b7334 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7326:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7328:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b732a:	4611      	mov	r1, r2
   b732c:	f7fe fe08 	bl	b5f40 <hal_i2c_init>
}
   b7330:	4620      	mov	r0, r4
   b7332:	bd10      	pop	{r4, pc}
   b7334:	000ba860 	.word	0x000ba860

000b7338 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7338:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b733a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b733c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7340:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7342:	2201      	movs	r2, #1
   b7344:	f04f 33ff 	mov.w	r3, #4294967295
   b7348:	f10d 0107 	add.w	r1, sp, #7
   b734c:	47a0      	blx	r4
}
   b734e:	b002      	add	sp, #8
   b7350:	bd10      	pop	{r4, pc}

000b7352 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7352:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7354:	6803      	ldr	r3, [r0, #0]
   b7356:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7358:	f04f 33ff 	mov.w	r3, #4294967295
   b735c:	46a4      	mov	ip, r4
}
   b735e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7362:	4760      	bx	ip

000b7364 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7364:	b513      	push	{r0, r1, r4, lr}
   b7366:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7368:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b736a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b736e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7370:	f10d 0107 	add.w	r1, sp, #7
   b7374:	2201      	movs	r2, #1
   b7376:	47a0      	blx	r4
}
   b7378:	b002      	add	sp, #8
   b737a:	bd10      	pop	{r4, pc}

000b737c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b737c:	b510      	push	{r4, lr}
   b737e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7380:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7384:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7388:	429a      	cmp	r2, r3
int TCPClient::read() {
   b738a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b738c:	d008      	beq.n	b73a0 <_ZN9TCPClient4readEv+0x24>
   b738e:	6963      	ldr	r3, [r4, #20]
   b7390:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7394:	1c51      	adds	r1, r2, #1
   b7396:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b739a:	4413      	add	r3, r2
   b739c:	7918      	ldrb	r0, [r3, #4]
}
   b739e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b73a0:	6803      	ldr	r3, [r0, #0]
   b73a2:	691b      	ldr	r3, [r3, #16]
   b73a4:	4798      	blx	r3
   b73a6:	2800      	cmp	r0, #0
   b73a8:	d1f1      	bne.n	b738e <_ZN9TCPClient4readEv+0x12>
   b73aa:	f04f 30ff 	mov.w	r0, #4294967295
   b73ae:	e7f6      	b.n	b739e <_ZN9TCPClient4readEv+0x22>

000b73b0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b73b0:	4770      	bx	lr

000b73b2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b73b2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b73b4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b73b6:	43c0      	mvns	r0, r0
   b73b8:	0fc0      	lsrs	r0, r0, #31
   b73ba:	4770      	bx	lr

000b73bc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b73bc:	4770      	bx	lr
	...

000b73c0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b73c0:	4b06      	ldr	r3, [pc, #24]	; (b73dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b73c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b73c4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b73c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b73ca:	d005      	beq.n	b73d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b73cc:	4608      	mov	r0, r1
   b73ce:	f000 fc69 	bl	b7ca4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b73d2:	2800      	cmp	r0, #0
   b73d4:	bf08      	it	eq
   b73d6:	2400      	moveq	r4, #0
      }
   b73d8:	4620      	mov	r0, r4
   b73da:	bd10      	pop	{r4, pc}
   b73dc:	000ba7a0 	.word	0x000ba7a0

000b73e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b73e0:	b510      	push	{r4, lr}
   b73e2:	21ac      	movs	r1, #172	; 0xac
   b73e4:	4604      	mov	r4, r0
   b73e6:	f7fd fbd8 	bl	b4b9a <_ZdlPvj>
   b73ea:	4620      	mov	r0, r4
   b73ec:	bd10      	pop	{r4, pc}

000b73ee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b73ee:	21ac      	movs	r1, #172	; 0xac
   b73f0:	f7fd bbd3 	b.w	b4b9a <_ZdlPvj>

000b73f4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b73f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b73f8:	f04f 0800 	mov.w	r8, #0
   b73fc:	b086      	sub	sp, #24
   b73fe:	461c      	mov	r4, r3
   b7400:	f8c0 8004 	str.w	r8, [r0, #4]
   b7404:	4605      	mov	r5, r0
   b7406:	460e      	mov	r6, r1
   b7408:	4617      	mov	r7, r2
    struct timeval tv = {};
   b740a:	4641      	mov	r1, r8
   b740c:	2210      	movs	r2, #16
   b740e:	a802      	add	r0, sp, #8
   b7410:	f000 ffb6 	bl	b8380 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7414:	1c63      	adds	r3, r4, #1
   b7416:	d009      	beq.n	b742c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b741c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7420:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7424:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7428:	435c      	muls	r4, r3
   b742a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b742c:	6968      	ldr	r0, [r5, #20]
   b742e:	2310      	movs	r3, #16
   b7430:	9300      	str	r3, [sp, #0]
   b7432:	6800      	ldr	r0, [r0, #0]
   b7434:	ab02      	add	r3, sp, #8
   b7436:	f241 0205 	movw	r2, #4101	; 0x1005
   b743a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b743e:	f7fe fd87 	bl	b5f50 <sock_setsockopt>
    if (ret < 0) {
   b7442:	2800      	cmp	r0, #0
   b7444:	da07      	bge.n	b7456 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7446:	f7fe ff07 	bl	b6258 <__errno>
   b744a:	6803      	ldr	r3, [r0, #0]
   b744c:	606b      	str	r3, [r5, #4]
        return 0;
   b744e:	2000      	movs	r0, #0
}
   b7450:	b006      	add	sp, #24
   b7452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7456:	6968      	ldr	r0, [r5, #20]
   b7458:	2300      	movs	r3, #0
   b745a:	6800      	ldr	r0, [r0, #0]
   b745c:	463a      	mov	r2, r7
   b745e:	4631      	mov	r1, r6
   b7460:	f7fe fd96 	bl	b5f90 <sock_send>
    if (ret < 0) {
   b7464:	1e03      	subs	r3, r0, #0
   b7466:	dbee      	blt.n	b7446 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7468:	4618      	mov	r0, r3
   b746a:	e7f1      	b.n	b7450 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b746c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b746c:	b530      	push	{r4, r5, lr}
   b746e:	b087      	sub	sp, #28
   b7470:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7472:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7474:	4668      	mov	r0, sp
   b7476:	f7ff fdff 	bl	b7078 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b747a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b747c:	3404      	adds	r4, #4
   b747e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7480:	682b      	ldr	r3, [r5, #0]
   b7482:	7023      	strb	r3, [r4, #0]
    }
   b7484:	b007      	add	sp, #28
   b7486:	bd30      	pop	{r4, r5, pc}

000b7488 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7488:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b748a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b748c:	4b05      	ldr	r3, [pc, #20]	; (b74a4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b748e:	4604      	mov	r4, r0
   b7490:	358c      	adds	r5, #140	; 0x8c
   b7492:	f844 3b04 	str.w	r3, [r4], #4
   b7496:	4606      	mov	r6, r0
   b7498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b749a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b749c:	682b      	ldr	r3, [r5, #0]
   b749e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b74a0:	4630      	mov	r0, r6
   b74a2:	bd70      	pop	{r4, r5, r6, pc}
   b74a4:	000ba7ec 	.word	0x000ba7ec

000b74a8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b74a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74ac:	4698      	mov	r8, r3
    stop();
   b74ae:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b74b0:	b093      	sub	sp, #76	; 0x4c
   b74b2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b74b4:	2400      	movs	r4, #0
    stop();
   b74b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b74b8:	4606      	mov	r6, r0
   b74ba:	4617      	mov	r7, r2
    stop();
   b74bc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b74be:	4628      	mov	r0, r5
   b74c0:	466b      	mov	r3, sp
   b74c2:	4622      	mov	r2, r4
   b74c4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b74c6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b74c8:	f7fe fc4a 	bl	b5d60 <netdb_getaddrinfo>
   b74cc:	4605      	mov	r5, r0
   b74ce:	2800      	cmp	r0, #0
   b74d0:	d163      	bne.n	b759a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b74d2:	9b00      	ldr	r3, [sp, #0]
   b74d4:	2b00      	cmp	r3, #0
   b74d6:	d04b      	beq.n	b7570 <_ZN9TCPClient7connectEPKctm+0xc8>
   b74d8:	695b      	ldr	r3, [r3, #20]
   b74da:	2b00      	cmp	r3, #0
   b74dc:	d048      	beq.n	b7570 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b74de:	a806      	add	r0, sp, #24
   b74e0:	f7ff fd86 	bl	b6ff0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b74e4:	9b00      	ldr	r3, [sp, #0]
   b74e6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b74e8:	7863      	ldrb	r3, [r4, #1]
   b74ea:	2b02      	cmp	r3, #2
   b74ec:	d104      	bne.n	b74f8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b74ee:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b74f0:	a806      	add	r0, sp, #24
   b74f2:	f7ff ffbb 	bl	b746c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b74f6:	e026      	b.n	b7546 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b74f8:	2b0a      	cmp	r3, #10
   b74fa:	d124      	bne.n	b7546 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b74fc:	2211      	movs	r2, #17
   b74fe:	4629      	mov	r1, r5
   b7500:	a801      	add	r0, sp, #4
   b7502:	f000 ff3d 	bl	b8380 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7506:	68a3      	ldr	r3, [r4, #8]
   b7508:	2b00      	cmp	r3, #0
   b750a:	d038      	beq.n	b757e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b750c:	f104 0308 	add.w	r3, r4, #8
   b7510:	f10d 0c04 	add.w	ip, sp, #4
   b7514:	3418      	adds	r4, #24
   b7516:	6818      	ldr	r0, [r3, #0]
   b7518:	6859      	ldr	r1, [r3, #4]
   b751a:	4662      	mov	r2, ip
   b751c:	c203      	stmia	r2!, {r0, r1}
   b751e:	3308      	adds	r3, #8
   b7520:	42a3      	cmp	r3, r4
   b7522:	4694      	mov	ip, r2
   b7524:	d1f7      	bne.n	b7516 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7526:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7528:	a901      	add	r1, sp, #4
   b752a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b752c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7530:	f7ff fd6c 	bl	b700c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7534:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7538:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b753c:	ac07      	add	r4, sp, #28
   b753e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7540:	f8dc 3000 	ldr.w	r3, [ip]
   b7544:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7546:	a806      	add	r0, sp, #24
   b7548:	f7ff fd72 	bl	b7030 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b754c:	b180      	cbz	r0, b7570 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b754e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7550:	ad07      	add	r5, sp, #28
   b7552:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7556:	4b12      	ldr	r3, [pc, #72]	; (b75a0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7558:	930c      	str	r3, [sp, #48]	; 0x30
   b755a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b755c:	ac0d      	add	r4, sp, #52	; 0x34
   b755e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7560:	682b      	ldr	r3, [r5, #0]
   b7562:	7023      	strb	r3, [r4, #0]
   b7564:	463a      	mov	r2, r7
   b7566:	4643      	mov	r3, r8
   b7568:	a90c      	add	r1, sp, #48	; 0x30
   b756a:	4630      	mov	r0, r6
   b756c:	47c8      	blx	r9
   b756e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7570:	9800      	ldr	r0, [sp, #0]
   b7572:	f7fe fbed 	bl	b5d50 <netdb_freeaddrinfo>
}
   b7576:	4628      	mov	r0, r5
   b7578:	b013      	add	sp, #76	; 0x4c
   b757a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b757e:	68e3      	ldr	r3, [r4, #12]
   b7580:	2b00      	cmp	r3, #0
   b7582:	d1c3      	bne.n	b750c <_ZN9TCPClient7connectEPKctm+0x64>
   b7584:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7588:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b758c:	f7fe fc58 	bl	b5e40 <inet_htonl>
   b7590:	4581      	cmp	r9, r0
   b7592:	d1bb      	bne.n	b750c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7594:	f104 0114 	add.w	r1, r4, #20
   b7598:	e7aa      	b.n	b74f0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b759a:	4625      	mov	r5, r4
   b759c:	e7e8      	b.n	b7570 <_ZN9TCPClient7connectEPKctm+0xc8>
   b759e:	bf00      	nop
   b75a0:	000ba7ec 	.word	0x000ba7ec

000b75a4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b75a4:	b538      	push	{r3, r4, r5, lr}
   b75a6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b75a8:	681a      	ldr	r2, [r3, #0]
   b75aa:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b75ac:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b75ae:	da10      	bge.n	b75d2 <_ZN9TCPClient9connectedEv+0x2e>
   b75b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b75b8:	429a      	cmp	r2, r3
   b75ba:	d10a      	bne.n	b75d2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b75bc:	6803      	ldr	r3, [r0, #0]
   b75be:	691b      	ldr	r3, [r3, #16]
   b75c0:	4798      	blx	r3
        if (!rv) {
   b75c2:	4604      	mov	r4, r0
   b75c4:	b928      	cbnz	r0, b75d2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b75c6:	682b      	ldr	r3, [r5, #0]
   b75c8:	4628      	mov	r0, r5
   b75ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b75cc:	4798      	blx	r3
        rv = available();
   b75ce:	4620      	mov	r0, r4
}
   b75d0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b75d2:	2001      	movs	r0, #1
   b75d4:	e7fc      	b.n	b75d0 <_ZN9TCPClient9connectedEv+0x2c>

000b75d6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b75d6:	b510      	push	{r4, lr}
   b75d8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b75da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b75e2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b75e4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b75e6:	d005      	beq.n	b75f4 <_ZN9TCPClient4peekEv+0x1e>
   b75e8:	6963      	ldr	r3, [r4, #20]
   b75ea:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b75ee:	4413      	add	r3, r2
   b75f0:	7918      	ldrb	r0, [r3, #4]
}
   b75f2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b75f4:	6803      	ldr	r3, [r0, #0]
   b75f6:	691b      	ldr	r3, [r3, #16]
   b75f8:	4798      	blx	r3
   b75fa:	2800      	cmp	r0, #0
   b75fc:	d1f4      	bne.n	b75e8 <_ZN9TCPClient4peekEv+0x12>
   b75fe:	f04f 30ff 	mov.w	r0, #4294967295
   b7602:	e7f6      	b.n	b75f2 <_ZN9TCPClient4peekEv+0x1c>

000b7604 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7606:	6943      	ldr	r3, [r0, #20]
   b7608:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b760a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b760e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7612:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7614:	4605      	mov	r5, r0
   b7616:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7618:	d016      	beq.n	b7648 <_ZN9TCPClient4readEPhj+0x44>
   b761a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b761c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7620:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7624:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7626:	42bc      	cmp	r4, r7
   b7628:	bf28      	it	cs
   b762a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b762c:	3304      	adds	r3, #4
   b762e:	4622      	mov	r2, r4
   b7630:	4419      	add	r1, r3
   b7632:	4630      	mov	r0, r6
   b7634:	f000 fe7c 	bl	b8330 <memcpy>
   b7638:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b763a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b763e:	4423      	add	r3, r4
   b7640:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7644:	4620      	mov	r0, r4
   b7646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7648:	6803      	ldr	r3, [r0, #0]
   b764a:	691b      	ldr	r3, [r3, #16]
   b764c:	4798      	blx	r3
   b764e:	2800      	cmp	r0, #0
   b7650:	d1e3      	bne.n	b761a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7652:	f04f 34ff 	mov.w	r4, #4294967295
   b7656:	e7f5      	b.n	b7644 <_ZN9TCPClient4readEPhj+0x40>

000b7658 <_ZN9TCPClient12flush_bufferEv>:
   b7658:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b765a:	2300      	movs	r3, #0
   b765c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7660:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7662:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7666:	4770      	bx	lr

000b7668 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b766c:	461f      	mov	r7, r3
    stop();
   b766e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7670:	460c      	mov	r4, r1
    stop();
   b7672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7674:	b08a      	sub	sp, #40	; 0x28
   b7676:	4605      	mov	r5, r0
   b7678:	4616      	mov	r6, r2
    stop();
   b767a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b767c:	7d23      	ldrb	r3, [r4, #20]
   b767e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7682:	2b04      	cmp	r3, #4
   b7684:	bf0c      	ite	eq
   b7686:	2002      	moveq	r0, #2
   b7688:	200a      	movne	r0, #10
   b768a:	2206      	movs	r2, #6
   b768c:	2101      	movs	r1, #1
   b768e:	f7fe fc87 	bl	b5fa0 <sock_socket>
   b7692:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7696:	696b      	ldr	r3, [r5, #20]
   b7698:	681b      	ldr	r3, [r3, #0]
   b769a:	2b00      	cmp	r3, #0
   b769c:	da08      	bge.n	b76b0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b769e:	682b      	ldr	r3, [r5, #0]
   b76a0:	4628      	mov	r0, r5
   b76a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b76a4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b76a6:	4798      	blx	r3
}
   b76a8:	4620      	mov	r0, r4
   b76aa:	b00a      	add	sp, #40	; 0x28
   b76ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b76b0:	4628      	mov	r0, r5
   b76b2:	f7ff ffd1 	bl	b7658 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b76b6:	b1b7      	cbz	r7, b76e6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b76b8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b76ba:	a903      	add	r1, sp, #12
   b76bc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b76be:	9303      	str	r3, [sp, #12]
   b76c0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b76c4:	f7fe fb6c 	bl	b5da0 <if_index_to_name>
   b76c8:	2800      	cmp	r0, #0
   b76ca:	d1e8      	bne.n	b769e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b76cc:	6968      	ldr	r0, [r5, #20]
   b76ce:	2306      	movs	r3, #6
   b76d0:	9300      	str	r3, [sp, #0]
   b76d2:	6800      	ldr	r0, [r0, #0]
   b76d4:	ab03      	add	r3, sp, #12
   b76d6:	f241 020b 	movw	r2, #4107	; 0x100b
   b76da:	f640 71ff 	movw	r1, #4095	; 0xfff
   b76de:	f7fe fc37 	bl	b5f50 <sock_setsockopt>
   b76e2:	2800      	cmp	r0, #0
   b76e4:	d1db      	bne.n	b769e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b76e6:	221c      	movs	r2, #28
   b76e8:	2100      	movs	r1, #0
   b76ea:	a803      	add	r0, sp, #12
   b76ec:	f000 fe48 	bl	b8380 <memset>
    if (ip.version() == 4) {
   b76f0:	7d23      	ldrb	r3, [r4, #20]
   b76f2:	2b04      	cmp	r3, #4
   b76f4:	d11d      	bne.n	b7732 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b76f6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b76fa:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b76fc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7700:	f7fe fba6 	bl	b5e50 <inet_htons>
   b7704:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7708:	6860      	ldr	r0, [r4, #4]
   b770a:	f7fe fb99 	bl	b5e40 <inet_htonl>
   b770e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7710:	696b      	ldr	r3, [r5, #20]
   b7712:	221c      	movs	r2, #28
   b7714:	6818      	ldr	r0, [r3, #0]
   b7716:	a903      	add	r1, sp, #12
   b7718:	f7fe fc2a 	bl	b5f70 <sock_connect>
   b771c:	2800      	cmp	r0, #0
   b771e:	d1be      	bne.n	b769e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7720:	3404      	adds	r4, #4
   b7722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7724:	696d      	ldr	r5, [r5, #20]
   b7726:	358c      	adds	r5, #140	; 0x8c
   b7728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b772a:	6823      	ldr	r3, [r4, #0]
   b772c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b772e:	2401      	movs	r4, #1
   b7730:	e7ba      	b.n	b76a8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7732:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7736:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7738:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b773c:	f7fe fb88 	bl	b5e50 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7740:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7742:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7746:	1d23      	adds	r3, r4, #4
   b7748:	f104 0714 	add.w	r7, r4, #20
   b774c:	6818      	ldr	r0, [r3, #0]
   b774e:	6859      	ldr	r1, [r3, #4]
   b7750:	4632      	mov	r2, r6
   b7752:	c203      	stmia	r2!, {r0, r1}
   b7754:	3308      	adds	r3, #8
   b7756:	42bb      	cmp	r3, r7
   b7758:	4616      	mov	r6, r2
   b775a:	d1f7      	bne.n	b774c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b775c:	e7d8      	b.n	b7710 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7760 <_ZN9TCPClient9availableEv>:
{
   b7760:	b530      	push	{r4, r5, lr}
   b7762:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7764:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7768:	b08b      	sub	sp, #44	; 0x2c
   b776a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b776c:	b12b      	cbz	r3, b777a <_ZN9TCPClient9availableEv+0x1a>
   b776e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7772:	429a      	cmp	r2, r3
   b7774:	d101      	bne.n	b777a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7776:	f7ff ff6f 	bl	b7658 <_ZN9TCPClient12flush_bufferEv>
   b777a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b777c:	6808      	ldr	r0, [r1, #0]
   b777e:	2800      	cmp	r0, #0
   b7780:	db18      	blt.n	b77b4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7782:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7786:	2d7f      	cmp	r5, #127	; 0x7f
   b7788:	d814      	bhi.n	b77b4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b778a:	3104      	adds	r1, #4
   b778c:	2308      	movs	r3, #8
   b778e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7792:	4429      	add	r1, r5
   b7794:	f7fe fbf4 	bl	b5f80 <sock_recv>
            if (ret > 0) {
   b7798:	2800      	cmp	r0, #0
   b779a:	dd13      	ble.n	b77c4 <_ZN9TCPClient9availableEv+0x64>
   b779c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b779e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b77a2:	b90a      	cbnz	r2, b77a8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b77a4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b77a8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b77aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b77ae:	4410      	add	r0, r2
   b77b0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b77b4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b77b6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b77ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b77be:	1ac0      	subs	r0, r0, r3
   b77c0:	b00b      	add	sp, #44	; 0x2c
   b77c2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b77c4:	f7fe fd48 	bl	b6258 <__errno>
   b77c8:	6803      	ldr	r3, [r0, #0]
   b77ca:	2b0b      	cmp	r3, #11
   b77cc:	d0f2      	beq.n	b77b4 <_ZN9TCPClient9availableEv+0x54>
   b77ce:	f7fe fd43 	bl	b6258 <__errno>
   b77d2:	6803      	ldr	r3, [r0, #0]
   b77d4:	2b0b      	cmp	r3, #11
   b77d6:	d0ed      	beq.n	b77b4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b77d8:	2320      	movs	r3, #32
   b77da:	2500      	movs	r5, #0
   b77dc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b77e0:	f7fe fd3a 	bl	b6258 <__errno>
   b77e4:	6803      	ldr	r3, [r0, #0]
   b77e6:	9301      	str	r3, [sp, #4]
   b77e8:	4b08      	ldr	r3, [pc, #32]	; (b780c <_ZN9TCPClient9availableEv+0xac>)
   b77ea:	4909      	ldr	r1, [pc, #36]	; (b7810 <_ZN9TCPClient9availableEv+0xb0>)
   b77ec:	9300      	str	r3, [sp, #0]
   b77ee:	aa02      	add	r2, sp, #8
   b77f0:	462b      	mov	r3, r5
   b77f2:	2032      	movs	r0, #50	; 0x32
   b77f4:	f7fe fc1c 	bl	b6030 <log_message>
                    sock_close(d_->sock);
   b77f8:	6963      	ldr	r3, [r4, #20]
   b77fa:	6818      	ldr	r0, [r3, #0]
   b77fc:	f7fe fbb0 	bl	b5f60 <sock_close>
   b7800:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7802:	f04f 32ff 	mov.w	r2, #4294967295
   b7806:	601a      	str	r2, [r3, #0]
   b7808:	e7d4      	b.n	b77b4 <_ZN9TCPClient9availableEv+0x54>
   b780a:	bf00      	nop
   b780c:	000ba887 	.word	0x000ba887
   b7810:	000ba880 	.word	0x000ba880

000b7814 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7814:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7816:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7818:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b781a:	6818      	ldr	r0, [r3, #0]
   b781c:	2800      	cmp	r0, #0
   b781e:	db01      	blt.n	b7824 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7820:	f7fe fb9e 	bl	b5f60 <sock_close>
   b7824:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7826:	f04f 32ff 	mov.w	r2, #4294967295
   b782a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b782c:	6960      	ldr	r0, [r4, #20]
   b782e:	2211      	movs	r2, #17
   b7830:	2100      	movs	r1, #0
   b7832:	308c      	adds	r0, #140	; 0x8c
   b7834:	f000 fda4 	bl	b8380 <memset>
    flush_buffer();
   b7838:	4620      	mov	r0, r4
}
   b783a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b783e:	f7ff bf0b 	b.w	b7658 <_ZN9TCPClient12flush_bufferEv>

000b7842 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7842:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7844:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7846:	4604      	mov	r4, r0
          total(0) {
   b7848:	6001      	str	r1, [r0, #0]
   b784a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b784e:	3088      	adds	r0, #136	; 0x88
   b7850:	f7ff fbce 	bl	b6ff0 <_ZN9IPAddressC1Ev>
}
   b7854:	4620      	mov	r0, r4
   b7856:	bd10      	pop	{r4, pc}

000b7858 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7858:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b785a:	2300      	movs	r3, #0
   b785c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7860:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7864:	4a0e      	ldr	r2, [pc, #56]	; (b78a0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7866:	6103      	str	r3, [r0, #16]
   b7868:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b786a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b786c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b786e:	20ac      	movs	r0, #172	; 0xac
   b7870:	9101      	str	r1, [sp, #4]
   b7872:	f7fd f98a 	bl	b4b8a <_Znwj>
	  auto __pi = ::new (__mem)
   b7876:	1e05      	subs	r5, r0, #0
   b7878:	f105 060c 	add.w	r6, r5, #12
   b787c:	d008      	beq.n	b7890 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b787e:	2301      	movs	r3, #1
   b7880:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7884:	4b07      	ldr	r3, [pc, #28]	; (b78a4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7886:	9901      	ldr	r1, [sp, #4]
   b7888:	602b      	str	r3, [r5, #0]
   b788a:	4630      	mov	r0, r6
   b788c:	f7ff ffd9 	bl	b7842 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7890:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7892:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7896:	f7ff fedf 	bl	b7658 <_ZN9TCPClient12flush_bufferEv>
}
   b789a:	b002      	add	sp, #8
   b789c:	bd70      	pop	{r4, r5, r6, pc}
   b789e:	bf00      	nop
   b78a0:	000ba8bc 	.word	0x000ba8bc
   b78a4:	000ba8a0 	.word	0x000ba8a0

000b78a8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b78a8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b78aa:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b78ae:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b78b0:	f7ff ffd2 	bl	b7858 <_ZN9TCPClientC1Ei>
}
   b78b4:	4620      	mov	r0, r4
   b78b6:	bd10      	pop	{r4, pc}

000b78b8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b78b8:	b510      	push	{r4, lr}
   b78ba:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b78bc:	6800      	ldr	r0, [r0, #0]
   b78be:	2800      	cmp	r0, #0
   b78c0:	db01      	blt.n	b78c6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b78c2:	f7fe fb4d 	bl	b5f60 <sock_close>
    }
}
   b78c6:	4620      	mov	r0, r4
   b78c8:	bd10      	pop	{r4, pc}

000b78ca <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b78ca:	300c      	adds	r0, #12
   b78cc:	f7ff bff4 	b.w	b78b8 <_ZN9TCPClient4DataD1Ev>

000b78d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b78d0:	2200      	movs	r2, #0
   b78d2:	6840      	ldr	r0, [r0, #4]
   b78d4:	4611      	mov	r1, r2
   b78d6:	f7fe bc0f 	b.w	b60f8 <network_ready>

000b78da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b78da:	2200      	movs	r2, #0
   b78dc:	6840      	ldr	r0, [r0, #4]
   b78de:	4611      	mov	r1, r2
   b78e0:	f7fe bc2a 	b.w	b6138 <network_listening>

000b78e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b78e4:	2200      	movs	r2, #0
   b78e6:	6840      	ldr	r0, [r0, #4]
   b78e8:	4611      	mov	r1, r2
   b78ea:	f7fe bc35 	b.w	b6158 <network_get_listen_timeout>

000b78ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b78ee:	6840      	ldr	r0, [r0, #4]
   b78f0:	2200      	movs	r2, #0
   b78f2:	f7fe bc29 	b.w	b6148 <network_set_listen_timeout>

000b78f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b78f6:	6840      	ldr	r0, [r0, #4]
   b78f8:	2200      	movs	r2, #0
   b78fa:	f081 0101 	eor.w	r1, r1, #1
   b78fe:	f7fe bc13 	b.w	b6128 <network_listen>

000b7902 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7902:	2300      	movs	r3, #0
   b7904:	6840      	ldr	r0, [r0, #4]
   b7906:	461a      	mov	r2, r3
   b7908:	4619      	mov	r1, r3
   b790a:	f7fe bc05 	b.w	b6118 <network_off>

000b790e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b790e:	2300      	movs	r3, #0
   b7910:	6840      	ldr	r0, [r0, #4]
   b7912:	461a      	mov	r2, r3
   b7914:	4619      	mov	r1, r3
   b7916:	f7fe bbf7 	b.w	b6108 <network_on>

000b791a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b791a:	2200      	movs	r2, #0
   b791c:	6840      	ldr	r0, [r0, #4]
   b791e:	4611      	mov	r1, r2
   b7920:	f7fe bbda 	b.w	b60d8 <network_connecting>

000b7924 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7924:	6840      	ldr	r0, [r0, #4]
   b7926:	2200      	movs	r2, #0
   b7928:	2102      	movs	r1, #2
   b792a:	f7fe bbdd 	b.w	b60e8 <network_disconnect>

000b792e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b792e:	2300      	movs	r3, #0
   b7930:	6840      	ldr	r0, [r0, #4]
   b7932:	461a      	mov	r2, r3
   b7934:	f7fe bbc8 	b.w	b60c8 <network_connect>

000b7938 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7938:	4b02      	ldr	r3, [pc, #8]	; (b7944 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b793a:	2204      	movs	r2, #4
   b793c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b793e:	4a02      	ldr	r2, [pc, #8]	; (b7948 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7940:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7942:	4770      	bx	lr
   b7944:	2003e710 	.word	0x2003e710
   b7948:	000ba908 	.word	0x000ba908

000b794c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b794c:	2300      	movs	r3, #0
   b794e:	6840      	ldr	r0, [r0, #4]
   b7950:	461a      	mov	r2, r3
   b7952:	f7fe bbb9 	b.w	b60c8 <network_connect>

000b7956 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7956:	6840      	ldr	r0, [r0, #4]
   b7958:	2200      	movs	r2, #0
   b795a:	2102      	movs	r1, #2
   b795c:	f7fe bbc4 	b.w	b60e8 <network_disconnect>

000b7960 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7960:	2200      	movs	r2, #0
   b7962:	6840      	ldr	r0, [r0, #4]
   b7964:	4611      	mov	r1, r2
   b7966:	f7fe bbb7 	b.w	b60d8 <network_connecting>

000b796a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b796a:	2200      	movs	r2, #0
   b796c:	6840      	ldr	r0, [r0, #4]
   b796e:	4611      	mov	r1, r2
   b7970:	f7fe bbc2 	b.w	b60f8 <network_ready>

000b7974 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7974:	2300      	movs	r3, #0
   b7976:	6840      	ldr	r0, [r0, #4]
   b7978:	461a      	mov	r2, r3
   b797a:	4619      	mov	r1, r3
   b797c:	f7fe bbc4 	b.w	b6108 <network_on>

000b7980 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7980:	2300      	movs	r3, #0
   b7982:	6840      	ldr	r0, [r0, #4]
   b7984:	461a      	mov	r2, r3
   b7986:	4619      	mov	r1, r3
   b7988:	f7fe bbc6 	b.w	b6118 <network_off>

000b798c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b798c:	6840      	ldr	r0, [r0, #4]
   b798e:	2100      	movs	r1, #0
   b7990:	f7fe bbea 	b.w	b6168 <network_is_on>

000b7994 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7994:	6840      	ldr	r0, [r0, #4]
   b7996:	2100      	movs	r1, #0
   b7998:	f7fe bbee 	b.w	b6178 <network_is_off>

000b799c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b799c:	6840      	ldr	r0, [r0, #4]
   b799e:	2200      	movs	r2, #0
   b79a0:	f081 0101 	eor.w	r1, r1, #1
   b79a4:	f7fe bbc0 	b.w	b6128 <network_listen>

000b79a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b79a8:	6840      	ldr	r0, [r0, #4]
   b79aa:	2200      	movs	r2, #0
   b79ac:	f7fe bbcc 	b.w	b6148 <network_set_listen_timeout>

000b79b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b79b0:	2200      	movs	r2, #0
   b79b2:	6840      	ldr	r0, [r0, #4]
   b79b4:	4611      	mov	r1, r2
   b79b6:	f7fe bbcf 	b.w	b6158 <network_get_listen_timeout>

000b79ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b79ba:	2200      	movs	r2, #0
   b79bc:	6840      	ldr	r0, [r0, #4]
   b79be:	4611      	mov	r1, r2
   b79c0:	f7fe bbba 	b.w	b6138 <network_listening>

000b79c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b79c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b79c8:	b095      	sub	sp, #84	; 0x54
   b79ca:	4614      	mov	r4, r2
   b79cc:	460d      	mov	r5, r1
   b79ce:	4607      	mov	r7, r0
    IPAddress addr;
   b79d0:	f7ff fb0e 	bl	b6ff0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b79d4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b79d6:	221c      	movs	r2, #28
   b79d8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b79da:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b79dc:	f000 fcd0 	bl	b8380 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b79e0:	2340      	movs	r3, #64	; 0x40
   b79e2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b79e4:	4620      	mov	r0, r4
   b79e6:	466b      	mov	r3, sp
   b79e8:	aa0c      	add	r2, sp, #48	; 0x30
   b79ea:	2100      	movs	r1, #0
   b79ec:	f7fe f9b8 	bl	b5d60 <netdb_getaddrinfo>
    if (!r) {
   b79f0:	4604      	mov	r4, r0
   b79f2:	2800      	cmp	r0, #0
   b79f4:	d14b      	bne.n	b7a8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b79f6:	4602      	mov	r2, r0
   b79f8:	2101      	movs	r1, #1
   b79fa:	6868      	ldr	r0, [r5, #4]
   b79fc:	f7fe fb7c 	bl	b60f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7a00:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7a02:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7a04:	4622      	mov	r2, r4
   b7a06:	6868      	ldr	r0, [r5, #4]
   b7a08:	f7fe fb76 	bl	b60f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7a0c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7a0e:	4681      	mov	r9, r0
        bool ok = false;
   b7a10:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7a12:	2e00      	cmp	r6, #0
   b7a14:	d03b      	beq.n	b7a8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7a16:	2900      	cmp	r1, #0
   b7a18:	d139      	bne.n	b7a8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7a1a:	6873      	ldr	r3, [r6, #4]
   b7a1c:	2b02      	cmp	r3, #2
   b7a1e:	d003      	beq.n	b7a28 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7a20:	2b0a      	cmp	r3, #10
   b7a22:	d011      	beq.n	b7a48 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7a24:	69f6      	ldr	r6, [r6, #28]
   b7a26:	e7f4      	b.n	b7a12 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7a28:	f1b8 0f00 	cmp.w	r8, #0
   b7a2c:	d0fa      	beq.n	b7a24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7a2e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7a30:	a806      	add	r0, sp, #24
   b7a32:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7a34:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7a36:	f7ff fb1f 	bl	b7078 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a3c:	1d3c      	adds	r4, r7, #4
   b7a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a40:	682b      	ldr	r3, [r5, #0]
   b7a42:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7a44:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7a46:	e7ed      	b.n	b7a24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7a48:	f1b9 0f00 	cmp.w	r9, #0
   b7a4c:	d0ea      	beq.n	b7a24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7a4e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7a50:	2210      	movs	r2, #16
   b7a52:	a801      	add	r0, sp, #4
   b7a54:	f000 fc94 	bl	b8380 <memset>
                    a.v = 6;
   b7a58:	2306      	movs	r3, #6
   b7a5a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7a5e:	ad01      	add	r5, sp, #4
   b7a60:	f104 0308 	add.w	r3, r4, #8
   b7a64:	3418      	adds	r4, #24
   b7a66:	6818      	ldr	r0, [r3, #0]
   b7a68:	6859      	ldr	r1, [r3, #4]
   b7a6a:	462a      	mov	r2, r5
   b7a6c:	c203      	stmia	r2!, {r0, r1}
   b7a6e:	3308      	adds	r3, #8
   b7a70:	42a3      	cmp	r3, r4
   b7a72:	4615      	mov	r5, r2
   b7a74:	d1f7      	bne.n	b7a66 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7a76:	a901      	add	r1, sp, #4
   b7a78:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7a7a:	ad07      	add	r5, sp, #28
   b7a7c:	f7ff fac6 	bl	b700c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a82:	1d3c      	adds	r4, r7, #4
   b7a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a86:	682b      	ldr	r3, [r5, #0]
   b7a88:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7a8a:	4649      	mov	r1, r9
   b7a8c:	e7ca      	b.n	b7a24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7a8e:	9800      	ldr	r0, [sp, #0]
   b7a90:	f7fe f95e 	bl	b5d50 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7a94:	4638      	mov	r0, r7
   b7a96:	b015      	add	sp, #84	; 0x54
   b7a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7a9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7a9c:	4b02      	ldr	r3, [pc, #8]	; (b7aa8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7a9e:	4a03      	ldr	r2, [pc, #12]	; (b7aac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7aa0:	601a      	str	r2, [r3, #0]
   b7aa2:	2200      	movs	r2, #0
   b7aa4:	605a      	str	r2, [r3, #4]

} // spark
   b7aa6:	4770      	bx	lr
   b7aa8:	2003e718 	.word	0x2003e718
   b7aac:	000ba944 	.word	0x000ba944

000b7ab0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7ab0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7ab2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7ab4:	d902      	bls.n	b7abc <pinAvailable+0xc>
    return false;
   b7ab6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7ab8:	b002      	add	sp, #8
   b7aba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7abc:	f1a0 030b 	sub.w	r3, r0, #11
   b7ac0:	2b02      	cmp	r3, #2
   b7ac2:	d81a      	bhi.n	b7afa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7ac4:	4c17      	ldr	r4, [pc, #92]	; (b7b24 <pinAvailable+0x74>)
   b7ac6:	7821      	ldrb	r1, [r4, #0]
   b7ac8:	f3bf 8f5b 	dmb	ish
   b7acc:	f011 0101 	ands.w	r1, r1, #1
   b7ad0:	d10b      	bne.n	b7aea <pinAvailable+0x3a>
   b7ad2:	4620      	mov	r0, r4
   b7ad4:	9101      	str	r1, [sp, #4]
   b7ad6:	f7fd f862 	bl	b4b9e <__cxa_guard_acquire>
   b7ada:	9901      	ldr	r1, [sp, #4]
   b7adc:	b128      	cbz	r0, b7aea <pinAvailable+0x3a>
   b7ade:	4812      	ldr	r0, [pc, #72]	; (b7b28 <pinAvailable+0x78>)
   b7ae0:	f7fe fc18 	bl	b6314 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7ae4:	4620      	mov	r0, r4
   b7ae6:	f7fd f85f 	bl	b4ba8 <__cxa_guard_release>
   b7aea:	4b0f      	ldr	r3, [pc, #60]	; (b7b28 <pinAvailable+0x78>)
   b7aec:	7818      	ldrb	r0, [r3, #0]
   b7aee:	f7fe fa67 	bl	b5fc0 <hal_spi_is_enabled>
   b7af2:	2800      	cmp	r0, #0
   b7af4:	d1df      	bne.n	b7ab6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7af6:	2001      	movs	r0, #1
   b7af8:	e7de      	b.n	b7ab8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7afa:	2801      	cmp	r0, #1
   b7afc:	d809      	bhi.n	b7b12 <pinAvailable+0x62>
   b7afe:	f000 f87d 	bl	b7bfc <_Z19__fetch_global_Wirev>
   b7b02:	2100      	movs	r1, #0
   b7b04:	7c00      	ldrb	r0, [r0, #16]
   b7b06:	f7fe fa13 	bl	b5f30 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7b0a:	f080 0001 	eor.w	r0, r0, #1
   b7b0e:	b2c0      	uxtb	r0, r0
   b7b10:	e7d2      	b.n	b7ab8 <pinAvailable+0x8>
   b7b12:	3809      	subs	r0, #9
   b7b14:	2801      	cmp	r0, #1
   b7b16:	d8ee      	bhi.n	b7af6 <pinAvailable+0x46>
   b7b18:	f000 f834 	bl	b7b84 <_Z22__fetch_global_Serial1v>
   b7b1c:	7c00      	ldrb	r0, [r0, #16]
   b7b1e:	f7fe f9c7 	bl	b5eb0 <hal_usart_is_enabled>
   b7b22:	e7f2      	b.n	b7b0a <pinAvailable+0x5a>
   b7b24:	2003e720 	.word	0x2003e720
   b7b28:	2003e724 	.word	0x2003e724

000b7b2c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7b2c:	2823      	cmp	r0, #35	; 0x23
{
   b7b2e:	b538      	push	{r3, r4, r5, lr}
   b7b30:	4604      	mov	r4, r0
   b7b32:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7b34:	d80a      	bhi.n	b7b4c <pinMode+0x20>
   b7b36:	29ff      	cmp	r1, #255	; 0xff
   b7b38:	d008      	beq.n	b7b4c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7b3a:	f7ff ffb9 	bl	b7ab0 <pinAvailable>
   b7b3e:	b128      	cbz	r0, b7b4c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7b40:	4629      	mov	r1, r5
   b7b42:	4620      	mov	r0, r4
}
   b7b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7b48:	f7fe b912 	b.w	b5d70 <hal_gpio_mode>
}
   b7b4c:	bd38      	pop	{r3, r4, r5, pc}

000b7b4e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7b4e:	4770      	bx	lr

000b7b50 <_Z20acquireSerial1Bufferv>:
{
   b7b50:	b538      	push	{r3, r4, r5, lr}
   b7b52:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7b54:	2514      	movs	r5, #20
   b7b56:	462a      	mov	r2, r5
   b7b58:	2100      	movs	r1, #0
   b7b5a:	f000 fc11 	bl	b8380 <memset>
   b7b5e:	8025      	strh	r5, [r4, #0]
   b7b60:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b62:	4907      	ldr	r1, [pc, #28]	; (b7b80 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7b64:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b66:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7b68:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b6a:	f000 f86b 	bl	b7c44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b6e:	4904      	ldr	r1, [pc, #16]	; (b7b80 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7b70:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b72:	4628      	mov	r0, r5
   b7b74:	f000 f866 	bl	b7c44 <_ZnajRKSt9nothrow_t>
    };
   b7b78:	60e0      	str	r0, [r4, #12]
}
   b7b7a:	4620      	mov	r0, r4
   b7b7c:	bd38      	pop	{r3, r4, r5, pc}
   b7b7e:	bf00      	nop
   b7b80:	000ba978 	.word	0x000ba978

000b7b84 <_Z22__fetch_global_Serial1v>:
{
   b7b84:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7b86:	4d0e      	ldr	r5, [pc, #56]	; (b7bc0 <_Z22__fetch_global_Serial1v+0x3c>)
   b7b88:	7829      	ldrb	r1, [r5, #0]
   b7b8a:	f3bf 8f5b 	dmb	ish
   b7b8e:	f011 0401 	ands.w	r4, r1, #1
{
   b7b92:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7b94:	d111      	bne.n	b7bba <_Z22__fetch_global_Serial1v+0x36>
   b7b96:	4628      	mov	r0, r5
   b7b98:	f7fd f801 	bl	b4b9e <__cxa_guard_acquire>
   b7b9c:	b168      	cbz	r0, b7bba <_Z22__fetch_global_Serial1v+0x36>
   b7b9e:	a801      	add	r0, sp, #4
   b7ba0:	f7ff ffd6 	bl	b7b50 <_Z20acquireSerial1Bufferv>
   b7ba4:	aa01      	add	r2, sp, #4
   b7ba6:	4621      	mov	r1, r4
   b7ba8:	4806      	ldr	r0, [pc, #24]	; (b7bc4 <_Z22__fetch_global_Serial1v+0x40>)
   b7baa:	f7ff fb5f 	bl	b726c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7bae:	4628      	mov	r0, r5
   b7bb0:	f7fc fffa 	bl	b4ba8 <__cxa_guard_release>
   b7bb4:	4804      	ldr	r0, [pc, #16]	; (b7bc8 <_Z22__fetch_global_Serial1v+0x44>)
   b7bb6:	f000 fb91 	bl	b82dc <atexit>
    return serial1;
}
   b7bba:	4802      	ldr	r0, [pc, #8]	; (b7bc4 <_Z22__fetch_global_Serial1v+0x40>)
   b7bbc:	b007      	add	sp, #28
   b7bbe:	bd30      	pop	{r4, r5, pc}
   b7bc0:	2003e72c 	.word	0x2003e72c
   b7bc4:	2003e730 	.word	0x2003e730
   b7bc8:	000b7b4f 	.word	0x000b7b4f

000b7bcc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7bcc:	4770      	bx	lr
	...

000b7bd0 <_Z17acquireWireBufferv>:
{
   b7bd0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7bd2:	2520      	movs	r5, #32
   b7bd4:	2314      	movs	r3, #20
{
   b7bd6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7bd8:	6003      	str	r3, [r0, #0]
   b7bda:	6085      	str	r5, [r0, #8]
   b7bdc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7bde:	4906      	ldr	r1, [pc, #24]	; (b7bf8 <_Z17acquireWireBufferv+0x28>)
   b7be0:	4628      	mov	r0, r5
   b7be2:	f000 f82f 	bl	b7c44 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7be6:	4904      	ldr	r1, [pc, #16]	; (b7bf8 <_Z17acquireWireBufferv+0x28>)
	};
   b7be8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7bea:	4628      	mov	r0, r5
   b7bec:	f000 f82a 	bl	b7c44 <_ZnajRKSt9nothrow_t>
	};
   b7bf0:	60e0      	str	r0, [r4, #12]
}
   b7bf2:	4620      	mov	r0, r4
   b7bf4:	bd38      	pop	{r3, r4, r5, pc}
   b7bf6:	bf00      	nop
   b7bf8:	000ba978 	.word	0x000ba978

000b7bfc <_Z19__fetch_global_Wirev>:
{
   b7bfc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7bfe:	4d0e      	ldr	r5, [pc, #56]	; (b7c38 <_Z19__fetch_global_Wirev+0x3c>)
   b7c00:	7829      	ldrb	r1, [r5, #0]
   b7c02:	f3bf 8f5b 	dmb	ish
   b7c06:	f011 0401 	ands.w	r4, r1, #1
{
   b7c0a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7c0c:	d111      	bne.n	b7c32 <_Z19__fetch_global_Wirev+0x36>
   b7c0e:	4628      	mov	r0, r5
   b7c10:	f7fc ffc5 	bl	b4b9e <__cxa_guard_acquire>
   b7c14:	b168      	cbz	r0, b7c32 <_Z19__fetch_global_Wirev+0x36>
   b7c16:	a801      	add	r0, sp, #4
   b7c18:	f7ff ffda 	bl	b7bd0 <_Z17acquireWireBufferv>
   b7c1c:	aa01      	add	r2, sp, #4
   b7c1e:	4621      	mov	r1, r4
   b7c20:	4806      	ldr	r0, [pc, #24]	; (b7c3c <_Z19__fetch_global_Wirev+0x40>)
   b7c22:	f7ff fb77 	bl	b7314 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7c26:	4628      	mov	r0, r5
   b7c28:	f7fc ffbe 	bl	b4ba8 <__cxa_guard_release>
   b7c2c:	4804      	ldr	r0, [pc, #16]	; (b7c40 <_Z19__fetch_global_Wirev+0x44>)
   b7c2e:	f000 fb55 	bl	b82dc <atexit>
	return wire;
}
   b7c32:	4802      	ldr	r0, [pc, #8]	; (b7c3c <_Z19__fetch_global_Wirev+0x40>)
   b7c34:	b007      	add	sp, #28
   b7c36:	bd30      	pop	{r4, r5, pc}
   b7c38:	2003e748 	.word	0x2003e748
   b7c3c:	2003e74c 	.word	0x2003e74c
   b7c40:	000b7bcd 	.word	0x000b7bcd

000b7c44 <_ZnajRKSt9nothrow_t>:
   b7c44:	f7fc bfa3 	b.w	b4b8e <_Znaj>

000b7c48 <_ZSt17__throw_bad_allocv>:
   b7c48:	b508      	push	{r3, lr}
   b7c4a:	f7fe faf5 	bl	b6238 <abort>

000b7c4e <_ZSt19__throw_logic_errorPKc>:
   b7c4e:	b508      	push	{r3, lr}
   b7c50:	f7fe faf2 	bl	b6238 <abort>

000b7c54 <_ZSt24__throw_invalid_argumentPKc>:
   b7c54:	b508      	push	{r3, lr}
   b7c56:	f7fe faef 	bl	b6238 <abort>

000b7c5a <_ZSt20__throw_length_errorPKc>:
   b7c5a:	b508      	push	{r3, lr}
   b7c5c:	f7fe faec 	bl	b6238 <abort>

000b7c60 <_ZSt20__throw_out_of_rangePKc>:
   b7c60:	b508      	push	{r3, lr}
   b7c62:	f7fe fae9 	bl	b6238 <abort>

000b7c66 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b7c66:	b40f      	push	{r0, r1, r2, r3}
   b7c68:	b580      	push	{r7, lr}
   b7c6a:	b084      	sub	sp, #16
   b7c6c:	af00      	add	r7, sp, #0
   b7c6e:	f107 0418 	add.w	r4, r7, #24
   b7c72:	f854 2b04 	ldr.w	r2, [r4], #4
   b7c76:	607a      	str	r2, [r7, #4]
   b7c78:	4610      	mov	r0, r2
   b7c7a:	f7fc ff2b 	bl	b4ad4 <strlen>
   b7c7e:	f200 2307 	addw	r3, r0, #519	; 0x207
   b7c82:	f023 0307 	bic.w	r3, r3, #7
   b7c86:	ebad 0d03 	sub.w	sp, sp, r3
   b7c8a:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b7c8e:	687a      	ldr	r2, [r7, #4]
   b7c90:	60fc      	str	r4, [r7, #12]
   b7c92:	4623      	mov	r3, r4
   b7c94:	4668      	mov	r0, sp
   b7c96:	f000 f85d 	bl	b7d54 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b7c9a:	f7fe facd 	bl	b6238 <abort>

000b7c9e <_ZSt25__throw_bad_function_callv>:
   b7c9e:	b508      	push	{r3, lr}
   b7ca0:	f7fe faca 	bl	b6238 <abort>

000b7ca4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7ca4:	4901      	ldr	r1, [pc, #4]	; (b7cac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7ca6:	f000 bb03 	b.w	b82b0 <_ZNKSt9type_infoeqERKS_>
   b7caa:	bf00      	nop
   b7cac:	000ba994 	.word	0x000ba994

000b7cb0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b7cb0:	b580      	push	{r7, lr}
   b7cb2:	b09c      	sub	sp, #112	; 0x70
   b7cb4:	4606      	mov	r6, r0
   b7cb6:	af00      	add	r7, sp, #0
   b7cb8:	460c      	mov	r4, r1
   b7cba:	1ba4      	subs	r4, r4, r6
   b7cbc:	490e      	ldr	r1, [pc, #56]	; (b7cf8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b7cbe:	2269      	movs	r2, #105	; 0x69
   b7cc0:	1d38      	adds	r0, r7, #4
   b7cc2:	f000 fb35 	bl	b8330 <memcpy>
   b7cc6:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b7cca:	f023 0307 	bic.w	r3, r3, #7
   b7cce:	ebad 0d03 	sub.w	sp, sp, r3
   b7cd2:	466d      	mov	r5, sp
   b7cd4:	2268      	movs	r2, #104	; 0x68
   b7cd6:	1d39      	adds	r1, r7, #4
   b7cd8:	4628      	mov	r0, r5
   b7cda:	f000 fb29 	bl	b8330 <memcpy>
   b7cde:	4622      	mov	r2, r4
   b7ce0:	4631      	mov	r1, r6
   b7ce2:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b7ce6:	442c      	add	r4, r5
   b7ce8:	f000 fb22 	bl	b8330 <memcpy>
   b7cec:	2300      	movs	r3, #0
   b7cee:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b7cf2:	4628      	mov	r0, r5
   b7cf4:	f7ff ffab 	bl	b7c4e <_ZSt19__throw_logic_errorPKc>
   b7cf8:	000ba99c 	.word	0x000ba99c

000b7cfc <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b7cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d00:	af00      	add	r7, sp, #0
   b7d02:	b084      	sub	sp, #16
   b7d04:	466d      	mov	r5, sp
   b7d06:	f105 040c 	add.w	r4, r5, #12
   b7d0a:	f8df 8044 	ldr.w	r8, [pc, #68]	; b7d50 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b7d0e:	4623      	mov	r3, r4
   b7d10:	f04f 0c0a 	mov.w	ip, #10
   b7d14:	fbb2 f6fc 	udiv	r6, r2, ip
   b7d18:	fb0c 2e16 	mls	lr, ip, r6, r2
   b7d1c:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b7d20:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b7d24:	4696      	mov	lr, r2
   b7d26:	f1be 0f09 	cmp.w	lr, #9
   b7d2a:	4632      	mov	r2, r6
   b7d2c:	d8f2      	bhi.n	b7d14 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b7d2e:	1ae4      	subs	r4, r4, r3
   b7d30:	428c      	cmp	r4, r1
   b7d32:	d809      	bhi.n	b7d48 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b7d34:	f1c4 030c 	rsb	r3, r4, #12
   b7d38:	4622      	mov	r2, r4
   b7d3a:	18e9      	adds	r1, r5, r3
   b7d3c:	f000 faf8 	bl	b8330 <memcpy>
   b7d40:	4620      	mov	r0, r4
   b7d42:	46bd      	mov	sp, r7
   b7d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7d48:	f04f 34ff 	mov.w	r4, #4294967295
   b7d4c:	e7f8      	b.n	b7d40 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b7d4e:	bf00      	nop
   b7d50:	000baa05 	.word	0x000baa05

000b7d54 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b7d54:	3901      	subs	r1, #1
   b7d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d5a:	4607      	mov	r7, r0
   b7d5c:	4615      	mov	r5, r2
   b7d5e:	eb00 0801 	add.w	r8, r0, r1
   b7d62:	4604      	mov	r4, r0
   b7d64:	782a      	ldrb	r2, [r5, #0]
   b7d66:	b392      	cbz	r2, b7dce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b7d68:	4544      	cmp	r4, r8
   b7d6a:	d22a      	bcs.n	b7dc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b7d6c:	2a25      	cmp	r2, #37	; 0x25
   b7d6e:	d107      	bne.n	b7d80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b7d70:	786a      	ldrb	r2, [r5, #1]
   b7d72:	2a73      	cmp	r2, #115	; 0x73
   b7d74:	d009      	beq.n	b7d8a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b7d76:	2a7a      	cmp	r2, #122	; 0x7a
   b7d78:	d012      	beq.n	b7da0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b7d7a:	2a25      	cmp	r2, #37	; 0x25
   b7d7c:	d100      	bne.n	b7d80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b7d7e:	3501      	adds	r5, #1
   b7d80:	f815 2b01 	ldrb.w	r2, [r5], #1
   b7d84:	f804 2b01 	strb.w	r2, [r4], #1
   b7d88:	e7ec      	b.n	b7d64 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b7d8a:	f853 2b04 	ldr.w	r2, [r3], #4
   b7d8e:	3a01      	subs	r2, #1
   b7d90:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b7d94:	b1c9      	cbz	r1, b7dca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b7d96:	4544      	cmp	r4, r8
   b7d98:	d013      	beq.n	b7dc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b7d9a:	f804 1b01 	strb.w	r1, [r4], #1
   b7d9e:	e7f7      	b.n	b7d90 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b7da0:	78aa      	ldrb	r2, [r5, #2]
   b7da2:	2a75      	cmp	r2, #117	; 0x75
   b7da4:	d1ec      	bne.n	b7d80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b7da6:	461e      	mov	r6, r3
   b7da8:	eba8 0104 	sub.w	r1, r8, r4
   b7dac:	f856 2b04 	ldr.w	r2, [r6], #4
   b7db0:	4620      	mov	r0, r4
   b7db2:	f7ff ffa3 	bl	b7cfc <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b7db6:	2800      	cmp	r0, #0
   b7db8:	dd03      	ble.n	b7dc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b7dba:	4404      	add	r4, r0
   b7dbc:	3503      	adds	r5, #3
   b7dbe:	4633      	mov	r3, r6
   b7dc0:	e7d0      	b.n	b7d64 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b7dc2:	4621      	mov	r1, r4
   b7dc4:	4638      	mov	r0, r7
   b7dc6:	f7ff ff73 	bl	b7cb0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b7dca:	3502      	adds	r5, #2
   b7dcc:	e7ca      	b.n	b7d64 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b7dce:	7022      	strb	r2, [r4, #0]
   b7dd0:	1be0      	subs	r0, r4, r7
   b7dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7dd6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b7dd6:	b10a      	cbz	r2, b7ddc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b7dd8:	f000 baaa 	b.w	b8330 <memcpy>
   b7ddc:	4770      	bx	lr

000b7dde <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b7dde:	b10a      	cbz	r2, b7de4 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b7de0:	f000 ba96 	b.w	b8310 <memcmp>
   b7de4:	4610      	mov	r0, r2
   b7de6:	4770      	bx	lr

000b7de8 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b7de8:	4613      	mov	r3, r2
   b7dea:	460a      	mov	r2, r1
   b7dec:	b111      	cbz	r1, b7df4 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b7dee:	7819      	ldrb	r1, [r3, #0]
   b7df0:	f7fc be16 	b.w	b4a20 <memchr>
   b7df4:	4608      	mov	r0, r1
   b7df6:	4770      	bx	lr

000b7df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b7df8:	b508      	push	{r3, lr}
   b7dfa:	680b      	ldr	r3, [r1, #0]
   b7dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b7e00:	d302      	bcc.n	b7e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b7e02:	480d      	ldr	r0, [pc, #52]	; (b7e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b7e04:	f7ff ff29 	bl	b7c5a <_ZSt20__throw_length_errorPKc>
   b7e08:	4293      	cmp	r3, r2
   b7e0a:	d90b      	bls.n	b7e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b7e0c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b7e10:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b7e14:	d206      	bcs.n	b7e24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b7e16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b7e1a:	bf2a      	itet	cs
   b7e1c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b7e20:	6008      	strcc	r0, [r1, #0]
   b7e22:	600b      	strcs	r3, [r1, #0]
   b7e24:	6808      	ldr	r0, [r1, #0]
   b7e26:	3001      	adds	r0, #1
   b7e28:	d501      	bpl.n	b7e2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b7e2a:	f7ff ff0d 	bl	b7c48 <_ZSt17__throw_bad_allocv>
   b7e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7e32:	f7fc beaa 	b.w	b4b8a <_Znwj>
   b7e36:	bf00      	nop
   b7e38:	000baa10 	.word	0x000baa10

000b7e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b7e3c:	f850 3b08 	ldr.w	r3, [r0], #8
   b7e40:	4283      	cmp	r3, r0
   b7e42:	d002      	beq.n	b7e4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b7e44:	4618      	mov	r0, r3
   b7e46:	f7fc bea4 	b.w	b4b92 <_ZdlPv>
   b7e4a:	4770      	bx	lr

000b7e4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b7e4c:	b508      	push	{r3, lr}
   b7e4e:	4603      	mov	r3, r0
   b7e50:	4608      	mov	r0, r1
   b7e52:	685b      	ldr	r3, [r3, #4]
   b7e54:	4298      	cmp	r0, r3
   b7e56:	4611      	mov	r1, r2
   b7e58:	d903      	bls.n	b7e62 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b7e5a:	4602      	mov	r2, r0
   b7e5c:	4801      	ldr	r0, [pc, #4]	; (b7e64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b7e5e:	f7ff ff02 	bl	b7c66 <_ZSt24__throw_out_of_range_fmtPKcz>
   b7e62:	bd08      	pop	{r3, pc}
   b7e64:	000baa28 	.word	0x000baa28

000b7e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b7e68:	2a01      	cmp	r2, #1
   b7e6a:	b410      	push	{r4}
   b7e6c:	d104      	bne.n	b7e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b7e6e:	780a      	ldrb	r2, [r1, #0]
   b7e70:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7e74:	7002      	strb	r2, [r0, #0]
   b7e76:	4770      	bx	lr
   b7e78:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7e7c:	f7ff bfab 	b.w	b7dd6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b7e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b7e80:	2a01      	cmp	r2, #1
   b7e82:	b430      	push	{r4, r5}
   b7e84:	d103      	bne.n	b7e8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b7e86:	780b      	ldrb	r3, [r1, #0]
   b7e88:	7003      	strb	r3, [r0, #0]
   b7e8a:	bc30      	pop	{r4, r5}
   b7e8c:	4770      	bx	lr
   b7e8e:	2a00      	cmp	r2, #0
   b7e90:	d0fb      	beq.n	b7e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b7e92:	bc30      	pop	{r4, r5}
   b7e94:	f000 ba5a 	b.w	b834c <memmove>

000b7e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b7e98:	b508      	push	{r3, lr}
   b7e9a:	1a52      	subs	r2, r2, r1
   b7e9c:	f7ff ffe4 	bl	b7e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7ea0:	bd08      	pop	{r3, pc}

000b7ea2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b7ea2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7ea6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b7ea8:	461f      	mov	r7, r3
   b7eaa:	6843      	ldr	r3, [r0, #4]
   b7eac:	eb01 0802 	add.w	r8, r1, r2
   b7eb0:	1ab2      	subs	r2, r6, r2
   b7eb2:	441a      	add	r2, r3
   b7eb4:	eba3 0908 	sub.w	r9, r3, r8
   b7eb8:	4603      	mov	r3, r0
   b7eba:	9201      	str	r2, [sp, #4]
   b7ebc:	f853 2b08 	ldr.w	r2, [r3], #8
   b7ec0:	429a      	cmp	r2, r3
   b7ec2:	bf18      	it	ne
   b7ec4:	6882      	ldrne	r2, [r0, #8]
   b7ec6:	460d      	mov	r5, r1
   b7ec8:	bf08      	it	eq
   b7eca:	220f      	moveq	r2, #15
   b7ecc:	a901      	add	r1, sp, #4
   b7ece:	4604      	mov	r4, r0
   b7ed0:	f7ff ff92 	bl	b7df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b7ed4:	4682      	mov	sl, r0
   b7ed6:	b11d      	cbz	r5, b7ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b7ed8:	6821      	ldr	r1, [r4, #0]
   b7eda:	462a      	mov	r2, r5
   b7edc:	f7ff ffc4 	bl	b7e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7ee0:	b137      	cbz	r7, b7ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b7ee2:	b12e      	cbz	r6, b7ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b7ee4:	4632      	mov	r2, r6
   b7ee6:	4639      	mov	r1, r7
   b7ee8:	eb0a 0005 	add.w	r0, sl, r5
   b7eec:	f7ff ffbc 	bl	b7e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7ef0:	f1b9 0f00 	cmp.w	r9, #0
   b7ef4:	d007      	beq.n	b7f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b7ef6:	6821      	ldr	r1, [r4, #0]
   b7ef8:	4435      	add	r5, r6
   b7efa:	464a      	mov	r2, r9
   b7efc:	4441      	add	r1, r8
   b7efe:	eb0a 0005 	add.w	r0, sl, r5
   b7f02:	f7ff ffb1 	bl	b7e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7f06:	4620      	mov	r0, r4
   b7f08:	f7ff ff98 	bl	b7e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b7f0c:	9b01      	ldr	r3, [sp, #4]
   b7f0e:	f8c4 a000 	str.w	sl, [r4]
   b7f12:	60a3      	str	r3, [r4, #8]
   b7f14:	b002      	add	sp, #8
   b7f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b7f1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
   b7f1a:	b538      	push	{r3, r4, r5, lr}
   b7f1c:	4604      	mov	r4, r0
   b7f1e:	4615      	mov	r5, r2
   b7f20:	4608      	mov	r0, r1
   b7f22:	4411      	add	r1, r2
   b7f24:	6862      	ldr	r2, [r4, #4]
   b7f26:	1a52      	subs	r2, r2, r1
   b7f28:	d005      	beq.n	b7f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b7f2a:	b125      	cbz	r5, b7f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b7f2c:	6823      	ldr	r3, [r4, #0]
   b7f2e:	4419      	add	r1, r3
   b7f30:	4418      	add	r0, r3
   b7f32:	f7ff ffa5 	bl	b7e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b7f36:	6862      	ldr	r2, [r4, #4]
   b7f38:	6823      	ldr	r3, [r4, #0]
   b7f3a:	1b55      	subs	r5, r2, r5
   b7f3c:	2200      	movs	r2, #0
   b7f3e:	6065      	str	r5, [r4, #4]
   b7f40:	555a      	strb	r2, [r3, r5]
   b7f42:	bd38      	pop	{r3, r4, r5, pc}

000b7f44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
   b7f44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f46:	4604      	mov	r4, r0
   b7f48:	4623      	mov	r3, r4
   b7f4a:	6840      	ldr	r0, [r0, #4]
   b7f4c:	f853 6b08 	ldr.w	r6, [r3], #8
   b7f50:	429e      	cmp	r6, r3
   b7f52:	bf18      	it	ne
   b7f54:	68a3      	ldrne	r3, [r4, #8]
   b7f56:	eb00 0502 	add.w	r5, r0, r2
   b7f5a:	bf08      	it	eq
   b7f5c:	230f      	moveq	r3, #15
   b7f5e:	429d      	cmp	r5, r3
   b7f60:	d80a      	bhi.n	b7f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
   b7f62:	b112      	cbz	r2, b7f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
   b7f64:	4430      	add	r0, r6
   b7f66:	f7ff ff7f 	bl	b7e68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7f6a:	6823      	ldr	r3, [r4, #0]
   b7f6c:	6065      	str	r5, [r4, #4]
   b7f6e:	2200      	movs	r2, #0
   b7f70:	4620      	mov	r0, r4
   b7f72:	555a      	strb	r2, [r3, r5]
   b7f74:	b002      	add	sp, #8
   b7f76:	bd70      	pop	{r4, r5, r6, pc}
   b7f78:	9200      	str	r2, [sp, #0]
   b7f7a:	460b      	mov	r3, r1
   b7f7c:	2200      	movs	r2, #0
   b7f7e:	4601      	mov	r1, r0
   b7f80:	4620      	mov	r0, r4
   b7f82:	f7ff ff8e 	bl	b7ea2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b7f86:	e7f0      	b.n	b7f6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

000b7f88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b7f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7f8c:	460e      	mov	r6, r1
   b7f8e:	461d      	mov	r5, r3
   b7f90:	6841      	ldr	r1, [r0, #4]
   b7f92:	b923      	cbnz	r3, b7f9e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b7f94:	4291      	cmp	r1, r2
   b7f96:	d221      	bcs.n	b7fdc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b7f98:	f04f 32ff 	mov.w	r2, #4294967295
   b7f9c:	e01e      	b.n	b7fdc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b7f9e:	4291      	cmp	r1, r2
   b7fa0:	d9fa      	bls.n	b7f98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b7fa2:	f8d0 8000 	ldr.w	r8, [r0]
   b7fa6:	7833      	ldrb	r3, [r6, #0]
   b7fa8:	f88d 3007 	strb.w	r3, [sp, #7]
   b7fac:	eb08 0701 	add.w	r7, r8, r1
   b7fb0:	eb08 0002 	add.w	r0, r8, r2
   b7fb4:	1a89      	subs	r1, r1, r2
   b7fb6:	f1c5 0901 	rsb	r9, r5, #1
   b7fba:	42a9      	cmp	r1, r5
   b7fbc:	d3ec      	bcc.n	b7f98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b7fbe:	f10d 0207 	add.w	r2, sp, #7
   b7fc2:	4449      	add	r1, r9
   b7fc4:	f7ff ff10 	bl	b7de8 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b7fc8:	4604      	mov	r4, r0
   b7fca:	2800      	cmp	r0, #0
   b7fcc:	d0e4      	beq.n	b7f98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b7fce:	462a      	mov	r2, r5
   b7fd0:	4631      	mov	r1, r6
   b7fd2:	f7ff ff04 	bl	b7dde <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b7fd6:	b928      	cbnz	r0, b7fe4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b7fd8:	eba4 0208 	sub.w	r2, r4, r8
   b7fdc:	4610      	mov	r0, r2
   b7fde:	b003      	add	sp, #12
   b7fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7fe4:	1c60      	adds	r0, r4, #1
   b7fe6:	1a39      	subs	r1, r7, r0
   b7fe8:	e7e7      	b.n	b7fba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b7fea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b7fea:	b513      	push	{r0, r1, r4, lr}
   b7fec:	4604      	mov	r4, r0
   b7fee:	4608      	mov	r0, r1
   b7ff0:	9201      	str	r2, [sp, #4]
   b7ff2:	9100      	str	r1, [sp, #0]
   b7ff4:	f7fc fd6e 	bl	b4ad4 <strlen>
   b7ff8:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7ffc:	4603      	mov	r3, r0
   b7ffe:	4620      	mov	r0, r4
   b8000:	f7ff ffc2 	bl	b7f88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b8004:	b002      	add	sp, #8
   b8006:	bd10      	pop	{r4, pc}

000b8008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   b8008:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b800a:	4604      	mov	r4, r0
   b800c:	4616      	mov	r6, r2
   b800e:	460d      	mov	r5, r1
   b8010:	b919      	cbnz	r1, b801a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b8012:	b112      	cbz	r2, b801a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b8014:	480d      	ldr	r0, [pc, #52]	; (b804c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   b8016:	f7ff fe1a 	bl	b7c4e <_ZSt19__throw_logic_errorPKc>
   b801a:	1b73      	subs	r3, r6, r5
   b801c:	2b0f      	cmp	r3, #15
   b801e:	9301      	str	r3, [sp, #4]
   b8020:	d907      	bls.n	b8032 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   b8022:	2200      	movs	r2, #0
   b8024:	a901      	add	r1, sp, #4
   b8026:	4620      	mov	r0, r4
   b8028:	f7ff fee6 	bl	b7df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b802c:	9b01      	ldr	r3, [sp, #4]
   b802e:	6020      	str	r0, [r4, #0]
   b8030:	60a3      	str	r3, [r4, #8]
   b8032:	4632      	mov	r2, r6
   b8034:	4629      	mov	r1, r5
   b8036:	6820      	ldr	r0, [r4, #0]
   b8038:	f7ff ff2e 	bl	b7e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   b803c:	9b01      	ldr	r3, [sp, #4]
   b803e:	6822      	ldr	r2, [r4, #0]
   b8040:	6063      	str	r3, [r4, #4]
   b8042:	2100      	movs	r1, #0
   b8044:	54d1      	strb	r1, [r2, r3]
   b8046:	b002      	add	sp, #8
   b8048:	bd70      	pop	{r4, r5, r6, pc}
   b804a:	bf00      	nop
   b804c:	000baa5f 	.word	0x000baa5f

000b8050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   b8050:	b508      	push	{r3, lr}
   b8052:	f04f 0300 	mov.w	r3, #0
   b8056:	f7ff ffd7 	bl	b8008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   b805a:	bd08      	pop	{r3, pc}

000b805c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   b805c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8060:	460d      	mov	r5, r1
   b8062:	4617      	mov	r7, r2
   b8064:	4698      	mov	r8, r3
   b8066:	f100 0308 	add.w	r3, r0, #8
   b806a:	4604      	mov	r4, r0
   b806c:	6003      	str	r3, [r0, #0]
   b806e:	4639      	mov	r1, r7
   b8070:	4a09      	ldr	r2, [pc, #36]	; (b8098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   b8072:	4628      	mov	r0, r5
   b8074:	f7ff feea 	bl	b7e4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b8078:	682e      	ldr	r6, [r5, #0]
   b807a:	686a      	ldr	r2, [r5, #4]
   b807c:	1831      	adds	r1, r6, r0
   b807e:	1bd2      	subs	r2, r2, r7
   b8080:	4620      	mov	r0, r4
   b8082:	4542      	cmp	r2, r8
   b8084:	bf94      	ite	ls
   b8086:	188a      	addls	r2, r1, r2
   b8088:	eb01 0208 	addhi.w	r2, r1, r8
   b808c:	f7ff ffe0 	bl	b8050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   b8090:	4620      	mov	r0, r4
   b8092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8096:	bf00      	nop
   b8098:	000baa89 	.word	0x000baa89

000b809c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   b809c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b809e:	460d      	mov	r5, r1
   b80a0:	4604      	mov	r4, r0
   b80a2:	4611      	mov	r1, r2
   b80a4:	4628      	mov	r0, r5
   b80a6:	4a06      	ldr	r2, [pc, #24]	; (b80c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   b80a8:	9301      	str	r3, [sp, #4]
   b80aa:	f7ff fecf 	bl	b7e4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b80ae:	9b01      	ldr	r3, [sp, #4]
   b80b0:	4602      	mov	r2, r0
   b80b2:	4629      	mov	r1, r5
   b80b4:	4620      	mov	r0, r4
   b80b6:	f7ff ffd1 	bl	b805c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   b80ba:	4620      	mov	r0, r4
   b80bc:	b003      	add	sp, #12
   b80be:	bd30      	pop	{r4, r5, pc}
   b80c0:	000baaa4 	.word	0x000baaa4

000b80c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b80c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b80c6:	2400      	movs	r4, #0
   b80c8:	2310      	movs	r3, #16
   b80ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b80ce:	6803      	ldr	r3, [r0, #0]
   b80d0:	4615      	mov	r5, r2
   b80d2:	699e      	ldr	r6, [r3, #24]
   b80d4:	6812      	ldr	r2, [r2, #0]
   b80d6:	466b      	mov	r3, sp
   b80d8:	e9cd 4400 	strd	r4, r4, [sp]
   b80dc:	47b0      	blx	r6
   b80de:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b80e2:	f003 0306 	and.w	r3, r3, #6
   b80e6:	2b06      	cmp	r3, #6
   b80e8:	bf03      	ittte	eq
   b80ea:	9b00      	ldreq	r3, [sp, #0]
   b80ec:	602b      	streq	r3, [r5, #0]
   b80ee:	2001      	moveq	r0, #1
   b80f0:	4620      	movne	r0, r4
   b80f2:	b004      	add	sp, #16
   b80f4:	bd70      	pop	{r4, r5, r6, pc}

000b80f6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b80f6:	9800      	ldr	r0, [sp, #0]
   b80f8:	4290      	cmp	r0, r2
   b80fa:	bf14      	ite	ne
   b80fc:	2001      	movne	r0, #1
   b80fe:	2006      	moveq	r0, #6
   b8100:	4770      	bx	lr
	...

000b8104 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8104:	b510      	push	{r4, lr}
   b8106:	4b03      	ldr	r3, [pc, #12]	; (b8114 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8108:	6003      	str	r3, [r0, #0]
   b810a:	4604      	mov	r4, r0
   b810c:	f000 f8cd 	bl	b82aa <_ZNSt9type_infoD1Ev>
   b8110:	4620      	mov	r0, r4
   b8112:	bd10      	pop	{r4, pc}
   b8114:	000baaf4 	.word	0x000baaf4

000b8118 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8118:	b510      	push	{r4, lr}
   b811a:	4604      	mov	r4, r0
   b811c:	f7ff fff2 	bl	b8104 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8120:	4620      	mov	r0, r4
   b8122:	2108      	movs	r1, #8
   b8124:	f7fc fd39 	bl	b4b9a <_ZdlPvj>
   b8128:	4620      	mov	r0, r4
   b812a:	bd10      	pop	{r4, pc}

000b812c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8130:	461f      	mov	r7, r3
   b8132:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8136:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b813a:	4598      	cmp	r8, r3
   b813c:	4606      	mov	r6, r0
   b813e:	4615      	mov	r5, r2
   b8140:	d107      	bne.n	b8152 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8142:	9907      	ldr	r1, [sp, #28]
   b8144:	f000 f8b4 	bl	b82b0 <_ZNKSt9type_infoeqERKS_>
   b8148:	b118      	cbz	r0, b8152 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b814a:	7165      	strb	r5, [r4, #5]
   b814c:	2000      	movs	r0, #0
   b814e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8152:	4639      	mov	r1, r7
   b8154:	4630      	mov	r0, r6
   b8156:	f000 f8ab 	bl	b82b0 <_ZNKSt9type_infoeqERKS_>
   b815a:	2800      	cmp	r0, #0
   b815c:	d0f6      	beq.n	b814c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b815e:	2301      	movs	r3, #1
   b8160:	f8c4 8000 	str.w	r8, [r4]
   b8164:	7125      	strb	r5, [r4, #4]
   b8166:	71a3      	strb	r3, [r4, #6]
   b8168:	e7f0      	b.n	b814c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b816a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b816a:	b538      	push	{r3, r4, r5, lr}
   b816c:	4615      	mov	r5, r2
   b816e:	461c      	mov	r4, r3
   b8170:	f000 f89e 	bl	b82b0 <_ZNKSt9type_infoeqERKS_>
   b8174:	b120      	cbz	r0, b8180 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8176:	2308      	movs	r3, #8
   b8178:	60e3      	str	r3, [r4, #12]
   b817a:	2306      	movs	r3, #6
   b817c:	6025      	str	r5, [r4, #0]
   b817e:	7123      	strb	r3, [r4, #4]
   b8180:	bd38      	pop	{r3, r4, r5, pc}

000b8182 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8182:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8184:	4605      	mov	r5, r0
   b8186:	460c      	mov	r4, r1
   b8188:	9201      	str	r2, [sp, #4]
   b818a:	461e      	mov	r6, r3
   b818c:	f000 f890 	bl	b82b0 <_ZNKSt9type_infoeqERKS_>
   b8190:	b950      	cbnz	r0, b81a8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8192:	2e03      	cmp	r6, #3
   b8194:	d808      	bhi.n	b81a8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8196:	6823      	ldr	r3, [r4, #0]
   b8198:	9a01      	ldr	r2, [sp, #4]
   b819a:	695b      	ldr	r3, [r3, #20]
   b819c:	4629      	mov	r1, r5
   b819e:	4620      	mov	r0, r4
   b81a0:	b002      	add	sp, #8
   b81a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b81a6:	4718      	bx	r3
   b81a8:	b002      	add	sp, #8
   b81aa:	bd70      	pop	{r4, r5, r6, pc}

000b81ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b81ac:	b510      	push	{r4, lr}
   b81ae:	4b03      	ldr	r3, [pc, #12]	; (b81bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b81b0:	6003      	str	r3, [r0, #0]
   b81b2:	4604      	mov	r4, r0
   b81b4:	f7ff ffa6 	bl	b8104 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b81b8:	4620      	mov	r0, r4
   b81ba:	bd10      	pop	{r4, pc}
   b81bc:	000bab54 	.word	0x000bab54

000b81c0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b81c0:	b510      	push	{r4, lr}
   b81c2:	4604      	mov	r4, r0
   b81c4:	f7ff fff2 	bl	b81ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b81c8:	4620      	mov	r0, r4
   b81ca:	210c      	movs	r1, #12
   b81cc:	f7fc fce5 	bl	b4b9a <_ZdlPvj>
   b81d0:	4620      	mov	r0, r4
   b81d2:	bd10      	pop	{r4, pc}

000b81d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b81d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b81d6:	9f08      	ldr	r7, [sp, #32]
   b81d8:	4297      	cmp	r7, r2
   b81da:	4605      	mov	r5, r0
   b81dc:	460e      	mov	r6, r1
   b81de:	4614      	mov	r4, r2
   b81e0:	d00a      	beq.n	b81f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b81e2:	68a8      	ldr	r0, [r5, #8]
   b81e4:	6802      	ldr	r2, [r0, #0]
   b81e6:	9708      	str	r7, [sp, #32]
   b81e8:	6a15      	ldr	r5, [r2, #32]
   b81ea:	4631      	mov	r1, r6
   b81ec:	4622      	mov	r2, r4
   b81ee:	46ac      	mov	ip, r5
   b81f0:	b003      	add	sp, #12
   b81f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b81f6:	4760      	bx	ip
   b81f8:	4619      	mov	r1, r3
   b81fa:	9301      	str	r3, [sp, #4]
   b81fc:	f000 f858 	bl	b82b0 <_ZNKSt9type_infoeqERKS_>
   b8200:	9b01      	ldr	r3, [sp, #4]
   b8202:	2800      	cmp	r0, #0
   b8204:	d0ed      	beq.n	b81e2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8206:	2006      	movs	r0, #6
   b8208:	b003      	add	sp, #12
   b820a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b820c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b820c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8210:	460d      	mov	r5, r1
   b8212:	4619      	mov	r1, r3
   b8214:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8218:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b821c:	4681      	mov	r9, r0
   b821e:	4617      	mov	r7, r2
   b8220:	4698      	mov	r8, r3
   b8222:	f000 f845 	bl	b82b0 <_ZNKSt9type_infoeqERKS_>
   b8226:	b190      	cbz	r0, b824e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8228:	2d00      	cmp	r5, #0
   b822a:	6034      	str	r4, [r6, #0]
   b822c:	7137      	strb	r7, [r6, #4]
   b822e:	db09      	blt.n	b8244 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8230:	1961      	adds	r1, r4, r5
   b8232:	458a      	cmp	sl, r1
   b8234:	bf0c      	ite	eq
   b8236:	2106      	moveq	r1, #6
   b8238:	2101      	movne	r1, #1
   b823a:	71b1      	strb	r1, [r6, #6]
   b823c:	2000      	movs	r0, #0
   b823e:	b001      	add	sp, #4
   b8240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8244:	3502      	adds	r5, #2
   b8246:	d1f9      	bne.n	b823c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8248:	2301      	movs	r3, #1
   b824a:	71b3      	strb	r3, [r6, #6]
   b824c:	e7f6      	b.n	b823c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b824e:	4554      	cmp	r4, sl
   b8250:	d106      	bne.n	b8260 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8252:	4659      	mov	r1, fp
   b8254:	4648      	mov	r0, r9
   b8256:	f000 f82b 	bl	b82b0 <_ZNKSt9type_infoeqERKS_>
   b825a:	b108      	cbz	r0, b8260 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b825c:	7177      	strb	r7, [r6, #5]
   b825e:	e7ed      	b.n	b823c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8260:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8264:	6803      	ldr	r3, [r0, #0]
   b8266:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b826a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b826e:	69dc      	ldr	r4, [r3, #28]
   b8270:	463a      	mov	r2, r7
   b8272:	4643      	mov	r3, r8
   b8274:	4629      	mov	r1, r5
   b8276:	46a4      	mov	ip, r4
   b8278:	b001      	add	sp, #4
   b827a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b827e:	4760      	bx	ip

000b8280 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8284:	4607      	mov	r7, r0
   b8286:	460c      	mov	r4, r1
   b8288:	4615      	mov	r5, r2
   b828a:	461e      	mov	r6, r3
   b828c:	f7ff ff6d 	bl	b816a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8290:	b948      	cbnz	r0, b82a6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8292:	68b8      	ldr	r0, [r7, #8]
   b8294:	6803      	ldr	r3, [r0, #0]
   b8296:	699f      	ldr	r7, [r3, #24]
   b8298:	462a      	mov	r2, r5
   b829a:	4633      	mov	r3, r6
   b829c:	4621      	mov	r1, r4
   b829e:	46bc      	mov	ip, r7
   b82a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b82a4:	4760      	bx	ip
   b82a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b82aa <_ZNSt9type_infoD1Ev>:
   b82aa:	4770      	bx	lr

000b82ac <_ZNKSt9type_info14__is_pointer_pEv>:
   b82ac:	2000      	movs	r0, #0
   b82ae:	4770      	bx	lr

000b82b0 <_ZNKSt9type_infoeqERKS_>:
   b82b0:	4281      	cmp	r1, r0
   b82b2:	b508      	push	{r3, lr}
   b82b4:	d00e      	beq.n	b82d4 <_ZNKSt9type_infoeqERKS_+0x24>
   b82b6:	6840      	ldr	r0, [r0, #4]
   b82b8:	7803      	ldrb	r3, [r0, #0]
   b82ba:	2b2a      	cmp	r3, #42	; 0x2a
   b82bc:	d00c      	beq.n	b82d8 <_ZNKSt9type_infoeqERKS_+0x28>
   b82be:	6849      	ldr	r1, [r1, #4]
   b82c0:	780b      	ldrb	r3, [r1, #0]
   b82c2:	2b2a      	cmp	r3, #42	; 0x2a
   b82c4:	bf08      	it	eq
   b82c6:	3101      	addeq	r1, #1
   b82c8:	f7fc fbfa 	bl	b4ac0 <strcmp>
   b82cc:	fab0 f080 	clz	r0, r0
   b82d0:	0940      	lsrs	r0, r0, #5
   b82d2:	bd08      	pop	{r3, pc}
   b82d4:	2001      	movs	r0, #1
   b82d6:	e7fc      	b.n	b82d2 <_ZNKSt9type_infoeqERKS_+0x22>
   b82d8:	2000      	movs	r0, #0
   b82da:	e7fa      	b.n	b82d2 <_ZNKSt9type_infoeqERKS_+0x22>

000b82dc <atexit>:
   b82dc:	2300      	movs	r3, #0
   b82de:	4601      	mov	r1, r0
   b82e0:	461a      	mov	r2, r3
   b82e2:	4618      	mov	r0, r3
   b82e4:	f000 bfc6 	b.w	b9274 <__register_exitproc>

000b82e8 <ldiv>:
   b82e8:	2900      	cmp	r1, #0
   b82ea:	b510      	push	{r4, lr}
   b82ec:	fb91 f4f2 	sdiv	r4, r1, r2
   b82f0:	fb02 1314 	mls	r3, r2, r4, r1
   b82f4:	db06      	blt.n	b8304 <ldiv+0x1c>
   b82f6:	2b00      	cmp	r3, #0
   b82f8:	da01      	bge.n	b82fe <ldiv+0x16>
   b82fa:	3401      	adds	r4, #1
   b82fc:	1a9b      	subs	r3, r3, r2
   b82fe:	e9c0 4300 	strd	r4, r3, [r0]
   b8302:	bd10      	pop	{r4, pc}
   b8304:	2b00      	cmp	r3, #0
   b8306:	bfc4      	itt	gt
   b8308:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b830c:	189b      	addgt	r3, r3, r2
   b830e:	e7f6      	b.n	b82fe <ldiv+0x16>

000b8310 <memcmp>:
   b8310:	b510      	push	{r4, lr}
   b8312:	3901      	subs	r1, #1
   b8314:	4402      	add	r2, r0
   b8316:	4290      	cmp	r0, r2
   b8318:	d101      	bne.n	b831e <memcmp+0xe>
   b831a:	2000      	movs	r0, #0
   b831c:	e005      	b.n	b832a <memcmp+0x1a>
   b831e:	7803      	ldrb	r3, [r0, #0]
   b8320:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8324:	42a3      	cmp	r3, r4
   b8326:	d001      	beq.n	b832c <memcmp+0x1c>
   b8328:	1b18      	subs	r0, r3, r4
   b832a:	bd10      	pop	{r4, pc}
   b832c:	3001      	adds	r0, #1
   b832e:	e7f2      	b.n	b8316 <memcmp+0x6>

000b8330 <memcpy>:
   b8330:	440a      	add	r2, r1
   b8332:	4291      	cmp	r1, r2
   b8334:	f100 33ff 	add.w	r3, r0, #4294967295
   b8338:	d100      	bne.n	b833c <memcpy+0xc>
   b833a:	4770      	bx	lr
   b833c:	b510      	push	{r4, lr}
   b833e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8342:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8346:	4291      	cmp	r1, r2
   b8348:	d1f9      	bne.n	b833e <memcpy+0xe>
   b834a:	bd10      	pop	{r4, pc}

000b834c <memmove>:
   b834c:	4288      	cmp	r0, r1
   b834e:	b510      	push	{r4, lr}
   b8350:	eb01 0402 	add.w	r4, r1, r2
   b8354:	d902      	bls.n	b835c <memmove+0x10>
   b8356:	4284      	cmp	r4, r0
   b8358:	4623      	mov	r3, r4
   b835a:	d807      	bhi.n	b836c <memmove+0x20>
   b835c:	1e43      	subs	r3, r0, #1
   b835e:	42a1      	cmp	r1, r4
   b8360:	d008      	beq.n	b8374 <memmove+0x28>
   b8362:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8366:	f803 2f01 	strb.w	r2, [r3, #1]!
   b836a:	e7f8      	b.n	b835e <memmove+0x12>
   b836c:	4402      	add	r2, r0
   b836e:	4601      	mov	r1, r0
   b8370:	428a      	cmp	r2, r1
   b8372:	d100      	bne.n	b8376 <memmove+0x2a>
   b8374:	bd10      	pop	{r4, pc}
   b8376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b837a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b837e:	e7f7      	b.n	b8370 <memmove+0x24>

000b8380 <memset>:
   b8380:	4402      	add	r2, r0
   b8382:	4603      	mov	r3, r0
   b8384:	4293      	cmp	r3, r2
   b8386:	d100      	bne.n	b838a <memset+0xa>
   b8388:	4770      	bx	lr
   b838a:	f803 1b01 	strb.w	r1, [r3], #1
   b838e:	e7f9      	b.n	b8384 <memset+0x4>

000b8390 <srand>:
   b8390:	b538      	push	{r3, r4, r5, lr}
   b8392:	4b10      	ldr	r3, [pc, #64]	; (b83d4 <srand+0x44>)
   b8394:	681d      	ldr	r5, [r3, #0]
   b8396:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8398:	4604      	mov	r4, r0
   b839a:	b9b3      	cbnz	r3, b83ca <srand+0x3a>
   b839c:	2018      	movs	r0, #24
   b839e:	f7fd ff23 	bl	b61e8 <malloc>
   b83a2:	4602      	mov	r2, r0
   b83a4:	63a8      	str	r0, [r5, #56]	; 0x38
   b83a6:	b920      	cbnz	r0, b83b2 <srand+0x22>
   b83a8:	4b0b      	ldr	r3, [pc, #44]	; (b83d8 <srand+0x48>)
   b83aa:	480c      	ldr	r0, [pc, #48]	; (b83dc <srand+0x4c>)
   b83ac:	2142      	movs	r1, #66	; 0x42
   b83ae:	f7fd ff5b 	bl	b6268 <__assert_func>
   b83b2:	490b      	ldr	r1, [pc, #44]	; (b83e0 <srand+0x50>)
   b83b4:	4b0b      	ldr	r3, [pc, #44]	; (b83e4 <srand+0x54>)
   b83b6:	e9c0 1300 	strd	r1, r3, [r0]
   b83ba:	4b0b      	ldr	r3, [pc, #44]	; (b83e8 <srand+0x58>)
   b83bc:	6083      	str	r3, [r0, #8]
   b83be:	230b      	movs	r3, #11
   b83c0:	8183      	strh	r3, [r0, #12]
   b83c2:	2100      	movs	r1, #0
   b83c4:	2001      	movs	r0, #1
   b83c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b83ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b83cc:	2200      	movs	r2, #0
   b83ce:	611c      	str	r4, [r3, #16]
   b83d0:	615a      	str	r2, [r3, #20]
   b83d2:	bd38      	pop	{r3, r4, r5, pc}
   b83d4:	2003cd04 	.word	0x2003cd04
   b83d8:	000bab8d 	.word	0x000bab8d
   b83dc:	000baba4 	.word	0x000baba4
   b83e0:	abcd330e 	.word	0xabcd330e
   b83e4:	e66d1234 	.word	0xe66d1234
   b83e8:	0005deec 	.word	0x0005deec

000b83ec <strcpy>:
   b83ec:	4603      	mov	r3, r0
   b83ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   b83f2:	f803 2b01 	strb.w	r2, [r3], #1
   b83f6:	2a00      	cmp	r2, #0
   b83f8:	d1f9      	bne.n	b83ee <strcpy+0x2>
   b83fa:	4770      	bx	lr

000b83fc <strdup>:
   b83fc:	4b02      	ldr	r3, [pc, #8]	; (b8408 <strdup+0xc>)
   b83fe:	4601      	mov	r1, r0
   b8400:	6818      	ldr	r0, [r3, #0]
   b8402:	f000 b803 	b.w	b840c <_strdup_r>
   b8406:	bf00      	nop
   b8408:	2003cd04 	.word	0x2003cd04

000b840c <_strdup_r>:
   b840c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b840e:	4604      	mov	r4, r0
   b8410:	4608      	mov	r0, r1
   b8412:	460d      	mov	r5, r1
   b8414:	f7fc fb5e 	bl	b4ad4 <strlen>
   b8418:	1c42      	adds	r2, r0, #1
   b841a:	4611      	mov	r1, r2
   b841c:	4620      	mov	r0, r4
   b841e:	9201      	str	r2, [sp, #4]
   b8420:	f7fd ff12 	bl	b6248 <_malloc_r>
   b8424:	4604      	mov	r4, r0
   b8426:	b118      	cbz	r0, b8430 <_strdup_r+0x24>
   b8428:	9a01      	ldr	r2, [sp, #4]
   b842a:	4629      	mov	r1, r5
   b842c:	f7ff ff80 	bl	b8330 <memcpy>
   b8430:	4620      	mov	r0, r4
   b8432:	b003      	add	sp, #12
   b8434:	bd30      	pop	{r4, r5, pc}

000b8436 <strncmp>:
   b8436:	b510      	push	{r4, lr}
   b8438:	b17a      	cbz	r2, b845a <strncmp+0x24>
   b843a:	4603      	mov	r3, r0
   b843c:	3901      	subs	r1, #1
   b843e:	1884      	adds	r4, r0, r2
   b8440:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8444:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8448:	4290      	cmp	r0, r2
   b844a:	d101      	bne.n	b8450 <strncmp+0x1a>
   b844c:	42a3      	cmp	r3, r4
   b844e:	d101      	bne.n	b8454 <strncmp+0x1e>
   b8450:	1a80      	subs	r0, r0, r2
   b8452:	bd10      	pop	{r4, pc}
   b8454:	2800      	cmp	r0, #0
   b8456:	d1f3      	bne.n	b8440 <strncmp+0xa>
   b8458:	e7fa      	b.n	b8450 <strncmp+0x1a>
   b845a:	4610      	mov	r0, r2
   b845c:	e7f9      	b.n	b8452 <strncmp+0x1c>

000b845e <sulp>:
   b845e:	b570      	push	{r4, r5, r6, lr}
   b8460:	4604      	mov	r4, r0
   b8462:	460d      	mov	r5, r1
   b8464:	ec45 4b10 	vmov	d0, r4, r5
   b8468:	4616      	mov	r6, r2
   b846a:	f001 fe5d 	bl	ba128 <__ulp>
   b846e:	ec51 0b10 	vmov	r0, r1, d0
   b8472:	b17e      	cbz	r6, b8494 <sulp+0x36>
   b8474:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8478:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b847c:	2b00      	cmp	r3, #0
   b847e:	dd09      	ble.n	b8494 <sulp+0x36>
   b8480:	051b      	lsls	r3, r3, #20
   b8482:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8486:	2400      	movs	r4, #0
   b8488:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b848c:	4622      	mov	r2, r4
   b848e:	462b      	mov	r3, r5
   b8490:	f7fb ff82 	bl	b4398 <__aeabi_dmul>
   b8494:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8498 <_strtod_l>:
   b8498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b849c:	ed2d 8b02 	vpush	{d8}
   b84a0:	b09d      	sub	sp, #116	; 0x74
   b84a2:	461f      	mov	r7, r3
   b84a4:	2300      	movs	r3, #0
   b84a6:	9318      	str	r3, [sp, #96]	; 0x60
   b84a8:	4ba2      	ldr	r3, [pc, #648]	; (b8734 <_strtod_l+0x29c>)
   b84aa:	9213      	str	r2, [sp, #76]	; 0x4c
   b84ac:	681b      	ldr	r3, [r3, #0]
   b84ae:	9305      	str	r3, [sp, #20]
   b84b0:	4604      	mov	r4, r0
   b84b2:	4618      	mov	r0, r3
   b84b4:	4688      	mov	r8, r1
   b84b6:	f7fc fb0d 	bl	b4ad4 <strlen>
   b84ba:	f04f 0a00 	mov.w	sl, #0
   b84be:	4605      	mov	r5, r0
   b84c0:	f04f 0b00 	mov.w	fp, #0
   b84c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b84c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b84ca:	781a      	ldrb	r2, [r3, #0]
   b84cc:	2a2b      	cmp	r2, #43	; 0x2b
   b84ce:	d04e      	beq.n	b856e <_strtod_l+0xd6>
   b84d0:	d83b      	bhi.n	b854a <_strtod_l+0xb2>
   b84d2:	2a0d      	cmp	r2, #13
   b84d4:	d834      	bhi.n	b8540 <_strtod_l+0xa8>
   b84d6:	2a08      	cmp	r2, #8
   b84d8:	d834      	bhi.n	b8544 <_strtod_l+0xac>
   b84da:	2a00      	cmp	r2, #0
   b84dc:	d03e      	beq.n	b855c <_strtod_l+0xc4>
   b84de:	2300      	movs	r3, #0
   b84e0:	930a      	str	r3, [sp, #40]	; 0x28
   b84e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b84e4:	7833      	ldrb	r3, [r6, #0]
   b84e6:	2b30      	cmp	r3, #48	; 0x30
   b84e8:	f040 80b0 	bne.w	b864c <_strtod_l+0x1b4>
   b84ec:	7873      	ldrb	r3, [r6, #1]
   b84ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b84f2:	2b58      	cmp	r3, #88	; 0x58
   b84f4:	d168      	bne.n	b85c8 <_strtod_l+0x130>
   b84f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b84f8:	9301      	str	r3, [sp, #4]
   b84fa:	ab18      	add	r3, sp, #96	; 0x60
   b84fc:	9702      	str	r7, [sp, #8]
   b84fe:	9300      	str	r3, [sp, #0]
   b8500:	4a8d      	ldr	r2, [pc, #564]	; (b8738 <_strtod_l+0x2a0>)
   b8502:	ab19      	add	r3, sp, #100	; 0x64
   b8504:	a917      	add	r1, sp, #92	; 0x5c
   b8506:	4620      	mov	r0, r4
   b8508:	f000 ff7e 	bl	b9408 <__gethex>
   b850c:	f010 0707 	ands.w	r7, r0, #7
   b8510:	4605      	mov	r5, r0
   b8512:	d005      	beq.n	b8520 <_strtod_l+0x88>
   b8514:	2f06      	cmp	r7, #6
   b8516:	d12c      	bne.n	b8572 <_strtod_l+0xda>
   b8518:	3601      	adds	r6, #1
   b851a:	2300      	movs	r3, #0
   b851c:	9617      	str	r6, [sp, #92]	; 0x5c
   b851e:	930a      	str	r3, [sp, #40]	; 0x28
   b8520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8522:	2b00      	cmp	r3, #0
   b8524:	f040 8590 	bne.w	b9048 <_strtod_l+0xbb0>
   b8528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b852a:	b1eb      	cbz	r3, b8568 <_strtod_l+0xd0>
   b852c:	4652      	mov	r2, sl
   b852e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b8532:	ec43 2b10 	vmov	d0, r2, r3
   b8536:	b01d      	add	sp, #116	; 0x74
   b8538:	ecbd 8b02 	vpop	{d8}
   b853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8540:	2a20      	cmp	r2, #32
   b8542:	d1cc      	bne.n	b84de <_strtod_l+0x46>
   b8544:	3301      	adds	r3, #1
   b8546:	9317      	str	r3, [sp, #92]	; 0x5c
   b8548:	e7be      	b.n	b84c8 <_strtod_l+0x30>
   b854a:	2a2d      	cmp	r2, #45	; 0x2d
   b854c:	d1c7      	bne.n	b84de <_strtod_l+0x46>
   b854e:	2201      	movs	r2, #1
   b8550:	920a      	str	r2, [sp, #40]	; 0x28
   b8552:	1c5a      	adds	r2, r3, #1
   b8554:	9217      	str	r2, [sp, #92]	; 0x5c
   b8556:	785b      	ldrb	r3, [r3, #1]
   b8558:	2b00      	cmp	r3, #0
   b855a:	d1c2      	bne.n	b84e2 <_strtod_l+0x4a>
   b855c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b855e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8562:	2b00      	cmp	r3, #0
   b8564:	f040 856e 	bne.w	b9044 <_strtod_l+0xbac>
   b8568:	4652      	mov	r2, sl
   b856a:	465b      	mov	r3, fp
   b856c:	e7e1      	b.n	b8532 <_strtod_l+0x9a>
   b856e:	2200      	movs	r2, #0
   b8570:	e7ee      	b.n	b8550 <_strtod_l+0xb8>
   b8572:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8574:	b13a      	cbz	r2, b8586 <_strtod_l+0xee>
   b8576:	2135      	movs	r1, #53	; 0x35
   b8578:	a81a      	add	r0, sp, #104	; 0x68
   b857a:	f001 fee0 	bl	ba33e <__copybits>
   b857e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8580:	4620      	mov	r0, r4
   b8582:	f001 fa9f 	bl	b9ac4 <_Bfree>
   b8586:	3f01      	subs	r7, #1
   b8588:	2f04      	cmp	r7, #4
   b858a:	d806      	bhi.n	b859a <_strtod_l+0x102>
   b858c:	e8df f007 	tbb	[pc, r7]
   b8590:	1714030a 	.word	0x1714030a
   b8594:	0a          	.byte	0x0a
   b8595:	00          	.byte	0x00
   b8596:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b859a:	0728      	lsls	r0, r5, #28
   b859c:	d5c0      	bpl.n	b8520 <_strtod_l+0x88>
   b859e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b85a2:	e7bd      	b.n	b8520 <_strtod_l+0x88>
   b85a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b85a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b85aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b85ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b85b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b85b6:	e7f0      	b.n	b859a <_strtod_l+0x102>
   b85b8:	f8df b180 	ldr.w	fp, [pc, #384]	; b873c <_strtod_l+0x2a4>
   b85bc:	e7ed      	b.n	b859a <_strtod_l+0x102>
   b85be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b85c2:	f04f 3aff 	mov.w	sl, #4294967295
   b85c6:	e7e8      	b.n	b859a <_strtod_l+0x102>
   b85c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b85ca:	1c5a      	adds	r2, r3, #1
   b85cc:	9217      	str	r2, [sp, #92]	; 0x5c
   b85ce:	785b      	ldrb	r3, [r3, #1]
   b85d0:	2b30      	cmp	r3, #48	; 0x30
   b85d2:	d0f9      	beq.n	b85c8 <_strtod_l+0x130>
   b85d4:	2b00      	cmp	r3, #0
   b85d6:	d0a3      	beq.n	b8520 <_strtod_l+0x88>
   b85d8:	2301      	movs	r3, #1
   b85da:	f04f 0900 	mov.w	r9, #0
   b85de:	9304      	str	r3, [sp, #16]
   b85e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b85e2:	9308      	str	r3, [sp, #32]
   b85e4:	f8cd 901c 	str.w	r9, [sp, #28]
   b85e8:	464f      	mov	r7, r9
   b85ea:	220a      	movs	r2, #10
   b85ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b85ee:	7806      	ldrb	r6, [r0, #0]
   b85f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b85f4:	b2d9      	uxtb	r1, r3
   b85f6:	2909      	cmp	r1, #9
   b85f8:	d92a      	bls.n	b8650 <_strtod_l+0x1b8>
   b85fa:	9905      	ldr	r1, [sp, #20]
   b85fc:	462a      	mov	r2, r5
   b85fe:	f7ff ff1a 	bl	b8436 <strncmp>
   b8602:	b398      	cbz	r0, b866c <_strtod_l+0x1d4>
   b8604:	2000      	movs	r0, #0
   b8606:	4632      	mov	r2, r6
   b8608:	463d      	mov	r5, r7
   b860a:	9005      	str	r0, [sp, #20]
   b860c:	4603      	mov	r3, r0
   b860e:	2a65      	cmp	r2, #101	; 0x65
   b8610:	d001      	beq.n	b8616 <_strtod_l+0x17e>
   b8612:	2a45      	cmp	r2, #69	; 0x45
   b8614:	d118      	bne.n	b8648 <_strtod_l+0x1b0>
   b8616:	b91d      	cbnz	r5, b8620 <_strtod_l+0x188>
   b8618:	9a04      	ldr	r2, [sp, #16]
   b861a:	4302      	orrs	r2, r0
   b861c:	d09e      	beq.n	b855c <_strtod_l+0xc4>
   b861e:	2500      	movs	r5, #0
   b8620:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b8624:	f108 0201 	add.w	r2, r8, #1
   b8628:	9217      	str	r2, [sp, #92]	; 0x5c
   b862a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b862e:	2a2b      	cmp	r2, #43	; 0x2b
   b8630:	d075      	beq.n	b871e <_strtod_l+0x286>
   b8632:	2a2d      	cmp	r2, #45	; 0x2d
   b8634:	d07b      	beq.n	b872e <_strtod_l+0x296>
   b8636:	f04f 0c00 	mov.w	ip, #0
   b863a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b863e:	2909      	cmp	r1, #9
   b8640:	f240 8082 	bls.w	b8748 <_strtod_l+0x2b0>
   b8644:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8648:	2600      	movs	r6, #0
   b864a:	e09d      	b.n	b8788 <_strtod_l+0x2f0>
   b864c:	2300      	movs	r3, #0
   b864e:	e7c4      	b.n	b85da <_strtod_l+0x142>
   b8650:	2f08      	cmp	r7, #8
   b8652:	bfd8      	it	le
   b8654:	9907      	ldrle	r1, [sp, #28]
   b8656:	f100 0001 	add.w	r0, r0, #1
   b865a:	bfda      	itte	le
   b865c:	fb02 3301 	mlale	r3, r2, r1, r3
   b8660:	9307      	strle	r3, [sp, #28]
   b8662:	fb02 3909 	mlagt	r9, r2, r9, r3
   b8666:	3701      	adds	r7, #1
   b8668:	9017      	str	r0, [sp, #92]	; 0x5c
   b866a:	e7bf      	b.n	b85ec <_strtod_l+0x154>
   b866c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b866e:	195a      	adds	r2, r3, r5
   b8670:	9217      	str	r2, [sp, #92]	; 0x5c
   b8672:	5d5a      	ldrb	r2, [r3, r5]
   b8674:	2f00      	cmp	r7, #0
   b8676:	d037      	beq.n	b86e8 <_strtod_l+0x250>
   b8678:	9005      	str	r0, [sp, #20]
   b867a:	463d      	mov	r5, r7
   b867c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8680:	2b09      	cmp	r3, #9
   b8682:	d912      	bls.n	b86aa <_strtod_l+0x212>
   b8684:	2301      	movs	r3, #1
   b8686:	e7c2      	b.n	b860e <_strtod_l+0x176>
   b8688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b868a:	1c5a      	adds	r2, r3, #1
   b868c:	9217      	str	r2, [sp, #92]	; 0x5c
   b868e:	785a      	ldrb	r2, [r3, #1]
   b8690:	3001      	adds	r0, #1
   b8692:	2a30      	cmp	r2, #48	; 0x30
   b8694:	d0f8      	beq.n	b8688 <_strtod_l+0x1f0>
   b8696:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b869a:	2b08      	cmp	r3, #8
   b869c:	f200 84d9 	bhi.w	b9052 <_strtod_l+0xbba>
   b86a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86a2:	9005      	str	r0, [sp, #20]
   b86a4:	2000      	movs	r0, #0
   b86a6:	9308      	str	r3, [sp, #32]
   b86a8:	4605      	mov	r5, r0
   b86aa:	3a30      	subs	r2, #48	; 0x30
   b86ac:	f100 0301 	add.w	r3, r0, #1
   b86b0:	d014      	beq.n	b86dc <_strtod_l+0x244>
   b86b2:	9905      	ldr	r1, [sp, #20]
   b86b4:	4419      	add	r1, r3
   b86b6:	9105      	str	r1, [sp, #20]
   b86b8:	462b      	mov	r3, r5
   b86ba:	eb00 0e05 	add.w	lr, r0, r5
   b86be:	210a      	movs	r1, #10
   b86c0:	4573      	cmp	r3, lr
   b86c2:	d113      	bne.n	b86ec <_strtod_l+0x254>
   b86c4:	182b      	adds	r3, r5, r0
   b86c6:	2b08      	cmp	r3, #8
   b86c8:	f105 0501 	add.w	r5, r5, #1
   b86cc:	4405      	add	r5, r0
   b86ce:	dc1c      	bgt.n	b870a <_strtod_l+0x272>
   b86d0:	9907      	ldr	r1, [sp, #28]
   b86d2:	230a      	movs	r3, #10
   b86d4:	fb03 2301 	mla	r3, r3, r1, r2
   b86d8:	9307      	str	r3, [sp, #28]
   b86da:	2300      	movs	r3, #0
   b86dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b86de:	1c51      	adds	r1, r2, #1
   b86e0:	9117      	str	r1, [sp, #92]	; 0x5c
   b86e2:	7852      	ldrb	r2, [r2, #1]
   b86e4:	4618      	mov	r0, r3
   b86e6:	e7c9      	b.n	b867c <_strtod_l+0x1e4>
   b86e8:	4638      	mov	r0, r7
   b86ea:	e7d2      	b.n	b8692 <_strtod_l+0x1fa>
   b86ec:	2b08      	cmp	r3, #8
   b86ee:	dc04      	bgt.n	b86fa <_strtod_l+0x262>
   b86f0:	9e07      	ldr	r6, [sp, #28]
   b86f2:	434e      	muls	r6, r1
   b86f4:	9607      	str	r6, [sp, #28]
   b86f6:	3301      	adds	r3, #1
   b86f8:	e7e2      	b.n	b86c0 <_strtod_l+0x228>
   b86fa:	f103 0c01 	add.w	ip, r3, #1
   b86fe:	f1bc 0f10 	cmp.w	ip, #16
   b8702:	bfd8      	it	le
   b8704:	fb01 f909 	mulle.w	r9, r1, r9
   b8708:	e7f5      	b.n	b86f6 <_strtod_l+0x25e>
   b870a:	2d10      	cmp	r5, #16
   b870c:	bfdc      	itt	le
   b870e:	230a      	movle	r3, #10
   b8710:	fb03 2909 	mlale	r9, r3, r9, r2
   b8714:	e7e1      	b.n	b86da <_strtod_l+0x242>
   b8716:	2300      	movs	r3, #0
   b8718:	9305      	str	r3, [sp, #20]
   b871a:	2301      	movs	r3, #1
   b871c:	e77c      	b.n	b8618 <_strtod_l+0x180>
   b871e:	f04f 0c00 	mov.w	ip, #0
   b8722:	f108 0202 	add.w	r2, r8, #2
   b8726:	9217      	str	r2, [sp, #92]	; 0x5c
   b8728:	f898 2002 	ldrb.w	r2, [r8, #2]
   b872c:	e785      	b.n	b863a <_strtod_l+0x1a2>
   b872e:	f04f 0c01 	mov.w	ip, #1
   b8732:	e7f6      	b.n	b8722 <_strtod_l+0x28a>
   b8734:	000bae18 	.word	0x000bae18
   b8738:	000bac30 	.word	0x000bac30
   b873c:	7ff00000 	.word	0x7ff00000
   b8740:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8742:	1c51      	adds	r1, r2, #1
   b8744:	9117      	str	r1, [sp, #92]	; 0x5c
   b8746:	7852      	ldrb	r2, [r2, #1]
   b8748:	2a30      	cmp	r2, #48	; 0x30
   b874a:	d0f9      	beq.n	b8740 <_strtod_l+0x2a8>
   b874c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8750:	2908      	cmp	r1, #8
   b8752:	f63f af79 	bhi.w	b8648 <_strtod_l+0x1b0>
   b8756:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b875a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b875c:	9206      	str	r2, [sp, #24]
   b875e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8760:	1c51      	adds	r1, r2, #1
   b8762:	9117      	str	r1, [sp, #92]	; 0x5c
   b8764:	7852      	ldrb	r2, [r2, #1]
   b8766:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b876a:	2e09      	cmp	r6, #9
   b876c:	d937      	bls.n	b87de <_strtod_l+0x346>
   b876e:	9e06      	ldr	r6, [sp, #24]
   b8770:	1b89      	subs	r1, r1, r6
   b8772:	2908      	cmp	r1, #8
   b8774:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8778:	dc02      	bgt.n	b8780 <_strtod_l+0x2e8>
   b877a:	4576      	cmp	r6, lr
   b877c:	bfa8      	it	ge
   b877e:	4676      	movge	r6, lr
   b8780:	f1bc 0f00 	cmp.w	ip, #0
   b8784:	d000      	beq.n	b8788 <_strtod_l+0x2f0>
   b8786:	4276      	negs	r6, r6
   b8788:	2d00      	cmp	r5, #0
   b878a:	d14d      	bne.n	b8828 <_strtod_l+0x390>
   b878c:	9904      	ldr	r1, [sp, #16]
   b878e:	4301      	orrs	r1, r0
   b8790:	f47f aec6 	bne.w	b8520 <_strtod_l+0x88>
   b8794:	2b00      	cmp	r3, #0
   b8796:	f47f aee1 	bne.w	b855c <_strtod_l+0xc4>
   b879a:	2a69      	cmp	r2, #105	; 0x69
   b879c:	d027      	beq.n	b87ee <_strtod_l+0x356>
   b879e:	dc24      	bgt.n	b87ea <_strtod_l+0x352>
   b87a0:	2a49      	cmp	r2, #73	; 0x49
   b87a2:	d024      	beq.n	b87ee <_strtod_l+0x356>
   b87a4:	2a4e      	cmp	r2, #78	; 0x4e
   b87a6:	f47f aed9 	bne.w	b855c <_strtod_l+0xc4>
   b87aa:	499f      	ldr	r1, [pc, #636]	; (b8a28 <_strtod_l+0x590>)
   b87ac:	a817      	add	r0, sp, #92	; 0x5c
   b87ae:	f001 f883 	bl	b98b8 <__match>
   b87b2:	2800      	cmp	r0, #0
   b87b4:	f43f aed2 	beq.w	b855c <_strtod_l+0xc4>
   b87b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b87ba:	781b      	ldrb	r3, [r3, #0]
   b87bc:	2b28      	cmp	r3, #40	; 0x28
   b87be:	d12d      	bne.n	b881c <_strtod_l+0x384>
   b87c0:	499a      	ldr	r1, [pc, #616]	; (b8a2c <_strtod_l+0x594>)
   b87c2:	aa1a      	add	r2, sp, #104	; 0x68
   b87c4:	a817      	add	r0, sp, #92	; 0x5c
   b87c6:	f001 f88b 	bl	b98e0 <__hexnan>
   b87ca:	2805      	cmp	r0, #5
   b87cc:	d126      	bne.n	b881c <_strtod_l+0x384>
   b87ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b87d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b87d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b87d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b87dc:	e6a0      	b.n	b8520 <_strtod_l+0x88>
   b87de:	210a      	movs	r1, #10
   b87e0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b87e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b87e8:	e7b9      	b.n	b875e <_strtod_l+0x2c6>
   b87ea:	2a6e      	cmp	r2, #110	; 0x6e
   b87ec:	e7db      	b.n	b87a6 <_strtod_l+0x30e>
   b87ee:	4990      	ldr	r1, [pc, #576]	; (b8a30 <_strtod_l+0x598>)
   b87f0:	a817      	add	r0, sp, #92	; 0x5c
   b87f2:	f001 f861 	bl	b98b8 <__match>
   b87f6:	2800      	cmp	r0, #0
   b87f8:	f43f aeb0 	beq.w	b855c <_strtod_l+0xc4>
   b87fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b87fe:	498d      	ldr	r1, [pc, #564]	; (b8a34 <_strtod_l+0x59c>)
   b8800:	3b01      	subs	r3, #1
   b8802:	a817      	add	r0, sp, #92	; 0x5c
   b8804:	9317      	str	r3, [sp, #92]	; 0x5c
   b8806:	f001 f857 	bl	b98b8 <__match>
   b880a:	b910      	cbnz	r0, b8812 <_strtod_l+0x37a>
   b880c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b880e:	3301      	adds	r3, #1
   b8810:	9317      	str	r3, [sp, #92]	; 0x5c
   b8812:	f8df b230 	ldr.w	fp, [pc, #560]	; b8a44 <_strtod_l+0x5ac>
   b8816:	f04f 0a00 	mov.w	sl, #0
   b881a:	e681      	b.n	b8520 <_strtod_l+0x88>
   b881c:	4886      	ldr	r0, [pc, #536]	; (b8a38 <_strtod_l+0x5a0>)
   b881e:	f001 fde3 	bl	ba3e8 <nan>
   b8822:	ec5b ab10 	vmov	sl, fp, d0
   b8826:	e67b      	b.n	b8520 <_strtod_l+0x88>
   b8828:	9b05      	ldr	r3, [sp, #20]
   b882a:	9807      	ldr	r0, [sp, #28]
   b882c:	1af3      	subs	r3, r6, r3
   b882e:	2f00      	cmp	r7, #0
   b8830:	bf08      	it	eq
   b8832:	462f      	moveq	r7, r5
   b8834:	2d10      	cmp	r5, #16
   b8836:	9306      	str	r3, [sp, #24]
   b8838:	46a8      	mov	r8, r5
   b883a:	bfa8      	it	ge
   b883c:	f04f 0810 	movge.w	r8, #16
   b8840:	f7fb fd30 	bl	b42a4 <__aeabi_ui2d>
   b8844:	2d09      	cmp	r5, #9
   b8846:	4682      	mov	sl, r0
   b8848:	468b      	mov	fp, r1
   b884a:	dd13      	ble.n	b8874 <_strtod_l+0x3dc>
   b884c:	4b7b      	ldr	r3, [pc, #492]	; (b8a3c <_strtod_l+0x5a4>)
   b884e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b8852:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b8856:	f7fb fd9f 	bl	b4398 <__aeabi_dmul>
   b885a:	4682      	mov	sl, r0
   b885c:	4648      	mov	r0, r9
   b885e:	468b      	mov	fp, r1
   b8860:	f7fb fd20 	bl	b42a4 <__aeabi_ui2d>
   b8864:	4602      	mov	r2, r0
   b8866:	460b      	mov	r3, r1
   b8868:	4650      	mov	r0, sl
   b886a:	4659      	mov	r1, fp
   b886c:	f7fb fbde 	bl	b402c <__adddf3>
   b8870:	4682      	mov	sl, r0
   b8872:	468b      	mov	fp, r1
   b8874:	2d0f      	cmp	r5, #15
   b8876:	dc38      	bgt.n	b88ea <_strtod_l+0x452>
   b8878:	9b06      	ldr	r3, [sp, #24]
   b887a:	2b00      	cmp	r3, #0
   b887c:	f43f ae50 	beq.w	b8520 <_strtod_l+0x88>
   b8880:	dd24      	ble.n	b88cc <_strtod_l+0x434>
   b8882:	2b16      	cmp	r3, #22
   b8884:	dc0b      	bgt.n	b889e <_strtod_l+0x406>
   b8886:	496d      	ldr	r1, [pc, #436]	; (b8a3c <_strtod_l+0x5a4>)
   b8888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b888c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8890:	4652      	mov	r2, sl
   b8892:	465b      	mov	r3, fp
   b8894:	f7fb fd80 	bl	b4398 <__aeabi_dmul>
   b8898:	4682      	mov	sl, r0
   b889a:	468b      	mov	fp, r1
   b889c:	e640      	b.n	b8520 <_strtod_l+0x88>
   b889e:	9a06      	ldr	r2, [sp, #24]
   b88a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b88a4:	4293      	cmp	r3, r2
   b88a6:	db20      	blt.n	b88ea <_strtod_l+0x452>
   b88a8:	4c64      	ldr	r4, [pc, #400]	; (b8a3c <_strtod_l+0x5a4>)
   b88aa:	f1c5 050f 	rsb	r5, r5, #15
   b88ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b88b2:	4652      	mov	r2, sl
   b88b4:	465b      	mov	r3, fp
   b88b6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b88ba:	f7fb fd6d 	bl	b4398 <__aeabi_dmul>
   b88be:	9b06      	ldr	r3, [sp, #24]
   b88c0:	1b5d      	subs	r5, r3, r5
   b88c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b88c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b88ca:	e7e3      	b.n	b8894 <_strtod_l+0x3fc>
   b88cc:	9b06      	ldr	r3, [sp, #24]
   b88ce:	3316      	adds	r3, #22
   b88d0:	db0b      	blt.n	b88ea <_strtod_l+0x452>
   b88d2:	9b05      	ldr	r3, [sp, #20]
   b88d4:	1b9e      	subs	r6, r3, r6
   b88d6:	4b59      	ldr	r3, [pc, #356]	; (b8a3c <_strtod_l+0x5a4>)
   b88d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b88dc:	e9d6 2300 	ldrd	r2, r3, [r6]
   b88e0:	4650      	mov	r0, sl
   b88e2:	4659      	mov	r1, fp
   b88e4:	f7fb fe82 	bl	b45ec <__aeabi_ddiv>
   b88e8:	e7d6      	b.n	b8898 <_strtod_l+0x400>
   b88ea:	9b06      	ldr	r3, [sp, #24]
   b88ec:	eba5 0808 	sub.w	r8, r5, r8
   b88f0:	4498      	add	r8, r3
   b88f2:	f1b8 0f00 	cmp.w	r8, #0
   b88f6:	dd74      	ble.n	b89e2 <_strtod_l+0x54a>
   b88f8:	f018 030f 	ands.w	r3, r8, #15
   b88fc:	d00a      	beq.n	b8914 <_strtod_l+0x47c>
   b88fe:	494f      	ldr	r1, [pc, #316]	; (b8a3c <_strtod_l+0x5a4>)
   b8900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8904:	4652      	mov	r2, sl
   b8906:	465b      	mov	r3, fp
   b8908:	e9d1 0100 	ldrd	r0, r1, [r1]
   b890c:	f7fb fd44 	bl	b4398 <__aeabi_dmul>
   b8910:	4682      	mov	sl, r0
   b8912:	468b      	mov	fp, r1
   b8914:	f038 080f 	bics.w	r8, r8, #15
   b8918:	d04f      	beq.n	b89ba <_strtod_l+0x522>
   b891a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b891e:	dd22      	ble.n	b8966 <_strtod_l+0x4ce>
   b8920:	2500      	movs	r5, #0
   b8922:	462e      	mov	r6, r5
   b8924:	9507      	str	r5, [sp, #28]
   b8926:	9505      	str	r5, [sp, #20]
   b8928:	2322      	movs	r3, #34	; 0x22
   b892a:	f8df b118 	ldr.w	fp, [pc, #280]	; b8a44 <_strtod_l+0x5ac>
   b892e:	6023      	str	r3, [r4, #0]
   b8930:	f04f 0a00 	mov.w	sl, #0
   b8934:	9b07      	ldr	r3, [sp, #28]
   b8936:	2b00      	cmp	r3, #0
   b8938:	f43f adf2 	beq.w	b8520 <_strtod_l+0x88>
   b893c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b893e:	4620      	mov	r0, r4
   b8940:	f001 f8c0 	bl	b9ac4 <_Bfree>
   b8944:	9905      	ldr	r1, [sp, #20]
   b8946:	4620      	mov	r0, r4
   b8948:	f001 f8bc 	bl	b9ac4 <_Bfree>
   b894c:	4631      	mov	r1, r6
   b894e:	4620      	mov	r0, r4
   b8950:	f001 f8b8 	bl	b9ac4 <_Bfree>
   b8954:	9907      	ldr	r1, [sp, #28]
   b8956:	4620      	mov	r0, r4
   b8958:	f001 f8b4 	bl	b9ac4 <_Bfree>
   b895c:	4629      	mov	r1, r5
   b895e:	4620      	mov	r0, r4
   b8960:	f001 f8b0 	bl	b9ac4 <_Bfree>
   b8964:	e5dc      	b.n	b8520 <_strtod_l+0x88>
   b8966:	4b36      	ldr	r3, [pc, #216]	; (b8a40 <_strtod_l+0x5a8>)
   b8968:	9304      	str	r3, [sp, #16]
   b896a:	2300      	movs	r3, #0
   b896c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8970:	4650      	mov	r0, sl
   b8972:	4659      	mov	r1, fp
   b8974:	4699      	mov	r9, r3
   b8976:	f1b8 0f01 	cmp.w	r8, #1
   b897a:	dc21      	bgt.n	b89c0 <_strtod_l+0x528>
   b897c:	b10b      	cbz	r3, b8982 <_strtod_l+0x4ea>
   b897e:	4682      	mov	sl, r0
   b8980:	468b      	mov	fp, r1
   b8982:	4b2f      	ldr	r3, [pc, #188]	; (b8a40 <_strtod_l+0x5a8>)
   b8984:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8988:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b898c:	4652      	mov	r2, sl
   b898e:	465b      	mov	r3, fp
   b8990:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8994:	f7fb fd00 	bl	b4398 <__aeabi_dmul>
   b8998:	4b2a      	ldr	r3, [pc, #168]	; (b8a44 <_strtod_l+0x5ac>)
   b899a:	460a      	mov	r2, r1
   b899c:	400b      	ands	r3, r1
   b899e:	492a      	ldr	r1, [pc, #168]	; (b8a48 <_strtod_l+0x5b0>)
   b89a0:	428b      	cmp	r3, r1
   b89a2:	4682      	mov	sl, r0
   b89a4:	d8bc      	bhi.n	b8920 <_strtod_l+0x488>
   b89a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b89aa:	428b      	cmp	r3, r1
   b89ac:	bf86      	itte	hi
   b89ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8a4c <_strtod_l+0x5b4>
   b89b2:	f04f 3aff 	movhi.w	sl, #4294967295
   b89b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b89ba:	2300      	movs	r3, #0
   b89bc:	9304      	str	r3, [sp, #16]
   b89be:	e084      	b.n	b8aca <_strtod_l+0x632>
   b89c0:	f018 0f01 	tst.w	r8, #1
   b89c4:	d005      	beq.n	b89d2 <_strtod_l+0x53a>
   b89c6:	9b04      	ldr	r3, [sp, #16]
   b89c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b89cc:	f7fb fce4 	bl	b4398 <__aeabi_dmul>
   b89d0:	2301      	movs	r3, #1
   b89d2:	9a04      	ldr	r2, [sp, #16]
   b89d4:	3208      	adds	r2, #8
   b89d6:	f109 0901 	add.w	r9, r9, #1
   b89da:	ea4f 0868 	mov.w	r8, r8, asr #1
   b89de:	9204      	str	r2, [sp, #16]
   b89e0:	e7c9      	b.n	b8976 <_strtod_l+0x4de>
   b89e2:	d0ea      	beq.n	b89ba <_strtod_l+0x522>
   b89e4:	f1c8 0800 	rsb	r8, r8, #0
   b89e8:	f018 020f 	ands.w	r2, r8, #15
   b89ec:	d00a      	beq.n	b8a04 <_strtod_l+0x56c>
   b89ee:	4b13      	ldr	r3, [pc, #76]	; (b8a3c <_strtod_l+0x5a4>)
   b89f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b89f4:	4650      	mov	r0, sl
   b89f6:	4659      	mov	r1, fp
   b89f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b89fc:	f7fb fdf6 	bl	b45ec <__aeabi_ddiv>
   b8a00:	4682      	mov	sl, r0
   b8a02:	468b      	mov	fp, r1
   b8a04:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8a08:	d0d7      	beq.n	b89ba <_strtod_l+0x522>
   b8a0a:	f1b8 0f1f 	cmp.w	r8, #31
   b8a0e:	dd1f      	ble.n	b8a50 <_strtod_l+0x5b8>
   b8a10:	2500      	movs	r5, #0
   b8a12:	462e      	mov	r6, r5
   b8a14:	9507      	str	r5, [sp, #28]
   b8a16:	9505      	str	r5, [sp, #20]
   b8a18:	2322      	movs	r3, #34	; 0x22
   b8a1a:	f04f 0a00 	mov.w	sl, #0
   b8a1e:	f04f 0b00 	mov.w	fp, #0
   b8a22:	6023      	str	r3, [r4, #0]
   b8a24:	e786      	b.n	b8934 <_strtod_l+0x49c>
   b8a26:	bf00      	nop
   b8a28:	000bac2a 	.word	0x000bac2a
   b8a2c:	000bac44 	.word	0x000bac44
   b8a30:	000bac21 	.word	0x000bac21
   b8a34:	000bac24 	.word	0x000bac24
   b8a38:	000ba5c5 	.word	0x000ba5c5
   b8a3c:	000baed8 	.word	0x000baed8
   b8a40:	000baeb0 	.word	0x000baeb0
   b8a44:	7ff00000 	.word	0x7ff00000
   b8a48:	7ca00000 	.word	0x7ca00000
   b8a4c:	7fefffff 	.word	0x7fefffff
   b8a50:	f018 0310 	ands.w	r3, r8, #16
   b8a54:	bf18      	it	ne
   b8a56:	236a      	movne	r3, #106	; 0x6a
   b8a58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8e08 <_strtod_l+0x970>
   b8a5c:	9304      	str	r3, [sp, #16]
   b8a5e:	4650      	mov	r0, sl
   b8a60:	4659      	mov	r1, fp
   b8a62:	2300      	movs	r3, #0
   b8a64:	f018 0f01 	tst.w	r8, #1
   b8a68:	d004      	beq.n	b8a74 <_strtod_l+0x5dc>
   b8a6a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b8a6e:	f7fb fc93 	bl	b4398 <__aeabi_dmul>
   b8a72:	2301      	movs	r3, #1
   b8a74:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8a78:	f109 0908 	add.w	r9, r9, #8
   b8a7c:	d1f2      	bne.n	b8a64 <_strtod_l+0x5cc>
   b8a7e:	b10b      	cbz	r3, b8a84 <_strtod_l+0x5ec>
   b8a80:	4682      	mov	sl, r0
   b8a82:	468b      	mov	fp, r1
   b8a84:	9b04      	ldr	r3, [sp, #16]
   b8a86:	b1c3      	cbz	r3, b8aba <_strtod_l+0x622>
   b8a88:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b8a8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8a90:	2b00      	cmp	r3, #0
   b8a92:	4659      	mov	r1, fp
   b8a94:	dd11      	ble.n	b8aba <_strtod_l+0x622>
   b8a96:	2b1f      	cmp	r3, #31
   b8a98:	f340 8124 	ble.w	b8ce4 <_strtod_l+0x84c>
   b8a9c:	2b34      	cmp	r3, #52	; 0x34
   b8a9e:	bfde      	ittt	le
   b8aa0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8aa4:	f04f 33ff 	movle.w	r3, #4294967295
   b8aa8:	fa03 f202 	lslle.w	r2, r3, r2
   b8aac:	f04f 0a00 	mov.w	sl, #0
   b8ab0:	bfcc      	ite	gt
   b8ab2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8ab6:	ea02 0b01 	andle.w	fp, r2, r1
   b8aba:	2200      	movs	r2, #0
   b8abc:	2300      	movs	r3, #0
   b8abe:	4650      	mov	r0, sl
   b8ac0:	4659      	mov	r1, fp
   b8ac2:	f7fb fed1 	bl	b4868 <__aeabi_dcmpeq>
   b8ac6:	2800      	cmp	r0, #0
   b8ac8:	d1a2      	bne.n	b8a10 <_strtod_l+0x578>
   b8aca:	9b07      	ldr	r3, [sp, #28]
   b8acc:	9300      	str	r3, [sp, #0]
   b8ace:	9908      	ldr	r1, [sp, #32]
   b8ad0:	462b      	mov	r3, r5
   b8ad2:	463a      	mov	r2, r7
   b8ad4:	4620      	mov	r0, r4
   b8ad6:	f001 f85d 	bl	b9b94 <__s2b>
   b8ada:	9007      	str	r0, [sp, #28]
   b8adc:	2800      	cmp	r0, #0
   b8ade:	f43f af1f 	beq.w	b8920 <_strtod_l+0x488>
   b8ae2:	9b05      	ldr	r3, [sp, #20]
   b8ae4:	1b9e      	subs	r6, r3, r6
   b8ae6:	9b06      	ldr	r3, [sp, #24]
   b8ae8:	2b00      	cmp	r3, #0
   b8aea:	bfb4      	ite	lt
   b8aec:	4633      	movlt	r3, r6
   b8aee:	2300      	movge	r3, #0
   b8af0:	930c      	str	r3, [sp, #48]	; 0x30
   b8af2:	9b06      	ldr	r3, [sp, #24]
   b8af4:	2500      	movs	r5, #0
   b8af6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b8afa:	9312      	str	r3, [sp, #72]	; 0x48
   b8afc:	462e      	mov	r6, r5
   b8afe:	9b07      	ldr	r3, [sp, #28]
   b8b00:	4620      	mov	r0, r4
   b8b02:	6859      	ldr	r1, [r3, #4]
   b8b04:	f000 ff9e 	bl	b9a44 <_Balloc>
   b8b08:	9005      	str	r0, [sp, #20]
   b8b0a:	2800      	cmp	r0, #0
   b8b0c:	f43f af0c 	beq.w	b8928 <_strtod_l+0x490>
   b8b10:	9b07      	ldr	r3, [sp, #28]
   b8b12:	691a      	ldr	r2, [r3, #16]
   b8b14:	3202      	adds	r2, #2
   b8b16:	f103 010c 	add.w	r1, r3, #12
   b8b1a:	0092      	lsls	r2, r2, #2
   b8b1c:	300c      	adds	r0, #12
   b8b1e:	f7ff fc07 	bl	b8330 <memcpy>
   b8b22:	ec4b ab10 	vmov	d0, sl, fp
   b8b26:	aa1a      	add	r2, sp, #104	; 0x68
   b8b28:	a919      	add	r1, sp, #100	; 0x64
   b8b2a:	4620      	mov	r0, r4
   b8b2c:	f001 fb78 	bl	ba220 <__d2b>
   b8b30:	ec4b ab18 	vmov	d8, sl, fp
   b8b34:	9018      	str	r0, [sp, #96]	; 0x60
   b8b36:	2800      	cmp	r0, #0
   b8b38:	f43f aef6 	beq.w	b8928 <_strtod_l+0x490>
   b8b3c:	2101      	movs	r1, #1
   b8b3e:	4620      	mov	r0, r4
   b8b40:	f001 f8c2 	bl	b9cc8 <__i2b>
   b8b44:	4606      	mov	r6, r0
   b8b46:	2800      	cmp	r0, #0
   b8b48:	f43f aeee 	beq.w	b8928 <_strtod_l+0x490>
   b8b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8b4e:	9904      	ldr	r1, [sp, #16]
   b8b50:	2b00      	cmp	r3, #0
   b8b52:	bfab      	itete	ge
   b8b54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8b56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8b58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8b5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8b5e:	bfac      	ite	ge
   b8b60:	eb03 0902 	addge.w	r9, r3, r2
   b8b64:	1ad7      	sublt	r7, r2, r3
   b8b66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8b68:	eba3 0801 	sub.w	r8, r3, r1
   b8b6c:	4490      	add	r8, r2
   b8b6e:	4ba1      	ldr	r3, [pc, #644]	; (b8df4 <_strtod_l+0x95c>)
   b8b70:	f108 38ff 	add.w	r8, r8, #4294967295
   b8b74:	4598      	cmp	r8, r3
   b8b76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8b7a:	f280 80c7 	bge.w	b8d0c <_strtod_l+0x874>
   b8b7e:	eba3 0308 	sub.w	r3, r3, r8
   b8b82:	2b1f      	cmp	r3, #31
   b8b84:	eba2 0203 	sub.w	r2, r2, r3
   b8b88:	f04f 0101 	mov.w	r1, #1
   b8b8c:	f300 80b1 	bgt.w	b8cf2 <_strtod_l+0x85a>
   b8b90:	fa01 f303 	lsl.w	r3, r1, r3
   b8b94:	930d      	str	r3, [sp, #52]	; 0x34
   b8b96:	2300      	movs	r3, #0
   b8b98:	9308      	str	r3, [sp, #32]
   b8b9a:	eb09 0802 	add.w	r8, r9, r2
   b8b9e:	9b04      	ldr	r3, [sp, #16]
   b8ba0:	45c1      	cmp	r9, r8
   b8ba2:	4417      	add	r7, r2
   b8ba4:	441f      	add	r7, r3
   b8ba6:	464b      	mov	r3, r9
   b8ba8:	bfa8      	it	ge
   b8baa:	4643      	movge	r3, r8
   b8bac:	42bb      	cmp	r3, r7
   b8bae:	bfa8      	it	ge
   b8bb0:	463b      	movge	r3, r7
   b8bb2:	2b00      	cmp	r3, #0
   b8bb4:	bfc2      	ittt	gt
   b8bb6:	eba8 0803 	subgt.w	r8, r8, r3
   b8bba:	1aff      	subgt	r7, r7, r3
   b8bbc:	eba9 0903 	subgt.w	r9, r9, r3
   b8bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8bc2:	2b00      	cmp	r3, #0
   b8bc4:	dd17      	ble.n	b8bf6 <_strtod_l+0x75e>
   b8bc6:	4631      	mov	r1, r6
   b8bc8:	461a      	mov	r2, r3
   b8bca:	4620      	mov	r0, r4
   b8bcc:	f001 f93c 	bl	b9e48 <__pow5mult>
   b8bd0:	4606      	mov	r6, r0
   b8bd2:	2800      	cmp	r0, #0
   b8bd4:	f43f aea8 	beq.w	b8928 <_strtod_l+0x490>
   b8bd8:	4601      	mov	r1, r0
   b8bda:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8bdc:	4620      	mov	r0, r4
   b8bde:	f001 f889 	bl	b9cf4 <__multiply>
   b8be2:	900b      	str	r0, [sp, #44]	; 0x2c
   b8be4:	2800      	cmp	r0, #0
   b8be6:	f43f ae9f 	beq.w	b8928 <_strtod_l+0x490>
   b8bea:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8bec:	4620      	mov	r0, r4
   b8bee:	f000 ff69 	bl	b9ac4 <_Bfree>
   b8bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8bf4:	9318      	str	r3, [sp, #96]	; 0x60
   b8bf6:	f1b8 0f00 	cmp.w	r8, #0
   b8bfa:	f300 808c 	bgt.w	b8d16 <_strtod_l+0x87e>
   b8bfe:	9b06      	ldr	r3, [sp, #24]
   b8c00:	2b00      	cmp	r3, #0
   b8c02:	dd08      	ble.n	b8c16 <_strtod_l+0x77e>
   b8c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8c06:	9905      	ldr	r1, [sp, #20]
   b8c08:	4620      	mov	r0, r4
   b8c0a:	f001 f91d 	bl	b9e48 <__pow5mult>
   b8c0e:	9005      	str	r0, [sp, #20]
   b8c10:	2800      	cmp	r0, #0
   b8c12:	f43f ae89 	beq.w	b8928 <_strtod_l+0x490>
   b8c16:	2f00      	cmp	r7, #0
   b8c18:	dd08      	ble.n	b8c2c <_strtod_l+0x794>
   b8c1a:	9905      	ldr	r1, [sp, #20]
   b8c1c:	463a      	mov	r2, r7
   b8c1e:	4620      	mov	r0, r4
   b8c20:	f001 f96c 	bl	b9efc <__lshift>
   b8c24:	9005      	str	r0, [sp, #20]
   b8c26:	2800      	cmp	r0, #0
   b8c28:	f43f ae7e 	beq.w	b8928 <_strtod_l+0x490>
   b8c2c:	f1b9 0f00 	cmp.w	r9, #0
   b8c30:	dd08      	ble.n	b8c44 <_strtod_l+0x7ac>
   b8c32:	4631      	mov	r1, r6
   b8c34:	464a      	mov	r2, r9
   b8c36:	4620      	mov	r0, r4
   b8c38:	f001 f960 	bl	b9efc <__lshift>
   b8c3c:	4606      	mov	r6, r0
   b8c3e:	2800      	cmp	r0, #0
   b8c40:	f43f ae72 	beq.w	b8928 <_strtod_l+0x490>
   b8c44:	9a05      	ldr	r2, [sp, #20]
   b8c46:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8c48:	4620      	mov	r0, r4
   b8c4a:	f001 f9e3 	bl	ba014 <__mdiff>
   b8c4e:	4605      	mov	r5, r0
   b8c50:	2800      	cmp	r0, #0
   b8c52:	f43f ae69 	beq.w	b8928 <_strtod_l+0x490>
   b8c56:	68c3      	ldr	r3, [r0, #12]
   b8c58:	930b      	str	r3, [sp, #44]	; 0x2c
   b8c5a:	2300      	movs	r3, #0
   b8c5c:	60c3      	str	r3, [r0, #12]
   b8c5e:	4631      	mov	r1, r6
   b8c60:	f001 f9bc 	bl	b9fdc <__mcmp>
   b8c64:	2800      	cmp	r0, #0
   b8c66:	da60      	bge.n	b8d2a <_strtod_l+0x892>
   b8c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8c6a:	ea53 030a 	orrs.w	r3, r3, sl
   b8c6e:	f040 8082 	bne.w	b8d76 <_strtod_l+0x8de>
   b8c72:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8c76:	2b00      	cmp	r3, #0
   b8c78:	d17d      	bne.n	b8d76 <_strtod_l+0x8de>
   b8c7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8c7e:	0d1b      	lsrs	r3, r3, #20
   b8c80:	051b      	lsls	r3, r3, #20
   b8c82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8c86:	d976      	bls.n	b8d76 <_strtod_l+0x8de>
   b8c88:	696b      	ldr	r3, [r5, #20]
   b8c8a:	b913      	cbnz	r3, b8c92 <_strtod_l+0x7fa>
   b8c8c:	692b      	ldr	r3, [r5, #16]
   b8c8e:	2b01      	cmp	r3, #1
   b8c90:	dd71      	ble.n	b8d76 <_strtod_l+0x8de>
   b8c92:	4629      	mov	r1, r5
   b8c94:	2201      	movs	r2, #1
   b8c96:	4620      	mov	r0, r4
   b8c98:	f001 f930 	bl	b9efc <__lshift>
   b8c9c:	4631      	mov	r1, r6
   b8c9e:	4605      	mov	r5, r0
   b8ca0:	f001 f99c 	bl	b9fdc <__mcmp>
   b8ca4:	2800      	cmp	r0, #0
   b8ca6:	dd66      	ble.n	b8d76 <_strtod_l+0x8de>
   b8ca8:	9904      	ldr	r1, [sp, #16]
   b8caa:	4a53      	ldr	r2, [pc, #332]	; (b8df8 <_strtod_l+0x960>)
   b8cac:	465b      	mov	r3, fp
   b8cae:	2900      	cmp	r1, #0
   b8cb0:	f000 8081 	beq.w	b8db6 <_strtod_l+0x91e>
   b8cb4:	ea02 010b 	and.w	r1, r2, fp
   b8cb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b8cbc:	dc7b      	bgt.n	b8db6 <_strtod_l+0x91e>
   b8cbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8cc2:	f77f aea9 	ble.w	b8a18 <_strtod_l+0x580>
   b8cc6:	4b4d      	ldr	r3, [pc, #308]	; (b8dfc <_strtod_l+0x964>)
   b8cc8:	4650      	mov	r0, sl
   b8cca:	4659      	mov	r1, fp
   b8ccc:	2200      	movs	r2, #0
   b8cce:	f7fb fb63 	bl	b4398 <__aeabi_dmul>
   b8cd2:	460b      	mov	r3, r1
   b8cd4:	4303      	orrs	r3, r0
   b8cd6:	bf08      	it	eq
   b8cd8:	2322      	moveq	r3, #34	; 0x22
   b8cda:	4682      	mov	sl, r0
   b8cdc:	468b      	mov	fp, r1
   b8cde:	bf08      	it	eq
   b8ce0:	6023      	streq	r3, [r4, #0]
   b8ce2:	e62b      	b.n	b893c <_strtod_l+0x4a4>
   b8ce4:	f04f 32ff 	mov.w	r2, #4294967295
   b8ce8:	fa02 f303 	lsl.w	r3, r2, r3
   b8cec:	ea03 0a0a 	and.w	sl, r3, sl
   b8cf0:	e6e3      	b.n	b8aba <_strtod_l+0x622>
   b8cf2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8cf6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b8cfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b8cfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8d02:	fa01 f308 	lsl.w	r3, r1, r8
   b8d06:	9308      	str	r3, [sp, #32]
   b8d08:	910d      	str	r1, [sp, #52]	; 0x34
   b8d0a:	e746      	b.n	b8b9a <_strtod_l+0x702>
   b8d0c:	2300      	movs	r3, #0
   b8d0e:	9308      	str	r3, [sp, #32]
   b8d10:	2301      	movs	r3, #1
   b8d12:	930d      	str	r3, [sp, #52]	; 0x34
   b8d14:	e741      	b.n	b8b9a <_strtod_l+0x702>
   b8d16:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8d18:	4642      	mov	r2, r8
   b8d1a:	4620      	mov	r0, r4
   b8d1c:	f001 f8ee 	bl	b9efc <__lshift>
   b8d20:	9018      	str	r0, [sp, #96]	; 0x60
   b8d22:	2800      	cmp	r0, #0
   b8d24:	f47f af6b 	bne.w	b8bfe <_strtod_l+0x766>
   b8d28:	e5fe      	b.n	b8928 <_strtod_l+0x490>
   b8d2a:	465f      	mov	r7, fp
   b8d2c:	d16e      	bne.n	b8e0c <_strtod_l+0x974>
   b8d2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8d30:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8d34:	b342      	cbz	r2, b8d88 <_strtod_l+0x8f0>
   b8d36:	4a32      	ldr	r2, [pc, #200]	; (b8e00 <_strtod_l+0x968>)
   b8d38:	4293      	cmp	r3, r2
   b8d3a:	d128      	bne.n	b8d8e <_strtod_l+0x8f6>
   b8d3c:	9b04      	ldr	r3, [sp, #16]
   b8d3e:	4651      	mov	r1, sl
   b8d40:	b1eb      	cbz	r3, b8d7e <_strtod_l+0x8e6>
   b8d42:	4b2d      	ldr	r3, [pc, #180]	; (b8df8 <_strtod_l+0x960>)
   b8d44:	403b      	ands	r3, r7
   b8d46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8d4a:	f04f 32ff 	mov.w	r2, #4294967295
   b8d4e:	d819      	bhi.n	b8d84 <_strtod_l+0x8ec>
   b8d50:	0d1b      	lsrs	r3, r3, #20
   b8d52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8d56:	fa02 f303 	lsl.w	r3, r2, r3
   b8d5a:	4299      	cmp	r1, r3
   b8d5c:	d117      	bne.n	b8d8e <_strtod_l+0x8f6>
   b8d5e:	4b29      	ldr	r3, [pc, #164]	; (b8e04 <_strtod_l+0x96c>)
   b8d60:	429f      	cmp	r7, r3
   b8d62:	d102      	bne.n	b8d6a <_strtod_l+0x8d2>
   b8d64:	3101      	adds	r1, #1
   b8d66:	f43f addf 	beq.w	b8928 <_strtod_l+0x490>
   b8d6a:	4b23      	ldr	r3, [pc, #140]	; (b8df8 <_strtod_l+0x960>)
   b8d6c:	403b      	ands	r3, r7
   b8d6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8d72:	f04f 0a00 	mov.w	sl, #0
   b8d76:	9b04      	ldr	r3, [sp, #16]
   b8d78:	2b00      	cmp	r3, #0
   b8d7a:	d1a4      	bne.n	b8cc6 <_strtod_l+0x82e>
   b8d7c:	e5de      	b.n	b893c <_strtod_l+0x4a4>
   b8d7e:	f04f 33ff 	mov.w	r3, #4294967295
   b8d82:	e7ea      	b.n	b8d5a <_strtod_l+0x8c2>
   b8d84:	4613      	mov	r3, r2
   b8d86:	e7e8      	b.n	b8d5a <_strtod_l+0x8c2>
   b8d88:	ea53 030a 	orrs.w	r3, r3, sl
   b8d8c:	d08c      	beq.n	b8ca8 <_strtod_l+0x810>
   b8d8e:	9b08      	ldr	r3, [sp, #32]
   b8d90:	b1db      	cbz	r3, b8dca <_strtod_l+0x932>
   b8d92:	423b      	tst	r3, r7
   b8d94:	d0ef      	beq.n	b8d76 <_strtod_l+0x8de>
   b8d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8d98:	9a04      	ldr	r2, [sp, #16]
   b8d9a:	4650      	mov	r0, sl
   b8d9c:	4659      	mov	r1, fp
   b8d9e:	b1c3      	cbz	r3, b8dd2 <_strtod_l+0x93a>
   b8da0:	f7ff fb5d 	bl	b845e <sulp>
   b8da4:	4602      	mov	r2, r0
   b8da6:	460b      	mov	r3, r1
   b8da8:	ec51 0b18 	vmov	r0, r1, d8
   b8dac:	f7fb f93e 	bl	b402c <__adddf3>
   b8db0:	4682      	mov	sl, r0
   b8db2:	468b      	mov	fp, r1
   b8db4:	e7df      	b.n	b8d76 <_strtod_l+0x8de>
   b8db6:	4013      	ands	r3, r2
   b8db8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b8dbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8dc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8dc4:	f04f 3aff 	mov.w	sl, #4294967295
   b8dc8:	e7d5      	b.n	b8d76 <_strtod_l+0x8de>
   b8dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8dcc:	ea13 0f0a 	tst.w	r3, sl
   b8dd0:	e7e0      	b.n	b8d94 <_strtod_l+0x8fc>
   b8dd2:	f7ff fb44 	bl	b845e <sulp>
   b8dd6:	4602      	mov	r2, r0
   b8dd8:	460b      	mov	r3, r1
   b8dda:	ec51 0b18 	vmov	r0, r1, d8
   b8dde:	f7fb f923 	bl	b4028 <__aeabi_dsub>
   b8de2:	2200      	movs	r2, #0
   b8de4:	2300      	movs	r3, #0
   b8de6:	4682      	mov	sl, r0
   b8de8:	468b      	mov	fp, r1
   b8dea:	f7fb fd3d 	bl	b4868 <__aeabi_dcmpeq>
   b8dee:	2800      	cmp	r0, #0
   b8df0:	d0c1      	beq.n	b8d76 <_strtod_l+0x8de>
   b8df2:	e611      	b.n	b8a18 <_strtod_l+0x580>
   b8df4:	fffffc02 	.word	0xfffffc02
   b8df8:	7ff00000 	.word	0x7ff00000
   b8dfc:	39500000 	.word	0x39500000
   b8e00:	000fffff 	.word	0x000fffff
   b8e04:	7fefffff 	.word	0x7fefffff
   b8e08:	000bac58 	.word	0x000bac58
   b8e0c:	4631      	mov	r1, r6
   b8e0e:	4628      	mov	r0, r5
   b8e10:	f001 fa62 	bl	ba2d8 <__ratio>
   b8e14:	ec59 8b10 	vmov	r8, r9, d0
   b8e18:	ee10 0a10 	vmov	r0, s0
   b8e1c:	2200      	movs	r2, #0
   b8e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8e22:	4649      	mov	r1, r9
   b8e24:	f7fb fd34 	bl	b4890 <__aeabi_dcmple>
   b8e28:	2800      	cmp	r0, #0
   b8e2a:	d07a      	beq.n	b8f22 <_strtod_l+0xa8a>
   b8e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8e2e:	2b00      	cmp	r3, #0
   b8e30:	d04a      	beq.n	b8ec8 <_strtod_l+0xa30>
   b8e32:	4b95      	ldr	r3, [pc, #596]	; (b9088 <_strtod_l+0xbf0>)
   b8e34:	2200      	movs	r2, #0
   b8e36:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8e3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9088 <_strtod_l+0xbf0>
   b8e3e:	f04f 0800 	mov.w	r8, #0
   b8e42:	4b92      	ldr	r3, [pc, #584]	; (b908c <_strtod_l+0xbf4>)
   b8e44:	403b      	ands	r3, r7
   b8e46:	930d      	str	r3, [sp, #52]	; 0x34
   b8e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8e4a:	4b91      	ldr	r3, [pc, #580]	; (b9090 <_strtod_l+0xbf8>)
   b8e4c:	429a      	cmp	r2, r3
   b8e4e:	f040 80b0 	bne.w	b8fb2 <_strtod_l+0xb1a>
   b8e52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8e56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b8e5a:	ec4b ab10 	vmov	d0, sl, fp
   b8e5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8e62:	f001 f961 	bl	ba128 <__ulp>
   b8e66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8e6a:	ec53 2b10 	vmov	r2, r3, d0
   b8e6e:	f7fb fa93 	bl	b4398 <__aeabi_dmul>
   b8e72:	4652      	mov	r2, sl
   b8e74:	465b      	mov	r3, fp
   b8e76:	f7fb f8d9 	bl	b402c <__adddf3>
   b8e7a:	460b      	mov	r3, r1
   b8e7c:	4983      	ldr	r1, [pc, #524]	; (b908c <_strtod_l+0xbf4>)
   b8e7e:	4a85      	ldr	r2, [pc, #532]	; (b9094 <_strtod_l+0xbfc>)
   b8e80:	4019      	ands	r1, r3
   b8e82:	4291      	cmp	r1, r2
   b8e84:	4682      	mov	sl, r0
   b8e86:	d960      	bls.n	b8f4a <_strtod_l+0xab2>
   b8e88:	ee18 3a90 	vmov	r3, s17
   b8e8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8e90:	4293      	cmp	r3, r2
   b8e92:	d104      	bne.n	b8e9e <_strtod_l+0xa06>
   b8e94:	ee18 3a10 	vmov	r3, s16
   b8e98:	3301      	adds	r3, #1
   b8e9a:	f43f ad45 	beq.w	b8928 <_strtod_l+0x490>
   b8e9e:	f8df b200 	ldr.w	fp, [pc, #512]	; b90a0 <_strtod_l+0xc08>
   b8ea2:	f04f 3aff 	mov.w	sl, #4294967295
   b8ea6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8ea8:	4620      	mov	r0, r4
   b8eaa:	f000 fe0b 	bl	b9ac4 <_Bfree>
   b8eae:	9905      	ldr	r1, [sp, #20]
   b8eb0:	4620      	mov	r0, r4
   b8eb2:	f000 fe07 	bl	b9ac4 <_Bfree>
   b8eb6:	4631      	mov	r1, r6
   b8eb8:	4620      	mov	r0, r4
   b8eba:	f000 fe03 	bl	b9ac4 <_Bfree>
   b8ebe:	4629      	mov	r1, r5
   b8ec0:	4620      	mov	r0, r4
   b8ec2:	f000 fdff 	bl	b9ac4 <_Bfree>
   b8ec6:	e61a      	b.n	b8afe <_strtod_l+0x666>
   b8ec8:	f1ba 0f00 	cmp.w	sl, #0
   b8ecc:	d11b      	bne.n	b8f06 <_strtod_l+0xa6e>
   b8ece:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8ed2:	b9f3      	cbnz	r3, b8f12 <_strtod_l+0xa7a>
   b8ed4:	4b6c      	ldr	r3, [pc, #432]	; (b9088 <_strtod_l+0xbf0>)
   b8ed6:	2200      	movs	r2, #0
   b8ed8:	4640      	mov	r0, r8
   b8eda:	4649      	mov	r1, r9
   b8edc:	f7fb fcce 	bl	b487c <__aeabi_dcmplt>
   b8ee0:	b9d0      	cbnz	r0, b8f18 <_strtod_l+0xa80>
   b8ee2:	4640      	mov	r0, r8
   b8ee4:	4649      	mov	r1, r9
   b8ee6:	4b6c      	ldr	r3, [pc, #432]	; (b9098 <_strtod_l+0xc00>)
   b8ee8:	2200      	movs	r2, #0
   b8eea:	f7fb fa55 	bl	b4398 <__aeabi_dmul>
   b8eee:	4680      	mov	r8, r0
   b8ef0:	4689      	mov	r9, r1
   b8ef2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b8ef6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b8efa:	9315      	str	r3, [sp, #84]	; 0x54
   b8efc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b8f00:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8f04:	e79d      	b.n	b8e42 <_strtod_l+0x9aa>
   b8f06:	f1ba 0f01 	cmp.w	sl, #1
   b8f0a:	d102      	bne.n	b8f12 <_strtod_l+0xa7a>
   b8f0c:	2f00      	cmp	r7, #0
   b8f0e:	f43f ad83 	beq.w	b8a18 <_strtod_l+0x580>
   b8f12:	4b62      	ldr	r3, [pc, #392]	; (b909c <_strtod_l+0xc04>)
   b8f14:	2200      	movs	r2, #0
   b8f16:	e78e      	b.n	b8e36 <_strtod_l+0x99e>
   b8f18:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9098 <_strtod_l+0xc00>
   b8f1c:	f04f 0800 	mov.w	r8, #0
   b8f20:	e7e7      	b.n	b8ef2 <_strtod_l+0xa5a>
   b8f22:	4b5d      	ldr	r3, [pc, #372]	; (b9098 <_strtod_l+0xc00>)
   b8f24:	4640      	mov	r0, r8
   b8f26:	4649      	mov	r1, r9
   b8f28:	2200      	movs	r2, #0
   b8f2a:	f7fb fa35 	bl	b4398 <__aeabi_dmul>
   b8f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8f30:	4680      	mov	r8, r0
   b8f32:	4689      	mov	r9, r1
   b8f34:	b933      	cbnz	r3, b8f44 <_strtod_l+0xaac>
   b8f36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8f3a:	900e      	str	r0, [sp, #56]	; 0x38
   b8f3c:	930f      	str	r3, [sp, #60]	; 0x3c
   b8f3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b8f42:	e7dd      	b.n	b8f00 <_strtod_l+0xa68>
   b8f44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b8f48:	e7f9      	b.n	b8f3e <_strtod_l+0xaa6>
   b8f4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b8f4e:	9b04      	ldr	r3, [sp, #16]
   b8f50:	2b00      	cmp	r3, #0
   b8f52:	d1a8      	bne.n	b8ea6 <_strtod_l+0xa0e>
   b8f54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8f58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8f5a:	0d1b      	lsrs	r3, r3, #20
   b8f5c:	051b      	lsls	r3, r3, #20
   b8f5e:	429a      	cmp	r2, r3
   b8f60:	d1a1      	bne.n	b8ea6 <_strtod_l+0xa0e>
   b8f62:	4640      	mov	r0, r8
   b8f64:	4649      	mov	r1, r9
   b8f66:	f7fb fdbd 	bl	b4ae4 <__aeabi_d2lz>
   b8f6a:	f7fb f9e7 	bl	b433c <__aeabi_l2d>
   b8f6e:	4602      	mov	r2, r0
   b8f70:	460b      	mov	r3, r1
   b8f72:	4640      	mov	r0, r8
   b8f74:	4649      	mov	r1, r9
   b8f76:	f7fb f857 	bl	b4028 <__aeabi_dsub>
   b8f7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8f7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8f80:	ea43 030a 	orr.w	r3, r3, sl
   b8f84:	4313      	orrs	r3, r2
   b8f86:	4680      	mov	r8, r0
   b8f88:	4689      	mov	r9, r1
   b8f8a:	d055      	beq.n	b9038 <_strtod_l+0xba0>
   b8f8c:	a336      	add	r3, pc, #216	; (adr r3, b9068 <_strtod_l+0xbd0>)
   b8f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f92:	f7fb fc73 	bl	b487c <__aeabi_dcmplt>
   b8f96:	2800      	cmp	r0, #0
   b8f98:	f47f acd0 	bne.w	b893c <_strtod_l+0x4a4>
   b8f9c:	a334      	add	r3, pc, #208	; (adr r3, b9070 <_strtod_l+0xbd8>)
   b8f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8fa2:	4640      	mov	r0, r8
   b8fa4:	4649      	mov	r1, r9
   b8fa6:	f7fb fc87 	bl	b48b8 <__aeabi_dcmpgt>
   b8faa:	2800      	cmp	r0, #0
   b8fac:	f43f af7b 	beq.w	b8ea6 <_strtod_l+0xa0e>
   b8fb0:	e4c4      	b.n	b893c <_strtod_l+0x4a4>
   b8fb2:	9b04      	ldr	r3, [sp, #16]
   b8fb4:	b333      	cbz	r3, b9004 <_strtod_l+0xb6c>
   b8fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8fb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8fbc:	d822      	bhi.n	b9004 <_strtod_l+0xb6c>
   b8fbe:	a32e      	add	r3, pc, #184	; (adr r3, b9078 <_strtod_l+0xbe0>)
   b8fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8fc4:	4640      	mov	r0, r8
   b8fc6:	4649      	mov	r1, r9
   b8fc8:	f7fb fc62 	bl	b4890 <__aeabi_dcmple>
   b8fcc:	b1a0      	cbz	r0, b8ff8 <_strtod_l+0xb60>
   b8fce:	4649      	mov	r1, r9
   b8fd0:	4640      	mov	r0, r8
   b8fd2:	f7fb fc91 	bl	b48f8 <__aeabi_d2uiz>
   b8fd6:	2801      	cmp	r0, #1
   b8fd8:	bf38      	it	cc
   b8fda:	2001      	movcc	r0, #1
   b8fdc:	f7fb f962 	bl	b42a4 <__aeabi_ui2d>
   b8fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8fe2:	4680      	mov	r8, r0
   b8fe4:	4689      	mov	r9, r1
   b8fe6:	bb23      	cbnz	r3, b9032 <_strtod_l+0xb9a>
   b8fe8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8fec:	9010      	str	r0, [sp, #64]	; 0x40
   b8fee:	9311      	str	r3, [sp, #68]	; 0x44
   b8ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b8ff4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8ffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8ffc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9000:	1a9b      	subs	r3, r3, r2
   b9002:	9309      	str	r3, [sp, #36]	; 0x24
   b9004:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9008:	eeb0 0a48 	vmov.f32	s0, s16
   b900c:	eef0 0a68 	vmov.f32	s1, s17
   b9010:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9014:	f001 f888 	bl	ba128 <__ulp>
   b9018:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b901c:	ec53 2b10 	vmov	r2, r3, d0
   b9020:	f7fb f9ba 	bl	b4398 <__aeabi_dmul>
   b9024:	ec53 2b18 	vmov	r2, r3, d8
   b9028:	f7fb f800 	bl	b402c <__adddf3>
   b902c:	4682      	mov	sl, r0
   b902e:	468b      	mov	fp, r1
   b9030:	e78d      	b.n	b8f4e <_strtod_l+0xab6>
   b9032:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9036:	e7db      	b.n	b8ff0 <_strtod_l+0xb58>
   b9038:	a311      	add	r3, pc, #68	; (adr r3, b9080 <_strtod_l+0xbe8>)
   b903a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b903e:	f7fb fc1d 	bl	b487c <__aeabi_dcmplt>
   b9042:	e7b2      	b.n	b8faa <_strtod_l+0xb12>
   b9044:	2300      	movs	r3, #0
   b9046:	930a      	str	r3, [sp, #40]	; 0x28
   b9048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b904a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b904c:	6013      	str	r3, [r2, #0]
   b904e:	f7ff ba6b 	b.w	b8528 <_strtod_l+0x90>
   b9052:	2a65      	cmp	r2, #101	; 0x65
   b9054:	f43f ab5f 	beq.w	b8716 <_strtod_l+0x27e>
   b9058:	2a45      	cmp	r2, #69	; 0x45
   b905a:	f43f ab5c 	beq.w	b8716 <_strtod_l+0x27e>
   b905e:	2301      	movs	r3, #1
   b9060:	f7ff bb94 	b.w	b878c <_strtod_l+0x2f4>
   b9064:	f3af 8000 	nop.w
   b9068:	94a03595 	.word	0x94a03595
   b906c:	3fdfffff 	.word	0x3fdfffff
   b9070:	35afe535 	.word	0x35afe535
   b9074:	3fe00000 	.word	0x3fe00000
   b9078:	ffc00000 	.word	0xffc00000
   b907c:	41dfffff 	.word	0x41dfffff
   b9080:	94a03595 	.word	0x94a03595
   b9084:	3fcfffff 	.word	0x3fcfffff
   b9088:	3ff00000 	.word	0x3ff00000
   b908c:	7ff00000 	.word	0x7ff00000
   b9090:	7fe00000 	.word	0x7fe00000
   b9094:	7c9fffff 	.word	0x7c9fffff
   b9098:	3fe00000 	.word	0x3fe00000
   b909c:	bff00000 	.word	0xbff00000
   b90a0:	7fefffff 	.word	0x7fefffff

000b90a4 <strtof>:
   b90a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b90a8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b9158 <strtof+0xb4>
   b90ac:	4b26      	ldr	r3, [pc, #152]	; (b9148 <strtof+0xa4>)
   b90ae:	460a      	mov	r2, r1
   b90b0:	ed2d 8b02 	vpush	{d8}
   b90b4:	4601      	mov	r1, r0
   b90b6:	f8d8 0000 	ldr.w	r0, [r8]
   b90ba:	f7ff f9ed 	bl	b8498 <_strtod_l>
   b90be:	ec55 4b10 	vmov	r4, r5, d0
   b90c2:	ee10 2a10 	vmov	r2, s0
   b90c6:	ee10 0a10 	vmov	r0, s0
   b90ca:	462b      	mov	r3, r5
   b90cc:	4629      	mov	r1, r5
   b90ce:	f7fb fbfd 	bl	b48cc <__aeabi_dcmpun>
   b90d2:	b190      	cbz	r0, b90fa <strtof+0x56>
   b90d4:	2d00      	cmp	r5, #0
   b90d6:	481d      	ldr	r0, [pc, #116]	; (b914c <strtof+0xa8>)
   b90d8:	da09      	bge.n	b90ee <strtof+0x4a>
   b90da:	f001 f98d 	bl	ba3f8 <nanf>
   b90de:	eeb1 8a40 	vneg.f32	s16, s0
   b90e2:	eeb0 0a48 	vmov.f32	s0, s16
   b90e6:	ecbd 8b02 	vpop	{d8}
   b90ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b90ee:	ecbd 8b02 	vpop	{d8}
   b90f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b90f6:	f001 b97f 	b.w	ba3f8 <nanf>
   b90fa:	4620      	mov	r0, r4
   b90fc:	4629      	mov	r1, r5
   b90fe:	f7fb fc1b 	bl	b4938 <__aeabi_d2f>
   b9102:	ee08 0a10 	vmov	s16, r0
   b9106:	eddf 7a12 	vldr	s15, [pc, #72]	; b9150 <strtof+0xac>
   b910a:	eeb0 7ac8 	vabs.f32	s14, s16
   b910e:	eeb4 7a67 	vcmp.f32	s14, s15
   b9112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9116:	dde4      	ble.n	b90e2 <strtof+0x3e>
   b9118:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   b911c:	4b0d      	ldr	r3, [pc, #52]	; (b9154 <strtof+0xb0>)
   b911e:	f04f 32ff 	mov.w	r2, #4294967295
   b9122:	4620      	mov	r0, r4
   b9124:	4639      	mov	r1, r7
   b9126:	f7fb fbd1 	bl	b48cc <__aeabi_dcmpun>
   b912a:	b940      	cbnz	r0, b913e <strtof+0x9a>
   b912c:	4b09      	ldr	r3, [pc, #36]	; (b9154 <strtof+0xb0>)
   b912e:	f04f 32ff 	mov.w	r2, #4294967295
   b9132:	4620      	mov	r0, r4
   b9134:	4639      	mov	r1, r7
   b9136:	f7fb fbab 	bl	b4890 <__aeabi_dcmple>
   b913a:	2800      	cmp	r0, #0
   b913c:	d0d1      	beq.n	b90e2 <strtof+0x3e>
   b913e:	f8d8 3000 	ldr.w	r3, [r8]
   b9142:	2222      	movs	r2, #34	; 0x22
   b9144:	601a      	str	r2, [r3, #0]
   b9146:	e7cc      	b.n	b90e2 <strtof+0x3e>
   b9148:	2003cd70 	.word	0x2003cd70
   b914c:	000ba5c5 	.word	0x000ba5c5
   b9150:	7f7fffff 	.word	0x7f7fffff
   b9154:	7fefffff 	.word	0x7fefffff
   b9158:	2003cd04 	.word	0x2003cd04

000b915c <_strtol_l.constprop.0>:
   b915c:	2b01      	cmp	r3, #1
   b915e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9162:	d001      	beq.n	b9168 <_strtol_l.constprop.0+0xc>
   b9164:	2b24      	cmp	r3, #36	; 0x24
   b9166:	d906      	bls.n	b9176 <_strtol_l.constprop.0+0x1a>
   b9168:	f7fd f876 	bl	b6258 <__errno>
   b916c:	2316      	movs	r3, #22
   b916e:	6003      	str	r3, [r0, #0]
   b9170:	2000      	movs	r0, #0
   b9172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9176:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b925c <_strtol_l.constprop.0+0x100>
   b917a:	460d      	mov	r5, r1
   b917c:	462e      	mov	r6, r5
   b917e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9182:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9186:	f017 0708 	ands.w	r7, r7, #8
   b918a:	d1f7      	bne.n	b917c <_strtol_l.constprop.0+0x20>
   b918c:	2c2d      	cmp	r4, #45	; 0x2d
   b918e:	d132      	bne.n	b91f6 <_strtol_l.constprop.0+0x9a>
   b9190:	782c      	ldrb	r4, [r5, #0]
   b9192:	2701      	movs	r7, #1
   b9194:	1cb5      	adds	r5, r6, #2
   b9196:	2b00      	cmp	r3, #0
   b9198:	d05b      	beq.n	b9252 <_strtol_l.constprop.0+0xf6>
   b919a:	2b10      	cmp	r3, #16
   b919c:	d109      	bne.n	b91b2 <_strtol_l.constprop.0+0x56>
   b919e:	2c30      	cmp	r4, #48	; 0x30
   b91a0:	d107      	bne.n	b91b2 <_strtol_l.constprop.0+0x56>
   b91a2:	782c      	ldrb	r4, [r5, #0]
   b91a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b91a8:	2c58      	cmp	r4, #88	; 0x58
   b91aa:	d14d      	bne.n	b9248 <_strtol_l.constprop.0+0xec>
   b91ac:	786c      	ldrb	r4, [r5, #1]
   b91ae:	2310      	movs	r3, #16
   b91b0:	3502      	adds	r5, #2
   b91b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b91b6:	f108 38ff 	add.w	r8, r8, #4294967295
   b91ba:	f04f 0c00 	mov.w	ip, #0
   b91be:	fbb8 f9f3 	udiv	r9, r8, r3
   b91c2:	4666      	mov	r6, ip
   b91c4:	fb03 8a19 	mls	sl, r3, r9, r8
   b91c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b91cc:	f1be 0f09 	cmp.w	lr, #9
   b91d0:	d816      	bhi.n	b9200 <_strtol_l.constprop.0+0xa4>
   b91d2:	4674      	mov	r4, lr
   b91d4:	42a3      	cmp	r3, r4
   b91d6:	dd24      	ble.n	b9222 <_strtol_l.constprop.0+0xc6>
   b91d8:	f1bc 0f00 	cmp.w	ip, #0
   b91dc:	db1e      	blt.n	b921c <_strtol_l.constprop.0+0xc0>
   b91de:	45b1      	cmp	r9, r6
   b91e0:	d31c      	bcc.n	b921c <_strtol_l.constprop.0+0xc0>
   b91e2:	d101      	bne.n	b91e8 <_strtol_l.constprop.0+0x8c>
   b91e4:	45a2      	cmp	sl, r4
   b91e6:	db19      	blt.n	b921c <_strtol_l.constprop.0+0xc0>
   b91e8:	fb06 4603 	mla	r6, r6, r3, r4
   b91ec:	f04f 0c01 	mov.w	ip, #1
   b91f0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b91f4:	e7e8      	b.n	b91c8 <_strtol_l.constprop.0+0x6c>
   b91f6:	2c2b      	cmp	r4, #43	; 0x2b
   b91f8:	bf04      	itt	eq
   b91fa:	782c      	ldrbeq	r4, [r5, #0]
   b91fc:	1cb5      	addeq	r5, r6, #2
   b91fe:	e7ca      	b.n	b9196 <_strtol_l.constprop.0+0x3a>
   b9200:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9204:	f1be 0f19 	cmp.w	lr, #25
   b9208:	d801      	bhi.n	b920e <_strtol_l.constprop.0+0xb2>
   b920a:	3c37      	subs	r4, #55	; 0x37
   b920c:	e7e2      	b.n	b91d4 <_strtol_l.constprop.0+0x78>
   b920e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9212:	f1be 0f19 	cmp.w	lr, #25
   b9216:	d804      	bhi.n	b9222 <_strtol_l.constprop.0+0xc6>
   b9218:	3c57      	subs	r4, #87	; 0x57
   b921a:	e7db      	b.n	b91d4 <_strtol_l.constprop.0+0x78>
   b921c:	f04f 3cff 	mov.w	ip, #4294967295
   b9220:	e7e6      	b.n	b91f0 <_strtol_l.constprop.0+0x94>
   b9222:	f1bc 0f00 	cmp.w	ip, #0
   b9226:	da05      	bge.n	b9234 <_strtol_l.constprop.0+0xd8>
   b9228:	2322      	movs	r3, #34	; 0x22
   b922a:	6003      	str	r3, [r0, #0]
   b922c:	4646      	mov	r6, r8
   b922e:	b942      	cbnz	r2, b9242 <_strtol_l.constprop.0+0xe6>
   b9230:	4630      	mov	r0, r6
   b9232:	e79e      	b.n	b9172 <_strtol_l.constprop.0+0x16>
   b9234:	b107      	cbz	r7, b9238 <_strtol_l.constprop.0+0xdc>
   b9236:	4276      	negs	r6, r6
   b9238:	2a00      	cmp	r2, #0
   b923a:	d0f9      	beq.n	b9230 <_strtol_l.constprop.0+0xd4>
   b923c:	f1bc 0f00 	cmp.w	ip, #0
   b9240:	d000      	beq.n	b9244 <_strtol_l.constprop.0+0xe8>
   b9242:	1e69      	subs	r1, r5, #1
   b9244:	6011      	str	r1, [r2, #0]
   b9246:	e7f3      	b.n	b9230 <_strtol_l.constprop.0+0xd4>
   b9248:	2430      	movs	r4, #48	; 0x30
   b924a:	2b00      	cmp	r3, #0
   b924c:	d1b1      	bne.n	b91b2 <_strtol_l.constprop.0+0x56>
   b924e:	2308      	movs	r3, #8
   b9250:	e7af      	b.n	b91b2 <_strtol_l.constprop.0+0x56>
   b9252:	2c30      	cmp	r4, #48	; 0x30
   b9254:	d0a5      	beq.n	b91a2 <_strtol_l.constprop.0+0x46>
   b9256:	230a      	movs	r3, #10
   b9258:	e7ab      	b.n	b91b2 <_strtol_l.constprop.0+0x56>
   b925a:	bf00      	nop
   b925c:	000bac81 	.word	0x000bac81

000b9260 <strtol>:
   b9260:	4613      	mov	r3, r2
   b9262:	460a      	mov	r2, r1
   b9264:	4601      	mov	r1, r0
   b9266:	4802      	ldr	r0, [pc, #8]	; (b9270 <strtol+0x10>)
   b9268:	6800      	ldr	r0, [r0, #0]
   b926a:	f7ff bf77 	b.w	b915c <_strtol_l.constprop.0>
   b926e:	bf00      	nop
   b9270:	2003cd04 	.word	0x2003cd04

000b9274 <__register_exitproc>:
   b9274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9278:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9334 <__register_exitproc+0xc0>
   b927c:	4606      	mov	r6, r0
   b927e:	f8d8 0000 	ldr.w	r0, [r8]
   b9282:	461f      	mov	r7, r3
   b9284:	460d      	mov	r5, r1
   b9286:	4691      	mov	r9, r2
   b9288:	f000 fbc6 	bl	b9a18 <__retarget_lock_acquire_recursive>
   b928c:	4b25      	ldr	r3, [pc, #148]	; (b9324 <__register_exitproc+0xb0>)
   b928e:	681c      	ldr	r4, [r3, #0]
   b9290:	b934      	cbnz	r4, b92a0 <__register_exitproc+0x2c>
   b9292:	4c25      	ldr	r4, [pc, #148]	; (b9328 <__register_exitproc+0xb4>)
   b9294:	601c      	str	r4, [r3, #0]
   b9296:	4b25      	ldr	r3, [pc, #148]	; (b932c <__register_exitproc+0xb8>)
   b9298:	b113      	cbz	r3, b92a0 <__register_exitproc+0x2c>
   b929a:	681b      	ldr	r3, [r3, #0]
   b929c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b92a0:	6863      	ldr	r3, [r4, #4]
   b92a2:	2b1f      	cmp	r3, #31
   b92a4:	dd07      	ble.n	b92b6 <__register_exitproc+0x42>
   b92a6:	f8d8 0000 	ldr.w	r0, [r8]
   b92aa:	f000 fbb7 	bl	b9a1c <__retarget_lock_release_recursive>
   b92ae:	f04f 30ff 	mov.w	r0, #4294967295
   b92b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b92b6:	b34e      	cbz	r6, b930c <__register_exitproc+0x98>
   b92b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b92bc:	b988      	cbnz	r0, b92e2 <__register_exitproc+0x6e>
   b92be:	4b1c      	ldr	r3, [pc, #112]	; (b9330 <__register_exitproc+0xbc>)
   b92c0:	b923      	cbnz	r3, b92cc <__register_exitproc+0x58>
   b92c2:	f8d8 0000 	ldr.w	r0, [r8]
   b92c6:	f000 fba8 	bl	b9a1a <__retarget_lock_release>
   b92ca:	e7f0      	b.n	b92ae <__register_exitproc+0x3a>
   b92cc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b92d0:	f7fc ff8a 	bl	b61e8 <malloc>
   b92d4:	2800      	cmp	r0, #0
   b92d6:	d0f4      	beq.n	b92c2 <__register_exitproc+0x4e>
   b92d8:	2300      	movs	r3, #0
   b92da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b92de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b92e2:	6863      	ldr	r3, [r4, #4]
   b92e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b92e8:	2201      	movs	r2, #1
   b92ea:	409a      	lsls	r2, r3
   b92ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b92f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b92f4:	4313      	orrs	r3, r2
   b92f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b92fa:	2e02      	cmp	r6, #2
   b92fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9300:	bf02      	ittt	eq
   b9302:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9306:	4313      	orreq	r3, r2
   b9308:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b930c:	6863      	ldr	r3, [r4, #4]
   b930e:	f8d8 0000 	ldr.w	r0, [r8]
   b9312:	1c5a      	adds	r2, r3, #1
   b9314:	3302      	adds	r3, #2
   b9316:	6062      	str	r2, [r4, #4]
   b9318:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b931c:	f000 fb7e 	bl	b9a1c <__retarget_lock_release_recursive>
   b9320:	2000      	movs	r0, #0
   b9322:	e7c6      	b.n	b92b2 <__register_exitproc+0x3e>
   b9324:	2003e7ec 	.word	0x2003e7ec
   b9328:	2003e760 	.word	0x2003e760
   b932c:	00000000 	.word	0x00000000
   b9330:	000b61e9 	.word	0x000b61e9
   b9334:	2003cd68 	.word	0x2003cd68

000b9338 <rshift>:
   b9338:	6903      	ldr	r3, [r0, #16]
   b933a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b933e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9342:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9346:	f100 0414 	add.w	r4, r0, #20
   b934a:	dd45      	ble.n	b93d8 <rshift+0xa0>
   b934c:	f011 011f 	ands.w	r1, r1, #31
   b9350:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9354:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9358:	d10c      	bne.n	b9374 <rshift+0x3c>
   b935a:	f100 0710 	add.w	r7, r0, #16
   b935e:	4629      	mov	r1, r5
   b9360:	42b1      	cmp	r1, r6
   b9362:	d334      	bcc.n	b93ce <rshift+0x96>
   b9364:	1a9b      	subs	r3, r3, r2
   b9366:	009b      	lsls	r3, r3, #2
   b9368:	1eea      	subs	r2, r5, #3
   b936a:	4296      	cmp	r6, r2
   b936c:	bf38      	it	cc
   b936e:	2300      	movcc	r3, #0
   b9370:	4423      	add	r3, r4
   b9372:	e015      	b.n	b93a0 <rshift+0x68>
   b9374:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9378:	f1c1 0820 	rsb	r8, r1, #32
   b937c:	40cf      	lsrs	r7, r1
   b937e:	f105 0e04 	add.w	lr, r5, #4
   b9382:	46a1      	mov	r9, r4
   b9384:	4576      	cmp	r6, lr
   b9386:	46f4      	mov	ip, lr
   b9388:	d815      	bhi.n	b93b6 <rshift+0x7e>
   b938a:	1a9a      	subs	r2, r3, r2
   b938c:	0092      	lsls	r2, r2, #2
   b938e:	3a04      	subs	r2, #4
   b9390:	3501      	adds	r5, #1
   b9392:	42ae      	cmp	r6, r5
   b9394:	bf38      	it	cc
   b9396:	2200      	movcc	r2, #0
   b9398:	18a3      	adds	r3, r4, r2
   b939a:	50a7      	str	r7, [r4, r2]
   b939c:	b107      	cbz	r7, b93a0 <rshift+0x68>
   b939e:	3304      	adds	r3, #4
   b93a0:	1b1a      	subs	r2, r3, r4
   b93a2:	42a3      	cmp	r3, r4
   b93a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b93a8:	bf08      	it	eq
   b93aa:	2300      	moveq	r3, #0
   b93ac:	6102      	str	r2, [r0, #16]
   b93ae:	bf08      	it	eq
   b93b0:	6143      	streq	r3, [r0, #20]
   b93b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b93b6:	f8dc c000 	ldr.w	ip, [ip]
   b93ba:	fa0c fc08 	lsl.w	ip, ip, r8
   b93be:	ea4c 0707 	orr.w	r7, ip, r7
   b93c2:	f849 7b04 	str.w	r7, [r9], #4
   b93c6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b93ca:	40cf      	lsrs	r7, r1
   b93cc:	e7da      	b.n	b9384 <rshift+0x4c>
   b93ce:	f851 cb04 	ldr.w	ip, [r1], #4
   b93d2:	f847 cf04 	str.w	ip, [r7, #4]!
   b93d6:	e7c3      	b.n	b9360 <rshift+0x28>
   b93d8:	4623      	mov	r3, r4
   b93da:	e7e1      	b.n	b93a0 <rshift+0x68>

000b93dc <__hexdig_fun>:
   b93dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b93e0:	2b09      	cmp	r3, #9
   b93e2:	d802      	bhi.n	b93ea <__hexdig_fun+0xe>
   b93e4:	3820      	subs	r0, #32
   b93e6:	b2c0      	uxtb	r0, r0
   b93e8:	4770      	bx	lr
   b93ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b93ee:	2b05      	cmp	r3, #5
   b93f0:	d801      	bhi.n	b93f6 <__hexdig_fun+0x1a>
   b93f2:	3847      	subs	r0, #71	; 0x47
   b93f4:	e7f7      	b.n	b93e6 <__hexdig_fun+0xa>
   b93f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b93fa:	2b05      	cmp	r3, #5
   b93fc:	d801      	bhi.n	b9402 <__hexdig_fun+0x26>
   b93fe:	3827      	subs	r0, #39	; 0x27
   b9400:	e7f1      	b.n	b93e6 <__hexdig_fun+0xa>
   b9402:	2000      	movs	r0, #0
   b9404:	4770      	bx	lr
	...

000b9408 <__gethex>:
   b9408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b940c:	ed2d 8b02 	vpush	{d8}
   b9410:	b089      	sub	sp, #36	; 0x24
   b9412:	ee08 0a10 	vmov	s16, r0
   b9416:	9304      	str	r3, [sp, #16]
   b9418:	4bb4      	ldr	r3, [pc, #720]	; (b96ec <__gethex+0x2e4>)
   b941a:	681b      	ldr	r3, [r3, #0]
   b941c:	9301      	str	r3, [sp, #4]
   b941e:	4618      	mov	r0, r3
   b9420:	468b      	mov	fp, r1
   b9422:	4690      	mov	r8, r2
   b9424:	f7fb fb56 	bl	b4ad4 <strlen>
   b9428:	9b01      	ldr	r3, [sp, #4]
   b942a:	f8db 2000 	ldr.w	r2, [fp]
   b942e:	4403      	add	r3, r0
   b9430:	4682      	mov	sl, r0
   b9432:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9436:	9305      	str	r3, [sp, #20]
   b9438:	1c93      	adds	r3, r2, #2
   b943a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b943e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9442:	32fe      	adds	r2, #254	; 0xfe
   b9444:	18d1      	adds	r1, r2, r3
   b9446:	461f      	mov	r7, r3
   b9448:	f813 0b01 	ldrb.w	r0, [r3], #1
   b944c:	9100      	str	r1, [sp, #0]
   b944e:	2830      	cmp	r0, #48	; 0x30
   b9450:	d0f8      	beq.n	b9444 <__gethex+0x3c>
   b9452:	f7ff ffc3 	bl	b93dc <__hexdig_fun>
   b9456:	4604      	mov	r4, r0
   b9458:	2800      	cmp	r0, #0
   b945a:	d13a      	bne.n	b94d2 <__gethex+0xca>
   b945c:	9901      	ldr	r1, [sp, #4]
   b945e:	4652      	mov	r2, sl
   b9460:	4638      	mov	r0, r7
   b9462:	f7fe ffe8 	bl	b8436 <strncmp>
   b9466:	4605      	mov	r5, r0
   b9468:	2800      	cmp	r0, #0
   b946a:	d168      	bne.n	b953e <__gethex+0x136>
   b946c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9470:	eb07 060a 	add.w	r6, r7, sl
   b9474:	f7ff ffb2 	bl	b93dc <__hexdig_fun>
   b9478:	2800      	cmp	r0, #0
   b947a:	d062      	beq.n	b9542 <__gethex+0x13a>
   b947c:	4633      	mov	r3, r6
   b947e:	7818      	ldrb	r0, [r3, #0]
   b9480:	2830      	cmp	r0, #48	; 0x30
   b9482:	461f      	mov	r7, r3
   b9484:	f103 0301 	add.w	r3, r3, #1
   b9488:	d0f9      	beq.n	b947e <__gethex+0x76>
   b948a:	f7ff ffa7 	bl	b93dc <__hexdig_fun>
   b948e:	2301      	movs	r3, #1
   b9490:	fab0 f480 	clz	r4, r0
   b9494:	0964      	lsrs	r4, r4, #5
   b9496:	4635      	mov	r5, r6
   b9498:	9300      	str	r3, [sp, #0]
   b949a:	463a      	mov	r2, r7
   b949c:	4616      	mov	r6, r2
   b949e:	3201      	adds	r2, #1
   b94a0:	7830      	ldrb	r0, [r6, #0]
   b94a2:	f7ff ff9b 	bl	b93dc <__hexdig_fun>
   b94a6:	2800      	cmp	r0, #0
   b94a8:	d1f8      	bne.n	b949c <__gethex+0x94>
   b94aa:	9901      	ldr	r1, [sp, #4]
   b94ac:	4652      	mov	r2, sl
   b94ae:	4630      	mov	r0, r6
   b94b0:	f7fe ffc1 	bl	b8436 <strncmp>
   b94b4:	b980      	cbnz	r0, b94d8 <__gethex+0xd0>
   b94b6:	b94d      	cbnz	r5, b94cc <__gethex+0xc4>
   b94b8:	eb06 050a 	add.w	r5, r6, sl
   b94bc:	462a      	mov	r2, r5
   b94be:	4616      	mov	r6, r2
   b94c0:	3201      	adds	r2, #1
   b94c2:	7830      	ldrb	r0, [r6, #0]
   b94c4:	f7ff ff8a 	bl	b93dc <__hexdig_fun>
   b94c8:	2800      	cmp	r0, #0
   b94ca:	d1f8      	bne.n	b94be <__gethex+0xb6>
   b94cc:	1bad      	subs	r5, r5, r6
   b94ce:	00ad      	lsls	r5, r5, #2
   b94d0:	e004      	b.n	b94dc <__gethex+0xd4>
   b94d2:	2400      	movs	r4, #0
   b94d4:	4625      	mov	r5, r4
   b94d6:	e7e0      	b.n	b949a <__gethex+0x92>
   b94d8:	2d00      	cmp	r5, #0
   b94da:	d1f7      	bne.n	b94cc <__gethex+0xc4>
   b94dc:	7833      	ldrb	r3, [r6, #0]
   b94de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b94e2:	2b50      	cmp	r3, #80	; 0x50
   b94e4:	d13b      	bne.n	b955e <__gethex+0x156>
   b94e6:	7873      	ldrb	r3, [r6, #1]
   b94e8:	2b2b      	cmp	r3, #43	; 0x2b
   b94ea:	d02c      	beq.n	b9546 <__gethex+0x13e>
   b94ec:	2b2d      	cmp	r3, #45	; 0x2d
   b94ee:	d02e      	beq.n	b954e <__gethex+0x146>
   b94f0:	1c71      	adds	r1, r6, #1
   b94f2:	f04f 0900 	mov.w	r9, #0
   b94f6:	7808      	ldrb	r0, [r1, #0]
   b94f8:	f7ff ff70 	bl	b93dc <__hexdig_fun>
   b94fc:	1e43      	subs	r3, r0, #1
   b94fe:	b2db      	uxtb	r3, r3
   b9500:	2b18      	cmp	r3, #24
   b9502:	d82c      	bhi.n	b955e <__gethex+0x156>
   b9504:	f1a0 0210 	sub.w	r2, r0, #16
   b9508:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b950c:	f7ff ff66 	bl	b93dc <__hexdig_fun>
   b9510:	1e43      	subs	r3, r0, #1
   b9512:	b2db      	uxtb	r3, r3
   b9514:	2b18      	cmp	r3, #24
   b9516:	d91d      	bls.n	b9554 <__gethex+0x14c>
   b9518:	f1b9 0f00 	cmp.w	r9, #0
   b951c:	d000      	beq.n	b9520 <__gethex+0x118>
   b951e:	4252      	negs	r2, r2
   b9520:	4415      	add	r5, r2
   b9522:	f8cb 1000 	str.w	r1, [fp]
   b9526:	b1e4      	cbz	r4, b9562 <__gethex+0x15a>
   b9528:	9b00      	ldr	r3, [sp, #0]
   b952a:	2b00      	cmp	r3, #0
   b952c:	bf14      	ite	ne
   b952e:	2700      	movne	r7, #0
   b9530:	2706      	moveq	r7, #6
   b9532:	4638      	mov	r0, r7
   b9534:	b009      	add	sp, #36	; 0x24
   b9536:	ecbd 8b02 	vpop	{d8}
   b953a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b953e:	463e      	mov	r6, r7
   b9540:	4625      	mov	r5, r4
   b9542:	2401      	movs	r4, #1
   b9544:	e7ca      	b.n	b94dc <__gethex+0xd4>
   b9546:	f04f 0900 	mov.w	r9, #0
   b954a:	1cb1      	adds	r1, r6, #2
   b954c:	e7d3      	b.n	b94f6 <__gethex+0xee>
   b954e:	f04f 0901 	mov.w	r9, #1
   b9552:	e7fa      	b.n	b954a <__gethex+0x142>
   b9554:	230a      	movs	r3, #10
   b9556:	fb03 0202 	mla	r2, r3, r2, r0
   b955a:	3a10      	subs	r2, #16
   b955c:	e7d4      	b.n	b9508 <__gethex+0x100>
   b955e:	4631      	mov	r1, r6
   b9560:	e7df      	b.n	b9522 <__gethex+0x11a>
   b9562:	1bf3      	subs	r3, r6, r7
   b9564:	3b01      	subs	r3, #1
   b9566:	4621      	mov	r1, r4
   b9568:	2b07      	cmp	r3, #7
   b956a:	dc0b      	bgt.n	b9584 <__gethex+0x17c>
   b956c:	ee18 0a10 	vmov	r0, s16
   b9570:	f000 fa68 	bl	b9a44 <_Balloc>
   b9574:	4604      	mov	r4, r0
   b9576:	b940      	cbnz	r0, b958a <__gethex+0x182>
   b9578:	4b5d      	ldr	r3, [pc, #372]	; (b96f0 <__gethex+0x2e8>)
   b957a:	4602      	mov	r2, r0
   b957c:	21de      	movs	r1, #222	; 0xde
   b957e:	485d      	ldr	r0, [pc, #372]	; (b96f4 <__gethex+0x2ec>)
   b9580:	f7fc fe72 	bl	b6268 <__assert_func>
   b9584:	3101      	adds	r1, #1
   b9586:	105b      	asrs	r3, r3, #1
   b9588:	e7ee      	b.n	b9568 <__gethex+0x160>
   b958a:	f100 0914 	add.w	r9, r0, #20
   b958e:	f04f 0b00 	mov.w	fp, #0
   b9592:	f1ca 0301 	rsb	r3, sl, #1
   b9596:	f8cd 9008 	str.w	r9, [sp, #8]
   b959a:	f8cd b000 	str.w	fp, [sp]
   b959e:	9306      	str	r3, [sp, #24]
   b95a0:	42b7      	cmp	r7, r6
   b95a2:	d340      	bcc.n	b9626 <__gethex+0x21e>
   b95a4:	9802      	ldr	r0, [sp, #8]
   b95a6:	9b00      	ldr	r3, [sp, #0]
   b95a8:	f840 3b04 	str.w	r3, [r0], #4
   b95ac:	eba0 0009 	sub.w	r0, r0, r9
   b95b0:	1080      	asrs	r0, r0, #2
   b95b2:	0146      	lsls	r6, r0, #5
   b95b4:	6120      	str	r0, [r4, #16]
   b95b6:	4618      	mov	r0, r3
   b95b8:	f000 fb36 	bl	b9c28 <__hi0bits>
   b95bc:	1a30      	subs	r0, r6, r0
   b95be:	f8d8 6000 	ldr.w	r6, [r8]
   b95c2:	42b0      	cmp	r0, r6
   b95c4:	dd63      	ble.n	b968e <__gethex+0x286>
   b95c6:	1b87      	subs	r7, r0, r6
   b95c8:	4639      	mov	r1, r7
   b95ca:	4620      	mov	r0, r4
   b95cc:	f000 feda 	bl	ba384 <__any_on>
   b95d0:	4682      	mov	sl, r0
   b95d2:	b1a8      	cbz	r0, b9600 <__gethex+0x1f8>
   b95d4:	1e7b      	subs	r3, r7, #1
   b95d6:	1159      	asrs	r1, r3, #5
   b95d8:	f003 021f 	and.w	r2, r3, #31
   b95dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b95e0:	f04f 0a01 	mov.w	sl, #1
   b95e4:	fa0a f202 	lsl.w	r2, sl, r2
   b95e8:	420a      	tst	r2, r1
   b95ea:	d009      	beq.n	b9600 <__gethex+0x1f8>
   b95ec:	4553      	cmp	r3, sl
   b95ee:	dd05      	ble.n	b95fc <__gethex+0x1f4>
   b95f0:	1eb9      	subs	r1, r7, #2
   b95f2:	4620      	mov	r0, r4
   b95f4:	f000 fec6 	bl	ba384 <__any_on>
   b95f8:	2800      	cmp	r0, #0
   b95fa:	d145      	bne.n	b9688 <__gethex+0x280>
   b95fc:	f04f 0a02 	mov.w	sl, #2
   b9600:	4639      	mov	r1, r7
   b9602:	4620      	mov	r0, r4
   b9604:	f7ff fe98 	bl	b9338 <rshift>
   b9608:	443d      	add	r5, r7
   b960a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b960e:	42ab      	cmp	r3, r5
   b9610:	da4c      	bge.n	b96ac <__gethex+0x2a4>
   b9612:	ee18 0a10 	vmov	r0, s16
   b9616:	4621      	mov	r1, r4
   b9618:	f000 fa54 	bl	b9ac4 <_Bfree>
   b961c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b961e:	2300      	movs	r3, #0
   b9620:	6013      	str	r3, [r2, #0]
   b9622:	27a3      	movs	r7, #163	; 0xa3
   b9624:	e785      	b.n	b9532 <__gethex+0x12a>
   b9626:	1e73      	subs	r3, r6, #1
   b9628:	9a05      	ldr	r2, [sp, #20]
   b962a:	9303      	str	r3, [sp, #12]
   b962c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9630:	4293      	cmp	r3, r2
   b9632:	d019      	beq.n	b9668 <__gethex+0x260>
   b9634:	f1bb 0f20 	cmp.w	fp, #32
   b9638:	d107      	bne.n	b964a <__gethex+0x242>
   b963a:	9b02      	ldr	r3, [sp, #8]
   b963c:	9a00      	ldr	r2, [sp, #0]
   b963e:	f843 2b04 	str.w	r2, [r3], #4
   b9642:	9302      	str	r3, [sp, #8]
   b9644:	2300      	movs	r3, #0
   b9646:	9300      	str	r3, [sp, #0]
   b9648:	469b      	mov	fp, r3
   b964a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b964e:	f7ff fec5 	bl	b93dc <__hexdig_fun>
   b9652:	9b00      	ldr	r3, [sp, #0]
   b9654:	f000 000f 	and.w	r0, r0, #15
   b9658:	fa00 f00b 	lsl.w	r0, r0, fp
   b965c:	4303      	orrs	r3, r0
   b965e:	9300      	str	r3, [sp, #0]
   b9660:	f10b 0b04 	add.w	fp, fp, #4
   b9664:	9b03      	ldr	r3, [sp, #12]
   b9666:	e00d      	b.n	b9684 <__gethex+0x27c>
   b9668:	9b03      	ldr	r3, [sp, #12]
   b966a:	9a06      	ldr	r2, [sp, #24]
   b966c:	4413      	add	r3, r2
   b966e:	42bb      	cmp	r3, r7
   b9670:	d3e0      	bcc.n	b9634 <__gethex+0x22c>
   b9672:	4618      	mov	r0, r3
   b9674:	9901      	ldr	r1, [sp, #4]
   b9676:	9307      	str	r3, [sp, #28]
   b9678:	4652      	mov	r2, sl
   b967a:	f7fe fedc 	bl	b8436 <strncmp>
   b967e:	9b07      	ldr	r3, [sp, #28]
   b9680:	2800      	cmp	r0, #0
   b9682:	d1d7      	bne.n	b9634 <__gethex+0x22c>
   b9684:	461e      	mov	r6, r3
   b9686:	e78b      	b.n	b95a0 <__gethex+0x198>
   b9688:	f04f 0a03 	mov.w	sl, #3
   b968c:	e7b8      	b.n	b9600 <__gethex+0x1f8>
   b968e:	da0a      	bge.n	b96a6 <__gethex+0x29e>
   b9690:	1a37      	subs	r7, r6, r0
   b9692:	4621      	mov	r1, r4
   b9694:	ee18 0a10 	vmov	r0, s16
   b9698:	463a      	mov	r2, r7
   b969a:	f000 fc2f 	bl	b9efc <__lshift>
   b969e:	1bed      	subs	r5, r5, r7
   b96a0:	4604      	mov	r4, r0
   b96a2:	f100 0914 	add.w	r9, r0, #20
   b96a6:	f04f 0a00 	mov.w	sl, #0
   b96aa:	e7ae      	b.n	b960a <__gethex+0x202>
   b96ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b96b0:	42a8      	cmp	r0, r5
   b96b2:	dd72      	ble.n	b979a <__gethex+0x392>
   b96b4:	1b45      	subs	r5, r0, r5
   b96b6:	42ae      	cmp	r6, r5
   b96b8:	dc36      	bgt.n	b9728 <__gethex+0x320>
   b96ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b96be:	2b02      	cmp	r3, #2
   b96c0:	d02a      	beq.n	b9718 <__gethex+0x310>
   b96c2:	2b03      	cmp	r3, #3
   b96c4:	d02c      	beq.n	b9720 <__gethex+0x318>
   b96c6:	2b01      	cmp	r3, #1
   b96c8:	d11c      	bne.n	b9704 <__gethex+0x2fc>
   b96ca:	42ae      	cmp	r6, r5
   b96cc:	d11a      	bne.n	b9704 <__gethex+0x2fc>
   b96ce:	2e01      	cmp	r6, #1
   b96d0:	d112      	bne.n	b96f8 <__gethex+0x2f0>
   b96d2:	9a04      	ldr	r2, [sp, #16]
   b96d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b96d8:	6013      	str	r3, [r2, #0]
   b96da:	2301      	movs	r3, #1
   b96dc:	6123      	str	r3, [r4, #16]
   b96de:	f8c9 3000 	str.w	r3, [r9]
   b96e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b96e4:	2762      	movs	r7, #98	; 0x62
   b96e6:	601c      	str	r4, [r3, #0]
   b96e8:	e723      	b.n	b9532 <__gethex+0x12a>
   b96ea:	bf00      	nop
   b96ec:	000bae18 	.word	0x000bae18
   b96f0:	000bad81 	.word	0x000bad81
   b96f4:	000bad92 	.word	0x000bad92
   b96f8:	1e71      	subs	r1, r6, #1
   b96fa:	4620      	mov	r0, r4
   b96fc:	f000 fe42 	bl	ba384 <__any_on>
   b9700:	2800      	cmp	r0, #0
   b9702:	d1e6      	bne.n	b96d2 <__gethex+0x2ca>
   b9704:	ee18 0a10 	vmov	r0, s16
   b9708:	4621      	mov	r1, r4
   b970a:	f000 f9db 	bl	b9ac4 <_Bfree>
   b970e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9710:	2300      	movs	r3, #0
   b9712:	6013      	str	r3, [r2, #0]
   b9714:	2750      	movs	r7, #80	; 0x50
   b9716:	e70c      	b.n	b9532 <__gethex+0x12a>
   b9718:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b971a:	2b00      	cmp	r3, #0
   b971c:	d1f2      	bne.n	b9704 <__gethex+0x2fc>
   b971e:	e7d8      	b.n	b96d2 <__gethex+0x2ca>
   b9720:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9722:	2b00      	cmp	r3, #0
   b9724:	d1d5      	bne.n	b96d2 <__gethex+0x2ca>
   b9726:	e7ed      	b.n	b9704 <__gethex+0x2fc>
   b9728:	1e6f      	subs	r7, r5, #1
   b972a:	f1ba 0f00 	cmp.w	sl, #0
   b972e:	d131      	bne.n	b9794 <__gethex+0x38c>
   b9730:	b127      	cbz	r7, b973c <__gethex+0x334>
   b9732:	4639      	mov	r1, r7
   b9734:	4620      	mov	r0, r4
   b9736:	f000 fe25 	bl	ba384 <__any_on>
   b973a:	4682      	mov	sl, r0
   b973c:	117b      	asrs	r3, r7, #5
   b973e:	2101      	movs	r1, #1
   b9740:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b9744:	f007 071f 	and.w	r7, r7, #31
   b9748:	fa01 f707 	lsl.w	r7, r1, r7
   b974c:	421f      	tst	r7, r3
   b974e:	4629      	mov	r1, r5
   b9750:	4620      	mov	r0, r4
   b9752:	bf18      	it	ne
   b9754:	f04a 0a02 	orrne.w	sl, sl, #2
   b9758:	1b76      	subs	r6, r6, r5
   b975a:	f7ff fded 	bl	b9338 <rshift>
   b975e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b9762:	2702      	movs	r7, #2
   b9764:	f1ba 0f00 	cmp.w	sl, #0
   b9768:	d048      	beq.n	b97fc <__gethex+0x3f4>
   b976a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b976e:	2b02      	cmp	r3, #2
   b9770:	d015      	beq.n	b979e <__gethex+0x396>
   b9772:	2b03      	cmp	r3, #3
   b9774:	d017      	beq.n	b97a6 <__gethex+0x39e>
   b9776:	2b01      	cmp	r3, #1
   b9778:	d109      	bne.n	b978e <__gethex+0x386>
   b977a:	f01a 0f02 	tst.w	sl, #2
   b977e:	d006      	beq.n	b978e <__gethex+0x386>
   b9780:	f8d9 0000 	ldr.w	r0, [r9]
   b9784:	ea4a 0a00 	orr.w	sl, sl, r0
   b9788:	f01a 0f01 	tst.w	sl, #1
   b978c:	d10e      	bne.n	b97ac <__gethex+0x3a4>
   b978e:	f047 0710 	orr.w	r7, r7, #16
   b9792:	e033      	b.n	b97fc <__gethex+0x3f4>
   b9794:	f04f 0a01 	mov.w	sl, #1
   b9798:	e7d0      	b.n	b973c <__gethex+0x334>
   b979a:	2701      	movs	r7, #1
   b979c:	e7e2      	b.n	b9764 <__gethex+0x35c>
   b979e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b97a0:	f1c3 0301 	rsb	r3, r3, #1
   b97a4:	9315      	str	r3, [sp, #84]	; 0x54
   b97a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b97a8:	2b00      	cmp	r3, #0
   b97aa:	d0f0      	beq.n	b978e <__gethex+0x386>
   b97ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b97b0:	f104 0314 	add.w	r3, r4, #20
   b97b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b97b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b97bc:	f04f 0c00 	mov.w	ip, #0
   b97c0:	4618      	mov	r0, r3
   b97c2:	f853 2b04 	ldr.w	r2, [r3], #4
   b97c6:	f1b2 3fff 	cmp.w	r2, #4294967295
   b97ca:	d01c      	beq.n	b9806 <__gethex+0x3fe>
   b97cc:	3201      	adds	r2, #1
   b97ce:	6002      	str	r2, [r0, #0]
   b97d0:	2f02      	cmp	r7, #2
   b97d2:	f104 0314 	add.w	r3, r4, #20
   b97d6:	d13f      	bne.n	b9858 <__gethex+0x450>
   b97d8:	f8d8 2000 	ldr.w	r2, [r8]
   b97dc:	3a01      	subs	r2, #1
   b97de:	42b2      	cmp	r2, r6
   b97e0:	d10a      	bne.n	b97f8 <__gethex+0x3f0>
   b97e2:	1171      	asrs	r1, r6, #5
   b97e4:	2201      	movs	r2, #1
   b97e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b97ea:	f006 061f 	and.w	r6, r6, #31
   b97ee:	fa02 f606 	lsl.w	r6, r2, r6
   b97f2:	421e      	tst	r6, r3
   b97f4:	bf18      	it	ne
   b97f6:	4617      	movne	r7, r2
   b97f8:	f047 0720 	orr.w	r7, r7, #32
   b97fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b97fe:	601c      	str	r4, [r3, #0]
   b9800:	9b04      	ldr	r3, [sp, #16]
   b9802:	601d      	str	r5, [r3, #0]
   b9804:	e695      	b.n	b9532 <__gethex+0x12a>
   b9806:	4299      	cmp	r1, r3
   b9808:	f843 cc04 	str.w	ip, [r3, #-4]
   b980c:	d8d8      	bhi.n	b97c0 <__gethex+0x3b8>
   b980e:	68a3      	ldr	r3, [r4, #8]
   b9810:	459b      	cmp	fp, r3
   b9812:	db19      	blt.n	b9848 <__gethex+0x440>
   b9814:	6861      	ldr	r1, [r4, #4]
   b9816:	ee18 0a10 	vmov	r0, s16
   b981a:	3101      	adds	r1, #1
   b981c:	f000 f912 	bl	b9a44 <_Balloc>
   b9820:	4681      	mov	r9, r0
   b9822:	b918      	cbnz	r0, b982c <__gethex+0x424>
   b9824:	4b1a      	ldr	r3, [pc, #104]	; (b9890 <__gethex+0x488>)
   b9826:	4602      	mov	r2, r0
   b9828:	2184      	movs	r1, #132	; 0x84
   b982a:	e6a8      	b.n	b957e <__gethex+0x176>
   b982c:	6922      	ldr	r2, [r4, #16]
   b982e:	3202      	adds	r2, #2
   b9830:	f104 010c 	add.w	r1, r4, #12
   b9834:	0092      	lsls	r2, r2, #2
   b9836:	300c      	adds	r0, #12
   b9838:	f7fe fd7a 	bl	b8330 <memcpy>
   b983c:	4621      	mov	r1, r4
   b983e:	ee18 0a10 	vmov	r0, s16
   b9842:	f000 f93f 	bl	b9ac4 <_Bfree>
   b9846:	464c      	mov	r4, r9
   b9848:	6923      	ldr	r3, [r4, #16]
   b984a:	1c5a      	adds	r2, r3, #1
   b984c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9850:	6122      	str	r2, [r4, #16]
   b9852:	2201      	movs	r2, #1
   b9854:	615a      	str	r2, [r3, #20]
   b9856:	e7bb      	b.n	b97d0 <__gethex+0x3c8>
   b9858:	6922      	ldr	r2, [r4, #16]
   b985a:	455a      	cmp	r2, fp
   b985c:	dd0b      	ble.n	b9876 <__gethex+0x46e>
   b985e:	2101      	movs	r1, #1
   b9860:	4620      	mov	r0, r4
   b9862:	f7ff fd69 	bl	b9338 <rshift>
   b9866:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b986a:	3501      	adds	r5, #1
   b986c:	42ab      	cmp	r3, r5
   b986e:	f6ff aed0 	blt.w	b9612 <__gethex+0x20a>
   b9872:	2701      	movs	r7, #1
   b9874:	e7c0      	b.n	b97f8 <__gethex+0x3f0>
   b9876:	f016 061f 	ands.w	r6, r6, #31
   b987a:	d0fa      	beq.n	b9872 <__gethex+0x46a>
   b987c:	4453      	add	r3, sl
   b987e:	f1c6 0620 	rsb	r6, r6, #32
   b9882:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b9886:	f000 f9cf 	bl	b9c28 <__hi0bits>
   b988a:	42b0      	cmp	r0, r6
   b988c:	dbe7      	blt.n	b985e <__gethex+0x456>
   b988e:	e7f0      	b.n	b9872 <__gethex+0x46a>
   b9890:	000bad81 	.word	0x000bad81

000b9894 <L_shift>:
   b9894:	f1c2 0208 	rsb	r2, r2, #8
   b9898:	0092      	lsls	r2, r2, #2
   b989a:	b570      	push	{r4, r5, r6, lr}
   b989c:	f1c2 0620 	rsb	r6, r2, #32
   b98a0:	6843      	ldr	r3, [r0, #4]
   b98a2:	6804      	ldr	r4, [r0, #0]
   b98a4:	fa03 f506 	lsl.w	r5, r3, r6
   b98a8:	432c      	orrs	r4, r5
   b98aa:	40d3      	lsrs	r3, r2
   b98ac:	6004      	str	r4, [r0, #0]
   b98ae:	f840 3f04 	str.w	r3, [r0, #4]!
   b98b2:	4288      	cmp	r0, r1
   b98b4:	d3f4      	bcc.n	b98a0 <L_shift+0xc>
   b98b6:	bd70      	pop	{r4, r5, r6, pc}

000b98b8 <__match>:
   b98b8:	b530      	push	{r4, r5, lr}
   b98ba:	6803      	ldr	r3, [r0, #0]
   b98bc:	3301      	adds	r3, #1
   b98be:	f811 4b01 	ldrb.w	r4, [r1], #1
   b98c2:	b914      	cbnz	r4, b98ca <__match+0x12>
   b98c4:	6003      	str	r3, [r0, #0]
   b98c6:	2001      	movs	r0, #1
   b98c8:	bd30      	pop	{r4, r5, pc}
   b98ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   b98ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b98d2:	2d19      	cmp	r5, #25
   b98d4:	bf98      	it	ls
   b98d6:	3220      	addls	r2, #32
   b98d8:	42a2      	cmp	r2, r4
   b98da:	d0f0      	beq.n	b98be <__match+0x6>
   b98dc:	2000      	movs	r0, #0
   b98de:	e7f3      	b.n	b98c8 <__match+0x10>

000b98e0 <__hexnan>:
   b98e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98e4:	680b      	ldr	r3, [r1, #0]
   b98e6:	115e      	asrs	r6, r3, #5
   b98e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b98ec:	f013 031f 	ands.w	r3, r3, #31
   b98f0:	b087      	sub	sp, #28
   b98f2:	bf18      	it	ne
   b98f4:	3604      	addne	r6, #4
   b98f6:	2500      	movs	r5, #0
   b98f8:	1f37      	subs	r7, r6, #4
   b98fa:	4690      	mov	r8, r2
   b98fc:	6802      	ldr	r2, [r0, #0]
   b98fe:	9301      	str	r3, [sp, #4]
   b9900:	4682      	mov	sl, r0
   b9902:	f846 5c04 	str.w	r5, [r6, #-4]
   b9906:	46b9      	mov	r9, r7
   b9908:	463c      	mov	r4, r7
   b990a:	9502      	str	r5, [sp, #8]
   b990c:	46ab      	mov	fp, r5
   b990e:	7851      	ldrb	r1, [r2, #1]
   b9910:	1c53      	adds	r3, r2, #1
   b9912:	9303      	str	r3, [sp, #12]
   b9914:	b341      	cbz	r1, b9968 <__hexnan+0x88>
   b9916:	4608      	mov	r0, r1
   b9918:	9205      	str	r2, [sp, #20]
   b991a:	9104      	str	r1, [sp, #16]
   b991c:	f7ff fd5e 	bl	b93dc <__hexdig_fun>
   b9920:	2800      	cmp	r0, #0
   b9922:	d14f      	bne.n	b99c4 <__hexnan+0xe4>
   b9924:	9904      	ldr	r1, [sp, #16]
   b9926:	9a05      	ldr	r2, [sp, #20]
   b9928:	2920      	cmp	r1, #32
   b992a:	d818      	bhi.n	b995e <__hexnan+0x7e>
   b992c:	9b02      	ldr	r3, [sp, #8]
   b992e:	459b      	cmp	fp, r3
   b9930:	dd13      	ble.n	b995a <__hexnan+0x7a>
   b9932:	454c      	cmp	r4, r9
   b9934:	d206      	bcs.n	b9944 <__hexnan+0x64>
   b9936:	2d07      	cmp	r5, #7
   b9938:	dc04      	bgt.n	b9944 <__hexnan+0x64>
   b993a:	462a      	mov	r2, r5
   b993c:	4649      	mov	r1, r9
   b993e:	4620      	mov	r0, r4
   b9940:	f7ff ffa8 	bl	b9894 <L_shift>
   b9944:	4544      	cmp	r4, r8
   b9946:	d950      	bls.n	b99ea <__hexnan+0x10a>
   b9948:	2300      	movs	r3, #0
   b994a:	f1a4 0904 	sub.w	r9, r4, #4
   b994e:	f844 3c04 	str.w	r3, [r4, #-4]
   b9952:	f8cd b008 	str.w	fp, [sp, #8]
   b9956:	464c      	mov	r4, r9
   b9958:	461d      	mov	r5, r3
   b995a:	9a03      	ldr	r2, [sp, #12]
   b995c:	e7d7      	b.n	b990e <__hexnan+0x2e>
   b995e:	2929      	cmp	r1, #41	; 0x29
   b9960:	d156      	bne.n	b9a10 <__hexnan+0x130>
   b9962:	3202      	adds	r2, #2
   b9964:	f8ca 2000 	str.w	r2, [sl]
   b9968:	f1bb 0f00 	cmp.w	fp, #0
   b996c:	d050      	beq.n	b9a10 <__hexnan+0x130>
   b996e:	454c      	cmp	r4, r9
   b9970:	d206      	bcs.n	b9980 <__hexnan+0xa0>
   b9972:	2d07      	cmp	r5, #7
   b9974:	dc04      	bgt.n	b9980 <__hexnan+0xa0>
   b9976:	462a      	mov	r2, r5
   b9978:	4649      	mov	r1, r9
   b997a:	4620      	mov	r0, r4
   b997c:	f7ff ff8a 	bl	b9894 <L_shift>
   b9980:	4544      	cmp	r4, r8
   b9982:	d934      	bls.n	b99ee <__hexnan+0x10e>
   b9984:	f1a8 0204 	sub.w	r2, r8, #4
   b9988:	4623      	mov	r3, r4
   b998a:	f853 1b04 	ldr.w	r1, [r3], #4
   b998e:	f842 1f04 	str.w	r1, [r2, #4]!
   b9992:	429f      	cmp	r7, r3
   b9994:	d2f9      	bcs.n	b998a <__hexnan+0xaa>
   b9996:	1b3b      	subs	r3, r7, r4
   b9998:	f023 0303 	bic.w	r3, r3, #3
   b999c:	3304      	adds	r3, #4
   b999e:	3401      	adds	r4, #1
   b99a0:	3e03      	subs	r6, #3
   b99a2:	42b4      	cmp	r4, r6
   b99a4:	bf88      	it	hi
   b99a6:	2304      	movhi	r3, #4
   b99a8:	4443      	add	r3, r8
   b99aa:	2200      	movs	r2, #0
   b99ac:	f843 2b04 	str.w	r2, [r3], #4
   b99b0:	429f      	cmp	r7, r3
   b99b2:	d2fb      	bcs.n	b99ac <__hexnan+0xcc>
   b99b4:	683b      	ldr	r3, [r7, #0]
   b99b6:	b91b      	cbnz	r3, b99c0 <__hexnan+0xe0>
   b99b8:	4547      	cmp	r7, r8
   b99ba:	d127      	bne.n	b9a0c <__hexnan+0x12c>
   b99bc:	2301      	movs	r3, #1
   b99be:	603b      	str	r3, [r7, #0]
   b99c0:	2005      	movs	r0, #5
   b99c2:	e026      	b.n	b9a12 <__hexnan+0x132>
   b99c4:	3501      	adds	r5, #1
   b99c6:	2d08      	cmp	r5, #8
   b99c8:	f10b 0b01 	add.w	fp, fp, #1
   b99cc:	dd06      	ble.n	b99dc <__hexnan+0xfc>
   b99ce:	4544      	cmp	r4, r8
   b99d0:	d9c3      	bls.n	b995a <__hexnan+0x7a>
   b99d2:	2300      	movs	r3, #0
   b99d4:	f844 3c04 	str.w	r3, [r4, #-4]
   b99d8:	2501      	movs	r5, #1
   b99da:	3c04      	subs	r4, #4
   b99dc:	6822      	ldr	r2, [r4, #0]
   b99de:	f000 000f 	and.w	r0, r0, #15
   b99e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b99e6:	6022      	str	r2, [r4, #0]
   b99e8:	e7b7      	b.n	b995a <__hexnan+0x7a>
   b99ea:	2508      	movs	r5, #8
   b99ec:	e7b5      	b.n	b995a <__hexnan+0x7a>
   b99ee:	9b01      	ldr	r3, [sp, #4]
   b99f0:	2b00      	cmp	r3, #0
   b99f2:	d0df      	beq.n	b99b4 <__hexnan+0xd4>
   b99f4:	f04f 32ff 	mov.w	r2, #4294967295
   b99f8:	f1c3 0320 	rsb	r3, r3, #32
   b99fc:	fa22 f303 	lsr.w	r3, r2, r3
   b9a00:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b9a04:	401a      	ands	r2, r3
   b9a06:	f846 2c04 	str.w	r2, [r6, #-4]
   b9a0a:	e7d3      	b.n	b99b4 <__hexnan+0xd4>
   b9a0c:	3f04      	subs	r7, #4
   b9a0e:	e7d1      	b.n	b99b4 <__hexnan+0xd4>
   b9a10:	2004      	movs	r0, #4
   b9a12:	b007      	add	sp, #28
   b9a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9a18 <__retarget_lock_acquire_recursive>:
   b9a18:	4770      	bx	lr

000b9a1a <__retarget_lock_release>:
   b9a1a:	4770      	bx	lr

000b9a1c <__retarget_lock_release_recursive>:
   b9a1c:	4770      	bx	lr

000b9a1e <__ascii_mbtowc>:
   b9a1e:	b082      	sub	sp, #8
   b9a20:	b901      	cbnz	r1, b9a24 <__ascii_mbtowc+0x6>
   b9a22:	a901      	add	r1, sp, #4
   b9a24:	b142      	cbz	r2, b9a38 <__ascii_mbtowc+0x1a>
   b9a26:	b14b      	cbz	r3, b9a3c <__ascii_mbtowc+0x1e>
   b9a28:	7813      	ldrb	r3, [r2, #0]
   b9a2a:	600b      	str	r3, [r1, #0]
   b9a2c:	7812      	ldrb	r2, [r2, #0]
   b9a2e:	1e10      	subs	r0, r2, #0
   b9a30:	bf18      	it	ne
   b9a32:	2001      	movne	r0, #1
   b9a34:	b002      	add	sp, #8
   b9a36:	4770      	bx	lr
   b9a38:	4610      	mov	r0, r2
   b9a3a:	e7fb      	b.n	b9a34 <__ascii_mbtowc+0x16>
   b9a3c:	f06f 0001 	mvn.w	r0, #1
   b9a40:	e7f8      	b.n	b9a34 <__ascii_mbtowc+0x16>
	...

000b9a44 <_Balloc>:
   b9a44:	b570      	push	{r4, r5, r6, lr}
   b9a46:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9a48:	4604      	mov	r4, r0
   b9a4a:	460d      	mov	r5, r1
   b9a4c:	b976      	cbnz	r6, b9a6c <_Balloc+0x28>
   b9a4e:	2010      	movs	r0, #16
   b9a50:	f7fc fbca 	bl	b61e8 <malloc>
   b9a54:	4602      	mov	r2, r0
   b9a56:	6260      	str	r0, [r4, #36]	; 0x24
   b9a58:	b920      	cbnz	r0, b9a64 <_Balloc+0x20>
   b9a5a:	4b18      	ldr	r3, [pc, #96]	; (b9abc <_Balloc+0x78>)
   b9a5c:	4818      	ldr	r0, [pc, #96]	; (b9ac0 <_Balloc+0x7c>)
   b9a5e:	2166      	movs	r1, #102	; 0x66
   b9a60:	f7fc fc02 	bl	b6268 <__assert_func>
   b9a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9a68:	6006      	str	r6, [r0, #0]
   b9a6a:	60c6      	str	r6, [r0, #12]
   b9a6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9a6e:	68f3      	ldr	r3, [r6, #12]
   b9a70:	b183      	cbz	r3, b9a94 <_Balloc+0x50>
   b9a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a74:	68db      	ldr	r3, [r3, #12]
   b9a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b9a7a:	b9b8      	cbnz	r0, b9aac <_Balloc+0x68>
   b9a7c:	2101      	movs	r1, #1
   b9a7e:	fa01 f605 	lsl.w	r6, r1, r5
   b9a82:	1d72      	adds	r2, r6, #5
   b9a84:	0092      	lsls	r2, r2, #2
   b9a86:	4620      	mov	r0, r4
   b9a88:	f000 fc9d 	bl	ba3c6 <_calloc_r>
   b9a8c:	b160      	cbz	r0, b9aa8 <_Balloc+0x64>
   b9a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b9a92:	e00e      	b.n	b9ab2 <_Balloc+0x6e>
   b9a94:	2221      	movs	r2, #33	; 0x21
   b9a96:	2104      	movs	r1, #4
   b9a98:	4620      	mov	r0, r4
   b9a9a:	f000 fc94 	bl	ba3c6 <_calloc_r>
   b9a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9aa0:	60f0      	str	r0, [r6, #12]
   b9aa2:	68db      	ldr	r3, [r3, #12]
   b9aa4:	2b00      	cmp	r3, #0
   b9aa6:	d1e4      	bne.n	b9a72 <_Balloc+0x2e>
   b9aa8:	2000      	movs	r0, #0
   b9aaa:	bd70      	pop	{r4, r5, r6, pc}
   b9aac:	6802      	ldr	r2, [r0, #0]
   b9aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b9ab2:	2300      	movs	r3, #0
   b9ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b9ab8:	e7f7      	b.n	b9aaa <_Balloc+0x66>
   b9aba:	bf00      	nop
   b9abc:	000bab8d 	.word	0x000bab8d
   b9ac0:	000bae2c 	.word	0x000bae2c

000b9ac4 <_Bfree>:
   b9ac4:	b570      	push	{r4, r5, r6, lr}
   b9ac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9ac8:	4605      	mov	r5, r0
   b9aca:	460c      	mov	r4, r1
   b9acc:	b976      	cbnz	r6, b9aec <_Bfree+0x28>
   b9ace:	2010      	movs	r0, #16
   b9ad0:	f7fc fb8a 	bl	b61e8 <malloc>
   b9ad4:	4602      	mov	r2, r0
   b9ad6:	6268      	str	r0, [r5, #36]	; 0x24
   b9ad8:	b920      	cbnz	r0, b9ae4 <_Bfree+0x20>
   b9ada:	4b09      	ldr	r3, [pc, #36]	; (b9b00 <_Bfree+0x3c>)
   b9adc:	4809      	ldr	r0, [pc, #36]	; (b9b04 <_Bfree+0x40>)
   b9ade:	218a      	movs	r1, #138	; 0x8a
   b9ae0:	f7fc fbc2 	bl	b6268 <__assert_func>
   b9ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9ae8:	6006      	str	r6, [r0, #0]
   b9aea:	60c6      	str	r6, [r0, #12]
   b9aec:	b13c      	cbz	r4, b9afe <_Bfree+0x3a>
   b9aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9af0:	6862      	ldr	r2, [r4, #4]
   b9af2:	68db      	ldr	r3, [r3, #12]
   b9af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9af8:	6021      	str	r1, [r4, #0]
   b9afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9afe:	bd70      	pop	{r4, r5, r6, pc}
   b9b00:	000bab8d 	.word	0x000bab8d
   b9b04:	000bae2c 	.word	0x000bae2c

000b9b08 <__multadd>:
   b9b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9b0c:	690d      	ldr	r5, [r1, #16]
   b9b0e:	4607      	mov	r7, r0
   b9b10:	460c      	mov	r4, r1
   b9b12:	461e      	mov	r6, r3
   b9b14:	f101 0c14 	add.w	ip, r1, #20
   b9b18:	2000      	movs	r0, #0
   b9b1a:	f8dc 3000 	ldr.w	r3, [ip]
   b9b1e:	b299      	uxth	r1, r3
   b9b20:	fb02 6101 	mla	r1, r2, r1, r6
   b9b24:	0c1e      	lsrs	r6, r3, #16
   b9b26:	0c0b      	lsrs	r3, r1, #16
   b9b28:	fb02 3306 	mla	r3, r2, r6, r3
   b9b2c:	b289      	uxth	r1, r1
   b9b2e:	3001      	adds	r0, #1
   b9b30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9b34:	4285      	cmp	r5, r0
   b9b36:	f84c 1b04 	str.w	r1, [ip], #4
   b9b3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9b3e:	dcec      	bgt.n	b9b1a <__multadd+0x12>
   b9b40:	b30e      	cbz	r6, b9b86 <__multadd+0x7e>
   b9b42:	68a3      	ldr	r3, [r4, #8]
   b9b44:	42ab      	cmp	r3, r5
   b9b46:	dc19      	bgt.n	b9b7c <__multadd+0x74>
   b9b48:	6861      	ldr	r1, [r4, #4]
   b9b4a:	4638      	mov	r0, r7
   b9b4c:	3101      	adds	r1, #1
   b9b4e:	f7ff ff79 	bl	b9a44 <_Balloc>
   b9b52:	4680      	mov	r8, r0
   b9b54:	b928      	cbnz	r0, b9b62 <__multadd+0x5a>
   b9b56:	4602      	mov	r2, r0
   b9b58:	4b0c      	ldr	r3, [pc, #48]	; (b9b8c <__multadd+0x84>)
   b9b5a:	480d      	ldr	r0, [pc, #52]	; (b9b90 <__multadd+0x88>)
   b9b5c:	21b5      	movs	r1, #181	; 0xb5
   b9b5e:	f7fc fb83 	bl	b6268 <__assert_func>
   b9b62:	6922      	ldr	r2, [r4, #16]
   b9b64:	3202      	adds	r2, #2
   b9b66:	f104 010c 	add.w	r1, r4, #12
   b9b6a:	0092      	lsls	r2, r2, #2
   b9b6c:	300c      	adds	r0, #12
   b9b6e:	f7fe fbdf 	bl	b8330 <memcpy>
   b9b72:	4621      	mov	r1, r4
   b9b74:	4638      	mov	r0, r7
   b9b76:	f7ff ffa5 	bl	b9ac4 <_Bfree>
   b9b7a:	4644      	mov	r4, r8
   b9b7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9b80:	3501      	adds	r5, #1
   b9b82:	615e      	str	r6, [r3, #20]
   b9b84:	6125      	str	r5, [r4, #16]
   b9b86:	4620      	mov	r0, r4
   b9b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9b8c:	000bad81 	.word	0x000bad81
   b9b90:	000bae2c 	.word	0x000bae2c

000b9b94 <__s2b>:
   b9b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9b98:	460c      	mov	r4, r1
   b9b9a:	4615      	mov	r5, r2
   b9b9c:	461f      	mov	r7, r3
   b9b9e:	2209      	movs	r2, #9
   b9ba0:	3308      	adds	r3, #8
   b9ba2:	4606      	mov	r6, r0
   b9ba4:	fb93 f3f2 	sdiv	r3, r3, r2
   b9ba8:	2100      	movs	r1, #0
   b9baa:	2201      	movs	r2, #1
   b9bac:	429a      	cmp	r2, r3
   b9bae:	db09      	blt.n	b9bc4 <__s2b+0x30>
   b9bb0:	4630      	mov	r0, r6
   b9bb2:	f7ff ff47 	bl	b9a44 <_Balloc>
   b9bb6:	b940      	cbnz	r0, b9bca <__s2b+0x36>
   b9bb8:	4602      	mov	r2, r0
   b9bba:	4b19      	ldr	r3, [pc, #100]	; (b9c20 <__s2b+0x8c>)
   b9bbc:	4819      	ldr	r0, [pc, #100]	; (b9c24 <__s2b+0x90>)
   b9bbe:	21ce      	movs	r1, #206	; 0xce
   b9bc0:	f7fc fb52 	bl	b6268 <__assert_func>
   b9bc4:	0052      	lsls	r2, r2, #1
   b9bc6:	3101      	adds	r1, #1
   b9bc8:	e7f0      	b.n	b9bac <__s2b+0x18>
   b9bca:	9b08      	ldr	r3, [sp, #32]
   b9bcc:	6143      	str	r3, [r0, #20]
   b9bce:	2d09      	cmp	r5, #9
   b9bd0:	f04f 0301 	mov.w	r3, #1
   b9bd4:	6103      	str	r3, [r0, #16]
   b9bd6:	dd16      	ble.n	b9c06 <__s2b+0x72>
   b9bd8:	f104 0909 	add.w	r9, r4, #9
   b9bdc:	46c8      	mov	r8, r9
   b9bde:	442c      	add	r4, r5
   b9be0:	f818 3b01 	ldrb.w	r3, [r8], #1
   b9be4:	4601      	mov	r1, r0
   b9be6:	3b30      	subs	r3, #48	; 0x30
   b9be8:	220a      	movs	r2, #10
   b9bea:	4630      	mov	r0, r6
   b9bec:	f7ff ff8c 	bl	b9b08 <__multadd>
   b9bf0:	45a0      	cmp	r8, r4
   b9bf2:	d1f5      	bne.n	b9be0 <__s2b+0x4c>
   b9bf4:	f1a5 0408 	sub.w	r4, r5, #8
   b9bf8:	444c      	add	r4, r9
   b9bfa:	1b2d      	subs	r5, r5, r4
   b9bfc:	1963      	adds	r3, r4, r5
   b9bfe:	42bb      	cmp	r3, r7
   b9c00:	db04      	blt.n	b9c0c <__s2b+0x78>
   b9c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9c06:	340a      	adds	r4, #10
   b9c08:	2509      	movs	r5, #9
   b9c0a:	e7f6      	b.n	b9bfa <__s2b+0x66>
   b9c0c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9c10:	4601      	mov	r1, r0
   b9c12:	3b30      	subs	r3, #48	; 0x30
   b9c14:	220a      	movs	r2, #10
   b9c16:	4630      	mov	r0, r6
   b9c18:	f7ff ff76 	bl	b9b08 <__multadd>
   b9c1c:	e7ee      	b.n	b9bfc <__s2b+0x68>
   b9c1e:	bf00      	nop
   b9c20:	000bad81 	.word	0x000bad81
   b9c24:	000bae2c 	.word	0x000bae2c

000b9c28 <__hi0bits>:
   b9c28:	0c03      	lsrs	r3, r0, #16
   b9c2a:	041b      	lsls	r3, r3, #16
   b9c2c:	b9d3      	cbnz	r3, b9c64 <__hi0bits+0x3c>
   b9c2e:	0400      	lsls	r0, r0, #16
   b9c30:	2310      	movs	r3, #16
   b9c32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9c36:	bf04      	itt	eq
   b9c38:	0200      	lsleq	r0, r0, #8
   b9c3a:	3308      	addeq	r3, #8
   b9c3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9c40:	bf04      	itt	eq
   b9c42:	0100      	lsleq	r0, r0, #4
   b9c44:	3304      	addeq	r3, #4
   b9c46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9c4a:	bf04      	itt	eq
   b9c4c:	0080      	lsleq	r0, r0, #2
   b9c4e:	3302      	addeq	r3, #2
   b9c50:	2800      	cmp	r0, #0
   b9c52:	db05      	blt.n	b9c60 <__hi0bits+0x38>
   b9c54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9c58:	f103 0301 	add.w	r3, r3, #1
   b9c5c:	bf08      	it	eq
   b9c5e:	2320      	moveq	r3, #32
   b9c60:	4618      	mov	r0, r3
   b9c62:	4770      	bx	lr
   b9c64:	2300      	movs	r3, #0
   b9c66:	e7e4      	b.n	b9c32 <__hi0bits+0xa>

000b9c68 <__lo0bits>:
   b9c68:	6803      	ldr	r3, [r0, #0]
   b9c6a:	f013 0207 	ands.w	r2, r3, #7
   b9c6e:	4601      	mov	r1, r0
   b9c70:	d00b      	beq.n	b9c8a <__lo0bits+0x22>
   b9c72:	07da      	lsls	r2, r3, #31
   b9c74:	d423      	bmi.n	b9cbe <__lo0bits+0x56>
   b9c76:	0798      	lsls	r0, r3, #30
   b9c78:	bf49      	itett	mi
   b9c7a:	085b      	lsrmi	r3, r3, #1
   b9c7c:	089b      	lsrpl	r3, r3, #2
   b9c7e:	2001      	movmi	r0, #1
   b9c80:	600b      	strmi	r3, [r1, #0]
   b9c82:	bf5c      	itt	pl
   b9c84:	600b      	strpl	r3, [r1, #0]
   b9c86:	2002      	movpl	r0, #2
   b9c88:	4770      	bx	lr
   b9c8a:	b298      	uxth	r0, r3
   b9c8c:	b9a8      	cbnz	r0, b9cba <__lo0bits+0x52>
   b9c8e:	0c1b      	lsrs	r3, r3, #16
   b9c90:	2010      	movs	r0, #16
   b9c92:	b2da      	uxtb	r2, r3
   b9c94:	b90a      	cbnz	r2, b9c9a <__lo0bits+0x32>
   b9c96:	3008      	adds	r0, #8
   b9c98:	0a1b      	lsrs	r3, r3, #8
   b9c9a:	071a      	lsls	r2, r3, #28
   b9c9c:	bf04      	itt	eq
   b9c9e:	091b      	lsreq	r3, r3, #4
   b9ca0:	3004      	addeq	r0, #4
   b9ca2:	079a      	lsls	r2, r3, #30
   b9ca4:	bf04      	itt	eq
   b9ca6:	089b      	lsreq	r3, r3, #2
   b9ca8:	3002      	addeq	r0, #2
   b9caa:	07da      	lsls	r2, r3, #31
   b9cac:	d403      	bmi.n	b9cb6 <__lo0bits+0x4e>
   b9cae:	085b      	lsrs	r3, r3, #1
   b9cb0:	f100 0001 	add.w	r0, r0, #1
   b9cb4:	d005      	beq.n	b9cc2 <__lo0bits+0x5a>
   b9cb6:	600b      	str	r3, [r1, #0]
   b9cb8:	4770      	bx	lr
   b9cba:	4610      	mov	r0, r2
   b9cbc:	e7e9      	b.n	b9c92 <__lo0bits+0x2a>
   b9cbe:	2000      	movs	r0, #0
   b9cc0:	4770      	bx	lr
   b9cc2:	2020      	movs	r0, #32
   b9cc4:	4770      	bx	lr
	...

000b9cc8 <__i2b>:
   b9cc8:	b510      	push	{r4, lr}
   b9cca:	460c      	mov	r4, r1
   b9ccc:	2101      	movs	r1, #1
   b9cce:	f7ff feb9 	bl	b9a44 <_Balloc>
   b9cd2:	4602      	mov	r2, r0
   b9cd4:	b928      	cbnz	r0, b9ce2 <__i2b+0x1a>
   b9cd6:	4b05      	ldr	r3, [pc, #20]	; (b9cec <__i2b+0x24>)
   b9cd8:	4805      	ldr	r0, [pc, #20]	; (b9cf0 <__i2b+0x28>)
   b9cda:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9cde:	f7fc fac3 	bl	b6268 <__assert_func>
   b9ce2:	2301      	movs	r3, #1
   b9ce4:	6144      	str	r4, [r0, #20]
   b9ce6:	6103      	str	r3, [r0, #16]
   b9ce8:	bd10      	pop	{r4, pc}
   b9cea:	bf00      	nop
   b9cec:	000bad81 	.word	0x000bad81
   b9cf0:	000bae2c 	.word	0x000bae2c

000b9cf4 <__multiply>:
   b9cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9cf8:	4691      	mov	r9, r2
   b9cfa:	690a      	ldr	r2, [r1, #16]
   b9cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9d00:	429a      	cmp	r2, r3
   b9d02:	bfb8      	it	lt
   b9d04:	460b      	movlt	r3, r1
   b9d06:	460c      	mov	r4, r1
   b9d08:	bfbc      	itt	lt
   b9d0a:	464c      	movlt	r4, r9
   b9d0c:	4699      	movlt	r9, r3
   b9d0e:	6927      	ldr	r7, [r4, #16]
   b9d10:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9d14:	68a3      	ldr	r3, [r4, #8]
   b9d16:	6861      	ldr	r1, [r4, #4]
   b9d18:	eb07 060a 	add.w	r6, r7, sl
   b9d1c:	42b3      	cmp	r3, r6
   b9d1e:	b085      	sub	sp, #20
   b9d20:	bfb8      	it	lt
   b9d22:	3101      	addlt	r1, #1
   b9d24:	f7ff fe8e 	bl	b9a44 <_Balloc>
   b9d28:	b930      	cbnz	r0, b9d38 <__multiply+0x44>
   b9d2a:	4602      	mov	r2, r0
   b9d2c:	4b44      	ldr	r3, [pc, #272]	; (b9e40 <__multiply+0x14c>)
   b9d2e:	4845      	ldr	r0, [pc, #276]	; (b9e44 <__multiply+0x150>)
   b9d30:	f240 115d 	movw	r1, #349	; 0x15d
   b9d34:	f7fc fa98 	bl	b6268 <__assert_func>
   b9d38:	f100 0514 	add.w	r5, r0, #20
   b9d3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9d40:	462b      	mov	r3, r5
   b9d42:	2200      	movs	r2, #0
   b9d44:	4543      	cmp	r3, r8
   b9d46:	d321      	bcc.n	b9d8c <__multiply+0x98>
   b9d48:	f104 0314 	add.w	r3, r4, #20
   b9d4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9d50:	f109 0314 	add.w	r3, r9, #20
   b9d54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9d58:	9202      	str	r2, [sp, #8]
   b9d5a:	1b3a      	subs	r2, r7, r4
   b9d5c:	3a15      	subs	r2, #21
   b9d5e:	f022 0203 	bic.w	r2, r2, #3
   b9d62:	3204      	adds	r2, #4
   b9d64:	f104 0115 	add.w	r1, r4, #21
   b9d68:	428f      	cmp	r7, r1
   b9d6a:	bf38      	it	cc
   b9d6c:	2204      	movcc	r2, #4
   b9d6e:	9201      	str	r2, [sp, #4]
   b9d70:	9a02      	ldr	r2, [sp, #8]
   b9d72:	9303      	str	r3, [sp, #12]
   b9d74:	429a      	cmp	r2, r3
   b9d76:	d80c      	bhi.n	b9d92 <__multiply+0x9e>
   b9d78:	2e00      	cmp	r6, #0
   b9d7a:	dd03      	ble.n	b9d84 <__multiply+0x90>
   b9d7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9d80:	2b00      	cmp	r3, #0
   b9d82:	d05a      	beq.n	b9e3a <__multiply+0x146>
   b9d84:	6106      	str	r6, [r0, #16]
   b9d86:	b005      	add	sp, #20
   b9d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9d8c:	f843 2b04 	str.w	r2, [r3], #4
   b9d90:	e7d8      	b.n	b9d44 <__multiply+0x50>
   b9d92:	f8b3 a000 	ldrh.w	sl, [r3]
   b9d96:	f1ba 0f00 	cmp.w	sl, #0
   b9d9a:	d024      	beq.n	b9de6 <__multiply+0xf2>
   b9d9c:	f104 0e14 	add.w	lr, r4, #20
   b9da0:	46a9      	mov	r9, r5
   b9da2:	f04f 0c00 	mov.w	ip, #0
   b9da6:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9daa:	f8d9 1000 	ldr.w	r1, [r9]
   b9dae:	fa1f fb82 	uxth.w	fp, r2
   b9db2:	b289      	uxth	r1, r1
   b9db4:	fb0a 110b 	mla	r1, sl, fp, r1
   b9db8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9dbc:	f8d9 2000 	ldr.w	r2, [r9]
   b9dc0:	4461      	add	r1, ip
   b9dc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9dc6:	fb0a c20b 	mla	r2, sl, fp, ip
   b9dca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9dce:	b289      	uxth	r1, r1
   b9dd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b9dd4:	4577      	cmp	r7, lr
   b9dd6:	f849 1b04 	str.w	r1, [r9], #4
   b9dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9dde:	d8e2      	bhi.n	b9da6 <__multiply+0xb2>
   b9de0:	9a01      	ldr	r2, [sp, #4]
   b9de2:	f845 c002 	str.w	ip, [r5, r2]
   b9de6:	9a03      	ldr	r2, [sp, #12]
   b9de8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9dec:	3304      	adds	r3, #4
   b9dee:	f1b9 0f00 	cmp.w	r9, #0
   b9df2:	d020      	beq.n	b9e36 <__multiply+0x142>
   b9df4:	6829      	ldr	r1, [r5, #0]
   b9df6:	f104 0c14 	add.w	ip, r4, #20
   b9dfa:	46ae      	mov	lr, r5
   b9dfc:	f04f 0a00 	mov.w	sl, #0
   b9e00:	f8bc b000 	ldrh.w	fp, [ip]
   b9e04:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9e08:	fb09 220b 	mla	r2, r9, fp, r2
   b9e0c:	4492      	add	sl, r2
   b9e0e:	b289      	uxth	r1, r1
   b9e10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9e14:	f84e 1b04 	str.w	r1, [lr], #4
   b9e18:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9e1c:	f8be 1000 	ldrh.w	r1, [lr]
   b9e20:	0c12      	lsrs	r2, r2, #16
   b9e22:	fb09 1102 	mla	r1, r9, r2, r1
   b9e26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9e2a:	4567      	cmp	r7, ip
   b9e2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9e30:	d8e6      	bhi.n	b9e00 <__multiply+0x10c>
   b9e32:	9a01      	ldr	r2, [sp, #4]
   b9e34:	50a9      	str	r1, [r5, r2]
   b9e36:	3504      	adds	r5, #4
   b9e38:	e79a      	b.n	b9d70 <__multiply+0x7c>
   b9e3a:	3e01      	subs	r6, #1
   b9e3c:	e79c      	b.n	b9d78 <__multiply+0x84>
   b9e3e:	bf00      	nop
   b9e40:	000bad81 	.word	0x000bad81
   b9e44:	000bae2c 	.word	0x000bae2c

000b9e48 <__pow5mult>:
   b9e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9e4c:	4615      	mov	r5, r2
   b9e4e:	f012 0203 	ands.w	r2, r2, #3
   b9e52:	4606      	mov	r6, r0
   b9e54:	460f      	mov	r7, r1
   b9e56:	d007      	beq.n	b9e68 <__pow5mult+0x20>
   b9e58:	4c25      	ldr	r4, [pc, #148]	; (b9ef0 <__pow5mult+0xa8>)
   b9e5a:	3a01      	subs	r2, #1
   b9e5c:	2300      	movs	r3, #0
   b9e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9e62:	f7ff fe51 	bl	b9b08 <__multadd>
   b9e66:	4607      	mov	r7, r0
   b9e68:	10ad      	asrs	r5, r5, #2
   b9e6a:	d03d      	beq.n	b9ee8 <__pow5mult+0xa0>
   b9e6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9e6e:	b97c      	cbnz	r4, b9e90 <__pow5mult+0x48>
   b9e70:	2010      	movs	r0, #16
   b9e72:	f7fc f9b9 	bl	b61e8 <malloc>
   b9e76:	4602      	mov	r2, r0
   b9e78:	6270      	str	r0, [r6, #36]	; 0x24
   b9e7a:	b928      	cbnz	r0, b9e88 <__pow5mult+0x40>
   b9e7c:	4b1d      	ldr	r3, [pc, #116]	; (b9ef4 <__pow5mult+0xac>)
   b9e7e:	481e      	ldr	r0, [pc, #120]	; (b9ef8 <__pow5mult+0xb0>)
   b9e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b9e84:	f7fc f9f0 	bl	b6268 <__assert_func>
   b9e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9e8c:	6004      	str	r4, [r0, #0]
   b9e8e:	60c4      	str	r4, [r0, #12]
   b9e90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b9e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9e98:	b94c      	cbnz	r4, b9eae <__pow5mult+0x66>
   b9e9a:	f240 2171 	movw	r1, #625	; 0x271
   b9e9e:	4630      	mov	r0, r6
   b9ea0:	f7ff ff12 	bl	b9cc8 <__i2b>
   b9ea4:	2300      	movs	r3, #0
   b9ea6:	f8c8 0008 	str.w	r0, [r8, #8]
   b9eaa:	4604      	mov	r4, r0
   b9eac:	6003      	str	r3, [r0, #0]
   b9eae:	f04f 0900 	mov.w	r9, #0
   b9eb2:	07eb      	lsls	r3, r5, #31
   b9eb4:	d50a      	bpl.n	b9ecc <__pow5mult+0x84>
   b9eb6:	4639      	mov	r1, r7
   b9eb8:	4622      	mov	r2, r4
   b9eba:	4630      	mov	r0, r6
   b9ebc:	f7ff ff1a 	bl	b9cf4 <__multiply>
   b9ec0:	4639      	mov	r1, r7
   b9ec2:	4680      	mov	r8, r0
   b9ec4:	4630      	mov	r0, r6
   b9ec6:	f7ff fdfd 	bl	b9ac4 <_Bfree>
   b9eca:	4647      	mov	r7, r8
   b9ecc:	106d      	asrs	r5, r5, #1
   b9ece:	d00b      	beq.n	b9ee8 <__pow5mult+0xa0>
   b9ed0:	6820      	ldr	r0, [r4, #0]
   b9ed2:	b938      	cbnz	r0, b9ee4 <__pow5mult+0x9c>
   b9ed4:	4622      	mov	r2, r4
   b9ed6:	4621      	mov	r1, r4
   b9ed8:	4630      	mov	r0, r6
   b9eda:	f7ff ff0b 	bl	b9cf4 <__multiply>
   b9ede:	6020      	str	r0, [r4, #0]
   b9ee0:	f8c0 9000 	str.w	r9, [r0]
   b9ee4:	4604      	mov	r4, r0
   b9ee6:	e7e4      	b.n	b9eb2 <__pow5mult+0x6a>
   b9ee8:	4638      	mov	r0, r7
   b9eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9eee:	bf00      	nop
   b9ef0:	000bafa0 	.word	0x000bafa0
   b9ef4:	000bab8d 	.word	0x000bab8d
   b9ef8:	000bae2c 	.word	0x000bae2c

000b9efc <__lshift>:
   b9efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9f00:	460c      	mov	r4, r1
   b9f02:	6849      	ldr	r1, [r1, #4]
   b9f04:	6923      	ldr	r3, [r4, #16]
   b9f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9f0a:	68a3      	ldr	r3, [r4, #8]
   b9f0c:	4607      	mov	r7, r0
   b9f0e:	4691      	mov	r9, r2
   b9f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9f14:	f108 0601 	add.w	r6, r8, #1
   b9f18:	42b3      	cmp	r3, r6
   b9f1a:	db0b      	blt.n	b9f34 <__lshift+0x38>
   b9f1c:	4638      	mov	r0, r7
   b9f1e:	f7ff fd91 	bl	b9a44 <_Balloc>
   b9f22:	4605      	mov	r5, r0
   b9f24:	b948      	cbnz	r0, b9f3a <__lshift+0x3e>
   b9f26:	4602      	mov	r2, r0
   b9f28:	4b2a      	ldr	r3, [pc, #168]	; (b9fd4 <__lshift+0xd8>)
   b9f2a:	482b      	ldr	r0, [pc, #172]	; (b9fd8 <__lshift+0xdc>)
   b9f2c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9f30:	f7fc f99a 	bl	b6268 <__assert_func>
   b9f34:	3101      	adds	r1, #1
   b9f36:	005b      	lsls	r3, r3, #1
   b9f38:	e7ee      	b.n	b9f18 <__lshift+0x1c>
   b9f3a:	2300      	movs	r3, #0
   b9f3c:	f100 0114 	add.w	r1, r0, #20
   b9f40:	f100 0210 	add.w	r2, r0, #16
   b9f44:	4618      	mov	r0, r3
   b9f46:	4553      	cmp	r3, sl
   b9f48:	db37      	blt.n	b9fba <__lshift+0xbe>
   b9f4a:	6920      	ldr	r0, [r4, #16]
   b9f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9f50:	f104 0314 	add.w	r3, r4, #20
   b9f54:	f019 091f 	ands.w	r9, r9, #31
   b9f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9f5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9f60:	d02f      	beq.n	b9fc2 <__lshift+0xc6>
   b9f62:	f1c9 0e20 	rsb	lr, r9, #32
   b9f66:	468a      	mov	sl, r1
   b9f68:	f04f 0c00 	mov.w	ip, #0
   b9f6c:	681a      	ldr	r2, [r3, #0]
   b9f6e:	fa02 f209 	lsl.w	r2, r2, r9
   b9f72:	ea42 020c 	orr.w	r2, r2, ip
   b9f76:	f84a 2b04 	str.w	r2, [sl], #4
   b9f7a:	f853 2b04 	ldr.w	r2, [r3], #4
   b9f7e:	4298      	cmp	r0, r3
   b9f80:	fa22 fc0e 	lsr.w	ip, r2, lr
   b9f84:	d8f2      	bhi.n	b9f6c <__lshift+0x70>
   b9f86:	1b03      	subs	r3, r0, r4
   b9f88:	3b15      	subs	r3, #21
   b9f8a:	f023 0303 	bic.w	r3, r3, #3
   b9f8e:	3304      	adds	r3, #4
   b9f90:	f104 0215 	add.w	r2, r4, #21
   b9f94:	4290      	cmp	r0, r2
   b9f96:	bf38      	it	cc
   b9f98:	2304      	movcc	r3, #4
   b9f9a:	f841 c003 	str.w	ip, [r1, r3]
   b9f9e:	f1bc 0f00 	cmp.w	ip, #0
   b9fa2:	d001      	beq.n	b9fa8 <__lshift+0xac>
   b9fa4:	f108 0602 	add.w	r6, r8, #2
   b9fa8:	3e01      	subs	r6, #1
   b9faa:	4638      	mov	r0, r7
   b9fac:	612e      	str	r6, [r5, #16]
   b9fae:	4621      	mov	r1, r4
   b9fb0:	f7ff fd88 	bl	b9ac4 <_Bfree>
   b9fb4:	4628      	mov	r0, r5
   b9fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9fba:	f842 0f04 	str.w	r0, [r2, #4]!
   b9fbe:	3301      	adds	r3, #1
   b9fc0:	e7c1      	b.n	b9f46 <__lshift+0x4a>
   b9fc2:	3904      	subs	r1, #4
   b9fc4:	f853 2b04 	ldr.w	r2, [r3], #4
   b9fc8:	f841 2f04 	str.w	r2, [r1, #4]!
   b9fcc:	4298      	cmp	r0, r3
   b9fce:	d8f9      	bhi.n	b9fc4 <__lshift+0xc8>
   b9fd0:	e7ea      	b.n	b9fa8 <__lshift+0xac>
   b9fd2:	bf00      	nop
   b9fd4:	000bad81 	.word	0x000bad81
   b9fd8:	000bae2c 	.word	0x000bae2c

000b9fdc <__mcmp>:
   b9fdc:	b530      	push	{r4, r5, lr}
   b9fde:	6902      	ldr	r2, [r0, #16]
   b9fe0:	690c      	ldr	r4, [r1, #16]
   b9fe2:	1b12      	subs	r2, r2, r4
   b9fe4:	d10e      	bne.n	ba004 <__mcmp+0x28>
   b9fe6:	f100 0314 	add.w	r3, r0, #20
   b9fea:	3114      	adds	r1, #20
   b9fec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9ff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b9ff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9ff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9ffc:	42a5      	cmp	r5, r4
   b9ffe:	d003      	beq.n	ba008 <__mcmp+0x2c>
   ba000:	d305      	bcc.n	ba00e <__mcmp+0x32>
   ba002:	2201      	movs	r2, #1
   ba004:	4610      	mov	r0, r2
   ba006:	bd30      	pop	{r4, r5, pc}
   ba008:	4283      	cmp	r3, r0
   ba00a:	d3f3      	bcc.n	b9ff4 <__mcmp+0x18>
   ba00c:	e7fa      	b.n	ba004 <__mcmp+0x28>
   ba00e:	f04f 32ff 	mov.w	r2, #4294967295
   ba012:	e7f7      	b.n	ba004 <__mcmp+0x28>

000ba014 <__mdiff>:
   ba014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba018:	460c      	mov	r4, r1
   ba01a:	4606      	mov	r6, r0
   ba01c:	4611      	mov	r1, r2
   ba01e:	4620      	mov	r0, r4
   ba020:	4690      	mov	r8, r2
   ba022:	f7ff ffdb 	bl	b9fdc <__mcmp>
   ba026:	1e05      	subs	r5, r0, #0
   ba028:	d110      	bne.n	ba04c <__mdiff+0x38>
   ba02a:	4629      	mov	r1, r5
   ba02c:	4630      	mov	r0, r6
   ba02e:	f7ff fd09 	bl	b9a44 <_Balloc>
   ba032:	b930      	cbnz	r0, ba042 <__mdiff+0x2e>
   ba034:	4b3a      	ldr	r3, [pc, #232]	; (ba120 <__mdiff+0x10c>)
   ba036:	4602      	mov	r2, r0
   ba038:	f240 2132 	movw	r1, #562	; 0x232
   ba03c:	4839      	ldr	r0, [pc, #228]	; (ba124 <__mdiff+0x110>)
   ba03e:	f7fc f913 	bl	b6268 <__assert_func>
   ba042:	2301      	movs	r3, #1
   ba044:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ba048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba04c:	bfa4      	itt	ge
   ba04e:	4643      	movge	r3, r8
   ba050:	46a0      	movge	r8, r4
   ba052:	4630      	mov	r0, r6
   ba054:	f8d8 1004 	ldr.w	r1, [r8, #4]
   ba058:	bfa6      	itte	ge
   ba05a:	461c      	movge	r4, r3
   ba05c:	2500      	movge	r5, #0
   ba05e:	2501      	movlt	r5, #1
   ba060:	f7ff fcf0 	bl	b9a44 <_Balloc>
   ba064:	b920      	cbnz	r0, ba070 <__mdiff+0x5c>
   ba066:	4b2e      	ldr	r3, [pc, #184]	; (ba120 <__mdiff+0x10c>)
   ba068:	4602      	mov	r2, r0
   ba06a:	f44f 7110 	mov.w	r1, #576	; 0x240
   ba06e:	e7e5      	b.n	ba03c <__mdiff+0x28>
   ba070:	f8d8 7010 	ldr.w	r7, [r8, #16]
   ba074:	6926      	ldr	r6, [r4, #16]
   ba076:	60c5      	str	r5, [r0, #12]
   ba078:	f104 0914 	add.w	r9, r4, #20
   ba07c:	f108 0514 	add.w	r5, r8, #20
   ba080:	f100 0e14 	add.w	lr, r0, #20
   ba084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   ba088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   ba08c:	f108 0210 	add.w	r2, r8, #16
   ba090:	46f2      	mov	sl, lr
   ba092:	2100      	movs	r1, #0
   ba094:	f859 3b04 	ldr.w	r3, [r9], #4
   ba098:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ba09c:	fa1f f883 	uxth.w	r8, r3
   ba0a0:	fa11 f18b 	uxtah	r1, r1, fp
   ba0a4:	0c1b      	lsrs	r3, r3, #16
   ba0a6:	eba1 0808 	sub.w	r8, r1, r8
   ba0aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ba0ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ba0b2:	fa1f f888 	uxth.w	r8, r8
   ba0b6:	1419      	asrs	r1, r3, #16
   ba0b8:	454e      	cmp	r6, r9
   ba0ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ba0be:	f84a 3b04 	str.w	r3, [sl], #4
   ba0c2:	d8e7      	bhi.n	ba094 <__mdiff+0x80>
   ba0c4:	1b33      	subs	r3, r6, r4
   ba0c6:	3b15      	subs	r3, #21
   ba0c8:	f023 0303 	bic.w	r3, r3, #3
   ba0cc:	3304      	adds	r3, #4
   ba0ce:	3415      	adds	r4, #21
   ba0d0:	42a6      	cmp	r6, r4
   ba0d2:	bf38      	it	cc
   ba0d4:	2304      	movcc	r3, #4
   ba0d6:	441d      	add	r5, r3
   ba0d8:	4473      	add	r3, lr
   ba0da:	469e      	mov	lr, r3
   ba0dc:	462e      	mov	r6, r5
   ba0de:	4566      	cmp	r6, ip
   ba0e0:	d30e      	bcc.n	ba100 <__mdiff+0xec>
   ba0e2:	f10c 0203 	add.w	r2, ip, #3
   ba0e6:	1b52      	subs	r2, r2, r5
   ba0e8:	f022 0203 	bic.w	r2, r2, #3
   ba0ec:	3d03      	subs	r5, #3
   ba0ee:	45ac      	cmp	ip, r5
   ba0f0:	bf38      	it	cc
   ba0f2:	2200      	movcc	r2, #0
   ba0f4:	441a      	add	r2, r3
   ba0f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ba0fa:	b17b      	cbz	r3, ba11c <__mdiff+0x108>
   ba0fc:	6107      	str	r7, [r0, #16]
   ba0fe:	e7a3      	b.n	ba048 <__mdiff+0x34>
   ba100:	f856 8b04 	ldr.w	r8, [r6], #4
   ba104:	fa11 f288 	uxtah	r2, r1, r8
   ba108:	1414      	asrs	r4, r2, #16
   ba10a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   ba10e:	b292      	uxth	r2, r2
   ba110:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   ba114:	f84e 2b04 	str.w	r2, [lr], #4
   ba118:	1421      	asrs	r1, r4, #16
   ba11a:	e7e0      	b.n	ba0de <__mdiff+0xca>
   ba11c:	3f01      	subs	r7, #1
   ba11e:	e7ea      	b.n	ba0f6 <__mdiff+0xe2>
   ba120:	000bad81 	.word	0x000bad81
   ba124:	000bae2c 	.word	0x000bae2c

000ba128 <__ulp>:
   ba128:	b082      	sub	sp, #8
   ba12a:	ed8d 0b00 	vstr	d0, [sp]
   ba12e:	9b01      	ldr	r3, [sp, #4]
   ba130:	4912      	ldr	r1, [pc, #72]	; (ba17c <__ulp+0x54>)
   ba132:	4019      	ands	r1, r3
   ba134:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ba138:	2900      	cmp	r1, #0
   ba13a:	dd05      	ble.n	ba148 <__ulp+0x20>
   ba13c:	2200      	movs	r2, #0
   ba13e:	460b      	mov	r3, r1
   ba140:	ec43 2b10 	vmov	d0, r2, r3
   ba144:	b002      	add	sp, #8
   ba146:	4770      	bx	lr
   ba148:	4249      	negs	r1, r1
   ba14a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ba14e:	ea4f 5021 	mov.w	r0, r1, asr #20
   ba152:	f04f 0200 	mov.w	r2, #0
   ba156:	f04f 0300 	mov.w	r3, #0
   ba15a:	da04      	bge.n	ba166 <__ulp+0x3e>
   ba15c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ba160:	fa41 f300 	asr.w	r3, r1, r0
   ba164:	e7ec      	b.n	ba140 <__ulp+0x18>
   ba166:	f1a0 0114 	sub.w	r1, r0, #20
   ba16a:	291e      	cmp	r1, #30
   ba16c:	bfda      	itte	le
   ba16e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ba172:	fa20 f101 	lsrle.w	r1, r0, r1
   ba176:	2101      	movgt	r1, #1
   ba178:	460a      	mov	r2, r1
   ba17a:	e7e1      	b.n	ba140 <__ulp+0x18>
   ba17c:	7ff00000 	.word	0x7ff00000

000ba180 <__b2d>:
   ba180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba182:	6905      	ldr	r5, [r0, #16]
   ba184:	f100 0714 	add.w	r7, r0, #20
   ba188:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ba18c:	1f2e      	subs	r6, r5, #4
   ba18e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ba192:	4620      	mov	r0, r4
   ba194:	f7ff fd48 	bl	b9c28 <__hi0bits>
   ba198:	f1c0 0320 	rsb	r3, r0, #32
   ba19c:	280a      	cmp	r0, #10
   ba19e:	f8df c07c 	ldr.w	ip, [pc, #124]	; ba21c <__b2d+0x9c>
   ba1a2:	600b      	str	r3, [r1, #0]
   ba1a4:	dc14      	bgt.n	ba1d0 <__b2d+0x50>
   ba1a6:	f1c0 0e0b 	rsb	lr, r0, #11
   ba1aa:	fa24 f10e 	lsr.w	r1, r4, lr
   ba1ae:	42b7      	cmp	r7, r6
   ba1b0:	ea41 030c 	orr.w	r3, r1, ip
   ba1b4:	bf34      	ite	cc
   ba1b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba1ba:	2100      	movcs	r1, #0
   ba1bc:	3015      	adds	r0, #21
   ba1be:	fa04 f000 	lsl.w	r0, r4, r0
   ba1c2:	fa21 f10e 	lsr.w	r1, r1, lr
   ba1c6:	ea40 0201 	orr.w	r2, r0, r1
   ba1ca:	ec43 2b10 	vmov	d0, r2, r3
   ba1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba1d0:	42b7      	cmp	r7, r6
   ba1d2:	bf3a      	itte	cc
   ba1d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba1d8:	f1a5 0608 	subcc.w	r6, r5, #8
   ba1dc:	2100      	movcs	r1, #0
   ba1de:	380b      	subs	r0, #11
   ba1e0:	d017      	beq.n	ba212 <__b2d+0x92>
   ba1e2:	f1c0 0c20 	rsb	ip, r0, #32
   ba1e6:	fa04 f500 	lsl.w	r5, r4, r0
   ba1ea:	42be      	cmp	r6, r7
   ba1ec:	fa21 f40c 	lsr.w	r4, r1, ip
   ba1f0:	ea45 0504 	orr.w	r5, r5, r4
   ba1f4:	bf8c      	ite	hi
   ba1f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ba1fa:	2400      	movls	r4, #0
   ba1fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ba200:	fa01 f000 	lsl.w	r0, r1, r0
   ba204:	fa24 f40c 	lsr.w	r4, r4, ip
   ba208:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ba20c:	ea40 0204 	orr.w	r2, r0, r4
   ba210:	e7db      	b.n	ba1ca <__b2d+0x4a>
   ba212:	ea44 030c 	orr.w	r3, r4, ip
   ba216:	460a      	mov	r2, r1
   ba218:	e7d7      	b.n	ba1ca <__b2d+0x4a>
   ba21a:	bf00      	nop
   ba21c:	3ff00000 	.word	0x3ff00000

000ba220 <__d2b>:
   ba220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba224:	4689      	mov	r9, r1
   ba226:	2101      	movs	r1, #1
   ba228:	ec57 6b10 	vmov	r6, r7, d0
   ba22c:	4690      	mov	r8, r2
   ba22e:	f7ff fc09 	bl	b9a44 <_Balloc>
   ba232:	4604      	mov	r4, r0
   ba234:	b930      	cbnz	r0, ba244 <__d2b+0x24>
   ba236:	4602      	mov	r2, r0
   ba238:	4b25      	ldr	r3, [pc, #148]	; (ba2d0 <__d2b+0xb0>)
   ba23a:	4826      	ldr	r0, [pc, #152]	; (ba2d4 <__d2b+0xb4>)
   ba23c:	f240 310a 	movw	r1, #778	; 0x30a
   ba240:	f7fc f812 	bl	b6268 <__assert_func>
   ba244:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ba248:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ba24c:	bb35      	cbnz	r5, ba29c <__d2b+0x7c>
   ba24e:	2e00      	cmp	r6, #0
   ba250:	9301      	str	r3, [sp, #4]
   ba252:	d028      	beq.n	ba2a6 <__d2b+0x86>
   ba254:	4668      	mov	r0, sp
   ba256:	9600      	str	r6, [sp, #0]
   ba258:	f7ff fd06 	bl	b9c68 <__lo0bits>
   ba25c:	9900      	ldr	r1, [sp, #0]
   ba25e:	b300      	cbz	r0, ba2a2 <__d2b+0x82>
   ba260:	9a01      	ldr	r2, [sp, #4]
   ba262:	f1c0 0320 	rsb	r3, r0, #32
   ba266:	fa02 f303 	lsl.w	r3, r2, r3
   ba26a:	430b      	orrs	r3, r1
   ba26c:	40c2      	lsrs	r2, r0
   ba26e:	6163      	str	r3, [r4, #20]
   ba270:	9201      	str	r2, [sp, #4]
   ba272:	9b01      	ldr	r3, [sp, #4]
   ba274:	61a3      	str	r3, [r4, #24]
   ba276:	2b00      	cmp	r3, #0
   ba278:	bf14      	ite	ne
   ba27a:	2202      	movne	r2, #2
   ba27c:	2201      	moveq	r2, #1
   ba27e:	6122      	str	r2, [r4, #16]
   ba280:	b1d5      	cbz	r5, ba2b8 <__d2b+0x98>
   ba282:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ba286:	4405      	add	r5, r0
   ba288:	f8c9 5000 	str.w	r5, [r9]
   ba28c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ba290:	f8c8 0000 	str.w	r0, [r8]
   ba294:	4620      	mov	r0, r4
   ba296:	b003      	add	sp, #12
   ba298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba29c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba2a0:	e7d5      	b.n	ba24e <__d2b+0x2e>
   ba2a2:	6161      	str	r1, [r4, #20]
   ba2a4:	e7e5      	b.n	ba272 <__d2b+0x52>
   ba2a6:	a801      	add	r0, sp, #4
   ba2a8:	f7ff fcde 	bl	b9c68 <__lo0bits>
   ba2ac:	9b01      	ldr	r3, [sp, #4]
   ba2ae:	6163      	str	r3, [r4, #20]
   ba2b0:	2201      	movs	r2, #1
   ba2b2:	6122      	str	r2, [r4, #16]
   ba2b4:	3020      	adds	r0, #32
   ba2b6:	e7e3      	b.n	ba280 <__d2b+0x60>
   ba2b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ba2bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ba2c0:	f8c9 0000 	str.w	r0, [r9]
   ba2c4:	6918      	ldr	r0, [r3, #16]
   ba2c6:	f7ff fcaf 	bl	b9c28 <__hi0bits>
   ba2ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ba2ce:	e7df      	b.n	ba290 <__d2b+0x70>
   ba2d0:	000bad81 	.word	0x000bad81
   ba2d4:	000bae2c 	.word	0x000bae2c

000ba2d8 <__ratio>:
   ba2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba2dc:	4688      	mov	r8, r1
   ba2de:	4669      	mov	r1, sp
   ba2e0:	4681      	mov	r9, r0
   ba2e2:	f7ff ff4d 	bl	ba180 <__b2d>
   ba2e6:	a901      	add	r1, sp, #4
   ba2e8:	4640      	mov	r0, r8
   ba2ea:	ec55 4b10 	vmov	r4, r5, d0
   ba2ee:	f7ff ff47 	bl	ba180 <__b2d>
   ba2f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba2f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ba2fa:	eba3 0c02 	sub.w	ip, r3, r2
   ba2fe:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba302:	1a9b      	subs	r3, r3, r2
   ba304:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ba308:	ec51 0b10 	vmov	r0, r1, d0
   ba30c:	2b00      	cmp	r3, #0
   ba30e:	bfd6      	itet	le
   ba310:	460a      	movle	r2, r1
   ba312:	462a      	movgt	r2, r5
   ba314:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ba318:	468b      	mov	fp, r1
   ba31a:	462f      	mov	r7, r5
   ba31c:	bfd4      	ite	le
   ba31e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ba322:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ba326:	4620      	mov	r0, r4
   ba328:	ee10 2a10 	vmov	r2, s0
   ba32c:	465b      	mov	r3, fp
   ba32e:	4639      	mov	r1, r7
   ba330:	f7fa f95c 	bl	b45ec <__aeabi_ddiv>
   ba334:	ec41 0b10 	vmov	d0, r0, r1
   ba338:	b003      	add	sp, #12
   ba33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba33e <__copybits>:
   ba33e:	3901      	subs	r1, #1
   ba340:	b570      	push	{r4, r5, r6, lr}
   ba342:	1149      	asrs	r1, r1, #5
   ba344:	6914      	ldr	r4, [r2, #16]
   ba346:	3101      	adds	r1, #1
   ba348:	f102 0314 	add.w	r3, r2, #20
   ba34c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ba350:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ba354:	1f05      	subs	r5, r0, #4
   ba356:	42a3      	cmp	r3, r4
   ba358:	d30c      	bcc.n	ba374 <__copybits+0x36>
   ba35a:	1aa3      	subs	r3, r4, r2
   ba35c:	3b11      	subs	r3, #17
   ba35e:	f023 0303 	bic.w	r3, r3, #3
   ba362:	3211      	adds	r2, #17
   ba364:	42a2      	cmp	r2, r4
   ba366:	bf88      	it	hi
   ba368:	2300      	movhi	r3, #0
   ba36a:	4418      	add	r0, r3
   ba36c:	2300      	movs	r3, #0
   ba36e:	4288      	cmp	r0, r1
   ba370:	d305      	bcc.n	ba37e <__copybits+0x40>
   ba372:	bd70      	pop	{r4, r5, r6, pc}
   ba374:	f853 6b04 	ldr.w	r6, [r3], #4
   ba378:	f845 6f04 	str.w	r6, [r5, #4]!
   ba37c:	e7eb      	b.n	ba356 <__copybits+0x18>
   ba37e:	f840 3b04 	str.w	r3, [r0], #4
   ba382:	e7f4      	b.n	ba36e <__copybits+0x30>

000ba384 <__any_on>:
   ba384:	f100 0214 	add.w	r2, r0, #20
   ba388:	6900      	ldr	r0, [r0, #16]
   ba38a:	114b      	asrs	r3, r1, #5
   ba38c:	4298      	cmp	r0, r3
   ba38e:	b510      	push	{r4, lr}
   ba390:	db11      	blt.n	ba3b6 <__any_on+0x32>
   ba392:	dd0a      	ble.n	ba3aa <__any_on+0x26>
   ba394:	f011 011f 	ands.w	r1, r1, #31
   ba398:	d007      	beq.n	ba3aa <__any_on+0x26>
   ba39a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ba39e:	fa24 f001 	lsr.w	r0, r4, r1
   ba3a2:	fa00 f101 	lsl.w	r1, r0, r1
   ba3a6:	428c      	cmp	r4, r1
   ba3a8:	d10b      	bne.n	ba3c2 <__any_on+0x3e>
   ba3aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ba3ae:	4293      	cmp	r3, r2
   ba3b0:	d803      	bhi.n	ba3ba <__any_on+0x36>
   ba3b2:	2000      	movs	r0, #0
   ba3b4:	bd10      	pop	{r4, pc}
   ba3b6:	4603      	mov	r3, r0
   ba3b8:	e7f7      	b.n	ba3aa <__any_on+0x26>
   ba3ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ba3be:	2900      	cmp	r1, #0
   ba3c0:	d0f5      	beq.n	ba3ae <__any_on+0x2a>
   ba3c2:	2001      	movs	r0, #1
   ba3c4:	e7f6      	b.n	ba3b4 <__any_on+0x30>

000ba3c6 <_calloc_r>:
   ba3c6:	b513      	push	{r0, r1, r4, lr}
   ba3c8:	434a      	muls	r2, r1
   ba3ca:	4611      	mov	r1, r2
   ba3cc:	9201      	str	r2, [sp, #4]
   ba3ce:	f7fb ff3b 	bl	b6248 <_malloc_r>
   ba3d2:	4604      	mov	r4, r0
   ba3d4:	b118      	cbz	r0, ba3de <_calloc_r+0x18>
   ba3d6:	9a01      	ldr	r2, [sp, #4]
   ba3d8:	2100      	movs	r1, #0
   ba3da:	f7fd ffd1 	bl	b8380 <memset>
   ba3de:	4620      	mov	r0, r4
   ba3e0:	b002      	add	sp, #8
   ba3e2:	bd10      	pop	{r4, pc}
   ba3e4:	0000      	movs	r0, r0
	...

000ba3e8 <nan>:
   ba3e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba3f0 <nan+0x8>
   ba3ec:	4770      	bx	lr
   ba3ee:	bf00      	nop
   ba3f0:	00000000 	.word	0x00000000
   ba3f4:	7ff80000 	.word	0x7ff80000

000ba3f8 <nanf>:
   ba3f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; ba400 <nanf+0x8>
   ba3fc:	4770      	bx	lr
   ba3fe:	bf00      	nop
   ba400:	7fc00000 	.word	0x7fc00000

000ba404 <__ascii_wctomb>:
   ba404:	b149      	cbz	r1, ba41a <__ascii_wctomb+0x16>
   ba406:	2aff      	cmp	r2, #255	; 0xff
   ba408:	bf85      	ittet	hi
   ba40a:	238a      	movhi	r3, #138	; 0x8a
   ba40c:	6003      	strhi	r3, [r0, #0]
   ba40e:	700a      	strbls	r2, [r1, #0]
   ba410:	f04f 30ff 	movhi.w	r0, #4294967295
   ba414:	bf98      	it	ls
   ba416:	2001      	movls	r0, #1
   ba418:	4770      	bx	lr
   ba41a:	4608      	mov	r0, r1
   ba41c:	4770      	bx	lr

000ba41e <link_code_end>:
	...

000ba420 <link_const_data_start>:
   ba420:	514d0400 	.word	0x514d0400
   ba424:	00045454 	.word	0x00045454
   ba428:	49514d06 	.word	0x49514d06
   ba42c:	03706473 	.word	0x03706473

000ba430 <dynalib_user>:
   ba430:	000b4b15 000b4b51 000b4b79 000b4b7d     .K..QK..yK..}K..
   ba440:	00000000 6c6c6163 6b636162 6c616320     ....callback cal
   ba450:	0064656c 646e6168 735f656c 6f736e65     led.handle_senso
   ba460:	61632072 64656c6c 54414400 41502041     r called.DATA PA
   ba470:	47414b43 00232045 6e617254 73696d73     CKAGE #.Transmis
   ba480:	6e6f6973 6e656c20 3a687467 23230020     sion length: .##
   ba490:	23232323 23232323 23232323 45564520     ############ EVE
   ba4a0:	2320544e 23232323 23232323 23232323     NT #############
   ba4b0:	23232323 23232300 23232323 23232323     ####.###########
   ba4c0:	20232323 4e455645 4e452054 23232044     ### EVENT END ##
   ba4d0:	23232323 23232323 23232323 23232323     ################
   ba4e0:	00232323 69736162 74735f63 676e6972     ###.basic_string
   ba4f0:	70613a3a 646e6570 504f5000 54414c55     ::append.POPULAT
   ba500:	44454545 49202121 6f73206d 70616820     EEED!! Im so hap
   ba510:	002e7970 00210054 696f7473 6f747300     py..T.!.stoi.sto
   ba520:	65520066 6e6e6f63 69746365 7300676e     f.Reconnecting.s
   ba530:	6b726170 65696c63 005f746e 7474716d     parkclient_.mqtt
   ba540:	4c414300 414c5543 474e4954 67694800     .CALCULATING.Hig
   ba550:	74736568 69727020 6f206563 68742066     hest price of th
   ba560:	61642065 25203a79 4c000a66 7365776f     e day: %f..Lowes
   ba570:	72702074 20656369 7420666f 64206568     t price of the d
   ba580:	203a7961 000a6625 72756f48 666f2073     ay: %f..Hours of
   ba590:	65687420 79616420 65687720 65206572      the day where e
   ba5a0:	7463656c 69636972 69207974 69772073     lectricity is wi
   ba5b0:	6e696874 63636120 65747065 61722064     thin accepted ra
   ba5c0:	3a65676e 3025000a 74206432 3025206f     nge:..%02d to %0
   ba5d0:	000a6432 65696c43 6420746e 6f637369     2d..Client disco
   ba5e0:	63656e6e 0a646574 67694c00 203a7468     nnected..Light: 
   ba5f0:	000a6425 72727543 20746e65 4d3a4848     %d..Current HH:M
   ba600:	25203a4d 3a643230 64323025 6e49000a     M: %02d:%02d..In
   ba610:	726f7720 43000a6b 70616568 68736928      work..Cheap(ish
   ba620:	6f682029 20737275 7420666f 64206568     ) hours of the d
   ba630:	203a7961 32302500 6f742064 32302520     ay: .%02d to %02
   ba640:	00202c64 20776f4c 63697270 6f682065     d, .Low price ho
   ba650:	00737275 65636552 64657669 776f7020     urs.Received pow
   ba660:	672f7265 000a7465 65776f70 207b0072     er/get..power.{ 
   ba670:	61657922 203a2272 22642522 2200202c     "year": "%d", ."
   ba680:	746e6f6d 203a2268 32302522 202c2264     month": "%02d", 
   ba690:	61642200 203a2279 32302522 202c2264     ."day": "%02d", 
   ba6a0:	61642200 77745f79 203a226f 32302522     ."day_two": "%02
   ba6b0:	202c2264 6f682200 3a227275 30252220     d", ."hour": "%0
   ba6c0:	20226432 6c65007d 73697270 64007265     2d" }.elpriser.d
   ba6d0:	20617461 75716572 65747365 202d2064     ata requested - 
   ba6e0:	6c627570 65687369 65222064 6972706c     published "elpri
   ba6f0:	22726573 74656700 6972705f 00736563     ser".get_prices.
   ba700:	73627573 62697263 002e6465 75746552     subscribed..Retu
   ba710:	76206e72 65756c61 6425203a 6c656800     rn value: %d.hel
   ba720:	77206f6c 646c726f 776f7000 672f7265     lo world.power/g
   ba730:	70007465 7265776f 6972702f 00736563     et.power/prices.
   ba740:	7250796d 48656369 6c646e61 66207265     myPriceHandler f
   ba750:	64657269 32393100 3836312e 312e312e     ired.192.168.1.1
   ba760:	00003230                                02..

000ba764 <_ZTVN5spark13EthernetClassE>:
	...
   ba76c:	000b62f7 000b62ed 000b62e3 000b62d9     .b...b...b...b..
   ba77c:	000b62cd 000b62c1 000b798d 000b7995     .b...b...y...y..
   ba78c:	000b62b5 000b62ad 000b62a3 000b6299     .b...b...b...b..
   ba79c:	000b79c5                                .y..

000ba7a0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba7a8:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   ba7b8:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000ba7c8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba7d0:	000b6a4d 000b6a53 000b6a91 000b6a61     Mj..Sj...j..aj..
   ba7e0:	000b6a4f                                Oj..

000ba7e4 <_ZTV9IPAddress>:
	...
   ba7ec:	000b6f8d 000b6f7d 000b6f7f              .o..}o...o..

000ba7f8 <_ZTV9USBSerial>:
	...
   ba800:	000b709f 000b7107 000b70dd 000b6621     .p...q...p..!f..
   ba810:	000b70cf 000b70a1 000b70b1 000b7101     .p...p...p...q..
   ba820:	000b70c1 000b7099                       .p...p..

000ba828 <_ZTV11USARTSerial>:
	...
   ba830:	000b71f1 000b725d 000b7235 000b6621     .q..]r..5r..!f..
   ba840:	000b7205 000b7221 000b7213 000b722f     .r..!r...r../r..
   ba850:	000b71f3 000b71f7                       .q...q..

000ba858 <_ZTV7TwoWire>:
	...
   ba860:	000b72bd 000b7307 000b72df 000b72bf     .r...s...r...r..
   ba870:	000b72e7 000b72ef 000b72f7 000b72ff     .r...r...r...r..
   ba880:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   ba890:	203d2072 00006425                       r = %d..

000ba898 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba8a0:	000b73bd 000b73e1 000b78cb 000b73ef     .s...s...x...s..
   ba8b0:	000b73c1                                .s..

000ba8b4 <_ZTV9TCPClient>:
	...
   ba8bc:	000b68dd 000b68f5 000b7339 000b7353     .h...h..9s..Ss..
   ba8cc:	000b7761 000b737d 000b75d7 000b73b1     aw..}s...u...s..
   ba8dc:	000b7669 000b74a9 000b7605 000b7815     iv...t...v...x..
   ba8ec:	000b75a5 000b73b3 000b7365 000b73f5     .u...s..es...s..
   ba8fc:	000b7489                                .t..

000ba900 <_ZTVN5spark9WiFiClassE>:
	...
   ba908:	000b792f 000b7925 000b791b 000b78d1     /y..%y...y...x..
   ba918:	000b790f 000b7903 000b798d 000b7995     .y...y...y...y..
   ba928:	000b78f7 000b78ef 000b78e5 000b78db     .x...x...x...x..
   ba938:	000b79c5                                .y..

000ba93c <_ZTVN5spark12NetworkClassE>:
	...
   ba944:	000b794d 000b7957 000b7961 000b796b     My..Wy..ay..ky..
   ba954:	000b7975 000b7981 000b798d 000b7995     uy...y...y...y..
   ba964:	000b799d 000b79a9 000b79b1 000b79bb     .y...y...y...y..
   ba974:	000b79c5                                .y..

000ba978 <_ZSt7nothrow>:
	...

000ba979 <_ZTSSt19_Sp_make_shared_tag>:
   ba979:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   ba989:	5f646572 00676174                        red_tag....

000ba994 <_ZTISt19_Sp_make_shared_tag>:
   ba994:	000baaf4 000ba979 20746f6e 756f6e65     ....y...not enou
   ba9a4:	73206867 65636170 726f6620 726f6620     gh space for for
   ba9b4:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   ba9c4:	7361656c 75732065 74696d62 6c756620     lease submit ful
   ba9d4:	7562206c 65722067 74726f70 20746120     l bug report at 
   ba9e4:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   ba9f4:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   baa04:	32313000 36353433 00393837 69736162     .0123456789.basi
   baa14:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   baa24:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
   baa34:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
   baa44:	2d736968 7a69733e 20292865 69687728     his->size() (whi
   baa54:	69206863 7a252073 62002975 63697361     ch is %zu).basic
   baa64:	7274735f 3a676e69 5f4d5f3a 736e6f63     _string::_M_cons
   baa74:	63757274 756e2074 6e206c6c 7620746f     truct null not v
   baa84:	64696c61 73616200 735f6369 6e697274     alid.basic_strin
   baa94:	623a3a67 63697361 7274735f 00676e69     g::basic_string.
   baaa4:	69736162 74735f63 676e6972 75733a3a     basic_string::su
   baab4:	72747362 00000000                       bstr....

000baabc <_ZTIN10__cxxabiv117__class_type_infoE>:
   baabc:	000bab54 000baac8 000bab78              T.......x...

000baac8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   baac8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   baad8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   baae8:	00000045                                E...

000baaec <_ZTVN10__cxxabiv117__class_type_infoE>:
   baaec:	00000000 000baabc 000b8105 000b8119     ................
   baafc:	000b82ad 000b82ad 000b8183 000b80c5     ................
   bab0c:	000b816b 000b812d 000b80f7              k...-.......

000bab18 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bab18:	000bab54 000bab24 000baabc              T...$.......

000bab24 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bab24:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bab34:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bab44:	456f666e 00000000                       nfoE....

000bab4c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bab4c:	00000000 000bab18 000b81ad 000b81c1     ................
   bab5c:	000b82ad 000b82ad 000b8183 000b80c5     ................
   bab6c:	000b8281 000b820d 000b81d5              ............

000bab78 <_ZTISt9type_info>:
   bab78:	000baaf4 000bab80                       ........

000bab80 <_ZTSSt9type_info>:
   bab80:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bab90:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   baba0:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   babb0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   babc0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   babd0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   babe0:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   babf0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bac00:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bac10:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   bac20:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000bac30 <fpi.1>:
   bac30:	00000035 fffffbce 000003cb 00000001     5...............
   bac40:	00000000                                ....

000bac44 <fpinan.0>:
   bac44:	00000034 fffffbce 000003cb 00000001     4...............
   bac54:	00000000                                ....

000bac58 <tinytens>:
   bac58:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bac68:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bac78:	64ac6f43 11680628                       Co.d(.h.

000bac80 <_ctype_>:
   bac80:	20202000 20202020 28282020 20282828     .         ((((( 
   bac90:	20202020 20202020 20202020 20202020                     
   baca0:	10108820 10101010 10101010 10101010      ...............
   bacb0:	04040410 04040404 10040404 10101010     ................
   bacc0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bacd0:	01010101 01010101 01010101 10101010     ................
   bace0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bacf0:	02020202 02020202 02020202 10101010     ................
   bad00:	00000020 00000000 00000000 00000000      ...............
	...
   bad80:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bad90:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bada0:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   badb0:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   badc0:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   badd0:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bade0:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   badf0:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bae00:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bae10:	78656874 0000632e                       thex.c..

000bae18 <_C_numeric_locale>:
   bae18:	000ba70a 000ba5c5 2003cd6c 4f500043     ........l.. C.PO
   bae28:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bae38:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bae48:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bae58:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bae68:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bae78:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bae88:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bae98:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   baea8:	00000063 00000000                       c.......

000baeb0 <__mprec_bigtens>:
   baeb0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   baec0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   baed0:	7f73bf3c 75154fdd                       <.s..O.u

000baed8 <__mprec_tens>:
   baed8:	00000000 3ff00000 00000000 40240000     .......?......$@
   baee8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   baef8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   baf08:	00000000 412e8480 00000000 416312d0     .......A......cA
   baf18:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   baf28:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   baf38:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   baf48:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   baf58:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   baf68:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   baf78:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   baf88:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   baf98:	79d99db4 44ea7843                       ...yCx.D

000bafa0 <p05.0>:
   bafa0:	00000005 00000019 0000007d              ........}...

000bafac <link_const_data_end>:
   bafac:	000b546d 	.word	0x000b546d
   bafb0:	000b54c1 	.word	0x000b54c1
   bafb4:	000b6301 	.word	0x000b6301
   bafb8:	000b6329 	.word	0x000b6329
   bafbc:	000b6611 	.word	0x000b6611
   bafc0:	000b6749 	.word	0x000b6749
   bafc4:	000b68c1 	.word	0x000b68c1
   bafc8:	000b6909 	.word	0x000b6909
   bafcc:	000b7939 	.word	0x000b7939
   bafd0:	000b7a9d 	.word	0x000b7a9d
